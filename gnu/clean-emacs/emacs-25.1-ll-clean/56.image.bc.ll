; ModuleID = './src/image.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct._XGC = type opaque
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, {}*, {}*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct._XDisplay = type opaque
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.text_pos = type { i64, i64 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%union.anon.1 = type { i32 }
%struct.xwidget = type opaque
%struct.glyph_slice = type { i64 }
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.kboard = type opaque
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type opaque
%struct.coding_system = type { i64, i32, i32, %union.anon.5, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.5 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.6, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type opaque
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.ct_color = type { i32, i32, i32, i64, %struct.ct_color* }
%struct.image_keyword = type { i8*, i32, i8, i32, i64 }
%struct.x_output = type { i32, i32, i32, i32, i32, i64, %struct._XGC*, %struct._XGC*, %struct._XGC*, i64, i64, i64, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i8, %struct._GdkGeometry, i64, %struct._GtkTooltip*, %struct._GtkWidget*, %struct._GtkWindow*, i64, %struct.font*, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.XWMHints, %struct.x_display_info*, %union._XEvent*, i8, %struct._XIC*, i64, %struct._XOC*, %struct.relief, %struct.relief, i64, i32, i32, i32 }
%struct._GdkGeometry = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32 }
%struct._GtkTooltip = type opaque
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GdkFont = type { i32, i32, i32 }
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDrawable = type { %struct._GObject }
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._cairo_font_options = type opaque
%struct.XWMHints = type { i64, i32, i32, i64, i64, i32, i32, i64, i64 }
%struct.x_display_info = type { %struct.x_display_info*, %struct.terminal*, %struct._XDisplay*, i32, i64, i32, %struct.Screen*, double, double, %struct.Visual*, i64, i32, i32, i64, i64, i64, i64, i64, i64, void (%struct.frame*, i1)*, %struct._GdkCursor*, %struct._XrmHashBucketRec*, i32, i32, %struct._XGC*, %struct.Mouse_HLInfo, i32, i8*, i32, %struct.x_bitmap_record*, i64, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.scroll_bar*, i64, i32, i32, %struct.XRectangle, i64, i64, %struct._XIM*, %struct.XIMStyles*, %struct.xim_inst_t*, %struct.color_name_cache_entry*, %struct.XColor*, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i64, i64, i64, i64, i64*, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.xcb_connection_t* }
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct._GdkCursor = type { i32, i32 }
%struct._XrmHashBucketRec = type opaque
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.x_bitmap_record = type { i64, i8, i64, i8*, i32, i32, i32, i32 }
%struct.scroll_bar = type { %struct.vectorlike_header, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct._XIM = type opaque
%struct.XIMStyles = type { i16, i64* }
%struct.xim_inst_t = type { %struct.x_display_info*, i8* }
%struct.color_name_cache_entry = type { %struct.color_name_cache_entry*, %struct.XColor, i8* }
%struct.XColor = type { i64, i16, i16, i16, i8, i8 }
%struct.xcb_connection_t = type opaque
%union._XEvent = type { [24 x i64] }
%struct._XIC = type opaque
%struct._XOC = type opaque
%struct.relief = type { %struct._XGC*, i64 }
%struct.XGCValues = type { i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i64, i32, i32, i32, i32, i64, i32, i8 }
%struct.Lisp_Cons = type { i64, %union.anon.11 }
%union.anon.11 = type { i64 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.12, i16, i16, i8*, i8*, i8* }
%union.anon.12 = type { i64 ()* }
%struct.anon.13 = type { %struct._XExtData*, %struct._XPrivate*, i32, i32, i32, i32, i8*, i64, i64, i64, i32, i64 (%struct._XDisplay*)*, i32, i32, i32, i32, i32, %struct.ScreenFormat*, i32, i32, %struct._XPrivate*, %struct._XPrivate*, i32, i64, i64, i8*, i8*, i8*, i8*, i32, %struct._XrmHashBucketRec*, i32 (%struct._XDisplay*)*, i8*, i32, i32, %struct.Screen*, i64, i64, i32, i32, i8*, i8*, i32, i8* }
%struct.ScreenFormat = type { %struct._XExtData*, i32, i32, i32 }
%struct._XPrivate = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.png_load_context = type { %struct.png_struct_def*, %struct.png_info_def*, %struct.png_info_def*, %struct._IO_FILE*, i8*, i8** }
%struct.png_struct_def = type opaque
%struct.png_info_def = type opaque
%struct.png_memory_storage = type { i8*, i64, i64 }
%struct.png_color_16_struct = type { i8, i16, i16, i16, i16 }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }

@globals = external global %struct.emacs_globals, align 8
@.str = private unnamed_addr constant [28 x i8] c"Invalid image specification\00", align 1
@Vframe_list = external global i64, align 8
@.str.1 = private unnamed_addr constant [53 x i8] c"Cannot get X image of `%s'; colors will not be freed\00", align 1
@image_types = internal global %struct.image_type* null, align 8
@syms_of_image.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.2 = private unnamed_addr constant [12 x i8] c"image-types\00", align 1
@syms_of_image.o_fwd.3 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.4 = private unnamed_addr constant [15 x i8] c"max-image-size\00", align 1
@syms_of_image.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.5 = private unnamed_addr constant [22 x i8] c"cross-disabled-images\00", align 1
@syms_of_image.o_fwd.6 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.7 = private unnamed_addr constant [19 x i8] c"x-bitmap-file-path\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"/usr/include/X11/bitmaps\00", align 1
@syms_of_image.o_fwd.9 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.10 = private unnamed_addr constant [27 x i8] c"image-cache-eviction-delay\00", align 1
@windows_or_buffers_changed = external global i32, align 4
@frame_garbaged = external global i8, align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"#%04x%04x%04x\00", align 1
@ct_table = internal global %struct.ct_color** null, align 8
@ct_colors_allocated = internal global i32 0, align 4
@laplace_matrix = internal global [9 x i32] [i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1], align 16
@emboss_matrix = internal global [9 x i32] [i32 2, i32 -1, i32 0, i32 -1, i32 0, i32 1, i32 0, i32 1, i32 -2], align 16
@.str.12 = private unnamed_addr constant [27 x i8] c"Unable to allocate X image\00", align 1
@.str.13 = private unnamed_addr constant [24 x i8] c"Image too large (%dx%d)\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"Unable to create X pixmap\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"images\00", align 1
@pbm_type = internal global %struct.image_type { i32 743, i1 (i64)* @pbm_image_p, i1 (%struct.frame*, %struct.image*)* @pbm_load, void (%struct.frame*, %struct.image*)* @x_clear_image, i1 ()* null, %struct.image_type* null }, align 8
@xbm_type = internal global %struct.image_type { i32 1062, i1 (i64)* @xbm_image_p, i1 (%struct.frame*, %struct.image*)* @xbm_load, void (%struct.frame*, %struct.image*)* @x_clear_image, i1 ()* null, %struct.image_type* null }, align 8
@png_type = internal global %struct.image_type { i32 754, i1 (i64)* @png_image_p, i1 (%struct.frame*, %struct.image*)* @png_load, void (%struct.frame*, %struct.image*)* @x_clear_image, i1 ()* null, %struct.image_type* null }, align 8
@gs_type = internal global %struct.image_type { i32 765, i1 (i64)* @gs_image_p, i1 (%struct.frame*, %struct.image*)* @gs_load, void (%struct.frame*, %struct.image*)* @gs_clear_image, i1 ()* null, %struct.image_type* null }, align 8
@pbm_format = internal constant [11 x %struct.image_keyword] [%struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i32 3, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i32 1, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i32 1, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), i32 7, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), i32 5, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i32 8, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i32 2, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i32 2, i8 0, i32 0, i64 0 }], align 16
@.str.16 = private unnamed_addr constant [6 x i8] c":type\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c":file\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c":data\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c":ascent\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c":margin\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c":relief\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c":conversion\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c":heuristic-mask\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c":mask\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c":foreground\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c":background\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"Cannot find image file `%s'\00", align 1
@.str.28 = private unnamed_addr constant [19 x i8] c"Error reading `%s'\00", align 1
@.str.29 = private unnamed_addr constant [24 x i8] c"Invalid image data `%s'\00", align 1
@.str.30 = private unnamed_addr constant [22 x i8] c"Not a PBM image: `%s'\00", align 1
@.str.31 = private unnamed_addr constant [36 x i8] c"Unsupported maximum PBM color value\00", align 1
@.str.32 = private unnamed_addr constant [33 x i8] c"Invalid image size in image `%s'\00", align 1
@.str.33 = private unnamed_addr constant [34 x i8] c"Invalid pixel value in image `%s'\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.35 = private unnamed_addr constant [42 x i8] c"Invalid image size (see `max-image-size')\00", align 1
@xbm_format = internal constant [13 x %struct.image_keyword] [%struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i32 3, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i32 1, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i32 0, i32 0), i32 4, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i32 0, i32 0), i32 4, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i32 2, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i32 2, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), i32 7, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), i32 5, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i32 8, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }], align 16
@.str.36 = private unnamed_addr constant [7 x i8] c":width\00", align 1
@.str.37 = private unnamed_addr constant [8 x i8] c":height\00", align 1
@.str.38 = private unnamed_addr constant [7 x i8] c"define\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"height\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"static\00", align 1
@.str.42 = private unnamed_addr constant [9 x i8] c"unsigned\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"char\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"short\00", align 1
@.str.45 = private unnamed_addr constant [29 x i8] c"Error loading XBM image `%s'\00", align 1
@.str.46 = private unnamed_addr constant [43 x i8] c"Unable to create pixmap for XBM image `%s'\00", align 1
@.str.47 = private unnamed_addr constant [35 x i8] c"Unable to create X pixmap for `%s'\00", align 1
@png_format = internal constant [10 x %struct.image_keyword] [%struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i32 3, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i32 1, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i32 1, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), i32 7, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), i32 5, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i32 8, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i32 2, i8 0, i32 0, i64 0 }], align 16
@.str.48 = private unnamed_addr constant [28 x i8] c"Cannot open image file `%s'\00", align 1
@.str.49 = private unnamed_addr constant [21 x i8] c"Not a PNG file: `%s'\00", align 1
@.str.50 = private unnamed_addr constant [22 x i8] c"Not a PNG image: `%s'\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"1.5.13\00", align 1
@.str.52 = private unnamed_addr constant [14 x i8] c"PNG error: %s\00", align 1
@.str.53 = private unnamed_addr constant [16 x i8] c"PNG warning: %s\00", align 1
@.str.54 = private unnamed_addr constant [11 x i8] c"Read error\00", align 1
@gs_format = internal constant [13 x %struct.image_keyword] [%struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i32 3, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.55, i32 0, i32 0), i32 4, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i32 0, i32 0), i32 4, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0), i32 1, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), i32 9, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.58, i32 0, i32 0), i32 0, i8 1, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), i32 7, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0), i32 5, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i32 8, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i32 0, i8 0, i32 0, i64 0 }, %struct.image_keyword { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i32 2, i8 0, i32 0, i64 0 }], align 16
@.str.55 = private unnamed_addr constant [10 x i8] c":pt-width\00", align 1
@.str.56 = private unnamed_addr constant [11 x i8] c":pt-height\00", align 1
@.str.57 = private unnamed_addr constant [8 x i8] c":loader\00", align 1
@.str.58 = private unnamed_addr constant [14 x i8] c":bounding-box\00", align 1
@.str.59 = private unnamed_addr constant [33 x i8] c"Unable to create pixmap for `%s'\00", align 1
@.str.60 = private unnamed_addr constant [8 x i8] c"%lu %lu\00", align 1
@.str.61 = private unnamed_addr constant [14 x i8] c"gs-load-image\00", align 1
@.str.62 = private unnamed_addr constant [19 x i8] c"init-image-library\00", align 1
@Sinit_image_library = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Finit_image_library }, i16 1, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.62, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.63 = private unnamed_addr constant [18 x i8] c"clear-image-cache\00", align 1
@Sclear_image_cache = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fclear_image_cache }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.63, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.64 = private unnamed_addr constant [12 x i8] c"image-flush\00", align 1
@Simage_flush = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fimage_flush }, i16 1, i16 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.65 = private unnamed_addr constant [11 x i8] c"image-size\00", align 1
@Simage_size = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fimage_size }, i16 1, i16 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.66 = private unnamed_addr constant [13 x i8] c"image-mask-p\00", align 1
@Simage_mask_p = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fimage_mask_p }, i16 1, i16 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.66, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.67 = private unnamed_addr constant [15 x i8] c"image-metadata\00", align 1
@Simage_metadata = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fimage_metadata }, i16 1, i16 2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind uwtable
define i64 @x_bitmap_pixmap(%struct.frame* %f, i64 %id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %id.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %id, i64* %id.addr, align 8
  %0 = load i64, i64* %id.addr, align 8
  %sub = sub nsw i64 %0, 1
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 29
  %4 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %4, i64 %sub
  %pixmap = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 0
  %5 = load i64, i64* %pixmap, align 8
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define i32 @x_bitmap_mask(%struct.frame* %f, i64 %id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %id.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %id, i64* %id.addr, align 8
  %0 = load i64, i64* %id.addr, align 8
  %sub = sub nsw i64 %0, 1
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 29
  %4 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %4, i64 %sub
  %mask = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 2
  %5 = load i64, i64* %mask, align 8
  %conv = trunc i64 %5 to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define void @x_reference_bitmap(%struct.frame* %f, i64 %id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %id.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %id, i64* %id.addr, align 8
  %0 = load i64, i64* %id.addr, align 8
  %sub = sub nsw i64 %0, 1
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 29
  %4 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %4, i64 %sub
  %refcount = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 4
  %5 = load i32, i32* %refcount, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %refcount, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @x_create_bitmap_from_data(%struct.frame* %f, i8* %bits, i32 %width, i32 %height) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %bits.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %id = alloca i64, align 8
  %bitmap = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %bits, i8** %bits.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 44
  %5 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 2
  %6 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 9
  %9 = load i64, i64* %window_desc, align 8
  %10 = load i8*, i8** %bits.addr, align 8
  %11 = load i32, i32* %width.addr, align 4
  %12 = load i32, i32* %height.addr, align 4
  %call = call i64 @XCreateBitmapFromData(%struct._XDisplay* %6, i64 %9, i8* %10, i32 %11, i32 %12)
  store i64 %call, i64* %bitmap, align 8
  %13 = load i64, i64* %bitmap, align 8
  %tobool = icmp ne i64 %13, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call6 = call i64 @x_allocate_bitmap_record(%struct.frame* %14)
  store i64 %call6, i64* %id, align 8
  %15 = load i64, i64* %id, align 8
  %sub = sub nsw i64 %15, 1
  %16 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %16, i32 0, i32 29
  %17 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %17, i64 %sub
  %file = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 3
  store i8* null, i8** %file, align 8
  %18 = load i32, i32* %height.addr, align 4
  %19 = load i64, i64* %id, align 8
  %sub7 = sub nsw i64 %19, 1
  %20 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps8 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %20, i32 0, i32 29
  %21 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps8, align 8
  %arrayidx9 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %21, i64 %sub7
  %height10 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx9, i32 0, i32 5
  store i32 %18, i32* %height10, align 4
  %22 = load i32, i32* %width.addr, align 4
  %23 = load i64, i64* %id, align 8
  %sub11 = sub nsw i64 %23, 1
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps12 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 29
  %25 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps12, align 8
  %arrayidx13 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %25, i64 %sub11
  %width14 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx13, i32 0, i32 6
  store i32 %22, i32* %width14, align 4
  %26 = load i64, i64* %id, align 8
  %sub15 = sub nsw i64 %26, 1
  %27 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps16 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %27, i32 0, i32 29
  %28 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps16, align 8
  %arrayidx17 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %28, i64 %sub15
  %refcount = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx17, i32 0, i32 4
  store i32 1, i32* %refcount, align 4
  %29 = load i64, i64* %bitmap, align 8
  %30 = load i64, i64* %id, align 8
  %sub18 = sub nsw i64 %30, 1
  %31 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps19 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %31, i32 0, i32 29
  %32 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps19, align 8
  %arrayidx20 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %32, i64 %sub18
  %pixmap = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx20, i32 0, i32 0
  store i64 %29, i64* %pixmap, align 8
  %33 = load i64, i64* %id, align 8
  %sub21 = sub nsw i64 %33, 1
  %34 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps22 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %34, i32 0, i32 29
  %35 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps22, align 8
  %arrayidx23 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %35, i64 %sub21
  %have_mask = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx23, i32 0, i32 1
  store i8 0, i8* %have_mask, align 1
  %36 = load i64, i64* %id, align 8
  %sub24 = sub nsw i64 %36, 1
  %37 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps25 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %37, i32 0, i32 29
  %38 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps25, align 8
  %arrayidx26 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %38, i64 %sub24
  %depth = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx26, i32 0, i32 7
  store i32 1, i32* %depth, align 4
  %39 = load i64, i64* %id, align 8
  store i64 %39, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %40 = load i64, i64* %retval
  ret i64 %40
}

declare i64 @XCreateBitmapFromData(%struct._XDisplay*, i64, i8*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal i64 @x_allocate_bitmap_record(%struct.frame* %f) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %i = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps_last = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 31
  %4 = load i64, i64* %bitmaps_last, align 8
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps_size = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 30
  %6 = load i64, i64* %bitmaps_size, align 8
  %cmp = icmp slt i64 %4, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps_last1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 31
  %8 = load i64, i64* %bitmaps_last1, align 8
  %inc = add nsw i64 %8, 1
  store i64 %inc, i64* %bitmaps_last1, align 8
  store i64 %inc, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i64, i64* %i, align 8
  %10 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps_size2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 30
  %11 = load i64, i64* %bitmaps_size2, align 8
  %cmp3 = icmp slt i64 %9, %11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %i, align 8
  %13 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %13, i32 0, i32 29
  %14 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %14, i64 %12
  %refcount = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 4
  %15 = load i32, i32* %refcount, align 4
  %cmp4 = icmp eq i32 %15, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %for.body
  %16 = load i64, i64* %i, align 8
  %add = add nsw i64 %16, 1
  store i64 %add, i64* %retval
  br label %return

if.end.6:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.6
  %17 = load i64, i64* %i, align 8
  %inc7 = add nsw i64 %17, 1
  store i64 %inc7, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps8 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %18, i32 0, i32 29
  %19 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps8, align 8
  %20 = bitcast %struct.x_bitmap_record* %19 to i8*
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps_size9 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 30
  %call = call i8* @xpalloc(i8* %20, i64* %bitmaps_size9, i64 10, i64 -1, i64 48)
  %22 = bitcast i8* %call to %struct.x_bitmap_record*
  %23 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %23, i32 0, i32 29
  store %struct.x_bitmap_record* %22, %struct.x_bitmap_record** %bitmaps10, align 8
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps_last11 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 31
  %25 = load i64, i64* %bitmaps_last11, align 8
  %inc12 = add nsw i64 %25, 1
  store i64 %inc12, i64* %bitmaps_last11, align 8
  store i64 %inc12, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.5, %if.then
  %26 = load i64, i64* %retval
  ret i64 %26
}

; Function Attrs: nounwind uwtable
define i64 @x_create_bitmap_from_file(%struct.frame* %f, i64 %file) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %file.addr = alloca i64, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %bitmap = alloca i64, align 8
  %xhot = alloca i32, align 4
  %yhot = alloca i32, align 4
  %result = alloca i32, align 4
  %id = alloca i64, align 8
  %found = alloca i64, align 8
  %filename = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %file, i64* %file.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  store i64 0, i64* %id, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %id, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps_last = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 31
  %5 = load i64, i64* %bitmaps_last, align 8
  %cmp = icmp slt i64 %3, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %id, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 29
  %8 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %8, i64 %6
  %refcount = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 4
  %9 = load i32, i32* %refcount, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %10 = load i64, i64* %id, align 8
  %11 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 29
  %12 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps1, align 8
  %arrayidx2 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %12, i64 %10
  %file3 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx2, i32 0, i32 3
  %13 = load i8*, i8** %file3, align 8
  %tobool4 = icmp ne i8* %13, null
  br i1 %tobool4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %14 = load i64, i64* %id, align 8
  %15 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps6 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 29
  %16 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps6, align 8
  %arrayidx7 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %16, i64 %14
  %file8 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx7, i32 0, i32 3
  %17 = load i8*, i8** %file8, align 8
  %18 = load i64, i64* %file.addr, align 8
  %call = call i8* @SSDATA(i64 %18)
  %call9 = call i32 @strcmp(i8* %17, i8* %call) #10
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.5
  %19 = load i64, i64* %id, align 8
  %20 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps11 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %20, i32 0, i32 29
  %21 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps11, align 8
  %arrayidx12 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %21, i64 %19
  %refcount13 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx12, i32 0, i32 4
  %22 = load i32, i32* %refcount13, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %refcount13, align 4
  %23 = load i64, i64* %id, align 8
  %add = add nsw i64 %23, 1
  store i64 %add, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.5, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i64, i64* %id, align 8
  %inc14 = add nsw i64 %24, 1
  store i64 %inc14, i64* %id, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 343), align 8
  %26 = load i64, i64* %file.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %call16 = call i32 @openp(i64 %25, i64 %26, i64 %call15, i64* %found, i64 18, i1 zeroext false)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %for.end
  store i64 -1, i64* %retval
  br label %return

if.end.19:                                        ; preds = %for.end
  %27 = load i64, i64* %found, align 8
  %call20 = call i8* @SSDATA(i64 %27)
  store i8* %call20, i8** %filename, align 8
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data21 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x22 = bitcast %union.output_data* %output_data21 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x22, align 8
  %display_info23 = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 44
  %30 = load %struct.x_display_info*, %struct.x_display_info** %display_info23, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %30, i32 0, i32 2
  %31 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data24 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 62
  %x25 = bitcast %union.output_data* %output_data24 to %struct.x_output**
  %33 = load %struct.x_output*, %struct.x_output** %x25, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %33, i32 0, i32 9
  %34 = load i64, i64* %window_desc, align 8
  %35 = load i8*, i8** %filename, align 8
  %call26 = call i32 @XReadBitmapFile(%struct._XDisplay* %31, i64 %34, i8* %35, i32* %width, i32* %height, i64* %bitmap, i32* %xhot, i32* %yhot)
  store i32 %call26, i32* %result, align 4
  %36 = load i32, i32* %result, align 4
  %cmp27 = icmp ne i32 %36, 0
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.19
  store i64 -1, i64* %retval
  br label %return

if.end.29:                                        ; preds = %if.end.19
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call30 = call i64 @x_allocate_bitmap_record(%struct.frame* %37)
  store i64 %call30, i64* %id, align 8
  %38 = load i64, i64* %bitmap, align 8
  %39 = load i64, i64* %id, align 8
  %sub = sub nsw i64 %39, 1
  %40 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps31 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %40, i32 0, i32 29
  %41 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps31, align 8
  %arrayidx32 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %41, i64 %sub
  %pixmap = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx32, i32 0, i32 0
  store i64 %38, i64* %pixmap, align 8
  %42 = load i64, i64* %id, align 8
  %sub33 = sub nsw i64 %42, 1
  %43 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps34 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 29
  %44 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps34, align 8
  %arrayidx35 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %44, i64 %sub33
  %have_mask = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx35, i32 0, i32 1
  store i8 0, i8* %have_mask, align 1
  %45 = load i64, i64* %id, align 8
  %sub36 = sub nsw i64 %45, 1
  %46 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps37 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %46, i32 0, i32 29
  %47 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps37, align 8
  %arrayidx38 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %47, i64 %sub36
  %refcount39 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx38, i32 0, i32 4
  store i32 1, i32* %refcount39, align 4
  %48 = load i64, i64* %file.addr, align 8
  %call40 = call noalias i8* @xlispstrdup(i64 %48)
  %49 = load i64, i64* %id, align 8
  %sub41 = sub nsw i64 %49, 1
  %50 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps42 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %50, i32 0, i32 29
  %51 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps42, align 8
  %arrayidx43 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %51, i64 %sub41
  %file44 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx43, i32 0, i32 3
  store i8* %call40, i8** %file44, align 8
  %52 = load i64, i64* %id, align 8
  %sub45 = sub nsw i64 %52, 1
  %53 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps46 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %53, i32 0, i32 29
  %54 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps46, align 8
  %arrayidx47 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %54, i64 %sub45
  %depth = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx47, i32 0, i32 7
  store i32 1, i32* %depth, align 4
  %55 = load i32, i32* %height, align 4
  %56 = load i64, i64* %id, align 8
  %sub48 = sub nsw i64 %56, 1
  %57 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps49 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %57, i32 0, i32 29
  %58 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps49, align 8
  %arrayidx50 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %58, i64 %sub48
  %height51 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx50, i32 0, i32 5
  store i32 %55, i32* %height51, align 4
  %59 = load i32, i32* %width, align 4
  %60 = load i64, i64* %id, align 8
  %sub52 = sub nsw i64 %60, 1
  %61 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps53 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %61, i32 0, i32 29
  %62 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps53, align 8
  %arrayidx54 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %62, i64 %sub52
  %width55 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx54, i32 0, i32 6
  store i32 %59, i32* %width55, align 4
  %63 = load i64, i64* %id, align 8
  store i64 %63, i64* %retval
  br label %return

return:                                           ; preds = %if.end.29, %if.then.28, %if.then.18, %if.then
  %64 = load i64, i64* %retval
  ret i64 %64
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #2

declare i8* @SSDATA(i64) #1

declare i32 @openp(i64, i64, i64, i64*, i64, i1 zeroext) #1

declare i64 @builtin_lisp_symbol(i32) #1

declare i32 @XReadBitmapFile(%struct._XDisplay*, i64, i8*, i32*, i32*, i64*, i32*, i32*) #1

declare noalias i8* @xlispstrdup(i64) #1

; Function Attrs: nounwind uwtable
define void @x_destroy_bitmap(%struct.frame* %f, i64 %id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %id.addr = alloca i64, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %bm = alloca %struct.x_bitmap_record*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %id, i64* %id.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load i64, i64* %id.addr, align 8
  %cmp = icmp sgt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %id.addr, align 8
  %sub = sub nsw i64 %4, 1
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 29
  %6 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %6, i64 %sub
  store %struct.x_bitmap_record* %arrayidx, %struct.x_bitmap_record** %bm, align 8
  %7 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm, align 8
  %refcount = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %7, i32 0, i32 4
  %8 = load i32, i32* %refcount, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %refcount, align 4
  %cmp1 = icmp eq i32 %dec, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  call void @block_input()
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %10 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm, align 8
  call void @free_bitmap_record(%struct.x_display_info* %9, %struct.x_bitmap_record* %10)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  ret void
}

declare void @block_input() #1

; Function Attrs: nounwind uwtable
define internal void @free_bitmap_record(%struct.x_display_info* %dpyinfo, %struct.x_bitmap_record* %bm) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %bm.addr = alloca %struct.x_bitmap_record*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store %struct.x_bitmap_record* %bm, %struct.x_bitmap_record** %bm.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 2
  %1 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %2 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm.addr, align 8
  %pixmap = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %2, i32 0, i32 0
  %3 = load i64, i64* %pixmap, align 8
  %call = call i32 @XFreePixmap(%struct._XDisplay* %1, i64 %3)
  %4 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm.addr, align 8
  %have_mask = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %4, i32 0, i32 1
  %5 = load i8, i8* %have_mask, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display1, align 8
  %8 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm.addr, align 8
  %mask = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %8, i32 0, i32 2
  %9 = load i64, i64* %mask, align 8
  %call2 = call i32 @XFreePixmap(%struct._XDisplay* %7, i64 %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm.addr, align 8
  %file = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %10, i32 0, i32 3
  %11 = load i8*, i8** %file, align 8
  %tobool3 = icmp ne i8* %11, null
  br i1 %tobool3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %if.end
  %12 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm.addr, align 8
  %file5 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %12, i32 0, i32 3
  %13 = load i8*, i8** %file5, align 8
  call void @xfree(i8* %13)
  %14 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm.addr, align 8
  %file6 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %14, i32 0, i32 3
  store i8* null, i8** %file6, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.4, %if.end
  ret void
}

declare void @unblock_input() #1

; Function Attrs: nounwind uwtable
define void @x_destroy_all_bitmaps(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %i = alloca i64, align 8
  %bm = alloca %struct.x_bitmap_record*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 29
  %1 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  store %struct.x_bitmap_record* %1, %struct.x_bitmap_record** %bm, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %bitmaps_last = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 31
  %4 = load i64, i64* %bitmaps_last, align 8
  %cmp = icmp slt i64 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm, align 8
  %refcount = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %5, i32 0, i32 4
  %6 = load i32, i32* %refcount, align 4
  %cmp1 = icmp sgt i32 %6, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %8 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm, align 8
  call void @free_bitmap_record(%struct.x_display_info* %7, %struct.x_bitmap_record* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i64, i64* %i, align 8
  %inc = add nsw i64 %9, 1
  store i64 %inc, i64* %i, align 8
  %10 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bm, align 8
  %incdec.ptr = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %10, i32 1
  store %struct.x_bitmap_record* %incdec.ptr, %struct.x_bitmap_record** %bm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %bitmaps_last2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 31
  store i64 0, i64* %bitmaps_last2, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_create_bitmap_mask(%struct.frame* %f, i64 %id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %id.addr = alloca i64, align 8
  %pixmap = alloca i64, align 8
  %mask = alloca i64, align 8
  %ximg = alloca %struct._XImage*, align 8
  %mask_img = alloca %struct._XImage*, align 8
  %width = alloca i64, align 8
  %height = alloca i64, align 8
  %result = alloca i8, align 1
  %bg = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %xp = alloca i64, align 8
  %xm = alloca i64, align 8
  %yp = alloca i64, align 8
  %ym = alloca i64, align 8
  %gc = alloca %struct._XGC*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %id, i64* %id.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load i64, i64* %id.addr, align 8
  %cmp = icmp sgt i64 %3, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %5 = load i64, i64* %id.addr, align 8
  %call = call i64 @x_bitmap_pixmap(%struct.frame* %4, i64 %5)
  store i64 %call, i64* %pixmap, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load i64, i64* %id.addr, align 8
  %call2 = call i32 @x_bitmap_width(%struct.frame* %6, i64 %7)
  %conv = sext i32 %call2 to i64
  store i64 %conv, i64* %width, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %9 = load i64, i64* %id.addr, align 8
  %call3 = call i32 @x_bitmap_height(%struct.frame* %8, i64 %9)
  %conv4 = sext i32 %call3 to i64
  store i64 %conv4, i64* %height, align 8
  call void @block_input()
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %display_info7 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 44
  %12 = load %struct.x_display_info*, %struct.x_display_info** %display_info7, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 2
  %13 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %14 = load i64, i64* %pixmap, align 8
  %15 = load i64, i64* %width, align 8
  %conv8 = trunc i64 %15 to i32
  %16 = load i64, i64* %height, align 8
  %conv9 = trunc i64 %16 to i32
  %call10 = call %struct._XImage* @XGetImage(%struct._XDisplay* %13, i64 %14, i32 0, i32 0, i32 %conv8, i32 %conv9, i64 -1, i32 2)
  store %struct._XImage* %call10, %struct._XImage** %ximg, align 8
  %17 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %tobool = icmp ne %struct._XImage* %17, null
  br i1 %tobool, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %if.end
  call void @unblock_input()
  br label %return

if.end.12:                                        ; preds = %if.end
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %19 = load i64, i64* %width, align 8
  %conv13 = trunc i64 %19 to i32
  %20 = load i64, i64* %height, align 8
  %conv14 = trunc i64 %20 to i32
  %call15 = call zeroext i1 @x_create_x_image_and_pixmap(%struct.frame* %18, i32 %conv13, i32 %conv14, i32 1, %struct._XImage** %mask_img, i64* %mask)
  %frombool = zext i1 %call15 to i8
  store i8 %frombool, i8* %result, align 1
  call void @unblock_input()
  %21 = load i8, i8* %result, align 1
  %tobool16 = trunc i8 %21 to i1
  br i1 %tobool16, label %if.end.20, label %if.then.17

if.then.17:                                       ; preds = %if.end.12
  %22 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f18 = getelementptr inbounds %struct._XImage, %struct._XImage* %22, i32 0, i32 16
  %destroy_image = getelementptr inbounds %struct.funcs, %struct.funcs* %f18, i32 0, i32 1
  %23 = load i32 (%struct._XImage*)*, i32 (%struct._XImage*)** %destroy_image, align 8
  %24 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %call19 = call i32 %23(%struct._XImage* %24)
  br label %return

if.end.20:                                        ; preds = %if.end.12
  %25 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %26 = load i64, i64* %width, align 8
  %27 = load i64, i64* %height, align 8
  %call21 = call i64 @four_corners_best(%struct._XImage* %25, i32* null, i64 %26, i64 %27)
  store i64 %call21, i64* %bg, align 8
  store i64 0, i64* %y, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.146, %if.end.20
  %28 = load i64, i64* %y, align 8
  %29 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %height22 = getelementptr inbounds %struct._XImage, %struct._XImage* %29, i32 0, i32 1
  %30 = load i32, i32* %height22, align 4
  %conv23 = sext i32 %30 to i64
  %cmp24 = icmp ult i64 %28, %conv23
  br i1 %cmp24, label %for.body, label %for.end.148

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %x, align 8
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc, %for.body
  %31 = load i64, i64* %x, align 8
  %32 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %width27 = getelementptr inbounds %struct._XImage, %struct._XImage* %32, i32 0, i32 0
  %33 = load i32, i32* %width27, align 4
  %conv28 = sext i32 %33 to i64
  %cmp29 = icmp ult i64 %31, %conv28
  br i1 %cmp29, label %for.body.31, label %for.end

for.body.31:                                      ; preds = %for.cond.26
  %34 = load i64, i64* %x, align 8
  %35 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %width32 = getelementptr inbounds %struct._XImage, %struct._XImage* %35, i32 0, i32 0
  %36 = load i32, i32* %width32, align 4
  %sub = sub nsw i32 %36, 1
  %conv33 = sext i32 %sub to i64
  %cmp34 = icmp ne i64 %34, %conv33
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.31
  %37 = load i64, i64* %x, align 8
  %add = add i64 %37, 1
  br label %cond.end

cond.false:                                       ; preds = %for.body.31
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %xp, align 8
  %38 = load i64, i64* %x, align 8
  %cmp36 = icmp ne i64 %38, 0
  br i1 %cmp36, label %cond.true.38, label %cond.false.40

cond.true.38:                                     ; preds = %cond.end
  %39 = load i64, i64* %x, align 8
  %sub39 = sub i64 %39, 1
  br label %cond.end.44

cond.false.40:                                    ; preds = %cond.end
  %40 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %width41 = getelementptr inbounds %struct._XImage, %struct._XImage* %40, i32 0, i32 0
  %41 = load i32, i32* %width41, align 4
  %sub42 = sub nsw i32 %41, 1
  %conv43 = sext i32 %sub42 to i64
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.40, %cond.true.38
  %cond45 = phi i64 [ %sub39, %cond.true.38 ], [ %conv43, %cond.false.40 ]
  store i64 %cond45, i64* %xm, align 8
  %42 = load i64, i64* %y, align 8
  %43 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %height46 = getelementptr inbounds %struct._XImage, %struct._XImage* %43, i32 0, i32 1
  %44 = load i32, i32* %height46, align 4
  %sub47 = sub nsw i32 %44, 1
  %conv48 = sext i32 %sub47 to i64
  %cmp49 = icmp ne i64 %42, %conv48
  br i1 %cmp49, label %cond.true.51, label %cond.false.53

cond.true.51:                                     ; preds = %cond.end.44
  %45 = load i64, i64* %y, align 8
  %add52 = add i64 %45, 1
  br label %cond.end.54

cond.false.53:                                    ; preds = %cond.end.44
  br label %cond.end.54

cond.end.54:                                      ; preds = %cond.false.53, %cond.true.51
  %cond55 = phi i64 [ %add52, %cond.true.51 ], [ 0, %cond.false.53 ]
  store i64 %cond55, i64* %yp, align 8
  %46 = load i64, i64* %y, align 8
  %cmp56 = icmp ne i64 %46, 0
  br i1 %cmp56, label %cond.true.58, label %cond.false.60

cond.true.58:                                     ; preds = %cond.end.54
  %47 = load i64, i64* %y, align 8
  %sub59 = sub i64 %47, 1
  br label %cond.end.64

cond.false.60:                                    ; preds = %cond.end.54
  %48 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %height61 = getelementptr inbounds %struct._XImage, %struct._XImage* %48, i32 0, i32 1
  %49 = load i32, i32* %height61, align 4
  %sub62 = sub nsw i32 %49, 1
  %conv63 = sext i32 %sub62 to i64
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.60, %cond.true.58
  %cond65 = phi i64 [ %sub59, %cond.true.58 ], [ %conv63, %cond.false.60 ]
  store i64 %cond65, i64* %ym, align 8
  %50 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f66 = getelementptr inbounds %struct._XImage, %struct._XImage* %50, i32 0, i32 16
  %get_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f66, i32 0, i32 2
  %51 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel, align 8
  %52 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %53 = load i64, i64* %x, align 8
  %conv67 = trunc i64 %53 to i32
  %54 = load i64, i64* %y, align 8
  %conv68 = trunc i64 %54 to i32
  %call69 = call i64 %51(%struct._XImage* %52, i32 %conv67, i32 %conv68)
  %55 = load i64, i64* %bg, align 8
  %cmp70 = icmp eq i64 %call69, %55
  br i1 %cmp70, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end.64
  %56 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f72 = getelementptr inbounds %struct._XImage, %struct._XImage* %56, i32 0, i32 16
  %get_pixel73 = getelementptr inbounds %struct.funcs, %struct.funcs* %f72, i32 0, i32 2
  %57 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel73, align 8
  %58 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %59 = load i64, i64* %x, align 8
  %conv74 = trunc i64 %59 to i32
  %60 = load i64, i64* %yp, align 8
  %conv75 = trunc i64 %60 to i32
  %call76 = call i64 %57(%struct._XImage* %58, i32 %conv74, i32 %conv75)
  %61 = load i64, i64* %bg, align 8
  %cmp77 = icmp eq i64 %call76, %61
  br i1 %cmp77, label %land.lhs.true.79, label %if.else

land.lhs.true.79:                                 ; preds = %land.lhs.true
  %62 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f80 = getelementptr inbounds %struct._XImage, %struct._XImage* %62, i32 0, i32 16
  %get_pixel81 = getelementptr inbounds %struct.funcs, %struct.funcs* %f80, i32 0, i32 2
  %63 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel81, align 8
  %64 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %65 = load i64, i64* %x, align 8
  %conv82 = trunc i64 %65 to i32
  %66 = load i64, i64* %ym, align 8
  %conv83 = trunc i64 %66 to i32
  %call84 = call i64 %63(%struct._XImage* %64, i32 %conv82, i32 %conv83)
  %67 = load i64, i64* %bg, align 8
  %cmp85 = icmp eq i64 %call84, %67
  br i1 %cmp85, label %land.lhs.true.87, label %if.else

land.lhs.true.87:                                 ; preds = %land.lhs.true.79
  %68 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f88 = getelementptr inbounds %struct._XImage, %struct._XImage* %68, i32 0, i32 16
  %get_pixel89 = getelementptr inbounds %struct.funcs, %struct.funcs* %f88, i32 0, i32 2
  %69 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel89, align 8
  %70 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %71 = load i64, i64* %xp, align 8
  %conv90 = trunc i64 %71 to i32
  %72 = load i64, i64* %y, align 8
  %conv91 = trunc i64 %72 to i32
  %call92 = call i64 %69(%struct._XImage* %70, i32 %conv90, i32 %conv91)
  %73 = load i64, i64* %bg, align 8
  %cmp93 = icmp eq i64 %call92, %73
  br i1 %cmp93, label %land.lhs.true.95, label %if.else

land.lhs.true.95:                                 ; preds = %land.lhs.true.87
  %74 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f96 = getelementptr inbounds %struct._XImage, %struct._XImage* %74, i32 0, i32 16
  %get_pixel97 = getelementptr inbounds %struct.funcs, %struct.funcs* %f96, i32 0, i32 2
  %75 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel97, align 8
  %76 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %77 = load i64, i64* %xp, align 8
  %conv98 = trunc i64 %77 to i32
  %78 = load i64, i64* %yp, align 8
  %conv99 = trunc i64 %78 to i32
  %call100 = call i64 %75(%struct._XImage* %76, i32 %conv98, i32 %conv99)
  %79 = load i64, i64* %bg, align 8
  %cmp101 = icmp eq i64 %call100, %79
  br i1 %cmp101, label %land.lhs.true.103, label %if.else

land.lhs.true.103:                                ; preds = %land.lhs.true.95
  %80 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f104 = getelementptr inbounds %struct._XImage, %struct._XImage* %80, i32 0, i32 16
  %get_pixel105 = getelementptr inbounds %struct.funcs, %struct.funcs* %f104, i32 0, i32 2
  %81 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel105, align 8
  %82 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %83 = load i64, i64* %xp, align 8
  %conv106 = trunc i64 %83 to i32
  %84 = load i64, i64* %ym, align 8
  %conv107 = trunc i64 %84 to i32
  %call108 = call i64 %81(%struct._XImage* %82, i32 %conv106, i32 %conv107)
  %85 = load i64, i64* %bg, align 8
  %cmp109 = icmp eq i64 %call108, %85
  br i1 %cmp109, label %land.lhs.true.111, label %if.else

land.lhs.true.111:                                ; preds = %land.lhs.true.103
  %86 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f112 = getelementptr inbounds %struct._XImage, %struct._XImage* %86, i32 0, i32 16
  %get_pixel113 = getelementptr inbounds %struct.funcs, %struct.funcs* %f112, i32 0, i32 2
  %87 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel113, align 8
  %88 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %89 = load i64, i64* %xm, align 8
  %conv114 = trunc i64 %89 to i32
  %90 = load i64, i64* %y, align 8
  %conv115 = trunc i64 %90 to i32
  %call116 = call i64 %87(%struct._XImage* %88, i32 %conv114, i32 %conv115)
  %91 = load i64, i64* %bg, align 8
  %cmp117 = icmp eq i64 %call116, %91
  br i1 %cmp117, label %land.lhs.true.119, label %if.else

land.lhs.true.119:                                ; preds = %land.lhs.true.111
  %92 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f120 = getelementptr inbounds %struct._XImage, %struct._XImage* %92, i32 0, i32 16
  %get_pixel121 = getelementptr inbounds %struct.funcs, %struct.funcs* %f120, i32 0, i32 2
  %93 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel121, align 8
  %94 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %95 = load i64, i64* %xm, align 8
  %conv122 = trunc i64 %95 to i32
  %96 = load i64, i64* %yp, align 8
  %conv123 = trunc i64 %96 to i32
  %call124 = call i64 %93(%struct._XImage* %94, i32 %conv122, i32 %conv123)
  %97 = load i64, i64* %bg, align 8
  %cmp125 = icmp eq i64 %call124, %97
  br i1 %cmp125, label %land.lhs.true.127, label %if.else

land.lhs.true.127:                                ; preds = %land.lhs.true.119
  %98 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f128 = getelementptr inbounds %struct._XImage, %struct._XImage* %98, i32 0, i32 16
  %get_pixel129 = getelementptr inbounds %struct.funcs, %struct.funcs* %f128, i32 0, i32 2
  %99 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel129, align 8
  %100 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %101 = load i64, i64* %xm, align 8
  %conv130 = trunc i64 %101 to i32
  %102 = load i64, i64* %ym, align 8
  %conv131 = trunc i64 %102 to i32
  %call132 = call i64 %99(%struct._XImage* %100, i32 %conv130, i32 %conv131)
  %103 = load i64, i64* %bg, align 8
  %cmp133 = icmp eq i64 %call132, %103
  br i1 %cmp133, label %if.then.135, label %if.else

if.then.135:                                      ; preds = %land.lhs.true.127
  %104 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %f136 = getelementptr inbounds %struct._XImage, %struct._XImage* %104, i32 0, i32 16
  %put_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f136, i32 0, i32 3
  %105 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel, align 8
  %106 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %107 = load i64, i64* %x, align 8
  %conv137 = trunc i64 %107 to i32
  %108 = load i64, i64* %y, align 8
  %conv138 = trunc i64 %108 to i32
  %call139 = call i32 %105(%struct._XImage* %106, i32 %conv137, i32 %conv138, i64 0)
  br label %if.end.145

if.else:                                          ; preds = %land.lhs.true.127, %land.lhs.true.119, %land.lhs.true.111, %land.lhs.true.103, %land.lhs.true.95, %land.lhs.true.87, %land.lhs.true.79, %land.lhs.true, %cond.end.64
  %109 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %f140 = getelementptr inbounds %struct._XImage, %struct._XImage* %109, i32 0, i32 16
  %put_pixel141 = getelementptr inbounds %struct.funcs, %struct.funcs* %f140, i32 0, i32 3
  %110 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel141, align 8
  %111 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %112 = load i64, i64* %x, align 8
  %conv142 = trunc i64 %112 to i32
  %113 = load i64, i64* %y, align 8
  %conv143 = trunc i64 %113 to i32
  %call144 = call i32 %110(%struct._XImage* %111, i32 %conv142, i32 %conv143, i64 1)
  br label %if.end.145

if.end.145:                                       ; preds = %if.else, %if.then.135
  br label %for.inc

for.inc:                                          ; preds = %if.end.145
  %114 = load i64, i64* %x, align 8
  %inc = add i64 %114, 1
  store i64 %inc, i64* %x, align 8
  br label %for.cond.26

for.end:                                          ; preds = %for.cond.26
  br label %for.inc.146

for.inc.146:                                      ; preds = %for.end
  %115 = load i64, i64* %y, align 8
  %inc147 = add i64 %115, 1
  store i64 %inc147, i64* %y, align 8
  br label %for.cond

for.end.148:                                      ; preds = %for.cond
  %116 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data149 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 62
  %x150 = bitcast %union.output_data* %output_data149 to %struct.x_output**
  %117 = load %struct.x_output*, %struct.x_output** %x150, align 8
  %display_info151 = getelementptr inbounds %struct.x_output, %struct.x_output* %117, i32 0, i32 44
  %118 = load %struct.x_display_info*, %struct.x_display_info** %display_info151, align 8
  %display152 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %118, i32 0, i32 2
  %119 = load %struct._XDisplay*, %struct._XDisplay** %display152, align 8
  %120 = load i64, i64* %mask, align 8
  %call153 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %119, i64 %120, i64 0, %struct.XGCValues* null)
  store %struct._XGC* %call153, %struct._XGC** %gc, align 8
  %121 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data154 = getelementptr inbounds %struct.frame, %struct.frame* %121, i32 0, i32 62
  %x155 = bitcast %union.output_data* %output_data154 to %struct.x_output**
  %122 = load %struct.x_output*, %struct.x_output** %x155, align 8
  %display_info156 = getelementptr inbounds %struct.x_output, %struct.x_output* %122, i32 0, i32 44
  %123 = load %struct.x_display_info*, %struct.x_display_info** %display_info156, align 8
  %display157 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %123, i32 0, i32 2
  %124 = load %struct._XDisplay*, %struct._XDisplay** %display157, align 8
  %125 = load i64, i64* %mask, align 8
  %126 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %127 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %128 = load i64, i64* %width, align 8
  %conv158 = trunc i64 %128 to i32
  %129 = load i64, i64* %height, align 8
  %conv159 = trunc i64 %129 to i32
  %call160 = call i32 @XPutImage(%struct._XDisplay* %124, i64 %125, %struct._XGC* %126, %struct._XImage* %127, i32 0, i32 0, i32 0, i32 0, i32 %conv158, i32 %conv159)
  %130 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data161 = getelementptr inbounds %struct.frame, %struct.frame* %130, i32 0, i32 62
  %x162 = bitcast %union.output_data* %output_data161 to %struct.x_output**
  %131 = load %struct.x_output*, %struct.x_output** %x162, align 8
  %display_info163 = getelementptr inbounds %struct.x_output, %struct.x_output* %131, i32 0, i32 44
  %132 = load %struct.x_display_info*, %struct.x_display_info** %display_info163, align 8
  %display164 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %132, i32 0, i32 2
  %133 = load %struct._XDisplay*, %struct._XDisplay** %display164, align 8
  %134 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call165 = call i32 @XFreeGC(%struct._XDisplay* %133, %struct._XGC* %134)
  %135 = load i64, i64* %id.addr, align 8
  %sub166 = sub nsw i64 %135, 1
  %136 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %136, i32 0, i32 29
  %137 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %137, i64 %sub166
  %have_mask = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 1
  store i8 1, i8* %have_mask, align 1
  %138 = load i64, i64* %mask, align 8
  %139 = load i64, i64* %id.addr, align 8
  %sub167 = sub nsw i64 %139, 1
  %140 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %bitmaps168 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %140, i32 0, i32 29
  %141 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps168, align 8
  %arrayidx169 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %141, i64 %sub167
  %mask170 = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx169, i32 0, i32 2
  store i64 %138, i64* %mask170, align 8
  %142 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f171 = getelementptr inbounds %struct._XImage, %struct._XImage* %142, i32 0, i32 16
  %destroy_image172 = getelementptr inbounds %struct.funcs, %struct.funcs* %f171, i32 0, i32 1
  %143 = load i32 (%struct._XImage*)*, i32 (%struct._XImage*)** %destroy_image172, align 8
  %144 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %call173 = call i32 %143(%struct._XImage* %144)
  %145 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  call void @x_destroy_x_image(%struct._XImage* %145)
  br label %return

return:                                           ; preds = %for.end.148, %if.then.17, %if.then.11, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @x_bitmap_width(%struct.frame* %f, i64 %id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %id.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %id, i64* %id.addr, align 8
  %0 = load i64, i64* %id.addr, align 8
  %sub = sub nsw i64 %0, 1
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 29
  %4 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %4, i64 %sub
  %width = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 6
  %5 = load i32, i32* %width, align 4
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal i32 @x_bitmap_height(%struct.frame* %f, i64 %id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %id.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %id, i64* %id.addr, align 8
  %0 = load i64, i64* %id.addr, align 8
  %sub = sub nsw i64 %0, 1
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %bitmaps = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 29
  %4 = load %struct.x_bitmap_record*, %struct.x_bitmap_record** %bitmaps, align 8
  %arrayidx = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %4, i64 %sub
  %height = getelementptr inbounds %struct.x_bitmap_record, %struct.x_bitmap_record* %arrayidx, i32 0, i32 5
  %5 = load i32, i32* %height, align 4
  ret i32 %5
}

declare %struct._XImage* @XGetImage(%struct._XDisplay*, i64, i32, i32, i32, i32, i64, i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @x_create_x_image_and_pixmap(%struct.frame* %f, i32 %width, i32 %height, i32 %depth, %struct._XImage** %ximg, i64* %pixmap) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %ximg.addr = alloca %struct._XImage**, align 8
  %pixmap.addr = alloca i64*, align 8
  %display = alloca %struct._XDisplay*, align 8
  %window = alloca i64, align 8
  %screen = alloca %struct.Screen*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store %struct._XImage** %ximg, %struct._XImage*** %ximg.addr, align 8
  store i64* %pixmap, i64** %pixmap.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display1, align 8
  store %struct._XDisplay* %3, %struct._XDisplay** %display, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  store i64 %6, i64* %window, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %display_info6 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 44
  %9 = load %struct.x_display_info*, %struct.x_display_info** %display_info6, align 8
  %screen7 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 6
  %10 = load %struct.Screen*, %struct.Screen** %screen7, align 8
  store %struct.Screen* %10, %struct.Screen** %screen, align 8
  %11 = load i32, i32* %depth.addr, align 4
  %cmp = icmp sle i32 %11, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %root_depth = getelementptr inbounds %struct.Screen, %struct.Screen* %12, i32 0, i32 9
  %13 = load i32, i32* %root_depth, align 4
  store i32 %13, i32* %depth.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %15 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %root_visual = getelementptr inbounds %struct.Screen, %struct.Screen* %15, i32 0, i32 10
  %16 = load %struct.Visual*, %struct.Visual** %root_visual, align 8
  %17 = load i32, i32* %depth.addr, align 4
  %18 = load i32, i32* %width.addr, align 4
  %19 = load i32, i32* %height.addr, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp8 = icmp sgt i32 %20, 16
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %21 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp sgt i32 %21, 8
  %cond = select i1 %cmp9, i32 16, i32 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond10 = phi i32 [ 32, %cond.true ], [ %cond, %cond.false ]
  %call = call %struct._XImage* @XCreateImage(%struct._XDisplay* %14, %struct.Visual* %16, i32 %17, i32 2, i32 0, i8* null, i32 %18, i32 %19, i32 %cond10, i32 0)
  %22 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  store %struct._XImage* %call, %struct._XImage** %22, align 8
  %23 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  %24 = load %struct._XImage*, %struct._XImage** %23, align 8
  %cmp11 = icmp eq %struct._XImage* %24, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %cond.end
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.12, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end.13:                                        ; preds = %cond.end
  %25 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  %26 = load %struct._XImage*, %struct._XImage** %25, align 8
  %27 = load i32, i32* %width.addr, align 4
  %28 = load i32, i32* %height.addr, align 4
  %call14 = call zeroext i1 @x_check_image_size(%struct._XImage* %26, i32 %27, i32 %28)
  br i1 %call14, label %if.end.19, label %if.then.15

if.then.15:                                       ; preds = %if.end.13
  %29 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  %30 = load %struct._XImage*, %struct._XImage** %29, align 8
  call void @x_destroy_x_image(%struct._XImage* %30)
  %31 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  store %struct._XImage* null, %struct._XImage** %31, align 8
  %32 = load i32, i32* %width.addr, align 4
  %conv = sext i32 %32 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %33 = load i32, i32* %height.addr, align 4
  %conv16 = sext i32 %33 to i64
  %shl17 = shl i64 %conv16, 2
  %add18 = add i64 %shl17, 2
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i32 0, i32 0), i64 %add, i64 %add18)
  store i1 false, i1* %retval
  br label %return

if.end.19:                                        ; preds = %if.end.13
  %34 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  %35 = load %struct._XImage*, %struct._XImage** %34, align 8
  %bytes_per_line = getelementptr inbounds %struct._XImage, %struct._XImage* %35, i32 0, i32 10
  %36 = load i32, i32* %bytes_per_line, align 4
  %37 = load i32, i32* %height.addr, align 4
  %mul = mul nsw i32 %36, %37
  %conv20 = sext i32 %mul to i64
  %call21 = call noalias i8* @xmalloc(i64 %conv20)
  %38 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  %39 = load %struct._XImage*, %struct._XImage** %38, align 8
  %data = getelementptr inbounds %struct._XImage, %struct._XImage* %39, i32 0, i32 4
  store i8* %call21, i8** %data, align 8
  %40 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %41 = load i64, i64* %window, align 8
  %42 = load i32, i32* %width.addr, align 4
  %43 = load i32, i32* %height.addr, align 4
  %44 = load i32, i32* %depth.addr, align 4
  %call22 = call i64 @XCreatePixmap(%struct._XDisplay* %40, i64 %41, i32 %42, i32 %43, i32 %44)
  %45 = load i64*, i64** %pixmap.addr, align 8
  store i64 %call22, i64* %45, align 8
  %46 = load i64*, i64** %pixmap.addr, align 8
  %47 = load i64, i64* %46, align 8
  %cmp23 = icmp eq i64 %47, 0
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.19
  %48 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  %49 = load %struct._XImage*, %struct._XImage** %48, align 8
  call void @x_destroy_x_image(%struct._XImage* %49)
  %50 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  store %struct._XImage* null, %struct._XImage** %50, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i32 0, i32 0))
  store i1 false, i1* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.19
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.26, %if.then.25, %if.then.15, %if.then.12
  %51 = load i1, i1* %retval
  ret i1 %51
}

; Function Attrs: nounwind uwtable
define internal i64 @four_corners_best(%struct._XImage* %ximg, i32* %corners, i64 %width, i64 %height) #0 {
entry:
  %ximg.addr = alloca %struct._XImage*, align 8
  %corners.addr = alloca i32*, align 8
  %width.addr = alloca i64, align 8
  %height.addr = alloca i64, align 8
  %corner_pixels = alloca [4 x i64], align 16
  %best = alloca i64, align 8
  %i = alloca i32, align 4
  %best_count = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct._XImage* %ximg, %struct._XImage** %ximg.addr, align 8
  store i32* %corners, i32** %corners.addr, align 8
  store i64 %width, i64* %width.addr, align 8
  store i64 %height, i64* %height.addr, align 8
  %0 = load i32*, i32** %corners.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32*, i32** %corners.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 2
  %2 = load i32, i32* %arrayidx, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f = getelementptr inbounds %struct._XImage, %struct._XImage* %3, i32 0, i32 16
  %get_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f, i32 0, i32 2
  %4 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel, align 8
  %5 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %6 = load i32*, i32** %corners.addr, align 8
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i64 1
  %7 = load i32, i32* %arrayidx1, align 4
  %8 = load i32*, i32** %corners.addr, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i64 0
  %9 = load i32, i32* %arrayidx2, align 4
  %call = call i64 %4(%struct._XImage* %5, i32 %7, i32 %9)
  %arrayidx3 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 0
  store i64 %call, i64* %arrayidx3, align 8
  %10 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f4 = getelementptr inbounds %struct._XImage, %struct._XImage* %10, i32 0, i32 16
  %get_pixel5 = getelementptr inbounds %struct.funcs, %struct.funcs* %f4, i32 0, i32 2
  %11 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel5, align 8
  %12 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %13 = load i32*, i32** %corners.addr, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %13, i64 3
  %14 = load i32, i32* %arrayidx6, align 4
  %sub = sub nsw i32 %14, 1
  %15 = load i32*, i32** %corners.addr, align 8
  %arrayidx7 = getelementptr inbounds i32, i32* %15, i64 0
  %16 = load i32, i32* %arrayidx7, align 4
  %call8 = call i64 %11(%struct._XImage* %12, i32 %sub, i32 %16)
  %arrayidx9 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 1
  store i64 %call8, i64* %arrayidx9, align 8
  %17 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f10 = getelementptr inbounds %struct._XImage, %struct._XImage* %17, i32 0, i32 16
  %get_pixel11 = getelementptr inbounds %struct.funcs, %struct.funcs* %f10, i32 0, i32 2
  %18 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel11, align 8
  %19 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %20 = load i32*, i32** %corners.addr, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %20, i64 3
  %21 = load i32, i32* %arrayidx12, align 4
  %sub13 = sub nsw i32 %21, 1
  %22 = load i32*, i32** %corners.addr, align 8
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i64 2
  %23 = load i32, i32* %arrayidx14, align 4
  %sub15 = sub nsw i32 %23, 1
  %call16 = call i64 %18(%struct._XImage* %19, i32 %sub13, i32 %sub15)
  %arrayidx17 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 2
  store i64 %call16, i64* %arrayidx17, align 8
  %24 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f18 = getelementptr inbounds %struct._XImage, %struct._XImage* %24, i32 0, i32 16
  %get_pixel19 = getelementptr inbounds %struct.funcs, %struct.funcs* %f18, i32 0, i32 2
  %25 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel19, align 8
  %26 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %27 = load i32*, i32** %corners.addr, align 8
  %arrayidx20 = getelementptr inbounds i32, i32* %27, i64 1
  %28 = load i32, i32* %arrayidx20, align 4
  %29 = load i32*, i32** %corners.addr, align 8
  %arrayidx21 = getelementptr inbounds i32, i32* %29, i64 2
  %30 = load i32, i32* %arrayidx21, align 4
  %sub22 = sub nsw i32 %30, 1
  %call23 = call i64 %25(%struct._XImage* %26, i32 %28, i32 %sub22)
  %arrayidx24 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 3
  store i64 %call23, i64* %arrayidx24, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %31 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f25 = getelementptr inbounds %struct._XImage, %struct._XImage* %31, i32 0, i32 16
  %get_pixel26 = getelementptr inbounds %struct.funcs, %struct.funcs* %f25, i32 0, i32 2
  %32 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel26, align 8
  %33 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %call27 = call i64 %32(%struct._XImage* %33, i32 0, i32 0)
  %arrayidx28 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 0
  store i64 %call27, i64* %arrayidx28, align 8
  %34 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f29 = getelementptr inbounds %struct._XImage, %struct._XImage* %34, i32 0, i32 16
  %get_pixel30 = getelementptr inbounds %struct.funcs, %struct.funcs* %f29, i32 0, i32 2
  %35 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel30, align 8
  %36 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %37 = load i64, i64* %width.addr, align 8
  %sub31 = sub i64 %37, 1
  %conv = trunc i64 %sub31 to i32
  %call32 = call i64 %35(%struct._XImage* %36, i32 %conv, i32 0)
  %arrayidx33 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 1
  store i64 %call32, i64* %arrayidx33, align 8
  %38 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f34 = getelementptr inbounds %struct._XImage, %struct._XImage* %38, i32 0, i32 16
  %get_pixel35 = getelementptr inbounds %struct.funcs, %struct.funcs* %f34, i32 0, i32 2
  %39 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel35, align 8
  %40 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %41 = load i64, i64* %width.addr, align 8
  %sub36 = sub i64 %41, 1
  %conv37 = trunc i64 %sub36 to i32
  %42 = load i64, i64* %height.addr, align 8
  %sub38 = sub i64 %42, 1
  %conv39 = trunc i64 %sub38 to i32
  %call40 = call i64 %39(%struct._XImage* %40, i32 %conv37, i32 %conv39)
  %arrayidx41 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 2
  store i64 %call40, i64* %arrayidx41, align 8
  %43 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f42 = getelementptr inbounds %struct._XImage, %struct._XImage* %43, i32 0, i32 16
  %get_pixel43 = getelementptr inbounds %struct.funcs, %struct.funcs* %f42, i32 0, i32 2
  %44 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel43, align 8
  %45 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %46 = load i64, i64* %height.addr, align 8
  %sub44 = sub i64 %46, 1
  %conv45 = trunc i64 %sub44 to i32
  %call46 = call i64 %44(%struct._XImage* %45, i32 0, i32 %conv45)
  %arrayidx47 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 3
  store i64 %call46, i64* %arrayidx47, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %best_count, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.68, %if.end
  %47 = load i32, i32* %i, align 4
  %cmp48 = icmp slt i32 %47, 4
  br i1 %cmp48, label %for.body, label %for.end.70

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %n, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc, %for.body
  %48 = load i32, i32* %j, align 4
  %cmp51 = icmp slt i32 %48, 4
  br i1 %cmp51, label %for.body.53, label %for.end

for.body.53:                                      ; preds = %for.cond.50
  %49 = load i32, i32* %i, align 4
  %idxprom = sext i32 %49 to i64
  %arrayidx54 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 %idxprom
  %50 = load i64, i64* %arrayidx54, align 8
  %51 = load i32, i32* %j, align 4
  %idxprom55 = sext i32 %51 to i64
  %arrayidx56 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 %idxprom55
  %52 = load i64, i64* %arrayidx56, align 8
  %cmp57 = icmp eq i64 %50, %52
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %for.body.53
  %53 = load i32, i32* %n, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %n, align 4
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.59, %for.body.53
  br label %for.inc

for.inc:                                          ; preds = %if.end.60
  %54 = load i32, i32* %j, align 4
  %inc61 = add nsw i32 %54, 1
  store i32 %inc61, i32* %j, align 4
  br label %for.cond.50

for.end:                                          ; preds = %for.cond.50
  %55 = load i32, i32* %n, align 4
  %56 = load i32, i32* %best_count, align 4
  %cmp62 = icmp sgt i32 %55, %56
  br i1 %cmp62, label %if.then.64, label %if.end.67

if.then.64:                                       ; preds = %for.end
  %57 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %57 to i64
  %arrayidx66 = getelementptr inbounds [4 x i64], [4 x i64]* %corner_pixels, i32 0, i64 %idxprom65
  %58 = load i64, i64* %arrayidx66, align 8
  store i64 %58, i64* %best, align 8
  %59 = load i32, i32* %n, align 4
  store i32 %59, i32* %best_count, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.64, %for.end
  br label %for.inc.68

for.inc.68:                                       ; preds = %if.end.67
  %60 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %60, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond

for.end.70:                                       ; preds = %for.cond
  %61 = load i64, i64* %best, align 8
  ret i64 %61
}

declare %struct._XGC* @XCreateGC(%struct._XDisplay*, i64, i64, %struct.XGCValues*) #1

declare i32 @XPutImage(%struct._XDisplay*, i64, %struct._XGC*, %struct._XImage*, i32, i32, i32, i32, i32, i32) #1

declare i32 @XFreeGC(%struct._XDisplay*, %struct._XGC*) #1

; Function Attrs: nounwind uwtable
define internal void @x_destroy_x_image(%struct._XImage* %ximg) #0 {
entry:
  %ximg.addr = alloca %struct._XImage*, align 8
  store %struct._XImage* %ximg, %struct._XImage** %ximg.addr, align 8
  %0 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %tobool = icmp ne %struct._XImage* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %data = getelementptr inbounds %struct._XImage, %struct._XImage* %1, i32 0, i32 4
  %2 = load i8*, i8** %data, align 8
  call void @xfree(i8* %2)
  %3 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %data1 = getelementptr inbounds %struct._XImage, %struct._XImage* %3, i32 0, i32 4
  store i8* null, i8** %data1, align 8
  %4 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f = getelementptr inbounds %struct._XImage, %struct._XImage* %4, i32 0, i32 16
  %destroy_image = getelementptr inbounds %struct.funcs, %struct.funcs* %f, i32 0, i32 1
  %5 = load i32 (%struct._XImage*)*, i32 (%struct._XImage*)** %destroy_image, align 8
  %6 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %call = call i32 %5(%struct._XImage* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define zeroext i1 @valid_image_p(i64 %object) #0 {
entry:
  %object.addr = alloca i64, align 8
  %valid_p = alloca i8, align 1
  %tem = alloca i64, align 8
  %type = alloca %struct.image_type*, align 8
  store i64 %object, i64* %object.addr, align 8
  store i8 0, i8* %valid_p, align 1
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @IMAGEP(i64 %0)
  br i1 %call, label %if.then, label %if.end.32

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %sub = sub nsw i64 %1, 3
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %3, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %4 = load i64, i64* %cdr, align 8
  store i64 %4, i64* %tem, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i64, i64* %tem, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %tem, align 8
  %sub2 = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub2 to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 0
  %9 = load i64, i64* %car, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 131)
  %cmp4 = icmp eq i64 %9, %call3
  br i1 %cmp4, label %if.then.6, label %if.end.28

if.then.6:                                        ; preds = %for.body
  %10 = load i64, i64* %tem, align 8
  %sub7 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub7 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u8 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr9 = bitcast %union.anon.11* %u8 to i64*
  %13 = load i64, i64* %cdr9, align 8
  store i64 %13, i64* %tem, align 8
  %14 = load i64, i64* %tem, align 8
  %and10 = and i64 %14, 7
  %conv11 = trunc i64 %and10 to i32
  %cmp12 = icmp eq i32 %conv11, 3
  br i1 %cmp12, label %land.lhs.true, label %if.end.27

land.lhs.true:                                    ; preds = %if.then.6
  %15 = load i64, i64* %tem, align 8
  %sub14 = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub14 to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %car15 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 0
  %18 = load i64, i64* %car15, align 8
  %and16 = and i64 %18, 7
  %conv17 = trunc i64 %and16 to i32
  %cmp18 = icmp eq i32 %conv17, 0
  br i1 %cmp18, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %land.lhs.true
  %19 = load i64, i64* %tem, align 8
  %sub21 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub21 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %car22 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 0
  %22 = load i64, i64* %car22, align 8
  %call23 = call %struct.image_type* @lookup_image_type(i64 %22)
  store %struct.image_type* %call23, %struct.image_type** %type, align 8
  %23 = load %struct.image_type*, %struct.image_type** %type, align 8
  %tobool = icmp ne %struct.image_type* %23, null
  br i1 %tobool, label %if.then.24, label %if.end

if.then.24:                                       ; preds = %if.then.20
  %24 = load %struct.image_type*, %struct.image_type** %type, align 8
  %valid_p25 = getelementptr inbounds %struct.image_type, %struct.image_type* %24, i32 0, i32 1
  %25 = load i1 (i64)*, i1 (i64)** %valid_p25, align 8
  %26 = load i64, i64* %object.addr, align 8
  %call26 = call zeroext i1 %25(i64 %26)
  %frombool = zext i1 %call26 to i8
  store i8 %frombool, i8* %valid_p, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.24, %if.then.20
  br label %if.end.27

if.end.27:                                        ; preds = %if.end, %land.lhs.true, %if.then.6
  br label %for.end

if.end.28:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.28
  %27 = load i64, i64* %tem, align 8
  %sub29 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub29 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %u30 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 1
  %cdr31 = bitcast %union.anon.11* %u30 to i64*
  %30 = load i64, i64* %cdr31, align 8
  store i64 %30, i64* %tem, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end.27, %for.cond
  br label %if.end.32

if.end.32:                                        ; preds = %for.end, %entry
  %31 = load i8, i8* %valid_p, align 1
  %tobool33 = trunc i8 %31 to i1
  ret i1 %tobool33
}

declare zeroext i1 @IMAGEP(i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.image_type* @lookup_image_type(i64 %type) #0 {
entry:
  %retval = alloca %struct.image_type*, align 8
  %type.addr = alloca i64, align 8
  store i64 %type, i64* %type.addr, align 8
  %0 = load i64, i64* %type.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 743)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct.image_type* @define_image_type(%struct.image_type* @pbm_type)
  store %struct.image_type* %call1, %struct.image_type** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %type.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 1062)
  %cmp3 = icmp eq i64 %1, %call2
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %call5 = call %struct.image_type* @define_image_type(%struct.image_type* @xbm_type)
  store %struct.image_type* %call5, %struct.image_type** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %2 = load i64, i64* %type.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 754)
  %cmp8 = icmp eq i64 %2, %call7
  br i1 %cmp8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end.6
  %call10 = call %struct.image_type* @define_image_type(%struct.image_type* @png_type)
  store %struct.image_type* %call10, %struct.image_type** %retval
  br label %return

if.end.11:                                        ; preds = %if.end.6
  %3 = load i64, i64* %type.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 765)
  %cmp13 = icmp eq i64 %3, %call12
  br i1 %cmp13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.end.11
  %call15 = call %struct.image_type* @define_image_type(%struct.image_type* @gs_type)
  store %struct.image_type* %call15, %struct.image_type** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.11
  store %struct.image_type* null, %struct.image_type** %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.then.14, %if.then.9, %if.then.4, %if.then
  %4 = load %struct.image_type*, %struct.image_type** %retval
  ret %struct.image_type* %4
}

; Function Attrs: nounwind uwtable
define i64 @Fimage_size(i64 %spec, i64 %pixels, i64 %frame) #0 {
entry:
  %spec.addr = alloca i64, align 8
  %pixels.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %size = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %id = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %pixels, i64* %pixels.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %size, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call1 = call zeroext i1 @valid_image_p(i64 %0)
  br i1 %call1, label %if.then, label %if.else.27

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %call2 = call %struct.frame* @decode_window_system_frame(i64 %1)
  store %struct.frame* %call2, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %3 = load i64, i64* %spec.addr, align 8
  %call3 = call i64 @lookup_image(%struct.frame* %2, i64 %3)
  store i64 %call3, i64* %id, align 8
  %4 = load i64, i64* %id, align 8
  %cmp = icmp sge i64 %4, 0
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %5 = load i64, i64* %id, align 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 61
  %7 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 11
  %8 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %8, i32 0, i32 3
  %9 = load i64, i64* %used, align 8
  %cmp4 = icmp slt i64 %5, %9
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %10 = load i64, i64* %id, align 8
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal5, align 8
  %image_cache6 = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 11
  %13 = load %struct.image_cache*, %struct.image_cache** %image_cache6, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %13, i32 0, i32 1
  %14 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %14, i64 %10
  %15 = load %struct.image*, %struct.image** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.image* [ %15, %cond.true ], [ null, %cond.false ]
  store %struct.image* %cond, %struct.image** %img, align 8
  %16 = load %struct.image*, %struct.image** %img, align 8
  %width7 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 11
  %17 = load i32, i32* %width7, align 4
  %18 = load %struct.image*, %struct.image** %img, align 8
  %hmargin = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 18
  %19 = load i32, i32* %hmargin, align 4
  %mul = mul nsw i32 2, %19
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %width, align 4
  %20 = load %struct.image*, %struct.image** %img, align 8
  %height8 = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 12
  %21 = load i32, i32* %height8, align 4
  %22 = load %struct.image*, %struct.image** %img, align 8
  %vmargin = getelementptr inbounds %struct.image, %struct.image* %22, i32 0, i32 19
  %23 = load i32, i32* %vmargin, align 4
  %mul9 = mul nsw i32 2, %23
  %add10 = add nsw i32 %21, %mul9
  store i32 %add10, i32* %height, align 4
  %24 = load i64, i64* %pixels.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %24, %call11
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %cond.end
  %25 = load i32, i32* %width, align 4
  %conv = sitofp i32 %25 to double
  %26 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 59
  %27 = load i32, i32* %column_width, align 4
  %conv14 = sitofp i32 %27 to double
  %div = fdiv double %conv, %conv14
  %call15 = call i64 @make_float(double %div)
  %28 = load i32, i32* %height, align 4
  %conv16 = sitofp i32 %28 to double
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 60
  %30 = load i32, i32* %line_height, align 4
  %conv17 = sitofp i32 %30 to double
  %div18 = fdiv double %conv16, %conv17
  %call19 = call i64 @make_float(double %div18)
  %call20 = call i64 @Fcons(i64 %call15, i64 %call19)
  store i64 %call20, i64* %size, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end
  %31 = load i32, i32* %width, align 4
  %conv21 = sext i32 %31 to i64
  %shl = shl i64 %conv21, 2
  %add22 = add i64 %shl, 2
  %32 = load i32, i32* %height, align 4
  %conv23 = sext i32 %32 to i64
  %shl24 = shl i64 %conv23, 2
  %add25 = add i64 %shl24, 2
  %call26 = call i64 @Fcons(i64 %add22, i64 %add25)
  store i64 %call26, i64* %size, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.13
  br label %if.end.28

if.else.27:                                       ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0)) #11
  unreachable

if.end.28:                                        ; preds = %if.end
  %33 = load i64, i64* %size, align 8
  ret i64 %33
}

declare %struct.frame* @decode_window_system_frame(i64) #1

; Function Attrs: nounwind uwtable
define i64 @lookup_image(%struct.frame* %f, i64 %spec) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %spec.addr = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  %hash = alloca i64, align 8
  %value = alloca i64, align 8
  %ascent = alloca i64, align 8
  %margin = alloca i64, align 8
  %relief = alloca i64, align 8
  %bg = alloca i64, align 8
  %relief_bound = alloca i32, align 4
  %coerce = alloca %struct.timespec, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call = call i64 @sxhash(i64 %0, i32 0)
  store i64 %call, i64* %hash, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %2 = load i64, i64* %spec.addr, align 8
  %3 = load i64, i64* %hash, align 8
  %call1 = call %struct.image* @search_image_cache(%struct.frame* %1, i64 %2, i64 %3)
  store %struct.image* %call1, %struct.image** %img, align 8
  %4 = load %struct.image*, %struct.image** %img, align 8
  %tobool = icmp ne %struct.image* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.image*, %struct.image** %img, align 8
  %load_failed_p = getelementptr inbounds %struct.image, %struct.image* %5, i32 0, i32 21
  %6 = load i8, i8* %load_failed_p, align 1
  %tobool2 = trunc i8 %6 to i1
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %8 = load %struct.image*, %struct.image** %img, align 8
  call void @free_image(%struct.frame* %7, %struct.image* %8)
  store %struct.image* null, %struct.image** %img, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %struct.image*, %struct.image** %img, align 8
  %cmp = icmp eq %struct.image* %9, null
  br i1 %cmp, label %if.then.3, label %if.end.142

if.then.3:                                        ; preds = %if.end
  call void @block_input()
  %10 = load i64, i64* %spec.addr, align 8
  %11 = load i64, i64* %hash, align 8
  %call4 = call %struct.image* @make_image(i64 %10, i64 %11)
  store %struct.image* %call4, %struct.image** %img, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %13 = load %struct.image*, %struct.image** %img, align 8
  call void @cache_image(%struct.frame* %12, %struct.image* %13)
  %14 = load %struct.image*, %struct.image** %img, align 8
  %type = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 20
  %15 = load %struct.image_type*, %struct.image_type** %type, align 8
  %load = getelementptr inbounds %struct.image_type, %struct.image_type* %15, i32 0, i32 2
  %16 = load i1 (%struct.frame*, %struct.image*)*, i1 (%struct.frame*, %struct.image*)** %load, align 8
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %18 = load %struct.image*, %struct.image** %img, align 8
  %call5 = call zeroext i1 %16(%struct.frame* %17, %struct.image* %18)
  %lnot = xor i1 %call5, true
  %19 = load %struct.image*, %struct.image** %img, align 8
  %load_failed_p6 = getelementptr inbounds %struct.image, %struct.image* %19, i32 0, i32 21
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %load_failed_p6, align 1
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 78
  %21 = load i64, i64* %foreground_pixel, align 8
  %22 = load %struct.image*, %struct.image** %img, align 8
  %frame_foreground = getelementptr inbounds %struct.image, %struct.image* %22, i32 0, i32 8
  store i64 %21, i64* %frame_foreground, align 8
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 77
  %24 = load i64, i64* %background_pixel, align 8
  %25 = load %struct.image*, %struct.image** %img, align 8
  %frame_background = getelementptr inbounds %struct.image, %struct.image* %25, i32 0, i32 9
  store i64 %24, i64* %frame_background, align 8
  %26 = load %struct.image*, %struct.image** %img, align 8
  %load_failed_p7 = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 21
  %27 = load i8, i8* %load_failed_p7, align 1
  %tobool8 = trunc i8 %27 to i1
  br i1 %tobool8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.then.3
  %28 = load i64, i64* %spec.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 139)
  %call11 = call i64 @image_spec_value(i64 %28, i64 %call10, i8* null)
  store i64 %call11, i64* %value, align 8
  %29 = load i64, i64* %value, align 8
  %and = and i64 %29, 7
  %conv = trunc i64 %and to i32
  %and12 = and i32 %conv, -5
  %cmp13 = icmp eq i32 %and12, 2
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.9
  %30 = load i64, i64* %value, align 8
  %shr = ashr i64 %30, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then.9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr, %cond.true ], [ 30, %cond.false ]
  %conv15 = trunc i64 %cond to i32
  %31 = load %struct.image*, %struct.image** %img, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %31, i32 0, i32 11
  store i32 %conv15, i32* %width, align 4
  %32 = load i64, i64* %spec.addr, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 58)
  %call17 = call i64 @image_spec_value(i64 %32, i64 %call16, i8* null)
  store i64 %call17, i64* %value, align 8
  %33 = load i64, i64* %value, align 8
  %and18 = and i64 %33, 7
  %conv19 = trunc i64 %and18 to i32
  %and20 = and i32 %conv19, -5
  %cmp21 = icmp eq i32 %and20, 2
  br i1 %cmp21, label %cond.true.23, label %cond.false.25

cond.true.23:                                     ; preds = %cond.end
  %34 = load i64, i64* %value, align 8
  %shr24 = ashr i64 %34, 2
  br label %cond.end.26

cond.false.25:                                    ; preds = %cond.end
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.25, %cond.true.23
  %cond27 = phi i64 [ %shr24, %cond.true.23 ], [ 30, %cond.false.25 ]
  %conv28 = trunc i64 %cond27 to i32
  %35 = load %struct.image*, %struct.image** %img, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %35, i32 0, i32 12
  store i32 %conv28, i32* %height, align 4
  br label %if.end.141

if.else:                                          ; preds = %if.then.3
  %36 = load i64, i64* %spec.addr, align 8
  %call29 = call i64 @builtin_lisp_symbol(i32 9)
  %call30 = call i64 @image_spec_value(i64 %36, i64 %call29, i8* null)
  store i64 %call30, i64* %ascent, align 8
  %37 = load i64, i64* %ascent, align 8
  %and31 = and i64 %37, 7
  %conv32 = trunc i64 %and31 to i32
  %and33 = and i32 %conv32, -5
  %cmp34 = icmp eq i32 %and33, 2
  br i1 %cmp34, label %if.then.36, label %if.else.40

if.then.36:                                       ; preds = %if.else
  %38 = load i64, i64* %ascent, align 8
  %shr37 = ashr i64 %38, 2
  %conv38 = trunc i64 %shr37 to i32
  %39 = load %struct.image*, %struct.image** %img, align 8
  %ascent39 = getelementptr inbounds %struct.image, %struct.image* %39, i32 0, i32 14
  store i32 %conv38, i32* %ascent39, align 4
  br label %if.end.47

if.else.40:                                       ; preds = %if.else
  %40 = load i64, i64* %ascent, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 251)
  %cmp42 = icmp eq i64 %40, %call41
  br i1 %cmp42, label %if.then.44, label %if.end.46

if.then.44:                                       ; preds = %if.else.40
  %41 = load %struct.image*, %struct.image** %img, align 8
  %ascent45 = getelementptr inbounds %struct.image, %struct.image* %41, i32 0, i32 14
  store i32 -1, i32* %ascent45, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.44, %if.else.40
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.36
  %42 = load i64, i64* %spec.addr, align 8
  %call48 = call i64 @builtin_lisp_symbol(i32 80)
  %call49 = call i64 @image_spec_value(i64 %42, i64 %call48, i8* null)
  store i64 %call49, i64* %margin, align 8
  %43 = load i64, i64* %margin, align 8
  %and50 = and i64 %43, 7
  %conv51 = trunc i64 %and50 to i32
  %and52 = and i32 %conv51, -5
  %cmp53 = icmp eq i32 %and52, 2
  br i1 %cmp53, label %if.then.55, label %if.else.58

if.then.55:                                       ; preds = %if.end.47
  %44 = load i64, i64* %margin, align 8
  %shr56 = ashr i64 %44, 2
  %conv57 = trunc i64 %shr56 to i32
  %45 = load %struct.image*, %struct.image** %img, align 8
  %hmargin = getelementptr inbounds %struct.image, %struct.image* %45, i32 0, i32 18
  store i32 %conv57, i32* %hmargin, align 4
  %46 = load %struct.image*, %struct.image** %img, align 8
  %vmargin = getelementptr inbounds %struct.image, %struct.image* %46, i32 0, i32 19
  store i32 %conv57, i32* %vmargin, align 4
  br label %if.end.72

if.else.58:                                       ; preds = %if.end.47
  %47 = load i64, i64* %margin, align 8
  %and59 = and i64 %47, 7
  %conv60 = trunc i64 %and59 to i32
  %cmp61 = icmp eq i32 %conv60, 3
  br i1 %cmp61, label %if.then.63, label %if.end.71

if.then.63:                                       ; preds = %if.else.58
  %48 = load i64, i64* %margin, align 8
  %sub = sub nsw i64 %48, 3
  %49 = inttoptr i64 %sub to i8*
  %50 = bitcast i8* %49 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %50, i32 0, i32 0
  %51 = load i64, i64* %car, align 8
  %shr64 = ashr i64 %51, 2
  %conv65 = trunc i64 %shr64 to i32
  %52 = load %struct.image*, %struct.image** %img, align 8
  %hmargin66 = getelementptr inbounds %struct.image, %struct.image* %52, i32 0, i32 18
  store i32 %conv65, i32* %hmargin66, align 4
  %53 = load i64, i64* %margin, align 8
  %sub67 = sub nsw i64 %53, 3
  %54 = inttoptr i64 %sub67 to i8*
  %55 = bitcast i8* %54 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %55, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %56 = load i64, i64* %cdr, align 8
  %shr68 = ashr i64 %56, 2
  %conv69 = trunc i64 %shr68 to i32
  %57 = load %struct.image*, %struct.image** %img, align 8
  %vmargin70 = getelementptr inbounds %struct.image, %struct.image* %57, i32 0, i32 19
  store i32 %conv69, i32* %vmargin70, align 4
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.63, %if.else.58
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.then.55
  %58 = load i64, i64* %spec.addr, align 8
  %call73 = call i64 @builtin_lisp_symbol(i32 107)
  %call74 = call i64 @image_spec_value(i64 %58, i64 %call73, i8* null)
  store i64 %call74, i64* %relief, align 8
  %59 = load %struct.image*, %struct.image** %img, align 8
  %hmargin75 = getelementptr inbounds %struct.image, %struct.image* %59, i32 0, i32 18
  %60 = load i32, i32* %hmargin75, align 4
  %61 = load %struct.image*, %struct.image** %img, align 8
  %vmargin76 = getelementptr inbounds %struct.image, %struct.image* %61, i32 0, i32 19
  %62 = load i32, i32* %vmargin76, align 4
  %cmp77 = icmp sgt i32 %60, %62
  br i1 %cmp77, label %cond.true.79, label %cond.false.81

cond.true.79:                                     ; preds = %if.end.72
  %63 = load %struct.image*, %struct.image** %img, align 8
  %hmargin80 = getelementptr inbounds %struct.image, %struct.image* %63, i32 0, i32 18
  %64 = load i32, i32* %hmargin80, align 4
  br label %cond.end.83

cond.false.81:                                    ; preds = %if.end.72
  %65 = load %struct.image*, %struct.image** %img, align 8
  %vmargin82 = getelementptr inbounds %struct.image, %struct.image* %65, i32 0, i32 19
  %66 = load i32, i32* %vmargin82, align 4
  br label %cond.end.83

cond.end.83:                                      ; preds = %cond.false.81, %cond.true.79
  %cond84 = phi i32 [ %64, %cond.true.79 ], [ %66, %cond.false.81 ]
  %sub85 = sub nsw i32 2147483647, %cond84
  store i32 %sub85, i32* %relief_bound, align 4
  %67 = load i32, i32* %relief_bound, align 4
  %sub86 = sub nsw i32 0, %67
  %conv87 = sext i32 %sub86 to i64
  %68 = load i64, i64* %relief, align 8
  %69 = load i32, i32* %relief_bound, align 4
  %conv88 = sext i32 %69 to i64
  %call89 = call zeroext i1 @RANGED_INTEGERP(i64 %conv87, i64 %68, i64 %conv88)
  br i1 %call89, label %if.then.90, label %if.end.117

if.then.90:                                       ; preds = %cond.end.83
  %70 = load i64, i64* %relief, align 8
  %shr91 = ashr i64 %70, 2
  %conv92 = trunc i64 %shr91 to i32
  %71 = load %struct.image*, %struct.image** %img, align 8
  %relief93 = getelementptr inbounds %struct.image, %struct.image* %71, i32 0, i32 17
  store i32 %conv92, i32* %relief93, align 4
  %72 = load %struct.image*, %struct.image** %img, align 8
  %relief94 = getelementptr inbounds %struct.image, %struct.image* %72, i32 0, i32 17
  %73 = load i32, i32* %relief94, align 4
  %cmp95 = icmp slt i32 %73, 0
  br i1 %cmp95, label %cond.true.97, label %cond.false.100

cond.true.97:                                     ; preds = %if.then.90
  %74 = load %struct.image*, %struct.image** %img, align 8
  %relief98 = getelementptr inbounds %struct.image, %struct.image* %74, i32 0, i32 17
  %75 = load i32, i32* %relief98, align 4
  %sub99 = sub nsw i32 0, %75
  br label %cond.end.102

cond.false.100:                                   ; preds = %if.then.90
  %76 = load %struct.image*, %struct.image** %img, align 8
  %relief101 = getelementptr inbounds %struct.image, %struct.image* %76, i32 0, i32 17
  %77 = load i32, i32* %relief101, align 4
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.false.100, %cond.true.97
  %cond103 = phi i32 [ %sub99, %cond.true.97 ], [ %77, %cond.false.100 ]
  %78 = load %struct.image*, %struct.image** %img, align 8
  %hmargin104 = getelementptr inbounds %struct.image, %struct.image* %78, i32 0, i32 18
  %79 = load i32, i32* %hmargin104, align 4
  %add = add nsw i32 %79, %cond103
  store i32 %add, i32* %hmargin104, align 4
  %80 = load %struct.image*, %struct.image** %img, align 8
  %relief105 = getelementptr inbounds %struct.image, %struct.image* %80, i32 0, i32 17
  %81 = load i32, i32* %relief105, align 4
  %cmp106 = icmp slt i32 %81, 0
  br i1 %cmp106, label %cond.true.108, label %cond.false.111

cond.true.108:                                    ; preds = %cond.end.102
  %82 = load %struct.image*, %struct.image** %img, align 8
  %relief109 = getelementptr inbounds %struct.image, %struct.image* %82, i32 0, i32 17
  %83 = load i32, i32* %relief109, align 4
  %sub110 = sub nsw i32 0, %83
  br label %cond.end.113

cond.false.111:                                   ; preds = %cond.end.102
  %84 = load %struct.image*, %struct.image** %img, align 8
  %relief112 = getelementptr inbounds %struct.image, %struct.image* %84, i32 0, i32 17
  %85 = load i32, i32* %relief112, align 4
  br label %cond.end.113

cond.end.113:                                     ; preds = %cond.false.111, %cond.true.108
  %cond114 = phi i32 [ %sub110, %cond.true.108 ], [ %85, %cond.false.111 ]
  %86 = load %struct.image*, %struct.image** %img, align 8
  %vmargin115 = getelementptr inbounds %struct.image, %struct.image* %86, i32 0, i32 19
  %87 = load i32, i32* %vmargin115, align 4
  %add116 = add nsw i32 %87, %cond114
  store i32 %add116, i32* %vmargin115, align 4
  br label %if.end.117

if.end.117:                                       ; preds = %cond.end.113, %cond.end.83
  %88 = load %struct.image*, %struct.image** %img, align 8
  %background_valid = getelementptr inbounds %struct.image, %struct.image* %88, i32 0, i32 10
  %bf.load = load i8, i8* %background_valid, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.132, label %if.then.118

if.then.118:                                      ; preds = %if.end.117
  %89 = load %struct.image*, %struct.image** %img, align 8
  %spec119 = getelementptr inbounds %struct.image, %struct.image* %89, i32 0, i32 15
  %90 = load i64, i64* %spec119, align 8
  %call120 = call i64 @builtin_lisp_symbol(i32 13)
  %call121 = call i64 @image_spec_value(i64 %90, i64 %call120, i8* null)
  store i64 %call121, i64* %bg, align 8
  %91 = load i64, i64* %bg, align 8
  %call122 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp123 = icmp eq i64 %91, %call122
  br i1 %cmp123, label %if.end.131, label %if.then.125

if.then.125:                                      ; preds = %if.then.118
  %92 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %93 = load %struct.image*, %struct.image** %img, align 8
  %94 = load i64, i64* %bg, align 8
  %95 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel126 = getelementptr inbounds %struct.frame, %struct.frame* %95, i32 0, i32 77
  %96 = load i64, i64* %background_pixel126, align 8
  %call127 = call i64 @x_alloc_image_color(%struct.frame* %92, %struct.image* %93, i64 %94, i64 %96)
  %97 = load %struct.image*, %struct.image** %img, align 8
  %background = getelementptr inbounds %struct.image, %struct.image* %97, i32 0, i32 7
  store i64 %call127, i64* %background, align 8
  %98 = load %struct.image*, %struct.image** %img, align 8
  %background_valid128 = getelementptr inbounds %struct.image, %struct.image* %98, i32 0, i32 10
  %bf.load129 = load i8, i8* %background_valid128, align 8
  %bf.clear130 = and i8 %bf.load129, -3
  %bf.set = or i8 %bf.clear130, 2
  store i8 %bf.set, i8* %background_valid128, align 8
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.125, %if.then.118
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.end.117
  %99 = load %struct.image*, %struct.image** %img, align 8
  %type133 = getelementptr inbounds %struct.image, %struct.image* %99, i32 0, i32 20
  %100 = load %struct.image_type*, %struct.image_type** %type133, align 8
  %type134 = getelementptr inbounds %struct.image_type, %struct.image_type* %100, i32 0, i32 0
  %101 = load i32, i32* %type134, align 4
  %call135 = call i64 @builtin_lisp_symbol(i32 %101)
  %call136 = call i64 @builtin_lisp_symbol(i32 765)
  %cmp137 = icmp eq i64 %call135, %call136
  br i1 %cmp137, label %if.end.140, label %if.then.139

if.then.139:                                      ; preds = %if.end.132
  %102 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %103 = load %struct.image*, %struct.image** %img, align 8
  call void @postprocess_image(%struct.frame* %102, %struct.image* %103)
  br label %if.end.140

if.end.140:                                       ; preds = %if.then.139, %if.end.132
  br label %if.end.141

if.end.141:                                       ; preds = %if.end.140, %cond.end.26
  call void @unblock_input()
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.141, %if.end
  %104 = load %struct.image*, %struct.image** %img, align 8
  %timestamp = getelementptr inbounds %struct.image, %struct.image* %104, i32 0, i32 0
  %call143 = call { i64, i64 } @current_timespec()
  %105 = bitcast %struct.timespec* %coerce to { i64, i64 }*
  %106 = getelementptr { i64, i64 }, { i64, i64 }* %105, i32 0, i32 0
  %107 = extractvalue { i64, i64 } %call143, 0
  store i64 %107, i64* %106, align 8
  %108 = getelementptr { i64, i64 }, { i64, i64 }* %105, i32 0, i32 1
  %109 = extractvalue { i64, i64 } %call143, 1
  store i64 %109, i64* %108, align 8
  %110 = bitcast %struct.timespec* %timestamp to i8*
  %111 = bitcast %struct.timespec* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* %111, i64 16, i32 8, i1 false)
  %112 = load %struct.image*, %struct.image** %img, align 8
  %id = getelementptr inbounds %struct.image, %struct.image* %112, i32 0, i32 24
  %113 = load i64, i64* %id, align 8
  ret i64 %113
}

declare i64 @Fcons(i64, i64) #1

declare i64 @make_float(double) #1

; Function Attrs: noreturn
declare void @error(i8*, ...) #3

; Function Attrs: nounwind uwtable
define i64 @Fimage_mask_p(i64 %spec, i64 %frame) #0 {
entry:
  %spec.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %mask = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %id = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %mask, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call1 = call zeroext i1 @valid_image_p(i64 %0)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %call2 = call %struct.frame* @decode_window_system_frame(i64 %1)
  store %struct.frame* %call2, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %3 = load i64, i64* %spec.addr, align 8
  %call3 = call i64 @lookup_image(%struct.frame* %2, i64 %3)
  store i64 %call3, i64* %id, align 8
  %4 = load i64, i64* %id, align 8
  %cmp = icmp sge i64 %4, 0
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %5 = load i64, i64* %id, align 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 61
  %7 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 11
  %8 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %8, i32 0, i32 3
  %9 = load i64, i64* %used, align 8
  %cmp4 = icmp slt i64 %5, %9
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %10 = load i64, i64* %id, align 8
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal5, align 8
  %image_cache6 = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 11
  %13 = load %struct.image_cache*, %struct.image_cache** %image_cache6, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %13, i32 0, i32 1
  %14 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %14, i64 %10
  %15 = load %struct.image*, %struct.image** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.image* [ %15, %cond.true ], [ null, %cond.false ]
  store %struct.image* %cond, %struct.image** %img, align 8
  %16 = load %struct.image*, %struct.image** %img, align 8
  %mask7 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 2
  %17 = load i64, i64* %mask7, align 8
  %tobool = icmp ne i64 %17, 0
  br i1 %tobool, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %cond.end
  %call9 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call9, i64* %mask, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.8, %cond.end
  br label %if.end.10

if.else:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0)) #11
  unreachable

if.end.10:                                        ; preds = %if.end
  %18 = load i64, i64* %mask, align 8
  ret i64 %18
}

; Function Attrs: nounwind uwtable
define i64 @Fimage_metadata(i64 %spec, i64 %frame) #0 {
entry:
  %spec.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %ext = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %id = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %ext, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call1 = call zeroext i1 @valid_image_p(i64 %0)
  br i1 %call1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %call2 = call %struct.frame* @decode_window_system_frame(i64 %1)
  store %struct.frame* %call2, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %3 = load i64, i64* %spec.addr, align 8
  %call3 = call i64 @lookup_image(%struct.frame* %2, i64 %3)
  store i64 %call3, i64* %id, align 8
  %4 = load i64, i64* %id, align 8
  %cmp = icmp sge i64 %4, 0
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %5 = load i64, i64* %id, align 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 61
  %7 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 11
  %8 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %8, i32 0, i32 3
  %9 = load i64, i64* %used, align 8
  %cmp4 = icmp slt i64 %5, %9
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %10 = load i64, i64* %id, align 8
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 61
  %12 = load %struct.terminal*, %struct.terminal** %terminal5, align 8
  %image_cache6 = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 11
  %13 = load %struct.image_cache*, %struct.image_cache** %image_cache6, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %13, i32 0, i32 1
  %14 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %14, i64 %10
  %15 = load %struct.image*, %struct.image** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.image* [ %15, %cond.true ], [ null, %cond.false ]
  store %struct.image* %cond, %struct.image** %img, align 8
  %16 = load %struct.image*, %struct.image** %img, align 8
  %lisp_data = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 22
  %17 = load i64, i64* %lisp_data, align 8
  store i64 %17, i64* %ext, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %18 = load i64, i64* %ext, align 8
  ret i64 %18
}

; Function Attrs: nounwind uwtable
define void @prepare_image_for_display(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %coerce = alloca %struct.timespec, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %timestamp = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 0
  %call = call { i64, i64 } @current_timespec()
  %1 = bitcast %struct.timespec* %coerce to { i64, i64 }*
  %2 = getelementptr { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0
  %3 = extractvalue { i64, i64 } %call, 0
  store i64 %3, i64* %2, align 8
  %4 = getelementptr { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1
  %5 = extractvalue { i64, i64 } %call, 1
  store i64 %5, i64* %4, align 8
  %6 = bitcast %struct.timespec* %timestamp to i8*
  %7 = bitcast %struct.timespec* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 16, i32 8, i1 false)
  %8 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 1
  %9 = load i64, i64* %pixmap, align 8
  %cmp = icmp eq i64 %9, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %load_failed_p = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 21
  %11 = load i8, i8* %load_failed_p, align 1
  %tobool = trunc i8 %11 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %type = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 20
  %13 = load %struct.image_type*, %struct.image_type** %type, align 8
  %load = getelementptr inbounds %struct.image_type, %struct.image_type* %13, i32 0, i32 2
  %14 = load i1 (%struct.frame*, %struct.image*)*, i1 (%struct.frame*, %struct.image*)** %load, align 8
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %call1 = call zeroext i1 %14(%struct.frame* %15, %struct.image* %16)
  %lnot = xor i1 %call1, true
  %17 = load %struct.image*, %struct.image** %img.addr, align 8
  %load_failed_p2 = getelementptr inbounds %struct.image, %struct.image* %17, i32 0, i32 21
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %load_failed_p2, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %18 = load %struct.image*, %struct.image** %img.addr, align 8
  %load_failed_p3 = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 21
  %19 = load i8, i8* %load_failed_p3, align 1
  %tobool4 = trunc i8 %19 to i1
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  call void @block_input()
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %21 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @image_sync_to_pixmaps(%struct.frame* %20, %struct.image* %21)
  call void @unblock_input()
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  ret void
}

declare { i64, i64 } @current_timespec() #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal void @image_sync_to_pixmaps(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 3
  %1 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %tobool = icmp ne %struct._XImage* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg1 = getelementptr inbounds %struct.image, %struct.image* %3, i32 0, i32 3
  %4 = load %struct._XImage*, %struct._XImage** %ximg1, align 8
  %5 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %5, i32 0, i32 1
  %6 = load i64, i64* %pixmap, align 8
  %7 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %7, i32 0, i32 11
  %8 = load i32, i32* %width, align 4
  %9 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 12
  %10 = load i32, i32* %height, align 4
  call void @x_put_x_image(%struct.frame* %2, %struct._XImage* %4, i64 %6, i32 %8, i32 %10)
  %11 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg2 = getelementptr inbounds %struct.image, %struct.image* %11, i32 0, i32 3
  %12 = load %struct._XImage*, %struct._XImage** %ximg2, align 8
  call void @x_destroy_x_image(%struct._XImage* %12)
  %13 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg3 = getelementptr inbounds %struct.image, %struct.image* %13, i32 0, i32 3
  store %struct._XImage* null, %struct._XImage** %ximg3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 4
  %15 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %tobool4 = icmp ne %struct._XImage* %15, null
  br i1 %tobool4, label %if.then.5, label %if.end.11

if.then.5:                                        ; preds = %if.end
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %17 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img6 = getelementptr inbounds %struct.image, %struct.image* %17, i32 0, i32 4
  %18 = load %struct._XImage*, %struct._XImage** %mask_img6, align 8
  %19 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %19, i32 0, i32 2
  %20 = load i64, i64* %mask, align 8
  %21 = load %struct.image*, %struct.image** %img.addr, align 8
  %width7 = getelementptr inbounds %struct.image, %struct.image* %21, i32 0, i32 11
  %22 = load i32, i32* %width7, align 4
  %23 = load %struct.image*, %struct.image** %img.addr, align 8
  %height8 = getelementptr inbounds %struct.image, %struct.image* %23, i32 0, i32 12
  %24 = load i32, i32* %height8, align 4
  call void @x_put_x_image(%struct.frame* %16, %struct._XImage* %18, i64 %20, i32 %22, i32 %24)
  %25 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img9 = getelementptr inbounds %struct.image, %struct.image* %25, i32 0, i32 4
  %26 = load %struct._XImage*, %struct._XImage** %mask_img9, align 8
  call void @x_destroy_x_image(%struct._XImage* %26)
  %27 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img10 = getelementptr inbounds %struct.image, %struct.image* %27, i32 0, i32 4
  store %struct._XImage* null, %struct._XImage** %mask_img10, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.5, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @image_ascent(%struct.image* %img, %struct.face* %face, %struct.glyph_slice* %slice) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %face.addr = alloca %struct.face*, align 8
  %slice.addr = alloca %struct.glyph_slice*, align 8
  %height = alloca i32, align 4
  %ascent = alloca i32, align 4
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store %struct.face* %face, %struct.face** %face.addr, align 8
  store %struct.glyph_slice* %slice, %struct.glyph_slice** %slice.addr, align 8
  %0 = load %struct.glyph_slice*, %struct.glyph_slice** %slice.addr, align 8
  %1 = bitcast %struct.glyph_slice* %0 to i64*
  %bf.load = load i64, i64* %1, align 4
  %bf.lshr = lshr i64 %bf.load, 48
  %bf.cast = trunc i64 %bf.lshr to i32
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %height1 = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 12
  %3 = load i32, i32* %height1, align 4
  %cmp = icmp eq i32 %bf.cast, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2 = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 12
  %5 = load i32, i32* %height2, align 4
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %vmargin = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 19
  %7 = load i32, i32* %vmargin, align 4
  %add = add nsw i32 %5, %7
  store i32 %add, i32* %height, align 4
  br label %if.end.17

if.else:                                          ; preds = %entry
  %8 = load %struct.glyph_slice*, %struct.glyph_slice** %slice.addr, align 8
  %9 = bitcast %struct.glyph_slice* %8 to i64*
  %bf.load3 = load i64, i64* %9, align 4
  %bf.lshr4 = lshr i64 %bf.load3, 16
  %bf.clear = and i64 %bf.lshr4, 65535
  %bf.cast5 = trunc i64 %bf.clear to i32
  %cmp6 = icmp eq i32 %bf.cast5, 0
  br i1 %cmp6, label %if.then.7, label %if.else.13

if.then.7:                                        ; preds = %if.else
  %10 = load %struct.glyph_slice*, %struct.glyph_slice** %slice.addr, align 8
  %11 = bitcast %struct.glyph_slice* %10 to i64*
  %bf.load8 = load i64, i64* %11, align 4
  %bf.lshr9 = lshr i64 %bf.load8, 48
  %bf.cast10 = trunc i64 %bf.lshr9 to i32
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %vmargin11 = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 19
  %13 = load i32, i32* %vmargin11, align 4
  %add12 = add nsw i32 %bf.cast10, %13
  store i32 %add12, i32* %height, align 4
  br label %if.end

if.else.13:                                       ; preds = %if.else
  %14 = load %struct.glyph_slice*, %struct.glyph_slice** %slice.addr, align 8
  %15 = bitcast %struct.glyph_slice* %14 to i64*
  %bf.load14 = load i64, i64* %15, align 4
  %bf.lshr15 = lshr i64 %bf.load14, 48
  %bf.cast16 = trunc i64 %bf.lshr15 to i32
  store i32 %bf.cast16, i32* %height, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.13, %if.then.7
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %if.then
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %ascent18 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 14
  %17 = load i32, i32* %ascent18, align 4
  %cmp19 = icmp eq i32 %17, -1
  br i1 %cmp19, label %if.then.20, label %if.else.30

if.then.20:                                       ; preds = %if.end.17
  %18 = load %struct.face*, %struct.face** %face.addr, align 8
  %font = getelementptr inbounds %struct.face, %struct.face* %18, i32 0, i32 10
  %19 = load %struct.font*, %struct.font** %font, align 8
  %tobool = icmp ne %struct.font* %19, null
  br i1 %tobool, label %if.then.21, label %if.else.27

if.then.21:                                       ; preds = %if.then.20
  %20 = load i32, i32* %height, align 4
  %21 = load %struct.face*, %struct.face** %face.addr, align 8
  %font22 = getelementptr inbounds %struct.face, %struct.face* %21, i32 0, i32 10
  %22 = load %struct.font*, %struct.font** %font22, align 8
  %ascent23 = getelementptr inbounds %struct.font, %struct.font* %22, i32 0, i32 8
  %23 = load i32, i32* %ascent23, align 4
  %add24 = add nsw i32 %20, %23
  %24 = load %struct.face*, %struct.face** %face.addr, align 8
  %font25 = getelementptr inbounds %struct.face, %struct.face* %24, i32 0, i32 10
  %25 = load %struct.font*, %struct.font** %font25, align 8
  %descent = getelementptr inbounds %struct.font, %struct.font* %25, i32 0, i32 9
  %26 = load i32, i32* %descent, align 4
  %sub = sub nsw i32 %add24, %26
  %add26 = add nsw i32 %sub, 1
  %div = sdiv i32 %add26, 2
  store i32 %div, i32* %ascent, align 4
  br label %if.end.29

if.else.27:                                       ; preds = %if.then.20
  %27 = load i32, i32* %height, align 4
  %div28 = sdiv i32 %27, 2
  store i32 %div28, i32* %ascent, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.27, %if.then.21
  br label %if.end.35

if.else.30:                                       ; preds = %if.end.17
  %28 = load i32, i32* %height, align 4
  %conv = sitofp i32 %28 to double
  %29 = load %struct.image*, %struct.image** %img.addr, align 8
  %ascent31 = getelementptr inbounds %struct.image, %struct.image* %29, i32 0, i32 14
  %30 = load i32, i32* %ascent31, align 4
  %conv32 = sitofp i32 %30 to double
  %div33 = fdiv double %conv32, 1.000000e+02
  %mul = fmul double %conv, %div33
  %conv34 = fptosi double %mul to i32
  store i32 %conv34, i32* %ascent, align 4
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.30, %if.end.29
  %31 = load i32, i32* %ascent, align 4
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define i64 @image_background(%struct.image* %img, %struct.frame* %f, %struct._XImage* %ximg) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %ximg.addr = alloca %struct._XImage*, align 8
  %free_ximg = alloca i8, align 1
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XImage* %ximg, %struct._XImage** %ximg.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 10
  %bf.load = load i8, i8* %background_valid, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.11, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %tobool = icmp ne %struct._XImage* %1, null
  %lnot = xor i1 %tobool, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %free_ximg, align 1
  %2 = load i8, i8* %free_ximg, align 1
  %tobool1 = trunc i8 %2 to i1
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %call = call %struct._XImage* @image_get_x_image(%struct.frame* %3, %struct.image* %4, i1 zeroext false)
  store %struct._XImage* %call, %struct._XImage** %ximg.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %5 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %corners = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 13
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %corners, i32 0, i32 0
  %7 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %7, i32 0, i32 11
  %8 = load i32, i32* %width, align 4
  %conv = sext i32 %8 to i64
  %9 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 12
  %10 = load i32, i32* %height, align 4
  %conv3 = sext i32 %10 to i64
  %call4 = call i64 @four_corners_best(%struct._XImage* %5, i32* %arraydecay, i64 %conv, i64 %conv3)
  %11 = load %struct.image*, %struct.image** %img.addr, align 8
  %background = getelementptr inbounds %struct.image, %struct.image* %11, i32 0, i32 7
  store i64 %call4, i64* %background, align 8
  %12 = load i8, i8* %free_ximg, align 1
  %tobool5 = trunc i8 %12 to i1
  br i1 %tobool5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %13 = load %struct.image*, %struct.image** %img.addr, align 8
  %14 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  call void @image_unget_x_image(%struct.image* %13, i1 zeroext false, %struct._XImage* %14)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.end
  %15 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid8 = getelementptr inbounds %struct.image, %struct.image* %15, i32 0, i32 10
  %bf.load9 = load i8, i8* %background_valid8, align 8
  %bf.clear10 = and i8 %bf.load9, -3
  %bf.set = or i8 %bf.clear10, 2
  store i8 %bf.set, i8* %background_valid8, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.7, %entry
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %background12 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 7
  %17 = load i64, i64* %background12, align 8
  ret i64 %17
}

; Function Attrs: nounwind uwtable
define internal %struct._XImage* @image_get_x_image(%struct.frame* %f, %struct.image* %img, i1 zeroext %mask_p) #0 {
entry:
  %retval = alloca %struct._XImage*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %mask_p.addr = alloca i8, align 1
  %ximg_in_img = alloca %struct._XImage*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %frombool = zext i1 %mask_p to i8
  store i8 %frombool, i8* %mask_p.addr, align 1
  %0 = load i8, i8* %mask_p.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg = getelementptr inbounds %struct.image, %struct.image* %1, i32 0, i32 3
  %2 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img = getelementptr inbounds %struct.image, %struct.image* %3, i32 0, i32 4
  %4 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._XImage* [ %2, %cond.true ], [ %4, %cond.false ]
  store %struct._XImage* %cond, %struct._XImage** %ximg_in_img, align 8
  %5 = load %struct._XImage*, %struct._XImage** %ximg_in_img, align 8
  %tobool1 = icmp ne %struct._XImage* %5, null
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %6 = load %struct._XImage*, %struct._XImage** %ximg_in_img, align 8
  store %struct._XImage* %6, %struct._XImage** %retval
  br label %return

if.else:                                          ; preds = %cond.end
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 44
  %9 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 2
  %10 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %11 = load i8, i8* %mask_p.addr, align 1
  %tobool2 = trunc i8 %11 to i1
  br i1 %tobool2, label %cond.false.4, label %cond.true.3

cond.true.3:                                      ; preds = %if.else
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 1
  %13 = load i64, i64* %pixmap, align 8
  br label %cond.end.5

cond.false.4:                                     ; preds = %if.else
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 2
  %15 = load i64, i64* %mask, align 8
  br label %cond.end.5

cond.end.5:                                       ; preds = %cond.false.4, %cond.true.3
  %cond6 = phi i64 [ %13, %cond.true.3 ], [ %15, %cond.false.4 ]
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 11
  %17 = load i32, i32* %width, align 4
  %18 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 12
  %19 = load i32, i32* %height, align 4
  %call = call %struct._XImage* @XGetImage(%struct._XDisplay* %10, i64 %cond6, i32 0, i32 0, i32 %17, i32 %19, i64 -1, i32 2)
  store %struct._XImage* %call, %struct._XImage** %retval
  br label %return

return:                                           ; preds = %cond.end.5, %if.then
  %20 = load %struct._XImage*, %struct._XImage** %retval
  ret %struct._XImage* %20
}

; Function Attrs: nounwind uwtable
define internal void @image_unget_x_image(%struct.image* %img, i1 zeroext %mask_p, %struct._XImage* %ximg) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %mask_p.addr = alloca i8, align 1
  %ximg.addr = alloca %struct._XImage*, align 8
  %ximg_in_img = alloca %struct._XImage*, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %frombool = zext i1 %mask_p to i8
  store i8 %frombool, i8* %mask_p.addr, align 1
  store %struct._XImage* %ximg, %struct._XImage** %ximg.addr, align 8
  %0 = load i8, i8* %mask_p.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg1 = getelementptr inbounds %struct.image, %struct.image* %1, i32 0, i32 3
  %2 = load %struct._XImage*, %struct._XImage** %ximg1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img = getelementptr inbounds %struct.image, %struct.image* %3, i32 0, i32 4
  %4 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._XImage* [ %2, %cond.true ], [ %4, %cond.false ]
  store %struct._XImage* %cond, %struct._XImage** %ximg_in_img, align 8
  %5 = load %struct._XImage*, %struct._XImage** %ximg_in_img, align 8
  %tobool2 = icmp ne %struct._XImage* %5, null
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  br label %if.end

if.else:                                          ; preds = %cond.end
  %6 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %f = getelementptr inbounds %struct._XImage, %struct._XImage* %6, i32 0, i32 16
  %destroy_image = getelementptr inbounds %struct.funcs, %struct.funcs* %f, i32 0, i32 1
  %7 = load i32 (%struct._XImage*)*, i32 (%struct._XImage*)** %destroy_image, align 8
  %8 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %call = call i32 %7(%struct._XImage* %8)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @image_background_transparent(%struct.image* %img, %struct.frame* %f, %struct._XImage* %mask) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %mask.addr = alloca %struct._XImage*, align 8
  %free_mask = alloca i8, align 1
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XImage* %mask, %struct._XImage** %mask.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_transparent_valid = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 10
  %bf.load = load i8, i8* %background_transparent_valid, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.23, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask1 = getelementptr inbounds %struct.image, %struct.image* %1, i32 0, i32 2
  %2 = load i64, i64* %mask1, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %3 = load %struct._XImage*, %struct._XImage** %mask.addr, align 8
  %tobool3 = icmp ne %struct._XImage* %3, null
  %lnot = xor i1 %tobool3, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %free_mask, align 1
  %4 = load i8, i8* %free_mask, align 1
  %tobool4 = trunc i8 %4 to i1
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then.2
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %call = call %struct._XImage* @image_get_x_image(%struct.frame* %5, %struct.image* %6, i1 zeroext true)
  store %struct._XImage* %call, %struct._XImage** %mask.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then.2
  %7 = load %struct._XImage*, %struct._XImage** %mask.addr, align 8
  %8 = load %struct.image*, %struct.image** %img.addr, align 8
  %corners = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 13
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %corners, i32 0, i32 0
  %9 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 11
  %10 = load i32, i32* %width, align 4
  %conv = sext i32 %10 to i64
  %11 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %11, i32 0, i32 12
  %12 = load i32, i32* %height, align 4
  %conv6 = sext i32 %12 to i64
  %call7 = call i64 @four_corners_best(%struct._XImage* %7, i32* %arraydecay, i64 %conv, i64 %conv6)
  %cmp = icmp eq i64 %call7, 0
  %13 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_transparent = getelementptr inbounds %struct.image, %struct.image* %13, i32 0, i32 10
  %14 = zext i1 %cmp to i8
  %bf.load9 = load i8, i8* %background_transparent, align 8
  %bf.clear10 = and i8 %bf.load9, -2
  %bf.set = or i8 %bf.clear10, %14
  store i8 %bf.set, i8* %background_transparent, align 8
  %tobool11 = trunc i8 %14 to i1
  %15 = load i8, i8* %free_mask, align 1
  %tobool12 = trunc i8 %15 to i1
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %17 = load %struct._XImage*, %struct._XImage** %mask.addr, align 8
  call void @image_unget_x_image(%struct.image* %16, i1 zeroext true, %struct._XImage* %17)
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.end
  br label %if.end.18

if.else:                                          ; preds = %if.then
  %18 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_transparent15 = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 10
  %bf.load16 = load i8, i8* %background_transparent15, align 8
  %bf.clear17 = and i8 %bf.load16, -2
  store i8 %bf.clear17, i8* %background_transparent15, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.end.14
  %19 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_transparent_valid19 = getelementptr inbounds %struct.image, %struct.image* %19, i32 0, i32 10
  %bf.load20 = load i8, i8* %background_transparent_valid19, align 8
  %bf.clear21 = and i8 %bf.load20, -5
  %bf.set22 = or i8 %bf.clear21, 4
  store i8 %bf.set22, i8* %background_transparent_valid19, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.18, %entry
  %20 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_transparent24 = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 10
  %bf.load25 = load i8, i8* %background_transparent24, align 8
  %bf.clear26 = and i8 %bf.load25, 1
  %bf.cast27 = trunc i8 %bf.clear26 to i1
  %conv28 = zext i1 %bf.cast27 to i32
  ret i32 %conv28
}

; Function Attrs: nounwind uwtable
define %struct.image_cache* @make_image_cache() #0 {
entry:
  %c = alloca %struct.image_cache*, align 8
  %call = call noalias i8* @xmalloc(i64 40)
  %0 = bitcast i8* %call to %struct.image_cache*
  store %struct.image_cache* %0, %struct.image_cache** %c, align 8
  %1 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %size = getelementptr inbounds %struct.image_cache, %struct.image_cache* %1, i32 0, i32 2
  store i64 50, i64* %size, align 8
  %2 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %refcount = getelementptr inbounds %struct.image_cache, %struct.image_cache* %2, i32 0, i32 4
  store i64 0, i64* %refcount, align 8
  %3 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %3, i32 0, i32 3
  store i64 0, i64* %used, align 8
  %4 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %size1 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %4, i32 0, i32 2
  %5 = load i64, i64* %size1, align 8
  %mul = mul i64 %5, 8
  %call2 = call noalias i8* @xmalloc(i64 %mul)
  %6 = bitcast i8* %call2 to %struct.image**
  %7 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %7, i32 0, i32 1
  store %struct.image** %6, %struct.image*** %images, align 8
  %call3 = call noalias i8* @xzalloc(i64 8008)
  %8 = bitcast i8* %call3 to %struct.image**
  %9 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %buckets = getelementptr inbounds %struct.image_cache, %struct.image_cache* %9, i32 0, i32 0
  store %struct.image** %8, %struct.image*** %buckets, align 8
  %10 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  ret %struct.image_cache* %10
}

declare noalias i8* @xmalloc(i64) #1

declare noalias i8* @xzalloc(i64) #1

; Function Attrs: nounwind uwtable
define void @free_image_cache(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %c = alloca %struct.image_cache*, align 8
  %i = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 61
  %1 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 11
  %2 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  store %struct.image_cache* %2, %struct.image_cache** %c, align 8
  %3 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %tobool = icmp ne %struct.image_cache* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i64, i64* %i, align 8
  %5 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %5, i32 0, i32 3
  %6 = load i64, i64* %used, align 8
  %cmp = icmp slt i64 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %8 = load i64, i64* %i, align 8
  %9 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %9, i32 0, i32 1
  %10 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %10, i64 %8
  %11 = load %struct.image*, %struct.image** %arrayidx, align 8
  call void @free_image(%struct.frame* %7, %struct.image* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i64, i64* %i, align 8
  %inc = add nsw i64 %12, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images1 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %13, i32 0, i32 1
  %14 = load %struct.image**, %struct.image*** %images1, align 8
  %15 = bitcast %struct.image** %14 to i8*
  call void @xfree(i8* %15)
  %16 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %buckets = getelementptr inbounds %struct.image_cache, %struct.image_cache* %16, i32 0, i32 0
  %17 = load %struct.image**, %struct.image*** %buckets, align 8
  %18 = bitcast %struct.image** %17 to i8*
  call void @xfree(i8* %18)
  %19 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %20 = bitcast %struct.image_cache* %19 to i8*
  call void @xfree(i8* %20)
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal2 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 61
  %22 = load %struct.terminal*, %struct.terminal** %terminal2, align 8
  %image_cache3 = getelementptr inbounds %struct.terminal, %struct.terminal* %22, i32 0, i32 11
  store %struct.image_cache* null, %struct.image_cache** %image_cache3, align 8
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @free_image(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %c = alloca %struct.image_cache*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %tobool = icmp ne %struct.image* %0, null
  br i1 %tobool, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 61
  %2 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 11
  %3 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  store %struct.image_cache* %3, %struct.image_cache** %c, align 8
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %prev = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 26
  %5 = load %struct.image*, %struct.image** %prev, align 8
  %tobool1 = icmp ne %struct.image* %5, null
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %next = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 25
  %7 = load %struct.image*, %struct.image** %next, align 8
  %8 = load %struct.image*, %struct.image** %img.addr, align 8
  %prev3 = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 26
  %9 = load %struct.image*, %struct.image** %prev3, align 8
  %next4 = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 25
  store %struct.image* %7, %struct.image** %next4, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %next5 = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 25
  %11 = load %struct.image*, %struct.image** %next5, align 8
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %hash = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 23
  %13 = load i64, i64* %hash, align 8
  %rem = urem i64 %13, 1001
  %14 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %buckets = getelementptr inbounds %struct.image_cache, %struct.image_cache* %14, i32 0, i32 0
  %15 = load %struct.image**, %struct.image*** %buckets, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %15, i64 %rem
  store %struct.image* %11, %struct.image** %arrayidx, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %next6 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 25
  %17 = load %struct.image*, %struct.image** %next6, align 8
  %tobool7 = icmp ne %struct.image* %17, null
  br i1 %tobool7, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %if.end
  %18 = load %struct.image*, %struct.image** %img.addr, align 8
  %prev9 = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 26
  %19 = load %struct.image*, %struct.image** %prev9, align 8
  %20 = load %struct.image*, %struct.image** %img.addr, align 8
  %next10 = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 25
  %21 = load %struct.image*, %struct.image** %next10, align 8
  %prev11 = getelementptr inbounds %struct.image, %struct.image* %21, i32 0, i32 26
  store %struct.image* %19, %struct.image** %prev11, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.8, %if.end
  %22 = load %struct.image*, %struct.image** %img.addr, align 8
  %id = getelementptr inbounds %struct.image, %struct.image* %22, i32 0, i32 24
  %23 = load i64, i64* %id, align 8
  %24 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %24, i32 0, i32 1
  %25 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx13 = getelementptr inbounds %struct.image*, %struct.image** %25, i64 %23
  store %struct.image* null, %struct.image** %arrayidx13, align 8
  %26 = load %struct.image*, %struct.image** %img.addr, align 8
  %type = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 20
  %27 = load %struct.image_type*, %struct.image_type** %type, align 8
  %free = getelementptr inbounds %struct.image_type, %struct.image_type* %27, i32 0, i32 3
  %28 = load void (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)** %free, align 8
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %30 = load %struct.image*, %struct.image** %img.addr, align 8
  call void %28(%struct.frame* %29, %struct.image* %30)
  %31 = load %struct.image*, %struct.image** %img.addr, align 8
  %32 = bitcast %struct.image* %31 to i8*
  call void @xfree(i8* %32)
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.12, %entry
  ret void
}

declare void @xfree(i8*) #1

; Function Attrs: nounwind uwtable
define void @clear_image_caches(i64 %filter) #0 {
entry:
  %filter.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  store i64 %filter, i64* %filter.addr, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp3 = icmp eq i32 %bf.cast, 2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %frame, align 8
  %sub5 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub5 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %14 = load i64, i64* %filter.addr, align 8
  call void @clear_image_cache(%struct.frame* %13, i64 %14)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i64, i64* %tail, align 8
  %sub6 = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub6 to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %18 = load i64, i64* %cdr, align 8
  store i64 %18, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @clear_image_cache(%struct.frame* %f, i64 %filter) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %filter.addr = alloca i64, align 8
  %c = alloca %struct.image_cache*, align 8
  %i = alloca i64, align 8
  %nfreed = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  %old = alloca %struct.timespec, align 8
  %t = alloca %struct.timespec, align 8
  %delay = alloca double, align 8
  %nimages = alloca i64, align 8
  %coerce = alloca %struct.timespec, align 8
  %agg.tmp = alloca %struct.timespec, align 8
  %coerce42 = alloca %struct.timespec, align 8
  %img48 = alloca %struct.image*, align 8
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %fr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %filter, i64* %filter.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 61
  %1 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 11
  %2 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  store %struct.image_cache* %2, %struct.image_cache** %c, align 8
  %3 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %tobool = icmp ne %struct.image_cache* %3, null
  br i1 %tobool, label %if.then, label %if.end.83

if.then:                                          ; preds = %entry
  store i64 0, i64* %nfreed, align 8
  call void @block_input()
  %4 = load i64, i64* %filter.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call
  br i1 %cmp, label %if.else, label %if.then.1

if.then.1:                                        ; preds = %if.then
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.1
  %5 = load i64, i64* %i, align 8
  %6 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %6, i32 0, i32 3
  %7 = load i64, i64* %used, align 8
  %cmp2 = icmp slt i64 %5, %7
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i64, i64* %i, align 8
  %9 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %9, i32 0, i32 1
  %10 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %10, i64 %8
  %11 = load %struct.image*, %struct.image** %arrayidx, align 8
  store %struct.image* %11, %struct.image** %img, align 8
  %12 = load %struct.image*, %struct.image** %img, align 8
  %tobool3 = icmp ne %struct.image* %12, null
  br i1 %tobool3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %call4 = call i64 @builtin_lisp_symbol(i32 901)
  %13 = load i64, i64* %filter.addr, align 8
  %cmp5 = icmp eq i64 %call4, %13
  br i1 %cmp5, label %if.then.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %14 = load i64, i64* %filter.addr, align 8
  %15 = load %struct.image*, %struct.image** %img, align 8
  %dependencies = getelementptr inbounds %struct.image, %struct.image* %15, i32 0, i32 16
  %16 = load i64, i64* %dependencies, align 8
  %call6 = call i64 @Fmember(i64 %14, i64 %16)
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %call6, %call7
  br i1 %cmp8, label %if.end, label %if.then.9

if.then.9:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %18 = load %struct.image*, %struct.image** %img, align 8
  call void @free_image(%struct.frame* %17, %struct.image* %18)
  %19 = load i64, i64* %nfreed, align 8
  %inc = add nsw i64 %19, 1
  store i64 %inc, i64* %nfreed, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.9, %lor.lhs.false, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i64, i64* %i, align 8
  %inc10 = add nsw i64 %20, 1
  store i64 %inc10, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.63

if.else:                                          ; preds = %if.then
  %21 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 130), align 8
  %and = and i64 %21, 7
  %conv = trunc i64 %and to i32
  %and11 = and i32 %conv, -5
  %cmp12 = icmp eq i32 %and11, 2
  br i1 %cmp12, label %if.then.14, label %if.end.62

if.then.14:                                       ; preds = %if.else
  store i64 0, i64* %nimages, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.26, %if.then.14
  %22 = load i64, i64* %i, align 8
  %23 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used16 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %23, i32 0, i32 3
  %24 = load i64, i64* %used16, align 8
  %cmp17 = icmp slt i64 %22, %24
  br i1 %cmp17, label %for.body.19, label %for.end.28

for.body.19:                                      ; preds = %for.cond.15
  %25 = load i64, i64* %i, align 8
  %26 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images20 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %26, i32 0, i32 1
  %27 = load %struct.image**, %struct.image*** %images20, align 8
  %arrayidx21 = getelementptr inbounds %struct.image*, %struct.image** %27, i64 %25
  %28 = load %struct.image*, %struct.image** %arrayidx21, align 8
  %tobool22 = icmp ne %struct.image* %28, null
  br i1 %tobool22, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %for.body.19
  %29 = load i64, i64* %nimages, align 8
  %inc24 = add nsw i64 %29, 1
  store i64 %inc24, i64* %nimages, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.23, %for.body.19
  br label %for.inc.26

for.inc.26:                                       ; preds = %if.end.25
  %30 = load i64, i64* %i, align 8
  %inc27 = add nsw i64 %30, 1
  store i64 %inc27, i64* %i, align 8
  br label %for.cond.15

for.end.28:                                       ; preds = %for.cond.15
  %31 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 130), align 8
  %shr = ashr i64 %31, 2
  %conv29 = sitofp i64 %shr to double
  store double %conv29, double* %delay, align 8
  %32 = load i64, i64* %nimages, align 8
  %cmp30 = icmp sgt i64 %32, 40
  br i1 %cmp30, label %if.then.32, label %if.end.36

if.then.32:                                       ; preds = %for.end.28
  %33 = load double, double* %delay, align 8
  %mul = fmul double 1.600000e+03, %33
  %34 = load i64, i64* %nimages, align 8
  %conv33 = sitofp i64 %34 to double
  %div = fdiv double %mul, %conv33
  %35 = load i64, i64* %nimages, align 8
  %conv34 = sitofp i64 %35 to double
  %div35 = fdiv double %div, %conv34
  store double %div35, double* %delay, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.32, %for.end.28
  %36 = load double, double* %delay, align 8
  %cmp37 = fcmp ogt double %36, 1.000000e+00
  br i1 %cmp37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.36
  %37 = load double, double* %delay, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.36
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %37, %cond.true ], [ 1.000000e+00, %cond.false ]
  store double %cond, double* %delay, align 8
  %call39 = call { i64, i64 } @current_timespec()
  %38 = bitcast %struct.timespec* %coerce to { i64, i64 }*
  %39 = getelementptr { i64, i64 }, { i64, i64 }* %38, i32 0, i32 0
  %40 = extractvalue { i64, i64 } %call39, 0
  store i64 %40, i64* %39, align 8
  %41 = getelementptr { i64, i64 }, { i64, i64 }* %38, i32 0, i32 1
  %42 = extractvalue { i64, i64 } %call39, 1
  store i64 %42, i64* %41, align 8
  %43 = bitcast %struct.timespec* %t to i8*
  %44 = bitcast %struct.timespec* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 16, i32 8, i1 false)
  %45 = load double, double* %delay, align 8
  %call40 = call { i64, i64 } @dtotimespec(double %45) #12
  %46 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %47 = getelementptr { i64, i64 }, { i64, i64 }* %46, i32 0, i32 0
  %48 = extractvalue { i64, i64 } %call40, 0
  store i64 %48, i64* %47, align 8
  %49 = getelementptr { i64, i64 }, { i64, i64 }* %46, i32 0, i32 1
  %50 = extractvalue { i64, i64 } %call40, 1
  store i64 %50, i64* %49, align 8
  %51 = bitcast %struct.timespec* %t to { i64, i64 }*
  %52 = getelementptr { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 1
  %54 = getelementptr { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1
  %55 = load i64, i64* %54, align 1
  %56 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %57 = getelementptr { i64, i64 }, { i64, i64 }* %56, i32 0, i32 0
  %58 = load i64, i64* %57, align 1
  %59 = getelementptr { i64, i64 }, { i64, i64 }* %56, i32 0, i32 1
  %60 = load i64, i64* %59, align 1
  %call41 = call { i64, i64 } @timespec_sub(i64 %53, i64 %55, i64 %58, i64 %60) #12
  %61 = bitcast %struct.timespec* %coerce42 to { i64, i64 }*
  %62 = getelementptr { i64, i64 }, { i64, i64 }* %61, i32 0, i32 0
  %63 = extractvalue { i64, i64 } %call41, 0
  store i64 %63, i64* %62, align 8
  %64 = getelementptr { i64, i64 }, { i64, i64 }* %61, i32 0, i32 1
  %65 = extractvalue { i64, i64 } %call41, 1
  store i64 %65, i64* %64, align 8
  %66 = bitcast %struct.timespec* %old to i8*
  %67 = bitcast %struct.timespec* %coerce42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %66, i8* %67, i64 16, i32 8, i1 false)
  store i64 0, i64* %i, align 8
  br label %for.cond.43

for.cond.43:                                      ; preds = %for.inc.59, %cond.end
  %68 = load i64, i64* %i, align 8
  %69 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used44 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %69, i32 0, i32 3
  %70 = load i64, i64* %used44, align 8
  %cmp45 = icmp slt i64 %68, %70
  br i1 %cmp45, label %for.body.47, label %for.end.61

for.body.47:                                      ; preds = %for.cond.43
  %71 = load i64, i64* %i, align 8
  %72 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images49 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %72, i32 0, i32 1
  %73 = load %struct.image**, %struct.image*** %images49, align 8
  %arrayidx50 = getelementptr inbounds %struct.image*, %struct.image** %73, i64 %71
  %74 = load %struct.image*, %struct.image** %arrayidx50, align 8
  store %struct.image* %74, %struct.image** %img48, align 8
  %75 = load %struct.image*, %struct.image** %img48, align 8
  %tobool51 = icmp ne %struct.image* %75, null
  br i1 %tobool51, label %land.lhs.true.52, label %if.end.58

land.lhs.true.52:                                 ; preds = %for.body.47
  %76 = load %struct.image*, %struct.image** %img48, align 8
  %timestamp = getelementptr inbounds %struct.image, %struct.image* %76, i32 0, i32 0
  %77 = bitcast %struct.timespec* %timestamp to { i64, i64 }*
  %78 = getelementptr { i64, i64 }, { i64, i64 }* %77, i32 0, i32 0
  %79 = load i64, i64* %78, align 1
  %80 = getelementptr { i64, i64 }, { i64, i64 }* %77, i32 0, i32 1
  %81 = load i64, i64* %80, align 1
  %82 = bitcast %struct.timespec* %old to { i64, i64 }*
  %83 = getelementptr { i64, i64 }, { i64, i64 }* %82, i32 0, i32 0
  %84 = load i64, i64* %83, align 1
  %85 = getelementptr { i64, i64 }, { i64, i64 }* %82, i32 0, i32 1
  %86 = load i64, i64* %85, align 1
  %call53 = call i32 @timespec_cmp(i64 %79, i64 %81, i64 %84, i64 %86) #10
  %cmp54 = icmp slt i32 %call53, 0
  br i1 %cmp54, label %if.then.56, label %if.end.58

if.then.56:                                       ; preds = %land.lhs.true.52
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %88 = load %struct.image*, %struct.image** %img48, align 8
  call void @free_image(%struct.frame* %87, %struct.image* %88)
  %89 = load i64, i64* %nfreed, align 8
  %inc57 = add nsw i64 %89, 1
  store i64 %inc57, i64* %nfreed, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.56, %land.lhs.true.52, %for.body.47
  br label %for.inc.59

for.inc.59:                                       ; preds = %if.end.58
  %90 = load i64, i64* %i, align 8
  %inc60 = add nsw i64 %90, 1
  store i64 %inc60, i64* %i, align 8
  br label %for.cond.43

for.end.61:                                       ; preds = %for.cond.43
  br label %if.end.62

if.end.62:                                        ; preds = %for.end.61, %if.else
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %for.end
  %91 = load i64, i64* %nfreed, align 8
  %tobool64 = icmp ne i64 %91, 0
  br i1 %tobool64, label %if.then.65, label %if.end.82

if.then.65:                                       ; preds = %if.end.63
  %92 = load i64, i64* @Vframe_list, align 8
  store i64 %92, i64* %tail, align 8
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.79, %if.then.65
  %93 = load i64, i64* %tail, align 8
  %and67 = and i64 %93, 7
  %conv68 = trunc i64 %and67 to i32
  %cmp69 = icmp eq i32 %conv68, 3
  br i1 %cmp69, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.66
  %94 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %94, 3
  %95 = inttoptr i64 %sub to i8*
  %96 = bitcast i8* %95 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %96, i32 0, i32 0
  %97 = load i64, i64* %car, align 8
  store i64 %97, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.66
  %98 = phi i1 [ false, %for.cond.66 ], [ true, %land.rhs ]
  br i1 %98, label %for.body.71, label %for.end.81

for.body.71:                                      ; preds = %land.end
  %99 = load i64, i64* %frame, align 8
  %sub72 = sub nsw i64 %99, 5
  %100 = inttoptr i64 %sub72 to i8*
  %101 = bitcast i8* %100 to %struct.frame*
  store %struct.frame* %101, %struct.frame** %fr, align 8
  %102 = load %struct.frame*, %struct.frame** %fr, align 8
  %terminal73 = getelementptr inbounds %struct.frame, %struct.frame* %102, i32 0, i32 61
  %103 = load %struct.terminal*, %struct.terminal** %terminal73, align 8
  %image_cache74 = getelementptr inbounds %struct.terminal, %struct.terminal* %103, i32 0, i32 11
  %104 = load %struct.image_cache*, %struct.image_cache** %image_cache74, align 8
  %105 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %cmp75 = icmp eq %struct.image_cache* %104, %105
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %for.body.71
  %106 = load %struct.frame*, %struct.frame** %fr, align 8
  call void @clear_current_matrices(%struct.frame* %106)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %for.body.71
  br label %for.inc.79

for.inc.79:                                       ; preds = %if.end.78
  %107 = load i64, i64* %tail, align 8
  %sub80 = sub nsw i64 %107, 3
  %108 = inttoptr i64 %sub80 to i8*
  %109 = bitcast i8* %108 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %109, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %110 = load i64, i64* %cdr, align 8
  store i64 %110, i64* %tail, align 8
  br label %for.cond.66

for.end.81:                                       ; preds = %land.end
  store i32 19, i32* @windows_or_buffers_changed, align 4
  br label %if.end.82

if.end.82:                                        ; preds = %for.end.81, %if.end.63
  call void @unblock_input()
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fclear_image_cache(i64 %filter) #0 {
entry:
  %filter.addr = alloca i64, align 8
  store i64 %filter, i64* %filter.addr, align 8
  %0 = load i64, i64* %filter.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.else, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %filter.addr, align 8
  %call1 = call zeroext i1 @FRAMEP(i64 %1)
  br i1 %call1, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %2 = load i64, i64* %filter.addr, align 8
  call void @clear_image_caches(i64 %2)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i64, i64* %filter.addr, align 8
  %call2 = call %struct.frame* @decode_window_system_frame(i64 %3)
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  call void @clear_image_cache(%struct.frame* %call2, i64 %call3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call4
}

declare zeroext i1 @FRAMEP(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fimage_flush(i64 %spec, i64 %frame) #0 {
entry:
  %spec.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call = call zeroext i1 @valid_image_p(i64 %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %frame.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %2 = load i64, i64* @Vframe_list, align 8
  store i64 %2, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %3 = load i64, i64* %tail, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv, 3
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %4 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %4, 3
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %6, i32 0, i32 0
  %7 = load i64, i64* %car, align 8
  store i64 %7, i64* %frame.addr, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load i64, i64* %frame.addr, align 8
  %sub5 = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub5 to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  store %struct.frame* %11, %struct.frame** %f, align 8
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 26
  %13 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %13, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp6 = icmp eq i32 %bf.cast, 2
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %for.body
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %15 = load i64, i64* %spec.addr, align 8
  call void @uncache_image(%struct.frame* %14, i64 %15)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.9
  %16 = load i64, i64* %tail, align 8
  %sub10 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub10 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %19 = load i64, i64* %cdr, align 8
  store i64 %19, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %20 = load i64, i64* %frame.addr, align 8
  %call11 = call %struct.frame* @decode_window_system_frame(i64 %20)
  %21 = load i64, i64* %spec.addr, align 8
  call void @uncache_image(%struct.frame* %call11, i64 %21)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %for.end
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call13
}

; Function Attrs: nounwind uwtable
define internal void @uncache_image(%struct.frame* %f, i64 %spec) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %spec.addr = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i64, i64* %spec.addr, align 8
  %2 = load i64, i64* %spec.addr, align 8
  %call = call i64 @sxhash(i64 %2, i32 0)
  %call1 = call %struct.image* @search_image_cache(%struct.frame* %0, i64 %1, i64 %call)
  store %struct.image* %call1, %struct.image** %img, align 8
  %3 = load %struct.image*, %struct.image** %img, align 8
  %tobool = icmp ne %struct.image* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %5 = load %struct.image*, %struct.image** %img, align 8
  call void @free_image(%struct.frame* %4, %struct.image* %5)
  store i8 1, i8* @frame_garbaged, align 1
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %6)
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %8, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @sxhash(i64, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.image* @search_image_cache(%struct.frame* %f, i64 %spec, i64 %hash) #0 {
entry:
  %retval = alloca %struct.image*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %spec.addr = alloca i64, align 8
  %hash.addr = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  %c = alloca %struct.image_cache*, align 8
  %i = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %hash, i64* %hash.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 61
  %1 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 11
  %2 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  store %struct.image_cache* %2, %struct.image_cache** %c, align 8
  %3 = load i64, i64* %hash.addr, align 8
  %rem = urem i64 %3, 1001
  %conv = trunc i64 %rem to i32
  store i32 %conv, i32* %i, align 4
  %4 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %tobool = icmp ne %struct.image_cache* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.image* null, %struct.image** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %buckets = getelementptr inbounds %struct.image_cache, %struct.image_cache* %6, i32 0, i32 0
  %7 = load %struct.image**, %struct.image*** %buckets, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %7, i64 %idxprom
  %8 = load %struct.image*, %struct.image** %arrayidx, align 8
  store %struct.image* %8, %struct.image** %img, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load %struct.image*, %struct.image** %img, align 8
  %tobool1 = icmp ne %struct.image* %9, null
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.image*, %struct.image** %img, align 8
  %hash2 = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 23
  %11 = load i64, i64* %hash2, align 8
  %12 = load i64, i64* %hash.addr, align 8
  %cmp = icmp eq i64 %11, %12
  br i1 %cmp, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %for.body
  %13 = load %struct.image*, %struct.image** %img, align 8
  %spec4 = getelementptr inbounds %struct.image, %struct.image* %13, i32 0, i32 15
  %14 = load i64, i64* %spec4, align 8
  %15 = load i64, i64* %spec.addr, align 8
  %call = call i64 @Fequal(i64 %14, i64 %15)
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %call, %call5
  br i1 %cmp6, label %if.end.15, label %land.lhs.true.8

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %16 = load %struct.image*, %struct.image** %img, align 8
  %frame_foreground = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 8
  %17 = load i64, i64* %frame_foreground, align 8
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 78
  %19 = load i64, i64* %foreground_pixel, align 8
  %cmp9 = icmp eq i64 %17, %19
  br i1 %cmp9, label %land.lhs.true.11, label %if.end.15

land.lhs.true.11:                                 ; preds = %land.lhs.true.8
  %20 = load %struct.image*, %struct.image** %img, align 8
  %frame_background = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 9
  %21 = load i64, i64* %frame_background, align 8
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 77
  %23 = load i64, i64* %background_pixel, align 8
  %cmp12 = icmp eq i64 %21, %23
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true.11
  br label %for.end

if.end.15:                                        ; preds = %land.lhs.true.11, %land.lhs.true.8, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %24 = load %struct.image*, %struct.image** %img, align 8
  %next = getelementptr inbounds %struct.image, %struct.image* %24, i32 0, i32 25
  %25 = load %struct.image*, %struct.image** %next, align 8
  store %struct.image* %25, %struct.image** %img, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.14, %for.cond
  %26 = load %struct.image*, %struct.image** %img, align 8
  store %struct.image* %26, %struct.image** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %27 = load %struct.image*, %struct.image** %retval
  ret %struct.image* %27
}

; Function Attrs: nounwind uwtable
define internal %struct.image* @make_image(i64 %spec, i64 %hash) #0 {
entry:
  %spec.addr = alloca i64, align 8
  %hash.addr = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  %file = alloca i64, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %hash, i64* %hash.addr, align 8
  %call = call noalias i8* @xzalloc(i64 208)
  %0 = bitcast i8* %call to %struct.image*
  store %struct.image* %0, %struct.image** %img, align 8
  %1 = load i64, i64* %spec.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 41)
  %call2 = call i64 @image_spec_value(i64 %1, i64 %call1, i8* null)
  store i64 %call2, i64* %file, align 8
  %2 = load i64, i64* %file, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %file, align 8
  %call5 = call i64 @list1(i64 %3)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call4, %cond.true ], [ %call5, %cond.false ]
  %4 = load %struct.image*, %struct.image** %img, align 8
  %dependencies = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 16
  store i64 %cond, i64* %dependencies, align 8
  %5 = load i64, i64* %spec.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 131)
  %call7 = call i64 @image_spec_value(i64 %5, i64 %call6, i8* null)
  %call8 = call %struct.image_type* @lookup_image_type(i64 %call7)
  %6 = load %struct.image*, %struct.image** %img, align 8
  %type = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 20
  store %struct.image_type* %call8, %struct.image_type** %type, align 8
  %7 = load i64, i64* %spec.addr, align 8
  %8 = load %struct.image*, %struct.image** %img, align 8
  %spec9 = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 15
  store i64 %7, i64* %spec9, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %9 = load %struct.image*, %struct.image** %img, align 8
  %lisp_data = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 22
  store i64 %call10, i64* %lisp_data, align 8
  %10 = load %struct.image*, %struct.image** %img, align 8
  %ascent = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 14
  store i32 50, i32* %ascent, align 4
  %11 = load i64, i64* %hash.addr, align 8
  %12 = load %struct.image*, %struct.image** %img, align 8
  %hash11 = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 23
  store i64 %11, i64* %hash11, align 8
  %13 = load %struct.image*, %struct.image** %img, align 8
  %corners = getelementptr inbounds %struct.image, %struct.image* %13, i32 0, i32 13
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %corners, i32 0, i64 2
  store i32 -1, i32* %arrayidx, align 4
  %14 = load %struct.image*, %struct.image** %img, align 8
  ret %struct.image* %14
}

; Function Attrs: nounwind uwtable
define internal void @cache_image(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %c = alloca %struct.image_cache*, align 8
  %i = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 61
  %1 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 11
  %2 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  store %struct.image_cache* %2, %struct.image_cache** %c, align 8
  %3 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %tobool = icmp ne %struct.image_cache* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.image_cache* @make_image_cache()
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal1, align 8
  %image_cache2 = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 11
  store %struct.image_cache* %call, %struct.image_cache** %image_cache2, align 8
  store %struct.image_cache* %call, %struct.image_cache** %c, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i64, i64* %i, align 8
  %7 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %7, i32 0, i32 3
  %8 = load i64, i64* %used, align 8
  %cmp = icmp slt i64 %6, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %i, align 8
  %10 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %10, i32 0, i32 1
  %11 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %11, i64 %9
  %12 = load %struct.image*, %struct.image** %arrayidx, align 8
  %cmp3 = icmp eq %struct.image* %12, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %for.body
  br label %for.end

if.end.5:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.5
  %13 = load i64, i64* %i, align 8
  %inc = add nsw i64 %13, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.4, %for.cond
  %14 = load i64, i64* %i, align 8
  %15 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used6 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %15, i32 0, i32 3
  %16 = load i64, i64* %used6, align 8
  %cmp7 = icmp eq i64 %14, %16
  br i1 %cmp7, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %for.end
  %17 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used8 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %17, i32 0, i32 3
  %18 = load i64, i64* %used8, align 8
  %19 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %size = getelementptr inbounds %struct.image_cache, %struct.image_cache* %19, i32 0, i32 2
  %20 = load i64, i64* %size, align 8
  %cmp9 = icmp eq i64 %18, %20
  br i1 %cmp9, label %if.then.10, label %if.end.15

if.then.10:                                       ; preds = %land.lhs.true
  %21 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images11 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %21, i32 0, i32 1
  %22 = load %struct.image**, %struct.image*** %images11, align 8
  %23 = bitcast %struct.image** %22 to i8*
  %24 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %size12 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %24, i32 0, i32 2
  %call13 = call i8* @xpalloc(i8* %23, i64* %size12, i64 1, i64 -1, i64 8)
  %25 = bitcast i8* %call13 to %struct.image**
  %26 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images14 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %26, i32 0, i32 1
  store %struct.image** %25, %struct.image*** %images14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.10, %land.lhs.true, %for.end
  %27 = load %struct.image*, %struct.image** %img.addr, align 8
  %28 = load i64, i64* %i, align 8
  %29 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images16 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %29, i32 0, i32 1
  %30 = load %struct.image**, %struct.image*** %images16, align 8
  %arrayidx17 = getelementptr inbounds %struct.image*, %struct.image** %30, i64 %28
  store %struct.image* %27, %struct.image** %arrayidx17, align 8
  %31 = load i64, i64* %i, align 8
  %32 = load %struct.image*, %struct.image** %img.addr, align 8
  %id = getelementptr inbounds %struct.image, %struct.image* %32, i32 0, i32 24
  store i64 %31, i64* %id, align 8
  %33 = load i64, i64* %i, align 8
  %34 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used18 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %34, i32 0, i32 3
  %35 = load i64, i64* %used18, align 8
  %cmp19 = icmp eq i64 %33, %35
  br i1 %cmp19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %if.end.15
  %36 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used21 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %36, i32 0, i32 3
  %37 = load i64, i64* %used21, align 8
  %inc22 = add nsw i64 %37, 1
  store i64 %inc22, i64* %used21, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %if.end.15
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  %hash = getelementptr inbounds %struct.image, %struct.image* %38, i32 0, i32 23
  %39 = load i64, i64* %hash, align 8
  %rem = urem i64 %39, 1001
  store i64 %rem, i64* %i, align 8
  %40 = load i64, i64* %i, align 8
  %41 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %buckets = getelementptr inbounds %struct.image_cache, %struct.image_cache* %41, i32 0, i32 0
  %42 = load %struct.image**, %struct.image*** %buckets, align 8
  %arrayidx24 = getelementptr inbounds %struct.image*, %struct.image** %42, i64 %40
  %43 = load %struct.image*, %struct.image** %arrayidx24, align 8
  %44 = load %struct.image*, %struct.image** %img.addr, align 8
  %next = getelementptr inbounds %struct.image, %struct.image* %44, i32 0, i32 25
  store %struct.image* %43, %struct.image** %next, align 8
  %45 = load %struct.image*, %struct.image** %img.addr, align 8
  %next25 = getelementptr inbounds %struct.image, %struct.image* %45, i32 0, i32 25
  %46 = load %struct.image*, %struct.image** %next25, align 8
  %tobool26 = icmp ne %struct.image* %46, null
  br i1 %tobool26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %if.end.23
  %47 = load %struct.image*, %struct.image** %img.addr, align 8
  %48 = load %struct.image*, %struct.image** %img.addr, align 8
  %next28 = getelementptr inbounds %struct.image, %struct.image* %48, i32 0, i32 25
  %49 = load %struct.image*, %struct.image** %next28, align 8
  %prev = getelementptr inbounds %struct.image, %struct.image* %49, i32 0, i32 26
  store %struct.image* %47, %struct.image** %prev, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end.23
  %50 = load %struct.image*, %struct.image** %img.addr, align 8
  %prev30 = getelementptr inbounds %struct.image, %struct.image* %50, i32 0, i32 26
  store %struct.image* null, %struct.image** %prev30, align 8
  %51 = load %struct.image*, %struct.image** %img.addr, align 8
  %52 = load i64, i64* %i, align 8
  %53 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %buckets31 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %53, i32 0, i32 0
  %54 = load %struct.image**, %struct.image*** %buckets31, align 8
  %arrayidx32 = getelementptr inbounds %struct.image*, %struct.image** %54, i64 %52
  store %struct.image* %51, %struct.image** %arrayidx32, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @image_spec_value(i64 %spec, i64 %key, i8* %found) #0 {
entry:
  %retval = alloca i64, align 8
  %spec.addr = alloca i64, align 8
  %key.addr = alloca i64, align 8
  %found.addr = alloca i8*, align 8
  %tail = alloca i64, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %key, i64* %key.addr, align 8
  store i8* %found, i8** %found.addr, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %3 = load i64, i64* %cdr, align 8
  store i64 %3, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %tail, align 8
  %and = and i64 %4, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i64, i64* %tail, align 8
  %sub2 = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub2 to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %u3 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 1
  %cdr4 = bitcast %union.anon.11* %u3 to i64*
  %8 = load i64, i64* %cdr4, align 8
  %and5 = and i64 %8, 7
  %conv6 = trunc i64 %and5 to i32
  %cmp7 = icmp eq i32 %conv6, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp7, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load i64, i64* %tail, align 8
  %sub9 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub9 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car, align 8
  %14 = load i64, i64* %key.addr, align 8
  %cmp10 = icmp eq i64 %13, %14
  br i1 %cmp10, label %if.then, label %if.end.18

if.then:                                          ; preds = %for.body
  %15 = load i8*, i8** %found.addr, align 8
  %tobool = icmp ne i8* %15, null
  br i1 %tobool, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %if.then
  %16 = load i8*, i8** %found.addr, align 8
  store i8 1, i8* %16, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.12, %if.then
  %17 = load i64, i64* %tail, align 8
  %sub13 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub13 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u14 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr15 = bitcast %union.anon.11* %u14 to i64*
  %20 = load i64, i64* %cdr15, align 8
  %sub16 = sub nsw i64 %20, 3
  %21 = inttoptr i64 %sub16 to i8*
  %22 = bitcast i8* %21 to %struct.Lisp_Cons*
  %car17 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %22, i32 0, i32 0
  %23 = load i64, i64* %car17, align 8
  store i64 %23, i64* %retval
  br label %return

if.end.18:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.18
  %24 = load i64, i64* %tail, align 8
  %sub19 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub19 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %u20 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 1
  %cdr21 = bitcast %union.anon.11* %u20 to i64*
  %27 = load i64, i64* %cdr21, align 8
  %sub22 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub22 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %u23 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 1
  %cdr24 = bitcast %union.anon.11* %u23 to i64*
  %30 = load i64, i64* %cdr24, align 8
  store i64 %30, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %31 = load i8*, i8** %found.addr, align 8
  %tobool25 = icmp ne i8* %31, null
  br i1 %tobool25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %for.end
  %32 = load i8*, i8** %found.addr, align 8
  store i8 0, i8* %32, align 1
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %for.end
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %retval
  br label %return

return:                                           ; preds = %if.end.27, %if.end
  %33 = load i64, i64* %retval
  ret i64 %33
}

declare zeroext i1 @RANGED_INTEGERP(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @x_alloc_image_color(%struct.frame* %f, %struct.image* %img, i64 %color_name, i64 %dflt) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %color_name.addr = alloca i64, align 8
  %dflt.addr = alloca i64, align 8
  %color = alloca %struct.XColor, align 8
  %result = alloca i64, align 8
  %ncolors3 = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i64 %color_name, i64* %color_name.addr, align 8
  store i64 %dflt, i64* %dflt.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i64, i64* %color_name.addr, align 8
  %call = call i8* @SSDATA(i64 %1)
  %call1 = call zeroext i1 @x_defined_color(%struct.frame* %0, i8* %call, %struct.XColor* %color, i1 zeroext true)
  br i1 %call1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 6
  %3 = load i32, i32* %ncolors, align 4
  %conv = sext i32 %3 to i64
  %cmp = icmp ult i64 %conv, 2147483647
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors4 = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 6
  %5 = load i32, i32* %ncolors4, align 4
  %add = add nsw i32 %5, 1
  %conv5 = sext i32 %add to i64
  store i64 %conv5, i64* %ncolors3, align 8
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 5
  %7 = load i64*, i64** %colors, align 8
  %8 = bitcast i64* %7 to i8*
  %9 = load i64, i64* %ncolors3, align 8
  %mul = mul i64 %9, 8
  %call6 = call i8* @xrealloc(i8* %8, i64 %mul)
  %10 = bitcast i8* %call6 to i64*
  %11 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors7 = getelementptr inbounds %struct.image, %struct.image* %11, i32 0, i32 5
  store i64* %10, i64** %colors7, align 8
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 0
  %12 = load i64, i64* %pixel, align 8
  %13 = load i64, i64* %ncolors3, align 8
  %sub = sub nsw i64 %13, 1
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors8 = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 5
  %15 = load i64*, i64** %colors8, align 8
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 %sub
  store i64 %12, i64* %arrayidx, align 8
  %16 = load i64, i64* %ncolors3, align 8
  %conv9 = trunc i64 %16 to i32
  %17 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors10 = getelementptr inbounds %struct.image, %struct.image* %17, i32 0, i32 6
  store i32 %conv9, i32* %ncolors10, align 4
  %pixel11 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 0
  %18 = load i64, i64* %pixel11, align 8
  store i64 %18, i64* %result, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %19 = load i64, i64* %dflt.addr, align 8
  store i64 %19, i64* %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i64, i64* %result, align 8
  ret i64 %20
}

; Function Attrs: nounwind uwtable
define internal void @postprocess_image(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %conversion = alloca i64, align 8
  %spec = alloca i64, align 8
  %mask = alloca i64, align 8
  %found_p = alloca i8, align 1
  %tem = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 1
  %1 = load i64, i64* %pixmap, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %if.then, label %if.end.93

if.then:                                          ; preds = %entry
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec1 = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 15
  %3 = load i64, i64* %spec1, align 8
  store i64 %3, i64* %spec, align 8
  %4 = load i64, i64* %spec, align 8
  %call = call i64 @builtin_lisp_symbol(i32 60)
  %call2 = call i64 @image_spec_value(i64 %4, i64 %call, i8* null)
  store i64 %call2, i64* %mask, align 8
  %5 = load i64, i64* %mask, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call3
  br i1 %cmp, label %if.else, label %if.then.4

if.then.4:                                        ; preds = %if.then
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load %struct.image*, %struct.image** %img.addr, align 8
  %8 = load i64, i64* %mask, align 8
  call void @x_build_heuristic_mask(%struct.frame* %6, %struct.image* %7, i64 %8)
  br label %if.end.47

if.else:                                          ; preds = %if.then
  %9 = load i64, i64* %spec, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 81)
  %call6 = call i64 @image_spec_value(i64 %9, i64 %call5, i8* %found_p)
  store i64 %call6, i64* %mask, align 8
  %10 = load i64, i64* %mask, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 518)
  %cmp8 = icmp eq i64 %10, %call7
  br i1 %cmp8, label %if.then.9, label %if.else.11

if.then.9:                                        ; preds = %if.else
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 901)
  call void @x_build_heuristic_mask(%struct.frame* %11, %struct.image* %12, i64 %call10)
  br label %if.end.46

if.else.11:                                       ; preds = %if.else
  %13 = load i64, i64* %mask, align 8
  %and = and i64 %13, 7
  %conv = trunc i64 %and to i32
  %cmp12 = icmp eq i32 %conv, 3
  br i1 %cmp12, label %land.lhs.true, label %if.else.33

land.lhs.true:                                    ; preds = %if.else.11
  %14 = load i64, i64* %mask, align 8
  %sub = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 0
  %17 = load i64, i64* %car, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 518)
  %cmp15 = icmp eq i64 %17, %call14
  br i1 %cmp15, label %if.then.17, label %if.else.33

if.then.17:                                       ; preds = %land.lhs.true
  %18 = load i64, i64* %mask, align 8
  %sub18 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub18 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %21 = load i64, i64* %cdr, align 8
  %and19 = and i64 %21, 7
  %conv20 = trunc i64 %and19 to i32
  %cmp21 = icmp eq i32 %conv20, 3
  br i1 %cmp21, label %if.then.23, label %if.else.29

if.then.23:                                       ; preds = %if.then.17
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %23 = load %struct.image*, %struct.image** %img.addr, align 8
  %24 = load i64, i64* %mask, align 8
  %sub24 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub24 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %u25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 1
  %cdr26 = bitcast %union.anon.11* %u25 to i64*
  %27 = load i64, i64* %cdr26, align 8
  %sub27 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub27 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car28 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car28, align 8
  call void @x_build_heuristic_mask(%struct.frame* %22, %struct.image* %23, i64 %30)
  br label %if.end

if.else.29:                                       ; preds = %if.then.17
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %32 = load %struct.image*, %struct.image** %img.addr, align 8
  %33 = load i64, i64* %mask, align 8
  %sub30 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub30 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %u31 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 1
  %cdr32 = bitcast %union.anon.11* %u31 to i64*
  %36 = load i64, i64* %cdr32, align 8
  call void @x_build_heuristic_mask(%struct.frame* %31, %struct.image* %32, i64 %36)
  br label %if.end

if.end:                                           ; preds = %if.else.29, %if.then.23
  br label %if.end.45

if.else.33:                                       ; preds = %land.lhs.true, %if.else.11
  %37 = load i64, i64* %mask, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp35 = icmp eq i64 %37, %call34
  br i1 %cmp35, label %land.lhs.true.37, label %if.end.44

land.lhs.true.37:                                 ; preds = %if.else.33
  %38 = load i8, i8* %found_p, align 1
  %tobool38 = trunc i8 %38 to i1
  br i1 %tobool38, label %land.lhs.true.40, label %if.end.44

land.lhs.true.40:                                 ; preds = %land.lhs.true.37
  %39 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask41 = getelementptr inbounds %struct.image, %struct.image* %39, i32 0, i32 2
  %40 = load i64, i64* %mask41, align 8
  %tobool42 = icmp ne i64 %40, 0
  br i1 %tobool42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %land.lhs.true.40
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %42 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image_1(%struct.frame* %41, %struct.image* %42, i32 2)
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.43, %land.lhs.true.40, %land.lhs.true.37, %if.else.33
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.end
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.then.9
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.4
  %43 = load i64, i64* %spec, align 8
  %call48 = call i64 @builtin_lisp_symbol(i32 27)
  %call49 = call i64 @image_spec_value(i64 %43, i64 %call48, i8* null)
  store i64 %call49, i64* %conversion, align 8
  %44 = load i64, i64* %conversion, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 343)
  %cmp51 = icmp eq i64 %44, %call50
  br i1 %cmp51, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %if.end.47
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %46 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_disable_image(%struct.frame* %45, %struct.image* %46)
  br label %if.end.92

if.else.54:                                       ; preds = %if.end.47
  %47 = load i64, i64* %conversion, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 601)
  %cmp56 = icmp eq i64 %47, %call55
  br i1 %cmp56, label %if.then.58, label %if.else.59

if.then.58:                                       ; preds = %if.else.54
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %49 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_laplace(%struct.frame* %48, %struct.image* %49)
  br label %if.end.91

if.else.59:                                       ; preds = %if.else.54
  %50 = load i64, i64* %conversion, align 8
  %call60 = call i64 @builtin_lisp_symbol(i32 362)
  %cmp61 = icmp eq i64 %50, %call60
  br i1 %cmp61, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %if.else.59
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %52 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_emboss(%struct.frame* %51, %struct.image* %52)
  br label %if.end.90

if.else.64:                                       ; preds = %if.else.59
  %53 = load i64, i64* %conversion, align 8
  %and65 = and i64 %53, 7
  %conv66 = trunc i64 %and65 to i32
  %cmp67 = icmp eq i32 %conv66, 3
  br i1 %cmp67, label %land.lhs.true.69, label %if.end.89

land.lhs.true.69:                                 ; preds = %if.else.64
  %54 = load i64, i64* %conversion, align 8
  %sub70 = sub nsw i64 %54, 3
  %55 = inttoptr i64 %sub70 to i8*
  %56 = bitcast i8* %55 to %struct.Lisp_Cons*
  %car71 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %56, i32 0, i32 0
  %57 = load i64, i64* %car71, align 8
  %call72 = call i64 @builtin_lisp_symbol(i32 357)
  %cmp73 = icmp eq i64 %57, %call72
  br i1 %cmp73, label %if.then.75, label %if.end.89

if.then.75:                                       ; preds = %land.lhs.true.69
  %58 = load i64, i64* %conversion, align 8
  %sub76 = sub nsw i64 %58, 3
  %59 = inttoptr i64 %sub76 to i8*
  %60 = bitcast i8* %59 to %struct.Lisp_Cons*
  %u77 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %60, i32 0, i32 1
  %cdr78 = bitcast %union.anon.11* %u77 to i64*
  %61 = load i64, i64* %cdr78, align 8
  store i64 %61, i64* %tem, align 8
  %62 = load i64, i64* %tem, align 8
  %and79 = and i64 %62, 7
  %conv80 = trunc i64 %and79 to i32
  %cmp81 = icmp eq i32 %conv80, 3
  br i1 %cmp81, label %if.then.83, label %if.end.88

if.then.83:                                       ; preds = %if.then.75
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %64 = load %struct.image*, %struct.image** %img.addr, align 8
  %65 = load i64, i64* %tem, align 8
  %call84 = call i64 @builtin_lisp_symbol(i32 82)
  %call85 = call i64 @Fplist_get(i64 %65, i64 %call84)
  %66 = load i64, i64* %tem, align 8
  %call86 = call i64 @builtin_lisp_symbol(i32 22)
  %call87 = call i64 @Fplist_get(i64 %66, i64 %call86)
  call void @x_edge_detection(%struct.frame* %63, %struct.image* %64, i64 %call85, i64 %call87)
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.83, %if.then.75
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %land.lhs.true.69, %if.else.64
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.then.63
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.then.58
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %if.then.53
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @mark_image_cache(%struct.image_cache* %c) #0 {
entry:
  %c.addr = alloca %struct.image_cache*, align 8
  %i = alloca i64, align 8
  store %struct.image_cache* %c, %struct.image_cache** %c.addr, align 8
  %0 = load %struct.image_cache*, %struct.image_cache** %c.addr, align 8
  %tobool = icmp ne %struct.image_cache* %0, null
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i, align 8
  %2 = load %struct.image_cache*, %struct.image_cache** %c.addr, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %2, i32 0, i32 3
  %3 = load i64, i64* %used, align 8
  %cmp = icmp slt i64 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %i, align 8
  %5 = load %struct.image_cache*, %struct.image_cache** %c.addr, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %5, i32 0, i32 1
  %6 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %6, i64 %4
  %7 = load %struct.image*, %struct.image** %arrayidx, align 8
  %tobool1 = icmp ne %struct.image* %7, null
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %for.body
  %8 = load i64, i64* %i, align 8
  %9 = load %struct.image_cache*, %struct.image_cache** %c.addr, align 8
  %images3 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %9, i32 0, i32 1
  %10 = load %struct.image**, %struct.image*** %images3, align 8
  %arrayidx4 = getelementptr inbounds %struct.image*, %struct.image** %10, i64 %8
  %11 = load %struct.image*, %struct.image** %arrayidx4, align 8
  call void @mark_image(%struct.image* %11)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i, align 8
  %inc = add nsw i64 %12, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.5

if.end.5:                                         ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_image(%struct.image* %img) #0 {
entry:
  %img.addr = alloca %struct.image*, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 15
  %1 = load i64, i64* %spec, align 8
  call void @mark_object(i64 %1)
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %dependencies = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 16
  %3 = load i64, i64* %dependencies, align 8
  call void @mark_object(i64 %3)
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %lisp_data = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 22
  %5 = load i64, i64* %lisp_data, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %lisp_data1 = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 22
  %7 = load i64, i64* %lisp_data1, align 8
  call void @mark_object(i64 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @x_find_image_file(i64 %file) #0 {
entry:
  %file.addr = alloca i64, align 8
  store i64 %file, i64* %file.addr, align 8
  %0 = load i64, i64* %file.addr, align 8
  %call = call i64 @x_find_image_fd(i64 %0, i32* null)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal i64 @x_find_image_fd(i64 %file, i32* %pfd) #0 {
entry:
  %retval = alloca i64, align 8
  %file.addr = alloca i64, align 8
  %pfd.addr = alloca i32*, align 8
  %file_found = alloca i64, align 8
  %search_path = alloca i64, align 8
  %fd = alloca i32, align 4
  store i64 %file, i64* %file.addr, align 8
  store i32* %pfd, i32** %pfd.addr, align 8
  %call = call i64 @build_string(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0))
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 51), align 8
  %call1 = call i64 @Fexpand_file_name(i64 %call, i64 %0)
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 343), align 8
  %call2 = call i64 @Fcons(i64 %call1, i64 %1)
  store i64 %call2, i64* %search_path, align 8
  %2 = load i64, i64* %search_path, align 8
  %3 = load i64, i64* %file.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %4 = load i32*, i32** %pfd.addr, align 8
  %tobool = icmp ne i32* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call4, %cond.true ], [ 18, %cond.false ]
  %call5 = call i32 @openp(i64 %2, i64 %3, i64 %call3, i64* %file_found, i64 %cond, i1 zeroext false)
  store i32 %call5, i32* %fd, align 4
  %5 = load i32, i32* %fd, align 4
  %cmp = icmp sge i32 %5, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %6 = load i32, i32* %fd, align 4
  %cmp6 = icmp eq i32 %6, -2
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %7 = load i64, i64* %file_found, align 8
  %call7 = call i64 @encode_file_name(i64 %7)
  store i64 %call7, i64* %file_found, align 8
  %8 = load i32, i32* %fd, align 4
  %cmp8 = icmp eq i32 %8, -2
  br i1 %cmp8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  %9 = load i64, i64* %file_found, align 8
  %call10 = call i8* @SSDATA(i64 %9)
  %call11 = call i32 @emacs_open(i8* %call10, i32 0, i32 0)
  store i32 %call11, i32* %fd, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.9, %if.then
  br label %if.end.13

if.else:                                          ; preds = %lor.lhs.false
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call12, i64* %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %10 = load i32*, i32** %pfd.addr, align 8
  %tobool14 = icmp ne i32* %10, null
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.13
  %11 = load i32, i32* %fd, align 4
  %12 = load i32*, i32** %pfd.addr, align 8
  store i32 %11, i32* %12, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.13
  %13 = load i64, i64* %file_found, align 8
  store i64 %13, i64* %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.else
  %14 = load i64, i64* %retval
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define void @x_kill_gs_process(i64 %pixmap, %struct.frame* %f) #0 {
entry:
  %pixmap.addr = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %c = alloca %struct.image_cache*, align 8
  %i = alloca i64, align 8
  %img = alloca %struct.image*, align 8
  %ximg = alloca %struct._XImage*, align 8
  %y = alloca i32, align 4
  %x24 = alloca i32, align 4
  %pixel = alloca i64, align 8
  store i64 %pixmap, i64* %pixmap.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 61
  %1 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 11
  %2 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  store %struct.image_cache* %2, %struct.image_cache** %c, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8
  %4 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %4, i32 0, i32 3
  %5 = load i64, i64* %used, align 8
  %cmp = icmp slt i64 %3, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %i, align 8
  %7 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %7, i32 0, i32 1
  %8 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %8, i64 %6
  %9 = load %struct.image*, %struct.image** %arrayidx, align 8
  %pixmap1 = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 1
  %10 = load i64, i64* %pixmap1, align 8
  %11 = load i64, i64* %pixmap.addr, align 8
  %cmp2 = icmp eq i64 %10, %11
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i, align 8
  %inc = add nsw i64 %12, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %13 = load i64, i64* %i, align 8
  %14 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %used3 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %14, i32 0, i32 3
  %15 = load i64, i64* %used3, align 8
  %cmp4 = icmp eq i64 %13, %15
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %for.end
  br label %return

if.end.6:                                         ; preds = %for.end
  %16 = load i64, i64* %i, align 8
  %17 = load %struct.image_cache*, %struct.image_cache** %c, align 8
  %images7 = getelementptr inbounds %struct.image_cache, %struct.image_cache* %17, i32 0, i32 1
  %18 = load %struct.image**, %struct.image*** %images7, align 8
  %arrayidx8 = getelementptr inbounds %struct.image*, %struct.image** %18, i64 %16
  %19 = load %struct.image*, %struct.image** %arrayidx8, align 8
  store %struct.image* %19, %struct.image** %img, align 8
  %20 = load %struct.image*, %struct.image** %img, align 8
  %lisp_data = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 22
  %21 = load i64, i64* %lisp_data, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fkill_process(i64 %21, i64 %call)
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %22 = load %struct.image*, %struct.image** %img, align 8
  %lisp_data11 = getelementptr inbounds %struct.image, %struct.image* %22, i32 0, i32 22
  store i64 %call10, i64* %lisp_data11, align 8
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %24 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %24, i32 0, i32 44
  %25 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %visual = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %25, i32 0, i32 9
  %26 = load %struct.Visual*, %struct.Visual** %visual, align 8
  %call12 = call zeroext i1 @x_mutable_colormap(%struct.Visual* %26)
  br i1 %call12, label %if.then.13, label %if.end.42

if.then.13:                                       ; preds = %if.end.6
  call void @block_input()
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data14 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 62
  %x15 = bitcast %union.output_data* %output_data14 to %struct.x_output**
  %28 = load %struct.x_output*, %struct.x_output** %x15, align 8
  %display_info16 = getelementptr inbounds %struct.x_output, %struct.x_output* %28, i32 0, i32 44
  %29 = load %struct.x_display_info*, %struct.x_display_info** %display_info16, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %29, i32 0, i32 2
  %30 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %31 = load %struct.image*, %struct.image** %img, align 8
  %pixmap17 = getelementptr inbounds %struct.image, %struct.image* %31, i32 0, i32 1
  %32 = load i64, i64* %pixmap17, align 8
  %33 = load %struct.image*, %struct.image** %img, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %33, i32 0, i32 11
  %34 = load i32, i32* %width, align 4
  %35 = load %struct.image*, %struct.image** %img, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %35, i32 0, i32 12
  %36 = load i32, i32* %height, align 4
  %call18 = call %struct._XImage* @XGetImage(%struct._XDisplay* %30, i64 %32, i32 0, i32 0, i32 %34, i32 %36, i64 -1, i32 2)
  store %struct._XImage* %call18, %struct._XImage** %ximg, align 8
  %37 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %tobool = icmp ne %struct._XImage* %37, null
  br i1 %tobool, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.then.13
  call void @init_color_table()
  store i32 0, i32* %y, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.35, %if.then.19
  %38 = load i32, i32* %y, align 4
  %39 = load %struct.image*, %struct.image** %img, align 8
  %height21 = getelementptr inbounds %struct.image, %struct.image* %39, i32 0, i32 12
  %40 = load i32, i32* %height21, align 4
  %cmp22 = icmp slt i32 %38, %40
  br i1 %cmp22, label %for.body.23, label %for.end.37

for.body.23:                                      ; preds = %for.cond.20
  store i32 0, i32* %x24, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc.32, %for.body.23
  %41 = load i32, i32* %x24, align 4
  %42 = load %struct.image*, %struct.image** %img, align 8
  %width26 = getelementptr inbounds %struct.image, %struct.image* %42, i32 0, i32 11
  %43 = load i32, i32* %width26, align 4
  %cmp27 = icmp slt i32 %41, %43
  br i1 %cmp27, label %for.body.28, label %for.end.34

for.body.28:                                      ; preds = %for.cond.25
  %44 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f29 = getelementptr inbounds %struct._XImage, %struct._XImage* %44, i32 0, i32 16
  %get_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f29, i32 0, i32 2
  %45 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel, align 8
  %46 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %47 = load i32, i32* %x24, align 4
  %48 = load i32, i32* %y, align 4
  %call30 = call i64 %45(%struct._XImage* %46, i32 %47, i32 %48)
  store i64 %call30, i64* %pixel, align 8
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %50 = load i64, i64* %pixel, align 8
  %call31 = call i64 @lookup_pixel_color(%struct.frame* %49, i64 %50)
  br label %for.inc.32

for.inc.32:                                       ; preds = %for.body.28
  %51 = load i32, i32* %x24, align 4
  %inc33 = add nsw i32 %51, 1
  store i32 %inc33, i32* %x24, align 4
  br label %for.cond.25

for.end.34:                                       ; preds = %for.cond.25
  br label %for.inc.35

for.inc.35:                                       ; preds = %for.end.34
  %52 = load i32, i32* %y, align 4
  %inc36 = add nsw i32 %52, 1
  store i32 %inc36, i32* %y, align 4
  br label %for.cond.20

for.end.37:                                       ; preds = %for.cond.20
  %53 = load %struct.image*, %struct.image** %img, align 8
  %ncolors = getelementptr inbounds %struct.image, %struct.image* %53, i32 0, i32 6
  %call38 = call i64* @colors_in_color_table(i32* %ncolors)
  %54 = load %struct.image*, %struct.image** %img, align 8
  %colors = getelementptr inbounds %struct.image, %struct.image* %54, i32 0, i32 5
  store i64* %call38, i64** %colors, align 8
  call void @free_color_table()
  %55 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f39 = getelementptr inbounds %struct._XImage, %struct._XImage* %55, i32 0, i32 16
  %destroy_image = getelementptr inbounds %struct.funcs, %struct.funcs* %f39, i32 0, i32 1
  %56 = load i32 (%struct._XImage*)*, i32 (%struct._XImage*)** %destroy_image, align 8
  %57 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %call40 = call i32 %56(%struct._XImage* %57)
  br label %if.end.41

if.else:                                          ; preds = %if.then.13
  %58 = load %struct.image*, %struct.image** %img, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %58, i32 0, i32 15
  %59 = load i64, i64* %spec, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i32 0, i32 0), i64 %59)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %for.end.37
  call void @unblock_input()
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.end.6
  call void @block_input()
  %60 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %61 = load %struct.image*, %struct.image** %img, align 8
  call void @postprocess_image(%struct.frame* %60, %struct.image* %61)
  call void @unblock_input()
  br label %return

return:                                           ; preds = %if.end.42, %if.then.5
  ret void
}

declare i64 @Fkill_process(i64, i64) #1

declare zeroext i1 @x_mutable_colormap(%struct.Visual*) #1

; Function Attrs: nounwind uwtable
define internal void @init_color_table() #0 {
entry:
  %size = alloca i32, align 4
  store i32 808, i32* %size, align 4
  %0 = load i32, i32* %size, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @xzalloc(i64 %conv)
  %1 = bitcast i8* %call to %struct.ct_color**
  store %struct.ct_color** %1, %struct.ct_color*** @ct_table, align 8
  store i32 0, i32* @ct_colors_allocated, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @lookup_pixel_color(%struct.frame* %f, i64 %pixel) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %pixel.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %p = alloca %struct.ct_color*, align 8
  %color = alloca %struct.XColor, align 8
  %cmap = alloca i64, align 8
  %rc = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %pixel, i64* %pixel.addr, align 8
  %0 = load i64, i64* %pixel.addr, align 8
  %rem = urem i64 %0, 101
  %conv = trunc i64 %rem to i32
  store i32 %conv, i32* %i, align 4
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %2, i64 %idxprom
  %3 = load %struct.ct_color*, %struct.ct_color** %arrayidx, align 8
  store %struct.ct_color* %3, %struct.ct_color** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %tobool = icmp ne %struct.ct_color* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %pixel1 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %5, i32 0, i32 3
  %6 = load i64, i64* %pixel1, align 8
  %7 = load i64, i64* %pixel.addr, align 8
  %cmp = icmp eq i64 %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %next = getelementptr inbounds %struct.ct_color, %struct.ct_color* %8, i32 0, i32 4
  %9 = load %struct.ct_color*, %struct.ct_color** %next, align 8
  store %struct.ct_color* %9, %struct.ct_color** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %10 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %cmp3 = icmp eq %struct.ct_color* %10, null
  br i1 %cmp3, label %if.then.5, label %if.end.26

if.then.5:                                        ; preds = %for.end
  %11 = load i32, i32* @ct_colors_allocated, align 4
  %cmp6 = icmp sge i32 %11, 2147483647
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.5
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 78
  %13 = load i64, i64* %foreground_pixel, align 8
  store i64 %13, i64* %retval
  br label %return

if.end.9:                                         ; preds = %if.then.5
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 44
  %16 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %cmap10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %16, i32 0, i32 10
  %17 = load i64, i64* %cmap10, align 8
  store i64 %17, i64* %cmap, align 8
  %18 = load i64, i64* %pixel.addr, align 8
  %pixel11 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 0
  store i64 %18, i64* %pixel11, align 8
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_query_color(%struct.frame* %19, %struct.XColor* %color)
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %21 = load i64, i64* %cmap, align 8
  %call = call zeroext i1 @x_alloc_nearest_color(%struct.frame* %20, i64 %21, %struct.XColor* %color)
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %rc, align 1
  %22 = load i8, i8* %rc, align 1
  %tobool12 = trunc i8 %22 to i1
  br i1 %tobool12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.end.9
  %23 = load i32, i32* @ct_colors_allocated, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* @ct_colors_allocated, align 4
  %call14 = call noalias i8* @xmalloc(i64 32)
  %24 = bitcast i8* %call14 to %struct.ct_color*
  store %struct.ct_color* %24, %struct.ct_color** %p, align 8
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %25 = load i16, i16* %red, align 2
  %conv15 = zext i16 %25 to i32
  %26 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %r = getelementptr inbounds %struct.ct_color, %struct.ct_color* %26, i32 0, i32 0
  store i32 %conv15, i32* %r, align 4
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %27 = load i16, i16* %green, align 2
  %conv16 = zext i16 %27 to i32
  %28 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %g = getelementptr inbounds %struct.ct_color, %struct.ct_color* %28, i32 0, i32 1
  store i32 %conv16, i32* %g, align 4
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %29 = load i16, i16* %blue, align 2
  %conv17 = zext i16 %29 to i32
  %30 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %b = getelementptr inbounds %struct.ct_color, %struct.ct_color* %30, i32 0, i32 2
  store i32 %conv17, i32* %b, align 4
  %31 = load i64, i64* %pixel.addr, align 8
  %32 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %pixel18 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %32, i32 0, i32 3
  store i64 %31, i64* %pixel18, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %33 to i64
  %34 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx20 = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %34, i64 %idxprom19
  %35 = load %struct.ct_color*, %struct.ct_color** %arrayidx20, align 8
  %36 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %next21 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %36, i32 0, i32 4
  store %struct.ct_color* %35, %struct.ct_color** %next21, align 8
  %37 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %38 to i64
  %39 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx23 = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %39, i64 %idxprom22
  store %struct.ct_color* %37, %struct.ct_color** %arrayidx23, align 8
  br label %if.end.25

if.else:                                          ; preds = %if.end.9
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel24 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 78
  %41 = load i64, i64* %foreground_pixel24, align 8
  store i64 %41, i64* %retval
  br label %return

if.end.25:                                        ; preds = %if.then.13
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %for.end
  %42 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %pixel27 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %42, i32 0, i32 3
  %43 = load i64, i64* %pixel27, align 8
  store i64 %43, i64* %retval
  br label %return

return:                                           ; preds = %if.end.26, %if.else, %if.then.8
  %44 = load i64, i64* %retval
  ret i64 %44
}

; Function Attrs: nounwind uwtable
define internal i64* @colors_in_color_table(i32* %n) #0 {
entry:
  %n.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %p = alloca %struct.ct_color*, align 8
  %colors = alloca i64*, align 8
  store i32* %n, i32** %n.addr, align 8
  %0 = load i32, i32* @ct_colors_allocated, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %n.addr, align 8
  store i32 0, i32* %1, align 4
  store i64* null, i64** %colors, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i32, i32* @ct_colors_allocated, align 4
  %conv = sext i32 %2 to i64
  %mul = mul i64 %conv, 8
  %call = call noalias i8* @xmalloc(i64 %mul)
  %3 = bitcast i8* %call to i64*
  store i64* %3, i64** %colors, align 8
  %4 = load i32, i32* @ct_colors_allocated, align 4
  %5 = load i32*, i32** %n.addr, align 8
  store i32 %4, i32* %5, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.7, %if.else
  %6 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %6, 101
  br i1 %cmp1, label %for.body, label %for.end.9

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %8, i64 %idxprom
  %9 = load %struct.ct_color*, %struct.ct_color** %arrayidx, align 8
  store %struct.ct_color* %9, %struct.ct_color** %p, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %for.body
  %10 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %tobool = icmp ne %struct.ct_color* %10, null
  br i1 %tobool, label %for.body.4, label %for.end

for.body.4:                                       ; preds = %for.cond.3
  %11 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %pixel = getelementptr inbounds %struct.ct_color, %struct.ct_color* %11, i32 0, i32 3
  %12 = load i64, i64* %pixel, align 8
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  %idxprom5 = sext i32 %13 to i64
  %14 = load i64*, i64** %colors, align 8
  %arrayidx6 = getelementptr inbounds i64, i64* %14, i64 %idxprom5
  store i64 %12, i64* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.4
  %15 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %next = getelementptr inbounds %struct.ct_color, %struct.ct_color* %15, i32 0, i32 4
  %16 = load %struct.ct_color*, %struct.ct_color** %next, align 8
  store %struct.ct_color* %16, %struct.ct_color** %p, align 8
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %for.inc.7

for.inc.7:                                        ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end.9:                                        ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end.9, %if.then
  %18 = load i64*, i64** %colors, align 8
  ret i64* %18
}

; Function Attrs: nounwind uwtable
define internal void @free_color_table() #0 {
entry:
  %i = alloca i32, align 4
  %p = alloca %struct.ct_color*, align 8
  %next = alloca %struct.ct_color*, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.4, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 101
  br i1 %cmp, label %for.body, label %for.end.5

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %2, i64 %idxprom
  %3 = load %struct.ct_color*, %struct.ct_color** %arrayidx, align 8
  store %struct.ct_color* %3, %struct.ct_color** %p, align 8
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %4 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %tobool = icmp ne %struct.ct_color* %4, null
  br i1 %tobool, label %for.body.2, label %for.end

for.body.2:                                       ; preds = %for.cond.1
  %5 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %next3 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %5, i32 0, i32 4
  %6 = load %struct.ct_color*, %struct.ct_color** %next3, align 8
  store %struct.ct_color* %6, %struct.ct_color** %next, align 8
  %7 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %8 = bitcast %struct.ct_color* %7 to i8*
  call void @xfree(i8* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body.2
  %9 = load %struct.ct_color*, %struct.ct_color** %next, align 8
  store %struct.ct_color* %9, %struct.ct_color** %p, align 8
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.4

for.inc.4:                                        ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end.5:                                        ; preds = %for.cond
  %11 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %12 = bitcast %struct.ct_color** %11 to i8*
  call void @xfree(i8* %12)
  store %struct.ct_color** null, %struct.ct_color*** @ct_table, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @image_error(i8* %format, ...) #0 {
entry:
  %format.addr = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %format, i8** %format.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8*, i8** %format.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  call void @vadd_to_log(i8* %0, %struct.__va_list_tag* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Finit_image_library(i64 %type) #0 {
entry:
  %type.addr = alloca i64, align 8
  store i64 %type, i64* %type.addr, align 8
  %0 = load i64, i64* %type.addr, align 8
  %call = call %struct.image_type* @lookup_image_type(i64 %0)
  %tobool = icmp ne %struct.image_type* %call, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define void @reset_image_types() #0 {
entry:
  %next = alloca %struct.image_type*, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.image_type*, %struct.image_type** @image_types, align 8
  %tobool = icmp ne %struct.image_type* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.image_type*, %struct.image_type** @image_types, align 8
  %next1 = getelementptr inbounds %struct.image_type, %struct.image_type* %1, i32 0, i32 5
  %2 = load %struct.image_type*, %struct.image_type** %next1, align 8
  store %struct.image_type* %2, %struct.image_type** %next, align 8
  %3 = load %struct.image_type*, %struct.image_type** @image_types, align 8
  %4 = bitcast %struct.image_type* %3 to i8*
  call void @xfree(i8* %4)
  %5 = load %struct.image_type*, %struct.image_type** %next, align 8
  store %struct.image_type* %5, %struct.image_type** @image_types, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @syms_of_image() #0 {
entry:
  store %struct.image_type* null, %struct.image_type** @image_types, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_image.o_fwd, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131))
  br label %do.end

do.end:                                           ; preds = %do.body
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_image.o_fwd.3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172))
  br label %do.end.2

do.end.2:                                         ; preds = %do.body.1
  %call3 = call i64 @make_float(double 1.000000e+01)
  store i64 %call3, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172), align 8
  br label %do.body.4

do.body.4:                                        ; preds = %do.end.2
  %call5 = call i64 @builtin_lisp_symbol(i32 765)
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  %call6 = call i64 @Fcons(i64 %call5, i64 %0)
  store i64 %call6, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  br label %do.end.7

do.end.7:                                         ; preds = %do.body.4
  br label %do.body.8

do.body.8:                                        ; preds = %do.end.7
  %call9 = call i64 @builtin_lisp_symbol(i32 743)
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  %call10 = call i64 @Fcons(i64 %call9, i64 %1)
  store i64 %call10, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  br label %do.end.11

do.end.11:                                        ; preds = %do.body.8
  br label %do.body.12

do.body.12:                                       ; preds = %do.end.11
  %call13 = call i64 @builtin_lisp_symbol(i32 1062)
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  %call14 = call i64 @Fcons(i64 %call13, i64 %2)
  store i64 %call14, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  br label %do.end.15

do.end.15:                                        ; preds = %do.body.12
  br label %do.body.16

do.body.16:                                       ; preds = %do.end.15
  %call17 = call i64 @builtin_lisp_symbol(i32 754)
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  %call18 = call i64 @Fcons(i64 %call17, i64 %3)
  store i64 %call18, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 131), align 8
  br label %do.end.19

do.end.19:                                        ; preds = %do.body.16
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sinit_image_library to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sclear_image_cache to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Simage_flush to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Simage_size to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Simage_mask_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Simage_metadata to %struct.Lisp_Subr*))
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.19
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_image.b_fwd, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 430))
  br label %do.end.21

do.end.21:                                        ; preds = %do.body.20
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 430), align 1
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_image.o_fwd.6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 343))
  br label %do.end.23

do.end.23:                                        ; preds = %do.body.22
  %call24 = call i64 @decode_env_path(i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i32 0, i32 0), i1 zeroext false)
  store i64 %call24, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 343), align 8
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.23
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_image.o_fwd.9, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 130))
  br label %do.end.26

do.end.26:                                        ; preds = %do.body.25
  store i64 1202, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 130), align 8
  ret void
}

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare i64 @decode_env_path(i8*, i8*, i1 zeroext) #1

declare i8* @xpalloc(i8*, i64*, i64, i64, i64) #1

declare i32 @XFreePixmap(%struct._XDisplay*, i64) #1

declare i64 @Fmember(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i64 } @timespec_sub(i64, i64, i64, i64) #5

; Function Attrs: nounwind readnone
declare { i64, i64 } @dtotimespec(double) #5

; Function Attrs: nounwind readonly
declare i32 @timespec_cmp(i64, i64, i64, i64) #2

declare void @clear_current_matrices(%struct.frame*) #1

declare void @fset_redisplay(%struct.frame*) #1

declare i64 @Fequal(i64, i64) #1

declare i64 @list1(i64) #1

declare zeroext i1 @x_defined_color(%struct.frame*, i8*, %struct.XColor*, i1 zeroext) #1

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_build_heuristic_mask(%struct.frame* %f, %struct.image* %img, i64 %how) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %how.addr = alloca i64, align 8
  %ximg = alloca %struct._XImage*, align 8
  %mask_img = alloca %struct._XImage*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %use_img_background = alloca i8, align 1
  %bg = alloca i64, align 8
  %rgb = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  %color_name = alloca [30 x i8], align 16
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i64 %how, i64* %how.addr, align 8
  store i64 0, i64* %bg, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 2
  %1 = load i64, i64* %mask, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image_1(%struct.frame* %2, %struct.image* %3, i32 2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %5 = load %struct.image*, %struct.image** %img.addr, align 8
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 11
  %7 = load i32, i32* %width, align 4
  %8 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 12
  %9 = load i32, i32* %height, align 4
  %call = call zeroext i1 @image_create_x_image_and_pixmap(%struct.frame* %4, %struct.image* %5, i32 %7, i32 %9, i32 1, %struct._XImage** %mask_img, i1 zeroext true)
  br i1 %call, label %if.end.2, label %if.then.1

if.then.1:                                        ; preds = %if.end
  br label %return

if.end.2:                                         ; preds = %if.end
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %11 = load %struct.image*, %struct.image** %img.addr, align 8
  %call3 = call %struct._XImage* @image_get_x_image(%struct.frame* %10, %struct.image* %11, i1 zeroext false)
  store %struct._XImage* %call3, %struct._XImage** %ximg, align 8
  store i8 1, i8* %use_img_background, align 1
  %12 = load i64, i64* %how.addr, align 8
  %and = and i64 %12, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.then.5, label %if.end.36

if.then.5:                                        ; preds = %if.end.2
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.5
  %13 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %13, 3
  br i1 %cmp6, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond
  %14 = load i64, i64* %how.addr, align 8
  %and8 = and i64 %14, 7
  %conv9 = trunc i64 %and8 to i32
  %cmp10 = icmp eq i32 %conv9, 3
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %15 = load i64, i64* %how.addr, align 8
  %sub = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 0
  %18 = load i64, i64* %car, align 8
  %call12 = call zeroext i1 @NATNUMP(i64 %18)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %19 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %call12, %land.rhs ]
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %20 = load i64, i64* %how.addr, align 8
  %sub14 = sub nsw i64 %20, 3
  %21 = inttoptr i64 %sub14 to i8*
  %22 = bitcast i8* %21 to %struct.Lisp_Cons*
  %car15 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %22, i32 0, i32 0
  %23 = load i64, i64* %car15, align 8
  %shr = ashr i64 %23, 2
  %and16 = and i64 %shr, 65535
  %conv17 = trunc i64 %and16 to i32
  %24 = load i32, i32* %i, align 4
  %idxprom = sext i32 %24 to i64
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %rgb, i32 0, i64 %idxprom
  store i32 %conv17, i32* %arrayidx, align 4
  %25 = load i64, i64* %how.addr, align 8
  %sub18 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub18 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %28 = load i64, i64* %cdr, align 8
  store i64 %28, i64* %how.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %30 = load i32, i32* %i, align 4
  %cmp19 = icmp eq i32 %30, 3
  br i1 %cmp19, label %land.lhs.true.21, label %if.end.35

land.lhs.true.21:                                 ; preds = %for.end
  %31 = load i64, i64* %how.addr, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp23 = icmp eq i64 %31, %call22
  br i1 %cmp23, label %if.then.25, label %if.end.35

if.then.25:                                       ; preds = %land.lhs.true.21
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %color_name, i32 0, i32 0
  %arrayidx26 = getelementptr inbounds [3 x i32], [3 x i32]* %rgb, i32 0, i64 0
  %32 = load i32, i32* %arrayidx26, align 4
  %add = add i32 %32, 0
  %arrayidx27 = getelementptr inbounds [3 x i32], [3 x i32]* %rgb, i32 0, i64 1
  %33 = load i32, i32* %arrayidx27, align 4
  %add28 = add i32 %33, 0
  %arrayidx29 = getelementptr inbounds [3 x i32], [3 x i32]* %rgb, i32 0, i64 2
  %34 = load i32, i32* %arrayidx29, align 4
  %add30 = add i32 %34, 0
  %call31 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i32 0, i32 0), i32 %add, i32 %add28, i32 %add30) #4
  %35 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %36 = load %struct.image*, %struct.image** %img.addr, align 8
  %arraydecay32 = getelementptr inbounds [30 x i8], [30 x i8]* %color_name, i32 0, i32 0
  %call33 = call i64 @build_string(i8* %arraydecay32)
  %call34 = call i64 @x_alloc_image_color(%struct.frame* %35, %struct.image* %36, i64 %call33, i64 0)
  store i64 %call34, i64* %bg, align 8
  store i8 0, i8* %use_img_background, align 1
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.25, %land.lhs.true.21, %for.end
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.2
  %37 = load i8, i8* %use_img_background, align 1
  %tobool37 = trunc i8 %37 to i1
  br i1 %tobool37, label %if.then.38, label %if.end.45

if.then.38:                                       ; preds = %if.end.36
  %38 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %39 = load %struct.image*, %struct.image** %img.addr, align 8
  %corners = getelementptr inbounds %struct.image, %struct.image* %39, i32 0, i32 13
  %arraydecay39 = getelementptr inbounds [4 x i32], [4 x i32]* %corners, i32 0, i32 0
  %40 = load %struct.image*, %struct.image** %img.addr, align 8
  %width40 = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 11
  %41 = load i32, i32* %width40, align 4
  %conv41 = sext i32 %41 to i64
  %42 = load %struct.image*, %struct.image** %img.addr, align 8
  %height42 = getelementptr inbounds %struct.image, %struct.image* %42, i32 0, i32 12
  %43 = load i32, i32* %height42, align 4
  %conv43 = sext i32 %43 to i64
  %call44 = call i64 @four_corners_best(%struct._XImage* %38, i32* %arraydecay39, i64 %conv41, i64 %conv43)
  store i64 %call44, i64* %bg, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.38, %if.end.36
  store i32 0, i32* %y, align 4
  br label %for.cond.46

for.cond.46:                                      ; preds = %for.inc.66, %if.end.45
  %44 = load i32, i32* %y, align 4
  %45 = load %struct.image*, %struct.image** %img.addr, align 8
  %height47 = getelementptr inbounds %struct.image, %struct.image* %45, i32 0, i32 12
  %46 = load i32, i32* %height47, align 4
  %cmp48 = icmp slt i32 %44, %46
  br i1 %cmp48, label %for.body.50, label %for.end.68

for.body.50:                                      ; preds = %for.cond.46
  store i32 0, i32* %x, align 4
  br label %for.cond.51

for.cond.51:                                      ; preds = %for.inc.63, %for.body.50
  %47 = load i32, i32* %x, align 4
  %48 = load %struct.image*, %struct.image** %img.addr, align 8
  %width52 = getelementptr inbounds %struct.image, %struct.image* %48, i32 0, i32 11
  %49 = load i32, i32* %width52, align 4
  %cmp53 = icmp slt i32 %47, %49
  br i1 %cmp53, label %for.body.55, label %for.end.65

for.body.55:                                      ; preds = %for.cond.51
  %50 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %f56 = getelementptr inbounds %struct._XImage, %struct._XImage* %50, i32 0, i32 16
  %put_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f56, i32 0, i32 3
  %51 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel, align 8
  %52 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %53 = load i32, i32* %x, align 4
  %54 = load i32, i32* %y, align 4
  %55 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f57 = getelementptr inbounds %struct._XImage, %struct._XImage* %55, i32 0, i32 16
  %get_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f57, i32 0, i32 2
  %56 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel, align 8
  %57 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %58 = load i32, i32* %x, align 4
  %59 = load i32, i32* %y, align 4
  %call58 = call i64 %56(%struct._XImage* %57, i32 %58, i32 %59)
  %60 = load i64, i64* %bg, align 8
  %cmp59 = icmp ne i64 %call58, %60
  %cond = select i1 %cmp59, i32 1, i32 0
  %conv61 = sext i32 %cond to i64
  %call62 = call i32 %51(%struct._XImage* %52, i32 %53, i32 %54, i64 %conv61)
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.body.55
  %61 = load i32, i32* %x, align 4
  %inc64 = add nsw i32 %61, 1
  store i32 %inc64, i32* %x, align 4
  br label %for.cond.51

for.end.65:                                       ; preds = %for.cond.51
  br label %for.inc.66

for.inc.66:                                       ; preds = %for.end.65
  %62 = load i32, i32* %y, align 4
  %inc67 = add nsw i32 %62, 1
  store i32 %inc67, i32* %y, align 4
  br label %for.cond.46

for.end.68:                                       ; preds = %for.cond.46
  %63 = load %struct.image*, %struct.image** %img.addr, align 8
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %65 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %call69 = call i32 @image_background_transparent(%struct.image* %63, %struct.frame* %64, %struct._XImage* %65)
  %66 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %67 = load %struct.image*, %struct.image** %img.addr, align 8
  %68 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  call void @image_put_x_image(%struct.frame* %66, %struct.image* %67, %struct._XImage* %68, i1 zeroext true)
  %69 = load %struct.image*, %struct.image** %img.addr, align 8
  %70 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @image_unget_x_image(%struct.image* %69, i1 zeroext false, %struct._XImage* %70)
  br label %return

return:                                           ; preds = %for.end.68, %if.then.1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_clear_image_1(%struct.frame* %f, %struct.image* %img, i32 %flags) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %1, i32 0, i32 1
  %2 = load i64, i64* %pixmap, align 8
  %tobool1 = icmp ne i64 %2, 0
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 44
  %5 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 2
  %6 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %7 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap3 = getelementptr inbounds %struct.image, %struct.image* %7, i32 0, i32 1
  %8 = load i64, i64* %pixmap3, align 8
  %call = call i32 @XFreePixmap(%struct._XDisplay* %6, i64 %8)
  %9 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap4 = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 1
  store i64 0, i64* %pixmap4, align 8
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 10
  %bf.load = load i8, i8* %background_valid, align 8
  %bf.clear = and i8 %bf.load, -3
  store i8 %bf.clear, i8* %background_valid, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %11 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg = getelementptr inbounds %struct.image, %struct.image* %11, i32 0, i32 3
  %12 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %tobool5 = icmp ne %struct._XImage* %12, null
  br i1 %tobool5, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %if.end
  %13 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg7 = getelementptr inbounds %struct.image, %struct.image* %13, i32 0, i32 3
  %14 = load %struct._XImage*, %struct._XImage** %ximg7, align 8
  call void @x_destroy_x_image(%struct._XImage* %14)
  %15 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg8 = getelementptr inbounds %struct.image, %struct.image* %15, i32 0, i32 3
  store %struct._XImage* null, %struct._XImage** %ximg8, align 8
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid9 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 10
  %bf.load10 = load i8, i8* %background_valid9, align 8
  %bf.clear11 = and i8 %bf.load10, -3
  store i8 %bf.clear11, i8* %background_valid9, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.6, %if.end
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %entry
  %17 = load i32, i32* %flags.addr, align 4
  %and14 = and i32 %17, 2
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.37

if.then.16:                                       ; preds = %if.end.13
  %18 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 2
  %19 = load i64, i64* %mask, align 8
  %tobool17 = icmp ne i64 %19, 0
  br i1 %tobool17, label %if.then.18, label %if.end.28

if.then.18:                                       ; preds = %if.then.16
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %21 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %display_info21 = getelementptr inbounds %struct.x_output, %struct.x_output* %21, i32 0, i32 44
  %22 = load %struct.x_display_info*, %struct.x_display_info** %display_info21, align 8
  %display22 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 2
  %23 = load %struct._XDisplay*, %struct._XDisplay** %display22, align 8
  %24 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask23 = getelementptr inbounds %struct.image, %struct.image* %24, i32 0, i32 2
  %25 = load i64, i64* %mask23, align 8
  %call24 = call i32 @XFreePixmap(%struct._XDisplay* %23, i64 %25)
  %26 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask25 = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 2
  store i64 0, i64* %mask25, align 8
  %27 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_transparent_valid = getelementptr inbounds %struct.image, %struct.image* %27, i32 0, i32 10
  %bf.load26 = load i8, i8* %background_transparent_valid, align 8
  %bf.clear27 = and i8 %bf.load26, -5
  store i8 %bf.clear27, i8* %background_transparent_valid, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.18, %if.then.16
  %28 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img = getelementptr inbounds %struct.image, %struct.image* %28, i32 0, i32 4
  %29 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %tobool29 = icmp ne %struct._XImage* %29, null
  br i1 %tobool29, label %if.then.30, label %if.end.36

if.then.30:                                       ; preds = %if.end.28
  %30 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img31 = getelementptr inbounds %struct.image, %struct.image* %30, i32 0, i32 4
  %31 = load %struct._XImage*, %struct._XImage** %mask_img31, align 8
  call void @x_destroy_x_image(%struct._XImage* %31)
  %32 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img32 = getelementptr inbounds %struct.image, %struct.image* %32, i32 0, i32 4
  store %struct._XImage* null, %struct._XImage** %mask_img32, align 8
  %33 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_transparent_valid33 = getelementptr inbounds %struct.image, %struct.image* %33, i32 0, i32 10
  %bf.load34 = load i8, i8* %background_transparent_valid33, align 8
  %bf.clear35 = and i8 %bf.load34, -5
  store i8 %bf.clear35, i8* %background_transparent_valid33, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.30, %if.end.28
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end.13
  %34 = load i32, i32* %flags.addr, align 4
  %and38 = and i32 %34, 4
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %if.end.37
  %35 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors = getelementptr inbounds %struct.image, %struct.image* %35, i32 0, i32 6
  %36 = load i32, i32* %ncolors, align 4
  %tobool40 = icmp ne i32 %36, 0
  br i1 %tobool40, label %if.then.41, label %if.end.46

if.then.41:                                       ; preds = %land.lhs.true
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors = getelementptr inbounds %struct.image, %struct.image* %38, i32 0, i32 5
  %39 = load i64*, i64** %colors, align 8
  %40 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors42 = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 6
  %41 = load i32, i32* %ncolors42, align 4
  call void @x_free_colors(%struct.frame* %37, i64* %39, i32 %41)
  %42 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors43 = getelementptr inbounds %struct.image, %struct.image* %42, i32 0, i32 5
  %43 = load i64*, i64** %colors43, align 8
  %44 = bitcast i64* %43 to i8*
  call void @xfree(i8* %44)
  %45 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors44 = getelementptr inbounds %struct.image, %struct.image* %45, i32 0, i32 5
  store i64* null, i64** %colors44, align 8
  %46 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors45 = getelementptr inbounds %struct.image, %struct.image* %46, i32 0, i32 6
  store i32 0, i32* %ncolors45, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.41, %land.lhs.true, %if.end.37
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_disable_image(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %n_planes = alloca i32, align 4
  %colors = alloca %struct.XColor*, align 8
  %p = alloca %struct.XColor*, align 8
  %end = alloca %struct.XColor*, align 8
  %h = alloca i32, align 4
  %l = alloca i32, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %dpy = alloca %struct._XDisplay*, align 8
  %gc = alloca %struct._XGC*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %n_planes1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 11
  %4 = load i32, i32* %n_planes1, align 4
  store i32 %4, i32* %n_planes, align 4
  %5 = load i32, i32* %n_planes, align 4
  %cmp = icmp sge i32 %5, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load %struct.image*, %struct.image** %img.addr, align 8
  %call = call %struct.XColor* @x_to_xcolors(%struct.frame* %6, %struct.image* %7, i1 zeroext true)
  store %struct.XColor* %call, %struct.XColor** %colors, align 8
  store i32 15000, i32* %h, align 4
  store i32 30000, i32* %l, align 4
  %8 = load %struct.XColor*, %struct.XColor** %colors, align 8
  store %struct.XColor* %8, %struct.XColor** %p, align 8
  %9 = load %struct.XColor*, %struct.XColor** %colors, align 8
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 11
  %11 = load i32, i32* %width, align 4
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 12
  %13 = load i32, i32* %height, align 4
  %mul = mul nsw i32 %11, %13
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds %struct.XColor, %struct.XColor* %9, i64 %idx.ext
  store %struct.XColor* %add.ptr, %struct.XColor** %end, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %14 = load %struct.XColor*, %struct.XColor** %p, align 8
  %15 = load %struct.XColor*, %struct.XColor** %end, align 8
  %cmp2 = icmp ult %struct.XColor* %14, %15
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %16, i32 0, i32 1
  %17 = load i16, i16* %red, align 2
  %conv = zext i16 %17 to i32
  %mul3 = mul nsw i32 2, %conv
  %18 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %18, i32 0, i32 2
  %19 = load i16, i16* %green, align 2
  %conv4 = zext i16 %19 to i32
  %mul5 = mul nsw i32 3, %conv4
  %add = add nsw i32 %mul3, %mul5
  %20 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %20, i32 0, i32 3
  %21 = load i16, i16* %blue, align 2
  %conv6 = zext i16 %21 to i32
  %add7 = add nsw i32 %add, %conv6
  %div = sdiv i32 %add7, 6
  store i32 %div, i32* %i, align 4
  %22 = load i32, i32* %i, align 4
  %mul8 = mul nsw i32 20535, %22
  %div9 = sdiv i32 %mul8, 65535
  %add10 = add nsw i32 %div9, 30000
  store i32 %add10, i32* %i2, align 4
  %23 = load i32, i32* %i2, align 4
  %conv11 = trunc i32 %23 to i16
  %24 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue12 = getelementptr inbounds %struct.XColor, %struct.XColor* %24, i32 0, i32 3
  store i16 %conv11, i16* %blue12, align 2
  %25 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green13 = getelementptr inbounds %struct.XColor, %struct.XColor* %25, i32 0, i32 2
  store i16 %conv11, i16* %green13, align 2
  %26 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red14 = getelementptr inbounds %struct.XColor, %struct.XColor* %26, i32 0, i32 1
  store i16 %conv11, i16* %red14, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load %struct.XColor*, %struct.XColor** %p, align 8
  %incdec.ptr = getelementptr inbounds %struct.XColor, %struct.XColor* %27, i32 1
  store %struct.XColor* %incdec.ptr, %struct.XColor** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %29 = load %struct.image*, %struct.image** %img.addr, align 8
  %30 = load %struct.XColor*, %struct.XColor** %colors, align 8
  call void @x_from_xcolors(%struct.frame* %28, %struct.image* %29, %struct.XColor* %30)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %31 = load i32, i32* %n_planes, align 4
  %cmp15 = icmp slt i32 %31, 2
  br i1 %cmp15, label %if.then.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %32 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 430), align 1
  %tobool = trunc i8 %32 to i1
  br i1 %tobool, label %if.then.18, label %if.end.75

if.then.18:                                       ; preds = %lor.lhs.false, %if.end
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %34 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %display_info21 = getelementptr inbounds %struct.x_output, %struct.x_output* %34, i32 0, i32 44
  %35 = load %struct.x_display_info*, %struct.x_display_info** %display_info21, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %35, i32 0, i32 2
  %36 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %36, %struct._XDisplay** %dpy, align 8
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @image_sync_to_pixmaps(%struct.frame* %37, %struct.image* %38)
  %39 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %40 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 1
  %41 = load i64, i64* %pixmap, align 8
  %call22 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %39, i64 %41, i64 0, %struct.XGCValues* null)
  store %struct._XGC* %call22, %struct._XGC** %gc, align 8
  %42 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %43 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %45 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %display_info25 = getelementptr inbounds %struct.x_output, %struct.x_output* %45, i32 0, i32 44
  %46 = load %struct.x_display_info*, %struct.x_display_info** %display_info25, align 8
  %screen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %46, i32 0, i32 6
  %47 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %call26 = call i32 @XScreenNumberOfScreen(%struct.Screen* %47)
  %idxprom = sext i32 %call26 to i64
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data27 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 62
  %x28 = bitcast %union.output_data* %output_data27 to %struct.x_output**
  %49 = load %struct.x_output*, %struct.x_output** %x28, align 8
  %display_info29 = getelementptr inbounds %struct.x_output, %struct.x_output* %49, i32 0, i32 44
  %50 = load %struct.x_display_info*, %struct.x_display_info** %display_info29, align 8
  %display30 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %50, i32 0, i32 2
  %51 = load %struct._XDisplay*, %struct._XDisplay** %display30, align 8
  %52 = bitcast %struct._XDisplay* %51 to %struct.anon.13*
  %screens = getelementptr inbounds %struct.anon.13, %struct.anon.13* %52, i32 0, i32 35
  %53 = load %struct.Screen*, %struct.Screen** %screens, align 8
  %arrayidx = getelementptr inbounds %struct.Screen, %struct.Screen* %53, i64 %idxprom
  %black_pixel = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx, i32 0, i32 14
  %54 = load i64, i64* %black_pixel, align 8
  %call31 = call i32 @XSetForeground(%struct._XDisplay* %42, %struct._XGC* %43, i64 %54)
  %55 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %56 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap32 = getelementptr inbounds %struct.image, %struct.image* %56, i32 0, i32 1
  %57 = load i64, i64* %pixmap32, align 8
  %58 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %59 = load %struct.image*, %struct.image** %img.addr, align 8
  %width33 = getelementptr inbounds %struct.image, %struct.image* %59, i32 0, i32 11
  %60 = load i32, i32* %width33, align 4
  %sub = sub nsw i32 %60, 1
  %61 = load %struct.image*, %struct.image** %img.addr, align 8
  %height34 = getelementptr inbounds %struct.image, %struct.image* %61, i32 0, i32 12
  %62 = load i32, i32* %height34, align 4
  %sub35 = sub nsw i32 %62, 1
  %call36 = call i32 @XDrawLine(%struct._XDisplay* %55, i64 %57, %struct._XGC* %58, i32 0, i32 0, i32 %sub, i32 %sub35)
  %63 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %64 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap37 = getelementptr inbounds %struct.image, %struct.image* %64, i32 0, i32 1
  %65 = load i64, i64* %pixmap37, align 8
  %66 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %67 = load %struct.image*, %struct.image** %img.addr, align 8
  %height38 = getelementptr inbounds %struct.image, %struct.image* %67, i32 0, i32 12
  %68 = load i32, i32* %height38, align 4
  %sub39 = sub nsw i32 %68, 1
  %69 = load %struct.image*, %struct.image** %img.addr, align 8
  %width40 = getelementptr inbounds %struct.image, %struct.image* %69, i32 0, i32 11
  %70 = load i32, i32* %width40, align 4
  %sub41 = sub nsw i32 %70, 1
  %call42 = call i32 @XDrawLine(%struct._XDisplay* %63, i64 %65, %struct._XGC* %66, i32 0, i32 %sub39, i32 %sub41, i32 0)
  %71 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %72 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call43 = call i32 @XFreeGC(%struct._XDisplay* %71, %struct._XGC* %72)
  %73 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %73, i32 0, i32 2
  %74 = load i64, i64* %mask, align 8
  %tobool44 = icmp ne i64 %74, 0
  br i1 %tobool44, label %if.then.45, label %if.end.74

if.then.45:                                       ; preds = %if.then.18
  %75 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %76 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask46 = getelementptr inbounds %struct.image, %struct.image* %76, i32 0, i32 2
  %77 = load i64, i64* %mask46, align 8
  %call47 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %75, i64 %77, i64 0, %struct.XGCValues* null)
  store %struct._XGC* %call47, %struct._XGC** %gc, align 8
  %78 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %79 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %80 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data48 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 62
  %x49 = bitcast %union.output_data* %output_data48 to %struct.x_output**
  %81 = load %struct.x_output*, %struct.x_output** %x49, align 8
  %display_info50 = getelementptr inbounds %struct.x_output, %struct.x_output* %81, i32 0, i32 44
  %82 = load %struct.x_display_info*, %struct.x_display_info** %display_info50, align 8
  %screen51 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %82, i32 0, i32 6
  %83 = load %struct.Screen*, %struct.Screen** %screen51, align 8
  %call52 = call i32 @XScreenNumberOfScreen(%struct.Screen* %83)
  %idxprom53 = sext i32 %call52 to i64
  %84 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data54 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 62
  %x55 = bitcast %union.output_data* %output_data54 to %struct.x_output**
  %85 = load %struct.x_output*, %struct.x_output** %x55, align 8
  %display_info56 = getelementptr inbounds %struct.x_output, %struct.x_output* %85, i32 0, i32 44
  %86 = load %struct.x_display_info*, %struct.x_display_info** %display_info56, align 8
  %display57 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %86, i32 0, i32 2
  %87 = load %struct._XDisplay*, %struct._XDisplay** %display57, align 8
  %88 = bitcast %struct._XDisplay* %87 to %struct.anon.13*
  %screens58 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %88, i32 0, i32 35
  %89 = load %struct.Screen*, %struct.Screen** %screens58, align 8
  %arrayidx59 = getelementptr inbounds %struct.Screen, %struct.Screen* %89, i64 %idxprom53
  %white_pixel = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx59, i32 0, i32 13
  %90 = load i64, i64* %white_pixel, align 8
  %call60 = call i32 @XSetForeground(%struct._XDisplay* %78, %struct._XGC* %79, i64 %90)
  %91 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %92 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask61 = getelementptr inbounds %struct.image, %struct.image* %92, i32 0, i32 2
  %93 = load i64, i64* %mask61, align 8
  %94 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %95 = load %struct.image*, %struct.image** %img.addr, align 8
  %width62 = getelementptr inbounds %struct.image, %struct.image* %95, i32 0, i32 11
  %96 = load i32, i32* %width62, align 4
  %sub63 = sub nsw i32 %96, 1
  %97 = load %struct.image*, %struct.image** %img.addr, align 8
  %height64 = getelementptr inbounds %struct.image, %struct.image* %97, i32 0, i32 12
  %98 = load i32, i32* %height64, align 4
  %sub65 = sub nsw i32 %98, 1
  %call66 = call i32 @XDrawLine(%struct._XDisplay* %91, i64 %93, %struct._XGC* %94, i32 0, i32 0, i32 %sub63, i32 %sub65)
  %99 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %100 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask67 = getelementptr inbounds %struct.image, %struct.image* %100, i32 0, i32 2
  %101 = load i64, i64* %mask67, align 8
  %102 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %103 = load %struct.image*, %struct.image** %img.addr, align 8
  %height68 = getelementptr inbounds %struct.image, %struct.image* %103, i32 0, i32 12
  %104 = load i32, i32* %height68, align 4
  %sub69 = sub nsw i32 %104, 1
  %105 = load %struct.image*, %struct.image** %img.addr, align 8
  %width70 = getelementptr inbounds %struct.image, %struct.image* %105, i32 0, i32 11
  %106 = load i32, i32* %width70, align 4
  %sub71 = sub nsw i32 %106, 1
  %call72 = call i32 @XDrawLine(%struct._XDisplay* %99, i64 %101, %struct._XGC* %102, i32 0, i32 %sub69, i32 %sub71, i32 0)
  %107 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %108 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call73 = call i32 @XFreeGC(%struct._XDisplay* %107, %struct._XGC* %108)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.45, %if.then.18
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_laplace(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_detect_edges(%struct.frame* %0, %struct.image* %1, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @laplace_matrix, i32 0, i32 0), i32 45000)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_emboss(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_detect_edges(%struct.frame* %0, %struct.image* %1, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @emboss_matrix, i32 0, i32 0), i32 32767)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_edge_detection(%struct.frame* %f, %struct.image* %img, i64 %matrix, i64 %color_adjust) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %matrix.addr = alloca i64, align 8
  %color_adjust.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %trans = alloca [9 x i32], align 16
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i64 %matrix, i64* %matrix.addr, align 8
  store i64 %color_adjust, i64* %color_adjust.addr, align 8
  store i32 0, i32* %i, align 4
  %0 = load i64, i64* %matrix.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %1, 9
  br i1 %cmp2, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i64, i64* %matrix.addr, align 8
  %and4 = and i64 %2, 7
  %conv5 = trunc i64 %and4 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i64, i64* %matrix.addr, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  %call = call zeroext i1 @NUMBERP(i64 %6)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %7 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %call, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i64, i64* %matrix.addr, align 8
  %sub9 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub9 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car10 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car10, align 8
  %call11 = call double @XFLOATINT(i64 %11)
  %conv12 = fptosi double %call11 to i32
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [9 x i32], [9 x i32]* %trans, i32 0, i64 %idxprom
  store i32 %conv12, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %14 = load i64, i64* %matrix.addr, align 8
  %sub13 = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub13 to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %17 = load i64, i64* %cdr, align 8
  store i64 %17, i64* %matrix.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.40

if.else:                                          ; preds = %entry
  %18 = load i64, i64* %matrix.addr, align 8
  %call14 = call zeroext i1 @VECTORP(i64 %18)
  br i1 %call14, label %land.lhs.true.16, label %if.end

land.lhs.true.16:                                 ; preds = %if.else
  %19 = load i64, i64* %matrix.addr, align 8
  %call17 = call i64 @ASIZE(i64 %19)
  %cmp18 = icmp sge i64 %call17, 9
  br i1 %cmp18, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %land.lhs.true.16
  store i32 0, i32* %i, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.37, %if.then.20
  %20 = load i32, i32* %i, align 4
  %cmp22 = icmp slt i32 %20, 9
  br i1 %cmp22, label %land.rhs.24, label %land.end.29

land.rhs.24:                                      ; preds = %for.cond.21
  %21 = load i64, i64* %matrix.addr, align 8
  %22 = load i32, i32* %i, align 4
  %conv25 = sext i32 %22 to i64
  %call26 = call i64 @AREF(i64 %21, i64 %conv25)
  %call27 = call zeroext i1 @NUMBERP(i64 %call26)
  br label %land.end.29

land.end.29:                                      ; preds = %land.rhs.24, %for.cond.21
  %23 = phi i1 [ false, %for.cond.21 ], [ %call27, %land.rhs.24 ]
  br i1 %23, label %for.body.30, label %for.end.39

for.body.30:                                      ; preds = %land.end.29
  %24 = load i64, i64* %matrix.addr, align 8
  %25 = load i32, i32* %i, align 4
  %conv31 = sext i32 %25 to i64
  %call32 = call i64 @AREF(i64 %24, i64 %conv31)
  %call33 = call double @XFLOATINT(i64 %call32)
  %conv34 = fptosi double %call33 to i32
  %26 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %26 to i64
  %arrayidx36 = getelementptr inbounds [9 x i32], [9 x i32]* %trans, i32 0, i64 %idxprom35
  store i32 %conv34, i32* %arrayidx36, align 4
  br label %for.inc.37

for.inc.37:                                       ; preds = %for.body.30
  %27 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %27, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond.21

for.end.39:                                       ; preds = %land.end.29
  br label %if.end

if.end:                                           ; preds = %for.end.39, %land.lhs.true.16, %if.else
  br label %if.end.40

if.end.40:                                        ; preds = %if.end, %for.end
  %28 = load i64, i64* %color_adjust.addr, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp42 = icmp eq i64 %28, %call41
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.40
  store i64 131070, i64* %color_adjust.addr, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.44, %if.end.40
  %29 = load i32, i32* %i, align 4
  %cmp46 = icmp eq i32 %29, 9
  br i1 %cmp46, label %land.lhs.true.48, label %if.end.54

land.lhs.true.48:                                 ; preds = %if.end.45
  %30 = load i64, i64* %color_adjust.addr, align 8
  %call49 = call zeroext i1 @NUMBERP(i64 %30)
  br i1 %call49, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %land.lhs.true.48
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %32 = load %struct.image*, %struct.image** %img.addr, align 8
  %arraydecay = getelementptr inbounds [9 x i32], [9 x i32]* %trans, i32 0, i32 0
  %33 = load i64, i64* %color_adjust.addr, align 8
  %call52 = call double @XFLOATINT(i64 %33)
  %conv53 = fptosi double %call52 to i32
  call void @x_detect_edges(%struct.frame* %31, %struct.image* %32, i32* %arraydecay, i32 %conv53)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %land.lhs.true.48, %if.end.45
  ret void
}

declare i64 @Fplist_get(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @image_create_x_image_and_pixmap(%struct.frame* %f, %struct.image* %img, i32 %width, i32 %height, i32 %depth, %struct._XImage** %ximg, i1 zeroext %mask_p) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %ximg.addr = alloca %struct._XImage**, align 8
  %mask_p.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store %struct._XImage** %ximg, %struct._XImage*** %ximg.addr, align 8
  %frombool = zext i1 %mask_p to i8
  store i8 %frombool, i8* %mask_p.addr, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i32, i32* %width.addr, align 4
  %2 = load i32, i32* %height.addr, align 4
  %3 = load i32, i32* %depth.addr, align 4
  %4 = load %struct._XImage**, %struct._XImage*** %ximg.addr, align 8
  %5 = load i8, i8* %mask_p.addr, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %7, i32 0, i32 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64* [ %pixmap, %cond.true ], [ %mask, %cond.false ]
  %call = call zeroext i1 @x_create_x_image_and_pixmap(%struct.frame* %0, i32 %1, i32 %2, i32 %3, %struct._XImage** %4, i64* %cond)
  ret i1 %call
}

declare zeroext i1 @NATNUMP(i64) #1

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #6

declare i64 @build_string(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @image_put_x_image(%struct.frame* %f, %struct.image* %img, %struct._XImage* %ximg, i1 zeroext %mask_p) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %ximg.addr = alloca %struct._XImage*, align 8
  %mask_p.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store %struct._XImage* %ximg, %struct._XImage** %ximg.addr, align 8
  %frombool = zext i1 %mask_p to i8
  store i8 %frombool, i8* %mask_p.addr, align 1
  %0 = load i8, i8* %mask_p.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %ximg1 = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 3
  store %struct._XImage* %1, %struct._XImage** %ximg1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask_img = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 4
  store %struct._XImage* %3, %struct._XImage** %mask_img, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare void @x_free_colors(%struct.frame*, i64*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.XColor* @x_to_xcolors(%struct.frame* %f, %struct.image* %img, i1 zeroext %rgb_p) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %rgb_p.addr = alloca i8, align 1
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %colors = alloca %struct.XColor*, align 8
  %p = alloca %struct.XColor*, align 8
  %ximg = alloca %struct._XImage*, align 8
  %nbytes = alloca i64, align 8
  %row = alloca %struct.XColor*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %frombool = zext i1 %rgb_p to i8
  store i8 %frombool, i8* %rgb_p.addr, align 1
  br i1 false, label %cond.true, label %cond.false.607

cond.true:                                        ; preds = %entry
  br i1 false, label %cond.true.1, label %cond.false.312

cond.true.1:                                      ; preds = %cond.true
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 11
  %1 = load i32, i32* %width, align 4
  %conv = trunc i32 %1 to i8
  %conv2 = sext i8 %conv to i32
  %mul = mul nsw i32 0, %conv2
  %add = add nsw i32 %mul, 16
  %mul3 = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul3, 1
  %cmp = icmp slt i32 %sub, 0
  br i1 %cmp, label %cond.true.5, label %cond.false

cond.true.5:                                      ; preds = %cond.true.1
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6 = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 11
  %3 = load i32, i32* %width6, align 4
  %conv7 = trunc i32 %3 to i8
  %conv8 = sext i8 %conv7 to i32
  %mul9 = mul nsw i32 0, %conv8
  %add10 = add nsw i32 %mul9, 16
  %mul11 = mul nsw i32 0, %add10
  %add12 = add nsw i32 %mul11, 0
  %neg = xor i32 %add12, -1
  %cmp13 = icmp eq i32 %neg, -1
  %conv14 = zext i1 %cmp13 to i32
  %sub15 = sub nsw i32 0, %conv14
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %width16 = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 11
  %5 = load i32, i32* %width16, align 4
  %conv17 = trunc i32 %5 to i8
  %conv18 = sext i8 %conv17 to i32
  %mul19 = mul nsw i32 0, %conv18
  %add20 = add nsw i32 %mul19, 16
  %mul21 = mul nsw i32 0, %add20
  %add22 = add nsw i32 %mul21, 1
  %shl = shl i32 %add22, 30
  %sub23 = sub nsw i32 %shl, 1
  %mul24 = mul nsw i32 %sub23, 2
  %add25 = add nsw i32 %mul24, 1
  %sub26 = sub nsw i32 %sub15, %add25
  br label %cond.end

cond.false:                                       ; preds = %cond.true.1
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %width27 = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 11
  %7 = load i32, i32* %width27, align 4
  %conv28 = trunc i32 %7 to i8
  %conv29 = sext i8 %conv28 to i32
  %mul30 = mul nsw i32 0, %conv29
  %add31 = add nsw i32 %mul30, 16
  %mul32 = mul nsw i32 0, %add31
  %add33 = add nsw i32 %mul32, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.5
  %cond = phi i32 [ %sub26, %cond.true.5 ], [ %add33, %cond.false ]
  %cmp34 = icmp eq i32 %cond, 0
  br i1 %cmp34, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %8 = load %struct.image*, %struct.image** %img.addr, align 8
  %width36 = getelementptr inbounds %struct.image, %struct.image* %8, i32 0, i32 11
  %9 = load i32, i32* %width36, align 4
  %conv37 = trunc i32 %9 to i8
  %conv38 = sext i8 %conv37 to i32
  %cmp39 = icmp slt i32 %conv38, 0
  br i1 %cmp39, label %cond.true.260, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %width41 = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 11
  %11 = load i32, i32* %width41, align 4
  %conv42 = trunc i32 %11 to i8
  %conv43 = sext i8 %conv42 to i32
  %cmp44 = icmp slt i32 %conv43, 0
  br i1 %cmp44, label %cond.true.46, label %cond.false.141

cond.true.46:                                     ; preds = %lor.lhs.false
  br i1 false, label %cond.true.47, label %cond.false.84

cond.true.47:                                     ; preds = %cond.true.46
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %width48 = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 11
  %13 = load i32, i32* %width48, align 4
  %conv49 = trunc i32 %13 to i8
  %conv50 = sext i8 %conv49 to i32
  %mul51 = mul nsw i32 0, %conv50
  %add52 = add nsw i32 %mul51, 16
  %mul53 = mul nsw i32 0, %add52
  %sub54 = sub nsw i32 %mul53, 1
  %cmp55 = icmp slt i32 %sub54, 0
  br i1 %cmp55, label %cond.true.57, label %cond.false.69

cond.true.57:                                     ; preds = %cond.true.47
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %width58 = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 11
  %15 = load i32, i32* %width58, align 4
  %conv59 = trunc i32 %15 to i8
  %conv60 = sext i8 %conv59 to i32
  %mul61 = mul nsw i32 0, %conv60
  %add62 = add nsw i32 %mul61, 16
  %mul63 = mul nsw i32 0, %add62
  %add64 = add nsw i32 %mul63, 1
  %shl65 = shl i32 %add64, 30
  %sub66 = sub nsw i32 %shl65, 1
  %mul67 = mul nsw i32 %sub66, 2
  %add68 = add nsw i32 %mul67, 1
  br label %cond.end.77

cond.false.69:                                    ; preds = %cond.true.47
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %width70 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 11
  %17 = load i32, i32* %width70, align 4
  %conv71 = trunc i32 %17 to i8
  %conv72 = sext i8 %conv71 to i32
  %mul73 = mul nsw i32 0, %conv72
  %add74 = add nsw i32 %mul73, 16
  %mul75 = mul nsw i32 0, %add74
  %sub76 = sub nsw i32 %mul75, 1
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.false.69, %cond.true.57
  %cond78 = phi i32 [ %add68, %cond.true.57 ], [ %sub76, %cond.false.69 ]
  %18 = load %struct.image*, %struct.image** %img.addr, align 8
  %width79 = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 11
  %19 = load i32, i32* %width79, align 4
  %conv80 = trunc i32 %19 to i8
  %conv81 = sext i8 %conv80 to i32
  %div = sdiv i32 %cond78, %conv81
  %cmp82 = icmp slt i32 16, %div
  br i1 %cmp82, label %cond.true.260, label %lor.lhs.false.237

cond.false.84:                                    ; preds = %cond.true.46
  %20 = load %struct.image*, %struct.image** %img.addr, align 8
  %width85 = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 11
  %21 = load i32, i32* %width85, align 4
  %conv86 = trunc i32 %21 to i8
  %conv87 = sext i8 %conv86 to i32
  %cmp88 = icmp eq i32 %conv87, -1
  br i1 %cmp88, label %cond.true.90, label %cond.false.91

cond.true.90:                                     ; preds = %cond.false.84
  br i1 false, label %cond.true.260, label %lor.lhs.false.237

cond.false.91:                                    ; preds = %cond.false.84
  %22 = load %struct.image*, %struct.image** %img.addr, align 8
  %width92 = getelementptr inbounds %struct.image, %struct.image* %22, i32 0, i32 11
  %23 = load i32, i32* %width92, align 4
  %conv93 = trunc i32 %23 to i8
  %conv94 = sext i8 %conv93 to i32
  %mul95 = mul nsw i32 0, %conv94
  %add96 = add nsw i32 %mul95, 16
  %mul97 = mul nsw i32 0, %add96
  %sub98 = sub nsw i32 %mul97, 1
  %cmp99 = icmp slt i32 %sub98, 0
  br i1 %cmp99, label %cond.true.101, label %cond.false.125

cond.true.101:                                    ; preds = %cond.false.91
  %24 = load %struct.image*, %struct.image** %img.addr, align 8
  %width102 = getelementptr inbounds %struct.image, %struct.image* %24, i32 0, i32 11
  %25 = load i32, i32* %width102, align 4
  %conv103 = trunc i32 %25 to i8
  %conv104 = sext i8 %conv103 to i32
  %mul105 = mul nsw i32 0, %conv104
  %add106 = add nsw i32 %mul105, 16
  %mul107 = mul nsw i32 0, %add106
  %add108 = add nsw i32 %mul107, 0
  %neg109 = xor i32 %add108, -1
  %cmp110 = icmp eq i32 %neg109, -1
  %conv111 = zext i1 %cmp110 to i32
  %sub112 = sub nsw i32 0, %conv111
  %26 = load %struct.image*, %struct.image** %img.addr, align 8
  %width113 = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 11
  %27 = load i32, i32* %width113, align 4
  %conv114 = trunc i32 %27 to i8
  %conv115 = sext i8 %conv114 to i32
  %mul116 = mul nsw i32 0, %conv115
  %add117 = add nsw i32 %mul116, 16
  %mul118 = mul nsw i32 0, %add117
  %add119 = add nsw i32 %mul118, 1
  %shl120 = shl i32 %add119, 30
  %sub121 = sub nsw i32 %shl120, 1
  %mul122 = mul nsw i32 %sub121, 2
  %add123 = add nsw i32 %mul122, 1
  %sub124 = sub nsw i32 %sub112, %add123
  br label %cond.end.133

cond.false.125:                                   ; preds = %cond.false.91
  %28 = load %struct.image*, %struct.image** %img.addr, align 8
  %width126 = getelementptr inbounds %struct.image, %struct.image* %28, i32 0, i32 11
  %29 = load i32, i32* %width126, align 4
  %conv127 = trunc i32 %29 to i8
  %conv128 = sext i8 %conv127 to i32
  %mul129 = mul nsw i32 0, %conv128
  %add130 = add nsw i32 %mul129, 16
  %mul131 = mul nsw i32 0, %add130
  %add132 = add nsw i32 %mul131, 0
  br label %cond.end.133

cond.end.133:                                     ; preds = %cond.false.125, %cond.true.101
  %cond134 = phi i32 [ %sub124, %cond.true.101 ], [ %add132, %cond.false.125 ]
  %30 = load %struct.image*, %struct.image** %img.addr, align 8
  %width135 = getelementptr inbounds %struct.image, %struct.image* %30, i32 0, i32 11
  %31 = load i32, i32* %width135, align 4
  %conv136 = trunc i32 %31 to i8
  %conv137 = sext i8 %conv136 to i32
  %div138 = sdiv i32 %cond134, %conv137
  %cmp139 = icmp slt i32 %div138, 16
  br i1 %cmp139, label %cond.true.260, label %lor.lhs.false.237

cond.false.141:                                   ; preds = %lor.lhs.false
  %32 = load %struct.image*, %struct.image** %img.addr, align 8
  %width142 = getelementptr inbounds %struct.image, %struct.image* %32, i32 0, i32 11
  %33 = load i32, i32* %width142, align 4
  %conv143 = trunc i32 %33 to i8
  %conv144 = sext i8 %conv143 to i32
  %cmp145 = icmp eq i32 %conv144, 0
  br i1 %cmp145, label %cond.true.147, label %cond.false.148

cond.true.147:                                    ; preds = %cond.false.141
  br i1 false, label %cond.true.260, label %lor.lhs.false.237

cond.false.148:                                   ; preds = %cond.false.141
  br i1 false, label %cond.true.149, label %cond.false.199

cond.true.149:                                    ; preds = %cond.false.148
  %34 = load %struct.image*, %struct.image** %img.addr, align 8
  %width150 = getelementptr inbounds %struct.image, %struct.image* %34, i32 0, i32 11
  %35 = load i32, i32* %width150, align 4
  %conv151 = trunc i32 %35 to i8
  %conv152 = sext i8 %conv151 to i32
  %mul153 = mul nsw i32 0, %conv152
  %add154 = add nsw i32 %mul153, 16
  %mul155 = mul nsw i32 0, %add154
  %sub156 = sub nsw i32 %mul155, 1
  %cmp157 = icmp slt i32 %sub156, 0
  br i1 %cmp157, label %cond.true.159, label %cond.false.183

cond.true.159:                                    ; preds = %cond.true.149
  %36 = load %struct.image*, %struct.image** %img.addr, align 8
  %width160 = getelementptr inbounds %struct.image, %struct.image* %36, i32 0, i32 11
  %37 = load i32, i32* %width160, align 4
  %conv161 = trunc i32 %37 to i8
  %conv162 = sext i8 %conv161 to i32
  %mul163 = mul nsw i32 0, %conv162
  %add164 = add nsw i32 %mul163, 16
  %mul165 = mul nsw i32 0, %add164
  %add166 = add nsw i32 %mul165, 0
  %neg167 = xor i32 %add166, -1
  %cmp168 = icmp eq i32 %neg167, -1
  %conv169 = zext i1 %cmp168 to i32
  %sub170 = sub nsw i32 0, %conv169
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  %width171 = getelementptr inbounds %struct.image, %struct.image* %38, i32 0, i32 11
  %39 = load i32, i32* %width171, align 4
  %conv172 = trunc i32 %39 to i8
  %conv173 = sext i8 %conv172 to i32
  %mul174 = mul nsw i32 0, %conv173
  %add175 = add nsw i32 %mul174, 16
  %mul176 = mul nsw i32 0, %add175
  %add177 = add nsw i32 %mul176, 1
  %shl178 = shl i32 %add177, 30
  %sub179 = sub nsw i32 %shl178, 1
  %mul180 = mul nsw i32 %sub179, 2
  %add181 = add nsw i32 %mul180, 1
  %sub182 = sub nsw i32 %sub170, %add181
  br label %cond.end.191

cond.false.183:                                   ; preds = %cond.true.149
  %40 = load %struct.image*, %struct.image** %img.addr, align 8
  %width184 = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 11
  %41 = load i32, i32* %width184, align 4
  %conv185 = trunc i32 %41 to i8
  %conv186 = sext i8 %conv185 to i32
  %mul187 = mul nsw i32 0, %conv186
  %add188 = add nsw i32 %mul187, 16
  %mul189 = mul nsw i32 0, %add188
  %add190 = add nsw i32 %mul189, 0
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.183, %cond.true.159
  %cond192 = phi i32 [ %sub182, %cond.true.159 ], [ %add190, %cond.false.183 ]
  %42 = load %struct.image*, %struct.image** %img.addr, align 8
  %width193 = getelementptr inbounds %struct.image, %struct.image* %42, i32 0, i32 11
  %43 = load i32, i32* %width193, align 4
  %conv194 = trunc i32 %43 to i8
  %conv195 = sext i8 %conv194 to i32
  %div196 = sdiv i32 %cond192, %conv195
  %cmp197 = icmp slt i32 16, %div196
  br i1 %cmp197, label %cond.true.260, label %lor.lhs.false.237

cond.false.199:                                   ; preds = %cond.false.148
  %44 = load %struct.image*, %struct.image** %img.addr, align 8
  %width200 = getelementptr inbounds %struct.image, %struct.image* %44, i32 0, i32 11
  %45 = load i32, i32* %width200, align 4
  %conv201 = trunc i32 %45 to i8
  %conv202 = sext i8 %conv201 to i32
  %mul203 = mul nsw i32 0, %conv202
  %add204 = add nsw i32 %mul203, 16
  %mul205 = mul nsw i32 0, %add204
  %sub206 = sub nsw i32 %mul205, 1
  %cmp207 = icmp slt i32 %sub206, 0
  br i1 %cmp207, label %cond.true.209, label %cond.false.221

cond.true.209:                                    ; preds = %cond.false.199
  %46 = load %struct.image*, %struct.image** %img.addr, align 8
  %width210 = getelementptr inbounds %struct.image, %struct.image* %46, i32 0, i32 11
  %47 = load i32, i32* %width210, align 4
  %conv211 = trunc i32 %47 to i8
  %conv212 = sext i8 %conv211 to i32
  %mul213 = mul nsw i32 0, %conv212
  %add214 = add nsw i32 %mul213, 16
  %mul215 = mul nsw i32 0, %add214
  %add216 = add nsw i32 %mul215, 1
  %shl217 = shl i32 %add216, 30
  %sub218 = sub nsw i32 %shl217, 1
  %mul219 = mul nsw i32 %sub218, 2
  %add220 = add nsw i32 %mul219, 1
  br label %cond.end.229

cond.false.221:                                   ; preds = %cond.false.199
  %48 = load %struct.image*, %struct.image** %img.addr, align 8
  %width222 = getelementptr inbounds %struct.image, %struct.image* %48, i32 0, i32 11
  %49 = load i32, i32* %width222, align 4
  %conv223 = trunc i32 %49 to i8
  %conv224 = sext i8 %conv223 to i32
  %mul225 = mul nsw i32 0, %conv224
  %add226 = add nsw i32 %mul225, 16
  %mul227 = mul nsw i32 0, %add226
  %sub228 = sub nsw i32 %mul227, 1
  br label %cond.end.229

cond.end.229:                                     ; preds = %cond.false.221, %cond.true.209
  %cond230 = phi i32 [ %add220, %cond.true.209 ], [ %sub228, %cond.false.221 ]
  %50 = load %struct.image*, %struct.image** %img.addr, align 8
  %width231 = getelementptr inbounds %struct.image, %struct.image* %50, i32 0, i32 11
  %51 = load i32, i32* %width231, align 4
  %conv232 = trunc i32 %51 to i8
  %conv233 = sext i8 %conv232 to i32
  %div234 = sdiv i32 %cond230, %conv233
  %cmp235 = icmp slt i32 %div234, 16
  br i1 %cmp235, label %cond.true.260, label %lor.lhs.false.237

lor.lhs.false.237:                                ; preds = %cond.end.229, %cond.end.191, %cond.true.147, %cond.end.133, %cond.true.90, %cond.end.77
  %52 = load %struct.image*, %struct.image** %img.addr, align 8
  %width238 = getelementptr inbounds %struct.image, %struct.image* %52, i32 0, i32 11
  %53 = load i32, i32* %width238, align 4
  %conv239 = trunc i32 %53 to i8
  %conv240 = sext i8 %conv239 to i32
  %mul241 = mul nsw i32 16, %conv240
  %mul242 = mul nsw i32 0, %mul241
  %sub243 = sub nsw i32 %mul242, 1
  %cmp244 = icmp slt i32 %sub243, 0
  br i1 %cmp244, label %land.lhs.true.246, label %lor.lhs.false.253

land.lhs.true.246:                                ; preds = %lor.lhs.false.237
  %54 = load %struct.image*, %struct.image** %img.addr, align 8
  %width247 = getelementptr inbounds %struct.image, %struct.image* %54, i32 0, i32 11
  %55 = load i32, i32* %width247, align 4
  %conv248 = trunc i32 %55 to i8
  %conv249 = sext i8 %conv248 to i32
  %mul250 = mul nsw i32 16, %conv249
  %cmp251 = icmp slt i32 %mul250, -128
  br i1 %cmp251, label %cond.true.260, label %lor.lhs.false.253

lor.lhs.false.253:                                ; preds = %land.lhs.true.246, %lor.lhs.false.237
  %56 = load %struct.image*, %struct.image** %img.addr, align 8
  %width254 = getelementptr inbounds %struct.image, %struct.image* %56, i32 0, i32 11
  %57 = load i32, i32* %width254, align 4
  %conv255 = trunc i32 %57 to i8
  %conv256 = sext i8 %conv255 to i32
  %mul257 = mul nsw i32 16, %conv256
  %cmp258 = icmp slt i32 127, %mul257
  br i1 %cmp258, label %cond.true.260, label %cond.false.286

cond.true.260:                                    ; preds = %lor.lhs.false.253, %land.lhs.true.246, %cond.end.229, %cond.end.191, %cond.true.147, %cond.end.133, %cond.true.90, %cond.end.77, %land.lhs.true
  %58 = load %struct.image*, %struct.image** %img.addr, align 8
  %width261 = getelementptr inbounds %struct.image, %struct.image* %58, i32 0, i32 11
  %59 = load i32, i32* %width261, align 4
  %conv262 = trunc i32 %59 to i8
  %conv263 = zext i8 %conv262 to i32
  %mul264 = mul nsw i32 16, %conv263
  %cmp265 = icmp sle i32 %mul264, 127
  br i1 %cmp265, label %cond.true.267, label %cond.false.274

cond.true.267:                                    ; preds = %cond.true.260
  %60 = load %struct.image*, %struct.image** %img.addr, align 8
  %width268 = getelementptr inbounds %struct.image, %struct.image* %60, i32 0, i32 11
  %61 = load i32, i32* %width268, align 4
  %conv269 = trunc i32 %61 to i8
  %conv270 = zext i8 %conv269 to i32
  %mul271 = mul nsw i32 16, %conv270
  %conv272 = trunc i32 %mul271 to i8
  %conv273 = sext i8 %conv272 to i32
  br label %cond.end.283

cond.false.274:                                   ; preds = %cond.true.260
  %62 = load %struct.image*, %struct.image** %img.addr, align 8
  %width275 = getelementptr inbounds %struct.image, %struct.image* %62, i32 0, i32 11
  %63 = load i32, i32* %width275, align 4
  %conv276 = trunc i32 %63 to i8
  %conv277 = zext i8 %conv276 to i32
  %mul278 = mul nsw i32 16, %conv277
  %sub279 = sub nsw i32 %mul278, -128
  %conv280 = trunc i32 %sub279 to i8
  %conv281 = sext i8 %conv280 to i32
  %add282 = add nsw i32 %conv281, -128
  br label %cond.end.283

cond.end.283:                                     ; preds = %cond.false.274, %cond.true.267
  %cond284 = phi i32 [ %conv273, %cond.true.267 ], [ %add282, %cond.false.274 ]
  %conv285 = sext i32 %cond284 to i64
  store i64 %conv285, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.286:                                   ; preds = %lor.lhs.false.253
  %64 = load %struct.image*, %struct.image** %img.addr, align 8
  %width287 = getelementptr inbounds %struct.image, %struct.image* %64, i32 0, i32 11
  %65 = load i32, i32* %width287, align 4
  %conv288 = trunc i32 %65 to i8
  %conv289 = zext i8 %conv288 to i32
  %mul290 = mul nsw i32 16, %conv289
  %cmp291 = icmp sle i32 %mul290, 127
  br i1 %cmp291, label %cond.true.293, label %cond.false.300

cond.true.293:                                    ; preds = %cond.false.286
  %66 = load %struct.image*, %struct.image** %img.addr, align 8
  %width294 = getelementptr inbounds %struct.image, %struct.image* %66, i32 0, i32 11
  %67 = load i32, i32* %width294, align 4
  %conv295 = trunc i32 %67 to i8
  %conv296 = zext i8 %conv295 to i32
  %mul297 = mul nsw i32 16, %conv296
  %conv298 = trunc i32 %mul297 to i8
  %conv299 = sext i8 %conv298 to i32
  br label %cond.end.309

cond.false.300:                                   ; preds = %cond.false.286
  %68 = load %struct.image*, %struct.image** %img.addr, align 8
  %width301 = getelementptr inbounds %struct.image, %struct.image* %68, i32 0, i32 11
  %69 = load i32, i32* %width301, align 4
  %conv302 = trunc i32 %69 to i8
  %conv303 = zext i8 %conv302 to i32
  %mul304 = mul nsw i32 16, %conv303
  %sub305 = sub nsw i32 %mul304, -128
  %conv306 = trunc i32 %sub305 to i8
  %conv307 = sext i8 %conv306 to i32
  %add308 = add nsw i32 %conv307, -128
  br label %cond.end.309

cond.end.309:                                     ; preds = %cond.false.300, %cond.true.293
  %cond310 = phi i32 [ %conv299, %cond.true.293 ], [ %add308, %cond.false.300 ]
  %conv311 = sext i32 %cond310 to i64
  store i64 %conv311, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.312:                                   ; preds = %cond.true
  %70 = load %struct.image*, %struct.image** %img.addr, align 8
  %width313 = getelementptr inbounds %struct.image, %struct.image* %70, i32 0, i32 11
  %71 = load i32, i32* %width313, align 4
  %mul314 = mul nsw i32 0, %71
  %conv315 = sext i32 %mul314 to i64
  %add316 = add i64 %conv315, 16
  %mul317 = mul i64 0, %add316
  %sub318 = sub i64 %mul317, 1
  %cmp319 = icmp ult i64 %sub318, 0
  br i1 %cmp319, label %cond.true.321, label %cond.false.344

cond.true.321:                                    ; preds = %cond.false.312
  %72 = load %struct.image*, %struct.image** %img.addr, align 8
  %width322 = getelementptr inbounds %struct.image, %struct.image* %72, i32 0, i32 11
  %73 = load i32, i32* %width322, align 4
  %mul323 = mul nsw i32 0, %73
  %conv324 = sext i32 %mul323 to i64
  %add325 = add i64 %conv324, 16
  %mul326 = mul i64 0, %add325
  %add327 = add i64 %mul326, 0
  %neg328 = xor i64 %add327, -1
  %cmp329 = icmp eq i64 %neg328, -1
  %conv330 = zext i1 %cmp329 to i32
  %sub331 = sub nsw i32 0, %conv330
  %conv332 = sext i32 %sub331 to i64
  %74 = load %struct.image*, %struct.image** %img.addr, align 8
  %width333 = getelementptr inbounds %struct.image, %struct.image* %74, i32 0, i32 11
  %75 = load i32, i32* %width333, align 4
  %mul334 = mul nsw i32 0, %75
  %conv335 = sext i32 %mul334 to i64
  %add336 = add i64 %conv335, 16
  %mul337 = mul i64 0, %add336
  %add338 = add i64 %mul337, 1
  %shl339 = shl i64 %add338, 62
  %sub340 = sub i64 %shl339, 1
  %mul341 = mul i64 %sub340, 2
  %add342 = add i64 %mul341, 1
  %sub343 = sub i64 %conv332, %add342
  br label %cond.end.351

cond.false.344:                                   ; preds = %cond.false.312
  %76 = load %struct.image*, %struct.image** %img.addr, align 8
  %width345 = getelementptr inbounds %struct.image, %struct.image* %76, i32 0, i32 11
  %77 = load i32, i32* %width345, align 4
  %mul346 = mul nsw i32 0, %77
  %conv347 = sext i32 %mul346 to i64
  %add348 = add i64 %conv347, 16
  %mul349 = mul i64 0, %add348
  %add350 = add i64 %mul349, 0
  br label %cond.end.351

cond.end.351:                                     ; preds = %cond.false.344, %cond.true.321
  %cond352 = phi i64 [ %sub343, %cond.true.321 ], [ %add350, %cond.false.344 ]
  %cmp353 = icmp eq i64 %cond352, 0
  br i1 %cmp353, label %land.lhs.true.355, label %lor.lhs.false.359

land.lhs.true.355:                                ; preds = %cond.end.351
  %78 = load %struct.image*, %struct.image** %img.addr, align 8
  %width356 = getelementptr inbounds %struct.image, %struct.image* %78, i32 0, i32 11
  %79 = load i32, i32* %width356, align 4
  %cmp357 = icmp slt i32 %79, 0
  br i1 %cmp357, label %cond.true.555, label %lor.lhs.false.359

lor.lhs.false.359:                                ; preds = %land.lhs.true.355, %cond.end.351
  %80 = load %struct.image*, %struct.image** %img.addr, align 8
  %width360 = getelementptr inbounds %struct.image, %struct.image* %80, i32 0, i32 11
  %81 = load i32, i32* %width360, align 4
  %cmp361 = icmp slt i32 %81, 0
  br i1 %cmp361, label %cond.true.363, label %cond.false.449

cond.true.363:                                    ; preds = %lor.lhs.false.359
  br i1 false, label %cond.true.364, label %cond.false.398

cond.true.364:                                    ; preds = %cond.true.363
  %82 = load %struct.image*, %struct.image** %img.addr, align 8
  %width365 = getelementptr inbounds %struct.image, %struct.image* %82, i32 0, i32 11
  %83 = load i32, i32* %width365, align 4
  %mul366 = mul nsw i32 0, %83
  %conv367 = sext i32 %mul366 to i64
  %add368 = add i64 %conv367, 16
  %mul369 = mul i64 0, %add368
  %sub370 = sub i64 %mul369, 1
  %cmp371 = icmp ult i64 %sub370, 0
  br i1 %cmp371, label %cond.true.373, label %cond.false.384

cond.true.373:                                    ; preds = %cond.true.364
  %84 = load %struct.image*, %struct.image** %img.addr, align 8
  %width374 = getelementptr inbounds %struct.image, %struct.image* %84, i32 0, i32 11
  %85 = load i32, i32* %width374, align 4
  %mul375 = mul nsw i32 0, %85
  %conv376 = sext i32 %mul375 to i64
  %add377 = add i64 %conv376, 16
  %mul378 = mul i64 0, %add377
  %add379 = add i64 %mul378, 1
  %shl380 = shl i64 %add379, 62
  %sub381 = sub i64 %shl380, 1
  %mul382 = mul i64 %sub381, 2
  %add383 = add i64 %mul382, 1
  br label %cond.end.391

cond.false.384:                                   ; preds = %cond.true.364
  %86 = load %struct.image*, %struct.image** %img.addr, align 8
  %width385 = getelementptr inbounds %struct.image, %struct.image* %86, i32 0, i32 11
  %87 = load i32, i32* %width385, align 4
  %mul386 = mul nsw i32 0, %87
  %conv387 = sext i32 %mul386 to i64
  %add388 = add i64 %conv387, 16
  %mul389 = mul i64 0, %add388
  %sub390 = sub i64 %mul389, 1
  br label %cond.end.391

cond.end.391:                                     ; preds = %cond.false.384, %cond.true.373
  %cond392 = phi i64 [ %add383, %cond.true.373 ], [ %sub390, %cond.false.384 ]
  %88 = load %struct.image*, %struct.image** %img.addr, align 8
  %width393 = getelementptr inbounds %struct.image, %struct.image* %88, i32 0, i32 11
  %89 = load i32, i32* %width393, align 4
  %conv394 = sext i32 %89 to i64
  %div395 = udiv i64 %cond392, %conv394
  %cmp396 = icmp ult i64 16, %div395
  br i1 %cmp396, label %cond.true.555, label %lor.lhs.false.535

cond.false.398:                                   ; preds = %cond.true.363
  %90 = load %struct.image*, %struct.image** %img.addr, align 8
  %width399 = getelementptr inbounds %struct.image, %struct.image* %90, i32 0, i32 11
  %91 = load i32, i32* %width399, align 4
  %cmp400 = icmp eq i32 %91, -1
  br i1 %cmp400, label %cond.true.402, label %cond.false.403

cond.true.402:                                    ; preds = %cond.false.398
  br i1 false, label %cond.true.555, label %lor.lhs.false.535

cond.false.403:                                   ; preds = %cond.false.398
  %92 = load %struct.image*, %struct.image** %img.addr, align 8
  %width404 = getelementptr inbounds %struct.image, %struct.image* %92, i32 0, i32 11
  %93 = load i32, i32* %width404, align 4
  %mul405 = mul nsw i32 0, %93
  %conv406 = sext i32 %mul405 to i64
  %add407 = add i64 %conv406, 16
  %mul408 = mul i64 0, %add407
  %sub409 = sub i64 %mul408, 1
  %cmp410 = icmp ult i64 %sub409, 0
  br i1 %cmp410, label %cond.true.412, label %cond.false.435

cond.true.412:                                    ; preds = %cond.false.403
  %94 = load %struct.image*, %struct.image** %img.addr, align 8
  %width413 = getelementptr inbounds %struct.image, %struct.image* %94, i32 0, i32 11
  %95 = load i32, i32* %width413, align 4
  %mul414 = mul nsw i32 0, %95
  %conv415 = sext i32 %mul414 to i64
  %add416 = add i64 %conv415, 16
  %mul417 = mul i64 0, %add416
  %add418 = add i64 %mul417, 0
  %neg419 = xor i64 %add418, -1
  %cmp420 = icmp eq i64 %neg419, -1
  %conv421 = zext i1 %cmp420 to i32
  %sub422 = sub nsw i32 0, %conv421
  %conv423 = sext i32 %sub422 to i64
  %96 = load %struct.image*, %struct.image** %img.addr, align 8
  %width424 = getelementptr inbounds %struct.image, %struct.image* %96, i32 0, i32 11
  %97 = load i32, i32* %width424, align 4
  %mul425 = mul nsw i32 0, %97
  %conv426 = sext i32 %mul425 to i64
  %add427 = add i64 %conv426, 16
  %mul428 = mul i64 0, %add427
  %add429 = add i64 %mul428, 1
  %shl430 = shl i64 %add429, 62
  %sub431 = sub i64 %shl430, 1
  %mul432 = mul i64 %sub431, 2
  %add433 = add i64 %mul432, 1
  %sub434 = sub i64 %conv423, %add433
  br label %cond.end.442

cond.false.435:                                   ; preds = %cond.false.403
  %98 = load %struct.image*, %struct.image** %img.addr, align 8
  %width436 = getelementptr inbounds %struct.image, %struct.image* %98, i32 0, i32 11
  %99 = load i32, i32* %width436, align 4
  %mul437 = mul nsw i32 0, %99
  %conv438 = sext i32 %mul437 to i64
  %add439 = add i64 %conv438, 16
  %mul440 = mul i64 0, %add439
  %add441 = add i64 %mul440, 0
  br label %cond.end.442

cond.end.442:                                     ; preds = %cond.false.435, %cond.true.412
  %cond443 = phi i64 [ %sub434, %cond.true.412 ], [ %add441, %cond.false.435 ]
  %100 = load %struct.image*, %struct.image** %img.addr, align 8
  %width444 = getelementptr inbounds %struct.image, %struct.image* %100, i32 0, i32 11
  %101 = load i32, i32* %width444, align 4
  %conv445 = sext i32 %101 to i64
  %div446 = udiv i64 %cond443, %conv445
  %cmp447 = icmp ult i64 %div446, 16
  br i1 %cmp447, label %cond.true.555, label %lor.lhs.false.535

cond.false.449:                                   ; preds = %lor.lhs.false.359
  %102 = load %struct.image*, %struct.image** %img.addr, align 8
  %width450 = getelementptr inbounds %struct.image, %struct.image* %102, i32 0, i32 11
  %103 = load i32, i32* %width450, align 4
  %cmp451 = icmp eq i32 %103, 0
  br i1 %cmp451, label %cond.true.453, label %cond.false.454

cond.true.453:                                    ; preds = %cond.false.449
  br i1 false, label %cond.true.555, label %lor.lhs.false.535

cond.false.454:                                   ; preds = %cond.false.449
  br i1 false, label %cond.true.455, label %cond.false.501

cond.true.455:                                    ; preds = %cond.false.454
  %104 = load %struct.image*, %struct.image** %img.addr, align 8
  %width456 = getelementptr inbounds %struct.image, %struct.image* %104, i32 0, i32 11
  %105 = load i32, i32* %width456, align 4
  %mul457 = mul nsw i32 0, %105
  %conv458 = sext i32 %mul457 to i64
  %add459 = add i64 %conv458, 16
  %mul460 = mul i64 0, %add459
  %sub461 = sub i64 %mul460, 1
  %cmp462 = icmp ult i64 %sub461, 0
  br i1 %cmp462, label %cond.true.464, label %cond.false.487

cond.true.464:                                    ; preds = %cond.true.455
  %106 = load %struct.image*, %struct.image** %img.addr, align 8
  %width465 = getelementptr inbounds %struct.image, %struct.image* %106, i32 0, i32 11
  %107 = load i32, i32* %width465, align 4
  %mul466 = mul nsw i32 0, %107
  %conv467 = sext i32 %mul466 to i64
  %add468 = add i64 %conv467, 16
  %mul469 = mul i64 0, %add468
  %add470 = add i64 %mul469, 0
  %neg471 = xor i64 %add470, -1
  %cmp472 = icmp eq i64 %neg471, -1
  %conv473 = zext i1 %cmp472 to i32
  %sub474 = sub nsw i32 0, %conv473
  %conv475 = sext i32 %sub474 to i64
  %108 = load %struct.image*, %struct.image** %img.addr, align 8
  %width476 = getelementptr inbounds %struct.image, %struct.image* %108, i32 0, i32 11
  %109 = load i32, i32* %width476, align 4
  %mul477 = mul nsw i32 0, %109
  %conv478 = sext i32 %mul477 to i64
  %add479 = add i64 %conv478, 16
  %mul480 = mul i64 0, %add479
  %add481 = add i64 %mul480, 1
  %shl482 = shl i64 %add481, 62
  %sub483 = sub i64 %shl482, 1
  %mul484 = mul i64 %sub483, 2
  %add485 = add i64 %mul484, 1
  %sub486 = sub i64 %conv475, %add485
  br label %cond.end.494

cond.false.487:                                   ; preds = %cond.true.455
  %110 = load %struct.image*, %struct.image** %img.addr, align 8
  %width488 = getelementptr inbounds %struct.image, %struct.image* %110, i32 0, i32 11
  %111 = load i32, i32* %width488, align 4
  %mul489 = mul nsw i32 0, %111
  %conv490 = sext i32 %mul489 to i64
  %add491 = add i64 %conv490, 16
  %mul492 = mul i64 0, %add491
  %add493 = add i64 %mul492, 0
  br label %cond.end.494

cond.end.494:                                     ; preds = %cond.false.487, %cond.true.464
  %cond495 = phi i64 [ %sub486, %cond.true.464 ], [ %add493, %cond.false.487 ]
  %112 = load %struct.image*, %struct.image** %img.addr, align 8
  %width496 = getelementptr inbounds %struct.image, %struct.image* %112, i32 0, i32 11
  %113 = load i32, i32* %width496, align 4
  %conv497 = sext i32 %113 to i64
  %div498 = udiv i64 %cond495, %conv497
  %cmp499 = icmp ult i64 16, %div498
  br i1 %cmp499, label %cond.true.555, label %lor.lhs.false.535

cond.false.501:                                   ; preds = %cond.false.454
  %114 = load %struct.image*, %struct.image** %img.addr, align 8
  %width502 = getelementptr inbounds %struct.image, %struct.image* %114, i32 0, i32 11
  %115 = load i32, i32* %width502, align 4
  %mul503 = mul nsw i32 0, %115
  %conv504 = sext i32 %mul503 to i64
  %add505 = add i64 %conv504, 16
  %mul506 = mul i64 0, %add505
  %sub507 = sub i64 %mul506, 1
  %cmp508 = icmp ult i64 %sub507, 0
  br i1 %cmp508, label %cond.true.510, label %cond.false.521

cond.true.510:                                    ; preds = %cond.false.501
  %116 = load %struct.image*, %struct.image** %img.addr, align 8
  %width511 = getelementptr inbounds %struct.image, %struct.image* %116, i32 0, i32 11
  %117 = load i32, i32* %width511, align 4
  %mul512 = mul nsw i32 0, %117
  %conv513 = sext i32 %mul512 to i64
  %add514 = add i64 %conv513, 16
  %mul515 = mul i64 0, %add514
  %add516 = add i64 %mul515, 1
  %shl517 = shl i64 %add516, 62
  %sub518 = sub i64 %shl517, 1
  %mul519 = mul i64 %sub518, 2
  %add520 = add i64 %mul519, 1
  br label %cond.end.528

cond.false.521:                                   ; preds = %cond.false.501
  %118 = load %struct.image*, %struct.image** %img.addr, align 8
  %width522 = getelementptr inbounds %struct.image, %struct.image* %118, i32 0, i32 11
  %119 = load i32, i32* %width522, align 4
  %mul523 = mul nsw i32 0, %119
  %conv524 = sext i32 %mul523 to i64
  %add525 = add i64 %conv524, 16
  %mul526 = mul i64 0, %add525
  %sub527 = sub i64 %mul526, 1
  br label %cond.end.528

cond.end.528:                                     ; preds = %cond.false.521, %cond.true.510
  %cond529 = phi i64 [ %add520, %cond.true.510 ], [ %sub527, %cond.false.521 ]
  %120 = load %struct.image*, %struct.image** %img.addr, align 8
  %width530 = getelementptr inbounds %struct.image, %struct.image* %120, i32 0, i32 11
  %121 = load i32, i32* %width530, align 4
  %conv531 = sext i32 %121 to i64
  %div532 = udiv i64 %cond529, %conv531
  %cmp533 = icmp ult i64 %div532, 16
  br i1 %cmp533, label %cond.true.555, label %lor.lhs.false.535

lor.lhs.false.535:                                ; preds = %cond.end.528, %cond.end.494, %cond.true.453, %cond.end.442, %cond.true.402, %cond.end.391
  %122 = load %struct.image*, %struct.image** %img.addr, align 8
  %width536 = getelementptr inbounds %struct.image, %struct.image* %122, i32 0, i32 11
  %123 = load i32, i32* %width536, align 4
  %conv537 = sext i32 %123 to i64
  %mul538 = mul i64 16, %conv537
  %mul539 = mul i64 0, %mul538
  %sub540 = sub i64 %mul539, 1
  %cmp541 = icmp ult i64 %sub540, 0
  br i1 %cmp541, label %land.lhs.true.543, label %lor.lhs.false.549

land.lhs.true.543:                                ; preds = %lor.lhs.false.535
  %124 = load %struct.image*, %struct.image** %img.addr, align 8
  %width544 = getelementptr inbounds %struct.image, %struct.image* %124, i32 0, i32 11
  %125 = load i32, i32* %width544, align 4
  %conv545 = sext i32 %125 to i64
  %mul546 = mul i64 16, %conv545
  %cmp547 = icmp ult i64 %mul546, -128
  br i1 %cmp547, label %cond.true.555, label %lor.lhs.false.549

lor.lhs.false.549:                                ; preds = %land.lhs.true.543, %lor.lhs.false.535
  %126 = load %struct.image*, %struct.image** %img.addr, align 8
  %width550 = getelementptr inbounds %struct.image, %struct.image* %126, i32 0, i32 11
  %127 = load i32, i32* %width550, align 4
  %conv551 = sext i32 %127 to i64
  %mul552 = mul i64 16, %conv551
  %cmp553 = icmp ult i64 127, %mul552
  br i1 %cmp553, label %cond.true.555, label %cond.false.581

cond.true.555:                                    ; preds = %lor.lhs.false.549, %land.lhs.true.543, %cond.end.528, %cond.end.494, %cond.true.453, %cond.end.442, %cond.true.402, %cond.end.391, %land.lhs.true.355
  %128 = load %struct.image*, %struct.image** %img.addr, align 8
  %width556 = getelementptr inbounds %struct.image, %struct.image* %128, i32 0, i32 11
  %129 = load i32, i32* %width556, align 4
  %conv557 = trunc i32 %129 to i8
  %conv558 = zext i8 %conv557 to i32
  %mul559 = mul nsw i32 16, %conv558
  %cmp560 = icmp sle i32 %mul559, 127
  br i1 %cmp560, label %cond.true.562, label %cond.false.569

cond.true.562:                                    ; preds = %cond.true.555
  %130 = load %struct.image*, %struct.image** %img.addr, align 8
  %width563 = getelementptr inbounds %struct.image, %struct.image* %130, i32 0, i32 11
  %131 = load i32, i32* %width563, align 4
  %conv564 = trunc i32 %131 to i8
  %conv565 = zext i8 %conv564 to i32
  %mul566 = mul nsw i32 16, %conv565
  %conv567 = trunc i32 %mul566 to i8
  %conv568 = sext i8 %conv567 to i32
  br label %cond.end.578

cond.false.569:                                   ; preds = %cond.true.555
  %132 = load %struct.image*, %struct.image** %img.addr, align 8
  %width570 = getelementptr inbounds %struct.image, %struct.image* %132, i32 0, i32 11
  %133 = load i32, i32* %width570, align 4
  %conv571 = trunc i32 %133 to i8
  %conv572 = zext i8 %conv571 to i32
  %mul573 = mul nsw i32 16, %conv572
  %sub574 = sub nsw i32 %mul573, -128
  %conv575 = trunc i32 %sub574 to i8
  %conv576 = sext i8 %conv575 to i32
  %add577 = add nsw i32 %conv576, -128
  br label %cond.end.578

cond.end.578:                                     ; preds = %cond.false.569, %cond.true.562
  %cond579 = phi i32 [ %conv568, %cond.true.562 ], [ %add577, %cond.false.569 ]
  %conv580 = sext i32 %cond579 to i64
  store i64 %conv580, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.581:                                   ; preds = %lor.lhs.false.549
  %134 = load %struct.image*, %struct.image** %img.addr, align 8
  %width582 = getelementptr inbounds %struct.image, %struct.image* %134, i32 0, i32 11
  %135 = load i32, i32* %width582, align 4
  %conv583 = trunc i32 %135 to i8
  %conv584 = zext i8 %conv583 to i32
  %mul585 = mul nsw i32 16, %conv584
  %cmp586 = icmp sle i32 %mul585, 127
  br i1 %cmp586, label %cond.true.588, label %cond.false.595

cond.true.588:                                    ; preds = %cond.false.581
  %136 = load %struct.image*, %struct.image** %img.addr, align 8
  %width589 = getelementptr inbounds %struct.image, %struct.image* %136, i32 0, i32 11
  %137 = load i32, i32* %width589, align 4
  %conv590 = trunc i32 %137 to i8
  %conv591 = zext i8 %conv590 to i32
  %mul592 = mul nsw i32 16, %conv591
  %conv593 = trunc i32 %mul592 to i8
  %conv594 = sext i8 %conv593 to i32
  br label %cond.end.604

cond.false.595:                                   ; preds = %cond.false.581
  %138 = load %struct.image*, %struct.image** %img.addr, align 8
  %width596 = getelementptr inbounds %struct.image, %struct.image* %138, i32 0, i32 11
  %139 = load i32, i32* %width596, align 4
  %conv597 = trunc i32 %139 to i8
  %conv598 = zext i8 %conv597 to i32
  %mul599 = mul nsw i32 16, %conv598
  %sub600 = sub nsw i32 %mul599, -128
  %conv601 = trunc i32 %sub600 to i8
  %conv602 = sext i8 %conv601 to i32
  %add603 = add nsw i32 %conv602, -128
  br label %cond.end.604

cond.end.604:                                     ; preds = %cond.false.595, %cond.true.588
  %cond605 = phi i32 [ %conv594, %cond.true.588 ], [ %add603, %cond.false.595 ]
  %conv606 = sext i32 %cond605 to i64
  store i64 %conv606, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.607:                                   ; preds = %entry
  br i1 false, label %cond.true.608, label %cond.false.1229

cond.true.608:                                    ; preds = %cond.false.607
  br i1 false, label %cond.true.609, label %cond.false.934

cond.true.609:                                    ; preds = %cond.true.608
  %140 = load %struct.image*, %struct.image** %img.addr, align 8
  %width610 = getelementptr inbounds %struct.image, %struct.image* %140, i32 0, i32 11
  %141 = load i32, i32* %width610, align 4
  %conv611 = trunc i32 %141 to i16
  %conv612 = sext i16 %conv611 to i32
  %mul613 = mul nsw i32 0, %conv612
  %add614 = add nsw i32 %mul613, 16
  %mul615 = mul nsw i32 0, %add614
  %sub616 = sub nsw i32 %mul615, 1
  %cmp617 = icmp slt i32 %sub616, 0
  br i1 %cmp617, label %cond.true.619, label %cond.false.643

cond.true.619:                                    ; preds = %cond.true.609
  %142 = load %struct.image*, %struct.image** %img.addr, align 8
  %width620 = getelementptr inbounds %struct.image, %struct.image* %142, i32 0, i32 11
  %143 = load i32, i32* %width620, align 4
  %conv621 = trunc i32 %143 to i16
  %conv622 = sext i16 %conv621 to i32
  %mul623 = mul nsw i32 0, %conv622
  %add624 = add nsw i32 %mul623, 16
  %mul625 = mul nsw i32 0, %add624
  %add626 = add nsw i32 %mul625, 0
  %neg627 = xor i32 %add626, -1
  %cmp628 = icmp eq i32 %neg627, -1
  %conv629 = zext i1 %cmp628 to i32
  %sub630 = sub nsw i32 0, %conv629
  %144 = load %struct.image*, %struct.image** %img.addr, align 8
  %width631 = getelementptr inbounds %struct.image, %struct.image* %144, i32 0, i32 11
  %145 = load i32, i32* %width631, align 4
  %conv632 = trunc i32 %145 to i16
  %conv633 = sext i16 %conv632 to i32
  %mul634 = mul nsw i32 0, %conv633
  %add635 = add nsw i32 %mul634, 16
  %mul636 = mul nsw i32 0, %add635
  %add637 = add nsw i32 %mul636, 1
  %shl638 = shl i32 %add637, 30
  %sub639 = sub nsw i32 %shl638, 1
  %mul640 = mul nsw i32 %sub639, 2
  %add641 = add nsw i32 %mul640, 1
  %sub642 = sub nsw i32 %sub630, %add641
  br label %cond.end.651

cond.false.643:                                   ; preds = %cond.true.609
  %146 = load %struct.image*, %struct.image** %img.addr, align 8
  %width644 = getelementptr inbounds %struct.image, %struct.image* %146, i32 0, i32 11
  %147 = load i32, i32* %width644, align 4
  %conv645 = trunc i32 %147 to i16
  %conv646 = sext i16 %conv645 to i32
  %mul647 = mul nsw i32 0, %conv646
  %add648 = add nsw i32 %mul647, 16
  %mul649 = mul nsw i32 0, %add648
  %add650 = add nsw i32 %mul649, 0
  br label %cond.end.651

cond.end.651:                                     ; preds = %cond.false.643, %cond.true.619
  %cond652 = phi i32 [ %sub642, %cond.true.619 ], [ %add650, %cond.false.643 ]
  %cmp653 = icmp eq i32 %cond652, 0
  br i1 %cmp653, label %land.lhs.true.655, label %lor.lhs.false.661

land.lhs.true.655:                                ; preds = %cond.end.651
  %148 = load %struct.image*, %struct.image** %img.addr, align 8
  %width656 = getelementptr inbounds %struct.image, %struct.image* %148, i32 0, i32 11
  %149 = load i32, i32* %width656, align 4
  %conv657 = trunc i32 %149 to i16
  %conv658 = sext i16 %conv657 to i32
  %cmp659 = icmp slt i32 %conv658, 0
  br i1 %cmp659, label %cond.true.882, label %lor.lhs.false.661

lor.lhs.false.661:                                ; preds = %land.lhs.true.655, %cond.end.651
  %150 = load %struct.image*, %struct.image** %img.addr, align 8
  %width662 = getelementptr inbounds %struct.image, %struct.image* %150, i32 0, i32 11
  %151 = load i32, i32* %width662, align 4
  %conv663 = trunc i32 %151 to i16
  %conv664 = sext i16 %conv663 to i32
  %cmp665 = icmp slt i32 %conv664, 0
  br i1 %cmp665, label %cond.true.667, label %cond.false.763

cond.true.667:                                    ; preds = %lor.lhs.false.661
  br i1 false, label %cond.true.668, label %cond.false.706

cond.true.668:                                    ; preds = %cond.true.667
  %152 = load %struct.image*, %struct.image** %img.addr, align 8
  %width669 = getelementptr inbounds %struct.image, %struct.image* %152, i32 0, i32 11
  %153 = load i32, i32* %width669, align 4
  %conv670 = trunc i32 %153 to i16
  %conv671 = sext i16 %conv670 to i32
  %mul672 = mul nsw i32 0, %conv671
  %add673 = add nsw i32 %mul672, 16
  %mul674 = mul nsw i32 0, %add673
  %sub675 = sub nsw i32 %mul674, 1
  %cmp676 = icmp slt i32 %sub675, 0
  br i1 %cmp676, label %cond.true.678, label %cond.false.690

cond.true.678:                                    ; preds = %cond.true.668
  %154 = load %struct.image*, %struct.image** %img.addr, align 8
  %width679 = getelementptr inbounds %struct.image, %struct.image* %154, i32 0, i32 11
  %155 = load i32, i32* %width679, align 4
  %conv680 = trunc i32 %155 to i16
  %conv681 = sext i16 %conv680 to i32
  %mul682 = mul nsw i32 0, %conv681
  %add683 = add nsw i32 %mul682, 16
  %mul684 = mul nsw i32 0, %add683
  %add685 = add nsw i32 %mul684, 1
  %shl686 = shl i32 %add685, 30
  %sub687 = sub nsw i32 %shl686, 1
  %mul688 = mul nsw i32 %sub687, 2
  %add689 = add nsw i32 %mul688, 1
  br label %cond.end.698

cond.false.690:                                   ; preds = %cond.true.668
  %156 = load %struct.image*, %struct.image** %img.addr, align 8
  %width691 = getelementptr inbounds %struct.image, %struct.image* %156, i32 0, i32 11
  %157 = load i32, i32* %width691, align 4
  %conv692 = trunc i32 %157 to i16
  %conv693 = sext i16 %conv692 to i32
  %mul694 = mul nsw i32 0, %conv693
  %add695 = add nsw i32 %mul694, 16
  %mul696 = mul nsw i32 0, %add695
  %sub697 = sub nsw i32 %mul696, 1
  br label %cond.end.698

cond.end.698:                                     ; preds = %cond.false.690, %cond.true.678
  %cond699 = phi i32 [ %add689, %cond.true.678 ], [ %sub697, %cond.false.690 ]
  %158 = load %struct.image*, %struct.image** %img.addr, align 8
  %width700 = getelementptr inbounds %struct.image, %struct.image* %158, i32 0, i32 11
  %159 = load i32, i32* %width700, align 4
  %conv701 = trunc i32 %159 to i16
  %conv702 = sext i16 %conv701 to i32
  %div703 = sdiv i32 %cond699, %conv702
  %cmp704 = icmp slt i32 16, %div703
  br i1 %cmp704, label %cond.true.882, label %lor.lhs.false.859

cond.false.706:                                   ; preds = %cond.true.667
  %160 = load %struct.image*, %struct.image** %img.addr, align 8
  %width707 = getelementptr inbounds %struct.image, %struct.image* %160, i32 0, i32 11
  %161 = load i32, i32* %width707, align 4
  %conv708 = trunc i32 %161 to i16
  %conv709 = sext i16 %conv708 to i32
  %cmp710 = icmp eq i32 %conv709, -1
  br i1 %cmp710, label %cond.true.712, label %cond.false.713

cond.true.712:                                    ; preds = %cond.false.706
  br i1 false, label %cond.true.882, label %lor.lhs.false.859

cond.false.713:                                   ; preds = %cond.false.706
  %162 = load %struct.image*, %struct.image** %img.addr, align 8
  %width714 = getelementptr inbounds %struct.image, %struct.image* %162, i32 0, i32 11
  %163 = load i32, i32* %width714, align 4
  %conv715 = trunc i32 %163 to i16
  %conv716 = sext i16 %conv715 to i32
  %mul717 = mul nsw i32 0, %conv716
  %add718 = add nsw i32 %mul717, 16
  %mul719 = mul nsw i32 0, %add718
  %sub720 = sub nsw i32 %mul719, 1
  %cmp721 = icmp slt i32 %sub720, 0
  br i1 %cmp721, label %cond.true.723, label %cond.false.747

cond.true.723:                                    ; preds = %cond.false.713
  %164 = load %struct.image*, %struct.image** %img.addr, align 8
  %width724 = getelementptr inbounds %struct.image, %struct.image* %164, i32 0, i32 11
  %165 = load i32, i32* %width724, align 4
  %conv725 = trunc i32 %165 to i16
  %conv726 = sext i16 %conv725 to i32
  %mul727 = mul nsw i32 0, %conv726
  %add728 = add nsw i32 %mul727, 16
  %mul729 = mul nsw i32 0, %add728
  %add730 = add nsw i32 %mul729, 0
  %neg731 = xor i32 %add730, -1
  %cmp732 = icmp eq i32 %neg731, -1
  %conv733 = zext i1 %cmp732 to i32
  %sub734 = sub nsw i32 0, %conv733
  %166 = load %struct.image*, %struct.image** %img.addr, align 8
  %width735 = getelementptr inbounds %struct.image, %struct.image* %166, i32 0, i32 11
  %167 = load i32, i32* %width735, align 4
  %conv736 = trunc i32 %167 to i16
  %conv737 = sext i16 %conv736 to i32
  %mul738 = mul nsw i32 0, %conv737
  %add739 = add nsw i32 %mul738, 16
  %mul740 = mul nsw i32 0, %add739
  %add741 = add nsw i32 %mul740, 1
  %shl742 = shl i32 %add741, 30
  %sub743 = sub nsw i32 %shl742, 1
  %mul744 = mul nsw i32 %sub743, 2
  %add745 = add nsw i32 %mul744, 1
  %sub746 = sub nsw i32 %sub734, %add745
  br label %cond.end.755

cond.false.747:                                   ; preds = %cond.false.713
  %168 = load %struct.image*, %struct.image** %img.addr, align 8
  %width748 = getelementptr inbounds %struct.image, %struct.image* %168, i32 0, i32 11
  %169 = load i32, i32* %width748, align 4
  %conv749 = trunc i32 %169 to i16
  %conv750 = sext i16 %conv749 to i32
  %mul751 = mul nsw i32 0, %conv750
  %add752 = add nsw i32 %mul751, 16
  %mul753 = mul nsw i32 0, %add752
  %add754 = add nsw i32 %mul753, 0
  br label %cond.end.755

cond.end.755:                                     ; preds = %cond.false.747, %cond.true.723
  %cond756 = phi i32 [ %sub746, %cond.true.723 ], [ %add754, %cond.false.747 ]
  %170 = load %struct.image*, %struct.image** %img.addr, align 8
  %width757 = getelementptr inbounds %struct.image, %struct.image* %170, i32 0, i32 11
  %171 = load i32, i32* %width757, align 4
  %conv758 = trunc i32 %171 to i16
  %conv759 = sext i16 %conv758 to i32
  %div760 = sdiv i32 %cond756, %conv759
  %cmp761 = icmp slt i32 %div760, 16
  br i1 %cmp761, label %cond.true.882, label %lor.lhs.false.859

cond.false.763:                                   ; preds = %lor.lhs.false.661
  %172 = load %struct.image*, %struct.image** %img.addr, align 8
  %width764 = getelementptr inbounds %struct.image, %struct.image* %172, i32 0, i32 11
  %173 = load i32, i32* %width764, align 4
  %conv765 = trunc i32 %173 to i16
  %conv766 = sext i16 %conv765 to i32
  %cmp767 = icmp eq i32 %conv766, 0
  br i1 %cmp767, label %cond.true.769, label %cond.false.770

cond.true.769:                                    ; preds = %cond.false.763
  br i1 false, label %cond.true.882, label %lor.lhs.false.859

cond.false.770:                                   ; preds = %cond.false.763
  br i1 false, label %cond.true.771, label %cond.false.821

cond.true.771:                                    ; preds = %cond.false.770
  %174 = load %struct.image*, %struct.image** %img.addr, align 8
  %width772 = getelementptr inbounds %struct.image, %struct.image* %174, i32 0, i32 11
  %175 = load i32, i32* %width772, align 4
  %conv773 = trunc i32 %175 to i16
  %conv774 = sext i16 %conv773 to i32
  %mul775 = mul nsw i32 0, %conv774
  %add776 = add nsw i32 %mul775, 16
  %mul777 = mul nsw i32 0, %add776
  %sub778 = sub nsw i32 %mul777, 1
  %cmp779 = icmp slt i32 %sub778, 0
  br i1 %cmp779, label %cond.true.781, label %cond.false.805

cond.true.781:                                    ; preds = %cond.true.771
  %176 = load %struct.image*, %struct.image** %img.addr, align 8
  %width782 = getelementptr inbounds %struct.image, %struct.image* %176, i32 0, i32 11
  %177 = load i32, i32* %width782, align 4
  %conv783 = trunc i32 %177 to i16
  %conv784 = sext i16 %conv783 to i32
  %mul785 = mul nsw i32 0, %conv784
  %add786 = add nsw i32 %mul785, 16
  %mul787 = mul nsw i32 0, %add786
  %add788 = add nsw i32 %mul787, 0
  %neg789 = xor i32 %add788, -1
  %cmp790 = icmp eq i32 %neg789, -1
  %conv791 = zext i1 %cmp790 to i32
  %sub792 = sub nsw i32 0, %conv791
  %178 = load %struct.image*, %struct.image** %img.addr, align 8
  %width793 = getelementptr inbounds %struct.image, %struct.image* %178, i32 0, i32 11
  %179 = load i32, i32* %width793, align 4
  %conv794 = trunc i32 %179 to i16
  %conv795 = sext i16 %conv794 to i32
  %mul796 = mul nsw i32 0, %conv795
  %add797 = add nsw i32 %mul796, 16
  %mul798 = mul nsw i32 0, %add797
  %add799 = add nsw i32 %mul798, 1
  %shl800 = shl i32 %add799, 30
  %sub801 = sub nsw i32 %shl800, 1
  %mul802 = mul nsw i32 %sub801, 2
  %add803 = add nsw i32 %mul802, 1
  %sub804 = sub nsw i32 %sub792, %add803
  br label %cond.end.813

cond.false.805:                                   ; preds = %cond.true.771
  %180 = load %struct.image*, %struct.image** %img.addr, align 8
  %width806 = getelementptr inbounds %struct.image, %struct.image* %180, i32 0, i32 11
  %181 = load i32, i32* %width806, align 4
  %conv807 = trunc i32 %181 to i16
  %conv808 = sext i16 %conv807 to i32
  %mul809 = mul nsw i32 0, %conv808
  %add810 = add nsw i32 %mul809, 16
  %mul811 = mul nsw i32 0, %add810
  %add812 = add nsw i32 %mul811, 0
  br label %cond.end.813

cond.end.813:                                     ; preds = %cond.false.805, %cond.true.781
  %cond814 = phi i32 [ %sub804, %cond.true.781 ], [ %add812, %cond.false.805 ]
  %182 = load %struct.image*, %struct.image** %img.addr, align 8
  %width815 = getelementptr inbounds %struct.image, %struct.image* %182, i32 0, i32 11
  %183 = load i32, i32* %width815, align 4
  %conv816 = trunc i32 %183 to i16
  %conv817 = sext i16 %conv816 to i32
  %div818 = sdiv i32 %cond814, %conv817
  %cmp819 = icmp slt i32 16, %div818
  br i1 %cmp819, label %cond.true.882, label %lor.lhs.false.859

cond.false.821:                                   ; preds = %cond.false.770
  %184 = load %struct.image*, %struct.image** %img.addr, align 8
  %width822 = getelementptr inbounds %struct.image, %struct.image* %184, i32 0, i32 11
  %185 = load i32, i32* %width822, align 4
  %conv823 = trunc i32 %185 to i16
  %conv824 = sext i16 %conv823 to i32
  %mul825 = mul nsw i32 0, %conv824
  %add826 = add nsw i32 %mul825, 16
  %mul827 = mul nsw i32 0, %add826
  %sub828 = sub nsw i32 %mul827, 1
  %cmp829 = icmp slt i32 %sub828, 0
  br i1 %cmp829, label %cond.true.831, label %cond.false.843

cond.true.831:                                    ; preds = %cond.false.821
  %186 = load %struct.image*, %struct.image** %img.addr, align 8
  %width832 = getelementptr inbounds %struct.image, %struct.image* %186, i32 0, i32 11
  %187 = load i32, i32* %width832, align 4
  %conv833 = trunc i32 %187 to i16
  %conv834 = sext i16 %conv833 to i32
  %mul835 = mul nsw i32 0, %conv834
  %add836 = add nsw i32 %mul835, 16
  %mul837 = mul nsw i32 0, %add836
  %add838 = add nsw i32 %mul837, 1
  %shl839 = shl i32 %add838, 30
  %sub840 = sub nsw i32 %shl839, 1
  %mul841 = mul nsw i32 %sub840, 2
  %add842 = add nsw i32 %mul841, 1
  br label %cond.end.851

cond.false.843:                                   ; preds = %cond.false.821
  %188 = load %struct.image*, %struct.image** %img.addr, align 8
  %width844 = getelementptr inbounds %struct.image, %struct.image* %188, i32 0, i32 11
  %189 = load i32, i32* %width844, align 4
  %conv845 = trunc i32 %189 to i16
  %conv846 = sext i16 %conv845 to i32
  %mul847 = mul nsw i32 0, %conv846
  %add848 = add nsw i32 %mul847, 16
  %mul849 = mul nsw i32 0, %add848
  %sub850 = sub nsw i32 %mul849, 1
  br label %cond.end.851

cond.end.851:                                     ; preds = %cond.false.843, %cond.true.831
  %cond852 = phi i32 [ %add842, %cond.true.831 ], [ %sub850, %cond.false.843 ]
  %190 = load %struct.image*, %struct.image** %img.addr, align 8
  %width853 = getelementptr inbounds %struct.image, %struct.image* %190, i32 0, i32 11
  %191 = load i32, i32* %width853, align 4
  %conv854 = trunc i32 %191 to i16
  %conv855 = sext i16 %conv854 to i32
  %div856 = sdiv i32 %cond852, %conv855
  %cmp857 = icmp slt i32 %div856, 16
  br i1 %cmp857, label %cond.true.882, label %lor.lhs.false.859

lor.lhs.false.859:                                ; preds = %cond.end.851, %cond.end.813, %cond.true.769, %cond.end.755, %cond.true.712, %cond.end.698
  %192 = load %struct.image*, %struct.image** %img.addr, align 8
  %width860 = getelementptr inbounds %struct.image, %struct.image* %192, i32 0, i32 11
  %193 = load i32, i32* %width860, align 4
  %conv861 = trunc i32 %193 to i16
  %conv862 = sext i16 %conv861 to i32
  %mul863 = mul nsw i32 16, %conv862
  %mul864 = mul nsw i32 0, %mul863
  %sub865 = sub nsw i32 %mul864, 1
  %cmp866 = icmp slt i32 %sub865, 0
  br i1 %cmp866, label %land.lhs.true.868, label %lor.lhs.false.875

land.lhs.true.868:                                ; preds = %lor.lhs.false.859
  %194 = load %struct.image*, %struct.image** %img.addr, align 8
  %width869 = getelementptr inbounds %struct.image, %struct.image* %194, i32 0, i32 11
  %195 = load i32, i32* %width869, align 4
  %conv870 = trunc i32 %195 to i16
  %conv871 = sext i16 %conv870 to i32
  %mul872 = mul nsw i32 16, %conv871
  %cmp873 = icmp slt i32 %mul872, -32768
  br i1 %cmp873, label %cond.true.882, label %lor.lhs.false.875

lor.lhs.false.875:                                ; preds = %land.lhs.true.868, %lor.lhs.false.859
  %196 = load %struct.image*, %struct.image** %img.addr, align 8
  %width876 = getelementptr inbounds %struct.image, %struct.image* %196, i32 0, i32 11
  %197 = load i32, i32* %width876, align 4
  %conv877 = trunc i32 %197 to i16
  %conv878 = sext i16 %conv877 to i32
  %mul879 = mul nsw i32 16, %conv878
  %cmp880 = icmp slt i32 32767, %mul879
  br i1 %cmp880, label %cond.true.882, label %cond.false.908

cond.true.882:                                    ; preds = %lor.lhs.false.875, %land.lhs.true.868, %cond.end.851, %cond.end.813, %cond.true.769, %cond.end.755, %cond.true.712, %cond.end.698, %land.lhs.true.655
  %198 = load %struct.image*, %struct.image** %img.addr, align 8
  %width883 = getelementptr inbounds %struct.image, %struct.image* %198, i32 0, i32 11
  %199 = load i32, i32* %width883, align 4
  %conv884 = trunc i32 %199 to i16
  %conv885 = zext i16 %conv884 to i32
  %mul886 = mul nsw i32 16, %conv885
  %cmp887 = icmp sle i32 %mul886, 32767
  br i1 %cmp887, label %cond.true.889, label %cond.false.896

cond.true.889:                                    ; preds = %cond.true.882
  %200 = load %struct.image*, %struct.image** %img.addr, align 8
  %width890 = getelementptr inbounds %struct.image, %struct.image* %200, i32 0, i32 11
  %201 = load i32, i32* %width890, align 4
  %conv891 = trunc i32 %201 to i16
  %conv892 = zext i16 %conv891 to i32
  %mul893 = mul nsw i32 16, %conv892
  %conv894 = trunc i32 %mul893 to i16
  %conv895 = sext i16 %conv894 to i32
  br label %cond.end.905

cond.false.896:                                   ; preds = %cond.true.882
  %202 = load %struct.image*, %struct.image** %img.addr, align 8
  %width897 = getelementptr inbounds %struct.image, %struct.image* %202, i32 0, i32 11
  %203 = load i32, i32* %width897, align 4
  %conv898 = trunc i32 %203 to i16
  %conv899 = zext i16 %conv898 to i32
  %mul900 = mul nsw i32 16, %conv899
  %sub901 = sub nsw i32 %mul900, -32768
  %conv902 = trunc i32 %sub901 to i16
  %conv903 = sext i16 %conv902 to i32
  %add904 = add nsw i32 %conv903, -32768
  br label %cond.end.905

cond.end.905:                                     ; preds = %cond.false.896, %cond.true.889
  %cond906 = phi i32 [ %conv895, %cond.true.889 ], [ %add904, %cond.false.896 ]
  %conv907 = sext i32 %cond906 to i64
  store i64 %conv907, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.908:                                   ; preds = %lor.lhs.false.875
  %204 = load %struct.image*, %struct.image** %img.addr, align 8
  %width909 = getelementptr inbounds %struct.image, %struct.image* %204, i32 0, i32 11
  %205 = load i32, i32* %width909, align 4
  %conv910 = trunc i32 %205 to i16
  %conv911 = zext i16 %conv910 to i32
  %mul912 = mul nsw i32 16, %conv911
  %cmp913 = icmp sle i32 %mul912, 32767
  br i1 %cmp913, label %cond.true.915, label %cond.false.922

cond.true.915:                                    ; preds = %cond.false.908
  %206 = load %struct.image*, %struct.image** %img.addr, align 8
  %width916 = getelementptr inbounds %struct.image, %struct.image* %206, i32 0, i32 11
  %207 = load i32, i32* %width916, align 4
  %conv917 = trunc i32 %207 to i16
  %conv918 = zext i16 %conv917 to i32
  %mul919 = mul nsw i32 16, %conv918
  %conv920 = trunc i32 %mul919 to i16
  %conv921 = sext i16 %conv920 to i32
  br label %cond.end.931

cond.false.922:                                   ; preds = %cond.false.908
  %208 = load %struct.image*, %struct.image** %img.addr, align 8
  %width923 = getelementptr inbounds %struct.image, %struct.image* %208, i32 0, i32 11
  %209 = load i32, i32* %width923, align 4
  %conv924 = trunc i32 %209 to i16
  %conv925 = zext i16 %conv924 to i32
  %mul926 = mul nsw i32 16, %conv925
  %sub927 = sub nsw i32 %mul926, -32768
  %conv928 = trunc i32 %sub927 to i16
  %conv929 = sext i16 %conv928 to i32
  %add930 = add nsw i32 %conv929, -32768
  br label %cond.end.931

cond.end.931:                                     ; preds = %cond.false.922, %cond.true.915
  %cond932 = phi i32 [ %conv921, %cond.true.915 ], [ %add930, %cond.false.922 ]
  %conv933 = sext i32 %cond932 to i64
  store i64 %conv933, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.934:                                   ; preds = %cond.true.608
  %210 = load %struct.image*, %struct.image** %img.addr, align 8
  %width935 = getelementptr inbounds %struct.image, %struct.image* %210, i32 0, i32 11
  %211 = load i32, i32* %width935, align 4
  %mul936 = mul nsw i32 0, %211
  %conv937 = sext i32 %mul936 to i64
  %add938 = add i64 %conv937, 16
  %mul939 = mul i64 0, %add938
  %sub940 = sub i64 %mul939, 1
  %cmp941 = icmp ult i64 %sub940, 0
  br i1 %cmp941, label %cond.true.943, label %cond.false.966

cond.true.943:                                    ; preds = %cond.false.934
  %212 = load %struct.image*, %struct.image** %img.addr, align 8
  %width944 = getelementptr inbounds %struct.image, %struct.image* %212, i32 0, i32 11
  %213 = load i32, i32* %width944, align 4
  %mul945 = mul nsw i32 0, %213
  %conv946 = sext i32 %mul945 to i64
  %add947 = add i64 %conv946, 16
  %mul948 = mul i64 0, %add947
  %add949 = add i64 %mul948, 0
  %neg950 = xor i64 %add949, -1
  %cmp951 = icmp eq i64 %neg950, -1
  %conv952 = zext i1 %cmp951 to i32
  %sub953 = sub nsw i32 0, %conv952
  %conv954 = sext i32 %sub953 to i64
  %214 = load %struct.image*, %struct.image** %img.addr, align 8
  %width955 = getelementptr inbounds %struct.image, %struct.image* %214, i32 0, i32 11
  %215 = load i32, i32* %width955, align 4
  %mul956 = mul nsw i32 0, %215
  %conv957 = sext i32 %mul956 to i64
  %add958 = add i64 %conv957, 16
  %mul959 = mul i64 0, %add958
  %add960 = add i64 %mul959, 1
  %shl961 = shl i64 %add960, 62
  %sub962 = sub i64 %shl961, 1
  %mul963 = mul i64 %sub962, 2
  %add964 = add i64 %mul963, 1
  %sub965 = sub i64 %conv954, %add964
  br label %cond.end.973

cond.false.966:                                   ; preds = %cond.false.934
  %216 = load %struct.image*, %struct.image** %img.addr, align 8
  %width967 = getelementptr inbounds %struct.image, %struct.image* %216, i32 0, i32 11
  %217 = load i32, i32* %width967, align 4
  %mul968 = mul nsw i32 0, %217
  %conv969 = sext i32 %mul968 to i64
  %add970 = add i64 %conv969, 16
  %mul971 = mul i64 0, %add970
  %add972 = add i64 %mul971, 0
  br label %cond.end.973

cond.end.973:                                     ; preds = %cond.false.966, %cond.true.943
  %cond974 = phi i64 [ %sub965, %cond.true.943 ], [ %add972, %cond.false.966 ]
  %cmp975 = icmp eq i64 %cond974, 0
  br i1 %cmp975, label %land.lhs.true.977, label %lor.lhs.false.981

land.lhs.true.977:                                ; preds = %cond.end.973
  %218 = load %struct.image*, %struct.image** %img.addr, align 8
  %width978 = getelementptr inbounds %struct.image, %struct.image* %218, i32 0, i32 11
  %219 = load i32, i32* %width978, align 4
  %cmp979 = icmp slt i32 %219, 0
  br i1 %cmp979, label %cond.true.1177, label %lor.lhs.false.981

lor.lhs.false.981:                                ; preds = %land.lhs.true.977, %cond.end.973
  %220 = load %struct.image*, %struct.image** %img.addr, align 8
  %width982 = getelementptr inbounds %struct.image, %struct.image* %220, i32 0, i32 11
  %221 = load i32, i32* %width982, align 4
  %cmp983 = icmp slt i32 %221, 0
  br i1 %cmp983, label %cond.true.985, label %cond.false.1071

cond.true.985:                                    ; preds = %lor.lhs.false.981
  br i1 false, label %cond.true.986, label %cond.false.1020

cond.true.986:                                    ; preds = %cond.true.985
  %222 = load %struct.image*, %struct.image** %img.addr, align 8
  %width987 = getelementptr inbounds %struct.image, %struct.image* %222, i32 0, i32 11
  %223 = load i32, i32* %width987, align 4
  %mul988 = mul nsw i32 0, %223
  %conv989 = sext i32 %mul988 to i64
  %add990 = add i64 %conv989, 16
  %mul991 = mul i64 0, %add990
  %sub992 = sub i64 %mul991, 1
  %cmp993 = icmp ult i64 %sub992, 0
  br i1 %cmp993, label %cond.true.995, label %cond.false.1006

cond.true.995:                                    ; preds = %cond.true.986
  %224 = load %struct.image*, %struct.image** %img.addr, align 8
  %width996 = getelementptr inbounds %struct.image, %struct.image* %224, i32 0, i32 11
  %225 = load i32, i32* %width996, align 4
  %mul997 = mul nsw i32 0, %225
  %conv998 = sext i32 %mul997 to i64
  %add999 = add i64 %conv998, 16
  %mul1000 = mul i64 0, %add999
  %add1001 = add i64 %mul1000, 1
  %shl1002 = shl i64 %add1001, 62
  %sub1003 = sub i64 %shl1002, 1
  %mul1004 = mul i64 %sub1003, 2
  %add1005 = add i64 %mul1004, 1
  br label %cond.end.1013

cond.false.1006:                                  ; preds = %cond.true.986
  %226 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1007 = getelementptr inbounds %struct.image, %struct.image* %226, i32 0, i32 11
  %227 = load i32, i32* %width1007, align 4
  %mul1008 = mul nsw i32 0, %227
  %conv1009 = sext i32 %mul1008 to i64
  %add1010 = add i64 %conv1009, 16
  %mul1011 = mul i64 0, %add1010
  %sub1012 = sub i64 %mul1011, 1
  br label %cond.end.1013

cond.end.1013:                                    ; preds = %cond.false.1006, %cond.true.995
  %cond1014 = phi i64 [ %add1005, %cond.true.995 ], [ %sub1012, %cond.false.1006 ]
  %228 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1015 = getelementptr inbounds %struct.image, %struct.image* %228, i32 0, i32 11
  %229 = load i32, i32* %width1015, align 4
  %conv1016 = sext i32 %229 to i64
  %div1017 = udiv i64 %cond1014, %conv1016
  %cmp1018 = icmp ult i64 16, %div1017
  br i1 %cmp1018, label %cond.true.1177, label %lor.lhs.false.1157

cond.false.1020:                                  ; preds = %cond.true.985
  %230 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1021 = getelementptr inbounds %struct.image, %struct.image* %230, i32 0, i32 11
  %231 = load i32, i32* %width1021, align 4
  %cmp1022 = icmp eq i32 %231, -1
  br i1 %cmp1022, label %cond.true.1024, label %cond.false.1025

cond.true.1024:                                   ; preds = %cond.false.1020
  br i1 false, label %cond.true.1177, label %lor.lhs.false.1157

cond.false.1025:                                  ; preds = %cond.false.1020
  %232 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1026 = getelementptr inbounds %struct.image, %struct.image* %232, i32 0, i32 11
  %233 = load i32, i32* %width1026, align 4
  %mul1027 = mul nsw i32 0, %233
  %conv1028 = sext i32 %mul1027 to i64
  %add1029 = add i64 %conv1028, 16
  %mul1030 = mul i64 0, %add1029
  %sub1031 = sub i64 %mul1030, 1
  %cmp1032 = icmp ult i64 %sub1031, 0
  br i1 %cmp1032, label %cond.true.1034, label %cond.false.1057

cond.true.1034:                                   ; preds = %cond.false.1025
  %234 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1035 = getelementptr inbounds %struct.image, %struct.image* %234, i32 0, i32 11
  %235 = load i32, i32* %width1035, align 4
  %mul1036 = mul nsw i32 0, %235
  %conv1037 = sext i32 %mul1036 to i64
  %add1038 = add i64 %conv1037, 16
  %mul1039 = mul i64 0, %add1038
  %add1040 = add i64 %mul1039, 0
  %neg1041 = xor i64 %add1040, -1
  %cmp1042 = icmp eq i64 %neg1041, -1
  %conv1043 = zext i1 %cmp1042 to i32
  %sub1044 = sub nsw i32 0, %conv1043
  %conv1045 = sext i32 %sub1044 to i64
  %236 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1046 = getelementptr inbounds %struct.image, %struct.image* %236, i32 0, i32 11
  %237 = load i32, i32* %width1046, align 4
  %mul1047 = mul nsw i32 0, %237
  %conv1048 = sext i32 %mul1047 to i64
  %add1049 = add i64 %conv1048, 16
  %mul1050 = mul i64 0, %add1049
  %add1051 = add i64 %mul1050, 1
  %shl1052 = shl i64 %add1051, 62
  %sub1053 = sub i64 %shl1052, 1
  %mul1054 = mul i64 %sub1053, 2
  %add1055 = add i64 %mul1054, 1
  %sub1056 = sub i64 %conv1045, %add1055
  br label %cond.end.1064

cond.false.1057:                                  ; preds = %cond.false.1025
  %238 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1058 = getelementptr inbounds %struct.image, %struct.image* %238, i32 0, i32 11
  %239 = load i32, i32* %width1058, align 4
  %mul1059 = mul nsw i32 0, %239
  %conv1060 = sext i32 %mul1059 to i64
  %add1061 = add i64 %conv1060, 16
  %mul1062 = mul i64 0, %add1061
  %add1063 = add i64 %mul1062, 0
  br label %cond.end.1064

cond.end.1064:                                    ; preds = %cond.false.1057, %cond.true.1034
  %cond1065 = phi i64 [ %sub1056, %cond.true.1034 ], [ %add1063, %cond.false.1057 ]
  %240 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1066 = getelementptr inbounds %struct.image, %struct.image* %240, i32 0, i32 11
  %241 = load i32, i32* %width1066, align 4
  %conv1067 = sext i32 %241 to i64
  %div1068 = udiv i64 %cond1065, %conv1067
  %cmp1069 = icmp ult i64 %div1068, 16
  br i1 %cmp1069, label %cond.true.1177, label %lor.lhs.false.1157

cond.false.1071:                                  ; preds = %lor.lhs.false.981
  %242 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1072 = getelementptr inbounds %struct.image, %struct.image* %242, i32 0, i32 11
  %243 = load i32, i32* %width1072, align 4
  %cmp1073 = icmp eq i32 %243, 0
  br i1 %cmp1073, label %cond.true.1075, label %cond.false.1076

cond.true.1075:                                   ; preds = %cond.false.1071
  br i1 false, label %cond.true.1177, label %lor.lhs.false.1157

cond.false.1076:                                  ; preds = %cond.false.1071
  br i1 false, label %cond.true.1077, label %cond.false.1123

cond.true.1077:                                   ; preds = %cond.false.1076
  %244 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1078 = getelementptr inbounds %struct.image, %struct.image* %244, i32 0, i32 11
  %245 = load i32, i32* %width1078, align 4
  %mul1079 = mul nsw i32 0, %245
  %conv1080 = sext i32 %mul1079 to i64
  %add1081 = add i64 %conv1080, 16
  %mul1082 = mul i64 0, %add1081
  %sub1083 = sub i64 %mul1082, 1
  %cmp1084 = icmp ult i64 %sub1083, 0
  br i1 %cmp1084, label %cond.true.1086, label %cond.false.1109

cond.true.1086:                                   ; preds = %cond.true.1077
  %246 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1087 = getelementptr inbounds %struct.image, %struct.image* %246, i32 0, i32 11
  %247 = load i32, i32* %width1087, align 4
  %mul1088 = mul nsw i32 0, %247
  %conv1089 = sext i32 %mul1088 to i64
  %add1090 = add i64 %conv1089, 16
  %mul1091 = mul i64 0, %add1090
  %add1092 = add i64 %mul1091, 0
  %neg1093 = xor i64 %add1092, -1
  %cmp1094 = icmp eq i64 %neg1093, -1
  %conv1095 = zext i1 %cmp1094 to i32
  %sub1096 = sub nsw i32 0, %conv1095
  %conv1097 = sext i32 %sub1096 to i64
  %248 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1098 = getelementptr inbounds %struct.image, %struct.image* %248, i32 0, i32 11
  %249 = load i32, i32* %width1098, align 4
  %mul1099 = mul nsw i32 0, %249
  %conv1100 = sext i32 %mul1099 to i64
  %add1101 = add i64 %conv1100, 16
  %mul1102 = mul i64 0, %add1101
  %add1103 = add i64 %mul1102, 1
  %shl1104 = shl i64 %add1103, 62
  %sub1105 = sub i64 %shl1104, 1
  %mul1106 = mul i64 %sub1105, 2
  %add1107 = add i64 %mul1106, 1
  %sub1108 = sub i64 %conv1097, %add1107
  br label %cond.end.1116

cond.false.1109:                                  ; preds = %cond.true.1077
  %250 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1110 = getelementptr inbounds %struct.image, %struct.image* %250, i32 0, i32 11
  %251 = load i32, i32* %width1110, align 4
  %mul1111 = mul nsw i32 0, %251
  %conv1112 = sext i32 %mul1111 to i64
  %add1113 = add i64 %conv1112, 16
  %mul1114 = mul i64 0, %add1113
  %add1115 = add i64 %mul1114, 0
  br label %cond.end.1116

cond.end.1116:                                    ; preds = %cond.false.1109, %cond.true.1086
  %cond1117 = phi i64 [ %sub1108, %cond.true.1086 ], [ %add1115, %cond.false.1109 ]
  %252 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1118 = getelementptr inbounds %struct.image, %struct.image* %252, i32 0, i32 11
  %253 = load i32, i32* %width1118, align 4
  %conv1119 = sext i32 %253 to i64
  %div1120 = udiv i64 %cond1117, %conv1119
  %cmp1121 = icmp ult i64 16, %div1120
  br i1 %cmp1121, label %cond.true.1177, label %lor.lhs.false.1157

cond.false.1123:                                  ; preds = %cond.false.1076
  %254 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1124 = getelementptr inbounds %struct.image, %struct.image* %254, i32 0, i32 11
  %255 = load i32, i32* %width1124, align 4
  %mul1125 = mul nsw i32 0, %255
  %conv1126 = sext i32 %mul1125 to i64
  %add1127 = add i64 %conv1126, 16
  %mul1128 = mul i64 0, %add1127
  %sub1129 = sub i64 %mul1128, 1
  %cmp1130 = icmp ult i64 %sub1129, 0
  br i1 %cmp1130, label %cond.true.1132, label %cond.false.1143

cond.true.1132:                                   ; preds = %cond.false.1123
  %256 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1133 = getelementptr inbounds %struct.image, %struct.image* %256, i32 0, i32 11
  %257 = load i32, i32* %width1133, align 4
  %mul1134 = mul nsw i32 0, %257
  %conv1135 = sext i32 %mul1134 to i64
  %add1136 = add i64 %conv1135, 16
  %mul1137 = mul i64 0, %add1136
  %add1138 = add i64 %mul1137, 1
  %shl1139 = shl i64 %add1138, 62
  %sub1140 = sub i64 %shl1139, 1
  %mul1141 = mul i64 %sub1140, 2
  %add1142 = add i64 %mul1141, 1
  br label %cond.end.1150

cond.false.1143:                                  ; preds = %cond.false.1123
  %258 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1144 = getelementptr inbounds %struct.image, %struct.image* %258, i32 0, i32 11
  %259 = load i32, i32* %width1144, align 4
  %mul1145 = mul nsw i32 0, %259
  %conv1146 = sext i32 %mul1145 to i64
  %add1147 = add i64 %conv1146, 16
  %mul1148 = mul i64 0, %add1147
  %sub1149 = sub i64 %mul1148, 1
  br label %cond.end.1150

cond.end.1150:                                    ; preds = %cond.false.1143, %cond.true.1132
  %cond1151 = phi i64 [ %add1142, %cond.true.1132 ], [ %sub1149, %cond.false.1143 ]
  %260 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1152 = getelementptr inbounds %struct.image, %struct.image* %260, i32 0, i32 11
  %261 = load i32, i32* %width1152, align 4
  %conv1153 = sext i32 %261 to i64
  %div1154 = udiv i64 %cond1151, %conv1153
  %cmp1155 = icmp ult i64 %div1154, 16
  br i1 %cmp1155, label %cond.true.1177, label %lor.lhs.false.1157

lor.lhs.false.1157:                               ; preds = %cond.end.1150, %cond.end.1116, %cond.true.1075, %cond.end.1064, %cond.true.1024, %cond.end.1013
  %262 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1158 = getelementptr inbounds %struct.image, %struct.image* %262, i32 0, i32 11
  %263 = load i32, i32* %width1158, align 4
  %conv1159 = sext i32 %263 to i64
  %mul1160 = mul i64 16, %conv1159
  %mul1161 = mul i64 0, %mul1160
  %sub1162 = sub i64 %mul1161, 1
  %cmp1163 = icmp ult i64 %sub1162, 0
  br i1 %cmp1163, label %land.lhs.true.1165, label %lor.lhs.false.1171

land.lhs.true.1165:                               ; preds = %lor.lhs.false.1157
  %264 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1166 = getelementptr inbounds %struct.image, %struct.image* %264, i32 0, i32 11
  %265 = load i32, i32* %width1166, align 4
  %conv1167 = sext i32 %265 to i64
  %mul1168 = mul i64 16, %conv1167
  %cmp1169 = icmp ult i64 %mul1168, -32768
  br i1 %cmp1169, label %cond.true.1177, label %lor.lhs.false.1171

lor.lhs.false.1171:                               ; preds = %land.lhs.true.1165, %lor.lhs.false.1157
  %266 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1172 = getelementptr inbounds %struct.image, %struct.image* %266, i32 0, i32 11
  %267 = load i32, i32* %width1172, align 4
  %conv1173 = sext i32 %267 to i64
  %mul1174 = mul i64 16, %conv1173
  %cmp1175 = icmp ult i64 32767, %mul1174
  br i1 %cmp1175, label %cond.true.1177, label %cond.false.1203

cond.true.1177:                                   ; preds = %lor.lhs.false.1171, %land.lhs.true.1165, %cond.end.1150, %cond.end.1116, %cond.true.1075, %cond.end.1064, %cond.true.1024, %cond.end.1013, %land.lhs.true.977
  %268 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1178 = getelementptr inbounds %struct.image, %struct.image* %268, i32 0, i32 11
  %269 = load i32, i32* %width1178, align 4
  %conv1179 = trunc i32 %269 to i16
  %conv1180 = zext i16 %conv1179 to i32
  %mul1181 = mul nsw i32 16, %conv1180
  %cmp1182 = icmp sle i32 %mul1181, 32767
  br i1 %cmp1182, label %cond.true.1184, label %cond.false.1191

cond.true.1184:                                   ; preds = %cond.true.1177
  %270 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1185 = getelementptr inbounds %struct.image, %struct.image* %270, i32 0, i32 11
  %271 = load i32, i32* %width1185, align 4
  %conv1186 = trunc i32 %271 to i16
  %conv1187 = zext i16 %conv1186 to i32
  %mul1188 = mul nsw i32 16, %conv1187
  %conv1189 = trunc i32 %mul1188 to i16
  %conv1190 = sext i16 %conv1189 to i32
  br label %cond.end.1200

cond.false.1191:                                  ; preds = %cond.true.1177
  %272 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1192 = getelementptr inbounds %struct.image, %struct.image* %272, i32 0, i32 11
  %273 = load i32, i32* %width1192, align 4
  %conv1193 = trunc i32 %273 to i16
  %conv1194 = zext i16 %conv1193 to i32
  %mul1195 = mul nsw i32 16, %conv1194
  %sub1196 = sub nsw i32 %mul1195, -32768
  %conv1197 = trunc i32 %sub1196 to i16
  %conv1198 = sext i16 %conv1197 to i32
  %add1199 = add nsw i32 %conv1198, -32768
  br label %cond.end.1200

cond.end.1200:                                    ; preds = %cond.false.1191, %cond.true.1184
  %cond1201 = phi i32 [ %conv1190, %cond.true.1184 ], [ %add1199, %cond.false.1191 ]
  %conv1202 = sext i32 %cond1201 to i64
  store i64 %conv1202, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.1203:                                  ; preds = %lor.lhs.false.1171
  %274 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1204 = getelementptr inbounds %struct.image, %struct.image* %274, i32 0, i32 11
  %275 = load i32, i32* %width1204, align 4
  %conv1205 = trunc i32 %275 to i16
  %conv1206 = zext i16 %conv1205 to i32
  %mul1207 = mul nsw i32 16, %conv1206
  %cmp1208 = icmp sle i32 %mul1207, 32767
  br i1 %cmp1208, label %cond.true.1210, label %cond.false.1217

cond.true.1210:                                   ; preds = %cond.false.1203
  %276 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1211 = getelementptr inbounds %struct.image, %struct.image* %276, i32 0, i32 11
  %277 = load i32, i32* %width1211, align 4
  %conv1212 = trunc i32 %277 to i16
  %conv1213 = zext i16 %conv1212 to i32
  %mul1214 = mul nsw i32 16, %conv1213
  %conv1215 = trunc i32 %mul1214 to i16
  %conv1216 = sext i16 %conv1215 to i32
  br label %cond.end.1226

cond.false.1217:                                  ; preds = %cond.false.1203
  %278 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1218 = getelementptr inbounds %struct.image, %struct.image* %278, i32 0, i32 11
  %279 = load i32, i32* %width1218, align 4
  %conv1219 = trunc i32 %279 to i16
  %conv1220 = zext i16 %conv1219 to i32
  %mul1221 = mul nsw i32 16, %conv1220
  %sub1222 = sub nsw i32 %mul1221, -32768
  %conv1223 = trunc i32 %sub1222 to i16
  %conv1224 = sext i16 %conv1223 to i32
  %add1225 = add nsw i32 %conv1224, -32768
  br label %cond.end.1226

cond.end.1226:                                    ; preds = %cond.false.1217, %cond.true.1210
  %cond1227 = phi i32 [ %conv1216, %cond.true.1210 ], [ %add1225, %cond.false.1217 ]
  %conv1228 = sext i32 %cond1227 to i64
  store i64 %conv1228, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.1229:                                  ; preds = %cond.false.607
  br i1 false, label %cond.true.1230, label %cond.false.1753

cond.true.1230:                                   ; preds = %cond.false.1229
  br i1 false, label %cond.true.1231, label %cond.false.1478

cond.true.1231:                                   ; preds = %cond.true.1230
  %280 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1232 = getelementptr inbounds %struct.image, %struct.image* %280, i32 0, i32 11
  %281 = load i32, i32* %width1232, align 4
  %mul1233 = mul nsw i32 0, %281
  %add1234 = add nsw i32 %mul1233, 16
  %mul1235 = mul nsw i32 0, %add1234
  %sub1236 = sub nsw i32 %mul1235, 1
  %cmp1237 = icmp slt i32 %sub1236, 0
  br i1 %cmp1237, label %cond.true.1239, label %cond.false.1259

cond.true.1239:                                   ; preds = %cond.true.1231
  %282 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1240 = getelementptr inbounds %struct.image, %struct.image* %282, i32 0, i32 11
  %283 = load i32, i32* %width1240, align 4
  %mul1241 = mul nsw i32 0, %283
  %add1242 = add nsw i32 %mul1241, 16
  %mul1243 = mul nsw i32 0, %add1242
  %add1244 = add nsw i32 %mul1243, 0
  %neg1245 = xor i32 %add1244, -1
  %cmp1246 = icmp eq i32 %neg1245, -1
  %conv1247 = zext i1 %cmp1246 to i32
  %sub1248 = sub nsw i32 0, %conv1247
  %284 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1249 = getelementptr inbounds %struct.image, %struct.image* %284, i32 0, i32 11
  %285 = load i32, i32* %width1249, align 4
  %mul1250 = mul nsw i32 0, %285
  %add1251 = add nsw i32 %mul1250, 16
  %mul1252 = mul nsw i32 0, %add1251
  %add1253 = add nsw i32 %mul1252, 1
  %shl1254 = shl i32 %add1253, 30
  %sub1255 = sub nsw i32 %shl1254, 1
  %mul1256 = mul nsw i32 %sub1255, 2
  %add1257 = add nsw i32 %mul1256, 1
  %sub1258 = sub nsw i32 %sub1248, %add1257
  br label %cond.end.1265

cond.false.1259:                                  ; preds = %cond.true.1231
  %286 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1260 = getelementptr inbounds %struct.image, %struct.image* %286, i32 0, i32 11
  %287 = load i32, i32* %width1260, align 4
  %mul1261 = mul nsw i32 0, %287
  %add1262 = add nsw i32 %mul1261, 16
  %mul1263 = mul nsw i32 0, %add1262
  %add1264 = add nsw i32 %mul1263, 0
  br label %cond.end.1265

cond.end.1265:                                    ; preds = %cond.false.1259, %cond.true.1239
  %cond1266 = phi i32 [ %sub1258, %cond.true.1239 ], [ %add1264, %cond.false.1259 ]
  %cmp1267 = icmp eq i32 %cond1266, 0
  br i1 %cmp1267, label %land.lhs.true.1269, label %lor.lhs.false.1273

land.lhs.true.1269:                               ; preds = %cond.end.1265
  %288 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1270 = getelementptr inbounds %struct.image, %struct.image* %288, i32 0, i32 11
  %289 = load i32, i32* %width1270, align 4
  %cmp1271 = icmp slt i32 %289, 0
  br i1 %cmp1271, label %cond.true.1446, label %lor.lhs.false.1273

lor.lhs.false.1273:                               ; preds = %land.lhs.true.1269, %cond.end.1265
  %290 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1274 = getelementptr inbounds %struct.image, %struct.image* %290, i32 0, i32 11
  %291 = load i32, i32* %width1274, align 4
  %cmp1275 = icmp slt i32 %291, 0
  br i1 %cmp1275, label %cond.true.1277, label %cond.false.1353

cond.true.1277:                                   ; preds = %lor.lhs.false.1273
  br i1 false, label %cond.true.1278, label %cond.false.1308

cond.true.1278:                                   ; preds = %cond.true.1277
  %292 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1279 = getelementptr inbounds %struct.image, %struct.image* %292, i32 0, i32 11
  %293 = load i32, i32* %width1279, align 4
  %mul1280 = mul nsw i32 0, %293
  %add1281 = add nsw i32 %mul1280, 16
  %mul1282 = mul nsw i32 0, %add1281
  %sub1283 = sub nsw i32 %mul1282, 1
  %cmp1284 = icmp slt i32 %sub1283, 0
  br i1 %cmp1284, label %cond.true.1286, label %cond.false.1296

cond.true.1286:                                   ; preds = %cond.true.1278
  %294 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1287 = getelementptr inbounds %struct.image, %struct.image* %294, i32 0, i32 11
  %295 = load i32, i32* %width1287, align 4
  %mul1288 = mul nsw i32 0, %295
  %add1289 = add nsw i32 %mul1288, 16
  %mul1290 = mul nsw i32 0, %add1289
  %add1291 = add nsw i32 %mul1290, 1
  %shl1292 = shl i32 %add1291, 30
  %sub1293 = sub nsw i32 %shl1292, 1
  %mul1294 = mul nsw i32 %sub1293, 2
  %add1295 = add nsw i32 %mul1294, 1
  br label %cond.end.1302

cond.false.1296:                                  ; preds = %cond.true.1278
  %296 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1297 = getelementptr inbounds %struct.image, %struct.image* %296, i32 0, i32 11
  %297 = load i32, i32* %width1297, align 4
  %mul1298 = mul nsw i32 0, %297
  %add1299 = add nsw i32 %mul1298, 16
  %mul1300 = mul nsw i32 0, %add1299
  %sub1301 = sub nsw i32 %mul1300, 1
  br label %cond.end.1302

cond.end.1302:                                    ; preds = %cond.false.1296, %cond.true.1286
  %cond1303 = phi i32 [ %add1295, %cond.true.1286 ], [ %sub1301, %cond.false.1296 ]
  %298 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1304 = getelementptr inbounds %struct.image, %struct.image* %298, i32 0, i32 11
  %299 = load i32, i32* %width1304, align 4
  %div1305 = sdiv i32 %cond1303, %299
  %cmp1306 = icmp slt i32 16, %div1305
  br i1 %cmp1306, label %cond.true.1446, label %lor.lhs.false.1429

cond.false.1308:                                  ; preds = %cond.true.1277
  %300 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1309 = getelementptr inbounds %struct.image, %struct.image* %300, i32 0, i32 11
  %301 = load i32, i32* %width1309, align 4
  %cmp1310 = icmp eq i32 %301, -1
  br i1 %cmp1310, label %cond.true.1312, label %cond.false.1313

cond.true.1312:                                   ; preds = %cond.false.1308
  br i1 false, label %cond.true.1446, label %lor.lhs.false.1429

cond.false.1313:                                  ; preds = %cond.false.1308
  %302 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1314 = getelementptr inbounds %struct.image, %struct.image* %302, i32 0, i32 11
  %303 = load i32, i32* %width1314, align 4
  %mul1315 = mul nsw i32 0, %303
  %add1316 = add nsw i32 %mul1315, 16
  %mul1317 = mul nsw i32 0, %add1316
  %sub1318 = sub nsw i32 %mul1317, 1
  %cmp1319 = icmp slt i32 %sub1318, 0
  br i1 %cmp1319, label %cond.true.1321, label %cond.false.1341

cond.true.1321:                                   ; preds = %cond.false.1313
  %304 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1322 = getelementptr inbounds %struct.image, %struct.image* %304, i32 0, i32 11
  %305 = load i32, i32* %width1322, align 4
  %mul1323 = mul nsw i32 0, %305
  %add1324 = add nsw i32 %mul1323, 16
  %mul1325 = mul nsw i32 0, %add1324
  %add1326 = add nsw i32 %mul1325, 0
  %neg1327 = xor i32 %add1326, -1
  %cmp1328 = icmp eq i32 %neg1327, -1
  %conv1329 = zext i1 %cmp1328 to i32
  %sub1330 = sub nsw i32 0, %conv1329
  %306 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1331 = getelementptr inbounds %struct.image, %struct.image* %306, i32 0, i32 11
  %307 = load i32, i32* %width1331, align 4
  %mul1332 = mul nsw i32 0, %307
  %add1333 = add nsw i32 %mul1332, 16
  %mul1334 = mul nsw i32 0, %add1333
  %add1335 = add nsw i32 %mul1334, 1
  %shl1336 = shl i32 %add1335, 30
  %sub1337 = sub nsw i32 %shl1336, 1
  %mul1338 = mul nsw i32 %sub1337, 2
  %add1339 = add nsw i32 %mul1338, 1
  %sub1340 = sub nsw i32 %sub1330, %add1339
  br label %cond.end.1347

cond.false.1341:                                  ; preds = %cond.false.1313
  %308 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1342 = getelementptr inbounds %struct.image, %struct.image* %308, i32 0, i32 11
  %309 = load i32, i32* %width1342, align 4
  %mul1343 = mul nsw i32 0, %309
  %add1344 = add nsw i32 %mul1343, 16
  %mul1345 = mul nsw i32 0, %add1344
  %add1346 = add nsw i32 %mul1345, 0
  br label %cond.end.1347

cond.end.1347:                                    ; preds = %cond.false.1341, %cond.true.1321
  %cond1348 = phi i32 [ %sub1340, %cond.true.1321 ], [ %add1346, %cond.false.1341 ]
  %310 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1349 = getelementptr inbounds %struct.image, %struct.image* %310, i32 0, i32 11
  %311 = load i32, i32* %width1349, align 4
  %div1350 = sdiv i32 %cond1348, %311
  %cmp1351 = icmp slt i32 %div1350, 16
  br i1 %cmp1351, label %cond.true.1446, label %lor.lhs.false.1429

cond.false.1353:                                  ; preds = %lor.lhs.false.1273
  %312 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1354 = getelementptr inbounds %struct.image, %struct.image* %312, i32 0, i32 11
  %313 = load i32, i32* %width1354, align 4
  %cmp1355 = icmp eq i32 %313, 0
  br i1 %cmp1355, label %cond.true.1357, label %cond.false.1358

cond.true.1357:                                   ; preds = %cond.false.1353
  br i1 false, label %cond.true.1446, label %lor.lhs.false.1429

cond.false.1358:                                  ; preds = %cond.false.1353
  br i1 false, label %cond.true.1359, label %cond.false.1399

cond.true.1359:                                   ; preds = %cond.false.1358
  %314 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1360 = getelementptr inbounds %struct.image, %struct.image* %314, i32 0, i32 11
  %315 = load i32, i32* %width1360, align 4
  %mul1361 = mul nsw i32 0, %315
  %add1362 = add nsw i32 %mul1361, 16
  %mul1363 = mul nsw i32 0, %add1362
  %sub1364 = sub nsw i32 %mul1363, 1
  %cmp1365 = icmp slt i32 %sub1364, 0
  br i1 %cmp1365, label %cond.true.1367, label %cond.false.1387

cond.true.1367:                                   ; preds = %cond.true.1359
  %316 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1368 = getelementptr inbounds %struct.image, %struct.image* %316, i32 0, i32 11
  %317 = load i32, i32* %width1368, align 4
  %mul1369 = mul nsw i32 0, %317
  %add1370 = add nsw i32 %mul1369, 16
  %mul1371 = mul nsw i32 0, %add1370
  %add1372 = add nsw i32 %mul1371, 0
  %neg1373 = xor i32 %add1372, -1
  %cmp1374 = icmp eq i32 %neg1373, -1
  %conv1375 = zext i1 %cmp1374 to i32
  %sub1376 = sub nsw i32 0, %conv1375
  %318 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1377 = getelementptr inbounds %struct.image, %struct.image* %318, i32 0, i32 11
  %319 = load i32, i32* %width1377, align 4
  %mul1378 = mul nsw i32 0, %319
  %add1379 = add nsw i32 %mul1378, 16
  %mul1380 = mul nsw i32 0, %add1379
  %add1381 = add nsw i32 %mul1380, 1
  %shl1382 = shl i32 %add1381, 30
  %sub1383 = sub nsw i32 %shl1382, 1
  %mul1384 = mul nsw i32 %sub1383, 2
  %add1385 = add nsw i32 %mul1384, 1
  %sub1386 = sub nsw i32 %sub1376, %add1385
  br label %cond.end.1393

cond.false.1387:                                  ; preds = %cond.true.1359
  %320 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1388 = getelementptr inbounds %struct.image, %struct.image* %320, i32 0, i32 11
  %321 = load i32, i32* %width1388, align 4
  %mul1389 = mul nsw i32 0, %321
  %add1390 = add nsw i32 %mul1389, 16
  %mul1391 = mul nsw i32 0, %add1390
  %add1392 = add nsw i32 %mul1391, 0
  br label %cond.end.1393

cond.end.1393:                                    ; preds = %cond.false.1387, %cond.true.1367
  %cond1394 = phi i32 [ %sub1386, %cond.true.1367 ], [ %add1392, %cond.false.1387 ]
  %322 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1395 = getelementptr inbounds %struct.image, %struct.image* %322, i32 0, i32 11
  %323 = load i32, i32* %width1395, align 4
  %div1396 = sdiv i32 %cond1394, %323
  %cmp1397 = icmp slt i32 16, %div1396
  br i1 %cmp1397, label %cond.true.1446, label %lor.lhs.false.1429

cond.false.1399:                                  ; preds = %cond.false.1358
  %324 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1400 = getelementptr inbounds %struct.image, %struct.image* %324, i32 0, i32 11
  %325 = load i32, i32* %width1400, align 4
  %mul1401 = mul nsw i32 0, %325
  %add1402 = add nsw i32 %mul1401, 16
  %mul1403 = mul nsw i32 0, %add1402
  %sub1404 = sub nsw i32 %mul1403, 1
  %cmp1405 = icmp slt i32 %sub1404, 0
  br i1 %cmp1405, label %cond.true.1407, label %cond.false.1417

cond.true.1407:                                   ; preds = %cond.false.1399
  %326 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1408 = getelementptr inbounds %struct.image, %struct.image* %326, i32 0, i32 11
  %327 = load i32, i32* %width1408, align 4
  %mul1409 = mul nsw i32 0, %327
  %add1410 = add nsw i32 %mul1409, 16
  %mul1411 = mul nsw i32 0, %add1410
  %add1412 = add nsw i32 %mul1411, 1
  %shl1413 = shl i32 %add1412, 30
  %sub1414 = sub nsw i32 %shl1413, 1
  %mul1415 = mul nsw i32 %sub1414, 2
  %add1416 = add nsw i32 %mul1415, 1
  br label %cond.end.1423

cond.false.1417:                                  ; preds = %cond.false.1399
  %328 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1418 = getelementptr inbounds %struct.image, %struct.image* %328, i32 0, i32 11
  %329 = load i32, i32* %width1418, align 4
  %mul1419 = mul nsw i32 0, %329
  %add1420 = add nsw i32 %mul1419, 16
  %mul1421 = mul nsw i32 0, %add1420
  %sub1422 = sub nsw i32 %mul1421, 1
  br label %cond.end.1423

cond.end.1423:                                    ; preds = %cond.false.1417, %cond.true.1407
  %cond1424 = phi i32 [ %add1416, %cond.true.1407 ], [ %sub1422, %cond.false.1417 ]
  %330 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1425 = getelementptr inbounds %struct.image, %struct.image* %330, i32 0, i32 11
  %331 = load i32, i32* %width1425, align 4
  %div1426 = sdiv i32 %cond1424, %331
  %cmp1427 = icmp slt i32 %div1426, 16
  br i1 %cmp1427, label %cond.true.1446, label %lor.lhs.false.1429

lor.lhs.false.1429:                               ; preds = %cond.end.1423, %cond.end.1393, %cond.true.1357, %cond.end.1347, %cond.true.1312, %cond.end.1302
  %332 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1430 = getelementptr inbounds %struct.image, %struct.image* %332, i32 0, i32 11
  %333 = load i32, i32* %width1430, align 4
  %mul1431 = mul nsw i32 16, %333
  %mul1432 = mul nsw i32 0, %mul1431
  %sub1433 = sub nsw i32 %mul1432, 1
  %cmp1434 = icmp slt i32 %sub1433, 0
  br i1 %cmp1434, label %land.lhs.true.1436, label %lor.lhs.false.1441

land.lhs.true.1436:                               ; preds = %lor.lhs.false.1429
  %334 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1437 = getelementptr inbounds %struct.image, %struct.image* %334, i32 0, i32 11
  %335 = load i32, i32* %width1437, align 4
  %mul1438 = mul nsw i32 16, %335
  %cmp1439 = icmp slt i32 %mul1438, -2147483648
  br i1 %cmp1439, label %cond.true.1446, label %lor.lhs.false.1441

lor.lhs.false.1441:                               ; preds = %land.lhs.true.1436, %lor.lhs.false.1429
  %336 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1442 = getelementptr inbounds %struct.image, %struct.image* %336, i32 0, i32 11
  %337 = load i32, i32* %width1442, align 4
  %mul1443 = mul nsw i32 16, %337
  %cmp1444 = icmp slt i32 2147483647, %mul1443
  br i1 %cmp1444, label %cond.true.1446, label %cond.false.1462

cond.true.1446:                                   ; preds = %lor.lhs.false.1441, %land.lhs.true.1436, %cond.end.1423, %cond.end.1393, %cond.true.1357, %cond.end.1347, %cond.true.1312, %cond.end.1302, %land.lhs.true.1269
  %338 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1447 = getelementptr inbounds %struct.image, %struct.image* %338, i32 0, i32 11
  %339 = load i32, i32* %width1447, align 4
  %mul1448 = mul i32 16, %339
  %cmp1449 = icmp ule i32 %mul1448, 2147483647
  br i1 %cmp1449, label %cond.true.1451, label %cond.false.1454

cond.true.1451:                                   ; preds = %cond.true.1446
  %340 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1452 = getelementptr inbounds %struct.image, %struct.image* %340, i32 0, i32 11
  %341 = load i32, i32* %width1452, align 4
  %mul1453 = mul i32 16, %341
  br label %cond.end.1459

cond.false.1454:                                  ; preds = %cond.true.1446
  %342 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1455 = getelementptr inbounds %struct.image, %struct.image* %342, i32 0, i32 11
  %343 = load i32, i32* %width1455, align 4
  %mul1456 = mul i32 16, %343
  %sub1457 = sub i32 %mul1456, -2147483648
  %add1458 = add nsw i32 %sub1457, -2147483648
  br label %cond.end.1459

cond.end.1459:                                    ; preds = %cond.false.1454, %cond.true.1451
  %cond1460 = phi i32 [ %mul1453, %cond.true.1451 ], [ %add1458, %cond.false.1454 ]
  %conv1461 = sext i32 %cond1460 to i64
  store i64 %conv1461, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.1462:                                  ; preds = %lor.lhs.false.1441
  %344 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1463 = getelementptr inbounds %struct.image, %struct.image* %344, i32 0, i32 11
  %345 = load i32, i32* %width1463, align 4
  %mul1464 = mul i32 16, %345
  %cmp1465 = icmp ule i32 %mul1464, 2147483647
  br i1 %cmp1465, label %cond.true.1467, label %cond.false.1470

cond.true.1467:                                   ; preds = %cond.false.1462
  %346 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1468 = getelementptr inbounds %struct.image, %struct.image* %346, i32 0, i32 11
  %347 = load i32, i32* %width1468, align 4
  %mul1469 = mul i32 16, %347
  br label %cond.end.1475

cond.false.1470:                                  ; preds = %cond.false.1462
  %348 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1471 = getelementptr inbounds %struct.image, %struct.image* %348, i32 0, i32 11
  %349 = load i32, i32* %width1471, align 4
  %mul1472 = mul i32 16, %349
  %sub1473 = sub i32 %mul1472, -2147483648
  %add1474 = add nsw i32 %sub1473, -2147483648
  br label %cond.end.1475

cond.end.1475:                                    ; preds = %cond.false.1470, %cond.true.1467
  %cond1476 = phi i32 [ %mul1469, %cond.true.1467 ], [ %add1474, %cond.false.1470 ]
  %conv1477 = sext i32 %cond1476 to i64
  store i64 %conv1477, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.1478:                                  ; preds = %cond.true.1230
  %350 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1479 = getelementptr inbounds %struct.image, %struct.image* %350, i32 0, i32 11
  %351 = load i32, i32* %width1479, align 4
  %mul1480 = mul nsw i32 0, %351
  %conv1481 = sext i32 %mul1480 to i64
  %add1482 = add i64 %conv1481, 16
  %mul1483 = mul i64 0, %add1482
  %sub1484 = sub i64 %mul1483, 1
  %cmp1485 = icmp ult i64 %sub1484, 0
  br i1 %cmp1485, label %cond.true.1487, label %cond.false.1510

cond.true.1487:                                   ; preds = %cond.false.1478
  %352 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1488 = getelementptr inbounds %struct.image, %struct.image* %352, i32 0, i32 11
  %353 = load i32, i32* %width1488, align 4
  %mul1489 = mul nsw i32 0, %353
  %conv1490 = sext i32 %mul1489 to i64
  %add1491 = add i64 %conv1490, 16
  %mul1492 = mul i64 0, %add1491
  %add1493 = add i64 %mul1492, 0
  %neg1494 = xor i64 %add1493, -1
  %cmp1495 = icmp eq i64 %neg1494, -1
  %conv1496 = zext i1 %cmp1495 to i32
  %sub1497 = sub nsw i32 0, %conv1496
  %conv1498 = sext i32 %sub1497 to i64
  %354 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1499 = getelementptr inbounds %struct.image, %struct.image* %354, i32 0, i32 11
  %355 = load i32, i32* %width1499, align 4
  %mul1500 = mul nsw i32 0, %355
  %conv1501 = sext i32 %mul1500 to i64
  %add1502 = add i64 %conv1501, 16
  %mul1503 = mul i64 0, %add1502
  %add1504 = add i64 %mul1503, 1
  %shl1505 = shl i64 %add1504, 62
  %sub1506 = sub i64 %shl1505, 1
  %mul1507 = mul i64 %sub1506, 2
  %add1508 = add i64 %mul1507, 1
  %sub1509 = sub i64 %conv1498, %add1508
  br label %cond.end.1517

cond.false.1510:                                  ; preds = %cond.false.1478
  %356 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1511 = getelementptr inbounds %struct.image, %struct.image* %356, i32 0, i32 11
  %357 = load i32, i32* %width1511, align 4
  %mul1512 = mul nsw i32 0, %357
  %conv1513 = sext i32 %mul1512 to i64
  %add1514 = add i64 %conv1513, 16
  %mul1515 = mul i64 0, %add1514
  %add1516 = add i64 %mul1515, 0
  br label %cond.end.1517

cond.end.1517:                                    ; preds = %cond.false.1510, %cond.true.1487
  %cond1518 = phi i64 [ %sub1509, %cond.true.1487 ], [ %add1516, %cond.false.1510 ]
  %cmp1519 = icmp eq i64 %cond1518, 0
  br i1 %cmp1519, label %land.lhs.true.1521, label %lor.lhs.false.1525

land.lhs.true.1521:                               ; preds = %cond.end.1517
  %358 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1522 = getelementptr inbounds %struct.image, %struct.image* %358, i32 0, i32 11
  %359 = load i32, i32* %width1522, align 4
  %cmp1523 = icmp slt i32 %359, 0
  br i1 %cmp1523, label %cond.true.1721, label %lor.lhs.false.1525

lor.lhs.false.1525:                               ; preds = %land.lhs.true.1521, %cond.end.1517
  %360 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1526 = getelementptr inbounds %struct.image, %struct.image* %360, i32 0, i32 11
  %361 = load i32, i32* %width1526, align 4
  %cmp1527 = icmp slt i32 %361, 0
  br i1 %cmp1527, label %cond.true.1529, label %cond.false.1615

cond.true.1529:                                   ; preds = %lor.lhs.false.1525
  br i1 false, label %cond.true.1530, label %cond.false.1564

cond.true.1530:                                   ; preds = %cond.true.1529
  %362 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1531 = getelementptr inbounds %struct.image, %struct.image* %362, i32 0, i32 11
  %363 = load i32, i32* %width1531, align 4
  %mul1532 = mul nsw i32 0, %363
  %conv1533 = sext i32 %mul1532 to i64
  %add1534 = add i64 %conv1533, 16
  %mul1535 = mul i64 0, %add1534
  %sub1536 = sub i64 %mul1535, 1
  %cmp1537 = icmp ult i64 %sub1536, 0
  br i1 %cmp1537, label %cond.true.1539, label %cond.false.1550

cond.true.1539:                                   ; preds = %cond.true.1530
  %364 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1540 = getelementptr inbounds %struct.image, %struct.image* %364, i32 0, i32 11
  %365 = load i32, i32* %width1540, align 4
  %mul1541 = mul nsw i32 0, %365
  %conv1542 = sext i32 %mul1541 to i64
  %add1543 = add i64 %conv1542, 16
  %mul1544 = mul i64 0, %add1543
  %add1545 = add i64 %mul1544, 1
  %shl1546 = shl i64 %add1545, 62
  %sub1547 = sub i64 %shl1546, 1
  %mul1548 = mul i64 %sub1547, 2
  %add1549 = add i64 %mul1548, 1
  br label %cond.end.1557

cond.false.1550:                                  ; preds = %cond.true.1530
  %366 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1551 = getelementptr inbounds %struct.image, %struct.image* %366, i32 0, i32 11
  %367 = load i32, i32* %width1551, align 4
  %mul1552 = mul nsw i32 0, %367
  %conv1553 = sext i32 %mul1552 to i64
  %add1554 = add i64 %conv1553, 16
  %mul1555 = mul i64 0, %add1554
  %sub1556 = sub i64 %mul1555, 1
  br label %cond.end.1557

cond.end.1557:                                    ; preds = %cond.false.1550, %cond.true.1539
  %cond1558 = phi i64 [ %add1549, %cond.true.1539 ], [ %sub1556, %cond.false.1550 ]
  %368 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1559 = getelementptr inbounds %struct.image, %struct.image* %368, i32 0, i32 11
  %369 = load i32, i32* %width1559, align 4
  %conv1560 = sext i32 %369 to i64
  %div1561 = udiv i64 %cond1558, %conv1560
  %cmp1562 = icmp ult i64 16, %div1561
  br i1 %cmp1562, label %cond.true.1721, label %lor.lhs.false.1701

cond.false.1564:                                  ; preds = %cond.true.1529
  %370 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1565 = getelementptr inbounds %struct.image, %struct.image* %370, i32 0, i32 11
  %371 = load i32, i32* %width1565, align 4
  %cmp1566 = icmp eq i32 %371, -1
  br i1 %cmp1566, label %cond.true.1568, label %cond.false.1569

cond.true.1568:                                   ; preds = %cond.false.1564
  br i1 false, label %cond.true.1721, label %lor.lhs.false.1701

cond.false.1569:                                  ; preds = %cond.false.1564
  %372 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1570 = getelementptr inbounds %struct.image, %struct.image* %372, i32 0, i32 11
  %373 = load i32, i32* %width1570, align 4
  %mul1571 = mul nsw i32 0, %373
  %conv1572 = sext i32 %mul1571 to i64
  %add1573 = add i64 %conv1572, 16
  %mul1574 = mul i64 0, %add1573
  %sub1575 = sub i64 %mul1574, 1
  %cmp1576 = icmp ult i64 %sub1575, 0
  br i1 %cmp1576, label %cond.true.1578, label %cond.false.1601

cond.true.1578:                                   ; preds = %cond.false.1569
  %374 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1579 = getelementptr inbounds %struct.image, %struct.image* %374, i32 0, i32 11
  %375 = load i32, i32* %width1579, align 4
  %mul1580 = mul nsw i32 0, %375
  %conv1581 = sext i32 %mul1580 to i64
  %add1582 = add i64 %conv1581, 16
  %mul1583 = mul i64 0, %add1582
  %add1584 = add i64 %mul1583, 0
  %neg1585 = xor i64 %add1584, -1
  %cmp1586 = icmp eq i64 %neg1585, -1
  %conv1587 = zext i1 %cmp1586 to i32
  %sub1588 = sub nsw i32 0, %conv1587
  %conv1589 = sext i32 %sub1588 to i64
  %376 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1590 = getelementptr inbounds %struct.image, %struct.image* %376, i32 0, i32 11
  %377 = load i32, i32* %width1590, align 4
  %mul1591 = mul nsw i32 0, %377
  %conv1592 = sext i32 %mul1591 to i64
  %add1593 = add i64 %conv1592, 16
  %mul1594 = mul i64 0, %add1593
  %add1595 = add i64 %mul1594, 1
  %shl1596 = shl i64 %add1595, 62
  %sub1597 = sub i64 %shl1596, 1
  %mul1598 = mul i64 %sub1597, 2
  %add1599 = add i64 %mul1598, 1
  %sub1600 = sub i64 %conv1589, %add1599
  br label %cond.end.1608

cond.false.1601:                                  ; preds = %cond.false.1569
  %378 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1602 = getelementptr inbounds %struct.image, %struct.image* %378, i32 0, i32 11
  %379 = load i32, i32* %width1602, align 4
  %mul1603 = mul nsw i32 0, %379
  %conv1604 = sext i32 %mul1603 to i64
  %add1605 = add i64 %conv1604, 16
  %mul1606 = mul i64 0, %add1605
  %add1607 = add i64 %mul1606, 0
  br label %cond.end.1608

cond.end.1608:                                    ; preds = %cond.false.1601, %cond.true.1578
  %cond1609 = phi i64 [ %sub1600, %cond.true.1578 ], [ %add1607, %cond.false.1601 ]
  %380 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1610 = getelementptr inbounds %struct.image, %struct.image* %380, i32 0, i32 11
  %381 = load i32, i32* %width1610, align 4
  %conv1611 = sext i32 %381 to i64
  %div1612 = udiv i64 %cond1609, %conv1611
  %cmp1613 = icmp ult i64 %div1612, 16
  br i1 %cmp1613, label %cond.true.1721, label %lor.lhs.false.1701

cond.false.1615:                                  ; preds = %lor.lhs.false.1525
  %382 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1616 = getelementptr inbounds %struct.image, %struct.image* %382, i32 0, i32 11
  %383 = load i32, i32* %width1616, align 4
  %cmp1617 = icmp eq i32 %383, 0
  br i1 %cmp1617, label %cond.true.1619, label %cond.false.1620

cond.true.1619:                                   ; preds = %cond.false.1615
  br i1 false, label %cond.true.1721, label %lor.lhs.false.1701

cond.false.1620:                                  ; preds = %cond.false.1615
  br i1 false, label %cond.true.1621, label %cond.false.1667

cond.true.1621:                                   ; preds = %cond.false.1620
  %384 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1622 = getelementptr inbounds %struct.image, %struct.image* %384, i32 0, i32 11
  %385 = load i32, i32* %width1622, align 4
  %mul1623 = mul nsw i32 0, %385
  %conv1624 = sext i32 %mul1623 to i64
  %add1625 = add i64 %conv1624, 16
  %mul1626 = mul i64 0, %add1625
  %sub1627 = sub i64 %mul1626, 1
  %cmp1628 = icmp ult i64 %sub1627, 0
  br i1 %cmp1628, label %cond.true.1630, label %cond.false.1653

cond.true.1630:                                   ; preds = %cond.true.1621
  %386 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1631 = getelementptr inbounds %struct.image, %struct.image* %386, i32 0, i32 11
  %387 = load i32, i32* %width1631, align 4
  %mul1632 = mul nsw i32 0, %387
  %conv1633 = sext i32 %mul1632 to i64
  %add1634 = add i64 %conv1633, 16
  %mul1635 = mul i64 0, %add1634
  %add1636 = add i64 %mul1635, 0
  %neg1637 = xor i64 %add1636, -1
  %cmp1638 = icmp eq i64 %neg1637, -1
  %conv1639 = zext i1 %cmp1638 to i32
  %sub1640 = sub nsw i32 0, %conv1639
  %conv1641 = sext i32 %sub1640 to i64
  %388 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1642 = getelementptr inbounds %struct.image, %struct.image* %388, i32 0, i32 11
  %389 = load i32, i32* %width1642, align 4
  %mul1643 = mul nsw i32 0, %389
  %conv1644 = sext i32 %mul1643 to i64
  %add1645 = add i64 %conv1644, 16
  %mul1646 = mul i64 0, %add1645
  %add1647 = add i64 %mul1646, 1
  %shl1648 = shl i64 %add1647, 62
  %sub1649 = sub i64 %shl1648, 1
  %mul1650 = mul i64 %sub1649, 2
  %add1651 = add i64 %mul1650, 1
  %sub1652 = sub i64 %conv1641, %add1651
  br label %cond.end.1660

cond.false.1653:                                  ; preds = %cond.true.1621
  %390 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1654 = getelementptr inbounds %struct.image, %struct.image* %390, i32 0, i32 11
  %391 = load i32, i32* %width1654, align 4
  %mul1655 = mul nsw i32 0, %391
  %conv1656 = sext i32 %mul1655 to i64
  %add1657 = add i64 %conv1656, 16
  %mul1658 = mul i64 0, %add1657
  %add1659 = add i64 %mul1658, 0
  br label %cond.end.1660

cond.end.1660:                                    ; preds = %cond.false.1653, %cond.true.1630
  %cond1661 = phi i64 [ %sub1652, %cond.true.1630 ], [ %add1659, %cond.false.1653 ]
  %392 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1662 = getelementptr inbounds %struct.image, %struct.image* %392, i32 0, i32 11
  %393 = load i32, i32* %width1662, align 4
  %conv1663 = sext i32 %393 to i64
  %div1664 = udiv i64 %cond1661, %conv1663
  %cmp1665 = icmp ult i64 16, %div1664
  br i1 %cmp1665, label %cond.true.1721, label %lor.lhs.false.1701

cond.false.1667:                                  ; preds = %cond.false.1620
  %394 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1668 = getelementptr inbounds %struct.image, %struct.image* %394, i32 0, i32 11
  %395 = load i32, i32* %width1668, align 4
  %mul1669 = mul nsw i32 0, %395
  %conv1670 = sext i32 %mul1669 to i64
  %add1671 = add i64 %conv1670, 16
  %mul1672 = mul i64 0, %add1671
  %sub1673 = sub i64 %mul1672, 1
  %cmp1674 = icmp ult i64 %sub1673, 0
  br i1 %cmp1674, label %cond.true.1676, label %cond.false.1687

cond.true.1676:                                   ; preds = %cond.false.1667
  %396 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1677 = getelementptr inbounds %struct.image, %struct.image* %396, i32 0, i32 11
  %397 = load i32, i32* %width1677, align 4
  %mul1678 = mul nsw i32 0, %397
  %conv1679 = sext i32 %mul1678 to i64
  %add1680 = add i64 %conv1679, 16
  %mul1681 = mul i64 0, %add1680
  %add1682 = add i64 %mul1681, 1
  %shl1683 = shl i64 %add1682, 62
  %sub1684 = sub i64 %shl1683, 1
  %mul1685 = mul i64 %sub1684, 2
  %add1686 = add i64 %mul1685, 1
  br label %cond.end.1694

cond.false.1687:                                  ; preds = %cond.false.1667
  %398 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1688 = getelementptr inbounds %struct.image, %struct.image* %398, i32 0, i32 11
  %399 = load i32, i32* %width1688, align 4
  %mul1689 = mul nsw i32 0, %399
  %conv1690 = sext i32 %mul1689 to i64
  %add1691 = add i64 %conv1690, 16
  %mul1692 = mul i64 0, %add1691
  %sub1693 = sub i64 %mul1692, 1
  br label %cond.end.1694

cond.end.1694:                                    ; preds = %cond.false.1687, %cond.true.1676
  %cond1695 = phi i64 [ %add1686, %cond.true.1676 ], [ %sub1693, %cond.false.1687 ]
  %400 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1696 = getelementptr inbounds %struct.image, %struct.image* %400, i32 0, i32 11
  %401 = load i32, i32* %width1696, align 4
  %conv1697 = sext i32 %401 to i64
  %div1698 = udiv i64 %cond1695, %conv1697
  %cmp1699 = icmp ult i64 %div1698, 16
  br i1 %cmp1699, label %cond.true.1721, label %lor.lhs.false.1701

lor.lhs.false.1701:                               ; preds = %cond.end.1694, %cond.end.1660, %cond.true.1619, %cond.end.1608, %cond.true.1568, %cond.end.1557
  %402 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1702 = getelementptr inbounds %struct.image, %struct.image* %402, i32 0, i32 11
  %403 = load i32, i32* %width1702, align 4
  %conv1703 = sext i32 %403 to i64
  %mul1704 = mul i64 16, %conv1703
  %mul1705 = mul i64 0, %mul1704
  %sub1706 = sub i64 %mul1705, 1
  %cmp1707 = icmp ult i64 %sub1706, 0
  br i1 %cmp1707, label %land.lhs.true.1709, label %lor.lhs.false.1715

land.lhs.true.1709:                               ; preds = %lor.lhs.false.1701
  %404 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1710 = getelementptr inbounds %struct.image, %struct.image* %404, i32 0, i32 11
  %405 = load i32, i32* %width1710, align 4
  %conv1711 = sext i32 %405 to i64
  %mul1712 = mul i64 16, %conv1711
  %cmp1713 = icmp ult i64 %mul1712, -2147483648
  br i1 %cmp1713, label %cond.true.1721, label %lor.lhs.false.1715

lor.lhs.false.1715:                               ; preds = %land.lhs.true.1709, %lor.lhs.false.1701
  %406 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1716 = getelementptr inbounds %struct.image, %struct.image* %406, i32 0, i32 11
  %407 = load i32, i32* %width1716, align 4
  %conv1717 = sext i32 %407 to i64
  %mul1718 = mul i64 16, %conv1717
  %cmp1719 = icmp ult i64 2147483647, %mul1718
  br i1 %cmp1719, label %cond.true.1721, label %cond.false.1737

cond.true.1721:                                   ; preds = %lor.lhs.false.1715, %land.lhs.true.1709, %cond.end.1694, %cond.end.1660, %cond.true.1619, %cond.end.1608, %cond.true.1568, %cond.end.1557, %land.lhs.true.1521
  %408 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1722 = getelementptr inbounds %struct.image, %struct.image* %408, i32 0, i32 11
  %409 = load i32, i32* %width1722, align 4
  %mul1723 = mul i32 16, %409
  %cmp1724 = icmp ule i32 %mul1723, 2147483647
  br i1 %cmp1724, label %cond.true.1726, label %cond.false.1729

cond.true.1726:                                   ; preds = %cond.true.1721
  %410 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1727 = getelementptr inbounds %struct.image, %struct.image* %410, i32 0, i32 11
  %411 = load i32, i32* %width1727, align 4
  %mul1728 = mul i32 16, %411
  br label %cond.end.1734

cond.false.1729:                                  ; preds = %cond.true.1721
  %412 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1730 = getelementptr inbounds %struct.image, %struct.image* %412, i32 0, i32 11
  %413 = load i32, i32* %width1730, align 4
  %mul1731 = mul i32 16, %413
  %sub1732 = sub i32 %mul1731, -2147483648
  %add1733 = add nsw i32 %sub1732, -2147483648
  br label %cond.end.1734

cond.end.1734:                                    ; preds = %cond.false.1729, %cond.true.1726
  %cond1735 = phi i32 [ %mul1728, %cond.true.1726 ], [ %add1733, %cond.false.1729 ]
  %conv1736 = sext i32 %cond1735 to i64
  store i64 %conv1736, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.1737:                                  ; preds = %lor.lhs.false.1715
  %414 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1738 = getelementptr inbounds %struct.image, %struct.image* %414, i32 0, i32 11
  %415 = load i32, i32* %width1738, align 4
  %mul1739 = mul i32 16, %415
  %cmp1740 = icmp ule i32 %mul1739, 2147483647
  br i1 %cmp1740, label %cond.true.1742, label %cond.false.1745

cond.true.1742:                                   ; preds = %cond.false.1737
  %416 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1743 = getelementptr inbounds %struct.image, %struct.image* %416, i32 0, i32 11
  %417 = load i32, i32* %width1743, align 4
  %mul1744 = mul i32 16, %417
  br label %cond.end.1750

cond.false.1745:                                  ; preds = %cond.false.1737
  %418 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1746 = getelementptr inbounds %struct.image, %struct.image* %418, i32 0, i32 11
  %419 = load i32, i32* %width1746, align 4
  %mul1747 = mul i32 16, %419
  %sub1748 = sub i32 %mul1747, -2147483648
  %add1749 = add nsw i32 %sub1748, -2147483648
  br label %cond.end.1750

cond.end.1750:                                    ; preds = %cond.false.1745, %cond.true.1742
  %cond1751 = phi i32 [ %mul1744, %cond.true.1742 ], [ %add1749, %cond.false.1745 ]
  %conv1752 = sext i32 %cond1751 to i64
  store i64 %conv1752, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.1753:                                  ; preds = %cond.false.1229
  br i1 true, label %cond.true.1754, label %cond.false.2317

cond.true.1754:                                   ; preds = %cond.false.1753
  br i1 false, label %cond.true.1755, label %cond.false.2038

cond.true.1755:                                   ; preds = %cond.true.1754
  %420 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1756 = getelementptr inbounds %struct.image, %struct.image* %420, i32 0, i32 11
  %421 = load i32, i32* %width1756, align 4
  %conv1757 = sext i32 %421 to i64
  %mul1758 = mul nsw i64 0, %conv1757
  %add1759 = add nsw i64 %mul1758, 16
  %mul1760 = mul nsw i64 0, %add1759
  %sub1761 = sub nsw i64 %mul1760, 1
  %cmp1762 = icmp slt i64 %sub1761, 0
  br i1 %cmp1762, label %cond.true.1764, label %cond.false.1787

cond.true.1764:                                   ; preds = %cond.true.1755
  %422 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1765 = getelementptr inbounds %struct.image, %struct.image* %422, i32 0, i32 11
  %423 = load i32, i32* %width1765, align 4
  %conv1766 = sext i32 %423 to i64
  %mul1767 = mul nsw i64 0, %conv1766
  %add1768 = add nsw i64 %mul1767, 16
  %mul1769 = mul nsw i64 0, %add1768
  %add1770 = add nsw i64 %mul1769, 0
  %neg1771 = xor i64 %add1770, -1
  %cmp1772 = icmp eq i64 %neg1771, -1
  %conv1773 = zext i1 %cmp1772 to i32
  %sub1774 = sub nsw i32 0, %conv1773
  %conv1775 = sext i32 %sub1774 to i64
  %424 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1776 = getelementptr inbounds %struct.image, %struct.image* %424, i32 0, i32 11
  %425 = load i32, i32* %width1776, align 4
  %conv1777 = sext i32 %425 to i64
  %mul1778 = mul nsw i64 0, %conv1777
  %add1779 = add nsw i64 %mul1778, 16
  %mul1780 = mul nsw i64 0, %add1779
  %add1781 = add nsw i64 %mul1780, 1
  %shl1782 = shl i64 %add1781, 62
  %sub1783 = sub nsw i64 %shl1782, 1
  %mul1784 = mul nsw i64 %sub1783, 2
  %add1785 = add nsw i64 %mul1784, 1
  %sub1786 = sub nsw i64 %conv1775, %add1785
  br label %cond.end.1794

cond.false.1787:                                  ; preds = %cond.true.1755
  %426 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1788 = getelementptr inbounds %struct.image, %struct.image* %426, i32 0, i32 11
  %427 = load i32, i32* %width1788, align 4
  %conv1789 = sext i32 %427 to i64
  %mul1790 = mul nsw i64 0, %conv1789
  %add1791 = add nsw i64 %mul1790, 16
  %mul1792 = mul nsw i64 0, %add1791
  %add1793 = add nsw i64 %mul1792, 0
  br label %cond.end.1794

cond.end.1794:                                    ; preds = %cond.false.1787, %cond.true.1764
  %cond1795 = phi i64 [ %sub1786, %cond.true.1764 ], [ %add1793, %cond.false.1787 ]
  %cmp1796 = icmp eq i64 %cond1795, 0
  br i1 %cmp1796, label %land.lhs.true.1798, label %lor.lhs.false.1803

land.lhs.true.1798:                               ; preds = %cond.end.1794
  %428 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1799 = getelementptr inbounds %struct.image, %struct.image* %428, i32 0, i32 11
  %429 = load i32, i32* %width1799, align 4
  %conv1800 = sext i32 %429 to i64
  %cmp1801 = icmp slt i64 %conv1800, 0
  br i1 %cmp1801, label %cond.true.2002, label %lor.lhs.false.1803

lor.lhs.false.1803:                               ; preds = %land.lhs.true.1798, %cond.end.1794
  %430 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1804 = getelementptr inbounds %struct.image, %struct.image* %430, i32 0, i32 11
  %431 = load i32, i32* %width1804, align 4
  %conv1805 = sext i32 %431 to i64
  %cmp1806 = icmp slt i64 %conv1805, 0
  br i1 %cmp1806, label %cond.true.1808, label %cond.false.1895

cond.true.1808:                                   ; preds = %lor.lhs.false.1803
  br i1 false, label %cond.true.1809, label %cond.false.1843

cond.true.1809:                                   ; preds = %cond.true.1808
  %432 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1810 = getelementptr inbounds %struct.image, %struct.image* %432, i32 0, i32 11
  %433 = load i32, i32* %width1810, align 4
  %conv1811 = sext i32 %433 to i64
  %mul1812 = mul nsw i64 0, %conv1811
  %add1813 = add nsw i64 %mul1812, 16
  %mul1814 = mul nsw i64 0, %add1813
  %sub1815 = sub nsw i64 %mul1814, 1
  %cmp1816 = icmp slt i64 %sub1815, 0
  br i1 %cmp1816, label %cond.true.1818, label %cond.false.1829

cond.true.1818:                                   ; preds = %cond.true.1809
  %434 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1819 = getelementptr inbounds %struct.image, %struct.image* %434, i32 0, i32 11
  %435 = load i32, i32* %width1819, align 4
  %conv1820 = sext i32 %435 to i64
  %mul1821 = mul nsw i64 0, %conv1820
  %add1822 = add nsw i64 %mul1821, 16
  %mul1823 = mul nsw i64 0, %add1822
  %add1824 = add nsw i64 %mul1823, 1
  %shl1825 = shl i64 %add1824, 62
  %sub1826 = sub nsw i64 %shl1825, 1
  %mul1827 = mul nsw i64 %sub1826, 2
  %add1828 = add nsw i64 %mul1827, 1
  br label %cond.end.1836

cond.false.1829:                                  ; preds = %cond.true.1809
  %436 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1830 = getelementptr inbounds %struct.image, %struct.image* %436, i32 0, i32 11
  %437 = load i32, i32* %width1830, align 4
  %conv1831 = sext i32 %437 to i64
  %mul1832 = mul nsw i64 0, %conv1831
  %add1833 = add nsw i64 %mul1832, 16
  %mul1834 = mul nsw i64 0, %add1833
  %sub1835 = sub nsw i64 %mul1834, 1
  br label %cond.end.1836

cond.end.1836:                                    ; preds = %cond.false.1829, %cond.true.1818
  %cond1837 = phi i64 [ %add1828, %cond.true.1818 ], [ %sub1835, %cond.false.1829 ]
  %438 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1838 = getelementptr inbounds %struct.image, %struct.image* %438, i32 0, i32 11
  %439 = load i32, i32* %width1838, align 4
  %conv1839 = sext i32 %439 to i64
  %div1840 = sdiv i64 %cond1837, %conv1839
  %cmp1841 = icmp slt i64 16, %div1840
  br i1 %cmp1841, label %cond.true.2002, label %lor.lhs.false.1982

cond.false.1843:                                  ; preds = %cond.true.1808
  %440 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1844 = getelementptr inbounds %struct.image, %struct.image* %440, i32 0, i32 11
  %441 = load i32, i32* %width1844, align 4
  %conv1845 = sext i32 %441 to i64
  %cmp1846 = icmp eq i64 %conv1845, -1
  br i1 %cmp1846, label %cond.true.1848, label %cond.false.1849

cond.true.1848:                                   ; preds = %cond.false.1843
  br i1 false, label %cond.true.2002, label %lor.lhs.false.1982

cond.false.1849:                                  ; preds = %cond.false.1843
  %442 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1850 = getelementptr inbounds %struct.image, %struct.image* %442, i32 0, i32 11
  %443 = load i32, i32* %width1850, align 4
  %conv1851 = sext i32 %443 to i64
  %mul1852 = mul nsw i64 0, %conv1851
  %add1853 = add nsw i64 %mul1852, 16
  %mul1854 = mul nsw i64 0, %add1853
  %sub1855 = sub nsw i64 %mul1854, 1
  %cmp1856 = icmp slt i64 %sub1855, 0
  br i1 %cmp1856, label %cond.true.1858, label %cond.false.1881

cond.true.1858:                                   ; preds = %cond.false.1849
  %444 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1859 = getelementptr inbounds %struct.image, %struct.image* %444, i32 0, i32 11
  %445 = load i32, i32* %width1859, align 4
  %conv1860 = sext i32 %445 to i64
  %mul1861 = mul nsw i64 0, %conv1860
  %add1862 = add nsw i64 %mul1861, 16
  %mul1863 = mul nsw i64 0, %add1862
  %add1864 = add nsw i64 %mul1863, 0
  %neg1865 = xor i64 %add1864, -1
  %cmp1866 = icmp eq i64 %neg1865, -1
  %conv1867 = zext i1 %cmp1866 to i32
  %sub1868 = sub nsw i32 0, %conv1867
  %conv1869 = sext i32 %sub1868 to i64
  %446 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1870 = getelementptr inbounds %struct.image, %struct.image* %446, i32 0, i32 11
  %447 = load i32, i32* %width1870, align 4
  %conv1871 = sext i32 %447 to i64
  %mul1872 = mul nsw i64 0, %conv1871
  %add1873 = add nsw i64 %mul1872, 16
  %mul1874 = mul nsw i64 0, %add1873
  %add1875 = add nsw i64 %mul1874, 1
  %shl1876 = shl i64 %add1875, 62
  %sub1877 = sub nsw i64 %shl1876, 1
  %mul1878 = mul nsw i64 %sub1877, 2
  %add1879 = add nsw i64 %mul1878, 1
  %sub1880 = sub nsw i64 %conv1869, %add1879
  br label %cond.end.1888

cond.false.1881:                                  ; preds = %cond.false.1849
  %448 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1882 = getelementptr inbounds %struct.image, %struct.image* %448, i32 0, i32 11
  %449 = load i32, i32* %width1882, align 4
  %conv1883 = sext i32 %449 to i64
  %mul1884 = mul nsw i64 0, %conv1883
  %add1885 = add nsw i64 %mul1884, 16
  %mul1886 = mul nsw i64 0, %add1885
  %add1887 = add nsw i64 %mul1886, 0
  br label %cond.end.1888

cond.end.1888:                                    ; preds = %cond.false.1881, %cond.true.1858
  %cond1889 = phi i64 [ %sub1880, %cond.true.1858 ], [ %add1887, %cond.false.1881 ]
  %450 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1890 = getelementptr inbounds %struct.image, %struct.image* %450, i32 0, i32 11
  %451 = load i32, i32* %width1890, align 4
  %conv1891 = sext i32 %451 to i64
  %div1892 = sdiv i64 %cond1889, %conv1891
  %cmp1893 = icmp slt i64 %div1892, 16
  br i1 %cmp1893, label %cond.true.2002, label %lor.lhs.false.1982

cond.false.1895:                                  ; preds = %lor.lhs.false.1803
  %452 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1896 = getelementptr inbounds %struct.image, %struct.image* %452, i32 0, i32 11
  %453 = load i32, i32* %width1896, align 4
  %conv1897 = sext i32 %453 to i64
  %cmp1898 = icmp eq i64 %conv1897, 0
  br i1 %cmp1898, label %cond.true.1900, label %cond.false.1901

cond.true.1900:                                   ; preds = %cond.false.1895
  br i1 false, label %cond.true.2002, label %lor.lhs.false.1982

cond.false.1901:                                  ; preds = %cond.false.1895
  br i1 false, label %cond.true.1902, label %cond.false.1948

cond.true.1902:                                   ; preds = %cond.false.1901
  %454 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1903 = getelementptr inbounds %struct.image, %struct.image* %454, i32 0, i32 11
  %455 = load i32, i32* %width1903, align 4
  %conv1904 = sext i32 %455 to i64
  %mul1905 = mul nsw i64 0, %conv1904
  %add1906 = add nsw i64 %mul1905, 16
  %mul1907 = mul nsw i64 0, %add1906
  %sub1908 = sub nsw i64 %mul1907, 1
  %cmp1909 = icmp slt i64 %sub1908, 0
  br i1 %cmp1909, label %cond.true.1911, label %cond.false.1934

cond.true.1911:                                   ; preds = %cond.true.1902
  %456 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1912 = getelementptr inbounds %struct.image, %struct.image* %456, i32 0, i32 11
  %457 = load i32, i32* %width1912, align 4
  %conv1913 = sext i32 %457 to i64
  %mul1914 = mul nsw i64 0, %conv1913
  %add1915 = add nsw i64 %mul1914, 16
  %mul1916 = mul nsw i64 0, %add1915
  %add1917 = add nsw i64 %mul1916, 0
  %neg1918 = xor i64 %add1917, -1
  %cmp1919 = icmp eq i64 %neg1918, -1
  %conv1920 = zext i1 %cmp1919 to i32
  %sub1921 = sub nsw i32 0, %conv1920
  %conv1922 = sext i32 %sub1921 to i64
  %458 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1923 = getelementptr inbounds %struct.image, %struct.image* %458, i32 0, i32 11
  %459 = load i32, i32* %width1923, align 4
  %conv1924 = sext i32 %459 to i64
  %mul1925 = mul nsw i64 0, %conv1924
  %add1926 = add nsw i64 %mul1925, 16
  %mul1927 = mul nsw i64 0, %add1926
  %add1928 = add nsw i64 %mul1927, 1
  %shl1929 = shl i64 %add1928, 62
  %sub1930 = sub nsw i64 %shl1929, 1
  %mul1931 = mul nsw i64 %sub1930, 2
  %add1932 = add nsw i64 %mul1931, 1
  %sub1933 = sub nsw i64 %conv1922, %add1932
  br label %cond.end.1941

cond.false.1934:                                  ; preds = %cond.true.1902
  %460 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1935 = getelementptr inbounds %struct.image, %struct.image* %460, i32 0, i32 11
  %461 = load i32, i32* %width1935, align 4
  %conv1936 = sext i32 %461 to i64
  %mul1937 = mul nsw i64 0, %conv1936
  %add1938 = add nsw i64 %mul1937, 16
  %mul1939 = mul nsw i64 0, %add1938
  %add1940 = add nsw i64 %mul1939, 0
  br label %cond.end.1941

cond.end.1941:                                    ; preds = %cond.false.1934, %cond.true.1911
  %cond1942 = phi i64 [ %sub1933, %cond.true.1911 ], [ %add1940, %cond.false.1934 ]
  %462 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1943 = getelementptr inbounds %struct.image, %struct.image* %462, i32 0, i32 11
  %463 = load i32, i32* %width1943, align 4
  %conv1944 = sext i32 %463 to i64
  %div1945 = sdiv i64 %cond1942, %conv1944
  %cmp1946 = icmp slt i64 16, %div1945
  br i1 %cmp1946, label %cond.true.2002, label %lor.lhs.false.1982

cond.false.1948:                                  ; preds = %cond.false.1901
  %464 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1949 = getelementptr inbounds %struct.image, %struct.image* %464, i32 0, i32 11
  %465 = load i32, i32* %width1949, align 4
  %conv1950 = sext i32 %465 to i64
  %mul1951 = mul nsw i64 0, %conv1950
  %add1952 = add nsw i64 %mul1951, 16
  %mul1953 = mul nsw i64 0, %add1952
  %sub1954 = sub nsw i64 %mul1953, 1
  %cmp1955 = icmp slt i64 %sub1954, 0
  br i1 %cmp1955, label %cond.true.1957, label %cond.false.1968

cond.true.1957:                                   ; preds = %cond.false.1948
  %466 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1958 = getelementptr inbounds %struct.image, %struct.image* %466, i32 0, i32 11
  %467 = load i32, i32* %width1958, align 4
  %conv1959 = sext i32 %467 to i64
  %mul1960 = mul nsw i64 0, %conv1959
  %add1961 = add nsw i64 %mul1960, 16
  %mul1962 = mul nsw i64 0, %add1961
  %add1963 = add nsw i64 %mul1962, 1
  %shl1964 = shl i64 %add1963, 62
  %sub1965 = sub nsw i64 %shl1964, 1
  %mul1966 = mul nsw i64 %sub1965, 2
  %add1967 = add nsw i64 %mul1966, 1
  br label %cond.end.1975

cond.false.1968:                                  ; preds = %cond.false.1948
  %468 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1969 = getelementptr inbounds %struct.image, %struct.image* %468, i32 0, i32 11
  %469 = load i32, i32* %width1969, align 4
  %conv1970 = sext i32 %469 to i64
  %mul1971 = mul nsw i64 0, %conv1970
  %add1972 = add nsw i64 %mul1971, 16
  %mul1973 = mul nsw i64 0, %add1972
  %sub1974 = sub nsw i64 %mul1973, 1
  br label %cond.end.1975

cond.end.1975:                                    ; preds = %cond.false.1968, %cond.true.1957
  %cond1976 = phi i64 [ %add1967, %cond.true.1957 ], [ %sub1974, %cond.false.1968 ]
  %470 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1977 = getelementptr inbounds %struct.image, %struct.image* %470, i32 0, i32 11
  %471 = load i32, i32* %width1977, align 4
  %conv1978 = sext i32 %471 to i64
  %div1979 = sdiv i64 %cond1976, %conv1978
  %cmp1980 = icmp slt i64 %div1979, 16
  br i1 %cmp1980, label %cond.true.2002, label %lor.lhs.false.1982

lor.lhs.false.1982:                               ; preds = %cond.end.1975, %cond.end.1941, %cond.true.1900, %cond.end.1888, %cond.true.1848, %cond.end.1836
  %472 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1983 = getelementptr inbounds %struct.image, %struct.image* %472, i32 0, i32 11
  %473 = load i32, i32* %width1983, align 4
  %conv1984 = sext i32 %473 to i64
  %mul1985 = mul nsw i64 16, %conv1984
  %mul1986 = mul nsw i64 0, %mul1985
  %sub1987 = sub nsw i64 %mul1986, 1
  %cmp1988 = icmp slt i64 %sub1987, 0
  br i1 %cmp1988, label %land.lhs.true.1990, label %lor.lhs.false.1996

land.lhs.true.1990:                               ; preds = %lor.lhs.false.1982
  %474 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1991 = getelementptr inbounds %struct.image, %struct.image* %474, i32 0, i32 11
  %475 = load i32, i32* %width1991, align 4
  %conv1992 = sext i32 %475 to i64
  %mul1993 = mul nsw i64 16, %conv1992
  %cmp1994 = icmp slt i64 %mul1993, -9223372036854775808
  br i1 %cmp1994, label %cond.true.2002, label %lor.lhs.false.1996

lor.lhs.false.1996:                               ; preds = %land.lhs.true.1990, %lor.lhs.false.1982
  %476 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1997 = getelementptr inbounds %struct.image, %struct.image* %476, i32 0, i32 11
  %477 = load i32, i32* %width1997, align 4
  %conv1998 = sext i32 %477 to i64
  %mul1999 = mul nsw i64 16, %conv1998
  %cmp2000 = icmp slt i64 9223372036854775807, %mul1999
  br i1 %cmp2000, label %cond.true.2002, label %cond.false.2020

cond.true.2002:                                   ; preds = %lor.lhs.false.1996, %land.lhs.true.1990, %cond.end.1975, %cond.end.1941, %cond.true.1900, %cond.end.1888, %cond.true.1848, %cond.end.1836, %land.lhs.true.1798
  %478 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2003 = getelementptr inbounds %struct.image, %struct.image* %478, i32 0, i32 11
  %479 = load i32, i32* %width2003, align 4
  %conv2004 = sext i32 %479 to i64
  %mul2005 = mul i64 16, %conv2004
  %cmp2006 = icmp ule i64 %mul2005, 9223372036854775807
  br i1 %cmp2006, label %cond.true.2008, label %cond.false.2012

cond.true.2008:                                   ; preds = %cond.true.2002
  %480 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2009 = getelementptr inbounds %struct.image, %struct.image* %480, i32 0, i32 11
  %481 = load i32, i32* %width2009, align 4
  %conv2010 = sext i32 %481 to i64
  %mul2011 = mul i64 16, %conv2010
  br label %cond.end.2018

cond.false.2012:                                  ; preds = %cond.true.2002
  %482 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2013 = getelementptr inbounds %struct.image, %struct.image* %482, i32 0, i32 11
  %483 = load i32, i32* %width2013, align 4
  %conv2014 = sext i32 %483 to i64
  %mul2015 = mul i64 16, %conv2014
  %sub2016 = sub i64 %mul2015, -9223372036854775808
  %add2017 = add nsw i64 %sub2016, -9223372036854775808
  br label %cond.end.2018

cond.end.2018:                                    ; preds = %cond.false.2012, %cond.true.2008
  %cond2019 = phi i64 [ %mul2011, %cond.true.2008 ], [ %add2017, %cond.false.2012 ]
  store i64 %cond2019, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.2020:                                  ; preds = %lor.lhs.false.1996
  %484 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2021 = getelementptr inbounds %struct.image, %struct.image* %484, i32 0, i32 11
  %485 = load i32, i32* %width2021, align 4
  %conv2022 = sext i32 %485 to i64
  %mul2023 = mul i64 16, %conv2022
  %cmp2024 = icmp ule i64 %mul2023, 9223372036854775807
  br i1 %cmp2024, label %cond.true.2026, label %cond.false.2030

cond.true.2026:                                   ; preds = %cond.false.2020
  %486 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2027 = getelementptr inbounds %struct.image, %struct.image* %486, i32 0, i32 11
  %487 = load i32, i32* %width2027, align 4
  %conv2028 = sext i32 %487 to i64
  %mul2029 = mul i64 16, %conv2028
  br label %cond.end.2036

cond.false.2030:                                  ; preds = %cond.false.2020
  %488 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2031 = getelementptr inbounds %struct.image, %struct.image* %488, i32 0, i32 11
  %489 = load i32, i32* %width2031, align 4
  %conv2032 = sext i32 %489 to i64
  %mul2033 = mul i64 16, %conv2032
  %sub2034 = sub i64 %mul2033, -9223372036854775808
  %add2035 = add nsw i64 %sub2034, -9223372036854775808
  br label %cond.end.2036

cond.end.2036:                                    ; preds = %cond.false.2030, %cond.true.2026
  %cond2037 = phi i64 [ %mul2029, %cond.true.2026 ], [ %add2035, %cond.false.2030 ]
  store i64 %cond2037, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.2038:                                  ; preds = %cond.true.1754
  %490 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2039 = getelementptr inbounds %struct.image, %struct.image* %490, i32 0, i32 11
  %491 = load i32, i32* %width2039, align 4
  %mul2040 = mul nsw i32 0, %491
  %conv2041 = sext i32 %mul2040 to i64
  %add2042 = add i64 %conv2041, 16
  %mul2043 = mul i64 0, %add2042
  %sub2044 = sub i64 %mul2043, 1
  %cmp2045 = icmp ult i64 %sub2044, 0
  br i1 %cmp2045, label %cond.true.2047, label %cond.false.2070

cond.true.2047:                                   ; preds = %cond.false.2038
  %492 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2048 = getelementptr inbounds %struct.image, %struct.image* %492, i32 0, i32 11
  %493 = load i32, i32* %width2048, align 4
  %mul2049 = mul nsw i32 0, %493
  %conv2050 = sext i32 %mul2049 to i64
  %add2051 = add i64 %conv2050, 16
  %mul2052 = mul i64 0, %add2051
  %add2053 = add i64 %mul2052, 0
  %neg2054 = xor i64 %add2053, -1
  %cmp2055 = icmp eq i64 %neg2054, -1
  %conv2056 = zext i1 %cmp2055 to i32
  %sub2057 = sub nsw i32 0, %conv2056
  %conv2058 = sext i32 %sub2057 to i64
  %494 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2059 = getelementptr inbounds %struct.image, %struct.image* %494, i32 0, i32 11
  %495 = load i32, i32* %width2059, align 4
  %mul2060 = mul nsw i32 0, %495
  %conv2061 = sext i32 %mul2060 to i64
  %add2062 = add i64 %conv2061, 16
  %mul2063 = mul i64 0, %add2062
  %add2064 = add i64 %mul2063, 1
  %shl2065 = shl i64 %add2064, 62
  %sub2066 = sub i64 %shl2065, 1
  %mul2067 = mul i64 %sub2066, 2
  %add2068 = add i64 %mul2067, 1
  %sub2069 = sub i64 %conv2058, %add2068
  br label %cond.end.2077

cond.false.2070:                                  ; preds = %cond.false.2038
  %496 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2071 = getelementptr inbounds %struct.image, %struct.image* %496, i32 0, i32 11
  %497 = load i32, i32* %width2071, align 4
  %mul2072 = mul nsw i32 0, %497
  %conv2073 = sext i32 %mul2072 to i64
  %add2074 = add i64 %conv2073, 16
  %mul2075 = mul i64 0, %add2074
  %add2076 = add i64 %mul2075, 0
  br label %cond.end.2077

cond.end.2077:                                    ; preds = %cond.false.2070, %cond.true.2047
  %cond2078 = phi i64 [ %sub2069, %cond.true.2047 ], [ %add2076, %cond.false.2070 ]
  %cmp2079 = icmp eq i64 %cond2078, 0
  br i1 %cmp2079, label %land.lhs.true.2081, label %lor.lhs.false.2085

land.lhs.true.2081:                               ; preds = %cond.end.2077
  %498 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2082 = getelementptr inbounds %struct.image, %struct.image* %498, i32 0, i32 11
  %499 = load i32, i32* %width2082, align 4
  %cmp2083 = icmp slt i32 %499, 0
  br i1 %cmp2083, label %cond.true.2281, label %lor.lhs.false.2085

lor.lhs.false.2085:                               ; preds = %land.lhs.true.2081, %cond.end.2077
  %500 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2086 = getelementptr inbounds %struct.image, %struct.image* %500, i32 0, i32 11
  %501 = load i32, i32* %width2086, align 4
  %cmp2087 = icmp slt i32 %501, 0
  br i1 %cmp2087, label %cond.true.2089, label %cond.false.2175

cond.true.2089:                                   ; preds = %lor.lhs.false.2085
  br i1 false, label %cond.true.2090, label %cond.false.2124

cond.true.2090:                                   ; preds = %cond.true.2089
  %502 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2091 = getelementptr inbounds %struct.image, %struct.image* %502, i32 0, i32 11
  %503 = load i32, i32* %width2091, align 4
  %mul2092 = mul nsw i32 0, %503
  %conv2093 = sext i32 %mul2092 to i64
  %add2094 = add i64 %conv2093, 16
  %mul2095 = mul i64 0, %add2094
  %sub2096 = sub i64 %mul2095, 1
  %cmp2097 = icmp ult i64 %sub2096, 0
  br i1 %cmp2097, label %cond.true.2099, label %cond.false.2110

cond.true.2099:                                   ; preds = %cond.true.2090
  %504 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2100 = getelementptr inbounds %struct.image, %struct.image* %504, i32 0, i32 11
  %505 = load i32, i32* %width2100, align 4
  %mul2101 = mul nsw i32 0, %505
  %conv2102 = sext i32 %mul2101 to i64
  %add2103 = add i64 %conv2102, 16
  %mul2104 = mul i64 0, %add2103
  %add2105 = add i64 %mul2104, 1
  %shl2106 = shl i64 %add2105, 62
  %sub2107 = sub i64 %shl2106, 1
  %mul2108 = mul i64 %sub2107, 2
  %add2109 = add i64 %mul2108, 1
  br label %cond.end.2117

cond.false.2110:                                  ; preds = %cond.true.2090
  %506 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2111 = getelementptr inbounds %struct.image, %struct.image* %506, i32 0, i32 11
  %507 = load i32, i32* %width2111, align 4
  %mul2112 = mul nsw i32 0, %507
  %conv2113 = sext i32 %mul2112 to i64
  %add2114 = add i64 %conv2113, 16
  %mul2115 = mul i64 0, %add2114
  %sub2116 = sub i64 %mul2115, 1
  br label %cond.end.2117

cond.end.2117:                                    ; preds = %cond.false.2110, %cond.true.2099
  %cond2118 = phi i64 [ %add2109, %cond.true.2099 ], [ %sub2116, %cond.false.2110 ]
  %508 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2119 = getelementptr inbounds %struct.image, %struct.image* %508, i32 0, i32 11
  %509 = load i32, i32* %width2119, align 4
  %conv2120 = sext i32 %509 to i64
  %div2121 = udiv i64 %cond2118, %conv2120
  %cmp2122 = icmp ult i64 16, %div2121
  br i1 %cmp2122, label %cond.true.2281, label %lor.lhs.false.2261

cond.false.2124:                                  ; preds = %cond.true.2089
  %510 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2125 = getelementptr inbounds %struct.image, %struct.image* %510, i32 0, i32 11
  %511 = load i32, i32* %width2125, align 4
  %cmp2126 = icmp eq i32 %511, -1
  br i1 %cmp2126, label %cond.true.2128, label %cond.false.2129

cond.true.2128:                                   ; preds = %cond.false.2124
  br i1 false, label %cond.true.2281, label %lor.lhs.false.2261

cond.false.2129:                                  ; preds = %cond.false.2124
  %512 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2130 = getelementptr inbounds %struct.image, %struct.image* %512, i32 0, i32 11
  %513 = load i32, i32* %width2130, align 4
  %mul2131 = mul nsw i32 0, %513
  %conv2132 = sext i32 %mul2131 to i64
  %add2133 = add i64 %conv2132, 16
  %mul2134 = mul i64 0, %add2133
  %sub2135 = sub i64 %mul2134, 1
  %cmp2136 = icmp ult i64 %sub2135, 0
  br i1 %cmp2136, label %cond.true.2138, label %cond.false.2161

cond.true.2138:                                   ; preds = %cond.false.2129
  %514 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2139 = getelementptr inbounds %struct.image, %struct.image* %514, i32 0, i32 11
  %515 = load i32, i32* %width2139, align 4
  %mul2140 = mul nsw i32 0, %515
  %conv2141 = sext i32 %mul2140 to i64
  %add2142 = add i64 %conv2141, 16
  %mul2143 = mul i64 0, %add2142
  %add2144 = add i64 %mul2143, 0
  %neg2145 = xor i64 %add2144, -1
  %cmp2146 = icmp eq i64 %neg2145, -1
  %conv2147 = zext i1 %cmp2146 to i32
  %sub2148 = sub nsw i32 0, %conv2147
  %conv2149 = sext i32 %sub2148 to i64
  %516 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2150 = getelementptr inbounds %struct.image, %struct.image* %516, i32 0, i32 11
  %517 = load i32, i32* %width2150, align 4
  %mul2151 = mul nsw i32 0, %517
  %conv2152 = sext i32 %mul2151 to i64
  %add2153 = add i64 %conv2152, 16
  %mul2154 = mul i64 0, %add2153
  %add2155 = add i64 %mul2154, 1
  %shl2156 = shl i64 %add2155, 62
  %sub2157 = sub i64 %shl2156, 1
  %mul2158 = mul i64 %sub2157, 2
  %add2159 = add i64 %mul2158, 1
  %sub2160 = sub i64 %conv2149, %add2159
  br label %cond.end.2168

cond.false.2161:                                  ; preds = %cond.false.2129
  %518 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2162 = getelementptr inbounds %struct.image, %struct.image* %518, i32 0, i32 11
  %519 = load i32, i32* %width2162, align 4
  %mul2163 = mul nsw i32 0, %519
  %conv2164 = sext i32 %mul2163 to i64
  %add2165 = add i64 %conv2164, 16
  %mul2166 = mul i64 0, %add2165
  %add2167 = add i64 %mul2166, 0
  br label %cond.end.2168

cond.end.2168:                                    ; preds = %cond.false.2161, %cond.true.2138
  %cond2169 = phi i64 [ %sub2160, %cond.true.2138 ], [ %add2167, %cond.false.2161 ]
  %520 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2170 = getelementptr inbounds %struct.image, %struct.image* %520, i32 0, i32 11
  %521 = load i32, i32* %width2170, align 4
  %conv2171 = sext i32 %521 to i64
  %div2172 = udiv i64 %cond2169, %conv2171
  %cmp2173 = icmp ult i64 %div2172, 16
  br i1 %cmp2173, label %cond.true.2281, label %lor.lhs.false.2261

cond.false.2175:                                  ; preds = %lor.lhs.false.2085
  %522 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2176 = getelementptr inbounds %struct.image, %struct.image* %522, i32 0, i32 11
  %523 = load i32, i32* %width2176, align 4
  %cmp2177 = icmp eq i32 %523, 0
  br i1 %cmp2177, label %cond.true.2179, label %cond.false.2180

cond.true.2179:                                   ; preds = %cond.false.2175
  br i1 false, label %cond.true.2281, label %lor.lhs.false.2261

cond.false.2180:                                  ; preds = %cond.false.2175
  br i1 false, label %cond.true.2181, label %cond.false.2227

cond.true.2181:                                   ; preds = %cond.false.2180
  %524 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2182 = getelementptr inbounds %struct.image, %struct.image* %524, i32 0, i32 11
  %525 = load i32, i32* %width2182, align 4
  %mul2183 = mul nsw i32 0, %525
  %conv2184 = sext i32 %mul2183 to i64
  %add2185 = add i64 %conv2184, 16
  %mul2186 = mul i64 0, %add2185
  %sub2187 = sub i64 %mul2186, 1
  %cmp2188 = icmp ult i64 %sub2187, 0
  br i1 %cmp2188, label %cond.true.2190, label %cond.false.2213

cond.true.2190:                                   ; preds = %cond.true.2181
  %526 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2191 = getelementptr inbounds %struct.image, %struct.image* %526, i32 0, i32 11
  %527 = load i32, i32* %width2191, align 4
  %mul2192 = mul nsw i32 0, %527
  %conv2193 = sext i32 %mul2192 to i64
  %add2194 = add i64 %conv2193, 16
  %mul2195 = mul i64 0, %add2194
  %add2196 = add i64 %mul2195, 0
  %neg2197 = xor i64 %add2196, -1
  %cmp2198 = icmp eq i64 %neg2197, -1
  %conv2199 = zext i1 %cmp2198 to i32
  %sub2200 = sub nsw i32 0, %conv2199
  %conv2201 = sext i32 %sub2200 to i64
  %528 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2202 = getelementptr inbounds %struct.image, %struct.image* %528, i32 0, i32 11
  %529 = load i32, i32* %width2202, align 4
  %mul2203 = mul nsw i32 0, %529
  %conv2204 = sext i32 %mul2203 to i64
  %add2205 = add i64 %conv2204, 16
  %mul2206 = mul i64 0, %add2205
  %add2207 = add i64 %mul2206, 1
  %shl2208 = shl i64 %add2207, 62
  %sub2209 = sub i64 %shl2208, 1
  %mul2210 = mul i64 %sub2209, 2
  %add2211 = add i64 %mul2210, 1
  %sub2212 = sub i64 %conv2201, %add2211
  br label %cond.end.2220

cond.false.2213:                                  ; preds = %cond.true.2181
  %530 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2214 = getelementptr inbounds %struct.image, %struct.image* %530, i32 0, i32 11
  %531 = load i32, i32* %width2214, align 4
  %mul2215 = mul nsw i32 0, %531
  %conv2216 = sext i32 %mul2215 to i64
  %add2217 = add i64 %conv2216, 16
  %mul2218 = mul i64 0, %add2217
  %add2219 = add i64 %mul2218, 0
  br label %cond.end.2220

cond.end.2220:                                    ; preds = %cond.false.2213, %cond.true.2190
  %cond2221 = phi i64 [ %sub2212, %cond.true.2190 ], [ %add2219, %cond.false.2213 ]
  %532 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2222 = getelementptr inbounds %struct.image, %struct.image* %532, i32 0, i32 11
  %533 = load i32, i32* %width2222, align 4
  %conv2223 = sext i32 %533 to i64
  %div2224 = udiv i64 %cond2221, %conv2223
  %cmp2225 = icmp ult i64 16, %div2224
  br i1 %cmp2225, label %cond.true.2281, label %lor.lhs.false.2261

cond.false.2227:                                  ; preds = %cond.false.2180
  %534 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2228 = getelementptr inbounds %struct.image, %struct.image* %534, i32 0, i32 11
  %535 = load i32, i32* %width2228, align 4
  %mul2229 = mul nsw i32 0, %535
  %conv2230 = sext i32 %mul2229 to i64
  %add2231 = add i64 %conv2230, 16
  %mul2232 = mul i64 0, %add2231
  %sub2233 = sub i64 %mul2232, 1
  %cmp2234 = icmp ult i64 %sub2233, 0
  br i1 %cmp2234, label %cond.true.2236, label %cond.false.2247

cond.true.2236:                                   ; preds = %cond.false.2227
  %536 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2237 = getelementptr inbounds %struct.image, %struct.image* %536, i32 0, i32 11
  %537 = load i32, i32* %width2237, align 4
  %mul2238 = mul nsw i32 0, %537
  %conv2239 = sext i32 %mul2238 to i64
  %add2240 = add i64 %conv2239, 16
  %mul2241 = mul i64 0, %add2240
  %add2242 = add i64 %mul2241, 1
  %shl2243 = shl i64 %add2242, 62
  %sub2244 = sub i64 %shl2243, 1
  %mul2245 = mul i64 %sub2244, 2
  %add2246 = add i64 %mul2245, 1
  br label %cond.end.2254

cond.false.2247:                                  ; preds = %cond.false.2227
  %538 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2248 = getelementptr inbounds %struct.image, %struct.image* %538, i32 0, i32 11
  %539 = load i32, i32* %width2248, align 4
  %mul2249 = mul nsw i32 0, %539
  %conv2250 = sext i32 %mul2249 to i64
  %add2251 = add i64 %conv2250, 16
  %mul2252 = mul i64 0, %add2251
  %sub2253 = sub i64 %mul2252, 1
  br label %cond.end.2254

cond.end.2254:                                    ; preds = %cond.false.2247, %cond.true.2236
  %cond2255 = phi i64 [ %add2246, %cond.true.2236 ], [ %sub2253, %cond.false.2247 ]
  %540 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2256 = getelementptr inbounds %struct.image, %struct.image* %540, i32 0, i32 11
  %541 = load i32, i32* %width2256, align 4
  %conv2257 = sext i32 %541 to i64
  %div2258 = udiv i64 %cond2255, %conv2257
  %cmp2259 = icmp ult i64 %div2258, 16
  br i1 %cmp2259, label %cond.true.2281, label %lor.lhs.false.2261

lor.lhs.false.2261:                               ; preds = %cond.end.2254, %cond.end.2220, %cond.true.2179, %cond.end.2168, %cond.true.2128, %cond.end.2117
  %542 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2262 = getelementptr inbounds %struct.image, %struct.image* %542, i32 0, i32 11
  %543 = load i32, i32* %width2262, align 4
  %conv2263 = sext i32 %543 to i64
  %mul2264 = mul i64 16, %conv2263
  %mul2265 = mul i64 0, %mul2264
  %sub2266 = sub i64 %mul2265, 1
  %cmp2267 = icmp ult i64 %sub2266, 0
  br i1 %cmp2267, label %land.lhs.true.2269, label %lor.lhs.false.2275

land.lhs.true.2269:                               ; preds = %lor.lhs.false.2261
  %544 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2270 = getelementptr inbounds %struct.image, %struct.image* %544, i32 0, i32 11
  %545 = load i32, i32* %width2270, align 4
  %conv2271 = sext i32 %545 to i64
  %mul2272 = mul i64 16, %conv2271
  %cmp2273 = icmp ult i64 %mul2272, -9223372036854775808
  br i1 %cmp2273, label %cond.true.2281, label %lor.lhs.false.2275

lor.lhs.false.2275:                               ; preds = %land.lhs.true.2269, %lor.lhs.false.2261
  %546 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2276 = getelementptr inbounds %struct.image, %struct.image* %546, i32 0, i32 11
  %547 = load i32, i32* %width2276, align 4
  %conv2277 = sext i32 %547 to i64
  %mul2278 = mul i64 16, %conv2277
  %cmp2279 = icmp ult i64 9223372036854775807, %mul2278
  br i1 %cmp2279, label %cond.true.2281, label %cond.false.2299

cond.true.2281:                                   ; preds = %lor.lhs.false.2275, %land.lhs.true.2269, %cond.end.2254, %cond.end.2220, %cond.true.2179, %cond.end.2168, %cond.true.2128, %cond.end.2117, %land.lhs.true.2081
  %548 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2282 = getelementptr inbounds %struct.image, %struct.image* %548, i32 0, i32 11
  %549 = load i32, i32* %width2282, align 4
  %conv2283 = sext i32 %549 to i64
  %mul2284 = mul i64 16, %conv2283
  %cmp2285 = icmp ule i64 %mul2284, 9223372036854775807
  br i1 %cmp2285, label %cond.true.2287, label %cond.false.2291

cond.true.2287:                                   ; preds = %cond.true.2281
  %550 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2288 = getelementptr inbounds %struct.image, %struct.image* %550, i32 0, i32 11
  %551 = load i32, i32* %width2288, align 4
  %conv2289 = sext i32 %551 to i64
  %mul2290 = mul i64 16, %conv2289
  br label %cond.end.2297

cond.false.2291:                                  ; preds = %cond.true.2281
  %552 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2292 = getelementptr inbounds %struct.image, %struct.image* %552, i32 0, i32 11
  %553 = load i32, i32* %width2292, align 4
  %conv2293 = sext i32 %553 to i64
  %mul2294 = mul i64 16, %conv2293
  %sub2295 = sub i64 %mul2294, -9223372036854775808
  %add2296 = add nsw i64 %sub2295, -9223372036854775808
  br label %cond.end.2297

cond.end.2297:                                    ; preds = %cond.false.2291, %cond.true.2287
  %cond2298 = phi i64 [ %mul2290, %cond.true.2287 ], [ %add2296, %cond.false.2291 ]
  store i64 %cond2298, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.2299:                                  ; preds = %lor.lhs.false.2275
  %554 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2300 = getelementptr inbounds %struct.image, %struct.image* %554, i32 0, i32 11
  %555 = load i32, i32* %width2300, align 4
  %conv2301 = sext i32 %555 to i64
  %mul2302 = mul i64 16, %conv2301
  %cmp2303 = icmp ule i64 %mul2302, 9223372036854775807
  br i1 %cmp2303, label %cond.true.2305, label %cond.false.2309

cond.true.2305:                                   ; preds = %cond.false.2299
  %556 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2306 = getelementptr inbounds %struct.image, %struct.image* %556, i32 0, i32 11
  %557 = load i32, i32* %width2306, align 4
  %conv2307 = sext i32 %557 to i64
  %mul2308 = mul i64 16, %conv2307
  br label %cond.end.2315

cond.false.2309:                                  ; preds = %cond.false.2299
  %558 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2310 = getelementptr inbounds %struct.image, %struct.image* %558, i32 0, i32 11
  %559 = load i32, i32* %width2310, align 4
  %conv2311 = sext i32 %559 to i64
  %mul2312 = mul i64 16, %conv2311
  %sub2313 = sub i64 %mul2312, -9223372036854775808
  %add2314 = add nsw i64 %sub2313, -9223372036854775808
  br label %cond.end.2315

cond.end.2315:                                    ; preds = %cond.false.2309, %cond.true.2305
  %cond2316 = phi i64 [ %mul2308, %cond.true.2305 ], [ %add2314, %cond.false.2309 ]
  store i64 %cond2316, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.2317:                                  ; preds = %cond.false.1753
  br i1 false, label %cond.true.2318, label %cond.false.2601

cond.true.2318:                                   ; preds = %cond.false.2317
  %560 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2319 = getelementptr inbounds %struct.image, %struct.image* %560, i32 0, i32 11
  %561 = load i32, i32* %width2319, align 4
  %conv2320 = sext i32 %561 to i64
  %mul2321 = mul nsw i64 0, %conv2320
  %add2322 = add nsw i64 %mul2321, 16
  %mul2323 = mul nsw i64 0, %add2322
  %sub2324 = sub nsw i64 %mul2323, 1
  %cmp2325 = icmp slt i64 %sub2324, 0
  br i1 %cmp2325, label %cond.true.2327, label %cond.false.2350

cond.true.2327:                                   ; preds = %cond.true.2318
  %562 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2328 = getelementptr inbounds %struct.image, %struct.image* %562, i32 0, i32 11
  %563 = load i32, i32* %width2328, align 4
  %conv2329 = sext i32 %563 to i64
  %mul2330 = mul nsw i64 0, %conv2329
  %add2331 = add nsw i64 %mul2330, 16
  %mul2332 = mul nsw i64 0, %add2331
  %add2333 = add nsw i64 %mul2332, 0
  %neg2334 = xor i64 %add2333, -1
  %cmp2335 = icmp eq i64 %neg2334, -1
  %conv2336 = zext i1 %cmp2335 to i32
  %sub2337 = sub nsw i32 0, %conv2336
  %conv2338 = sext i32 %sub2337 to i64
  %564 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2339 = getelementptr inbounds %struct.image, %struct.image* %564, i32 0, i32 11
  %565 = load i32, i32* %width2339, align 4
  %conv2340 = sext i32 %565 to i64
  %mul2341 = mul nsw i64 0, %conv2340
  %add2342 = add nsw i64 %mul2341, 16
  %mul2343 = mul nsw i64 0, %add2342
  %add2344 = add nsw i64 %mul2343, 1
  %shl2345 = shl i64 %add2344, 62
  %sub2346 = sub nsw i64 %shl2345, 1
  %mul2347 = mul nsw i64 %sub2346, 2
  %add2348 = add nsw i64 %mul2347, 1
  %sub2349 = sub nsw i64 %conv2338, %add2348
  br label %cond.end.2357

cond.false.2350:                                  ; preds = %cond.true.2318
  %566 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2351 = getelementptr inbounds %struct.image, %struct.image* %566, i32 0, i32 11
  %567 = load i32, i32* %width2351, align 4
  %conv2352 = sext i32 %567 to i64
  %mul2353 = mul nsw i64 0, %conv2352
  %add2354 = add nsw i64 %mul2353, 16
  %mul2355 = mul nsw i64 0, %add2354
  %add2356 = add nsw i64 %mul2355, 0
  br label %cond.end.2357

cond.end.2357:                                    ; preds = %cond.false.2350, %cond.true.2327
  %cond2358 = phi i64 [ %sub2349, %cond.true.2327 ], [ %add2356, %cond.false.2350 ]
  %cmp2359 = icmp eq i64 %cond2358, 0
  br i1 %cmp2359, label %land.lhs.true.2361, label %lor.lhs.false.2366

land.lhs.true.2361:                               ; preds = %cond.end.2357
  %568 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2362 = getelementptr inbounds %struct.image, %struct.image* %568, i32 0, i32 11
  %569 = load i32, i32* %width2362, align 4
  %conv2363 = sext i32 %569 to i64
  %cmp2364 = icmp slt i64 %conv2363, 0
  br i1 %cmp2364, label %cond.true.2565, label %lor.lhs.false.2366

lor.lhs.false.2366:                               ; preds = %land.lhs.true.2361, %cond.end.2357
  %570 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2367 = getelementptr inbounds %struct.image, %struct.image* %570, i32 0, i32 11
  %571 = load i32, i32* %width2367, align 4
  %conv2368 = sext i32 %571 to i64
  %cmp2369 = icmp slt i64 %conv2368, 0
  br i1 %cmp2369, label %cond.true.2371, label %cond.false.2458

cond.true.2371:                                   ; preds = %lor.lhs.false.2366
  br i1 false, label %cond.true.2372, label %cond.false.2406

cond.true.2372:                                   ; preds = %cond.true.2371
  %572 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2373 = getelementptr inbounds %struct.image, %struct.image* %572, i32 0, i32 11
  %573 = load i32, i32* %width2373, align 4
  %conv2374 = sext i32 %573 to i64
  %mul2375 = mul nsw i64 0, %conv2374
  %add2376 = add nsw i64 %mul2375, 16
  %mul2377 = mul nsw i64 0, %add2376
  %sub2378 = sub nsw i64 %mul2377, 1
  %cmp2379 = icmp slt i64 %sub2378, 0
  br i1 %cmp2379, label %cond.true.2381, label %cond.false.2392

cond.true.2381:                                   ; preds = %cond.true.2372
  %574 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2382 = getelementptr inbounds %struct.image, %struct.image* %574, i32 0, i32 11
  %575 = load i32, i32* %width2382, align 4
  %conv2383 = sext i32 %575 to i64
  %mul2384 = mul nsw i64 0, %conv2383
  %add2385 = add nsw i64 %mul2384, 16
  %mul2386 = mul nsw i64 0, %add2385
  %add2387 = add nsw i64 %mul2386, 1
  %shl2388 = shl i64 %add2387, 62
  %sub2389 = sub nsw i64 %shl2388, 1
  %mul2390 = mul nsw i64 %sub2389, 2
  %add2391 = add nsw i64 %mul2390, 1
  br label %cond.end.2399

cond.false.2392:                                  ; preds = %cond.true.2372
  %576 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2393 = getelementptr inbounds %struct.image, %struct.image* %576, i32 0, i32 11
  %577 = load i32, i32* %width2393, align 4
  %conv2394 = sext i32 %577 to i64
  %mul2395 = mul nsw i64 0, %conv2394
  %add2396 = add nsw i64 %mul2395, 16
  %mul2397 = mul nsw i64 0, %add2396
  %sub2398 = sub nsw i64 %mul2397, 1
  br label %cond.end.2399

cond.end.2399:                                    ; preds = %cond.false.2392, %cond.true.2381
  %cond2400 = phi i64 [ %add2391, %cond.true.2381 ], [ %sub2398, %cond.false.2392 ]
  %578 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2401 = getelementptr inbounds %struct.image, %struct.image* %578, i32 0, i32 11
  %579 = load i32, i32* %width2401, align 4
  %conv2402 = sext i32 %579 to i64
  %div2403 = sdiv i64 %cond2400, %conv2402
  %cmp2404 = icmp slt i64 16, %div2403
  br i1 %cmp2404, label %cond.true.2565, label %lor.lhs.false.2545

cond.false.2406:                                  ; preds = %cond.true.2371
  %580 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2407 = getelementptr inbounds %struct.image, %struct.image* %580, i32 0, i32 11
  %581 = load i32, i32* %width2407, align 4
  %conv2408 = sext i32 %581 to i64
  %cmp2409 = icmp eq i64 %conv2408, -1
  br i1 %cmp2409, label %cond.true.2411, label %cond.false.2412

cond.true.2411:                                   ; preds = %cond.false.2406
  br i1 false, label %cond.true.2565, label %lor.lhs.false.2545

cond.false.2412:                                  ; preds = %cond.false.2406
  %582 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2413 = getelementptr inbounds %struct.image, %struct.image* %582, i32 0, i32 11
  %583 = load i32, i32* %width2413, align 4
  %conv2414 = sext i32 %583 to i64
  %mul2415 = mul nsw i64 0, %conv2414
  %add2416 = add nsw i64 %mul2415, 16
  %mul2417 = mul nsw i64 0, %add2416
  %sub2418 = sub nsw i64 %mul2417, 1
  %cmp2419 = icmp slt i64 %sub2418, 0
  br i1 %cmp2419, label %cond.true.2421, label %cond.false.2444

cond.true.2421:                                   ; preds = %cond.false.2412
  %584 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2422 = getelementptr inbounds %struct.image, %struct.image* %584, i32 0, i32 11
  %585 = load i32, i32* %width2422, align 4
  %conv2423 = sext i32 %585 to i64
  %mul2424 = mul nsw i64 0, %conv2423
  %add2425 = add nsw i64 %mul2424, 16
  %mul2426 = mul nsw i64 0, %add2425
  %add2427 = add nsw i64 %mul2426, 0
  %neg2428 = xor i64 %add2427, -1
  %cmp2429 = icmp eq i64 %neg2428, -1
  %conv2430 = zext i1 %cmp2429 to i32
  %sub2431 = sub nsw i32 0, %conv2430
  %conv2432 = sext i32 %sub2431 to i64
  %586 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2433 = getelementptr inbounds %struct.image, %struct.image* %586, i32 0, i32 11
  %587 = load i32, i32* %width2433, align 4
  %conv2434 = sext i32 %587 to i64
  %mul2435 = mul nsw i64 0, %conv2434
  %add2436 = add nsw i64 %mul2435, 16
  %mul2437 = mul nsw i64 0, %add2436
  %add2438 = add nsw i64 %mul2437, 1
  %shl2439 = shl i64 %add2438, 62
  %sub2440 = sub nsw i64 %shl2439, 1
  %mul2441 = mul nsw i64 %sub2440, 2
  %add2442 = add nsw i64 %mul2441, 1
  %sub2443 = sub nsw i64 %conv2432, %add2442
  br label %cond.end.2451

cond.false.2444:                                  ; preds = %cond.false.2412
  %588 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2445 = getelementptr inbounds %struct.image, %struct.image* %588, i32 0, i32 11
  %589 = load i32, i32* %width2445, align 4
  %conv2446 = sext i32 %589 to i64
  %mul2447 = mul nsw i64 0, %conv2446
  %add2448 = add nsw i64 %mul2447, 16
  %mul2449 = mul nsw i64 0, %add2448
  %add2450 = add nsw i64 %mul2449, 0
  br label %cond.end.2451

cond.end.2451:                                    ; preds = %cond.false.2444, %cond.true.2421
  %cond2452 = phi i64 [ %sub2443, %cond.true.2421 ], [ %add2450, %cond.false.2444 ]
  %590 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2453 = getelementptr inbounds %struct.image, %struct.image* %590, i32 0, i32 11
  %591 = load i32, i32* %width2453, align 4
  %conv2454 = sext i32 %591 to i64
  %div2455 = sdiv i64 %cond2452, %conv2454
  %cmp2456 = icmp slt i64 %div2455, 16
  br i1 %cmp2456, label %cond.true.2565, label %lor.lhs.false.2545

cond.false.2458:                                  ; preds = %lor.lhs.false.2366
  %592 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2459 = getelementptr inbounds %struct.image, %struct.image* %592, i32 0, i32 11
  %593 = load i32, i32* %width2459, align 4
  %conv2460 = sext i32 %593 to i64
  %cmp2461 = icmp eq i64 %conv2460, 0
  br i1 %cmp2461, label %cond.true.2463, label %cond.false.2464

cond.true.2463:                                   ; preds = %cond.false.2458
  br i1 false, label %cond.true.2565, label %lor.lhs.false.2545

cond.false.2464:                                  ; preds = %cond.false.2458
  br i1 false, label %cond.true.2465, label %cond.false.2511

cond.true.2465:                                   ; preds = %cond.false.2464
  %594 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2466 = getelementptr inbounds %struct.image, %struct.image* %594, i32 0, i32 11
  %595 = load i32, i32* %width2466, align 4
  %conv2467 = sext i32 %595 to i64
  %mul2468 = mul nsw i64 0, %conv2467
  %add2469 = add nsw i64 %mul2468, 16
  %mul2470 = mul nsw i64 0, %add2469
  %sub2471 = sub nsw i64 %mul2470, 1
  %cmp2472 = icmp slt i64 %sub2471, 0
  br i1 %cmp2472, label %cond.true.2474, label %cond.false.2497

cond.true.2474:                                   ; preds = %cond.true.2465
  %596 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2475 = getelementptr inbounds %struct.image, %struct.image* %596, i32 0, i32 11
  %597 = load i32, i32* %width2475, align 4
  %conv2476 = sext i32 %597 to i64
  %mul2477 = mul nsw i64 0, %conv2476
  %add2478 = add nsw i64 %mul2477, 16
  %mul2479 = mul nsw i64 0, %add2478
  %add2480 = add nsw i64 %mul2479, 0
  %neg2481 = xor i64 %add2480, -1
  %cmp2482 = icmp eq i64 %neg2481, -1
  %conv2483 = zext i1 %cmp2482 to i32
  %sub2484 = sub nsw i32 0, %conv2483
  %conv2485 = sext i32 %sub2484 to i64
  %598 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2486 = getelementptr inbounds %struct.image, %struct.image* %598, i32 0, i32 11
  %599 = load i32, i32* %width2486, align 4
  %conv2487 = sext i32 %599 to i64
  %mul2488 = mul nsw i64 0, %conv2487
  %add2489 = add nsw i64 %mul2488, 16
  %mul2490 = mul nsw i64 0, %add2489
  %add2491 = add nsw i64 %mul2490, 1
  %shl2492 = shl i64 %add2491, 62
  %sub2493 = sub nsw i64 %shl2492, 1
  %mul2494 = mul nsw i64 %sub2493, 2
  %add2495 = add nsw i64 %mul2494, 1
  %sub2496 = sub nsw i64 %conv2485, %add2495
  br label %cond.end.2504

cond.false.2497:                                  ; preds = %cond.true.2465
  %600 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2498 = getelementptr inbounds %struct.image, %struct.image* %600, i32 0, i32 11
  %601 = load i32, i32* %width2498, align 4
  %conv2499 = sext i32 %601 to i64
  %mul2500 = mul nsw i64 0, %conv2499
  %add2501 = add nsw i64 %mul2500, 16
  %mul2502 = mul nsw i64 0, %add2501
  %add2503 = add nsw i64 %mul2502, 0
  br label %cond.end.2504

cond.end.2504:                                    ; preds = %cond.false.2497, %cond.true.2474
  %cond2505 = phi i64 [ %sub2496, %cond.true.2474 ], [ %add2503, %cond.false.2497 ]
  %602 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2506 = getelementptr inbounds %struct.image, %struct.image* %602, i32 0, i32 11
  %603 = load i32, i32* %width2506, align 4
  %conv2507 = sext i32 %603 to i64
  %div2508 = sdiv i64 %cond2505, %conv2507
  %cmp2509 = icmp slt i64 16, %div2508
  br i1 %cmp2509, label %cond.true.2565, label %lor.lhs.false.2545

cond.false.2511:                                  ; preds = %cond.false.2464
  %604 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2512 = getelementptr inbounds %struct.image, %struct.image* %604, i32 0, i32 11
  %605 = load i32, i32* %width2512, align 4
  %conv2513 = sext i32 %605 to i64
  %mul2514 = mul nsw i64 0, %conv2513
  %add2515 = add nsw i64 %mul2514, 16
  %mul2516 = mul nsw i64 0, %add2515
  %sub2517 = sub nsw i64 %mul2516, 1
  %cmp2518 = icmp slt i64 %sub2517, 0
  br i1 %cmp2518, label %cond.true.2520, label %cond.false.2531

cond.true.2520:                                   ; preds = %cond.false.2511
  %606 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2521 = getelementptr inbounds %struct.image, %struct.image* %606, i32 0, i32 11
  %607 = load i32, i32* %width2521, align 4
  %conv2522 = sext i32 %607 to i64
  %mul2523 = mul nsw i64 0, %conv2522
  %add2524 = add nsw i64 %mul2523, 16
  %mul2525 = mul nsw i64 0, %add2524
  %add2526 = add nsw i64 %mul2525, 1
  %shl2527 = shl i64 %add2526, 62
  %sub2528 = sub nsw i64 %shl2527, 1
  %mul2529 = mul nsw i64 %sub2528, 2
  %add2530 = add nsw i64 %mul2529, 1
  br label %cond.end.2538

cond.false.2531:                                  ; preds = %cond.false.2511
  %608 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2532 = getelementptr inbounds %struct.image, %struct.image* %608, i32 0, i32 11
  %609 = load i32, i32* %width2532, align 4
  %conv2533 = sext i32 %609 to i64
  %mul2534 = mul nsw i64 0, %conv2533
  %add2535 = add nsw i64 %mul2534, 16
  %mul2536 = mul nsw i64 0, %add2535
  %sub2537 = sub nsw i64 %mul2536, 1
  br label %cond.end.2538

cond.end.2538:                                    ; preds = %cond.false.2531, %cond.true.2520
  %cond2539 = phi i64 [ %add2530, %cond.true.2520 ], [ %sub2537, %cond.false.2531 ]
  %610 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2540 = getelementptr inbounds %struct.image, %struct.image* %610, i32 0, i32 11
  %611 = load i32, i32* %width2540, align 4
  %conv2541 = sext i32 %611 to i64
  %div2542 = sdiv i64 %cond2539, %conv2541
  %cmp2543 = icmp slt i64 %div2542, 16
  br i1 %cmp2543, label %cond.true.2565, label %lor.lhs.false.2545

lor.lhs.false.2545:                               ; preds = %cond.end.2538, %cond.end.2504, %cond.true.2463, %cond.end.2451, %cond.true.2411, %cond.end.2399
  %612 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2546 = getelementptr inbounds %struct.image, %struct.image* %612, i32 0, i32 11
  %613 = load i32, i32* %width2546, align 4
  %conv2547 = sext i32 %613 to i64
  %mul2548 = mul nsw i64 16, %conv2547
  %mul2549 = mul nsw i64 0, %mul2548
  %sub2550 = sub nsw i64 %mul2549, 1
  %cmp2551 = icmp slt i64 %sub2550, 0
  br i1 %cmp2551, label %land.lhs.true.2553, label %lor.lhs.false.2559

land.lhs.true.2553:                               ; preds = %lor.lhs.false.2545
  %614 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2554 = getelementptr inbounds %struct.image, %struct.image* %614, i32 0, i32 11
  %615 = load i32, i32* %width2554, align 4
  %conv2555 = sext i32 %615 to i64
  %mul2556 = mul nsw i64 16, %conv2555
  %cmp2557 = icmp slt i64 %mul2556, -9223372036854775808
  br i1 %cmp2557, label %cond.true.2565, label %lor.lhs.false.2559

lor.lhs.false.2559:                               ; preds = %land.lhs.true.2553, %lor.lhs.false.2545
  %616 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2560 = getelementptr inbounds %struct.image, %struct.image* %616, i32 0, i32 11
  %617 = load i32, i32* %width2560, align 4
  %conv2561 = sext i32 %617 to i64
  %mul2562 = mul nsw i64 16, %conv2561
  %cmp2563 = icmp slt i64 9223372036854775807, %mul2562
  br i1 %cmp2563, label %cond.true.2565, label %cond.false.2583

cond.true.2565:                                   ; preds = %lor.lhs.false.2559, %land.lhs.true.2553, %cond.end.2538, %cond.end.2504, %cond.true.2463, %cond.end.2451, %cond.true.2411, %cond.end.2399, %land.lhs.true.2361
  %618 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2566 = getelementptr inbounds %struct.image, %struct.image* %618, i32 0, i32 11
  %619 = load i32, i32* %width2566, align 4
  %conv2567 = sext i32 %619 to i64
  %mul2568 = mul i64 16, %conv2567
  %cmp2569 = icmp ule i64 %mul2568, 9223372036854775807
  br i1 %cmp2569, label %cond.true.2571, label %cond.false.2575

cond.true.2571:                                   ; preds = %cond.true.2565
  %620 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2572 = getelementptr inbounds %struct.image, %struct.image* %620, i32 0, i32 11
  %621 = load i32, i32* %width2572, align 4
  %conv2573 = sext i32 %621 to i64
  %mul2574 = mul i64 16, %conv2573
  br label %cond.end.2581

cond.false.2575:                                  ; preds = %cond.true.2565
  %622 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2576 = getelementptr inbounds %struct.image, %struct.image* %622, i32 0, i32 11
  %623 = load i32, i32* %width2576, align 4
  %conv2577 = sext i32 %623 to i64
  %mul2578 = mul i64 16, %conv2577
  %sub2579 = sub i64 %mul2578, -9223372036854775808
  %add2580 = add nsw i64 %sub2579, -9223372036854775808
  br label %cond.end.2581

cond.end.2581:                                    ; preds = %cond.false.2575, %cond.true.2571
  %cond2582 = phi i64 [ %mul2574, %cond.true.2571 ], [ %add2580, %cond.false.2575 ]
  store i64 %cond2582, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.2583:                                  ; preds = %lor.lhs.false.2559
  %624 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2584 = getelementptr inbounds %struct.image, %struct.image* %624, i32 0, i32 11
  %625 = load i32, i32* %width2584, align 4
  %conv2585 = sext i32 %625 to i64
  %mul2586 = mul i64 16, %conv2585
  %cmp2587 = icmp ule i64 %mul2586, 9223372036854775807
  br i1 %cmp2587, label %cond.true.2589, label %cond.false.2593

cond.true.2589:                                   ; preds = %cond.false.2583
  %626 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2590 = getelementptr inbounds %struct.image, %struct.image* %626, i32 0, i32 11
  %627 = load i32, i32* %width2590, align 4
  %conv2591 = sext i32 %627 to i64
  %mul2592 = mul i64 16, %conv2591
  br label %cond.end.2599

cond.false.2593:                                  ; preds = %cond.false.2583
  %628 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2594 = getelementptr inbounds %struct.image, %struct.image* %628, i32 0, i32 11
  %629 = load i32, i32* %width2594, align 4
  %conv2595 = sext i32 %629 to i64
  %mul2596 = mul i64 16, %conv2595
  %sub2597 = sub i64 %mul2596, -9223372036854775808
  %add2598 = add nsw i64 %sub2597, -9223372036854775808
  br label %cond.end.2599

cond.end.2599:                                    ; preds = %cond.false.2593, %cond.true.2589
  %cond2600 = phi i64 [ %mul2592, %cond.true.2589 ], [ %add2598, %cond.false.2593 ]
  store i64 %cond2600, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

cond.false.2601:                                  ; preds = %cond.false.2317
  %630 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2602 = getelementptr inbounds %struct.image, %struct.image* %630, i32 0, i32 11
  %631 = load i32, i32* %width2602, align 4
  %mul2603 = mul nsw i32 0, %631
  %conv2604 = sext i32 %mul2603 to i64
  %add2605 = add i64 %conv2604, 16
  %mul2606 = mul i64 0, %add2605
  %sub2607 = sub i64 %mul2606, 1
  %cmp2608 = icmp ult i64 %sub2607, 0
  br i1 %cmp2608, label %cond.true.2610, label %cond.false.2633

cond.true.2610:                                   ; preds = %cond.false.2601
  %632 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2611 = getelementptr inbounds %struct.image, %struct.image* %632, i32 0, i32 11
  %633 = load i32, i32* %width2611, align 4
  %mul2612 = mul nsw i32 0, %633
  %conv2613 = sext i32 %mul2612 to i64
  %add2614 = add i64 %conv2613, 16
  %mul2615 = mul i64 0, %add2614
  %add2616 = add i64 %mul2615, 0
  %neg2617 = xor i64 %add2616, -1
  %cmp2618 = icmp eq i64 %neg2617, -1
  %conv2619 = zext i1 %cmp2618 to i32
  %sub2620 = sub nsw i32 0, %conv2619
  %conv2621 = sext i32 %sub2620 to i64
  %634 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2622 = getelementptr inbounds %struct.image, %struct.image* %634, i32 0, i32 11
  %635 = load i32, i32* %width2622, align 4
  %mul2623 = mul nsw i32 0, %635
  %conv2624 = sext i32 %mul2623 to i64
  %add2625 = add i64 %conv2624, 16
  %mul2626 = mul i64 0, %add2625
  %add2627 = add i64 %mul2626, 1
  %shl2628 = shl i64 %add2627, 62
  %sub2629 = sub i64 %shl2628, 1
  %mul2630 = mul i64 %sub2629, 2
  %add2631 = add i64 %mul2630, 1
  %sub2632 = sub i64 %conv2621, %add2631
  br label %cond.end.2640

cond.false.2633:                                  ; preds = %cond.false.2601
  %636 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2634 = getelementptr inbounds %struct.image, %struct.image* %636, i32 0, i32 11
  %637 = load i32, i32* %width2634, align 4
  %mul2635 = mul nsw i32 0, %637
  %conv2636 = sext i32 %mul2635 to i64
  %add2637 = add i64 %conv2636, 16
  %mul2638 = mul i64 0, %add2637
  %add2639 = add i64 %mul2638, 0
  br label %cond.end.2640

cond.end.2640:                                    ; preds = %cond.false.2633, %cond.true.2610
  %cond2641 = phi i64 [ %sub2632, %cond.true.2610 ], [ %add2639, %cond.false.2633 ]
  %cmp2642 = icmp eq i64 %cond2641, 0
  br i1 %cmp2642, label %land.lhs.true.2644, label %lor.lhs.false.2648

land.lhs.true.2644:                               ; preds = %cond.end.2640
  %638 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2645 = getelementptr inbounds %struct.image, %struct.image* %638, i32 0, i32 11
  %639 = load i32, i32* %width2645, align 4
  %cmp2646 = icmp slt i32 %639, 0
  br i1 %cmp2646, label %cond.true.2844, label %lor.lhs.false.2648

lor.lhs.false.2648:                               ; preds = %land.lhs.true.2644, %cond.end.2640
  %640 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2649 = getelementptr inbounds %struct.image, %struct.image* %640, i32 0, i32 11
  %641 = load i32, i32* %width2649, align 4
  %cmp2650 = icmp slt i32 %641, 0
  br i1 %cmp2650, label %cond.true.2652, label %cond.false.2738

cond.true.2652:                                   ; preds = %lor.lhs.false.2648
  br i1 false, label %cond.true.2653, label %cond.false.2687

cond.true.2653:                                   ; preds = %cond.true.2652
  %642 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2654 = getelementptr inbounds %struct.image, %struct.image* %642, i32 0, i32 11
  %643 = load i32, i32* %width2654, align 4
  %mul2655 = mul nsw i32 0, %643
  %conv2656 = sext i32 %mul2655 to i64
  %add2657 = add i64 %conv2656, 16
  %mul2658 = mul i64 0, %add2657
  %sub2659 = sub i64 %mul2658, 1
  %cmp2660 = icmp ult i64 %sub2659, 0
  br i1 %cmp2660, label %cond.true.2662, label %cond.false.2673

cond.true.2662:                                   ; preds = %cond.true.2653
  %644 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2663 = getelementptr inbounds %struct.image, %struct.image* %644, i32 0, i32 11
  %645 = load i32, i32* %width2663, align 4
  %mul2664 = mul nsw i32 0, %645
  %conv2665 = sext i32 %mul2664 to i64
  %add2666 = add i64 %conv2665, 16
  %mul2667 = mul i64 0, %add2666
  %add2668 = add i64 %mul2667, 1
  %shl2669 = shl i64 %add2668, 62
  %sub2670 = sub i64 %shl2669, 1
  %mul2671 = mul i64 %sub2670, 2
  %add2672 = add i64 %mul2671, 1
  br label %cond.end.2680

cond.false.2673:                                  ; preds = %cond.true.2653
  %646 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2674 = getelementptr inbounds %struct.image, %struct.image* %646, i32 0, i32 11
  %647 = load i32, i32* %width2674, align 4
  %mul2675 = mul nsw i32 0, %647
  %conv2676 = sext i32 %mul2675 to i64
  %add2677 = add i64 %conv2676, 16
  %mul2678 = mul i64 0, %add2677
  %sub2679 = sub i64 %mul2678, 1
  br label %cond.end.2680

cond.end.2680:                                    ; preds = %cond.false.2673, %cond.true.2662
  %cond2681 = phi i64 [ %add2672, %cond.true.2662 ], [ %sub2679, %cond.false.2673 ]
  %648 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2682 = getelementptr inbounds %struct.image, %struct.image* %648, i32 0, i32 11
  %649 = load i32, i32* %width2682, align 4
  %conv2683 = sext i32 %649 to i64
  %div2684 = udiv i64 %cond2681, %conv2683
  %cmp2685 = icmp ult i64 16, %div2684
  br i1 %cmp2685, label %cond.true.2844, label %lor.lhs.false.2824

cond.false.2687:                                  ; preds = %cond.true.2652
  %650 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2688 = getelementptr inbounds %struct.image, %struct.image* %650, i32 0, i32 11
  %651 = load i32, i32* %width2688, align 4
  %cmp2689 = icmp eq i32 %651, -1
  br i1 %cmp2689, label %cond.true.2691, label %cond.false.2692

cond.true.2691:                                   ; preds = %cond.false.2687
  br i1 false, label %cond.true.2844, label %lor.lhs.false.2824

cond.false.2692:                                  ; preds = %cond.false.2687
  %652 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2693 = getelementptr inbounds %struct.image, %struct.image* %652, i32 0, i32 11
  %653 = load i32, i32* %width2693, align 4
  %mul2694 = mul nsw i32 0, %653
  %conv2695 = sext i32 %mul2694 to i64
  %add2696 = add i64 %conv2695, 16
  %mul2697 = mul i64 0, %add2696
  %sub2698 = sub i64 %mul2697, 1
  %cmp2699 = icmp ult i64 %sub2698, 0
  br i1 %cmp2699, label %cond.true.2701, label %cond.false.2724

cond.true.2701:                                   ; preds = %cond.false.2692
  %654 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2702 = getelementptr inbounds %struct.image, %struct.image* %654, i32 0, i32 11
  %655 = load i32, i32* %width2702, align 4
  %mul2703 = mul nsw i32 0, %655
  %conv2704 = sext i32 %mul2703 to i64
  %add2705 = add i64 %conv2704, 16
  %mul2706 = mul i64 0, %add2705
  %add2707 = add i64 %mul2706, 0
  %neg2708 = xor i64 %add2707, -1
  %cmp2709 = icmp eq i64 %neg2708, -1
  %conv2710 = zext i1 %cmp2709 to i32
  %sub2711 = sub nsw i32 0, %conv2710
  %conv2712 = sext i32 %sub2711 to i64
  %656 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2713 = getelementptr inbounds %struct.image, %struct.image* %656, i32 0, i32 11
  %657 = load i32, i32* %width2713, align 4
  %mul2714 = mul nsw i32 0, %657
  %conv2715 = sext i32 %mul2714 to i64
  %add2716 = add i64 %conv2715, 16
  %mul2717 = mul i64 0, %add2716
  %add2718 = add i64 %mul2717, 1
  %shl2719 = shl i64 %add2718, 62
  %sub2720 = sub i64 %shl2719, 1
  %mul2721 = mul i64 %sub2720, 2
  %add2722 = add i64 %mul2721, 1
  %sub2723 = sub i64 %conv2712, %add2722
  br label %cond.end.2731

cond.false.2724:                                  ; preds = %cond.false.2692
  %658 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2725 = getelementptr inbounds %struct.image, %struct.image* %658, i32 0, i32 11
  %659 = load i32, i32* %width2725, align 4
  %mul2726 = mul nsw i32 0, %659
  %conv2727 = sext i32 %mul2726 to i64
  %add2728 = add i64 %conv2727, 16
  %mul2729 = mul i64 0, %add2728
  %add2730 = add i64 %mul2729, 0
  br label %cond.end.2731

cond.end.2731:                                    ; preds = %cond.false.2724, %cond.true.2701
  %cond2732 = phi i64 [ %sub2723, %cond.true.2701 ], [ %add2730, %cond.false.2724 ]
  %660 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2733 = getelementptr inbounds %struct.image, %struct.image* %660, i32 0, i32 11
  %661 = load i32, i32* %width2733, align 4
  %conv2734 = sext i32 %661 to i64
  %div2735 = udiv i64 %cond2732, %conv2734
  %cmp2736 = icmp ult i64 %div2735, 16
  br i1 %cmp2736, label %cond.true.2844, label %lor.lhs.false.2824

cond.false.2738:                                  ; preds = %lor.lhs.false.2648
  %662 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2739 = getelementptr inbounds %struct.image, %struct.image* %662, i32 0, i32 11
  %663 = load i32, i32* %width2739, align 4
  %cmp2740 = icmp eq i32 %663, 0
  br i1 %cmp2740, label %cond.true.2742, label %cond.false.2743

cond.true.2742:                                   ; preds = %cond.false.2738
  br i1 false, label %cond.true.2844, label %lor.lhs.false.2824

cond.false.2743:                                  ; preds = %cond.false.2738
  br i1 false, label %cond.true.2744, label %cond.false.2790

cond.true.2744:                                   ; preds = %cond.false.2743
  %664 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2745 = getelementptr inbounds %struct.image, %struct.image* %664, i32 0, i32 11
  %665 = load i32, i32* %width2745, align 4
  %mul2746 = mul nsw i32 0, %665
  %conv2747 = sext i32 %mul2746 to i64
  %add2748 = add i64 %conv2747, 16
  %mul2749 = mul i64 0, %add2748
  %sub2750 = sub i64 %mul2749, 1
  %cmp2751 = icmp ult i64 %sub2750, 0
  br i1 %cmp2751, label %cond.true.2753, label %cond.false.2776

cond.true.2753:                                   ; preds = %cond.true.2744
  %666 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2754 = getelementptr inbounds %struct.image, %struct.image* %666, i32 0, i32 11
  %667 = load i32, i32* %width2754, align 4
  %mul2755 = mul nsw i32 0, %667
  %conv2756 = sext i32 %mul2755 to i64
  %add2757 = add i64 %conv2756, 16
  %mul2758 = mul i64 0, %add2757
  %add2759 = add i64 %mul2758, 0
  %neg2760 = xor i64 %add2759, -1
  %cmp2761 = icmp eq i64 %neg2760, -1
  %conv2762 = zext i1 %cmp2761 to i32
  %sub2763 = sub nsw i32 0, %conv2762
  %conv2764 = sext i32 %sub2763 to i64
  %668 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2765 = getelementptr inbounds %struct.image, %struct.image* %668, i32 0, i32 11
  %669 = load i32, i32* %width2765, align 4
  %mul2766 = mul nsw i32 0, %669
  %conv2767 = sext i32 %mul2766 to i64
  %add2768 = add i64 %conv2767, 16
  %mul2769 = mul i64 0, %add2768
  %add2770 = add i64 %mul2769, 1
  %shl2771 = shl i64 %add2770, 62
  %sub2772 = sub i64 %shl2771, 1
  %mul2773 = mul i64 %sub2772, 2
  %add2774 = add i64 %mul2773, 1
  %sub2775 = sub i64 %conv2764, %add2774
  br label %cond.end.2783

cond.false.2776:                                  ; preds = %cond.true.2744
  %670 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2777 = getelementptr inbounds %struct.image, %struct.image* %670, i32 0, i32 11
  %671 = load i32, i32* %width2777, align 4
  %mul2778 = mul nsw i32 0, %671
  %conv2779 = sext i32 %mul2778 to i64
  %add2780 = add i64 %conv2779, 16
  %mul2781 = mul i64 0, %add2780
  %add2782 = add i64 %mul2781, 0
  br label %cond.end.2783

cond.end.2783:                                    ; preds = %cond.false.2776, %cond.true.2753
  %cond2784 = phi i64 [ %sub2775, %cond.true.2753 ], [ %add2782, %cond.false.2776 ]
  %672 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2785 = getelementptr inbounds %struct.image, %struct.image* %672, i32 0, i32 11
  %673 = load i32, i32* %width2785, align 4
  %conv2786 = sext i32 %673 to i64
  %div2787 = udiv i64 %cond2784, %conv2786
  %cmp2788 = icmp ult i64 16, %div2787
  br i1 %cmp2788, label %cond.true.2844, label %lor.lhs.false.2824

cond.false.2790:                                  ; preds = %cond.false.2743
  %674 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2791 = getelementptr inbounds %struct.image, %struct.image* %674, i32 0, i32 11
  %675 = load i32, i32* %width2791, align 4
  %mul2792 = mul nsw i32 0, %675
  %conv2793 = sext i32 %mul2792 to i64
  %add2794 = add i64 %conv2793, 16
  %mul2795 = mul i64 0, %add2794
  %sub2796 = sub i64 %mul2795, 1
  %cmp2797 = icmp ult i64 %sub2796, 0
  br i1 %cmp2797, label %cond.true.2799, label %cond.false.2810

cond.true.2799:                                   ; preds = %cond.false.2790
  %676 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2800 = getelementptr inbounds %struct.image, %struct.image* %676, i32 0, i32 11
  %677 = load i32, i32* %width2800, align 4
  %mul2801 = mul nsw i32 0, %677
  %conv2802 = sext i32 %mul2801 to i64
  %add2803 = add i64 %conv2802, 16
  %mul2804 = mul i64 0, %add2803
  %add2805 = add i64 %mul2804, 1
  %shl2806 = shl i64 %add2805, 62
  %sub2807 = sub i64 %shl2806, 1
  %mul2808 = mul i64 %sub2807, 2
  %add2809 = add i64 %mul2808, 1
  br label %cond.end.2817

cond.false.2810:                                  ; preds = %cond.false.2790
  %678 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2811 = getelementptr inbounds %struct.image, %struct.image* %678, i32 0, i32 11
  %679 = load i32, i32* %width2811, align 4
  %mul2812 = mul nsw i32 0, %679
  %conv2813 = sext i32 %mul2812 to i64
  %add2814 = add i64 %conv2813, 16
  %mul2815 = mul i64 0, %add2814
  %sub2816 = sub i64 %mul2815, 1
  br label %cond.end.2817

cond.end.2817:                                    ; preds = %cond.false.2810, %cond.true.2799
  %cond2818 = phi i64 [ %add2809, %cond.true.2799 ], [ %sub2816, %cond.false.2810 ]
  %680 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2819 = getelementptr inbounds %struct.image, %struct.image* %680, i32 0, i32 11
  %681 = load i32, i32* %width2819, align 4
  %conv2820 = sext i32 %681 to i64
  %div2821 = udiv i64 %cond2818, %conv2820
  %cmp2822 = icmp ult i64 %div2821, 16
  br i1 %cmp2822, label %cond.true.2844, label %lor.lhs.false.2824

lor.lhs.false.2824:                               ; preds = %cond.end.2817, %cond.end.2783, %cond.true.2742, %cond.end.2731, %cond.true.2691, %cond.end.2680
  %682 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2825 = getelementptr inbounds %struct.image, %struct.image* %682, i32 0, i32 11
  %683 = load i32, i32* %width2825, align 4
  %conv2826 = sext i32 %683 to i64
  %mul2827 = mul i64 16, %conv2826
  %mul2828 = mul i64 0, %mul2827
  %sub2829 = sub i64 %mul2828, 1
  %cmp2830 = icmp ult i64 %sub2829, 0
  br i1 %cmp2830, label %land.lhs.true.2832, label %lor.lhs.false.2838

land.lhs.true.2832:                               ; preds = %lor.lhs.false.2824
  %684 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2833 = getelementptr inbounds %struct.image, %struct.image* %684, i32 0, i32 11
  %685 = load i32, i32* %width2833, align 4
  %conv2834 = sext i32 %685 to i64
  %mul2835 = mul i64 16, %conv2834
  %cmp2836 = icmp ult i64 %mul2835, -9223372036854775808
  br i1 %cmp2836, label %cond.true.2844, label %lor.lhs.false.2838

lor.lhs.false.2838:                               ; preds = %land.lhs.true.2832, %lor.lhs.false.2824
  %686 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2839 = getelementptr inbounds %struct.image, %struct.image* %686, i32 0, i32 11
  %687 = load i32, i32* %width2839, align 4
  %conv2840 = sext i32 %687 to i64
  %mul2841 = mul i64 16, %conv2840
  %cmp2842 = icmp ult i64 9223372036854775807, %mul2841
  br i1 %cmp2842, label %cond.true.2844, label %cond.false.2862

cond.true.2844:                                   ; preds = %lor.lhs.false.2838, %land.lhs.true.2832, %cond.end.2817, %cond.end.2783, %cond.true.2742, %cond.end.2731, %cond.true.2691, %cond.end.2680, %land.lhs.true.2644
  %688 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2845 = getelementptr inbounds %struct.image, %struct.image* %688, i32 0, i32 11
  %689 = load i32, i32* %width2845, align 4
  %conv2846 = sext i32 %689 to i64
  %mul2847 = mul i64 16, %conv2846
  %cmp2848 = icmp ule i64 %mul2847, 9223372036854775807
  br i1 %cmp2848, label %cond.true.2850, label %cond.false.2854

cond.true.2850:                                   ; preds = %cond.true.2844
  %690 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2851 = getelementptr inbounds %struct.image, %struct.image* %690, i32 0, i32 11
  %691 = load i32, i32* %width2851, align 4
  %conv2852 = sext i32 %691 to i64
  %mul2853 = mul i64 16, %conv2852
  br label %cond.end.2860

cond.false.2854:                                  ; preds = %cond.true.2844
  %692 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2855 = getelementptr inbounds %struct.image, %struct.image* %692, i32 0, i32 11
  %693 = load i32, i32* %width2855, align 4
  %conv2856 = sext i32 %693 to i64
  %mul2857 = mul i64 16, %conv2856
  %sub2858 = sub i64 %mul2857, -9223372036854775808
  %add2859 = add nsw i64 %sub2858, -9223372036854775808
  br label %cond.end.2860

cond.end.2860:                                    ; preds = %cond.false.2854, %cond.true.2850
  %cond2861 = phi i64 [ %mul2853, %cond.true.2850 ], [ %add2859, %cond.false.2854 ]
  store i64 %cond2861, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2880

cond.false.2862:                                  ; preds = %lor.lhs.false.2838
  %694 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2863 = getelementptr inbounds %struct.image, %struct.image* %694, i32 0, i32 11
  %695 = load i32, i32* %width2863, align 4
  %conv2864 = sext i32 %695 to i64
  %mul2865 = mul i64 16, %conv2864
  %cmp2866 = icmp ule i64 %mul2865, 9223372036854775807
  br i1 %cmp2866, label %cond.true.2868, label %cond.false.2872

cond.true.2868:                                   ; preds = %cond.false.2862
  %696 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2869 = getelementptr inbounds %struct.image, %struct.image* %696, i32 0, i32 11
  %697 = load i32, i32* %width2869, align 4
  %conv2870 = sext i32 %697 to i64
  %mul2871 = mul i64 16, %conv2870
  br label %cond.end.2878

cond.false.2872:                                  ; preds = %cond.false.2862
  %698 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2873 = getelementptr inbounds %struct.image, %struct.image* %698, i32 0, i32 11
  %699 = load i32, i32* %width2873, align 4
  %conv2874 = sext i32 %699 to i64
  %mul2875 = mul i64 16, %conv2874
  %sub2876 = sub i64 %mul2875, -9223372036854775808
  %add2877 = add nsw i64 %sub2876, -9223372036854775808
  br label %cond.end.2878

cond.end.2878:                                    ; preds = %cond.false.2872, %cond.true.2868
  %cond2879 = phi i64 [ %mul2871, %cond.true.2868 ], [ %add2877, %cond.false.2872 ]
  store i64 %cond2879, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2880

lor.lhs.false.2880:                               ; preds = %cond.end.2878, %cond.end.2860, %cond.end.2599, %cond.end.2581, %cond.end.2315, %cond.end.2297, %cond.end.2036, %cond.end.2018, %cond.end.1750, %cond.end.1734, %cond.end.1475, %cond.end.1459, %cond.end.1226, %cond.end.1200, %cond.end.931, %cond.end.905, %cond.end.604, %cond.end.578, %cond.end.309, %cond.end.283
  br i1 false, label %cond.true.2881, label %cond.false.3611

cond.true.2881:                                   ; preds = %lor.lhs.false.2880
  br i1 false, label %cond.true.2882, label %cond.false.3291

cond.true.2882:                                   ; preds = %cond.true.2881
  %700 = load i64, i64* %nbytes, align 8
  %conv2883 = trunc i64 %700 to i8
  %conv2884 = sext i8 %conv2883 to i32
  %mul2885 = mul nsw i32 0, %conv2884
  %701 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %701, i32 0, i32 12
  %702 = load i32, i32* %height, align 4
  %conv2886 = trunc i32 %702 to i8
  %conv2887 = sext i8 %conv2886 to i32
  %add2888 = add nsw i32 %mul2885, %conv2887
  %mul2889 = mul nsw i32 0, %add2888
  %sub2890 = sub nsw i32 %mul2889, 1
  %cmp2891 = icmp slt i32 %sub2890, 0
  br i1 %cmp2891, label %cond.true.2893, label %cond.false.2921

cond.true.2893:                                   ; preds = %cond.true.2882
  %703 = load i64, i64* %nbytes, align 8
  %conv2894 = trunc i64 %703 to i8
  %conv2895 = sext i8 %conv2894 to i32
  %mul2896 = mul nsw i32 0, %conv2895
  %704 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2897 = getelementptr inbounds %struct.image, %struct.image* %704, i32 0, i32 12
  %705 = load i32, i32* %height2897, align 4
  %conv2898 = trunc i32 %705 to i8
  %conv2899 = sext i8 %conv2898 to i32
  %add2900 = add nsw i32 %mul2896, %conv2899
  %mul2901 = mul nsw i32 0, %add2900
  %add2902 = add nsw i32 %mul2901, 0
  %neg2903 = xor i32 %add2902, -1
  %cmp2904 = icmp eq i32 %neg2903, -1
  %conv2905 = zext i1 %cmp2904 to i32
  %sub2906 = sub nsw i32 0, %conv2905
  %706 = load i64, i64* %nbytes, align 8
  %conv2907 = trunc i64 %706 to i8
  %conv2908 = sext i8 %conv2907 to i32
  %mul2909 = mul nsw i32 0, %conv2908
  %707 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2910 = getelementptr inbounds %struct.image, %struct.image* %707, i32 0, i32 12
  %708 = load i32, i32* %height2910, align 4
  %conv2911 = trunc i32 %708 to i8
  %conv2912 = sext i8 %conv2911 to i32
  %add2913 = add nsw i32 %mul2909, %conv2912
  %mul2914 = mul nsw i32 0, %add2913
  %add2915 = add nsw i32 %mul2914, 1
  %shl2916 = shl i32 %add2915, 30
  %sub2917 = sub nsw i32 %shl2916, 1
  %mul2918 = mul nsw i32 %sub2917, 2
  %add2919 = add nsw i32 %mul2918, 1
  %sub2920 = sub nsw i32 %sub2906, %add2919
  br label %cond.end.2931

cond.false.2921:                                  ; preds = %cond.true.2882
  %709 = load i64, i64* %nbytes, align 8
  %conv2922 = trunc i64 %709 to i8
  %conv2923 = sext i8 %conv2922 to i32
  %mul2924 = mul nsw i32 0, %conv2923
  %710 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2925 = getelementptr inbounds %struct.image, %struct.image* %710, i32 0, i32 12
  %711 = load i32, i32* %height2925, align 4
  %conv2926 = trunc i32 %711 to i8
  %conv2927 = sext i8 %conv2926 to i32
  %add2928 = add nsw i32 %mul2924, %conv2927
  %mul2929 = mul nsw i32 0, %add2928
  %add2930 = add nsw i32 %mul2929, 0
  br label %cond.end.2931

cond.end.2931:                                    ; preds = %cond.false.2921, %cond.true.2893
  %cond2932 = phi i32 [ %sub2920, %cond.true.2893 ], [ %add2930, %cond.false.2921 ]
  %cmp2933 = icmp eq i32 %cond2932, 0
  br i1 %cmp2933, label %land.lhs.true.2935, label %lor.lhs.false.2957

land.lhs.true.2935:                               ; preds = %cond.end.2931
  %712 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2936 = getelementptr inbounds %struct.image, %struct.image* %712, i32 0, i32 12
  %713 = load i32, i32* %height2936, align 4
  %conv2937 = trunc i32 %713 to i8
  %conv2938 = sext i8 %conv2937 to i32
  %cmp2939 = icmp slt i32 %conv2938, 0
  br i1 %cmp2939, label %land.lhs.true.2941, label %lor.lhs.false.2946

land.lhs.true.2941:                               ; preds = %land.lhs.true.2935
  %714 = load i64, i64* %nbytes, align 8
  %conv2942 = trunc i64 %714 to i8
  %conv2943 = sext i8 %conv2942 to i32
  %cmp2944 = icmp slt i32 0, %conv2943
  br i1 %cmp2944, label %cond.true.3227, label %lor.lhs.false.2946

lor.lhs.false.2946:                               ; preds = %land.lhs.true.2941, %land.lhs.true.2935
  %715 = load i64, i64* %nbytes, align 8
  %conv2947 = trunc i64 %715 to i8
  %conv2948 = sext i8 %conv2947 to i32
  %cmp2949 = icmp slt i32 %conv2948, 0
  br i1 %cmp2949, label %land.lhs.true.2951, label %lor.lhs.false.2957

land.lhs.true.2951:                               ; preds = %lor.lhs.false.2946
  %716 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2952 = getelementptr inbounds %struct.image, %struct.image* %716, i32 0, i32 12
  %717 = load i32, i32* %height2952, align 4
  %conv2953 = trunc i32 %717 to i8
  %conv2954 = sext i8 %conv2953 to i32
  %cmp2955 = icmp slt i32 0, %conv2954
  br i1 %cmp2955, label %cond.true.3227, label %lor.lhs.false.2957

lor.lhs.false.2957:                               ; preds = %land.lhs.true.2951, %lor.lhs.false.2946, %cond.end.2931
  %718 = load i64, i64* %nbytes, align 8
  %conv2958 = trunc i64 %718 to i8
  %conv2959 = sext i8 %conv2958 to i32
  %cmp2960 = icmp slt i32 %conv2959, 0
  br i1 %cmp2960, label %cond.true.2962, label %cond.false.3080

cond.true.2962:                                   ; preds = %lor.lhs.false.2957
  %719 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2963 = getelementptr inbounds %struct.image, %struct.image* %719, i32 0, i32 12
  %720 = load i32, i32* %height2963, align 4
  %conv2964 = trunc i32 %720 to i8
  %conv2965 = sext i8 %conv2964 to i32
  %cmp2966 = icmp slt i32 %conv2965, 0
  br i1 %cmp2966, label %cond.true.2968, label %cond.false.3014

cond.true.2968:                                   ; preds = %cond.true.2962
  %721 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2969 = getelementptr inbounds %struct.image, %struct.image* %721, i32 0, i32 12
  %722 = load i32, i32* %height2969, align 4
  %conv2970 = trunc i32 %722 to i8
  %conv2971 = sext i8 %conv2970 to i32
  %723 = load i64, i64* %nbytes, align 8
  %conv2972 = trunc i64 %723 to i8
  %conv2973 = sext i8 %conv2972 to i32
  %mul2974 = mul nsw i32 0, %conv2973
  %724 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2975 = getelementptr inbounds %struct.image, %struct.image* %724, i32 0, i32 12
  %725 = load i32, i32* %height2975, align 4
  %conv2976 = trunc i32 %725 to i8
  %conv2977 = sext i8 %conv2976 to i32
  %add2978 = add nsw i32 %mul2974, %conv2977
  %mul2979 = mul nsw i32 0, %add2978
  %sub2980 = sub nsw i32 %mul2979, 1
  %cmp2981 = icmp slt i32 %sub2980, 0
  br i1 %cmp2981, label %cond.true.2983, label %cond.false.2997

cond.true.2983:                                   ; preds = %cond.true.2968
  %726 = load i64, i64* %nbytes, align 8
  %conv2984 = trunc i64 %726 to i8
  %conv2985 = sext i8 %conv2984 to i32
  %mul2986 = mul nsw i32 0, %conv2985
  %727 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2987 = getelementptr inbounds %struct.image, %struct.image* %727, i32 0, i32 12
  %728 = load i32, i32* %height2987, align 4
  %conv2988 = trunc i32 %728 to i8
  %conv2989 = sext i8 %conv2988 to i32
  %add2990 = add nsw i32 %mul2986, %conv2989
  %mul2991 = mul nsw i32 0, %add2990
  %add2992 = add nsw i32 %mul2991, 1
  %shl2993 = shl i32 %add2992, 30
  %sub2994 = sub nsw i32 %shl2993, 1
  %mul2995 = mul nsw i32 %sub2994, 2
  %add2996 = add nsw i32 %mul2995, 1
  br label %cond.end.3007

cond.false.2997:                                  ; preds = %cond.true.2968
  %729 = load i64, i64* %nbytes, align 8
  %conv2998 = trunc i64 %729 to i8
  %conv2999 = sext i8 %conv2998 to i32
  %mul3000 = mul nsw i32 0, %conv2999
  %730 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3001 = getelementptr inbounds %struct.image, %struct.image* %730, i32 0, i32 12
  %731 = load i32, i32* %height3001, align 4
  %conv3002 = trunc i32 %731 to i8
  %conv3003 = sext i8 %conv3002 to i32
  %add3004 = add nsw i32 %mul3000, %conv3003
  %mul3005 = mul nsw i32 0, %add3004
  %sub3006 = sub nsw i32 %mul3005, 1
  br label %cond.end.3007

cond.end.3007:                                    ; preds = %cond.false.2997, %cond.true.2983
  %cond3008 = phi i32 [ %add2996, %cond.true.2983 ], [ %sub3006, %cond.false.2997 ]
  %732 = load i64, i64* %nbytes, align 8
  %conv3009 = trunc i64 %732 to i8
  %conv3010 = sext i8 %conv3009 to i32
  %div3011 = sdiv i32 %cond3008, %conv3010
  %cmp3012 = icmp slt i32 %conv2971, %div3011
  br i1 %cmp3012, label %cond.true.3227, label %lor.lhs.false.3198

cond.false.3014:                                  ; preds = %cond.true.2962
  %733 = load i64, i64* %nbytes, align 8
  %conv3015 = trunc i64 %733 to i8
  %conv3016 = sext i8 %conv3015 to i32
  %cmp3017 = icmp eq i32 %conv3016, -1
  br i1 %cmp3017, label %cond.true.3019, label %cond.false.3020

cond.true.3019:                                   ; preds = %cond.false.3014
  br i1 false, label %cond.true.3227, label %lor.lhs.false.3198

cond.false.3020:                                  ; preds = %cond.false.3014
  %734 = load i64, i64* %nbytes, align 8
  %conv3021 = trunc i64 %734 to i8
  %conv3022 = sext i8 %conv3021 to i32
  %mul3023 = mul nsw i32 0, %conv3022
  %735 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3024 = getelementptr inbounds %struct.image, %struct.image* %735, i32 0, i32 12
  %736 = load i32, i32* %height3024, align 4
  %conv3025 = trunc i32 %736 to i8
  %conv3026 = sext i8 %conv3025 to i32
  %add3027 = add nsw i32 %mul3023, %conv3026
  %mul3028 = mul nsw i32 0, %add3027
  %sub3029 = sub nsw i32 %mul3028, 1
  %cmp3030 = icmp slt i32 %sub3029, 0
  br i1 %cmp3030, label %cond.true.3032, label %cond.false.3060

cond.true.3032:                                   ; preds = %cond.false.3020
  %737 = load i64, i64* %nbytes, align 8
  %conv3033 = trunc i64 %737 to i8
  %conv3034 = sext i8 %conv3033 to i32
  %mul3035 = mul nsw i32 0, %conv3034
  %738 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3036 = getelementptr inbounds %struct.image, %struct.image* %738, i32 0, i32 12
  %739 = load i32, i32* %height3036, align 4
  %conv3037 = trunc i32 %739 to i8
  %conv3038 = sext i8 %conv3037 to i32
  %add3039 = add nsw i32 %mul3035, %conv3038
  %mul3040 = mul nsw i32 0, %add3039
  %add3041 = add nsw i32 %mul3040, 0
  %neg3042 = xor i32 %add3041, -1
  %cmp3043 = icmp eq i32 %neg3042, -1
  %conv3044 = zext i1 %cmp3043 to i32
  %sub3045 = sub nsw i32 0, %conv3044
  %740 = load i64, i64* %nbytes, align 8
  %conv3046 = trunc i64 %740 to i8
  %conv3047 = sext i8 %conv3046 to i32
  %mul3048 = mul nsw i32 0, %conv3047
  %741 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3049 = getelementptr inbounds %struct.image, %struct.image* %741, i32 0, i32 12
  %742 = load i32, i32* %height3049, align 4
  %conv3050 = trunc i32 %742 to i8
  %conv3051 = sext i8 %conv3050 to i32
  %add3052 = add nsw i32 %mul3048, %conv3051
  %mul3053 = mul nsw i32 0, %add3052
  %add3054 = add nsw i32 %mul3053, 1
  %shl3055 = shl i32 %add3054, 30
  %sub3056 = sub nsw i32 %shl3055, 1
  %mul3057 = mul nsw i32 %sub3056, 2
  %add3058 = add nsw i32 %mul3057, 1
  %sub3059 = sub nsw i32 %sub3045, %add3058
  br label %cond.end.3070

cond.false.3060:                                  ; preds = %cond.false.3020
  %743 = load i64, i64* %nbytes, align 8
  %conv3061 = trunc i64 %743 to i8
  %conv3062 = sext i8 %conv3061 to i32
  %mul3063 = mul nsw i32 0, %conv3062
  %744 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3064 = getelementptr inbounds %struct.image, %struct.image* %744, i32 0, i32 12
  %745 = load i32, i32* %height3064, align 4
  %conv3065 = trunc i32 %745 to i8
  %conv3066 = sext i8 %conv3065 to i32
  %add3067 = add nsw i32 %mul3063, %conv3066
  %mul3068 = mul nsw i32 0, %add3067
  %add3069 = add nsw i32 %mul3068, 0
  br label %cond.end.3070

cond.end.3070:                                    ; preds = %cond.false.3060, %cond.true.3032
  %cond3071 = phi i32 [ %sub3059, %cond.true.3032 ], [ %add3069, %cond.false.3060 ]
  %746 = load i64, i64* %nbytes, align 8
  %conv3072 = trunc i64 %746 to i8
  %conv3073 = sext i8 %conv3072 to i32
  %div3074 = sdiv i32 %cond3071, %conv3073
  %747 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3075 = getelementptr inbounds %struct.image, %struct.image* %747, i32 0, i32 12
  %748 = load i32, i32* %height3075, align 4
  %conv3076 = trunc i32 %748 to i8
  %conv3077 = sext i8 %conv3076 to i32
  %cmp3078 = icmp slt i32 %div3074, %conv3077
  br i1 %cmp3078, label %cond.true.3227, label %lor.lhs.false.3198

cond.false.3080:                                  ; preds = %lor.lhs.false.2957
  %749 = load i64, i64* %nbytes, align 8
  %conv3081 = trunc i64 %749 to i8
  %conv3082 = sext i8 %conv3081 to i32
  %cmp3083 = icmp eq i32 %conv3082, 0
  br i1 %cmp3083, label %cond.true.3085, label %cond.false.3086

cond.true.3085:                                   ; preds = %cond.false.3080
  br i1 false, label %cond.true.3227, label %lor.lhs.false.3198

cond.false.3086:                                  ; preds = %cond.false.3080
  %750 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3087 = getelementptr inbounds %struct.image, %struct.image* %750, i32 0, i32 12
  %751 = load i32, i32* %height3087, align 4
  %conv3088 = trunc i32 %751 to i8
  %conv3089 = sext i8 %conv3088 to i32
  %cmp3090 = icmp slt i32 %conv3089, 0
  br i1 %cmp3090, label %cond.true.3092, label %cond.false.3152

cond.true.3092:                                   ; preds = %cond.false.3086
  %752 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3093 = getelementptr inbounds %struct.image, %struct.image* %752, i32 0, i32 12
  %753 = load i32, i32* %height3093, align 4
  %conv3094 = trunc i32 %753 to i8
  %conv3095 = sext i8 %conv3094 to i32
  %754 = load i64, i64* %nbytes, align 8
  %conv3096 = trunc i64 %754 to i8
  %conv3097 = sext i8 %conv3096 to i32
  %mul3098 = mul nsw i32 0, %conv3097
  %755 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3099 = getelementptr inbounds %struct.image, %struct.image* %755, i32 0, i32 12
  %756 = load i32, i32* %height3099, align 4
  %conv3100 = trunc i32 %756 to i8
  %conv3101 = sext i8 %conv3100 to i32
  %add3102 = add nsw i32 %mul3098, %conv3101
  %mul3103 = mul nsw i32 0, %add3102
  %sub3104 = sub nsw i32 %mul3103, 1
  %cmp3105 = icmp slt i32 %sub3104, 0
  br i1 %cmp3105, label %cond.true.3107, label %cond.false.3135

cond.true.3107:                                   ; preds = %cond.true.3092
  %757 = load i64, i64* %nbytes, align 8
  %conv3108 = trunc i64 %757 to i8
  %conv3109 = sext i8 %conv3108 to i32
  %mul3110 = mul nsw i32 0, %conv3109
  %758 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3111 = getelementptr inbounds %struct.image, %struct.image* %758, i32 0, i32 12
  %759 = load i32, i32* %height3111, align 4
  %conv3112 = trunc i32 %759 to i8
  %conv3113 = sext i8 %conv3112 to i32
  %add3114 = add nsw i32 %mul3110, %conv3113
  %mul3115 = mul nsw i32 0, %add3114
  %add3116 = add nsw i32 %mul3115, 0
  %neg3117 = xor i32 %add3116, -1
  %cmp3118 = icmp eq i32 %neg3117, -1
  %conv3119 = zext i1 %cmp3118 to i32
  %sub3120 = sub nsw i32 0, %conv3119
  %760 = load i64, i64* %nbytes, align 8
  %conv3121 = trunc i64 %760 to i8
  %conv3122 = sext i8 %conv3121 to i32
  %mul3123 = mul nsw i32 0, %conv3122
  %761 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3124 = getelementptr inbounds %struct.image, %struct.image* %761, i32 0, i32 12
  %762 = load i32, i32* %height3124, align 4
  %conv3125 = trunc i32 %762 to i8
  %conv3126 = sext i8 %conv3125 to i32
  %add3127 = add nsw i32 %mul3123, %conv3126
  %mul3128 = mul nsw i32 0, %add3127
  %add3129 = add nsw i32 %mul3128, 1
  %shl3130 = shl i32 %add3129, 30
  %sub3131 = sub nsw i32 %shl3130, 1
  %mul3132 = mul nsw i32 %sub3131, 2
  %add3133 = add nsw i32 %mul3132, 1
  %sub3134 = sub nsw i32 %sub3120, %add3133
  br label %cond.end.3145

cond.false.3135:                                  ; preds = %cond.true.3092
  %763 = load i64, i64* %nbytes, align 8
  %conv3136 = trunc i64 %763 to i8
  %conv3137 = sext i8 %conv3136 to i32
  %mul3138 = mul nsw i32 0, %conv3137
  %764 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3139 = getelementptr inbounds %struct.image, %struct.image* %764, i32 0, i32 12
  %765 = load i32, i32* %height3139, align 4
  %conv3140 = trunc i32 %765 to i8
  %conv3141 = sext i8 %conv3140 to i32
  %add3142 = add nsw i32 %mul3138, %conv3141
  %mul3143 = mul nsw i32 0, %add3142
  %add3144 = add nsw i32 %mul3143, 0
  br label %cond.end.3145

cond.end.3145:                                    ; preds = %cond.false.3135, %cond.true.3107
  %cond3146 = phi i32 [ %sub3134, %cond.true.3107 ], [ %add3144, %cond.false.3135 ]
  %766 = load i64, i64* %nbytes, align 8
  %conv3147 = trunc i64 %766 to i8
  %conv3148 = sext i8 %conv3147 to i32
  %div3149 = sdiv i32 %cond3146, %conv3148
  %cmp3150 = icmp slt i32 %conv3095, %div3149
  br i1 %cmp3150, label %cond.true.3227, label %lor.lhs.false.3198

cond.false.3152:                                  ; preds = %cond.false.3086
  %767 = load i64, i64* %nbytes, align 8
  %conv3153 = trunc i64 %767 to i8
  %conv3154 = sext i8 %conv3153 to i32
  %mul3155 = mul nsw i32 0, %conv3154
  %768 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3156 = getelementptr inbounds %struct.image, %struct.image* %768, i32 0, i32 12
  %769 = load i32, i32* %height3156, align 4
  %conv3157 = trunc i32 %769 to i8
  %conv3158 = sext i8 %conv3157 to i32
  %add3159 = add nsw i32 %mul3155, %conv3158
  %mul3160 = mul nsw i32 0, %add3159
  %sub3161 = sub nsw i32 %mul3160, 1
  %cmp3162 = icmp slt i32 %sub3161, 0
  br i1 %cmp3162, label %cond.true.3164, label %cond.false.3178

cond.true.3164:                                   ; preds = %cond.false.3152
  %770 = load i64, i64* %nbytes, align 8
  %conv3165 = trunc i64 %770 to i8
  %conv3166 = sext i8 %conv3165 to i32
  %mul3167 = mul nsw i32 0, %conv3166
  %771 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3168 = getelementptr inbounds %struct.image, %struct.image* %771, i32 0, i32 12
  %772 = load i32, i32* %height3168, align 4
  %conv3169 = trunc i32 %772 to i8
  %conv3170 = sext i8 %conv3169 to i32
  %add3171 = add nsw i32 %mul3167, %conv3170
  %mul3172 = mul nsw i32 0, %add3171
  %add3173 = add nsw i32 %mul3172, 1
  %shl3174 = shl i32 %add3173, 30
  %sub3175 = sub nsw i32 %shl3174, 1
  %mul3176 = mul nsw i32 %sub3175, 2
  %add3177 = add nsw i32 %mul3176, 1
  br label %cond.end.3188

cond.false.3178:                                  ; preds = %cond.false.3152
  %773 = load i64, i64* %nbytes, align 8
  %conv3179 = trunc i64 %773 to i8
  %conv3180 = sext i8 %conv3179 to i32
  %mul3181 = mul nsw i32 0, %conv3180
  %774 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3182 = getelementptr inbounds %struct.image, %struct.image* %774, i32 0, i32 12
  %775 = load i32, i32* %height3182, align 4
  %conv3183 = trunc i32 %775 to i8
  %conv3184 = sext i8 %conv3183 to i32
  %add3185 = add nsw i32 %mul3181, %conv3184
  %mul3186 = mul nsw i32 0, %add3185
  %sub3187 = sub nsw i32 %mul3186, 1
  br label %cond.end.3188

cond.end.3188:                                    ; preds = %cond.false.3178, %cond.true.3164
  %cond3189 = phi i32 [ %add3177, %cond.true.3164 ], [ %sub3187, %cond.false.3178 ]
  %776 = load i64, i64* %nbytes, align 8
  %conv3190 = trunc i64 %776 to i8
  %conv3191 = sext i8 %conv3190 to i32
  %div3192 = sdiv i32 %cond3189, %conv3191
  %777 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3193 = getelementptr inbounds %struct.image, %struct.image* %777, i32 0, i32 12
  %778 = load i32, i32* %height3193, align 4
  %conv3194 = trunc i32 %778 to i8
  %conv3195 = sext i8 %conv3194 to i32
  %cmp3196 = icmp slt i32 %div3192, %conv3195
  br i1 %cmp3196, label %cond.true.3227, label %lor.lhs.false.3198

lor.lhs.false.3198:                               ; preds = %cond.end.3188, %cond.end.3145, %cond.true.3085, %cond.end.3070, %cond.true.3019, %cond.end.3007
  %779 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3199 = getelementptr inbounds %struct.image, %struct.image* %779, i32 0, i32 12
  %780 = load i32, i32* %height3199, align 4
  %conv3200 = trunc i32 %780 to i8
  %conv3201 = sext i8 %conv3200 to i32
  %781 = load i64, i64* %nbytes, align 8
  %conv3202 = trunc i64 %781 to i8
  %conv3203 = sext i8 %conv3202 to i32
  %mul3204 = mul nsw i32 %conv3201, %conv3203
  %mul3205 = mul nsw i32 0, %mul3204
  %sub3206 = sub nsw i32 %mul3205, 1
  %cmp3207 = icmp slt i32 %sub3206, 0
  br i1 %cmp3207, label %land.lhs.true.3209, label %lor.lhs.false.3218

land.lhs.true.3209:                               ; preds = %lor.lhs.false.3198
  %782 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3210 = getelementptr inbounds %struct.image, %struct.image* %782, i32 0, i32 12
  %783 = load i32, i32* %height3210, align 4
  %conv3211 = trunc i32 %783 to i8
  %conv3212 = sext i8 %conv3211 to i32
  %784 = load i64, i64* %nbytes, align 8
  %conv3213 = trunc i64 %784 to i8
  %conv3214 = sext i8 %conv3213 to i32
  %mul3215 = mul nsw i32 %conv3212, %conv3214
  %cmp3216 = icmp slt i32 %mul3215, -128
  br i1 %cmp3216, label %cond.true.3227, label %lor.lhs.false.3218

lor.lhs.false.3218:                               ; preds = %land.lhs.true.3209, %lor.lhs.false.3198
  %785 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3219 = getelementptr inbounds %struct.image, %struct.image* %785, i32 0, i32 12
  %786 = load i32, i32* %height3219, align 4
  %conv3220 = trunc i32 %786 to i8
  %conv3221 = sext i8 %conv3220 to i32
  %787 = load i64, i64* %nbytes, align 8
  %conv3222 = trunc i64 %787 to i8
  %conv3223 = sext i8 %conv3222 to i32
  %mul3224 = mul nsw i32 %conv3221, %conv3223
  %cmp3225 = icmp slt i32 127, %mul3224
  br i1 %cmp3225, label %cond.true.3227, label %cond.false.3259

cond.true.3227:                                   ; preds = %lor.lhs.false.3218, %land.lhs.true.3209, %cond.end.3188, %cond.end.3145, %cond.true.3085, %cond.end.3070, %cond.true.3019, %cond.end.3007, %land.lhs.true.2951, %land.lhs.true.2941
  %788 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3228 = getelementptr inbounds %struct.image, %struct.image* %788, i32 0, i32 12
  %789 = load i32, i32* %height3228, align 4
  %conv3229 = trunc i32 %789 to i8
  %conv3230 = zext i8 %conv3229 to i32
  %790 = load i64, i64* %nbytes, align 8
  %conv3231 = trunc i64 %790 to i8
  %conv3232 = zext i8 %conv3231 to i32
  %mul3233 = mul nsw i32 %conv3230, %conv3232
  %cmp3234 = icmp sle i32 %mul3233, 127
  br i1 %cmp3234, label %cond.true.3236, label %cond.false.3245

cond.true.3236:                                   ; preds = %cond.true.3227
  %791 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3237 = getelementptr inbounds %struct.image, %struct.image* %791, i32 0, i32 12
  %792 = load i32, i32* %height3237, align 4
  %conv3238 = trunc i32 %792 to i8
  %conv3239 = zext i8 %conv3238 to i32
  %793 = load i64, i64* %nbytes, align 8
  %conv3240 = trunc i64 %793 to i8
  %conv3241 = zext i8 %conv3240 to i32
  %mul3242 = mul nsw i32 %conv3239, %conv3241
  %conv3243 = trunc i32 %mul3242 to i8
  %conv3244 = sext i8 %conv3243 to i32
  br label %cond.end.3256

cond.false.3245:                                  ; preds = %cond.true.3227
  %794 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3246 = getelementptr inbounds %struct.image, %struct.image* %794, i32 0, i32 12
  %795 = load i32, i32* %height3246, align 4
  %conv3247 = trunc i32 %795 to i8
  %conv3248 = zext i8 %conv3247 to i32
  %796 = load i64, i64* %nbytes, align 8
  %conv3249 = trunc i64 %796 to i8
  %conv3250 = zext i8 %conv3249 to i32
  %mul3251 = mul nsw i32 %conv3248, %conv3250
  %sub3252 = sub nsw i32 %mul3251, -128
  %conv3253 = trunc i32 %sub3252 to i8
  %conv3254 = sext i8 %conv3253 to i32
  %add3255 = add nsw i32 %conv3254, -128
  br label %cond.end.3256

cond.end.3256:                                    ; preds = %cond.false.3245, %cond.true.3236
  %cond3257 = phi i32 [ %conv3244, %cond.true.3236 ], [ %add3255, %cond.false.3245 ]
  %conv3258 = sext i32 %cond3257 to i64
  store i64 %conv3258, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.3259:                                  ; preds = %lor.lhs.false.3218
  %797 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3260 = getelementptr inbounds %struct.image, %struct.image* %797, i32 0, i32 12
  %798 = load i32, i32* %height3260, align 4
  %conv3261 = trunc i32 %798 to i8
  %conv3262 = zext i8 %conv3261 to i32
  %799 = load i64, i64* %nbytes, align 8
  %conv3263 = trunc i64 %799 to i8
  %conv3264 = zext i8 %conv3263 to i32
  %mul3265 = mul nsw i32 %conv3262, %conv3264
  %cmp3266 = icmp sle i32 %mul3265, 127
  br i1 %cmp3266, label %cond.true.3268, label %cond.false.3277

cond.true.3268:                                   ; preds = %cond.false.3259
  %800 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3269 = getelementptr inbounds %struct.image, %struct.image* %800, i32 0, i32 12
  %801 = load i32, i32* %height3269, align 4
  %conv3270 = trunc i32 %801 to i8
  %conv3271 = zext i8 %conv3270 to i32
  %802 = load i64, i64* %nbytes, align 8
  %conv3272 = trunc i64 %802 to i8
  %conv3273 = zext i8 %conv3272 to i32
  %mul3274 = mul nsw i32 %conv3271, %conv3273
  %conv3275 = trunc i32 %mul3274 to i8
  %conv3276 = sext i8 %conv3275 to i32
  br label %cond.end.3288

cond.false.3277:                                  ; preds = %cond.false.3259
  %803 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3278 = getelementptr inbounds %struct.image, %struct.image* %803, i32 0, i32 12
  %804 = load i32, i32* %height3278, align 4
  %conv3279 = trunc i32 %804 to i8
  %conv3280 = zext i8 %conv3279 to i32
  %805 = load i64, i64* %nbytes, align 8
  %conv3281 = trunc i64 %805 to i8
  %conv3282 = zext i8 %conv3281 to i32
  %mul3283 = mul nsw i32 %conv3280, %conv3282
  %sub3284 = sub nsw i32 %mul3283, -128
  %conv3285 = trunc i32 %sub3284 to i8
  %conv3286 = sext i8 %conv3285 to i32
  %add3287 = add nsw i32 %conv3286, -128
  br label %cond.end.3288

cond.end.3288:                                    ; preds = %cond.false.3277, %cond.true.3268
  %cond3289 = phi i32 [ %conv3276, %cond.true.3268 ], [ %add3287, %cond.false.3277 ]
  %conv3290 = sext i32 %cond3289 to i64
  store i64 %conv3290, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.3291:                                  ; preds = %cond.true.2881
  %806 = load i64, i64* %nbytes, align 8
  %mul3292 = mul nsw i64 0, %806
  %807 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3293 = getelementptr inbounds %struct.image, %struct.image* %807, i32 0, i32 12
  %808 = load i32, i32* %height3293, align 4
  %conv3294 = sext i32 %808 to i64
  %add3295 = add nsw i64 %mul3292, %conv3294
  %mul3296 = mul nsw i64 0, %add3295
  %sub3297 = sub nsw i64 %mul3296, 1
  %cmp3298 = icmp slt i64 %sub3297, 0
  br i1 %cmp3298, label %cond.true.3300, label %cond.false.3323

cond.true.3300:                                   ; preds = %cond.false.3291
  %809 = load i64, i64* %nbytes, align 8
  %mul3301 = mul nsw i64 0, %809
  %810 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3302 = getelementptr inbounds %struct.image, %struct.image* %810, i32 0, i32 12
  %811 = load i32, i32* %height3302, align 4
  %conv3303 = sext i32 %811 to i64
  %add3304 = add nsw i64 %mul3301, %conv3303
  %mul3305 = mul nsw i64 0, %add3304
  %add3306 = add nsw i64 %mul3305, 0
  %neg3307 = xor i64 %add3306, -1
  %cmp3308 = icmp eq i64 %neg3307, -1
  %conv3309 = zext i1 %cmp3308 to i32
  %sub3310 = sub nsw i32 0, %conv3309
  %conv3311 = sext i32 %sub3310 to i64
  %812 = load i64, i64* %nbytes, align 8
  %mul3312 = mul nsw i64 0, %812
  %813 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3313 = getelementptr inbounds %struct.image, %struct.image* %813, i32 0, i32 12
  %814 = load i32, i32* %height3313, align 4
  %conv3314 = sext i32 %814 to i64
  %add3315 = add nsw i64 %mul3312, %conv3314
  %mul3316 = mul nsw i64 0, %add3315
  %add3317 = add nsw i64 %mul3316, 1
  %shl3318 = shl i64 %add3317, 62
  %sub3319 = sub nsw i64 %shl3318, 1
  %mul3320 = mul nsw i64 %sub3319, 2
  %add3321 = add nsw i64 %mul3320, 1
  %sub3322 = sub nsw i64 %conv3311, %add3321
  br label %cond.end.3330

cond.false.3323:                                  ; preds = %cond.false.3291
  %815 = load i64, i64* %nbytes, align 8
  %mul3324 = mul nsw i64 0, %815
  %816 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3325 = getelementptr inbounds %struct.image, %struct.image* %816, i32 0, i32 12
  %817 = load i32, i32* %height3325, align 4
  %conv3326 = sext i32 %817 to i64
  %add3327 = add nsw i64 %mul3324, %conv3326
  %mul3328 = mul nsw i64 0, %add3327
  %add3329 = add nsw i64 %mul3328, 0
  br label %cond.end.3330

cond.end.3330:                                    ; preds = %cond.false.3323, %cond.true.3300
  %cond3331 = phi i64 [ %sub3322, %cond.true.3300 ], [ %add3329, %cond.false.3323 ]
  %cmp3332 = icmp eq i64 %cond3331, 0
  br i1 %cmp3332, label %land.lhs.true.3334, label %lor.lhs.false.3348

land.lhs.true.3334:                               ; preds = %cond.end.3330
  %818 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3335 = getelementptr inbounds %struct.image, %struct.image* %818, i32 0, i32 12
  %819 = load i32, i32* %height3335, align 4
  %cmp3336 = icmp slt i32 %819, 0
  br i1 %cmp3336, label %land.lhs.true.3338, label %lor.lhs.false.3341

land.lhs.true.3338:                               ; preds = %land.lhs.true.3334
  %820 = load i64, i64* %nbytes, align 8
  %cmp3339 = icmp slt i64 0, %820
  br i1 %cmp3339, label %cond.true.3547, label %lor.lhs.false.3341

lor.lhs.false.3341:                               ; preds = %land.lhs.true.3338, %land.lhs.true.3334
  %821 = load i64, i64* %nbytes, align 8
  %cmp3342 = icmp slt i64 %821, 0
  br i1 %cmp3342, label %land.lhs.true.3344, label %lor.lhs.false.3348

land.lhs.true.3344:                               ; preds = %lor.lhs.false.3341
  %822 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3345 = getelementptr inbounds %struct.image, %struct.image* %822, i32 0, i32 12
  %823 = load i32, i32* %height3345, align 4
  %cmp3346 = icmp slt i32 0, %823
  br i1 %cmp3346, label %cond.true.3547, label %lor.lhs.false.3348

lor.lhs.false.3348:                               ; preds = %land.lhs.true.3344, %lor.lhs.false.3341, %cond.end.3330
  %824 = load i64, i64* %nbytes, align 8
  %cmp3349 = icmp slt i64 %824, 0
  br i1 %cmp3349, label %cond.true.3351, label %cond.false.3439

cond.true.3351:                                   ; preds = %lor.lhs.false.3348
  %825 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3352 = getelementptr inbounds %struct.image, %struct.image* %825, i32 0, i32 12
  %826 = load i32, i32* %height3352, align 4
  %cmp3353 = icmp slt i32 %826, 0
  br i1 %cmp3353, label %cond.true.3355, label %cond.false.3389

cond.true.3355:                                   ; preds = %cond.true.3351
  %827 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3356 = getelementptr inbounds %struct.image, %struct.image* %827, i32 0, i32 12
  %828 = load i32, i32* %height3356, align 4
  %conv3357 = sext i32 %828 to i64
  %829 = load i64, i64* %nbytes, align 8
  %mul3358 = mul nsw i64 0, %829
  %830 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3359 = getelementptr inbounds %struct.image, %struct.image* %830, i32 0, i32 12
  %831 = load i32, i32* %height3359, align 4
  %conv3360 = sext i32 %831 to i64
  %add3361 = add nsw i64 %mul3358, %conv3360
  %mul3362 = mul nsw i64 0, %add3361
  %sub3363 = sub nsw i64 %mul3362, 1
  %cmp3364 = icmp slt i64 %sub3363, 0
  br i1 %cmp3364, label %cond.true.3366, label %cond.false.3377

cond.true.3366:                                   ; preds = %cond.true.3355
  %832 = load i64, i64* %nbytes, align 8
  %mul3367 = mul nsw i64 0, %832
  %833 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3368 = getelementptr inbounds %struct.image, %struct.image* %833, i32 0, i32 12
  %834 = load i32, i32* %height3368, align 4
  %conv3369 = sext i32 %834 to i64
  %add3370 = add nsw i64 %mul3367, %conv3369
  %mul3371 = mul nsw i64 0, %add3370
  %add3372 = add nsw i64 %mul3371, 1
  %shl3373 = shl i64 %add3372, 62
  %sub3374 = sub nsw i64 %shl3373, 1
  %mul3375 = mul nsw i64 %sub3374, 2
  %add3376 = add nsw i64 %mul3375, 1
  br label %cond.end.3384

cond.false.3377:                                  ; preds = %cond.true.3355
  %835 = load i64, i64* %nbytes, align 8
  %mul3378 = mul nsw i64 0, %835
  %836 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3379 = getelementptr inbounds %struct.image, %struct.image* %836, i32 0, i32 12
  %837 = load i32, i32* %height3379, align 4
  %conv3380 = sext i32 %837 to i64
  %add3381 = add nsw i64 %mul3378, %conv3380
  %mul3382 = mul nsw i64 0, %add3381
  %sub3383 = sub nsw i64 %mul3382, 1
  br label %cond.end.3384

cond.end.3384:                                    ; preds = %cond.false.3377, %cond.true.3366
  %cond3385 = phi i64 [ %add3376, %cond.true.3366 ], [ %sub3383, %cond.false.3377 ]
  %838 = load i64, i64* %nbytes, align 8
  %div3386 = sdiv i64 %cond3385, %838
  %cmp3387 = icmp slt i64 %conv3357, %div3386
  br i1 %cmp3387, label %cond.true.3547, label %lor.lhs.false.3527

cond.false.3389:                                  ; preds = %cond.true.3351
  %839 = load i64, i64* %nbytes, align 8
  %cmp3390 = icmp eq i64 %839, -1
  br i1 %cmp3390, label %cond.true.3392, label %cond.false.3393

cond.true.3392:                                   ; preds = %cond.false.3389
  br i1 false, label %cond.true.3547, label %lor.lhs.false.3527

cond.false.3393:                                  ; preds = %cond.false.3389
  %840 = load i64, i64* %nbytes, align 8
  %mul3394 = mul nsw i64 0, %840
  %841 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3395 = getelementptr inbounds %struct.image, %struct.image* %841, i32 0, i32 12
  %842 = load i32, i32* %height3395, align 4
  %conv3396 = sext i32 %842 to i64
  %add3397 = add nsw i64 %mul3394, %conv3396
  %mul3398 = mul nsw i64 0, %add3397
  %sub3399 = sub nsw i64 %mul3398, 1
  %cmp3400 = icmp slt i64 %sub3399, 0
  br i1 %cmp3400, label %cond.true.3402, label %cond.false.3425

cond.true.3402:                                   ; preds = %cond.false.3393
  %843 = load i64, i64* %nbytes, align 8
  %mul3403 = mul nsw i64 0, %843
  %844 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3404 = getelementptr inbounds %struct.image, %struct.image* %844, i32 0, i32 12
  %845 = load i32, i32* %height3404, align 4
  %conv3405 = sext i32 %845 to i64
  %add3406 = add nsw i64 %mul3403, %conv3405
  %mul3407 = mul nsw i64 0, %add3406
  %add3408 = add nsw i64 %mul3407, 0
  %neg3409 = xor i64 %add3408, -1
  %cmp3410 = icmp eq i64 %neg3409, -1
  %conv3411 = zext i1 %cmp3410 to i32
  %sub3412 = sub nsw i32 0, %conv3411
  %conv3413 = sext i32 %sub3412 to i64
  %846 = load i64, i64* %nbytes, align 8
  %mul3414 = mul nsw i64 0, %846
  %847 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3415 = getelementptr inbounds %struct.image, %struct.image* %847, i32 0, i32 12
  %848 = load i32, i32* %height3415, align 4
  %conv3416 = sext i32 %848 to i64
  %add3417 = add nsw i64 %mul3414, %conv3416
  %mul3418 = mul nsw i64 0, %add3417
  %add3419 = add nsw i64 %mul3418, 1
  %shl3420 = shl i64 %add3419, 62
  %sub3421 = sub nsw i64 %shl3420, 1
  %mul3422 = mul nsw i64 %sub3421, 2
  %add3423 = add nsw i64 %mul3422, 1
  %sub3424 = sub nsw i64 %conv3413, %add3423
  br label %cond.end.3432

cond.false.3425:                                  ; preds = %cond.false.3393
  %849 = load i64, i64* %nbytes, align 8
  %mul3426 = mul nsw i64 0, %849
  %850 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3427 = getelementptr inbounds %struct.image, %struct.image* %850, i32 0, i32 12
  %851 = load i32, i32* %height3427, align 4
  %conv3428 = sext i32 %851 to i64
  %add3429 = add nsw i64 %mul3426, %conv3428
  %mul3430 = mul nsw i64 0, %add3429
  %add3431 = add nsw i64 %mul3430, 0
  br label %cond.end.3432

cond.end.3432:                                    ; preds = %cond.false.3425, %cond.true.3402
  %cond3433 = phi i64 [ %sub3424, %cond.true.3402 ], [ %add3431, %cond.false.3425 ]
  %852 = load i64, i64* %nbytes, align 8
  %div3434 = sdiv i64 %cond3433, %852
  %853 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3435 = getelementptr inbounds %struct.image, %struct.image* %853, i32 0, i32 12
  %854 = load i32, i32* %height3435, align 4
  %conv3436 = sext i32 %854 to i64
  %cmp3437 = icmp slt i64 %div3434, %conv3436
  br i1 %cmp3437, label %cond.true.3547, label %lor.lhs.false.3527

cond.false.3439:                                  ; preds = %lor.lhs.false.3348
  %855 = load i64, i64* %nbytes, align 8
  %cmp3440 = icmp eq i64 %855, 0
  br i1 %cmp3440, label %cond.true.3442, label %cond.false.3443

cond.true.3442:                                   ; preds = %cond.false.3439
  br i1 false, label %cond.true.3547, label %lor.lhs.false.3527

cond.false.3443:                                  ; preds = %cond.false.3439
  %856 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3444 = getelementptr inbounds %struct.image, %struct.image* %856, i32 0, i32 12
  %857 = load i32, i32* %height3444, align 4
  %cmp3445 = icmp slt i32 %857, 0
  br i1 %cmp3445, label %cond.true.3447, label %cond.false.3493

cond.true.3447:                                   ; preds = %cond.false.3443
  %858 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3448 = getelementptr inbounds %struct.image, %struct.image* %858, i32 0, i32 12
  %859 = load i32, i32* %height3448, align 4
  %conv3449 = sext i32 %859 to i64
  %860 = load i64, i64* %nbytes, align 8
  %mul3450 = mul nsw i64 0, %860
  %861 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3451 = getelementptr inbounds %struct.image, %struct.image* %861, i32 0, i32 12
  %862 = load i32, i32* %height3451, align 4
  %conv3452 = sext i32 %862 to i64
  %add3453 = add nsw i64 %mul3450, %conv3452
  %mul3454 = mul nsw i64 0, %add3453
  %sub3455 = sub nsw i64 %mul3454, 1
  %cmp3456 = icmp slt i64 %sub3455, 0
  br i1 %cmp3456, label %cond.true.3458, label %cond.false.3481

cond.true.3458:                                   ; preds = %cond.true.3447
  %863 = load i64, i64* %nbytes, align 8
  %mul3459 = mul nsw i64 0, %863
  %864 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3460 = getelementptr inbounds %struct.image, %struct.image* %864, i32 0, i32 12
  %865 = load i32, i32* %height3460, align 4
  %conv3461 = sext i32 %865 to i64
  %add3462 = add nsw i64 %mul3459, %conv3461
  %mul3463 = mul nsw i64 0, %add3462
  %add3464 = add nsw i64 %mul3463, 0
  %neg3465 = xor i64 %add3464, -1
  %cmp3466 = icmp eq i64 %neg3465, -1
  %conv3467 = zext i1 %cmp3466 to i32
  %sub3468 = sub nsw i32 0, %conv3467
  %conv3469 = sext i32 %sub3468 to i64
  %866 = load i64, i64* %nbytes, align 8
  %mul3470 = mul nsw i64 0, %866
  %867 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3471 = getelementptr inbounds %struct.image, %struct.image* %867, i32 0, i32 12
  %868 = load i32, i32* %height3471, align 4
  %conv3472 = sext i32 %868 to i64
  %add3473 = add nsw i64 %mul3470, %conv3472
  %mul3474 = mul nsw i64 0, %add3473
  %add3475 = add nsw i64 %mul3474, 1
  %shl3476 = shl i64 %add3475, 62
  %sub3477 = sub nsw i64 %shl3476, 1
  %mul3478 = mul nsw i64 %sub3477, 2
  %add3479 = add nsw i64 %mul3478, 1
  %sub3480 = sub nsw i64 %conv3469, %add3479
  br label %cond.end.3488

cond.false.3481:                                  ; preds = %cond.true.3447
  %869 = load i64, i64* %nbytes, align 8
  %mul3482 = mul nsw i64 0, %869
  %870 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3483 = getelementptr inbounds %struct.image, %struct.image* %870, i32 0, i32 12
  %871 = load i32, i32* %height3483, align 4
  %conv3484 = sext i32 %871 to i64
  %add3485 = add nsw i64 %mul3482, %conv3484
  %mul3486 = mul nsw i64 0, %add3485
  %add3487 = add nsw i64 %mul3486, 0
  br label %cond.end.3488

cond.end.3488:                                    ; preds = %cond.false.3481, %cond.true.3458
  %cond3489 = phi i64 [ %sub3480, %cond.true.3458 ], [ %add3487, %cond.false.3481 ]
  %872 = load i64, i64* %nbytes, align 8
  %div3490 = sdiv i64 %cond3489, %872
  %cmp3491 = icmp slt i64 %conv3449, %div3490
  br i1 %cmp3491, label %cond.true.3547, label %lor.lhs.false.3527

cond.false.3493:                                  ; preds = %cond.false.3443
  %873 = load i64, i64* %nbytes, align 8
  %mul3494 = mul nsw i64 0, %873
  %874 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3495 = getelementptr inbounds %struct.image, %struct.image* %874, i32 0, i32 12
  %875 = load i32, i32* %height3495, align 4
  %conv3496 = sext i32 %875 to i64
  %add3497 = add nsw i64 %mul3494, %conv3496
  %mul3498 = mul nsw i64 0, %add3497
  %sub3499 = sub nsw i64 %mul3498, 1
  %cmp3500 = icmp slt i64 %sub3499, 0
  br i1 %cmp3500, label %cond.true.3502, label %cond.false.3513

cond.true.3502:                                   ; preds = %cond.false.3493
  %876 = load i64, i64* %nbytes, align 8
  %mul3503 = mul nsw i64 0, %876
  %877 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3504 = getelementptr inbounds %struct.image, %struct.image* %877, i32 0, i32 12
  %878 = load i32, i32* %height3504, align 4
  %conv3505 = sext i32 %878 to i64
  %add3506 = add nsw i64 %mul3503, %conv3505
  %mul3507 = mul nsw i64 0, %add3506
  %add3508 = add nsw i64 %mul3507, 1
  %shl3509 = shl i64 %add3508, 62
  %sub3510 = sub nsw i64 %shl3509, 1
  %mul3511 = mul nsw i64 %sub3510, 2
  %add3512 = add nsw i64 %mul3511, 1
  br label %cond.end.3520

cond.false.3513:                                  ; preds = %cond.false.3493
  %879 = load i64, i64* %nbytes, align 8
  %mul3514 = mul nsw i64 0, %879
  %880 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3515 = getelementptr inbounds %struct.image, %struct.image* %880, i32 0, i32 12
  %881 = load i32, i32* %height3515, align 4
  %conv3516 = sext i32 %881 to i64
  %add3517 = add nsw i64 %mul3514, %conv3516
  %mul3518 = mul nsw i64 0, %add3517
  %sub3519 = sub nsw i64 %mul3518, 1
  br label %cond.end.3520

cond.end.3520:                                    ; preds = %cond.false.3513, %cond.true.3502
  %cond3521 = phi i64 [ %add3512, %cond.true.3502 ], [ %sub3519, %cond.false.3513 ]
  %882 = load i64, i64* %nbytes, align 8
  %div3522 = sdiv i64 %cond3521, %882
  %883 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3523 = getelementptr inbounds %struct.image, %struct.image* %883, i32 0, i32 12
  %884 = load i32, i32* %height3523, align 4
  %conv3524 = sext i32 %884 to i64
  %cmp3525 = icmp slt i64 %div3522, %conv3524
  br i1 %cmp3525, label %cond.true.3547, label %lor.lhs.false.3527

lor.lhs.false.3527:                               ; preds = %cond.end.3520, %cond.end.3488, %cond.true.3442, %cond.end.3432, %cond.true.3392, %cond.end.3384
  %885 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3528 = getelementptr inbounds %struct.image, %struct.image* %885, i32 0, i32 12
  %886 = load i32, i32* %height3528, align 4
  %conv3529 = sext i32 %886 to i64
  %887 = load i64, i64* %nbytes, align 8
  %mul3530 = mul nsw i64 %conv3529, %887
  %mul3531 = mul nsw i64 0, %mul3530
  %sub3532 = sub nsw i64 %mul3531, 1
  %cmp3533 = icmp slt i64 %sub3532, 0
  br i1 %cmp3533, label %land.lhs.true.3535, label %lor.lhs.false.3541

land.lhs.true.3535:                               ; preds = %lor.lhs.false.3527
  %888 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3536 = getelementptr inbounds %struct.image, %struct.image* %888, i32 0, i32 12
  %889 = load i32, i32* %height3536, align 4
  %conv3537 = sext i32 %889 to i64
  %890 = load i64, i64* %nbytes, align 8
  %mul3538 = mul nsw i64 %conv3537, %890
  %cmp3539 = icmp slt i64 %mul3538, -128
  br i1 %cmp3539, label %cond.true.3547, label %lor.lhs.false.3541

lor.lhs.false.3541:                               ; preds = %land.lhs.true.3535, %lor.lhs.false.3527
  %891 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3542 = getelementptr inbounds %struct.image, %struct.image* %891, i32 0, i32 12
  %892 = load i32, i32* %height3542, align 4
  %conv3543 = sext i32 %892 to i64
  %893 = load i64, i64* %nbytes, align 8
  %mul3544 = mul nsw i64 %conv3543, %893
  %cmp3545 = icmp slt i64 127, %mul3544
  br i1 %cmp3545, label %cond.true.3547, label %cond.false.3579

cond.true.3547:                                   ; preds = %lor.lhs.false.3541, %land.lhs.true.3535, %cond.end.3520, %cond.end.3488, %cond.true.3442, %cond.end.3432, %cond.true.3392, %cond.end.3384, %land.lhs.true.3344, %land.lhs.true.3338
  %894 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3548 = getelementptr inbounds %struct.image, %struct.image* %894, i32 0, i32 12
  %895 = load i32, i32* %height3548, align 4
  %conv3549 = trunc i32 %895 to i8
  %conv3550 = zext i8 %conv3549 to i32
  %896 = load i64, i64* %nbytes, align 8
  %conv3551 = trunc i64 %896 to i8
  %conv3552 = zext i8 %conv3551 to i32
  %mul3553 = mul nsw i32 %conv3550, %conv3552
  %cmp3554 = icmp sle i32 %mul3553, 127
  br i1 %cmp3554, label %cond.true.3556, label %cond.false.3565

cond.true.3556:                                   ; preds = %cond.true.3547
  %897 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3557 = getelementptr inbounds %struct.image, %struct.image* %897, i32 0, i32 12
  %898 = load i32, i32* %height3557, align 4
  %conv3558 = trunc i32 %898 to i8
  %conv3559 = zext i8 %conv3558 to i32
  %899 = load i64, i64* %nbytes, align 8
  %conv3560 = trunc i64 %899 to i8
  %conv3561 = zext i8 %conv3560 to i32
  %mul3562 = mul nsw i32 %conv3559, %conv3561
  %conv3563 = trunc i32 %mul3562 to i8
  %conv3564 = sext i8 %conv3563 to i32
  br label %cond.end.3576

cond.false.3565:                                  ; preds = %cond.true.3547
  %900 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3566 = getelementptr inbounds %struct.image, %struct.image* %900, i32 0, i32 12
  %901 = load i32, i32* %height3566, align 4
  %conv3567 = trunc i32 %901 to i8
  %conv3568 = zext i8 %conv3567 to i32
  %902 = load i64, i64* %nbytes, align 8
  %conv3569 = trunc i64 %902 to i8
  %conv3570 = zext i8 %conv3569 to i32
  %mul3571 = mul nsw i32 %conv3568, %conv3570
  %sub3572 = sub nsw i32 %mul3571, -128
  %conv3573 = trunc i32 %sub3572 to i8
  %conv3574 = sext i8 %conv3573 to i32
  %add3575 = add nsw i32 %conv3574, -128
  br label %cond.end.3576

cond.end.3576:                                    ; preds = %cond.false.3565, %cond.true.3556
  %cond3577 = phi i32 [ %conv3564, %cond.true.3556 ], [ %add3575, %cond.false.3565 ]
  %conv3578 = sext i32 %cond3577 to i64
  store i64 %conv3578, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.3579:                                  ; preds = %lor.lhs.false.3541
  %903 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3580 = getelementptr inbounds %struct.image, %struct.image* %903, i32 0, i32 12
  %904 = load i32, i32* %height3580, align 4
  %conv3581 = trunc i32 %904 to i8
  %conv3582 = zext i8 %conv3581 to i32
  %905 = load i64, i64* %nbytes, align 8
  %conv3583 = trunc i64 %905 to i8
  %conv3584 = zext i8 %conv3583 to i32
  %mul3585 = mul nsw i32 %conv3582, %conv3584
  %cmp3586 = icmp sle i32 %mul3585, 127
  br i1 %cmp3586, label %cond.true.3588, label %cond.false.3597

cond.true.3588:                                   ; preds = %cond.false.3579
  %906 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3589 = getelementptr inbounds %struct.image, %struct.image* %906, i32 0, i32 12
  %907 = load i32, i32* %height3589, align 4
  %conv3590 = trunc i32 %907 to i8
  %conv3591 = zext i8 %conv3590 to i32
  %908 = load i64, i64* %nbytes, align 8
  %conv3592 = trunc i64 %908 to i8
  %conv3593 = zext i8 %conv3592 to i32
  %mul3594 = mul nsw i32 %conv3591, %conv3593
  %conv3595 = trunc i32 %mul3594 to i8
  %conv3596 = sext i8 %conv3595 to i32
  br label %cond.end.3608

cond.false.3597:                                  ; preds = %cond.false.3579
  %909 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3598 = getelementptr inbounds %struct.image, %struct.image* %909, i32 0, i32 12
  %910 = load i32, i32* %height3598, align 4
  %conv3599 = trunc i32 %910 to i8
  %conv3600 = zext i8 %conv3599 to i32
  %911 = load i64, i64* %nbytes, align 8
  %conv3601 = trunc i64 %911 to i8
  %conv3602 = zext i8 %conv3601 to i32
  %mul3603 = mul nsw i32 %conv3600, %conv3602
  %sub3604 = sub nsw i32 %mul3603, -128
  %conv3605 = trunc i32 %sub3604 to i8
  %conv3606 = sext i8 %conv3605 to i32
  %add3607 = add nsw i32 %conv3606, -128
  br label %cond.end.3608

cond.end.3608:                                    ; preds = %cond.false.3597, %cond.true.3588
  %cond3609 = phi i32 [ %conv3596, %cond.true.3588 ], [ %add3607, %cond.false.3597 ]
  %conv3610 = sext i32 %cond3609 to i64
  store i64 %conv3610, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.3611:                                  ; preds = %lor.lhs.false.2880
  br i1 false, label %cond.true.3612, label %cond.false.4343

cond.true.3612:                                   ; preds = %cond.false.3611
  br i1 false, label %cond.true.3613, label %cond.false.4023

cond.true.3613:                                   ; preds = %cond.true.3612
  %912 = load i64, i64* %nbytes, align 8
  %conv3614 = trunc i64 %912 to i16
  %conv3615 = sext i16 %conv3614 to i32
  %mul3616 = mul nsw i32 0, %conv3615
  %913 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3617 = getelementptr inbounds %struct.image, %struct.image* %913, i32 0, i32 12
  %914 = load i32, i32* %height3617, align 4
  %conv3618 = trunc i32 %914 to i16
  %conv3619 = sext i16 %conv3618 to i32
  %add3620 = add nsw i32 %mul3616, %conv3619
  %mul3621 = mul nsw i32 0, %add3620
  %sub3622 = sub nsw i32 %mul3621, 1
  %cmp3623 = icmp slt i32 %sub3622, 0
  br i1 %cmp3623, label %cond.true.3625, label %cond.false.3653

cond.true.3625:                                   ; preds = %cond.true.3613
  %915 = load i64, i64* %nbytes, align 8
  %conv3626 = trunc i64 %915 to i16
  %conv3627 = sext i16 %conv3626 to i32
  %mul3628 = mul nsw i32 0, %conv3627
  %916 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3629 = getelementptr inbounds %struct.image, %struct.image* %916, i32 0, i32 12
  %917 = load i32, i32* %height3629, align 4
  %conv3630 = trunc i32 %917 to i16
  %conv3631 = sext i16 %conv3630 to i32
  %add3632 = add nsw i32 %mul3628, %conv3631
  %mul3633 = mul nsw i32 0, %add3632
  %add3634 = add nsw i32 %mul3633, 0
  %neg3635 = xor i32 %add3634, -1
  %cmp3636 = icmp eq i32 %neg3635, -1
  %conv3637 = zext i1 %cmp3636 to i32
  %sub3638 = sub nsw i32 0, %conv3637
  %918 = load i64, i64* %nbytes, align 8
  %conv3639 = trunc i64 %918 to i16
  %conv3640 = sext i16 %conv3639 to i32
  %mul3641 = mul nsw i32 0, %conv3640
  %919 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3642 = getelementptr inbounds %struct.image, %struct.image* %919, i32 0, i32 12
  %920 = load i32, i32* %height3642, align 4
  %conv3643 = trunc i32 %920 to i16
  %conv3644 = sext i16 %conv3643 to i32
  %add3645 = add nsw i32 %mul3641, %conv3644
  %mul3646 = mul nsw i32 0, %add3645
  %add3647 = add nsw i32 %mul3646, 1
  %shl3648 = shl i32 %add3647, 30
  %sub3649 = sub nsw i32 %shl3648, 1
  %mul3650 = mul nsw i32 %sub3649, 2
  %add3651 = add nsw i32 %mul3650, 1
  %sub3652 = sub nsw i32 %sub3638, %add3651
  br label %cond.end.3663

cond.false.3653:                                  ; preds = %cond.true.3613
  %921 = load i64, i64* %nbytes, align 8
  %conv3654 = trunc i64 %921 to i16
  %conv3655 = sext i16 %conv3654 to i32
  %mul3656 = mul nsw i32 0, %conv3655
  %922 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3657 = getelementptr inbounds %struct.image, %struct.image* %922, i32 0, i32 12
  %923 = load i32, i32* %height3657, align 4
  %conv3658 = trunc i32 %923 to i16
  %conv3659 = sext i16 %conv3658 to i32
  %add3660 = add nsw i32 %mul3656, %conv3659
  %mul3661 = mul nsw i32 0, %add3660
  %add3662 = add nsw i32 %mul3661, 0
  br label %cond.end.3663

cond.end.3663:                                    ; preds = %cond.false.3653, %cond.true.3625
  %cond3664 = phi i32 [ %sub3652, %cond.true.3625 ], [ %add3662, %cond.false.3653 ]
  %cmp3665 = icmp eq i32 %cond3664, 0
  br i1 %cmp3665, label %land.lhs.true.3667, label %lor.lhs.false.3689

land.lhs.true.3667:                               ; preds = %cond.end.3663
  %924 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3668 = getelementptr inbounds %struct.image, %struct.image* %924, i32 0, i32 12
  %925 = load i32, i32* %height3668, align 4
  %conv3669 = trunc i32 %925 to i16
  %conv3670 = sext i16 %conv3669 to i32
  %cmp3671 = icmp slt i32 %conv3670, 0
  br i1 %cmp3671, label %land.lhs.true.3673, label %lor.lhs.false.3678

land.lhs.true.3673:                               ; preds = %land.lhs.true.3667
  %926 = load i64, i64* %nbytes, align 8
  %conv3674 = trunc i64 %926 to i16
  %conv3675 = sext i16 %conv3674 to i32
  %cmp3676 = icmp slt i32 0, %conv3675
  br i1 %cmp3676, label %cond.true.3959, label %lor.lhs.false.3678

lor.lhs.false.3678:                               ; preds = %land.lhs.true.3673, %land.lhs.true.3667
  %927 = load i64, i64* %nbytes, align 8
  %conv3679 = trunc i64 %927 to i16
  %conv3680 = sext i16 %conv3679 to i32
  %cmp3681 = icmp slt i32 %conv3680, 0
  br i1 %cmp3681, label %land.lhs.true.3683, label %lor.lhs.false.3689

land.lhs.true.3683:                               ; preds = %lor.lhs.false.3678
  %928 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3684 = getelementptr inbounds %struct.image, %struct.image* %928, i32 0, i32 12
  %929 = load i32, i32* %height3684, align 4
  %conv3685 = trunc i32 %929 to i16
  %conv3686 = sext i16 %conv3685 to i32
  %cmp3687 = icmp slt i32 0, %conv3686
  br i1 %cmp3687, label %cond.true.3959, label %lor.lhs.false.3689

lor.lhs.false.3689:                               ; preds = %land.lhs.true.3683, %lor.lhs.false.3678, %cond.end.3663
  %930 = load i64, i64* %nbytes, align 8
  %conv3690 = trunc i64 %930 to i16
  %conv3691 = sext i16 %conv3690 to i32
  %cmp3692 = icmp slt i32 %conv3691, 0
  br i1 %cmp3692, label %cond.true.3694, label %cond.false.3812

cond.true.3694:                                   ; preds = %lor.lhs.false.3689
  %931 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3695 = getelementptr inbounds %struct.image, %struct.image* %931, i32 0, i32 12
  %932 = load i32, i32* %height3695, align 4
  %conv3696 = trunc i32 %932 to i16
  %conv3697 = sext i16 %conv3696 to i32
  %cmp3698 = icmp slt i32 %conv3697, 0
  br i1 %cmp3698, label %cond.true.3700, label %cond.false.3746

cond.true.3700:                                   ; preds = %cond.true.3694
  %933 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3701 = getelementptr inbounds %struct.image, %struct.image* %933, i32 0, i32 12
  %934 = load i32, i32* %height3701, align 4
  %conv3702 = trunc i32 %934 to i16
  %conv3703 = sext i16 %conv3702 to i32
  %935 = load i64, i64* %nbytes, align 8
  %conv3704 = trunc i64 %935 to i16
  %conv3705 = sext i16 %conv3704 to i32
  %mul3706 = mul nsw i32 0, %conv3705
  %936 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3707 = getelementptr inbounds %struct.image, %struct.image* %936, i32 0, i32 12
  %937 = load i32, i32* %height3707, align 4
  %conv3708 = trunc i32 %937 to i16
  %conv3709 = sext i16 %conv3708 to i32
  %add3710 = add nsw i32 %mul3706, %conv3709
  %mul3711 = mul nsw i32 0, %add3710
  %sub3712 = sub nsw i32 %mul3711, 1
  %cmp3713 = icmp slt i32 %sub3712, 0
  br i1 %cmp3713, label %cond.true.3715, label %cond.false.3729

cond.true.3715:                                   ; preds = %cond.true.3700
  %938 = load i64, i64* %nbytes, align 8
  %conv3716 = trunc i64 %938 to i16
  %conv3717 = sext i16 %conv3716 to i32
  %mul3718 = mul nsw i32 0, %conv3717
  %939 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3719 = getelementptr inbounds %struct.image, %struct.image* %939, i32 0, i32 12
  %940 = load i32, i32* %height3719, align 4
  %conv3720 = trunc i32 %940 to i16
  %conv3721 = sext i16 %conv3720 to i32
  %add3722 = add nsw i32 %mul3718, %conv3721
  %mul3723 = mul nsw i32 0, %add3722
  %add3724 = add nsw i32 %mul3723, 1
  %shl3725 = shl i32 %add3724, 30
  %sub3726 = sub nsw i32 %shl3725, 1
  %mul3727 = mul nsw i32 %sub3726, 2
  %add3728 = add nsw i32 %mul3727, 1
  br label %cond.end.3739

cond.false.3729:                                  ; preds = %cond.true.3700
  %941 = load i64, i64* %nbytes, align 8
  %conv3730 = trunc i64 %941 to i16
  %conv3731 = sext i16 %conv3730 to i32
  %mul3732 = mul nsw i32 0, %conv3731
  %942 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3733 = getelementptr inbounds %struct.image, %struct.image* %942, i32 0, i32 12
  %943 = load i32, i32* %height3733, align 4
  %conv3734 = trunc i32 %943 to i16
  %conv3735 = sext i16 %conv3734 to i32
  %add3736 = add nsw i32 %mul3732, %conv3735
  %mul3737 = mul nsw i32 0, %add3736
  %sub3738 = sub nsw i32 %mul3737, 1
  br label %cond.end.3739

cond.end.3739:                                    ; preds = %cond.false.3729, %cond.true.3715
  %cond3740 = phi i32 [ %add3728, %cond.true.3715 ], [ %sub3738, %cond.false.3729 ]
  %944 = load i64, i64* %nbytes, align 8
  %conv3741 = trunc i64 %944 to i16
  %conv3742 = sext i16 %conv3741 to i32
  %div3743 = sdiv i32 %cond3740, %conv3742
  %cmp3744 = icmp slt i32 %conv3703, %div3743
  br i1 %cmp3744, label %cond.true.3959, label %lor.lhs.false.3930

cond.false.3746:                                  ; preds = %cond.true.3694
  %945 = load i64, i64* %nbytes, align 8
  %conv3747 = trunc i64 %945 to i16
  %conv3748 = sext i16 %conv3747 to i32
  %cmp3749 = icmp eq i32 %conv3748, -1
  br i1 %cmp3749, label %cond.true.3751, label %cond.false.3752

cond.true.3751:                                   ; preds = %cond.false.3746
  br i1 false, label %cond.true.3959, label %lor.lhs.false.3930

cond.false.3752:                                  ; preds = %cond.false.3746
  %946 = load i64, i64* %nbytes, align 8
  %conv3753 = trunc i64 %946 to i16
  %conv3754 = sext i16 %conv3753 to i32
  %mul3755 = mul nsw i32 0, %conv3754
  %947 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3756 = getelementptr inbounds %struct.image, %struct.image* %947, i32 0, i32 12
  %948 = load i32, i32* %height3756, align 4
  %conv3757 = trunc i32 %948 to i16
  %conv3758 = sext i16 %conv3757 to i32
  %add3759 = add nsw i32 %mul3755, %conv3758
  %mul3760 = mul nsw i32 0, %add3759
  %sub3761 = sub nsw i32 %mul3760, 1
  %cmp3762 = icmp slt i32 %sub3761, 0
  br i1 %cmp3762, label %cond.true.3764, label %cond.false.3792

cond.true.3764:                                   ; preds = %cond.false.3752
  %949 = load i64, i64* %nbytes, align 8
  %conv3765 = trunc i64 %949 to i16
  %conv3766 = sext i16 %conv3765 to i32
  %mul3767 = mul nsw i32 0, %conv3766
  %950 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3768 = getelementptr inbounds %struct.image, %struct.image* %950, i32 0, i32 12
  %951 = load i32, i32* %height3768, align 4
  %conv3769 = trunc i32 %951 to i16
  %conv3770 = sext i16 %conv3769 to i32
  %add3771 = add nsw i32 %mul3767, %conv3770
  %mul3772 = mul nsw i32 0, %add3771
  %add3773 = add nsw i32 %mul3772, 0
  %neg3774 = xor i32 %add3773, -1
  %cmp3775 = icmp eq i32 %neg3774, -1
  %conv3776 = zext i1 %cmp3775 to i32
  %sub3777 = sub nsw i32 0, %conv3776
  %952 = load i64, i64* %nbytes, align 8
  %conv3778 = trunc i64 %952 to i16
  %conv3779 = sext i16 %conv3778 to i32
  %mul3780 = mul nsw i32 0, %conv3779
  %953 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3781 = getelementptr inbounds %struct.image, %struct.image* %953, i32 0, i32 12
  %954 = load i32, i32* %height3781, align 4
  %conv3782 = trunc i32 %954 to i16
  %conv3783 = sext i16 %conv3782 to i32
  %add3784 = add nsw i32 %mul3780, %conv3783
  %mul3785 = mul nsw i32 0, %add3784
  %add3786 = add nsw i32 %mul3785, 1
  %shl3787 = shl i32 %add3786, 30
  %sub3788 = sub nsw i32 %shl3787, 1
  %mul3789 = mul nsw i32 %sub3788, 2
  %add3790 = add nsw i32 %mul3789, 1
  %sub3791 = sub nsw i32 %sub3777, %add3790
  br label %cond.end.3802

cond.false.3792:                                  ; preds = %cond.false.3752
  %955 = load i64, i64* %nbytes, align 8
  %conv3793 = trunc i64 %955 to i16
  %conv3794 = sext i16 %conv3793 to i32
  %mul3795 = mul nsw i32 0, %conv3794
  %956 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3796 = getelementptr inbounds %struct.image, %struct.image* %956, i32 0, i32 12
  %957 = load i32, i32* %height3796, align 4
  %conv3797 = trunc i32 %957 to i16
  %conv3798 = sext i16 %conv3797 to i32
  %add3799 = add nsw i32 %mul3795, %conv3798
  %mul3800 = mul nsw i32 0, %add3799
  %add3801 = add nsw i32 %mul3800, 0
  br label %cond.end.3802

cond.end.3802:                                    ; preds = %cond.false.3792, %cond.true.3764
  %cond3803 = phi i32 [ %sub3791, %cond.true.3764 ], [ %add3801, %cond.false.3792 ]
  %958 = load i64, i64* %nbytes, align 8
  %conv3804 = trunc i64 %958 to i16
  %conv3805 = sext i16 %conv3804 to i32
  %div3806 = sdiv i32 %cond3803, %conv3805
  %959 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3807 = getelementptr inbounds %struct.image, %struct.image* %959, i32 0, i32 12
  %960 = load i32, i32* %height3807, align 4
  %conv3808 = trunc i32 %960 to i16
  %conv3809 = sext i16 %conv3808 to i32
  %cmp3810 = icmp slt i32 %div3806, %conv3809
  br i1 %cmp3810, label %cond.true.3959, label %lor.lhs.false.3930

cond.false.3812:                                  ; preds = %lor.lhs.false.3689
  %961 = load i64, i64* %nbytes, align 8
  %conv3813 = trunc i64 %961 to i16
  %conv3814 = sext i16 %conv3813 to i32
  %cmp3815 = icmp eq i32 %conv3814, 0
  br i1 %cmp3815, label %cond.true.3817, label %cond.false.3818

cond.true.3817:                                   ; preds = %cond.false.3812
  br i1 false, label %cond.true.3959, label %lor.lhs.false.3930

cond.false.3818:                                  ; preds = %cond.false.3812
  %962 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3819 = getelementptr inbounds %struct.image, %struct.image* %962, i32 0, i32 12
  %963 = load i32, i32* %height3819, align 4
  %conv3820 = trunc i32 %963 to i16
  %conv3821 = sext i16 %conv3820 to i32
  %cmp3822 = icmp slt i32 %conv3821, 0
  br i1 %cmp3822, label %cond.true.3824, label %cond.false.3884

cond.true.3824:                                   ; preds = %cond.false.3818
  %964 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3825 = getelementptr inbounds %struct.image, %struct.image* %964, i32 0, i32 12
  %965 = load i32, i32* %height3825, align 4
  %conv3826 = trunc i32 %965 to i16
  %conv3827 = sext i16 %conv3826 to i32
  %966 = load i64, i64* %nbytes, align 8
  %conv3828 = trunc i64 %966 to i16
  %conv3829 = sext i16 %conv3828 to i32
  %mul3830 = mul nsw i32 0, %conv3829
  %967 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3831 = getelementptr inbounds %struct.image, %struct.image* %967, i32 0, i32 12
  %968 = load i32, i32* %height3831, align 4
  %conv3832 = trunc i32 %968 to i16
  %conv3833 = sext i16 %conv3832 to i32
  %add3834 = add nsw i32 %mul3830, %conv3833
  %mul3835 = mul nsw i32 0, %add3834
  %sub3836 = sub nsw i32 %mul3835, 1
  %cmp3837 = icmp slt i32 %sub3836, 0
  br i1 %cmp3837, label %cond.true.3839, label %cond.false.3867

cond.true.3839:                                   ; preds = %cond.true.3824
  %969 = load i64, i64* %nbytes, align 8
  %conv3840 = trunc i64 %969 to i16
  %conv3841 = sext i16 %conv3840 to i32
  %mul3842 = mul nsw i32 0, %conv3841
  %970 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3843 = getelementptr inbounds %struct.image, %struct.image* %970, i32 0, i32 12
  %971 = load i32, i32* %height3843, align 4
  %conv3844 = trunc i32 %971 to i16
  %conv3845 = sext i16 %conv3844 to i32
  %add3846 = add nsw i32 %mul3842, %conv3845
  %mul3847 = mul nsw i32 0, %add3846
  %add3848 = add nsw i32 %mul3847, 0
  %neg3849 = xor i32 %add3848, -1
  %cmp3850 = icmp eq i32 %neg3849, -1
  %conv3851 = zext i1 %cmp3850 to i32
  %sub3852 = sub nsw i32 0, %conv3851
  %972 = load i64, i64* %nbytes, align 8
  %conv3853 = trunc i64 %972 to i16
  %conv3854 = sext i16 %conv3853 to i32
  %mul3855 = mul nsw i32 0, %conv3854
  %973 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3856 = getelementptr inbounds %struct.image, %struct.image* %973, i32 0, i32 12
  %974 = load i32, i32* %height3856, align 4
  %conv3857 = trunc i32 %974 to i16
  %conv3858 = sext i16 %conv3857 to i32
  %add3859 = add nsw i32 %mul3855, %conv3858
  %mul3860 = mul nsw i32 0, %add3859
  %add3861 = add nsw i32 %mul3860, 1
  %shl3862 = shl i32 %add3861, 30
  %sub3863 = sub nsw i32 %shl3862, 1
  %mul3864 = mul nsw i32 %sub3863, 2
  %add3865 = add nsw i32 %mul3864, 1
  %sub3866 = sub nsw i32 %sub3852, %add3865
  br label %cond.end.3877

cond.false.3867:                                  ; preds = %cond.true.3824
  %975 = load i64, i64* %nbytes, align 8
  %conv3868 = trunc i64 %975 to i16
  %conv3869 = sext i16 %conv3868 to i32
  %mul3870 = mul nsw i32 0, %conv3869
  %976 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3871 = getelementptr inbounds %struct.image, %struct.image* %976, i32 0, i32 12
  %977 = load i32, i32* %height3871, align 4
  %conv3872 = trunc i32 %977 to i16
  %conv3873 = sext i16 %conv3872 to i32
  %add3874 = add nsw i32 %mul3870, %conv3873
  %mul3875 = mul nsw i32 0, %add3874
  %add3876 = add nsw i32 %mul3875, 0
  br label %cond.end.3877

cond.end.3877:                                    ; preds = %cond.false.3867, %cond.true.3839
  %cond3878 = phi i32 [ %sub3866, %cond.true.3839 ], [ %add3876, %cond.false.3867 ]
  %978 = load i64, i64* %nbytes, align 8
  %conv3879 = trunc i64 %978 to i16
  %conv3880 = sext i16 %conv3879 to i32
  %div3881 = sdiv i32 %cond3878, %conv3880
  %cmp3882 = icmp slt i32 %conv3827, %div3881
  br i1 %cmp3882, label %cond.true.3959, label %lor.lhs.false.3930

cond.false.3884:                                  ; preds = %cond.false.3818
  %979 = load i64, i64* %nbytes, align 8
  %conv3885 = trunc i64 %979 to i16
  %conv3886 = sext i16 %conv3885 to i32
  %mul3887 = mul nsw i32 0, %conv3886
  %980 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3888 = getelementptr inbounds %struct.image, %struct.image* %980, i32 0, i32 12
  %981 = load i32, i32* %height3888, align 4
  %conv3889 = trunc i32 %981 to i16
  %conv3890 = sext i16 %conv3889 to i32
  %add3891 = add nsw i32 %mul3887, %conv3890
  %mul3892 = mul nsw i32 0, %add3891
  %sub3893 = sub nsw i32 %mul3892, 1
  %cmp3894 = icmp slt i32 %sub3893, 0
  br i1 %cmp3894, label %cond.true.3896, label %cond.false.3910

cond.true.3896:                                   ; preds = %cond.false.3884
  %982 = load i64, i64* %nbytes, align 8
  %conv3897 = trunc i64 %982 to i16
  %conv3898 = sext i16 %conv3897 to i32
  %mul3899 = mul nsw i32 0, %conv3898
  %983 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3900 = getelementptr inbounds %struct.image, %struct.image* %983, i32 0, i32 12
  %984 = load i32, i32* %height3900, align 4
  %conv3901 = trunc i32 %984 to i16
  %conv3902 = sext i16 %conv3901 to i32
  %add3903 = add nsw i32 %mul3899, %conv3902
  %mul3904 = mul nsw i32 0, %add3903
  %add3905 = add nsw i32 %mul3904, 1
  %shl3906 = shl i32 %add3905, 30
  %sub3907 = sub nsw i32 %shl3906, 1
  %mul3908 = mul nsw i32 %sub3907, 2
  %add3909 = add nsw i32 %mul3908, 1
  br label %cond.end.3920

cond.false.3910:                                  ; preds = %cond.false.3884
  %985 = load i64, i64* %nbytes, align 8
  %conv3911 = trunc i64 %985 to i16
  %conv3912 = sext i16 %conv3911 to i32
  %mul3913 = mul nsw i32 0, %conv3912
  %986 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3914 = getelementptr inbounds %struct.image, %struct.image* %986, i32 0, i32 12
  %987 = load i32, i32* %height3914, align 4
  %conv3915 = trunc i32 %987 to i16
  %conv3916 = sext i16 %conv3915 to i32
  %add3917 = add nsw i32 %mul3913, %conv3916
  %mul3918 = mul nsw i32 0, %add3917
  %sub3919 = sub nsw i32 %mul3918, 1
  br label %cond.end.3920

cond.end.3920:                                    ; preds = %cond.false.3910, %cond.true.3896
  %cond3921 = phi i32 [ %add3909, %cond.true.3896 ], [ %sub3919, %cond.false.3910 ]
  %988 = load i64, i64* %nbytes, align 8
  %conv3922 = trunc i64 %988 to i16
  %conv3923 = sext i16 %conv3922 to i32
  %div3924 = sdiv i32 %cond3921, %conv3923
  %989 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3925 = getelementptr inbounds %struct.image, %struct.image* %989, i32 0, i32 12
  %990 = load i32, i32* %height3925, align 4
  %conv3926 = trunc i32 %990 to i16
  %conv3927 = sext i16 %conv3926 to i32
  %cmp3928 = icmp slt i32 %div3924, %conv3927
  br i1 %cmp3928, label %cond.true.3959, label %lor.lhs.false.3930

lor.lhs.false.3930:                               ; preds = %cond.end.3920, %cond.end.3877, %cond.true.3817, %cond.end.3802, %cond.true.3751, %cond.end.3739
  %991 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3931 = getelementptr inbounds %struct.image, %struct.image* %991, i32 0, i32 12
  %992 = load i32, i32* %height3931, align 4
  %conv3932 = trunc i32 %992 to i16
  %conv3933 = sext i16 %conv3932 to i32
  %993 = load i64, i64* %nbytes, align 8
  %conv3934 = trunc i64 %993 to i16
  %conv3935 = sext i16 %conv3934 to i32
  %mul3936 = mul nsw i32 %conv3933, %conv3935
  %mul3937 = mul nsw i32 0, %mul3936
  %sub3938 = sub nsw i32 %mul3937, 1
  %cmp3939 = icmp slt i32 %sub3938, 0
  br i1 %cmp3939, label %land.lhs.true.3941, label %lor.lhs.false.3950

land.lhs.true.3941:                               ; preds = %lor.lhs.false.3930
  %994 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3942 = getelementptr inbounds %struct.image, %struct.image* %994, i32 0, i32 12
  %995 = load i32, i32* %height3942, align 4
  %conv3943 = trunc i32 %995 to i16
  %conv3944 = sext i16 %conv3943 to i32
  %996 = load i64, i64* %nbytes, align 8
  %conv3945 = trunc i64 %996 to i16
  %conv3946 = sext i16 %conv3945 to i32
  %mul3947 = mul nsw i32 %conv3944, %conv3946
  %cmp3948 = icmp slt i32 %mul3947, -32768
  br i1 %cmp3948, label %cond.true.3959, label %lor.lhs.false.3950

lor.lhs.false.3950:                               ; preds = %land.lhs.true.3941, %lor.lhs.false.3930
  %997 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3951 = getelementptr inbounds %struct.image, %struct.image* %997, i32 0, i32 12
  %998 = load i32, i32* %height3951, align 4
  %conv3952 = trunc i32 %998 to i16
  %conv3953 = sext i16 %conv3952 to i32
  %999 = load i64, i64* %nbytes, align 8
  %conv3954 = trunc i64 %999 to i16
  %conv3955 = sext i16 %conv3954 to i32
  %mul3956 = mul nsw i32 %conv3953, %conv3955
  %cmp3957 = icmp slt i32 32767, %mul3956
  br i1 %cmp3957, label %cond.true.3959, label %cond.false.3991

cond.true.3959:                                   ; preds = %lor.lhs.false.3950, %land.lhs.true.3941, %cond.end.3920, %cond.end.3877, %cond.true.3817, %cond.end.3802, %cond.true.3751, %cond.end.3739, %land.lhs.true.3683, %land.lhs.true.3673
  %1000 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3960 = getelementptr inbounds %struct.image, %struct.image* %1000, i32 0, i32 12
  %1001 = load i32, i32* %height3960, align 4
  %conv3961 = trunc i32 %1001 to i16
  %conv3962 = zext i16 %conv3961 to i32
  %1002 = load i64, i64* %nbytes, align 8
  %conv3963 = trunc i64 %1002 to i16
  %conv3964 = zext i16 %conv3963 to i32
  %mul3965 = mul nsw i32 %conv3962, %conv3964
  %cmp3966 = icmp sle i32 %mul3965, 32767
  br i1 %cmp3966, label %cond.true.3968, label %cond.false.3977

cond.true.3968:                                   ; preds = %cond.true.3959
  %1003 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3969 = getelementptr inbounds %struct.image, %struct.image* %1003, i32 0, i32 12
  %1004 = load i32, i32* %height3969, align 4
  %conv3970 = trunc i32 %1004 to i16
  %conv3971 = zext i16 %conv3970 to i32
  %1005 = load i64, i64* %nbytes, align 8
  %conv3972 = trunc i64 %1005 to i16
  %conv3973 = zext i16 %conv3972 to i32
  %mul3974 = mul nsw i32 %conv3971, %conv3973
  %conv3975 = trunc i32 %mul3974 to i16
  %conv3976 = sext i16 %conv3975 to i32
  br label %cond.end.3988

cond.false.3977:                                  ; preds = %cond.true.3959
  %1006 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3978 = getelementptr inbounds %struct.image, %struct.image* %1006, i32 0, i32 12
  %1007 = load i32, i32* %height3978, align 4
  %conv3979 = trunc i32 %1007 to i16
  %conv3980 = zext i16 %conv3979 to i32
  %1008 = load i64, i64* %nbytes, align 8
  %conv3981 = trunc i64 %1008 to i16
  %conv3982 = zext i16 %conv3981 to i32
  %mul3983 = mul nsw i32 %conv3980, %conv3982
  %sub3984 = sub nsw i32 %mul3983, -32768
  %conv3985 = trunc i32 %sub3984 to i16
  %conv3986 = sext i16 %conv3985 to i32
  %add3987 = add nsw i32 %conv3986, -32768
  br label %cond.end.3988

cond.end.3988:                                    ; preds = %cond.false.3977, %cond.true.3968
  %cond3989 = phi i32 [ %conv3976, %cond.true.3968 ], [ %add3987, %cond.false.3977 ]
  %conv3990 = sext i32 %cond3989 to i64
  store i64 %conv3990, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.3991:                                  ; preds = %lor.lhs.false.3950
  %1009 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3992 = getelementptr inbounds %struct.image, %struct.image* %1009, i32 0, i32 12
  %1010 = load i32, i32* %height3992, align 4
  %conv3993 = trunc i32 %1010 to i16
  %conv3994 = zext i16 %conv3993 to i32
  %1011 = load i64, i64* %nbytes, align 8
  %conv3995 = trunc i64 %1011 to i16
  %conv3996 = zext i16 %conv3995 to i32
  %mul3997 = mul nsw i32 %conv3994, %conv3996
  %cmp3998 = icmp sle i32 %mul3997, 32767
  br i1 %cmp3998, label %cond.true.4000, label %cond.false.4009

cond.true.4000:                                   ; preds = %cond.false.3991
  %1012 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4001 = getelementptr inbounds %struct.image, %struct.image* %1012, i32 0, i32 12
  %1013 = load i32, i32* %height4001, align 4
  %conv4002 = trunc i32 %1013 to i16
  %conv4003 = zext i16 %conv4002 to i32
  %1014 = load i64, i64* %nbytes, align 8
  %conv4004 = trunc i64 %1014 to i16
  %conv4005 = zext i16 %conv4004 to i32
  %mul4006 = mul nsw i32 %conv4003, %conv4005
  %conv4007 = trunc i32 %mul4006 to i16
  %conv4008 = sext i16 %conv4007 to i32
  br label %cond.end.4020

cond.false.4009:                                  ; preds = %cond.false.3991
  %1015 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4010 = getelementptr inbounds %struct.image, %struct.image* %1015, i32 0, i32 12
  %1016 = load i32, i32* %height4010, align 4
  %conv4011 = trunc i32 %1016 to i16
  %conv4012 = zext i16 %conv4011 to i32
  %1017 = load i64, i64* %nbytes, align 8
  %conv4013 = trunc i64 %1017 to i16
  %conv4014 = zext i16 %conv4013 to i32
  %mul4015 = mul nsw i32 %conv4012, %conv4014
  %sub4016 = sub nsw i32 %mul4015, -32768
  %conv4017 = trunc i32 %sub4016 to i16
  %conv4018 = sext i16 %conv4017 to i32
  %add4019 = add nsw i32 %conv4018, -32768
  br label %cond.end.4020

cond.end.4020:                                    ; preds = %cond.false.4009, %cond.true.4000
  %cond4021 = phi i32 [ %conv4008, %cond.true.4000 ], [ %add4019, %cond.false.4009 ]
  %conv4022 = sext i32 %cond4021 to i64
  store i64 %conv4022, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.4023:                                  ; preds = %cond.true.3612
  %1018 = load i64, i64* %nbytes, align 8
  %mul4024 = mul nsw i64 0, %1018
  %1019 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4025 = getelementptr inbounds %struct.image, %struct.image* %1019, i32 0, i32 12
  %1020 = load i32, i32* %height4025, align 4
  %conv4026 = sext i32 %1020 to i64
  %add4027 = add nsw i64 %mul4024, %conv4026
  %mul4028 = mul nsw i64 0, %add4027
  %sub4029 = sub nsw i64 %mul4028, 1
  %cmp4030 = icmp slt i64 %sub4029, 0
  br i1 %cmp4030, label %cond.true.4032, label %cond.false.4055

cond.true.4032:                                   ; preds = %cond.false.4023
  %1021 = load i64, i64* %nbytes, align 8
  %mul4033 = mul nsw i64 0, %1021
  %1022 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4034 = getelementptr inbounds %struct.image, %struct.image* %1022, i32 0, i32 12
  %1023 = load i32, i32* %height4034, align 4
  %conv4035 = sext i32 %1023 to i64
  %add4036 = add nsw i64 %mul4033, %conv4035
  %mul4037 = mul nsw i64 0, %add4036
  %add4038 = add nsw i64 %mul4037, 0
  %neg4039 = xor i64 %add4038, -1
  %cmp4040 = icmp eq i64 %neg4039, -1
  %conv4041 = zext i1 %cmp4040 to i32
  %sub4042 = sub nsw i32 0, %conv4041
  %conv4043 = sext i32 %sub4042 to i64
  %1024 = load i64, i64* %nbytes, align 8
  %mul4044 = mul nsw i64 0, %1024
  %1025 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4045 = getelementptr inbounds %struct.image, %struct.image* %1025, i32 0, i32 12
  %1026 = load i32, i32* %height4045, align 4
  %conv4046 = sext i32 %1026 to i64
  %add4047 = add nsw i64 %mul4044, %conv4046
  %mul4048 = mul nsw i64 0, %add4047
  %add4049 = add nsw i64 %mul4048, 1
  %shl4050 = shl i64 %add4049, 62
  %sub4051 = sub nsw i64 %shl4050, 1
  %mul4052 = mul nsw i64 %sub4051, 2
  %add4053 = add nsw i64 %mul4052, 1
  %sub4054 = sub nsw i64 %conv4043, %add4053
  br label %cond.end.4062

cond.false.4055:                                  ; preds = %cond.false.4023
  %1027 = load i64, i64* %nbytes, align 8
  %mul4056 = mul nsw i64 0, %1027
  %1028 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4057 = getelementptr inbounds %struct.image, %struct.image* %1028, i32 0, i32 12
  %1029 = load i32, i32* %height4057, align 4
  %conv4058 = sext i32 %1029 to i64
  %add4059 = add nsw i64 %mul4056, %conv4058
  %mul4060 = mul nsw i64 0, %add4059
  %add4061 = add nsw i64 %mul4060, 0
  br label %cond.end.4062

cond.end.4062:                                    ; preds = %cond.false.4055, %cond.true.4032
  %cond4063 = phi i64 [ %sub4054, %cond.true.4032 ], [ %add4061, %cond.false.4055 ]
  %cmp4064 = icmp eq i64 %cond4063, 0
  br i1 %cmp4064, label %land.lhs.true.4066, label %lor.lhs.false.4080

land.lhs.true.4066:                               ; preds = %cond.end.4062
  %1030 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4067 = getelementptr inbounds %struct.image, %struct.image* %1030, i32 0, i32 12
  %1031 = load i32, i32* %height4067, align 4
  %cmp4068 = icmp slt i32 %1031, 0
  br i1 %cmp4068, label %land.lhs.true.4070, label %lor.lhs.false.4073

land.lhs.true.4070:                               ; preds = %land.lhs.true.4066
  %1032 = load i64, i64* %nbytes, align 8
  %cmp4071 = icmp slt i64 0, %1032
  br i1 %cmp4071, label %cond.true.4279, label %lor.lhs.false.4073

lor.lhs.false.4073:                               ; preds = %land.lhs.true.4070, %land.lhs.true.4066
  %1033 = load i64, i64* %nbytes, align 8
  %cmp4074 = icmp slt i64 %1033, 0
  br i1 %cmp4074, label %land.lhs.true.4076, label %lor.lhs.false.4080

land.lhs.true.4076:                               ; preds = %lor.lhs.false.4073
  %1034 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4077 = getelementptr inbounds %struct.image, %struct.image* %1034, i32 0, i32 12
  %1035 = load i32, i32* %height4077, align 4
  %cmp4078 = icmp slt i32 0, %1035
  br i1 %cmp4078, label %cond.true.4279, label %lor.lhs.false.4080

lor.lhs.false.4080:                               ; preds = %land.lhs.true.4076, %lor.lhs.false.4073, %cond.end.4062
  %1036 = load i64, i64* %nbytes, align 8
  %cmp4081 = icmp slt i64 %1036, 0
  br i1 %cmp4081, label %cond.true.4083, label %cond.false.4171

cond.true.4083:                                   ; preds = %lor.lhs.false.4080
  %1037 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4084 = getelementptr inbounds %struct.image, %struct.image* %1037, i32 0, i32 12
  %1038 = load i32, i32* %height4084, align 4
  %cmp4085 = icmp slt i32 %1038, 0
  br i1 %cmp4085, label %cond.true.4087, label %cond.false.4121

cond.true.4087:                                   ; preds = %cond.true.4083
  %1039 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4088 = getelementptr inbounds %struct.image, %struct.image* %1039, i32 0, i32 12
  %1040 = load i32, i32* %height4088, align 4
  %conv4089 = sext i32 %1040 to i64
  %1041 = load i64, i64* %nbytes, align 8
  %mul4090 = mul nsw i64 0, %1041
  %1042 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4091 = getelementptr inbounds %struct.image, %struct.image* %1042, i32 0, i32 12
  %1043 = load i32, i32* %height4091, align 4
  %conv4092 = sext i32 %1043 to i64
  %add4093 = add nsw i64 %mul4090, %conv4092
  %mul4094 = mul nsw i64 0, %add4093
  %sub4095 = sub nsw i64 %mul4094, 1
  %cmp4096 = icmp slt i64 %sub4095, 0
  br i1 %cmp4096, label %cond.true.4098, label %cond.false.4109

cond.true.4098:                                   ; preds = %cond.true.4087
  %1044 = load i64, i64* %nbytes, align 8
  %mul4099 = mul nsw i64 0, %1044
  %1045 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4100 = getelementptr inbounds %struct.image, %struct.image* %1045, i32 0, i32 12
  %1046 = load i32, i32* %height4100, align 4
  %conv4101 = sext i32 %1046 to i64
  %add4102 = add nsw i64 %mul4099, %conv4101
  %mul4103 = mul nsw i64 0, %add4102
  %add4104 = add nsw i64 %mul4103, 1
  %shl4105 = shl i64 %add4104, 62
  %sub4106 = sub nsw i64 %shl4105, 1
  %mul4107 = mul nsw i64 %sub4106, 2
  %add4108 = add nsw i64 %mul4107, 1
  br label %cond.end.4116

cond.false.4109:                                  ; preds = %cond.true.4087
  %1047 = load i64, i64* %nbytes, align 8
  %mul4110 = mul nsw i64 0, %1047
  %1048 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4111 = getelementptr inbounds %struct.image, %struct.image* %1048, i32 0, i32 12
  %1049 = load i32, i32* %height4111, align 4
  %conv4112 = sext i32 %1049 to i64
  %add4113 = add nsw i64 %mul4110, %conv4112
  %mul4114 = mul nsw i64 0, %add4113
  %sub4115 = sub nsw i64 %mul4114, 1
  br label %cond.end.4116

cond.end.4116:                                    ; preds = %cond.false.4109, %cond.true.4098
  %cond4117 = phi i64 [ %add4108, %cond.true.4098 ], [ %sub4115, %cond.false.4109 ]
  %1050 = load i64, i64* %nbytes, align 8
  %div4118 = sdiv i64 %cond4117, %1050
  %cmp4119 = icmp slt i64 %conv4089, %div4118
  br i1 %cmp4119, label %cond.true.4279, label %lor.lhs.false.4259

cond.false.4121:                                  ; preds = %cond.true.4083
  %1051 = load i64, i64* %nbytes, align 8
  %cmp4122 = icmp eq i64 %1051, -1
  br i1 %cmp4122, label %cond.true.4124, label %cond.false.4125

cond.true.4124:                                   ; preds = %cond.false.4121
  br i1 false, label %cond.true.4279, label %lor.lhs.false.4259

cond.false.4125:                                  ; preds = %cond.false.4121
  %1052 = load i64, i64* %nbytes, align 8
  %mul4126 = mul nsw i64 0, %1052
  %1053 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4127 = getelementptr inbounds %struct.image, %struct.image* %1053, i32 0, i32 12
  %1054 = load i32, i32* %height4127, align 4
  %conv4128 = sext i32 %1054 to i64
  %add4129 = add nsw i64 %mul4126, %conv4128
  %mul4130 = mul nsw i64 0, %add4129
  %sub4131 = sub nsw i64 %mul4130, 1
  %cmp4132 = icmp slt i64 %sub4131, 0
  br i1 %cmp4132, label %cond.true.4134, label %cond.false.4157

cond.true.4134:                                   ; preds = %cond.false.4125
  %1055 = load i64, i64* %nbytes, align 8
  %mul4135 = mul nsw i64 0, %1055
  %1056 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4136 = getelementptr inbounds %struct.image, %struct.image* %1056, i32 0, i32 12
  %1057 = load i32, i32* %height4136, align 4
  %conv4137 = sext i32 %1057 to i64
  %add4138 = add nsw i64 %mul4135, %conv4137
  %mul4139 = mul nsw i64 0, %add4138
  %add4140 = add nsw i64 %mul4139, 0
  %neg4141 = xor i64 %add4140, -1
  %cmp4142 = icmp eq i64 %neg4141, -1
  %conv4143 = zext i1 %cmp4142 to i32
  %sub4144 = sub nsw i32 0, %conv4143
  %conv4145 = sext i32 %sub4144 to i64
  %1058 = load i64, i64* %nbytes, align 8
  %mul4146 = mul nsw i64 0, %1058
  %1059 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4147 = getelementptr inbounds %struct.image, %struct.image* %1059, i32 0, i32 12
  %1060 = load i32, i32* %height4147, align 4
  %conv4148 = sext i32 %1060 to i64
  %add4149 = add nsw i64 %mul4146, %conv4148
  %mul4150 = mul nsw i64 0, %add4149
  %add4151 = add nsw i64 %mul4150, 1
  %shl4152 = shl i64 %add4151, 62
  %sub4153 = sub nsw i64 %shl4152, 1
  %mul4154 = mul nsw i64 %sub4153, 2
  %add4155 = add nsw i64 %mul4154, 1
  %sub4156 = sub nsw i64 %conv4145, %add4155
  br label %cond.end.4164

cond.false.4157:                                  ; preds = %cond.false.4125
  %1061 = load i64, i64* %nbytes, align 8
  %mul4158 = mul nsw i64 0, %1061
  %1062 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4159 = getelementptr inbounds %struct.image, %struct.image* %1062, i32 0, i32 12
  %1063 = load i32, i32* %height4159, align 4
  %conv4160 = sext i32 %1063 to i64
  %add4161 = add nsw i64 %mul4158, %conv4160
  %mul4162 = mul nsw i64 0, %add4161
  %add4163 = add nsw i64 %mul4162, 0
  br label %cond.end.4164

cond.end.4164:                                    ; preds = %cond.false.4157, %cond.true.4134
  %cond4165 = phi i64 [ %sub4156, %cond.true.4134 ], [ %add4163, %cond.false.4157 ]
  %1064 = load i64, i64* %nbytes, align 8
  %div4166 = sdiv i64 %cond4165, %1064
  %1065 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4167 = getelementptr inbounds %struct.image, %struct.image* %1065, i32 0, i32 12
  %1066 = load i32, i32* %height4167, align 4
  %conv4168 = sext i32 %1066 to i64
  %cmp4169 = icmp slt i64 %div4166, %conv4168
  br i1 %cmp4169, label %cond.true.4279, label %lor.lhs.false.4259

cond.false.4171:                                  ; preds = %lor.lhs.false.4080
  %1067 = load i64, i64* %nbytes, align 8
  %cmp4172 = icmp eq i64 %1067, 0
  br i1 %cmp4172, label %cond.true.4174, label %cond.false.4175

cond.true.4174:                                   ; preds = %cond.false.4171
  br i1 false, label %cond.true.4279, label %lor.lhs.false.4259

cond.false.4175:                                  ; preds = %cond.false.4171
  %1068 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4176 = getelementptr inbounds %struct.image, %struct.image* %1068, i32 0, i32 12
  %1069 = load i32, i32* %height4176, align 4
  %cmp4177 = icmp slt i32 %1069, 0
  br i1 %cmp4177, label %cond.true.4179, label %cond.false.4225

cond.true.4179:                                   ; preds = %cond.false.4175
  %1070 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4180 = getelementptr inbounds %struct.image, %struct.image* %1070, i32 0, i32 12
  %1071 = load i32, i32* %height4180, align 4
  %conv4181 = sext i32 %1071 to i64
  %1072 = load i64, i64* %nbytes, align 8
  %mul4182 = mul nsw i64 0, %1072
  %1073 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4183 = getelementptr inbounds %struct.image, %struct.image* %1073, i32 0, i32 12
  %1074 = load i32, i32* %height4183, align 4
  %conv4184 = sext i32 %1074 to i64
  %add4185 = add nsw i64 %mul4182, %conv4184
  %mul4186 = mul nsw i64 0, %add4185
  %sub4187 = sub nsw i64 %mul4186, 1
  %cmp4188 = icmp slt i64 %sub4187, 0
  br i1 %cmp4188, label %cond.true.4190, label %cond.false.4213

cond.true.4190:                                   ; preds = %cond.true.4179
  %1075 = load i64, i64* %nbytes, align 8
  %mul4191 = mul nsw i64 0, %1075
  %1076 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4192 = getelementptr inbounds %struct.image, %struct.image* %1076, i32 0, i32 12
  %1077 = load i32, i32* %height4192, align 4
  %conv4193 = sext i32 %1077 to i64
  %add4194 = add nsw i64 %mul4191, %conv4193
  %mul4195 = mul nsw i64 0, %add4194
  %add4196 = add nsw i64 %mul4195, 0
  %neg4197 = xor i64 %add4196, -1
  %cmp4198 = icmp eq i64 %neg4197, -1
  %conv4199 = zext i1 %cmp4198 to i32
  %sub4200 = sub nsw i32 0, %conv4199
  %conv4201 = sext i32 %sub4200 to i64
  %1078 = load i64, i64* %nbytes, align 8
  %mul4202 = mul nsw i64 0, %1078
  %1079 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4203 = getelementptr inbounds %struct.image, %struct.image* %1079, i32 0, i32 12
  %1080 = load i32, i32* %height4203, align 4
  %conv4204 = sext i32 %1080 to i64
  %add4205 = add nsw i64 %mul4202, %conv4204
  %mul4206 = mul nsw i64 0, %add4205
  %add4207 = add nsw i64 %mul4206, 1
  %shl4208 = shl i64 %add4207, 62
  %sub4209 = sub nsw i64 %shl4208, 1
  %mul4210 = mul nsw i64 %sub4209, 2
  %add4211 = add nsw i64 %mul4210, 1
  %sub4212 = sub nsw i64 %conv4201, %add4211
  br label %cond.end.4220

cond.false.4213:                                  ; preds = %cond.true.4179
  %1081 = load i64, i64* %nbytes, align 8
  %mul4214 = mul nsw i64 0, %1081
  %1082 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4215 = getelementptr inbounds %struct.image, %struct.image* %1082, i32 0, i32 12
  %1083 = load i32, i32* %height4215, align 4
  %conv4216 = sext i32 %1083 to i64
  %add4217 = add nsw i64 %mul4214, %conv4216
  %mul4218 = mul nsw i64 0, %add4217
  %add4219 = add nsw i64 %mul4218, 0
  br label %cond.end.4220

cond.end.4220:                                    ; preds = %cond.false.4213, %cond.true.4190
  %cond4221 = phi i64 [ %sub4212, %cond.true.4190 ], [ %add4219, %cond.false.4213 ]
  %1084 = load i64, i64* %nbytes, align 8
  %div4222 = sdiv i64 %cond4221, %1084
  %cmp4223 = icmp slt i64 %conv4181, %div4222
  br i1 %cmp4223, label %cond.true.4279, label %lor.lhs.false.4259

cond.false.4225:                                  ; preds = %cond.false.4175
  %1085 = load i64, i64* %nbytes, align 8
  %mul4226 = mul nsw i64 0, %1085
  %1086 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4227 = getelementptr inbounds %struct.image, %struct.image* %1086, i32 0, i32 12
  %1087 = load i32, i32* %height4227, align 4
  %conv4228 = sext i32 %1087 to i64
  %add4229 = add nsw i64 %mul4226, %conv4228
  %mul4230 = mul nsw i64 0, %add4229
  %sub4231 = sub nsw i64 %mul4230, 1
  %cmp4232 = icmp slt i64 %sub4231, 0
  br i1 %cmp4232, label %cond.true.4234, label %cond.false.4245

cond.true.4234:                                   ; preds = %cond.false.4225
  %1088 = load i64, i64* %nbytes, align 8
  %mul4235 = mul nsw i64 0, %1088
  %1089 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4236 = getelementptr inbounds %struct.image, %struct.image* %1089, i32 0, i32 12
  %1090 = load i32, i32* %height4236, align 4
  %conv4237 = sext i32 %1090 to i64
  %add4238 = add nsw i64 %mul4235, %conv4237
  %mul4239 = mul nsw i64 0, %add4238
  %add4240 = add nsw i64 %mul4239, 1
  %shl4241 = shl i64 %add4240, 62
  %sub4242 = sub nsw i64 %shl4241, 1
  %mul4243 = mul nsw i64 %sub4242, 2
  %add4244 = add nsw i64 %mul4243, 1
  br label %cond.end.4252

cond.false.4245:                                  ; preds = %cond.false.4225
  %1091 = load i64, i64* %nbytes, align 8
  %mul4246 = mul nsw i64 0, %1091
  %1092 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4247 = getelementptr inbounds %struct.image, %struct.image* %1092, i32 0, i32 12
  %1093 = load i32, i32* %height4247, align 4
  %conv4248 = sext i32 %1093 to i64
  %add4249 = add nsw i64 %mul4246, %conv4248
  %mul4250 = mul nsw i64 0, %add4249
  %sub4251 = sub nsw i64 %mul4250, 1
  br label %cond.end.4252

cond.end.4252:                                    ; preds = %cond.false.4245, %cond.true.4234
  %cond4253 = phi i64 [ %add4244, %cond.true.4234 ], [ %sub4251, %cond.false.4245 ]
  %1094 = load i64, i64* %nbytes, align 8
  %div4254 = sdiv i64 %cond4253, %1094
  %1095 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4255 = getelementptr inbounds %struct.image, %struct.image* %1095, i32 0, i32 12
  %1096 = load i32, i32* %height4255, align 4
  %conv4256 = sext i32 %1096 to i64
  %cmp4257 = icmp slt i64 %div4254, %conv4256
  br i1 %cmp4257, label %cond.true.4279, label %lor.lhs.false.4259

lor.lhs.false.4259:                               ; preds = %cond.end.4252, %cond.end.4220, %cond.true.4174, %cond.end.4164, %cond.true.4124, %cond.end.4116
  %1097 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4260 = getelementptr inbounds %struct.image, %struct.image* %1097, i32 0, i32 12
  %1098 = load i32, i32* %height4260, align 4
  %conv4261 = sext i32 %1098 to i64
  %1099 = load i64, i64* %nbytes, align 8
  %mul4262 = mul nsw i64 %conv4261, %1099
  %mul4263 = mul nsw i64 0, %mul4262
  %sub4264 = sub nsw i64 %mul4263, 1
  %cmp4265 = icmp slt i64 %sub4264, 0
  br i1 %cmp4265, label %land.lhs.true.4267, label %lor.lhs.false.4273

land.lhs.true.4267:                               ; preds = %lor.lhs.false.4259
  %1100 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4268 = getelementptr inbounds %struct.image, %struct.image* %1100, i32 0, i32 12
  %1101 = load i32, i32* %height4268, align 4
  %conv4269 = sext i32 %1101 to i64
  %1102 = load i64, i64* %nbytes, align 8
  %mul4270 = mul nsw i64 %conv4269, %1102
  %cmp4271 = icmp slt i64 %mul4270, -32768
  br i1 %cmp4271, label %cond.true.4279, label %lor.lhs.false.4273

lor.lhs.false.4273:                               ; preds = %land.lhs.true.4267, %lor.lhs.false.4259
  %1103 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4274 = getelementptr inbounds %struct.image, %struct.image* %1103, i32 0, i32 12
  %1104 = load i32, i32* %height4274, align 4
  %conv4275 = sext i32 %1104 to i64
  %1105 = load i64, i64* %nbytes, align 8
  %mul4276 = mul nsw i64 %conv4275, %1105
  %cmp4277 = icmp slt i64 32767, %mul4276
  br i1 %cmp4277, label %cond.true.4279, label %cond.false.4311

cond.true.4279:                                   ; preds = %lor.lhs.false.4273, %land.lhs.true.4267, %cond.end.4252, %cond.end.4220, %cond.true.4174, %cond.end.4164, %cond.true.4124, %cond.end.4116, %land.lhs.true.4076, %land.lhs.true.4070
  %1106 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4280 = getelementptr inbounds %struct.image, %struct.image* %1106, i32 0, i32 12
  %1107 = load i32, i32* %height4280, align 4
  %conv4281 = trunc i32 %1107 to i16
  %conv4282 = zext i16 %conv4281 to i32
  %1108 = load i64, i64* %nbytes, align 8
  %conv4283 = trunc i64 %1108 to i16
  %conv4284 = zext i16 %conv4283 to i32
  %mul4285 = mul nsw i32 %conv4282, %conv4284
  %cmp4286 = icmp sle i32 %mul4285, 32767
  br i1 %cmp4286, label %cond.true.4288, label %cond.false.4297

cond.true.4288:                                   ; preds = %cond.true.4279
  %1109 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4289 = getelementptr inbounds %struct.image, %struct.image* %1109, i32 0, i32 12
  %1110 = load i32, i32* %height4289, align 4
  %conv4290 = trunc i32 %1110 to i16
  %conv4291 = zext i16 %conv4290 to i32
  %1111 = load i64, i64* %nbytes, align 8
  %conv4292 = trunc i64 %1111 to i16
  %conv4293 = zext i16 %conv4292 to i32
  %mul4294 = mul nsw i32 %conv4291, %conv4293
  %conv4295 = trunc i32 %mul4294 to i16
  %conv4296 = sext i16 %conv4295 to i32
  br label %cond.end.4308

cond.false.4297:                                  ; preds = %cond.true.4279
  %1112 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4298 = getelementptr inbounds %struct.image, %struct.image* %1112, i32 0, i32 12
  %1113 = load i32, i32* %height4298, align 4
  %conv4299 = trunc i32 %1113 to i16
  %conv4300 = zext i16 %conv4299 to i32
  %1114 = load i64, i64* %nbytes, align 8
  %conv4301 = trunc i64 %1114 to i16
  %conv4302 = zext i16 %conv4301 to i32
  %mul4303 = mul nsw i32 %conv4300, %conv4302
  %sub4304 = sub nsw i32 %mul4303, -32768
  %conv4305 = trunc i32 %sub4304 to i16
  %conv4306 = sext i16 %conv4305 to i32
  %add4307 = add nsw i32 %conv4306, -32768
  br label %cond.end.4308

cond.end.4308:                                    ; preds = %cond.false.4297, %cond.true.4288
  %cond4309 = phi i32 [ %conv4296, %cond.true.4288 ], [ %add4307, %cond.false.4297 ]
  %conv4310 = sext i32 %cond4309 to i64
  store i64 %conv4310, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.4311:                                  ; preds = %lor.lhs.false.4273
  %1115 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4312 = getelementptr inbounds %struct.image, %struct.image* %1115, i32 0, i32 12
  %1116 = load i32, i32* %height4312, align 4
  %conv4313 = trunc i32 %1116 to i16
  %conv4314 = zext i16 %conv4313 to i32
  %1117 = load i64, i64* %nbytes, align 8
  %conv4315 = trunc i64 %1117 to i16
  %conv4316 = zext i16 %conv4315 to i32
  %mul4317 = mul nsw i32 %conv4314, %conv4316
  %cmp4318 = icmp sle i32 %mul4317, 32767
  br i1 %cmp4318, label %cond.true.4320, label %cond.false.4329

cond.true.4320:                                   ; preds = %cond.false.4311
  %1118 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4321 = getelementptr inbounds %struct.image, %struct.image* %1118, i32 0, i32 12
  %1119 = load i32, i32* %height4321, align 4
  %conv4322 = trunc i32 %1119 to i16
  %conv4323 = zext i16 %conv4322 to i32
  %1120 = load i64, i64* %nbytes, align 8
  %conv4324 = trunc i64 %1120 to i16
  %conv4325 = zext i16 %conv4324 to i32
  %mul4326 = mul nsw i32 %conv4323, %conv4325
  %conv4327 = trunc i32 %mul4326 to i16
  %conv4328 = sext i16 %conv4327 to i32
  br label %cond.end.4340

cond.false.4329:                                  ; preds = %cond.false.4311
  %1121 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4330 = getelementptr inbounds %struct.image, %struct.image* %1121, i32 0, i32 12
  %1122 = load i32, i32* %height4330, align 4
  %conv4331 = trunc i32 %1122 to i16
  %conv4332 = zext i16 %conv4331 to i32
  %1123 = load i64, i64* %nbytes, align 8
  %conv4333 = trunc i64 %1123 to i16
  %conv4334 = zext i16 %conv4333 to i32
  %mul4335 = mul nsw i32 %conv4332, %conv4334
  %sub4336 = sub nsw i32 %mul4335, -32768
  %conv4337 = trunc i32 %sub4336 to i16
  %conv4338 = sext i16 %conv4337 to i32
  %add4339 = add nsw i32 %conv4338, -32768
  br label %cond.end.4340

cond.end.4340:                                    ; preds = %cond.false.4329, %cond.true.4320
  %cond4341 = phi i32 [ %conv4328, %cond.true.4320 ], [ %add4339, %cond.false.4329 ]
  %conv4342 = sext i32 %cond4341 to i64
  store i64 %conv4342, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.4343:                                  ; preds = %cond.false.3611
  br i1 false, label %cond.true.4344, label %cond.false.4935

cond.true.4344:                                   ; preds = %cond.false.4343
  br i1 false, label %cond.true.4345, label %cond.false.4641

cond.true.4345:                                   ; preds = %cond.true.4344
  %1124 = load i64, i64* %nbytes, align 8
  %conv4346 = trunc i64 %1124 to i32
  %mul4347 = mul nsw i32 0, %conv4346
  %1125 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4348 = getelementptr inbounds %struct.image, %struct.image* %1125, i32 0, i32 12
  %1126 = load i32, i32* %height4348, align 4
  %add4349 = add nsw i32 %mul4347, %1126
  %mul4350 = mul nsw i32 0, %add4349
  %sub4351 = sub nsw i32 %mul4350, 1
  %cmp4352 = icmp slt i32 %sub4351, 0
  br i1 %cmp4352, label %cond.true.4354, label %cond.false.4376

cond.true.4354:                                   ; preds = %cond.true.4345
  %1127 = load i64, i64* %nbytes, align 8
  %conv4355 = trunc i64 %1127 to i32
  %mul4356 = mul nsw i32 0, %conv4355
  %1128 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4357 = getelementptr inbounds %struct.image, %struct.image* %1128, i32 0, i32 12
  %1129 = load i32, i32* %height4357, align 4
  %add4358 = add nsw i32 %mul4356, %1129
  %mul4359 = mul nsw i32 0, %add4358
  %add4360 = add nsw i32 %mul4359, 0
  %neg4361 = xor i32 %add4360, -1
  %cmp4362 = icmp eq i32 %neg4361, -1
  %conv4363 = zext i1 %cmp4362 to i32
  %sub4364 = sub nsw i32 0, %conv4363
  %1130 = load i64, i64* %nbytes, align 8
  %conv4365 = trunc i64 %1130 to i32
  %mul4366 = mul nsw i32 0, %conv4365
  %1131 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4367 = getelementptr inbounds %struct.image, %struct.image* %1131, i32 0, i32 12
  %1132 = load i32, i32* %height4367, align 4
  %add4368 = add nsw i32 %mul4366, %1132
  %mul4369 = mul nsw i32 0, %add4368
  %add4370 = add nsw i32 %mul4369, 1
  %shl4371 = shl i32 %add4370, 30
  %sub4372 = sub nsw i32 %shl4371, 1
  %mul4373 = mul nsw i32 %sub4372, 2
  %add4374 = add nsw i32 %mul4373, 1
  %sub4375 = sub nsw i32 %sub4364, %add4374
  br label %cond.end.4383

cond.false.4376:                                  ; preds = %cond.true.4345
  %1133 = load i64, i64* %nbytes, align 8
  %conv4377 = trunc i64 %1133 to i32
  %mul4378 = mul nsw i32 0, %conv4377
  %1134 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4379 = getelementptr inbounds %struct.image, %struct.image* %1134, i32 0, i32 12
  %1135 = load i32, i32* %height4379, align 4
  %add4380 = add nsw i32 %mul4378, %1135
  %mul4381 = mul nsw i32 0, %add4380
  %add4382 = add nsw i32 %mul4381, 0
  br label %cond.end.4383

cond.end.4383:                                    ; preds = %cond.false.4376, %cond.true.4354
  %cond4384 = phi i32 [ %sub4375, %cond.true.4354 ], [ %add4382, %cond.false.4376 ]
  %cmp4385 = icmp eq i32 %cond4384, 0
  br i1 %cmp4385, label %land.lhs.true.4387, label %lor.lhs.false.4403

land.lhs.true.4387:                               ; preds = %cond.end.4383
  %1136 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4388 = getelementptr inbounds %struct.image, %struct.image* %1136, i32 0, i32 12
  %1137 = load i32, i32* %height4388, align 4
  %cmp4389 = icmp slt i32 %1137, 0
  br i1 %cmp4389, label %land.lhs.true.4391, label %lor.lhs.false.4395

land.lhs.true.4391:                               ; preds = %land.lhs.true.4387
  %1138 = load i64, i64* %nbytes, align 8
  %conv4392 = trunc i64 %1138 to i32
  %cmp4393 = icmp slt i32 0, %conv4392
  br i1 %cmp4393, label %cond.true.4603, label %lor.lhs.false.4395

lor.lhs.false.4395:                               ; preds = %land.lhs.true.4391, %land.lhs.true.4387
  %1139 = load i64, i64* %nbytes, align 8
  %conv4396 = trunc i64 %1139 to i32
  %cmp4397 = icmp slt i32 %conv4396, 0
  br i1 %cmp4397, label %land.lhs.true.4399, label %lor.lhs.false.4403

land.lhs.true.4399:                               ; preds = %lor.lhs.false.4395
  %1140 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4400 = getelementptr inbounds %struct.image, %struct.image* %1140, i32 0, i32 12
  %1141 = load i32, i32* %height4400, align 4
  %cmp4401 = icmp slt i32 0, %1141
  br i1 %cmp4401, label %cond.true.4603, label %lor.lhs.false.4403

lor.lhs.false.4403:                               ; preds = %land.lhs.true.4399, %lor.lhs.false.4395, %cond.end.4383
  %1142 = load i64, i64* %nbytes, align 8
  %conv4404 = trunc i64 %1142 to i32
  %cmp4405 = icmp slt i32 %conv4404, 0
  br i1 %cmp4405, label %cond.true.4407, label %cond.false.4495

cond.true.4407:                                   ; preds = %lor.lhs.false.4403
  %1143 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4408 = getelementptr inbounds %struct.image, %struct.image* %1143, i32 0, i32 12
  %1144 = load i32, i32* %height4408, align 4
  %cmp4409 = icmp slt i32 %1144, 0
  br i1 %cmp4409, label %cond.true.4411, label %cond.false.4445

cond.true.4411:                                   ; preds = %cond.true.4407
  %1145 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4412 = getelementptr inbounds %struct.image, %struct.image* %1145, i32 0, i32 12
  %1146 = load i32, i32* %height4412, align 4
  %1147 = load i64, i64* %nbytes, align 8
  %conv4413 = trunc i64 %1147 to i32
  %mul4414 = mul nsw i32 0, %conv4413
  %1148 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4415 = getelementptr inbounds %struct.image, %struct.image* %1148, i32 0, i32 12
  %1149 = load i32, i32* %height4415, align 4
  %add4416 = add nsw i32 %mul4414, %1149
  %mul4417 = mul nsw i32 0, %add4416
  %sub4418 = sub nsw i32 %mul4417, 1
  %cmp4419 = icmp slt i32 %sub4418, 0
  br i1 %cmp4419, label %cond.true.4421, label %cond.false.4432

cond.true.4421:                                   ; preds = %cond.true.4411
  %1150 = load i64, i64* %nbytes, align 8
  %conv4422 = trunc i64 %1150 to i32
  %mul4423 = mul nsw i32 0, %conv4422
  %1151 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4424 = getelementptr inbounds %struct.image, %struct.image* %1151, i32 0, i32 12
  %1152 = load i32, i32* %height4424, align 4
  %add4425 = add nsw i32 %mul4423, %1152
  %mul4426 = mul nsw i32 0, %add4425
  %add4427 = add nsw i32 %mul4426, 1
  %shl4428 = shl i32 %add4427, 30
  %sub4429 = sub nsw i32 %shl4428, 1
  %mul4430 = mul nsw i32 %sub4429, 2
  %add4431 = add nsw i32 %mul4430, 1
  br label %cond.end.4439

cond.false.4432:                                  ; preds = %cond.true.4411
  %1153 = load i64, i64* %nbytes, align 8
  %conv4433 = trunc i64 %1153 to i32
  %mul4434 = mul nsw i32 0, %conv4433
  %1154 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4435 = getelementptr inbounds %struct.image, %struct.image* %1154, i32 0, i32 12
  %1155 = load i32, i32* %height4435, align 4
  %add4436 = add nsw i32 %mul4434, %1155
  %mul4437 = mul nsw i32 0, %add4436
  %sub4438 = sub nsw i32 %mul4437, 1
  br label %cond.end.4439

cond.end.4439:                                    ; preds = %cond.false.4432, %cond.true.4421
  %cond4440 = phi i32 [ %add4431, %cond.true.4421 ], [ %sub4438, %cond.false.4432 ]
  %1156 = load i64, i64* %nbytes, align 8
  %conv4441 = trunc i64 %1156 to i32
  %div4442 = sdiv i32 %cond4440, %conv4441
  %cmp4443 = icmp slt i32 %1146, %div4442
  br i1 %cmp4443, label %cond.true.4603, label %lor.lhs.false.4583

cond.false.4445:                                  ; preds = %cond.true.4407
  %1157 = load i64, i64* %nbytes, align 8
  %conv4446 = trunc i64 %1157 to i32
  %cmp4447 = icmp eq i32 %conv4446, -1
  br i1 %cmp4447, label %cond.true.4449, label %cond.false.4450

cond.true.4449:                                   ; preds = %cond.false.4445
  br i1 false, label %cond.true.4603, label %lor.lhs.false.4583

cond.false.4450:                                  ; preds = %cond.false.4445
  %1158 = load i64, i64* %nbytes, align 8
  %conv4451 = trunc i64 %1158 to i32
  %mul4452 = mul nsw i32 0, %conv4451
  %1159 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4453 = getelementptr inbounds %struct.image, %struct.image* %1159, i32 0, i32 12
  %1160 = load i32, i32* %height4453, align 4
  %add4454 = add nsw i32 %mul4452, %1160
  %mul4455 = mul nsw i32 0, %add4454
  %sub4456 = sub nsw i32 %mul4455, 1
  %cmp4457 = icmp slt i32 %sub4456, 0
  br i1 %cmp4457, label %cond.true.4459, label %cond.false.4481

cond.true.4459:                                   ; preds = %cond.false.4450
  %1161 = load i64, i64* %nbytes, align 8
  %conv4460 = trunc i64 %1161 to i32
  %mul4461 = mul nsw i32 0, %conv4460
  %1162 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4462 = getelementptr inbounds %struct.image, %struct.image* %1162, i32 0, i32 12
  %1163 = load i32, i32* %height4462, align 4
  %add4463 = add nsw i32 %mul4461, %1163
  %mul4464 = mul nsw i32 0, %add4463
  %add4465 = add nsw i32 %mul4464, 0
  %neg4466 = xor i32 %add4465, -1
  %cmp4467 = icmp eq i32 %neg4466, -1
  %conv4468 = zext i1 %cmp4467 to i32
  %sub4469 = sub nsw i32 0, %conv4468
  %1164 = load i64, i64* %nbytes, align 8
  %conv4470 = trunc i64 %1164 to i32
  %mul4471 = mul nsw i32 0, %conv4470
  %1165 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4472 = getelementptr inbounds %struct.image, %struct.image* %1165, i32 0, i32 12
  %1166 = load i32, i32* %height4472, align 4
  %add4473 = add nsw i32 %mul4471, %1166
  %mul4474 = mul nsw i32 0, %add4473
  %add4475 = add nsw i32 %mul4474, 1
  %shl4476 = shl i32 %add4475, 30
  %sub4477 = sub nsw i32 %shl4476, 1
  %mul4478 = mul nsw i32 %sub4477, 2
  %add4479 = add nsw i32 %mul4478, 1
  %sub4480 = sub nsw i32 %sub4469, %add4479
  br label %cond.end.4488

cond.false.4481:                                  ; preds = %cond.false.4450
  %1167 = load i64, i64* %nbytes, align 8
  %conv4482 = trunc i64 %1167 to i32
  %mul4483 = mul nsw i32 0, %conv4482
  %1168 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4484 = getelementptr inbounds %struct.image, %struct.image* %1168, i32 0, i32 12
  %1169 = load i32, i32* %height4484, align 4
  %add4485 = add nsw i32 %mul4483, %1169
  %mul4486 = mul nsw i32 0, %add4485
  %add4487 = add nsw i32 %mul4486, 0
  br label %cond.end.4488

cond.end.4488:                                    ; preds = %cond.false.4481, %cond.true.4459
  %cond4489 = phi i32 [ %sub4480, %cond.true.4459 ], [ %add4487, %cond.false.4481 ]
  %1170 = load i64, i64* %nbytes, align 8
  %conv4490 = trunc i64 %1170 to i32
  %div4491 = sdiv i32 %cond4489, %conv4490
  %1171 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4492 = getelementptr inbounds %struct.image, %struct.image* %1171, i32 0, i32 12
  %1172 = load i32, i32* %height4492, align 4
  %cmp4493 = icmp slt i32 %div4491, %1172
  br i1 %cmp4493, label %cond.true.4603, label %lor.lhs.false.4583

cond.false.4495:                                  ; preds = %lor.lhs.false.4403
  %1173 = load i64, i64* %nbytes, align 8
  %conv4496 = trunc i64 %1173 to i32
  %cmp4497 = icmp eq i32 %conv4496, 0
  br i1 %cmp4497, label %cond.true.4499, label %cond.false.4500

cond.true.4499:                                   ; preds = %cond.false.4495
  br i1 false, label %cond.true.4603, label %lor.lhs.false.4583

cond.false.4500:                                  ; preds = %cond.false.4495
  %1174 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4501 = getelementptr inbounds %struct.image, %struct.image* %1174, i32 0, i32 12
  %1175 = load i32, i32* %height4501, align 4
  %cmp4502 = icmp slt i32 %1175, 0
  br i1 %cmp4502, label %cond.true.4504, label %cond.false.4549

cond.true.4504:                                   ; preds = %cond.false.4500
  %1176 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4505 = getelementptr inbounds %struct.image, %struct.image* %1176, i32 0, i32 12
  %1177 = load i32, i32* %height4505, align 4
  %1178 = load i64, i64* %nbytes, align 8
  %conv4506 = trunc i64 %1178 to i32
  %mul4507 = mul nsw i32 0, %conv4506
  %1179 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4508 = getelementptr inbounds %struct.image, %struct.image* %1179, i32 0, i32 12
  %1180 = load i32, i32* %height4508, align 4
  %add4509 = add nsw i32 %mul4507, %1180
  %mul4510 = mul nsw i32 0, %add4509
  %sub4511 = sub nsw i32 %mul4510, 1
  %cmp4512 = icmp slt i32 %sub4511, 0
  br i1 %cmp4512, label %cond.true.4514, label %cond.false.4536

cond.true.4514:                                   ; preds = %cond.true.4504
  %1181 = load i64, i64* %nbytes, align 8
  %conv4515 = trunc i64 %1181 to i32
  %mul4516 = mul nsw i32 0, %conv4515
  %1182 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4517 = getelementptr inbounds %struct.image, %struct.image* %1182, i32 0, i32 12
  %1183 = load i32, i32* %height4517, align 4
  %add4518 = add nsw i32 %mul4516, %1183
  %mul4519 = mul nsw i32 0, %add4518
  %add4520 = add nsw i32 %mul4519, 0
  %neg4521 = xor i32 %add4520, -1
  %cmp4522 = icmp eq i32 %neg4521, -1
  %conv4523 = zext i1 %cmp4522 to i32
  %sub4524 = sub nsw i32 0, %conv4523
  %1184 = load i64, i64* %nbytes, align 8
  %conv4525 = trunc i64 %1184 to i32
  %mul4526 = mul nsw i32 0, %conv4525
  %1185 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4527 = getelementptr inbounds %struct.image, %struct.image* %1185, i32 0, i32 12
  %1186 = load i32, i32* %height4527, align 4
  %add4528 = add nsw i32 %mul4526, %1186
  %mul4529 = mul nsw i32 0, %add4528
  %add4530 = add nsw i32 %mul4529, 1
  %shl4531 = shl i32 %add4530, 30
  %sub4532 = sub nsw i32 %shl4531, 1
  %mul4533 = mul nsw i32 %sub4532, 2
  %add4534 = add nsw i32 %mul4533, 1
  %sub4535 = sub nsw i32 %sub4524, %add4534
  br label %cond.end.4543

cond.false.4536:                                  ; preds = %cond.true.4504
  %1187 = load i64, i64* %nbytes, align 8
  %conv4537 = trunc i64 %1187 to i32
  %mul4538 = mul nsw i32 0, %conv4537
  %1188 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4539 = getelementptr inbounds %struct.image, %struct.image* %1188, i32 0, i32 12
  %1189 = load i32, i32* %height4539, align 4
  %add4540 = add nsw i32 %mul4538, %1189
  %mul4541 = mul nsw i32 0, %add4540
  %add4542 = add nsw i32 %mul4541, 0
  br label %cond.end.4543

cond.end.4543:                                    ; preds = %cond.false.4536, %cond.true.4514
  %cond4544 = phi i32 [ %sub4535, %cond.true.4514 ], [ %add4542, %cond.false.4536 ]
  %1190 = load i64, i64* %nbytes, align 8
  %conv4545 = trunc i64 %1190 to i32
  %div4546 = sdiv i32 %cond4544, %conv4545
  %cmp4547 = icmp slt i32 %1177, %div4546
  br i1 %cmp4547, label %cond.true.4603, label %lor.lhs.false.4583

cond.false.4549:                                  ; preds = %cond.false.4500
  %1191 = load i64, i64* %nbytes, align 8
  %conv4550 = trunc i64 %1191 to i32
  %mul4551 = mul nsw i32 0, %conv4550
  %1192 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4552 = getelementptr inbounds %struct.image, %struct.image* %1192, i32 0, i32 12
  %1193 = load i32, i32* %height4552, align 4
  %add4553 = add nsw i32 %mul4551, %1193
  %mul4554 = mul nsw i32 0, %add4553
  %sub4555 = sub nsw i32 %mul4554, 1
  %cmp4556 = icmp slt i32 %sub4555, 0
  br i1 %cmp4556, label %cond.true.4558, label %cond.false.4569

cond.true.4558:                                   ; preds = %cond.false.4549
  %1194 = load i64, i64* %nbytes, align 8
  %conv4559 = trunc i64 %1194 to i32
  %mul4560 = mul nsw i32 0, %conv4559
  %1195 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4561 = getelementptr inbounds %struct.image, %struct.image* %1195, i32 0, i32 12
  %1196 = load i32, i32* %height4561, align 4
  %add4562 = add nsw i32 %mul4560, %1196
  %mul4563 = mul nsw i32 0, %add4562
  %add4564 = add nsw i32 %mul4563, 1
  %shl4565 = shl i32 %add4564, 30
  %sub4566 = sub nsw i32 %shl4565, 1
  %mul4567 = mul nsw i32 %sub4566, 2
  %add4568 = add nsw i32 %mul4567, 1
  br label %cond.end.4576

cond.false.4569:                                  ; preds = %cond.false.4549
  %1197 = load i64, i64* %nbytes, align 8
  %conv4570 = trunc i64 %1197 to i32
  %mul4571 = mul nsw i32 0, %conv4570
  %1198 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4572 = getelementptr inbounds %struct.image, %struct.image* %1198, i32 0, i32 12
  %1199 = load i32, i32* %height4572, align 4
  %add4573 = add nsw i32 %mul4571, %1199
  %mul4574 = mul nsw i32 0, %add4573
  %sub4575 = sub nsw i32 %mul4574, 1
  br label %cond.end.4576

cond.end.4576:                                    ; preds = %cond.false.4569, %cond.true.4558
  %cond4577 = phi i32 [ %add4568, %cond.true.4558 ], [ %sub4575, %cond.false.4569 ]
  %1200 = load i64, i64* %nbytes, align 8
  %conv4578 = trunc i64 %1200 to i32
  %div4579 = sdiv i32 %cond4577, %conv4578
  %1201 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4580 = getelementptr inbounds %struct.image, %struct.image* %1201, i32 0, i32 12
  %1202 = load i32, i32* %height4580, align 4
  %cmp4581 = icmp slt i32 %div4579, %1202
  br i1 %cmp4581, label %cond.true.4603, label %lor.lhs.false.4583

lor.lhs.false.4583:                               ; preds = %cond.end.4576, %cond.end.4543, %cond.true.4499, %cond.end.4488, %cond.true.4449, %cond.end.4439
  %1203 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4584 = getelementptr inbounds %struct.image, %struct.image* %1203, i32 0, i32 12
  %1204 = load i32, i32* %height4584, align 4
  %1205 = load i64, i64* %nbytes, align 8
  %conv4585 = trunc i64 %1205 to i32
  %mul4586 = mul nsw i32 %1204, %conv4585
  %mul4587 = mul nsw i32 0, %mul4586
  %sub4588 = sub nsw i32 %mul4587, 1
  %cmp4589 = icmp slt i32 %sub4588, 0
  br i1 %cmp4589, label %land.lhs.true.4591, label %lor.lhs.false.4597

land.lhs.true.4591:                               ; preds = %lor.lhs.false.4583
  %1206 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4592 = getelementptr inbounds %struct.image, %struct.image* %1206, i32 0, i32 12
  %1207 = load i32, i32* %height4592, align 4
  %1208 = load i64, i64* %nbytes, align 8
  %conv4593 = trunc i64 %1208 to i32
  %mul4594 = mul nsw i32 %1207, %conv4593
  %cmp4595 = icmp slt i32 %mul4594, -2147483648
  br i1 %cmp4595, label %cond.true.4603, label %lor.lhs.false.4597

lor.lhs.false.4597:                               ; preds = %land.lhs.true.4591, %lor.lhs.false.4583
  %1209 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4598 = getelementptr inbounds %struct.image, %struct.image* %1209, i32 0, i32 12
  %1210 = load i32, i32* %height4598, align 4
  %1211 = load i64, i64* %nbytes, align 8
  %conv4599 = trunc i64 %1211 to i32
  %mul4600 = mul nsw i32 %1210, %conv4599
  %cmp4601 = icmp slt i32 2147483647, %mul4600
  br i1 %cmp4601, label %cond.true.4603, label %cond.false.4622

cond.true.4603:                                   ; preds = %lor.lhs.false.4597, %land.lhs.true.4591, %cond.end.4576, %cond.end.4543, %cond.true.4499, %cond.end.4488, %cond.true.4449, %cond.end.4439, %land.lhs.true.4399, %land.lhs.true.4391
  %1212 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4604 = getelementptr inbounds %struct.image, %struct.image* %1212, i32 0, i32 12
  %1213 = load i32, i32* %height4604, align 4
  %1214 = load i64, i64* %nbytes, align 8
  %conv4605 = trunc i64 %1214 to i32
  %mul4606 = mul i32 %1213, %conv4605
  %cmp4607 = icmp ule i32 %mul4606, 2147483647
  br i1 %cmp4607, label %cond.true.4609, label %cond.false.4613

cond.true.4609:                                   ; preds = %cond.true.4603
  %1215 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4610 = getelementptr inbounds %struct.image, %struct.image* %1215, i32 0, i32 12
  %1216 = load i32, i32* %height4610, align 4
  %1217 = load i64, i64* %nbytes, align 8
  %conv4611 = trunc i64 %1217 to i32
  %mul4612 = mul i32 %1216, %conv4611
  br label %cond.end.4619

cond.false.4613:                                  ; preds = %cond.true.4603
  %1218 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4614 = getelementptr inbounds %struct.image, %struct.image* %1218, i32 0, i32 12
  %1219 = load i32, i32* %height4614, align 4
  %1220 = load i64, i64* %nbytes, align 8
  %conv4615 = trunc i64 %1220 to i32
  %mul4616 = mul i32 %1219, %conv4615
  %sub4617 = sub i32 %mul4616, -2147483648
  %add4618 = add nsw i32 %sub4617, -2147483648
  br label %cond.end.4619

cond.end.4619:                                    ; preds = %cond.false.4613, %cond.true.4609
  %cond4620 = phi i32 [ %mul4612, %cond.true.4609 ], [ %add4618, %cond.false.4613 ]
  %conv4621 = sext i32 %cond4620 to i64
  store i64 %conv4621, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.4622:                                  ; preds = %lor.lhs.false.4597
  %1221 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4623 = getelementptr inbounds %struct.image, %struct.image* %1221, i32 0, i32 12
  %1222 = load i32, i32* %height4623, align 4
  %1223 = load i64, i64* %nbytes, align 8
  %conv4624 = trunc i64 %1223 to i32
  %mul4625 = mul i32 %1222, %conv4624
  %cmp4626 = icmp ule i32 %mul4625, 2147483647
  br i1 %cmp4626, label %cond.true.4628, label %cond.false.4632

cond.true.4628:                                   ; preds = %cond.false.4622
  %1224 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4629 = getelementptr inbounds %struct.image, %struct.image* %1224, i32 0, i32 12
  %1225 = load i32, i32* %height4629, align 4
  %1226 = load i64, i64* %nbytes, align 8
  %conv4630 = trunc i64 %1226 to i32
  %mul4631 = mul i32 %1225, %conv4630
  br label %cond.end.4638

cond.false.4632:                                  ; preds = %cond.false.4622
  %1227 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4633 = getelementptr inbounds %struct.image, %struct.image* %1227, i32 0, i32 12
  %1228 = load i32, i32* %height4633, align 4
  %1229 = load i64, i64* %nbytes, align 8
  %conv4634 = trunc i64 %1229 to i32
  %mul4635 = mul i32 %1228, %conv4634
  %sub4636 = sub i32 %mul4635, -2147483648
  %add4637 = add nsw i32 %sub4636, -2147483648
  br label %cond.end.4638

cond.end.4638:                                    ; preds = %cond.false.4632, %cond.true.4628
  %cond4639 = phi i32 [ %mul4631, %cond.true.4628 ], [ %add4637, %cond.false.4632 ]
  %conv4640 = sext i32 %cond4639 to i64
  store i64 %conv4640, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.4641:                                  ; preds = %cond.true.4344
  %1230 = load i64, i64* %nbytes, align 8
  %mul4642 = mul nsw i64 0, %1230
  %1231 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4643 = getelementptr inbounds %struct.image, %struct.image* %1231, i32 0, i32 12
  %1232 = load i32, i32* %height4643, align 4
  %conv4644 = sext i32 %1232 to i64
  %add4645 = add nsw i64 %mul4642, %conv4644
  %mul4646 = mul nsw i64 0, %add4645
  %sub4647 = sub nsw i64 %mul4646, 1
  %cmp4648 = icmp slt i64 %sub4647, 0
  br i1 %cmp4648, label %cond.true.4650, label %cond.false.4673

cond.true.4650:                                   ; preds = %cond.false.4641
  %1233 = load i64, i64* %nbytes, align 8
  %mul4651 = mul nsw i64 0, %1233
  %1234 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4652 = getelementptr inbounds %struct.image, %struct.image* %1234, i32 0, i32 12
  %1235 = load i32, i32* %height4652, align 4
  %conv4653 = sext i32 %1235 to i64
  %add4654 = add nsw i64 %mul4651, %conv4653
  %mul4655 = mul nsw i64 0, %add4654
  %add4656 = add nsw i64 %mul4655, 0
  %neg4657 = xor i64 %add4656, -1
  %cmp4658 = icmp eq i64 %neg4657, -1
  %conv4659 = zext i1 %cmp4658 to i32
  %sub4660 = sub nsw i32 0, %conv4659
  %conv4661 = sext i32 %sub4660 to i64
  %1236 = load i64, i64* %nbytes, align 8
  %mul4662 = mul nsw i64 0, %1236
  %1237 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4663 = getelementptr inbounds %struct.image, %struct.image* %1237, i32 0, i32 12
  %1238 = load i32, i32* %height4663, align 4
  %conv4664 = sext i32 %1238 to i64
  %add4665 = add nsw i64 %mul4662, %conv4664
  %mul4666 = mul nsw i64 0, %add4665
  %add4667 = add nsw i64 %mul4666, 1
  %shl4668 = shl i64 %add4667, 62
  %sub4669 = sub nsw i64 %shl4668, 1
  %mul4670 = mul nsw i64 %sub4669, 2
  %add4671 = add nsw i64 %mul4670, 1
  %sub4672 = sub nsw i64 %conv4661, %add4671
  br label %cond.end.4680

cond.false.4673:                                  ; preds = %cond.false.4641
  %1239 = load i64, i64* %nbytes, align 8
  %mul4674 = mul nsw i64 0, %1239
  %1240 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4675 = getelementptr inbounds %struct.image, %struct.image* %1240, i32 0, i32 12
  %1241 = load i32, i32* %height4675, align 4
  %conv4676 = sext i32 %1241 to i64
  %add4677 = add nsw i64 %mul4674, %conv4676
  %mul4678 = mul nsw i64 0, %add4677
  %add4679 = add nsw i64 %mul4678, 0
  br label %cond.end.4680

cond.end.4680:                                    ; preds = %cond.false.4673, %cond.true.4650
  %cond4681 = phi i64 [ %sub4672, %cond.true.4650 ], [ %add4679, %cond.false.4673 ]
  %cmp4682 = icmp eq i64 %cond4681, 0
  br i1 %cmp4682, label %land.lhs.true.4684, label %lor.lhs.false.4698

land.lhs.true.4684:                               ; preds = %cond.end.4680
  %1242 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4685 = getelementptr inbounds %struct.image, %struct.image* %1242, i32 0, i32 12
  %1243 = load i32, i32* %height4685, align 4
  %cmp4686 = icmp slt i32 %1243, 0
  br i1 %cmp4686, label %land.lhs.true.4688, label %lor.lhs.false.4691

land.lhs.true.4688:                               ; preds = %land.lhs.true.4684
  %1244 = load i64, i64* %nbytes, align 8
  %cmp4689 = icmp slt i64 0, %1244
  br i1 %cmp4689, label %cond.true.4897, label %lor.lhs.false.4691

lor.lhs.false.4691:                               ; preds = %land.lhs.true.4688, %land.lhs.true.4684
  %1245 = load i64, i64* %nbytes, align 8
  %cmp4692 = icmp slt i64 %1245, 0
  br i1 %cmp4692, label %land.lhs.true.4694, label %lor.lhs.false.4698

land.lhs.true.4694:                               ; preds = %lor.lhs.false.4691
  %1246 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4695 = getelementptr inbounds %struct.image, %struct.image* %1246, i32 0, i32 12
  %1247 = load i32, i32* %height4695, align 4
  %cmp4696 = icmp slt i32 0, %1247
  br i1 %cmp4696, label %cond.true.4897, label %lor.lhs.false.4698

lor.lhs.false.4698:                               ; preds = %land.lhs.true.4694, %lor.lhs.false.4691, %cond.end.4680
  %1248 = load i64, i64* %nbytes, align 8
  %cmp4699 = icmp slt i64 %1248, 0
  br i1 %cmp4699, label %cond.true.4701, label %cond.false.4789

cond.true.4701:                                   ; preds = %lor.lhs.false.4698
  %1249 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4702 = getelementptr inbounds %struct.image, %struct.image* %1249, i32 0, i32 12
  %1250 = load i32, i32* %height4702, align 4
  %cmp4703 = icmp slt i32 %1250, 0
  br i1 %cmp4703, label %cond.true.4705, label %cond.false.4739

cond.true.4705:                                   ; preds = %cond.true.4701
  %1251 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4706 = getelementptr inbounds %struct.image, %struct.image* %1251, i32 0, i32 12
  %1252 = load i32, i32* %height4706, align 4
  %conv4707 = sext i32 %1252 to i64
  %1253 = load i64, i64* %nbytes, align 8
  %mul4708 = mul nsw i64 0, %1253
  %1254 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4709 = getelementptr inbounds %struct.image, %struct.image* %1254, i32 0, i32 12
  %1255 = load i32, i32* %height4709, align 4
  %conv4710 = sext i32 %1255 to i64
  %add4711 = add nsw i64 %mul4708, %conv4710
  %mul4712 = mul nsw i64 0, %add4711
  %sub4713 = sub nsw i64 %mul4712, 1
  %cmp4714 = icmp slt i64 %sub4713, 0
  br i1 %cmp4714, label %cond.true.4716, label %cond.false.4727

cond.true.4716:                                   ; preds = %cond.true.4705
  %1256 = load i64, i64* %nbytes, align 8
  %mul4717 = mul nsw i64 0, %1256
  %1257 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4718 = getelementptr inbounds %struct.image, %struct.image* %1257, i32 0, i32 12
  %1258 = load i32, i32* %height4718, align 4
  %conv4719 = sext i32 %1258 to i64
  %add4720 = add nsw i64 %mul4717, %conv4719
  %mul4721 = mul nsw i64 0, %add4720
  %add4722 = add nsw i64 %mul4721, 1
  %shl4723 = shl i64 %add4722, 62
  %sub4724 = sub nsw i64 %shl4723, 1
  %mul4725 = mul nsw i64 %sub4724, 2
  %add4726 = add nsw i64 %mul4725, 1
  br label %cond.end.4734

cond.false.4727:                                  ; preds = %cond.true.4705
  %1259 = load i64, i64* %nbytes, align 8
  %mul4728 = mul nsw i64 0, %1259
  %1260 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4729 = getelementptr inbounds %struct.image, %struct.image* %1260, i32 0, i32 12
  %1261 = load i32, i32* %height4729, align 4
  %conv4730 = sext i32 %1261 to i64
  %add4731 = add nsw i64 %mul4728, %conv4730
  %mul4732 = mul nsw i64 0, %add4731
  %sub4733 = sub nsw i64 %mul4732, 1
  br label %cond.end.4734

cond.end.4734:                                    ; preds = %cond.false.4727, %cond.true.4716
  %cond4735 = phi i64 [ %add4726, %cond.true.4716 ], [ %sub4733, %cond.false.4727 ]
  %1262 = load i64, i64* %nbytes, align 8
  %div4736 = sdiv i64 %cond4735, %1262
  %cmp4737 = icmp slt i64 %conv4707, %div4736
  br i1 %cmp4737, label %cond.true.4897, label %lor.lhs.false.4877

cond.false.4739:                                  ; preds = %cond.true.4701
  %1263 = load i64, i64* %nbytes, align 8
  %cmp4740 = icmp eq i64 %1263, -1
  br i1 %cmp4740, label %cond.true.4742, label %cond.false.4743

cond.true.4742:                                   ; preds = %cond.false.4739
  br i1 false, label %cond.true.4897, label %lor.lhs.false.4877

cond.false.4743:                                  ; preds = %cond.false.4739
  %1264 = load i64, i64* %nbytes, align 8
  %mul4744 = mul nsw i64 0, %1264
  %1265 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4745 = getelementptr inbounds %struct.image, %struct.image* %1265, i32 0, i32 12
  %1266 = load i32, i32* %height4745, align 4
  %conv4746 = sext i32 %1266 to i64
  %add4747 = add nsw i64 %mul4744, %conv4746
  %mul4748 = mul nsw i64 0, %add4747
  %sub4749 = sub nsw i64 %mul4748, 1
  %cmp4750 = icmp slt i64 %sub4749, 0
  br i1 %cmp4750, label %cond.true.4752, label %cond.false.4775

cond.true.4752:                                   ; preds = %cond.false.4743
  %1267 = load i64, i64* %nbytes, align 8
  %mul4753 = mul nsw i64 0, %1267
  %1268 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4754 = getelementptr inbounds %struct.image, %struct.image* %1268, i32 0, i32 12
  %1269 = load i32, i32* %height4754, align 4
  %conv4755 = sext i32 %1269 to i64
  %add4756 = add nsw i64 %mul4753, %conv4755
  %mul4757 = mul nsw i64 0, %add4756
  %add4758 = add nsw i64 %mul4757, 0
  %neg4759 = xor i64 %add4758, -1
  %cmp4760 = icmp eq i64 %neg4759, -1
  %conv4761 = zext i1 %cmp4760 to i32
  %sub4762 = sub nsw i32 0, %conv4761
  %conv4763 = sext i32 %sub4762 to i64
  %1270 = load i64, i64* %nbytes, align 8
  %mul4764 = mul nsw i64 0, %1270
  %1271 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4765 = getelementptr inbounds %struct.image, %struct.image* %1271, i32 0, i32 12
  %1272 = load i32, i32* %height4765, align 4
  %conv4766 = sext i32 %1272 to i64
  %add4767 = add nsw i64 %mul4764, %conv4766
  %mul4768 = mul nsw i64 0, %add4767
  %add4769 = add nsw i64 %mul4768, 1
  %shl4770 = shl i64 %add4769, 62
  %sub4771 = sub nsw i64 %shl4770, 1
  %mul4772 = mul nsw i64 %sub4771, 2
  %add4773 = add nsw i64 %mul4772, 1
  %sub4774 = sub nsw i64 %conv4763, %add4773
  br label %cond.end.4782

cond.false.4775:                                  ; preds = %cond.false.4743
  %1273 = load i64, i64* %nbytes, align 8
  %mul4776 = mul nsw i64 0, %1273
  %1274 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4777 = getelementptr inbounds %struct.image, %struct.image* %1274, i32 0, i32 12
  %1275 = load i32, i32* %height4777, align 4
  %conv4778 = sext i32 %1275 to i64
  %add4779 = add nsw i64 %mul4776, %conv4778
  %mul4780 = mul nsw i64 0, %add4779
  %add4781 = add nsw i64 %mul4780, 0
  br label %cond.end.4782

cond.end.4782:                                    ; preds = %cond.false.4775, %cond.true.4752
  %cond4783 = phi i64 [ %sub4774, %cond.true.4752 ], [ %add4781, %cond.false.4775 ]
  %1276 = load i64, i64* %nbytes, align 8
  %div4784 = sdiv i64 %cond4783, %1276
  %1277 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4785 = getelementptr inbounds %struct.image, %struct.image* %1277, i32 0, i32 12
  %1278 = load i32, i32* %height4785, align 4
  %conv4786 = sext i32 %1278 to i64
  %cmp4787 = icmp slt i64 %div4784, %conv4786
  br i1 %cmp4787, label %cond.true.4897, label %lor.lhs.false.4877

cond.false.4789:                                  ; preds = %lor.lhs.false.4698
  %1279 = load i64, i64* %nbytes, align 8
  %cmp4790 = icmp eq i64 %1279, 0
  br i1 %cmp4790, label %cond.true.4792, label %cond.false.4793

cond.true.4792:                                   ; preds = %cond.false.4789
  br i1 false, label %cond.true.4897, label %lor.lhs.false.4877

cond.false.4793:                                  ; preds = %cond.false.4789
  %1280 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4794 = getelementptr inbounds %struct.image, %struct.image* %1280, i32 0, i32 12
  %1281 = load i32, i32* %height4794, align 4
  %cmp4795 = icmp slt i32 %1281, 0
  br i1 %cmp4795, label %cond.true.4797, label %cond.false.4843

cond.true.4797:                                   ; preds = %cond.false.4793
  %1282 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4798 = getelementptr inbounds %struct.image, %struct.image* %1282, i32 0, i32 12
  %1283 = load i32, i32* %height4798, align 4
  %conv4799 = sext i32 %1283 to i64
  %1284 = load i64, i64* %nbytes, align 8
  %mul4800 = mul nsw i64 0, %1284
  %1285 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4801 = getelementptr inbounds %struct.image, %struct.image* %1285, i32 0, i32 12
  %1286 = load i32, i32* %height4801, align 4
  %conv4802 = sext i32 %1286 to i64
  %add4803 = add nsw i64 %mul4800, %conv4802
  %mul4804 = mul nsw i64 0, %add4803
  %sub4805 = sub nsw i64 %mul4804, 1
  %cmp4806 = icmp slt i64 %sub4805, 0
  br i1 %cmp4806, label %cond.true.4808, label %cond.false.4831

cond.true.4808:                                   ; preds = %cond.true.4797
  %1287 = load i64, i64* %nbytes, align 8
  %mul4809 = mul nsw i64 0, %1287
  %1288 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4810 = getelementptr inbounds %struct.image, %struct.image* %1288, i32 0, i32 12
  %1289 = load i32, i32* %height4810, align 4
  %conv4811 = sext i32 %1289 to i64
  %add4812 = add nsw i64 %mul4809, %conv4811
  %mul4813 = mul nsw i64 0, %add4812
  %add4814 = add nsw i64 %mul4813, 0
  %neg4815 = xor i64 %add4814, -1
  %cmp4816 = icmp eq i64 %neg4815, -1
  %conv4817 = zext i1 %cmp4816 to i32
  %sub4818 = sub nsw i32 0, %conv4817
  %conv4819 = sext i32 %sub4818 to i64
  %1290 = load i64, i64* %nbytes, align 8
  %mul4820 = mul nsw i64 0, %1290
  %1291 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4821 = getelementptr inbounds %struct.image, %struct.image* %1291, i32 0, i32 12
  %1292 = load i32, i32* %height4821, align 4
  %conv4822 = sext i32 %1292 to i64
  %add4823 = add nsw i64 %mul4820, %conv4822
  %mul4824 = mul nsw i64 0, %add4823
  %add4825 = add nsw i64 %mul4824, 1
  %shl4826 = shl i64 %add4825, 62
  %sub4827 = sub nsw i64 %shl4826, 1
  %mul4828 = mul nsw i64 %sub4827, 2
  %add4829 = add nsw i64 %mul4828, 1
  %sub4830 = sub nsw i64 %conv4819, %add4829
  br label %cond.end.4838

cond.false.4831:                                  ; preds = %cond.true.4797
  %1293 = load i64, i64* %nbytes, align 8
  %mul4832 = mul nsw i64 0, %1293
  %1294 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4833 = getelementptr inbounds %struct.image, %struct.image* %1294, i32 0, i32 12
  %1295 = load i32, i32* %height4833, align 4
  %conv4834 = sext i32 %1295 to i64
  %add4835 = add nsw i64 %mul4832, %conv4834
  %mul4836 = mul nsw i64 0, %add4835
  %add4837 = add nsw i64 %mul4836, 0
  br label %cond.end.4838

cond.end.4838:                                    ; preds = %cond.false.4831, %cond.true.4808
  %cond4839 = phi i64 [ %sub4830, %cond.true.4808 ], [ %add4837, %cond.false.4831 ]
  %1296 = load i64, i64* %nbytes, align 8
  %div4840 = sdiv i64 %cond4839, %1296
  %cmp4841 = icmp slt i64 %conv4799, %div4840
  br i1 %cmp4841, label %cond.true.4897, label %lor.lhs.false.4877

cond.false.4843:                                  ; preds = %cond.false.4793
  %1297 = load i64, i64* %nbytes, align 8
  %mul4844 = mul nsw i64 0, %1297
  %1298 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4845 = getelementptr inbounds %struct.image, %struct.image* %1298, i32 0, i32 12
  %1299 = load i32, i32* %height4845, align 4
  %conv4846 = sext i32 %1299 to i64
  %add4847 = add nsw i64 %mul4844, %conv4846
  %mul4848 = mul nsw i64 0, %add4847
  %sub4849 = sub nsw i64 %mul4848, 1
  %cmp4850 = icmp slt i64 %sub4849, 0
  br i1 %cmp4850, label %cond.true.4852, label %cond.false.4863

cond.true.4852:                                   ; preds = %cond.false.4843
  %1300 = load i64, i64* %nbytes, align 8
  %mul4853 = mul nsw i64 0, %1300
  %1301 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4854 = getelementptr inbounds %struct.image, %struct.image* %1301, i32 0, i32 12
  %1302 = load i32, i32* %height4854, align 4
  %conv4855 = sext i32 %1302 to i64
  %add4856 = add nsw i64 %mul4853, %conv4855
  %mul4857 = mul nsw i64 0, %add4856
  %add4858 = add nsw i64 %mul4857, 1
  %shl4859 = shl i64 %add4858, 62
  %sub4860 = sub nsw i64 %shl4859, 1
  %mul4861 = mul nsw i64 %sub4860, 2
  %add4862 = add nsw i64 %mul4861, 1
  br label %cond.end.4870

cond.false.4863:                                  ; preds = %cond.false.4843
  %1303 = load i64, i64* %nbytes, align 8
  %mul4864 = mul nsw i64 0, %1303
  %1304 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4865 = getelementptr inbounds %struct.image, %struct.image* %1304, i32 0, i32 12
  %1305 = load i32, i32* %height4865, align 4
  %conv4866 = sext i32 %1305 to i64
  %add4867 = add nsw i64 %mul4864, %conv4866
  %mul4868 = mul nsw i64 0, %add4867
  %sub4869 = sub nsw i64 %mul4868, 1
  br label %cond.end.4870

cond.end.4870:                                    ; preds = %cond.false.4863, %cond.true.4852
  %cond4871 = phi i64 [ %add4862, %cond.true.4852 ], [ %sub4869, %cond.false.4863 ]
  %1306 = load i64, i64* %nbytes, align 8
  %div4872 = sdiv i64 %cond4871, %1306
  %1307 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4873 = getelementptr inbounds %struct.image, %struct.image* %1307, i32 0, i32 12
  %1308 = load i32, i32* %height4873, align 4
  %conv4874 = sext i32 %1308 to i64
  %cmp4875 = icmp slt i64 %div4872, %conv4874
  br i1 %cmp4875, label %cond.true.4897, label %lor.lhs.false.4877

lor.lhs.false.4877:                               ; preds = %cond.end.4870, %cond.end.4838, %cond.true.4792, %cond.end.4782, %cond.true.4742, %cond.end.4734
  %1309 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4878 = getelementptr inbounds %struct.image, %struct.image* %1309, i32 0, i32 12
  %1310 = load i32, i32* %height4878, align 4
  %conv4879 = sext i32 %1310 to i64
  %1311 = load i64, i64* %nbytes, align 8
  %mul4880 = mul nsw i64 %conv4879, %1311
  %mul4881 = mul nsw i64 0, %mul4880
  %sub4882 = sub nsw i64 %mul4881, 1
  %cmp4883 = icmp slt i64 %sub4882, 0
  br i1 %cmp4883, label %land.lhs.true.4885, label %lor.lhs.false.4891

land.lhs.true.4885:                               ; preds = %lor.lhs.false.4877
  %1312 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4886 = getelementptr inbounds %struct.image, %struct.image* %1312, i32 0, i32 12
  %1313 = load i32, i32* %height4886, align 4
  %conv4887 = sext i32 %1313 to i64
  %1314 = load i64, i64* %nbytes, align 8
  %mul4888 = mul nsw i64 %conv4887, %1314
  %cmp4889 = icmp slt i64 %mul4888, -2147483648
  br i1 %cmp4889, label %cond.true.4897, label %lor.lhs.false.4891

lor.lhs.false.4891:                               ; preds = %land.lhs.true.4885, %lor.lhs.false.4877
  %1315 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4892 = getelementptr inbounds %struct.image, %struct.image* %1315, i32 0, i32 12
  %1316 = load i32, i32* %height4892, align 4
  %conv4893 = sext i32 %1316 to i64
  %1317 = load i64, i64* %nbytes, align 8
  %mul4894 = mul nsw i64 %conv4893, %1317
  %cmp4895 = icmp slt i64 2147483647, %mul4894
  br i1 %cmp4895, label %cond.true.4897, label %cond.false.4916

cond.true.4897:                                   ; preds = %lor.lhs.false.4891, %land.lhs.true.4885, %cond.end.4870, %cond.end.4838, %cond.true.4792, %cond.end.4782, %cond.true.4742, %cond.end.4734, %land.lhs.true.4694, %land.lhs.true.4688
  %1318 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4898 = getelementptr inbounds %struct.image, %struct.image* %1318, i32 0, i32 12
  %1319 = load i32, i32* %height4898, align 4
  %1320 = load i64, i64* %nbytes, align 8
  %conv4899 = trunc i64 %1320 to i32
  %mul4900 = mul i32 %1319, %conv4899
  %cmp4901 = icmp ule i32 %mul4900, 2147483647
  br i1 %cmp4901, label %cond.true.4903, label %cond.false.4907

cond.true.4903:                                   ; preds = %cond.true.4897
  %1321 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4904 = getelementptr inbounds %struct.image, %struct.image* %1321, i32 0, i32 12
  %1322 = load i32, i32* %height4904, align 4
  %1323 = load i64, i64* %nbytes, align 8
  %conv4905 = trunc i64 %1323 to i32
  %mul4906 = mul i32 %1322, %conv4905
  br label %cond.end.4913

cond.false.4907:                                  ; preds = %cond.true.4897
  %1324 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4908 = getelementptr inbounds %struct.image, %struct.image* %1324, i32 0, i32 12
  %1325 = load i32, i32* %height4908, align 4
  %1326 = load i64, i64* %nbytes, align 8
  %conv4909 = trunc i64 %1326 to i32
  %mul4910 = mul i32 %1325, %conv4909
  %sub4911 = sub i32 %mul4910, -2147483648
  %add4912 = add nsw i32 %sub4911, -2147483648
  br label %cond.end.4913

cond.end.4913:                                    ; preds = %cond.false.4907, %cond.true.4903
  %cond4914 = phi i32 [ %mul4906, %cond.true.4903 ], [ %add4912, %cond.false.4907 ]
  %conv4915 = sext i32 %cond4914 to i64
  store i64 %conv4915, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.4916:                                  ; preds = %lor.lhs.false.4891
  %1327 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4917 = getelementptr inbounds %struct.image, %struct.image* %1327, i32 0, i32 12
  %1328 = load i32, i32* %height4917, align 4
  %1329 = load i64, i64* %nbytes, align 8
  %conv4918 = trunc i64 %1329 to i32
  %mul4919 = mul i32 %1328, %conv4918
  %cmp4920 = icmp ule i32 %mul4919, 2147483647
  br i1 %cmp4920, label %cond.true.4922, label %cond.false.4926

cond.true.4922:                                   ; preds = %cond.false.4916
  %1330 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4923 = getelementptr inbounds %struct.image, %struct.image* %1330, i32 0, i32 12
  %1331 = load i32, i32* %height4923, align 4
  %1332 = load i64, i64* %nbytes, align 8
  %conv4924 = trunc i64 %1332 to i32
  %mul4925 = mul i32 %1331, %conv4924
  br label %cond.end.4932

cond.false.4926:                                  ; preds = %cond.false.4916
  %1333 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4927 = getelementptr inbounds %struct.image, %struct.image* %1333, i32 0, i32 12
  %1334 = load i32, i32* %height4927, align 4
  %1335 = load i64, i64* %nbytes, align 8
  %conv4928 = trunc i64 %1335 to i32
  %mul4929 = mul i32 %1334, %conv4928
  %sub4930 = sub i32 %mul4929, -2147483648
  %add4931 = add nsw i32 %sub4930, -2147483648
  br label %cond.end.4932

cond.end.4932:                                    ; preds = %cond.false.4926, %cond.true.4922
  %cond4933 = phi i32 [ %mul4925, %cond.true.4922 ], [ %add4931, %cond.false.4926 ]
  %conv4934 = sext i32 %cond4933 to i64
  store i64 %conv4934, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.4935:                                  ; preds = %cond.false.4343
  br i1 true, label %cond.true.4936, label %cond.false.5525

cond.true.4936:                                   ; preds = %cond.false.4935
  br i1 false, label %cond.true.4937, label %cond.false.5233

cond.true.4937:                                   ; preds = %cond.true.4936
  %1336 = load i64, i64* %nbytes, align 8
  %mul4938 = mul nsw i64 0, %1336
  %1337 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4939 = getelementptr inbounds %struct.image, %struct.image* %1337, i32 0, i32 12
  %1338 = load i32, i32* %height4939, align 4
  %conv4940 = sext i32 %1338 to i64
  %add4941 = add nsw i64 %mul4938, %conv4940
  %mul4942 = mul nsw i64 0, %add4941
  %sub4943 = sub nsw i64 %mul4942, 1
  %cmp4944 = icmp slt i64 %sub4943, 0
  br i1 %cmp4944, label %cond.true.4946, label %cond.false.4969

cond.true.4946:                                   ; preds = %cond.true.4937
  %1339 = load i64, i64* %nbytes, align 8
  %mul4947 = mul nsw i64 0, %1339
  %1340 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4948 = getelementptr inbounds %struct.image, %struct.image* %1340, i32 0, i32 12
  %1341 = load i32, i32* %height4948, align 4
  %conv4949 = sext i32 %1341 to i64
  %add4950 = add nsw i64 %mul4947, %conv4949
  %mul4951 = mul nsw i64 0, %add4950
  %add4952 = add nsw i64 %mul4951, 0
  %neg4953 = xor i64 %add4952, -1
  %cmp4954 = icmp eq i64 %neg4953, -1
  %conv4955 = zext i1 %cmp4954 to i32
  %sub4956 = sub nsw i32 0, %conv4955
  %conv4957 = sext i32 %sub4956 to i64
  %1342 = load i64, i64* %nbytes, align 8
  %mul4958 = mul nsw i64 0, %1342
  %1343 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4959 = getelementptr inbounds %struct.image, %struct.image* %1343, i32 0, i32 12
  %1344 = load i32, i32* %height4959, align 4
  %conv4960 = sext i32 %1344 to i64
  %add4961 = add nsw i64 %mul4958, %conv4960
  %mul4962 = mul nsw i64 0, %add4961
  %add4963 = add nsw i64 %mul4962, 1
  %shl4964 = shl i64 %add4963, 62
  %sub4965 = sub nsw i64 %shl4964, 1
  %mul4966 = mul nsw i64 %sub4965, 2
  %add4967 = add nsw i64 %mul4966, 1
  %sub4968 = sub nsw i64 %conv4957, %add4967
  br label %cond.end.4976

cond.false.4969:                                  ; preds = %cond.true.4937
  %1345 = load i64, i64* %nbytes, align 8
  %mul4970 = mul nsw i64 0, %1345
  %1346 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4971 = getelementptr inbounds %struct.image, %struct.image* %1346, i32 0, i32 12
  %1347 = load i32, i32* %height4971, align 4
  %conv4972 = sext i32 %1347 to i64
  %add4973 = add nsw i64 %mul4970, %conv4972
  %mul4974 = mul nsw i64 0, %add4973
  %add4975 = add nsw i64 %mul4974, 0
  br label %cond.end.4976

cond.end.4976:                                    ; preds = %cond.false.4969, %cond.true.4946
  %cond4977 = phi i64 [ %sub4968, %cond.true.4946 ], [ %add4975, %cond.false.4969 ]
  %cmp4978 = icmp eq i64 %cond4977, 0
  br i1 %cmp4978, label %land.lhs.true.4980, label %lor.lhs.false.4996

land.lhs.true.4980:                               ; preds = %cond.end.4976
  %1348 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4981 = getelementptr inbounds %struct.image, %struct.image* %1348, i32 0, i32 12
  %1349 = load i32, i32* %height4981, align 4
  %conv4982 = sext i32 %1349 to i64
  %cmp4983 = icmp slt i64 %conv4982, 0
  br i1 %cmp4983, label %land.lhs.true.4985, label %lor.lhs.false.4988

land.lhs.true.4985:                               ; preds = %land.lhs.true.4980
  %1350 = load i64, i64* %nbytes, align 8
  %cmp4986 = icmp slt i64 0, %1350
  br i1 %cmp4986, label %cond.true.5197, label %lor.lhs.false.4988

lor.lhs.false.4988:                               ; preds = %land.lhs.true.4985, %land.lhs.true.4980
  %1351 = load i64, i64* %nbytes, align 8
  %cmp4989 = icmp slt i64 %1351, 0
  br i1 %cmp4989, label %land.lhs.true.4991, label %lor.lhs.false.4996

land.lhs.true.4991:                               ; preds = %lor.lhs.false.4988
  %1352 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4992 = getelementptr inbounds %struct.image, %struct.image* %1352, i32 0, i32 12
  %1353 = load i32, i32* %height4992, align 4
  %conv4993 = sext i32 %1353 to i64
  %cmp4994 = icmp slt i64 0, %conv4993
  br i1 %cmp4994, label %cond.true.5197, label %lor.lhs.false.4996

lor.lhs.false.4996:                               ; preds = %land.lhs.true.4991, %lor.lhs.false.4988, %cond.end.4976
  %1354 = load i64, i64* %nbytes, align 8
  %cmp4997 = icmp slt i64 %1354, 0
  br i1 %cmp4997, label %cond.true.4999, label %cond.false.5088

cond.true.4999:                                   ; preds = %lor.lhs.false.4996
  %1355 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5000 = getelementptr inbounds %struct.image, %struct.image* %1355, i32 0, i32 12
  %1356 = load i32, i32* %height5000, align 4
  %conv5001 = sext i32 %1356 to i64
  %cmp5002 = icmp slt i64 %conv5001, 0
  br i1 %cmp5002, label %cond.true.5004, label %cond.false.5038

cond.true.5004:                                   ; preds = %cond.true.4999
  %1357 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5005 = getelementptr inbounds %struct.image, %struct.image* %1357, i32 0, i32 12
  %1358 = load i32, i32* %height5005, align 4
  %conv5006 = sext i32 %1358 to i64
  %1359 = load i64, i64* %nbytes, align 8
  %mul5007 = mul nsw i64 0, %1359
  %1360 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5008 = getelementptr inbounds %struct.image, %struct.image* %1360, i32 0, i32 12
  %1361 = load i32, i32* %height5008, align 4
  %conv5009 = sext i32 %1361 to i64
  %add5010 = add nsw i64 %mul5007, %conv5009
  %mul5011 = mul nsw i64 0, %add5010
  %sub5012 = sub nsw i64 %mul5011, 1
  %cmp5013 = icmp slt i64 %sub5012, 0
  br i1 %cmp5013, label %cond.true.5015, label %cond.false.5026

cond.true.5015:                                   ; preds = %cond.true.5004
  %1362 = load i64, i64* %nbytes, align 8
  %mul5016 = mul nsw i64 0, %1362
  %1363 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5017 = getelementptr inbounds %struct.image, %struct.image* %1363, i32 0, i32 12
  %1364 = load i32, i32* %height5017, align 4
  %conv5018 = sext i32 %1364 to i64
  %add5019 = add nsw i64 %mul5016, %conv5018
  %mul5020 = mul nsw i64 0, %add5019
  %add5021 = add nsw i64 %mul5020, 1
  %shl5022 = shl i64 %add5021, 62
  %sub5023 = sub nsw i64 %shl5022, 1
  %mul5024 = mul nsw i64 %sub5023, 2
  %add5025 = add nsw i64 %mul5024, 1
  br label %cond.end.5033

cond.false.5026:                                  ; preds = %cond.true.5004
  %1365 = load i64, i64* %nbytes, align 8
  %mul5027 = mul nsw i64 0, %1365
  %1366 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5028 = getelementptr inbounds %struct.image, %struct.image* %1366, i32 0, i32 12
  %1367 = load i32, i32* %height5028, align 4
  %conv5029 = sext i32 %1367 to i64
  %add5030 = add nsw i64 %mul5027, %conv5029
  %mul5031 = mul nsw i64 0, %add5030
  %sub5032 = sub nsw i64 %mul5031, 1
  br label %cond.end.5033

cond.end.5033:                                    ; preds = %cond.false.5026, %cond.true.5015
  %cond5034 = phi i64 [ %add5025, %cond.true.5015 ], [ %sub5032, %cond.false.5026 ]
  %1368 = load i64, i64* %nbytes, align 8
  %div5035 = sdiv i64 %cond5034, %1368
  %cmp5036 = icmp slt i64 %conv5006, %div5035
  br i1 %cmp5036, label %cond.true.5197, label %lor.lhs.false.5177

cond.false.5038:                                  ; preds = %cond.true.4999
  %1369 = load i64, i64* %nbytes, align 8
  %cmp5039 = icmp eq i64 %1369, -1
  br i1 %cmp5039, label %cond.true.5041, label %cond.false.5042

cond.true.5041:                                   ; preds = %cond.false.5038
  br i1 false, label %cond.true.5197, label %lor.lhs.false.5177

cond.false.5042:                                  ; preds = %cond.false.5038
  %1370 = load i64, i64* %nbytes, align 8
  %mul5043 = mul nsw i64 0, %1370
  %1371 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5044 = getelementptr inbounds %struct.image, %struct.image* %1371, i32 0, i32 12
  %1372 = load i32, i32* %height5044, align 4
  %conv5045 = sext i32 %1372 to i64
  %add5046 = add nsw i64 %mul5043, %conv5045
  %mul5047 = mul nsw i64 0, %add5046
  %sub5048 = sub nsw i64 %mul5047, 1
  %cmp5049 = icmp slt i64 %sub5048, 0
  br i1 %cmp5049, label %cond.true.5051, label %cond.false.5074

cond.true.5051:                                   ; preds = %cond.false.5042
  %1373 = load i64, i64* %nbytes, align 8
  %mul5052 = mul nsw i64 0, %1373
  %1374 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5053 = getelementptr inbounds %struct.image, %struct.image* %1374, i32 0, i32 12
  %1375 = load i32, i32* %height5053, align 4
  %conv5054 = sext i32 %1375 to i64
  %add5055 = add nsw i64 %mul5052, %conv5054
  %mul5056 = mul nsw i64 0, %add5055
  %add5057 = add nsw i64 %mul5056, 0
  %neg5058 = xor i64 %add5057, -1
  %cmp5059 = icmp eq i64 %neg5058, -1
  %conv5060 = zext i1 %cmp5059 to i32
  %sub5061 = sub nsw i32 0, %conv5060
  %conv5062 = sext i32 %sub5061 to i64
  %1376 = load i64, i64* %nbytes, align 8
  %mul5063 = mul nsw i64 0, %1376
  %1377 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5064 = getelementptr inbounds %struct.image, %struct.image* %1377, i32 0, i32 12
  %1378 = load i32, i32* %height5064, align 4
  %conv5065 = sext i32 %1378 to i64
  %add5066 = add nsw i64 %mul5063, %conv5065
  %mul5067 = mul nsw i64 0, %add5066
  %add5068 = add nsw i64 %mul5067, 1
  %shl5069 = shl i64 %add5068, 62
  %sub5070 = sub nsw i64 %shl5069, 1
  %mul5071 = mul nsw i64 %sub5070, 2
  %add5072 = add nsw i64 %mul5071, 1
  %sub5073 = sub nsw i64 %conv5062, %add5072
  br label %cond.end.5081

cond.false.5074:                                  ; preds = %cond.false.5042
  %1379 = load i64, i64* %nbytes, align 8
  %mul5075 = mul nsw i64 0, %1379
  %1380 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5076 = getelementptr inbounds %struct.image, %struct.image* %1380, i32 0, i32 12
  %1381 = load i32, i32* %height5076, align 4
  %conv5077 = sext i32 %1381 to i64
  %add5078 = add nsw i64 %mul5075, %conv5077
  %mul5079 = mul nsw i64 0, %add5078
  %add5080 = add nsw i64 %mul5079, 0
  br label %cond.end.5081

cond.end.5081:                                    ; preds = %cond.false.5074, %cond.true.5051
  %cond5082 = phi i64 [ %sub5073, %cond.true.5051 ], [ %add5080, %cond.false.5074 ]
  %1382 = load i64, i64* %nbytes, align 8
  %div5083 = sdiv i64 %cond5082, %1382
  %1383 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5084 = getelementptr inbounds %struct.image, %struct.image* %1383, i32 0, i32 12
  %1384 = load i32, i32* %height5084, align 4
  %conv5085 = sext i32 %1384 to i64
  %cmp5086 = icmp slt i64 %div5083, %conv5085
  br i1 %cmp5086, label %cond.true.5197, label %lor.lhs.false.5177

cond.false.5088:                                  ; preds = %lor.lhs.false.4996
  %1385 = load i64, i64* %nbytes, align 8
  %cmp5089 = icmp eq i64 %1385, 0
  br i1 %cmp5089, label %cond.true.5091, label %cond.false.5092

cond.true.5091:                                   ; preds = %cond.false.5088
  br i1 false, label %cond.true.5197, label %lor.lhs.false.5177

cond.false.5092:                                  ; preds = %cond.false.5088
  %1386 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5093 = getelementptr inbounds %struct.image, %struct.image* %1386, i32 0, i32 12
  %1387 = load i32, i32* %height5093, align 4
  %conv5094 = sext i32 %1387 to i64
  %cmp5095 = icmp slt i64 %conv5094, 0
  br i1 %cmp5095, label %cond.true.5097, label %cond.false.5143

cond.true.5097:                                   ; preds = %cond.false.5092
  %1388 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5098 = getelementptr inbounds %struct.image, %struct.image* %1388, i32 0, i32 12
  %1389 = load i32, i32* %height5098, align 4
  %conv5099 = sext i32 %1389 to i64
  %1390 = load i64, i64* %nbytes, align 8
  %mul5100 = mul nsw i64 0, %1390
  %1391 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5101 = getelementptr inbounds %struct.image, %struct.image* %1391, i32 0, i32 12
  %1392 = load i32, i32* %height5101, align 4
  %conv5102 = sext i32 %1392 to i64
  %add5103 = add nsw i64 %mul5100, %conv5102
  %mul5104 = mul nsw i64 0, %add5103
  %sub5105 = sub nsw i64 %mul5104, 1
  %cmp5106 = icmp slt i64 %sub5105, 0
  br i1 %cmp5106, label %cond.true.5108, label %cond.false.5131

cond.true.5108:                                   ; preds = %cond.true.5097
  %1393 = load i64, i64* %nbytes, align 8
  %mul5109 = mul nsw i64 0, %1393
  %1394 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5110 = getelementptr inbounds %struct.image, %struct.image* %1394, i32 0, i32 12
  %1395 = load i32, i32* %height5110, align 4
  %conv5111 = sext i32 %1395 to i64
  %add5112 = add nsw i64 %mul5109, %conv5111
  %mul5113 = mul nsw i64 0, %add5112
  %add5114 = add nsw i64 %mul5113, 0
  %neg5115 = xor i64 %add5114, -1
  %cmp5116 = icmp eq i64 %neg5115, -1
  %conv5117 = zext i1 %cmp5116 to i32
  %sub5118 = sub nsw i32 0, %conv5117
  %conv5119 = sext i32 %sub5118 to i64
  %1396 = load i64, i64* %nbytes, align 8
  %mul5120 = mul nsw i64 0, %1396
  %1397 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5121 = getelementptr inbounds %struct.image, %struct.image* %1397, i32 0, i32 12
  %1398 = load i32, i32* %height5121, align 4
  %conv5122 = sext i32 %1398 to i64
  %add5123 = add nsw i64 %mul5120, %conv5122
  %mul5124 = mul nsw i64 0, %add5123
  %add5125 = add nsw i64 %mul5124, 1
  %shl5126 = shl i64 %add5125, 62
  %sub5127 = sub nsw i64 %shl5126, 1
  %mul5128 = mul nsw i64 %sub5127, 2
  %add5129 = add nsw i64 %mul5128, 1
  %sub5130 = sub nsw i64 %conv5119, %add5129
  br label %cond.end.5138

cond.false.5131:                                  ; preds = %cond.true.5097
  %1399 = load i64, i64* %nbytes, align 8
  %mul5132 = mul nsw i64 0, %1399
  %1400 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5133 = getelementptr inbounds %struct.image, %struct.image* %1400, i32 0, i32 12
  %1401 = load i32, i32* %height5133, align 4
  %conv5134 = sext i32 %1401 to i64
  %add5135 = add nsw i64 %mul5132, %conv5134
  %mul5136 = mul nsw i64 0, %add5135
  %add5137 = add nsw i64 %mul5136, 0
  br label %cond.end.5138

cond.end.5138:                                    ; preds = %cond.false.5131, %cond.true.5108
  %cond5139 = phi i64 [ %sub5130, %cond.true.5108 ], [ %add5137, %cond.false.5131 ]
  %1402 = load i64, i64* %nbytes, align 8
  %div5140 = sdiv i64 %cond5139, %1402
  %cmp5141 = icmp slt i64 %conv5099, %div5140
  br i1 %cmp5141, label %cond.true.5197, label %lor.lhs.false.5177

cond.false.5143:                                  ; preds = %cond.false.5092
  %1403 = load i64, i64* %nbytes, align 8
  %mul5144 = mul nsw i64 0, %1403
  %1404 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5145 = getelementptr inbounds %struct.image, %struct.image* %1404, i32 0, i32 12
  %1405 = load i32, i32* %height5145, align 4
  %conv5146 = sext i32 %1405 to i64
  %add5147 = add nsw i64 %mul5144, %conv5146
  %mul5148 = mul nsw i64 0, %add5147
  %sub5149 = sub nsw i64 %mul5148, 1
  %cmp5150 = icmp slt i64 %sub5149, 0
  br i1 %cmp5150, label %cond.true.5152, label %cond.false.5163

cond.true.5152:                                   ; preds = %cond.false.5143
  %1406 = load i64, i64* %nbytes, align 8
  %mul5153 = mul nsw i64 0, %1406
  %1407 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5154 = getelementptr inbounds %struct.image, %struct.image* %1407, i32 0, i32 12
  %1408 = load i32, i32* %height5154, align 4
  %conv5155 = sext i32 %1408 to i64
  %add5156 = add nsw i64 %mul5153, %conv5155
  %mul5157 = mul nsw i64 0, %add5156
  %add5158 = add nsw i64 %mul5157, 1
  %shl5159 = shl i64 %add5158, 62
  %sub5160 = sub nsw i64 %shl5159, 1
  %mul5161 = mul nsw i64 %sub5160, 2
  %add5162 = add nsw i64 %mul5161, 1
  br label %cond.end.5170

cond.false.5163:                                  ; preds = %cond.false.5143
  %1409 = load i64, i64* %nbytes, align 8
  %mul5164 = mul nsw i64 0, %1409
  %1410 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5165 = getelementptr inbounds %struct.image, %struct.image* %1410, i32 0, i32 12
  %1411 = load i32, i32* %height5165, align 4
  %conv5166 = sext i32 %1411 to i64
  %add5167 = add nsw i64 %mul5164, %conv5166
  %mul5168 = mul nsw i64 0, %add5167
  %sub5169 = sub nsw i64 %mul5168, 1
  br label %cond.end.5170

cond.end.5170:                                    ; preds = %cond.false.5163, %cond.true.5152
  %cond5171 = phi i64 [ %add5162, %cond.true.5152 ], [ %sub5169, %cond.false.5163 ]
  %1412 = load i64, i64* %nbytes, align 8
  %div5172 = sdiv i64 %cond5171, %1412
  %1413 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5173 = getelementptr inbounds %struct.image, %struct.image* %1413, i32 0, i32 12
  %1414 = load i32, i32* %height5173, align 4
  %conv5174 = sext i32 %1414 to i64
  %cmp5175 = icmp slt i64 %div5172, %conv5174
  br i1 %cmp5175, label %cond.true.5197, label %lor.lhs.false.5177

lor.lhs.false.5177:                               ; preds = %cond.end.5170, %cond.end.5138, %cond.true.5091, %cond.end.5081, %cond.true.5041, %cond.end.5033
  %1415 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5178 = getelementptr inbounds %struct.image, %struct.image* %1415, i32 0, i32 12
  %1416 = load i32, i32* %height5178, align 4
  %conv5179 = sext i32 %1416 to i64
  %1417 = load i64, i64* %nbytes, align 8
  %mul5180 = mul nsw i64 %conv5179, %1417
  %mul5181 = mul nsw i64 0, %mul5180
  %sub5182 = sub nsw i64 %mul5181, 1
  %cmp5183 = icmp slt i64 %sub5182, 0
  br i1 %cmp5183, label %land.lhs.true.5185, label %lor.lhs.false.5191

land.lhs.true.5185:                               ; preds = %lor.lhs.false.5177
  %1418 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5186 = getelementptr inbounds %struct.image, %struct.image* %1418, i32 0, i32 12
  %1419 = load i32, i32* %height5186, align 4
  %conv5187 = sext i32 %1419 to i64
  %1420 = load i64, i64* %nbytes, align 8
  %mul5188 = mul nsw i64 %conv5187, %1420
  %cmp5189 = icmp slt i64 %mul5188, -9223372036854775808
  br i1 %cmp5189, label %cond.true.5197, label %lor.lhs.false.5191

lor.lhs.false.5191:                               ; preds = %land.lhs.true.5185, %lor.lhs.false.5177
  %1421 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5192 = getelementptr inbounds %struct.image, %struct.image* %1421, i32 0, i32 12
  %1422 = load i32, i32* %height5192, align 4
  %conv5193 = sext i32 %1422 to i64
  %1423 = load i64, i64* %nbytes, align 8
  %mul5194 = mul nsw i64 %conv5193, %1423
  %cmp5195 = icmp slt i64 9223372036854775807, %mul5194
  br i1 %cmp5195, label %cond.true.5197, label %cond.false.5215

cond.true.5197:                                   ; preds = %lor.lhs.false.5191, %land.lhs.true.5185, %cond.end.5170, %cond.end.5138, %cond.true.5091, %cond.end.5081, %cond.true.5041, %cond.end.5033, %land.lhs.true.4991, %land.lhs.true.4985
  %1424 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5198 = getelementptr inbounds %struct.image, %struct.image* %1424, i32 0, i32 12
  %1425 = load i32, i32* %height5198, align 4
  %conv5199 = sext i32 %1425 to i64
  %1426 = load i64, i64* %nbytes, align 8
  %mul5200 = mul i64 %conv5199, %1426
  %cmp5201 = icmp ule i64 %mul5200, 9223372036854775807
  br i1 %cmp5201, label %cond.true.5203, label %cond.false.5207

cond.true.5203:                                   ; preds = %cond.true.5197
  %1427 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5204 = getelementptr inbounds %struct.image, %struct.image* %1427, i32 0, i32 12
  %1428 = load i32, i32* %height5204, align 4
  %conv5205 = sext i32 %1428 to i64
  %1429 = load i64, i64* %nbytes, align 8
  %mul5206 = mul i64 %conv5205, %1429
  br label %cond.end.5213

cond.false.5207:                                  ; preds = %cond.true.5197
  %1430 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5208 = getelementptr inbounds %struct.image, %struct.image* %1430, i32 0, i32 12
  %1431 = load i32, i32* %height5208, align 4
  %conv5209 = sext i32 %1431 to i64
  %1432 = load i64, i64* %nbytes, align 8
  %mul5210 = mul i64 %conv5209, %1432
  %sub5211 = sub i64 %mul5210, -9223372036854775808
  %add5212 = add nsw i64 %sub5211, -9223372036854775808
  br label %cond.end.5213

cond.end.5213:                                    ; preds = %cond.false.5207, %cond.true.5203
  %cond5214 = phi i64 [ %mul5206, %cond.true.5203 ], [ %add5212, %cond.false.5207 ]
  store i64 %cond5214, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.5215:                                  ; preds = %lor.lhs.false.5191
  %1433 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5216 = getelementptr inbounds %struct.image, %struct.image* %1433, i32 0, i32 12
  %1434 = load i32, i32* %height5216, align 4
  %conv5217 = sext i32 %1434 to i64
  %1435 = load i64, i64* %nbytes, align 8
  %mul5218 = mul i64 %conv5217, %1435
  %cmp5219 = icmp ule i64 %mul5218, 9223372036854775807
  br i1 %cmp5219, label %cond.true.5221, label %cond.false.5225

cond.true.5221:                                   ; preds = %cond.false.5215
  %1436 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5222 = getelementptr inbounds %struct.image, %struct.image* %1436, i32 0, i32 12
  %1437 = load i32, i32* %height5222, align 4
  %conv5223 = sext i32 %1437 to i64
  %1438 = load i64, i64* %nbytes, align 8
  %mul5224 = mul i64 %conv5223, %1438
  br label %cond.end.5231

cond.false.5225:                                  ; preds = %cond.false.5215
  %1439 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5226 = getelementptr inbounds %struct.image, %struct.image* %1439, i32 0, i32 12
  %1440 = load i32, i32* %height5226, align 4
  %conv5227 = sext i32 %1440 to i64
  %1441 = load i64, i64* %nbytes, align 8
  %mul5228 = mul i64 %conv5227, %1441
  %sub5229 = sub i64 %mul5228, -9223372036854775808
  %add5230 = add nsw i64 %sub5229, -9223372036854775808
  br label %cond.end.5231

cond.end.5231:                                    ; preds = %cond.false.5225, %cond.true.5221
  %cond5232 = phi i64 [ %mul5224, %cond.true.5221 ], [ %add5230, %cond.false.5225 ]
  store i64 %cond5232, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.5233:                                  ; preds = %cond.true.4936
  %1442 = load i64, i64* %nbytes, align 8
  %mul5234 = mul nsw i64 0, %1442
  %1443 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5235 = getelementptr inbounds %struct.image, %struct.image* %1443, i32 0, i32 12
  %1444 = load i32, i32* %height5235, align 4
  %conv5236 = sext i32 %1444 to i64
  %add5237 = add nsw i64 %mul5234, %conv5236
  %mul5238 = mul nsw i64 0, %add5237
  %sub5239 = sub nsw i64 %mul5238, 1
  %cmp5240 = icmp slt i64 %sub5239, 0
  br i1 %cmp5240, label %cond.true.5242, label %cond.false.5265

cond.true.5242:                                   ; preds = %cond.false.5233
  %1445 = load i64, i64* %nbytes, align 8
  %mul5243 = mul nsw i64 0, %1445
  %1446 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5244 = getelementptr inbounds %struct.image, %struct.image* %1446, i32 0, i32 12
  %1447 = load i32, i32* %height5244, align 4
  %conv5245 = sext i32 %1447 to i64
  %add5246 = add nsw i64 %mul5243, %conv5245
  %mul5247 = mul nsw i64 0, %add5246
  %add5248 = add nsw i64 %mul5247, 0
  %neg5249 = xor i64 %add5248, -1
  %cmp5250 = icmp eq i64 %neg5249, -1
  %conv5251 = zext i1 %cmp5250 to i32
  %sub5252 = sub nsw i32 0, %conv5251
  %conv5253 = sext i32 %sub5252 to i64
  %1448 = load i64, i64* %nbytes, align 8
  %mul5254 = mul nsw i64 0, %1448
  %1449 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5255 = getelementptr inbounds %struct.image, %struct.image* %1449, i32 0, i32 12
  %1450 = load i32, i32* %height5255, align 4
  %conv5256 = sext i32 %1450 to i64
  %add5257 = add nsw i64 %mul5254, %conv5256
  %mul5258 = mul nsw i64 0, %add5257
  %add5259 = add nsw i64 %mul5258, 1
  %shl5260 = shl i64 %add5259, 62
  %sub5261 = sub nsw i64 %shl5260, 1
  %mul5262 = mul nsw i64 %sub5261, 2
  %add5263 = add nsw i64 %mul5262, 1
  %sub5264 = sub nsw i64 %conv5253, %add5263
  br label %cond.end.5272

cond.false.5265:                                  ; preds = %cond.false.5233
  %1451 = load i64, i64* %nbytes, align 8
  %mul5266 = mul nsw i64 0, %1451
  %1452 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5267 = getelementptr inbounds %struct.image, %struct.image* %1452, i32 0, i32 12
  %1453 = load i32, i32* %height5267, align 4
  %conv5268 = sext i32 %1453 to i64
  %add5269 = add nsw i64 %mul5266, %conv5268
  %mul5270 = mul nsw i64 0, %add5269
  %add5271 = add nsw i64 %mul5270, 0
  br label %cond.end.5272

cond.end.5272:                                    ; preds = %cond.false.5265, %cond.true.5242
  %cond5273 = phi i64 [ %sub5264, %cond.true.5242 ], [ %add5271, %cond.false.5265 ]
  %cmp5274 = icmp eq i64 %cond5273, 0
  br i1 %cmp5274, label %land.lhs.true.5276, label %lor.lhs.false.5290

land.lhs.true.5276:                               ; preds = %cond.end.5272
  %1454 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5277 = getelementptr inbounds %struct.image, %struct.image* %1454, i32 0, i32 12
  %1455 = load i32, i32* %height5277, align 4
  %cmp5278 = icmp slt i32 %1455, 0
  br i1 %cmp5278, label %land.lhs.true.5280, label %lor.lhs.false.5283

land.lhs.true.5280:                               ; preds = %land.lhs.true.5276
  %1456 = load i64, i64* %nbytes, align 8
  %cmp5281 = icmp slt i64 0, %1456
  br i1 %cmp5281, label %cond.true.5489, label %lor.lhs.false.5283

lor.lhs.false.5283:                               ; preds = %land.lhs.true.5280, %land.lhs.true.5276
  %1457 = load i64, i64* %nbytes, align 8
  %cmp5284 = icmp slt i64 %1457, 0
  br i1 %cmp5284, label %land.lhs.true.5286, label %lor.lhs.false.5290

land.lhs.true.5286:                               ; preds = %lor.lhs.false.5283
  %1458 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5287 = getelementptr inbounds %struct.image, %struct.image* %1458, i32 0, i32 12
  %1459 = load i32, i32* %height5287, align 4
  %cmp5288 = icmp slt i32 0, %1459
  br i1 %cmp5288, label %cond.true.5489, label %lor.lhs.false.5290

lor.lhs.false.5290:                               ; preds = %land.lhs.true.5286, %lor.lhs.false.5283, %cond.end.5272
  %1460 = load i64, i64* %nbytes, align 8
  %cmp5291 = icmp slt i64 %1460, 0
  br i1 %cmp5291, label %cond.true.5293, label %cond.false.5381

cond.true.5293:                                   ; preds = %lor.lhs.false.5290
  %1461 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5294 = getelementptr inbounds %struct.image, %struct.image* %1461, i32 0, i32 12
  %1462 = load i32, i32* %height5294, align 4
  %cmp5295 = icmp slt i32 %1462, 0
  br i1 %cmp5295, label %cond.true.5297, label %cond.false.5331

cond.true.5297:                                   ; preds = %cond.true.5293
  %1463 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5298 = getelementptr inbounds %struct.image, %struct.image* %1463, i32 0, i32 12
  %1464 = load i32, i32* %height5298, align 4
  %conv5299 = sext i32 %1464 to i64
  %1465 = load i64, i64* %nbytes, align 8
  %mul5300 = mul nsw i64 0, %1465
  %1466 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5301 = getelementptr inbounds %struct.image, %struct.image* %1466, i32 0, i32 12
  %1467 = load i32, i32* %height5301, align 4
  %conv5302 = sext i32 %1467 to i64
  %add5303 = add nsw i64 %mul5300, %conv5302
  %mul5304 = mul nsw i64 0, %add5303
  %sub5305 = sub nsw i64 %mul5304, 1
  %cmp5306 = icmp slt i64 %sub5305, 0
  br i1 %cmp5306, label %cond.true.5308, label %cond.false.5319

cond.true.5308:                                   ; preds = %cond.true.5297
  %1468 = load i64, i64* %nbytes, align 8
  %mul5309 = mul nsw i64 0, %1468
  %1469 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5310 = getelementptr inbounds %struct.image, %struct.image* %1469, i32 0, i32 12
  %1470 = load i32, i32* %height5310, align 4
  %conv5311 = sext i32 %1470 to i64
  %add5312 = add nsw i64 %mul5309, %conv5311
  %mul5313 = mul nsw i64 0, %add5312
  %add5314 = add nsw i64 %mul5313, 1
  %shl5315 = shl i64 %add5314, 62
  %sub5316 = sub nsw i64 %shl5315, 1
  %mul5317 = mul nsw i64 %sub5316, 2
  %add5318 = add nsw i64 %mul5317, 1
  br label %cond.end.5326

cond.false.5319:                                  ; preds = %cond.true.5297
  %1471 = load i64, i64* %nbytes, align 8
  %mul5320 = mul nsw i64 0, %1471
  %1472 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5321 = getelementptr inbounds %struct.image, %struct.image* %1472, i32 0, i32 12
  %1473 = load i32, i32* %height5321, align 4
  %conv5322 = sext i32 %1473 to i64
  %add5323 = add nsw i64 %mul5320, %conv5322
  %mul5324 = mul nsw i64 0, %add5323
  %sub5325 = sub nsw i64 %mul5324, 1
  br label %cond.end.5326

cond.end.5326:                                    ; preds = %cond.false.5319, %cond.true.5308
  %cond5327 = phi i64 [ %add5318, %cond.true.5308 ], [ %sub5325, %cond.false.5319 ]
  %1474 = load i64, i64* %nbytes, align 8
  %div5328 = sdiv i64 %cond5327, %1474
  %cmp5329 = icmp slt i64 %conv5299, %div5328
  br i1 %cmp5329, label %cond.true.5489, label %lor.lhs.false.5469

cond.false.5331:                                  ; preds = %cond.true.5293
  %1475 = load i64, i64* %nbytes, align 8
  %cmp5332 = icmp eq i64 %1475, -1
  br i1 %cmp5332, label %cond.true.5334, label %cond.false.5335

cond.true.5334:                                   ; preds = %cond.false.5331
  br i1 false, label %cond.true.5489, label %lor.lhs.false.5469

cond.false.5335:                                  ; preds = %cond.false.5331
  %1476 = load i64, i64* %nbytes, align 8
  %mul5336 = mul nsw i64 0, %1476
  %1477 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5337 = getelementptr inbounds %struct.image, %struct.image* %1477, i32 0, i32 12
  %1478 = load i32, i32* %height5337, align 4
  %conv5338 = sext i32 %1478 to i64
  %add5339 = add nsw i64 %mul5336, %conv5338
  %mul5340 = mul nsw i64 0, %add5339
  %sub5341 = sub nsw i64 %mul5340, 1
  %cmp5342 = icmp slt i64 %sub5341, 0
  br i1 %cmp5342, label %cond.true.5344, label %cond.false.5367

cond.true.5344:                                   ; preds = %cond.false.5335
  %1479 = load i64, i64* %nbytes, align 8
  %mul5345 = mul nsw i64 0, %1479
  %1480 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5346 = getelementptr inbounds %struct.image, %struct.image* %1480, i32 0, i32 12
  %1481 = load i32, i32* %height5346, align 4
  %conv5347 = sext i32 %1481 to i64
  %add5348 = add nsw i64 %mul5345, %conv5347
  %mul5349 = mul nsw i64 0, %add5348
  %add5350 = add nsw i64 %mul5349, 0
  %neg5351 = xor i64 %add5350, -1
  %cmp5352 = icmp eq i64 %neg5351, -1
  %conv5353 = zext i1 %cmp5352 to i32
  %sub5354 = sub nsw i32 0, %conv5353
  %conv5355 = sext i32 %sub5354 to i64
  %1482 = load i64, i64* %nbytes, align 8
  %mul5356 = mul nsw i64 0, %1482
  %1483 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5357 = getelementptr inbounds %struct.image, %struct.image* %1483, i32 0, i32 12
  %1484 = load i32, i32* %height5357, align 4
  %conv5358 = sext i32 %1484 to i64
  %add5359 = add nsw i64 %mul5356, %conv5358
  %mul5360 = mul nsw i64 0, %add5359
  %add5361 = add nsw i64 %mul5360, 1
  %shl5362 = shl i64 %add5361, 62
  %sub5363 = sub nsw i64 %shl5362, 1
  %mul5364 = mul nsw i64 %sub5363, 2
  %add5365 = add nsw i64 %mul5364, 1
  %sub5366 = sub nsw i64 %conv5355, %add5365
  br label %cond.end.5374

cond.false.5367:                                  ; preds = %cond.false.5335
  %1485 = load i64, i64* %nbytes, align 8
  %mul5368 = mul nsw i64 0, %1485
  %1486 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5369 = getelementptr inbounds %struct.image, %struct.image* %1486, i32 0, i32 12
  %1487 = load i32, i32* %height5369, align 4
  %conv5370 = sext i32 %1487 to i64
  %add5371 = add nsw i64 %mul5368, %conv5370
  %mul5372 = mul nsw i64 0, %add5371
  %add5373 = add nsw i64 %mul5372, 0
  br label %cond.end.5374

cond.end.5374:                                    ; preds = %cond.false.5367, %cond.true.5344
  %cond5375 = phi i64 [ %sub5366, %cond.true.5344 ], [ %add5373, %cond.false.5367 ]
  %1488 = load i64, i64* %nbytes, align 8
  %div5376 = sdiv i64 %cond5375, %1488
  %1489 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5377 = getelementptr inbounds %struct.image, %struct.image* %1489, i32 0, i32 12
  %1490 = load i32, i32* %height5377, align 4
  %conv5378 = sext i32 %1490 to i64
  %cmp5379 = icmp slt i64 %div5376, %conv5378
  br i1 %cmp5379, label %cond.true.5489, label %lor.lhs.false.5469

cond.false.5381:                                  ; preds = %lor.lhs.false.5290
  %1491 = load i64, i64* %nbytes, align 8
  %cmp5382 = icmp eq i64 %1491, 0
  br i1 %cmp5382, label %cond.true.5384, label %cond.false.5385

cond.true.5384:                                   ; preds = %cond.false.5381
  br i1 false, label %cond.true.5489, label %lor.lhs.false.5469

cond.false.5385:                                  ; preds = %cond.false.5381
  %1492 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5386 = getelementptr inbounds %struct.image, %struct.image* %1492, i32 0, i32 12
  %1493 = load i32, i32* %height5386, align 4
  %cmp5387 = icmp slt i32 %1493, 0
  br i1 %cmp5387, label %cond.true.5389, label %cond.false.5435

cond.true.5389:                                   ; preds = %cond.false.5385
  %1494 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5390 = getelementptr inbounds %struct.image, %struct.image* %1494, i32 0, i32 12
  %1495 = load i32, i32* %height5390, align 4
  %conv5391 = sext i32 %1495 to i64
  %1496 = load i64, i64* %nbytes, align 8
  %mul5392 = mul nsw i64 0, %1496
  %1497 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5393 = getelementptr inbounds %struct.image, %struct.image* %1497, i32 0, i32 12
  %1498 = load i32, i32* %height5393, align 4
  %conv5394 = sext i32 %1498 to i64
  %add5395 = add nsw i64 %mul5392, %conv5394
  %mul5396 = mul nsw i64 0, %add5395
  %sub5397 = sub nsw i64 %mul5396, 1
  %cmp5398 = icmp slt i64 %sub5397, 0
  br i1 %cmp5398, label %cond.true.5400, label %cond.false.5423

cond.true.5400:                                   ; preds = %cond.true.5389
  %1499 = load i64, i64* %nbytes, align 8
  %mul5401 = mul nsw i64 0, %1499
  %1500 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5402 = getelementptr inbounds %struct.image, %struct.image* %1500, i32 0, i32 12
  %1501 = load i32, i32* %height5402, align 4
  %conv5403 = sext i32 %1501 to i64
  %add5404 = add nsw i64 %mul5401, %conv5403
  %mul5405 = mul nsw i64 0, %add5404
  %add5406 = add nsw i64 %mul5405, 0
  %neg5407 = xor i64 %add5406, -1
  %cmp5408 = icmp eq i64 %neg5407, -1
  %conv5409 = zext i1 %cmp5408 to i32
  %sub5410 = sub nsw i32 0, %conv5409
  %conv5411 = sext i32 %sub5410 to i64
  %1502 = load i64, i64* %nbytes, align 8
  %mul5412 = mul nsw i64 0, %1502
  %1503 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5413 = getelementptr inbounds %struct.image, %struct.image* %1503, i32 0, i32 12
  %1504 = load i32, i32* %height5413, align 4
  %conv5414 = sext i32 %1504 to i64
  %add5415 = add nsw i64 %mul5412, %conv5414
  %mul5416 = mul nsw i64 0, %add5415
  %add5417 = add nsw i64 %mul5416, 1
  %shl5418 = shl i64 %add5417, 62
  %sub5419 = sub nsw i64 %shl5418, 1
  %mul5420 = mul nsw i64 %sub5419, 2
  %add5421 = add nsw i64 %mul5420, 1
  %sub5422 = sub nsw i64 %conv5411, %add5421
  br label %cond.end.5430

cond.false.5423:                                  ; preds = %cond.true.5389
  %1505 = load i64, i64* %nbytes, align 8
  %mul5424 = mul nsw i64 0, %1505
  %1506 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5425 = getelementptr inbounds %struct.image, %struct.image* %1506, i32 0, i32 12
  %1507 = load i32, i32* %height5425, align 4
  %conv5426 = sext i32 %1507 to i64
  %add5427 = add nsw i64 %mul5424, %conv5426
  %mul5428 = mul nsw i64 0, %add5427
  %add5429 = add nsw i64 %mul5428, 0
  br label %cond.end.5430

cond.end.5430:                                    ; preds = %cond.false.5423, %cond.true.5400
  %cond5431 = phi i64 [ %sub5422, %cond.true.5400 ], [ %add5429, %cond.false.5423 ]
  %1508 = load i64, i64* %nbytes, align 8
  %div5432 = sdiv i64 %cond5431, %1508
  %cmp5433 = icmp slt i64 %conv5391, %div5432
  br i1 %cmp5433, label %cond.true.5489, label %lor.lhs.false.5469

cond.false.5435:                                  ; preds = %cond.false.5385
  %1509 = load i64, i64* %nbytes, align 8
  %mul5436 = mul nsw i64 0, %1509
  %1510 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5437 = getelementptr inbounds %struct.image, %struct.image* %1510, i32 0, i32 12
  %1511 = load i32, i32* %height5437, align 4
  %conv5438 = sext i32 %1511 to i64
  %add5439 = add nsw i64 %mul5436, %conv5438
  %mul5440 = mul nsw i64 0, %add5439
  %sub5441 = sub nsw i64 %mul5440, 1
  %cmp5442 = icmp slt i64 %sub5441, 0
  br i1 %cmp5442, label %cond.true.5444, label %cond.false.5455

cond.true.5444:                                   ; preds = %cond.false.5435
  %1512 = load i64, i64* %nbytes, align 8
  %mul5445 = mul nsw i64 0, %1512
  %1513 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5446 = getelementptr inbounds %struct.image, %struct.image* %1513, i32 0, i32 12
  %1514 = load i32, i32* %height5446, align 4
  %conv5447 = sext i32 %1514 to i64
  %add5448 = add nsw i64 %mul5445, %conv5447
  %mul5449 = mul nsw i64 0, %add5448
  %add5450 = add nsw i64 %mul5449, 1
  %shl5451 = shl i64 %add5450, 62
  %sub5452 = sub nsw i64 %shl5451, 1
  %mul5453 = mul nsw i64 %sub5452, 2
  %add5454 = add nsw i64 %mul5453, 1
  br label %cond.end.5462

cond.false.5455:                                  ; preds = %cond.false.5435
  %1515 = load i64, i64* %nbytes, align 8
  %mul5456 = mul nsw i64 0, %1515
  %1516 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5457 = getelementptr inbounds %struct.image, %struct.image* %1516, i32 0, i32 12
  %1517 = load i32, i32* %height5457, align 4
  %conv5458 = sext i32 %1517 to i64
  %add5459 = add nsw i64 %mul5456, %conv5458
  %mul5460 = mul nsw i64 0, %add5459
  %sub5461 = sub nsw i64 %mul5460, 1
  br label %cond.end.5462

cond.end.5462:                                    ; preds = %cond.false.5455, %cond.true.5444
  %cond5463 = phi i64 [ %add5454, %cond.true.5444 ], [ %sub5461, %cond.false.5455 ]
  %1518 = load i64, i64* %nbytes, align 8
  %div5464 = sdiv i64 %cond5463, %1518
  %1519 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5465 = getelementptr inbounds %struct.image, %struct.image* %1519, i32 0, i32 12
  %1520 = load i32, i32* %height5465, align 4
  %conv5466 = sext i32 %1520 to i64
  %cmp5467 = icmp slt i64 %div5464, %conv5466
  br i1 %cmp5467, label %cond.true.5489, label %lor.lhs.false.5469

lor.lhs.false.5469:                               ; preds = %cond.end.5462, %cond.end.5430, %cond.true.5384, %cond.end.5374, %cond.true.5334, %cond.end.5326
  %1521 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5470 = getelementptr inbounds %struct.image, %struct.image* %1521, i32 0, i32 12
  %1522 = load i32, i32* %height5470, align 4
  %conv5471 = sext i32 %1522 to i64
  %1523 = load i64, i64* %nbytes, align 8
  %mul5472 = mul nsw i64 %conv5471, %1523
  %mul5473 = mul nsw i64 0, %mul5472
  %sub5474 = sub nsw i64 %mul5473, 1
  %cmp5475 = icmp slt i64 %sub5474, 0
  br i1 %cmp5475, label %land.lhs.true.5477, label %lor.lhs.false.5483

land.lhs.true.5477:                               ; preds = %lor.lhs.false.5469
  %1524 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5478 = getelementptr inbounds %struct.image, %struct.image* %1524, i32 0, i32 12
  %1525 = load i32, i32* %height5478, align 4
  %conv5479 = sext i32 %1525 to i64
  %1526 = load i64, i64* %nbytes, align 8
  %mul5480 = mul nsw i64 %conv5479, %1526
  %cmp5481 = icmp slt i64 %mul5480, -9223372036854775808
  br i1 %cmp5481, label %cond.true.5489, label %lor.lhs.false.5483

lor.lhs.false.5483:                               ; preds = %land.lhs.true.5477, %lor.lhs.false.5469
  %1527 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5484 = getelementptr inbounds %struct.image, %struct.image* %1527, i32 0, i32 12
  %1528 = load i32, i32* %height5484, align 4
  %conv5485 = sext i32 %1528 to i64
  %1529 = load i64, i64* %nbytes, align 8
  %mul5486 = mul nsw i64 %conv5485, %1529
  %cmp5487 = icmp slt i64 9223372036854775807, %mul5486
  br i1 %cmp5487, label %cond.true.5489, label %cond.false.5507

cond.true.5489:                                   ; preds = %lor.lhs.false.5483, %land.lhs.true.5477, %cond.end.5462, %cond.end.5430, %cond.true.5384, %cond.end.5374, %cond.true.5334, %cond.end.5326, %land.lhs.true.5286, %land.lhs.true.5280
  %1530 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5490 = getelementptr inbounds %struct.image, %struct.image* %1530, i32 0, i32 12
  %1531 = load i32, i32* %height5490, align 4
  %conv5491 = sext i32 %1531 to i64
  %1532 = load i64, i64* %nbytes, align 8
  %mul5492 = mul i64 %conv5491, %1532
  %cmp5493 = icmp ule i64 %mul5492, 9223372036854775807
  br i1 %cmp5493, label %cond.true.5495, label %cond.false.5499

cond.true.5495:                                   ; preds = %cond.true.5489
  %1533 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5496 = getelementptr inbounds %struct.image, %struct.image* %1533, i32 0, i32 12
  %1534 = load i32, i32* %height5496, align 4
  %conv5497 = sext i32 %1534 to i64
  %1535 = load i64, i64* %nbytes, align 8
  %mul5498 = mul i64 %conv5497, %1535
  br label %cond.end.5505

cond.false.5499:                                  ; preds = %cond.true.5489
  %1536 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5500 = getelementptr inbounds %struct.image, %struct.image* %1536, i32 0, i32 12
  %1537 = load i32, i32* %height5500, align 4
  %conv5501 = sext i32 %1537 to i64
  %1538 = load i64, i64* %nbytes, align 8
  %mul5502 = mul i64 %conv5501, %1538
  %sub5503 = sub i64 %mul5502, -9223372036854775808
  %add5504 = add nsw i64 %sub5503, -9223372036854775808
  br label %cond.end.5505

cond.end.5505:                                    ; preds = %cond.false.5499, %cond.true.5495
  %cond5506 = phi i64 [ %mul5498, %cond.true.5495 ], [ %add5504, %cond.false.5499 ]
  store i64 %cond5506, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.5507:                                  ; preds = %lor.lhs.false.5483
  %1539 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5508 = getelementptr inbounds %struct.image, %struct.image* %1539, i32 0, i32 12
  %1540 = load i32, i32* %height5508, align 4
  %conv5509 = sext i32 %1540 to i64
  %1541 = load i64, i64* %nbytes, align 8
  %mul5510 = mul i64 %conv5509, %1541
  %cmp5511 = icmp ule i64 %mul5510, 9223372036854775807
  br i1 %cmp5511, label %cond.true.5513, label %cond.false.5517

cond.true.5513:                                   ; preds = %cond.false.5507
  %1542 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5514 = getelementptr inbounds %struct.image, %struct.image* %1542, i32 0, i32 12
  %1543 = load i32, i32* %height5514, align 4
  %conv5515 = sext i32 %1543 to i64
  %1544 = load i64, i64* %nbytes, align 8
  %mul5516 = mul i64 %conv5515, %1544
  br label %cond.end.5523

cond.false.5517:                                  ; preds = %cond.false.5507
  %1545 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5518 = getelementptr inbounds %struct.image, %struct.image* %1545, i32 0, i32 12
  %1546 = load i32, i32* %height5518, align 4
  %conv5519 = sext i32 %1546 to i64
  %1547 = load i64, i64* %nbytes, align 8
  %mul5520 = mul i64 %conv5519, %1547
  %sub5521 = sub i64 %mul5520, -9223372036854775808
  %add5522 = add nsw i64 %sub5521, -9223372036854775808
  br label %cond.end.5523

cond.end.5523:                                    ; preds = %cond.false.5517, %cond.true.5513
  %cond5524 = phi i64 [ %mul5516, %cond.true.5513 ], [ %add5522, %cond.false.5517 ]
  store i64 %cond5524, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.5525:                                  ; preds = %cond.false.4935
  br i1 false, label %cond.true.5526, label %cond.false.5822

cond.true.5526:                                   ; preds = %cond.false.5525
  %1548 = load i64, i64* %nbytes, align 8
  %mul5527 = mul nsw i64 0, %1548
  %1549 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5528 = getelementptr inbounds %struct.image, %struct.image* %1549, i32 0, i32 12
  %1550 = load i32, i32* %height5528, align 4
  %conv5529 = sext i32 %1550 to i64
  %add5530 = add nsw i64 %mul5527, %conv5529
  %mul5531 = mul nsw i64 0, %add5530
  %sub5532 = sub nsw i64 %mul5531, 1
  %cmp5533 = icmp slt i64 %sub5532, 0
  br i1 %cmp5533, label %cond.true.5535, label %cond.false.5558

cond.true.5535:                                   ; preds = %cond.true.5526
  %1551 = load i64, i64* %nbytes, align 8
  %mul5536 = mul nsw i64 0, %1551
  %1552 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5537 = getelementptr inbounds %struct.image, %struct.image* %1552, i32 0, i32 12
  %1553 = load i32, i32* %height5537, align 4
  %conv5538 = sext i32 %1553 to i64
  %add5539 = add nsw i64 %mul5536, %conv5538
  %mul5540 = mul nsw i64 0, %add5539
  %add5541 = add nsw i64 %mul5540, 0
  %neg5542 = xor i64 %add5541, -1
  %cmp5543 = icmp eq i64 %neg5542, -1
  %conv5544 = zext i1 %cmp5543 to i32
  %sub5545 = sub nsw i32 0, %conv5544
  %conv5546 = sext i32 %sub5545 to i64
  %1554 = load i64, i64* %nbytes, align 8
  %mul5547 = mul nsw i64 0, %1554
  %1555 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5548 = getelementptr inbounds %struct.image, %struct.image* %1555, i32 0, i32 12
  %1556 = load i32, i32* %height5548, align 4
  %conv5549 = sext i32 %1556 to i64
  %add5550 = add nsw i64 %mul5547, %conv5549
  %mul5551 = mul nsw i64 0, %add5550
  %add5552 = add nsw i64 %mul5551, 1
  %shl5553 = shl i64 %add5552, 62
  %sub5554 = sub nsw i64 %shl5553, 1
  %mul5555 = mul nsw i64 %sub5554, 2
  %add5556 = add nsw i64 %mul5555, 1
  %sub5557 = sub nsw i64 %conv5546, %add5556
  br label %cond.end.5565

cond.false.5558:                                  ; preds = %cond.true.5526
  %1557 = load i64, i64* %nbytes, align 8
  %mul5559 = mul nsw i64 0, %1557
  %1558 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5560 = getelementptr inbounds %struct.image, %struct.image* %1558, i32 0, i32 12
  %1559 = load i32, i32* %height5560, align 4
  %conv5561 = sext i32 %1559 to i64
  %add5562 = add nsw i64 %mul5559, %conv5561
  %mul5563 = mul nsw i64 0, %add5562
  %add5564 = add nsw i64 %mul5563, 0
  br label %cond.end.5565

cond.end.5565:                                    ; preds = %cond.false.5558, %cond.true.5535
  %cond5566 = phi i64 [ %sub5557, %cond.true.5535 ], [ %add5564, %cond.false.5558 ]
  %cmp5567 = icmp eq i64 %cond5566, 0
  br i1 %cmp5567, label %land.lhs.true.5569, label %lor.lhs.false.5585

land.lhs.true.5569:                               ; preds = %cond.end.5565
  %1560 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5570 = getelementptr inbounds %struct.image, %struct.image* %1560, i32 0, i32 12
  %1561 = load i32, i32* %height5570, align 4
  %conv5571 = sext i32 %1561 to i64
  %cmp5572 = icmp slt i64 %conv5571, 0
  br i1 %cmp5572, label %land.lhs.true.5574, label %lor.lhs.false.5577

land.lhs.true.5574:                               ; preds = %land.lhs.true.5569
  %1562 = load i64, i64* %nbytes, align 8
  %cmp5575 = icmp slt i64 0, %1562
  br i1 %cmp5575, label %cond.true.5786, label %lor.lhs.false.5577

lor.lhs.false.5577:                               ; preds = %land.lhs.true.5574, %land.lhs.true.5569
  %1563 = load i64, i64* %nbytes, align 8
  %cmp5578 = icmp slt i64 %1563, 0
  br i1 %cmp5578, label %land.lhs.true.5580, label %lor.lhs.false.5585

land.lhs.true.5580:                               ; preds = %lor.lhs.false.5577
  %1564 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5581 = getelementptr inbounds %struct.image, %struct.image* %1564, i32 0, i32 12
  %1565 = load i32, i32* %height5581, align 4
  %conv5582 = sext i32 %1565 to i64
  %cmp5583 = icmp slt i64 0, %conv5582
  br i1 %cmp5583, label %cond.true.5786, label %lor.lhs.false.5585

lor.lhs.false.5585:                               ; preds = %land.lhs.true.5580, %lor.lhs.false.5577, %cond.end.5565
  %1566 = load i64, i64* %nbytes, align 8
  %cmp5586 = icmp slt i64 %1566, 0
  br i1 %cmp5586, label %cond.true.5588, label %cond.false.5677

cond.true.5588:                                   ; preds = %lor.lhs.false.5585
  %1567 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5589 = getelementptr inbounds %struct.image, %struct.image* %1567, i32 0, i32 12
  %1568 = load i32, i32* %height5589, align 4
  %conv5590 = sext i32 %1568 to i64
  %cmp5591 = icmp slt i64 %conv5590, 0
  br i1 %cmp5591, label %cond.true.5593, label %cond.false.5627

cond.true.5593:                                   ; preds = %cond.true.5588
  %1569 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5594 = getelementptr inbounds %struct.image, %struct.image* %1569, i32 0, i32 12
  %1570 = load i32, i32* %height5594, align 4
  %conv5595 = sext i32 %1570 to i64
  %1571 = load i64, i64* %nbytes, align 8
  %mul5596 = mul nsw i64 0, %1571
  %1572 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5597 = getelementptr inbounds %struct.image, %struct.image* %1572, i32 0, i32 12
  %1573 = load i32, i32* %height5597, align 4
  %conv5598 = sext i32 %1573 to i64
  %add5599 = add nsw i64 %mul5596, %conv5598
  %mul5600 = mul nsw i64 0, %add5599
  %sub5601 = sub nsw i64 %mul5600, 1
  %cmp5602 = icmp slt i64 %sub5601, 0
  br i1 %cmp5602, label %cond.true.5604, label %cond.false.5615

cond.true.5604:                                   ; preds = %cond.true.5593
  %1574 = load i64, i64* %nbytes, align 8
  %mul5605 = mul nsw i64 0, %1574
  %1575 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5606 = getelementptr inbounds %struct.image, %struct.image* %1575, i32 0, i32 12
  %1576 = load i32, i32* %height5606, align 4
  %conv5607 = sext i32 %1576 to i64
  %add5608 = add nsw i64 %mul5605, %conv5607
  %mul5609 = mul nsw i64 0, %add5608
  %add5610 = add nsw i64 %mul5609, 1
  %shl5611 = shl i64 %add5610, 62
  %sub5612 = sub nsw i64 %shl5611, 1
  %mul5613 = mul nsw i64 %sub5612, 2
  %add5614 = add nsw i64 %mul5613, 1
  br label %cond.end.5622

cond.false.5615:                                  ; preds = %cond.true.5593
  %1577 = load i64, i64* %nbytes, align 8
  %mul5616 = mul nsw i64 0, %1577
  %1578 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5617 = getelementptr inbounds %struct.image, %struct.image* %1578, i32 0, i32 12
  %1579 = load i32, i32* %height5617, align 4
  %conv5618 = sext i32 %1579 to i64
  %add5619 = add nsw i64 %mul5616, %conv5618
  %mul5620 = mul nsw i64 0, %add5619
  %sub5621 = sub nsw i64 %mul5620, 1
  br label %cond.end.5622

cond.end.5622:                                    ; preds = %cond.false.5615, %cond.true.5604
  %cond5623 = phi i64 [ %add5614, %cond.true.5604 ], [ %sub5621, %cond.false.5615 ]
  %1580 = load i64, i64* %nbytes, align 8
  %div5624 = sdiv i64 %cond5623, %1580
  %cmp5625 = icmp slt i64 %conv5595, %div5624
  br i1 %cmp5625, label %cond.true.5786, label %lor.lhs.false.5766

cond.false.5627:                                  ; preds = %cond.true.5588
  %1581 = load i64, i64* %nbytes, align 8
  %cmp5628 = icmp eq i64 %1581, -1
  br i1 %cmp5628, label %cond.true.5630, label %cond.false.5631

cond.true.5630:                                   ; preds = %cond.false.5627
  br i1 false, label %cond.true.5786, label %lor.lhs.false.5766

cond.false.5631:                                  ; preds = %cond.false.5627
  %1582 = load i64, i64* %nbytes, align 8
  %mul5632 = mul nsw i64 0, %1582
  %1583 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5633 = getelementptr inbounds %struct.image, %struct.image* %1583, i32 0, i32 12
  %1584 = load i32, i32* %height5633, align 4
  %conv5634 = sext i32 %1584 to i64
  %add5635 = add nsw i64 %mul5632, %conv5634
  %mul5636 = mul nsw i64 0, %add5635
  %sub5637 = sub nsw i64 %mul5636, 1
  %cmp5638 = icmp slt i64 %sub5637, 0
  br i1 %cmp5638, label %cond.true.5640, label %cond.false.5663

cond.true.5640:                                   ; preds = %cond.false.5631
  %1585 = load i64, i64* %nbytes, align 8
  %mul5641 = mul nsw i64 0, %1585
  %1586 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5642 = getelementptr inbounds %struct.image, %struct.image* %1586, i32 0, i32 12
  %1587 = load i32, i32* %height5642, align 4
  %conv5643 = sext i32 %1587 to i64
  %add5644 = add nsw i64 %mul5641, %conv5643
  %mul5645 = mul nsw i64 0, %add5644
  %add5646 = add nsw i64 %mul5645, 0
  %neg5647 = xor i64 %add5646, -1
  %cmp5648 = icmp eq i64 %neg5647, -1
  %conv5649 = zext i1 %cmp5648 to i32
  %sub5650 = sub nsw i32 0, %conv5649
  %conv5651 = sext i32 %sub5650 to i64
  %1588 = load i64, i64* %nbytes, align 8
  %mul5652 = mul nsw i64 0, %1588
  %1589 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5653 = getelementptr inbounds %struct.image, %struct.image* %1589, i32 0, i32 12
  %1590 = load i32, i32* %height5653, align 4
  %conv5654 = sext i32 %1590 to i64
  %add5655 = add nsw i64 %mul5652, %conv5654
  %mul5656 = mul nsw i64 0, %add5655
  %add5657 = add nsw i64 %mul5656, 1
  %shl5658 = shl i64 %add5657, 62
  %sub5659 = sub nsw i64 %shl5658, 1
  %mul5660 = mul nsw i64 %sub5659, 2
  %add5661 = add nsw i64 %mul5660, 1
  %sub5662 = sub nsw i64 %conv5651, %add5661
  br label %cond.end.5670

cond.false.5663:                                  ; preds = %cond.false.5631
  %1591 = load i64, i64* %nbytes, align 8
  %mul5664 = mul nsw i64 0, %1591
  %1592 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5665 = getelementptr inbounds %struct.image, %struct.image* %1592, i32 0, i32 12
  %1593 = load i32, i32* %height5665, align 4
  %conv5666 = sext i32 %1593 to i64
  %add5667 = add nsw i64 %mul5664, %conv5666
  %mul5668 = mul nsw i64 0, %add5667
  %add5669 = add nsw i64 %mul5668, 0
  br label %cond.end.5670

cond.end.5670:                                    ; preds = %cond.false.5663, %cond.true.5640
  %cond5671 = phi i64 [ %sub5662, %cond.true.5640 ], [ %add5669, %cond.false.5663 ]
  %1594 = load i64, i64* %nbytes, align 8
  %div5672 = sdiv i64 %cond5671, %1594
  %1595 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5673 = getelementptr inbounds %struct.image, %struct.image* %1595, i32 0, i32 12
  %1596 = load i32, i32* %height5673, align 4
  %conv5674 = sext i32 %1596 to i64
  %cmp5675 = icmp slt i64 %div5672, %conv5674
  br i1 %cmp5675, label %cond.true.5786, label %lor.lhs.false.5766

cond.false.5677:                                  ; preds = %lor.lhs.false.5585
  %1597 = load i64, i64* %nbytes, align 8
  %cmp5678 = icmp eq i64 %1597, 0
  br i1 %cmp5678, label %cond.true.5680, label %cond.false.5681

cond.true.5680:                                   ; preds = %cond.false.5677
  br i1 false, label %cond.true.5786, label %lor.lhs.false.5766

cond.false.5681:                                  ; preds = %cond.false.5677
  %1598 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5682 = getelementptr inbounds %struct.image, %struct.image* %1598, i32 0, i32 12
  %1599 = load i32, i32* %height5682, align 4
  %conv5683 = sext i32 %1599 to i64
  %cmp5684 = icmp slt i64 %conv5683, 0
  br i1 %cmp5684, label %cond.true.5686, label %cond.false.5732

cond.true.5686:                                   ; preds = %cond.false.5681
  %1600 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5687 = getelementptr inbounds %struct.image, %struct.image* %1600, i32 0, i32 12
  %1601 = load i32, i32* %height5687, align 4
  %conv5688 = sext i32 %1601 to i64
  %1602 = load i64, i64* %nbytes, align 8
  %mul5689 = mul nsw i64 0, %1602
  %1603 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5690 = getelementptr inbounds %struct.image, %struct.image* %1603, i32 0, i32 12
  %1604 = load i32, i32* %height5690, align 4
  %conv5691 = sext i32 %1604 to i64
  %add5692 = add nsw i64 %mul5689, %conv5691
  %mul5693 = mul nsw i64 0, %add5692
  %sub5694 = sub nsw i64 %mul5693, 1
  %cmp5695 = icmp slt i64 %sub5694, 0
  br i1 %cmp5695, label %cond.true.5697, label %cond.false.5720

cond.true.5697:                                   ; preds = %cond.true.5686
  %1605 = load i64, i64* %nbytes, align 8
  %mul5698 = mul nsw i64 0, %1605
  %1606 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5699 = getelementptr inbounds %struct.image, %struct.image* %1606, i32 0, i32 12
  %1607 = load i32, i32* %height5699, align 4
  %conv5700 = sext i32 %1607 to i64
  %add5701 = add nsw i64 %mul5698, %conv5700
  %mul5702 = mul nsw i64 0, %add5701
  %add5703 = add nsw i64 %mul5702, 0
  %neg5704 = xor i64 %add5703, -1
  %cmp5705 = icmp eq i64 %neg5704, -1
  %conv5706 = zext i1 %cmp5705 to i32
  %sub5707 = sub nsw i32 0, %conv5706
  %conv5708 = sext i32 %sub5707 to i64
  %1608 = load i64, i64* %nbytes, align 8
  %mul5709 = mul nsw i64 0, %1608
  %1609 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5710 = getelementptr inbounds %struct.image, %struct.image* %1609, i32 0, i32 12
  %1610 = load i32, i32* %height5710, align 4
  %conv5711 = sext i32 %1610 to i64
  %add5712 = add nsw i64 %mul5709, %conv5711
  %mul5713 = mul nsw i64 0, %add5712
  %add5714 = add nsw i64 %mul5713, 1
  %shl5715 = shl i64 %add5714, 62
  %sub5716 = sub nsw i64 %shl5715, 1
  %mul5717 = mul nsw i64 %sub5716, 2
  %add5718 = add nsw i64 %mul5717, 1
  %sub5719 = sub nsw i64 %conv5708, %add5718
  br label %cond.end.5727

cond.false.5720:                                  ; preds = %cond.true.5686
  %1611 = load i64, i64* %nbytes, align 8
  %mul5721 = mul nsw i64 0, %1611
  %1612 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5722 = getelementptr inbounds %struct.image, %struct.image* %1612, i32 0, i32 12
  %1613 = load i32, i32* %height5722, align 4
  %conv5723 = sext i32 %1613 to i64
  %add5724 = add nsw i64 %mul5721, %conv5723
  %mul5725 = mul nsw i64 0, %add5724
  %add5726 = add nsw i64 %mul5725, 0
  br label %cond.end.5727

cond.end.5727:                                    ; preds = %cond.false.5720, %cond.true.5697
  %cond5728 = phi i64 [ %sub5719, %cond.true.5697 ], [ %add5726, %cond.false.5720 ]
  %1614 = load i64, i64* %nbytes, align 8
  %div5729 = sdiv i64 %cond5728, %1614
  %cmp5730 = icmp slt i64 %conv5688, %div5729
  br i1 %cmp5730, label %cond.true.5786, label %lor.lhs.false.5766

cond.false.5732:                                  ; preds = %cond.false.5681
  %1615 = load i64, i64* %nbytes, align 8
  %mul5733 = mul nsw i64 0, %1615
  %1616 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5734 = getelementptr inbounds %struct.image, %struct.image* %1616, i32 0, i32 12
  %1617 = load i32, i32* %height5734, align 4
  %conv5735 = sext i32 %1617 to i64
  %add5736 = add nsw i64 %mul5733, %conv5735
  %mul5737 = mul nsw i64 0, %add5736
  %sub5738 = sub nsw i64 %mul5737, 1
  %cmp5739 = icmp slt i64 %sub5738, 0
  br i1 %cmp5739, label %cond.true.5741, label %cond.false.5752

cond.true.5741:                                   ; preds = %cond.false.5732
  %1618 = load i64, i64* %nbytes, align 8
  %mul5742 = mul nsw i64 0, %1618
  %1619 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5743 = getelementptr inbounds %struct.image, %struct.image* %1619, i32 0, i32 12
  %1620 = load i32, i32* %height5743, align 4
  %conv5744 = sext i32 %1620 to i64
  %add5745 = add nsw i64 %mul5742, %conv5744
  %mul5746 = mul nsw i64 0, %add5745
  %add5747 = add nsw i64 %mul5746, 1
  %shl5748 = shl i64 %add5747, 62
  %sub5749 = sub nsw i64 %shl5748, 1
  %mul5750 = mul nsw i64 %sub5749, 2
  %add5751 = add nsw i64 %mul5750, 1
  br label %cond.end.5759

cond.false.5752:                                  ; preds = %cond.false.5732
  %1621 = load i64, i64* %nbytes, align 8
  %mul5753 = mul nsw i64 0, %1621
  %1622 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5754 = getelementptr inbounds %struct.image, %struct.image* %1622, i32 0, i32 12
  %1623 = load i32, i32* %height5754, align 4
  %conv5755 = sext i32 %1623 to i64
  %add5756 = add nsw i64 %mul5753, %conv5755
  %mul5757 = mul nsw i64 0, %add5756
  %sub5758 = sub nsw i64 %mul5757, 1
  br label %cond.end.5759

cond.end.5759:                                    ; preds = %cond.false.5752, %cond.true.5741
  %cond5760 = phi i64 [ %add5751, %cond.true.5741 ], [ %sub5758, %cond.false.5752 ]
  %1624 = load i64, i64* %nbytes, align 8
  %div5761 = sdiv i64 %cond5760, %1624
  %1625 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5762 = getelementptr inbounds %struct.image, %struct.image* %1625, i32 0, i32 12
  %1626 = load i32, i32* %height5762, align 4
  %conv5763 = sext i32 %1626 to i64
  %cmp5764 = icmp slt i64 %div5761, %conv5763
  br i1 %cmp5764, label %cond.true.5786, label %lor.lhs.false.5766

lor.lhs.false.5766:                               ; preds = %cond.end.5759, %cond.end.5727, %cond.true.5680, %cond.end.5670, %cond.true.5630, %cond.end.5622
  %1627 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5767 = getelementptr inbounds %struct.image, %struct.image* %1627, i32 0, i32 12
  %1628 = load i32, i32* %height5767, align 4
  %conv5768 = sext i32 %1628 to i64
  %1629 = load i64, i64* %nbytes, align 8
  %mul5769 = mul nsw i64 %conv5768, %1629
  %mul5770 = mul nsw i64 0, %mul5769
  %sub5771 = sub nsw i64 %mul5770, 1
  %cmp5772 = icmp slt i64 %sub5771, 0
  br i1 %cmp5772, label %land.lhs.true.5774, label %lor.lhs.false.5780

land.lhs.true.5774:                               ; preds = %lor.lhs.false.5766
  %1630 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5775 = getelementptr inbounds %struct.image, %struct.image* %1630, i32 0, i32 12
  %1631 = load i32, i32* %height5775, align 4
  %conv5776 = sext i32 %1631 to i64
  %1632 = load i64, i64* %nbytes, align 8
  %mul5777 = mul nsw i64 %conv5776, %1632
  %cmp5778 = icmp slt i64 %mul5777, -9223372036854775808
  br i1 %cmp5778, label %cond.true.5786, label %lor.lhs.false.5780

lor.lhs.false.5780:                               ; preds = %land.lhs.true.5774, %lor.lhs.false.5766
  %1633 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5781 = getelementptr inbounds %struct.image, %struct.image* %1633, i32 0, i32 12
  %1634 = load i32, i32* %height5781, align 4
  %conv5782 = sext i32 %1634 to i64
  %1635 = load i64, i64* %nbytes, align 8
  %mul5783 = mul nsw i64 %conv5782, %1635
  %cmp5784 = icmp slt i64 9223372036854775807, %mul5783
  br i1 %cmp5784, label %cond.true.5786, label %cond.false.5804

cond.true.5786:                                   ; preds = %lor.lhs.false.5780, %land.lhs.true.5774, %cond.end.5759, %cond.end.5727, %cond.true.5680, %cond.end.5670, %cond.true.5630, %cond.end.5622, %land.lhs.true.5580, %land.lhs.true.5574
  %1636 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5787 = getelementptr inbounds %struct.image, %struct.image* %1636, i32 0, i32 12
  %1637 = load i32, i32* %height5787, align 4
  %conv5788 = sext i32 %1637 to i64
  %1638 = load i64, i64* %nbytes, align 8
  %mul5789 = mul i64 %conv5788, %1638
  %cmp5790 = icmp ule i64 %mul5789, 9223372036854775807
  br i1 %cmp5790, label %cond.true.5792, label %cond.false.5796

cond.true.5792:                                   ; preds = %cond.true.5786
  %1639 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5793 = getelementptr inbounds %struct.image, %struct.image* %1639, i32 0, i32 12
  %1640 = load i32, i32* %height5793, align 4
  %conv5794 = sext i32 %1640 to i64
  %1641 = load i64, i64* %nbytes, align 8
  %mul5795 = mul i64 %conv5794, %1641
  br label %cond.end.5802

cond.false.5796:                                  ; preds = %cond.true.5786
  %1642 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5797 = getelementptr inbounds %struct.image, %struct.image* %1642, i32 0, i32 12
  %1643 = load i32, i32* %height5797, align 4
  %conv5798 = sext i32 %1643 to i64
  %1644 = load i64, i64* %nbytes, align 8
  %mul5799 = mul i64 %conv5798, %1644
  %sub5800 = sub i64 %mul5799, -9223372036854775808
  %add5801 = add nsw i64 %sub5800, -9223372036854775808
  br label %cond.end.5802

cond.end.5802:                                    ; preds = %cond.false.5796, %cond.true.5792
  %cond5803 = phi i64 [ %mul5795, %cond.true.5792 ], [ %add5801, %cond.false.5796 ]
  store i64 %cond5803, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.5804:                                  ; preds = %lor.lhs.false.5780
  %1645 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5805 = getelementptr inbounds %struct.image, %struct.image* %1645, i32 0, i32 12
  %1646 = load i32, i32* %height5805, align 4
  %conv5806 = sext i32 %1646 to i64
  %1647 = load i64, i64* %nbytes, align 8
  %mul5807 = mul i64 %conv5806, %1647
  %cmp5808 = icmp ule i64 %mul5807, 9223372036854775807
  br i1 %cmp5808, label %cond.true.5810, label %cond.false.5814

cond.true.5810:                                   ; preds = %cond.false.5804
  %1648 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5811 = getelementptr inbounds %struct.image, %struct.image* %1648, i32 0, i32 12
  %1649 = load i32, i32* %height5811, align 4
  %conv5812 = sext i32 %1649 to i64
  %1650 = load i64, i64* %nbytes, align 8
  %mul5813 = mul i64 %conv5812, %1650
  br label %cond.end.5820

cond.false.5814:                                  ; preds = %cond.false.5804
  %1651 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5815 = getelementptr inbounds %struct.image, %struct.image* %1651, i32 0, i32 12
  %1652 = load i32, i32* %height5815, align 4
  %conv5816 = sext i32 %1652 to i64
  %1653 = load i64, i64* %nbytes, align 8
  %mul5817 = mul i64 %conv5816, %1653
  %sub5818 = sub i64 %mul5817, -9223372036854775808
  %add5819 = add nsw i64 %sub5818, -9223372036854775808
  br label %cond.end.5820

cond.end.5820:                                    ; preds = %cond.false.5814, %cond.true.5810
  %cond5821 = phi i64 [ %mul5813, %cond.true.5810 ], [ %add5819, %cond.false.5814 ]
  store i64 %cond5821, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

cond.false.5822:                                  ; preds = %cond.false.5525
  %1654 = load i64, i64* %nbytes, align 8
  %mul5823 = mul nsw i64 0, %1654
  %1655 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5824 = getelementptr inbounds %struct.image, %struct.image* %1655, i32 0, i32 12
  %1656 = load i32, i32* %height5824, align 4
  %conv5825 = sext i32 %1656 to i64
  %add5826 = add nsw i64 %mul5823, %conv5825
  %mul5827 = mul nsw i64 0, %add5826
  %sub5828 = sub nsw i64 %mul5827, 1
  %cmp5829 = icmp slt i64 %sub5828, 0
  br i1 %cmp5829, label %cond.true.5831, label %cond.false.5854

cond.true.5831:                                   ; preds = %cond.false.5822
  %1657 = load i64, i64* %nbytes, align 8
  %mul5832 = mul nsw i64 0, %1657
  %1658 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5833 = getelementptr inbounds %struct.image, %struct.image* %1658, i32 0, i32 12
  %1659 = load i32, i32* %height5833, align 4
  %conv5834 = sext i32 %1659 to i64
  %add5835 = add nsw i64 %mul5832, %conv5834
  %mul5836 = mul nsw i64 0, %add5835
  %add5837 = add nsw i64 %mul5836, 0
  %neg5838 = xor i64 %add5837, -1
  %cmp5839 = icmp eq i64 %neg5838, -1
  %conv5840 = zext i1 %cmp5839 to i32
  %sub5841 = sub nsw i32 0, %conv5840
  %conv5842 = sext i32 %sub5841 to i64
  %1660 = load i64, i64* %nbytes, align 8
  %mul5843 = mul nsw i64 0, %1660
  %1661 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5844 = getelementptr inbounds %struct.image, %struct.image* %1661, i32 0, i32 12
  %1662 = load i32, i32* %height5844, align 4
  %conv5845 = sext i32 %1662 to i64
  %add5846 = add nsw i64 %mul5843, %conv5845
  %mul5847 = mul nsw i64 0, %add5846
  %add5848 = add nsw i64 %mul5847, 1
  %shl5849 = shl i64 %add5848, 62
  %sub5850 = sub nsw i64 %shl5849, 1
  %mul5851 = mul nsw i64 %sub5850, 2
  %add5852 = add nsw i64 %mul5851, 1
  %sub5853 = sub nsw i64 %conv5842, %add5852
  br label %cond.end.5861

cond.false.5854:                                  ; preds = %cond.false.5822
  %1663 = load i64, i64* %nbytes, align 8
  %mul5855 = mul nsw i64 0, %1663
  %1664 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5856 = getelementptr inbounds %struct.image, %struct.image* %1664, i32 0, i32 12
  %1665 = load i32, i32* %height5856, align 4
  %conv5857 = sext i32 %1665 to i64
  %add5858 = add nsw i64 %mul5855, %conv5857
  %mul5859 = mul nsw i64 0, %add5858
  %add5860 = add nsw i64 %mul5859, 0
  br label %cond.end.5861

cond.end.5861:                                    ; preds = %cond.false.5854, %cond.true.5831
  %cond5862 = phi i64 [ %sub5853, %cond.true.5831 ], [ %add5860, %cond.false.5854 ]
  %cmp5863 = icmp eq i64 %cond5862, 0
  br i1 %cmp5863, label %land.lhs.true.5865, label %lor.lhs.false.5879

land.lhs.true.5865:                               ; preds = %cond.end.5861
  %1666 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5866 = getelementptr inbounds %struct.image, %struct.image* %1666, i32 0, i32 12
  %1667 = load i32, i32* %height5866, align 4
  %cmp5867 = icmp slt i32 %1667, 0
  br i1 %cmp5867, label %land.lhs.true.5869, label %lor.lhs.false.5872

land.lhs.true.5869:                               ; preds = %land.lhs.true.5865
  %1668 = load i64, i64* %nbytes, align 8
  %cmp5870 = icmp slt i64 0, %1668
  br i1 %cmp5870, label %cond.true.6078, label %lor.lhs.false.5872

lor.lhs.false.5872:                               ; preds = %land.lhs.true.5869, %land.lhs.true.5865
  %1669 = load i64, i64* %nbytes, align 8
  %cmp5873 = icmp slt i64 %1669, 0
  br i1 %cmp5873, label %land.lhs.true.5875, label %lor.lhs.false.5879

land.lhs.true.5875:                               ; preds = %lor.lhs.false.5872
  %1670 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5876 = getelementptr inbounds %struct.image, %struct.image* %1670, i32 0, i32 12
  %1671 = load i32, i32* %height5876, align 4
  %cmp5877 = icmp slt i32 0, %1671
  br i1 %cmp5877, label %cond.true.6078, label %lor.lhs.false.5879

lor.lhs.false.5879:                               ; preds = %land.lhs.true.5875, %lor.lhs.false.5872, %cond.end.5861
  %1672 = load i64, i64* %nbytes, align 8
  %cmp5880 = icmp slt i64 %1672, 0
  br i1 %cmp5880, label %cond.true.5882, label %cond.false.5970

cond.true.5882:                                   ; preds = %lor.lhs.false.5879
  %1673 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5883 = getelementptr inbounds %struct.image, %struct.image* %1673, i32 0, i32 12
  %1674 = load i32, i32* %height5883, align 4
  %cmp5884 = icmp slt i32 %1674, 0
  br i1 %cmp5884, label %cond.true.5886, label %cond.false.5920

cond.true.5886:                                   ; preds = %cond.true.5882
  %1675 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5887 = getelementptr inbounds %struct.image, %struct.image* %1675, i32 0, i32 12
  %1676 = load i32, i32* %height5887, align 4
  %conv5888 = sext i32 %1676 to i64
  %1677 = load i64, i64* %nbytes, align 8
  %mul5889 = mul nsw i64 0, %1677
  %1678 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5890 = getelementptr inbounds %struct.image, %struct.image* %1678, i32 0, i32 12
  %1679 = load i32, i32* %height5890, align 4
  %conv5891 = sext i32 %1679 to i64
  %add5892 = add nsw i64 %mul5889, %conv5891
  %mul5893 = mul nsw i64 0, %add5892
  %sub5894 = sub nsw i64 %mul5893, 1
  %cmp5895 = icmp slt i64 %sub5894, 0
  br i1 %cmp5895, label %cond.true.5897, label %cond.false.5908

cond.true.5897:                                   ; preds = %cond.true.5886
  %1680 = load i64, i64* %nbytes, align 8
  %mul5898 = mul nsw i64 0, %1680
  %1681 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5899 = getelementptr inbounds %struct.image, %struct.image* %1681, i32 0, i32 12
  %1682 = load i32, i32* %height5899, align 4
  %conv5900 = sext i32 %1682 to i64
  %add5901 = add nsw i64 %mul5898, %conv5900
  %mul5902 = mul nsw i64 0, %add5901
  %add5903 = add nsw i64 %mul5902, 1
  %shl5904 = shl i64 %add5903, 62
  %sub5905 = sub nsw i64 %shl5904, 1
  %mul5906 = mul nsw i64 %sub5905, 2
  %add5907 = add nsw i64 %mul5906, 1
  br label %cond.end.5915

cond.false.5908:                                  ; preds = %cond.true.5886
  %1683 = load i64, i64* %nbytes, align 8
  %mul5909 = mul nsw i64 0, %1683
  %1684 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5910 = getelementptr inbounds %struct.image, %struct.image* %1684, i32 0, i32 12
  %1685 = load i32, i32* %height5910, align 4
  %conv5911 = sext i32 %1685 to i64
  %add5912 = add nsw i64 %mul5909, %conv5911
  %mul5913 = mul nsw i64 0, %add5912
  %sub5914 = sub nsw i64 %mul5913, 1
  br label %cond.end.5915

cond.end.5915:                                    ; preds = %cond.false.5908, %cond.true.5897
  %cond5916 = phi i64 [ %add5907, %cond.true.5897 ], [ %sub5914, %cond.false.5908 ]
  %1686 = load i64, i64* %nbytes, align 8
  %div5917 = sdiv i64 %cond5916, %1686
  %cmp5918 = icmp slt i64 %conv5888, %div5917
  br i1 %cmp5918, label %cond.true.6078, label %lor.lhs.false.6058

cond.false.5920:                                  ; preds = %cond.true.5882
  %1687 = load i64, i64* %nbytes, align 8
  %cmp5921 = icmp eq i64 %1687, -1
  br i1 %cmp5921, label %cond.true.5923, label %cond.false.5924

cond.true.5923:                                   ; preds = %cond.false.5920
  br i1 false, label %cond.true.6078, label %lor.lhs.false.6058

cond.false.5924:                                  ; preds = %cond.false.5920
  %1688 = load i64, i64* %nbytes, align 8
  %mul5925 = mul nsw i64 0, %1688
  %1689 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5926 = getelementptr inbounds %struct.image, %struct.image* %1689, i32 0, i32 12
  %1690 = load i32, i32* %height5926, align 4
  %conv5927 = sext i32 %1690 to i64
  %add5928 = add nsw i64 %mul5925, %conv5927
  %mul5929 = mul nsw i64 0, %add5928
  %sub5930 = sub nsw i64 %mul5929, 1
  %cmp5931 = icmp slt i64 %sub5930, 0
  br i1 %cmp5931, label %cond.true.5933, label %cond.false.5956

cond.true.5933:                                   ; preds = %cond.false.5924
  %1691 = load i64, i64* %nbytes, align 8
  %mul5934 = mul nsw i64 0, %1691
  %1692 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5935 = getelementptr inbounds %struct.image, %struct.image* %1692, i32 0, i32 12
  %1693 = load i32, i32* %height5935, align 4
  %conv5936 = sext i32 %1693 to i64
  %add5937 = add nsw i64 %mul5934, %conv5936
  %mul5938 = mul nsw i64 0, %add5937
  %add5939 = add nsw i64 %mul5938, 0
  %neg5940 = xor i64 %add5939, -1
  %cmp5941 = icmp eq i64 %neg5940, -1
  %conv5942 = zext i1 %cmp5941 to i32
  %sub5943 = sub nsw i32 0, %conv5942
  %conv5944 = sext i32 %sub5943 to i64
  %1694 = load i64, i64* %nbytes, align 8
  %mul5945 = mul nsw i64 0, %1694
  %1695 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5946 = getelementptr inbounds %struct.image, %struct.image* %1695, i32 0, i32 12
  %1696 = load i32, i32* %height5946, align 4
  %conv5947 = sext i32 %1696 to i64
  %add5948 = add nsw i64 %mul5945, %conv5947
  %mul5949 = mul nsw i64 0, %add5948
  %add5950 = add nsw i64 %mul5949, 1
  %shl5951 = shl i64 %add5950, 62
  %sub5952 = sub nsw i64 %shl5951, 1
  %mul5953 = mul nsw i64 %sub5952, 2
  %add5954 = add nsw i64 %mul5953, 1
  %sub5955 = sub nsw i64 %conv5944, %add5954
  br label %cond.end.5963

cond.false.5956:                                  ; preds = %cond.false.5924
  %1697 = load i64, i64* %nbytes, align 8
  %mul5957 = mul nsw i64 0, %1697
  %1698 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5958 = getelementptr inbounds %struct.image, %struct.image* %1698, i32 0, i32 12
  %1699 = load i32, i32* %height5958, align 4
  %conv5959 = sext i32 %1699 to i64
  %add5960 = add nsw i64 %mul5957, %conv5959
  %mul5961 = mul nsw i64 0, %add5960
  %add5962 = add nsw i64 %mul5961, 0
  br label %cond.end.5963

cond.end.5963:                                    ; preds = %cond.false.5956, %cond.true.5933
  %cond5964 = phi i64 [ %sub5955, %cond.true.5933 ], [ %add5962, %cond.false.5956 ]
  %1700 = load i64, i64* %nbytes, align 8
  %div5965 = sdiv i64 %cond5964, %1700
  %1701 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5966 = getelementptr inbounds %struct.image, %struct.image* %1701, i32 0, i32 12
  %1702 = load i32, i32* %height5966, align 4
  %conv5967 = sext i32 %1702 to i64
  %cmp5968 = icmp slt i64 %div5965, %conv5967
  br i1 %cmp5968, label %cond.true.6078, label %lor.lhs.false.6058

cond.false.5970:                                  ; preds = %lor.lhs.false.5879
  %1703 = load i64, i64* %nbytes, align 8
  %cmp5971 = icmp eq i64 %1703, 0
  br i1 %cmp5971, label %cond.true.5973, label %cond.false.5974

cond.true.5973:                                   ; preds = %cond.false.5970
  br i1 false, label %cond.true.6078, label %lor.lhs.false.6058

cond.false.5974:                                  ; preds = %cond.false.5970
  %1704 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5975 = getelementptr inbounds %struct.image, %struct.image* %1704, i32 0, i32 12
  %1705 = load i32, i32* %height5975, align 4
  %cmp5976 = icmp slt i32 %1705, 0
  br i1 %cmp5976, label %cond.true.5978, label %cond.false.6024

cond.true.5978:                                   ; preds = %cond.false.5974
  %1706 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5979 = getelementptr inbounds %struct.image, %struct.image* %1706, i32 0, i32 12
  %1707 = load i32, i32* %height5979, align 4
  %conv5980 = sext i32 %1707 to i64
  %1708 = load i64, i64* %nbytes, align 8
  %mul5981 = mul nsw i64 0, %1708
  %1709 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5982 = getelementptr inbounds %struct.image, %struct.image* %1709, i32 0, i32 12
  %1710 = load i32, i32* %height5982, align 4
  %conv5983 = sext i32 %1710 to i64
  %add5984 = add nsw i64 %mul5981, %conv5983
  %mul5985 = mul nsw i64 0, %add5984
  %sub5986 = sub nsw i64 %mul5985, 1
  %cmp5987 = icmp slt i64 %sub5986, 0
  br i1 %cmp5987, label %cond.true.5989, label %cond.false.6012

cond.true.5989:                                   ; preds = %cond.true.5978
  %1711 = load i64, i64* %nbytes, align 8
  %mul5990 = mul nsw i64 0, %1711
  %1712 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5991 = getelementptr inbounds %struct.image, %struct.image* %1712, i32 0, i32 12
  %1713 = load i32, i32* %height5991, align 4
  %conv5992 = sext i32 %1713 to i64
  %add5993 = add nsw i64 %mul5990, %conv5992
  %mul5994 = mul nsw i64 0, %add5993
  %add5995 = add nsw i64 %mul5994, 0
  %neg5996 = xor i64 %add5995, -1
  %cmp5997 = icmp eq i64 %neg5996, -1
  %conv5998 = zext i1 %cmp5997 to i32
  %sub5999 = sub nsw i32 0, %conv5998
  %conv6000 = sext i32 %sub5999 to i64
  %1714 = load i64, i64* %nbytes, align 8
  %mul6001 = mul nsw i64 0, %1714
  %1715 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6002 = getelementptr inbounds %struct.image, %struct.image* %1715, i32 0, i32 12
  %1716 = load i32, i32* %height6002, align 4
  %conv6003 = sext i32 %1716 to i64
  %add6004 = add nsw i64 %mul6001, %conv6003
  %mul6005 = mul nsw i64 0, %add6004
  %add6006 = add nsw i64 %mul6005, 1
  %shl6007 = shl i64 %add6006, 62
  %sub6008 = sub nsw i64 %shl6007, 1
  %mul6009 = mul nsw i64 %sub6008, 2
  %add6010 = add nsw i64 %mul6009, 1
  %sub6011 = sub nsw i64 %conv6000, %add6010
  br label %cond.end.6019

cond.false.6012:                                  ; preds = %cond.true.5978
  %1717 = load i64, i64* %nbytes, align 8
  %mul6013 = mul nsw i64 0, %1717
  %1718 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6014 = getelementptr inbounds %struct.image, %struct.image* %1718, i32 0, i32 12
  %1719 = load i32, i32* %height6014, align 4
  %conv6015 = sext i32 %1719 to i64
  %add6016 = add nsw i64 %mul6013, %conv6015
  %mul6017 = mul nsw i64 0, %add6016
  %add6018 = add nsw i64 %mul6017, 0
  br label %cond.end.6019

cond.end.6019:                                    ; preds = %cond.false.6012, %cond.true.5989
  %cond6020 = phi i64 [ %sub6011, %cond.true.5989 ], [ %add6018, %cond.false.6012 ]
  %1720 = load i64, i64* %nbytes, align 8
  %div6021 = sdiv i64 %cond6020, %1720
  %cmp6022 = icmp slt i64 %conv5980, %div6021
  br i1 %cmp6022, label %cond.true.6078, label %lor.lhs.false.6058

cond.false.6024:                                  ; preds = %cond.false.5974
  %1721 = load i64, i64* %nbytes, align 8
  %mul6025 = mul nsw i64 0, %1721
  %1722 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6026 = getelementptr inbounds %struct.image, %struct.image* %1722, i32 0, i32 12
  %1723 = load i32, i32* %height6026, align 4
  %conv6027 = sext i32 %1723 to i64
  %add6028 = add nsw i64 %mul6025, %conv6027
  %mul6029 = mul nsw i64 0, %add6028
  %sub6030 = sub nsw i64 %mul6029, 1
  %cmp6031 = icmp slt i64 %sub6030, 0
  br i1 %cmp6031, label %cond.true.6033, label %cond.false.6044

cond.true.6033:                                   ; preds = %cond.false.6024
  %1724 = load i64, i64* %nbytes, align 8
  %mul6034 = mul nsw i64 0, %1724
  %1725 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6035 = getelementptr inbounds %struct.image, %struct.image* %1725, i32 0, i32 12
  %1726 = load i32, i32* %height6035, align 4
  %conv6036 = sext i32 %1726 to i64
  %add6037 = add nsw i64 %mul6034, %conv6036
  %mul6038 = mul nsw i64 0, %add6037
  %add6039 = add nsw i64 %mul6038, 1
  %shl6040 = shl i64 %add6039, 62
  %sub6041 = sub nsw i64 %shl6040, 1
  %mul6042 = mul nsw i64 %sub6041, 2
  %add6043 = add nsw i64 %mul6042, 1
  br label %cond.end.6051

cond.false.6044:                                  ; preds = %cond.false.6024
  %1727 = load i64, i64* %nbytes, align 8
  %mul6045 = mul nsw i64 0, %1727
  %1728 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6046 = getelementptr inbounds %struct.image, %struct.image* %1728, i32 0, i32 12
  %1729 = load i32, i32* %height6046, align 4
  %conv6047 = sext i32 %1729 to i64
  %add6048 = add nsw i64 %mul6045, %conv6047
  %mul6049 = mul nsw i64 0, %add6048
  %sub6050 = sub nsw i64 %mul6049, 1
  br label %cond.end.6051

cond.end.6051:                                    ; preds = %cond.false.6044, %cond.true.6033
  %cond6052 = phi i64 [ %add6043, %cond.true.6033 ], [ %sub6050, %cond.false.6044 ]
  %1730 = load i64, i64* %nbytes, align 8
  %div6053 = sdiv i64 %cond6052, %1730
  %1731 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6054 = getelementptr inbounds %struct.image, %struct.image* %1731, i32 0, i32 12
  %1732 = load i32, i32* %height6054, align 4
  %conv6055 = sext i32 %1732 to i64
  %cmp6056 = icmp slt i64 %div6053, %conv6055
  br i1 %cmp6056, label %cond.true.6078, label %lor.lhs.false.6058

lor.lhs.false.6058:                               ; preds = %cond.end.6051, %cond.end.6019, %cond.true.5973, %cond.end.5963, %cond.true.5923, %cond.end.5915
  %1733 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6059 = getelementptr inbounds %struct.image, %struct.image* %1733, i32 0, i32 12
  %1734 = load i32, i32* %height6059, align 4
  %conv6060 = sext i32 %1734 to i64
  %1735 = load i64, i64* %nbytes, align 8
  %mul6061 = mul nsw i64 %conv6060, %1735
  %mul6062 = mul nsw i64 0, %mul6061
  %sub6063 = sub nsw i64 %mul6062, 1
  %cmp6064 = icmp slt i64 %sub6063, 0
  br i1 %cmp6064, label %land.lhs.true.6066, label %lor.lhs.false.6072

land.lhs.true.6066:                               ; preds = %lor.lhs.false.6058
  %1736 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6067 = getelementptr inbounds %struct.image, %struct.image* %1736, i32 0, i32 12
  %1737 = load i32, i32* %height6067, align 4
  %conv6068 = sext i32 %1737 to i64
  %1738 = load i64, i64* %nbytes, align 8
  %mul6069 = mul nsw i64 %conv6068, %1738
  %cmp6070 = icmp slt i64 %mul6069, -9223372036854775808
  br i1 %cmp6070, label %cond.true.6078, label %lor.lhs.false.6072

lor.lhs.false.6072:                               ; preds = %land.lhs.true.6066, %lor.lhs.false.6058
  %1739 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6073 = getelementptr inbounds %struct.image, %struct.image* %1739, i32 0, i32 12
  %1740 = load i32, i32* %height6073, align 4
  %conv6074 = sext i32 %1740 to i64
  %1741 = load i64, i64* %nbytes, align 8
  %mul6075 = mul nsw i64 %conv6074, %1741
  %cmp6076 = icmp slt i64 9223372036854775807, %mul6075
  br i1 %cmp6076, label %cond.true.6078, label %cond.false.6096

cond.true.6078:                                   ; preds = %lor.lhs.false.6072, %land.lhs.true.6066, %cond.end.6051, %cond.end.6019, %cond.true.5973, %cond.end.5963, %cond.true.5923, %cond.end.5915, %land.lhs.true.5875, %land.lhs.true.5869
  %1742 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6079 = getelementptr inbounds %struct.image, %struct.image* %1742, i32 0, i32 12
  %1743 = load i32, i32* %height6079, align 4
  %conv6080 = sext i32 %1743 to i64
  %1744 = load i64, i64* %nbytes, align 8
  %mul6081 = mul i64 %conv6080, %1744
  %cmp6082 = icmp ule i64 %mul6081, 9223372036854775807
  br i1 %cmp6082, label %cond.true.6084, label %cond.false.6088

cond.true.6084:                                   ; preds = %cond.true.6078
  %1745 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6085 = getelementptr inbounds %struct.image, %struct.image* %1745, i32 0, i32 12
  %1746 = load i32, i32* %height6085, align 4
  %conv6086 = sext i32 %1746 to i64
  %1747 = load i64, i64* %nbytes, align 8
  %mul6087 = mul i64 %conv6086, %1747
  br label %cond.end.6094

cond.false.6088:                                  ; preds = %cond.true.6078
  %1748 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6089 = getelementptr inbounds %struct.image, %struct.image* %1748, i32 0, i32 12
  %1749 = load i32, i32* %height6089, align 4
  %conv6090 = sext i32 %1749 to i64
  %1750 = load i64, i64* %nbytes, align 8
  %mul6091 = mul i64 %conv6090, %1750
  %sub6092 = sub i64 %mul6091, -9223372036854775808
  %add6093 = add nsw i64 %sub6092, -9223372036854775808
  br label %cond.end.6094

cond.end.6094:                                    ; preds = %cond.false.6088, %cond.true.6084
  %cond6095 = phi i64 [ %mul6087, %cond.true.6084 ], [ %add6093, %cond.false.6088 ]
  store i64 %cond6095, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.6114

cond.false.6096:                                  ; preds = %lor.lhs.false.6072
  %1751 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6097 = getelementptr inbounds %struct.image, %struct.image* %1751, i32 0, i32 12
  %1752 = load i32, i32* %height6097, align 4
  %conv6098 = sext i32 %1752 to i64
  %1753 = load i64, i64* %nbytes, align 8
  %mul6099 = mul i64 %conv6098, %1753
  %cmp6100 = icmp ule i64 %mul6099, 9223372036854775807
  br i1 %cmp6100, label %cond.true.6102, label %cond.false.6106

cond.true.6102:                                   ; preds = %cond.false.6096
  %1754 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6103 = getelementptr inbounds %struct.image, %struct.image* %1754, i32 0, i32 12
  %1755 = load i32, i32* %height6103, align 4
  %conv6104 = sext i32 %1755 to i64
  %1756 = load i64, i64* %nbytes, align 8
  %mul6105 = mul i64 %conv6104, %1756
  br label %cond.end.6112

cond.false.6106:                                  ; preds = %cond.false.6096
  %1757 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6107 = getelementptr inbounds %struct.image, %struct.image* %1757, i32 0, i32 12
  %1758 = load i32, i32* %height6107, align 4
  %conv6108 = sext i32 %1758 to i64
  %1759 = load i64, i64* %nbytes, align 8
  %mul6109 = mul i64 %conv6108, %1759
  %sub6110 = sub i64 %mul6109, -9223372036854775808
  %add6111 = add nsw i64 %sub6110, -9223372036854775808
  br label %cond.end.6112

cond.end.6112:                                    ; preds = %cond.false.6106, %cond.true.6102
  %cond6113 = phi i64 [ %mul6105, %cond.true.6102 ], [ %add6111, %cond.false.6106 ]
  store i64 %cond6113, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.6114

lor.lhs.false.6114:                               ; preds = %cond.end.6112, %cond.end.6094, %cond.end.5820, %cond.end.5802, %cond.end.5523, %cond.end.5505, %cond.end.5231, %cond.end.5213, %cond.end.4932, %cond.end.4913, %cond.end.4638, %cond.end.4619, %cond.end.4340, %cond.end.4308, %cond.end.4020, %cond.end.3988, %cond.end.3608, %cond.end.3576, %cond.end.3288, %cond.end.3256
  %1760 = load i64, i64* %nbytes, align 8
  %cmp6115 = icmp ult i64 -1, %1760
  br i1 %cmp6115, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.6114, %cond.end.6112, %cond.end.6094, %cond.end.5820, %cond.end.5802, %cond.end.5523, %cond.end.5505, %cond.end.5231, %cond.end.5213, %cond.end.4932, %cond.end.4913, %cond.end.4638, %cond.end.4619, %cond.end.4340, %cond.end.4308, %cond.end.4020, %cond.end.3988, %cond.end.3608, %cond.end.3576, %cond.end.3288, %cond.end.3256, %cond.end.2878, %cond.end.2860, %cond.end.2599, %cond.end.2581, %cond.end.2315, %cond.end.2297, %cond.end.2036, %cond.end.2018, %cond.end.1750, %cond.end.1734, %cond.end.1475, %cond.end.1459, %cond.end.1226, %cond.end.1200, %cond.end.931, %cond.end.905, %cond.end.604, %cond.end.578, %cond.end.309, %cond.end.283
  call void @memory_full(i64 -1) #11
  unreachable

if.end:                                           ; preds = %lor.lhs.false.6114
  %1761 = load i64, i64* %nbytes, align 8
  %call = call noalias i8* @xmalloc(i64 %1761)
  %1762 = bitcast i8* %call to %struct.XColor*
  store %struct.XColor* %1762, %struct.XColor** %colors, align 8
  %1763 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1764 = load %struct.image*, %struct.image** %img.addr, align 8
  %call6117 = call %struct._XImage* @image_get_x_image(%struct.frame* %1763, %struct.image* %1764, i1 zeroext false)
  store %struct._XImage* %call6117, %struct._XImage** %ximg, align 8
  %1765 = load %struct.XColor*, %struct.XColor** %colors, align 8
  store %struct.XColor* %1765, %struct.XColor** %p, align 8
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.6131, %if.end
  %1766 = load i32, i32* %y, align 4
  %1767 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6118 = getelementptr inbounds %struct.image, %struct.image* %1767, i32 0, i32 12
  %1768 = load i32, i32* %height6118, align 4
  %cmp6119 = icmp slt i32 %1766, %1768
  br i1 %cmp6119, label %for.body, label %for.end.6133

for.body:                                         ; preds = %for.cond
  %1769 = load %struct.XColor*, %struct.XColor** %p, align 8
  store %struct.XColor* %1769, %struct.XColor** %row, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond.6121

for.cond.6121:                                    ; preds = %for.inc, %for.body
  %1770 = load i32, i32* %x, align 4
  %1771 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6122 = getelementptr inbounds %struct.image, %struct.image* %1771, i32 0, i32 11
  %1772 = load i32, i32* %width6122, align 4
  %cmp6123 = icmp slt i32 %1770, %1772
  br i1 %cmp6123, label %for.body.6125, label %for.end

for.body.6125:                                    ; preds = %for.cond.6121
  %1773 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f6126 = getelementptr inbounds %struct._XImage, %struct._XImage* %1773, i32 0, i32 16
  %get_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f6126, i32 0, i32 2
  %1774 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel, align 8
  %1775 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %1776 = load i32, i32* %x, align 4
  %1777 = load i32, i32* %y, align 4
  %call6127 = call i64 %1774(%struct._XImage* %1775, i32 %1776, i32 %1777)
  %1778 = load %struct.XColor*, %struct.XColor** %p, align 8
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %1778, i32 0, i32 0
  store i64 %call6127, i64* %pixel, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.6125
  %1779 = load i32, i32* %x, align 4
  %inc = add nsw i32 %1779, 1
  store i32 %inc, i32* %x, align 4
  %1780 = load %struct.XColor*, %struct.XColor** %p, align 8
  %incdec.ptr = getelementptr inbounds %struct.XColor, %struct.XColor* %1780, i32 1
  store %struct.XColor* %incdec.ptr, %struct.XColor** %p, align 8
  br label %for.cond.6121

for.end:                                          ; preds = %for.cond.6121
  %1781 = load i8, i8* %rgb_p.addr, align 1
  %tobool = trunc i8 %1781 to i1
  br i1 %tobool, label %if.then.6128, label %if.end.6130

if.then.6128:                                     ; preds = %for.end
  %1782 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1783 = load %struct.XColor*, %struct.XColor** %row, align 8
  %1784 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6129 = getelementptr inbounds %struct.image, %struct.image* %1784, i32 0, i32 11
  %1785 = load i32, i32* %width6129, align 4
  call void @x_query_colors(%struct.frame* %1782, %struct.XColor* %1783, i32 %1785)
  br label %if.end.6130

if.end.6130:                                      ; preds = %if.then.6128, %for.end
  br label %for.inc.6131

for.inc.6131:                                     ; preds = %if.end.6130
  %1786 = load i32, i32* %y, align 4
  %inc6132 = add nsw i32 %1786, 1
  store i32 %inc6132, i32* %y, align 4
  br label %for.cond

for.end.6133:                                     ; preds = %for.cond
  %1787 = load %struct.image*, %struct.image** %img.addr, align 8
  %1788 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @image_unget_x_image(%struct.image* %1787, i1 zeroext false, %struct._XImage* %1788)
  %1789 = load %struct.XColor*, %struct.XColor** %colors, align 8
  ret %struct.XColor* %1789
}

; Function Attrs: nounwind uwtable
define internal void @x_from_xcolors(%struct.frame* %f, %struct.image* %img, %struct.XColor* %colors) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %colors.addr = alloca %struct.XColor*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %oimg = alloca %struct._XImage*, align 8
  %p = alloca %struct.XColor*, align 8
  %pixel = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store %struct.XColor* %colors, %struct.XColor** %colors.addr, align 8
  store %struct._XImage* null, %struct._XImage** %oimg, align 8
  call void @init_color_table()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image_1(%struct.frame* %0, %struct.image* %1, i32 5)
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 11
  %5 = load i32, i32* %width, align 4
  %6 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %6, i32 0, i32 12
  %7 = load i32, i32* %height, align 4
  %call = call zeroext i1 @image_create_x_image_and_pixmap(%struct.frame* %2, %struct.image* %3, i32 %5, i32 %7, i32 0, %struct._XImage** %oimg, i1 zeroext false)
  %8 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  store %struct.XColor* %8, %struct.XColor** %p, align 8
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.11, %entry
  %9 = load i32, i32* %y, align 4
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %height1 = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 12
  %11 = load i32, i32* %height1, align 4
  %cmp = icmp slt i32 %9, %11
  br i1 %cmp, label %for.body, label %for.end.13

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %12 = load i32, i32* %x, align 4
  %13 = load %struct.image*, %struct.image** %img.addr, align 8
  %width3 = getelementptr inbounds %struct.image, %struct.image* %13, i32 0, i32 11
  %14 = load i32, i32* %width3, align 4
  %cmp4 = icmp slt i32 %12, %14
  br i1 %cmp4, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.2
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %16 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %16, i32 0, i32 1
  %17 = load i16, i16* %red, align 2
  %conv = zext i16 %17 to i32
  %18 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %18, i32 0, i32 2
  %19 = load i16, i16* %green, align 2
  %conv6 = zext i16 %19 to i32
  %20 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %20, i32 0, i32 3
  %21 = load i16, i16* %blue, align 2
  %conv7 = zext i16 %21 to i32
  %call8 = call i64 @lookup_rgb_color(%struct.frame* %15, i32 %conv, i32 %conv6, i32 %conv7)
  store i64 %call8, i64* %pixel, align 8
  %22 = load %struct._XImage*, %struct._XImage** %oimg, align 8
  %f9 = getelementptr inbounds %struct._XImage, %struct._XImage* %22, i32 0, i32 16
  %put_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f9, i32 0, i32 3
  %23 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel, align 8
  %24 = load %struct._XImage*, %struct._XImage** %oimg, align 8
  %25 = load i32, i32* %x, align 4
  %26 = load i32, i32* %y, align 4
  %27 = load i64, i64* %pixel, align 8
  %call10 = call i32 %23(%struct._XImage* %24, i32 %25, i32 %26, i64 %27)
  br label %for.inc

for.inc:                                          ; preds = %for.body.5
  %28 = load i32, i32* %x, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %x, align 4
  %29 = load %struct.XColor*, %struct.XColor** %p, align 8
  %incdec.ptr = getelementptr inbounds %struct.XColor, %struct.XColor* %29, i32 1
  store %struct.XColor* %incdec.ptr, %struct.XColor** %p, align 8
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.11

for.inc.11:                                       ; preds = %for.end
  %30 = load i32, i32* %y, align 4
  %inc12 = add nsw i32 %30, 1
  store i32 %inc12, i32* %y, align 4
  br label %for.cond

for.end.13:                                       ; preds = %for.cond
  %31 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %32 = bitcast %struct.XColor* %31 to i8*
  call void @xfree(i8* %32)
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %34 = load %struct.image*, %struct.image** %img.addr, align 8
  %35 = load %struct._XImage*, %struct._XImage** %oimg, align 8
  call void @image_put_x_image(%struct.frame* %33, %struct.image* %34, %struct._XImage* %35, i1 zeroext false)
  %36 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors = getelementptr inbounds %struct.image, %struct.image* %36, i32 0, i32 6
  %call14 = call i64* @colors_in_color_table(i32* %ncolors)
  %37 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors15 = getelementptr inbounds %struct.image, %struct.image* %37, i32 0, i32 5
  store i64* %call14, i64** %colors15, align 8
  call void @free_color_table()
  ret void
}

declare i32 @XSetForeground(%struct._XDisplay*, %struct._XGC*, i64) #1

declare i32 @XScreenNumberOfScreen(%struct.Screen*) #1

declare i32 @XDrawLine(%struct._XDisplay*, i64, %struct._XGC*, i32, i32, i32, i32) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #3

declare void @x_query_colors(%struct.frame*, %struct.XColor*, i32) #1

; Function Attrs: nounwind uwtable
define internal i64 @lookup_rgb_color(%struct.frame* %f, i32 %r, i32 %g, i32 %b) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %r.addr = alloca i32, align 4
  %g.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %hash = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca %struct.ct_color*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %color = alloca %struct.XColor, align 8
  %color28 = alloca %struct.XColor, align 8
  %cmap = alloca i64, align 8
  %rc = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %r, i32* %r.addr, align 4
  store i32 %g, i32* %g.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %r.addr, align 4
  %1 = load i32, i32* %g.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %call = call i32 @ct_hash_rgb(i32 %0, i32 %1, i32 %2)
  store i32 %call, i32* %hash, align 4
  %3 = load i32, i32* %hash, align 4
  %rem = urem i32 %3, 101
  store i32 %rem, i32* %i, align 4
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %6, %struct.x_display_info** %dpyinfo, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %red_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 91
  %8 = load i32, i32* %red_bits, align 4
  %cmp = icmp sgt i32 %8, 0
  br i1 %cmp, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %gamma = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 75
  %10 = load double, double* %gamma, align 8
  %tobool = fcmp une double %10, 0.000000e+00
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %11 = load i32, i32* %r.addr, align 4
  %conv = trunc i32 %11 to i16
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  store i16 %conv, i16* %red, align 2
  %12 = load i32, i32* %g.addr, align 4
  %conv2 = trunc i32 %12 to i16
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  store i16 %conv2, i16* %green, align 2
  %13 = load i32, i32* %b.addr, align 4
  %conv3 = trunc i32 %13 to i16
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  store i16 %conv3, i16* %blue, align 2
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @gamma_correct(%struct.frame* %14, %struct.XColor* %color)
  %red4 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %15 = load i16, i16* %red4, align 2
  %conv5 = zext i16 %15 to i32
  store i32 %conv5, i32* %r.addr, align 4
  %green6 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %16 = load i16, i16* %green6, align 2
  %conv7 = zext i16 %16 to i32
  store i32 %conv7, i32* %g.addr, align 4
  %blue8 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %17 = load i16, i16* %blue8, align 2
  %conv9 = zext i16 %17 to i32
  store i32 %conv9, i32* %b.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %19 = load i32, i32* %r.addr, align 4
  %20 = load i32, i32* %g.addr, align 4
  %21 = load i32, i32* %b.addr, align 4
  %call10 = call i64 @x_make_truecolor_pixel(%struct.x_display_info* %18, i32 %19, i32 %20, i32 %21)
  store i64 %call10, i64* %retval
  br label %return

if.end.11:                                        ; preds = %entry
  %22 = load i32, i32* %i, align 4
  %idxprom = sext i32 %22 to i64
  %23 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %23, i64 %idxprom
  %24 = load %struct.ct_color*, %struct.ct_color** %arrayidx, align 8
  store %struct.ct_color* %24, %struct.ct_color** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.11
  %25 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %tobool12 = icmp ne %struct.ct_color* %25, null
  br i1 %tobool12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %r13 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %26, i32 0, i32 0
  %27 = load i32, i32* %r13, align 4
  %28 = load i32, i32* %r.addr, align 4
  %cmp14 = icmp eq i32 %27, %28
  br i1 %cmp14, label %land.lhs.true, label %if.end.24

land.lhs.true:                                    ; preds = %for.body
  %29 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %g16 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %29, i32 0, i32 1
  %30 = load i32, i32* %g16, align 4
  %31 = load i32, i32* %g.addr, align 4
  %cmp17 = icmp eq i32 %30, %31
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.24

land.lhs.true.19:                                 ; preds = %land.lhs.true
  %32 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %b20 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %32, i32 0, i32 2
  %33 = load i32, i32* %b20, align 4
  %34 = load i32, i32* %b.addr, align 4
  %cmp21 = icmp eq i32 %33, %34
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %land.lhs.true.19
  br label %for.end

if.end.24:                                        ; preds = %land.lhs.true.19, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.24
  %35 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %next = getelementptr inbounds %struct.ct_color, %struct.ct_color* %35, i32 0, i32 4
  %36 = load %struct.ct_color*, %struct.ct_color** %next, align 8
  store %struct.ct_color* %36, %struct.ct_color** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.23, %for.cond
  %37 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %cmp25 = icmp eq %struct.ct_color* %37, null
  br i1 %cmp25, label %if.then.27, label %if.end.58

if.then.27:                                       ; preds = %for.end
  %38 = load i32, i32* @ct_colors_allocated, align 4
  %cmp29 = icmp sle i32 2147483647, %38
  br i1 %cmp29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.then.27
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 78
  %40 = load i64, i64* %foreground_pixel, align 8
  store i64 %40, i64* %retval
  br label %return

if.end.32:                                        ; preds = %if.then.27
  %41 = load i32, i32* %r.addr, align 4
  %conv33 = trunc i32 %41 to i16
  %red34 = getelementptr inbounds %struct.XColor, %struct.XColor* %color28, i32 0, i32 1
  store i16 %conv33, i16* %red34, align 2
  %42 = load i32, i32* %g.addr, align 4
  %conv35 = trunc i32 %42 to i16
  %green36 = getelementptr inbounds %struct.XColor, %struct.XColor* %color28, i32 0, i32 2
  store i16 %conv35, i16* %green36, align 2
  %43 = load i32, i32* %b.addr, align 4
  %conv37 = trunc i32 %43 to i16
  %blue38 = getelementptr inbounds %struct.XColor, %struct.XColor* %color28, i32 0, i32 3
  store i16 %conv37, i16* %blue38, align 2
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data39 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 62
  %x40 = bitcast %union.output_data* %output_data39 to %struct.x_output**
  %45 = load %struct.x_output*, %struct.x_output** %x40, align 8
  %display_info41 = getelementptr inbounds %struct.x_output, %struct.x_output* %45, i32 0, i32 44
  %46 = load %struct.x_display_info*, %struct.x_display_info** %display_info41, align 8
  %cmap42 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %46, i32 0, i32 10
  %47 = load i64, i64* %cmap42, align 8
  store i64 %47, i64* %cmap, align 8
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %49 = load i64, i64* %cmap, align 8
  %call43 = call zeroext i1 @x_alloc_nearest_color(%struct.frame* %48, i64 %49, %struct.XColor* %color28)
  %frombool = zext i1 %call43 to i8
  store i8 %frombool, i8* %rc, align 1
  %50 = load i8, i8* %rc, align 1
  %tobool44 = trunc i8 %50 to i1
  br i1 %tobool44, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %if.end.32
  %51 = load i32, i32* @ct_colors_allocated, align 4
  %inc = add nsw i32 %51, 1
  store i32 %inc, i32* @ct_colors_allocated, align 4
  %call46 = call noalias i8* @xmalloc(i64 32)
  %52 = bitcast i8* %call46 to %struct.ct_color*
  store %struct.ct_color* %52, %struct.ct_color** %p, align 8
  %53 = load i32, i32* %r.addr, align 4
  %54 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %r47 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %54, i32 0, i32 0
  store i32 %53, i32* %r47, align 4
  %55 = load i32, i32* %g.addr, align 4
  %56 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %g48 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %56, i32 0, i32 1
  store i32 %55, i32* %g48, align 4
  %57 = load i32, i32* %b.addr, align 4
  %58 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %b49 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %58, i32 0, i32 2
  store i32 %57, i32* %b49, align 4
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %color28, i32 0, i32 0
  %59 = load i64, i64* %pixel, align 8
  %60 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %pixel50 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %60, i32 0, i32 3
  store i64 %59, i64* %pixel50, align 8
  %61 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %61 to i64
  %62 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx52 = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %62, i64 %idxprom51
  %63 = load %struct.ct_color*, %struct.ct_color** %arrayidx52, align 8
  %64 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %next53 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %64, i32 0, i32 4
  store %struct.ct_color* %63, %struct.ct_color** %next53, align 8
  %65 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %66 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %66 to i64
  %67 = load %struct.ct_color**, %struct.ct_color*** @ct_table, align 8
  %arrayidx55 = getelementptr inbounds %struct.ct_color*, %struct.ct_color** %67, i64 %idxprom54
  store %struct.ct_color* %65, %struct.ct_color** %arrayidx55, align 8
  br label %if.end.57

if.else:                                          ; preds = %if.end.32
  %68 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel56 = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 78
  %69 = load i64, i64* %foreground_pixel56, align 8
  store i64 %69, i64* %retval
  br label %return

if.end.57:                                        ; preds = %if.then.45
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %for.end
  %70 = load %struct.ct_color*, %struct.ct_color** %p, align 8
  %pixel59 = getelementptr inbounds %struct.ct_color, %struct.ct_color* %70, i32 0, i32 3
  %71 = load i64, i64* %pixel59, align 8
  store i64 %71, i64* %retval
  br label %return

return:                                           ; preds = %if.end.58, %if.else, %if.then.31, %if.end
  %72 = load i64, i64* %retval
  ret i64 %72
}

; Function Attrs: nounwind uwtable
define internal i32 @ct_hash_rgb(i32 %r, i32 %g, i32 %b) #0 {
entry:
  %r.addr = alloca i32, align 4
  %g.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %r, i32* %r.addr, align 4
  store i32 %g, i32* %g.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %r.addr, align 4
  %shl = shl i32 %0, 16
  %1 = load i32, i32* %g.addr, align 4
  %shl1 = shl i32 %1, 8
  %xor = xor i32 %shl, %shl1
  %2 = load i32, i32* %b.addr, align 4
  %xor2 = xor i32 %xor, %2
  ret i32 %xor2
}

declare void @gamma_correct(%struct.frame*, %struct.XColor*) #1

declare i64 @x_make_truecolor_pixel(%struct.x_display_info*, i32, i32, i32) #1

declare zeroext i1 @x_alloc_nearest_color(%struct.frame*, i64, %struct.XColor*) #1

; Function Attrs: nounwind uwtable
define internal void @x_detect_edges(%struct.frame* %f, %struct.image* %img, i32* %matrix, i32 %color_adjust) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %matrix.addr = alloca i32*, align 8
  %color_adjust.addr = alloca i32, align 4
  %colors = alloca %struct.XColor*, align 8
  %new = alloca %struct.XColor*, align 8
  %p = alloca %struct.XColor*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  %nbytes = alloca i64, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %yy = alloca i32, align 4
  %xx = alloca i32, align 4
  %t = alloca %struct.XColor*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32* %matrix, i32** %matrix.addr, align 8
  store i32 %color_adjust, i32* %color_adjust.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %call = call %struct.XColor* @x_to_xcolors(%struct.frame* %0, %struct.image* %1, i1 zeroext true)
  store %struct.XColor* %call, %struct.XColor** %colors, align 8
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32*, i32** %matrix.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp slt i32 %5, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load i32*, i32** %matrix.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %7, i64 %idxprom2
  %8 = load i32, i32* %arrayidx3, align 4
  %sub = sub nsw i32 0, %8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load i32*, i32** %matrix.addr, align 8
  %arrayidx5 = getelementptr inbounds i32, i32* %10, i64 %idxprom4
  %11 = load i32, i32* %arrayidx5, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %11, %cond.false ]
  %12 = load i32, i32* %sum, align 4
  %add = add nsw i32 %12, %cond
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br i1 false, label %cond.true.6, label %cond.false.619

cond.true.6:                                      ; preds = %for.end
  br i1 false, label %cond.true.7, label %cond.false.324

cond.true.7:                                      ; preds = %cond.true.6
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 11
  %15 = load i32, i32* %width, align 4
  %conv = trunc i32 %15 to i8
  %conv8 = sext i8 %conv to i32
  %mul = mul nsw i32 0, %conv8
  %add9 = add nsw i32 %mul, 16
  %mul10 = mul nsw i32 0, %add9
  %sub11 = sub nsw i32 %mul10, 1
  %cmp12 = icmp slt i32 %sub11, 0
  br i1 %cmp12, label %cond.true.14, label %cond.false.36

cond.true.14:                                     ; preds = %cond.true.7
  %16 = load %struct.image*, %struct.image** %img.addr, align 8
  %width15 = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 11
  %17 = load i32, i32* %width15, align 4
  %conv16 = trunc i32 %17 to i8
  %conv17 = sext i8 %conv16 to i32
  %mul18 = mul nsw i32 0, %conv17
  %add19 = add nsw i32 %mul18, 16
  %mul20 = mul nsw i32 0, %add19
  %add21 = add nsw i32 %mul20, 0
  %neg = xor i32 %add21, -1
  %cmp22 = icmp eq i32 %neg, -1
  %conv23 = zext i1 %cmp22 to i32
  %sub24 = sub nsw i32 0, %conv23
  %18 = load %struct.image*, %struct.image** %img.addr, align 8
  %width25 = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 11
  %19 = load i32, i32* %width25, align 4
  %conv26 = trunc i32 %19 to i8
  %conv27 = sext i8 %conv26 to i32
  %mul28 = mul nsw i32 0, %conv27
  %add29 = add nsw i32 %mul28, 16
  %mul30 = mul nsw i32 0, %add29
  %add31 = add nsw i32 %mul30, 1
  %shl = shl i32 %add31, 30
  %sub32 = sub nsw i32 %shl, 1
  %mul33 = mul nsw i32 %sub32, 2
  %add34 = add nsw i32 %mul33, 1
  %sub35 = sub nsw i32 %sub24, %add34
  br label %cond.end.44

cond.false.36:                                    ; preds = %cond.true.7
  %20 = load %struct.image*, %struct.image** %img.addr, align 8
  %width37 = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 11
  %21 = load i32, i32* %width37, align 4
  %conv38 = trunc i32 %21 to i8
  %conv39 = sext i8 %conv38 to i32
  %mul40 = mul nsw i32 0, %conv39
  %add41 = add nsw i32 %mul40, 16
  %mul42 = mul nsw i32 0, %add41
  %add43 = add nsw i32 %mul42, 0
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.36, %cond.true.14
  %cond45 = phi i32 [ %sub35, %cond.true.14 ], [ %add43, %cond.false.36 ]
  %cmp46 = icmp eq i32 %cond45, 0
  br i1 %cmp46, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end.44
  %22 = load %struct.image*, %struct.image** %img.addr, align 8
  %width48 = getelementptr inbounds %struct.image, %struct.image* %22, i32 0, i32 11
  %23 = load i32, i32* %width48, align 4
  %conv49 = trunc i32 %23 to i8
  %conv50 = sext i8 %conv49 to i32
  %cmp51 = icmp slt i32 %conv50, 0
  br i1 %cmp51, label %cond.true.272, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end.44
  %24 = load %struct.image*, %struct.image** %img.addr, align 8
  %width53 = getelementptr inbounds %struct.image, %struct.image* %24, i32 0, i32 11
  %25 = load i32, i32* %width53, align 4
  %conv54 = trunc i32 %25 to i8
  %conv55 = sext i8 %conv54 to i32
  %cmp56 = icmp slt i32 %conv55, 0
  br i1 %cmp56, label %cond.true.58, label %cond.false.153

cond.true.58:                                     ; preds = %lor.lhs.false
  br i1 false, label %cond.true.59, label %cond.false.96

cond.true.59:                                     ; preds = %cond.true.58
  %26 = load %struct.image*, %struct.image** %img.addr, align 8
  %width60 = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 11
  %27 = load i32, i32* %width60, align 4
  %conv61 = trunc i32 %27 to i8
  %conv62 = sext i8 %conv61 to i32
  %mul63 = mul nsw i32 0, %conv62
  %add64 = add nsw i32 %mul63, 16
  %mul65 = mul nsw i32 0, %add64
  %sub66 = sub nsw i32 %mul65, 1
  %cmp67 = icmp slt i32 %sub66, 0
  br i1 %cmp67, label %cond.true.69, label %cond.false.81

cond.true.69:                                     ; preds = %cond.true.59
  %28 = load %struct.image*, %struct.image** %img.addr, align 8
  %width70 = getelementptr inbounds %struct.image, %struct.image* %28, i32 0, i32 11
  %29 = load i32, i32* %width70, align 4
  %conv71 = trunc i32 %29 to i8
  %conv72 = sext i8 %conv71 to i32
  %mul73 = mul nsw i32 0, %conv72
  %add74 = add nsw i32 %mul73, 16
  %mul75 = mul nsw i32 0, %add74
  %add76 = add nsw i32 %mul75, 1
  %shl77 = shl i32 %add76, 30
  %sub78 = sub nsw i32 %shl77, 1
  %mul79 = mul nsw i32 %sub78, 2
  %add80 = add nsw i32 %mul79, 1
  br label %cond.end.89

cond.false.81:                                    ; preds = %cond.true.59
  %30 = load %struct.image*, %struct.image** %img.addr, align 8
  %width82 = getelementptr inbounds %struct.image, %struct.image* %30, i32 0, i32 11
  %31 = load i32, i32* %width82, align 4
  %conv83 = trunc i32 %31 to i8
  %conv84 = sext i8 %conv83 to i32
  %mul85 = mul nsw i32 0, %conv84
  %add86 = add nsw i32 %mul85, 16
  %mul87 = mul nsw i32 0, %add86
  %sub88 = sub nsw i32 %mul87, 1
  br label %cond.end.89

cond.end.89:                                      ; preds = %cond.false.81, %cond.true.69
  %cond90 = phi i32 [ %add80, %cond.true.69 ], [ %sub88, %cond.false.81 ]
  %32 = load %struct.image*, %struct.image** %img.addr, align 8
  %width91 = getelementptr inbounds %struct.image, %struct.image* %32, i32 0, i32 11
  %33 = load i32, i32* %width91, align 4
  %conv92 = trunc i32 %33 to i8
  %conv93 = sext i8 %conv92 to i32
  %div = sdiv i32 %cond90, %conv93
  %cmp94 = icmp slt i32 16, %div
  br i1 %cmp94, label %cond.true.272, label %lor.lhs.false.249

cond.false.96:                                    ; preds = %cond.true.58
  %34 = load %struct.image*, %struct.image** %img.addr, align 8
  %width97 = getelementptr inbounds %struct.image, %struct.image* %34, i32 0, i32 11
  %35 = load i32, i32* %width97, align 4
  %conv98 = trunc i32 %35 to i8
  %conv99 = sext i8 %conv98 to i32
  %cmp100 = icmp eq i32 %conv99, -1
  br i1 %cmp100, label %cond.true.102, label %cond.false.103

cond.true.102:                                    ; preds = %cond.false.96
  br i1 false, label %cond.true.272, label %lor.lhs.false.249

cond.false.103:                                   ; preds = %cond.false.96
  %36 = load %struct.image*, %struct.image** %img.addr, align 8
  %width104 = getelementptr inbounds %struct.image, %struct.image* %36, i32 0, i32 11
  %37 = load i32, i32* %width104, align 4
  %conv105 = trunc i32 %37 to i8
  %conv106 = sext i8 %conv105 to i32
  %mul107 = mul nsw i32 0, %conv106
  %add108 = add nsw i32 %mul107, 16
  %mul109 = mul nsw i32 0, %add108
  %sub110 = sub nsw i32 %mul109, 1
  %cmp111 = icmp slt i32 %sub110, 0
  br i1 %cmp111, label %cond.true.113, label %cond.false.137

cond.true.113:                                    ; preds = %cond.false.103
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  %width114 = getelementptr inbounds %struct.image, %struct.image* %38, i32 0, i32 11
  %39 = load i32, i32* %width114, align 4
  %conv115 = trunc i32 %39 to i8
  %conv116 = sext i8 %conv115 to i32
  %mul117 = mul nsw i32 0, %conv116
  %add118 = add nsw i32 %mul117, 16
  %mul119 = mul nsw i32 0, %add118
  %add120 = add nsw i32 %mul119, 0
  %neg121 = xor i32 %add120, -1
  %cmp122 = icmp eq i32 %neg121, -1
  %conv123 = zext i1 %cmp122 to i32
  %sub124 = sub nsw i32 0, %conv123
  %40 = load %struct.image*, %struct.image** %img.addr, align 8
  %width125 = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 11
  %41 = load i32, i32* %width125, align 4
  %conv126 = trunc i32 %41 to i8
  %conv127 = sext i8 %conv126 to i32
  %mul128 = mul nsw i32 0, %conv127
  %add129 = add nsw i32 %mul128, 16
  %mul130 = mul nsw i32 0, %add129
  %add131 = add nsw i32 %mul130, 1
  %shl132 = shl i32 %add131, 30
  %sub133 = sub nsw i32 %shl132, 1
  %mul134 = mul nsw i32 %sub133, 2
  %add135 = add nsw i32 %mul134, 1
  %sub136 = sub nsw i32 %sub124, %add135
  br label %cond.end.145

cond.false.137:                                   ; preds = %cond.false.103
  %42 = load %struct.image*, %struct.image** %img.addr, align 8
  %width138 = getelementptr inbounds %struct.image, %struct.image* %42, i32 0, i32 11
  %43 = load i32, i32* %width138, align 4
  %conv139 = trunc i32 %43 to i8
  %conv140 = sext i8 %conv139 to i32
  %mul141 = mul nsw i32 0, %conv140
  %add142 = add nsw i32 %mul141, 16
  %mul143 = mul nsw i32 0, %add142
  %add144 = add nsw i32 %mul143, 0
  br label %cond.end.145

cond.end.145:                                     ; preds = %cond.false.137, %cond.true.113
  %cond146 = phi i32 [ %sub136, %cond.true.113 ], [ %add144, %cond.false.137 ]
  %44 = load %struct.image*, %struct.image** %img.addr, align 8
  %width147 = getelementptr inbounds %struct.image, %struct.image* %44, i32 0, i32 11
  %45 = load i32, i32* %width147, align 4
  %conv148 = trunc i32 %45 to i8
  %conv149 = sext i8 %conv148 to i32
  %div150 = sdiv i32 %cond146, %conv149
  %cmp151 = icmp slt i32 %div150, 16
  br i1 %cmp151, label %cond.true.272, label %lor.lhs.false.249

cond.false.153:                                   ; preds = %lor.lhs.false
  %46 = load %struct.image*, %struct.image** %img.addr, align 8
  %width154 = getelementptr inbounds %struct.image, %struct.image* %46, i32 0, i32 11
  %47 = load i32, i32* %width154, align 4
  %conv155 = trunc i32 %47 to i8
  %conv156 = sext i8 %conv155 to i32
  %cmp157 = icmp eq i32 %conv156, 0
  br i1 %cmp157, label %cond.true.159, label %cond.false.160

cond.true.159:                                    ; preds = %cond.false.153
  br i1 false, label %cond.true.272, label %lor.lhs.false.249

cond.false.160:                                   ; preds = %cond.false.153
  br i1 false, label %cond.true.161, label %cond.false.211

cond.true.161:                                    ; preds = %cond.false.160
  %48 = load %struct.image*, %struct.image** %img.addr, align 8
  %width162 = getelementptr inbounds %struct.image, %struct.image* %48, i32 0, i32 11
  %49 = load i32, i32* %width162, align 4
  %conv163 = trunc i32 %49 to i8
  %conv164 = sext i8 %conv163 to i32
  %mul165 = mul nsw i32 0, %conv164
  %add166 = add nsw i32 %mul165, 16
  %mul167 = mul nsw i32 0, %add166
  %sub168 = sub nsw i32 %mul167, 1
  %cmp169 = icmp slt i32 %sub168, 0
  br i1 %cmp169, label %cond.true.171, label %cond.false.195

cond.true.171:                                    ; preds = %cond.true.161
  %50 = load %struct.image*, %struct.image** %img.addr, align 8
  %width172 = getelementptr inbounds %struct.image, %struct.image* %50, i32 0, i32 11
  %51 = load i32, i32* %width172, align 4
  %conv173 = trunc i32 %51 to i8
  %conv174 = sext i8 %conv173 to i32
  %mul175 = mul nsw i32 0, %conv174
  %add176 = add nsw i32 %mul175, 16
  %mul177 = mul nsw i32 0, %add176
  %add178 = add nsw i32 %mul177, 0
  %neg179 = xor i32 %add178, -1
  %cmp180 = icmp eq i32 %neg179, -1
  %conv181 = zext i1 %cmp180 to i32
  %sub182 = sub nsw i32 0, %conv181
  %52 = load %struct.image*, %struct.image** %img.addr, align 8
  %width183 = getelementptr inbounds %struct.image, %struct.image* %52, i32 0, i32 11
  %53 = load i32, i32* %width183, align 4
  %conv184 = trunc i32 %53 to i8
  %conv185 = sext i8 %conv184 to i32
  %mul186 = mul nsw i32 0, %conv185
  %add187 = add nsw i32 %mul186, 16
  %mul188 = mul nsw i32 0, %add187
  %add189 = add nsw i32 %mul188, 1
  %shl190 = shl i32 %add189, 30
  %sub191 = sub nsw i32 %shl190, 1
  %mul192 = mul nsw i32 %sub191, 2
  %add193 = add nsw i32 %mul192, 1
  %sub194 = sub nsw i32 %sub182, %add193
  br label %cond.end.203

cond.false.195:                                   ; preds = %cond.true.161
  %54 = load %struct.image*, %struct.image** %img.addr, align 8
  %width196 = getelementptr inbounds %struct.image, %struct.image* %54, i32 0, i32 11
  %55 = load i32, i32* %width196, align 4
  %conv197 = trunc i32 %55 to i8
  %conv198 = sext i8 %conv197 to i32
  %mul199 = mul nsw i32 0, %conv198
  %add200 = add nsw i32 %mul199, 16
  %mul201 = mul nsw i32 0, %add200
  %add202 = add nsw i32 %mul201, 0
  br label %cond.end.203

cond.end.203:                                     ; preds = %cond.false.195, %cond.true.171
  %cond204 = phi i32 [ %sub194, %cond.true.171 ], [ %add202, %cond.false.195 ]
  %56 = load %struct.image*, %struct.image** %img.addr, align 8
  %width205 = getelementptr inbounds %struct.image, %struct.image* %56, i32 0, i32 11
  %57 = load i32, i32* %width205, align 4
  %conv206 = trunc i32 %57 to i8
  %conv207 = sext i8 %conv206 to i32
  %div208 = sdiv i32 %cond204, %conv207
  %cmp209 = icmp slt i32 16, %div208
  br i1 %cmp209, label %cond.true.272, label %lor.lhs.false.249

cond.false.211:                                   ; preds = %cond.false.160
  %58 = load %struct.image*, %struct.image** %img.addr, align 8
  %width212 = getelementptr inbounds %struct.image, %struct.image* %58, i32 0, i32 11
  %59 = load i32, i32* %width212, align 4
  %conv213 = trunc i32 %59 to i8
  %conv214 = sext i8 %conv213 to i32
  %mul215 = mul nsw i32 0, %conv214
  %add216 = add nsw i32 %mul215, 16
  %mul217 = mul nsw i32 0, %add216
  %sub218 = sub nsw i32 %mul217, 1
  %cmp219 = icmp slt i32 %sub218, 0
  br i1 %cmp219, label %cond.true.221, label %cond.false.233

cond.true.221:                                    ; preds = %cond.false.211
  %60 = load %struct.image*, %struct.image** %img.addr, align 8
  %width222 = getelementptr inbounds %struct.image, %struct.image* %60, i32 0, i32 11
  %61 = load i32, i32* %width222, align 4
  %conv223 = trunc i32 %61 to i8
  %conv224 = sext i8 %conv223 to i32
  %mul225 = mul nsw i32 0, %conv224
  %add226 = add nsw i32 %mul225, 16
  %mul227 = mul nsw i32 0, %add226
  %add228 = add nsw i32 %mul227, 1
  %shl229 = shl i32 %add228, 30
  %sub230 = sub nsw i32 %shl229, 1
  %mul231 = mul nsw i32 %sub230, 2
  %add232 = add nsw i32 %mul231, 1
  br label %cond.end.241

cond.false.233:                                   ; preds = %cond.false.211
  %62 = load %struct.image*, %struct.image** %img.addr, align 8
  %width234 = getelementptr inbounds %struct.image, %struct.image* %62, i32 0, i32 11
  %63 = load i32, i32* %width234, align 4
  %conv235 = trunc i32 %63 to i8
  %conv236 = sext i8 %conv235 to i32
  %mul237 = mul nsw i32 0, %conv236
  %add238 = add nsw i32 %mul237, 16
  %mul239 = mul nsw i32 0, %add238
  %sub240 = sub nsw i32 %mul239, 1
  br label %cond.end.241

cond.end.241:                                     ; preds = %cond.false.233, %cond.true.221
  %cond242 = phi i32 [ %add232, %cond.true.221 ], [ %sub240, %cond.false.233 ]
  %64 = load %struct.image*, %struct.image** %img.addr, align 8
  %width243 = getelementptr inbounds %struct.image, %struct.image* %64, i32 0, i32 11
  %65 = load i32, i32* %width243, align 4
  %conv244 = trunc i32 %65 to i8
  %conv245 = sext i8 %conv244 to i32
  %div246 = sdiv i32 %cond242, %conv245
  %cmp247 = icmp slt i32 %div246, 16
  br i1 %cmp247, label %cond.true.272, label %lor.lhs.false.249

lor.lhs.false.249:                                ; preds = %cond.end.241, %cond.end.203, %cond.true.159, %cond.end.145, %cond.true.102, %cond.end.89
  %66 = load %struct.image*, %struct.image** %img.addr, align 8
  %width250 = getelementptr inbounds %struct.image, %struct.image* %66, i32 0, i32 11
  %67 = load i32, i32* %width250, align 4
  %conv251 = trunc i32 %67 to i8
  %conv252 = sext i8 %conv251 to i32
  %mul253 = mul nsw i32 16, %conv252
  %mul254 = mul nsw i32 0, %mul253
  %sub255 = sub nsw i32 %mul254, 1
  %cmp256 = icmp slt i32 %sub255, 0
  br i1 %cmp256, label %land.lhs.true.258, label %lor.lhs.false.265

land.lhs.true.258:                                ; preds = %lor.lhs.false.249
  %68 = load %struct.image*, %struct.image** %img.addr, align 8
  %width259 = getelementptr inbounds %struct.image, %struct.image* %68, i32 0, i32 11
  %69 = load i32, i32* %width259, align 4
  %conv260 = trunc i32 %69 to i8
  %conv261 = sext i8 %conv260 to i32
  %mul262 = mul nsw i32 16, %conv261
  %cmp263 = icmp slt i32 %mul262, -128
  br i1 %cmp263, label %cond.true.272, label %lor.lhs.false.265

lor.lhs.false.265:                                ; preds = %land.lhs.true.258, %lor.lhs.false.249
  %70 = load %struct.image*, %struct.image** %img.addr, align 8
  %width266 = getelementptr inbounds %struct.image, %struct.image* %70, i32 0, i32 11
  %71 = load i32, i32* %width266, align 4
  %conv267 = trunc i32 %71 to i8
  %conv268 = sext i8 %conv267 to i32
  %mul269 = mul nsw i32 16, %conv268
  %cmp270 = icmp slt i32 127, %mul269
  br i1 %cmp270, label %cond.true.272, label %cond.false.298

cond.true.272:                                    ; preds = %lor.lhs.false.265, %land.lhs.true.258, %cond.end.241, %cond.end.203, %cond.true.159, %cond.end.145, %cond.true.102, %cond.end.89, %land.lhs.true
  %72 = load %struct.image*, %struct.image** %img.addr, align 8
  %width273 = getelementptr inbounds %struct.image, %struct.image* %72, i32 0, i32 11
  %73 = load i32, i32* %width273, align 4
  %conv274 = trunc i32 %73 to i8
  %conv275 = zext i8 %conv274 to i32
  %mul276 = mul nsw i32 16, %conv275
  %cmp277 = icmp sle i32 %mul276, 127
  br i1 %cmp277, label %cond.true.279, label %cond.false.286

cond.true.279:                                    ; preds = %cond.true.272
  %74 = load %struct.image*, %struct.image** %img.addr, align 8
  %width280 = getelementptr inbounds %struct.image, %struct.image* %74, i32 0, i32 11
  %75 = load i32, i32* %width280, align 4
  %conv281 = trunc i32 %75 to i8
  %conv282 = zext i8 %conv281 to i32
  %mul283 = mul nsw i32 16, %conv282
  %conv284 = trunc i32 %mul283 to i8
  %conv285 = sext i8 %conv284 to i32
  br label %cond.end.295

cond.false.286:                                   ; preds = %cond.true.272
  %76 = load %struct.image*, %struct.image** %img.addr, align 8
  %width287 = getelementptr inbounds %struct.image, %struct.image* %76, i32 0, i32 11
  %77 = load i32, i32* %width287, align 4
  %conv288 = trunc i32 %77 to i8
  %conv289 = zext i8 %conv288 to i32
  %mul290 = mul nsw i32 16, %conv289
  %sub291 = sub nsw i32 %mul290, -128
  %conv292 = trunc i32 %sub291 to i8
  %conv293 = sext i8 %conv292 to i32
  %add294 = add nsw i32 %conv293, -128
  br label %cond.end.295

cond.end.295:                                     ; preds = %cond.false.286, %cond.true.279
  %cond296 = phi i32 [ %conv285, %cond.true.279 ], [ %add294, %cond.false.286 ]
  %conv297 = sext i32 %cond296 to i64
  store i64 %conv297, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.298:                                   ; preds = %lor.lhs.false.265
  %78 = load %struct.image*, %struct.image** %img.addr, align 8
  %width299 = getelementptr inbounds %struct.image, %struct.image* %78, i32 0, i32 11
  %79 = load i32, i32* %width299, align 4
  %conv300 = trunc i32 %79 to i8
  %conv301 = zext i8 %conv300 to i32
  %mul302 = mul nsw i32 16, %conv301
  %cmp303 = icmp sle i32 %mul302, 127
  br i1 %cmp303, label %cond.true.305, label %cond.false.312

cond.true.305:                                    ; preds = %cond.false.298
  %80 = load %struct.image*, %struct.image** %img.addr, align 8
  %width306 = getelementptr inbounds %struct.image, %struct.image* %80, i32 0, i32 11
  %81 = load i32, i32* %width306, align 4
  %conv307 = trunc i32 %81 to i8
  %conv308 = zext i8 %conv307 to i32
  %mul309 = mul nsw i32 16, %conv308
  %conv310 = trunc i32 %mul309 to i8
  %conv311 = sext i8 %conv310 to i32
  br label %cond.end.321

cond.false.312:                                   ; preds = %cond.false.298
  %82 = load %struct.image*, %struct.image** %img.addr, align 8
  %width313 = getelementptr inbounds %struct.image, %struct.image* %82, i32 0, i32 11
  %83 = load i32, i32* %width313, align 4
  %conv314 = trunc i32 %83 to i8
  %conv315 = zext i8 %conv314 to i32
  %mul316 = mul nsw i32 16, %conv315
  %sub317 = sub nsw i32 %mul316, -128
  %conv318 = trunc i32 %sub317 to i8
  %conv319 = sext i8 %conv318 to i32
  %add320 = add nsw i32 %conv319, -128
  br label %cond.end.321

cond.end.321:                                     ; preds = %cond.false.312, %cond.true.305
  %cond322 = phi i32 [ %conv311, %cond.true.305 ], [ %add320, %cond.false.312 ]
  %conv323 = sext i32 %cond322 to i64
  store i64 %conv323, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.324:                                   ; preds = %cond.true.6
  %84 = load %struct.image*, %struct.image** %img.addr, align 8
  %width325 = getelementptr inbounds %struct.image, %struct.image* %84, i32 0, i32 11
  %85 = load i32, i32* %width325, align 4
  %mul326 = mul nsw i32 0, %85
  %conv327 = sext i32 %mul326 to i64
  %add328 = add i64 %conv327, 16
  %mul329 = mul i64 0, %add328
  %sub330 = sub i64 %mul329, 1
  %cmp331 = icmp ult i64 %sub330, 0
  br i1 %cmp331, label %cond.true.333, label %cond.false.356

cond.true.333:                                    ; preds = %cond.false.324
  %86 = load %struct.image*, %struct.image** %img.addr, align 8
  %width334 = getelementptr inbounds %struct.image, %struct.image* %86, i32 0, i32 11
  %87 = load i32, i32* %width334, align 4
  %mul335 = mul nsw i32 0, %87
  %conv336 = sext i32 %mul335 to i64
  %add337 = add i64 %conv336, 16
  %mul338 = mul i64 0, %add337
  %add339 = add i64 %mul338, 0
  %neg340 = xor i64 %add339, -1
  %cmp341 = icmp eq i64 %neg340, -1
  %conv342 = zext i1 %cmp341 to i32
  %sub343 = sub nsw i32 0, %conv342
  %conv344 = sext i32 %sub343 to i64
  %88 = load %struct.image*, %struct.image** %img.addr, align 8
  %width345 = getelementptr inbounds %struct.image, %struct.image* %88, i32 0, i32 11
  %89 = load i32, i32* %width345, align 4
  %mul346 = mul nsw i32 0, %89
  %conv347 = sext i32 %mul346 to i64
  %add348 = add i64 %conv347, 16
  %mul349 = mul i64 0, %add348
  %add350 = add i64 %mul349, 1
  %shl351 = shl i64 %add350, 62
  %sub352 = sub i64 %shl351, 1
  %mul353 = mul i64 %sub352, 2
  %add354 = add i64 %mul353, 1
  %sub355 = sub i64 %conv344, %add354
  br label %cond.end.363

cond.false.356:                                   ; preds = %cond.false.324
  %90 = load %struct.image*, %struct.image** %img.addr, align 8
  %width357 = getelementptr inbounds %struct.image, %struct.image* %90, i32 0, i32 11
  %91 = load i32, i32* %width357, align 4
  %mul358 = mul nsw i32 0, %91
  %conv359 = sext i32 %mul358 to i64
  %add360 = add i64 %conv359, 16
  %mul361 = mul i64 0, %add360
  %add362 = add i64 %mul361, 0
  br label %cond.end.363

cond.end.363:                                     ; preds = %cond.false.356, %cond.true.333
  %cond364 = phi i64 [ %sub355, %cond.true.333 ], [ %add362, %cond.false.356 ]
  %cmp365 = icmp eq i64 %cond364, 0
  br i1 %cmp365, label %land.lhs.true.367, label %lor.lhs.false.371

land.lhs.true.367:                                ; preds = %cond.end.363
  %92 = load %struct.image*, %struct.image** %img.addr, align 8
  %width368 = getelementptr inbounds %struct.image, %struct.image* %92, i32 0, i32 11
  %93 = load i32, i32* %width368, align 4
  %cmp369 = icmp slt i32 %93, 0
  br i1 %cmp369, label %cond.true.567, label %lor.lhs.false.371

lor.lhs.false.371:                                ; preds = %land.lhs.true.367, %cond.end.363
  %94 = load %struct.image*, %struct.image** %img.addr, align 8
  %width372 = getelementptr inbounds %struct.image, %struct.image* %94, i32 0, i32 11
  %95 = load i32, i32* %width372, align 4
  %cmp373 = icmp slt i32 %95, 0
  br i1 %cmp373, label %cond.true.375, label %cond.false.461

cond.true.375:                                    ; preds = %lor.lhs.false.371
  br i1 false, label %cond.true.376, label %cond.false.410

cond.true.376:                                    ; preds = %cond.true.375
  %96 = load %struct.image*, %struct.image** %img.addr, align 8
  %width377 = getelementptr inbounds %struct.image, %struct.image* %96, i32 0, i32 11
  %97 = load i32, i32* %width377, align 4
  %mul378 = mul nsw i32 0, %97
  %conv379 = sext i32 %mul378 to i64
  %add380 = add i64 %conv379, 16
  %mul381 = mul i64 0, %add380
  %sub382 = sub i64 %mul381, 1
  %cmp383 = icmp ult i64 %sub382, 0
  br i1 %cmp383, label %cond.true.385, label %cond.false.396

cond.true.385:                                    ; preds = %cond.true.376
  %98 = load %struct.image*, %struct.image** %img.addr, align 8
  %width386 = getelementptr inbounds %struct.image, %struct.image* %98, i32 0, i32 11
  %99 = load i32, i32* %width386, align 4
  %mul387 = mul nsw i32 0, %99
  %conv388 = sext i32 %mul387 to i64
  %add389 = add i64 %conv388, 16
  %mul390 = mul i64 0, %add389
  %add391 = add i64 %mul390, 1
  %shl392 = shl i64 %add391, 62
  %sub393 = sub i64 %shl392, 1
  %mul394 = mul i64 %sub393, 2
  %add395 = add i64 %mul394, 1
  br label %cond.end.403

cond.false.396:                                   ; preds = %cond.true.376
  %100 = load %struct.image*, %struct.image** %img.addr, align 8
  %width397 = getelementptr inbounds %struct.image, %struct.image* %100, i32 0, i32 11
  %101 = load i32, i32* %width397, align 4
  %mul398 = mul nsw i32 0, %101
  %conv399 = sext i32 %mul398 to i64
  %add400 = add i64 %conv399, 16
  %mul401 = mul i64 0, %add400
  %sub402 = sub i64 %mul401, 1
  br label %cond.end.403

cond.end.403:                                     ; preds = %cond.false.396, %cond.true.385
  %cond404 = phi i64 [ %add395, %cond.true.385 ], [ %sub402, %cond.false.396 ]
  %102 = load %struct.image*, %struct.image** %img.addr, align 8
  %width405 = getelementptr inbounds %struct.image, %struct.image* %102, i32 0, i32 11
  %103 = load i32, i32* %width405, align 4
  %conv406 = sext i32 %103 to i64
  %div407 = udiv i64 %cond404, %conv406
  %cmp408 = icmp ult i64 16, %div407
  br i1 %cmp408, label %cond.true.567, label %lor.lhs.false.547

cond.false.410:                                   ; preds = %cond.true.375
  %104 = load %struct.image*, %struct.image** %img.addr, align 8
  %width411 = getelementptr inbounds %struct.image, %struct.image* %104, i32 0, i32 11
  %105 = load i32, i32* %width411, align 4
  %cmp412 = icmp eq i32 %105, -1
  br i1 %cmp412, label %cond.true.414, label %cond.false.415

cond.true.414:                                    ; preds = %cond.false.410
  br i1 false, label %cond.true.567, label %lor.lhs.false.547

cond.false.415:                                   ; preds = %cond.false.410
  %106 = load %struct.image*, %struct.image** %img.addr, align 8
  %width416 = getelementptr inbounds %struct.image, %struct.image* %106, i32 0, i32 11
  %107 = load i32, i32* %width416, align 4
  %mul417 = mul nsw i32 0, %107
  %conv418 = sext i32 %mul417 to i64
  %add419 = add i64 %conv418, 16
  %mul420 = mul i64 0, %add419
  %sub421 = sub i64 %mul420, 1
  %cmp422 = icmp ult i64 %sub421, 0
  br i1 %cmp422, label %cond.true.424, label %cond.false.447

cond.true.424:                                    ; preds = %cond.false.415
  %108 = load %struct.image*, %struct.image** %img.addr, align 8
  %width425 = getelementptr inbounds %struct.image, %struct.image* %108, i32 0, i32 11
  %109 = load i32, i32* %width425, align 4
  %mul426 = mul nsw i32 0, %109
  %conv427 = sext i32 %mul426 to i64
  %add428 = add i64 %conv427, 16
  %mul429 = mul i64 0, %add428
  %add430 = add i64 %mul429, 0
  %neg431 = xor i64 %add430, -1
  %cmp432 = icmp eq i64 %neg431, -1
  %conv433 = zext i1 %cmp432 to i32
  %sub434 = sub nsw i32 0, %conv433
  %conv435 = sext i32 %sub434 to i64
  %110 = load %struct.image*, %struct.image** %img.addr, align 8
  %width436 = getelementptr inbounds %struct.image, %struct.image* %110, i32 0, i32 11
  %111 = load i32, i32* %width436, align 4
  %mul437 = mul nsw i32 0, %111
  %conv438 = sext i32 %mul437 to i64
  %add439 = add i64 %conv438, 16
  %mul440 = mul i64 0, %add439
  %add441 = add i64 %mul440, 1
  %shl442 = shl i64 %add441, 62
  %sub443 = sub i64 %shl442, 1
  %mul444 = mul i64 %sub443, 2
  %add445 = add i64 %mul444, 1
  %sub446 = sub i64 %conv435, %add445
  br label %cond.end.454

cond.false.447:                                   ; preds = %cond.false.415
  %112 = load %struct.image*, %struct.image** %img.addr, align 8
  %width448 = getelementptr inbounds %struct.image, %struct.image* %112, i32 0, i32 11
  %113 = load i32, i32* %width448, align 4
  %mul449 = mul nsw i32 0, %113
  %conv450 = sext i32 %mul449 to i64
  %add451 = add i64 %conv450, 16
  %mul452 = mul i64 0, %add451
  %add453 = add i64 %mul452, 0
  br label %cond.end.454

cond.end.454:                                     ; preds = %cond.false.447, %cond.true.424
  %cond455 = phi i64 [ %sub446, %cond.true.424 ], [ %add453, %cond.false.447 ]
  %114 = load %struct.image*, %struct.image** %img.addr, align 8
  %width456 = getelementptr inbounds %struct.image, %struct.image* %114, i32 0, i32 11
  %115 = load i32, i32* %width456, align 4
  %conv457 = sext i32 %115 to i64
  %div458 = udiv i64 %cond455, %conv457
  %cmp459 = icmp ult i64 %div458, 16
  br i1 %cmp459, label %cond.true.567, label %lor.lhs.false.547

cond.false.461:                                   ; preds = %lor.lhs.false.371
  %116 = load %struct.image*, %struct.image** %img.addr, align 8
  %width462 = getelementptr inbounds %struct.image, %struct.image* %116, i32 0, i32 11
  %117 = load i32, i32* %width462, align 4
  %cmp463 = icmp eq i32 %117, 0
  br i1 %cmp463, label %cond.true.465, label %cond.false.466

cond.true.465:                                    ; preds = %cond.false.461
  br i1 false, label %cond.true.567, label %lor.lhs.false.547

cond.false.466:                                   ; preds = %cond.false.461
  br i1 false, label %cond.true.467, label %cond.false.513

cond.true.467:                                    ; preds = %cond.false.466
  %118 = load %struct.image*, %struct.image** %img.addr, align 8
  %width468 = getelementptr inbounds %struct.image, %struct.image* %118, i32 0, i32 11
  %119 = load i32, i32* %width468, align 4
  %mul469 = mul nsw i32 0, %119
  %conv470 = sext i32 %mul469 to i64
  %add471 = add i64 %conv470, 16
  %mul472 = mul i64 0, %add471
  %sub473 = sub i64 %mul472, 1
  %cmp474 = icmp ult i64 %sub473, 0
  br i1 %cmp474, label %cond.true.476, label %cond.false.499

cond.true.476:                                    ; preds = %cond.true.467
  %120 = load %struct.image*, %struct.image** %img.addr, align 8
  %width477 = getelementptr inbounds %struct.image, %struct.image* %120, i32 0, i32 11
  %121 = load i32, i32* %width477, align 4
  %mul478 = mul nsw i32 0, %121
  %conv479 = sext i32 %mul478 to i64
  %add480 = add i64 %conv479, 16
  %mul481 = mul i64 0, %add480
  %add482 = add i64 %mul481, 0
  %neg483 = xor i64 %add482, -1
  %cmp484 = icmp eq i64 %neg483, -1
  %conv485 = zext i1 %cmp484 to i32
  %sub486 = sub nsw i32 0, %conv485
  %conv487 = sext i32 %sub486 to i64
  %122 = load %struct.image*, %struct.image** %img.addr, align 8
  %width488 = getelementptr inbounds %struct.image, %struct.image* %122, i32 0, i32 11
  %123 = load i32, i32* %width488, align 4
  %mul489 = mul nsw i32 0, %123
  %conv490 = sext i32 %mul489 to i64
  %add491 = add i64 %conv490, 16
  %mul492 = mul i64 0, %add491
  %add493 = add i64 %mul492, 1
  %shl494 = shl i64 %add493, 62
  %sub495 = sub i64 %shl494, 1
  %mul496 = mul i64 %sub495, 2
  %add497 = add i64 %mul496, 1
  %sub498 = sub i64 %conv487, %add497
  br label %cond.end.506

cond.false.499:                                   ; preds = %cond.true.467
  %124 = load %struct.image*, %struct.image** %img.addr, align 8
  %width500 = getelementptr inbounds %struct.image, %struct.image* %124, i32 0, i32 11
  %125 = load i32, i32* %width500, align 4
  %mul501 = mul nsw i32 0, %125
  %conv502 = sext i32 %mul501 to i64
  %add503 = add i64 %conv502, 16
  %mul504 = mul i64 0, %add503
  %add505 = add i64 %mul504, 0
  br label %cond.end.506

cond.end.506:                                     ; preds = %cond.false.499, %cond.true.476
  %cond507 = phi i64 [ %sub498, %cond.true.476 ], [ %add505, %cond.false.499 ]
  %126 = load %struct.image*, %struct.image** %img.addr, align 8
  %width508 = getelementptr inbounds %struct.image, %struct.image* %126, i32 0, i32 11
  %127 = load i32, i32* %width508, align 4
  %conv509 = sext i32 %127 to i64
  %div510 = udiv i64 %cond507, %conv509
  %cmp511 = icmp ult i64 16, %div510
  br i1 %cmp511, label %cond.true.567, label %lor.lhs.false.547

cond.false.513:                                   ; preds = %cond.false.466
  %128 = load %struct.image*, %struct.image** %img.addr, align 8
  %width514 = getelementptr inbounds %struct.image, %struct.image* %128, i32 0, i32 11
  %129 = load i32, i32* %width514, align 4
  %mul515 = mul nsw i32 0, %129
  %conv516 = sext i32 %mul515 to i64
  %add517 = add i64 %conv516, 16
  %mul518 = mul i64 0, %add517
  %sub519 = sub i64 %mul518, 1
  %cmp520 = icmp ult i64 %sub519, 0
  br i1 %cmp520, label %cond.true.522, label %cond.false.533

cond.true.522:                                    ; preds = %cond.false.513
  %130 = load %struct.image*, %struct.image** %img.addr, align 8
  %width523 = getelementptr inbounds %struct.image, %struct.image* %130, i32 0, i32 11
  %131 = load i32, i32* %width523, align 4
  %mul524 = mul nsw i32 0, %131
  %conv525 = sext i32 %mul524 to i64
  %add526 = add i64 %conv525, 16
  %mul527 = mul i64 0, %add526
  %add528 = add i64 %mul527, 1
  %shl529 = shl i64 %add528, 62
  %sub530 = sub i64 %shl529, 1
  %mul531 = mul i64 %sub530, 2
  %add532 = add i64 %mul531, 1
  br label %cond.end.540

cond.false.533:                                   ; preds = %cond.false.513
  %132 = load %struct.image*, %struct.image** %img.addr, align 8
  %width534 = getelementptr inbounds %struct.image, %struct.image* %132, i32 0, i32 11
  %133 = load i32, i32* %width534, align 4
  %mul535 = mul nsw i32 0, %133
  %conv536 = sext i32 %mul535 to i64
  %add537 = add i64 %conv536, 16
  %mul538 = mul i64 0, %add537
  %sub539 = sub i64 %mul538, 1
  br label %cond.end.540

cond.end.540:                                     ; preds = %cond.false.533, %cond.true.522
  %cond541 = phi i64 [ %add532, %cond.true.522 ], [ %sub539, %cond.false.533 ]
  %134 = load %struct.image*, %struct.image** %img.addr, align 8
  %width542 = getelementptr inbounds %struct.image, %struct.image* %134, i32 0, i32 11
  %135 = load i32, i32* %width542, align 4
  %conv543 = sext i32 %135 to i64
  %div544 = udiv i64 %cond541, %conv543
  %cmp545 = icmp ult i64 %div544, 16
  br i1 %cmp545, label %cond.true.567, label %lor.lhs.false.547

lor.lhs.false.547:                                ; preds = %cond.end.540, %cond.end.506, %cond.true.465, %cond.end.454, %cond.true.414, %cond.end.403
  %136 = load %struct.image*, %struct.image** %img.addr, align 8
  %width548 = getelementptr inbounds %struct.image, %struct.image* %136, i32 0, i32 11
  %137 = load i32, i32* %width548, align 4
  %conv549 = sext i32 %137 to i64
  %mul550 = mul i64 16, %conv549
  %mul551 = mul i64 0, %mul550
  %sub552 = sub i64 %mul551, 1
  %cmp553 = icmp ult i64 %sub552, 0
  br i1 %cmp553, label %land.lhs.true.555, label %lor.lhs.false.561

land.lhs.true.555:                                ; preds = %lor.lhs.false.547
  %138 = load %struct.image*, %struct.image** %img.addr, align 8
  %width556 = getelementptr inbounds %struct.image, %struct.image* %138, i32 0, i32 11
  %139 = load i32, i32* %width556, align 4
  %conv557 = sext i32 %139 to i64
  %mul558 = mul i64 16, %conv557
  %cmp559 = icmp ult i64 %mul558, -128
  br i1 %cmp559, label %cond.true.567, label %lor.lhs.false.561

lor.lhs.false.561:                                ; preds = %land.lhs.true.555, %lor.lhs.false.547
  %140 = load %struct.image*, %struct.image** %img.addr, align 8
  %width562 = getelementptr inbounds %struct.image, %struct.image* %140, i32 0, i32 11
  %141 = load i32, i32* %width562, align 4
  %conv563 = sext i32 %141 to i64
  %mul564 = mul i64 16, %conv563
  %cmp565 = icmp ult i64 127, %mul564
  br i1 %cmp565, label %cond.true.567, label %cond.false.593

cond.true.567:                                    ; preds = %lor.lhs.false.561, %land.lhs.true.555, %cond.end.540, %cond.end.506, %cond.true.465, %cond.end.454, %cond.true.414, %cond.end.403, %land.lhs.true.367
  %142 = load %struct.image*, %struct.image** %img.addr, align 8
  %width568 = getelementptr inbounds %struct.image, %struct.image* %142, i32 0, i32 11
  %143 = load i32, i32* %width568, align 4
  %conv569 = trunc i32 %143 to i8
  %conv570 = zext i8 %conv569 to i32
  %mul571 = mul nsw i32 16, %conv570
  %cmp572 = icmp sle i32 %mul571, 127
  br i1 %cmp572, label %cond.true.574, label %cond.false.581

cond.true.574:                                    ; preds = %cond.true.567
  %144 = load %struct.image*, %struct.image** %img.addr, align 8
  %width575 = getelementptr inbounds %struct.image, %struct.image* %144, i32 0, i32 11
  %145 = load i32, i32* %width575, align 4
  %conv576 = trunc i32 %145 to i8
  %conv577 = zext i8 %conv576 to i32
  %mul578 = mul nsw i32 16, %conv577
  %conv579 = trunc i32 %mul578 to i8
  %conv580 = sext i8 %conv579 to i32
  br label %cond.end.590

cond.false.581:                                   ; preds = %cond.true.567
  %146 = load %struct.image*, %struct.image** %img.addr, align 8
  %width582 = getelementptr inbounds %struct.image, %struct.image* %146, i32 0, i32 11
  %147 = load i32, i32* %width582, align 4
  %conv583 = trunc i32 %147 to i8
  %conv584 = zext i8 %conv583 to i32
  %mul585 = mul nsw i32 16, %conv584
  %sub586 = sub nsw i32 %mul585, -128
  %conv587 = trunc i32 %sub586 to i8
  %conv588 = sext i8 %conv587 to i32
  %add589 = add nsw i32 %conv588, -128
  br label %cond.end.590

cond.end.590:                                     ; preds = %cond.false.581, %cond.true.574
  %cond591 = phi i32 [ %conv580, %cond.true.574 ], [ %add589, %cond.false.581 ]
  %conv592 = sext i32 %cond591 to i64
  store i64 %conv592, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.593:                                   ; preds = %lor.lhs.false.561
  %148 = load %struct.image*, %struct.image** %img.addr, align 8
  %width594 = getelementptr inbounds %struct.image, %struct.image* %148, i32 0, i32 11
  %149 = load i32, i32* %width594, align 4
  %conv595 = trunc i32 %149 to i8
  %conv596 = zext i8 %conv595 to i32
  %mul597 = mul nsw i32 16, %conv596
  %cmp598 = icmp sle i32 %mul597, 127
  br i1 %cmp598, label %cond.true.600, label %cond.false.607

cond.true.600:                                    ; preds = %cond.false.593
  %150 = load %struct.image*, %struct.image** %img.addr, align 8
  %width601 = getelementptr inbounds %struct.image, %struct.image* %150, i32 0, i32 11
  %151 = load i32, i32* %width601, align 4
  %conv602 = trunc i32 %151 to i8
  %conv603 = zext i8 %conv602 to i32
  %mul604 = mul nsw i32 16, %conv603
  %conv605 = trunc i32 %mul604 to i8
  %conv606 = sext i8 %conv605 to i32
  br label %cond.end.616

cond.false.607:                                   ; preds = %cond.false.593
  %152 = load %struct.image*, %struct.image** %img.addr, align 8
  %width608 = getelementptr inbounds %struct.image, %struct.image* %152, i32 0, i32 11
  %153 = load i32, i32* %width608, align 4
  %conv609 = trunc i32 %153 to i8
  %conv610 = zext i8 %conv609 to i32
  %mul611 = mul nsw i32 16, %conv610
  %sub612 = sub nsw i32 %mul611, -128
  %conv613 = trunc i32 %sub612 to i8
  %conv614 = sext i8 %conv613 to i32
  %add615 = add nsw i32 %conv614, -128
  br label %cond.end.616

cond.end.616:                                     ; preds = %cond.false.607, %cond.true.600
  %cond617 = phi i32 [ %conv606, %cond.true.600 ], [ %add615, %cond.false.607 ]
  %conv618 = sext i32 %cond617 to i64
  store i64 %conv618, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.619:                                   ; preds = %for.end
  br i1 false, label %cond.true.620, label %cond.false.1241

cond.true.620:                                    ; preds = %cond.false.619
  br i1 false, label %cond.true.621, label %cond.false.946

cond.true.621:                                    ; preds = %cond.true.620
  %154 = load %struct.image*, %struct.image** %img.addr, align 8
  %width622 = getelementptr inbounds %struct.image, %struct.image* %154, i32 0, i32 11
  %155 = load i32, i32* %width622, align 4
  %conv623 = trunc i32 %155 to i16
  %conv624 = sext i16 %conv623 to i32
  %mul625 = mul nsw i32 0, %conv624
  %add626 = add nsw i32 %mul625, 16
  %mul627 = mul nsw i32 0, %add626
  %sub628 = sub nsw i32 %mul627, 1
  %cmp629 = icmp slt i32 %sub628, 0
  br i1 %cmp629, label %cond.true.631, label %cond.false.655

cond.true.631:                                    ; preds = %cond.true.621
  %156 = load %struct.image*, %struct.image** %img.addr, align 8
  %width632 = getelementptr inbounds %struct.image, %struct.image* %156, i32 0, i32 11
  %157 = load i32, i32* %width632, align 4
  %conv633 = trunc i32 %157 to i16
  %conv634 = sext i16 %conv633 to i32
  %mul635 = mul nsw i32 0, %conv634
  %add636 = add nsw i32 %mul635, 16
  %mul637 = mul nsw i32 0, %add636
  %add638 = add nsw i32 %mul637, 0
  %neg639 = xor i32 %add638, -1
  %cmp640 = icmp eq i32 %neg639, -1
  %conv641 = zext i1 %cmp640 to i32
  %sub642 = sub nsw i32 0, %conv641
  %158 = load %struct.image*, %struct.image** %img.addr, align 8
  %width643 = getelementptr inbounds %struct.image, %struct.image* %158, i32 0, i32 11
  %159 = load i32, i32* %width643, align 4
  %conv644 = trunc i32 %159 to i16
  %conv645 = sext i16 %conv644 to i32
  %mul646 = mul nsw i32 0, %conv645
  %add647 = add nsw i32 %mul646, 16
  %mul648 = mul nsw i32 0, %add647
  %add649 = add nsw i32 %mul648, 1
  %shl650 = shl i32 %add649, 30
  %sub651 = sub nsw i32 %shl650, 1
  %mul652 = mul nsw i32 %sub651, 2
  %add653 = add nsw i32 %mul652, 1
  %sub654 = sub nsw i32 %sub642, %add653
  br label %cond.end.663

cond.false.655:                                   ; preds = %cond.true.621
  %160 = load %struct.image*, %struct.image** %img.addr, align 8
  %width656 = getelementptr inbounds %struct.image, %struct.image* %160, i32 0, i32 11
  %161 = load i32, i32* %width656, align 4
  %conv657 = trunc i32 %161 to i16
  %conv658 = sext i16 %conv657 to i32
  %mul659 = mul nsw i32 0, %conv658
  %add660 = add nsw i32 %mul659, 16
  %mul661 = mul nsw i32 0, %add660
  %add662 = add nsw i32 %mul661, 0
  br label %cond.end.663

cond.end.663:                                     ; preds = %cond.false.655, %cond.true.631
  %cond664 = phi i32 [ %sub654, %cond.true.631 ], [ %add662, %cond.false.655 ]
  %cmp665 = icmp eq i32 %cond664, 0
  br i1 %cmp665, label %land.lhs.true.667, label %lor.lhs.false.673

land.lhs.true.667:                                ; preds = %cond.end.663
  %162 = load %struct.image*, %struct.image** %img.addr, align 8
  %width668 = getelementptr inbounds %struct.image, %struct.image* %162, i32 0, i32 11
  %163 = load i32, i32* %width668, align 4
  %conv669 = trunc i32 %163 to i16
  %conv670 = sext i16 %conv669 to i32
  %cmp671 = icmp slt i32 %conv670, 0
  br i1 %cmp671, label %cond.true.894, label %lor.lhs.false.673

lor.lhs.false.673:                                ; preds = %land.lhs.true.667, %cond.end.663
  %164 = load %struct.image*, %struct.image** %img.addr, align 8
  %width674 = getelementptr inbounds %struct.image, %struct.image* %164, i32 0, i32 11
  %165 = load i32, i32* %width674, align 4
  %conv675 = trunc i32 %165 to i16
  %conv676 = sext i16 %conv675 to i32
  %cmp677 = icmp slt i32 %conv676, 0
  br i1 %cmp677, label %cond.true.679, label %cond.false.775

cond.true.679:                                    ; preds = %lor.lhs.false.673
  br i1 false, label %cond.true.680, label %cond.false.718

cond.true.680:                                    ; preds = %cond.true.679
  %166 = load %struct.image*, %struct.image** %img.addr, align 8
  %width681 = getelementptr inbounds %struct.image, %struct.image* %166, i32 0, i32 11
  %167 = load i32, i32* %width681, align 4
  %conv682 = trunc i32 %167 to i16
  %conv683 = sext i16 %conv682 to i32
  %mul684 = mul nsw i32 0, %conv683
  %add685 = add nsw i32 %mul684, 16
  %mul686 = mul nsw i32 0, %add685
  %sub687 = sub nsw i32 %mul686, 1
  %cmp688 = icmp slt i32 %sub687, 0
  br i1 %cmp688, label %cond.true.690, label %cond.false.702

cond.true.690:                                    ; preds = %cond.true.680
  %168 = load %struct.image*, %struct.image** %img.addr, align 8
  %width691 = getelementptr inbounds %struct.image, %struct.image* %168, i32 0, i32 11
  %169 = load i32, i32* %width691, align 4
  %conv692 = trunc i32 %169 to i16
  %conv693 = sext i16 %conv692 to i32
  %mul694 = mul nsw i32 0, %conv693
  %add695 = add nsw i32 %mul694, 16
  %mul696 = mul nsw i32 0, %add695
  %add697 = add nsw i32 %mul696, 1
  %shl698 = shl i32 %add697, 30
  %sub699 = sub nsw i32 %shl698, 1
  %mul700 = mul nsw i32 %sub699, 2
  %add701 = add nsw i32 %mul700, 1
  br label %cond.end.710

cond.false.702:                                   ; preds = %cond.true.680
  %170 = load %struct.image*, %struct.image** %img.addr, align 8
  %width703 = getelementptr inbounds %struct.image, %struct.image* %170, i32 0, i32 11
  %171 = load i32, i32* %width703, align 4
  %conv704 = trunc i32 %171 to i16
  %conv705 = sext i16 %conv704 to i32
  %mul706 = mul nsw i32 0, %conv705
  %add707 = add nsw i32 %mul706, 16
  %mul708 = mul nsw i32 0, %add707
  %sub709 = sub nsw i32 %mul708, 1
  br label %cond.end.710

cond.end.710:                                     ; preds = %cond.false.702, %cond.true.690
  %cond711 = phi i32 [ %add701, %cond.true.690 ], [ %sub709, %cond.false.702 ]
  %172 = load %struct.image*, %struct.image** %img.addr, align 8
  %width712 = getelementptr inbounds %struct.image, %struct.image* %172, i32 0, i32 11
  %173 = load i32, i32* %width712, align 4
  %conv713 = trunc i32 %173 to i16
  %conv714 = sext i16 %conv713 to i32
  %div715 = sdiv i32 %cond711, %conv714
  %cmp716 = icmp slt i32 16, %div715
  br i1 %cmp716, label %cond.true.894, label %lor.lhs.false.871

cond.false.718:                                   ; preds = %cond.true.679
  %174 = load %struct.image*, %struct.image** %img.addr, align 8
  %width719 = getelementptr inbounds %struct.image, %struct.image* %174, i32 0, i32 11
  %175 = load i32, i32* %width719, align 4
  %conv720 = trunc i32 %175 to i16
  %conv721 = sext i16 %conv720 to i32
  %cmp722 = icmp eq i32 %conv721, -1
  br i1 %cmp722, label %cond.true.724, label %cond.false.725

cond.true.724:                                    ; preds = %cond.false.718
  br i1 false, label %cond.true.894, label %lor.lhs.false.871

cond.false.725:                                   ; preds = %cond.false.718
  %176 = load %struct.image*, %struct.image** %img.addr, align 8
  %width726 = getelementptr inbounds %struct.image, %struct.image* %176, i32 0, i32 11
  %177 = load i32, i32* %width726, align 4
  %conv727 = trunc i32 %177 to i16
  %conv728 = sext i16 %conv727 to i32
  %mul729 = mul nsw i32 0, %conv728
  %add730 = add nsw i32 %mul729, 16
  %mul731 = mul nsw i32 0, %add730
  %sub732 = sub nsw i32 %mul731, 1
  %cmp733 = icmp slt i32 %sub732, 0
  br i1 %cmp733, label %cond.true.735, label %cond.false.759

cond.true.735:                                    ; preds = %cond.false.725
  %178 = load %struct.image*, %struct.image** %img.addr, align 8
  %width736 = getelementptr inbounds %struct.image, %struct.image* %178, i32 0, i32 11
  %179 = load i32, i32* %width736, align 4
  %conv737 = trunc i32 %179 to i16
  %conv738 = sext i16 %conv737 to i32
  %mul739 = mul nsw i32 0, %conv738
  %add740 = add nsw i32 %mul739, 16
  %mul741 = mul nsw i32 0, %add740
  %add742 = add nsw i32 %mul741, 0
  %neg743 = xor i32 %add742, -1
  %cmp744 = icmp eq i32 %neg743, -1
  %conv745 = zext i1 %cmp744 to i32
  %sub746 = sub nsw i32 0, %conv745
  %180 = load %struct.image*, %struct.image** %img.addr, align 8
  %width747 = getelementptr inbounds %struct.image, %struct.image* %180, i32 0, i32 11
  %181 = load i32, i32* %width747, align 4
  %conv748 = trunc i32 %181 to i16
  %conv749 = sext i16 %conv748 to i32
  %mul750 = mul nsw i32 0, %conv749
  %add751 = add nsw i32 %mul750, 16
  %mul752 = mul nsw i32 0, %add751
  %add753 = add nsw i32 %mul752, 1
  %shl754 = shl i32 %add753, 30
  %sub755 = sub nsw i32 %shl754, 1
  %mul756 = mul nsw i32 %sub755, 2
  %add757 = add nsw i32 %mul756, 1
  %sub758 = sub nsw i32 %sub746, %add757
  br label %cond.end.767

cond.false.759:                                   ; preds = %cond.false.725
  %182 = load %struct.image*, %struct.image** %img.addr, align 8
  %width760 = getelementptr inbounds %struct.image, %struct.image* %182, i32 0, i32 11
  %183 = load i32, i32* %width760, align 4
  %conv761 = trunc i32 %183 to i16
  %conv762 = sext i16 %conv761 to i32
  %mul763 = mul nsw i32 0, %conv762
  %add764 = add nsw i32 %mul763, 16
  %mul765 = mul nsw i32 0, %add764
  %add766 = add nsw i32 %mul765, 0
  br label %cond.end.767

cond.end.767:                                     ; preds = %cond.false.759, %cond.true.735
  %cond768 = phi i32 [ %sub758, %cond.true.735 ], [ %add766, %cond.false.759 ]
  %184 = load %struct.image*, %struct.image** %img.addr, align 8
  %width769 = getelementptr inbounds %struct.image, %struct.image* %184, i32 0, i32 11
  %185 = load i32, i32* %width769, align 4
  %conv770 = trunc i32 %185 to i16
  %conv771 = sext i16 %conv770 to i32
  %div772 = sdiv i32 %cond768, %conv771
  %cmp773 = icmp slt i32 %div772, 16
  br i1 %cmp773, label %cond.true.894, label %lor.lhs.false.871

cond.false.775:                                   ; preds = %lor.lhs.false.673
  %186 = load %struct.image*, %struct.image** %img.addr, align 8
  %width776 = getelementptr inbounds %struct.image, %struct.image* %186, i32 0, i32 11
  %187 = load i32, i32* %width776, align 4
  %conv777 = trunc i32 %187 to i16
  %conv778 = sext i16 %conv777 to i32
  %cmp779 = icmp eq i32 %conv778, 0
  br i1 %cmp779, label %cond.true.781, label %cond.false.782

cond.true.781:                                    ; preds = %cond.false.775
  br i1 false, label %cond.true.894, label %lor.lhs.false.871

cond.false.782:                                   ; preds = %cond.false.775
  br i1 false, label %cond.true.783, label %cond.false.833

cond.true.783:                                    ; preds = %cond.false.782
  %188 = load %struct.image*, %struct.image** %img.addr, align 8
  %width784 = getelementptr inbounds %struct.image, %struct.image* %188, i32 0, i32 11
  %189 = load i32, i32* %width784, align 4
  %conv785 = trunc i32 %189 to i16
  %conv786 = sext i16 %conv785 to i32
  %mul787 = mul nsw i32 0, %conv786
  %add788 = add nsw i32 %mul787, 16
  %mul789 = mul nsw i32 0, %add788
  %sub790 = sub nsw i32 %mul789, 1
  %cmp791 = icmp slt i32 %sub790, 0
  br i1 %cmp791, label %cond.true.793, label %cond.false.817

cond.true.793:                                    ; preds = %cond.true.783
  %190 = load %struct.image*, %struct.image** %img.addr, align 8
  %width794 = getelementptr inbounds %struct.image, %struct.image* %190, i32 0, i32 11
  %191 = load i32, i32* %width794, align 4
  %conv795 = trunc i32 %191 to i16
  %conv796 = sext i16 %conv795 to i32
  %mul797 = mul nsw i32 0, %conv796
  %add798 = add nsw i32 %mul797, 16
  %mul799 = mul nsw i32 0, %add798
  %add800 = add nsw i32 %mul799, 0
  %neg801 = xor i32 %add800, -1
  %cmp802 = icmp eq i32 %neg801, -1
  %conv803 = zext i1 %cmp802 to i32
  %sub804 = sub nsw i32 0, %conv803
  %192 = load %struct.image*, %struct.image** %img.addr, align 8
  %width805 = getelementptr inbounds %struct.image, %struct.image* %192, i32 0, i32 11
  %193 = load i32, i32* %width805, align 4
  %conv806 = trunc i32 %193 to i16
  %conv807 = sext i16 %conv806 to i32
  %mul808 = mul nsw i32 0, %conv807
  %add809 = add nsw i32 %mul808, 16
  %mul810 = mul nsw i32 0, %add809
  %add811 = add nsw i32 %mul810, 1
  %shl812 = shl i32 %add811, 30
  %sub813 = sub nsw i32 %shl812, 1
  %mul814 = mul nsw i32 %sub813, 2
  %add815 = add nsw i32 %mul814, 1
  %sub816 = sub nsw i32 %sub804, %add815
  br label %cond.end.825

cond.false.817:                                   ; preds = %cond.true.783
  %194 = load %struct.image*, %struct.image** %img.addr, align 8
  %width818 = getelementptr inbounds %struct.image, %struct.image* %194, i32 0, i32 11
  %195 = load i32, i32* %width818, align 4
  %conv819 = trunc i32 %195 to i16
  %conv820 = sext i16 %conv819 to i32
  %mul821 = mul nsw i32 0, %conv820
  %add822 = add nsw i32 %mul821, 16
  %mul823 = mul nsw i32 0, %add822
  %add824 = add nsw i32 %mul823, 0
  br label %cond.end.825

cond.end.825:                                     ; preds = %cond.false.817, %cond.true.793
  %cond826 = phi i32 [ %sub816, %cond.true.793 ], [ %add824, %cond.false.817 ]
  %196 = load %struct.image*, %struct.image** %img.addr, align 8
  %width827 = getelementptr inbounds %struct.image, %struct.image* %196, i32 0, i32 11
  %197 = load i32, i32* %width827, align 4
  %conv828 = trunc i32 %197 to i16
  %conv829 = sext i16 %conv828 to i32
  %div830 = sdiv i32 %cond826, %conv829
  %cmp831 = icmp slt i32 16, %div830
  br i1 %cmp831, label %cond.true.894, label %lor.lhs.false.871

cond.false.833:                                   ; preds = %cond.false.782
  %198 = load %struct.image*, %struct.image** %img.addr, align 8
  %width834 = getelementptr inbounds %struct.image, %struct.image* %198, i32 0, i32 11
  %199 = load i32, i32* %width834, align 4
  %conv835 = trunc i32 %199 to i16
  %conv836 = sext i16 %conv835 to i32
  %mul837 = mul nsw i32 0, %conv836
  %add838 = add nsw i32 %mul837, 16
  %mul839 = mul nsw i32 0, %add838
  %sub840 = sub nsw i32 %mul839, 1
  %cmp841 = icmp slt i32 %sub840, 0
  br i1 %cmp841, label %cond.true.843, label %cond.false.855

cond.true.843:                                    ; preds = %cond.false.833
  %200 = load %struct.image*, %struct.image** %img.addr, align 8
  %width844 = getelementptr inbounds %struct.image, %struct.image* %200, i32 0, i32 11
  %201 = load i32, i32* %width844, align 4
  %conv845 = trunc i32 %201 to i16
  %conv846 = sext i16 %conv845 to i32
  %mul847 = mul nsw i32 0, %conv846
  %add848 = add nsw i32 %mul847, 16
  %mul849 = mul nsw i32 0, %add848
  %add850 = add nsw i32 %mul849, 1
  %shl851 = shl i32 %add850, 30
  %sub852 = sub nsw i32 %shl851, 1
  %mul853 = mul nsw i32 %sub852, 2
  %add854 = add nsw i32 %mul853, 1
  br label %cond.end.863

cond.false.855:                                   ; preds = %cond.false.833
  %202 = load %struct.image*, %struct.image** %img.addr, align 8
  %width856 = getelementptr inbounds %struct.image, %struct.image* %202, i32 0, i32 11
  %203 = load i32, i32* %width856, align 4
  %conv857 = trunc i32 %203 to i16
  %conv858 = sext i16 %conv857 to i32
  %mul859 = mul nsw i32 0, %conv858
  %add860 = add nsw i32 %mul859, 16
  %mul861 = mul nsw i32 0, %add860
  %sub862 = sub nsw i32 %mul861, 1
  br label %cond.end.863

cond.end.863:                                     ; preds = %cond.false.855, %cond.true.843
  %cond864 = phi i32 [ %add854, %cond.true.843 ], [ %sub862, %cond.false.855 ]
  %204 = load %struct.image*, %struct.image** %img.addr, align 8
  %width865 = getelementptr inbounds %struct.image, %struct.image* %204, i32 0, i32 11
  %205 = load i32, i32* %width865, align 4
  %conv866 = trunc i32 %205 to i16
  %conv867 = sext i16 %conv866 to i32
  %div868 = sdiv i32 %cond864, %conv867
  %cmp869 = icmp slt i32 %div868, 16
  br i1 %cmp869, label %cond.true.894, label %lor.lhs.false.871

lor.lhs.false.871:                                ; preds = %cond.end.863, %cond.end.825, %cond.true.781, %cond.end.767, %cond.true.724, %cond.end.710
  %206 = load %struct.image*, %struct.image** %img.addr, align 8
  %width872 = getelementptr inbounds %struct.image, %struct.image* %206, i32 0, i32 11
  %207 = load i32, i32* %width872, align 4
  %conv873 = trunc i32 %207 to i16
  %conv874 = sext i16 %conv873 to i32
  %mul875 = mul nsw i32 16, %conv874
  %mul876 = mul nsw i32 0, %mul875
  %sub877 = sub nsw i32 %mul876, 1
  %cmp878 = icmp slt i32 %sub877, 0
  br i1 %cmp878, label %land.lhs.true.880, label %lor.lhs.false.887

land.lhs.true.880:                                ; preds = %lor.lhs.false.871
  %208 = load %struct.image*, %struct.image** %img.addr, align 8
  %width881 = getelementptr inbounds %struct.image, %struct.image* %208, i32 0, i32 11
  %209 = load i32, i32* %width881, align 4
  %conv882 = trunc i32 %209 to i16
  %conv883 = sext i16 %conv882 to i32
  %mul884 = mul nsw i32 16, %conv883
  %cmp885 = icmp slt i32 %mul884, -32768
  br i1 %cmp885, label %cond.true.894, label %lor.lhs.false.887

lor.lhs.false.887:                                ; preds = %land.lhs.true.880, %lor.lhs.false.871
  %210 = load %struct.image*, %struct.image** %img.addr, align 8
  %width888 = getelementptr inbounds %struct.image, %struct.image* %210, i32 0, i32 11
  %211 = load i32, i32* %width888, align 4
  %conv889 = trunc i32 %211 to i16
  %conv890 = sext i16 %conv889 to i32
  %mul891 = mul nsw i32 16, %conv890
  %cmp892 = icmp slt i32 32767, %mul891
  br i1 %cmp892, label %cond.true.894, label %cond.false.920

cond.true.894:                                    ; preds = %lor.lhs.false.887, %land.lhs.true.880, %cond.end.863, %cond.end.825, %cond.true.781, %cond.end.767, %cond.true.724, %cond.end.710, %land.lhs.true.667
  %212 = load %struct.image*, %struct.image** %img.addr, align 8
  %width895 = getelementptr inbounds %struct.image, %struct.image* %212, i32 0, i32 11
  %213 = load i32, i32* %width895, align 4
  %conv896 = trunc i32 %213 to i16
  %conv897 = zext i16 %conv896 to i32
  %mul898 = mul nsw i32 16, %conv897
  %cmp899 = icmp sle i32 %mul898, 32767
  br i1 %cmp899, label %cond.true.901, label %cond.false.908

cond.true.901:                                    ; preds = %cond.true.894
  %214 = load %struct.image*, %struct.image** %img.addr, align 8
  %width902 = getelementptr inbounds %struct.image, %struct.image* %214, i32 0, i32 11
  %215 = load i32, i32* %width902, align 4
  %conv903 = trunc i32 %215 to i16
  %conv904 = zext i16 %conv903 to i32
  %mul905 = mul nsw i32 16, %conv904
  %conv906 = trunc i32 %mul905 to i16
  %conv907 = sext i16 %conv906 to i32
  br label %cond.end.917

cond.false.908:                                   ; preds = %cond.true.894
  %216 = load %struct.image*, %struct.image** %img.addr, align 8
  %width909 = getelementptr inbounds %struct.image, %struct.image* %216, i32 0, i32 11
  %217 = load i32, i32* %width909, align 4
  %conv910 = trunc i32 %217 to i16
  %conv911 = zext i16 %conv910 to i32
  %mul912 = mul nsw i32 16, %conv911
  %sub913 = sub nsw i32 %mul912, -32768
  %conv914 = trunc i32 %sub913 to i16
  %conv915 = sext i16 %conv914 to i32
  %add916 = add nsw i32 %conv915, -32768
  br label %cond.end.917

cond.end.917:                                     ; preds = %cond.false.908, %cond.true.901
  %cond918 = phi i32 [ %conv907, %cond.true.901 ], [ %add916, %cond.false.908 ]
  %conv919 = sext i32 %cond918 to i64
  store i64 %conv919, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.920:                                   ; preds = %lor.lhs.false.887
  %218 = load %struct.image*, %struct.image** %img.addr, align 8
  %width921 = getelementptr inbounds %struct.image, %struct.image* %218, i32 0, i32 11
  %219 = load i32, i32* %width921, align 4
  %conv922 = trunc i32 %219 to i16
  %conv923 = zext i16 %conv922 to i32
  %mul924 = mul nsw i32 16, %conv923
  %cmp925 = icmp sle i32 %mul924, 32767
  br i1 %cmp925, label %cond.true.927, label %cond.false.934

cond.true.927:                                    ; preds = %cond.false.920
  %220 = load %struct.image*, %struct.image** %img.addr, align 8
  %width928 = getelementptr inbounds %struct.image, %struct.image* %220, i32 0, i32 11
  %221 = load i32, i32* %width928, align 4
  %conv929 = trunc i32 %221 to i16
  %conv930 = zext i16 %conv929 to i32
  %mul931 = mul nsw i32 16, %conv930
  %conv932 = trunc i32 %mul931 to i16
  %conv933 = sext i16 %conv932 to i32
  br label %cond.end.943

cond.false.934:                                   ; preds = %cond.false.920
  %222 = load %struct.image*, %struct.image** %img.addr, align 8
  %width935 = getelementptr inbounds %struct.image, %struct.image* %222, i32 0, i32 11
  %223 = load i32, i32* %width935, align 4
  %conv936 = trunc i32 %223 to i16
  %conv937 = zext i16 %conv936 to i32
  %mul938 = mul nsw i32 16, %conv937
  %sub939 = sub nsw i32 %mul938, -32768
  %conv940 = trunc i32 %sub939 to i16
  %conv941 = sext i16 %conv940 to i32
  %add942 = add nsw i32 %conv941, -32768
  br label %cond.end.943

cond.end.943:                                     ; preds = %cond.false.934, %cond.true.927
  %cond944 = phi i32 [ %conv933, %cond.true.927 ], [ %add942, %cond.false.934 ]
  %conv945 = sext i32 %cond944 to i64
  store i64 %conv945, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.946:                                   ; preds = %cond.true.620
  %224 = load %struct.image*, %struct.image** %img.addr, align 8
  %width947 = getelementptr inbounds %struct.image, %struct.image* %224, i32 0, i32 11
  %225 = load i32, i32* %width947, align 4
  %mul948 = mul nsw i32 0, %225
  %conv949 = sext i32 %mul948 to i64
  %add950 = add i64 %conv949, 16
  %mul951 = mul i64 0, %add950
  %sub952 = sub i64 %mul951, 1
  %cmp953 = icmp ult i64 %sub952, 0
  br i1 %cmp953, label %cond.true.955, label %cond.false.978

cond.true.955:                                    ; preds = %cond.false.946
  %226 = load %struct.image*, %struct.image** %img.addr, align 8
  %width956 = getelementptr inbounds %struct.image, %struct.image* %226, i32 0, i32 11
  %227 = load i32, i32* %width956, align 4
  %mul957 = mul nsw i32 0, %227
  %conv958 = sext i32 %mul957 to i64
  %add959 = add i64 %conv958, 16
  %mul960 = mul i64 0, %add959
  %add961 = add i64 %mul960, 0
  %neg962 = xor i64 %add961, -1
  %cmp963 = icmp eq i64 %neg962, -1
  %conv964 = zext i1 %cmp963 to i32
  %sub965 = sub nsw i32 0, %conv964
  %conv966 = sext i32 %sub965 to i64
  %228 = load %struct.image*, %struct.image** %img.addr, align 8
  %width967 = getelementptr inbounds %struct.image, %struct.image* %228, i32 0, i32 11
  %229 = load i32, i32* %width967, align 4
  %mul968 = mul nsw i32 0, %229
  %conv969 = sext i32 %mul968 to i64
  %add970 = add i64 %conv969, 16
  %mul971 = mul i64 0, %add970
  %add972 = add i64 %mul971, 1
  %shl973 = shl i64 %add972, 62
  %sub974 = sub i64 %shl973, 1
  %mul975 = mul i64 %sub974, 2
  %add976 = add i64 %mul975, 1
  %sub977 = sub i64 %conv966, %add976
  br label %cond.end.985

cond.false.978:                                   ; preds = %cond.false.946
  %230 = load %struct.image*, %struct.image** %img.addr, align 8
  %width979 = getelementptr inbounds %struct.image, %struct.image* %230, i32 0, i32 11
  %231 = load i32, i32* %width979, align 4
  %mul980 = mul nsw i32 0, %231
  %conv981 = sext i32 %mul980 to i64
  %add982 = add i64 %conv981, 16
  %mul983 = mul i64 0, %add982
  %add984 = add i64 %mul983, 0
  br label %cond.end.985

cond.end.985:                                     ; preds = %cond.false.978, %cond.true.955
  %cond986 = phi i64 [ %sub977, %cond.true.955 ], [ %add984, %cond.false.978 ]
  %cmp987 = icmp eq i64 %cond986, 0
  br i1 %cmp987, label %land.lhs.true.989, label %lor.lhs.false.993

land.lhs.true.989:                                ; preds = %cond.end.985
  %232 = load %struct.image*, %struct.image** %img.addr, align 8
  %width990 = getelementptr inbounds %struct.image, %struct.image* %232, i32 0, i32 11
  %233 = load i32, i32* %width990, align 4
  %cmp991 = icmp slt i32 %233, 0
  br i1 %cmp991, label %cond.true.1189, label %lor.lhs.false.993

lor.lhs.false.993:                                ; preds = %land.lhs.true.989, %cond.end.985
  %234 = load %struct.image*, %struct.image** %img.addr, align 8
  %width994 = getelementptr inbounds %struct.image, %struct.image* %234, i32 0, i32 11
  %235 = load i32, i32* %width994, align 4
  %cmp995 = icmp slt i32 %235, 0
  br i1 %cmp995, label %cond.true.997, label %cond.false.1083

cond.true.997:                                    ; preds = %lor.lhs.false.993
  br i1 false, label %cond.true.998, label %cond.false.1032

cond.true.998:                                    ; preds = %cond.true.997
  %236 = load %struct.image*, %struct.image** %img.addr, align 8
  %width999 = getelementptr inbounds %struct.image, %struct.image* %236, i32 0, i32 11
  %237 = load i32, i32* %width999, align 4
  %mul1000 = mul nsw i32 0, %237
  %conv1001 = sext i32 %mul1000 to i64
  %add1002 = add i64 %conv1001, 16
  %mul1003 = mul i64 0, %add1002
  %sub1004 = sub i64 %mul1003, 1
  %cmp1005 = icmp ult i64 %sub1004, 0
  br i1 %cmp1005, label %cond.true.1007, label %cond.false.1018

cond.true.1007:                                   ; preds = %cond.true.998
  %238 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1008 = getelementptr inbounds %struct.image, %struct.image* %238, i32 0, i32 11
  %239 = load i32, i32* %width1008, align 4
  %mul1009 = mul nsw i32 0, %239
  %conv1010 = sext i32 %mul1009 to i64
  %add1011 = add i64 %conv1010, 16
  %mul1012 = mul i64 0, %add1011
  %add1013 = add i64 %mul1012, 1
  %shl1014 = shl i64 %add1013, 62
  %sub1015 = sub i64 %shl1014, 1
  %mul1016 = mul i64 %sub1015, 2
  %add1017 = add i64 %mul1016, 1
  br label %cond.end.1025

cond.false.1018:                                  ; preds = %cond.true.998
  %240 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1019 = getelementptr inbounds %struct.image, %struct.image* %240, i32 0, i32 11
  %241 = load i32, i32* %width1019, align 4
  %mul1020 = mul nsw i32 0, %241
  %conv1021 = sext i32 %mul1020 to i64
  %add1022 = add i64 %conv1021, 16
  %mul1023 = mul i64 0, %add1022
  %sub1024 = sub i64 %mul1023, 1
  br label %cond.end.1025

cond.end.1025:                                    ; preds = %cond.false.1018, %cond.true.1007
  %cond1026 = phi i64 [ %add1017, %cond.true.1007 ], [ %sub1024, %cond.false.1018 ]
  %242 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1027 = getelementptr inbounds %struct.image, %struct.image* %242, i32 0, i32 11
  %243 = load i32, i32* %width1027, align 4
  %conv1028 = sext i32 %243 to i64
  %div1029 = udiv i64 %cond1026, %conv1028
  %cmp1030 = icmp ult i64 16, %div1029
  br i1 %cmp1030, label %cond.true.1189, label %lor.lhs.false.1169

cond.false.1032:                                  ; preds = %cond.true.997
  %244 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1033 = getelementptr inbounds %struct.image, %struct.image* %244, i32 0, i32 11
  %245 = load i32, i32* %width1033, align 4
  %cmp1034 = icmp eq i32 %245, -1
  br i1 %cmp1034, label %cond.true.1036, label %cond.false.1037

cond.true.1036:                                   ; preds = %cond.false.1032
  br i1 false, label %cond.true.1189, label %lor.lhs.false.1169

cond.false.1037:                                  ; preds = %cond.false.1032
  %246 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1038 = getelementptr inbounds %struct.image, %struct.image* %246, i32 0, i32 11
  %247 = load i32, i32* %width1038, align 4
  %mul1039 = mul nsw i32 0, %247
  %conv1040 = sext i32 %mul1039 to i64
  %add1041 = add i64 %conv1040, 16
  %mul1042 = mul i64 0, %add1041
  %sub1043 = sub i64 %mul1042, 1
  %cmp1044 = icmp ult i64 %sub1043, 0
  br i1 %cmp1044, label %cond.true.1046, label %cond.false.1069

cond.true.1046:                                   ; preds = %cond.false.1037
  %248 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1047 = getelementptr inbounds %struct.image, %struct.image* %248, i32 0, i32 11
  %249 = load i32, i32* %width1047, align 4
  %mul1048 = mul nsw i32 0, %249
  %conv1049 = sext i32 %mul1048 to i64
  %add1050 = add i64 %conv1049, 16
  %mul1051 = mul i64 0, %add1050
  %add1052 = add i64 %mul1051, 0
  %neg1053 = xor i64 %add1052, -1
  %cmp1054 = icmp eq i64 %neg1053, -1
  %conv1055 = zext i1 %cmp1054 to i32
  %sub1056 = sub nsw i32 0, %conv1055
  %conv1057 = sext i32 %sub1056 to i64
  %250 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1058 = getelementptr inbounds %struct.image, %struct.image* %250, i32 0, i32 11
  %251 = load i32, i32* %width1058, align 4
  %mul1059 = mul nsw i32 0, %251
  %conv1060 = sext i32 %mul1059 to i64
  %add1061 = add i64 %conv1060, 16
  %mul1062 = mul i64 0, %add1061
  %add1063 = add i64 %mul1062, 1
  %shl1064 = shl i64 %add1063, 62
  %sub1065 = sub i64 %shl1064, 1
  %mul1066 = mul i64 %sub1065, 2
  %add1067 = add i64 %mul1066, 1
  %sub1068 = sub i64 %conv1057, %add1067
  br label %cond.end.1076

cond.false.1069:                                  ; preds = %cond.false.1037
  %252 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1070 = getelementptr inbounds %struct.image, %struct.image* %252, i32 0, i32 11
  %253 = load i32, i32* %width1070, align 4
  %mul1071 = mul nsw i32 0, %253
  %conv1072 = sext i32 %mul1071 to i64
  %add1073 = add i64 %conv1072, 16
  %mul1074 = mul i64 0, %add1073
  %add1075 = add i64 %mul1074, 0
  br label %cond.end.1076

cond.end.1076:                                    ; preds = %cond.false.1069, %cond.true.1046
  %cond1077 = phi i64 [ %sub1068, %cond.true.1046 ], [ %add1075, %cond.false.1069 ]
  %254 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1078 = getelementptr inbounds %struct.image, %struct.image* %254, i32 0, i32 11
  %255 = load i32, i32* %width1078, align 4
  %conv1079 = sext i32 %255 to i64
  %div1080 = udiv i64 %cond1077, %conv1079
  %cmp1081 = icmp ult i64 %div1080, 16
  br i1 %cmp1081, label %cond.true.1189, label %lor.lhs.false.1169

cond.false.1083:                                  ; preds = %lor.lhs.false.993
  %256 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1084 = getelementptr inbounds %struct.image, %struct.image* %256, i32 0, i32 11
  %257 = load i32, i32* %width1084, align 4
  %cmp1085 = icmp eq i32 %257, 0
  br i1 %cmp1085, label %cond.true.1087, label %cond.false.1088

cond.true.1087:                                   ; preds = %cond.false.1083
  br i1 false, label %cond.true.1189, label %lor.lhs.false.1169

cond.false.1088:                                  ; preds = %cond.false.1083
  br i1 false, label %cond.true.1089, label %cond.false.1135

cond.true.1089:                                   ; preds = %cond.false.1088
  %258 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1090 = getelementptr inbounds %struct.image, %struct.image* %258, i32 0, i32 11
  %259 = load i32, i32* %width1090, align 4
  %mul1091 = mul nsw i32 0, %259
  %conv1092 = sext i32 %mul1091 to i64
  %add1093 = add i64 %conv1092, 16
  %mul1094 = mul i64 0, %add1093
  %sub1095 = sub i64 %mul1094, 1
  %cmp1096 = icmp ult i64 %sub1095, 0
  br i1 %cmp1096, label %cond.true.1098, label %cond.false.1121

cond.true.1098:                                   ; preds = %cond.true.1089
  %260 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1099 = getelementptr inbounds %struct.image, %struct.image* %260, i32 0, i32 11
  %261 = load i32, i32* %width1099, align 4
  %mul1100 = mul nsw i32 0, %261
  %conv1101 = sext i32 %mul1100 to i64
  %add1102 = add i64 %conv1101, 16
  %mul1103 = mul i64 0, %add1102
  %add1104 = add i64 %mul1103, 0
  %neg1105 = xor i64 %add1104, -1
  %cmp1106 = icmp eq i64 %neg1105, -1
  %conv1107 = zext i1 %cmp1106 to i32
  %sub1108 = sub nsw i32 0, %conv1107
  %conv1109 = sext i32 %sub1108 to i64
  %262 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1110 = getelementptr inbounds %struct.image, %struct.image* %262, i32 0, i32 11
  %263 = load i32, i32* %width1110, align 4
  %mul1111 = mul nsw i32 0, %263
  %conv1112 = sext i32 %mul1111 to i64
  %add1113 = add i64 %conv1112, 16
  %mul1114 = mul i64 0, %add1113
  %add1115 = add i64 %mul1114, 1
  %shl1116 = shl i64 %add1115, 62
  %sub1117 = sub i64 %shl1116, 1
  %mul1118 = mul i64 %sub1117, 2
  %add1119 = add i64 %mul1118, 1
  %sub1120 = sub i64 %conv1109, %add1119
  br label %cond.end.1128

cond.false.1121:                                  ; preds = %cond.true.1089
  %264 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1122 = getelementptr inbounds %struct.image, %struct.image* %264, i32 0, i32 11
  %265 = load i32, i32* %width1122, align 4
  %mul1123 = mul nsw i32 0, %265
  %conv1124 = sext i32 %mul1123 to i64
  %add1125 = add i64 %conv1124, 16
  %mul1126 = mul i64 0, %add1125
  %add1127 = add i64 %mul1126, 0
  br label %cond.end.1128

cond.end.1128:                                    ; preds = %cond.false.1121, %cond.true.1098
  %cond1129 = phi i64 [ %sub1120, %cond.true.1098 ], [ %add1127, %cond.false.1121 ]
  %266 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1130 = getelementptr inbounds %struct.image, %struct.image* %266, i32 0, i32 11
  %267 = load i32, i32* %width1130, align 4
  %conv1131 = sext i32 %267 to i64
  %div1132 = udiv i64 %cond1129, %conv1131
  %cmp1133 = icmp ult i64 16, %div1132
  br i1 %cmp1133, label %cond.true.1189, label %lor.lhs.false.1169

cond.false.1135:                                  ; preds = %cond.false.1088
  %268 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1136 = getelementptr inbounds %struct.image, %struct.image* %268, i32 0, i32 11
  %269 = load i32, i32* %width1136, align 4
  %mul1137 = mul nsw i32 0, %269
  %conv1138 = sext i32 %mul1137 to i64
  %add1139 = add i64 %conv1138, 16
  %mul1140 = mul i64 0, %add1139
  %sub1141 = sub i64 %mul1140, 1
  %cmp1142 = icmp ult i64 %sub1141, 0
  br i1 %cmp1142, label %cond.true.1144, label %cond.false.1155

cond.true.1144:                                   ; preds = %cond.false.1135
  %270 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1145 = getelementptr inbounds %struct.image, %struct.image* %270, i32 0, i32 11
  %271 = load i32, i32* %width1145, align 4
  %mul1146 = mul nsw i32 0, %271
  %conv1147 = sext i32 %mul1146 to i64
  %add1148 = add i64 %conv1147, 16
  %mul1149 = mul i64 0, %add1148
  %add1150 = add i64 %mul1149, 1
  %shl1151 = shl i64 %add1150, 62
  %sub1152 = sub i64 %shl1151, 1
  %mul1153 = mul i64 %sub1152, 2
  %add1154 = add i64 %mul1153, 1
  br label %cond.end.1162

cond.false.1155:                                  ; preds = %cond.false.1135
  %272 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1156 = getelementptr inbounds %struct.image, %struct.image* %272, i32 0, i32 11
  %273 = load i32, i32* %width1156, align 4
  %mul1157 = mul nsw i32 0, %273
  %conv1158 = sext i32 %mul1157 to i64
  %add1159 = add i64 %conv1158, 16
  %mul1160 = mul i64 0, %add1159
  %sub1161 = sub i64 %mul1160, 1
  br label %cond.end.1162

cond.end.1162:                                    ; preds = %cond.false.1155, %cond.true.1144
  %cond1163 = phi i64 [ %add1154, %cond.true.1144 ], [ %sub1161, %cond.false.1155 ]
  %274 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1164 = getelementptr inbounds %struct.image, %struct.image* %274, i32 0, i32 11
  %275 = load i32, i32* %width1164, align 4
  %conv1165 = sext i32 %275 to i64
  %div1166 = udiv i64 %cond1163, %conv1165
  %cmp1167 = icmp ult i64 %div1166, 16
  br i1 %cmp1167, label %cond.true.1189, label %lor.lhs.false.1169

lor.lhs.false.1169:                               ; preds = %cond.end.1162, %cond.end.1128, %cond.true.1087, %cond.end.1076, %cond.true.1036, %cond.end.1025
  %276 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1170 = getelementptr inbounds %struct.image, %struct.image* %276, i32 0, i32 11
  %277 = load i32, i32* %width1170, align 4
  %conv1171 = sext i32 %277 to i64
  %mul1172 = mul i64 16, %conv1171
  %mul1173 = mul i64 0, %mul1172
  %sub1174 = sub i64 %mul1173, 1
  %cmp1175 = icmp ult i64 %sub1174, 0
  br i1 %cmp1175, label %land.lhs.true.1177, label %lor.lhs.false.1183

land.lhs.true.1177:                               ; preds = %lor.lhs.false.1169
  %278 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1178 = getelementptr inbounds %struct.image, %struct.image* %278, i32 0, i32 11
  %279 = load i32, i32* %width1178, align 4
  %conv1179 = sext i32 %279 to i64
  %mul1180 = mul i64 16, %conv1179
  %cmp1181 = icmp ult i64 %mul1180, -32768
  br i1 %cmp1181, label %cond.true.1189, label %lor.lhs.false.1183

lor.lhs.false.1183:                               ; preds = %land.lhs.true.1177, %lor.lhs.false.1169
  %280 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1184 = getelementptr inbounds %struct.image, %struct.image* %280, i32 0, i32 11
  %281 = load i32, i32* %width1184, align 4
  %conv1185 = sext i32 %281 to i64
  %mul1186 = mul i64 16, %conv1185
  %cmp1187 = icmp ult i64 32767, %mul1186
  br i1 %cmp1187, label %cond.true.1189, label %cond.false.1215

cond.true.1189:                                   ; preds = %lor.lhs.false.1183, %land.lhs.true.1177, %cond.end.1162, %cond.end.1128, %cond.true.1087, %cond.end.1076, %cond.true.1036, %cond.end.1025, %land.lhs.true.989
  %282 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1190 = getelementptr inbounds %struct.image, %struct.image* %282, i32 0, i32 11
  %283 = load i32, i32* %width1190, align 4
  %conv1191 = trunc i32 %283 to i16
  %conv1192 = zext i16 %conv1191 to i32
  %mul1193 = mul nsw i32 16, %conv1192
  %cmp1194 = icmp sle i32 %mul1193, 32767
  br i1 %cmp1194, label %cond.true.1196, label %cond.false.1203

cond.true.1196:                                   ; preds = %cond.true.1189
  %284 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1197 = getelementptr inbounds %struct.image, %struct.image* %284, i32 0, i32 11
  %285 = load i32, i32* %width1197, align 4
  %conv1198 = trunc i32 %285 to i16
  %conv1199 = zext i16 %conv1198 to i32
  %mul1200 = mul nsw i32 16, %conv1199
  %conv1201 = trunc i32 %mul1200 to i16
  %conv1202 = sext i16 %conv1201 to i32
  br label %cond.end.1212

cond.false.1203:                                  ; preds = %cond.true.1189
  %286 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1204 = getelementptr inbounds %struct.image, %struct.image* %286, i32 0, i32 11
  %287 = load i32, i32* %width1204, align 4
  %conv1205 = trunc i32 %287 to i16
  %conv1206 = zext i16 %conv1205 to i32
  %mul1207 = mul nsw i32 16, %conv1206
  %sub1208 = sub nsw i32 %mul1207, -32768
  %conv1209 = trunc i32 %sub1208 to i16
  %conv1210 = sext i16 %conv1209 to i32
  %add1211 = add nsw i32 %conv1210, -32768
  br label %cond.end.1212

cond.end.1212:                                    ; preds = %cond.false.1203, %cond.true.1196
  %cond1213 = phi i32 [ %conv1202, %cond.true.1196 ], [ %add1211, %cond.false.1203 ]
  %conv1214 = sext i32 %cond1213 to i64
  store i64 %conv1214, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.1215:                                  ; preds = %lor.lhs.false.1183
  %288 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1216 = getelementptr inbounds %struct.image, %struct.image* %288, i32 0, i32 11
  %289 = load i32, i32* %width1216, align 4
  %conv1217 = trunc i32 %289 to i16
  %conv1218 = zext i16 %conv1217 to i32
  %mul1219 = mul nsw i32 16, %conv1218
  %cmp1220 = icmp sle i32 %mul1219, 32767
  br i1 %cmp1220, label %cond.true.1222, label %cond.false.1229

cond.true.1222:                                   ; preds = %cond.false.1215
  %290 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1223 = getelementptr inbounds %struct.image, %struct.image* %290, i32 0, i32 11
  %291 = load i32, i32* %width1223, align 4
  %conv1224 = trunc i32 %291 to i16
  %conv1225 = zext i16 %conv1224 to i32
  %mul1226 = mul nsw i32 16, %conv1225
  %conv1227 = trunc i32 %mul1226 to i16
  %conv1228 = sext i16 %conv1227 to i32
  br label %cond.end.1238

cond.false.1229:                                  ; preds = %cond.false.1215
  %292 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1230 = getelementptr inbounds %struct.image, %struct.image* %292, i32 0, i32 11
  %293 = load i32, i32* %width1230, align 4
  %conv1231 = trunc i32 %293 to i16
  %conv1232 = zext i16 %conv1231 to i32
  %mul1233 = mul nsw i32 16, %conv1232
  %sub1234 = sub nsw i32 %mul1233, -32768
  %conv1235 = trunc i32 %sub1234 to i16
  %conv1236 = sext i16 %conv1235 to i32
  %add1237 = add nsw i32 %conv1236, -32768
  br label %cond.end.1238

cond.end.1238:                                    ; preds = %cond.false.1229, %cond.true.1222
  %cond1239 = phi i32 [ %conv1228, %cond.true.1222 ], [ %add1237, %cond.false.1229 ]
  %conv1240 = sext i32 %cond1239 to i64
  store i64 %conv1240, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.1241:                                  ; preds = %cond.false.619
  br i1 false, label %cond.true.1242, label %cond.false.1765

cond.true.1242:                                   ; preds = %cond.false.1241
  br i1 false, label %cond.true.1243, label %cond.false.1490

cond.true.1243:                                   ; preds = %cond.true.1242
  %294 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1244 = getelementptr inbounds %struct.image, %struct.image* %294, i32 0, i32 11
  %295 = load i32, i32* %width1244, align 4
  %mul1245 = mul nsw i32 0, %295
  %add1246 = add nsw i32 %mul1245, 16
  %mul1247 = mul nsw i32 0, %add1246
  %sub1248 = sub nsw i32 %mul1247, 1
  %cmp1249 = icmp slt i32 %sub1248, 0
  br i1 %cmp1249, label %cond.true.1251, label %cond.false.1271

cond.true.1251:                                   ; preds = %cond.true.1243
  %296 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1252 = getelementptr inbounds %struct.image, %struct.image* %296, i32 0, i32 11
  %297 = load i32, i32* %width1252, align 4
  %mul1253 = mul nsw i32 0, %297
  %add1254 = add nsw i32 %mul1253, 16
  %mul1255 = mul nsw i32 0, %add1254
  %add1256 = add nsw i32 %mul1255, 0
  %neg1257 = xor i32 %add1256, -1
  %cmp1258 = icmp eq i32 %neg1257, -1
  %conv1259 = zext i1 %cmp1258 to i32
  %sub1260 = sub nsw i32 0, %conv1259
  %298 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1261 = getelementptr inbounds %struct.image, %struct.image* %298, i32 0, i32 11
  %299 = load i32, i32* %width1261, align 4
  %mul1262 = mul nsw i32 0, %299
  %add1263 = add nsw i32 %mul1262, 16
  %mul1264 = mul nsw i32 0, %add1263
  %add1265 = add nsw i32 %mul1264, 1
  %shl1266 = shl i32 %add1265, 30
  %sub1267 = sub nsw i32 %shl1266, 1
  %mul1268 = mul nsw i32 %sub1267, 2
  %add1269 = add nsw i32 %mul1268, 1
  %sub1270 = sub nsw i32 %sub1260, %add1269
  br label %cond.end.1277

cond.false.1271:                                  ; preds = %cond.true.1243
  %300 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1272 = getelementptr inbounds %struct.image, %struct.image* %300, i32 0, i32 11
  %301 = load i32, i32* %width1272, align 4
  %mul1273 = mul nsw i32 0, %301
  %add1274 = add nsw i32 %mul1273, 16
  %mul1275 = mul nsw i32 0, %add1274
  %add1276 = add nsw i32 %mul1275, 0
  br label %cond.end.1277

cond.end.1277:                                    ; preds = %cond.false.1271, %cond.true.1251
  %cond1278 = phi i32 [ %sub1270, %cond.true.1251 ], [ %add1276, %cond.false.1271 ]
  %cmp1279 = icmp eq i32 %cond1278, 0
  br i1 %cmp1279, label %land.lhs.true.1281, label %lor.lhs.false.1285

land.lhs.true.1281:                               ; preds = %cond.end.1277
  %302 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1282 = getelementptr inbounds %struct.image, %struct.image* %302, i32 0, i32 11
  %303 = load i32, i32* %width1282, align 4
  %cmp1283 = icmp slt i32 %303, 0
  br i1 %cmp1283, label %cond.true.1458, label %lor.lhs.false.1285

lor.lhs.false.1285:                               ; preds = %land.lhs.true.1281, %cond.end.1277
  %304 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1286 = getelementptr inbounds %struct.image, %struct.image* %304, i32 0, i32 11
  %305 = load i32, i32* %width1286, align 4
  %cmp1287 = icmp slt i32 %305, 0
  br i1 %cmp1287, label %cond.true.1289, label %cond.false.1365

cond.true.1289:                                   ; preds = %lor.lhs.false.1285
  br i1 false, label %cond.true.1290, label %cond.false.1320

cond.true.1290:                                   ; preds = %cond.true.1289
  %306 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1291 = getelementptr inbounds %struct.image, %struct.image* %306, i32 0, i32 11
  %307 = load i32, i32* %width1291, align 4
  %mul1292 = mul nsw i32 0, %307
  %add1293 = add nsw i32 %mul1292, 16
  %mul1294 = mul nsw i32 0, %add1293
  %sub1295 = sub nsw i32 %mul1294, 1
  %cmp1296 = icmp slt i32 %sub1295, 0
  br i1 %cmp1296, label %cond.true.1298, label %cond.false.1308

cond.true.1298:                                   ; preds = %cond.true.1290
  %308 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1299 = getelementptr inbounds %struct.image, %struct.image* %308, i32 0, i32 11
  %309 = load i32, i32* %width1299, align 4
  %mul1300 = mul nsw i32 0, %309
  %add1301 = add nsw i32 %mul1300, 16
  %mul1302 = mul nsw i32 0, %add1301
  %add1303 = add nsw i32 %mul1302, 1
  %shl1304 = shl i32 %add1303, 30
  %sub1305 = sub nsw i32 %shl1304, 1
  %mul1306 = mul nsw i32 %sub1305, 2
  %add1307 = add nsw i32 %mul1306, 1
  br label %cond.end.1314

cond.false.1308:                                  ; preds = %cond.true.1290
  %310 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1309 = getelementptr inbounds %struct.image, %struct.image* %310, i32 0, i32 11
  %311 = load i32, i32* %width1309, align 4
  %mul1310 = mul nsw i32 0, %311
  %add1311 = add nsw i32 %mul1310, 16
  %mul1312 = mul nsw i32 0, %add1311
  %sub1313 = sub nsw i32 %mul1312, 1
  br label %cond.end.1314

cond.end.1314:                                    ; preds = %cond.false.1308, %cond.true.1298
  %cond1315 = phi i32 [ %add1307, %cond.true.1298 ], [ %sub1313, %cond.false.1308 ]
  %312 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1316 = getelementptr inbounds %struct.image, %struct.image* %312, i32 0, i32 11
  %313 = load i32, i32* %width1316, align 4
  %div1317 = sdiv i32 %cond1315, %313
  %cmp1318 = icmp slt i32 16, %div1317
  br i1 %cmp1318, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1320:                                  ; preds = %cond.true.1289
  %314 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1321 = getelementptr inbounds %struct.image, %struct.image* %314, i32 0, i32 11
  %315 = load i32, i32* %width1321, align 4
  %cmp1322 = icmp eq i32 %315, -1
  br i1 %cmp1322, label %cond.true.1324, label %cond.false.1325

cond.true.1324:                                   ; preds = %cond.false.1320
  br i1 false, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1325:                                  ; preds = %cond.false.1320
  %316 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1326 = getelementptr inbounds %struct.image, %struct.image* %316, i32 0, i32 11
  %317 = load i32, i32* %width1326, align 4
  %mul1327 = mul nsw i32 0, %317
  %add1328 = add nsw i32 %mul1327, 16
  %mul1329 = mul nsw i32 0, %add1328
  %sub1330 = sub nsw i32 %mul1329, 1
  %cmp1331 = icmp slt i32 %sub1330, 0
  br i1 %cmp1331, label %cond.true.1333, label %cond.false.1353

cond.true.1333:                                   ; preds = %cond.false.1325
  %318 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1334 = getelementptr inbounds %struct.image, %struct.image* %318, i32 0, i32 11
  %319 = load i32, i32* %width1334, align 4
  %mul1335 = mul nsw i32 0, %319
  %add1336 = add nsw i32 %mul1335, 16
  %mul1337 = mul nsw i32 0, %add1336
  %add1338 = add nsw i32 %mul1337, 0
  %neg1339 = xor i32 %add1338, -1
  %cmp1340 = icmp eq i32 %neg1339, -1
  %conv1341 = zext i1 %cmp1340 to i32
  %sub1342 = sub nsw i32 0, %conv1341
  %320 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1343 = getelementptr inbounds %struct.image, %struct.image* %320, i32 0, i32 11
  %321 = load i32, i32* %width1343, align 4
  %mul1344 = mul nsw i32 0, %321
  %add1345 = add nsw i32 %mul1344, 16
  %mul1346 = mul nsw i32 0, %add1345
  %add1347 = add nsw i32 %mul1346, 1
  %shl1348 = shl i32 %add1347, 30
  %sub1349 = sub nsw i32 %shl1348, 1
  %mul1350 = mul nsw i32 %sub1349, 2
  %add1351 = add nsw i32 %mul1350, 1
  %sub1352 = sub nsw i32 %sub1342, %add1351
  br label %cond.end.1359

cond.false.1353:                                  ; preds = %cond.false.1325
  %322 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1354 = getelementptr inbounds %struct.image, %struct.image* %322, i32 0, i32 11
  %323 = load i32, i32* %width1354, align 4
  %mul1355 = mul nsw i32 0, %323
  %add1356 = add nsw i32 %mul1355, 16
  %mul1357 = mul nsw i32 0, %add1356
  %add1358 = add nsw i32 %mul1357, 0
  br label %cond.end.1359

cond.end.1359:                                    ; preds = %cond.false.1353, %cond.true.1333
  %cond1360 = phi i32 [ %sub1352, %cond.true.1333 ], [ %add1358, %cond.false.1353 ]
  %324 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1361 = getelementptr inbounds %struct.image, %struct.image* %324, i32 0, i32 11
  %325 = load i32, i32* %width1361, align 4
  %div1362 = sdiv i32 %cond1360, %325
  %cmp1363 = icmp slt i32 %div1362, 16
  br i1 %cmp1363, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1365:                                  ; preds = %lor.lhs.false.1285
  %326 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1366 = getelementptr inbounds %struct.image, %struct.image* %326, i32 0, i32 11
  %327 = load i32, i32* %width1366, align 4
  %cmp1367 = icmp eq i32 %327, 0
  br i1 %cmp1367, label %cond.true.1369, label %cond.false.1370

cond.true.1369:                                   ; preds = %cond.false.1365
  br i1 false, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1370:                                  ; preds = %cond.false.1365
  br i1 false, label %cond.true.1371, label %cond.false.1411

cond.true.1371:                                   ; preds = %cond.false.1370
  %328 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1372 = getelementptr inbounds %struct.image, %struct.image* %328, i32 0, i32 11
  %329 = load i32, i32* %width1372, align 4
  %mul1373 = mul nsw i32 0, %329
  %add1374 = add nsw i32 %mul1373, 16
  %mul1375 = mul nsw i32 0, %add1374
  %sub1376 = sub nsw i32 %mul1375, 1
  %cmp1377 = icmp slt i32 %sub1376, 0
  br i1 %cmp1377, label %cond.true.1379, label %cond.false.1399

cond.true.1379:                                   ; preds = %cond.true.1371
  %330 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1380 = getelementptr inbounds %struct.image, %struct.image* %330, i32 0, i32 11
  %331 = load i32, i32* %width1380, align 4
  %mul1381 = mul nsw i32 0, %331
  %add1382 = add nsw i32 %mul1381, 16
  %mul1383 = mul nsw i32 0, %add1382
  %add1384 = add nsw i32 %mul1383, 0
  %neg1385 = xor i32 %add1384, -1
  %cmp1386 = icmp eq i32 %neg1385, -1
  %conv1387 = zext i1 %cmp1386 to i32
  %sub1388 = sub nsw i32 0, %conv1387
  %332 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1389 = getelementptr inbounds %struct.image, %struct.image* %332, i32 0, i32 11
  %333 = load i32, i32* %width1389, align 4
  %mul1390 = mul nsw i32 0, %333
  %add1391 = add nsw i32 %mul1390, 16
  %mul1392 = mul nsw i32 0, %add1391
  %add1393 = add nsw i32 %mul1392, 1
  %shl1394 = shl i32 %add1393, 30
  %sub1395 = sub nsw i32 %shl1394, 1
  %mul1396 = mul nsw i32 %sub1395, 2
  %add1397 = add nsw i32 %mul1396, 1
  %sub1398 = sub nsw i32 %sub1388, %add1397
  br label %cond.end.1405

cond.false.1399:                                  ; preds = %cond.true.1371
  %334 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1400 = getelementptr inbounds %struct.image, %struct.image* %334, i32 0, i32 11
  %335 = load i32, i32* %width1400, align 4
  %mul1401 = mul nsw i32 0, %335
  %add1402 = add nsw i32 %mul1401, 16
  %mul1403 = mul nsw i32 0, %add1402
  %add1404 = add nsw i32 %mul1403, 0
  br label %cond.end.1405

cond.end.1405:                                    ; preds = %cond.false.1399, %cond.true.1379
  %cond1406 = phi i32 [ %sub1398, %cond.true.1379 ], [ %add1404, %cond.false.1399 ]
  %336 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1407 = getelementptr inbounds %struct.image, %struct.image* %336, i32 0, i32 11
  %337 = load i32, i32* %width1407, align 4
  %div1408 = sdiv i32 %cond1406, %337
  %cmp1409 = icmp slt i32 16, %div1408
  br i1 %cmp1409, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1411:                                  ; preds = %cond.false.1370
  %338 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1412 = getelementptr inbounds %struct.image, %struct.image* %338, i32 0, i32 11
  %339 = load i32, i32* %width1412, align 4
  %mul1413 = mul nsw i32 0, %339
  %add1414 = add nsw i32 %mul1413, 16
  %mul1415 = mul nsw i32 0, %add1414
  %sub1416 = sub nsw i32 %mul1415, 1
  %cmp1417 = icmp slt i32 %sub1416, 0
  br i1 %cmp1417, label %cond.true.1419, label %cond.false.1429

cond.true.1419:                                   ; preds = %cond.false.1411
  %340 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1420 = getelementptr inbounds %struct.image, %struct.image* %340, i32 0, i32 11
  %341 = load i32, i32* %width1420, align 4
  %mul1421 = mul nsw i32 0, %341
  %add1422 = add nsw i32 %mul1421, 16
  %mul1423 = mul nsw i32 0, %add1422
  %add1424 = add nsw i32 %mul1423, 1
  %shl1425 = shl i32 %add1424, 30
  %sub1426 = sub nsw i32 %shl1425, 1
  %mul1427 = mul nsw i32 %sub1426, 2
  %add1428 = add nsw i32 %mul1427, 1
  br label %cond.end.1435

cond.false.1429:                                  ; preds = %cond.false.1411
  %342 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1430 = getelementptr inbounds %struct.image, %struct.image* %342, i32 0, i32 11
  %343 = load i32, i32* %width1430, align 4
  %mul1431 = mul nsw i32 0, %343
  %add1432 = add nsw i32 %mul1431, 16
  %mul1433 = mul nsw i32 0, %add1432
  %sub1434 = sub nsw i32 %mul1433, 1
  br label %cond.end.1435

cond.end.1435:                                    ; preds = %cond.false.1429, %cond.true.1419
  %cond1436 = phi i32 [ %add1428, %cond.true.1419 ], [ %sub1434, %cond.false.1429 ]
  %344 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1437 = getelementptr inbounds %struct.image, %struct.image* %344, i32 0, i32 11
  %345 = load i32, i32* %width1437, align 4
  %div1438 = sdiv i32 %cond1436, %345
  %cmp1439 = icmp slt i32 %div1438, 16
  br i1 %cmp1439, label %cond.true.1458, label %lor.lhs.false.1441

lor.lhs.false.1441:                               ; preds = %cond.end.1435, %cond.end.1405, %cond.true.1369, %cond.end.1359, %cond.true.1324, %cond.end.1314
  %346 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1442 = getelementptr inbounds %struct.image, %struct.image* %346, i32 0, i32 11
  %347 = load i32, i32* %width1442, align 4
  %mul1443 = mul nsw i32 16, %347
  %mul1444 = mul nsw i32 0, %mul1443
  %sub1445 = sub nsw i32 %mul1444, 1
  %cmp1446 = icmp slt i32 %sub1445, 0
  br i1 %cmp1446, label %land.lhs.true.1448, label %lor.lhs.false.1453

land.lhs.true.1448:                               ; preds = %lor.lhs.false.1441
  %348 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1449 = getelementptr inbounds %struct.image, %struct.image* %348, i32 0, i32 11
  %349 = load i32, i32* %width1449, align 4
  %mul1450 = mul nsw i32 16, %349
  %cmp1451 = icmp slt i32 %mul1450, -2147483648
  br i1 %cmp1451, label %cond.true.1458, label %lor.lhs.false.1453

lor.lhs.false.1453:                               ; preds = %land.lhs.true.1448, %lor.lhs.false.1441
  %350 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1454 = getelementptr inbounds %struct.image, %struct.image* %350, i32 0, i32 11
  %351 = load i32, i32* %width1454, align 4
  %mul1455 = mul nsw i32 16, %351
  %cmp1456 = icmp slt i32 2147483647, %mul1455
  br i1 %cmp1456, label %cond.true.1458, label %cond.false.1474

cond.true.1458:                                   ; preds = %lor.lhs.false.1453, %land.lhs.true.1448, %cond.end.1435, %cond.end.1405, %cond.true.1369, %cond.end.1359, %cond.true.1324, %cond.end.1314, %land.lhs.true.1281
  %352 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1459 = getelementptr inbounds %struct.image, %struct.image* %352, i32 0, i32 11
  %353 = load i32, i32* %width1459, align 4
  %mul1460 = mul i32 16, %353
  %cmp1461 = icmp ule i32 %mul1460, 2147483647
  br i1 %cmp1461, label %cond.true.1463, label %cond.false.1466

cond.true.1463:                                   ; preds = %cond.true.1458
  %354 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1464 = getelementptr inbounds %struct.image, %struct.image* %354, i32 0, i32 11
  %355 = load i32, i32* %width1464, align 4
  %mul1465 = mul i32 16, %355
  br label %cond.end.1471

cond.false.1466:                                  ; preds = %cond.true.1458
  %356 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1467 = getelementptr inbounds %struct.image, %struct.image* %356, i32 0, i32 11
  %357 = load i32, i32* %width1467, align 4
  %mul1468 = mul i32 16, %357
  %sub1469 = sub i32 %mul1468, -2147483648
  %add1470 = add nsw i32 %sub1469, -2147483648
  br label %cond.end.1471

cond.end.1471:                                    ; preds = %cond.false.1466, %cond.true.1463
  %cond1472 = phi i32 [ %mul1465, %cond.true.1463 ], [ %add1470, %cond.false.1466 ]
  %conv1473 = sext i32 %cond1472 to i64
  store i64 %conv1473, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.1474:                                  ; preds = %lor.lhs.false.1453
  %358 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1475 = getelementptr inbounds %struct.image, %struct.image* %358, i32 0, i32 11
  %359 = load i32, i32* %width1475, align 4
  %mul1476 = mul i32 16, %359
  %cmp1477 = icmp ule i32 %mul1476, 2147483647
  br i1 %cmp1477, label %cond.true.1479, label %cond.false.1482

cond.true.1479:                                   ; preds = %cond.false.1474
  %360 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1480 = getelementptr inbounds %struct.image, %struct.image* %360, i32 0, i32 11
  %361 = load i32, i32* %width1480, align 4
  %mul1481 = mul i32 16, %361
  br label %cond.end.1487

cond.false.1482:                                  ; preds = %cond.false.1474
  %362 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1483 = getelementptr inbounds %struct.image, %struct.image* %362, i32 0, i32 11
  %363 = load i32, i32* %width1483, align 4
  %mul1484 = mul i32 16, %363
  %sub1485 = sub i32 %mul1484, -2147483648
  %add1486 = add nsw i32 %sub1485, -2147483648
  br label %cond.end.1487

cond.end.1487:                                    ; preds = %cond.false.1482, %cond.true.1479
  %cond1488 = phi i32 [ %mul1481, %cond.true.1479 ], [ %add1486, %cond.false.1482 ]
  %conv1489 = sext i32 %cond1488 to i64
  store i64 %conv1489, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.1490:                                  ; preds = %cond.true.1242
  %364 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1491 = getelementptr inbounds %struct.image, %struct.image* %364, i32 0, i32 11
  %365 = load i32, i32* %width1491, align 4
  %mul1492 = mul nsw i32 0, %365
  %conv1493 = sext i32 %mul1492 to i64
  %add1494 = add i64 %conv1493, 16
  %mul1495 = mul i64 0, %add1494
  %sub1496 = sub i64 %mul1495, 1
  %cmp1497 = icmp ult i64 %sub1496, 0
  br i1 %cmp1497, label %cond.true.1499, label %cond.false.1522

cond.true.1499:                                   ; preds = %cond.false.1490
  %366 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1500 = getelementptr inbounds %struct.image, %struct.image* %366, i32 0, i32 11
  %367 = load i32, i32* %width1500, align 4
  %mul1501 = mul nsw i32 0, %367
  %conv1502 = sext i32 %mul1501 to i64
  %add1503 = add i64 %conv1502, 16
  %mul1504 = mul i64 0, %add1503
  %add1505 = add i64 %mul1504, 0
  %neg1506 = xor i64 %add1505, -1
  %cmp1507 = icmp eq i64 %neg1506, -1
  %conv1508 = zext i1 %cmp1507 to i32
  %sub1509 = sub nsw i32 0, %conv1508
  %conv1510 = sext i32 %sub1509 to i64
  %368 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1511 = getelementptr inbounds %struct.image, %struct.image* %368, i32 0, i32 11
  %369 = load i32, i32* %width1511, align 4
  %mul1512 = mul nsw i32 0, %369
  %conv1513 = sext i32 %mul1512 to i64
  %add1514 = add i64 %conv1513, 16
  %mul1515 = mul i64 0, %add1514
  %add1516 = add i64 %mul1515, 1
  %shl1517 = shl i64 %add1516, 62
  %sub1518 = sub i64 %shl1517, 1
  %mul1519 = mul i64 %sub1518, 2
  %add1520 = add i64 %mul1519, 1
  %sub1521 = sub i64 %conv1510, %add1520
  br label %cond.end.1529

cond.false.1522:                                  ; preds = %cond.false.1490
  %370 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1523 = getelementptr inbounds %struct.image, %struct.image* %370, i32 0, i32 11
  %371 = load i32, i32* %width1523, align 4
  %mul1524 = mul nsw i32 0, %371
  %conv1525 = sext i32 %mul1524 to i64
  %add1526 = add i64 %conv1525, 16
  %mul1527 = mul i64 0, %add1526
  %add1528 = add i64 %mul1527, 0
  br label %cond.end.1529

cond.end.1529:                                    ; preds = %cond.false.1522, %cond.true.1499
  %cond1530 = phi i64 [ %sub1521, %cond.true.1499 ], [ %add1528, %cond.false.1522 ]
  %cmp1531 = icmp eq i64 %cond1530, 0
  br i1 %cmp1531, label %land.lhs.true.1533, label %lor.lhs.false.1537

land.lhs.true.1533:                               ; preds = %cond.end.1529
  %372 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1534 = getelementptr inbounds %struct.image, %struct.image* %372, i32 0, i32 11
  %373 = load i32, i32* %width1534, align 4
  %cmp1535 = icmp slt i32 %373, 0
  br i1 %cmp1535, label %cond.true.1733, label %lor.lhs.false.1537

lor.lhs.false.1537:                               ; preds = %land.lhs.true.1533, %cond.end.1529
  %374 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1538 = getelementptr inbounds %struct.image, %struct.image* %374, i32 0, i32 11
  %375 = load i32, i32* %width1538, align 4
  %cmp1539 = icmp slt i32 %375, 0
  br i1 %cmp1539, label %cond.true.1541, label %cond.false.1627

cond.true.1541:                                   ; preds = %lor.lhs.false.1537
  br i1 false, label %cond.true.1542, label %cond.false.1576

cond.true.1542:                                   ; preds = %cond.true.1541
  %376 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1543 = getelementptr inbounds %struct.image, %struct.image* %376, i32 0, i32 11
  %377 = load i32, i32* %width1543, align 4
  %mul1544 = mul nsw i32 0, %377
  %conv1545 = sext i32 %mul1544 to i64
  %add1546 = add i64 %conv1545, 16
  %mul1547 = mul i64 0, %add1546
  %sub1548 = sub i64 %mul1547, 1
  %cmp1549 = icmp ult i64 %sub1548, 0
  br i1 %cmp1549, label %cond.true.1551, label %cond.false.1562

cond.true.1551:                                   ; preds = %cond.true.1542
  %378 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1552 = getelementptr inbounds %struct.image, %struct.image* %378, i32 0, i32 11
  %379 = load i32, i32* %width1552, align 4
  %mul1553 = mul nsw i32 0, %379
  %conv1554 = sext i32 %mul1553 to i64
  %add1555 = add i64 %conv1554, 16
  %mul1556 = mul i64 0, %add1555
  %add1557 = add i64 %mul1556, 1
  %shl1558 = shl i64 %add1557, 62
  %sub1559 = sub i64 %shl1558, 1
  %mul1560 = mul i64 %sub1559, 2
  %add1561 = add i64 %mul1560, 1
  br label %cond.end.1569

cond.false.1562:                                  ; preds = %cond.true.1542
  %380 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1563 = getelementptr inbounds %struct.image, %struct.image* %380, i32 0, i32 11
  %381 = load i32, i32* %width1563, align 4
  %mul1564 = mul nsw i32 0, %381
  %conv1565 = sext i32 %mul1564 to i64
  %add1566 = add i64 %conv1565, 16
  %mul1567 = mul i64 0, %add1566
  %sub1568 = sub i64 %mul1567, 1
  br label %cond.end.1569

cond.end.1569:                                    ; preds = %cond.false.1562, %cond.true.1551
  %cond1570 = phi i64 [ %add1561, %cond.true.1551 ], [ %sub1568, %cond.false.1562 ]
  %382 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1571 = getelementptr inbounds %struct.image, %struct.image* %382, i32 0, i32 11
  %383 = load i32, i32* %width1571, align 4
  %conv1572 = sext i32 %383 to i64
  %div1573 = udiv i64 %cond1570, %conv1572
  %cmp1574 = icmp ult i64 16, %div1573
  br i1 %cmp1574, label %cond.true.1733, label %lor.lhs.false.1713

cond.false.1576:                                  ; preds = %cond.true.1541
  %384 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1577 = getelementptr inbounds %struct.image, %struct.image* %384, i32 0, i32 11
  %385 = load i32, i32* %width1577, align 4
  %cmp1578 = icmp eq i32 %385, -1
  br i1 %cmp1578, label %cond.true.1580, label %cond.false.1581

cond.true.1580:                                   ; preds = %cond.false.1576
  br i1 false, label %cond.true.1733, label %lor.lhs.false.1713

cond.false.1581:                                  ; preds = %cond.false.1576
  %386 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1582 = getelementptr inbounds %struct.image, %struct.image* %386, i32 0, i32 11
  %387 = load i32, i32* %width1582, align 4
  %mul1583 = mul nsw i32 0, %387
  %conv1584 = sext i32 %mul1583 to i64
  %add1585 = add i64 %conv1584, 16
  %mul1586 = mul i64 0, %add1585
  %sub1587 = sub i64 %mul1586, 1
  %cmp1588 = icmp ult i64 %sub1587, 0
  br i1 %cmp1588, label %cond.true.1590, label %cond.false.1613

cond.true.1590:                                   ; preds = %cond.false.1581
  %388 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1591 = getelementptr inbounds %struct.image, %struct.image* %388, i32 0, i32 11
  %389 = load i32, i32* %width1591, align 4
  %mul1592 = mul nsw i32 0, %389
  %conv1593 = sext i32 %mul1592 to i64
  %add1594 = add i64 %conv1593, 16
  %mul1595 = mul i64 0, %add1594
  %add1596 = add i64 %mul1595, 0
  %neg1597 = xor i64 %add1596, -1
  %cmp1598 = icmp eq i64 %neg1597, -1
  %conv1599 = zext i1 %cmp1598 to i32
  %sub1600 = sub nsw i32 0, %conv1599
  %conv1601 = sext i32 %sub1600 to i64
  %390 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1602 = getelementptr inbounds %struct.image, %struct.image* %390, i32 0, i32 11
  %391 = load i32, i32* %width1602, align 4
  %mul1603 = mul nsw i32 0, %391
  %conv1604 = sext i32 %mul1603 to i64
  %add1605 = add i64 %conv1604, 16
  %mul1606 = mul i64 0, %add1605
  %add1607 = add i64 %mul1606, 1
  %shl1608 = shl i64 %add1607, 62
  %sub1609 = sub i64 %shl1608, 1
  %mul1610 = mul i64 %sub1609, 2
  %add1611 = add i64 %mul1610, 1
  %sub1612 = sub i64 %conv1601, %add1611
  br label %cond.end.1620

cond.false.1613:                                  ; preds = %cond.false.1581
  %392 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1614 = getelementptr inbounds %struct.image, %struct.image* %392, i32 0, i32 11
  %393 = load i32, i32* %width1614, align 4
  %mul1615 = mul nsw i32 0, %393
  %conv1616 = sext i32 %mul1615 to i64
  %add1617 = add i64 %conv1616, 16
  %mul1618 = mul i64 0, %add1617
  %add1619 = add i64 %mul1618, 0
  br label %cond.end.1620

cond.end.1620:                                    ; preds = %cond.false.1613, %cond.true.1590
  %cond1621 = phi i64 [ %sub1612, %cond.true.1590 ], [ %add1619, %cond.false.1613 ]
  %394 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1622 = getelementptr inbounds %struct.image, %struct.image* %394, i32 0, i32 11
  %395 = load i32, i32* %width1622, align 4
  %conv1623 = sext i32 %395 to i64
  %div1624 = udiv i64 %cond1621, %conv1623
  %cmp1625 = icmp ult i64 %div1624, 16
  br i1 %cmp1625, label %cond.true.1733, label %lor.lhs.false.1713

cond.false.1627:                                  ; preds = %lor.lhs.false.1537
  %396 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1628 = getelementptr inbounds %struct.image, %struct.image* %396, i32 0, i32 11
  %397 = load i32, i32* %width1628, align 4
  %cmp1629 = icmp eq i32 %397, 0
  br i1 %cmp1629, label %cond.true.1631, label %cond.false.1632

cond.true.1631:                                   ; preds = %cond.false.1627
  br i1 false, label %cond.true.1733, label %lor.lhs.false.1713

cond.false.1632:                                  ; preds = %cond.false.1627
  br i1 false, label %cond.true.1633, label %cond.false.1679

cond.true.1633:                                   ; preds = %cond.false.1632
  %398 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1634 = getelementptr inbounds %struct.image, %struct.image* %398, i32 0, i32 11
  %399 = load i32, i32* %width1634, align 4
  %mul1635 = mul nsw i32 0, %399
  %conv1636 = sext i32 %mul1635 to i64
  %add1637 = add i64 %conv1636, 16
  %mul1638 = mul i64 0, %add1637
  %sub1639 = sub i64 %mul1638, 1
  %cmp1640 = icmp ult i64 %sub1639, 0
  br i1 %cmp1640, label %cond.true.1642, label %cond.false.1665

cond.true.1642:                                   ; preds = %cond.true.1633
  %400 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1643 = getelementptr inbounds %struct.image, %struct.image* %400, i32 0, i32 11
  %401 = load i32, i32* %width1643, align 4
  %mul1644 = mul nsw i32 0, %401
  %conv1645 = sext i32 %mul1644 to i64
  %add1646 = add i64 %conv1645, 16
  %mul1647 = mul i64 0, %add1646
  %add1648 = add i64 %mul1647, 0
  %neg1649 = xor i64 %add1648, -1
  %cmp1650 = icmp eq i64 %neg1649, -1
  %conv1651 = zext i1 %cmp1650 to i32
  %sub1652 = sub nsw i32 0, %conv1651
  %conv1653 = sext i32 %sub1652 to i64
  %402 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1654 = getelementptr inbounds %struct.image, %struct.image* %402, i32 0, i32 11
  %403 = load i32, i32* %width1654, align 4
  %mul1655 = mul nsw i32 0, %403
  %conv1656 = sext i32 %mul1655 to i64
  %add1657 = add i64 %conv1656, 16
  %mul1658 = mul i64 0, %add1657
  %add1659 = add i64 %mul1658, 1
  %shl1660 = shl i64 %add1659, 62
  %sub1661 = sub i64 %shl1660, 1
  %mul1662 = mul i64 %sub1661, 2
  %add1663 = add i64 %mul1662, 1
  %sub1664 = sub i64 %conv1653, %add1663
  br label %cond.end.1672

cond.false.1665:                                  ; preds = %cond.true.1633
  %404 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1666 = getelementptr inbounds %struct.image, %struct.image* %404, i32 0, i32 11
  %405 = load i32, i32* %width1666, align 4
  %mul1667 = mul nsw i32 0, %405
  %conv1668 = sext i32 %mul1667 to i64
  %add1669 = add i64 %conv1668, 16
  %mul1670 = mul i64 0, %add1669
  %add1671 = add i64 %mul1670, 0
  br label %cond.end.1672

cond.end.1672:                                    ; preds = %cond.false.1665, %cond.true.1642
  %cond1673 = phi i64 [ %sub1664, %cond.true.1642 ], [ %add1671, %cond.false.1665 ]
  %406 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1674 = getelementptr inbounds %struct.image, %struct.image* %406, i32 0, i32 11
  %407 = load i32, i32* %width1674, align 4
  %conv1675 = sext i32 %407 to i64
  %div1676 = udiv i64 %cond1673, %conv1675
  %cmp1677 = icmp ult i64 16, %div1676
  br i1 %cmp1677, label %cond.true.1733, label %lor.lhs.false.1713

cond.false.1679:                                  ; preds = %cond.false.1632
  %408 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1680 = getelementptr inbounds %struct.image, %struct.image* %408, i32 0, i32 11
  %409 = load i32, i32* %width1680, align 4
  %mul1681 = mul nsw i32 0, %409
  %conv1682 = sext i32 %mul1681 to i64
  %add1683 = add i64 %conv1682, 16
  %mul1684 = mul i64 0, %add1683
  %sub1685 = sub i64 %mul1684, 1
  %cmp1686 = icmp ult i64 %sub1685, 0
  br i1 %cmp1686, label %cond.true.1688, label %cond.false.1699

cond.true.1688:                                   ; preds = %cond.false.1679
  %410 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1689 = getelementptr inbounds %struct.image, %struct.image* %410, i32 0, i32 11
  %411 = load i32, i32* %width1689, align 4
  %mul1690 = mul nsw i32 0, %411
  %conv1691 = sext i32 %mul1690 to i64
  %add1692 = add i64 %conv1691, 16
  %mul1693 = mul i64 0, %add1692
  %add1694 = add i64 %mul1693, 1
  %shl1695 = shl i64 %add1694, 62
  %sub1696 = sub i64 %shl1695, 1
  %mul1697 = mul i64 %sub1696, 2
  %add1698 = add i64 %mul1697, 1
  br label %cond.end.1706

cond.false.1699:                                  ; preds = %cond.false.1679
  %412 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1700 = getelementptr inbounds %struct.image, %struct.image* %412, i32 0, i32 11
  %413 = load i32, i32* %width1700, align 4
  %mul1701 = mul nsw i32 0, %413
  %conv1702 = sext i32 %mul1701 to i64
  %add1703 = add i64 %conv1702, 16
  %mul1704 = mul i64 0, %add1703
  %sub1705 = sub i64 %mul1704, 1
  br label %cond.end.1706

cond.end.1706:                                    ; preds = %cond.false.1699, %cond.true.1688
  %cond1707 = phi i64 [ %add1698, %cond.true.1688 ], [ %sub1705, %cond.false.1699 ]
  %414 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1708 = getelementptr inbounds %struct.image, %struct.image* %414, i32 0, i32 11
  %415 = load i32, i32* %width1708, align 4
  %conv1709 = sext i32 %415 to i64
  %div1710 = udiv i64 %cond1707, %conv1709
  %cmp1711 = icmp ult i64 %div1710, 16
  br i1 %cmp1711, label %cond.true.1733, label %lor.lhs.false.1713

lor.lhs.false.1713:                               ; preds = %cond.end.1706, %cond.end.1672, %cond.true.1631, %cond.end.1620, %cond.true.1580, %cond.end.1569
  %416 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1714 = getelementptr inbounds %struct.image, %struct.image* %416, i32 0, i32 11
  %417 = load i32, i32* %width1714, align 4
  %conv1715 = sext i32 %417 to i64
  %mul1716 = mul i64 16, %conv1715
  %mul1717 = mul i64 0, %mul1716
  %sub1718 = sub i64 %mul1717, 1
  %cmp1719 = icmp ult i64 %sub1718, 0
  br i1 %cmp1719, label %land.lhs.true.1721, label %lor.lhs.false.1727

land.lhs.true.1721:                               ; preds = %lor.lhs.false.1713
  %418 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1722 = getelementptr inbounds %struct.image, %struct.image* %418, i32 0, i32 11
  %419 = load i32, i32* %width1722, align 4
  %conv1723 = sext i32 %419 to i64
  %mul1724 = mul i64 16, %conv1723
  %cmp1725 = icmp ult i64 %mul1724, -2147483648
  br i1 %cmp1725, label %cond.true.1733, label %lor.lhs.false.1727

lor.lhs.false.1727:                               ; preds = %land.lhs.true.1721, %lor.lhs.false.1713
  %420 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1728 = getelementptr inbounds %struct.image, %struct.image* %420, i32 0, i32 11
  %421 = load i32, i32* %width1728, align 4
  %conv1729 = sext i32 %421 to i64
  %mul1730 = mul i64 16, %conv1729
  %cmp1731 = icmp ult i64 2147483647, %mul1730
  br i1 %cmp1731, label %cond.true.1733, label %cond.false.1749

cond.true.1733:                                   ; preds = %lor.lhs.false.1727, %land.lhs.true.1721, %cond.end.1706, %cond.end.1672, %cond.true.1631, %cond.end.1620, %cond.true.1580, %cond.end.1569, %land.lhs.true.1533
  %422 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1734 = getelementptr inbounds %struct.image, %struct.image* %422, i32 0, i32 11
  %423 = load i32, i32* %width1734, align 4
  %mul1735 = mul i32 16, %423
  %cmp1736 = icmp ule i32 %mul1735, 2147483647
  br i1 %cmp1736, label %cond.true.1738, label %cond.false.1741

cond.true.1738:                                   ; preds = %cond.true.1733
  %424 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1739 = getelementptr inbounds %struct.image, %struct.image* %424, i32 0, i32 11
  %425 = load i32, i32* %width1739, align 4
  %mul1740 = mul i32 16, %425
  br label %cond.end.1746

cond.false.1741:                                  ; preds = %cond.true.1733
  %426 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1742 = getelementptr inbounds %struct.image, %struct.image* %426, i32 0, i32 11
  %427 = load i32, i32* %width1742, align 4
  %mul1743 = mul i32 16, %427
  %sub1744 = sub i32 %mul1743, -2147483648
  %add1745 = add nsw i32 %sub1744, -2147483648
  br label %cond.end.1746

cond.end.1746:                                    ; preds = %cond.false.1741, %cond.true.1738
  %cond1747 = phi i32 [ %mul1740, %cond.true.1738 ], [ %add1745, %cond.false.1741 ]
  %conv1748 = sext i32 %cond1747 to i64
  store i64 %conv1748, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.1749:                                  ; preds = %lor.lhs.false.1727
  %428 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1750 = getelementptr inbounds %struct.image, %struct.image* %428, i32 0, i32 11
  %429 = load i32, i32* %width1750, align 4
  %mul1751 = mul i32 16, %429
  %cmp1752 = icmp ule i32 %mul1751, 2147483647
  br i1 %cmp1752, label %cond.true.1754, label %cond.false.1757

cond.true.1754:                                   ; preds = %cond.false.1749
  %430 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1755 = getelementptr inbounds %struct.image, %struct.image* %430, i32 0, i32 11
  %431 = load i32, i32* %width1755, align 4
  %mul1756 = mul i32 16, %431
  br label %cond.end.1762

cond.false.1757:                                  ; preds = %cond.false.1749
  %432 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1758 = getelementptr inbounds %struct.image, %struct.image* %432, i32 0, i32 11
  %433 = load i32, i32* %width1758, align 4
  %mul1759 = mul i32 16, %433
  %sub1760 = sub i32 %mul1759, -2147483648
  %add1761 = add nsw i32 %sub1760, -2147483648
  br label %cond.end.1762

cond.end.1762:                                    ; preds = %cond.false.1757, %cond.true.1754
  %cond1763 = phi i32 [ %mul1756, %cond.true.1754 ], [ %add1761, %cond.false.1757 ]
  %conv1764 = sext i32 %cond1763 to i64
  store i64 %conv1764, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.1765:                                  ; preds = %cond.false.1241
  br i1 true, label %cond.true.1766, label %cond.false.2329

cond.true.1766:                                   ; preds = %cond.false.1765
  br i1 false, label %cond.true.1767, label %cond.false.2050

cond.true.1767:                                   ; preds = %cond.true.1766
  %434 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1768 = getelementptr inbounds %struct.image, %struct.image* %434, i32 0, i32 11
  %435 = load i32, i32* %width1768, align 4
  %conv1769 = sext i32 %435 to i64
  %mul1770 = mul nsw i64 0, %conv1769
  %add1771 = add nsw i64 %mul1770, 16
  %mul1772 = mul nsw i64 0, %add1771
  %sub1773 = sub nsw i64 %mul1772, 1
  %cmp1774 = icmp slt i64 %sub1773, 0
  br i1 %cmp1774, label %cond.true.1776, label %cond.false.1799

cond.true.1776:                                   ; preds = %cond.true.1767
  %436 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1777 = getelementptr inbounds %struct.image, %struct.image* %436, i32 0, i32 11
  %437 = load i32, i32* %width1777, align 4
  %conv1778 = sext i32 %437 to i64
  %mul1779 = mul nsw i64 0, %conv1778
  %add1780 = add nsw i64 %mul1779, 16
  %mul1781 = mul nsw i64 0, %add1780
  %add1782 = add nsw i64 %mul1781, 0
  %neg1783 = xor i64 %add1782, -1
  %cmp1784 = icmp eq i64 %neg1783, -1
  %conv1785 = zext i1 %cmp1784 to i32
  %sub1786 = sub nsw i32 0, %conv1785
  %conv1787 = sext i32 %sub1786 to i64
  %438 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1788 = getelementptr inbounds %struct.image, %struct.image* %438, i32 0, i32 11
  %439 = load i32, i32* %width1788, align 4
  %conv1789 = sext i32 %439 to i64
  %mul1790 = mul nsw i64 0, %conv1789
  %add1791 = add nsw i64 %mul1790, 16
  %mul1792 = mul nsw i64 0, %add1791
  %add1793 = add nsw i64 %mul1792, 1
  %shl1794 = shl i64 %add1793, 62
  %sub1795 = sub nsw i64 %shl1794, 1
  %mul1796 = mul nsw i64 %sub1795, 2
  %add1797 = add nsw i64 %mul1796, 1
  %sub1798 = sub nsw i64 %conv1787, %add1797
  br label %cond.end.1806

cond.false.1799:                                  ; preds = %cond.true.1767
  %440 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1800 = getelementptr inbounds %struct.image, %struct.image* %440, i32 0, i32 11
  %441 = load i32, i32* %width1800, align 4
  %conv1801 = sext i32 %441 to i64
  %mul1802 = mul nsw i64 0, %conv1801
  %add1803 = add nsw i64 %mul1802, 16
  %mul1804 = mul nsw i64 0, %add1803
  %add1805 = add nsw i64 %mul1804, 0
  br label %cond.end.1806

cond.end.1806:                                    ; preds = %cond.false.1799, %cond.true.1776
  %cond1807 = phi i64 [ %sub1798, %cond.true.1776 ], [ %add1805, %cond.false.1799 ]
  %cmp1808 = icmp eq i64 %cond1807, 0
  br i1 %cmp1808, label %land.lhs.true.1810, label %lor.lhs.false.1815

land.lhs.true.1810:                               ; preds = %cond.end.1806
  %442 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1811 = getelementptr inbounds %struct.image, %struct.image* %442, i32 0, i32 11
  %443 = load i32, i32* %width1811, align 4
  %conv1812 = sext i32 %443 to i64
  %cmp1813 = icmp slt i64 %conv1812, 0
  br i1 %cmp1813, label %cond.true.2014, label %lor.lhs.false.1815

lor.lhs.false.1815:                               ; preds = %land.lhs.true.1810, %cond.end.1806
  %444 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1816 = getelementptr inbounds %struct.image, %struct.image* %444, i32 0, i32 11
  %445 = load i32, i32* %width1816, align 4
  %conv1817 = sext i32 %445 to i64
  %cmp1818 = icmp slt i64 %conv1817, 0
  br i1 %cmp1818, label %cond.true.1820, label %cond.false.1907

cond.true.1820:                                   ; preds = %lor.lhs.false.1815
  br i1 false, label %cond.true.1821, label %cond.false.1855

cond.true.1821:                                   ; preds = %cond.true.1820
  %446 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1822 = getelementptr inbounds %struct.image, %struct.image* %446, i32 0, i32 11
  %447 = load i32, i32* %width1822, align 4
  %conv1823 = sext i32 %447 to i64
  %mul1824 = mul nsw i64 0, %conv1823
  %add1825 = add nsw i64 %mul1824, 16
  %mul1826 = mul nsw i64 0, %add1825
  %sub1827 = sub nsw i64 %mul1826, 1
  %cmp1828 = icmp slt i64 %sub1827, 0
  br i1 %cmp1828, label %cond.true.1830, label %cond.false.1841

cond.true.1830:                                   ; preds = %cond.true.1821
  %448 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1831 = getelementptr inbounds %struct.image, %struct.image* %448, i32 0, i32 11
  %449 = load i32, i32* %width1831, align 4
  %conv1832 = sext i32 %449 to i64
  %mul1833 = mul nsw i64 0, %conv1832
  %add1834 = add nsw i64 %mul1833, 16
  %mul1835 = mul nsw i64 0, %add1834
  %add1836 = add nsw i64 %mul1835, 1
  %shl1837 = shl i64 %add1836, 62
  %sub1838 = sub nsw i64 %shl1837, 1
  %mul1839 = mul nsw i64 %sub1838, 2
  %add1840 = add nsw i64 %mul1839, 1
  br label %cond.end.1848

cond.false.1841:                                  ; preds = %cond.true.1821
  %450 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1842 = getelementptr inbounds %struct.image, %struct.image* %450, i32 0, i32 11
  %451 = load i32, i32* %width1842, align 4
  %conv1843 = sext i32 %451 to i64
  %mul1844 = mul nsw i64 0, %conv1843
  %add1845 = add nsw i64 %mul1844, 16
  %mul1846 = mul nsw i64 0, %add1845
  %sub1847 = sub nsw i64 %mul1846, 1
  br label %cond.end.1848

cond.end.1848:                                    ; preds = %cond.false.1841, %cond.true.1830
  %cond1849 = phi i64 [ %add1840, %cond.true.1830 ], [ %sub1847, %cond.false.1841 ]
  %452 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1850 = getelementptr inbounds %struct.image, %struct.image* %452, i32 0, i32 11
  %453 = load i32, i32* %width1850, align 4
  %conv1851 = sext i32 %453 to i64
  %div1852 = sdiv i64 %cond1849, %conv1851
  %cmp1853 = icmp slt i64 16, %div1852
  br i1 %cmp1853, label %cond.true.2014, label %lor.lhs.false.1994

cond.false.1855:                                  ; preds = %cond.true.1820
  %454 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1856 = getelementptr inbounds %struct.image, %struct.image* %454, i32 0, i32 11
  %455 = load i32, i32* %width1856, align 4
  %conv1857 = sext i32 %455 to i64
  %cmp1858 = icmp eq i64 %conv1857, -1
  br i1 %cmp1858, label %cond.true.1860, label %cond.false.1861

cond.true.1860:                                   ; preds = %cond.false.1855
  br i1 false, label %cond.true.2014, label %lor.lhs.false.1994

cond.false.1861:                                  ; preds = %cond.false.1855
  %456 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1862 = getelementptr inbounds %struct.image, %struct.image* %456, i32 0, i32 11
  %457 = load i32, i32* %width1862, align 4
  %conv1863 = sext i32 %457 to i64
  %mul1864 = mul nsw i64 0, %conv1863
  %add1865 = add nsw i64 %mul1864, 16
  %mul1866 = mul nsw i64 0, %add1865
  %sub1867 = sub nsw i64 %mul1866, 1
  %cmp1868 = icmp slt i64 %sub1867, 0
  br i1 %cmp1868, label %cond.true.1870, label %cond.false.1893

cond.true.1870:                                   ; preds = %cond.false.1861
  %458 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1871 = getelementptr inbounds %struct.image, %struct.image* %458, i32 0, i32 11
  %459 = load i32, i32* %width1871, align 4
  %conv1872 = sext i32 %459 to i64
  %mul1873 = mul nsw i64 0, %conv1872
  %add1874 = add nsw i64 %mul1873, 16
  %mul1875 = mul nsw i64 0, %add1874
  %add1876 = add nsw i64 %mul1875, 0
  %neg1877 = xor i64 %add1876, -1
  %cmp1878 = icmp eq i64 %neg1877, -1
  %conv1879 = zext i1 %cmp1878 to i32
  %sub1880 = sub nsw i32 0, %conv1879
  %conv1881 = sext i32 %sub1880 to i64
  %460 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1882 = getelementptr inbounds %struct.image, %struct.image* %460, i32 0, i32 11
  %461 = load i32, i32* %width1882, align 4
  %conv1883 = sext i32 %461 to i64
  %mul1884 = mul nsw i64 0, %conv1883
  %add1885 = add nsw i64 %mul1884, 16
  %mul1886 = mul nsw i64 0, %add1885
  %add1887 = add nsw i64 %mul1886, 1
  %shl1888 = shl i64 %add1887, 62
  %sub1889 = sub nsw i64 %shl1888, 1
  %mul1890 = mul nsw i64 %sub1889, 2
  %add1891 = add nsw i64 %mul1890, 1
  %sub1892 = sub nsw i64 %conv1881, %add1891
  br label %cond.end.1900

cond.false.1893:                                  ; preds = %cond.false.1861
  %462 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1894 = getelementptr inbounds %struct.image, %struct.image* %462, i32 0, i32 11
  %463 = load i32, i32* %width1894, align 4
  %conv1895 = sext i32 %463 to i64
  %mul1896 = mul nsw i64 0, %conv1895
  %add1897 = add nsw i64 %mul1896, 16
  %mul1898 = mul nsw i64 0, %add1897
  %add1899 = add nsw i64 %mul1898, 0
  br label %cond.end.1900

cond.end.1900:                                    ; preds = %cond.false.1893, %cond.true.1870
  %cond1901 = phi i64 [ %sub1892, %cond.true.1870 ], [ %add1899, %cond.false.1893 ]
  %464 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1902 = getelementptr inbounds %struct.image, %struct.image* %464, i32 0, i32 11
  %465 = load i32, i32* %width1902, align 4
  %conv1903 = sext i32 %465 to i64
  %div1904 = sdiv i64 %cond1901, %conv1903
  %cmp1905 = icmp slt i64 %div1904, 16
  br i1 %cmp1905, label %cond.true.2014, label %lor.lhs.false.1994

cond.false.1907:                                  ; preds = %lor.lhs.false.1815
  %466 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1908 = getelementptr inbounds %struct.image, %struct.image* %466, i32 0, i32 11
  %467 = load i32, i32* %width1908, align 4
  %conv1909 = sext i32 %467 to i64
  %cmp1910 = icmp eq i64 %conv1909, 0
  br i1 %cmp1910, label %cond.true.1912, label %cond.false.1913

cond.true.1912:                                   ; preds = %cond.false.1907
  br i1 false, label %cond.true.2014, label %lor.lhs.false.1994

cond.false.1913:                                  ; preds = %cond.false.1907
  br i1 false, label %cond.true.1914, label %cond.false.1960

cond.true.1914:                                   ; preds = %cond.false.1913
  %468 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1915 = getelementptr inbounds %struct.image, %struct.image* %468, i32 0, i32 11
  %469 = load i32, i32* %width1915, align 4
  %conv1916 = sext i32 %469 to i64
  %mul1917 = mul nsw i64 0, %conv1916
  %add1918 = add nsw i64 %mul1917, 16
  %mul1919 = mul nsw i64 0, %add1918
  %sub1920 = sub nsw i64 %mul1919, 1
  %cmp1921 = icmp slt i64 %sub1920, 0
  br i1 %cmp1921, label %cond.true.1923, label %cond.false.1946

cond.true.1923:                                   ; preds = %cond.true.1914
  %470 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1924 = getelementptr inbounds %struct.image, %struct.image* %470, i32 0, i32 11
  %471 = load i32, i32* %width1924, align 4
  %conv1925 = sext i32 %471 to i64
  %mul1926 = mul nsw i64 0, %conv1925
  %add1927 = add nsw i64 %mul1926, 16
  %mul1928 = mul nsw i64 0, %add1927
  %add1929 = add nsw i64 %mul1928, 0
  %neg1930 = xor i64 %add1929, -1
  %cmp1931 = icmp eq i64 %neg1930, -1
  %conv1932 = zext i1 %cmp1931 to i32
  %sub1933 = sub nsw i32 0, %conv1932
  %conv1934 = sext i32 %sub1933 to i64
  %472 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1935 = getelementptr inbounds %struct.image, %struct.image* %472, i32 0, i32 11
  %473 = load i32, i32* %width1935, align 4
  %conv1936 = sext i32 %473 to i64
  %mul1937 = mul nsw i64 0, %conv1936
  %add1938 = add nsw i64 %mul1937, 16
  %mul1939 = mul nsw i64 0, %add1938
  %add1940 = add nsw i64 %mul1939, 1
  %shl1941 = shl i64 %add1940, 62
  %sub1942 = sub nsw i64 %shl1941, 1
  %mul1943 = mul nsw i64 %sub1942, 2
  %add1944 = add nsw i64 %mul1943, 1
  %sub1945 = sub nsw i64 %conv1934, %add1944
  br label %cond.end.1953

cond.false.1946:                                  ; preds = %cond.true.1914
  %474 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1947 = getelementptr inbounds %struct.image, %struct.image* %474, i32 0, i32 11
  %475 = load i32, i32* %width1947, align 4
  %conv1948 = sext i32 %475 to i64
  %mul1949 = mul nsw i64 0, %conv1948
  %add1950 = add nsw i64 %mul1949, 16
  %mul1951 = mul nsw i64 0, %add1950
  %add1952 = add nsw i64 %mul1951, 0
  br label %cond.end.1953

cond.end.1953:                                    ; preds = %cond.false.1946, %cond.true.1923
  %cond1954 = phi i64 [ %sub1945, %cond.true.1923 ], [ %add1952, %cond.false.1946 ]
  %476 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1955 = getelementptr inbounds %struct.image, %struct.image* %476, i32 0, i32 11
  %477 = load i32, i32* %width1955, align 4
  %conv1956 = sext i32 %477 to i64
  %div1957 = sdiv i64 %cond1954, %conv1956
  %cmp1958 = icmp slt i64 16, %div1957
  br i1 %cmp1958, label %cond.true.2014, label %lor.lhs.false.1994

cond.false.1960:                                  ; preds = %cond.false.1913
  %478 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1961 = getelementptr inbounds %struct.image, %struct.image* %478, i32 0, i32 11
  %479 = load i32, i32* %width1961, align 4
  %conv1962 = sext i32 %479 to i64
  %mul1963 = mul nsw i64 0, %conv1962
  %add1964 = add nsw i64 %mul1963, 16
  %mul1965 = mul nsw i64 0, %add1964
  %sub1966 = sub nsw i64 %mul1965, 1
  %cmp1967 = icmp slt i64 %sub1966, 0
  br i1 %cmp1967, label %cond.true.1969, label %cond.false.1980

cond.true.1969:                                   ; preds = %cond.false.1960
  %480 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1970 = getelementptr inbounds %struct.image, %struct.image* %480, i32 0, i32 11
  %481 = load i32, i32* %width1970, align 4
  %conv1971 = sext i32 %481 to i64
  %mul1972 = mul nsw i64 0, %conv1971
  %add1973 = add nsw i64 %mul1972, 16
  %mul1974 = mul nsw i64 0, %add1973
  %add1975 = add nsw i64 %mul1974, 1
  %shl1976 = shl i64 %add1975, 62
  %sub1977 = sub nsw i64 %shl1976, 1
  %mul1978 = mul nsw i64 %sub1977, 2
  %add1979 = add nsw i64 %mul1978, 1
  br label %cond.end.1987

cond.false.1980:                                  ; preds = %cond.false.1960
  %482 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1981 = getelementptr inbounds %struct.image, %struct.image* %482, i32 0, i32 11
  %483 = load i32, i32* %width1981, align 4
  %conv1982 = sext i32 %483 to i64
  %mul1983 = mul nsw i64 0, %conv1982
  %add1984 = add nsw i64 %mul1983, 16
  %mul1985 = mul nsw i64 0, %add1984
  %sub1986 = sub nsw i64 %mul1985, 1
  br label %cond.end.1987

cond.end.1987:                                    ; preds = %cond.false.1980, %cond.true.1969
  %cond1988 = phi i64 [ %add1979, %cond.true.1969 ], [ %sub1986, %cond.false.1980 ]
  %484 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1989 = getelementptr inbounds %struct.image, %struct.image* %484, i32 0, i32 11
  %485 = load i32, i32* %width1989, align 4
  %conv1990 = sext i32 %485 to i64
  %div1991 = sdiv i64 %cond1988, %conv1990
  %cmp1992 = icmp slt i64 %div1991, 16
  br i1 %cmp1992, label %cond.true.2014, label %lor.lhs.false.1994

lor.lhs.false.1994:                               ; preds = %cond.end.1987, %cond.end.1953, %cond.true.1912, %cond.end.1900, %cond.true.1860, %cond.end.1848
  %486 = load %struct.image*, %struct.image** %img.addr, align 8
  %width1995 = getelementptr inbounds %struct.image, %struct.image* %486, i32 0, i32 11
  %487 = load i32, i32* %width1995, align 4
  %conv1996 = sext i32 %487 to i64
  %mul1997 = mul nsw i64 16, %conv1996
  %mul1998 = mul nsw i64 0, %mul1997
  %sub1999 = sub nsw i64 %mul1998, 1
  %cmp2000 = icmp slt i64 %sub1999, 0
  br i1 %cmp2000, label %land.lhs.true.2002, label %lor.lhs.false.2008

land.lhs.true.2002:                               ; preds = %lor.lhs.false.1994
  %488 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2003 = getelementptr inbounds %struct.image, %struct.image* %488, i32 0, i32 11
  %489 = load i32, i32* %width2003, align 4
  %conv2004 = sext i32 %489 to i64
  %mul2005 = mul nsw i64 16, %conv2004
  %cmp2006 = icmp slt i64 %mul2005, -9223372036854775808
  br i1 %cmp2006, label %cond.true.2014, label %lor.lhs.false.2008

lor.lhs.false.2008:                               ; preds = %land.lhs.true.2002, %lor.lhs.false.1994
  %490 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2009 = getelementptr inbounds %struct.image, %struct.image* %490, i32 0, i32 11
  %491 = load i32, i32* %width2009, align 4
  %conv2010 = sext i32 %491 to i64
  %mul2011 = mul nsw i64 16, %conv2010
  %cmp2012 = icmp slt i64 9223372036854775807, %mul2011
  br i1 %cmp2012, label %cond.true.2014, label %cond.false.2032

cond.true.2014:                                   ; preds = %lor.lhs.false.2008, %land.lhs.true.2002, %cond.end.1987, %cond.end.1953, %cond.true.1912, %cond.end.1900, %cond.true.1860, %cond.end.1848, %land.lhs.true.1810
  %492 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2015 = getelementptr inbounds %struct.image, %struct.image* %492, i32 0, i32 11
  %493 = load i32, i32* %width2015, align 4
  %conv2016 = sext i32 %493 to i64
  %mul2017 = mul i64 16, %conv2016
  %cmp2018 = icmp ule i64 %mul2017, 9223372036854775807
  br i1 %cmp2018, label %cond.true.2020, label %cond.false.2024

cond.true.2020:                                   ; preds = %cond.true.2014
  %494 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2021 = getelementptr inbounds %struct.image, %struct.image* %494, i32 0, i32 11
  %495 = load i32, i32* %width2021, align 4
  %conv2022 = sext i32 %495 to i64
  %mul2023 = mul i64 16, %conv2022
  br label %cond.end.2030

cond.false.2024:                                  ; preds = %cond.true.2014
  %496 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2025 = getelementptr inbounds %struct.image, %struct.image* %496, i32 0, i32 11
  %497 = load i32, i32* %width2025, align 4
  %conv2026 = sext i32 %497 to i64
  %mul2027 = mul i64 16, %conv2026
  %sub2028 = sub i64 %mul2027, -9223372036854775808
  %add2029 = add nsw i64 %sub2028, -9223372036854775808
  br label %cond.end.2030

cond.end.2030:                                    ; preds = %cond.false.2024, %cond.true.2020
  %cond2031 = phi i64 [ %mul2023, %cond.true.2020 ], [ %add2029, %cond.false.2024 ]
  store i64 %cond2031, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.2032:                                  ; preds = %lor.lhs.false.2008
  %498 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2033 = getelementptr inbounds %struct.image, %struct.image* %498, i32 0, i32 11
  %499 = load i32, i32* %width2033, align 4
  %conv2034 = sext i32 %499 to i64
  %mul2035 = mul i64 16, %conv2034
  %cmp2036 = icmp ule i64 %mul2035, 9223372036854775807
  br i1 %cmp2036, label %cond.true.2038, label %cond.false.2042

cond.true.2038:                                   ; preds = %cond.false.2032
  %500 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2039 = getelementptr inbounds %struct.image, %struct.image* %500, i32 0, i32 11
  %501 = load i32, i32* %width2039, align 4
  %conv2040 = sext i32 %501 to i64
  %mul2041 = mul i64 16, %conv2040
  br label %cond.end.2048

cond.false.2042:                                  ; preds = %cond.false.2032
  %502 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2043 = getelementptr inbounds %struct.image, %struct.image* %502, i32 0, i32 11
  %503 = load i32, i32* %width2043, align 4
  %conv2044 = sext i32 %503 to i64
  %mul2045 = mul i64 16, %conv2044
  %sub2046 = sub i64 %mul2045, -9223372036854775808
  %add2047 = add nsw i64 %sub2046, -9223372036854775808
  br label %cond.end.2048

cond.end.2048:                                    ; preds = %cond.false.2042, %cond.true.2038
  %cond2049 = phi i64 [ %mul2041, %cond.true.2038 ], [ %add2047, %cond.false.2042 ]
  store i64 %cond2049, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.2050:                                  ; preds = %cond.true.1766
  %504 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2051 = getelementptr inbounds %struct.image, %struct.image* %504, i32 0, i32 11
  %505 = load i32, i32* %width2051, align 4
  %mul2052 = mul nsw i32 0, %505
  %conv2053 = sext i32 %mul2052 to i64
  %add2054 = add i64 %conv2053, 16
  %mul2055 = mul i64 0, %add2054
  %sub2056 = sub i64 %mul2055, 1
  %cmp2057 = icmp ult i64 %sub2056, 0
  br i1 %cmp2057, label %cond.true.2059, label %cond.false.2082

cond.true.2059:                                   ; preds = %cond.false.2050
  %506 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2060 = getelementptr inbounds %struct.image, %struct.image* %506, i32 0, i32 11
  %507 = load i32, i32* %width2060, align 4
  %mul2061 = mul nsw i32 0, %507
  %conv2062 = sext i32 %mul2061 to i64
  %add2063 = add i64 %conv2062, 16
  %mul2064 = mul i64 0, %add2063
  %add2065 = add i64 %mul2064, 0
  %neg2066 = xor i64 %add2065, -1
  %cmp2067 = icmp eq i64 %neg2066, -1
  %conv2068 = zext i1 %cmp2067 to i32
  %sub2069 = sub nsw i32 0, %conv2068
  %conv2070 = sext i32 %sub2069 to i64
  %508 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2071 = getelementptr inbounds %struct.image, %struct.image* %508, i32 0, i32 11
  %509 = load i32, i32* %width2071, align 4
  %mul2072 = mul nsw i32 0, %509
  %conv2073 = sext i32 %mul2072 to i64
  %add2074 = add i64 %conv2073, 16
  %mul2075 = mul i64 0, %add2074
  %add2076 = add i64 %mul2075, 1
  %shl2077 = shl i64 %add2076, 62
  %sub2078 = sub i64 %shl2077, 1
  %mul2079 = mul i64 %sub2078, 2
  %add2080 = add i64 %mul2079, 1
  %sub2081 = sub i64 %conv2070, %add2080
  br label %cond.end.2089

cond.false.2082:                                  ; preds = %cond.false.2050
  %510 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2083 = getelementptr inbounds %struct.image, %struct.image* %510, i32 0, i32 11
  %511 = load i32, i32* %width2083, align 4
  %mul2084 = mul nsw i32 0, %511
  %conv2085 = sext i32 %mul2084 to i64
  %add2086 = add i64 %conv2085, 16
  %mul2087 = mul i64 0, %add2086
  %add2088 = add i64 %mul2087, 0
  br label %cond.end.2089

cond.end.2089:                                    ; preds = %cond.false.2082, %cond.true.2059
  %cond2090 = phi i64 [ %sub2081, %cond.true.2059 ], [ %add2088, %cond.false.2082 ]
  %cmp2091 = icmp eq i64 %cond2090, 0
  br i1 %cmp2091, label %land.lhs.true.2093, label %lor.lhs.false.2097

land.lhs.true.2093:                               ; preds = %cond.end.2089
  %512 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2094 = getelementptr inbounds %struct.image, %struct.image* %512, i32 0, i32 11
  %513 = load i32, i32* %width2094, align 4
  %cmp2095 = icmp slt i32 %513, 0
  br i1 %cmp2095, label %cond.true.2293, label %lor.lhs.false.2097

lor.lhs.false.2097:                               ; preds = %land.lhs.true.2093, %cond.end.2089
  %514 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2098 = getelementptr inbounds %struct.image, %struct.image* %514, i32 0, i32 11
  %515 = load i32, i32* %width2098, align 4
  %cmp2099 = icmp slt i32 %515, 0
  br i1 %cmp2099, label %cond.true.2101, label %cond.false.2187

cond.true.2101:                                   ; preds = %lor.lhs.false.2097
  br i1 false, label %cond.true.2102, label %cond.false.2136

cond.true.2102:                                   ; preds = %cond.true.2101
  %516 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2103 = getelementptr inbounds %struct.image, %struct.image* %516, i32 0, i32 11
  %517 = load i32, i32* %width2103, align 4
  %mul2104 = mul nsw i32 0, %517
  %conv2105 = sext i32 %mul2104 to i64
  %add2106 = add i64 %conv2105, 16
  %mul2107 = mul i64 0, %add2106
  %sub2108 = sub i64 %mul2107, 1
  %cmp2109 = icmp ult i64 %sub2108, 0
  br i1 %cmp2109, label %cond.true.2111, label %cond.false.2122

cond.true.2111:                                   ; preds = %cond.true.2102
  %518 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2112 = getelementptr inbounds %struct.image, %struct.image* %518, i32 0, i32 11
  %519 = load i32, i32* %width2112, align 4
  %mul2113 = mul nsw i32 0, %519
  %conv2114 = sext i32 %mul2113 to i64
  %add2115 = add i64 %conv2114, 16
  %mul2116 = mul i64 0, %add2115
  %add2117 = add i64 %mul2116, 1
  %shl2118 = shl i64 %add2117, 62
  %sub2119 = sub i64 %shl2118, 1
  %mul2120 = mul i64 %sub2119, 2
  %add2121 = add i64 %mul2120, 1
  br label %cond.end.2129

cond.false.2122:                                  ; preds = %cond.true.2102
  %520 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2123 = getelementptr inbounds %struct.image, %struct.image* %520, i32 0, i32 11
  %521 = load i32, i32* %width2123, align 4
  %mul2124 = mul nsw i32 0, %521
  %conv2125 = sext i32 %mul2124 to i64
  %add2126 = add i64 %conv2125, 16
  %mul2127 = mul i64 0, %add2126
  %sub2128 = sub i64 %mul2127, 1
  br label %cond.end.2129

cond.end.2129:                                    ; preds = %cond.false.2122, %cond.true.2111
  %cond2130 = phi i64 [ %add2121, %cond.true.2111 ], [ %sub2128, %cond.false.2122 ]
  %522 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2131 = getelementptr inbounds %struct.image, %struct.image* %522, i32 0, i32 11
  %523 = load i32, i32* %width2131, align 4
  %conv2132 = sext i32 %523 to i64
  %div2133 = udiv i64 %cond2130, %conv2132
  %cmp2134 = icmp ult i64 16, %div2133
  br i1 %cmp2134, label %cond.true.2293, label %lor.lhs.false.2273

cond.false.2136:                                  ; preds = %cond.true.2101
  %524 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2137 = getelementptr inbounds %struct.image, %struct.image* %524, i32 0, i32 11
  %525 = load i32, i32* %width2137, align 4
  %cmp2138 = icmp eq i32 %525, -1
  br i1 %cmp2138, label %cond.true.2140, label %cond.false.2141

cond.true.2140:                                   ; preds = %cond.false.2136
  br i1 false, label %cond.true.2293, label %lor.lhs.false.2273

cond.false.2141:                                  ; preds = %cond.false.2136
  %526 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2142 = getelementptr inbounds %struct.image, %struct.image* %526, i32 0, i32 11
  %527 = load i32, i32* %width2142, align 4
  %mul2143 = mul nsw i32 0, %527
  %conv2144 = sext i32 %mul2143 to i64
  %add2145 = add i64 %conv2144, 16
  %mul2146 = mul i64 0, %add2145
  %sub2147 = sub i64 %mul2146, 1
  %cmp2148 = icmp ult i64 %sub2147, 0
  br i1 %cmp2148, label %cond.true.2150, label %cond.false.2173

cond.true.2150:                                   ; preds = %cond.false.2141
  %528 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2151 = getelementptr inbounds %struct.image, %struct.image* %528, i32 0, i32 11
  %529 = load i32, i32* %width2151, align 4
  %mul2152 = mul nsw i32 0, %529
  %conv2153 = sext i32 %mul2152 to i64
  %add2154 = add i64 %conv2153, 16
  %mul2155 = mul i64 0, %add2154
  %add2156 = add i64 %mul2155, 0
  %neg2157 = xor i64 %add2156, -1
  %cmp2158 = icmp eq i64 %neg2157, -1
  %conv2159 = zext i1 %cmp2158 to i32
  %sub2160 = sub nsw i32 0, %conv2159
  %conv2161 = sext i32 %sub2160 to i64
  %530 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2162 = getelementptr inbounds %struct.image, %struct.image* %530, i32 0, i32 11
  %531 = load i32, i32* %width2162, align 4
  %mul2163 = mul nsw i32 0, %531
  %conv2164 = sext i32 %mul2163 to i64
  %add2165 = add i64 %conv2164, 16
  %mul2166 = mul i64 0, %add2165
  %add2167 = add i64 %mul2166, 1
  %shl2168 = shl i64 %add2167, 62
  %sub2169 = sub i64 %shl2168, 1
  %mul2170 = mul i64 %sub2169, 2
  %add2171 = add i64 %mul2170, 1
  %sub2172 = sub i64 %conv2161, %add2171
  br label %cond.end.2180

cond.false.2173:                                  ; preds = %cond.false.2141
  %532 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2174 = getelementptr inbounds %struct.image, %struct.image* %532, i32 0, i32 11
  %533 = load i32, i32* %width2174, align 4
  %mul2175 = mul nsw i32 0, %533
  %conv2176 = sext i32 %mul2175 to i64
  %add2177 = add i64 %conv2176, 16
  %mul2178 = mul i64 0, %add2177
  %add2179 = add i64 %mul2178, 0
  br label %cond.end.2180

cond.end.2180:                                    ; preds = %cond.false.2173, %cond.true.2150
  %cond2181 = phi i64 [ %sub2172, %cond.true.2150 ], [ %add2179, %cond.false.2173 ]
  %534 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2182 = getelementptr inbounds %struct.image, %struct.image* %534, i32 0, i32 11
  %535 = load i32, i32* %width2182, align 4
  %conv2183 = sext i32 %535 to i64
  %div2184 = udiv i64 %cond2181, %conv2183
  %cmp2185 = icmp ult i64 %div2184, 16
  br i1 %cmp2185, label %cond.true.2293, label %lor.lhs.false.2273

cond.false.2187:                                  ; preds = %lor.lhs.false.2097
  %536 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2188 = getelementptr inbounds %struct.image, %struct.image* %536, i32 0, i32 11
  %537 = load i32, i32* %width2188, align 4
  %cmp2189 = icmp eq i32 %537, 0
  br i1 %cmp2189, label %cond.true.2191, label %cond.false.2192

cond.true.2191:                                   ; preds = %cond.false.2187
  br i1 false, label %cond.true.2293, label %lor.lhs.false.2273

cond.false.2192:                                  ; preds = %cond.false.2187
  br i1 false, label %cond.true.2193, label %cond.false.2239

cond.true.2193:                                   ; preds = %cond.false.2192
  %538 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2194 = getelementptr inbounds %struct.image, %struct.image* %538, i32 0, i32 11
  %539 = load i32, i32* %width2194, align 4
  %mul2195 = mul nsw i32 0, %539
  %conv2196 = sext i32 %mul2195 to i64
  %add2197 = add i64 %conv2196, 16
  %mul2198 = mul i64 0, %add2197
  %sub2199 = sub i64 %mul2198, 1
  %cmp2200 = icmp ult i64 %sub2199, 0
  br i1 %cmp2200, label %cond.true.2202, label %cond.false.2225

cond.true.2202:                                   ; preds = %cond.true.2193
  %540 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2203 = getelementptr inbounds %struct.image, %struct.image* %540, i32 0, i32 11
  %541 = load i32, i32* %width2203, align 4
  %mul2204 = mul nsw i32 0, %541
  %conv2205 = sext i32 %mul2204 to i64
  %add2206 = add i64 %conv2205, 16
  %mul2207 = mul i64 0, %add2206
  %add2208 = add i64 %mul2207, 0
  %neg2209 = xor i64 %add2208, -1
  %cmp2210 = icmp eq i64 %neg2209, -1
  %conv2211 = zext i1 %cmp2210 to i32
  %sub2212 = sub nsw i32 0, %conv2211
  %conv2213 = sext i32 %sub2212 to i64
  %542 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2214 = getelementptr inbounds %struct.image, %struct.image* %542, i32 0, i32 11
  %543 = load i32, i32* %width2214, align 4
  %mul2215 = mul nsw i32 0, %543
  %conv2216 = sext i32 %mul2215 to i64
  %add2217 = add i64 %conv2216, 16
  %mul2218 = mul i64 0, %add2217
  %add2219 = add i64 %mul2218, 1
  %shl2220 = shl i64 %add2219, 62
  %sub2221 = sub i64 %shl2220, 1
  %mul2222 = mul i64 %sub2221, 2
  %add2223 = add i64 %mul2222, 1
  %sub2224 = sub i64 %conv2213, %add2223
  br label %cond.end.2232

cond.false.2225:                                  ; preds = %cond.true.2193
  %544 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2226 = getelementptr inbounds %struct.image, %struct.image* %544, i32 0, i32 11
  %545 = load i32, i32* %width2226, align 4
  %mul2227 = mul nsw i32 0, %545
  %conv2228 = sext i32 %mul2227 to i64
  %add2229 = add i64 %conv2228, 16
  %mul2230 = mul i64 0, %add2229
  %add2231 = add i64 %mul2230, 0
  br label %cond.end.2232

cond.end.2232:                                    ; preds = %cond.false.2225, %cond.true.2202
  %cond2233 = phi i64 [ %sub2224, %cond.true.2202 ], [ %add2231, %cond.false.2225 ]
  %546 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2234 = getelementptr inbounds %struct.image, %struct.image* %546, i32 0, i32 11
  %547 = load i32, i32* %width2234, align 4
  %conv2235 = sext i32 %547 to i64
  %div2236 = udiv i64 %cond2233, %conv2235
  %cmp2237 = icmp ult i64 16, %div2236
  br i1 %cmp2237, label %cond.true.2293, label %lor.lhs.false.2273

cond.false.2239:                                  ; preds = %cond.false.2192
  %548 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2240 = getelementptr inbounds %struct.image, %struct.image* %548, i32 0, i32 11
  %549 = load i32, i32* %width2240, align 4
  %mul2241 = mul nsw i32 0, %549
  %conv2242 = sext i32 %mul2241 to i64
  %add2243 = add i64 %conv2242, 16
  %mul2244 = mul i64 0, %add2243
  %sub2245 = sub i64 %mul2244, 1
  %cmp2246 = icmp ult i64 %sub2245, 0
  br i1 %cmp2246, label %cond.true.2248, label %cond.false.2259

cond.true.2248:                                   ; preds = %cond.false.2239
  %550 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2249 = getelementptr inbounds %struct.image, %struct.image* %550, i32 0, i32 11
  %551 = load i32, i32* %width2249, align 4
  %mul2250 = mul nsw i32 0, %551
  %conv2251 = sext i32 %mul2250 to i64
  %add2252 = add i64 %conv2251, 16
  %mul2253 = mul i64 0, %add2252
  %add2254 = add i64 %mul2253, 1
  %shl2255 = shl i64 %add2254, 62
  %sub2256 = sub i64 %shl2255, 1
  %mul2257 = mul i64 %sub2256, 2
  %add2258 = add i64 %mul2257, 1
  br label %cond.end.2266

cond.false.2259:                                  ; preds = %cond.false.2239
  %552 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2260 = getelementptr inbounds %struct.image, %struct.image* %552, i32 0, i32 11
  %553 = load i32, i32* %width2260, align 4
  %mul2261 = mul nsw i32 0, %553
  %conv2262 = sext i32 %mul2261 to i64
  %add2263 = add i64 %conv2262, 16
  %mul2264 = mul i64 0, %add2263
  %sub2265 = sub i64 %mul2264, 1
  br label %cond.end.2266

cond.end.2266:                                    ; preds = %cond.false.2259, %cond.true.2248
  %cond2267 = phi i64 [ %add2258, %cond.true.2248 ], [ %sub2265, %cond.false.2259 ]
  %554 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2268 = getelementptr inbounds %struct.image, %struct.image* %554, i32 0, i32 11
  %555 = load i32, i32* %width2268, align 4
  %conv2269 = sext i32 %555 to i64
  %div2270 = udiv i64 %cond2267, %conv2269
  %cmp2271 = icmp ult i64 %div2270, 16
  br i1 %cmp2271, label %cond.true.2293, label %lor.lhs.false.2273

lor.lhs.false.2273:                               ; preds = %cond.end.2266, %cond.end.2232, %cond.true.2191, %cond.end.2180, %cond.true.2140, %cond.end.2129
  %556 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2274 = getelementptr inbounds %struct.image, %struct.image* %556, i32 0, i32 11
  %557 = load i32, i32* %width2274, align 4
  %conv2275 = sext i32 %557 to i64
  %mul2276 = mul i64 16, %conv2275
  %mul2277 = mul i64 0, %mul2276
  %sub2278 = sub i64 %mul2277, 1
  %cmp2279 = icmp ult i64 %sub2278, 0
  br i1 %cmp2279, label %land.lhs.true.2281, label %lor.lhs.false.2287

land.lhs.true.2281:                               ; preds = %lor.lhs.false.2273
  %558 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2282 = getelementptr inbounds %struct.image, %struct.image* %558, i32 0, i32 11
  %559 = load i32, i32* %width2282, align 4
  %conv2283 = sext i32 %559 to i64
  %mul2284 = mul i64 16, %conv2283
  %cmp2285 = icmp ult i64 %mul2284, -9223372036854775808
  br i1 %cmp2285, label %cond.true.2293, label %lor.lhs.false.2287

lor.lhs.false.2287:                               ; preds = %land.lhs.true.2281, %lor.lhs.false.2273
  %560 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2288 = getelementptr inbounds %struct.image, %struct.image* %560, i32 0, i32 11
  %561 = load i32, i32* %width2288, align 4
  %conv2289 = sext i32 %561 to i64
  %mul2290 = mul i64 16, %conv2289
  %cmp2291 = icmp ult i64 9223372036854775807, %mul2290
  br i1 %cmp2291, label %cond.true.2293, label %cond.false.2311

cond.true.2293:                                   ; preds = %lor.lhs.false.2287, %land.lhs.true.2281, %cond.end.2266, %cond.end.2232, %cond.true.2191, %cond.end.2180, %cond.true.2140, %cond.end.2129, %land.lhs.true.2093
  %562 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2294 = getelementptr inbounds %struct.image, %struct.image* %562, i32 0, i32 11
  %563 = load i32, i32* %width2294, align 4
  %conv2295 = sext i32 %563 to i64
  %mul2296 = mul i64 16, %conv2295
  %cmp2297 = icmp ule i64 %mul2296, 9223372036854775807
  br i1 %cmp2297, label %cond.true.2299, label %cond.false.2303

cond.true.2299:                                   ; preds = %cond.true.2293
  %564 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2300 = getelementptr inbounds %struct.image, %struct.image* %564, i32 0, i32 11
  %565 = load i32, i32* %width2300, align 4
  %conv2301 = sext i32 %565 to i64
  %mul2302 = mul i64 16, %conv2301
  br label %cond.end.2309

cond.false.2303:                                  ; preds = %cond.true.2293
  %566 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2304 = getelementptr inbounds %struct.image, %struct.image* %566, i32 0, i32 11
  %567 = load i32, i32* %width2304, align 4
  %conv2305 = sext i32 %567 to i64
  %mul2306 = mul i64 16, %conv2305
  %sub2307 = sub i64 %mul2306, -9223372036854775808
  %add2308 = add nsw i64 %sub2307, -9223372036854775808
  br label %cond.end.2309

cond.end.2309:                                    ; preds = %cond.false.2303, %cond.true.2299
  %cond2310 = phi i64 [ %mul2302, %cond.true.2299 ], [ %add2308, %cond.false.2303 ]
  store i64 %cond2310, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.2311:                                  ; preds = %lor.lhs.false.2287
  %568 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2312 = getelementptr inbounds %struct.image, %struct.image* %568, i32 0, i32 11
  %569 = load i32, i32* %width2312, align 4
  %conv2313 = sext i32 %569 to i64
  %mul2314 = mul i64 16, %conv2313
  %cmp2315 = icmp ule i64 %mul2314, 9223372036854775807
  br i1 %cmp2315, label %cond.true.2317, label %cond.false.2321

cond.true.2317:                                   ; preds = %cond.false.2311
  %570 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2318 = getelementptr inbounds %struct.image, %struct.image* %570, i32 0, i32 11
  %571 = load i32, i32* %width2318, align 4
  %conv2319 = sext i32 %571 to i64
  %mul2320 = mul i64 16, %conv2319
  br label %cond.end.2327

cond.false.2321:                                  ; preds = %cond.false.2311
  %572 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2322 = getelementptr inbounds %struct.image, %struct.image* %572, i32 0, i32 11
  %573 = load i32, i32* %width2322, align 4
  %conv2323 = sext i32 %573 to i64
  %mul2324 = mul i64 16, %conv2323
  %sub2325 = sub i64 %mul2324, -9223372036854775808
  %add2326 = add nsw i64 %sub2325, -9223372036854775808
  br label %cond.end.2327

cond.end.2327:                                    ; preds = %cond.false.2321, %cond.true.2317
  %cond2328 = phi i64 [ %mul2320, %cond.true.2317 ], [ %add2326, %cond.false.2321 ]
  store i64 %cond2328, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.2329:                                  ; preds = %cond.false.1765
  br i1 false, label %cond.true.2330, label %cond.false.2613

cond.true.2330:                                   ; preds = %cond.false.2329
  %574 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2331 = getelementptr inbounds %struct.image, %struct.image* %574, i32 0, i32 11
  %575 = load i32, i32* %width2331, align 4
  %conv2332 = sext i32 %575 to i64
  %mul2333 = mul nsw i64 0, %conv2332
  %add2334 = add nsw i64 %mul2333, 16
  %mul2335 = mul nsw i64 0, %add2334
  %sub2336 = sub nsw i64 %mul2335, 1
  %cmp2337 = icmp slt i64 %sub2336, 0
  br i1 %cmp2337, label %cond.true.2339, label %cond.false.2362

cond.true.2339:                                   ; preds = %cond.true.2330
  %576 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2340 = getelementptr inbounds %struct.image, %struct.image* %576, i32 0, i32 11
  %577 = load i32, i32* %width2340, align 4
  %conv2341 = sext i32 %577 to i64
  %mul2342 = mul nsw i64 0, %conv2341
  %add2343 = add nsw i64 %mul2342, 16
  %mul2344 = mul nsw i64 0, %add2343
  %add2345 = add nsw i64 %mul2344, 0
  %neg2346 = xor i64 %add2345, -1
  %cmp2347 = icmp eq i64 %neg2346, -1
  %conv2348 = zext i1 %cmp2347 to i32
  %sub2349 = sub nsw i32 0, %conv2348
  %conv2350 = sext i32 %sub2349 to i64
  %578 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2351 = getelementptr inbounds %struct.image, %struct.image* %578, i32 0, i32 11
  %579 = load i32, i32* %width2351, align 4
  %conv2352 = sext i32 %579 to i64
  %mul2353 = mul nsw i64 0, %conv2352
  %add2354 = add nsw i64 %mul2353, 16
  %mul2355 = mul nsw i64 0, %add2354
  %add2356 = add nsw i64 %mul2355, 1
  %shl2357 = shl i64 %add2356, 62
  %sub2358 = sub nsw i64 %shl2357, 1
  %mul2359 = mul nsw i64 %sub2358, 2
  %add2360 = add nsw i64 %mul2359, 1
  %sub2361 = sub nsw i64 %conv2350, %add2360
  br label %cond.end.2369

cond.false.2362:                                  ; preds = %cond.true.2330
  %580 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2363 = getelementptr inbounds %struct.image, %struct.image* %580, i32 0, i32 11
  %581 = load i32, i32* %width2363, align 4
  %conv2364 = sext i32 %581 to i64
  %mul2365 = mul nsw i64 0, %conv2364
  %add2366 = add nsw i64 %mul2365, 16
  %mul2367 = mul nsw i64 0, %add2366
  %add2368 = add nsw i64 %mul2367, 0
  br label %cond.end.2369

cond.end.2369:                                    ; preds = %cond.false.2362, %cond.true.2339
  %cond2370 = phi i64 [ %sub2361, %cond.true.2339 ], [ %add2368, %cond.false.2362 ]
  %cmp2371 = icmp eq i64 %cond2370, 0
  br i1 %cmp2371, label %land.lhs.true.2373, label %lor.lhs.false.2378

land.lhs.true.2373:                               ; preds = %cond.end.2369
  %582 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2374 = getelementptr inbounds %struct.image, %struct.image* %582, i32 0, i32 11
  %583 = load i32, i32* %width2374, align 4
  %conv2375 = sext i32 %583 to i64
  %cmp2376 = icmp slt i64 %conv2375, 0
  br i1 %cmp2376, label %cond.true.2577, label %lor.lhs.false.2378

lor.lhs.false.2378:                               ; preds = %land.lhs.true.2373, %cond.end.2369
  %584 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2379 = getelementptr inbounds %struct.image, %struct.image* %584, i32 0, i32 11
  %585 = load i32, i32* %width2379, align 4
  %conv2380 = sext i32 %585 to i64
  %cmp2381 = icmp slt i64 %conv2380, 0
  br i1 %cmp2381, label %cond.true.2383, label %cond.false.2470

cond.true.2383:                                   ; preds = %lor.lhs.false.2378
  br i1 false, label %cond.true.2384, label %cond.false.2418

cond.true.2384:                                   ; preds = %cond.true.2383
  %586 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2385 = getelementptr inbounds %struct.image, %struct.image* %586, i32 0, i32 11
  %587 = load i32, i32* %width2385, align 4
  %conv2386 = sext i32 %587 to i64
  %mul2387 = mul nsw i64 0, %conv2386
  %add2388 = add nsw i64 %mul2387, 16
  %mul2389 = mul nsw i64 0, %add2388
  %sub2390 = sub nsw i64 %mul2389, 1
  %cmp2391 = icmp slt i64 %sub2390, 0
  br i1 %cmp2391, label %cond.true.2393, label %cond.false.2404

cond.true.2393:                                   ; preds = %cond.true.2384
  %588 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2394 = getelementptr inbounds %struct.image, %struct.image* %588, i32 0, i32 11
  %589 = load i32, i32* %width2394, align 4
  %conv2395 = sext i32 %589 to i64
  %mul2396 = mul nsw i64 0, %conv2395
  %add2397 = add nsw i64 %mul2396, 16
  %mul2398 = mul nsw i64 0, %add2397
  %add2399 = add nsw i64 %mul2398, 1
  %shl2400 = shl i64 %add2399, 62
  %sub2401 = sub nsw i64 %shl2400, 1
  %mul2402 = mul nsw i64 %sub2401, 2
  %add2403 = add nsw i64 %mul2402, 1
  br label %cond.end.2411

cond.false.2404:                                  ; preds = %cond.true.2384
  %590 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2405 = getelementptr inbounds %struct.image, %struct.image* %590, i32 0, i32 11
  %591 = load i32, i32* %width2405, align 4
  %conv2406 = sext i32 %591 to i64
  %mul2407 = mul nsw i64 0, %conv2406
  %add2408 = add nsw i64 %mul2407, 16
  %mul2409 = mul nsw i64 0, %add2408
  %sub2410 = sub nsw i64 %mul2409, 1
  br label %cond.end.2411

cond.end.2411:                                    ; preds = %cond.false.2404, %cond.true.2393
  %cond2412 = phi i64 [ %add2403, %cond.true.2393 ], [ %sub2410, %cond.false.2404 ]
  %592 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2413 = getelementptr inbounds %struct.image, %struct.image* %592, i32 0, i32 11
  %593 = load i32, i32* %width2413, align 4
  %conv2414 = sext i32 %593 to i64
  %div2415 = sdiv i64 %cond2412, %conv2414
  %cmp2416 = icmp slt i64 16, %div2415
  br i1 %cmp2416, label %cond.true.2577, label %lor.lhs.false.2557

cond.false.2418:                                  ; preds = %cond.true.2383
  %594 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2419 = getelementptr inbounds %struct.image, %struct.image* %594, i32 0, i32 11
  %595 = load i32, i32* %width2419, align 4
  %conv2420 = sext i32 %595 to i64
  %cmp2421 = icmp eq i64 %conv2420, -1
  br i1 %cmp2421, label %cond.true.2423, label %cond.false.2424

cond.true.2423:                                   ; preds = %cond.false.2418
  br i1 false, label %cond.true.2577, label %lor.lhs.false.2557

cond.false.2424:                                  ; preds = %cond.false.2418
  %596 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2425 = getelementptr inbounds %struct.image, %struct.image* %596, i32 0, i32 11
  %597 = load i32, i32* %width2425, align 4
  %conv2426 = sext i32 %597 to i64
  %mul2427 = mul nsw i64 0, %conv2426
  %add2428 = add nsw i64 %mul2427, 16
  %mul2429 = mul nsw i64 0, %add2428
  %sub2430 = sub nsw i64 %mul2429, 1
  %cmp2431 = icmp slt i64 %sub2430, 0
  br i1 %cmp2431, label %cond.true.2433, label %cond.false.2456

cond.true.2433:                                   ; preds = %cond.false.2424
  %598 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2434 = getelementptr inbounds %struct.image, %struct.image* %598, i32 0, i32 11
  %599 = load i32, i32* %width2434, align 4
  %conv2435 = sext i32 %599 to i64
  %mul2436 = mul nsw i64 0, %conv2435
  %add2437 = add nsw i64 %mul2436, 16
  %mul2438 = mul nsw i64 0, %add2437
  %add2439 = add nsw i64 %mul2438, 0
  %neg2440 = xor i64 %add2439, -1
  %cmp2441 = icmp eq i64 %neg2440, -1
  %conv2442 = zext i1 %cmp2441 to i32
  %sub2443 = sub nsw i32 0, %conv2442
  %conv2444 = sext i32 %sub2443 to i64
  %600 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2445 = getelementptr inbounds %struct.image, %struct.image* %600, i32 0, i32 11
  %601 = load i32, i32* %width2445, align 4
  %conv2446 = sext i32 %601 to i64
  %mul2447 = mul nsw i64 0, %conv2446
  %add2448 = add nsw i64 %mul2447, 16
  %mul2449 = mul nsw i64 0, %add2448
  %add2450 = add nsw i64 %mul2449, 1
  %shl2451 = shl i64 %add2450, 62
  %sub2452 = sub nsw i64 %shl2451, 1
  %mul2453 = mul nsw i64 %sub2452, 2
  %add2454 = add nsw i64 %mul2453, 1
  %sub2455 = sub nsw i64 %conv2444, %add2454
  br label %cond.end.2463

cond.false.2456:                                  ; preds = %cond.false.2424
  %602 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2457 = getelementptr inbounds %struct.image, %struct.image* %602, i32 0, i32 11
  %603 = load i32, i32* %width2457, align 4
  %conv2458 = sext i32 %603 to i64
  %mul2459 = mul nsw i64 0, %conv2458
  %add2460 = add nsw i64 %mul2459, 16
  %mul2461 = mul nsw i64 0, %add2460
  %add2462 = add nsw i64 %mul2461, 0
  br label %cond.end.2463

cond.end.2463:                                    ; preds = %cond.false.2456, %cond.true.2433
  %cond2464 = phi i64 [ %sub2455, %cond.true.2433 ], [ %add2462, %cond.false.2456 ]
  %604 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2465 = getelementptr inbounds %struct.image, %struct.image* %604, i32 0, i32 11
  %605 = load i32, i32* %width2465, align 4
  %conv2466 = sext i32 %605 to i64
  %div2467 = sdiv i64 %cond2464, %conv2466
  %cmp2468 = icmp slt i64 %div2467, 16
  br i1 %cmp2468, label %cond.true.2577, label %lor.lhs.false.2557

cond.false.2470:                                  ; preds = %lor.lhs.false.2378
  %606 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2471 = getelementptr inbounds %struct.image, %struct.image* %606, i32 0, i32 11
  %607 = load i32, i32* %width2471, align 4
  %conv2472 = sext i32 %607 to i64
  %cmp2473 = icmp eq i64 %conv2472, 0
  br i1 %cmp2473, label %cond.true.2475, label %cond.false.2476

cond.true.2475:                                   ; preds = %cond.false.2470
  br i1 false, label %cond.true.2577, label %lor.lhs.false.2557

cond.false.2476:                                  ; preds = %cond.false.2470
  br i1 false, label %cond.true.2477, label %cond.false.2523

cond.true.2477:                                   ; preds = %cond.false.2476
  %608 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2478 = getelementptr inbounds %struct.image, %struct.image* %608, i32 0, i32 11
  %609 = load i32, i32* %width2478, align 4
  %conv2479 = sext i32 %609 to i64
  %mul2480 = mul nsw i64 0, %conv2479
  %add2481 = add nsw i64 %mul2480, 16
  %mul2482 = mul nsw i64 0, %add2481
  %sub2483 = sub nsw i64 %mul2482, 1
  %cmp2484 = icmp slt i64 %sub2483, 0
  br i1 %cmp2484, label %cond.true.2486, label %cond.false.2509

cond.true.2486:                                   ; preds = %cond.true.2477
  %610 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2487 = getelementptr inbounds %struct.image, %struct.image* %610, i32 0, i32 11
  %611 = load i32, i32* %width2487, align 4
  %conv2488 = sext i32 %611 to i64
  %mul2489 = mul nsw i64 0, %conv2488
  %add2490 = add nsw i64 %mul2489, 16
  %mul2491 = mul nsw i64 0, %add2490
  %add2492 = add nsw i64 %mul2491, 0
  %neg2493 = xor i64 %add2492, -1
  %cmp2494 = icmp eq i64 %neg2493, -1
  %conv2495 = zext i1 %cmp2494 to i32
  %sub2496 = sub nsw i32 0, %conv2495
  %conv2497 = sext i32 %sub2496 to i64
  %612 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2498 = getelementptr inbounds %struct.image, %struct.image* %612, i32 0, i32 11
  %613 = load i32, i32* %width2498, align 4
  %conv2499 = sext i32 %613 to i64
  %mul2500 = mul nsw i64 0, %conv2499
  %add2501 = add nsw i64 %mul2500, 16
  %mul2502 = mul nsw i64 0, %add2501
  %add2503 = add nsw i64 %mul2502, 1
  %shl2504 = shl i64 %add2503, 62
  %sub2505 = sub nsw i64 %shl2504, 1
  %mul2506 = mul nsw i64 %sub2505, 2
  %add2507 = add nsw i64 %mul2506, 1
  %sub2508 = sub nsw i64 %conv2497, %add2507
  br label %cond.end.2516

cond.false.2509:                                  ; preds = %cond.true.2477
  %614 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2510 = getelementptr inbounds %struct.image, %struct.image* %614, i32 0, i32 11
  %615 = load i32, i32* %width2510, align 4
  %conv2511 = sext i32 %615 to i64
  %mul2512 = mul nsw i64 0, %conv2511
  %add2513 = add nsw i64 %mul2512, 16
  %mul2514 = mul nsw i64 0, %add2513
  %add2515 = add nsw i64 %mul2514, 0
  br label %cond.end.2516

cond.end.2516:                                    ; preds = %cond.false.2509, %cond.true.2486
  %cond2517 = phi i64 [ %sub2508, %cond.true.2486 ], [ %add2515, %cond.false.2509 ]
  %616 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2518 = getelementptr inbounds %struct.image, %struct.image* %616, i32 0, i32 11
  %617 = load i32, i32* %width2518, align 4
  %conv2519 = sext i32 %617 to i64
  %div2520 = sdiv i64 %cond2517, %conv2519
  %cmp2521 = icmp slt i64 16, %div2520
  br i1 %cmp2521, label %cond.true.2577, label %lor.lhs.false.2557

cond.false.2523:                                  ; preds = %cond.false.2476
  %618 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2524 = getelementptr inbounds %struct.image, %struct.image* %618, i32 0, i32 11
  %619 = load i32, i32* %width2524, align 4
  %conv2525 = sext i32 %619 to i64
  %mul2526 = mul nsw i64 0, %conv2525
  %add2527 = add nsw i64 %mul2526, 16
  %mul2528 = mul nsw i64 0, %add2527
  %sub2529 = sub nsw i64 %mul2528, 1
  %cmp2530 = icmp slt i64 %sub2529, 0
  br i1 %cmp2530, label %cond.true.2532, label %cond.false.2543

cond.true.2532:                                   ; preds = %cond.false.2523
  %620 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2533 = getelementptr inbounds %struct.image, %struct.image* %620, i32 0, i32 11
  %621 = load i32, i32* %width2533, align 4
  %conv2534 = sext i32 %621 to i64
  %mul2535 = mul nsw i64 0, %conv2534
  %add2536 = add nsw i64 %mul2535, 16
  %mul2537 = mul nsw i64 0, %add2536
  %add2538 = add nsw i64 %mul2537, 1
  %shl2539 = shl i64 %add2538, 62
  %sub2540 = sub nsw i64 %shl2539, 1
  %mul2541 = mul nsw i64 %sub2540, 2
  %add2542 = add nsw i64 %mul2541, 1
  br label %cond.end.2550

cond.false.2543:                                  ; preds = %cond.false.2523
  %622 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2544 = getelementptr inbounds %struct.image, %struct.image* %622, i32 0, i32 11
  %623 = load i32, i32* %width2544, align 4
  %conv2545 = sext i32 %623 to i64
  %mul2546 = mul nsw i64 0, %conv2545
  %add2547 = add nsw i64 %mul2546, 16
  %mul2548 = mul nsw i64 0, %add2547
  %sub2549 = sub nsw i64 %mul2548, 1
  br label %cond.end.2550

cond.end.2550:                                    ; preds = %cond.false.2543, %cond.true.2532
  %cond2551 = phi i64 [ %add2542, %cond.true.2532 ], [ %sub2549, %cond.false.2543 ]
  %624 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2552 = getelementptr inbounds %struct.image, %struct.image* %624, i32 0, i32 11
  %625 = load i32, i32* %width2552, align 4
  %conv2553 = sext i32 %625 to i64
  %div2554 = sdiv i64 %cond2551, %conv2553
  %cmp2555 = icmp slt i64 %div2554, 16
  br i1 %cmp2555, label %cond.true.2577, label %lor.lhs.false.2557

lor.lhs.false.2557:                               ; preds = %cond.end.2550, %cond.end.2516, %cond.true.2475, %cond.end.2463, %cond.true.2423, %cond.end.2411
  %626 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2558 = getelementptr inbounds %struct.image, %struct.image* %626, i32 0, i32 11
  %627 = load i32, i32* %width2558, align 4
  %conv2559 = sext i32 %627 to i64
  %mul2560 = mul nsw i64 16, %conv2559
  %mul2561 = mul nsw i64 0, %mul2560
  %sub2562 = sub nsw i64 %mul2561, 1
  %cmp2563 = icmp slt i64 %sub2562, 0
  br i1 %cmp2563, label %land.lhs.true.2565, label %lor.lhs.false.2571

land.lhs.true.2565:                               ; preds = %lor.lhs.false.2557
  %628 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2566 = getelementptr inbounds %struct.image, %struct.image* %628, i32 0, i32 11
  %629 = load i32, i32* %width2566, align 4
  %conv2567 = sext i32 %629 to i64
  %mul2568 = mul nsw i64 16, %conv2567
  %cmp2569 = icmp slt i64 %mul2568, -9223372036854775808
  br i1 %cmp2569, label %cond.true.2577, label %lor.lhs.false.2571

lor.lhs.false.2571:                               ; preds = %land.lhs.true.2565, %lor.lhs.false.2557
  %630 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2572 = getelementptr inbounds %struct.image, %struct.image* %630, i32 0, i32 11
  %631 = load i32, i32* %width2572, align 4
  %conv2573 = sext i32 %631 to i64
  %mul2574 = mul nsw i64 16, %conv2573
  %cmp2575 = icmp slt i64 9223372036854775807, %mul2574
  br i1 %cmp2575, label %cond.true.2577, label %cond.false.2595

cond.true.2577:                                   ; preds = %lor.lhs.false.2571, %land.lhs.true.2565, %cond.end.2550, %cond.end.2516, %cond.true.2475, %cond.end.2463, %cond.true.2423, %cond.end.2411, %land.lhs.true.2373
  %632 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2578 = getelementptr inbounds %struct.image, %struct.image* %632, i32 0, i32 11
  %633 = load i32, i32* %width2578, align 4
  %conv2579 = sext i32 %633 to i64
  %mul2580 = mul i64 16, %conv2579
  %cmp2581 = icmp ule i64 %mul2580, 9223372036854775807
  br i1 %cmp2581, label %cond.true.2583, label %cond.false.2587

cond.true.2583:                                   ; preds = %cond.true.2577
  %634 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2584 = getelementptr inbounds %struct.image, %struct.image* %634, i32 0, i32 11
  %635 = load i32, i32* %width2584, align 4
  %conv2585 = sext i32 %635 to i64
  %mul2586 = mul i64 16, %conv2585
  br label %cond.end.2593

cond.false.2587:                                  ; preds = %cond.true.2577
  %636 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2588 = getelementptr inbounds %struct.image, %struct.image* %636, i32 0, i32 11
  %637 = load i32, i32* %width2588, align 4
  %conv2589 = sext i32 %637 to i64
  %mul2590 = mul i64 16, %conv2589
  %sub2591 = sub i64 %mul2590, -9223372036854775808
  %add2592 = add nsw i64 %sub2591, -9223372036854775808
  br label %cond.end.2593

cond.end.2593:                                    ; preds = %cond.false.2587, %cond.true.2583
  %cond2594 = phi i64 [ %mul2586, %cond.true.2583 ], [ %add2592, %cond.false.2587 ]
  store i64 %cond2594, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.2595:                                  ; preds = %lor.lhs.false.2571
  %638 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2596 = getelementptr inbounds %struct.image, %struct.image* %638, i32 0, i32 11
  %639 = load i32, i32* %width2596, align 4
  %conv2597 = sext i32 %639 to i64
  %mul2598 = mul i64 16, %conv2597
  %cmp2599 = icmp ule i64 %mul2598, 9223372036854775807
  br i1 %cmp2599, label %cond.true.2601, label %cond.false.2605

cond.true.2601:                                   ; preds = %cond.false.2595
  %640 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2602 = getelementptr inbounds %struct.image, %struct.image* %640, i32 0, i32 11
  %641 = load i32, i32* %width2602, align 4
  %conv2603 = sext i32 %641 to i64
  %mul2604 = mul i64 16, %conv2603
  br label %cond.end.2611

cond.false.2605:                                  ; preds = %cond.false.2595
  %642 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2606 = getelementptr inbounds %struct.image, %struct.image* %642, i32 0, i32 11
  %643 = load i32, i32* %width2606, align 4
  %conv2607 = sext i32 %643 to i64
  %mul2608 = mul i64 16, %conv2607
  %sub2609 = sub i64 %mul2608, -9223372036854775808
  %add2610 = add nsw i64 %sub2609, -9223372036854775808
  br label %cond.end.2611

cond.end.2611:                                    ; preds = %cond.false.2605, %cond.true.2601
  %cond2612 = phi i64 [ %mul2604, %cond.true.2601 ], [ %add2610, %cond.false.2605 ]
  store i64 %cond2612, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

cond.false.2613:                                  ; preds = %cond.false.2329
  %644 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2614 = getelementptr inbounds %struct.image, %struct.image* %644, i32 0, i32 11
  %645 = load i32, i32* %width2614, align 4
  %mul2615 = mul nsw i32 0, %645
  %conv2616 = sext i32 %mul2615 to i64
  %add2617 = add i64 %conv2616, 16
  %mul2618 = mul i64 0, %add2617
  %sub2619 = sub i64 %mul2618, 1
  %cmp2620 = icmp ult i64 %sub2619, 0
  br i1 %cmp2620, label %cond.true.2622, label %cond.false.2645

cond.true.2622:                                   ; preds = %cond.false.2613
  %646 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2623 = getelementptr inbounds %struct.image, %struct.image* %646, i32 0, i32 11
  %647 = load i32, i32* %width2623, align 4
  %mul2624 = mul nsw i32 0, %647
  %conv2625 = sext i32 %mul2624 to i64
  %add2626 = add i64 %conv2625, 16
  %mul2627 = mul i64 0, %add2626
  %add2628 = add i64 %mul2627, 0
  %neg2629 = xor i64 %add2628, -1
  %cmp2630 = icmp eq i64 %neg2629, -1
  %conv2631 = zext i1 %cmp2630 to i32
  %sub2632 = sub nsw i32 0, %conv2631
  %conv2633 = sext i32 %sub2632 to i64
  %648 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2634 = getelementptr inbounds %struct.image, %struct.image* %648, i32 0, i32 11
  %649 = load i32, i32* %width2634, align 4
  %mul2635 = mul nsw i32 0, %649
  %conv2636 = sext i32 %mul2635 to i64
  %add2637 = add i64 %conv2636, 16
  %mul2638 = mul i64 0, %add2637
  %add2639 = add i64 %mul2638, 1
  %shl2640 = shl i64 %add2639, 62
  %sub2641 = sub i64 %shl2640, 1
  %mul2642 = mul i64 %sub2641, 2
  %add2643 = add i64 %mul2642, 1
  %sub2644 = sub i64 %conv2633, %add2643
  br label %cond.end.2652

cond.false.2645:                                  ; preds = %cond.false.2613
  %650 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2646 = getelementptr inbounds %struct.image, %struct.image* %650, i32 0, i32 11
  %651 = load i32, i32* %width2646, align 4
  %mul2647 = mul nsw i32 0, %651
  %conv2648 = sext i32 %mul2647 to i64
  %add2649 = add i64 %conv2648, 16
  %mul2650 = mul i64 0, %add2649
  %add2651 = add i64 %mul2650, 0
  br label %cond.end.2652

cond.end.2652:                                    ; preds = %cond.false.2645, %cond.true.2622
  %cond2653 = phi i64 [ %sub2644, %cond.true.2622 ], [ %add2651, %cond.false.2645 ]
  %cmp2654 = icmp eq i64 %cond2653, 0
  br i1 %cmp2654, label %land.lhs.true.2656, label %lor.lhs.false.2660

land.lhs.true.2656:                               ; preds = %cond.end.2652
  %652 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2657 = getelementptr inbounds %struct.image, %struct.image* %652, i32 0, i32 11
  %653 = load i32, i32* %width2657, align 4
  %cmp2658 = icmp slt i32 %653, 0
  br i1 %cmp2658, label %cond.true.2856, label %lor.lhs.false.2660

lor.lhs.false.2660:                               ; preds = %land.lhs.true.2656, %cond.end.2652
  %654 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2661 = getelementptr inbounds %struct.image, %struct.image* %654, i32 0, i32 11
  %655 = load i32, i32* %width2661, align 4
  %cmp2662 = icmp slt i32 %655, 0
  br i1 %cmp2662, label %cond.true.2664, label %cond.false.2750

cond.true.2664:                                   ; preds = %lor.lhs.false.2660
  br i1 false, label %cond.true.2665, label %cond.false.2699

cond.true.2665:                                   ; preds = %cond.true.2664
  %656 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2666 = getelementptr inbounds %struct.image, %struct.image* %656, i32 0, i32 11
  %657 = load i32, i32* %width2666, align 4
  %mul2667 = mul nsw i32 0, %657
  %conv2668 = sext i32 %mul2667 to i64
  %add2669 = add i64 %conv2668, 16
  %mul2670 = mul i64 0, %add2669
  %sub2671 = sub i64 %mul2670, 1
  %cmp2672 = icmp ult i64 %sub2671, 0
  br i1 %cmp2672, label %cond.true.2674, label %cond.false.2685

cond.true.2674:                                   ; preds = %cond.true.2665
  %658 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2675 = getelementptr inbounds %struct.image, %struct.image* %658, i32 0, i32 11
  %659 = load i32, i32* %width2675, align 4
  %mul2676 = mul nsw i32 0, %659
  %conv2677 = sext i32 %mul2676 to i64
  %add2678 = add i64 %conv2677, 16
  %mul2679 = mul i64 0, %add2678
  %add2680 = add i64 %mul2679, 1
  %shl2681 = shl i64 %add2680, 62
  %sub2682 = sub i64 %shl2681, 1
  %mul2683 = mul i64 %sub2682, 2
  %add2684 = add i64 %mul2683, 1
  br label %cond.end.2692

cond.false.2685:                                  ; preds = %cond.true.2665
  %660 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2686 = getelementptr inbounds %struct.image, %struct.image* %660, i32 0, i32 11
  %661 = load i32, i32* %width2686, align 4
  %mul2687 = mul nsw i32 0, %661
  %conv2688 = sext i32 %mul2687 to i64
  %add2689 = add i64 %conv2688, 16
  %mul2690 = mul i64 0, %add2689
  %sub2691 = sub i64 %mul2690, 1
  br label %cond.end.2692

cond.end.2692:                                    ; preds = %cond.false.2685, %cond.true.2674
  %cond2693 = phi i64 [ %add2684, %cond.true.2674 ], [ %sub2691, %cond.false.2685 ]
  %662 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2694 = getelementptr inbounds %struct.image, %struct.image* %662, i32 0, i32 11
  %663 = load i32, i32* %width2694, align 4
  %conv2695 = sext i32 %663 to i64
  %div2696 = udiv i64 %cond2693, %conv2695
  %cmp2697 = icmp ult i64 16, %div2696
  br i1 %cmp2697, label %cond.true.2856, label %lor.lhs.false.2836

cond.false.2699:                                  ; preds = %cond.true.2664
  %664 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2700 = getelementptr inbounds %struct.image, %struct.image* %664, i32 0, i32 11
  %665 = load i32, i32* %width2700, align 4
  %cmp2701 = icmp eq i32 %665, -1
  br i1 %cmp2701, label %cond.true.2703, label %cond.false.2704

cond.true.2703:                                   ; preds = %cond.false.2699
  br i1 false, label %cond.true.2856, label %lor.lhs.false.2836

cond.false.2704:                                  ; preds = %cond.false.2699
  %666 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2705 = getelementptr inbounds %struct.image, %struct.image* %666, i32 0, i32 11
  %667 = load i32, i32* %width2705, align 4
  %mul2706 = mul nsw i32 0, %667
  %conv2707 = sext i32 %mul2706 to i64
  %add2708 = add i64 %conv2707, 16
  %mul2709 = mul i64 0, %add2708
  %sub2710 = sub i64 %mul2709, 1
  %cmp2711 = icmp ult i64 %sub2710, 0
  br i1 %cmp2711, label %cond.true.2713, label %cond.false.2736

cond.true.2713:                                   ; preds = %cond.false.2704
  %668 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2714 = getelementptr inbounds %struct.image, %struct.image* %668, i32 0, i32 11
  %669 = load i32, i32* %width2714, align 4
  %mul2715 = mul nsw i32 0, %669
  %conv2716 = sext i32 %mul2715 to i64
  %add2717 = add i64 %conv2716, 16
  %mul2718 = mul i64 0, %add2717
  %add2719 = add i64 %mul2718, 0
  %neg2720 = xor i64 %add2719, -1
  %cmp2721 = icmp eq i64 %neg2720, -1
  %conv2722 = zext i1 %cmp2721 to i32
  %sub2723 = sub nsw i32 0, %conv2722
  %conv2724 = sext i32 %sub2723 to i64
  %670 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2725 = getelementptr inbounds %struct.image, %struct.image* %670, i32 0, i32 11
  %671 = load i32, i32* %width2725, align 4
  %mul2726 = mul nsw i32 0, %671
  %conv2727 = sext i32 %mul2726 to i64
  %add2728 = add i64 %conv2727, 16
  %mul2729 = mul i64 0, %add2728
  %add2730 = add i64 %mul2729, 1
  %shl2731 = shl i64 %add2730, 62
  %sub2732 = sub i64 %shl2731, 1
  %mul2733 = mul i64 %sub2732, 2
  %add2734 = add i64 %mul2733, 1
  %sub2735 = sub i64 %conv2724, %add2734
  br label %cond.end.2743

cond.false.2736:                                  ; preds = %cond.false.2704
  %672 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2737 = getelementptr inbounds %struct.image, %struct.image* %672, i32 0, i32 11
  %673 = load i32, i32* %width2737, align 4
  %mul2738 = mul nsw i32 0, %673
  %conv2739 = sext i32 %mul2738 to i64
  %add2740 = add i64 %conv2739, 16
  %mul2741 = mul i64 0, %add2740
  %add2742 = add i64 %mul2741, 0
  br label %cond.end.2743

cond.end.2743:                                    ; preds = %cond.false.2736, %cond.true.2713
  %cond2744 = phi i64 [ %sub2735, %cond.true.2713 ], [ %add2742, %cond.false.2736 ]
  %674 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2745 = getelementptr inbounds %struct.image, %struct.image* %674, i32 0, i32 11
  %675 = load i32, i32* %width2745, align 4
  %conv2746 = sext i32 %675 to i64
  %div2747 = udiv i64 %cond2744, %conv2746
  %cmp2748 = icmp ult i64 %div2747, 16
  br i1 %cmp2748, label %cond.true.2856, label %lor.lhs.false.2836

cond.false.2750:                                  ; preds = %lor.lhs.false.2660
  %676 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2751 = getelementptr inbounds %struct.image, %struct.image* %676, i32 0, i32 11
  %677 = load i32, i32* %width2751, align 4
  %cmp2752 = icmp eq i32 %677, 0
  br i1 %cmp2752, label %cond.true.2754, label %cond.false.2755

cond.true.2754:                                   ; preds = %cond.false.2750
  br i1 false, label %cond.true.2856, label %lor.lhs.false.2836

cond.false.2755:                                  ; preds = %cond.false.2750
  br i1 false, label %cond.true.2756, label %cond.false.2802

cond.true.2756:                                   ; preds = %cond.false.2755
  %678 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2757 = getelementptr inbounds %struct.image, %struct.image* %678, i32 0, i32 11
  %679 = load i32, i32* %width2757, align 4
  %mul2758 = mul nsw i32 0, %679
  %conv2759 = sext i32 %mul2758 to i64
  %add2760 = add i64 %conv2759, 16
  %mul2761 = mul i64 0, %add2760
  %sub2762 = sub i64 %mul2761, 1
  %cmp2763 = icmp ult i64 %sub2762, 0
  br i1 %cmp2763, label %cond.true.2765, label %cond.false.2788

cond.true.2765:                                   ; preds = %cond.true.2756
  %680 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2766 = getelementptr inbounds %struct.image, %struct.image* %680, i32 0, i32 11
  %681 = load i32, i32* %width2766, align 4
  %mul2767 = mul nsw i32 0, %681
  %conv2768 = sext i32 %mul2767 to i64
  %add2769 = add i64 %conv2768, 16
  %mul2770 = mul i64 0, %add2769
  %add2771 = add i64 %mul2770, 0
  %neg2772 = xor i64 %add2771, -1
  %cmp2773 = icmp eq i64 %neg2772, -1
  %conv2774 = zext i1 %cmp2773 to i32
  %sub2775 = sub nsw i32 0, %conv2774
  %conv2776 = sext i32 %sub2775 to i64
  %682 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2777 = getelementptr inbounds %struct.image, %struct.image* %682, i32 0, i32 11
  %683 = load i32, i32* %width2777, align 4
  %mul2778 = mul nsw i32 0, %683
  %conv2779 = sext i32 %mul2778 to i64
  %add2780 = add i64 %conv2779, 16
  %mul2781 = mul i64 0, %add2780
  %add2782 = add i64 %mul2781, 1
  %shl2783 = shl i64 %add2782, 62
  %sub2784 = sub i64 %shl2783, 1
  %mul2785 = mul i64 %sub2784, 2
  %add2786 = add i64 %mul2785, 1
  %sub2787 = sub i64 %conv2776, %add2786
  br label %cond.end.2795

cond.false.2788:                                  ; preds = %cond.true.2756
  %684 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2789 = getelementptr inbounds %struct.image, %struct.image* %684, i32 0, i32 11
  %685 = load i32, i32* %width2789, align 4
  %mul2790 = mul nsw i32 0, %685
  %conv2791 = sext i32 %mul2790 to i64
  %add2792 = add i64 %conv2791, 16
  %mul2793 = mul i64 0, %add2792
  %add2794 = add i64 %mul2793, 0
  br label %cond.end.2795

cond.end.2795:                                    ; preds = %cond.false.2788, %cond.true.2765
  %cond2796 = phi i64 [ %sub2787, %cond.true.2765 ], [ %add2794, %cond.false.2788 ]
  %686 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2797 = getelementptr inbounds %struct.image, %struct.image* %686, i32 0, i32 11
  %687 = load i32, i32* %width2797, align 4
  %conv2798 = sext i32 %687 to i64
  %div2799 = udiv i64 %cond2796, %conv2798
  %cmp2800 = icmp ult i64 16, %div2799
  br i1 %cmp2800, label %cond.true.2856, label %lor.lhs.false.2836

cond.false.2802:                                  ; preds = %cond.false.2755
  %688 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2803 = getelementptr inbounds %struct.image, %struct.image* %688, i32 0, i32 11
  %689 = load i32, i32* %width2803, align 4
  %mul2804 = mul nsw i32 0, %689
  %conv2805 = sext i32 %mul2804 to i64
  %add2806 = add i64 %conv2805, 16
  %mul2807 = mul i64 0, %add2806
  %sub2808 = sub i64 %mul2807, 1
  %cmp2809 = icmp ult i64 %sub2808, 0
  br i1 %cmp2809, label %cond.true.2811, label %cond.false.2822

cond.true.2811:                                   ; preds = %cond.false.2802
  %690 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2812 = getelementptr inbounds %struct.image, %struct.image* %690, i32 0, i32 11
  %691 = load i32, i32* %width2812, align 4
  %mul2813 = mul nsw i32 0, %691
  %conv2814 = sext i32 %mul2813 to i64
  %add2815 = add i64 %conv2814, 16
  %mul2816 = mul i64 0, %add2815
  %add2817 = add i64 %mul2816, 1
  %shl2818 = shl i64 %add2817, 62
  %sub2819 = sub i64 %shl2818, 1
  %mul2820 = mul i64 %sub2819, 2
  %add2821 = add i64 %mul2820, 1
  br label %cond.end.2829

cond.false.2822:                                  ; preds = %cond.false.2802
  %692 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2823 = getelementptr inbounds %struct.image, %struct.image* %692, i32 0, i32 11
  %693 = load i32, i32* %width2823, align 4
  %mul2824 = mul nsw i32 0, %693
  %conv2825 = sext i32 %mul2824 to i64
  %add2826 = add i64 %conv2825, 16
  %mul2827 = mul i64 0, %add2826
  %sub2828 = sub i64 %mul2827, 1
  br label %cond.end.2829

cond.end.2829:                                    ; preds = %cond.false.2822, %cond.true.2811
  %cond2830 = phi i64 [ %add2821, %cond.true.2811 ], [ %sub2828, %cond.false.2822 ]
  %694 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2831 = getelementptr inbounds %struct.image, %struct.image* %694, i32 0, i32 11
  %695 = load i32, i32* %width2831, align 4
  %conv2832 = sext i32 %695 to i64
  %div2833 = udiv i64 %cond2830, %conv2832
  %cmp2834 = icmp ult i64 %div2833, 16
  br i1 %cmp2834, label %cond.true.2856, label %lor.lhs.false.2836

lor.lhs.false.2836:                               ; preds = %cond.end.2829, %cond.end.2795, %cond.true.2754, %cond.end.2743, %cond.true.2703, %cond.end.2692
  %696 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2837 = getelementptr inbounds %struct.image, %struct.image* %696, i32 0, i32 11
  %697 = load i32, i32* %width2837, align 4
  %conv2838 = sext i32 %697 to i64
  %mul2839 = mul i64 16, %conv2838
  %mul2840 = mul i64 0, %mul2839
  %sub2841 = sub i64 %mul2840, 1
  %cmp2842 = icmp ult i64 %sub2841, 0
  br i1 %cmp2842, label %land.lhs.true.2844, label %lor.lhs.false.2850

land.lhs.true.2844:                               ; preds = %lor.lhs.false.2836
  %698 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2845 = getelementptr inbounds %struct.image, %struct.image* %698, i32 0, i32 11
  %699 = load i32, i32* %width2845, align 4
  %conv2846 = sext i32 %699 to i64
  %mul2847 = mul i64 16, %conv2846
  %cmp2848 = icmp ult i64 %mul2847, -9223372036854775808
  br i1 %cmp2848, label %cond.true.2856, label %lor.lhs.false.2850

lor.lhs.false.2850:                               ; preds = %land.lhs.true.2844, %lor.lhs.false.2836
  %700 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2851 = getelementptr inbounds %struct.image, %struct.image* %700, i32 0, i32 11
  %701 = load i32, i32* %width2851, align 4
  %conv2852 = sext i32 %701 to i64
  %mul2853 = mul i64 16, %conv2852
  %cmp2854 = icmp ult i64 9223372036854775807, %mul2853
  br i1 %cmp2854, label %cond.true.2856, label %cond.false.2874

cond.true.2856:                                   ; preds = %lor.lhs.false.2850, %land.lhs.true.2844, %cond.end.2829, %cond.end.2795, %cond.true.2754, %cond.end.2743, %cond.true.2703, %cond.end.2692, %land.lhs.true.2656
  %702 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2857 = getelementptr inbounds %struct.image, %struct.image* %702, i32 0, i32 11
  %703 = load i32, i32* %width2857, align 4
  %conv2858 = sext i32 %703 to i64
  %mul2859 = mul i64 16, %conv2858
  %cmp2860 = icmp ule i64 %mul2859, 9223372036854775807
  br i1 %cmp2860, label %cond.true.2862, label %cond.false.2866

cond.true.2862:                                   ; preds = %cond.true.2856
  %704 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2863 = getelementptr inbounds %struct.image, %struct.image* %704, i32 0, i32 11
  %705 = load i32, i32* %width2863, align 4
  %conv2864 = sext i32 %705 to i64
  %mul2865 = mul i64 16, %conv2864
  br label %cond.end.2872

cond.false.2866:                                  ; preds = %cond.true.2856
  %706 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2867 = getelementptr inbounds %struct.image, %struct.image* %706, i32 0, i32 11
  %707 = load i32, i32* %width2867, align 4
  %conv2868 = sext i32 %707 to i64
  %mul2869 = mul i64 16, %conv2868
  %sub2870 = sub i64 %mul2869, -9223372036854775808
  %add2871 = add nsw i64 %sub2870, -9223372036854775808
  br label %cond.end.2872

cond.end.2872:                                    ; preds = %cond.false.2866, %cond.true.2862
  %cond2873 = phi i64 [ %mul2865, %cond.true.2862 ], [ %add2871, %cond.false.2866 ]
  store i64 %cond2873, i64* %nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2892

cond.false.2874:                                  ; preds = %lor.lhs.false.2850
  %708 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2875 = getelementptr inbounds %struct.image, %struct.image* %708, i32 0, i32 11
  %709 = load i32, i32* %width2875, align 4
  %conv2876 = sext i32 %709 to i64
  %mul2877 = mul i64 16, %conv2876
  %cmp2878 = icmp ule i64 %mul2877, 9223372036854775807
  br i1 %cmp2878, label %cond.true.2880, label %cond.false.2884

cond.true.2880:                                   ; preds = %cond.false.2874
  %710 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2881 = getelementptr inbounds %struct.image, %struct.image* %710, i32 0, i32 11
  %711 = load i32, i32* %width2881, align 4
  %conv2882 = sext i32 %711 to i64
  %mul2883 = mul i64 16, %conv2882
  br label %cond.end.2890

cond.false.2884:                                  ; preds = %cond.false.2874
  %712 = load %struct.image*, %struct.image** %img.addr, align 8
  %width2885 = getelementptr inbounds %struct.image, %struct.image* %712, i32 0, i32 11
  %713 = load i32, i32* %width2885, align 4
  %conv2886 = sext i32 %713 to i64
  %mul2887 = mul i64 16, %conv2886
  %sub2888 = sub i64 %mul2887, -9223372036854775808
  %add2889 = add nsw i64 %sub2888, -9223372036854775808
  br label %cond.end.2890

cond.end.2890:                                    ; preds = %cond.false.2884, %cond.true.2880
  %cond2891 = phi i64 [ %mul2883, %cond.true.2880 ], [ %add2889, %cond.false.2884 ]
  store i64 %cond2891, i64* %nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2892

lor.lhs.false.2892:                               ; preds = %cond.end.2890, %cond.end.2872, %cond.end.2611, %cond.end.2593, %cond.end.2327, %cond.end.2309, %cond.end.2048, %cond.end.2030, %cond.end.1762, %cond.end.1746, %cond.end.1487, %cond.end.1471, %cond.end.1238, %cond.end.1212, %cond.end.943, %cond.end.917, %cond.end.616, %cond.end.590, %cond.end.321, %cond.end.295
  br i1 false, label %cond.true.2893, label %cond.false.3623

cond.true.2893:                                   ; preds = %lor.lhs.false.2892
  br i1 false, label %cond.true.2894, label %cond.false.3303

cond.true.2894:                                   ; preds = %cond.true.2893
  %714 = load i64, i64* %nbytes, align 8
  %conv2895 = trunc i64 %714 to i8
  %conv2896 = sext i8 %conv2895 to i32
  %mul2897 = mul nsw i32 0, %conv2896
  %715 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %715, i32 0, i32 12
  %716 = load i32, i32* %height, align 4
  %conv2898 = trunc i32 %716 to i8
  %conv2899 = sext i8 %conv2898 to i32
  %add2900 = add nsw i32 %mul2897, %conv2899
  %mul2901 = mul nsw i32 0, %add2900
  %sub2902 = sub nsw i32 %mul2901, 1
  %cmp2903 = icmp slt i32 %sub2902, 0
  br i1 %cmp2903, label %cond.true.2905, label %cond.false.2933

cond.true.2905:                                   ; preds = %cond.true.2894
  %717 = load i64, i64* %nbytes, align 8
  %conv2906 = trunc i64 %717 to i8
  %conv2907 = sext i8 %conv2906 to i32
  %mul2908 = mul nsw i32 0, %conv2907
  %718 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2909 = getelementptr inbounds %struct.image, %struct.image* %718, i32 0, i32 12
  %719 = load i32, i32* %height2909, align 4
  %conv2910 = trunc i32 %719 to i8
  %conv2911 = sext i8 %conv2910 to i32
  %add2912 = add nsw i32 %mul2908, %conv2911
  %mul2913 = mul nsw i32 0, %add2912
  %add2914 = add nsw i32 %mul2913, 0
  %neg2915 = xor i32 %add2914, -1
  %cmp2916 = icmp eq i32 %neg2915, -1
  %conv2917 = zext i1 %cmp2916 to i32
  %sub2918 = sub nsw i32 0, %conv2917
  %720 = load i64, i64* %nbytes, align 8
  %conv2919 = trunc i64 %720 to i8
  %conv2920 = sext i8 %conv2919 to i32
  %mul2921 = mul nsw i32 0, %conv2920
  %721 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2922 = getelementptr inbounds %struct.image, %struct.image* %721, i32 0, i32 12
  %722 = load i32, i32* %height2922, align 4
  %conv2923 = trunc i32 %722 to i8
  %conv2924 = sext i8 %conv2923 to i32
  %add2925 = add nsw i32 %mul2921, %conv2924
  %mul2926 = mul nsw i32 0, %add2925
  %add2927 = add nsw i32 %mul2926, 1
  %shl2928 = shl i32 %add2927, 30
  %sub2929 = sub nsw i32 %shl2928, 1
  %mul2930 = mul nsw i32 %sub2929, 2
  %add2931 = add nsw i32 %mul2930, 1
  %sub2932 = sub nsw i32 %sub2918, %add2931
  br label %cond.end.2943

cond.false.2933:                                  ; preds = %cond.true.2894
  %723 = load i64, i64* %nbytes, align 8
  %conv2934 = trunc i64 %723 to i8
  %conv2935 = sext i8 %conv2934 to i32
  %mul2936 = mul nsw i32 0, %conv2935
  %724 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2937 = getelementptr inbounds %struct.image, %struct.image* %724, i32 0, i32 12
  %725 = load i32, i32* %height2937, align 4
  %conv2938 = trunc i32 %725 to i8
  %conv2939 = sext i8 %conv2938 to i32
  %add2940 = add nsw i32 %mul2936, %conv2939
  %mul2941 = mul nsw i32 0, %add2940
  %add2942 = add nsw i32 %mul2941, 0
  br label %cond.end.2943

cond.end.2943:                                    ; preds = %cond.false.2933, %cond.true.2905
  %cond2944 = phi i32 [ %sub2932, %cond.true.2905 ], [ %add2942, %cond.false.2933 ]
  %cmp2945 = icmp eq i32 %cond2944, 0
  br i1 %cmp2945, label %land.lhs.true.2947, label %lor.lhs.false.2969

land.lhs.true.2947:                               ; preds = %cond.end.2943
  %726 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2948 = getelementptr inbounds %struct.image, %struct.image* %726, i32 0, i32 12
  %727 = load i32, i32* %height2948, align 4
  %conv2949 = trunc i32 %727 to i8
  %conv2950 = sext i8 %conv2949 to i32
  %cmp2951 = icmp slt i32 %conv2950, 0
  br i1 %cmp2951, label %land.lhs.true.2953, label %lor.lhs.false.2958

land.lhs.true.2953:                               ; preds = %land.lhs.true.2947
  %728 = load i64, i64* %nbytes, align 8
  %conv2954 = trunc i64 %728 to i8
  %conv2955 = sext i8 %conv2954 to i32
  %cmp2956 = icmp slt i32 0, %conv2955
  br i1 %cmp2956, label %cond.true.3239, label %lor.lhs.false.2958

lor.lhs.false.2958:                               ; preds = %land.lhs.true.2953, %land.lhs.true.2947
  %729 = load i64, i64* %nbytes, align 8
  %conv2959 = trunc i64 %729 to i8
  %conv2960 = sext i8 %conv2959 to i32
  %cmp2961 = icmp slt i32 %conv2960, 0
  br i1 %cmp2961, label %land.lhs.true.2963, label %lor.lhs.false.2969

land.lhs.true.2963:                               ; preds = %lor.lhs.false.2958
  %730 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2964 = getelementptr inbounds %struct.image, %struct.image* %730, i32 0, i32 12
  %731 = load i32, i32* %height2964, align 4
  %conv2965 = trunc i32 %731 to i8
  %conv2966 = sext i8 %conv2965 to i32
  %cmp2967 = icmp slt i32 0, %conv2966
  br i1 %cmp2967, label %cond.true.3239, label %lor.lhs.false.2969

lor.lhs.false.2969:                               ; preds = %land.lhs.true.2963, %lor.lhs.false.2958, %cond.end.2943
  %732 = load i64, i64* %nbytes, align 8
  %conv2970 = trunc i64 %732 to i8
  %conv2971 = sext i8 %conv2970 to i32
  %cmp2972 = icmp slt i32 %conv2971, 0
  br i1 %cmp2972, label %cond.true.2974, label %cond.false.3092

cond.true.2974:                                   ; preds = %lor.lhs.false.2969
  %733 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2975 = getelementptr inbounds %struct.image, %struct.image* %733, i32 0, i32 12
  %734 = load i32, i32* %height2975, align 4
  %conv2976 = trunc i32 %734 to i8
  %conv2977 = sext i8 %conv2976 to i32
  %cmp2978 = icmp slt i32 %conv2977, 0
  br i1 %cmp2978, label %cond.true.2980, label %cond.false.3026

cond.true.2980:                                   ; preds = %cond.true.2974
  %735 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2981 = getelementptr inbounds %struct.image, %struct.image* %735, i32 0, i32 12
  %736 = load i32, i32* %height2981, align 4
  %conv2982 = trunc i32 %736 to i8
  %conv2983 = sext i8 %conv2982 to i32
  %737 = load i64, i64* %nbytes, align 8
  %conv2984 = trunc i64 %737 to i8
  %conv2985 = sext i8 %conv2984 to i32
  %mul2986 = mul nsw i32 0, %conv2985
  %738 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2987 = getelementptr inbounds %struct.image, %struct.image* %738, i32 0, i32 12
  %739 = load i32, i32* %height2987, align 4
  %conv2988 = trunc i32 %739 to i8
  %conv2989 = sext i8 %conv2988 to i32
  %add2990 = add nsw i32 %mul2986, %conv2989
  %mul2991 = mul nsw i32 0, %add2990
  %sub2992 = sub nsw i32 %mul2991, 1
  %cmp2993 = icmp slt i32 %sub2992, 0
  br i1 %cmp2993, label %cond.true.2995, label %cond.false.3009

cond.true.2995:                                   ; preds = %cond.true.2980
  %740 = load i64, i64* %nbytes, align 8
  %conv2996 = trunc i64 %740 to i8
  %conv2997 = sext i8 %conv2996 to i32
  %mul2998 = mul nsw i32 0, %conv2997
  %741 = load %struct.image*, %struct.image** %img.addr, align 8
  %height2999 = getelementptr inbounds %struct.image, %struct.image* %741, i32 0, i32 12
  %742 = load i32, i32* %height2999, align 4
  %conv3000 = trunc i32 %742 to i8
  %conv3001 = sext i8 %conv3000 to i32
  %add3002 = add nsw i32 %mul2998, %conv3001
  %mul3003 = mul nsw i32 0, %add3002
  %add3004 = add nsw i32 %mul3003, 1
  %shl3005 = shl i32 %add3004, 30
  %sub3006 = sub nsw i32 %shl3005, 1
  %mul3007 = mul nsw i32 %sub3006, 2
  %add3008 = add nsw i32 %mul3007, 1
  br label %cond.end.3019

cond.false.3009:                                  ; preds = %cond.true.2980
  %743 = load i64, i64* %nbytes, align 8
  %conv3010 = trunc i64 %743 to i8
  %conv3011 = sext i8 %conv3010 to i32
  %mul3012 = mul nsw i32 0, %conv3011
  %744 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3013 = getelementptr inbounds %struct.image, %struct.image* %744, i32 0, i32 12
  %745 = load i32, i32* %height3013, align 4
  %conv3014 = trunc i32 %745 to i8
  %conv3015 = sext i8 %conv3014 to i32
  %add3016 = add nsw i32 %mul3012, %conv3015
  %mul3017 = mul nsw i32 0, %add3016
  %sub3018 = sub nsw i32 %mul3017, 1
  br label %cond.end.3019

cond.end.3019:                                    ; preds = %cond.false.3009, %cond.true.2995
  %cond3020 = phi i32 [ %add3008, %cond.true.2995 ], [ %sub3018, %cond.false.3009 ]
  %746 = load i64, i64* %nbytes, align 8
  %conv3021 = trunc i64 %746 to i8
  %conv3022 = sext i8 %conv3021 to i32
  %div3023 = sdiv i32 %cond3020, %conv3022
  %cmp3024 = icmp slt i32 %conv2983, %div3023
  br i1 %cmp3024, label %cond.true.3239, label %lor.lhs.false.3210

cond.false.3026:                                  ; preds = %cond.true.2974
  %747 = load i64, i64* %nbytes, align 8
  %conv3027 = trunc i64 %747 to i8
  %conv3028 = sext i8 %conv3027 to i32
  %cmp3029 = icmp eq i32 %conv3028, -1
  br i1 %cmp3029, label %cond.true.3031, label %cond.false.3032

cond.true.3031:                                   ; preds = %cond.false.3026
  br i1 false, label %cond.true.3239, label %lor.lhs.false.3210

cond.false.3032:                                  ; preds = %cond.false.3026
  %748 = load i64, i64* %nbytes, align 8
  %conv3033 = trunc i64 %748 to i8
  %conv3034 = sext i8 %conv3033 to i32
  %mul3035 = mul nsw i32 0, %conv3034
  %749 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3036 = getelementptr inbounds %struct.image, %struct.image* %749, i32 0, i32 12
  %750 = load i32, i32* %height3036, align 4
  %conv3037 = trunc i32 %750 to i8
  %conv3038 = sext i8 %conv3037 to i32
  %add3039 = add nsw i32 %mul3035, %conv3038
  %mul3040 = mul nsw i32 0, %add3039
  %sub3041 = sub nsw i32 %mul3040, 1
  %cmp3042 = icmp slt i32 %sub3041, 0
  br i1 %cmp3042, label %cond.true.3044, label %cond.false.3072

cond.true.3044:                                   ; preds = %cond.false.3032
  %751 = load i64, i64* %nbytes, align 8
  %conv3045 = trunc i64 %751 to i8
  %conv3046 = sext i8 %conv3045 to i32
  %mul3047 = mul nsw i32 0, %conv3046
  %752 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3048 = getelementptr inbounds %struct.image, %struct.image* %752, i32 0, i32 12
  %753 = load i32, i32* %height3048, align 4
  %conv3049 = trunc i32 %753 to i8
  %conv3050 = sext i8 %conv3049 to i32
  %add3051 = add nsw i32 %mul3047, %conv3050
  %mul3052 = mul nsw i32 0, %add3051
  %add3053 = add nsw i32 %mul3052, 0
  %neg3054 = xor i32 %add3053, -1
  %cmp3055 = icmp eq i32 %neg3054, -1
  %conv3056 = zext i1 %cmp3055 to i32
  %sub3057 = sub nsw i32 0, %conv3056
  %754 = load i64, i64* %nbytes, align 8
  %conv3058 = trunc i64 %754 to i8
  %conv3059 = sext i8 %conv3058 to i32
  %mul3060 = mul nsw i32 0, %conv3059
  %755 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3061 = getelementptr inbounds %struct.image, %struct.image* %755, i32 0, i32 12
  %756 = load i32, i32* %height3061, align 4
  %conv3062 = trunc i32 %756 to i8
  %conv3063 = sext i8 %conv3062 to i32
  %add3064 = add nsw i32 %mul3060, %conv3063
  %mul3065 = mul nsw i32 0, %add3064
  %add3066 = add nsw i32 %mul3065, 1
  %shl3067 = shl i32 %add3066, 30
  %sub3068 = sub nsw i32 %shl3067, 1
  %mul3069 = mul nsw i32 %sub3068, 2
  %add3070 = add nsw i32 %mul3069, 1
  %sub3071 = sub nsw i32 %sub3057, %add3070
  br label %cond.end.3082

cond.false.3072:                                  ; preds = %cond.false.3032
  %757 = load i64, i64* %nbytes, align 8
  %conv3073 = trunc i64 %757 to i8
  %conv3074 = sext i8 %conv3073 to i32
  %mul3075 = mul nsw i32 0, %conv3074
  %758 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3076 = getelementptr inbounds %struct.image, %struct.image* %758, i32 0, i32 12
  %759 = load i32, i32* %height3076, align 4
  %conv3077 = trunc i32 %759 to i8
  %conv3078 = sext i8 %conv3077 to i32
  %add3079 = add nsw i32 %mul3075, %conv3078
  %mul3080 = mul nsw i32 0, %add3079
  %add3081 = add nsw i32 %mul3080, 0
  br label %cond.end.3082

cond.end.3082:                                    ; preds = %cond.false.3072, %cond.true.3044
  %cond3083 = phi i32 [ %sub3071, %cond.true.3044 ], [ %add3081, %cond.false.3072 ]
  %760 = load i64, i64* %nbytes, align 8
  %conv3084 = trunc i64 %760 to i8
  %conv3085 = sext i8 %conv3084 to i32
  %div3086 = sdiv i32 %cond3083, %conv3085
  %761 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3087 = getelementptr inbounds %struct.image, %struct.image* %761, i32 0, i32 12
  %762 = load i32, i32* %height3087, align 4
  %conv3088 = trunc i32 %762 to i8
  %conv3089 = sext i8 %conv3088 to i32
  %cmp3090 = icmp slt i32 %div3086, %conv3089
  br i1 %cmp3090, label %cond.true.3239, label %lor.lhs.false.3210

cond.false.3092:                                  ; preds = %lor.lhs.false.2969
  %763 = load i64, i64* %nbytes, align 8
  %conv3093 = trunc i64 %763 to i8
  %conv3094 = sext i8 %conv3093 to i32
  %cmp3095 = icmp eq i32 %conv3094, 0
  br i1 %cmp3095, label %cond.true.3097, label %cond.false.3098

cond.true.3097:                                   ; preds = %cond.false.3092
  br i1 false, label %cond.true.3239, label %lor.lhs.false.3210

cond.false.3098:                                  ; preds = %cond.false.3092
  %764 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3099 = getelementptr inbounds %struct.image, %struct.image* %764, i32 0, i32 12
  %765 = load i32, i32* %height3099, align 4
  %conv3100 = trunc i32 %765 to i8
  %conv3101 = sext i8 %conv3100 to i32
  %cmp3102 = icmp slt i32 %conv3101, 0
  br i1 %cmp3102, label %cond.true.3104, label %cond.false.3164

cond.true.3104:                                   ; preds = %cond.false.3098
  %766 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3105 = getelementptr inbounds %struct.image, %struct.image* %766, i32 0, i32 12
  %767 = load i32, i32* %height3105, align 4
  %conv3106 = trunc i32 %767 to i8
  %conv3107 = sext i8 %conv3106 to i32
  %768 = load i64, i64* %nbytes, align 8
  %conv3108 = trunc i64 %768 to i8
  %conv3109 = sext i8 %conv3108 to i32
  %mul3110 = mul nsw i32 0, %conv3109
  %769 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3111 = getelementptr inbounds %struct.image, %struct.image* %769, i32 0, i32 12
  %770 = load i32, i32* %height3111, align 4
  %conv3112 = trunc i32 %770 to i8
  %conv3113 = sext i8 %conv3112 to i32
  %add3114 = add nsw i32 %mul3110, %conv3113
  %mul3115 = mul nsw i32 0, %add3114
  %sub3116 = sub nsw i32 %mul3115, 1
  %cmp3117 = icmp slt i32 %sub3116, 0
  br i1 %cmp3117, label %cond.true.3119, label %cond.false.3147

cond.true.3119:                                   ; preds = %cond.true.3104
  %771 = load i64, i64* %nbytes, align 8
  %conv3120 = trunc i64 %771 to i8
  %conv3121 = sext i8 %conv3120 to i32
  %mul3122 = mul nsw i32 0, %conv3121
  %772 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3123 = getelementptr inbounds %struct.image, %struct.image* %772, i32 0, i32 12
  %773 = load i32, i32* %height3123, align 4
  %conv3124 = trunc i32 %773 to i8
  %conv3125 = sext i8 %conv3124 to i32
  %add3126 = add nsw i32 %mul3122, %conv3125
  %mul3127 = mul nsw i32 0, %add3126
  %add3128 = add nsw i32 %mul3127, 0
  %neg3129 = xor i32 %add3128, -1
  %cmp3130 = icmp eq i32 %neg3129, -1
  %conv3131 = zext i1 %cmp3130 to i32
  %sub3132 = sub nsw i32 0, %conv3131
  %774 = load i64, i64* %nbytes, align 8
  %conv3133 = trunc i64 %774 to i8
  %conv3134 = sext i8 %conv3133 to i32
  %mul3135 = mul nsw i32 0, %conv3134
  %775 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3136 = getelementptr inbounds %struct.image, %struct.image* %775, i32 0, i32 12
  %776 = load i32, i32* %height3136, align 4
  %conv3137 = trunc i32 %776 to i8
  %conv3138 = sext i8 %conv3137 to i32
  %add3139 = add nsw i32 %mul3135, %conv3138
  %mul3140 = mul nsw i32 0, %add3139
  %add3141 = add nsw i32 %mul3140, 1
  %shl3142 = shl i32 %add3141, 30
  %sub3143 = sub nsw i32 %shl3142, 1
  %mul3144 = mul nsw i32 %sub3143, 2
  %add3145 = add nsw i32 %mul3144, 1
  %sub3146 = sub nsw i32 %sub3132, %add3145
  br label %cond.end.3157

cond.false.3147:                                  ; preds = %cond.true.3104
  %777 = load i64, i64* %nbytes, align 8
  %conv3148 = trunc i64 %777 to i8
  %conv3149 = sext i8 %conv3148 to i32
  %mul3150 = mul nsw i32 0, %conv3149
  %778 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3151 = getelementptr inbounds %struct.image, %struct.image* %778, i32 0, i32 12
  %779 = load i32, i32* %height3151, align 4
  %conv3152 = trunc i32 %779 to i8
  %conv3153 = sext i8 %conv3152 to i32
  %add3154 = add nsw i32 %mul3150, %conv3153
  %mul3155 = mul nsw i32 0, %add3154
  %add3156 = add nsw i32 %mul3155, 0
  br label %cond.end.3157

cond.end.3157:                                    ; preds = %cond.false.3147, %cond.true.3119
  %cond3158 = phi i32 [ %sub3146, %cond.true.3119 ], [ %add3156, %cond.false.3147 ]
  %780 = load i64, i64* %nbytes, align 8
  %conv3159 = trunc i64 %780 to i8
  %conv3160 = sext i8 %conv3159 to i32
  %div3161 = sdiv i32 %cond3158, %conv3160
  %cmp3162 = icmp slt i32 %conv3107, %div3161
  br i1 %cmp3162, label %cond.true.3239, label %lor.lhs.false.3210

cond.false.3164:                                  ; preds = %cond.false.3098
  %781 = load i64, i64* %nbytes, align 8
  %conv3165 = trunc i64 %781 to i8
  %conv3166 = sext i8 %conv3165 to i32
  %mul3167 = mul nsw i32 0, %conv3166
  %782 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3168 = getelementptr inbounds %struct.image, %struct.image* %782, i32 0, i32 12
  %783 = load i32, i32* %height3168, align 4
  %conv3169 = trunc i32 %783 to i8
  %conv3170 = sext i8 %conv3169 to i32
  %add3171 = add nsw i32 %mul3167, %conv3170
  %mul3172 = mul nsw i32 0, %add3171
  %sub3173 = sub nsw i32 %mul3172, 1
  %cmp3174 = icmp slt i32 %sub3173, 0
  br i1 %cmp3174, label %cond.true.3176, label %cond.false.3190

cond.true.3176:                                   ; preds = %cond.false.3164
  %784 = load i64, i64* %nbytes, align 8
  %conv3177 = trunc i64 %784 to i8
  %conv3178 = sext i8 %conv3177 to i32
  %mul3179 = mul nsw i32 0, %conv3178
  %785 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3180 = getelementptr inbounds %struct.image, %struct.image* %785, i32 0, i32 12
  %786 = load i32, i32* %height3180, align 4
  %conv3181 = trunc i32 %786 to i8
  %conv3182 = sext i8 %conv3181 to i32
  %add3183 = add nsw i32 %mul3179, %conv3182
  %mul3184 = mul nsw i32 0, %add3183
  %add3185 = add nsw i32 %mul3184, 1
  %shl3186 = shl i32 %add3185, 30
  %sub3187 = sub nsw i32 %shl3186, 1
  %mul3188 = mul nsw i32 %sub3187, 2
  %add3189 = add nsw i32 %mul3188, 1
  br label %cond.end.3200

cond.false.3190:                                  ; preds = %cond.false.3164
  %787 = load i64, i64* %nbytes, align 8
  %conv3191 = trunc i64 %787 to i8
  %conv3192 = sext i8 %conv3191 to i32
  %mul3193 = mul nsw i32 0, %conv3192
  %788 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3194 = getelementptr inbounds %struct.image, %struct.image* %788, i32 0, i32 12
  %789 = load i32, i32* %height3194, align 4
  %conv3195 = trunc i32 %789 to i8
  %conv3196 = sext i8 %conv3195 to i32
  %add3197 = add nsw i32 %mul3193, %conv3196
  %mul3198 = mul nsw i32 0, %add3197
  %sub3199 = sub nsw i32 %mul3198, 1
  br label %cond.end.3200

cond.end.3200:                                    ; preds = %cond.false.3190, %cond.true.3176
  %cond3201 = phi i32 [ %add3189, %cond.true.3176 ], [ %sub3199, %cond.false.3190 ]
  %790 = load i64, i64* %nbytes, align 8
  %conv3202 = trunc i64 %790 to i8
  %conv3203 = sext i8 %conv3202 to i32
  %div3204 = sdiv i32 %cond3201, %conv3203
  %791 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3205 = getelementptr inbounds %struct.image, %struct.image* %791, i32 0, i32 12
  %792 = load i32, i32* %height3205, align 4
  %conv3206 = trunc i32 %792 to i8
  %conv3207 = sext i8 %conv3206 to i32
  %cmp3208 = icmp slt i32 %div3204, %conv3207
  br i1 %cmp3208, label %cond.true.3239, label %lor.lhs.false.3210

lor.lhs.false.3210:                               ; preds = %cond.end.3200, %cond.end.3157, %cond.true.3097, %cond.end.3082, %cond.true.3031, %cond.end.3019
  %793 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3211 = getelementptr inbounds %struct.image, %struct.image* %793, i32 0, i32 12
  %794 = load i32, i32* %height3211, align 4
  %conv3212 = trunc i32 %794 to i8
  %conv3213 = sext i8 %conv3212 to i32
  %795 = load i64, i64* %nbytes, align 8
  %conv3214 = trunc i64 %795 to i8
  %conv3215 = sext i8 %conv3214 to i32
  %mul3216 = mul nsw i32 %conv3213, %conv3215
  %mul3217 = mul nsw i32 0, %mul3216
  %sub3218 = sub nsw i32 %mul3217, 1
  %cmp3219 = icmp slt i32 %sub3218, 0
  br i1 %cmp3219, label %land.lhs.true.3221, label %lor.lhs.false.3230

land.lhs.true.3221:                               ; preds = %lor.lhs.false.3210
  %796 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3222 = getelementptr inbounds %struct.image, %struct.image* %796, i32 0, i32 12
  %797 = load i32, i32* %height3222, align 4
  %conv3223 = trunc i32 %797 to i8
  %conv3224 = sext i8 %conv3223 to i32
  %798 = load i64, i64* %nbytes, align 8
  %conv3225 = trunc i64 %798 to i8
  %conv3226 = sext i8 %conv3225 to i32
  %mul3227 = mul nsw i32 %conv3224, %conv3226
  %cmp3228 = icmp slt i32 %mul3227, -128
  br i1 %cmp3228, label %cond.true.3239, label %lor.lhs.false.3230

lor.lhs.false.3230:                               ; preds = %land.lhs.true.3221, %lor.lhs.false.3210
  %799 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3231 = getelementptr inbounds %struct.image, %struct.image* %799, i32 0, i32 12
  %800 = load i32, i32* %height3231, align 4
  %conv3232 = trunc i32 %800 to i8
  %conv3233 = sext i8 %conv3232 to i32
  %801 = load i64, i64* %nbytes, align 8
  %conv3234 = trunc i64 %801 to i8
  %conv3235 = sext i8 %conv3234 to i32
  %mul3236 = mul nsw i32 %conv3233, %conv3235
  %cmp3237 = icmp slt i32 127, %mul3236
  br i1 %cmp3237, label %cond.true.3239, label %cond.false.3271

cond.true.3239:                                   ; preds = %lor.lhs.false.3230, %land.lhs.true.3221, %cond.end.3200, %cond.end.3157, %cond.true.3097, %cond.end.3082, %cond.true.3031, %cond.end.3019, %land.lhs.true.2963, %land.lhs.true.2953
  %802 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3240 = getelementptr inbounds %struct.image, %struct.image* %802, i32 0, i32 12
  %803 = load i32, i32* %height3240, align 4
  %conv3241 = trunc i32 %803 to i8
  %conv3242 = zext i8 %conv3241 to i32
  %804 = load i64, i64* %nbytes, align 8
  %conv3243 = trunc i64 %804 to i8
  %conv3244 = zext i8 %conv3243 to i32
  %mul3245 = mul nsw i32 %conv3242, %conv3244
  %cmp3246 = icmp sle i32 %mul3245, 127
  br i1 %cmp3246, label %cond.true.3248, label %cond.false.3257

cond.true.3248:                                   ; preds = %cond.true.3239
  %805 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3249 = getelementptr inbounds %struct.image, %struct.image* %805, i32 0, i32 12
  %806 = load i32, i32* %height3249, align 4
  %conv3250 = trunc i32 %806 to i8
  %conv3251 = zext i8 %conv3250 to i32
  %807 = load i64, i64* %nbytes, align 8
  %conv3252 = trunc i64 %807 to i8
  %conv3253 = zext i8 %conv3252 to i32
  %mul3254 = mul nsw i32 %conv3251, %conv3253
  %conv3255 = trunc i32 %mul3254 to i8
  %conv3256 = sext i8 %conv3255 to i32
  br label %cond.end.3268

cond.false.3257:                                  ; preds = %cond.true.3239
  %808 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3258 = getelementptr inbounds %struct.image, %struct.image* %808, i32 0, i32 12
  %809 = load i32, i32* %height3258, align 4
  %conv3259 = trunc i32 %809 to i8
  %conv3260 = zext i8 %conv3259 to i32
  %810 = load i64, i64* %nbytes, align 8
  %conv3261 = trunc i64 %810 to i8
  %conv3262 = zext i8 %conv3261 to i32
  %mul3263 = mul nsw i32 %conv3260, %conv3262
  %sub3264 = sub nsw i32 %mul3263, -128
  %conv3265 = trunc i32 %sub3264 to i8
  %conv3266 = sext i8 %conv3265 to i32
  %add3267 = add nsw i32 %conv3266, -128
  br label %cond.end.3268

cond.end.3268:                                    ; preds = %cond.false.3257, %cond.true.3248
  %cond3269 = phi i32 [ %conv3256, %cond.true.3248 ], [ %add3267, %cond.false.3257 ]
  %conv3270 = sext i32 %cond3269 to i64
  store i64 %conv3270, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.3271:                                  ; preds = %lor.lhs.false.3230
  %811 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3272 = getelementptr inbounds %struct.image, %struct.image* %811, i32 0, i32 12
  %812 = load i32, i32* %height3272, align 4
  %conv3273 = trunc i32 %812 to i8
  %conv3274 = zext i8 %conv3273 to i32
  %813 = load i64, i64* %nbytes, align 8
  %conv3275 = trunc i64 %813 to i8
  %conv3276 = zext i8 %conv3275 to i32
  %mul3277 = mul nsw i32 %conv3274, %conv3276
  %cmp3278 = icmp sle i32 %mul3277, 127
  br i1 %cmp3278, label %cond.true.3280, label %cond.false.3289

cond.true.3280:                                   ; preds = %cond.false.3271
  %814 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3281 = getelementptr inbounds %struct.image, %struct.image* %814, i32 0, i32 12
  %815 = load i32, i32* %height3281, align 4
  %conv3282 = trunc i32 %815 to i8
  %conv3283 = zext i8 %conv3282 to i32
  %816 = load i64, i64* %nbytes, align 8
  %conv3284 = trunc i64 %816 to i8
  %conv3285 = zext i8 %conv3284 to i32
  %mul3286 = mul nsw i32 %conv3283, %conv3285
  %conv3287 = trunc i32 %mul3286 to i8
  %conv3288 = sext i8 %conv3287 to i32
  br label %cond.end.3300

cond.false.3289:                                  ; preds = %cond.false.3271
  %817 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3290 = getelementptr inbounds %struct.image, %struct.image* %817, i32 0, i32 12
  %818 = load i32, i32* %height3290, align 4
  %conv3291 = trunc i32 %818 to i8
  %conv3292 = zext i8 %conv3291 to i32
  %819 = load i64, i64* %nbytes, align 8
  %conv3293 = trunc i64 %819 to i8
  %conv3294 = zext i8 %conv3293 to i32
  %mul3295 = mul nsw i32 %conv3292, %conv3294
  %sub3296 = sub nsw i32 %mul3295, -128
  %conv3297 = trunc i32 %sub3296 to i8
  %conv3298 = sext i8 %conv3297 to i32
  %add3299 = add nsw i32 %conv3298, -128
  br label %cond.end.3300

cond.end.3300:                                    ; preds = %cond.false.3289, %cond.true.3280
  %cond3301 = phi i32 [ %conv3288, %cond.true.3280 ], [ %add3299, %cond.false.3289 ]
  %conv3302 = sext i32 %cond3301 to i64
  store i64 %conv3302, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.3303:                                  ; preds = %cond.true.2893
  %820 = load i64, i64* %nbytes, align 8
  %mul3304 = mul nsw i64 0, %820
  %821 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3305 = getelementptr inbounds %struct.image, %struct.image* %821, i32 0, i32 12
  %822 = load i32, i32* %height3305, align 4
  %conv3306 = sext i32 %822 to i64
  %add3307 = add nsw i64 %mul3304, %conv3306
  %mul3308 = mul nsw i64 0, %add3307
  %sub3309 = sub nsw i64 %mul3308, 1
  %cmp3310 = icmp slt i64 %sub3309, 0
  br i1 %cmp3310, label %cond.true.3312, label %cond.false.3335

cond.true.3312:                                   ; preds = %cond.false.3303
  %823 = load i64, i64* %nbytes, align 8
  %mul3313 = mul nsw i64 0, %823
  %824 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3314 = getelementptr inbounds %struct.image, %struct.image* %824, i32 0, i32 12
  %825 = load i32, i32* %height3314, align 4
  %conv3315 = sext i32 %825 to i64
  %add3316 = add nsw i64 %mul3313, %conv3315
  %mul3317 = mul nsw i64 0, %add3316
  %add3318 = add nsw i64 %mul3317, 0
  %neg3319 = xor i64 %add3318, -1
  %cmp3320 = icmp eq i64 %neg3319, -1
  %conv3321 = zext i1 %cmp3320 to i32
  %sub3322 = sub nsw i32 0, %conv3321
  %conv3323 = sext i32 %sub3322 to i64
  %826 = load i64, i64* %nbytes, align 8
  %mul3324 = mul nsw i64 0, %826
  %827 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3325 = getelementptr inbounds %struct.image, %struct.image* %827, i32 0, i32 12
  %828 = load i32, i32* %height3325, align 4
  %conv3326 = sext i32 %828 to i64
  %add3327 = add nsw i64 %mul3324, %conv3326
  %mul3328 = mul nsw i64 0, %add3327
  %add3329 = add nsw i64 %mul3328, 1
  %shl3330 = shl i64 %add3329, 62
  %sub3331 = sub nsw i64 %shl3330, 1
  %mul3332 = mul nsw i64 %sub3331, 2
  %add3333 = add nsw i64 %mul3332, 1
  %sub3334 = sub nsw i64 %conv3323, %add3333
  br label %cond.end.3342

cond.false.3335:                                  ; preds = %cond.false.3303
  %829 = load i64, i64* %nbytes, align 8
  %mul3336 = mul nsw i64 0, %829
  %830 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3337 = getelementptr inbounds %struct.image, %struct.image* %830, i32 0, i32 12
  %831 = load i32, i32* %height3337, align 4
  %conv3338 = sext i32 %831 to i64
  %add3339 = add nsw i64 %mul3336, %conv3338
  %mul3340 = mul nsw i64 0, %add3339
  %add3341 = add nsw i64 %mul3340, 0
  br label %cond.end.3342

cond.end.3342:                                    ; preds = %cond.false.3335, %cond.true.3312
  %cond3343 = phi i64 [ %sub3334, %cond.true.3312 ], [ %add3341, %cond.false.3335 ]
  %cmp3344 = icmp eq i64 %cond3343, 0
  br i1 %cmp3344, label %land.lhs.true.3346, label %lor.lhs.false.3360

land.lhs.true.3346:                               ; preds = %cond.end.3342
  %832 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3347 = getelementptr inbounds %struct.image, %struct.image* %832, i32 0, i32 12
  %833 = load i32, i32* %height3347, align 4
  %cmp3348 = icmp slt i32 %833, 0
  br i1 %cmp3348, label %land.lhs.true.3350, label %lor.lhs.false.3353

land.lhs.true.3350:                               ; preds = %land.lhs.true.3346
  %834 = load i64, i64* %nbytes, align 8
  %cmp3351 = icmp slt i64 0, %834
  br i1 %cmp3351, label %cond.true.3559, label %lor.lhs.false.3353

lor.lhs.false.3353:                               ; preds = %land.lhs.true.3350, %land.lhs.true.3346
  %835 = load i64, i64* %nbytes, align 8
  %cmp3354 = icmp slt i64 %835, 0
  br i1 %cmp3354, label %land.lhs.true.3356, label %lor.lhs.false.3360

land.lhs.true.3356:                               ; preds = %lor.lhs.false.3353
  %836 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3357 = getelementptr inbounds %struct.image, %struct.image* %836, i32 0, i32 12
  %837 = load i32, i32* %height3357, align 4
  %cmp3358 = icmp slt i32 0, %837
  br i1 %cmp3358, label %cond.true.3559, label %lor.lhs.false.3360

lor.lhs.false.3360:                               ; preds = %land.lhs.true.3356, %lor.lhs.false.3353, %cond.end.3342
  %838 = load i64, i64* %nbytes, align 8
  %cmp3361 = icmp slt i64 %838, 0
  br i1 %cmp3361, label %cond.true.3363, label %cond.false.3451

cond.true.3363:                                   ; preds = %lor.lhs.false.3360
  %839 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3364 = getelementptr inbounds %struct.image, %struct.image* %839, i32 0, i32 12
  %840 = load i32, i32* %height3364, align 4
  %cmp3365 = icmp slt i32 %840, 0
  br i1 %cmp3365, label %cond.true.3367, label %cond.false.3401

cond.true.3367:                                   ; preds = %cond.true.3363
  %841 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3368 = getelementptr inbounds %struct.image, %struct.image* %841, i32 0, i32 12
  %842 = load i32, i32* %height3368, align 4
  %conv3369 = sext i32 %842 to i64
  %843 = load i64, i64* %nbytes, align 8
  %mul3370 = mul nsw i64 0, %843
  %844 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3371 = getelementptr inbounds %struct.image, %struct.image* %844, i32 0, i32 12
  %845 = load i32, i32* %height3371, align 4
  %conv3372 = sext i32 %845 to i64
  %add3373 = add nsw i64 %mul3370, %conv3372
  %mul3374 = mul nsw i64 0, %add3373
  %sub3375 = sub nsw i64 %mul3374, 1
  %cmp3376 = icmp slt i64 %sub3375, 0
  br i1 %cmp3376, label %cond.true.3378, label %cond.false.3389

cond.true.3378:                                   ; preds = %cond.true.3367
  %846 = load i64, i64* %nbytes, align 8
  %mul3379 = mul nsw i64 0, %846
  %847 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3380 = getelementptr inbounds %struct.image, %struct.image* %847, i32 0, i32 12
  %848 = load i32, i32* %height3380, align 4
  %conv3381 = sext i32 %848 to i64
  %add3382 = add nsw i64 %mul3379, %conv3381
  %mul3383 = mul nsw i64 0, %add3382
  %add3384 = add nsw i64 %mul3383, 1
  %shl3385 = shl i64 %add3384, 62
  %sub3386 = sub nsw i64 %shl3385, 1
  %mul3387 = mul nsw i64 %sub3386, 2
  %add3388 = add nsw i64 %mul3387, 1
  br label %cond.end.3396

cond.false.3389:                                  ; preds = %cond.true.3367
  %849 = load i64, i64* %nbytes, align 8
  %mul3390 = mul nsw i64 0, %849
  %850 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3391 = getelementptr inbounds %struct.image, %struct.image* %850, i32 0, i32 12
  %851 = load i32, i32* %height3391, align 4
  %conv3392 = sext i32 %851 to i64
  %add3393 = add nsw i64 %mul3390, %conv3392
  %mul3394 = mul nsw i64 0, %add3393
  %sub3395 = sub nsw i64 %mul3394, 1
  br label %cond.end.3396

cond.end.3396:                                    ; preds = %cond.false.3389, %cond.true.3378
  %cond3397 = phi i64 [ %add3388, %cond.true.3378 ], [ %sub3395, %cond.false.3389 ]
  %852 = load i64, i64* %nbytes, align 8
  %div3398 = sdiv i64 %cond3397, %852
  %cmp3399 = icmp slt i64 %conv3369, %div3398
  br i1 %cmp3399, label %cond.true.3559, label %lor.lhs.false.3539

cond.false.3401:                                  ; preds = %cond.true.3363
  %853 = load i64, i64* %nbytes, align 8
  %cmp3402 = icmp eq i64 %853, -1
  br i1 %cmp3402, label %cond.true.3404, label %cond.false.3405

cond.true.3404:                                   ; preds = %cond.false.3401
  br i1 false, label %cond.true.3559, label %lor.lhs.false.3539

cond.false.3405:                                  ; preds = %cond.false.3401
  %854 = load i64, i64* %nbytes, align 8
  %mul3406 = mul nsw i64 0, %854
  %855 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3407 = getelementptr inbounds %struct.image, %struct.image* %855, i32 0, i32 12
  %856 = load i32, i32* %height3407, align 4
  %conv3408 = sext i32 %856 to i64
  %add3409 = add nsw i64 %mul3406, %conv3408
  %mul3410 = mul nsw i64 0, %add3409
  %sub3411 = sub nsw i64 %mul3410, 1
  %cmp3412 = icmp slt i64 %sub3411, 0
  br i1 %cmp3412, label %cond.true.3414, label %cond.false.3437

cond.true.3414:                                   ; preds = %cond.false.3405
  %857 = load i64, i64* %nbytes, align 8
  %mul3415 = mul nsw i64 0, %857
  %858 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3416 = getelementptr inbounds %struct.image, %struct.image* %858, i32 0, i32 12
  %859 = load i32, i32* %height3416, align 4
  %conv3417 = sext i32 %859 to i64
  %add3418 = add nsw i64 %mul3415, %conv3417
  %mul3419 = mul nsw i64 0, %add3418
  %add3420 = add nsw i64 %mul3419, 0
  %neg3421 = xor i64 %add3420, -1
  %cmp3422 = icmp eq i64 %neg3421, -1
  %conv3423 = zext i1 %cmp3422 to i32
  %sub3424 = sub nsw i32 0, %conv3423
  %conv3425 = sext i32 %sub3424 to i64
  %860 = load i64, i64* %nbytes, align 8
  %mul3426 = mul nsw i64 0, %860
  %861 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3427 = getelementptr inbounds %struct.image, %struct.image* %861, i32 0, i32 12
  %862 = load i32, i32* %height3427, align 4
  %conv3428 = sext i32 %862 to i64
  %add3429 = add nsw i64 %mul3426, %conv3428
  %mul3430 = mul nsw i64 0, %add3429
  %add3431 = add nsw i64 %mul3430, 1
  %shl3432 = shl i64 %add3431, 62
  %sub3433 = sub nsw i64 %shl3432, 1
  %mul3434 = mul nsw i64 %sub3433, 2
  %add3435 = add nsw i64 %mul3434, 1
  %sub3436 = sub nsw i64 %conv3425, %add3435
  br label %cond.end.3444

cond.false.3437:                                  ; preds = %cond.false.3405
  %863 = load i64, i64* %nbytes, align 8
  %mul3438 = mul nsw i64 0, %863
  %864 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3439 = getelementptr inbounds %struct.image, %struct.image* %864, i32 0, i32 12
  %865 = load i32, i32* %height3439, align 4
  %conv3440 = sext i32 %865 to i64
  %add3441 = add nsw i64 %mul3438, %conv3440
  %mul3442 = mul nsw i64 0, %add3441
  %add3443 = add nsw i64 %mul3442, 0
  br label %cond.end.3444

cond.end.3444:                                    ; preds = %cond.false.3437, %cond.true.3414
  %cond3445 = phi i64 [ %sub3436, %cond.true.3414 ], [ %add3443, %cond.false.3437 ]
  %866 = load i64, i64* %nbytes, align 8
  %div3446 = sdiv i64 %cond3445, %866
  %867 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3447 = getelementptr inbounds %struct.image, %struct.image* %867, i32 0, i32 12
  %868 = load i32, i32* %height3447, align 4
  %conv3448 = sext i32 %868 to i64
  %cmp3449 = icmp slt i64 %div3446, %conv3448
  br i1 %cmp3449, label %cond.true.3559, label %lor.lhs.false.3539

cond.false.3451:                                  ; preds = %lor.lhs.false.3360
  %869 = load i64, i64* %nbytes, align 8
  %cmp3452 = icmp eq i64 %869, 0
  br i1 %cmp3452, label %cond.true.3454, label %cond.false.3455

cond.true.3454:                                   ; preds = %cond.false.3451
  br i1 false, label %cond.true.3559, label %lor.lhs.false.3539

cond.false.3455:                                  ; preds = %cond.false.3451
  %870 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3456 = getelementptr inbounds %struct.image, %struct.image* %870, i32 0, i32 12
  %871 = load i32, i32* %height3456, align 4
  %cmp3457 = icmp slt i32 %871, 0
  br i1 %cmp3457, label %cond.true.3459, label %cond.false.3505

cond.true.3459:                                   ; preds = %cond.false.3455
  %872 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3460 = getelementptr inbounds %struct.image, %struct.image* %872, i32 0, i32 12
  %873 = load i32, i32* %height3460, align 4
  %conv3461 = sext i32 %873 to i64
  %874 = load i64, i64* %nbytes, align 8
  %mul3462 = mul nsw i64 0, %874
  %875 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3463 = getelementptr inbounds %struct.image, %struct.image* %875, i32 0, i32 12
  %876 = load i32, i32* %height3463, align 4
  %conv3464 = sext i32 %876 to i64
  %add3465 = add nsw i64 %mul3462, %conv3464
  %mul3466 = mul nsw i64 0, %add3465
  %sub3467 = sub nsw i64 %mul3466, 1
  %cmp3468 = icmp slt i64 %sub3467, 0
  br i1 %cmp3468, label %cond.true.3470, label %cond.false.3493

cond.true.3470:                                   ; preds = %cond.true.3459
  %877 = load i64, i64* %nbytes, align 8
  %mul3471 = mul nsw i64 0, %877
  %878 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3472 = getelementptr inbounds %struct.image, %struct.image* %878, i32 0, i32 12
  %879 = load i32, i32* %height3472, align 4
  %conv3473 = sext i32 %879 to i64
  %add3474 = add nsw i64 %mul3471, %conv3473
  %mul3475 = mul nsw i64 0, %add3474
  %add3476 = add nsw i64 %mul3475, 0
  %neg3477 = xor i64 %add3476, -1
  %cmp3478 = icmp eq i64 %neg3477, -1
  %conv3479 = zext i1 %cmp3478 to i32
  %sub3480 = sub nsw i32 0, %conv3479
  %conv3481 = sext i32 %sub3480 to i64
  %880 = load i64, i64* %nbytes, align 8
  %mul3482 = mul nsw i64 0, %880
  %881 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3483 = getelementptr inbounds %struct.image, %struct.image* %881, i32 0, i32 12
  %882 = load i32, i32* %height3483, align 4
  %conv3484 = sext i32 %882 to i64
  %add3485 = add nsw i64 %mul3482, %conv3484
  %mul3486 = mul nsw i64 0, %add3485
  %add3487 = add nsw i64 %mul3486, 1
  %shl3488 = shl i64 %add3487, 62
  %sub3489 = sub nsw i64 %shl3488, 1
  %mul3490 = mul nsw i64 %sub3489, 2
  %add3491 = add nsw i64 %mul3490, 1
  %sub3492 = sub nsw i64 %conv3481, %add3491
  br label %cond.end.3500

cond.false.3493:                                  ; preds = %cond.true.3459
  %883 = load i64, i64* %nbytes, align 8
  %mul3494 = mul nsw i64 0, %883
  %884 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3495 = getelementptr inbounds %struct.image, %struct.image* %884, i32 0, i32 12
  %885 = load i32, i32* %height3495, align 4
  %conv3496 = sext i32 %885 to i64
  %add3497 = add nsw i64 %mul3494, %conv3496
  %mul3498 = mul nsw i64 0, %add3497
  %add3499 = add nsw i64 %mul3498, 0
  br label %cond.end.3500

cond.end.3500:                                    ; preds = %cond.false.3493, %cond.true.3470
  %cond3501 = phi i64 [ %sub3492, %cond.true.3470 ], [ %add3499, %cond.false.3493 ]
  %886 = load i64, i64* %nbytes, align 8
  %div3502 = sdiv i64 %cond3501, %886
  %cmp3503 = icmp slt i64 %conv3461, %div3502
  br i1 %cmp3503, label %cond.true.3559, label %lor.lhs.false.3539

cond.false.3505:                                  ; preds = %cond.false.3455
  %887 = load i64, i64* %nbytes, align 8
  %mul3506 = mul nsw i64 0, %887
  %888 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3507 = getelementptr inbounds %struct.image, %struct.image* %888, i32 0, i32 12
  %889 = load i32, i32* %height3507, align 4
  %conv3508 = sext i32 %889 to i64
  %add3509 = add nsw i64 %mul3506, %conv3508
  %mul3510 = mul nsw i64 0, %add3509
  %sub3511 = sub nsw i64 %mul3510, 1
  %cmp3512 = icmp slt i64 %sub3511, 0
  br i1 %cmp3512, label %cond.true.3514, label %cond.false.3525

cond.true.3514:                                   ; preds = %cond.false.3505
  %890 = load i64, i64* %nbytes, align 8
  %mul3515 = mul nsw i64 0, %890
  %891 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3516 = getelementptr inbounds %struct.image, %struct.image* %891, i32 0, i32 12
  %892 = load i32, i32* %height3516, align 4
  %conv3517 = sext i32 %892 to i64
  %add3518 = add nsw i64 %mul3515, %conv3517
  %mul3519 = mul nsw i64 0, %add3518
  %add3520 = add nsw i64 %mul3519, 1
  %shl3521 = shl i64 %add3520, 62
  %sub3522 = sub nsw i64 %shl3521, 1
  %mul3523 = mul nsw i64 %sub3522, 2
  %add3524 = add nsw i64 %mul3523, 1
  br label %cond.end.3532

cond.false.3525:                                  ; preds = %cond.false.3505
  %893 = load i64, i64* %nbytes, align 8
  %mul3526 = mul nsw i64 0, %893
  %894 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3527 = getelementptr inbounds %struct.image, %struct.image* %894, i32 0, i32 12
  %895 = load i32, i32* %height3527, align 4
  %conv3528 = sext i32 %895 to i64
  %add3529 = add nsw i64 %mul3526, %conv3528
  %mul3530 = mul nsw i64 0, %add3529
  %sub3531 = sub nsw i64 %mul3530, 1
  br label %cond.end.3532

cond.end.3532:                                    ; preds = %cond.false.3525, %cond.true.3514
  %cond3533 = phi i64 [ %add3524, %cond.true.3514 ], [ %sub3531, %cond.false.3525 ]
  %896 = load i64, i64* %nbytes, align 8
  %div3534 = sdiv i64 %cond3533, %896
  %897 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3535 = getelementptr inbounds %struct.image, %struct.image* %897, i32 0, i32 12
  %898 = load i32, i32* %height3535, align 4
  %conv3536 = sext i32 %898 to i64
  %cmp3537 = icmp slt i64 %div3534, %conv3536
  br i1 %cmp3537, label %cond.true.3559, label %lor.lhs.false.3539

lor.lhs.false.3539:                               ; preds = %cond.end.3532, %cond.end.3500, %cond.true.3454, %cond.end.3444, %cond.true.3404, %cond.end.3396
  %899 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3540 = getelementptr inbounds %struct.image, %struct.image* %899, i32 0, i32 12
  %900 = load i32, i32* %height3540, align 4
  %conv3541 = sext i32 %900 to i64
  %901 = load i64, i64* %nbytes, align 8
  %mul3542 = mul nsw i64 %conv3541, %901
  %mul3543 = mul nsw i64 0, %mul3542
  %sub3544 = sub nsw i64 %mul3543, 1
  %cmp3545 = icmp slt i64 %sub3544, 0
  br i1 %cmp3545, label %land.lhs.true.3547, label %lor.lhs.false.3553

land.lhs.true.3547:                               ; preds = %lor.lhs.false.3539
  %902 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3548 = getelementptr inbounds %struct.image, %struct.image* %902, i32 0, i32 12
  %903 = load i32, i32* %height3548, align 4
  %conv3549 = sext i32 %903 to i64
  %904 = load i64, i64* %nbytes, align 8
  %mul3550 = mul nsw i64 %conv3549, %904
  %cmp3551 = icmp slt i64 %mul3550, -128
  br i1 %cmp3551, label %cond.true.3559, label %lor.lhs.false.3553

lor.lhs.false.3553:                               ; preds = %land.lhs.true.3547, %lor.lhs.false.3539
  %905 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3554 = getelementptr inbounds %struct.image, %struct.image* %905, i32 0, i32 12
  %906 = load i32, i32* %height3554, align 4
  %conv3555 = sext i32 %906 to i64
  %907 = load i64, i64* %nbytes, align 8
  %mul3556 = mul nsw i64 %conv3555, %907
  %cmp3557 = icmp slt i64 127, %mul3556
  br i1 %cmp3557, label %cond.true.3559, label %cond.false.3591

cond.true.3559:                                   ; preds = %lor.lhs.false.3553, %land.lhs.true.3547, %cond.end.3532, %cond.end.3500, %cond.true.3454, %cond.end.3444, %cond.true.3404, %cond.end.3396, %land.lhs.true.3356, %land.lhs.true.3350
  %908 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3560 = getelementptr inbounds %struct.image, %struct.image* %908, i32 0, i32 12
  %909 = load i32, i32* %height3560, align 4
  %conv3561 = trunc i32 %909 to i8
  %conv3562 = zext i8 %conv3561 to i32
  %910 = load i64, i64* %nbytes, align 8
  %conv3563 = trunc i64 %910 to i8
  %conv3564 = zext i8 %conv3563 to i32
  %mul3565 = mul nsw i32 %conv3562, %conv3564
  %cmp3566 = icmp sle i32 %mul3565, 127
  br i1 %cmp3566, label %cond.true.3568, label %cond.false.3577

cond.true.3568:                                   ; preds = %cond.true.3559
  %911 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3569 = getelementptr inbounds %struct.image, %struct.image* %911, i32 0, i32 12
  %912 = load i32, i32* %height3569, align 4
  %conv3570 = trunc i32 %912 to i8
  %conv3571 = zext i8 %conv3570 to i32
  %913 = load i64, i64* %nbytes, align 8
  %conv3572 = trunc i64 %913 to i8
  %conv3573 = zext i8 %conv3572 to i32
  %mul3574 = mul nsw i32 %conv3571, %conv3573
  %conv3575 = trunc i32 %mul3574 to i8
  %conv3576 = sext i8 %conv3575 to i32
  br label %cond.end.3588

cond.false.3577:                                  ; preds = %cond.true.3559
  %914 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3578 = getelementptr inbounds %struct.image, %struct.image* %914, i32 0, i32 12
  %915 = load i32, i32* %height3578, align 4
  %conv3579 = trunc i32 %915 to i8
  %conv3580 = zext i8 %conv3579 to i32
  %916 = load i64, i64* %nbytes, align 8
  %conv3581 = trunc i64 %916 to i8
  %conv3582 = zext i8 %conv3581 to i32
  %mul3583 = mul nsw i32 %conv3580, %conv3582
  %sub3584 = sub nsw i32 %mul3583, -128
  %conv3585 = trunc i32 %sub3584 to i8
  %conv3586 = sext i8 %conv3585 to i32
  %add3587 = add nsw i32 %conv3586, -128
  br label %cond.end.3588

cond.end.3588:                                    ; preds = %cond.false.3577, %cond.true.3568
  %cond3589 = phi i32 [ %conv3576, %cond.true.3568 ], [ %add3587, %cond.false.3577 ]
  %conv3590 = sext i32 %cond3589 to i64
  store i64 %conv3590, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.3591:                                  ; preds = %lor.lhs.false.3553
  %917 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3592 = getelementptr inbounds %struct.image, %struct.image* %917, i32 0, i32 12
  %918 = load i32, i32* %height3592, align 4
  %conv3593 = trunc i32 %918 to i8
  %conv3594 = zext i8 %conv3593 to i32
  %919 = load i64, i64* %nbytes, align 8
  %conv3595 = trunc i64 %919 to i8
  %conv3596 = zext i8 %conv3595 to i32
  %mul3597 = mul nsw i32 %conv3594, %conv3596
  %cmp3598 = icmp sle i32 %mul3597, 127
  br i1 %cmp3598, label %cond.true.3600, label %cond.false.3609

cond.true.3600:                                   ; preds = %cond.false.3591
  %920 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3601 = getelementptr inbounds %struct.image, %struct.image* %920, i32 0, i32 12
  %921 = load i32, i32* %height3601, align 4
  %conv3602 = trunc i32 %921 to i8
  %conv3603 = zext i8 %conv3602 to i32
  %922 = load i64, i64* %nbytes, align 8
  %conv3604 = trunc i64 %922 to i8
  %conv3605 = zext i8 %conv3604 to i32
  %mul3606 = mul nsw i32 %conv3603, %conv3605
  %conv3607 = trunc i32 %mul3606 to i8
  %conv3608 = sext i8 %conv3607 to i32
  br label %cond.end.3620

cond.false.3609:                                  ; preds = %cond.false.3591
  %923 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3610 = getelementptr inbounds %struct.image, %struct.image* %923, i32 0, i32 12
  %924 = load i32, i32* %height3610, align 4
  %conv3611 = trunc i32 %924 to i8
  %conv3612 = zext i8 %conv3611 to i32
  %925 = load i64, i64* %nbytes, align 8
  %conv3613 = trunc i64 %925 to i8
  %conv3614 = zext i8 %conv3613 to i32
  %mul3615 = mul nsw i32 %conv3612, %conv3614
  %sub3616 = sub nsw i32 %mul3615, -128
  %conv3617 = trunc i32 %sub3616 to i8
  %conv3618 = sext i8 %conv3617 to i32
  %add3619 = add nsw i32 %conv3618, -128
  br label %cond.end.3620

cond.end.3620:                                    ; preds = %cond.false.3609, %cond.true.3600
  %cond3621 = phi i32 [ %conv3608, %cond.true.3600 ], [ %add3619, %cond.false.3609 ]
  %conv3622 = sext i32 %cond3621 to i64
  store i64 %conv3622, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.3623:                                  ; preds = %lor.lhs.false.2892
  br i1 false, label %cond.true.3624, label %cond.false.4355

cond.true.3624:                                   ; preds = %cond.false.3623
  br i1 false, label %cond.true.3625, label %cond.false.4035

cond.true.3625:                                   ; preds = %cond.true.3624
  %926 = load i64, i64* %nbytes, align 8
  %conv3626 = trunc i64 %926 to i16
  %conv3627 = sext i16 %conv3626 to i32
  %mul3628 = mul nsw i32 0, %conv3627
  %927 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3629 = getelementptr inbounds %struct.image, %struct.image* %927, i32 0, i32 12
  %928 = load i32, i32* %height3629, align 4
  %conv3630 = trunc i32 %928 to i16
  %conv3631 = sext i16 %conv3630 to i32
  %add3632 = add nsw i32 %mul3628, %conv3631
  %mul3633 = mul nsw i32 0, %add3632
  %sub3634 = sub nsw i32 %mul3633, 1
  %cmp3635 = icmp slt i32 %sub3634, 0
  br i1 %cmp3635, label %cond.true.3637, label %cond.false.3665

cond.true.3637:                                   ; preds = %cond.true.3625
  %929 = load i64, i64* %nbytes, align 8
  %conv3638 = trunc i64 %929 to i16
  %conv3639 = sext i16 %conv3638 to i32
  %mul3640 = mul nsw i32 0, %conv3639
  %930 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3641 = getelementptr inbounds %struct.image, %struct.image* %930, i32 0, i32 12
  %931 = load i32, i32* %height3641, align 4
  %conv3642 = trunc i32 %931 to i16
  %conv3643 = sext i16 %conv3642 to i32
  %add3644 = add nsw i32 %mul3640, %conv3643
  %mul3645 = mul nsw i32 0, %add3644
  %add3646 = add nsw i32 %mul3645, 0
  %neg3647 = xor i32 %add3646, -1
  %cmp3648 = icmp eq i32 %neg3647, -1
  %conv3649 = zext i1 %cmp3648 to i32
  %sub3650 = sub nsw i32 0, %conv3649
  %932 = load i64, i64* %nbytes, align 8
  %conv3651 = trunc i64 %932 to i16
  %conv3652 = sext i16 %conv3651 to i32
  %mul3653 = mul nsw i32 0, %conv3652
  %933 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3654 = getelementptr inbounds %struct.image, %struct.image* %933, i32 0, i32 12
  %934 = load i32, i32* %height3654, align 4
  %conv3655 = trunc i32 %934 to i16
  %conv3656 = sext i16 %conv3655 to i32
  %add3657 = add nsw i32 %mul3653, %conv3656
  %mul3658 = mul nsw i32 0, %add3657
  %add3659 = add nsw i32 %mul3658, 1
  %shl3660 = shl i32 %add3659, 30
  %sub3661 = sub nsw i32 %shl3660, 1
  %mul3662 = mul nsw i32 %sub3661, 2
  %add3663 = add nsw i32 %mul3662, 1
  %sub3664 = sub nsw i32 %sub3650, %add3663
  br label %cond.end.3675

cond.false.3665:                                  ; preds = %cond.true.3625
  %935 = load i64, i64* %nbytes, align 8
  %conv3666 = trunc i64 %935 to i16
  %conv3667 = sext i16 %conv3666 to i32
  %mul3668 = mul nsw i32 0, %conv3667
  %936 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3669 = getelementptr inbounds %struct.image, %struct.image* %936, i32 0, i32 12
  %937 = load i32, i32* %height3669, align 4
  %conv3670 = trunc i32 %937 to i16
  %conv3671 = sext i16 %conv3670 to i32
  %add3672 = add nsw i32 %mul3668, %conv3671
  %mul3673 = mul nsw i32 0, %add3672
  %add3674 = add nsw i32 %mul3673, 0
  br label %cond.end.3675

cond.end.3675:                                    ; preds = %cond.false.3665, %cond.true.3637
  %cond3676 = phi i32 [ %sub3664, %cond.true.3637 ], [ %add3674, %cond.false.3665 ]
  %cmp3677 = icmp eq i32 %cond3676, 0
  br i1 %cmp3677, label %land.lhs.true.3679, label %lor.lhs.false.3701

land.lhs.true.3679:                               ; preds = %cond.end.3675
  %938 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3680 = getelementptr inbounds %struct.image, %struct.image* %938, i32 0, i32 12
  %939 = load i32, i32* %height3680, align 4
  %conv3681 = trunc i32 %939 to i16
  %conv3682 = sext i16 %conv3681 to i32
  %cmp3683 = icmp slt i32 %conv3682, 0
  br i1 %cmp3683, label %land.lhs.true.3685, label %lor.lhs.false.3690

land.lhs.true.3685:                               ; preds = %land.lhs.true.3679
  %940 = load i64, i64* %nbytes, align 8
  %conv3686 = trunc i64 %940 to i16
  %conv3687 = sext i16 %conv3686 to i32
  %cmp3688 = icmp slt i32 0, %conv3687
  br i1 %cmp3688, label %cond.true.3971, label %lor.lhs.false.3690

lor.lhs.false.3690:                               ; preds = %land.lhs.true.3685, %land.lhs.true.3679
  %941 = load i64, i64* %nbytes, align 8
  %conv3691 = trunc i64 %941 to i16
  %conv3692 = sext i16 %conv3691 to i32
  %cmp3693 = icmp slt i32 %conv3692, 0
  br i1 %cmp3693, label %land.lhs.true.3695, label %lor.lhs.false.3701

land.lhs.true.3695:                               ; preds = %lor.lhs.false.3690
  %942 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3696 = getelementptr inbounds %struct.image, %struct.image* %942, i32 0, i32 12
  %943 = load i32, i32* %height3696, align 4
  %conv3697 = trunc i32 %943 to i16
  %conv3698 = sext i16 %conv3697 to i32
  %cmp3699 = icmp slt i32 0, %conv3698
  br i1 %cmp3699, label %cond.true.3971, label %lor.lhs.false.3701

lor.lhs.false.3701:                               ; preds = %land.lhs.true.3695, %lor.lhs.false.3690, %cond.end.3675
  %944 = load i64, i64* %nbytes, align 8
  %conv3702 = trunc i64 %944 to i16
  %conv3703 = sext i16 %conv3702 to i32
  %cmp3704 = icmp slt i32 %conv3703, 0
  br i1 %cmp3704, label %cond.true.3706, label %cond.false.3824

cond.true.3706:                                   ; preds = %lor.lhs.false.3701
  %945 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3707 = getelementptr inbounds %struct.image, %struct.image* %945, i32 0, i32 12
  %946 = load i32, i32* %height3707, align 4
  %conv3708 = trunc i32 %946 to i16
  %conv3709 = sext i16 %conv3708 to i32
  %cmp3710 = icmp slt i32 %conv3709, 0
  br i1 %cmp3710, label %cond.true.3712, label %cond.false.3758

cond.true.3712:                                   ; preds = %cond.true.3706
  %947 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3713 = getelementptr inbounds %struct.image, %struct.image* %947, i32 0, i32 12
  %948 = load i32, i32* %height3713, align 4
  %conv3714 = trunc i32 %948 to i16
  %conv3715 = sext i16 %conv3714 to i32
  %949 = load i64, i64* %nbytes, align 8
  %conv3716 = trunc i64 %949 to i16
  %conv3717 = sext i16 %conv3716 to i32
  %mul3718 = mul nsw i32 0, %conv3717
  %950 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3719 = getelementptr inbounds %struct.image, %struct.image* %950, i32 0, i32 12
  %951 = load i32, i32* %height3719, align 4
  %conv3720 = trunc i32 %951 to i16
  %conv3721 = sext i16 %conv3720 to i32
  %add3722 = add nsw i32 %mul3718, %conv3721
  %mul3723 = mul nsw i32 0, %add3722
  %sub3724 = sub nsw i32 %mul3723, 1
  %cmp3725 = icmp slt i32 %sub3724, 0
  br i1 %cmp3725, label %cond.true.3727, label %cond.false.3741

cond.true.3727:                                   ; preds = %cond.true.3712
  %952 = load i64, i64* %nbytes, align 8
  %conv3728 = trunc i64 %952 to i16
  %conv3729 = sext i16 %conv3728 to i32
  %mul3730 = mul nsw i32 0, %conv3729
  %953 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3731 = getelementptr inbounds %struct.image, %struct.image* %953, i32 0, i32 12
  %954 = load i32, i32* %height3731, align 4
  %conv3732 = trunc i32 %954 to i16
  %conv3733 = sext i16 %conv3732 to i32
  %add3734 = add nsw i32 %mul3730, %conv3733
  %mul3735 = mul nsw i32 0, %add3734
  %add3736 = add nsw i32 %mul3735, 1
  %shl3737 = shl i32 %add3736, 30
  %sub3738 = sub nsw i32 %shl3737, 1
  %mul3739 = mul nsw i32 %sub3738, 2
  %add3740 = add nsw i32 %mul3739, 1
  br label %cond.end.3751

cond.false.3741:                                  ; preds = %cond.true.3712
  %955 = load i64, i64* %nbytes, align 8
  %conv3742 = trunc i64 %955 to i16
  %conv3743 = sext i16 %conv3742 to i32
  %mul3744 = mul nsw i32 0, %conv3743
  %956 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3745 = getelementptr inbounds %struct.image, %struct.image* %956, i32 0, i32 12
  %957 = load i32, i32* %height3745, align 4
  %conv3746 = trunc i32 %957 to i16
  %conv3747 = sext i16 %conv3746 to i32
  %add3748 = add nsw i32 %mul3744, %conv3747
  %mul3749 = mul nsw i32 0, %add3748
  %sub3750 = sub nsw i32 %mul3749, 1
  br label %cond.end.3751

cond.end.3751:                                    ; preds = %cond.false.3741, %cond.true.3727
  %cond3752 = phi i32 [ %add3740, %cond.true.3727 ], [ %sub3750, %cond.false.3741 ]
  %958 = load i64, i64* %nbytes, align 8
  %conv3753 = trunc i64 %958 to i16
  %conv3754 = sext i16 %conv3753 to i32
  %div3755 = sdiv i32 %cond3752, %conv3754
  %cmp3756 = icmp slt i32 %conv3715, %div3755
  br i1 %cmp3756, label %cond.true.3971, label %lor.lhs.false.3942

cond.false.3758:                                  ; preds = %cond.true.3706
  %959 = load i64, i64* %nbytes, align 8
  %conv3759 = trunc i64 %959 to i16
  %conv3760 = sext i16 %conv3759 to i32
  %cmp3761 = icmp eq i32 %conv3760, -1
  br i1 %cmp3761, label %cond.true.3763, label %cond.false.3764

cond.true.3763:                                   ; preds = %cond.false.3758
  br i1 false, label %cond.true.3971, label %lor.lhs.false.3942

cond.false.3764:                                  ; preds = %cond.false.3758
  %960 = load i64, i64* %nbytes, align 8
  %conv3765 = trunc i64 %960 to i16
  %conv3766 = sext i16 %conv3765 to i32
  %mul3767 = mul nsw i32 0, %conv3766
  %961 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3768 = getelementptr inbounds %struct.image, %struct.image* %961, i32 0, i32 12
  %962 = load i32, i32* %height3768, align 4
  %conv3769 = trunc i32 %962 to i16
  %conv3770 = sext i16 %conv3769 to i32
  %add3771 = add nsw i32 %mul3767, %conv3770
  %mul3772 = mul nsw i32 0, %add3771
  %sub3773 = sub nsw i32 %mul3772, 1
  %cmp3774 = icmp slt i32 %sub3773, 0
  br i1 %cmp3774, label %cond.true.3776, label %cond.false.3804

cond.true.3776:                                   ; preds = %cond.false.3764
  %963 = load i64, i64* %nbytes, align 8
  %conv3777 = trunc i64 %963 to i16
  %conv3778 = sext i16 %conv3777 to i32
  %mul3779 = mul nsw i32 0, %conv3778
  %964 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3780 = getelementptr inbounds %struct.image, %struct.image* %964, i32 0, i32 12
  %965 = load i32, i32* %height3780, align 4
  %conv3781 = trunc i32 %965 to i16
  %conv3782 = sext i16 %conv3781 to i32
  %add3783 = add nsw i32 %mul3779, %conv3782
  %mul3784 = mul nsw i32 0, %add3783
  %add3785 = add nsw i32 %mul3784, 0
  %neg3786 = xor i32 %add3785, -1
  %cmp3787 = icmp eq i32 %neg3786, -1
  %conv3788 = zext i1 %cmp3787 to i32
  %sub3789 = sub nsw i32 0, %conv3788
  %966 = load i64, i64* %nbytes, align 8
  %conv3790 = trunc i64 %966 to i16
  %conv3791 = sext i16 %conv3790 to i32
  %mul3792 = mul nsw i32 0, %conv3791
  %967 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3793 = getelementptr inbounds %struct.image, %struct.image* %967, i32 0, i32 12
  %968 = load i32, i32* %height3793, align 4
  %conv3794 = trunc i32 %968 to i16
  %conv3795 = sext i16 %conv3794 to i32
  %add3796 = add nsw i32 %mul3792, %conv3795
  %mul3797 = mul nsw i32 0, %add3796
  %add3798 = add nsw i32 %mul3797, 1
  %shl3799 = shl i32 %add3798, 30
  %sub3800 = sub nsw i32 %shl3799, 1
  %mul3801 = mul nsw i32 %sub3800, 2
  %add3802 = add nsw i32 %mul3801, 1
  %sub3803 = sub nsw i32 %sub3789, %add3802
  br label %cond.end.3814

cond.false.3804:                                  ; preds = %cond.false.3764
  %969 = load i64, i64* %nbytes, align 8
  %conv3805 = trunc i64 %969 to i16
  %conv3806 = sext i16 %conv3805 to i32
  %mul3807 = mul nsw i32 0, %conv3806
  %970 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3808 = getelementptr inbounds %struct.image, %struct.image* %970, i32 0, i32 12
  %971 = load i32, i32* %height3808, align 4
  %conv3809 = trunc i32 %971 to i16
  %conv3810 = sext i16 %conv3809 to i32
  %add3811 = add nsw i32 %mul3807, %conv3810
  %mul3812 = mul nsw i32 0, %add3811
  %add3813 = add nsw i32 %mul3812, 0
  br label %cond.end.3814

cond.end.3814:                                    ; preds = %cond.false.3804, %cond.true.3776
  %cond3815 = phi i32 [ %sub3803, %cond.true.3776 ], [ %add3813, %cond.false.3804 ]
  %972 = load i64, i64* %nbytes, align 8
  %conv3816 = trunc i64 %972 to i16
  %conv3817 = sext i16 %conv3816 to i32
  %div3818 = sdiv i32 %cond3815, %conv3817
  %973 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3819 = getelementptr inbounds %struct.image, %struct.image* %973, i32 0, i32 12
  %974 = load i32, i32* %height3819, align 4
  %conv3820 = trunc i32 %974 to i16
  %conv3821 = sext i16 %conv3820 to i32
  %cmp3822 = icmp slt i32 %div3818, %conv3821
  br i1 %cmp3822, label %cond.true.3971, label %lor.lhs.false.3942

cond.false.3824:                                  ; preds = %lor.lhs.false.3701
  %975 = load i64, i64* %nbytes, align 8
  %conv3825 = trunc i64 %975 to i16
  %conv3826 = sext i16 %conv3825 to i32
  %cmp3827 = icmp eq i32 %conv3826, 0
  br i1 %cmp3827, label %cond.true.3829, label %cond.false.3830

cond.true.3829:                                   ; preds = %cond.false.3824
  br i1 false, label %cond.true.3971, label %lor.lhs.false.3942

cond.false.3830:                                  ; preds = %cond.false.3824
  %976 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3831 = getelementptr inbounds %struct.image, %struct.image* %976, i32 0, i32 12
  %977 = load i32, i32* %height3831, align 4
  %conv3832 = trunc i32 %977 to i16
  %conv3833 = sext i16 %conv3832 to i32
  %cmp3834 = icmp slt i32 %conv3833, 0
  br i1 %cmp3834, label %cond.true.3836, label %cond.false.3896

cond.true.3836:                                   ; preds = %cond.false.3830
  %978 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3837 = getelementptr inbounds %struct.image, %struct.image* %978, i32 0, i32 12
  %979 = load i32, i32* %height3837, align 4
  %conv3838 = trunc i32 %979 to i16
  %conv3839 = sext i16 %conv3838 to i32
  %980 = load i64, i64* %nbytes, align 8
  %conv3840 = trunc i64 %980 to i16
  %conv3841 = sext i16 %conv3840 to i32
  %mul3842 = mul nsw i32 0, %conv3841
  %981 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3843 = getelementptr inbounds %struct.image, %struct.image* %981, i32 0, i32 12
  %982 = load i32, i32* %height3843, align 4
  %conv3844 = trunc i32 %982 to i16
  %conv3845 = sext i16 %conv3844 to i32
  %add3846 = add nsw i32 %mul3842, %conv3845
  %mul3847 = mul nsw i32 0, %add3846
  %sub3848 = sub nsw i32 %mul3847, 1
  %cmp3849 = icmp slt i32 %sub3848, 0
  br i1 %cmp3849, label %cond.true.3851, label %cond.false.3879

cond.true.3851:                                   ; preds = %cond.true.3836
  %983 = load i64, i64* %nbytes, align 8
  %conv3852 = trunc i64 %983 to i16
  %conv3853 = sext i16 %conv3852 to i32
  %mul3854 = mul nsw i32 0, %conv3853
  %984 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3855 = getelementptr inbounds %struct.image, %struct.image* %984, i32 0, i32 12
  %985 = load i32, i32* %height3855, align 4
  %conv3856 = trunc i32 %985 to i16
  %conv3857 = sext i16 %conv3856 to i32
  %add3858 = add nsw i32 %mul3854, %conv3857
  %mul3859 = mul nsw i32 0, %add3858
  %add3860 = add nsw i32 %mul3859, 0
  %neg3861 = xor i32 %add3860, -1
  %cmp3862 = icmp eq i32 %neg3861, -1
  %conv3863 = zext i1 %cmp3862 to i32
  %sub3864 = sub nsw i32 0, %conv3863
  %986 = load i64, i64* %nbytes, align 8
  %conv3865 = trunc i64 %986 to i16
  %conv3866 = sext i16 %conv3865 to i32
  %mul3867 = mul nsw i32 0, %conv3866
  %987 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3868 = getelementptr inbounds %struct.image, %struct.image* %987, i32 0, i32 12
  %988 = load i32, i32* %height3868, align 4
  %conv3869 = trunc i32 %988 to i16
  %conv3870 = sext i16 %conv3869 to i32
  %add3871 = add nsw i32 %mul3867, %conv3870
  %mul3872 = mul nsw i32 0, %add3871
  %add3873 = add nsw i32 %mul3872, 1
  %shl3874 = shl i32 %add3873, 30
  %sub3875 = sub nsw i32 %shl3874, 1
  %mul3876 = mul nsw i32 %sub3875, 2
  %add3877 = add nsw i32 %mul3876, 1
  %sub3878 = sub nsw i32 %sub3864, %add3877
  br label %cond.end.3889

cond.false.3879:                                  ; preds = %cond.true.3836
  %989 = load i64, i64* %nbytes, align 8
  %conv3880 = trunc i64 %989 to i16
  %conv3881 = sext i16 %conv3880 to i32
  %mul3882 = mul nsw i32 0, %conv3881
  %990 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3883 = getelementptr inbounds %struct.image, %struct.image* %990, i32 0, i32 12
  %991 = load i32, i32* %height3883, align 4
  %conv3884 = trunc i32 %991 to i16
  %conv3885 = sext i16 %conv3884 to i32
  %add3886 = add nsw i32 %mul3882, %conv3885
  %mul3887 = mul nsw i32 0, %add3886
  %add3888 = add nsw i32 %mul3887, 0
  br label %cond.end.3889

cond.end.3889:                                    ; preds = %cond.false.3879, %cond.true.3851
  %cond3890 = phi i32 [ %sub3878, %cond.true.3851 ], [ %add3888, %cond.false.3879 ]
  %992 = load i64, i64* %nbytes, align 8
  %conv3891 = trunc i64 %992 to i16
  %conv3892 = sext i16 %conv3891 to i32
  %div3893 = sdiv i32 %cond3890, %conv3892
  %cmp3894 = icmp slt i32 %conv3839, %div3893
  br i1 %cmp3894, label %cond.true.3971, label %lor.lhs.false.3942

cond.false.3896:                                  ; preds = %cond.false.3830
  %993 = load i64, i64* %nbytes, align 8
  %conv3897 = trunc i64 %993 to i16
  %conv3898 = sext i16 %conv3897 to i32
  %mul3899 = mul nsw i32 0, %conv3898
  %994 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3900 = getelementptr inbounds %struct.image, %struct.image* %994, i32 0, i32 12
  %995 = load i32, i32* %height3900, align 4
  %conv3901 = trunc i32 %995 to i16
  %conv3902 = sext i16 %conv3901 to i32
  %add3903 = add nsw i32 %mul3899, %conv3902
  %mul3904 = mul nsw i32 0, %add3903
  %sub3905 = sub nsw i32 %mul3904, 1
  %cmp3906 = icmp slt i32 %sub3905, 0
  br i1 %cmp3906, label %cond.true.3908, label %cond.false.3922

cond.true.3908:                                   ; preds = %cond.false.3896
  %996 = load i64, i64* %nbytes, align 8
  %conv3909 = trunc i64 %996 to i16
  %conv3910 = sext i16 %conv3909 to i32
  %mul3911 = mul nsw i32 0, %conv3910
  %997 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3912 = getelementptr inbounds %struct.image, %struct.image* %997, i32 0, i32 12
  %998 = load i32, i32* %height3912, align 4
  %conv3913 = trunc i32 %998 to i16
  %conv3914 = sext i16 %conv3913 to i32
  %add3915 = add nsw i32 %mul3911, %conv3914
  %mul3916 = mul nsw i32 0, %add3915
  %add3917 = add nsw i32 %mul3916, 1
  %shl3918 = shl i32 %add3917, 30
  %sub3919 = sub nsw i32 %shl3918, 1
  %mul3920 = mul nsw i32 %sub3919, 2
  %add3921 = add nsw i32 %mul3920, 1
  br label %cond.end.3932

cond.false.3922:                                  ; preds = %cond.false.3896
  %999 = load i64, i64* %nbytes, align 8
  %conv3923 = trunc i64 %999 to i16
  %conv3924 = sext i16 %conv3923 to i32
  %mul3925 = mul nsw i32 0, %conv3924
  %1000 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3926 = getelementptr inbounds %struct.image, %struct.image* %1000, i32 0, i32 12
  %1001 = load i32, i32* %height3926, align 4
  %conv3927 = trunc i32 %1001 to i16
  %conv3928 = sext i16 %conv3927 to i32
  %add3929 = add nsw i32 %mul3925, %conv3928
  %mul3930 = mul nsw i32 0, %add3929
  %sub3931 = sub nsw i32 %mul3930, 1
  br label %cond.end.3932

cond.end.3932:                                    ; preds = %cond.false.3922, %cond.true.3908
  %cond3933 = phi i32 [ %add3921, %cond.true.3908 ], [ %sub3931, %cond.false.3922 ]
  %1002 = load i64, i64* %nbytes, align 8
  %conv3934 = trunc i64 %1002 to i16
  %conv3935 = sext i16 %conv3934 to i32
  %div3936 = sdiv i32 %cond3933, %conv3935
  %1003 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3937 = getelementptr inbounds %struct.image, %struct.image* %1003, i32 0, i32 12
  %1004 = load i32, i32* %height3937, align 4
  %conv3938 = trunc i32 %1004 to i16
  %conv3939 = sext i16 %conv3938 to i32
  %cmp3940 = icmp slt i32 %div3936, %conv3939
  br i1 %cmp3940, label %cond.true.3971, label %lor.lhs.false.3942

lor.lhs.false.3942:                               ; preds = %cond.end.3932, %cond.end.3889, %cond.true.3829, %cond.end.3814, %cond.true.3763, %cond.end.3751
  %1005 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3943 = getelementptr inbounds %struct.image, %struct.image* %1005, i32 0, i32 12
  %1006 = load i32, i32* %height3943, align 4
  %conv3944 = trunc i32 %1006 to i16
  %conv3945 = sext i16 %conv3944 to i32
  %1007 = load i64, i64* %nbytes, align 8
  %conv3946 = trunc i64 %1007 to i16
  %conv3947 = sext i16 %conv3946 to i32
  %mul3948 = mul nsw i32 %conv3945, %conv3947
  %mul3949 = mul nsw i32 0, %mul3948
  %sub3950 = sub nsw i32 %mul3949, 1
  %cmp3951 = icmp slt i32 %sub3950, 0
  br i1 %cmp3951, label %land.lhs.true.3953, label %lor.lhs.false.3962

land.lhs.true.3953:                               ; preds = %lor.lhs.false.3942
  %1008 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3954 = getelementptr inbounds %struct.image, %struct.image* %1008, i32 0, i32 12
  %1009 = load i32, i32* %height3954, align 4
  %conv3955 = trunc i32 %1009 to i16
  %conv3956 = sext i16 %conv3955 to i32
  %1010 = load i64, i64* %nbytes, align 8
  %conv3957 = trunc i64 %1010 to i16
  %conv3958 = sext i16 %conv3957 to i32
  %mul3959 = mul nsw i32 %conv3956, %conv3958
  %cmp3960 = icmp slt i32 %mul3959, -32768
  br i1 %cmp3960, label %cond.true.3971, label %lor.lhs.false.3962

lor.lhs.false.3962:                               ; preds = %land.lhs.true.3953, %lor.lhs.false.3942
  %1011 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3963 = getelementptr inbounds %struct.image, %struct.image* %1011, i32 0, i32 12
  %1012 = load i32, i32* %height3963, align 4
  %conv3964 = trunc i32 %1012 to i16
  %conv3965 = sext i16 %conv3964 to i32
  %1013 = load i64, i64* %nbytes, align 8
  %conv3966 = trunc i64 %1013 to i16
  %conv3967 = sext i16 %conv3966 to i32
  %mul3968 = mul nsw i32 %conv3965, %conv3967
  %cmp3969 = icmp slt i32 32767, %mul3968
  br i1 %cmp3969, label %cond.true.3971, label %cond.false.4003

cond.true.3971:                                   ; preds = %lor.lhs.false.3962, %land.lhs.true.3953, %cond.end.3932, %cond.end.3889, %cond.true.3829, %cond.end.3814, %cond.true.3763, %cond.end.3751, %land.lhs.true.3695, %land.lhs.true.3685
  %1014 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3972 = getelementptr inbounds %struct.image, %struct.image* %1014, i32 0, i32 12
  %1015 = load i32, i32* %height3972, align 4
  %conv3973 = trunc i32 %1015 to i16
  %conv3974 = zext i16 %conv3973 to i32
  %1016 = load i64, i64* %nbytes, align 8
  %conv3975 = trunc i64 %1016 to i16
  %conv3976 = zext i16 %conv3975 to i32
  %mul3977 = mul nsw i32 %conv3974, %conv3976
  %cmp3978 = icmp sle i32 %mul3977, 32767
  br i1 %cmp3978, label %cond.true.3980, label %cond.false.3989

cond.true.3980:                                   ; preds = %cond.true.3971
  %1017 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3981 = getelementptr inbounds %struct.image, %struct.image* %1017, i32 0, i32 12
  %1018 = load i32, i32* %height3981, align 4
  %conv3982 = trunc i32 %1018 to i16
  %conv3983 = zext i16 %conv3982 to i32
  %1019 = load i64, i64* %nbytes, align 8
  %conv3984 = trunc i64 %1019 to i16
  %conv3985 = zext i16 %conv3984 to i32
  %mul3986 = mul nsw i32 %conv3983, %conv3985
  %conv3987 = trunc i32 %mul3986 to i16
  %conv3988 = sext i16 %conv3987 to i32
  br label %cond.end.4000

cond.false.3989:                                  ; preds = %cond.true.3971
  %1020 = load %struct.image*, %struct.image** %img.addr, align 8
  %height3990 = getelementptr inbounds %struct.image, %struct.image* %1020, i32 0, i32 12
  %1021 = load i32, i32* %height3990, align 4
  %conv3991 = trunc i32 %1021 to i16
  %conv3992 = zext i16 %conv3991 to i32
  %1022 = load i64, i64* %nbytes, align 8
  %conv3993 = trunc i64 %1022 to i16
  %conv3994 = zext i16 %conv3993 to i32
  %mul3995 = mul nsw i32 %conv3992, %conv3994
  %sub3996 = sub nsw i32 %mul3995, -32768
  %conv3997 = trunc i32 %sub3996 to i16
  %conv3998 = sext i16 %conv3997 to i32
  %add3999 = add nsw i32 %conv3998, -32768
  br label %cond.end.4000

cond.end.4000:                                    ; preds = %cond.false.3989, %cond.true.3980
  %cond4001 = phi i32 [ %conv3988, %cond.true.3980 ], [ %add3999, %cond.false.3989 ]
  %conv4002 = sext i32 %cond4001 to i64
  store i64 %conv4002, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.4003:                                  ; preds = %lor.lhs.false.3962
  %1023 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4004 = getelementptr inbounds %struct.image, %struct.image* %1023, i32 0, i32 12
  %1024 = load i32, i32* %height4004, align 4
  %conv4005 = trunc i32 %1024 to i16
  %conv4006 = zext i16 %conv4005 to i32
  %1025 = load i64, i64* %nbytes, align 8
  %conv4007 = trunc i64 %1025 to i16
  %conv4008 = zext i16 %conv4007 to i32
  %mul4009 = mul nsw i32 %conv4006, %conv4008
  %cmp4010 = icmp sle i32 %mul4009, 32767
  br i1 %cmp4010, label %cond.true.4012, label %cond.false.4021

cond.true.4012:                                   ; preds = %cond.false.4003
  %1026 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4013 = getelementptr inbounds %struct.image, %struct.image* %1026, i32 0, i32 12
  %1027 = load i32, i32* %height4013, align 4
  %conv4014 = trunc i32 %1027 to i16
  %conv4015 = zext i16 %conv4014 to i32
  %1028 = load i64, i64* %nbytes, align 8
  %conv4016 = trunc i64 %1028 to i16
  %conv4017 = zext i16 %conv4016 to i32
  %mul4018 = mul nsw i32 %conv4015, %conv4017
  %conv4019 = trunc i32 %mul4018 to i16
  %conv4020 = sext i16 %conv4019 to i32
  br label %cond.end.4032

cond.false.4021:                                  ; preds = %cond.false.4003
  %1029 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4022 = getelementptr inbounds %struct.image, %struct.image* %1029, i32 0, i32 12
  %1030 = load i32, i32* %height4022, align 4
  %conv4023 = trunc i32 %1030 to i16
  %conv4024 = zext i16 %conv4023 to i32
  %1031 = load i64, i64* %nbytes, align 8
  %conv4025 = trunc i64 %1031 to i16
  %conv4026 = zext i16 %conv4025 to i32
  %mul4027 = mul nsw i32 %conv4024, %conv4026
  %sub4028 = sub nsw i32 %mul4027, -32768
  %conv4029 = trunc i32 %sub4028 to i16
  %conv4030 = sext i16 %conv4029 to i32
  %add4031 = add nsw i32 %conv4030, -32768
  br label %cond.end.4032

cond.end.4032:                                    ; preds = %cond.false.4021, %cond.true.4012
  %cond4033 = phi i32 [ %conv4020, %cond.true.4012 ], [ %add4031, %cond.false.4021 ]
  %conv4034 = sext i32 %cond4033 to i64
  store i64 %conv4034, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.4035:                                  ; preds = %cond.true.3624
  %1032 = load i64, i64* %nbytes, align 8
  %mul4036 = mul nsw i64 0, %1032
  %1033 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4037 = getelementptr inbounds %struct.image, %struct.image* %1033, i32 0, i32 12
  %1034 = load i32, i32* %height4037, align 4
  %conv4038 = sext i32 %1034 to i64
  %add4039 = add nsw i64 %mul4036, %conv4038
  %mul4040 = mul nsw i64 0, %add4039
  %sub4041 = sub nsw i64 %mul4040, 1
  %cmp4042 = icmp slt i64 %sub4041, 0
  br i1 %cmp4042, label %cond.true.4044, label %cond.false.4067

cond.true.4044:                                   ; preds = %cond.false.4035
  %1035 = load i64, i64* %nbytes, align 8
  %mul4045 = mul nsw i64 0, %1035
  %1036 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4046 = getelementptr inbounds %struct.image, %struct.image* %1036, i32 0, i32 12
  %1037 = load i32, i32* %height4046, align 4
  %conv4047 = sext i32 %1037 to i64
  %add4048 = add nsw i64 %mul4045, %conv4047
  %mul4049 = mul nsw i64 0, %add4048
  %add4050 = add nsw i64 %mul4049, 0
  %neg4051 = xor i64 %add4050, -1
  %cmp4052 = icmp eq i64 %neg4051, -1
  %conv4053 = zext i1 %cmp4052 to i32
  %sub4054 = sub nsw i32 0, %conv4053
  %conv4055 = sext i32 %sub4054 to i64
  %1038 = load i64, i64* %nbytes, align 8
  %mul4056 = mul nsw i64 0, %1038
  %1039 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4057 = getelementptr inbounds %struct.image, %struct.image* %1039, i32 0, i32 12
  %1040 = load i32, i32* %height4057, align 4
  %conv4058 = sext i32 %1040 to i64
  %add4059 = add nsw i64 %mul4056, %conv4058
  %mul4060 = mul nsw i64 0, %add4059
  %add4061 = add nsw i64 %mul4060, 1
  %shl4062 = shl i64 %add4061, 62
  %sub4063 = sub nsw i64 %shl4062, 1
  %mul4064 = mul nsw i64 %sub4063, 2
  %add4065 = add nsw i64 %mul4064, 1
  %sub4066 = sub nsw i64 %conv4055, %add4065
  br label %cond.end.4074

cond.false.4067:                                  ; preds = %cond.false.4035
  %1041 = load i64, i64* %nbytes, align 8
  %mul4068 = mul nsw i64 0, %1041
  %1042 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4069 = getelementptr inbounds %struct.image, %struct.image* %1042, i32 0, i32 12
  %1043 = load i32, i32* %height4069, align 4
  %conv4070 = sext i32 %1043 to i64
  %add4071 = add nsw i64 %mul4068, %conv4070
  %mul4072 = mul nsw i64 0, %add4071
  %add4073 = add nsw i64 %mul4072, 0
  br label %cond.end.4074

cond.end.4074:                                    ; preds = %cond.false.4067, %cond.true.4044
  %cond4075 = phi i64 [ %sub4066, %cond.true.4044 ], [ %add4073, %cond.false.4067 ]
  %cmp4076 = icmp eq i64 %cond4075, 0
  br i1 %cmp4076, label %land.lhs.true.4078, label %lor.lhs.false.4092

land.lhs.true.4078:                               ; preds = %cond.end.4074
  %1044 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4079 = getelementptr inbounds %struct.image, %struct.image* %1044, i32 0, i32 12
  %1045 = load i32, i32* %height4079, align 4
  %cmp4080 = icmp slt i32 %1045, 0
  br i1 %cmp4080, label %land.lhs.true.4082, label %lor.lhs.false.4085

land.lhs.true.4082:                               ; preds = %land.lhs.true.4078
  %1046 = load i64, i64* %nbytes, align 8
  %cmp4083 = icmp slt i64 0, %1046
  br i1 %cmp4083, label %cond.true.4291, label %lor.lhs.false.4085

lor.lhs.false.4085:                               ; preds = %land.lhs.true.4082, %land.lhs.true.4078
  %1047 = load i64, i64* %nbytes, align 8
  %cmp4086 = icmp slt i64 %1047, 0
  br i1 %cmp4086, label %land.lhs.true.4088, label %lor.lhs.false.4092

land.lhs.true.4088:                               ; preds = %lor.lhs.false.4085
  %1048 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4089 = getelementptr inbounds %struct.image, %struct.image* %1048, i32 0, i32 12
  %1049 = load i32, i32* %height4089, align 4
  %cmp4090 = icmp slt i32 0, %1049
  br i1 %cmp4090, label %cond.true.4291, label %lor.lhs.false.4092

lor.lhs.false.4092:                               ; preds = %land.lhs.true.4088, %lor.lhs.false.4085, %cond.end.4074
  %1050 = load i64, i64* %nbytes, align 8
  %cmp4093 = icmp slt i64 %1050, 0
  br i1 %cmp4093, label %cond.true.4095, label %cond.false.4183

cond.true.4095:                                   ; preds = %lor.lhs.false.4092
  %1051 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4096 = getelementptr inbounds %struct.image, %struct.image* %1051, i32 0, i32 12
  %1052 = load i32, i32* %height4096, align 4
  %cmp4097 = icmp slt i32 %1052, 0
  br i1 %cmp4097, label %cond.true.4099, label %cond.false.4133

cond.true.4099:                                   ; preds = %cond.true.4095
  %1053 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4100 = getelementptr inbounds %struct.image, %struct.image* %1053, i32 0, i32 12
  %1054 = load i32, i32* %height4100, align 4
  %conv4101 = sext i32 %1054 to i64
  %1055 = load i64, i64* %nbytes, align 8
  %mul4102 = mul nsw i64 0, %1055
  %1056 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4103 = getelementptr inbounds %struct.image, %struct.image* %1056, i32 0, i32 12
  %1057 = load i32, i32* %height4103, align 4
  %conv4104 = sext i32 %1057 to i64
  %add4105 = add nsw i64 %mul4102, %conv4104
  %mul4106 = mul nsw i64 0, %add4105
  %sub4107 = sub nsw i64 %mul4106, 1
  %cmp4108 = icmp slt i64 %sub4107, 0
  br i1 %cmp4108, label %cond.true.4110, label %cond.false.4121

cond.true.4110:                                   ; preds = %cond.true.4099
  %1058 = load i64, i64* %nbytes, align 8
  %mul4111 = mul nsw i64 0, %1058
  %1059 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4112 = getelementptr inbounds %struct.image, %struct.image* %1059, i32 0, i32 12
  %1060 = load i32, i32* %height4112, align 4
  %conv4113 = sext i32 %1060 to i64
  %add4114 = add nsw i64 %mul4111, %conv4113
  %mul4115 = mul nsw i64 0, %add4114
  %add4116 = add nsw i64 %mul4115, 1
  %shl4117 = shl i64 %add4116, 62
  %sub4118 = sub nsw i64 %shl4117, 1
  %mul4119 = mul nsw i64 %sub4118, 2
  %add4120 = add nsw i64 %mul4119, 1
  br label %cond.end.4128

cond.false.4121:                                  ; preds = %cond.true.4099
  %1061 = load i64, i64* %nbytes, align 8
  %mul4122 = mul nsw i64 0, %1061
  %1062 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4123 = getelementptr inbounds %struct.image, %struct.image* %1062, i32 0, i32 12
  %1063 = load i32, i32* %height4123, align 4
  %conv4124 = sext i32 %1063 to i64
  %add4125 = add nsw i64 %mul4122, %conv4124
  %mul4126 = mul nsw i64 0, %add4125
  %sub4127 = sub nsw i64 %mul4126, 1
  br label %cond.end.4128

cond.end.4128:                                    ; preds = %cond.false.4121, %cond.true.4110
  %cond4129 = phi i64 [ %add4120, %cond.true.4110 ], [ %sub4127, %cond.false.4121 ]
  %1064 = load i64, i64* %nbytes, align 8
  %div4130 = sdiv i64 %cond4129, %1064
  %cmp4131 = icmp slt i64 %conv4101, %div4130
  br i1 %cmp4131, label %cond.true.4291, label %lor.lhs.false.4271

cond.false.4133:                                  ; preds = %cond.true.4095
  %1065 = load i64, i64* %nbytes, align 8
  %cmp4134 = icmp eq i64 %1065, -1
  br i1 %cmp4134, label %cond.true.4136, label %cond.false.4137

cond.true.4136:                                   ; preds = %cond.false.4133
  br i1 false, label %cond.true.4291, label %lor.lhs.false.4271

cond.false.4137:                                  ; preds = %cond.false.4133
  %1066 = load i64, i64* %nbytes, align 8
  %mul4138 = mul nsw i64 0, %1066
  %1067 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4139 = getelementptr inbounds %struct.image, %struct.image* %1067, i32 0, i32 12
  %1068 = load i32, i32* %height4139, align 4
  %conv4140 = sext i32 %1068 to i64
  %add4141 = add nsw i64 %mul4138, %conv4140
  %mul4142 = mul nsw i64 0, %add4141
  %sub4143 = sub nsw i64 %mul4142, 1
  %cmp4144 = icmp slt i64 %sub4143, 0
  br i1 %cmp4144, label %cond.true.4146, label %cond.false.4169

cond.true.4146:                                   ; preds = %cond.false.4137
  %1069 = load i64, i64* %nbytes, align 8
  %mul4147 = mul nsw i64 0, %1069
  %1070 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4148 = getelementptr inbounds %struct.image, %struct.image* %1070, i32 0, i32 12
  %1071 = load i32, i32* %height4148, align 4
  %conv4149 = sext i32 %1071 to i64
  %add4150 = add nsw i64 %mul4147, %conv4149
  %mul4151 = mul nsw i64 0, %add4150
  %add4152 = add nsw i64 %mul4151, 0
  %neg4153 = xor i64 %add4152, -1
  %cmp4154 = icmp eq i64 %neg4153, -1
  %conv4155 = zext i1 %cmp4154 to i32
  %sub4156 = sub nsw i32 0, %conv4155
  %conv4157 = sext i32 %sub4156 to i64
  %1072 = load i64, i64* %nbytes, align 8
  %mul4158 = mul nsw i64 0, %1072
  %1073 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4159 = getelementptr inbounds %struct.image, %struct.image* %1073, i32 0, i32 12
  %1074 = load i32, i32* %height4159, align 4
  %conv4160 = sext i32 %1074 to i64
  %add4161 = add nsw i64 %mul4158, %conv4160
  %mul4162 = mul nsw i64 0, %add4161
  %add4163 = add nsw i64 %mul4162, 1
  %shl4164 = shl i64 %add4163, 62
  %sub4165 = sub nsw i64 %shl4164, 1
  %mul4166 = mul nsw i64 %sub4165, 2
  %add4167 = add nsw i64 %mul4166, 1
  %sub4168 = sub nsw i64 %conv4157, %add4167
  br label %cond.end.4176

cond.false.4169:                                  ; preds = %cond.false.4137
  %1075 = load i64, i64* %nbytes, align 8
  %mul4170 = mul nsw i64 0, %1075
  %1076 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4171 = getelementptr inbounds %struct.image, %struct.image* %1076, i32 0, i32 12
  %1077 = load i32, i32* %height4171, align 4
  %conv4172 = sext i32 %1077 to i64
  %add4173 = add nsw i64 %mul4170, %conv4172
  %mul4174 = mul nsw i64 0, %add4173
  %add4175 = add nsw i64 %mul4174, 0
  br label %cond.end.4176

cond.end.4176:                                    ; preds = %cond.false.4169, %cond.true.4146
  %cond4177 = phi i64 [ %sub4168, %cond.true.4146 ], [ %add4175, %cond.false.4169 ]
  %1078 = load i64, i64* %nbytes, align 8
  %div4178 = sdiv i64 %cond4177, %1078
  %1079 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4179 = getelementptr inbounds %struct.image, %struct.image* %1079, i32 0, i32 12
  %1080 = load i32, i32* %height4179, align 4
  %conv4180 = sext i32 %1080 to i64
  %cmp4181 = icmp slt i64 %div4178, %conv4180
  br i1 %cmp4181, label %cond.true.4291, label %lor.lhs.false.4271

cond.false.4183:                                  ; preds = %lor.lhs.false.4092
  %1081 = load i64, i64* %nbytes, align 8
  %cmp4184 = icmp eq i64 %1081, 0
  br i1 %cmp4184, label %cond.true.4186, label %cond.false.4187

cond.true.4186:                                   ; preds = %cond.false.4183
  br i1 false, label %cond.true.4291, label %lor.lhs.false.4271

cond.false.4187:                                  ; preds = %cond.false.4183
  %1082 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4188 = getelementptr inbounds %struct.image, %struct.image* %1082, i32 0, i32 12
  %1083 = load i32, i32* %height4188, align 4
  %cmp4189 = icmp slt i32 %1083, 0
  br i1 %cmp4189, label %cond.true.4191, label %cond.false.4237

cond.true.4191:                                   ; preds = %cond.false.4187
  %1084 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4192 = getelementptr inbounds %struct.image, %struct.image* %1084, i32 0, i32 12
  %1085 = load i32, i32* %height4192, align 4
  %conv4193 = sext i32 %1085 to i64
  %1086 = load i64, i64* %nbytes, align 8
  %mul4194 = mul nsw i64 0, %1086
  %1087 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4195 = getelementptr inbounds %struct.image, %struct.image* %1087, i32 0, i32 12
  %1088 = load i32, i32* %height4195, align 4
  %conv4196 = sext i32 %1088 to i64
  %add4197 = add nsw i64 %mul4194, %conv4196
  %mul4198 = mul nsw i64 0, %add4197
  %sub4199 = sub nsw i64 %mul4198, 1
  %cmp4200 = icmp slt i64 %sub4199, 0
  br i1 %cmp4200, label %cond.true.4202, label %cond.false.4225

cond.true.4202:                                   ; preds = %cond.true.4191
  %1089 = load i64, i64* %nbytes, align 8
  %mul4203 = mul nsw i64 0, %1089
  %1090 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4204 = getelementptr inbounds %struct.image, %struct.image* %1090, i32 0, i32 12
  %1091 = load i32, i32* %height4204, align 4
  %conv4205 = sext i32 %1091 to i64
  %add4206 = add nsw i64 %mul4203, %conv4205
  %mul4207 = mul nsw i64 0, %add4206
  %add4208 = add nsw i64 %mul4207, 0
  %neg4209 = xor i64 %add4208, -1
  %cmp4210 = icmp eq i64 %neg4209, -1
  %conv4211 = zext i1 %cmp4210 to i32
  %sub4212 = sub nsw i32 0, %conv4211
  %conv4213 = sext i32 %sub4212 to i64
  %1092 = load i64, i64* %nbytes, align 8
  %mul4214 = mul nsw i64 0, %1092
  %1093 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4215 = getelementptr inbounds %struct.image, %struct.image* %1093, i32 0, i32 12
  %1094 = load i32, i32* %height4215, align 4
  %conv4216 = sext i32 %1094 to i64
  %add4217 = add nsw i64 %mul4214, %conv4216
  %mul4218 = mul nsw i64 0, %add4217
  %add4219 = add nsw i64 %mul4218, 1
  %shl4220 = shl i64 %add4219, 62
  %sub4221 = sub nsw i64 %shl4220, 1
  %mul4222 = mul nsw i64 %sub4221, 2
  %add4223 = add nsw i64 %mul4222, 1
  %sub4224 = sub nsw i64 %conv4213, %add4223
  br label %cond.end.4232

cond.false.4225:                                  ; preds = %cond.true.4191
  %1095 = load i64, i64* %nbytes, align 8
  %mul4226 = mul nsw i64 0, %1095
  %1096 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4227 = getelementptr inbounds %struct.image, %struct.image* %1096, i32 0, i32 12
  %1097 = load i32, i32* %height4227, align 4
  %conv4228 = sext i32 %1097 to i64
  %add4229 = add nsw i64 %mul4226, %conv4228
  %mul4230 = mul nsw i64 0, %add4229
  %add4231 = add nsw i64 %mul4230, 0
  br label %cond.end.4232

cond.end.4232:                                    ; preds = %cond.false.4225, %cond.true.4202
  %cond4233 = phi i64 [ %sub4224, %cond.true.4202 ], [ %add4231, %cond.false.4225 ]
  %1098 = load i64, i64* %nbytes, align 8
  %div4234 = sdiv i64 %cond4233, %1098
  %cmp4235 = icmp slt i64 %conv4193, %div4234
  br i1 %cmp4235, label %cond.true.4291, label %lor.lhs.false.4271

cond.false.4237:                                  ; preds = %cond.false.4187
  %1099 = load i64, i64* %nbytes, align 8
  %mul4238 = mul nsw i64 0, %1099
  %1100 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4239 = getelementptr inbounds %struct.image, %struct.image* %1100, i32 0, i32 12
  %1101 = load i32, i32* %height4239, align 4
  %conv4240 = sext i32 %1101 to i64
  %add4241 = add nsw i64 %mul4238, %conv4240
  %mul4242 = mul nsw i64 0, %add4241
  %sub4243 = sub nsw i64 %mul4242, 1
  %cmp4244 = icmp slt i64 %sub4243, 0
  br i1 %cmp4244, label %cond.true.4246, label %cond.false.4257

cond.true.4246:                                   ; preds = %cond.false.4237
  %1102 = load i64, i64* %nbytes, align 8
  %mul4247 = mul nsw i64 0, %1102
  %1103 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4248 = getelementptr inbounds %struct.image, %struct.image* %1103, i32 0, i32 12
  %1104 = load i32, i32* %height4248, align 4
  %conv4249 = sext i32 %1104 to i64
  %add4250 = add nsw i64 %mul4247, %conv4249
  %mul4251 = mul nsw i64 0, %add4250
  %add4252 = add nsw i64 %mul4251, 1
  %shl4253 = shl i64 %add4252, 62
  %sub4254 = sub nsw i64 %shl4253, 1
  %mul4255 = mul nsw i64 %sub4254, 2
  %add4256 = add nsw i64 %mul4255, 1
  br label %cond.end.4264

cond.false.4257:                                  ; preds = %cond.false.4237
  %1105 = load i64, i64* %nbytes, align 8
  %mul4258 = mul nsw i64 0, %1105
  %1106 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4259 = getelementptr inbounds %struct.image, %struct.image* %1106, i32 0, i32 12
  %1107 = load i32, i32* %height4259, align 4
  %conv4260 = sext i32 %1107 to i64
  %add4261 = add nsw i64 %mul4258, %conv4260
  %mul4262 = mul nsw i64 0, %add4261
  %sub4263 = sub nsw i64 %mul4262, 1
  br label %cond.end.4264

cond.end.4264:                                    ; preds = %cond.false.4257, %cond.true.4246
  %cond4265 = phi i64 [ %add4256, %cond.true.4246 ], [ %sub4263, %cond.false.4257 ]
  %1108 = load i64, i64* %nbytes, align 8
  %div4266 = sdiv i64 %cond4265, %1108
  %1109 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4267 = getelementptr inbounds %struct.image, %struct.image* %1109, i32 0, i32 12
  %1110 = load i32, i32* %height4267, align 4
  %conv4268 = sext i32 %1110 to i64
  %cmp4269 = icmp slt i64 %div4266, %conv4268
  br i1 %cmp4269, label %cond.true.4291, label %lor.lhs.false.4271

lor.lhs.false.4271:                               ; preds = %cond.end.4264, %cond.end.4232, %cond.true.4186, %cond.end.4176, %cond.true.4136, %cond.end.4128
  %1111 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4272 = getelementptr inbounds %struct.image, %struct.image* %1111, i32 0, i32 12
  %1112 = load i32, i32* %height4272, align 4
  %conv4273 = sext i32 %1112 to i64
  %1113 = load i64, i64* %nbytes, align 8
  %mul4274 = mul nsw i64 %conv4273, %1113
  %mul4275 = mul nsw i64 0, %mul4274
  %sub4276 = sub nsw i64 %mul4275, 1
  %cmp4277 = icmp slt i64 %sub4276, 0
  br i1 %cmp4277, label %land.lhs.true.4279, label %lor.lhs.false.4285

land.lhs.true.4279:                               ; preds = %lor.lhs.false.4271
  %1114 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4280 = getelementptr inbounds %struct.image, %struct.image* %1114, i32 0, i32 12
  %1115 = load i32, i32* %height4280, align 4
  %conv4281 = sext i32 %1115 to i64
  %1116 = load i64, i64* %nbytes, align 8
  %mul4282 = mul nsw i64 %conv4281, %1116
  %cmp4283 = icmp slt i64 %mul4282, -32768
  br i1 %cmp4283, label %cond.true.4291, label %lor.lhs.false.4285

lor.lhs.false.4285:                               ; preds = %land.lhs.true.4279, %lor.lhs.false.4271
  %1117 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4286 = getelementptr inbounds %struct.image, %struct.image* %1117, i32 0, i32 12
  %1118 = load i32, i32* %height4286, align 4
  %conv4287 = sext i32 %1118 to i64
  %1119 = load i64, i64* %nbytes, align 8
  %mul4288 = mul nsw i64 %conv4287, %1119
  %cmp4289 = icmp slt i64 32767, %mul4288
  br i1 %cmp4289, label %cond.true.4291, label %cond.false.4323

cond.true.4291:                                   ; preds = %lor.lhs.false.4285, %land.lhs.true.4279, %cond.end.4264, %cond.end.4232, %cond.true.4186, %cond.end.4176, %cond.true.4136, %cond.end.4128, %land.lhs.true.4088, %land.lhs.true.4082
  %1120 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4292 = getelementptr inbounds %struct.image, %struct.image* %1120, i32 0, i32 12
  %1121 = load i32, i32* %height4292, align 4
  %conv4293 = trunc i32 %1121 to i16
  %conv4294 = zext i16 %conv4293 to i32
  %1122 = load i64, i64* %nbytes, align 8
  %conv4295 = trunc i64 %1122 to i16
  %conv4296 = zext i16 %conv4295 to i32
  %mul4297 = mul nsw i32 %conv4294, %conv4296
  %cmp4298 = icmp sle i32 %mul4297, 32767
  br i1 %cmp4298, label %cond.true.4300, label %cond.false.4309

cond.true.4300:                                   ; preds = %cond.true.4291
  %1123 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4301 = getelementptr inbounds %struct.image, %struct.image* %1123, i32 0, i32 12
  %1124 = load i32, i32* %height4301, align 4
  %conv4302 = trunc i32 %1124 to i16
  %conv4303 = zext i16 %conv4302 to i32
  %1125 = load i64, i64* %nbytes, align 8
  %conv4304 = trunc i64 %1125 to i16
  %conv4305 = zext i16 %conv4304 to i32
  %mul4306 = mul nsw i32 %conv4303, %conv4305
  %conv4307 = trunc i32 %mul4306 to i16
  %conv4308 = sext i16 %conv4307 to i32
  br label %cond.end.4320

cond.false.4309:                                  ; preds = %cond.true.4291
  %1126 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4310 = getelementptr inbounds %struct.image, %struct.image* %1126, i32 0, i32 12
  %1127 = load i32, i32* %height4310, align 4
  %conv4311 = trunc i32 %1127 to i16
  %conv4312 = zext i16 %conv4311 to i32
  %1128 = load i64, i64* %nbytes, align 8
  %conv4313 = trunc i64 %1128 to i16
  %conv4314 = zext i16 %conv4313 to i32
  %mul4315 = mul nsw i32 %conv4312, %conv4314
  %sub4316 = sub nsw i32 %mul4315, -32768
  %conv4317 = trunc i32 %sub4316 to i16
  %conv4318 = sext i16 %conv4317 to i32
  %add4319 = add nsw i32 %conv4318, -32768
  br label %cond.end.4320

cond.end.4320:                                    ; preds = %cond.false.4309, %cond.true.4300
  %cond4321 = phi i32 [ %conv4308, %cond.true.4300 ], [ %add4319, %cond.false.4309 ]
  %conv4322 = sext i32 %cond4321 to i64
  store i64 %conv4322, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.4323:                                  ; preds = %lor.lhs.false.4285
  %1129 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4324 = getelementptr inbounds %struct.image, %struct.image* %1129, i32 0, i32 12
  %1130 = load i32, i32* %height4324, align 4
  %conv4325 = trunc i32 %1130 to i16
  %conv4326 = zext i16 %conv4325 to i32
  %1131 = load i64, i64* %nbytes, align 8
  %conv4327 = trunc i64 %1131 to i16
  %conv4328 = zext i16 %conv4327 to i32
  %mul4329 = mul nsw i32 %conv4326, %conv4328
  %cmp4330 = icmp sle i32 %mul4329, 32767
  br i1 %cmp4330, label %cond.true.4332, label %cond.false.4341

cond.true.4332:                                   ; preds = %cond.false.4323
  %1132 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4333 = getelementptr inbounds %struct.image, %struct.image* %1132, i32 0, i32 12
  %1133 = load i32, i32* %height4333, align 4
  %conv4334 = trunc i32 %1133 to i16
  %conv4335 = zext i16 %conv4334 to i32
  %1134 = load i64, i64* %nbytes, align 8
  %conv4336 = trunc i64 %1134 to i16
  %conv4337 = zext i16 %conv4336 to i32
  %mul4338 = mul nsw i32 %conv4335, %conv4337
  %conv4339 = trunc i32 %mul4338 to i16
  %conv4340 = sext i16 %conv4339 to i32
  br label %cond.end.4352

cond.false.4341:                                  ; preds = %cond.false.4323
  %1135 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4342 = getelementptr inbounds %struct.image, %struct.image* %1135, i32 0, i32 12
  %1136 = load i32, i32* %height4342, align 4
  %conv4343 = trunc i32 %1136 to i16
  %conv4344 = zext i16 %conv4343 to i32
  %1137 = load i64, i64* %nbytes, align 8
  %conv4345 = trunc i64 %1137 to i16
  %conv4346 = zext i16 %conv4345 to i32
  %mul4347 = mul nsw i32 %conv4344, %conv4346
  %sub4348 = sub nsw i32 %mul4347, -32768
  %conv4349 = trunc i32 %sub4348 to i16
  %conv4350 = sext i16 %conv4349 to i32
  %add4351 = add nsw i32 %conv4350, -32768
  br label %cond.end.4352

cond.end.4352:                                    ; preds = %cond.false.4341, %cond.true.4332
  %cond4353 = phi i32 [ %conv4340, %cond.true.4332 ], [ %add4351, %cond.false.4341 ]
  %conv4354 = sext i32 %cond4353 to i64
  store i64 %conv4354, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.4355:                                  ; preds = %cond.false.3623
  br i1 false, label %cond.true.4356, label %cond.false.4947

cond.true.4356:                                   ; preds = %cond.false.4355
  br i1 false, label %cond.true.4357, label %cond.false.4653

cond.true.4357:                                   ; preds = %cond.true.4356
  %1138 = load i64, i64* %nbytes, align 8
  %conv4358 = trunc i64 %1138 to i32
  %mul4359 = mul nsw i32 0, %conv4358
  %1139 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4360 = getelementptr inbounds %struct.image, %struct.image* %1139, i32 0, i32 12
  %1140 = load i32, i32* %height4360, align 4
  %add4361 = add nsw i32 %mul4359, %1140
  %mul4362 = mul nsw i32 0, %add4361
  %sub4363 = sub nsw i32 %mul4362, 1
  %cmp4364 = icmp slt i32 %sub4363, 0
  br i1 %cmp4364, label %cond.true.4366, label %cond.false.4388

cond.true.4366:                                   ; preds = %cond.true.4357
  %1141 = load i64, i64* %nbytes, align 8
  %conv4367 = trunc i64 %1141 to i32
  %mul4368 = mul nsw i32 0, %conv4367
  %1142 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4369 = getelementptr inbounds %struct.image, %struct.image* %1142, i32 0, i32 12
  %1143 = load i32, i32* %height4369, align 4
  %add4370 = add nsw i32 %mul4368, %1143
  %mul4371 = mul nsw i32 0, %add4370
  %add4372 = add nsw i32 %mul4371, 0
  %neg4373 = xor i32 %add4372, -1
  %cmp4374 = icmp eq i32 %neg4373, -1
  %conv4375 = zext i1 %cmp4374 to i32
  %sub4376 = sub nsw i32 0, %conv4375
  %1144 = load i64, i64* %nbytes, align 8
  %conv4377 = trunc i64 %1144 to i32
  %mul4378 = mul nsw i32 0, %conv4377
  %1145 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4379 = getelementptr inbounds %struct.image, %struct.image* %1145, i32 0, i32 12
  %1146 = load i32, i32* %height4379, align 4
  %add4380 = add nsw i32 %mul4378, %1146
  %mul4381 = mul nsw i32 0, %add4380
  %add4382 = add nsw i32 %mul4381, 1
  %shl4383 = shl i32 %add4382, 30
  %sub4384 = sub nsw i32 %shl4383, 1
  %mul4385 = mul nsw i32 %sub4384, 2
  %add4386 = add nsw i32 %mul4385, 1
  %sub4387 = sub nsw i32 %sub4376, %add4386
  br label %cond.end.4395

cond.false.4388:                                  ; preds = %cond.true.4357
  %1147 = load i64, i64* %nbytes, align 8
  %conv4389 = trunc i64 %1147 to i32
  %mul4390 = mul nsw i32 0, %conv4389
  %1148 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4391 = getelementptr inbounds %struct.image, %struct.image* %1148, i32 0, i32 12
  %1149 = load i32, i32* %height4391, align 4
  %add4392 = add nsw i32 %mul4390, %1149
  %mul4393 = mul nsw i32 0, %add4392
  %add4394 = add nsw i32 %mul4393, 0
  br label %cond.end.4395

cond.end.4395:                                    ; preds = %cond.false.4388, %cond.true.4366
  %cond4396 = phi i32 [ %sub4387, %cond.true.4366 ], [ %add4394, %cond.false.4388 ]
  %cmp4397 = icmp eq i32 %cond4396, 0
  br i1 %cmp4397, label %land.lhs.true.4399, label %lor.lhs.false.4415

land.lhs.true.4399:                               ; preds = %cond.end.4395
  %1150 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4400 = getelementptr inbounds %struct.image, %struct.image* %1150, i32 0, i32 12
  %1151 = load i32, i32* %height4400, align 4
  %cmp4401 = icmp slt i32 %1151, 0
  br i1 %cmp4401, label %land.lhs.true.4403, label %lor.lhs.false.4407

land.lhs.true.4403:                               ; preds = %land.lhs.true.4399
  %1152 = load i64, i64* %nbytes, align 8
  %conv4404 = trunc i64 %1152 to i32
  %cmp4405 = icmp slt i32 0, %conv4404
  br i1 %cmp4405, label %cond.true.4615, label %lor.lhs.false.4407

lor.lhs.false.4407:                               ; preds = %land.lhs.true.4403, %land.lhs.true.4399
  %1153 = load i64, i64* %nbytes, align 8
  %conv4408 = trunc i64 %1153 to i32
  %cmp4409 = icmp slt i32 %conv4408, 0
  br i1 %cmp4409, label %land.lhs.true.4411, label %lor.lhs.false.4415

land.lhs.true.4411:                               ; preds = %lor.lhs.false.4407
  %1154 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4412 = getelementptr inbounds %struct.image, %struct.image* %1154, i32 0, i32 12
  %1155 = load i32, i32* %height4412, align 4
  %cmp4413 = icmp slt i32 0, %1155
  br i1 %cmp4413, label %cond.true.4615, label %lor.lhs.false.4415

lor.lhs.false.4415:                               ; preds = %land.lhs.true.4411, %lor.lhs.false.4407, %cond.end.4395
  %1156 = load i64, i64* %nbytes, align 8
  %conv4416 = trunc i64 %1156 to i32
  %cmp4417 = icmp slt i32 %conv4416, 0
  br i1 %cmp4417, label %cond.true.4419, label %cond.false.4507

cond.true.4419:                                   ; preds = %lor.lhs.false.4415
  %1157 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4420 = getelementptr inbounds %struct.image, %struct.image* %1157, i32 0, i32 12
  %1158 = load i32, i32* %height4420, align 4
  %cmp4421 = icmp slt i32 %1158, 0
  br i1 %cmp4421, label %cond.true.4423, label %cond.false.4457

cond.true.4423:                                   ; preds = %cond.true.4419
  %1159 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4424 = getelementptr inbounds %struct.image, %struct.image* %1159, i32 0, i32 12
  %1160 = load i32, i32* %height4424, align 4
  %1161 = load i64, i64* %nbytes, align 8
  %conv4425 = trunc i64 %1161 to i32
  %mul4426 = mul nsw i32 0, %conv4425
  %1162 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4427 = getelementptr inbounds %struct.image, %struct.image* %1162, i32 0, i32 12
  %1163 = load i32, i32* %height4427, align 4
  %add4428 = add nsw i32 %mul4426, %1163
  %mul4429 = mul nsw i32 0, %add4428
  %sub4430 = sub nsw i32 %mul4429, 1
  %cmp4431 = icmp slt i32 %sub4430, 0
  br i1 %cmp4431, label %cond.true.4433, label %cond.false.4444

cond.true.4433:                                   ; preds = %cond.true.4423
  %1164 = load i64, i64* %nbytes, align 8
  %conv4434 = trunc i64 %1164 to i32
  %mul4435 = mul nsw i32 0, %conv4434
  %1165 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4436 = getelementptr inbounds %struct.image, %struct.image* %1165, i32 0, i32 12
  %1166 = load i32, i32* %height4436, align 4
  %add4437 = add nsw i32 %mul4435, %1166
  %mul4438 = mul nsw i32 0, %add4437
  %add4439 = add nsw i32 %mul4438, 1
  %shl4440 = shl i32 %add4439, 30
  %sub4441 = sub nsw i32 %shl4440, 1
  %mul4442 = mul nsw i32 %sub4441, 2
  %add4443 = add nsw i32 %mul4442, 1
  br label %cond.end.4451

cond.false.4444:                                  ; preds = %cond.true.4423
  %1167 = load i64, i64* %nbytes, align 8
  %conv4445 = trunc i64 %1167 to i32
  %mul4446 = mul nsw i32 0, %conv4445
  %1168 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4447 = getelementptr inbounds %struct.image, %struct.image* %1168, i32 0, i32 12
  %1169 = load i32, i32* %height4447, align 4
  %add4448 = add nsw i32 %mul4446, %1169
  %mul4449 = mul nsw i32 0, %add4448
  %sub4450 = sub nsw i32 %mul4449, 1
  br label %cond.end.4451

cond.end.4451:                                    ; preds = %cond.false.4444, %cond.true.4433
  %cond4452 = phi i32 [ %add4443, %cond.true.4433 ], [ %sub4450, %cond.false.4444 ]
  %1170 = load i64, i64* %nbytes, align 8
  %conv4453 = trunc i64 %1170 to i32
  %div4454 = sdiv i32 %cond4452, %conv4453
  %cmp4455 = icmp slt i32 %1160, %div4454
  br i1 %cmp4455, label %cond.true.4615, label %lor.lhs.false.4595

cond.false.4457:                                  ; preds = %cond.true.4419
  %1171 = load i64, i64* %nbytes, align 8
  %conv4458 = trunc i64 %1171 to i32
  %cmp4459 = icmp eq i32 %conv4458, -1
  br i1 %cmp4459, label %cond.true.4461, label %cond.false.4462

cond.true.4461:                                   ; preds = %cond.false.4457
  br i1 false, label %cond.true.4615, label %lor.lhs.false.4595

cond.false.4462:                                  ; preds = %cond.false.4457
  %1172 = load i64, i64* %nbytes, align 8
  %conv4463 = trunc i64 %1172 to i32
  %mul4464 = mul nsw i32 0, %conv4463
  %1173 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4465 = getelementptr inbounds %struct.image, %struct.image* %1173, i32 0, i32 12
  %1174 = load i32, i32* %height4465, align 4
  %add4466 = add nsw i32 %mul4464, %1174
  %mul4467 = mul nsw i32 0, %add4466
  %sub4468 = sub nsw i32 %mul4467, 1
  %cmp4469 = icmp slt i32 %sub4468, 0
  br i1 %cmp4469, label %cond.true.4471, label %cond.false.4493

cond.true.4471:                                   ; preds = %cond.false.4462
  %1175 = load i64, i64* %nbytes, align 8
  %conv4472 = trunc i64 %1175 to i32
  %mul4473 = mul nsw i32 0, %conv4472
  %1176 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4474 = getelementptr inbounds %struct.image, %struct.image* %1176, i32 0, i32 12
  %1177 = load i32, i32* %height4474, align 4
  %add4475 = add nsw i32 %mul4473, %1177
  %mul4476 = mul nsw i32 0, %add4475
  %add4477 = add nsw i32 %mul4476, 0
  %neg4478 = xor i32 %add4477, -1
  %cmp4479 = icmp eq i32 %neg4478, -1
  %conv4480 = zext i1 %cmp4479 to i32
  %sub4481 = sub nsw i32 0, %conv4480
  %1178 = load i64, i64* %nbytes, align 8
  %conv4482 = trunc i64 %1178 to i32
  %mul4483 = mul nsw i32 0, %conv4482
  %1179 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4484 = getelementptr inbounds %struct.image, %struct.image* %1179, i32 0, i32 12
  %1180 = load i32, i32* %height4484, align 4
  %add4485 = add nsw i32 %mul4483, %1180
  %mul4486 = mul nsw i32 0, %add4485
  %add4487 = add nsw i32 %mul4486, 1
  %shl4488 = shl i32 %add4487, 30
  %sub4489 = sub nsw i32 %shl4488, 1
  %mul4490 = mul nsw i32 %sub4489, 2
  %add4491 = add nsw i32 %mul4490, 1
  %sub4492 = sub nsw i32 %sub4481, %add4491
  br label %cond.end.4500

cond.false.4493:                                  ; preds = %cond.false.4462
  %1181 = load i64, i64* %nbytes, align 8
  %conv4494 = trunc i64 %1181 to i32
  %mul4495 = mul nsw i32 0, %conv4494
  %1182 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4496 = getelementptr inbounds %struct.image, %struct.image* %1182, i32 0, i32 12
  %1183 = load i32, i32* %height4496, align 4
  %add4497 = add nsw i32 %mul4495, %1183
  %mul4498 = mul nsw i32 0, %add4497
  %add4499 = add nsw i32 %mul4498, 0
  br label %cond.end.4500

cond.end.4500:                                    ; preds = %cond.false.4493, %cond.true.4471
  %cond4501 = phi i32 [ %sub4492, %cond.true.4471 ], [ %add4499, %cond.false.4493 ]
  %1184 = load i64, i64* %nbytes, align 8
  %conv4502 = trunc i64 %1184 to i32
  %div4503 = sdiv i32 %cond4501, %conv4502
  %1185 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4504 = getelementptr inbounds %struct.image, %struct.image* %1185, i32 0, i32 12
  %1186 = load i32, i32* %height4504, align 4
  %cmp4505 = icmp slt i32 %div4503, %1186
  br i1 %cmp4505, label %cond.true.4615, label %lor.lhs.false.4595

cond.false.4507:                                  ; preds = %lor.lhs.false.4415
  %1187 = load i64, i64* %nbytes, align 8
  %conv4508 = trunc i64 %1187 to i32
  %cmp4509 = icmp eq i32 %conv4508, 0
  br i1 %cmp4509, label %cond.true.4511, label %cond.false.4512

cond.true.4511:                                   ; preds = %cond.false.4507
  br i1 false, label %cond.true.4615, label %lor.lhs.false.4595

cond.false.4512:                                  ; preds = %cond.false.4507
  %1188 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4513 = getelementptr inbounds %struct.image, %struct.image* %1188, i32 0, i32 12
  %1189 = load i32, i32* %height4513, align 4
  %cmp4514 = icmp slt i32 %1189, 0
  br i1 %cmp4514, label %cond.true.4516, label %cond.false.4561

cond.true.4516:                                   ; preds = %cond.false.4512
  %1190 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4517 = getelementptr inbounds %struct.image, %struct.image* %1190, i32 0, i32 12
  %1191 = load i32, i32* %height4517, align 4
  %1192 = load i64, i64* %nbytes, align 8
  %conv4518 = trunc i64 %1192 to i32
  %mul4519 = mul nsw i32 0, %conv4518
  %1193 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4520 = getelementptr inbounds %struct.image, %struct.image* %1193, i32 0, i32 12
  %1194 = load i32, i32* %height4520, align 4
  %add4521 = add nsw i32 %mul4519, %1194
  %mul4522 = mul nsw i32 0, %add4521
  %sub4523 = sub nsw i32 %mul4522, 1
  %cmp4524 = icmp slt i32 %sub4523, 0
  br i1 %cmp4524, label %cond.true.4526, label %cond.false.4548

cond.true.4526:                                   ; preds = %cond.true.4516
  %1195 = load i64, i64* %nbytes, align 8
  %conv4527 = trunc i64 %1195 to i32
  %mul4528 = mul nsw i32 0, %conv4527
  %1196 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4529 = getelementptr inbounds %struct.image, %struct.image* %1196, i32 0, i32 12
  %1197 = load i32, i32* %height4529, align 4
  %add4530 = add nsw i32 %mul4528, %1197
  %mul4531 = mul nsw i32 0, %add4530
  %add4532 = add nsw i32 %mul4531, 0
  %neg4533 = xor i32 %add4532, -1
  %cmp4534 = icmp eq i32 %neg4533, -1
  %conv4535 = zext i1 %cmp4534 to i32
  %sub4536 = sub nsw i32 0, %conv4535
  %1198 = load i64, i64* %nbytes, align 8
  %conv4537 = trunc i64 %1198 to i32
  %mul4538 = mul nsw i32 0, %conv4537
  %1199 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4539 = getelementptr inbounds %struct.image, %struct.image* %1199, i32 0, i32 12
  %1200 = load i32, i32* %height4539, align 4
  %add4540 = add nsw i32 %mul4538, %1200
  %mul4541 = mul nsw i32 0, %add4540
  %add4542 = add nsw i32 %mul4541, 1
  %shl4543 = shl i32 %add4542, 30
  %sub4544 = sub nsw i32 %shl4543, 1
  %mul4545 = mul nsw i32 %sub4544, 2
  %add4546 = add nsw i32 %mul4545, 1
  %sub4547 = sub nsw i32 %sub4536, %add4546
  br label %cond.end.4555

cond.false.4548:                                  ; preds = %cond.true.4516
  %1201 = load i64, i64* %nbytes, align 8
  %conv4549 = trunc i64 %1201 to i32
  %mul4550 = mul nsw i32 0, %conv4549
  %1202 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4551 = getelementptr inbounds %struct.image, %struct.image* %1202, i32 0, i32 12
  %1203 = load i32, i32* %height4551, align 4
  %add4552 = add nsw i32 %mul4550, %1203
  %mul4553 = mul nsw i32 0, %add4552
  %add4554 = add nsw i32 %mul4553, 0
  br label %cond.end.4555

cond.end.4555:                                    ; preds = %cond.false.4548, %cond.true.4526
  %cond4556 = phi i32 [ %sub4547, %cond.true.4526 ], [ %add4554, %cond.false.4548 ]
  %1204 = load i64, i64* %nbytes, align 8
  %conv4557 = trunc i64 %1204 to i32
  %div4558 = sdiv i32 %cond4556, %conv4557
  %cmp4559 = icmp slt i32 %1191, %div4558
  br i1 %cmp4559, label %cond.true.4615, label %lor.lhs.false.4595

cond.false.4561:                                  ; preds = %cond.false.4512
  %1205 = load i64, i64* %nbytes, align 8
  %conv4562 = trunc i64 %1205 to i32
  %mul4563 = mul nsw i32 0, %conv4562
  %1206 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4564 = getelementptr inbounds %struct.image, %struct.image* %1206, i32 0, i32 12
  %1207 = load i32, i32* %height4564, align 4
  %add4565 = add nsw i32 %mul4563, %1207
  %mul4566 = mul nsw i32 0, %add4565
  %sub4567 = sub nsw i32 %mul4566, 1
  %cmp4568 = icmp slt i32 %sub4567, 0
  br i1 %cmp4568, label %cond.true.4570, label %cond.false.4581

cond.true.4570:                                   ; preds = %cond.false.4561
  %1208 = load i64, i64* %nbytes, align 8
  %conv4571 = trunc i64 %1208 to i32
  %mul4572 = mul nsw i32 0, %conv4571
  %1209 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4573 = getelementptr inbounds %struct.image, %struct.image* %1209, i32 0, i32 12
  %1210 = load i32, i32* %height4573, align 4
  %add4574 = add nsw i32 %mul4572, %1210
  %mul4575 = mul nsw i32 0, %add4574
  %add4576 = add nsw i32 %mul4575, 1
  %shl4577 = shl i32 %add4576, 30
  %sub4578 = sub nsw i32 %shl4577, 1
  %mul4579 = mul nsw i32 %sub4578, 2
  %add4580 = add nsw i32 %mul4579, 1
  br label %cond.end.4588

cond.false.4581:                                  ; preds = %cond.false.4561
  %1211 = load i64, i64* %nbytes, align 8
  %conv4582 = trunc i64 %1211 to i32
  %mul4583 = mul nsw i32 0, %conv4582
  %1212 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4584 = getelementptr inbounds %struct.image, %struct.image* %1212, i32 0, i32 12
  %1213 = load i32, i32* %height4584, align 4
  %add4585 = add nsw i32 %mul4583, %1213
  %mul4586 = mul nsw i32 0, %add4585
  %sub4587 = sub nsw i32 %mul4586, 1
  br label %cond.end.4588

cond.end.4588:                                    ; preds = %cond.false.4581, %cond.true.4570
  %cond4589 = phi i32 [ %add4580, %cond.true.4570 ], [ %sub4587, %cond.false.4581 ]
  %1214 = load i64, i64* %nbytes, align 8
  %conv4590 = trunc i64 %1214 to i32
  %div4591 = sdiv i32 %cond4589, %conv4590
  %1215 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4592 = getelementptr inbounds %struct.image, %struct.image* %1215, i32 0, i32 12
  %1216 = load i32, i32* %height4592, align 4
  %cmp4593 = icmp slt i32 %div4591, %1216
  br i1 %cmp4593, label %cond.true.4615, label %lor.lhs.false.4595

lor.lhs.false.4595:                               ; preds = %cond.end.4588, %cond.end.4555, %cond.true.4511, %cond.end.4500, %cond.true.4461, %cond.end.4451
  %1217 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4596 = getelementptr inbounds %struct.image, %struct.image* %1217, i32 0, i32 12
  %1218 = load i32, i32* %height4596, align 4
  %1219 = load i64, i64* %nbytes, align 8
  %conv4597 = trunc i64 %1219 to i32
  %mul4598 = mul nsw i32 %1218, %conv4597
  %mul4599 = mul nsw i32 0, %mul4598
  %sub4600 = sub nsw i32 %mul4599, 1
  %cmp4601 = icmp slt i32 %sub4600, 0
  br i1 %cmp4601, label %land.lhs.true.4603, label %lor.lhs.false.4609

land.lhs.true.4603:                               ; preds = %lor.lhs.false.4595
  %1220 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4604 = getelementptr inbounds %struct.image, %struct.image* %1220, i32 0, i32 12
  %1221 = load i32, i32* %height4604, align 4
  %1222 = load i64, i64* %nbytes, align 8
  %conv4605 = trunc i64 %1222 to i32
  %mul4606 = mul nsw i32 %1221, %conv4605
  %cmp4607 = icmp slt i32 %mul4606, -2147483648
  br i1 %cmp4607, label %cond.true.4615, label %lor.lhs.false.4609

lor.lhs.false.4609:                               ; preds = %land.lhs.true.4603, %lor.lhs.false.4595
  %1223 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4610 = getelementptr inbounds %struct.image, %struct.image* %1223, i32 0, i32 12
  %1224 = load i32, i32* %height4610, align 4
  %1225 = load i64, i64* %nbytes, align 8
  %conv4611 = trunc i64 %1225 to i32
  %mul4612 = mul nsw i32 %1224, %conv4611
  %cmp4613 = icmp slt i32 2147483647, %mul4612
  br i1 %cmp4613, label %cond.true.4615, label %cond.false.4634

cond.true.4615:                                   ; preds = %lor.lhs.false.4609, %land.lhs.true.4603, %cond.end.4588, %cond.end.4555, %cond.true.4511, %cond.end.4500, %cond.true.4461, %cond.end.4451, %land.lhs.true.4411, %land.lhs.true.4403
  %1226 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4616 = getelementptr inbounds %struct.image, %struct.image* %1226, i32 0, i32 12
  %1227 = load i32, i32* %height4616, align 4
  %1228 = load i64, i64* %nbytes, align 8
  %conv4617 = trunc i64 %1228 to i32
  %mul4618 = mul i32 %1227, %conv4617
  %cmp4619 = icmp ule i32 %mul4618, 2147483647
  br i1 %cmp4619, label %cond.true.4621, label %cond.false.4625

cond.true.4621:                                   ; preds = %cond.true.4615
  %1229 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4622 = getelementptr inbounds %struct.image, %struct.image* %1229, i32 0, i32 12
  %1230 = load i32, i32* %height4622, align 4
  %1231 = load i64, i64* %nbytes, align 8
  %conv4623 = trunc i64 %1231 to i32
  %mul4624 = mul i32 %1230, %conv4623
  br label %cond.end.4631

cond.false.4625:                                  ; preds = %cond.true.4615
  %1232 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4626 = getelementptr inbounds %struct.image, %struct.image* %1232, i32 0, i32 12
  %1233 = load i32, i32* %height4626, align 4
  %1234 = load i64, i64* %nbytes, align 8
  %conv4627 = trunc i64 %1234 to i32
  %mul4628 = mul i32 %1233, %conv4627
  %sub4629 = sub i32 %mul4628, -2147483648
  %add4630 = add nsw i32 %sub4629, -2147483648
  br label %cond.end.4631

cond.end.4631:                                    ; preds = %cond.false.4625, %cond.true.4621
  %cond4632 = phi i32 [ %mul4624, %cond.true.4621 ], [ %add4630, %cond.false.4625 ]
  %conv4633 = sext i32 %cond4632 to i64
  store i64 %conv4633, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.4634:                                  ; preds = %lor.lhs.false.4609
  %1235 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4635 = getelementptr inbounds %struct.image, %struct.image* %1235, i32 0, i32 12
  %1236 = load i32, i32* %height4635, align 4
  %1237 = load i64, i64* %nbytes, align 8
  %conv4636 = trunc i64 %1237 to i32
  %mul4637 = mul i32 %1236, %conv4636
  %cmp4638 = icmp ule i32 %mul4637, 2147483647
  br i1 %cmp4638, label %cond.true.4640, label %cond.false.4644

cond.true.4640:                                   ; preds = %cond.false.4634
  %1238 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4641 = getelementptr inbounds %struct.image, %struct.image* %1238, i32 0, i32 12
  %1239 = load i32, i32* %height4641, align 4
  %1240 = load i64, i64* %nbytes, align 8
  %conv4642 = trunc i64 %1240 to i32
  %mul4643 = mul i32 %1239, %conv4642
  br label %cond.end.4650

cond.false.4644:                                  ; preds = %cond.false.4634
  %1241 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4645 = getelementptr inbounds %struct.image, %struct.image* %1241, i32 0, i32 12
  %1242 = load i32, i32* %height4645, align 4
  %1243 = load i64, i64* %nbytes, align 8
  %conv4646 = trunc i64 %1243 to i32
  %mul4647 = mul i32 %1242, %conv4646
  %sub4648 = sub i32 %mul4647, -2147483648
  %add4649 = add nsw i32 %sub4648, -2147483648
  br label %cond.end.4650

cond.end.4650:                                    ; preds = %cond.false.4644, %cond.true.4640
  %cond4651 = phi i32 [ %mul4643, %cond.true.4640 ], [ %add4649, %cond.false.4644 ]
  %conv4652 = sext i32 %cond4651 to i64
  store i64 %conv4652, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.4653:                                  ; preds = %cond.true.4356
  %1244 = load i64, i64* %nbytes, align 8
  %mul4654 = mul nsw i64 0, %1244
  %1245 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4655 = getelementptr inbounds %struct.image, %struct.image* %1245, i32 0, i32 12
  %1246 = load i32, i32* %height4655, align 4
  %conv4656 = sext i32 %1246 to i64
  %add4657 = add nsw i64 %mul4654, %conv4656
  %mul4658 = mul nsw i64 0, %add4657
  %sub4659 = sub nsw i64 %mul4658, 1
  %cmp4660 = icmp slt i64 %sub4659, 0
  br i1 %cmp4660, label %cond.true.4662, label %cond.false.4685

cond.true.4662:                                   ; preds = %cond.false.4653
  %1247 = load i64, i64* %nbytes, align 8
  %mul4663 = mul nsw i64 0, %1247
  %1248 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4664 = getelementptr inbounds %struct.image, %struct.image* %1248, i32 0, i32 12
  %1249 = load i32, i32* %height4664, align 4
  %conv4665 = sext i32 %1249 to i64
  %add4666 = add nsw i64 %mul4663, %conv4665
  %mul4667 = mul nsw i64 0, %add4666
  %add4668 = add nsw i64 %mul4667, 0
  %neg4669 = xor i64 %add4668, -1
  %cmp4670 = icmp eq i64 %neg4669, -1
  %conv4671 = zext i1 %cmp4670 to i32
  %sub4672 = sub nsw i32 0, %conv4671
  %conv4673 = sext i32 %sub4672 to i64
  %1250 = load i64, i64* %nbytes, align 8
  %mul4674 = mul nsw i64 0, %1250
  %1251 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4675 = getelementptr inbounds %struct.image, %struct.image* %1251, i32 0, i32 12
  %1252 = load i32, i32* %height4675, align 4
  %conv4676 = sext i32 %1252 to i64
  %add4677 = add nsw i64 %mul4674, %conv4676
  %mul4678 = mul nsw i64 0, %add4677
  %add4679 = add nsw i64 %mul4678, 1
  %shl4680 = shl i64 %add4679, 62
  %sub4681 = sub nsw i64 %shl4680, 1
  %mul4682 = mul nsw i64 %sub4681, 2
  %add4683 = add nsw i64 %mul4682, 1
  %sub4684 = sub nsw i64 %conv4673, %add4683
  br label %cond.end.4692

cond.false.4685:                                  ; preds = %cond.false.4653
  %1253 = load i64, i64* %nbytes, align 8
  %mul4686 = mul nsw i64 0, %1253
  %1254 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4687 = getelementptr inbounds %struct.image, %struct.image* %1254, i32 0, i32 12
  %1255 = load i32, i32* %height4687, align 4
  %conv4688 = sext i32 %1255 to i64
  %add4689 = add nsw i64 %mul4686, %conv4688
  %mul4690 = mul nsw i64 0, %add4689
  %add4691 = add nsw i64 %mul4690, 0
  br label %cond.end.4692

cond.end.4692:                                    ; preds = %cond.false.4685, %cond.true.4662
  %cond4693 = phi i64 [ %sub4684, %cond.true.4662 ], [ %add4691, %cond.false.4685 ]
  %cmp4694 = icmp eq i64 %cond4693, 0
  br i1 %cmp4694, label %land.lhs.true.4696, label %lor.lhs.false.4710

land.lhs.true.4696:                               ; preds = %cond.end.4692
  %1256 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4697 = getelementptr inbounds %struct.image, %struct.image* %1256, i32 0, i32 12
  %1257 = load i32, i32* %height4697, align 4
  %cmp4698 = icmp slt i32 %1257, 0
  br i1 %cmp4698, label %land.lhs.true.4700, label %lor.lhs.false.4703

land.lhs.true.4700:                               ; preds = %land.lhs.true.4696
  %1258 = load i64, i64* %nbytes, align 8
  %cmp4701 = icmp slt i64 0, %1258
  br i1 %cmp4701, label %cond.true.4909, label %lor.lhs.false.4703

lor.lhs.false.4703:                               ; preds = %land.lhs.true.4700, %land.lhs.true.4696
  %1259 = load i64, i64* %nbytes, align 8
  %cmp4704 = icmp slt i64 %1259, 0
  br i1 %cmp4704, label %land.lhs.true.4706, label %lor.lhs.false.4710

land.lhs.true.4706:                               ; preds = %lor.lhs.false.4703
  %1260 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4707 = getelementptr inbounds %struct.image, %struct.image* %1260, i32 0, i32 12
  %1261 = load i32, i32* %height4707, align 4
  %cmp4708 = icmp slt i32 0, %1261
  br i1 %cmp4708, label %cond.true.4909, label %lor.lhs.false.4710

lor.lhs.false.4710:                               ; preds = %land.lhs.true.4706, %lor.lhs.false.4703, %cond.end.4692
  %1262 = load i64, i64* %nbytes, align 8
  %cmp4711 = icmp slt i64 %1262, 0
  br i1 %cmp4711, label %cond.true.4713, label %cond.false.4801

cond.true.4713:                                   ; preds = %lor.lhs.false.4710
  %1263 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4714 = getelementptr inbounds %struct.image, %struct.image* %1263, i32 0, i32 12
  %1264 = load i32, i32* %height4714, align 4
  %cmp4715 = icmp slt i32 %1264, 0
  br i1 %cmp4715, label %cond.true.4717, label %cond.false.4751

cond.true.4717:                                   ; preds = %cond.true.4713
  %1265 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4718 = getelementptr inbounds %struct.image, %struct.image* %1265, i32 0, i32 12
  %1266 = load i32, i32* %height4718, align 4
  %conv4719 = sext i32 %1266 to i64
  %1267 = load i64, i64* %nbytes, align 8
  %mul4720 = mul nsw i64 0, %1267
  %1268 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4721 = getelementptr inbounds %struct.image, %struct.image* %1268, i32 0, i32 12
  %1269 = load i32, i32* %height4721, align 4
  %conv4722 = sext i32 %1269 to i64
  %add4723 = add nsw i64 %mul4720, %conv4722
  %mul4724 = mul nsw i64 0, %add4723
  %sub4725 = sub nsw i64 %mul4724, 1
  %cmp4726 = icmp slt i64 %sub4725, 0
  br i1 %cmp4726, label %cond.true.4728, label %cond.false.4739

cond.true.4728:                                   ; preds = %cond.true.4717
  %1270 = load i64, i64* %nbytes, align 8
  %mul4729 = mul nsw i64 0, %1270
  %1271 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4730 = getelementptr inbounds %struct.image, %struct.image* %1271, i32 0, i32 12
  %1272 = load i32, i32* %height4730, align 4
  %conv4731 = sext i32 %1272 to i64
  %add4732 = add nsw i64 %mul4729, %conv4731
  %mul4733 = mul nsw i64 0, %add4732
  %add4734 = add nsw i64 %mul4733, 1
  %shl4735 = shl i64 %add4734, 62
  %sub4736 = sub nsw i64 %shl4735, 1
  %mul4737 = mul nsw i64 %sub4736, 2
  %add4738 = add nsw i64 %mul4737, 1
  br label %cond.end.4746

cond.false.4739:                                  ; preds = %cond.true.4717
  %1273 = load i64, i64* %nbytes, align 8
  %mul4740 = mul nsw i64 0, %1273
  %1274 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4741 = getelementptr inbounds %struct.image, %struct.image* %1274, i32 0, i32 12
  %1275 = load i32, i32* %height4741, align 4
  %conv4742 = sext i32 %1275 to i64
  %add4743 = add nsw i64 %mul4740, %conv4742
  %mul4744 = mul nsw i64 0, %add4743
  %sub4745 = sub nsw i64 %mul4744, 1
  br label %cond.end.4746

cond.end.4746:                                    ; preds = %cond.false.4739, %cond.true.4728
  %cond4747 = phi i64 [ %add4738, %cond.true.4728 ], [ %sub4745, %cond.false.4739 ]
  %1276 = load i64, i64* %nbytes, align 8
  %div4748 = sdiv i64 %cond4747, %1276
  %cmp4749 = icmp slt i64 %conv4719, %div4748
  br i1 %cmp4749, label %cond.true.4909, label %lor.lhs.false.4889

cond.false.4751:                                  ; preds = %cond.true.4713
  %1277 = load i64, i64* %nbytes, align 8
  %cmp4752 = icmp eq i64 %1277, -1
  br i1 %cmp4752, label %cond.true.4754, label %cond.false.4755

cond.true.4754:                                   ; preds = %cond.false.4751
  br i1 false, label %cond.true.4909, label %lor.lhs.false.4889

cond.false.4755:                                  ; preds = %cond.false.4751
  %1278 = load i64, i64* %nbytes, align 8
  %mul4756 = mul nsw i64 0, %1278
  %1279 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4757 = getelementptr inbounds %struct.image, %struct.image* %1279, i32 0, i32 12
  %1280 = load i32, i32* %height4757, align 4
  %conv4758 = sext i32 %1280 to i64
  %add4759 = add nsw i64 %mul4756, %conv4758
  %mul4760 = mul nsw i64 0, %add4759
  %sub4761 = sub nsw i64 %mul4760, 1
  %cmp4762 = icmp slt i64 %sub4761, 0
  br i1 %cmp4762, label %cond.true.4764, label %cond.false.4787

cond.true.4764:                                   ; preds = %cond.false.4755
  %1281 = load i64, i64* %nbytes, align 8
  %mul4765 = mul nsw i64 0, %1281
  %1282 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4766 = getelementptr inbounds %struct.image, %struct.image* %1282, i32 0, i32 12
  %1283 = load i32, i32* %height4766, align 4
  %conv4767 = sext i32 %1283 to i64
  %add4768 = add nsw i64 %mul4765, %conv4767
  %mul4769 = mul nsw i64 0, %add4768
  %add4770 = add nsw i64 %mul4769, 0
  %neg4771 = xor i64 %add4770, -1
  %cmp4772 = icmp eq i64 %neg4771, -1
  %conv4773 = zext i1 %cmp4772 to i32
  %sub4774 = sub nsw i32 0, %conv4773
  %conv4775 = sext i32 %sub4774 to i64
  %1284 = load i64, i64* %nbytes, align 8
  %mul4776 = mul nsw i64 0, %1284
  %1285 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4777 = getelementptr inbounds %struct.image, %struct.image* %1285, i32 0, i32 12
  %1286 = load i32, i32* %height4777, align 4
  %conv4778 = sext i32 %1286 to i64
  %add4779 = add nsw i64 %mul4776, %conv4778
  %mul4780 = mul nsw i64 0, %add4779
  %add4781 = add nsw i64 %mul4780, 1
  %shl4782 = shl i64 %add4781, 62
  %sub4783 = sub nsw i64 %shl4782, 1
  %mul4784 = mul nsw i64 %sub4783, 2
  %add4785 = add nsw i64 %mul4784, 1
  %sub4786 = sub nsw i64 %conv4775, %add4785
  br label %cond.end.4794

cond.false.4787:                                  ; preds = %cond.false.4755
  %1287 = load i64, i64* %nbytes, align 8
  %mul4788 = mul nsw i64 0, %1287
  %1288 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4789 = getelementptr inbounds %struct.image, %struct.image* %1288, i32 0, i32 12
  %1289 = load i32, i32* %height4789, align 4
  %conv4790 = sext i32 %1289 to i64
  %add4791 = add nsw i64 %mul4788, %conv4790
  %mul4792 = mul nsw i64 0, %add4791
  %add4793 = add nsw i64 %mul4792, 0
  br label %cond.end.4794

cond.end.4794:                                    ; preds = %cond.false.4787, %cond.true.4764
  %cond4795 = phi i64 [ %sub4786, %cond.true.4764 ], [ %add4793, %cond.false.4787 ]
  %1290 = load i64, i64* %nbytes, align 8
  %div4796 = sdiv i64 %cond4795, %1290
  %1291 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4797 = getelementptr inbounds %struct.image, %struct.image* %1291, i32 0, i32 12
  %1292 = load i32, i32* %height4797, align 4
  %conv4798 = sext i32 %1292 to i64
  %cmp4799 = icmp slt i64 %div4796, %conv4798
  br i1 %cmp4799, label %cond.true.4909, label %lor.lhs.false.4889

cond.false.4801:                                  ; preds = %lor.lhs.false.4710
  %1293 = load i64, i64* %nbytes, align 8
  %cmp4802 = icmp eq i64 %1293, 0
  br i1 %cmp4802, label %cond.true.4804, label %cond.false.4805

cond.true.4804:                                   ; preds = %cond.false.4801
  br i1 false, label %cond.true.4909, label %lor.lhs.false.4889

cond.false.4805:                                  ; preds = %cond.false.4801
  %1294 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4806 = getelementptr inbounds %struct.image, %struct.image* %1294, i32 0, i32 12
  %1295 = load i32, i32* %height4806, align 4
  %cmp4807 = icmp slt i32 %1295, 0
  br i1 %cmp4807, label %cond.true.4809, label %cond.false.4855

cond.true.4809:                                   ; preds = %cond.false.4805
  %1296 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4810 = getelementptr inbounds %struct.image, %struct.image* %1296, i32 0, i32 12
  %1297 = load i32, i32* %height4810, align 4
  %conv4811 = sext i32 %1297 to i64
  %1298 = load i64, i64* %nbytes, align 8
  %mul4812 = mul nsw i64 0, %1298
  %1299 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4813 = getelementptr inbounds %struct.image, %struct.image* %1299, i32 0, i32 12
  %1300 = load i32, i32* %height4813, align 4
  %conv4814 = sext i32 %1300 to i64
  %add4815 = add nsw i64 %mul4812, %conv4814
  %mul4816 = mul nsw i64 0, %add4815
  %sub4817 = sub nsw i64 %mul4816, 1
  %cmp4818 = icmp slt i64 %sub4817, 0
  br i1 %cmp4818, label %cond.true.4820, label %cond.false.4843

cond.true.4820:                                   ; preds = %cond.true.4809
  %1301 = load i64, i64* %nbytes, align 8
  %mul4821 = mul nsw i64 0, %1301
  %1302 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4822 = getelementptr inbounds %struct.image, %struct.image* %1302, i32 0, i32 12
  %1303 = load i32, i32* %height4822, align 4
  %conv4823 = sext i32 %1303 to i64
  %add4824 = add nsw i64 %mul4821, %conv4823
  %mul4825 = mul nsw i64 0, %add4824
  %add4826 = add nsw i64 %mul4825, 0
  %neg4827 = xor i64 %add4826, -1
  %cmp4828 = icmp eq i64 %neg4827, -1
  %conv4829 = zext i1 %cmp4828 to i32
  %sub4830 = sub nsw i32 0, %conv4829
  %conv4831 = sext i32 %sub4830 to i64
  %1304 = load i64, i64* %nbytes, align 8
  %mul4832 = mul nsw i64 0, %1304
  %1305 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4833 = getelementptr inbounds %struct.image, %struct.image* %1305, i32 0, i32 12
  %1306 = load i32, i32* %height4833, align 4
  %conv4834 = sext i32 %1306 to i64
  %add4835 = add nsw i64 %mul4832, %conv4834
  %mul4836 = mul nsw i64 0, %add4835
  %add4837 = add nsw i64 %mul4836, 1
  %shl4838 = shl i64 %add4837, 62
  %sub4839 = sub nsw i64 %shl4838, 1
  %mul4840 = mul nsw i64 %sub4839, 2
  %add4841 = add nsw i64 %mul4840, 1
  %sub4842 = sub nsw i64 %conv4831, %add4841
  br label %cond.end.4850

cond.false.4843:                                  ; preds = %cond.true.4809
  %1307 = load i64, i64* %nbytes, align 8
  %mul4844 = mul nsw i64 0, %1307
  %1308 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4845 = getelementptr inbounds %struct.image, %struct.image* %1308, i32 0, i32 12
  %1309 = load i32, i32* %height4845, align 4
  %conv4846 = sext i32 %1309 to i64
  %add4847 = add nsw i64 %mul4844, %conv4846
  %mul4848 = mul nsw i64 0, %add4847
  %add4849 = add nsw i64 %mul4848, 0
  br label %cond.end.4850

cond.end.4850:                                    ; preds = %cond.false.4843, %cond.true.4820
  %cond4851 = phi i64 [ %sub4842, %cond.true.4820 ], [ %add4849, %cond.false.4843 ]
  %1310 = load i64, i64* %nbytes, align 8
  %div4852 = sdiv i64 %cond4851, %1310
  %cmp4853 = icmp slt i64 %conv4811, %div4852
  br i1 %cmp4853, label %cond.true.4909, label %lor.lhs.false.4889

cond.false.4855:                                  ; preds = %cond.false.4805
  %1311 = load i64, i64* %nbytes, align 8
  %mul4856 = mul nsw i64 0, %1311
  %1312 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4857 = getelementptr inbounds %struct.image, %struct.image* %1312, i32 0, i32 12
  %1313 = load i32, i32* %height4857, align 4
  %conv4858 = sext i32 %1313 to i64
  %add4859 = add nsw i64 %mul4856, %conv4858
  %mul4860 = mul nsw i64 0, %add4859
  %sub4861 = sub nsw i64 %mul4860, 1
  %cmp4862 = icmp slt i64 %sub4861, 0
  br i1 %cmp4862, label %cond.true.4864, label %cond.false.4875

cond.true.4864:                                   ; preds = %cond.false.4855
  %1314 = load i64, i64* %nbytes, align 8
  %mul4865 = mul nsw i64 0, %1314
  %1315 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4866 = getelementptr inbounds %struct.image, %struct.image* %1315, i32 0, i32 12
  %1316 = load i32, i32* %height4866, align 4
  %conv4867 = sext i32 %1316 to i64
  %add4868 = add nsw i64 %mul4865, %conv4867
  %mul4869 = mul nsw i64 0, %add4868
  %add4870 = add nsw i64 %mul4869, 1
  %shl4871 = shl i64 %add4870, 62
  %sub4872 = sub nsw i64 %shl4871, 1
  %mul4873 = mul nsw i64 %sub4872, 2
  %add4874 = add nsw i64 %mul4873, 1
  br label %cond.end.4882

cond.false.4875:                                  ; preds = %cond.false.4855
  %1317 = load i64, i64* %nbytes, align 8
  %mul4876 = mul nsw i64 0, %1317
  %1318 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4877 = getelementptr inbounds %struct.image, %struct.image* %1318, i32 0, i32 12
  %1319 = load i32, i32* %height4877, align 4
  %conv4878 = sext i32 %1319 to i64
  %add4879 = add nsw i64 %mul4876, %conv4878
  %mul4880 = mul nsw i64 0, %add4879
  %sub4881 = sub nsw i64 %mul4880, 1
  br label %cond.end.4882

cond.end.4882:                                    ; preds = %cond.false.4875, %cond.true.4864
  %cond4883 = phi i64 [ %add4874, %cond.true.4864 ], [ %sub4881, %cond.false.4875 ]
  %1320 = load i64, i64* %nbytes, align 8
  %div4884 = sdiv i64 %cond4883, %1320
  %1321 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4885 = getelementptr inbounds %struct.image, %struct.image* %1321, i32 0, i32 12
  %1322 = load i32, i32* %height4885, align 4
  %conv4886 = sext i32 %1322 to i64
  %cmp4887 = icmp slt i64 %div4884, %conv4886
  br i1 %cmp4887, label %cond.true.4909, label %lor.lhs.false.4889

lor.lhs.false.4889:                               ; preds = %cond.end.4882, %cond.end.4850, %cond.true.4804, %cond.end.4794, %cond.true.4754, %cond.end.4746
  %1323 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4890 = getelementptr inbounds %struct.image, %struct.image* %1323, i32 0, i32 12
  %1324 = load i32, i32* %height4890, align 4
  %conv4891 = sext i32 %1324 to i64
  %1325 = load i64, i64* %nbytes, align 8
  %mul4892 = mul nsw i64 %conv4891, %1325
  %mul4893 = mul nsw i64 0, %mul4892
  %sub4894 = sub nsw i64 %mul4893, 1
  %cmp4895 = icmp slt i64 %sub4894, 0
  br i1 %cmp4895, label %land.lhs.true.4897, label %lor.lhs.false.4903

land.lhs.true.4897:                               ; preds = %lor.lhs.false.4889
  %1326 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4898 = getelementptr inbounds %struct.image, %struct.image* %1326, i32 0, i32 12
  %1327 = load i32, i32* %height4898, align 4
  %conv4899 = sext i32 %1327 to i64
  %1328 = load i64, i64* %nbytes, align 8
  %mul4900 = mul nsw i64 %conv4899, %1328
  %cmp4901 = icmp slt i64 %mul4900, -2147483648
  br i1 %cmp4901, label %cond.true.4909, label %lor.lhs.false.4903

lor.lhs.false.4903:                               ; preds = %land.lhs.true.4897, %lor.lhs.false.4889
  %1329 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4904 = getelementptr inbounds %struct.image, %struct.image* %1329, i32 0, i32 12
  %1330 = load i32, i32* %height4904, align 4
  %conv4905 = sext i32 %1330 to i64
  %1331 = load i64, i64* %nbytes, align 8
  %mul4906 = mul nsw i64 %conv4905, %1331
  %cmp4907 = icmp slt i64 2147483647, %mul4906
  br i1 %cmp4907, label %cond.true.4909, label %cond.false.4928

cond.true.4909:                                   ; preds = %lor.lhs.false.4903, %land.lhs.true.4897, %cond.end.4882, %cond.end.4850, %cond.true.4804, %cond.end.4794, %cond.true.4754, %cond.end.4746, %land.lhs.true.4706, %land.lhs.true.4700
  %1332 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4910 = getelementptr inbounds %struct.image, %struct.image* %1332, i32 0, i32 12
  %1333 = load i32, i32* %height4910, align 4
  %1334 = load i64, i64* %nbytes, align 8
  %conv4911 = trunc i64 %1334 to i32
  %mul4912 = mul i32 %1333, %conv4911
  %cmp4913 = icmp ule i32 %mul4912, 2147483647
  br i1 %cmp4913, label %cond.true.4915, label %cond.false.4919

cond.true.4915:                                   ; preds = %cond.true.4909
  %1335 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4916 = getelementptr inbounds %struct.image, %struct.image* %1335, i32 0, i32 12
  %1336 = load i32, i32* %height4916, align 4
  %1337 = load i64, i64* %nbytes, align 8
  %conv4917 = trunc i64 %1337 to i32
  %mul4918 = mul i32 %1336, %conv4917
  br label %cond.end.4925

cond.false.4919:                                  ; preds = %cond.true.4909
  %1338 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4920 = getelementptr inbounds %struct.image, %struct.image* %1338, i32 0, i32 12
  %1339 = load i32, i32* %height4920, align 4
  %1340 = load i64, i64* %nbytes, align 8
  %conv4921 = trunc i64 %1340 to i32
  %mul4922 = mul i32 %1339, %conv4921
  %sub4923 = sub i32 %mul4922, -2147483648
  %add4924 = add nsw i32 %sub4923, -2147483648
  br label %cond.end.4925

cond.end.4925:                                    ; preds = %cond.false.4919, %cond.true.4915
  %cond4926 = phi i32 [ %mul4918, %cond.true.4915 ], [ %add4924, %cond.false.4919 ]
  %conv4927 = sext i32 %cond4926 to i64
  store i64 %conv4927, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.4928:                                  ; preds = %lor.lhs.false.4903
  %1341 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4929 = getelementptr inbounds %struct.image, %struct.image* %1341, i32 0, i32 12
  %1342 = load i32, i32* %height4929, align 4
  %1343 = load i64, i64* %nbytes, align 8
  %conv4930 = trunc i64 %1343 to i32
  %mul4931 = mul i32 %1342, %conv4930
  %cmp4932 = icmp ule i32 %mul4931, 2147483647
  br i1 %cmp4932, label %cond.true.4934, label %cond.false.4938

cond.true.4934:                                   ; preds = %cond.false.4928
  %1344 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4935 = getelementptr inbounds %struct.image, %struct.image* %1344, i32 0, i32 12
  %1345 = load i32, i32* %height4935, align 4
  %1346 = load i64, i64* %nbytes, align 8
  %conv4936 = trunc i64 %1346 to i32
  %mul4937 = mul i32 %1345, %conv4936
  br label %cond.end.4944

cond.false.4938:                                  ; preds = %cond.false.4928
  %1347 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4939 = getelementptr inbounds %struct.image, %struct.image* %1347, i32 0, i32 12
  %1348 = load i32, i32* %height4939, align 4
  %1349 = load i64, i64* %nbytes, align 8
  %conv4940 = trunc i64 %1349 to i32
  %mul4941 = mul i32 %1348, %conv4940
  %sub4942 = sub i32 %mul4941, -2147483648
  %add4943 = add nsw i32 %sub4942, -2147483648
  br label %cond.end.4944

cond.end.4944:                                    ; preds = %cond.false.4938, %cond.true.4934
  %cond4945 = phi i32 [ %mul4937, %cond.true.4934 ], [ %add4943, %cond.false.4938 ]
  %conv4946 = sext i32 %cond4945 to i64
  store i64 %conv4946, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.4947:                                  ; preds = %cond.false.4355
  br i1 true, label %cond.true.4948, label %cond.false.5537

cond.true.4948:                                   ; preds = %cond.false.4947
  br i1 false, label %cond.true.4949, label %cond.false.5245

cond.true.4949:                                   ; preds = %cond.true.4948
  %1350 = load i64, i64* %nbytes, align 8
  %mul4950 = mul nsw i64 0, %1350
  %1351 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4951 = getelementptr inbounds %struct.image, %struct.image* %1351, i32 0, i32 12
  %1352 = load i32, i32* %height4951, align 4
  %conv4952 = sext i32 %1352 to i64
  %add4953 = add nsw i64 %mul4950, %conv4952
  %mul4954 = mul nsw i64 0, %add4953
  %sub4955 = sub nsw i64 %mul4954, 1
  %cmp4956 = icmp slt i64 %sub4955, 0
  br i1 %cmp4956, label %cond.true.4958, label %cond.false.4981

cond.true.4958:                                   ; preds = %cond.true.4949
  %1353 = load i64, i64* %nbytes, align 8
  %mul4959 = mul nsw i64 0, %1353
  %1354 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4960 = getelementptr inbounds %struct.image, %struct.image* %1354, i32 0, i32 12
  %1355 = load i32, i32* %height4960, align 4
  %conv4961 = sext i32 %1355 to i64
  %add4962 = add nsw i64 %mul4959, %conv4961
  %mul4963 = mul nsw i64 0, %add4962
  %add4964 = add nsw i64 %mul4963, 0
  %neg4965 = xor i64 %add4964, -1
  %cmp4966 = icmp eq i64 %neg4965, -1
  %conv4967 = zext i1 %cmp4966 to i32
  %sub4968 = sub nsw i32 0, %conv4967
  %conv4969 = sext i32 %sub4968 to i64
  %1356 = load i64, i64* %nbytes, align 8
  %mul4970 = mul nsw i64 0, %1356
  %1357 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4971 = getelementptr inbounds %struct.image, %struct.image* %1357, i32 0, i32 12
  %1358 = load i32, i32* %height4971, align 4
  %conv4972 = sext i32 %1358 to i64
  %add4973 = add nsw i64 %mul4970, %conv4972
  %mul4974 = mul nsw i64 0, %add4973
  %add4975 = add nsw i64 %mul4974, 1
  %shl4976 = shl i64 %add4975, 62
  %sub4977 = sub nsw i64 %shl4976, 1
  %mul4978 = mul nsw i64 %sub4977, 2
  %add4979 = add nsw i64 %mul4978, 1
  %sub4980 = sub nsw i64 %conv4969, %add4979
  br label %cond.end.4988

cond.false.4981:                                  ; preds = %cond.true.4949
  %1359 = load i64, i64* %nbytes, align 8
  %mul4982 = mul nsw i64 0, %1359
  %1360 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4983 = getelementptr inbounds %struct.image, %struct.image* %1360, i32 0, i32 12
  %1361 = load i32, i32* %height4983, align 4
  %conv4984 = sext i32 %1361 to i64
  %add4985 = add nsw i64 %mul4982, %conv4984
  %mul4986 = mul nsw i64 0, %add4985
  %add4987 = add nsw i64 %mul4986, 0
  br label %cond.end.4988

cond.end.4988:                                    ; preds = %cond.false.4981, %cond.true.4958
  %cond4989 = phi i64 [ %sub4980, %cond.true.4958 ], [ %add4987, %cond.false.4981 ]
  %cmp4990 = icmp eq i64 %cond4989, 0
  br i1 %cmp4990, label %land.lhs.true.4992, label %lor.lhs.false.5008

land.lhs.true.4992:                               ; preds = %cond.end.4988
  %1362 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4993 = getelementptr inbounds %struct.image, %struct.image* %1362, i32 0, i32 12
  %1363 = load i32, i32* %height4993, align 4
  %conv4994 = sext i32 %1363 to i64
  %cmp4995 = icmp slt i64 %conv4994, 0
  br i1 %cmp4995, label %land.lhs.true.4997, label %lor.lhs.false.5000

land.lhs.true.4997:                               ; preds = %land.lhs.true.4992
  %1364 = load i64, i64* %nbytes, align 8
  %cmp4998 = icmp slt i64 0, %1364
  br i1 %cmp4998, label %cond.true.5209, label %lor.lhs.false.5000

lor.lhs.false.5000:                               ; preds = %land.lhs.true.4997, %land.lhs.true.4992
  %1365 = load i64, i64* %nbytes, align 8
  %cmp5001 = icmp slt i64 %1365, 0
  br i1 %cmp5001, label %land.lhs.true.5003, label %lor.lhs.false.5008

land.lhs.true.5003:                               ; preds = %lor.lhs.false.5000
  %1366 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5004 = getelementptr inbounds %struct.image, %struct.image* %1366, i32 0, i32 12
  %1367 = load i32, i32* %height5004, align 4
  %conv5005 = sext i32 %1367 to i64
  %cmp5006 = icmp slt i64 0, %conv5005
  br i1 %cmp5006, label %cond.true.5209, label %lor.lhs.false.5008

lor.lhs.false.5008:                               ; preds = %land.lhs.true.5003, %lor.lhs.false.5000, %cond.end.4988
  %1368 = load i64, i64* %nbytes, align 8
  %cmp5009 = icmp slt i64 %1368, 0
  br i1 %cmp5009, label %cond.true.5011, label %cond.false.5100

cond.true.5011:                                   ; preds = %lor.lhs.false.5008
  %1369 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5012 = getelementptr inbounds %struct.image, %struct.image* %1369, i32 0, i32 12
  %1370 = load i32, i32* %height5012, align 4
  %conv5013 = sext i32 %1370 to i64
  %cmp5014 = icmp slt i64 %conv5013, 0
  br i1 %cmp5014, label %cond.true.5016, label %cond.false.5050

cond.true.5016:                                   ; preds = %cond.true.5011
  %1371 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5017 = getelementptr inbounds %struct.image, %struct.image* %1371, i32 0, i32 12
  %1372 = load i32, i32* %height5017, align 4
  %conv5018 = sext i32 %1372 to i64
  %1373 = load i64, i64* %nbytes, align 8
  %mul5019 = mul nsw i64 0, %1373
  %1374 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5020 = getelementptr inbounds %struct.image, %struct.image* %1374, i32 0, i32 12
  %1375 = load i32, i32* %height5020, align 4
  %conv5021 = sext i32 %1375 to i64
  %add5022 = add nsw i64 %mul5019, %conv5021
  %mul5023 = mul nsw i64 0, %add5022
  %sub5024 = sub nsw i64 %mul5023, 1
  %cmp5025 = icmp slt i64 %sub5024, 0
  br i1 %cmp5025, label %cond.true.5027, label %cond.false.5038

cond.true.5027:                                   ; preds = %cond.true.5016
  %1376 = load i64, i64* %nbytes, align 8
  %mul5028 = mul nsw i64 0, %1376
  %1377 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5029 = getelementptr inbounds %struct.image, %struct.image* %1377, i32 0, i32 12
  %1378 = load i32, i32* %height5029, align 4
  %conv5030 = sext i32 %1378 to i64
  %add5031 = add nsw i64 %mul5028, %conv5030
  %mul5032 = mul nsw i64 0, %add5031
  %add5033 = add nsw i64 %mul5032, 1
  %shl5034 = shl i64 %add5033, 62
  %sub5035 = sub nsw i64 %shl5034, 1
  %mul5036 = mul nsw i64 %sub5035, 2
  %add5037 = add nsw i64 %mul5036, 1
  br label %cond.end.5045

cond.false.5038:                                  ; preds = %cond.true.5016
  %1379 = load i64, i64* %nbytes, align 8
  %mul5039 = mul nsw i64 0, %1379
  %1380 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5040 = getelementptr inbounds %struct.image, %struct.image* %1380, i32 0, i32 12
  %1381 = load i32, i32* %height5040, align 4
  %conv5041 = sext i32 %1381 to i64
  %add5042 = add nsw i64 %mul5039, %conv5041
  %mul5043 = mul nsw i64 0, %add5042
  %sub5044 = sub nsw i64 %mul5043, 1
  br label %cond.end.5045

cond.end.5045:                                    ; preds = %cond.false.5038, %cond.true.5027
  %cond5046 = phi i64 [ %add5037, %cond.true.5027 ], [ %sub5044, %cond.false.5038 ]
  %1382 = load i64, i64* %nbytes, align 8
  %div5047 = sdiv i64 %cond5046, %1382
  %cmp5048 = icmp slt i64 %conv5018, %div5047
  br i1 %cmp5048, label %cond.true.5209, label %lor.lhs.false.5189

cond.false.5050:                                  ; preds = %cond.true.5011
  %1383 = load i64, i64* %nbytes, align 8
  %cmp5051 = icmp eq i64 %1383, -1
  br i1 %cmp5051, label %cond.true.5053, label %cond.false.5054

cond.true.5053:                                   ; preds = %cond.false.5050
  br i1 false, label %cond.true.5209, label %lor.lhs.false.5189

cond.false.5054:                                  ; preds = %cond.false.5050
  %1384 = load i64, i64* %nbytes, align 8
  %mul5055 = mul nsw i64 0, %1384
  %1385 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5056 = getelementptr inbounds %struct.image, %struct.image* %1385, i32 0, i32 12
  %1386 = load i32, i32* %height5056, align 4
  %conv5057 = sext i32 %1386 to i64
  %add5058 = add nsw i64 %mul5055, %conv5057
  %mul5059 = mul nsw i64 0, %add5058
  %sub5060 = sub nsw i64 %mul5059, 1
  %cmp5061 = icmp slt i64 %sub5060, 0
  br i1 %cmp5061, label %cond.true.5063, label %cond.false.5086

cond.true.5063:                                   ; preds = %cond.false.5054
  %1387 = load i64, i64* %nbytes, align 8
  %mul5064 = mul nsw i64 0, %1387
  %1388 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5065 = getelementptr inbounds %struct.image, %struct.image* %1388, i32 0, i32 12
  %1389 = load i32, i32* %height5065, align 4
  %conv5066 = sext i32 %1389 to i64
  %add5067 = add nsw i64 %mul5064, %conv5066
  %mul5068 = mul nsw i64 0, %add5067
  %add5069 = add nsw i64 %mul5068, 0
  %neg5070 = xor i64 %add5069, -1
  %cmp5071 = icmp eq i64 %neg5070, -1
  %conv5072 = zext i1 %cmp5071 to i32
  %sub5073 = sub nsw i32 0, %conv5072
  %conv5074 = sext i32 %sub5073 to i64
  %1390 = load i64, i64* %nbytes, align 8
  %mul5075 = mul nsw i64 0, %1390
  %1391 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5076 = getelementptr inbounds %struct.image, %struct.image* %1391, i32 0, i32 12
  %1392 = load i32, i32* %height5076, align 4
  %conv5077 = sext i32 %1392 to i64
  %add5078 = add nsw i64 %mul5075, %conv5077
  %mul5079 = mul nsw i64 0, %add5078
  %add5080 = add nsw i64 %mul5079, 1
  %shl5081 = shl i64 %add5080, 62
  %sub5082 = sub nsw i64 %shl5081, 1
  %mul5083 = mul nsw i64 %sub5082, 2
  %add5084 = add nsw i64 %mul5083, 1
  %sub5085 = sub nsw i64 %conv5074, %add5084
  br label %cond.end.5093

cond.false.5086:                                  ; preds = %cond.false.5054
  %1393 = load i64, i64* %nbytes, align 8
  %mul5087 = mul nsw i64 0, %1393
  %1394 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5088 = getelementptr inbounds %struct.image, %struct.image* %1394, i32 0, i32 12
  %1395 = load i32, i32* %height5088, align 4
  %conv5089 = sext i32 %1395 to i64
  %add5090 = add nsw i64 %mul5087, %conv5089
  %mul5091 = mul nsw i64 0, %add5090
  %add5092 = add nsw i64 %mul5091, 0
  br label %cond.end.5093

cond.end.5093:                                    ; preds = %cond.false.5086, %cond.true.5063
  %cond5094 = phi i64 [ %sub5085, %cond.true.5063 ], [ %add5092, %cond.false.5086 ]
  %1396 = load i64, i64* %nbytes, align 8
  %div5095 = sdiv i64 %cond5094, %1396
  %1397 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5096 = getelementptr inbounds %struct.image, %struct.image* %1397, i32 0, i32 12
  %1398 = load i32, i32* %height5096, align 4
  %conv5097 = sext i32 %1398 to i64
  %cmp5098 = icmp slt i64 %div5095, %conv5097
  br i1 %cmp5098, label %cond.true.5209, label %lor.lhs.false.5189

cond.false.5100:                                  ; preds = %lor.lhs.false.5008
  %1399 = load i64, i64* %nbytes, align 8
  %cmp5101 = icmp eq i64 %1399, 0
  br i1 %cmp5101, label %cond.true.5103, label %cond.false.5104

cond.true.5103:                                   ; preds = %cond.false.5100
  br i1 false, label %cond.true.5209, label %lor.lhs.false.5189

cond.false.5104:                                  ; preds = %cond.false.5100
  %1400 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5105 = getelementptr inbounds %struct.image, %struct.image* %1400, i32 0, i32 12
  %1401 = load i32, i32* %height5105, align 4
  %conv5106 = sext i32 %1401 to i64
  %cmp5107 = icmp slt i64 %conv5106, 0
  br i1 %cmp5107, label %cond.true.5109, label %cond.false.5155

cond.true.5109:                                   ; preds = %cond.false.5104
  %1402 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5110 = getelementptr inbounds %struct.image, %struct.image* %1402, i32 0, i32 12
  %1403 = load i32, i32* %height5110, align 4
  %conv5111 = sext i32 %1403 to i64
  %1404 = load i64, i64* %nbytes, align 8
  %mul5112 = mul nsw i64 0, %1404
  %1405 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5113 = getelementptr inbounds %struct.image, %struct.image* %1405, i32 0, i32 12
  %1406 = load i32, i32* %height5113, align 4
  %conv5114 = sext i32 %1406 to i64
  %add5115 = add nsw i64 %mul5112, %conv5114
  %mul5116 = mul nsw i64 0, %add5115
  %sub5117 = sub nsw i64 %mul5116, 1
  %cmp5118 = icmp slt i64 %sub5117, 0
  br i1 %cmp5118, label %cond.true.5120, label %cond.false.5143

cond.true.5120:                                   ; preds = %cond.true.5109
  %1407 = load i64, i64* %nbytes, align 8
  %mul5121 = mul nsw i64 0, %1407
  %1408 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5122 = getelementptr inbounds %struct.image, %struct.image* %1408, i32 0, i32 12
  %1409 = load i32, i32* %height5122, align 4
  %conv5123 = sext i32 %1409 to i64
  %add5124 = add nsw i64 %mul5121, %conv5123
  %mul5125 = mul nsw i64 0, %add5124
  %add5126 = add nsw i64 %mul5125, 0
  %neg5127 = xor i64 %add5126, -1
  %cmp5128 = icmp eq i64 %neg5127, -1
  %conv5129 = zext i1 %cmp5128 to i32
  %sub5130 = sub nsw i32 0, %conv5129
  %conv5131 = sext i32 %sub5130 to i64
  %1410 = load i64, i64* %nbytes, align 8
  %mul5132 = mul nsw i64 0, %1410
  %1411 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5133 = getelementptr inbounds %struct.image, %struct.image* %1411, i32 0, i32 12
  %1412 = load i32, i32* %height5133, align 4
  %conv5134 = sext i32 %1412 to i64
  %add5135 = add nsw i64 %mul5132, %conv5134
  %mul5136 = mul nsw i64 0, %add5135
  %add5137 = add nsw i64 %mul5136, 1
  %shl5138 = shl i64 %add5137, 62
  %sub5139 = sub nsw i64 %shl5138, 1
  %mul5140 = mul nsw i64 %sub5139, 2
  %add5141 = add nsw i64 %mul5140, 1
  %sub5142 = sub nsw i64 %conv5131, %add5141
  br label %cond.end.5150

cond.false.5143:                                  ; preds = %cond.true.5109
  %1413 = load i64, i64* %nbytes, align 8
  %mul5144 = mul nsw i64 0, %1413
  %1414 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5145 = getelementptr inbounds %struct.image, %struct.image* %1414, i32 0, i32 12
  %1415 = load i32, i32* %height5145, align 4
  %conv5146 = sext i32 %1415 to i64
  %add5147 = add nsw i64 %mul5144, %conv5146
  %mul5148 = mul nsw i64 0, %add5147
  %add5149 = add nsw i64 %mul5148, 0
  br label %cond.end.5150

cond.end.5150:                                    ; preds = %cond.false.5143, %cond.true.5120
  %cond5151 = phi i64 [ %sub5142, %cond.true.5120 ], [ %add5149, %cond.false.5143 ]
  %1416 = load i64, i64* %nbytes, align 8
  %div5152 = sdiv i64 %cond5151, %1416
  %cmp5153 = icmp slt i64 %conv5111, %div5152
  br i1 %cmp5153, label %cond.true.5209, label %lor.lhs.false.5189

cond.false.5155:                                  ; preds = %cond.false.5104
  %1417 = load i64, i64* %nbytes, align 8
  %mul5156 = mul nsw i64 0, %1417
  %1418 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5157 = getelementptr inbounds %struct.image, %struct.image* %1418, i32 0, i32 12
  %1419 = load i32, i32* %height5157, align 4
  %conv5158 = sext i32 %1419 to i64
  %add5159 = add nsw i64 %mul5156, %conv5158
  %mul5160 = mul nsw i64 0, %add5159
  %sub5161 = sub nsw i64 %mul5160, 1
  %cmp5162 = icmp slt i64 %sub5161, 0
  br i1 %cmp5162, label %cond.true.5164, label %cond.false.5175

cond.true.5164:                                   ; preds = %cond.false.5155
  %1420 = load i64, i64* %nbytes, align 8
  %mul5165 = mul nsw i64 0, %1420
  %1421 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5166 = getelementptr inbounds %struct.image, %struct.image* %1421, i32 0, i32 12
  %1422 = load i32, i32* %height5166, align 4
  %conv5167 = sext i32 %1422 to i64
  %add5168 = add nsw i64 %mul5165, %conv5167
  %mul5169 = mul nsw i64 0, %add5168
  %add5170 = add nsw i64 %mul5169, 1
  %shl5171 = shl i64 %add5170, 62
  %sub5172 = sub nsw i64 %shl5171, 1
  %mul5173 = mul nsw i64 %sub5172, 2
  %add5174 = add nsw i64 %mul5173, 1
  br label %cond.end.5182

cond.false.5175:                                  ; preds = %cond.false.5155
  %1423 = load i64, i64* %nbytes, align 8
  %mul5176 = mul nsw i64 0, %1423
  %1424 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5177 = getelementptr inbounds %struct.image, %struct.image* %1424, i32 0, i32 12
  %1425 = load i32, i32* %height5177, align 4
  %conv5178 = sext i32 %1425 to i64
  %add5179 = add nsw i64 %mul5176, %conv5178
  %mul5180 = mul nsw i64 0, %add5179
  %sub5181 = sub nsw i64 %mul5180, 1
  br label %cond.end.5182

cond.end.5182:                                    ; preds = %cond.false.5175, %cond.true.5164
  %cond5183 = phi i64 [ %add5174, %cond.true.5164 ], [ %sub5181, %cond.false.5175 ]
  %1426 = load i64, i64* %nbytes, align 8
  %div5184 = sdiv i64 %cond5183, %1426
  %1427 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5185 = getelementptr inbounds %struct.image, %struct.image* %1427, i32 0, i32 12
  %1428 = load i32, i32* %height5185, align 4
  %conv5186 = sext i32 %1428 to i64
  %cmp5187 = icmp slt i64 %div5184, %conv5186
  br i1 %cmp5187, label %cond.true.5209, label %lor.lhs.false.5189

lor.lhs.false.5189:                               ; preds = %cond.end.5182, %cond.end.5150, %cond.true.5103, %cond.end.5093, %cond.true.5053, %cond.end.5045
  %1429 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5190 = getelementptr inbounds %struct.image, %struct.image* %1429, i32 0, i32 12
  %1430 = load i32, i32* %height5190, align 4
  %conv5191 = sext i32 %1430 to i64
  %1431 = load i64, i64* %nbytes, align 8
  %mul5192 = mul nsw i64 %conv5191, %1431
  %mul5193 = mul nsw i64 0, %mul5192
  %sub5194 = sub nsw i64 %mul5193, 1
  %cmp5195 = icmp slt i64 %sub5194, 0
  br i1 %cmp5195, label %land.lhs.true.5197, label %lor.lhs.false.5203

land.lhs.true.5197:                               ; preds = %lor.lhs.false.5189
  %1432 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5198 = getelementptr inbounds %struct.image, %struct.image* %1432, i32 0, i32 12
  %1433 = load i32, i32* %height5198, align 4
  %conv5199 = sext i32 %1433 to i64
  %1434 = load i64, i64* %nbytes, align 8
  %mul5200 = mul nsw i64 %conv5199, %1434
  %cmp5201 = icmp slt i64 %mul5200, -9223372036854775808
  br i1 %cmp5201, label %cond.true.5209, label %lor.lhs.false.5203

lor.lhs.false.5203:                               ; preds = %land.lhs.true.5197, %lor.lhs.false.5189
  %1435 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5204 = getelementptr inbounds %struct.image, %struct.image* %1435, i32 0, i32 12
  %1436 = load i32, i32* %height5204, align 4
  %conv5205 = sext i32 %1436 to i64
  %1437 = load i64, i64* %nbytes, align 8
  %mul5206 = mul nsw i64 %conv5205, %1437
  %cmp5207 = icmp slt i64 9223372036854775807, %mul5206
  br i1 %cmp5207, label %cond.true.5209, label %cond.false.5227

cond.true.5209:                                   ; preds = %lor.lhs.false.5203, %land.lhs.true.5197, %cond.end.5182, %cond.end.5150, %cond.true.5103, %cond.end.5093, %cond.true.5053, %cond.end.5045, %land.lhs.true.5003, %land.lhs.true.4997
  %1438 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5210 = getelementptr inbounds %struct.image, %struct.image* %1438, i32 0, i32 12
  %1439 = load i32, i32* %height5210, align 4
  %conv5211 = sext i32 %1439 to i64
  %1440 = load i64, i64* %nbytes, align 8
  %mul5212 = mul i64 %conv5211, %1440
  %cmp5213 = icmp ule i64 %mul5212, 9223372036854775807
  br i1 %cmp5213, label %cond.true.5215, label %cond.false.5219

cond.true.5215:                                   ; preds = %cond.true.5209
  %1441 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5216 = getelementptr inbounds %struct.image, %struct.image* %1441, i32 0, i32 12
  %1442 = load i32, i32* %height5216, align 4
  %conv5217 = sext i32 %1442 to i64
  %1443 = load i64, i64* %nbytes, align 8
  %mul5218 = mul i64 %conv5217, %1443
  br label %cond.end.5225

cond.false.5219:                                  ; preds = %cond.true.5209
  %1444 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5220 = getelementptr inbounds %struct.image, %struct.image* %1444, i32 0, i32 12
  %1445 = load i32, i32* %height5220, align 4
  %conv5221 = sext i32 %1445 to i64
  %1446 = load i64, i64* %nbytes, align 8
  %mul5222 = mul i64 %conv5221, %1446
  %sub5223 = sub i64 %mul5222, -9223372036854775808
  %add5224 = add nsw i64 %sub5223, -9223372036854775808
  br label %cond.end.5225

cond.end.5225:                                    ; preds = %cond.false.5219, %cond.true.5215
  %cond5226 = phi i64 [ %mul5218, %cond.true.5215 ], [ %add5224, %cond.false.5219 ]
  store i64 %cond5226, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.5227:                                  ; preds = %lor.lhs.false.5203
  %1447 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5228 = getelementptr inbounds %struct.image, %struct.image* %1447, i32 0, i32 12
  %1448 = load i32, i32* %height5228, align 4
  %conv5229 = sext i32 %1448 to i64
  %1449 = load i64, i64* %nbytes, align 8
  %mul5230 = mul i64 %conv5229, %1449
  %cmp5231 = icmp ule i64 %mul5230, 9223372036854775807
  br i1 %cmp5231, label %cond.true.5233, label %cond.false.5237

cond.true.5233:                                   ; preds = %cond.false.5227
  %1450 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5234 = getelementptr inbounds %struct.image, %struct.image* %1450, i32 0, i32 12
  %1451 = load i32, i32* %height5234, align 4
  %conv5235 = sext i32 %1451 to i64
  %1452 = load i64, i64* %nbytes, align 8
  %mul5236 = mul i64 %conv5235, %1452
  br label %cond.end.5243

cond.false.5237:                                  ; preds = %cond.false.5227
  %1453 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5238 = getelementptr inbounds %struct.image, %struct.image* %1453, i32 0, i32 12
  %1454 = load i32, i32* %height5238, align 4
  %conv5239 = sext i32 %1454 to i64
  %1455 = load i64, i64* %nbytes, align 8
  %mul5240 = mul i64 %conv5239, %1455
  %sub5241 = sub i64 %mul5240, -9223372036854775808
  %add5242 = add nsw i64 %sub5241, -9223372036854775808
  br label %cond.end.5243

cond.end.5243:                                    ; preds = %cond.false.5237, %cond.true.5233
  %cond5244 = phi i64 [ %mul5236, %cond.true.5233 ], [ %add5242, %cond.false.5237 ]
  store i64 %cond5244, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.5245:                                  ; preds = %cond.true.4948
  %1456 = load i64, i64* %nbytes, align 8
  %mul5246 = mul nsw i64 0, %1456
  %1457 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5247 = getelementptr inbounds %struct.image, %struct.image* %1457, i32 0, i32 12
  %1458 = load i32, i32* %height5247, align 4
  %conv5248 = sext i32 %1458 to i64
  %add5249 = add nsw i64 %mul5246, %conv5248
  %mul5250 = mul nsw i64 0, %add5249
  %sub5251 = sub nsw i64 %mul5250, 1
  %cmp5252 = icmp slt i64 %sub5251, 0
  br i1 %cmp5252, label %cond.true.5254, label %cond.false.5277

cond.true.5254:                                   ; preds = %cond.false.5245
  %1459 = load i64, i64* %nbytes, align 8
  %mul5255 = mul nsw i64 0, %1459
  %1460 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5256 = getelementptr inbounds %struct.image, %struct.image* %1460, i32 0, i32 12
  %1461 = load i32, i32* %height5256, align 4
  %conv5257 = sext i32 %1461 to i64
  %add5258 = add nsw i64 %mul5255, %conv5257
  %mul5259 = mul nsw i64 0, %add5258
  %add5260 = add nsw i64 %mul5259, 0
  %neg5261 = xor i64 %add5260, -1
  %cmp5262 = icmp eq i64 %neg5261, -1
  %conv5263 = zext i1 %cmp5262 to i32
  %sub5264 = sub nsw i32 0, %conv5263
  %conv5265 = sext i32 %sub5264 to i64
  %1462 = load i64, i64* %nbytes, align 8
  %mul5266 = mul nsw i64 0, %1462
  %1463 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5267 = getelementptr inbounds %struct.image, %struct.image* %1463, i32 0, i32 12
  %1464 = load i32, i32* %height5267, align 4
  %conv5268 = sext i32 %1464 to i64
  %add5269 = add nsw i64 %mul5266, %conv5268
  %mul5270 = mul nsw i64 0, %add5269
  %add5271 = add nsw i64 %mul5270, 1
  %shl5272 = shl i64 %add5271, 62
  %sub5273 = sub nsw i64 %shl5272, 1
  %mul5274 = mul nsw i64 %sub5273, 2
  %add5275 = add nsw i64 %mul5274, 1
  %sub5276 = sub nsw i64 %conv5265, %add5275
  br label %cond.end.5284

cond.false.5277:                                  ; preds = %cond.false.5245
  %1465 = load i64, i64* %nbytes, align 8
  %mul5278 = mul nsw i64 0, %1465
  %1466 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5279 = getelementptr inbounds %struct.image, %struct.image* %1466, i32 0, i32 12
  %1467 = load i32, i32* %height5279, align 4
  %conv5280 = sext i32 %1467 to i64
  %add5281 = add nsw i64 %mul5278, %conv5280
  %mul5282 = mul nsw i64 0, %add5281
  %add5283 = add nsw i64 %mul5282, 0
  br label %cond.end.5284

cond.end.5284:                                    ; preds = %cond.false.5277, %cond.true.5254
  %cond5285 = phi i64 [ %sub5276, %cond.true.5254 ], [ %add5283, %cond.false.5277 ]
  %cmp5286 = icmp eq i64 %cond5285, 0
  br i1 %cmp5286, label %land.lhs.true.5288, label %lor.lhs.false.5302

land.lhs.true.5288:                               ; preds = %cond.end.5284
  %1468 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5289 = getelementptr inbounds %struct.image, %struct.image* %1468, i32 0, i32 12
  %1469 = load i32, i32* %height5289, align 4
  %cmp5290 = icmp slt i32 %1469, 0
  br i1 %cmp5290, label %land.lhs.true.5292, label %lor.lhs.false.5295

land.lhs.true.5292:                               ; preds = %land.lhs.true.5288
  %1470 = load i64, i64* %nbytes, align 8
  %cmp5293 = icmp slt i64 0, %1470
  br i1 %cmp5293, label %cond.true.5501, label %lor.lhs.false.5295

lor.lhs.false.5295:                               ; preds = %land.lhs.true.5292, %land.lhs.true.5288
  %1471 = load i64, i64* %nbytes, align 8
  %cmp5296 = icmp slt i64 %1471, 0
  br i1 %cmp5296, label %land.lhs.true.5298, label %lor.lhs.false.5302

land.lhs.true.5298:                               ; preds = %lor.lhs.false.5295
  %1472 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5299 = getelementptr inbounds %struct.image, %struct.image* %1472, i32 0, i32 12
  %1473 = load i32, i32* %height5299, align 4
  %cmp5300 = icmp slt i32 0, %1473
  br i1 %cmp5300, label %cond.true.5501, label %lor.lhs.false.5302

lor.lhs.false.5302:                               ; preds = %land.lhs.true.5298, %lor.lhs.false.5295, %cond.end.5284
  %1474 = load i64, i64* %nbytes, align 8
  %cmp5303 = icmp slt i64 %1474, 0
  br i1 %cmp5303, label %cond.true.5305, label %cond.false.5393

cond.true.5305:                                   ; preds = %lor.lhs.false.5302
  %1475 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5306 = getelementptr inbounds %struct.image, %struct.image* %1475, i32 0, i32 12
  %1476 = load i32, i32* %height5306, align 4
  %cmp5307 = icmp slt i32 %1476, 0
  br i1 %cmp5307, label %cond.true.5309, label %cond.false.5343

cond.true.5309:                                   ; preds = %cond.true.5305
  %1477 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5310 = getelementptr inbounds %struct.image, %struct.image* %1477, i32 0, i32 12
  %1478 = load i32, i32* %height5310, align 4
  %conv5311 = sext i32 %1478 to i64
  %1479 = load i64, i64* %nbytes, align 8
  %mul5312 = mul nsw i64 0, %1479
  %1480 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5313 = getelementptr inbounds %struct.image, %struct.image* %1480, i32 0, i32 12
  %1481 = load i32, i32* %height5313, align 4
  %conv5314 = sext i32 %1481 to i64
  %add5315 = add nsw i64 %mul5312, %conv5314
  %mul5316 = mul nsw i64 0, %add5315
  %sub5317 = sub nsw i64 %mul5316, 1
  %cmp5318 = icmp slt i64 %sub5317, 0
  br i1 %cmp5318, label %cond.true.5320, label %cond.false.5331

cond.true.5320:                                   ; preds = %cond.true.5309
  %1482 = load i64, i64* %nbytes, align 8
  %mul5321 = mul nsw i64 0, %1482
  %1483 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5322 = getelementptr inbounds %struct.image, %struct.image* %1483, i32 0, i32 12
  %1484 = load i32, i32* %height5322, align 4
  %conv5323 = sext i32 %1484 to i64
  %add5324 = add nsw i64 %mul5321, %conv5323
  %mul5325 = mul nsw i64 0, %add5324
  %add5326 = add nsw i64 %mul5325, 1
  %shl5327 = shl i64 %add5326, 62
  %sub5328 = sub nsw i64 %shl5327, 1
  %mul5329 = mul nsw i64 %sub5328, 2
  %add5330 = add nsw i64 %mul5329, 1
  br label %cond.end.5338

cond.false.5331:                                  ; preds = %cond.true.5309
  %1485 = load i64, i64* %nbytes, align 8
  %mul5332 = mul nsw i64 0, %1485
  %1486 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5333 = getelementptr inbounds %struct.image, %struct.image* %1486, i32 0, i32 12
  %1487 = load i32, i32* %height5333, align 4
  %conv5334 = sext i32 %1487 to i64
  %add5335 = add nsw i64 %mul5332, %conv5334
  %mul5336 = mul nsw i64 0, %add5335
  %sub5337 = sub nsw i64 %mul5336, 1
  br label %cond.end.5338

cond.end.5338:                                    ; preds = %cond.false.5331, %cond.true.5320
  %cond5339 = phi i64 [ %add5330, %cond.true.5320 ], [ %sub5337, %cond.false.5331 ]
  %1488 = load i64, i64* %nbytes, align 8
  %div5340 = sdiv i64 %cond5339, %1488
  %cmp5341 = icmp slt i64 %conv5311, %div5340
  br i1 %cmp5341, label %cond.true.5501, label %lor.lhs.false.5481

cond.false.5343:                                  ; preds = %cond.true.5305
  %1489 = load i64, i64* %nbytes, align 8
  %cmp5344 = icmp eq i64 %1489, -1
  br i1 %cmp5344, label %cond.true.5346, label %cond.false.5347

cond.true.5346:                                   ; preds = %cond.false.5343
  br i1 false, label %cond.true.5501, label %lor.lhs.false.5481

cond.false.5347:                                  ; preds = %cond.false.5343
  %1490 = load i64, i64* %nbytes, align 8
  %mul5348 = mul nsw i64 0, %1490
  %1491 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5349 = getelementptr inbounds %struct.image, %struct.image* %1491, i32 0, i32 12
  %1492 = load i32, i32* %height5349, align 4
  %conv5350 = sext i32 %1492 to i64
  %add5351 = add nsw i64 %mul5348, %conv5350
  %mul5352 = mul nsw i64 0, %add5351
  %sub5353 = sub nsw i64 %mul5352, 1
  %cmp5354 = icmp slt i64 %sub5353, 0
  br i1 %cmp5354, label %cond.true.5356, label %cond.false.5379

cond.true.5356:                                   ; preds = %cond.false.5347
  %1493 = load i64, i64* %nbytes, align 8
  %mul5357 = mul nsw i64 0, %1493
  %1494 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5358 = getelementptr inbounds %struct.image, %struct.image* %1494, i32 0, i32 12
  %1495 = load i32, i32* %height5358, align 4
  %conv5359 = sext i32 %1495 to i64
  %add5360 = add nsw i64 %mul5357, %conv5359
  %mul5361 = mul nsw i64 0, %add5360
  %add5362 = add nsw i64 %mul5361, 0
  %neg5363 = xor i64 %add5362, -1
  %cmp5364 = icmp eq i64 %neg5363, -1
  %conv5365 = zext i1 %cmp5364 to i32
  %sub5366 = sub nsw i32 0, %conv5365
  %conv5367 = sext i32 %sub5366 to i64
  %1496 = load i64, i64* %nbytes, align 8
  %mul5368 = mul nsw i64 0, %1496
  %1497 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5369 = getelementptr inbounds %struct.image, %struct.image* %1497, i32 0, i32 12
  %1498 = load i32, i32* %height5369, align 4
  %conv5370 = sext i32 %1498 to i64
  %add5371 = add nsw i64 %mul5368, %conv5370
  %mul5372 = mul nsw i64 0, %add5371
  %add5373 = add nsw i64 %mul5372, 1
  %shl5374 = shl i64 %add5373, 62
  %sub5375 = sub nsw i64 %shl5374, 1
  %mul5376 = mul nsw i64 %sub5375, 2
  %add5377 = add nsw i64 %mul5376, 1
  %sub5378 = sub nsw i64 %conv5367, %add5377
  br label %cond.end.5386

cond.false.5379:                                  ; preds = %cond.false.5347
  %1499 = load i64, i64* %nbytes, align 8
  %mul5380 = mul nsw i64 0, %1499
  %1500 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5381 = getelementptr inbounds %struct.image, %struct.image* %1500, i32 0, i32 12
  %1501 = load i32, i32* %height5381, align 4
  %conv5382 = sext i32 %1501 to i64
  %add5383 = add nsw i64 %mul5380, %conv5382
  %mul5384 = mul nsw i64 0, %add5383
  %add5385 = add nsw i64 %mul5384, 0
  br label %cond.end.5386

cond.end.5386:                                    ; preds = %cond.false.5379, %cond.true.5356
  %cond5387 = phi i64 [ %sub5378, %cond.true.5356 ], [ %add5385, %cond.false.5379 ]
  %1502 = load i64, i64* %nbytes, align 8
  %div5388 = sdiv i64 %cond5387, %1502
  %1503 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5389 = getelementptr inbounds %struct.image, %struct.image* %1503, i32 0, i32 12
  %1504 = load i32, i32* %height5389, align 4
  %conv5390 = sext i32 %1504 to i64
  %cmp5391 = icmp slt i64 %div5388, %conv5390
  br i1 %cmp5391, label %cond.true.5501, label %lor.lhs.false.5481

cond.false.5393:                                  ; preds = %lor.lhs.false.5302
  %1505 = load i64, i64* %nbytes, align 8
  %cmp5394 = icmp eq i64 %1505, 0
  br i1 %cmp5394, label %cond.true.5396, label %cond.false.5397

cond.true.5396:                                   ; preds = %cond.false.5393
  br i1 false, label %cond.true.5501, label %lor.lhs.false.5481

cond.false.5397:                                  ; preds = %cond.false.5393
  %1506 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5398 = getelementptr inbounds %struct.image, %struct.image* %1506, i32 0, i32 12
  %1507 = load i32, i32* %height5398, align 4
  %cmp5399 = icmp slt i32 %1507, 0
  br i1 %cmp5399, label %cond.true.5401, label %cond.false.5447

cond.true.5401:                                   ; preds = %cond.false.5397
  %1508 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5402 = getelementptr inbounds %struct.image, %struct.image* %1508, i32 0, i32 12
  %1509 = load i32, i32* %height5402, align 4
  %conv5403 = sext i32 %1509 to i64
  %1510 = load i64, i64* %nbytes, align 8
  %mul5404 = mul nsw i64 0, %1510
  %1511 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5405 = getelementptr inbounds %struct.image, %struct.image* %1511, i32 0, i32 12
  %1512 = load i32, i32* %height5405, align 4
  %conv5406 = sext i32 %1512 to i64
  %add5407 = add nsw i64 %mul5404, %conv5406
  %mul5408 = mul nsw i64 0, %add5407
  %sub5409 = sub nsw i64 %mul5408, 1
  %cmp5410 = icmp slt i64 %sub5409, 0
  br i1 %cmp5410, label %cond.true.5412, label %cond.false.5435

cond.true.5412:                                   ; preds = %cond.true.5401
  %1513 = load i64, i64* %nbytes, align 8
  %mul5413 = mul nsw i64 0, %1513
  %1514 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5414 = getelementptr inbounds %struct.image, %struct.image* %1514, i32 0, i32 12
  %1515 = load i32, i32* %height5414, align 4
  %conv5415 = sext i32 %1515 to i64
  %add5416 = add nsw i64 %mul5413, %conv5415
  %mul5417 = mul nsw i64 0, %add5416
  %add5418 = add nsw i64 %mul5417, 0
  %neg5419 = xor i64 %add5418, -1
  %cmp5420 = icmp eq i64 %neg5419, -1
  %conv5421 = zext i1 %cmp5420 to i32
  %sub5422 = sub nsw i32 0, %conv5421
  %conv5423 = sext i32 %sub5422 to i64
  %1516 = load i64, i64* %nbytes, align 8
  %mul5424 = mul nsw i64 0, %1516
  %1517 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5425 = getelementptr inbounds %struct.image, %struct.image* %1517, i32 0, i32 12
  %1518 = load i32, i32* %height5425, align 4
  %conv5426 = sext i32 %1518 to i64
  %add5427 = add nsw i64 %mul5424, %conv5426
  %mul5428 = mul nsw i64 0, %add5427
  %add5429 = add nsw i64 %mul5428, 1
  %shl5430 = shl i64 %add5429, 62
  %sub5431 = sub nsw i64 %shl5430, 1
  %mul5432 = mul nsw i64 %sub5431, 2
  %add5433 = add nsw i64 %mul5432, 1
  %sub5434 = sub nsw i64 %conv5423, %add5433
  br label %cond.end.5442

cond.false.5435:                                  ; preds = %cond.true.5401
  %1519 = load i64, i64* %nbytes, align 8
  %mul5436 = mul nsw i64 0, %1519
  %1520 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5437 = getelementptr inbounds %struct.image, %struct.image* %1520, i32 0, i32 12
  %1521 = load i32, i32* %height5437, align 4
  %conv5438 = sext i32 %1521 to i64
  %add5439 = add nsw i64 %mul5436, %conv5438
  %mul5440 = mul nsw i64 0, %add5439
  %add5441 = add nsw i64 %mul5440, 0
  br label %cond.end.5442

cond.end.5442:                                    ; preds = %cond.false.5435, %cond.true.5412
  %cond5443 = phi i64 [ %sub5434, %cond.true.5412 ], [ %add5441, %cond.false.5435 ]
  %1522 = load i64, i64* %nbytes, align 8
  %div5444 = sdiv i64 %cond5443, %1522
  %cmp5445 = icmp slt i64 %conv5403, %div5444
  br i1 %cmp5445, label %cond.true.5501, label %lor.lhs.false.5481

cond.false.5447:                                  ; preds = %cond.false.5397
  %1523 = load i64, i64* %nbytes, align 8
  %mul5448 = mul nsw i64 0, %1523
  %1524 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5449 = getelementptr inbounds %struct.image, %struct.image* %1524, i32 0, i32 12
  %1525 = load i32, i32* %height5449, align 4
  %conv5450 = sext i32 %1525 to i64
  %add5451 = add nsw i64 %mul5448, %conv5450
  %mul5452 = mul nsw i64 0, %add5451
  %sub5453 = sub nsw i64 %mul5452, 1
  %cmp5454 = icmp slt i64 %sub5453, 0
  br i1 %cmp5454, label %cond.true.5456, label %cond.false.5467

cond.true.5456:                                   ; preds = %cond.false.5447
  %1526 = load i64, i64* %nbytes, align 8
  %mul5457 = mul nsw i64 0, %1526
  %1527 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5458 = getelementptr inbounds %struct.image, %struct.image* %1527, i32 0, i32 12
  %1528 = load i32, i32* %height5458, align 4
  %conv5459 = sext i32 %1528 to i64
  %add5460 = add nsw i64 %mul5457, %conv5459
  %mul5461 = mul nsw i64 0, %add5460
  %add5462 = add nsw i64 %mul5461, 1
  %shl5463 = shl i64 %add5462, 62
  %sub5464 = sub nsw i64 %shl5463, 1
  %mul5465 = mul nsw i64 %sub5464, 2
  %add5466 = add nsw i64 %mul5465, 1
  br label %cond.end.5474

cond.false.5467:                                  ; preds = %cond.false.5447
  %1529 = load i64, i64* %nbytes, align 8
  %mul5468 = mul nsw i64 0, %1529
  %1530 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5469 = getelementptr inbounds %struct.image, %struct.image* %1530, i32 0, i32 12
  %1531 = load i32, i32* %height5469, align 4
  %conv5470 = sext i32 %1531 to i64
  %add5471 = add nsw i64 %mul5468, %conv5470
  %mul5472 = mul nsw i64 0, %add5471
  %sub5473 = sub nsw i64 %mul5472, 1
  br label %cond.end.5474

cond.end.5474:                                    ; preds = %cond.false.5467, %cond.true.5456
  %cond5475 = phi i64 [ %add5466, %cond.true.5456 ], [ %sub5473, %cond.false.5467 ]
  %1532 = load i64, i64* %nbytes, align 8
  %div5476 = sdiv i64 %cond5475, %1532
  %1533 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5477 = getelementptr inbounds %struct.image, %struct.image* %1533, i32 0, i32 12
  %1534 = load i32, i32* %height5477, align 4
  %conv5478 = sext i32 %1534 to i64
  %cmp5479 = icmp slt i64 %div5476, %conv5478
  br i1 %cmp5479, label %cond.true.5501, label %lor.lhs.false.5481

lor.lhs.false.5481:                               ; preds = %cond.end.5474, %cond.end.5442, %cond.true.5396, %cond.end.5386, %cond.true.5346, %cond.end.5338
  %1535 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5482 = getelementptr inbounds %struct.image, %struct.image* %1535, i32 0, i32 12
  %1536 = load i32, i32* %height5482, align 4
  %conv5483 = sext i32 %1536 to i64
  %1537 = load i64, i64* %nbytes, align 8
  %mul5484 = mul nsw i64 %conv5483, %1537
  %mul5485 = mul nsw i64 0, %mul5484
  %sub5486 = sub nsw i64 %mul5485, 1
  %cmp5487 = icmp slt i64 %sub5486, 0
  br i1 %cmp5487, label %land.lhs.true.5489, label %lor.lhs.false.5495

land.lhs.true.5489:                               ; preds = %lor.lhs.false.5481
  %1538 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5490 = getelementptr inbounds %struct.image, %struct.image* %1538, i32 0, i32 12
  %1539 = load i32, i32* %height5490, align 4
  %conv5491 = sext i32 %1539 to i64
  %1540 = load i64, i64* %nbytes, align 8
  %mul5492 = mul nsw i64 %conv5491, %1540
  %cmp5493 = icmp slt i64 %mul5492, -9223372036854775808
  br i1 %cmp5493, label %cond.true.5501, label %lor.lhs.false.5495

lor.lhs.false.5495:                               ; preds = %land.lhs.true.5489, %lor.lhs.false.5481
  %1541 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5496 = getelementptr inbounds %struct.image, %struct.image* %1541, i32 0, i32 12
  %1542 = load i32, i32* %height5496, align 4
  %conv5497 = sext i32 %1542 to i64
  %1543 = load i64, i64* %nbytes, align 8
  %mul5498 = mul nsw i64 %conv5497, %1543
  %cmp5499 = icmp slt i64 9223372036854775807, %mul5498
  br i1 %cmp5499, label %cond.true.5501, label %cond.false.5519

cond.true.5501:                                   ; preds = %lor.lhs.false.5495, %land.lhs.true.5489, %cond.end.5474, %cond.end.5442, %cond.true.5396, %cond.end.5386, %cond.true.5346, %cond.end.5338, %land.lhs.true.5298, %land.lhs.true.5292
  %1544 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5502 = getelementptr inbounds %struct.image, %struct.image* %1544, i32 0, i32 12
  %1545 = load i32, i32* %height5502, align 4
  %conv5503 = sext i32 %1545 to i64
  %1546 = load i64, i64* %nbytes, align 8
  %mul5504 = mul i64 %conv5503, %1546
  %cmp5505 = icmp ule i64 %mul5504, 9223372036854775807
  br i1 %cmp5505, label %cond.true.5507, label %cond.false.5511

cond.true.5507:                                   ; preds = %cond.true.5501
  %1547 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5508 = getelementptr inbounds %struct.image, %struct.image* %1547, i32 0, i32 12
  %1548 = load i32, i32* %height5508, align 4
  %conv5509 = sext i32 %1548 to i64
  %1549 = load i64, i64* %nbytes, align 8
  %mul5510 = mul i64 %conv5509, %1549
  br label %cond.end.5517

cond.false.5511:                                  ; preds = %cond.true.5501
  %1550 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5512 = getelementptr inbounds %struct.image, %struct.image* %1550, i32 0, i32 12
  %1551 = load i32, i32* %height5512, align 4
  %conv5513 = sext i32 %1551 to i64
  %1552 = load i64, i64* %nbytes, align 8
  %mul5514 = mul i64 %conv5513, %1552
  %sub5515 = sub i64 %mul5514, -9223372036854775808
  %add5516 = add nsw i64 %sub5515, -9223372036854775808
  br label %cond.end.5517

cond.end.5517:                                    ; preds = %cond.false.5511, %cond.true.5507
  %cond5518 = phi i64 [ %mul5510, %cond.true.5507 ], [ %add5516, %cond.false.5511 ]
  store i64 %cond5518, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.5519:                                  ; preds = %lor.lhs.false.5495
  %1553 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5520 = getelementptr inbounds %struct.image, %struct.image* %1553, i32 0, i32 12
  %1554 = load i32, i32* %height5520, align 4
  %conv5521 = sext i32 %1554 to i64
  %1555 = load i64, i64* %nbytes, align 8
  %mul5522 = mul i64 %conv5521, %1555
  %cmp5523 = icmp ule i64 %mul5522, 9223372036854775807
  br i1 %cmp5523, label %cond.true.5525, label %cond.false.5529

cond.true.5525:                                   ; preds = %cond.false.5519
  %1556 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5526 = getelementptr inbounds %struct.image, %struct.image* %1556, i32 0, i32 12
  %1557 = load i32, i32* %height5526, align 4
  %conv5527 = sext i32 %1557 to i64
  %1558 = load i64, i64* %nbytes, align 8
  %mul5528 = mul i64 %conv5527, %1558
  br label %cond.end.5535

cond.false.5529:                                  ; preds = %cond.false.5519
  %1559 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5530 = getelementptr inbounds %struct.image, %struct.image* %1559, i32 0, i32 12
  %1560 = load i32, i32* %height5530, align 4
  %conv5531 = sext i32 %1560 to i64
  %1561 = load i64, i64* %nbytes, align 8
  %mul5532 = mul i64 %conv5531, %1561
  %sub5533 = sub i64 %mul5532, -9223372036854775808
  %add5534 = add nsw i64 %sub5533, -9223372036854775808
  br label %cond.end.5535

cond.end.5535:                                    ; preds = %cond.false.5529, %cond.true.5525
  %cond5536 = phi i64 [ %mul5528, %cond.true.5525 ], [ %add5534, %cond.false.5529 ]
  store i64 %cond5536, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.5537:                                  ; preds = %cond.false.4947
  br i1 false, label %cond.true.5538, label %cond.false.5834

cond.true.5538:                                   ; preds = %cond.false.5537
  %1562 = load i64, i64* %nbytes, align 8
  %mul5539 = mul nsw i64 0, %1562
  %1563 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5540 = getelementptr inbounds %struct.image, %struct.image* %1563, i32 0, i32 12
  %1564 = load i32, i32* %height5540, align 4
  %conv5541 = sext i32 %1564 to i64
  %add5542 = add nsw i64 %mul5539, %conv5541
  %mul5543 = mul nsw i64 0, %add5542
  %sub5544 = sub nsw i64 %mul5543, 1
  %cmp5545 = icmp slt i64 %sub5544, 0
  br i1 %cmp5545, label %cond.true.5547, label %cond.false.5570

cond.true.5547:                                   ; preds = %cond.true.5538
  %1565 = load i64, i64* %nbytes, align 8
  %mul5548 = mul nsw i64 0, %1565
  %1566 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5549 = getelementptr inbounds %struct.image, %struct.image* %1566, i32 0, i32 12
  %1567 = load i32, i32* %height5549, align 4
  %conv5550 = sext i32 %1567 to i64
  %add5551 = add nsw i64 %mul5548, %conv5550
  %mul5552 = mul nsw i64 0, %add5551
  %add5553 = add nsw i64 %mul5552, 0
  %neg5554 = xor i64 %add5553, -1
  %cmp5555 = icmp eq i64 %neg5554, -1
  %conv5556 = zext i1 %cmp5555 to i32
  %sub5557 = sub nsw i32 0, %conv5556
  %conv5558 = sext i32 %sub5557 to i64
  %1568 = load i64, i64* %nbytes, align 8
  %mul5559 = mul nsw i64 0, %1568
  %1569 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5560 = getelementptr inbounds %struct.image, %struct.image* %1569, i32 0, i32 12
  %1570 = load i32, i32* %height5560, align 4
  %conv5561 = sext i32 %1570 to i64
  %add5562 = add nsw i64 %mul5559, %conv5561
  %mul5563 = mul nsw i64 0, %add5562
  %add5564 = add nsw i64 %mul5563, 1
  %shl5565 = shl i64 %add5564, 62
  %sub5566 = sub nsw i64 %shl5565, 1
  %mul5567 = mul nsw i64 %sub5566, 2
  %add5568 = add nsw i64 %mul5567, 1
  %sub5569 = sub nsw i64 %conv5558, %add5568
  br label %cond.end.5577

cond.false.5570:                                  ; preds = %cond.true.5538
  %1571 = load i64, i64* %nbytes, align 8
  %mul5571 = mul nsw i64 0, %1571
  %1572 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5572 = getelementptr inbounds %struct.image, %struct.image* %1572, i32 0, i32 12
  %1573 = load i32, i32* %height5572, align 4
  %conv5573 = sext i32 %1573 to i64
  %add5574 = add nsw i64 %mul5571, %conv5573
  %mul5575 = mul nsw i64 0, %add5574
  %add5576 = add nsw i64 %mul5575, 0
  br label %cond.end.5577

cond.end.5577:                                    ; preds = %cond.false.5570, %cond.true.5547
  %cond5578 = phi i64 [ %sub5569, %cond.true.5547 ], [ %add5576, %cond.false.5570 ]
  %cmp5579 = icmp eq i64 %cond5578, 0
  br i1 %cmp5579, label %land.lhs.true.5581, label %lor.lhs.false.5597

land.lhs.true.5581:                               ; preds = %cond.end.5577
  %1574 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5582 = getelementptr inbounds %struct.image, %struct.image* %1574, i32 0, i32 12
  %1575 = load i32, i32* %height5582, align 4
  %conv5583 = sext i32 %1575 to i64
  %cmp5584 = icmp slt i64 %conv5583, 0
  br i1 %cmp5584, label %land.lhs.true.5586, label %lor.lhs.false.5589

land.lhs.true.5586:                               ; preds = %land.lhs.true.5581
  %1576 = load i64, i64* %nbytes, align 8
  %cmp5587 = icmp slt i64 0, %1576
  br i1 %cmp5587, label %cond.true.5798, label %lor.lhs.false.5589

lor.lhs.false.5589:                               ; preds = %land.lhs.true.5586, %land.lhs.true.5581
  %1577 = load i64, i64* %nbytes, align 8
  %cmp5590 = icmp slt i64 %1577, 0
  br i1 %cmp5590, label %land.lhs.true.5592, label %lor.lhs.false.5597

land.lhs.true.5592:                               ; preds = %lor.lhs.false.5589
  %1578 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5593 = getelementptr inbounds %struct.image, %struct.image* %1578, i32 0, i32 12
  %1579 = load i32, i32* %height5593, align 4
  %conv5594 = sext i32 %1579 to i64
  %cmp5595 = icmp slt i64 0, %conv5594
  br i1 %cmp5595, label %cond.true.5798, label %lor.lhs.false.5597

lor.lhs.false.5597:                               ; preds = %land.lhs.true.5592, %lor.lhs.false.5589, %cond.end.5577
  %1580 = load i64, i64* %nbytes, align 8
  %cmp5598 = icmp slt i64 %1580, 0
  br i1 %cmp5598, label %cond.true.5600, label %cond.false.5689

cond.true.5600:                                   ; preds = %lor.lhs.false.5597
  %1581 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5601 = getelementptr inbounds %struct.image, %struct.image* %1581, i32 0, i32 12
  %1582 = load i32, i32* %height5601, align 4
  %conv5602 = sext i32 %1582 to i64
  %cmp5603 = icmp slt i64 %conv5602, 0
  br i1 %cmp5603, label %cond.true.5605, label %cond.false.5639

cond.true.5605:                                   ; preds = %cond.true.5600
  %1583 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5606 = getelementptr inbounds %struct.image, %struct.image* %1583, i32 0, i32 12
  %1584 = load i32, i32* %height5606, align 4
  %conv5607 = sext i32 %1584 to i64
  %1585 = load i64, i64* %nbytes, align 8
  %mul5608 = mul nsw i64 0, %1585
  %1586 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5609 = getelementptr inbounds %struct.image, %struct.image* %1586, i32 0, i32 12
  %1587 = load i32, i32* %height5609, align 4
  %conv5610 = sext i32 %1587 to i64
  %add5611 = add nsw i64 %mul5608, %conv5610
  %mul5612 = mul nsw i64 0, %add5611
  %sub5613 = sub nsw i64 %mul5612, 1
  %cmp5614 = icmp slt i64 %sub5613, 0
  br i1 %cmp5614, label %cond.true.5616, label %cond.false.5627

cond.true.5616:                                   ; preds = %cond.true.5605
  %1588 = load i64, i64* %nbytes, align 8
  %mul5617 = mul nsw i64 0, %1588
  %1589 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5618 = getelementptr inbounds %struct.image, %struct.image* %1589, i32 0, i32 12
  %1590 = load i32, i32* %height5618, align 4
  %conv5619 = sext i32 %1590 to i64
  %add5620 = add nsw i64 %mul5617, %conv5619
  %mul5621 = mul nsw i64 0, %add5620
  %add5622 = add nsw i64 %mul5621, 1
  %shl5623 = shl i64 %add5622, 62
  %sub5624 = sub nsw i64 %shl5623, 1
  %mul5625 = mul nsw i64 %sub5624, 2
  %add5626 = add nsw i64 %mul5625, 1
  br label %cond.end.5634

cond.false.5627:                                  ; preds = %cond.true.5605
  %1591 = load i64, i64* %nbytes, align 8
  %mul5628 = mul nsw i64 0, %1591
  %1592 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5629 = getelementptr inbounds %struct.image, %struct.image* %1592, i32 0, i32 12
  %1593 = load i32, i32* %height5629, align 4
  %conv5630 = sext i32 %1593 to i64
  %add5631 = add nsw i64 %mul5628, %conv5630
  %mul5632 = mul nsw i64 0, %add5631
  %sub5633 = sub nsw i64 %mul5632, 1
  br label %cond.end.5634

cond.end.5634:                                    ; preds = %cond.false.5627, %cond.true.5616
  %cond5635 = phi i64 [ %add5626, %cond.true.5616 ], [ %sub5633, %cond.false.5627 ]
  %1594 = load i64, i64* %nbytes, align 8
  %div5636 = sdiv i64 %cond5635, %1594
  %cmp5637 = icmp slt i64 %conv5607, %div5636
  br i1 %cmp5637, label %cond.true.5798, label %lor.lhs.false.5778

cond.false.5639:                                  ; preds = %cond.true.5600
  %1595 = load i64, i64* %nbytes, align 8
  %cmp5640 = icmp eq i64 %1595, -1
  br i1 %cmp5640, label %cond.true.5642, label %cond.false.5643

cond.true.5642:                                   ; preds = %cond.false.5639
  br i1 false, label %cond.true.5798, label %lor.lhs.false.5778

cond.false.5643:                                  ; preds = %cond.false.5639
  %1596 = load i64, i64* %nbytes, align 8
  %mul5644 = mul nsw i64 0, %1596
  %1597 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5645 = getelementptr inbounds %struct.image, %struct.image* %1597, i32 0, i32 12
  %1598 = load i32, i32* %height5645, align 4
  %conv5646 = sext i32 %1598 to i64
  %add5647 = add nsw i64 %mul5644, %conv5646
  %mul5648 = mul nsw i64 0, %add5647
  %sub5649 = sub nsw i64 %mul5648, 1
  %cmp5650 = icmp slt i64 %sub5649, 0
  br i1 %cmp5650, label %cond.true.5652, label %cond.false.5675

cond.true.5652:                                   ; preds = %cond.false.5643
  %1599 = load i64, i64* %nbytes, align 8
  %mul5653 = mul nsw i64 0, %1599
  %1600 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5654 = getelementptr inbounds %struct.image, %struct.image* %1600, i32 0, i32 12
  %1601 = load i32, i32* %height5654, align 4
  %conv5655 = sext i32 %1601 to i64
  %add5656 = add nsw i64 %mul5653, %conv5655
  %mul5657 = mul nsw i64 0, %add5656
  %add5658 = add nsw i64 %mul5657, 0
  %neg5659 = xor i64 %add5658, -1
  %cmp5660 = icmp eq i64 %neg5659, -1
  %conv5661 = zext i1 %cmp5660 to i32
  %sub5662 = sub nsw i32 0, %conv5661
  %conv5663 = sext i32 %sub5662 to i64
  %1602 = load i64, i64* %nbytes, align 8
  %mul5664 = mul nsw i64 0, %1602
  %1603 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5665 = getelementptr inbounds %struct.image, %struct.image* %1603, i32 0, i32 12
  %1604 = load i32, i32* %height5665, align 4
  %conv5666 = sext i32 %1604 to i64
  %add5667 = add nsw i64 %mul5664, %conv5666
  %mul5668 = mul nsw i64 0, %add5667
  %add5669 = add nsw i64 %mul5668, 1
  %shl5670 = shl i64 %add5669, 62
  %sub5671 = sub nsw i64 %shl5670, 1
  %mul5672 = mul nsw i64 %sub5671, 2
  %add5673 = add nsw i64 %mul5672, 1
  %sub5674 = sub nsw i64 %conv5663, %add5673
  br label %cond.end.5682

cond.false.5675:                                  ; preds = %cond.false.5643
  %1605 = load i64, i64* %nbytes, align 8
  %mul5676 = mul nsw i64 0, %1605
  %1606 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5677 = getelementptr inbounds %struct.image, %struct.image* %1606, i32 0, i32 12
  %1607 = load i32, i32* %height5677, align 4
  %conv5678 = sext i32 %1607 to i64
  %add5679 = add nsw i64 %mul5676, %conv5678
  %mul5680 = mul nsw i64 0, %add5679
  %add5681 = add nsw i64 %mul5680, 0
  br label %cond.end.5682

cond.end.5682:                                    ; preds = %cond.false.5675, %cond.true.5652
  %cond5683 = phi i64 [ %sub5674, %cond.true.5652 ], [ %add5681, %cond.false.5675 ]
  %1608 = load i64, i64* %nbytes, align 8
  %div5684 = sdiv i64 %cond5683, %1608
  %1609 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5685 = getelementptr inbounds %struct.image, %struct.image* %1609, i32 0, i32 12
  %1610 = load i32, i32* %height5685, align 4
  %conv5686 = sext i32 %1610 to i64
  %cmp5687 = icmp slt i64 %div5684, %conv5686
  br i1 %cmp5687, label %cond.true.5798, label %lor.lhs.false.5778

cond.false.5689:                                  ; preds = %lor.lhs.false.5597
  %1611 = load i64, i64* %nbytes, align 8
  %cmp5690 = icmp eq i64 %1611, 0
  br i1 %cmp5690, label %cond.true.5692, label %cond.false.5693

cond.true.5692:                                   ; preds = %cond.false.5689
  br i1 false, label %cond.true.5798, label %lor.lhs.false.5778

cond.false.5693:                                  ; preds = %cond.false.5689
  %1612 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5694 = getelementptr inbounds %struct.image, %struct.image* %1612, i32 0, i32 12
  %1613 = load i32, i32* %height5694, align 4
  %conv5695 = sext i32 %1613 to i64
  %cmp5696 = icmp slt i64 %conv5695, 0
  br i1 %cmp5696, label %cond.true.5698, label %cond.false.5744

cond.true.5698:                                   ; preds = %cond.false.5693
  %1614 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5699 = getelementptr inbounds %struct.image, %struct.image* %1614, i32 0, i32 12
  %1615 = load i32, i32* %height5699, align 4
  %conv5700 = sext i32 %1615 to i64
  %1616 = load i64, i64* %nbytes, align 8
  %mul5701 = mul nsw i64 0, %1616
  %1617 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5702 = getelementptr inbounds %struct.image, %struct.image* %1617, i32 0, i32 12
  %1618 = load i32, i32* %height5702, align 4
  %conv5703 = sext i32 %1618 to i64
  %add5704 = add nsw i64 %mul5701, %conv5703
  %mul5705 = mul nsw i64 0, %add5704
  %sub5706 = sub nsw i64 %mul5705, 1
  %cmp5707 = icmp slt i64 %sub5706, 0
  br i1 %cmp5707, label %cond.true.5709, label %cond.false.5732

cond.true.5709:                                   ; preds = %cond.true.5698
  %1619 = load i64, i64* %nbytes, align 8
  %mul5710 = mul nsw i64 0, %1619
  %1620 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5711 = getelementptr inbounds %struct.image, %struct.image* %1620, i32 0, i32 12
  %1621 = load i32, i32* %height5711, align 4
  %conv5712 = sext i32 %1621 to i64
  %add5713 = add nsw i64 %mul5710, %conv5712
  %mul5714 = mul nsw i64 0, %add5713
  %add5715 = add nsw i64 %mul5714, 0
  %neg5716 = xor i64 %add5715, -1
  %cmp5717 = icmp eq i64 %neg5716, -1
  %conv5718 = zext i1 %cmp5717 to i32
  %sub5719 = sub nsw i32 0, %conv5718
  %conv5720 = sext i32 %sub5719 to i64
  %1622 = load i64, i64* %nbytes, align 8
  %mul5721 = mul nsw i64 0, %1622
  %1623 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5722 = getelementptr inbounds %struct.image, %struct.image* %1623, i32 0, i32 12
  %1624 = load i32, i32* %height5722, align 4
  %conv5723 = sext i32 %1624 to i64
  %add5724 = add nsw i64 %mul5721, %conv5723
  %mul5725 = mul nsw i64 0, %add5724
  %add5726 = add nsw i64 %mul5725, 1
  %shl5727 = shl i64 %add5726, 62
  %sub5728 = sub nsw i64 %shl5727, 1
  %mul5729 = mul nsw i64 %sub5728, 2
  %add5730 = add nsw i64 %mul5729, 1
  %sub5731 = sub nsw i64 %conv5720, %add5730
  br label %cond.end.5739

cond.false.5732:                                  ; preds = %cond.true.5698
  %1625 = load i64, i64* %nbytes, align 8
  %mul5733 = mul nsw i64 0, %1625
  %1626 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5734 = getelementptr inbounds %struct.image, %struct.image* %1626, i32 0, i32 12
  %1627 = load i32, i32* %height5734, align 4
  %conv5735 = sext i32 %1627 to i64
  %add5736 = add nsw i64 %mul5733, %conv5735
  %mul5737 = mul nsw i64 0, %add5736
  %add5738 = add nsw i64 %mul5737, 0
  br label %cond.end.5739

cond.end.5739:                                    ; preds = %cond.false.5732, %cond.true.5709
  %cond5740 = phi i64 [ %sub5731, %cond.true.5709 ], [ %add5738, %cond.false.5732 ]
  %1628 = load i64, i64* %nbytes, align 8
  %div5741 = sdiv i64 %cond5740, %1628
  %cmp5742 = icmp slt i64 %conv5700, %div5741
  br i1 %cmp5742, label %cond.true.5798, label %lor.lhs.false.5778

cond.false.5744:                                  ; preds = %cond.false.5693
  %1629 = load i64, i64* %nbytes, align 8
  %mul5745 = mul nsw i64 0, %1629
  %1630 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5746 = getelementptr inbounds %struct.image, %struct.image* %1630, i32 0, i32 12
  %1631 = load i32, i32* %height5746, align 4
  %conv5747 = sext i32 %1631 to i64
  %add5748 = add nsw i64 %mul5745, %conv5747
  %mul5749 = mul nsw i64 0, %add5748
  %sub5750 = sub nsw i64 %mul5749, 1
  %cmp5751 = icmp slt i64 %sub5750, 0
  br i1 %cmp5751, label %cond.true.5753, label %cond.false.5764

cond.true.5753:                                   ; preds = %cond.false.5744
  %1632 = load i64, i64* %nbytes, align 8
  %mul5754 = mul nsw i64 0, %1632
  %1633 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5755 = getelementptr inbounds %struct.image, %struct.image* %1633, i32 0, i32 12
  %1634 = load i32, i32* %height5755, align 4
  %conv5756 = sext i32 %1634 to i64
  %add5757 = add nsw i64 %mul5754, %conv5756
  %mul5758 = mul nsw i64 0, %add5757
  %add5759 = add nsw i64 %mul5758, 1
  %shl5760 = shl i64 %add5759, 62
  %sub5761 = sub nsw i64 %shl5760, 1
  %mul5762 = mul nsw i64 %sub5761, 2
  %add5763 = add nsw i64 %mul5762, 1
  br label %cond.end.5771

cond.false.5764:                                  ; preds = %cond.false.5744
  %1635 = load i64, i64* %nbytes, align 8
  %mul5765 = mul nsw i64 0, %1635
  %1636 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5766 = getelementptr inbounds %struct.image, %struct.image* %1636, i32 0, i32 12
  %1637 = load i32, i32* %height5766, align 4
  %conv5767 = sext i32 %1637 to i64
  %add5768 = add nsw i64 %mul5765, %conv5767
  %mul5769 = mul nsw i64 0, %add5768
  %sub5770 = sub nsw i64 %mul5769, 1
  br label %cond.end.5771

cond.end.5771:                                    ; preds = %cond.false.5764, %cond.true.5753
  %cond5772 = phi i64 [ %add5763, %cond.true.5753 ], [ %sub5770, %cond.false.5764 ]
  %1638 = load i64, i64* %nbytes, align 8
  %div5773 = sdiv i64 %cond5772, %1638
  %1639 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5774 = getelementptr inbounds %struct.image, %struct.image* %1639, i32 0, i32 12
  %1640 = load i32, i32* %height5774, align 4
  %conv5775 = sext i32 %1640 to i64
  %cmp5776 = icmp slt i64 %div5773, %conv5775
  br i1 %cmp5776, label %cond.true.5798, label %lor.lhs.false.5778

lor.lhs.false.5778:                               ; preds = %cond.end.5771, %cond.end.5739, %cond.true.5692, %cond.end.5682, %cond.true.5642, %cond.end.5634
  %1641 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5779 = getelementptr inbounds %struct.image, %struct.image* %1641, i32 0, i32 12
  %1642 = load i32, i32* %height5779, align 4
  %conv5780 = sext i32 %1642 to i64
  %1643 = load i64, i64* %nbytes, align 8
  %mul5781 = mul nsw i64 %conv5780, %1643
  %mul5782 = mul nsw i64 0, %mul5781
  %sub5783 = sub nsw i64 %mul5782, 1
  %cmp5784 = icmp slt i64 %sub5783, 0
  br i1 %cmp5784, label %land.lhs.true.5786, label %lor.lhs.false.5792

land.lhs.true.5786:                               ; preds = %lor.lhs.false.5778
  %1644 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5787 = getelementptr inbounds %struct.image, %struct.image* %1644, i32 0, i32 12
  %1645 = load i32, i32* %height5787, align 4
  %conv5788 = sext i32 %1645 to i64
  %1646 = load i64, i64* %nbytes, align 8
  %mul5789 = mul nsw i64 %conv5788, %1646
  %cmp5790 = icmp slt i64 %mul5789, -9223372036854775808
  br i1 %cmp5790, label %cond.true.5798, label %lor.lhs.false.5792

lor.lhs.false.5792:                               ; preds = %land.lhs.true.5786, %lor.lhs.false.5778
  %1647 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5793 = getelementptr inbounds %struct.image, %struct.image* %1647, i32 0, i32 12
  %1648 = load i32, i32* %height5793, align 4
  %conv5794 = sext i32 %1648 to i64
  %1649 = load i64, i64* %nbytes, align 8
  %mul5795 = mul nsw i64 %conv5794, %1649
  %cmp5796 = icmp slt i64 9223372036854775807, %mul5795
  br i1 %cmp5796, label %cond.true.5798, label %cond.false.5816

cond.true.5798:                                   ; preds = %lor.lhs.false.5792, %land.lhs.true.5786, %cond.end.5771, %cond.end.5739, %cond.true.5692, %cond.end.5682, %cond.true.5642, %cond.end.5634, %land.lhs.true.5592, %land.lhs.true.5586
  %1650 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5799 = getelementptr inbounds %struct.image, %struct.image* %1650, i32 0, i32 12
  %1651 = load i32, i32* %height5799, align 4
  %conv5800 = sext i32 %1651 to i64
  %1652 = load i64, i64* %nbytes, align 8
  %mul5801 = mul i64 %conv5800, %1652
  %cmp5802 = icmp ule i64 %mul5801, 9223372036854775807
  br i1 %cmp5802, label %cond.true.5804, label %cond.false.5808

cond.true.5804:                                   ; preds = %cond.true.5798
  %1653 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5805 = getelementptr inbounds %struct.image, %struct.image* %1653, i32 0, i32 12
  %1654 = load i32, i32* %height5805, align 4
  %conv5806 = sext i32 %1654 to i64
  %1655 = load i64, i64* %nbytes, align 8
  %mul5807 = mul i64 %conv5806, %1655
  br label %cond.end.5814

cond.false.5808:                                  ; preds = %cond.true.5798
  %1656 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5809 = getelementptr inbounds %struct.image, %struct.image* %1656, i32 0, i32 12
  %1657 = load i32, i32* %height5809, align 4
  %conv5810 = sext i32 %1657 to i64
  %1658 = load i64, i64* %nbytes, align 8
  %mul5811 = mul i64 %conv5810, %1658
  %sub5812 = sub i64 %mul5811, -9223372036854775808
  %add5813 = add nsw i64 %sub5812, -9223372036854775808
  br label %cond.end.5814

cond.end.5814:                                    ; preds = %cond.false.5808, %cond.true.5804
  %cond5815 = phi i64 [ %mul5807, %cond.true.5804 ], [ %add5813, %cond.false.5808 ]
  store i64 %cond5815, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.5816:                                  ; preds = %lor.lhs.false.5792
  %1659 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5817 = getelementptr inbounds %struct.image, %struct.image* %1659, i32 0, i32 12
  %1660 = load i32, i32* %height5817, align 4
  %conv5818 = sext i32 %1660 to i64
  %1661 = load i64, i64* %nbytes, align 8
  %mul5819 = mul i64 %conv5818, %1661
  %cmp5820 = icmp ule i64 %mul5819, 9223372036854775807
  br i1 %cmp5820, label %cond.true.5822, label %cond.false.5826

cond.true.5822:                                   ; preds = %cond.false.5816
  %1662 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5823 = getelementptr inbounds %struct.image, %struct.image* %1662, i32 0, i32 12
  %1663 = load i32, i32* %height5823, align 4
  %conv5824 = sext i32 %1663 to i64
  %1664 = load i64, i64* %nbytes, align 8
  %mul5825 = mul i64 %conv5824, %1664
  br label %cond.end.5832

cond.false.5826:                                  ; preds = %cond.false.5816
  %1665 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5827 = getelementptr inbounds %struct.image, %struct.image* %1665, i32 0, i32 12
  %1666 = load i32, i32* %height5827, align 4
  %conv5828 = sext i32 %1666 to i64
  %1667 = load i64, i64* %nbytes, align 8
  %mul5829 = mul i64 %conv5828, %1667
  %sub5830 = sub i64 %mul5829, -9223372036854775808
  %add5831 = add nsw i64 %sub5830, -9223372036854775808
  br label %cond.end.5832

cond.end.5832:                                    ; preds = %cond.false.5826, %cond.true.5822
  %cond5833 = phi i64 [ %mul5825, %cond.true.5822 ], [ %add5831, %cond.false.5826 ]
  store i64 %cond5833, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.5834:                                  ; preds = %cond.false.5537
  %1668 = load i64, i64* %nbytes, align 8
  %mul5835 = mul nsw i64 0, %1668
  %1669 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5836 = getelementptr inbounds %struct.image, %struct.image* %1669, i32 0, i32 12
  %1670 = load i32, i32* %height5836, align 4
  %conv5837 = sext i32 %1670 to i64
  %add5838 = add nsw i64 %mul5835, %conv5837
  %mul5839 = mul nsw i64 0, %add5838
  %sub5840 = sub nsw i64 %mul5839, 1
  %cmp5841 = icmp slt i64 %sub5840, 0
  br i1 %cmp5841, label %cond.true.5843, label %cond.false.5866

cond.true.5843:                                   ; preds = %cond.false.5834
  %1671 = load i64, i64* %nbytes, align 8
  %mul5844 = mul nsw i64 0, %1671
  %1672 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5845 = getelementptr inbounds %struct.image, %struct.image* %1672, i32 0, i32 12
  %1673 = load i32, i32* %height5845, align 4
  %conv5846 = sext i32 %1673 to i64
  %add5847 = add nsw i64 %mul5844, %conv5846
  %mul5848 = mul nsw i64 0, %add5847
  %add5849 = add nsw i64 %mul5848, 0
  %neg5850 = xor i64 %add5849, -1
  %cmp5851 = icmp eq i64 %neg5850, -1
  %conv5852 = zext i1 %cmp5851 to i32
  %sub5853 = sub nsw i32 0, %conv5852
  %conv5854 = sext i32 %sub5853 to i64
  %1674 = load i64, i64* %nbytes, align 8
  %mul5855 = mul nsw i64 0, %1674
  %1675 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5856 = getelementptr inbounds %struct.image, %struct.image* %1675, i32 0, i32 12
  %1676 = load i32, i32* %height5856, align 4
  %conv5857 = sext i32 %1676 to i64
  %add5858 = add nsw i64 %mul5855, %conv5857
  %mul5859 = mul nsw i64 0, %add5858
  %add5860 = add nsw i64 %mul5859, 1
  %shl5861 = shl i64 %add5860, 62
  %sub5862 = sub nsw i64 %shl5861, 1
  %mul5863 = mul nsw i64 %sub5862, 2
  %add5864 = add nsw i64 %mul5863, 1
  %sub5865 = sub nsw i64 %conv5854, %add5864
  br label %cond.end.5873

cond.false.5866:                                  ; preds = %cond.false.5834
  %1677 = load i64, i64* %nbytes, align 8
  %mul5867 = mul nsw i64 0, %1677
  %1678 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5868 = getelementptr inbounds %struct.image, %struct.image* %1678, i32 0, i32 12
  %1679 = load i32, i32* %height5868, align 4
  %conv5869 = sext i32 %1679 to i64
  %add5870 = add nsw i64 %mul5867, %conv5869
  %mul5871 = mul nsw i64 0, %add5870
  %add5872 = add nsw i64 %mul5871, 0
  br label %cond.end.5873

cond.end.5873:                                    ; preds = %cond.false.5866, %cond.true.5843
  %cond5874 = phi i64 [ %sub5865, %cond.true.5843 ], [ %add5872, %cond.false.5866 ]
  %cmp5875 = icmp eq i64 %cond5874, 0
  br i1 %cmp5875, label %land.lhs.true.5877, label %lor.lhs.false.5891

land.lhs.true.5877:                               ; preds = %cond.end.5873
  %1680 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5878 = getelementptr inbounds %struct.image, %struct.image* %1680, i32 0, i32 12
  %1681 = load i32, i32* %height5878, align 4
  %cmp5879 = icmp slt i32 %1681, 0
  br i1 %cmp5879, label %land.lhs.true.5881, label %lor.lhs.false.5884

land.lhs.true.5881:                               ; preds = %land.lhs.true.5877
  %1682 = load i64, i64* %nbytes, align 8
  %cmp5882 = icmp slt i64 0, %1682
  br i1 %cmp5882, label %cond.true.6090, label %lor.lhs.false.5884

lor.lhs.false.5884:                               ; preds = %land.lhs.true.5881, %land.lhs.true.5877
  %1683 = load i64, i64* %nbytes, align 8
  %cmp5885 = icmp slt i64 %1683, 0
  br i1 %cmp5885, label %land.lhs.true.5887, label %lor.lhs.false.5891

land.lhs.true.5887:                               ; preds = %lor.lhs.false.5884
  %1684 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5888 = getelementptr inbounds %struct.image, %struct.image* %1684, i32 0, i32 12
  %1685 = load i32, i32* %height5888, align 4
  %cmp5889 = icmp slt i32 0, %1685
  br i1 %cmp5889, label %cond.true.6090, label %lor.lhs.false.5891

lor.lhs.false.5891:                               ; preds = %land.lhs.true.5887, %lor.lhs.false.5884, %cond.end.5873
  %1686 = load i64, i64* %nbytes, align 8
  %cmp5892 = icmp slt i64 %1686, 0
  br i1 %cmp5892, label %cond.true.5894, label %cond.false.5982

cond.true.5894:                                   ; preds = %lor.lhs.false.5891
  %1687 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5895 = getelementptr inbounds %struct.image, %struct.image* %1687, i32 0, i32 12
  %1688 = load i32, i32* %height5895, align 4
  %cmp5896 = icmp slt i32 %1688, 0
  br i1 %cmp5896, label %cond.true.5898, label %cond.false.5932

cond.true.5898:                                   ; preds = %cond.true.5894
  %1689 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5899 = getelementptr inbounds %struct.image, %struct.image* %1689, i32 0, i32 12
  %1690 = load i32, i32* %height5899, align 4
  %conv5900 = sext i32 %1690 to i64
  %1691 = load i64, i64* %nbytes, align 8
  %mul5901 = mul nsw i64 0, %1691
  %1692 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5902 = getelementptr inbounds %struct.image, %struct.image* %1692, i32 0, i32 12
  %1693 = load i32, i32* %height5902, align 4
  %conv5903 = sext i32 %1693 to i64
  %add5904 = add nsw i64 %mul5901, %conv5903
  %mul5905 = mul nsw i64 0, %add5904
  %sub5906 = sub nsw i64 %mul5905, 1
  %cmp5907 = icmp slt i64 %sub5906, 0
  br i1 %cmp5907, label %cond.true.5909, label %cond.false.5920

cond.true.5909:                                   ; preds = %cond.true.5898
  %1694 = load i64, i64* %nbytes, align 8
  %mul5910 = mul nsw i64 0, %1694
  %1695 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5911 = getelementptr inbounds %struct.image, %struct.image* %1695, i32 0, i32 12
  %1696 = load i32, i32* %height5911, align 4
  %conv5912 = sext i32 %1696 to i64
  %add5913 = add nsw i64 %mul5910, %conv5912
  %mul5914 = mul nsw i64 0, %add5913
  %add5915 = add nsw i64 %mul5914, 1
  %shl5916 = shl i64 %add5915, 62
  %sub5917 = sub nsw i64 %shl5916, 1
  %mul5918 = mul nsw i64 %sub5917, 2
  %add5919 = add nsw i64 %mul5918, 1
  br label %cond.end.5927

cond.false.5920:                                  ; preds = %cond.true.5898
  %1697 = load i64, i64* %nbytes, align 8
  %mul5921 = mul nsw i64 0, %1697
  %1698 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5922 = getelementptr inbounds %struct.image, %struct.image* %1698, i32 0, i32 12
  %1699 = load i32, i32* %height5922, align 4
  %conv5923 = sext i32 %1699 to i64
  %add5924 = add nsw i64 %mul5921, %conv5923
  %mul5925 = mul nsw i64 0, %add5924
  %sub5926 = sub nsw i64 %mul5925, 1
  br label %cond.end.5927

cond.end.5927:                                    ; preds = %cond.false.5920, %cond.true.5909
  %cond5928 = phi i64 [ %add5919, %cond.true.5909 ], [ %sub5926, %cond.false.5920 ]
  %1700 = load i64, i64* %nbytes, align 8
  %div5929 = sdiv i64 %cond5928, %1700
  %cmp5930 = icmp slt i64 %conv5900, %div5929
  br i1 %cmp5930, label %cond.true.6090, label %lor.lhs.false.6070

cond.false.5932:                                  ; preds = %cond.true.5894
  %1701 = load i64, i64* %nbytes, align 8
  %cmp5933 = icmp eq i64 %1701, -1
  br i1 %cmp5933, label %cond.true.5935, label %cond.false.5936

cond.true.5935:                                   ; preds = %cond.false.5932
  br i1 false, label %cond.true.6090, label %lor.lhs.false.6070

cond.false.5936:                                  ; preds = %cond.false.5932
  %1702 = load i64, i64* %nbytes, align 8
  %mul5937 = mul nsw i64 0, %1702
  %1703 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5938 = getelementptr inbounds %struct.image, %struct.image* %1703, i32 0, i32 12
  %1704 = load i32, i32* %height5938, align 4
  %conv5939 = sext i32 %1704 to i64
  %add5940 = add nsw i64 %mul5937, %conv5939
  %mul5941 = mul nsw i64 0, %add5940
  %sub5942 = sub nsw i64 %mul5941, 1
  %cmp5943 = icmp slt i64 %sub5942, 0
  br i1 %cmp5943, label %cond.true.5945, label %cond.false.5968

cond.true.5945:                                   ; preds = %cond.false.5936
  %1705 = load i64, i64* %nbytes, align 8
  %mul5946 = mul nsw i64 0, %1705
  %1706 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5947 = getelementptr inbounds %struct.image, %struct.image* %1706, i32 0, i32 12
  %1707 = load i32, i32* %height5947, align 4
  %conv5948 = sext i32 %1707 to i64
  %add5949 = add nsw i64 %mul5946, %conv5948
  %mul5950 = mul nsw i64 0, %add5949
  %add5951 = add nsw i64 %mul5950, 0
  %neg5952 = xor i64 %add5951, -1
  %cmp5953 = icmp eq i64 %neg5952, -1
  %conv5954 = zext i1 %cmp5953 to i32
  %sub5955 = sub nsw i32 0, %conv5954
  %conv5956 = sext i32 %sub5955 to i64
  %1708 = load i64, i64* %nbytes, align 8
  %mul5957 = mul nsw i64 0, %1708
  %1709 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5958 = getelementptr inbounds %struct.image, %struct.image* %1709, i32 0, i32 12
  %1710 = load i32, i32* %height5958, align 4
  %conv5959 = sext i32 %1710 to i64
  %add5960 = add nsw i64 %mul5957, %conv5959
  %mul5961 = mul nsw i64 0, %add5960
  %add5962 = add nsw i64 %mul5961, 1
  %shl5963 = shl i64 %add5962, 62
  %sub5964 = sub nsw i64 %shl5963, 1
  %mul5965 = mul nsw i64 %sub5964, 2
  %add5966 = add nsw i64 %mul5965, 1
  %sub5967 = sub nsw i64 %conv5956, %add5966
  br label %cond.end.5975

cond.false.5968:                                  ; preds = %cond.false.5936
  %1711 = load i64, i64* %nbytes, align 8
  %mul5969 = mul nsw i64 0, %1711
  %1712 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5970 = getelementptr inbounds %struct.image, %struct.image* %1712, i32 0, i32 12
  %1713 = load i32, i32* %height5970, align 4
  %conv5971 = sext i32 %1713 to i64
  %add5972 = add nsw i64 %mul5969, %conv5971
  %mul5973 = mul nsw i64 0, %add5972
  %add5974 = add nsw i64 %mul5973, 0
  br label %cond.end.5975

cond.end.5975:                                    ; preds = %cond.false.5968, %cond.true.5945
  %cond5976 = phi i64 [ %sub5967, %cond.true.5945 ], [ %add5974, %cond.false.5968 ]
  %1714 = load i64, i64* %nbytes, align 8
  %div5977 = sdiv i64 %cond5976, %1714
  %1715 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5978 = getelementptr inbounds %struct.image, %struct.image* %1715, i32 0, i32 12
  %1716 = load i32, i32* %height5978, align 4
  %conv5979 = sext i32 %1716 to i64
  %cmp5980 = icmp slt i64 %div5977, %conv5979
  br i1 %cmp5980, label %cond.true.6090, label %lor.lhs.false.6070

cond.false.5982:                                  ; preds = %lor.lhs.false.5891
  %1717 = load i64, i64* %nbytes, align 8
  %cmp5983 = icmp eq i64 %1717, 0
  br i1 %cmp5983, label %cond.true.5985, label %cond.false.5986

cond.true.5985:                                   ; preds = %cond.false.5982
  br i1 false, label %cond.true.6090, label %lor.lhs.false.6070

cond.false.5986:                                  ; preds = %cond.false.5982
  %1718 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5987 = getelementptr inbounds %struct.image, %struct.image* %1718, i32 0, i32 12
  %1719 = load i32, i32* %height5987, align 4
  %cmp5988 = icmp slt i32 %1719, 0
  br i1 %cmp5988, label %cond.true.5990, label %cond.false.6036

cond.true.5990:                                   ; preds = %cond.false.5986
  %1720 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5991 = getelementptr inbounds %struct.image, %struct.image* %1720, i32 0, i32 12
  %1721 = load i32, i32* %height5991, align 4
  %conv5992 = sext i32 %1721 to i64
  %1722 = load i64, i64* %nbytes, align 8
  %mul5993 = mul nsw i64 0, %1722
  %1723 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5994 = getelementptr inbounds %struct.image, %struct.image* %1723, i32 0, i32 12
  %1724 = load i32, i32* %height5994, align 4
  %conv5995 = sext i32 %1724 to i64
  %add5996 = add nsw i64 %mul5993, %conv5995
  %mul5997 = mul nsw i64 0, %add5996
  %sub5998 = sub nsw i64 %mul5997, 1
  %cmp5999 = icmp slt i64 %sub5998, 0
  br i1 %cmp5999, label %cond.true.6001, label %cond.false.6024

cond.true.6001:                                   ; preds = %cond.true.5990
  %1725 = load i64, i64* %nbytes, align 8
  %mul6002 = mul nsw i64 0, %1725
  %1726 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6003 = getelementptr inbounds %struct.image, %struct.image* %1726, i32 0, i32 12
  %1727 = load i32, i32* %height6003, align 4
  %conv6004 = sext i32 %1727 to i64
  %add6005 = add nsw i64 %mul6002, %conv6004
  %mul6006 = mul nsw i64 0, %add6005
  %add6007 = add nsw i64 %mul6006, 0
  %neg6008 = xor i64 %add6007, -1
  %cmp6009 = icmp eq i64 %neg6008, -1
  %conv6010 = zext i1 %cmp6009 to i32
  %sub6011 = sub nsw i32 0, %conv6010
  %conv6012 = sext i32 %sub6011 to i64
  %1728 = load i64, i64* %nbytes, align 8
  %mul6013 = mul nsw i64 0, %1728
  %1729 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6014 = getelementptr inbounds %struct.image, %struct.image* %1729, i32 0, i32 12
  %1730 = load i32, i32* %height6014, align 4
  %conv6015 = sext i32 %1730 to i64
  %add6016 = add nsw i64 %mul6013, %conv6015
  %mul6017 = mul nsw i64 0, %add6016
  %add6018 = add nsw i64 %mul6017, 1
  %shl6019 = shl i64 %add6018, 62
  %sub6020 = sub nsw i64 %shl6019, 1
  %mul6021 = mul nsw i64 %sub6020, 2
  %add6022 = add nsw i64 %mul6021, 1
  %sub6023 = sub nsw i64 %conv6012, %add6022
  br label %cond.end.6031

cond.false.6024:                                  ; preds = %cond.true.5990
  %1731 = load i64, i64* %nbytes, align 8
  %mul6025 = mul nsw i64 0, %1731
  %1732 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6026 = getelementptr inbounds %struct.image, %struct.image* %1732, i32 0, i32 12
  %1733 = load i32, i32* %height6026, align 4
  %conv6027 = sext i32 %1733 to i64
  %add6028 = add nsw i64 %mul6025, %conv6027
  %mul6029 = mul nsw i64 0, %add6028
  %add6030 = add nsw i64 %mul6029, 0
  br label %cond.end.6031

cond.end.6031:                                    ; preds = %cond.false.6024, %cond.true.6001
  %cond6032 = phi i64 [ %sub6023, %cond.true.6001 ], [ %add6030, %cond.false.6024 ]
  %1734 = load i64, i64* %nbytes, align 8
  %div6033 = sdiv i64 %cond6032, %1734
  %cmp6034 = icmp slt i64 %conv5992, %div6033
  br i1 %cmp6034, label %cond.true.6090, label %lor.lhs.false.6070

cond.false.6036:                                  ; preds = %cond.false.5986
  %1735 = load i64, i64* %nbytes, align 8
  %mul6037 = mul nsw i64 0, %1735
  %1736 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6038 = getelementptr inbounds %struct.image, %struct.image* %1736, i32 0, i32 12
  %1737 = load i32, i32* %height6038, align 4
  %conv6039 = sext i32 %1737 to i64
  %add6040 = add nsw i64 %mul6037, %conv6039
  %mul6041 = mul nsw i64 0, %add6040
  %sub6042 = sub nsw i64 %mul6041, 1
  %cmp6043 = icmp slt i64 %sub6042, 0
  br i1 %cmp6043, label %cond.true.6045, label %cond.false.6056

cond.true.6045:                                   ; preds = %cond.false.6036
  %1738 = load i64, i64* %nbytes, align 8
  %mul6046 = mul nsw i64 0, %1738
  %1739 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6047 = getelementptr inbounds %struct.image, %struct.image* %1739, i32 0, i32 12
  %1740 = load i32, i32* %height6047, align 4
  %conv6048 = sext i32 %1740 to i64
  %add6049 = add nsw i64 %mul6046, %conv6048
  %mul6050 = mul nsw i64 0, %add6049
  %add6051 = add nsw i64 %mul6050, 1
  %shl6052 = shl i64 %add6051, 62
  %sub6053 = sub nsw i64 %shl6052, 1
  %mul6054 = mul nsw i64 %sub6053, 2
  %add6055 = add nsw i64 %mul6054, 1
  br label %cond.end.6063

cond.false.6056:                                  ; preds = %cond.false.6036
  %1741 = load i64, i64* %nbytes, align 8
  %mul6057 = mul nsw i64 0, %1741
  %1742 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6058 = getelementptr inbounds %struct.image, %struct.image* %1742, i32 0, i32 12
  %1743 = load i32, i32* %height6058, align 4
  %conv6059 = sext i32 %1743 to i64
  %add6060 = add nsw i64 %mul6057, %conv6059
  %mul6061 = mul nsw i64 0, %add6060
  %sub6062 = sub nsw i64 %mul6061, 1
  br label %cond.end.6063

cond.end.6063:                                    ; preds = %cond.false.6056, %cond.true.6045
  %cond6064 = phi i64 [ %add6055, %cond.true.6045 ], [ %sub6062, %cond.false.6056 ]
  %1744 = load i64, i64* %nbytes, align 8
  %div6065 = sdiv i64 %cond6064, %1744
  %1745 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6066 = getelementptr inbounds %struct.image, %struct.image* %1745, i32 0, i32 12
  %1746 = load i32, i32* %height6066, align 4
  %conv6067 = sext i32 %1746 to i64
  %cmp6068 = icmp slt i64 %div6065, %conv6067
  br i1 %cmp6068, label %cond.true.6090, label %lor.lhs.false.6070

lor.lhs.false.6070:                               ; preds = %cond.end.6063, %cond.end.6031, %cond.true.5985, %cond.end.5975, %cond.true.5935, %cond.end.5927
  %1747 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6071 = getelementptr inbounds %struct.image, %struct.image* %1747, i32 0, i32 12
  %1748 = load i32, i32* %height6071, align 4
  %conv6072 = sext i32 %1748 to i64
  %1749 = load i64, i64* %nbytes, align 8
  %mul6073 = mul nsw i64 %conv6072, %1749
  %mul6074 = mul nsw i64 0, %mul6073
  %sub6075 = sub nsw i64 %mul6074, 1
  %cmp6076 = icmp slt i64 %sub6075, 0
  br i1 %cmp6076, label %land.lhs.true.6078, label %lor.lhs.false.6084

land.lhs.true.6078:                               ; preds = %lor.lhs.false.6070
  %1750 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6079 = getelementptr inbounds %struct.image, %struct.image* %1750, i32 0, i32 12
  %1751 = load i32, i32* %height6079, align 4
  %conv6080 = sext i32 %1751 to i64
  %1752 = load i64, i64* %nbytes, align 8
  %mul6081 = mul nsw i64 %conv6080, %1752
  %cmp6082 = icmp slt i64 %mul6081, -9223372036854775808
  br i1 %cmp6082, label %cond.true.6090, label %lor.lhs.false.6084

lor.lhs.false.6084:                               ; preds = %land.lhs.true.6078, %lor.lhs.false.6070
  %1753 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6085 = getelementptr inbounds %struct.image, %struct.image* %1753, i32 0, i32 12
  %1754 = load i32, i32* %height6085, align 4
  %conv6086 = sext i32 %1754 to i64
  %1755 = load i64, i64* %nbytes, align 8
  %mul6087 = mul nsw i64 %conv6086, %1755
  %cmp6088 = icmp slt i64 9223372036854775807, %mul6087
  br i1 %cmp6088, label %cond.true.6090, label %cond.false.6108

cond.true.6090:                                   ; preds = %lor.lhs.false.6084, %land.lhs.true.6078, %cond.end.6063, %cond.end.6031, %cond.true.5985, %cond.end.5975, %cond.true.5935, %cond.end.5927, %land.lhs.true.5887, %land.lhs.true.5881
  %1756 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6091 = getelementptr inbounds %struct.image, %struct.image* %1756, i32 0, i32 12
  %1757 = load i32, i32* %height6091, align 4
  %conv6092 = sext i32 %1757 to i64
  %1758 = load i64, i64* %nbytes, align 8
  %mul6093 = mul i64 %conv6092, %1758
  %cmp6094 = icmp ule i64 %mul6093, 9223372036854775807
  br i1 %cmp6094, label %cond.true.6096, label %cond.false.6100

cond.true.6096:                                   ; preds = %cond.true.6090
  %1759 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6097 = getelementptr inbounds %struct.image, %struct.image* %1759, i32 0, i32 12
  %1760 = load i32, i32* %height6097, align 4
  %conv6098 = sext i32 %1760 to i64
  %1761 = load i64, i64* %nbytes, align 8
  %mul6099 = mul i64 %conv6098, %1761
  br label %cond.end.6106

cond.false.6100:                                  ; preds = %cond.true.6090
  %1762 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6101 = getelementptr inbounds %struct.image, %struct.image* %1762, i32 0, i32 12
  %1763 = load i32, i32* %height6101, align 4
  %conv6102 = sext i32 %1763 to i64
  %1764 = load i64, i64* %nbytes, align 8
  %mul6103 = mul i64 %conv6102, %1764
  %sub6104 = sub i64 %mul6103, -9223372036854775808
  %add6105 = add nsw i64 %sub6104, -9223372036854775808
  br label %cond.end.6106

cond.end.6106:                                    ; preds = %cond.false.6100, %cond.true.6096
  %cond6107 = phi i64 [ %mul6099, %cond.true.6096 ], [ %add6105, %cond.false.6100 ]
  store i64 %cond6107, i64* %nbytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.6108:                                  ; preds = %lor.lhs.false.6084
  %1765 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6109 = getelementptr inbounds %struct.image, %struct.image* %1765, i32 0, i32 12
  %1766 = load i32, i32* %height6109, align 4
  %conv6110 = sext i32 %1766 to i64
  %1767 = load i64, i64* %nbytes, align 8
  %mul6111 = mul i64 %conv6110, %1767
  %cmp6112 = icmp ule i64 %mul6111, 9223372036854775807
  br i1 %cmp6112, label %cond.true.6114, label %cond.false.6118

cond.true.6114:                                   ; preds = %cond.false.6108
  %1768 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6115 = getelementptr inbounds %struct.image, %struct.image* %1768, i32 0, i32 12
  %1769 = load i32, i32* %height6115, align 4
  %conv6116 = sext i32 %1769 to i64
  %1770 = load i64, i64* %nbytes, align 8
  %mul6117 = mul i64 %conv6116, %1770
  br label %cond.end.6124

cond.false.6118:                                  ; preds = %cond.false.6108
  %1771 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6119 = getelementptr inbounds %struct.image, %struct.image* %1771, i32 0, i32 12
  %1772 = load i32, i32* %height6119, align 4
  %conv6120 = sext i32 %1772 to i64
  %1773 = load i64, i64* %nbytes, align 8
  %mul6121 = mul i64 %conv6120, %1773
  %sub6122 = sub i64 %mul6121, -9223372036854775808
  %add6123 = add nsw i64 %sub6122, -9223372036854775808
  br label %cond.end.6124

cond.end.6124:                                    ; preds = %cond.false.6118, %cond.true.6114
  %cond6125 = phi i64 [ %mul6117, %cond.true.6114 ], [ %add6123, %cond.false.6118 ]
  store i64 %cond6125, i64* %nbytes, align 8
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.6124, %cond.end.6106, %cond.end.5832, %cond.end.5814, %cond.end.5535, %cond.end.5517, %cond.end.5243, %cond.end.5225, %cond.end.4944, %cond.end.4925, %cond.end.4650, %cond.end.4631, %cond.end.4352, %cond.end.4320, %cond.end.4032, %cond.end.4000, %cond.end.3620, %cond.end.3588, %cond.end.3300, %cond.end.3268, %cond.end.2890, %cond.end.2872, %cond.end.2611, %cond.end.2593, %cond.end.2327, %cond.end.2309, %cond.end.2048, %cond.end.2030, %cond.end.1762, %cond.end.1746, %cond.end.1487, %cond.end.1471, %cond.end.1238, %cond.end.1212, %cond.end.943, %cond.end.917, %cond.end.616, %cond.end.590, %cond.end.321, %cond.end.295
  call void @memory_full(i64 -1) #11
  unreachable

if.end:                                           ; preds = %cond.end.6124, %cond.end.6106, %cond.end.5832, %cond.end.5814, %cond.end.5535, %cond.end.5517, %cond.end.5243, %cond.end.5225, %cond.end.4944, %cond.end.4925, %cond.end.4650, %cond.end.4631, %cond.end.4352, %cond.end.4320, %cond.end.4032, %cond.end.4000, %cond.end.3620, %cond.end.3588, %cond.end.3300, %cond.end.3268
  %1774 = load i64, i64* %nbytes, align 8
  %call6126 = call noalias i8* @xmalloc(i64 %1774)
  %1775 = bitcast i8* %call6126 to %struct.XColor*
  store %struct.XColor* %1775, %struct.XColor** %new, align 8
  store i32 0, i32* %y, align 4
  br label %for.cond.6127

for.cond.6127:                                    ; preds = %for.inc.6146, %if.end
  %1776 = load i32, i32* %y, align 4
  %1777 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6128 = getelementptr inbounds %struct.image, %struct.image* %1777, i32 0, i32 12
  %1778 = load i32, i32* %height6128, align 4
  %cmp6129 = icmp slt i32 %1776, %1778
  br i1 %cmp6129, label %for.body.6131, label %for.end.6148

for.body.6131:                                    ; preds = %for.cond.6127
  %1779 = load %struct.XColor*, %struct.XColor** %new, align 8
  %1780 = load i32, i32* %y, align 4
  %1781 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6132 = getelementptr inbounds %struct.image, %struct.image* %1781, i32 0, i32 11
  %1782 = load i32, i32* %width6132, align 4
  %mul6133 = mul nsw i32 %1780, %1782
  %idx.ext = sext i32 %mul6133 to i64
  %add.ptr = getelementptr inbounds %struct.XColor, %struct.XColor* %1779, i64 %idx.ext
  %add.ptr6134 = getelementptr inbounds %struct.XColor, %struct.XColor* %add.ptr, i64 0
  store %struct.XColor* %add.ptr6134, %struct.XColor** %p, align 8
  %1783 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %1783, i32 0, i32 3
  store i16 32767, i16* %blue, align 2
  %1784 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %1784, i32 0, i32 2
  store i16 32767, i16* %green, align 2
  %1785 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %1785, i32 0, i32 1
  store i16 32767, i16* %red, align 2
  %1786 = load %struct.XColor*, %struct.XColor** %new, align 8
  %1787 = load i32, i32* %y, align 4
  %1788 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6135 = getelementptr inbounds %struct.image, %struct.image* %1788, i32 0, i32 11
  %1789 = load i32, i32* %width6135, align 4
  %mul6136 = mul nsw i32 %1787, %1789
  %idx.ext6137 = sext i32 %mul6136 to i64
  %add.ptr6138 = getelementptr inbounds %struct.XColor, %struct.XColor* %1786, i64 %idx.ext6137
  %1790 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6139 = getelementptr inbounds %struct.image, %struct.image* %1790, i32 0, i32 11
  %1791 = load i32, i32* %width6139, align 4
  %sub6140 = sub nsw i32 %1791, 1
  %idx.ext6141 = sext i32 %sub6140 to i64
  %add.ptr6142 = getelementptr inbounds %struct.XColor, %struct.XColor* %add.ptr6138, i64 %idx.ext6141
  store %struct.XColor* %add.ptr6142, %struct.XColor** %p, align 8
  %1792 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue6143 = getelementptr inbounds %struct.XColor, %struct.XColor* %1792, i32 0, i32 3
  store i16 32767, i16* %blue6143, align 2
  %1793 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green6144 = getelementptr inbounds %struct.XColor, %struct.XColor* %1793, i32 0, i32 2
  store i16 32767, i16* %green6144, align 2
  %1794 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red6145 = getelementptr inbounds %struct.XColor, %struct.XColor* %1794, i32 0, i32 1
  store i16 32767, i16* %red6145, align 2
  br label %for.inc.6146

for.inc.6146:                                     ; preds = %for.body.6131
  %1795 = load i32, i32* %y, align 4
  %inc6147 = add nsw i32 %1795, 1
  store i32 %inc6147, i32* %y, align 4
  br label %for.cond.6127

for.end.6148:                                     ; preds = %for.cond.6127
  store i32 1, i32* %x, align 4
  br label %for.cond.6149

for.cond.6149:                                    ; preds = %for.inc.6175, %for.end.6148
  %1796 = load i32, i32* %x, align 4
  %1797 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6150 = getelementptr inbounds %struct.image, %struct.image* %1797, i32 0, i32 11
  %1798 = load i32, i32* %width6150, align 4
  %sub6151 = sub nsw i32 %1798, 1
  %cmp6152 = icmp slt i32 %1796, %sub6151
  br i1 %cmp6152, label %for.body.6154, label %for.end.6177

for.body.6154:                                    ; preds = %for.cond.6149
  %1799 = load %struct.XColor*, %struct.XColor** %new, align 8
  %1800 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6155 = getelementptr inbounds %struct.image, %struct.image* %1800, i32 0, i32 11
  %1801 = load i32, i32* %width6155, align 4
  %mul6156 = mul nsw i32 0, %1801
  %idx.ext6157 = sext i32 %mul6156 to i64
  %add.ptr6158 = getelementptr inbounds %struct.XColor, %struct.XColor* %1799, i64 %idx.ext6157
  %1802 = load i32, i32* %x, align 4
  %idx.ext6159 = sext i32 %1802 to i64
  %add.ptr6160 = getelementptr inbounds %struct.XColor, %struct.XColor* %add.ptr6158, i64 %idx.ext6159
  store %struct.XColor* %add.ptr6160, %struct.XColor** %p, align 8
  %1803 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue6161 = getelementptr inbounds %struct.XColor, %struct.XColor* %1803, i32 0, i32 3
  store i16 32767, i16* %blue6161, align 2
  %1804 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green6162 = getelementptr inbounds %struct.XColor, %struct.XColor* %1804, i32 0, i32 2
  store i16 32767, i16* %green6162, align 2
  %1805 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red6163 = getelementptr inbounds %struct.XColor, %struct.XColor* %1805, i32 0, i32 1
  store i16 32767, i16* %red6163, align 2
  %1806 = load %struct.XColor*, %struct.XColor** %new, align 8
  %1807 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6164 = getelementptr inbounds %struct.image, %struct.image* %1807, i32 0, i32 12
  %1808 = load i32, i32* %height6164, align 4
  %sub6165 = sub nsw i32 %1808, 1
  %1809 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6166 = getelementptr inbounds %struct.image, %struct.image* %1809, i32 0, i32 11
  %1810 = load i32, i32* %width6166, align 4
  %mul6167 = mul nsw i32 %sub6165, %1810
  %idx.ext6168 = sext i32 %mul6167 to i64
  %add.ptr6169 = getelementptr inbounds %struct.XColor, %struct.XColor* %1806, i64 %idx.ext6168
  %1811 = load i32, i32* %x, align 4
  %idx.ext6170 = sext i32 %1811 to i64
  %add.ptr6171 = getelementptr inbounds %struct.XColor, %struct.XColor* %add.ptr6169, i64 %idx.ext6170
  store %struct.XColor* %add.ptr6171, %struct.XColor** %p, align 8
  %1812 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue6172 = getelementptr inbounds %struct.XColor, %struct.XColor* %1812, i32 0, i32 3
  store i16 32767, i16* %blue6172, align 2
  %1813 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green6173 = getelementptr inbounds %struct.XColor, %struct.XColor* %1813, i32 0, i32 2
  store i16 32767, i16* %green6173, align 2
  %1814 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red6174 = getelementptr inbounds %struct.XColor, %struct.XColor* %1814, i32 0, i32 1
  store i16 32767, i16* %red6174, align 2
  br label %for.inc.6175

for.inc.6175:                                     ; preds = %for.body.6154
  %1815 = load i32, i32* %x, align 4
  %inc6176 = add nsw i32 %1815, 1
  store i32 %inc6176, i32* %x, align 4
  br label %for.cond.6149

for.end.6177:                                     ; preds = %for.cond.6149
  store i32 1, i32* %y, align 4
  br label %for.cond.6178

for.cond.6178:                                    ; preds = %for.inc.6262, %for.end.6177
  %1816 = load i32, i32* %y, align 4
  %1817 = load %struct.image*, %struct.image** %img.addr, align 8
  %height6179 = getelementptr inbounds %struct.image, %struct.image* %1817, i32 0, i32 12
  %1818 = load i32, i32* %height6179, align 4
  %sub6180 = sub nsw i32 %1818, 1
  %cmp6181 = icmp slt i32 %1816, %sub6180
  br i1 %cmp6181, label %for.body.6183, label %for.end.6264

for.body.6183:                                    ; preds = %for.cond.6178
  %1819 = load %struct.XColor*, %struct.XColor** %new, align 8
  %1820 = load i32, i32* %y, align 4
  %1821 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6184 = getelementptr inbounds %struct.image, %struct.image* %1821, i32 0, i32 11
  %1822 = load i32, i32* %width6184, align 4
  %mul6185 = mul nsw i32 %1820, %1822
  %idx.ext6186 = sext i32 %mul6185 to i64
  %add.ptr6187 = getelementptr inbounds %struct.XColor, %struct.XColor* %1819, i64 %idx.ext6186
  %add.ptr6188 = getelementptr inbounds %struct.XColor, %struct.XColor* %add.ptr6187, i64 1
  store %struct.XColor* %add.ptr6188, %struct.XColor** %p, align 8
  store i32 1, i32* %x, align 4
  br label %for.cond.6189

for.cond.6189:                                    ; preds = %for.inc.6259, %for.body.6183
  %1823 = load i32, i32* %x, align 4
  %1824 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6190 = getelementptr inbounds %struct.image, %struct.image* %1824, i32 0, i32 11
  %1825 = load i32, i32* %width6190, align 4
  %sub6191 = sub nsw i32 %1825, 1
  %cmp6192 = icmp slt i32 %1823, %sub6191
  br i1 %cmp6192, label %for.body.6194, label %for.end.6261

for.body.6194:                                    ; preds = %for.cond.6189
  store i32 0, i32* %i, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %g, align 4
  store i32 0, i32* %r, align 4
  %1826 = load i32, i32* %y, align 4
  %sub6195 = sub nsw i32 %1826, 1
  store i32 %sub6195, i32* %yy, align 4
  br label %for.cond.6196

for.cond.6196:                                    ; preds = %for.inc.6239, %for.body.6194
  %1827 = load i32, i32* %yy, align 4
  %1828 = load i32, i32* %y, align 4
  %add6197 = add nsw i32 %1828, 2
  %cmp6198 = icmp slt i32 %1827, %add6197
  br i1 %cmp6198, label %for.body.6200, label %for.end.6241

for.body.6200:                                    ; preds = %for.cond.6196
  %1829 = load i32, i32* %x, align 4
  %sub6201 = sub nsw i32 %1829, 1
  store i32 %sub6201, i32* %xx, align 4
  br label %for.cond.6202

for.cond.6202:                                    ; preds = %for.inc.6235, %for.body.6200
  %1830 = load i32, i32* %xx, align 4
  %1831 = load i32, i32* %x, align 4
  %add6203 = add nsw i32 %1831, 2
  %cmp6204 = icmp slt i32 %1830, %add6203
  br i1 %cmp6204, label %for.body.6206, label %for.end.6238

for.body.6206:                                    ; preds = %for.cond.6202
  %1832 = load i32, i32* %i, align 4
  %idxprom6207 = sext i32 %1832 to i64
  %1833 = load i32*, i32** %matrix.addr, align 8
  %arrayidx6208 = getelementptr inbounds i32, i32* %1833, i64 %idxprom6207
  %1834 = load i32, i32* %arrayidx6208, align 4
  %tobool = icmp ne i32 %1834, 0
  br i1 %tobool, label %if.then.6209, label %if.end.6234

if.then.6209:                                     ; preds = %for.body.6206
  %1835 = load %struct.XColor*, %struct.XColor** %colors, align 8
  %1836 = load i32, i32* %yy, align 4
  %1837 = load %struct.image*, %struct.image** %img.addr, align 8
  %width6210 = getelementptr inbounds %struct.image, %struct.image* %1837, i32 0, i32 11
  %1838 = load i32, i32* %width6210, align 4
  %mul6211 = mul nsw i32 %1836, %1838
  %idx.ext6212 = sext i32 %mul6211 to i64
  %add.ptr6213 = getelementptr inbounds %struct.XColor, %struct.XColor* %1835, i64 %idx.ext6212
  %1839 = load i32, i32* %xx, align 4
  %idx.ext6214 = sext i32 %1839 to i64
  %add.ptr6215 = getelementptr inbounds %struct.XColor, %struct.XColor* %add.ptr6213, i64 %idx.ext6214
  store %struct.XColor* %add.ptr6215, %struct.XColor** %t, align 8
  %1840 = load i32, i32* %i, align 4
  %idxprom6216 = sext i32 %1840 to i64
  %1841 = load i32*, i32** %matrix.addr, align 8
  %arrayidx6217 = getelementptr inbounds i32, i32* %1841, i64 %idxprom6216
  %1842 = load i32, i32* %arrayidx6217, align 4
  %1843 = load %struct.XColor*, %struct.XColor** %t, align 8
  %red6218 = getelementptr inbounds %struct.XColor, %struct.XColor* %1843, i32 0, i32 1
  %1844 = load i16, i16* %red6218, align 2
  %conv6219 = zext i16 %1844 to i32
  %mul6220 = mul nsw i32 %1842, %conv6219
  %1845 = load i32, i32* %r, align 4
  %add6221 = add nsw i32 %1845, %mul6220
  store i32 %add6221, i32* %r, align 4
  %1846 = load i32, i32* %i, align 4
  %idxprom6222 = sext i32 %1846 to i64
  %1847 = load i32*, i32** %matrix.addr, align 8
  %arrayidx6223 = getelementptr inbounds i32, i32* %1847, i64 %idxprom6222
  %1848 = load i32, i32* %arrayidx6223, align 4
  %1849 = load %struct.XColor*, %struct.XColor** %t, align 8
  %green6224 = getelementptr inbounds %struct.XColor, %struct.XColor* %1849, i32 0, i32 2
  %1850 = load i16, i16* %green6224, align 2
  %conv6225 = zext i16 %1850 to i32
  %mul6226 = mul nsw i32 %1848, %conv6225
  %1851 = load i32, i32* %g, align 4
  %add6227 = add nsw i32 %1851, %mul6226
  store i32 %add6227, i32* %g, align 4
  %1852 = load i32, i32* %i, align 4
  %idxprom6228 = sext i32 %1852 to i64
  %1853 = load i32*, i32** %matrix.addr, align 8
  %arrayidx6229 = getelementptr inbounds i32, i32* %1853, i64 %idxprom6228
  %1854 = load i32, i32* %arrayidx6229, align 4
  %1855 = load %struct.XColor*, %struct.XColor** %t, align 8
  %blue6230 = getelementptr inbounds %struct.XColor, %struct.XColor* %1855, i32 0, i32 3
  %1856 = load i16, i16* %blue6230, align 2
  %conv6231 = zext i16 %1856 to i32
  %mul6232 = mul nsw i32 %1854, %conv6231
  %1857 = load i32, i32* %b, align 4
  %add6233 = add nsw i32 %1857, %mul6232
  store i32 %add6233, i32* %b, align 4
  br label %if.end.6234

if.end.6234:                                      ; preds = %if.then.6209, %for.body.6206
  br label %for.inc.6235

for.inc.6235:                                     ; preds = %if.end.6234
  %1858 = load i32, i32* %xx, align 4
  %inc6236 = add nsw i32 %1858, 1
  store i32 %inc6236, i32* %xx, align 4
  %1859 = load i32, i32* %i, align 4
  %inc6237 = add nsw i32 %1859, 1
  store i32 %inc6237, i32* %i, align 4
  br label %for.cond.6202

for.end.6238:                                     ; preds = %for.cond.6202
  br label %for.inc.6239

for.inc.6239:                                     ; preds = %for.end.6238
  %1860 = load i32, i32* %yy, align 4
  %inc6240 = add nsw i32 %1860, 1
  store i32 %inc6240, i32* %yy, align 4
  br label %for.cond.6196

for.end.6241:                                     ; preds = %for.cond.6196
  %1861 = load i32, i32* %r, align 4
  %1862 = load i32, i32* %sum, align 4
  %div6242 = sdiv i32 %1861, %1862
  %1863 = load i32, i32* %color_adjust.addr, align 4
  %add6243 = add nsw i32 %div6242, %1863
  %and = and i32 %add6243, 65535
  store i32 %and, i32* %r, align 4
  %1864 = load i32, i32* %g, align 4
  %1865 = load i32, i32* %sum, align 4
  %div6244 = sdiv i32 %1864, %1865
  %1866 = load i32, i32* %color_adjust.addr, align 4
  %add6245 = add nsw i32 %div6244, %1866
  %and6246 = and i32 %add6245, 65535
  store i32 %and6246, i32* %g, align 4
  %1867 = load i32, i32* %b, align 4
  %1868 = load i32, i32* %sum, align 4
  %div6247 = sdiv i32 %1867, %1868
  %1869 = load i32, i32* %color_adjust.addr, align 4
  %add6248 = add nsw i32 %div6247, %1869
  %and6249 = and i32 %add6248, 65535
  store i32 %and6249, i32* %b, align 4
  %1870 = load i32, i32* %r, align 4
  %mul6250 = mul nsw i32 2, %1870
  %1871 = load i32, i32* %g, align 4
  %mul6251 = mul nsw i32 3, %1871
  %add6252 = add nsw i32 %mul6250, %mul6251
  %1872 = load i32, i32* %b, align 4
  %add6253 = add nsw i32 %add6252, %1872
  %div6254 = sdiv i32 %add6253, 6
  %conv6255 = trunc i32 %div6254 to i16
  %1873 = load %struct.XColor*, %struct.XColor** %p, align 8
  %blue6256 = getelementptr inbounds %struct.XColor, %struct.XColor* %1873, i32 0, i32 3
  store i16 %conv6255, i16* %blue6256, align 2
  %1874 = load %struct.XColor*, %struct.XColor** %p, align 8
  %green6257 = getelementptr inbounds %struct.XColor, %struct.XColor* %1874, i32 0, i32 2
  store i16 %conv6255, i16* %green6257, align 2
  %1875 = load %struct.XColor*, %struct.XColor** %p, align 8
  %red6258 = getelementptr inbounds %struct.XColor, %struct.XColor* %1875, i32 0, i32 1
  store i16 %conv6255, i16* %red6258, align 2
  br label %for.inc.6259

for.inc.6259:                                     ; preds = %for.end.6241
  %1876 = load i32, i32* %x, align 4
  %inc6260 = add nsw i32 %1876, 1
  store i32 %inc6260, i32* %x, align 4
  %1877 = load %struct.XColor*, %struct.XColor** %p, align 8
  %incdec.ptr = getelementptr inbounds %struct.XColor, %struct.XColor* %1877, i32 1
  store %struct.XColor* %incdec.ptr, %struct.XColor** %p, align 8
  br label %for.cond.6189

for.end.6261:                                     ; preds = %for.cond.6189
  br label %for.inc.6262

for.inc.6262:                                     ; preds = %for.end.6261
  %1878 = load i32, i32* %y, align 4
  %inc6263 = add nsw i32 %1878, 1
  store i32 %inc6263, i32* %y, align 4
  br label %for.cond.6178

for.end.6264:                                     ; preds = %for.cond.6178
  %1879 = load %struct.XColor*, %struct.XColor** %colors, align 8
  %1880 = bitcast %struct.XColor* %1879 to i8*
  call void @xfree(i8* %1880)
  %1881 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1882 = load %struct.image*, %struct.image** %img.addr, align 8
  %1883 = load %struct.XColor*, %struct.XColor** %new, align 8
  call void @x_from_xcolors(%struct.frame* %1881, %struct.image* %1882, %struct.XColor* %1883)
  ret void
}

declare zeroext i1 @NUMBERP(i64) #1

declare double @XFLOATINT(i64) #1

declare zeroext i1 @VECTORP(i64) #1

declare i64 @ASIZE(i64) #1

declare i64 @AREF(i64, i64) #1

declare void @mark_object(i64) #1

declare %struct._XImage* @XCreateImage(%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @x_check_image_size(%struct._XImage* %ximg, i32 %width, i32 %height) #0 {
entry:
  %ximg.addr = alloca %struct._XImage*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %bitmap_pad = alloca i32, align 4
  %depth = alloca i32, align 4
  %bytes_per_line = alloca i32, align 4
  store %struct._XImage* %ximg, %struct._XImage** %ximg.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %tobool = icmp ne %struct._XImage* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %bitmap_pad1 = getelementptr inbounds %struct._XImage, %struct._XImage* %1, i32 0, i32 8
  %2 = load i32, i32* %bitmap_pad1, align 4
  store i32 %2, i32* %bitmap_pad, align 4
  %3 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %depth2 = getelementptr inbounds %struct._XImage, %struct._XImage* %3, i32 0, i32 9
  %4 = load i32, i32* %depth2, align 4
  store i32 %4, i32* %depth, align 4
  %5 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %bytes_per_line3 = getelementptr inbounds %struct._XImage, %struct._XImage* %5, i32 0, i32 10
  %6 = load i32, i32* %bytes_per_line3, align 4
  store i32 %6, i32* %bytes_per_line, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 8, i32* %bitmap_pad, align 4
  store i32 1, i32* %depth, align 4
  %7 = load i32, i32* %width.addr, align 4
  %shr = ashr i32 %7, 3
  %8 = load i32, i32* %width.addr, align 4
  %and = and i32 %8, 7
  %cmp = icmp ne i32 %and, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %shr, %conv
  store i32 %add, i32* %bytes_per_line, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %width.addr, align 4
  %10 = load i32, i32* %bitmap_pad, align 4
  %sub = sub nsw i32 %10, 1
  %sub4 = sub nsw i32 2147483647, %sub
  %11 = load i32, i32* %depth, align 4
  %div = sdiv i32 %sub4, %11
  %cmp5 = icmp sle i32 %9, %div
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %12 = load i32, i32* %height.addr, align 4
  %13 = load i32, i32* %bytes_per_line, align 4
  %div7 = sdiv i32 2147483647, %13
  %cmp8 = icmp sle i32 %12, %div7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %14 = phi i1 [ false, %if.end ], [ %cmp8, %land.rhs ]
  ret i1 %14
}

declare i64 @XCreatePixmap(%struct._XDisplay*, i64, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_put_x_image(%struct.frame* %f, %struct._XImage* %ximg, i64 %pixmap, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %ximg.addr = alloca %struct._XImage*, align 8
  %pixmap.addr = alloca i64, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %gc = alloca %struct._XGC*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XImage* %ximg, %struct._XImage** %ximg.addr, align 8
  store i64 %pixmap, i64* %pixmap.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load i64, i64* %pixmap.addr, align 8
  %call = call %struct._XGC* @XCreateGC(%struct._XDisplay* %3, i64 %4, i64 0, %struct.XGCValues* null)
  store %struct._XGC* %call, %struct._XGC** %gc, align 8
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display4, align 8
  %9 = load i64, i64* %pixmap.addr, align 8
  %10 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %11 = load %struct._XImage*, %struct._XImage** %ximg.addr, align 8
  %12 = load i32, i32* %width.addr, align 4
  %13 = load i32, i32* %height.addr, align 4
  %call5 = call i32 @XPutImage(%struct._XDisplay* %8, i64 %9, %struct._XGC* %10, %struct._XImage* %11, i32 0, i32 0, i32 0, i32 0, i32 %12, i32 %13)
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data6 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x7 = bitcast %union.output_data* %output_data6 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x7, align 8
  %display_info8 = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 44
  %16 = load %struct.x_display_info*, %struct.x_display_info** %display_info8, align 8
  %display9 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %16, i32 0, i32 2
  %17 = load %struct._XDisplay*, %struct._XDisplay** %display9, align 8
  %18 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call10 = call i32 @XFreeGC(%struct._XDisplay* %17, %struct._XGC* %18)
  ret void
}

declare i64 @Fexpand_file_name(i64, i64) #1

declare i64 @encode_file_name(i64) #1

declare i32 @emacs_open(i8*, i32, i32) #1

declare void @x_query_color(%struct.frame*, %struct.XColor*) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

declare void @vadd_to_log(i8*, %struct.__va_list_tag*) #1

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: nounwind uwtable
define internal %struct.image_type* @define_image_type(%struct.image_type* %type) #0 {
entry:
  %type.addr = alloca %struct.image_type*, align 8
  %p = alloca %struct.image_type*, align 8
  %new_type = alloca i32, align 4
  %type_valid = alloca i8, align 1
  store %struct.image_type* %type, %struct.image_type** %type.addr, align 8
  store %struct.image_type* null, %struct.image_type** %p, align 8
  %0 = load %struct.image_type*, %struct.image_type** %type.addr, align 8
  %type1 = getelementptr inbounds %struct.image_type, %struct.image_type* %0, i32 0, i32 0
  %1 = load i32, i32* %type1, align 4
  store i32 %1, i32* %new_type, align 4
  store i8 1, i8* %type_valid, align 1
  call void @block_input()
  %2 = load %struct.image_type*, %struct.image_type** @image_types, align 8
  store %struct.image_type* %2, %struct.image_type** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.image_type*, %struct.image_type** %p, align 8
  %tobool = icmp ne %struct.image_type* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.image_type*, %struct.image_type** %p, align 8
  %type2 = getelementptr inbounds %struct.image_type, %struct.image_type* %4, i32 0, i32 0
  %5 = load i32, i32* %type2, align 4
  %6 = load i32, i32* %new_type, align 4
  %cmp = icmp eq i32 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %done

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load %struct.image_type*, %struct.image_type** %p, align 8
  %next = getelementptr inbounds %struct.image_type, %struct.image_type* %7, i32 0, i32 5
  %8 = load %struct.image_type*, %struct.image_type** %next, align 8
  store %struct.image_type* %8, %struct.image_type** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.image_type*, %struct.image_type** %type.addr, align 8
  %init = getelementptr inbounds %struct.image_type, %struct.image_type* %9, i32 0, i32 4
  %10 = load i1 ()*, i1 ()** %init, align 8
  %tobool3 = icmp ne i1 ()* %10, null
  br i1 %tobool3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %for.end
  %11 = load %struct.image_type*, %struct.image_type** %type.addr, align 8
  %init5 = getelementptr inbounds %struct.image_type, %struct.image_type* %11, i32 0, i32 4
  %12 = load i1 ()*, i1 ()** %init5, align 8
  %call = call zeroext i1 %12()
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %type_valid, align 1
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.4, %for.end
  %13 = load i8, i8* %type_valid, align 1
  %tobool7 = trunc i8 %13 to i1
  br i1 %tobool7, label %if.then.8, label %if.end.11

if.then.8:                                        ; preds = %if.end.6
  %call9 = call noalias i8* @xmalloc(i64 48)
  %14 = bitcast i8* %call9 to %struct.image_type*
  store %struct.image_type* %14, %struct.image_type** %p, align 8
  %15 = load %struct.image_type*, %struct.image_type** %p, align 8
  %16 = load %struct.image_type*, %struct.image_type** %type.addr, align 8
  %17 = bitcast %struct.image_type* %15 to i8*
  %18 = bitcast %struct.image_type* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 48, i32 8, i1 false)
  %19 = load %struct.image_type*, %struct.image_type** @image_types, align 8
  %20 = load %struct.image_type*, %struct.image_type** %p, align 8
  %next10 = getelementptr inbounds %struct.image_type, %struct.image_type* %20, i32 0, i32 5
  store %struct.image_type* %19, %struct.image_type** %next10, align 8
  %21 = load %struct.image_type*, %struct.image_type** %p, align 8
  store %struct.image_type* %21, %struct.image_type** @image_types, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.8, %if.end.6
  br label %done

done:                                             ; preds = %if.end.11, %if.then
  call void @unblock_input()
  %22 = load %struct.image_type*, %struct.image_type** %p, align 8
  ret %struct.image_type* %22
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @pbm_image_p(i64 %object) #0 {
entry:
  %retval = alloca i1, align 1
  %object.addr = alloca i64, align 8
  %fmt = alloca [11 x %struct.image_keyword], align 16
  store i64 %object, i64* %object.addr, align 8
  %0 = bitcast [11 x %struct.image_keyword]* %fmt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([11 x %struct.image_keyword]* @pbm_format to i8*), i64 352, i32 16, i1 false)
  %1 = load i64, i64* %object.addr, align 8
  %arraydecay = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i32 0
  %call = call i64 @builtin_lisp_symbol(i32 743)
  %call1 = call zeroext i1 @parse_image_spec(i64 %1, %struct.image_keyword* %arraydecay, i32 11, i64 %call)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 2
  %count = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx, i32 0, i32 3
  %2 = load i32, i32* %count, align 4
  %arrayidx2 = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 1
  %count3 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx2, i32 0, i32 3
  %3 = load i32, i32* %count3, align 4
  %add = add nsw i32 %2, %3
  %cmp = icmp eq i32 %add, 1
  store i1 %cmp, i1* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i1, i1* %retval
  ret i1 %4
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @pbm_load(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %raw_p = alloca i8, align 1
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %max_color_idx = alloca i32, align 4
  %specified_file = alloca i64, align 8
  %type = alloca i32, align 4
  %contents = alloca i8*, align 8
  %end = alloca i8*, align 8
  %p = alloca i8*, align 8
  %ximg = alloca %struct._XImage*, align 8
  %fd = alloca i32, align 4
  %file = alloca i64, align 8
  %size = alloca i64, align 8
  %data = alloca i64, align 8
  %c = alloca i32, align 4
  %g = alloca i32, align 4
  %fmt = alloca [11 x %struct.image_keyword], align 16
  %fg = alloca i64, align 8
  %bg = alloca i64, align 8
  %expected_size = alloca i32, align 4
  %r = alloca i32, align 4
  %g137 = alloca i32, align 4
  %b = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i32 0, i32* %max_color_idx, align 4
  store i8* null, i8** %contents, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 15
  %1 = load i64, i64* %spec, align 8
  %call = call i64 @builtin_lisp_symbol(i32 41)
  %call1 = call i64 @image_spec_value(i64 %1, i64 %call, i8* null)
  store i64 %call1, i64* %specified_file, align 8
  %2 = load i64, i64* %specified_file, align 8
  %call2 = call zeroext i1 @STRINGP(i64 %2)
  br i1 %call2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %specified_file, align 8
  %call3 = call i64 @x_find_image_fd(i64 %3, i32* %fd)
  store i64 %call3, i64* %file, align 8
  %4 = load i64, i64* %file, align 8
  %call4 = call zeroext i1 @STRINGP(i64 %4)
  br i1 %call4, label %if.end, label %if.then.5

if.then.5:                                        ; preds = %if.then
  %5 = load i64, i64* %specified_file, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0), i64 %5)
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load i32, i32* %fd, align 4
  %call6 = call i8* @slurp_file(i32 %6, i64* %size)
  store i8* %call6, i8** %contents, align 8
  %7 = load i8*, i8** %contents, align 8
  %cmp = icmp eq i8* %7, null
  br i1 %cmp, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %8 = load i64, i64* %file, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.28, i32 0, i32 0), i64 %8)
  store i1 false, i1* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %9 = load i8*, i8** %contents, align 8
  store i8* %9, i8** %p, align 8
  %10 = load i8*, i8** %contents, align 8
  %11 = load i64, i64* %size, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11
  store i8* %add.ptr, i8** %end, align 8
  br label %if.end.18

if.else:                                          ; preds = %entry
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec9 = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 15
  %13 = load i64, i64* %spec9, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 29)
  %call11 = call i64 @image_spec_value(i64 %13, i64 %call10, i8* null)
  store i64 %call11, i64* %data, align 8
  %14 = load i64, i64* %data, align 8
  %call12 = call zeroext i1 @STRINGP(i64 %14)
  br i1 %call12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.else
  %15 = load i64, i64* %data, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i32 0, i32 0), i64 %15)
  store i1 false, i1* %retval
  br label %return

if.end.14:                                        ; preds = %if.else
  %16 = load i64, i64* %data, align 8
  %call15 = call i8* @SDATA(i64 %16)
  store i8* %call15, i8** %p, align 8
  %17 = load i8*, i8** %p, align 8
  %18 = load i64, i64* %data, align 8
  %call16 = call i64 @SBYTES(i64 %18)
  %add.ptr17 = getelementptr inbounds i8, i8* %17, i64 %call16
  store i8* %add.ptr17, i8** %end, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.14, %if.end.8
  %19 = load i8*, i8** %end, align 8
  %20 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp19 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp19, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.18
  %21 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %22 = load i8, i8* %21, align 1
  %conv = zext i8 %22 to i32
  %cmp20 = icmp ne i32 %conv, 80
  br i1 %cmp20, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %lor.lhs.false, %if.end.18
  %23 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec23 = getelementptr inbounds %struct.image, %struct.image* %23, i32 0, i32 15
  %24 = load i64, i64* %spec23, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i32 0, i32 0), i64 %24)
  br label %error

error:                                            ; preds = %if.then.206, %if.then.126, %if.then.93, %if.then.51, %if.then.48, %if.then.44, %sw.default, %if.then.22
  %25 = load i8*, i8** %contents, align 8
  call void @xfree(i8* %25)
  %26 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 1
  store i64 0, i64* %pixmap, align 8
  store i1 false, i1* %retval
  br label %return

if.end.24:                                        ; preds = %lor.lhs.false
  %27 = load i8*, i8** %p, align 8
  %incdec.ptr25 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr25, i8** %p, align 8
  %28 = load i8, i8* %27, align 1
  %conv26 = zext i8 %28 to i32
  switch i32 %conv26, label %sw.default [
    i32 49, label %sw.bb
    i32 50, label %sw.bb.27
    i32 51, label %sw.bb.28
    i32 52, label %sw.bb.29
    i32 53, label %sw.bb.30
    i32 54, label %sw.bb.31
  ]

sw.bb:                                            ; preds = %if.end.24
  store i8 0, i8* %raw_p, align 1
  store i32 0, i32* %type, align 4
  br label %sw.epilog

sw.bb.27:                                         ; preds = %if.end.24
  store i8 0, i8* %raw_p, align 1
  store i32 1, i32* %type, align 4
  br label %sw.epilog

sw.bb.28:                                         ; preds = %if.end.24
  store i8 0, i8* %raw_p, align 1
  store i32 2, i32* %type, align 4
  br label %sw.epilog

sw.bb.29:                                         ; preds = %if.end.24
  store i8 1, i8* %raw_p, align 1
  store i32 0, i32* %type, align 4
  br label %sw.epilog

sw.bb.30:                                         ; preds = %if.end.24
  store i8 1, i8* %raw_p, align 1
  store i32 1, i32* %type, align 4
  br label %sw.epilog

sw.bb.31:                                         ; preds = %if.end.24
  store i8 1, i8* %raw_p, align 1
  store i32 2, i32* %type, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.24
  %29 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec32 = getelementptr inbounds %struct.image, %struct.image* %29, i32 0, i32 15
  %30 = load i64, i64* %spec32, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i32 0, i32 0), i64 %30)
  br label %error

sw.epilog:                                        ; preds = %sw.bb.31, %sw.bb.30, %sw.bb.29, %sw.bb.28, %sw.bb.27, %sw.bb
  %31 = load i8*, i8** %end, align 8
  %call33 = call i32 @pbm_scan_number(i8** %p, i8* %31)
  store i32 %call33, i32* %width, align 4
  %32 = load i8*, i8** %end, align 8
  %call34 = call i32 @pbm_scan_number(i8** %p, i8* %32)
  store i32 %call34, i32* %height, align 4
  %33 = load i32, i32* %type, align 4
  %cmp35 = icmp ne i32 %33, 0
  br i1 %cmp35, label %if.then.37, label %if.end.46

if.then.37:                                       ; preds = %sw.epilog
  %34 = load i8*, i8** %end, align 8
  %call38 = call i32 @pbm_scan_number(i8** %p, i8* %34)
  store i32 %call38, i32* %max_color_idx, align 4
  %35 = load i32, i32* %max_color_idx, align 4
  %cmp39 = icmp sgt i32 %35, 65535
  br i1 %cmp39, label %if.then.44, label %lor.lhs.false.41

lor.lhs.false.41:                                 ; preds = %if.then.37
  %36 = load i32, i32* %max_color_idx, align 4
  %cmp42 = icmp slt i32 %36, 0
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %lor.lhs.false.41, %if.then.37
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.31, i32 0, i32 0))
  br label %error

if.end.45:                                        ; preds = %lor.lhs.false.41
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %sw.epilog
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %38 = load i32, i32* %width, align 4
  %39 = load i32, i32* %height, align 4
  %call47 = call zeroext i1 @check_image_size(%struct.frame* %37, i32 %38, i32 %39)
  br i1 %call47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.end.46
  call void @image_size_error()
  br label %error

if.end.49:                                        ; preds = %if.end.46
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %41 = load %struct.image*, %struct.image** %img.addr, align 8
  %42 = load i32, i32* %width, align 4
  %43 = load i32, i32* %height, align 4
  %call50 = call zeroext i1 @image_create_x_image_and_pixmap(%struct.frame* %40, %struct.image* %41, i32 %42, i32 %43, i32 0, %struct._XImage** %ximg, i1 zeroext false)
  br i1 %call50, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %if.end.49
  br label %error

if.end.52:                                        ; preds = %if.end.49
  call void @init_color_table()
  %44 = load i32, i32* %type, align 4
  %cmp53 = icmp eq i32 %44, 0
  br i1 %cmp53, label %if.then.55, label %if.else.109

if.then.55:                                       ; preds = %if.end.52
  store i32 0, i32* %c, align 4
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 78
  %46 = load i64, i64* %foreground_pixel, align 8
  store i64 %46, i64* %fg, align 8
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 77
  %48 = load i64, i64* %background_pixel, align 8
  store i64 %48, i64* %bg, align 8
  %49 = bitcast [11 x %struct.image_keyword]* %fmt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* bitcast ([11 x %struct.image_keyword]* @pbm_format to i8*), i64 352, i32 16, i1 false)
  %50 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec56 = getelementptr inbounds %struct.image, %struct.image* %50, i32 0, i32 15
  %51 = load i64, i64* %spec56, align 8
  %arraydecay = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i32 0
  %call57 = call i64 @builtin_lisp_symbol(i32 743)
  %call58 = call zeroext i1 @parse_image_spec(i64 %51, %struct.image_keyword* %arraydecay, i32 11, i64 %call57)
  %arrayidx = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 9
  %count = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx, i32 0, i32 3
  %52 = load i32, i32* %count, align 4
  %tobool = icmp ne i32 %52, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.66

land.lhs.true:                                    ; preds = %if.then.55
  %arrayidx59 = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 9
  %value = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx59, i32 0, i32 4
  %53 = load i64, i64* %value, align 8
  %call60 = call zeroext i1 @STRINGP(i64 %53)
  br i1 %call60, label %if.then.62, label %if.end.66

if.then.62:                                       ; preds = %land.lhs.true
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %55 = load %struct.image*, %struct.image** %img.addr, align 8
  %arrayidx63 = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 9
  %value64 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx63, i32 0, i32 4
  %56 = load i64, i64* %value64, align 8
  %57 = load i64, i64* %fg, align 8
  %call65 = call i64 @x_alloc_image_color(%struct.frame* %54, %struct.image* %55, i64 %56, i64 %57)
  store i64 %call65, i64* %fg, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.62, %land.lhs.true, %if.then.55
  %arrayidx67 = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 10
  %count68 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx67, i32 0, i32 3
  %58 = load i32, i32* %count68, align 4
  %tobool69 = icmp ne i32 %58, 0
  br i1 %tobool69, label %land.lhs.true.70, label %if.end.79

land.lhs.true.70:                                 ; preds = %if.end.66
  %arrayidx71 = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 10
  %value72 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx71, i32 0, i32 4
  %59 = load i64, i64* %value72, align 8
  %call73 = call zeroext i1 @STRINGP(i64 %59)
  br i1 %call73, label %if.then.75, label %if.end.79

if.then.75:                                       ; preds = %land.lhs.true.70
  %60 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %61 = load %struct.image*, %struct.image** %img.addr, align 8
  %arrayidx76 = getelementptr inbounds [11 x %struct.image_keyword], [11 x %struct.image_keyword]* %fmt, i32 0, i64 10
  %value77 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx76, i32 0, i32 4
  %62 = load i64, i64* %value77, align 8
  %63 = load i64, i64* %bg, align 8
  %call78 = call i64 @x_alloc_image_color(%struct.frame* %60, %struct.image* %61, i64 %62, i64 %63)
  store i64 %call78, i64* %bg, align 8
  %64 = load i64, i64* %bg, align 8
  %65 = load %struct.image*, %struct.image** %img.addr, align 8
  %background = getelementptr inbounds %struct.image, %struct.image* %65, i32 0, i32 7
  store i64 %64, i64* %background, align 8
  %66 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid = getelementptr inbounds %struct.image, %struct.image* %66, i32 0, i32 10
  %bf.load = load i8, i8* %background_valid, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %background_valid, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.75, %land.lhs.true.70, %if.end.66
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.106, %if.end.79
  %67 = load i32, i32* %y, align 4
  %68 = load i32, i32* %height, align 4
  %cmp80 = icmp slt i32 %67, %68
  br i1 %cmp80, label %for.body, label %for.end.108

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x, align 4
  br label %for.cond.82

for.cond.82:                                      ; preds = %for.inc, %for.body
  %69 = load i32, i32* %x, align 4
  %70 = load i32, i32* %width, align 4
  %cmp83 = icmp slt i32 %69, %70
  br i1 %cmp83, label %for.body.85, label %for.end

for.body.85:                                      ; preds = %for.cond.82
  %71 = load i8, i8* %raw_p, align 1
  %tobool86 = trunc i8 %71 to i1
  br i1 %tobool86, label %if.then.87, label %if.else.100

if.then.87:                                       ; preds = %for.body.85
  %72 = load i32, i32* %x, align 4
  %and = and i32 %72, 7
  %cmp88 = icmp eq i32 %and, 0
  br i1 %cmp88, label %if.then.90, label %if.end.98

if.then.90:                                       ; preds = %if.then.87
  %73 = load i8*, i8** %p, align 8
  %74 = load i8*, i8** %end, align 8
  %cmp91 = icmp uge i8* %73, %74
  br i1 %cmp91, label %if.then.93, label %if.end.95

if.then.93:                                       ; preds = %if.then.90
  %75 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @x_destroy_x_image(%struct._XImage* %75)
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %77 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image(%struct.frame* %76, %struct.image* %77)
  %78 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec94 = getelementptr inbounds %struct.image, %struct.image* %78, i32 0, i32 15
  %79 = load i64, i64* %spec94, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.32, i32 0, i32 0), i64 %79)
  br label %error

if.end.95:                                        ; preds = %if.then.90
  %80 = load i8*, i8** %p, align 8
  %incdec.ptr96 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr96, i8** %p, align 8
  %81 = load i8, i8* %80, align 1
  %conv97 = zext i8 %81 to i32
  store i32 %conv97, i32* %c, align 4
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.95, %if.then.87
  %82 = load i32, i32* %c, align 4
  %and99 = and i32 %82, 128
  store i32 %and99, i32* %g, align 4
  %83 = load i32, i32* %c, align 4
  %shl = shl i32 %83, 1
  store i32 %shl, i32* %c, align 4
  br label %if.end.102

if.else.100:                                      ; preds = %for.body.85
  %84 = load i8*, i8** %end, align 8
  %call101 = call i32 @pbm_scan_number(i8** %p, i8* %84)
  store i32 %call101, i32* %g, align 4
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.100, %if.end.98
  %85 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f103 = getelementptr inbounds %struct._XImage, %struct._XImage* %85, i32 0, i32 16
  %put_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f103, i32 0, i32 3
  %86 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel, align 8
  %87 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %88 = load i32, i32* %x, align 4
  %89 = load i32, i32* %y, align 4
  %90 = load i32, i32* %g, align 4
  %tobool104 = icmp ne i32 %90, 0
  br i1 %tobool104, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.102
  %91 = load i64, i64* %fg, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.102
  %92 = load i64, i64* %bg, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %91, %cond.true ], [ %92, %cond.false ]
  %call105 = call i32 %86(%struct._XImage* %87, i32 %88, i32 %89, i64 %cond)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %93 = load i32, i32* %x, align 4
  %inc = add nsw i32 %93, 1
  store i32 %inc, i32* %x, align 4
  br label %for.cond.82

for.end:                                          ; preds = %for.cond.82
  br label %for.inc.106

for.inc.106:                                      ; preds = %for.end
  %94 = load i32, i32* %y, align 4
  %inc107 = add nsw i32 %94, 1
  store i32 %inc107, i32* %y, align 4
  br label %for.cond

for.end.108:                                      ; preds = %for.cond
  br label %if.end.233

if.else.109:                                      ; preds = %if.end.52
  %95 = load i32, i32* %height, align 4
  %96 = load i32, i32* %width, align 4
  %mul = mul nsw i32 %95, %96
  store i32 %mul, i32* %expected_size, align 4
  %97 = load i32, i32* %max_color_idx, align 4
  %cmp110 = icmp sgt i32 %97, 255
  br i1 %cmp110, label %if.then.112, label %if.end.114

if.then.112:                                      ; preds = %if.else.109
  %98 = load i32, i32* %expected_size, align 4
  %mul113 = mul nsw i32 %98, 2
  store i32 %mul113, i32* %expected_size, align 4
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.112, %if.else.109
  %99 = load i32, i32* %type, align 4
  %cmp115 = icmp eq i32 %99, 2
  br i1 %cmp115, label %if.then.117, label %if.end.119

if.then.117:                                      ; preds = %if.end.114
  %100 = load i32, i32* %expected_size, align 4
  %mul118 = mul nsw i32 %100, 3
  store i32 %mul118, i32* %expected_size, align 4
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.117, %if.end.114
  %101 = load i8, i8* %raw_p, align 1
  %tobool120 = trunc i8 %101 to i1
  br i1 %tobool120, label %land.lhs.true.122, label %if.end.128

land.lhs.true.122:                                ; preds = %if.end.119
  %102 = load i8*, i8** %p, align 8
  %103 = load i32, i32* %expected_size, align 4
  %idx.ext = sext i32 %103 to i64
  %add.ptr123 = getelementptr inbounds i8, i8* %102, i64 %idx.ext
  %104 = load i8*, i8** %end, align 8
  %cmp124 = icmp ugt i8* %add.ptr123, %104
  br i1 %cmp124, label %if.then.126, label %if.end.128

if.then.126:                                      ; preds = %land.lhs.true.122
  %105 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @x_destroy_x_image(%struct._XImage* %105)
  %106 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %107 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image(%struct.frame* %106, %struct.image* %107)
  %108 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec127 = getelementptr inbounds %struct.image, %struct.image* %108, i32 0, i32 15
  %109 = load i64, i64* %spec127, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.32, i32 0, i32 0), i64 %109)
  br label %error

if.end.128:                                       ; preds = %land.lhs.true.122, %if.end.119
  store i32 0, i32* %y, align 4
  br label %for.cond.129

for.cond.129:                                     ; preds = %for.inc.230, %if.end.128
  %110 = load i32, i32* %y, align 4
  %111 = load i32, i32* %height, align 4
  %cmp130 = icmp slt i32 %110, %111
  br i1 %cmp130, label %for.body.132, label %for.end.232

for.body.132:                                     ; preds = %for.cond.129
  store i32 0, i32* %x, align 4
  br label %for.cond.133

for.cond.133:                                     ; preds = %for.inc.227, %for.body.132
  %112 = load i32, i32* %x, align 4
  %113 = load i32, i32* %width, align 4
  %cmp134 = icmp slt i32 %112, %113
  br i1 %cmp134, label %for.body.136, label %for.end.229

for.body.136:                                     ; preds = %for.cond.133
  %114 = load i32, i32* %type, align 4
  %cmp138 = icmp eq i32 %114, 1
  br i1 %cmp138, label %land.lhs.true.140, label %if.else.153

land.lhs.true.140:                                ; preds = %for.body.136
  %115 = load i8, i8* %raw_p, align 1
  %tobool141 = trunc i8 %115 to i1
  br i1 %tobool141, label %if.then.143, label %if.else.153

if.then.143:                                      ; preds = %land.lhs.true.140
  %116 = load i8*, i8** %p, align 8
  %incdec.ptr144 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr144, i8** %p, align 8
  %117 = load i8, i8* %116, align 1
  %conv145 = zext i8 %117 to i32
  store i32 %conv145, i32* %b, align 4
  store i32 %conv145, i32* %g137, align 4
  store i32 %conv145, i32* %r, align 4
  %118 = load i32, i32* %max_color_idx, align 4
  %cmp146 = icmp sgt i32 %118, 255
  br i1 %cmp146, label %if.then.148, label %if.end.152

if.then.148:                                      ; preds = %if.then.143
  %119 = load i32, i32* %r, align 4
  %mul149 = mul nsw i32 %119, 256
  %120 = load i8*, i8** %p, align 8
  %incdec.ptr150 = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %incdec.ptr150, i8** %p, align 8
  %121 = load i8, i8* %120, align 1
  %conv151 = zext i8 %121 to i32
  %add = add nsw i32 %mul149, %conv151
  store i32 %add, i32* %b, align 4
  store i32 %add, i32* %g137, align 4
  store i32 %add, i32* %r, align 4
  br label %if.end.152

if.end.152:                                       ; preds = %if.then.148, %if.then.143
  br label %if.end.197

if.else.153:                                      ; preds = %land.lhs.true.140, %for.body.136
  %122 = load i32, i32* %type, align 4
  %cmp154 = icmp eq i32 %122, 1
  br i1 %cmp154, label %if.then.156, label %if.else.158

if.then.156:                                      ; preds = %if.else.153
  %123 = load i8*, i8** %end, align 8
  %call157 = call i32 @pbm_scan_number(i8** %p, i8* %123)
  store i32 %call157, i32* %b, align 4
  store i32 %call157, i32* %g137, align 4
  store i32 %call157, i32* %r, align 4
  br label %if.end.196

if.else.158:                                      ; preds = %if.else.153
  %124 = load i8, i8* %raw_p, align 1
  %tobool159 = trunc i8 %124 to i1
  br i1 %tobool159, label %if.then.160, label %if.else.191

if.then.160:                                      ; preds = %if.else.158
  %125 = load i8*, i8** %p, align 8
  %incdec.ptr161 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %incdec.ptr161, i8** %p, align 8
  %126 = load i8, i8* %125, align 1
  %conv162 = zext i8 %126 to i32
  store i32 %conv162, i32* %r, align 4
  %127 = load i32, i32* %max_color_idx, align 4
  %cmp163 = icmp sgt i32 %127, 255
  br i1 %cmp163, label %if.then.165, label %if.end.170

if.then.165:                                      ; preds = %if.then.160
  %128 = load i32, i32* %r, align 4
  %mul166 = mul nsw i32 %128, 256
  %129 = load i8*, i8** %p, align 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %incdec.ptr167, i8** %p, align 8
  %130 = load i8, i8* %129, align 1
  %conv168 = zext i8 %130 to i32
  %add169 = add nsw i32 %mul166, %conv168
  store i32 %add169, i32* %r, align 4
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.165, %if.then.160
  %131 = load i8*, i8** %p, align 8
  %incdec.ptr171 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %incdec.ptr171, i8** %p, align 8
  %132 = load i8, i8* %131, align 1
  %conv172 = zext i8 %132 to i32
  store i32 %conv172, i32* %g137, align 4
  %133 = load i32, i32* %max_color_idx, align 4
  %cmp173 = icmp sgt i32 %133, 255
  br i1 %cmp173, label %if.then.175, label %if.end.180

if.then.175:                                      ; preds = %if.end.170
  %134 = load i32, i32* %g137, align 4
  %mul176 = mul nsw i32 %134, 256
  %135 = load i8*, i8** %p, align 8
  %incdec.ptr177 = getelementptr inbounds i8, i8* %135, i32 1
  store i8* %incdec.ptr177, i8** %p, align 8
  %136 = load i8, i8* %135, align 1
  %conv178 = zext i8 %136 to i32
  %add179 = add nsw i32 %mul176, %conv178
  store i32 %add179, i32* %g137, align 4
  br label %if.end.180

if.end.180:                                       ; preds = %if.then.175, %if.end.170
  %137 = load i8*, i8** %p, align 8
  %incdec.ptr181 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr181, i8** %p, align 8
  %138 = load i8, i8* %137, align 1
  %conv182 = zext i8 %138 to i32
  store i32 %conv182, i32* %b, align 4
  %139 = load i32, i32* %max_color_idx, align 4
  %cmp183 = icmp sgt i32 %139, 255
  br i1 %cmp183, label %if.then.185, label %if.end.190

if.then.185:                                      ; preds = %if.end.180
  %140 = load i32, i32* %b, align 4
  %mul186 = mul nsw i32 %140, 256
  %141 = load i8*, i8** %p, align 8
  %incdec.ptr187 = getelementptr inbounds i8, i8* %141, i32 1
  store i8* %incdec.ptr187, i8** %p, align 8
  %142 = load i8, i8* %141, align 1
  %conv188 = zext i8 %142 to i32
  %add189 = add nsw i32 %mul186, %conv188
  store i32 %add189, i32* %b, align 4
  br label %if.end.190

if.end.190:                                       ; preds = %if.then.185, %if.end.180
  br label %if.end.195

if.else.191:                                      ; preds = %if.else.158
  %143 = load i8*, i8** %end, align 8
  %call192 = call i32 @pbm_scan_number(i8** %p, i8* %143)
  store i32 %call192, i32* %r, align 4
  %144 = load i8*, i8** %end, align 8
  %call193 = call i32 @pbm_scan_number(i8** %p, i8* %144)
  store i32 %call193, i32* %g137, align 4
  %145 = load i8*, i8** %end, align 8
  %call194 = call i32 @pbm_scan_number(i8** %p, i8* %145)
  store i32 %call194, i32* %b, align 4
  br label %if.end.195

if.end.195:                                       ; preds = %if.else.191, %if.end.190
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195, %if.then.156
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %if.end.152
  %146 = load i32, i32* %r, align 4
  %cmp198 = icmp slt i32 %146, 0
  br i1 %cmp198, label %if.then.206, label %lor.lhs.false.200

lor.lhs.false.200:                                ; preds = %if.end.197
  %147 = load i32, i32* %g137, align 4
  %cmp201 = icmp slt i32 %147, 0
  br i1 %cmp201, label %if.then.206, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %lor.lhs.false.200
  %148 = load i32, i32* %b, align 4
  %cmp204 = icmp slt i32 %148, 0
  br i1 %cmp204, label %if.then.206, label %if.end.208

if.then.206:                                      ; preds = %lor.lhs.false.203, %lor.lhs.false.200, %if.end.197
  %149 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @x_destroy_x_image(%struct._XImage* %149)
  %150 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec207 = getelementptr inbounds %struct.image, %struct.image* %150, i32 0, i32 15
  %151 = load i64, i64* %spec207, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.33, i32 0, i32 0), i64 %151)
  br label %error

if.end.208:                                       ; preds = %lor.lhs.false.203
  %152 = load i32, i32* %r, align 4
  %conv209 = sitofp i32 %152 to double
  %mul210 = fmul double %conv209, 6.553500e+04
  %153 = load i32, i32* %max_color_idx, align 4
  %conv211 = sitofp i32 %153 to double
  %div = fdiv double %mul210, %conv211
  %conv212 = fptosi double %div to i32
  store i32 %conv212, i32* %r, align 4
  %154 = load i32, i32* %g137, align 4
  %conv213 = sitofp i32 %154 to double
  %mul214 = fmul double %conv213, 6.553500e+04
  %155 = load i32, i32* %max_color_idx, align 4
  %conv215 = sitofp i32 %155 to double
  %div216 = fdiv double %mul214, %conv215
  %conv217 = fptosi double %div216 to i32
  store i32 %conv217, i32* %g137, align 4
  %156 = load i32, i32* %b, align 4
  %conv218 = sitofp i32 %156 to double
  %mul219 = fmul double %conv218, 6.553500e+04
  %157 = load i32, i32* %max_color_idx, align 4
  %conv220 = sitofp i32 %157 to double
  %div221 = fdiv double %mul219, %conv220
  %conv222 = fptosi double %div221 to i32
  store i32 %conv222, i32* %b, align 4
  %158 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f223 = getelementptr inbounds %struct._XImage, %struct._XImage* %158, i32 0, i32 16
  %put_pixel224 = getelementptr inbounds %struct.funcs, %struct.funcs* %f223, i32 0, i32 3
  %159 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel224, align 8
  %160 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %161 = load i32, i32* %x, align 4
  %162 = load i32, i32* %y, align 4
  %163 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %164 = load i32, i32* %r, align 4
  %165 = load i32, i32* %g137, align 4
  %166 = load i32, i32* %b, align 4
  %call225 = call i64 @lookup_rgb_color(%struct.frame* %163, i32 %164, i32 %165, i32 %166)
  %call226 = call i32 %159(%struct._XImage* %160, i32 %161, i32 %162, i64 %call225)
  br label %for.inc.227

for.inc.227:                                      ; preds = %if.end.208
  %167 = load i32, i32* %x, align 4
  %inc228 = add nsw i32 %167, 1
  store i32 %inc228, i32* %x, align 4
  br label %for.cond.133

for.end.229:                                      ; preds = %for.cond.133
  br label %for.inc.230

for.inc.230:                                      ; preds = %for.end.229
  %168 = load i32, i32* %y, align 4
  %inc231 = add nsw i32 %168, 1
  store i32 %inc231, i32* %y, align 4
  br label %for.cond.129

for.end.232:                                      ; preds = %for.cond.129
  br label %if.end.233

if.end.233:                                       ; preds = %for.end.232, %for.end.108
  %169 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors = getelementptr inbounds %struct.image, %struct.image* %169, i32 0, i32 6
  %call234 = call i64* @colors_in_color_table(i32* %ncolors)
  %170 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors = getelementptr inbounds %struct.image, %struct.image* %170, i32 0, i32 5
  store i64* %call234, i64** %colors, align 8
  call void @free_color_table()
  %171 = load i32, i32* %width, align 4
  %172 = load %struct.image*, %struct.image** %img.addr, align 8
  %width235 = getelementptr inbounds %struct.image, %struct.image* %172, i32 0, i32 11
  store i32 %171, i32* %width235, align 4
  %173 = load i32, i32* %height, align 4
  %174 = load %struct.image*, %struct.image** %img.addr, align 8
  %height236 = getelementptr inbounds %struct.image, %struct.image* %174, i32 0, i32 12
  store i32 %173, i32* %height236, align 4
  %175 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec237 = getelementptr inbounds %struct.image, %struct.image* %175, i32 0, i32 15
  %176 = load i64, i64* %spec237, align 8
  %call238 = call i64 @builtin_lisp_symbol(i32 13)
  %call239 = call i64 @image_spec_value(i64 %176, i64 %call238, i8* null)
  %call240 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp241 = icmp eq i64 %call239, %call240
  br i1 %cmp241, label %if.then.243, label %if.end.254

if.then.243:                                      ; preds = %if.end.233
  %177 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid244 = getelementptr inbounds %struct.image, %struct.image* %177, i32 0, i32 10
  %bf.load245 = load i8, i8* %background_valid244, align 8
  %bf.lshr = lshr i8 %bf.load245, 1
  %bf.clear246 = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear246 to i1
  br i1 %bf.cast, label %cond.true.248, label %cond.false.250

cond.true.248:                                    ; preds = %if.then.243
  %178 = load %struct.image*, %struct.image** %img.addr, align 8
  %background249 = getelementptr inbounds %struct.image, %struct.image* %178, i32 0, i32 7
  %179 = load i64, i64* %background249, align 8
  br label %cond.end.252

cond.false.250:                                   ; preds = %if.then.243
  %180 = load %struct.image*, %struct.image** %img.addr, align 8
  %181 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %182 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %call251 = call i64 @image_background(%struct.image* %180, %struct.frame* %181, %struct._XImage* %182)
  br label %cond.end.252

cond.end.252:                                     ; preds = %cond.false.250, %cond.true.248
  %cond253 = phi i64 [ %179, %cond.true.248 ], [ %call251, %cond.false.250 ]
  br label %if.end.254

if.end.254:                                       ; preds = %cond.end.252, %if.end.233
  %183 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %184 = load %struct.image*, %struct.image** %img.addr, align 8
  %185 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @image_put_x_image(%struct.frame* %183, %struct.image* %184, %struct._XImage* %185, i1 zeroext false)
  %186 = load i8*, i8** %contents, align 8
  call void @xfree(i8* %186)
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.254, %error, %if.then.13, %if.then.7, %if.then.5
  %187 = load i1, i1* %retval
  ret i1 %187
}

; Function Attrs: nounwind uwtable
define internal void @x_clear_image(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image_1(%struct.frame* %0, %struct.image* %1, i32 7)
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @parse_image_spec(i64 %spec, %struct.image_keyword* %keywords, i32 %nkeywords, i64 %type) #0 {
entry:
  %retval = alloca i1, align 1
  %spec.addr = alloca i64, align 8
  %keywords.addr = alloca %struct.image_keyword*, align 8
  %nkeywords.addr = alloca i32, align 4
  %type.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %plist = alloca i64, align 8
  %key = alloca i64, align 8
  %value = alloca i64, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store %struct.image_keyword* %keywords, %struct.image_keyword** %keywords.addr, align 8
  store i32 %nkeywords, i32* %nkeywords.addr, align 4
  store i64 %type, i64* %type.addr, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call = call zeroext i1 @IMAGEP(i64 %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %spec.addr, align 8
  %sub = sub nsw i64 %1, 3
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %3, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %4 = load i64, i64* %cdr, align 8
  store i64 %4, i64* %plist, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.167, %if.then.34, %if.end
  %5 = load i64, i64* %plist, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64, i64* %plist, align 8
  %sub2 = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub2 to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 0
  %9 = load i64, i64* %car, align 8
  store i64 %9, i64* %key, align 8
  %10 = load i64, i64* %plist, align 8
  %sub3 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub3 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u4 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr5 = bitcast %union.anon.11* %u4 to i64*
  %13 = load i64, i64* %cdr5, align 8
  store i64 %13, i64* %plist, align 8
  %14 = load i64, i64* %key, align 8
  %and6 = and i64 %14, 7
  %conv7 = trunc i64 %and6 to i32
  %cmp8 = icmp eq i32 %conv7, 0
  br i1 %cmp8, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %while.body
  store i1 false, i1* %retval
  br label %return

if.end.11:                                        ; preds = %while.body
  %15 = load i64, i64* %plist, align 8
  %and12 = and i64 %15, 7
  %conv13 = trunc i64 %and12 to i32
  %cmp14 = icmp eq i32 %conv13, 3
  br i1 %cmp14, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.end.11
  store i1 false, i1* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.11
  %16 = load i64, i64* %plist, align 8
  %sub18 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub18 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %car19 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 0
  %19 = load i64, i64* %car19, align 8
  store i64 %19, i64* %value, align 8
  %20 = load i64, i64* %plist, align 8
  %sub20 = sub nsw i64 %20, 3
  %21 = inttoptr i64 %sub20 to i8*
  %22 = bitcast i8* %21 to %struct.Lisp_Cons*
  %u21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %22, i32 0, i32 1
  %cdr22 = bitcast %union.anon.11* %u21 to i64*
  %23 = load i64, i64* %cdr22, align 8
  store i64 %23, i64* %plist, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.17
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %nkeywords.addr, align 4
  %cmp23 = icmp slt i32 %24, %25
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i32, i32* %i, align 4
  %idxprom = sext i32 %26 to i64
  %27 = load %struct.image_keyword*, %struct.image_keyword** %keywords.addr, align 8
  %arrayidx = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %27, i64 %idxprom
  %name = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx, i32 0, i32 0
  %28 = load i8*, i8** %name, align 8
  %29 = load i64, i64* %key, align 8
  %call25 = call i64 @SYMBOL_NAME(i64 %29)
  %call26 = call i8* @SSDATA(i64 %call25)
  %call27 = call i32 @strcmp(i8* %28, i8* %call26) #10
  %cmp28 = icmp eq i32 %call27, 0
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %for.body
  br label %for.end

if.end.31:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.31
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.30, %for.cond
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %nkeywords.addr, align 4
  %cmp32 = icmp eq i32 %31, %32
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %for.end
  br label %while.cond

if.end.35:                                        ; preds = %for.end
  %33 = load i64, i64* %value, align 8
  %34 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %34 to i64
  %35 = load %struct.image_keyword*, %struct.image_keyword** %keywords.addr, align 8
  %arrayidx37 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %35, i64 %idxprom36
  %value38 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx37, i32 0, i32 4
  store i64 %33, i64* %value38, align 8
  %36 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %36 to i64
  %37 = load %struct.image_keyword*, %struct.image_keyword** %keywords.addr, align 8
  %arrayidx40 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %37, i64 %idxprom39
  %count = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx40, i32 0, i32 3
  %38 = load i32, i32* %count, align 4
  %cmp41 = icmp sgt i32 %38, 1
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.35
  store i1 false, i1* %retval
  br label %return

if.end.44:                                        ; preds = %if.end.35
  %39 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %39 to i64
  %40 = load %struct.image_keyword*, %struct.image_keyword** %keywords.addr, align 8
  %arrayidx46 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %40, i64 %idxprom45
  %count47 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx46, i32 0, i32 3
  %41 = load i32, i32* %count47, align 4
  %inc48 = add nsw i32 %41, 1
  store i32 %inc48, i32* %count47, align 4
  %42 = load i32, i32* %i, align 4
  %idxprom49 = sext i32 %42 to i64
  %43 = load %struct.image_keyword*, %struct.image_keyword** %keywords.addr, align 8
  %arrayidx50 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %43, i64 %idxprom49
  %type51 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx50, i32 0, i32 1
  %44 = load i32, i32* %type51, align 4
  switch i32 %44, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.55
    i32 3, label %sw.bb.62
    i32 4, label %sw.bb.69
    i32 5, label %sw.bb.73
    i32 7, label %sw.bb.94
    i32 6, label %sw.bb.108
    i32 0, label %sw.bb.118
    i32 9, label %sw.bb.119
    i32 10, label %sw.bb.127
    i32 8, label %sw.bb.131
    i32 11, label %sw.bb.150
  ]

sw.bb:                                            ; preds = %if.end.44
  %45 = load i64, i64* %value, align 8
  %call52 = call zeroext i1 @STRINGP(i64 %45)
  br i1 %call52, label %if.end.54, label %if.then.53

if.then.53:                                       ; preds = %sw.bb
  store i1 false, i1* %retval
  br label %return

if.end.54:                                        ; preds = %sw.bb
  br label %sw.epilog

sw.bb.55:                                         ; preds = %if.end.44
  %46 = load i64, i64* %value, align 8
  %call56 = call zeroext i1 @STRINGP(i64 %46)
  br i1 %call56, label %if.end.61, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.bb.55
  %47 = load i64, i64* %value, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %47, %call57
  br i1 %cmp58, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %land.lhs.true
  store i1 false, i1* %retval
  br label %return

if.end.61:                                        ; preds = %land.lhs.true, %sw.bb.55
  br label %sw.epilog

sw.bb.62:                                         ; preds = %if.end.44
  %48 = load i64, i64* %value, align 8
  %and63 = and i64 %48, 7
  %conv64 = trunc i64 %and63 to i32
  %cmp65 = icmp eq i32 %conv64, 0
  br i1 %cmp65, label %if.end.68, label %if.then.67

if.then.67:                                       ; preds = %sw.bb.62
  store i1 false, i1* %retval
  br label %return

if.end.68:                                        ; preds = %sw.bb.62
  br label %sw.epilog

sw.bb.69:                                         ; preds = %if.end.44
  %49 = load i64, i64* %value, align 8
  %call70 = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %49, i64 2147483647)
  br i1 %call70, label %if.end.72, label %if.then.71

if.then.71:                                       ; preds = %sw.bb.69
  store i1 false, i1* %retval
  br label %return

if.end.72:                                        ; preds = %sw.bb.69
  br label %sw.epilog

sw.bb.73:                                         ; preds = %if.end.44
  %50 = load i64, i64* %value, align 8
  %call74 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %50, i64 2147483647)
  br i1 %call74, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %sw.bb.73
  br label %sw.epilog

if.end.76:                                        ; preds = %sw.bb.73
  %51 = load i64, i64* %value, align 8
  %and77 = and i64 %51, 7
  %conv78 = trunc i64 %and77 to i32
  %cmp79 = icmp eq i32 %conv78, 3
  br i1 %cmp79, label %land.lhs.true.81, label %if.end.93

land.lhs.true.81:                                 ; preds = %if.end.76
  %52 = load i64, i64* %value, align 8
  %sub82 = sub nsw i64 %52, 3
  %53 = inttoptr i64 %sub82 to i8*
  %54 = bitcast i8* %53 to %struct.Lisp_Cons*
  %car83 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %54, i32 0, i32 0
  %55 = load i64, i64* %car83, align 8
  %call84 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %55, i64 2147483647)
  br i1 %call84, label %land.lhs.true.86, label %if.end.93

land.lhs.true.86:                                 ; preds = %land.lhs.true.81
  %56 = load i64, i64* %value, align 8
  %sub87 = sub nsw i64 %56, 3
  %57 = inttoptr i64 %sub87 to i8*
  %58 = bitcast i8* %57 to %struct.Lisp_Cons*
  %u88 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %58, i32 0, i32 1
  %cdr89 = bitcast %union.anon.11* %u88 to i64*
  %59 = load i64, i64* %cdr89, align 8
  %call90 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %59, i64 2147483647)
  br i1 %call90, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %land.lhs.true.86
  br label %sw.epilog

if.end.93:                                        ; preds = %land.lhs.true.86, %land.lhs.true.81, %if.end.76
  store i1 false, i1* %retval
  br label %return

sw.bb.94:                                         ; preds = %if.end.44
  %60 = load i64, i64* %value, align 8
  %and95 = and i64 %60, 7
  %conv96 = trunc i64 %and95 to i32
  %cmp97 = icmp eq i32 %conv96, 0
  br i1 %cmp97, label %land.lhs.true.99, label %if.else

land.lhs.true.99:                                 ; preds = %sw.bb.94
  %61 = load i64, i64* %value, align 8
  %call100 = call i64 @builtin_lisp_symbol(i32 251)
  %cmp101 = icmp eq i64 %61, %call100
  br i1 %cmp101, label %if.then.103, label %if.else

if.then.103:                                      ; preds = %land.lhs.true.99
  br label %sw.epilog

if.else:                                          ; preds = %land.lhs.true.99, %sw.bb.94
  %62 = load i64, i64* %value, align 8
  %call104 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %62, i64 100)
  br i1 %call104, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %if.else
  br label %sw.epilog

if.end.106:                                       ; preds = %if.else
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106
  store i1 false, i1* %retval
  br label %return

sw.bb.108:                                        ; preds = %if.end.44
  %63 = load i64, i64* %value, align 8
  %and109 = and i64 %63, 7
  %conv110 = trunc i64 %and109 to i32
  %and111 = and i32 %conv110, -5
  %cmp112 = icmp eq i32 %and111, 2
  br i1 %cmp112, label %lor.lhs.false, label %if.then.116

lor.lhs.false:                                    ; preds = %sw.bb.108
  %64 = load i64, i64* %value, align 8
  %shr = ashr i64 %64, 2
  %cmp114 = icmp slt i64 %shr, 0
  br i1 %cmp114, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %lor.lhs.false, %sw.bb.108
  store i1 false, i1* %retval
  br label %return

if.end.117:                                       ; preds = %lor.lhs.false
  br label %sw.epilog

sw.bb.118:                                        ; preds = %if.end.44
  br label %sw.epilog

sw.bb.119:                                        ; preds = %if.end.44
  %65 = load i64, i64* %value, align 8
  %call120 = call i64 @indirect_function(i64 %65)
  store i64 %call120, i64* %value, align 8
  %66 = load i64, i64* %value, align 8
  %call121 = call i64 @Ffunctionp(i64 %66)
  %call122 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp123 = icmp eq i64 %call121, %call122
  br i1 %cmp123, label %if.end.126, label %if.then.125

if.then.125:                                      ; preds = %sw.bb.119
  br label %sw.epilog

if.end.126:                                       ; preds = %sw.bb.119
  store i1 false, i1* %retval
  br label %return

sw.bb.127:                                        ; preds = %if.end.44
  %67 = load i64, i64* %value, align 8
  %call128 = call zeroext i1 @NUMBERP(i64 %67)
  br i1 %call128, label %if.end.130, label %if.then.129

if.then.129:                                      ; preds = %sw.bb.127
  store i1 false, i1* %retval
  br label %return

if.end.130:                                       ; preds = %sw.bb.127
  br label %sw.epilog

sw.bb.131:                                        ; preds = %if.end.44
  %68 = load i64, i64* %value, align 8
  %and132 = and i64 %68, 7
  %conv133 = trunc i64 %and132 to i32
  %and134 = and i32 %conv133, -5
  %cmp135 = icmp eq i32 %and134, 2
  br i1 %cmp135, label %land.lhs.true.137, label %if.then.148

land.lhs.true.137:                                ; preds = %sw.bb.131
  br i1 false, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true.137
  %69 = load i64, i64* %value, align 8
  %shr138 = ashr i64 %69, 2
  %cmp139 = icmp sle i64 -2147483648, %shr138
  br i1 %cmp139, label %land.lhs.true.144, label %if.then.148

cond.false:                                       ; preds = %land.lhs.true.137
  %70 = load i64, i64* %value, align 8
  %shr141 = ashr i64 %70, 2
  %cmp142 = icmp sle i64 0, %shr141
  br i1 %cmp142, label %land.lhs.true.144, label %if.then.148

land.lhs.true.144:                                ; preds = %cond.false, %cond.true
  %71 = load i64, i64* %value, align 8
  %shr145 = ashr i64 %71, 2
  %cmp146 = icmp sle i64 %shr145, 2147483647
  br i1 %cmp146, label %if.end.149, label %if.then.148

if.then.148:                                      ; preds = %land.lhs.true.144, %cond.false, %cond.true, %sw.bb.131
  store i1 false, i1* %retval
  br label %return

if.end.149:                                       ; preds = %land.lhs.true.144
  br label %sw.epilog

sw.bb.150:                                        ; preds = %if.end.44
  %72 = load i64, i64* %value, align 8
  %call151 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp152 = icmp eq i64 %72, %call151
  br i1 %cmp152, label %if.end.159, label %land.lhs.true.154

land.lhs.true.154:                                ; preds = %sw.bb.150
  %73 = load i64, i64* %value, align 8
  %call155 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp156 = icmp eq i64 %73, %call155
  br i1 %cmp156, label %if.end.159, label %if.then.158

if.then.158:                                      ; preds = %land.lhs.true.154
  store i1 false, i1* %retval
  br label %return

if.end.159:                                       ; preds = %land.lhs.true.154, %sw.bb.150
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.44
  call void @emacs_abort() #11
  unreachable

sw.epilog:                                        ; preds = %if.end.159, %if.end.149, %if.end.130, %if.then.125, %sw.bb.118, %if.end.117, %if.then.105, %if.then.103, %if.then.92, %if.then.75, %if.end.72, %if.end.68, %if.end.61, %if.end.54
  %74 = load i64, i64* %key, align 8
  %call160 = call i64 @builtin_lisp_symbol(i32 131)
  %cmp161 = icmp eq i64 %74, %call160
  br i1 %cmp161, label %land.lhs.true.163, label %if.end.167

land.lhs.true.163:                                ; preds = %sw.epilog
  %75 = load i64, i64* %type.addr, align 8
  %76 = load i64, i64* %value, align 8
  %cmp164 = icmp eq i64 %75, %76
  br i1 %cmp164, label %if.end.167, label %if.then.166

if.then.166:                                      ; preds = %land.lhs.true.163
  store i1 false, i1* %retval
  br label %return

if.end.167:                                       ; preds = %land.lhs.true.163, %sw.epilog
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.168

for.cond.168:                                     ; preds = %for.inc.183, %while.end
  %77 = load i32, i32* %i, align 4
  %78 = load i32, i32* %nkeywords.addr, align 4
  %cmp169 = icmp slt i32 %77, %78
  br i1 %cmp169, label %for.body.171, label %for.end.185

for.body.171:                                     ; preds = %for.cond.168
  %79 = load i32, i32* %i, align 4
  %idxprom172 = sext i32 %79 to i64
  %80 = load %struct.image_keyword*, %struct.image_keyword** %keywords.addr, align 8
  %arrayidx173 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %80, i64 %idxprom172
  %mandatory_p = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx173, i32 0, i32 2
  %81 = load i8, i8* %mandatory_p, align 1
  %tobool = trunc i8 %81 to i1
  br i1 %tobool, label %land.lhs.true.175, label %if.end.182

land.lhs.true.175:                                ; preds = %for.body.171
  %82 = load i32, i32* %i, align 4
  %idxprom176 = sext i32 %82 to i64
  %83 = load %struct.image_keyword*, %struct.image_keyword** %keywords.addr, align 8
  %arrayidx177 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %83, i64 %idxprom176
  %count178 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx177, i32 0, i32 3
  %84 = load i32, i32* %count178, align 4
  %cmp179 = icmp eq i32 %84, 0
  br i1 %cmp179, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %land.lhs.true.175
  store i1 false, i1* %retval
  br label %return

if.end.182:                                       ; preds = %land.lhs.true.175, %for.body.171
  br label %for.inc.183

for.inc.183:                                      ; preds = %if.end.182
  %85 = load i32, i32* %i, align 4
  %inc184 = add nsw i32 %85, 1
  store i32 %inc184, i32* %i, align 4
  br label %for.cond.168

for.end.185:                                      ; preds = %for.cond.168
  %86 = load i64, i64* %plist, align 8
  %call186 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp187 = icmp eq i64 %86, %call186
  store i1 %cmp187, i1* %retval
  br label %return

return:                                           ; preds = %for.end.185, %if.then.181, %if.then.166, %if.then.158, %if.then.148, %if.then.129, %if.end.126, %if.then.116, %if.end.107, %if.end.93, %if.then.71, %if.then.67, %if.then.60, %if.then.53, %if.then.43, %if.then.16, %if.then.10, %if.then
  %87 = load i1, i1* %retval
  ret i1 %87
}

declare i64 @SYMBOL_NAME(i64) #1

declare zeroext i1 @STRINGP(i64) #1

declare i64 @indirect_function(i64) #1

declare i64 @Ffunctionp(i64) #1

; Function Attrs: noreturn
declare void @emacs_abort() #3

; Function Attrs: nounwind uwtable
define internal i8* @slurp_file(i32 %fd, i64* %size) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %size.addr = alloca i64*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %buf = alloca i8*, align 8
  %st = alloca %struct.stat, align 8
  %count = alloca i64, align 8
  %buflen = alloca i64, align 8
  store i32 %fd, i32* %fd.addr, align 4
  store i64* %size, i64** %size.addr, align 8
  %0 = load i32, i32* %fd.addr, align 4
  %call = call %struct._IO_FILE* @fdopen(i32 %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0)) #4
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  store i8* null, i8** %buf, align 8
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool = icmp ne %struct._IO_FILE* %1, null
  br i1 %tobool, label %if.then, label %if.end.18

if.then:                                          ; preds = %entry
  %call1 = call i64 @SPECPDL_INDEX()
  store i64 %call1, i64* %count, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %3 = bitcast %struct._IO_FILE* %2 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @fclose_unwind, i8* %3)
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call2 = call i32 @fileno(%struct._IO_FILE* %4) #4
  %call3 = call i32 @fstat(i32 %call2, %struct.stat* %st) #4
  %cmp = icmp eq i32 %call3, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.then
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %5 = load i64, i64* %st_size, align 8
  %cmp4 = icmp sle i64 0, %5
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.15

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %6 = load i64, i64* %st_size6, align 8
  %cmp7 = icmp ult i64 %6, 9223372036854775807
  br i1 %cmp7, label %if.then.8, label %if.end.15

if.then.8:                                        ; preds = %land.lhs.true.5
  %st_size9 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8
  %7 = load i64, i64* %st_size9, align 8
  store i64 %7, i64* %buflen, align 8
  %8 = load i64, i64* %buflen, align 8
  %add = add nsw i64 %8, 1
  %call10 = call noalias i8* @xmalloc(i64 %add)
  store i8* %call10, i8** %buf, align 8
  %9 = load i8*, i8** %buf, align 8
  %10 = load i64, i64* %buflen, align 8
  %add11 = add nsw i64 %10, 1
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call12 = call i64 @fread(i8* %9, i64 1, i64 %add11, %struct._IO_FILE* %11)
  %12 = load i64, i64* %buflen, align 8
  %cmp13 = icmp eq i64 %call12, %12
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.then.8
  %13 = load i64, i64* %buflen, align 8
  %14 = load i64*, i64** %size.addr, align 8
  store i64 %13, i64* %14, align 8
  br label %if.end

if.else:                                          ; preds = %if.then.8
  %15 = load i8*, i8** %buf, align 8
  call void @xfree(i8* %15)
  store i8* null, i8** %buf, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.14
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %land.lhs.true.5, %land.lhs.true, %if.then
  %16 = load i64, i64* %count, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %call17 = call i64 @unbind_to(i64 %16, i64 %call16)
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.15, %entry
  %17 = load i8*, i8** %buf, align 8
  ret i8* %17
}

declare i8* @SDATA(i64) #1

declare i64 @SBYTES(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @pbm_scan_number(i8** %s, i8* %end) #0 {
entry:
  %s.addr = alloca i8**, align 8
  %end.addr = alloca i8*, align 8
  %c = alloca i32, align 4
  %val = alloca i32, align 4
  store i8** %s, i8*** %s.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32 0, i32* %c, align 4
  store i32 -1, i32* %val, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8**, i8*** %s.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %call = call i32 @pbm_next_char(i8** %0, i8* %1)
  store i32 %call, i32* %c, align 4
  %cmp = icmp ne i32 %call, -1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %c, align 4
  %call1 = call zeroext i1 @c_isspace(i32 %2)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %call1, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %4 = load i32, i32* %c, align 4
  %call2 = call zeroext i1 @c_isdigit(i32 %4)
  br i1 %call2, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 48
  store i32 %sub, i32* %val, align 4
  br label %while.cond.3

while.cond.3:                                     ; preds = %while.body.9, %if.then
  %6 = load i8**, i8*** %s.addr, align 8
  %7 = load i8*, i8** %end.addr, align 8
  %call4 = call i32 @pbm_next_char(i8** %6, i8* %7)
  store i32 %call4, i32* %c, align 4
  %cmp5 = icmp ne i32 %call4, -1
  br i1 %cmp5, label %land.rhs.6, label %land.end.8

land.rhs.6:                                       ; preds = %while.cond.3
  %8 = load i32, i32* %c, align 4
  %call7 = call zeroext i1 @c_isdigit(i32 %8)
  br label %land.end.8

land.end.8:                                       ; preds = %land.rhs.6, %while.cond.3
  %9 = phi i1 [ false, %while.cond.3 ], [ %call7, %land.rhs.6 ]
  br i1 %9, label %while.body.9, label %while.end.11

while.body.9:                                     ; preds = %land.end.8
  %10 = load i32, i32* %val, align 4
  %mul = mul nsw i32 10, %10
  %11 = load i32, i32* %c, align 4
  %add = add nsw i32 %mul, %11
  %sub10 = sub nsw i32 %add, 48
  store i32 %sub10, i32* %val, align 4
  br label %while.cond.3

while.end.11:                                     ; preds = %land.end.8
  br label %if.end

if.end:                                           ; preds = %while.end.11, %while.end
  %12 = load i32, i32* %val, align 4
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @check_image_size(%struct.frame* %f, i32 %width, i32 %height) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load i32, i32* %width.addr, align 4
  %cmp = icmp sle i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %height.addr, align 4
  %cmp1 = icmp sle i32 %1, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172), align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp3 = icmp eq i32 %and2, 2
  br i1 %cmp3, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  %3 = load i32, i32* %width.addr, align 4
  %conv6 = sext i32 %3 to i64
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172), align 8
  %shr = ashr i64 %4, 2
  %cmp7 = icmp sle i64 %conv6, %shr
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.5
  %5 = load i32, i32* %height.addr, align 4
  %conv9 = sext i32 %5 to i64
  %6 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172), align 8
  %shr10 = ashr i64 %6, 2
  %cmp11 = icmp sle i64 %conv9, %shr10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.5
  %7 = phi i1 [ false, %if.then.5 ], [ %cmp11, %land.rhs ]
  store i1 %7, i1* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %8 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172), align 8
  %and13 = and i64 %8, 7
  %conv14 = trunc i64 %and13 to i32
  %cmp15 = icmp eq i32 %conv14, 7
  br i1 %cmp15, label %if.then.17, label %if.else.35

if.then.17:                                       ; preds = %if.else
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp18 = icmp ne %struct.frame* %9, null
  br i1 %cmp18, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %if.then.17
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 46
  %11 = load i32, i32* %pixel_width, align 4
  store i32 %11, i32* %w, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 47
  %13 = load i32, i32* %pixel_height, align 4
  store i32 %13, i32* %h, align 4
  br label %if.end.22

if.else.21:                                       ; preds = %if.then.17
  store i32 1024, i32* %h, align 4
  store i32 1024, i32* %w, align 4
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.21, %if.then.20
  %14 = load i32, i32* %width.addr, align 4
  %conv23 = sitofp i32 %14 to double
  %15 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172), align 8
  %call = call double @XFLOAT_DATA(i64 %15)
  %16 = load i32, i32* %w, align 4
  %conv24 = sitofp i32 %16 to double
  %mul = fmul double %call, %conv24
  %cmp25 = fcmp ole double %conv23, %mul
  br i1 %cmp25, label %land.rhs.27, label %land.end.34

land.rhs.27:                                      ; preds = %if.end.22
  %17 = load i32, i32* %height.addr, align 4
  %conv28 = sitofp i32 %17 to double
  %18 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 172), align 8
  %call29 = call double @XFLOAT_DATA(i64 %18)
  %19 = load i32, i32* %h, align 4
  %conv30 = sitofp i32 %19 to double
  %mul31 = fmul double %call29, %conv30
  %cmp32 = fcmp ole double %conv28, %mul31
  br label %land.end.34

land.end.34:                                      ; preds = %land.rhs.27, %if.end.22
  %20 = phi i1 [ false, %if.end.22 ], [ %cmp32, %land.rhs.27 ]
  store i1 %20, i1* %retval
  br label %return

if.else.35:                                       ; preds = %if.else
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.else.35, %land.end.34, %land.end, %if.then
  %21 = load i1, i1* %retval
  ret i1 %21
}

; Function Attrs: nounwind uwtable
define internal void @image_size_error() #0 {
entry:
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.35, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind
declare %struct._IO_FILE* @fdopen(i32, i8*) #6

declare i64 @SPECPDL_INDEX() #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

declare void @fclose_unwind(i8*) #1

; Function Attrs: nounwind
declare i32 @fstat(i32, %struct.stat*) #6

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #6

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #1

declare i64 @unbind_to(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @pbm_next_char(i8** %s, i8* %end) #0 {
entry:
  %s.addr = alloca i8**, align 8
  %end.addr = alloca i8*, align 8
  %c = alloca i32, align 4
  store i8** %s, i8*** %s.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32 -1, i32* %c, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %0 = load i8**, i8*** %s.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i8**, i8*** %s.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  store i32 %conv, i32* %c, align 4
  %6 = load i32, i32* %c, align 4
  %cmp1 = icmp eq i32 %6, 35
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end.17

while.body:                                       ; preds = %land.end
  br label %while.cond.3

while.cond.3:                                     ; preds = %while.body.16, %while.body
  %8 = load i8**, i8*** %s.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %10 = load i8*, i8** %end.addr, align 8
  %cmp4 = icmp ult i8* %9, %10
  br i1 %cmp4, label %land.rhs.6, label %land.end.15

land.rhs.6:                                       ; preds = %while.cond.3
  %11 = load i8**, i8*** %s.addr, align 8
  %12 = load i8*, i8** %11, align 8
  %incdec.ptr7 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr7, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %conv8 = zext i8 %13 to i32
  store i32 %conv8, i32* %c, align 4
  %14 = load i32, i32* %c, align 4
  %cmp9 = icmp ne i32 %14, 10
  br i1 %cmp9, label %land.rhs.11, label %land.end.14

land.rhs.11:                                      ; preds = %land.rhs.6
  %15 = load i32, i32* %c, align 4
  %cmp12 = icmp ne i32 %15, 13
  br label %land.end.14

land.end.14:                                      ; preds = %land.rhs.11, %land.rhs.6
  %16 = phi i1 [ false, %land.rhs.6 ], [ %cmp12, %land.rhs.11 ]
  br label %land.end.15

land.end.15:                                      ; preds = %land.end.14, %while.cond.3
  %17 = phi i1 [ false, %while.cond.3 ], [ %16, %land.end.14 ]
  br i1 %17, label %while.body.16, label %while.end

while.body.16:                                    ; preds = %land.end.15
  br label %while.cond.3

while.end:                                        ; preds = %land.end.15
  store i32 -1, i32* %c, align 4
  br label %while.cond

while.end.17:                                     ; preds = %land.end
  %18 = load i32, i32* %c, align 4
  ret i32 %18
}

declare zeroext i1 @c_isspace(i32) #1

declare zeroext i1 @c_isdigit(i32) #1

declare double @XFLOAT_DATA(i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xbm_image_p(i64 %object) #0 {
entry:
  %retval = alloca i1, align 1
  %object.addr = alloca i64, align 8
  %kw = alloca [13 x %struct.image_keyword], align 16
  %data = alloca i64, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %i = alloca i64, align 8
  %elt = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = bitcast [13 x %struct.image_keyword]* %kw to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([13 x %struct.image_keyword]* @xbm_format to i8*), i64 416, i32 16, i1 false)
  %1 = load i64, i64* %object.addr, align 8
  %arraydecay = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i32 0
  %call = call i64 @builtin_lisp_symbol(i32 1062)
  %call1 = call zeroext i1 @parse_image_spec(i64 %1, %struct.image_keyword* %arraydecay, i32 13, i64 %call)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 1
  %count = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx, i32 0, i32 3
  %2 = load i32, i32* %count, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %arrayidx3 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 2
  %count4 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx3, i32 0, i32 3
  %3 = load i32, i32* %count4, align 4
  %tobool5 = icmp ne i32 %3, 0
  br i1 %tobool5, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.2
  %arrayidx6 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 3
  %count7 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx6, i32 0, i32 3
  %4 = load i32, i32* %count7, align 4
  %tobool8 = icmp ne i32 %4, 0
  br i1 %tobool8, label %if.then.13, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false
  %arrayidx10 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 4
  %count11 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx10, i32 0, i32 3
  %5 = load i32, i32* %count11, align 4
  %tobool12 = icmp ne i32 %5, 0
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %lor.lhs.false.9, %lor.lhs.false, %if.then.2
  store i1 false, i1* %retval
  br label %return

if.end.14:                                        ; preds = %lor.lhs.false.9
  br label %if.end.115

if.else:                                          ; preds = %if.end
  %arrayidx15 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 4
  %count16 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx15, i32 0, i32 3
  %6 = load i32, i32* %count16, align 4
  %tobool17 = icmp ne i32 %6, 0
  br i1 %tobool17, label %land.lhs.true, label %if.else.34

land.lhs.true:                                    ; preds = %if.else
  %arrayidx18 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 4
  %value = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx18, i32 0, i32 4
  %7 = load i64, i64* %value, align 8
  %call19 = call zeroext i1 @xbm_file_p(i64 %7)
  br i1 %call19, label %if.then.20, label %if.else.34

if.then.20:                                       ; preds = %land.lhs.true
  %arrayidx21 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 2
  %count22 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx21, i32 0, i32 3
  %8 = load i32, i32* %count22, align 4
  %tobool23 = icmp ne i32 %8, 0
  br i1 %tobool23, label %if.then.32, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %if.then.20
  %arrayidx25 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 3
  %count26 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx25, i32 0, i32 3
  %9 = load i32, i32* %count26, align 4
  %tobool27 = icmp ne i32 %9, 0
  br i1 %tobool27, label %if.then.32, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false.24
  %arrayidx29 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 1
  %count30 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx29, i32 0, i32 3
  %10 = load i32, i32* %count30, align 4
  %tobool31 = icmp ne i32 %10, 0
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %lor.lhs.false.28, %lor.lhs.false.24, %if.then.20
  store i1 false, i1* %retval
  br label %return

if.end.33:                                        ; preds = %lor.lhs.false.28
  br label %if.end.114

if.else.34:                                       ; preds = %land.lhs.true, %if.else
  %arrayidx35 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 2
  %count36 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx35, i32 0, i32 3
  %11 = load i32, i32* %count36, align 4
  %tobool37 = icmp ne i32 %11, 0
  br i1 %tobool37, label %lor.lhs.false.38, label %if.then.46

lor.lhs.false.38:                                 ; preds = %if.else.34
  %arrayidx39 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 3
  %count40 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx39, i32 0, i32 3
  %12 = load i32, i32* %count40, align 4
  %tobool41 = icmp ne i32 %12, 0
  br i1 %tobool41, label %lor.lhs.false.42, label %if.then.46

lor.lhs.false.42:                                 ; preds = %lor.lhs.false.38
  %arrayidx43 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 4
  %count44 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx43, i32 0, i32 3
  %13 = load i32, i32* %count44, align 4
  %tobool45 = icmp ne i32 %13, 0
  br i1 %tobool45, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %lor.lhs.false.42, %lor.lhs.false.38, %if.else.34
  store i1 false, i1* %retval
  br label %return

if.end.47:                                        ; preds = %lor.lhs.false.42
  %arrayidx48 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 4
  %value49 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx48, i32 0, i32 4
  %14 = load i64, i64* %value49, align 8
  store i64 %14, i64* %data, align 8
  %arrayidx50 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 2
  %value51 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx50, i32 0, i32 4
  %15 = load i64, i64* %value51, align 8
  %shr = ashr i64 %15, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %width, align 4
  %arrayidx52 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %kw, i32 0, i64 3
  %value53 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx52, i32 0, i32 4
  %16 = load i64, i64* %value53, align 8
  %shr54 = ashr i64 %16, 2
  %conv55 = trunc i64 %shr54 to i32
  store i32 %conv55, i32* %height, align 4
  %17 = load i64, i64* %data, align 8
  %call56 = call zeroext i1 @VECTORP(i64 %17)
  br i1 %call56, label %if.then.57, label %if.else.87

if.then.57:                                       ; preds = %if.end.47
  %18 = load i64, i64* %data, align 8
  %call58 = call i64 @ASIZE(i64 %18)
  %19 = load i32, i32* %height, align 4
  %conv59 = sext i32 %19 to i64
  %cmp = icmp slt i64 %call58, %conv59
  br i1 %cmp, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.then.57
  store i1 false, i1* %retval
  br label %return

if.end.62:                                        ; preds = %if.then.57
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.62
  %20 = load i64, i64* %i, align 8
  %21 = load i32, i32* %height, align 4
  %conv63 = sext i32 %21 to i64
  %cmp64 = icmp slt i64 %20, %conv63
  br i1 %cmp64, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i64, i64* %data, align 8
  %23 = load i64, i64* %i, align 8
  %call66 = call i64 @AREF(i64 %22, i64 %23)
  store i64 %call66, i64* %elt, align 8
  %24 = load i64, i64* %elt, align 8
  %call67 = call zeroext i1 @STRINGP(i64 %24)
  br i1 %call67, label %if.then.68, label %if.else.75

if.then.68:                                       ; preds = %for.body
  %25 = load i64, i64* %elt, align 8
  %call69 = call i64 @SCHARS(i64 %25)
  %26 = load i32, i32* %width, align 4
  %add = add nsw i32 %26, 8
  %sub = sub nsw i32 %add, 1
  %div = sdiv i32 %sub, 8
  %conv70 = sext i32 %div to i64
  %cmp71 = icmp slt i64 %call69, %conv70
  br i1 %cmp71, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %if.then.68
  store i1 false, i1* %retval
  br label %return

if.end.74:                                        ; preds = %if.then.68
  br label %if.end.86

if.else.75:                                       ; preds = %for.body
  %27 = load i64, i64* %elt, align 8
  %call76 = call zeroext i1 @BOOL_VECTOR_P(i64 %27)
  br i1 %call76, label %if.then.77, label %if.else.84

if.then.77:                                       ; preds = %if.else.75
  %28 = load i64, i64* %elt, align 8
  %call78 = call i64 @bool_vector_size(i64 %28)
  %29 = load i32, i32* %width, align 4
  %conv79 = sext i32 %29 to i64
  %cmp80 = icmp slt i64 %call78, %conv79
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %if.then.77
  store i1 false, i1* %retval
  br label %return

if.end.83:                                        ; preds = %if.then.77
  br label %if.end.85

if.else.84:                                       ; preds = %if.else.75
  store i1 false, i1* %retval
  br label %return

if.end.85:                                        ; preds = %if.end.83
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %if.end.74
  br label %for.inc

for.inc:                                          ; preds = %if.end.86
  %30 = load i64, i64* %i, align 8
  %inc = add nsw i64 %30, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.113

if.else.87:                                       ; preds = %if.end.47
  %31 = load i64, i64* %data, align 8
  %call88 = call zeroext i1 @STRINGP(i64 %31)
  br i1 %call88, label %if.then.89, label %if.else.99

if.then.89:                                       ; preds = %if.else.87
  %32 = load i64, i64* %data, align 8
  %call90 = call i64 @SCHARS(i64 %32)
  %33 = load i32, i32* %width, align 4
  %add91 = add nsw i32 %33, 8
  %sub92 = sub nsw i32 %add91, 1
  %div93 = sdiv i32 %sub92, 8
  %34 = load i32, i32* %height, align 4
  %mul = mul nsw i32 %div93, %34
  %conv94 = sext i32 %mul to i64
  %cmp95 = icmp slt i64 %call90, %conv94
  br i1 %cmp95, label %if.then.97, label %if.end.98

if.then.97:                                       ; preds = %if.then.89
  store i1 false, i1* %retval
  br label %return

if.end.98:                                        ; preds = %if.then.89
  br label %if.end.112

if.else.99:                                       ; preds = %if.else.87
  %35 = load i64, i64* %data, align 8
  %call100 = call zeroext i1 @BOOL_VECTOR_P(i64 %35)
  br i1 %call100, label %if.then.101, label %if.else.110

if.then.101:                                      ; preds = %if.else.99
  %36 = load i64, i64* %data, align 8
  %call102 = call i64 @bool_vector_size(i64 %36)
  %37 = load i32, i32* %height, align 4
  %conv103 = sext i32 %37 to i64
  %div104 = sdiv i64 %call102, %conv103
  %38 = load i32, i32* %width, align 4
  %conv105 = sext i32 %38 to i64
  %cmp106 = icmp slt i64 %div104, %conv105
  br i1 %cmp106, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %if.then.101
  store i1 false, i1* %retval
  br label %return

if.end.109:                                       ; preds = %if.then.101
  br label %if.end.111

if.else.110:                                      ; preds = %if.else.99
  store i1 false, i1* %retval
  br label %return

if.end.111:                                       ; preds = %if.end.109
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.end.98
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %for.end
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %if.end.33
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %if.end.14
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.115, %if.else.110, %if.then.108, %if.then.97, %if.else.84, %if.then.82, %if.then.73, %if.then.61, %if.then.46, %if.then.32, %if.then.13, %if.then
  %39 = load i1, i1* %retval
  ret i1 %39
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xbm_load(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %success_p = alloca i8, align 1
  %file_name = alloca i64, align 8
  %fd = alloca i32, align 4
  %file = alloca i64, align 8
  %size = alloca i64, align 8
  %contents = alloca i8*, align 8
  %fmt = alloca [13 x %struct.image_keyword], align 16
  %data = alloca i64, align 8
  %foreground = alloca i64, align 8
  %background = alloca i64, align 8
  %non_default_colors = alloca i8, align 1
  %bits = alloca i8*, align 8
  %parsed_p = alloca i8, align 1
  %in_memory_file_p = alloca i8, align 1
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %nbytes = alloca i32, align 4
  %line = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i8 0, i8* %success_p, align 1
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 15
  %1 = load i64, i64* %spec, align 8
  %call = call i64 @builtin_lisp_symbol(i32 41)
  %call1 = call i64 @image_spec_value(i64 %1, i64 %call, i8* null)
  store i64 %call1, i64* %file_name, align 8
  %2 = load i64, i64* %file_name, align 8
  %call2 = call zeroext i1 @STRINGP(i64 %2)
  br i1 %call2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %file_name, align 8
  %call3 = call i64 @x_find_image_fd(i64 %3, i32* %fd)
  store i64 %call3, i64* %file, align 8
  %4 = load i64, i64* %file, align 8
  %call4 = call zeroext i1 @STRINGP(i64 %4)
  br i1 %call4, label %if.end, label %if.then.5

if.then.5:                                        ; preds = %if.then
  %5 = load i64, i64* %file_name, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0), i64 %5)
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load i32, i32* %fd, align 4
  %call6 = call i8* @slurp_file(i32 %6, i64* %size)
  store i8* %call6, i8** %contents, align 8
  %7 = load i8*, i8** %contents, align 8
  %cmp = icmp eq i8* %7, null
  br i1 %cmp, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %8 = load i64, i64* %file, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.45, i32 0, i32 0), i64 %8)
  store i1 false, i1* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %11 = load i8*, i8** %contents, align 8
  %12 = load i8*, i8** %contents, align 8
  %13 = load i64, i64* %size, align 8
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %13
  %call9 = call zeroext i1 @xbm_load_image(%struct.frame* %9, %struct.image* %10, i8* %11, i8* %add.ptr)
  %frombool = zext i1 %call9 to i8
  store i8 %frombool, i8* %success_p, align 1
  %14 = load i8*, i8** %contents, align 8
  call void @xfree(i8* %14)
  br label %if.end.135

if.else:                                          ; preds = %entry
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 78
  %16 = load i64, i64* %foreground_pixel, align 8
  store i64 %16, i64* %foreground, align 8
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 77
  %18 = load i64, i64* %background_pixel, align 8
  store i64 %18, i64* %background, align 8
  store i8 0, i8* %non_default_colors, align 1
  store i8 0, i8* %in_memory_file_p, align 1
  %19 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec10 = getelementptr inbounds %struct.image, %struct.image* %19, i32 0, i32 15
  %20 = load i64, i64* %spec10, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 29)
  %call12 = call i64 @image_spec_value(i64 %20, i64 %call11, i8* null)
  store i64 %call12, i64* %data, align 8
  %21 = load i64, i64* %data, align 8
  %call13 = call zeroext i1 @xbm_file_p(i64 %21)
  %frombool14 = zext i1 %call13 to i8
  store i8 %frombool14, i8* %in_memory_file_p, align 1
  %22 = bitcast [13 x %struct.image_keyword]* %fmt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* bitcast ([13 x %struct.image_keyword]* @xbm_format to i8*), i64 416, i32 16, i1 false)
  %23 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec15 = getelementptr inbounds %struct.image, %struct.image* %23, i32 0, i32 15
  %24 = load i64, i64* %spec15, align 8
  %arraydecay = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i32 0
  %call16 = call i64 @builtin_lisp_symbol(i32 1062)
  %call17 = call zeroext i1 @parse_image_spec(i64 %24, %struct.image_keyword* %arraydecay, i32 13, i64 %call16)
  %frombool18 = zext i1 %call17 to i8
  store i8 %frombool18, i8* %parsed_p, align 1
  %25 = load i8, i8* %in_memory_file_p, align 1
  %tobool = trunc i8 %25 to i1
  br i1 %tobool, label %if.end.29, label %if.then.19

if.then.19:                                       ; preds = %if.else
  %arrayidx = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 2
  %value = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx, i32 0, i32 4
  %26 = load i64, i64* %value, align 8
  %shr = ashr i64 %26, 2
  %conv = trunc i64 %shr to i32
  %27 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %27, i32 0, i32 11
  store i32 %conv, i32* %width, align 4
  %arrayidx20 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 3
  %value21 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx20, i32 0, i32 4
  %28 = load i64, i64* %value21, align 8
  %shr22 = ashr i64 %28, 2
  %conv23 = trunc i64 %shr22 to i32
  %29 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %29, i32 0, i32 12
  store i32 %conv23, i32* %height, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %31 = load %struct.image*, %struct.image** %img.addr, align 8
  %width24 = getelementptr inbounds %struct.image, %struct.image* %31, i32 0, i32 11
  %32 = load i32, i32* %width24, align 4
  %33 = load %struct.image*, %struct.image** %img.addr, align 8
  %height25 = getelementptr inbounds %struct.image, %struct.image* %33, i32 0, i32 12
  %34 = load i32, i32* %height25, align 4
  %call26 = call zeroext i1 @check_image_size(%struct.frame* %30, i32 %32, i32 %34)
  br i1 %call26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.then.19
  call void @image_size_error()
  store i1 false, i1* %retval
  br label %return

if.end.28:                                        ; preds = %if.then.19
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.else
  %arrayidx30 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 5
  %count = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx30, i32 0, i32 3
  %35 = load i32, i32* %count, align 4
  %tobool31 = icmp ne i32 %35, 0
  br i1 %tobool31, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %if.end.29
  %arrayidx32 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 5
  %value33 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx32, i32 0, i32 4
  %36 = load i64, i64* %value33, align 8
  %call34 = call zeroext i1 @STRINGP(i64 %36)
  br i1 %call34, label %if.then.36, label %if.end.40

if.then.36:                                       ; preds = %land.lhs.true
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  %arrayidx37 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 5
  %value38 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx37, i32 0, i32 4
  %39 = load i64, i64* %value38, align 8
  %40 = load i64, i64* %foreground, align 8
  %call39 = call i64 @x_alloc_image_color(%struct.frame* %37, %struct.image* %38, i64 %39, i64 %40)
  store i64 %call39, i64* %foreground, align 8
  store i8 1, i8* %non_default_colors, align 1
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.36, %land.lhs.true, %if.end.29
  %arrayidx41 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 6
  %count42 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx41, i32 0, i32 3
  %41 = load i32, i32* %count42, align 4
  %tobool43 = icmp ne i32 %41, 0
  br i1 %tobool43, label %land.lhs.true.44, label %if.end.53

land.lhs.true.44:                                 ; preds = %if.end.40
  %arrayidx45 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 6
  %value46 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx45, i32 0, i32 4
  %42 = load i64, i64* %value46, align 8
  %call47 = call zeroext i1 @STRINGP(i64 %42)
  br i1 %call47, label %if.then.49, label %if.end.53

if.then.49:                                       ; preds = %land.lhs.true.44
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %44 = load %struct.image*, %struct.image** %img.addr, align 8
  %arrayidx50 = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 6
  %value51 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx50, i32 0, i32 4
  %45 = load i64, i64* %value51, align 8
  %46 = load i64, i64* %background, align 8
  %call52 = call i64 @x_alloc_image_color(%struct.frame* %43, %struct.image* %44, i64 %45, i64 %46)
  store i64 %call52, i64* %background, align 8
  store i8 1, i8* %non_default_colors, align 1
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.49, %land.lhs.true.44, %if.end.40
  %47 = load i8, i8* %in_memory_file_p, align 1
  %tobool54 = trunc i8 %47 to i1
  br i1 %tobool54, label %if.then.55, label %if.else.62

if.then.55:                                       ; preds = %if.end.53
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %49 = load %struct.image*, %struct.image** %img.addr, align 8
  %50 = load i64, i64* %data, align 8
  %call56 = call i8* @SDATA(i64 %50)
  %51 = load i64, i64* %data, align 8
  %call57 = call i8* @SDATA(i64 %51)
  %52 = load i64, i64* %data, align 8
  %call58 = call i64 @SBYTES(i64 %52)
  %add.ptr59 = getelementptr inbounds i8, i8* %call57, i64 %call58
  %call60 = call zeroext i1 @xbm_load_image(%struct.frame* %48, %struct.image* %49, i8* %call56, i8* %add.ptr59)
  %frombool61 = zext i1 %call60 to i8
  store i8 %frombool61, i8* %success_p, align 1
  br label %if.end.134

if.else.62:                                       ; preds = %if.end.53
  store i64 16384, i64* %sa_avail, align 8
  %call63 = call i64 @SPECPDL_INDEX()
  store i64 %call63, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %53 = load i64, i64* %data, align 8
  %call64 = call zeroext i1 @VECTORP(i64 %53)
  br i1 %call64, label %if.then.65, label %if.else.106

if.then.65:                                       ; preds = %if.else.62
  %54 = load %struct.image*, %struct.image** %img.addr, align 8
  %width66 = getelementptr inbounds %struct.image, %struct.image* %54, i32 0, i32 11
  %55 = load i32, i32* %width66, align 4
  %add = add nsw i32 %55, 8
  %sub = sub nsw i32 %add, 1
  %div = sdiv i32 %sub, 8
  store i32 %div, i32* %nbytes, align 4
  br label %do.body

do.body:                                          ; preds = %if.then.65
  %56 = load %struct.image*, %struct.image** %img.addr, align 8
  %height67 = getelementptr inbounds %struct.image, %struct.image* %56, i32 0, i32 12
  %57 = load i32, i32* %height67, align 4
  %conv68 = sext i32 %57 to i64
  %58 = load i64, i64* %sa_avail, align 8
  %div69 = udiv i64 %58, 1
  %59 = load i32, i32* %nbytes, align 4
  %conv70 = sext i32 %59 to i64
  %div71 = udiv i64 %div69, %conv70
  %cmp72 = icmp ule i64 %conv68, %div71
  br i1 %cmp72, label %if.then.74, label %if.else.85

if.then.74:                                       ; preds = %do.body
  %60 = load i32, i32* %nbytes, align 4
  %conv75 = sext i32 %60 to i64
  %mul = mul i64 1, %conv75
  %61 = load %struct.image*, %struct.image** %img.addr, align 8
  %height76 = getelementptr inbounds %struct.image, %struct.image* %61, i32 0, i32 12
  %62 = load i32, i32* %height76, align 4
  %conv77 = sext i32 %62 to i64
  %mul78 = mul i64 %mul, %conv77
  %63 = load i64, i64* %sa_avail, align 8
  %sub79 = sub i64 %63, %mul78
  store i64 %sub79, i64* %sa_avail, align 8
  %64 = load i32, i32* %nbytes, align 4
  %conv80 = sext i32 %64 to i64
  %mul81 = mul i64 1, %conv80
  %65 = load %struct.image*, %struct.image** %img.addr, align 8
  %height82 = getelementptr inbounds %struct.image, %struct.image* %65, i32 0, i32 12
  %66 = load i32, i32* %height82, align 4
  %conv83 = sext i32 %66 to i64
  %mul84 = mul i64 %mul81, %conv83
  %67 = alloca i8, i64 %mul84
  store i8* %67, i8** %bits, align 8
  br label %if.end.91

if.else.85:                                       ; preds = %do.body
  %68 = load %struct.image*, %struct.image** %img.addr, align 8
  %height86 = getelementptr inbounds %struct.image, %struct.image* %68, i32 0, i32 12
  %69 = load i32, i32* %height86, align 4
  %conv87 = sext i32 %69 to i64
  %70 = load i32, i32* %nbytes, align 4
  %conv88 = sext i32 %70 to i64
  %mul89 = mul i64 1, %conv88
  %call90 = call noalias i8* @xnmalloc(i64 %conv87, i64 %mul89)
  store i8* %call90, i8** %bits, align 8
  store i8 1, i8* %sa_must_free, align 1
  %71 = load i8*, i8** %bits, align 8
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %71)
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.85, %if.then.74
  br label %do.end

do.end:                                           ; preds = %if.end.91
  %72 = load i8*, i8** %bits, align 8
  store i8* %72, i8** %p, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %73 = load i32, i32* %i, align 4
  %74 = load %struct.image*, %struct.image** %img.addr, align 8
  %height92 = getelementptr inbounds %struct.image, %struct.image* %74, i32 0, i32 12
  %75 = load i32, i32* %height92, align 4
  %cmp93 = icmp slt i32 %73, %75
  br i1 %cmp93, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %76 = load i64, i64* %data, align 8
  %77 = load i32, i32* %i, align 4
  %conv95 = sext i32 %77 to i64
  %call96 = call i64 @AREF(i64 %76, i64 %conv95)
  store i64 %call96, i64* %line, align 8
  %78 = load i64, i64* %line, align 8
  %call97 = call zeroext i1 @STRINGP(i64 %78)
  br i1 %call97, label %if.then.98, label %if.else.101

if.then.98:                                       ; preds = %for.body
  %79 = load i8*, i8** %p, align 8
  %80 = load i64, i64* %line, align 8
  %call99 = call i8* @SDATA(i64 %80)
  %81 = load i32, i32* %nbytes, align 4
  %conv100 = sext i32 %81 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %call99, i64 %conv100, i32 1, i1 false)
  br label %if.end.104

if.else.101:                                      ; preds = %for.body
  %82 = load i8*, i8** %p, align 8
  %83 = load i64, i64* %line, align 8
  %call102 = call i64* @bool_vector_data(i64 %83)
  %84 = bitcast i64* %call102 to i8*
  %85 = load i32, i32* %nbytes, align 4
  %conv103 = sext i32 %85 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* %84, i64 %conv103, i32 1, i1 false)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.101, %if.then.98
  br label %for.inc

for.inc:                                          ; preds = %if.end.104
  %86 = load i32, i32* %i, align 4
  %inc = add nsw i32 %86, 1
  store i32 %inc, i32* %i, align 4
  %87 = load i32, i32* %nbytes, align 4
  %88 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %87 to i64
  %add.ptr105 = getelementptr inbounds i8, i8* %88, i64 %idx.ext
  store i8* %add.ptr105, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.113

if.else.106:                                      ; preds = %if.else.62
  %89 = load i64, i64* %data, align 8
  %call107 = call zeroext i1 @STRINGP(i64 %89)
  br i1 %call107, label %if.then.108, label %if.else.110

if.then.108:                                      ; preds = %if.else.106
  %90 = load i64, i64* %data, align 8
  %call109 = call i8* @SSDATA(i64 %90)
  store i8* %call109, i8** %bits, align 8
  br label %if.end.112

if.else.110:                                      ; preds = %if.else.106
  %91 = load i64, i64* %data, align 8
  %call111 = call i64* @bool_vector_data(i64 %91)
  %92 = bitcast i64* %call111 to i8*
  store i8* %92, i8** %bits, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.110, %if.then.108
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %for.end
  %93 = load %struct.image*, %struct.image** %img.addr, align 8
  %width114 = getelementptr inbounds %struct.image, %struct.image* %93, i32 0, i32 11
  %94 = load i32, i32* %width114, align 4
  %95 = load %struct.image*, %struct.image** %img.addr, align 8
  %height115 = getelementptr inbounds %struct.image, %struct.image* %95, i32 0, i32 12
  %96 = load i32, i32* %height115, align 4
  %call116 = call zeroext i1 @x_check_image_size(%struct._XImage* null, i32 %94, i32 %96)
  br i1 %call116, label %if.then.117, label %if.else.119

if.then.117:                                      ; preds = %if.end.113
  %97 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %98 = load %struct.image*, %struct.image** %img.addr, align 8
  %99 = load i8*, i8** %bits, align 8
  %100 = load i64, i64* %foreground, align 8
  %101 = load i64, i64* %background, align 8
  %102 = load i8, i8* %non_default_colors, align 1
  %tobool118 = trunc i8 %102 to i1
  call void @Create_Pixmap_From_Bitmap_Data(%struct.frame* %97, %struct.image* %98, i8* %99, i64 %100, i64 %101, i1 zeroext %tobool118)
  br label %if.end.120

if.else.119:                                      ; preds = %if.end.113
  %103 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %103, i32 0, i32 1
  store i64 0, i64* %pixmap, align 8
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.119, %if.then.117
  %104 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap121 = getelementptr inbounds %struct.image, %struct.image* %104, i32 0, i32 1
  %105 = load i64, i64* %pixmap121, align 8
  %tobool122 = icmp ne i64 %105, 0
  br i1 %tobool122, label %if.then.123, label %if.else.124

if.then.123:                                      ; preds = %if.end.120
  store i8 1, i8* %success_p, align 1
  br label %if.end.126

if.else.124:                                      ; preds = %if.end.120
  %106 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec125 = getelementptr inbounds %struct.image, %struct.image* %106, i32 0, i32 15
  %107 = load i64, i64* %spec125, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i32 0, i32 0), i64 %107)
  %108 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %109 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image(%struct.frame* %108, %struct.image* %109)
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.124, %if.then.123
  br label %do.body.127

do.body.127:                                      ; preds = %if.end.126
  %110 = load i8, i8* %sa_must_free, align 1
  %tobool128 = trunc i8 %110 to i1
  br i1 %tobool128, label %if.then.129, label %if.end.132

if.then.129:                                      ; preds = %do.body.127
  store i8 0, i8* %sa_must_free, align 1
  %111 = load i64, i64* %sa_count, align 8
  %call130 = call i64 @builtin_lisp_symbol(i32 0)
  %call131 = call i64 @unbind_to(i64 %111, i64 %call130)
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.129, %do.body.127
  br label %do.end.133

do.end.133:                                       ; preds = %if.end.132
  br label %if.end.134

if.end.134:                                       ; preds = %do.end.133, %if.then.55
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.end.8
  %112 = load i8, i8* %success_p, align 1
  %tobool136 = trunc i8 %112 to i1
  store i1 %tobool136, i1* %retval
  br label %return

return:                                           ; preds = %if.end.135, %if.then.27, %if.then.7, %if.then.5
  %113 = load i1, i1* %retval
  ret i1 %113
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xbm_file_p(i64 %data) #0 {
entry:
  %data.addr = alloca i64, align 8
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  store i64 %data, i64* %data.addr, align 8
  %0 = load i64, i64* %data.addr, align 8
  %call = call zeroext i1 @STRINGP(i64 %0)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i64, i64* %data.addr, align 8
  %call1 = call i8* @SDATA(i64 %1)
  %2 = load i64, i64* %data.addr, align 8
  %call2 = call i8* @SDATA(i64 %2)
  %3 = load i64, i64* %data.addr, align 8
  %call3 = call i64 @SBYTES(i64 %3)
  %add.ptr = getelementptr inbounds i8, i8* %call2, i64 %call3
  %call4 = call zeroext i1 @xbm_read_bitmap_data(%struct.frame* null, i8* %call1, i8* %add.ptr, i32* %w, i32* %h, i8** null, i1 zeroext true)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %4
}

declare i64 @SCHARS(i64) #1

declare zeroext i1 @BOOL_VECTOR_P(i64) #1

declare i64 @bool_vector_size(i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xbm_read_bitmap_data(%struct.frame* %f, i8* %contents, i8* %end, i32* %width, i32* %height, i8** %data, i1 zeroext %inhibit_image_error) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %contents.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %data.addr = alloca i8**, align 8
  %inhibit_image_error.addr = alloca i8, align 1
  %s = alloca i8*, align 8
  %buffer = alloca [8192 x i8], align 16
  %padding_p = alloca i8, align 1
  %v10 = alloca i8, align 1
  %bytes_per_line = alloca i32, align 4
  %i = alloca i32, align 4
  %nbytes = alloca i32, align 4
  %p = alloca i8*, align 8
  %value = alloca i32, align 4
  %LA1 = alloca i32, align 4
  %q = alloca i8*, align 8
  %val = alloca i32, align 4
  %val190 = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %contents, i8** %contents.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  store i8** %data, i8*** %data.addr, align 8
  %frombool = zext i1 %inhibit_image_error to i8
  store i8 %frombool, i8* %inhibit_image_error.addr, align 1
  %0 = load i8*, i8** %contents.addr, align 8
  store i8* %0, i8** %s, align 8
  store i8 0, i8* %padding_p, align 1
  store i8 0, i8* %v10, align 1
  %1 = load i32*, i32** %height.addr, align 8
  store i32 -1, i32* %1, align 4
  %2 = load i32*, i32** %width.addr, align 8
  store i32 -1, i32* %2, align 4
  %3 = load i8**, i8*** %data.addr, align 8
  %tobool = icmp ne i8** %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8**, i8*** %data.addr, align 8
  store i8* null, i8** %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %end.addr, align 8
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call = call i32 @xbm_scan(i8** %s, i8* %5, i8* %arraydecay, i32* %value)
  store i32 %call, i32* %LA1, align 4
  br label %while.cond

while.cond:                                       ; preds = %do.end.38, %if.end
  %6 = load i32, i32* %LA1, align 4
  %cmp = icmp eq i32 %6, 35
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8*, i8** %end.addr, align 8
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call2 = call i32 @xbm_scan(i8** %s, i8* %7, i8* %arraydecay1, i32* %value)
  store i32 %call2, i32* %LA1, align 4
  %8 = load i32, i32* %LA1, align 4
  %cmp3 = icmp eq i32 %8, 256
  br i1 %cmp3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %arraydecay4 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call5 = call i32 @strcmp(i8* %arraydecay4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i32 0, i32 0)) #10
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true
  %9 = load i8*, i8** %end.addr, align 8
  %arraydecay8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call9 = call i32 @xbm_scan(i8** %s, i8* %9, i8* %arraydecay8, i32* %value)
  store i32 %call9, i32* %LA1, align 4
  br label %if.end.10

if.else:                                          ; preds = %land.lhs.true, %while.body
  br label %failure

if.end.10:                                        ; preds = %if.then.7
  br label %do.body

do.body:                                          ; preds = %if.end.10
  %10 = load i32, i32* %LA1, align 4
  %cmp11 = icmp ne i32 %10, 256
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %do.body
  br label %failure

if.end.13:                                        ; preds = %do.body
  %11 = load i8*, i8** %end.addr, align 8
  %arraydecay14 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call15 = call i32 @xbm_scan(i8** %s, i8* %11, i8* %arraydecay14, i32* %value)
  store i32 %call15, i32* %LA1, align 4
  br label %do.end

do.end:                                           ; preds = %if.end.13
  %12 = load i32, i32* %LA1, align 4
  %cmp16 = icmp eq i32 %12, 257
  br i1 %cmp16, label %if.then.17, label %if.end.31

if.then.17:                                       ; preds = %do.end
  %arraydecay18 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call19 = call i8* @strrchr(i8* %arraydecay18, i32 95) #10
  store i8* %call19, i8** %q, align 8
  %13 = load i8*, i8** %q, align 8
  %tobool20 = icmp ne i8* %13, null
  br i1 %tobool20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.17
  %14 = load i8*, i8** %q, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 1
  br label %cond.end

cond.false:                                       ; preds = %if.then.17
  %arraydecay21 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %arraydecay21, %cond.false ]
  store i8* %cond, i8** %q, align 8
  %15 = load i8*, i8** %q, align 8
  %call22 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0)) #10
  %cmp23 = icmp eq i32 %call22, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %cond.end
  %16 = load i32, i32* %value, align 4
  %17 = load i32*, i32** %width.addr, align 8
  store i32 %16, i32* %17, align 4
  br label %if.end.30

if.else.25:                                       ; preds = %cond.end
  %18 = load i8*, i8** %q, align 8
  %call26 = call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0)) #10
  %cmp27 = icmp eq i32 %call26, 0
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.else.25
  %19 = load i32, i32* %value, align 4
  %20 = load i32*, i32** %height.addr, align 8
  store i32 %19, i32* %20, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %if.else.25
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.24
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %do.end
  br label %do.body.32

do.body.32:                                       ; preds = %if.end.31
  %21 = load i32, i32* %LA1, align 4
  %cmp33 = icmp ne i32 %21, 257
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %do.body.32
  br label %failure

if.end.35:                                        ; preds = %do.body.32
  %22 = load i8*, i8** %end.addr, align 8
  %arraydecay36 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call37 = call i32 @xbm_scan(i8** %s, i8* %22, i8* %arraydecay36, i32* %value)
  store i32 %call37, i32* %LA1, align 4
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.35
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %24 = load i32*, i32** %width.addr, align 8
  %25 = load i32, i32* %24, align 4
  %26 = load i32*, i32** %height.addr, align 8
  %27 = load i32, i32* %26, align 4
  %call39 = call zeroext i1 @check_image_size(%struct.frame* %23, i32 %25, i32 %27)
  br i1 %call39, label %if.else.44, label %if.then.40

if.then.40:                                       ; preds = %while.end
  %28 = load i8, i8* %inhibit_image_error.addr, align 1
  %tobool41 = trunc i8 %28 to i1
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %if.then.40
  call void @image_size_error()
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %if.then.40
  br label %failure

if.else.44:                                       ; preds = %while.end
  %29 = load i8**, i8*** %data.addr, align 8
  %cmp45 = icmp eq i8** %29, null
  br i1 %cmp45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.else.44
  br label %success

if.end.47:                                        ; preds = %if.else.44
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47
  %30 = load i32, i32* %LA1, align 4
  %cmp49 = icmp eq i32 %30, 256
  br i1 %cmp49, label %land.lhs.true.50, label %if.else.57

land.lhs.true.50:                                 ; preds = %if.end.48
  %arraydecay51 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call52 = call i32 @strcmp(i8* %arraydecay51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0)) #10
  %cmp53 = icmp eq i32 %call52, 0
  br i1 %cmp53, label %if.then.54, label %if.else.57

if.then.54:                                       ; preds = %land.lhs.true.50
  %31 = load i8*, i8** %end.addr, align 8
  %arraydecay55 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call56 = call i32 @xbm_scan(i8** %s, i8* %31, i8* %arraydecay55, i32* %value)
  store i32 %call56, i32* %LA1, align 4
  br label %if.end.58

if.else.57:                                       ; preds = %land.lhs.true.50, %if.end.48
  br label %failure

if.end.58:                                        ; preds = %if.then.54
  %32 = load i32, i32* %LA1, align 4
  %cmp59 = icmp eq i32 %32, 256
  br i1 %cmp59, label %if.then.60, label %if.else.101

if.then.60:                                       ; preds = %if.end.58
  %arraydecay61 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call62 = call i32 @strcmp(i8* %arraydecay61, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.42, i32 0, i32 0)) #10
  %cmp63 = icmp eq i32 %call62, 0
  br i1 %cmp63, label %if.then.64, label %if.else.77

if.then.64:                                       ; preds = %if.then.60
  %33 = load i8*, i8** %end.addr, align 8
  %arraydecay65 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call66 = call i32 @xbm_scan(i8** %s, i8* %33, i8* %arraydecay65, i32* %value)
  store i32 %call66, i32* %LA1, align 4
  %34 = load i32, i32* %LA1, align 4
  %cmp67 = icmp eq i32 %34, 256
  br i1 %cmp67, label %land.lhs.true.68, label %if.else.75

land.lhs.true.68:                                 ; preds = %if.then.64
  %arraydecay69 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call70 = call i32 @strcmp(i8* %arraydecay69, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0)) #10
  %cmp71 = icmp eq i32 %call70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.75

if.then.72:                                       ; preds = %land.lhs.true.68
  %35 = load i8*, i8** %end.addr, align 8
  %arraydecay73 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call74 = call i32 @xbm_scan(i8** %s, i8* %35, i8* %arraydecay73, i32* %value)
  store i32 %call74, i32* %LA1, align 4
  br label %if.end.76

if.else.75:                                       ; preds = %land.lhs.true.68, %if.then.64
  br label %failure

if.end.76:                                        ; preds = %if.then.72
  br label %if.end.100

if.else.77:                                       ; preds = %if.then.60
  %arraydecay78 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call79 = call i32 @strcmp(i8* %arraydecay78, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i32 0, i32 0)) #10
  %cmp80 = icmp eq i32 %call79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.90

if.then.81:                                       ; preds = %if.else.77
  %36 = load i8*, i8** %end.addr, align 8
  %arraydecay82 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call83 = call i32 @xbm_scan(i8** %s, i8* %36, i8* %arraydecay82, i32* %value)
  store i32 %call83, i32* %LA1, align 4
  store i8 1, i8* %v10, align 1
  %37 = load i32*, i32** %width.addr, align 8
  %38 = load i32, i32* %37, align 4
  %rem = srem i32 %38, 16
  %tobool84 = icmp ne i32 %rem, 0
  br i1 %tobool84, label %land.lhs.true.85, label %if.end.89

land.lhs.true.85:                                 ; preds = %if.then.81
  %39 = load i32*, i32** %width.addr, align 8
  %40 = load i32, i32* %39, align 4
  %rem86 = srem i32 %40, 16
  %cmp87 = icmp slt i32 %rem86, 9
  br i1 %cmp87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %land.lhs.true.85
  store i8 1, i8* %padding_p, align 1
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.88, %land.lhs.true.85, %if.then.81
  br label %if.end.99

if.else.90:                                       ; preds = %if.else.77
  %arraydecay91 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call92 = call i32 @strcmp(i8* %arraydecay91, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0)) #10
  %cmp93 = icmp eq i32 %call92, 0
  br i1 %cmp93, label %if.then.94, label %if.else.97

if.then.94:                                       ; preds = %if.else.90
  %41 = load i8*, i8** %end.addr, align 8
  %arraydecay95 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call96 = call i32 @xbm_scan(i8** %s, i8* %41, i8* %arraydecay95, i32* %value)
  store i32 %call96, i32* %LA1, align 4
  br label %if.end.98

if.else.97:                                       ; preds = %if.else.90
  br label %failure

if.end.98:                                        ; preds = %if.then.94
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %if.end.89
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.end.76
  br label %if.end.102

if.else.101:                                      ; preds = %if.end.58
  br label %failure

if.end.102:                                       ; preds = %if.end.100
  br label %do.body.103

do.body.103:                                      ; preds = %if.end.102
  %42 = load i32, i32* %LA1, align 4
  %cmp104 = icmp ne i32 %42, 256
  br i1 %cmp104, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %do.body.103
  br label %failure

if.end.106:                                       ; preds = %do.body.103
  %43 = load i8*, i8** %end.addr, align 8
  %arraydecay107 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call108 = call i32 @xbm_scan(i8** %s, i8* %43, i8* %arraydecay107, i32* %value)
  store i32 %call108, i32* %LA1, align 4
  br label %do.end.109

do.end.109:                                       ; preds = %if.end.106
  br label %do.body.110

do.body.110:                                      ; preds = %do.end.109
  %44 = load i32, i32* %LA1, align 4
  %cmp111 = icmp ne i32 %44, 91
  br i1 %cmp111, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %do.body.110
  br label %failure

if.end.113:                                       ; preds = %do.body.110
  %45 = load i8*, i8** %end.addr, align 8
  %arraydecay114 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call115 = call i32 @xbm_scan(i8** %s, i8* %45, i8* %arraydecay114, i32* %value)
  store i32 %call115, i32* %LA1, align 4
  br label %do.end.116

do.end.116:                                       ; preds = %if.end.113
  br label %do.body.117

do.body.117:                                      ; preds = %do.end.116
  %46 = load i32, i32* %LA1, align 4
  %cmp118 = icmp ne i32 %46, 93
  br i1 %cmp118, label %if.then.119, label %if.end.120

if.then.119:                                      ; preds = %do.body.117
  br label %failure

if.end.120:                                       ; preds = %do.body.117
  %47 = load i8*, i8** %end.addr, align 8
  %arraydecay121 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call122 = call i32 @xbm_scan(i8** %s, i8* %47, i8* %arraydecay121, i32* %value)
  store i32 %call122, i32* %LA1, align 4
  br label %do.end.123

do.end.123:                                       ; preds = %if.end.120
  br label %do.body.124

do.body.124:                                      ; preds = %do.end.123
  %48 = load i32, i32* %LA1, align 4
  %cmp125 = icmp ne i32 %48, 61
  br i1 %cmp125, label %if.then.126, label %if.end.127

if.then.126:                                      ; preds = %do.body.124
  br label %failure

if.end.127:                                       ; preds = %do.body.124
  %49 = load i8*, i8** %end.addr, align 8
  %arraydecay128 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call129 = call i32 @xbm_scan(i8** %s, i8* %49, i8* %arraydecay128, i32* %value)
  store i32 %call129, i32* %LA1, align 4
  br label %do.end.130

do.end.130:                                       ; preds = %if.end.127
  br label %do.body.131

do.body.131:                                      ; preds = %do.end.130
  %50 = load i32, i32* %LA1, align 4
  %cmp132 = icmp ne i32 %50, 123
  br i1 %cmp132, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %do.body.131
  br label %failure

if.end.134:                                       ; preds = %do.body.131
  %51 = load i8*, i8** %end.addr, align 8
  %arraydecay135 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call136 = call i32 @xbm_scan(i8** %s, i8* %51, i8* %arraydecay135, i32* %value)
  store i32 %call136, i32* %LA1, align 4
  br label %do.end.137

do.end.137:                                       ; preds = %if.end.134
  %52 = load i32*, i32** %width.addr, align 8
  %53 = load i32, i32* %52, align 4
  %54 = load i32*, i32** %height.addr, align 8
  %55 = load i32, i32* %54, align 4
  %call138 = call zeroext i1 @x_check_image_size(%struct._XImage* null, i32 %53, i32 %55)
  br i1 %call138, label %if.end.146, label %if.then.139

if.then.139:                                      ; preds = %do.end.137
  %56 = load i8, i8* %inhibit_image_error.addr, align 1
  %tobool140 = trunc i8 %56 to i1
  br i1 %tobool140, label %if.end.145, label %if.then.141

if.then.141:                                      ; preds = %if.then.139
  %57 = load i32*, i32** %width.addr, align 8
  %58 = load i32, i32* %57, align 4
  %conv = sext i32 %58 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %59 = load i32*, i32** %height.addr, align 8
  %60 = load i32, i32* %59, align 4
  %conv142 = sext i32 %60 to i64
  %shl143 = shl i64 %conv142, 2
  %add144 = add i64 %shl143, 2
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i32 0, i32 0), i64 %add, i64 %add144)
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.141, %if.then.139
  br label %failure

if.end.146:                                       ; preds = %do.end.137
  %61 = load i32*, i32** %width.addr, align 8
  %62 = load i32, i32* %61, align 4
  %add147 = add nsw i32 %62, 7
  %div = sdiv i32 %add147, 8
  %63 = load i8, i8* %padding_p, align 1
  %tobool148 = trunc i8 %63 to i1
  %conv149 = zext i1 %tobool148 to i32
  %add150 = add nsw i32 %div, %conv149
  store i32 %add150, i32* %bytes_per_line, align 4
  %64 = load i32, i32* %bytes_per_line, align 4
  %65 = load i32*, i32** %height.addr, align 8
  %66 = load i32, i32* %65, align 4
  %mul = mul nsw i32 %64, %66
  store i32 %mul, i32* %nbytes, align 4
  %67 = load i32, i32* %nbytes, align 4
  %conv151 = sext i32 %67 to i64
  %call152 = call noalias i8* @xmalloc(i64 %conv151)
  %68 = load i8**, i8*** %data.addr, align 8
  store i8* %call152, i8** %68, align 8
  store i8* %call152, i8** %p, align 8
  %69 = load i8, i8* %v10, align 1
  %tobool153 = trunc i8 %69 to i1
  br i1 %tobool153, label %if.then.154, label %if.else.185

if.then.154:                                      ; preds = %if.end.146
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.154
  %70 = load i32, i32* %i, align 4
  %71 = load i32, i32* %nbytes, align 4
  %cmp155 = icmp slt i32 %70, %71
  br i1 %cmp155, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %72 = load i32, i32* %value, align 4
  store i32 %72, i32* %val, align 4
  br label %do.body.157

do.body.157:                                      ; preds = %for.body
  %73 = load i32, i32* %LA1, align 4
  %cmp158 = icmp ne i32 %73, 257
  br i1 %cmp158, label %if.then.160, label %if.end.161

if.then.160:                                      ; preds = %do.body.157
  br label %failure

if.end.161:                                       ; preds = %do.body.157
  %74 = load i8*, i8** %end.addr, align 8
  %arraydecay162 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call163 = call i32 @xbm_scan(i8** %s, i8* %74, i8* %arraydecay162, i32* %value)
  store i32 %call163, i32* %LA1, align 4
  br label %do.end.164

do.end.164:                                       ; preds = %if.end.161
  %75 = load i32, i32* %val, align 4
  %conv165 = trunc i32 %75 to i8
  %76 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 %conv165, i8* %76, align 1
  %77 = load i8, i8* %padding_p, align 1
  %tobool166 = trunc i8 %77 to i1
  br i1 %tobool166, label %lor.lhs.false, label %if.then.170

lor.lhs.false:                                    ; preds = %do.end.164
  %78 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %78, 2
  %79 = load i32, i32* %bytes_per_line, align 4
  %rem168 = srem i32 %add167, %79
  %tobool169 = icmp ne i32 %rem168, 0
  br i1 %tobool169, label %if.then.170, label %if.end.173

if.then.170:                                      ; preds = %lor.lhs.false, %do.end.164
  %80 = load i32, i32* %value, align 4
  %shr = ashr i32 %80, 8
  %conv171 = trunc i32 %shr to i8
  %81 = load i8*, i8** %p, align 8
  %incdec.ptr172 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr172, i8** %p, align 8
  store i8 %conv171, i8* %81, align 1
  br label %if.end.173

if.end.173:                                       ; preds = %if.then.170, %lor.lhs.false
  %82 = load i32, i32* %LA1, align 4
  %cmp174 = icmp eq i32 %82, 44
  br i1 %cmp174, label %if.then.179, label %lor.lhs.false.176

lor.lhs.false.176:                                ; preds = %if.end.173
  %83 = load i32, i32* %LA1, align 4
  %cmp177 = icmp eq i32 %83, 125
  br i1 %cmp177, label %if.then.179, label %if.else.182

if.then.179:                                      ; preds = %lor.lhs.false.176, %if.end.173
  %84 = load i8*, i8** %end.addr, align 8
  %arraydecay180 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call181 = call i32 @xbm_scan(i8** %s, i8* %84, i8* %arraydecay180, i32* %value)
  store i32 %call181, i32* %LA1, align 4
  br label %if.end.183

if.else.182:                                      ; preds = %lor.lhs.false.176
  br label %failure

if.end.183:                                       ; preds = %if.then.179
  br label %for.inc

for.inc:                                          ; preds = %if.end.183
  %85 = load i32, i32* %i, align 4
  %add184 = add nsw i32 %85, 2
  store i32 %add184, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.213

if.else.185:                                      ; preds = %if.end.146
  store i32 0, i32* %i, align 4
  br label %for.cond.186

for.cond.186:                                     ; preds = %for.inc.211, %if.else.185
  %86 = load i32, i32* %i, align 4
  %87 = load i32, i32* %nbytes, align 4
  %cmp187 = icmp slt i32 %86, %87
  br i1 %cmp187, label %for.body.189, label %for.end.212

for.body.189:                                     ; preds = %for.cond.186
  %88 = load i32, i32* %value, align 4
  store i32 %88, i32* %val190, align 4
  br label %do.body.191

do.body.191:                                      ; preds = %for.body.189
  %89 = load i32, i32* %LA1, align 4
  %cmp192 = icmp ne i32 %89, 257
  br i1 %cmp192, label %if.then.194, label %if.end.195

if.then.194:                                      ; preds = %do.body.191
  br label %failure

if.end.195:                                       ; preds = %do.body.191
  %90 = load i8*, i8** %end.addr, align 8
  %arraydecay196 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call197 = call i32 @xbm_scan(i8** %s, i8* %90, i8* %arraydecay196, i32* %value)
  store i32 %call197, i32* %LA1, align 4
  br label %do.end.198

do.end.198:                                       ; preds = %if.end.195
  %91 = load i32, i32* %val190, align 4
  %conv199 = trunc i32 %91 to i8
  %92 = load i8*, i8** %p, align 8
  %incdec.ptr200 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr200, i8** %p, align 8
  store i8 %conv199, i8* %92, align 1
  %93 = load i32, i32* %LA1, align 4
  %cmp201 = icmp eq i32 %93, 44
  br i1 %cmp201, label %if.then.206, label %lor.lhs.false.203

lor.lhs.false.203:                                ; preds = %do.end.198
  %94 = load i32, i32* %LA1, align 4
  %cmp204 = icmp eq i32 %94, 125
  br i1 %cmp204, label %if.then.206, label %if.else.209

if.then.206:                                      ; preds = %lor.lhs.false.203, %do.end.198
  %95 = load i8*, i8** %end.addr, align 8
  %arraydecay207 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buffer, i32 0, i32 0
  %call208 = call i32 @xbm_scan(i8** %s, i8* %95, i8* %arraydecay207, i32* %value)
  store i32 %call208, i32* %LA1, align 4
  br label %if.end.210

if.else.209:                                      ; preds = %lor.lhs.false.203
  br label %failure

if.end.210:                                       ; preds = %if.then.206
  br label %for.inc.211

for.inc.211:                                      ; preds = %if.end.210
  %96 = load i32, i32* %i, align 4
  %inc = add nsw i32 %96, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.186

for.end.212:                                      ; preds = %for.cond.186
  br label %if.end.213

if.end.213:                                       ; preds = %for.end.212, %for.end
  br label %success

success:                                          ; preds = %if.end.213, %if.then.46
  store i1 true, i1* %retval
  br label %return

failure:                                          ; preds = %if.else.209, %if.then.194, %if.else.182, %if.then.160, %if.end.145, %if.then.133, %if.then.126, %if.then.119, %if.then.112, %if.then.105, %if.else.101, %if.else.97, %if.else.75, %if.else.57, %if.end.43, %if.then.34, %if.then.12, %if.else
  %97 = load i8**, i8*** %data.addr, align 8
  %tobool214 = icmp ne i8** %97, null
  br i1 %tobool214, label %land.lhs.true.215, label %if.end.218

land.lhs.true.215:                                ; preds = %failure
  %98 = load i8**, i8*** %data.addr, align 8
  %99 = load i8*, i8** %98, align 8
  %tobool216 = icmp ne i8* %99, null
  br i1 %tobool216, label %if.then.217, label %if.end.218

if.then.217:                                      ; preds = %land.lhs.true.215
  %100 = load i8**, i8*** %data.addr, align 8
  %101 = load i8*, i8** %100, align 8
  call void @xfree(i8* %101)
  %102 = load i8**, i8*** %data.addr, align 8
  store i8* null, i8** %102, align 8
  br label %if.end.218

if.end.218:                                       ; preds = %if.then.217, %land.lhs.true.215, %failure
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %if.end.218, %success
  %103 = load i1, i1* %retval
  ret i1 %103
}

; Function Attrs: nounwind uwtable
define internal i32 @xbm_scan(i8** %s, i8* %end, i8* %sval, i32* %ival) #0 {
entry:
  %s.addr = alloca i8**, align 8
  %end.addr = alloca i8*, align 8
  %sval.addr = alloca i8*, align 8
  %ival.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  %value = alloca i32, align 4
  %digit = alloca i32, align 4
  store i8** %s, i8*** %s.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8* %sval, i8** %sval.addr, align 8
  store i32* %ival, i32** %ival.addr, align 8
  br label %loop

loop:                                             ; preds = %if.then.144, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %loop
  %0 = load i8**, i8*** %s.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i8**, i8*** %s.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  store i32 %conv, i32* %c, align 4
  %6 = load i32, i32* %c, align 4
  %call = call zeroext i1 @c_isspace(i32 %6)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %call, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %8 = load i8**, i8*** %s.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %10 = load i8*, i8** %end.addr, align 8
  %cmp2 = icmp uge i8* %9, %10
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  store i32 0, i32* %c, align 4
  br label %if.end.150

if.else:                                          ; preds = %while.end
  %11 = load i32, i32* %c, align 4
  %call4 = call zeroext i1 @c_isdigit(i32 %11)
  br i1 %call4, label %if.then.5, label %if.else.89

if.then.5:                                        ; preds = %if.else
  store i32 0, i32* %value, align 4
  %12 = load i32, i32* %c, align 4
  %cmp6 = icmp eq i32 %12, 48
  br i1 %cmp6, label %land.lhs.true, label %if.else.68

land.lhs.true:                                    ; preds = %if.then.5
  %13 = load i8**, i8*** %s.addr, align 8
  %14 = load i8*, i8** %13, align 8
  %15 = load i8*, i8** %end.addr, align 8
  %cmp8 = icmp ult i8* %14, %15
  br i1 %cmp8, label %if.then.10, label %if.else.68

if.then.10:                                       ; preds = %land.lhs.true
  %16 = load i8**, i8*** %s.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %incdec.ptr11 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr11, i8** %16, align 8
  %18 = load i8, i8* %17, align 1
  %conv12 = zext i8 %18 to i32
  store i32 %conv12, i32* %c, align 4
  %19 = load i32, i32* %c, align 4
  %cmp13 = icmp eq i32 %19, 120
  br i1 %cmp13, label %if.then.17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.10
  %20 = load i32, i32* %c, align 4
  %cmp15 = icmp eq i32 %20, 88
  br i1 %cmp15, label %if.then.17, label %if.else.48

if.then.17:                                       ; preds = %lor.lhs.false, %if.then.10
  br label %while.cond.18

while.cond.18:                                    ; preds = %if.end.45, %if.then.17
  %21 = load i8**, i8*** %s.addr, align 8
  %22 = load i8*, i8** %21, align 8
  %23 = load i8*, i8** %end.addr, align 8
  %cmp19 = icmp ult i8* %22, %23
  br i1 %cmp19, label %while.body.21, label %while.end.47

while.body.21:                                    ; preds = %while.cond.18
  %24 = load i8**, i8*** %s.addr, align 8
  %25 = load i8*, i8** %24, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr22, i8** %24, align 8
  %26 = load i8, i8* %25, align 1
  %conv23 = zext i8 %26 to i32
  store i32 %conv23, i32* %c, align 4
  %27 = load i32, i32* %c, align 4
  %call24 = call zeroext i1 @c_isdigit(i32 %27)
  br i1 %call24, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %while.body.21
  %28 = load i32, i32* %c, align 4
  %sub = sub i32 %28, 48
  store i32 %sub, i32* %digit, align 4
  br label %if.end.45

if.else.26:                                       ; preds = %while.body.21
  %29 = load i32, i32* %c, align 4
  %cmp27 = icmp uge i32 %29, 97
  br i1 %cmp27, label %land.lhs.true.29, label %if.else.34

land.lhs.true.29:                                 ; preds = %if.else.26
  %30 = load i32, i32* %c, align 4
  %cmp30 = icmp ule i32 %30, 102
  br i1 %cmp30, label %if.then.32, label %if.else.34

if.then.32:                                       ; preds = %land.lhs.true.29
  %31 = load i32, i32* %c, align 4
  %sub33 = sub i32 %31, 97
  %add = add i32 %sub33, 10
  store i32 %add, i32* %digit, align 4
  br label %if.end.44

if.else.34:                                       ; preds = %land.lhs.true.29, %if.else.26
  %32 = load i32, i32* %c, align 4
  %cmp35 = icmp uge i32 %32, 65
  br i1 %cmp35, label %land.lhs.true.37, label %if.else.43

land.lhs.true.37:                                 ; preds = %if.else.34
  %33 = load i32, i32* %c, align 4
  %cmp38 = icmp ule i32 %33, 70
  br i1 %cmp38, label %if.then.40, label %if.else.43

if.then.40:                                       ; preds = %land.lhs.true.37
  %34 = load i32, i32* %c, align 4
  %sub41 = sub i32 %34, 65
  %add42 = add i32 %sub41, 10
  store i32 %add42, i32* %digit, align 4
  br label %if.end

if.else.43:                                       ; preds = %land.lhs.true.37, %if.else.34
  br label %while.end.47

if.end:                                           ; preds = %if.then.40
  br label %if.end.44

if.end.44:                                        ; preds = %if.end, %if.then.32
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.25
  %35 = load i32, i32* %value, align 4
  %mul = mul nsw i32 16, %35
  %36 = load i32, i32* %digit, align 4
  %add46 = add nsw i32 %mul, %36
  store i32 %add46, i32* %value, align 4
  br label %while.cond.18

while.end.47:                                     ; preds = %if.else.43, %while.cond.18
  br label %if.end.67

if.else.48:                                       ; preds = %lor.lhs.false
  %37 = load i32, i32* %c, align 4
  %call49 = call zeroext i1 @c_isdigit(i32 %37)
  br i1 %call49, label %if.then.50, label %if.end.66

if.then.50:                                       ; preds = %if.else.48
  %38 = load i32, i32* %c, align 4
  %sub51 = sub i32 %38, 48
  store i32 %sub51, i32* %value, align 4
  br label %while.cond.52

while.cond.52:                                    ; preds = %while.body.61, %if.then.50
  %39 = load i8**, i8*** %s.addr, align 8
  %40 = load i8*, i8** %39, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp53 = icmp ult i8* %40, %41
  br i1 %cmp53, label %land.rhs.55, label %land.end.60

land.rhs.55:                                      ; preds = %while.cond.52
  %42 = load i8**, i8*** %s.addr, align 8
  %43 = load i8*, i8** %42, align 8
  %incdec.ptr56 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr56, i8** %42, align 8
  %44 = load i8, i8* %43, align 1
  %conv57 = zext i8 %44 to i32
  store i32 %conv57, i32* %c, align 4
  %45 = load i32, i32* %c, align 4
  %call58 = call zeroext i1 @c_isdigit(i32 %45)
  br label %land.end.60

land.end.60:                                      ; preds = %land.rhs.55, %while.cond.52
  %46 = phi i1 [ false, %while.cond.52 ], [ %call58, %land.rhs.55 ]
  br i1 %46, label %while.body.61, label %while.end.65

while.body.61:                                    ; preds = %land.end.60
  %47 = load i32, i32* %value, align 4
  %mul62 = mul nsw i32 8, %47
  %48 = load i32, i32* %c, align 4
  %add63 = add i32 %mul62, %48
  %sub64 = sub i32 %add63, 48
  store i32 %sub64, i32* %value, align 4
  br label %while.cond.52

while.end.65:                                     ; preds = %land.end.60
  br label %if.end.66

if.end.66:                                        ; preds = %while.end.65, %if.else.48
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %while.end.47
  br label %if.end.84

if.else.68:                                       ; preds = %land.lhs.true, %if.then.5
  %49 = load i32, i32* %c, align 4
  %sub69 = sub i32 %49, 48
  store i32 %sub69, i32* %value, align 4
  br label %while.cond.70

while.cond.70:                                    ; preds = %while.body.79, %if.else.68
  %50 = load i8**, i8*** %s.addr, align 8
  %51 = load i8*, i8** %50, align 8
  %52 = load i8*, i8** %end.addr, align 8
  %cmp71 = icmp ult i8* %51, %52
  br i1 %cmp71, label %land.rhs.73, label %land.end.78

land.rhs.73:                                      ; preds = %while.cond.70
  %53 = load i8**, i8*** %s.addr, align 8
  %54 = load i8*, i8** %53, align 8
  %incdec.ptr74 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr74, i8** %53, align 8
  %55 = load i8, i8* %54, align 1
  %conv75 = zext i8 %55 to i32
  store i32 %conv75, i32* %c, align 4
  %56 = load i32, i32* %c, align 4
  %call76 = call zeroext i1 @c_isdigit(i32 %56)
  br label %land.end.78

land.end.78:                                      ; preds = %land.rhs.73, %while.cond.70
  %57 = phi i1 [ false, %while.cond.70 ], [ %call76, %land.rhs.73 ]
  br i1 %57, label %while.body.79, label %while.end.83

while.body.79:                                    ; preds = %land.end.78
  %58 = load i32, i32* %value, align 4
  %mul80 = mul nsw i32 10, %58
  %59 = load i32, i32* %c, align 4
  %add81 = add i32 %mul80, %59
  %sub82 = sub i32 %add81, 48
  store i32 %sub82, i32* %value, align 4
  br label %while.cond.70

while.end.83:                                     ; preds = %land.end.78
  br label %if.end.84

if.end.84:                                        ; preds = %while.end.83, %if.end.67
  %60 = load i8**, i8*** %s.addr, align 8
  %61 = load i8*, i8** %60, align 8
  %62 = load i8*, i8** %end.addr, align 8
  %cmp85 = icmp ult i8* %61, %62
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.end.84
  %63 = load i8**, i8*** %s.addr, align 8
  %64 = load i8*, i8** %63, align 8
  %add.ptr = getelementptr inbounds i8, i8* %64, i64 -1
  %65 = load i8**, i8*** %s.addr, align 8
  store i8* %add.ptr, i8** %65, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %if.end.84
  %66 = load i32, i32* %value, align 4
  %67 = load i32*, i32** %ival.addr, align 8
  store i32 %66, i32* %67, align 4
  store i32 257, i32* %c, align 4
  br label %if.end.149

if.else.89:                                       ; preds = %if.else
  %68 = load i32, i32* %c, align 4
  %call90 = call zeroext i1 @c_isalpha(i32 %68)
  br i1 %call90, label %if.then.95, label %lor.lhs.false.92

lor.lhs.false.92:                                 ; preds = %if.else.89
  %69 = load i32, i32* %c, align 4
  %cmp93 = icmp eq i32 %69, 95
  br i1 %cmp93, label %if.then.95, label %if.else.118

if.then.95:                                       ; preds = %lor.lhs.false.92, %if.else.89
  %70 = load i32, i32* %c, align 4
  %conv96 = trunc i32 %70 to i8
  %71 = load i8*, i8** %sval.addr, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr97, i8** %sval.addr, align 8
  store i8 %conv96, i8* %71, align 1
  br label %while.cond.98

while.cond.98:                                    ; preds = %while.body.109, %if.then.95
  %72 = load i8**, i8*** %s.addr, align 8
  %73 = load i8*, i8** %72, align 8
  %74 = load i8*, i8** %end.addr, align 8
  %cmp99 = icmp ult i8* %73, %74
  br i1 %cmp99, label %land.rhs.101, label %land.end.108

land.rhs.101:                                     ; preds = %while.cond.98
  %75 = load i8**, i8*** %s.addr, align 8
  %76 = load i8*, i8** %75, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %incdec.ptr102, i8** %75, align 8
  %77 = load i8, i8* %76, align 1
  %conv103 = zext i8 %77 to i32
  store i32 %conv103, i32* %c, align 4
  %78 = load i32, i32* %c, align 4
  %call104 = call zeroext i1 @c_isalnum(i32 %78)
  br i1 %call104, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs.101
  %79 = load i32, i32* %c, align 4
  %cmp106 = icmp eq i32 %79, 95
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs.101
  %80 = phi i1 [ true, %land.rhs.101 ], [ %cmp106, %lor.rhs ]
  br label %land.end.108

land.end.108:                                     ; preds = %lor.end, %while.cond.98
  %81 = phi i1 [ false, %while.cond.98 ], [ %80, %lor.end ]
  br i1 %81, label %while.body.109, label %while.end.112

while.body.109:                                   ; preds = %land.end.108
  %82 = load i32, i32* %c, align 4
  %conv110 = trunc i32 %82 to i8
  %83 = load i8*, i8** %sval.addr, align 8
  %incdec.ptr111 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %incdec.ptr111, i8** %sval.addr, align 8
  store i8 %conv110, i8* %83, align 1
  br label %while.cond.98

while.end.112:                                    ; preds = %land.end.108
  %84 = load i8*, i8** %sval.addr, align 8
  store i8 0, i8* %84, align 1
  %85 = load i8**, i8*** %s.addr, align 8
  %86 = load i8*, i8** %85, align 8
  %87 = load i8*, i8** %end.addr, align 8
  %cmp113 = icmp ult i8* %86, %87
  br i1 %cmp113, label %if.then.115, label %if.end.117

if.then.115:                                      ; preds = %while.end.112
  %88 = load i8**, i8*** %s.addr, align 8
  %89 = load i8*, i8** %88, align 8
  %add.ptr116 = getelementptr inbounds i8, i8* %89, i64 -1
  %90 = load i8**, i8*** %s.addr, align 8
  store i8* %add.ptr116, i8** %90, align 8
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.115, %while.end.112
  store i32 256, i32* %c, align 4
  br label %if.end.148

if.else.118:                                      ; preds = %lor.lhs.false.92
  %91 = load i32, i32* %c, align 4
  %cmp119 = icmp eq i32 %91, 47
  br i1 %cmp119, label %land.lhs.true.121, label %if.end.147

land.lhs.true.121:                                ; preds = %if.else.118
  %92 = load i8**, i8*** %s.addr, align 8
  %93 = load i8*, i8** %92, align 8
  %94 = load i8, i8* %93, align 1
  %conv122 = zext i8 %94 to i32
  %cmp123 = icmp eq i32 %conv122, 42
  br i1 %cmp123, label %if.then.125, label %if.end.147

if.then.125:                                      ; preds = %land.lhs.true.121
  %95 = load i8**, i8*** %s.addr, align 8
  %96 = load i8*, i8** %95, align 8
  %incdec.ptr126 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr126, i8** %95, align 8
  br label %while.cond.127

while.cond.127:                                   ; preds = %while.body.140, %if.then.125
  %97 = load i8**, i8*** %s.addr, align 8
  %98 = load i8*, i8** %97, align 8
  %99 = load i8, i8* %98, align 1
  %conv128 = zext i8 %99 to i32
  %tobool = icmp ne i32 %conv128, 0
  br i1 %tobool, label %land.rhs.129, label %land.end.139

land.rhs.129:                                     ; preds = %while.cond.127
  %100 = load i8**, i8*** %s.addr, align 8
  %101 = load i8*, i8** %100, align 8
  %102 = load i8, i8* %101, align 1
  %conv130 = zext i8 %102 to i32
  %cmp131 = icmp ne i32 %conv130, 42
  br i1 %cmp131, label %lor.end.138, label %lor.rhs.133

lor.rhs.133:                                      ; preds = %land.rhs.129
  %103 = load i8**, i8*** %s.addr, align 8
  %104 = load i8*, i8** %103, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %104, i64 1
  %105 = load i8, i8* %add.ptr134, align 1
  %conv135 = zext i8 %105 to i32
  %cmp136 = icmp ne i32 %conv135, 47
  br label %lor.end.138

lor.end.138:                                      ; preds = %lor.rhs.133, %land.rhs.129
  %106 = phi i1 [ true, %land.rhs.129 ], [ %cmp136, %lor.rhs.133 ]
  br label %land.end.139

land.end.139:                                     ; preds = %lor.end.138, %while.cond.127
  %107 = phi i1 [ false, %while.cond.127 ], [ %106, %lor.end.138 ]
  br i1 %107, label %while.body.140, label %while.end.142

while.body.140:                                   ; preds = %land.end.139
  %108 = load i8**, i8*** %s.addr, align 8
  %109 = load i8*, i8** %108, align 8
  %incdec.ptr141 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %incdec.ptr141, i8** %108, align 8
  br label %while.cond.127

while.end.142:                                    ; preds = %land.end.139
  %110 = load i8**, i8*** %s.addr, align 8
  %111 = load i8*, i8** %110, align 8
  %112 = load i8, i8* %111, align 1
  %tobool143 = icmp ne i8 %112, 0
  br i1 %tobool143, label %if.then.144, label %if.end.146

if.then.144:                                      ; preds = %while.end.142
  %113 = load i8**, i8*** %s.addr, align 8
  %114 = load i8*, i8** %113, align 8
  %add.ptr145 = getelementptr inbounds i8, i8* %114, i64 2
  store i8* %add.ptr145, i8** %113, align 8
  br label %loop

if.end.146:                                       ; preds = %while.end.142
  br label %if.end.147

if.end.147:                                       ; preds = %if.end.146, %land.lhs.true.121, %if.else.118
  br label %if.end.148

if.end.148:                                       ; preds = %if.end.147, %if.end.117
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.end.88
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.149, %if.then
  %115 = load i32, i32* %c, align 4
  ret i32 %115
}

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #2

declare zeroext i1 @c_isalpha(i32) #1

declare zeroext i1 @c_isalnum(i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xbm_load_image(%struct.frame* %f, %struct.image* %img, i8* %contents, i8* %end) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %contents.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %rc = alloca i8, align 1
  %data = alloca i8*, align 8
  %success_p = alloca i8, align 1
  %foreground = alloca i64, align 8
  %background = alloca i64, align 8
  %non_default_colors = alloca i8, align 1
  %value = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i8* %contents, i8** %contents.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8 0, i8* %success_p, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i8*, i8** %contents.addr, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %3, i32 0, i32 11
  %4 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %4, i32 0, i32 12
  %call = call zeroext i1 @xbm_read_bitmap_data(%struct.frame* %0, i8* %1, i8* %2, i32* %width, i32* %height, i8** %data, i1 zeroext false)
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %rc, align 1
  %5 = load i8, i8* %rc, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %if.then, label %if.else.20

if.then:                                          ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 78
  %7 = load i64, i64* %foreground_pixel, align 8
  store i64 %7, i64* %foreground, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 77
  %9 = load i64, i64* %background_pixel, align 8
  store i64 %9, i64* %background, align 8
  store i8 0, i8* %non_default_colors, align 1
  %10 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %10, i32 0, i32 15
  %11 = load i64, i64* %spec, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 47)
  %call2 = call i64 @image_spec_value(i64 %11, i64 %call1, i8* null)
  store i64 %call2, i64* %value, align 8
  %12 = load i64, i64* %value, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %12, %call3
  br i1 %cmp, label %if.end, label %if.then.4

if.then.4:                                        ; preds = %if.then
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %15 = load i64, i64* %value, align 8
  %16 = load i64, i64* %foreground, align 8
  %call5 = call i64 @x_alloc_image_color(%struct.frame* %13, %struct.image* %14, i64 %15, i64 %16)
  store i64 %call5, i64* %foreground, align 8
  store i8 1, i8* %non_default_colors, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  %17 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec6 = getelementptr inbounds %struct.image, %struct.image* %17, i32 0, i32 15
  %18 = load i64, i64* %spec6, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 13)
  %call8 = call i64 @image_spec_value(i64 %18, i64 %call7, i8* null)
  store i64 %call8, i64* %value, align 8
  %19 = load i64, i64* %value, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %19, %call9
  br i1 %cmp10, label %if.end.14, label %if.then.11

if.then.11:                                       ; preds = %if.end
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %21 = load %struct.image*, %struct.image** %img.addr, align 8
  %22 = load i64, i64* %value, align 8
  %23 = load i64, i64* %background, align 8
  %call12 = call i64 @x_alloc_image_color(%struct.frame* %20, %struct.image* %21, i64 %22, i64 %23)
  store i64 %call12, i64* %background, align 8
  %24 = load i64, i64* %background, align 8
  %25 = load %struct.image*, %struct.image** %img.addr, align 8
  %background13 = getelementptr inbounds %struct.image, %struct.image* %25, i32 0, i32 7
  store i64 %24, i64* %background13, align 8
  %26 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 10
  %bf.load = load i8, i8* %background_valid, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %background_valid, align 8
  store i8 1, i8* %non_default_colors, align 1
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.11, %if.end
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %28 = load %struct.image*, %struct.image** %img.addr, align 8
  %29 = load i8*, i8** %data, align 8
  %30 = load i64, i64* %foreground, align 8
  %31 = load i64, i64* %background, align 8
  %32 = load i8, i8* %non_default_colors, align 1
  %tobool15 = trunc i8 %32 to i1
  call void @Create_Pixmap_From_Bitmap_Data(%struct.frame* %27, %struct.image* %28, i8* %29, i64 %30, i64 %31, i1 zeroext %tobool15)
  %33 = load i8*, i8** %data, align 8
  call void @xfree(i8* %33)
  %34 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %34, i32 0, i32 1
  %35 = load i64, i64* %pixmap, align 8
  %cmp16 = icmp eq i64 %35, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.end.14
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %37 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image(%struct.frame* %36, %struct.image* %37)
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec18 = getelementptr inbounds %struct.image, %struct.image* %38, i32 0, i32 15
  %39 = load i64, i64* %spec18, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.47, i32 0, i32 0), i64 %39)
  br label %if.end.19

if.else:                                          ; preds = %if.end.14
  store i8 1, i8* %success_p, align 1
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.17
  br label %if.end.22

if.else.20:                                       ; preds = %entry
  %40 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec21 = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 15
  %41 = load i64, i64* %spec21, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.45, i32 0, i32 0), i64 %41)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.20, %if.end.19
  %42 = load i8, i8* %success_p, align 1
  %tobool23 = trunc i8 %42 to i1
  ret i1 %tobool23
}

declare noalias i8* @xnmalloc(i64, i64) #1

declare i64* @bool_vector_data(i64) #1

; Function Attrs: nounwind uwtable
define internal void @Create_Pixmap_From_Bitmap_Data(%struct.frame* %f, %struct.image* %img, i8* %data, i64 %fg, i64 %bg, i1 zeroext %non_default_colors) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %data.addr = alloca i8*, align 8
  %fg.addr = alloca i64, align 8
  %bg.addr = alloca i64, align 8
  %non_default_colors.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %fg, i64* %fg.addr, align 8
  store i64 %bg, i64* %bg.addr, align 8
  %frombool = zext i1 %non_default_colors to i8
  store i8 %frombool, i8* %non_default_colors.addr, align 1
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 11
  %1 = load i32, i32* %width, align 4
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 12
  %3 = load i32, i32* %height, align 4
  %call = call zeroext i1 @x_check_image_size(%struct._XImage* null, i32 %1, i32 %3)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 9
  %10 = load i64, i64* %window_desc, align 8
  %11 = load i8*, i8** %data.addr, align 8
  %12 = load %struct.image*, %struct.image** %img.addr, align 8
  %width3 = getelementptr inbounds %struct.image, %struct.image* %12, i32 0, i32 11
  %13 = load i32, i32* %width3, align 4
  %14 = load %struct.image*, %struct.image** %img.addr, align 8
  %height4 = getelementptr inbounds %struct.image, %struct.image* %14, i32 0, i32 12
  %15 = load i32, i32* %height4, align 4
  %16 = load i64, i64* %fg.addr, align 8
  %17 = load i64, i64* %bg.addr, align 8
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %display_info7 = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 44
  %20 = load %struct.x_display_info*, %struct.x_display_info** %display_info7, align 8
  %screen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %20, i32 0, i32 6
  %21 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %root_depth = getelementptr inbounds %struct.Screen, %struct.Screen* %21, i32 0, i32 9
  %22 = load i32, i32* %root_depth, align 4
  %call8 = call i64 @XCreatePixmapFromBitmapData(%struct._XDisplay* %7, i64 %10, i8* %11, i32 %13, i32 %15, i64 %16, i64 %17, i32 %22)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call8, %cond.true ], [ 0, %cond.false ]
  %23 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %23, i32 0, i32 1
  store i64 %cond, i64* %pixmap, align 8
  ret void
}

declare i64 @XCreatePixmapFromBitmapData(%struct._XDisplay*, i64, i8*, i32, i32, i64, i64, i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @png_image_p(i64 %object) #0 {
entry:
  %retval = alloca i1, align 1
  %object.addr = alloca i64, align 8
  %fmt = alloca [10 x %struct.image_keyword], align 16
  store i64 %object, i64* %object.addr, align 8
  %0 = bitcast [10 x %struct.image_keyword]* %fmt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([10 x %struct.image_keyword]* @png_format to i8*), i64 320, i32 16, i1 false)
  %1 = load i64, i64* %object.addr, align 8
  %arraydecay = getelementptr inbounds [10 x %struct.image_keyword], [10 x %struct.image_keyword]* %fmt, i32 0, i32 0
  %call = call i64 @builtin_lisp_symbol(i32 754)
  %call1 = call zeroext i1 @parse_image_spec(i64 %1, %struct.image_keyword* %arraydecay, i32 10, i64 %call)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [10 x %struct.image_keyword], [10 x %struct.image_keyword]* %fmt, i32 0, i64 2
  %count = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx, i32 0, i32 3
  %2 = load i32, i32* %count, align 4
  %arrayidx2 = getelementptr inbounds [10 x %struct.image_keyword], [10 x %struct.image_keyword]* %fmt, i32 0, i64 1
  %count3 = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx2, i32 0, i32 3
  %3 = load i32, i32* %count3, align 4
  %add = add nsw i32 %2, %3
  %cmp = icmp eq i32 %add, 1
  store i1 %cmp, i1* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i1, i1* %retval
  ret i1 %4
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @png_load(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %c = alloca %struct.png_load_context, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  %call = call zeroext i1 @png_load_body(%struct.frame* %0, %struct.image* %1, %struct.png_load_context* %c)
  ret i1 %call
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @png_load_body(%struct.frame* %f, %struct.image* %img, %struct.png_load_context* %c) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %c.addr = alloca %struct.png_load_context*, align 8
  %specified_file = alloca i64, align 8
  %specified_data = alloca i64, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %i = alloca i64, align 8
  %png_ptr = alloca %struct.png_struct_def*, align 8
  %info_ptr = alloca %struct.png_info_def*, align 8
  %end_info = alloca %struct.png_info_def*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %sig = alloca [8 x i8], align 1
  %pixels = alloca i8*, align 8
  %rows = alloca i8**, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %bit_depth = alloca i32, align 4
  %color_type = alloca i32, align 4
  %interlace_type = alloca i32, align 4
  %channels = alloca i8, align 1
  %row_bytes = alloca i32, align 4
  %transparent_p = alloca i8, align 1
  %tbr = alloca %struct.png_memory_storage, align 8
  %nbytes = alloca i64, align 8
  %ximg = alloca %struct._XImage*, align 8
  %mask_img = alloca %struct._XImage*, align 8
  %fd = alloca i32, align 4
  %file = alloca i64, align 8
  %specified_bg = alloca i64, align 8
  %color = alloca %struct.XColor, align 8
  %shift = alloca i32, align 4
  %bg = alloca %struct.png_color_16_struct, align 2
  %p = alloca i8*, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %bg5432 = alloca %struct.png_color_16_struct*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store %struct.png_load_context* %c, %struct.png_load_context** %c.addr, align 8
  store %struct.png_info_def* null, %struct.png_info_def** %info_ptr, align 8
  store %struct.png_info_def* null, %struct.png_info_def** %end_info, align 8
  store %struct._IO_FILE* null, %struct._IO_FILE** %fp, align 8
  store i8* null, i8** %pixels, align 8
  store i8** null, i8*** %rows, align 8
  store %struct._XImage* null, %struct._XImage** %mask_img, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 15
  %1 = load i64, i64* %spec, align 8
  %call = call i64 @builtin_lisp_symbol(i32 41)
  %call1 = call i64 @image_spec_value(i64 %1, i64 %call, i8* null)
  store i64 %call1, i64* %specified_file, align 8
  %2 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec2 = getelementptr inbounds %struct.image, %struct.image* %2, i32 0, i32 15
  %3 = load i64, i64* %spec2, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 29)
  %call4 = call i64 @image_spec_value(i64 %3, i64 %call3, i8* null)
  store i64 %call4, i64* %specified_data, align 8
  %4 = load i64, i64* %specified_data, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i64, i64* %specified_file, align 8
  %call6 = call i64 @x_find_image_fd(i64 %5, i32* %fd)
  store i64 %call6, i64* %file, align 8
  %6 = load i64, i64* %file, align 8
  %call7 = call zeroext i1 @STRINGP(i64 %6)
  br i1 %call7, label %if.end, label %if.then.8

if.then.8:                                        ; preds = %if.then
  %7 = load i64, i64* %specified_file, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0), i64 %7)
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load i32, i32* %fd, align 4
  %call9 = call %struct._IO_FILE* @fdopen(i32 %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0)) #4
  store %struct._IO_FILE* %call9, %struct._IO_FILE** %fp, align 8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool = icmp ne %struct._IO_FILE* %9, null
  br i1 %tobool, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end
  %10 = load i64, i64* %file, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.48, i32 0, i32 0), i64 %10)
  store i1 false, i1* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %sig, i32 0, i32 0
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call12 = call i64 @fread(i8* %arraydecay, i64 1, i64 8, %struct._IO_FILE* %11)
  %cmp13 = icmp ne i64 %call12, 8
  br i1 %cmp13, label %if.then.17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.11
  %arraydecay14 = getelementptr inbounds [8 x i8], [8 x i8]* %sig, i32 0, i32 0
  %call15 = call i32 @png_sig_cmp(i8* %arraydecay14, i64 0, i64 8)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %lor.lhs.false, %if.end.11
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call18 = call i32 @fclose(%struct._IO_FILE* %12)
  %13 = load i64, i64* %file, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0), i64 %13)
  store i1 false, i1* %retval
  br label %return

if.end.19:                                        ; preds = %lor.lhs.false
  br label %if.end.35

if.else:                                          ; preds = %entry
  %14 = load i64, i64* %specified_data, align 8
  %call20 = call zeroext i1 @STRINGP(i64 %14)
  br i1 %call20, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %if.else
  %15 = load i64, i64* %specified_data, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i32 0, i32 0), i64 %15)
  store i1 false, i1* %retval
  br label %return

if.end.22:                                        ; preds = %if.else
  %16 = load i64, i64* %specified_data, align 8
  %call23 = call i8* @SDATA(i64 %16)
  %bytes = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %tbr, i32 0, i32 0
  store i8* %call23, i8** %bytes, align 8
  %17 = load i64, i64* %specified_data, align 8
  %call24 = call i64 @SBYTES(i64 %17)
  %len = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %tbr, i32 0, i32 1
  store i64 %call24, i64* %len, align 8
  %index = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %tbr, i32 0, i32 2
  store i64 0, i64* %index, align 8
  %len25 = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %tbr, i32 0, i32 1
  %18 = load i64, i64* %len25, align 8
  %cmp26 = icmp ult i64 %18, 8
  br i1 %cmp26, label %if.then.31, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %if.end.22
  %bytes28 = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %tbr, i32 0, i32 0
  %19 = load i8*, i8** %bytes28, align 8
  %call29 = call i32 @png_sig_cmp(i8* %19, i64 0, i64 8)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %lor.lhs.false.27, %if.end.22
  %20 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec32 = getelementptr inbounds %struct.image, %struct.image* %20, i32 0, i32 15
  %21 = load i64, i64* %spec32, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.50, i32 0, i32 0), i64 %21)
  store i1 false, i1* %retval
  br label %return

if.end.33:                                        ; preds = %lor.lhs.false.27
  %bytes34 = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %tbr, i32 0, i32 0
  %22 = load i8*, i8** %bytes34, align 8
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 8
  store i8* %add.ptr, i8** %bytes34, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.33, %if.end.19
  %call36 = call noalias %struct.png_struct_def* @png_create_read_struct(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i32 0, i32 0), i8* null, void (%struct.png_struct_def*, i8*)* @my_png_error, void (%struct.png_struct_def*, i8*)* @my_png_warning)
  store %struct.png_struct_def* %call36, %struct.png_struct_def** %png_ptr, align 8
  %23 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %tobool37 = icmp ne %struct.png_struct_def* %23, null
  br i1 %tobool37, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.end.35
  %24 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %call39 = call noalias %struct.png_info_def* @png_create_info_struct(%struct.png_struct_def* %24)
  store %struct.png_info_def* %call39, %struct.png_info_def** %info_ptr, align 8
  %25 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %call40 = call noalias %struct.png_info_def* @png_create_info_struct(%struct.png_struct_def* %25)
  store %struct.png_info_def* %call40, %struct.png_info_def** %end_info, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.end.35
  %26 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %27 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %png_ptr42 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %27, i32 0, i32 0
  store %struct.png_struct_def* %26, %struct.png_struct_def** %png_ptr42, align 8
  %28 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  %29 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %info_ptr43 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %29, i32 0, i32 1
  store %struct.png_info_def* %28, %struct.png_info_def** %info_ptr43, align 8
  %30 = load %struct.png_info_def*, %struct.png_info_def** %end_info, align 8
  %31 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %end_info44 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %31, i32 0, i32 2
  store %struct.png_info_def* %30, %struct.png_info_def** %end_info44, align 8
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %33 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %fp45 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %33, i32 0, i32 3
  store %struct._IO_FILE* %32, %struct._IO_FILE** %fp45, align 8
  %34 = load i8*, i8** %pixels, align 8
  %35 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %pixels46 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %35, i32 0, i32 4
  store i8* %34, i8** %pixels46, align 8
  %36 = load i8**, i8*** %rows, align 8
  %37 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %rows47 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %37, i32 0, i32 5
  store i8** %36, i8*** %rows47, align 8
  %38 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  %tobool48 = icmp ne %struct.png_info_def* %38, null
  br i1 %tobool48, label %land.lhs.true, label %if.then.50

land.lhs.true:                                    ; preds = %if.end.41
  %39 = load %struct.png_info_def*, %struct.png_info_def** %end_info, align 8
  %tobool49 = icmp ne %struct.png_info_def* %39, null
  br i1 %tobool49, label %if.end.54, label %if.then.50

if.then.50:                                       ; preds = %land.lhs.true, %if.end.41
  %40 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %png_ptr51 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %40, i32 0, i32 0
  %41 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %info_ptr52 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %41, i32 0, i32 1
  %42 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %end_info53 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %42, i32 0, i32 2
  call void @png_destroy_read_struct(%struct.png_struct_def** %png_ptr51, %struct.png_info_def** %info_ptr52, %struct.png_info_def** %end_info53)
  store %struct.png_struct_def* null, %struct.png_struct_def** %png_ptr, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.50, %land.lhs.true
  %43 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %tobool55 = icmp ne %struct.png_struct_def* %43, null
  br i1 %tobool55, label %if.end.61, label %if.then.56

if.then.56:                                       ; preds = %if.end.54
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool57 = icmp ne %struct._IO_FILE* %44, null
  br i1 %tobool57, label %if.then.58, label %if.end.60

if.then.58:                                       ; preds = %if.then.56
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call59 = call i32 @fclose(%struct._IO_FILE* %45)
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %if.then.56
  store i1 false, i1* %retval
  br label %return

if.end.61:                                        ; preds = %if.end.54
  %46 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %call62 = call [1 x %struct.__jmp_buf_tag]* @png_set_longjmp_fn(%struct.png_struct_def* %46, void (%struct.__jmp_buf_tag*, i32)* @_longjmp, i64 200)
  %arraydecay63 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %call62, i32 0, i32 0
  %call64 = call i32 @_setjmp(%struct.__jmp_buf_tag* %arraydecay63) #13
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.then.66, label %if.end.82

if.then.66:                                       ; preds = %if.end.61
  br label %error

error:                                            ; preds = %if.then.5380, %if.then.97, %if.then.94, %if.then.66
  %47 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %png_ptr67 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %47, i32 0, i32 0
  %48 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr67, align 8
  %tobool68 = icmp ne %struct.png_struct_def* %48, null
  br i1 %tobool68, label %if.then.69, label %if.end.73

if.then.69:                                       ; preds = %error
  %49 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %png_ptr70 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %49, i32 0, i32 0
  %50 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %info_ptr71 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %50, i32 0, i32 1
  %51 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %end_info72 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %51, i32 0, i32 2
  call void @png_destroy_read_struct(%struct.png_struct_def** %png_ptr70, %struct.png_info_def** %info_ptr71, %struct.png_info_def** %end_info72)
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.69, %error
  %52 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %pixels74 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %52, i32 0, i32 4
  %53 = load i8*, i8** %pixels74, align 8
  call void @xfree(i8* %53)
  %54 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %rows75 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %54, i32 0, i32 5
  %55 = load i8**, i8*** %rows75, align 8
  %56 = bitcast i8** %55 to i8*
  call void @xfree(i8* %56)
  %57 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %fp76 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %57, i32 0, i32 3
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %fp76, align 8
  %tobool77 = icmp ne %struct._IO_FILE* %58, null
  br i1 %tobool77, label %if.then.78, label %if.end.81

if.then.78:                                       ; preds = %if.end.73
  %59 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %fp79 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %59, i32 0, i32 3
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %fp79, align 8
  %call80 = call i32 @fclose(%struct._IO_FILE* %60)
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.78, %if.end.73
  store i1 false, i1* %retval
  br label %return

if.end.82:                                        ; preds = %if.end.61
  %61 = load i64, i64* %specified_data, align 8
  %call83 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp84 = icmp eq i64 %61, %call83
  br i1 %cmp84, label %if.else.86, label %if.then.85

if.then.85:                                       ; preds = %if.end.82
  %62 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %63 = bitcast %struct.png_memory_storage* %tbr to i8*
  call void @png_set_read_fn(%struct.png_struct_def* %62, i8* %63, void (%struct.png_struct_def*, i8*, i64)* @png_read_from_memory)
  br label %if.end.87

if.else.86:                                       ; preds = %if.end.82
  %64 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %66 = bitcast %struct._IO_FILE* %65 to i8*
  call void @png_set_read_fn(%struct.png_struct_def* %64, i8* %66, void (%struct.png_struct_def*, i8*, i64)* @png_read_from_file)
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.86, %if.then.85
  %67 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  call void @png_set_sig_bytes(%struct.png_struct_def* %67, i32 8)
  %68 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %69 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  call void @png_read_info(%struct.png_struct_def* %68, %struct.png_info_def* %69)
  %70 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %71 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  %call88 = call i32 @png_get_IHDR(%struct.png_struct_def* %70, %struct.png_info_def* %71, i32* %width, i32* %height, i32* %bit_depth, i32* %color_type, i32* %interlace_type, i32* null, i32* null)
  %72 = load i32, i32* %width, align 4
  %cmp89 = icmp ule i32 %72, 2147483647
  br i1 %cmp89, label %land.lhs.true.90, label %if.then.94

land.lhs.true.90:                                 ; preds = %if.end.87
  %73 = load i32, i32* %height, align 4
  %cmp91 = icmp ule i32 %73, 2147483647
  br i1 %cmp91, label %land.lhs.true.92, label %if.then.94

land.lhs.true.92:                                 ; preds = %land.lhs.true.90
  %74 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %75 = load i32, i32* %width, align 4
  %76 = load i32, i32* %height, align 4
  %call93 = call zeroext i1 @check_image_size(%struct.frame* %74, i32 %75, i32 %76)
  br i1 %call93, label %if.end.95, label %if.then.94

if.then.94:                                       ; preds = %land.lhs.true.92, %land.lhs.true.90, %if.end.87
  call void @image_size_error()
  br label %error

if.end.95:                                        ; preds = %land.lhs.true.92
  %77 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %78 = load %struct.image*, %struct.image** %img.addr, align 8
  %79 = load i32, i32* %width, align 4
  %80 = load i32, i32* %height, align 4
  %call96 = call zeroext i1 @image_create_x_image_and_pixmap(%struct.frame* %77, %struct.image* %78, i32 %79, i32 %80, i32 0, %struct._XImage** %ximg, i1 zeroext false)
  br i1 %call96, label %if.end.98, label %if.then.97

if.then.97:                                       ; preds = %if.end.95
  br label %error

if.end.98:                                        ; preds = %if.end.95
  %81 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %82 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  %call99 = call i32 @png_get_valid(%struct.png_struct_def* %81, %struct.png_info_def* %82, i32 16)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %if.then.101, label %if.else.102

if.then.101:                                      ; preds = %if.end.98
  store i8 1, i8* %transparent_p, align 1
  br label %if.end.103

if.else.102:                                      ; preds = %if.end.98
  store i8 0, i8* %transparent_p, align 1
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.102, %if.then.101
  %83 = load i32, i32* %bit_depth, align 4
  %cmp104 = icmp eq i32 %83, 16
  br i1 %cmp104, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %if.end.103
  %84 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  call void @png_set_strip_16(%struct.png_struct_def* %84)
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.105, %if.end.103
  %85 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  call void @png_set_expand(%struct.png_struct_def* %85)
  %86 = load i32, i32* %color_type, align 4
  %cmp107 = icmp eq i32 %86, 0
  br i1 %cmp107, label %if.then.110, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %if.end.106
  %87 = load i32, i32* %color_type, align 4
  %cmp109 = icmp eq i32 %87, 4
  br i1 %cmp109, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %lor.lhs.false.108, %if.end.106
  %88 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  call void @png_set_gray_to_rgb(%struct.png_struct_def* %88)
  br label %if.end.111

if.end.111:                                       ; preds = %if.then.110, %lor.lhs.false.108
  %89 = load i8, i8* %transparent_p, align 1
  %tobool112 = trunc i8 %89 to i1
  br i1 %tobool112, label %if.end.133, label %if.then.113

if.then.113:                                      ; preds = %if.end.111
  %90 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec114 = getelementptr inbounds %struct.image, %struct.image* %90, i32 0, i32 15
  %91 = load i64, i64* %spec114, align 8
  %call115 = call i64 @builtin_lisp_symbol(i32 13)
  %call116 = call i64 @image_spec_value(i64 %91, i64 %call115, i8* null)
  store i64 %call116, i64* %specified_bg, align 8
  %92 = load i64, i64* %specified_bg, align 8
  %call117 = call zeroext i1 @STRINGP(i64 %92)
  br i1 %call117, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.113
  %93 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %94 = load i64, i64* %specified_bg, align 8
  %call118 = call i8* @SSDATA(i64 %94)
  %call119 = call zeroext i1 @x_defined_color(%struct.frame* %93, i8* %call118, %struct.XColor* %color, i1 zeroext false)
  br i1 %call119, label %if.then.120, label %if.end.132

cond.false:                                       ; preds = %if.then.113
  %95 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_query_frame_background_color(%struct.frame* %95, %struct.XColor* %color)
  br i1 true, label %if.then.120, label %if.end.132

if.then.120:                                      ; preds = %cond.false, %cond.true
  %96 = load i32, i32* %bit_depth, align 4
  %cmp121 = icmp eq i32 %96, 16
  %cond = select i1 %cmp121, i32 0, i32 8
  store i32 %cond, i32* %shift, align 4
  %97 = bitcast %struct.png_color_16_struct* %bg to i8*
  call void @llvm.memset.p0i8.i64(i8* %97, i8 0, i64 10, i32 2, i1 false)
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %98 = load i16, i16* %red, align 2
  %conv = zext i16 %98 to i32
  %99 = load i32, i32* %shift, align 4
  %shr = ashr i32 %conv, %99
  %conv122 = trunc i32 %shr to i16
  %red123 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %bg, i32 0, i32 1
  store i16 %conv122, i16* %red123, align 2
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %100 = load i16, i16* %green, align 2
  %conv124 = zext i16 %100 to i32
  %101 = load i32, i32* %shift, align 4
  %shr125 = ashr i32 %conv124, %101
  %conv126 = trunc i32 %shr125 to i16
  %green127 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %bg, i32 0, i32 2
  store i16 %conv126, i16* %green127, align 2
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %102 = load i16, i16* %blue, align 2
  %conv128 = zext i16 %102 to i32
  %103 = load i32, i32* %shift, align 4
  %shr129 = ashr i32 %conv128, %103
  %conv130 = trunc i32 %shr129 to i16
  %blue131 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %bg, i32 0, i32 3
  store i16 %conv130, i16* %blue131, align 2
  %104 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  call void @png_set_background(%struct.png_struct_def* %104, %struct.png_color_16_struct* %bg, i32 1, i32 0, double 1.000000e+00)
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.120, %cond.false, %cond.true
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.end.111
  %105 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %106 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  call void @png_read_update_info(%struct.png_struct_def* %105, %struct.png_info_def* %106)
  %107 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %108 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  %call134 = call zeroext i8 @png_get_channels(%struct.png_struct_def* %107, %struct.png_info_def* %108)
  store i8 %call134, i8* %channels, align 1
  %109 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %110 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  %call135 = call i64 @png_get_rowbytes(%struct.png_struct_def* %109, %struct.png_info_def* %110)
  %conv136 = trunc i64 %call135 to i32
  store i32 %conv136, i32* %row_bytes, align 4
  br i1 false, label %cond.true.137, label %cond.false.639

cond.true.137:                                    ; preds = %if.end.133
  br i1 false, label %cond.true.138, label %cond.false.399

cond.true.138:                                    ; preds = %cond.true.137
  %111 = load i32, i32* %row_bytes, align 4
  %conv139 = trunc i32 %111 to i8
  %conv140 = sext i8 %conv139 to i32
  %add = add nsw i32 0, %conv140
  %mul = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul, 1
  %cmp141 = icmp slt i32 %sub, 0
  br i1 %cmp141, label %cond.true.143, label %cond.false.161

cond.true.143:                                    ; preds = %cond.true.138
  %112 = load i32, i32* %row_bytes, align 4
  %conv144 = trunc i32 %112 to i8
  %conv145 = sext i8 %conv144 to i32
  %add146 = add nsw i32 0, %conv145
  %mul147 = mul nsw i32 0, %add146
  %add148 = add nsw i32 %mul147, 0
  %neg = xor i32 %add148, -1
  %cmp149 = icmp eq i32 %neg, -1
  %conv150 = zext i1 %cmp149 to i32
  %sub151 = sub nsw i32 0, %conv150
  %113 = load i32, i32* %row_bytes, align 4
  %conv152 = trunc i32 %113 to i8
  %conv153 = sext i8 %conv152 to i32
  %add154 = add nsw i32 0, %conv153
  %mul155 = mul nsw i32 0, %add154
  %add156 = add nsw i32 %mul155, 1
  %shl = shl i32 %add156, 30
  %sub157 = sub nsw i32 %shl, 1
  %mul158 = mul nsw i32 %sub157, 2
  %add159 = add nsw i32 %mul158, 1
  %sub160 = sub nsw i32 %sub151, %add159
  br label %cond.end

cond.false.161:                                   ; preds = %cond.true.138
  %114 = load i32, i32* %row_bytes, align 4
  %conv162 = trunc i32 %114 to i8
  %conv163 = sext i8 %conv162 to i32
  %add164 = add nsw i32 0, %conv163
  %mul165 = mul nsw i32 0, %add164
  %add166 = add nsw i32 %mul165, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.161, %cond.true.143
  %cond167 = phi i32 [ %sub160, %cond.true.143 ], [ %add166, %cond.false.161 ]
  %cmp168 = icmp eq i32 %cond167, 0
  br i1 %cmp168, label %land.lhs.true.170, label %lor.lhs.false.175

land.lhs.true.170:                                ; preds = %cond.end
  %115 = load i32, i32* %row_bytes, align 4
  %conv171 = trunc i32 %115 to i8
  %conv172 = sext i8 %conv171 to i32
  %cmp173 = icmp slt i32 %conv172, 0
  br i1 %cmp173, label %cond.true.353, label %lor.lhs.false.175

lor.lhs.false.175:                                ; preds = %land.lhs.true.170, %cond.end
  br i1 false, label %cond.true.176, label %cond.false.254

cond.true.176:                                    ; preds = %lor.lhs.false.175
  %116 = load i32, i32* %row_bytes, align 4
  %conv177 = trunc i32 %116 to i8
  %conv178 = sext i8 %conv177 to i32
  %cmp179 = icmp slt i32 %conv178, 0
  br i1 %cmp179, label %cond.true.181, label %cond.false.211

cond.true.181:                                    ; preds = %cond.true.176
  %117 = load i32, i32* %row_bytes, align 4
  %conv182 = trunc i32 %117 to i8
  %conv183 = sext i8 %conv182 to i32
  %118 = load i32, i32* %row_bytes, align 4
  %conv184 = trunc i32 %118 to i8
  %conv185 = sext i8 %conv184 to i32
  %add186 = add nsw i32 0, %conv185
  %mul187 = mul nsw i32 0, %add186
  %sub188 = sub nsw i32 %mul187, 1
  %cmp189 = icmp slt i32 %sub188, 0
  br i1 %cmp189, label %cond.true.191, label %cond.false.201

cond.true.191:                                    ; preds = %cond.true.181
  %119 = load i32, i32* %row_bytes, align 4
  %conv192 = trunc i32 %119 to i8
  %conv193 = sext i8 %conv192 to i32
  %add194 = add nsw i32 0, %conv193
  %mul195 = mul nsw i32 0, %add194
  %add196 = add nsw i32 %mul195, 1
  %shl197 = shl i32 %add196, 30
  %sub198 = sub nsw i32 %shl197, 1
  %mul199 = mul nsw i32 %sub198, 2
  %add200 = add nsw i32 %mul199, 1
  br label %cond.end.207

cond.false.201:                                   ; preds = %cond.true.181
  %120 = load i32, i32* %row_bytes, align 4
  %conv202 = trunc i32 %120 to i8
  %conv203 = sext i8 %conv202 to i32
  %add204 = add nsw i32 0, %conv203
  %mul205 = mul nsw i32 0, %add204
  %sub206 = sub nsw i32 %mul205, 1
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.201, %cond.true.191
  %cond208 = phi i32 [ %add200, %cond.true.191 ], [ %sub206, %cond.false.201 ]
  %div = sdiv i32 %cond208, 1
  %cmp209 = icmp slt i32 %conv183, %div
  br i1 %cmp209, label %cond.true.353, label %lor.lhs.false.333

cond.false.211:                                   ; preds = %cond.true.176
  br i1 false, label %cond.true.212, label %cond.false.213

cond.true.212:                                    ; preds = %cond.false.211
  br i1 false, label %cond.true.353, label %lor.lhs.false.333

cond.false.213:                                   ; preds = %cond.false.211
  %121 = load i32, i32* %row_bytes, align 4
  %conv214 = trunc i32 %121 to i8
  %conv215 = sext i8 %conv214 to i32
  %add216 = add nsw i32 0, %conv215
  %mul217 = mul nsw i32 0, %add216
  %sub218 = sub nsw i32 %mul217, 1
  %cmp219 = icmp slt i32 %sub218, 0
  br i1 %cmp219, label %cond.true.221, label %cond.false.241

cond.true.221:                                    ; preds = %cond.false.213
  %122 = load i32, i32* %row_bytes, align 4
  %conv222 = trunc i32 %122 to i8
  %conv223 = sext i8 %conv222 to i32
  %add224 = add nsw i32 0, %conv223
  %mul225 = mul nsw i32 0, %add224
  %add226 = add nsw i32 %mul225, 0
  %neg227 = xor i32 %add226, -1
  %cmp228 = icmp eq i32 %neg227, -1
  %conv229 = zext i1 %cmp228 to i32
  %sub230 = sub nsw i32 0, %conv229
  %123 = load i32, i32* %row_bytes, align 4
  %conv231 = trunc i32 %123 to i8
  %conv232 = sext i8 %conv231 to i32
  %add233 = add nsw i32 0, %conv232
  %mul234 = mul nsw i32 0, %add233
  %add235 = add nsw i32 %mul234, 1
  %shl236 = shl i32 %add235, 30
  %sub237 = sub nsw i32 %shl236, 1
  %mul238 = mul nsw i32 %sub237, 2
  %add239 = add nsw i32 %mul238, 1
  %sub240 = sub nsw i32 %sub230, %add239
  br label %cond.end.247

cond.false.241:                                   ; preds = %cond.false.213
  %124 = load i32, i32* %row_bytes, align 4
  %conv242 = trunc i32 %124 to i8
  %conv243 = sext i8 %conv242 to i32
  %add244 = add nsw i32 0, %conv243
  %mul245 = mul nsw i32 0, %add244
  %add246 = add nsw i32 %mul245, 0
  br label %cond.end.247

cond.end.247:                                     ; preds = %cond.false.241, %cond.true.221
  %cond248 = phi i32 [ %sub240, %cond.true.221 ], [ %add246, %cond.false.241 ]
  %div249 = sdiv i32 %cond248, 1
  %125 = load i32, i32* %row_bytes, align 4
  %conv250 = trunc i32 %125 to i8
  %conv251 = sext i8 %conv250 to i32
  %cmp252 = icmp slt i32 %div249, %conv251
  br i1 %cmp252, label %cond.true.353, label %lor.lhs.false.333

cond.false.254:                                   ; preds = %lor.lhs.false.175
  br i1 false, label %cond.true.255, label %cond.false.256

cond.true.255:                                    ; preds = %cond.false.254
  br i1 false, label %cond.true.353, label %lor.lhs.false.333

cond.false.256:                                   ; preds = %cond.false.254
  %126 = load i32, i32* %row_bytes, align 4
  %conv257 = trunc i32 %126 to i8
  %conv258 = sext i8 %conv257 to i32
  %cmp259 = icmp slt i32 %conv258, 0
  br i1 %cmp259, label %cond.true.261, label %cond.false.302

cond.true.261:                                    ; preds = %cond.false.256
  %127 = load i32, i32* %row_bytes, align 4
  %conv262 = trunc i32 %127 to i8
  %conv263 = sext i8 %conv262 to i32
  %128 = load i32, i32* %row_bytes, align 4
  %conv264 = trunc i32 %128 to i8
  %conv265 = sext i8 %conv264 to i32
  %add266 = add nsw i32 0, %conv265
  %mul267 = mul nsw i32 0, %add266
  %sub268 = sub nsw i32 %mul267, 1
  %cmp269 = icmp slt i32 %sub268, 0
  br i1 %cmp269, label %cond.true.271, label %cond.false.291

cond.true.271:                                    ; preds = %cond.true.261
  %129 = load i32, i32* %row_bytes, align 4
  %conv272 = trunc i32 %129 to i8
  %conv273 = sext i8 %conv272 to i32
  %add274 = add nsw i32 0, %conv273
  %mul275 = mul nsw i32 0, %add274
  %add276 = add nsw i32 %mul275, 0
  %neg277 = xor i32 %add276, -1
  %cmp278 = icmp eq i32 %neg277, -1
  %conv279 = zext i1 %cmp278 to i32
  %sub280 = sub nsw i32 0, %conv279
  %130 = load i32, i32* %row_bytes, align 4
  %conv281 = trunc i32 %130 to i8
  %conv282 = sext i8 %conv281 to i32
  %add283 = add nsw i32 0, %conv282
  %mul284 = mul nsw i32 0, %add283
  %add285 = add nsw i32 %mul284, 1
  %shl286 = shl i32 %add285, 30
  %sub287 = sub nsw i32 %shl286, 1
  %mul288 = mul nsw i32 %sub287, 2
  %add289 = add nsw i32 %mul288, 1
  %sub290 = sub nsw i32 %sub280, %add289
  br label %cond.end.297

cond.false.291:                                   ; preds = %cond.true.261
  %131 = load i32, i32* %row_bytes, align 4
  %conv292 = trunc i32 %131 to i8
  %conv293 = sext i8 %conv292 to i32
  %add294 = add nsw i32 0, %conv293
  %mul295 = mul nsw i32 0, %add294
  %add296 = add nsw i32 %mul295, 0
  br label %cond.end.297

cond.end.297:                                     ; preds = %cond.false.291, %cond.true.271
  %cond298 = phi i32 [ %sub290, %cond.true.271 ], [ %add296, %cond.false.291 ]
  %div299 = sdiv i32 %cond298, 1
  %cmp300 = icmp slt i32 %conv263, %div299
  br i1 %cmp300, label %cond.true.353, label %lor.lhs.false.333

cond.false.302:                                   ; preds = %cond.false.256
  %132 = load i32, i32* %row_bytes, align 4
  %conv303 = trunc i32 %132 to i8
  %conv304 = sext i8 %conv303 to i32
  %add305 = add nsw i32 0, %conv304
  %mul306 = mul nsw i32 0, %add305
  %sub307 = sub nsw i32 %mul306, 1
  %cmp308 = icmp slt i32 %sub307, 0
  br i1 %cmp308, label %cond.true.310, label %cond.false.320

cond.true.310:                                    ; preds = %cond.false.302
  %133 = load i32, i32* %row_bytes, align 4
  %conv311 = trunc i32 %133 to i8
  %conv312 = sext i8 %conv311 to i32
  %add313 = add nsw i32 0, %conv312
  %mul314 = mul nsw i32 0, %add313
  %add315 = add nsw i32 %mul314, 1
  %shl316 = shl i32 %add315, 30
  %sub317 = sub nsw i32 %shl316, 1
  %mul318 = mul nsw i32 %sub317, 2
  %add319 = add nsw i32 %mul318, 1
  br label %cond.end.326

cond.false.320:                                   ; preds = %cond.false.302
  %134 = load i32, i32* %row_bytes, align 4
  %conv321 = trunc i32 %134 to i8
  %conv322 = sext i8 %conv321 to i32
  %add323 = add nsw i32 0, %conv322
  %mul324 = mul nsw i32 0, %add323
  %sub325 = sub nsw i32 %mul324, 1
  br label %cond.end.326

cond.end.326:                                     ; preds = %cond.false.320, %cond.true.310
  %cond327 = phi i32 [ %add319, %cond.true.310 ], [ %sub325, %cond.false.320 ]
  %div328 = sdiv i32 %cond327, 1
  %135 = load i32, i32* %row_bytes, align 4
  %conv329 = trunc i32 %135 to i8
  %conv330 = sext i8 %conv329 to i32
  %cmp331 = icmp slt i32 %div328, %conv330
  br i1 %cmp331, label %cond.true.353, label %lor.lhs.false.333

lor.lhs.false.333:                                ; preds = %cond.end.326, %cond.end.297, %cond.true.255, %cond.end.247, %cond.true.212, %cond.end.207
  %136 = load i32, i32* %row_bytes, align 4
  %conv334 = trunc i32 %136 to i8
  %conv335 = sext i8 %conv334 to i32
  %mul336 = mul nsw i32 %conv335, 1
  %mul337 = mul nsw i32 0, %mul336
  %sub338 = sub nsw i32 %mul337, 1
  %cmp339 = icmp slt i32 %sub338, 0
  br i1 %cmp339, label %land.lhs.true.341, label %lor.lhs.false.347

land.lhs.true.341:                                ; preds = %lor.lhs.false.333
  %137 = load i32, i32* %row_bytes, align 4
  %conv342 = trunc i32 %137 to i8
  %conv343 = sext i8 %conv342 to i32
  %mul344 = mul nsw i32 %conv343, 1
  %cmp345 = icmp slt i32 %mul344, -128
  br i1 %cmp345, label %cond.true.353, label %lor.lhs.false.347

lor.lhs.false.347:                                ; preds = %land.lhs.true.341, %lor.lhs.false.333
  %138 = load i32, i32* %row_bytes, align 4
  %conv348 = trunc i32 %138 to i8
  %conv349 = sext i8 %conv348 to i32
  %mul350 = mul nsw i32 %conv349, 1
  %cmp351 = icmp slt i32 127, %mul350
  br i1 %cmp351, label %cond.true.353, label %cond.false.376

cond.true.353:                                    ; preds = %lor.lhs.false.347, %land.lhs.true.341, %cond.end.326, %cond.end.297, %cond.true.255, %cond.end.247, %cond.true.212, %cond.end.207, %land.lhs.true.170
  %139 = load i32, i32* %row_bytes, align 4
  %conv354 = trunc i32 %139 to i8
  %conv355 = zext i8 %conv354 to i32
  %mul356 = mul nsw i32 %conv355, 1
  %cmp357 = icmp sle i32 %mul356, 127
  br i1 %cmp357, label %cond.true.359, label %cond.false.365

cond.true.359:                                    ; preds = %cond.true.353
  %140 = load i32, i32* %row_bytes, align 4
  %conv360 = trunc i32 %140 to i8
  %conv361 = zext i8 %conv360 to i32
  %mul362 = mul nsw i32 %conv361, 1
  %conv363 = trunc i32 %mul362 to i8
  %conv364 = sext i8 %conv363 to i32
  br label %cond.end.373

cond.false.365:                                   ; preds = %cond.true.353
  %141 = load i32, i32* %row_bytes, align 4
  %conv366 = trunc i32 %141 to i8
  %conv367 = zext i8 %conv366 to i32
  %mul368 = mul nsw i32 %conv367, 1
  %sub369 = sub nsw i32 %mul368, -128
  %conv370 = trunc i32 %sub369 to i8
  %conv371 = sext i8 %conv370 to i32
  %add372 = add nsw i32 %conv371, -128
  br label %cond.end.373

cond.end.373:                                     ; preds = %cond.false.365, %cond.true.359
  %cond374 = phi i32 [ %conv364, %cond.true.359 ], [ %add372, %cond.false.365 ]
  %conv375 = sext i32 %cond374 to i64
  store i64 %conv375, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.376:                                   ; preds = %lor.lhs.false.347
  %142 = load i32, i32* %row_bytes, align 4
  %conv377 = trunc i32 %142 to i8
  %conv378 = zext i8 %conv377 to i32
  %mul379 = mul nsw i32 %conv378, 1
  %cmp380 = icmp sle i32 %mul379, 127
  br i1 %cmp380, label %cond.true.382, label %cond.false.388

cond.true.382:                                    ; preds = %cond.false.376
  %143 = load i32, i32* %row_bytes, align 4
  %conv383 = trunc i32 %143 to i8
  %conv384 = zext i8 %conv383 to i32
  %mul385 = mul nsw i32 %conv384, 1
  %conv386 = trunc i32 %mul385 to i8
  %conv387 = sext i8 %conv386 to i32
  br label %cond.end.396

cond.false.388:                                   ; preds = %cond.false.376
  %144 = load i32, i32* %row_bytes, align 4
  %conv389 = trunc i32 %144 to i8
  %conv390 = zext i8 %conv389 to i32
  %mul391 = mul nsw i32 %conv390, 1
  %sub392 = sub nsw i32 %mul391, -128
  %conv393 = trunc i32 %sub392 to i8
  %conv394 = sext i8 %conv393 to i32
  %add395 = add nsw i32 %conv394, -128
  br label %cond.end.396

cond.end.396:                                     ; preds = %cond.false.388, %cond.true.382
  %cond397 = phi i32 [ %conv387, %cond.true.382 ], [ %add395, %cond.false.388 ]
  %conv398 = sext i32 %cond397 to i64
  store i64 %conv398, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.399:                                   ; preds = %cond.true.137
  %145 = load i32, i32* %row_bytes, align 4
  %conv400 = zext i32 %145 to i64
  %add401 = add i64 0, %conv400
  %mul402 = mul i64 0, %add401
  %sub403 = sub i64 %mul402, 1
  %cmp404 = icmp ult i64 %sub403, 0
  br i1 %cmp404, label %cond.true.406, label %cond.false.425

cond.true.406:                                    ; preds = %cond.false.399
  %146 = load i32, i32* %row_bytes, align 4
  %conv407 = zext i32 %146 to i64
  %add408 = add i64 0, %conv407
  %mul409 = mul i64 0, %add408
  %add410 = add i64 %mul409, 0
  %neg411 = xor i64 %add410, -1
  %cmp412 = icmp eq i64 %neg411, -1
  %conv413 = zext i1 %cmp412 to i32
  %sub414 = sub nsw i32 0, %conv413
  %conv415 = sext i32 %sub414 to i64
  %147 = load i32, i32* %row_bytes, align 4
  %conv416 = zext i32 %147 to i64
  %add417 = add i64 0, %conv416
  %mul418 = mul i64 0, %add417
  %add419 = add i64 %mul418, 1
  %shl420 = shl i64 %add419, 62
  %sub421 = sub i64 %shl420, 1
  %mul422 = mul i64 %sub421, 2
  %add423 = add i64 %mul422, 1
  %sub424 = sub i64 %conv415, %add423
  br label %cond.end.430

cond.false.425:                                   ; preds = %cond.false.399
  %148 = load i32, i32* %row_bytes, align 4
  %conv426 = zext i32 %148 to i64
  %add427 = add i64 0, %conv426
  %mul428 = mul i64 0, %add427
  %add429 = add i64 %mul428, 0
  br label %cond.end.430

cond.end.430:                                     ; preds = %cond.false.425, %cond.true.406
  %cond431 = phi i64 [ %sub424, %cond.true.406 ], [ %add429, %cond.false.425 ]
  %cmp432 = icmp eq i64 %cond431, 0
  br i1 %cmp432, label %land.lhs.true.434, label %lor.lhs.false.437

land.lhs.true.434:                                ; preds = %cond.end.430
  %149 = load i32, i32* %row_bytes, align 4
  %cmp435 = icmp ult i32 %149, 0
  br i1 %cmp435, label %cond.true.593, label %lor.lhs.false.437

lor.lhs.false.437:                                ; preds = %land.lhs.true.434, %cond.end.430
  br i1 false, label %cond.true.438, label %cond.false.507

cond.true.438:                                    ; preds = %lor.lhs.false.437
  %150 = load i32, i32* %row_bytes, align 4
  %cmp439 = icmp ult i32 %150, 0
  br i1 %cmp439, label %cond.true.441, label %cond.false.468

cond.true.441:                                    ; preds = %cond.true.438
  %151 = load i32, i32* %row_bytes, align 4
  %conv442 = zext i32 %151 to i64
  %152 = load i32, i32* %row_bytes, align 4
  %conv443 = zext i32 %152 to i64
  %add444 = add i64 0, %conv443
  %mul445 = mul i64 0, %add444
  %sub446 = sub i64 %mul445, 1
  %cmp447 = icmp ult i64 %sub446, 0
  br i1 %cmp447, label %cond.true.449, label %cond.false.458

cond.true.449:                                    ; preds = %cond.true.441
  %153 = load i32, i32* %row_bytes, align 4
  %conv450 = zext i32 %153 to i64
  %add451 = add i64 0, %conv450
  %mul452 = mul i64 0, %add451
  %add453 = add i64 %mul452, 1
  %shl454 = shl i64 %add453, 62
  %sub455 = sub i64 %shl454, 1
  %mul456 = mul i64 %sub455, 2
  %add457 = add i64 %mul456, 1
  br label %cond.end.463

cond.false.458:                                   ; preds = %cond.true.441
  %154 = load i32, i32* %row_bytes, align 4
  %conv459 = zext i32 %154 to i64
  %add460 = add i64 0, %conv459
  %mul461 = mul i64 0, %add460
  %sub462 = sub i64 %mul461, 1
  br label %cond.end.463

cond.end.463:                                     ; preds = %cond.false.458, %cond.true.449
  %cond464 = phi i64 [ %add457, %cond.true.449 ], [ %sub462, %cond.false.458 ]
  %div465 = udiv i64 %cond464, 1
  %cmp466 = icmp ult i64 %conv442, %div465
  br i1 %cmp466, label %cond.true.593, label %lor.lhs.false.576

cond.false.468:                                   ; preds = %cond.true.438
  br i1 false, label %cond.true.469, label %cond.false.470

cond.true.469:                                    ; preds = %cond.false.468
  br i1 false, label %cond.true.593, label %lor.lhs.false.576

cond.false.470:                                   ; preds = %cond.false.468
  %155 = load i32, i32* %row_bytes, align 4
  %conv471 = zext i32 %155 to i64
  %add472 = add i64 0, %conv471
  %mul473 = mul i64 0, %add472
  %sub474 = sub i64 %mul473, 1
  %cmp475 = icmp ult i64 %sub474, 0
  br i1 %cmp475, label %cond.true.477, label %cond.false.496

cond.true.477:                                    ; preds = %cond.false.470
  %156 = load i32, i32* %row_bytes, align 4
  %conv478 = zext i32 %156 to i64
  %add479 = add i64 0, %conv478
  %mul480 = mul i64 0, %add479
  %add481 = add i64 %mul480, 0
  %neg482 = xor i64 %add481, -1
  %cmp483 = icmp eq i64 %neg482, -1
  %conv484 = zext i1 %cmp483 to i32
  %sub485 = sub nsw i32 0, %conv484
  %conv486 = sext i32 %sub485 to i64
  %157 = load i32, i32* %row_bytes, align 4
  %conv487 = zext i32 %157 to i64
  %add488 = add i64 0, %conv487
  %mul489 = mul i64 0, %add488
  %add490 = add i64 %mul489, 1
  %shl491 = shl i64 %add490, 62
  %sub492 = sub i64 %shl491, 1
  %mul493 = mul i64 %sub492, 2
  %add494 = add i64 %mul493, 1
  %sub495 = sub i64 %conv486, %add494
  br label %cond.end.501

cond.false.496:                                   ; preds = %cond.false.470
  %158 = load i32, i32* %row_bytes, align 4
  %conv497 = zext i32 %158 to i64
  %add498 = add i64 0, %conv497
  %mul499 = mul i64 0, %add498
  %add500 = add i64 %mul499, 0
  br label %cond.end.501

cond.end.501:                                     ; preds = %cond.false.496, %cond.true.477
  %cond502 = phi i64 [ %sub495, %cond.true.477 ], [ %add500, %cond.false.496 ]
  %div503 = udiv i64 %cond502, 1
  %159 = load i32, i32* %row_bytes, align 4
  %conv504 = zext i32 %159 to i64
  %cmp505 = icmp ult i64 %div503, %conv504
  br i1 %cmp505, label %cond.true.593, label %lor.lhs.false.576

cond.false.507:                                   ; preds = %lor.lhs.false.437
  br i1 false, label %cond.true.508, label %cond.false.509

cond.true.508:                                    ; preds = %cond.false.507
  br i1 false, label %cond.true.593, label %lor.lhs.false.576

cond.false.509:                                   ; preds = %cond.false.507
  %160 = load i32, i32* %row_bytes, align 4
  %cmp510 = icmp ult i32 %160, 0
  br i1 %cmp510, label %cond.true.512, label %cond.false.549

cond.true.512:                                    ; preds = %cond.false.509
  %161 = load i32, i32* %row_bytes, align 4
  %conv513 = zext i32 %161 to i64
  %162 = load i32, i32* %row_bytes, align 4
  %conv514 = zext i32 %162 to i64
  %add515 = add i64 0, %conv514
  %mul516 = mul i64 0, %add515
  %sub517 = sub i64 %mul516, 1
  %cmp518 = icmp ult i64 %sub517, 0
  br i1 %cmp518, label %cond.true.520, label %cond.false.539

cond.true.520:                                    ; preds = %cond.true.512
  %163 = load i32, i32* %row_bytes, align 4
  %conv521 = zext i32 %163 to i64
  %add522 = add i64 0, %conv521
  %mul523 = mul i64 0, %add522
  %add524 = add i64 %mul523, 0
  %neg525 = xor i64 %add524, -1
  %cmp526 = icmp eq i64 %neg525, -1
  %conv527 = zext i1 %cmp526 to i32
  %sub528 = sub nsw i32 0, %conv527
  %conv529 = sext i32 %sub528 to i64
  %164 = load i32, i32* %row_bytes, align 4
  %conv530 = zext i32 %164 to i64
  %add531 = add i64 0, %conv530
  %mul532 = mul i64 0, %add531
  %add533 = add i64 %mul532, 1
  %shl534 = shl i64 %add533, 62
  %sub535 = sub i64 %shl534, 1
  %mul536 = mul i64 %sub535, 2
  %add537 = add i64 %mul536, 1
  %sub538 = sub i64 %conv529, %add537
  br label %cond.end.544

cond.false.539:                                   ; preds = %cond.true.512
  %165 = load i32, i32* %row_bytes, align 4
  %conv540 = zext i32 %165 to i64
  %add541 = add i64 0, %conv540
  %mul542 = mul i64 0, %add541
  %add543 = add i64 %mul542, 0
  br label %cond.end.544

cond.end.544:                                     ; preds = %cond.false.539, %cond.true.520
  %cond545 = phi i64 [ %sub538, %cond.true.520 ], [ %add543, %cond.false.539 ]
  %div546 = udiv i64 %cond545, 1
  %cmp547 = icmp ult i64 %conv513, %div546
  br i1 %cmp547, label %cond.true.593, label %lor.lhs.false.576

cond.false.549:                                   ; preds = %cond.false.509
  %166 = load i32, i32* %row_bytes, align 4
  %conv550 = zext i32 %166 to i64
  %add551 = add i64 0, %conv550
  %mul552 = mul i64 0, %add551
  %sub553 = sub i64 %mul552, 1
  %cmp554 = icmp ult i64 %sub553, 0
  br i1 %cmp554, label %cond.true.556, label %cond.false.565

cond.true.556:                                    ; preds = %cond.false.549
  %167 = load i32, i32* %row_bytes, align 4
  %conv557 = zext i32 %167 to i64
  %add558 = add i64 0, %conv557
  %mul559 = mul i64 0, %add558
  %add560 = add i64 %mul559, 1
  %shl561 = shl i64 %add560, 62
  %sub562 = sub i64 %shl561, 1
  %mul563 = mul i64 %sub562, 2
  %add564 = add i64 %mul563, 1
  br label %cond.end.570

cond.false.565:                                   ; preds = %cond.false.549
  %168 = load i32, i32* %row_bytes, align 4
  %conv566 = zext i32 %168 to i64
  %add567 = add i64 0, %conv566
  %mul568 = mul i64 0, %add567
  %sub569 = sub i64 %mul568, 1
  br label %cond.end.570

cond.end.570:                                     ; preds = %cond.false.565, %cond.true.556
  %cond571 = phi i64 [ %add564, %cond.true.556 ], [ %sub569, %cond.false.565 ]
  %div572 = udiv i64 %cond571, 1
  %169 = load i32, i32* %row_bytes, align 4
  %conv573 = zext i32 %169 to i64
  %cmp574 = icmp ult i64 %div572, %conv573
  br i1 %cmp574, label %cond.true.593, label %lor.lhs.false.576

lor.lhs.false.576:                                ; preds = %cond.end.570, %cond.end.544, %cond.true.508, %cond.end.501, %cond.true.469, %cond.end.463
  %170 = load i32, i32* %row_bytes, align 4
  %conv577 = zext i32 %170 to i64
  %mul578 = mul i64 %conv577, 1
  %mul579 = mul i64 0, %mul578
  %sub580 = sub i64 %mul579, 1
  %cmp581 = icmp ult i64 %sub580, 0
  br i1 %cmp581, label %land.lhs.true.583, label %lor.lhs.false.588

land.lhs.true.583:                                ; preds = %lor.lhs.false.576
  %171 = load i32, i32* %row_bytes, align 4
  %conv584 = zext i32 %171 to i64
  %mul585 = mul i64 %conv584, 1
  %cmp586 = icmp ult i64 %mul585, -128
  br i1 %cmp586, label %cond.true.593, label %lor.lhs.false.588

lor.lhs.false.588:                                ; preds = %land.lhs.true.583, %lor.lhs.false.576
  %172 = load i32, i32* %row_bytes, align 4
  %conv589 = zext i32 %172 to i64
  %mul590 = mul i64 %conv589, 1
  %cmp591 = icmp ult i64 127, %mul590
  br i1 %cmp591, label %cond.true.593, label %cond.false.616

cond.true.593:                                    ; preds = %lor.lhs.false.588, %land.lhs.true.583, %cond.end.570, %cond.end.544, %cond.true.508, %cond.end.501, %cond.true.469, %cond.end.463, %land.lhs.true.434
  %173 = load i32, i32* %row_bytes, align 4
  %conv594 = trunc i32 %173 to i8
  %conv595 = zext i8 %conv594 to i32
  %mul596 = mul nsw i32 %conv595, 1
  %cmp597 = icmp sle i32 %mul596, 127
  br i1 %cmp597, label %cond.true.599, label %cond.false.605

cond.true.599:                                    ; preds = %cond.true.593
  %174 = load i32, i32* %row_bytes, align 4
  %conv600 = trunc i32 %174 to i8
  %conv601 = zext i8 %conv600 to i32
  %mul602 = mul nsw i32 %conv601, 1
  %conv603 = trunc i32 %mul602 to i8
  %conv604 = sext i8 %conv603 to i32
  br label %cond.end.613

cond.false.605:                                   ; preds = %cond.true.593
  %175 = load i32, i32* %row_bytes, align 4
  %conv606 = trunc i32 %175 to i8
  %conv607 = zext i8 %conv606 to i32
  %mul608 = mul nsw i32 %conv607, 1
  %sub609 = sub nsw i32 %mul608, -128
  %conv610 = trunc i32 %sub609 to i8
  %conv611 = sext i8 %conv610 to i32
  %add612 = add nsw i32 %conv611, -128
  br label %cond.end.613

cond.end.613:                                     ; preds = %cond.false.605, %cond.true.599
  %cond614 = phi i32 [ %conv604, %cond.true.599 ], [ %add612, %cond.false.605 ]
  %conv615 = sext i32 %cond614 to i64
  store i64 %conv615, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.616:                                   ; preds = %lor.lhs.false.588
  %176 = load i32, i32* %row_bytes, align 4
  %conv617 = trunc i32 %176 to i8
  %conv618 = zext i8 %conv617 to i32
  %mul619 = mul nsw i32 %conv618, 1
  %cmp620 = icmp sle i32 %mul619, 127
  br i1 %cmp620, label %cond.true.622, label %cond.false.628

cond.true.622:                                    ; preds = %cond.false.616
  %177 = load i32, i32* %row_bytes, align 4
  %conv623 = trunc i32 %177 to i8
  %conv624 = zext i8 %conv623 to i32
  %mul625 = mul nsw i32 %conv624, 1
  %conv626 = trunc i32 %mul625 to i8
  %conv627 = sext i8 %conv626 to i32
  br label %cond.end.636

cond.false.628:                                   ; preds = %cond.false.616
  %178 = load i32, i32* %row_bytes, align 4
  %conv629 = trunc i32 %178 to i8
  %conv630 = zext i8 %conv629 to i32
  %mul631 = mul nsw i32 %conv630, 1
  %sub632 = sub nsw i32 %mul631, -128
  %conv633 = trunc i32 %sub632 to i8
  %conv634 = sext i8 %conv633 to i32
  %add635 = add nsw i32 %conv634, -128
  br label %cond.end.636

cond.end.636:                                     ; preds = %cond.false.628, %cond.true.622
  %cond637 = phi i32 [ %conv627, %cond.true.622 ], [ %add635, %cond.false.628 ]
  %conv638 = sext i32 %cond637 to i64
  store i64 %conv638, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.639:                                   ; preds = %if.end.133
  br i1 false, label %cond.true.640, label %cond.false.1149

cond.true.640:                                    ; preds = %cond.false.639
  br i1 false, label %cond.true.641, label %cond.false.909

cond.true.641:                                    ; preds = %cond.true.640
  %179 = load i32, i32* %row_bytes, align 4
  %conv642 = trunc i32 %179 to i16
  %conv643 = sext i16 %conv642 to i32
  %add644 = add nsw i32 0, %conv643
  %mul645 = mul nsw i32 0, %add644
  %sub646 = sub nsw i32 %mul645, 1
  %cmp647 = icmp slt i32 %sub646, 0
  br i1 %cmp647, label %cond.true.649, label %cond.false.669

cond.true.649:                                    ; preds = %cond.true.641
  %180 = load i32, i32* %row_bytes, align 4
  %conv650 = trunc i32 %180 to i16
  %conv651 = sext i16 %conv650 to i32
  %add652 = add nsw i32 0, %conv651
  %mul653 = mul nsw i32 0, %add652
  %add654 = add nsw i32 %mul653, 0
  %neg655 = xor i32 %add654, -1
  %cmp656 = icmp eq i32 %neg655, -1
  %conv657 = zext i1 %cmp656 to i32
  %sub658 = sub nsw i32 0, %conv657
  %181 = load i32, i32* %row_bytes, align 4
  %conv659 = trunc i32 %181 to i16
  %conv660 = sext i16 %conv659 to i32
  %add661 = add nsw i32 0, %conv660
  %mul662 = mul nsw i32 0, %add661
  %add663 = add nsw i32 %mul662, 1
  %shl664 = shl i32 %add663, 30
  %sub665 = sub nsw i32 %shl664, 1
  %mul666 = mul nsw i32 %sub665, 2
  %add667 = add nsw i32 %mul666, 1
  %sub668 = sub nsw i32 %sub658, %add667
  br label %cond.end.675

cond.false.669:                                   ; preds = %cond.true.641
  %182 = load i32, i32* %row_bytes, align 4
  %conv670 = trunc i32 %182 to i16
  %conv671 = sext i16 %conv670 to i32
  %add672 = add nsw i32 0, %conv671
  %mul673 = mul nsw i32 0, %add672
  %add674 = add nsw i32 %mul673, 0
  br label %cond.end.675

cond.end.675:                                     ; preds = %cond.false.669, %cond.true.649
  %cond676 = phi i32 [ %sub668, %cond.true.649 ], [ %add674, %cond.false.669 ]
  %cmp677 = icmp eq i32 %cond676, 0
  br i1 %cmp677, label %land.lhs.true.679, label %lor.lhs.false.684

land.lhs.true.679:                                ; preds = %cond.end.675
  %183 = load i32, i32* %row_bytes, align 4
  %conv680 = trunc i32 %183 to i16
  %conv681 = sext i16 %conv680 to i32
  %cmp682 = icmp slt i32 %conv681, 0
  br i1 %cmp682, label %cond.true.863, label %lor.lhs.false.684

lor.lhs.false.684:                                ; preds = %land.lhs.true.679, %cond.end.675
  br i1 false, label %cond.true.685, label %cond.false.764

cond.true.685:                                    ; preds = %lor.lhs.false.684
  %184 = load i32, i32* %row_bytes, align 4
  %conv686 = trunc i32 %184 to i16
  %conv687 = sext i16 %conv686 to i32
  %cmp688 = icmp slt i32 %conv687, 0
  br i1 %cmp688, label %cond.true.690, label %cond.false.721

cond.true.690:                                    ; preds = %cond.true.685
  %185 = load i32, i32* %row_bytes, align 4
  %conv691 = trunc i32 %185 to i16
  %conv692 = sext i16 %conv691 to i32
  %186 = load i32, i32* %row_bytes, align 4
  %conv693 = trunc i32 %186 to i16
  %conv694 = sext i16 %conv693 to i32
  %add695 = add nsw i32 0, %conv694
  %mul696 = mul nsw i32 0, %add695
  %sub697 = sub nsw i32 %mul696, 1
  %cmp698 = icmp slt i32 %sub697, 0
  br i1 %cmp698, label %cond.true.700, label %cond.false.710

cond.true.700:                                    ; preds = %cond.true.690
  %187 = load i32, i32* %row_bytes, align 4
  %conv701 = trunc i32 %187 to i16
  %conv702 = sext i16 %conv701 to i32
  %add703 = add nsw i32 0, %conv702
  %mul704 = mul nsw i32 0, %add703
  %add705 = add nsw i32 %mul704, 1
  %shl706 = shl i32 %add705, 30
  %sub707 = sub nsw i32 %shl706, 1
  %mul708 = mul nsw i32 %sub707, 2
  %add709 = add nsw i32 %mul708, 1
  br label %cond.end.716

cond.false.710:                                   ; preds = %cond.true.690
  %188 = load i32, i32* %row_bytes, align 4
  %conv711 = trunc i32 %188 to i16
  %conv712 = sext i16 %conv711 to i32
  %add713 = add nsw i32 0, %conv712
  %mul714 = mul nsw i32 0, %add713
  %sub715 = sub nsw i32 %mul714, 1
  br label %cond.end.716

cond.end.716:                                     ; preds = %cond.false.710, %cond.true.700
  %cond717 = phi i32 [ %add709, %cond.true.700 ], [ %sub715, %cond.false.710 ]
  %div718 = sdiv i32 %cond717, 1
  %cmp719 = icmp slt i32 %conv692, %div718
  br i1 %cmp719, label %cond.true.863, label %lor.lhs.false.843

cond.false.721:                                   ; preds = %cond.true.685
  br i1 false, label %cond.true.722, label %cond.false.723

cond.true.722:                                    ; preds = %cond.false.721
  br i1 false, label %cond.true.863, label %lor.lhs.false.843

cond.false.723:                                   ; preds = %cond.false.721
  %189 = load i32, i32* %row_bytes, align 4
  %conv724 = trunc i32 %189 to i16
  %conv725 = sext i16 %conv724 to i32
  %add726 = add nsw i32 0, %conv725
  %mul727 = mul nsw i32 0, %add726
  %sub728 = sub nsw i32 %mul727, 1
  %cmp729 = icmp slt i32 %sub728, 0
  br i1 %cmp729, label %cond.true.731, label %cond.false.751

cond.true.731:                                    ; preds = %cond.false.723
  %190 = load i32, i32* %row_bytes, align 4
  %conv732 = trunc i32 %190 to i16
  %conv733 = sext i16 %conv732 to i32
  %add734 = add nsw i32 0, %conv733
  %mul735 = mul nsw i32 0, %add734
  %add736 = add nsw i32 %mul735, 0
  %neg737 = xor i32 %add736, -1
  %cmp738 = icmp eq i32 %neg737, -1
  %conv739 = zext i1 %cmp738 to i32
  %sub740 = sub nsw i32 0, %conv739
  %191 = load i32, i32* %row_bytes, align 4
  %conv741 = trunc i32 %191 to i16
  %conv742 = sext i16 %conv741 to i32
  %add743 = add nsw i32 0, %conv742
  %mul744 = mul nsw i32 0, %add743
  %add745 = add nsw i32 %mul744, 1
  %shl746 = shl i32 %add745, 30
  %sub747 = sub nsw i32 %shl746, 1
  %mul748 = mul nsw i32 %sub747, 2
  %add749 = add nsw i32 %mul748, 1
  %sub750 = sub nsw i32 %sub740, %add749
  br label %cond.end.757

cond.false.751:                                   ; preds = %cond.false.723
  %192 = load i32, i32* %row_bytes, align 4
  %conv752 = trunc i32 %192 to i16
  %conv753 = sext i16 %conv752 to i32
  %add754 = add nsw i32 0, %conv753
  %mul755 = mul nsw i32 0, %add754
  %add756 = add nsw i32 %mul755, 0
  br label %cond.end.757

cond.end.757:                                     ; preds = %cond.false.751, %cond.true.731
  %cond758 = phi i32 [ %sub750, %cond.true.731 ], [ %add756, %cond.false.751 ]
  %div759 = sdiv i32 %cond758, 1
  %193 = load i32, i32* %row_bytes, align 4
  %conv760 = trunc i32 %193 to i16
  %conv761 = sext i16 %conv760 to i32
  %cmp762 = icmp slt i32 %div759, %conv761
  br i1 %cmp762, label %cond.true.863, label %lor.lhs.false.843

cond.false.764:                                   ; preds = %lor.lhs.false.684
  br i1 false, label %cond.true.765, label %cond.false.766

cond.true.765:                                    ; preds = %cond.false.764
  br i1 false, label %cond.true.863, label %lor.lhs.false.843

cond.false.766:                                   ; preds = %cond.false.764
  %194 = load i32, i32* %row_bytes, align 4
  %conv767 = trunc i32 %194 to i16
  %conv768 = sext i16 %conv767 to i32
  %cmp769 = icmp slt i32 %conv768, 0
  br i1 %cmp769, label %cond.true.771, label %cond.false.812

cond.true.771:                                    ; preds = %cond.false.766
  %195 = load i32, i32* %row_bytes, align 4
  %conv772 = trunc i32 %195 to i16
  %conv773 = sext i16 %conv772 to i32
  %196 = load i32, i32* %row_bytes, align 4
  %conv774 = trunc i32 %196 to i16
  %conv775 = sext i16 %conv774 to i32
  %add776 = add nsw i32 0, %conv775
  %mul777 = mul nsw i32 0, %add776
  %sub778 = sub nsw i32 %mul777, 1
  %cmp779 = icmp slt i32 %sub778, 0
  br i1 %cmp779, label %cond.true.781, label %cond.false.801

cond.true.781:                                    ; preds = %cond.true.771
  %197 = load i32, i32* %row_bytes, align 4
  %conv782 = trunc i32 %197 to i16
  %conv783 = sext i16 %conv782 to i32
  %add784 = add nsw i32 0, %conv783
  %mul785 = mul nsw i32 0, %add784
  %add786 = add nsw i32 %mul785, 0
  %neg787 = xor i32 %add786, -1
  %cmp788 = icmp eq i32 %neg787, -1
  %conv789 = zext i1 %cmp788 to i32
  %sub790 = sub nsw i32 0, %conv789
  %198 = load i32, i32* %row_bytes, align 4
  %conv791 = trunc i32 %198 to i16
  %conv792 = sext i16 %conv791 to i32
  %add793 = add nsw i32 0, %conv792
  %mul794 = mul nsw i32 0, %add793
  %add795 = add nsw i32 %mul794, 1
  %shl796 = shl i32 %add795, 30
  %sub797 = sub nsw i32 %shl796, 1
  %mul798 = mul nsw i32 %sub797, 2
  %add799 = add nsw i32 %mul798, 1
  %sub800 = sub nsw i32 %sub790, %add799
  br label %cond.end.807

cond.false.801:                                   ; preds = %cond.true.771
  %199 = load i32, i32* %row_bytes, align 4
  %conv802 = trunc i32 %199 to i16
  %conv803 = sext i16 %conv802 to i32
  %add804 = add nsw i32 0, %conv803
  %mul805 = mul nsw i32 0, %add804
  %add806 = add nsw i32 %mul805, 0
  br label %cond.end.807

cond.end.807:                                     ; preds = %cond.false.801, %cond.true.781
  %cond808 = phi i32 [ %sub800, %cond.true.781 ], [ %add806, %cond.false.801 ]
  %div809 = sdiv i32 %cond808, 1
  %cmp810 = icmp slt i32 %conv773, %div809
  br i1 %cmp810, label %cond.true.863, label %lor.lhs.false.843

cond.false.812:                                   ; preds = %cond.false.766
  %200 = load i32, i32* %row_bytes, align 4
  %conv813 = trunc i32 %200 to i16
  %conv814 = sext i16 %conv813 to i32
  %add815 = add nsw i32 0, %conv814
  %mul816 = mul nsw i32 0, %add815
  %sub817 = sub nsw i32 %mul816, 1
  %cmp818 = icmp slt i32 %sub817, 0
  br i1 %cmp818, label %cond.true.820, label %cond.false.830

cond.true.820:                                    ; preds = %cond.false.812
  %201 = load i32, i32* %row_bytes, align 4
  %conv821 = trunc i32 %201 to i16
  %conv822 = sext i16 %conv821 to i32
  %add823 = add nsw i32 0, %conv822
  %mul824 = mul nsw i32 0, %add823
  %add825 = add nsw i32 %mul824, 1
  %shl826 = shl i32 %add825, 30
  %sub827 = sub nsw i32 %shl826, 1
  %mul828 = mul nsw i32 %sub827, 2
  %add829 = add nsw i32 %mul828, 1
  br label %cond.end.836

cond.false.830:                                   ; preds = %cond.false.812
  %202 = load i32, i32* %row_bytes, align 4
  %conv831 = trunc i32 %202 to i16
  %conv832 = sext i16 %conv831 to i32
  %add833 = add nsw i32 0, %conv832
  %mul834 = mul nsw i32 0, %add833
  %sub835 = sub nsw i32 %mul834, 1
  br label %cond.end.836

cond.end.836:                                     ; preds = %cond.false.830, %cond.true.820
  %cond837 = phi i32 [ %add829, %cond.true.820 ], [ %sub835, %cond.false.830 ]
  %div838 = sdiv i32 %cond837, 1
  %203 = load i32, i32* %row_bytes, align 4
  %conv839 = trunc i32 %203 to i16
  %conv840 = sext i16 %conv839 to i32
  %cmp841 = icmp slt i32 %div838, %conv840
  br i1 %cmp841, label %cond.true.863, label %lor.lhs.false.843

lor.lhs.false.843:                                ; preds = %cond.end.836, %cond.end.807, %cond.true.765, %cond.end.757, %cond.true.722, %cond.end.716
  %204 = load i32, i32* %row_bytes, align 4
  %conv844 = trunc i32 %204 to i16
  %conv845 = sext i16 %conv844 to i32
  %mul846 = mul nsw i32 %conv845, 1
  %mul847 = mul nsw i32 0, %mul846
  %sub848 = sub nsw i32 %mul847, 1
  %cmp849 = icmp slt i32 %sub848, 0
  br i1 %cmp849, label %land.lhs.true.851, label %lor.lhs.false.857

land.lhs.true.851:                                ; preds = %lor.lhs.false.843
  %205 = load i32, i32* %row_bytes, align 4
  %conv852 = trunc i32 %205 to i16
  %conv853 = sext i16 %conv852 to i32
  %mul854 = mul nsw i32 %conv853, 1
  %cmp855 = icmp slt i32 %mul854, -32768
  br i1 %cmp855, label %cond.true.863, label %lor.lhs.false.857

lor.lhs.false.857:                                ; preds = %land.lhs.true.851, %lor.lhs.false.843
  %206 = load i32, i32* %row_bytes, align 4
  %conv858 = trunc i32 %206 to i16
  %conv859 = sext i16 %conv858 to i32
  %mul860 = mul nsw i32 %conv859, 1
  %cmp861 = icmp slt i32 32767, %mul860
  br i1 %cmp861, label %cond.true.863, label %cond.false.886

cond.true.863:                                    ; preds = %lor.lhs.false.857, %land.lhs.true.851, %cond.end.836, %cond.end.807, %cond.true.765, %cond.end.757, %cond.true.722, %cond.end.716, %land.lhs.true.679
  %207 = load i32, i32* %row_bytes, align 4
  %conv864 = trunc i32 %207 to i16
  %conv865 = zext i16 %conv864 to i32
  %mul866 = mul nsw i32 %conv865, 1
  %cmp867 = icmp sle i32 %mul866, 32767
  br i1 %cmp867, label %cond.true.869, label %cond.false.875

cond.true.869:                                    ; preds = %cond.true.863
  %208 = load i32, i32* %row_bytes, align 4
  %conv870 = trunc i32 %208 to i16
  %conv871 = zext i16 %conv870 to i32
  %mul872 = mul nsw i32 %conv871, 1
  %conv873 = trunc i32 %mul872 to i16
  %conv874 = sext i16 %conv873 to i32
  br label %cond.end.883

cond.false.875:                                   ; preds = %cond.true.863
  %209 = load i32, i32* %row_bytes, align 4
  %conv876 = trunc i32 %209 to i16
  %conv877 = zext i16 %conv876 to i32
  %mul878 = mul nsw i32 %conv877, 1
  %sub879 = sub nsw i32 %mul878, -32768
  %conv880 = trunc i32 %sub879 to i16
  %conv881 = sext i16 %conv880 to i32
  %add882 = add nsw i32 %conv881, -32768
  br label %cond.end.883

cond.end.883:                                     ; preds = %cond.false.875, %cond.true.869
  %cond884 = phi i32 [ %conv874, %cond.true.869 ], [ %add882, %cond.false.875 ]
  %conv885 = sext i32 %cond884 to i64
  store i64 %conv885, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.886:                                   ; preds = %lor.lhs.false.857
  %210 = load i32, i32* %row_bytes, align 4
  %conv887 = trunc i32 %210 to i16
  %conv888 = zext i16 %conv887 to i32
  %mul889 = mul nsw i32 %conv888, 1
  %cmp890 = icmp sle i32 %mul889, 32767
  br i1 %cmp890, label %cond.true.892, label %cond.false.898

cond.true.892:                                    ; preds = %cond.false.886
  %211 = load i32, i32* %row_bytes, align 4
  %conv893 = trunc i32 %211 to i16
  %conv894 = zext i16 %conv893 to i32
  %mul895 = mul nsw i32 %conv894, 1
  %conv896 = trunc i32 %mul895 to i16
  %conv897 = sext i16 %conv896 to i32
  br label %cond.end.906

cond.false.898:                                   ; preds = %cond.false.886
  %212 = load i32, i32* %row_bytes, align 4
  %conv899 = trunc i32 %212 to i16
  %conv900 = zext i16 %conv899 to i32
  %mul901 = mul nsw i32 %conv900, 1
  %sub902 = sub nsw i32 %mul901, -32768
  %conv903 = trunc i32 %sub902 to i16
  %conv904 = sext i16 %conv903 to i32
  %add905 = add nsw i32 %conv904, -32768
  br label %cond.end.906

cond.end.906:                                     ; preds = %cond.false.898, %cond.true.892
  %cond907 = phi i32 [ %conv897, %cond.true.892 ], [ %add905, %cond.false.898 ]
  %conv908 = sext i32 %cond907 to i64
  store i64 %conv908, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.909:                                   ; preds = %cond.true.640
  %213 = load i32, i32* %row_bytes, align 4
  %conv910 = zext i32 %213 to i64
  %add911 = add i64 0, %conv910
  %mul912 = mul i64 0, %add911
  %sub913 = sub i64 %mul912, 1
  %cmp914 = icmp ult i64 %sub913, 0
  br i1 %cmp914, label %cond.true.916, label %cond.false.935

cond.true.916:                                    ; preds = %cond.false.909
  %214 = load i32, i32* %row_bytes, align 4
  %conv917 = zext i32 %214 to i64
  %add918 = add i64 0, %conv917
  %mul919 = mul i64 0, %add918
  %add920 = add i64 %mul919, 0
  %neg921 = xor i64 %add920, -1
  %cmp922 = icmp eq i64 %neg921, -1
  %conv923 = zext i1 %cmp922 to i32
  %sub924 = sub nsw i32 0, %conv923
  %conv925 = sext i32 %sub924 to i64
  %215 = load i32, i32* %row_bytes, align 4
  %conv926 = zext i32 %215 to i64
  %add927 = add i64 0, %conv926
  %mul928 = mul i64 0, %add927
  %add929 = add i64 %mul928, 1
  %shl930 = shl i64 %add929, 62
  %sub931 = sub i64 %shl930, 1
  %mul932 = mul i64 %sub931, 2
  %add933 = add i64 %mul932, 1
  %sub934 = sub i64 %conv925, %add933
  br label %cond.end.940

cond.false.935:                                   ; preds = %cond.false.909
  %216 = load i32, i32* %row_bytes, align 4
  %conv936 = zext i32 %216 to i64
  %add937 = add i64 0, %conv936
  %mul938 = mul i64 0, %add937
  %add939 = add i64 %mul938, 0
  br label %cond.end.940

cond.end.940:                                     ; preds = %cond.false.935, %cond.true.916
  %cond941 = phi i64 [ %sub934, %cond.true.916 ], [ %add939, %cond.false.935 ]
  %cmp942 = icmp eq i64 %cond941, 0
  br i1 %cmp942, label %land.lhs.true.944, label %lor.lhs.false.947

land.lhs.true.944:                                ; preds = %cond.end.940
  %217 = load i32, i32* %row_bytes, align 4
  %cmp945 = icmp ult i32 %217, 0
  br i1 %cmp945, label %cond.true.1103, label %lor.lhs.false.947

lor.lhs.false.947:                                ; preds = %land.lhs.true.944, %cond.end.940
  br i1 false, label %cond.true.948, label %cond.false.1017

cond.true.948:                                    ; preds = %lor.lhs.false.947
  %218 = load i32, i32* %row_bytes, align 4
  %cmp949 = icmp ult i32 %218, 0
  br i1 %cmp949, label %cond.true.951, label %cond.false.978

cond.true.951:                                    ; preds = %cond.true.948
  %219 = load i32, i32* %row_bytes, align 4
  %conv952 = zext i32 %219 to i64
  %220 = load i32, i32* %row_bytes, align 4
  %conv953 = zext i32 %220 to i64
  %add954 = add i64 0, %conv953
  %mul955 = mul i64 0, %add954
  %sub956 = sub i64 %mul955, 1
  %cmp957 = icmp ult i64 %sub956, 0
  br i1 %cmp957, label %cond.true.959, label %cond.false.968

cond.true.959:                                    ; preds = %cond.true.951
  %221 = load i32, i32* %row_bytes, align 4
  %conv960 = zext i32 %221 to i64
  %add961 = add i64 0, %conv960
  %mul962 = mul i64 0, %add961
  %add963 = add i64 %mul962, 1
  %shl964 = shl i64 %add963, 62
  %sub965 = sub i64 %shl964, 1
  %mul966 = mul i64 %sub965, 2
  %add967 = add i64 %mul966, 1
  br label %cond.end.973

cond.false.968:                                   ; preds = %cond.true.951
  %222 = load i32, i32* %row_bytes, align 4
  %conv969 = zext i32 %222 to i64
  %add970 = add i64 0, %conv969
  %mul971 = mul i64 0, %add970
  %sub972 = sub i64 %mul971, 1
  br label %cond.end.973

cond.end.973:                                     ; preds = %cond.false.968, %cond.true.959
  %cond974 = phi i64 [ %add967, %cond.true.959 ], [ %sub972, %cond.false.968 ]
  %div975 = udiv i64 %cond974, 1
  %cmp976 = icmp ult i64 %conv952, %div975
  br i1 %cmp976, label %cond.true.1103, label %lor.lhs.false.1086

cond.false.978:                                   ; preds = %cond.true.948
  br i1 false, label %cond.true.979, label %cond.false.980

cond.true.979:                                    ; preds = %cond.false.978
  br i1 false, label %cond.true.1103, label %lor.lhs.false.1086

cond.false.980:                                   ; preds = %cond.false.978
  %223 = load i32, i32* %row_bytes, align 4
  %conv981 = zext i32 %223 to i64
  %add982 = add i64 0, %conv981
  %mul983 = mul i64 0, %add982
  %sub984 = sub i64 %mul983, 1
  %cmp985 = icmp ult i64 %sub984, 0
  br i1 %cmp985, label %cond.true.987, label %cond.false.1006

cond.true.987:                                    ; preds = %cond.false.980
  %224 = load i32, i32* %row_bytes, align 4
  %conv988 = zext i32 %224 to i64
  %add989 = add i64 0, %conv988
  %mul990 = mul i64 0, %add989
  %add991 = add i64 %mul990, 0
  %neg992 = xor i64 %add991, -1
  %cmp993 = icmp eq i64 %neg992, -1
  %conv994 = zext i1 %cmp993 to i32
  %sub995 = sub nsw i32 0, %conv994
  %conv996 = sext i32 %sub995 to i64
  %225 = load i32, i32* %row_bytes, align 4
  %conv997 = zext i32 %225 to i64
  %add998 = add i64 0, %conv997
  %mul999 = mul i64 0, %add998
  %add1000 = add i64 %mul999, 1
  %shl1001 = shl i64 %add1000, 62
  %sub1002 = sub i64 %shl1001, 1
  %mul1003 = mul i64 %sub1002, 2
  %add1004 = add i64 %mul1003, 1
  %sub1005 = sub i64 %conv996, %add1004
  br label %cond.end.1011

cond.false.1006:                                  ; preds = %cond.false.980
  %226 = load i32, i32* %row_bytes, align 4
  %conv1007 = zext i32 %226 to i64
  %add1008 = add i64 0, %conv1007
  %mul1009 = mul i64 0, %add1008
  %add1010 = add i64 %mul1009, 0
  br label %cond.end.1011

cond.end.1011:                                    ; preds = %cond.false.1006, %cond.true.987
  %cond1012 = phi i64 [ %sub1005, %cond.true.987 ], [ %add1010, %cond.false.1006 ]
  %div1013 = udiv i64 %cond1012, 1
  %227 = load i32, i32* %row_bytes, align 4
  %conv1014 = zext i32 %227 to i64
  %cmp1015 = icmp ult i64 %div1013, %conv1014
  br i1 %cmp1015, label %cond.true.1103, label %lor.lhs.false.1086

cond.false.1017:                                  ; preds = %lor.lhs.false.947
  br i1 false, label %cond.true.1018, label %cond.false.1019

cond.true.1018:                                   ; preds = %cond.false.1017
  br i1 false, label %cond.true.1103, label %lor.lhs.false.1086

cond.false.1019:                                  ; preds = %cond.false.1017
  %228 = load i32, i32* %row_bytes, align 4
  %cmp1020 = icmp ult i32 %228, 0
  br i1 %cmp1020, label %cond.true.1022, label %cond.false.1059

cond.true.1022:                                   ; preds = %cond.false.1019
  %229 = load i32, i32* %row_bytes, align 4
  %conv1023 = zext i32 %229 to i64
  %230 = load i32, i32* %row_bytes, align 4
  %conv1024 = zext i32 %230 to i64
  %add1025 = add i64 0, %conv1024
  %mul1026 = mul i64 0, %add1025
  %sub1027 = sub i64 %mul1026, 1
  %cmp1028 = icmp ult i64 %sub1027, 0
  br i1 %cmp1028, label %cond.true.1030, label %cond.false.1049

cond.true.1030:                                   ; preds = %cond.true.1022
  %231 = load i32, i32* %row_bytes, align 4
  %conv1031 = zext i32 %231 to i64
  %add1032 = add i64 0, %conv1031
  %mul1033 = mul i64 0, %add1032
  %add1034 = add i64 %mul1033, 0
  %neg1035 = xor i64 %add1034, -1
  %cmp1036 = icmp eq i64 %neg1035, -1
  %conv1037 = zext i1 %cmp1036 to i32
  %sub1038 = sub nsw i32 0, %conv1037
  %conv1039 = sext i32 %sub1038 to i64
  %232 = load i32, i32* %row_bytes, align 4
  %conv1040 = zext i32 %232 to i64
  %add1041 = add i64 0, %conv1040
  %mul1042 = mul i64 0, %add1041
  %add1043 = add i64 %mul1042, 1
  %shl1044 = shl i64 %add1043, 62
  %sub1045 = sub i64 %shl1044, 1
  %mul1046 = mul i64 %sub1045, 2
  %add1047 = add i64 %mul1046, 1
  %sub1048 = sub i64 %conv1039, %add1047
  br label %cond.end.1054

cond.false.1049:                                  ; preds = %cond.true.1022
  %233 = load i32, i32* %row_bytes, align 4
  %conv1050 = zext i32 %233 to i64
  %add1051 = add i64 0, %conv1050
  %mul1052 = mul i64 0, %add1051
  %add1053 = add i64 %mul1052, 0
  br label %cond.end.1054

cond.end.1054:                                    ; preds = %cond.false.1049, %cond.true.1030
  %cond1055 = phi i64 [ %sub1048, %cond.true.1030 ], [ %add1053, %cond.false.1049 ]
  %div1056 = udiv i64 %cond1055, 1
  %cmp1057 = icmp ult i64 %conv1023, %div1056
  br i1 %cmp1057, label %cond.true.1103, label %lor.lhs.false.1086

cond.false.1059:                                  ; preds = %cond.false.1019
  %234 = load i32, i32* %row_bytes, align 4
  %conv1060 = zext i32 %234 to i64
  %add1061 = add i64 0, %conv1060
  %mul1062 = mul i64 0, %add1061
  %sub1063 = sub i64 %mul1062, 1
  %cmp1064 = icmp ult i64 %sub1063, 0
  br i1 %cmp1064, label %cond.true.1066, label %cond.false.1075

cond.true.1066:                                   ; preds = %cond.false.1059
  %235 = load i32, i32* %row_bytes, align 4
  %conv1067 = zext i32 %235 to i64
  %add1068 = add i64 0, %conv1067
  %mul1069 = mul i64 0, %add1068
  %add1070 = add i64 %mul1069, 1
  %shl1071 = shl i64 %add1070, 62
  %sub1072 = sub i64 %shl1071, 1
  %mul1073 = mul i64 %sub1072, 2
  %add1074 = add i64 %mul1073, 1
  br label %cond.end.1080

cond.false.1075:                                  ; preds = %cond.false.1059
  %236 = load i32, i32* %row_bytes, align 4
  %conv1076 = zext i32 %236 to i64
  %add1077 = add i64 0, %conv1076
  %mul1078 = mul i64 0, %add1077
  %sub1079 = sub i64 %mul1078, 1
  br label %cond.end.1080

cond.end.1080:                                    ; preds = %cond.false.1075, %cond.true.1066
  %cond1081 = phi i64 [ %add1074, %cond.true.1066 ], [ %sub1079, %cond.false.1075 ]
  %div1082 = udiv i64 %cond1081, 1
  %237 = load i32, i32* %row_bytes, align 4
  %conv1083 = zext i32 %237 to i64
  %cmp1084 = icmp ult i64 %div1082, %conv1083
  br i1 %cmp1084, label %cond.true.1103, label %lor.lhs.false.1086

lor.lhs.false.1086:                               ; preds = %cond.end.1080, %cond.end.1054, %cond.true.1018, %cond.end.1011, %cond.true.979, %cond.end.973
  %238 = load i32, i32* %row_bytes, align 4
  %conv1087 = zext i32 %238 to i64
  %mul1088 = mul i64 %conv1087, 1
  %mul1089 = mul i64 0, %mul1088
  %sub1090 = sub i64 %mul1089, 1
  %cmp1091 = icmp ult i64 %sub1090, 0
  br i1 %cmp1091, label %land.lhs.true.1093, label %lor.lhs.false.1098

land.lhs.true.1093:                               ; preds = %lor.lhs.false.1086
  %239 = load i32, i32* %row_bytes, align 4
  %conv1094 = zext i32 %239 to i64
  %mul1095 = mul i64 %conv1094, 1
  %cmp1096 = icmp ult i64 %mul1095, -32768
  br i1 %cmp1096, label %cond.true.1103, label %lor.lhs.false.1098

lor.lhs.false.1098:                               ; preds = %land.lhs.true.1093, %lor.lhs.false.1086
  %240 = load i32, i32* %row_bytes, align 4
  %conv1099 = zext i32 %240 to i64
  %mul1100 = mul i64 %conv1099, 1
  %cmp1101 = icmp ult i64 32767, %mul1100
  br i1 %cmp1101, label %cond.true.1103, label %cond.false.1126

cond.true.1103:                                   ; preds = %lor.lhs.false.1098, %land.lhs.true.1093, %cond.end.1080, %cond.end.1054, %cond.true.1018, %cond.end.1011, %cond.true.979, %cond.end.973, %land.lhs.true.944
  %241 = load i32, i32* %row_bytes, align 4
  %conv1104 = trunc i32 %241 to i16
  %conv1105 = zext i16 %conv1104 to i32
  %mul1106 = mul nsw i32 %conv1105, 1
  %cmp1107 = icmp sle i32 %mul1106, 32767
  br i1 %cmp1107, label %cond.true.1109, label %cond.false.1115

cond.true.1109:                                   ; preds = %cond.true.1103
  %242 = load i32, i32* %row_bytes, align 4
  %conv1110 = trunc i32 %242 to i16
  %conv1111 = zext i16 %conv1110 to i32
  %mul1112 = mul nsw i32 %conv1111, 1
  %conv1113 = trunc i32 %mul1112 to i16
  %conv1114 = sext i16 %conv1113 to i32
  br label %cond.end.1123

cond.false.1115:                                  ; preds = %cond.true.1103
  %243 = load i32, i32* %row_bytes, align 4
  %conv1116 = trunc i32 %243 to i16
  %conv1117 = zext i16 %conv1116 to i32
  %mul1118 = mul nsw i32 %conv1117, 1
  %sub1119 = sub nsw i32 %mul1118, -32768
  %conv1120 = trunc i32 %sub1119 to i16
  %conv1121 = sext i16 %conv1120 to i32
  %add1122 = add nsw i32 %conv1121, -32768
  br label %cond.end.1123

cond.end.1123:                                    ; preds = %cond.false.1115, %cond.true.1109
  %cond1124 = phi i32 [ %conv1114, %cond.true.1109 ], [ %add1122, %cond.false.1115 ]
  %conv1125 = sext i32 %cond1124 to i64
  store i64 %conv1125, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1126:                                  ; preds = %lor.lhs.false.1098
  %244 = load i32, i32* %row_bytes, align 4
  %conv1127 = trunc i32 %244 to i16
  %conv1128 = zext i16 %conv1127 to i32
  %mul1129 = mul nsw i32 %conv1128, 1
  %cmp1130 = icmp sle i32 %mul1129, 32767
  br i1 %cmp1130, label %cond.true.1132, label %cond.false.1138

cond.true.1132:                                   ; preds = %cond.false.1126
  %245 = load i32, i32* %row_bytes, align 4
  %conv1133 = trunc i32 %245 to i16
  %conv1134 = zext i16 %conv1133 to i32
  %mul1135 = mul nsw i32 %conv1134, 1
  %conv1136 = trunc i32 %mul1135 to i16
  %conv1137 = sext i16 %conv1136 to i32
  br label %cond.end.1146

cond.false.1138:                                  ; preds = %cond.false.1126
  %246 = load i32, i32* %row_bytes, align 4
  %conv1139 = trunc i32 %246 to i16
  %conv1140 = zext i16 %conv1139 to i32
  %mul1141 = mul nsw i32 %conv1140, 1
  %sub1142 = sub nsw i32 %mul1141, -32768
  %conv1143 = trunc i32 %sub1142 to i16
  %conv1144 = sext i16 %conv1143 to i32
  %add1145 = add nsw i32 %conv1144, -32768
  br label %cond.end.1146

cond.end.1146:                                    ; preds = %cond.false.1138, %cond.true.1132
  %cond1147 = phi i32 [ %conv1137, %cond.true.1132 ], [ %add1145, %cond.false.1138 ]
  %conv1148 = sext i32 %cond1147 to i64
  store i64 %conv1148, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1149:                                  ; preds = %cond.false.639
  br i1 false, label %cond.true.1150, label %cond.false.1563

cond.true.1150:                                   ; preds = %cond.false.1149
  br i1 false, label %cond.true.1151, label %cond.false.1343

cond.true.1151:                                   ; preds = %cond.true.1150
  %247 = load i32, i32* %row_bytes, align 4
  %add1152 = add nsw i32 0, %247
  %mul1153 = mul nsw i32 0, %add1152
  %sub1154 = sub nsw i32 %mul1153, 1
  %cmp1155 = icmp slt i32 %sub1154, 0
  br i1 %cmp1155, label %cond.true.1157, label %cond.false.1173

cond.true.1157:                                   ; preds = %cond.true.1151
  %248 = load i32, i32* %row_bytes, align 4
  %add1158 = add nsw i32 0, %248
  %mul1159 = mul nsw i32 0, %add1158
  %add1160 = add nsw i32 %mul1159, 0
  %neg1161 = xor i32 %add1160, -1
  %cmp1162 = icmp eq i32 %neg1161, -1
  %conv1163 = zext i1 %cmp1162 to i32
  %sub1164 = sub nsw i32 0, %conv1163
  %249 = load i32, i32* %row_bytes, align 4
  %add1165 = add nsw i32 0, %249
  %mul1166 = mul nsw i32 0, %add1165
  %add1167 = add nsw i32 %mul1166, 1
  %shl1168 = shl i32 %add1167, 30
  %sub1169 = sub nsw i32 %shl1168, 1
  %mul1170 = mul nsw i32 %sub1169, 2
  %add1171 = add nsw i32 %mul1170, 1
  %sub1172 = sub nsw i32 %sub1164, %add1171
  br label %cond.end.1177

cond.false.1173:                                  ; preds = %cond.true.1151
  %250 = load i32, i32* %row_bytes, align 4
  %add1174 = add nsw i32 0, %250
  %mul1175 = mul nsw i32 0, %add1174
  %add1176 = add nsw i32 %mul1175, 0
  br label %cond.end.1177

cond.end.1177:                                    ; preds = %cond.false.1173, %cond.true.1157
  %cond1178 = phi i32 [ %sub1172, %cond.true.1157 ], [ %add1176, %cond.false.1173 ]
  %cmp1179 = icmp eq i32 %cond1178, 0
  br i1 %cmp1179, label %land.lhs.true.1181, label %lor.lhs.false.1184

land.lhs.true.1181:                               ; preds = %cond.end.1177
  %251 = load i32, i32* %row_bytes, align 4
  %cmp1182 = icmp slt i32 %251, 0
  br i1 %cmp1182, label %cond.true.1317, label %lor.lhs.false.1184

lor.lhs.false.1184:                               ; preds = %land.lhs.true.1181, %cond.end.1177
  br i1 false, label %cond.true.1185, label %cond.false.1244

cond.true.1185:                                   ; preds = %lor.lhs.false.1184
  %252 = load i32, i32* %row_bytes, align 4
  %cmp1186 = icmp slt i32 %252, 0
  br i1 %cmp1186, label %cond.true.1188, label %cond.false.1211

cond.true.1188:                                   ; preds = %cond.true.1185
  %253 = load i32, i32* %row_bytes, align 4
  %254 = load i32, i32* %row_bytes, align 4
  %add1189 = add nsw i32 0, %254
  %mul1190 = mul nsw i32 0, %add1189
  %sub1191 = sub nsw i32 %mul1190, 1
  %cmp1192 = icmp slt i32 %sub1191, 0
  br i1 %cmp1192, label %cond.true.1194, label %cond.false.1202

cond.true.1194:                                   ; preds = %cond.true.1188
  %255 = load i32, i32* %row_bytes, align 4
  %add1195 = add nsw i32 0, %255
  %mul1196 = mul nsw i32 0, %add1195
  %add1197 = add nsw i32 %mul1196, 1
  %shl1198 = shl i32 %add1197, 30
  %sub1199 = sub nsw i32 %shl1198, 1
  %mul1200 = mul nsw i32 %sub1199, 2
  %add1201 = add nsw i32 %mul1200, 1
  br label %cond.end.1206

cond.false.1202:                                  ; preds = %cond.true.1188
  %256 = load i32, i32* %row_bytes, align 4
  %add1203 = add nsw i32 0, %256
  %mul1204 = mul nsw i32 0, %add1203
  %sub1205 = sub nsw i32 %mul1204, 1
  br label %cond.end.1206

cond.end.1206:                                    ; preds = %cond.false.1202, %cond.true.1194
  %cond1207 = phi i32 [ %add1201, %cond.true.1194 ], [ %sub1205, %cond.false.1202 ]
  %div1208 = sdiv i32 %cond1207, 1
  %cmp1209 = icmp slt i32 %253, %div1208
  br i1 %cmp1209, label %cond.true.1317, label %lor.lhs.false.1303

cond.false.1211:                                  ; preds = %cond.true.1185
  br i1 false, label %cond.true.1212, label %cond.false.1213

cond.true.1212:                                   ; preds = %cond.false.1211
  br i1 false, label %cond.true.1317, label %lor.lhs.false.1303

cond.false.1213:                                  ; preds = %cond.false.1211
  %257 = load i32, i32* %row_bytes, align 4
  %add1214 = add nsw i32 0, %257
  %mul1215 = mul nsw i32 0, %add1214
  %sub1216 = sub nsw i32 %mul1215, 1
  %cmp1217 = icmp slt i32 %sub1216, 0
  br i1 %cmp1217, label %cond.true.1219, label %cond.false.1235

cond.true.1219:                                   ; preds = %cond.false.1213
  %258 = load i32, i32* %row_bytes, align 4
  %add1220 = add nsw i32 0, %258
  %mul1221 = mul nsw i32 0, %add1220
  %add1222 = add nsw i32 %mul1221, 0
  %neg1223 = xor i32 %add1222, -1
  %cmp1224 = icmp eq i32 %neg1223, -1
  %conv1225 = zext i1 %cmp1224 to i32
  %sub1226 = sub nsw i32 0, %conv1225
  %259 = load i32, i32* %row_bytes, align 4
  %add1227 = add nsw i32 0, %259
  %mul1228 = mul nsw i32 0, %add1227
  %add1229 = add nsw i32 %mul1228, 1
  %shl1230 = shl i32 %add1229, 30
  %sub1231 = sub nsw i32 %shl1230, 1
  %mul1232 = mul nsw i32 %sub1231, 2
  %add1233 = add nsw i32 %mul1232, 1
  %sub1234 = sub nsw i32 %sub1226, %add1233
  br label %cond.end.1239

cond.false.1235:                                  ; preds = %cond.false.1213
  %260 = load i32, i32* %row_bytes, align 4
  %add1236 = add nsw i32 0, %260
  %mul1237 = mul nsw i32 0, %add1236
  %add1238 = add nsw i32 %mul1237, 0
  br label %cond.end.1239

cond.end.1239:                                    ; preds = %cond.false.1235, %cond.true.1219
  %cond1240 = phi i32 [ %sub1234, %cond.true.1219 ], [ %add1238, %cond.false.1235 ]
  %div1241 = sdiv i32 %cond1240, 1
  %261 = load i32, i32* %row_bytes, align 4
  %cmp1242 = icmp slt i32 %div1241, %261
  br i1 %cmp1242, label %cond.true.1317, label %lor.lhs.false.1303

cond.false.1244:                                  ; preds = %lor.lhs.false.1184
  br i1 false, label %cond.true.1245, label %cond.false.1246

cond.true.1245:                                   ; preds = %cond.false.1244
  br i1 false, label %cond.true.1317, label %lor.lhs.false.1303

cond.false.1246:                                  ; preds = %cond.false.1244
  %262 = load i32, i32* %row_bytes, align 4
  %cmp1247 = icmp slt i32 %262, 0
  br i1 %cmp1247, label %cond.true.1249, label %cond.false.1280

cond.true.1249:                                   ; preds = %cond.false.1246
  %263 = load i32, i32* %row_bytes, align 4
  %264 = load i32, i32* %row_bytes, align 4
  %add1250 = add nsw i32 0, %264
  %mul1251 = mul nsw i32 0, %add1250
  %sub1252 = sub nsw i32 %mul1251, 1
  %cmp1253 = icmp slt i32 %sub1252, 0
  br i1 %cmp1253, label %cond.true.1255, label %cond.false.1271

cond.true.1255:                                   ; preds = %cond.true.1249
  %265 = load i32, i32* %row_bytes, align 4
  %add1256 = add nsw i32 0, %265
  %mul1257 = mul nsw i32 0, %add1256
  %add1258 = add nsw i32 %mul1257, 0
  %neg1259 = xor i32 %add1258, -1
  %cmp1260 = icmp eq i32 %neg1259, -1
  %conv1261 = zext i1 %cmp1260 to i32
  %sub1262 = sub nsw i32 0, %conv1261
  %266 = load i32, i32* %row_bytes, align 4
  %add1263 = add nsw i32 0, %266
  %mul1264 = mul nsw i32 0, %add1263
  %add1265 = add nsw i32 %mul1264, 1
  %shl1266 = shl i32 %add1265, 30
  %sub1267 = sub nsw i32 %shl1266, 1
  %mul1268 = mul nsw i32 %sub1267, 2
  %add1269 = add nsw i32 %mul1268, 1
  %sub1270 = sub nsw i32 %sub1262, %add1269
  br label %cond.end.1275

cond.false.1271:                                  ; preds = %cond.true.1249
  %267 = load i32, i32* %row_bytes, align 4
  %add1272 = add nsw i32 0, %267
  %mul1273 = mul nsw i32 0, %add1272
  %add1274 = add nsw i32 %mul1273, 0
  br label %cond.end.1275

cond.end.1275:                                    ; preds = %cond.false.1271, %cond.true.1255
  %cond1276 = phi i32 [ %sub1270, %cond.true.1255 ], [ %add1274, %cond.false.1271 ]
  %div1277 = sdiv i32 %cond1276, 1
  %cmp1278 = icmp slt i32 %263, %div1277
  br i1 %cmp1278, label %cond.true.1317, label %lor.lhs.false.1303

cond.false.1280:                                  ; preds = %cond.false.1246
  %268 = load i32, i32* %row_bytes, align 4
  %add1281 = add nsw i32 0, %268
  %mul1282 = mul nsw i32 0, %add1281
  %sub1283 = sub nsw i32 %mul1282, 1
  %cmp1284 = icmp slt i32 %sub1283, 0
  br i1 %cmp1284, label %cond.true.1286, label %cond.false.1294

cond.true.1286:                                   ; preds = %cond.false.1280
  %269 = load i32, i32* %row_bytes, align 4
  %add1287 = add nsw i32 0, %269
  %mul1288 = mul nsw i32 0, %add1287
  %add1289 = add nsw i32 %mul1288, 1
  %shl1290 = shl i32 %add1289, 30
  %sub1291 = sub nsw i32 %shl1290, 1
  %mul1292 = mul nsw i32 %sub1291, 2
  %add1293 = add nsw i32 %mul1292, 1
  br label %cond.end.1298

cond.false.1294:                                  ; preds = %cond.false.1280
  %270 = load i32, i32* %row_bytes, align 4
  %add1295 = add nsw i32 0, %270
  %mul1296 = mul nsw i32 0, %add1295
  %sub1297 = sub nsw i32 %mul1296, 1
  br label %cond.end.1298

cond.end.1298:                                    ; preds = %cond.false.1294, %cond.true.1286
  %cond1299 = phi i32 [ %add1293, %cond.true.1286 ], [ %sub1297, %cond.false.1294 ]
  %div1300 = sdiv i32 %cond1299, 1
  %271 = load i32, i32* %row_bytes, align 4
  %cmp1301 = icmp slt i32 %div1300, %271
  br i1 %cmp1301, label %cond.true.1317, label %lor.lhs.false.1303

lor.lhs.false.1303:                               ; preds = %cond.end.1298, %cond.end.1275, %cond.true.1245, %cond.end.1239, %cond.true.1212, %cond.end.1206
  %272 = load i32, i32* %row_bytes, align 4
  %mul1304 = mul nsw i32 %272, 1
  %mul1305 = mul nsw i32 0, %mul1304
  %sub1306 = sub nsw i32 %mul1305, 1
  %cmp1307 = icmp slt i32 %sub1306, 0
  br i1 %cmp1307, label %land.lhs.true.1309, label %lor.lhs.false.1313

land.lhs.true.1309:                               ; preds = %lor.lhs.false.1303
  %273 = load i32, i32* %row_bytes, align 4
  %mul1310 = mul nsw i32 %273, 1
  %cmp1311 = icmp slt i32 %mul1310, -2147483648
  br i1 %cmp1311, label %cond.true.1317, label %lor.lhs.false.1313

lor.lhs.false.1313:                               ; preds = %land.lhs.true.1309, %lor.lhs.false.1303
  %274 = load i32, i32* %row_bytes, align 4
  %mul1314 = mul nsw i32 %274, 1
  %cmp1315 = icmp slt i32 2147483647, %mul1314
  br i1 %cmp1315, label %cond.true.1317, label %cond.false.1330

cond.true.1317:                                   ; preds = %lor.lhs.false.1313, %land.lhs.true.1309, %cond.end.1298, %cond.end.1275, %cond.true.1245, %cond.end.1239, %cond.true.1212, %cond.end.1206, %land.lhs.true.1181
  %275 = load i32, i32* %row_bytes, align 4
  %mul1318 = mul i32 %275, 1
  %cmp1319 = icmp ule i32 %mul1318, 2147483647
  br i1 %cmp1319, label %cond.true.1321, label %cond.false.1323

cond.true.1321:                                   ; preds = %cond.true.1317
  %276 = load i32, i32* %row_bytes, align 4
  %mul1322 = mul i32 %276, 1
  br label %cond.end.1327

cond.false.1323:                                  ; preds = %cond.true.1317
  %277 = load i32, i32* %row_bytes, align 4
  %mul1324 = mul i32 %277, 1
  %sub1325 = sub i32 %mul1324, -2147483648
  %add1326 = add nsw i32 %sub1325, -2147483648
  br label %cond.end.1327

cond.end.1327:                                    ; preds = %cond.false.1323, %cond.true.1321
  %cond1328 = phi i32 [ %mul1322, %cond.true.1321 ], [ %add1326, %cond.false.1323 ]
  %conv1329 = sext i32 %cond1328 to i64
  store i64 %conv1329, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1330:                                  ; preds = %lor.lhs.false.1313
  %278 = load i32, i32* %row_bytes, align 4
  %mul1331 = mul i32 %278, 1
  %cmp1332 = icmp ule i32 %mul1331, 2147483647
  br i1 %cmp1332, label %cond.true.1334, label %cond.false.1336

cond.true.1334:                                   ; preds = %cond.false.1330
  %279 = load i32, i32* %row_bytes, align 4
  %mul1335 = mul i32 %279, 1
  br label %cond.end.1340

cond.false.1336:                                  ; preds = %cond.false.1330
  %280 = load i32, i32* %row_bytes, align 4
  %mul1337 = mul i32 %280, 1
  %sub1338 = sub i32 %mul1337, -2147483648
  %add1339 = add nsw i32 %sub1338, -2147483648
  br label %cond.end.1340

cond.end.1340:                                    ; preds = %cond.false.1336, %cond.true.1334
  %cond1341 = phi i32 [ %mul1335, %cond.true.1334 ], [ %add1339, %cond.false.1336 ]
  %conv1342 = sext i32 %cond1341 to i64
  store i64 %conv1342, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1343:                                  ; preds = %cond.true.1150
  %281 = load i32, i32* %row_bytes, align 4
  %conv1344 = zext i32 %281 to i64
  %add1345 = add i64 0, %conv1344
  %mul1346 = mul i64 0, %add1345
  %sub1347 = sub i64 %mul1346, 1
  %cmp1348 = icmp ult i64 %sub1347, 0
  br i1 %cmp1348, label %cond.true.1350, label %cond.false.1369

cond.true.1350:                                   ; preds = %cond.false.1343
  %282 = load i32, i32* %row_bytes, align 4
  %conv1351 = zext i32 %282 to i64
  %add1352 = add i64 0, %conv1351
  %mul1353 = mul i64 0, %add1352
  %add1354 = add i64 %mul1353, 0
  %neg1355 = xor i64 %add1354, -1
  %cmp1356 = icmp eq i64 %neg1355, -1
  %conv1357 = zext i1 %cmp1356 to i32
  %sub1358 = sub nsw i32 0, %conv1357
  %conv1359 = sext i32 %sub1358 to i64
  %283 = load i32, i32* %row_bytes, align 4
  %conv1360 = zext i32 %283 to i64
  %add1361 = add i64 0, %conv1360
  %mul1362 = mul i64 0, %add1361
  %add1363 = add i64 %mul1362, 1
  %shl1364 = shl i64 %add1363, 62
  %sub1365 = sub i64 %shl1364, 1
  %mul1366 = mul i64 %sub1365, 2
  %add1367 = add i64 %mul1366, 1
  %sub1368 = sub i64 %conv1359, %add1367
  br label %cond.end.1374

cond.false.1369:                                  ; preds = %cond.false.1343
  %284 = load i32, i32* %row_bytes, align 4
  %conv1370 = zext i32 %284 to i64
  %add1371 = add i64 0, %conv1370
  %mul1372 = mul i64 0, %add1371
  %add1373 = add i64 %mul1372, 0
  br label %cond.end.1374

cond.end.1374:                                    ; preds = %cond.false.1369, %cond.true.1350
  %cond1375 = phi i64 [ %sub1368, %cond.true.1350 ], [ %add1373, %cond.false.1369 ]
  %cmp1376 = icmp eq i64 %cond1375, 0
  br i1 %cmp1376, label %land.lhs.true.1378, label %lor.lhs.false.1381

land.lhs.true.1378:                               ; preds = %cond.end.1374
  %285 = load i32, i32* %row_bytes, align 4
  %cmp1379 = icmp ult i32 %285, 0
  br i1 %cmp1379, label %cond.true.1537, label %lor.lhs.false.1381

lor.lhs.false.1381:                               ; preds = %land.lhs.true.1378, %cond.end.1374
  br i1 false, label %cond.true.1382, label %cond.false.1451

cond.true.1382:                                   ; preds = %lor.lhs.false.1381
  %286 = load i32, i32* %row_bytes, align 4
  %cmp1383 = icmp ult i32 %286, 0
  br i1 %cmp1383, label %cond.true.1385, label %cond.false.1412

cond.true.1385:                                   ; preds = %cond.true.1382
  %287 = load i32, i32* %row_bytes, align 4
  %conv1386 = zext i32 %287 to i64
  %288 = load i32, i32* %row_bytes, align 4
  %conv1387 = zext i32 %288 to i64
  %add1388 = add i64 0, %conv1387
  %mul1389 = mul i64 0, %add1388
  %sub1390 = sub i64 %mul1389, 1
  %cmp1391 = icmp ult i64 %sub1390, 0
  br i1 %cmp1391, label %cond.true.1393, label %cond.false.1402

cond.true.1393:                                   ; preds = %cond.true.1385
  %289 = load i32, i32* %row_bytes, align 4
  %conv1394 = zext i32 %289 to i64
  %add1395 = add i64 0, %conv1394
  %mul1396 = mul i64 0, %add1395
  %add1397 = add i64 %mul1396, 1
  %shl1398 = shl i64 %add1397, 62
  %sub1399 = sub i64 %shl1398, 1
  %mul1400 = mul i64 %sub1399, 2
  %add1401 = add i64 %mul1400, 1
  br label %cond.end.1407

cond.false.1402:                                  ; preds = %cond.true.1385
  %290 = load i32, i32* %row_bytes, align 4
  %conv1403 = zext i32 %290 to i64
  %add1404 = add i64 0, %conv1403
  %mul1405 = mul i64 0, %add1404
  %sub1406 = sub i64 %mul1405, 1
  br label %cond.end.1407

cond.end.1407:                                    ; preds = %cond.false.1402, %cond.true.1393
  %cond1408 = phi i64 [ %add1401, %cond.true.1393 ], [ %sub1406, %cond.false.1402 ]
  %div1409 = udiv i64 %cond1408, 1
  %cmp1410 = icmp ult i64 %conv1386, %div1409
  br i1 %cmp1410, label %cond.true.1537, label %lor.lhs.false.1520

cond.false.1412:                                  ; preds = %cond.true.1382
  br i1 false, label %cond.true.1413, label %cond.false.1414

cond.true.1413:                                   ; preds = %cond.false.1412
  br i1 false, label %cond.true.1537, label %lor.lhs.false.1520

cond.false.1414:                                  ; preds = %cond.false.1412
  %291 = load i32, i32* %row_bytes, align 4
  %conv1415 = zext i32 %291 to i64
  %add1416 = add i64 0, %conv1415
  %mul1417 = mul i64 0, %add1416
  %sub1418 = sub i64 %mul1417, 1
  %cmp1419 = icmp ult i64 %sub1418, 0
  br i1 %cmp1419, label %cond.true.1421, label %cond.false.1440

cond.true.1421:                                   ; preds = %cond.false.1414
  %292 = load i32, i32* %row_bytes, align 4
  %conv1422 = zext i32 %292 to i64
  %add1423 = add i64 0, %conv1422
  %mul1424 = mul i64 0, %add1423
  %add1425 = add i64 %mul1424, 0
  %neg1426 = xor i64 %add1425, -1
  %cmp1427 = icmp eq i64 %neg1426, -1
  %conv1428 = zext i1 %cmp1427 to i32
  %sub1429 = sub nsw i32 0, %conv1428
  %conv1430 = sext i32 %sub1429 to i64
  %293 = load i32, i32* %row_bytes, align 4
  %conv1431 = zext i32 %293 to i64
  %add1432 = add i64 0, %conv1431
  %mul1433 = mul i64 0, %add1432
  %add1434 = add i64 %mul1433, 1
  %shl1435 = shl i64 %add1434, 62
  %sub1436 = sub i64 %shl1435, 1
  %mul1437 = mul i64 %sub1436, 2
  %add1438 = add i64 %mul1437, 1
  %sub1439 = sub i64 %conv1430, %add1438
  br label %cond.end.1445

cond.false.1440:                                  ; preds = %cond.false.1414
  %294 = load i32, i32* %row_bytes, align 4
  %conv1441 = zext i32 %294 to i64
  %add1442 = add i64 0, %conv1441
  %mul1443 = mul i64 0, %add1442
  %add1444 = add i64 %mul1443, 0
  br label %cond.end.1445

cond.end.1445:                                    ; preds = %cond.false.1440, %cond.true.1421
  %cond1446 = phi i64 [ %sub1439, %cond.true.1421 ], [ %add1444, %cond.false.1440 ]
  %div1447 = udiv i64 %cond1446, 1
  %295 = load i32, i32* %row_bytes, align 4
  %conv1448 = zext i32 %295 to i64
  %cmp1449 = icmp ult i64 %div1447, %conv1448
  br i1 %cmp1449, label %cond.true.1537, label %lor.lhs.false.1520

cond.false.1451:                                  ; preds = %lor.lhs.false.1381
  br i1 false, label %cond.true.1452, label %cond.false.1453

cond.true.1452:                                   ; preds = %cond.false.1451
  br i1 false, label %cond.true.1537, label %lor.lhs.false.1520

cond.false.1453:                                  ; preds = %cond.false.1451
  %296 = load i32, i32* %row_bytes, align 4
  %cmp1454 = icmp ult i32 %296, 0
  br i1 %cmp1454, label %cond.true.1456, label %cond.false.1493

cond.true.1456:                                   ; preds = %cond.false.1453
  %297 = load i32, i32* %row_bytes, align 4
  %conv1457 = zext i32 %297 to i64
  %298 = load i32, i32* %row_bytes, align 4
  %conv1458 = zext i32 %298 to i64
  %add1459 = add i64 0, %conv1458
  %mul1460 = mul i64 0, %add1459
  %sub1461 = sub i64 %mul1460, 1
  %cmp1462 = icmp ult i64 %sub1461, 0
  br i1 %cmp1462, label %cond.true.1464, label %cond.false.1483

cond.true.1464:                                   ; preds = %cond.true.1456
  %299 = load i32, i32* %row_bytes, align 4
  %conv1465 = zext i32 %299 to i64
  %add1466 = add i64 0, %conv1465
  %mul1467 = mul i64 0, %add1466
  %add1468 = add i64 %mul1467, 0
  %neg1469 = xor i64 %add1468, -1
  %cmp1470 = icmp eq i64 %neg1469, -1
  %conv1471 = zext i1 %cmp1470 to i32
  %sub1472 = sub nsw i32 0, %conv1471
  %conv1473 = sext i32 %sub1472 to i64
  %300 = load i32, i32* %row_bytes, align 4
  %conv1474 = zext i32 %300 to i64
  %add1475 = add i64 0, %conv1474
  %mul1476 = mul i64 0, %add1475
  %add1477 = add i64 %mul1476, 1
  %shl1478 = shl i64 %add1477, 62
  %sub1479 = sub i64 %shl1478, 1
  %mul1480 = mul i64 %sub1479, 2
  %add1481 = add i64 %mul1480, 1
  %sub1482 = sub i64 %conv1473, %add1481
  br label %cond.end.1488

cond.false.1483:                                  ; preds = %cond.true.1456
  %301 = load i32, i32* %row_bytes, align 4
  %conv1484 = zext i32 %301 to i64
  %add1485 = add i64 0, %conv1484
  %mul1486 = mul i64 0, %add1485
  %add1487 = add i64 %mul1486, 0
  br label %cond.end.1488

cond.end.1488:                                    ; preds = %cond.false.1483, %cond.true.1464
  %cond1489 = phi i64 [ %sub1482, %cond.true.1464 ], [ %add1487, %cond.false.1483 ]
  %div1490 = udiv i64 %cond1489, 1
  %cmp1491 = icmp ult i64 %conv1457, %div1490
  br i1 %cmp1491, label %cond.true.1537, label %lor.lhs.false.1520

cond.false.1493:                                  ; preds = %cond.false.1453
  %302 = load i32, i32* %row_bytes, align 4
  %conv1494 = zext i32 %302 to i64
  %add1495 = add i64 0, %conv1494
  %mul1496 = mul i64 0, %add1495
  %sub1497 = sub i64 %mul1496, 1
  %cmp1498 = icmp ult i64 %sub1497, 0
  br i1 %cmp1498, label %cond.true.1500, label %cond.false.1509

cond.true.1500:                                   ; preds = %cond.false.1493
  %303 = load i32, i32* %row_bytes, align 4
  %conv1501 = zext i32 %303 to i64
  %add1502 = add i64 0, %conv1501
  %mul1503 = mul i64 0, %add1502
  %add1504 = add i64 %mul1503, 1
  %shl1505 = shl i64 %add1504, 62
  %sub1506 = sub i64 %shl1505, 1
  %mul1507 = mul i64 %sub1506, 2
  %add1508 = add i64 %mul1507, 1
  br label %cond.end.1514

cond.false.1509:                                  ; preds = %cond.false.1493
  %304 = load i32, i32* %row_bytes, align 4
  %conv1510 = zext i32 %304 to i64
  %add1511 = add i64 0, %conv1510
  %mul1512 = mul i64 0, %add1511
  %sub1513 = sub i64 %mul1512, 1
  br label %cond.end.1514

cond.end.1514:                                    ; preds = %cond.false.1509, %cond.true.1500
  %cond1515 = phi i64 [ %add1508, %cond.true.1500 ], [ %sub1513, %cond.false.1509 ]
  %div1516 = udiv i64 %cond1515, 1
  %305 = load i32, i32* %row_bytes, align 4
  %conv1517 = zext i32 %305 to i64
  %cmp1518 = icmp ult i64 %div1516, %conv1517
  br i1 %cmp1518, label %cond.true.1537, label %lor.lhs.false.1520

lor.lhs.false.1520:                               ; preds = %cond.end.1514, %cond.end.1488, %cond.true.1452, %cond.end.1445, %cond.true.1413, %cond.end.1407
  %306 = load i32, i32* %row_bytes, align 4
  %conv1521 = zext i32 %306 to i64
  %mul1522 = mul i64 %conv1521, 1
  %mul1523 = mul i64 0, %mul1522
  %sub1524 = sub i64 %mul1523, 1
  %cmp1525 = icmp ult i64 %sub1524, 0
  br i1 %cmp1525, label %land.lhs.true.1527, label %lor.lhs.false.1532

land.lhs.true.1527:                               ; preds = %lor.lhs.false.1520
  %307 = load i32, i32* %row_bytes, align 4
  %conv1528 = zext i32 %307 to i64
  %mul1529 = mul i64 %conv1528, 1
  %cmp1530 = icmp ult i64 %mul1529, -2147483648
  br i1 %cmp1530, label %cond.true.1537, label %lor.lhs.false.1532

lor.lhs.false.1532:                               ; preds = %land.lhs.true.1527, %lor.lhs.false.1520
  %308 = load i32, i32* %row_bytes, align 4
  %conv1533 = zext i32 %308 to i64
  %mul1534 = mul i64 %conv1533, 1
  %cmp1535 = icmp ult i64 2147483647, %mul1534
  br i1 %cmp1535, label %cond.true.1537, label %cond.false.1550

cond.true.1537:                                   ; preds = %lor.lhs.false.1532, %land.lhs.true.1527, %cond.end.1514, %cond.end.1488, %cond.true.1452, %cond.end.1445, %cond.true.1413, %cond.end.1407, %land.lhs.true.1378
  %309 = load i32, i32* %row_bytes, align 4
  %mul1538 = mul i32 %309, 1
  %cmp1539 = icmp ule i32 %mul1538, 2147483647
  br i1 %cmp1539, label %cond.true.1541, label %cond.false.1543

cond.true.1541:                                   ; preds = %cond.true.1537
  %310 = load i32, i32* %row_bytes, align 4
  %mul1542 = mul i32 %310, 1
  br label %cond.end.1547

cond.false.1543:                                  ; preds = %cond.true.1537
  %311 = load i32, i32* %row_bytes, align 4
  %mul1544 = mul i32 %311, 1
  %sub1545 = sub i32 %mul1544, -2147483648
  %add1546 = add nsw i32 %sub1545, -2147483648
  br label %cond.end.1547

cond.end.1547:                                    ; preds = %cond.false.1543, %cond.true.1541
  %cond1548 = phi i32 [ %mul1542, %cond.true.1541 ], [ %add1546, %cond.false.1543 ]
  %conv1549 = sext i32 %cond1548 to i64
  store i64 %conv1549, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1550:                                  ; preds = %lor.lhs.false.1532
  %312 = load i32, i32* %row_bytes, align 4
  %mul1551 = mul i32 %312, 1
  %cmp1552 = icmp ule i32 %mul1551, 2147483647
  br i1 %cmp1552, label %cond.true.1554, label %cond.false.1556

cond.true.1554:                                   ; preds = %cond.false.1550
  %313 = load i32, i32* %row_bytes, align 4
  %mul1555 = mul i32 %313, 1
  br label %cond.end.1560

cond.false.1556:                                  ; preds = %cond.false.1550
  %314 = load i32, i32* %row_bytes, align 4
  %mul1557 = mul i32 %314, 1
  %sub1558 = sub i32 %mul1557, -2147483648
  %add1559 = add nsw i32 %sub1558, -2147483648
  br label %cond.end.1560

cond.end.1560:                                    ; preds = %cond.false.1556, %cond.true.1554
  %cond1561 = phi i32 [ %mul1555, %cond.true.1554 ], [ %add1559, %cond.false.1556 ]
  %conv1562 = sext i32 %cond1561 to i64
  store i64 %conv1562, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1563:                                  ; preds = %cond.false.1149
  br i1 true, label %cond.true.1564, label %cond.false.2016

cond.true.1564:                                   ; preds = %cond.false.1563
  br i1 false, label %cond.true.1565, label %cond.false.1792

cond.true.1565:                                   ; preds = %cond.true.1564
  %315 = load i32, i32* %row_bytes, align 4
  %conv1566 = zext i32 %315 to i64
  %add1567 = add nsw i64 0, %conv1566
  %mul1568 = mul nsw i64 0, %add1567
  %sub1569 = sub nsw i64 %mul1568, 1
  %cmp1570 = icmp slt i64 %sub1569, 0
  br i1 %cmp1570, label %cond.true.1572, label %cond.false.1591

cond.true.1572:                                   ; preds = %cond.true.1565
  %316 = load i32, i32* %row_bytes, align 4
  %conv1573 = zext i32 %316 to i64
  %add1574 = add nsw i64 0, %conv1573
  %mul1575 = mul nsw i64 0, %add1574
  %add1576 = add nsw i64 %mul1575, 0
  %neg1577 = xor i64 %add1576, -1
  %cmp1578 = icmp eq i64 %neg1577, -1
  %conv1579 = zext i1 %cmp1578 to i32
  %sub1580 = sub nsw i32 0, %conv1579
  %conv1581 = sext i32 %sub1580 to i64
  %317 = load i32, i32* %row_bytes, align 4
  %conv1582 = zext i32 %317 to i64
  %add1583 = add nsw i64 0, %conv1582
  %mul1584 = mul nsw i64 0, %add1583
  %add1585 = add nsw i64 %mul1584, 1
  %shl1586 = shl i64 %add1585, 62
  %sub1587 = sub nsw i64 %shl1586, 1
  %mul1588 = mul nsw i64 %sub1587, 2
  %add1589 = add nsw i64 %mul1588, 1
  %sub1590 = sub nsw i64 %conv1581, %add1589
  br label %cond.end.1596

cond.false.1591:                                  ; preds = %cond.true.1565
  %318 = load i32, i32* %row_bytes, align 4
  %conv1592 = zext i32 %318 to i64
  %add1593 = add nsw i64 0, %conv1592
  %mul1594 = mul nsw i64 0, %add1593
  %add1595 = add nsw i64 %mul1594, 0
  br label %cond.end.1596

cond.end.1596:                                    ; preds = %cond.false.1591, %cond.true.1572
  %cond1597 = phi i64 [ %sub1590, %cond.true.1572 ], [ %add1595, %cond.false.1591 ]
  %cmp1598 = icmp eq i64 %cond1597, 0
  br i1 %cmp1598, label %land.lhs.true.1600, label %lor.lhs.false.1604

land.lhs.true.1600:                               ; preds = %cond.end.1596
  %319 = load i32, i32* %row_bytes, align 4
  %conv1601 = zext i32 %319 to i64
  %cmp1602 = icmp slt i64 %conv1601, 0
  br i1 %cmp1602, label %cond.true.1762, label %lor.lhs.false.1604

lor.lhs.false.1604:                               ; preds = %land.lhs.true.1600, %cond.end.1596
  br i1 false, label %cond.true.1605, label %cond.false.1675

cond.true.1605:                                   ; preds = %lor.lhs.false.1604
  %320 = load i32, i32* %row_bytes, align 4
  %conv1606 = zext i32 %320 to i64
  %cmp1607 = icmp slt i64 %conv1606, 0
  br i1 %cmp1607, label %cond.true.1609, label %cond.false.1636

cond.true.1609:                                   ; preds = %cond.true.1605
  %321 = load i32, i32* %row_bytes, align 4
  %conv1610 = zext i32 %321 to i64
  %322 = load i32, i32* %row_bytes, align 4
  %conv1611 = zext i32 %322 to i64
  %add1612 = add nsw i64 0, %conv1611
  %mul1613 = mul nsw i64 0, %add1612
  %sub1614 = sub nsw i64 %mul1613, 1
  %cmp1615 = icmp slt i64 %sub1614, 0
  br i1 %cmp1615, label %cond.true.1617, label %cond.false.1626

cond.true.1617:                                   ; preds = %cond.true.1609
  %323 = load i32, i32* %row_bytes, align 4
  %conv1618 = zext i32 %323 to i64
  %add1619 = add nsw i64 0, %conv1618
  %mul1620 = mul nsw i64 0, %add1619
  %add1621 = add nsw i64 %mul1620, 1
  %shl1622 = shl i64 %add1621, 62
  %sub1623 = sub nsw i64 %shl1622, 1
  %mul1624 = mul nsw i64 %sub1623, 2
  %add1625 = add nsw i64 %mul1624, 1
  br label %cond.end.1631

cond.false.1626:                                  ; preds = %cond.true.1609
  %324 = load i32, i32* %row_bytes, align 4
  %conv1627 = zext i32 %324 to i64
  %add1628 = add nsw i64 0, %conv1627
  %mul1629 = mul nsw i64 0, %add1628
  %sub1630 = sub nsw i64 %mul1629, 1
  br label %cond.end.1631

cond.end.1631:                                    ; preds = %cond.false.1626, %cond.true.1617
  %cond1632 = phi i64 [ %add1625, %cond.true.1617 ], [ %sub1630, %cond.false.1626 ]
  %div1633 = sdiv i64 %cond1632, 1
  %cmp1634 = icmp slt i64 %conv1610, %div1633
  br i1 %cmp1634, label %cond.true.1762, label %lor.lhs.false.1745

cond.false.1636:                                  ; preds = %cond.true.1605
  br i1 false, label %cond.true.1637, label %cond.false.1638

cond.true.1637:                                   ; preds = %cond.false.1636
  br i1 false, label %cond.true.1762, label %lor.lhs.false.1745

cond.false.1638:                                  ; preds = %cond.false.1636
  %325 = load i32, i32* %row_bytes, align 4
  %conv1639 = zext i32 %325 to i64
  %add1640 = add nsw i64 0, %conv1639
  %mul1641 = mul nsw i64 0, %add1640
  %sub1642 = sub nsw i64 %mul1641, 1
  %cmp1643 = icmp slt i64 %sub1642, 0
  br i1 %cmp1643, label %cond.true.1645, label %cond.false.1664

cond.true.1645:                                   ; preds = %cond.false.1638
  %326 = load i32, i32* %row_bytes, align 4
  %conv1646 = zext i32 %326 to i64
  %add1647 = add nsw i64 0, %conv1646
  %mul1648 = mul nsw i64 0, %add1647
  %add1649 = add nsw i64 %mul1648, 0
  %neg1650 = xor i64 %add1649, -1
  %cmp1651 = icmp eq i64 %neg1650, -1
  %conv1652 = zext i1 %cmp1651 to i32
  %sub1653 = sub nsw i32 0, %conv1652
  %conv1654 = sext i32 %sub1653 to i64
  %327 = load i32, i32* %row_bytes, align 4
  %conv1655 = zext i32 %327 to i64
  %add1656 = add nsw i64 0, %conv1655
  %mul1657 = mul nsw i64 0, %add1656
  %add1658 = add nsw i64 %mul1657, 1
  %shl1659 = shl i64 %add1658, 62
  %sub1660 = sub nsw i64 %shl1659, 1
  %mul1661 = mul nsw i64 %sub1660, 2
  %add1662 = add nsw i64 %mul1661, 1
  %sub1663 = sub nsw i64 %conv1654, %add1662
  br label %cond.end.1669

cond.false.1664:                                  ; preds = %cond.false.1638
  %328 = load i32, i32* %row_bytes, align 4
  %conv1665 = zext i32 %328 to i64
  %add1666 = add nsw i64 0, %conv1665
  %mul1667 = mul nsw i64 0, %add1666
  %add1668 = add nsw i64 %mul1667, 0
  br label %cond.end.1669

cond.end.1669:                                    ; preds = %cond.false.1664, %cond.true.1645
  %cond1670 = phi i64 [ %sub1663, %cond.true.1645 ], [ %add1668, %cond.false.1664 ]
  %div1671 = sdiv i64 %cond1670, 1
  %329 = load i32, i32* %row_bytes, align 4
  %conv1672 = zext i32 %329 to i64
  %cmp1673 = icmp slt i64 %div1671, %conv1672
  br i1 %cmp1673, label %cond.true.1762, label %lor.lhs.false.1745

cond.false.1675:                                  ; preds = %lor.lhs.false.1604
  br i1 false, label %cond.true.1676, label %cond.false.1677

cond.true.1676:                                   ; preds = %cond.false.1675
  br i1 false, label %cond.true.1762, label %lor.lhs.false.1745

cond.false.1677:                                  ; preds = %cond.false.1675
  %330 = load i32, i32* %row_bytes, align 4
  %conv1678 = zext i32 %330 to i64
  %cmp1679 = icmp slt i64 %conv1678, 0
  br i1 %cmp1679, label %cond.true.1681, label %cond.false.1718

cond.true.1681:                                   ; preds = %cond.false.1677
  %331 = load i32, i32* %row_bytes, align 4
  %conv1682 = zext i32 %331 to i64
  %332 = load i32, i32* %row_bytes, align 4
  %conv1683 = zext i32 %332 to i64
  %add1684 = add nsw i64 0, %conv1683
  %mul1685 = mul nsw i64 0, %add1684
  %sub1686 = sub nsw i64 %mul1685, 1
  %cmp1687 = icmp slt i64 %sub1686, 0
  br i1 %cmp1687, label %cond.true.1689, label %cond.false.1708

cond.true.1689:                                   ; preds = %cond.true.1681
  %333 = load i32, i32* %row_bytes, align 4
  %conv1690 = zext i32 %333 to i64
  %add1691 = add nsw i64 0, %conv1690
  %mul1692 = mul nsw i64 0, %add1691
  %add1693 = add nsw i64 %mul1692, 0
  %neg1694 = xor i64 %add1693, -1
  %cmp1695 = icmp eq i64 %neg1694, -1
  %conv1696 = zext i1 %cmp1695 to i32
  %sub1697 = sub nsw i32 0, %conv1696
  %conv1698 = sext i32 %sub1697 to i64
  %334 = load i32, i32* %row_bytes, align 4
  %conv1699 = zext i32 %334 to i64
  %add1700 = add nsw i64 0, %conv1699
  %mul1701 = mul nsw i64 0, %add1700
  %add1702 = add nsw i64 %mul1701, 1
  %shl1703 = shl i64 %add1702, 62
  %sub1704 = sub nsw i64 %shl1703, 1
  %mul1705 = mul nsw i64 %sub1704, 2
  %add1706 = add nsw i64 %mul1705, 1
  %sub1707 = sub nsw i64 %conv1698, %add1706
  br label %cond.end.1713

cond.false.1708:                                  ; preds = %cond.true.1681
  %335 = load i32, i32* %row_bytes, align 4
  %conv1709 = zext i32 %335 to i64
  %add1710 = add nsw i64 0, %conv1709
  %mul1711 = mul nsw i64 0, %add1710
  %add1712 = add nsw i64 %mul1711, 0
  br label %cond.end.1713

cond.end.1713:                                    ; preds = %cond.false.1708, %cond.true.1689
  %cond1714 = phi i64 [ %sub1707, %cond.true.1689 ], [ %add1712, %cond.false.1708 ]
  %div1715 = sdiv i64 %cond1714, 1
  %cmp1716 = icmp slt i64 %conv1682, %div1715
  br i1 %cmp1716, label %cond.true.1762, label %lor.lhs.false.1745

cond.false.1718:                                  ; preds = %cond.false.1677
  %336 = load i32, i32* %row_bytes, align 4
  %conv1719 = zext i32 %336 to i64
  %add1720 = add nsw i64 0, %conv1719
  %mul1721 = mul nsw i64 0, %add1720
  %sub1722 = sub nsw i64 %mul1721, 1
  %cmp1723 = icmp slt i64 %sub1722, 0
  br i1 %cmp1723, label %cond.true.1725, label %cond.false.1734

cond.true.1725:                                   ; preds = %cond.false.1718
  %337 = load i32, i32* %row_bytes, align 4
  %conv1726 = zext i32 %337 to i64
  %add1727 = add nsw i64 0, %conv1726
  %mul1728 = mul nsw i64 0, %add1727
  %add1729 = add nsw i64 %mul1728, 1
  %shl1730 = shl i64 %add1729, 62
  %sub1731 = sub nsw i64 %shl1730, 1
  %mul1732 = mul nsw i64 %sub1731, 2
  %add1733 = add nsw i64 %mul1732, 1
  br label %cond.end.1739

cond.false.1734:                                  ; preds = %cond.false.1718
  %338 = load i32, i32* %row_bytes, align 4
  %conv1735 = zext i32 %338 to i64
  %add1736 = add nsw i64 0, %conv1735
  %mul1737 = mul nsw i64 0, %add1736
  %sub1738 = sub nsw i64 %mul1737, 1
  br label %cond.end.1739

cond.end.1739:                                    ; preds = %cond.false.1734, %cond.true.1725
  %cond1740 = phi i64 [ %add1733, %cond.true.1725 ], [ %sub1738, %cond.false.1734 ]
  %div1741 = sdiv i64 %cond1740, 1
  %339 = load i32, i32* %row_bytes, align 4
  %conv1742 = zext i32 %339 to i64
  %cmp1743 = icmp slt i64 %div1741, %conv1742
  br i1 %cmp1743, label %cond.true.1762, label %lor.lhs.false.1745

lor.lhs.false.1745:                               ; preds = %cond.end.1739, %cond.end.1713, %cond.true.1676, %cond.end.1669, %cond.true.1637, %cond.end.1631
  %340 = load i32, i32* %row_bytes, align 4
  %conv1746 = zext i32 %340 to i64
  %mul1747 = mul nsw i64 %conv1746, 1
  %mul1748 = mul nsw i64 0, %mul1747
  %sub1749 = sub nsw i64 %mul1748, 1
  %cmp1750 = icmp slt i64 %sub1749, 0
  br i1 %cmp1750, label %land.lhs.true.1752, label %lor.lhs.false.1757

land.lhs.true.1752:                               ; preds = %lor.lhs.false.1745
  %341 = load i32, i32* %row_bytes, align 4
  %conv1753 = zext i32 %341 to i64
  %mul1754 = mul nsw i64 %conv1753, 1
  %cmp1755 = icmp slt i64 %mul1754, -9223372036854775808
  br i1 %cmp1755, label %cond.true.1762, label %lor.lhs.false.1757

lor.lhs.false.1757:                               ; preds = %land.lhs.true.1752, %lor.lhs.false.1745
  %342 = load i32, i32* %row_bytes, align 4
  %conv1758 = zext i32 %342 to i64
  %mul1759 = mul nsw i64 %conv1758, 1
  %cmp1760 = icmp slt i64 9223372036854775807, %mul1759
  br i1 %cmp1760, label %cond.true.1762, label %cond.false.1777

cond.true.1762:                                   ; preds = %lor.lhs.false.1757, %land.lhs.true.1752, %cond.end.1739, %cond.end.1713, %cond.true.1676, %cond.end.1669, %cond.true.1637, %cond.end.1631, %land.lhs.true.1600
  %343 = load i32, i32* %row_bytes, align 4
  %conv1763 = zext i32 %343 to i64
  %mul1764 = mul i64 %conv1763, 1
  %cmp1765 = icmp ule i64 %mul1764, 9223372036854775807
  br i1 %cmp1765, label %cond.true.1767, label %cond.false.1770

cond.true.1767:                                   ; preds = %cond.true.1762
  %344 = load i32, i32* %row_bytes, align 4
  %conv1768 = zext i32 %344 to i64
  %mul1769 = mul i64 %conv1768, 1
  br label %cond.end.1775

cond.false.1770:                                  ; preds = %cond.true.1762
  %345 = load i32, i32* %row_bytes, align 4
  %conv1771 = zext i32 %345 to i64
  %mul1772 = mul i64 %conv1771, 1
  %sub1773 = sub i64 %mul1772, -9223372036854775808
  %add1774 = add nsw i64 %sub1773, -9223372036854775808
  br label %cond.end.1775

cond.end.1775:                                    ; preds = %cond.false.1770, %cond.true.1767
  %cond1776 = phi i64 [ %mul1769, %cond.true.1767 ], [ %add1774, %cond.false.1770 ]
  store i64 %cond1776, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1777:                                  ; preds = %lor.lhs.false.1757
  %346 = load i32, i32* %row_bytes, align 4
  %conv1778 = zext i32 %346 to i64
  %mul1779 = mul i64 %conv1778, 1
  %cmp1780 = icmp ule i64 %mul1779, 9223372036854775807
  br i1 %cmp1780, label %cond.true.1782, label %cond.false.1785

cond.true.1782:                                   ; preds = %cond.false.1777
  %347 = load i32, i32* %row_bytes, align 4
  %conv1783 = zext i32 %347 to i64
  %mul1784 = mul i64 %conv1783, 1
  br label %cond.end.1790

cond.false.1785:                                  ; preds = %cond.false.1777
  %348 = load i32, i32* %row_bytes, align 4
  %conv1786 = zext i32 %348 to i64
  %mul1787 = mul i64 %conv1786, 1
  %sub1788 = sub i64 %mul1787, -9223372036854775808
  %add1789 = add nsw i64 %sub1788, -9223372036854775808
  br label %cond.end.1790

cond.end.1790:                                    ; preds = %cond.false.1785, %cond.true.1782
  %cond1791 = phi i64 [ %mul1784, %cond.true.1782 ], [ %add1789, %cond.false.1785 ]
  store i64 %cond1791, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.1792:                                  ; preds = %cond.true.1564
  %349 = load i32, i32* %row_bytes, align 4
  %conv1793 = zext i32 %349 to i64
  %add1794 = add i64 0, %conv1793
  %mul1795 = mul i64 0, %add1794
  %sub1796 = sub i64 %mul1795, 1
  %cmp1797 = icmp ult i64 %sub1796, 0
  br i1 %cmp1797, label %cond.true.1799, label %cond.false.1818

cond.true.1799:                                   ; preds = %cond.false.1792
  %350 = load i32, i32* %row_bytes, align 4
  %conv1800 = zext i32 %350 to i64
  %add1801 = add i64 0, %conv1800
  %mul1802 = mul i64 0, %add1801
  %add1803 = add i64 %mul1802, 0
  %neg1804 = xor i64 %add1803, -1
  %cmp1805 = icmp eq i64 %neg1804, -1
  %conv1806 = zext i1 %cmp1805 to i32
  %sub1807 = sub nsw i32 0, %conv1806
  %conv1808 = sext i32 %sub1807 to i64
  %351 = load i32, i32* %row_bytes, align 4
  %conv1809 = zext i32 %351 to i64
  %add1810 = add i64 0, %conv1809
  %mul1811 = mul i64 0, %add1810
  %add1812 = add i64 %mul1811, 1
  %shl1813 = shl i64 %add1812, 62
  %sub1814 = sub i64 %shl1813, 1
  %mul1815 = mul i64 %sub1814, 2
  %add1816 = add i64 %mul1815, 1
  %sub1817 = sub i64 %conv1808, %add1816
  br label %cond.end.1823

cond.false.1818:                                  ; preds = %cond.false.1792
  %352 = load i32, i32* %row_bytes, align 4
  %conv1819 = zext i32 %352 to i64
  %add1820 = add i64 0, %conv1819
  %mul1821 = mul i64 0, %add1820
  %add1822 = add i64 %mul1821, 0
  br label %cond.end.1823

cond.end.1823:                                    ; preds = %cond.false.1818, %cond.true.1799
  %cond1824 = phi i64 [ %sub1817, %cond.true.1799 ], [ %add1822, %cond.false.1818 ]
  %cmp1825 = icmp eq i64 %cond1824, 0
  br i1 %cmp1825, label %land.lhs.true.1827, label %lor.lhs.false.1830

land.lhs.true.1827:                               ; preds = %cond.end.1823
  %353 = load i32, i32* %row_bytes, align 4
  %cmp1828 = icmp ult i32 %353, 0
  br i1 %cmp1828, label %cond.true.1986, label %lor.lhs.false.1830

lor.lhs.false.1830:                               ; preds = %land.lhs.true.1827, %cond.end.1823
  br i1 false, label %cond.true.1831, label %cond.false.1900

cond.true.1831:                                   ; preds = %lor.lhs.false.1830
  %354 = load i32, i32* %row_bytes, align 4
  %cmp1832 = icmp ult i32 %354, 0
  br i1 %cmp1832, label %cond.true.1834, label %cond.false.1861

cond.true.1834:                                   ; preds = %cond.true.1831
  %355 = load i32, i32* %row_bytes, align 4
  %conv1835 = zext i32 %355 to i64
  %356 = load i32, i32* %row_bytes, align 4
  %conv1836 = zext i32 %356 to i64
  %add1837 = add i64 0, %conv1836
  %mul1838 = mul i64 0, %add1837
  %sub1839 = sub i64 %mul1838, 1
  %cmp1840 = icmp ult i64 %sub1839, 0
  br i1 %cmp1840, label %cond.true.1842, label %cond.false.1851

cond.true.1842:                                   ; preds = %cond.true.1834
  %357 = load i32, i32* %row_bytes, align 4
  %conv1843 = zext i32 %357 to i64
  %add1844 = add i64 0, %conv1843
  %mul1845 = mul i64 0, %add1844
  %add1846 = add i64 %mul1845, 1
  %shl1847 = shl i64 %add1846, 62
  %sub1848 = sub i64 %shl1847, 1
  %mul1849 = mul i64 %sub1848, 2
  %add1850 = add i64 %mul1849, 1
  br label %cond.end.1856

cond.false.1851:                                  ; preds = %cond.true.1834
  %358 = load i32, i32* %row_bytes, align 4
  %conv1852 = zext i32 %358 to i64
  %add1853 = add i64 0, %conv1852
  %mul1854 = mul i64 0, %add1853
  %sub1855 = sub i64 %mul1854, 1
  br label %cond.end.1856

cond.end.1856:                                    ; preds = %cond.false.1851, %cond.true.1842
  %cond1857 = phi i64 [ %add1850, %cond.true.1842 ], [ %sub1855, %cond.false.1851 ]
  %div1858 = udiv i64 %cond1857, 1
  %cmp1859 = icmp ult i64 %conv1835, %div1858
  br i1 %cmp1859, label %cond.true.1986, label %lor.lhs.false.1969

cond.false.1861:                                  ; preds = %cond.true.1831
  br i1 false, label %cond.true.1862, label %cond.false.1863

cond.true.1862:                                   ; preds = %cond.false.1861
  br i1 false, label %cond.true.1986, label %lor.lhs.false.1969

cond.false.1863:                                  ; preds = %cond.false.1861
  %359 = load i32, i32* %row_bytes, align 4
  %conv1864 = zext i32 %359 to i64
  %add1865 = add i64 0, %conv1864
  %mul1866 = mul i64 0, %add1865
  %sub1867 = sub i64 %mul1866, 1
  %cmp1868 = icmp ult i64 %sub1867, 0
  br i1 %cmp1868, label %cond.true.1870, label %cond.false.1889

cond.true.1870:                                   ; preds = %cond.false.1863
  %360 = load i32, i32* %row_bytes, align 4
  %conv1871 = zext i32 %360 to i64
  %add1872 = add i64 0, %conv1871
  %mul1873 = mul i64 0, %add1872
  %add1874 = add i64 %mul1873, 0
  %neg1875 = xor i64 %add1874, -1
  %cmp1876 = icmp eq i64 %neg1875, -1
  %conv1877 = zext i1 %cmp1876 to i32
  %sub1878 = sub nsw i32 0, %conv1877
  %conv1879 = sext i32 %sub1878 to i64
  %361 = load i32, i32* %row_bytes, align 4
  %conv1880 = zext i32 %361 to i64
  %add1881 = add i64 0, %conv1880
  %mul1882 = mul i64 0, %add1881
  %add1883 = add i64 %mul1882, 1
  %shl1884 = shl i64 %add1883, 62
  %sub1885 = sub i64 %shl1884, 1
  %mul1886 = mul i64 %sub1885, 2
  %add1887 = add i64 %mul1886, 1
  %sub1888 = sub i64 %conv1879, %add1887
  br label %cond.end.1894

cond.false.1889:                                  ; preds = %cond.false.1863
  %362 = load i32, i32* %row_bytes, align 4
  %conv1890 = zext i32 %362 to i64
  %add1891 = add i64 0, %conv1890
  %mul1892 = mul i64 0, %add1891
  %add1893 = add i64 %mul1892, 0
  br label %cond.end.1894

cond.end.1894:                                    ; preds = %cond.false.1889, %cond.true.1870
  %cond1895 = phi i64 [ %sub1888, %cond.true.1870 ], [ %add1893, %cond.false.1889 ]
  %div1896 = udiv i64 %cond1895, 1
  %363 = load i32, i32* %row_bytes, align 4
  %conv1897 = zext i32 %363 to i64
  %cmp1898 = icmp ult i64 %div1896, %conv1897
  br i1 %cmp1898, label %cond.true.1986, label %lor.lhs.false.1969

cond.false.1900:                                  ; preds = %lor.lhs.false.1830
  br i1 false, label %cond.true.1901, label %cond.false.1902

cond.true.1901:                                   ; preds = %cond.false.1900
  br i1 false, label %cond.true.1986, label %lor.lhs.false.1969

cond.false.1902:                                  ; preds = %cond.false.1900
  %364 = load i32, i32* %row_bytes, align 4
  %cmp1903 = icmp ult i32 %364, 0
  br i1 %cmp1903, label %cond.true.1905, label %cond.false.1942

cond.true.1905:                                   ; preds = %cond.false.1902
  %365 = load i32, i32* %row_bytes, align 4
  %conv1906 = zext i32 %365 to i64
  %366 = load i32, i32* %row_bytes, align 4
  %conv1907 = zext i32 %366 to i64
  %add1908 = add i64 0, %conv1907
  %mul1909 = mul i64 0, %add1908
  %sub1910 = sub i64 %mul1909, 1
  %cmp1911 = icmp ult i64 %sub1910, 0
  br i1 %cmp1911, label %cond.true.1913, label %cond.false.1932

cond.true.1913:                                   ; preds = %cond.true.1905
  %367 = load i32, i32* %row_bytes, align 4
  %conv1914 = zext i32 %367 to i64
  %add1915 = add i64 0, %conv1914
  %mul1916 = mul i64 0, %add1915
  %add1917 = add i64 %mul1916, 0
  %neg1918 = xor i64 %add1917, -1
  %cmp1919 = icmp eq i64 %neg1918, -1
  %conv1920 = zext i1 %cmp1919 to i32
  %sub1921 = sub nsw i32 0, %conv1920
  %conv1922 = sext i32 %sub1921 to i64
  %368 = load i32, i32* %row_bytes, align 4
  %conv1923 = zext i32 %368 to i64
  %add1924 = add i64 0, %conv1923
  %mul1925 = mul i64 0, %add1924
  %add1926 = add i64 %mul1925, 1
  %shl1927 = shl i64 %add1926, 62
  %sub1928 = sub i64 %shl1927, 1
  %mul1929 = mul i64 %sub1928, 2
  %add1930 = add i64 %mul1929, 1
  %sub1931 = sub i64 %conv1922, %add1930
  br label %cond.end.1937

cond.false.1932:                                  ; preds = %cond.true.1905
  %369 = load i32, i32* %row_bytes, align 4
  %conv1933 = zext i32 %369 to i64
  %add1934 = add i64 0, %conv1933
  %mul1935 = mul i64 0, %add1934
  %add1936 = add i64 %mul1935, 0
  br label %cond.end.1937

cond.end.1937:                                    ; preds = %cond.false.1932, %cond.true.1913
  %cond1938 = phi i64 [ %sub1931, %cond.true.1913 ], [ %add1936, %cond.false.1932 ]
  %div1939 = udiv i64 %cond1938, 1
  %cmp1940 = icmp ult i64 %conv1906, %div1939
  br i1 %cmp1940, label %cond.true.1986, label %lor.lhs.false.1969

cond.false.1942:                                  ; preds = %cond.false.1902
  %370 = load i32, i32* %row_bytes, align 4
  %conv1943 = zext i32 %370 to i64
  %add1944 = add i64 0, %conv1943
  %mul1945 = mul i64 0, %add1944
  %sub1946 = sub i64 %mul1945, 1
  %cmp1947 = icmp ult i64 %sub1946, 0
  br i1 %cmp1947, label %cond.true.1949, label %cond.false.1958

cond.true.1949:                                   ; preds = %cond.false.1942
  %371 = load i32, i32* %row_bytes, align 4
  %conv1950 = zext i32 %371 to i64
  %add1951 = add i64 0, %conv1950
  %mul1952 = mul i64 0, %add1951
  %add1953 = add i64 %mul1952, 1
  %shl1954 = shl i64 %add1953, 62
  %sub1955 = sub i64 %shl1954, 1
  %mul1956 = mul i64 %sub1955, 2
  %add1957 = add i64 %mul1956, 1
  br label %cond.end.1963

cond.false.1958:                                  ; preds = %cond.false.1942
  %372 = load i32, i32* %row_bytes, align 4
  %conv1959 = zext i32 %372 to i64
  %add1960 = add i64 0, %conv1959
  %mul1961 = mul i64 0, %add1960
  %sub1962 = sub i64 %mul1961, 1
  br label %cond.end.1963

cond.end.1963:                                    ; preds = %cond.false.1958, %cond.true.1949
  %cond1964 = phi i64 [ %add1957, %cond.true.1949 ], [ %sub1962, %cond.false.1958 ]
  %div1965 = udiv i64 %cond1964, 1
  %373 = load i32, i32* %row_bytes, align 4
  %conv1966 = zext i32 %373 to i64
  %cmp1967 = icmp ult i64 %div1965, %conv1966
  br i1 %cmp1967, label %cond.true.1986, label %lor.lhs.false.1969

lor.lhs.false.1969:                               ; preds = %cond.end.1963, %cond.end.1937, %cond.true.1901, %cond.end.1894, %cond.true.1862, %cond.end.1856
  %374 = load i32, i32* %row_bytes, align 4
  %conv1970 = zext i32 %374 to i64
  %mul1971 = mul i64 %conv1970, 1
  %mul1972 = mul i64 0, %mul1971
  %sub1973 = sub i64 %mul1972, 1
  %cmp1974 = icmp ult i64 %sub1973, 0
  br i1 %cmp1974, label %land.lhs.true.1976, label %lor.lhs.false.1981

land.lhs.true.1976:                               ; preds = %lor.lhs.false.1969
  %375 = load i32, i32* %row_bytes, align 4
  %conv1977 = zext i32 %375 to i64
  %mul1978 = mul i64 %conv1977, 1
  %cmp1979 = icmp ult i64 %mul1978, -9223372036854775808
  br i1 %cmp1979, label %cond.true.1986, label %lor.lhs.false.1981

lor.lhs.false.1981:                               ; preds = %land.lhs.true.1976, %lor.lhs.false.1969
  %376 = load i32, i32* %row_bytes, align 4
  %conv1982 = zext i32 %376 to i64
  %mul1983 = mul i64 %conv1982, 1
  %cmp1984 = icmp ult i64 9223372036854775807, %mul1983
  br i1 %cmp1984, label %cond.true.1986, label %cond.false.2001

cond.true.1986:                                   ; preds = %lor.lhs.false.1981, %land.lhs.true.1976, %cond.end.1963, %cond.end.1937, %cond.true.1901, %cond.end.1894, %cond.true.1862, %cond.end.1856, %land.lhs.true.1827
  %377 = load i32, i32* %row_bytes, align 4
  %conv1987 = zext i32 %377 to i64
  %mul1988 = mul i64 %conv1987, 1
  %cmp1989 = icmp ule i64 %mul1988, 9223372036854775807
  br i1 %cmp1989, label %cond.true.1991, label %cond.false.1994

cond.true.1991:                                   ; preds = %cond.true.1986
  %378 = load i32, i32* %row_bytes, align 4
  %conv1992 = zext i32 %378 to i64
  %mul1993 = mul i64 %conv1992, 1
  br label %cond.end.1999

cond.false.1994:                                  ; preds = %cond.true.1986
  %379 = load i32, i32* %row_bytes, align 4
  %conv1995 = zext i32 %379 to i64
  %mul1996 = mul i64 %conv1995, 1
  %sub1997 = sub i64 %mul1996, -9223372036854775808
  %add1998 = add nsw i64 %sub1997, -9223372036854775808
  br label %cond.end.1999

cond.end.1999:                                    ; preds = %cond.false.1994, %cond.true.1991
  %cond2000 = phi i64 [ %mul1993, %cond.true.1991 ], [ %add1998, %cond.false.1994 ]
  store i64 %cond2000, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.2001:                                  ; preds = %lor.lhs.false.1981
  %380 = load i32, i32* %row_bytes, align 4
  %conv2002 = zext i32 %380 to i64
  %mul2003 = mul i64 %conv2002, 1
  %cmp2004 = icmp ule i64 %mul2003, 9223372036854775807
  br i1 %cmp2004, label %cond.true.2006, label %cond.false.2009

cond.true.2006:                                   ; preds = %cond.false.2001
  %381 = load i32, i32* %row_bytes, align 4
  %conv2007 = zext i32 %381 to i64
  %mul2008 = mul i64 %conv2007, 1
  br label %cond.end.2014

cond.false.2009:                                  ; preds = %cond.false.2001
  %382 = load i32, i32* %row_bytes, align 4
  %conv2010 = zext i32 %382 to i64
  %mul2011 = mul i64 %conv2010, 1
  %sub2012 = sub i64 %mul2011, -9223372036854775808
  %add2013 = add nsw i64 %sub2012, -9223372036854775808
  br label %cond.end.2014

cond.end.2014:                                    ; preds = %cond.false.2009, %cond.true.2006
  %cond2015 = phi i64 [ %mul2008, %cond.true.2006 ], [ %add2013, %cond.false.2009 ]
  store i64 %cond2015, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.2016:                                  ; preds = %cond.false.1563
  br i1 false, label %cond.true.2017, label %cond.false.2244

cond.true.2017:                                   ; preds = %cond.false.2016
  %383 = load i32, i32* %row_bytes, align 4
  %conv2018 = zext i32 %383 to i64
  %add2019 = add nsw i64 0, %conv2018
  %mul2020 = mul nsw i64 0, %add2019
  %sub2021 = sub nsw i64 %mul2020, 1
  %cmp2022 = icmp slt i64 %sub2021, 0
  br i1 %cmp2022, label %cond.true.2024, label %cond.false.2043

cond.true.2024:                                   ; preds = %cond.true.2017
  %384 = load i32, i32* %row_bytes, align 4
  %conv2025 = zext i32 %384 to i64
  %add2026 = add nsw i64 0, %conv2025
  %mul2027 = mul nsw i64 0, %add2026
  %add2028 = add nsw i64 %mul2027, 0
  %neg2029 = xor i64 %add2028, -1
  %cmp2030 = icmp eq i64 %neg2029, -1
  %conv2031 = zext i1 %cmp2030 to i32
  %sub2032 = sub nsw i32 0, %conv2031
  %conv2033 = sext i32 %sub2032 to i64
  %385 = load i32, i32* %row_bytes, align 4
  %conv2034 = zext i32 %385 to i64
  %add2035 = add nsw i64 0, %conv2034
  %mul2036 = mul nsw i64 0, %add2035
  %add2037 = add nsw i64 %mul2036, 1
  %shl2038 = shl i64 %add2037, 62
  %sub2039 = sub nsw i64 %shl2038, 1
  %mul2040 = mul nsw i64 %sub2039, 2
  %add2041 = add nsw i64 %mul2040, 1
  %sub2042 = sub nsw i64 %conv2033, %add2041
  br label %cond.end.2048

cond.false.2043:                                  ; preds = %cond.true.2017
  %386 = load i32, i32* %row_bytes, align 4
  %conv2044 = zext i32 %386 to i64
  %add2045 = add nsw i64 0, %conv2044
  %mul2046 = mul nsw i64 0, %add2045
  %add2047 = add nsw i64 %mul2046, 0
  br label %cond.end.2048

cond.end.2048:                                    ; preds = %cond.false.2043, %cond.true.2024
  %cond2049 = phi i64 [ %sub2042, %cond.true.2024 ], [ %add2047, %cond.false.2043 ]
  %cmp2050 = icmp eq i64 %cond2049, 0
  br i1 %cmp2050, label %land.lhs.true.2052, label %lor.lhs.false.2056

land.lhs.true.2052:                               ; preds = %cond.end.2048
  %387 = load i32, i32* %row_bytes, align 4
  %conv2053 = zext i32 %387 to i64
  %cmp2054 = icmp slt i64 %conv2053, 0
  br i1 %cmp2054, label %cond.true.2214, label %lor.lhs.false.2056

lor.lhs.false.2056:                               ; preds = %land.lhs.true.2052, %cond.end.2048
  br i1 false, label %cond.true.2057, label %cond.false.2127

cond.true.2057:                                   ; preds = %lor.lhs.false.2056
  %388 = load i32, i32* %row_bytes, align 4
  %conv2058 = zext i32 %388 to i64
  %cmp2059 = icmp slt i64 %conv2058, 0
  br i1 %cmp2059, label %cond.true.2061, label %cond.false.2088

cond.true.2061:                                   ; preds = %cond.true.2057
  %389 = load i32, i32* %row_bytes, align 4
  %conv2062 = zext i32 %389 to i64
  %390 = load i32, i32* %row_bytes, align 4
  %conv2063 = zext i32 %390 to i64
  %add2064 = add nsw i64 0, %conv2063
  %mul2065 = mul nsw i64 0, %add2064
  %sub2066 = sub nsw i64 %mul2065, 1
  %cmp2067 = icmp slt i64 %sub2066, 0
  br i1 %cmp2067, label %cond.true.2069, label %cond.false.2078

cond.true.2069:                                   ; preds = %cond.true.2061
  %391 = load i32, i32* %row_bytes, align 4
  %conv2070 = zext i32 %391 to i64
  %add2071 = add nsw i64 0, %conv2070
  %mul2072 = mul nsw i64 0, %add2071
  %add2073 = add nsw i64 %mul2072, 1
  %shl2074 = shl i64 %add2073, 62
  %sub2075 = sub nsw i64 %shl2074, 1
  %mul2076 = mul nsw i64 %sub2075, 2
  %add2077 = add nsw i64 %mul2076, 1
  br label %cond.end.2083

cond.false.2078:                                  ; preds = %cond.true.2061
  %392 = load i32, i32* %row_bytes, align 4
  %conv2079 = zext i32 %392 to i64
  %add2080 = add nsw i64 0, %conv2079
  %mul2081 = mul nsw i64 0, %add2080
  %sub2082 = sub nsw i64 %mul2081, 1
  br label %cond.end.2083

cond.end.2083:                                    ; preds = %cond.false.2078, %cond.true.2069
  %cond2084 = phi i64 [ %add2077, %cond.true.2069 ], [ %sub2082, %cond.false.2078 ]
  %div2085 = sdiv i64 %cond2084, 1
  %cmp2086 = icmp slt i64 %conv2062, %div2085
  br i1 %cmp2086, label %cond.true.2214, label %lor.lhs.false.2197

cond.false.2088:                                  ; preds = %cond.true.2057
  br i1 false, label %cond.true.2089, label %cond.false.2090

cond.true.2089:                                   ; preds = %cond.false.2088
  br i1 false, label %cond.true.2214, label %lor.lhs.false.2197

cond.false.2090:                                  ; preds = %cond.false.2088
  %393 = load i32, i32* %row_bytes, align 4
  %conv2091 = zext i32 %393 to i64
  %add2092 = add nsw i64 0, %conv2091
  %mul2093 = mul nsw i64 0, %add2092
  %sub2094 = sub nsw i64 %mul2093, 1
  %cmp2095 = icmp slt i64 %sub2094, 0
  br i1 %cmp2095, label %cond.true.2097, label %cond.false.2116

cond.true.2097:                                   ; preds = %cond.false.2090
  %394 = load i32, i32* %row_bytes, align 4
  %conv2098 = zext i32 %394 to i64
  %add2099 = add nsw i64 0, %conv2098
  %mul2100 = mul nsw i64 0, %add2099
  %add2101 = add nsw i64 %mul2100, 0
  %neg2102 = xor i64 %add2101, -1
  %cmp2103 = icmp eq i64 %neg2102, -1
  %conv2104 = zext i1 %cmp2103 to i32
  %sub2105 = sub nsw i32 0, %conv2104
  %conv2106 = sext i32 %sub2105 to i64
  %395 = load i32, i32* %row_bytes, align 4
  %conv2107 = zext i32 %395 to i64
  %add2108 = add nsw i64 0, %conv2107
  %mul2109 = mul nsw i64 0, %add2108
  %add2110 = add nsw i64 %mul2109, 1
  %shl2111 = shl i64 %add2110, 62
  %sub2112 = sub nsw i64 %shl2111, 1
  %mul2113 = mul nsw i64 %sub2112, 2
  %add2114 = add nsw i64 %mul2113, 1
  %sub2115 = sub nsw i64 %conv2106, %add2114
  br label %cond.end.2121

cond.false.2116:                                  ; preds = %cond.false.2090
  %396 = load i32, i32* %row_bytes, align 4
  %conv2117 = zext i32 %396 to i64
  %add2118 = add nsw i64 0, %conv2117
  %mul2119 = mul nsw i64 0, %add2118
  %add2120 = add nsw i64 %mul2119, 0
  br label %cond.end.2121

cond.end.2121:                                    ; preds = %cond.false.2116, %cond.true.2097
  %cond2122 = phi i64 [ %sub2115, %cond.true.2097 ], [ %add2120, %cond.false.2116 ]
  %div2123 = sdiv i64 %cond2122, 1
  %397 = load i32, i32* %row_bytes, align 4
  %conv2124 = zext i32 %397 to i64
  %cmp2125 = icmp slt i64 %div2123, %conv2124
  br i1 %cmp2125, label %cond.true.2214, label %lor.lhs.false.2197

cond.false.2127:                                  ; preds = %lor.lhs.false.2056
  br i1 false, label %cond.true.2128, label %cond.false.2129

cond.true.2128:                                   ; preds = %cond.false.2127
  br i1 false, label %cond.true.2214, label %lor.lhs.false.2197

cond.false.2129:                                  ; preds = %cond.false.2127
  %398 = load i32, i32* %row_bytes, align 4
  %conv2130 = zext i32 %398 to i64
  %cmp2131 = icmp slt i64 %conv2130, 0
  br i1 %cmp2131, label %cond.true.2133, label %cond.false.2170

cond.true.2133:                                   ; preds = %cond.false.2129
  %399 = load i32, i32* %row_bytes, align 4
  %conv2134 = zext i32 %399 to i64
  %400 = load i32, i32* %row_bytes, align 4
  %conv2135 = zext i32 %400 to i64
  %add2136 = add nsw i64 0, %conv2135
  %mul2137 = mul nsw i64 0, %add2136
  %sub2138 = sub nsw i64 %mul2137, 1
  %cmp2139 = icmp slt i64 %sub2138, 0
  br i1 %cmp2139, label %cond.true.2141, label %cond.false.2160

cond.true.2141:                                   ; preds = %cond.true.2133
  %401 = load i32, i32* %row_bytes, align 4
  %conv2142 = zext i32 %401 to i64
  %add2143 = add nsw i64 0, %conv2142
  %mul2144 = mul nsw i64 0, %add2143
  %add2145 = add nsw i64 %mul2144, 0
  %neg2146 = xor i64 %add2145, -1
  %cmp2147 = icmp eq i64 %neg2146, -1
  %conv2148 = zext i1 %cmp2147 to i32
  %sub2149 = sub nsw i32 0, %conv2148
  %conv2150 = sext i32 %sub2149 to i64
  %402 = load i32, i32* %row_bytes, align 4
  %conv2151 = zext i32 %402 to i64
  %add2152 = add nsw i64 0, %conv2151
  %mul2153 = mul nsw i64 0, %add2152
  %add2154 = add nsw i64 %mul2153, 1
  %shl2155 = shl i64 %add2154, 62
  %sub2156 = sub nsw i64 %shl2155, 1
  %mul2157 = mul nsw i64 %sub2156, 2
  %add2158 = add nsw i64 %mul2157, 1
  %sub2159 = sub nsw i64 %conv2150, %add2158
  br label %cond.end.2165

cond.false.2160:                                  ; preds = %cond.true.2133
  %403 = load i32, i32* %row_bytes, align 4
  %conv2161 = zext i32 %403 to i64
  %add2162 = add nsw i64 0, %conv2161
  %mul2163 = mul nsw i64 0, %add2162
  %add2164 = add nsw i64 %mul2163, 0
  br label %cond.end.2165

cond.end.2165:                                    ; preds = %cond.false.2160, %cond.true.2141
  %cond2166 = phi i64 [ %sub2159, %cond.true.2141 ], [ %add2164, %cond.false.2160 ]
  %div2167 = sdiv i64 %cond2166, 1
  %cmp2168 = icmp slt i64 %conv2134, %div2167
  br i1 %cmp2168, label %cond.true.2214, label %lor.lhs.false.2197

cond.false.2170:                                  ; preds = %cond.false.2129
  %404 = load i32, i32* %row_bytes, align 4
  %conv2171 = zext i32 %404 to i64
  %add2172 = add nsw i64 0, %conv2171
  %mul2173 = mul nsw i64 0, %add2172
  %sub2174 = sub nsw i64 %mul2173, 1
  %cmp2175 = icmp slt i64 %sub2174, 0
  br i1 %cmp2175, label %cond.true.2177, label %cond.false.2186

cond.true.2177:                                   ; preds = %cond.false.2170
  %405 = load i32, i32* %row_bytes, align 4
  %conv2178 = zext i32 %405 to i64
  %add2179 = add nsw i64 0, %conv2178
  %mul2180 = mul nsw i64 0, %add2179
  %add2181 = add nsw i64 %mul2180, 1
  %shl2182 = shl i64 %add2181, 62
  %sub2183 = sub nsw i64 %shl2182, 1
  %mul2184 = mul nsw i64 %sub2183, 2
  %add2185 = add nsw i64 %mul2184, 1
  br label %cond.end.2191

cond.false.2186:                                  ; preds = %cond.false.2170
  %406 = load i32, i32* %row_bytes, align 4
  %conv2187 = zext i32 %406 to i64
  %add2188 = add nsw i64 0, %conv2187
  %mul2189 = mul nsw i64 0, %add2188
  %sub2190 = sub nsw i64 %mul2189, 1
  br label %cond.end.2191

cond.end.2191:                                    ; preds = %cond.false.2186, %cond.true.2177
  %cond2192 = phi i64 [ %add2185, %cond.true.2177 ], [ %sub2190, %cond.false.2186 ]
  %div2193 = sdiv i64 %cond2192, 1
  %407 = load i32, i32* %row_bytes, align 4
  %conv2194 = zext i32 %407 to i64
  %cmp2195 = icmp slt i64 %div2193, %conv2194
  br i1 %cmp2195, label %cond.true.2214, label %lor.lhs.false.2197

lor.lhs.false.2197:                               ; preds = %cond.end.2191, %cond.end.2165, %cond.true.2128, %cond.end.2121, %cond.true.2089, %cond.end.2083
  %408 = load i32, i32* %row_bytes, align 4
  %conv2198 = zext i32 %408 to i64
  %mul2199 = mul nsw i64 %conv2198, 1
  %mul2200 = mul nsw i64 0, %mul2199
  %sub2201 = sub nsw i64 %mul2200, 1
  %cmp2202 = icmp slt i64 %sub2201, 0
  br i1 %cmp2202, label %land.lhs.true.2204, label %lor.lhs.false.2209

land.lhs.true.2204:                               ; preds = %lor.lhs.false.2197
  %409 = load i32, i32* %row_bytes, align 4
  %conv2205 = zext i32 %409 to i64
  %mul2206 = mul nsw i64 %conv2205, 1
  %cmp2207 = icmp slt i64 %mul2206, -9223372036854775808
  br i1 %cmp2207, label %cond.true.2214, label %lor.lhs.false.2209

lor.lhs.false.2209:                               ; preds = %land.lhs.true.2204, %lor.lhs.false.2197
  %410 = load i32, i32* %row_bytes, align 4
  %conv2210 = zext i32 %410 to i64
  %mul2211 = mul nsw i64 %conv2210, 1
  %cmp2212 = icmp slt i64 9223372036854775807, %mul2211
  br i1 %cmp2212, label %cond.true.2214, label %cond.false.2229

cond.true.2214:                                   ; preds = %lor.lhs.false.2209, %land.lhs.true.2204, %cond.end.2191, %cond.end.2165, %cond.true.2128, %cond.end.2121, %cond.true.2089, %cond.end.2083, %land.lhs.true.2052
  %411 = load i32, i32* %row_bytes, align 4
  %conv2215 = zext i32 %411 to i64
  %mul2216 = mul i64 %conv2215, 1
  %cmp2217 = icmp ule i64 %mul2216, 9223372036854775807
  br i1 %cmp2217, label %cond.true.2219, label %cond.false.2222

cond.true.2219:                                   ; preds = %cond.true.2214
  %412 = load i32, i32* %row_bytes, align 4
  %conv2220 = zext i32 %412 to i64
  %mul2221 = mul i64 %conv2220, 1
  br label %cond.end.2227

cond.false.2222:                                  ; preds = %cond.true.2214
  %413 = load i32, i32* %row_bytes, align 4
  %conv2223 = zext i32 %413 to i64
  %mul2224 = mul i64 %conv2223, 1
  %sub2225 = sub i64 %mul2224, -9223372036854775808
  %add2226 = add nsw i64 %sub2225, -9223372036854775808
  br label %cond.end.2227

cond.end.2227:                                    ; preds = %cond.false.2222, %cond.true.2219
  %cond2228 = phi i64 [ %mul2221, %cond.true.2219 ], [ %add2226, %cond.false.2222 ]
  store i64 %cond2228, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.2229:                                  ; preds = %lor.lhs.false.2209
  %414 = load i32, i32* %row_bytes, align 4
  %conv2230 = zext i32 %414 to i64
  %mul2231 = mul i64 %conv2230, 1
  %cmp2232 = icmp ule i64 %mul2231, 9223372036854775807
  br i1 %cmp2232, label %cond.true.2234, label %cond.false.2237

cond.true.2234:                                   ; preds = %cond.false.2229
  %415 = load i32, i32* %row_bytes, align 4
  %conv2235 = zext i32 %415 to i64
  %mul2236 = mul i64 %conv2235, 1
  br label %cond.end.2242

cond.false.2237:                                  ; preds = %cond.false.2229
  %416 = load i32, i32* %row_bytes, align 4
  %conv2238 = zext i32 %416 to i64
  %mul2239 = mul i64 %conv2238, 1
  %sub2240 = sub i64 %mul2239, -9223372036854775808
  %add2241 = add nsw i64 %sub2240, -9223372036854775808
  br label %cond.end.2242

cond.end.2242:                                    ; preds = %cond.false.2237, %cond.true.2234
  %cond2243 = phi i64 [ %mul2236, %cond.true.2234 ], [ %add2241, %cond.false.2237 ]
  store i64 %cond2243, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

cond.false.2244:                                  ; preds = %cond.false.2016
  %417 = load i32, i32* %row_bytes, align 4
  %conv2245 = zext i32 %417 to i64
  %add2246 = add i64 0, %conv2245
  %mul2247 = mul i64 0, %add2246
  %sub2248 = sub i64 %mul2247, 1
  %cmp2249 = icmp ult i64 %sub2248, 0
  br i1 %cmp2249, label %cond.true.2251, label %cond.false.2270

cond.true.2251:                                   ; preds = %cond.false.2244
  %418 = load i32, i32* %row_bytes, align 4
  %conv2252 = zext i32 %418 to i64
  %add2253 = add i64 0, %conv2252
  %mul2254 = mul i64 0, %add2253
  %add2255 = add i64 %mul2254, 0
  %neg2256 = xor i64 %add2255, -1
  %cmp2257 = icmp eq i64 %neg2256, -1
  %conv2258 = zext i1 %cmp2257 to i32
  %sub2259 = sub nsw i32 0, %conv2258
  %conv2260 = sext i32 %sub2259 to i64
  %419 = load i32, i32* %row_bytes, align 4
  %conv2261 = zext i32 %419 to i64
  %add2262 = add i64 0, %conv2261
  %mul2263 = mul i64 0, %add2262
  %add2264 = add i64 %mul2263, 1
  %shl2265 = shl i64 %add2264, 62
  %sub2266 = sub i64 %shl2265, 1
  %mul2267 = mul i64 %sub2266, 2
  %add2268 = add i64 %mul2267, 1
  %sub2269 = sub i64 %conv2260, %add2268
  br label %cond.end.2275

cond.false.2270:                                  ; preds = %cond.false.2244
  %420 = load i32, i32* %row_bytes, align 4
  %conv2271 = zext i32 %420 to i64
  %add2272 = add i64 0, %conv2271
  %mul2273 = mul i64 0, %add2272
  %add2274 = add i64 %mul2273, 0
  br label %cond.end.2275

cond.end.2275:                                    ; preds = %cond.false.2270, %cond.true.2251
  %cond2276 = phi i64 [ %sub2269, %cond.true.2251 ], [ %add2274, %cond.false.2270 ]
  %cmp2277 = icmp eq i64 %cond2276, 0
  br i1 %cmp2277, label %land.lhs.true.2279, label %lor.lhs.false.2282

land.lhs.true.2279:                               ; preds = %cond.end.2275
  %421 = load i32, i32* %row_bytes, align 4
  %cmp2280 = icmp ult i32 %421, 0
  br i1 %cmp2280, label %cond.true.2438, label %lor.lhs.false.2282

lor.lhs.false.2282:                               ; preds = %land.lhs.true.2279, %cond.end.2275
  br i1 false, label %cond.true.2283, label %cond.false.2352

cond.true.2283:                                   ; preds = %lor.lhs.false.2282
  %422 = load i32, i32* %row_bytes, align 4
  %cmp2284 = icmp ult i32 %422, 0
  br i1 %cmp2284, label %cond.true.2286, label %cond.false.2313

cond.true.2286:                                   ; preds = %cond.true.2283
  %423 = load i32, i32* %row_bytes, align 4
  %conv2287 = zext i32 %423 to i64
  %424 = load i32, i32* %row_bytes, align 4
  %conv2288 = zext i32 %424 to i64
  %add2289 = add i64 0, %conv2288
  %mul2290 = mul i64 0, %add2289
  %sub2291 = sub i64 %mul2290, 1
  %cmp2292 = icmp ult i64 %sub2291, 0
  br i1 %cmp2292, label %cond.true.2294, label %cond.false.2303

cond.true.2294:                                   ; preds = %cond.true.2286
  %425 = load i32, i32* %row_bytes, align 4
  %conv2295 = zext i32 %425 to i64
  %add2296 = add i64 0, %conv2295
  %mul2297 = mul i64 0, %add2296
  %add2298 = add i64 %mul2297, 1
  %shl2299 = shl i64 %add2298, 62
  %sub2300 = sub i64 %shl2299, 1
  %mul2301 = mul i64 %sub2300, 2
  %add2302 = add i64 %mul2301, 1
  br label %cond.end.2308

cond.false.2303:                                  ; preds = %cond.true.2286
  %426 = load i32, i32* %row_bytes, align 4
  %conv2304 = zext i32 %426 to i64
  %add2305 = add i64 0, %conv2304
  %mul2306 = mul i64 0, %add2305
  %sub2307 = sub i64 %mul2306, 1
  br label %cond.end.2308

cond.end.2308:                                    ; preds = %cond.false.2303, %cond.true.2294
  %cond2309 = phi i64 [ %add2302, %cond.true.2294 ], [ %sub2307, %cond.false.2303 ]
  %div2310 = udiv i64 %cond2309, 1
  %cmp2311 = icmp ult i64 %conv2287, %div2310
  br i1 %cmp2311, label %cond.true.2438, label %lor.lhs.false.2421

cond.false.2313:                                  ; preds = %cond.true.2283
  br i1 false, label %cond.true.2314, label %cond.false.2315

cond.true.2314:                                   ; preds = %cond.false.2313
  br i1 false, label %cond.true.2438, label %lor.lhs.false.2421

cond.false.2315:                                  ; preds = %cond.false.2313
  %427 = load i32, i32* %row_bytes, align 4
  %conv2316 = zext i32 %427 to i64
  %add2317 = add i64 0, %conv2316
  %mul2318 = mul i64 0, %add2317
  %sub2319 = sub i64 %mul2318, 1
  %cmp2320 = icmp ult i64 %sub2319, 0
  br i1 %cmp2320, label %cond.true.2322, label %cond.false.2341

cond.true.2322:                                   ; preds = %cond.false.2315
  %428 = load i32, i32* %row_bytes, align 4
  %conv2323 = zext i32 %428 to i64
  %add2324 = add i64 0, %conv2323
  %mul2325 = mul i64 0, %add2324
  %add2326 = add i64 %mul2325, 0
  %neg2327 = xor i64 %add2326, -1
  %cmp2328 = icmp eq i64 %neg2327, -1
  %conv2329 = zext i1 %cmp2328 to i32
  %sub2330 = sub nsw i32 0, %conv2329
  %conv2331 = sext i32 %sub2330 to i64
  %429 = load i32, i32* %row_bytes, align 4
  %conv2332 = zext i32 %429 to i64
  %add2333 = add i64 0, %conv2332
  %mul2334 = mul i64 0, %add2333
  %add2335 = add i64 %mul2334, 1
  %shl2336 = shl i64 %add2335, 62
  %sub2337 = sub i64 %shl2336, 1
  %mul2338 = mul i64 %sub2337, 2
  %add2339 = add i64 %mul2338, 1
  %sub2340 = sub i64 %conv2331, %add2339
  br label %cond.end.2346

cond.false.2341:                                  ; preds = %cond.false.2315
  %430 = load i32, i32* %row_bytes, align 4
  %conv2342 = zext i32 %430 to i64
  %add2343 = add i64 0, %conv2342
  %mul2344 = mul i64 0, %add2343
  %add2345 = add i64 %mul2344, 0
  br label %cond.end.2346

cond.end.2346:                                    ; preds = %cond.false.2341, %cond.true.2322
  %cond2347 = phi i64 [ %sub2340, %cond.true.2322 ], [ %add2345, %cond.false.2341 ]
  %div2348 = udiv i64 %cond2347, 1
  %431 = load i32, i32* %row_bytes, align 4
  %conv2349 = zext i32 %431 to i64
  %cmp2350 = icmp ult i64 %div2348, %conv2349
  br i1 %cmp2350, label %cond.true.2438, label %lor.lhs.false.2421

cond.false.2352:                                  ; preds = %lor.lhs.false.2282
  br i1 false, label %cond.true.2353, label %cond.false.2354

cond.true.2353:                                   ; preds = %cond.false.2352
  br i1 false, label %cond.true.2438, label %lor.lhs.false.2421

cond.false.2354:                                  ; preds = %cond.false.2352
  %432 = load i32, i32* %row_bytes, align 4
  %cmp2355 = icmp ult i32 %432, 0
  br i1 %cmp2355, label %cond.true.2357, label %cond.false.2394

cond.true.2357:                                   ; preds = %cond.false.2354
  %433 = load i32, i32* %row_bytes, align 4
  %conv2358 = zext i32 %433 to i64
  %434 = load i32, i32* %row_bytes, align 4
  %conv2359 = zext i32 %434 to i64
  %add2360 = add i64 0, %conv2359
  %mul2361 = mul i64 0, %add2360
  %sub2362 = sub i64 %mul2361, 1
  %cmp2363 = icmp ult i64 %sub2362, 0
  br i1 %cmp2363, label %cond.true.2365, label %cond.false.2384

cond.true.2365:                                   ; preds = %cond.true.2357
  %435 = load i32, i32* %row_bytes, align 4
  %conv2366 = zext i32 %435 to i64
  %add2367 = add i64 0, %conv2366
  %mul2368 = mul i64 0, %add2367
  %add2369 = add i64 %mul2368, 0
  %neg2370 = xor i64 %add2369, -1
  %cmp2371 = icmp eq i64 %neg2370, -1
  %conv2372 = zext i1 %cmp2371 to i32
  %sub2373 = sub nsw i32 0, %conv2372
  %conv2374 = sext i32 %sub2373 to i64
  %436 = load i32, i32* %row_bytes, align 4
  %conv2375 = zext i32 %436 to i64
  %add2376 = add i64 0, %conv2375
  %mul2377 = mul i64 0, %add2376
  %add2378 = add i64 %mul2377, 1
  %shl2379 = shl i64 %add2378, 62
  %sub2380 = sub i64 %shl2379, 1
  %mul2381 = mul i64 %sub2380, 2
  %add2382 = add i64 %mul2381, 1
  %sub2383 = sub i64 %conv2374, %add2382
  br label %cond.end.2389

cond.false.2384:                                  ; preds = %cond.true.2357
  %437 = load i32, i32* %row_bytes, align 4
  %conv2385 = zext i32 %437 to i64
  %add2386 = add i64 0, %conv2385
  %mul2387 = mul i64 0, %add2386
  %add2388 = add i64 %mul2387, 0
  br label %cond.end.2389

cond.end.2389:                                    ; preds = %cond.false.2384, %cond.true.2365
  %cond2390 = phi i64 [ %sub2383, %cond.true.2365 ], [ %add2388, %cond.false.2384 ]
  %div2391 = udiv i64 %cond2390, 1
  %cmp2392 = icmp ult i64 %conv2358, %div2391
  br i1 %cmp2392, label %cond.true.2438, label %lor.lhs.false.2421

cond.false.2394:                                  ; preds = %cond.false.2354
  %438 = load i32, i32* %row_bytes, align 4
  %conv2395 = zext i32 %438 to i64
  %add2396 = add i64 0, %conv2395
  %mul2397 = mul i64 0, %add2396
  %sub2398 = sub i64 %mul2397, 1
  %cmp2399 = icmp ult i64 %sub2398, 0
  br i1 %cmp2399, label %cond.true.2401, label %cond.false.2410

cond.true.2401:                                   ; preds = %cond.false.2394
  %439 = load i32, i32* %row_bytes, align 4
  %conv2402 = zext i32 %439 to i64
  %add2403 = add i64 0, %conv2402
  %mul2404 = mul i64 0, %add2403
  %add2405 = add i64 %mul2404, 1
  %shl2406 = shl i64 %add2405, 62
  %sub2407 = sub i64 %shl2406, 1
  %mul2408 = mul i64 %sub2407, 2
  %add2409 = add i64 %mul2408, 1
  br label %cond.end.2415

cond.false.2410:                                  ; preds = %cond.false.2394
  %440 = load i32, i32* %row_bytes, align 4
  %conv2411 = zext i32 %440 to i64
  %add2412 = add i64 0, %conv2411
  %mul2413 = mul i64 0, %add2412
  %sub2414 = sub i64 %mul2413, 1
  br label %cond.end.2415

cond.end.2415:                                    ; preds = %cond.false.2410, %cond.true.2401
  %cond2416 = phi i64 [ %add2409, %cond.true.2401 ], [ %sub2414, %cond.false.2410 ]
  %div2417 = udiv i64 %cond2416, 1
  %441 = load i32, i32* %row_bytes, align 4
  %conv2418 = zext i32 %441 to i64
  %cmp2419 = icmp ult i64 %div2417, %conv2418
  br i1 %cmp2419, label %cond.true.2438, label %lor.lhs.false.2421

lor.lhs.false.2421:                               ; preds = %cond.end.2415, %cond.end.2389, %cond.true.2353, %cond.end.2346, %cond.true.2314, %cond.end.2308
  %442 = load i32, i32* %row_bytes, align 4
  %conv2422 = zext i32 %442 to i64
  %mul2423 = mul i64 %conv2422, 1
  %mul2424 = mul i64 0, %mul2423
  %sub2425 = sub i64 %mul2424, 1
  %cmp2426 = icmp ult i64 %sub2425, 0
  br i1 %cmp2426, label %land.lhs.true.2428, label %lor.lhs.false.2433

land.lhs.true.2428:                               ; preds = %lor.lhs.false.2421
  %443 = load i32, i32* %row_bytes, align 4
  %conv2429 = zext i32 %443 to i64
  %mul2430 = mul i64 %conv2429, 1
  %cmp2431 = icmp ult i64 %mul2430, -9223372036854775808
  br i1 %cmp2431, label %cond.true.2438, label %lor.lhs.false.2433

lor.lhs.false.2433:                               ; preds = %land.lhs.true.2428, %lor.lhs.false.2421
  %444 = load i32, i32* %row_bytes, align 4
  %conv2434 = zext i32 %444 to i64
  %mul2435 = mul i64 %conv2434, 1
  %cmp2436 = icmp ult i64 9223372036854775807, %mul2435
  br i1 %cmp2436, label %cond.true.2438, label %cond.false.2453

cond.true.2438:                                   ; preds = %lor.lhs.false.2433, %land.lhs.true.2428, %cond.end.2415, %cond.end.2389, %cond.true.2353, %cond.end.2346, %cond.true.2314, %cond.end.2308, %land.lhs.true.2279
  %445 = load i32, i32* %row_bytes, align 4
  %conv2439 = zext i32 %445 to i64
  %mul2440 = mul i64 %conv2439, 1
  %cmp2441 = icmp ule i64 %mul2440, 9223372036854775807
  br i1 %cmp2441, label %cond.true.2443, label %cond.false.2446

cond.true.2443:                                   ; preds = %cond.true.2438
  %446 = load i32, i32* %row_bytes, align 4
  %conv2444 = zext i32 %446 to i64
  %mul2445 = mul i64 %conv2444, 1
  br label %cond.end.2451

cond.false.2446:                                  ; preds = %cond.true.2438
  %447 = load i32, i32* %row_bytes, align 4
  %conv2447 = zext i32 %447 to i64
  %mul2448 = mul i64 %conv2447, 1
  %sub2449 = sub i64 %mul2448, -9223372036854775808
  %add2450 = add nsw i64 %sub2449, -9223372036854775808
  br label %cond.end.2451

cond.end.2451:                                    ; preds = %cond.false.2446, %cond.true.2443
  %cond2452 = phi i64 [ %mul2445, %cond.true.2443 ], [ %add2450, %cond.false.2446 ]
  store i64 %cond2452, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %lor.lhs.false.2468

cond.false.2453:                                  ; preds = %lor.lhs.false.2433
  %448 = load i32, i32* %row_bytes, align 4
  %conv2454 = zext i32 %448 to i64
  %mul2455 = mul i64 %conv2454, 1
  %cmp2456 = icmp ule i64 %mul2455, 9223372036854775807
  br i1 %cmp2456, label %cond.true.2458, label %cond.false.2461

cond.true.2458:                                   ; preds = %cond.false.2453
  %449 = load i32, i32* %row_bytes, align 4
  %conv2459 = zext i32 %449 to i64
  %mul2460 = mul i64 %conv2459, 1
  br label %cond.end.2466

cond.false.2461:                                  ; preds = %cond.false.2453
  %450 = load i32, i32* %row_bytes, align 4
  %conv2462 = zext i32 %450 to i64
  %mul2463 = mul i64 %conv2462, 1
  %sub2464 = sub i64 %mul2463, -9223372036854775808
  %add2465 = add nsw i64 %sub2464, -9223372036854775808
  br label %cond.end.2466

cond.end.2466:                                    ; preds = %cond.false.2461, %cond.true.2458
  %cond2467 = phi i64 [ %mul2460, %cond.true.2458 ], [ %add2465, %cond.false.2461 ]
  store i64 %cond2467, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %lor.lhs.false.2468

lor.lhs.false.2468:                               ; preds = %cond.end.2466, %cond.end.2451, %cond.end.2242, %cond.end.2227, %cond.end.2014, %cond.end.1999, %cond.end.1790, %cond.end.1775, %cond.end.1560, %cond.end.1547, %cond.end.1340, %cond.end.1327, %cond.end.1146, %cond.end.1123, %cond.end.906, %cond.end.883, %cond.end.636, %cond.end.613, %cond.end.396, %cond.end.373
  br i1 false, label %cond.true.2469, label %cond.false.3130

cond.true.2469:                                   ; preds = %lor.lhs.false.2468
  br i1 false, label %cond.true.2470, label %cond.false.2845

cond.true.2470:                                   ; preds = %cond.true.2469
  %451 = load i32, i32* %height, align 4
  %conv2471 = trunc i32 %451 to i8
  %conv2472 = sext i8 %conv2471 to i32
  %mul2473 = mul nsw i32 0, %conv2472
  %452 = load i64, i64* %nbytes, align 8
  %conv2474 = trunc i64 %452 to i8
  %conv2475 = sext i8 %conv2474 to i32
  %add2476 = add nsw i32 %mul2473, %conv2475
  %mul2477 = mul nsw i32 0, %add2476
  %sub2478 = sub nsw i32 %mul2477, 1
  %cmp2479 = icmp slt i32 %sub2478, 0
  br i1 %cmp2479, label %cond.true.2481, label %cond.false.2507

cond.true.2481:                                   ; preds = %cond.true.2470
  %453 = load i32, i32* %height, align 4
  %conv2482 = trunc i32 %453 to i8
  %conv2483 = sext i8 %conv2482 to i32
  %mul2484 = mul nsw i32 0, %conv2483
  %454 = load i64, i64* %nbytes, align 8
  %conv2485 = trunc i64 %454 to i8
  %conv2486 = sext i8 %conv2485 to i32
  %add2487 = add nsw i32 %mul2484, %conv2486
  %mul2488 = mul nsw i32 0, %add2487
  %add2489 = add nsw i32 %mul2488, 0
  %neg2490 = xor i32 %add2489, -1
  %cmp2491 = icmp eq i32 %neg2490, -1
  %conv2492 = zext i1 %cmp2491 to i32
  %sub2493 = sub nsw i32 0, %conv2492
  %455 = load i32, i32* %height, align 4
  %conv2494 = trunc i32 %455 to i8
  %conv2495 = sext i8 %conv2494 to i32
  %mul2496 = mul nsw i32 0, %conv2495
  %456 = load i64, i64* %nbytes, align 8
  %conv2497 = trunc i64 %456 to i8
  %conv2498 = sext i8 %conv2497 to i32
  %add2499 = add nsw i32 %mul2496, %conv2498
  %mul2500 = mul nsw i32 0, %add2499
  %add2501 = add nsw i32 %mul2500, 1
  %shl2502 = shl i32 %add2501, 30
  %sub2503 = sub nsw i32 %shl2502, 1
  %mul2504 = mul nsw i32 %sub2503, 2
  %add2505 = add nsw i32 %mul2504, 1
  %sub2506 = sub nsw i32 %sub2493, %add2505
  br label %cond.end.2516

cond.false.2507:                                  ; preds = %cond.true.2470
  %457 = load i32, i32* %height, align 4
  %conv2508 = trunc i32 %457 to i8
  %conv2509 = sext i8 %conv2508 to i32
  %mul2510 = mul nsw i32 0, %conv2509
  %458 = load i64, i64* %nbytes, align 8
  %conv2511 = trunc i64 %458 to i8
  %conv2512 = sext i8 %conv2511 to i32
  %add2513 = add nsw i32 %mul2510, %conv2512
  %mul2514 = mul nsw i32 0, %add2513
  %add2515 = add nsw i32 %mul2514, 0
  br label %cond.end.2516

cond.end.2516:                                    ; preds = %cond.false.2507, %cond.true.2481
  %cond2517 = phi i32 [ %sub2506, %cond.true.2481 ], [ %add2515, %cond.false.2507 ]
  %cmp2518 = icmp eq i32 %cond2517, 0
  br i1 %cmp2518, label %land.lhs.true.2520, label %lor.lhs.false.2540

land.lhs.true.2520:                               ; preds = %cond.end.2516
  %459 = load i64, i64* %nbytes, align 8
  %conv2521 = trunc i64 %459 to i8
  %conv2522 = sext i8 %conv2521 to i32
  %cmp2523 = icmp slt i32 %conv2522, 0
  br i1 %cmp2523, label %land.lhs.true.2525, label %lor.lhs.false.2530

land.lhs.true.2525:                               ; preds = %land.lhs.true.2520
  %460 = load i32, i32* %height, align 4
  %conv2526 = trunc i32 %460 to i8
  %conv2527 = sext i8 %conv2526 to i32
  %cmp2528 = icmp slt i32 0, %conv2527
  br i1 %cmp2528, label %cond.true.2787, label %lor.lhs.false.2530

lor.lhs.false.2530:                               ; preds = %land.lhs.true.2525, %land.lhs.true.2520
  %461 = load i32, i32* %height, align 4
  %conv2531 = trunc i32 %461 to i8
  %conv2532 = sext i8 %conv2531 to i32
  %cmp2533 = icmp slt i32 %conv2532, 0
  br i1 %cmp2533, label %land.lhs.true.2535, label %lor.lhs.false.2540

land.lhs.true.2535:                               ; preds = %lor.lhs.false.2530
  %462 = load i64, i64* %nbytes, align 8
  %conv2536 = trunc i64 %462 to i8
  %conv2537 = sext i8 %conv2536 to i32
  %cmp2538 = icmp slt i32 0, %conv2537
  br i1 %cmp2538, label %cond.true.2787, label %lor.lhs.false.2540

lor.lhs.false.2540:                               ; preds = %land.lhs.true.2535, %lor.lhs.false.2530, %cond.end.2516
  %463 = load i32, i32* %height, align 4
  %conv2541 = trunc i32 %463 to i8
  %conv2542 = sext i8 %conv2541 to i32
  %cmp2543 = icmp slt i32 %conv2542, 0
  br i1 %cmp2543, label %cond.true.2545, label %cond.false.2653

cond.true.2545:                                   ; preds = %lor.lhs.false.2540
  %464 = load i64, i64* %nbytes, align 8
  %conv2546 = trunc i64 %464 to i8
  %conv2547 = sext i8 %conv2546 to i32
  %cmp2548 = icmp slt i32 %conv2547, 0
  br i1 %cmp2548, label %cond.true.2550, label %cond.false.2592

cond.true.2550:                                   ; preds = %cond.true.2545
  %465 = load i64, i64* %nbytes, align 8
  %conv2551 = trunc i64 %465 to i8
  %conv2552 = sext i8 %conv2551 to i32
  %466 = load i32, i32* %height, align 4
  %conv2553 = trunc i32 %466 to i8
  %conv2554 = sext i8 %conv2553 to i32
  %mul2555 = mul nsw i32 0, %conv2554
  %467 = load i64, i64* %nbytes, align 8
  %conv2556 = trunc i64 %467 to i8
  %conv2557 = sext i8 %conv2556 to i32
  %add2558 = add nsw i32 %mul2555, %conv2557
  %mul2559 = mul nsw i32 0, %add2558
  %sub2560 = sub nsw i32 %mul2559, 1
  %cmp2561 = icmp slt i32 %sub2560, 0
  br i1 %cmp2561, label %cond.true.2563, label %cond.false.2576

cond.true.2563:                                   ; preds = %cond.true.2550
  %468 = load i32, i32* %height, align 4
  %conv2564 = trunc i32 %468 to i8
  %conv2565 = sext i8 %conv2564 to i32
  %mul2566 = mul nsw i32 0, %conv2565
  %469 = load i64, i64* %nbytes, align 8
  %conv2567 = trunc i64 %469 to i8
  %conv2568 = sext i8 %conv2567 to i32
  %add2569 = add nsw i32 %mul2566, %conv2568
  %mul2570 = mul nsw i32 0, %add2569
  %add2571 = add nsw i32 %mul2570, 1
  %shl2572 = shl i32 %add2571, 30
  %sub2573 = sub nsw i32 %shl2572, 1
  %mul2574 = mul nsw i32 %sub2573, 2
  %add2575 = add nsw i32 %mul2574, 1
  br label %cond.end.2585

cond.false.2576:                                  ; preds = %cond.true.2550
  %470 = load i32, i32* %height, align 4
  %conv2577 = trunc i32 %470 to i8
  %conv2578 = sext i8 %conv2577 to i32
  %mul2579 = mul nsw i32 0, %conv2578
  %471 = load i64, i64* %nbytes, align 8
  %conv2580 = trunc i64 %471 to i8
  %conv2581 = sext i8 %conv2580 to i32
  %add2582 = add nsw i32 %mul2579, %conv2581
  %mul2583 = mul nsw i32 0, %add2582
  %sub2584 = sub nsw i32 %mul2583, 1
  br label %cond.end.2585

cond.end.2585:                                    ; preds = %cond.false.2576, %cond.true.2563
  %cond2586 = phi i32 [ %add2575, %cond.true.2563 ], [ %sub2584, %cond.false.2576 ]
  %472 = load i32, i32* %height, align 4
  %conv2587 = trunc i32 %472 to i8
  %conv2588 = sext i8 %conv2587 to i32
  %div2589 = sdiv i32 %cond2586, %conv2588
  %cmp2590 = icmp slt i32 %conv2552, %div2589
  br i1 %cmp2590, label %cond.true.2787, label %lor.lhs.false.2761

cond.false.2592:                                  ; preds = %cond.true.2545
  %473 = load i32, i32* %height, align 4
  %conv2593 = trunc i32 %473 to i8
  %conv2594 = sext i8 %conv2593 to i32
  %cmp2595 = icmp eq i32 %conv2594, -1
  br i1 %cmp2595, label %cond.true.2597, label %cond.false.2598

cond.true.2597:                                   ; preds = %cond.false.2592
  br i1 false, label %cond.true.2787, label %lor.lhs.false.2761

cond.false.2598:                                  ; preds = %cond.false.2592
  %474 = load i32, i32* %height, align 4
  %conv2599 = trunc i32 %474 to i8
  %conv2600 = sext i8 %conv2599 to i32
  %mul2601 = mul nsw i32 0, %conv2600
  %475 = load i64, i64* %nbytes, align 8
  %conv2602 = trunc i64 %475 to i8
  %conv2603 = sext i8 %conv2602 to i32
  %add2604 = add nsw i32 %mul2601, %conv2603
  %mul2605 = mul nsw i32 0, %add2604
  %sub2606 = sub nsw i32 %mul2605, 1
  %cmp2607 = icmp slt i32 %sub2606, 0
  br i1 %cmp2607, label %cond.true.2609, label %cond.false.2635

cond.true.2609:                                   ; preds = %cond.false.2598
  %476 = load i32, i32* %height, align 4
  %conv2610 = trunc i32 %476 to i8
  %conv2611 = sext i8 %conv2610 to i32
  %mul2612 = mul nsw i32 0, %conv2611
  %477 = load i64, i64* %nbytes, align 8
  %conv2613 = trunc i64 %477 to i8
  %conv2614 = sext i8 %conv2613 to i32
  %add2615 = add nsw i32 %mul2612, %conv2614
  %mul2616 = mul nsw i32 0, %add2615
  %add2617 = add nsw i32 %mul2616, 0
  %neg2618 = xor i32 %add2617, -1
  %cmp2619 = icmp eq i32 %neg2618, -1
  %conv2620 = zext i1 %cmp2619 to i32
  %sub2621 = sub nsw i32 0, %conv2620
  %478 = load i32, i32* %height, align 4
  %conv2622 = trunc i32 %478 to i8
  %conv2623 = sext i8 %conv2622 to i32
  %mul2624 = mul nsw i32 0, %conv2623
  %479 = load i64, i64* %nbytes, align 8
  %conv2625 = trunc i64 %479 to i8
  %conv2626 = sext i8 %conv2625 to i32
  %add2627 = add nsw i32 %mul2624, %conv2626
  %mul2628 = mul nsw i32 0, %add2627
  %add2629 = add nsw i32 %mul2628, 1
  %shl2630 = shl i32 %add2629, 30
  %sub2631 = sub nsw i32 %shl2630, 1
  %mul2632 = mul nsw i32 %sub2631, 2
  %add2633 = add nsw i32 %mul2632, 1
  %sub2634 = sub nsw i32 %sub2621, %add2633
  br label %cond.end.2644

cond.false.2635:                                  ; preds = %cond.false.2598
  %480 = load i32, i32* %height, align 4
  %conv2636 = trunc i32 %480 to i8
  %conv2637 = sext i8 %conv2636 to i32
  %mul2638 = mul nsw i32 0, %conv2637
  %481 = load i64, i64* %nbytes, align 8
  %conv2639 = trunc i64 %481 to i8
  %conv2640 = sext i8 %conv2639 to i32
  %add2641 = add nsw i32 %mul2638, %conv2640
  %mul2642 = mul nsw i32 0, %add2641
  %add2643 = add nsw i32 %mul2642, 0
  br label %cond.end.2644

cond.end.2644:                                    ; preds = %cond.false.2635, %cond.true.2609
  %cond2645 = phi i32 [ %sub2634, %cond.true.2609 ], [ %add2643, %cond.false.2635 ]
  %482 = load i32, i32* %height, align 4
  %conv2646 = trunc i32 %482 to i8
  %conv2647 = sext i8 %conv2646 to i32
  %div2648 = sdiv i32 %cond2645, %conv2647
  %483 = load i64, i64* %nbytes, align 8
  %conv2649 = trunc i64 %483 to i8
  %conv2650 = sext i8 %conv2649 to i32
  %cmp2651 = icmp slt i32 %div2648, %conv2650
  br i1 %cmp2651, label %cond.true.2787, label %lor.lhs.false.2761

cond.false.2653:                                  ; preds = %lor.lhs.false.2540
  %484 = load i32, i32* %height, align 4
  %conv2654 = trunc i32 %484 to i8
  %conv2655 = sext i8 %conv2654 to i32
  %cmp2656 = icmp eq i32 %conv2655, 0
  br i1 %cmp2656, label %cond.true.2658, label %cond.false.2659

cond.true.2658:                                   ; preds = %cond.false.2653
  br i1 false, label %cond.true.2787, label %lor.lhs.false.2761

cond.false.2659:                                  ; preds = %cond.false.2653
  %485 = load i64, i64* %nbytes, align 8
  %conv2660 = trunc i64 %485 to i8
  %conv2661 = sext i8 %conv2660 to i32
  %cmp2662 = icmp slt i32 %conv2661, 0
  br i1 %cmp2662, label %cond.true.2664, label %cond.false.2719

cond.true.2664:                                   ; preds = %cond.false.2659
  %486 = load i64, i64* %nbytes, align 8
  %conv2665 = trunc i64 %486 to i8
  %conv2666 = sext i8 %conv2665 to i32
  %487 = load i32, i32* %height, align 4
  %conv2667 = trunc i32 %487 to i8
  %conv2668 = sext i8 %conv2667 to i32
  %mul2669 = mul nsw i32 0, %conv2668
  %488 = load i64, i64* %nbytes, align 8
  %conv2670 = trunc i64 %488 to i8
  %conv2671 = sext i8 %conv2670 to i32
  %add2672 = add nsw i32 %mul2669, %conv2671
  %mul2673 = mul nsw i32 0, %add2672
  %sub2674 = sub nsw i32 %mul2673, 1
  %cmp2675 = icmp slt i32 %sub2674, 0
  br i1 %cmp2675, label %cond.true.2677, label %cond.false.2703

cond.true.2677:                                   ; preds = %cond.true.2664
  %489 = load i32, i32* %height, align 4
  %conv2678 = trunc i32 %489 to i8
  %conv2679 = sext i8 %conv2678 to i32
  %mul2680 = mul nsw i32 0, %conv2679
  %490 = load i64, i64* %nbytes, align 8
  %conv2681 = trunc i64 %490 to i8
  %conv2682 = sext i8 %conv2681 to i32
  %add2683 = add nsw i32 %mul2680, %conv2682
  %mul2684 = mul nsw i32 0, %add2683
  %add2685 = add nsw i32 %mul2684, 0
  %neg2686 = xor i32 %add2685, -1
  %cmp2687 = icmp eq i32 %neg2686, -1
  %conv2688 = zext i1 %cmp2687 to i32
  %sub2689 = sub nsw i32 0, %conv2688
  %491 = load i32, i32* %height, align 4
  %conv2690 = trunc i32 %491 to i8
  %conv2691 = sext i8 %conv2690 to i32
  %mul2692 = mul nsw i32 0, %conv2691
  %492 = load i64, i64* %nbytes, align 8
  %conv2693 = trunc i64 %492 to i8
  %conv2694 = sext i8 %conv2693 to i32
  %add2695 = add nsw i32 %mul2692, %conv2694
  %mul2696 = mul nsw i32 0, %add2695
  %add2697 = add nsw i32 %mul2696, 1
  %shl2698 = shl i32 %add2697, 30
  %sub2699 = sub nsw i32 %shl2698, 1
  %mul2700 = mul nsw i32 %sub2699, 2
  %add2701 = add nsw i32 %mul2700, 1
  %sub2702 = sub nsw i32 %sub2689, %add2701
  br label %cond.end.2712

cond.false.2703:                                  ; preds = %cond.true.2664
  %493 = load i32, i32* %height, align 4
  %conv2704 = trunc i32 %493 to i8
  %conv2705 = sext i8 %conv2704 to i32
  %mul2706 = mul nsw i32 0, %conv2705
  %494 = load i64, i64* %nbytes, align 8
  %conv2707 = trunc i64 %494 to i8
  %conv2708 = sext i8 %conv2707 to i32
  %add2709 = add nsw i32 %mul2706, %conv2708
  %mul2710 = mul nsw i32 0, %add2709
  %add2711 = add nsw i32 %mul2710, 0
  br label %cond.end.2712

cond.end.2712:                                    ; preds = %cond.false.2703, %cond.true.2677
  %cond2713 = phi i32 [ %sub2702, %cond.true.2677 ], [ %add2711, %cond.false.2703 ]
  %495 = load i32, i32* %height, align 4
  %conv2714 = trunc i32 %495 to i8
  %conv2715 = sext i8 %conv2714 to i32
  %div2716 = sdiv i32 %cond2713, %conv2715
  %cmp2717 = icmp slt i32 %conv2666, %div2716
  br i1 %cmp2717, label %cond.true.2787, label %lor.lhs.false.2761

cond.false.2719:                                  ; preds = %cond.false.2659
  %496 = load i32, i32* %height, align 4
  %conv2720 = trunc i32 %496 to i8
  %conv2721 = sext i8 %conv2720 to i32
  %mul2722 = mul nsw i32 0, %conv2721
  %497 = load i64, i64* %nbytes, align 8
  %conv2723 = trunc i64 %497 to i8
  %conv2724 = sext i8 %conv2723 to i32
  %add2725 = add nsw i32 %mul2722, %conv2724
  %mul2726 = mul nsw i32 0, %add2725
  %sub2727 = sub nsw i32 %mul2726, 1
  %cmp2728 = icmp slt i32 %sub2727, 0
  br i1 %cmp2728, label %cond.true.2730, label %cond.false.2743

cond.true.2730:                                   ; preds = %cond.false.2719
  %498 = load i32, i32* %height, align 4
  %conv2731 = trunc i32 %498 to i8
  %conv2732 = sext i8 %conv2731 to i32
  %mul2733 = mul nsw i32 0, %conv2732
  %499 = load i64, i64* %nbytes, align 8
  %conv2734 = trunc i64 %499 to i8
  %conv2735 = sext i8 %conv2734 to i32
  %add2736 = add nsw i32 %mul2733, %conv2735
  %mul2737 = mul nsw i32 0, %add2736
  %add2738 = add nsw i32 %mul2737, 1
  %shl2739 = shl i32 %add2738, 30
  %sub2740 = sub nsw i32 %shl2739, 1
  %mul2741 = mul nsw i32 %sub2740, 2
  %add2742 = add nsw i32 %mul2741, 1
  br label %cond.end.2752

cond.false.2743:                                  ; preds = %cond.false.2719
  %500 = load i32, i32* %height, align 4
  %conv2744 = trunc i32 %500 to i8
  %conv2745 = sext i8 %conv2744 to i32
  %mul2746 = mul nsw i32 0, %conv2745
  %501 = load i64, i64* %nbytes, align 8
  %conv2747 = trunc i64 %501 to i8
  %conv2748 = sext i8 %conv2747 to i32
  %add2749 = add nsw i32 %mul2746, %conv2748
  %mul2750 = mul nsw i32 0, %add2749
  %sub2751 = sub nsw i32 %mul2750, 1
  br label %cond.end.2752

cond.end.2752:                                    ; preds = %cond.false.2743, %cond.true.2730
  %cond2753 = phi i32 [ %add2742, %cond.true.2730 ], [ %sub2751, %cond.false.2743 ]
  %502 = load i32, i32* %height, align 4
  %conv2754 = trunc i32 %502 to i8
  %conv2755 = sext i8 %conv2754 to i32
  %div2756 = sdiv i32 %cond2753, %conv2755
  %503 = load i64, i64* %nbytes, align 8
  %conv2757 = trunc i64 %503 to i8
  %conv2758 = sext i8 %conv2757 to i32
  %cmp2759 = icmp slt i32 %div2756, %conv2758
  br i1 %cmp2759, label %cond.true.2787, label %lor.lhs.false.2761

lor.lhs.false.2761:                               ; preds = %cond.end.2752, %cond.end.2712, %cond.true.2658, %cond.end.2644, %cond.true.2597, %cond.end.2585
  %504 = load i64, i64* %nbytes, align 8
  %conv2762 = trunc i64 %504 to i8
  %conv2763 = sext i8 %conv2762 to i32
  %505 = load i32, i32* %height, align 4
  %conv2764 = trunc i32 %505 to i8
  %conv2765 = sext i8 %conv2764 to i32
  %mul2766 = mul nsw i32 %conv2763, %conv2765
  %mul2767 = mul nsw i32 0, %mul2766
  %sub2768 = sub nsw i32 %mul2767, 1
  %cmp2769 = icmp slt i32 %sub2768, 0
  br i1 %cmp2769, label %land.lhs.true.2771, label %lor.lhs.false.2779

land.lhs.true.2771:                               ; preds = %lor.lhs.false.2761
  %506 = load i64, i64* %nbytes, align 8
  %conv2772 = trunc i64 %506 to i8
  %conv2773 = sext i8 %conv2772 to i32
  %507 = load i32, i32* %height, align 4
  %conv2774 = trunc i32 %507 to i8
  %conv2775 = sext i8 %conv2774 to i32
  %mul2776 = mul nsw i32 %conv2773, %conv2775
  %cmp2777 = icmp slt i32 %mul2776, -128
  br i1 %cmp2777, label %cond.true.2787, label %lor.lhs.false.2779

lor.lhs.false.2779:                               ; preds = %land.lhs.true.2771, %lor.lhs.false.2761
  %508 = load i64, i64* %nbytes, align 8
  %conv2780 = trunc i64 %508 to i8
  %conv2781 = sext i8 %conv2780 to i32
  %509 = load i32, i32* %height, align 4
  %conv2782 = trunc i32 %509 to i8
  %conv2783 = sext i8 %conv2782 to i32
  %mul2784 = mul nsw i32 %conv2781, %conv2783
  %cmp2785 = icmp slt i32 127, %mul2784
  br i1 %cmp2785, label %cond.true.2787, label %cond.false.2816

cond.true.2787:                                   ; preds = %lor.lhs.false.2779, %land.lhs.true.2771, %cond.end.2752, %cond.end.2712, %cond.true.2658, %cond.end.2644, %cond.true.2597, %cond.end.2585, %land.lhs.true.2535, %land.lhs.true.2525
  %510 = load i64, i64* %nbytes, align 8
  %conv2788 = trunc i64 %510 to i8
  %conv2789 = zext i8 %conv2788 to i32
  %511 = load i32, i32* %height, align 4
  %conv2790 = trunc i32 %511 to i8
  %conv2791 = zext i8 %conv2790 to i32
  %mul2792 = mul nsw i32 %conv2789, %conv2791
  %cmp2793 = icmp sle i32 %mul2792, 127
  br i1 %cmp2793, label %cond.true.2795, label %cond.false.2803

cond.true.2795:                                   ; preds = %cond.true.2787
  %512 = load i64, i64* %nbytes, align 8
  %conv2796 = trunc i64 %512 to i8
  %conv2797 = zext i8 %conv2796 to i32
  %513 = load i32, i32* %height, align 4
  %conv2798 = trunc i32 %513 to i8
  %conv2799 = zext i8 %conv2798 to i32
  %mul2800 = mul nsw i32 %conv2797, %conv2799
  %conv2801 = trunc i32 %mul2800 to i8
  %conv2802 = sext i8 %conv2801 to i32
  br label %cond.end.2813

cond.false.2803:                                  ; preds = %cond.true.2787
  %514 = load i64, i64* %nbytes, align 8
  %conv2804 = trunc i64 %514 to i8
  %conv2805 = zext i8 %conv2804 to i32
  %515 = load i32, i32* %height, align 4
  %conv2806 = trunc i32 %515 to i8
  %conv2807 = zext i8 %conv2806 to i32
  %mul2808 = mul nsw i32 %conv2805, %conv2807
  %sub2809 = sub nsw i32 %mul2808, -128
  %conv2810 = trunc i32 %sub2809 to i8
  %conv2811 = sext i8 %conv2810 to i32
  %add2812 = add nsw i32 %conv2811, -128
  br label %cond.end.2813

cond.end.2813:                                    ; preds = %cond.false.2803, %cond.true.2795
  %cond2814 = phi i32 [ %conv2802, %cond.true.2795 ], [ %add2812, %cond.false.2803 ]
  %conv2815 = sext i32 %cond2814 to i64
  store i64 %conv2815, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.2816:                                  ; preds = %lor.lhs.false.2779
  %516 = load i64, i64* %nbytes, align 8
  %conv2817 = trunc i64 %516 to i8
  %conv2818 = zext i8 %conv2817 to i32
  %517 = load i32, i32* %height, align 4
  %conv2819 = trunc i32 %517 to i8
  %conv2820 = zext i8 %conv2819 to i32
  %mul2821 = mul nsw i32 %conv2818, %conv2820
  %cmp2822 = icmp sle i32 %mul2821, 127
  br i1 %cmp2822, label %cond.true.2824, label %cond.false.2832

cond.true.2824:                                   ; preds = %cond.false.2816
  %518 = load i64, i64* %nbytes, align 8
  %conv2825 = trunc i64 %518 to i8
  %conv2826 = zext i8 %conv2825 to i32
  %519 = load i32, i32* %height, align 4
  %conv2827 = trunc i32 %519 to i8
  %conv2828 = zext i8 %conv2827 to i32
  %mul2829 = mul nsw i32 %conv2826, %conv2828
  %conv2830 = trunc i32 %mul2829 to i8
  %conv2831 = sext i8 %conv2830 to i32
  br label %cond.end.2842

cond.false.2832:                                  ; preds = %cond.false.2816
  %520 = load i64, i64* %nbytes, align 8
  %conv2833 = trunc i64 %520 to i8
  %conv2834 = zext i8 %conv2833 to i32
  %521 = load i32, i32* %height, align 4
  %conv2835 = trunc i32 %521 to i8
  %conv2836 = zext i8 %conv2835 to i32
  %mul2837 = mul nsw i32 %conv2834, %conv2836
  %sub2838 = sub nsw i32 %mul2837, -128
  %conv2839 = trunc i32 %sub2838 to i8
  %conv2840 = sext i8 %conv2839 to i32
  %add2841 = add nsw i32 %conv2840, -128
  br label %cond.end.2842

cond.end.2842:                                    ; preds = %cond.false.2832, %cond.true.2824
  %cond2843 = phi i32 [ %conv2831, %cond.true.2824 ], [ %add2841, %cond.false.2832 ]
  %conv2844 = sext i32 %cond2843 to i64
  store i64 %conv2844, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.2845:                                  ; preds = %cond.true.2469
  %522 = load i32, i32* %height, align 4
  %mul2846 = mul i32 0, %522
  %conv2847 = zext i32 %mul2846 to i64
  %523 = load i64, i64* %nbytes, align 8
  %add2848 = add nsw i64 %conv2847, %523
  %mul2849 = mul nsw i64 0, %add2848
  %sub2850 = sub nsw i64 %mul2849, 1
  %cmp2851 = icmp slt i64 %sub2850, 0
  br i1 %cmp2851, label %cond.true.2853, label %cond.false.2874

cond.true.2853:                                   ; preds = %cond.false.2845
  %524 = load i32, i32* %height, align 4
  %mul2854 = mul i32 0, %524
  %conv2855 = zext i32 %mul2854 to i64
  %525 = load i64, i64* %nbytes, align 8
  %add2856 = add nsw i64 %conv2855, %525
  %mul2857 = mul nsw i64 0, %add2856
  %add2858 = add nsw i64 %mul2857, 0
  %neg2859 = xor i64 %add2858, -1
  %cmp2860 = icmp eq i64 %neg2859, -1
  %conv2861 = zext i1 %cmp2860 to i32
  %sub2862 = sub nsw i32 0, %conv2861
  %conv2863 = sext i32 %sub2862 to i64
  %526 = load i32, i32* %height, align 4
  %mul2864 = mul i32 0, %526
  %conv2865 = zext i32 %mul2864 to i64
  %527 = load i64, i64* %nbytes, align 8
  %add2866 = add nsw i64 %conv2865, %527
  %mul2867 = mul nsw i64 0, %add2866
  %add2868 = add nsw i64 %mul2867, 1
  %shl2869 = shl i64 %add2868, 62
  %sub2870 = sub nsw i64 %shl2869, 1
  %mul2871 = mul nsw i64 %sub2870, 2
  %add2872 = add nsw i64 %mul2871, 1
  %sub2873 = sub nsw i64 %conv2863, %add2872
  br label %cond.end.2880

cond.false.2874:                                  ; preds = %cond.false.2845
  %528 = load i32, i32* %height, align 4
  %mul2875 = mul i32 0, %528
  %conv2876 = zext i32 %mul2875 to i64
  %529 = load i64, i64* %nbytes, align 8
  %add2877 = add nsw i64 %conv2876, %529
  %mul2878 = mul nsw i64 0, %add2877
  %add2879 = add nsw i64 %mul2878, 0
  br label %cond.end.2880

cond.end.2880:                                    ; preds = %cond.false.2874, %cond.true.2853
  %cond2881 = phi i64 [ %sub2873, %cond.true.2853 ], [ %add2879, %cond.false.2874 ]
  %cmp2882 = icmp eq i64 %cond2881, 0
  br i1 %cmp2882, label %land.lhs.true.2884, label %lor.lhs.false.2896

land.lhs.true.2884:                               ; preds = %cond.end.2880
  %530 = load i64, i64* %nbytes, align 8
  %cmp2885 = icmp slt i64 %530, 0
  br i1 %cmp2885, label %land.lhs.true.2887, label %lor.lhs.false.2890

land.lhs.true.2887:                               ; preds = %land.lhs.true.2884
  %531 = load i32, i32* %height, align 4
  %cmp2888 = icmp ult i32 0, %531
  br i1 %cmp2888, label %cond.true.3072, label %lor.lhs.false.2890

lor.lhs.false.2890:                               ; preds = %land.lhs.true.2887, %land.lhs.true.2884
  %532 = load i32, i32* %height, align 4
  %cmp2891 = icmp ult i32 %532, 0
  br i1 %cmp2891, label %land.lhs.true.2893, label %lor.lhs.false.2896

land.lhs.true.2893:                               ; preds = %lor.lhs.false.2890
  %533 = load i64, i64* %nbytes, align 8
  %cmp2894 = icmp slt i64 0, %533
  br i1 %cmp2894, label %cond.true.3072, label %lor.lhs.false.2896

lor.lhs.false.2896:                               ; preds = %land.lhs.true.2893, %lor.lhs.false.2890, %cond.end.2880
  %534 = load i32, i32* %height, align 4
  %cmp2897 = icmp ult i32 %534, 0
  br i1 %cmp2897, label %cond.true.2899, label %cond.false.2977

cond.true.2899:                                   ; preds = %lor.lhs.false.2896
  %535 = load i64, i64* %nbytes, align 8
  %cmp2900 = icmp slt i64 %535, 0
  br i1 %cmp2900, label %cond.true.2902, label %cond.false.2932

cond.true.2902:                                   ; preds = %cond.true.2899
  %536 = load i64, i64* %nbytes, align 8
  %537 = load i32, i32* %height, align 4
  %mul2903 = mul i32 0, %537
  %conv2904 = zext i32 %mul2903 to i64
  %538 = load i64, i64* %nbytes, align 8
  %add2905 = add nsw i64 %conv2904, %538
  %mul2906 = mul nsw i64 0, %add2905
  %sub2907 = sub nsw i64 %mul2906, 1
  %cmp2908 = icmp slt i64 %sub2907, 0
  br i1 %cmp2908, label %cond.true.2910, label %cond.false.2920

cond.true.2910:                                   ; preds = %cond.true.2902
  %539 = load i32, i32* %height, align 4
  %mul2911 = mul i32 0, %539
  %conv2912 = zext i32 %mul2911 to i64
  %540 = load i64, i64* %nbytes, align 8
  %add2913 = add nsw i64 %conv2912, %540
  %mul2914 = mul nsw i64 0, %add2913
  %add2915 = add nsw i64 %mul2914, 1
  %shl2916 = shl i64 %add2915, 62
  %sub2917 = sub nsw i64 %shl2916, 1
  %mul2918 = mul nsw i64 %sub2917, 2
  %add2919 = add nsw i64 %mul2918, 1
  br label %cond.end.2926

cond.false.2920:                                  ; preds = %cond.true.2902
  %541 = load i32, i32* %height, align 4
  %mul2921 = mul i32 0, %541
  %conv2922 = zext i32 %mul2921 to i64
  %542 = load i64, i64* %nbytes, align 8
  %add2923 = add nsw i64 %conv2922, %542
  %mul2924 = mul nsw i64 0, %add2923
  %sub2925 = sub nsw i64 %mul2924, 1
  br label %cond.end.2926

cond.end.2926:                                    ; preds = %cond.false.2920, %cond.true.2910
  %cond2927 = phi i64 [ %add2919, %cond.true.2910 ], [ %sub2925, %cond.false.2920 ]
  %543 = load i32, i32* %height, align 4
  %conv2928 = zext i32 %543 to i64
  %div2929 = sdiv i64 %cond2927, %conv2928
  %cmp2930 = icmp slt i64 %536, %div2929
  br i1 %cmp2930, label %cond.true.3072, label %lor.lhs.false.3055

cond.false.2932:                                  ; preds = %cond.true.2899
  %544 = load i32, i32* %height, align 4
  %cmp2933 = icmp eq i32 %544, -1
  br i1 %cmp2933, label %cond.true.2935, label %cond.false.2936

cond.true.2935:                                   ; preds = %cond.false.2932
  br i1 false, label %cond.true.3072, label %lor.lhs.false.3055

cond.false.2936:                                  ; preds = %cond.false.2932
  %545 = load i32, i32* %height, align 4
  %mul2937 = mul i32 0, %545
  %conv2938 = zext i32 %mul2937 to i64
  %546 = load i64, i64* %nbytes, align 8
  %add2939 = add nsw i64 %conv2938, %546
  %mul2940 = mul nsw i64 0, %add2939
  %sub2941 = sub nsw i64 %mul2940, 1
  %cmp2942 = icmp slt i64 %sub2941, 0
  br i1 %cmp2942, label %cond.true.2944, label %cond.false.2965

cond.true.2944:                                   ; preds = %cond.false.2936
  %547 = load i32, i32* %height, align 4
  %mul2945 = mul i32 0, %547
  %conv2946 = zext i32 %mul2945 to i64
  %548 = load i64, i64* %nbytes, align 8
  %add2947 = add nsw i64 %conv2946, %548
  %mul2948 = mul nsw i64 0, %add2947
  %add2949 = add nsw i64 %mul2948, 0
  %neg2950 = xor i64 %add2949, -1
  %cmp2951 = icmp eq i64 %neg2950, -1
  %conv2952 = zext i1 %cmp2951 to i32
  %sub2953 = sub nsw i32 0, %conv2952
  %conv2954 = sext i32 %sub2953 to i64
  %549 = load i32, i32* %height, align 4
  %mul2955 = mul i32 0, %549
  %conv2956 = zext i32 %mul2955 to i64
  %550 = load i64, i64* %nbytes, align 8
  %add2957 = add nsw i64 %conv2956, %550
  %mul2958 = mul nsw i64 0, %add2957
  %add2959 = add nsw i64 %mul2958, 1
  %shl2960 = shl i64 %add2959, 62
  %sub2961 = sub nsw i64 %shl2960, 1
  %mul2962 = mul nsw i64 %sub2961, 2
  %add2963 = add nsw i64 %mul2962, 1
  %sub2964 = sub nsw i64 %conv2954, %add2963
  br label %cond.end.2971

cond.false.2965:                                  ; preds = %cond.false.2936
  %551 = load i32, i32* %height, align 4
  %mul2966 = mul i32 0, %551
  %conv2967 = zext i32 %mul2966 to i64
  %552 = load i64, i64* %nbytes, align 8
  %add2968 = add nsw i64 %conv2967, %552
  %mul2969 = mul nsw i64 0, %add2968
  %add2970 = add nsw i64 %mul2969, 0
  br label %cond.end.2971

cond.end.2971:                                    ; preds = %cond.false.2965, %cond.true.2944
  %cond2972 = phi i64 [ %sub2964, %cond.true.2944 ], [ %add2970, %cond.false.2965 ]
  %553 = load i32, i32* %height, align 4
  %conv2973 = zext i32 %553 to i64
  %div2974 = sdiv i64 %cond2972, %conv2973
  %554 = load i64, i64* %nbytes, align 8
  %cmp2975 = icmp slt i64 %div2974, %554
  br i1 %cmp2975, label %cond.true.3072, label %lor.lhs.false.3055

cond.false.2977:                                  ; preds = %lor.lhs.false.2896
  %555 = load i32, i32* %height, align 4
  %cmp2978 = icmp eq i32 %555, 0
  br i1 %cmp2978, label %cond.true.2980, label %cond.false.2981

cond.true.2980:                                   ; preds = %cond.false.2977
  br i1 false, label %cond.true.3072, label %lor.lhs.false.3055

cond.false.2981:                                  ; preds = %cond.false.2977
  %556 = load i64, i64* %nbytes, align 8
  %cmp2982 = icmp slt i64 %556, 0
  br i1 %cmp2982, label %cond.true.2984, label %cond.false.3025

cond.true.2984:                                   ; preds = %cond.false.2981
  %557 = load i64, i64* %nbytes, align 8
  %558 = load i32, i32* %height, align 4
  %mul2985 = mul i32 0, %558
  %conv2986 = zext i32 %mul2985 to i64
  %559 = load i64, i64* %nbytes, align 8
  %add2987 = add nsw i64 %conv2986, %559
  %mul2988 = mul nsw i64 0, %add2987
  %sub2989 = sub nsw i64 %mul2988, 1
  %cmp2990 = icmp slt i64 %sub2989, 0
  br i1 %cmp2990, label %cond.true.2992, label %cond.false.3013

cond.true.2992:                                   ; preds = %cond.true.2984
  %560 = load i32, i32* %height, align 4
  %mul2993 = mul i32 0, %560
  %conv2994 = zext i32 %mul2993 to i64
  %561 = load i64, i64* %nbytes, align 8
  %add2995 = add nsw i64 %conv2994, %561
  %mul2996 = mul nsw i64 0, %add2995
  %add2997 = add nsw i64 %mul2996, 0
  %neg2998 = xor i64 %add2997, -1
  %cmp2999 = icmp eq i64 %neg2998, -1
  %conv3000 = zext i1 %cmp2999 to i32
  %sub3001 = sub nsw i32 0, %conv3000
  %conv3002 = sext i32 %sub3001 to i64
  %562 = load i32, i32* %height, align 4
  %mul3003 = mul i32 0, %562
  %conv3004 = zext i32 %mul3003 to i64
  %563 = load i64, i64* %nbytes, align 8
  %add3005 = add nsw i64 %conv3004, %563
  %mul3006 = mul nsw i64 0, %add3005
  %add3007 = add nsw i64 %mul3006, 1
  %shl3008 = shl i64 %add3007, 62
  %sub3009 = sub nsw i64 %shl3008, 1
  %mul3010 = mul nsw i64 %sub3009, 2
  %add3011 = add nsw i64 %mul3010, 1
  %sub3012 = sub nsw i64 %conv3002, %add3011
  br label %cond.end.3019

cond.false.3013:                                  ; preds = %cond.true.2984
  %564 = load i32, i32* %height, align 4
  %mul3014 = mul i32 0, %564
  %conv3015 = zext i32 %mul3014 to i64
  %565 = load i64, i64* %nbytes, align 8
  %add3016 = add nsw i64 %conv3015, %565
  %mul3017 = mul nsw i64 0, %add3016
  %add3018 = add nsw i64 %mul3017, 0
  br label %cond.end.3019

cond.end.3019:                                    ; preds = %cond.false.3013, %cond.true.2992
  %cond3020 = phi i64 [ %sub3012, %cond.true.2992 ], [ %add3018, %cond.false.3013 ]
  %566 = load i32, i32* %height, align 4
  %conv3021 = zext i32 %566 to i64
  %div3022 = sdiv i64 %cond3020, %conv3021
  %cmp3023 = icmp slt i64 %557, %div3022
  br i1 %cmp3023, label %cond.true.3072, label %lor.lhs.false.3055

cond.false.3025:                                  ; preds = %cond.false.2981
  %567 = load i32, i32* %height, align 4
  %mul3026 = mul i32 0, %567
  %conv3027 = zext i32 %mul3026 to i64
  %568 = load i64, i64* %nbytes, align 8
  %add3028 = add nsw i64 %conv3027, %568
  %mul3029 = mul nsw i64 0, %add3028
  %sub3030 = sub nsw i64 %mul3029, 1
  %cmp3031 = icmp slt i64 %sub3030, 0
  br i1 %cmp3031, label %cond.true.3033, label %cond.false.3043

cond.true.3033:                                   ; preds = %cond.false.3025
  %569 = load i32, i32* %height, align 4
  %mul3034 = mul i32 0, %569
  %conv3035 = zext i32 %mul3034 to i64
  %570 = load i64, i64* %nbytes, align 8
  %add3036 = add nsw i64 %conv3035, %570
  %mul3037 = mul nsw i64 0, %add3036
  %add3038 = add nsw i64 %mul3037, 1
  %shl3039 = shl i64 %add3038, 62
  %sub3040 = sub nsw i64 %shl3039, 1
  %mul3041 = mul nsw i64 %sub3040, 2
  %add3042 = add nsw i64 %mul3041, 1
  br label %cond.end.3049

cond.false.3043:                                  ; preds = %cond.false.3025
  %571 = load i32, i32* %height, align 4
  %mul3044 = mul i32 0, %571
  %conv3045 = zext i32 %mul3044 to i64
  %572 = load i64, i64* %nbytes, align 8
  %add3046 = add nsw i64 %conv3045, %572
  %mul3047 = mul nsw i64 0, %add3046
  %sub3048 = sub nsw i64 %mul3047, 1
  br label %cond.end.3049

cond.end.3049:                                    ; preds = %cond.false.3043, %cond.true.3033
  %cond3050 = phi i64 [ %add3042, %cond.true.3033 ], [ %sub3048, %cond.false.3043 ]
  %573 = load i32, i32* %height, align 4
  %conv3051 = zext i32 %573 to i64
  %div3052 = sdiv i64 %cond3050, %conv3051
  %574 = load i64, i64* %nbytes, align 8
  %cmp3053 = icmp slt i64 %div3052, %574
  br i1 %cmp3053, label %cond.true.3072, label %lor.lhs.false.3055

lor.lhs.false.3055:                               ; preds = %cond.end.3049, %cond.end.3019, %cond.true.2980, %cond.end.2971, %cond.true.2935, %cond.end.2926
  %575 = load i64, i64* %nbytes, align 8
  %576 = load i32, i32* %height, align 4
  %conv3056 = zext i32 %576 to i64
  %mul3057 = mul nsw i64 %575, %conv3056
  %mul3058 = mul nsw i64 0, %mul3057
  %sub3059 = sub nsw i64 %mul3058, 1
  %cmp3060 = icmp slt i64 %sub3059, 0
  br i1 %cmp3060, label %land.lhs.true.3062, label %lor.lhs.false.3067

land.lhs.true.3062:                               ; preds = %lor.lhs.false.3055
  %577 = load i64, i64* %nbytes, align 8
  %578 = load i32, i32* %height, align 4
  %conv3063 = zext i32 %578 to i64
  %mul3064 = mul nsw i64 %577, %conv3063
  %cmp3065 = icmp slt i64 %mul3064, -128
  br i1 %cmp3065, label %cond.true.3072, label %lor.lhs.false.3067

lor.lhs.false.3067:                               ; preds = %land.lhs.true.3062, %lor.lhs.false.3055
  %579 = load i64, i64* %nbytes, align 8
  %580 = load i32, i32* %height, align 4
  %conv3068 = zext i32 %580 to i64
  %mul3069 = mul nsw i64 %579, %conv3068
  %cmp3070 = icmp slt i64 127, %mul3069
  br i1 %cmp3070, label %cond.true.3072, label %cond.false.3101

cond.true.3072:                                   ; preds = %lor.lhs.false.3067, %land.lhs.true.3062, %cond.end.3049, %cond.end.3019, %cond.true.2980, %cond.end.2971, %cond.true.2935, %cond.end.2926, %land.lhs.true.2893, %land.lhs.true.2887
  %581 = load i64, i64* %nbytes, align 8
  %conv3073 = trunc i64 %581 to i8
  %conv3074 = zext i8 %conv3073 to i32
  %582 = load i32, i32* %height, align 4
  %conv3075 = trunc i32 %582 to i8
  %conv3076 = zext i8 %conv3075 to i32
  %mul3077 = mul nsw i32 %conv3074, %conv3076
  %cmp3078 = icmp sle i32 %mul3077, 127
  br i1 %cmp3078, label %cond.true.3080, label %cond.false.3088

cond.true.3080:                                   ; preds = %cond.true.3072
  %583 = load i64, i64* %nbytes, align 8
  %conv3081 = trunc i64 %583 to i8
  %conv3082 = zext i8 %conv3081 to i32
  %584 = load i32, i32* %height, align 4
  %conv3083 = trunc i32 %584 to i8
  %conv3084 = zext i8 %conv3083 to i32
  %mul3085 = mul nsw i32 %conv3082, %conv3084
  %conv3086 = trunc i32 %mul3085 to i8
  %conv3087 = sext i8 %conv3086 to i32
  br label %cond.end.3098

cond.false.3088:                                  ; preds = %cond.true.3072
  %585 = load i64, i64* %nbytes, align 8
  %conv3089 = trunc i64 %585 to i8
  %conv3090 = zext i8 %conv3089 to i32
  %586 = load i32, i32* %height, align 4
  %conv3091 = trunc i32 %586 to i8
  %conv3092 = zext i8 %conv3091 to i32
  %mul3093 = mul nsw i32 %conv3090, %conv3092
  %sub3094 = sub nsw i32 %mul3093, -128
  %conv3095 = trunc i32 %sub3094 to i8
  %conv3096 = sext i8 %conv3095 to i32
  %add3097 = add nsw i32 %conv3096, -128
  br label %cond.end.3098

cond.end.3098:                                    ; preds = %cond.false.3088, %cond.true.3080
  %cond3099 = phi i32 [ %conv3087, %cond.true.3080 ], [ %add3097, %cond.false.3088 ]
  %conv3100 = sext i32 %cond3099 to i64
  store i64 %conv3100, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.3101:                                  ; preds = %lor.lhs.false.3067
  %587 = load i64, i64* %nbytes, align 8
  %conv3102 = trunc i64 %587 to i8
  %conv3103 = zext i8 %conv3102 to i32
  %588 = load i32, i32* %height, align 4
  %conv3104 = trunc i32 %588 to i8
  %conv3105 = zext i8 %conv3104 to i32
  %mul3106 = mul nsw i32 %conv3103, %conv3105
  %cmp3107 = icmp sle i32 %mul3106, 127
  br i1 %cmp3107, label %cond.true.3109, label %cond.false.3117

cond.true.3109:                                   ; preds = %cond.false.3101
  %589 = load i64, i64* %nbytes, align 8
  %conv3110 = trunc i64 %589 to i8
  %conv3111 = zext i8 %conv3110 to i32
  %590 = load i32, i32* %height, align 4
  %conv3112 = trunc i32 %590 to i8
  %conv3113 = zext i8 %conv3112 to i32
  %mul3114 = mul nsw i32 %conv3111, %conv3113
  %conv3115 = trunc i32 %mul3114 to i8
  %conv3116 = sext i8 %conv3115 to i32
  br label %cond.end.3127

cond.false.3117:                                  ; preds = %cond.false.3101
  %591 = load i64, i64* %nbytes, align 8
  %conv3118 = trunc i64 %591 to i8
  %conv3119 = zext i8 %conv3118 to i32
  %592 = load i32, i32* %height, align 4
  %conv3120 = trunc i32 %592 to i8
  %conv3121 = zext i8 %conv3120 to i32
  %mul3122 = mul nsw i32 %conv3119, %conv3121
  %sub3123 = sub nsw i32 %mul3122, -128
  %conv3124 = trunc i32 %sub3123 to i8
  %conv3125 = sext i8 %conv3124 to i32
  %add3126 = add nsw i32 %conv3125, -128
  br label %cond.end.3127

cond.end.3127:                                    ; preds = %cond.false.3117, %cond.true.3109
  %cond3128 = phi i32 [ %conv3116, %cond.true.3109 ], [ %add3126, %cond.false.3117 ]
  %conv3129 = sext i32 %cond3128 to i64
  store i64 %conv3129, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.3130:                                  ; preds = %lor.lhs.false.2468
  br i1 false, label %cond.true.3131, label %cond.false.3792

cond.true.3131:                                   ; preds = %cond.false.3130
  br i1 false, label %cond.true.3132, label %cond.false.3507

cond.true.3132:                                   ; preds = %cond.true.3131
  %593 = load i32, i32* %height, align 4
  %conv3133 = trunc i32 %593 to i16
  %conv3134 = sext i16 %conv3133 to i32
  %mul3135 = mul nsw i32 0, %conv3134
  %594 = load i64, i64* %nbytes, align 8
  %conv3136 = trunc i64 %594 to i16
  %conv3137 = sext i16 %conv3136 to i32
  %add3138 = add nsw i32 %mul3135, %conv3137
  %mul3139 = mul nsw i32 0, %add3138
  %sub3140 = sub nsw i32 %mul3139, 1
  %cmp3141 = icmp slt i32 %sub3140, 0
  br i1 %cmp3141, label %cond.true.3143, label %cond.false.3169

cond.true.3143:                                   ; preds = %cond.true.3132
  %595 = load i32, i32* %height, align 4
  %conv3144 = trunc i32 %595 to i16
  %conv3145 = sext i16 %conv3144 to i32
  %mul3146 = mul nsw i32 0, %conv3145
  %596 = load i64, i64* %nbytes, align 8
  %conv3147 = trunc i64 %596 to i16
  %conv3148 = sext i16 %conv3147 to i32
  %add3149 = add nsw i32 %mul3146, %conv3148
  %mul3150 = mul nsw i32 0, %add3149
  %add3151 = add nsw i32 %mul3150, 0
  %neg3152 = xor i32 %add3151, -1
  %cmp3153 = icmp eq i32 %neg3152, -1
  %conv3154 = zext i1 %cmp3153 to i32
  %sub3155 = sub nsw i32 0, %conv3154
  %597 = load i32, i32* %height, align 4
  %conv3156 = trunc i32 %597 to i16
  %conv3157 = sext i16 %conv3156 to i32
  %mul3158 = mul nsw i32 0, %conv3157
  %598 = load i64, i64* %nbytes, align 8
  %conv3159 = trunc i64 %598 to i16
  %conv3160 = sext i16 %conv3159 to i32
  %add3161 = add nsw i32 %mul3158, %conv3160
  %mul3162 = mul nsw i32 0, %add3161
  %add3163 = add nsw i32 %mul3162, 1
  %shl3164 = shl i32 %add3163, 30
  %sub3165 = sub nsw i32 %shl3164, 1
  %mul3166 = mul nsw i32 %sub3165, 2
  %add3167 = add nsw i32 %mul3166, 1
  %sub3168 = sub nsw i32 %sub3155, %add3167
  br label %cond.end.3178

cond.false.3169:                                  ; preds = %cond.true.3132
  %599 = load i32, i32* %height, align 4
  %conv3170 = trunc i32 %599 to i16
  %conv3171 = sext i16 %conv3170 to i32
  %mul3172 = mul nsw i32 0, %conv3171
  %600 = load i64, i64* %nbytes, align 8
  %conv3173 = trunc i64 %600 to i16
  %conv3174 = sext i16 %conv3173 to i32
  %add3175 = add nsw i32 %mul3172, %conv3174
  %mul3176 = mul nsw i32 0, %add3175
  %add3177 = add nsw i32 %mul3176, 0
  br label %cond.end.3178

cond.end.3178:                                    ; preds = %cond.false.3169, %cond.true.3143
  %cond3179 = phi i32 [ %sub3168, %cond.true.3143 ], [ %add3177, %cond.false.3169 ]
  %cmp3180 = icmp eq i32 %cond3179, 0
  br i1 %cmp3180, label %land.lhs.true.3182, label %lor.lhs.false.3202

land.lhs.true.3182:                               ; preds = %cond.end.3178
  %601 = load i64, i64* %nbytes, align 8
  %conv3183 = trunc i64 %601 to i16
  %conv3184 = sext i16 %conv3183 to i32
  %cmp3185 = icmp slt i32 %conv3184, 0
  br i1 %cmp3185, label %land.lhs.true.3187, label %lor.lhs.false.3192

land.lhs.true.3187:                               ; preds = %land.lhs.true.3182
  %602 = load i32, i32* %height, align 4
  %conv3188 = trunc i32 %602 to i16
  %conv3189 = sext i16 %conv3188 to i32
  %cmp3190 = icmp slt i32 0, %conv3189
  br i1 %cmp3190, label %cond.true.3449, label %lor.lhs.false.3192

lor.lhs.false.3192:                               ; preds = %land.lhs.true.3187, %land.lhs.true.3182
  %603 = load i32, i32* %height, align 4
  %conv3193 = trunc i32 %603 to i16
  %conv3194 = sext i16 %conv3193 to i32
  %cmp3195 = icmp slt i32 %conv3194, 0
  br i1 %cmp3195, label %land.lhs.true.3197, label %lor.lhs.false.3202

land.lhs.true.3197:                               ; preds = %lor.lhs.false.3192
  %604 = load i64, i64* %nbytes, align 8
  %conv3198 = trunc i64 %604 to i16
  %conv3199 = sext i16 %conv3198 to i32
  %cmp3200 = icmp slt i32 0, %conv3199
  br i1 %cmp3200, label %cond.true.3449, label %lor.lhs.false.3202

lor.lhs.false.3202:                               ; preds = %land.lhs.true.3197, %lor.lhs.false.3192, %cond.end.3178
  %605 = load i32, i32* %height, align 4
  %conv3203 = trunc i32 %605 to i16
  %conv3204 = sext i16 %conv3203 to i32
  %cmp3205 = icmp slt i32 %conv3204, 0
  br i1 %cmp3205, label %cond.true.3207, label %cond.false.3315

cond.true.3207:                                   ; preds = %lor.lhs.false.3202
  %606 = load i64, i64* %nbytes, align 8
  %conv3208 = trunc i64 %606 to i16
  %conv3209 = sext i16 %conv3208 to i32
  %cmp3210 = icmp slt i32 %conv3209, 0
  br i1 %cmp3210, label %cond.true.3212, label %cond.false.3254

cond.true.3212:                                   ; preds = %cond.true.3207
  %607 = load i64, i64* %nbytes, align 8
  %conv3213 = trunc i64 %607 to i16
  %conv3214 = sext i16 %conv3213 to i32
  %608 = load i32, i32* %height, align 4
  %conv3215 = trunc i32 %608 to i16
  %conv3216 = sext i16 %conv3215 to i32
  %mul3217 = mul nsw i32 0, %conv3216
  %609 = load i64, i64* %nbytes, align 8
  %conv3218 = trunc i64 %609 to i16
  %conv3219 = sext i16 %conv3218 to i32
  %add3220 = add nsw i32 %mul3217, %conv3219
  %mul3221 = mul nsw i32 0, %add3220
  %sub3222 = sub nsw i32 %mul3221, 1
  %cmp3223 = icmp slt i32 %sub3222, 0
  br i1 %cmp3223, label %cond.true.3225, label %cond.false.3238

cond.true.3225:                                   ; preds = %cond.true.3212
  %610 = load i32, i32* %height, align 4
  %conv3226 = trunc i32 %610 to i16
  %conv3227 = sext i16 %conv3226 to i32
  %mul3228 = mul nsw i32 0, %conv3227
  %611 = load i64, i64* %nbytes, align 8
  %conv3229 = trunc i64 %611 to i16
  %conv3230 = sext i16 %conv3229 to i32
  %add3231 = add nsw i32 %mul3228, %conv3230
  %mul3232 = mul nsw i32 0, %add3231
  %add3233 = add nsw i32 %mul3232, 1
  %shl3234 = shl i32 %add3233, 30
  %sub3235 = sub nsw i32 %shl3234, 1
  %mul3236 = mul nsw i32 %sub3235, 2
  %add3237 = add nsw i32 %mul3236, 1
  br label %cond.end.3247

cond.false.3238:                                  ; preds = %cond.true.3212
  %612 = load i32, i32* %height, align 4
  %conv3239 = trunc i32 %612 to i16
  %conv3240 = sext i16 %conv3239 to i32
  %mul3241 = mul nsw i32 0, %conv3240
  %613 = load i64, i64* %nbytes, align 8
  %conv3242 = trunc i64 %613 to i16
  %conv3243 = sext i16 %conv3242 to i32
  %add3244 = add nsw i32 %mul3241, %conv3243
  %mul3245 = mul nsw i32 0, %add3244
  %sub3246 = sub nsw i32 %mul3245, 1
  br label %cond.end.3247

cond.end.3247:                                    ; preds = %cond.false.3238, %cond.true.3225
  %cond3248 = phi i32 [ %add3237, %cond.true.3225 ], [ %sub3246, %cond.false.3238 ]
  %614 = load i32, i32* %height, align 4
  %conv3249 = trunc i32 %614 to i16
  %conv3250 = sext i16 %conv3249 to i32
  %div3251 = sdiv i32 %cond3248, %conv3250
  %cmp3252 = icmp slt i32 %conv3214, %div3251
  br i1 %cmp3252, label %cond.true.3449, label %lor.lhs.false.3423

cond.false.3254:                                  ; preds = %cond.true.3207
  %615 = load i32, i32* %height, align 4
  %conv3255 = trunc i32 %615 to i16
  %conv3256 = sext i16 %conv3255 to i32
  %cmp3257 = icmp eq i32 %conv3256, -1
  br i1 %cmp3257, label %cond.true.3259, label %cond.false.3260

cond.true.3259:                                   ; preds = %cond.false.3254
  br i1 false, label %cond.true.3449, label %lor.lhs.false.3423

cond.false.3260:                                  ; preds = %cond.false.3254
  %616 = load i32, i32* %height, align 4
  %conv3261 = trunc i32 %616 to i16
  %conv3262 = sext i16 %conv3261 to i32
  %mul3263 = mul nsw i32 0, %conv3262
  %617 = load i64, i64* %nbytes, align 8
  %conv3264 = trunc i64 %617 to i16
  %conv3265 = sext i16 %conv3264 to i32
  %add3266 = add nsw i32 %mul3263, %conv3265
  %mul3267 = mul nsw i32 0, %add3266
  %sub3268 = sub nsw i32 %mul3267, 1
  %cmp3269 = icmp slt i32 %sub3268, 0
  br i1 %cmp3269, label %cond.true.3271, label %cond.false.3297

cond.true.3271:                                   ; preds = %cond.false.3260
  %618 = load i32, i32* %height, align 4
  %conv3272 = trunc i32 %618 to i16
  %conv3273 = sext i16 %conv3272 to i32
  %mul3274 = mul nsw i32 0, %conv3273
  %619 = load i64, i64* %nbytes, align 8
  %conv3275 = trunc i64 %619 to i16
  %conv3276 = sext i16 %conv3275 to i32
  %add3277 = add nsw i32 %mul3274, %conv3276
  %mul3278 = mul nsw i32 0, %add3277
  %add3279 = add nsw i32 %mul3278, 0
  %neg3280 = xor i32 %add3279, -1
  %cmp3281 = icmp eq i32 %neg3280, -1
  %conv3282 = zext i1 %cmp3281 to i32
  %sub3283 = sub nsw i32 0, %conv3282
  %620 = load i32, i32* %height, align 4
  %conv3284 = trunc i32 %620 to i16
  %conv3285 = sext i16 %conv3284 to i32
  %mul3286 = mul nsw i32 0, %conv3285
  %621 = load i64, i64* %nbytes, align 8
  %conv3287 = trunc i64 %621 to i16
  %conv3288 = sext i16 %conv3287 to i32
  %add3289 = add nsw i32 %mul3286, %conv3288
  %mul3290 = mul nsw i32 0, %add3289
  %add3291 = add nsw i32 %mul3290, 1
  %shl3292 = shl i32 %add3291, 30
  %sub3293 = sub nsw i32 %shl3292, 1
  %mul3294 = mul nsw i32 %sub3293, 2
  %add3295 = add nsw i32 %mul3294, 1
  %sub3296 = sub nsw i32 %sub3283, %add3295
  br label %cond.end.3306

cond.false.3297:                                  ; preds = %cond.false.3260
  %622 = load i32, i32* %height, align 4
  %conv3298 = trunc i32 %622 to i16
  %conv3299 = sext i16 %conv3298 to i32
  %mul3300 = mul nsw i32 0, %conv3299
  %623 = load i64, i64* %nbytes, align 8
  %conv3301 = trunc i64 %623 to i16
  %conv3302 = sext i16 %conv3301 to i32
  %add3303 = add nsw i32 %mul3300, %conv3302
  %mul3304 = mul nsw i32 0, %add3303
  %add3305 = add nsw i32 %mul3304, 0
  br label %cond.end.3306

cond.end.3306:                                    ; preds = %cond.false.3297, %cond.true.3271
  %cond3307 = phi i32 [ %sub3296, %cond.true.3271 ], [ %add3305, %cond.false.3297 ]
  %624 = load i32, i32* %height, align 4
  %conv3308 = trunc i32 %624 to i16
  %conv3309 = sext i16 %conv3308 to i32
  %div3310 = sdiv i32 %cond3307, %conv3309
  %625 = load i64, i64* %nbytes, align 8
  %conv3311 = trunc i64 %625 to i16
  %conv3312 = sext i16 %conv3311 to i32
  %cmp3313 = icmp slt i32 %div3310, %conv3312
  br i1 %cmp3313, label %cond.true.3449, label %lor.lhs.false.3423

cond.false.3315:                                  ; preds = %lor.lhs.false.3202
  %626 = load i32, i32* %height, align 4
  %conv3316 = trunc i32 %626 to i16
  %conv3317 = sext i16 %conv3316 to i32
  %cmp3318 = icmp eq i32 %conv3317, 0
  br i1 %cmp3318, label %cond.true.3320, label %cond.false.3321

cond.true.3320:                                   ; preds = %cond.false.3315
  br i1 false, label %cond.true.3449, label %lor.lhs.false.3423

cond.false.3321:                                  ; preds = %cond.false.3315
  %627 = load i64, i64* %nbytes, align 8
  %conv3322 = trunc i64 %627 to i16
  %conv3323 = sext i16 %conv3322 to i32
  %cmp3324 = icmp slt i32 %conv3323, 0
  br i1 %cmp3324, label %cond.true.3326, label %cond.false.3381

cond.true.3326:                                   ; preds = %cond.false.3321
  %628 = load i64, i64* %nbytes, align 8
  %conv3327 = trunc i64 %628 to i16
  %conv3328 = sext i16 %conv3327 to i32
  %629 = load i32, i32* %height, align 4
  %conv3329 = trunc i32 %629 to i16
  %conv3330 = sext i16 %conv3329 to i32
  %mul3331 = mul nsw i32 0, %conv3330
  %630 = load i64, i64* %nbytes, align 8
  %conv3332 = trunc i64 %630 to i16
  %conv3333 = sext i16 %conv3332 to i32
  %add3334 = add nsw i32 %mul3331, %conv3333
  %mul3335 = mul nsw i32 0, %add3334
  %sub3336 = sub nsw i32 %mul3335, 1
  %cmp3337 = icmp slt i32 %sub3336, 0
  br i1 %cmp3337, label %cond.true.3339, label %cond.false.3365

cond.true.3339:                                   ; preds = %cond.true.3326
  %631 = load i32, i32* %height, align 4
  %conv3340 = trunc i32 %631 to i16
  %conv3341 = sext i16 %conv3340 to i32
  %mul3342 = mul nsw i32 0, %conv3341
  %632 = load i64, i64* %nbytes, align 8
  %conv3343 = trunc i64 %632 to i16
  %conv3344 = sext i16 %conv3343 to i32
  %add3345 = add nsw i32 %mul3342, %conv3344
  %mul3346 = mul nsw i32 0, %add3345
  %add3347 = add nsw i32 %mul3346, 0
  %neg3348 = xor i32 %add3347, -1
  %cmp3349 = icmp eq i32 %neg3348, -1
  %conv3350 = zext i1 %cmp3349 to i32
  %sub3351 = sub nsw i32 0, %conv3350
  %633 = load i32, i32* %height, align 4
  %conv3352 = trunc i32 %633 to i16
  %conv3353 = sext i16 %conv3352 to i32
  %mul3354 = mul nsw i32 0, %conv3353
  %634 = load i64, i64* %nbytes, align 8
  %conv3355 = trunc i64 %634 to i16
  %conv3356 = sext i16 %conv3355 to i32
  %add3357 = add nsw i32 %mul3354, %conv3356
  %mul3358 = mul nsw i32 0, %add3357
  %add3359 = add nsw i32 %mul3358, 1
  %shl3360 = shl i32 %add3359, 30
  %sub3361 = sub nsw i32 %shl3360, 1
  %mul3362 = mul nsw i32 %sub3361, 2
  %add3363 = add nsw i32 %mul3362, 1
  %sub3364 = sub nsw i32 %sub3351, %add3363
  br label %cond.end.3374

cond.false.3365:                                  ; preds = %cond.true.3326
  %635 = load i32, i32* %height, align 4
  %conv3366 = trunc i32 %635 to i16
  %conv3367 = sext i16 %conv3366 to i32
  %mul3368 = mul nsw i32 0, %conv3367
  %636 = load i64, i64* %nbytes, align 8
  %conv3369 = trunc i64 %636 to i16
  %conv3370 = sext i16 %conv3369 to i32
  %add3371 = add nsw i32 %mul3368, %conv3370
  %mul3372 = mul nsw i32 0, %add3371
  %add3373 = add nsw i32 %mul3372, 0
  br label %cond.end.3374

cond.end.3374:                                    ; preds = %cond.false.3365, %cond.true.3339
  %cond3375 = phi i32 [ %sub3364, %cond.true.3339 ], [ %add3373, %cond.false.3365 ]
  %637 = load i32, i32* %height, align 4
  %conv3376 = trunc i32 %637 to i16
  %conv3377 = sext i16 %conv3376 to i32
  %div3378 = sdiv i32 %cond3375, %conv3377
  %cmp3379 = icmp slt i32 %conv3328, %div3378
  br i1 %cmp3379, label %cond.true.3449, label %lor.lhs.false.3423

cond.false.3381:                                  ; preds = %cond.false.3321
  %638 = load i32, i32* %height, align 4
  %conv3382 = trunc i32 %638 to i16
  %conv3383 = sext i16 %conv3382 to i32
  %mul3384 = mul nsw i32 0, %conv3383
  %639 = load i64, i64* %nbytes, align 8
  %conv3385 = trunc i64 %639 to i16
  %conv3386 = sext i16 %conv3385 to i32
  %add3387 = add nsw i32 %mul3384, %conv3386
  %mul3388 = mul nsw i32 0, %add3387
  %sub3389 = sub nsw i32 %mul3388, 1
  %cmp3390 = icmp slt i32 %sub3389, 0
  br i1 %cmp3390, label %cond.true.3392, label %cond.false.3405

cond.true.3392:                                   ; preds = %cond.false.3381
  %640 = load i32, i32* %height, align 4
  %conv3393 = trunc i32 %640 to i16
  %conv3394 = sext i16 %conv3393 to i32
  %mul3395 = mul nsw i32 0, %conv3394
  %641 = load i64, i64* %nbytes, align 8
  %conv3396 = trunc i64 %641 to i16
  %conv3397 = sext i16 %conv3396 to i32
  %add3398 = add nsw i32 %mul3395, %conv3397
  %mul3399 = mul nsw i32 0, %add3398
  %add3400 = add nsw i32 %mul3399, 1
  %shl3401 = shl i32 %add3400, 30
  %sub3402 = sub nsw i32 %shl3401, 1
  %mul3403 = mul nsw i32 %sub3402, 2
  %add3404 = add nsw i32 %mul3403, 1
  br label %cond.end.3414

cond.false.3405:                                  ; preds = %cond.false.3381
  %642 = load i32, i32* %height, align 4
  %conv3406 = trunc i32 %642 to i16
  %conv3407 = sext i16 %conv3406 to i32
  %mul3408 = mul nsw i32 0, %conv3407
  %643 = load i64, i64* %nbytes, align 8
  %conv3409 = trunc i64 %643 to i16
  %conv3410 = sext i16 %conv3409 to i32
  %add3411 = add nsw i32 %mul3408, %conv3410
  %mul3412 = mul nsw i32 0, %add3411
  %sub3413 = sub nsw i32 %mul3412, 1
  br label %cond.end.3414

cond.end.3414:                                    ; preds = %cond.false.3405, %cond.true.3392
  %cond3415 = phi i32 [ %add3404, %cond.true.3392 ], [ %sub3413, %cond.false.3405 ]
  %644 = load i32, i32* %height, align 4
  %conv3416 = trunc i32 %644 to i16
  %conv3417 = sext i16 %conv3416 to i32
  %div3418 = sdiv i32 %cond3415, %conv3417
  %645 = load i64, i64* %nbytes, align 8
  %conv3419 = trunc i64 %645 to i16
  %conv3420 = sext i16 %conv3419 to i32
  %cmp3421 = icmp slt i32 %div3418, %conv3420
  br i1 %cmp3421, label %cond.true.3449, label %lor.lhs.false.3423

lor.lhs.false.3423:                               ; preds = %cond.end.3414, %cond.end.3374, %cond.true.3320, %cond.end.3306, %cond.true.3259, %cond.end.3247
  %646 = load i64, i64* %nbytes, align 8
  %conv3424 = trunc i64 %646 to i16
  %conv3425 = sext i16 %conv3424 to i32
  %647 = load i32, i32* %height, align 4
  %conv3426 = trunc i32 %647 to i16
  %conv3427 = sext i16 %conv3426 to i32
  %mul3428 = mul nsw i32 %conv3425, %conv3427
  %mul3429 = mul nsw i32 0, %mul3428
  %sub3430 = sub nsw i32 %mul3429, 1
  %cmp3431 = icmp slt i32 %sub3430, 0
  br i1 %cmp3431, label %land.lhs.true.3433, label %lor.lhs.false.3441

land.lhs.true.3433:                               ; preds = %lor.lhs.false.3423
  %648 = load i64, i64* %nbytes, align 8
  %conv3434 = trunc i64 %648 to i16
  %conv3435 = sext i16 %conv3434 to i32
  %649 = load i32, i32* %height, align 4
  %conv3436 = trunc i32 %649 to i16
  %conv3437 = sext i16 %conv3436 to i32
  %mul3438 = mul nsw i32 %conv3435, %conv3437
  %cmp3439 = icmp slt i32 %mul3438, -32768
  br i1 %cmp3439, label %cond.true.3449, label %lor.lhs.false.3441

lor.lhs.false.3441:                               ; preds = %land.lhs.true.3433, %lor.lhs.false.3423
  %650 = load i64, i64* %nbytes, align 8
  %conv3442 = trunc i64 %650 to i16
  %conv3443 = sext i16 %conv3442 to i32
  %651 = load i32, i32* %height, align 4
  %conv3444 = trunc i32 %651 to i16
  %conv3445 = sext i16 %conv3444 to i32
  %mul3446 = mul nsw i32 %conv3443, %conv3445
  %cmp3447 = icmp slt i32 32767, %mul3446
  br i1 %cmp3447, label %cond.true.3449, label %cond.false.3478

cond.true.3449:                                   ; preds = %lor.lhs.false.3441, %land.lhs.true.3433, %cond.end.3414, %cond.end.3374, %cond.true.3320, %cond.end.3306, %cond.true.3259, %cond.end.3247, %land.lhs.true.3197, %land.lhs.true.3187
  %652 = load i64, i64* %nbytes, align 8
  %conv3450 = trunc i64 %652 to i16
  %conv3451 = zext i16 %conv3450 to i32
  %653 = load i32, i32* %height, align 4
  %conv3452 = trunc i32 %653 to i16
  %conv3453 = zext i16 %conv3452 to i32
  %mul3454 = mul nsw i32 %conv3451, %conv3453
  %cmp3455 = icmp sle i32 %mul3454, 32767
  br i1 %cmp3455, label %cond.true.3457, label %cond.false.3465

cond.true.3457:                                   ; preds = %cond.true.3449
  %654 = load i64, i64* %nbytes, align 8
  %conv3458 = trunc i64 %654 to i16
  %conv3459 = zext i16 %conv3458 to i32
  %655 = load i32, i32* %height, align 4
  %conv3460 = trunc i32 %655 to i16
  %conv3461 = zext i16 %conv3460 to i32
  %mul3462 = mul nsw i32 %conv3459, %conv3461
  %conv3463 = trunc i32 %mul3462 to i16
  %conv3464 = sext i16 %conv3463 to i32
  br label %cond.end.3475

cond.false.3465:                                  ; preds = %cond.true.3449
  %656 = load i64, i64* %nbytes, align 8
  %conv3466 = trunc i64 %656 to i16
  %conv3467 = zext i16 %conv3466 to i32
  %657 = load i32, i32* %height, align 4
  %conv3468 = trunc i32 %657 to i16
  %conv3469 = zext i16 %conv3468 to i32
  %mul3470 = mul nsw i32 %conv3467, %conv3469
  %sub3471 = sub nsw i32 %mul3470, -32768
  %conv3472 = trunc i32 %sub3471 to i16
  %conv3473 = sext i16 %conv3472 to i32
  %add3474 = add nsw i32 %conv3473, -32768
  br label %cond.end.3475

cond.end.3475:                                    ; preds = %cond.false.3465, %cond.true.3457
  %cond3476 = phi i32 [ %conv3464, %cond.true.3457 ], [ %add3474, %cond.false.3465 ]
  %conv3477 = sext i32 %cond3476 to i64
  store i64 %conv3477, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.3478:                                  ; preds = %lor.lhs.false.3441
  %658 = load i64, i64* %nbytes, align 8
  %conv3479 = trunc i64 %658 to i16
  %conv3480 = zext i16 %conv3479 to i32
  %659 = load i32, i32* %height, align 4
  %conv3481 = trunc i32 %659 to i16
  %conv3482 = zext i16 %conv3481 to i32
  %mul3483 = mul nsw i32 %conv3480, %conv3482
  %cmp3484 = icmp sle i32 %mul3483, 32767
  br i1 %cmp3484, label %cond.true.3486, label %cond.false.3494

cond.true.3486:                                   ; preds = %cond.false.3478
  %660 = load i64, i64* %nbytes, align 8
  %conv3487 = trunc i64 %660 to i16
  %conv3488 = zext i16 %conv3487 to i32
  %661 = load i32, i32* %height, align 4
  %conv3489 = trunc i32 %661 to i16
  %conv3490 = zext i16 %conv3489 to i32
  %mul3491 = mul nsw i32 %conv3488, %conv3490
  %conv3492 = trunc i32 %mul3491 to i16
  %conv3493 = sext i16 %conv3492 to i32
  br label %cond.end.3504

cond.false.3494:                                  ; preds = %cond.false.3478
  %662 = load i64, i64* %nbytes, align 8
  %conv3495 = trunc i64 %662 to i16
  %conv3496 = zext i16 %conv3495 to i32
  %663 = load i32, i32* %height, align 4
  %conv3497 = trunc i32 %663 to i16
  %conv3498 = zext i16 %conv3497 to i32
  %mul3499 = mul nsw i32 %conv3496, %conv3498
  %sub3500 = sub nsw i32 %mul3499, -32768
  %conv3501 = trunc i32 %sub3500 to i16
  %conv3502 = sext i16 %conv3501 to i32
  %add3503 = add nsw i32 %conv3502, -32768
  br label %cond.end.3504

cond.end.3504:                                    ; preds = %cond.false.3494, %cond.true.3486
  %cond3505 = phi i32 [ %conv3493, %cond.true.3486 ], [ %add3503, %cond.false.3494 ]
  %conv3506 = sext i32 %cond3505 to i64
  store i64 %conv3506, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.3507:                                  ; preds = %cond.true.3131
  %664 = load i32, i32* %height, align 4
  %mul3508 = mul i32 0, %664
  %conv3509 = zext i32 %mul3508 to i64
  %665 = load i64, i64* %nbytes, align 8
  %add3510 = add nsw i64 %conv3509, %665
  %mul3511 = mul nsw i64 0, %add3510
  %sub3512 = sub nsw i64 %mul3511, 1
  %cmp3513 = icmp slt i64 %sub3512, 0
  br i1 %cmp3513, label %cond.true.3515, label %cond.false.3536

cond.true.3515:                                   ; preds = %cond.false.3507
  %666 = load i32, i32* %height, align 4
  %mul3516 = mul i32 0, %666
  %conv3517 = zext i32 %mul3516 to i64
  %667 = load i64, i64* %nbytes, align 8
  %add3518 = add nsw i64 %conv3517, %667
  %mul3519 = mul nsw i64 0, %add3518
  %add3520 = add nsw i64 %mul3519, 0
  %neg3521 = xor i64 %add3520, -1
  %cmp3522 = icmp eq i64 %neg3521, -1
  %conv3523 = zext i1 %cmp3522 to i32
  %sub3524 = sub nsw i32 0, %conv3523
  %conv3525 = sext i32 %sub3524 to i64
  %668 = load i32, i32* %height, align 4
  %mul3526 = mul i32 0, %668
  %conv3527 = zext i32 %mul3526 to i64
  %669 = load i64, i64* %nbytes, align 8
  %add3528 = add nsw i64 %conv3527, %669
  %mul3529 = mul nsw i64 0, %add3528
  %add3530 = add nsw i64 %mul3529, 1
  %shl3531 = shl i64 %add3530, 62
  %sub3532 = sub nsw i64 %shl3531, 1
  %mul3533 = mul nsw i64 %sub3532, 2
  %add3534 = add nsw i64 %mul3533, 1
  %sub3535 = sub nsw i64 %conv3525, %add3534
  br label %cond.end.3542

cond.false.3536:                                  ; preds = %cond.false.3507
  %670 = load i32, i32* %height, align 4
  %mul3537 = mul i32 0, %670
  %conv3538 = zext i32 %mul3537 to i64
  %671 = load i64, i64* %nbytes, align 8
  %add3539 = add nsw i64 %conv3538, %671
  %mul3540 = mul nsw i64 0, %add3539
  %add3541 = add nsw i64 %mul3540, 0
  br label %cond.end.3542

cond.end.3542:                                    ; preds = %cond.false.3536, %cond.true.3515
  %cond3543 = phi i64 [ %sub3535, %cond.true.3515 ], [ %add3541, %cond.false.3536 ]
  %cmp3544 = icmp eq i64 %cond3543, 0
  br i1 %cmp3544, label %land.lhs.true.3546, label %lor.lhs.false.3558

land.lhs.true.3546:                               ; preds = %cond.end.3542
  %672 = load i64, i64* %nbytes, align 8
  %cmp3547 = icmp slt i64 %672, 0
  br i1 %cmp3547, label %land.lhs.true.3549, label %lor.lhs.false.3552

land.lhs.true.3549:                               ; preds = %land.lhs.true.3546
  %673 = load i32, i32* %height, align 4
  %cmp3550 = icmp ult i32 0, %673
  br i1 %cmp3550, label %cond.true.3734, label %lor.lhs.false.3552

lor.lhs.false.3552:                               ; preds = %land.lhs.true.3549, %land.lhs.true.3546
  %674 = load i32, i32* %height, align 4
  %cmp3553 = icmp ult i32 %674, 0
  br i1 %cmp3553, label %land.lhs.true.3555, label %lor.lhs.false.3558

land.lhs.true.3555:                               ; preds = %lor.lhs.false.3552
  %675 = load i64, i64* %nbytes, align 8
  %cmp3556 = icmp slt i64 0, %675
  br i1 %cmp3556, label %cond.true.3734, label %lor.lhs.false.3558

lor.lhs.false.3558:                               ; preds = %land.lhs.true.3555, %lor.lhs.false.3552, %cond.end.3542
  %676 = load i32, i32* %height, align 4
  %cmp3559 = icmp ult i32 %676, 0
  br i1 %cmp3559, label %cond.true.3561, label %cond.false.3639

cond.true.3561:                                   ; preds = %lor.lhs.false.3558
  %677 = load i64, i64* %nbytes, align 8
  %cmp3562 = icmp slt i64 %677, 0
  br i1 %cmp3562, label %cond.true.3564, label %cond.false.3594

cond.true.3564:                                   ; preds = %cond.true.3561
  %678 = load i64, i64* %nbytes, align 8
  %679 = load i32, i32* %height, align 4
  %mul3565 = mul i32 0, %679
  %conv3566 = zext i32 %mul3565 to i64
  %680 = load i64, i64* %nbytes, align 8
  %add3567 = add nsw i64 %conv3566, %680
  %mul3568 = mul nsw i64 0, %add3567
  %sub3569 = sub nsw i64 %mul3568, 1
  %cmp3570 = icmp slt i64 %sub3569, 0
  br i1 %cmp3570, label %cond.true.3572, label %cond.false.3582

cond.true.3572:                                   ; preds = %cond.true.3564
  %681 = load i32, i32* %height, align 4
  %mul3573 = mul i32 0, %681
  %conv3574 = zext i32 %mul3573 to i64
  %682 = load i64, i64* %nbytes, align 8
  %add3575 = add nsw i64 %conv3574, %682
  %mul3576 = mul nsw i64 0, %add3575
  %add3577 = add nsw i64 %mul3576, 1
  %shl3578 = shl i64 %add3577, 62
  %sub3579 = sub nsw i64 %shl3578, 1
  %mul3580 = mul nsw i64 %sub3579, 2
  %add3581 = add nsw i64 %mul3580, 1
  br label %cond.end.3588

cond.false.3582:                                  ; preds = %cond.true.3564
  %683 = load i32, i32* %height, align 4
  %mul3583 = mul i32 0, %683
  %conv3584 = zext i32 %mul3583 to i64
  %684 = load i64, i64* %nbytes, align 8
  %add3585 = add nsw i64 %conv3584, %684
  %mul3586 = mul nsw i64 0, %add3585
  %sub3587 = sub nsw i64 %mul3586, 1
  br label %cond.end.3588

cond.end.3588:                                    ; preds = %cond.false.3582, %cond.true.3572
  %cond3589 = phi i64 [ %add3581, %cond.true.3572 ], [ %sub3587, %cond.false.3582 ]
  %685 = load i32, i32* %height, align 4
  %conv3590 = zext i32 %685 to i64
  %div3591 = sdiv i64 %cond3589, %conv3590
  %cmp3592 = icmp slt i64 %678, %div3591
  br i1 %cmp3592, label %cond.true.3734, label %lor.lhs.false.3717

cond.false.3594:                                  ; preds = %cond.true.3561
  %686 = load i32, i32* %height, align 4
  %cmp3595 = icmp eq i32 %686, -1
  br i1 %cmp3595, label %cond.true.3597, label %cond.false.3598

cond.true.3597:                                   ; preds = %cond.false.3594
  br i1 false, label %cond.true.3734, label %lor.lhs.false.3717

cond.false.3598:                                  ; preds = %cond.false.3594
  %687 = load i32, i32* %height, align 4
  %mul3599 = mul i32 0, %687
  %conv3600 = zext i32 %mul3599 to i64
  %688 = load i64, i64* %nbytes, align 8
  %add3601 = add nsw i64 %conv3600, %688
  %mul3602 = mul nsw i64 0, %add3601
  %sub3603 = sub nsw i64 %mul3602, 1
  %cmp3604 = icmp slt i64 %sub3603, 0
  br i1 %cmp3604, label %cond.true.3606, label %cond.false.3627

cond.true.3606:                                   ; preds = %cond.false.3598
  %689 = load i32, i32* %height, align 4
  %mul3607 = mul i32 0, %689
  %conv3608 = zext i32 %mul3607 to i64
  %690 = load i64, i64* %nbytes, align 8
  %add3609 = add nsw i64 %conv3608, %690
  %mul3610 = mul nsw i64 0, %add3609
  %add3611 = add nsw i64 %mul3610, 0
  %neg3612 = xor i64 %add3611, -1
  %cmp3613 = icmp eq i64 %neg3612, -1
  %conv3614 = zext i1 %cmp3613 to i32
  %sub3615 = sub nsw i32 0, %conv3614
  %conv3616 = sext i32 %sub3615 to i64
  %691 = load i32, i32* %height, align 4
  %mul3617 = mul i32 0, %691
  %conv3618 = zext i32 %mul3617 to i64
  %692 = load i64, i64* %nbytes, align 8
  %add3619 = add nsw i64 %conv3618, %692
  %mul3620 = mul nsw i64 0, %add3619
  %add3621 = add nsw i64 %mul3620, 1
  %shl3622 = shl i64 %add3621, 62
  %sub3623 = sub nsw i64 %shl3622, 1
  %mul3624 = mul nsw i64 %sub3623, 2
  %add3625 = add nsw i64 %mul3624, 1
  %sub3626 = sub nsw i64 %conv3616, %add3625
  br label %cond.end.3633

cond.false.3627:                                  ; preds = %cond.false.3598
  %693 = load i32, i32* %height, align 4
  %mul3628 = mul i32 0, %693
  %conv3629 = zext i32 %mul3628 to i64
  %694 = load i64, i64* %nbytes, align 8
  %add3630 = add nsw i64 %conv3629, %694
  %mul3631 = mul nsw i64 0, %add3630
  %add3632 = add nsw i64 %mul3631, 0
  br label %cond.end.3633

cond.end.3633:                                    ; preds = %cond.false.3627, %cond.true.3606
  %cond3634 = phi i64 [ %sub3626, %cond.true.3606 ], [ %add3632, %cond.false.3627 ]
  %695 = load i32, i32* %height, align 4
  %conv3635 = zext i32 %695 to i64
  %div3636 = sdiv i64 %cond3634, %conv3635
  %696 = load i64, i64* %nbytes, align 8
  %cmp3637 = icmp slt i64 %div3636, %696
  br i1 %cmp3637, label %cond.true.3734, label %lor.lhs.false.3717

cond.false.3639:                                  ; preds = %lor.lhs.false.3558
  %697 = load i32, i32* %height, align 4
  %cmp3640 = icmp eq i32 %697, 0
  br i1 %cmp3640, label %cond.true.3642, label %cond.false.3643

cond.true.3642:                                   ; preds = %cond.false.3639
  br i1 false, label %cond.true.3734, label %lor.lhs.false.3717

cond.false.3643:                                  ; preds = %cond.false.3639
  %698 = load i64, i64* %nbytes, align 8
  %cmp3644 = icmp slt i64 %698, 0
  br i1 %cmp3644, label %cond.true.3646, label %cond.false.3687

cond.true.3646:                                   ; preds = %cond.false.3643
  %699 = load i64, i64* %nbytes, align 8
  %700 = load i32, i32* %height, align 4
  %mul3647 = mul i32 0, %700
  %conv3648 = zext i32 %mul3647 to i64
  %701 = load i64, i64* %nbytes, align 8
  %add3649 = add nsw i64 %conv3648, %701
  %mul3650 = mul nsw i64 0, %add3649
  %sub3651 = sub nsw i64 %mul3650, 1
  %cmp3652 = icmp slt i64 %sub3651, 0
  br i1 %cmp3652, label %cond.true.3654, label %cond.false.3675

cond.true.3654:                                   ; preds = %cond.true.3646
  %702 = load i32, i32* %height, align 4
  %mul3655 = mul i32 0, %702
  %conv3656 = zext i32 %mul3655 to i64
  %703 = load i64, i64* %nbytes, align 8
  %add3657 = add nsw i64 %conv3656, %703
  %mul3658 = mul nsw i64 0, %add3657
  %add3659 = add nsw i64 %mul3658, 0
  %neg3660 = xor i64 %add3659, -1
  %cmp3661 = icmp eq i64 %neg3660, -1
  %conv3662 = zext i1 %cmp3661 to i32
  %sub3663 = sub nsw i32 0, %conv3662
  %conv3664 = sext i32 %sub3663 to i64
  %704 = load i32, i32* %height, align 4
  %mul3665 = mul i32 0, %704
  %conv3666 = zext i32 %mul3665 to i64
  %705 = load i64, i64* %nbytes, align 8
  %add3667 = add nsw i64 %conv3666, %705
  %mul3668 = mul nsw i64 0, %add3667
  %add3669 = add nsw i64 %mul3668, 1
  %shl3670 = shl i64 %add3669, 62
  %sub3671 = sub nsw i64 %shl3670, 1
  %mul3672 = mul nsw i64 %sub3671, 2
  %add3673 = add nsw i64 %mul3672, 1
  %sub3674 = sub nsw i64 %conv3664, %add3673
  br label %cond.end.3681

cond.false.3675:                                  ; preds = %cond.true.3646
  %706 = load i32, i32* %height, align 4
  %mul3676 = mul i32 0, %706
  %conv3677 = zext i32 %mul3676 to i64
  %707 = load i64, i64* %nbytes, align 8
  %add3678 = add nsw i64 %conv3677, %707
  %mul3679 = mul nsw i64 0, %add3678
  %add3680 = add nsw i64 %mul3679, 0
  br label %cond.end.3681

cond.end.3681:                                    ; preds = %cond.false.3675, %cond.true.3654
  %cond3682 = phi i64 [ %sub3674, %cond.true.3654 ], [ %add3680, %cond.false.3675 ]
  %708 = load i32, i32* %height, align 4
  %conv3683 = zext i32 %708 to i64
  %div3684 = sdiv i64 %cond3682, %conv3683
  %cmp3685 = icmp slt i64 %699, %div3684
  br i1 %cmp3685, label %cond.true.3734, label %lor.lhs.false.3717

cond.false.3687:                                  ; preds = %cond.false.3643
  %709 = load i32, i32* %height, align 4
  %mul3688 = mul i32 0, %709
  %conv3689 = zext i32 %mul3688 to i64
  %710 = load i64, i64* %nbytes, align 8
  %add3690 = add nsw i64 %conv3689, %710
  %mul3691 = mul nsw i64 0, %add3690
  %sub3692 = sub nsw i64 %mul3691, 1
  %cmp3693 = icmp slt i64 %sub3692, 0
  br i1 %cmp3693, label %cond.true.3695, label %cond.false.3705

cond.true.3695:                                   ; preds = %cond.false.3687
  %711 = load i32, i32* %height, align 4
  %mul3696 = mul i32 0, %711
  %conv3697 = zext i32 %mul3696 to i64
  %712 = load i64, i64* %nbytes, align 8
  %add3698 = add nsw i64 %conv3697, %712
  %mul3699 = mul nsw i64 0, %add3698
  %add3700 = add nsw i64 %mul3699, 1
  %shl3701 = shl i64 %add3700, 62
  %sub3702 = sub nsw i64 %shl3701, 1
  %mul3703 = mul nsw i64 %sub3702, 2
  %add3704 = add nsw i64 %mul3703, 1
  br label %cond.end.3711

cond.false.3705:                                  ; preds = %cond.false.3687
  %713 = load i32, i32* %height, align 4
  %mul3706 = mul i32 0, %713
  %conv3707 = zext i32 %mul3706 to i64
  %714 = load i64, i64* %nbytes, align 8
  %add3708 = add nsw i64 %conv3707, %714
  %mul3709 = mul nsw i64 0, %add3708
  %sub3710 = sub nsw i64 %mul3709, 1
  br label %cond.end.3711

cond.end.3711:                                    ; preds = %cond.false.3705, %cond.true.3695
  %cond3712 = phi i64 [ %add3704, %cond.true.3695 ], [ %sub3710, %cond.false.3705 ]
  %715 = load i32, i32* %height, align 4
  %conv3713 = zext i32 %715 to i64
  %div3714 = sdiv i64 %cond3712, %conv3713
  %716 = load i64, i64* %nbytes, align 8
  %cmp3715 = icmp slt i64 %div3714, %716
  br i1 %cmp3715, label %cond.true.3734, label %lor.lhs.false.3717

lor.lhs.false.3717:                               ; preds = %cond.end.3711, %cond.end.3681, %cond.true.3642, %cond.end.3633, %cond.true.3597, %cond.end.3588
  %717 = load i64, i64* %nbytes, align 8
  %718 = load i32, i32* %height, align 4
  %conv3718 = zext i32 %718 to i64
  %mul3719 = mul nsw i64 %717, %conv3718
  %mul3720 = mul nsw i64 0, %mul3719
  %sub3721 = sub nsw i64 %mul3720, 1
  %cmp3722 = icmp slt i64 %sub3721, 0
  br i1 %cmp3722, label %land.lhs.true.3724, label %lor.lhs.false.3729

land.lhs.true.3724:                               ; preds = %lor.lhs.false.3717
  %719 = load i64, i64* %nbytes, align 8
  %720 = load i32, i32* %height, align 4
  %conv3725 = zext i32 %720 to i64
  %mul3726 = mul nsw i64 %719, %conv3725
  %cmp3727 = icmp slt i64 %mul3726, -32768
  br i1 %cmp3727, label %cond.true.3734, label %lor.lhs.false.3729

lor.lhs.false.3729:                               ; preds = %land.lhs.true.3724, %lor.lhs.false.3717
  %721 = load i64, i64* %nbytes, align 8
  %722 = load i32, i32* %height, align 4
  %conv3730 = zext i32 %722 to i64
  %mul3731 = mul nsw i64 %721, %conv3730
  %cmp3732 = icmp slt i64 32767, %mul3731
  br i1 %cmp3732, label %cond.true.3734, label %cond.false.3763

cond.true.3734:                                   ; preds = %lor.lhs.false.3729, %land.lhs.true.3724, %cond.end.3711, %cond.end.3681, %cond.true.3642, %cond.end.3633, %cond.true.3597, %cond.end.3588, %land.lhs.true.3555, %land.lhs.true.3549
  %723 = load i64, i64* %nbytes, align 8
  %conv3735 = trunc i64 %723 to i16
  %conv3736 = zext i16 %conv3735 to i32
  %724 = load i32, i32* %height, align 4
  %conv3737 = trunc i32 %724 to i16
  %conv3738 = zext i16 %conv3737 to i32
  %mul3739 = mul nsw i32 %conv3736, %conv3738
  %cmp3740 = icmp sle i32 %mul3739, 32767
  br i1 %cmp3740, label %cond.true.3742, label %cond.false.3750

cond.true.3742:                                   ; preds = %cond.true.3734
  %725 = load i64, i64* %nbytes, align 8
  %conv3743 = trunc i64 %725 to i16
  %conv3744 = zext i16 %conv3743 to i32
  %726 = load i32, i32* %height, align 4
  %conv3745 = trunc i32 %726 to i16
  %conv3746 = zext i16 %conv3745 to i32
  %mul3747 = mul nsw i32 %conv3744, %conv3746
  %conv3748 = trunc i32 %mul3747 to i16
  %conv3749 = sext i16 %conv3748 to i32
  br label %cond.end.3760

cond.false.3750:                                  ; preds = %cond.true.3734
  %727 = load i64, i64* %nbytes, align 8
  %conv3751 = trunc i64 %727 to i16
  %conv3752 = zext i16 %conv3751 to i32
  %728 = load i32, i32* %height, align 4
  %conv3753 = trunc i32 %728 to i16
  %conv3754 = zext i16 %conv3753 to i32
  %mul3755 = mul nsw i32 %conv3752, %conv3754
  %sub3756 = sub nsw i32 %mul3755, -32768
  %conv3757 = trunc i32 %sub3756 to i16
  %conv3758 = sext i16 %conv3757 to i32
  %add3759 = add nsw i32 %conv3758, -32768
  br label %cond.end.3760

cond.end.3760:                                    ; preds = %cond.false.3750, %cond.true.3742
  %cond3761 = phi i32 [ %conv3749, %cond.true.3742 ], [ %add3759, %cond.false.3750 ]
  %conv3762 = sext i32 %cond3761 to i64
  store i64 %conv3762, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.3763:                                  ; preds = %lor.lhs.false.3729
  %729 = load i64, i64* %nbytes, align 8
  %conv3764 = trunc i64 %729 to i16
  %conv3765 = zext i16 %conv3764 to i32
  %730 = load i32, i32* %height, align 4
  %conv3766 = trunc i32 %730 to i16
  %conv3767 = zext i16 %conv3766 to i32
  %mul3768 = mul nsw i32 %conv3765, %conv3767
  %cmp3769 = icmp sle i32 %mul3768, 32767
  br i1 %cmp3769, label %cond.true.3771, label %cond.false.3779

cond.true.3771:                                   ; preds = %cond.false.3763
  %731 = load i64, i64* %nbytes, align 8
  %conv3772 = trunc i64 %731 to i16
  %conv3773 = zext i16 %conv3772 to i32
  %732 = load i32, i32* %height, align 4
  %conv3774 = trunc i32 %732 to i16
  %conv3775 = zext i16 %conv3774 to i32
  %mul3776 = mul nsw i32 %conv3773, %conv3775
  %conv3777 = trunc i32 %mul3776 to i16
  %conv3778 = sext i16 %conv3777 to i32
  br label %cond.end.3789

cond.false.3779:                                  ; preds = %cond.false.3763
  %733 = load i64, i64* %nbytes, align 8
  %conv3780 = trunc i64 %733 to i16
  %conv3781 = zext i16 %conv3780 to i32
  %734 = load i32, i32* %height, align 4
  %conv3782 = trunc i32 %734 to i16
  %conv3783 = zext i16 %conv3782 to i32
  %mul3784 = mul nsw i32 %conv3781, %conv3783
  %sub3785 = sub nsw i32 %mul3784, -32768
  %conv3786 = trunc i32 %sub3785 to i16
  %conv3787 = sext i16 %conv3786 to i32
  %add3788 = add nsw i32 %conv3787, -32768
  br label %cond.end.3789

cond.end.3789:                                    ; preds = %cond.false.3779, %cond.true.3771
  %cond3790 = phi i32 [ %conv3778, %cond.true.3771 ], [ %add3788, %cond.false.3779 ]
  %conv3791 = sext i32 %cond3790 to i64
  store i64 %conv3791, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.3792:                                  ; preds = %cond.false.3130
  br i1 false, label %cond.true.3793, label %cond.false.4313

cond.true.3793:                                   ; preds = %cond.false.3792
  br i1 false, label %cond.true.3794, label %cond.false.4054

cond.true.3794:                                   ; preds = %cond.true.3793
  %735 = load i32, i32* %height, align 4
  %mul3795 = mul nsw i32 0, %735
  %736 = load i64, i64* %nbytes, align 8
  %conv3796 = trunc i64 %736 to i32
  %add3797 = add nsw i32 %mul3795, %conv3796
  %mul3798 = mul nsw i32 0, %add3797
  %sub3799 = sub nsw i32 %mul3798, 1
  %cmp3800 = icmp slt i32 %sub3799, 0
  br i1 %cmp3800, label %cond.true.3802, label %cond.false.3822

cond.true.3802:                                   ; preds = %cond.true.3794
  %737 = load i32, i32* %height, align 4
  %mul3803 = mul nsw i32 0, %737
  %738 = load i64, i64* %nbytes, align 8
  %conv3804 = trunc i64 %738 to i32
  %add3805 = add nsw i32 %mul3803, %conv3804
  %mul3806 = mul nsw i32 0, %add3805
  %add3807 = add nsw i32 %mul3806, 0
  %neg3808 = xor i32 %add3807, -1
  %cmp3809 = icmp eq i32 %neg3808, -1
  %conv3810 = zext i1 %cmp3809 to i32
  %sub3811 = sub nsw i32 0, %conv3810
  %739 = load i32, i32* %height, align 4
  %mul3812 = mul nsw i32 0, %739
  %740 = load i64, i64* %nbytes, align 8
  %conv3813 = trunc i64 %740 to i32
  %add3814 = add nsw i32 %mul3812, %conv3813
  %mul3815 = mul nsw i32 0, %add3814
  %add3816 = add nsw i32 %mul3815, 1
  %shl3817 = shl i32 %add3816, 30
  %sub3818 = sub nsw i32 %shl3817, 1
  %mul3819 = mul nsw i32 %sub3818, 2
  %add3820 = add nsw i32 %mul3819, 1
  %sub3821 = sub nsw i32 %sub3811, %add3820
  br label %cond.end.3828

cond.false.3822:                                  ; preds = %cond.true.3794
  %741 = load i32, i32* %height, align 4
  %mul3823 = mul nsw i32 0, %741
  %742 = load i64, i64* %nbytes, align 8
  %conv3824 = trunc i64 %742 to i32
  %add3825 = add nsw i32 %mul3823, %conv3824
  %mul3826 = mul nsw i32 0, %add3825
  %add3827 = add nsw i32 %mul3826, 0
  br label %cond.end.3828

cond.end.3828:                                    ; preds = %cond.false.3822, %cond.true.3802
  %cond3829 = phi i32 [ %sub3821, %cond.true.3802 ], [ %add3827, %cond.false.3822 ]
  %cmp3830 = icmp eq i32 %cond3829, 0
  br i1 %cmp3830, label %land.lhs.true.3832, label %lor.lhs.false.3846

land.lhs.true.3832:                               ; preds = %cond.end.3828
  %743 = load i64, i64* %nbytes, align 8
  %conv3833 = trunc i64 %743 to i32
  %cmp3834 = icmp slt i32 %conv3833, 0
  br i1 %cmp3834, label %land.lhs.true.3836, label %lor.lhs.false.3839

land.lhs.true.3836:                               ; preds = %land.lhs.true.3832
  %744 = load i32, i32* %height, align 4
  %cmp3837 = icmp slt i32 0, %744
  br i1 %cmp3837, label %cond.true.4022, label %lor.lhs.false.3839

lor.lhs.false.3839:                               ; preds = %land.lhs.true.3836, %land.lhs.true.3832
  %745 = load i32, i32* %height, align 4
  %cmp3840 = icmp slt i32 %745, 0
  br i1 %cmp3840, label %land.lhs.true.3842, label %lor.lhs.false.3846

land.lhs.true.3842:                               ; preds = %lor.lhs.false.3839
  %746 = load i64, i64* %nbytes, align 8
  %conv3843 = trunc i64 %746 to i32
  %cmp3844 = icmp slt i32 0, %conv3843
  br i1 %cmp3844, label %cond.true.4022, label %lor.lhs.false.3846

lor.lhs.false.3846:                               ; preds = %land.lhs.true.3842, %lor.lhs.false.3839, %cond.end.3828
  %747 = load i32, i32* %height, align 4
  %cmp3847 = icmp slt i32 %747, 0
  br i1 %cmp3847, label %cond.true.3849, label %cond.false.3927

cond.true.3849:                                   ; preds = %lor.lhs.false.3846
  %748 = load i64, i64* %nbytes, align 8
  %conv3850 = trunc i64 %748 to i32
  %cmp3851 = icmp slt i32 %conv3850, 0
  br i1 %cmp3851, label %cond.true.3853, label %cond.false.3883

cond.true.3853:                                   ; preds = %cond.true.3849
  %749 = load i64, i64* %nbytes, align 8
  %conv3854 = trunc i64 %749 to i32
  %750 = load i32, i32* %height, align 4
  %mul3855 = mul nsw i32 0, %750
  %751 = load i64, i64* %nbytes, align 8
  %conv3856 = trunc i64 %751 to i32
  %add3857 = add nsw i32 %mul3855, %conv3856
  %mul3858 = mul nsw i32 0, %add3857
  %sub3859 = sub nsw i32 %mul3858, 1
  %cmp3860 = icmp slt i32 %sub3859, 0
  br i1 %cmp3860, label %cond.true.3862, label %cond.false.3872

cond.true.3862:                                   ; preds = %cond.true.3853
  %752 = load i32, i32* %height, align 4
  %mul3863 = mul nsw i32 0, %752
  %753 = load i64, i64* %nbytes, align 8
  %conv3864 = trunc i64 %753 to i32
  %add3865 = add nsw i32 %mul3863, %conv3864
  %mul3866 = mul nsw i32 0, %add3865
  %add3867 = add nsw i32 %mul3866, 1
  %shl3868 = shl i32 %add3867, 30
  %sub3869 = sub nsw i32 %shl3868, 1
  %mul3870 = mul nsw i32 %sub3869, 2
  %add3871 = add nsw i32 %mul3870, 1
  br label %cond.end.3878

cond.false.3872:                                  ; preds = %cond.true.3853
  %754 = load i32, i32* %height, align 4
  %mul3873 = mul nsw i32 0, %754
  %755 = load i64, i64* %nbytes, align 8
  %conv3874 = trunc i64 %755 to i32
  %add3875 = add nsw i32 %mul3873, %conv3874
  %mul3876 = mul nsw i32 0, %add3875
  %sub3877 = sub nsw i32 %mul3876, 1
  br label %cond.end.3878

cond.end.3878:                                    ; preds = %cond.false.3872, %cond.true.3862
  %cond3879 = phi i32 [ %add3871, %cond.true.3862 ], [ %sub3877, %cond.false.3872 ]
  %756 = load i32, i32* %height, align 4
  %div3880 = sdiv i32 %cond3879, %756
  %cmp3881 = icmp slt i32 %conv3854, %div3880
  br i1 %cmp3881, label %cond.true.4022, label %lor.lhs.false.4005

cond.false.3883:                                  ; preds = %cond.true.3849
  %757 = load i32, i32* %height, align 4
  %cmp3884 = icmp eq i32 %757, -1
  br i1 %cmp3884, label %cond.true.3886, label %cond.false.3887

cond.true.3886:                                   ; preds = %cond.false.3883
  br i1 false, label %cond.true.4022, label %lor.lhs.false.4005

cond.false.3887:                                  ; preds = %cond.false.3883
  %758 = load i32, i32* %height, align 4
  %mul3888 = mul nsw i32 0, %758
  %759 = load i64, i64* %nbytes, align 8
  %conv3889 = trunc i64 %759 to i32
  %add3890 = add nsw i32 %mul3888, %conv3889
  %mul3891 = mul nsw i32 0, %add3890
  %sub3892 = sub nsw i32 %mul3891, 1
  %cmp3893 = icmp slt i32 %sub3892, 0
  br i1 %cmp3893, label %cond.true.3895, label %cond.false.3915

cond.true.3895:                                   ; preds = %cond.false.3887
  %760 = load i32, i32* %height, align 4
  %mul3896 = mul nsw i32 0, %760
  %761 = load i64, i64* %nbytes, align 8
  %conv3897 = trunc i64 %761 to i32
  %add3898 = add nsw i32 %mul3896, %conv3897
  %mul3899 = mul nsw i32 0, %add3898
  %add3900 = add nsw i32 %mul3899, 0
  %neg3901 = xor i32 %add3900, -1
  %cmp3902 = icmp eq i32 %neg3901, -1
  %conv3903 = zext i1 %cmp3902 to i32
  %sub3904 = sub nsw i32 0, %conv3903
  %762 = load i32, i32* %height, align 4
  %mul3905 = mul nsw i32 0, %762
  %763 = load i64, i64* %nbytes, align 8
  %conv3906 = trunc i64 %763 to i32
  %add3907 = add nsw i32 %mul3905, %conv3906
  %mul3908 = mul nsw i32 0, %add3907
  %add3909 = add nsw i32 %mul3908, 1
  %shl3910 = shl i32 %add3909, 30
  %sub3911 = sub nsw i32 %shl3910, 1
  %mul3912 = mul nsw i32 %sub3911, 2
  %add3913 = add nsw i32 %mul3912, 1
  %sub3914 = sub nsw i32 %sub3904, %add3913
  br label %cond.end.3921

cond.false.3915:                                  ; preds = %cond.false.3887
  %764 = load i32, i32* %height, align 4
  %mul3916 = mul nsw i32 0, %764
  %765 = load i64, i64* %nbytes, align 8
  %conv3917 = trunc i64 %765 to i32
  %add3918 = add nsw i32 %mul3916, %conv3917
  %mul3919 = mul nsw i32 0, %add3918
  %add3920 = add nsw i32 %mul3919, 0
  br label %cond.end.3921

cond.end.3921:                                    ; preds = %cond.false.3915, %cond.true.3895
  %cond3922 = phi i32 [ %sub3914, %cond.true.3895 ], [ %add3920, %cond.false.3915 ]
  %766 = load i32, i32* %height, align 4
  %div3923 = sdiv i32 %cond3922, %766
  %767 = load i64, i64* %nbytes, align 8
  %conv3924 = trunc i64 %767 to i32
  %cmp3925 = icmp slt i32 %div3923, %conv3924
  br i1 %cmp3925, label %cond.true.4022, label %lor.lhs.false.4005

cond.false.3927:                                  ; preds = %lor.lhs.false.3846
  %768 = load i32, i32* %height, align 4
  %cmp3928 = icmp eq i32 %768, 0
  br i1 %cmp3928, label %cond.true.3930, label %cond.false.3931

cond.true.3930:                                   ; preds = %cond.false.3927
  br i1 false, label %cond.true.4022, label %lor.lhs.false.4005

cond.false.3931:                                  ; preds = %cond.false.3927
  %769 = load i64, i64* %nbytes, align 8
  %conv3932 = trunc i64 %769 to i32
  %cmp3933 = icmp slt i32 %conv3932, 0
  br i1 %cmp3933, label %cond.true.3935, label %cond.false.3975

cond.true.3935:                                   ; preds = %cond.false.3931
  %770 = load i64, i64* %nbytes, align 8
  %conv3936 = trunc i64 %770 to i32
  %771 = load i32, i32* %height, align 4
  %mul3937 = mul nsw i32 0, %771
  %772 = load i64, i64* %nbytes, align 8
  %conv3938 = trunc i64 %772 to i32
  %add3939 = add nsw i32 %mul3937, %conv3938
  %mul3940 = mul nsw i32 0, %add3939
  %sub3941 = sub nsw i32 %mul3940, 1
  %cmp3942 = icmp slt i32 %sub3941, 0
  br i1 %cmp3942, label %cond.true.3944, label %cond.false.3964

cond.true.3944:                                   ; preds = %cond.true.3935
  %773 = load i32, i32* %height, align 4
  %mul3945 = mul nsw i32 0, %773
  %774 = load i64, i64* %nbytes, align 8
  %conv3946 = trunc i64 %774 to i32
  %add3947 = add nsw i32 %mul3945, %conv3946
  %mul3948 = mul nsw i32 0, %add3947
  %add3949 = add nsw i32 %mul3948, 0
  %neg3950 = xor i32 %add3949, -1
  %cmp3951 = icmp eq i32 %neg3950, -1
  %conv3952 = zext i1 %cmp3951 to i32
  %sub3953 = sub nsw i32 0, %conv3952
  %775 = load i32, i32* %height, align 4
  %mul3954 = mul nsw i32 0, %775
  %776 = load i64, i64* %nbytes, align 8
  %conv3955 = trunc i64 %776 to i32
  %add3956 = add nsw i32 %mul3954, %conv3955
  %mul3957 = mul nsw i32 0, %add3956
  %add3958 = add nsw i32 %mul3957, 1
  %shl3959 = shl i32 %add3958, 30
  %sub3960 = sub nsw i32 %shl3959, 1
  %mul3961 = mul nsw i32 %sub3960, 2
  %add3962 = add nsw i32 %mul3961, 1
  %sub3963 = sub nsw i32 %sub3953, %add3962
  br label %cond.end.3970

cond.false.3964:                                  ; preds = %cond.true.3935
  %777 = load i32, i32* %height, align 4
  %mul3965 = mul nsw i32 0, %777
  %778 = load i64, i64* %nbytes, align 8
  %conv3966 = trunc i64 %778 to i32
  %add3967 = add nsw i32 %mul3965, %conv3966
  %mul3968 = mul nsw i32 0, %add3967
  %add3969 = add nsw i32 %mul3968, 0
  br label %cond.end.3970

cond.end.3970:                                    ; preds = %cond.false.3964, %cond.true.3944
  %cond3971 = phi i32 [ %sub3963, %cond.true.3944 ], [ %add3969, %cond.false.3964 ]
  %779 = load i32, i32* %height, align 4
  %div3972 = sdiv i32 %cond3971, %779
  %cmp3973 = icmp slt i32 %conv3936, %div3972
  br i1 %cmp3973, label %cond.true.4022, label %lor.lhs.false.4005

cond.false.3975:                                  ; preds = %cond.false.3931
  %780 = load i32, i32* %height, align 4
  %mul3976 = mul nsw i32 0, %780
  %781 = load i64, i64* %nbytes, align 8
  %conv3977 = trunc i64 %781 to i32
  %add3978 = add nsw i32 %mul3976, %conv3977
  %mul3979 = mul nsw i32 0, %add3978
  %sub3980 = sub nsw i32 %mul3979, 1
  %cmp3981 = icmp slt i32 %sub3980, 0
  br i1 %cmp3981, label %cond.true.3983, label %cond.false.3993

cond.true.3983:                                   ; preds = %cond.false.3975
  %782 = load i32, i32* %height, align 4
  %mul3984 = mul nsw i32 0, %782
  %783 = load i64, i64* %nbytes, align 8
  %conv3985 = trunc i64 %783 to i32
  %add3986 = add nsw i32 %mul3984, %conv3985
  %mul3987 = mul nsw i32 0, %add3986
  %add3988 = add nsw i32 %mul3987, 1
  %shl3989 = shl i32 %add3988, 30
  %sub3990 = sub nsw i32 %shl3989, 1
  %mul3991 = mul nsw i32 %sub3990, 2
  %add3992 = add nsw i32 %mul3991, 1
  br label %cond.end.3999

cond.false.3993:                                  ; preds = %cond.false.3975
  %784 = load i32, i32* %height, align 4
  %mul3994 = mul nsw i32 0, %784
  %785 = load i64, i64* %nbytes, align 8
  %conv3995 = trunc i64 %785 to i32
  %add3996 = add nsw i32 %mul3994, %conv3995
  %mul3997 = mul nsw i32 0, %add3996
  %sub3998 = sub nsw i32 %mul3997, 1
  br label %cond.end.3999

cond.end.3999:                                    ; preds = %cond.false.3993, %cond.true.3983
  %cond4000 = phi i32 [ %add3992, %cond.true.3983 ], [ %sub3998, %cond.false.3993 ]
  %786 = load i32, i32* %height, align 4
  %div4001 = sdiv i32 %cond4000, %786
  %787 = load i64, i64* %nbytes, align 8
  %conv4002 = trunc i64 %787 to i32
  %cmp4003 = icmp slt i32 %div4001, %conv4002
  br i1 %cmp4003, label %cond.true.4022, label %lor.lhs.false.4005

lor.lhs.false.4005:                               ; preds = %cond.end.3999, %cond.end.3970, %cond.true.3930, %cond.end.3921, %cond.true.3886, %cond.end.3878
  %788 = load i64, i64* %nbytes, align 8
  %conv4006 = trunc i64 %788 to i32
  %789 = load i32, i32* %height, align 4
  %mul4007 = mul nsw i32 %conv4006, %789
  %mul4008 = mul nsw i32 0, %mul4007
  %sub4009 = sub nsw i32 %mul4008, 1
  %cmp4010 = icmp slt i32 %sub4009, 0
  br i1 %cmp4010, label %land.lhs.true.4012, label %lor.lhs.false.4017

land.lhs.true.4012:                               ; preds = %lor.lhs.false.4005
  %790 = load i64, i64* %nbytes, align 8
  %conv4013 = trunc i64 %790 to i32
  %791 = load i32, i32* %height, align 4
  %mul4014 = mul nsw i32 %conv4013, %791
  %cmp4015 = icmp slt i32 %mul4014, -2147483648
  br i1 %cmp4015, label %cond.true.4022, label %lor.lhs.false.4017

lor.lhs.false.4017:                               ; preds = %land.lhs.true.4012, %lor.lhs.false.4005
  %792 = load i64, i64* %nbytes, align 8
  %conv4018 = trunc i64 %792 to i32
  %793 = load i32, i32* %height, align 4
  %mul4019 = mul nsw i32 %conv4018, %793
  %cmp4020 = icmp slt i32 2147483647, %mul4019
  br i1 %cmp4020, label %cond.true.4022, label %cond.false.4038

cond.true.4022:                                   ; preds = %lor.lhs.false.4017, %land.lhs.true.4012, %cond.end.3999, %cond.end.3970, %cond.true.3930, %cond.end.3921, %cond.true.3886, %cond.end.3878, %land.lhs.true.3842, %land.lhs.true.3836
  %794 = load i64, i64* %nbytes, align 8
  %conv4023 = trunc i64 %794 to i32
  %795 = load i32, i32* %height, align 4
  %mul4024 = mul i32 %conv4023, %795
  %cmp4025 = icmp ule i32 %mul4024, 2147483647
  br i1 %cmp4025, label %cond.true.4027, label %cond.false.4030

cond.true.4027:                                   ; preds = %cond.true.4022
  %796 = load i64, i64* %nbytes, align 8
  %conv4028 = trunc i64 %796 to i32
  %797 = load i32, i32* %height, align 4
  %mul4029 = mul i32 %conv4028, %797
  br label %cond.end.4035

cond.false.4030:                                  ; preds = %cond.true.4022
  %798 = load i64, i64* %nbytes, align 8
  %conv4031 = trunc i64 %798 to i32
  %799 = load i32, i32* %height, align 4
  %mul4032 = mul i32 %conv4031, %799
  %sub4033 = sub i32 %mul4032, -2147483648
  %add4034 = add nsw i32 %sub4033, -2147483648
  br label %cond.end.4035

cond.end.4035:                                    ; preds = %cond.false.4030, %cond.true.4027
  %cond4036 = phi i32 [ %mul4029, %cond.true.4027 ], [ %add4034, %cond.false.4030 ]
  %conv4037 = sext i32 %cond4036 to i64
  store i64 %conv4037, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.4038:                                  ; preds = %lor.lhs.false.4017
  %800 = load i64, i64* %nbytes, align 8
  %conv4039 = trunc i64 %800 to i32
  %801 = load i32, i32* %height, align 4
  %mul4040 = mul i32 %conv4039, %801
  %cmp4041 = icmp ule i32 %mul4040, 2147483647
  br i1 %cmp4041, label %cond.true.4043, label %cond.false.4046

cond.true.4043:                                   ; preds = %cond.false.4038
  %802 = load i64, i64* %nbytes, align 8
  %conv4044 = trunc i64 %802 to i32
  %803 = load i32, i32* %height, align 4
  %mul4045 = mul i32 %conv4044, %803
  br label %cond.end.4051

cond.false.4046:                                  ; preds = %cond.false.4038
  %804 = load i64, i64* %nbytes, align 8
  %conv4047 = trunc i64 %804 to i32
  %805 = load i32, i32* %height, align 4
  %mul4048 = mul i32 %conv4047, %805
  %sub4049 = sub i32 %mul4048, -2147483648
  %add4050 = add nsw i32 %sub4049, -2147483648
  br label %cond.end.4051

cond.end.4051:                                    ; preds = %cond.false.4046, %cond.true.4043
  %cond4052 = phi i32 [ %mul4045, %cond.true.4043 ], [ %add4050, %cond.false.4046 ]
  %conv4053 = sext i32 %cond4052 to i64
  store i64 %conv4053, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.4054:                                  ; preds = %cond.true.3793
  %806 = load i32, i32* %height, align 4
  %mul4055 = mul i32 0, %806
  %conv4056 = zext i32 %mul4055 to i64
  %807 = load i64, i64* %nbytes, align 8
  %add4057 = add nsw i64 %conv4056, %807
  %mul4058 = mul nsw i64 0, %add4057
  %sub4059 = sub nsw i64 %mul4058, 1
  %cmp4060 = icmp slt i64 %sub4059, 0
  br i1 %cmp4060, label %cond.true.4062, label %cond.false.4083

cond.true.4062:                                   ; preds = %cond.false.4054
  %808 = load i32, i32* %height, align 4
  %mul4063 = mul i32 0, %808
  %conv4064 = zext i32 %mul4063 to i64
  %809 = load i64, i64* %nbytes, align 8
  %add4065 = add nsw i64 %conv4064, %809
  %mul4066 = mul nsw i64 0, %add4065
  %add4067 = add nsw i64 %mul4066, 0
  %neg4068 = xor i64 %add4067, -1
  %cmp4069 = icmp eq i64 %neg4068, -1
  %conv4070 = zext i1 %cmp4069 to i32
  %sub4071 = sub nsw i32 0, %conv4070
  %conv4072 = sext i32 %sub4071 to i64
  %810 = load i32, i32* %height, align 4
  %mul4073 = mul i32 0, %810
  %conv4074 = zext i32 %mul4073 to i64
  %811 = load i64, i64* %nbytes, align 8
  %add4075 = add nsw i64 %conv4074, %811
  %mul4076 = mul nsw i64 0, %add4075
  %add4077 = add nsw i64 %mul4076, 1
  %shl4078 = shl i64 %add4077, 62
  %sub4079 = sub nsw i64 %shl4078, 1
  %mul4080 = mul nsw i64 %sub4079, 2
  %add4081 = add nsw i64 %mul4080, 1
  %sub4082 = sub nsw i64 %conv4072, %add4081
  br label %cond.end.4089

cond.false.4083:                                  ; preds = %cond.false.4054
  %812 = load i32, i32* %height, align 4
  %mul4084 = mul i32 0, %812
  %conv4085 = zext i32 %mul4084 to i64
  %813 = load i64, i64* %nbytes, align 8
  %add4086 = add nsw i64 %conv4085, %813
  %mul4087 = mul nsw i64 0, %add4086
  %add4088 = add nsw i64 %mul4087, 0
  br label %cond.end.4089

cond.end.4089:                                    ; preds = %cond.false.4083, %cond.true.4062
  %cond4090 = phi i64 [ %sub4082, %cond.true.4062 ], [ %add4088, %cond.false.4083 ]
  %cmp4091 = icmp eq i64 %cond4090, 0
  br i1 %cmp4091, label %land.lhs.true.4093, label %lor.lhs.false.4105

land.lhs.true.4093:                               ; preds = %cond.end.4089
  %814 = load i64, i64* %nbytes, align 8
  %cmp4094 = icmp slt i64 %814, 0
  br i1 %cmp4094, label %land.lhs.true.4096, label %lor.lhs.false.4099

land.lhs.true.4096:                               ; preds = %land.lhs.true.4093
  %815 = load i32, i32* %height, align 4
  %cmp4097 = icmp ult i32 0, %815
  br i1 %cmp4097, label %cond.true.4281, label %lor.lhs.false.4099

lor.lhs.false.4099:                               ; preds = %land.lhs.true.4096, %land.lhs.true.4093
  %816 = load i32, i32* %height, align 4
  %cmp4100 = icmp ult i32 %816, 0
  br i1 %cmp4100, label %land.lhs.true.4102, label %lor.lhs.false.4105

land.lhs.true.4102:                               ; preds = %lor.lhs.false.4099
  %817 = load i64, i64* %nbytes, align 8
  %cmp4103 = icmp slt i64 0, %817
  br i1 %cmp4103, label %cond.true.4281, label %lor.lhs.false.4105

lor.lhs.false.4105:                               ; preds = %land.lhs.true.4102, %lor.lhs.false.4099, %cond.end.4089
  %818 = load i32, i32* %height, align 4
  %cmp4106 = icmp ult i32 %818, 0
  br i1 %cmp4106, label %cond.true.4108, label %cond.false.4186

cond.true.4108:                                   ; preds = %lor.lhs.false.4105
  %819 = load i64, i64* %nbytes, align 8
  %cmp4109 = icmp slt i64 %819, 0
  br i1 %cmp4109, label %cond.true.4111, label %cond.false.4141

cond.true.4111:                                   ; preds = %cond.true.4108
  %820 = load i64, i64* %nbytes, align 8
  %821 = load i32, i32* %height, align 4
  %mul4112 = mul i32 0, %821
  %conv4113 = zext i32 %mul4112 to i64
  %822 = load i64, i64* %nbytes, align 8
  %add4114 = add nsw i64 %conv4113, %822
  %mul4115 = mul nsw i64 0, %add4114
  %sub4116 = sub nsw i64 %mul4115, 1
  %cmp4117 = icmp slt i64 %sub4116, 0
  br i1 %cmp4117, label %cond.true.4119, label %cond.false.4129

cond.true.4119:                                   ; preds = %cond.true.4111
  %823 = load i32, i32* %height, align 4
  %mul4120 = mul i32 0, %823
  %conv4121 = zext i32 %mul4120 to i64
  %824 = load i64, i64* %nbytes, align 8
  %add4122 = add nsw i64 %conv4121, %824
  %mul4123 = mul nsw i64 0, %add4122
  %add4124 = add nsw i64 %mul4123, 1
  %shl4125 = shl i64 %add4124, 62
  %sub4126 = sub nsw i64 %shl4125, 1
  %mul4127 = mul nsw i64 %sub4126, 2
  %add4128 = add nsw i64 %mul4127, 1
  br label %cond.end.4135

cond.false.4129:                                  ; preds = %cond.true.4111
  %825 = load i32, i32* %height, align 4
  %mul4130 = mul i32 0, %825
  %conv4131 = zext i32 %mul4130 to i64
  %826 = load i64, i64* %nbytes, align 8
  %add4132 = add nsw i64 %conv4131, %826
  %mul4133 = mul nsw i64 0, %add4132
  %sub4134 = sub nsw i64 %mul4133, 1
  br label %cond.end.4135

cond.end.4135:                                    ; preds = %cond.false.4129, %cond.true.4119
  %cond4136 = phi i64 [ %add4128, %cond.true.4119 ], [ %sub4134, %cond.false.4129 ]
  %827 = load i32, i32* %height, align 4
  %conv4137 = zext i32 %827 to i64
  %div4138 = sdiv i64 %cond4136, %conv4137
  %cmp4139 = icmp slt i64 %820, %div4138
  br i1 %cmp4139, label %cond.true.4281, label %lor.lhs.false.4264

cond.false.4141:                                  ; preds = %cond.true.4108
  %828 = load i32, i32* %height, align 4
  %cmp4142 = icmp eq i32 %828, -1
  br i1 %cmp4142, label %cond.true.4144, label %cond.false.4145

cond.true.4144:                                   ; preds = %cond.false.4141
  br i1 false, label %cond.true.4281, label %lor.lhs.false.4264

cond.false.4145:                                  ; preds = %cond.false.4141
  %829 = load i32, i32* %height, align 4
  %mul4146 = mul i32 0, %829
  %conv4147 = zext i32 %mul4146 to i64
  %830 = load i64, i64* %nbytes, align 8
  %add4148 = add nsw i64 %conv4147, %830
  %mul4149 = mul nsw i64 0, %add4148
  %sub4150 = sub nsw i64 %mul4149, 1
  %cmp4151 = icmp slt i64 %sub4150, 0
  br i1 %cmp4151, label %cond.true.4153, label %cond.false.4174

cond.true.4153:                                   ; preds = %cond.false.4145
  %831 = load i32, i32* %height, align 4
  %mul4154 = mul i32 0, %831
  %conv4155 = zext i32 %mul4154 to i64
  %832 = load i64, i64* %nbytes, align 8
  %add4156 = add nsw i64 %conv4155, %832
  %mul4157 = mul nsw i64 0, %add4156
  %add4158 = add nsw i64 %mul4157, 0
  %neg4159 = xor i64 %add4158, -1
  %cmp4160 = icmp eq i64 %neg4159, -1
  %conv4161 = zext i1 %cmp4160 to i32
  %sub4162 = sub nsw i32 0, %conv4161
  %conv4163 = sext i32 %sub4162 to i64
  %833 = load i32, i32* %height, align 4
  %mul4164 = mul i32 0, %833
  %conv4165 = zext i32 %mul4164 to i64
  %834 = load i64, i64* %nbytes, align 8
  %add4166 = add nsw i64 %conv4165, %834
  %mul4167 = mul nsw i64 0, %add4166
  %add4168 = add nsw i64 %mul4167, 1
  %shl4169 = shl i64 %add4168, 62
  %sub4170 = sub nsw i64 %shl4169, 1
  %mul4171 = mul nsw i64 %sub4170, 2
  %add4172 = add nsw i64 %mul4171, 1
  %sub4173 = sub nsw i64 %conv4163, %add4172
  br label %cond.end.4180

cond.false.4174:                                  ; preds = %cond.false.4145
  %835 = load i32, i32* %height, align 4
  %mul4175 = mul i32 0, %835
  %conv4176 = zext i32 %mul4175 to i64
  %836 = load i64, i64* %nbytes, align 8
  %add4177 = add nsw i64 %conv4176, %836
  %mul4178 = mul nsw i64 0, %add4177
  %add4179 = add nsw i64 %mul4178, 0
  br label %cond.end.4180

cond.end.4180:                                    ; preds = %cond.false.4174, %cond.true.4153
  %cond4181 = phi i64 [ %sub4173, %cond.true.4153 ], [ %add4179, %cond.false.4174 ]
  %837 = load i32, i32* %height, align 4
  %conv4182 = zext i32 %837 to i64
  %div4183 = sdiv i64 %cond4181, %conv4182
  %838 = load i64, i64* %nbytes, align 8
  %cmp4184 = icmp slt i64 %div4183, %838
  br i1 %cmp4184, label %cond.true.4281, label %lor.lhs.false.4264

cond.false.4186:                                  ; preds = %lor.lhs.false.4105
  %839 = load i32, i32* %height, align 4
  %cmp4187 = icmp eq i32 %839, 0
  br i1 %cmp4187, label %cond.true.4189, label %cond.false.4190

cond.true.4189:                                   ; preds = %cond.false.4186
  br i1 false, label %cond.true.4281, label %lor.lhs.false.4264

cond.false.4190:                                  ; preds = %cond.false.4186
  %840 = load i64, i64* %nbytes, align 8
  %cmp4191 = icmp slt i64 %840, 0
  br i1 %cmp4191, label %cond.true.4193, label %cond.false.4234

cond.true.4193:                                   ; preds = %cond.false.4190
  %841 = load i64, i64* %nbytes, align 8
  %842 = load i32, i32* %height, align 4
  %mul4194 = mul i32 0, %842
  %conv4195 = zext i32 %mul4194 to i64
  %843 = load i64, i64* %nbytes, align 8
  %add4196 = add nsw i64 %conv4195, %843
  %mul4197 = mul nsw i64 0, %add4196
  %sub4198 = sub nsw i64 %mul4197, 1
  %cmp4199 = icmp slt i64 %sub4198, 0
  br i1 %cmp4199, label %cond.true.4201, label %cond.false.4222

cond.true.4201:                                   ; preds = %cond.true.4193
  %844 = load i32, i32* %height, align 4
  %mul4202 = mul i32 0, %844
  %conv4203 = zext i32 %mul4202 to i64
  %845 = load i64, i64* %nbytes, align 8
  %add4204 = add nsw i64 %conv4203, %845
  %mul4205 = mul nsw i64 0, %add4204
  %add4206 = add nsw i64 %mul4205, 0
  %neg4207 = xor i64 %add4206, -1
  %cmp4208 = icmp eq i64 %neg4207, -1
  %conv4209 = zext i1 %cmp4208 to i32
  %sub4210 = sub nsw i32 0, %conv4209
  %conv4211 = sext i32 %sub4210 to i64
  %846 = load i32, i32* %height, align 4
  %mul4212 = mul i32 0, %846
  %conv4213 = zext i32 %mul4212 to i64
  %847 = load i64, i64* %nbytes, align 8
  %add4214 = add nsw i64 %conv4213, %847
  %mul4215 = mul nsw i64 0, %add4214
  %add4216 = add nsw i64 %mul4215, 1
  %shl4217 = shl i64 %add4216, 62
  %sub4218 = sub nsw i64 %shl4217, 1
  %mul4219 = mul nsw i64 %sub4218, 2
  %add4220 = add nsw i64 %mul4219, 1
  %sub4221 = sub nsw i64 %conv4211, %add4220
  br label %cond.end.4228

cond.false.4222:                                  ; preds = %cond.true.4193
  %848 = load i32, i32* %height, align 4
  %mul4223 = mul i32 0, %848
  %conv4224 = zext i32 %mul4223 to i64
  %849 = load i64, i64* %nbytes, align 8
  %add4225 = add nsw i64 %conv4224, %849
  %mul4226 = mul nsw i64 0, %add4225
  %add4227 = add nsw i64 %mul4226, 0
  br label %cond.end.4228

cond.end.4228:                                    ; preds = %cond.false.4222, %cond.true.4201
  %cond4229 = phi i64 [ %sub4221, %cond.true.4201 ], [ %add4227, %cond.false.4222 ]
  %850 = load i32, i32* %height, align 4
  %conv4230 = zext i32 %850 to i64
  %div4231 = sdiv i64 %cond4229, %conv4230
  %cmp4232 = icmp slt i64 %841, %div4231
  br i1 %cmp4232, label %cond.true.4281, label %lor.lhs.false.4264

cond.false.4234:                                  ; preds = %cond.false.4190
  %851 = load i32, i32* %height, align 4
  %mul4235 = mul i32 0, %851
  %conv4236 = zext i32 %mul4235 to i64
  %852 = load i64, i64* %nbytes, align 8
  %add4237 = add nsw i64 %conv4236, %852
  %mul4238 = mul nsw i64 0, %add4237
  %sub4239 = sub nsw i64 %mul4238, 1
  %cmp4240 = icmp slt i64 %sub4239, 0
  br i1 %cmp4240, label %cond.true.4242, label %cond.false.4252

cond.true.4242:                                   ; preds = %cond.false.4234
  %853 = load i32, i32* %height, align 4
  %mul4243 = mul i32 0, %853
  %conv4244 = zext i32 %mul4243 to i64
  %854 = load i64, i64* %nbytes, align 8
  %add4245 = add nsw i64 %conv4244, %854
  %mul4246 = mul nsw i64 0, %add4245
  %add4247 = add nsw i64 %mul4246, 1
  %shl4248 = shl i64 %add4247, 62
  %sub4249 = sub nsw i64 %shl4248, 1
  %mul4250 = mul nsw i64 %sub4249, 2
  %add4251 = add nsw i64 %mul4250, 1
  br label %cond.end.4258

cond.false.4252:                                  ; preds = %cond.false.4234
  %855 = load i32, i32* %height, align 4
  %mul4253 = mul i32 0, %855
  %conv4254 = zext i32 %mul4253 to i64
  %856 = load i64, i64* %nbytes, align 8
  %add4255 = add nsw i64 %conv4254, %856
  %mul4256 = mul nsw i64 0, %add4255
  %sub4257 = sub nsw i64 %mul4256, 1
  br label %cond.end.4258

cond.end.4258:                                    ; preds = %cond.false.4252, %cond.true.4242
  %cond4259 = phi i64 [ %add4251, %cond.true.4242 ], [ %sub4257, %cond.false.4252 ]
  %857 = load i32, i32* %height, align 4
  %conv4260 = zext i32 %857 to i64
  %div4261 = sdiv i64 %cond4259, %conv4260
  %858 = load i64, i64* %nbytes, align 8
  %cmp4262 = icmp slt i64 %div4261, %858
  br i1 %cmp4262, label %cond.true.4281, label %lor.lhs.false.4264

lor.lhs.false.4264:                               ; preds = %cond.end.4258, %cond.end.4228, %cond.true.4189, %cond.end.4180, %cond.true.4144, %cond.end.4135
  %859 = load i64, i64* %nbytes, align 8
  %860 = load i32, i32* %height, align 4
  %conv4265 = zext i32 %860 to i64
  %mul4266 = mul nsw i64 %859, %conv4265
  %mul4267 = mul nsw i64 0, %mul4266
  %sub4268 = sub nsw i64 %mul4267, 1
  %cmp4269 = icmp slt i64 %sub4268, 0
  br i1 %cmp4269, label %land.lhs.true.4271, label %lor.lhs.false.4276

land.lhs.true.4271:                               ; preds = %lor.lhs.false.4264
  %861 = load i64, i64* %nbytes, align 8
  %862 = load i32, i32* %height, align 4
  %conv4272 = zext i32 %862 to i64
  %mul4273 = mul nsw i64 %861, %conv4272
  %cmp4274 = icmp slt i64 %mul4273, -2147483648
  br i1 %cmp4274, label %cond.true.4281, label %lor.lhs.false.4276

lor.lhs.false.4276:                               ; preds = %land.lhs.true.4271, %lor.lhs.false.4264
  %863 = load i64, i64* %nbytes, align 8
  %864 = load i32, i32* %height, align 4
  %conv4277 = zext i32 %864 to i64
  %mul4278 = mul nsw i64 %863, %conv4277
  %cmp4279 = icmp slt i64 2147483647, %mul4278
  br i1 %cmp4279, label %cond.true.4281, label %cond.false.4297

cond.true.4281:                                   ; preds = %lor.lhs.false.4276, %land.lhs.true.4271, %cond.end.4258, %cond.end.4228, %cond.true.4189, %cond.end.4180, %cond.true.4144, %cond.end.4135, %land.lhs.true.4102, %land.lhs.true.4096
  %865 = load i64, i64* %nbytes, align 8
  %conv4282 = trunc i64 %865 to i32
  %866 = load i32, i32* %height, align 4
  %mul4283 = mul i32 %conv4282, %866
  %cmp4284 = icmp ule i32 %mul4283, 2147483647
  br i1 %cmp4284, label %cond.true.4286, label %cond.false.4289

cond.true.4286:                                   ; preds = %cond.true.4281
  %867 = load i64, i64* %nbytes, align 8
  %conv4287 = trunc i64 %867 to i32
  %868 = load i32, i32* %height, align 4
  %mul4288 = mul i32 %conv4287, %868
  br label %cond.end.4294

cond.false.4289:                                  ; preds = %cond.true.4281
  %869 = load i64, i64* %nbytes, align 8
  %conv4290 = trunc i64 %869 to i32
  %870 = load i32, i32* %height, align 4
  %mul4291 = mul i32 %conv4290, %870
  %sub4292 = sub i32 %mul4291, -2147483648
  %add4293 = add nsw i32 %sub4292, -2147483648
  br label %cond.end.4294

cond.end.4294:                                    ; preds = %cond.false.4289, %cond.true.4286
  %cond4295 = phi i32 [ %mul4288, %cond.true.4286 ], [ %add4293, %cond.false.4289 ]
  %conv4296 = sext i32 %cond4295 to i64
  store i64 %conv4296, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.4297:                                  ; preds = %lor.lhs.false.4276
  %871 = load i64, i64* %nbytes, align 8
  %conv4298 = trunc i64 %871 to i32
  %872 = load i32, i32* %height, align 4
  %mul4299 = mul i32 %conv4298, %872
  %cmp4300 = icmp ule i32 %mul4299, 2147483647
  br i1 %cmp4300, label %cond.true.4302, label %cond.false.4305

cond.true.4302:                                   ; preds = %cond.false.4297
  %873 = load i64, i64* %nbytes, align 8
  %conv4303 = trunc i64 %873 to i32
  %874 = load i32, i32* %height, align 4
  %mul4304 = mul i32 %conv4303, %874
  br label %cond.end.4310

cond.false.4305:                                  ; preds = %cond.false.4297
  %875 = load i64, i64* %nbytes, align 8
  %conv4306 = trunc i64 %875 to i32
  %876 = load i32, i32* %height, align 4
  %mul4307 = mul i32 %conv4306, %876
  %sub4308 = sub i32 %mul4307, -2147483648
  %add4309 = add nsw i32 %sub4308, -2147483648
  br label %cond.end.4310

cond.end.4310:                                    ; preds = %cond.false.4305, %cond.true.4302
  %cond4311 = phi i32 [ %mul4304, %cond.true.4302 ], [ %add4309, %cond.false.4305 ]
  %conv4312 = sext i32 %cond4311 to i64
  store i64 %conv4312, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.4313:                                  ; preds = %cond.false.3792
  br i1 true, label %cond.true.4314, label %cond.false.4834

cond.true.4314:                                   ; preds = %cond.false.4313
  br i1 false, label %cond.true.4315, label %cond.false.4577

cond.true.4315:                                   ; preds = %cond.true.4314
  %877 = load i32, i32* %height, align 4
  %conv4316 = zext i32 %877 to i64
  %mul4317 = mul nsw i64 0, %conv4316
  %878 = load i64, i64* %nbytes, align 8
  %add4318 = add nsw i64 %mul4317, %878
  %mul4319 = mul nsw i64 0, %add4318
  %sub4320 = sub nsw i64 %mul4319, 1
  %cmp4321 = icmp slt i64 %sub4320, 0
  br i1 %cmp4321, label %cond.true.4323, label %cond.false.4344

cond.true.4323:                                   ; preds = %cond.true.4315
  %879 = load i32, i32* %height, align 4
  %conv4324 = zext i32 %879 to i64
  %mul4325 = mul nsw i64 0, %conv4324
  %880 = load i64, i64* %nbytes, align 8
  %add4326 = add nsw i64 %mul4325, %880
  %mul4327 = mul nsw i64 0, %add4326
  %add4328 = add nsw i64 %mul4327, 0
  %neg4329 = xor i64 %add4328, -1
  %cmp4330 = icmp eq i64 %neg4329, -1
  %conv4331 = zext i1 %cmp4330 to i32
  %sub4332 = sub nsw i32 0, %conv4331
  %conv4333 = sext i32 %sub4332 to i64
  %881 = load i32, i32* %height, align 4
  %conv4334 = zext i32 %881 to i64
  %mul4335 = mul nsw i64 0, %conv4334
  %882 = load i64, i64* %nbytes, align 8
  %add4336 = add nsw i64 %mul4335, %882
  %mul4337 = mul nsw i64 0, %add4336
  %add4338 = add nsw i64 %mul4337, 1
  %shl4339 = shl i64 %add4338, 62
  %sub4340 = sub nsw i64 %shl4339, 1
  %mul4341 = mul nsw i64 %sub4340, 2
  %add4342 = add nsw i64 %mul4341, 1
  %sub4343 = sub nsw i64 %conv4333, %add4342
  br label %cond.end.4350

cond.false.4344:                                  ; preds = %cond.true.4315
  %883 = load i32, i32* %height, align 4
  %conv4345 = zext i32 %883 to i64
  %mul4346 = mul nsw i64 0, %conv4345
  %884 = load i64, i64* %nbytes, align 8
  %add4347 = add nsw i64 %mul4346, %884
  %mul4348 = mul nsw i64 0, %add4347
  %add4349 = add nsw i64 %mul4348, 0
  br label %cond.end.4350

cond.end.4350:                                    ; preds = %cond.false.4344, %cond.true.4323
  %cond4351 = phi i64 [ %sub4343, %cond.true.4323 ], [ %add4349, %cond.false.4344 ]
  %cmp4352 = icmp eq i64 %cond4351, 0
  br i1 %cmp4352, label %land.lhs.true.4354, label %lor.lhs.false.4368

land.lhs.true.4354:                               ; preds = %cond.end.4350
  %885 = load i64, i64* %nbytes, align 8
  %cmp4355 = icmp slt i64 %885, 0
  br i1 %cmp4355, label %land.lhs.true.4357, label %lor.lhs.false.4361

land.lhs.true.4357:                               ; preds = %land.lhs.true.4354
  %886 = load i32, i32* %height, align 4
  %conv4358 = zext i32 %886 to i64
  %cmp4359 = icmp slt i64 0, %conv4358
  br i1 %cmp4359, label %cond.true.4547, label %lor.lhs.false.4361

lor.lhs.false.4361:                               ; preds = %land.lhs.true.4357, %land.lhs.true.4354
  %887 = load i32, i32* %height, align 4
  %conv4362 = zext i32 %887 to i64
  %cmp4363 = icmp slt i64 %conv4362, 0
  br i1 %cmp4363, label %land.lhs.true.4365, label %lor.lhs.false.4368

land.lhs.true.4365:                               ; preds = %lor.lhs.false.4361
  %888 = load i64, i64* %nbytes, align 8
  %cmp4366 = icmp slt i64 0, %888
  br i1 %cmp4366, label %cond.true.4547, label %lor.lhs.false.4368

lor.lhs.false.4368:                               ; preds = %land.lhs.true.4365, %lor.lhs.false.4361, %cond.end.4350
  %889 = load i32, i32* %height, align 4
  %conv4369 = zext i32 %889 to i64
  %cmp4370 = icmp slt i64 %conv4369, 0
  br i1 %cmp4370, label %cond.true.4372, label %cond.false.4451

cond.true.4372:                                   ; preds = %lor.lhs.false.4368
  %890 = load i64, i64* %nbytes, align 8
  %cmp4373 = icmp slt i64 %890, 0
  br i1 %cmp4373, label %cond.true.4375, label %cond.false.4405

cond.true.4375:                                   ; preds = %cond.true.4372
  %891 = load i64, i64* %nbytes, align 8
  %892 = load i32, i32* %height, align 4
  %conv4376 = zext i32 %892 to i64
  %mul4377 = mul nsw i64 0, %conv4376
  %893 = load i64, i64* %nbytes, align 8
  %add4378 = add nsw i64 %mul4377, %893
  %mul4379 = mul nsw i64 0, %add4378
  %sub4380 = sub nsw i64 %mul4379, 1
  %cmp4381 = icmp slt i64 %sub4380, 0
  br i1 %cmp4381, label %cond.true.4383, label %cond.false.4393

cond.true.4383:                                   ; preds = %cond.true.4375
  %894 = load i32, i32* %height, align 4
  %conv4384 = zext i32 %894 to i64
  %mul4385 = mul nsw i64 0, %conv4384
  %895 = load i64, i64* %nbytes, align 8
  %add4386 = add nsw i64 %mul4385, %895
  %mul4387 = mul nsw i64 0, %add4386
  %add4388 = add nsw i64 %mul4387, 1
  %shl4389 = shl i64 %add4388, 62
  %sub4390 = sub nsw i64 %shl4389, 1
  %mul4391 = mul nsw i64 %sub4390, 2
  %add4392 = add nsw i64 %mul4391, 1
  br label %cond.end.4399

cond.false.4393:                                  ; preds = %cond.true.4375
  %896 = load i32, i32* %height, align 4
  %conv4394 = zext i32 %896 to i64
  %mul4395 = mul nsw i64 0, %conv4394
  %897 = load i64, i64* %nbytes, align 8
  %add4396 = add nsw i64 %mul4395, %897
  %mul4397 = mul nsw i64 0, %add4396
  %sub4398 = sub nsw i64 %mul4397, 1
  br label %cond.end.4399

cond.end.4399:                                    ; preds = %cond.false.4393, %cond.true.4383
  %cond4400 = phi i64 [ %add4392, %cond.true.4383 ], [ %sub4398, %cond.false.4393 ]
  %898 = load i32, i32* %height, align 4
  %conv4401 = zext i32 %898 to i64
  %div4402 = sdiv i64 %cond4400, %conv4401
  %cmp4403 = icmp slt i64 %891, %div4402
  br i1 %cmp4403, label %cond.true.4547, label %lor.lhs.false.4530

cond.false.4405:                                  ; preds = %cond.true.4372
  %899 = load i32, i32* %height, align 4
  %conv4406 = zext i32 %899 to i64
  %cmp4407 = icmp eq i64 %conv4406, -1
  br i1 %cmp4407, label %cond.true.4409, label %cond.false.4410

cond.true.4409:                                   ; preds = %cond.false.4405
  br i1 false, label %cond.true.4547, label %lor.lhs.false.4530

cond.false.4410:                                  ; preds = %cond.false.4405
  %900 = load i32, i32* %height, align 4
  %conv4411 = zext i32 %900 to i64
  %mul4412 = mul nsw i64 0, %conv4411
  %901 = load i64, i64* %nbytes, align 8
  %add4413 = add nsw i64 %mul4412, %901
  %mul4414 = mul nsw i64 0, %add4413
  %sub4415 = sub nsw i64 %mul4414, 1
  %cmp4416 = icmp slt i64 %sub4415, 0
  br i1 %cmp4416, label %cond.true.4418, label %cond.false.4439

cond.true.4418:                                   ; preds = %cond.false.4410
  %902 = load i32, i32* %height, align 4
  %conv4419 = zext i32 %902 to i64
  %mul4420 = mul nsw i64 0, %conv4419
  %903 = load i64, i64* %nbytes, align 8
  %add4421 = add nsw i64 %mul4420, %903
  %mul4422 = mul nsw i64 0, %add4421
  %add4423 = add nsw i64 %mul4422, 0
  %neg4424 = xor i64 %add4423, -1
  %cmp4425 = icmp eq i64 %neg4424, -1
  %conv4426 = zext i1 %cmp4425 to i32
  %sub4427 = sub nsw i32 0, %conv4426
  %conv4428 = sext i32 %sub4427 to i64
  %904 = load i32, i32* %height, align 4
  %conv4429 = zext i32 %904 to i64
  %mul4430 = mul nsw i64 0, %conv4429
  %905 = load i64, i64* %nbytes, align 8
  %add4431 = add nsw i64 %mul4430, %905
  %mul4432 = mul nsw i64 0, %add4431
  %add4433 = add nsw i64 %mul4432, 1
  %shl4434 = shl i64 %add4433, 62
  %sub4435 = sub nsw i64 %shl4434, 1
  %mul4436 = mul nsw i64 %sub4435, 2
  %add4437 = add nsw i64 %mul4436, 1
  %sub4438 = sub nsw i64 %conv4428, %add4437
  br label %cond.end.4445

cond.false.4439:                                  ; preds = %cond.false.4410
  %906 = load i32, i32* %height, align 4
  %conv4440 = zext i32 %906 to i64
  %mul4441 = mul nsw i64 0, %conv4440
  %907 = load i64, i64* %nbytes, align 8
  %add4442 = add nsw i64 %mul4441, %907
  %mul4443 = mul nsw i64 0, %add4442
  %add4444 = add nsw i64 %mul4443, 0
  br label %cond.end.4445

cond.end.4445:                                    ; preds = %cond.false.4439, %cond.true.4418
  %cond4446 = phi i64 [ %sub4438, %cond.true.4418 ], [ %add4444, %cond.false.4439 ]
  %908 = load i32, i32* %height, align 4
  %conv4447 = zext i32 %908 to i64
  %div4448 = sdiv i64 %cond4446, %conv4447
  %909 = load i64, i64* %nbytes, align 8
  %cmp4449 = icmp slt i64 %div4448, %909
  br i1 %cmp4449, label %cond.true.4547, label %lor.lhs.false.4530

cond.false.4451:                                  ; preds = %lor.lhs.false.4368
  %910 = load i32, i32* %height, align 4
  %conv4452 = zext i32 %910 to i64
  %cmp4453 = icmp eq i64 %conv4452, 0
  br i1 %cmp4453, label %cond.true.4455, label %cond.false.4456

cond.true.4455:                                   ; preds = %cond.false.4451
  br i1 false, label %cond.true.4547, label %lor.lhs.false.4530

cond.false.4456:                                  ; preds = %cond.false.4451
  %911 = load i64, i64* %nbytes, align 8
  %cmp4457 = icmp slt i64 %911, 0
  br i1 %cmp4457, label %cond.true.4459, label %cond.false.4500

cond.true.4459:                                   ; preds = %cond.false.4456
  %912 = load i64, i64* %nbytes, align 8
  %913 = load i32, i32* %height, align 4
  %conv4460 = zext i32 %913 to i64
  %mul4461 = mul nsw i64 0, %conv4460
  %914 = load i64, i64* %nbytes, align 8
  %add4462 = add nsw i64 %mul4461, %914
  %mul4463 = mul nsw i64 0, %add4462
  %sub4464 = sub nsw i64 %mul4463, 1
  %cmp4465 = icmp slt i64 %sub4464, 0
  br i1 %cmp4465, label %cond.true.4467, label %cond.false.4488

cond.true.4467:                                   ; preds = %cond.true.4459
  %915 = load i32, i32* %height, align 4
  %conv4468 = zext i32 %915 to i64
  %mul4469 = mul nsw i64 0, %conv4468
  %916 = load i64, i64* %nbytes, align 8
  %add4470 = add nsw i64 %mul4469, %916
  %mul4471 = mul nsw i64 0, %add4470
  %add4472 = add nsw i64 %mul4471, 0
  %neg4473 = xor i64 %add4472, -1
  %cmp4474 = icmp eq i64 %neg4473, -1
  %conv4475 = zext i1 %cmp4474 to i32
  %sub4476 = sub nsw i32 0, %conv4475
  %conv4477 = sext i32 %sub4476 to i64
  %917 = load i32, i32* %height, align 4
  %conv4478 = zext i32 %917 to i64
  %mul4479 = mul nsw i64 0, %conv4478
  %918 = load i64, i64* %nbytes, align 8
  %add4480 = add nsw i64 %mul4479, %918
  %mul4481 = mul nsw i64 0, %add4480
  %add4482 = add nsw i64 %mul4481, 1
  %shl4483 = shl i64 %add4482, 62
  %sub4484 = sub nsw i64 %shl4483, 1
  %mul4485 = mul nsw i64 %sub4484, 2
  %add4486 = add nsw i64 %mul4485, 1
  %sub4487 = sub nsw i64 %conv4477, %add4486
  br label %cond.end.4494

cond.false.4488:                                  ; preds = %cond.true.4459
  %919 = load i32, i32* %height, align 4
  %conv4489 = zext i32 %919 to i64
  %mul4490 = mul nsw i64 0, %conv4489
  %920 = load i64, i64* %nbytes, align 8
  %add4491 = add nsw i64 %mul4490, %920
  %mul4492 = mul nsw i64 0, %add4491
  %add4493 = add nsw i64 %mul4492, 0
  br label %cond.end.4494

cond.end.4494:                                    ; preds = %cond.false.4488, %cond.true.4467
  %cond4495 = phi i64 [ %sub4487, %cond.true.4467 ], [ %add4493, %cond.false.4488 ]
  %921 = load i32, i32* %height, align 4
  %conv4496 = zext i32 %921 to i64
  %div4497 = sdiv i64 %cond4495, %conv4496
  %cmp4498 = icmp slt i64 %912, %div4497
  br i1 %cmp4498, label %cond.true.4547, label %lor.lhs.false.4530

cond.false.4500:                                  ; preds = %cond.false.4456
  %922 = load i32, i32* %height, align 4
  %conv4501 = zext i32 %922 to i64
  %mul4502 = mul nsw i64 0, %conv4501
  %923 = load i64, i64* %nbytes, align 8
  %add4503 = add nsw i64 %mul4502, %923
  %mul4504 = mul nsw i64 0, %add4503
  %sub4505 = sub nsw i64 %mul4504, 1
  %cmp4506 = icmp slt i64 %sub4505, 0
  br i1 %cmp4506, label %cond.true.4508, label %cond.false.4518

cond.true.4508:                                   ; preds = %cond.false.4500
  %924 = load i32, i32* %height, align 4
  %conv4509 = zext i32 %924 to i64
  %mul4510 = mul nsw i64 0, %conv4509
  %925 = load i64, i64* %nbytes, align 8
  %add4511 = add nsw i64 %mul4510, %925
  %mul4512 = mul nsw i64 0, %add4511
  %add4513 = add nsw i64 %mul4512, 1
  %shl4514 = shl i64 %add4513, 62
  %sub4515 = sub nsw i64 %shl4514, 1
  %mul4516 = mul nsw i64 %sub4515, 2
  %add4517 = add nsw i64 %mul4516, 1
  br label %cond.end.4524

cond.false.4518:                                  ; preds = %cond.false.4500
  %926 = load i32, i32* %height, align 4
  %conv4519 = zext i32 %926 to i64
  %mul4520 = mul nsw i64 0, %conv4519
  %927 = load i64, i64* %nbytes, align 8
  %add4521 = add nsw i64 %mul4520, %927
  %mul4522 = mul nsw i64 0, %add4521
  %sub4523 = sub nsw i64 %mul4522, 1
  br label %cond.end.4524

cond.end.4524:                                    ; preds = %cond.false.4518, %cond.true.4508
  %cond4525 = phi i64 [ %add4517, %cond.true.4508 ], [ %sub4523, %cond.false.4518 ]
  %928 = load i32, i32* %height, align 4
  %conv4526 = zext i32 %928 to i64
  %div4527 = sdiv i64 %cond4525, %conv4526
  %929 = load i64, i64* %nbytes, align 8
  %cmp4528 = icmp slt i64 %div4527, %929
  br i1 %cmp4528, label %cond.true.4547, label %lor.lhs.false.4530

lor.lhs.false.4530:                               ; preds = %cond.end.4524, %cond.end.4494, %cond.true.4455, %cond.end.4445, %cond.true.4409, %cond.end.4399
  %930 = load i64, i64* %nbytes, align 8
  %931 = load i32, i32* %height, align 4
  %conv4531 = zext i32 %931 to i64
  %mul4532 = mul nsw i64 %930, %conv4531
  %mul4533 = mul nsw i64 0, %mul4532
  %sub4534 = sub nsw i64 %mul4533, 1
  %cmp4535 = icmp slt i64 %sub4534, 0
  br i1 %cmp4535, label %land.lhs.true.4537, label %lor.lhs.false.4542

land.lhs.true.4537:                               ; preds = %lor.lhs.false.4530
  %932 = load i64, i64* %nbytes, align 8
  %933 = load i32, i32* %height, align 4
  %conv4538 = zext i32 %933 to i64
  %mul4539 = mul nsw i64 %932, %conv4538
  %cmp4540 = icmp slt i64 %mul4539, -9223372036854775808
  br i1 %cmp4540, label %cond.true.4547, label %lor.lhs.false.4542

lor.lhs.false.4542:                               ; preds = %land.lhs.true.4537, %lor.lhs.false.4530
  %934 = load i64, i64* %nbytes, align 8
  %935 = load i32, i32* %height, align 4
  %conv4543 = zext i32 %935 to i64
  %mul4544 = mul nsw i64 %934, %conv4543
  %cmp4545 = icmp slt i64 9223372036854775807, %mul4544
  br i1 %cmp4545, label %cond.true.4547, label %cond.false.4562

cond.true.4547:                                   ; preds = %lor.lhs.false.4542, %land.lhs.true.4537, %cond.end.4524, %cond.end.4494, %cond.true.4455, %cond.end.4445, %cond.true.4409, %cond.end.4399, %land.lhs.true.4365, %land.lhs.true.4357
  %936 = load i64, i64* %nbytes, align 8
  %937 = load i32, i32* %height, align 4
  %conv4548 = zext i32 %937 to i64
  %mul4549 = mul i64 %936, %conv4548
  %cmp4550 = icmp ule i64 %mul4549, 9223372036854775807
  br i1 %cmp4550, label %cond.true.4552, label %cond.false.4555

cond.true.4552:                                   ; preds = %cond.true.4547
  %938 = load i64, i64* %nbytes, align 8
  %939 = load i32, i32* %height, align 4
  %conv4553 = zext i32 %939 to i64
  %mul4554 = mul i64 %938, %conv4553
  br label %cond.end.4560

cond.false.4555:                                  ; preds = %cond.true.4547
  %940 = load i64, i64* %nbytes, align 8
  %941 = load i32, i32* %height, align 4
  %conv4556 = zext i32 %941 to i64
  %mul4557 = mul i64 %940, %conv4556
  %sub4558 = sub i64 %mul4557, -9223372036854775808
  %add4559 = add nsw i64 %sub4558, -9223372036854775808
  br label %cond.end.4560

cond.end.4560:                                    ; preds = %cond.false.4555, %cond.true.4552
  %cond4561 = phi i64 [ %mul4554, %cond.true.4552 ], [ %add4559, %cond.false.4555 ]
  store i64 %cond4561, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.4562:                                  ; preds = %lor.lhs.false.4542
  %942 = load i64, i64* %nbytes, align 8
  %943 = load i32, i32* %height, align 4
  %conv4563 = zext i32 %943 to i64
  %mul4564 = mul i64 %942, %conv4563
  %cmp4565 = icmp ule i64 %mul4564, 9223372036854775807
  br i1 %cmp4565, label %cond.true.4567, label %cond.false.4570

cond.true.4567:                                   ; preds = %cond.false.4562
  %944 = load i64, i64* %nbytes, align 8
  %945 = load i32, i32* %height, align 4
  %conv4568 = zext i32 %945 to i64
  %mul4569 = mul i64 %944, %conv4568
  br label %cond.end.4575

cond.false.4570:                                  ; preds = %cond.false.4562
  %946 = load i64, i64* %nbytes, align 8
  %947 = load i32, i32* %height, align 4
  %conv4571 = zext i32 %947 to i64
  %mul4572 = mul i64 %946, %conv4571
  %sub4573 = sub i64 %mul4572, -9223372036854775808
  %add4574 = add nsw i64 %sub4573, -9223372036854775808
  br label %cond.end.4575

cond.end.4575:                                    ; preds = %cond.false.4570, %cond.true.4567
  %cond4576 = phi i64 [ %mul4569, %cond.true.4567 ], [ %add4574, %cond.false.4570 ]
  store i64 %cond4576, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.4577:                                  ; preds = %cond.true.4314
  %948 = load i32, i32* %height, align 4
  %mul4578 = mul i32 0, %948
  %conv4579 = zext i32 %mul4578 to i64
  %949 = load i64, i64* %nbytes, align 8
  %add4580 = add nsw i64 %conv4579, %949
  %mul4581 = mul nsw i64 0, %add4580
  %sub4582 = sub nsw i64 %mul4581, 1
  %cmp4583 = icmp slt i64 %sub4582, 0
  br i1 %cmp4583, label %cond.true.4585, label %cond.false.4606

cond.true.4585:                                   ; preds = %cond.false.4577
  %950 = load i32, i32* %height, align 4
  %mul4586 = mul i32 0, %950
  %conv4587 = zext i32 %mul4586 to i64
  %951 = load i64, i64* %nbytes, align 8
  %add4588 = add nsw i64 %conv4587, %951
  %mul4589 = mul nsw i64 0, %add4588
  %add4590 = add nsw i64 %mul4589, 0
  %neg4591 = xor i64 %add4590, -1
  %cmp4592 = icmp eq i64 %neg4591, -1
  %conv4593 = zext i1 %cmp4592 to i32
  %sub4594 = sub nsw i32 0, %conv4593
  %conv4595 = sext i32 %sub4594 to i64
  %952 = load i32, i32* %height, align 4
  %mul4596 = mul i32 0, %952
  %conv4597 = zext i32 %mul4596 to i64
  %953 = load i64, i64* %nbytes, align 8
  %add4598 = add nsw i64 %conv4597, %953
  %mul4599 = mul nsw i64 0, %add4598
  %add4600 = add nsw i64 %mul4599, 1
  %shl4601 = shl i64 %add4600, 62
  %sub4602 = sub nsw i64 %shl4601, 1
  %mul4603 = mul nsw i64 %sub4602, 2
  %add4604 = add nsw i64 %mul4603, 1
  %sub4605 = sub nsw i64 %conv4595, %add4604
  br label %cond.end.4612

cond.false.4606:                                  ; preds = %cond.false.4577
  %954 = load i32, i32* %height, align 4
  %mul4607 = mul i32 0, %954
  %conv4608 = zext i32 %mul4607 to i64
  %955 = load i64, i64* %nbytes, align 8
  %add4609 = add nsw i64 %conv4608, %955
  %mul4610 = mul nsw i64 0, %add4609
  %add4611 = add nsw i64 %mul4610, 0
  br label %cond.end.4612

cond.end.4612:                                    ; preds = %cond.false.4606, %cond.true.4585
  %cond4613 = phi i64 [ %sub4605, %cond.true.4585 ], [ %add4611, %cond.false.4606 ]
  %cmp4614 = icmp eq i64 %cond4613, 0
  br i1 %cmp4614, label %land.lhs.true.4616, label %lor.lhs.false.4628

land.lhs.true.4616:                               ; preds = %cond.end.4612
  %956 = load i64, i64* %nbytes, align 8
  %cmp4617 = icmp slt i64 %956, 0
  br i1 %cmp4617, label %land.lhs.true.4619, label %lor.lhs.false.4622

land.lhs.true.4619:                               ; preds = %land.lhs.true.4616
  %957 = load i32, i32* %height, align 4
  %cmp4620 = icmp ult i32 0, %957
  br i1 %cmp4620, label %cond.true.4804, label %lor.lhs.false.4622

lor.lhs.false.4622:                               ; preds = %land.lhs.true.4619, %land.lhs.true.4616
  %958 = load i32, i32* %height, align 4
  %cmp4623 = icmp ult i32 %958, 0
  br i1 %cmp4623, label %land.lhs.true.4625, label %lor.lhs.false.4628

land.lhs.true.4625:                               ; preds = %lor.lhs.false.4622
  %959 = load i64, i64* %nbytes, align 8
  %cmp4626 = icmp slt i64 0, %959
  br i1 %cmp4626, label %cond.true.4804, label %lor.lhs.false.4628

lor.lhs.false.4628:                               ; preds = %land.lhs.true.4625, %lor.lhs.false.4622, %cond.end.4612
  %960 = load i32, i32* %height, align 4
  %cmp4629 = icmp ult i32 %960, 0
  br i1 %cmp4629, label %cond.true.4631, label %cond.false.4709

cond.true.4631:                                   ; preds = %lor.lhs.false.4628
  %961 = load i64, i64* %nbytes, align 8
  %cmp4632 = icmp slt i64 %961, 0
  br i1 %cmp4632, label %cond.true.4634, label %cond.false.4664

cond.true.4634:                                   ; preds = %cond.true.4631
  %962 = load i64, i64* %nbytes, align 8
  %963 = load i32, i32* %height, align 4
  %mul4635 = mul i32 0, %963
  %conv4636 = zext i32 %mul4635 to i64
  %964 = load i64, i64* %nbytes, align 8
  %add4637 = add nsw i64 %conv4636, %964
  %mul4638 = mul nsw i64 0, %add4637
  %sub4639 = sub nsw i64 %mul4638, 1
  %cmp4640 = icmp slt i64 %sub4639, 0
  br i1 %cmp4640, label %cond.true.4642, label %cond.false.4652

cond.true.4642:                                   ; preds = %cond.true.4634
  %965 = load i32, i32* %height, align 4
  %mul4643 = mul i32 0, %965
  %conv4644 = zext i32 %mul4643 to i64
  %966 = load i64, i64* %nbytes, align 8
  %add4645 = add nsw i64 %conv4644, %966
  %mul4646 = mul nsw i64 0, %add4645
  %add4647 = add nsw i64 %mul4646, 1
  %shl4648 = shl i64 %add4647, 62
  %sub4649 = sub nsw i64 %shl4648, 1
  %mul4650 = mul nsw i64 %sub4649, 2
  %add4651 = add nsw i64 %mul4650, 1
  br label %cond.end.4658

cond.false.4652:                                  ; preds = %cond.true.4634
  %967 = load i32, i32* %height, align 4
  %mul4653 = mul i32 0, %967
  %conv4654 = zext i32 %mul4653 to i64
  %968 = load i64, i64* %nbytes, align 8
  %add4655 = add nsw i64 %conv4654, %968
  %mul4656 = mul nsw i64 0, %add4655
  %sub4657 = sub nsw i64 %mul4656, 1
  br label %cond.end.4658

cond.end.4658:                                    ; preds = %cond.false.4652, %cond.true.4642
  %cond4659 = phi i64 [ %add4651, %cond.true.4642 ], [ %sub4657, %cond.false.4652 ]
  %969 = load i32, i32* %height, align 4
  %conv4660 = zext i32 %969 to i64
  %div4661 = sdiv i64 %cond4659, %conv4660
  %cmp4662 = icmp slt i64 %962, %div4661
  br i1 %cmp4662, label %cond.true.4804, label %lor.lhs.false.4787

cond.false.4664:                                  ; preds = %cond.true.4631
  %970 = load i32, i32* %height, align 4
  %cmp4665 = icmp eq i32 %970, -1
  br i1 %cmp4665, label %cond.true.4667, label %cond.false.4668

cond.true.4667:                                   ; preds = %cond.false.4664
  br i1 false, label %cond.true.4804, label %lor.lhs.false.4787

cond.false.4668:                                  ; preds = %cond.false.4664
  %971 = load i32, i32* %height, align 4
  %mul4669 = mul i32 0, %971
  %conv4670 = zext i32 %mul4669 to i64
  %972 = load i64, i64* %nbytes, align 8
  %add4671 = add nsw i64 %conv4670, %972
  %mul4672 = mul nsw i64 0, %add4671
  %sub4673 = sub nsw i64 %mul4672, 1
  %cmp4674 = icmp slt i64 %sub4673, 0
  br i1 %cmp4674, label %cond.true.4676, label %cond.false.4697

cond.true.4676:                                   ; preds = %cond.false.4668
  %973 = load i32, i32* %height, align 4
  %mul4677 = mul i32 0, %973
  %conv4678 = zext i32 %mul4677 to i64
  %974 = load i64, i64* %nbytes, align 8
  %add4679 = add nsw i64 %conv4678, %974
  %mul4680 = mul nsw i64 0, %add4679
  %add4681 = add nsw i64 %mul4680, 0
  %neg4682 = xor i64 %add4681, -1
  %cmp4683 = icmp eq i64 %neg4682, -1
  %conv4684 = zext i1 %cmp4683 to i32
  %sub4685 = sub nsw i32 0, %conv4684
  %conv4686 = sext i32 %sub4685 to i64
  %975 = load i32, i32* %height, align 4
  %mul4687 = mul i32 0, %975
  %conv4688 = zext i32 %mul4687 to i64
  %976 = load i64, i64* %nbytes, align 8
  %add4689 = add nsw i64 %conv4688, %976
  %mul4690 = mul nsw i64 0, %add4689
  %add4691 = add nsw i64 %mul4690, 1
  %shl4692 = shl i64 %add4691, 62
  %sub4693 = sub nsw i64 %shl4692, 1
  %mul4694 = mul nsw i64 %sub4693, 2
  %add4695 = add nsw i64 %mul4694, 1
  %sub4696 = sub nsw i64 %conv4686, %add4695
  br label %cond.end.4703

cond.false.4697:                                  ; preds = %cond.false.4668
  %977 = load i32, i32* %height, align 4
  %mul4698 = mul i32 0, %977
  %conv4699 = zext i32 %mul4698 to i64
  %978 = load i64, i64* %nbytes, align 8
  %add4700 = add nsw i64 %conv4699, %978
  %mul4701 = mul nsw i64 0, %add4700
  %add4702 = add nsw i64 %mul4701, 0
  br label %cond.end.4703

cond.end.4703:                                    ; preds = %cond.false.4697, %cond.true.4676
  %cond4704 = phi i64 [ %sub4696, %cond.true.4676 ], [ %add4702, %cond.false.4697 ]
  %979 = load i32, i32* %height, align 4
  %conv4705 = zext i32 %979 to i64
  %div4706 = sdiv i64 %cond4704, %conv4705
  %980 = load i64, i64* %nbytes, align 8
  %cmp4707 = icmp slt i64 %div4706, %980
  br i1 %cmp4707, label %cond.true.4804, label %lor.lhs.false.4787

cond.false.4709:                                  ; preds = %lor.lhs.false.4628
  %981 = load i32, i32* %height, align 4
  %cmp4710 = icmp eq i32 %981, 0
  br i1 %cmp4710, label %cond.true.4712, label %cond.false.4713

cond.true.4712:                                   ; preds = %cond.false.4709
  br i1 false, label %cond.true.4804, label %lor.lhs.false.4787

cond.false.4713:                                  ; preds = %cond.false.4709
  %982 = load i64, i64* %nbytes, align 8
  %cmp4714 = icmp slt i64 %982, 0
  br i1 %cmp4714, label %cond.true.4716, label %cond.false.4757

cond.true.4716:                                   ; preds = %cond.false.4713
  %983 = load i64, i64* %nbytes, align 8
  %984 = load i32, i32* %height, align 4
  %mul4717 = mul i32 0, %984
  %conv4718 = zext i32 %mul4717 to i64
  %985 = load i64, i64* %nbytes, align 8
  %add4719 = add nsw i64 %conv4718, %985
  %mul4720 = mul nsw i64 0, %add4719
  %sub4721 = sub nsw i64 %mul4720, 1
  %cmp4722 = icmp slt i64 %sub4721, 0
  br i1 %cmp4722, label %cond.true.4724, label %cond.false.4745

cond.true.4724:                                   ; preds = %cond.true.4716
  %986 = load i32, i32* %height, align 4
  %mul4725 = mul i32 0, %986
  %conv4726 = zext i32 %mul4725 to i64
  %987 = load i64, i64* %nbytes, align 8
  %add4727 = add nsw i64 %conv4726, %987
  %mul4728 = mul nsw i64 0, %add4727
  %add4729 = add nsw i64 %mul4728, 0
  %neg4730 = xor i64 %add4729, -1
  %cmp4731 = icmp eq i64 %neg4730, -1
  %conv4732 = zext i1 %cmp4731 to i32
  %sub4733 = sub nsw i32 0, %conv4732
  %conv4734 = sext i32 %sub4733 to i64
  %988 = load i32, i32* %height, align 4
  %mul4735 = mul i32 0, %988
  %conv4736 = zext i32 %mul4735 to i64
  %989 = load i64, i64* %nbytes, align 8
  %add4737 = add nsw i64 %conv4736, %989
  %mul4738 = mul nsw i64 0, %add4737
  %add4739 = add nsw i64 %mul4738, 1
  %shl4740 = shl i64 %add4739, 62
  %sub4741 = sub nsw i64 %shl4740, 1
  %mul4742 = mul nsw i64 %sub4741, 2
  %add4743 = add nsw i64 %mul4742, 1
  %sub4744 = sub nsw i64 %conv4734, %add4743
  br label %cond.end.4751

cond.false.4745:                                  ; preds = %cond.true.4716
  %990 = load i32, i32* %height, align 4
  %mul4746 = mul i32 0, %990
  %conv4747 = zext i32 %mul4746 to i64
  %991 = load i64, i64* %nbytes, align 8
  %add4748 = add nsw i64 %conv4747, %991
  %mul4749 = mul nsw i64 0, %add4748
  %add4750 = add nsw i64 %mul4749, 0
  br label %cond.end.4751

cond.end.4751:                                    ; preds = %cond.false.4745, %cond.true.4724
  %cond4752 = phi i64 [ %sub4744, %cond.true.4724 ], [ %add4750, %cond.false.4745 ]
  %992 = load i32, i32* %height, align 4
  %conv4753 = zext i32 %992 to i64
  %div4754 = sdiv i64 %cond4752, %conv4753
  %cmp4755 = icmp slt i64 %983, %div4754
  br i1 %cmp4755, label %cond.true.4804, label %lor.lhs.false.4787

cond.false.4757:                                  ; preds = %cond.false.4713
  %993 = load i32, i32* %height, align 4
  %mul4758 = mul i32 0, %993
  %conv4759 = zext i32 %mul4758 to i64
  %994 = load i64, i64* %nbytes, align 8
  %add4760 = add nsw i64 %conv4759, %994
  %mul4761 = mul nsw i64 0, %add4760
  %sub4762 = sub nsw i64 %mul4761, 1
  %cmp4763 = icmp slt i64 %sub4762, 0
  br i1 %cmp4763, label %cond.true.4765, label %cond.false.4775

cond.true.4765:                                   ; preds = %cond.false.4757
  %995 = load i32, i32* %height, align 4
  %mul4766 = mul i32 0, %995
  %conv4767 = zext i32 %mul4766 to i64
  %996 = load i64, i64* %nbytes, align 8
  %add4768 = add nsw i64 %conv4767, %996
  %mul4769 = mul nsw i64 0, %add4768
  %add4770 = add nsw i64 %mul4769, 1
  %shl4771 = shl i64 %add4770, 62
  %sub4772 = sub nsw i64 %shl4771, 1
  %mul4773 = mul nsw i64 %sub4772, 2
  %add4774 = add nsw i64 %mul4773, 1
  br label %cond.end.4781

cond.false.4775:                                  ; preds = %cond.false.4757
  %997 = load i32, i32* %height, align 4
  %mul4776 = mul i32 0, %997
  %conv4777 = zext i32 %mul4776 to i64
  %998 = load i64, i64* %nbytes, align 8
  %add4778 = add nsw i64 %conv4777, %998
  %mul4779 = mul nsw i64 0, %add4778
  %sub4780 = sub nsw i64 %mul4779, 1
  br label %cond.end.4781

cond.end.4781:                                    ; preds = %cond.false.4775, %cond.true.4765
  %cond4782 = phi i64 [ %add4774, %cond.true.4765 ], [ %sub4780, %cond.false.4775 ]
  %999 = load i32, i32* %height, align 4
  %conv4783 = zext i32 %999 to i64
  %div4784 = sdiv i64 %cond4782, %conv4783
  %1000 = load i64, i64* %nbytes, align 8
  %cmp4785 = icmp slt i64 %div4784, %1000
  br i1 %cmp4785, label %cond.true.4804, label %lor.lhs.false.4787

lor.lhs.false.4787:                               ; preds = %cond.end.4781, %cond.end.4751, %cond.true.4712, %cond.end.4703, %cond.true.4667, %cond.end.4658
  %1001 = load i64, i64* %nbytes, align 8
  %1002 = load i32, i32* %height, align 4
  %conv4788 = zext i32 %1002 to i64
  %mul4789 = mul nsw i64 %1001, %conv4788
  %mul4790 = mul nsw i64 0, %mul4789
  %sub4791 = sub nsw i64 %mul4790, 1
  %cmp4792 = icmp slt i64 %sub4791, 0
  br i1 %cmp4792, label %land.lhs.true.4794, label %lor.lhs.false.4799

land.lhs.true.4794:                               ; preds = %lor.lhs.false.4787
  %1003 = load i64, i64* %nbytes, align 8
  %1004 = load i32, i32* %height, align 4
  %conv4795 = zext i32 %1004 to i64
  %mul4796 = mul nsw i64 %1003, %conv4795
  %cmp4797 = icmp slt i64 %mul4796, -9223372036854775808
  br i1 %cmp4797, label %cond.true.4804, label %lor.lhs.false.4799

lor.lhs.false.4799:                               ; preds = %land.lhs.true.4794, %lor.lhs.false.4787
  %1005 = load i64, i64* %nbytes, align 8
  %1006 = load i32, i32* %height, align 4
  %conv4800 = zext i32 %1006 to i64
  %mul4801 = mul nsw i64 %1005, %conv4800
  %cmp4802 = icmp slt i64 9223372036854775807, %mul4801
  br i1 %cmp4802, label %cond.true.4804, label %cond.false.4819

cond.true.4804:                                   ; preds = %lor.lhs.false.4799, %land.lhs.true.4794, %cond.end.4781, %cond.end.4751, %cond.true.4712, %cond.end.4703, %cond.true.4667, %cond.end.4658, %land.lhs.true.4625, %land.lhs.true.4619
  %1007 = load i64, i64* %nbytes, align 8
  %1008 = load i32, i32* %height, align 4
  %conv4805 = zext i32 %1008 to i64
  %mul4806 = mul i64 %1007, %conv4805
  %cmp4807 = icmp ule i64 %mul4806, 9223372036854775807
  br i1 %cmp4807, label %cond.true.4809, label %cond.false.4812

cond.true.4809:                                   ; preds = %cond.true.4804
  %1009 = load i64, i64* %nbytes, align 8
  %1010 = load i32, i32* %height, align 4
  %conv4810 = zext i32 %1010 to i64
  %mul4811 = mul i64 %1009, %conv4810
  br label %cond.end.4817

cond.false.4812:                                  ; preds = %cond.true.4804
  %1011 = load i64, i64* %nbytes, align 8
  %1012 = load i32, i32* %height, align 4
  %conv4813 = zext i32 %1012 to i64
  %mul4814 = mul i64 %1011, %conv4813
  %sub4815 = sub i64 %mul4814, -9223372036854775808
  %add4816 = add nsw i64 %sub4815, -9223372036854775808
  br label %cond.end.4817

cond.end.4817:                                    ; preds = %cond.false.4812, %cond.true.4809
  %cond4818 = phi i64 [ %mul4811, %cond.true.4809 ], [ %add4816, %cond.false.4812 ]
  store i64 %cond4818, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.4819:                                  ; preds = %lor.lhs.false.4799
  %1013 = load i64, i64* %nbytes, align 8
  %1014 = load i32, i32* %height, align 4
  %conv4820 = zext i32 %1014 to i64
  %mul4821 = mul i64 %1013, %conv4820
  %cmp4822 = icmp ule i64 %mul4821, 9223372036854775807
  br i1 %cmp4822, label %cond.true.4824, label %cond.false.4827

cond.true.4824:                                   ; preds = %cond.false.4819
  %1015 = load i64, i64* %nbytes, align 8
  %1016 = load i32, i32* %height, align 4
  %conv4825 = zext i32 %1016 to i64
  %mul4826 = mul i64 %1015, %conv4825
  br label %cond.end.4832

cond.false.4827:                                  ; preds = %cond.false.4819
  %1017 = load i64, i64* %nbytes, align 8
  %1018 = load i32, i32* %height, align 4
  %conv4828 = zext i32 %1018 to i64
  %mul4829 = mul i64 %1017, %conv4828
  %sub4830 = sub i64 %mul4829, -9223372036854775808
  %add4831 = add nsw i64 %sub4830, -9223372036854775808
  br label %cond.end.4832

cond.end.4832:                                    ; preds = %cond.false.4827, %cond.true.4824
  %cond4833 = phi i64 [ %mul4826, %cond.true.4824 ], [ %add4831, %cond.false.4827 ]
  store i64 %cond4833, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.4834:                                  ; preds = %cond.false.4313
  br i1 false, label %cond.true.4835, label %cond.false.5097

cond.true.4835:                                   ; preds = %cond.false.4834
  %1019 = load i32, i32* %height, align 4
  %conv4836 = zext i32 %1019 to i64
  %mul4837 = mul nsw i64 0, %conv4836
  %1020 = load i64, i64* %nbytes, align 8
  %add4838 = add nsw i64 %mul4837, %1020
  %mul4839 = mul nsw i64 0, %add4838
  %sub4840 = sub nsw i64 %mul4839, 1
  %cmp4841 = icmp slt i64 %sub4840, 0
  br i1 %cmp4841, label %cond.true.4843, label %cond.false.4864

cond.true.4843:                                   ; preds = %cond.true.4835
  %1021 = load i32, i32* %height, align 4
  %conv4844 = zext i32 %1021 to i64
  %mul4845 = mul nsw i64 0, %conv4844
  %1022 = load i64, i64* %nbytes, align 8
  %add4846 = add nsw i64 %mul4845, %1022
  %mul4847 = mul nsw i64 0, %add4846
  %add4848 = add nsw i64 %mul4847, 0
  %neg4849 = xor i64 %add4848, -1
  %cmp4850 = icmp eq i64 %neg4849, -1
  %conv4851 = zext i1 %cmp4850 to i32
  %sub4852 = sub nsw i32 0, %conv4851
  %conv4853 = sext i32 %sub4852 to i64
  %1023 = load i32, i32* %height, align 4
  %conv4854 = zext i32 %1023 to i64
  %mul4855 = mul nsw i64 0, %conv4854
  %1024 = load i64, i64* %nbytes, align 8
  %add4856 = add nsw i64 %mul4855, %1024
  %mul4857 = mul nsw i64 0, %add4856
  %add4858 = add nsw i64 %mul4857, 1
  %shl4859 = shl i64 %add4858, 62
  %sub4860 = sub nsw i64 %shl4859, 1
  %mul4861 = mul nsw i64 %sub4860, 2
  %add4862 = add nsw i64 %mul4861, 1
  %sub4863 = sub nsw i64 %conv4853, %add4862
  br label %cond.end.4870

cond.false.4864:                                  ; preds = %cond.true.4835
  %1025 = load i32, i32* %height, align 4
  %conv4865 = zext i32 %1025 to i64
  %mul4866 = mul nsw i64 0, %conv4865
  %1026 = load i64, i64* %nbytes, align 8
  %add4867 = add nsw i64 %mul4866, %1026
  %mul4868 = mul nsw i64 0, %add4867
  %add4869 = add nsw i64 %mul4868, 0
  br label %cond.end.4870

cond.end.4870:                                    ; preds = %cond.false.4864, %cond.true.4843
  %cond4871 = phi i64 [ %sub4863, %cond.true.4843 ], [ %add4869, %cond.false.4864 ]
  %cmp4872 = icmp eq i64 %cond4871, 0
  br i1 %cmp4872, label %land.lhs.true.4874, label %lor.lhs.false.4888

land.lhs.true.4874:                               ; preds = %cond.end.4870
  %1027 = load i64, i64* %nbytes, align 8
  %cmp4875 = icmp slt i64 %1027, 0
  br i1 %cmp4875, label %land.lhs.true.4877, label %lor.lhs.false.4881

land.lhs.true.4877:                               ; preds = %land.lhs.true.4874
  %1028 = load i32, i32* %height, align 4
  %conv4878 = zext i32 %1028 to i64
  %cmp4879 = icmp slt i64 0, %conv4878
  br i1 %cmp4879, label %cond.true.5067, label %lor.lhs.false.4881

lor.lhs.false.4881:                               ; preds = %land.lhs.true.4877, %land.lhs.true.4874
  %1029 = load i32, i32* %height, align 4
  %conv4882 = zext i32 %1029 to i64
  %cmp4883 = icmp slt i64 %conv4882, 0
  br i1 %cmp4883, label %land.lhs.true.4885, label %lor.lhs.false.4888

land.lhs.true.4885:                               ; preds = %lor.lhs.false.4881
  %1030 = load i64, i64* %nbytes, align 8
  %cmp4886 = icmp slt i64 0, %1030
  br i1 %cmp4886, label %cond.true.5067, label %lor.lhs.false.4888

lor.lhs.false.4888:                               ; preds = %land.lhs.true.4885, %lor.lhs.false.4881, %cond.end.4870
  %1031 = load i32, i32* %height, align 4
  %conv4889 = zext i32 %1031 to i64
  %cmp4890 = icmp slt i64 %conv4889, 0
  br i1 %cmp4890, label %cond.true.4892, label %cond.false.4971

cond.true.4892:                                   ; preds = %lor.lhs.false.4888
  %1032 = load i64, i64* %nbytes, align 8
  %cmp4893 = icmp slt i64 %1032, 0
  br i1 %cmp4893, label %cond.true.4895, label %cond.false.4925

cond.true.4895:                                   ; preds = %cond.true.4892
  %1033 = load i64, i64* %nbytes, align 8
  %1034 = load i32, i32* %height, align 4
  %conv4896 = zext i32 %1034 to i64
  %mul4897 = mul nsw i64 0, %conv4896
  %1035 = load i64, i64* %nbytes, align 8
  %add4898 = add nsw i64 %mul4897, %1035
  %mul4899 = mul nsw i64 0, %add4898
  %sub4900 = sub nsw i64 %mul4899, 1
  %cmp4901 = icmp slt i64 %sub4900, 0
  br i1 %cmp4901, label %cond.true.4903, label %cond.false.4913

cond.true.4903:                                   ; preds = %cond.true.4895
  %1036 = load i32, i32* %height, align 4
  %conv4904 = zext i32 %1036 to i64
  %mul4905 = mul nsw i64 0, %conv4904
  %1037 = load i64, i64* %nbytes, align 8
  %add4906 = add nsw i64 %mul4905, %1037
  %mul4907 = mul nsw i64 0, %add4906
  %add4908 = add nsw i64 %mul4907, 1
  %shl4909 = shl i64 %add4908, 62
  %sub4910 = sub nsw i64 %shl4909, 1
  %mul4911 = mul nsw i64 %sub4910, 2
  %add4912 = add nsw i64 %mul4911, 1
  br label %cond.end.4919

cond.false.4913:                                  ; preds = %cond.true.4895
  %1038 = load i32, i32* %height, align 4
  %conv4914 = zext i32 %1038 to i64
  %mul4915 = mul nsw i64 0, %conv4914
  %1039 = load i64, i64* %nbytes, align 8
  %add4916 = add nsw i64 %mul4915, %1039
  %mul4917 = mul nsw i64 0, %add4916
  %sub4918 = sub nsw i64 %mul4917, 1
  br label %cond.end.4919

cond.end.4919:                                    ; preds = %cond.false.4913, %cond.true.4903
  %cond4920 = phi i64 [ %add4912, %cond.true.4903 ], [ %sub4918, %cond.false.4913 ]
  %1040 = load i32, i32* %height, align 4
  %conv4921 = zext i32 %1040 to i64
  %div4922 = sdiv i64 %cond4920, %conv4921
  %cmp4923 = icmp slt i64 %1033, %div4922
  br i1 %cmp4923, label %cond.true.5067, label %lor.lhs.false.5050

cond.false.4925:                                  ; preds = %cond.true.4892
  %1041 = load i32, i32* %height, align 4
  %conv4926 = zext i32 %1041 to i64
  %cmp4927 = icmp eq i64 %conv4926, -1
  br i1 %cmp4927, label %cond.true.4929, label %cond.false.4930

cond.true.4929:                                   ; preds = %cond.false.4925
  br i1 false, label %cond.true.5067, label %lor.lhs.false.5050

cond.false.4930:                                  ; preds = %cond.false.4925
  %1042 = load i32, i32* %height, align 4
  %conv4931 = zext i32 %1042 to i64
  %mul4932 = mul nsw i64 0, %conv4931
  %1043 = load i64, i64* %nbytes, align 8
  %add4933 = add nsw i64 %mul4932, %1043
  %mul4934 = mul nsw i64 0, %add4933
  %sub4935 = sub nsw i64 %mul4934, 1
  %cmp4936 = icmp slt i64 %sub4935, 0
  br i1 %cmp4936, label %cond.true.4938, label %cond.false.4959

cond.true.4938:                                   ; preds = %cond.false.4930
  %1044 = load i32, i32* %height, align 4
  %conv4939 = zext i32 %1044 to i64
  %mul4940 = mul nsw i64 0, %conv4939
  %1045 = load i64, i64* %nbytes, align 8
  %add4941 = add nsw i64 %mul4940, %1045
  %mul4942 = mul nsw i64 0, %add4941
  %add4943 = add nsw i64 %mul4942, 0
  %neg4944 = xor i64 %add4943, -1
  %cmp4945 = icmp eq i64 %neg4944, -1
  %conv4946 = zext i1 %cmp4945 to i32
  %sub4947 = sub nsw i32 0, %conv4946
  %conv4948 = sext i32 %sub4947 to i64
  %1046 = load i32, i32* %height, align 4
  %conv4949 = zext i32 %1046 to i64
  %mul4950 = mul nsw i64 0, %conv4949
  %1047 = load i64, i64* %nbytes, align 8
  %add4951 = add nsw i64 %mul4950, %1047
  %mul4952 = mul nsw i64 0, %add4951
  %add4953 = add nsw i64 %mul4952, 1
  %shl4954 = shl i64 %add4953, 62
  %sub4955 = sub nsw i64 %shl4954, 1
  %mul4956 = mul nsw i64 %sub4955, 2
  %add4957 = add nsw i64 %mul4956, 1
  %sub4958 = sub nsw i64 %conv4948, %add4957
  br label %cond.end.4965

cond.false.4959:                                  ; preds = %cond.false.4930
  %1048 = load i32, i32* %height, align 4
  %conv4960 = zext i32 %1048 to i64
  %mul4961 = mul nsw i64 0, %conv4960
  %1049 = load i64, i64* %nbytes, align 8
  %add4962 = add nsw i64 %mul4961, %1049
  %mul4963 = mul nsw i64 0, %add4962
  %add4964 = add nsw i64 %mul4963, 0
  br label %cond.end.4965

cond.end.4965:                                    ; preds = %cond.false.4959, %cond.true.4938
  %cond4966 = phi i64 [ %sub4958, %cond.true.4938 ], [ %add4964, %cond.false.4959 ]
  %1050 = load i32, i32* %height, align 4
  %conv4967 = zext i32 %1050 to i64
  %div4968 = sdiv i64 %cond4966, %conv4967
  %1051 = load i64, i64* %nbytes, align 8
  %cmp4969 = icmp slt i64 %div4968, %1051
  br i1 %cmp4969, label %cond.true.5067, label %lor.lhs.false.5050

cond.false.4971:                                  ; preds = %lor.lhs.false.4888
  %1052 = load i32, i32* %height, align 4
  %conv4972 = zext i32 %1052 to i64
  %cmp4973 = icmp eq i64 %conv4972, 0
  br i1 %cmp4973, label %cond.true.4975, label %cond.false.4976

cond.true.4975:                                   ; preds = %cond.false.4971
  br i1 false, label %cond.true.5067, label %lor.lhs.false.5050

cond.false.4976:                                  ; preds = %cond.false.4971
  %1053 = load i64, i64* %nbytes, align 8
  %cmp4977 = icmp slt i64 %1053, 0
  br i1 %cmp4977, label %cond.true.4979, label %cond.false.5020

cond.true.4979:                                   ; preds = %cond.false.4976
  %1054 = load i64, i64* %nbytes, align 8
  %1055 = load i32, i32* %height, align 4
  %conv4980 = zext i32 %1055 to i64
  %mul4981 = mul nsw i64 0, %conv4980
  %1056 = load i64, i64* %nbytes, align 8
  %add4982 = add nsw i64 %mul4981, %1056
  %mul4983 = mul nsw i64 0, %add4982
  %sub4984 = sub nsw i64 %mul4983, 1
  %cmp4985 = icmp slt i64 %sub4984, 0
  br i1 %cmp4985, label %cond.true.4987, label %cond.false.5008

cond.true.4987:                                   ; preds = %cond.true.4979
  %1057 = load i32, i32* %height, align 4
  %conv4988 = zext i32 %1057 to i64
  %mul4989 = mul nsw i64 0, %conv4988
  %1058 = load i64, i64* %nbytes, align 8
  %add4990 = add nsw i64 %mul4989, %1058
  %mul4991 = mul nsw i64 0, %add4990
  %add4992 = add nsw i64 %mul4991, 0
  %neg4993 = xor i64 %add4992, -1
  %cmp4994 = icmp eq i64 %neg4993, -1
  %conv4995 = zext i1 %cmp4994 to i32
  %sub4996 = sub nsw i32 0, %conv4995
  %conv4997 = sext i32 %sub4996 to i64
  %1059 = load i32, i32* %height, align 4
  %conv4998 = zext i32 %1059 to i64
  %mul4999 = mul nsw i64 0, %conv4998
  %1060 = load i64, i64* %nbytes, align 8
  %add5000 = add nsw i64 %mul4999, %1060
  %mul5001 = mul nsw i64 0, %add5000
  %add5002 = add nsw i64 %mul5001, 1
  %shl5003 = shl i64 %add5002, 62
  %sub5004 = sub nsw i64 %shl5003, 1
  %mul5005 = mul nsw i64 %sub5004, 2
  %add5006 = add nsw i64 %mul5005, 1
  %sub5007 = sub nsw i64 %conv4997, %add5006
  br label %cond.end.5014

cond.false.5008:                                  ; preds = %cond.true.4979
  %1061 = load i32, i32* %height, align 4
  %conv5009 = zext i32 %1061 to i64
  %mul5010 = mul nsw i64 0, %conv5009
  %1062 = load i64, i64* %nbytes, align 8
  %add5011 = add nsw i64 %mul5010, %1062
  %mul5012 = mul nsw i64 0, %add5011
  %add5013 = add nsw i64 %mul5012, 0
  br label %cond.end.5014

cond.end.5014:                                    ; preds = %cond.false.5008, %cond.true.4987
  %cond5015 = phi i64 [ %sub5007, %cond.true.4987 ], [ %add5013, %cond.false.5008 ]
  %1063 = load i32, i32* %height, align 4
  %conv5016 = zext i32 %1063 to i64
  %div5017 = sdiv i64 %cond5015, %conv5016
  %cmp5018 = icmp slt i64 %1054, %div5017
  br i1 %cmp5018, label %cond.true.5067, label %lor.lhs.false.5050

cond.false.5020:                                  ; preds = %cond.false.4976
  %1064 = load i32, i32* %height, align 4
  %conv5021 = zext i32 %1064 to i64
  %mul5022 = mul nsw i64 0, %conv5021
  %1065 = load i64, i64* %nbytes, align 8
  %add5023 = add nsw i64 %mul5022, %1065
  %mul5024 = mul nsw i64 0, %add5023
  %sub5025 = sub nsw i64 %mul5024, 1
  %cmp5026 = icmp slt i64 %sub5025, 0
  br i1 %cmp5026, label %cond.true.5028, label %cond.false.5038

cond.true.5028:                                   ; preds = %cond.false.5020
  %1066 = load i32, i32* %height, align 4
  %conv5029 = zext i32 %1066 to i64
  %mul5030 = mul nsw i64 0, %conv5029
  %1067 = load i64, i64* %nbytes, align 8
  %add5031 = add nsw i64 %mul5030, %1067
  %mul5032 = mul nsw i64 0, %add5031
  %add5033 = add nsw i64 %mul5032, 1
  %shl5034 = shl i64 %add5033, 62
  %sub5035 = sub nsw i64 %shl5034, 1
  %mul5036 = mul nsw i64 %sub5035, 2
  %add5037 = add nsw i64 %mul5036, 1
  br label %cond.end.5044

cond.false.5038:                                  ; preds = %cond.false.5020
  %1068 = load i32, i32* %height, align 4
  %conv5039 = zext i32 %1068 to i64
  %mul5040 = mul nsw i64 0, %conv5039
  %1069 = load i64, i64* %nbytes, align 8
  %add5041 = add nsw i64 %mul5040, %1069
  %mul5042 = mul nsw i64 0, %add5041
  %sub5043 = sub nsw i64 %mul5042, 1
  br label %cond.end.5044

cond.end.5044:                                    ; preds = %cond.false.5038, %cond.true.5028
  %cond5045 = phi i64 [ %add5037, %cond.true.5028 ], [ %sub5043, %cond.false.5038 ]
  %1070 = load i32, i32* %height, align 4
  %conv5046 = zext i32 %1070 to i64
  %div5047 = sdiv i64 %cond5045, %conv5046
  %1071 = load i64, i64* %nbytes, align 8
  %cmp5048 = icmp slt i64 %div5047, %1071
  br i1 %cmp5048, label %cond.true.5067, label %lor.lhs.false.5050

lor.lhs.false.5050:                               ; preds = %cond.end.5044, %cond.end.5014, %cond.true.4975, %cond.end.4965, %cond.true.4929, %cond.end.4919
  %1072 = load i64, i64* %nbytes, align 8
  %1073 = load i32, i32* %height, align 4
  %conv5051 = zext i32 %1073 to i64
  %mul5052 = mul nsw i64 %1072, %conv5051
  %mul5053 = mul nsw i64 0, %mul5052
  %sub5054 = sub nsw i64 %mul5053, 1
  %cmp5055 = icmp slt i64 %sub5054, 0
  br i1 %cmp5055, label %land.lhs.true.5057, label %lor.lhs.false.5062

land.lhs.true.5057:                               ; preds = %lor.lhs.false.5050
  %1074 = load i64, i64* %nbytes, align 8
  %1075 = load i32, i32* %height, align 4
  %conv5058 = zext i32 %1075 to i64
  %mul5059 = mul nsw i64 %1074, %conv5058
  %cmp5060 = icmp slt i64 %mul5059, -9223372036854775808
  br i1 %cmp5060, label %cond.true.5067, label %lor.lhs.false.5062

lor.lhs.false.5062:                               ; preds = %land.lhs.true.5057, %lor.lhs.false.5050
  %1076 = load i64, i64* %nbytes, align 8
  %1077 = load i32, i32* %height, align 4
  %conv5063 = zext i32 %1077 to i64
  %mul5064 = mul nsw i64 %1076, %conv5063
  %cmp5065 = icmp slt i64 9223372036854775807, %mul5064
  br i1 %cmp5065, label %cond.true.5067, label %cond.false.5082

cond.true.5067:                                   ; preds = %lor.lhs.false.5062, %land.lhs.true.5057, %cond.end.5044, %cond.end.5014, %cond.true.4975, %cond.end.4965, %cond.true.4929, %cond.end.4919, %land.lhs.true.4885, %land.lhs.true.4877
  %1078 = load i64, i64* %nbytes, align 8
  %1079 = load i32, i32* %height, align 4
  %conv5068 = zext i32 %1079 to i64
  %mul5069 = mul i64 %1078, %conv5068
  %cmp5070 = icmp ule i64 %mul5069, 9223372036854775807
  br i1 %cmp5070, label %cond.true.5072, label %cond.false.5075

cond.true.5072:                                   ; preds = %cond.true.5067
  %1080 = load i64, i64* %nbytes, align 8
  %1081 = load i32, i32* %height, align 4
  %conv5073 = zext i32 %1081 to i64
  %mul5074 = mul i64 %1080, %conv5073
  br label %cond.end.5080

cond.false.5075:                                  ; preds = %cond.true.5067
  %1082 = load i64, i64* %nbytes, align 8
  %1083 = load i32, i32* %height, align 4
  %conv5076 = zext i32 %1083 to i64
  %mul5077 = mul i64 %1082, %conv5076
  %sub5078 = sub i64 %mul5077, -9223372036854775808
  %add5079 = add nsw i64 %sub5078, -9223372036854775808
  br label %cond.end.5080

cond.end.5080:                                    ; preds = %cond.false.5075, %cond.true.5072
  %cond5081 = phi i64 [ %mul5074, %cond.true.5072 ], [ %add5079, %cond.false.5075 ]
  store i64 %cond5081, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.5082:                                  ; preds = %lor.lhs.false.5062
  %1084 = load i64, i64* %nbytes, align 8
  %1085 = load i32, i32* %height, align 4
  %conv5083 = zext i32 %1085 to i64
  %mul5084 = mul i64 %1084, %conv5083
  %cmp5085 = icmp ule i64 %mul5084, 9223372036854775807
  br i1 %cmp5085, label %cond.true.5087, label %cond.false.5090

cond.true.5087:                                   ; preds = %cond.false.5082
  %1086 = load i64, i64* %nbytes, align 8
  %1087 = load i32, i32* %height, align 4
  %conv5088 = zext i32 %1087 to i64
  %mul5089 = mul i64 %1086, %conv5088
  br label %cond.end.5095

cond.false.5090:                                  ; preds = %cond.false.5082
  %1088 = load i64, i64* %nbytes, align 8
  %1089 = load i32, i32* %height, align 4
  %conv5091 = zext i32 %1089 to i64
  %mul5092 = mul i64 %1088, %conv5091
  %sub5093 = sub i64 %mul5092, -9223372036854775808
  %add5094 = add nsw i64 %sub5093, -9223372036854775808
  br label %cond.end.5095

cond.end.5095:                                    ; preds = %cond.false.5090, %cond.true.5087
  %cond5096 = phi i64 [ %mul5089, %cond.true.5087 ], [ %add5094, %cond.false.5090 ]
  store i64 %cond5096, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

cond.false.5097:                                  ; preds = %cond.false.4834
  %1090 = load i32, i32* %height, align 4
  %mul5098 = mul i32 0, %1090
  %conv5099 = zext i32 %mul5098 to i64
  %1091 = load i64, i64* %nbytes, align 8
  %add5100 = add nsw i64 %conv5099, %1091
  %mul5101 = mul nsw i64 0, %add5100
  %sub5102 = sub nsw i64 %mul5101, 1
  %cmp5103 = icmp slt i64 %sub5102, 0
  br i1 %cmp5103, label %cond.true.5105, label %cond.false.5126

cond.true.5105:                                   ; preds = %cond.false.5097
  %1092 = load i32, i32* %height, align 4
  %mul5106 = mul i32 0, %1092
  %conv5107 = zext i32 %mul5106 to i64
  %1093 = load i64, i64* %nbytes, align 8
  %add5108 = add nsw i64 %conv5107, %1093
  %mul5109 = mul nsw i64 0, %add5108
  %add5110 = add nsw i64 %mul5109, 0
  %neg5111 = xor i64 %add5110, -1
  %cmp5112 = icmp eq i64 %neg5111, -1
  %conv5113 = zext i1 %cmp5112 to i32
  %sub5114 = sub nsw i32 0, %conv5113
  %conv5115 = sext i32 %sub5114 to i64
  %1094 = load i32, i32* %height, align 4
  %mul5116 = mul i32 0, %1094
  %conv5117 = zext i32 %mul5116 to i64
  %1095 = load i64, i64* %nbytes, align 8
  %add5118 = add nsw i64 %conv5117, %1095
  %mul5119 = mul nsw i64 0, %add5118
  %add5120 = add nsw i64 %mul5119, 1
  %shl5121 = shl i64 %add5120, 62
  %sub5122 = sub nsw i64 %shl5121, 1
  %mul5123 = mul nsw i64 %sub5122, 2
  %add5124 = add nsw i64 %mul5123, 1
  %sub5125 = sub nsw i64 %conv5115, %add5124
  br label %cond.end.5132

cond.false.5126:                                  ; preds = %cond.false.5097
  %1096 = load i32, i32* %height, align 4
  %mul5127 = mul i32 0, %1096
  %conv5128 = zext i32 %mul5127 to i64
  %1097 = load i64, i64* %nbytes, align 8
  %add5129 = add nsw i64 %conv5128, %1097
  %mul5130 = mul nsw i64 0, %add5129
  %add5131 = add nsw i64 %mul5130, 0
  br label %cond.end.5132

cond.end.5132:                                    ; preds = %cond.false.5126, %cond.true.5105
  %cond5133 = phi i64 [ %sub5125, %cond.true.5105 ], [ %add5131, %cond.false.5126 ]
  %cmp5134 = icmp eq i64 %cond5133, 0
  br i1 %cmp5134, label %land.lhs.true.5136, label %lor.lhs.false.5148

land.lhs.true.5136:                               ; preds = %cond.end.5132
  %1098 = load i64, i64* %nbytes, align 8
  %cmp5137 = icmp slt i64 %1098, 0
  br i1 %cmp5137, label %land.lhs.true.5139, label %lor.lhs.false.5142

land.lhs.true.5139:                               ; preds = %land.lhs.true.5136
  %1099 = load i32, i32* %height, align 4
  %cmp5140 = icmp ult i32 0, %1099
  br i1 %cmp5140, label %cond.true.5324, label %lor.lhs.false.5142

lor.lhs.false.5142:                               ; preds = %land.lhs.true.5139, %land.lhs.true.5136
  %1100 = load i32, i32* %height, align 4
  %cmp5143 = icmp ult i32 %1100, 0
  br i1 %cmp5143, label %land.lhs.true.5145, label %lor.lhs.false.5148

land.lhs.true.5145:                               ; preds = %lor.lhs.false.5142
  %1101 = load i64, i64* %nbytes, align 8
  %cmp5146 = icmp slt i64 0, %1101
  br i1 %cmp5146, label %cond.true.5324, label %lor.lhs.false.5148

lor.lhs.false.5148:                               ; preds = %land.lhs.true.5145, %lor.lhs.false.5142, %cond.end.5132
  %1102 = load i32, i32* %height, align 4
  %cmp5149 = icmp ult i32 %1102, 0
  br i1 %cmp5149, label %cond.true.5151, label %cond.false.5229

cond.true.5151:                                   ; preds = %lor.lhs.false.5148
  %1103 = load i64, i64* %nbytes, align 8
  %cmp5152 = icmp slt i64 %1103, 0
  br i1 %cmp5152, label %cond.true.5154, label %cond.false.5184

cond.true.5154:                                   ; preds = %cond.true.5151
  %1104 = load i64, i64* %nbytes, align 8
  %1105 = load i32, i32* %height, align 4
  %mul5155 = mul i32 0, %1105
  %conv5156 = zext i32 %mul5155 to i64
  %1106 = load i64, i64* %nbytes, align 8
  %add5157 = add nsw i64 %conv5156, %1106
  %mul5158 = mul nsw i64 0, %add5157
  %sub5159 = sub nsw i64 %mul5158, 1
  %cmp5160 = icmp slt i64 %sub5159, 0
  br i1 %cmp5160, label %cond.true.5162, label %cond.false.5172

cond.true.5162:                                   ; preds = %cond.true.5154
  %1107 = load i32, i32* %height, align 4
  %mul5163 = mul i32 0, %1107
  %conv5164 = zext i32 %mul5163 to i64
  %1108 = load i64, i64* %nbytes, align 8
  %add5165 = add nsw i64 %conv5164, %1108
  %mul5166 = mul nsw i64 0, %add5165
  %add5167 = add nsw i64 %mul5166, 1
  %shl5168 = shl i64 %add5167, 62
  %sub5169 = sub nsw i64 %shl5168, 1
  %mul5170 = mul nsw i64 %sub5169, 2
  %add5171 = add nsw i64 %mul5170, 1
  br label %cond.end.5178

cond.false.5172:                                  ; preds = %cond.true.5154
  %1109 = load i32, i32* %height, align 4
  %mul5173 = mul i32 0, %1109
  %conv5174 = zext i32 %mul5173 to i64
  %1110 = load i64, i64* %nbytes, align 8
  %add5175 = add nsw i64 %conv5174, %1110
  %mul5176 = mul nsw i64 0, %add5175
  %sub5177 = sub nsw i64 %mul5176, 1
  br label %cond.end.5178

cond.end.5178:                                    ; preds = %cond.false.5172, %cond.true.5162
  %cond5179 = phi i64 [ %add5171, %cond.true.5162 ], [ %sub5177, %cond.false.5172 ]
  %1111 = load i32, i32* %height, align 4
  %conv5180 = zext i32 %1111 to i64
  %div5181 = sdiv i64 %cond5179, %conv5180
  %cmp5182 = icmp slt i64 %1104, %div5181
  br i1 %cmp5182, label %cond.true.5324, label %lor.lhs.false.5307

cond.false.5184:                                  ; preds = %cond.true.5151
  %1112 = load i32, i32* %height, align 4
  %cmp5185 = icmp eq i32 %1112, -1
  br i1 %cmp5185, label %cond.true.5187, label %cond.false.5188

cond.true.5187:                                   ; preds = %cond.false.5184
  br i1 false, label %cond.true.5324, label %lor.lhs.false.5307

cond.false.5188:                                  ; preds = %cond.false.5184
  %1113 = load i32, i32* %height, align 4
  %mul5189 = mul i32 0, %1113
  %conv5190 = zext i32 %mul5189 to i64
  %1114 = load i64, i64* %nbytes, align 8
  %add5191 = add nsw i64 %conv5190, %1114
  %mul5192 = mul nsw i64 0, %add5191
  %sub5193 = sub nsw i64 %mul5192, 1
  %cmp5194 = icmp slt i64 %sub5193, 0
  br i1 %cmp5194, label %cond.true.5196, label %cond.false.5217

cond.true.5196:                                   ; preds = %cond.false.5188
  %1115 = load i32, i32* %height, align 4
  %mul5197 = mul i32 0, %1115
  %conv5198 = zext i32 %mul5197 to i64
  %1116 = load i64, i64* %nbytes, align 8
  %add5199 = add nsw i64 %conv5198, %1116
  %mul5200 = mul nsw i64 0, %add5199
  %add5201 = add nsw i64 %mul5200, 0
  %neg5202 = xor i64 %add5201, -1
  %cmp5203 = icmp eq i64 %neg5202, -1
  %conv5204 = zext i1 %cmp5203 to i32
  %sub5205 = sub nsw i32 0, %conv5204
  %conv5206 = sext i32 %sub5205 to i64
  %1117 = load i32, i32* %height, align 4
  %mul5207 = mul i32 0, %1117
  %conv5208 = zext i32 %mul5207 to i64
  %1118 = load i64, i64* %nbytes, align 8
  %add5209 = add nsw i64 %conv5208, %1118
  %mul5210 = mul nsw i64 0, %add5209
  %add5211 = add nsw i64 %mul5210, 1
  %shl5212 = shl i64 %add5211, 62
  %sub5213 = sub nsw i64 %shl5212, 1
  %mul5214 = mul nsw i64 %sub5213, 2
  %add5215 = add nsw i64 %mul5214, 1
  %sub5216 = sub nsw i64 %conv5206, %add5215
  br label %cond.end.5223

cond.false.5217:                                  ; preds = %cond.false.5188
  %1119 = load i32, i32* %height, align 4
  %mul5218 = mul i32 0, %1119
  %conv5219 = zext i32 %mul5218 to i64
  %1120 = load i64, i64* %nbytes, align 8
  %add5220 = add nsw i64 %conv5219, %1120
  %mul5221 = mul nsw i64 0, %add5220
  %add5222 = add nsw i64 %mul5221, 0
  br label %cond.end.5223

cond.end.5223:                                    ; preds = %cond.false.5217, %cond.true.5196
  %cond5224 = phi i64 [ %sub5216, %cond.true.5196 ], [ %add5222, %cond.false.5217 ]
  %1121 = load i32, i32* %height, align 4
  %conv5225 = zext i32 %1121 to i64
  %div5226 = sdiv i64 %cond5224, %conv5225
  %1122 = load i64, i64* %nbytes, align 8
  %cmp5227 = icmp slt i64 %div5226, %1122
  br i1 %cmp5227, label %cond.true.5324, label %lor.lhs.false.5307

cond.false.5229:                                  ; preds = %lor.lhs.false.5148
  %1123 = load i32, i32* %height, align 4
  %cmp5230 = icmp eq i32 %1123, 0
  br i1 %cmp5230, label %cond.true.5232, label %cond.false.5233

cond.true.5232:                                   ; preds = %cond.false.5229
  br i1 false, label %cond.true.5324, label %lor.lhs.false.5307

cond.false.5233:                                  ; preds = %cond.false.5229
  %1124 = load i64, i64* %nbytes, align 8
  %cmp5234 = icmp slt i64 %1124, 0
  br i1 %cmp5234, label %cond.true.5236, label %cond.false.5277

cond.true.5236:                                   ; preds = %cond.false.5233
  %1125 = load i64, i64* %nbytes, align 8
  %1126 = load i32, i32* %height, align 4
  %mul5237 = mul i32 0, %1126
  %conv5238 = zext i32 %mul5237 to i64
  %1127 = load i64, i64* %nbytes, align 8
  %add5239 = add nsw i64 %conv5238, %1127
  %mul5240 = mul nsw i64 0, %add5239
  %sub5241 = sub nsw i64 %mul5240, 1
  %cmp5242 = icmp slt i64 %sub5241, 0
  br i1 %cmp5242, label %cond.true.5244, label %cond.false.5265

cond.true.5244:                                   ; preds = %cond.true.5236
  %1128 = load i32, i32* %height, align 4
  %mul5245 = mul i32 0, %1128
  %conv5246 = zext i32 %mul5245 to i64
  %1129 = load i64, i64* %nbytes, align 8
  %add5247 = add nsw i64 %conv5246, %1129
  %mul5248 = mul nsw i64 0, %add5247
  %add5249 = add nsw i64 %mul5248, 0
  %neg5250 = xor i64 %add5249, -1
  %cmp5251 = icmp eq i64 %neg5250, -1
  %conv5252 = zext i1 %cmp5251 to i32
  %sub5253 = sub nsw i32 0, %conv5252
  %conv5254 = sext i32 %sub5253 to i64
  %1130 = load i32, i32* %height, align 4
  %mul5255 = mul i32 0, %1130
  %conv5256 = zext i32 %mul5255 to i64
  %1131 = load i64, i64* %nbytes, align 8
  %add5257 = add nsw i64 %conv5256, %1131
  %mul5258 = mul nsw i64 0, %add5257
  %add5259 = add nsw i64 %mul5258, 1
  %shl5260 = shl i64 %add5259, 62
  %sub5261 = sub nsw i64 %shl5260, 1
  %mul5262 = mul nsw i64 %sub5261, 2
  %add5263 = add nsw i64 %mul5262, 1
  %sub5264 = sub nsw i64 %conv5254, %add5263
  br label %cond.end.5271

cond.false.5265:                                  ; preds = %cond.true.5236
  %1132 = load i32, i32* %height, align 4
  %mul5266 = mul i32 0, %1132
  %conv5267 = zext i32 %mul5266 to i64
  %1133 = load i64, i64* %nbytes, align 8
  %add5268 = add nsw i64 %conv5267, %1133
  %mul5269 = mul nsw i64 0, %add5268
  %add5270 = add nsw i64 %mul5269, 0
  br label %cond.end.5271

cond.end.5271:                                    ; preds = %cond.false.5265, %cond.true.5244
  %cond5272 = phi i64 [ %sub5264, %cond.true.5244 ], [ %add5270, %cond.false.5265 ]
  %1134 = load i32, i32* %height, align 4
  %conv5273 = zext i32 %1134 to i64
  %div5274 = sdiv i64 %cond5272, %conv5273
  %cmp5275 = icmp slt i64 %1125, %div5274
  br i1 %cmp5275, label %cond.true.5324, label %lor.lhs.false.5307

cond.false.5277:                                  ; preds = %cond.false.5233
  %1135 = load i32, i32* %height, align 4
  %mul5278 = mul i32 0, %1135
  %conv5279 = zext i32 %mul5278 to i64
  %1136 = load i64, i64* %nbytes, align 8
  %add5280 = add nsw i64 %conv5279, %1136
  %mul5281 = mul nsw i64 0, %add5280
  %sub5282 = sub nsw i64 %mul5281, 1
  %cmp5283 = icmp slt i64 %sub5282, 0
  br i1 %cmp5283, label %cond.true.5285, label %cond.false.5295

cond.true.5285:                                   ; preds = %cond.false.5277
  %1137 = load i32, i32* %height, align 4
  %mul5286 = mul i32 0, %1137
  %conv5287 = zext i32 %mul5286 to i64
  %1138 = load i64, i64* %nbytes, align 8
  %add5288 = add nsw i64 %conv5287, %1138
  %mul5289 = mul nsw i64 0, %add5288
  %add5290 = add nsw i64 %mul5289, 1
  %shl5291 = shl i64 %add5290, 62
  %sub5292 = sub nsw i64 %shl5291, 1
  %mul5293 = mul nsw i64 %sub5292, 2
  %add5294 = add nsw i64 %mul5293, 1
  br label %cond.end.5301

cond.false.5295:                                  ; preds = %cond.false.5277
  %1139 = load i32, i32* %height, align 4
  %mul5296 = mul i32 0, %1139
  %conv5297 = zext i32 %mul5296 to i64
  %1140 = load i64, i64* %nbytes, align 8
  %add5298 = add nsw i64 %conv5297, %1140
  %mul5299 = mul nsw i64 0, %add5298
  %sub5300 = sub nsw i64 %mul5299, 1
  br label %cond.end.5301

cond.end.5301:                                    ; preds = %cond.false.5295, %cond.true.5285
  %cond5302 = phi i64 [ %add5294, %cond.true.5285 ], [ %sub5300, %cond.false.5295 ]
  %1141 = load i32, i32* %height, align 4
  %conv5303 = zext i32 %1141 to i64
  %div5304 = sdiv i64 %cond5302, %conv5303
  %1142 = load i64, i64* %nbytes, align 8
  %cmp5305 = icmp slt i64 %div5304, %1142
  br i1 %cmp5305, label %cond.true.5324, label %lor.lhs.false.5307

lor.lhs.false.5307:                               ; preds = %cond.end.5301, %cond.end.5271, %cond.true.5232, %cond.end.5223, %cond.true.5187, %cond.end.5178
  %1143 = load i64, i64* %nbytes, align 8
  %1144 = load i32, i32* %height, align 4
  %conv5308 = zext i32 %1144 to i64
  %mul5309 = mul nsw i64 %1143, %conv5308
  %mul5310 = mul nsw i64 0, %mul5309
  %sub5311 = sub nsw i64 %mul5310, 1
  %cmp5312 = icmp slt i64 %sub5311, 0
  br i1 %cmp5312, label %land.lhs.true.5314, label %lor.lhs.false.5319

land.lhs.true.5314:                               ; preds = %lor.lhs.false.5307
  %1145 = load i64, i64* %nbytes, align 8
  %1146 = load i32, i32* %height, align 4
  %conv5315 = zext i32 %1146 to i64
  %mul5316 = mul nsw i64 %1145, %conv5315
  %cmp5317 = icmp slt i64 %mul5316, -9223372036854775808
  br i1 %cmp5317, label %cond.true.5324, label %lor.lhs.false.5319

lor.lhs.false.5319:                               ; preds = %land.lhs.true.5314, %lor.lhs.false.5307
  %1147 = load i64, i64* %nbytes, align 8
  %1148 = load i32, i32* %height, align 4
  %conv5320 = zext i32 %1148 to i64
  %mul5321 = mul nsw i64 %1147, %conv5320
  %cmp5322 = icmp slt i64 9223372036854775807, %mul5321
  br i1 %cmp5322, label %cond.true.5324, label %cond.false.5339

cond.true.5324:                                   ; preds = %lor.lhs.false.5319, %land.lhs.true.5314, %cond.end.5301, %cond.end.5271, %cond.true.5232, %cond.end.5223, %cond.true.5187, %cond.end.5178, %land.lhs.true.5145, %land.lhs.true.5139
  %1149 = load i64, i64* %nbytes, align 8
  %1150 = load i32, i32* %height, align 4
  %conv5325 = zext i32 %1150 to i64
  %mul5326 = mul i64 %1149, %conv5325
  %cmp5327 = icmp ule i64 %mul5326, 9223372036854775807
  br i1 %cmp5327, label %cond.true.5329, label %cond.false.5332

cond.true.5329:                                   ; preds = %cond.true.5324
  %1151 = load i64, i64* %nbytes, align 8
  %1152 = load i32, i32* %height, align 4
  %conv5330 = zext i32 %1152 to i64
  %mul5331 = mul i64 %1151, %conv5330
  br label %cond.end.5337

cond.false.5332:                                  ; preds = %cond.true.5324
  %1153 = load i64, i64* %nbytes, align 8
  %1154 = load i32, i32* %height, align 4
  %conv5333 = zext i32 %1154 to i64
  %mul5334 = mul i64 %1153, %conv5333
  %sub5335 = sub i64 %mul5334, -9223372036854775808
  %add5336 = add nsw i64 %sub5335, -9223372036854775808
  br label %cond.end.5337

cond.end.5337:                                    ; preds = %cond.false.5332, %cond.true.5329
  %cond5338 = phi i64 [ %mul5331, %cond.true.5329 ], [ %add5336, %cond.false.5332 ]
  store i64 %cond5338, i64* %nbytes, align 8
  br i1 true, label %if.then.5354, label %if.end.5355

cond.false.5339:                                  ; preds = %lor.lhs.false.5319
  %1155 = load i64, i64* %nbytes, align 8
  %1156 = load i32, i32* %height, align 4
  %conv5340 = zext i32 %1156 to i64
  %mul5341 = mul i64 %1155, %conv5340
  %cmp5342 = icmp ule i64 %mul5341, 9223372036854775807
  br i1 %cmp5342, label %cond.true.5344, label %cond.false.5347

cond.true.5344:                                   ; preds = %cond.false.5339
  %1157 = load i64, i64* %nbytes, align 8
  %1158 = load i32, i32* %height, align 4
  %conv5345 = zext i32 %1158 to i64
  %mul5346 = mul i64 %1157, %conv5345
  br label %cond.end.5352

cond.false.5347:                                  ; preds = %cond.false.5339
  %1159 = load i64, i64* %nbytes, align 8
  %1160 = load i32, i32* %height, align 4
  %conv5348 = zext i32 %1160 to i64
  %mul5349 = mul i64 %1159, %conv5348
  %sub5350 = sub i64 %mul5349, -9223372036854775808
  %add5351 = add nsw i64 %sub5350, -9223372036854775808
  br label %cond.end.5352

cond.end.5352:                                    ; preds = %cond.false.5347, %cond.true.5344
  %cond5353 = phi i64 [ %mul5346, %cond.true.5344 ], [ %add5351, %cond.false.5347 ]
  store i64 %cond5353, i64* %nbytes, align 8
  br i1 false, label %if.then.5354, label %if.end.5355

if.then.5354:                                     ; preds = %cond.end.5352, %cond.end.5337, %cond.end.5095, %cond.end.5080, %cond.end.4832, %cond.end.4817, %cond.end.4575, %cond.end.4560, %cond.end.4310, %cond.end.4294, %cond.end.4051, %cond.end.4035, %cond.end.3789, %cond.end.3760, %cond.end.3504, %cond.end.3475, %cond.end.3127, %cond.end.3098, %cond.end.2842, %cond.end.2813, %cond.end.2466, %cond.end.2451, %cond.end.2242, %cond.end.2227, %cond.end.2014, %cond.end.1999, %cond.end.1790, %cond.end.1775, %cond.end.1560, %cond.end.1547, %cond.end.1340, %cond.end.1327, %cond.end.1146, %cond.end.1123, %cond.end.906, %cond.end.883, %cond.end.636, %cond.end.613, %cond.end.396, %cond.end.373
  call void @memory_full(i64 -1) #11
  unreachable

if.end.5355:                                      ; preds = %cond.end.5352, %cond.end.5337, %cond.end.5095, %cond.end.5080, %cond.end.4832, %cond.end.4817, %cond.end.4575, %cond.end.4560, %cond.end.4310, %cond.end.4294, %cond.end.4051, %cond.end.4035, %cond.end.3789, %cond.end.3760, %cond.end.3504, %cond.end.3475, %cond.end.3127, %cond.end.3098, %cond.end.2842, %cond.end.2813
  %1161 = load i64, i64* %nbytes, align 8
  %call5356 = call noalias i8* @xmalloc(i64 %1161)
  store i8* %call5356, i8** %pixels, align 8
  %1162 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %pixels5357 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %1162, i32 0, i32 4
  store i8* %call5356, i8** %pixels5357, align 8
  %1163 = load i32, i32* %height, align 4
  %conv5358 = zext i32 %1163 to i64
  %mul5359 = mul i64 %conv5358, 8
  %call5360 = call noalias i8* @xmalloc(i64 %mul5359)
  %1164 = bitcast i8* %call5360 to i8**
  store i8** %1164, i8*** %rows, align 8
  %1165 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %rows5361 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %1165, i32 0, i32 5
  store i8** %1164, i8*** %rows5361, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.5355
  %1166 = load i64, i64* %i, align 8
  %1167 = load i32, i32* %height, align 4
  %conv5362 = zext i32 %1167 to i64
  %cmp5363 = icmp slt i64 %1166, %conv5362
  br i1 %cmp5363, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1168 = load i8*, i8** %pixels, align 8
  %1169 = load i64, i64* %i, align 8
  %1170 = load i32, i32* %row_bytes, align 4
  %conv5365 = zext i32 %1170 to i64
  %mul5366 = mul nsw i64 %1169, %conv5365
  %add.ptr5367 = getelementptr inbounds i8, i8* %1168, i64 %mul5366
  %1171 = load i64, i64* %i, align 8
  %1172 = load i8**, i8*** %rows, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %1172, i64 %1171
  store i8* %add.ptr5367, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %1173 = load i64, i64* %i, align 8
  %inc = add nsw i64 %1173, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %1174 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %1175 = load i8**, i8*** %rows, align 8
  call void @png_read_image(%struct.png_struct_def* %1174, i8** %1175)
  %1176 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %1177 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  call void @png_read_end(%struct.png_struct_def* %1176, %struct.png_info_def* %1177)
  %1178 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool5368 = icmp ne %struct._IO_FILE* %1178, null
  br i1 %tobool5368, label %if.then.5369, label %if.end.5372

if.then.5369:                                     ; preds = %for.end
  %1179 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call5370 = call i32 @fclose(%struct._IO_FILE* %1179)
  %1180 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %fp5371 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %1180, i32 0, i32 3
  store %struct._IO_FILE* null, %struct._IO_FILE** %fp5371, align 8
  br label %if.end.5372

if.end.5372:                                      ; preds = %if.then.5369, %for.end
  %1181 = load i8, i8* %channels, align 1
  %conv5373 = zext i8 %1181 to i32
  %cmp5374 = icmp eq i32 %conv5373, 4
  br i1 %cmp5374, label %land.lhs.true.5376, label %if.end.5381

land.lhs.true.5376:                               ; preds = %if.end.5372
  %1182 = load i8, i8* %transparent_p, align 1
  %tobool5377 = trunc i8 %1182 to i1
  br i1 %tobool5377, label %if.end.5381, label %land.lhs.true.5378

land.lhs.true.5378:                               ; preds = %land.lhs.true.5376
  %1183 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1184 = load %struct.image*, %struct.image** %img.addr, align 8
  %1185 = load i32, i32* %width, align 4
  %1186 = load i32, i32* %height, align 4
  %call5379 = call zeroext i1 @image_create_x_image_and_pixmap(%struct.frame* %1183, %struct.image* %1184, i32 %1185, i32 %1186, i32 1, %struct._XImage** %mask_img, i1 zeroext true)
  br i1 %call5379, label %if.end.5381, label %if.then.5380

if.then.5380:                                     ; preds = %land.lhs.true.5378
  %1187 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @x_destroy_x_image(%struct._XImage* %1187)
  %1188 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1189 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image_1(%struct.frame* %1188, %struct.image* %1189, i32 1)
  br label %error

if.end.5381:                                      ; preds = %land.lhs.true.5378, %land.lhs.true.5376, %if.end.5372
  call void @init_color_table()
  store i32 0, i32* %y, align 4
  br label %for.cond.5382

for.cond.5382:                                    ; preds = %for.inc.5422, %if.end.5381
  %1190 = load i32, i32* %y, align 4
  %1191 = load i32, i32* %height, align 4
  %cmp5383 = icmp ult i32 %1190, %1191
  br i1 %cmp5383, label %for.body.5385, label %for.end.5424

for.body.5385:                                    ; preds = %for.cond.5382
  %1192 = load i32, i32* %y, align 4
  %idxprom = sext i32 %1192 to i64
  %1193 = load i8**, i8*** %rows, align 8
  %arrayidx5386 = getelementptr inbounds i8*, i8** %1193, i64 %idxprom
  %1194 = load i8*, i8** %arrayidx5386, align 8
  store i8* %1194, i8** %p, align 8
  store i32 0, i32* %x, align 4
  br label %for.cond.5387

for.cond.5387:                                    ; preds = %for.inc.5419, %for.body.5385
  %1195 = load i32, i32* %x, align 4
  %1196 = load i32, i32* %width, align 4
  %cmp5388 = icmp ult i32 %1195, %1196
  br i1 %cmp5388, label %for.body.5390, label %for.end.5421

for.body.5390:                                    ; preds = %for.cond.5387
  %1197 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1197, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %1198 = load i8, i8* %1197, align 1
  %conv5391 = zext i8 %1198 to i32
  %shl5392 = shl i32 %conv5391, 8
  store i32 %shl5392, i32* %r, align 4
  %1199 = load i8*, i8** %p, align 8
  %incdec.ptr5393 = getelementptr inbounds i8, i8* %1199, i32 1
  store i8* %incdec.ptr5393, i8** %p, align 8
  %1200 = load i8, i8* %1199, align 1
  %conv5394 = zext i8 %1200 to i32
  %shl5395 = shl i32 %conv5394, 8
  store i32 %shl5395, i32* %g, align 4
  %1201 = load i8*, i8** %p, align 8
  %incdec.ptr5396 = getelementptr inbounds i8, i8* %1201, i32 1
  store i8* %incdec.ptr5396, i8** %p, align 8
  %1202 = load i8, i8* %1201, align 1
  %conv5397 = zext i8 %1202 to i32
  %shl5398 = shl i32 %conv5397, 8
  store i32 %shl5398, i32* %b, align 4
  %1203 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %f5399 = getelementptr inbounds %struct._XImage, %struct._XImage* %1203, i32 0, i32 16
  %put_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f5399, i32 0, i32 3
  %1204 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel, align 8
  %1205 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %1206 = load i32, i32* %x, align 4
  %1207 = load i32, i32* %y, align 4
  %1208 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1209 = load i32, i32* %r, align 4
  %1210 = load i32, i32* %g, align 4
  %1211 = load i32, i32* %b, align 4
  %call5400 = call i64 @lookup_rgb_color(%struct.frame* %1208, i32 %1209, i32 %1210, i32 %1211)
  %call5401 = call i32 %1204(%struct._XImage* %1205, i32 %1206, i32 %1207, i64 %call5400)
  %1212 = load i8, i8* %channels, align 1
  %conv5402 = zext i8 %1212 to i32
  %cmp5403 = icmp eq i32 %conv5402, 4
  br i1 %cmp5403, label %if.then.5405, label %if.end.5418

if.then.5405:                                     ; preds = %for.body.5390
  %1213 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %tobool5406 = icmp ne %struct._XImage* %1213, null
  br i1 %tobool5406, label %if.then.5407, label %if.end.5416

if.then.5407:                                     ; preds = %if.then.5405
  %1214 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %f5408 = getelementptr inbounds %struct._XImage, %struct._XImage* %1214, i32 0, i32 16
  %put_pixel5409 = getelementptr inbounds %struct.funcs, %struct.funcs* %f5408, i32 0, i32 3
  %1215 = load i32 (%struct._XImage*, i32, i32, i64)*, i32 (%struct._XImage*, i32, i32, i64)** %put_pixel5409, align 8
  %1216 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %1217 = load i32, i32* %x, align 4
  %1218 = load i32, i32* %y, align 4
  %1219 = load i8*, i8** %p, align 8
  %1220 = load i8, i8* %1219, align 1
  %conv5410 = zext i8 %1220 to i32
  %cmp5411 = icmp sgt i32 %conv5410, 0
  %cond5413 = select i1 %cmp5411, i32 1, i32 0
  %conv5414 = sext i32 %cond5413 to i64
  %call5415 = call i32 %1215(%struct._XImage* %1216, i32 %1217, i32 %1218, i64 %conv5414)
  br label %if.end.5416

if.end.5416:                                      ; preds = %if.then.5407, %if.then.5405
  %1221 = load i8*, i8** %p, align 8
  %incdec.ptr5417 = getelementptr inbounds i8, i8* %1221, i32 1
  store i8* %incdec.ptr5417, i8** %p, align 8
  br label %if.end.5418

if.end.5418:                                      ; preds = %if.end.5416, %for.body.5390
  br label %for.inc.5419

for.inc.5419:                                     ; preds = %if.end.5418
  %1222 = load i32, i32* %x, align 4
  %inc5420 = add nsw i32 %1222, 1
  store i32 %inc5420, i32* %x, align 4
  br label %for.cond.5387

for.end.5421:                                     ; preds = %for.cond.5387
  br label %for.inc.5422

for.inc.5422:                                     ; preds = %for.end.5421
  %1223 = load i32, i32* %y, align 4
  %inc5423 = add nsw i32 %1223, 1
  store i32 %inc5423, i32* %y, align 4
  br label %for.cond.5382

for.end.5424:                                     ; preds = %for.cond.5382
  %1224 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec5425 = getelementptr inbounds %struct.image, %struct.image* %1224, i32 0, i32 15
  %1225 = load i64, i64* %spec5425, align 8
  %call5426 = call i64 @builtin_lisp_symbol(i32 13)
  %call5427 = call i64 @image_spec_value(i64 %1225, i64 %call5426, i8* null)
  %call5428 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5429 = icmp eq i64 %call5427, %call5428
  br i1 %cmp5429, label %if.then.5431, label %if.end.5444

if.then.5431:                                     ; preds = %for.end.5424
  %1226 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr, align 8
  %1227 = load %struct.png_info_def*, %struct.png_info_def** %info_ptr, align 8
  %call5433 = call i32 @png_get_bKGD(%struct.png_struct_def* %1226, %struct.png_info_def* %1227, %struct.png_color_16_struct** %bg5432)
  %tobool5434 = icmp ne i32 %call5433, 0
  br i1 %tobool5434, label %if.then.5435, label %if.end.5443

if.then.5435:                                     ; preds = %if.then.5431
  %1228 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1229 = load %struct.png_color_16_struct*, %struct.png_color_16_struct** %bg5432, align 8
  %red5436 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1229, i32 0, i32 1
  %1230 = load i16, i16* %red5436, align 2
  %conv5437 = zext i16 %1230 to i32
  %1231 = load %struct.png_color_16_struct*, %struct.png_color_16_struct** %bg5432, align 8
  %green5438 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1231, i32 0, i32 2
  %1232 = load i16, i16* %green5438, align 2
  %conv5439 = zext i16 %1232 to i32
  %1233 = load %struct.png_color_16_struct*, %struct.png_color_16_struct** %bg5432, align 8
  %blue5440 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %1233, i32 0, i32 3
  %1234 = load i16, i16* %blue5440, align 2
  %conv5441 = zext i16 %1234 to i32
  %call5442 = call i64 @lookup_rgb_color(%struct.frame* %1228, i32 %conv5437, i32 %conv5439, i32 %conv5441)
  %1235 = load %struct.image*, %struct.image** %img.addr, align 8
  %background = getelementptr inbounds %struct.image, %struct.image* %1235, i32 0, i32 7
  store i64 %call5442, i64* %background, align 8
  %1236 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid = getelementptr inbounds %struct.image, %struct.image* %1236, i32 0, i32 10
  %bf.load = load i8, i8* %background_valid, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %background_valid, align 8
  br label %if.end.5443

if.end.5443:                                      ; preds = %if.then.5435, %if.then.5431
  br label %if.end.5444

if.end.5444:                                      ; preds = %if.end.5443, %for.end.5424
  %1237 = load %struct.image*, %struct.image** %img.addr, align 8
  %ncolors = getelementptr inbounds %struct.image, %struct.image* %1237, i32 0, i32 6
  %call5445 = call i64* @colors_in_color_table(i32* %ncolors)
  %1238 = load %struct.image*, %struct.image** %img.addr, align 8
  %colors = getelementptr inbounds %struct.image, %struct.image* %1238, i32 0, i32 5
  store i64* %call5445, i64** %colors, align 8
  call void @free_color_table()
  %1239 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %png_ptr5446 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %1239, i32 0, i32 0
  %1240 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %info_ptr5447 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %1240, i32 0, i32 1
  %1241 = load %struct.png_load_context*, %struct.png_load_context** %c.addr, align 8
  %end_info5448 = getelementptr inbounds %struct.png_load_context, %struct.png_load_context* %1241, i32 0, i32 2
  call void @png_destroy_read_struct(%struct.png_struct_def** %png_ptr5446, %struct.png_info_def** %info_ptr5447, %struct.png_info_def** %end_info5448)
  %1242 = load i8**, i8*** %rows, align 8
  %1243 = bitcast i8** %1242 to i8*
  call void @xfree(i8* %1243)
  %1244 = load i8*, i8** %pixels, align 8
  call void @xfree(i8* %1244)
  %1245 = load i32, i32* %width, align 4
  %1246 = load %struct.image*, %struct.image** %img.addr, align 8
  %width5449 = getelementptr inbounds %struct.image, %struct.image* %1246, i32 0, i32 11
  store i32 %1245, i32* %width5449, align 4
  %1247 = load i32, i32* %height, align 4
  %1248 = load %struct.image*, %struct.image** %img.addr, align 8
  %height5450 = getelementptr inbounds %struct.image, %struct.image* %1248, i32 0, i32 12
  store i32 %1247, i32* %height5450, align 4
  %1249 = load %struct.image*, %struct.image** %img.addr, align 8
  %background_valid5451 = getelementptr inbounds %struct.image, %struct.image* %1249, i32 0, i32 10
  %bf.load5452 = load i8, i8* %background_valid5451, align 8
  %bf.lshr = lshr i8 %bf.load5452, 1
  %bf.clear5453 = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear5453 to i1
  br i1 %bf.cast, label %cond.true.5455, label %cond.false.5457

cond.true.5455:                                   ; preds = %if.end.5444
  %1250 = load %struct.image*, %struct.image** %img.addr, align 8
  %background5456 = getelementptr inbounds %struct.image, %struct.image* %1250, i32 0, i32 7
  %1251 = load i64, i64* %background5456, align 8
  br label %cond.end.5459

cond.false.5457:                                  ; preds = %if.end.5444
  %1252 = load %struct.image*, %struct.image** %img.addr, align 8
  %1253 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1254 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  %call5458 = call i64 @image_background(%struct.image* %1252, %struct.frame* %1253, %struct._XImage* %1254)
  br label %cond.end.5459

cond.end.5459:                                    ; preds = %cond.false.5457, %cond.true.5455
  %cond5460 = phi i64 [ %1251, %cond.true.5455 ], [ %call5458, %cond.false.5457 ]
  %1255 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1256 = load %struct.image*, %struct.image** %img.addr, align 8
  %1257 = load %struct._XImage*, %struct._XImage** %ximg, align 8
  call void @image_put_x_image(%struct.frame* %1255, %struct.image* %1256, %struct._XImage* %1257, i1 zeroext false)
  %1258 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %tobool5461 = icmp ne %struct._XImage* %1258, null
  br i1 %tobool5461, label %if.then.5462, label %if.end.5464

if.then.5462:                                     ; preds = %cond.end.5459
  %1259 = load %struct.image*, %struct.image** %img.addr, align 8
  %1260 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1261 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  %call5463 = call i32 @image_background_transparent(%struct.image* %1259, %struct.frame* %1260, %struct._XImage* %1261)
  %1262 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1263 = load %struct.image*, %struct.image** %img.addr, align 8
  %1264 = load %struct._XImage*, %struct._XImage** %mask_img, align 8
  call void @image_put_x_image(%struct.frame* %1262, %struct.image* %1263, %struct._XImage* %1264, i1 zeroext true)
  br label %if.end.5464

if.end.5464:                                      ; preds = %if.then.5462, %cond.end.5459
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.5464, %if.end.81, %if.end.60, %if.then.31, %if.then.21, %if.then.17, %if.then.10, %if.then.8
  %1265 = load i1, i1* %retval
  ret i1 %1265
}

declare i32 @png_sig_cmp(i8*, i64, i64) #1

declare i32 @fclose(%struct._IO_FILE*) #1

declare noalias %struct.png_struct_def* @png_create_read_struct(i8*, i8*, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*) #1

; Function Attrs: noreturn nounwind uwtable
define internal void @my_png_error(%struct.png_struct_def* %png_ptr, i8* %msg) #7 {
entry:
  %png_ptr.addr = alloca %struct.png_struct_def*, align 8
  %msg.addr = alloca i8*, align 8
  store %struct.png_struct_def* %png_ptr, %struct.png_struct_def** %png_ptr.addr, align 8
  store i8* %msg, i8** %msg.addr, align 8
  %0 = load i8*, i8** %msg.addr, align 8
  %call = call i64 @build_string(i8* %0)
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.52, i32 0, i32 0), i64 %call)
  %1 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr.addr, align 8
  call void @png_longjmp(%struct.png_struct_def* %1, i32 1) #11
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @my_png_warning(%struct.png_struct_def* %png_ptr, i8* %msg) #0 {
entry:
  %png_ptr.addr = alloca %struct.png_struct_def*, align 8
  %msg.addr = alloca i8*, align 8
  store %struct.png_struct_def* %png_ptr, %struct.png_struct_def** %png_ptr.addr, align 8
  store i8* %msg, i8** %msg.addr, align 8
  %0 = load i8*, i8** %msg.addr, align 8
  %call = call i64 @build_string(i8* %0)
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.53, i32 0, i32 0), i64 %call)
  ret void
}

declare noalias %struct.png_info_def* @png_create_info_struct(%struct.png_struct_def*) #1

declare void @png_destroy_read_struct(%struct.png_struct_def**, %struct.png_info_def**, %struct.png_info_def**) #1

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) #8

declare [1 x %struct.__jmp_buf_tag]* @png_set_longjmp_fn(%struct.png_struct_def*, void (%struct.__jmp_buf_tag*, i32)*, i64) #1

; Function Attrs: noreturn nounwind
declare void @_longjmp(%struct.__jmp_buf_tag*, i32) #9

declare void @png_set_read_fn(%struct.png_struct_def*, i8*, void (%struct.png_struct_def*, i8*, i64)*) #1

; Function Attrs: nounwind uwtable
define internal void @png_read_from_memory(%struct.png_struct_def* %png_ptr, i8* %data, i64 %length) #0 {
entry:
  %png_ptr.addr = alloca %struct.png_struct_def*, align 8
  %data.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %tbr = alloca %struct.png_memory_storage*, align 8
  store %struct.png_struct_def* %png_ptr, %struct.png_struct_def** %png_ptr.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  %0 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr.addr, align 8
  %call = call i8* @png_get_io_ptr(%struct.png_struct_def* %0)
  %1 = bitcast i8* %call to %struct.png_memory_storage*
  store %struct.png_memory_storage* %1, %struct.png_memory_storage** %tbr, align 8
  %2 = load i64, i64* %length.addr, align 8
  %3 = load %struct.png_memory_storage*, %struct.png_memory_storage** %tbr, align 8
  %len = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  %5 = load %struct.png_memory_storage*, %struct.png_memory_storage** %tbr, align 8
  %index = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %5, i32 0, i32 2
  %6 = load i64, i64* %index, align 8
  %sub = sub nsw i64 %4, %6
  %cmp = icmp ugt i64 %2, %sub
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr.addr, align 8
  call void @png_error(%struct.png_struct_def* %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %data.addr, align 8
  %9 = load %struct.png_memory_storage*, %struct.png_memory_storage** %tbr, align 8
  %bytes = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %9, i32 0, i32 0
  %10 = load i8*, i8** %bytes, align 8
  %11 = load %struct.png_memory_storage*, %struct.png_memory_storage** %tbr, align 8
  %index1 = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %11, i32 0, i32 2
  %12 = load i64, i64* %index1, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %12
  %13 = load i64, i64* %length.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %add.ptr, i64 %13, i32 1, i1 false)
  %14 = load %struct.png_memory_storage*, %struct.png_memory_storage** %tbr, align 8
  %index2 = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %14, i32 0, i32 2
  %15 = load i64, i64* %index2, align 8
  %16 = load i64, i64* %length.addr, align 8
  %add = add i64 %15, %16
  %17 = load %struct.png_memory_storage*, %struct.png_memory_storage** %tbr, align 8
  %index3 = getelementptr inbounds %struct.png_memory_storage, %struct.png_memory_storage* %17, i32 0, i32 2
  store i64 %add, i64* %index3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @png_read_from_file(%struct.png_struct_def* %png_ptr, i8* %data, i64 %length) #0 {
entry:
  %png_ptr.addr = alloca %struct.png_struct_def*, align 8
  %data.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  store %struct.png_struct_def* %png_ptr, %struct.png_struct_def** %png_ptr.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  %0 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr.addr, align 8
  %call = call i8* @png_get_io_ptr(%struct.png_struct_def* %0)
  %1 = bitcast i8* %call to %struct._IO_FILE*
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 8
  %2 = load i8*, i8** %data.addr, align 8
  %3 = load i64, i64* %length.addr, align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call1 = call i64 @fread(i8* %2, i64 1, i64 %3, %struct._IO_FILE* %4)
  %5 = load i64, i64* %length.addr, align 8
  %cmp = icmp ult i64 %call1, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.png_struct_def*, %struct.png_struct_def** %png_ptr.addr, align 8
  call void @png_error(%struct.png_struct_def* %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54, i32 0, i32 0)) #11
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

declare void @png_set_sig_bytes(%struct.png_struct_def*, i32) #1

declare void @png_read_info(%struct.png_struct_def*, %struct.png_info_def*) #1

declare i32 @png_get_IHDR(%struct.png_struct_def*, %struct.png_info_def*, i32*, i32*, i32*, i32*, i32*, i32*, i32*) #1

declare i32 @png_get_valid(%struct.png_struct_def*, %struct.png_info_def*, i32) #1

declare void @png_set_strip_16(%struct.png_struct_def*) #1

declare void @png_set_expand(%struct.png_struct_def*) #1

declare void @png_set_gray_to_rgb(%struct.png_struct_def*) #1

; Function Attrs: nounwind uwtable
define internal void @x_query_frame_background_color(%struct.frame* %f, %struct.XColor* %bgcolor) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %bgcolor.addr = alloca %struct.XColor*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.XColor* %bgcolor, %struct.XColor** %bgcolor.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 77
  %1 = load i64, i64* %background_pixel, align 8
  %2 = load %struct.XColor*, %struct.XColor** %bgcolor.addr, align 8
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %2, i32 0, i32 0
  store i64 %1, i64* %pixel, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %4 = load %struct.XColor*, %struct.XColor** %bgcolor.addr, align 8
  call void @x_query_color(%struct.frame* %3, %struct.XColor* %4)
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

declare void @png_set_background(%struct.png_struct_def*, %struct.png_color_16_struct*, i32, i32, double) #1

declare void @png_read_update_info(%struct.png_struct_def*, %struct.png_info_def*) #1

declare zeroext i8 @png_get_channels(%struct.png_struct_def*, %struct.png_info_def*) #1

declare i64 @png_get_rowbytes(%struct.png_struct_def*, %struct.png_info_def*) #1

declare void @png_read_image(%struct.png_struct_def*, i8**) #1

declare void @png_read_end(%struct.png_struct_def*, %struct.png_info_def*) #1

declare i32 @png_get_bKGD(%struct.png_struct_def*, %struct.png_info_def*, %struct.png_color_16_struct**) #1

; Function Attrs: noreturn
declare void @png_longjmp(%struct.png_struct_def*, i32) #3

declare i8* @png_get_io_ptr(%struct.png_struct_def*) #1

; Function Attrs: noreturn
declare void @png_error(%struct.png_struct_def*, i8*) #3

; Function Attrs: nounwind uwtable
define internal zeroext i1 @gs_image_p(i64 %object) #0 {
entry:
  %retval = alloca i1, align 1
  %object.addr = alloca i64, align 8
  %fmt = alloca [13 x %struct.image_keyword], align 16
  %tem = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %object, i64* %object.addr, align 8
  %0 = bitcast [13 x %struct.image_keyword]* %fmt to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([13 x %struct.image_keyword]* @gs_format to i8*), i64 416, i32 16, i1 false)
  %1 = load i64, i64* %object.addr, align 8
  %arraydecay = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i32 0
  %call = call i64 @builtin_lisp_symbol(i32 765)
  %call1 = call zeroext i1 @parse_image_spec(i64 %1, %struct.image_keyword* %arraydecay, i32 13, i64 %call)
  br i1 %call1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [13 x %struct.image_keyword], [13 x %struct.image_keyword]* %fmt, i32 0, i64 5
  %value = getelementptr inbounds %struct.image_keyword, %struct.image_keyword* %arrayidx, i32 0, i32 4
  %2 = load i64, i64* %value, align 8
  store i64 %2, i64* %tem, align 8
  %3 = load i64, i64* %tem, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.3
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %4, 4
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %tem, align 8
  %and6 = and i64 %5, 7
  %conv7 = trunc i64 %and6 to i32
  %cmp8 = icmp eq i32 %conv7, 3
  br i1 %cmp8, label %lor.lhs.false, label %if.then.15

lor.lhs.false:                                    ; preds = %for.body
  %6 = load i64, i64* %tem, align 8
  %sub = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 0
  %9 = load i64, i64* %car, align 8
  %and10 = and i64 %9, 7
  %conv11 = trunc i64 %and10 to i32
  %and12 = and i32 %conv11, -5
  %cmp13 = icmp eq i32 %and12, 2
  br i1 %cmp13, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %lor.lhs.false, %for.body
  store i1 false, i1* %retval
  br label %return

if.end.16:                                        ; preds = %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.16
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  %11 = load i64, i64* %tem, align 8
  %sub17 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub17 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %14 = load i64, i64* %cdr, align 8
  store i64 %14, i64* %tem, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i64, i64* %tem, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp19 = icmp eq i64 %15, %call18
  br i1 %cmp19, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %for.end
  store i1 false, i1* %retval
  br label %return

if.end.22:                                        ; preds = %for.end
  br label %if.end.48

if.else:                                          ; preds = %if.end
  %16 = load i64, i64* %tem, align 8
  %call23 = call zeroext i1 @VECTORP(i64 %16)
  br i1 %call23, label %if.then.24, label %if.else.46

if.then.24:                                       ; preds = %if.else
  %17 = load i64, i64* %tem, align 8
  %call25 = call i64 @ASIZE(i64 %17)
  %cmp26 = icmp ne i64 %call25, 4
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.24
  store i1 false, i1* %retval
  br label %return

if.end.29:                                        ; preds = %if.then.24
  store i32 0, i32* %i, align 4
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.43, %if.end.29
  %18 = load i32, i32* %i, align 4
  %cmp31 = icmp slt i32 %18, 4
  br i1 %cmp31, label %for.body.33, label %for.end.45

for.body.33:                                      ; preds = %for.cond.30
  %19 = load i64, i64* %tem, align 8
  %20 = load i32, i32* %i, align 4
  %conv34 = sext i32 %20 to i64
  %call35 = call i64 @AREF(i64 %19, i64 %conv34)
  %and36 = and i64 %call35, 7
  %conv37 = trunc i64 %and36 to i32
  %and38 = and i32 %conv37, -5
  %cmp39 = icmp eq i32 %and38, 2
  br i1 %cmp39, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %for.body.33
  store i1 false, i1* %retval
  br label %return

if.end.42:                                        ; preds = %for.body.33
  br label %for.inc.43

for.inc.43:                                       ; preds = %if.end.42
  %21 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %21, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond.30

for.end.45:                                       ; preds = %for.cond.30
  br label %if.end.47

if.else.46:                                       ; preds = %if.else
  store i1 false, i1* %retval
  br label %return

if.end.47:                                        ; preds = %for.end.45
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.end.22
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.48, %if.else.46, %if.then.41, %if.then.28, %if.then.21, %if.then.15, %if.then
  %22 = load i1, i1* %retval
  ret i1 %22
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @gs_load(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %printnum1 = alloca i64, align 8
  %printnum2 = alloca i64, align 8
  %buffer = alloca [22 x i8], align 16
  %window_and_pixmap_id = alloca i64, align 8
  %loader = alloca i64, align 8
  %pt_height = alloca i64, align 8
  %pt_width = alloca i64, align 8
  %frame = alloca i64, align 8
  %in_width = alloca double, align 8
  %in_height = alloca double, align 8
  %pixel_colors = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %window_and_pixmap_id, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %pixel_colors, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 15
  %1 = load i64, i64* %spec, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 100)
  %call3 = call i64 @image_spec_value(i64 %1, i64 %call2, i8* null)
  store i64 %call3, i64* %pt_width, align 8
  %2 = load i64, i64* %pt_width, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and4 = and i32 %conv, -5
  %cmp = icmp eq i32 %and4, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* %pt_width, align 8
  %shr = ashr i64 %3, 2
  %conv6 = sitofp i64 %shr to double
  %div = fdiv double %conv6, 7.200000e+01
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %div, %cond.true ], [ 0.000000e+00, %cond.false ]
  store double %cond, double* %in_width, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %resx = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 7
  %7 = load double, double* %resx, align 8
  %8 = load double, double* %in_width, align 8
  %mul = fmul double %8, %7
  store double %mul, double* %in_width, align 8
  %9 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec7 = getelementptr inbounds %struct.image, %struct.image* %9, i32 0, i32 15
  %10 = load i64, i64* %spec7, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 99)
  %call9 = call i64 @image_spec_value(i64 %10, i64 %call8, i8* null)
  store i64 %call9, i64* %pt_height, align 8
  %11 = load i64, i64* %pt_height, align 8
  %and10 = and i64 %11, 7
  %conv11 = trunc i64 %and10 to i32
  %and12 = and i32 %conv11, -5
  %cmp13 = icmp eq i32 %and12, 2
  br i1 %cmp13, label %cond.true.15, label %cond.false.19

cond.true.15:                                     ; preds = %cond.end
  %12 = load i64, i64* %pt_height, align 8
  %shr16 = ashr i64 %12, 2
  %conv17 = sitofp i64 %shr16 to double
  %div18 = fdiv double %conv17, 7.200000e+01
  br label %cond.end.20

cond.false.19:                                    ; preds = %cond.end
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.19, %cond.true.15
  %cond21 = phi double [ %div18, %cond.true.15 ], [ 0.000000e+00, %cond.false.19 ]
  store double %cond21, double* %in_height, align 8
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %display_info24 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 44
  %15 = load %struct.x_display_info*, %struct.x_display_info** %display_info24, align 8
  %resy = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 8
  %16 = load double, double* %resy, align 8
  %17 = load double, double* %in_height, align 8
  %mul25 = fmul double %17, %16
  store double %mul25, double* %in_height, align 8
  %18 = load double, double* %in_width, align 8
  %cmp26 = fcmp ole double %18, 0x41DFFFFFFFC00000
  br i1 %cmp26, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end.20
  %19 = load double, double* %in_height, align 8
  %cmp28 = fcmp ole double %19, 0x41DFFFFFFFC00000
  br i1 %cmp28, label %land.lhs.true.30, label %if.then

land.lhs.true.30:                                 ; preds = %land.lhs.true
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %21 = load double, double* %in_width, align 8
  %conv31 = fptosi double %21 to i32
  %22 = load double, double* %in_height, align 8
  %conv32 = fptosi double %22 to i32
  %call33 = call zeroext i1 @check_image_size(%struct.frame* %20, i32 %conv31, i32 %conv32)
  br i1 %call33, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.30, %land.lhs.true, %cond.end.20
  call void @image_size_error()
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.30
  %23 = load double, double* %in_width, align 8
  %conv35 = fptosi double %23 to i32
  %24 = load %struct.image*, %struct.image** %img.addr, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %24, i32 0, i32 11
  store i32 %conv35, i32* %width, align 4
  %25 = load double, double* %in_height, align 8
  %conv36 = fptosi double %25 to i32
  %26 = load %struct.image*, %struct.image** %img.addr, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 12
  store i32 %conv36, i32* %height, align 4
  %27 = load %struct.image*, %struct.image** %img.addr, align 8
  %width37 = getelementptr inbounds %struct.image, %struct.image* %27, i32 0, i32 11
  %28 = load i32, i32* %width37, align 4
  %29 = load %struct.image*, %struct.image** %img.addr, align 8
  %height38 = getelementptr inbounds %struct.image, %struct.image* %29, i32 0, i32 12
  %30 = load i32, i32* %height38, align 4
  %call39 = call zeroext i1 @x_check_image_size(%struct._XImage* null, i32 %28, i32 %30)
  br i1 %call39, label %if.then.40, label %if.end.52

if.then.40:                                       ; preds = %if.end
  call void @block_input()
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data41 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x42 = bitcast %union.output_data* %output_data41 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x42, align 8
  %display_info43 = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 44
  %33 = load %struct.x_display_info*, %struct.x_display_info** %display_info43, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %33, i32 0, i32 2
  %34 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %35 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data44 = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 62
  %x45 = bitcast %union.output_data* %output_data44 to %struct.x_output**
  %36 = load %struct.x_output*, %struct.x_output** %x45, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %36, i32 0, i32 9
  %37 = load i64, i64* %window_desc, align 8
  %38 = load %struct.image*, %struct.image** %img.addr, align 8
  %width46 = getelementptr inbounds %struct.image, %struct.image* %38, i32 0, i32 11
  %39 = load i32, i32* %width46, align 4
  %40 = load %struct.image*, %struct.image** %img.addr, align 8
  %height47 = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 12
  %41 = load i32, i32* %height47, align 4
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data48 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 62
  %x49 = bitcast %union.output_data* %output_data48 to %struct.x_output**
  %43 = load %struct.x_output*, %struct.x_output** %x49, align 8
  %display_info50 = getelementptr inbounds %struct.x_output, %struct.x_output* %43, i32 0, i32 44
  %44 = load %struct.x_display_info*, %struct.x_display_info** %display_info50, align 8
  %screen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %44, i32 0, i32 6
  %45 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %root_depth = getelementptr inbounds %struct.Screen, %struct.Screen* %45, i32 0, i32 9
  %46 = load i32, i32* %root_depth, align 4
  %call51 = call i64 @XCreatePixmap(%struct._XDisplay* %34, i64 %37, i32 %39, i32 %41, i32 %46)
  %47 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %47, i32 0, i32 1
  store i64 %call51, i64* %pixmap, align 8
  call void @unblock_input()
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.40, %if.end
  %48 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap53 = getelementptr inbounds %struct.image, %struct.image* %48, i32 0, i32 1
  %49 = load i64, i64* %pixmap53, align 8
  %tobool = icmp ne i64 %49, 0
  br i1 %tobool, label %if.end.56, label %if.then.54

if.then.54:                                       ; preds = %if.end.52
  %50 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec55 = getelementptr inbounds %struct.image, %struct.image* %50, i32 0, i32 15
  %51 = load i64, i64* %spec55, align 8
  call void (i8*, ...) @image_error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.59, i32 0, i32 0), i64 %51)
  store i1 false, i1* %retval
  br label %return

if.end.56:                                        ; preds = %if.end.52
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data57 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 62
  %x58 = bitcast %union.output_data* %output_data57 to %struct.x_output**
  %53 = load %struct.x_output*, %struct.x_output** %x58, align 8
  %window_desc59 = getelementptr inbounds %struct.x_output, %struct.x_output* %53, i32 0, i32 9
  %54 = load i64, i64* %window_desc59, align 8
  store i64 %54, i64* %printnum1, align 8
  %55 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap60 = getelementptr inbounds %struct.image, %struct.image* %55, i32 0, i32 1
  %56 = load i64, i64* %pixmap60, align 8
  store i64 %56, i64* %printnum2, align 8
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %buffer, i32 0, i32 0
  %57 = load i64, i64* %printnum1, align 8
  %58 = load i64, i64* %printnum2, align 8
  %call61 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60, i32 0, i32 0), i64 %57, i64 %58)
  store i64 %call61, i64* %window_and_pixmap_id, align 8
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 78
  %60 = load i64, i64* %foreground_pixel, align 8
  store i64 %60, i64* %printnum1, align 8
  %61 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 77
  %62 = load i64, i64* %background_pixel, align 8
  store i64 %62, i64* %printnum2, align 8
  %arraydecay62 = getelementptr inbounds [22 x i8], [22 x i8]* %buffer, i32 0, i32 0
  %63 = load i64, i64* %printnum1, align 8
  %64 = load i64, i64* %printnum2, align 8
  %call63 = call i64 (i8*, i8*, ...) @make_formatted_string(i8* %arraydecay62, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60, i32 0, i32 0), i64 %63, i64 %64)
  store i64 %call63, i64* %pixel_colors, align 8
  %65 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %66 = bitcast %struct.frame* %65 to i8*
  %call64 = call i64 @make_lisp_ptr(i8* %66, i32 5)
  store i64 %call64, i64* %frame, align 8
  %67 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec65 = getelementptr inbounds %struct.image, %struct.image* %67, i32 0, i32 15
  %68 = load i64, i64* %spec65, align 8
  %call66 = call i64 @builtin_lisp_symbol(i32 76)
  %call67 = call i64 @image_spec_value(i64 %68, i64 %call66, i8* null)
  store i64 %call67, i64* %loader, align 8
  %69 = load i64, i64* %loader, align 8
  %call68 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp69 = icmp eq i64 %69, %call68
  br i1 %cmp69, label %if.then.71, label %if.end.73

if.then.71:                                       ; preds = %if.end.56
  %call72 = call i64 @intern(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61, i32 0, i32 0))
  store i64 %call72, i64* %loader, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.71, %if.end.56
  %70 = load i64, i64* %loader, align 8
  %71 = load i64, i64* %frame, align 8
  %72 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec74 = getelementptr inbounds %struct.image, %struct.image* %72, i32 0, i32 15
  %73 = load i64, i64* %spec74, align 8
  %74 = load %struct.image*, %struct.image** %img.addr, align 8
  %width75 = getelementptr inbounds %struct.image, %struct.image* %74, i32 0, i32 11
  %75 = load i32, i32* %width75, align 4
  %conv76 = sext i32 %75 to i64
  %shl = shl i64 %conv76, 2
  %add = add i64 %shl, 2
  %76 = load %struct.image*, %struct.image** %img.addr, align 8
  %height77 = getelementptr inbounds %struct.image, %struct.image* %76, i32 0, i32 12
  %77 = load i32, i32* %height77, align 4
  %conv78 = sext i32 %77 to i64
  %shl79 = shl i64 %conv78, 2
  %add80 = add i64 %shl79, 2
  %78 = load i64, i64* %window_and_pixmap_id, align 8
  %79 = load i64, i64* %pixel_colors, align 8
  %call81 = call i64 @call6(i64 %70, i64 %71, i64 %73, i64 %add, i64 %add80, i64 %78, i64 %79)
  %80 = load %struct.image*, %struct.image** %img.addr, align 8
  %lisp_data = getelementptr inbounds %struct.image, %struct.image* %80, i32 0, i32 22
  store i64 %call81, i64* %lisp_data, align 8
  %81 = load %struct.image*, %struct.image** %img.addr, align 8
  %lisp_data82 = getelementptr inbounds %struct.image, %struct.image* %81, i32 0, i32 22
  %82 = load i64, i64* %lisp_data82, align 8
  %call83 = call zeroext i1 @PROCESSP(i64 %82)
  store i1 %call83, i1* %retval
  br label %return

return:                                           ; preds = %if.end.73, %if.then.54, %if.then
  %83 = load i1, i1* %retval
  ret i1 %83
}

; Function Attrs: nounwind uwtable
define internal void @gs_clear_image(%struct.frame* %f, %struct.image* %img) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.image*, %struct.image** %img.addr, align 8
  call void @x_clear_image(%struct.frame* %0, %struct.image* %1)
  ret void
}

declare i64 @make_formatted_string(i8*, i8*, ...) #1

declare i64 @make_lisp_ptr(i8*, i32) #1

declare i64 @intern(i8*) #1

declare i64 @call6(i64, i64, i64, i64, i64, i64, i64) #1

declare zeroext i1 @PROCESSP(i64) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind returns_twice "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn }
attributes #12 = { nounwind readnone }
attributes #13 = { nounwind returns_twice }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
