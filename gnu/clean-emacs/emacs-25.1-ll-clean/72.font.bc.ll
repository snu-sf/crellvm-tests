; ModuleID = './src/font.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.charset = type { i32, i64, i32, [15 x i32], i8*, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [190 x i8], i32 }
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct._XGC = type opaque
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%struct.glyph_slice = type { i64 }
%union.anon.1 = type { i32 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.text_pos = type { i64, i64 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.kboard = type opaque
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct._XDisplay = type opaque
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type opaque
%struct.coding_system = type opaque
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.5, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.5 = type { %struct.anon.6 }
%struct.anon.6 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.xwidget = type opaque
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type opaque
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.11, i16, i16, i8*, i8*, i8* }
%union.anon.11 = type { i64 ()* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.table_entry = type { i32, [5 x i8*] }
%struct.Lisp_Symbol = type { i16, i64, %union.anon.12, i64, i64, %struct.Lisp_Symbol* }
%union.anon.12 = type { i64 }
%struct.anon.14 = type { i32, i64 (i64, i64)* }
%struct.font_entity = type { %struct.vectorlike_header, [14 x i64] }
%struct.Lisp_Vector = type { %struct.vectorlike_header, [0 x i64] }
%struct.Lisp_Cons = type { i64, %union.anon.10 }
%union.anon.10 = type { i64 }
%struct.Lisp_Hash_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.hash_table_test, %struct.Lisp_Hash_Table* }
%struct.hash_table_test = type { i64, i64, i64, i1 (%struct.hash_table_test*, i64, i64)*, i64 (%struct.hash_table_test*, i64)* }
%union.Aligned_String = type { %struct.Lisp_String }
%struct.Lisp_String = type { i64, i64, %struct.interval*, i8* }
%struct.anon.13 = type { i32, i32, i32 }
%struct.font_spec = type { %struct.vectorlike_header, [13 x i64] }
%struct.x_output = type { i32, i32, i32, i32, i32, i64, %struct._XGC*, %struct._XGC*, %struct._XGC*, i64, i64, i64, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i8, %struct._GdkGeometry, i64, %struct._GtkTooltip*, %struct._GtkWidget*, %struct._GtkWindow*, i64, %struct.font*, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.XWMHints, %struct.x_display_info*, %union._XEvent*, i8, %struct._XIC*, i64, %struct._XOC*, %struct.relief, %struct.relief, i64, i32, i32, i32 }
%struct._GdkGeometry = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32 }
%struct._GtkTooltip = type opaque
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GdkFont = type { i32, i32, i32 }
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDrawable = type { %struct._GObject }
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._cairo_font_options = type opaque
%struct.XWMHints = type { i64, i32, i32, i64, i64, i32, i32, i64, i64 }
%struct.x_display_info = type { %struct.x_display_info*, %struct.terminal*, %struct._XDisplay*, i32, i64, i32, %struct.Screen*, double, double, %struct.Visual*, i64, i32, i32, i64, i64, i64, i64, i64, i64, void (%struct.frame*, i1)*, %struct._GdkCursor*, %struct._XrmHashBucketRec*, i32, i32, %struct._XGC*, %struct.Mouse_HLInfo, i32, i8*, i32, %struct.x_bitmap_record*, i64, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.scroll_bar*, i64, i32, i32, %struct.XRectangle, i64, i64, %struct._XIM*, %struct.XIMStyles*, %struct.xim_inst_t*, %struct.color_name_cache_entry*, %struct.XColor*, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i64, i64, i64, i64, i64*, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.xcb_connection_t* }
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct._GdkCursor = type { i32, i32 }
%struct._XrmHashBucketRec = type opaque
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.x_bitmap_record = type { i64, i8, i64, i8*, i32, i32, i32, i32 }
%struct.scroll_bar = type { %struct.vectorlike_header, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct._XIM = type opaque
%struct.XIMStyles = type { i16, i64* }
%struct.xim_inst_t = type { %struct.x_display_info*, i8* }
%struct.color_name_cache_entry = type { %struct.color_name_cache_entry*, %struct.XColor, i8* }
%struct.XColor = type { i64, i16, i16, i16, i8, i8 }
%struct.xcb_connection_t = type opaque
%union._XEvent = type { [24 x i64] }
%struct._XIC = type opaque
%struct._XOC = type opaque
%struct.relief = type { %struct._XGC*, i64 }
%struct.font_sort_data = type { i32, i32, i64 }

@globals = external global %struct.emacs_globals, align 8
@font_style_table = internal global i64 0, align 8
@Vcharset_hash_table = external global i64, align 8
@font_charset_alist = internal global i64 0, align 8
@charset_table = external global %struct.charset*, align 8
@.str = private unnamed_addr constant [4 x i8] c"*-*\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"*-\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-*\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"%s%s-*\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"%ld-*\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"*-%.0f\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"%ld-%ld\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"-%s-%s-%s-%s-%s-%s-%s-%s-%s-%s-%s\00", align 1
@sort_shift_bits = internal global [9 x i32] zeroinitializer, align 16
@selected_frame = external global i64, align 8
@scratch_font_spec = internal global i64 0, align 8
@.str.15 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@zero_vector = external global i64, align 8
@charset_work = external global i64, align 8
@Vface_alternative_font_family_alist = external global i64, align 8
@font_driver_list = internal global %struct.font_driver_list* null, align 8
@.str.16 = private unnamed_addr constant [37 x i8] c"Unusable font driver for a frame: %s\00", align 1
@.str.17 = private unnamed_addr constant [27 x i8] c"Duplicated font driver: %s\00", align 1
@num_font_drivers = internal global i32 0, align 4
@.str.18 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"FALSE\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"FcFalse\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"off\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"OFF\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"Off\00", align 1
@current_buffer = external global %struct.buffer*, align 8
@.str.26 = private unnamed_addr constant [16 x i8] c"font-extra-type\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"No value for key `%s'\00", align 1
@.str.28 = private unnamed_addr constant [22 x i8] c"Invalid font name: %s\00", align 1
@.str.29 = private unnamed_addr constant [18 x i8] c"Invalid font name\00", align 1
@.str.30 = private unnamed_addr constant [20 x i8] c"Invalid font object\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"-*-*\00", align 1
@Vframe_list = external global i64, align 8
@.str.32 = private unnamed_addr constant [23 x i8] c"Invalid glyph-string: \00", align 1
@.str.33 = private unnamed_addr constant [54 x i8] c"Specified window is not displaying the current buffer\00", align 1
@Vfont_log_deferred = internal global i64 0, align 8
@.str.34 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.35 = private unnamed_addr constant [2 x i8] c":\00", align 1
@scratch_font_prefer = internal global i64 0, align 8
@Sclear_font_cache = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.11 { i64 ()* @Fclear_font_cache }, i16 0, i16 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.99, i32 0, i32 0), i8* null, i8* null }, align 8
@syms_of_font.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.36 = private unnamed_addr constant [20 x i8] c"font-encoding-alist\00", align 1
@syms_of_font.o_fwd.37 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.38 = private unnamed_addr constant [18 x i8] c"font-weight-table\00", align 1
@weight_table = internal constant [10 x %struct.table_entry] [%struct.table_entry { i32 0, [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.111, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null] }, %struct.table_entry { i32 20, [5 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.112, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 40, [5 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.114, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 50, [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null] }, %struct.table_entry { i32 75, [5 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74, i32 0, i32 0), i8* null] }, %struct.table_entry { i32 100, [5 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i32 0, i32 0), i8* null] }, %struct.table_entry { i32 180, [5 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), i8* null] }, %struct.table_entry { i32 200, [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null] }, %struct.table_entry { i32 205, [5 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.124, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 210, [5 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.62, i32 0, i32 0), i8* null, i8* null] }], align 16
@lispsym = external global [1074 x %struct.Lisp_Symbol], align 8
@syms_of_font.o_fwd.39 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.40 = private unnamed_addr constant [17 x i8] c"font-slant-table\00", align 1
@slant_table = internal constant [5 x %struct.table_entry] [%struct.table_entry { i32 0, [5 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 10, [5 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.130, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 100, [5 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i32 0, i32 0), i8* null, i8* null] }, %struct.table_entry { i32 200, [5 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0), i8* null, i8* null] }, %struct.table_entry { i32 210, [5 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), i8* null, i8* null, i8* null] }], align 16
@syms_of_font.o_fwd.41 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.42 = private unnamed_addr constant [17 x i8] c"font-width-table\00", align 1
@width_table = internal constant [9 x %struct.table_entry] [%struct.table_entry { i32 50, [5 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.136, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 63, [5 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.138, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 75, [5 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.140, i32 0, i32 0), i8* null, i8* null] }, %struct.table_entry { i32 87, [5 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.142, i32 0, i32 0), i8* null, i8* null] }, %struct.table_entry { i32 100, [5 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i32 0, i32 0), i8* null] }, %struct.table_entry { i32 113, [5 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.145, i32 0, i32 0), i8* null, i8* null] }, %struct.table_entry { i32 125, [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.146, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null] }, %struct.table_entry { i32 150, [5 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.148, i32 0, i32 0), i8* null, i8* null, i8* null] }, %struct.table_entry { i32 200, [5 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.151, i32 0, i32 0), i8* null, i8* null] }], align 16
@syms_of_font.o_fwd.43 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.44 = private unnamed_addr constant [9 x i8] c"font-log\00", align 1
@.str.45 = private unnamed_addr constant [15 x i8] c"EMACS_FONT_LOG\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"weight\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"slant\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@font_unparse_fcname.style_names = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0)], align 16
@.str.49 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"-%d\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c":pixelsize=%d\00", align 1
@.str.52 = private unnamed_addr constant [12 x i8] c":foundry=%s\00", align 1
@.str.53 = private unnamed_addr constant [7 x i8] c":%s=%s\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c":dpi=%ld\00", align 1
@.str.55 = private unnamed_addr constant [13 x i8] c":spacing=%ld\00", align 1
@.str.56 = private unnamed_addr constant [15 x i8] c":scalable=true\00", align 1
@.str.57 = private unnamed_addr constant [16 x i8] c":scalable=false\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"light\00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"medium\00", align 1
@.str.60 = private unnamed_addr constant [9 x i8] c"demibold\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"bold\00", align 1
@.str.62 = private unnamed_addr constant [6 x i8] c"black\00", align 1
@.str.63 = private unnamed_addr constant [6 x i8] c"roman\00", align 1
@.str.64 = private unnamed_addr constant [7 x i8] c"italic\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"oblique\00", align 1
@.str.66 = private unnamed_addr constant [9 x i8] c"charcell\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"mono\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"proportional\00", align 1
@.str.69 = private unnamed_addr constant [10 x i8] c"pixelsize\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"Ultra-Light\00", align 1
@.str.71 = private unnamed_addr constant [12 x i8] c"ultra-light\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"Light\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"Book\00", align 1
@.str.74 = private unnamed_addr constant [5 x i8] c"book\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"Medium\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"Semi-Bold\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"semi-bold\00", align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"Bold\00", align 1
@.str.79 = private unnamed_addr constant [7 x i8] c"Italic\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"Oblique\00", align 1
@.str.81 = private unnamed_addr constant [15 x i8] c"Semi-Condensed\00", align 1
@.str.82 = private unnamed_addr constant [15 x i8] c"semi-condensed\00", align 1
@.str.83 = private unnamed_addr constant [10 x i8] c"Condensed\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"condensed\00", align 1
@.str.85 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"match\00", align 1
@font_property_table = internal constant [15 x %struct.anon.14] [%struct.anon.14 { i32 131, i64 (i64, i64)* @font_prop_validate_symbol }, %struct.anon.14 { i32 48, i64 (i64, i64)* @font_prop_validate_symbol }, %struct.anon.14 { i32 40, i64 (i64, i64)* @font_prop_validate_symbol }, %struct.anon.14 { i32 5, i64 (i64, i64)* @font_prop_validate_symbol }, %struct.anon.14 { i32 102, i64 (i64, i64)* @font_prop_validate_symbol }, %struct.anon.14 { i32 138, i64 (i64, i64)* @font_prop_validate_style }, %struct.anon.14 { i32 119, i64 (i64, i64)* @font_prop_validate_style }, %struct.anon.14 { i32 139, i64 (i64, i64)* @font_prop_validate_style }, %struct.anon.14 { i32 118, i64 (i64, i64)* @font_prop_validate_non_neg }, %struct.anon.14 { i32 35, i64 (i64, i64)* @font_prop_validate_non_neg }, %struct.anon.14 { i32 120, i64 (i64, i64)* @font_prop_validate_spacing }, %struct.anon.14 { i32 12, i64 (i64, i64)* @font_prop_validate_non_neg }, %struct.anon.14 { i32 73, i64 (i64, i64)* @font_prop_validate_symbol }, %struct.anon.14 { i32 114, i64 (i64, i64)* @font_prop_validate_symbol }, %struct.anon.14 { i32 89, i64 (i64, i64)* @font_prop_validate_otf }], align 16
@.str.87 = private unnamed_addr constant [22 x i8] c"invalid font property\00", align 1
@.str.88 = private unnamed_addr constant [8 x i8] c"sort-by\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"close\00", align 1
@.str.90 = private unnamed_addr constant [6 x i8] c"fontp\00", align 1
@Sfontp = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffontp }, i16 1, i16 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.91 = private unnamed_addr constant [10 x i8] c"font-spec\00", align 1
@Sfont_spec = internal global { %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64*)* } { i64 (i64, i64*)* @Ffont_spec }, i16 0, i16 -2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.91, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.92 = private unnamed_addr constant [9 x i8] c"font-get\00", align 1
@Sfont_get = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffont_get }, i16 2, i16 2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.92, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.93 = private unnamed_addr constant [21 x i8] c"font-face-attributes\00", align 1
@Sfont_face_attributes = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffont_face_attributes }, i16 1, i16 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.93, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.94 = private unnamed_addr constant [9 x i8] c"font-put\00", align 1
@Sfont_put = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Ffont_put }, i16 3, i16 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.94, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.95 = private unnamed_addr constant [11 x i8] c"list-fonts\00", align 1
@Slist_fonts = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Flist_fonts }, i16 1, i16 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.95, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.96 = private unnamed_addr constant [17 x i8] c"font-family-list\00", align 1
@Sfont_family_list = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ffont_family_list }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.97 = private unnamed_addr constant [10 x i8] c"find-font\00", align 1
@Sfind_font = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffind_font }, i16 1, i16 2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.97, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.98 = private unnamed_addr constant [15 x i8] c"font-xlfd-name\00", align 1
@Sfont_xlfd_name = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffont_xlfd_name }, i16 1, i16 2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.98, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.99 = private unnamed_addr constant [17 x i8] c"clear-font-cache\00", align 1
@.str.100 = private unnamed_addr constant [19 x i8] c"font-shape-gstring\00", align 1
@Sfont_shape_gstring = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ffont_shape_gstring }, i16 1, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.100, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.101 = private unnamed_addr constant [22 x i8] c"font-variation-glyphs\00", align 1
@Sfont_variation_glyphs = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffont_variation_glyphs }, i16 2, i16 2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.101, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.102 = private unnamed_addr constant [19 x i8] c"internal-char-font\00", align 1
@Sinternal_char_font = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Finternal_char_font }, i16 1, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.102, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.103 = private unnamed_addr constant [10 x i8] c"open-font\00", align 1
@Sopen_font = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fopen_font }, i16 1, i16 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.103, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.104 = private unnamed_addr constant [11 x i8] c"close-font\00", align 1
@Sclose_font = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fclose_font }, i16 1, i16 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.104, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.105 = private unnamed_addr constant [11 x i8] c"query-font\00", align 1
@Squery_font = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fquery_font }, i16 1, i16 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.105, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.106 = private unnamed_addr constant [16 x i8] c"font-get-glyphs\00", align 1
@Sfont_get_glyphs = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Ffont_get_glyphs }, i16 3, i16 4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.106, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.107 = private unnamed_addr constant [13 x i8] c"font-match-p\00", align 1
@Sfont_match_p = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffont_match_p }, i16 2, i16 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.107, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.108 = private unnamed_addr constant [8 x i8] c"font-at\00", align 1
@Sfont_at = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Ffont_at }, i16 1, i16 3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.109 = private unnamed_addr constant [17 x i8] c"frame-font-cache\00", align 1
@Sframe_font_cache = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fframe_font_cache }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.109, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.110 = private unnamed_addr constant [10 x i8] c"font-info\00", align 1
@Sfont_info = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Ffont_info }, i16 1, i16 2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.110, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.111 = private unnamed_addr constant [5 x i8] c"thin\00", align 1
@.str.112 = private unnamed_addr constant [11 x i8] c"ultralight\00", align 1
@.str.113 = private unnamed_addr constant [12 x i8] c"extra-light\00", align 1
@.str.114 = private unnamed_addr constant [11 x i8] c"extralight\00", align 1
@.str.115 = private unnamed_addr constant [11 x i8] c"semi-light\00", align 1
@.str.116 = private unnamed_addr constant [10 x i8] c"semilight\00", align 1
@.str.117 = private unnamed_addr constant [10 x i8] c"demilight\00", align 1
@.str.118 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.119 = private unnamed_addr constant [8 x i8] c"regular\00", align 1
@.str.120 = private unnamed_addr constant [12 x i8] c"unspecified\00", align 1
@.str.121 = private unnamed_addr constant [9 x i8] c"semibold\00", align 1
@.str.122 = private unnamed_addr constant [5 x i8] c"demi\00", align 1
@.str.123 = private unnamed_addr constant [11 x i8] c"extra-bold\00", align 1
@.str.124 = private unnamed_addr constant [10 x i8] c"extrabold\00", align 1
@.str.125 = private unnamed_addr constant [11 x i8] c"ultra-bold\00", align 1
@.str.126 = private unnamed_addr constant [10 x i8] c"ultrabold\00", align 1
@.str.127 = private unnamed_addr constant [16 x i8] c"reverse-oblique\00", align 1
@.str.128 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.129 = private unnamed_addr constant [15 x i8] c"reverse-italic\00", align 1
@.str.130 = private unnamed_addr constant [3 x i8] c"ri\00", align 1
@.str.131 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.132 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@.str.133 = private unnamed_addr constant [3 x i8] c"ot\00", align 1
@.str.134 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str.135 = private unnamed_addr constant [16 x i8] c"ultra-condensed\00", align 1
@.str.136 = private unnamed_addr constant [15 x i8] c"ultracondensed\00", align 1
@.str.137 = private unnamed_addr constant [16 x i8] c"extra-condensed\00", align 1
@.str.138 = private unnamed_addr constant [15 x i8] c"extracondensed\00", align 1
@.str.139 = private unnamed_addr constant [11 x i8] c"compressed\00", align 1
@.str.140 = private unnamed_addr constant [7 x i8] c"narrow\00", align 1
@.str.141 = private unnamed_addr constant [14 x i8] c"semicondensed\00", align 1
@.str.142 = private unnamed_addr constant [14 x i8] c"demicondensed\00", align 1
@.str.143 = private unnamed_addr constant [14 x i8] c"semi-expanded\00", align 1
@.str.144 = private unnamed_addr constant [13 x i8] c"semiexpanded\00", align 1
@.str.145 = private unnamed_addr constant [13 x i8] c"demiexpanded\00", align 1
@.str.146 = private unnamed_addr constant [9 x i8] c"expanded\00", align 1
@.str.147 = private unnamed_addr constant [15 x i8] c"extra-expanded\00", align 1
@.str.148 = private unnamed_addr constant [14 x i8] c"extraexpanded\00", align 1
@.str.149 = private unnamed_addr constant [15 x i8] c"ultra-expanded\00", align 1
@.str.150 = private unnamed_addr constant [14 x i8] c"ultraexpanded\00", align 1
@.str.151 = private unnamed_addr constant [5 x i8] c"wide\00", align 1

; Function Attrs: nounwind uwtable
define i64 @font_make_entity() #0 {
entry:
  %font_entity = alloca i64, align 8
  %entity = alloca %struct.font_entity*, align 8
  %call = call %struct.Lisp_Vector* @allocate_pseudovector(i32 14, i32 14, i32 14, i32 17)
  %0 = bitcast %struct.Lisp_Vector* %call to %struct.font_entity*
  store %struct.font_entity* %0, %struct.font_entity** %entity, align 8
  %1 = load %struct.font_entity*, %struct.font_entity** %entity, align 8
  %2 = bitcast %struct.font_entity* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %font_entity, align 8
  %3 = load i64, i64* %font_entity, align 8
  ret i64 %3
}

declare %struct.Lisp_Vector* @allocate_pseudovector(i32, i32, i32, i32) #1

declare i64 @make_lisp_ptr(i8*, i32) #1

; Function Attrs: nounwind uwtable
define i64 @font_make_object(i32 %size, i64 %entity, i32 %pixelsize) #0 {
entry:
  %size.addr = alloca i32, align 4
  %entity.addr = alloca i64, align 8
  %pixelsize.addr = alloca i32, align 4
  %font_object = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  %i = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i64 %entity, i64* %entity.addr, align 8
  store i32 %pixelsize, i32* %pixelsize.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %call = call %struct.Lisp_Vector* @allocate_pseudovector(i32 %0, i32 17, i32 17, i32 17)
  %1 = bitcast %struct.Lisp_Vector* %call to %struct.font*
  store %struct.font* %1, %struct.font** %font, align 8
  %2 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %2, i32 0, i32 18
  store %struct.font_driver* null, %struct.font_driver** %driver, align 8
  %3 = load %struct.font*, %struct.font** %font, align 8
  %4 = bitcast %struct.font* %3 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %4, i32 5)
  store i64 %call1, i64* %font_object, align 8
  %5 = load i64, i64* %entity.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call2
  br i1 %cmp, label %if.end.14, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %6, 13
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %entity.addr, align 8
  %8 = load i32, i32* %i, align 4
  %conv = sext i32 %8 to i64
  %call4 = call i64 @AREF(i64 %7, i64 %conv)
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct.font*, %struct.font** %font, align 8
  %props = getelementptr inbounds %struct.font, %struct.font* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [17 x i64], [17 x i64]* %props, i32 0, i64 %idxprom
  store i64 %call4, i64* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i64, i64* %entity.addr, align 8
  %call5 = call i64 @AREF(i64 %12, i64 12)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %call5, %call6
  br i1 %cmp7, label %if.end, label %if.then.9

if.then.9:                                        ; preds = %for.end
  %13 = load i64, i64* %entity.addr, align 8
  %call10 = call i64 @AREF(i64 %13, i64 12)
  %call11 = call i64 @Fcopy_alist(i64 %call10)
  %14 = load %struct.font*, %struct.font** %font, align 8
  %props12 = getelementptr inbounds %struct.font, %struct.font* %14, i32 0, i32 1
  %arrayidx13 = getelementptr inbounds [17 x i64], [17 x i64]* %props12, i32 0, i64 12
  store i64 %call11, i64* %arrayidx13, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.9, %for.end
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %entry
  %15 = load i32, i32* %size.addr, align 4
  %cmp15 = icmp sgt i32 %15, 0
  br i1 %cmp15, label %if.then.17, label %if.end.21

if.then.17:                                       ; preds = %if.end.14
  %16 = load i32, i32* %pixelsize.addr, align 4
  %conv18 = sext i32 %16 to i64
  %shl = shl i64 %conv18, 2
  %add = add i64 %shl, 2
  %17 = load %struct.font*, %struct.font** %font, align 8
  %props19 = getelementptr inbounds %struct.font, %struct.font* %17, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [17 x i64], [17 x i64]* %props19, i32 0, i64 8
  store i64 %add, i64* %arrayidx20, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.17, %if.end.14
  %18 = load i64, i64* %font_object, align 8
  ret i64 %18
}

declare i64 @builtin_lisp_symbol(i32) #1

declare i64 @AREF(i64, i64) #1

declare i64 @Fcopy_alist(i64) #1

; Function Attrs: nounwind uwtable
define i64 @font_build_object(i32 %vectorsize, i64 %type, i64 %entity, double %pixelsize) #0 {
entry:
  %vectorsize.addr = alloca i32, align 4
  %type.addr = alloca i64, align 8
  %entity.addr = alloca i64, align 8
  %pixelsize.addr = alloca double, align 8
  %len = alloca i32, align 4
  %name = alloca [256 x i8], align 16
  %font_object = alloca i64, align 8
  store i32 %vectorsize, i32* %vectorsize.addr, align 4
  store i64 %type, i64* %type.addr, align 8
  store i64 %entity, i64* %entity.addr, align 8
  store double %pixelsize, double* %pixelsize.addr, align 8
  %0 = load i32, i32* %vectorsize.addr, align 4
  %1 = load i64, i64* %entity.addr, align 8
  %2 = load double, double* %pixelsize.addr, align 8
  %conv = fptosi double %2 to i32
  %call = call i64 @font_make_object(i32 %0, i64 %1, i32 %conv)
  store i64 %call, i64* %font_object, align 8
  %3 = load i64, i64* %font_object, align 8
  %4 = load i64, i64* %type.addr, align 8
  call void @ASET(i64 %3, i64 0, i64 %4)
  %5 = load i64, i64* %entity.addr, align 8
  %6 = load double, double* %pixelsize.addr, align 8
  %conv1 = fptosi double %6 to i32
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %call2 = call i64 @font_unparse_xlfd(i64 %5, i32 %conv1, i8* %arraydecay, i32 256)
  %conv3 = trunc i64 %call2 to i32
  store i32 %conv3, i32* %len, align 4
  %7 = load i32, i32* %len, align 4
  %cmp = icmp sgt i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %font_object, align 8
  %arraydecay5 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %9 = load i32, i32* %len, align 4
  %conv6 = sext i32 %9 to i64
  %call7 = call i64 @make_string(i8* %arraydecay5, i64 %conv6)
  call void @ASET(i64 %8, i64 14, i64 %call7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i64, i64* %entity.addr, align 8
  %11 = load double, double* %pixelsize.addr, align 8
  %conv8 = fptosi double %11 to i32
  %arraydecay9 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %call10 = call i32 @font_unparse_fcname(i64 %10, i32 %conv8, i8* %arraydecay9, i32 256)
  store i32 %call10, i32* %len, align 4
  %12 = load i32, i32* %len, align 4
  %cmp11 = icmp sgt i32 %12, 0
  br i1 %cmp11, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.end
  %13 = load i64, i64* %font_object, align 8
  %arraydecay14 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %14 = load i32, i32* %len, align 4
  %conv15 = sext i32 %14 to i64
  %call16 = call i64 @make_string(i8* %arraydecay14, i64 %conv15)
  call void @ASET(i64 %13, i64 15, i64 %call16)
  br label %if.end.18

if.else:                                          ; preds = %if.end
  %15 = load i64, i64* %font_object, align 8
  %16 = load i64, i64* %font_object, align 8
  %call17 = call i64 @AREF(i64 %16, i64 14)
  call void @ASET(i64 %15, i64 15, i64 %call17)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.13
  %17 = load i64, i64* %font_object, align 8
  ret i64 %17
}

declare void @ASET(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @font_unparse_xlfd(i64 %font, i32 %pixel_size, i8* %name, i32 %nbytes) #0 {
entry:
  %retval = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %pixel_size.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %nbytes.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  %f = alloca [13 x i8*], align 16
  %val = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %alloc = alloca i64, align 8
  %c = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %alloc65 = alloca i64, align 8
  %font_size_index_buf = alloca [313 x i8], align 16
  %v = alloca i64, align 8
  %v135 = alloca double, align 8
  %dpi_index_buf = alloca [42 x i8], align 16
  %v151 = alloca i64, align 8
  %spacing = alloca i64, align 8
  %avgwidth_index_buf = alloca [21 x i8], align 16
  store i64 %font, i64* %font.addr, align 8
  store i32 %pixel_size, i32* %pixel_size.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp eq i32 %1, 3
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 5, i32* %j, align 4
  br label %if.end.4

if.else:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp eq i32 %2, 4
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.else
  store i32 12, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.else
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then
  %3 = load i64, i64* %font.addr, align 8
  %4 = load i32, i32* %i, align 4
  %conv = sext i32 %4 to i64
  %call = call i64 @AREF(i64 %3, i64 %conv)
  store i64 %call, i64* %val, align 8
  %5 = load i64, i64* %val, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %5, %call5
  br i1 %cmp6, label %if.then.8, label %if.else.16

if.then.8:                                        ; preds = %if.end.4
  %6 = load i32, i32* %j, align 4
  %cmp9 = icmp eq i32 %6, 12
  br i1 %cmp9, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %if.then.8
  %7 = load i32, i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 %idxprom
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8** %arrayidx, align 8
  br label %if.end.15

if.else.12:                                       ; preds = %if.then.8
  %8 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %8 to i64
  %arrayidx14 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 %idxprom13
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.12, %if.then.11
  br label %if.end.51

if.else.16:                                       ; preds = %if.end.4
  %9 = load i64, i64* %val, align 8
  %and = and i64 %9, 7
  %conv17 = trunc i64 %and to i32
  %cmp18 = icmp eq i32 %conv17, 0
  br i1 %cmp18, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %if.else.16
  %10 = load i64, i64* %val, align 8
  %call21 = call i64 @SYMBOL_NAME(i64 %10)
  store i64 %call21, i64* %val, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.20, %if.else.16
  %11 = load i32, i32* %j, align 4
  %cmp23 = icmp eq i32 %11, 12
  br i1 %cmp23, label %land.lhs.true, label %if.else.46

land.lhs.true:                                    ; preds = %if.end.22
  %12 = load i64, i64* %val, align 8
  %call25 = call i8* @SSDATA(i64 %12)
  %call26 = call i8* @strchr(i8* %call25, i32 45) #6
  %tobool = icmp ne i8* %call26, null
  br i1 %tobool, label %if.else.46, label %if.then.27

if.then.27:                                       ; preds = %land.lhs.true
  %13 = load i64, i64* %val, align 8
  %call28 = call i64 @SBYTES(i64 %13)
  %add = add nsw i64 %call28, 4
  store i64 %add, i64* %alloc, align 8
  %14 = load i32, i32* %nbytes.addr, align 4
  %conv29 = sext i32 %14 to i64
  %15 = load i64, i64* %alloc, align 8
  %cmp30 = icmp sle i64 %conv29, %15
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.27
  store i64 -1, i64* %retval
  br label %return

if.end.33:                                        ; preds = %if.then.27
  %16 = load i64, i64* %alloc, align 8
  %17 = alloca i8, i64 %16
  store i8* %17, i8** %p, align 8
  %18 = load i32, i32* %j, align 4
  %idxprom34 = sext i32 %18 to i64
  %arrayidx35 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 %idxprom34
  store i8* %17, i8** %arrayidx35, align 8
  %19 = load i8*, i8** %p, align 8
  %20 = load i64, i64* %val, align 8
  %call36 = call i8* @SDATA(i64 %20)
  %21 = load i64, i64* %val, align 8
  %call37 = call i64 @SBYTES(i64 %21)
  %sub = sub nsw i64 %call37, 1
  %22 = load i64, i64* %val, align 8
  %call38 = call i8* @SDATA(i64 %22)
  %arrayidx39 = getelementptr inbounds i8, i8* %call38, i64 %sub
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %cmp41 = icmp eq i32 %conv40, 42
  %conv42 = zext i1 %cmp41 to i32
  %idxprom43 = sext i32 %conv42 to i64
  %arrayidx44 = getelementptr inbounds [2 x i8], [2 x i8]* @.str.4, i32 0, i64 %idxprom43
  %call45 = call i32 (i8*, i8*, ...) @sprintf(i8* %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* %call36, i8* %arrayidx44) #5
  br label %if.end.50

if.else.46:                                       ; preds = %land.lhs.true, %if.end.22
  %24 = load i64, i64* %val, align 8
  %call47 = call i8* @SSDATA(i64 %24)
  %25 = load i32, i32* %j, align 4
  %idxprom48 = sext i32 %25 to i64
  %arrayidx49 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 %idxprom48
  store i8* %call47, i8** %arrayidx49, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.46, %if.end.33
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.end.15
  br label %for.inc

for.inc:                                          ; preds = %if.end.51
  %26 = load i32, i32* %i, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4
  %27 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %27, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 5, i32* %i, align 4
  store i32 2, i32* %j, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.105, %for.end
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp sle i32 %28, 7
  br i1 %cmp54, label %for.body.56, label %for.end.108

for.body.56:                                      ; preds = %for.cond.53
  %29 = load i64, i64* %font.addr, align 8
  %30 = load i32, i32* %i, align 4
  %call57 = call i64 @font_style_symbolic(i64 %29, i32 %30, i1 zeroext false)
  store i64 %call57, i64* %val, align 8
  %31 = load i64, i64* %val, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %31, %call58
  br i1 %cmp59, label %if.then.61, label %if.else.64

if.then.61:                                       ; preds = %for.body.56
  %32 = load i32, i32* %j, align 4
  %idxprom62 = sext i32 %32 to i64
  %arrayidx63 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 %idxprom62
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx63, align 8
  br label %if.end.104

if.else.64:                                       ; preds = %for.body.56
  %33 = load i64, i64* %val, align 8
  %call66 = call i64 @SYMBOL_NAME(i64 %33)
  store i64 %call66, i64* %val, align 8
  %34 = load i64, i64* %val, align 8
  %call67 = call i64 @SBYTES(i64 %34)
  %add68 = add nsw i64 %call67, 1
  store i64 %add68, i64* %alloc65, align 8
  %35 = load i32, i32* %nbytes.addr, align 4
  %conv69 = sext i32 %35 to i64
  %36 = load i64, i64* %alloc65, align 8
  %cmp70 = icmp sle i64 %conv69, %36
  br i1 %cmp70, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.else.64
  store i64 -1, i64* %retval
  br label %return

if.end.73:                                        ; preds = %if.else.64
  %37 = load i64, i64* %alloc65, align 8
  %38 = alloca i8, i64 %37
  store i8* %38, i8** %p, align 8
  %39 = load i32, i32* %j, align 4
  %idxprom74 = sext i32 %39 to i64
  %arrayidx75 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 %idxprom74
  store i8* %38, i8** %arrayidx75, align 8
  store i32 0, i32* %l, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.76

for.cond.76:                                      ; preds = %for.inc.101, %if.end.73
  %40 = load i32, i32* %k, align 4
  %conv77 = sext i32 %40 to i64
  %41 = load i64, i64* %alloc65, align 8
  %cmp78 = icmp slt i64 %conv77, %41
  br i1 %cmp78, label %for.body.80, label %for.end.103

for.body.80:                                      ; preds = %for.cond.76
  %42 = load i64, i64* %val, align 8
  %43 = load i32, i32* %k, align 4
  %conv81 = sext i32 %43 to i64
  %call82 = call zeroext i8 @SREF(i64 %42, i64 %conv81)
  %conv83 = zext i8 %call82 to i32
  store i32 %conv83, i32* %c, align 4
  %44 = load i32, i32* %c, align 4
  %cmp84 = icmp ne i32 %44, 45
  br i1 %cmp84, label %land.lhs.true.86, label %if.end.100

land.lhs.true.86:                                 ; preds = %for.body.80
  %45 = load i32, i32* %c, align 4
  %cmp87 = icmp ne i32 %45, 63
  br i1 %cmp87, label %land.lhs.true.89, label %if.end.100

land.lhs.true.89:                                 ; preds = %land.lhs.true.86
  %46 = load i32, i32* %c, align 4
  %cmp90 = icmp ne i32 %46, 44
  br i1 %cmp90, label %land.lhs.true.92, label %if.end.100

land.lhs.true.92:                                 ; preds = %land.lhs.true.89
  %47 = load i32, i32* %c, align 4
  %cmp93 = icmp ne i32 %47, 34
  br i1 %cmp93, label %if.then.95, label %if.end.100

if.then.95:                                       ; preds = %land.lhs.true.92
  %48 = load i32, i32* %c, align 4
  %conv96 = trunc i32 %48 to i8
  %49 = load i32, i32* %l, align 4
  %inc97 = add nsw i32 %49, 1
  store i32 %inc97, i32* %l, align 4
  %idxprom98 = sext i32 %49 to i64
  %50 = load i8*, i8** %p, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %50, i64 %idxprom98
  store i8 %conv96, i8* %arrayidx99, align 1
  br label %if.end.100

if.end.100:                                       ; preds = %if.then.95, %land.lhs.true.92, %land.lhs.true.89, %land.lhs.true.86, %for.body.80
  br label %for.inc.101

for.inc.101:                                      ; preds = %if.end.100
  %51 = load i32, i32* %k, align 4
  %inc102 = add nsw i32 %51, 1
  store i32 %inc102, i32* %k, align 4
  br label %for.cond.76

for.end.103:                                      ; preds = %for.cond.76
  br label %if.end.104

if.end.104:                                       ; preds = %for.end.103, %if.then.61
  br label %for.inc.105

for.inc.105:                                      ; preds = %if.end.104
  %52 = load i32, i32* %i, align 4
  %inc106 = add nsw i32 %52, 1
  store i32 %inc106, i32* %i, align 4
  %53 = load i32, i32* %j, align 4
  %inc107 = add nsw i32 %53, 1
  store i32 %inc107, i32* %j, align 4
  br label %for.cond.53

for.end.108:                                      ; preds = %for.cond.53
  %54 = load i64, i64* %font.addr, align 8
  %call109 = call i64 @AREF(i64 %54, i64 8)
  store i64 %call109, i64* %val, align 8
  %55 = load i64, i64* %val, align 8
  %and110 = and i64 %55, 7
  %conv111 = trunc i64 %and110 to i32
  %and112 = and i32 %conv111, -5
  %cmp113 = icmp eq i32 %and112, 2
  br i1 %cmp113, label %if.then.115, label %if.else.129

if.then.115:                                      ; preds = %for.end.108
  %56 = load i64, i64* %val, align 8
  %shr = ashr i64 %56, 2
  store i64 %shr, i64* %v, align 8
  %57 = load i64, i64* %v, align 8
  %cmp116 = icmp sle i64 %57, 0
  br i1 %cmp116, label %if.then.118, label %if.end.120

if.then.118:                                      ; preds = %if.then.115
  %58 = load i32, i32* %pixel_size.addr, align 4
  %conv119 = sext i32 %58 to i64
  store i64 %conv119, i64* %v, align 8
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.118, %if.then.115
  %59 = load i64, i64* %v, align 8
  %cmp121 = icmp sgt i64 %59, 0
  br i1 %cmp121, label %if.then.123, label %if.else.126

if.then.123:                                      ; preds = %if.end.120
  %arraydecay = getelementptr inbounds [313 x i8], [313 x i8]* %font_size_index_buf, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8
  %arrayidx124 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 6
  store i8* %arraydecay, i8** %arrayidx124, align 8
  %60 = load i8*, i8** %p, align 8
  %61 = load i64, i64* %v, align 8
  %call125 = call i32 (i8*, i8*, ...) @sprintf(i8* %60, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i64 %61) #5
  br label %if.end.128

if.else.126:                                      ; preds = %if.end.120
  %arrayidx127 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 6
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8** %arrayidx127, align 8
  br label %if.end.128

if.end.128:                                       ; preds = %if.else.126, %if.then.123
  br label %if.end.143

if.else.129:                                      ; preds = %for.end.108
  %62 = load i64, i64* %val, align 8
  %and130 = and i64 %62, 7
  %conv131 = trunc i64 %and130 to i32
  %cmp132 = icmp eq i32 %conv131, 7
  br i1 %cmp132, label %if.then.134, label %if.else.140

if.then.134:                                      ; preds = %if.else.129
  %63 = load i64, i64* %val, align 8
  %call136 = call double @XFLOAT_DATA(i64 %63)
  %mul = fmul double %call136, 1.000000e+01
  store double %mul, double* %v135, align 8
  %arraydecay137 = getelementptr inbounds [313 x i8], [313 x i8]* %font_size_index_buf, i32 0, i32 0
  store i8* %arraydecay137, i8** %p, align 8
  %arrayidx138 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 6
  store i8* %arraydecay137, i8** %arrayidx138, align 8
  %64 = load i8*, i8** %p, align 8
  %65 = load double, double* %v135, align 8
  %call139 = call i32 (i8*, i8*, ...) @sprintf(i8* %64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), double %65) #5
  br label %if.end.142

if.else.140:                                      ; preds = %if.else.129
  %arrayidx141 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 6
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8** %arrayidx141, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %if.else.140, %if.then.134
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %if.end.128
  %66 = load i64, i64* %font.addr, align 8
  %call144 = call i64 @AREF(i64 %66, i64 9)
  %and145 = and i64 %call144, 7
  %conv146 = trunc i64 %and145 to i32
  %and147 = and i32 %conv146, -5
  %cmp148 = icmp eq i32 %and147, 2
  br i1 %cmp148, label %if.then.150, label %if.else.157

if.then.150:                                      ; preds = %if.end.143
  %67 = load i64, i64* %font.addr, align 8
  %call152 = call i64 @AREF(i64 %67, i64 9)
  %shr153 = ashr i64 %call152, 2
  store i64 %shr153, i64* %v151, align 8
  %arraydecay154 = getelementptr inbounds [42 x i8], [42 x i8]* %dpi_index_buf, i32 0, i32 0
  store i8* %arraydecay154, i8** %p, align 8
  %arrayidx155 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 8
  store i8* %arraydecay154, i8** %arrayidx155, align 8
  %68 = load i8*, i8** %p, align 8
  %69 = load i64, i64* %v151, align 8
  %70 = load i64, i64* %v151, align 8
  %call156 = call i32 (i8*, i8*, ...) @sprintf(i8* %68, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i64 %69, i64 %70) #5
  br label %if.end.159

if.else.157:                                      ; preds = %if.end.143
  %arrayidx158 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8** %arrayidx158, align 8
  br label %if.end.159

if.end.159:                                       ; preds = %if.else.157, %if.then.150
  %71 = load i64, i64* %font.addr, align 8
  %call160 = call i64 @AREF(i64 %71, i64 10)
  %and161 = and i64 %call160, 7
  %conv162 = trunc i64 %and161 to i32
  %and163 = and i32 %conv162, -5
  %cmp164 = icmp eq i32 %and163, 2
  br i1 %cmp164, label %if.then.166, label %if.else.181

if.then.166:                                      ; preds = %if.end.159
  %72 = load i64, i64* %font.addr, align 8
  %call167 = call i64 @AREF(i64 %72, i64 10)
  %shr168 = ashr i64 %call167, 2
  store i64 %shr168, i64* %spacing, align 8
  %73 = load i64, i64* %spacing, align 8
  %cmp169 = icmp sle i64 %73, 0
  br i1 %cmp169, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.166
  br label %cond.end.178

cond.false:                                       ; preds = %if.then.166
  %74 = load i64, i64* %spacing, align 8
  %cmp171 = icmp sle i64 %74, 90
  br i1 %cmp171, label %cond.true.173, label %cond.false.174

cond.true.173:                                    ; preds = %cond.false
  br label %cond.end

cond.false.174:                                   ; preds = %cond.false
  %75 = load i64, i64* %spacing, align 8
  %cmp175 = icmp sle i64 %75, 100
  %cond = select i1 %cmp175, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.174, %cond.true.173
  %cond177 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), %cond.true.173 ], [ %cond, %cond.false.174 ]
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.end, %cond.true
  %cond179 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0), %cond.true ], [ %cond177, %cond.end ]
  %arrayidx180 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 10
  store i8* %cond179, i8** %arrayidx180, align 8
  br label %if.end.183

if.else.181:                                      ; preds = %if.end.159
  %arrayidx182 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 10
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx182, align 8
  br label %if.end.183

if.end.183:                                       ; preds = %if.else.181, %cond.end.178
  %76 = load i64, i64* %font.addr, align 8
  %call184 = call i64 @AREF(i64 %76, i64 11)
  %and185 = and i64 %call184, 7
  %conv186 = trunc i64 %and185 to i32
  %and187 = and i32 %conv186, -5
  %cmp188 = icmp eq i32 %and187, 2
  br i1 %cmp188, label %if.then.190, label %if.else.196

if.then.190:                                      ; preds = %if.end.183
  %arraydecay191 = getelementptr inbounds [21 x i8], [21 x i8]* %avgwidth_index_buf, i32 0, i32 0
  store i8* %arraydecay191, i8** %p, align 8
  %arrayidx192 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 11
  store i8* %arraydecay191, i8** %arrayidx192, align 8
  %77 = load i8*, i8** %p, align 8
  %78 = load i64, i64* %font.addr, align 8
  %call193 = call i64 @AREF(i64 %78, i64 11)
  %shr194 = ashr i64 %call193, 2
  %call195 = call i32 (i8*, i8*, ...) @sprintf(i8* %77, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i64 %shr194) #5
  br label %if.end.198

if.else.196:                                      ; preds = %if.end.183
  %arrayidx197 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 11
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx197, align 8
  br label %if.end.198

if.end.198:                                       ; preds = %if.else.196, %if.then.190
  %79 = load i8*, i8** %name.addr, align 8
  %80 = load i32, i32* %nbytes.addr, align 4
  %conv199 = sext i32 %80 to i64
  %arrayidx200 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 0
  %81 = load i8*, i8** %arrayidx200, align 8
  %arrayidx201 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 1
  %82 = load i8*, i8** %arrayidx201, align 8
  %arrayidx202 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 2
  %83 = load i8*, i8** %arrayidx202, align 8
  %arrayidx203 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 3
  %84 = load i8*, i8** %arrayidx203, align 8
  %arrayidx204 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 4
  %85 = load i8*, i8** %arrayidx204, align 8
  %arrayidx205 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 5
  %86 = load i8*, i8** %arrayidx205, align 8
  %arrayidx206 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 6
  %87 = load i8*, i8** %arrayidx206, align 8
  %arrayidx207 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 8
  %88 = load i8*, i8** %arrayidx207, align 8
  %arrayidx208 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 10
  %89 = load i8*, i8** %arrayidx208, align 8
  %arrayidx209 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 11
  %90 = load i8*, i8** %arrayidx209, align 8
  %arrayidx210 = getelementptr inbounds [13 x i8*], [13 x i8*]* %f, i32 0, i64 12
  %91 = load i8*, i8** %arrayidx210, align 8
  %call211 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %79, i64 %conv199, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i32 0, i32 0), i8* %81, i8* %82, i8* %83, i8* %84, i8* %85, i8* %86, i8* %87, i8* %88, i8* %89, i8* %90, i8* %91) #5
  store i32 %call211, i32* %len, align 4
  %92 = load i32, i32* %len, align 4
  %93 = load i32, i32* %nbytes.addr, align 4
  %cmp212 = icmp slt i32 %92, %93
  br i1 %cmp212, label %cond.true.214, label %cond.false.215

cond.true.214:                                    ; preds = %if.end.198
  %94 = load i32, i32* %len, align 4
  br label %cond.end.216

cond.false.215:                                   ; preds = %if.end.198
  br label %cond.end.216

cond.end.216:                                     ; preds = %cond.false.215, %cond.true.214
  %cond217 = phi i32 [ %94, %cond.true.214 ], [ -1, %cond.false.215 ]
  %conv218 = sext i32 %cond217 to i64
  store i64 %conv218, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.216, %if.then.72, %if.then.32
  %95 = load i64, i64* %retval
  ret i64 %95
}

declare i64 @make_string(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @font_unparse_fcname(i64 %font, i32 %pixel_size, i8* %name, i32 %nbytes) #0 {
entry:
  %retval = alloca i32, align 4
  %font.addr = alloca i64, align 8
  %pixel_size.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %nbytes.addr = alloca i32, align 4
  %family = alloca i64, align 8
  %foundry = alloca i64, align 8
  %val = alloca i64, align 8
  %point_size = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %lim = alloca i8*, align 8
  %styles = alloca [3 x i64], align 16
  %style_names = alloca [3 x i8*], align 16
  %len = alloca i32, align 4
  %len65 = alloca i32, align 4
  %len91 = alloca i32, align 4
  %len116 = alloca i32, align 4
  %len148 = alloca i32, align 4
  %len183 = alloca i32, align 4
  %len211 = alloca i32, align 4
  %len239 = alloca i32, align 4
  store i64 %font, i64* %font.addr, align 8
  store i32 %pixel_size, i32* %pixel_size.addr, align 4
  store i8* %name, i8** %name.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  %0 = bitcast [3 x i8*]* %style_names to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([3 x i8*]* @font_unparse_fcname.style_names to i8*), i64 24, i32 16, i1 false)
  %1 = load i64, i64* %font.addr, align 8
  %call = call i64 @AREF(i64 %1, i64 2)
  store i64 %call, i64* %family, align 8
  %2 = load i64, i64* %family, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.end.7, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %family, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %4 = load i64, i64* %family, align 8
  %call5 = call i64 @SYMBOL_NAME(i64 %4)
  store i64 %call5, i64* %family, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call6, i64* %family, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %entry
  %5 = load i64, i64* %font.addr, align 8
  %call8 = call i64 @AREF(i64 %5, i64 8)
  store i64 %call8, i64* %val, align 8
  %6 = load i64, i64* %val, align 8
  %and9 = and i64 %6, 7
  %conv10 = trunc i64 %and9 to i32
  %and11 = and i32 %conv10, -5
  %cmp12 = icmp eq i32 %and11, 2
  br i1 %cmp12, label %if.then.14, label %if.else.21

if.then.14:                                       ; preds = %if.end.7
  %7 = load i64, i64* %val, align 8
  %shr = ashr i64 %7, 2
  %cmp15 = icmp ne i64 %shr, 0
  br i1 %cmp15, label %if.then.17, label %if.end.20

if.then.17:                                       ; preds = %if.then.14
  %8 = load i64, i64* %val, align 8
  %shr18 = ashr i64 %8, 2
  %conv19 = trunc i64 %shr18 to i32
  store i32 %conv19, i32* %pixel_size.addr, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %if.then.14
  store i32 -1, i32* %point_size, align 4
  br label %if.end.24

if.else.21:                                       ; preds = %if.end.7
  store i32 -1, i32* %pixel_size.addr, align 4
  %9 = load i64, i64* %val, align 8
  %call22 = call double @XFLOAT_DATA(i64 %9)
  %conv23 = fptosi double %call22 to i32
  store i32 %conv23, i32* %point_size, align 4
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.end.20
  %10 = load i64, i64* %font.addr, align 8
  %call25 = call i64 @AREF(i64 %10, i64 1)
  store i64 %call25, i64* %foundry, align 8
  %11 = load i64, i64* %foundry, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp27 = icmp eq i64 %11, %call26
  br i1 %cmp27, label %if.end.39, label %if.then.29

if.then.29:                                       ; preds = %if.end.24
  %12 = load i64, i64* %foundry, align 8
  %and30 = and i64 %12, 7
  %conv31 = trunc i64 %and30 to i32
  %cmp32 = icmp eq i32 %conv31, 0
  br i1 %cmp32, label %if.then.34, label %if.else.36

if.then.34:                                       ; preds = %if.then.29
  %13 = load i64, i64* %foundry, align 8
  %call35 = call i64 @SYMBOL_NAME(i64 %13)
  store i64 %call35, i64* %foundry, align 8
  br label %if.end.38

if.else.36:                                       ; preds = %if.then.29
  %call37 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call37, i64* %foundry, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.36, %if.then.34
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.end.24
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.39
  %14 = load i32, i32* %i, align 4
  %cmp40 = icmp slt i32 %14, 3
  br i1 %cmp40, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i64, i64* %font.addr, align 8
  %16 = load i32, i32* %i, align 4
  %add = add nsw i32 5, %16
  %call42 = call i64 @font_style_symbolic(i64 %15, i32 %add, i1 zeroext false)
  %17 = load i32, i32* %i, align 4
  %idxprom = sext i32 %17 to i64
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %styles, i32 0, i64 %idxprom
  store i64 %call42, i64* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i8*, i8** %name.addr, align 8
  store i8* %19, i8** %p, align 8
  %20 = load i8*, i8** %name.addr, align 8
  %21 = load i32, i32* %nbytes.addr, align 4
  %idx.ext = sext i32 %21 to i64
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 %idx.ext
  store i8* %add.ptr, i8** %lim, align 8
  %22 = load i64, i64* %family, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp44 = icmp eq i64 %22, %call43
  br i1 %cmp44, label %if.end.61, label %if.then.46

if.then.46:                                       ; preds = %for.end
  %23 = load i8*, i8** %p, align 8
  %24 = load i8*, i8** %lim, align 8
  %25 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %26 = load i64, i64* %family, align 8
  %call47 = call i8* @SSDATA(i64 %26)
  %call48 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %23, i64 %sub.ptr.sub, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i8* %call47) #5
  store i32 %call48, i32* %len, align 4
  %27 = load i32, i32* %len, align 4
  %cmp49 = icmp sle i32 0, %27
  br i1 %cmp49, label %land.lhs.true, label %if.then.57

land.lhs.true:                                    ; preds = %if.then.46
  %28 = load i32, i32* %len, align 4
  %conv51 = sext i32 %28 to i64
  %29 = load i8*, i8** %lim, align 8
  %30 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast52 = ptrtoint i8* %29 to i64
  %sub.ptr.rhs.cast53 = ptrtoint i8* %30 to i64
  %sub.ptr.sub54 = sub i64 %sub.ptr.lhs.cast52, %sub.ptr.rhs.cast53
  %cmp55 = icmp slt i64 %conv51, %sub.ptr.sub54
  br i1 %cmp55, label %if.end.58, label %if.then.57

if.then.57:                                       ; preds = %land.lhs.true, %if.then.46
  store i32 -1, i32* %retval
  br label %return

if.end.58:                                        ; preds = %land.lhs.true
  %31 = load i32, i32* %len, align 4
  %32 = load i8*, i8** %p, align 8
  %idx.ext59 = sext i32 %31 to i64
  %add.ptr60 = getelementptr inbounds i8, i8* %32, i64 %idx.ext59
  store i8* %add.ptr60, i8** %p, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.58, %for.end
  %33 = load i32, i32* %point_size, align 4
  %cmp62 = icmp sgt i32 %33, 0
  br i1 %cmp62, label %if.then.64, label %if.else.87

if.then.64:                                       ; preds = %if.end.61
  %34 = load i8*, i8** %p, align 8
  %35 = load i8*, i8** %lim, align 8
  %36 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast66 = ptrtoint i8* %35 to i64
  %sub.ptr.rhs.cast67 = ptrtoint i8* %36 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %37 = load i8*, i8** %p, align 8
  %38 = load i8*, i8** %name.addr, align 8
  %cmp69 = icmp eq i8* %37, %38
  %conv70 = zext i1 %cmp69 to i32
  %idxprom71 = sext i32 %conv70 to i64
  %arrayidx72 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.50, i32 0, i64 %idxprom71
  %39 = load i32, i32* %point_size, align 4
  %call73 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %34, i64 %sub.ptr.sub68, i8* %arrayidx72, i32 %39) #5
  store i32 %call73, i32* %len65, align 4
  %40 = load i32, i32* %len65, align 4
  %cmp74 = icmp sle i32 0, %40
  br i1 %cmp74, label %land.lhs.true.76, label %if.then.83

land.lhs.true.76:                                 ; preds = %if.then.64
  %41 = load i32, i32* %len65, align 4
  %conv77 = sext i32 %41 to i64
  %42 = load i8*, i8** %lim, align 8
  %43 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast78 = ptrtoint i8* %42 to i64
  %sub.ptr.rhs.cast79 = ptrtoint i8* %43 to i64
  %sub.ptr.sub80 = sub i64 %sub.ptr.lhs.cast78, %sub.ptr.rhs.cast79
  %cmp81 = icmp slt i64 %conv77, %sub.ptr.sub80
  br i1 %cmp81, label %if.end.84, label %if.then.83

if.then.83:                                       ; preds = %land.lhs.true.76, %if.then.64
  store i32 -1, i32* %retval
  br label %return

if.end.84:                                        ; preds = %land.lhs.true.76
  %44 = load i32, i32* %len65, align 4
  %45 = load i8*, i8** %p, align 8
  %idx.ext85 = sext i32 %44 to i64
  %add.ptr86 = getelementptr inbounds i8, i8* %45, i64 %idx.ext85
  store i8* %add.ptr86, i8** %p, align 8
  br label %if.end.110

if.else.87:                                       ; preds = %if.end.61
  %46 = load i32, i32* %pixel_size.addr, align 4
  %cmp88 = icmp sgt i32 %46, 0
  br i1 %cmp88, label %if.then.90, label %if.end.109

if.then.90:                                       ; preds = %if.else.87
  %47 = load i8*, i8** %p, align 8
  %48 = load i8*, i8** %lim, align 8
  %49 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast92 = ptrtoint i8* %48 to i64
  %sub.ptr.rhs.cast93 = ptrtoint i8* %49 to i64
  %sub.ptr.sub94 = sub i64 %sub.ptr.lhs.cast92, %sub.ptr.rhs.cast93
  %50 = load i32, i32* %pixel_size.addr, align 4
  %call95 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %47, i64 %sub.ptr.sub94, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i32 0, i32 0), i32 %50) #5
  store i32 %call95, i32* %len91, align 4
  %51 = load i32, i32* %len91, align 4
  %cmp96 = icmp sle i32 0, %51
  br i1 %cmp96, label %land.lhs.true.98, label %if.then.105

land.lhs.true.98:                                 ; preds = %if.then.90
  %52 = load i32, i32* %len91, align 4
  %conv99 = sext i32 %52 to i64
  %53 = load i8*, i8** %lim, align 8
  %54 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast100 = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast101 = ptrtoint i8* %54 to i64
  %sub.ptr.sub102 = sub i64 %sub.ptr.lhs.cast100, %sub.ptr.rhs.cast101
  %cmp103 = icmp slt i64 %conv99, %sub.ptr.sub102
  br i1 %cmp103, label %if.end.106, label %if.then.105

if.then.105:                                      ; preds = %land.lhs.true.98, %if.then.90
  store i32 -1, i32* %retval
  br label %return

if.end.106:                                       ; preds = %land.lhs.true.98
  %55 = load i32, i32* %len91, align 4
  %56 = load i8*, i8** %p, align 8
  %idx.ext107 = sext i32 %55 to i64
  %add.ptr108 = getelementptr inbounds i8, i8* %56, i64 %idx.ext107
  store i8* %add.ptr108, i8** %p, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.106, %if.else.87
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.end.84
  %57 = load i64, i64* %font.addr, align 8
  %call111 = call i64 @AREF(i64 %57, i64 1)
  %call112 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp113 = icmp eq i64 %call111, %call112
  br i1 %cmp113, label %if.end.137, label %if.then.115

if.then.115:                                      ; preds = %if.end.110
  %58 = load i8*, i8** %p, align 8
  %59 = load i8*, i8** %lim, align 8
  %60 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast117 = ptrtoint i8* %59 to i64
  %sub.ptr.rhs.cast118 = ptrtoint i8* %60 to i64
  %sub.ptr.sub119 = sub i64 %sub.ptr.lhs.cast117, %sub.ptr.rhs.cast118
  %61 = load i64, i64* %font.addr, align 8
  %call120 = call i64 @AREF(i64 %61, i64 1)
  %call121 = call i64 @SYMBOL_NAME(i64 %call120)
  %call122 = call i8* @SSDATA(i64 %call121)
  %call123 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %58, i64 %sub.ptr.sub119, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.52, i32 0, i32 0), i8* %call122) #5
  store i32 %call123, i32* %len116, align 4
  %62 = load i32, i32* %len116, align 4
  %cmp124 = icmp sle i32 0, %62
  br i1 %cmp124, label %land.lhs.true.126, label %if.then.133

land.lhs.true.126:                                ; preds = %if.then.115
  %63 = load i32, i32* %len116, align 4
  %conv127 = sext i32 %63 to i64
  %64 = load i8*, i8** %lim, align 8
  %65 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast128 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast129 = ptrtoint i8* %65 to i64
  %sub.ptr.sub130 = sub i64 %sub.ptr.lhs.cast128, %sub.ptr.rhs.cast129
  %cmp131 = icmp slt i64 %conv127, %sub.ptr.sub130
  br i1 %cmp131, label %if.end.134, label %if.then.133

if.then.133:                                      ; preds = %land.lhs.true.126, %if.then.115
  store i32 -1, i32* %retval
  br label %return

if.end.134:                                       ; preds = %land.lhs.true.126
  %66 = load i32, i32* %len116, align 4
  %67 = load i8*, i8** %p, align 8
  %idx.ext135 = sext i32 %66 to i64
  %add.ptr136 = getelementptr inbounds i8, i8* %67, i64 %idx.ext135
  store i8* %add.ptr136, i8** %p, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %if.end.134, %if.end.110
  store i32 0, i32* %i, align 4
  br label %for.cond.138

for.cond.138:                                     ; preds = %for.inc.173, %if.end.137
  %68 = load i32, i32* %i, align 4
  %cmp139 = icmp slt i32 %68, 3
  br i1 %cmp139, label %for.body.141, label %for.end.175

for.body.141:                                     ; preds = %for.cond.138
  %69 = load i32, i32* %i, align 4
  %idxprom142 = sext i32 %69 to i64
  %arrayidx143 = getelementptr inbounds [3 x i64], [3 x i64]* %styles, i32 0, i64 %idxprom142
  %70 = load i64, i64* %arrayidx143, align 8
  %call144 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp145 = icmp eq i64 %70, %call144
  br i1 %cmp145, label %if.end.172, label %if.then.147

if.then.147:                                      ; preds = %for.body.141
  %71 = load i8*, i8** %p, align 8
  %72 = load i8*, i8** %lim, align 8
  %73 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast149 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast150 = ptrtoint i8* %73 to i64
  %sub.ptr.sub151 = sub i64 %sub.ptr.lhs.cast149, %sub.ptr.rhs.cast150
  %74 = load i32, i32* %i, align 4
  %idxprom152 = sext i32 %74 to i64
  %arrayidx153 = getelementptr inbounds [3 x i8*], [3 x i8*]* %style_names, i32 0, i64 %idxprom152
  %75 = load i8*, i8** %arrayidx153, align 8
  %76 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %76 to i64
  %arrayidx155 = getelementptr inbounds [3 x i64], [3 x i64]* %styles, i32 0, i64 %idxprom154
  %77 = load i64, i64* %arrayidx155, align 8
  %call156 = call i64 @SYMBOL_NAME(i64 %77)
  %call157 = call i8* @SSDATA(i64 %call156)
  %call158 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %71, i64 %sub.ptr.sub151, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i32 0, i32 0), i8* %75, i8* %call157) #5
  store i32 %call158, i32* %len148, align 4
  %78 = load i32, i32* %len148, align 4
  %cmp159 = icmp sle i32 0, %78
  br i1 %cmp159, label %land.lhs.true.161, label %if.then.168

land.lhs.true.161:                                ; preds = %if.then.147
  %79 = load i32, i32* %len148, align 4
  %conv162 = sext i32 %79 to i64
  %80 = load i8*, i8** %lim, align 8
  %81 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast163 = ptrtoint i8* %80 to i64
  %sub.ptr.rhs.cast164 = ptrtoint i8* %81 to i64
  %sub.ptr.sub165 = sub i64 %sub.ptr.lhs.cast163, %sub.ptr.rhs.cast164
  %cmp166 = icmp slt i64 %conv162, %sub.ptr.sub165
  br i1 %cmp166, label %if.end.169, label %if.then.168

if.then.168:                                      ; preds = %land.lhs.true.161, %if.then.147
  store i32 -1, i32* %retval
  br label %return

if.end.169:                                       ; preds = %land.lhs.true.161
  %82 = load i32, i32* %len148, align 4
  %83 = load i8*, i8** %p, align 8
  %idx.ext170 = sext i32 %82 to i64
  %add.ptr171 = getelementptr inbounds i8, i8* %83, i64 %idx.ext170
  store i8* %add.ptr171, i8** %p, align 8
  br label %if.end.172

if.end.172:                                       ; preds = %if.end.169, %for.body.141
  br label %for.inc.173

for.inc.173:                                      ; preds = %if.end.172
  %84 = load i32, i32* %i, align 4
  %inc174 = add nsw i32 %84, 1
  store i32 %inc174, i32* %i, align 4
  br label %for.cond.138

for.end.175:                                      ; preds = %for.cond.138
  %85 = load i64, i64* %font.addr, align 8
  %call176 = call i64 @AREF(i64 %85, i64 9)
  %and177 = and i64 %call176, 7
  %conv178 = trunc i64 %and177 to i32
  %and179 = and i32 %conv178, -5
  %cmp180 = icmp eq i32 %and179, 2
  br i1 %cmp180, label %if.then.182, label %if.end.203

if.then.182:                                      ; preds = %for.end.175
  %86 = load i8*, i8** %p, align 8
  %87 = load i8*, i8** %lim, align 8
  %88 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast184 = ptrtoint i8* %87 to i64
  %sub.ptr.rhs.cast185 = ptrtoint i8* %88 to i64
  %sub.ptr.sub186 = sub i64 %sub.ptr.lhs.cast184, %sub.ptr.rhs.cast185
  %89 = load i64, i64* %font.addr, align 8
  %call187 = call i64 @AREF(i64 %89, i64 9)
  %shr188 = ashr i64 %call187, 2
  %call189 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %86, i64 %sub.ptr.sub186, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0), i64 %shr188) #5
  store i32 %call189, i32* %len183, align 4
  %90 = load i32, i32* %len183, align 4
  %cmp190 = icmp sle i32 0, %90
  br i1 %cmp190, label %land.lhs.true.192, label %if.then.199

land.lhs.true.192:                                ; preds = %if.then.182
  %91 = load i32, i32* %len183, align 4
  %conv193 = sext i32 %91 to i64
  %92 = load i8*, i8** %lim, align 8
  %93 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast194 = ptrtoint i8* %92 to i64
  %sub.ptr.rhs.cast195 = ptrtoint i8* %93 to i64
  %sub.ptr.sub196 = sub i64 %sub.ptr.lhs.cast194, %sub.ptr.rhs.cast195
  %cmp197 = icmp slt i64 %conv193, %sub.ptr.sub196
  br i1 %cmp197, label %if.end.200, label %if.then.199

if.then.199:                                      ; preds = %land.lhs.true.192, %if.then.182
  store i32 -1, i32* %retval
  br label %return

if.end.200:                                       ; preds = %land.lhs.true.192
  %94 = load i32, i32* %len183, align 4
  %95 = load i8*, i8** %p, align 8
  %idx.ext201 = sext i32 %94 to i64
  %add.ptr202 = getelementptr inbounds i8, i8* %95, i64 %idx.ext201
  store i8* %add.ptr202, i8** %p, align 8
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.200, %for.end.175
  %96 = load i64, i64* %font.addr, align 8
  %call204 = call i64 @AREF(i64 %96, i64 10)
  %and205 = and i64 %call204, 7
  %conv206 = trunc i64 %and205 to i32
  %and207 = and i32 %conv206, -5
  %cmp208 = icmp eq i32 %and207, 2
  br i1 %cmp208, label %if.then.210, label %if.end.231

if.then.210:                                      ; preds = %if.end.203
  %97 = load i8*, i8** %p, align 8
  %98 = load i8*, i8** %lim, align 8
  %99 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast212 = ptrtoint i8* %98 to i64
  %sub.ptr.rhs.cast213 = ptrtoint i8* %99 to i64
  %sub.ptr.sub214 = sub i64 %sub.ptr.lhs.cast212, %sub.ptr.rhs.cast213
  %100 = load i64, i64* %font.addr, align 8
  %call215 = call i64 @AREF(i64 %100, i64 10)
  %shr216 = ashr i64 %call215, 2
  %call217 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %97, i64 %sub.ptr.sub214, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.55, i32 0, i32 0), i64 %shr216) #5
  store i32 %call217, i32* %len211, align 4
  %101 = load i32, i32* %len211, align 4
  %cmp218 = icmp sle i32 0, %101
  br i1 %cmp218, label %land.lhs.true.220, label %if.then.227

land.lhs.true.220:                                ; preds = %if.then.210
  %102 = load i32, i32* %len211, align 4
  %conv221 = sext i32 %102 to i64
  %103 = load i8*, i8** %lim, align 8
  %104 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast222 = ptrtoint i8* %103 to i64
  %sub.ptr.rhs.cast223 = ptrtoint i8* %104 to i64
  %sub.ptr.sub224 = sub i64 %sub.ptr.lhs.cast222, %sub.ptr.rhs.cast223
  %cmp225 = icmp slt i64 %conv221, %sub.ptr.sub224
  br i1 %cmp225, label %if.end.228, label %if.then.227

if.then.227:                                      ; preds = %land.lhs.true.220, %if.then.210
  store i32 -1, i32* %retval
  br label %return

if.end.228:                                       ; preds = %land.lhs.true.220
  %105 = load i32, i32* %len211, align 4
  %106 = load i8*, i8** %p, align 8
  %idx.ext229 = sext i32 %105 to i64
  %add.ptr230 = getelementptr inbounds i8, i8* %106, i64 %idx.ext229
  store i8* %add.ptr230, i8** %p, align 8
  br label %if.end.231

if.end.231:                                       ; preds = %if.end.228, %if.end.203
  %107 = load i64, i64* %font.addr, align 8
  %call232 = call i64 @AREF(i64 %107, i64 11)
  %and233 = and i64 %call232, 7
  %conv234 = trunc i64 %and233 to i32
  %and235 = and i32 %conv234, -5
  %cmp236 = icmp eq i32 %and235, 2
  br i1 %cmp236, label %if.then.238, label %if.end.261

if.then.238:                                      ; preds = %if.end.231
  %108 = load i8*, i8** %p, align 8
  %109 = load i8*, i8** %lim, align 8
  %110 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast240 = ptrtoint i8* %109 to i64
  %sub.ptr.rhs.cast241 = ptrtoint i8* %110 to i64
  %sub.ptr.sub242 = sub i64 %sub.ptr.lhs.cast240, %sub.ptr.rhs.cast241
  %111 = load i64, i64* %font.addr, align 8
  %call243 = call i64 @AREF(i64 %111, i64 11)
  %shr244 = ashr i64 %call243, 2
  %cmp245 = icmp eq i64 %shr244, 0
  %cond = select i1 %cmp245, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.57, i32 0, i32 0)
  %call247 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %108, i64 %sub.ptr.sub242, i8* %cond) #5
  store i32 %call247, i32* %len239, align 4
  %112 = load i32, i32* %len239, align 4
  %cmp248 = icmp sle i32 0, %112
  br i1 %cmp248, label %land.lhs.true.250, label %if.then.257

land.lhs.true.250:                                ; preds = %if.then.238
  %113 = load i32, i32* %len239, align 4
  %conv251 = sext i32 %113 to i64
  %114 = load i8*, i8** %lim, align 8
  %115 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast252 = ptrtoint i8* %114 to i64
  %sub.ptr.rhs.cast253 = ptrtoint i8* %115 to i64
  %sub.ptr.sub254 = sub i64 %sub.ptr.lhs.cast252, %sub.ptr.rhs.cast253
  %cmp255 = icmp slt i64 %conv251, %sub.ptr.sub254
  br i1 %cmp255, label %if.end.258, label %if.then.257

if.then.257:                                      ; preds = %land.lhs.true.250, %if.then.238
  store i32 -1, i32* %retval
  br label %return

if.end.258:                                       ; preds = %land.lhs.true.250
  %116 = load i32, i32* %len239, align 4
  %117 = load i8*, i8** %p, align 8
  %idx.ext259 = sext i32 %116 to i64
  %add.ptr260 = getelementptr inbounds i8, i8* %117, i64 %idx.ext259
  store i8* %add.ptr260, i8** %p, align 8
  br label %if.end.261

if.end.261:                                       ; preds = %if.end.258, %if.end.231
  %118 = load i8*, i8** %p, align 8
  %119 = load i8*, i8** %name.addr, align 8
  %sub.ptr.lhs.cast262 = ptrtoint i8* %118 to i64
  %sub.ptr.rhs.cast263 = ptrtoint i8* %119 to i64
  %sub.ptr.sub264 = sub i64 %sub.ptr.lhs.cast262, %sub.ptr.rhs.cast263
  %conv265 = trunc i64 %sub.ptr.sub264 to i32
  store i32 %conv265, i32* %retval
  br label %return

return:                                           ; preds = %if.end.261, %if.then.257, %if.then.227, %if.then.199, %if.then.168, %if.then.133, %if.then.105, %if.then.83, %if.then.57
  %120 = load i32, i32* %retval
  ret i32 %120
}

; Function Attrs: nounwind uwtable
define i64 @font_intern_prop(i8* %str, i64 %len, i1 zeroext %force_symbol) #0 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %force_symbol.addr = alloca i8, align 1
  %i = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %nchars = alloca i64, align 8
  %tem = alloca i64, align 8
  %name = alloca i64, align 8
  %obarray = alloca i64, align 8
  %n = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %frombool = zext i1 %force_symbol to i8
  store i8 %frombool, i8* %force_symbol.addr, align 1
  %0 = load i64, i64* %len.addr, align 8
  %cmp = icmp eq i64 %0, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 42
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %force_symbol.addr, align 1
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %if.end.52, label %land.lhs.true.3

land.lhs.true.3:                                  ; preds = %if.end
  %4 = load i64, i64* %len.addr, align 8
  %cmp4 = icmp slt i64 0, %4
  br i1 %cmp4, label %land.lhs.true.6, label %if.end.52

land.lhs.true.6:                                  ; preds = %land.lhs.true.3
  %5 = load i8*, i8** %str.addr, align 8
  %6 = load i8, i8* %5, align 1
  %conv7 = sext i8 %6 to i32
  %cmp8 = icmp sle i32 48, %conv7
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.52

land.lhs.true.10:                                 ; preds = %land.lhs.true.6
  %7 = load i8*, i8** %str.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv11 = sext i8 %8 to i32
  %cmp12 = icmp sle i32 %conv11, 57
  br i1 %cmp12, label %if.then.14, label %if.end.52

if.then.14:                                       ; preds = %land.lhs.true.10
  store i64 1, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.14
  %9 = load i64, i64* %i, align 8
  %10 = load i64, i64* %len.addr, align 8
  %cmp15 = icmp slt i64 %9, %10
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i64, i64* %i, align 8
  %12 = load i8*, i8** %str.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %11
  %13 = load i8, i8* %arrayidx, align 1
  %conv17 = sext i8 %13 to i32
  %cmp18 = icmp sle i32 48, %conv17
  br i1 %cmp18, label %land.lhs.true.20, label %if.then.25

land.lhs.true.20:                                 ; preds = %for.body
  %14 = load i64, i64* %i, align 8
  %15 = load i8*, i8** %str.addr, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %15, i64 %14
  %16 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %16 to i32
  %cmp23 = icmp sle i32 %conv22, 57
  br i1 %cmp23, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %land.lhs.true.20, %for.body
  br label %for.end

if.end.26:                                        ; preds = %land.lhs.true.20
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %17 = load i64, i64* %i, align 8
  %inc = add nsw i64 %17, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.25, %for.cond
  %18 = load i64, i64* %i, align 8
  %19 = load i64, i64* %len.addr, align 8
  %cmp27 = icmp eq i64 %18, %19
  br i1 %cmp27, label %if.then.29, label %if.end.51

if.then.29:                                       ; preds = %for.end
  store i64 0, i64* %i, align 8
  store i64 0, i64* %n, align 8
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.47, %if.then.29
  %20 = load i64, i64* %i, align 8
  %inc31 = add nsw i64 %20, 1
  store i64 %inc31, i64* %i, align 8
  %21 = load i8*, i8** %str.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %21, i64 %20
  %22 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %22 to i32
  %sub = sub nsw i32 %conv33, 48
  %conv34 = sext i32 %sub to i64
  %23 = load i64, i64* %n, align 8
  %add = add nsw i64 %23, %conv34
  store i64 %add, i64* %n, align 8
  %cmp35 = icmp sle i64 %add, 2305843009213693951
  br i1 %cmp35, label %for.body.37, label %for.end.48

for.body.37:                                      ; preds = %for.cond.30
  %24 = load i64, i64* %i, align 8
  %25 = load i64, i64* %len.addr, align 8
  %cmp38 = icmp eq i64 %24, %25
  br i1 %cmp38, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %for.body.37
  %26 = load i64, i64* %n, align 8
  %shl = shl i64 %26, 2
  %add41 = add i64 %shl, 2
  store i64 %add41, i64* %retval
  br label %return

if.end.42:                                        ; preds = %for.body.37
  %27 = load i64, i64* %n, align 8
  %cmp43 = icmp slt i64 230584300921369395, %27
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.42
  br label %for.end.48

if.end.46:                                        ; preds = %if.end.42
  br label %for.inc.47

for.inc.47:                                       ; preds = %if.end.46
  %28 = load i64, i64* %n, align 8
  %mul = mul nsw i64 %28, 10
  store i64 %mul, i64* %n, align 8
  br label %for.cond.30

for.end.48:                                       ; preds = %if.then.45, %for.cond.30
  %call49 = call i64 @builtin_lisp_symbol(i32 728)
  %29 = load i8*, i8** %str.addr, align 8
  %30 = load i64, i64* %len.addr, align 8
  %call50 = call i64 @make_string(i8* %29, i64 %30)
  call void @xsignal1(i64 %call49, i64 %call50) #7
  unreachable

if.end.51:                                        ; preds = %for.end
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %land.lhs.true.10, %land.lhs.true.6, %land.lhs.true.3, %if.end
  %31 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 207), align 8
  %call53 = call i64 @check_obarray(i64 %31)
  store i64 %call53, i64* %obarray, align 8
  %32 = load i8*, i8** %str.addr, align 8
  %33 = load i64, i64* %len.addr, align 8
  call void @parse_str_as_multibyte(i8* %32, i64 %33, i64* %nchars, i64* %nbytes)
  %34 = load i64, i64* %obarray, align 8
  %35 = load i8*, i8** %str.addr, align 8
  %36 = load i64, i64* %len.addr, align 8
  %37 = load i64, i64* %nchars, align 8
  %cmp54 = icmp eq i64 %36, %37
  br i1 %cmp54, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.52
  %38 = load i64, i64* %len.addr, align 8
  %39 = load i64, i64* %nbytes, align 8
  %cmp56 = icmp ne i64 %38, %39
  br i1 %cmp56, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end.52
  %40 = load i64, i64* %len.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %41 = load i64, i64* %nchars, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %40, %cond.true ], [ %41, %cond.false ]
  %42 = load i64, i64* %len.addr, align 8
  %call58 = call i64 @oblookup(i64 %34, i8* %35, i64 %cond, i64 %42)
  store i64 %call58, i64* %tem, align 8
  %43 = load i64, i64* %tem, align 8
  %and = and i64 %43, 7
  %conv59 = trunc i64 %and to i32
  %cmp60 = icmp eq i32 %conv59, 0
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %cond.end
  %44 = load i64, i64* %tem, align 8
  store i64 %44, i64* %retval
  br label %return

if.end.63:                                        ; preds = %cond.end
  %45 = load i8*, i8** %str.addr, align 8
  %46 = load i64, i64* %nchars, align 8
  %47 = load i64, i64* %len.addr, align 8
  %48 = load i64, i64* %len.addr, align 8
  %49 = load i64, i64* %nchars, align 8
  %cmp64 = icmp ne i64 %48, %49
  br i1 %cmp64, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.63
  %50 = load i64, i64* %len.addr, align 8
  %51 = load i64, i64* %nbytes, align 8
  %cmp66 = icmp eq i64 %50, %51
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.63
  %52 = phi i1 [ false, %if.end.63 ], [ %cmp66, %land.rhs ]
  %call68 = call i64 @make_specified_string(i8* %45, i64 %46, i64 %47, i1 zeroext %52)
  store i64 %call68, i64* %name, align 8
  %53 = load i64, i64* %name, align 8
  %54 = load i64, i64* %obarray, align 8
  %55 = load i64, i64* %tem, align 8
  %call69 = call i64 @intern_driver(i64 %53, i64 %54, i64 %55)
  store i64 %call69, i64* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then.62, %if.then.40, %if.then
  %56 = load i64, i64* %retval
  ret i64 %56
}

; Function Attrs: noreturn
declare void @xsignal1(i64, i64) #2

declare i64 @check_obarray(i64) #1

declare void @parse_str_as_multibyte(i8*, i64, i64*, i64*) #1

declare i64 @oblookup(i64, i8*, i64, i64) #1

declare i64 @make_specified_string(i8*, i64, i64, i1 zeroext) #1

declare i64 @intern_driver(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i32 @font_style_to_value(i32 %prop, i64 %val, i1 zeroext %noerror) #0 {
entry:
  %retval = alloca i32, align 4
  %prop.addr = alloca i32, align 4
  %val.addr = alloca i64, align 8
  %noerror.addr = alloca i8, align 1
  %table = alloca i64, align 8
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca i8*, align 8
  %elt = alloca i64, align 8
  %.compoundliteral = alloca [2 x i64], align 8
  %i115 = alloca i32, align 4
  %last_n = alloca i32, align 4
  %numeric = alloca i64, align 8
  %n = alloca i32, align 4
  store i32 %prop, i32* %prop.addr, align 4
  store i64 %val, i64* %val.addr, align 8
  %frombool = zext i1 %noerror to i8
  store i8 %frombool, i8* %noerror.addr, align 1
  %0 = load i64, i64* @font_style_table, align 8
  %1 = load i32, i32* %prop.addr, align 4
  %sub = sub i32 %1, 5
  %conv = zext i32 %sub to i64
  %call = call i64 @AREF(i64 %0, i64 %conv)
  store i64 %call, i64* %table, align 8
  %2 = load i64, i64* %table, align 8
  call void @CHECK_VECTOR(i64 %2)
  %3 = load i64, i64* %table, align 8
  %call1 = call i64 @ASIZE(i64 %3)
  %conv2 = trunc i64 %call1 to i32
  store i32 %conv2, i32* %len, align 4
  %4 = load i64, i64* %val.addr, align 8
  %and = and i64 %4, 7
  %conv3 = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.45, %if.then
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %len, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body, label %for.end.47

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %table, align 8
  %8 = load i32, i32* %i, align 4
  %conv7 = sext i32 %8 to i64
  %call8 = call i64 @AREF(i64 %7, i64 %conv7)
  call void @CHECK_VECTOR(i64 %call8)
  store i32 1, i32* %j, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %conv10 = sext i32 %9 to i64
  %10 = load i64, i64* %table, align 8
  %11 = load i32, i32* %i, align 4
  %conv11 = sext i32 %11 to i64
  %call12 = call i64 @AREF(i64 %10, i64 %conv11)
  %call13 = call i64 @ASIZE(i64 %call12)
  %cmp14 = icmp slt i64 %conv10, %call13
  br i1 %cmp14, label %for.body.16, label %for.end

for.body.16:                                      ; preds = %for.cond.9
  %12 = load i64, i64* %val.addr, align 8
  %13 = load i64, i64* %table, align 8
  %14 = load i32, i32* %i, align 4
  %conv17 = sext i32 %14 to i64
  %call18 = call i64 @AREF(i64 %13, i64 %conv17)
  %15 = load i32, i32* %j, align 4
  %conv19 = sext i32 %15 to i64
  %call20 = call i64 @AREF(i64 %call18, i64 %conv19)
  %cmp21 = icmp eq i64 %12, %call20
  br i1 %cmp21, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %for.body.16
  %16 = load i64, i64* %table, align 8
  %17 = load i32, i32* %i, align 4
  %conv24 = sext i32 %17 to i64
  %call25 = call i64 @AREF(i64 %16, i64 %conv24)
  %call26 = call i64 @AREF(i64 %call25, i64 0)
  %and27 = and i64 %call26, 7
  %conv28 = trunc i64 %and27 to i32
  %and29 = and i32 %conv28, -5
  %cmp30 = icmp eq i32 %and29, 2
  br i1 %cmp30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.23
  br label %cond.end

cond.false:                                       ; preds = %if.then.23
  %call32 = call i64 @builtin_lisp_symbol(i32 559)
  %18 = load i64, i64* %table, align 8
  %19 = load i32, i32* %i, align 4
  %conv33 = sext i32 %19 to i64
  %call34 = call i64 @AREF(i64 %18, i64 %conv33)
  %call35 = call i64 @AREF(i64 %call34, i64 0)
  %20 = call i64 @wrong_type_argument(i64 %call32, i64 %call35) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %21, %cond.true
  %22 = load i64, i64* %table, align 8
  %23 = load i32, i32* %i, align 4
  %conv36 = sext i32 %23 to i64
  %call37 = call i64 @AREF(i64 %22, i64 %conv36)
  %call38 = call i64 @AREF(i64 %call37, i64 0)
  %shr = ashr i64 %call38, 2
  %shl = shl i64 %shr, 8
  %24 = load i32, i32* %i, align 4
  %shl39 = shl i32 %24, 4
  %conv40 = sext i32 %shl39 to i64
  %or = or i64 %shl, %conv40
  %25 = load i32, i32* %j, align 4
  %sub41 = sub nsw i32 %25, 1
  %conv42 = sext i32 %sub41 to i64
  %or43 = or i64 %or, %conv42
  %conv44 = trunc i64 %or43 to i32
  store i32 %conv44, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body.16
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %26 = load i32, i32* %j, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  br label %for.inc.45

for.inc.45:                                       ; preds = %for.end
  %27 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %27, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond

for.end.47:                                       ; preds = %for.cond
  %28 = load i64, i64* %val.addr, align 8
  %call48 = call i64 @SYMBOL_NAME(i64 %28)
  %call49 = call i8* @SSDATA(i64 %call48)
  store i8* %call49, i8** %s, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.103, %for.end.47
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %len, align 4
  %cmp51 = icmp slt i32 %29, %30
  br i1 %cmp51, label %for.body.53, label %for.end.105

for.body.53:                                      ; preds = %for.cond.50
  store i32 1, i32* %j, align 4
  br label %for.cond.54

for.cond.54:                                      ; preds = %for.inc.100, %for.body.53
  %31 = load i32, i32* %j, align 4
  %conv55 = sext i32 %31 to i64
  %32 = load i64, i64* %table, align 8
  %33 = load i32, i32* %i, align 4
  %conv56 = sext i32 %33 to i64
  %call57 = call i64 @AREF(i64 %32, i64 %conv56)
  %call58 = call i64 @ASIZE(i64 %call57)
  %cmp59 = icmp slt i64 %conv55, %call58
  br i1 %cmp59, label %for.body.61, label %for.end.102

for.body.61:                                      ; preds = %for.cond.54
  %34 = load i64, i64* %table, align 8
  %35 = load i32, i32* %i, align 4
  %conv62 = sext i32 %35 to i64
  %call63 = call i64 @AREF(i64 %34, i64 %conv62)
  %36 = load i32, i32* %j, align 4
  %conv64 = sext i32 %36 to i64
  %call65 = call i64 @AREF(i64 %call63, i64 %conv64)
  store i64 %call65, i64* %elt, align 8
  %37 = load i8*, i8** %s, align 8
  %38 = load i64, i64* %elt, align 8
  %call66 = call i64 @SYMBOL_NAME(i64 %38)
  %call67 = call i8* @SSDATA(i64 %call66)
  %call68 = call i32 @xstrcasecmp(i8* %37, i8* %call67)
  %cmp69 = icmp eq i32 %call68, 0
  br i1 %cmp69, label %if.then.71, label %if.end.99

if.then.71:                                       ; preds = %for.body.61
  %39 = load i64, i64* %table, align 8
  %40 = load i32, i32* %i, align 4
  %conv72 = sext i32 %40 to i64
  %call73 = call i64 @AREF(i64 %39, i64 %conv72)
  %call74 = call i64 @AREF(i64 %call73, i64 0)
  %and75 = and i64 %call74, 7
  %conv76 = trunc i64 %and75 to i32
  %and77 = and i32 %conv76, -5
  %cmp78 = icmp eq i32 %and77, 2
  br i1 %cmp78, label %cond.true.80, label %cond.false.81

cond.true.80:                                     ; preds = %if.then.71
  br label %cond.end.86

cond.false.81:                                    ; preds = %if.then.71
  %call82 = call i64 @builtin_lisp_symbol(i32 559)
  %41 = load i64, i64* %table, align 8
  %42 = load i32, i32* %i, align 4
  %conv83 = sext i32 %42 to i64
  %call84 = call i64 @AREF(i64 %41, i64 %conv83)
  %call85 = call i64 @AREF(i64 %call84, i64 0)
  %43 = call i64 @wrong_type_argument(i64 %call82, i64 %call85) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.86

cond.end.86:                                      ; preds = %44, %cond.true.80
  %45 = load i64, i64* %table, align 8
  %46 = load i32, i32* %i, align 4
  %conv87 = sext i32 %46 to i64
  %call88 = call i64 @AREF(i64 %45, i64 %conv87)
  %call89 = call i64 @AREF(i64 %call88, i64 0)
  %shr90 = ashr i64 %call89, 2
  %shl91 = shl i64 %shr90, 8
  %47 = load i32, i32* %i, align 4
  %shl92 = shl i32 %47, 4
  %conv93 = sext i32 %shl92 to i64
  %or94 = or i64 %shl91, %conv93
  %48 = load i32, i32* %j, align 4
  %sub95 = sub nsw i32 %48, 1
  %conv96 = sext i32 %sub95 to i64
  %or97 = or i64 %or94, %conv96
  %conv98 = trunc i64 %or97 to i32
  store i32 %conv98, i32* %retval
  br label %return

if.end.99:                                        ; preds = %for.body.61
  br label %for.inc.100

for.inc.100:                                      ; preds = %if.end.99
  %49 = load i32, i32* %j, align 4
  %inc101 = add nsw i32 %49, 1
  store i32 %inc101, i32* %j, align 4
  br label %for.cond.54

for.end.102:                                      ; preds = %for.cond.54
  br label %for.inc.103

for.inc.103:                                      ; preds = %for.end.102
  %50 = load i32, i32* %i, align 4
  %inc104 = add nsw i32 %50, 1
  store i32 %inc104, i32* %i, align 4
  br label %for.cond.50

for.end.105:                                      ; preds = %for.cond.50
  %51 = load i8, i8* %noerror.addr, align 1
  %tobool = trunc i8 %51 to i1
  br i1 %tobool, label %if.end.107, label %if.then.106

if.then.106:                                      ; preds = %for.end.105
  store i32 -1, i32* %retval
  br label %return

if.end.107:                                       ; preds = %for.end.105
  %call108 = call i64 @Fmake_vector(i64 10, i64 402)
  store i64 %call108, i64* %elt, align 8
  %52 = load i64, i64* %elt, align 8
  %53 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %52, i64 1, i64 %53)
  %54 = load i64, i64* @font_style_table, align 8
  %55 = load i32, i32* %prop.addr, align 4
  %sub109 = sub i32 %55, 5
  %conv110 = zext i32 %sub109 to i64
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i64 0, i64 0
  %56 = load i64, i64* %table, align 8
  store i64 %56, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %57 = load i64, i64* %elt, align 8
  %call111 = call i64 @Fmake_vector(i64 6, i64 %57)
  store i64 %call111, i64* %arrayinit.element
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i32 0, i32 0
  %call112 = call i64 @Fvconcat(i64 2, i64* %arraydecay)
  call void @ASET(i64 %54, i64 %conv110, i64 %call112)
  %58 = load i32, i32* %i, align 4
  %shl113 = shl i32 %58, 4
  %or114 = or i32 25600, %shl113
  store i32 %or114, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %59 = load i64, i64* %val.addr, align 8
  %shr116 = ashr i64 %59, 2
  store i64 %shr116, i64* %numeric, align 8
  store i32 0, i32* %i115, align 4
  store i32 -1, i32* %last_n, align 4
  br label %for.cond.117

for.cond.117:                                     ; preds = %for.inc.177, %if.else
  %60 = load i32, i32* %i115, align 4
  %61 = load i32, i32* %len, align 4
  %cmp118 = icmp slt i32 %60, %61
  br i1 %cmp118, label %for.body.120, label %for.end.179

for.body.120:                                     ; preds = %for.cond.117
  %62 = load i64, i64* %table, align 8
  %63 = load i32, i32* %i115, align 4
  %conv121 = sext i32 %63 to i64
  %call122 = call i64 @AREF(i64 %62, i64 %conv121)
  call void @CHECK_VECTOR(i64 %call122)
  %64 = load i64, i64* %table, align 8
  %65 = load i32, i32* %i115, align 4
  %conv123 = sext i32 %65 to i64
  %call124 = call i64 @AREF(i64 %64, i64 %conv123)
  %call125 = call i64 @AREF(i64 %call124, i64 0)
  %and126 = and i64 %call125, 7
  %conv127 = trunc i64 %and126 to i32
  %and128 = and i32 %conv127, -5
  %cmp129 = icmp eq i32 %and128, 2
  br i1 %cmp129, label %cond.true.131, label %cond.false.132

cond.true.131:                                    ; preds = %for.body.120
  br label %cond.end.137

cond.false.132:                                   ; preds = %for.body.120
  %call133 = call i64 @builtin_lisp_symbol(i32 559)
  %66 = load i64, i64* %table, align 8
  %67 = load i32, i32* %i115, align 4
  %conv134 = sext i32 %67 to i64
  %call135 = call i64 @AREF(i64 %66, i64 %conv134)
  %call136 = call i64 @AREF(i64 %call135, i64 0)
  %68 = call i64 @wrong_type_argument(i64 %call133, i64 %call136) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.137

cond.end.137:                                     ; preds = %69, %cond.true.131
  %70 = load i64, i64* %table, align 8
  %71 = load i32, i32* %i115, align 4
  %conv138 = sext i32 %71 to i64
  %call139 = call i64 @AREF(i64 %70, i64 %conv138)
  %call140 = call i64 @AREF(i64 %call139, i64 0)
  %shr141 = ashr i64 %call140, 2
  %conv142 = trunc i64 %shr141 to i32
  store i32 %conv142, i32* %n, align 4
  %72 = load i64, i64* %numeric, align 8
  %73 = load i32, i32* %n, align 4
  %conv143 = sext i32 %73 to i64
  %cmp144 = icmp eq i64 %72, %conv143
  br i1 %cmp144, label %if.then.146, label %if.end.150

if.then.146:                                      ; preds = %cond.end.137
  %74 = load i32, i32* %n, align 4
  %shl147 = shl i32 %74, 8
  %75 = load i32, i32* %i115, align 4
  %shl148 = shl i32 %75, 4
  %or149 = or i32 %shl147, %shl148
  store i32 %or149, i32* %retval
  br label %return

if.end.150:                                       ; preds = %cond.end.137
  %76 = load i64, i64* %numeric, align 8
  %77 = load i32, i32* %n, align 4
  %conv151 = sext i32 %77 to i64
  %cmp152 = icmp slt i64 %76, %conv151
  br i1 %cmp152, label %if.then.154, label %if.end.176

if.then.154:                                      ; preds = %if.end.150
  %78 = load i8, i8* %noerror.addr, align 1
  %tobool155 = trunc i8 %78 to i1
  br i1 %tobool155, label %if.end.157, label %if.then.156

if.then.156:                                      ; preds = %if.then.154
  store i32 -1, i32* %retval
  br label %return

if.end.157:                                       ; preds = %if.then.154
  %79 = load i32, i32* %i115, align 4
  %cmp158 = icmp eq i32 %79, 0
  br i1 %cmp158, label %cond.true.166, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.157
  %80 = load i32, i32* %n, align 4
  %conv160 = sext i32 %80 to i64
  %81 = load i64, i64* %numeric, align 8
  %sub161 = sub nsw i64 %conv160, %81
  %82 = load i64, i64* %numeric, align 8
  %83 = load i32, i32* %last_n, align 4
  %conv162 = sext i32 %83 to i64
  %sub163 = sub nsw i64 %82, %conv162
  %cmp164 = icmp slt i64 %sub161, %sub163
  br i1 %cmp164, label %cond.true.166, label %cond.false.170

cond.true.166:                                    ; preds = %lor.lhs.false, %if.end.157
  %84 = load i32, i32* %n, align 4
  %shl167 = shl i32 %84, 8
  %85 = load i32, i32* %i115, align 4
  %shl168 = shl i32 %85, 4
  %or169 = or i32 %shl167, %shl168
  br label %cond.end.175

cond.false.170:                                   ; preds = %lor.lhs.false
  %86 = load i32, i32* %last_n, align 4
  %shl171 = shl i32 %86, 8
  %87 = load i32, i32* %i115, align 4
  %sub172 = sub nsw i32 %87, 1
  %shl173 = shl i32 %sub172, 4
  %or174 = or i32 %shl171, %shl173
  br label %cond.end.175

cond.end.175:                                     ; preds = %cond.false.170, %cond.true.166
  %cond = phi i32 [ %or169, %cond.true.166 ], [ %or174, %cond.false.170 ]
  store i32 %cond, i32* %retval
  br label %return

if.end.176:                                       ; preds = %if.end.150
  %88 = load i32, i32* %n, align 4
  store i32 %88, i32* %last_n, align 4
  br label %for.inc.177

for.inc.177:                                      ; preds = %if.end.176
  %89 = load i32, i32* %i115, align 4
  %inc178 = add nsw i32 %89, 1
  store i32 %inc178, i32* %i115, align 4
  br label %for.cond.117

for.end.179:                                      ; preds = %for.cond.117
  %90 = load i8, i8* %noerror.addr, align 1
  %tobool180 = trunc i8 %90 to i1
  br i1 %tobool180, label %if.end.182, label %if.then.181

if.then.181:                                      ; preds = %for.end.179
  store i32 -1, i32* %retval
  br label %return

if.end.182:                                       ; preds = %for.end.179
  %91 = load i32, i32* %last_n, align 4
  %shl183 = shl i32 %91, 8
  %92 = load i32, i32* %i115, align 4
  %sub184 = sub nsw i32 %92, 1
  %shl185 = shl i32 %sub184, 4
  %or186 = or i32 %shl183, %shl185
  store i32 %or186, i32* %retval
  br label %return

return:                                           ; preds = %if.end.182, %if.then.181, %cond.end.175, %if.then.156, %if.then.146, %if.end.107, %if.then.106, %cond.end.86, %cond.end
  %93 = load i32, i32* %retval
  ret i32 %93
}

declare void @CHECK_VECTOR(i64) #1

declare i64 @ASIZE(i64) #1

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #2

declare i8* @SSDATA(i64) #1

declare i64 @SYMBOL_NAME(i64) #1

declare i32 @xstrcasecmp(i8*, i8*) #1

declare i64 @Fmake_vector(i64, i64) #1

declare i64 @Fvconcat(i64, i64*) #1

; Function Attrs: nounwind uwtable
define i64 @font_style_symbolic(i64 %font, i32 %prop, i1 zeroext %for_face) #0 {
entry:
  %retval = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %prop.addr = alloca i32, align 4
  %for_face.addr = alloca i8, align 1
  %val = alloca i64, align 8
  %table = alloca i64, align 8
  %elt = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %font, i64* %font.addr, align 8
  store i32 %prop, i32* %prop.addr, align 4
  %frombool = zext i1 %for_face to i8
  store i8 %frombool, i8* %for_face.addr, align 1
  %0 = load i64, i64* %font.addr, align 8
  %1 = load i32, i32* %prop.addr, align 4
  %conv = zext i32 %1 to i64
  %call = call i64 @AREF(i64 %0, i64 %conv)
  store i64 %call, i64* %val, align 8
  %2 = load i64, i64* %val, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* @font_style_table, align 8
  %4 = load i32, i32* %prop.addr, align 4
  %sub = sub i32 %4, 5
  %conv4 = zext i32 %sub to i64
  %call5 = call i64 @AREF(i64 %3, i64 %conv4)
  store i64 %call5, i64* %table, align 8
  %5 = load i64, i64* %table, align 8
  call void @CHECK_VECTOR(i64 %5)
  %6 = load i64, i64* %val, align 8
  %shr = ashr i64 %6, 2
  %and = and i64 %shr, 255
  %conv6 = trunc i64 %and to i32
  store i32 %conv6, i32* %i, align 4
  %7 = load i64, i64* %table, align 8
  %8 = load i32, i32* %i, align 4
  %shr7 = ashr i32 %8, 4
  %and8 = and i32 %shr7, 15
  %conv9 = sext i32 %and8 to i64
  %call10 = call i64 @AREF(i64 %7, i64 %conv9)
  store i64 %call10, i64* %elt, align 8
  %9 = load i64, i64* %elt, align 8
  call void @CHECK_VECTOR(i64 %9)
  %10 = load i8, i8* %for_face.addr, align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %11 = load i64, i64* %elt, align 8
  %call12 = call i64 @AREF(i64 %11, i64 1)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %12 = load i64, i64* %elt, align 8
  %13 = load i32, i32* %i, align 4
  %and13 = and i32 %13, 15
  %add = add nsw i32 %and13, 1
  %conv14 = sext i32 %add to i64
  %call15 = call i64 @AREF(i64 %12, i64 %conv14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call12, %cond.true ], [ %call15, %cond.false ]
  store i64 %cond, i64* %elt, align 8
  %14 = load i64, i64* %elt, align 8
  %and16 = and i64 %14, 7
  %conv17 = trunc i64 %and16 to i32
  %cmp18 = icmp eq i32 %conv17, 0
  br i1 %cmp18, label %cond.true.20, label %cond.false.21

cond.true.20:                                     ; preds = %cond.end
  br label %cond.end.23

cond.false.21:                                    ; preds = %cond.end
  %call22 = call i64 @builtin_lisp_symbol(i32 897)
  %15 = load i64, i64* %elt, align 8
  %16 = call i64 @wrong_type_argument(i64 %call22, i64 %15) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.23

cond.end.23:                                      ; preds = %17, %cond.true.20
  %18 = load i64, i64* %elt, align 8
  store i64 %18, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.23, %if.then
  %19 = load i64, i64* %retval
  ret i64 %19
}

; Function Attrs: nounwind uwtable
define i64 @find_font_encoding(i64 %fontname) #0 {
entry:
  %retval = alloca i64, align 8
  %fontname.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %elt = alloca i64, align 8
  store i64 %fontname, i64* %fontname.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 102), align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %elt, align 8
  %6 = load i64, i64* %elt, align 8
  %and2 = and i64 %6, 7
  %conv3 = trunc i64 %and2 to i32
  %cmp4 = icmp eq i32 %conv3, 3
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %7 = load i64, i64* %elt, align 8
  %sub6 = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub6 to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car7 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car7, align 8
  %call = call zeroext i1 @STRINGP(i64 %10)
  br i1 %call, label %land.lhs.true.9, label %if.end

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %11 = load i64, i64* %elt, align 8
  %sub10 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub10 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %car11 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 0
  %14 = load i64, i64* %car11, align 8
  %15 = load i64, i64* %fontname.addr, align 8
  %call12 = call i64 @fast_string_match_ignore_case(i64 %14, i64 %15)
  %cmp13 = icmp sge i64 %call12, 0
  br i1 %cmp13, label %land.lhs.true.15, label %if.end

land.lhs.true.15:                                 ; preds = %land.lhs.true.9
  %16 = load i64, i64* %elt, align 8
  %sub16 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub16 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %19 = load i64, i64* %cdr, align 8
  %and17 = and i64 %19, 7
  %conv18 = trunc i64 %and17 to i32
  %cmp19 = icmp eq i32 %conv18, 0
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.15
  %20 = load i64, i64* @Vcharset_hash_table, align 8
  %call21 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %20)
  %21 = load i64, i64* %elt, align 8
  %sub22 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub22 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %u23 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 1
  %cdr24 = bitcast %union.anon.10* %u23 to i64*
  %24 = load i64, i64* %cdr24, align 8
  %call25 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call21, i64 %24, i64* null)
  %cmp26 = icmp sge i64 %call25, 0
  br i1 %cmp26, label %if.then, label %if.end

cond.false:                                       ; preds = %land.lhs.true.15
  %25 = load i64, i64* %elt, align 8
  %sub28 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub28 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u29 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr30 = bitcast %union.anon.10* %u29 to i64*
  %28 = load i64, i64* %cdr30, align 8
  %and31 = and i64 %28, 7
  %conv32 = trunc i64 %and31 to i32
  %cmp33 = icmp eq i32 %conv32, 3
  br i1 %cmp33, label %land.lhs.true.35, label %if.end

land.lhs.true.35:                                 ; preds = %cond.false
  %29 = load i64, i64* @Vcharset_hash_table, align 8
  %call36 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %29)
  %30 = load i64, i64* %elt, align 8
  %sub37 = sub nsw i64 %30, 3
  %31 = inttoptr i64 %sub37 to i8*
  %32 = bitcast i8* %31 to %struct.Lisp_Cons*
  %u38 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %32, i32 0, i32 1
  %cdr39 = bitcast %union.anon.10* %u38 to i64*
  %33 = load i64, i64* %cdr39, align 8
  %sub40 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub40 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %car41 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 0
  %36 = load i64, i64* %car41, align 8
  %call42 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call36, i64 %36, i64* null)
  %cmp43 = icmp sge i64 %call42, 0
  br i1 %cmp43, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.35, %cond.true
  %37 = load i64, i64* %elt, align 8
  %sub45 = sub nsw i64 %37, 3
  %38 = inttoptr i64 %sub45 to i8*
  %39 = bitcast i8* %38 to %struct.Lisp_Cons*
  %u46 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %39, i32 0, i32 1
  %cdr47 = bitcast %union.anon.10* %u46 to i64*
  %40 = load i64, i64* %cdr47, align 8
  store i64 %40, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.35, %cond.false, %cond.true, %land.lhs.true.9, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %41 = load i64, i64* %tail, align 8
  %sub48 = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub48 to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %u49 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 1
  %cdr50 = bitcast %union.anon.10* %u49 to i64*
  %44 = load i64, i64* %cdr50, align 8
  store i64 %44, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call51 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call51, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %45 = load i64, i64* %retval
  ret i64 %45
}

declare zeroext i1 @STRINGP(i64) #1

declare i64 @fast_string_match_ignore_case(i64, i64) #1

declare i64 @hash_lookup(%struct.Lisp_Hash_Table*, i64, i64*) #1

declare %struct.Lisp_Hash_Table* @XHASH_TABLE(i64) #1

; Function Attrs: nounwind uwtable
define i32 @font_registry_charsets(i64 %registry, %struct.charset** %encoding, %struct.charset** %repertory) #0 {
entry:
  %retval = alloca i32, align 4
  %registry.addr = alloca i64, align 8
  %encoding.addr = alloca %struct.charset**, align 8
  %repertory.addr = alloca %struct.charset**, align 8
  %val = alloca i64, align 8
  %encoding_id = alloca i32, align 4
  %repertory_id = alloca i32, align 4
  store i64 %registry, i64* %registry.addr, align 8
  store %struct.charset** %encoding, %struct.charset*** %encoding.addr, align 8
  store %struct.charset** %repertory, %struct.charset*** %repertory.addr, align 8
  %0 = load i64, i64* %registry.addr, align 8
  %1 = load i64, i64* @font_charset_alist, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %call1 = call i64 @Fassoc_string(i64 %0, i64 %1, i64 %call)
  store i64 %call1, i64* %val, align 8
  %2 = load i64, i64* %val, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %6 = load i64, i64* %cdr, align 8
  store i64 %6, i64* %val, align 8
  %7 = load i64, i64* %val, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %7, %call3
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load i64, i64* %val, align 8
  %sub6 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub6 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car, align 8
  %shr = ashr i64 %11, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %encoding_id, align 4
  %12 = load i64, i64* %val, align 8
  %sub7 = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub7 to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %u8 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 1
  %cdr9 = bitcast %union.anon.10* %u8 to i64*
  %15 = load i64, i64* %cdr9, align 8
  %shr10 = ashr i64 %15, 2
  %conv11 = trunc i64 %shr10 to i32
  store i32 %conv11, i32* %repertory_id, align 4
  br label %if.end.85

if.else:                                          ; preds = %entry
  %16 = load i64, i64* %registry.addr, align 8
  %call12 = call i64 @SYMBOL_NAME(i64 %16)
  %call13 = call i64 @find_font_encoding(i64 %call12)
  store i64 %call13, i64* %val, align 8
  %17 = load i64, i64* %val, align 8
  %and = and i64 %17, 7
  %conv14 = trunc i64 %and to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %land.lhs.true, label %if.else.27

land.lhs.true:                                    ; preds = %if.else
  %18 = load i64, i64* @Vcharset_hash_table, align 8
  %call17 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %18)
  %19 = load i64, i64* %val, align 8
  %call18 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call17, i64 %19, i64* null)
  %cmp19 = icmp sge i64 %call18, 0
  br i1 %cmp19, label %if.then.21, label %if.else.27

if.then.21:                                       ; preds = %land.lhs.true
  %20 = load i64, i64* %val, align 8
  %21 = load i64, i64* @Vcharset_hash_table, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  %call23 = call i64 @Fgethash(i64 %20, i64 %21, i64 %call22)
  %call24 = call i64 @AREF(i64 %call23, i64 0)
  %shr25 = ashr i64 %call24, 2
  %conv26 = trunc i64 %shr25 to i32
  store i32 %conv26, i32* %repertory_id, align 4
  store i32 %conv26, i32* %encoding_id, align 4
  br label %if.end.76

if.else.27:                                       ; preds = %land.lhs.true, %if.else
  %22 = load i64, i64* %val, align 8
  %and28 = and i64 %22, 7
  %conv29 = trunc i64 %and28 to i32
  %cmp30 = icmp eq i32 %conv29, 3
  br i1 %cmp30, label %if.then.32, label %if.else.74

if.then.32:                                       ; preds = %if.else.27
  %23 = load i64, i64* @Vcharset_hash_table, align 8
  %call33 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %23)
  %24 = load i64, i64* %val, align 8
  %sub34 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub34 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %car35 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 0
  %27 = load i64, i64* %car35, align 8
  %call36 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call33, i64 %27, i64* null)
  %cmp37 = icmp sge i64 %call36, 0
  br i1 %cmp37, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.then.32
  br label %invalid_entry

if.end.40:                                        ; preds = %if.then.32
  %28 = load i64, i64* %val, align 8
  %sub41 = sub nsw i64 %28, 3
  %29 = inttoptr i64 %sub41 to i8*
  %30 = bitcast i8* %29 to %struct.Lisp_Cons*
  %car42 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %30, i32 0, i32 0
  %31 = load i64, i64* %car42, align 8
  %32 = load i64, i64* @Vcharset_hash_table, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  %call44 = call i64 @Fgethash(i64 %31, i64 %32, i64 %call43)
  %call45 = call i64 @AREF(i64 %call44, i64 0)
  %shr46 = ashr i64 %call45, 2
  %conv47 = trunc i64 %shr46 to i32
  store i32 %conv47, i32* %encoding_id, align 4
  %33 = load i64, i64* %val, align 8
  %sub48 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub48 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %u49 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 1
  %cdr50 = bitcast %union.anon.10* %u49 to i64*
  %36 = load i64, i64* %cdr50, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp52 = icmp eq i64 %36, %call51
  br i1 %cmp52, label %if.then.54, label %if.else.55

if.then.54:                                       ; preds = %if.end.40
  store i32 -1, i32* %repertory_id, align 4
  br label %if.end.73

if.else.55:                                       ; preds = %if.end.40
  %37 = load i64, i64* @Vcharset_hash_table, align 8
  %call56 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %37)
  %38 = load i64, i64* %val, align 8
  %sub57 = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub57 to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %u58 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 1
  %cdr59 = bitcast %union.anon.10* %u58 to i64*
  %41 = load i64, i64* %cdr59, align 8
  %call60 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call56, i64 %41, i64* null)
  %cmp61 = icmp sge i64 %call60, 0
  br i1 %cmp61, label %if.end.64, label %if.then.63

if.then.63:                                       ; preds = %if.else.55
  br label %invalid_entry

if.end.64:                                        ; preds = %if.else.55
  %42 = load i64, i64* %val, align 8
  %sub65 = sub nsw i64 %42, 3
  %43 = inttoptr i64 %sub65 to i8*
  %44 = bitcast i8* %43 to %struct.Lisp_Cons*
  %u66 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %44, i32 0, i32 1
  %cdr67 = bitcast %union.anon.10* %u66 to i64*
  %45 = load i64, i64* %cdr67, align 8
  %46 = load i64, i64* @Vcharset_hash_table, align 8
  %call68 = call i64 @builtin_lisp_symbol(i32 0)
  %call69 = call i64 @Fgethash(i64 %45, i64 %46, i64 %call68)
  %call70 = call i64 @AREF(i64 %call69, i64 0)
  %shr71 = ashr i64 %call70, 2
  %conv72 = trunc i64 %shr71 to i32
  store i32 %conv72, i32* %repertory_id, align 4
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.64, %if.then.54
  br label %if.end.75

if.else.74:                                       ; preds = %if.else.27
  br label %invalid_entry

if.end.75:                                        ; preds = %if.end.73
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.then.21
  %47 = load i32, i32* %encoding_id, align 4
  %conv77 = sext i32 %47 to i64
  %shl = shl i64 %conv77, 2
  %add = add i64 %shl, 2
  %48 = load i32, i32* %repertory_id, align 4
  %conv78 = sext i32 %48 to i64
  %shl79 = shl i64 %conv78, 2
  %add80 = add i64 %shl79, 2
  %call81 = call i64 @Fcons(i64 %add, i64 %add80)
  store i64 %call81, i64* %val, align 8
  %49 = load i64, i64* @font_charset_alist, align 8
  %50 = load i64, i64* %registry.addr, align 8
  %51 = load i64, i64* %val, align 8
  %call82 = call i64 @Fcons(i64 %50, i64 %51)
  %call83 = call i64 @list1(i64 %call82)
  %call84 = call i64 @nconc2(i64 %49, i64 %call83)
  store i64 %call84, i64* @font_charset_alist, align 8
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.76, %if.end
  %52 = load %struct.charset**, %struct.charset*** %encoding.addr, align 8
  %tobool = icmp ne %struct.charset** %52, null
  br i1 %tobool, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %if.end.85
  %53 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %54 = load i32, i32* %encoding_id, align 4
  %idx.ext = sext i32 %54 to i64
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %53, i64 %idx.ext
  %55 = load %struct.charset**, %struct.charset*** %encoding.addr, align 8
  store %struct.charset* %add.ptr, %struct.charset** %55, align 8
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.86, %if.end.85
  %56 = load %struct.charset**, %struct.charset*** %repertory.addr, align 8
  %tobool88 = icmp ne %struct.charset** %56, null
  br i1 %tobool88, label %if.then.89, label %if.end.94

if.then.89:                                       ; preds = %if.end.87
  %57 = load i32, i32* %repertory_id, align 4
  %cmp90 = icmp sge i32 %57, 0
  br i1 %cmp90, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.89
  %58 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %59 = load i32, i32* %repertory_id, align 4
  %idx.ext92 = sext i32 %59 to i64
  %add.ptr93 = getelementptr inbounds %struct.charset, %struct.charset* %58, i64 %idx.ext92
  br label %cond.end

cond.false:                                       ; preds = %if.then.89
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.charset* [ %add.ptr93, %cond.true ], [ null, %cond.false ]
  %60 = load %struct.charset**, %struct.charset*** %repertory.addr, align 8
  store %struct.charset* %cond, %struct.charset** %60, align 8
  br label %if.end.94

if.end.94:                                        ; preds = %cond.end, %if.end.87
  store i32 0, i32* %retval
  br label %return

invalid_entry:                                    ; preds = %if.else.74, %if.then.63, %if.then.39
  %61 = load i64, i64* @font_charset_alist, align 8
  %62 = load i64, i64* %registry.addr, align 8
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  %call96 = call i64 @Fcons(i64 %62, i64 %call95)
  %call97 = call i64 @list1(i64 %call96)
  %call98 = call i64 @nconc2(i64 %61, i64 %call97)
  store i64 %call98, i64* @font_charset_alist, align 8
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %invalid_entry, %if.end.94, %if.then.5
  %63 = load i32, i32* %retval
  ret i32 %63
}

declare i64 @Fassoc_string(i64, i64, i64) #1

declare i64 @Fgethash(i64, i64, i64) #1

declare i64 @Fcons(i64, i64) #1

declare i64 @nconc2(i64, i64) #1

declare i64 @list1(i64) #1

; Function Attrs: nounwind uwtable
define i64 @font_put_extra(i64 %font, i64 %prop, i64 %val) #0 {
entry:
  %retval = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %extra = alloca i64, align 8
  %slot = alloca i64, align 8
  %prev = alloca i64, align 8
  store i64 %font, i64* %font.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %font.addr, align 8
  %call = call i64 @AREF(i64 %0, i64 12)
  store i64 %call, i64* %extra, align 8
  %1 = load i64, i64* %extra, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i64, i64* %prop.addr, align 8
  %3 = load i64, i64* %extra, align 8
  %call3 = call i64 @assq_no_quit(i64 %2, i64 %3)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call2, %cond.true ], [ %call3, %cond.false ]
  store i64 %cond, i64* %slot, align 8
  %4 = load i64, i64* %slot, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %4, %call4
  br i1 %cmp5, label %if.then, label %if.end.24

if.then:                                          ; preds = %cond.end
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call6, i64* %prev, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load i64, i64* %extra, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp7 = icmp eq i32 %conv, 3
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i64, i64* %prop.addr, align 8
  %7 = load i64, i64* %extra, align 8
  %sub = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car, align 8
  %sub9 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub9 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car10 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car10, align 8
  %call11 = call i64 @Fstring_lessp(i64 %6, i64 %13)
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %call11, %call12
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp13, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i64, i64* %extra, align 8
  store i64 %15, i64* %prev, align 8
  %16 = load i64, i64* %extra, align 8
  %sub15 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub15 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %19 = load i64, i64* %cdr, align 8
  store i64 %19, i64* %extra, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %20 = load i64, i64* %prev, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %20, %call16
  br i1 %cmp17, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %while.end
  %21 = load i64, i64* %font.addr, align 8
  %22 = load i64, i64* %prop.addr, align 8
  %23 = load i64, i64* %val.addr, align 8
  %call20 = call i64 @Fcons(i64 %22, i64 %23)
  %24 = load i64, i64* %extra, align 8
  %call21 = call i64 @Fcons(i64 %call20, i64 %24)
  call void @ASET(i64 %21, i64 12, i64 %call21)
  br label %if.end

if.else:                                          ; preds = %while.end
  %25 = load i64, i64* %prev, align 8
  %26 = load i64, i64* %prop.addr, align 8
  %27 = load i64, i64* %val.addr, align 8
  %call22 = call i64 @Fcons(i64 %26, i64 %27)
  %28 = load i64, i64* %extra, align 8
  %call23 = call i64 @Fcons(i64 %call22, i64 %28)
  call void @XSETCDR(i64 %25, i64 %call23)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.19
  %29 = load i64, i64* %val.addr, align 8
  store i64 %29, i64* %retval
  br label %return

if.end.24:                                        ; preds = %cond.end
  %30 = load i64, i64* %slot, align 8
  %31 = load i64, i64* %val.addr, align 8
  call void @XSETCDR(i64 %30, i64 %31)
  %32 = load i64, i64* %val.addr, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %32, %call25
  br i1 %cmp26, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %if.end.24
  %33 = load i64, i64* %font.addr, align 8
  %34 = load i64, i64* %slot, align 8
  %35 = load i64, i64* %extra, align 8
  %call29 = call i64 @Fdelq(i64 %34, i64 %35)
  call void @ASET(i64 %33, i64 12, i64 %call29)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %if.end.24
  %36 = load i64, i64* %val.addr, align 8
  store i64 %36, i64* %retval
  br label %return

return:                                           ; preds = %if.end.30, %if.end
  %37 = load i64, i64* %retval
  ret i64 %37
}

declare i64 @assq_no_quit(i64, i64) #1

declare i64 @Fstring_lessp(i64, i64) #1

declare void @XSETCDR(i64, i64) #1

declare i64 @Fdelq(i64, i64) #1

; Function Attrs: nounwind uwtable
define i32 @font_parse_xlfd(i8* %name, i64 %len, i64 %font) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %f = alloca [15 x i8*], align 16
  %val = alloca i64, align 8
  %p = alloca i8*, align 8
  %pixel_size = alloca i32, align 4
  %point_size = alloca double, align 8
  %wild_card_found = alloca i8, align 1
  %prop = alloca [14 x i64], align 16
  %star_dash = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  %dash_star = alloca i64, align 8
  %.compoundliteral354 = alloca %union.Aligned_String, align 8
  %dash = alloca i64, align 8
  %.compoundliteral365 = alloca %union.Aligned_String, align 8
  %point_size402 = alloca double, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 %font, i64* %font.addr, align 8
  %0 = load i64, i64* %len.addr, align 8
  %cmp = icmp sgt i64 %0, 255
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %len.addr, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %name.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 42
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %4 = load i64, i64* %len.addr, align 8
  %cmp3 = icmp eq i64 %4, 1
  br i1 %cmp3, label %if.then.10, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %land.lhs.true
  %5 = load i8*, i8** %name.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %6 to i32
  %cmp8 = icmp eq i32 %conv7, 45
  br i1 %cmp8, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %lor.lhs.false.5, %land.lhs.true
  store i32 1, i32* %i, align 4
  %7 = load i8*, i8** %name.addr, align 8
  %arrayidx11 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 0
  store i8* %7, i8** %arrayidx11, align 8
  br label %if.end.12

if.else:                                          ; preds = %lor.lhs.false.5, %if.end
  store i32 0, i32* %i, align 4
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  %8 = load i8*, i8** %name.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %9 to i64
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.12
  %10 = load i8*, i8** %p, align 8
  %11 = load i8, i8* %10, align 1
  %tobool13 = icmp ne i8 %11, 0
  br i1 %tobool13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i8*, i8** %p, align 8
  %13 = load i8, i8* %12, align 1
  %conv14 = sext i8 %13 to i32
  %cmp15 = icmp eq i32 %conv14, 45
  br i1 %cmp15, label %if.then.17, label %if.end.24

if.then.17:                                       ; preds = %for.body
  %14 = load i8*, i8** %p, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %14, i64 1
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %arrayidx19 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom
  store i8* %add.ptr18, i8** %arrayidx19, align 8
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp eq i32 %16, 14
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.17
  br label %for.end

if.end.23:                                        ; preds = %if.then.17
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.24
  %17 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.22, %for.cond
  %18 = load i8*, i8** %name.addr, align 8
  %19 = load i64, i64* %len.addr, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %18, i64 %19
  %20 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %20 to i64
  %arrayidx27 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom26
  store i8* %add.ptr25, i8** %arrayidx27, align 8
  %21 = load i32, i32* %i, align 4
  %cmp28 = icmp eq i32 %21, 14
  br i1 %cmp28, label %if.then.30, label %if.else.228

if.then.30:                                       ; preds = %for.end
  %22 = load i64, i64* %font.addr, align 8
  %arrayidx31 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 0
  %23 = load i8*, i8** %arrayidx31, align 8
  %arrayidx32 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 1
  %24 = load i8*, i8** %arrayidx32, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %24, i64 -1
  %arrayidx34 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 0
  %25 = load i8*, i8** %arrayidx34, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr33 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i64 @font_intern_prop(i8* %23, i64 %sub.ptr.sub, i1 zeroext true)
  call void @ASET(i64 %22, i64 1, i64 %call)
  %26 = load i64, i64* %font.addr, align 8
  %arrayidx35 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 1
  %27 = load i8*, i8** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 2
  %28 = load i8*, i8** %arrayidx36, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %28, i64 -1
  %arrayidx38 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 1
  %29 = load i8*, i8** %arrayidx38, align 8
  %sub.ptr.lhs.cast39 = ptrtoint i8* %add.ptr37 to i64
  %sub.ptr.rhs.cast40 = ptrtoint i8* %29 to i64
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast40
  %call42 = call i64 @font_intern_prop(i8* %27, i64 %sub.ptr.sub41, i1 zeroext true)
  call void @ASET(i64 %26, i64 2, i64 %call42)
  store i32 2, i32* %i, align 4
  store i32 5, i32* %j, align 4
  br label %for.cond.43

for.cond.43:                                      ; preds = %for.inc.83, %if.then.30
  %30 = load i32, i32* %i, align 4
  %cmp44 = icmp sle i32 %30, 4
  br i1 %cmp44, label %for.body.46, label %for.end.86

for.body.46:                                      ; preds = %for.cond.43
  %31 = load i32, i32* %i, align 4
  %idxprom47 = sext i32 %31 to i64
  %arrayidx48 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom47
  %32 = load i8*, i8** %arrayidx48, align 8
  %33 = load i32, i32* %i, align 4
  %add = add nsw i32 %33, 1
  %idxprom49 = sext i32 %add to i64
  %arrayidx50 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom49
  %34 = load i8*, i8** %arrayidx50, align 8
  %add.ptr51 = getelementptr inbounds i8, i8* %34, i64 -1
  %35 = load i32, i32* %i, align 4
  %idxprom52 = sext i32 %35 to i64
  %arrayidx53 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom52
  %36 = load i8*, i8** %arrayidx53, align 8
  %sub.ptr.lhs.cast54 = ptrtoint i8* %add.ptr51 to i64
  %sub.ptr.rhs.cast55 = ptrtoint i8* %36 to i64
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55
  %call57 = call i64 @font_intern_prop(i8* %32, i64 %sub.ptr.sub56, i1 zeroext true)
  store i64 %call57, i64* %val, align 8
  %37 = load i64, i64* %val, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %37, %call58
  br i1 %cmp59, label %if.end.82, label %if.then.61

if.then.61:                                       ; preds = %for.body.46
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %idxprom62 = sext i32 %39 to i64
  %arrayidx63 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom62
  %40 = load i8*, i8** %arrayidx63, align 8
  %41 = load i32, i32* %i, align 4
  %add64 = add nsw i32 %41, 1
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom65
  %42 = load i8*, i8** %arrayidx66, align 8
  %add.ptr67 = getelementptr inbounds i8, i8* %42, i64 -1
  %43 = load i32, i32* %i, align 4
  %idxprom68 = sext i32 %43 to i64
  %arrayidx69 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom68
  %44 = load i8*, i8** %arrayidx69, align 8
  %sub.ptr.lhs.cast70 = ptrtoint i8* %add.ptr67 to i64
  %sub.ptr.rhs.cast71 = ptrtoint i8* %44 to i64
  %sub.ptr.sub72 = sub i64 %sub.ptr.lhs.cast70, %sub.ptr.rhs.cast71
  %call73 = call i64 @font_intern_prop(i8* %40, i64 %sub.ptr.sub72, i1 zeroext true)
  %call74 = call i32 @font_style_to_value(i32 %38, i64 %call73, i1 zeroext false)
  store i32 %call74, i32* %n, align 4
  %cmp75 = icmp slt i32 %call74, 0
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.then.61
  store i32 -1, i32* %retval
  br label %return

if.end.78:                                        ; preds = %if.then.61
  %45 = load i64, i64* %font.addr, align 8
  %46 = load i32, i32* %j, align 4
  %conv79 = sext i32 %46 to i64
  %47 = load i32, i32* %n, align 4
  %conv80 = sext i32 %47 to i64
  %shl = shl i64 %conv80, 2
  %add81 = add i64 %shl, 2
  call void @ASET(i64 %45, i64 %conv79, i64 %add81)
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.78, %for.body.46
  br label %for.inc.83

for.inc.83:                                       ; preds = %if.end.82
  %48 = load i32, i32* %i, align 4
  %inc84 = add nsw i32 %48, 1
  store i32 %inc84, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %inc85 = add nsw i32 %49, 1
  store i32 %inc85, i32* %j, align 4
  br label %for.cond.43

for.end.86:                                       ; preds = %for.cond.43
  %50 = load i64, i64* %font.addr, align 8
  %arrayidx87 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 5
  %51 = load i8*, i8** %arrayidx87, align 8
  %arrayidx88 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 6
  %52 = load i8*, i8** %arrayidx88, align 8
  %add.ptr89 = getelementptr inbounds i8, i8* %52, i64 -1
  %arrayidx90 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 5
  %53 = load i8*, i8** %arrayidx90, align 8
  %sub.ptr.lhs.cast91 = ptrtoint i8* %add.ptr89 to i64
  %sub.ptr.rhs.cast92 = ptrtoint i8* %53 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92
  %call94 = call i64 @font_intern_prop(i8* %51, i64 %sub.ptr.sub93, i1 zeroext true)
  call void @ASET(i64 %50, i64 3, i64 %call94)
  %arrayidx95 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 12
  %54 = load i8*, i8** %arrayidx95, align 8
  %call96 = call i32 @strcmp(i8* %54, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0)) #6
  %cmp97 = icmp eq i32 %call96, 0
  br i1 %cmp97, label %if.then.99, label %if.else.101

if.then.99:                                       ; preds = %for.end.86
  %55 = load i64, i64* %font.addr, align 8
  %call100 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %55, i64 4, i64 %call100)
  br label %if.end.109

if.else.101:                                      ; preds = %for.end.86
  %56 = load i64, i64* %font.addr, align 8
  %arrayidx102 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 12
  %57 = load i8*, i8** %arrayidx102, align 8
  %arrayidx103 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 14
  %58 = load i8*, i8** %arrayidx103, align 8
  %arrayidx104 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 12
  %59 = load i8*, i8** %arrayidx104, align 8
  %sub.ptr.lhs.cast105 = ptrtoint i8* %58 to i64
  %sub.ptr.rhs.cast106 = ptrtoint i8* %59 to i64
  %sub.ptr.sub107 = sub i64 %sub.ptr.lhs.cast105, %sub.ptr.rhs.cast106
  %call108 = call i64 @font_intern_prop(i8* %57, i64 %sub.ptr.sub107, i1 zeroext true)
  call void @ASET(i64 %56, i64 4, i64 %call108)
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.101, %if.then.99
  %arrayidx110 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 6
  %60 = load i8*, i8** %arrayidx110, align 8
  store i8* %60, i8** %p, align 8
  %61 = load i8*, i8** %p, align 8
  %62 = load i8, i8* %61, align 1
  %conv111 = sext i8 %62 to i32
  %cmp112 = icmp eq i32 %conv111, 91
  br i1 %cmp112, label %land.lhs.true.114, label %if.else.122

land.lhs.true.114:                                ; preds = %if.end.109
  %63 = load i8*, i8** %p, align 8
  %call115 = call i32 @parse_matrix(i8* %63)
  store i32 %call115, i32* %pixel_size, align 4
  %cmp116 = icmp sge i32 %call115, 0
  br i1 %cmp116, label %if.then.118, label %if.else.122

if.then.118:                                      ; preds = %land.lhs.true.114
  %64 = load i64, i64* %font.addr, align 8
  %65 = load i32, i32* %pixel_size, align 4
  %conv119 = sext i32 %65 to i64
  %shl120 = shl i64 %conv119, 2
  %add121 = add i64 %shl120, 2
  call void @ASET(i64 %64, i64 8, i64 %add121)
  br label %if.end.162

if.else.122:                                      ; preds = %land.lhs.true.114, %if.end.109
  %arrayidx123 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 6
  %66 = load i8*, i8** %arrayidx123, align 8
  %arrayidx124 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 7
  %67 = load i8*, i8** %arrayidx124, align 8
  %add.ptr125 = getelementptr inbounds i8, i8* %67, i64 -1
  %arrayidx126 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 6
  %68 = load i8*, i8** %arrayidx126, align 8
  %sub.ptr.lhs.cast127 = ptrtoint i8* %add.ptr125 to i64
  %sub.ptr.rhs.cast128 = ptrtoint i8* %68 to i64
  %sub.ptr.sub129 = sub i64 %sub.ptr.lhs.cast127, %sub.ptr.rhs.cast128
  %call130 = call i64 @font_intern_prop(i8* %66, i64 %sub.ptr.sub129, i1 zeroext false)
  store i64 %call130, i64* %val, align 8
  %69 = load i64, i64* %val, align 8
  %and = and i64 %69, 7
  %conv131 = trunc i64 %and to i32
  %and132 = and i32 %conv131, -5
  %cmp133 = icmp eq i32 %and132, 2
  br i1 %cmp133, label %if.then.135, label %if.else.136

if.then.135:                                      ; preds = %if.else.122
  %70 = load i64, i64* %font.addr, align 8
  %71 = load i64, i64* %val, align 8
  call void @ASET(i64 %70, i64 8, i64 %71)
  br label %if.end.161

if.else.136:                                      ; preds = %if.else.122
  %72 = load i64, i64* %font.addr, align 8
  %call137 = call zeroext i1 @FONT_ENTITY_P(i64 %72)
  br i1 %call137, label %if.then.138, label %if.else.139

if.then.138:                                      ; preds = %if.else.136
  store i32 -1, i32* %retval
  br label %return

if.else.139:                                      ; preds = %if.else.136
  store double -1.000000e+00, double* %point_size, align 8
  %arrayidx140 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 7
  %73 = load i8*, i8** %arrayidx140, align 8
  store i8* %73, i8** %p, align 8
  %74 = load i8*, i8** %p, align 8
  %75 = load i8, i8* %74, align 1
  %conv141 = sext i8 %75 to i32
  %cmp142 = icmp eq i32 %conv141, 91
  br i1 %cmp142, label %if.then.144, label %if.else.147

if.then.144:                                      ; preds = %if.else.139
  %76 = load i8*, i8** %p, align 8
  %call145 = call i32 @parse_matrix(i8* %76)
  %conv146 = sitofp i32 %call145 to double
  store double %conv146, double* %point_size, align 8
  br label %if.end.154

if.else.147:                                      ; preds = %if.else.139
  %77 = load i8*, i8** %p, align 8
  %78 = load i8, i8* %77, align 1
  %conv148 = sext i8 %78 to i32
  %call149 = call zeroext i1 @c_isdigit(i32 %conv148)
  br i1 %call149, label %if.then.150, label %if.end.153

if.then.150:                                      ; preds = %if.else.147
  %79 = load i8*, i8** %p, align 8
  %call151 = call i32 @atoi(i8* %79) #6
  %conv152 = sitofp i32 %call151 to double
  store double %conv152, double* %point_size, align 8
  %80 = load double, double* %point_size, align 8
  %div = fdiv double %80, 1.000000e+01
  store double %div, double* %point_size, align 8
  br label %if.end.153

if.end.153:                                       ; preds = %if.then.150, %if.else.147
  br label %if.end.154

if.end.154:                                       ; preds = %if.end.153, %if.then.144
  %81 = load double, double* %point_size, align 8
  %cmp155 = fcmp oge double %81, 0.000000e+00
  br i1 %cmp155, label %if.then.157, label %if.end.159

if.then.157:                                      ; preds = %if.end.154
  %82 = load i64, i64* %font.addr, align 8
  %83 = load double, double* %point_size, align 8
  %call158 = call i64 @make_float(double %83)
  call void @ASET(i64 %82, i64 8, i64 %call158)
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.157, %if.end.154
  br label %if.end.160

if.end.160:                                       ; preds = %if.end.159
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.160, %if.then.135
  br label %if.end.162

if.end.162:                                       ; preds = %if.end.161, %if.then.118
  %arrayidx163 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 9
  %84 = load i8*, i8** %arrayidx163, align 8
  %arrayidx164 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 10
  %85 = load i8*, i8** %arrayidx164, align 8
  %add.ptr165 = getelementptr inbounds i8, i8* %85, i64 -1
  %arrayidx166 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 9
  %86 = load i8*, i8** %arrayidx166, align 8
  %sub.ptr.lhs.cast167 = ptrtoint i8* %add.ptr165 to i64
  %sub.ptr.rhs.cast168 = ptrtoint i8* %86 to i64
  %sub.ptr.sub169 = sub i64 %sub.ptr.lhs.cast167, %sub.ptr.rhs.cast168
  %call170 = call i64 @font_intern_prop(i8* %84, i64 %sub.ptr.sub169, i1 zeroext false)
  store i64 %call170, i64* %val, align 8
  %87 = load i64, i64* %val, align 8
  %call171 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp172 = icmp eq i64 %87, %call171
  br i1 %cmp172, label %if.end.181, label %land.lhs.true.174

land.lhs.true.174:                                ; preds = %if.end.162
  %88 = load i64, i64* %val, align 8
  %and175 = and i64 %88, 7
  %conv176 = trunc i64 %and175 to i32
  %and177 = and i32 %conv176, -5
  %cmp178 = icmp eq i32 %and177, 2
  br i1 %cmp178, label %if.end.181, label %if.then.180

if.then.180:                                      ; preds = %land.lhs.true.174
  store i32 -1, i32* %retval
  br label %return

if.end.181:                                       ; preds = %land.lhs.true.174, %if.end.162
  %89 = load i64, i64* %font.addr, align 8
  %90 = load i64, i64* %val, align 8
  call void @ASET(i64 %89, i64 9, i64 %90)
  %arrayidx182 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 10
  %91 = load i8*, i8** %arrayidx182, align 8
  %arrayidx183 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 11
  %92 = load i8*, i8** %arrayidx183, align 8
  %add.ptr184 = getelementptr inbounds i8, i8* %92, i64 -1
  %arrayidx185 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 10
  %93 = load i8*, i8** %arrayidx185, align 8
  %sub.ptr.lhs.cast186 = ptrtoint i8* %add.ptr184 to i64
  %sub.ptr.rhs.cast187 = ptrtoint i8* %93 to i64
  %sub.ptr.sub188 = sub i64 %sub.ptr.lhs.cast186, %sub.ptr.rhs.cast187
  %call189 = call i64 @font_intern_prop(i8* %91, i64 %sub.ptr.sub188, i1 zeroext false)
  store i64 %call189, i64* %val, align 8
  %94 = load i64, i64* %val, align 8
  %call190 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp191 = icmp eq i64 %94, %call190
  br i1 %cmp191, label %if.end.203, label %if.then.193

if.then.193:                                      ; preds = %if.end.181
  %call194 = call i64 @builtin_lisp_symbol(i32 120)
  %95 = load i64, i64* %val, align 8
  %call195 = call i64 @font_prop_validate_spacing(i64 %call194, i64 %95)
  store i64 %call195, i64* %val, align 8
  %96 = load i64, i64* %val, align 8
  %and196 = and i64 %96, 7
  %conv197 = trunc i64 %and196 to i32
  %and198 = and i32 %conv197, -5
  %cmp199 = icmp eq i32 %and198, 2
  br i1 %cmp199, label %if.end.202, label %if.then.201

if.then.201:                                      ; preds = %if.then.193
  store i32 -1, i32* %retval
  br label %return

if.end.202:                                       ; preds = %if.then.193
  %97 = load i64, i64* %font.addr, align 8
  %98 = load i64, i64* %val, align 8
  call void @ASET(i64 %97, i64 10, i64 %98)
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.202, %if.end.181
  %arrayidx204 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 11
  %99 = load i8*, i8** %arrayidx204, align 8
  store i8* %99, i8** %p, align 8
  %100 = load i8*, i8** %p, align 8
  %101 = load i8, i8* %100, align 1
  %conv205 = sext i8 %101 to i32
  %cmp206 = icmp eq i32 %conv205, 126
  br i1 %cmp206, label %if.then.208, label %if.end.210

if.then.208:                                      ; preds = %if.end.203
  %102 = load i8*, i8** %p, align 8
  %incdec.ptr209 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr209, i8** %p, align 8
  br label %if.end.210

if.end.210:                                       ; preds = %if.then.208, %if.end.203
  %103 = load i8*, i8** %p, align 8
  %arrayidx211 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 12
  %104 = load i8*, i8** %arrayidx211, align 8
  %add.ptr212 = getelementptr inbounds i8, i8* %104, i64 -1
  %105 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast213 = ptrtoint i8* %add.ptr212 to i64
  %sub.ptr.rhs.cast214 = ptrtoint i8* %105 to i64
  %sub.ptr.sub215 = sub i64 %sub.ptr.lhs.cast213, %sub.ptr.rhs.cast214
  %call216 = call i64 @font_intern_prop(i8* %103, i64 %sub.ptr.sub215, i1 zeroext false)
  store i64 %call216, i64* %val, align 8
  %106 = load i64, i64* %val, align 8
  %call217 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp218 = icmp eq i64 %106, %call217
  br i1 %cmp218, label %if.end.227, label %land.lhs.true.220

land.lhs.true.220:                                ; preds = %if.end.210
  %107 = load i64, i64* %val, align 8
  %and221 = and i64 %107, 7
  %conv222 = trunc i64 %and221 to i32
  %and223 = and i32 %conv222, -5
  %cmp224 = icmp eq i32 %and223, 2
  br i1 %cmp224, label %if.end.227, label %if.then.226

if.then.226:                                      ; preds = %land.lhs.true.220
  store i32 -1, i32* %retval
  br label %return

if.end.227:                                       ; preds = %land.lhs.true.220, %if.end.210
  %108 = load i64, i64* %font.addr, align 8
  %109 = load i64, i64* %val, align 8
  call void @ASET(i64 %108, i64 11, i64 %109)
  br label %if.end.443

if.else.228:                                      ; preds = %for.end
  store i8 0, i8* %wild_card_found, align 1
  %110 = load i64, i64* %font.addr, align 8
  %call229 = call zeroext i1 @FONT_ENTITY_P(i64 %110)
  br i1 %call229, label %if.then.230, label %if.end.231

if.then.230:                                      ; preds = %if.else.228
  store i32 -1, i32* %retval
  br label %return

if.end.231:                                       ; preds = %if.else.228
  store i32 0, i32* %j, align 4
  br label %for.cond.232

for.cond.232:                                     ; preds = %for.inc.293, %if.end.231
  %111 = load i32, i32* %j, align 4
  %112 = load i32, i32* %i, align 4
  %cmp233 = icmp slt i32 %111, %112
  br i1 %cmp233, label %for.body.235, label %for.end.295

for.body.235:                                     ; preds = %for.cond.232
  %113 = load i32, i32* %j, align 4
  %idxprom236 = sext i32 %113 to i64
  %arrayidx237 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom236
  %114 = load i8*, i8** %arrayidx237, align 8
  %115 = load i8, i8* %114, align 1
  %conv238 = sext i8 %115 to i32
  %cmp239 = icmp eq i32 %conv238, 42
  br i1 %cmp239, label %if.then.241, label %if.else.259

if.then.241:                                      ; preds = %for.body.235
  %116 = load i32, i32* %j, align 4
  %idxprom242 = sext i32 %116 to i64
  %arrayidx243 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom242
  %117 = load i8*, i8** %arrayidx243, align 8
  %arrayidx244 = getelementptr inbounds i8, i8* %117, i64 1
  %118 = load i8, i8* %arrayidx244, align 1
  %conv245 = sext i8 %118 to i32
  %tobool246 = icmp ne i32 %conv245, 0
  br i1 %tobool246, label %land.lhs.true.247, label %if.end.255

land.lhs.true.247:                                ; preds = %if.then.241
  %119 = load i32, i32* %j, align 4
  %idxprom248 = sext i32 %119 to i64
  %arrayidx249 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom248
  %120 = load i8*, i8** %arrayidx249, align 8
  %arrayidx250 = getelementptr inbounds i8, i8* %120, i64 1
  %121 = load i8, i8* %arrayidx250, align 1
  %conv251 = sext i8 %121 to i32
  %cmp252 = icmp ne i32 %conv251, 45
  br i1 %cmp252, label %if.then.254, label %if.end.255

if.then.254:                                      ; preds = %land.lhs.true.247
  store i32 -1, i32* %retval
  br label %return

if.end.255:                                       ; preds = %land.lhs.true.247, %if.then.241
  %call256 = call i64 @builtin_lisp_symbol(i32 0)
  %122 = load i32, i32* %j, align 4
  %idxprom257 = sext i32 %122 to i64
  %arrayidx258 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 %idxprom257
  store i64 %call256, i64* %arrayidx258, align 8
  store i8 1, i8* %wild_card_found, align 1
  br label %if.end.292

if.else.259:                                      ; preds = %for.body.235
  %123 = load i32, i32* %j, align 4
  %add260 = add nsw i32 %123, 1
  %124 = load i32, i32* %i, align 4
  %cmp261 = icmp slt i32 %add260, %124
  br i1 %cmp261, label %if.then.263, label %if.else.278

if.then.263:                                      ; preds = %if.else.259
  %125 = load i32, i32* %j, align 4
  %idxprom264 = sext i32 %125 to i64
  %arrayidx265 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom264
  %126 = load i8*, i8** %arrayidx265, align 8
  %127 = load i32, i32* %j, align 4
  %add266 = add nsw i32 %127, 1
  %idxprom267 = sext i32 %add266 to i64
  %arrayidx268 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom267
  %128 = load i8*, i8** %arrayidx268, align 8
  %add.ptr269 = getelementptr inbounds i8, i8* %128, i64 -1
  %129 = load i32, i32* %j, align 4
  %idxprom270 = sext i32 %129 to i64
  %arrayidx271 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom270
  %130 = load i8*, i8** %arrayidx271, align 8
  %sub.ptr.lhs.cast272 = ptrtoint i8* %add.ptr269 to i64
  %sub.ptr.rhs.cast273 = ptrtoint i8* %130 to i64
  %sub.ptr.sub274 = sub i64 %sub.ptr.lhs.cast272, %sub.ptr.rhs.cast273
  %call275 = call i64 @font_intern_prop(i8* %126, i64 %sub.ptr.sub274, i1 zeroext false)
  %131 = load i32, i32* %j, align 4
  %idxprom276 = sext i32 %131 to i64
  %arrayidx277 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 %idxprom276
  store i64 %call275, i64* %arrayidx277, align 8
  br label %if.end.291

if.else.278:                                      ; preds = %if.else.259
  %132 = load i32, i32* %j, align 4
  %idxprom279 = sext i32 %132 to i64
  %arrayidx280 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom279
  %133 = load i8*, i8** %arrayidx280, align 8
  %134 = load i32, i32* %i, align 4
  %idxprom281 = sext i32 %134 to i64
  %arrayidx282 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom281
  %135 = load i8*, i8** %arrayidx282, align 8
  %136 = load i32, i32* %j, align 4
  %idxprom283 = sext i32 %136 to i64
  %arrayidx284 = getelementptr inbounds [15 x i8*], [15 x i8*]* %f, i32 0, i64 %idxprom283
  %137 = load i8*, i8** %arrayidx284, align 8
  %sub.ptr.lhs.cast285 = ptrtoint i8* %135 to i64
  %sub.ptr.rhs.cast286 = ptrtoint i8* %137 to i64
  %sub.ptr.sub287 = sub i64 %sub.ptr.lhs.cast285, %sub.ptr.rhs.cast286
  %call288 = call i64 @font_intern_prop(i8* %133, i64 %sub.ptr.sub287, i1 zeroext false)
  %138 = load i32, i32* %j, align 4
  %idxprom289 = sext i32 %138 to i64
  %arrayidx290 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 %idxprom289
  store i64 %call288, i64* %arrayidx290, align 8
  br label %if.end.291

if.end.291:                                       ; preds = %if.else.278, %if.then.263
  br label %if.end.292

if.end.292:                                       ; preds = %if.end.291, %if.end.255
  br label %for.inc.293

for.inc.293:                                      ; preds = %if.end.292
  %139 = load i32, i32* %j, align 4
  %inc294 = add nsw i32 %139, 1
  store i32 %inc294, i32* %j, align 4
  br label %for.cond.232

for.end.295:                                      ; preds = %for.cond.232
  %140 = load i8, i8* %wild_card_found, align 1
  %tobool296 = trunc i8 %140 to i1
  br i1 %tobool296, label %if.end.298, label %if.then.297

if.then.297:                                      ; preds = %for.end.295
  store i32 -1, i32* %retval
  br label %return

if.end.298:                                       ; preds = %for.end.295
  %arraydecay = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i32 0
  %141 = load i32, i32* %i, align 4
  %call299 = call i32 @font_expand_wildcards(i64* %arraydecay, i32 %141)
  %cmp300 = icmp slt i32 %call299, 0
  br i1 %cmp300, label %if.then.302, label %if.end.303

if.then.302:                                      ; preds = %if.end.298
  store i32 -1, i32* %retval
  br label %return

if.end.303:                                       ; preds = %if.end.298
  %142 = load i64, i64* %font.addr, align 8
  %arrayidx304 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 0
  %143 = load i64, i64* %arrayidx304, align 8
  call void @ASET(i64 %142, i64 1, i64 %143)
  %144 = load i64, i64* %font.addr, align 8
  %arrayidx305 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 1
  %145 = load i64, i64* %arrayidx305, align 8
  call void @ASET(i64 %144, i64 2, i64 %145)
  store i32 2, i32* %i, align 4
  store i32 5, i32* %j, align 4
  br label %for.cond.306

for.cond.306:                                     ; preds = %for.inc.328, %if.end.303
  %146 = load i32, i32* %i, align 4
  %cmp307 = icmp sle i32 %146, 4
  br i1 %cmp307, label %for.body.309, label %for.end.331

for.body.309:                                     ; preds = %for.cond.306
  %147 = load i32, i32* %i, align 4
  %idxprom310 = sext i32 %147 to i64
  %arrayidx311 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 %idxprom310
  %148 = load i64, i64* %arrayidx311, align 8
  %call312 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp313 = icmp eq i64 %148, %call312
  br i1 %cmp313, label %if.end.327, label %if.then.315

if.then.315:                                      ; preds = %for.body.309
  %149 = load i32, i32* %j, align 4
  %150 = load i32, i32* %i, align 4
  %idxprom316 = sext i32 %150 to i64
  %arrayidx317 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 %idxprom316
  %151 = load i64, i64* %arrayidx317, align 8
  %call318 = call i32 @font_style_to_value(i32 %149, i64 %151, i1 zeroext true)
  store i32 %call318, i32* %n, align 4
  %cmp319 = icmp slt i32 %call318, 0
  br i1 %cmp319, label %if.then.321, label %if.end.322

if.then.321:                                      ; preds = %if.then.315
  store i32 -1, i32* %retval
  br label %return

if.end.322:                                       ; preds = %if.then.315
  %152 = load i64, i64* %font.addr, align 8
  %153 = load i32, i32* %j, align 4
  %conv323 = sext i32 %153 to i64
  %154 = load i32, i32* %n, align 4
  %conv324 = sext i32 %154 to i64
  %shl325 = shl i64 %conv324, 2
  %add326 = add i64 %shl325, 2
  call void @ASET(i64 %152, i64 %conv323, i64 %add326)
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.322, %for.body.309
  br label %for.inc.328

for.inc.328:                                      ; preds = %if.end.327
  %155 = load i32, i32* %i, align 4
  %inc329 = add nsw i32 %155, 1
  store i32 %inc329, i32* %i, align 4
  %156 = load i32, i32* %j, align 4
  %inc330 = add nsw i32 %156, 1
  store i32 %inc330, i32* %j, align 4
  br label %for.cond.306

for.end.331:                                      ; preds = %for.cond.306
  %157 = load i64, i64* %font.addr, align 8
  %arrayidx332 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 5
  %158 = load i64, i64* %arrayidx332, align 8
  call void @ASET(i64 %157, i64 3, i64 %158)
  %arrayidx333 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 12
  %159 = load i64, i64* %arrayidx333, align 8
  store i64 %159, i64* %val, align 8
  %160 = load i64, i64* %val, align 8
  %call334 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp335 = icmp eq i64 %160, %call334
  br i1 %cmp335, label %if.then.337, label %if.else.348

if.then.337:                                      ; preds = %for.end.331
  %arrayidx338 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 13
  %161 = load i64, i64* %arrayidx338, align 8
  store i64 %161, i64* %val, align 8
  %162 = load i64, i64* %val, align 8
  %call339 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp340 = icmp eq i64 %162, %call339
  br i1 %cmp340, label %if.end.347, label %if.then.342

if.then.342:                                      ; preds = %if.then.337
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  store i64 2, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8** %data, align 8
  %s343 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %163 = bitcast %struct.Lisp_String* %s343 to i8*
  %call344 = call i64 @make_lisp_ptr(i8* %163, i32 4)
  store i64 %call344, i64* %star_dash, align 8
  %164 = load i64, i64* %star_dash, align 8
  %165 = load i64, i64* %val, align 8
  %call345 = call i64 @SYMBOL_NAME(i64 %165)
  %call346 = call i64 @concat2(i64 %164, i64 %call345)
  store i64 %call346, i64* %val, align 8
  br label %if.end.347

if.end.347:                                       ; preds = %if.then.342, %if.then.337
  br label %if.end.378

if.else.348:                                      ; preds = %for.end.331
  %arrayidx349 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 13
  %166 = load i64, i64* %arrayidx349, align 8
  %call350 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp351 = icmp eq i64 %166, %call350
  br i1 %cmp351, label %if.then.353, label %if.else.364

if.then.353:                                      ; preds = %if.else.348
  %s355 = bitcast %union.Aligned_String* %.compoundliteral354 to %struct.Lisp_String*
  %size356 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s355, i32 0, i32 0
  store i64 2, i64* %size356, align 8
  %size_byte357 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s355, i32 0, i32 1
  store i64 -1, i64* %size_byte357, align 8
  %intervals358 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s355, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals358, align 8
  %data359 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s355, i32 0, i32 3
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8** %data359, align 8
  %s360 = bitcast %union.Aligned_String* %.compoundliteral354 to %struct.Lisp_String*
  %167 = bitcast %struct.Lisp_String* %s360 to i8*
  %call361 = call i64 @make_lisp_ptr(i8* %167, i32 4)
  store i64 %call361, i64* %dash_star, align 8
  %168 = load i64, i64* %val, align 8
  %call362 = call i64 @SYMBOL_NAME(i64 %168)
  %169 = load i64, i64* %dash_star, align 8
  %call363 = call i64 @concat2(i64 %call362, i64 %169)
  store i64 %call363, i64* %val, align 8
  br label %if.end.377

if.else.364:                                      ; preds = %if.else.348
  %s366 = bitcast %union.Aligned_String* %.compoundliteral365 to %struct.Lisp_String*
  %size367 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s366, i32 0, i32 0
  store i64 1, i64* %size367, align 8
  %size_byte368 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s366, i32 0, i32 1
  store i64 -1, i64* %size_byte368, align 8
  %intervals369 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s366, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals369, align 8
  %data370 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s366, i32 0, i32 3
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %data370, align 8
  %s371 = bitcast %union.Aligned_String* %.compoundliteral365 to %struct.Lisp_String*
  %170 = bitcast %struct.Lisp_String* %s371 to i8*
  %call372 = call i64 @make_lisp_ptr(i8* %170, i32 4)
  store i64 %call372, i64* %dash, align 8
  %171 = load i64, i64* %val, align 8
  %call373 = call i64 @SYMBOL_NAME(i64 %171)
  %172 = load i64, i64* %dash, align 8
  %arrayidx374 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 13
  %173 = load i64, i64* %arrayidx374, align 8
  %call375 = call i64 @SYMBOL_NAME(i64 %173)
  %call376 = call i64 @concat3(i64 %call373, i64 %172, i64 %call375)
  store i64 %call376, i64* %val, align 8
  br label %if.end.377

if.end.377:                                       ; preds = %if.else.364, %if.then.353
  br label %if.end.378

if.end.378:                                       ; preds = %if.end.377, %if.end.347
  %174 = load i64, i64* %val, align 8
  %call379 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp380 = icmp eq i64 %174, %call379
  br i1 %cmp380, label %if.end.385, label %if.then.382

if.then.382:                                      ; preds = %if.end.378
  %175 = load i64, i64* %font.addr, align 8
  %176 = load i64, i64* %val, align 8
  %call383 = call i64 @builtin_lisp_symbol(i32 0)
  %call384 = call i64 @Fintern(i64 %176, i64 %call383)
  call void @ASET(i64 %175, i64 4, i64 %call384)
  br label %if.end.385

if.end.385:                                       ; preds = %if.then.382, %if.end.378
  %arrayidx386 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 6
  %177 = load i64, i64* %arrayidx386, align 8
  %and387 = and i64 %177, 7
  %conv388 = trunc i64 %and387 to i32
  %and389 = and i32 %conv388, -5
  %cmp390 = icmp eq i32 %and389, 2
  br i1 %cmp390, label %if.then.392, label %if.else.394

if.then.392:                                      ; preds = %if.end.385
  %178 = load i64, i64* %font.addr, align 8
  %arrayidx393 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 6
  %179 = load i64, i64* %arrayidx393, align 8
  call void @ASET(i64 %178, i64 8, i64 %179)
  br label %if.end.408

if.else.394:                                      ; preds = %if.end.385
  %arrayidx395 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 7
  %180 = load i64, i64* %arrayidx395, align 8
  %and396 = and i64 %180, 7
  %conv397 = trunc i64 %and396 to i32
  %and398 = and i32 %conv397, -5
  %cmp399 = icmp eq i32 %and398, 2
  br i1 %cmp399, label %if.then.401, label %if.end.407

if.then.401:                                      ; preds = %if.else.394
  %arrayidx403 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 7
  %181 = load i64, i64* %arrayidx403, align 8
  %shr = ashr i64 %181, 2
  %conv404 = sitofp i64 %shr to double
  store double %conv404, double* %point_size402, align 8
  %182 = load i64, i64* %font.addr, align 8
  %183 = load double, double* %point_size402, align 8
  %div405 = fdiv double %183, 1.000000e+01
  %call406 = call i64 @make_float(double %div405)
  call void @ASET(i64 %182, i64 8, i64 %call406)
  br label %if.end.407

if.end.407:                                       ; preds = %if.then.401, %if.else.394
  br label %if.end.408

if.end.408:                                       ; preds = %if.end.407, %if.then.392
  %arrayidx409 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 8
  %184 = load i64, i64* %arrayidx409, align 8
  %and410 = and i64 %184, 7
  %conv411 = trunc i64 %and410 to i32
  %and412 = and i32 %conv411, -5
  %cmp413 = icmp eq i32 %and412, 2
  br i1 %cmp413, label %if.then.415, label %if.end.417

if.then.415:                                      ; preds = %if.end.408
  %185 = load i64, i64* %font.addr, align 8
  %arrayidx416 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 9
  %186 = load i64, i64* %arrayidx416, align 8
  call void @ASET(i64 %185, i64 9, i64 %186)
  br label %if.end.417

if.end.417:                                       ; preds = %if.then.415, %if.end.408
  %arrayidx418 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 10
  %187 = load i64, i64* %arrayidx418, align 8
  %call419 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp420 = icmp eq i64 %187, %call419
  br i1 %cmp420, label %if.end.433, label %if.then.422

if.then.422:                                      ; preds = %if.end.417
  %call423 = call i64 @builtin_lisp_symbol(i32 120)
  %arrayidx424 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 10
  %188 = load i64, i64* %arrayidx424, align 8
  %call425 = call i64 @font_prop_validate_spacing(i64 %call423, i64 %188)
  store i64 %call425, i64* %val, align 8
  %189 = load i64, i64* %val, align 8
  %and426 = and i64 %189, 7
  %conv427 = trunc i64 %and426 to i32
  %and428 = and i32 %conv427, -5
  %cmp429 = icmp eq i32 %and428, 2
  br i1 %cmp429, label %if.end.432, label %if.then.431

if.then.431:                                      ; preds = %if.then.422
  store i32 -1, i32* %retval
  br label %return

if.end.432:                                       ; preds = %if.then.422
  %190 = load i64, i64* %font.addr, align 8
  %191 = load i64, i64* %val, align 8
  call void @ASET(i64 %190, i64 10, i64 %191)
  br label %if.end.433

if.end.433:                                       ; preds = %if.end.432, %if.end.417
  %arrayidx434 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 11
  %192 = load i64, i64* %arrayidx434, align 8
  %and435 = and i64 %192, 7
  %conv436 = trunc i64 %and435 to i32
  %and437 = and i32 %conv436, -5
  %cmp438 = icmp eq i32 %and437, 2
  br i1 %cmp438, label %if.then.440, label %if.end.442

if.then.440:                                      ; preds = %if.end.433
  %193 = load i64, i64* %font.addr, align 8
  %arrayidx441 = getelementptr inbounds [14 x i64], [14 x i64]* %prop, i32 0, i64 11
  %194 = load i64, i64* %arrayidx441, align 8
  call void @ASET(i64 %193, i64 11, i64 %194)
  br label %if.end.442

if.end.442:                                       ; preds = %if.then.440, %if.end.433
  br label %if.end.443

if.end.443:                                       ; preds = %if.end.442, %if.end.227
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.443, %if.then.431, %if.then.321, %if.then.302, %if.then.297, %if.then.254, %if.then.230, %if.then.226, %if.then.201, %if.then.180, %if.then.138, %if.then.77, %if.then
  %195 = load i32, i32* %retval
  ret i32 %195
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define internal i32 @parse_matrix(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %matrix = alloca [4 x double], align 16
  %end = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  store i32 0, i32* %i, align 4
  %0 = load i8*, i8** %p.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %p.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i8*, i8** %p.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load i8*, i8** %p.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %cmp2 = icmp ne i32 %conv1, 93
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i8*, i8** %p.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv4 = sext i8 %8 to i32
  %cmp5 = icmp eq i32 %conv4, 126
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %9 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 1
  %call = call double @strtod(i8* %add.ptr, i8** %end) #5
  %sub = fsub double -0.000000e+00, %call
  %10 = load i32, i32* %i, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds [4 x double], [4 x double]* %matrix, i32 0, i64 %idxprom
  store double %sub, double* %arrayidx, align 8
  br label %if.end

if.else:                                          ; preds = %for.body
  %11 = load i8*, i8** %p.addr, align 8
  %call7 = call double @strtod(i8* %11, i8** %end) #5
  %12 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %12 to i64
  %arrayidx9 = getelementptr inbounds [4 x double], [4 x double]* %matrix, i32 0, i64 %idxprom8
  store double %call7, double* %arrayidx9, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load i8*, i8** %end, align 8
  store i8* %13, i8** %p.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %cmp10 = icmp eq i32 %15, 4
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %arrayidx12 = getelementptr inbounds [4 x double], [4 x double]* %matrix, i32 0, i64 3
  %16 = load double, double* %arrayidx12, align 8
  %conv13 = fptosi double %16 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv13, %cond.true ], [ -1, %cond.false ]
  ret i32 %cond
}

declare zeroext i1 @FONT_ENTITY_P(i64) #1

declare zeroext i1 @c_isdigit(i32) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #3

declare i64 @make_float(double) #1

; Function Attrs: nounwind uwtable
define internal i64 @font_prop_validate_spacing(i64 %prop, i64 %val) #0 {
entry:
  %retval = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %spacing = alloca i8, align 1
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %val.addr, align 8
  %call1 = call zeroext i1 @NATNUMP(i64 %1)
  br i1 %call1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i64, i64* %val.addr, align 8
  %shr = ashr i64 %2, 2
  %cmp2 = icmp sle i64 %shr, 110
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %val.addr, align 8
  store i64 %3, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load i64, i64* %val.addr, align 8
  %and = and i64 %4, 7
  %conv = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv, 0
  br i1 %cmp3, label %land.lhs.true.5, label %if.end.49

land.lhs.true.5:                                  ; preds = %if.end
  %5 = load i64, i64* %val.addr, align 8
  %call6 = call i64 @SYMBOL_NAME(i64 %5)
  %call7 = call i64 @SBYTES(i64 %call6)
  %cmp8 = icmp eq i64 %call7, 1
  br i1 %cmp8, label %if.then.10, label %if.end.49

if.then.10:                                       ; preds = %land.lhs.true.5
  %6 = load i64, i64* %val.addr, align 8
  %call11 = call i64 @SYMBOL_NAME(i64 %6)
  %call12 = call i8* @SDATA(i64 %call11)
  %arrayidx = getelementptr inbounds i8, i8* %call12, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  store i8 %7, i8* %spacing, align 1
  %8 = load i8, i8* %spacing, align 1
  %conv13 = sext i8 %8 to i32
  %cmp14 = icmp eq i32 %conv13, 99
  br i1 %cmp14, label %if.then.20, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %if.then.10
  %9 = load i8, i8* %spacing, align 1
  %conv17 = sext i8 %9 to i32
  %cmp18 = icmp eq i32 %conv17, 67
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %lor.lhs.false.16, %if.then.10
  store i64 442, i64* %retval
  br label %return

if.end.21:                                        ; preds = %lor.lhs.false.16
  %10 = load i8, i8* %spacing, align 1
  %conv22 = sext i8 %10 to i32
  %cmp23 = icmp eq i32 %conv22, 109
  br i1 %cmp23, label %if.then.29, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %if.end.21
  %11 = load i8, i8* %spacing, align 1
  %conv26 = sext i8 %11 to i32
  %cmp27 = icmp eq i32 %conv26, 77
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %lor.lhs.false.25, %if.end.21
  store i64 402, i64* %retval
  br label %return

if.end.30:                                        ; preds = %lor.lhs.false.25
  %12 = load i8, i8* %spacing, align 1
  %conv31 = sext i8 %12 to i32
  %cmp32 = icmp eq i32 %conv31, 112
  br i1 %cmp32, label %if.then.38, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %if.end.30
  %13 = load i8, i8* %spacing, align 1
  %conv35 = sext i8 %13 to i32
  %cmp36 = icmp eq i32 %conv35, 80
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %lor.lhs.false.34, %if.end.30
  store i64 2, i64* %retval
  br label %return

if.end.39:                                        ; preds = %lor.lhs.false.34
  %14 = load i8, i8* %spacing, align 1
  %conv40 = sext i8 %14 to i32
  %cmp41 = icmp eq i32 %conv40, 100
  br i1 %cmp41, label %if.then.47, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %if.end.39
  %15 = load i8, i8* %spacing, align 1
  %conv44 = sext i8 %15 to i32
  %cmp45 = icmp eq i32 %conv44, 68
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %lor.lhs.false.43, %if.end.39
  store i64 362, i64* %retval
  br label %return

if.end.48:                                        ; preds = %lor.lhs.false.43
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %land.lhs.true.5, %if.end
  %call50 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call50, i64* %retval
  br label %return

return:                                           ; preds = %if.end.49, %if.then.47, %if.then.38, %if.then.29, %if.then.20, %if.then
  %16 = load i64, i64* %retval
  ret i64 %16
}

; Function Attrs: nounwind uwtable
define internal i32 @font_expand_wildcards(i64* %field, i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %field.addr = alloca i64*, align 8
  %n.addr = alloca i32, align 4
  %tmp = alloca [14 x i64], align 16
  %range = alloca [14 x %struct.anon.13], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %range_from = alloca i32, align 4
  %range_to = alloca i32, align 4
  %range_mask = alloca i32, align 4
  %val = alloca i64, align 8
  %from22 = alloca i32, align 4
  %to24 = alloca i32, align 4
  %mask26 = alloca i32, align 4
  %numeric = alloca i64, align 8
  %name = alloca i64, align 8
  store i64* %field, i64** %field.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %range_mask, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 14, %1
  %cmp = icmp sle i32 %0, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %range_mask, align 4
  %shl = shl i32 %2, 1
  %or = or i32 %shl, 1
  store i32 %or, i32* %range_mask, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  store i32 0, i32* %range_from, align 4
  %4 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 14, %4
  store i32 %sub7, i32* %range_to, align 4
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.304, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %5, %6
  br i1 %cmp9, label %for.body.10, label %for.end.309

for.body.10:                                      ; preds = %for.cond.8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i64*, i64** %field.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %8, i64 %idxprom
  %9 = load i64, i64* %arrayidx, align 8
  store i64 %9, i64* %val, align 8
  %10 = load i64, i64* %val, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %11 to i64
  %arrayidx13 = getelementptr inbounds [14 x i64], [14 x i64]* %tmp, i32 0, i64 %idxprom12
  store i64 %10, i64* %arrayidx13, align 8
  %12 = load i64, i64* %val, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp14 = icmp eq i64 %12, %call
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %for.body.10
  %13 = load i32, i32* %range_from, align 4
  %14 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %14 to i64
  %arrayidx16 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom15
  %from = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx16, i32 0, i32 0
  store i32 %13, i32* %from, align 4
  %15 = load i32, i32* %range_to, align 4
  %16 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %16 to i64
  %arrayidx18 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom17
  %to = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx18, i32 0, i32 1
  store i32 %15, i32* %to, align 4
  %17 = load i32, i32* %range_mask, align 4
  %18 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %18 to i64
  %arrayidx20 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom19
  %mask = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx20, i32 0, i32 2
  store i32 %17, i32* %mask, align 4
  br label %if.end.303

if.else:                                          ; preds = %for.body.10
  %19 = load i64, i64* %val, align 8
  %and = and i64 %19, 7
  %conv = trunc i64 %and to i32
  %and27 = and i32 %conv, -5
  %cmp28 = icmp eq i32 %and27, 2
  br i1 %cmp28, label %if.then.30, label %if.else.46

if.then.30:                                       ; preds = %if.else
  %20 = load i64, i64* %val, align 8
  %shr = ashr i64 %20, 2
  store i64 %shr, i64* %numeric, align 8
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %21, 1
  %22 = load i32, i32* %n.addr, align 4
  %cmp32 = icmp eq i32 %add, %22
  br i1 %cmp32, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %if.then.30
  store i32 13, i32* %to24, align 4
  store i32 13, i32* %from22, align 4
  store i32 8192, i32* %mask26, align 4
  br label %if.end.45

if.else.35:                                       ; preds = %if.then.30
  %23 = load i64, i64* %numeric, align 8
  %cmp36 = icmp eq i64 %23, 0
  br i1 %cmp36, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %if.else.35
  store i32 6, i32* %from22, align 4
  store i32 11, i32* %to24, align 4
  store i32 3008, i32* %mask26, align 4
  br label %if.end.44

if.else.39:                                       ; preds = %if.else.35
  %24 = load i64, i64* %numeric, align 8
  %cmp40 = icmp sle i64 %24, 48
  br i1 %cmp40, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %if.else.39
  store i32 6, i32* %to24, align 4
  store i32 6, i32* %from22, align 4
  store i32 64, i32* %mask26, align 4
  br label %if.end

if.else.43:                                       ; preds = %if.else.39
  store i32 7, i32* %from22, align 4
  store i32 11, i32* %to24, align 4
  store i32 2944, i32* %mask26, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.43, %if.then.42
  br label %if.end.44

if.end.44:                                        ; preds = %if.end, %if.then.38
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.34
  br label %if.end.132

if.else.46:                                       ; preds = %if.else
  %25 = load i64, i64* %val, align 8
  %call47 = call i64 @SYMBOL_NAME(i64 %25)
  %call48 = call i64 @SBYTES(i64 %call47)
  %cmp49 = icmp eq i64 %call48, 0
  br i1 %cmp49, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %if.else.46
  store i32 0, i32* %from22, align 4
  store i32 5, i32* %to24, align 4
  store i32 33, i32* %mask26, align 4
  br label %if.end.131

if.else.52:                                       ; preds = %if.else.46
  %26 = load i32, i32* %i, align 4
  %cmp53 = icmp eq i32 %26, 0
  br i1 %cmp53, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %if.else.52
  store i32 0, i32* %to24, align 4
  store i32 0, i32* %from22, align 4
  store i32 1, i32* %mask26, align 4
  br label %if.end.130

if.else.56:                                       ; preds = %if.else.52
  %27 = load i32, i32* %i, align 4
  %add57 = add nsw i32 %27, 1
  %28 = load i32, i32* %n.addr, align 4
  %cmp58 = icmp eq i32 %add57, %28
  br i1 %cmp58, label %if.then.60, label %if.else.73

if.then.60:                                       ; preds = %if.else.56
  %29 = load i64, i64* %val, align 8
  %call62 = call i64 @SYMBOL_NAME(i64 %29)
  store i64 %call62, i64* %name, align 8
  %30 = load i64, i64* %name, align 8
  %call63 = call i64 @SBYTES(i64 %30)
  %sub64 = sub nsw i64 %call63, 1
  %31 = load i64, i64* %name, align 8
  %call65 = call i8* @SDATA(i64 %31)
  %arrayidx66 = getelementptr inbounds i8, i8* %call65, i64 %sub64
  %32 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %32 to i32
  %cmp68 = icmp eq i32 %conv67, 42
  br i1 %cmp68, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %if.then.60
  store i32 12, i32* %from22, align 4
  store i32 13, i32* %to24, align 4
  store i32 12288, i32* %mask26, align 4
  br label %if.end.72

if.else.71:                                       ; preds = %if.then.60
  store i32 13, i32* %to24, align 4
  store i32 13, i32* %from22, align 4
  store i32 8192, i32* %mask26, align 4
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.71, %if.then.70
  br label %if.end.129

if.else.73:                                       ; preds = %if.else.56
  %33 = load i32, i32* %range_from, align 4
  %cmp74 = icmp sle i32 %33, 2
  br i1 %cmp74, label %land.lhs.true, label %if.else.84

land.lhs.true:                                    ; preds = %if.else.73
  %34 = load i32, i32* %range_to, align 4
  %cmp76 = icmp sge i32 %34, 2
  br i1 %cmp76, label %land.lhs.true.78, label %if.else.84

land.lhs.true.78:                                 ; preds = %land.lhs.true
  %35 = load i64, i64* %val, align 8
  %call79 = call i32 @font_style_to_value(i32 5, i64 %35, i1 zeroext false)
  %shr80 = ashr i32 %call79, 8
  %cmp81 = icmp sge i32 %shr80, 0
  br i1 %cmp81, label %if.then.83, label %if.else.84

if.then.83:                                       ; preds = %land.lhs.true.78
  store i32 2, i32* %to24, align 4
  store i32 2, i32* %from22, align 4
  store i32 4, i32* %mask26, align 4
  br label %if.end.128

if.else.84:                                       ; preds = %land.lhs.true.78, %land.lhs.true, %if.else.73
  %36 = load i32, i32* %range_from, align 4
  %cmp85 = icmp sle i32 %36, 3
  br i1 %cmp85, label %land.lhs.true.87, label %if.else.96

land.lhs.true.87:                                 ; preds = %if.else.84
  %37 = load i32, i32* %range_to, align 4
  %cmp88 = icmp sge i32 %37, 3
  br i1 %cmp88, label %land.lhs.true.90, label %if.else.96

land.lhs.true.90:                                 ; preds = %land.lhs.true.87
  %38 = load i64, i64* %val, align 8
  %call91 = call i32 @font_style_to_value(i32 6, i64 %38, i1 zeroext false)
  %shr92 = ashr i32 %call91, 8
  %cmp93 = icmp sge i32 %shr92, 0
  br i1 %cmp93, label %if.then.95, label %if.else.96

if.then.95:                                       ; preds = %land.lhs.true.90
  store i32 3, i32* %to24, align 4
  store i32 3, i32* %from22, align 4
  store i32 8, i32* %mask26, align 4
  br label %if.end.127

if.else.96:                                       ; preds = %land.lhs.true.90, %land.lhs.true.87, %if.else.84
  %39 = load i32, i32* %range_from, align 4
  %cmp97 = icmp sle i32 %39, 4
  br i1 %cmp97, label %land.lhs.true.99, label %if.else.108

land.lhs.true.99:                                 ; preds = %if.else.96
  %40 = load i32, i32* %range_to, align 4
  %cmp100 = icmp sge i32 %40, 4
  br i1 %cmp100, label %land.lhs.true.102, label %if.else.108

land.lhs.true.102:                                ; preds = %land.lhs.true.99
  %41 = load i64, i64* %val, align 8
  %call103 = call i32 @font_style_to_value(i32 7, i64 %41, i1 zeroext false)
  %shr104 = ashr i32 %call103, 8
  %cmp105 = icmp sge i32 %shr104, 0
  br i1 %cmp105, label %if.then.107, label %if.else.108

if.then.107:                                      ; preds = %land.lhs.true.102
  store i32 4, i32* %to24, align 4
  store i32 4, i32* %from22, align 4
  store i32 16, i32* %mask26, align 4
  br label %if.end.126

if.else.108:                                      ; preds = %land.lhs.true.102, %land.lhs.true.99, %if.else.96
  %42 = load i64, i64* %val, align 8
  %call109 = call i64 @builtin_lisp_symbol(i32 233)
  %cmp110 = icmp eq i64 %42, %call109
  br i1 %cmp110, label %if.then.123, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.108
  %43 = load i64, i64* %val, align 8
  %call112 = call i64 @builtin_lisp_symbol(i32 634)
  %cmp113 = icmp eq i64 %43, %call112
  br i1 %cmp113, label %if.then.123, label %lor.lhs.false.115

lor.lhs.false.115:                                ; preds = %lor.lhs.false
  %44 = load i64, i64* %val, align 8
  %call116 = call i64 @builtin_lisp_symbol(i32 738)
  %cmp117 = icmp eq i64 %44, %call116
  br i1 %cmp117, label %if.then.123, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %lor.lhs.false.115
  %45 = load i64, i64* %val, align 8
  %call120 = call i64 @builtin_lisp_symbol(i32 314)
  %cmp121 = icmp eq i64 %45, %call120
  br i1 %cmp121, label %if.then.123, label %if.else.124

if.then.123:                                      ; preds = %lor.lhs.false.119, %lor.lhs.false.115, %lor.lhs.false, %if.else.108
  store i32 10, i32* %to24, align 4
  store i32 10, i32* %from22, align 4
  store i32 1024, i32* %mask26, align 4
  br label %if.end.125

if.else.124:                                      ; preds = %lor.lhs.false.119
  store i32 0, i32* %from22, align 4
  store i32 13, i32* %to24, align 4
  store i32 4131, i32* %mask26, align 4
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.124, %if.then.123
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %if.then.107
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.then.95
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.then.83
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.end.72
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.then.55
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %if.then.51
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.end.45
  %46 = load i32, i32* %range_mask, align 4
  %47 = load i32, i32* %mask26, align 4
  %and133 = and i32 %47, %46
  store i32 %and133, i32* %mask26, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.132
  %48 = load i32, i32* %from22, align 4
  %49 = load i32, i32* %range_from, align 4
  %cmp134 = icmp slt i32 %48, %49
  br i1 %cmp134, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %50 = load i32, i32* %from22, align 4
  %inc136 = add nsw i32 %50, 1
  store i32 %inc136, i32* %from22, align 4
  %shl137 = shl i32 1, %50
  %neg = xor i32 %shl137, -1
  %51 = load i32, i32* %mask26, align 4
  %and138 = and i32 %51, %neg
  store i32 %and138, i32* %mask26, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond.139

while.cond.139:                                   ; preds = %while.body.144, %while.end
  %52 = load i32, i32* %from22, align 4
  %cmp140 = icmp slt i32 %52, 14
  br i1 %cmp140, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.139
  %53 = load i32, i32* %mask26, align 4
  %54 = load i32, i32* %from22, align 4
  %shl142 = shl i32 1, %54
  %and143 = and i32 %53, %shl142
  %tobool = icmp ne i32 %and143, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.139
  %55 = phi i1 [ false, %while.cond.139 ], [ %lnot, %land.rhs ]
  br i1 %55, label %while.body.144, label %while.end.146

while.body.144:                                   ; preds = %land.end
  %56 = load i32, i32* %from22, align 4
  %inc145 = add nsw i32 %56, 1
  store i32 %inc145, i32* %from22, align 4
  br label %while.cond.139

while.end.146:                                    ; preds = %land.end
  br label %while.cond.147

while.cond.147:                                   ; preds = %while.body.150, %while.end.146
  %57 = load i32, i32* %to24, align 4
  %58 = load i32, i32* %range_to, align 4
  %cmp148 = icmp sgt i32 %57, %58
  br i1 %cmp148, label %while.body.150, label %while.end.154

while.body.150:                                   ; preds = %while.cond.147
  %59 = load i32, i32* %to24, align 4
  %dec = add nsw i32 %59, -1
  store i32 %dec, i32* %to24, align 4
  %shl151 = shl i32 1, %59
  %neg152 = xor i32 %shl151, -1
  %60 = load i32, i32* %mask26, align 4
  %and153 = and i32 %60, %neg152
  store i32 %and153, i32* %mask26, align 4
  br label %while.cond.147

while.end.154:                                    ; preds = %while.cond.147
  br label %while.cond.155

while.cond.155:                                   ; preds = %while.body.164, %while.end.154
  %61 = load i32, i32* %to24, align 4
  %cmp156 = icmp sge i32 %61, 0
  br i1 %cmp156, label %land.rhs.158, label %land.end.163

land.rhs.158:                                     ; preds = %while.cond.155
  %62 = load i32, i32* %mask26, align 4
  %63 = load i32, i32* %to24, align 4
  %shl159 = shl i32 1, %63
  %and160 = and i32 %62, %shl159
  %tobool161 = icmp ne i32 %and160, 0
  %lnot162 = xor i1 %tobool161, true
  br label %land.end.163

land.end.163:                                     ; preds = %land.rhs.158, %while.cond.155
  %64 = phi i1 [ false, %while.cond.155 ], [ %lnot162, %land.rhs.158 ]
  br i1 %64, label %while.body.164, label %while.end.166

while.body.164:                                   ; preds = %land.end.163
  %65 = load i32, i32* %to24, align 4
  %dec165 = add nsw i32 %65, -1
  store i32 %dec165, i32* %to24, align 4
  br label %while.cond.155

while.end.166:                                    ; preds = %land.end.163
  %66 = load i32, i32* %from22, align 4
  %67 = load i32, i32* %to24, align 4
  %cmp167 = icmp sgt i32 %66, %67
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %while.end.166
  store i32 -1, i32* %retval
  br label %return

if.end.170:                                       ; preds = %while.end.166
  %68 = load i32, i32* %from22, align 4
  %69 = load i32, i32* %i, align 4
  %idxprom171 = sext i32 %69 to i64
  %arrayidx172 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom171
  %from173 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx172, i32 0, i32 0
  store i32 %68, i32* %from173, align 4
  %70 = load i32, i32* %to24, align 4
  %71 = load i32, i32* %i, align 4
  %idxprom174 = sext i32 %71 to i64
  %arrayidx175 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom174
  %to176 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx175, i32 0, i32 1
  store i32 %70, i32* %to176, align 4
  %72 = load i32, i32* %mask26, align 4
  %73 = load i32, i32* %i, align 4
  %idxprom177 = sext i32 %73 to i64
  %arrayidx178 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom177
  %mask179 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx178, i32 0, i32 2
  store i32 %72, i32* %mask179, align 4
  %74 = load i32, i32* %from22, align 4
  %75 = load i32, i32* %range_from, align 4
  %cmp180 = icmp sgt i32 %74, %75
  br i1 %cmp180, label %if.then.185, label %lor.lhs.false.182

lor.lhs.false.182:                                ; preds = %if.end.170
  %76 = load i32, i32* %to24, align 4
  %77 = load i32, i32* %range_to, align 4
  %cmp183 = icmp slt i32 %76, %77
  br i1 %cmp183, label %if.then.185, label %if.end.302

if.then.185:                                      ; preds = %lor.lhs.false.182, %if.end.170
  %78 = load i32, i32* %from22, align 4
  store i32 %78, i32* %range_from, align 4
  %79 = load i32, i32* %i, align 4
  %sub186 = sub nsw i32 %79, 1
  store i32 %sub186, i32* %j, align 4
  %80 = load i32, i32* %from22, align 4
  %dec187 = add nsw i32 %80, -1
  store i32 %dec187, i32* %from22, align 4
  %81 = load i32, i32* %to24, align 4
  %dec188 = add nsw i32 %81, -1
  store i32 %dec188, i32* %to24, align 4
  br label %for.cond.189

for.cond.189:                                     ; preds = %for.inc.297, %if.then.185
  %82 = load i32, i32* %j, align 4
  %cmp190 = icmp sge i32 %82, 0
  br i1 %cmp190, label %for.body.192, label %for.end.301

for.body.192:                                     ; preds = %for.cond.189
  %83 = load i32, i32* %j, align 4
  %idxprom193 = sext i32 %83 to i64
  %arrayidx194 = getelementptr inbounds [14 x i64], [14 x i64]* %tmp, i32 0, i64 %idxprom193
  %84 = load i64, i64* %arrayidx194, align 8
  %call195 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp196 = icmp eq i64 %84, %call195
  br i1 %cmp196, label %if.else.241, label %land.lhs.true.198

land.lhs.true.198:                                ; preds = %for.body.192
  %85 = load i32, i32* %j, align 4
  %idxprom199 = sext i32 %85 to i64
  %arrayidx200 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom199
  %from201 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx200, i32 0, i32 0
  %86 = load i32, i32* %from201, align 4
  %87 = load i32, i32* %from22, align 4
  %cmp202 = icmp slt i32 %86, %87
  br i1 %cmp202, label %if.then.204, label %if.else.241

if.then.204:                                      ; preds = %land.lhs.true.198
  br label %while.cond.205

while.cond.205:                                   ; preds = %while.body.211, %if.then.204
  %88 = load i32, i32* %j, align 4
  %idxprom206 = sext i32 %88 to i64
  %arrayidx207 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom206
  %from208 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx207, i32 0, i32 0
  %89 = load i32, i32* %from208, align 4
  %90 = load i32, i32* %from22, align 4
  %cmp209 = icmp slt i32 %89, %90
  br i1 %cmp209, label %while.body.211, label %while.end.222

while.body.211:                                   ; preds = %while.cond.205
  %91 = load i32, i32* %j, align 4
  %idxprom212 = sext i32 %91 to i64
  %arrayidx213 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom212
  %from214 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx213, i32 0, i32 0
  %92 = load i32, i32* %from214, align 4
  %inc215 = add nsw i32 %92, 1
  store i32 %inc215, i32* %from214, align 4
  %shl216 = shl i32 1, %92
  %neg217 = xor i32 %shl216, -1
  %93 = load i32, i32* %j, align 4
  %idxprom218 = sext i32 %93 to i64
  %arrayidx219 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom218
  %mask220 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx219, i32 0, i32 2
  %94 = load i32, i32* %mask220, align 4
  %and221 = and i32 %94, %neg217
  store i32 %and221, i32* %mask220, align 4
  br label %while.cond.205

while.end.222:                                    ; preds = %while.cond.205
  br label %while.cond.223

while.cond.223:                                   ; preds = %while.body.235, %while.end.222
  %95 = load i32, i32* %from22, align 4
  %cmp224 = icmp slt i32 %95, 14
  br i1 %cmp224, label %land.rhs.226, label %land.end.234

land.rhs.226:                                     ; preds = %while.cond.223
  %96 = load i32, i32* %j, align 4
  %idxprom227 = sext i32 %96 to i64
  %arrayidx228 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom227
  %mask229 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx228, i32 0, i32 2
  %97 = load i32, i32* %mask229, align 4
  %98 = load i32, i32* %from22, align 4
  %shl230 = shl i32 1, %98
  %and231 = and i32 %97, %shl230
  %tobool232 = icmp ne i32 %and231, 0
  %lnot233 = xor i1 %tobool232, true
  br label %land.end.234

land.end.234:                                     ; preds = %land.rhs.226, %while.cond.223
  %99 = phi i1 [ false, %while.cond.223 ], [ %lnot233, %land.rhs.226 ]
  br i1 %99, label %while.body.235, label %while.end.237

while.body.235:                                   ; preds = %land.end.234
  %100 = load i32, i32* %from22, align 4
  %inc236 = add nsw i32 %100, 1
  store i32 %inc236, i32* %from22, align 4
  br label %while.cond.223

while.end.237:                                    ; preds = %land.end.234
  %101 = load i32, i32* %from22, align 4
  %102 = load i32, i32* %j, align 4
  %idxprom238 = sext i32 %102 to i64
  %arrayidx239 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom238
  %from240 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx239, i32 0, i32 0
  store i32 %101, i32* %from240, align 4
  br label %if.end.245

if.else.241:                                      ; preds = %land.lhs.true.198, %for.body.192
  %103 = load i32, i32* %j, align 4
  %idxprom242 = sext i32 %103 to i64
  %arrayidx243 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom242
  %from244 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx243, i32 0, i32 0
  %104 = load i32, i32* %from244, align 4
  store i32 %104, i32* %from22, align 4
  br label %if.end.245

if.end.245:                                       ; preds = %if.else.241, %while.end.237
  %105 = load i32, i32* %j, align 4
  %idxprom246 = sext i32 %105 to i64
  %arrayidx247 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom246
  %to248 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx247, i32 0, i32 1
  %106 = load i32, i32* %to248, align 4
  %107 = load i32, i32* %to24, align 4
  %cmp249 = icmp sgt i32 %106, %107
  br i1 %cmp249, label %if.then.251, label %if.else.288

if.then.251:                                      ; preds = %if.end.245
  br label %while.cond.252

while.cond.252:                                   ; preds = %while.body.258, %if.then.251
  %108 = load i32, i32* %j, align 4
  %idxprom253 = sext i32 %108 to i64
  %arrayidx254 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom253
  %to255 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx254, i32 0, i32 1
  %109 = load i32, i32* %to255, align 4
  %110 = load i32, i32* %to24, align 4
  %cmp256 = icmp sgt i32 %109, %110
  br i1 %cmp256, label %while.body.258, label %while.end.269

while.body.258:                                   ; preds = %while.cond.252
  %111 = load i32, i32* %j, align 4
  %idxprom259 = sext i32 %111 to i64
  %arrayidx260 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom259
  %to261 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx260, i32 0, i32 1
  %112 = load i32, i32* %to261, align 4
  %dec262 = add nsw i32 %112, -1
  store i32 %dec262, i32* %to261, align 4
  %shl263 = shl i32 1, %112
  %neg264 = xor i32 %shl263, -1
  %113 = load i32, i32* %j, align 4
  %idxprom265 = sext i32 %113 to i64
  %arrayidx266 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom265
  %mask267 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx266, i32 0, i32 2
  %114 = load i32, i32* %mask267, align 4
  %and268 = and i32 %114, %neg264
  store i32 %and268, i32* %mask267, align 4
  br label %while.cond.252

while.end.269:                                    ; preds = %while.cond.252
  br label %while.cond.270

while.cond.270:                                   ; preds = %while.body.282, %while.end.269
  %115 = load i32, i32* %to24, align 4
  %cmp271 = icmp sge i32 %115, 0
  br i1 %cmp271, label %land.rhs.273, label %land.end.281

land.rhs.273:                                     ; preds = %while.cond.270
  %116 = load i32, i32* %j, align 4
  %idxprom274 = sext i32 %116 to i64
  %arrayidx275 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom274
  %mask276 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx275, i32 0, i32 2
  %117 = load i32, i32* %mask276, align 4
  %118 = load i32, i32* %to24, align 4
  %shl277 = shl i32 1, %118
  %and278 = and i32 %117, %shl277
  %tobool279 = icmp ne i32 %and278, 0
  %lnot280 = xor i1 %tobool279, true
  br label %land.end.281

land.end.281:                                     ; preds = %land.rhs.273, %while.cond.270
  %119 = phi i1 [ false, %while.cond.270 ], [ %lnot280, %land.rhs.273 ]
  br i1 %119, label %while.body.282, label %while.end.284

while.body.282:                                   ; preds = %land.end.281
  %120 = load i32, i32* %to24, align 4
  %dec283 = add nsw i32 %120, -1
  store i32 %dec283, i32* %to24, align 4
  br label %while.cond.270

while.end.284:                                    ; preds = %land.end.281
  %121 = load i32, i32* %to24, align 4
  %122 = load i32, i32* %j, align 4
  %idxprom285 = sext i32 %122 to i64
  %arrayidx286 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom285
  %to287 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx286, i32 0, i32 1
  store i32 %121, i32* %to287, align 4
  br label %if.end.292

if.else.288:                                      ; preds = %if.end.245
  %123 = load i32, i32* %j, align 4
  %idxprom289 = sext i32 %123 to i64
  %arrayidx290 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom289
  %to291 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx290, i32 0, i32 1
  %124 = load i32, i32* %to291, align 4
  store i32 %124, i32* %to24, align 4
  br label %if.end.292

if.end.292:                                       ; preds = %if.else.288, %while.end.284
  %125 = load i32, i32* %from22, align 4
  %126 = load i32, i32* %to24, align 4
  %cmp293 = icmp sgt i32 %125, %126
  br i1 %cmp293, label %if.then.295, label %if.end.296

if.then.295:                                      ; preds = %if.end.292
  store i32 -1, i32* %retval
  br label %return

if.end.296:                                       ; preds = %if.end.292
  br label %for.inc.297

for.inc.297:                                      ; preds = %if.end.296
  %127 = load i32, i32* %j, align 4
  %dec298 = add nsw i32 %127, -1
  store i32 %dec298, i32* %j, align 4
  %128 = load i32, i32* %from22, align 4
  %dec299 = add nsw i32 %128, -1
  store i32 %dec299, i32* %from22, align 4
  %129 = load i32, i32* %to24, align 4
  %dec300 = add nsw i32 %129, -1
  store i32 %dec300, i32* %to24, align 4
  br label %for.cond.189

for.end.301:                                      ; preds = %for.cond.189
  br label %if.end.302

if.end.302:                                       ; preds = %for.end.301, %lor.lhs.false.182
  br label %if.end.303

if.end.303:                                       ; preds = %if.end.302, %if.then
  br label %for.inc.304

for.inc.304:                                      ; preds = %if.end.303
  %130 = load i32, i32* %i, align 4
  %inc305 = add nsw i32 %130, 1
  store i32 %inc305, i32* %i, align 4
  %131 = load i32, i32* %range_from, align 4
  %inc306 = add nsw i32 %131, 1
  store i32 %inc306, i32* %range_from, align 4
  %132 = load i32, i32* %range_to, align 4
  %inc307 = add nsw i32 %132, 1
  store i32 %inc307, i32* %range_to, align 4
  %133 = load i32, i32* %range_mask, align 4
  %shl308 = shl i32 %133, 1
  store i32 %shl308, i32* %range_mask, align 4
  br label %for.cond.8

for.end.309:                                      ; preds = %for.cond.8
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.310

for.cond.310:                                     ; preds = %for.inc.345, %for.end.309
  %134 = load i32, i32* %i, align 4
  %135 = load i32, i32* %n.addr, align 4
  %cmp311 = icmp slt i32 %134, %135
  br i1 %cmp311, label %for.body.313, label %for.end.347

for.body.313:                                     ; preds = %for.cond.310
  %136 = load i32, i32* %j, align 4
  %137 = load i32, i32* %i, align 4
  %idxprom314 = sext i32 %137 to i64
  %arrayidx315 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom314
  %from316 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx315, i32 0, i32 0
  %138 = load i32, i32* %from316, align 4
  %cmp317 = icmp slt i32 %136, %138
  br i1 %cmp317, label %if.then.319, label %if.end.339

if.then.319:                                      ; preds = %for.body.313
  %139 = load i32, i32* %i, align 4
  %cmp320 = icmp eq i32 %139, 0
  br i1 %cmp320, label %if.then.329, label %lor.lhs.false.322

lor.lhs.false.322:                                ; preds = %if.then.319
  %140 = load i32, i32* %i, align 4
  %sub323 = sub nsw i32 %140, 1
  %idxprom324 = sext i32 %sub323 to i64
  %arrayidx325 = getelementptr inbounds [14 x i64], [14 x i64]* %tmp, i32 0, i64 %idxprom324
  %141 = load i64, i64* %arrayidx325, align 8
  %call326 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp327 = icmp eq i64 %141, %call326
  br i1 %cmp327, label %if.end.330, label %if.then.329

if.then.329:                                      ; preds = %lor.lhs.false.322, %if.then.319
  store i32 -1, i32* %retval
  br label %return

if.end.330:                                       ; preds = %lor.lhs.false.322
  %142 = load i64*, i64** %field.addr, align 8
  %143 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %143 to i64
  %add.ptr = getelementptr inbounds i64, i64* %142, i64 %idx.ext
  %144 = bitcast i64* %add.ptr to i8*
  %145 = load i32, i32* %i, align 4
  %idxprom331 = sext i32 %145 to i64
  %arrayidx332 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom331
  %from333 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx332, i32 0, i32 0
  %146 = load i32, i32* %from333, align 4
  %147 = load i32, i32* %j, align 4
  %sub334 = sub nsw i32 %146, %147
  %mul = mul nsw i32 %sub334, 8
  %conv335 = sext i32 %mul to i64
  call void @memclear(i8* %144, i64 %conv335)
  %148 = load i32, i32* %i, align 4
  %idxprom336 = sext i32 %148 to i64
  %arrayidx337 = getelementptr inbounds [14 x %struct.anon.13], [14 x %struct.anon.13]* %range, i32 0, i64 %idxprom336
  %from338 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %arrayidx337, i32 0, i32 0
  %149 = load i32, i32* %from338, align 4
  store i32 %149, i32* %j, align 4
  br label %if.end.339

if.end.339:                                       ; preds = %if.end.330, %for.body.313
  %150 = load i32, i32* %i, align 4
  %idxprom340 = sext i32 %150 to i64
  %arrayidx341 = getelementptr inbounds [14 x i64], [14 x i64]* %tmp, i32 0, i64 %idxprom340
  %151 = load i64, i64* %arrayidx341, align 8
  %152 = load i32, i32* %j, align 4
  %inc342 = add nsw i32 %152, 1
  store i32 %inc342, i32* %j, align 4
  %idxprom343 = sext i32 %152 to i64
  %153 = load i64*, i64** %field.addr, align 8
  %arrayidx344 = getelementptr inbounds i64, i64* %153, i64 %idxprom343
  store i64 %151, i64* %arrayidx344, align 8
  br label %for.inc.345

for.inc.345:                                      ; preds = %if.end.339
  %154 = load i32, i32* %i, align 4
  %inc346 = add nsw i32 %154, 1
  store i32 %inc346, i32* %i, align 4
  br label %for.cond.310

for.end.347:                                      ; preds = %for.cond.310
  %155 = load i32, i32* %n.addr, align 4
  %sub348 = sub nsw i32 %155, 1
  %idxprom349 = sext i32 %sub348 to i64
  %arrayidx350 = getelementptr inbounds [14 x i64], [14 x i64]* %tmp, i32 0, i64 %idxprom349
  %156 = load i64, i64* %arrayidx350, align 8
  %call351 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp352 = icmp eq i64 %156, %call351
  br i1 %cmp352, label %if.end.358, label %land.lhs.true.354

land.lhs.true.354:                                ; preds = %for.end.347
  %157 = load i32, i32* %j, align 4
  %cmp355 = icmp slt i32 %157, 12
  br i1 %cmp355, label %if.then.357, label %if.end.358

if.then.357:                                      ; preds = %land.lhs.true.354
  store i32 -1, i32* %retval
  br label %return

if.end.358:                                       ; preds = %land.lhs.true.354, %for.end.347
  %158 = load i64*, i64** %field.addr, align 8
  %159 = load i32, i32* %j, align 4
  %idx.ext359 = sext i32 %159 to i64
  %add.ptr360 = getelementptr inbounds i64, i64* %158, i64 %idx.ext359
  %160 = bitcast i64* %add.ptr360 to i8*
  %161 = load i32, i32* %j, align 4
  %sub361 = sub nsw i32 14, %161
  %mul362 = mul nsw i32 %sub361, 8
  %conv363 = sext i32 %mul362 to i64
  call void @memclear(i8* %160, i64 %conv363)
  %162 = load i64*, i64** %field.addr, align 8
  %arrayidx364 = getelementptr inbounds i64, i64* %162, i64 13
  %163 = load i64, i64* %arrayidx364, align 8
  %and365 = and i64 %163, 7
  %conv366 = trunc i64 %and365 to i32
  %and367 = and i32 %conv366, -5
  %cmp368 = icmp eq i32 %and367, 2
  br i1 %cmp368, label %if.then.370, label %if.end.376

if.then.370:                                      ; preds = %if.end.358
  %164 = load i64*, i64** %field.addr, align 8
  %arrayidx371 = getelementptr inbounds i64, i64* %164, i64 13
  %165 = load i64, i64* %arrayidx371, align 8
  %call372 = call i64 @Fnumber_to_string(i64 %165)
  %call373 = call i64 @builtin_lisp_symbol(i32 0)
  %call374 = call i64 @Fintern(i64 %call372, i64 %call373)
  %166 = load i64*, i64** %field.addr, align 8
  %arrayidx375 = getelementptr inbounds i64, i64* %166, i64 13
  store i64 %call374, i64* %arrayidx375, align 8
  br label %if.end.376

if.end.376:                                       ; preds = %if.then.370, %if.end.358
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.376, %if.then.357, %if.then.329, %if.then.295, %if.then.169
  %167 = load i32, i32* %retval
  ret i32 %167
}

declare i64 @concat2(i64, i64) #1

declare i64 @concat3(i64, i64, i64) #1

declare i64 @Fintern(i64, i64) #1

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #3

declare i64 @SBYTES(i64) #1

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #4

declare i8* @SDATA(i64) #1

declare zeroext i8 @SREF(i64, i64) #1

declare double @XFLOAT_DATA(i64) #1

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #4

; Function Attrs: nounwind uwtable
define void @font_parse_family_registry(i64 %family, i64 %registry, i64 %font_spec) #0 {
entry:
  %family.addr = alloca i64, align 8
  %registry.addr = alloca i64, align 8
  %font_spec.addr = alloca i64, align 8
  %len = alloca i64, align 8
  %p0 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %extra = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  store i64 %family, i64* %family.addr, align 8
  store i64 %registry, i64* %registry.addr, align 8
  store i64 %font_spec, i64* %font_spec.addr, align 8
  %0 = load i64, i64* %family.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.end.34, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %font_spec.addr, align 8
  %call1 = call i64 @AREF(i64 %1, i64 2)
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %call1, %call2
  br i1 %cmp3, label %if.then, label %if.end.34

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %family.addr, align 8
  call void @CHECK_STRING(i64 %2)
  %3 = load i64, i64* %family.addr, align 8
  %call4 = call i64 @SBYTES(i64 %3)
  store i64 %call4, i64* %len, align 8
  %4 = load i64, i64* %family.addr, align 8
  %call5 = call i8* @SSDATA(i64 %4)
  store i8* %call5, i8** %p0, align 8
  %5 = load i8*, i8** %p0, align 8
  %call6 = call i8* @strchr(i8* %5, i32 45) #6
  store i8* %call6, i8** %p1, align 8
  %6 = load i8*, i8** %p1, align 8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then
  %7 = load i8*, i8** %p0, align 8
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp8 = icmp ne i32 %conv, 42
  br i1 %cmp8, label %land.lhs.true.10, label %if.end

land.lhs.true.10:                                 ; preds = %if.then.7
  %9 = load i8*, i8** %p1, align 8
  %10 = load i8*, i8** %p0, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp11 = icmp sgt i64 %sub.ptr.sub, 0
  br i1 %cmp11, label %land.lhs.true.13, label %if.end

land.lhs.true.13:                                 ; preds = %land.lhs.true.10
  %11 = load i64, i64* %font_spec.addr, align 8
  %call14 = call i64 @AREF(i64 %11, i64 1)
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp16 = icmp eq i64 %call14, %call15
  br i1 %cmp16, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %land.lhs.true.13
  %12 = load i64, i64* %font_spec.addr, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 48)
  %13 = load i8*, i8** %p0, align 8
  %14 = load i8*, i8** %p1, align 8
  %15 = load i8*, i8** %p0, align 8
  %sub.ptr.lhs.cast20 = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast21 = ptrtoint i8* %15 to i64
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
  %call23 = call i64 @font_intern_prop(i8* %13, i64 %sub.ptr.sub22, i1 zeroext true)
  %call24 = call i64 @Ffont_put(i64 %12, i64 %call19, i64 %call23)
  br label %if.end

if.end:                                           ; preds = %if.then.18, %land.lhs.true.13, %land.lhs.true.10, %if.then.7
  %16 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  %17 = load i8*, i8** %p1, align 8
  %18 = load i8*, i8** %p0, align 8
  %sub.ptr.lhs.cast25 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast26 = ptrtoint i8* %18 to i64
  %sub.ptr.sub27 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast26
  %19 = load i64, i64* %len, align 8
  %sub = sub nsw i64 %19, %sub.ptr.sub27
  store i64 %sub, i64* %len, align 8
  %20 = load i64, i64* %font_spec.addr, align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 40)
  %21 = load i8*, i8** %p1, align 8
  %22 = load i64, i64* %len, align 8
  %call29 = call i64 @font_intern_prop(i8* %21, i64 %22, i1 zeroext true)
  %call30 = call i64 @Ffont_put(i64 %20, i64 %call28, i64 %call29)
  br label %if.end.33

if.else:                                          ; preds = %if.then
  %23 = load i64, i64* %font_spec.addr, align 8
  %24 = load i64, i64* %family.addr, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %call32 = call i64 @Fintern(i64 %24, i64 %call31)
  call void @ASET(i64 %23, i64 2, i64 %call32)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.end
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %land.lhs.true, %entry
  %25 = load i64, i64* %registry.addr, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp36 = icmp eq i64 %25, %call35
  br i1 %cmp36, label %if.end.69, label %if.then.38

if.then.38:                                       ; preds = %if.end.34
  %26 = load i64, i64* %registry.addr, align 8
  call void @CHECK_STRING(i64 %26)
  %27 = load i64, i64* %registry.addr, align 8
  %call39 = call i64 @SBYTES(i64 %27)
  store i64 %call39, i64* %len, align 8
  %28 = load i64, i64* %registry.addr, align 8
  %call40 = call i8* @SSDATA(i64 %28)
  store i8* %call40, i8** %p0, align 8
  %29 = load i8*, i8** %p0, align 8
  %call41 = call i8* @strchr(i8* %29, i32 45) #6
  store i8* %call41, i8** %p1, align 8
  %30 = load i8*, i8** %p1, align 8
  %tobool42 = icmp ne i8* %30, null
  br i1 %tobool42, label %if.end.65, label %if.then.43

if.then.43:                                       ; preds = %if.then.38
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  %31 = load i64, i64* %len, align 8
  %tobool44 = icmp ne i64 %31, 0
  br i1 %tobool44, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.43
  %32 = load i64, i64* %len, align 8
  %sub45 = sub nsw i64 %32, 1
  %33 = load i8*, i8** %p0, align 8
  %arrayidx = getelementptr inbounds i8, i8* %33, i64 %sub45
  %34 = load i8, i8* %arrayidx, align 1
  %conv46 = sext i8 %34 to i32
  %cmp47 = icmp eq i32 %conv46, 42
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.43
  %35 = phi i1 [ false, %if.then.43 ], [ %cmp47, %land.rhs ]
  %land.ext = zext i1 %35 to i32
  %idxprom = sext i32 %land.ext to i64
  %arrayidx49 = getelementptr inbounds [4 x i8], [4 x i8]* @.str, i32 0, i64 %idxprom
  %call50 = call i64 @strlen(i8* %arrayidx49) #6
  store i64 %call50, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  %36 = load i64, i64* %len, align 8
  %tobool51 = icmp ne i64 %36, 0
  br i1 %tobool51, label %land.rhs.52, label %land.end.58

land.rhs.52:                                      ; preds = %land.end
  %37 = load i64, i64* %len, align 8
  %sub53 = sub nsw i64 %37, 1
  %38 = load i8*, i8** %p0, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %38, i64 %sub53
  %39 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %39 to i32
  %cmp56 = icmp eq i32 %conv55, 42
  br label %land.end.58

land.end.58:                                      ; preds = %land.rhs.52, %land.end
  %40 = phi i1 [ false, %land.end ], [ %cmp56, %land.rhs.52 ]
  %land.ext59 = zext i1 %40 to i32
  %idxprom60 = sext i32 %land.ext59 to i64
  %arrayidx61 = getelementptr inbounds [4 x i8], [4 x i8]* @.str, i32 0, i64 %idxprom60
  store i8* %arrayidx61, i8** %data, align 8
  %s62 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %41 = bitcast %struct.Lisp_String* %s62 to i8*
  %call63 = call i64 @make_lisp_ptr(i8* %41, i32 4)
  store i64 %call63, i64* %extra, align 8
  %42 = load i64, i64* %registry.addr, align 8
  %43 = load i64, i64* %extra, align 8
  %call64 = call i64 @concat2(i64 %42, i64 %43)
  store i64 %call64, i64* %registry.addr, align 8
  br label %if.end.65

if.end.65:                                        ; preds = %land.end.58, %if.then.38
  %44 = load i64, i64* %registry.addr, align 8
  %call66 = call i64 @Fdowncase(i64 %44)
  store i64 %call66, i64* %registry.addr, align 8
  %45 = load i64, i64* %font_spec.addr, align 8
  %46 = load i64, i64* %registry.addr, align 8
  %call67 = call i64 @builtin_lisp_symbol(i32 0)
  %call68 = call i64 @Fintern(i64 %46, i64 %call67)
  call void @ASET(i64 %45, i64 4, i64 %call68)
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.65, %if.end.34
  ret void
}

declare void @CHECK_STRING(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_put(i64 %font, i64 %prop, i64 %val) #0 {
entry:
  %font.addr = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %idx = alloca i32, align 4
  store i64 %font, i64* %font.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %prop.addr, align 8
  %call = call i32 @get_font_prop_index(i64 %0)
  store i32 %call, i32* %idx, align 4
  %1 = load i32, i32* %idx, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %idx, align 4
  %cmp1 = icmp slt i32 %2, 12
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i64, i64* %font.addr, align 8
  call void @CHECK_FONT_SPEC(i64 %3)
  %4 = load i64, i64* %font.addr, align 8
  %5 = load i32, i32* %idx, align 4
  %conv = sext i32 %5 to i64
  %6 = load i32, i32* %idx, align 4
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %7 = load i64, i64* %val.addr, align 8
  %call3 = call i64 @font_prop_validate(i32 %6, i64 %call2, i64 %7)
  call void @ASET(i64 %4, i64 %conv, i64 %call3)
  br label %if.end.22

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i64, i64* %prop.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 86)
  %cmp5 = icmp eq i64 %8, %call4
  br i1 %cmp5, label %if.then.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %9 = load i64, i64* %prop.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 114)
  %cmp8 = icmp eq i64 %9, %call7
  br i1 %cmp8, label %if.then.18, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false
  %10 = load i64, i64* %prop.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 73)
  %cmp12 = icmp eq i64 %10, %call11
  br i1 %cmp12, label %if.then.18, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %lor.lhs.false.10
  %11 = load i64, i64* %prop.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 89)
  %cmp16 = icmp eq i64 %11, %call15
  br i1 %cmp16, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %lor.lhs.false.14, %lor.lhs.false.10, %lor.lhs.false, %if.else
  %12 = load i64, i64* %font.addr, align 8
  call void @CHECK_FONT_SPEC(i64 %12)
  br label %if.end

if.else.19:                                       ; preds = %lor.lhs.false.14
  %13 = load i64, i64* %font.addr, align 8
  call void @CHECK_FONT(i64 %13)
  br label %if.end

if.end:                                           ; preds = %if.else.19, %if.then.18
  %14 = load i64, i64* %font.addr, align 8
  %15 = load i64, i64* %prop.addr, align 8
  %16 = load i64, i64* %prop.addr, align 8
  %17 = load i64, i64* %val.addr, align 8
  %call20 = call i64 @font_prop_validate(i32 0, i64 %16, i64 %17)
  %call21 = call i64 @font_put_extra(i64 %14, i64 %15, i64 %call20)
  br label %if.end.22

if.end.22:                                        ; preds = %if.end, %if.then
  %18 = load i64, i64* %val.addr, align 8
  ret i64 %18
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #3

declare i64 @Fdowncase(i64) #1

; Function Attrs: nounwind uwtable
define void @font_update_sort_order(i32* %order) #0 {
entry:
  %order.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %shift_bits = alloca i32, align 4
  %xlfd_idx = alloca i32, align 4
  store i32* %order, i32** %order.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 23, i32* %shift_bits, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i32*, i32** %order.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %xlfd_idx, align 4
  %4 = load i32, i32* %xlfd_idx, align 4
  %cmp1 = icmp eq i32 %4, 2
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %shift_bits, align 4
  store i32 %5, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 5), align 4
  br label %if.end.9

if.else:                                          ; preds = %for.body
  %6 = load i32, i32* %xlfd_idx, align 4
  %cmp2 = icmp eq i32 %6, 3
  br i1 %cmp2, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %if.else
  %7 = load i32, i32* %shift_bits, align 4
  store i32 %7, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 6), align 4
  br label %if.end.8

if.else.4:                                        ; preds = %if.else
  %8 = load i32, i32* %xlfd_idx, align 4
  %cmp5 = icmp eq i32 %8, 4
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %if.else.4
  %9 = load i32, i32* %shift_bits, align 4
  store i32 %9, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 7), align 4
  br label %if.end

if.else.7:                                        ; preds = %if.else.4
  %10 = load i32, i32* %shift_bits, align 4
  store i32 %10, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 8), align 4
  br label %if.end

if.end:                                           ; preds = %if.else.7, %if.then.6
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then.3
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end.9
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  %12 = load i32, i32* %shift_bits, align 4
  %sub = sub nsw i32 %12, 7
  store i32 %sub, i32* %shift_bits, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define zeroext i1 @font_match_p(i64 %spec, i64 %font) #0 {
entry:
  %retval = alloca i1, align 1
  %spec.addr = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %prop = alloca [13 x i64], align 16
  %props = alloca i64*, align 8
  %extra = alloca i64, align 8
  %font_extra = alloca i64, align 8
  %i = alloca i32, align 4
  %key = alloca i64, align 8
  %val = alloca i64, align 8
  %val2 = alloca i64, align 8
  %fontp = alloca %struct.font*, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %font, i64* %font.addr, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %spec.addr, align 8
  %2 = load i32, i32* %i, align 4
  %conv = sext i32 %2 to i64
  %call = call i64 @AREF(i64 %1, i64 %conv)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %call, %call1
  br i1 %cmp2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %3 = load i64, i64* %font.addr, align 8
  %4 = load i32, i32* %i, align 4
  %conv4 = sext i32 %4 to i64
  %call5 = call i64 @AREF(i64 %3, i64 %conv4)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %call5, %call6
  br i1 %cmp7, label %if.end, label %land.lhs.true.9

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %5 = load i64, i64* %spec.addr, align 8
  %6 = load i32, i32* %i, align 4
  %conv10 = sext i32 %6 to i64
  %call11 = call i64 @AREF(i64 %5, i64 %conv10)
  %7 = load i64, i64* %font.addr, align 8
  %8 = load i32, i32* %i, align 4
  %conv12 = sext i32 %8 to i64
  %call13 = call i64 @AREF(i64 %7, i64 %conv12)
  %cmp14 = icmp eq i64 %call11, %call13
  br i1 %cmp14, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.9
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.9, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i64, i64* %spec.addr, align 8
  %call16 = call %struct.font_spec* @XFONT_SPEC(i64 %10)
  %props17 = getelementptr inbounds %struct.font_spec, %struct.font_spec* %call16, i32 0, i32 1
  %arraydecay = getelementptr inbounds [13 x i64], [13 x i64]* %props17, i32 0, i32 0
  store i64* %arraydecay, i64** %props, align 8
  %11 = load i64*, i64** %props, align 8
  %arrayidx = getelementptr inbounds i64, i64* %11, i64 8
  %12 = load i64, i64* %arrayidx, align 8
  %and = and i64 %12, 7
  %conv18 = trunc i64 %and to i32
  %cmp19 = icmp eq i32 %conv18, 7
  br i1 %cmp19, label %if.then.21, label %if.end.36

if.then.21:                                       ; preds = %for.end
  store i32 1, i32* %i, align 4
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc.29, %if.then.21
  %13 = load i32, i32* %i, align 4
  %cmp23 = icmp slt i32 %13, 8
  br i1 %cmp23, label %for.body.25, label %for.end.31

for.body.25:                                      ; preds = %for.cond.22
  %14 = load i64, i64* %spec.addr, align 8
  %15 = load i32, i32* %i, align 4
  %conv26 = sext i32 %15 to i64
  %call27 = call i64 @AREF(i64 %14, i64 %conv26)
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx28 = getelementptr inbounds [13 x i64], [13 x i64]* %prop, i32 0, i64 %idxprom
  store i64 %call27, i64* %arrayidx28, align 8
  br label %for.inc.29

for.inc.29:                                       ; preds = %for.body.25
  %17 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %17, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond.22

for.end.31:                                       ; preds = %for.cond.22
  %18 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  %21 = load i64, i64* %spec.addr, align 8
  %call32 = call i32 @font_pixel_size(%struct.frame* %20, i64 %21)
  %conv33 = sext i32 %call32 to i64
  %shl = shl i64 %conv33, 2
  %add = add i64 %shl, 2
  %arrayidx34 = getelementptr inbounds [13 x i64], [13 x i64]* %prop, i32 0, i64 8
  store i64 %add, i64* %arrayidx34, align 8
  %arraydecay35 = getelementptr inbounds [13 x i64], [13 x i64]* %prop, i32 0, i32 0
  store i64* %arraydecay35, i64** %props, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %for.end.31, %for.end
  %22 = load i64, i64* %font.addr, align 8
  %23 = load i64*, i64** %props, align 8
  %call37 = call i32 @font_score(i64 %22, i64* %23)
  %cmp38 = icmp ugt i32 %call37, 0
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %if.end.36
  store i1 false, i1* %retval
  br label %return

if.end.41:                                        ; preds = %if.end.36
  %24 = load i64, i64* %spec.addr, align 8
  %call42 = call i64 @AREF(i64 %24, i64 12)
  store i64 %call42, i64* %extra, align 8
  %25 = load i64, i64* %font.addr, align 8
  %call43 = call i64 @AREF(i64 %25, i64 12)
  store i64 %call43, i64* %font_extra, align 8
  br label %for.cond.44

for.cond.44:                                      ; preds = %for.inc.221, %if.end.41
  %26 = load i64, i64* %extra, align 8
  %and45 = and i64 %26, 7
  %conv46 = trunc i64 %and45 to i32
  %cmp47 = icmp eq i32 %conv46, 3
  br i1 %cmp47, label %for.body.49, label %for.end.225

for.body.49:                                      ; preds = %for.cond.44
  %27 = load i64, i64* %extra, align 8
  %sub50 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub50 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car, align 8
  %sub51 = sub nsw i64 %30, 3
  %31 = inttoptr i64 %sub51 to i8*
  %32 = bitcast i8* %31 to %struct.Lisp_Cons*
  %car52 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %32, i32 0, i32 0
  %33 = load i64, i64* %car52, align 8
  store i64 %33, i64* %key, align 8
  %34 = load i64, i64* %extra, align 8
  %sub53 = sub nsw i64 %34, 3
  %35 = inttoptr i64 %sub53 to i8*
  %36 = bitcast i8* %35 to %struct.Lisp_Cons*
  %car54 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %36, i32 0, i32 0
  %37 = load i64, i64* %car54, align 8
  %sub55 = sub nsw i64 %37, 3
  %38 = inttoptr i64 %sub55 to i8*
  %39 = bitcast i8* %38 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %39, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %40 = load i64, i64* %cdr, align 8
  store i64 %40, i64* %val, align 8
  %41 = load i64, i64* %key, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 73)
  %cmp57 = icmp eq i64 %41, %call56
  br i1 %cmp57, label %if.then.59, label %if.else.106

if.then.59:                                       ; preds = %for.body.49
  %42 = load i64, i64* %key, align 8
  %43 = load i64, i64* %font_extra, align 8
  %call60 = call i64 @assq_no_quit(i64 %42, i64 %43)
  store i64 %call60, i64* %val2, align 8
  %44 = load i64, i64* %val2, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %44, %call61
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.then.59
  store i1 false, i1* %retval
  br label %return

if.end.65:                                        ; preds = %if.then.59
  %45 = load i64, i64* %val2, align 8
  %sub66 = sub nsw i64 %45, 3
  %46 = inttoptr i64 %sub66 to i8*
  %47 = bitcast i8* %46 to %struct.Lisp_Cons*
  %u67 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %47, i32 0, i32 1
  %cdr68 = bitcast %union.anon.10* %u67 to i64*
  %48 = load i64, i64* %cdr68, align 8
  store i64 %48, i64* %val2, align 8
  %49 = load i64, i64* %val, align 8
  %and69 = and i64 %49, 7
  %conv70 = trunc i64 %and69 to i32
  %cmp71 = icmp eq i32 %conv70, 3
  br i1 %cmp71, label %if.then.73, label %if.else

if.then.73:                                       ; preds = %if.end.65
  %50 = load i64, i64* %val2, align 8
  %and74 = and i64 %50, 7
  %conv75 = trunc i64 %and74 to i32
  %cmp76 = icmp eq i32 %conv75, 3
  br i1 %cmp76, label %if.end.79, label %if.then.78

if.then.78:                                       ; preds = %if.then.73
  store i1 false, i1* %retval
  br label %return

if.end.79:                                        ; preds = %if.then.73
  br label %while.cond

while.cond:                                       ; preds = %if.end.89, %if.end.79
  %51 = load i64, i64* %val, align 8
  %and80 = and i64 %51, 7
  %conv81 = trunc i64 %and80 to i32
  %cmp82 = icmp eq i32 %conv81, 3
  br i1 %cmp82, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %52 = load i64, i64* %val, align 8
  %53 = load i64, i64* %val2, align 8
  %call84 = call i64 @Fmemq(i64 %52, i64 %53)
  %call85 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp86 = icmp eq i64 %call84, %call85
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %while.body
  store i1 false, i1* %retval
  br label %return

if.end.89:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.105

if.else:                                          ; preds = %if.end.65
  %54 = load i64, i64* %val2, align 8
  %and90 = and i64 %54, 7
  %conv91 = trunc i64 %and90 to i32
  %cmp92 = icmp eq i32 %conv91, 3
  br i1 %cmp92, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %55 = load i64, i64* %val, align 8
  %56 = load i64, i64* %val2, align 8
  %sub94 = sub nsw i64 %56, 3
  %57 = inttoptr i64 %sub94 to i8*
  %58 = bitcast i8* %57 to %struct.Lisp_Cons*
  %u95 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %58, i32 0, i32 1
  %cdr96 = bitcast %union.anon.10* %u95 to i64*
  %59 = load i64, i64* %cdr96, align 8
  %call97 = call i64 @Fmemq(i64 %55, i64 %59)
  %call98 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp99 = icmp eq i64 %call97, %call98
  br i1 %cmp99, label %if.then.103, label %if.end.104

cond.false:                                       ; preds = %if.else
  %60 = load i64, i64* %val, align 8
  %61 = load i64, i64* %val2, align 8
  %cmp101 = icmp eq i64 %60, %61
  br i1 %cmp101, label %if.end.104, label %if.then.103

if.then.103:                                      ; preds = %cond.false, %cond.true
  store i1 false, i1* %retval
  br label %return

if.end.104:                                       ; preds = %cond.false, %cond.true
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %while.end
  br label %if.end.220

if.else.106:                                      ; preds = %for.body.49
  %62 = load i64, i64* %key, align 8
  %call107 = call i64 @builtin_lisp_symbol(i32 114)
  %cmp108 = icmp eq i64 %62, %call107
  br i1 %cmp108, label %if.then.110, label %if.else.198

if.then.110:                                      ; preds = %if.else.106
  %63 = load i64, i64* %val, align 8
  %64 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 260), align 8
  %call111 = call i64 @assq_no_quit(i64 %63, i64 %64)
  store i64 %call111, i64* %val2, align 8
  %65 = load i64, i64* %val2, align 8
  %and112 = and i64 %65, 7
  %conv113 = trunc i64 %and112 to i32
  %cmp114 = icmp eq i32 %conv113, 3
  br i1 %cmp114, label %if.then.116, label %if.end.197

if.then.116:                                      ; preds = %if.then.110
  %66 = load i64, i64* %val2, align 8
  %sub117 = sub nsw i64 %66, 3
  %67 = inttoptr i64 %sub117 to i8*
  %68 = bitcast i8* %67 to %struct.Lisp_Cons*
  %u118 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %68, i32 0, i32 1
  %cdr119 = bitcast %union.anon.10* %u118 to i64*
  %69 = load i64, i64* %cdr119, align 8
  store i64 %69, i64* %val2, align 8
  %70 = load i64, i64* %val2, align 8
  %and120 = and i64 %70, 7
  %conv121 = trunc i64 %and120 to i32
  %cmp122 = icmp eq i32 %conv121, 3
  br i1 %cmp122, label %if.then.124, label %if.else.156

if.then.124:                                      ; preds = %if.then.116
  br label %for.cond.125

for.cond.125:                                     ; preds = %for.inc.151, %if.then.124
  %71 = load i64, i64* %val2, align 8
  %and126 = and i64 %71, 7
  %conv127 = trunc i64 %and126 to i32
  %cmp128 = icmp eq i32 %conv127, 3
  br i1 %cmp128, label %for.body.130, label %for.end.155

for.body.130:                                     ; preds = %for.cond.125
  %72 = load i64, i64* %val2, align 8
  %sub131 = sub nsw i64 %72, 3
  %73 = inttoptr i64 %sub131 to i8*
  %74 = bitcast i8* %73 to %struct.Lisp_Cons*
  %car132 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %74, i32 0, i32 0
  %75 = load i64, i64* %car132, align 8
  %call133 = call zeroext i1 @NATNUMP(i64 %75)
  br i1 %call133, label %land.lhs.true.135, label %if.then.140

land.lhs.true.135:                                ; preds = %for.body.130
  %76 = load i64, i64* %val2, align 8
  %sub136 = sub nsw i64 %76, 3
  %77 = inttoptr i64 %sub136 to i8*
  %78 = bitcast i8* %77 to %struct.Lisp_Cons*
  %car137 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %78, i32 0, i32 0
  %79 = load i64, i64* %car137, align 8
  %shr = ashr i64 %79, 2
  %cmp138 = icmp sle i64 %shr, 4194303
  br i1 %cmp138, label %if.end.141, label %if.then.140

if.then.140:                                      ; preds = %land.lhs.true.135, %for.body.130
  br label %for.inc.151

if.end.141:                                       ; preds = %land.lhs.true.135
  %80 = load i64, i64* %font.addr, align 8
  %81 = load i64, i64* %val2, align 8
  %sub142 = sub nsw i64 %81, 3
  %82 = inttoptr i64 %sub142 to i8*
  %83 = bitcast i8* %82 to %struct.Lisp_Cons*
  %car143 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %83, i32 0, i32 0
  %84 = load i64, i64* %car143, align 8
  %shr144 = ashr i64 %84, 2
  %conv145 = trunc i64 %shr144 to i32
  %call146 = call i32 @font_encode_char(i64 %80, i32 %conv145)
  %cmp147 = icmp eq i32 %call146, -1
  br i1 %cmp147, label %if.then.149, label %if.end.150

if.then.149:                                      ; preds = %if.end.141
  store i1 false, i1* %retval
  br label %return

if.end.150:                                       ; preds = %if.end.141
  br label %for.inc.151

for.inc.151:                                      ; preds = %if.end.150, %if.then.140
  %85 = load i64, i64* %val2, align 8
  %sub152 = sub nsw i64 %85, 3
  %86 = inttoptr i64 %sub152 to i8*
  %87 = bitcast i8* %86 to %struct.Lisp_Cons*
  %u153 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %87, i32 0, i32 1
  %cdr154 = bitcast %union.anon.10* %u153 to i64*
  %88 = load i64, i64* %cdr154, align 8
  store i64 %88, i64* %val2, align 8
  br label %for.cond.125

for.end.155:                                      ; preds = %for.cond.125
  br label %if.end.196

if.else.156:                                      ; preds = %if.then.116
  %89 = load i64, i64* %val2, align 8
  %call157 = call zeroext i1 @VECTORP(i64 %89)
  br i1 %call157, label %if.then.158, label %if.end.195

if.then.158:                                      ; preds = %if.else.156
  store i32 0, i32* %i, align 4
  br label %for.cond.159

for.cond.159:                                     ; preds = %for.inc.186, %if.then.158
  %90 = load i32, i32* %i, align 4
  %conv160 = sext i32 %90 to i64
  %91 = load i64, i64* %val2, align 8
  %call161 = call i64 @ASIZE(i64 %91)
  %cmp162 = icmp slt i64 %conv160, %call161
  br i1 %cmp162, label %for.body.164, label %for.end.188

for.body.164:                                     ; preds = %for.cond.159
  %92 = load i64, i64* %val2, align 8
  %93 = load i32, i32* %i, align 4
  %conv165 = sext i32 %93 to i64
  %call166 = call i64 @AREF(i64 %92, i64 %conv165)
  %call167 = call zeroext i1 @NATNUMP(i64 %call166)
  br i1 %call167, label %land.lhs.true.169, label %if.then.175

land.lhs.true.169:                                ; preds = %for.body.164
  %94 = load i64, i64* %val2, align 8
  %95 = load i32, i32* %i, align 4
  %conv170 = sext i32 %95 to i64
  %call171 = call i64 @AREF(i64 %94, i64 %conv170)
  %shr172 = ashr i64 %call171, 2
  %cmp173 = icmp sle i64 %shr172, 4194303
  br i1 %cmp173, label %if.end.176, label %if.then.175

if.then.175:                                      ; preds = %land.lhs.true.169, %for.body.164
  br label %for.inc.186

if.end.176:                                       ; preds = %land.lhs.true.169
  %96 = load i64, i64* %font.addr, align 8
  %97 = load i64, i64* %val2, align 8
  %98 = load i32, i32* %i, align 4
  %conv177 = sext i32 %98 to i64
  %call178 = call i64 @AREF(i64 %97, i64 %conv177)
  %shr179 = ashr i64 %call178, 2
  %conv180 = trunc i64 %shr179 to i32
  %call181 = call i32 @font_encode_char(i64 %96, i32 %conv180)
  %cmp182 = icmp ne i32 %call181, -1
  br i1 %cmp182, label %if.then.184, label %if.end.185

if.then.184:                                      ; preds = %if.end.176
  br label %for.end.188

if.end.185:                                       ; preds = %if.end.176
  br label %for.inc.186

for.inc.186:                                      ; preds = %if.end.185, %if.then.175
  %99 = load i32, i32* %i, align 4
  %inc187 = add nsw i32 %99, 1
  store i32 %inc187, i32* %i, align 4
  br label %for.cond.159

for.end.188:                                      ; preds = %if.then.184, %for.cond.159
  %100 = load i32, i32* %i, align 4
  %conv189 = sext i32 %100 to i64
  %101 = load i64, i64* %val2, align 8
  %call190 = call i64 @ASIZE(i64 %101)
  %cmp191 = icmp eq i64 %conv189, %call190
  br i1 %cmp191, label %if.then.193, label %if.end.194

if.then.193:                                      ; preds = %for.end.188
  store i1 false, i1* %retval
  br label %return

if.end.194:                                       ; preds = %for.end.188
  br label %if.end.195

if.end.195:                                       ; preds = %if.end.194, %if.else.156
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195, %for.end.155
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %if.then.110
  br label %if.end.219

if.else.198:                                      ; preds = %if.else.106
  %102 = load i64, i64* %key, align 8
  %call199 = call i64 @builtin_lisp_symbol(i32 89)
  %cmp200 = icmp eq i64 %102, %call199
  br i1 %cmp200, label %if.then.202, label %if.end.218

if.then.202:                                      ; preds = %if.else.198
  %103 = load i64, i64* %font.addr, align 8
  %call203 = call zeroext i1 @FONT_OBJECT_P(i64 %103)
  br i1 %call203, label %if.end.205, label %if.then.204

if.then.204:                                      ; preds = %if.then.202
  store i1 false, i1* %retval
  br label %return

if.end.205:                                       ; preds = %if.then.202
  %104 = load i64, i64* %font.addr, align 8
  %call206 = call %struct.font* @XFONT_OBJECT(i64 %104)
  store %struct.font* %call206, %struct.font** %fontp, align 8
  %105 = load %struct.font*, %struct.font** %fontp, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %105, i32 0, i32 18
  %106 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %otf_capability = getelementptr inbounds %struct.font_driver, %struct.font_driver* %106, i32 0, i32 18
  %107 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability, align 8
  %tobool = icmp ne i64 (%struct.font*)* %107, null
  br i1 %tobool, label %if.end.208, label %if.then.207

if.then.207:                                      ; preds = %if.end.205
  store i1 false, i1* %retval
  br label %return

if.end.208:                                       ; preds = %if.end.205
  %108 = load %struct.font*, %struct.font** %fontp, align 8
  %driver209 = getelementptr inbounds %struct.font, %struct.font* %108, i32 0, i32 18
  %109 = load %struct.font_driver*, %struct.font_driver** %driver209, align 8
  %otf_capability210 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %109, i32 0, i32 18
  %110 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability210, align 8
  %111 = load %struct.font*, %struct.font** %fontp, align 8
  %call211 = call i64 %110(%struct.font* %111)
  store i64 %call211, i64* %val2, align 8
  %112 = load i64, i64* %val2, align 8
  %call212 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp213 = icmp eq i64 %112, %call212
  br i1 %cmp213, label %if.then.216, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.208
  %113 = load i64, i64* %val, align 8
  %114 = load i64, i64* %val2, align 8
  %call215 = call zeroext i1 @font_check_otf(i64 %113, i64 %114)
  br i1 %call215, label %if.end.217, label %if.then.216

if.then.216:                                      ; preds = %lor.lhs.false, %if.end.208
  store i1 false, i1* %retval
  br label %return

if.end.217:                                       ; preds = %lor.lhs.false
  br label %if.end.218

if.end.218:                                       ; preds = %if.end.217, %if.else.198
  br label %if.end.219

if.end.219:                                       ; preds = %if.end.218, %if.end.197
  br label %if.end.220

if.end.220:                                       ; preds = %if.end.219, %if.end.105
  br label %for.inc.221

for.inc.221:                                      ; preds = %if.end.220
  %115 = load i64, i64* %extra, align 8
  %sub222 = sub nsw i64 %115, 3
  %116 = inttoptr i64 %sub222 to i8*
  %117 = bitcast i8* %116 to %struct.Lisp_Cons*
  %u223 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %117, i32 0, i32 1
  %cdr224 = bitcast %union.anon.10* %u223 to i64*
  %118 = load i64, i64* %cdr224, align 8
  store i64 %118, i64* %extra, align 8
  br label %for.cond.44

for.end.225:                                      ; preds = %for.cond.44
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %for.end.225, %if.then.216, %if.then.207, %if.then.204, %if.then.193, %if.then.149, %if.then.103, %if.then.88, %if.then.78, %if.then.64, %if.then.40, %if.then
  %119 = load i1, i1* %retval
  ret i1 %119
}

declare %struct.font_spec* @XFONT_SPEC(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @font_pixel_size(%struct.frame* %f, i64 %spec) #0 {
entry:
  %retval = alloca i32, align 4
  %f.addr = alloca %struct.frame*, align 8
  %spec.addr = alloca i64, align 8
  %size = alloca i64, align 8
  %point_size = alloca double, align 8
  %dpi = alloca i32, align 4
  %pixel_size = alloca i32, align 4
  %val = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %call = call i64 @AREF(i64 %0, i64 8)
  store i64 %call, i64* %size, align 8
  %1 = load i64, i64* %size, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %size, align 8
  %shr = ashr i64 %2, 2
  %conv3 = trunc i64 %shr to i32
  store i32 %conv3, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %size, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %3, %call4
  br i1 %cmp5, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %4 = load i64, i64* %size, align 8
  %call9 = call double @XFLOAT_DATA(i64 %4)
  store double %call9, double* %point_size, align 8
  %5 = load i64, i64* %spec.addr, align 8
  %call10 = call i64 @AREF(i64 %5, i64 9)
  store i64 %call10, i64* %val, align 8
  %6 = load i64, i64* %val, align 8
  %and11 = and i64 %6, 7
  %conv12 = trunc i64 %and11 to i32
  %and13 = and i32 %conv12, -5
  %cmp14 = icmp eq i32 %and13, 2
  br i1 %cmp14, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %if.end.8
  %7 = load i64, i64* %val, align 8
  %shr17 = ashr i64 %7, 2
  %conv18 = trunc i64 %shr17 to i32
  store i32 %conv18, i32* %dpi, align 4
  br label %if.end.20

if.else:                                          ; preds = %if.end.8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 44
  %10 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %resy = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 8
  %11 = load double, double* %resy, align 8
  %conv19 = fptosi double %11 to i32
  store i32 %conv19, i32* %dpi, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.16
  %12 = load double, double* %point_size, align 8
  %13 = load i32, i32* %dpi, align 4
  %conv21 = sitofp i32 %13 to double
  %mul = fmul double %12, %conv21
  %div = fdiv double %mul, 7.227000e+01
  %add = fadd double %div, 5.000000e-01
  %conv22 = fptosi double %add to i32
  store i32 %conv22, i32* %pixel_size, align 4
  %14 = load i32, i32* %pixel_size, align 4
  store i32 %14, i32* %retval
  br label %return

return:                                           ; preds = %if.end.20, %if.then.7, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @font_score(i64 %entity, i64* %spec_prop) #0 {
entry:
  %retval = alloca i32, align 4
  %entity.addr = alloca i64, align 8
  %spec_prop.addr = alloca i64*, align 8
  %score = alloca i32, align 4
  %i = alloca i32, align 4
  %diff = alloca i64, align 8
  %diff44 = alloca i64, align 8
  %pixel_size = alloca i64, align 8
  %entity_size = alloca i64, align 8
  store i64 %entity, i64* %entity.addr, align 8
  store i64* %spec_prop, i64** %spec_prop.addr, align 8
  store i32 0, i32* %score, align 4
  store i32 5, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %2, i64 %idxprom
  %3 = load i64, i64* %arrayidx, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1 = icmp eq i64 %3, %call
  br i1 %cmp1, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %4 = load i64, i64* %entity.addr, align 8
  %5 = load i32, i32* %i, align 4
  %conv = sext i32 %5 to i64
  %call2 = call i64 @AREF(i64 %4, i64 %conv)
  %6 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %6 to i64
  %7 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx4 = getelementptr inbounds i64, i64* %7, i64 %idxprom3
  %8 = load i64, i64* %arrayidx4, align 8
  %cmp5 = icmp eq i64 %call2, %8
  br i1 %cmp5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %9 = load i64, i64* %entity.addr, align 8
  %10 = load i32, i32* %i, align 4
  %conv7 = sext i32 %10 to i64
  %call8 = call i64 @AREF(i64 %9, i64 %conv7)
  %shr = ashr i64 %call8, 2
  %shr9 = ashr i64 %shr, 8
  %11 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %11 to i64
  %12 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx11 = getelementptr inbounds i64, i64* %12, i64 %idxprom10
  %13 = load i64, i64* %arrayidx11, align 8
  %shr12 = ashr i64 %13, 2
  %shr13 = ashr i64 %shr12, 8
  %sub = sub nsw i64 %shr9, %shr13
  store i64 %sub, i64* %diff, align 8
  %14 = load i64, i64* %diff, align 8
  %cmp14 = icmp slt i64 %14, 0
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %15 = load i64, i64* %diff, align 8
  %sub16 = sub nsw i64 0, %15
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %16 = load i64, i64* %diff, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub16, %cond.true ], [ %16, %cond.false ]
  %cmp17 = icmp slt i64 %cond, 127
  br i1 %cmp17, label %cond.true.19, label %cond.false.27

cond.true.19:                                     ; preds = %cond.end
  %17 = load i64, i64* %diff, align 8
  %cmp20 = icmp slt i64 %17, 0
  br i1 %cmp20, label %cond.true.22, label %cond.false.24

cond.true.22:                                     ; preds = %cond.true.19
  %18 = load i64, i64* %diff, align 8
  %sub23 = sub nsw i64 0, %18
  br label %cond.end.25

cond.false.24:                                    ; preds = %cond.true.19
  %19 = load i64, i64* %diff, align 8
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.false.24, %cond.true.22
  %cond26 = phi i64 [ %sub23, %cond.true.22 ], [ %19, %cond.false.24 ]
  br label %cond.end.28

cond.false.27:                                    ; preds = %cond.end
  br label %cond.end.28

cond.end.28:                                      ; preds = %cond.false.27, %cond.end.25
  %cond29 = phi i64 [ %cond26, %cond.end.25 ], [ 127, %cond.false.27 ]
  %20 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %20 to i64
  %arrayidx31 = getelementptr inbounds [9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 %idxprom30
  %21 = load i32, i32* %arrayidx31, align 4
  %sh_prom = zext i32 %21 to i64
  %shl = shl i64 %cond29, %sh_prom
  %22 = load i32, i32* %score, align 4
  %conv32 = zext i32 %22 to i64
  %or = or i64 %conv32, %shl
  %conv33 = trunc i64 %or to i32
  store i32 %conv33, i32* %score, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end.28, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx34 = getelementptr inbounds i64, i64* %24, i64 8
  %25 = load i64, i64* %arrayidx34, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp36 = icmp eq i64 %25, %call35
  br i1 %cmp36, label %if.end.111, label %land.lhs.true.38

land.lhs.true.38:                                 ; preds = %for.end
  %26 = load i64, i64* %entity.addr, align 8
  %call39 = call i64 @AREF(i64 %26, i64 8)
  %shr40 = ashr i64 %call39, 2
  %cmp41 = icmp sgt i64 %shr40, 0
  br i1 %cmp41, label %if.then.43, label %if.end.111

if.then.43:                                       ; preds = %land.lhs.true.38
  %27 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx45 = getelementptr inbounds i64, i64* %27, i64 8
  %28 = load i64, i64* %arrayidx45, align 8
  %shr46 = ashr i64 %28, 2
  store i64 %shr46, i64* %pixel_size, align 8
  %29 = load i64, i64* %entity.addr, align 8
  %call47 = call i64 @AREF(i64 %29, i64 8)
  %shr48 = ashr i64 %call47, 2
  store i64 %shr48, i64* %entity_size, align 8
  %30 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 88), align 8
  %and = and i64 %30, 7
  %conv49 = trunc i64 %and to i32
  %cmp50 = icmp eq i32 %conv49, 3
  br i1 %cmp50, label %if.then.52, label %if.end.56

if.then.52:                                       ; preds = %if.then.43
  %31 = load i64, i64* %entity.addr, align 8
  %call53 = call double @font_rescale_ratio(i64 %31)
  %32 = load i64, i64* %pixel_size, align 8
  %conv54 = sitofp i64 %32 to double
  %mul = fmul double %conv54, %call53
  %conv55 = fptosi double %mul to i64
  store i64 %conv55, i64* %pixel_size, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.52, %if.then.43
  %33 = load i64, i64* %pixel_size, align 8
  %mul57 = mul nsw i64 %33, 2
  %34 = load i64, i64* %entity_size, align 8
  %cmp58 = icmp slt i64 %mul57, %34
  br i1 %cmp58, label %if.then.63, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.56
  %35 = load i64, i64* %entity_size, align 8
  %mul60 = mul nsw i64 %35, 2
  %36 = load i64, i64* %pixel_size, align 8
  %cmp61 = icmp slt i64 %mul60, %36
  br i1 %cmp61, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %lor.lhs.false, %if.end.56
  store i32 -1, i32* %retval
  br label %return

if.end.64:                                        ; preds = %lor.lhs.false
  %37 = load i64, i64* %pixel_size, align 8
  %38 = load i64, i64* %entity_size, align 8
  %sub65 = sub nsw i64 %37, %38
  %cmp66 = icmp slt i64 %sub65, 0
  br i1 %cmp66, label %cond.true.68, label %cond.false.71

cond.true.68:                                     ; preds = %if.end.64
  %39 = load i64, i64* %pixel_size, align 8
  %40 = load i64, i64* %entity_size, align 8
  %sub69 = sub nsw i64 %39, %40
  %sub70 = sub nsw i64 0, %sub69
  br label %cond.end.73

cond.false.71:                                    ; preds = %if.end.64
  %41 = load i64, i64* %pixel_size, align 8
  %42 = load i64, i64* %entity_size, align 8
  %sub72 = sub nsw i64 %41, %42
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.71, %cond.true.68
  %cond74 = phi i64 [ %sub70, %cond.true.68 ], [ %sub72, %cond.false.71 ]
  %shl75 = shl i64 %cond74, 1
  store i64 %shl75, i64* %diff44, align 8
  %43 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx76 = getelementptr inbounds i64, i64* %43, i64 9
  %44 = load i64, i64* %arrayidx76, align 8
  %call77 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp78 = icmp eq i64 %44, %call77
  br i1 %cmp78, label %if.end.87, label %land.lhs.true.80

land.lhs.true.80:                                 ; preds = %cond.end.73
  %45 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx81 = getelementptr inbounds i64, i64* %45, i64 9
  %46 = load i64, i64* %arrayidx81, align 8
  %47 = load i64, i64* %entity.addr, align 8
  %call82 = call i64 @AREF(i64 %47, i64 9)
  %cmp83 = icmp eq i64 %46, %call82
  br i1 %cmp83, label %if.end.87, label %if.then.85

if.then.85:                                       ; preds = %land.lhs.true.80
  %48 = load i64, i64* %diff44, align 8
  %or86 = or i64 %48, 1
  store i64 %or86, i64* %diff44, align 8
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.85, %land.lhs.true.80, %cond.end.73
  %49 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx88 = getelementptr inbounds i64, i64* %49, i64 11
  %50 = load i64, i64* %arrayidx88, align 8
  %call89 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp90 = icmp eq i64 %50, %call89
  br i1 %cmp90, label %if.end.99, label %land.lhs.true.92

land.lhs.true.92:                                 ; preds = %if.end.87
  %51 = load i64*, i64** %spec_prop.addr, align 8
  %arrayidx93 = getelementptr inbounds i64, i64* %51, i64 11
  %52 = load i64, i64* %arrayidx93, align 8
  %53 = load i64, i64* %entity.addr, align 8
  %call94 = call i64 @AREF(i64 %53, i64 11)
  %cmp95 = icmp eq i64 %52, %call94
  br i1 %cmp95, label %if.end.99, label %if.then.97

if.then.97:                                       ; preds = %land.lhs.true.92
  %54 = load i64, i64* %diff44, align 8
  %or98 = or i64 %54, 1
  store i64 %or98, i64* %diff44, align 8
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.97, %land.lhs.true.92, %if.end.87
  %55 = load i64, i64* %diff44, align 8
  %cmp100 = icmp slt i64 %55, 127
  br i1 %cmp100, label %cond.true.102, label %cond.false.103

cond.true.102:                                    ; preds = %if.end.99
  %56 = load i64, i64* %diff44, align 8
  br label %cond.end.104

cond.false.103:                                   ; preds = %if.end.99
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.103, %cond.true.102
  %cond105 = phi i64 [ %56, %cond.true.102 ], [ 127, %cond.false.103 ]
  %57 = load i32, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 8), align 4
  %sh_prom106 = zext i32 %57 to i64
  %shl107 = shl i64 %cond105, %sh_prom106
  %58 = load i32, i32* %score, align 4
  %conv108 = zext i32 %58 to i64
  %or109 = or i64 %conv108, %shl107
  %conv110 = trunc i64 %or109 to i32
  store i32 %conv110, i32* %score, align 4
  br label %if.end.111

if.end.111:                                       ; preds = %cond.end.104, %land.lhs.true.38, %for.end
  %59 = load i32, i32* %score, align 4
  store i32 %59, i32* %retval
  br label %return

return:                                           ; preds = %if.end.111, %if.then.63
  %60 = load i32, i32* %retval
  ret i32 %60
}

declare i64 @Fmemq(i64, i64) #1

declare zeroext i1 @NATNUMP(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @font_encode_char(i64 %font_object, i32 %c) #0 {
entry:
  %font_object.addr = alloca i64, align 8
  %c.addr = alloca i32, align 4
  %font = alloca %struct.font*, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* %font_object.addr, align 8
  %call = call %struct.font* @XFONT_OBJECT(i64 %0)
  store %struct.font* %call, %struct.font** %font, align 8
  %1 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %1, i32 0, i32 18
  %2 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %encode_char = getelementptr inbounds %struct.font_driver, %struct.font_driver* %2, i32 0, i32 12
  %3 = load i32 (%struct.font*, i32)*, i32 (%struct.font*, i32)** %encode_char, align 8
  %4 = load %struct.font*, %struct.font** %font, align 8
  %5 = load i32, i32* %c.addr, align 4
  %call1 = call i32 %3(%struct.font* %4, i32 %5)
  ret i32 %call1
}

declare zeroext i1 @VECTORP(i64) #1

declare zeroext i1 @FONT_OBJECT_P(i64) #1

declare %struct.font* @XFONT_OBJECT(i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @font_check_otf(i64 %spec, i64 %otf_capability) #0 {
entry:
  %retval = alloca i1, align 1
  %spec.addr = alloca i64, align 8
  %otf_capability.addr = alloca i64, align 8
  %script = alloca i64, align 8
  %langsys = alloca i64, align 8
  %gsub = alloca i64, align 8
  %gpos = alloca i64, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %otf_capability, i64* %otf_capability.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %langsys, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %gsub, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2, i64* %gpos, align 8
  %0 = load i64, i64* %spec.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 0
  %3 = load i64, i64* %car, align 8
  store i64 %3, i64* %script, align 8
  %4 = load i64, i64* %spec.addr, align 8
  %sub3 = sub nsw i64 %4, 3
  %5 = inttoptr i64 %sub3 to i8*
  %6 = bitcast i8* %5 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %6, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %7 = load i64, i64* %cdr, align 8
  store i64 %7, i64* %spec.addr, align 8
  %8 = load i64, i64* %spec.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %8, %call4
  br i1 %cmp, label %if.end.24, label %if.then

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %spec.addr, align 8
  %sub5 = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub5 to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %car6 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 0
  %12 = load i64, i64* %car6, align 8
  store i64 %12, i64* %langsys, align 8
  %13 = load i64, i64* %spec.addr, align 8
  %sub7 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub7 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u8 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr9 = bitcast %union.anon.10* %u8 to i64*
  %16 = load i64, i64* %cdr9, align 8
  store i64 %16, i64* %spec.addr, align 8
  %17 = load i64, i64* %spec.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %17, %call10
  br i1 %cmp11, label %if.end.23, label %if.then.12

if.then.12:                                       ; preds = %if.then
  %18 = load i64, i64* %spec.addr, align 8
  %sub13 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub13 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car14 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car14, align 8
  store i64 %21, i64* %gsub, align 8
  %22 = load i64, i64* %spec.addr, align 8
  %sub15 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub15 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %u16 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 1
  %cdr17 = bitcast %union.anon.10* %u16 to i64*
  %25 = load i64, i64* %cdr17, align 8
  store i64 %25, i64* %spec.addr, align 8
  %26 = load i64, i64* %spec.addr, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp19 = icmp eq i64 %26, %call18
  br i1 %cmp19, label %if.end, label %if.then.20

if.then.20:                                       ; preds = %if.then.12
  %27 = load i64, i64* %spec.addr, align 8
  %sub21 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub21 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car22 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car22, align 8
  store i64 %30, i64* %gpos, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.20, %if.then.12
  br label %if.end.23

if.end.23:                                        ; preds = %if.end, %if.then
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %entry
  %31 = load i64, i64* %gsub, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %31, %call25
  br i1 %cmp26, label %if.end.31, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.24
  %32 = load i64, i64* %script, align 8
  %33 = load i64, i64* %langsys, align 8
  %34 = load i64, i64* %gsub, align 8
  %35 = load i64, i64* %otf_capability.addr, align 8
  %sub27 = sub nsw i64 %35, 3
  %36 = inttoptr i64 %sub27 to i8*
  %37 = bitcast i8* %36 to %struct.Lisp_Cons*
  %car28 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %37, i32 0, i32 0
  %38 = load i64, i64* %car28, align 8
  %call29 = call zeroext i1 @font_check_otf_features(i64 %32, i64 %33, i64 %34, i64 %38)
  br i1 %call29, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true
  store i1 false, i1* %retval
  br label %return

if.end.31:                                        ; preds = %land.lhs.true, %if.end.24
  %39 = load i64, i64* %gpos, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp33 = icmp eq i64 %39, %call32
  br i1 %cmp33, label %if.end.40, label %land.lhs.true.34

land.lhs.true.34:                                 ; preds = %if.end.31
  %40 = load i64, i64* %script, align 8
  %41 = load i64, i64* %langsys, align 8
  %42 = load i64, i64* %gpos, align 8
  %43 = load i64, i64* %otf_capability.addr, align 8
  %sub35 = sub nsw i64 %43, 3
  %44 = inttoptr i64 %sub35 to i8*
  %45 = bitcast i8* %44 to %struct.Lisp_Cons*
  %u36 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %45, i32 0, i32 1
  %cdr37 = bitcast %union.anon.10* %u36 to i64*
  %46 = load i64, i64* %cdr37, align 8
  %call38 = call zeroext i1 @font_check_otf_features(i64 %40, i64 %41, i64 %42, i64 %46)
  br i1 %call38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %land.lhs.true.34
  store i1 false, i1* %retval
  br label %return

if.end.40:                                        ; preds = %land.lhs.true.34, %if.end.31
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.40, %if.then.39, %if.then.30
  %47 = load i1, i1* %retval
  ret i1 %47
}

; Function Attrs: nounwind uwtable
define i64 @font_list_entities(%struct.frame* %f, i64 %spec) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %spec.addr = alloca i64, align 8
  %driver_list = alloca %struct.font_driver_list*, align 8
  %ftype = alloca i64, align 8
  %val = alloca i64, align 8
  %list = alloca i64, align 8
  %size = alloca i32, align 4
  %need_filtering = alloca i8, align 1
  %i = alloca i32, align 4
  %cache = alloca i64, align 8
  %copy = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 63
  %1 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %1, %struct.font_driver_list** %driver_list, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %list, align 8
  store i8 0, i8* %need_filtering, align 1
  %2 = load i64, i64* %spec.addr, align 8
  %call1 = call i64 @AREF(i64 %2, i64 8)
  %and = and i64 %call1, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %spec.addr, align 8
  %call4 = call i64 @AREF(i64 %3, i64 8)
  %shr = ashr i64 %call4, 2
  %conv5 = trunc i64 %shr to i32
  store i32 %conv5, i32* %size, align 4
  br label %if.end.14

if.else:                                          ; preds = %entry
  %4 = load i64, i64* %spec.addr, align 8
  %call6 = call i64 @AREF(i64 %4, i64 8)
  %and7 = and i64 %call6, 7
  %conv8 = trunc i64 %and7 to i32
  %cmp9 = icmp eq i32 %conv8, 7
  br i1 %cmp9, label %if.then.11, label %if.else.13

if.then.11:                                       ; preds = %if.else
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %6 = load i64, i64* %spec.addr, align 8
  %call12 = call i32 @font_pixel_size(%struct.frame* %5, i64 %6)
  store i32 %call12, i32* %size, align 4
  br label %if.end

if.else.13:                                       ; preds = %if.else
  store i32 0, i32* %size, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.13, %if.then.11
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %if.then
  %7 = load i64, i64* %spec.addr, align 8
  %call15 = call i64 @AREF(i64 %7, i64 0)
  store i64 %call15, i64* %ftype, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.14
  %8 = load i32, i32* %i, align 4
  %cmp16 = icmp sle i32 %8, 4
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* @scratch_font_spec, align 8
  %10 = load i32, i32* %i, align 4
  %conv18 = sext i32 %10 to i64
  %11 = load i64, i64* %spec.addr, align 8
  %12 = load i32, i32* %i, align 4
  %conv19 = sext i32 %12 to i64
  %call20 = call i64 @AREF(i64 %11, i64 %conv19)
  call void @ASET(i64 %9, i64 %conv18, i64 %call20)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 5, i32* %i, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.38, %for.end
  %14 = load i32, i32* %i, align 4
  %cmp22 = icmp slt i32 %14, 12
  br i1 %cmp22, label %for.body.24, label %for.end.40

for.body.24:                                      ; preds = %for.cond.21
  %15 = load i32, i32* %i, align 4
  %cmp25 = icmp ne i32 %15, 10
  br i1 %cmp25, label %if.then.27, label %if.end.37

if.then.27:                                       ; preds = %for.body.24
  %16 = load i64, i64* @scratch_font_spec, align 8
  %17 = load i32, i32* %i, align 4
  %conv28 = sext i32 %17 to i64
  %call29 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %16, i64 %conv28, i64 %call29)
  %18 = load i64, i64* %spec.addr, align 8
  %19 = load i32, i32* %i, align 4
  %conv30 = sext i32 %19 to i64
  %call31 = call i64 @AREF(i64 %18, i64 %conv30)
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp33 = icmp eq i64 %call31, %call32
  br i1 %cmp33, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %if.then.27
  store i8 1, i8* %need_filtering, align 1
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %if.then.27
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %for.body.24
  br label %for.inc.38

for.inc.38:                                       ; preds = %if.end.37
  %20 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %20, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond.21

for.end.40:                                       ; preds = %for.cond.21
  %21 = load i64, i64* @scratch_font_spec, align 8
  %22 = load i64, i64* %spec.addr, align 8
  %call41 = call i64 @AREF(i64 %22, i64 10)
  call void @ASET(i64 %21, i64 10, i64 %call41)
  %23 = load i64, i64* @scratch_font_spec, align 8
  %24 = load i64, i64* %spec.addr, align 8
  %call42 = call i64 @AREF(i64 %24, i64 12)
  call void @ASET(i64 %23, i64 12, i64 %call42)
  br label %for.cond.43

for.cond.43:                                      ; preds = %for.inc.114, %for.end.40
  %25 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool = icmp ne %struct.font_driver_list* %25, null
  br i1 %tobool, label %for.body.44, label %for.end.115

for.body.44:                                      ; preds = %for.cond.43
  %26 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %on = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %26, i32 0, i32 0
  %27 = load i8, i8* %on, align 1
  %tobool45 = trunc i8 %27 to i1
  br i1 %tobool45, label %land.lhs.true, label %if.end.113

land.lhs.true:                                    ; preds = %for.body.44
  %28 = load i64, i64* %ftype, align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp48 = icmp eq i64 %28, %call47
  br i1 %cmp48, label %if.then.52, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %29 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %29, i32 0, i32 1
  %30 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %30, i32 0, i32 0
  %31 = load i64, i64* %type, align 8
  %32 = load i64, i64* %ftype, align 8
  %cmp50 = icmp eq i64 %31, %32
  br i1 %cmp50, label %if.then.52, label %if.end.113

if.then.52:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %34 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver53 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %34, i32 0, i32 1
  %35 = load %struct.font_driver*, %struct.font_driver** %driver53, align 8
  %call54 = call i64 @font_get_cache(%struct.frame* %33, %struct.font_driver* %35)
  store i64 %call54, i64* %cache, align 8
  %36 = load i64, i64* @scratch_font_spec, align 8
  %37 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver55 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %37, i32 0, i32 1
  %38 = load %struct.font_driver*, %struct.font_driver** %driver55, align 8
  %type56 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %38, i32 0, i32 0
  %39 = load i64, i64* %type56, align 8
  call void @ASET(i64 %36, i64 0, i64 %39)
  %40 = load i64, i64* @scratch_font_spec, align 8
  %41 = load i64, i64* %cache, align 8
  %sub = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %44 = load i64, i64* %cdr, align 8
  %call57 = call i64 @assoc_no_quit(i64 %40, i64 %44)
  store i64 %call57, i64* %val, align 8
  %45 = load i64, i64* %val, align 8
  %and58 = and i64 %45, 7
  %conv59 = trunc i64 %and58 to i32
  %cmp60 = icmp eq i32 %conv59, 3
  br i1 %cmp60, label %if.then.62, label %if.else.66

if.then.62:                                       ; preds = %if.then.52
  %46 = load i64, i64* %val, align 8
  %sub63 = sub nsw i64 %46, 3
  %47 = inttoptr i64 %sub63 to i8*
  %48 = bitcast i8* %47 to %struct.Lisp_Cons*
  %u64 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %48, i32 0, i32 1
  %cdr65 = bitcast %union.anon.10* %u64 to i64*
  %49 = load i64, i64* %cdr65, align 8
  store i64 %49, i64* %val, align 8
  br label %if.end.84

if.else.66:                                       ; preds = %if.then.52
  %50 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver67 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %50, i32 0, i32 1
  %51 = load %struct.font_driver*, %struct.font_driver** %driver67, align 8
  %list68 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %51, i32 0, i32 3
  %52 = load i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)** %list68, align 8
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %54 = load i64, i64* @scratch_font_spec, align 8
  %call69 = call i64 %52(%struct.frame* %53, i64 %54)
  store i64 %call69, i64* %val, align 8
  %55 = load i64, i64* %val, align 8
  %call70 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp71 = icmp eq i64 %55, %call70
  br i1 %cmp71, label %if.end.83, label %if.then.73

if.then.73:                                       ; preds = %if.else.66
  %56 = load i64, i64* @scratch_font_spec, align 8
  %call74 = call i64 @copy_font_spec(i64 %56)
  store i64 %call74, i64* %copy, align 8
  %call75 = call i64 @Fvconcat(i64 1, i64* %val)
  store i64 %call75, i64* %val, align 8
  %57 = load i64, i64* %copy, align 8
  %58 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver76 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %58, i32 0, i32 1
  %59 = load %struct.font_driver*, %struct.font_driver** %driver76, align 8
  %type77 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %59, i32 0, i32 0
  %60 = load i64, i64* %type77, align 8
  call void @ASET(i64 %57, i64 0, i64 %60)
  %61 = load i64, i64* %cache, align 8
  %62 = load i64, i64* %copy, align 8
  %63 = load i64, i64* %val, align 8
  %call78 = call i64 @Fcons(i64 %62, i64 %63)
  %64 = load i64, i64* %cache, align 8
  %sub79 = sub nsw i64 %64, 3
  %65 = inttoptr i64 %sub79 to i8*
  %66 = bitcast i8* %65 to %struct.Lisp_Cons*
  %u80 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %66, i32 0, i32 1
  %cdr81 = bitcast %union.anon.10* %u80 to i64*
  %67 = load i64, i64* %cdr81, align 8
  %call82 = call i64 @Fcons(i64 %call78, i64 %67)
  call void @XSETCDR(i64 %61, i64 %call82)
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.73, %if.else.66
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.then.62
  %68 = load i64, i64* %val, align 8
  %call85 = call zeroext i1 @VECTORP(i64 %68)
  br i1 %call85, label %land.lhs.true.87, label %if.end.103

land.lhs.true.87:                                 ; preds = %if.end.84
  %69 = load i64, i64* %val, align 8
  %call88 = call i64 @ASIZE(i64 %69)
  %cmp89 = icmp sgt i64 %call88, 0
  br i1 %cmp89, label %land.lhs.true.91, label %if.end.103

land.lhs.true.91:                                 ; preds = %land.lhs.true.87
  %70 = load i8, i8* %need_filtering, align 1
  %tobool92 = trunc i8 %70 to i1
  br i1 %tobool92, label %if.then.98, label %lor.lhs.false.94

lor.lhs.false.94:                                 ; preds = %land.lhs.true.91
  %71 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 89), align 8
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp96 = icmp eq i64 %71, %call95
  br i1 %cmp96, label %if.end.103, label %if.then.98

if.then.98:                                       ; preds = %lor.lhs.false.94, %land.lhs.true.91
  %72 = load i64, i64* %val, align 8
  %73 = load i8, i8* %need_filtering, align 1
  %tobool99 = trunc i8 %73 to i1
  br i1 %tobool99, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.98
  %74 = load i64, i64* %spec.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.98
  %call101 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %74, %cond.true ], [ %call101, %cond.false ]
  %75 = load i32, i32* %size, align 4
  %call102 = call i64 @font_delete_unmatched(i64 %72, i64 %cond, i32 %75)
  store i64 %call102, i64* %val, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %cond.end, %lor.lhs.false.94, %land.lhs.true.87, %if.end.84
  %76 = load i64, i64* %val, align 8
  %call104 = call zeroext i1 @VECTORP(i64 %76)
  br i1 %call104, label %land.lhs.true.106, label %if.end.112

land.lhs.true.106:                                ; preds = %if.end.103
  %77 = load i64, i64* %val, align 8
  %call107 = call i64 @ASIZE(i64 %77)
  %cmp108 = icmp sgt i64 %call107, 0
  br i1 %cmp108, label %if.then.110, label %if.end.112

if.then.110:                                      ; preds = %land.lhs.true.106
  %78 = load i64, i64* %val, align 8
  %79 = load i64, i64* %list, align 8
  %call111 = call i64 @Fcons(i64 %78, i64 %79)
  store i64 %call111, i64* %list, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.110, %land.lhs.true.106, %if.end.103
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %lor.lhs.false, %for.body.44
  br label %for.inc.114

for.inc.114:                                      ; preds = %if.end.113
  %80 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %80, i32 0, i32 2
  %81 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %81, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond.43

for.end.115:                                      ; preds = %for.cond.43
  %82 = load i64, i64* %list, align 8
  %call116 = call i64 @Fnreverse(i64 %82)
  store i64 %call116, i64* %list, align 8
  br label %do.body

do.body:                                          ; preds = %for.end.115
  %83 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call117 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp118 = icmp eq i64 %83, %call117
  br i1 %cmp118, label %if.end.121, label %if.then.120

if.then.120:                                      ; preds = %do.body
  %84 = load i64, i64* %spec.addr, align 8
  %85 = load i64, i64* %list, align 8
  call void @font_add_log(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i64 %84, i64 %85)
  br label %if.end.121

if.end.121:                                       ; preds = %if.then.120, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.121
  %86 = load i64, i64* %list, align 8
  ret i64 %86
}

; Function Attrs: nounwind uwtable
define internal i64 @font_get_cache(%struct.frame* %f, %struct.font_driver* %driver) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %driver.addr = alloca %struct.font_driver*, align 8
  %val = alloca i64, align 8
  %type = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.font_driver* %driver, %struct.font_driver** %driver.addr, align 8
  %0 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %get_cache = getelementptr inbounds %struct.font_driver, %struct.font_driver* %0, i32 0, i32 2
  %1 = load i64 (%struct.frame*)*, i64 (%struct.frame*)** %get_cache, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 %1(%struct.frame* %2)
  store i64 %call, i64* %val, align 8
  %3 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type1 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %3, i32 0, i32 0
  %4 = load i64, i64* %type1, align 8
  store i64 %4, i64* %type, align 8
  %5 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %8 = load i64, i64* %cdr, align 8
  store i64 %8, i64* %val, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i64, i64* %val, align 8
  %sub2 = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub2 to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 0
  %12 = load i64, i64* %car, align 8
  %sub3 = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub3 to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car4 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car4, align 8
  %16 = load i64, i64* %type, align 8
  %cmp = icmp eq i64 %15, %16
  %lnot = xor i1 %cmp, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i64, i64* %val, align 8
  %sub5 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub5 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u6 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr7 = bitcast %union.anon.10* %u6 to i64*
  %20 = load i64, i64* %cdr7, align 8
  store i64 %20, i64* %val, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i64, i64* %val, align 8
  %sub8 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub8 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %car9 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 0
  %24 = load i64, i64* %car9, align 8
  %sub10 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub10 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %u11 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 1
  %cdr12 = bitcast %union.anon.10* %u11 to i64*
  %27 = load i64, i64* %cdr12, align 8
  store i64 %27, i64* %val, align 8
  %28 = load i64, i64* %val, align 8
  ret i64 %28
}

declare i64 @assoc_no_quit(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @copy_font_spec(i64 %font) #0 {
entry:
  %font.addr = alloca i64, align 8
  %new_spec = alloca i64, align 8
  %tail = alloca i64, align 8
  %pcdr = alloca i64*, align 8
  %spec = alloca %struct.font_spec*, align 8
  store i64 %font, i64* %font.addr, align 8
  %0 = load i64, i64* %font.addr, align 8
  call void @CHECK_FONT(i64 %0)
  %call = call %struct.Lisp_Vector* @allocate_vector(i64 13)
  %1 = bitcast %struct.Lisp_Vector* %call to %struct.font_spec*
  store %struct.font_spec* %1, %struct.font_spec** %spec, align 8
  %2 = load %struct.font_spec*, %struct.font_spec** %spec, align 8
  %header = getelementptr inbounds %struct.font_spec, %struct.font_spec* %2, i32 0, i32 0
  %size = getelementptr inbounds %struct.vectorlike_header, %struct.vectorlike_header* %header, i32 0, i32 0
  store i64 4611686018712600589, i64* %size, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %3 = load %struct.font_spec*, %struct.font_spec** %spec, align 8
  %props = getelementptr inbounds %struct.font_spec, %struct.font_spec* %3, i32 0, i32 1
  %arrayidx = getelementptr inbounds [13 x i64], [13 x i64]* %props, i32 0, i64 12
  store i64 %call1, i64* %arrayidx, align 8
  %4 = load %struct.font_spec*, %struct.font_spec** %spec, align 8
  %props2 = getelementptr inbounds %struct.font_spec, %struct.font_spec* %4, i32 0, i32 1
  %arrayidx3 = getelementptr inbounds [13 x i64], [13 x i64]* %props2, i32 0, i64 0
  store i64 %call1, i64* %arrayidx3, align 8
  %5 = load %struct.font_spec*, %struct.font_spec** %spec, align 8
  %props4 = getelementptr inbounds %struct.font_spec, %struct.font_spec* %5, i32 0, i32 1
  %arraydecay = getelementptr inbounds [13 x i64], [13 x i64]* %props4, i32 0, i32 0
  %add.ptr = getelementptr inbounds i64, i64* %arraydecay, i64 1
  %6 = bitcast i64* %add.ptr to i8*
  %7 = load i64, i64* %font.addr, align 8
  %call5 = call %struct.Lisp_Vector* @XVECTOR(i64 %7)
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call5, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i32 0
  %add.ptr7 = getelementptr inbounds i64, i64* %arraydecay6, i64 1
  %8 = bitcast i64* %add.ptr7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %8, i64 88, i32 8, i1 false)
  %9 = load %struct.font_spec*, %struct.font_spec** %spec, align 8
  %props8 = getelementptr inbounds %struct.font_spec, %struct.font_spec* %9, i32 0, i32 1
  %arraydecay9 = getelementptr inbounds [13 x i64], [13 x i64]* %props8, i32 0, i32 0
  %add.ptr10 = getelementptr inbounds i64, i64* %arraydecay9, i64 12
  store i64* %add.ptr10, i64** %pcdr, align 8
  %10 = load i64, i64* %font.addr, align 8
  %call11 = call i64 @AREF(i64 %10, i64 12)
  store i64 %call11, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i64, i64* %tail, align 8
  %and = and i64 %11, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car, align 8
  %sub13 = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub13 to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %car14 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 0
  %18 = load i64, i64* %car14, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 45)
  %cmp16 = icmp eq i64 %18, %call15
  br i1 %cmp16, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %19 = load i64, i64* %tail, align 8
  %sub18 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub18 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %car19 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 0
  %22 = load i64, i64* %car19, align 8
  %sub20 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub20 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %car21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 0
  %25 = load i64, i64* %car21, align 8
  %26 = load i64, i64* %tail, align 8
  %sub22 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub22 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %car23 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 0
  %29 = load i64, i64* %car23, align 8
  %call24 = call i64 @CDR(i64 %29)
  %call25 = call i64 @Fcons(i64 %25, i64 %call24)
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %call27 = call i64 @Fcons(i64 %call25, i64 %call26)
  %30 = load i64*, i64** %pcdr, align 8
  store i64 %call27, i64* %30, align 8
  %31 = load i64*, i64** %pcdr, align 8
  %32 = load i64, i64* %31, align 8
  %call28 = call i64* @xcdr_addr(i64 %32)
  store i64* %call28, i64** %pcdr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %33 = load i64, i64* %tail, align 8
  %sub29 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub29 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %36 = load i64, i64* %cdr, align 8
  store i64 %36, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load %struct.font_spec*, %struct.font_spec** %spec, align 8
  %38 = bitcast %struct.font_spec* %37 to i8*
  %call30 = call i64 @make_lisp_ptr(i8* %38, i32 5)
  store i64 %call30, i64* %new_spec, align 8
  %39 = load i64, i64* %new_spec, align 8
  ret i64 %39
}

; Function Attrs: nounwind uwtable
define internal i64 @font_delete_unmatched(i64 %vec, i64 %spec, i32 %size) #0 {
entry:
  %vec.addr = alloca i64, align 8
  %spec.addr = alloca i64, align 8
  %size.addr = alloca i32, align 4
  %entity = alloca i64, align 8
  %val = alloca i64, align 8
  %prop = alloca i32, align 4
  %i = alloca i64, align 8
  %name = alloca [256 x i8], align 16
  %namelen = alloca i64, align 8
  %tail = alloca i64, align 8
  %regexp = alloca i64, align 8
  %diff = alloca i32, align 4
  store i64 %vec, i64* %vec.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %val, align 8
  %0 = load i64, i64* %vec.addr, align 8
  %call1 = call i64 @ASIZE(i64 %0)
  %sub = sub nsw i64 %call1, 1
  store i64 %sub, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.143, %entry
  %1 = load i64, i64* %i, align 8
  %cmp = icmp sge i64 %1, 0
  br i1 %cmp, label %for.body, label %for.end.144

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %vec.addr, align 8
  %3 = load i64, i64* %i, align 8
  %call2 = call i64 @AREF(i64 %2, i64 %3)
  store i64 %call2, i64* %entity, align 8
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 89), align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %4, %call3
  br i1 %cmp4, label %if.end.28, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i64, i64* %entity, align 8
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %call5 = call i64 @font_unparse_xlfd(i64 %5, i32 0, i8* %arraydecay, i32 256)
  store i64 %call5, i64* %namelen, align 8
  %6 = load i64, i64* %namelen, align 8
  %cmp6 = icmp sge i64 %6, 0
  br i1 %cmp6, label %if.then.7, label %if.end.27

if.then.7:                                        ; preds = %if.then
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 89), align 8
  store i64 %7, i64* %tail, align 8
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc, %if.then.7
  %8 = load i64, i64* %tail, align 8
  %and = and i64 %8, 7
  %conv = trunc i64 %and to i32
  %cmp9 = icmp eq i32 %conv, 3
  br i1 %cmp9, label %for.body.11, label %for.end

for.body.11:                                      ; preds = %for.cond.8
  %9 = load i64, i64* %tail, align 8
  %sub12 = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub12 to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 0
  %12 = load i64, i64* %car, align 8
  store i64 %12, i64* %regexp, align 8
  %13 = load i64, i64* %regexp, align 8
  %call13 = call zeroext i1 @STRINGP(i64 %13)
  br i1 %call13, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.11
  %14 = load i64, i64* %regexp, align 8
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %15 = load i64, i64* %namelen, align 8
  %call16 = call i64 @fast_c_string_match_ignore_case(i64 %14, i8* %arraydecay15, i64 %15)
  %cmp17 = icmp sge i64 %call16, 0
  br i1 %cmp17, label %if.then.19, label %if.end

if.then.19:                                       ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body.11
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i64, i64* %tail, align 8
  %sub20 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub20 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %19 = load i64, i64* %cdr, align 8
  store i64 %19, i64* %tail, align 8
  br label %for.cond.8

for.end:                                          ; preds = %if.then.19, %for.cond.8
  %20 = load i64, i64* %tail, align 8
  %and21 = and i64 %20, 7
  %conv22 = trunc i64 %and21 to i32
  %cmp23 = icmp eq i32 %conv22, 3
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %for.end
  br label %for.inc.143

if.end.26:                                        ; preds = %for.end
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %for.body
  %21 = load i64, i64* %spec.addr, align 8
  %call29 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp30 = icmp eq i64 %21, %call29
  br i1 %cmp30, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %if.end.28
  %22 = load i64, i64* %entity, align 8
  %23 = load i64, i64* %val, align 8
  %call33 = call i64 @Fcons(i64 %22, i64 %23)
  store i64 %call33, i64* %val, align 8
  br label %for.inc.143

if.end.34:                                        ; preds = %if.end.28
  store i32 5, i32* %prop, align 4
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.58, %if.end.34
  %24 = load i32, i32* %prop, align 4
  %cmp36 = icmp ult i32 %24, 8
  br i1 %cmp36, label %for.body.38, label %for.end.59

for.body.38:                                      ; preds = %for.cond.35
  %25 = load i64, i64* %spec.addr, align 8
  %26 = load i32, i32* %prop, align 4
  %conv39 = zext i32 %26 to i64
  %call40 = call i64 @AREF(i64 %25, i64 %conv39)
  %and41 = and i64 %call40, 7
  %conv42 = trunc i64 %and41 to i32
  %and43 = and i32 %conv42, -5
  %cmp44 = icmp eq i32 %and43, 2
  br i1 %cmp44, label %land.lhs.true.46, label %if.end.57

land.lhs.true.46:                                 ; preds = %for.body.38
  %27 = load i64, i64* %spec.addr, align 8
  %28 = load i32, i32* %prop, align 4
  %conv47 = zext i32 %28 to i64
  %call48 = call i64 @AREF(i64 %27, i64 %conv47)
  %shr = ashr i64 %call48, 2
  %shr49 = ashr i64 %shr, 8
  %29 = load i64, i64* %entity, align 8
  %30 = load i32, i32* %prop, align 4
  %conv50 = zext i32 %30 to i64
  %call51 = call i64 @AREF(i64 %29, i64 %conv50)
  %shr52 = ashr i64 %call51, 2
  %shr53 = ashr i64 %shr52, 8
  %cmp54 = icmp ne i64 %shr49, %shr53
  br i1 %cmp54, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %land.lhs.true.46
  store i32 13, i32* %prop, align 4
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.56, %land.lhs.true.46, %for.body.38
  br label %for.inc.58

for.inc.58:                                       ; preds = %if.end.57
  %31 = load i32, i32* %prop, align 4
  %inc = add i32 %31, 1
  store i32 %inc, i32* %prop, align 4
  br label %for.cond.35

for.end.59:                                       ; preds = %for.cond.35
  %32 = load i32, i32* %prop, align 4
  %cmp60 = icmp ult i32 %32, 13
  br i1 %cmp60, label %land.lhs.true.62, label %if.end.81

land.lhs.true.62:                                 ; preds = %for.end.59
  %33 = load i32, i32* %size.addr, align 4
  %tobool = icmp ne i32 %33, 0
  br i1 %tobool, label %land.lhs.true.63, label %if.end.81

land.lhs.true.63:                                 ; preds = %land.lhs.true.62
  %34 = load i64, i64* %entity, align 8
  %call64 = call i64 @AREF(i64 %34, i64 8)
  %shr65 = ashr i64 %call64, 2
  %cmp66 = icmp sgt i64 %shr65, 0
  br i1 %cmp66, label %if.then.68, label %if.end.81

if.then.68:                                       ; preds = %land.lhs.true.63
  %35 = load i64, i64* %entity, align 8
  %call69 = call i64 @AREF(i64 %35, i64 8)
  %shr70 = ashr i64 %call69, 2
  %36 = load i32, i32* %size.addr, align 4
  %conv71 = sext i32 %36 to i64
  %sub72 = sub nsw i64 %shr70, %conv71
  %conv73 = trunc i64 %sub72 to i32
  store i32 %conv73, i32* %diff, align 4
  %37 = load i32, i32* %diff, align 4
  %cmp74 = icmp slt i32 %37, 0
  br i1 %cmp74, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.68
  %38 = load i32, i32* %diff, align 4
  %sub76 = sub nsw i32 0, %38
  br label %cond.end

cond.false:                                       ; preds = %if.then.68
  %39 = load i32, i32* %diff, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub76, %cond.true ], [ %39, %cond.false ]
  %cmp77 = icmp sgt i32 %cond, 1
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %cond.end
  store i32 13, i32* %prop, align 4
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %cond.end
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %land.lhs.true.63, %land.lhs.true.62, %for.end.59
  %40 = load i32, i32* %prop, align 4
  %cmp82 = icmp ult i32 %40, 13
  br i1 %cmp82, label %land.lhs.true.84, label %if.end.109

land.lhs.true.84:                                 ; preds = %if.end.81
  %41 = load i64, i64* %spec.addr, align 8
  %call85 = call i64 @AREF(i64 %41, i64 9)
  %and86 = and i64 %call85, 7
  %conv87 = trunc i64 %and86 to i32
  %and88 = and i32 %conv87, -5
  %cmp89 = icmp eq i32 %and88, 2
  br i1 %cmp89, label %land.lhs.true.91, label %if.end.109

land.lhs.true.91:                                 ; preds = %land.lhs.true.84
  %42 = load i64, i64* %entity, align 8
  %call92 = call i64 @AREF(i64 %42, i64 9)
  %and93 = and i64 %call92, 7
  %conv94 = trunc i64 %and93 to i32
  %and95 = and i32 %conv94, -5
  %cmp96 = icmp eq i32 %and95, 2
  br i1 %cmp96, label %land.lhs.true.98, label %if.end.109

land.lhs.true.98:                                 ; preds = %land.lhs.true.91
  %43 = load i64, i64* %entity, align 8
  %call99 = call i64 @AREF(i64 %43, i64 9)
  %shr100 = ashr i64 %call99, 2
  %cmp101 = icmp ne i64 %shr100, 0
  br i1 %cmp101, label %land.lhs.true.103, label %if.end.109

land.lhs.true.103:                                ; preds = %land.lhs.true.98
  %44 = load i64, i64* %spec.addr, align 8
  %call104 = call i64 @AREF(i64 %44, i64 9)
  %45 = load i64, i64* %entity, align 8
  %call105 = call i64 @AREF(i64 %45, i64 9)
  %cmp106 = icmp eq i64 %call104, %call105
  br i1 %cmp106, label %if.end.109, label %if.then.108

if.then.108:                                      ; preds = %land.lhs.true.103
  store i32 13, i32* %prop, align 4
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.108, %land.lhs.true.103, %land.lhs.true.98, %land.lhs.true.91, %land.lhs.true.84, %if.end.81
  %46 = load i32, i32* %prop, align 4
  %cmp110 = icmp ult i32 %46, 13
  br i1 %cmp110, label %land.lhs.true.112, label %if.end.137

land.lhs.true.112:                                ; preds = %if.end.109
  %47 = load i64, i64* %spec.addr, align 8
  %call113 = call i64 @AREF(i64 %47, i64 11)
  %and114 = and i64 %call113, 7
  %conv115 = trunc i64 %and114 to i32
  %and116 = and i32 %conv115, -5
  %cmp117 = icmp eq i32 %and116, 2
  br i1 %cmp117, label %land.lhs.true.119, label %if.end.137

land.lhs.true.119:                                ; preds = %land.lhs.true.112
  %48 = load i64, i64* %entity, align 8
  %call120 = call i64 @AREF(i64 %48, i64 11)
  %and121 = and i64 %call120, 7
  %conv122 = trunc i64 %and121 to i32
  %and123 = and i32 %conv122, -5
  %cmp124 = icmp eq i32 %and123, 2
  br i1 %cmp124, label %land.lhs.true.126, label %if.end.137

land.lhs.true.126:                                ; preds = %land.lhs.true.119
  %49 = load i64, i64* %entity, align 8
  %call127 = call i64 @AREF(i64 %49, i64 11)
  %shr128 = ashr i64 %call127, 2
  %cmp129 = icmp ne i64 %shr128, 0
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.137

land.lhs.true.131:                                ; preds = %land.lhs.true.126
  %50 = load i64, i64* %spec.addr, align 8
  %call132 = call i64 @AREF(i64 %50, i64 11)
  %51 = load i64, i64* %entity, align 8
  %call133 = call i64 @AREF(i64 %51, i64 11)
  %cmp134 = icmp eq i64 %call132, %call133
  br i1 %cmp134, label %if.end.137, label %if.then.136

if.then.136:                                      ; preds = %land.lhs.true.131
  store i32 13, i32* %prop, align 4
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.136, %land.lhs.true.131, %land.lhs.true.126, %land.lhs.true.119, %land.lhs.true.112, %if.end.109
  %52 = load i32, i32* %prop, align 4
  %cmp138 = icmp ult i32 %52, 13
  br i1 %cmp138, label %if.then.140, label %if.end.142

if.then.140:                                      ; preds = %if.end.137
  %53 = load i64, i64* %entity, align 8
  %54 = load i64, i64* %val, align 8
  %call141 = call i64 @Fcons(i64 %53, i64 %54)
  store i64 %call141, i64* %val, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.140, %if.end.137
  br label %for.inc.143

for.inc.143:                                      ; preds = %if.end.142, %if.then.32, %if.then.25
  %55 = load i64, i64* %i, align 8
  %dec = add nsw i64 %55, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end.144:                                      ; preds = %for.cond
  %call145 = call i64 @Fvconcat(i64 1, i64* %val)
  ret i64 %call145
}

declare i64 @Fnreverse(i64) #1

; Function Attrs: nounwind uwtable
define void @font_add_log(i8* %action, i64 %arg, i64 %result) #0 {
entry:
  %action.addr = alloca i8*, align 8
  %arg.addr = alloca i64, align 8
  %result.addr = alloca i64, align 8
  %val = alloca i64, align 8
  %i = alloca i32, align 4
  %str = alloca i8*, align 8
  %tail = alloca i64, align 8
  %elt = alloca i64, align 8
  %equal = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  %colon = alloca i64, align 8
  %.compoundliteral132 = alloca %union.Aligned_String, align 8
  %tail150 = alloca i64, align 8
  store i8* %action, i8** %action.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* @Vfont_log_deferred, align 8
  %call1 = call i64 @AREF(i64 %1, i64 0)
  %call2 = call zeroext i1 @STRINGP(i64 %call1)
  br i1 %call2, label %if.then.3, label %if.end.9

if.then.3:                                        ; preds = %if.end
  %2 = load i64, i64* @Vfont_log_deferred, align 8
  %call4 = call i64 @AREF(i64 %2, i64 0)
  %call5 = call i8* @SSDATA(i64 %call4)
  store i8* %call5, i8** %str, align 8
  %3 = load i64, i64* @Vfont_log_deferred, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %3, i64 0, i64 %call6)
  %4 = load i8*, i8** %str, align 8
  %5 = load i64, i64* @Vfont_log_deferred, align 8
  %call7 = call i64 @AREF(i64 %5, i64 1)
  %6 = load i64, i64* @Vfont_log_deferred, align 8
  %call8 = call i64 @AREF(i64 %6, i64 2)
  call void @font_add_log(i8* %4, i64 %call7, i64 %call8)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.3, %if.end
  %7 = load i64, i64* %arg.addr, align 8
  %call10 = call zeroext i1 @FONTP(i64 %7)
  br i1 %call10, label %if.then.11, label %if.end.101

if.then.11:                                       ; preds = %if.end.9
  %s = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 0
  store i64 1, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s, i32 0, i32 3
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0), i8** %data, align 8
  %s12 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %8 = bitcast %struct.Lisp_String* %s12 to i8*
  %call13 = call i64 @make_lisp_ptr(i8* %8, i32 4)
  store i64 %call13, i64* %equal, align 8
  %9 = load i64, i64* %arg.addr, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 901)
  %call15 = call i64 @Ffont_xlfd_name(i64 %9, i64 %call14)
  store i64 %call15, i64* %val, align 8
  %10 = load i64, i64* %arg.addr, align 8
  %call16 = call i64 @AREF(i64 %10, i64 12)
  store i64 %call16, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.11
  %11 = load i64, i64* %tail, align 8
  %and = and i64 %11, 7
  %conv = trunc i64 %and to i32
  %cmp17 = icmp eq i32 %conv, 3
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car, align 8
  store i64 %15, i64* %elt, align 8
  %16 = load i64, i64* %elt, align 8
  %sub19 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub19 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %car20 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 0
  %19 = load i64, i64* %car20, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 114)
  %cmp22 = icmp eq i64 %19, %call21
  br i1 %cmp22, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %20 = load i64, i64* %elt, align 8
  %sub24 = sub nsw i64 %20, 3
  %21 = inttoptr i64 %sub24 to i8*
  %22 = bitcast i8* %21 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %22, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %23 = load i64, i64* %cdr, align 8
  %and25 = and i64 %23, 7
  %conv26 = trunc i64 %and25 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %land.lhs.true
  %24 = load i64, i64* %val, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 114)
  %call31 = call i64 @SYMBOL_NAME(i64 %call30)
  %25 = load i64, i64* %equal, align 8
  %26 = load i64, i64* %elt, align 8
  %sub32 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub32 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %u33 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 1
  %cdr34 = bitcast %union.anon.10* %u33 to i64*
  %29 = load i64, i64* %cdr34, align 8
  %call35 = call i64 @SYMBOL_NAME(i64 %29)
  %call36 = call i64 @concat2(i64 %25, i64 %call35)
  %call37 = call i64 @concat3(i64 %24, i64 %call31, i64 %call36)
  store i64 %call37, i64* %val, align 8
  br label %if.end.97

if.else:                                          ; preds = %land.lhs.true, %for.body
  %30 = load i64, i64* %elt, align 8
  %sub38 = sub nsw i64 %30, 3
  %31 = inttoptr i64 %sub38 to i8*
  %32 = bitcast i8* %31 to %struct.Lisp_Cons*
  %car39 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %32, i32 0, i32 0
  %33 = load i64, i64* %car39, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 73)
  %cmp41 = icmp eq i64 %33, %call40
  br i1 %cmp41, label %land.lhs.true.43, label %if.else.60

land.lhs.true.43:                                 ; preds = %if.else
  %34 = load i64, i64* %elt, align 8
  %sub44 = sub nsw i64 %34, 3
  %35 = inttoptr i64 %sub44 to i8*
  %36 = bitcast i8* %35 to %struct.Lisp_Cons*
  %u45 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %36, i32 0, i32 1
  %cdr46 = bitcast %union.anon.10* %u45 to i64*
  %37 = load i64, i64* %cdr46, align 8
  %and47 = and i64 %37, 7
  %conv48 = trunc i64 %and47 to i32
  %cmp49 = icmp eq i32 %conv48, 0
  br i1 %cmp49, label %if.then.51, label %if.else.60

if.then.51:                                       ; preds = %land.lhs.true.43
  %38 = load i64, i64* %val, align 8
  %call52 = call i64 @builtin_lisp_symbol(i32 73)
  %call53 = call i64 @SYMBOL_NAME(i64 %call52)
  %39 = load i64, i64* %equal, align 8
  %40 = load i64, i64* %elt, align 8
  %sub54 = sub nsw i64 %40, 3
  %41 = inttoptr i64 %sub54 to i8*
  %42 = bitcast i8* %41 to %struct.Lisp_Cons*
  %u55 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %42, i32 0, i32 1
  %cdr56 = bitcast %union.anon.10* %u55 to i64*
  %43 = load i64, i64* %cdr56, align 8
  %call57 = call i64 @SYMBOL_NAME(i64 %43)
  %call58 = call i64 @concat2(i64 %39, i64 %call57)
  %call59 = call i64 @concat3(i64 %38, i64 %call53, i64 %call58)
  store i64 %call59, i64* %val, align 8
  br label %if.end.96

if.else.60:                                       ; preds = %land.lhs.true.43, %if.else
  %44 = load i64, i64* %elt, align 8
  %sub61 = sub nsw i64 %44, 3
  %45 = inttoptr i64 %sub61 to i8*
  %46 = bitcast i8* %45 to %struct.Lisp_Cons*
  %car62 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %46, i32 0, i32 0
  %47 = load i64, i64* %car62, align 8
  %call63 = call i64 @builtin_lisp_symbol(i32 89)
  %cmp64 = icmp eq i64 %47, %call63
  br i1 %cmp64, label %land.lhs.true.66, label %if.end.95

land.lhs.true.66:                                 ; preds = %if.else.60
  %48 = load i64, i64* %elt, align 8
  %sub67 = sub nsw i64 %48, 3
  %49 = inttoptr i64 %sub67 to i8*
  %50 = bitcast i8* %49 to %struct.Lisp_Cons*
  %u68 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %50, i32 0, i32 1
  %cdr69 = bitcast %union.anon.10* %u68 to i64*
  %51 = load i64, i64* %cdr69, align 8
  %and70 = and i64 %51, 7
  %conv71 = trunc i64 %and70 to i32
  %cmp72 = icmp eq i32 %conv71, 3
  br i1 %cmp72, label %land.lhs.true.74, label %if.end.95

land.lhs.true.74:                                 ; preds = %land.lhs.true.66
  %52 = load i64, i64* %elt, align 8
  %sub75 = sub nsw i64 %52, 3
  %53 = inttoptr i64 %sub75 to i8*
  %54 = bitcast i8* %53 to %struct.Lisp_Cons*
  %u76 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %54, i32 0, i32 1
  %cdr77 = bitcast %union.anon.10* %u76 to i64*
  %55 = load i64, i64* %cdr77, align 8
  %sub78 = sub nsw i64 %55, 3
  %56 = inttoptr i64 %sub78 to i8*
  %57 = bitcast i8* %56 to %struct.Lisp_Cons*
  %car79 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %57, i32 0, i32 0
  %58 = load i64, i64* %car79, align 8
  %and80 = and i64 %58, 7
  %conv81 = trunc i64 %and80 to i32
  %cmp82 = icmp eq i32 %conv81, 0
  br i1 %cmp82, label %if.then.84, label %if.end.95

if.then.84:                                       ; preds = %land.lhs.true.74
  %59 = load i64, i64* %val, align 8
  %call85 = call i64 @builtin_lisp_symbol(i32 89)
  %call86 = call i64 @SYMBOL_NAME(i64 %call85)
  %60 = load i64, i64* %equal, align 8
  %61 = load i64, i64* %elt, align 8
  %sub87 = sub nsw i64 %61, 3
  %62 = inttoptr i64 %sub87 to i8*
  %63 = bitcast i8* %62 to %struct.Lisp_Cons*
  %u88 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %63, i32 0, i32 1
  %cdr89 = bitcast %union.anon.10* %u88 to i64*
  %64 = load i64, i64* %cdr89, align 8
  %sub90 = sub nsw i64 %64, 3
  %65 = inttoptr i64 %sub90 to i8*
  %66 = bitcast i8* %65 to %struct.Lisp_Cons*
  %car91 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %66, i32 0, i32 0
  %67 = load i64, i64* %car91, align 8
  %call92 = call i64 @SYMBOL_NAME(i64 %67)
  %call93 = call i64 @concat2(i64 %60, i64 %call92)
  %call94 = call i64 @concat3(i64 %59, i64 %call86, i64 %call93)
  store i64 %call94, i64* %val, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.84, %land.lhs.true.74, %land.lhs.true.66, %if.else.60
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.then.51
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.then.29
  br label %for.inc

for.inc:                                          ; preds = %if.end.97
  %68 = load i64, i64* %tail, align 8
  %sub98 = sub nsw i64 %68, 3
  %69 = inttoptr i64 %sub98 to i8*
  %70 = bitcast i8* %69 to %struct.Lisp_Cons*
  %u99 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %70, i32 0, i32 1
  %cdr100 = bitcast %union.anon.10* %u99 to i64*
  %71 = load i64, i64* %cdr100, align 8
  store i64 %71, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %72 = load i64, i64* %val, align 8
  store i64 %72, i64* %arg.addr, align 8
  br label %if.end.101

if.end.101:                                       ; preds = %for.end, %if.end.9
  %73 = load i64, i64* %result.addr, align 8
  %and102 = and i64 %73, 7
  %conv103 = trunc i64 %and102 to i32
  %cmp104 = icmp eq i32 %conv103, 3
  br i1 %cmp104, label %land.lhs.true.106, label %if.end.125

land.lhs.true.106:                                ; preds = %if.end.101
  %74 = load i64, i64* %result.addr, align 8
  %sub107 = sub nsw i64 %74, 3
  %75 = inttoptr i64 %sub107 to i8*
  %76 = bitcast i8* %75 to %struct.Lisp_Cons*
  %car108 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %76, i32 0, i32 0
  %77 = load i64, i64* %car108, align 8
  %call109 = call zeroext i1 @VECTORP(i64 %77)
  br i1 %call109, label %land.lhs.true.111, label %if.end.125

land.lhs.true.111:                                ; preds = %land.lhs.true.106
  %78 = load i64, i64* %result.addr, align 8
  %sub112 = sub nsw i64 %78, 3
  %79 = inttoptr i64 %sub112 to i8*
  %80 = bitcast i8* %79 to %struct.Lisp_Cons*
  %car113 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %80, i32 0, i32 0
  %81 = load i64, i64* %car113, align 8
  %call114 = call i64 @ASIZE(i64 %81)
  %cmp115 = icmp sgt i64 %call114, 0
  br i1 %cmp115, label %land.lhs.true.117, label %if.end.125

land.lhs.true.117:                                ; preds = %land.lhs.true.111
  %82 = load i64, i64* %result.addr, align 8
  %sub118 = sub nsw i64 %82, 3
  %83 = inttoptr i64 %sub118 to i8*
  %84 = bitcast i8* %83 to %struct.Lisp_Cons*
  %car119 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %84, i32 0, i32 0
  %85 = load i64, i64* %car119, align 8
  %call120 = call i64 @AREF(i64 %85, i64 0)
  %call121 = call zeroext i1 @FONTP(i64 %call120)
  br i1 %call121, label %if.then.123, label %if.end.125

if.then.123:                                      ; preds = %land.lhs.true.117
  %86 = load i64, i64* %result.addr, align 8
  %call124 = call i64 @font_vconcat_entity_vectors(i64 %86)
  store i64 %call124, i64* %result.addr, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.123, %land.lhs.true.117, %land.lhs.true.111, %land.lhs.true.106, %if.end.101
  %87 = load i64, i64* %result.addr, align 8
  %call126 = call zeroext i1 @FONTP(i64 %87)
  br i1 %call126, label %if.then.127, label %if.else.144

if.then.127:                                      ; preds = %if.end.125
  %88 = load i64, i64* %result.addr, align 8
  %call128 = call i64 @builtin_lisp_symbol(i32 901)
  %call129 = call i64 @Ffont_xlfd_name(i64 %88, i64 %call128)
  store i64 %call129, i64* %val, align 8
  %89 = load i64, i64* %result.addr, align 8
  %call130 = call zeroext i1 @FONT_SPEC_P(i64 %89)
  br i1 %call130, label %if.end.143, label %if.then.131

if.then.131:                                      ; preds = %if.then.127
  %s133 = bitcast %union.Aligned_String* %.compoundliteral132 to %struct.Lisp_String*
  %size134 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s133, i32 0, i32 0
  store i64 1, i64* %size134, align 8
  %size_byte135 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s133, i32 0, i32 1
  store i64 -1, i64* %size_byte135, align 8
  %intervals136 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s133, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals136, align 8
  %data137 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s133, i32 0, i32 3
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.35, i32 0, i32 0), i8** %data137, align 8
  %s138 = bitcast %union.Aligned_String* %.compoundliteral132 to %struct.Lisp_String*
  %90 = bitcast %struct.Lisp_String* %s138 to i8*
  %call139 = call i64 @make_lisp_ptr(i8* %90, i32 4)
  store i64 %call139, i64* %colon, align 8
  %91 = load i64, i64* %result.addr, align 8
  %call140 = call i64 @AREF(i64 %91, i64 0)
  %call141 = call i64 @SYMBOL_NAME(i64 %call140)
  %92 = load i64, i64* %colon, align 8
  %93 = load i64, i64* %val, align 8
  %call142 = call i64 @concat3(i64 %call141, i64 %92, i64 %93)
  store i64 %call142, i64* %val, align 8
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.131, %if.then.127
  %94 = load i64, i64* %val, align 8
  store i64 %94, i64* %result.addr, align 8
  br label %if.end.192

if.else.144:                                      ; preds = %if.end.125
  %95 = load i64, i64* %result.addr, align 8
  %and145 = and i64 %95, 7
  %conv146 = trunc i64 %and145 to i32
  %cmp147 = icmp eq i32 %conv146, 3
  br i1 %cmp147, label %if.then.149, label %if.else.170

if.then.149:                                      ; preds = %if.else.144
  %96 = load i64, i64* %result.addr, align 8
  %call151 = call i64 @Fcopy_sequence(i64 %96)
  store i64 %call151, i64* %result.addr, align 8
  %97 = load i64, i64* %result.addr, align 8
  store i64 %97, i64* %tail150, align 8
  br label %for.cond.152

for.cond.152:                                     ; preds = %for.inc.165, %if.then.149
  %98 = load i64, i64* %tail150, align 8
  %and153 = and i64 %98, 7
  %conv154 = trunc i64 %and153 to i32
  %cmp155 = icmp eq i32 %conv154, 3
  br i1 %cmp155, label %for.body.157, label %for.end.169

for.body.157:                                     ; preds = %for.cond.152
  %99 = load i64, i64* %tail150, align 8
  %sub158 = sub nsw i64 %99, 3
  %100 = inttoptr i64 %sub158 to i8*
  %101 = bitcast i8* %100 to %struct.Lisp_Cons*
  %car159 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %101, i32 0, i32 0
  %102 = load i64, i64* %car159, align 8
  store i64 %102, i64* %val, align 8
  %103 = load i64, i64* %val, align 8
  %call160 = call zeroext i1 @FONTP(i64 %103)
  br i1 %call160, label %if.then.161, label %if.end.164

if.then.161:                                      ; preds = %for.body.157
  %104 = load i64, i64* %val, align 8
  %call162 = call i64 @builtin_lisp_symbol(i32 901)
  %call163 = call i64 @Ffont_xlfd_name(i64 %104, i64 %call162)
  store i64 %call163, i64* %val, align 8
  br label %if.end.164

if.end.164:                                       ; preds = %if.then.161, %for.body.157
  %105 = load i64, i64* %tail150, align 8
  %106 = load i64, i64* %val, align 8
  call void @XSETCAR(i64 %105, i64 %106)
  br label %for.inc.165

for.inc.165:                                      ; preds = %if.end.164
  %107 = load i64, i64* %tail150, align 8
  %sub166 = sub nsw i64 %107, 3
  %108 = inttoptr i64 %sub166 to i8*
  %109 = bitcast i8* %108 to %struct.Lisp_Cons*
  %u167 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %109, i32 0, i32 1
  %cdr168 = bitcast %union.anon.10* %u167 to i64*
  %110 = load i64, i64* %cdr168, align 8
  store i64 %110, i64* %tail150, align 8
  br label %for.cond.152

for.end.169:                                      ; preds = %for.cond.152
  br label %if.end.191

if.else.170:                                      ; preds = %if.else.144
  %111 = load i64, i64* %result.addr, align 8
  %call171 = call zeroext i1 @VECTORP(i64 %111)
  br i1 %call171, label %if.then.172, label %if.end.190

if.then.172:                                      ; preds = %if.else.170
  %112 = load i64, i64* %result.addr, align 8
  %call173 = call i64 @Fcopy_sequence(i64 %112)
  store i64 %call173, i64* %result.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.174

for.cond.174:                                     ; preds = %for.inc.188, %if.then.172
  %113 = load i32, i32* %i, align 4
  %conv175 = sext i32 %113 to i64
  %114 = load i64, i64* %result.addr, align 8
  %call176 = call i64 @ASIZE(i64 %114)
  %cmp177 = icmp slt i64 %conv175, %call176
  br i1 %cmp177, label %for.body.179, label %for.end.189

for.body.179:                                     ; preds = %for.cond.174
  %115 = load i64, i64* %result.addr, align 8
  %116 = load i32, i32* %i, align 4
  %conv180 = sext i32 %116 to i64
  %call181 = call i64 @AREF(i64 %115, i64 %conv180)
  store i64 %call181, i64* %val, align 8
  %117 = load i64, i64* %val, align 8
  %call182 = call zeroext i1 @FONTP(i64 %117)
  br i1 %call182, label %if.then.183, label %if.end.186

if.then.183:                                      ; preds = %for.body.179
  %118 = load i64, i64* %val, align 8
  %call184 = call i64 @builtin_lisp_symbol(i32 901)
  %call185 = call i64 @Ffont_xlfd_name(i64 %118, i64 %call184)
  store i64 %call185, i64* %val, align 8
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.183, %for.body.179
  %119 = load i64, i64* %result.addr, align 8
  %120 = load i32, i32* %i, align 4
  %conv187 = sext i32 %120 to i64
  %121 = load i64, i64* %val, align 8
  call void @ASET(i64 %119, i64 %conv187, i64 %121)
  br label %for.inc.188

for.inc.188:                                      ; preds = %if.end.186
  %122 = load i32, i32* %i, align 4
  %inc = add nsw i32 %122, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.174

for.end.189:                                      ; preds = %for.cond.174
  br label %if.end.190

if.end.190:                                       ; preds = %for.end.189, %if.else.170
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.190, %for.end.169
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.191, %if.end.143
  %123 = load i8*, i8** %action.addr, align 8
  %call193 = call i64 @intern(i8* %123)
  %124 = load i64, i64* %arg.addr, align 8
  %125 = load i64, i64* %result.addr, align 8
  %call194 = call i64 @list3(i64 %call193, i64 %124, i64 %125)
  %126 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call195 = call i64 @Fcons(i64 %call194, i64 %126)
  store i64 %call195, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  br label %return

return:                                           ; preds = %if.end.192, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @font_has_char(%struct.frame* %f, i64 %font, i32 %c) #0 {
entry:
  %retval = alloca i32, align 4
  %f.addr = alloca %struct.frame*, align 8
  %font.addr = alloca i64, align 8
  %c.addr = alloca i32, align 4
  %fontp = alloca %struct.font*, align 8
  %type = alloca i64, align 8
  %driver_list = alloca %struct.font_driver_list*, align 8
  %result = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %font, i64* %font.addr, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* %font.addr, align 8
  %call = call zeroext i1 @FONT_ENTITY_P(i64 %0)
  br i1 %call, label %if.then, label %if.end.12

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %font.addr, align 8
  %call1 = call i64 @AREF(i64 %1, i64 0)
  store i64 %call1, i64* %type, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 63
  %3 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %3, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool = icmp ne %struct.font_driver_list* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %5, i32 0, i32 1
  %6 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %type2 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %6, i32 0, i32 0
  %7 = load i64, i64* %type2, align 8
  %8 = load i64, i64* %type, align 8
  %cmp = icmp eq i64 %7, %8
  %lnot = xor i1 %cmp, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %10, i32 0, i32 2
  %11 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %11, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool3 = icmp ne %struct.font_driver_list* %12, null
  br i1 %tobool3, label %if.end, label %if.then.4

if.then.4:                                        ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.end
  %13 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver5 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %13, i32 0, i32 1
  %14 = load %struct.font_driver*, %struct.font_driver** %driver5, align 8
  %has_char = getelementptr inbounds %struct.font_driver, %struct.font_driver* %14, i32 0, i32 11
  %15 = load i32 (i64, i32)*, i32 (i64, i32)** %has_char, align 8
  %tobool6 = icmp ne i32 (i64, i32)* %15, null
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %16 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver9 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %16, i32 0, i32 1
  %17 = load %struct.font_driver*, %struct.font_driver** %driver9, align 8
  %has_char10 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %17, i32 0, i32 11
  %18 = load i32 (i64, i32)*, i32 (i64, i32)** %has_char10, align 8
  %19 = load i64, i64* %font.addr, align 8
  %20 = load i32, i32* %c.addr, align 4
  %call11 = call i32 %18(i64 %19, i32 %20)
  store i32 %call11, i32* %retval
  br label %return

if.end.12:                                        ; preds = %entry
  %21 = load i64, i64* %font.addr, align 8
  %call13 = call %struct.font* @XFONT_OBJECT(i64 %21)
  store %struct.font* %call13, %struct.font** %fontp, align 8
  %22 = load %struct.font*, %struct.font** %fontp, align 8
  %driver14 = getelementptr inbounds %struct.font, %struct.font* %22, i32 0, i32 18
  %23 = load %struct.font_driver*, %struct.font_driver** %driver14, align 8
  %has_char15 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %23, i32 0, i32 11
  %24 = load i32 (i64, i32)*, i32 (i64, i32)** %has_char15, align 8
  %tobool16 = icmp ne i32 (i64, i32)* %24, null
  br i1 %tobool16, label %if.then.17, label %if.end.24

if.then.17:                                       ; preds = %if.end.12
  %25 = load %struct.font*, %struct.font** %fontp, align 8
  %driver18 = getelementptr inbounds %struct.font, %struct.font* %25, i32 0, i32 18
  %26 = load %struct.font_driver*, %struct.font_driver** %driver18, align 8
  %has_char19 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %26, i32 0, i32 11
  %27 = load i32 (i64, i32)*, i32 (i64, i32)** %has_char19, align 8
  %28 = load i64, i64* %font.addr, align 8
  %29 = load i32, i32* %c.addr, align 4
  %call20 = call i32 %27(i64 %28, i32 %29)
  store i32 %call20, i32* %result, align 4
  %30 = load i32, i32* %result, align 4
  %cmp21 = icmp sge i32 %30, 0
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.17
  %31 = load i32, i32* %result, align 4
  store i32 %31, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.then.17
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.12
  %32 = load %struct.font*, %struct.font** %fontp, align 8
  %driver25 = getelementptr inbounds %struct.font, %struct.font* %32, i32 0, i32 18
  %33 = load %struct.font_driver*, %struct.font_driver** %driver25, align 8
  %encode_char = getelementptr inbounds %struct.font_driver, %struct.font_driver* %33, i32 0, i32 12
  %34 = load i32 (%struct.font*, i32)*, i32 (%struct.font*, i32)** %encode_char, align 8
  %35 = load %struct.font*, %struct.font** %fontp, align 8
  %36 = load i32, i32* %c.addr, align 4
  %call26 = call i32 %34(%struct.font* %35, i32 %36)
  %cmp27 = icmp ne i32 %call26, -1
  %conv = zext i1 %cmp27 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.24, %if.then.22, %if.end.8, %if.then.7, %if.then.4
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define i64 @font_get_name(i64 %font_object) #0 {
entry:
  %font_object.addr = alloca i64, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  %0 = load i64, i64* %font_object.addr, align 8
  %call = call i64 @AREF(i64 %0, i64 14)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @font_spec_from_name(i64 %font_name) #0 {
entry:
  %retval = alloca i64, align 8
  %font_name.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  store i64 %font_name, i64* %font_name.addr, align 8
  %call = call i64 @Ffont_spec(i64 0, i64* null)
  store i64 %call, i64* %spec, align 8
  %0 = load i64, i64* %font_name.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %font_name.addr, align 8
  %call1 = call i8* @SSDATA(i64 %1)
  %2 = load i64, i64* %font_name.addr, align 8
  %call2 = call i64 @SBYTES(i64 %2)
  %3 = load i64, i64* %spec, align 8
  %call3 = call i32 @font_parse_name(i8* %call1, i64 %call2, i64 %3)
  %cmp = icmp eq i32 %call3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %spec, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 86)
  %5 = load i64, i64* %font_name.addr, align 8
  %call6 = call i64 @font_put_extra(i64 %4, i64 %call5, i64 %5)
  %6 = load i64, i64* %spec, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 133)
  %7 = load i64, i64* %font_name.addr, align 8
  %call8 = call i64 @font_put_extra(i64 %6, i64 %call7, i64 %7)
  %8 = load i64, i64* %spec, align 8
  store i64 %8, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i64, i64* %retval
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define i64 @Ffont_spec(i64 %nargs, i64* %args) #0 {
entry:
  %nargs.addr = alloca i64, align 8
  %args.addr = alloca i64*, align 8
  %spec = alloca i64, align 8
  %i = alloca i64, align 8
  %key = alloca i64, align 8
  %val = alloca i64, align 8
  %idx = alloca i32, align 4
  store i64 %nargs, i64* %nargs.addr, align 8
  store i64* %args, i64** %args.addr, align 8
  %call = call i64 @font_make_spec()
  store i64 %call, i64* %spec, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %nargs.addr, align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %3 = load i64*, i64** %args.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %2
  %4 = load i64, i64* %arrayidx, align 8
  store i64 %4, i64* %key, align 8
  %5 = load i64, i64* %key, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %call3 = call i64 @builtin_lisp_symbol(i32 897)
  %6 = load i64, i64* %key, align 8
  %7 = call i64 @wrong_type_argument(i64 %call3, i64 %6) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %9 = load i64, i64* %i, align 8
  %add = add nsw i64 %9, 1
  %10 = load i64, i64* %nargs.addr, align 8
  %cmp4 = icmp sge i64 %add, %10
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %11 = load i64, i64* %key, align 8
  %call6 = call i64 @SYMBOL_NAME(i64 %11)
  %call7 = call i8* @SDATA(i64 %call6)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0), i8* %call7) #7
  unreachable

if.end:                                           ; preds = %cond.end
  %12 = load i64, i64* %i, align 8
  %add8 = add nsw i64 %12, 1
  %13 = load i64*, i64** %args.addr, align 8
  %arrayidx9 = getelementptr inbounds i64, i64* %13, i64 %add8
  %14 = load i64, i64* %arrayidx9, align 8
  store i64 %14, i64* %val, align 8
  %15 = load i64, i64* %key, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 86)
  %cmp11 = icmp eq i64 %15, %call10
  br i1 %cmp11, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.end
  %16 = load i64, i64* %val, align 8
  call void @CHECK_STRING(i64 %16)
  %17 = load i64, i64* %val, align 8
  %call14 = call i8* @SSDATA(i64 %17)
  %18 = load i64, i64* %val, align 8
  %call15 = call i64 @SBYTES(i64 %18)
  %19 = load i64, i64* %spec, align 8
  %call16 = call i32 @font_parse_name(i8* %call14, i64 %call15, i64 %19)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.then.13
  %20 = load i64, i64* %val, align 8
  %call20 = call i8* @SSDATA(i64 %20)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.28, i32 0, i32 0), i8* %call20) #7
  unreachable

if.end.21:                                        ; preds = %if.then.13
  %21 = load i64, i64* %spec, align 8
  %22 = load i64, i64* %key, align 8
  %23 = load i64, i64* %val, align 8
  %call22 = call i64 @font_put_extra(i64 %21, i64 %22, i64 %23)
  br label %if.end.40

if.else:                                          ; preds = %if.end
  %24 = load i64, i64* %key, align 8
  %call23 = call i32 @get_font_prop_index(i64 %24)
  store i32 %call23, i32* %idx, align 4
  %25 = load i32, i32* %idx, align 4
  %cmp24 = icmp sge i32 %25, 0
  br i1 %cmp24, label %if.then.26, label %if.else.36

if.then.26:                                       ; preds = %if.else
  %26 = load i32, i32* %idx, align 4
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  %27 = load i64, i64* %val, align 8
  %call28 = call i64 @font_prop_validate(i32 %26, i64 %call27, i64 %27)
  store i64 %call28, i64* %val, align 8
  %28 = load i32, i32* %idx, align 4
  %cmp29 = icmp slt i32 %28, 12
  br i1 %cmp29, label %if.then.31, label %if.else.33

if.then.31:                                       ; preds = %if.then.26
  %29 = load i64, i64* %spec, align 8
  %30 = load i32, i32* %idx, align 4
  %conv32 = sext i32 %30 to i64
  %31 = load i64, i64* %val, align 8
  call void @ASET(i64 %29, i64 %conv32, i64 %31)
  br label %if.end.35

if.else.33:                                       ; preds = %if.then.26
  %32 = load i64, i64* %spec, align 8
  %33 = load i64, i64* %key, align 8
  %34 = load i64, i64* %val, align 8
  %call34 = call i64 @font_put_extra(i64 %32, i64 %33, i64 %34)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.33, %if.then.31
  br label %if.end.39

if.else.36:                                       ; preds = %if.else
  %35 = load i64, i64* %spec, align 8
  %36 = load i64, i64* %key, align 8
  %37 = load i64, i64* %key, align 8
  %38 = load i64, i64* %val, align 8
  %call37 = call i64 @font_prop_validate(i32 0, i64 %37, i64 %38)
  %call38 = call i64 @font_put_extra(i64 %35, i64 %36, i64 %call37)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.end.35
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.end.21
  br label %for.inc

for.inc:                                          ; preds = %if.end.40
  %39 = load i64, i64* %i, align 8
  %add41 = add nsw i64 %39, 2
  store i64 %add41, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load i64, i64* %spec, align 8
  ret i64 %40
}

; Function Attrs: nounwind uwtable
define internal i32 @font_parse_name(i8* %name, i64 %namelen, i64 %font) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %namelen.addr = alloca i64, align 8
  %font.addr = alloca i64, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %namelen, i64* %namelen.addr, align 8
  store i64 %font, i64* %font.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %call = call i8* @strchr(i8* %2, i32 42) #6
  %tobool = icmp ne i8* %call, null
  br i1 %tobool, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load i8*, i8** %name.addr, align 8
  %call3 = call i8* @strchr(i8* %3, i32 63) #6
  %tobool4 = icmp ne i8* %call3, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %4 = load i8*, i8** %name.addr, align 8
  %5 = load i64, i64* %namelen.addr, align 8
  %6 = load i64, i64* %font.addr, align 8
  %call5 = call i32 @font_parse_xlfd(i8* %4, i64 %5, i64 %6)
  store i32 %call5, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.2
  %7 = load i8*, i8** %name.addr, align 8
  %8 = load i64, i64* %namelen.addr, align 8
  %9 = load i64, i64* %font.addr, align 8
  %call6 = call i32 @font_parse_fcname(i8* %7, i64 %8, i64 %9)
  store i32 %call6, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define void @font_clear_prop(i64* %attrs, i32 %prop) #0 {
entry:
  %attrs.addr = alloca i64*, align 8
  %prop.addr = alloca i32, align 4
  %font = alloca i64, align 8
  store i64* %attrs, i64** %attrs.addr, align 8
  store i32 %prop, i32* %prop.addr, align 4
  %0 = load i64*, i64** %attrs.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %0, i64 15
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %font, align 8
  %2 = load i64, i64* %font, align 8
  %call = call zeroext i1 @FONTP(i64 %2)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %font, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 86)
  %call2 = call i64 @Ffont_get(i64 %3, i64 %call1)
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call2, %call3
  br i1 %cmp, label %if.end.9, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %4 = load i64, i64* %font, align 8
  %call5 = call i64 @copy_font_spec(i64 %4)
  store i64 %call5, i64* %font, align 8
  %5 = load i64, i64* %font, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 86)
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %call8 = call i64 @font_put_extra(i64 %5, i64 %call6, i64 %call7)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.4, %if.end
  %6 = load i64, i64* %font, align 8
  %7 = load i32, i32* %prop.addr, align 4
  %conv = zext i32 %7 to i64
  %call10 = call i64 @AREF(i64 %6, i64 %conv)
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %call10, %call11
  br i1 %cmp12, label %land.lhs.true, label %if.end.26

land.lhs.true:                                    ; preds = %if.end.9
  %8 = load i32, i32* %prop.addr, align 4
  %cmp14 = icmp ne i32 %8, 2
  br i1 %cmp14, label %land.lhs.true.16, label %if.end.26

land.lhs.true.16:                                 ; preds = %land.lhs.true
  %9 = load i32, i32* %prop.addr, align 4
  %cmp17 = icmp ne i32 %9, 1
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.26

land.lhs.true.19:                                 ; preds = %land.lhs.true.16
  %10 = load i32, i32* %prop.addr, align 4
  %cmp20 = icmp ne i32 %10, 7
  br i1 %cmp20, label %land.lhs.true.22, label %if.end.26

land.lhs.true.22:                                 ; preds = %land.lhs.true.19
  %11 = load i32, i32* %prop.addr, align 4
  %cmp23 = icmp ne i32 %11, 8
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %land.lhs.true.22
  br label %return

if.end.26:                                        ; preds = %land.lhs.true.22, %land.lhs.true.19, %land.lhs.true.16, %land.lhs.true, %if.end.9
  %12 = load i64, i64* %font, align 8
  %13 = load i64*, i64** %attrs.addr, align 8
  %arrayidx27 = getelementptr inbounds i64, i64* %13, i64 15
  %14 = load i64, i64* %arrayidx27, align 8
  %cmp28 = icmp eq i64 %12, %14
  br i1 %cmp28, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %if.end.26
  %15 = load i64, i64* %font, align 8
  %call31 = call i64 @copy_font_spec(i64 %15)
  store i64 %call31, i64* %font, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %if.end.26
  %16 = load i64, i64* %font, align 8
  %17 = load i32, i32* %prop.addr, align 4
  %conv33 = zext i32 %17 to i64
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %16, i64 %conv33, i64 %call34)
  %18 = load i32, i32* %prop.addr, align 4
  %cmp35 = icmp eq i32 %18, 2
  br i1 %cmp35, label %if.then.39, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.32
  %19 = load i32, i32* %prop.addr, align 4
  %cmp37 = icmp eq i32 %19, 1
  br i1 %cmp37, label %if.then.39, label %if.else

if.then.39:                                       ; preds = %lor.lhs.false, %if.end.32
  %20 = load i32, i32* %prop.addr, align 4
  %cmp40 = icmp eq i32 %20, 2
  br i1 %cmp40, label %if.then.42, label %if.end.45

if.then.42:                                       ; preds = %if.then.39
  %21 = load i64, i64* %font, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %21, i64 1, i64 %call43)
  %22 = load i64, i64* %font, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %22, i64 7, i64 %call44)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.42, %if.then.39
  %23 = load i64, i64* %font, align 8
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %23, i64 3, i64 %call46)
  %24 = load i64, i64* %font, align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %24, i64 4, i64 %call47)
  %25 = load i64, i64* %font, align 8
  %call48 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %25, i64 8, i64 %call48)
  %26 = load i64, i64* %font, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %26, i64 9, i64 %call49)
  %27 = load i64, i64* %font, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %27, i64 10, i64 %call50)
  %28 = load i64, i64* %font, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %28, i64 11, i64 %call51)
  br label %if.end.65

if.else:                                          ; preds = %lor.lhs.false
  %29 = load i32, i32* %prop.addr, align 4
  %cmp52 = icmp eq i32 %29, 8
  br i1 %cmp52, label %if.then.54, label %if.else.58

if.then.54:                                       ; preds = %if.else
  %30 = load i64, i64* %font, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %30, i64 9, i64 %call55)
  %31 = load i64, i64* %font, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %31, i64 10, i64 %call56)
  %32 = load i64, i64* %font, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %32, i64 11, i64 %call57)
  br label %if.end.64

if.else.58:                                       ; preds = %if.else
  %33 = load i32, i32* %prop.addr, align 4
  %cmp59 = icmp eq i32 %33, 7
  br i1 %cmp59, label %if.then.61, label %if.end.63

if.then.61:                                       ; preds = %if.else.58
  %34 = load i64, i64* %font, align 8
  %call62 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %34, i64 11, i64 %call62)
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.61, %if.else.58
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.then.54
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end.45
  %35 = load i64, i64* %font, align 8
  %36 = load i64*, i64** %attrs.addr, align 8
  %arrayidx66 = getelementptr inbounds i64, i64* %36, i64 15
  store i64 %35, i64* %arrayidx66, align 8
  br label %return

return:                                           ; preds = %if.end.65, %if.then.25, %if.then
  ret void
}

declare zeroext i1 @FONTP(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_get(i64 %font, i64 %key) #0 {
entry:
  %retval = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %key.addr = alloca i64, align 8
  %idx = alloca i32, align 4
  %val = alloca i64, align 8
  %fontp = alloca %struct.font*, align 8
  store i64 %font, i64* %font.addr, align 8
  store i64 %key, i64* %key.addr, align 8
  %0 = load i64, i64* %font.addr, align 8
  call void @CHECK_FONT(i64 %0)
  %1 = load i64, i64* %key.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 897)
  %2 = load i64, i64* %key.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %key.addr, align 8
  %call2 = call i32 @get_font_prop_index(i64 %5)
  store i32 %call2, i32* %idx, align 4
  %6 = load i32, i32* %idx, align 4
  %cmp3 = icmp sge i32 %6, 5
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %7 = load i32, i32* %idx, align 4
  %cmp5 = icmp sle i32 %7, 7
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load i64, i64* %font.addr, align 8
  %9 = load i32, i32* %idx, align 4
  %call7 = call i64 @font_style_symbolic(i64 %8, i32 %9, i1 zeroext false)
  store i64 %call7, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %10 = load i32, i32* %idx, align 4
  %cmp8 = icmp sge i32 %10, 0
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.16

land.lhs.true.10:                                 ; preds = %if.end
  %11 = load i32, i32* %idx, align 4
  %cmp11 = icmp slt i32 %11, 12
  br i1 %cmp11, label %if.then.13, label %if.end.16

if.then.13:                                       ; preds = %land.lhs.true.10
  %12 = load i64, i64* %font.addr, align 8
  %13 = load i32, i32* %idx, align 4
  %conv14 = sext i32 %13 to i64
  %call15 = call i64 @AREF(i64 %12, i64 %conv14)
  store i64 %call15, i64* %retval
  br label %return

if.end.16:                                        ; preds = %land.lhs.true.10, %if.end
  %14 = load i64, i64* %key.addr, align 8
  %15 = load i64, i64* %font.addr, align 8
  %call17 = call i64 @AREF(i64 %15, i64 12)
  %call18 = call i64 @Fassq(i64 %14, i64 %call17)
  store i64 %call18, i64* %val, align 8
  %16 = load i64, i64* %val, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp20 = icmp eq i64 %16, %call19
  br i1 %cmp20, label %land.lhs.true.22, label %if.else.53

land.lhs.true.22:                                 ; preds = %if.end.16
  %17 = load i64, i64* %font.addr, align 8
  %call23 = call zeroext i1 @FONT_OBJECT_P(i64 %17)
  br i1 %call23, label %if.then.25, label %if.else.53

if.then.25:                                       ; preds = %land.lhs.true.22
  %18 = load i64, i64* %font.addr, align 8
  %call26 = call %struct.font* @XFONT_OBJECT(i64 %18)
  store %struct.font* %call26, %struct.font** %fontp, align 8
  %19 = load i64, i64* %key.addr, align 8
  %call27 = call i64 @builtin_lisp_symbol(i32 89)
  %cmp28 = icmp eq i64 %19, %call27
  br i1 %cmp28, label %if.then.30, label %if.else.39

if.then.30:                                       ; preds = %if.then.25
  %20 = load %struct.font*, %struct.font** %fontp, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %20, i32 0, i32 18
  %21 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %otf_capability = getelementptr inbounds %struct.font_driver, %struct.font_driver* %21, i32 0, i32 18
  %22 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability, align 8
  %tobool = icmp ne i64 (%struct.font*)* %22, null
  br i1 %tobool, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %if.then.30
  %23 = load %struct.font*, %struct.font** %fontp, align 8
  %driver32 = getelementptr inbounds %struct.font, %struct.font* %23, i32 0, i32 18
  %24 = load %struct.font_driver*, %struct.font_driver** %driver32, align 8
  %otf_capability33 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %24, i32 0, i32 18
  %25 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability33, align 8
  %26 = load %struct.font*, %struct.font** %fontp, align 8
  %call34 = call i64 %25(%struct.font* %26)
  store i64 %call34, i64* %val, align 8
  br label %if.end.38

if.else:                                          ; preds = %if.then.30
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  %call37 = call i64 @Fcons(i64 %call35, i64 %call36)
  store i64 %call37, i64* %val, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.else, %if.then.31
  br label %if.end.52

if.else.39:                                       ; preds = %if.then.25
  %27 = load i64, i64* %key.addr, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 24)
  %cmp41 = icmp eq i64 %27, %call40
  br i1 %cmp41, label %if.then.43, label %if.end.51

if.then.43:                                       ; preds = %if.else.39
  %28 = load %struct.font*, %struct.font** %fontp, align 8
  %driver44 = getelementptr inbounds %struct.font, %struct.font* %28, i32 0, i32 18
  %29 = load %struct.font_driver*, %struct.font_driver** %driver44, align 8
  %combining_capability = getelementptr inbounds %struct.font_driver, %struct.font_driver* %29, i32 0, i32 27
  %30 = load i64 (%struct.font*)*, i64 (%struct.font*)** %combining_capability, align 8
  %tobool45 = icmp ne i64 (%struct.font*)* %30, null
  br i1 %tobool45, label %if.then.46, label %if.end.50

if.then.46:                                       ; preds = %if.then.43
  %31 = load %struct.font*, %struct.font** %fontp, align 8
  %driver47 = getelementptr inbounds %struct.font, %struct.font* %31, i32 0, i32 18
  %32 = load %struct.font_driver*, %struct.font_driver** %driver47, align 8
  %combining_capability48 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %32, i32 0, i32 27
  %33 = load i64 (%struct.font*)*, i64 (%struct.font*)** %combining_capability48, align 8
  %34 = load %struct.font*, %struct.font** %fontp, align 8
  %call49 = call i64 %33(%struct.font* %34)
  store i64 %call49, i64* %val, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.46, %if.then.43
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.else.39
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.end.38
  br label %if.end.55

if.else.53:                                       ; preds = %land.lhs.true.22, %if.end.16
  %35 = load i64, i64* %val, align 8
  %call54 = call i64 @Fcdr(i64 %35)
  store i64 %call54, i64* %val, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.53, %if.end.52
  %36 = load i64, i64* %val, align 8
  store i64 %36, i64* %retval
  br label %return

return:                                           ; preds = %if.end.55, %if.then.13, %if.then
  %37 = load i64, i64* %retval
  ret i64 %37
}

; Function Attrs: nounwind uwtable
define i64 @font_find_for_lface(%struct.frame* %f, i64* %attrs, i64 %spec, i32 %c) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %attrs.addr = alloca i64*, align 8
  %spec.addr = alloca i64, align 8
  %c.addr = alloca i32, align 4
  %work = alloca i64, align 8
  %entities = alloca i64, align 8
  %val = alloca i64, align 8
  %foundry = alloca [3 x i64], align 16
  %family = alloca i64*, align 8
  %registry = alloca [3 x i64], align 16
  %adstyle = alloca [3 x i64], align 16
  %pixel_size = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %encoding = alloca %struct.charset*, align 8
  %repertory = alloca %struct.charset*, align 8
  %pt = alloca double, align 8
  %face_font = alloca i64, align 8
  %familybuf = alloca [3 x i64], align 16
  %alters = alloca i64, align 8
  %alterslen = alloca i64, align 8
  %alloca_nbytes = alloca i64, align 8
  %arg_ = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64* %attrs, i64** %attrs.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i32 %c, i32* %c.addr, align 4
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %0 = load i64, i64* %spec.addr, align 8
  %call1 = call i64 @AREF(i64 %0, i64 4)
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 0
  store i64 %call1, i64* %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 0
  %1 = load i64, i64* %arrayidx2, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 579)
  %arrayidx5 = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 0
  store i64 %call4, i64* %arrayidx5, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 182)
  %arrayidx7 = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 1
  store i64 %call6, i64* %arrayidx7, align 8
  %2 = load i64, i64* @zero_vector, align 8
  %arrayidx8 = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 2
  store i64 %2, i64* %arrayidx8, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i64, i64* @zero_vector, align 8
  %arrayidx9 = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 1
  store i64 %3, i64* %arrayidx9, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i32, i32* %c.addr, align 4
  %cmp10 = icmp sge i32 %4, 0
  br i1 %cmp10, label %land.lhs.true, label %if.end.123

land.lhs.true:                                    ; preds = %if.end
  %5 = load i64, i64* %spec.addr, align 8
  %call11 = call i64 @AREF(i64 %5, i64 4)
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %call11, %call12
  br i1 %cmp13, label %if.end.123, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true
  %6 = load i64, i64* %spec.addr, align 8
  %call15 = call i64 @AREF(i64 %6, i64 4)
  %call16 = call i32 @font_registry_charsets(i64 %call15, %struct.charset** %encoding, %struct.charset** %repertory)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.20

if.then.18:                                       ; preds = %if.then.14
  %call19 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call19, i64* %retval
  br label %return

if.end.20:                                        ; preds = %if.then.14
  %7 = load %struct.charset*, %struct.charset** %repertory, align 8
  %tobool = icmp ne %struct.charset* %7, null
  br i1 %tobool, label %land.lhs.true.21, label %if.else.115

land.lhs.true.21:                                 ; preds = %if.end.20
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.21
  %8 = load i32, i32* %c.addr, align 4
  %add = add i32 %8, 0
  %cmp22 = icmp ult i32 %add, 128
  br i1 %cmp22, label %land.lhs.true.26, label %cond.false.29

cond.false:                                       ; preds = %land.lhs.true.21
  %9 = load i32, i32* %c.addr, align 4
  %conv = sext i32 %9 to i64
  %add23 = add i64 %conv, 0
  %cmp24 = icmp ult i64 %add23, 128
  br i1 %cmp24, label %land.lhs.true.26, label %cond.false.29

land.lhs.true.26:                                 ; preds = %cond.false, %cond.true
  %10 = load %struct.charset*, %struct.charset** %repertory, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %10, i32 0, i32 5
  %bf.load = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %cond.true.28, label %cond.false.29

cond.true.28:                                     ; preds = %land.lhs.true.26
  %11 = load i32, i32* %c.addr, align 4
  br label %cond.end.108

cond.false.29:                                    ; preds = %land.lhs.true.26, %cond.false, %cond.true
  %12 = load %struct.charset*, %struct.charset** %repertory, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %12, i32 0, i32 5
  %bf.load30 = load i8, i8* %unified_p, align 8
  %bf.lshr31 = lshr i8 %bf.load30, 5
  %bf.clear32 = and i8 %bf.lshr31, 1
  %bf.cast33 = trunc i8 %bf.clear32 to i1
  br i1 %bf.cast33, label %cond.true.41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.29
  %13 = load %struct.charset*, %struct.charset** %repertory, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %13, i32 0, i32 9
  %14 = load i32, i32* %method, align 4
  %cmp35 = icmp eq i32 %14, 2
  br i1 %cmp35, label %cond.true.41, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false
  %15 = load %struct.charset*, %struct.charset** %repertory, align 8
  %method38 = getelementptr inbounds %struct.charset, %struct.charset* %15, i32 0, i32 9
  %16 = load i32, i32* %method38, align 4
  %cmp39 = icmp eq i32 %16, 3
  br i1 %cmp39, label %cond.true.41, label %cond.false.43

cond.true.41:                                     ; preds = %lor.lhs.false.37, %lor.lhs.false, %cond.false.29
  %17 = load %struct.charset*, %struct.charset** %repertory, align 8
  %18 = load i32, i32* %c.addr, align 4
  %call42 = call i32 @encode_char(%struct.charset* %17, i32 %18)
  br label %cond.end.106

cond.false.43:                                    ; preds = %lor.lhs.false.37
  %19 = load i32, i32* %c.addr, align 4
  %20 = load %struct.charset*, %struct.charset** %repertory, align 8
  %min_char = getelementptr inbounds %struct.charset, %struct.charset* %20, i32 0, i32 13
  %21 = load i32, i32* %min_char, align 4
  %cmp44 = icmp slt i32 %19, %21
  br i1 %cmp44, label %cond.true.49, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %cond.false.43
  %22 = load i32, i32* %c.addr, align 4
  %23 = load %struct.charset*, %struct.charset** %repertory, align 8
  %max_char = getelementptr inbounds %struct.charset, %struct.charset* %23, i32 0, i32 14
  %24 = load i32, i32* %max_char, align 4
  %cmp47 = icmp sgt i32 %22, %24
  br i1 %cmp47, label %cond.true.49, label %cond.false.50

cond.true.49:                                     ; preds = %lor.lhs.false.46, %cond.false.43
  %25 = load %struct.charset*, %struct.charset** %repertory, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %25, i32 0, i32 15
  %26 = load i32, i32* %invalid_code, align 4
  br label %cond.end.104

cond.false.50:                                    ; preds = %lor.lhs.false.46
  %27 = load %struct.charset*, %struct.charset** %repertory, align 8
  %method51 = getelementptr inbounds %struct.charset, %struct.charset* %27, i32 0, i32 9
  %28 = load i32, i32* %method51, align 4
  %cmp52 = icmp eq i32 %28, 0
  br i1 %cmp52, label %cond.true.54, label %cond.false.63

cond.true.54:                                     ; preds = %cond.false.50
  %29 = load %struct.charset*, %struct.charset** %repertory, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %29, i32 0, i32 5
  %bf.load55 = load i8, i8* %code_linear_p, align 8
  %bf.clear56 = and i8 %bf.load55, 1
  %bf.cast57 = trunc i8 %bf.clear56 to i1
  br i1 %bf.cast57, label %cond.true.59, label %cond.false.61

cond.true.59:                                     ; preds = %cond.true.54
  %30 = load i32, i32* %c.addr, align 4
  %31 = load %struct.charset*, %struct.charset** %repertory, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %31, i32 0, i32 17
  %32 = load i32, i32* %code_offset, align 4
  %sub = sub nsw i32 %30, %32
  %33 = load %struct.charset*, %struct.charset** %repertory, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %33, i32 0, i32 10
  %34 = load i32, i32* %min_code, align 4
  %add60 = add i32 %sub, %34
  br label %cond.end

cond.false.61:                                    ; preds = %cond.true.54
  %35 = load %struct.charset*, %struct.charset** %repertory, align 8
  %36 = load i32, i32* %c.addr, align 4
  %call62 = call i32 @encode_char(%struct.charset* %35, i32 %36)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.61, %cond.true.59
  %cond = phi i32 [ %add60, %cond.true.59 ], [ %call62, %cond.false.61 ]
  br label %cond.end.102

cond.false.63:                                    ; preds = %cond.false.50
  %37 = load %struct.charset*, %struct.charset** %repertory, align 8
  %method64 = getelementptr inbounds %struct.charset, %struct.charset* %37, i32 0, i32 9
  %38 = load i32, i32* %method64, align 4
  %cmp65 = icmp eq i32 %38, 1
  br i1 %cmp65, label %cond.true.67, label %cond.false.98

cond.true.67:                                     ; preds = %cond.false.63
  %39 = load %struct.charset*, %struct.charset** %repertory, align 8
  %compact_codes_p = getelementptr inbounds %struct.charset, %struct.charset* %39, i32 0, i32 5
  %bf.load68 = load i8, i8* %compact_codes_p, align 8
  %bf.lshr69 = lshr i8 %bf.load68, 4
  %bf.clear70 = and i8 %bf.lshr69, 1
  %bf.cast71 = trunc i8 %bf.clear70 to i1
  br i1 %bf.cast71, label %land.lhs.true.73, label %cond.false.94

land.lhs.true.73:                                 ; preds = %cond.true.67
  %40 = load i64, i64* @Vcharset_hash_table, align 8
  %call74 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %40)
  %41 = load %struct.charset*, %struct.charset** %repertory, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %41, i32 0, i32 1
  %42 = load i64, i64* %hash_index, align 8
  %call75 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call74, i64 %42)
  %call76 = call i64 @AREF(i64 %call75, i64 5)
  %call77 = call zeroext i1 @CHAR_TABLE_P(i64 %call76)
  br i1 %call77, label %cond.true.79, label %cond.false.94

cond.true.79:                                     ; preds = %land.lhs.true.73
  %43 = load i64, i64* @Vcharset_hash_table, align 8
  %call80 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %43)
  %44 = load %struct.charset*, %struct.charset** %repertory, align 8
  %hash_index81 = getelementptr inbounds %struct.charset, %struct.charset* %44, i32 0, i32 1
  %45 = load i64, i64* %hash_index81, align 8
  %call82 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call80, i64 %45)
  %call83 = call i64 @AREF(i64 %call82, i64 5)
  %46 = load i32, i32* %c.addr, align 4
  %call84 = call i64 @CHAR_TABLE_REF(i64 %call83, i32 %46)
  store i64 %call84, i64* @charset_work, align 8
  %47 = load i64, i64* @charset_work, align 8
  %call85 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp86 = icmp eq i64 %47, %call85
  br i1 %cmp86, label %cond.true.88, label %cond.false.90

cond.true.88:                                     ; preds = %cond.true.79
  %48 = load %struct.charset*, %struct.charset** %repertory, align 8
  %invalid_code89 = getelementptr inbounds %struct.charset, %struct.charset* %48, i32 0, i32 15
  %49 = load i32, i32* %invalid_code89, align 4
  br label %cond.end.92

cond.false.90:                                    ; preds = %cond.true.79
  %50 = load i64, i64* @charset_work, align 8
  %shr = ashr i64 %50, 2
  %conv91 = trunc i64 %shr to i32
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.false.90, %cond.true.88
  %cond93 = phi i32 [ %49, %cond.true.88 ], [ %conv91, %cond.false.90 ]
  br label %cond.end.96

cond.false.94:                                    ; preds = %land.lhs.true.73, %cond.true.67
  %51 = load %struct.charset*, %struct.charset** %repertory, align 8
  %52 = load i32, i32* %c.addr, align 4
  %call95 = call i32 @encode_char(%struct.charset* %51, i32 %52)
  br label %cond.end.96

cond.end.96:                                      ; preds = %cond.false.94, %cond.end.92
  %cond97 = phi i32 [ %cond93, %cond.end.92 ], [ %call95, %cond.false.94 ]
  br label %cond.end.100

cond.false.98:                                    ; preds = %cond.false.63
  %53 = load %struct.charset*, %struct.charset** %repertory, align 8
  %54 = load i32, i32* %c.addr, align 4
  %call99 = call i32 @encode_char(%struct.charset* %53, i32 %54)
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.false.98, %cond.end.96
  %cond101 = phi i32 [ %cond97, %cond.end.96 ], [ %call99, %cond.false.98 ]
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.end.100, %cond.end
  %cond103 = phi i32 [ %cond, %cond.end ], [ %cond101, %cond.end.100 ]
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.end.102, %cond.true.49
  %cond105 = phi i32 [ %26, %cond.true.49 ], [ %cond103, %cond.end.102 ]
  br label %cond.end.106

cond.end.106:                                     ; preds = %cond.end.104, %cond.true.41
  %cond107 = phi i32 [ %call42, %cond.true.41 ], [ %cond105, %cond.end.104 ]
  br label %cond.end.108

cond.end.108:                                     ; preds = %cond.end.106, %cond.true.28
  %cond109 = phi i32 [ %11, %cond.true.28 ], [ %cond107, %cond.end.106 ]
  %55 = load %struct.charset*, %struct.charset** %repertory, align 8
  %invalid_code110 = getelementptr inbounds %struct.charset, %struct.charset* %55, i32 0, i32 15
  %56 = load i32, i32* %invalid_code110, align 4
  %cmp111 = icmp eq i32 %cond109, %56
  br i1 %cmp111, label %if.then.113, label %if.else.115

if.then.113:                                      ; preds = %cond.end.108
  %call114 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call114, i64* %retval
  br label %return

if.else.115:                                      ; preds = %cond.end.108, %if.end.20
  %57 = load i32, i32* %c.addr, align 4
  %58 = load %struct.charset*, %struct.charset** %encoding, align 8
  %max_char116 = getelementptr inbounds %struct.charset, %struct.charset* %58, i32 0, i32 14
  %59 = load i32, i32* %max_char116, align 4
  %cmp117 = icmp sgt i32 %57, %59
  br i1 %cmp117, label %if.then.119, label %if.end.121

if.then.119:                                      ; preds = %if.else.115
  %call120 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call120, i64* %retval
  br label %return

if.end.121:                                       ; preds = %if.else.115
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121
  br label %if.end.123

if.end.123:                                       ; preds = %if.end.122, %land.lhs.true, %if.end
  %60 = load i64, i64* %spec.addr, align 8
  %call124 = call i64 @copy_font_spec(i64 %60)
  store i64 %call124, i64* %work, align 8
  %61 = load i64, i64* %work, align 8
  %62 = load i64, i64* %spec.addr, align 8
  %call125 = call i64 @AREF(i64 %62, i64 0)
  call void @ASET(i64 %61, i64 0, i64 %call125)
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %64 = load i64, i64* %spec.addr, align 8
  %call126 = call i32 @font_pixel_size(%struct.frame* %63, i64 %64)
  store i32 %call126, i32* %pixel_size, align 4
  %65 = load i32, i32* %pixel_size, align 4
  %cmp127 = icmp eq i32 %65, 0
  br i1 %cmp127, label %land.lhs.true.129, label %if.end.146

land.lhs.true.129:                                ; preds = %if.end.123
  %66 = load i64*, i64** %attrs.addr, align 8
  %arrayidx130 = getelementptr inbounds i64, i64* %66, i64 4
  %67 = load i64, i64* %arrayidx130, align 8
  %and = and i64 %67, 7
  %conv131 = trunc i64 %and to i32
  %and132 = and i32 %conv131, -5
  %cmp133 = icmp eq i32 %and132, 2
  br i1 %cmp133, label %if.then.135, label %if.end.146

if.then.135:                                      ; preds = %land.lhs.true.129
  %68 = load i64*, i64** %attrs.addr, align 8
  %arrayidx136 = getelementptr inbounds i64, i64* %68, i64 4
  %69 = load i64, i64* %arrayidx136, align 8
  %shr137 = ashr i64 %69, 2
  %conv138 = sitofp i64 %shr137 to double
  store double %conv138, double* %pt, align 8
  %70 = load double, double* %pt, align 8
  %div = fdiv double %70, 1.000000e+01
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %72 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %72, i32 0, i32 44
  %73 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %resy = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %73, i32 0, i32 8
  %74 = load double, double* %resy, align 8
  %mul = fmul double %div, %74
  %div139 = fdiv double %mul, 7.227000e+01
  %add140 = fadd double %div139, 5.000000e-01
  %conv141 = fptosi double %add140 to i32
  store i32 %conv141, i32* %pixel_size, align 4
  %75 = load i32, i32* %pixel_size, align 4
  %cmp142 = icmp slt i32 %75, 1
  br i1 %cmp142, label %if.then.144, label %if.end.145

if.then.144:                                      ; preds = %if.then.135
  store i32 1, i32* %pixel_size, align 4
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.144, %if.then.135
  br label %if.end.146

if.end.146:                                       ; preds = %if.end.145, %land.lhs.true.129, %if.end.123
  %76 = load i64, i64* %work, align 8
  %call147 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %76, i64 8, i64 %call147)
  %77 = load i64, i64* %work, align 8
  %call148 = call i64 @AREF(i64 %77, i64 1)
  %arrayidx149 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 0
  store i64 %call148, i64* %arrayidx149, align 8
  %arrayidx150 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 0
  %78 = load i64, i64* %arrayidx150, align 8
  %call151 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp152 = icmp eq i64 %78, %call151
  br i1 %cmp152, label %if.else.156, label %if.then.154

if.then.154:                                      ; preds = %if.end.146
  %79 = load i64, i64* @zero_vector, align 8
  %arrayidx155 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 1
  store i64 %79, i64* %arrayidx155, align 8
  br label %if.end.173

if.else.156:                                      ; preds = %if.end.146
  %80 = load i64*, i64** %attrs.addr, align 8
  %arrayidx157 = getelementptr inbounds i64, i64* %80, i64 2
  %81 = load i64, i64* %arrayidx157, align 8
  %call158 = call zeroext i1 @STRINGP(i64 %81)
  br i1 %call158, label %if.then.159, label %if.else.168

if.then.159:                                      ; preds = %if.else.156
  %82 = load i64*, i64** %attrs.addr, align 8
  %arrayidx160 = getelementptr inbounds i64, i64* %82, i64 2
  %83 = load i64, i64* %arrayidx160, align 8
  store i64 %83, i64* %val, align 8
  %84 = load i64, i64* %val, align 8
  %call161 = call i8* @SSDATA(i64 %84)
  %85 = load i64, i64* %val, align 8
  %call162 = call i64 @SBYTES(i64 %85)
  %call163 = call i64 @font_intern_prop(i8* %call161, i64 %call162, i1 zeroext true)
  %arrayidx164 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 0
  store i64 %call163, i64* %arrayidx164, align 8
  %call165 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx166 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 1
  store i64 %call165, i64* %arrayidx166, align 8
  %86 = load i64, i64* @zero_vector, align 8
  %arrayidx167 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 2
  store i64 %86, i64* %arrayidx167, align 8
  br label %if.end.172

if.else.168:                                      ; preds = %if.else.156
  %call169 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx170 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 0
  store i64 %call169, i64* %arrayidx170, align 8
  %87 = load i64, i64* @zero_vector, align 8
  %arrayidx171 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 1
  store i64 %87, i64* %arrayidx171, align 8
  br label %if.end.172

if.end.172:                                       ; preds = %if.else.168, %if.then.159
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172, %if.then.154
  %88 = load i64, i64* %work, align 8
  %call174 = call i64 @AREF(i64 %88, i64 3)
  %arrayidx175 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 0
  store i64 %call174, i64* %arrayidx175, align 8
  %arrayidx176 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 0
  %89 = load i64, i64* %arrayidx176, align 8
  %call177 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp178 = icmp eq i64 %89, %call177
  br i1 %cmp178, label %if.else.182, label %if.then.180

if.then.180:                                      ; preds = %if.end.173
  %90 = load i64, i64* @zero_vector, align 8
  %arrayidx181 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 1
  store i64 %90, i64* %arrayidx181, align 8
  br label %if.end.207

if.else.182:                                      ; preds = %if.end.173
  %91 = load i64*, i64** %attrs.addr, align 8
  %arrayidx183 = getelementptr inbounds i64, i64* %91, i64 15
  %92 = load i64, i64* %arrayidx183, align 8
  %call184 = call zeroext i1 @FONTP(i64 %92)
  br i1 %call184, label %if.then.185, label %if.else.202

if.then.185:                                      ; preds = %if.else.182
  %93 = load i64*, i64** %attrs.addr, align 8
  %arrayidx186 = getelementptr inbounds i64, i64* %93, i64 15
  %94 = load i64, i64* %arrayidx186, align 8
  store i64 %94, i64* %face_font, align 8
  %95 = load i64, i64* %face_font, align 8
  %call187 = call i64 @AREF(i64 %95, i64 3)
  %call188 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp189 = icmp eq i64 %call187, %call188
  br i1 %cmp189, label %if.else.197, label %if.then.191

if.then.191:                                      ; preds = %if.then.185
  %96 = load i64, i64* %face_font, align 8
  %call192 = call i64 @AREF(i64 %96, i64 3)
  %arrayidx193 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 0
  store i64 %call192, i64* %arrayidx193, align 8
  %call194 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx195 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 1
  store i64 %call194, i64* %arrayidx195, align 8
  %97 = load i64, i64* @zero_vector, align 8
  %arrayidx196 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 2
  store i64 %97, i64* %arrayidx196, align 8
  br label %if.end.201

if.else.197:                                      ; preds = %if.then.185
  %call198 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx199 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 0
  store i64 %call198, i64* %arrayidx199, align 8
  %98 = load i64, i64* @zero_vector, align 8
  %arrayidx200 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 1
  store i64 %98, i64* %arrayidx200, align 8
  br label %if.end.201

if.end.201:                                       ; preds = %if.else.197, %if.then.191
  br label %if.end.206

if.else.202:                                      ; preds = %if.else.182
  %call203 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx204 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 0
  store i64 %call203, i64* %arrayidx204, align 8
  %99 = load i64, i64* @zero_vector, align 8
  %arrayidx205 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 1
  store i64 %99, i64* %arrayidx205, align 8
  br label %if.end.206

if.end.206:                                       ; preds = %if.else.202, %if.end.201
  br label %if.end.207

if.end.207:                                       ; preds = %if.end.206, %if.then.180
  %100 = load i64, i64* %work, align 8
  %call208 = call i64 @AREF(i64 %100, i64 2)
  store i64 %call208, i64* %val, align 8
  %101 = load i64, i64* %val, align 8
  %call209 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp210 = icmp eq i64 %101, %call209
  br i1 %cmp210, label %land.lhs.true.212, label %if.end.221

land.lhs.true.212:                                ; preds = %if.end.207
  %102 = load i64*, i64** %attrs.addr, align 8
  %arrayidx213 = getelementptr inbounds i64, i64* %102, i64 1
  %103 = load i64, i64* %arrayidx213, align 8
  %call214 = call zeroext i1 @STRINGP(i64 %103)
  br i1 %call214, label %if.then.216, label %if.end.221

if.then.216:                                      ; preds = %land.lhs.true.212
  %104 = load i64*, i64** %attrs.addr, align 8
  %arrayidx217 = getelementptr inbounds i64, i64* %104, i64 1
  %105 = load i64, i64* %arrayidx217, align 8
  store i64 %105, i64* %val, align 8
  %106 = load i64, i64* %val, align 8
  %call218 = call i8* @SSDATA(i64 %106)
  %107 = load i64, i64* %val, align 8
  %call219 = call i64 @SBYTES(i64 %107)
  %call220 = call i64 @font_intern_prop(i8* %call218, i64 %call219, i1 zeroext true)
  store i64 %call220, i64* %val, align 8
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.216, %land.lhs.true.212, %if.end.207
  %108 = load i64, i64* %val, align 8
  %call222 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp223 = icmp eq i64 %108, %call222
  br i1 %cmp223, label %if.then.225, label %if.else.229

if.then.225:                                      ; preds = %if.end.221
  %arraydecay = getelementptr inbounds [3 x i64], [3 x i64]* %familybuf, i32 0, i32 0
  store i64* %arraydecay, i64** %family, align 8
  %call226 = call i64 @builtin_lisp_symbol(i32 0)
  %109 = load i64*, i64** %family, align 8
  %arrayidx227 = getelementptr inbounds i64, i64* %109, i64 0
  store i64 %call226, i64* %arrayidx227, align 8
  %110 = load i64, i64* @zero_vector, align 8
  %111 = load i64*, i64** %family, align 8
  %arrayidx228 = getelementptr inbounds i64, i64* %111, i64 1
  store i64 %110, i64* %arrayidx228, align 8
  br label %if.end.2801

if.else.229:                                      ; preds = %if.end.221
  %112 = load i64, i64* %val, align 8
  %113 = load i64, i64* @Vface_alternative_font_family_alist, align 8
  %call230 = call i64 @builtin_lisp_symbol(i32 901)
  %call231 = call i64 @Fassoc_string(i64 %112, i64 %113, i64 %call230)
  store i64 %call231, i64* %alters, align 8
  %114 = load i64, i64* %alters, align 8
  %call232 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp233 = icmp eq i64 %114, %call232
  br i1 %cmp233, label %if.else.2783, label %if.then.235

if.then.235:                                      ; preds = %if.else.229
  %115 = load i64, i64* %alters, align 8
  %call236 = call i64 @Flength(i64 %115)
  %shr237 = ashr i64 %call236, 2
  store i64 %shr237, i64* %alterslen, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.235
  br i1 false, label %cond.true.238, label %cond.false.788

cond.true.238:                                    ; preds = %do.body
  br i1 false, label %cond.true.239, label %cond.false.539

cond.true.239:                                    ; preds = %cond.true.238
  %116 = load i64, i64* %alterslen, align 8
  %add240 = add nsw i64 %116, 2
  %conv241 = trunc i64 %add240 to i8
  %conv242 = sext i8 %conv241 to i32
  %add243 = add nsw i32 0, %conv242
  %mul244 = mul nsw i32 0, %add243
  %sub245 = sub nsw i32 %mul244, 1
  %cmp246 = icmp slt i32 %sub245, 0
  br i1 %cmp246, label %cond.true.248, label %cond.false.268

cond.true.248:                                    ; preds = %cond.true.239
  %117 = load i64, i64* %alterslen, align 8
  %add249 = add nsw i64 %117, 2
  %conv250 = trunc i64 %add249 to i8
  %conv251 = sext i8 %conv250 to i32
  %add252 = add nsw i32 0, %conv251
  %mul253 = mul nsw i32 0, %add252
  %add254 = add nsw i32 %mul253, 0
  %neg = xor i32 %add254, -1
  %cmp255 = icmp eq i32 %neg, -1
  %conv256 = zext i1 %cmp255 to i32
  %sub257 = sub nsw i32 0, %conv256
  %118 = load i64, i64* %alterslen, align 8
  %add258 = add nsw i64 %118, 2
  %conv259 = trunc i64 %add258 to i8
  %conv260 = sext i8 %conv259 to i32
  %add261 = add nsw i32 0, %conv260
  %mul262 = mul nsw i32 0, %add261
  %add263 = add nsw i32 %mul262, 1
  %shl = shl i32 %add263, 30
  %sub264 = sub nsw i32 %shl, 1
  %mul265 = mul nsw i32 %sub264, 2
  %add266 = add nsw i32 %mul265, 1
  %sub267 = sub nsw i32 %sub257, %add266
  br label %cond.end.275

cond.false.268:                                   ; preds = %cond.true.239
  %119 = load i64, i64* %alterslen, align 8
  %add269 = add nsw i64 %119, 2
  %conv270 = trunc i64 %add269 to i8
  %conv271 = sext i8 %conv270 to i32
  %add272 = add nsw i32 0, %conv271
  %mul273 = mul nsw i32 0, %add272
  %add274 = add nsw i32 %mul273, 0
  br label %cond.end.275

cond.end.275:                                     ; preds = %cond.false.268, %cond.true.248
  %cond276 = phi i32 [ %sub267, %cond.true.248 ], [ %add274, %cond.false.268 ]
  %cmp277 = icmp eq i32 %cond276, 0
  br i1 %cmp277, label %land.lhs.true.279, label %lor.lhs.false.285

land.lhs.true.279:                                ; preds = %cond.end.275
  %120 = load i64, i64* %alterslen, align 8
  %add280 = add nsw i64 %120, 2
  %conv281 = trunc i64 %add280 to i8
  %conv282 = sext i8 %conv281 to i32
  %cmp283 = icmp slt i32 %conv282, 0
  br i1 %cmp283, label %cond.true.487, label %lor.lhs.false.285

lor.lhs.false.285:                                ; preds = %land.lhs.true.279, %cond.end.275
  br i1 false, label %cond.true.286, label %cond.false.375

cond.true.286:                                    ; preds = %lor.lhs.false.285
  %121 = load i64, i64* %alterslen, align 8
  %add287 = add nsw i64 %121, 2
  %conv288 = trunc i64 %add287 to i8
  %conv289 = sext i8 %conv288 to i32
  %cmp290 = icmp slt i32 %conv289, 0
  br i1 %cmp290, label %cond.true.292, label %cond.false.327

cond.true.292:                                    ; preds = %cond.true.286
  %122 = load i64, i64* %alterslen, align 8
  %add293 = add nsw i64 %122, 2
  %conv294 = trunc i64 %add293 to i8
  %conv295 = sext i8 %conv294 to i32
  %123 = load i64, i64* %alterslen, align 8
  %add296 = add nsw i64 %123, 2
  %conv297 = trunc i64 %add296 to i8
  %conv298 = sext i8 %conv297 to i32
  %add299 = add nsw i32 0, %conv298
  %mul300 = mul nsw i32 0, %add299
  %sub301 = sub nsw i32 %mul300, 1
  %cmp302 = icmp slt i32 %sub301, 0
  br i1 %cmp302, label %cond.true.304, label %cond.false.315

cond.true.304:                                    ; preds = %cond.true.292
  %124 = load i64, i64* %alterslen, align 8
  %add305 = add nsw i64 %124, 2
  %conv306 = trunc i64 %add305 to i8
  %conv307 = sext i8 %conv306 to i32
  %add308 = add nsw i32 0, %conv307
  %mul309 = mul nsw i32 0, %add308
  %add310 = add nsw i32 %mul309, 1
  %shl311 = shl i32 %add310, 30
  %sub312 = sub nsw i32 %shl311, 1
  %mul313 = mul nsw i32 %sub312, 2
  %add314 = add nsw i32 %mul313, 1
  br label %cond.end.322

cond.false.315:                                   ; preds = %cond.true.292
  %125 = load i64, i64* %alterslen, align 8
  %add316 = add nsw i64 %125, 2
  %conv317 = trunc i64 %add316 to i8
  %conv318 = sext i8 %conv317 to i32
  %add319 = add nsw i32 0, %conv318
  %mul320 = mul nsw i32 0, %add319
  %sub321 = sub nsw i32 %mul320, 1
  br label %cond.end.322

cond.end.322:                                     ; preds = %cond.false.315, %cond.true.304
  %cond323 = phi i32 [ %add314, %cond.true.304 ], [ %sub321, %cond.false.315 ]
  %div324 = sdiv i32 %cond323, 8
  %cmp325 = icmp slt i32 %conv295, %div324
  br i1 %cmp325, label %cond.true.487, label %lor.lhs.false.464

cond.false.327:                                   ; preds = %cond.true.286
  br i1 false, label %cond.true.328, label %cond.false.329

cond.true.328:                                    ; preds = %cond.false.327
  br i1 false, label %cond.true.487, label %lor.lhs.false.464

cond.false.329:                                   ; preds = %cond.false.327
  %126 = load i64, i64* %alterslen, align 8
  %add330 = add nsw i64 %126, 2
  %conv331 = trunc i64 %add330 to i8
  %conv332 = sext i8 %conv331 to i32
  %add333 = add nsw i32 0, %conv332
  %mul334 = mul nsw i32 0, %add333
  %sub335 = sub nsw i32 %mul334, 1
  %cmp336 = icmp slt i32 %sub335, 0
  br i1 %cmp336, label %cond.true.338, label %cond.false.360

cond.true.338:                                    ; preds = %cond.false.329
  %127 = load i64, i64* %alterslen, align 8
  %add339 = add nsw i64 %127, 2
  %conv340 = trunc i64 %add339 to i8
  %conv341 = sext i8 %conv340 to i32
  %add342 = add nsw i32 0, %conv341
  %mul343 = mul nsw i32 0, %add342
  %add344 = add nsw i32 %mul343, 0
  %neg345 = xor i32 %add344, -1
  %cmp346 = icmp eq i32 %neg345, -1
  %conv347 = zext i1 %cmp346 to i32
  %sub348 = sub nsw i32 0, %conv347
  %128 = load i64, i64* %alterslen, align 8
  %add349 = add nsw i64 %128, 2
  %conv350 = trunc i64 %add349 to i8
  %conv351 = sext i8 %conv350 to i32
  %add352 = add nsw i32 0, %conv351
  %mul353 = mul nsw i32 0, %add352
  %add354 = add nsw i32 %mul353, 1
  %shl355 = shl i32 %add354, 30
  %sub356 = sub nsw i32 %shl355, 1
  %mul357 = mul nsw i32 %sub356, 2
  %add358 = add nsw i32 %mul357, 1
  %sub359 = sub nsw i32 %sub348, %add358
  br label %cond.end.367

cond.false.360:                                   ; preds = %cond.false.329
  %129 = load i64, i64* %alterslen, align 8
  %add361 = add nsw i64 %129, 2
  %conv362 = trunc i64 %add361 to i8
  %conv363 = sext i8 %conv362 to i32
  %add364 = add nsw i32 0, %conv363
  %mul365 = mul nsw i32 0, %add364
  %add366 = add nsw i32 %mul365, 0
  br label %cond.end.367

cond.end.367:                                     ; preds = %cond.false.360, %cond.true.338
  %cond368 = phi i32 [ %sub359, %cond.true.338 ], [ %add366, %cond.false.360 ]
  %div369 = sdiv i32 %cond368, 8
  %130 = load i64, i64* %alterslen, align 8
  %add370 = add nsw i64 %130, 2
  %conv371 = trunc i64 %add370 to i8
  %conv372 = sext i8 %conv371 to i32
  %cmp373 = icmp slt i32 %div369, %conv372
  br i1 %cmp373, label %cond.true.487, label %lor.lhs.false.464

cond.false.375:                                   ; preds = %lor.lhs.false.285
  br i1 false, label %cond.true.376, label %cond.false.377

cond.true.376:                                    ; preds = %cond.false.375
  br i1 false, label %cond.true.487, label %lor.lhs.false.464

cond.false.377:                                   ; preds = %cond.false.375
  %131 = load i64, i64* %alterslen, align 8
  %add378 = add nsw i64 %131, 2
  %conv379 = trunc i64 %add378 to i8
  %conv380 = sext i8 %conv379 to i32
  %cmp381 = icmp slt i32 %conv380, 0
  br i1 %cmp381, label %cond.true.383, label %cond.false.429

cond.true.383:                                    ; preds = %cond.false.377
  %132 = load i64, i64* %alterslen, align 8
  %add384 = add nsw i64 %132, 2
  %conv385 = trunc i64 %add384 to i8
  %conv386 = sext i8 %conv385 to i32
  %133 = load i64, i64* %alterslen, align 8
  %add387 = add nsw i64 %133, 2
  %conv388 = trunc i64 %add387 to i8
  %conv389 = sext i8 %conv388 to i32
  %add390 = add nsw i32 0, %conv389
  %mul391 = mul nsw i32 0, %add390
  %sub392 = sub nsw i32 %mul391, 1
  %cmp393 = icmp slt i32 %sub392, 0
  br i1 %cmp393, label %cond.true.395, label %cond.false.417

cond.true.395:                                    ; preds = %cond.true.383
  %134 = load i64, i64* %alterslen, align 8
  %add396 = add nsw i64 %134, 2
  %conv397 = trunc i64 %add396 to i8
  %conv398 = sext i8 %conv397 to i32
  %add399 = add nsw i32 0, %conv398
  %mul400 = mul nsw i32 0, %add399
  %add401 = add nsw i32 %mul400, 0
  %neg402 = xor i32 %add401, -1
  %cmp403 = icmp eq i32 %neg402, -1
  %conv404 = zext i1 %cmp403 to i32
  %sub405 = sub nsw i32 0, %conv404
  %135 = load i64, i64* %alterslen, align 8
  %add406 = add nsw i64 %135, 2
  %conv407 = trunc i64 %add406 to i8
  %conv408 = sext i8 %conv407 to i32
  %add409 = add nsw i32 0, %conv408
  %mul410 = mul nsw i32 0, %add409
  %add411 = add nsw i32 %mul410, 1
  %shl412 = shl i32 %add411, 30
  %sub413 = sub nsw i32 %shl412, 1
  %mul414 = mul nsw i32 %sub413, 2
  %add415 = add nsw i32 %mul414, 1
  %sub416 = sub nsw i32 %sub405, %add415
  br label %cond.end.424

cond.false.417:                                   ; preds = %cond.true.383
  %136 = load i64, i64* %alterslen, align 8
  %add418 = add nsw i64 %136, 2
  %conv419 = trunc i64 %add418 to i8
  %conv420 = sext i8 %conv419 to i32
  %add421 = add nsw i32 0, %conv420
  %mul422 = mul nsw i32 0, %add421
  %add423 = add nsw i32 %mul422, 0
  br label %cond.end.424

cond.end.424:                                     ; preds = %cond.false.417, %cond.true.395
  %cond425 = phi i32 [ %sub416, %cond.true.395 ], [ %add423, %cond.false.417 ]
  %div426 = sdiv i32 %cond425, 8
  %cmp427 = icmp slt i32 %conv386, %div426
  br i1 %cmp427, label %cond.true.487, label %lor.lhs.false.464

cond.false.429:                                   ; preds = %cond.false.377
  %137 = load i64, i64* %alterslen, align 8
  %add430 = add nsw i64 %137, 2
  %conv431 = trunc i64 %add430 to i8
  %conv432 = sext i8 %conv431 to i32
  %add433 = add nsw i32 0, %conv432
  %mul434 = mul nsw i32 0, %add433
  %sub435 = sub nsw i32 %mul434, 1
  %cmp436 = icmp slt i32 %sub435, 0
  br i1 %cmp436, label %cond.true.438, label %cond.false.449

cond.true.438:                                    ; preds = %cond.false.429
  %138 = load i64, i64* %alterslen, align 8
  %add439 = add nsw i64 %138, 2
  %conv440 = trunc i64 %add439 to i8
  %conv441 = sext i8 %conv440 to i32
  %add442 = add nsw i32 0, %conv441
  %mul443 = mul nsw i32 0, %add442
  %add444 = add nsw i32 %mul443, 1
  %shl445 = shl i32 %add444, 30
  %sub446 = sub nsw i32 %shl445, 1
  %mul447 = mul nsw i32 %sub446, 2
  %add448 = add nsw i32 %mul447, 1
  br label %cond.end.456

cond.false.449:                                   ; preds = %cond.false.429
  %139 = load i64, i64* %alterslen, align 8
  %add450 = add nsw i64 %139, 2
  %conv451 = trunc i64 %add450 to i8
  %conv452 = sext i8 %conv451 to i32
  %add453 = add nsw i32 0, %conv452
  %mul454 = mul nsw i32 0, %add453
  %sub455 = sub nsw i32 %mul454, 1
  br label %cond.end.456

cond.end.456:                                     ; preds = %cond.false.449, %cond.true.438
  %cond457 = phi i32 [ %add448, %cond.true.438 ], [ %sub455, %cond.false.449 ]
  %div458 = sdiv i32 %cond457, 8
  %140 = load i64, i64* %alterslen, align 8
  %add459 = add nsw i64 %140, 2
  %conv460 = trunc i64 %add459 to i8
  %conv461 = sext i8 %conv460 to i32
  %cmp462 = icmp slt i32 %div458, %conv461
  br i1 %cmp462, label %cond.true.487, label %lor.lhs.false.464

lor.lhs.false.464:                                ; preds = %cond.end.456, %cond.end.424, %cond.true.376, %cond.end.367, %cond.true.328, %cond.end.322
  %141 = load i64, i64* %alterslen, align 8
  %add465 = add nsw i64 %141, 2
  %conv466 = trunc i64 %add465 to i8
  %conv467 = sext i8 %conv466 to i32
  %mul468 = mul nsw i32 %conv467, 8
  %mul469 = mul nsw i32 0, %mul468
  %sub470 = sub nsw i32 %mul469, 1
  %cmp471 = icmp slt i32 %sub470, 0
  br i1 %cmp471, label %land.lhs.true.473, label %lor.lhs.false.480

land.lhs.true.473:                                ; preds = %lor.lhs.false.464
  %142 = load i64, i64* %alterslen, align 8
  %add474 = add nsw i64 %142, 2
  %conv475 = trunc i64 %add474 to i8
  %conv476 = sext i8 %conv475 to i32
  %mul477 = mul nsw i32 %conv476, 8
  %cmp478 = icmp slt i32 %mul477, -128
  br i1 %cmp478, label %cond.true.487, label %lor.lhs.false.480

lor.lhs.false.480:                                ; preds = %land.lhs.true.473, %lor.lhs.false.464
  %143 = load i64, i64* %alterslen, align 8
  %add481 = add nsw i64 %143, 2
  %conv482 = trunc i64 %add481 to i8
  %conv483 = sext i8 %conv482 to i32
  %mul484 = mul nsw i32 %conv483, 8
  %cmp485 = icmp slt i32 127, %mul484
  br i1 %cmp485, label %cond.true.487, label %cond.false.513

cond.true.487:                                    ; preds = %lor.lhs.false.480, %land.lhs.true.473, %cond.end.456, %cond.end.424, %cond.true.376, %cond.end.367, %cond.true.328, %cond.end.322, %land.lhs.true.279
  %144 = load i64, i64* %alterslen, align 8
  %add488 = add nsw i64 %144, 2
  %conv489 = trunc i64 %add488 to i8
  %conv490 = zext i8 %conv489 to i32
  %mul491 = mul nsw i32 %conv490, 8
  %cmp492 = icmp sle i32 %mul491, 127
  br i1 %cmp492, label %cond.true.494, label %cond.false.501

cond.true.494:                                    ; preds = %cond.true.487
  %145 = load i64, i64* %alterslen, align 8
  %add495 = add nsw i64 %145, 2
  %conv496 = trunc i64 %add495 to i8
  %conv497 = zext i8 %conv496 to i32
  %mul498 = mul nsw i32 %conv497, 8
  %conv499 = trunc i32 %mul498 to i8
  %conv500 = sext i8 %conv499 to i32
  br label %cond.end.510

cond.false.501:                                   ; preds = %cond.true.487
  %146 = load i64, i64* %alterslen, align 8
  %add502 = add nsw i64 %146, 2
  %conv503 = trunc i64 %add502 to i8
  %conv504 = zext i8 %conv503 to i32
  %mul505 = mul nsw i32 %conv504, 8
  %sub506 = sub nsw i32 %mul505, -128
  %conv507 = trunc i32 %sub506 to i8
  %conv508 = sext i8 %conv507 to i32
  %add509 = add nsw i32 %conv508, -128
  br label %cond.end.510

cond.end.510:                                     ; preds = %cond.false.501, %cond.true.494
  %cond511 = phi i32 [ %conv500, %cond.true.494 ], [ %add509, %cond.false.501 ]
  %conv512 = sext i32 %cond511 to i64
  store i64 %conv512, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.513:                                   ; preds = %lor.lhs.false.480
  %147 = load i64, i64* %alterslen, align 8
  %add514 = add nsw i64 %147, 2
  %conv515 = trunc i64 %add514 to i8
  %conv516 = zext i8 %conv515 to i32
  %mul517 = mul nsw i32 %conv516, 8
  %cmp518 = icmp sle i32 %mul517, 127
  br i1 %cmp518, label %cond.true.520, label %cond.false.527

cond.true.520:                                    ; preds = %cond.false.513
  %148 = load i64, i64* %alterslen, align 8
  %add521 = add nsw i64 %148, 2
  %conv522 = trunc i64 %add521 to i8
  %conv523 = zext i8 %conv522 to i32
  %mul524 = mul nsw i32 %conv523, 8
  %conv525 = trunc i32 %mul524 to i8
  %conv526 = sext i8 %conv525 to i32
  br label %cond.end.536

cond.false.527:                                   ; preds = %cond.false.513
  %149 = load i64, i64* %alterslen, align 8
  %add528 = add nsw i64 %149, 2
  %conv529 = trunc i64 %add528 to i8
  %conv530 = zext i8 %conv529 to i32
  %mul531 = mul nsw i32 %conv530, 8
  %sub532 = sub nsw i32 %mul531, -128
  %conv533 = trunc i32 %sub532 to i8
  %conv534 = sext i8 %conv533 to i32
  %add535 = add nsw i32 %conv534, -128
  br label %cond.end.536

cond.end.536:                                     ; preds = %cond.false.527, %cond.true.520
  %cond537 = phi i32 [ %conv526, %cond.true.520 ], [ %add535, %cond.false.527 ]
  %conv538 = sext i32 %cond537 to i64
  store i64 %conv538, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.539:                                   ; preds = %cond.true.238
  %150 = load i64, i64* %alterslen, align 8
  %add540 = add nsw i64 %150, 2
  %add541 = add nsw i64 0, %add540
  %mul542 = mul nsw i64 0, %add541
  %sub543 = sub nsw i64 %mul542, 1
  %cmp544 = icmp slt i64 %sub543, 0
  br i1 %cmp544, label %cond.true.546, label %cond.false.565

cond.true.546:                                    ; preds = %cond.false.539
  %151 = load i64, i64* %alterslen, align 8
  %add547 = add nsw i64 %151, 2
  %add548 = add nsw i64 0, %add547
  %mul549 = mul nsw i64 0, %add548
  %add550 = add nsw i64 %mul549, 0
  %neg551 = xor i64 %add550, -1
  %cmp552 = icmp eq i64 %neg551, -1
  %conv553 = zext i1 %cmp552 to i32
  %sub554 = sub nsw i32 0, %conv553
  %conv555 = sext i32 %sub554 to i64
  %152 = load i64, i64* %alterslen, align 8
  %add556 = add nsw i64 %152, 2
  %add557 = add nsw i64 0, %add556
  %mul558 = mul nsw i64 0, %add557
  %add559 = add nsw i64 %mul558, 1
  %shl560 = shl i64 %add559, 62
  %sub561 = sub nsw i64 %shl560, 1
  %mul562 = mul nsw i64 %sub561, 2
  %add563 = add nsw i64 %mul562, 1
  %sub564 = sub nsw i64 %conv555, %add563
  br label %cond.end.570

cond.false.565:                                   ; preds = %cond.false.539
  %153 = load i64, i64* %alterslen, align 8
  %add566 = add nsw i64 %153, 2
  %add567 = add nsw i64 0, %add566
  %mul568 = mul nsw i64 0, %add567
  %add569 = add nsw i64 %mul568, 0
  br label %cond.end.570

cond.end.570:                                     ; preds = %cond.false.565, %cond.true.546
  %cond571 = phi i64 [ %sub564, %cond.true.546 ], [ %add569, %cond.false.565 ]
  %cmp572 = icmp eq i64 %cond571, 0
  br i1 %cmp572, label %land.lhs.true.574, label %lor.lhs.false.578

land.lhs.true.574:                                ; preds = %cond.end.570
  %154 = load i64, i64* %alterslen, align 8
  %add575 = add nsw i64 %154, 2
  %cmp576 = icmp slt i64 %add575, 0
  br i1 %cmp576, label %cond.true.736, label %lor.lhs.false.578

lor.lhs.false.578:                                ; preds = %land.lhs.true.574, %cond.end.570
  br i1 false, label %cond.true.579, label %cond.false.649

cond.true.579:                                    ; preds = %lor.lhs.false.578
  %155 = load i64, i64* %alterslen, align 8
  %add580 = add nsw i64 %155, 2
  %cmp581 = icmp slt i64 %add580, 0
  br i1 %cmp581, label %cond.true.583, label %cond.false.610

cond.true.583:                                    ; preds = %cond.true.579
  %156 = load i64, i64* %alterslen, align 8
  %add584 = add nsw i64 %156, 2
  %157 = load i64, i64* %alterslen, align 8
  %add585 = add nsw i64 %157, 2
  %add586 = add nsw i64 0, %add585
  %mul587 = mul nsw i64 0, %add586
  %sub588 = sub nsw i64 %mul587, 1
  %cmp589 = icmp slt i64 %sub588, 0
  br i1 %cmp589, label %cond.true.591, label %cond.false.600

cond.true.591:                                    ; preds = %cond.true.583
  %158 = load i64, i64* %alterslen, align 8
  %add592 = add nsw i64 %158, 2
  %add593 = add nsw i64 0, %add592
  %mul594 = mul nsw i64 0, %add593
  %add595 = add nsw i64 %mul594, 1
  %shl596 = shl i64 %add595, 62
  %sub597 = sub nsw i64 %shl596, 1
  %mul598 = mul nsw i64 %sub597, 2
  %add599 = add nsw i64 %mul598, 1
  br label %cond.end.605

cond.false.600:                                   ; preds = %cond.true.583
  %159 = load i64, i64* %alterslen, align 8
  %add601 = add nsw i64 %159, 2
  %add602 = add nsw i64 0, %add601
  %mul603 = mul nsw i64 0, %add602
  %sub604 = sub nsw i64 %mul603, 1
  br label %cond.end.605

cond.end.605:                                     ; preds = %cond.false.600, %cond.true.591
  %cond606 = phi i64 [ %add599, %cond.true.591 ], [ %sub604, %cond.false.600 ]
  %div607 = sdiv i64 %cond606, 8
  %cmp608 = icmp slt i64 %add584, %div607
  br i1 %cmp608, label %cond.true.736, label %lor.lhs.false.719

cond.false.610:                                   ; preds = %cond.true.579
  br i1 false, label %cond.true.611, label %cond.false.612

cond.true.611:                                    ; preds = %cond.false.610
  br i1 false, label %cond.true.736, label %lor.lhs.false.719

cond.false.612:                                   ; preds = %cond.false.610
  %160 = load i64, i64* %alterslen, align 8
  %add613 = add nsw i64 %160, 2
  %add614 = add nsw i64 0, %add613
  %mul615 = mul nsw i64 0, %add614
  %sub616 = sub nsw i64 %mul615, 1
  %cmp617 = icmp slt i64 %sub616, 0
  br i1 %cmp617, label %cond.true.619, label %cond.false.638

cond.true.619:                                    ; preds = %cond.false.612
  %161 = load i64, i64* %alterslen, align 8
  %add620 = add nsw i64 %161, 2
  %add621 = add nsw i64 0, %add620
  %mul622 = mul nsw i64 0, %add621
  %add623 = add nsw i64 %mul622, 0
  %neg624 = xor i64 %add623, -1
  %cmp625 = icmp eq i64 %neg624, -1
  %conv626 = zext i1 %cmp625 to i32
  %sub627 = sub nsw i32 0, %conv626
  %conv628 = sext i32 %sub627 to i64
  %162 = load i64, i64* %alterslen, align 8
  %add629 = add nsw i64 %162, 2
  %add630 = add nsw i64 0, %add629
  %mul631 = mul nsw i64 0, %add630
  %add632 = add nsw i64 %mul631, 1
  %shl633 = shl i64 %add632, 62
  %sub634 = sub nsw i64 %shl633, 1
  %mul635 = mul nsw i64 %sub634, 2
  %add636 = add nsw i64 %mul635, 1
  %sub637 = sub nsw i64 %conv628, %add636
  br label %cond.end.643

cond.false.638:                                   ; preds = %cond.false.612
  %163 = load i64, i64* %alterslen, align 8
  %add639 = add nsw i64 %163, 2
  %add640 = add nsw i64 0, %add639
  %mul641 = mul nsw i64 0, %add640
  %add642 = add nsw i64 %mul641, 0
  br label %cond.end.643

cond.end.643:                                     ; preds = %cond.false.638, %cond.true.619
  %cond644 = phi i64 [ %sub637, %cond.true.619 ], [ %add642, %cond.false.638 ]
  %div645 = sdiv i64 %cond644, 8
  %164 = load i64, i64* %alterslen, align 8
  %add646 = add nsw i64 %164, 2
  %cmp647 = icmp slt i64 %div645, %add646
  br i1 %cmp647, label %cond.true.736, label %lor.lhs.false.719

cond.false.649:                                   ; preds = %lor.lhs.false.578
  br i1 false, label %cond.true.650, label %cond.false.651

cond.true.650:                                    ; preds = %cond.false.649
  br i1 false, label %cond.true.736, label %lor.lhs.false.719

cond.false.651:                                   ; preds = %cond.false.649
  %165 = load i64, i64* %alterslen, align 8
  %add652 = add nsw i64 %165, 2
  %cmp653 = icmp slt i64 %add652, 0
  br i1 %cmp653, label %cond.true.655, label %cond.false.692

cond.true.655:                                    ; preds = %cond.false.651
  %166 = load i64, i64* %alterslen, align 8
  %add656 = add nsw i64 %166, 2
  %167 = load i64, i64* %alterslen, align 8
  %add657 = add nsw i64 %167, 2
  %add658 = add nsw i64 0, %add657
  %mul659 = mul nsw i64 0, %add658
  %sub660 = sub nsw i64 %mul659, 1
  %cmp661 = icmp slt i64 %sub660, 0
  br i1 %cmp661, label %cond.true.663, label %cond.false.682

cond.true.663:                                    ; preds = %cond.true.655
  %168 = load i64, i64* %alterslen, align 8
  %add664 = add nsw i64 %168, 2
  %add665 = add nsw i64 0, %add664
  %mul666 = mul nsw i64 0, %add665
  %add667 = add nsw i64 %mul666, 0
  %neg668 = xor i64 %add667, -1
  %cmp669 = icmp eq i64 %neg668, -1
  %conv670 = zext i1 %cmp669 to i32
  %sub671 = sub nsw i32 0, %conv670
  %conv672 = sext i32 %sub671 to i64
  %169 = load i64, i64* %alterslen, align 8
  %add673 = add nsw i64 %169, 2
  %add674 = add nsw i64 0, %add673
  %mul675 = mul nsw i64 0, %add674
  %add676 = add nsw i64 %mul675, 1
  %shl677 = shl i64 %add676, 62
  %sub678 = sub nsw i64 %shl677, 1
  %mul679 = mul nsw i64 %sub678, 2
  %add680 = add nsw i64 %mul679, 1
  %sub681 = sub nsw i64 %conv672, %add680
  br label %cond.end.687

cond.false.682:                                   ; preds = %cond.true.655
  %170 = load i64, i64* %alterslen, align 8
  %add683 = add nsw i64 %170, 2
  %add684 = add nsw i64 0, %add683
  %mul685 = mul nsw i64 0, %add684
  %add686 = add nsw i64 %mul685, 0
  br label %cond.end.687

cond.end.687:                                     ; preds = %cond.false.682, %cond.true.663
  %cond688 = phi i64 [ %sub681, %cond.true.663 ], [ %add686, %cond.false.682 ]
  %div689 = sdiv i64 %cond688, 8
  %cmp690 = icmp slt i64 %add656, %div689
  br i1 %cmp690, label %cond.true.736, label %lor.lhs.false.719

cond.false.692:                                   ; preds = %cond.false.651
  %171 = load i64, i64* %alterslen, align 8
  %add693 = add nsw i64 %171, 2
  %add694 = add nsw i64 0, %add693
  %mul695 = mul nsw i64 0, %add694
  %sub696 = sub nsw i64 %mul695, 1
  %cmp697 = icmp slt i64 %sub696, 0
  br i1 %cmp697, label %cond.true.699, label %cond.false.708

cond.true.699:                                    ; preds = %cond.false.692
  %172 = load i64, i64* %alterslen, align 8
  %add700 = add nsw i64 %172, 2
  %add701 = add nsw i64 0, %add700
  %mul702 = mul nsw i64 0, %add701
  %add703 = add nsw i64 %mul702, 1
  %shl704 = shl i64 %add703, 62
  %sub705 = sub nsw i64 %shl704, 1
  %mul706 = mul nsw i64 %sub705, 2
  %add707 = add nsw i64 %mul706, 1
  br label %cond.end.713

cond.false.708:                                   ; preds = %cond.false.692
  %173 = load i64, i64* %alterslen, align 8
  %add709 = add nsw i64 %173, 2
  %add710 = add nsw i64 0, %add709
  %mul711 = mul nsw i64 0, %add710
  %sub712 = sub nsw i64 %mul711, 1
  br label %cond.end.713

cond.end.713:                                     ; preds = %cond.false.708, %cond.true.699
  %cond714 = phi i64 [ %add707, %cond.true.699 ], [ %sub712, %cond.false.708 ]
  %div715 = sdiv i64 %cond714, 8
  %174 = load i64, i64* %alterslen, align 8
  %add716 = add nsw i64 %174, 2
  %cmp717 = icmp slt i64 %div715, %add716
  br i1 %cmp717, label %cond.true.736, label %lor.lhs.false.719

lor.lhs.false.719:                                ; preds = %cond.end.713, %cond.end.687, %cond.true.650, %cond.end.643, %cond.true.611, %cond.end.605
  %175 = load i64, i64* %alterslen, align 8
  %add720 = add nsw i64 %175, 2
  %mul721 = mul nsw i64 %add720, 8
  %mul722 = mul nsw i64 0, %mul721
  %sub723 = sub nsw i64 %mul722, 1
  %cmp724 = icmp slt i64 %sub723, 0
  br i1 %cmp724, label %land.lhs.true.726, label %lor.lhs.false.731

land.lhs.true.726:                                ; preds = %lor.lhs.false.719
  %176 = load i64, i64* %alterslen, align 8
  %add727 = add nsw i64 %176, 2
  %mul728 = mul nsw i64 %add727, 8
  %cmp729 = icmp slt i64 %mul728, -128
  br i1 %cmp729, label %cond.true.736, label %lor.lhs.false.731

lor.lhs.false.731:                                ; preds = %land.lhs.true.726, %lor.lhs.false.719
  %177 = load i64, i64* %alterslen, align 8
  %add732 = add nsw i64 %177, 2
  %mul733 = mul nsw i64 %add732, 8
  %cmp734 = icmp slt i64 127, %mul733
  br i1 %cmp734, label %cond.true.736, label %cond.false.762

cond.true.736:                                    ; preds = %lor.lhs.false.731, %land.lhs.true.726, %cond.end.713, %cond.end.687, %cond.true.650, %cond.end.643, %cond.true.611, %cond.end.605, %land.lhs.true.574
  %178 = load i64, i64* %alterslen, align 8
  %add737 = add nsw i64 %178, 2
  %conv738 = trunc i64 %add737 to i8
  %conv739 = zext i8 %conv738 to i32
  %mul740 = mul nsw i32 %conv739, 8
  %cmp741 = icmp sle i32 %mul740, 127
  br i1 %cmp741, label %cond.true.743, label %cond.false.750

cond.true.743:                                    ; preds = %cond.true.736
  %179 = load i64, i64* %alterslen, align 8
  %add744 = add nsw i64 %179, 2
  %conv745 = trunc i64 %add744 to i8
  %conv746 = zext i8 %conv745 to i32
  %mul747 = mul nsw i32 %conv746, 8
  %conv748 = trunc i32 %mul747 to i8
  %conv749 = sext i8 %conv748 to i32
  br label %cond.end.759

cond.false.750:                                   ; preds = %cond.true.736
  %180 = load i64, i64* %alterslen, align 8
  %add751 = add nsw i64 %180, 2
  %conv752 = trunc i64 %add751 to i8
  %conv753 = zext i8 %conv752 to i32
  %mul754 = mul nsw i32 %conv753, 8
  %sub755 = sub nsw i32 %mul754, -128
  %conv756 = trunc i32 %sub755 to i8
  %conv757 = sext i8 %conv756 to i32
  %add758 = add nsw i32 %conv757, -128
  br label %cond.end.759

cond.end.759:                                     ; preds = %cond.false.750, %cond.true.743
  %cond760 = phi i32 [ %conv749, %cond.true.743 ], [ %add758, %cond.false.750 ]
  %conv761 = sext i32 %cond760 to i64
  store i64 %conv761, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.762:                                   ; preds = %lor.lhs.false.731
  %181 = load i64, i64* %alterslen, align 8
  %add763 = add nsw i64 %181, 2
  %conv764 = trunc i64 %add763 to i8
  %conv765 = zext i8 %conv764 to i32
  %mul766 = mul nsw i32 %conv765, 8
  %cmp767 = icmp sle i32 %mul766, 127
  br i1 %cmp767, label %cond.true.769, label %cond.false.776

cond.true.769:                                    ; preds = %cond.false.762
  %182 = load i64, i64* %alterslen, align 8
  %add770 = add nsw i64 %182, 2
  %conv771 = trunc i64 %add770 to i8
  %conv772 = zext i8 %conv771 to i32
  %mul773 = mul nsw i32 %conv772, 8
  %conv774 = trunc i32 %mul773 to i8
  %conv775 = sext i8 %conv774 to i32
  br label %cond.end.785

cond.false.776:                                   ; preds = %cond.false.762
  %183 = load i64, i64* %alterslen, align 8
  %add777 = add nsw i64 %183, 2
  %conv778 = trunc i64 %add777 to i8
  %conv779 = zext i8 %conv778 to i32
  %mul780 = mul nsw i32 %conv779, 8
  %sub781 = sub nsw i32 %mul780, -128
  %conv782 = trunc i32 %sub781 to i8
  %conv783 = sext i8 %conv782 to i32
  %add784 = add nsw i32 %conv783, -128
  br label %cond.end.785

cond.end.785:                                     ; preds = %cond.false.776, %cond.true.769
  %cond786 = phi i32 [ %conv775, %cond.true.769 ], [ %add784, %cond.false.776 ]
  %conv787 = sext i32 %cond786 to i64
  store i64 %conv787, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.788:                                   ; preds = %do.body
  br i1 false, label %cond.true.789, label %cond.false.1341

cond.true.789:                                    ; preds = %cond.false.788
  br i1 false, label %cond.true.790, label %cond.false.1092

cond.true.790:                                    ; preds = %cond.true.789
  %184 = load i64, i64* %alterslen, align 8
  %add791 = add nsw i64 %184, 2
  %conv792 = trunc i64 %add791 to i16
  %conv793 = sext i16 %conv792 to i32
  %add794 = add nsw i32 0, %conv793
  %mul795 = mul nsw i32 0, %add794
  %sub796 = sub nsw i32 %mul795, 1
  %cmp797 = icmp slt i32 %sub796, 0
  br i1 %cmp797, label %cond.true.799, label %cond.false.821

cond.true.799:                                    ; preds = %cond.true.790
  %185 = load i64, i64* %alterslen, align 8
  %add800 = add nsw i64 %185, 2
  %conv801 = trunc i64 %add800 to i16
  %conv802 = sext i16 %conv801 to i32
  %add803 = add nsw i32 0, %conv802
  %mul804 = mul nsw i32 0, %add803
  %add805 = add nsw i32 %mul804, 0
  %neg806 = xor i32 %add805, -1
  %cmp807 = icmp eq i32 %neg806, -1
  %conv808 = zext i1 %cmp807 to i32
  %sub809 = sub nsw i32 0, %conv808
  %186 = load i64, i64* %alterslen, align 8
  %add810 = add nsw i64 %186, 2
  %conv811 = trunc i64 %add810 to i16
  %conv812 = sext i16 %conv811 to i32
  %add813 = add nsw i32 0, %conv812
  %mul814 = mul nsw i32 0, %add813
  %add815 = add nsw i32 %mul814, 1
  %shl816 = shl i32 %add815, 30
  %sub817 = sub nsw i32 %shl816, 1
  %mul818 = mul nsw i32 %sub817, 2
  %add819 = add nsw i32 %mul818, 1
  %sub820 = sub nsw i32 %sub809, %add819
  br label %cond.end.828

cond.false.821:                                   ; preds = %cond.true.790
  %187 = load i64, i64* %alterslen, align 8
  %add822 = add nsw i64 %187, 2
  %conv823 = trunc i64 %add822 to i16
  %conv824 = sext i16 %conv823 to i32
  %add825 = add nsw i32 0, %conv824
  %mul826 = mul nsw i32 0, %add825
  %add827 = add nsw i32 %mul826, 0
  br label %cond.end.828

cond.end.828:                                     ; preds = %cond.false.821, %cond.true.799
  %cond829 = phi i32 [ %sub820, %cond.true.799 ], [ %add827, %cond.false.821 ]
  %cmp830 = icmp eq i32 %cond829, 0
  br i1 %cmp830, label %land.lhs.true.832, label %lor.lhs.false.838

land.lhs.true.832:                                ; preds = %cond.end.828
  %188 = load i64, i64* %alterslen, align 8
  %add833 = add nsw i64 %188, 2
  %conv834 = trunc i64 %add833 to i16
  %conv835 = sext i16 %conv834 to i32
  %cmp836 = icmp slt i32 %conv835, 0
  br i1 %cmp836, label %cond.true.1040, label %lor.lhs.false.838

lor.lhs.false.838:                                ; preds = %land.lhs.true.832, %cond.end.828
  br i1 false, label %cond.true.839, label %cond.false.928

cond.true.839:                                    ; preds = %lor.lhs.false.838
  %189 = load i64, i64* %alterslen, align 8
  %add840 = add nsw i64 %189, 2
  %conv841 = trunc i64 %add840 to i16
  %conv842 = sext i16 %conv841 to i32
  %cmp843 = icmp slt i32 %conv842, 0
  br i1 %cmp843, label %cond.true.845, label %cond.false.880

cond.true.845:                                    ; preds = %cond.true.839
  %190 = load i64, i64* %alterslen, align 8
  %add846 = add nsw i64 %190, 2
  %conv847 = trunc i64 %add846 to i16
  %conv848 = sext i16 %conv847 to i32
  %191 = load i64, i64* %alterslen, align 8
  %add849 = add nsw i64 %191, 2
  %conv850 = trunc i64 %add849 to i16
  %conv851 = sext i16 %conv850 to i32
  %add852 = add nsw i32 0, %conv851
  %mul853 = mul nsw i32 0, %add852
  %sub854 = sub nsw i32 %mul853, 1
  %cmp855 = icmp slt i32 %sub854, 0
  br i1 %cmp855, label %cond.true.857, label %cond.false.868

cond.true.857:                                    ; preds = %cond.true.845
  %192 = load i64, i64* %alterslen, align 8
  %add858 = add nsw i64 %192, 2
  %conv859 = trunc i64 %add858 to i16
  %conv860 = sext i16 %conv859 to i32
  %add861 = add nsw i32 0, %conv860
  %mul862 = mul nsw i32 0, %add861
  %add863 = add nsw i32 %mul862, 1
  %shl864 = shl i32 %add863, 30
  %sub865 = sub nsw i32 %shl864, 1
  %mul866 = mul nsw i32 %sub865, 2
  %add867 = add nsw i32 %mul866, 1
  br label %cond.end.875

cond.false.868:                                   ; preds = %cond.true.845
  %193 = load i64, i64* %alterslen, align 8
  %add869 = add nsw i64 %193, 2
  %conv870 = trunc i64 %add869 to i16
  %conv871 = sext i16 %conv870 to i32
  %add872 = add nsw i32 0, %conv871
  %mul873 = mul nsw i32 0, %add872
  %sub874 = sub nsw i32 %mul873, 1
  br label %cond.end.875

cond.end.875:                                     ; preds = %cond.false.868, %cond.true.857
  %cond876 = phi i32 [ %add867, %cond.true.857 ], [ %sub874, %cond.false.868 ]
  %div877 = sdiv i32 %cond876, 8
  %cmp878 = icmp slt i32 %conv848, %div877
  br i1 %cmp878, label %cond.true.1040, label %lor.lhs.false.1017

cond.false.880:                                   ; preds = %cond.true.839
  br i1 false, label %cond.true.881, label %cond.false.882

cond.true.881:                                    ; preds = %cond.false.880
  br i1 false, label %cond.true.1040, label %lor.lhs.false.1017

cond.false.882:                                   ; preds = %cond.false.880
  %194 = load i64, i64* %alterslen, align 8
  %add883 = add nsw i64 %194, 2
  %conv884 = trunc i64 %add883 to i16
  %conv885 = sext i16 %conv884 to i32
  %add886 = add nsw i32 0, %conv885
  %mul887 = mul nsw i32 0, %add886
  %sub888 = sub nsw i32 %mul887, 1
  %cmp889 = icmp slt i32 %sub888, 0
  br i1 %cmp889, label %cond.true.891, label %cond.false.913

cond.true.891:                                    ; preds = %cond.false.882
  %195 = load i64, i64* %alterslen, align 8
  %add892 = add nsw i64 %195, 2
  %conv893 = trunc i64 %add892 to i16
  %conv894 = sext i16 %conv893 to i32
  %add895 = add nsw i32 0, %conv894
  %mul896 = mul nsw i32 0, %add895
  %add897 = add nsw i32 %mul896, 0
  %neg898 = xor i32 %add897, -1
  %cmp899 = icmp eq i32 %neg898, -1
  %conv900 = zext i1 %cmp899 to i32
  %sub901 = sub nsw i32 0, %conv900
  %196 = load i64, i64* %alterslen, align 8
  %add902 = add nsw i64 %196, 2
  %conv903 = trunc i64 %add902 to i16
  %conv904 = sext i16 %conv903 to i32
  %add905 = add nsw i32 0, %conv904
  %mul906 = mul nsw i32 0, %add905
  %add907 = add nsw i32 %mul906, 1
  %shl908 = shl i32 %add907, 30
  %sub909 = sub nsw i32 %shl908, 1
  %mul910 = mul nsw i32 %sub909, 2
  %add911 = add nsw i32 %mul910, 1
  %sub912 = sub nsw i32 %sub901, %add911
  br label %cond.end.920

cond.false.913:                                   ; preds = %cond.false.882
  %197 = load i64, i64* %alterslen, align 8
  %add914 = add nsw i64 %197, 2
  %conv915 = trunc i64 %add914 to i16
  %conv916 = sext i16 %conv915 to i32
  %add917 = add nsw i32 0, %conv916
  %mul918 = mul nsw i32 0, %add917
  %add919 = add nsw i32 %mul918, 0
  br label %cond.end.920

cond.end.920:                                     ; preds = %cond.false.913, %cond.true.891
  %cond921 = phi i32 [ %sub912, %cond.true.891 ], [ %add919, %cond.false.913 ]
  %div922 = sdiv i32 %cond921, 8
  %198 = load i64, i64* %alterslen, align 8
  %add923 = add nsw i64 %198, 2
  %conv924 = trunc i64 %add923 to i16
  %conv925 = sext i16 %conv924 to i32
  %cmp926 = icmp slt i32 %div922, %conv925
  br i1 %cmp926, label %cond.true.1040, label %lor.lhs.false.1017

cond.false.928:                                   ; preds = %lor.lhs.false.838
  br i1 false, label %cond.true.929, label %cond.false.930

cond.true.929:                                    ; preds = %cond.false.928
  br i1 false, label %cond.true.1040, label %lor.lhs.false.1017

cond.false.930:                                   ; preds = %cond.false.928
  %199 = load i64, i64* %alterslen, align 8
  %add931 = add nsw i64 %199, 2
  %conv932 = trunc i64 %add931 to i16
  %conv933 = sext i16 %conv932 to i32
  %cmp934 = icmp slt i32 %conv933, 0
  br i1 %cmp934, label %cond.true.936, label %cond.false.982

cond.true.936:                                    ; preds = %cond.false.930
  %200 = load i64, i64* %alterslen, align 8
  %add937 = add nsw i64 %200, 2
  %conv938 = trunc i64 %add937 to i16
  %conv939 = sext i16 %conv938 to i32
  %201 = load i64, i64* %alterslen, align 8
  %add940 = add nsw i64 %201, 2
  %conv941 = trunc i64 %add940 to i16
  %conv942 = sext i16 %conv941 to i32
  %add943 = add nsw i32 0, %conv942
  %mul944 = mul nsw i32 0, %add943
  %sub945 = sub nsw i32 %mul944, 1
  %cmp946 = icmp slt i32 %sub945, 0
  br i1 %cmp946, label %cond.true.948, label %cond.false.970

cond.true.948:                                    ; preds = %cond.true.936
  %202 = load i64, i64* %alterslen, align 8
  %add949 = add nsw i64 %202, 2
  %conv950 = trunc i64 %add949 to i16
  %conv951 = sext i16 %conv950 to i32
  %add952 = add nsw i32 0, %conv951
  %mul953 = mul nsw i32 0, %add952
  %add954 = add nsw i32 %mul953, 0
  %neg955 = xor i32 %add954, -1
  %cmp956 = icmp eq i32 %neg955, -1
  %conv957 = zext i1 %cmp956 to i32
  %sub958 = sub nsw i32 0, %conv957
  %203 = load i64, i64* %alterslen, align 8
  %add959 = add nsw i64 %203, 2
  %conv960 = trunc i64 %add959 to i16
  %conv961 = sext i16 %conv960 to i32
  %add962 = add nsw i32 0, %conv961
  %mul963 = mul nsw i32 0, %add962
  %add964 = add nsw i32 %mul963, 1
  %shl965 = shl i32 %add964, 30
  %sub966 = sub nsw i32 %shl965, 1
  %mul967 = mul nsw i32 %sub966, 2
  %add968 = add nsw i32 %mul967, 1
  %sub969 = sub nsw i32 %sub958, %add968
  br label %cond.end.977

cond.false.970:                                   ; preds = %cond.true.936
  %204 = load i64, i64* %alterslen, align 8
  %add971 = add nsw i64 %204, 2
  %conv972 = trunc i64 %add971 to i16
  %conv973 = sext i16 %conv972 to i32
  %add974 = add nsw i32 0, %conv973
  %mul975 = mul nsw i32 0, %add974
  %add976 = add nsw i32 %mul975, 0
  br label %cond.end.977

cond.end.977:                                     ; preds = %cond.false.970, %cond.true.948
  %cond978 = phi i32 [ %sub969, %cond.true.948 ], [ %add976, %cond.false.970 ]
  %div979 = sdiv i32 %cond978, 8
  %cmp980 = icmp slt i32 %conv939, %div979
  br i1 %cmp980, label %cond.true.1040, label %lor.lhs.false.1017

cond.false.982:                                   ; preds = %cond.false.930
  %205 = load i64, i64* %alterslen, align 8
  %add983 = add nsw i64 %205, 2
  %conv984 = trunc i64 %add983 to i16
  %conv985 = sext i16 %conv984 to i32
  %add986 = add nsw i32 0, %conv985
  %mul987 = mul nsw i32 0, %add986
  %sub988 = sub nsw i32 %mul987, 1
  %cmp989 = icmp slt i32 %sub988, 0
  br i1 %cmp989, label %cond.true.991, label %cond.false.1002

cond.true.991:                                    ; preds = %cond.false.982
  %206 = load i64, i64* %alterslen, align 8
  %add992 = add nsw i64 %206, 2
  %conv993 = trunc i64 %add992 to i16
  %conv994 = sext i16 %conv993 to i32
  %add995 = add nsw i32 0, %conv994
  %mul996 = mul nsw i32 0, %add995
  %add997 = add nsw i32 %mul996, 1
  %shl998 = shl i32 %add997, 30
  %sub999 = sub nsw i32 %shl998, 1
  %mul1000 = mul nsw i32 %sub999, 2
  %add1001 = add nsw i32 %mul1000, 1
  br label %cond.end.1009

cond.false.1002:                                  ; preds = %cond.false.982
  %207 = load i64, i64* %alterslen, align 8
  %add1003 = add nsw i64 %207, 2
  %conv1004 = trunc i64 %add1003 to i16
  %conv1005 = sext i16 %conv1004 to i32
  %add1006 = add nsw i32 0, %conv1005
  %mul1007 = mul nsw i32 0, %add1006
  %sub1008 = sub nsw i32 %mul1007, 1
  br label %cond.end.1009

cond.end.1009:                                    ; preds = %cond.false.1002, %cond.true.991
  %cond1010 = phi i32 [ %add1001, %cond.true.991 ], [ %sub1008, %cond.false.1002 ]
  %div1011 = sdiv i32 %cond1010, 8
  %208 = load i64, i64* %alterslen, align 8
  %add1012 = add nsw i64 %208, 2
  %conv1013 = trunc i64 %add1012 to i16
  %conv1014 = sext i16 %conv1013 to i32
  %cmp1015 = icmp slt i32 %div1011, %conv1014
  br i1 %cmp1015, label %cond.true.1040, label %lor.lhs.false.1017

lor.lhs.false.1017:                               ; preds = %cond.end.1009, %cond.end.977, %cond.true.929, %cond.end.920, %cond.true.881, %cond.end.875
  %209 = load i64, i64* %alterslen, align 8
  %add1018 = add nsw i64 %209, 2
  %conv1019 = trunc i64 %add1018 to i16
  %conv1020 = sext i16 %conv1019 to i32
  %mul1021 = mul nsw i32 %conv1020, 8
  %mul1022 = mul nsw i32 0, %mul1021
  %sub1023 = sub nsw i32 %mul1022, 1
  %cmp1024 = icmp slt i32 %sub1023, 0
  br i1 %cmp1024, label %land.lhs.true.1026, label %lor.lhs.false.1033

land.lhs.true.1026:                               ; preds = %lor.lhs.false.1017
  %210 = load i64, i64* %alterslen, align 8
  %add1027 = add nsw i64 %210, 2
  %conv1028 = trunc i64 %add1027 to i16
  %conv1029 = sext i16 %conv1028 to i32
  %mul1030 = mul nsw i32 %conv1029, 8
  %cmp1031 = icmp slt i32 %mul1030, -32768
  br i1 %cmp1031, label %cond.true.1040, label %lor.lhs.false.1033

lor.lhs.false.1033:                               ; preds = %land.lhs.true.1026, %lor.lhs.false.1017
  %211 = load i64, i64* %alterslen, align 8
  %add1034 = add nsw i64 %211, 2
  %conv1035 = trunc i64 %add1034 to i16
  %conv1036 = sext i16 %conv1035 to i32
  %mul1037 = mul nsw i32 %conv1036, 8
  %cmp1038 = icmp slt i32 32767, %mul1037
  br i1 %cmp1038, label %cond.true.1040, label %cond.false.1066

cond.true.1040:                                   ; preds = %lor.lhs.false.1033, %land.lhs.true.1026, %cond.end.1009, %cond.end.977, %cond.true.929, %cond.end.920, %cond.true.881, %cond.end.875, %land.lhs.true.832
  %212 = load i64, i64* %alterslen, align 8
  %add1041 = add nsw i64 %212, 2
  %conv1042 = trunc i64 %add1041 to i16
  %conv1043 = zext i16 %conv1042 to i32
  %mul1044 = mul nsw i32 %conv1043, 8
  %cmp1045 = icmp sle i32 %mul1044, 32767
  br i1 %cmp1045, label %cond.true.1047, label %cond.false.1054

cond.true.1047:                                   ; preds = %cond.true.1040
  %213 = load i64, i64* %alterslen, align 8
  %add1048 = add nsw i64 %213, 2
  %conv1049 = trunc i64 %add1048 to i16
  %conv1050 = zext i16 %conv1049 to i32
  %mul1051 = mul nsw i32 %conv1050, 8
  %conv1052 = trunc i32 %mul1051 to i16
  %conv1053 = sext i16 %conv1052 to i32
  br label %cond.end.1063

cond.false.1054:                                  ; preds = %cond.true.1040
  %214 = load i64, i64* %alterslen, align 8
  %add1055 = add nsw i64 %214, 2
  %conv1056 = trunc i64 %add1055 to i16
  %conv1057 = zext i16 %conv1056 to i32
  %mul1058 = mul nsw i32 %conv1057, 8
  %sub1059 = sub nsw i32 %mul1058, -32768
  %conv1060 = trunc i32 %sub1059 to i16
  %conv1061 = sext i16 %conv1060 to i32
  %add1062 = add nsw i32 %conv1061, -32768
  br label %cond.end.1063

cond.end.1063:                                    ; preds = %cond.false.1054, %cond.true.1047
  %cond1064 = phi i32 [ %conv1053, %cond.true.1047 ], [ %add1062, %cond.false.1054 ]
  %conv1065 = sext i32 %cond1064 to i64
  store i64 %conv1065, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1066:                                  ; preds = %lor.lhs.false.1033
  %215 = load i64, i64* %alterslen, align 8
  %add1067 = add nsw i64 %215, 2
  %conv1068 = trunc i64 %add1067 to i16
  %conv1069 = zext i16 %conv1068 to i32
  %mul1070 = mul nsw i32 %conv1069, 8
  %cmp1071 = icmp sle i32 %mul1070, 32767
  br i1 %cmp1071, label %cond.true.1073, label %cond.false.1080

cond.true.1073:                                   ; preds = %cond.false.1066
  %216 = load i64, i64* %alterslen, align 8
  %add1074 = add nsw i64 %216, 2
  %conv1075 = trunc i64 %add1074 to i16
  %conv1076 = zext i16 %conv1075 to i32
  %mul1077 = mul nsw i32 %conv1076, 8
  %conv1078 = trunc i32 %mul1077 to i16
  %conv1079 = sext i16 %conv1078 to i32
  br label %cond.end.1089

cond.false.1080:                                  ; preds = %cond.false.1066
  %217 = load i64, i64* %alterslen, align 8
  %add1081 = add nsw i64 %217, 2
  %conv1082 = trunc i64 %add1081 to i16
  %conv1083 = zext i16 %conv1082 to i32
  %mul1084 = mul nsw i32 %conv1083, 8
  %sub1085 = sub nsw i32 %mul1084, -32768
  %conv1086 = trunc i32 %sub1085 to i16
  %conv1087 = sext i16 %conv1086 to i32
  %add1088 = add nsw i32 %conv1087, -32768
  br label %cond.end.1089

cond.end.1089:                                    ; preds = %cond.false.1080, %cond.true.1073
  %cond1090 = phi i32 [ %conv1079, %cond.true.1073 ], [ %add1088, %cond.false.1080 ]
  %conv1091 = sext i32 %cond1090 to i64
  store i64 %conv1091, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1092:                                  ; preds = %cond.true.789
  %218 = load i64, i64* %alterslen, align 8
  %add1093 = add nsw i64 %218, 2
  %add1094 = add nsw i64 0, %add1093
  %mul1095 = mul nsw i64 0, %add1094
  %sub1096 = sub nsw i64 %mul1095, 1
  %cmp1097 = icmp slt i64 %sub1096, 0
  br i1 %cmp1097, label %cond.true.1099, label %cond.false.1118

cond.true.1099:                                   ; preds = %cond.false.1092
  %219 = load i64, i64* %alterslen, align 8
  %add1100 = add nsw i64 %219, 2
  %add1101 = add nsw i64 0, %add1100
  %mul1102 = mul nsw i64 0, %add1101
  %add1103 = add nsw i64 %mul1102, 0
  %neg1104 = xor i64 %add1103, -1
  %cmp1105 = icmp eq i64 %neg1104, -1
  %conv1106 = zext i1 %cmp1105 to i32
  %sub1107 = sub nsw i32 0, %conv1106
  %conv1108 = sext i32 %sub1107 to i64
  %220 = load i64, i64* %alterslen, align 8
  %add1109 = add nsw i64 %220, 2
  %add1110 = add nsw i64 0, %add1109
  %mul1111 = mul nsw i64 0, %add1110
  %add1112 = add nsw i64 %mul1111, 1
  %shl1113 = shl i64 %add1112, 62
  %sub1114 = sub nsw i64 %shl1113, 1
  %mul1115 = mul nsw i64 %sub1114, 2
  %add1116 = add nsw i64 %mul1115, 1
  %sub1117 = sub nsw i64 %conv1108, %add1116
  br label %cond.end.1123

cond.false.1118:                                  ; preds = %cond.false.1092
  %221 = load i64, i64* %alterslen, align 8
  %add1119 = add nsw i64 %221, 2
  %add1120 = add nsw i64 0, %add1119
  %mul1121 = mul nsw i64 0, %add1120
  %add1122 = add nsw i64 %mul1121, 0
  br label %cond.end.1123

cond.end.1123:                                    ; preds = %cond.false.1118, %cond.true.1099
  %cond1124 = phi i64 [ %sub1117, %cond.true.1099 ], [ %add1122, %cond.false.1118 ]
  %cmp1125 = icmp eq i64 %cond1124, 0
  br i1 %cmp1125, label %land.lhs.true.1127, label %lor.lhs.false.1131

land.lhs.true.1127:                               ; preds = %cond.end.1123
  %222 = load i64, i64* %alterslen, align 8
  %add1128 = add nsw i64 %222, 2
  %cmp1129 = icmp slt i64 %add1128, 0
  br i1 %cmp1129, label %cond.true.1289, label %lor.lhs.false.1131

lor.lhs.false.1131:                               ; preds = %land.lhs.true.1127, %cond.end.1123
  br i1 false, label %cond.true.1132, label %cond.false.1202

cond.true.1132:                                   ; preds = %lor.lhs.false.1131
  %223 = load i64, i64* %alterslen, align 8
  %add1133 = add nsw i64 %223, 2
  %cmp1134 = icmp slt i64 %add1133, 0
  br i1 %cmp1134, label %cond.true.1136, label %cond.false.1163

cond.true.1136:                                   ; preds = %cond.true.1132
  %224 = load i64, i64* %alterslen, align 8
  %add1137 = add nsw i64 %224, 2
  %225 = load i64, i64* %alterslen, align 8
  %add1138 = add nsw i64 %225, 2
  %add1139 = add nsw i64 0, %add1138
  %mul1140 = mul nsw i64 0, %add1139
  %sub1141 = sub nsw i64 %mul1140, 1
  %cmp1142 = icmp slt i64 %sub1141, 0
  br i1 %cmp1142, label %cond.true.1144, label %cond.false.1153

cond.true.1144:                                   ; preds = %cond.true.1136
  %226 = load i64, i64* %alterslen, align 8
  %add1145 = add nsw i64 %226, 2
  %add1146 = add nsw i64 0, %add1145
  %mul1147 = mul nsw i64 0, %add1146
  %add1148 = add nsw i64 %mul1147, 1
  %shl1149 = shl i64 %add1148, 62
  %sub1150 = sub nsw i64 %shl1149, 1
  %mul1151 = mul nsw i64 %sub1150, 2
  %add1152 = add nsw i64 %mul1151, 1
  br label %cond.end.1158

cond.false.1153:                                  ; preds = %cond.true.1136
  %227 = load i64, i64* %alterslen, align 8
  %add1154 = add nsw i64 %227, 2
  %add1155 = add nsw i64 0, %add1154
  %mul1156 = mul nsw i64 0, %add1155
  %sub1157 = sub nsw i64 %mul1156, 1
  br label %cond.end.1158

cond.end.1158:                                    ; preds = %cond.false.1153, %cond.true.1144
  %cond1159 = phi i64 [ %add1152, %cond.true.1144 ], [ %sub1157, %cond.false.1153 ]
  %div1160 = sdiv i64 %cond1159, 8
  %cmp1161 = icmp slt i64 %add1137, %div1160
  br i1 %cmp1161, label %cond.true.1289, label %lor.lhs.false.1272

cond.false.1163:                                  ; preds = %cond.true.1132
  br i1 false, label %cond.true.1164, label %cond.false.1165

cond.true.1164:                                   ; preds = %cond.false.1163
  br i1 false, label %cond.true.1289, label %lor.lhs.false.1272

cond.false.1165:                                  ; preds = %cond.false.1163
  %228 = load i64, i64* %alterslen, align 8
  %add1166 = add nsw i64 %228, 2
  %add1167 = add nsw i64 0, %add1166
  %mul1168 = mul nsw i64 0, %add1167
  %sub1169 = sub nsw i64 %mul1168, 1
  %cmp1170 = icmp slt i64 %sub1169, 0
  br i1 %cmp1170, label %cond.true.1172, label %cond.false.1191

cond.true.1172:                                   ; preds = %cond.false.1165
  %229 = load i64, i64* %alterslen, align 8
  %add1173 = add nsw i64 %229, 2
  %add1174 = add nsw i64 0, %add1173
  %mul1175 = mul nsw i64 0, %add1174
  %add1176 = add nsw i64 %mul1175, 0
  %neg1177 = xor i64 %add1176, -1
  %cmp1178 = icmp eq i64 %neg1177, -1
  %conv1179 = zext i1 %cmp1178 to i32
  %sub1180 = sub nsw i32 0, %conv1179
  %conv1181 = sext i32 %sub1180 to i64
  %230 = load i64, i64* %alterslen, align 8
  %add1182 = add nsw i64 %230, 2
  %add1183 = add nsw i64 0, %add1182
  %mul1184 = mul nsw i64 0, %add1183
  %add1185 = add nsw i64 %mul1184, 1
  %shl1186 = shl i64 %add1185, 62
  %sub1187 = sub nsw i64 %shl1186, 1
  %mul1188 = mul nsw i64 %sub1187, 2
  %add1189 = add nsw i64 %mul1188, 1
  %sub1190 = sub nsw i64 %conv1181, %add1189
  br label %cond.end.1196

cond.false.1191:                                  ; preds = %cond.false.1165
  %231 = load i64, i64* %alterslen, align 8
  %add1192 = add nsw i64 %231, 2
  %add1193 = add nsw i64 0, %add1192
  %mul1194 = mul nsw i64 0, %add1193
  %add1195 = add nsw i64 %mul1194, 0
  br label %cond.end.1196

cond.end.1196:                                    ; preds = %cond.false.1191, %cond.true.1172
  %cond1197 = phi i64 [ %sub1190, %cond.true.1172 ], [ %add1195, %cond.false.1191 ]
  %div1198 = sdiv i64 %cond1197, 8
  %232 = load i64, i64* %alterslen, align 8
  %add1199 = add nsw i64 %232, 2
  %cmp1200 = icmp slt i64 %div1198, %add1199
  br i1 %cmp1200, label %cond.true.1289, label %lor.lhs.false.1272

cond.false.1202:                                  ; preds = %lor.lhs.false.1131
  br i1 false, label %cond.true.1203, label %cond.false.1204

cond.true.1203:                                   ; preds = %cond.false.1202
  br i1 false, label %cond.true.1289, label %lor.lhs.false.1272

cond.false.1204:                                  ; preds = %cond.false.1202
  %233 = load i64, i64* %alterslen, align 8
  %add1205 = add nsw i64 %233, 2
  %cmp1206 = icmp slt i64 %add1205, 0
  br i1 %cmp1206, label %cond.true.1208, label %cond.false.1245

cond.true.1208:                                   ; preds = %cond.false.1204
  %234 = load i64, i64* %alterslen, align 8
  %add1209 = add nsw i64 %234, 2
  %235 = load i64, i64* %alterslen, align 8
  %add1210 = add nsw i64 %235, 2
  %add1211 = add nsw i64 0, %add1210
  %mul1212 = mul nsw i64 0, %add1211
  %sub1213 = sub nsw i64 %mul1212, 1
  %cmp1214 = icmp slt i64 %sub1213, 0
  br i1 %cmp1214, label %cond.true.1216, label %cond.false.1235

cond.true.1216:                                   ; preds = %cond.true.1208
  %236 = load i64, i64* %alterslen, align 8
  %add1217 = add nsw i64 %236, 2
  %add1218 = add nsw i64 0, %add1217
  %mul1219 = mul nsw i64 0, %add1218
  %add1220 = add nsw i64 %mul1219, 0
  %neg1221 = xor i64 %add1220, -1
  %cmp1222 = icmp eq i64 %neg1221, -1
  %conv1223 = zext i1 %cmp1222 to i32
  %sub1224 = sub nsw i32 0, %conv1223
  %conv1225 = sext i32 %sub1224 to i64
  %237 = load i64, i64* %alterslen, align 8
  %add1226 = add nsw i64 %237, 2
  %add1227 = add nsw i64 0, %add1226
  %mul1228 = mul nsw i64 0, %add1227
  %add1229 = add nsw i64 %mul1228, 1
  %shl1230 = shl i64 %add1229, 62
  %sub1231 = sub nsw i64 %shl1230, 1
  %mul1232 = mul nsw i64 %sub1231, 2
  %add1233 = add nsw i64 %mul1232, 1
  %sub1234 = sub nsw i64 %conv1225, %add1233
  br label %cond.end.1240

cond.false.1235:                                  ; preds = %cond.true.1208
  %238 = load i64, i64* %alterslen, align 8
  %add1236 = add nsw i64 %238, 2
  %add1237 = add nsw i64 0, %add1236
  %mul1238 = mul nsw i64 0, %add1237
  %add1239 = add nsw i64 %mul1238, 0
  br label %cond.end.1240

cond.end.1240:                                    ; preds = %cond.false.1235, %cond.true.1216
  %cond1241 = phi i64 [ %sub1234, %cond.true.1216 ], [ %add1239, %cond.false.1235 ]
  %div1242 = sdiv i64 %cond1241, 8
  %cmp1243 = icmp slt i64 %add1209, %div1242
  br i1 %cmp1243, label %cond.true.1289, label %lor.lhs.false.1272

cond.false.1245:                                  ; preds = %cond.false.1204
  %239 = load i64, i64* %alterslen, align 8
  %add1246 = add nsw i64 %239, 2
  %add1247 = add nsw i64 0, %add1246
  %mul1248 = mul nsw i64 0, %add1247
  %sub1249 = sub nsw i64 %mul1248, 1
  %cmp1250 = icmp slt i64 %sub1249, 0
  br i1 %cmp1250, label %cond.true.1252, label %cond.false.1261

cond.true.1252:                                   ; preds = %cond.false.1245
  %240 = load i64, i64* %alterslen, align 8
  %add1253 = add nsw i64 %240, 2
  %add1254 = add nsw i64 0, %add1253
  %mul1255 = mul nsw i64 0, %add1254
  %add1256 = add nsw i64 %mul1255, 1
  %shl1257 = shl i64 %add1256, 62
  %sub1258 = sub nsw i64 %shl1257, 1
  %mul1259 = mul nsw i64 %sub1258, 2
  %add1260 = add nsw i64 %mul1259, 1
  br label %cond.end.1266

cond.false.1261:                                  ; preds = %cond.false.1245
  %241 = load i64, i64* %alterslen, align 8
  %add1262 = add nsw i64 %241, 2
  %add1263 = add nsw i64 0, %add1262
  %mul1264 = mul nsw i64 0, %add1263
  %sub1265 = sub nsw i64 %mul1264, 1
  br label %cond.end.1266

cond.end.1266:                                    ; preds = %cond.false.1261, %cond.true.1252
  %cond1267 = phi i64 [ %add1260, %cond.true.1252 ], [ %sub1265, %cond.false.1261 ]
  %div1268 = sdiv i64 %cond1267, 8
  %242 = load i64, i64* %alterslen, align 8
  %add1269 = add nsw i64 %242, 2
  %cmp1270 = icmp slt i64 %div1268, %add1269
  br i1 %cmp1270, label %cond.true.1289, label %lor.lhs.false.1272

lor.lhs.false.1272:                               ; preds = %cond.end.1266, %cond.end.1240, %cond.true.1203, %cond.end.1196, %cond.true.1164, %cond.end.1158
  %243 = load i64, i64* %alterslen, align 8
  %add1273 = add nsw i64 %243, 2
  %mul1274 = mul nsw i64 %add1273, 8
  %mul1275 = mul nsw i64 0, %mul1274
  %sub1276 = sub nsw i64 %mul1275, 1
  %cmp1277 = icmp slt i64 %sub1276, 0
  br i1 %cmp1277, label %land.lhs.true.1279, label %lor.lhs.false.1284

land.lhs.true.1279:                               ; preds = %lor.lhs.false.1272
  %244 = load i64, i64* %alterslen, align 8
  %add1280 = add nsw i64 %244, 2
  %mul1281 = mul nsw i64 %add1280, 8
  %cmp1282 = icmp slt i64 %mul1281, -32768
  br i1 %cmp1282, label %cond.true.1289, label %lor.lhs.false.1284

lor.lhs.false.1284:                               ; preds = %land.lhs.true.1279, %lor.lhs.false.1272
  %245 = load i64, i64* %alterslen, align 8
  %add1285 = add nsw i64 %245, 2
  %mul1286 = mul nsw i64 %add1285, 8
  %cmp1287 = icmp slt i64 32767, %mul1286
  br i1 %cmp1287, label %cond.true.1289, label %cond.false.1315

cond.true.1289:                                   ; preds = %lor.lhs.false.1284, %land.lhs.true.1279, %cond.end.1266, %cond.end.1240, %cond.true.1203, %cond.end.1196, %cond.true.1164, %cond.end.1158, %land.lhs.true.1127
  %246 = load i64, i64* %alterslen, align 8
  %add1290 = add nsw i64 %246, 2
  %conv1291 = trunc i64 %add1290 to i16
  %conv1292 = zext i16 %conv1291 to i32
  %mul1293 = mul nsw i32 %conv1292, 8
  %cmp1294 = icmp sle i32 %mul1293, 32767
  br i1 %cmp1294, label %cond.true.1296, label %cond.false.1303

cond.true.1296:                                   ; preds = %cond.true.1289
  %247 = load i64, i64* %alterslen, align 8
  %add1297 = add nsw i64 %247, 2
  %conv1298 = trunc i64 %add1297 to i16
  %conv1299 = zext i16 %conv1298 to i32
  %mul1300 = mul nsw i32 %conv1299, 8
  %conv1301 = trunc i32 %mul1300 to i16
  %conv1302 = sext i16 %conv1301 to i32
  br label %cond.end.1312

cond.false.1303:                                  ; preds = %cond.true.1289
  %248 = load i64, i64* %alterslen, align 8
  %add1304 = add nsw i64 %248, 2
  %conv1305 = trunc i64 %add1304 to i16
  %conv1306 = zext i16 %conv1305 to i32
  %mul1307 = mul nsw i32 %conv1306, 8
  %sub1308 = sub nsw i32 %mul1307, -32768
  %conv1309 = trunc i32 %sub1308 to i16
  %conv1310 = sext i16 %conv1309 to i32
  %add1311 = add nsw i32 %conv1310, -32768
  br label %cond.end.1312

cond.end.1312:                                    ; preds = %cond.false.1303, %cond.true.1296
  %cond1313 = phi i32 [ %conv1302, %cond.true.1296 ], [ %add1311, %cond.false.1303 ]
  %conv1314 = sext i32 %cond1313 to i64
  store i64 %conv1314, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1315:                                  ; preds = %lor.lhs.false.1284
  %249 = load i64, i64* %alterslen, align 8
  %add1316 = add nsw i64 %249, 2
  %conv1317 = trunc i64 %add1316 to i16
  %conv1318 = zext i16 %conv1317 to i32
  %mul1319 = mul nsw i32 %conv1318, 8
  %cmp1320 = icmp sle i32 %mul1319, 32767
  br i1 %cmp1320, label %cond.true.1322, label %cond.false.1329

cond.true.1322:                                   ; preds = %cond.false.1315
  %250 = load i64, i64* %alterslen, align 8
  %add1323 = add nsw i64 %250, 2
  %conv1324 = trunc i64 %add1323 to i16
  %conv1325 = zext i16 %conv1324 to i32
  %mul1326 = mul nsw i32 %conv1325, 8
  %conv1327 = trunc i32 %mul1326 to i16
  %conv1328 = sext i16 %conv1327 to i32
  br label %cond.end.1338

cond.false.1329:                                  ; preds = %cond.false.1315
  %251 = load i64, i64* %alterslen, align 8
  %add1330 = add nsw i64 %251, 2
  %conv1331 = trunc i64 %add1330 to i16
  %conv1332 = zext i16 %conv1331 to i32
  %mul1333 = mul nsw i32 %conv1332, 8
  %sub1334 = sub nsw i32 %mul1333, -32768
  %conv1335 = trunc i32 %sub1334 to i16
  %conv1336 = sext i16 %conv1335 to i32
  %add1337 = add nsw i32 %conv1336, -32768
  br label %cond.end.1338

cond.end.1338:                                    ; preds = %cond.false.1329, %cond.true.1322
  %cond1339 = phi i32 [ %conv1328, %cond.true.1322 ], [ %add1337, %cond.false.1329 ]
  %conv1340 = sext i32 %cond1339 to i64
  store i64 %conv1340, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1341:                                  ; preds = %cond.false.788
  br i1 false, label %cond.true.1342, label %cond.false.1838

cond.true.1342:                                   ; preds = %cond.false.1341
  br i1 false, label %cond.true.1343, label %cond.false.1603

cond.true.1343:                                   ; preds = %cond.true.1342
  %252 = load i64, i64* %alterslen, align 8
  %add1344 = add nsw i64 %252, 2
  %conv1345 = trunc i64 %add1344 to i32
  %add1346 = add nsw i32 0, %conv1345
  %mul1347 = mul nsw i32 0, %add1346
  %sub1348 = sub nsw i32 %mul1347, 1
  %cmp1349 = icmp slt i32 %sub1348, 0
  br i1 %cmp1349, label %cond.true.1351, label %cond.false.1371

cond.true.1351:                                   ; preds = %cond.true.1343
  %253 = load i64, i64* %alterslen, align 8
  %add1352 = add nsw i64 %253, 2
  %conv1353 = trunc i64 %add1352 to i32
  %add1354 = add nsw i32 0, %conv1353
  %mul1355 = mul nsw i32 0, %add1354
  %add1356 = add nsw i32 %mul1355, 0
  %neg1357 = xor i32 %add1356, -1
  %cmp1358 = icmp eq i32 %neg1357, -1
  %conv1359 = zext i1 %cmp1358 to i32
  %sub1360 = sub nsw i32 0, %conv1359
  %254 = load i64, i64* %alterslen, align 8
  %add1361 = add nsw i64 %254, 2
  %conv1362 = trunc i64 %add1361 to i32
  %add1363 = add nsw i32 0, %conv1362
  %mul1364 = mul nsw i32 0, %add1363
  %add1365 = add nsw i32 %mul1364, 1
  %shl1366 = shl i32 %add1365, 30
  %sub1367 = sub nsw i32 %shl1366, 1
  %mul1368 = mul nsw i32 %sub1367, 2
  %add1369 = add nsw i32 %mul1368, 1
  %sub1370 = sub nsw i32 %sub1360, %add1369
  br label %cond.end.1377

cond.false.1371:                                  ; preds = %cond.true.1343
  %255 = load i64, i64* %alterslen, align 8
  %add1372 = add nsw i64 %255, 2
  %conv1373 = trunc i64 %add1372 to i32
  %add1374 = add nsw i32 0, %conv1373
  %mul1375 = mul nsw i32 0, %add1374
  %add1376 = add nsw i32 %mul1375, 0
  br label %cond.end.1377

cond.end.1377:                                    ; preds = %cond.false.1371, %cond.true.1351
  %cond1378 = phi i32 [ %sub1370, %cond.true.1351 ], [ %add1376, %cond.false.1371 ]
  %cmp1379 = icmp eq i32 %cond1378, 0
  br i1 %cmp1379, label %land.lhs.true.1381, label %lor.lhs.false.1386

land.lhs.true.1381:                               ; preds = %cond.end.1377
  %256 = load i64, i64* %alterslen, align 8
  %add1382 = add nsw i64 %256, 2
  %conv1383 = trunc i64 %add1382 to i32
  %cmp1384 = icmp slt i32 %conv1383, 0
  br i1 %cmp1384, label %cond.true.1565, label %lor.lhs.false.1386

lor.lhs.false.1386:                               ; preds = %land.lhs.true.1381, %cond.end.1377
  br i1 false, label %cond.true.1387, label %cond.false.1466

cond.true.1387:                                   ; preds = %lor.lhs.false.1386
  %257 = load i64, i64* %alterslen, align 8
  %add1388 = add nsw i64 %257, 2
  %conv1389 = trunc i64 %add1388 to i32
  %cmp1390 = icmp slt i32 %conv1389, 0
  br i1 %cmp1390, label %cond.true.1392, label %cond.false.1423

cond.true.1392:                                   ; preds = %cond.true.1387
  %258 = load i64, i64* %alterslen, align 8
  %add1393 = add nsw i64 %258, 2
  %conv1394 = trunc i64 %add1393 to i32
  %259 = load i64, i64* %alterslen, align 8
  %add1395 = add nsw i64 %259, 2
  %conv1396 = trunc i64 %add1395 to i32
  %add1397 = add nsw i32 0, %conv1396
  %mul1398 = mul nsw i32 0, %add1397
  %sub1399 = sub nsw i32 %mul1398, 1
  %cmp1400 = icmp slt i32 %sub1399, 0
  br i1 %cmp1400, label %cond.true.1402, label %cond.false.1412

cond.true.1402:                                   ; preds = %cond.true.1392
  %260 = load i64, i64* %alterslen, align 8
  %add1403 = add nsw i64 %260, 2
  %conv1404 = trunc i64 %add1403 to i32
  %add1405 = add nsw i32 0, %conv1404
  %mul1406 = mul nsw i32 0, %add1405
  %add1407 = add nsw i32 %mul1406, 1
  %shl1408 = shl i32 %add1407, 30
  %sub1409 = sub nsw i32 %shl1408, 1
  %mul1410 = mul nsw i32 %sub1409, 2
  %add1411 = add nsw i32 %mul1410, 1
  br label %cond.end.1418

cond.false.1412:                                  ; preds = %cond.true.1392
  %261 = load i64, i64* %alterslen, align 8
  %add1413 = add nsw i64 %261, 2
  %conv1414 = trunc i64 %add1413 to i32
  %add1415 = add nsw i32 0, %conv1414
  %mul1416 = mul nsw i32 0, %add1415
  %sub1417 = sub nsw i32 %mul1416, 1
  br label %cond.end.1418

cond.end.1418:                                    ; preds = %cond.false.1412, %cond.true.1402
  %cond1419 = phi i32 [ %add1411, %cond.true.1402 ], [ %sub1417, %cond.false.1412 ]
  %div1420 = sdiv i32 %cond1419, 8
  %cmp1421 = icmp slt i32 %conv1394, %div1420
  br i1 %cmp1421, label %cond.true.1565, label %lor.lhs.false.1545

cond.false.1423:                                  ; preds = %cond.true.1387
  br i1 false, label %cond.true.1424, label %cond.false.1425

cond.true.1424:                                   ; preds = %cond.false.1423
  br i1 false, label %cond.true.1565, label %lor.lhs.false.1545

cond.false.1425:                                  ; preds = %cond.false.1423
  %262 = load i64, i64* %alterslen, align 8
  %add1426 = add nsw i64 %262, 2
  %conv1427 = trunc i64 %add1426 to i32
  %add1428 = add nsw i32 0, %conv1427
  %mul1429 = mul nsw i32 0, %add1428
  %sub1430 = sub nsw i32 %mul1429, 1
  %cmp1431 = icmp slt i32 %sub1430, 0
  br i1 %cmp1431, label %cond.true.1433, label %cond.false.1453

cond.true.1433:                                   ; preds = %cond.false.1425
  %263 = load i64, i64* %alterslen, align 8
  %add1434 = add nsw i64 %263, 2
  %conv1435 = trunc i64 %add1434 to i32
  %add1436 = add nsw i32 0, %conv1435
  %mul1437 = mul nsw i32 0, %add1436
  %add1438 = add nsw i32 %mul1437, 0
  %neg1439 = xor i32 %add1438, -1
  %cmp1440 = icmp eq i32 %neg1439, -1
  %conv1441 = zext i1 %cmp1440 to i32
  %sub1442 = sub nsw i32 0, %conv1441
  %264 = load i64, i64* %alterslen, align 8
  %add1443 = add nsw i64 %264, 2
  %conv1444 = trunc i64 %add1443 to i32
  %add1445 = add nsw i32 0, %conv1444
  %mul1446 = mul nsw i32 0, %add1445
  %add1447 = add nsw i32 %mul1446, 1
  %shl1448 = shl i32 %add1447, 30
  %sub1449 = sub nsw i32 %shl1448, 1
  %mul1450 = mul nsw i32 %sub1449, 2
  %add1451 = add nsw i32 %mul1450, 1
  %sub1452 = sub nsw i32 %sub1442, %add1451
  br label %cond.end.1459

cond.false.1453:                                  ; preds = %cond.false.1425
  %265 = load i64, i64* %alterslen, align 8
  %add1454 = add nsw i64 %265, 2
  %conv1455 = trunc i64 %add1454 to i32
  %add1456 = add nsw i32 0, %conv1455
  %mul1457 = mul nsw i32 0, %add1456
  %add1458 = add nsw i32 %mul1457, 0
  br label %cond.end.1459

cond.end.1459:                                    ; preds = %cond.false.1453, %cond.true.1433
  %cond1460 = phi i32 [ %sub1452, %cond.true.1433 ], [ %add1458, %cond.false.1453 ]
  %div1461 = sdiv i32 %cond1460, 8
  %266 = load i64, i64* %alterslen, align 8
  %add1462 = add nsw i64 %266, 2
  %conv1463 = trunc i64 %add1462 to i32
  %cmp1464 = icmp slt i32 %div1461, %conv1463
  br i1 %cmp1464, label %cond.true.1565, label %lor.lhs.false.1545

cond.false.1466:                                  ; preds = %lor.lhs.false.1386
  br i1 false, label %cond.true.1467, label %cond.false.1468

cond.true.1467:                                   ; preds = %cond.false.1466
  br i1 false, label %cond.true.1565, label %lor.lhs.false.1545

cond.false.1468:                                  ; preds = %cond.false.1466
  %267 = load i64, i64* %alterslen, align 8
  %add1469 = add nsw i64 %267, 2
  %conv1470 = trunc i64 %add1469 to i32
  %cmp1471 = icmp slt i32 %conv1470, 0
  br i1 %cmp1471, label %cond.true.1473, label %cond.false.1514

cond.true.1473:                                   ; preds = %cond.false.1468
  %268 = load i64, i64* %alterslen, align 8
  %add1474 = add nsw i64 %268, 2
  %conv1475 = trunc i64 %add1474 to i32
  %269 = load i64, i64* %alterslen, align 8
  %add1476 = add nsw i64 %269, 2
  %conv1477 = trunc i64 %add1476 to i32
  %add1478 = add nsw i32 0, %conv1477
  %mul1479 = mul nsw i32 0, %add1478
  %sub1480 = sub nsw i32 %mul1479, 1
  %cmp1481 = icmp slt i32 %sub1480, 0
  br i1 %cmp1481, label %cond.true.1483, label %cond.false.1503

cond.true.1483:                                   ; preds = %cond.true.1473
  %270 = load i64, i64* %alterslen, align 8
  %add1484 = add nsw i64 %270, 2
  %conv1485 = trunc i64 %add1484 to i32
  %add1486 = add nsw i32 0, %conv1485
  %mul1487 = mul nsw i32 0, %add1486
  %add1488 = add nsw i32 %mul1487, 0
  %neg1489 = xor i32 %add1488, -1
  %cmp1490 = icmp eq i32 %neg1489, -1
  %conv1491 = zext i1 %cmp1490 to i32
  %sub1492 = sub nsw i32 0, %conv1491
  %271 = load i64, i64* %alterslen, align 8
  %add1493 = add nsw i64 %271, 2
  %conv1494 = trunc i64 %add1493 to i32
  %add1495 = add nsw i32 0, %conv1494
  %mul1496 = mul nsw i32 0, %add1495
  %add1497 = add nsw i32 %mul1496, 1
  %shl1498 = shl i32 %add1497, 30
  %sub1499 = sub nsw i32 %shl1498, 1
  %mul1500 = mul nsw i32 %sub1499, 2
  %add1501 = add nsw i32 %mul1500, 1
  %sub1502 = sub nsw i32 %sub1492, %add1501
  br label %cond.end.1509

cond.false.1503:                                  ; preds = %cond.true.1473
  %272 = load i64, i64* %alterslen, align 8
  %add1504 = add nsw i64 %272, 2
  %conv1505 = trunc i64 %add1504 to i32
  %add1506 = add nsw i32 0, %conv1505
  %mul1507 = mul nsw i32 0, %add1506
  %add1508 = add nsw i32 %mul1507, 0
  br label %cond.end.1509

cond.end.1509:                                    ; preds = %cond.false.1503, %cond.true.1483
  %cond1510 = phi i32 [ %sub1502, %cond.true.1483 ], [ %add1508, %cond.false.1503 ]
  %div1511 = sdiv i32 %cond1510, 8
  %cmp1512 = icmp slt i32 %conv1475, %div1511
  br i1 %cmp1512, label %cond.true.1565, label %lor.lhs.false.1545

cond.false.1514:                                  ; preds = %cond.false.1468
  %273 = load i64, i64* %alterslen, align 8
  %add1515 = add nsw i64 %273, 2
  %conv1516 = trunc i64 %add1515 to i32
  %add1517 = add nsw i32 0, %conv1516
  %mul1518 = mul nsw i32 0, %add1517
  %sub1519 = sub nsw i32 %mul1518, 1
  %cmp1520 = icmp slt i32 %sub1519, 0
  br i1 %cmp1520, label %cond.true.1522, label %cond.false.1532

cond.true.1522:                                   ; preds = %cond.false.1514
  %274 = load i64, i64* %alterslen, align 8
  %add1523 = add nsw i64 %274, 2
  %conv1524 = trunc i64 %add1523 to i32
  %add1525 = add nsw i32 0, %conv1524
  %mul1526 = mul nsw i32 0, %add1525
  %add1527 = add nsw i32 %mul1526, 1
  %shl1528 = shl i32 %add1527, 30
  %sub1529 = sub nsw i32 %shl1528, 1
  %mul1530 = mul nsw i32 %sub1529, 2
  %add1531 = add nsw i32 %mul1530, 1
  br label %cond.end.1538

cond.false.1532:                                  ; preds = %cond.false.1514
  %275 = load i64, i64* %alterslen, align 8
  %add1533 = add nsw i64 %275, 2
  %conv1534 = trunc i64 %add1533 to i32
  %add1535 = add nsw i32 0, %conv1534
  %mul1536 = mul nsw i32 0, %add1535
  %sub1537 = sub nsw i32 %mul1536, 1
  br label %cond.end.1538

cond.end.1538:                                    ; preds = %cond.false.1532, %cond.true.1522
  %cond1539 = phi i32 [ %add1531, %cond.true.1522 ], [ %sub1537, %cond.false.1532 ]
  %div1540 = sdiv i32 %cond1539, 8
  %276 = load i64, i64* %alterslen, align 8
  %add1541 = add nsw i64 %276, 2
  %conv1542 = trunc i64 %add1541 to i32
  %cmp1543 = icmp slt i32 %div1540, %conv1542
  br i1 %cmp1543, label %cond.true.1565, label %lor.lhs.false.1545

lor.lhs.false.1545:                               ; preds = %cond.end.1538, %cond.end.1509, %cond.true.1467, %cond.end.1459, %cond.true.1424, %cond.end.1418
  %277 = load i64, i64* %alterslen, align 8
  %add1546 = add nsw i64 %277, 2
  %conv1547 = trunc i64 %add1546 to i32
  %mul1548 = mul nsw i32 %conv1547, 8
  %mul1549 = mul nsw i32 0, %mul1548
  %sub1550 = sub nsw i32 %mul1549, 1
  %cmp1551 = icmp slt i32 %sub1550, 0
  br i1 %cmp1551, label %land.lhs.true.1553, label %lor.lhs.false.1559

land.lhs.true.1553:                               ; preds = %lor.lhs.false.1545
  %278 = load i64, i64* %alterslen, align 8
  %add1554 = add nsw i64 %278, 2
  %conv1555 = trunc i64 %add1554 to i32
  %mul1556 = mul nsw i32 %conv1555, 8
  %cmp1557 = icmp slt i32 %mul1556, -2147483648
  br i1 %cmp1557, label %cond.true.1565, label %lor.lhs.false.1559

lor.lhs.false.1559:                               ; preds = %land.lhs.true.1553, %lor.lhs.false.1545
  %279 = load i64, i64* %alterslen, align 8
  %add1560 = add nsw i64 %279, 2
  %conv1561 = trunc i64 %add1560 to i32
  %mul1562 = mul nsw i32 %conv1561, 8
  %cmp1563 = icmp slt i32 2147483647, %mul1562
  br i1 %cmp1563, label %cond.true.1565, label %cond.false.1584

cond.true.1565:                                   ; preds = %lor.lhs.false.1559, %land.lhs.true.1553, %cond.end.1538, %cond.end.1509, %cond.true.1467, %cond.end.1459, %cond.true.1424, %cond.end.1418, %land.lhs.true.1381
  %280 = load i64, i64* %alterslen, align 8
  %add1566 = add nsw i64 %280, 2
  %conv1567 = trunc i64 %add1566 to i32
  %mul1568 = mul i32 %conv1567, 8
  %cmp1569 = icmp ule i32 %mul1568, 2147483647
  br i1 %cmp1569, label %cond.true.1571, label %cond.false.1575

cond.true.1571:                                   ; preds = %cond.true.1565
  %281 = load i64, i64* %alterslen, align 8
  %add1572 = add nsw i64 %281, 2
  %conv1573 = trunc i64 %add1572 to i32
  %mul1574 = mul i32 %conv1573, 8
  br label %cond.end.1581

cond.false.1575:                                  ; preds = %cond.true.1565
  %282 = load i64, i64* %alterslen, align 8
  %add1576 = add nsw i64 %282, 2
  %conv1577 = trunc i64 %add1576 to i32
  %mul1578 = mul i32 %conv1577, 8
  %sub1579 = sub i32 %mul1578, -2147483648
  %add1580 = add nsw i32 %sub1579, -2147483648
  br label %cond.end.1581

cond.end.1581:                                    ; preds = %cond.false.1575, %cond.true.1571
  %cond1582 = phi i32 [ %mul1574, %cond.true.1571 ], [ %add1580, %cond.false.1575 ]
  %conv1583 = sext i32 %cond1582 to i64
  store i64 %conv1583, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1584:                                  ; preds = %lor.lhs.false.1559
  %283 = load i64, i64* %alterslen, align 8
  %add1585 = add nsw i64 %283, 2
  %conv1586 = trunc i64 %add1585 to i32
  %mul1587 = mul i32 %conv1586, 8
  %cmp1588 = icmp ule i32 %mul1587, 2147483647
  br i1 %cmp1588, label %cond.true.1590, label %cond.false.1594

cond.true.1590:                                   ; preds = %cond.false.1584
  %284 = load i64, i64* %alterslen, align 8
  %add1591 = add nsw i64 %284, 2
  %conv1592 = trunc i64 %add1591 to i32
  %mul1593 = mul i32 %conv1592, 8
  br label %cond.end.1600

cond.false.1594:                                  ; preds = %cond.false.1584
  %285 = load i64, i64* %alterslen, align 8
  %add1595 = add nsw i64 %285, 2
  %conv1596 = trunc i64 %add1595 to i32
  %mul1597 = mul i32 %conv1596, 8
  %sub1598 = sub i32 %mul1597, -2147483648
  %add1599 = add nsw i32 %sub1598, -2147483648
  br label %cond.end.1600

cond.end.1600:                                    ; preds = %cond.false.1594, %cond.true.1590
  %cond1601 = phi i32 [ %mul1593, %cond.true.1590 ], [ %add1599, %cond.false.1594 ]
  %conv1602 = sext i32 %cond1601 to i64
  store i64 %conv1602, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1603:                                  ; preds = %cond.true.1342
  %286 = load i64, i64* %alterslen, align 8
  %add1604 = add nsw i64 %286, 2
  %add1605 = add nsw i64 0, %add1604
  %mul1606 = mul nsw i64 0, %add1605
  %sub1607 = sub nsw i64 %mul1606, 1
  %cmp1608 = icmp slt i64 %sub1607, 0
  br i1 %cmp1608, label %cond.true.1610, label %cond.false.1629

cond.true.1610:                                   ; preds = %cond.false.1603
  %287 = load i64, i64* %alterslen, align 8
  %add1611 = add nsw i64 %287, 2
  %add1612 = add nsw i64 0, %add1611
  %mul1613 = mul nsw i64 0, %add1612
  %add1614 = add nsw i64 %mul1613, 0
  %neg1615 = xor i64 %add1614, -1
  %cmp1616 = icmp eq i64 %neg1615, -1
  %conv1617 = zext i1 %cmp1616 to i32
  %sub1618 = sub nsw i32 0, %conv1617
  %conv1619 = sext i32 %sub1618 to i64
  %288 = load i64, i64* %alterslen, align 8
  %add1620 = add nsw i64 %288, 2
  %add1621 = add nsw i64 0, %add1620
  %mul1622 = mul nsw i64 0, %add1621
  %add1623 = add nsw i64 %mul1622, 1
  %shl1624 = shl i64 %add1623, 62
  %sub1625 = sub nsw i64 %shl1624, 1
  %mul1626 = mul nsw i64 %sub1625, 2
  %add1627 = add nsw i64 %mul1626, 1
  %sub1628 = sub nsw i64 %conv1619, %add1627
  br label %cond.end.1634

cond.false.1629:                                  ; preds = %cond.false.1603
  %289 = load i64, i64* %alterslen, align 8
  %add1630 = add nsw i64 %289, 2
  %add1631 = add nsw i64 0, %add1630
  %mul1632 = mul nsw i64 0, %add1631
  %add1633 = add nsw i64 %mul1632, 0
  br label %cond.end.1634

cond.end.1634:                                    ; preds = %cond.false.1629, %cond.true.1610
  %cond1635 = phi i64 [ %sub1628, %cond.true.1610 ], [ %add1633, %cond.false.1629 ]
  %cmp1636 = icmp eq i64 %cond1635, 0
  br i1 %cmp1636, label %land.lhs.true.1638, label %lor.lhs.false.1642

land.lhs.true.1638:                               ; preds = %cond.end.1634
  %290 = load i64, i64* %alterslen, align 8
  %add1639 = add nsw i64 %290, 2
  %cmp1640 = icmp slt i64 %add1639, 0
  br i1 %cmp1640, label %cond.true.1800, label %lor.lhs.false.1642

lor.lhs.false.1642:                               ; preds = %land.lhs.true.1638, %cond.end.1634
  br i1 false, label %cond.true.1643, label %cond.false.1713

cond.true.1643:                                   ; preds = %lor.lhs.false.1642
  %291 = load i64, i64* %alterslen, align 8
  %add1644 = add nsw i64 %291, 2
  %cmp1645 = icmp slt i64 %add1644, 0
  br i1 %cmp1645, label %cond.true.1647, label %cond.false.1674

cond.true.1647:                                   ; preds = %cond.true.1643
  %292 = load i64, i64* %alterslen, align 8
  %add1648 = add nsw i64 %292, 2
  %293 = load i64, i64* %alterslen, align 8
  %add1649 = add nsw i64 %293, 2
  %add1650 = add nsw i64 0, %add1649
  %mul1651 = mul nsw i64 0, %add1650
  %sub1652 = sub nsw i64 %mul1651, 1
  %cmp1653 = icmp slt i64 %sub1652, 0
  br i1 %cmp1653, label %cond.true.1655, label %cond.false.1664

cond.true.1655:                                   ; preds = %cond.true.1647
  %294 = load i64, i64* %alterslen, align 8
  %add1656 = add nsw i64 %294, 2
  %add1657 = add nsw i64 0, %add1656
  %mul1658 = mul nsw i64 0, %add1657
  %add1659 = add nsw i64 %mul1658, 1
  %shl1660 = shl i64 %add1659, 62
  %sub1661 = sub nsw i64 %shl1660, 1
  %mul1662 = mul nsw i64 %sub1661, 2
  %add1663 = add nsw i64 %mul1662, 1
  br label %cond.end.1669

cond.false.1664:                                  ; preds = %cond.true.1647
  %295 = load i64, i64* %alterslen, align 8
  %add1665 = add nsw i64 %295, 2
  %add1666 = add nsw i64 0, %add1665
  %mul1667 = mul nsw i64 0, %add1666
  %sub1668 = sub nsw i64 %mul1667, 1
  br label %cond.end.1669

cond.end.1669:                                    ; preds = %cond.false.1664, %cond.true.1655
  %cond1670 = phi i64 [ %add1663, %cond.true.1655 ], [ %sub1668, %cond.false.1664 ]
  %div1671 = sdiv i64 %cond1670, 8
  %cmp1672 = icmp slt i64 %add1648, %div1671
  br i1 %cmp1672, label %cond.true.1800, label %lor.lhs.false.1783

cond.false.1674:                                  ; preds = %cond.true.1643
  br i1 false, label %cond.true.1675, label %cond.false.1676

cond.true.1675:                                   ; preds = %cond.false.1674
  br i1 false, label %cond.true.1800, label %lor.lhs.false.1783

cond.false.1676:                                  ; preds = %cond.false.1674
  %296 = load i64, i64* %alterslen, align 8
  %add1677 = add nsw i64 %296, 2
  %add1678 = add nsw i64 0, %add1677
  %mul1679 = mul nsw i64 0, %add1678
  %sub1680 = sub nsw i64 %mul1679, 1
  %cmp1681 = icmp slt i64 %sub1680, 0
  br i1 %cmp1681, label %cond.true.1683, label %cond.false.1702

cond.true.1683:                                   ; preds = %cond.false.1676
  %297 = load i64, i64* %alterslen, align 8
  %add1684 = add nsw i64 %297, 2
  %add1685 = add nsw i64 0, %add1684
  %mul1686 = mul nsw i64 0, %add1685
  %add1687 = add nsw i64 %mul1686, 0
  %neg1688 = xor i64 %add1687, -1
  %cmp1689 = icmp eq i64 %neg1688, -1
  %conv1690 = zext i1 %cmp1689 to i32
  %sub1691 = sub nsw i32 0, %conv1690
  %conv1692 = sext i32 %sub1691 to i64
  %298 = load i64, i64* %alterslen, align 8
  %add1693 = add nsw i64 %298, 2
  %add1694 = add nsw i64 0, %add1693
  %mul1695 = mul nsw i64 0, %add1694
  %add1696 = add nsw i64 %mul1695, 1
  %shl1697 = shl i64 %add1696, 62
  %sub1698 = sub nsw i64 %shl1697, 1
  %mul1699 = mul nsw i64 %sub1698, 2
  %add1700 = add nsw i64 %mul1699, 1
  %sub1701 = sub nsw i64 %conv1692, %add1700
  br label %cond.end.1707

cond.false.1702:                                  ; preds = %cond.false.1676
  %299 = load i64, i64* %alterslen, align 8
  %add1703 = add nsw i64 %299, 2
  %add1704 = add nsw i64 0, %add1703
  %mul1705 = mul nsw i64 0, %add1704
  %add1706 = add nsw i64 %mul1705, 0
  br label %cond.end.1707

cond.end.1707:                                    ; preds = %cond.false.1702, %cond.true.1683
  %cond1708 = phi i64 [ %sub1701, %cond.true.1683 ], [ %add1706, %cond.false.1702 ]
  %div1709 = sdiv i64 %cond1708, 8
  %300 = load i64, i64* %alterslen, align 8
  %add1710 = add nsw i64 %300, 2
  %cmp1711 = icmp slt i64 %div1709, %add1710
  br i1 %cmp1711, label %cond.true.1800, label %lor.lhs.false.1783

cond.false.1713:                                  ; preds = %lor.lhs.false.1642
  br i1 false, label %cond.true.1714, label %cond.false.1715

cond.true.1714:                                   ; preds = %cond.false.1713
  br i1 false, label %cond.true.1800, label %lor.lhs.false.1783

cond.false.1715:                                  ; preds = %cond.false.1713
  %301 = load i64, i64* %alterslen, align 8
  %add1716 = add nsw i64 %301, 2
  %cmp1717 = icmp slt i64 %add1716, 0
  br i1 %cmp1717, label %cond.true.1719, label %cond.false.1756

cond.true.1719:                                   ; preds = %cond.false.1715
  %302 = load i64, i64* %alterslen, align 8
  %add1720 = add nsw i64 %302, 2
  %303 = load i64, i64* %alterslen, align 8
  %add1721 = add nsw i64 %303, 2
  %add1722 = add nsw i64 0, %add1721
  %mul1723 = mul nsw i64 0, %add1722
  %sub1724 = sub nsw i64 %mul1723, 1
  %cmp1725 = icmp slt i64 %sub1724, 0
  br i1 %cmp1725, label %cond.true.1727, label %cond.false.1746

cond.true.1727:                                   ; preds = %cond.true.1719
  %304 = load i64, i64* %alterslen, align 8
  %add1728 = add nsw i64 %304, 2
  %add1729 = add nsw i64 0, %add1728
  %mul1730 = mul nsw i64 0, %add1729
  %add1731 = add nsw i64 %mul1730, 0
  %neg1732 = xor i64 %add1731, -1
  %cmp1733 = icmp eq i64 %neg1732, -1
  %conv1734 = zext i1 %cmp1733 to i32
  %sub1735 = sub nsw i32 0, %conv1734
  %conv1736 = sext i32 %sub1735 to i64
  %305 = load i64, i64* %alterslen, align 8
  %add1737 = add nsw i64 %305, 2
  %add1738 = add nsw i64 0, %add1737
  %mul1739 = mul nsw i64 0, %add1738
  %add1740 = add nsw i64 %mul1739, 1
  %shl1741 = shl i64 %add1740, 62
  %sub1742 = sub nsw i64 %shl1741, 1
  %mul1743 = mul nsw i64 %sub1742, 2
  %add1744 = add nsw i64 %mul1743, 1
  %sub1745 = sub nsw i64 %conv1736, %add1744
  br label %cond.end.1751

cond.false.1746:                                  ; preds = %cond.true.1719
  %306 = load i64, i64* %alterslen, align 8
  %add1747 = add nsw i64 %306, 2
  %add1748 = add nsw i64 0, %add1747
  %mul1749 = mul nsw i64 0, %add1748
  %add1750 = add nsw i64 %mul1749, 0
  br label %cond.end.1751

cond.end.1751:                                    ; preds = %cond.false.1746, %cond.true.1727
  %cond1752 = phi i64 [ %sub1745, %cond.true.1727 ], [ %add1750, %cond.false.1746 ]
  %div1753 = sdiv i64 %cond1752, 8
  %cmp1754 = icmp slt i64 %add1720, %div1753
  br i1 %cmp1754, label %cond.true.1800, label %lor.lhs.false.1783

cond.false.1756:                                  ; preds = %cond.false.1715
  %307 = load i64, i64* %alterslen, align 8
  %add1757 = add nsw i64 %307, 2
  %add1758 = add nsw i64 0, %add1757
  %mul1759 = mul nsw i64 0, %add1758
  %sub1760 = sub nsw i64 %mul1759, 1
  %cmp1761 = icmp slt i64 %sub1760, 0
  br i1 %cmp1761, label %cond.true.1763, label %cond.false.1772

cond.true.1763:                                   ; preds = %cond.false.1756
  %308 = load i64, i64* %alterslen, align 8
  %add1764 = add nsw i64 %308, 2
  %add1765 = add nsw i64 0, %add1764
  %mul1766 = mul nsw i64 0, %add1765
  %add1767 = add nsw i64 %mul1766, 1
  %shl1768 = shl i64 %add1767, 62
  %sub1769 = sub nsw i64 %shl1768, 1
  %mul1770 = mul nsw i64 %sub1769, 2
  %add1771 = add nsw i64 %mul1770, 1
  br label %cond.end.1777

cond.false.1772:                                  ; preds = %cond.false.1756
  %309 = load i64, i64* %alterslen, align 8
  %add1773 = add nsw i64 %309, 2
  %add1774 = add nsw i64 0, %add1773
  %mul1775 = mul nsw i64 0, %add1774
  %sub1776 = sub nsw i64 %mul1775, 1
  br label %cond.end.1777

cond.end.1777:                                    ; preds = %cond.false.1772, %cond.true.1763
  %cond1778 = phi i64 [ %add1771, %cond.true.1763 ], [ %sub1776, %cond.false.1772 ]
  %div1779 = sdiv i64 %cond1778, 8
  %310 = load i64, i64* %alterslen, align 8
  %add1780 = add nsw i64 %310, 2
  %cmp1781 = icmp slt i64 %div1779, %add1780
  br i1 %cmp1781, label %cond.true.1800, label %lor.lhs.false.1783

lor.lhs.false.1783:                               ; preds = %cond.end.1777, %cond.end.1751, %cond.true.1714, %cond.end.1707, %cond.true.1675, %cond.end.1669
  %311 = load i64, i64* %alterslen, align 8
  %add1784 = add nsw i64 %311, 2
  %mul1785 = mul nsw i64 %add1784, 8
  %mul1786 = mul nsw i64 0, %mul1785
  %sub1787 = sub nsw i64 %mul1786, 1
  %cmp1788 = icmp slt i64 %sub1787, 0
  br i1 %cmp1788, label %land.lhs.true.1790, label %lor.lhs.false.1795

land.lhs.true.1790:                               ; preds = %lor.lhs.false.1783
  %312 = load i64, i64* %alterslen, align 8
  %add1791 = add nsw i64 %312, 2
  %mul1792 = mul nsw i64 %add1791, 8
  %cmp1793 = icmp slt i64 %mul1792, -2147483648
  br i1 %cmp1793, label %cond.true.1800, label %lor.lhs.false.1795

lor.lhs.false.1795:                               ; preds = %land.lhs.true.1790, %lor.lhs.false.1783
  %313 = load i64, i64* %alterslen, align 8
  %add1796 = add nsw i64 %313, 2
  %mul1797 = mul nsw i64 %add1796, 8
  %cmp1798 = icmp slt i64 2147483647, %mul1797
  br i1 %cmp1798, label %cond.true.1800, label %cond.false.1819

cond.true.1800:                                   ; preds = %lor.lhs.false.1795, %land.lhs.true.1790, %cond.end.1777, %cond.end.1751, %cond.true.1714, %cond.end.1707, %cond.true.1675, %cond.end.1669, %land.lhs.true.1638
  %314 = load i64, i64* %alterslen, align 8
  %add1801 = add nsw i64 %314, 2
  %conv1802 = trunc i64 %add1801 to i32
  %mul1803 = mul i32 %conv1802, 8
  %cmp1804 = icmp ule i32 %mul1803, 2147483647
  br i1 %cmp1804, label %cond.true.1806, label %cond.false.1810

cond.true.1806:                                   ; preds = %cond.true.1800
  %315 = load i64, i64* %alterslen, align 8
  %add1807 = add nsw i64 %315, 2
  %conv1808 = trunc i64 %add1807 to i32
  %mul1809 = mul i32 %conv1808, 8
  br label %cond.end.1816

cond.false.1810:                                  ; preds = %cond.true.1800
  %316 = load i64, i64* %alterslen, align 8
  %add1811 = add nsw i64 %316, 2
  %conv1812 = trunc i64 %add1811 to i32
  %mul1813 = mul i32 %conv1812, 8
  %sub1814 = sub i32 %mul1813, -2147483648
  %add1815 = add nsw i32 %sub1814, -2147483648
  br label %cond.end.1816

cond.end.1816:                                    ; preds = %cond.false.1810, %cond.true.1806
  %cond1817 = phi i32 [ %mul1809, %cond.true.1806 ], [ %add1815, %cond.false.1810 ]
  %conv1818 = sext i32 %cond1817 to i64
  store i64 %conv1818, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1819:                                  ; preds = %lor.lhs.false.1795
  %317 = load i64, i64* %alterslen, align 8
  %add1820 = add nsw i64 %317, 2
  %conv1821 = trunc i64 %add1820 to i32
  %mul1822 = mul i32 %conv1821, 8
  %cmp1823 = icmp ule i32 %mul1822, 2147483647
  br i1 %cmp1823, label %cond.true.1825, label %cond.false.1829

cond.true.1825:                                   ; preds = %cond.false.1819
  %318 = load i64, i64* %alterslen, align 8
  %add1826 = add nsw i64 %318, 2
  %conv1827 = trunc i64 %add1826 to i32
  %mul1828 = mul i32 %conv1827, 8
  br label %cond.end.1835

cond.false.1829:                                  ; preds = %cond.false.1819
  %319 = load i64, i64* %alterslen, align 8
  %add1830 = add nsw i64 %319, 2
  %conv1831 = trunc i64 %add1830 to i32
  %mul1832 = mul i32 %conv1831, 8
  %sub1833 = sub i32 %mul1832, -2147483648
  %add1834 = add nsw i32 %sub1833, -2147483648
  br label %cond.end.1835

cond.end.1835:                                    ; preds = %cond.false.1829, %cond.true.1825
  %cond1836 = phi i32 [ %mul1828, %cond.true.1825 ], [ %add1834, %cond.false.1829 ]
  %conv1837 = sext i32 %cond1836 to i64
  store i64 %conv1837, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.1838:                                  ; preds = %cond.false.1341
  br i1 true, label %cond.true.1839, label %cond.false.2294

cond.true.1839:                                   ; preds = %cond.false.1838
  br i1 false, label %cond.true.1840, label %cond.false.2067

cond.true.1840:                                   ; preds = %cond.true.1839
  %320 = load i64, i64* %alterslen, align 8
  %add1841 = add nsw i64 %320, 2
  %add1842 = add nsw i64 0, %add1841
  %mul1843 = mul nsw i64 0, %add1842
  %sub1844 = sub nsw i64 %mul1843, 1
  %cmp1845 = icmp slt i64 %sub1844, 0
  br i1 %cmp1845, label %cond.true.1847, label %cond.false.1866

cond.true.1847:                                   ; preds = %cond.true.1840
  %321 = load i64, i64* %alterslen, align 8
  %add1848 = add nsw i64 %321, 2
  %add1849 = add nsw i64 0, %add1848
  %mul1850 = mul nsw i64 0, %add1849
  %add1851 = add nsw i64 %mul1850, 0
  %neg1852 = xor i64 %add1851, -1
  %cmp1853 = icmp eq i64 %neg1852, -1
  %conv1854 = zext i1 %cmp1853 to i32
  %sub1855 = sub nsw i32 0, %conv1854
  %conv1856 = sext i32 %sub1855 to i64
  %322 = load i64, i64* %alterslen, align 8
  %add1857 = add nsw i64 %322, 2
  %add1858 = add nsw i64 0, %add1857
  %mul1859 = mul nsw i64 0, %add1858
  %add1860 = add nsw i64 %mul1859, 1
  %shl1861 = shl i64 %add1860, 62
  %sub1862 = sub nsw i64 %shl1861, 1
  %mul1863 = mul nsw i64 %sub1862, 2
  %add1864 = add nsw i64 %mul1863, 1
  %sub1865 = sub nsw i64 %conv1856, %add1864
  br label %cond.end.1871

cond.false.1866:                                  ; preds = %cond.true.1840
  %323 = load i64, i64* %alterslen, align 8
  %add1867 = add nsw i64 %323, 2
  %add1868 = add nsw i64 0, %add1867
  %mul1869 = mul nsw i64 0, %add1868
  %add1870 = add nsw i64 %mul1869, 0
  br label %cond.end.1871

cond.end.1871:                                    ; preds = %cond.false.1866, %cond.true.1847
  %cond1872 = phi i64 [ %sub1865, %cond.true.1847 ], [ %add1870, %cond.false.1866 ]
  %cmp1873 = icmp eq i64 %cond1872, 0
  br i1 %cmp1873, label %land.lhs.true.1875, label %lor.lhs.false.1879

land.lhs.true.1875:                               ; preds = %cond.end.1871
  %324 = load i64, i64* %alterslen, align 8
  %add1876 = add nsw i64 %324, 2
  %cmp1877 = icmp slt i64 %add1876, 0
  br i1 %cmp1877, label %cond.true.2037, label %lor.lhs.false.1879

lor.lhs.false.1879:                               ; preds = %land.lhs.true.1875, %cond.end.1871
  br i1 false, label %cond.true.1880, label %cond.false.1950

cond.true.1880:                                   ; preds = %lor.lhs.false.1879
  %325 = load i64, i64* %alterslen, align 8
  %add1881 = add nsw i64 %325, 2
  %cmp1882 = icmp slt i64 %add1881, 0
  br i1 %cmp1882, label %cond.true.1884, label %cond.false.1911

cond.true.1884:                                   ; preds = %cond.true.1880
  %326 = load i64, i64* %alterslen, align 8
  %add1885 = add nsw i64 %326, 2
  %327 = load i64, i64* %alterslen, align 8
  %add1886 = add nsw i64 %327, 2
  %add1887 = add nsw i64 0, %add1886
  %mul1888 = mul nsw i64 0, %add1887
  %sub1889 = sub nsw i64 %mul1888, 1
  %cmp1890 = icmp slt i64 %sub1889, 0
  br i1 %cmp1890, label %cond.true.1892, label %cond.false.1901

cond.true.1892:                                   ; preds = %cond.true.1884
  %328 = load i64, i64* %alterslen, align 8
  %add1893 = add nsw i64 %328, 2
  %add1894 = add nsw i64 0, %add1893
  %mul1895 = mul nsw i64 0, %add1894
  %add1896 = add nsw i64 %mul1895, 1
  %shl1897 = shl i64 %add1896, 62
  %sub1898 = sub nsw i64 %shl1897, 1
  %mul1899 = mul nsw i64 %sub1898, 2
  %add1900 = add nsw i64 %mul1899, 1
  br label %cond.end.1906

cond.false.1901:                                  ; preds = %cond.true.1884
  %329 = load i64, i64* %alterslen, align 8
  %add1902 = add nsw i64 %329, 2
  %add1903 = add nsw i64 0, %add1902
  %mul1904 = mul nsw i64 0, %add1903
  %sub1905 = sub nsw i64 %mul1904, 1
  br label %cond.end.1906

cond.end.1906:                                    ; preds = %cond.false.1901, %cond.true.1892
  %cond1907 = phi i64 [ %add1900, %cond.true.1892 ], [ %sub1905, %cond.false.1901 ]
  %div1908 = sdiv i64 %cond1907, 8
  %cmp1909 = icmp slt i64 %add1885, %div1908
  br i1 %cmp1909, label %cond.true.2037, label %lor.lhs.false.2020

cond.false.1911:                                  ; preds = %cond.true.1880
  br i1 false, label %cond.true.1912, label %cond.false.1913

cond.true.1912:                                   ; preds = %cond.false.1911
  br i1 false, label %cond.true.2037, label %lor.lhs.false.2020

cond.false.1913:                                  ; preds = %cond.false.1911
  %330 = load i64, i64* %alterslen, align 8
  %add1914 = add nsw i64 %330, 2
  %add1915 = add nsw i64 0, %add1914
  %mul1916 = mul nsw i64 0, %add1915
  %sub1917 = sub nsw i64 %mul1916, 1
  %cmp1918 = icmp slt i64 %sub1917, 0
  br i1 %cmp1918, label %cond.true.1920, label %cond.false.1939

cond.true.1920:                                   ; preds = %cond.false.1913
  %331 = load i64, i64* %alterslen, align 8
  %add1921 = add nsw i64 %331, 2
  %add1922 = add nsw i64 0, %add1921
  %mul1923 = mul nsw i64 0, %add1922
  %add1924 = add nsw i64 %mul1923, 0
  %neg1925 = xor i64 %add1924, -1
  %cmp1926 = icmp eq i64 %neg1925, -1
  %conv1927 = zext i1 %cmp1926 to i32
  %sub1928 = sub nsw i32 0, %conv1927
  %conv1929 = sext i32 %sub1928 to i64
  %332 = load i64, i64* %alterslen, align 8
  %add1930 = add nsw i64 %332, 2
  %add1931 = add nsw i64 0, %add1930
  %mul1932 = mul nsw i64 0, %add1931
  %add1933 = add nsw i64 %mul1932, 1
  %shl1934 = shl i64 %add1933, 62
  %sub1935 = sub nsw i64 %shl1934, 1
  %mul1936 = mul nsw i64 %sub1935, 2
  %add1937 = add nsw i64 %mul1936, 1
  %sub1938 = sub nsw i64 %conv1929, %add1937
  br label %cond.end.1944

cond.false.1939:                                  ; preds = %cond.false.1913
  %333 = load i64, i64* %alterslen, align 8
  %add1940 = add nsw i64 %333, 2
  %add1941 = add nsw i64 0, %add1940
  %mul1942 = mul nsw i64 0, %add1941
  %add1943 = add nsw i64 %mul1942, 0
  br label %cond.end.1944

cond.end.1944:                                    ; preds = %cond.false.1939, %cond.true.1920
  %cond1945 = phi i64 [ %sub1938, %cond.true.1920 ], [ %add1943, %cond.false.1939 ]
  %div1946 = sdiv i64 %cond1945, 8
  %334 = load i64, i64* %alterslen, align 8
  %add1947 = add nsw i64 %334, 2
  %cmp1948 = icmp slt i64 %div1946, %add1947
  br i1 %cmp1948, label %cond.true.2037, label %lor.lhs.false.2020

cond.false.1950:                                  ; preds = %lor.lhs.false.1879
  br i1 false, label %cond.true.1951, label %cond.false.1952

cond.true.1951:                                   ; preds = %cond.false.1950
  br i1 false, label %cond.true.2037, label %lor.lhs.false.2020

cond.false.1952:                                  ; preds = %cond.false.1950
  %335 = load i64, i64* %alterslen, align 8
  %add1953 = add nsw i64 %335, 2
  %cmp1954 = icmp slt i64 %add1953, 0
  br i1 %cmp1954, label %cond.true.1956, label %cond.false.1993

cond.true.1956:                                   ; preds = %cond.false.1952
  %336 = load i64, i64* %alterslen, align 8
  %add1957 = add nsw i64 %336, 2
  %337 = load i64, i64* %alterslen, align 8
  %add1958 = add nsw i64 %337, 2
  %add1959 = add nsw i64 0, %add1958
  %mul1960 = mul nsw i64 0, %add1959
  %sub1961 = sub nsw i64 %mul1960, 1
  %cmp1962 = icmp slt i64 %sub1961, 0
  br i1 %cmp1962, label %cond.true.1964, label %cond.false.1983

cond.true.1964:                                   ; preds = %cond.true.1956
  %338 = load i64, i64* %alterslen, align 8
  %add1965 = add nsw i64 %338, 2
  %add1966 = add nsw i64 0, %add1965
  %mul1967 = mul nsw i64 0, %add1966
  %add1968 = add nsw i64 %mul1967, 0
  %neg1969 = xor i64 %add1968, -1
  %cmp1970 = icmp eq i64 %neg1969, -1
  %conv1971 = zext i1 %cmp1970 to i32
  %sub1972 = sub nsw i32 0, %conv1971
  %conv1973 = sext i32 %sub1972 to i64
  %339 = load i64, i64* %alterslen, align 8
  %add1974 = add nsw i64 %339, 2
  %add1975 = add nsw i64 0, %add1974
  %mul1976 = mul nsw i64 0, %add1975
  %add1977 = add nsw i64 %mul1976, 1
  %shl1978 = shl i64 %add1977, 62
  %sub1979 = sub nsw i64 %shl1978, 1
  %mul1980 = mul nsw i64 %sub1979, 2
  %add1981 = add nsw i64 %mul1980, 1
  %sub1982 = sub nsw i64 %conv1973, %add1981
  br label %cond.end.1988

cond.false.1983:                                  ; preds = %cond.true.1956
  %340 = load i64, i64* %alterslen, align 8
  %add1984 = add nsw i64 %340, 2
  %add1985 = add nsw i64 0, %add1984
  %mul1986 = mul nsw i64 0, %add1985
  %add1987 = add nsw i64 %mul1986, 0
  br label %cond.end.1988

cond.end.1988:                                    ; preds = %cond.false.1983, %cond.true.1964
  %cond1989 = phi i64 [ %sub1982, %cond.true.1964 ], [ %add1987, %cond.false.1983 ]
  %div1990 = sdiv i64 %cond1989, 8
  %cmp1991 = icmp slt i64 %add1957, %div1990
  br i1 %cmp1991, label %cond.true.2037, label %lor.lhs.false.2020

cond.false.1993:                                  ; preds = %cond.false.1952
  %341 = load i64, i64* %alterslen, align 8
  %add1994 = add nsw i64 %341, 2
  %add1995 = add nsw i64 0, %add1994
  %mul1996 = mul nsw i64 0, %add1995
  %sub1997 = sub nsw i64 %mul1996, 1
  %cmp1998 = icmp slt i64 %sub1997, 0
  br i1 %cmp1998, label %cond.true.2000, label %cond.false.2009

cond.true.2000:                                   ; preds = %cond.false.1993
  %342 = load i64, i64* %alterslen, align 8
  %add2001 = add nsw i64 %342, 2
  %add2002 = add nsw i64 0, %add2001
  %mul2003 = mul nsw i64 0, %add2002
  %add2004 = add nsw i64 %mul2003, 1
  %shl2005 = shl i64 %add2004, 62
  %sub2006 = sub nsw i64 %shl2005, 1
  %mul2007 = mul nsw i64 %sub2006, 2
  %add2008 = add nsw i64 %mul2007, 1
  br label %cond.end.2014

cond.false.2009:                                  ; preds = %cond.false.1993
  %343 = load i64, i64* %alterslen, align 8
  %add2010 = add nsw i64 %343, 2
  %add2011 = add nsw i64 0, %add2010
  %mul2012 = mul nsw i64 0, %add2011
  %sub2013 = sub nsw i64 %mul2012, 1
  br label %cond.end.2014

cond.end.2014:                                    ; preds = %cond.false.2009, %cond.true.2000
  %cond2015 = phi i64 [ %add2008, %cond.true.2000 ], [ %sub2013, %cond.false.2009 ]
  %div2016 = sdiv i64 %cond2015, 8
  %344 = load i64, i64* %alterslen, align 8
  %add2017 = add nsw i64 %344, 2
  %cmp2018 = icmp slt i64 %div2016, %add2017
  br i1 %cmp2018, label %cond.true.2037, label %lor.lhs.false.2020

lor.lhs.false.2020:                               ; preds = %cond.end.2014, %cond.end.1988, %cond.true.1951, %cond.end.1944, %cond.true.1912, %cond.end.1906
  %345 = load i64, i64* %alterslen, align 8
  %add2021 = add nsw i64 %345, 2
  %mul2022 = mul nsw i64 %add2021, 8
  %mul2023 = mul nsw i64 0, %mul2022
  %sub2024 = sub nsw i64 %mul2023, 1
  %cmp2025 = icmp slt i64 %sub2024, 0
  br i1 %cmp2025, label %land.lhs.true.2027, label %lor.lhs.false.2032

land.lhs.true.2027:                               ; preds = %lor.lhs.false.2020
  %346 = load i64, i64* %alterslen, align 8
  %add2028 = add nsw i64 %346, 2
  %mul2029 = mul nsw i64 %add2028, 8
  %cmp2030 = icmp slt i64 %mul2029, -9223372036854775808
  br i1 %cmp2030, label %cond.true.2037, label %lor.lhs.false.2032

lor.lhs.false.2032:                               ; preds = %land.lhs.true.2027, %lor.lhs.false.2020
  %347 = load i64, i64* %alterslen, align 8
  %add2033 = add nsw i64 %347, 2
  %mul2034 = mul nsw i64 %add2033, 8
  %cmp2035 = icmp slt i64 9223372036854775807, %mul2034
  br i1 %cmp2035, label %cond.true.2037, label %cond.false.2052

cond.true.2037:                                   ; preds = %lor.lhs.false.2032, %land.lhs.true.2027, %cond.end.2014, %cond.end.1988, %cond.true.1951, %cond.end.1944, %cond.true.1912, %cond.end.1906, %land.lhs.true.1875
  %348 = load i64, i64* %alterslen, align 8
  %add2038 = add nsw i64 %348, 2
  %mul2039 = mul i64 %add2038, 8
  %cmp2040 = icmp ule i64 %mul2039, 9223372036854775807
  br i1 %cmp2040, label %cond.true.2042, label %cond.false.2045

cond.true.2042:                                   ; preds = %cond.true.2037
  %349 = load i64, i64* %alterslen, align 8
  %add2043 = add nsw i64 %349, 2
  %mul2044 = mul i64 %add2043, 8
  br label %cond.end.2050

cond.false.2045:                                  ; preds = %cond.true.2037
  %350 = load i64, i64* %alterslen, align 8
  %add2046 = add nsw i64 %350, 2
  %mul2047 = mul i64 %add2046, 8
  %sub2048 = sub i64 %mul2047, -9223372036854775808
  %add2049 = add nsw i64 %sub2048, -9223372036854775808
  br label %cond.end.2050

cond.end.2050:                                    ; preds = %cond.false.2045, %cond.true.2042
  %cond2051 = phi i64 [ %mul2044, %cond.true.2042 ], [ %add2049, %cond.false.2045 ]
  store i64 %cond2051, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.2052:                                  ; preds = %lor.lhs.false.2032
  %351 = load i64, i64* %alterslen, align 8
  %add2053 = add nsw i64 %351, 2
  %mul2054 = mul i64 %add2053, 8
  %cmp2055 = icmp ule i64 %mul2054, 9223372036854775807
  br i1 %cmp2055, label %cond.true.2057, label %cond.false.2060

cond.true.2057:                                   ; preds = %cond.false.2052
  %352 = load i64, i64* %alterslen, align 8
  %add2058 = add nsw i64 %352, 2
  %mul2059 = mul i64 %add2058, 8
  br label %cond.end.2065

cond.false.2060:                                  ; preds = %cond.false.2052
  %353 = load i64, i64* %alterslen, align 8
  %add2061 = add nsw i64 %353, 2
  %mul2062 = mul i64 %add2061, 8
  %sub2063 = sub i64 %mul2062, -9223372036854775808
  %add2064 = add nsw i64 %sub2063, -9223372036854775808
  br label %cond.end.2065

cond.end.2065:                                    ; preds = %cond.false.2060, %cond.true.2057
  %cond2066 = phi i64 [ %mul2059, %cond.true.2057 ], [ %add2064, %cond.false.2060 ]
  store i64 %cond2066, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.2067:                                  ; preds = %cond.true.1839
  %354 = load i64, i64* %alterslen, align 8
  %add2068 = add nsw i64 %354, 2
  %add2069 = add nsw i64 0, %add2068
  %mul2070 = mul nsw i64 0, %add2069
  %sub2071 = sub nsw i64 %mul2070, 1
  %cmp2072 = icmp slt i64 %sub2071, 0
  br i1 %cmp2072, label %cond.true.2074, label %cond.false.2093

cond.true.2074:                                   ; preds = %cond.false.2067
  %355 = load i64, i64* %alterslen, align 8
  %add2075 = add nsw i64 %355, 2
  %add2076 = add nsw i64 0, %add2075
  %mul2077 = mul nsw i64 0, %add2076
  %add2078 = add nsw i64 %mul2077, 0
  %neg2079 = xor i64 %add2078, -1
  %cmp2080 = icmp eq i64 %neg2079, -1
  %conv2081 = zext i1 %cmp2080 to i32
  %sub2082 = sub nsw i32 0, %conv2081
  %conv2083 = sext i32 %sub2082 to i64
  %356 = load i64, i64* %alterslen, align 8
  %add2084 = add nsw i64 %356, 2
  %add2085 = add nsw i64 0, %add2084
  %mul2086 = mul nsw i64 0, %add2085
  %add2087 = add nsw i64 %mul2086, 1
  %shl2088 = shl i64 %add2087, 62
  %sub2089 = sub nsw i64 %shl2088, 1
  %mul2090 = mul nsw i64 %sub2089, 2
  %add2091 = add nsw i64 %mul2090, 1
  %sub2092 = sub nsw i64 %conv2083, %add2091
  br label %cond.end.2098

cond.false.2093:                                  ; preds = %cond.false.2067
  %357 = load i64, i64* %alterslen, align 8
  %add2094 = add nsw i64 %357, 2
  %add2095 = add nsw i64 0, %add2094
  %mul2096 = mul nsw i64 0, %add2095
  %add2097 = add nsw i64 %mul2096, 0
  br label %cond.end.2098

cond.end.2098:                                    ; preds = %cond.false.2093, %cond.true.2074
  %cond2099 = phi i64 [ %sub2092, %cond.true.2074 ], [ %add2097, %cond.false.2093 ]
  %cmp2100 = icmp eq i64 %cond2099, 0
  br i1 %cmp2100, label %land.lhs.true.2102, label %lor.lhs.false.2106

land.lhs.true.2102:                               ; preds = %cond.end.2098
  %358 = load i64, i64* %alterslen, align 8
  %add2103 = add nsw i64 %358, 2
  %cmp2104 = icmp slt i64 %add2103, 0
  br i1 %cmp2104, label %cond.true.2264, label %lor.lhs.false.2106

lor.lhs.false.2106:                               ; preds = %land.lhs.true.2102, %cond.end.2098
  br i1 false, label %cond.true.2107, label %cond.false.2177

cond.true.2107:                                   ; preds = %lor.lhs.false.2106
  %359 = load i64, i64* %alterslen, align 8
  %add2108 = add nsw i64 %359, 2
  %cmp2109 = icmp slt i64 %add2108, 0
  br i1 %cmp2109, label %cond.true.2111, label %cond.false.2138

cond.true.2111:                                   ; preds = %cond.true.2107
  %360 = load i64, i64* %alterslen, align 8
  %add2112 = add nsw i64 %360, 2
  %361 = load i64, i64* %alterslen, align 8
  %add2113 = add nsw i64 %361, 2
  %add2114 = add nsw i64 0, %add2113
  %mul2115 = mul nsw i64 0, %add2114
  %sub2116 = sub nsw i64 %mul2115, 1
  %cmp2117 = icmp slt i64 %sub2116, 0
  br i1 %cmp2117, label %cond.true.2119, label %cond.false.2128

cond.true.2119:                                   ; preds = %cond.true.2111
  %362 = load i64, i64* %alterslen, align 8
  %add2120 = add nsw i64 %362, 2
  %add2121 = add nsw i64 0, %add2120
  %mul2122 = mul nsw i64 0, %add2121
  %add2123 = add nsw i64 %mul2122, 1
  %shl2124 = shl i64 %add2123, 62
  %sub2125 = sub nsw i64 %shl2124, 1
  %mul2126 = mul nsw i64 %sub2125, 2
  %add2127 = add nsw i64 %mul2126, 1
  br label %cond.end.2133

cond.false.2128:                                  ; preds = %cond.true.2111
  %363 = load i64, i64* %alterslen, align 8
  %add2129 = add nsw i64 %363, 2
  %add2130 = add nsw i64 0, %add2129
  %mul2131 = mul nsw i64 0, %add2130
  %sub2132 = sub nsw i64 %mul2131, 1
  br label %cond.end.2133

cond.end.2133:                                    ; preds = %cond.false.2128, %cond.true.2119
  %cond2134 = phi i64 [ %add2127, %cond.true.2119 ], [ %sub2132, %cond.false.2128 ]
  %div2135 = sdiv i64 %cond2134, 8
  %cmp2136 = icmp slt i64 %add2112, %div2135
  br i1 %cmp2136, label %cond.true.2264, label %lor.lhs.false.2247

cond.false.2138:                                  ; preds = %cond.true.2107
  br i1 false, label %cond.true.2139, label %cond.false.2140

cond.true.2139:                                   ; preds = %cond.false.2138
  br i1 false, label %cond.true.2264, label %lor.lhs.false.2247

cond.false.2140:                                  ; preds = %cond.false.2138
  %364 = load i64, i64* %alterslen, align 8
  %add2141 = add nsw i64 %364, 2
  %add2142 = add nsw i64 0, %add2141
  %mul2143 = mul nsw i64 0, %add2142
  %sub2144 = sub nsw i64 %mul2143, 1
  %cmp2145 = icmp slt i64 %sub2144, 0
  br i1 %cmp2145, label %cond.true.2147, label %cond.false.2166

cond.true.2147:                                   ; preds = %cond.false.2140
  %365 = load i64, i64* %alterslen, align 8
  %add2148 = add nsw i64 %365, 2
  %add2149 = add nsw i64 0, %add2148
  %mul2150 = mul nsw i64 0, %add2149
  %add2151 = add nsw i64 %mul2150, 0
  %neg2152 = xor i64 %add2151, -1
  %cmp2153 = icmp eq i64 %neg2152, -1
  %conv2154 = zext i1 %cmp2153 to i32
  %sub2155 = sub nsw i32 0, %conv2154
  %conv2156 = sext i32 %sub2155 to i64
  %366 = load i64, i64* %alterslen, align 8
  %add2157 = add nsw i64 %366, 2
  %add2158 = add nsw i64 0, %add2157
  %mul2159 = mul nsw i64 0, %add2158
  %add2160 = add nsw i64 %mul2159, 1
  %shl2161 = shl i64 %add2160, 62
  %sub2162 = sub nsw i64 %shl2161, 1
  %mul2163 = mul nsw i64 %sub2162, 2
  %add2164 = add nsw i64 %mul2163, 1
  %sub2165 = sub nsw i64 %conv2156, %add2164
  br label %cond.end.2171

cond.false.2166:                                  ; preds = %cond.false.2140
  %367 = load i64, i64* %alterslen, align 8
  %add2167 = add nsw i64 %367, 2
  %add2168 = add nsw i64 0, %add2167
  %mul2169 = mul nsw i64 0, %add2168
  %add2170 = add nsw i64 %mul2169, 0
  br label %cond.end.2171

cond.end.2171:                                    ; preds = %cond.false.2166, %cond.true.2147
  %cond2172 = phi i64 [ %sub2165, %cond.true.2147 ], [ %add2170, %cond.false.2166 ]
  %div2173 = sdiv i64 %cond2172, 8
  %368 = load i64, i64* %alterslen, align 8
  %add2174 = add nsw i64 %368, 2
  %cmp2175 = icmp slt i64 %div2173, %add2174
  br i1 %cmp2175, label %cond.true.2264, label %lor.lhs.false.2247

cond.false.2177:                                  ; preds = %lor.lhs.false.2106
  br i1 false, label %cond.true.2178, label %cond.false.2179

cond.true.2178:                                   ; preds = %cond.false.2177
  br i1 false, label %cond.true.2264, label %lor.lhs.false.2247

cond.false.2179:                                  ; preds = %cond.false.2177
  %369 = load i64, i64* %alterslen, align 8
  %add2180 = add nsw i64 %369, 2
  %cmp2181 = icmp slt i64 %add2180, 0
  br i1 %cmp2181, label %cond.true.2183, label %cond.false.2220

cond.true.2183:                                   ; preds = %cond.false.2179
  %370 = load i64, i64* %alterslen, align 8
  %add2184 = add nsw i64 %370, 2
  %371 = load i64, i64* %alterslen, align 8
  %add2185 = add nsw i64 %371, 2
  %add2186 = add nsw i64 0, %add2185
  %mul2187 = mul nsw i64 0, %add2186
  %sub2188 = sub nsw i64 %mul2187, 1
  %cmp2189 = icmp slt i64 %sub2188, 0
  br i1 %cmp2189, label %cond.true.2191, label %cond.false.2210

cond.true.2191:                                   ; preds = %cond.true.2183
  %372 = load i64, i64* %alterslen, align 8
  %add2192 = add nsw i64 %372, 2
  %add2193 = add nsw i64 0, %add2192
  %mul2194 = mul nsw i64 0, %add2193
  %add2195 = add nsw i64 %mul2194, 0
  %neg2196 = xor i64 %add2195, -1
  %cmp2197 = icmp eq i64 %neg2196, -1
  %conv2198 = zext i1 %cmp2197 to i32
  %sub2199 = sub nsw i32 0, %conv2198
  %conv2200 = sext i32 %sub2199 to i64
  %373 = load i64, i64* %alterslen, align 8
  %add2201 = add nsw i64 %373, 2
  %add2202 = add nsw i64 0, %add2201
  %mul2203 = mul nsw i64 0, %add2202
  %add2204 = add nsw i64 %mul2203, 1
  %shl2205 = shl i64 %add2204, 62
  %sub2206 = sub nsw i64 %shl2205, 1
  %mul2207 = mul nsw i64 %sub2206, 2
  %add2208 = add nsw i64 %mul2207, 1
  %sub2209 = sub nsw i64 %conv2200, %add2208
  br label %cond.end.2215

cond.false.2210:                                  ; preds = %cond.true.2183
  %374 = load i64, i64* %alterslen, align 8
  %add2211 = add nsw i64 %374, 2
  %add2212 = add nsw i64 0, %add2211
  %mul2213 = mul nsw i64 0, %add2212
  %add2214 = add nsw i64 %mul2213, 0
  br label %cond.end.2215

cond.end.2215:                                    ; preds = %cond.false.2210, %cond.true.2191
  %cond2216 = phi i64 [ %sub2209, %cond.true.2191 ], [ %add2214, %cond.false.2210 ]
  %div2217 = sdiv i64 %cond2216, 8
  %cmp2218 = icmp slt i64 %add2184, %div2217
  br i1 %cmp2218, label %cond.true.2264, label %lor.lhs.false.2247

cond.false.2220:                                  ; preds = %cond.false.2179
  %375 = load i64, i64* %alterslen, align 8
  %add2221 = add nsw i64 %375, 2
  %add2222 = add nsw i64 0, %add2221
  %mul2223 = mul nsw i64 0, %add2222
  %sub2224 = sub nsw i64 %mul2223, 1
  %cmp2225 = icmp slt i64 %sub2224, 0
  br i1 %cmp2225, label %cond.true.2227, label %cond.false.2236

cond.true.2227:                                   ; preds = %cond.false.2220
  %376 = load i64, i64* %alterslen, align 8
  %add2228 = add nsw i64 %376, 2
  %add2229 = add nsw i64 0, %add2228
  %mul2230 = mul nsw i64 0, %add2229
  %add2231 = add nsw i64 %mul2230, 1
  %shl2232 = shl i64 %add2231, 62
  %sub2233 = sub nsw i64 %shl2232, 1
  %mul2234 = mul nsw i64 %sub2233, 2
  %add2235 = add nsw i64 %mul2234, 1
  br label %cond.end.2241

cond.false.2236:                                  ; preds = %cond.false.2220
  %377 = load i64, i64* %alterslen, align 8
  %add2237 = add nsw i64 %377, 2
  %add2238 = add nsw i64 0, %add2237
  %mul2239 = mul nsw i64 0, %add2238
  %sub2240 = sub nsw i64 %mul2239, 1
  br label %cond.end.2241

cond.end.2241:                                    ; preds = %cond.false.2236, %cond.true.2227
  %cond2242 = phi i64 [ %add2235, %cond.true.2227 ], [ %sub2240, %cond.false.2236 ]
  %div2243 = sdiv i64 %cond2242, 8
  %378 = load i64, i64* %alterslen, align 8
  %add2244 = add nsw i64 %378, 2
  %cmp2245 = icmp slt i64 %div2243, %add2244
  br i1 %cmp2245, label %cond.true.2264, label %lor.lhs.false.2247

lor.lhs.false.2247:                               ; preds = %cond.end.2241, %cond.end.2215, %cond.true.2178, %cond.end.2171, %cond.true.2139, %cond.end.2133
  %379 = load i64, i64* %alterslen, align 8
  %add2248 = add nsw i64 %379, 2
  %mul2249 = mul nsw i64 %add2248, 8
  %mul2250 = mul nsw i64 0, %mul2249
  %sub2251 = sub nsw i64 %mul2250, 1
  %cmp2252 = icmp slt i64 %sub2251, 0
  br i1 %cmp2252, label %land.lhs.true.2254, label %lor.lhs.false.2259

land.lhs.true.2254:                               ; preds = %lor.lhs.false.2247
  %380 = load i64, i64* %alterslen, align 8
  %add2255 = add nsw i64 %380, 2
  %mul2256 = mul nsw i64 %add2255, 8
  %cmp2257 = icmp slt i64 %mul2256, -9223372036854775808
  br i1 %cmp2257, label %cond.true.2264, label %lor.lhs.false.2259

lor.lhs.false.2259:                               ; preds = %land.lhs.true.2254, %lor.lhs.false.2247
  %381 = load i64, i64* %alterslen, align 8
  %add2260 = add nsw i64 %381, 2
  %mul2261 = mul nsw i64 %add2260, 8
  %cmp2262 = icmp slt i64 9223372036854775807, %mul2261
  br i1 %cmp2262, label %cond.true.2264, label %cond.false.2279

cond.true.2264:                                   ; preds = %lor.lhs.false.2259, %land.lhs.true.2254, %cond.end.2241, %cond.end.2215, %cond.true.2178, %cond.end.2171, %cond.true.2139, %cond.end.2133, %land.lhs.true.2102
  %382 = load i64, i64* %alterslen, align 8
  %add2265 = add nsw i64 %382, 2
  %mul2266 = mul i64 %add2265, 8
  %cmp2267 = icmp ule i64 %mul2266, 9223372036854775807
  br i1 %cmp2267, label %cond.true.2269, label %cond.false.2272

cond.true.2269:                                   ; preds = %cond.true.2264
  %383 = load i64, i64* %alterslen, align 8
  %add2270 = add nsw i64 %383, 2
  %mul2271 = mul i64 %add2270, 8
  br label %cond.end.2277

cond.false.2272:                                  ; preds = %cond.true.2264
  %384 = load i64, i64* %alterslen, align 8
  %add2273 = add nsw i64 %384, 2
  %mul2274 = mul i64 %add2273, 8
  %sub2275 = sub i64 %mul2274, -9223372036854775808
  %add2276 = add nsw i64 %sub2275, -9223372036854775808
  br label %cond.end.2277

cond.end.2277:                                    ; preds = %cond.false.2272, %cond.true.2269
  %cond2278 = phi i64 [ %mul2271, %cond.true.2269 ], [ %add2276, %cond.false.2272 ]
  store i64 %cond2278, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.2279:                                  ; preds = %lor.lhs.false.2259
  %385 = load i64, i64* %alterslen, align 8
  %add2280 = add nsw i64 %385, 2
  %mul2281 = mul i64 %add2280, 8
  %cmp2282 = icmp ule i64 %mul2281, 9223372036854775807
  br i1 %cmp2282, label %cond.true.2284, label %cond.false.2287

cond.true.2284:                                   ; preds = %cond.false.2279
  %386 = load i64, i64* %alterslen, align 8
  %add2285 = add nsw i64 %386, 2
  %mul2286 = mul i64 %add2285, 8
  br label %cond.end.2292

cond.false.2287:                                  ; preds = %cond.false.2279
  %387 = load i64, i64* %alterslen, align 8
  %add2288 = add nsw i64 %387, 2
  %mul2289 = mul i64 %add2288, 8
  %sub2290 = sub i64 %mul2289, -9223372036854775808
  %add2291 = add nsw i64 %sub2290, -9223372036854775808
  br label %cond.end.2292

cond.end.2292:                                    ; preds = %cond.false.2287, %cond.true.2284
  %cond2293 = phi i64 [ %mul2286, %cond.true.2284 ], [ %add2291, %cond.false.2287 ]
  store i64 %cond2293, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.2294:                                  ; preds = %cond.false.1838
  br i1 false, label %cond.true.2295, label %cond.false.2522

cond.true.2295:                                   ; preds = %cond.false.2294
  %388 = load i64, i64* %alterslen, align 8
  %add2296 = add nsw i64 %388, 2
  %add2297 = add nsw i64 0, %add2296
  %mul2298 = mul nsw i64 0, %add2297
  %sub2299 = sub nsw i64 %mul2298, 1
  %cmp2300 = icmp slt i64 %sub2299, 0
  br i1 %cmp2300, label %cond.true.2302, label %cond.false.2321

cond.true.2302:                                   ; preds = %cond.true.2295
  %389 = load i64, i64* %alterslen, align 8
  %add2303 = add nsw i64 %389, 2
  %add2304 = add nsw i64 0, %add2303
  %mul2305 = mul nsw i64 0, %add2304
  %add2306 = add nsw i64 %mul2305, 0
  %neg2307 = xor i64 %add2306, -1
  %cmp2308 = icmp eq i64 %neg2307, -1
  %conv2309 = zext i1 %cmp2308 to i32
  %sub2310 = sub nsw i32 0, %conv2309
  %conv2311 = sext i32 %sub2310 to i64
  %390 = load i64, i64* %alterslen, align 8
  %add2312 = add nsw i64 %390, 2
  %add2313 = add nsw i64 0, %add2312
  %mul2314 = mul nsw i64 0, %add2313
  %add2315 = add nsw i64 %mul2314, 1
  %shl2316 = shl i64 %add2315, 62
  %sub2317 = sub nsw i64 %shl2316, 1
  %mul2318 = mul nsw i64 %sub2317, 2
  %add2319 = add nsw i64 %mul2318, 1
  %sub2320 = sub nsw i64 %conv2311, %add2319
  br label %cond.end.2326

cond.false.2321:                                  ; preds = %cond.true.2295
  %391 = load i64, i64* %alterslen, align 8
  %add2322 = add nsw i64 %391, 2
  %add2323 = add nsw i64 0, %add2322
  %mul2324 = mul nsw i64 0, %add2323
  %add2325 = add nsw i64 %mul2324, 0
  br label %cond.end.2326

cond.end.2326:                                    ; preds = %cond.false.2321, %cond.true.2302
  %cond2327 = phi i64 [ %sub2320, %cond.true.2302 ], [ %add2325, %cond.false.2321 ]
  %cmp2328 = icmp eq i64 %cond2327, 0
  br i1 %cmp2328, label %land.lhs.true.2330, label %lor.lhs.false.2334

land.lhs.true.2330:                               ; preds = %cond.end.2326
  %392 = load i64, i64* %alterslen, align 8
  %add2331 = add nsw i64 %392, 2
  %cmp2332 = icmp slt i64 %add2331, 0
  br i1 %cmp2332, label %cond.true.2492, label %lor.lhs.false.2334

lor.lhs.false.2334:                               ; preds = %land.lhs.true.2330, %cond.end.2326
  br i1 false, label %cond.true.2335, label %cond.false.2405

cond.true.2335:                                   ; preds = %lor.lhs.false.2334
  %393 = load i64, i64* %alterslen, align 8
  %add2336 = add nsw i64 %393, 2
  %cmp2337 = icmp slt i64 %add2336, 0
  br i1 %cmp2337, label %cond.true.2339, label %cond.false.2366

cond.true.2339:                                   ; preds = %cond.true.2335
  %394 = load i64, i64* %alterslen, align 8
  %add2340 = add nsw i64 %394, 2
  %395 = load i64, i64* %alterslen, align 8
  %add2341 = add nsw i64 %395, 2
  %add2342 = add nsw i64 0, %add2341
  %mul2343 = mul nsw i64 0, %add2342
  %sub2344 = sub nsw i64 %mul2343, 1
  %cmp2345 = icmp slt i64 %sub2344, 0
  br i1 %cmp2345, label %cond.true.2347, label %cond.false.2356

cond.true.2347:                                   ; preds = %cond.true.2339
  %396 = load i64, i64* %alterslen, align 8
  %add2348 = add nsw i64 %396, 2
  %add2349 = add nsw i64 0, %add2348
  %mul2350 = mul nsw i64 0, %add2349
  %add2351 = add nsw i64 %mul2350, 1
  %shl2352 = shl i64 %add2351, 62
  %sub2353 = sub nsw i64 %shl2352, 1
  %mul2354 = mul nsw i64 %sub2353, 2
  %add2355 = add nsw i64 %mul2354, 1
  br label %cond.end.2361

cond.false.2356:                                  ; preds = %cond.true.2339
  %397 = load i64, i64* %alterslen, align 8
  %add2357 = add nsw i64 %397, 2
  %add2358 = add nsw i64 0, %add2357
  %mul2359 = mul nsw i64 0, %add2358
  %sub2360 = sub nsw i64 %mul2359, 1
  br label %cond.end.2361

cond.end.2361:                                    ; preds = %cond.false.2356, %cond.true.2347
  %cond2362 = phi i64 [ %add2355, %cond.true.2347 ], [ %sub2360, %cond.false.2356 ]
  %div2363 = sdiv i64 %cond2362, 8
  %cmp2364 = icmp slt i64 %add2340, %div2363
  br i1 %cmp2364, label %cond.true.2492, label %lor.lhs.false.2475

cond.false.2366:                                  ; preds = %cond.true.2335
  br i1 false, label %cond.true.2367, label %cond.false.2368

cond.true.2367:                                   ; preds = %cond.false.2366
  br i1 false, label %cond.true.2492, label %lor.lhs.false.2475

cond.false.2368:                                  ; preds = %cond.false.2366
  %398 = load i64, i64* %alterslen, align 8
  %add2369 = add nsw i64 %398, 2
  %add2370 = add nsw i64 0, %add2369
  %mul2371 = mul nsw i64 0, %add2370
  %sub2372 = sub nsw i64 %mul2371, 1
  %cmp2373 = icmp slt i64 %sub2372, 0
  br i1 %cmp2373, label %cond.true.2375, label %cond.false.2394

cond.true.2375:                                   ; preds = %cond.false.2368
  %399 = load i64, i64* %alterslen, align 8
  %add2376 = add nsw i64 %399, 2
  %add2377 = add nsw i64 0, %add2376
  %mul2378 = mul nsw i64 0, %add2377
  %add2379 = add nsw i64 %mul2378, 0
  %neg2380 = xor i64 %add2379, -1
  %cmp2381 = icmp eq i64 %neg2380, -1
  %conv2382 = zext i1 %cmp2381 to i32
  %sub2383 = sub nsw i32 0, %conv2382
  %conv2384 = sext i32 %sub2383 to i64
  %400 = load i64, i64* %alterslen, align 8
  %add2385 = add nsw i64 %400, 2
  %add2386 = add nsw i64 0, %add2385
  %mul2387 = mul nsw i64 0, %add2386
  %add2388 = add nsw i64 %mul2387, 1
  %shl2389 = shl i64 %add2388, 62
  %sub2390 = sub nsw i64 %shl2389, 1
  %mul2391 = mul nsw i64 %sub2390, 2
  %add2392 = add nsw i64 %mul2391, 1
  %sub2393 = sub nsw i64 %conv2384, %add2392
  br label %cond.end.2399

cond.false.2394:                                  ; preds = %cond.false.2368
  %401 = load i64, i64* %alterslen, align 8
  %add2395 = add nsw i64 %401, 2
  %add2396 = add nsw i64 0, %add2395
  %mul2397 = mul nsw i64 0, %add2396
  %add2398 = add nsw i64 %mul2397, 0
  br label %cond.end.2399

cond.end.2399:                                    ; preds = %cond.false.2394, %cond.true.2375
  %cond2400 = phi i64 [ %sub2393, %cond.true.2375 ], [ %add2398, %cond.false.2394 ]
  %div2401 = sdiv i64 %cond2400, 8
  %402 = load i64, i64* %alterslen, align 8
  %add2402 = add nsw i64 %402, 2
  %cmp2403 = icmp slt i64 %div2401, %add2402
  br i1 %cmp2403, label %cond.true.2492, label %lor.lhs.false.2475

cond.false.2405:                                  ; preds = %lor.lhs.false.2334
  br i1 false, label %cond.true.2406, label %cond.false.2407

cond.true.2406:                                   ; preds = %cond.false.2405
  br i1 false, label %cond.true.2492, label %lor.lhs.false.2475

cond.false.2407:                                  ; preds = %cond.false.2405
  %403 = load i64, i64* %alterslen, align 8
  %add2408 = add nsw i64 %403, 2
  %cmp2409 = icmp slt i64 %add2408, 0
  br i1 %cmp2409, label %cond.true.2411, label %cond.false.2448

cond.true.2411:                                   ; preds = %cond.false.2407
  %404 = load i64, i64* %alterslen, align 8
  %add2412 = add nsw i64 %404, 2
  %405 = load i64, i64* %alterslen, align 8
  %add2413 = add nsw i64 %405, 2
  %add2414 = add nsw i64 0, %add2413
  %mul2415 = mul nsw i64 0, %add2414
  %sub2416 = sub nsw i64 %mul2415, 1
  %cmp2417 = icmp slt i64 %sub2416, 0
  br i1 %cmp2417, label %cond.true.2419, label %cond.false.2438

cond.true.2419:                                   ; preds = %cond.true.2411
  %406 = load i64, i64* %alterslen, align 8
  %add2420 = add nsw i64 %406, 2
  %add2421 = add nsw i64 0, %add2420
  %mul2422 = mul nsw i64 0, %add2421
  %add2423 = add nsw i64 %mul2422, 0
  %neg2424 = xor i64 %add2423, -1
  %cmp2425 = icmp eq i64 %neg2424, -1
  %conv2426 = zext i1 %cmp2425 to i32
  %sub2427 = sub nsw i32 0, %conv2426
  %conv2428 = sext i32 %sub2427 to i64
  %407 = load i64, i64* %alterslen, align 8
  %add2429 = add nsw i64 %407, 2
  %add2430 = add nsw i64 0, %add2429
  %mul2431 = mul nsw i64 0, %add2430
  %add2432 = add nsw i64 %mul2431, 1
  %shl2433 = shl i64 %add2432, 62
  %sub2434 = sub nsw i64 %shl2433, 1
  %mul2435 = mul nsw i64 %sub2434, 2
  %add2436 = add nsw i64 %mul2435, 1
  %sub2437 = sub nsw i64 %conv2428, %add2436
  br label %cond.end.2443

cond.false.2438:                                  ; preds = %cond.true.2411
  %408 = load i64, i64* %alterslen, align 8
  %add2439 = add nsw i64 %408, 2
  %add2440 = add nsw i64 0, %add2439
  %mul2441 = mul nsw i64 0, %add2440
  %add2442 = add nsw i64 %mul2441, 0
  br label %cond.end.2443

cond.end.2443:                                    ; preds = %cond.false.2438, %cond.true.2419
  %cond2444 = phi i64 [ %sub2437, %cond.true.2419 ], [ %add2442, %cond.false.2438 ]
  %div2445 = sdiv i64 %cond2444, 8
  %cmp2446 = icmp slt i64 %add2412, %div2445
  br i1 %cmp2446, label %cond.true.2492, label %lor.lhs.false.2475

cond.false.2448:                                  ; preds = %cond.false.2407
  %409 = load i64, i64* %alterslen, align 8
  %add2449 = add nsw i64 %409, 2
  %add2450 = add nsw i64 0, %add2449
  %mul2451 = mul nsw i64 0, %add2450
  %sub2452 = sub nsw i64 %mul2451, 1
  %cmp2453 = icmp slt i64 %sub2452, 0
  br i1 %cmp2453, label %cond.true.2455, label %cond.false.2464

cond.true.2455:                                   ; preds = %cond.false.2448
  %410 = load i64, i64* %alterslen, align 8
  %add2456 = add nsw i64 %410, 2
  %add2457 = add nsw i64 0, %add2456
  %mul2458 = mul nsw i64 0, %add2457
  %add2459 = add nsw i64 %mul2458, 1
  %shl2460 = shl i64 %add2459, 62
  %sub2461 = sub nsw i64 %shl2460, 1
  %mul2462 = mul nsw i64 %sub2461, 2
  %add2463 = add nsw i64 %mul2462, 1
  br label %cond.end.2469

cond.false.2464:                                  ; preds = %cond.false.2448
  %411 = load i64, i64* %alterslen, align 8
  %add2465 = add nsw i64 %411, 2
  %add2466 = add nsw i64 0, %add2465
  %mul2467 = mul nsw i64 0, %add2466
  %sub2468 = sub nsw i64 %mul2467, 1
  br label %cond.end.2469

cond.end.2469:                                    ; preds = %cond.false.2464, %cond.true.2455
  %cond2470 = phi i64 [ %add2463, %cond.true.2455 ], [ %sub2468, %cond.false.2464 ]
  %div2471 = sdiv i64 %cond2470, 8
  %412 = load i64, i64* %alterslen, align 8
  %add2472 = add nsw i64 %412, 2
  %cmp2473 = icmp slt i64 %div2471, %add2472
  br i1 %cmp2473, label %cond.true.2492, label %lor.lhs.false.2475

lor.lhs.false.2475:                               ; preds = %cond.end.2469, %cond.end.2443, %cond.true.2406, %cond.end.2399, %cond.true.2367, %cond.end.2361
  %413 = load i64, i64* %alterslen, align 8
  %add2476 = add nsw i64 %413, 2
  %mul2477 = mul nsw i64 %add2476, 8
  %mul2478 = mul nsw i64 0, %mul2477
  %sub2479 = sub nsw i64 %mul2478, 1
  %cmp2480 = icmp slt i64 %sub2479, 0
  br i1 %cmp2480, label %land.lhs.true.2482, label %lor.lhs.false.2487

land.lhs.true.2482:                               ; preds = %lor.lhs.false.2475
  %414 = load i64, i64* %alterslen, align 8
  %add2483 = add nsw i64 %414, 2
  %mul2484 = mul nsw i64 %add2483, 8
  %cmp2485 = icmp slt i64 %mul2484, -9223372036854775808
  br i1 %cmp2485, label %cond.true.2492, label %lor.lhs.false.2487

lor.lhs.false.2487:                               ; preds = %land.lhs.true.2482, %lor.lhs.false.2475
  %415 = load i64, i64* %alterslen, align 8
  %add2488 = add nsw i64 %415, 2
  %mul2489 = mul nsw i64 %add2488, 8
  %cmp2490 = icmp slt i64 9223372036854775807, %mul2489
  br i1 %cmp2490, label %cond.true.2492, label %cond.false.2507

cond.true.2492:                                   ; preds = %lor.lhs.false.2487, %land.lhs.true.2482, %cond.end.2469, %cond.end.2443, %cond.true.2406, %cond.end.2399, %cond.true.2367, %cond.end.2361, %land.lhs.true.2330
  %416 = load i64, i64* %alterslen, align 8
  %add2493 = add nsw i64 %416, 2
  %mul2494 = mul i64 %add2493, 8
  %cmp2495 = icmp ule i64 %mul2494, 9223372036854775807
  br i1 %cmp2495, label %cond.true.2497, label %cond.false.2500

cond.true.2497:                                   ; preds = %cond.true.2492
  %417 = load i64, i64* %alterslen, align 8
  %add2498 = add nsw i64 %417, 2
  %mul2499 = mul i64 %add2498, 8
  br label %cond.end.2505

cond.false.2500:                                  ; preds = %cond.true.2492
  %418 = load i64, i64* %alterslen, align 8
  %add2501 = add nsw i64 %418, 2
  %mul2502 = mul i64 %add2501, 8
  %sub2503 = sub i64 %mul2502, -9223372036854775808
  %add2504 = add nsw i64 %sub2503, -9223372036854775808
  br label %cond.end.2505

cond.end.2505:                                    ; preds = %cond.false.2500, %cond.true.2497
  %cond2506 = phi i64 [ %mul2499, %cond.true.2497 ], [ %add2504, %cond.false.2500 ]
  store i64 %cond2506, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.2507:                                  ; preds = %lor.lhs.false.2487
  %419 = load i64, i64* %alterslen, align 8
  %add2508 = add nsw i64 %419, 2
  %mul2509 = mul i64 %add2508, 8
  %cmp2510 = icmp ule i64 %mul2509, 9223372036854775807
  br i1 %cmp2510, label %cond.true.2512, label %cond.false.2515

cond.true.2512:                                   ; preds = %cond.false.2507
  %420 = load i64, i64* %alterslen, align 8
  %add2513 = add nsw i64 %420, 2
  %mul2514 = mul i64 %add2513, 8
  br label %cond.end.2520

cond.false.2515:                                  ; preds = %cond.false.2507
  %421 = load i64, i64* %alterslen, align 8
  %add2516 = add nsw i64 %421, 2
  %mul2517 = mul i64 %add2516, 8
  %sub2518 = sub i64 %mul2517, -9223372036854775808
  %add2519 = add nsw i64 %sub2518, -9223372036854775808
  br label %cond.end.2520

cond.end.2520:                                    ; preds = %cond.false.2515, %cond.true.2512
  %cond2521 = phi i64 [ %mul2514, %cond.true.2512 ], [ %add2519, %cond.false.2515 ]
  store i64 %cond2521, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

cond.false.2522:                                  ; preds = %cond.false.2294
  %422 = load i64, i64* %alterslen, align 8
  %add2523 = add nsw i64 %422, 2
  %add2524 = add nsw i64 0, %add2523
  %mul2525 = mul nsw i64 0, %add2524
  %sub2526 = sub nsw i64 %mul2525, 1
  %cmp2527 = icmp slt i64 %sub2526, 0
  br i1 %cmp2527, label %cond.true.2529, label %cond.false.2548

cond.true.2529:                                   ; preds = %cond.false.2522
  %423 = load i64, i64* %alterslen, align 8
  %add2530 = add nsw i64 %423, 2
  %add2531 = add nsw i64 0, %add2530
  %mul2532 = mul nsw i64 0, %add2531
  %add2533 = add nsw i64 %mul2532, 0
  %neg2534 = xor i64 %add2533, -1
  %cmp2535 = icmp eq i64 %neg2534, -1
  %conv2536 = zext i1 %cmp2535 to i32
  %sub2537 = sub nsw i32 0, %conv2536
  %conv2538 = sext i32 %sub2537 to i64
  %424 = load i64, i64* %alterslen, align 8
  %add2539 = add nsw i64 %424, 2
  %add2540 = add nsw i64 0, %add2539
  %mul2541 = mul nsw i64 0, %add2540
  %add2542 = add nsw i64 %mul2541, 1
  %shl2543 = shl i64 %add2542, 62
  %sub2544 = sub nsw i64 %shl2543, 1
  %mul2545 = mul nsw i64 %sub2544, 2
  %add2546 = add nsw i64 %mul2545, 1
  %sub2547 = sub nsw i64 %conv2538, %add2546
  br label %cond.end.2553

cond.false.2548:                                  ; preds = %cond.false.2522
  %425 = load i64, i64* %alterslen, align 8
  %add2549 = add nsw i64 %425, 2
  %add2550 = add nsw i64 0, %add2549
  %mul2551 = mul nsw i64 0, %add2550
  %add2552 = add nsw i64 %mul2551, 0
  br label %cond.end.2553

cond.end.2553:                                    ; preds = %cond.false.2548, %cond.true.2529
  %cond2554 = phi i64 [ %sub2547, %cond.true.2529 ], [ %add2552, %cond.false.2548 ]
  %cmp2555 = icmp eq i64 %cond2554, 0
  br i1 %cmp2555, label %land.lhs.true.2557, label %lor.lhs.false.2561

land.lhs.true.2557:                               ; preds = %cond.end.2553
  %426 = load i64, i64* %alterslen, align 8
  %add2558 = add nsw i64 %426, 2
  %cmp2559 = icmp slt i64 %add2558, 0
  br i1 %cmp2559, label %cond.true.2719, label %lor.lhs.false.2561

lor.lhs.false.2561:                               ; preds = %land.lhs.true.2557, %cond.end.2553
  br i1 false, label %cond.true.2562, label %cond.false.2632

cond.true.2562:                                   ; preds = %lor.lhs.false.2561
  %427 = load i64, i64* %alterslen, align 8
  %add2563 = add nsw i64 %427, 2
  %cmp2564 = icmp slt i64 %add2563, 0
  br i1 %cmp2564, label %cond.true.2566, label %cond.false.2593

cond.true.2566:                                   ; preds = %cond.true.2562
  %428 = load i64, i64* %alterslen, align 8
  %add2567 = add nsw i64 %428, 2
  %429 = load i64, i64* %alterslen, align 8
  %add2568 = add nsw i64 %429, 2
  %add2569 = add nsw i64 0, %add2568
  %mul2570 = mul nsw i64 0, %add2569
  %sub2571 = sub nsw i64 %mul2570, 1
  %cmp2572 = icmp slt i64 %sub2571, 0
  br i1 %cmp2572, label %cond.true.2574, label %cond.false.2583

cond.true.2574:                                   ; preds = %cond.true.2566
  %430 = load i64, i64* %alterslen, align 8
  %add2575 = add nsw i64 %430, 2
  %add2576 = add nsw i64 0, %add2575
  %mul2577 = mul nsw i64 0, %add2576
  %add2578 = add nsw i64 %mul2577, 1
  %shl2579 = shl i64 %add2578, 62
  %sub2580 = sub nsw i64 %shl2579, 1
  %mul2581 = mul nsw i64 %sub2580, 2
  %add2582 = add nsw i64 %mul2581, 1
  br label %cond.end.2588

cond.false.2583:                                  ; preds = %cond.true.2566
  %431 = load i64, i64* %alterslen, align 8
  %add2584 = add nsw i64 %431, 2
  %add2585 = add nsw i64 0, %add2584
  %mul2586 = mul nsw i64 0, %add2585
  %sub2587 = sub nsw i64 %mul2586, 1
  br label %cond.end.2588

cond.end.2588:                                    ; preds = %cond.false.2583, %cond.true.2574
  %cond2589 = phi i64 [ %add2582, %cond.true.2574 ], [ %sub2587, %cond.false.2583 ]
  %div2590 = sdiv i64 %cond2589, 8
  %cmp2591 = icmp slt i64 %add2567, %div2590
  br i1 %cmp2591, label %cond.true.2719, label %lor.lhs.false.2702

cond.false.2593:                                  ; preds = %cond.true.2562
  br i1 false, label %cond.true.2594, label %cond.false.2595

cond.true.2594:                                   ; preds = %cond.false.2593
  br i1 false, label %cond.true.2719, label %lor.lhs.false.2702

cond.false.2595:                                  ; preds = %cond.false.2593
  %432 = load i64, i64* %alterslen, align 8
  %add2596 = add nsw i64 %432, 2
  %add2597 = add nsw i64 0, %add2596
  %mul2598 = mul nsw i64 0, %add2597
  %sub2599 = sub nsw i64 %mul2598, 1
  %cmp2600 = icmp slt i64 %sub2599, 0
  br i1 %cmp2600, label %cond.true.2602, label %cond.false.2621

cond.true.2602:                                   ; preds = %cond.false.2595
  %433 = load i64, i64* %alterslen, align 8
  %add2603 = add nsw i64 %433, 2
  %add2604 = add nsw i64 0, %add2603
  %mul2605 = mul nsw i64 0, %add2604
  %add2606 = add nsw i64 %mul2605, 0
  %neg2607 = xor i64 %add2606, -1
  %cmp2608 = icmp eq i64 %neg2607, -1
  %conv2609 = zext i1 %cmp2608 to i32
  %sub2610 = sub nsw i32 0, %conv2609
  %conv2611 = sext i32 %sub2610 to i64
  %434 = load i64, i64* %alterslen, align 8
  %add2612 = add nsw i64 %434, 2
  %add2613 = add nsw i64 0, %add2612
  %mul2614 = mul nsw i64 0, %add2613
  %add2615 = add nsw i64 %mul2614, 1
  %shl2616 = shl i64 %add2615, 62
  %sub2617 = sub nsw i64 %shl2616, 1
  %mul2618 = mul nsw i64 %sub2617, 2
  %add2619 = add nsw i64 %mul2618, 1
  %sub2620 = sub nsw i64 %conv2611, %add2619
  br label %cond.end.2626

cond.false.2621:                                  ; preds = %cond.false.2595
  %435 = load i64, i64* %alterslen, align 8
  %add2622 = add nsw i64 %435, 2
  %add2623 = add nsw i64 0, %add2622
  %mul2624 = mul nsw i64 0, %add2623
  %add2625 = add nsw i64 %mul2624, 0
  br label %cond.end.2626

cond.end.2626:                                    ; preds = %cond.false.2621, %cond.true.2602
  %cond2627 = phi i64 [ %sub2620, %cond.true.2602 ], [ %add2625, %cond.false.2621 ]
  %div2628 = sdiv i64 %cond2627, 8
  %436 = load i64, i64* %alterslen, align 8
  %add2629 = add nsw i64 %436, 2
  %cmp2630 = icmp slt i64 %div2628, %add2629
  br i1 %cmp2630, label %cond.true.2719, label %lor.lhs.false.2702

cond.false.2632:                                  ; preds = %lor.lhs.false.2561
  br i1 false, label %cond.true.2633, label %cond.false.2634

cond.true.2633:                                   ; preds = %cond.false.2632
  br i1 false, label %cond.true.2719, label %lor.lhs.false.2702

cond.false.2634:                                  ; preds = %cond.false.2632
  %437 = load i64, i64* %alterslen, align 8
  %add2635 = add nsw i64 %437, 2
  %cmp2636 = icmp slt i64 %add2635, 0
  br i1 %cmp2636, label %cond.true.2638, label %cond.false.2675

cond.true.2638:                                   ; preds = %cond.false.2634
  %438 = load i64, i64* %alterslen, align 8
  %add2639 = add nsw i64 %438, 2
  %439 = load i64, i64* %alterslen, align 8
  %add2640 = add nsw i64 %439, 2
  %add2641 = add nsw i64 0, %add2640
  %mul2642 = mul nsw i64 0, %add2641
  %sub2643 = sub nsw i64 %mul2642, 1
  %cmp2644 = icmp slt i64 %sub2643, 0
  br i1 %cmp2644, label %cond.true.2646, label %cond.false.2665

cond.true.2646:                                   ; preds = %cond.true.2638
  %440 = load i64, i64* %alterslen, align 8
  %add2647 = add nsw i64 %440, 2
  %add2648 = add nsw i64 0, %add2647
  %mul2649 = mul nsw i64 0, %add2648
  %add2650 = add nsw i64 %mul2649, 0
  %neg2651 = xor i64 %add2650, -1
  %cmp2652 = icmp eq i64 %neg2651, -1
  %conv2653 = zext i1 %cmp2652 to i32
  %sub2654 = sub nsw i32 0, %conv2653
  %conv2655 = sext i32 %sub2654 to i64
  %441 = load i64, i64* %alterslen, align 8
  %add2656 = add nsw i64 %441, 2
  %add2657 = add nsw i64 0, %add2656
  %mul2658 = mul nsw i64 0, %add2657
  %add2659 = add nsw i64 %mul2658, 1
  %shl2660 = shl i64 %add2659, 62
  %sub2661 = sub nsw i64 %shl2660, 1
  %mul2662 = mul nsw i64 %sub2661, 2
  %add2663 = add nsw i64 %mul2662, 1
  %sub2664 = sub nsw i64 %conv2655, %add2663
  br label %cond.end.2670

cond.false.2665:                                  ; preds = %cond.true.2638
  %442 = load i64, i64* %alterslen, align 8
  %add2666 = add nsw i64 %442, 2
  %add2667 = add nsw i64 0, %add2666
  %mul2668 = mul nsw i64 0, %add2667
  %add2669 = add nsw i64 %mul2668, 0
  br label %cond.end.2670

cond.end.2670:                                    ; preds = %cond.false.2665, %cond.true.2646
  %cond2671 = phi i64 [ %sub2664, %cond.true.2646 ], [ %add2669, %cond.false.2665 ]
  %div2672 = sdiv i64 %cond2671, 8
  %cmp2673 = icmp slt i64 %add2639, %div2672
  br i1 %cmp2673, label %cond.true.2719, label %lor.lhs.false.2702

cond.false.2675:                                  ; preds = %cond.false.2634
  %443 = load i64, i64* %alterslen, align 8
  %add2676 = add nsw i64 %443, 2
  %add2677 = add nsw i64 0, %add2676
  %mul2678 = mul nsw i64 0, %add2677
  %sub2679 = sub nsw i64 %mul2678, 1
  %cmp2680 = icmp slt i64 %sub2679, 0
  br i1 %cmp2680, label %cond.true.2682, label %cond.false.2691

cond.true.2682:                                   ; preds = %cond.false.2675
  %444 = load i64, i64* %alterslen, align 8
  %add2683 = add nsw i64 %444, 2
  %add2684 = add nsw i64 0, %add2683
  %mul2685 = mul nsw i64 0, %add2684
  %add2686 = add nsw i64 %mul2685, 1
  %shl2687 = shl i64 %add2686, 62
  %sub2688 = sub nsw i64 %shl2687, 1
  %mul2689 = mul nsw i64 %sub2688, 2
  %add2690 = add nsw i64 %mul2689, 1
  br label %cond.end.2696

cond.false.2691:                                  ; preds = %cond.false.2675
  %445 = load i64, i64* %alterslen, align 8
  %add2692 = add nsw i64 %445, 2
  %add2693 = add nsw i64 0, %add2692
  %mul2694 = mul nsw i64 0, %add2693
  %sub2695 = sub nsw i64 %mul2694, 1
  br label %cond.end.2696

cond.end.2696:                                    ; preds = %cond.false.2691, %cond.true.2682
  %cond2697 = phi i64 [ %add2690, %cond.true.2682 ], [ %sub2695, %cond.false.2691 ]
  %div2698 = sdiv i64 %cond2697, 8
  %446 = load i64, i64* %alterslen, align 8
  %add2699 = add nsw i64 %446, 2
  %cmp2700 = icmp slt i64 %div2698, %add2699
  br i1 %cmp2700, label %cond.true.2719, label %lor.lhs.false.2702

lor.lhs.false.2702:                               ; preds = %cond.end.2696, %cond.end.2670, %cond.true.2633, %cond.end.2626, %cond.true.2594, %cond.end.2588
  %447 = load i64, i64* %alterslen, align 8
  %add2703 = add nsw i64 %447, 2
  %mul2704 = mul nsw i64 %add2703, 8
  %mul2705 = mul nsw i64 0, %mul2704
  %sub2706 = sub nsw i64 %mul2705, 1
  %cmp2707 = icmp slt i64 %sub2706, 0
  br i1 %cmp2707, label %land.lhs.true.2709, label %lor.lhs.false.2714

land.lhs.true.2709:                               ; preds = %lor.lhs.false.2702
  %448 = load i64, i64* %alterslen, align 8
  %add2710 = add nsw i64 %448, 2
  %mul2711 = mul nsw i64 %add2710, 8
  %cmp2712 = icmp slt i64 %mul2711, -9223372036854775808
  br i1 %cmp2712, label %cond.true.2719, label %lor.lhs.false.2714

lor.lhs.false.2714:                               ; preds = %land.lhs.true.2709, %lor.lhs.false.2702
  %449 = load i64, i64* %alterslen, align 8
  %add2715 = add nsw i64 %449, 2
  %mul2716 = mul nsw i64 %add2715, 8
  %cmp2717 = icmp slt i64 9223372036854775807, %mul2716
  br i1 %cmp2717, label %cond.true.2719, label %cond.false.2734

cond.true.2719:                                   ; preds = %lor.lhs.false.2714, %land.lhs.true.2709, %cond.end.2696, %cond.end.2670, %cond.true.2633, %cond.end.2626, %cond.true.2594, %cond.end.2588, %land.lhs.true.2557
  %450 = load i64, i64* %alterslen, align 8
  %add2720 = add nsw i64 %450, 2
  %mul2721 = mul i64 %add2720, 8
  %cmp2722 = icmp ule i64 %mul2721, 9223372036854775807
  br i1 %cmp2722, label %cond.true.2724, label %cond.false.2727

cond.true.2724:                                   ; preds = %cond.true.2719
  %451 = load i64, i64* %alterslen, align 8
  %add2725 = add nsw i64 %451, 2
  %mul2726 = mul i64 %add2725, 8
  br label %cond.end.2732

cond.false.2727:                                  ; preds = %cond.true.2719
  %452 = load i64, i64* %alterslen, align 8
  %add2728 = add nsw i64 %452, 2
  %mul2729 = mul i64 %add2728, 8
  %sub2730 = sub i64 %mul2729, -9223372036854775808
  %add2731 = add nsw i64 %sub2730, -9223372036854775808
  br label %cond.end.2732

cond.end.2732:                                    ; preds = %cond.false.2727, %cond.true.2724
  %cond2733 = phi i64 [ %mul2726, %cond.true.2724 ], [ %add2731, %cond.false.2727 ]
  store i64 %cond2733, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2752, label %lor.lhs.false.2749

cond.false.2734:                                  ; preds = %lor.lhs.false.2714
  %453 = load i64, i64* %alterslen, align 8
  %add2735 = add nsw i64 %453, 2
  %mul2736 = mul i64 %add2735, 8
  %cmp2737 = icmp ule i64 %mul2736, 9223372036854775807
  br i1 %cmp2737, label %cond.true.2739, label %cond.false.2742

cond.true.2739:                                   ; preds = %cond.false.2734
  %454 = load i64, i64* %alterslen, align 8
  %add2740 = add nsw i64 %454, 2
  %mul2741 = mul i64 %add2740, 8
  br label %cond.end.2747

cond.false.2742:                                  ; preds = %cond.false.2734
  %455 = load i64, i64* %alterslen, align 8
  %add2743 = add nsw i64 %455, 2
  %mul2744 = mul i64 %add2743, 8
  %sub2745 = sub i64 %mul2744, -9223372036854775808
  %add2746 = add nsw i64 %sub2745, -9223372036854775808
  br label %cond.end.2747

cond.end.2747:                                    ; preds = %cond.false.2742, %cond.true.2739
  %cond2748 = phi i64 [ %mul2741, %cond.true.2739 ], [ %add2746, %cond.false.2742 ]
  store i64 %cond2748, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2752, label %lor.lhs.false.2749

lor.lhs.false.2749:                               ; preds = %cond.end.2747, %cond.end.2732, %cond.end.2520, %cond.end.2505, %cond.end.2292, %cond.end.2277, %cond.end.2065, %cond.end.2050, %cond.end.1835, %cond.end.1816, %cond.end.1600, %cond.end.1581, %cond.end.1338, %cond.end.1312, %cond.end.1089, %cond.end.1063, %cond.end.785, %cond.end.759, %cond.end.536, %cond.end.510
  %456 = load i64, i64* %alloca_nbytes, align 8
  %cmp2750 = icmp ult i64 -1, %456
  br i1 %cmp2750, label %if.then.2752, label %if.else.2753

if.then.2752:                                     ; preds = %lor.lhs.false.2749, %cond.end.2747, %cond.end.2732, %cond.end.2520, %cond.end.2505, %cond.end.2292, %cond.end.2277, %cond.end.2065, %cond.end.2050, %cond.end.1835, %cond.end.1816, %cond.end.1600, %cond.end.1581, %cond.end.1338, %cond.end.1312, %cond.end.1089, %cond.end.1063, %cond.end.785, %cond.end.759, %cond.end.536, %cond.end.510
  call void @memory_full(i64 -1) #7
  unreachable

if.else.2753:                                     ; preds = %lor.lhs.false.2749
  %457 = load i64, i64* %alloca_nbytes, align 8
  %458 = load i64, i64* %sa_avail, align 8
  %cmp2754 = icmp sle i64 %457, %458
  br i1 %cmp2754, label %if.then.2756, label %if.else.2758

if.then.2756:                                     ; preds = %if.else.2753
  %459 = load i64, i64* %alloca_nbytes, align 8
  %460 = load i64, i64* %sa_avail, align 8
  %sub2757 = sub nsw i64 %460, %459
  store i64 %sub2757, i64* %sa_avail, align 8
  %461 = load i64, i64* %alloca_nbytes, align 8
  %462 = alloca i8, i64 %461
  %463 = bitcast i8* %462 to i64*
  store i64* %463, i64** %family, align 8
  br label %if.end.2762

if.else.2758:                                     ; preds = %if.else.2753
  %464 = load i64, i64* %alloca_nbytes, align 8
  %call2759 = call noalias i8* @xmalloc(i64 %464)
  %465 = bitcast i8* %call2759 to i64*
  store i64* %465, i64** %family, align 8
  %466 = load i64*, i64** %family, align 8
  %467 = load i64, i64* %alterslen, align 8
  %add2760 = add nsw i64 %467, 2
  %call2761 = call i64 @make_save_memory(i64* %466, i64 %add2760)
  store i64 %call2761, i64* %arg_, align 8
  store i8 1, i8* %sa_must_free, align 1
  %468 = load i64, i64* %arg_, align 8
  call void @record_unwind_protect(void (i64)* @free_save_value, i64 %468)
  br label %if.end.2762

if.end.2762:                                      ; preds = %if.else.2758, %if.then.2756
  br label %if.end.2763

if.end.2763:                                      ; preds = %if.end.2762
  br label %do.end

do.end:                                           ; preds = %if.end.2763
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %469 = load i64, i64* %alters, align 8
  %and2764 = and i64 %469, 7
  %conv2765 = trunc i64 %and2764 to i32
  %cmp2766 = icmp eq i32 %conv2765, 3
  br i1 %cmp2766, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %470 = load i64, i64* %alters, align 8
  %sub2768 = sub nsw i64 %470, 3
  %471 = inttoptr i64 %sub2768 to i8*
  %472 = bitcast i8* %471 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %472, i32 0, i32 0
  %473 = load i64, i64* %car, align 8
  %474 = load i32, i32* %i, align 4
  %idxprom = sext i32 %474 to i64
  %475 = load i64*, i64** %family, align 8
  %arrayidx2769 = getelementptr inbounds i64, i64* %475, i64 %idxprom
  store i64 %473, i64* %arrayidx2769, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %476 = load i32, i32* %i, align 4
  %inc = add nsw i32 %476, 1
  store i32 %inc, i32* %i, align 4
  %477 = load i64, i64* %alters, align 8
  %sub2770 = sub nsw i64 %477, 3
  %478 = inttoptr i64 %sub2770 to i8*
  %479 = bitcast i8* %478 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %479, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %480 = load i64, i64* %cdr, align 8
  store i64 %480, i64* %alters, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %481 = load i64, i64* %spec.addr, align 8
  %call2771 = call i64 @AREF(i64 %481, i64 2)
  %call2772 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2773 = icmp eq i64 %call2771, %call2772
  br i1 %cmp2773, label %if.then.2775, label %if.end.2780

if.then.2775:                                     ; preds = %for.end
  %call2776 = call i64 @builtin_lisp_symbol(i32 0)
  %482 = load i32, i32* %i, align 4
  %inc2777 = add nsw i32 %482, 1
  store i32 %inc2777, i32* %i, align 4
  %idxprom2778 = sext i32 %482 to i64
  %483 = load i64*, i64** %family, align 8
  %arrayidx2779 = getelementptr inbounds i64, i64* %483, i64 %idxprom2778
  store i64 %call2776, i64* %arrayidx2779, align 8
  br label %if.end.2780

if.end.2780:                                      ; preds = %if.then.2775, %for.end
  %484 = load i64, i64* @zero_vector, align 8
  %485 = load i32, i32* %i, align 4
  %idxprom2781 = sext i32 %485 to i64
  %486 = load i64*, i64** %family, align 8
  %arrayidx2782 = getelementptr inbounds i64, i64* %486, i64 %idxprom2781
  store i64 %484, i64* %arrayidx2782, align 8
  br label %if.end.2800

if.else.2783:                                     ; preds = %if.else.229
  %arraydecay2784 = getelementptr inbounds [3 x i64], [3 x i64]* %familybuf, i32 0, i32 0
  store i64* %arraydecay2784, i64** %family, align 8
  store i32 0, i32* %i, align 4
  %487 = load i64, i64* %val, align 8
  %488 = load i32, i32* %i, align 4
  %inc2785 = add nsw i32 %488, 1
  store i32 %inc2785, i32* %i, align 4
  %idxprom2786 = sext i32 %488 to i64
  %489 = load i64*, i64** %family, align 8
  %arrayidx2787 = getelementptr inbounds i64, i64* %489, i64 %idxprom2786
  store i64 %487, i64* %arrayidx2787, align 8
  %490 = load i64, i64* %spec.addr, align 8
  %call2788 = call i64 @AREF(i64 %490, i64 2)
  %call2789 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2790 = icmp eq i64 %call2788, %call2789
  br i1 %cmp2790, label %if.then.2792, label %if.end.2797

if.then.2792:                                     ; preds = %if.else.2783
  %call2793 = call i64 @builtin_lisp_symbol(i32 0)
  %491 = load i32, i32* %i, align 4
  %inc2794 = add nsw i32 %491, 1
  store i32 %inc2794, i32* %i, align 4
  %idxprom2795 = sext i32 %491 to i64
  %492 = load i64*, i64** %family, align 8
  %arrayidx2796 = getelementptr inbounds i64, i64* %492, i64 %idxprom2795
  store i64 %call2793, i64* %arrayidx2796, align 8
  br label %if.end.2797

if.end.2797:                                      ; preds = %if.then.2792, %if.else.2783
  %493 = load i64, i64* @zero_vector, align 8
  %494 = load i32, i32* %i, align 4
  %idxprom2798 = sext i32 %494 to i64
  %495 = load i64*, i64** %family, align 8
  %arrayidx2799 = getelementptr inbounds i64, i64* %495, i64 %idxprom2798
  store i64 %493, i64* %arrayidx2799, align 8
  br label %if.end.2800

if.end.2800:                                      ; preds = %if.end.2797, %if.end.2780
  br label %if.end.2801

if.end.2801:                                      ; preds = %if.end.2800, %if.then.225
  store i32 0, i32* %i, align 4
  br label %for.cond.2802

for.cond.2802:                                    ; preds = %for.inc.2870, %if.end.2801
  %496 = load i32, i32* %i, align 4
  %idxprom2803 = sext i32 %496 to i64
  %497 = load i64*, i64** %family, align 8
  %arrayidx2804 = getelementptr inbounds i64, i64* %497, i64 %idxprom2803
  %498 = load i64, i64* %arrayidx2804, align 8
  %and2805 = and i64 %498, 7
  %conv2806 = trunc i64 %and2805 to i32
  %cmp2807 = icmp eq i32 %conv2806, 0
  br i1 %cmp2807, label %for.body.2809, label %for.end.2872

for.body.2809:                                    ; preds = %for.cond.2802
  %499 = load i64, i64* %work, align 8
  %500 = load i32, i32* %i, align 4
  %idxprom2810 = sext i32 %500 to i64
  %501 = load i64*, i64** %family, align 8
  %arrayidx2811 = getelementptr inbounds i64, i64* %501, i64 %idxprom2810
  %502 = load i64, i64* %arrayidx2811, align 8
  call void @ASET(i64 %499, i64 2, i64 %502)
  store i32 0, i32* %j, align 4
  br label %for.cond.2812

for.cond.2812:                                    ; preds = %for.inc.2867, %for.body.2809
  %503 = load i32, i32* %j, align 4
  %idxprom2813 = sext i32 %503 to i64
  %arrayidx2814 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 %idxprom2813
  %504 = load i64, i64* %arrayidx2814, align 8
  %and2815 = and i64 %504, 7
  %conv2816 = trunc i64 %and2815 to i32
  %cmp2817 = icmp eq i32 %conv2816, 0
  br i1 %cmp2817, label %for.body.2819, label %for.end.2869

for.body.2819:                                    ; preds = %for.cond.2812
  %505 = load i64, i64* %work, align 8
  %506 = load i32, i32* %j, align 4
  %idxprom2820 = sext i32 %506 to i64
  %arrayidx2821 = getelementptr inbounds [3 x i64], [3 x i64]* %foundry, i32 0, i64 %idxprom2820
  %507 = load i64, i64* %arrayidx2821, align 8
  call void @ASET(i64 %505, i64 1, i64 %507)
  store i32 0, i32* %k, align 4
  br label %for.cond.2822

for.cond.2822:                                    ; preds = %for.inc.2864, %for.body.2819
  %508 = load i32, i32* %k, align 4
  %idxprom2823 = sext i32 %508 to i64
  %arrayidx2824 = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 %idxprom2823
  %509 = load i64, i64* %arrayidx2824, align 8
  %and2825 = and i64 %509, 7
  %conv2826 = trunc i64 %and2825 to i32
  %cmp2827 = icmp eq i32 %conv2826, 0
  br i1 %cmp2827, label %for.body.2829, label %for.end.2866

for.body.2829:                                    ; preds = %for.cond.2822
  %510 = load i64, i64* %work, align 8
  %511 = load i32, i32* %k, align 4
  %idxprom2830 = sext i32 %511 to i64
  %arrayidx2831 = getelementptr inbounds [3 x i64], [3 x i64]* %registry, i32 0, i64 %idxprom2830
  %512 = load i64, i64* %arrayidx2831, align 8
  call void @ASET(i64 %510, i64 4, i64 %512)
  store i32 0, i32* %l, align 4
  br label %for.cond.2832

for.cond.2832:                                    ; preds = %for.inc.2861, %for.body.2829
  %513 = load i32, i32* %l, align 4
  %idxprom2833 = sext i32 %513 to i64
  %arrayidx2834 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 %idxprom2833
  %514 = load i64, i64* %arrayidx2834, align 8
  %and2835 = and i64 %514, 7
  %conv2836 = trunc i64 %and2835 to i32
  %cmp2837 = icmp eq i32 %conv2836, 0
  br i1 %cmp2837, label %for.body.2839, label %for.end.2863

for.body.2839:                                    ; preds = %for.cond.2832
  %515 = load i64, i64* %work, align 8
  %516 = load i32, i32* %l, align 4
  %idxprom2840 = sext i32 %516 to i64
  %arrayidx2841 = getelementptr inbounds [3 x i64], [3 x i64]* %adstyle, i32 0, i64 %idxprom2840
  %517 = load i64, i64* %arrayidx2841, align 8
  call void @ASET(i64 %515, i64 3, i64 %517)
  %518 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %519 = load i64, i64* %work, align 8
  %call2842 = call i64 @font_list_entities(%struct.frame* %518, i64 %519)
  store i64 %call2842, i64* %entities, align 8
  %520 = load i64, i64* %entities, align 8
  %call2843 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2844 = icmp eq i64 %520, %call2843
  br i1 %cmp2844, label %if.end.2860, label %if.then.2846

if.then.2846:                                     ; preds = %for.body.2839
  %521 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %522 = load i64, i64* %entities, align 8
  %523 = load i64*, i64** %attrs.addr, align 8
  %524 = load i32, i32* %pixel_size, align 4
  %525 = load i32, i32* %c.addr, align 4
  %call2847 = call i64 @font_select_entity(%struct.frame* %521, i64 %522, i64* %523, i32 %524, i32 %525)
  store i64 %call2847, i64* %val, align 8
  %526 = load i64, i64* %val, align 8
  %call2848 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2849 = icmp eq i64 %526, %call2848
  br i1 %cmp2849, label %if.end.2859, label %if.then.2851

if.then.2851:                                     ; preds = %if.then.2846
  br label %do.body.2852

do.body.2852:                                     ; preds = %if.then.2851
  %527 = load i8, i8* %sa_must_free, align 1
  %tobool2853 = trunc i8 %527 to i1
  br i1 %tobool2853, label %if.then.2854, label %if.end.2857

if.then.2854:                                     ; preds = %do.body.2852
  store i8 0, i8* %sa_must_free, align 1
  %528 = load i64, i64* %sa_count, align 8
  %call2855 = call i64 @builtin_lisp_symbol(i32 0)
  %call2856 = call i64 @unbind_to(i64 %528, i64 %call2855)
  br label %if.end.2857

if.end.2857:                                      ; preds = %if.then.2854, %do.body.2852
  br label %do.end.2858

do.end.2858:                                      ; preds = %if.end.2857
  %529 = load i64, i64* %val, align 8
  store i64 %529, i64* %retval
  br label %return

if.end.2859:                                      ; preds = %if.then.2846
  br label %if.end.2860

if.end.2860:                                      ; preds = %if.end.2859, %for.body.2839
  br label %for.inc.2861

for.inc.2861:                                     ; preds = %if.end.2860
  %530 = load i32, i32* %l, align 4
  %inc2862 = add nsw i32 %530, 1
  store i32 %inc2862, i32* %l, align 4
  br label %for.cond.2832

for.end.2863:                                     ; preds = %for.cond.2832
  br label %for.inc.2864

for.inc.2864:                                     ; preds = %for.end.2863
  %531 = load i32, i32* %k, align 4
  %inc2865 = add nsw i32 %531, 1
  store i32 %inc2865, i32* %k, align 4
  br label %for.cond.2822

for.end.2866:                                     ; preds = %for.cond.2822
  br label %for.inc.2867

for.inc.2867:                                     ; preds = %for.end.2866
  %532 = load i32, i32* %j, align 4
  %inc2868 = add nsw i32 %532, 1
  store i32 %inc2868, i32* %j, align 4
  br label %for.cond.2812

for.end.2869:                                     ; preds = %for.cond.2812
  br label %for.inc.2870

for.inc.2870:                                     ; preds = %for.end.2869
  %533 = load i32, i32* %i, align 4
  %inc2871 = add nsw i32 %533, 1
  store i32 %inc2871, i32* %i, align 4
  br label %for.cond.2802

for.end.2872:                                     ; preds = %for.cond.2802
  br label %do.body.2873

do.body.2873:                                     ; preds = %for.end.2872
  %534 = load i8, i8* %sa_must_free, align 1
  %tobool2874 = trunc i8 %534 to i1
  br i1 %tobool2874, label %if.then.2875, label %if.end.2878

if.then.2875:                                     ; preds = %do.body.2873
  store i8 0, i8* %sa_must_free, align 1
  %535 = load i64, i64* %sa_count, align 8
  %call2876 = call i64 @builtin_lisp_symbol(i32 0)
  %call2877 = call i64 @unbind_to(i64 %535, i64 %call2876)
  br label %if.end.2878

if.end.2878:                                      ; preds = %if.then.2875, %do.body.2873
  br label %do.end.2879

do.end.2879:                                      ; preds = %if.end.2878
  %call2880 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2880, i64* %retval
  br label %return

return:                                           ; preds = %do.end.2879, %do.end.2858, %if.then.119, %if.then.113, %if.then.18
  %536 = load i64, i64* %retval
  ret i64 %536
}

declare i64 @SPECPDL_INDEX() #1

declare i32 @encode_char(%struct.charset*, i32) #1

declare zeroext i1 @CHAR_TABLE_P(i64) #1

declare i64 @HASH_VALUE(%struct.Lisp_Hash_Table*, i64) #1

declare i64 @CHAR_TABLE_REF(i64, i32) #1

declare i64 @Flength(i64) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #2

declare noalias i8* @xmalloc(i64) #1

declare i64 @make_save_memory(i64*, i64) #1

declare void @record_unwind_protect(void (i64)*, i64) #1

declare void @free_save_value(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @font_select_entity(%struct.frame* %f, i64 %entities, i64* %attrs, i32 %pixel_size, i32 %c) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %entities.addr = alloca i64, align 8
  %attrs.addr = alloca i64*, align 8
  %pixel_size.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %font_entity = alloca i64, align 8
  %prefer = alloca i64, align 8
  %i = alloca i32, align 4
  %face_font = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %entities, i64* %entities.addr, align 8
  store i64* %attrs, i64** %attrs.addr, align 8
  store i32 %pixel_size, i32* %pixel_size.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* %entities.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %3 = load i64, i64* %cdr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call
  br i1 %cmp, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* %entities.addr, align 8
  %sub1 = sub nsw i64 %4, 3
  %5 = inttoptr i64 %sub1 to i8*
  %6 = bitcast i8* %5 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %6, i32 0, i32 0
  %7 = load i64, i64* %car, align 8
  %call2 = call i64 @ASIZE(i64 %7)
  %cmp3 = icmp eq i64 %call2, 1
  br i1 %cmp3, label %if.then, label %if.end.12

if.then:                                          ; preds = %land.lhs.true
  %8 = load i64, i64* %entities.addr, align 8
  %sub4 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub4 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car5 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car5, align 8
  %call6 = call i64 @AREF(i64 %11, i64 0)
  store i64 %call6, i64* %font_entity, align 8
  %12 = load i32, i32* %c.addr, align 4
  %cmp7 = icmp slt i32 %12, 0
  br i1 %cmp7, label %if.then.10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %14 = load i64, i64* %font_entity, align 8
  %15 = load i32, i32* %c.addr, align 4
  %call8 = call i32 @font_has_char(%struct.frame* %13, i64 %14, i32 %15)
  %cmp9 = icmp sgt i32 %call8, 0
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %lor.lhs.false, %if.then
  %16 = load i64, i64* %font_entity, align 8
  store i64 %16, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call11, i64* %retval
  br label %return

if.end.12:                                        ; preds = %land.lhs.true, %entry
  %17 = load i64, i64* @scratch_font_prefer, align 8
  store i64 %17, i64* %prefer, align 8
  store i32 5, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.12
  %18 = load i32, i32* %i, align 4
  %cmp13 = icmp sle i32 %18, 8
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i64, i64* %prefer, align 8
  %20 = load i32, i32* %i, align 4
  %conv = sext i32 %20 to i64
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %19, i64 %conv, i64 %call14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i64*, i64** %attrs.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %22, i64 15
  %23 = load i64, i64* %arrayidx, align 8
  %call15 = call zeroext i1 @FONTP(i64 %23)
  br i1 %call15, label %if.then.16, label %if.end.28

if.then.16:                                       ; preds = %for.end
  %24 = load i64*, i64** %attrs.addr, align 8
  %arrayidx17 = getelementptr inbounds i64, i64* %24, i64 15
  %25 = load i64, i64* %arrayidx17, align 8
  store i64 %25, i64* %face_font, align 8
  store i32 5, i32* %i, align 4
  br label %for.cond.18

for.cond.18:                                      ; preds = %for.inc.25, %if.then.16
  %26 = load i32, i32* %i, align 4
  %cmp19 = icmp sle i32 %26, 8
  br i1 %cmp19, label %for.body.21, label %for.end.27

for.body.21:                                      ; preds = %for.cond.18
  %27 = load i64, i64* %prefer, align 8
  %28 = load i32, i32* %i, align 4
  %conv22 = sext i32 %28 to i64
  %29 = load i64, i64* %face_font, align 8
  %30 = load i32, i32* %i, align 4
  %conv23 = sext i32 %30 to i64
  %call24 = call i64 @AREF(i64 %29, i64 %conv23)
  call void @ASET(i64 %27, i64 %conv22, i64 %call24)
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.body.21
  %31 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %31, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond.18

for.end.27:                                       ; preds = %for.cond.18
  br label %if.end.28

if.end.28:                                        ; preds = %for.end.27, %for.end
  %32 = load i64, i64* %prefer, align 8
  %call29 = call i64 @AREF(i64 %32, i64 5)
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %call29, %call30
  br i1 %cmp31, label %if.then.33, label %if.end.37

if.then.33:                                       ; preds = %if.end.28
  %33 = load i64, i64* %prefer, align 8
  %34 = load i64*, i64** %attrs.addr, align 8
  %arrayidx34 = getelementptr inbounds i64, i64* %34, i64 5
  %35 = load i64, i64* %arrayidx34, align 8
  %call35 = call i32 @font_style_to_value(i32 5, i64 %35, i1 zeroext true)
  %conv36 = sext i32 %call35 to i64
  %shl = shl i64 %conv36, 2
  %add = add i64 %shl, 2
  call void @ASET(i64 %33, i64 5, i64 %add)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.33, %if.end.28
  %36 = load i64, i64* %prefer, align 8
  %call38 = call i64 @AREF(i64 %36, i64 6)
  %call39 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp40 = icmp eq i64 %call38, %call39
  br i1 %cmp40, label %if.then.42, label %if.end.48

if.then.42:                                       ; preds = %if.end.37
  %37 = load i64, i64* %prefer, align 8
  %38 = load i64*, i64** %attrs.addr, align 8
  %arrayidx43 = getelementptr inbounds i64, i64* %38, i64 6
  %39 = load i64, i64* %arrayidx43, align 8
  %call44 = call i32 @font_style_to_value(i32 6, i64 %39, i1 zeroext true)
  %conv45 = sext i32 %call44 to i64
  %shl46 = shl i64 %conv45, 2
  %add47 = add i64 %shl46, 2
  call void @ASET(i64 %37, i64 6, i64 %add47)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.42, %if.end.37
  %40 = load i64, i64* %prefer, align 8
  %call49 = call i64 @AREF(i64 %40, i64 7)
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp51 = icmp eq i64 %call49, %call50
  br i1 %cmp51, label %if.then.53, label %if.end.59

if.then.53:                                       ; preds = %if.end.48
  %41 = load i64, i64* %prefer, align 8
  %42 = load i64*, i64** %attrs.addr, align 8
  %arrayidx54 = getelementptr inbounds i64, i64* %42, i64 3
  %43 = load i64, i64* %arrayidx54, align 8
  %call55 = call i32 @font_style_to_value(i32 7, i64 %43, i1 zeroext true)
  %conv56 = sext i32 %call55 to i64
  %shl57 = shl i64 %conv56, 2
  %add58 = add i64 %shl57, 2
  call void @ASET(i64 %41, i64 7, i64 %add58)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.53, %if.end.48
  %44 = load i64, i64* %prefer, align 8
  %45 = load i32, i32* %pixel_size.addr, align 4
  %conv60 = sext i32 %45 to i64
  %shl61 = shl i64 %conv60, 2
  %add62 = add i64 %shl61, 2
  call void @ASET(i64 %44, i64 8, i64 %add62)
  %46 = load i64, i64* %entities.addr, align 8
  %47 = load i64, i64* %prefer, align 8
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %49 = load i32, i32* %c.addr, align 4
  %call63 = call i64 @font_sort_entities(i64 %46, i64 %47, %struct.frame* %48, i32 %49)
  store i64 %call63, i64* %retval
  br label %return

return:                                           ; preds = %if.end.59, %if.end, %if.then.10
  %50 = load i64, i64* %retval
  ret i64 %50
}

declare i64 @unbind_to(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @font_open_for_lface(%struct.frame* %f, i64 %entity, i64* %attrs, i64 %spec) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %entity.addr = alloca i64, align 8
  %attrs.addr = alloca i64*, align 8
  %spec.addr = alloca i64, align 8
  %size = alloca i32, align 4
  %pt = alloca double, align 8
  %def = alloca %struct.face*, align 8
  %height = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %entity, i64* %entity.addr, align 8
  store i64* %attrs, i64** %attrs.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load i64, i64* %entity.addr, align 8
  %call = call i64 @AREF(i64 %0, i64 8)
  %and = and i64 %call, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %entity.addr, align 8
  %call3 = call i64 @AREF(i64 %1, i64 8)
  %shr = ashr i64 %call3, 2
  %cmp4 = icmp sgt i64 %shr, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* %entity.addr, align 8
  %call6 = call i64 @AREF(i64 %2, i64 8)
  %shr7 = ashr i64 %call6, 2
  %conv8 = trunc i64 %shr7 to i32
  store i32 %conv8, i32* %size, align 4
  br label %if.end.52

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %spec.addr, align 8
  %call9 = call zeroext i1 @FONT_SPEC_P(i64 %3)
  br i1 %call9, label %land.lhs.true.11, label %if.else.18

land.lhs.true.11:                                 ; preds = %if.else
  %4 = load i64, i64* %spec.addr, align 8
  %call12 = call i64 @AREF(i64 %4, i64 8)
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp14 = icmp eq i64 %call12, %call13
  br i1 %cmp14, label %if.else.18, label %if.then.16

if.then.16:                                       ; preds = %land.lhs.true.11
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %6 = load i64, i64* %spec.addr, align 8
  %call17 = call i32 @font_pixel_size(%struct.frame* %5, i64 %6)
  store i32 %call17, i32* %size, align 4
  br label %if.end.47

if.else.18:                                       ; preds = %land.lhs.true.11, %if.else
  %7 = load i64*, i64** %attrs.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %7, i64 4
  %8 = load i64, i64* %arrayidx, align 8
  %and19 = and i64 %8, 7
  %conv20 = trunc i64 %and19 to i32
  %and21 = and i32 %conv20, -5
  %cmp22 = icmp eq i32 %and21, 2
  br i1 %cmp22, label %if.then.24, label %if.else.28

if.then.24:                                       ; preds = %if.else.18
  %9 = load i64*, i64** %attrs.addr, align 8
  %arrayidx25 = getelementptr inbounds i64, i64* %9, i64 4
  %10 = load i64, i64* %arrayidx25, align 8
  %shr26 = ashr i64 %10, 2
  %conv27 = sitofp i64 %shr26 to double
  store double %conv27, double* %pt, align 8
  br label %if.end

if.else.28:                                       ; preds = %if.else.18
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.28
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 20
  %12 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %12, i32 0, i32 4
  %13 = load i32, i32* %used, align 4
  %add = add i32 %13, 0
  %cmp29 = icmp ult i32 0, %add
  br i1 %cmp29, label %cond.true.37, label %cond.false.40

cond.false:                                       ; preds = %if.else.28
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache31 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 20
  %15 = load %struct.face_cache*, %struct.face_cache** %face_cache31, align 8
  %used32 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %15, i32 0, i32 4
  %16 = load i32, i32* %used32, align 4
  %conv33 = sext i32 %16 to i64
  %add34 = add i64 %conv33, 0
  %cmp35 = icmp ult i64 0, %add34
  br i1 %cmp35, label %cond.true.37, label %cond.false.40

cond.true.37:                                     ; preds = %cond.false, %cond.true
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache38 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 20
  %18 = load %struct.face_cache*, %struct.face_cache** %face_cache38, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %18, i32 0, i32 2
  %19 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx39 = getelementptr inbounds %struct.face*, %struct.face** %19, i64 0
  %20 = load %struct.face*, %struct.face** %arrayidx39, align 8
  br label %cond.end

cond.false.40:                                    ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.40, %cond.true.37
  %cond = phi %struct.face* [ %20, %cond.true.37 ], [ null, %cond.false.40 ]
  store %struct.face* %cond, %struct.face** %def, align 8
  %21 = load %struct.face*, %struct.face** %def, align 8
  %lface = getelementptr inbounds %struct.face, %struct.face* %21, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [19 x i64], [19 x i64]* %lface, i32 0, i64 4
  %22 = load i64, i64* %arrayidx41, align 8
  store i64 %22, i64* %height, align 8
  %23 = load i64, i64* %height, align 8
  %shr42 = ashr i64 %23, 2
  %conv43 = sitofp i64 %shr42 to double
  store double %conv43, double* %pt, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then.24
  %24 = load double, double* %pt, align 8
  %div = fdiv double %24, 1.000000e+01
  store double %div, double* %pt, align 8
  %25 = load double, double* %pt, align 8
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %27 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %27, i32 0, i32 44
  %28 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %resy = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 8
  %29 = load double, double* %resy, align 8
  %mul = fmul double %25, %29
  %div44 = fdiv double %mul, 7.227000e+01
  %add45 = fadd double %div44, 5.000000e-01
  %conv46 = fptosi double %add45 to i32
  store i32 %conv46, i32* %size, align 4
  br label %if.end.47

if.end.47:                                        ; preds = %if.end, %if.then.16
  %30 = load i64, i64* %entity.addr, align 8
  %call48 = call double @font_rescale_ratio(i64 %30)
  %31 = load i32, i32* %size, align 4
  %conv49 = sitofp i32 %31 to double
  %mul50 = fmul double %conv49, %call48
  %conv51 = fptosi double %mul50 to i32
  store i32 %conv51, i32* %size, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.47, %if.then
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %33 = load i64, i64* %entity.addr, align 8
  %34 = load i32, i32* %size, align 4
  %call53 = call i64 @font_open_entity(%struct.frame* %32, i64 %33, i32 %34)
  ret i64 %call53
}

declare zeroext i1 @FONT_SPEC_P(i64) #1

; Function Attrs: nounwind uwtable
define internal double @font_rescale_ratio(i64 %font_entity) #0 {
entry:
  %retval = alloca double, align 8
  %font_entity.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %elt = alloca i64, align 8
  %name = alloca i64, align 8
  store i64 %font_entity, i64* %font_entity.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %name, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 88), align 8
  store i64 %0, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %tail, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %elt, align 8
  %6 = load i64, i64* %elt, align 8
  %sub2 = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub2 to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %9 = load i64, i64* %cdr, align 8
  %and3 = and i64 %9, 7
  %conv4 = trunc i64 %and3 to i32
  %cmp5 = icmp eq i32 %conv4, 7
  br i1 %cmp5, label %if.then, label %if.end.43

if.then:                                          ; preds = %for.body
  %10 = load i64, i64* %elt, align 8
  %sub7 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub7 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car8 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car8, align 8
  %call9 = call zeroext i1 @STRINGP(i64 %13)
  br i1 %call9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.then
  %14 = load i64, i64* %name, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %14, %call11
  br i1 %cmp12, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.then.10
  %15 = load i64, i64* %font_entity.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %call16 = call i64 @Ffont_xlfd_name(i64 %15, i64 %call15)
  store i64 %call16, i64* %name, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.then.10
  %16 = load i64, i64* %elt, align 8
  %sub17 = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub17 to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %car18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 0
  %19 = load i64, i64* %car18, align 8
  %20 = load i64, i64* %name, align 8
  %call19 = call i64 @fast_string_match_ignore_case(i64 %19, i64 %20)
  %cmp20 = icmp sge i64 %call19, 0
  br i1 %cmp20, label %if.then.22, label %if.end.27

if.then.22:                                       ; preds = %if.end
  %21 = load i64, i64* %elt, align 8
  %sub23 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub23 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %u24 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 1
  %cdr25 = bitcast %union.anon.10* %u24 to i64*
  %24 = load i64, i64* %cdr25, align 8
  %call26 = call double @XFLOAT_DATA(i64 %24)
  store double %call26, double* %retval
  br label %return

if.end.27:                                        ; preds = %if.end
  br label %if.end.42

if.else:                                          ; preds = %if.then
  %25 = load i64, i64* %elt, align 8
  %sub28 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub28 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %car29 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 0
  %28 = load i64, i64* %car29, align 8
  %call30 = call zeroext i1 @FONT_SPEC_P(i64 %28)
  br i1 %call30, label %if.then.31, label %if.end.41

if.then.31:                                       ; preds = %if.else
  %29 = load i64, i64* %elt, align 8
  %sub32 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub32 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %car33 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 0
  %32 = load i64, i64* %car33, align 8
  %33 = load i64, i64* %font_entity.addr, align 8
  %call34 = call zeroext i1 @font_match_p(i64 %32, i64 %33)
  br i1 %call34, label %if.then.35, label %if.end.40

if.then.35:                                       ; preds = %if.then.31
  %34 = load i64, i64* %elt, align 8
  %sub36 = sub nsw i64 %34, 3
  %35 = inttoptr i64 %sub36 to i8*
  %36 = bitcast i8* %35 to %struct.Lisp_Cons*
  %u37 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %36, i32 0, i32 1
  %cdr38 = bitcast %union.anon.10* %u37 to i64*
  %37 = load i64, i64* %cdr38, align 8
  %call39 = call double @XFLOAT_DATA(i64 %37)
  store double %call39, double* %retval
  br label %return

if.end.40:                                        ; preds = %if.then.31
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.else
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.end.27
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.43
  %38 = load i64, i64* %tail, align 8
  %sub44 = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub44 to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %u45 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 1
  %cdr46 = bitcast %union.anon.10* %u45 to i64*
  %41 = load i64, i64* %cdr46, align 8
  store i64 %41, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store double 1.000000e+00, double* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.35, %if.then.22
  %42 = load double, double* %retval
  ret double %42
}

; Function Attrs: nounwind uwtable
define internal i64 @font_open_entity(%struct.frame* %f, i64 %entity, i32 %pixel_size) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %entity.addr = alloca i64, align 8
  %pixel_size.addr = alloca i32, align 4
  %driver_list = alloca %struct.font_driver_list*, align 8
  %objlist = alloca i64, align 8
  %size = alloca i64, align 8
  %val = alloca i64, align 8
  %font_object = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  %min_width = alloca i32, align 4
  %height = alloca i32, align 4
  %psize = alloca i32, align 4
  %fn = alloca i64, align 8
  %font_ascent = alloca i32, align 4
  %font_descent = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %entity, i64* %entity.addr, align 8
  store i32 %pixel_size, i32* %pixel_size.addr, align 4
  %0 = load i64, i64* %entity.addr, align 8
  %call = call i64 @AREF(i64 %0, i64 8)
  store i64 %call, i64* %size, align 8
  %1 = load i64, i64* %size, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp ne i64 %shr, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %size, align 8
  %shr1 = ashr i64 %2, 2
  %conv = trunc i64 %shr1 to i32
  store i32 %conv, i32* %pixel_size.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %entity.addr, align 8
  %call2 = call i64 @AREF(i64 %3, i64 0)
  store i64 %call2, i64* %val, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 63
  %5 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %5, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool = icmp ne %struct.font_driver_list* %6, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %7, i32 0, i32 1
  %8 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %8, i32 0, i32 0
  %9 = load i64, i64* %type, align 8
  %10 = load i64, i64* %val, align 8
  %cmp3 = icmp eq i64 %9, %10
  %lnot = xor i1 %cmp3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %12, i32 0, i32 2
  %13 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %13, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %14 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool5 = icmp ne %struct.font_driver_list* %14, null
  br i1 %tobool5, label %if.end.8, label %if.then.6

if.then.6:                                        ; preds = %for.end
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call7, i64* %retval
  br label %return

if.end.8:                                         ; preds = %for.end
  %15 = load i64, i64* %entity.addr, align 8
  %call9 = call i64 @AREF(i64 %15, i64 13)
  store i64 %call9, i64* %objlist, align 8
  br label %for.cond.10

for.cond.10:                                      ; preds = %for.inc.34, %if.end.8
  %16 = load i64, i64* %objlist, align 8
  %and = and i64 %16, 7
  %conv11 = trunc i64 %and to i32
  %cmp12 = icmp eq i32 %conv11, 3
  br i1 %cmp12, label %for.body.14, label %for.end.36

for.body.14:                                      ; preds = %for.cond.10
  %17 = load i64, i64* %objlist, align 8
  %sub = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 0
  %20 = load i64, i64* %car, align 8
  store i64 %20, i64* %fn, align 8
  %21 = load i64, i64* %fn, align 8
  %call15 = call i64 @AREF(i64 %21, i64 0)
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %call15, %call16
  br i1 %cmp17, label %if.end.33, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body.14
  %22 = load i64, i64* %fn, align 8
  %call19 = call %struct.font* @XFONT_OBJECT(i64 %22)
  %pixel_size20 = getelementptr inbounds %struct.font, %struct.font* %call19, i32 0, i32 4
  %23 = load i32, i32* %pixel_size20, align 4
  %24 = load i32, i32* %pixel_size.addr, align 4
  %cmp21 = icmp eq i32 %23, %24
  br i1 %cmp21, label %if.then.23, label %if.end.33

if.then.23:                                       ; preds = %land.lhs.true
  %25 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver24 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %25, i32 0, i32 1
  %26 = load %struct.font_driver*, %struct.font_driver** %driver24, align 8
  %cached_font_ok = getelementptr inbounds %struct.font_driver, %struct.font_driver* %26, i32 0, i32 26
  %27 = load i1 (%struct.frame*, i64, i64)*, i1 (%struct.frame*, i64, i64)** %cached_font_ok, align 8
  %cmp25 = icmp eq i1 (%struct.frame*, i64, i64)* %27, null
  br i1 %cmp25, label %if.then.31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.23
  %28 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver27 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %28, i32 0, i32 1
  %29 = load %struct.font_driver*, %struct.font_driver** %driver27, align 8
  %cached_font_ok28 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %29, i32 0, i32 26
  %30 = load i1 (%struct.frame*, i64, i64)*, i1 (%struct.frame*, i64, i64)** %cached_font_ok28, align 8
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %32 = load i64, i64* %fn, align 8
  %33 = load i64, i64* %entity.addr, align 8
  %call29 = call zeroext i1 %30(%struct.frame* %31, i64 %32, i64 %33)
  br i1 %call29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %lor.lhs.false, %if.then.23
  %34 = load i64, i64* %fn, align 8
  store i64 %34, i64* %retval
  br label %return

if.end.32:                                        ; preds = %lor.lhs.false
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %land.lhs.true, %for.body.14
  br label %for.inc.34

for.inc.34:                                       ; preds = %if.end.33
  %35 = load i64, i64* %objlist, align 8
  %sub35 = sub nsw i64 %35, 3
  %36 = inttoptr i64 %sub35 to i8*
  %37 = bitcast i8* %36 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %37, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %38 = load i64, i64* %cdr, align 8
  store i64 %38, i64* %objlist, align 8
  br label %for.cond.10

for.end.36:                                       ; preds = %for.cond.10
  %39 = load i32, i32* %pixel_size.addr, align 4
  store i32 %39, i32* %psize, align 4
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.55, %for.end.36
  %40 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver38 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %40, i32 0, i32 1
  %41 = load %struct.font_driver*, %struct.font_driver** %driver38, align 8
  %open = getelementptr inbounds %struct.font_driver, %struct.font_driver* %41, i32 0, i32 7
  %42 = load i64 (%struct.frame*, i64, i32)*, i64 (%struct.frame*, i64, i32)** %open, align 8
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %44 = load i64, i64* %entity.addr, align 8
  %45 = load i32, i32* %psize, align 4
  %call39 = call i64 %42(%struct.frame* %43, i64 %44, i32 %45)
  store i64 %call39, i64* %font_object, align 8
  %46 = load i64, i64* %font_object, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp41 = icmp eq i64 %46, %call40
  br i1 %cmp41, label %if.then.43, label %if.end.45

if.then.43:                                       ; preds = %for.cond.37
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call44, i64* %retval
  br label %return

if.end.45:                                        ; preds = %for.cond.37
  %47 = load i64, i64* %font_object, align 8
  %call46 = call %struct.font* @XFONT_OBJECT(i64 %47)
  store %struct.font* %call46, %struct.font** %font, align 8
  %48 = load %struct.font*, %struct.font** %font, align 8
  %average_width = getelementptr inbounds %struct.font, %struct.font* %48, i32 0, i32 7
  %49 = load i32, i32* %average_width, align 4
  %cmp47 = icmp sgt i32 %49, 0
  br i1 %cmp47, label %land.lhs.true.49, label %if.end.54

land.lhs.true.49:                                 ; preds = %if.end.45
  %50 = load %struct.font*, %struct.font** %font, align 8
  %height50 = getelementptr inbounds %struct.font, %struct.font* %50, i32 0, i32 5
  %51 = load i32, i32* %height50, align 4
  %cmp51 = icmp sgt i32 %51, 0
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %land.lhs.true.49
  br label %for.end.56

if.end.54:                                        ; preds = %land.lhs.true.49, %if.end.45
  br label %for.inc.55

for.inc.55:                                       ; preds = %if.end.54
  %52 = load i32, i32* %psize, align 4
  %inc = add nsw i32 %52, 1
  store i32 %inc, i32* %psize, align 4
  br label %for.cond.37

for.end.56:                                       ; preds = %if.then.53
  %53 = load i64, i64* %font_object, align 8
  %54 = load i32, i32* %pixel_size.addr, align 4
  %conv57 = sext i32 %54 to i64
  %shl = shl i64 %conv57, 2
  %add = add i64 %shl, 2
  call void @ASET(i64 %53, i64 8, i64 %add)
  br label %do.body

do.body:                                          ; preds = %for.end.56
  %55 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp59 = icmp eq i64 %55, %call58
  br i1 %cmp59, label %if.end.62, label %if.then.61

if.then.61:                                       ; preds = %do.body
  %56 = load i64, i64* %entity.addr, align 8
  %57 = load i64, i64* %font_object, align 8
  call void @font_add_log(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.85, i32 0, i32 0), i64 %56, i64 %57)
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.61, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.62
  %58 = load i64, i64* %entity.addr, align 8
  %59 = load i64, i64* %font_object, align 8
  %60 = load i64, i64* %entity.addr, align 8
  %call63 = call i64 @AREF(i64 %60, i64 13)
  %call64 = call i64 @Fcons(i64 %59, i64 %call63)
  call void @ASET(i64 %58, i64 13, i64 %call64)
  %61 = load i64, i64* %font_object, align 8
  %call65 = call %struct.font* @XFONT_OBJECT(i64 %61)
  store %struct.font* %call65, %struct.font** %font, align 8
  %62 = load %struct.font*, %struct.font** %font, align 8
  %min_width66 = getelementptr inbounds %struct.font, %struct.font* %62, i32 0, i32 2
  %63 = load i32, i32* %min_width66, align 4
  %tobool67 = icmp ne i32 %63, 0
  br i1 %tobool67, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %64 = load %struct.font*, %struct.font** %font, align 8
  %min_width68 = getelementptr inbounds %struct.font, %struct.font* %64, i32 0, i32 2
  %65 = load i32, i32* %min_width68, align 4
  br label %cond.end.80

cond.false:                                       ; preds = %do.end
  %66 = load %struct.font*, %struct.font** %font, align 8
  %average_width69 = getelementptr inbounds %struct.font, %struct.font* %66, i32 0, i32 7
  %67 = load i32, i32* %average_width69, align 4
  %tobool70 = icmp ne i32 %67, 0
  br i1 %tobool70, label %cond.true.71, label %cond.false.73

cond.true.71:                                     ; preds = %cond.false
  %68 = load %struct.font*, %struct.font** %font, align 8
  %average_width72 = getelementptr inbounds %struct.font, %struct.font* %68, i32 0, i32 7
  %69 = load i32, i32* %average_width72, align 4
  br label %cond.end.78

cond.false.73:                                    ; preds = %cond.false
  %70 = load %struct.font*, %struct.font** %font, align 8
  %space_width = getelementptr inbounds %struct.font, %struct.font* %70, i32 0, i32 6
  %71 = load i32, i32* %space_width, align 4
  %tobool74 = icmp ne i32 %71, 0
  br i1 %tobool74, label %cond.true.75, label %cond.false.77

cond.true.75:                                     ; preds = %cond.false.73
  %72 = load %struct.font*, %struct.font** %font, align 8
  %space_width76 = getelementptr inbounds %struct.font, %struct.font* %72, i32 0, i32 6
  %73 = load i32, i32* %space_width76, align 4
  br label %cond.end

cond.false.77:                                    ; preds = %cond.false.73
  br label %cond.end

cond.end:                                         ; preds = %cond.false.77, %cond.true.75
  %cond = phi i32 [ %73, %cond.true.75 ], [ 1, %cond.false.77 ]
  br label %cond.end.78

cond.end.78:                                      ; preds = %cond.end, %cond.true.71
  %cond79 = phi i32 [ %69, %cond.true.71 ], [ %cond, %cond.end ]
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.end.78, %cond.true
  %cond81 = phi i32 [ %65, %cond.true ], [ %cond79, %cond.end.78 ]
  store i32 %cond81, i32* %min_width, align 4
  %74 = load %struct.font*, %struct.font** %font, align 8
  call void @get_font_ascent_descent(%struct.font* %74, i32* %font_ascent, i32* %font_descent)
  %75 = load i32, i32* %font_ascent, align 4
  %76 = load i32, i32* %font_descent, align 4
  %add82 = add nsw i32 %75, %76
  store i32 %add82, i32* %height, align 4
  %77 = load i32, i32* %height, align 4
  %cmp83 = icmp sle i32 %77, 0
  br i1 %cmp83, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %cond.end.80
  store i32 1, i32* %height, align 4
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.85, %cond.end.80
  %78 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %79 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %79, i32 0, i32 44
  %80 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %n_fonts = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %80, i32 0, i32 28
  %81 = load i32, i32* %n_fonts, align 4
  %inc87 = add nsw i32 %81, 1
  store i32 %inc87, i32* %n_fonts, align 4
  %82 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data88 = getelementptr inbounds %struct.frame, %struct.frame* %82, i32 0, i32 62
  %x89 = bitcast %union.output_data* %output_data88 to %struct.x_output**
  %83 = load %struct.x_output*, %struct.x_output** %x89, align 8
  %display_info90 = getelementptr inbounds %struct.x_output, %struct.x_output* %83, i32 0, i32 44
  %84 = load %struct.x_display_info*, %struct.x_display_info** %display_info90, align 8
  %n_fonts91 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %84, i32 0, i32 28
  %85 = load i32, i32* %n_fonts91, align 4
  %cmp92 = icmp eq i32 %85, 1
  br i1 %cmp92, label %if.then.94, label %if.else

if.then.94:                                       ; preds = %if.end.86
  %86 = load i32, i32* %min_width, align 4
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data95 = getelementptr inbounds %struct.frame, %struct.frame* %87, i32 0, i32 62
  %x96 = bitcast %union.output_data* %output_data95 to %struct.x_output**
  %88 = load %struct.x_output*, %struct.x_output** %x96, align 8
  %display_info97 = getelementptr inbounds %struct.x_output, %struct.x_output* %88, i32 0, i32 44
  %89 = load %struct.x_display_info*, %struct.x_display_info** %display_info97, align 8
  %smallest_char_width = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %89, i32 0, i32 22
  store i32 %86, i32* %smallest_char_width, align 4
  %90 = load i32, i32* %height, align 4
  %91 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data98 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 62
  %x99 = bitcast %union.output_data* %output_data98 to %struct.x_output**
  %92 = load %struct.x_output*, %struct.x_output** %x99, align 8
  %display_info100 = getelementptr inbounds %struct.x_output, %struct.x_output* %92, i32 0, i32 44
  %93 = load %struct.x_display_info*, %struct.x_display_info** %display_info100, align 8
  %smallest_font_height = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %93, i32 0, i32 23
  store i32 %90, i32* %smallest_font_height, align 4
  %94 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fonts_changed = getelementptr inbounds %struct.frame, %struct.frame* %94, i32 0, i32 26
  %95 = bitcast i48* %fonts_changed to i64*
  %bf.load = load i64, i64* %95, align 8
  %bf.clear = and i64 %bf.load, -65
  %bf.set = or i64 %bf.clear, 64
  store i64 %bf.set, i64* %95, align 8
  br label %if.end.133

if.else:                                          ; preds = %if.end.86
  %96 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data101 = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 62
  %x102 = bitcast %union.output_data* %output_data101 to %struct.x_output**
  %97 = load %struct.x_output*, %struct.x_output** %x102, align 8
  %display_info103 = getelementptr inbounds %struct.x_output, %struct.x_output* %97, i32 0, i32 44
  %98 = load %struct.x_display_info*, %struct.x_display_info** %display_info103, align 8
  %smallest_char_width104 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %98, i32 0, i32 22
  %99 = load i32, i32* %smallest_char_width104, align 4
  %100 = load i32, i32* %min_width, align 4
  %cmp105 = icmp sgt i32 %99, %100
  br i1 %cmp105, label %if.then.107, label %if.end.116

if.then.107:                                      ; preds = %if.else
  %101 = load i32, i32* %min_width, align 4
  %102 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data108 = getelementptr inbounds %struct.frame, %struct.frame* %102, i32 0, i32 62
  %x109 = bitcast %union.output_data* %output_data108 to %struct.x_output**
  %103 = load %struct.x_output*, %struct.x_output** %x109, align 8
  %display_info110 = getelementptr inbounds %struct.x_output, %struct.x_output* %103, i32 0, i32 44
  %104 = load %struct.x_display_info*, %struct.x_display_info** %display_info110, align 8
  %smallest_char_width111 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %104, i32 0, i32 22
  store i32 %101, i32* %smallest_char_width111, align 4
  %105 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fonts_changed112 = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 26
  %106 = bitcast i48* %fonts_changed112 to i64*
  %bf.load113 = load i64, i64* %106, align 8
  %bf.clear114 = and i64 %bf.load113, -65
  %bf.set115 = or i64 %bf.clear114, 64
  store i64 %bf.set115, i64* %106, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.107, %if.else
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data117 = getelementptr inbounds %struct.frame, %struct.frame* %107, i32 0, i32 62
  %x118 = bitcast %union.output_data* %output_data117 to %struct.x_output**
  %108 = load %struct.x_output*, %struct.x_output** %x118, align 8
  %display_info119 = getelementptr inbounds %struct.x_output, %struct.x_output* %108, i32 0, i32 44
  %109 = load %struct.x_display_info*, %struct.x_display_info** %display_info119, align 8
  %smallest_font_height120 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %109, i32 0, i32 23
  %110 = load i32, i32* %smallest_font_height120, align 4
  %111 = load i32, i32* %height, align 4
  %cmp121 = icmp sgt i32 %110, %111
  br i1 %cmp121, label %if.then.123, label %if.end.132

if.then.123:                                      ; preds = %if.end.116
  %112 = load i32, i32* %height, align 4
  %113 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data124 = getelementptr inbounds %struct.frame, %struct.frame* %113, i32 0, i32 62
  %x125 = bitcast %union.output_data* %output_data124 to %struct.x_output**
  %114 = load %struct.x_output*, %struct.x_output** %x125, align 8
  %display_info126 = getelementptr inbounds %struct.x_output, %struct.x_output* %114, i32 0, i32 44
  %115 = load %struct.x_display_info*, %struct.x_display_info** %display_info126, align 8
  %smallest_font_height127 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %115, i32 0, i32 23
  store i32 %112, i32* %smallest_font_height127, align 4
  %116 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %fonts_changed128 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 26
  %117 = bitcast i48* %fonts_changed128 to i64*
  %bf.load129 = load i64, i64* %117, align 8
  %bf.clear130 = and i64 %bf.load129, -65
  %bf.set131 = or i64 %bf.clear130, 64
  store i64 %bf.set131, i64* %117, align 8
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.123, %if.end.116
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.then.94
  %118 = load i64, i64* %font_object, align 8
  store i64 %118, i64* %retval
  br label %return

return:                                           ; preds = %if.end.133, %if.then.43, %if.then.31, %if.then.6
  %119 = load i64, i64* %retval
  ret i64 %119
}

; Function Attrs: nounwind uwtable
define i64 @font_load_for_lface(%struct.frame* %f, i64* %attrs, i64 %spec) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %attrs.addr = alloca i64*, align 8
  %spec.addr = alloca i64, align 8
  %entity = alloca i64, align 8
  %name = alloca i64, align 8
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  %tail = alloca i8*, align 8
  %font_size = alloca double, align 8
  %lsize = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64* %attrs, i64** %attrs.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i64*, i64** %attrs.addr, align 8
  %2 = load i64, i64* %spec.addr, align 8
  %call = call i64 @font_find_for_lface(%struct.frame* %0, i64* %1, i64 %2, i32 -1)
  store i64 %call, i64* %entity, align 8
  %3 = load i64, i64* %entity, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call1
  br i1 %cmp, label %if.then, label %if.end.56

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %5 = load i64*, i64** %attrs.addr, align 8
  %6 = load i64, i64* %spec.addr, align 8
  %call2 = call i64 @font_matching_entity(%struct.frame* %4, i64* %5, i64 %6)
  store i64 %call2, i64* %entity, align 8
  %7 = load i64, i64* %entity, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %7, %call3
  br i1 %cmp4, label %if.then.5, label %if.end.49

if.then.5:                                        ; preds = %if.then
  %8 = load i64, i64* %spec.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 133)
  %call7 = call i64 @Ffont_get(i64 %8, i64 %call6)
  store i64 %call7, i64* %name, align 8
  %9 = load i64, i64* %name, align 8
  %call8 = call zeroext i1 @STRINGP(i64 %9)
  br i1 %call8, label %if.then.9, label %if.end.48

if.then.9:                                        ; preds = %if.then.5
  %10 = load i64, i64* %name, align 8
  %call10 = call i8* @SSDATA(i64 %10)
  store i8* %call10, i8** %p, align 8
  %11 = load i8*, i8** %p, align 8
  %call11 = call i8* @strrchr(i8* %11, i32 45) #6
  store i8* %call11, i8** %q, align 8
  %12 = load i8*, i8** %q, align 8
  %cmp12 = icmp ne i8* %12, null
  br i1 %cmp12, label %land.lhs.true, label %if.end.47

land.lhs.true:                                    ; preds = %if.then.9
  %13 = load i8*, i8** %q, align 8
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %14 to i32
  %call13 = call zeroext i1 @c_isdigit(i32 %conv)
  br i1 %call13, label %if.then.15, label %if.end.47

if.then.15:                                       ; preds = %land.lhs.true
  %15 = load i8*, i8** %q, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 1
  %call16 = call double @strtod(i8* %add.ptr, i8** %tail) #5
  store double %call16, double* %font_size, align 8
  %16 = load double, double* %font_size, align 8
  %cmp17 = fcmp ogt double %16, 0.000000e+00
  br i1 %cmp17, label %land.lhs.true.19, label %if.end.46

land.lhs.true.19:                                 ; preds = %if.then.15
  %17 = load i8*, i8** %tail, align 8
  %18 = load i8*, i8** %q, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %18, i64 1
  %cmp21 = icmp ne i8* %17, %add.ptr20
  br i1 %cmp21, label %if.then.23, label %if.end.46

if.then.23:                                       ; preds = %land.lhs.true.19
  %19 = load i64, i64* %spec.addr, align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 118)
  %call25 = call i64 @Ffont_get(i64 %19, i64 %call24)
  store i64 %call25, i64* %lsize, align 8
  %20 = load i64, i64* %lsize, align 8
  %and = and i64 %20, 7
  %conv26 = trunc i64 %and to i32
  %cmp27 = icmp eq i32 %conv26, 7
  br i1 %cmp27, label %land.lhs.true.29, label %lor.lhs.false

land.lhs.true.29:                                 ; preds = %if.then.23
  %21 = load i64, i64* %lsize, align 8
  %call30 = call double @XFLOAT_DATA(i64 %21)
  %22 = load double, double* %font_size, align 8
  %cmp31 = fcmp oeq double %call30, %22
  br i1 %cmp31, label %if.then.42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.29, %if.then.23
  %23 = load i64, i64* %lsize, align 8
  %and33 = and i64 %23, 7
  %conv34 = trunc i64 %and33 to i32
  %and35 = and i32 %conv34, -5
  %cmp36 = icmp eq i32 %and35, 2
  br i1 %cmp36, label %land.lhs.true.38, label %if.end

land.lhs.true.38:                                 ; preds = %lor.lhs.false
  %24 = load i64, i64* %lsize, align 8
  %shr = ashr i64 %24, 2
  %conv39 = sitofp i64 %shr to double
  %25 = load double, double* %font_size, align 8
  %cmp40 = fcmp oeq double %conv39, %25
  br i1 %cmp40, label %if.then.42, label %if.end

if.then.42:                                       ; preds = %land.lhs.true.38, %land.lhs.true.29
  %26 = load i64, i64* %spec.addr, align 8
  %27 = load i8*, i8** %p, align 8
  %28 = load i8*, i8** %tail, align 8
  %29 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call43 = call i64 @font_intern_prop(i8* %27, i64 %sub.ptr.sub, i1 zeroext true)
  call void @ASET(i64 %26, i64 2, i64 %call43)
  %30 = load i64, i64* %spec.addr, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %30, i64 8, i64 %call44)
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %32 = load i64*, i64** %attrs.addr, align 8
  %33 = load i64, i64* %spec.addr, align 8
  %call45 = call i64 @font_matching_entity(%struct.frame* %31, i64* %32, i64 %33)
  store i64 %call45, i64* %entity, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.42, %land.lhs.true.38, %lor.lhs.false
  br label %if.end.46

if.end.46:                                        ; preds = %if.end, %land.lhs.true.19, %if.then.15
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %land.lhs.true, %if.then.9
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.then.5
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.then
  %34 = load i64, i64* %entity, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp51 = icmp eq i64 %34, %call50
  br i1 %cmp51, label %if.then.53, label %if.end.55

if.then.53:                                       ; preds = %if.end.49
  %call54 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call54, i64* %retval
  br label %return

if.end.55:                                        ; preds = %if.end.49
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %entry
  %35 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %36 = load i64, i64* %entity, align 8
  %37 = load i64*, i64** %attrs.addr, align 8
  %38 = load i64, i64* %spec.addr, align 8
  %call57 = call i64 @font_open_for_lface(%struct.frame* %35, i64 %36, i64* %37, i64 %38)
  store i64 %call57, i64* %entity, align 8
  %39 = load i64, i64* %entity, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %39, %call58
  br i1 %cmp59, label %if.end.69, label %if.then.61

if.then.61:                                       ; preds = %if.end.56
  %40 = load i64, i64* %spec.addr, align 8
  %call62 = call i64 @builtin_lisp_symbol(i32 133)
  %call63 = call i64 @Ffont_get(i64 %40, i64 %call62)
  store i64 %call63, i64* %name, align 8
  %41 = load i64, i64* %name, align 8
  %call64 = call zeroext i1 @STRINGP(i64 %41)
  br i1 %call64, label %if.then.65, label %if.end.68

if.then.65:                                       ; preds = %if.then.61
  %42 = load i64, i64* %entity, align 8
  %call66 = call i64 @builtin_lisp_symbol(i32 133)
  %43 = load i64, i64* %name, align 8
  %call67 = call i64 @font_put_extra(i64 %42, i64 %call66, i64 %43)
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.65, %if.then.61
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.end.56
  %44 = load i64, i64* %entity, align 8
  store i64 %44, i64* %retval
  br label %return

return:                                           ; preds = %if.end.69, %if.then.53
  %45 = load i64, i64* %retval
  ret i64 %45
}

; Function Attrs: nounwind uwtable
define internal i64 @font_matching_entity(%struct.frame* %f, i64* %attrs, i64 %spec) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %attrs.addr = alloca i64*, align 8
  %spec.addr = alloca i64, align 8
  %driver_list = alloca %struct.font_driver_list*, align 8
  %ftype = alloca i64, align 8
  %size = alloca i64, align 8
  %entity = alloca i64, align 8
  %work = alloca i64, align 8
  %cache = alloca i64, align 8
  %copy = alloca i64, align 8
  %match50 = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64* %attrs, i64** %attrs.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 63
  %1 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %1, %struct.font_driver_list** %driver_list, align 8
  %2 = load i64, i64* %spec.addr, align 8
  %call = call i64 @copy_font_spec(i64 %2)
  store i64 %call, i64* %work, align 8
  %3 = load i64, i64* %spec.addr, align 8
  %call1 = call i64 @AREF(i64 %3, i64 0)
  store i64 %call1, i64* %ftype, align 8
  %4 = load i64, i64* %spec.addr, align 8
  %call2 = call i64 @AREF(i64 %4, i64 8)
  store i64 %call2, i64* %size, align 8
  %5 = load i64, i64* %size, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %work, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %8 = load i64, i64* %spec.addr, align 8
  %call4 = call i32 @font_pixel_size(%struct.frame* %7, i64 %8)
  %conv5 = sext i32 %call4 to i64
  %shl = shl i64 %conv5, 2
  %add = add i64 %shl, 2
  call void @ASET(i64 %6, i64 8, i64 %add)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i64, i64* %work, align 8
  %10 = load i64*, i64** %attrs.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %10, i64 5
  %11 = load i64, i64* %arrayidx, align 8
  %call6 = call i32 @font_style_to_value(i32 5, i64 %11, i1 zeroext true)
  %conv7 = sext i32 %call6 to i64
  %shl8 = shl i64 %conv7, 2
  %add9 = add i64 %shl8, 2
  call void @ASET(i64 %9, i64 5, i64 %add9)
  %12 = load i64, i64* %work, align 8
  %13 = load i64*, i64** %attrs.addr, align 8
  %arrayidx10 = getelementptr inbounds i64, i64* %13, i64 6
  %14 = load i64, i64* %arrayidx10, align 8
  %call11 = call i32 @font_style_to_value(i32 6, i64 %14, i1 zeroext true)
  %conv12 = sext i32 %call11 to i64
  %shl13 = shl i64 %conv12, 2
  %add14 = add i64 %shl13, 2
  call void @ASET(i64 %12, i64 6, i64 %add14)
  %15 = load i64, i64* %work, align 8
  %16 = load i64*, i64** %attrs.addr, align 8
  %arrayidx15 = getelementptr inbounds i64, i64* %16, i64 3
  %17 = load i64, i64* %arrayidx15, align 8
  %call16 = call i32 @font_style_to_value(i32 7, i64 %17, i1 zeroext true)
  %conv17 = sext i32 %call16 to i64
  %shl18 = shl i64 %conv17, 2
  %add19 = add i64 %shl18, 2
  call void @ASET(i64 %15, i64 7, i64 %add19)
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call20, i64* %entity, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %18 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool = icmp ne %struct.font_driver_list* %18, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %on = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %19, i32 0, i32 0
  %20 = load i8, i8* %on, align 1
  %tobool21 = trunc i8 %20 to i1
  br i1 %tobool21, label %land.lhs.true, label %if.end.66

land.lhs.true:                                    ; preds = %for.body
  %21 = load i64, i64* %ftype, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %21, %call23
  br i1 %cmp24, label %if.then.28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %22 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %22, i32 0, i32 1
  %23 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %23, i32 0, i32 0
  %24 = load i64, i64* %type, align 8
  %25 = load i64, i64* %ftype, align 8
  %cmp26 = icmp eq i64 %24, %25
  br i1 %cmp26, label %if.then.28, label %if.end.66

if.then.28:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %27 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver29 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %27, i32 0, i32 1
  %28 = load %struct.font_driver*, %struct.font_driver** %driver29, align 8
  %call30 = call i64 @font_get_cache(%struct.frame* %26, %struct.font_driver* %28)
  store i64 %call30, i64* %cache, align 8
  %29 = load i64, i64* %work, align 8
  %30 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver31 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %30, i32 0, i32 1
  %31 = load %struct.font_driver*, %struct.font_driver** %driver31, align 8
  %type32 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %31, i32 0, i32 0
  %32 = load i64, i64* %type32, align 8
  call void @ASET(i64 %29, i64 0, i64 %32)
  %33 = load i64, i64* %work, align 8
  %34 = load i64, i64* %cache, align 8
  %sub = sub nsw i64 %34, 3
  %35 = inttoptr i64 %sub to i8*
  %36 = bitcast i8* %35 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %36, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %37 = load i64, i64* %cdr, align 8
  %call33 = call i64 @assoc_no_quit(i64 %33, i64 %37)
  store i64 %call33, i64* %entity, align 8
  %38 = load i64, i64* %entity, align 8
  %and34 = and i64 %38, 7
  %conv35 = trunc i64 %and34 to i32
  %cmp36 = icmp eq i32 %conv35, 3
  br i1 %cmp36, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.then.28
  %39 = load i64, i64* %entity, align 8
  %sub39 = sub nsw i64 %39, 3
  %40 = inttoptr i64 %sub39 to i8*
  %41 = bitcast i8* %40 to %struct.Lisp_Cons*
  %u40 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %41, i32 0, i32 1
  %cdr41 = bitcast %union.anon.10* %u40 to i64*
  %42 = load i64, i64* %cdr41, align 8
  %call42 = call i64 @AREF(i64 %42, i64 0)
  store i64 %call42, i64* %entity, align 8
  br label %if.end.60

if.else:                                          ; preds = %if.then.28
  %43 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver43 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %43, i32 0, i32 1
  %44 = load %struct.font_driver*, %struct.font_driver** %driver43, align 8
  %match = getelementptr inbounds %struct.font_driver, %struct.font_driver* %44, i32 0, i32 4
  %45 = load i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)** %match, align 8
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %47 = load i64, i64* %work, align 8
  %call44 = call i64 %45(%struct.frame* %46, i64 %47)
  store i64 %call44, i64* %entity, align 8
  %48 = load i64, i64* %entity, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp46 = icmp eq i64 %48, %call45
  br i1 %cmp46, label %if.end.59, label %if.then.48

if.then.48:                                       ; preds = %if.else
  %49 = load i64, i64* %work, align 8
  %call49 = call i64 @copy_font_spec(i64 %49)
  store i64 %call49, i64* %copy, align 8
  %call51 = call i64 @Fvector(i64 1, i64* %entity)
  store i64 %call51, i64* %match50, align 8
  %50 = load i64, i64* %copy, align 8
  %51 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver52 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %51, i32 0, i32 1
  %52 = load %struct.font_driver*, %struct.font_driver** %driver52, align 8
  %type53 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %52, i32 0, i32 0
  %53 = load i64, i64* %type53, align 8
  call void @ASET(i64 %50, i64 0, i64 %53)
  %54 = load i64, i64* %cache, align 8
  %55 = load i64, i64* %copy, align 8
  %56 = load i64, i64* %match50, align 8
  %call54 = call i64 @Fcons(i64 %55, i64 %56)
  %57 = load i64, i64* %cache, align 8
  %sub55 = sub nsw i64 %57, 3
  %58 = inttoptr i64 %sub55 to i8*
  %59 = bitcast i8* %58 to %struct.Lisp_Cons*
  %u56 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %59, i32 0, i32 1
  %cdr57 = bitcast %union.anon.10* %u56 to i64*
  %60 = load i64, i64* %cdr57, align 8
  %call58 = call i64 @Fcons(i64 %call54, i64 %60)
  call void @XSETCDR(i64 %54, i64 %call58)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.48, %if.else
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.then.38
  %61 = load i64, i64* %entity, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %61, %call61
  br i1 %cmp62, label %if.end.65, label %if.then.64

if.then.64:                                       ; preds = %if.end.60
  br label %for.end

if.end.65:                                        ; preds = %if.end.60
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %lor.lhs.false, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.66
  %62 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %62, i32 0, i32 2
  %63 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %63, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.64, %for.cond
  br label %do.body

do.body:                                          ; preds = %for.end
  %64 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call67 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp68 = icmp eq i64 %64, %call67
  br i1 %cmp68, label %if.end.71, label %if.then.70

if.then.70:                                       ; preds = %do.body
  %65 = load i64, i64* %work, align 8
  %66 = load i64, i64* %entity, align 8
  call void @font_add_log(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i32 0, i32 0), i64 %65, i64 %66)
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.70, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.71
  %67 = load i64, i64* %entity, align 8
  ret i64 %67
}

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #3

; Function Attrs: nounwind
declare double @strtod(i8*, i8**) #4

; Function Attrs: nounwind uwtable
define void @font_prepare_for_face(%struct.frame* %f, %struct.face* %face) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %face.addr = alloca %struct.face*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.face* %face, %struct.face** %face.addr, align 8
  %0 = load %struct.face*, %struct.face** %face.addr, align 8
  %font = getelementptr inbounds %struct.face, %struct.face* %0, i32 0, i32 10
  %1 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %1, i32 0, i32 18
  %2 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %prepare_face = getelementptr inbounds %struct.font_driver, %struct.font_driver* %2, i32 0, i32 9
  %3 = load void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)** %prepare_face, align 8
  %tobool = icmp ne void (%struct.frame*, %struct.face*)* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.face*, %struct.face** %face.addr, align 8
  %font1 = getelementptr inbounds %struct.face, %struct.face* %4, i32 0, i32 10
  %5 = load %struct.font*, %struct.font** %font1, align 8
  %driver2 = getelementptr inbounds %struct.font, %struct.font* %5, i32 0, i32 18
  %6 = load %struct.font_driver*, %struct.font_driver** %driver2, align 8
  %prepare_face3 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %6, i32 0, i32 9
  %7 = load void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)** %prepare_face3, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %9 = load %struct.face*, %struct.face** %face.addr, align 8
  call void %7(%struct.frame* %8, %struct.face* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @font_done_for_face(%struct.frame* %f, %struct.face* %face) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %face.addr = alloca %struct.face*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.face* %face, %struct.face** %face.addr, align 8
  %0 = load %struct.face*, %struct.face** %face.addr, align 8
  %font = getelementptr inbounds %struct.face, %struct.face* %0, i32 0, i32 10
  %1 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %1, i32 0, i32 18
  %2 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %done_face = getelementptr inbounds %struct.font_driver, %struct.font_driver* %2, i32 0, i32 10
  %3 = load void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)** %done_face, align 8
  %tobool = icmp ne void (%struct.frame*, %struct.face*)* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.face*, %struct.face** %face.addr, align 8
  %font1 = getelementptr inbounds %struct.face, %struct.face* %4, i32 0, i32 10
  %5 = load %struct.font*, %struct.font** %font1, align 8
  %driver2 = getelementptr inbounds %struct.font, %struct.font* %5, i32 0, i32 18
  %6 = load %struct.font_driver*, %struct.font_driver** %driver2, align 8
  %done_face3 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %6, i32 0, i32 10
  %7 = load void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)** %done_face3, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %9 = load %struct.face*, %struct.face** %face.addr, align 8
  call void %7(%struct.frame* %8, %struct.face* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @font_open_by_spec(%struct.frame* %f, i64 %spec) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %spec.addr = alloca i64, align 8
  %attrs = alloca [19 x i64], align 16
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %spec, i64* %spec.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i64 2
  store i64 %call, i64* %arrayidx, align 8
  %arrayidx1 = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i64 1
  store i64 %call, i64* %arrayidx1, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 707)
  %arrayidx3 = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i64 6
  store i64 %call2, i64* %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i64 5
  store i64 %call2, i64* %arrayidx4, align 8
  %arrayidx5 = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i64 3
  store i64 %call2, i64* %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i64 4
  store i64 482, i64* %arrayidx6, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx8 = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i64 15
  store i64 %call7, i64* %arrayidx8, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %arraydecay = getelementptr inbounds [19 x i64], [19 x i64]* %attrs, i32 0, i32 0
  %1 = load i64, i64* %spec.addr, align 8
  %call9 = call i64 @font_load_for_lface(%struct.frame* %0, i64* %arraydecay, i64 %1)
  ret i64 %call9
}

; Function Attrs: nounwind uwtable
define i64 @font_open_by_name(%struct.frame* %f, i64 %name) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %name.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %.compoundliteral = alloca [2 x i64], align 8
  %ret = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %name, i64* %name.addr, align 8
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i64 0, i64 0
  %call = call i64 @builtin_lisp_symbol(i32 86)
  store i64 %call, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %0 = load i64, i64* %name.addr, align 8
  store i64 %0, i64* %arrayinit.element
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i32 0, i32 0
  %call1 = call i64 @Ffont_spec(i64 2, i64* %arraydecay)
  store i64 %call1, i64* %spec, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %2 = load i64, i64* %spec, align 8
  %call2 = call i64 @font_open_by_spec(%struct.frame* %1, i64 %2)
  store i64 %call2, i64* %ret, align 8
  %3 = load i64, i64* %ret, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call3
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %ret, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 133)
  %5 = load i64, i64* %name.addr, align 8
  %call5 = call i64 @font_put_extra(i64 %4, i64 %call4, i64 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i64, i64* %ret, align 8
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define void @register_font_driver(%struct.font_driver* %driver, %struct.frame* %f) #0 {
entry:
  %driver.addr = alloca %struct.font_driver*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %root = alloca %struct.font_driver_list*, align 8
  %prev = alloca %struct.font_driver_list*, align 8
  %list = alloca %struct.font_driver_list*, align 8
  store %struct.font_driver* %driver, %struct.font_driver** %driver.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool = icmp ne %struct.frame* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 63
  %2 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.font_driver_list*, %struct.font_driver_list** @font_driver_list, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.font_driver_list* [ %2, %cond.true ], [ %3, %cond.false ]
  store %struct.font_driver_list* %cond, %struct.font_driver_list** %root, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool1 = icmp ne %struct.frame* %4, null
  br i1 %tobool1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %draw = getelementptr inbounds %struct.font_driver, %struct.font_driver* %5, i32 0, i32 14
  %6 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw, align 8
  %tobool2 = icmp ne i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)* %6, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %7, i32 0, i32 0
  %8 = load i64, i64* %type, align 8
  %call = call i64 @SYMBOL_NAME(i64 %8)
  %call3 = call i8* @SDATA(i64 %call)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.16, i32 0, i32 0), i8* %call3) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true, %cond.end
  store %struct.font_driver_list* null, %struct.font_driver_list** %prev, align 8
  %9 = load %struct.font_driver_list*, %struct.font_driver_list** %root, align 8
  store %struct.font_driver_list* %9, %struct.font_driver_list** %list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool4 = icmp ne %struct.font_driver_list* %10, null
  br i1 %tobool4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %driver5 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %11, i32 0, i32 1
  %12 = load %struct.font_driver*, %struct.font_driver** %driver5, align 8
  %type6 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %12, i32 0, i32 0
  %13 = load i64, i64* %type6, align 8
  %14 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type7 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %14, i32 0, i32 0
  %15 = load i64, i64* %type7, align 8
  %cmp = icmp eq i64 %13, %15
  br i1 %cmp, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %for.body
  %16 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type9 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %16, i32 0, i32 0
  %17 = load i64, i64* %type9, align 8
  %call10 = call i64 @SYMBOL_NAME(i64 %17)
  %call11 = call i8* @SDATA(i64 %call10)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.17, i32 0, i32 0), i8* %call11) #7
  unreachable

if.end.12:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.12
  %18 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  store %struct.font_driver_list* %18, %struct.font_driver_list** %prev, align 8
  %19 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %19, i32 0, i32 2
  %20 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %20, %struct.font_driver_list** %list, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call13 = call noalias i8* @xmalloc(i64 24)
  %21 = bitcast i8* %call13 to %struct.font_driver_list*
  store %struct.font_driver_list* %21, %struct.font_driver_list** %list, align 8
  %22 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %22, i32 0, i32 0
  store i8 0, i8* %on, align 1
  %23 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %24 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %driver14 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %24, i32 0, i32 1
  store %struct.font_driver* %23, %struct.font_driver** %driver14, align 8
  %25 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next15 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %25, i32 0, i32 2
  store %struct.font_driver_list* null, %struct.font_driver_list** %next15, align 8
  %26 = load %struct.font_driver_list*, %struct.font_driver_list** %prev, align 8
  %tobool16 = icmp ne %struct.font_driver_list* %26, null
  br i1 %tobool16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %for.end
  %27 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %28 = load %struct.font_driver_list*, %struct.font_driver_list** %prev, align 8
  %next18 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %28, i32 0, i32 2
  store %struct.font_driver_list* %27, %struct.font_driver_list** %next18, align 8
  br label %if.end.24

if.else:                                          ; preds = %for.end
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool19 = icmp ne %struct.frame* %29, null
  br i1 %tobool19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.else
  %30 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list21 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 63
  store %struct.font_driver_list* %30, %struct.font_driver_list** %font_driver_list21, align 8
  br label %if.end.23

if.else.22:                                       ; preds = %if.else
  %32 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  store %struct.font_driver_list* %32, %struct.font_driver_list** @font_driver_list, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.22, %if.then.20
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then.17
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool25 = icmp ne %struct.frame* %33, null
  br i1 %tobool25, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %if.end.24
  %34 = load i32, i32* @num_font_drivers, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* @num_font_drivers, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %if.end.24
  ret void
}

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

; Function Attrs: nounwind uwtable
define void @free_font_driver_list(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %list = alloca %struct.font_driver_list*, align 8
  %next = alloca %struct.font_driver_list*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 63
  %1 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %1, %struct.font_driver_list** %list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool = icmp ne %struct.font_driver_list* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next1 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %3, i32 0, i32 2
  %4 = load %struct.font_driver_list*, %struct.font_driver_list** %next1, align 8
  store %struct.font_driver_list* %4, %struct.font_driver_list** %next, align 8
  %5 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %6 = bitcast %struct.font_driver_list* %5 to i8*
  call void @xfree(i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %7, %struct.font_driver_list** %list, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list2 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 63
  store %struct.font_driver_list* null, %struct.font_driver_list** %font_driver_list2, align 8
  ret void
}

declare void @xfree(i8*) #1

; Function Attrs: nounwind uwtable
define i64 @font_update_drivers(%struct.frame* %f, i64 %new_drivers) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %new_drivers.addr = alloca i64, align 8
  %active_drivers = alloca i64, align 8
  %list = alloca %struct.font_driver_list*, align 8
  %driver = alloca %struct.font_driver*, align 8
  %list_table = alloca %struct.font_driver_list**, align 8
  %next37 = alloca %struct.font_driver_list**, align 8
  %tail = alloca i64, align 8
  %i = alloca i32, align 4
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %driver126 = alloca %struct.font_driver*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_drivers, i64* %new_drivers.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %active_drivers, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 63
  %1 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %1, %struct.font_driver_list** %list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool = icmp ne %struct.font_driver_list* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %driver1 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %3, i32 0, i32 1
  %4 = load %struct.font_driver*, %struct.font_driver** %driver1, align 8
  store %struct.font_driver* %4, %struct.font_driver** %driver, align 8
  %5 = load i64, i64* %new_drivers.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %5, %call2
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.body
  %6 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %6, i32 0, i32 0
  %7 = load i64, i64* %type, align 8
  %8 = load i64, i64* %new_drivers.addr, align 8
  %call3 = call i64 @Fmemq(i64 %7, i64 %8)
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %call3, %call4
  %lnot = xor i1 %cmp5, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.body
  %9 = phi i1 [ true, %for.body ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32
  %10 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %10, i32 0, i32 0
  %11 = load i8, i8* %on, align 1
  %tobool6 = trunc i8 %11 to i1
  %conv = zext i1 %tobool6 to i32
  %cmp7 = icmp ne i32 %lor.ext, %conv
  br i1 %cmp7, label %if.then, label %if.end.26

if.then:                                          ; preds = %lor.end
  %12 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on9 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %12, i32 0, i32 0
  %13 = load i8, i8* %on9, align 1
  %tobool10 = trunc i8 %13 to i1
  br i1 %tobool10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.then
  %14 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %end_for_frame = getelementptr inbounds %struct.font_driver, %struct.font_driver* %14, i32 0, i32 21
  %15 = load i32 (%struct.frame*)*, i32 (%struct.frame*)** %end_for_frame, align 8
  %tobool12 = icmp ne i32 (%struct.frame*)* %15, null
  br i1 %tobool12, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %if.then.11
  %16 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %end_for_frame14 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %16, i32 0, i32 21
  %17 = load i32 (%struct.frame*)*, i32 (%struct.frame*)** %end_for_frame14, align 8
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call15 = call i32 %17(%struct.frame* %18)
  br label %if.end

if.end:                                           ; preds = %if.then.13, %if.then.11
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %20 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  call void @font_finish_cache(%struct.frame* %19, %struct.font_driver* %20)
  %21 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on16 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %21, i32 0, i32 0
  store i8 0, i8* %on16, align 1
  br label %if.end.25

if.else:                                          ; preds = %if.then
  %22 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %start_for_frame = getelementptr inbounds %struct.font_driver, %struct.font_driver* %22, i32 0, i32 20
  %23 = load i32 (%struct.frame*)*, i32 (%struct.frame*)** %start_for_frame, align 8
  %tobool17 = icmp ne i32 (%struct.frame*)* %23, null
  br i1 %tobool17, label %lor.lhs.false, label %if.then.22

lor.lhs.false:                                    ; preds = %if.else
  %24 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %start_for_frame18 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %24, i32 0, i32 20
  %25 = load i32 (%struct.frame*)*, i32 (%struct.frame*)** %start_for_frame18, align 8
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call19 = call i32 %25(%struct.frame* %26)
  %cmp20 = icmp eq i32 %call19, 0
  br i1 %cmp20, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %lor.lhs.false, %if.else
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %28 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  call void @font_prepare_cache(%struct.frame* %27, %struct.font_driver* %28)
  %29 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on23 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %29, i32 0, i32 0
  store i8 1, i8* %on23, align 1
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %lor.lhs.false
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %lor.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %30 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %30, i32 0, i32 2
  %31 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %31, %struct.font_driver_list** %list, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load i64, i64* %new_drivers.addr, align 8
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp28 = icmp eq i64 %32, %call27
  br i1 %cmp28, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %for.end
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call31, i64* %retval
  br label %return

if.end.32:                                        ; preds = %for.end
  %33 = load i64, i64* %new_drivers.addr, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp34 = icmp eq i64 %33, %call33
  br i1 %cmp34, label %if.end.142, label %if.then.36

if.then.36:                                       ; preds = %if.end.32
  store i64 16384, i64* %sa_avail, align 8
  %call38 = call i64 @SPECPDL_INDEX()
  store i64 %call38, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %if.then.36
  %34 = load i32, i32* @num_font_drivers, align 4
  %add = add nsw i32 %34, 1
  %conv39 = sext i32 %add to i64
  %35 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %35, 8
  %div40 = udiv i64 %div, 1
  %cmp41 = icmp ule i64 %conv39, %div40
  br i1 %cmp41, label %if.then.43, label %if.else.49

if.then.43:                                       ; preds = %do.body
  %36 = load i32, i32* @num_font_drivers, align 4
  %add44 = add nsw i32 %36, 1
  %conv45 = sext i32 %add44 to i64
  %mul = mul i64 8, %conv45
  %37 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %37, %mul
  store i64 %sub, i64* %sa_avail, align 8
  %38 = load i32, i32* @num_font_drivers, align 4
  %add46 = add nsw i32 %38, 1
  %conv47 = sext i32 %add46 to i64
  %mul48 = mul i64 8, %conv47
  %39 = alloca i8, i64 %mul48
  %40 = bitcast i8* %39 to %struct.font_driver_list**
  store %struct.font_driver_list** %40, %struct.font_driver_list*** %list_table, align 8
  br label %if.end.53

if.else.49:                                       ; preds = %do.body
  %41 = load i32, i32* @num_font_drivers, align 4
  %add50 = add nsw i32 %41, 1
  %conv51 = sext i32 %add50 to i64
  %call52 = call noalias i8* @xnmalloc(i64 %conv51, i64 8)
  %42 = bitcast i8* %call52 to %struct.font_driver_list**
  store %struct.font_driver_list** %42, %struct.font_driver_list*** %list_table, align 8
  store i8 1, i8* %sa_must_free, align 1
  %43 = load %struct.font_driver_list**, %struct.font_driver_list*** %list_table, align 8
  %44 = bitcast %struct.font_driver_list** %43 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %44)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.49, %if.then.43
  br label %do.end

do.end:                                           ; preds = %if.end.53
  store i32 0, i32* %i, align 4
  %45 = load i64, i64* %new_drivers.addr, align 8
  store i64 %45, i64* %tail, align 8
  br label %for.cond.54

for.cond.54:                                      ; preds = %for.inc.80, %do.end
  %46 = load i64, i64* %tail, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp56 = icmp eq i64 %46, %call55
  %lnot58 = xor i1 %cmp56, true
  br i1 %lnot58, label %for.body.59, label %for.end.82

for.body.59:                                      ; preds = %for.cond.54
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list60 = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 63
  %48 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list60, align 8
  store %struct.font_driver_list* %48, %struct.font_driver_list** %list, align 8
  br label %for.cond.61

for.cond.61:                                      ; preds = %for.inc.74, %for.body.59
  %49 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool62 = icmp ne %struct.font_driver_list* %49, null
  br i1 %tobool62, label %for.body.63, label %for.end.76

for.body.63:                                      ; preds = %for.cond.61
  %50 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on64 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %50, i32 0, i32 0
  %51 = load i8, i8* %on64, align 1
  %tobool65 = trunc i8 %51 to i1
  br i1 %tobool65, label %land.lhs.true, label %if.end.73

land.lhs.true:                                    ; preds = %for.body.63
  %52 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %driver67 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %52, i32 0, i32 1
  %53 = load %struct.font_driver*, %struct.font_driver** %driver67, align 8
  %type68 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %53, i32 0, i32 0
  %54 = load i64, i64* %type68, align 8
  %55 = load i64, i64* %tail, align 8
  %sub69 = sub nsw i64 %55, 3
  %56 = inttoptr i64 %sub69 to i8*
  %57 = bitcast i8* %56 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %57, i32 0, i32 0
  %58 = load i64, i64* %car, align 8
  %cmp70 = icmp eq i64 %54, %58
  br i1 %cmp70, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %land.lhs.true
  br label %for.end.76

if.end.73:                                        ; preds = %land.lhs.true, %for.body.63
  br label %for.inc.74

for.inc.74:                                       ; preds = %if.end.73
  %59 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next75 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %59, i32 0, i32 2
  %60 = load %struct.font_driver_list*, %struct.font_driver_list** %next75, align 8
  store %struct.font_driver_list* %60, %struct.font_driver_list** %list, align 8
  br label %for.cond.61

for.end.76:                                       ; preds = %if.then.72, %for.cond.61
  %61 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool77 = icmp ne %struct.font_driver_list* %61, null
  br i1 %tobool77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %for.end.76
  %62 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %63 = load i32, i32* %i, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %63 to i64
  %64 = load %struct.font_driver_list**, %struct.font_driver_list*** %list_table, align 8
  %arrayidx = getelementptr inbounds %struct.font_driver_list*, %struct.font_driver_list** %64, i64 %idxprom
  store %struct.font_driver_list* %62, %struct.font_driver_list** %arrayidx, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.78, %for.end.76
  br label %for.inc.80

for.inc.80:                                       ; preds = %if.end.79
  %65 = load i64, i64* %tail, align 8
  %sub81 = sub nsw i64 %65, 3
  %66 = inttoptr i64 %sub81 to i8*
  %67 = bitcast i8* %66 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %67, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %68 = load i64, i64* %cdr, align 8
  store i64 %68, i64* %tail, align 8
  br label %for.cond.54

for.end.82:                                       ; preds = %for.cond.54
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list83 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 63
  %70 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list83, align 8
  store %struct.font_driver_list* %70, %struct.font_driver_list** %list, align 8
  br label %for.cond.84

for.cond.84:                                      ; preds = %for.inc.94, %for.end.82
  %71 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool85 = icmp ne %struct.font_driver_list* %71, null
  br i1 %tobool85, label %for.body.86, label %for.end.96

for.body.86:                                      ; preds = %for.cond.84
  %72 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on87 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %72, i32 0, i32 0
  %73 = load i8, i8* %on87, align 1
  %tobool88 = trunc i8 %73 to i1
  br i1 %tobool88, label %if.end.93, label %if.then.89

if.then.89:                                       ; preds = %for.body.86
  %74 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %75 = load i32, i32* %i, align 4
  %inc90 = add nsw i32 %75, 1
  store i32 %inc90, i32* %i, align 4
  %idxprom91 = sext i32 %75 to i64
  %76 = load %struct.font_driver_list**, %struct.font_driver_list*** %list_table, align 8
  %arrayidx92 = getelementptr inbounds %struct.font_driver_list*, %struct.font_driver_list** %76, i64 %idxprom91
  store %struct.font_driver_list* %74, %struct.font_driver_list** %arrayidx92, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.89, %for.body.86
  br label %for.inc.94

for.inc.94:                                       ; preds = %if.end.93
  %77 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next95 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %77, i32 0, i32 2
  %78 = load %struct.font_driver_list*, %struct.font_driver_list** %next95, align 8
  store %struct.font_driver_list* %78, %struct.font_driver_list** %list, align 8
  br label %for.cond.84

for.end.96:                                       ; preds = %for.cond.84
  %79 = load i32, i32* %i, align 4
  %idxprom97 = sext i32 %79 to i64
  %80 = load %struct.font_driver_list**, %struct.font_driver_list*** %list_table, align 8
  %arrayidx98 = getelementptr inbounds %struct.font_driver_list*, %struct.font_driver_list** %80, i64 %idxprom97
  store %struct.font_driver_list* null, %struct.font_driver_list** %arrayidx98, align 8
  %81 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list99 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 63
  store %struct.font_driver_list** %font_driver_list99, %struct.font_driver_list*** %next37, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.100

for.cond.100:                                     ; preds = %for.inc.108, %for.end.96
  %82 = load i32, i32* %i, align 4
  %idxprom101 = sext i32 %82 to i64
  %83 = load %struct.font_driver_list**, %struct.font_driver_list*** %list_table, align 8
  %arrayidx102 = getelementptr inbounds %struct.font_driver_list*, %struct.font_driver_list** %83, i64 %idxprom101
  %84 = load %struct.font_driver_list*, %struct.font_driver_list** %arrayidx102, align 8
  %tobool103 = icmp ne %struct.font_driver_list* %84, null
  br i1 %tobool103, label %for.body.104, label %for.end.110

for.body.104:                                     ; preds = %for.cond.100
  %85 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %85 to i64
  %86 = load %struct.font_driver_list**, %struct.font_driver_list*** %list_table, align 8
  %arrayidx106 = getelementptr inbounds %struct.font_driver_list*, %struct.font_driver_list** %86, i64 %idxprom105
  %87 = load %struct.font_driver_list*, %struct.font_driver_list** %arrayidx106, align 8
  %88 = load %struct.font_driver_list**, %struct.font_driver_list*** %next37, align 8
  store %struct.font_driver_list* %87, %struct.font_driver_list** %88, align 8
  %89 = load %struct.font_driver_list**, %struct.font_driver_list*** %next37, align 8
  %90 = load %struct.font_driver_list*, %struct.font_driver_list** %89, align 8
  %next107 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %90, i32 0, i32 2
  store %struct.font_driver_list** %next107, %struct.font_driver_list*** %next37, align 8
  br label %for.inc.108

for.inc.108:                                      ; preds = %for.body.104
  %91 = load i32, i32* %i, align 4
  %inc109 = add nsw i32 %91, 1
  store i32 %inc109, i32* %i, align 4
  br label %for.cond.100

for.end.110:                                      ; preds = %for.cond.100
  %92 = load %struct.font_driver_list**, %struct.font_driver_list*** %next37, align 8
  store %struct.font_driver_list* null, %struct.font_driver_list** %92, align 8
  br label %do.body.111

do.body.111:                                      ; preds = %for.end.110
  %93 = load i8, i8* %sa_must_free, align 1
  %tobool112 = trunc i8 %93 to i1
  br i1 %tobool112, label %if.then.113, label %if.end.116

if.then.113:                                      ; preds = %do.body.111
  store i8 0, i8* %sa_must_free, align 1
  %94 = load i64, i64* %sa_count, align 8
  %call114 = call i64 @builtin_lisp_symbol(i32 0)
  %call115 = call i64 @unbind_to(i64 %94, i64 %call114)
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.113, %do.body.111
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  %95 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list118 = getelementptr inbounds %struct.frame, %struct.frame* %95, i32 0, i32 63
  %96 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list118, align 8
  %on119 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %96, i32 0, i32 0
  %97 = load i8, i8* %on119, align 1
  %tobool120 = trunc i8 %97 to i1
  br i1 %tobool120, label %if.end.141, label %if.then.121

if.then.121:                                      ; preds = %do.end.117
  %98 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list122 = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 63
  %99 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list122, align 8
  store %struct.font_driver_list* %99, %struct.font_driver_list** %list, align 8
  br label %for.cond.123

for.cond.123:                                     ; preds = %for.inc.138, %if.then.121
  %100 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool124 = icmp ne %struct.font_driver_list* %100, null
  br i1 %tobool124, label %for.body.125, label %for.end.140

for.body.125:                                     ; preds = %for.cond.123
  %101 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %driver127 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %101, i32 0, i32 1
  %102 = load %struct.font_driver*, %struct.font_driver** %driver127, align 8
  store %struct.font_driver* %102, %struct.font_driver** %driver126, align 8
  %103 = load %struct.font_driver*, %struct.font_driver** %driver126, align 8
  %start_for_frame128 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %103, i32 0, i32 20
  %104 = load i32 (%struct.frame*)*, i32 (%struct.frame*)** %start_for_frame128, align 8
  %tobool129 = icmp ne i32 (%struct.frame*)* %104, null
  br i1 %tobool129, label %lor.lhs.false.130, label %if.then.135

lor.lhs.false.130:                                ; preds = %for.body.125
  %105 = load %struct.font_driver*, %struct.font_driver** %driver126, align 8
  %start_for_frame131 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %105, i32 0, i32 20
  %106 = load i32 (%struct.frame*)*, i32 (%struct.frame*)** %start_for_frame131, align 8
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call132 = call i32 %106(%struct.frame* %107)
  %cmp133 = icmp eq i32 %call132, 0
  br i1 %cmp133, label %if.then.135, label %if.end.137

if.then.135:                                      ; preds = %lor.lhs.false.130, %for.body.125
  %108 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %109 = load %struct.font_driver*, %struct.font_driver** %driver126, align 8
  call void @font_prepare_cache(%struct.frame* %108, %struct.font_driver* %109)
  %110 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on136 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %110, i32 0, i32 0
  store i8 1, i8* %on136, align 1
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.135, %lor.lhs.false.130
  br label %for.inc.138

for.inc.138:                                      ; preds = %if.end.137
  %111 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next139 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %111, i32 0, i32 2
  %112 = load %struct.font_driver_list*, %struct.font_driver_list** %next139, align 8
  store %struct.font_driver_list* %112, %struct.font_driver_list** %list, align 8
  br label %for.cond.123

for.end.140:                                      ; preds = %for.cond.123
  br label %if.end.141

if.end.141:                                       ; preds = %for.end.140, %do.end.117
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.141, %if.end.32
  %113 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list143 = getelementptr inbounds %struct.frame, %struct.frame* %113, i32 0, i32 63
  %114 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list143, align 8
  store %struct.font_driver_list* %114, %struct.font_driver_list** %list, align 8
  br label %for.cond.144

for.cond.144:                                     ; preds = %for.inc.155, %if.end.142
  %115 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %tobool145 = icmp ne %struct.font_driver_list* %115, null
  br i1 %tobool145, label %for.body.146, label %for.end.157

for.body.146:                                     ; preds = %for.cond.144
  %116 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %on147 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %116, i32 0, i32 0
  %117 = load i8, i8* %on147, align 1
  %tobool148 = trunc i8 %117 to i1
  br i1 %tobool148, label %if.then.149, label %if.end.154

if.then.149:                                      ; preds = %for.body.146
  %118 = load i64, i64* %active_drivers, align 8
  %119 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %driver150 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %119, i32 0, i32 1
  %120 = load %struct.font_driver*, %struct.font_driver** %driver150, align 8
  %type151 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %120, i32 0, i32 0
  %121 = load i64, i64* %type151, align 8
  %call152 = call i64 @list1(i64 %121)
  %call153 = call i64 @nconc2(i64 %118, i64 %call152)
  store i64 %call153, i64* %active_drivers, align 8
  br label %if.end.154

if.end.154:                                       ; preds = %if.then.149, %for.body.146
  br label %for.inc.155

for.inc.155:                                      ; preds = %if.end.154
  %122 = load %struct.font_driver_list*, %struct.font_driver_list** %list, align 8
  %next156 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %122, i32 0, i32 2
  %123 = load %struct.font_driver_list*, %struct.font_driver_list** %next156, align 8
  store %struct.font_driver_list* %123, %struct.font_driver_list** %list, align 8
  br label %for.cond.144

for.end.157:                                      ; preds = %for.cond.144
  %124 = load i64, i64* %active_drivers, align 8
  store i64 %124, i64* %retval
  br label %return

return:                                           ; preds = %for.end.157, %if.then.30
  %125 = load i64, i64* %retval
  ret i64 %125
}

; Function Attrs: nounwind uwtable
define internal void @font_finish_cache(%struct.frame* %f, %struct.font_driver* %driver) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %driver.addr = alloca %struct.font_driver*, align 8
  %cache = alloca i64, align 8
  %val = alloca i64, align 8
  %tmp = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.font_driver* %driver, %struct.font_driver** %driver.addr, align 8
  %0 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %get_cache = getelementptr inbounds %struct.font_driver, %struct.font_driver* %0, i32 0, i32 2
  %1 = load i64 (%struct.frame*)*, i64 (%struct.frame*)** %get_cache, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 %1(%struct.frame* %2)
  store i64 %call, i64* %cache, align 8
  %3 = load i64, i64* %cache, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %6 = load i64, i64* %cdr, align 8
  store i64 %6, i64* %val, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i64, i64* %val, align 8
  %and = and i64 %7, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i64, i64* %val, align 8
  %sub2 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub2 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car, align 8
  %sub3 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub3 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %car4 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 0
  %14 = load i64, i64* %car4, align 8
  %15 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %15, i32 0, i32 0
  %16 = load i64, i64* %type, align 8
  %cmp5 = icmp eq i64 %14, %16
  %lnot = xor i1 %cmp5, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %17, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %18 = load i64, i64* %val, align 8
  store i64 %18, i64* %cache, align 8
  %19 = load i64, i64* %val, align 8
  %sub7 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub7 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %u8 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 1
  %cdr9 = bitcast %union.anon.10* %u8 to i64*
  %22 = load i64, i64* %cdr9, align 8
  store i64 %22, i64* %val, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %23 = load i64, i64* %val, align 8
  %sub10 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub10 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %car11 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 0
  %26 = load i64, i64* %car11, align 8
  %sub12 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub12 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %u13 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 1
  %cdr14 = bitcast %union.anon.10* %u13 to i64*
  %29 = load i64, i64* %cdr14, align 8
  store i64 %29, i64* %tmp, align 8
  %30 = load i64, i64* %tmp, align 8
  %31 = load i64, i64* %tmp, align 8
  %sub15 = sub nsw i64 %31, 3
  %32 = inttoptr i64 %sub15 to i8*
  %33 = bitcast i8* %32 to %struct.Lisp_Cons*
  %car16 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %33, i32 0, i32 0
  %34 = load i64, i64* %car16, align 8
  %shr = ashr i64 %34, 2
  %sub17 = sub nsw i64 %shr, 1
  %shl = shl i64 %sub17, 2
  %add = add i64 %shl, 2
  call void @XSETCAR(i64 %30, i64 %add)
  %35 = load i64, i64* %tmp, align 8
  %sub18 = sub nsw i64 %35, 3
  %36 = inttoptr i64 %sub18 to i8*
  %37 = bitcast i8* %36 to %struct.Lisp_Cons*
  %car19 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %37, i32 0, i32 0
  %38 = load i64, i64* %car19, align 8
  %shr20 = ashr i64 %38, 2
  %cmp21 = icmp eq i64 %shr20, 0
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %40 = load i64, i64* %val, align 8
  %sub23 = sub nsw i64 %40, 3
  %41 = inttoptr i64 %sub23 to i8*
  %42 = bitcast i8* %41 to %struct.Lisp_Cons*
  %car24 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %42, i32 0, i32 0
  %43 = load i64, i64* %car24, align 8
  %44 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  call void @font_clear_cache(%struct.frame* %39, i64 %43, %struct.font_driver* %44)
  %45 = load i64, i64* %cache, align 8
  %46 = load i64, i64* %val, align 8
  %sub25 = sub nsw i64 %46, 3
  %47 = inttoptr i64 %sub25 to i8*
  %48 = bitcast i8* %47 to %struct.Lisp_Cons*
  %u26 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %48, i32 0, i32 1
  %cdr27 = bitcast %union.anon.10* %u26 to i64*
  %49 = load i64, i64* %cdr27, align 8
  call void @XSETCDR(i64 %45, i64 %49)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @font_prepare_cache(%struct.frame* %f, %struct.font_driver* %driver) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %driver.addr = alloca %struct.font_driver*, align 8
  %cache = alloca i64, align 8
  %val = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.font_driver* %driver, %struct.font_driver** %driver.addr, align 8
  %0 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %get_cache = getelementptr inbounds %struct.font_driver, %struct.font_driver* %0, i32 0, i32 2
  %1 = load i64 (%struct.frame*)*, i64 (%struct.frame*)** %get_cache, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 %1(%struct.frame* %2)
  store i64 %call, i64* %cache, align 8
  %3 = load i64, i64* %cache, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %6 = load i64, i64* %cdr, align 8
  store i64 %6, i64* %val, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i64, i64* %val, align 8
  %and = and i64 %7, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i64, i64* %val, align 8
  %sub2 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub2 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car, align 8
  %sub3 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub3 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %car4 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 0
  %14 = load i64, i64* %car4, align 8
  %15 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %15, i32 0, i32 0
  %16 = load i64, i64* %type, align 8
  %cmp5 = icmp eq i64 %14, %16
  %lnot = xor i1 %cmp5, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %17, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %18 = load i64, i64* %val, align 8
  %sub7 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub7 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %u8 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 1
  %cdr9 = bitcast %union.anon.10* %u8 to i64*
  %21 = load i64, i64* %cdr9, align 8
  store i64 %21, i64* %val, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %22 = load i64, i64* %val, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %22, %call10
  br i1 %cmp11, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %23 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type13 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %23, i32 0, i32 0
  %24 = load i64, i64* %type13, align 8
  %call14 = call i64 @list2(i64 %24, i64 6)
  store i64 %call14, i64* %val, align 8
  %25 = load i64, i64* %cache, align 8
  %26 = load i64, i64* %val, align 8
  %27 = load i64, i64* %cache, align 8
  %sub15 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub15 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %u16 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 1
  %cdr17 = bitcast %union.anon.10* %u16 to i64*
  %30 = load i64, i64* %cdr17, align 8
  %call18 = call i64 @Fcons(i64 %26, i64 %30)
  call void @XSETCDR(i64 %25, i64 %call18)
  br label %if.end

if.else:                                          ; preds = %while.end
  %31 = load i64, i64* %val, align 8
  %sub19 = sub nsw i64 %31, 3
  %32 = inttoptr i64 %sub19 to i8*
  %33 = bitcast i8* %32 to %struct.Lisp_Cons*
  %car20 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %33, i32 0, i32 0
  %34 = load i64, i64* %car20, align 8
  %sub21 = sub nsw i64 %34, 3
  %35 = inttoptr i64 %sub21 to i8*
  %36 = bitcast i8* %35 to %struct.Lisp_Cons*
  %u22 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %36, i32 0, i32 1
  %cdr23 = bitcast %union.anon.10* %u22 to i64*
  %37 = load i64, i64* %cdr23, align 8
  store i64 %37, i64* %val, align 8
  %38 = load i64, i64* %val, align 8
  %39 = load i64, i64* %val, align 8
  %sub24 = sub nsw i64 %39, 3
  %40 = inttoptr i64 %sub24 to i8*
  %41 = bitcast i8* %40 to %struct.Lisp_Cons*
  %car25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %41, i32 0, i32 0
  %42 = load i64, i64* %car25, align 8
  %shr = ashr i64 %42, 2
  %add = add nsw i64 %shr, 1
  %shl = shl i64 %add, 2
  %add26 = add i64 %shl, 2
  call void @XSETCAR(i64 %38, i64 %add26)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare noalias i8* @xnmalloc(i64, i64) #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define void @font_put_frame_data(%struct.frame* %f, i64 %driver, i8* %data) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %driver.addr = alloca i64, align 8
  %data.addr = alloca i8*, align 8
  %val = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %driver, i64* %driver.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i64, i64* %driver.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 19
  %2 = load i64, i64* %font_data, align 8
  %call = call i64 @assq_no_quit(i64 %0, i64 %2)
  store i64 %call, i64* %val, align 8
  %3 = load i8*, i8** %data.addr, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %5 = load i64, i64* %val, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_data1 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 19
  %7 = load i64, i64* %font_data1, align 8
  %call2 = call i64 @Fdelq(i64 %5, i64 %7)
  call void @fset_font_data(%struct.frame* %4, i64 %call2)
  br label %if.end.11

if.else:                                          ; preds = %entry
  %8 = load i64, i64* %val, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %8, %call3
  br i1 %cmp, label %if.then.4, label %if.else.9

if.then.4:                                        ; preds = %if.else
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %10 = load i64, i64* %driver.addr, align 8
  %11 = load i8*, i8** %data.addr, align 8
  %call5 = call i64 @make_save_ptr(i8* %11)
  %call6 = call i64 @Fcons(i64 %10, i64 %call5)
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_data7 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 19
  %13 = load i64, i64* %font_data7, align 8
  %call8 = call i64 @Fcons(i64 %call6, i64 %13)
  call void @fset_font_data(%struct.frame* %9, i64 %call8)
  br label %if.end

if.else.9:                                        ; preds = %if.else
  %14 = load i64, i64* %val, align 8
  %15 = load i8*, i8** %data.addr, align 8
  %call10 = call i64 @make_save_ptr(i8* %15)
  call void @XSETCDR(i64 %14, i64 %call10)
  br label %if.end

if.end:                                           ; preds = %if.else.9, %if.then.4
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @fset_font_data(%struct.frame* %f, i64 %val) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %val.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 19
  store i64 %0, i64* %font_data, align 8
  ret void
}

declare i64 @make_save_ptr(i8*) #1

; Function Attrs: nounwind uwtable
define i8* @font_get_frame_data(%struct.frame* %f, i64 %driver) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %driver.addr = alloca i64, align 8
  %val = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %driver, i64* %driver.addr, align 8
  %0 = load i64, i64* %driver.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 19
  %2 = load i64, i64* %font_data, align 8
  %call = call i64 @assq_no_quit(i64 %0, i64 %2)
  store i64 %call, i64* %val, align 8
  %3 = load i64, i64* %val, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %4, 3
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %6, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %7 = load i64, i64* %cdr, align 8
  %call2 = call i8* @XSAVE_POINTER(i64 %7, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call2, %cond.false ]
  ret i8* %cond
}

declare i8* @XSAVE_POINTER(i64, i32) #1

; Function Attrs: nounwind uwtable
define void @font_filter_properties(i64 %font, i64 %alist, i8** %boolean_properties, i8** %non_boolean_properties) #0 {
entry:
  %font.addr = alloca i64, align 8
  %alist.addr = alloca i64, align 8
  %boolean_properties.addr = alloca i8**, align 8
  %non_boolean_properties.addr = alloca i8**, align 8
  %it = alloca i64, align 8
  %i = alloca i32, align 4
  %key = alloca i64, align 8
  %val = alloca i64, align 8
  %keystr = alloca i8*, align 8
  %str = alloca i8*, align 8
  %key77 = alloca i64, align 8
  %val82 = alloca i64, align 8
  %keystr88 = alloca i8*, align 8
  store i64 %font, i64* %font.addr, align 8
  store i64 %alist, i64* %alist.addr, align 8
  store i8** %boolean_properties, i8*** %boolean_properties.addr, align 8
  store i8** %non_boolean_properties, i8*** %non_boolean_properties.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.63, %entry
  %0 = load i32, i32* %i, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i8**, i8*** %boolean_properties.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %idxprom
  %2 = load i8*, i8** %arrayidx, align 8
  %cmp = icmp ne i8* %2, null
  br i1 %cmp, label %for.body, label %for.end.64

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %alist.addr, align 8
  store i64 %3, i64* %it, align 8
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %4 = load i64, i64* %it, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %4, %call
  %lnot = xor i1 %cmp2, true
  br i1 %lnot, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %5 = load i64, i64* %it, align 8
  %sub = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 0
  %8 = load i64, i64* %car, align 8
  %sub4 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub4 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car5 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car5, align 8
  store i64 %11, i64* %key, align 8
  %12 = load i64, i64* %it, align 8
  %sub6 = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub6 to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car7 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car7, align 8
  %sub8 = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub8 to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %18 = load i64, i64* %cdr, align 8
  store i64 %18, i64* %val, align 8
  %19 = load i64, i64* %key, align 8
  %call9 = call i64 @SYMBOL_NAME(i64 %19)
  %call10 = call i8* @SSDATA(i64 %call9)
  store i8* %call10, i8** %keystr, align 8
  %20 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %20 to i64
  %21 = load i8**, i8*** %boolean_properties.addr, align 8
  %arrayidx12 = getelementptr inbounds i8*, i8** %21, i64 %idxprom11
  %22 = load i8*, i8** %arrayidx12, align 8
  %23 = load i8*, i8** %keystr, align 8
  %call13 = call i32 @strcmp(i8* %22, i8* %23) #6
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then, label %if.end.59

if.then:                                          ; preds = %for.body.3
  %24 = load i64, i64* %val, align 8
  %and = and i64 %24, 7
  %conv = trunc i64 %and to i32
  %and15 = and i32 %conv, -5
  %cmp16 = icmp eq i32 %and15, 2
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %25 = load i64, i64* %val, align 8
  %shr = ashr i64 %25, 2
  %tobool = icmp ne i64 %shr, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0)
  br label %cond.end.27

cond.false:                                       ; preds = %if.then
  %26 = load i64, i64* %val, align 8
  %and18 = and i64 %26, 7
  %conv19 = trunc i64 %and18 to i32
  %cmp20 = icmp eq i32 %conv19, 0
  br i1 %cmp20, label %cond.true.22, label %cond.false.25

cond.true.22:                                     ; preds = %cond.false
  %27 = load i64, i64* %val, align 8
  %call23 = call i64 @SYMBOL_NAME(i64 %27)
  %call24 = call i8* @SSDATA(i64 %call23)
  br label %cond.end

cond.false.25:                                    ; preds = %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false.25, %cond.true.22
  %cond26 = phi i8* [ %call24, %cond.true.22 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), %cond.false.25 ]
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.end, %cond.true
  %cond28 = phi i8* [ %cond, %cond.true ], [ %cond26, %cond.end ]
  store i8* %cond28, i8** %str, align 8
  %28 = load i8*, i8** %str, align 8
  %call29 = call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* %28) #6
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %if.then.55, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.27
  %29 = load i8*, i8** %str, align 8
  %call32 = call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* %29) #6
  %cmp33 = icmp eq i32 %call32, 0
  br i1 %cmp33, label %if.then.55, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %lor.lhs.false
  %30 = load i8*, i8** %str, align 8
  %call36 = call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i8* %30) #6
  %cmp37 = icmp eq i32 %call36, 0
  br i1 %cmp37, label %if.then.55, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.35
  %31 = load i8*, i8** %str, align 8
  %call40 = call i32 @strcmp(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %31) #6
  %cmp41 = icmp eq i32 %call40, 0
  br i1 %cmp41, label %if.then.55, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %lor.lhs.false.39
  %32 = load i8*, i8** %str, align 8
  %call44 = call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i8* %32) #6
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then.55, label %lor.lhs.false.47

lor.lhs.false.47:                                 ; preds = %lor.lhs.false.43
  %33 = load i8*, i8** %str, align 8
  %call48 = call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0), i8* %33) #6
  %cmp49 = icmp eq i32 %call48, 0
  br i1 %cmp49, label %if.then.55, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %lor.lhs.false.47
  %34 = load i8*, i8** %str, align 8
  %call52 = call i32 @strcmp(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* %34) #6
  %cmp53 = icmp eq i32 %call52, 0
  br i1 %cmp53, label %if.then.55, label %if.else

if.then.55:                                       ; preds = %lor.lhs.false.51, %lor.lhs.false.47, %lor.lhs.false.43, %lor.lhs.false.39, %lor.lhs.false.35, %lor.lhs.false, %cond.end.27
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call56, i64* %val, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false.51
  %call57 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call57, i64* %val, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.55
  %35 = load i64, i64* %font.addr, align 8
  %36 = load i64, i64* %key, align 8
  %37 = load i64, i64* %val, align 8
  %call58 = call i64 @Ffont_put(i64 %35, i64 %36, i64 %37)
  br label %if.end.59

if.end.59:                                        ; preds = %if.end, %for.body.3
  br label %for.inc

for.inc:                                          ; preds = %if.end.59
  %38 = load i64, i64* %it, align 8
  %sub60 = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub60 to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %u61 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 1
  %cdr62 = bitcast %union.anon.10* %u61 to i64*
  %41 = load i64, i64* %cdr62, align 8
  store i64 %41, i64* %it, align 8
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.end
  %42 = load i32, i32* %i, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end.64:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.65

for.cond.65:                                      ; preds = %for.inc.104, %for.end.64
  %43 = load i32, i32* %i, align 4
  %idxprom66 = sext i32 %43 to i64
  %44 = load i8**, i8*** %non_boolean_properties.addr, align 8
  %arrayidx67 = getelementptr inbounds i8*, i8** %44, i64 %idxprom66
  %45 = load i8*, i8** %arrayidx67, align 8
  %cmp68 = icmp ne i8* %45, null
  br i1 %cmp68, label %for.body.70, label %for.end.106

for.body.70:                                      ; preds = %for.cond.65
  %46 = load i64, i64* %alist.addr, align 8
  store i64 %46, i64* %it, align 8
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.99, %for.body.70
  %47 = load i64, i64* %it, align 8
  %call72 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp73 = icmp eq i64 %47, %call72
  %lnot75 = xor i1 %cmp73, true
  br i1 %lnot75, label %for.body.76, label %for.end.103

for.body.76:                                      ; preds = %for.cond.71
  %48 = load i64, i64* %it, align 8
  %sub78 = sub nsw i64 %48, 3
  %49 = inttoptr i64 %sub78 to i8*
  %50 = bitcast i8* %49 to %struct.Lisp_Cons*
  %car79 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %50, i32 0, i32 0
  %51 = load i64, i64* %car79, align 8
  %sub80 = sub nsw i64 %51, 3
  %52 = inttoptr i64 %sub80 to i8*
  %53 = bitcast i8* %52 to %struct.Lisp_Cons*
  %car81 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %53, i32 0, i32 0
  %54 = load i64, i64* %car81, align 8
  store i64 %54, i64* %key77, align 8
  %55 = load i64, i64* %it, align 8
  %sub83 = sub nsw i64 %55, 3
  %56 = inttoptr i64 %sub83 to i8*
  %57 = bitcast i8* %56 to %struct.Lisp_Cons*
  %car84 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %57, i32 0, i32 0
  %58 = load i64, i64* %car84, align 8
  %sub85 = sub nsw i64 %58, 3
  %59 = inttoptr i64 %sub85 to i8*
  %60 = bitcast i8* %59 to %struct.Lisp_Cons*
  %u86 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %60, i32 0, i32 1
  %cdr87 = bitcast %union.anon.10* %u86 to i64*
  %61 = load i64, i64* %cdr87, align 8
  store i64 %61, i64* %val82, align 8
  %62 = load i64, i64* %key77, align 8
  %call89 = call i64 @SYMBOL_NAME(i64 %62)
  %call90 = call i8* @SSDATA(i64 %call89)
  store i8* %call90, i8** %keystr88, align 8
  %63 = load i32, i32* %i, align 4
  %idxprom91 = sext i32 %63 to i64
  %64 = load i8**, i8*** %non_boolean_properties.addr, align 8
  %arrayidx92 = getelementptr inbounds i8*, i8** %64, i64 %idxprom91
  %65 = load i8*, i8** %arrayidx92, align 8
  %66 = load i8*, i8** %keystr88, align 8
  %call93 = call i32 @strcmp(i8* %65, i8* %66) #6
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then.96, label %if.end.98

if.then.96:                                       ; preds = %for.body.76
  %67 = load i64, i64* %font.addr, align 8
  %68 = load i64, i64* %key77, align 8
  %69 = load i64, i64* %val82, align 8
  %call97 = call i64 @Ffont_put(i64 %67, i64 %68, i64 %69)
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.96, %for.body.76
  br label %for.inc.99

for.inc.99:                                       ; preds = %if.end.98
  %70 = load i64, i64* %it, align 8
  %sub100 = sub nsw i64 %70, 3
  %71 = inttoptr i64 %sub100 to i8*
  %72 = bitcast i8* %71 to %struct.Lisp_Cons*
  %u101 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %72, i32 0, i32 1
  %cdr102 = bitcast %union.anon.10* %u101 to i64*
  %73 = load i64, i64* %cdr102, align 8
  store i64 %73, i64* %it, align 8
  br label %for.cond.71

for.end.103:                                      ; preds = %for.cond.71
  br label %for.inc.104

for.inc.104:                                      ; preds = %for.end.103
  %74 = load i32, i32* %i, align 4
  %inc105 = add nsw i32 %74, 1
  store i32 %inc105, i32* %i, align 4
  br label %for.cond.65

for.end.106:                                      ; preds = %for.cond.65
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @font_range(i64 %pos, i64 %pos_byte, i64* %limit, %struct.window* %w, %struct.face* %face, i64 %string) #0 {
entry:
  %retval = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %pos_byte.addr = alloca i64, align 8
  %limit.addr = alloca i64*, align 8
  %w.addr = alloca %struct.window*, align 8
  %face.addr = alloca %struct.face*, align 8
  %string.addr = alloca i64, align 8
  %ignore = alloca i64, align 8
  %c = alloca i32, align 4
  %font_object = alloca i64, align 8
  %face_id = alloca i32, align 4
  %category = alloca i64, align 8
  %chp = alloca i8*, align 8
  %chlen = alloca i32, align 4
  %fetch_ptr = alloca i8*, align 8
  %fetch_len = alloca i32, align 4
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %pos_byte, i64* %pos_byte.addr, align 8
  store i64* %limit, i64** %limit.addr, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.face* %face, %struct.face** %face.addr, align 8
  store i64 %string, i64* %string.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %font_object, align 8
  %0 = load i64, i64* %string.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.face*, %struct.face** %face.addr, align 8
  %tobool = icmp ne %struct.face* %1, null
  br i1 %tobool, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %3 = load i64, i64* %pos.addr, align 8
  %4 = load i64*, i64** %limit.addr, align 8
  %5 = load i64, i64* %4, align 8
  %call3 = call i32 @face_at_buffer_position(%struct.window* %2, i64 %3, i64* %ignore, i64 %5, i1 zeroext false, i32 -1)
  store i32 %call3, i32* %face_id, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.2
  %6 = load i32, i32* %face_id, align 4
  %add = add i32 %6, 0
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 1
  %8 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 20
  %11 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %11, i32 0, i32 4
  %12 = load i32, i32* %used, align 4
  %add4 = add i32 %12, 0
  %cmp5 = icmp ult i32 %add, %add4
  br i1 %cmp5, label %cond.true.15, label %cond.false.19

cond.false:                                       ; preds = %if.then.2
  %13 = load i32, i32* %face_id, align 4
  %conv = sext i32 %13 to i64
  %add6 = add i64 %conv, 0
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame7 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 1
  %15 = load i64, i64* %frame7, align 8
  %sub8 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub8 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  %face_cache9 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 20
  %18 = load %struct.face_cache*, %struct.face_cache** %face_cache9, align 8
  %used10 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %18, i32 0, i32 4
  %19 = load i32, i32* %used10, align 4
  %conv11 = sext i32 %19 to i64
  %add12 = add i64 %conv11, 0
  %cmp13 = icmp ult i64 %add6, %add12
  br i1 %cmp13, label %cond.true.15, label %cond.false.19

cond.true.15:                                     ; preds = %cond.false, %cond.true
  %20 = load i32, i32* %face_id, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame16 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 1
  %22 = load i64, i64* %frame16, align 8
  %sub17 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub17 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %face_cache18 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 20
  %25 = load %struct.face_cache*, %struct.face_cache** %face_cache18, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %25, i32 0, i32 2
  %26 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %26, i64 %idxprom
  %27 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end

cond.false.19:                                    ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.19, %cond.true.15
  %cond = phi %struct.face* [ %27, %cond.true.15 ], [ null, %cond.false.19 ]
  store %struct.face* %cond, %struct.face** %face.addr, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %if.end.20

if.else:                                          ; preds = %entry
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end.203, %if.end.196, %if.then.183, %if.end.20
  %28 = load i64, i64* %pos.addr, align 8
  %29 = load i64*, i64** %limit.addr, align 8
  %30 = load i64, i64* %29, align 8
  %cmp21 = icmp slt i64 %28, %30
  br i1 %cmp21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %31 = load i64, i64* %string.addr, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %31, %call23
  br i1 %cmp24, label %if.then.26, label %if.else.90

if.then.26:                                       ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.then.26
  %32 = load i64, i64* %pos_byte.addr, align 8
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 73
  %34 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %34, i32 0, i32 3
  %35 = load i64, i64* %gpt_byte, align 8
  %cmp27 = icmp sge i64 %32, %35
  br i1 %cmp27, label %cond.true.29, label %cond.false.31

cond.true.29:                                     ; preds = %do.body
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 73
  %37 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %37, i32 0, i32 5
  %38 = load i64, i64* %gap_size, align 8
  br label %cond.end.32

cond.false.31:                                    ; preds = %do.body
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.31, %cond.true.29
  %cond33 = phi i64 [ %38, %cond.true.29 ], [ 0, %cond.false.31 ]
  %39 = load i64, i64* %pos_byte.addr, align 8
  %add34 = add nsw i64 %cond33, %39
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 73
  %41 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %41, i32 0, i32 0
  %42 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %42, i64 %add34
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr36, i8** %chp, align 8
  %43 = load i8*, i8** %chp, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %43, i64 0
  %44 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %44 to i32
  %and = and i32 %conv38, 128
  %tobool39 = icmp ne i32 %and, 0
  br i1 %tobool39, label %cond.false.43, label %cond.true.40

cond.true.40:                                     ; preds = %cond.end.32
  store i32 1, i32* %chlen, align 4
  %45 = load i8*, i8** %chp, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %45, i64 0
  %46 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %46 to i32
  br label %cond.end.86

cond.false.43:                                    ; preds = %cond.end.32
  %47 = load i8*, i8** %chp, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %48 to i32
  %and46 = and i32 %conv45, 32
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.false.61, label %cond.true.48

cond.true.48:                                     ; preds = %cond.false.43
  store i32 2, i32* %chlen, align 4
  %49 = load i8*, i8** %chp, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %50 to i32
  %and51 = and i32 %conv50, 31
  %shl = shl i32 %and51, 6
  %51 = load i8*, i8** %chp, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %52 to i32
  %and54 = and i32 %conv53, 63
  %or = or i32 %shl, %and54
  %53 = load i8*, i8** %chp, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %53, i64 0
  %54 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %54 to i32
  %cmp57 = icmp slt i32 %conv56, 194
  %cond59 = select i1 %cmp57, i32 4194176, i32 0
  %add60 = add nsw i32 %or, %cond59
  br label %cond.end.84

cond.false.61:                                    ; preds = %cond.false.43
  %55 = load i8*, i8** %chp, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %55, i64 0
  %56 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %56 to i32
  %and64 = and i32 %conv63, 16
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %cond.false.80, label %cond.true.66

cond.true.66:                                     ; preds = %cond.false.61
  store i32 3, i32* %chlen, align 4
  %57 = load i8*, i8** %chp, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %58 to i32
  %and69 = and i32 %conv68, 15
  %shl70 = shl i32 %and69, 12
  %59 = load i8*, i8** %chp, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %59, i64 1
  %60 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %60 to i32
  %and73 = and i32 %conv72, 63
  %shl74 = shl i32 %and73, 6
  %or75 = or i32 %shl70, %shl74
  %61 = load i8*, i8** %chp, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %61, i64 2
  %62 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %62 to i32
  %and78 = and i32 %conv77, 63
  %or79 = or i32 %or75, %and78
  br label %cond.end.82

cond.false.80:                                    ; preds = %cond.false.61
  %63 = load i8*, i8** %chp, align 8
  %call81 = call i32 @string_char(i8* %63, i8** null, i32* %chlen)
  br label %cond.end.82

cond.end.82:                                      ; preds = %cond.false.80, %cond.true.66
  %cond83 = phi i32 [ %or79, %cond.true.66 ], [ %call81, %cond.false.80 ]
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.end.82, %cond.true.48
  %cond85 = phi i32 [ %add60, %cond.true.48 ], [ %cond83, %cond.end.82 ]
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.end.84, %cond.true.40
  %cond87 = phi i32 [ %conv42, %cond.true.40 ], [ %cond85, %cond.end.84 ]
  store i32 %cond87, i32* %c, align 4
  %64 = load i32, i32* %chlen, align 4
  %conv88 = sext i32 %64 to i64
  %65 = load i64, i64* %pos_byte.addr, align 8
  %add89 = add nsw i64 %65, %conv88
  store i64 %add89, i64* %pos_byte.addr, align 8
  %66 = load i64, i64* %pos.addr, align 8
  %inc = add nsw i64 %66, 1
  store i64 %inc, i64* %pos.addr, align 8
  br label %do.end

do.end:                                           ; preds = %cond.end.86
  br label %if.end.152

if.else.90:                                       ; preds = %while.body
  br label %do.body.91

do.body.91:                                       ; preds = %if.else.90
  %67 = load i64, i64* %pos_byte.addr, align 8
  %68 = load i64, i64* %string.addr, align 8
  %call92 = call i8* @SDATA(i64 %68)
  %arrayidx93 = getelementptr inbounds i8, i8* %call92, i64 %67
  store i8* %arrayidx93, i8** %fetch_ptr, align 8
  %69 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %69, i64 0
  %70 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %70 to i32
  %and96 = and i32 %conv95, 128
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %cond.false.101, label %cond.true.98

cond.true.98:                                     ; preds = %do.body.91
  store i32 1, i32* %fetch_len, align 4
  %71 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %71, i64 0
  %72 = load i8, i8* %arrayidx99, align 1
  %conv100 = zext i8 %72 to i32
  br label %cond.end.146

cond.false.101:                                   ; preds = %do.body.91
  %73 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %73, i64 0
  %74 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %74 to i32
  %and104 = and i32 %conv103, 32
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %cond.false.121, label %cond.true.106

cond.true.106:                                    ; preds = %cond.false.101
  store i32 2, i32* %fetch_len, align 4
  %75 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx107 = getelementptr inbounds i8, i8* %75, i64 0
  %76 = load i8, i8* %arrayidx107, align 1
  %conv108 = zext i8 %76 to i32
  %and109 = and i32 %conv108, 31
  %shl110 = shl i32 %and109, 6
  %77 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx111 = getelementptr inbounds i8, i8* %77, i64 1
  %78 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %78 to i32
  %and113 = and i32 %conv112, 63
  %or114 = or i32 %shl110, %and113
  %79 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx115 = getelementptr inbounds i8, i8* %79, i64 0
  %80 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %80 to i32
  %cmp117 = icmp slt i32 %conv116, 194
  %cond119 = select i1 %cmp117, i32 4194176, i32 0
  %add120 = add nsw i32 %or114, %cond119
  br label %cond.end.144

cond.false.121:                                   ; preds = %cond.false.101
  %81 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %81, i64 0
  %82 = load i8, i8* %arrayidx122, align 1
  %conv123 = zext i8 %82 to i32
  %and124 = and i32 %conv123, 16
  %tobool125 = icmp ne i32 %and124, 0
  br i1 %tobool125, label %cond.false.140, label %cond.true.126

cond.true.126:                                    ; preds = %cond.false.121
  store i32 3, i32* %fetch_len, align 4
  %83 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx127 = getelementptr inbounds i8, i8* %83, i64 0
  %84 = load i8, i8* %arrayidx127, align 1
  %conv128 = zext i8 %84 to i32
  %and129 = and i32 %conv128, 15
  %shl130 = shl i32 %and129, 12
  %85 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx131 = getelementptr inbounds i8, i8* %85, i64 1
  %86 = load i8, i8* %arrayidx131, align 1
  %conv132 = zext i8 %86 to i32
  %and133 = and i32 %conv132, 63
  %shl134 = shl i32 %and133, 6
  %or135 = or i32 %shl130, %shl134
  %87 = load i8*, i8** %fetch_ptr, align 8
  %arrayidx136 = getelementptr inbounds i8, i8* %87, i64 2
  %88 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %88 to i32
  %and138 = and i32 %conv137, 63
  %or139 = or i32 %or135, %and138
  br label %cond.end.142

cond.false.140:                                   ; preds = %cond.false.121
  %89 = load i8*, i8** %fetch_ptr, align 8
  %call141 = call i32 @string_char(i8* %89, i8** null, i32* %fetch_len)
  br label %cond.end.142

cond.end.142:                                     ; preds = %cond.false.140, %cond.true.126
  %cond143 = phi i32 [ %or139, %cond.true.126 ], [ %call141, %cond.false.140 ]
  br label %cond.end.144

cond.end.144:                                     ; preds = %cond.end.142, %cond.true.106
  %cond145 = phi i32 [ %add120, %cond.true.106 ], [ %cond143, %cond.end.142 ]
  br label %cond.end.146

cond.end.146:                                     ; preds = %cond.end.144, %cond.true.98
  %cond147 = phi i32 [ %conv100, %cond.true.98 ], [ %cond145, %cond.end.144 ]
  store i32 %cond147, i32* %c, align 4
  %90 = load i32, i32* %fetch_len, align 4
  %conv148 = sext i32 %90 to i64
  %91 = load i64, i64* %pos_byte.addr, align 8
  %add149 = add nsw i64 %91, %conv148
  store i64 %add149, i64* %pos_byte.addr, align 8
  %92 = load i64, i64* %pos.addr, align 8
  %inc150 = add nsw i64 %92, 1
  store i64 %inc150, i64* %pos.addr, align 8
  br label %do.end.151

do.end.151:                                       ; preds = %cond.end.146
  br label %if.end.152

if.end.152:                                       ; preds = %do.end.151, %do.end
  %93 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 314), align 8
  %94 = load i32, i32* %c, align 4
  %call153 = call i64 @CHAR_TABLE_REF(i64 %93, i32 %94)
  store i64 %call153, i64* %category, align 8
  %95 = load i64, i64* %category, align 8
  %and154 = and i64 %95, 7
  %conv155 = trunc i64 %and154 to i32
  %and156 = and i32 %conv155, -5
  %cmp157 = icmp eq i32 %and156, 2
  br i1 %cmp157, label %land.lhs.true, label %if.end.184

land.lhs.true:                                    ; preds = %if.end.152
  %96 = load i64, i64* %category, align 8
  %shr = ashr i64 %96, 2
  %cmp159 = icmp eq i64 %shr, 27
  br i1 %cmp159, label %if.then.183, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %97 = load i32, i32* %c, align 4
  %cmp161 = icmp slt i32 %97, 65024
  br i1 %cmp161, label %cond.true.163, label %cond.false.164

cond.true.163:                                    ; preds = %lor.lhs.false
  br i1 false, label %if.then.183, label %if.end.184

cond.false.164:                                   ; preds = %lor.lhs.false
  %98 = load i32, i32* %c, align 4
  %cmp165 = icmp sle i32 %98, 65039
  br i1 %cmp165, label %cond.true.167, label %cond.false.171

cond.true.167:                                    ; preds = %cond.false.164
  %99 = load i32, i32* %c, align 4
  %sub168 = sub nsw i32 %99, 65024
  %add169 = add nsw i32 %sub168, 1
  %tobool170 = icmp ne i32 %add169, 0
  br i1 %tobool170, label %if.then.183, label %if.end.184

cond.false.171:                                   ; preds = %cond.false.164
  %100 = load i32, i32* %c, align 4
  %cmp172 = icmp slt i32 %100, 917760
  br i1 %cmp172, label %cond.true.174, label %cond.false.175

cond.true.174:                                    ; preds = %cond.false.171
  br i1 false, label %if.then.183, label %if.end.184

cond.false.175:                                   ; preds = %cond.false.171
  %101 = load i32, i32* %c, align 4
  %cmp176 = icmp sle i32 %101, 917999
  br i1 %cmp176, label %cond.true.178, label %cond.false.182

cond.true.178:                                    ; preds = %cond.false.175
  %102 = load i32, i32* %c, align 4
  %sub179 = sub nsw i32 %102, 917760
  %add180 = add nsw i32 %sub179, 17
  %tobool181 = icmp ne i32 %add180, 0
  br i1 %tobool181, label %if.then.183, label %if.end.184

cond.false.182:                                   ; preds = %cond.false.175
  br i1 false, label %if.then.183, label %if.end.184

if.then.183:                                      ; preds = %cond.false.182, %cond.true.178, %cond.true.174, %cond.true.167, %cond.true.163, %land.lhs.true
  br label %while.cond

if.end.184:                                       ; preds = %cond.false.182, %cond.true.178, %cond.true.174, %cond.true.167, %cond.true.163, %if.end.152
  %103 = load i64, i64* %font_object, align 8
  %call185 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp186 = icmp eq i64 %103, %call185
  br i1 %cmp186, label %if.then.188, label %if.end.197

if.then.188:                                      ; preds = %if.end.184
  %104 = load %struct.face*, %struct.face** %face.addr, align 8
  %105 = load i32, i32* %c, align 4
  %106 = load i64, i64* %pos.addr, align 8
  %sub189 = sub nsw i64 %106, 1
  %107 = load i64, i64* %string.addr, align 8
  %call190 = call i64 @font_for_char(%struct.face* %104, i32 %105, i64 %sub189, i64 %107)
  store i64 %call190, i64* %font_object, align 8
  %108 = load i64, i64* %font_object, align 8
  %call191 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp192 = icmp eq i64 %108, %call191
  br i1 %cmp192, label %if.then.194, label %if.end.196

if.then.194:                                      ; preds = %if.then.188
  %call195 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call195, i64* %retval
  br label %return

if.end.196:                                       ; preds = %if.then.188
  br label %while.cond

if.end.197:                                       ; preds = %if.end.184
  %109 = load i64, i64* %font_object, align 8
  %110 = load i32, i32* %c, align 4
  %call198 = call i32 @font_encode_char(i64 %109, i32 %110)
  %cmp199 = icmp eq i32 %call198, -1
  br i1 %cmp199, label %if.then.201, label %if.end.203

if.then.201:                                      ; preds = %if.end.197
  %111 = load i64, i64* %pos.addr, align 8
  %sub202 = sub nsw i64 %111, 1
  %112 = load i64*, i64** %limit.addr, align 8
  store i64 %sub202, i64* %112, align 8
  br label %if.end.203

if.end.203:                                       ; preds = %if.then.201, %if.end.197
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %113 = load i64, i64* %font_object, align 8
  store i64 %113, i64* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.194
  %114 = load i64, i64* %retval
  ret i64 %114
}

declare i32 @face_at_buffer_position(%struct.window*, i64, i64*, i64, i1 zeroext, i32) #1

declare i32 @string_char(i8*, i8**, i32*) #1

declare i64 @font_for_char(%struct.face*, i32, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffontp(i64 %object, i64 %extra_type) #0 {
entry:
  %retval = alloca i64, align 8
  %object.addr = alloca i64, align 8
  %extra_type.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  store i64 %extra_type, i64* %extra_type.addr, align 8
  %0 = load i64, i64* %extra_type.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %call1 = call zeroext i1 @FONTP(i64 %1)
  br i1 %call1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call2, %cond.true ], [ %call3, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %extra_type.addr, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 446)
  %cmp5 = icmp eq i64 %2, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.14

if.then.6:                                        ; preds = %if.end
  %3 = load i64, i64* %object.addr, align 8
  %call7 = call zeroext i1 @FONT_SPEC_P(i64 %3)
  br i1 %call7, label %cond.true.8, label %cond.false.10

cond.true.8:                                      ; preds = %if.then.6
  %call9 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.12

cond.false.10:                                    ; preds = %if.then.6
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.10, %cond.true.8
  %cond13 = phi i64 [ %call9, %cond.true.8 ], [ %call11, %cond.false.10 ]
  store i64 %cond13, i64* %retval
  br label %return

if.end.14:                                        ; preds = %if.end
  %4 = load i64, i64* %extra_type.addr, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 441)
  %cmp16 = icmp eq i64 %4, %call15
  br i1 %cmp16, label %if.then.17, label %if.end.25

if.then.17:                                       ; preds = %if.end.14
  %5 = load i64, i64* %object.addr, align 8
  %call18 = call zeroext i1 @FONT_ENTITY_P(i64 %5)
  br i1 %call18, label %cond.true.19, label %cond.false.21

cond.true.19:                                     ; preds = %if.then.17
  %call20 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.23

cond.false.21:                                    ; preds = %if.then.17
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.21, %cond.true.19
  %cond24 = phi i64 [ %call20, %cond.true.19 ], [ %call22, %cond.false.21 ]
  store i64 %cond24, i64* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.14
  %6 = load i64, i64* %extra_type.addr, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 443)
  %cmp27 = icmp eq i64 %6, %call26
  br i1 %cmp27, label %if.then.28, label %if.end.36

if.then.28:                                       ; preds = %if.end.25
  %7 = load i64, i64* %object.addr, align 8
  %call29 = call zeroext i1 @FONT_OBJECT_P(i64 %7)
  br i1 %call29, label %cond.true.30, label %cond.false.32

cond.true.30:                                     ; preds = %if.then.28
  %call31 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.34

cond.false.32:                                    ; preds = %if.then.28
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.false.32, %cond.true.30
  %cond35 = phi i64 [ %call31, %cond.true.30 ], [ %call33, %cond.false.32 ]
  store i64 %cond35, i64* %retval
  br label %return

if.end.36:                                        ; preds = %if.end.25
  %call37 = call i64 @intern(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i32 0, i32 0))
  %8 = load i64, i64* %extra_type.addr, align 8
  %9 = call i64 @wrong_type_argument(i64 %call37, i64 %8) #7
  unreachable

return:                                           ; preds = %cond.end.34, %cond.end.23, %cond.end.12, %cond.end
  %10 = load i64, i64* %retval
  ret i64 %10
}

declare i64 @intern(i8*) #1

; Function Attrs: nounwind uwtable
define internal i64 @font_make_spec() #0 {
entry:
  %font_spec = alloca i64, align 8
  %spec = alloca %struct.font_spec*, align 8
  %call = call %struct.Lisp_Vector* @allocate_pseudovector(i32 13, i32 13, i32 13, i32 17)
  %0 = bitcast %struct.Lisp_Vector* %call to %struct.font_spec*
  store %struct.font_spec* %0, %struct.font_spec** %spec, align 8
  %1 = load %struct.font_spec*, %struct.font_spec** %spec, align 8
  %2 = bitcast %struct.font_spec* %1 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %2, i32 5)
  store i64 %call1, i64* %font_spec, align 8
  %3 = load i64, i64* %font_spec, align 8
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @get_font_prop_index(i64 %key) #0 {
entry:
  %retval = alloca i32, align 4
  %key.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %key, i64* %key.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %key.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [15 x %struct.anon.14], [15 x %struct.anon.14]* @font_property_table, i32 0, i64 %idxprom
  %key2 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %arrayidx, i32 0, i32 0
  %3 = load i32, i32* %key2, align 4
  %call = call i64 @builtin_lisp_symbol(i32 %3)
  %cmp3 = icmp eq i64 %1, %call
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  store i32 %4, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i64 @font_prop_validate(i32 %idx, i64 %prop, i64 %val) #0 {
entry:
  %retval = alloca i64, align 8
  %idx.addr = alloca i32, align 4
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %validated = alloca i64, align 8
  store i32 %idx, i32* %idx.addr, align 4
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %val.addr, align 8
  store i64 %1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %prop.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %2, %call1
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %3 = load i32, i32* %idx.addr, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [15 x %struct.anon.14], [15 x %struct.anon.14]* @font_property_table, i32 0, i64 %idxprom
  %key = getelementptr inbounds %struct.anon.14, %struct.anon.14* %arrayidx, i32 0, i32 0
  %4 = load i32, i32* %key, align 4
  %call4 = call i64 @builtin_lisp_symbol(i32 %4)
  store i64 %call4, i64* %prop.addr, align 8
  br label %if.end.9

if.else:                                          ; preds = %if.end
  %5 = load i64, i64* %prop.addr, align 8
  %call5 = call i32 @get_font_prop_index(i64 %5)
  store i32 %call5, i32* %idx.addr, align 4
  %6 = load i32, i32* %idx.addr, align 4
  %cmp6 = icmp slt i32 %6, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.else
  %7 = load i64, i64* %val.addr, align 8
  store i64 %7, i64* %retval
  br label %return

if.end.8:                                         ; preds = %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.then.3
  %8 = load i32, i32* %idx.addr, align 4
  %idxprom10 = sext i32 %8 to i64
  %arrayidx11 = getelementptr inbounds [15 x %struct.anon.14], [15 x %struct.anon.14]* @font_property_table, i32 0, i64 %idxprom10
  %validator = getelementptr inbounds %struct.anon.14, %struct.anon.14* %arrayidx11, i32 0, i32 1
  %9 = load i64 (i64, i64)*, i64 (i64, i64)** %validator, align 8
  %10 = load i64, i64* %prop.addr, align 8
  %11 = load i64, i64* %val.addr, align 8
  %call12 = call i64 %9(i64 %10, i64 %11)
  store i64 %call12, i64* %validated, align 8
  %12 = load i64, i64* %validated, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 372)
  %cmp14 = icmp eq i64 %12, %call13
  br i1 %cmp14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %if.end.9
  %13 = load i64, i64* %prop.addr, align 8
  %14 = load i64, i64* %val.addr, align 8
  %call16 = call i64 @Fcons(i64 %13, i64 %14)
  call void @signal_error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.87, i32 0, i32 0), i64 %call16) #7
  unreachable

if.end.17:                                        ; preds = %if.end.9
  %15 = load i64, i64* %validated, align 8
  store i64 %15, i64* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.7, %if.then
  %16 = load i64, i64* %retval
  ret i64 %16
}

declare void @CHECK_FONT(i64) #1

declare %struct.Lisp_Vector* @allocate_vector(i64) #1

declare %struct.Lisp_Vector* @XVECTOR(i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

declare i64 @CDR(i64) #1

declare i64* @xcdr_addr(i64) #1

; Function Attrs: nounwind uwtable
define i64 @merge_font_spec(i64 %from, i64 %to) #0 {
entry:
  %from.addr = alloca i64, align 8
  %to.addr = alloca i64, align 8
  %extra = alloca i64, align 8
  %tail = alloca i64, align 8
  %i = alloca i32, align 4
  %slot = alloca i64, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %to, i64* %to.addr, align 8
  %0 = load i64, i64* %from.addr, align 8
  call void @CHECK_FONT(i64 %0)
  %1 = load i64, i64* %to.addr, align 8
  call void @CHECK_FONT(i64 %1)
  %2 = load i64, i64* %to.addr, align 8
  %call = call i64 @copy_font_spec(i64 %2)
  store i64 %call, i64* %to.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %3, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %to.addr, align 8
  %5 = load i32, i32* %i, align 4
  %conv = sext i32 %5 to i64
  %6 = load i64, i64* %from.addr, align 8
  %7 = load i32, i32* %i, align 4
  %conv1 = sext i32 %7 to i64
  %call2 = call i64 @AREF(i64 %6, i64 %conv1)
  call void @ASET(i64 %4, i64 %conv, i64 %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i64, i64* %to.addr, align 8
  %call3 = call i64 @AREF(i64 %9, i64 12)
  store i64 %call3, i64* %extra, align 8
  %10 = load i64, i64* %from.addr, align 8
  %call4 = call i64 @AREF(i64 %10, i64 12)
  store i64 %call4, i64* %tail, align 8
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.39, %for.end
  %11 = load i64, i64* %tail, align 8
  %and = and i64 %11, 7
  %conv6 = trunc i64 %and to i32
  %cmp7 = icmp eq i32 %conv6, 3
  br i1 %cmp7, label %for.body.9, label %for.end.43

for.body.9:                                       ; preds = %for.cond.5
  %12 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car, align 8
  %sub10 = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub10 to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %car11 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 0
  %18 = load i64, i64* %car11, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 441)
  %cmp13 = icmp eq i64 %18, %call12
  br i1 %cmp13, label %if.end.38, label %if.then

if.then:                                          ; preds = %for.body.9
  %19 = load i64, i64* %tail, align 8
  %sub15 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub15 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %car16 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 0
  %22 = load i64, i64* %car16, align 8
  %sub17 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub17 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %car18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 0
  %25 = load i64, i64* %car18, align 8
  %26 = load i64, i64* %extra, align 8
  %call19 = call i64 @assq_no_quit(i64 %25, i64 %26)
  store i64 %call19, i64* %slot, align 8
  %27 = load i64, i64* %slot, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %27, %call20
  br i1 %cmp21, label %if.else, label %if.then.23

if.then.23:                                       ; preds = %if.then
  %28 = load i64, i64* %slot, align 8
  %29 = load i64, i64* %tail, align 8
  %sub24 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub24 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %car25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 0
  %32 = load i64, i64* %car25, align 8
  %sub26 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub26 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %35 = load i64, i64* %cdr, align 8
  call void @XSETCDR(i64 %28, i64 %35)
  br label %if.end

if.else:                                          ; preds = %if.then
  %36 = load i64, i64* %tail, align 8
  %sub27 = sub nsw i64 %36, 3
  %37 = inttoptr i64 %sub27 to i8*
  %38 = bitcast i8* %37 to %struct.Lisp_Cons*
  %car28 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %38, i32 0, i32 0
  %39 = load i64, i64* %car28, align 8
  %sub29 = sub nsw i64 %39, 3
  %40 = inttoptr i64 %sub29 to i8*
  %41 = bitcast i8* %40 to %struct.Lisp_Cons*
  %car30 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %41, i32 0, i32 0
  %42 = load i64, i64* %car30, align 8
  %43 = load i64, i64* %tail, align 8
  %sub31 = sub nsw i64 %43, 3
  %44 = inttoptr i64 %sub31 to i8*
  %45 = bitcast i8* %44 to %struct.Lisp_Cons*
  %car32 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %45, i32 0, i32 0
  %46 = load i64, i64* %car32, align 8
  %sub33 = sub nsw i64 %46, 3
  %47 = inttoptr i64 %sub33 to i8*
  %48 = bitcast i8* %47 to %struct.Lisp_Cons*
  %u34 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %48, i32 0, i32 1
  %cdr35 = bitcast %union.anon.10* %u34 to i64*
  %49 = load i64, i64* %cdr35, align 8
  %call36 = call i64 @Fcons(i64 %42, i64 %49)
  %50 = load i64, i64* %extra, align 8
  %call37 = call i64 @Fcons(i64 %call36, i64 %50)
  store i64 %call37, i64* %extra, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.23
  br label %if.end.38

if.end.38:                                        ; preds = %if.end, %for.body.9
  br label %for.inc.39

for.inc.39:                                       ; preds = %if.end.38
  %51 = load i64, i64* %tail, align 8
  %sub40 = sub nsw i64 %51, 3
  %52 = inttoptr i64 %sub40 to i8*
  %53 = bitcast i8* %52 to %struct.Lisp_Cons*
  %u41 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %53, i32 0, i32 1
  %cdr42 = bitcast %union.anon.10* %u41 to i64*
  %54 = load i64, i64* %cdr42, align 8
  store i64 %54, i64* %tail, align 8
  br label %for.cond.5

for.end.43:                                       ; preds = %for.cond.5
  %55 = load i64, i64* %to.addr, align 8
  %56 = load i64, i64* %extra, align 8
  call void @ASET(i64 %55, i64 12, i64 %56)
  %57 = load i64, i64* %to.addr, align 8
  ret i64 %57
}

declare i64 @Fassq(i64, i64) #1

declare i64 @Fcdr(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_face_attributes(i64 %font, i64 %frame) #0 {
entry:
  %font.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %plist = alloca [10 x i64], align 16
  %val = alloca i64, align 8
  %n = alloca i32, align 4
  %fontset = alloca i32, align 4
  %name = alloca i64, align 8
  %font_dpi = alloca i64, align 8
  %dpi = alloca i32, align 4
  store i64 %font, i64* %font.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  store i32 0, i32* %n, align 4
  %1 = load i64, i64* %font.addr, align 8
  %call1 = call zeroext i1 @STRINGP(i64 %1)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %font.addr, align 8
  %call2 = call i32 @fs_query_fontset(i64 %2, i32 0)
  store i32 %call2, i32* %fontset, align 4
  %3 = load i64, i64* %font.addr, align 8
  store i64 %3, i64* %name, align 8
  %4 = load i32, i32* %fontset, align 4
  %cmp = icmp sge i32 %4, 0
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %5 = load i32, i32* %fontset, align 4
  %call4 = call i64 @fontset_ascii(i32 %5)
  store i64 %call4, i64* %font.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %6 = load i64, i64* %name, align 8
  %call5 = call i64 @font_spec_from_name(i64 %6)
  store i64 %call5, i64* %font.addr, align 8
  %7 = load i64, i64* %font.addr, align 8
  %call6 = call zeroext i1 @FONTP(i64 %7)
  br i1 %call6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end
  %8 = load i64, i64* %name, align 8
  call void @signal_error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.29, i32 0, i32 0), i64 %8) #7
  unreachable

if.end.8:                                         ; preds = %if.end
  br label %if.end.12

if.else:                                          ; preds = %entry
  %9 = load i64, i64* %font.addr, align 8
  %call9 = call zeroext i1 @FONTP(i64 %9)
  br i1 %call9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.else
  %10 = load i64, i64* %font.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30, i32 0, i32 0), i64 %10) #7
  unreachable

if.end.11:                                        ; preds = %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.8
  %11 = load i64, i64* %font.addr, align 8
  %call13 = call i64 @AREF(i64 %11, i64 2)
  store i64 %call13, i64* %val, align 8
  %12 = load i64, i64* %val, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %12, %call14
  br i1 %cmp15, label %if.end.22, label %if.then.16

if.then.16:                                       ; preds = %if.end.12
  %call17 = call i64 @builtin_lisp_symbol(i32 40)
  %13 = load i32, i32* %n, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %n, align 4
  %idxprom = sext i32 %13 to i64
  %arrayidx = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom
  store i64 %call17, i64* %arrayidx, align 8
  %14 = load i64, i64* %val, align 8
  %call18 = call i64 @SYMBOL_NAME(i64 %14)
  %15 = load i32, i32* %n, align 4
  %inc19 = add nsw i32 %15, 1
  store i32 %inc19, i32* %n, align 4
  %idxprom20 = sext i32 %15 to i64
  %arrayidx21 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom20
  store i64 %call18, i64* %arrayidx21, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.16, %if.end.12
  %16 = load i64, i64* %font.addr, align 8
  %call23 = call i64 @AREF(i64 %16, i64 8)
  store i64 %call23, i64* %val, align 8
  %17 = load i64, i64* %val, align 8
  %and = and i64 %17, 7
  %conv = trunc i64 %and to i32
  %and24 = and i32 %conv, -5
  %cmp25 = icmp eq i32 %and24, 2
  br i1 %cmp25, label %if.then.27, label %if.else.49

if.then.27:                                       ; preds = %if.end.22
  %18 = load i64, i64* %font.addr, align 8
  %call28 = call i64 @AREF(i64 %18, i64 9)
  store i64 %call28, i64* %font_dpi, align 8
  %19 = load i64, i64* %font_dpi, align 8
  %and29 = and i64 %19, 7
  %conv30 = trunc i64 %and29 to i32
  %and31 = and i32 %conv30, -5
  %cmp32 = icmp eq i32 %and31, 2
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.27
  %20 = load i64, i64* %font_dpi, align 8
  %shr = ashr i64 %20, 2
  %conv34 = sitofp i64 %shr to double
  br label %cond.end

cond.false:                                       ; preds = %if.then.27
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 44
  %23 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %resy = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %23, i32 0, i32 8
  %24 = load double, double* %resy, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv34, %cond.true ], [ %24, %cond.false ]
  %conv35 = fptosi double %cond to i32
  store i32 %conv35, i32* %dpi, align 4
  %call36 = call i64 @builtin_lisp_symbol(i32 58)
  %25 = load i32, i32* %n, align 4
  %inc37 = add nsw i32 %25, 1
  store i32 %inc37, i32* %n, align 4
  %idxprom38 = sext i32 %25 to i64
  %arrayidx39 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom38
  store i64 %call36, i64* %arrayidx39, align 8
  %26 = load i64, i64* %val, align 8
  %shr40 = ashr i64 %26, 2
  %mul = mul nsw i64 %shr40, 10
  %conv41 = sitofp i64 %mul to double
  %mul42 = fmul double %conv41, 7.227000e+01
  %27 = load i32, i32* %dpi, align 4
  %conv43 = sitofp i32 %27 to double
  %div = fdiv double %mul42, %conv43
  %add = fadd double %div, 5.000000e-01
  %conv44 = fptoui double %add to i64
  %shl = shl i64 %conv44, 2
  %add45 = add i64 %shl, 2
  %28 = load i32, i32* %n, align 4
  %inc46 = add nsw i32 %28, 1
  store i32 %inc46, i32* %n, align 4
  %idxprom47 = sext i32 %28 to i64
  %arrayidx48 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom47
  store i64 %add45, i64* %arrayidx48, align 8
  br label %if.end.69

if.else.49:                                       ; preds = %if.end.22
  %29 = load i64, i64* %val, align 8
  %and50 = and i64 %29, 7
  %conv51 = trunc i64 %and50 to i32
  %cmp52 = icmp eq i32 %conv51, 7
  br i1 %cmp52, label %if.then.54, label %if.end.68

if.then.54:                                       ; preds = %if.else.49
  %call55 = call i64 @builtin_lisp_symbol(i32 58)
  %30 = load i32, i32* %n, align 4
  %inc56 = add nsw i32 %30, 1
  store i32 %inc56, i32* %n, align 4
  %idxprom57 = sext i32 %30 to i64
  %arrayidx58 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom57
  store i64 %call55, i64* %arrayidx58, align 8
  %31 = load i64, i64* %val, align 8
  %call59 = call double @XFLOAT_DATA(i64 %31)
  %conv60 = fptosi double %call59 to i32
  %mul61 = mul nsw i32 10, %conv60
  %conv62 = sext i32 %mul61 to i64
  %shl63 = shl i64 %conv62, 2
  %add64 = add i64 %shl63, 2
  %32 = load i32, i32* %n, align 4
  %inc65 = add nsw i32 %32, 1
  store i32 %inc65, i32* %n, align 4
  %idxprom66 = sext i32 %32 to i64
  %arrayidx67 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom66
  store i64 %add64, i64* %arrayidx67, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.54, %if.else.49
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %cond.end
  %33 = load i64, i64* %font.addr, align 8
  %call70 = call i64 @font_style_symbolic(i64 %33, i32 5, i1 zeroext true)
  store i64 %call70, i64* %val, align 8
  %34 = load i64, i64* %val, align 8
  %call71 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp72 = icmp eq i64 %34, %call71
  br i1 %cmp72, label %if.end.82, label %if.then.74

if.then.74:                                       ; preds = %if.end.69
  %call75 = call i64 @builtin_lisp_symbol(i32 138)
  %35 = load i32, i32* %n, align 4
  %inc76 = add nsw i32 %35, 1
  store i32 %inc76, i32* %n, align 4
  %idxprom77 = sext i32 %35 to i64
  %arrayidx78 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom77
  store i64 %call75, i64* %arrayidx78, align 8
  %36 = load i64, i64* %val, align 8
  %37 = load i32, i32* %n, align 4
  %inc79 = add nsw i32 %37, 1
  store i32 %inc79, i32* %n, align 4
  %idxprom80 = sext i32 %37 to i64
  %arrayidx81 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom80
  store i64 %36, i64* %arrayidx81, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.74, %if.end.69
  %38 = load i64, i64* %font.addr, align 8
  %call83 = call i64 @font_style_symbolic(i64 %38, i32 6, i1 zeroext true)
  store i64 %call83, i64* %val, align 8
  %39 = load i64, i64* %val, align 8
  %call84 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp85 = icmp eq i64 %39, %call84
  br i1 %cmp85, label %if.end.95, label %if.then.87

if.then.87:                                       ; preds = %if.end.82
  %call88 = call i64 @builtin_lisp_symbol(i32 119)
  %40 = load i32, i32* %n, align 4
  %inc89 = add nsw i32 %40, 1
  store i32 %inc89, i32* %n, align 4
  %idxprom90 = sext i32 %40 to i64
  %arrayidx91 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom90
  store i64 %call88, i64* %arrayidx91, align 8
  %41 = load i64, i64* %val, align 8
  %42 = load i32, i32* %n, align 4
  %inc92 = add nsw i32 %42, 1
  store i32 %inc92, i32* %n, align 4
  %idxprom93 = sext i32 %42 to i64
  %arrayidx94 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom93
  store i64 %41, i64* %arrayidx94, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.87, %if.end.82
  %43 = load i64, i64* %font.addr, align 8
  %call96 = call i64 @font_style_symbolic(i64 %43, i32 7, i1 zeroext true)
  store i64 %call96, i64* %val, align 8
  %44 = load i64, i64* %val, align 8
  %call97 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp98 = icmp eq i64 %44, %call97
  br i1 %cmp98, label %if.end.108, label %if.then.100

if.then.100:                                      ; preds = %if.end.95
  %call101 = call i64 @builtin_lisp_symbol(i32 139)
  %45 = load i32, i32* %n, align 4
  %inc102 = add nsw i32 %45, 1
  store i32 %inc102, i32* %n, align 4
  %idxprom103 = sext i32 %45 to i64
  %arrayidx104 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom103
  store i64 %call101, i64* %arrayidx104, align 8
  %46 = load i64, i64* %val, align 8
  %47 = load i32, i32* %n, align 4
  %inc105 = add nsw i32 %47, 1
  store i32 %inc105, i32* %n, align 4
  %idxprom106 = sext i32 %47 to i64
  %arrayidx107 = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i64 %idxprom106
  store i64 %46, i64* %arrayidx107, align 8
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.100, %if.end.95
  %48 = load i32, i32* %n, align 4
  %conv109 = sext i32 %48 to i64
  %arraydecay = getelementptr inbounds [10 x i64], [10 x i64]* %plist, i32 0, i32 0
  %call110 = call i64 @Flist(i64 %conv109, i64* %arraydecay)
  ret i64 %call110
}

declare %struct.frame* @decode_live_frame(i64) #1

declare i32 @fs_query_fontset(i64, i32) #1

declare i64 @fontset_ascii(i32) #1

; Function Attrs: noreturn
declare void @signal_error(i8*, i64) #2

declare i64 @Flist(i64, i64*) #1

declare void @CHECK_FONT_SPEC(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Flist_fonts(i64 %font_spec, i64 %frame, i64 %num, i64 %prefer) #0 {
entry:
  %retval = alloca i64, align 8
  %font_spec.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %num.addr = alloca i64, align 8
  %prefer.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %vec = alloca i64, align 8
  %list = alloca i64, align 8
  %n = alloca i64, align 8
  %.compoundliteral = alloca [2 x i64], align 8
  store i64 %font_spec, i64* %font_spec.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  store i64 %num, i64* %num.addr, align 8
  store i64 %prefer, i64* %prefer.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  store i64 0, i64* %n, align 8
  %1 = load i64, i64* %font_spec.addr, align 8
  call void @CHECK_FONT_SPEC(i64 %1)
  %2 = load i64, i64* %num.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.end.10, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %num.addr, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp3 = icmp eq i32 %and2, 2
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %call5 = call i64 @builtin_lisp_symbol(i32 559)
  %4 = load i64, i64* %num.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call5, i64 %4) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  %7 = load i64, i64* %num.addr, align 8
  %shr = ashr i64 %7, 2
  store i64 %shr, i64* %n, align 8
  %8 = load i64, i64* %n, align 8
  %cmp6 = icmp sle i64 %8, 0
  br i1 %cmp6, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %cond.end
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call9, i64* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %entry
  %9 = load i64, i64* %prefer.addr, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %9, %call11
  br i1 %cmp12, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.end.10
  %10 = load i64, i64* %prefer.addr, align 8
  call void @CHECK_FONT_SPEC(i64 %10)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.end.10
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %12 = load i64, i64* %font_spec.addr, align 8
  %call16 = call i64 @font_list_entities(%struct.frame* %11, i64 %12)
  store i64 %call16, i64* %list, align 8
  %13 = load i64, i64* %list, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp18 = icmp eq i64 %13, %call17
  br i1 %cmp18, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %if.end.15
  %call21 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call21, i64* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.15
  %14 = load i64, i64* %list, align 8
  %sub = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %17 = load i64, i64* %cdr, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %17, %call23
  br i1 %cmp24, label %land.lhs.true, label %if.end.35

land.lhs.true:                                    ; preds = %if.end.22
  %18 = load i64, i64* %list, align 8
  %sub26 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub26 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car, align 8
  %call27 = call i64 @ASIZE(i64 %21)
  %cmp28 = icmp eq i64 %call27, 1
  br i1 %cmp28, label %if.then.30, label %if.end.35

if.then.30:                                       ; preds = %land.lhs.true
  %22 = load i64, i64* %list, align 8
  %sub31 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub31 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %car32 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 0
  %25 = load i64, i64* %car32, align 8
  %call33 = call i64 @AREF(i64 %25, i64 0)
  %call34 = call i64 @list1(i64 %call33)
  store i64 %call34, i64* %retval
  br label %return

if.end.35:                                        ; preds = %land.lhs.true, %if.end.22
  %26 = load i64, i64* %prefer.addr, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp37 = icmp eq i64 %26, %call36
  br i1 %cmp37, label %if.else, label %if.then.39

if.then.39:                                       ; preds = %if.end.35
  %27 = load i64, i64* %list, align 8
  %28 = load i64, i64* %prefer.addr, align 8
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %call40 = call i64 @font_sort_entities(i64 %27, i64 %28, %struct.frame* %29, i32 0)
  store i64 %call40, i64* %vec, align 8
  br label %if.end.42

if.else:                                          ; preds = %if.end.35
  %30 = load i64, i64* %list, align 8
  %call41 = call i64 @font_vconcat_entity_vectors(i64 %30)
  store i64 %call41, i64* %vec, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.else, %if.then.39
  %31 = load i64, i64* %n, align 8
  %cmp43 = icmp eq i64 %31, 0
  br i1 %cmp43, label %if.then.48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.42
  %32 = load i64, i64* %n, align 8
  %33 = load i64, i64* %vec, align 8
  %call45 = call i64 @ASIZE(i64 %33)
  %cmp46 = icmp sge i64 %32, %call45
  br i1 %cmp46, label %if.then.48, label %if.else.51

if.then.48:                                       ; preds = %lor.lhs.false, %if.end.42
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i64 0, i64 0
  %34 = load i64, i64* %vec, align 8
  store i64 %34, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call49, i64* %arrayinit.element
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i32 0, i32 0
  %call50 = call i64 @Fappend(i64 2, i64* %arraydecay)
  store i64 %call50, i64* %list, align 8
  br label %if.end.58

if.else.51:                                       ; preds = %lor.lhs.false
  %call52 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call52, i64* %list, align 8
  %35 = load i64, i64* %n, align 8
  %dec = add nsw i64 %35, -1
  store i64 %dec, i64* %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.51
  %36 = load i64, i64* %n, align 8
  %cmp53 = icmp sge i64 %36, 0
  br i1 %cmp53, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load i64, i64* %vec, align 8
  %38 = load i64, i64* %n, align 8
  %call55 = call i64 @AREF(i64 %37, i64 %38)
  %39 = load i64, i64* %list, align 8
  %call56 = call i64 @Fcons(i64 %call55, i64 %39)
  store i64 %call56, i64* %list, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %40 = load i64, i64* %n, align 8
  %dec57 = add nsw i64 %40, -1
  store i64 %dec57, i64* %n, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.58

if.end.58:                                        ; preds = %for.end, %if.then.48
  %41 = load i64, i64* %list, align 8
  store i64 %41, i64* %retval
  br label %return

return:                                           ; preds = %if.end.58, %if.then.30, %if.then.20, %if.then.8
  %42 = load i64, i64* %retval
  ret i64 %42
}

; Function Attrs: nounwind uwtable
define internal i64 @font_sort_entities(i64 %list, i64 %prefer, %struct.frame* %f, i32 %best_only) #0 {
entry:
  %list.addr = alloca i64, align 8
  %prefer.addr = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %best_only.addr = alloca i32, align 4
  %prefer_prop = alloca [13 x i64], align 16
  %len = alloca i32, align 4
  %maxlen = alloca i32, align 4
  %i = alloca i32, align 4
  %data = alloca %struct.font_sort_data*, align 8
  %best_score = alloca i32, align 4
  %best_entity = alloca i64, align 8
  %tail = alloca i64, align 8
  %vec = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %font_driver_preference = alloca i32, align 4
  %current_font_driver = alloca i64, align 8
  store i64 %list, i64* %list.addr, align 8
  store i64 %prefer, i64* %prefer.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %best_only, i32* %best_only.addr, align 4
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  store i32 5, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %prefer.addr, align 8
  %2 = load i32, i32* %i, align 4
  %conv = sext i32 %2 to i64
  %call1 = call i64 @AREF(i64 %1, i64 %conv)
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [13 x i64], [13 x i64]* %prefer_prop, i32 0, i64 %idxprom
  store i64 %call1, i64* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx2 = getelementptr inbounds [13 x i64], [13 x i64]* %prefer_prop, i32 0, i64 8
  %5 = load i64, i64* %arrayidx2, align 8
  %and = and i64 %5, 7
  %conv3 = trunc i64 %and to i32
  %cmp4 = icmp eq i32 %conv3, 7
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load i64, i64* %prefer.addr, align 8
  %call6 = call i32 @font_pixel_size(%struct.frame* %6, i64 %7)
  %conv7 = sext i32 %call6 to i64
  %shl = shl i64 %conv7, 2
  %add = add i64 %shl, 2
  %arrayidx8 = getelementptr inbounds [13 x i64], [13 x i64]* %prefer_prop, i32 0, i64 8
  store i64 %add, i64* %arrayidx8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %8 = load i64, i64* %list.addr, align 8
  %sub = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %11 = load i64, i64* %cdr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %11, %call9
  br i1 %cmp10, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.end
  %12 = load i64, i64* %list.addr, align 8
  %sub13 = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub13 to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car, align 8
  store i64 %15, i64* %vec, align 8
  %16 = load i64, i64* %vec, align 8
  %call14 = call i64 @ASIZE(i64 %16)
  %conv15 = trunc i64 %call14 to i32
  store i32 %conv15, i32* %maxlen, align 4
  br label %if.end.45

if.else:                                          ; preds = %if.end
  %17 = load i32, i32* %best_only.addr, align 4
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.then.16, label %if.else.40

if.then.16:                                       ; preds = %if.else
  store i32 0, i32* %maxlen, align 4
  %18 = load i64, i64* %list.addr, align 8
  store i64 %18, i64* %tail, align 8
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.35, %if.then.16
  %19 = load i64, i64* %tail, align 8
  %and18 = and i64 %19, 7
  %conv19 = trunc i64 %and18 to i32
  %cmp20 = icmp eq i32 %conv19, 3
  br i1 %cmp20, label %for.body.22, label %for.end.39

for.body.22:                                      ; preds = %for.cond.17
  %20 = load i32, i32* %maxlen, align 4
  %conv23 = sext i32 %20 to i64
  %21 = load i64, i64* %tail, align 8
  %sub24 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub24 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %car25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 0
  %24 = load i64, i64* %car25, align 8
  %call26 = call i64 @ASIZE(i64 %24)
  %cmp27 = icmp slt i64 %conv23, %call26
  br i1 %cmp27, label %if.then.29, label %if.end.34

if.then.29:                                       ; preds = %for.body.22
  %25 = load i64, i64* %tail, align 8
  %sub30 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub30 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %car31 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 0
  %28 = load i64, i64* %car31, align 8
  %call32 = call i64 @ASIZE(i64 %28)
  %conv33 = trunc i64 %call32 to i32
  store i32 %conv33, i32* %maxlen, align 4
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.29, %for.body.22
  br label %for.inc.35

for.inc.35:                                       ; preds = %if.end.34
  %29 = load i64, i64* %tail, align 8
  %sub36 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub36 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %u37 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 1
  %cdr38 = bitcast %union.anon.10* %u37 to i64*
  %32 = load i64, i64* %cdr38, align 8
  store i64 %32, i64* %tail, align 8
  br label %for.cond.17

for.end.39:                                       ; preds = %for.cond.17
  br label %if.end.44

if.else.40:                                       ; preds = %if.else
  %33 = load i64, i64* %list.addr, align 8
  %call41 = call i64 @font_vconcat_entity_vectors(i64 %33)
  store i64 %call41, i64* %vec, align 8
  %34 = load i64, i64* %vec, align 8
  %call42 = call i64 @ASIZE(i64 %34)
  %conv43 = trunc i64 %call42 to i32
  store i32 %conv43, i32* %maxlen, align 4
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.40, %for.end.39
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.12
  %35 = load i32, i32* %maxlen, align 4
  %conv46 = sext i32 %35 to i64
  %mul = mul i64 %conv46, 16
  %36 = load i64, i64* %sa_avail, align 8
  %cmp47 = icmp ule i64 %mul, %36
  br i1 %cmp47, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.45
  %37 = load i32, i32* %maxlen, align 4
  %conv49 = sext i32 %37 to i64
  %mul50 = mul i64 %conv49, 16
  %38 = load i64, i64* %sa_avail, align 8
  %sub51 = sub i64 %38, %mul50
  store i64 %sub51, i64* %sa_avail, align 8
  %39 = load i32, i32* %maxlen, align 4
  %conv52 = sext i32 %39 to i64
  %mul53 = mul i64 %conv52, 16
  %40 = alloca i8, i64 %mul53
  br label %cond.end

cond.false:                                       ; preds = %if.end.45
  store i8 1, i8* %sa_must_free, align 1
  %41 = load i32, i32* %maxlen, align 4
  %conv54 = sext i32 %41 to i64
  %mul55 = mul i64 %conv54, 16
  %call56 = call i8* @record_xmalloc(i64 %mul55)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %40, %cond.true ], [ %call56, %cond.false ]
  %42 = bitcast i8* %cond to %struct.font_sort_data*
  store %struct.font_sort_data* %42, %struct.font_sort_data** %data, align 8
  store i32 -1, i32* %best_score, align 4
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call57, i64* %best_entity, align 8
  %43 = load i64, i64* %list.addr, align 8
  store i64 %43, i64* %tail, align 8
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.inc.150, %cond.end
  %44 = load i64, i64* %tail, align 8
  %and59 = and i64 %44, 7
  %conv60 = trunc i64 %and59 to i32
  %cmp61 = icmp eq i32 %conv60, 3
  br i1 %cmp61, label %for.body.63, label %for.end.154

for.body.63:                                      ; preds = %for.cond.58
  store i32 0, i32* %font_driver_preference, align 4
  %45 = load i32, i32* %best_only.addr, align 4
  %tobool64 = icmp ne i32 %45, 0
  br i1 %tobool64, label %if.then.65, label %if.end.68

if.then.65:                                       ; preds = %for.body.63
  %46 = load i64, i64* %tail, align 8
  %sub66 = sub nsw i64 %46, 3
  %47 = inttoptr i64 %sub66 to i8*
  %48 = bitcast i8* %47 to %struct.Lisp_Cons*
  %car67 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %48, i32 0, i32 0
  %49 = load i64, i64* %car67, align 8
  store i64 %49, i64* %vec, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.65, %for.body.63
  %50 = load i64, i64* %vec, align 8
  %call69 = call i64 @ASIZE(i64 %50)
  %conv70 = trunc i64 %call69 to i32
  store i32 %conv70, i32* %len, align 4
  %51 = load i64, i64* %vec, align 8
  %call71 = call i64 @AREF(i64 %51, i64 0)
  %call72 = call i64 @AREF(i64 %call71, i64 0)
  store i64 %call72, i64* %current_font_driver, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.73

for.cond.73:                                      ; preds = %for.inc.131, %if.end.68
  %52 = load i32, i32* %i, align 4
  %53 = load i32, i32* %len, align 4
  %cmp74 = icmp slt i32 %52, %53
  br i1 %cmp74, label %for.body.76, label %for.end.133

for.body.76:                                      ; preds = %for.cond.73
  %54 = load i64, i64* %vec, align 8
  %55 = load i32, i32* %i, align 4
  %conv77 = sext i32 %55 to i64
  %call78 = call i64 @AREF(i64 %54, i64 %conv77)
  %56 = load i32, i32* %i, align 4
  %idxprom79 = sext i32 %56 to i64
  %57 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx80 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %57, i64 %idxprom79
  %entity = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx80, i32 0, i32 2
  store i64 %call78, i64* %entity, align 8
  %58 = load i32, i32* %best_only.addr, align 4
  %cmp81 = icmp sle i32 %58, 0
  br i1 %cmp81, label %cond.true.89, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.76
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %60 = load i32, i32* %i, align 4
  %idxprom83 = sext i32 %60 to i64
  %61 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx84 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %61, i64 %idxprom83
  %entity85 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx84, i32 0, i32 2
  %62 = load i64, i64* %entity85, align 8
  %63 = load i32, i32* %best_only.addr, align 4
  %call86 = call i32 @font_has_char(%struct.frame* %59, i64 %62, i32 %63)
  %cmp87 = icmp sgt i32 %call86, 0
  br i1 %cmp87, label %cond.true.89, label %cond.false.94

cond.true.89:                                     ; preds = %lor.lhs.false, %for.body.76
  %64 = load i32, i32* %i, align 4
  %idxprom90 = sext i32 %64 to i64
  %65 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx91 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %65, i64 %idxprom90
  %entity92 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx91, i32 0, i32 2
  %66 = load i64, i64* %entity92, align 8
  %arraydecay = getelementptr inbounds [13 x i64], [13 x i64]* %prefer_prop, i32 0, i32 0
  %call93 = call i32 @font_score(i64 %66, i64* %arraydecay)
  br label %cond.end.95

cond.false.94:                                    ; preds = %lor.lhs.false
  br label %cond.end.95

cond.end.95:                                      ; preds = %cond.false.94, %cond.true.89
  %cond96 = phi i32 [ %call93, %cond.true.89 ], [ -1, %cond.false.94 ]
  %67 = load i32, i32* %i, align 4
  %idxprom97 = sext i32 %67 to i64
  %68 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx98 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %68, i64 %idxprom97
  %score = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx98, i32 0, i32 0
  store i32 %cond96, i32* %score, align 4
  %69 = load i32, i32* %best_only.addr, align 4
  %tobool99 = icmp ne i32 %69, 0
  br i1 %tobool99, label %land.lhs.true, label %if.end.116

land.lhs.true:                                    ; preds = %cond.end.95
  %70 = load i32, i32* %best_score, align 4
  %71 = load i32, i32* %i, align 4
  %idxprom100 = sext i32 %71 to i64
  %72 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx101 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %72, i64 %idxprom100
  %score102 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx101, i32 0, i32 0
  %73 = load i32, i32* %score102, align 4
  %cmp103 = icmp ugt i32 %70, %73
  br i1 %cmp103, label %if.then.105, label %if.end.116

if.then.105:                                      ; preds = %land.lhs.true
  %74 = load i32, i32* %i, align 4
  %idxprom106 = sext i32 %74 to i64
  %75 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx107 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %75, i64 %idxprom106
  %score108 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx107, i32 0, i32 0
  %76 = load i32, i32* %score108, align 4
  store i32 %76, i32* %best_score, align 4
  %77 = load i32, i32* %i, align 4
  %idxprom109 = sext i32 %77 to i64
  %78 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx110 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %78, i64 %idxprom109
  %entity111 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx110, i32 0, i32 2
  %79 = load i64, i64* %entity111, align 8
  store i64 %79, i64* %best_entity, align 8
  %80 = load i32, i32* %best_score, align 4
  %cmp112 = icmp eq i32 %80, 0
  br i1 %cmp112, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %if.then.105
  br label %for.end.133

if.end.115:                                       ; preds = %if.then.105
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.115, %land.lhs.true, %cond.end.95
  %81 = load i64, i64* %current_font_driver, align 8
  %82 = load i64, i64* %vec, align 8
  %83 = load i32, i32* %i, align 4
  %conv117 = sext i32 %83 to i64
  %call118 = call i64 @AREF(i64 %82, i64 %conv117)
  %call119 = call i64 @AREF(i64 %call118, i64 0)
  %cmp120 = icmp eq i64 %81, %call119
  br i1 %cmp120, label %if.end.127, label %if.then.122

if.then.122:                                      ; preds = %if.end.116
  %84 = load i64, i64* %vec, align 8
  %85 = load i32, i32* %i, align 4
  %conv123 = sext i32 %85 to i64
  %call124 = call i64 @AREF(i64 %84, i64 %conv123)
  %call125 = call i64 @AREF(i64 %call124, i64 0)
  store i64 %call125, i64* %current_font_driver, align 8
  %86 = load i32, i32* %font_driver_preference, align 4
  %inc126 = add nsw i32 %86, 1
  store i32 %inc126, i32* %font_driver_preference, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.122, %if.end.116
  %87 = load i32, i32* %font_driver_preference, align 4
  %88 = load i32, i32* %i, align 4
  %idxprom128 = sext i32 %88 to i64
  %89 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx129 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %89, i64 %idxprom128
  %font_driver_preference130 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx129, i32 0, i32 1
  store i32 %87, i32* %font_driver_preference130, align 4
  br label %for.inc.131

for.inc.131:                                      ; preds = %if.end.127
  %90 = load i32, i32* %i, align 4
  %inc132 = add nsw i32 %90, 1
  store i32 %inc132, i32* %i, align 4
  br label %for.cond.73

for.end.133:                                      ; preds = %if.then.114, %for.cond.73
  %91 = load i32, i32* %best_only.addr, align 4
  %tobool134 = icmp ne i32 %91, 0
  br i1 %tobool134, label %if.else.148, label %if.then.135

if.then.135:                                      ; preds = %for.end.133
  %92 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %93 = bitcast %struct.font_sort_data* %92 to i8*
  %94 = load i32, i32* %len, align 4
  %conv136 = sext i32 %94 to i64
  call void @qsort(i8* %93, i64 %conv136, i64 16, i32 (i8*, i8*)* @font_compare)
  store i32 0, i32* %i, align 4
  br label %for.cond.137

for.cond.137:                                     ; preds = %for.inc.145, %if.then.135
  %95 = load i32, i32* %i, align 4
  %96 = load i32, i32* %len, align 4
  %cmp138 = icmp slt i32 %95, %96
  br i1 %cmp138, label %for.body.140, label %for.end.147

for.body.140:                                     ; preds = %for.cond.137
  %97 = load i64, i64* %vec, align 8
  %98 = load i32, i32* %i, align 4
  %conv141 = sext i32 %98 to i64
  %99 = load i32, i32* %i, align 4
  %idxprom142 = sext i32 %99 to i64
  %100 = load %struct.font_sort_data*, %struct.font_sort_data** %data, align 8
  %arrayidx143 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %100, i64 %idxprom142
  %entity144 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %arrayidx143, i32 0, i32 2
  %101 = load i64, i64* %entity144, align 8
  call void @ASET(i64 %97, i64 %conv141, i64 %101)
  br label %for.inc.145

for.inc.145:                                      ; preds = %for.body.140
  %102 = load i32, i32* %i, align 4
  %inc146 = add nsw i32 %102, 1
  store i32 %inc146, i32* %i, align 4
  br label %for.cond.137

for.end.147:                                      ; preds = %for.cond.137
  br label %for.end.154

if.else.148:                                      ; preds = %for.end.133
  %103 = load i64, i64* %best_entity, align 8
  store i64 %103, i64* %vec, align 8
  br label %if.end.149

if.end.149:                                       ; preds = %if.else.148
  br label %for.inc.150

for.inc.150:                                      ; preds = %if.end.149
  %104 = load i64, i64* %tail, align 8
  %sub151 = sub nsw i64 %104, 3
  %105 = inttoptr i64 %sub151 to i8*
  %106 = bitcast i8* %105 to %struct.Lisp_Cons*
  %u152 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %106, i32 0, i32 1
  %cdr153 = bitcast %union.anon.10* %u152 to i64*
  %107 = load i64, i64* %cdr153, align 8
  store i64 %107, i64* %tail, align 8
  br label %for.cond.58

for.end.154:                                      ; preds = %for.end.147, %for.cond.58
  br label %do.body

do.body:                                          ; preds = %for.end.154
  %108 = load i8, i8* %sa_must_free, align 1
  %tobool155 = trunc i8 %108 to i1
  br i1 %tobool155, label %if.then.156, label %if.end.159

if.then.156:                                      ; preds = %do.body
  store i8 0, i8* %sa_must_free, align 1
  %109 = load i64, i64* %sa_count, align 8
  %call157 = call i64 @builtin_lisp_symbol(i32 0)
  %call158 = call i64 @unbind_to(i64 %109, i64 %call157)
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.156, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.159
  br label %do.body.160

do.body.160:                                      ; preds = %do.end
  %110 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call161 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp162 = icmp eq i64 %110, %call161
  br i1 %cmp162, label %if.end.165, label %if.then.164

if.then.164:                                      ; preds = %do.body.160
  %111 = load i64, i64* %prefer.addr, align 8
  %112 = load i64, i64* %vec, align 8
  call void @font_add_log(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.88, i32 0, i32 0), i64 %111, i64 %112)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.164, %do.body.160
  br label %do.end.166

do.end.166:                                       ; preds = %if.end.165
  %113 = load i64, i64* %vec, align 8
  ret i64 %113
}

; Function Attrs: nounwind uwtable
define internal i64 @font_vconcat_entity_vectors(i64 %list) #0 {
entry:
  %list.addr = alloca i64, align 8
  %nargs = alloca i64, align 8
  %args = alloca i64*, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %alloca_nbytes = alloca i64, align 8
  %arg_ = alloca i64, align 8
  %i = alloca i64, align 8
  %result = alloca i64, align 8
  store i64 %list, i64* %list.addr, align 8
  %0 = load i64, i64* %list.addr, align 8
  %call = call i64 @Flength(i64 %0)
  %shr = ashr i64 %call, 2
  store i64 %shr, i64* %nargs, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call1 = call i64 @SPECPDL_INDEX()
  store i64 %call1, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  br i1 false, label %cond.true, label %cond.false.472

cond.true:                                        ; preds = %do.body
  br i1 false, label %cond.true.2, label %cond.false.257

cond.true.2:                                      ; preds = %cond.true
  %1 = load i64, i64* %nargs, align 8
  %conv = trunc i64 %1 to i8
  %conv3 = sext i8 %conv to i32
  %add = add nsw i32 0, %conv3
  %mul = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul, 1
  %cmp = icmp slt i32 %sub, 0
  br i1 %cmp, label %cond.true.5, label %cond.false

cond.true.5:                                      ; preds = %cond.true.2
  %2 = load i64, i64* %nargs, align 8
  %conv6 = trunc i64 %2 to i8
  %conv7 = sext i8 %conv6 to i32
  %add8 = add nsw i32 0, %conv7
  %mul9 = mul nsw i32 0, %add8
  %add10 = add nsw i32 %mul9, 0
  %neg = xor i32 %add10, -1
  %cmp11 = icmp eq i32 %neg, -1
  %conv12 = zext i1 %cmp11 to i32
  %sub13 = sub nsw i32 0, %conv12
  %3 = load i64, i64* %nargs, align 8
  %conv14 = trunc i64 %3 to i8
  %conv15 = sext i8 %conv14 to i32
  %add16 = add nsw i32 0, %conv15
  %mul17 = mul nsw i32 0, %add16
  %add18 = add nsw i32 %mul17, 1
  %shl = shl i32 %add18, 30
  %sub19 = sub nsw i32 %shl, 1
  %mul20 = mul nsw i32 %sub19, 2
  %add21 = add nsw i32 %mul20, 1
  %sub22 = sub nsw i32 %sub13, %add21
  br label %cond.end

cond.false:                                       ; preds = %cond.true.2
  %4 = load i64, i64* %nargs, align 8
  %conv23 = trunc i64 %4 to i8
  %conv24 = sext i8 %conv23 to i32
  %add25 = add nsw i32 0, %conv24
  %mul26 = mul nsw i32 0, %add25
  %add27 = add nsw i32 %mul26, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.5
  %cond = phi i32 [ %sub22, %cond.true.5 ], [ %add27, %cond.false ]
  %cmp28 = icmp eq i32 %cond, 0
  br i1 %cmp28, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %5 = load i64, i64* %nargs, align 8
  %conv30 = trunc i64 %5 to i8
  %conv31 = sext i8 %conv30 to i32
  %cmp32 = icmp slt i32 %conv31, 0
  br i1 %cmp32, label %cond.true.211, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end
  br i1 false, label %cond.true.34, label %cond.false.112

cond.true.34:                                     ; preds = %lor.lhs.false
  %6 = load i64, i64* %nargs, align 8
  %conv35 = trunc i64 %6 to i8
  %conv36 = sext i8 %conv35 to i32
  %cmp37 = icmp slt i32 %conv36, 0
  br i1 %cmp37, label %cond.true.39, label %cond.false.69

cond.true.39:                                     ; preds = %cond.true.34
  %7 = load i64, i64* %nargs, align 8
  %conv40 = trunc i64 %7 to i8
  %conv41 = sext i8 %conv40 to i32
  %8 = load i64, i64* %nargs, align 8
  %conv42 = trunc i64 %8 to i8
  %conv43 = sext i8 %conv42 to i32
  %add44 = add nsw i32 0, %conv43
  %mul45 = mul nsw i32 0, %add44
  %sub46 = sub nsw i32 %mul45, 1
  %cmp47 = icmp slt i32 %sub46, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.59

cond.true.49:                                     ; preds = %cond.true.39
  %9 = load i64, i64* %nargs, align 8
  %conv50 = trunc i64 %9 to i8
  %conv51 = sext i8 %conv50 to i32
  %add52 = add nsw i32 0, %conv51
  %mul53 = mul nsw i32 0, %add52
  %add54 = add nsw i32 %mul53, 1
  %shl55 = shl i32 %add54, 30
  %sub56 = sub nsw i32 %shl55, 1
  %mul57 = mul nsw i32 %sub56, 2
  %add58 = add nsw i32 %mul57, 1
  br label %cond.end.65

cond.false.59:                                    ; preds = %cond.true.39
  %10 = load i64, i64* %nargs, align 8
  %conv60 = trunc i64 %10 to i8
  %conv61 = sext i8 %conv60 to i32
  %add62 = add nsw i32 0, %conv61
  %mul63 = mul nsw i32 0, %add62
  %sub64 = sub nsw i32 %mul63, 1
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.59, %cond.true.49
  %cond66 = phi i32 [ %add58, %cond.true.49 ], [ %sub64, %cond.false.59 ]
  %div = sdiv i32 %cond66, 8
  %cmp67 = icmp slt i32 %conv41, %div
  br i1 %cmp67, label %cond.true.211, label %lor.lhs.false.191

cond.false.69:                                    ; preds = %cond.true.34
  br i1 false, label %cond.true.70, label %cond.false.71

cond.true.70:                                     ; preds = %cond.false.69
  br i1 false, label %cond.true.211, label %lor.lhs.false.191

cond.false.71:                                    ; preds = %cond.false.69
  %11 = load i64, i64* %nargs, align 8
  %conv72 = trunc i64 %11 to i8
  %conv73 = sext i8 %conv72 to i32
  %add74 = add nsw i32 0, %conv73
  %mul75 = mul nsw i32 0, %add74
  %sub76 = sub nsw i32 %mul75, 1
  %cmp77 = icmp slt i32 %sub76, 0
  br i1 %cmp77, label %cond.true.79, label %cond.false.99

cond.true.79:                                     ; preds = %cond.false.71
  %12 = load i64, i64* %nargs, align 8
  %conv80 = trunc i64 %12 to i8
  %conv81 = sext i8 %conv80 to i32
  %add82 = add nsw i32 0, %conv81
  %mul83 = mul nsw i32 0, %add82
  %add84 = add nsw i32 %mul83, 0
  %neg85 = xor i32 %add84, -1
  %cmp86 = icmp eq i32 %neg85, -1
  %conv87 = zext i1 %cmp86 to i32
  %sub88 = sub nsw i32 0, %conv87
  %13 = load i64, i64* %nargs, align 8
  %conv89 = trunc i64 %13 to i8
  %conv90 = sext i8 %conv89 to i32
  %add91 = add nsw i32 0, %conv90
  %mul92 = mul nsw i32 0, %add91
  %add93 = add nsw i32 %mul92, 1
  %shl94 = shl i32 %add93, 30
  %sub95 = sub nsw i32 %shl94, 1
  %mul96 = mul nsw i32 %sub95, 2
  %add97 = add nsw i32 %mul96, 1
  %sub98 = sub nsw i32 %sub88, %add97
  br label %cond.end.105

cond.false.99:                                    ; preds = %cond.false.71
  %14 = load i64, i64* %nargs, align 8
  %conv100 = trunc i64 %14 to i8
  %conv101 = sext i8 %conv100 to i32
  %add102 = add nsw i32 0, %conv101
  %mul103 = mul nsw i32 0, %add102
  %add104 = add nsw i32 %mul103, 0
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.false.99, %cond.true.79
  %cond106 = phi i32 [ %sub98, %cond.true.79 ], [ %add104, %cond.false.99 ]
  %div107 = sdiv i32 %cond106, 8
  %15 = load i64, i64* %nargs, align 8
  %conv108 = trunc i64 %15 to i8
  %conv109 = sext i8 %conv108 to i32
  %cmp110 = icmp slt i32 %div107, %conv109
  br i1 %cmp110, label %cond.true.211, label %lor.lhs.false.191

cond.false.112:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.113, label %cond.false.114

cond.true.113:                                    ; preds = %cond.false.112
  br i1 false, label %cond.true.211, label %lor.lhs.false.191

cond.false.114:                                   ; preds = %cond.false.112
  %16 = load i64, i64* %nargs, align 8
  %conv115 = trunc i64 %16 to i8
  %conv116 = sext i8 %conv115 to i32
  %cmp117 = icmp slt i32 %conv116, 0
  br i1 %cmp117, label %cond.true.119, label %cond.false.160

cond.true.119:                                    ; preds = %cond.false.114
  %17 = load i64, i64* %nargs, align 8
  %conv120 = trunc i64 %17 to i8
  %conv121 = sext i8 %conv120 to i32
  %18 = load i64, i64* %nargs, align 8
  %conv122 = trunc i64 %18 to i8
  %conv123 = sext i8 %conv122 to i32
  %add124 = add nsw i32 0, %conv123
  %mul125 = mul nsw i32 0, %add124
  %sub126 = sub nsw i32 %mul125, 1
  %cmp127 = icmp slt i32 %sub126, 0
  br i1 %cmp127, label %cond.true.129, label %cond.false.149

cond.true.129:                                    ; preds = %cond.true.119
  %19 = load i64, i64* %nargs, align 8
  %conv130 = trunc i64 %19 to i8
  %conv131 = sext i8 %conv130 to i32
  %add132 = add nsw i32 0, %conv131
  %mul133 = mul nsw i32 0, %add132
  %add134 = add nsw i32 %mul133, 0
  %neg135 = xor i32 %add134, -1
  %cmp136 = icmp eq i32 %neg135, -1
  %conv137 = zext i1 %cmp136 to i32
  %sub138 = sub nsw i32 0, %conv137
  %20 = load i64, i64* %nargs, align 8
  %conv139 = trunc i64 %20 to i8
  %conv140 = sext i8 %conv139 to i32
  %add141 = add nsw i32 0, %conv140
  %mul142 = mul nsw i32 0, %add141
  %add143 = add nsw i32 %mul142, 1
  %shl144 = shl i32 %add143, 30
  %sub145 = sub nsw i32 %shl144, 1
  %mul146 = mul nsw i32 %sub145, 2
  %add147 = add nsw i32 %mul146, 1
  %sub148 = sub nsw i32 %sub138, %add147
  br label %cond.end.155

cond.false.149:                                   ; preds = %cond.true.119
  %21 = load i64, i64* %nargs, align 8
  %conv150 = trunc i64 %21 to i8
  %conv151 = sext i8 %conv150 to i32
  %add152 = add nsw i32 0, %conv151
  %mul153 = mul nsw i32 0, %add152
  %add154 = add nsw i32 %mul153, 0
  br label %cond.end.155

cond.end.155:                                     ; preds = %cond.false.149, %cond.true.129
  %cond156 = phi i32 [ %sub148, %cond.true.129 ], [ %add154, %cond.false.149 ]
  %div157 = sdiv i32 %cond156, 8
  %cmp158 = icmp slt i32 %conv121, %div157
  br i1 %cmp158, label %cond.true.211, label %lor.lhs.false.191

cond.false.160:                                   ; preds = %cond.false.114
  %22 = load i64, i64* %nargs, align 8
  %conv161 = trunc i64 %22 to i8
  %conv162 = sext i8 %conv161 to i32
  %add163 = add nsw i32 0, %conv162
  %mul164 = mul nsw i32 0, %add163
  %sub165 = sub nsw i32 %mul164, 1
  %cmp166 = icmp slt i32 %sub165, 0
  br i1 %cmp166, label %cond.true.168, label %cond.false.178

cond.true.168:                                    ; preds = %cond.false.160
  %23 = load i64, i64* %nargs, align 8
  %conv169 = trunc i64 %23 to i8
  %conv170 = sext i8 %conv169 to i32
  %add171 = add nsw i32 0, %conv170
  %mul172 = mul nsw i32 0, %add171
  %add173 = add nsw i32 %mul172, 1
  %shl174 = shl i32 %add173, 30
  %sub175 = sub nsw i32 %shl174, 1
  %mul176 = mul nsw i32 %sub175, 2
  %add177 = add nsw i32 %mul176, 1
  br label %cond.end.184

cond.false.178:                                   ; preds = %cond.false.160
  %24 = load i64, i64* %nargs, align 8
  %conv179 = trunc i64 %24 to i8
  %conv180 = sext i8 %conv179 to i32
  %add181 = add nsw i32 0, %conv180
  %mul182 = mul nsw i32 0, %add181
  %sub183 = sub nsw i32 %mul182, 1
  br label %cond.end.184

cond.end.184:                                     ; preds = %cond.false.178, %cond.true.168
  %cond185 = phi i32 [ %add177, %cond.true.168 ], [ %sub183, %cond.false.178 ]
  %div186 = sdiv i32 %cond185, 8
  %25 = load i64, i64* %nargs, align 8
  %conv187 = trunc i64 %25 to i8
  %conv188 = sext i8 %conv187 to i32
  %cmp189 = icmp slt i32 %div186, %conv188
  br i1 %cmp189, label %cond.true.211, label %lor.lhs.false.191

lor.lhs.false.191:                                ; preds = %cond.end.184, %cond.end.155, %cond.true.113, %cond.end.105, %cond.true.70, %cond.end.65
  %26 = load i64, i64* %nargs, align 8
  %conv192 = trunc i64 %26 to i8
  %conv193 = sext i8 %conv192 to i32
  %mul194 = mul nsw i32 %conv193, 8
  %mul195 = mul nsw i32 0, %mul194
  %sub196 = sub nsw i32 %mul195, 1
  %cmp197 = icmp slt i32 %sub196, 0
  br i1 %cmp197, label %land.lhs.true.199, label %lor.lhs.false.205

land.lhs.true.199:                                ; preds = %lor.lhs.false.191
  %27 = load i64, i64* %nargs, align 8
  %conv200 = trunc i64 %27 to i8
  %conv201 = sext i8 %conv200 to i32
  %mul202 = mul nsw i32 %conv201, 8
  %cmp203 = icmp slt i32 %mul202, -128
  br i1 %cmp203, label %cond.true.211, label %lor.lhs.false.205

lor.lhs.false.205:                                ; preds = %land.lhs.true.199, %lor.lhs.false.191
  %28 = load i64, i64* %nargs, align 8
  %conv206 = trunc i64 %28 to i8
  %conv207 = sext i8 %conv206 to i32
  %mul208 = mul nsw i32 %conv207, 8
  %cmp209 = icmp slt i32 127, %mul208
  br i1 %cmp209, label %cond.true.211, label %cond.false.234

cond.true.211:                                    ; preds = %lor.lhs.false.205, %land.lhs.true.199, %cond.end.184, %cond.end.155, %cond.true.113, %cond.end.105, %cond.true.70, %cond.end.65, %land.lhs.true
  %29 = load i64, i64* %nargs, align 8
  %conv212 = trunc i64 %29 to i8
  %conv213 = zext i8 %conv212 to i32
  %mul214 = mul nsw i32 %conv213, 8
  %cmp215 = icmp sle i32 %mul214, 127
  br i1 %cmp215, label %cond.true.217, label %cond.false.223

cond.true.217:                                    ; preds = %cond.true.211
  %30 = load i64, i64* %nargs, align 8
  %conv218 = trunc i64 %30 to i8
  %conv219 = zext i8 %conv218 to i32
  %mul220 = mul nsw i32 %conv219, 8
  %conv221 = trunc i32 %mul220 to i8
  %conv222 = sext i8 %conv221 to i32
  br label %cond.end.231

cond.false.223:                                   ; preds = %cond.true.211
  %31 = load i64, i64* %nargs, align 8
  %conv224 = trunc i64 %31 to i8
  %conv225 = zext i8 %conv224 to i32
  %mul226 = mul nsw i32 %conv225, 8
  %sub227 = sub nsw i32 %mul226, -128
  %conv228 = trunc i32 %sub227 to i8
  %conv229 = sext i8 %conv228 to i32
  %add230 = add nsw i32 %conv229, -128
  br label %cond.end.231

cond.end.231:                                     ; preds = %cond.false.223, %cond.true.217
  %cond232 = phi i32 [ %conv222, %cond.true.217 ], [ %add230, %cond.false.223 ]
  %conv233 = sext i32 %cond232 to i64
  store i64 %conv233, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.234:                                   ; preds = %lor.lhs.false.205
  %32 = load i64, i64* %nargs, align 8
  %conv235 = trunc i64 %32 to i8
  %conv236 = zext i8 %conv235 to i32
  %mul237 = mul nsw i32 %conv236, 8
  %cmp238 = icmp sle i32 %mul237, 127
  br i1 %cmp238, label %cond.true.240, label %cond.false.246

cond.true.240:                                    ; preds = %cond.false.234
  %33 = load i64, i64* %nargs, align 8
  %conv241 = trunc i64 %33 to i8
  %conv242 = zext i8 %conv241 to i32
  %mul243 = mul nsw i32 %conv242, 8
  %conv244 = trunc i32 %mul243 to i8
  %conv245 = sext i8 %conv244 to i32
  br label %cond.end.254

cond.false.246:                                   ; preds = %cond.false.234
  %34 = load i64, i64* %nargs, align 8
  %conv247 = trunc i64 %34 to i8
  %conv248 = zext i8 %conv247 to i32
  %mul249 = mul nsw i32 %conv248, 8
  %sub250 = sub nsw i32 %mul249, -128
  %conv251 = trunc i32 %sub250 to i8
  %conv252 = sext i8 %conv251 to i32
  %add253 = add nsw i32 %conv252, -128
  br label %cond.end.254

cond.end.254:                                     ; preds = %cond.false.246, %cond.true.240
  %cond255 = phi i32 [ %conv245, %cond.true.240 ], [ %add253, %cond.false.246 ]
  %conv256 = sext i32 %cond255 to i64
  store i64 %conv256, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.257:                                   ; preds = %cond.true
  %35 = load i64, i64* %nargs, align 8
  %add258 = add nsw i64 0, %35
  %mul259 = mul nsw i64 0, %add258
  %sub260 = sub nsw i64 %mul259, 1
  %cmp261 = icmp slt i64 %sub260, 0
  br i1 %cmp261, label %cond.true.263, label %cond.false.280

cond.true.263:                                    ; preds = %cond.false.257
  %36 = load i64, i64* %nargs, align 8
  %add264 = add nsw i64 0, %36
  %mul265 = mul nsw i64 0, %add264
  %add266 = add nsw i64 %mul265, 0
  %neg267 = xor i64 %add266, -1
  %cmp268 = icmp eq i64 %neg267, -1
  %conv269 = zext i1 %cmp268 to i32
  %sub270 = sub nsw i32 0, %conv269
  %conv271 = sext i32 %sub270 to i64
  %37 = load i64, i64* %nargs, align 8
  %add272 = add nsw i64 0, %37
  %mul273 = mul nsw i64 0, %add272
  %add274 = add nsw i64 %mul273, 1
  %shl275 = shl i64 %add274, 62
  %sub276 = sub nsw i64 %shl275, 1
  %mul277 = mul nsw i64 %sub276, 2
  %add278 = add nsw i64 %mul277, 1
  %sub279 = sub nsw i64 %conv271, %add278
  br label %cond.end.284

cond.false.280:                                   ; preds = %cond.false.257
  %38 = load i64, i64* %nargs, align 8
  %add281 = add nsw i64 0, %38
  %mul282 = mul nsw i64 0, %add281
  %add283 = add nsw i64 %mul282, 0
  br label %cond.end.284

cond.end.284:                                     ; preds = %cond.false.280, %cond.true.263
  %cond285 = phi i64 [ %sub279, %cond.true.263 ], [ %add283, %cond.false.280 ]
  %cmp286 = icmp eq i64 %cond285, 0
  br i1 %cmp286, label %land.lhs.true.288, label %lor.lhs.false.291

land.lhs.true.288:                                ; preds = %cond.end.284
  %39 = load i64, i64* %nargs, align 8
  %cmp289 = icmp slt i64 %39, 0
  br i1 %cmp289, label %cond.true.426, label %lor.lhs.false.291

lor.lhs.false.291:                                ; preds = %land.lhs.true.288, %cond.end.284
  br i1 false, label %cond.true.292, label %cond.false.352

cond.true.292:                                    ; preds = %lor.lhs.false.291
  %40 = load i64, i64* %nargs, align 8
  %cmp293 = icmp slt i64 %40, 0
  br i1 %cmp293, label %cond.true.295, label %cond.false.318

cond.true.295:                                    ; preds = %cond.true.292
  %41 = load i64, i64* %nargs, align 8
  %42 = load i64, i64* %nargs, align 8
  %add296 = add nsw i64 0, %42
  %mul297 = mul nsw i64 0, %add296
  %sub298 = sub nsw i64 %mul297, 1
  %cmp299 = icmp slt i64 %sub298, 0
  br i1 %cmp299, label %cond.true.301, label %cond.false.309

cond.true.301:                                    ; preds = %cond.true.295
  %43 = load i64, i64* %nargs, align 8
  %add302 = add nsw i64 0, %43
  %mul303 = mul nsw i64 0, %add302
  %add304 = add nsw i64 %mul303, 1
  %shl305 = shl i64 %add304, 62
  %sub306 = sub nsw i64 %shl305, 1
  %mul307 = mul nsw i64 %sub306, 2
  %add308 = add nsw i64 %mul307, 1
  br label %cond.end.313

cond.false.309:                                   ; preds = %cond.true.295
  %44 = load i64, i64* %nargs, align 8
  %add310 = add nsw i64 0, %44
  %mul311 = mul nsw i64 0, %add310
  %sub312 = sub nsw i64 %mul311, 1
  br label %cond.end.313

cond.end.313:                                     ; preds = %cond.false.309, %cond.true.301
  %cond314 = phi i64 [ %add308, %cond.true.301 ], [ %sub312, %cond.false.309 ]
  %div315 = sdiv i64 %cond314, 8
  %cmp316 = icmp slt i64 %41, %div315
  br i1 %cmp316, label %cond.true.426, label %lor.lhs.false.412

cond.false.318:                                   ; preds = %cond.true.292
  br i1 false, label %cond.true.319, label %cond.false.320

cond.true.319:                                    ; preds = %cond.false.318
  br i1 false, label %cond.true.426, label %lor.lhs.false.412

cond.false.320:                                   ; preds = %cond.false.318
  %45 = load i64, i64* %nargs, align 8
  %add321 = add nsw i64 0, %45
  %mul322 = mul nsw i64 0, %add321
  %sub323 = sub nsw i64 %mul322, 1
  %cmp324 = icmp slt i64 %sub323, 0
  br i1 %cmp324, label %cond.true.326, label %cond.false.343

cond.true.326:                                    ; preds = %cond.false.320
  %46 = load i64, i64* %nargs, align 8
  %add327 = add nsw i64 0, %46
  %mul328 = mul nsw i64 0, %add327
  %add329 = add nsw i64 %mul328, 0
  %neg330 = xor i64 %add329, -1
  %cmp331 = icmp eq i64 %neg330, -1
  %conv332 = zext i1 %cmp331 to i32
  %sub333 = sub nsw i32 0, %conv332
  %conv334 = sext i32 %sub333 to i64
  %47 = load i64, i64* %nargs, align 8
  %add335 = add nsw i64 0, %47
  %mul336 = mul nsw i64 0, %add335
  %add337 = add nsw i64 %mul336, 1
  %shl338 = shl i64 %add337, 62
  %sub339 = sub nsw i64 %shl338, 1
  %mul340 = mul nsw i64 %sub339, 2
  %add341 = add nsw i64 %mul340, 1
  %sub342 = sub nsw i64 %conv334, %add341
  br label %cond.end.347

cond.false.343:                                   ; preds = %cond.false.320
  %48 = load i64, i64* %nargs, align 8
  %add344 = add nsw i64 0, %48
  %mul345 = mul nsw i64 0, %add344
  %add346 = add nsw i64 %mul345, 0
  br label %cond.end.347

cond.end.347:                                     ; preds = %cond.false.343, %cond.true.326
  %cond348 = phi i64 [ %sub342, %cond.true.326 ], [ %add346, %cond.false.343 ]
  %div349 = sdiv i64 %cond348, 8
  %49 = load i64, i64* %nargs, align 8
  %cmp350 = icmp slt i64 %div349, %49
  br i1 %cmp350, label %cond.true.426, label %lor.lhs.false.412

cond.false.352:                                   ; preds = %lor.lhs.false.291
  br i1 false, label %cond.true.353, label %cond.false.354

cond.true.353:                                    ; preds = %cond.false.352
  br i1 false, label %cond.true.426, label %lor.lhs.false.412

cond.false.354:                                   ; preds = %cond.false.352
  %50 = load i64, i64* %nargs, align 8
  %cmp355 = icmp slt i64 %50, 0
  br i1 %cmp355, label %cond.true.357, label %cond.false.389

cond.true.357:                                    ; preds = %cond.false.354
  %51 = load i64, i64* %nargs, align 8
  %52 = load i64, i64* %nargs, align 8
  %add358 = add nsw i64 0, %52
  %mul359 = mul nsw i64 0, %add358
  %sub360 = sub nsw i64 %mul359, 1
  %cmp361 = icmp slt i64 %sub360, 0
  br i1 %cmp361, label %cond.true.363, label %cond.false.380

cond.true.363:                                    ; preds = %cond.true.357
  %53 = load i64, i64* %nargs, align 8
  %add364 = add nsw i64 0, %53
  %mul365 = mul nsw i64 0, %add364
  %add366 = add nsw i64 %mul365, 0
  %neg367 = xor i64 %add366, -1
  %cmp368 = icmp eq i64 %neg367, -1
  %conv369 = zext i1 %cmp368 to i32
  %sub370 = sub nsw i32 0, %conv369
  %conv371 = sext i32 %sub370 to i64
  %54 = load i64, i64* %nargs, align 8
  %add372 = add nsw i64 0, %54
  %mul373 = mul nsw i64 0, %add372
  %add374 = add nsw i64 %mul373, 1
  %shl375 = shl i64 %add374, 62
  %sub376 = sub nsw i64 %shl375, 1
  %mul377 = mul nsw i64 %sub376, 2
  %add378 = add nsw i64 %mul377, 1
  %sub379 = sub nsw i64 %conv371, %add378
  br label %cond.end.384

cond.false.380:                                   ; preds = %cond.true.357
  %55 = load i64, i64* %nargs, align 8
  %add381 = add nsw i64 0, %55
  %mul382 = mul nsw i64 0, %add381
  %add383 = add nsw i64 %mul382, 0
  br label %cond.end.384

cond.end.384:                                     ; preds = %cond.false.380, %cond.true.363
  %cond385 = phi i64 [ %sub379, %cond.true.363 ], [ %add383, %cond.false.380 ]
  %div386 = sdiv i64 %cond385, 8
  %cmp387 = icmp slt i64 %51, %div386
  br i1 %cmp387, label %cond.true.426, label %lor.lhs.false.412

cond.false.389:                                   ; preds = %cond.false.354
  %56 = load i64, i64* %nargs, align 8
  %add390 = add nsw i64 0, %56
  %mul391 = mul nsw i64 0, %add390
  %sub392 = sub nsw i64 %mul391, 1
  %cmp393 = icmp slt i64 %sub392, 0
  br i1 %cmp393, label %cond.true.395, label %cond.false.403

cond.true.395:                                    ; preds = %cond.false.389
  %57 = load i64, i64* %nargs, align 8
  %add396 = add nsw i64 0, %57
  %mul397 = mul nsw i64 0, %add396
  %add398 = add nsw i64 %mul397, 1
  %shl399 = shl i64 %add398, 62
  %sub400 = sub nsw i64 %shl399, 1
  %mul401 = mul nsw i64 %sub400, 2
  %add402 = add nsw i64 %mul401, 1
  br label %cond.end.407

cond.false.403:                                   ; preds = %cond.false.389
  %58 = load i64, i64* %nargs, align 8
  %add404 = add nsw i64 0, %58
  %mul405 = mul nsw i64 0, %add404
  %sub406 = sub nsw i64 %mul405, 1
  br label %cond.end.407

cond.end.407:                                     ; preds = %cond.false.403, %cond.true.395
  %cond408 = phi i64 [ %add402, %cond.true.395 ], [ %sub406, %cond.false.403 ]
  %div409 = sdiv i64 %cond408, 8
  %59 = load i64, i64* %nargs, align 8
  %cmp410 = icmp slt i64 %div409, %59
  br i1 %cmp410, label %cond.true.426, label %lor.lhs.false.412

lor.lhs.false.412:                                ; preds = %cond.end.407, %cond.end.384, %cond.true.353, %cond.end.347, %cond.true.319, %cond.end.313
  %60 = load i64, i64* %nargs, align 8
  %mul413 = mul nsw i64 %60, 8
  %mul414 = mul nsw i64 0, %mul413
  %sub415 = sub nsw i64 %mul414, 1
  %cmp416 = icmp slt i64 %sub415, 0
  br i1 %cmp416, label %land.lhs.true.418, label %lor.lhs.false.422

land.lhs.true.418:                                ; preds = %lor.lhs.false.412
  %61 = load i64, i64* %nargs, align 8
  %mul419 = mul nsw i64 %61, 8
  %cmp420 = icmp slt i64 %mul419, -128
  br i1 %cmp420, label %cond.true.426, label %lor.lhs.false.422

lor.lhs.false.422:                                ; preds = %land.lhs.true.418, %lor.lhs.false.412
  %62 = load i64, i64* %nargs, align 8
  %mul423 = mul nsw i64 %62, 8
  %cmp424 = icmp slt i64 127, %mul423
  br i1 %cmp424, label %cond.true.426, label %cond.false.449

cond.true.426:                                    ; preds = %lor.lhs.false.422, %land.lhs.true.418, %cond.end.407, %cond.end.384, %cond.true.353, %cond.end.347, %cond.true.319, %cond.end.313, %land.lhs.true.288
  %63 = load i64, i64* %nargs, align 8
  %conv427 = trunc i64 %63 to i8
  %conv428 = zext i8 %conv427 to i32
  %mul429 = mul nsw i32 %conv428, 8
  %cmp430 = icmp sle i32 %mul429, 127
  br i1 %cmp430, label %cond.true.432, label %cond.false.438

cond.true.432:                                    ; preds = %cond.true.426
  %64 = load i64, i64* %nargs, align 8
  %conv433 = trunc i64 %64 to i8
  %conv434 = zext i8 %conv433 to i32
  %mul435 = mul nsw i32 %conv434, 8
  %conv436 = trunc i32 %mul435 to i8
  %conv437 = sext i8 %conv436 to i32
  br label %cond.end.446

cond.false.438:                                   ; preds = %cond.true.426
  %65 = load i64, i64* %nargs, align 8
  %conv439 = trunc i64 %65 to i8
  %conv440 = zext i8 %conv439 to i32
  %mul441 = mul nsw i32 %conv440, 8
  %sub442 = sub nsw i32 %mul441, -128
  %conv443 = trunc i32 %sub442 to i8
  %conv444 = sext i8 %conv443 to i32
  %add445 = add nsw i32 %conv444, -128
  br label %cond.end.446

cond.end.446:                                     ; preds = %cond.false.438, %cond.true.432
  %cond447 = phi i32 [ %conv437, %cond.true.432 ], [ %add445, %cond.false.438 ]
  %conv448 = sext i32 %cond447 to i64
  store i64 %conv448, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.449:                                   ; preds = %lor.lhs.false.422
  %66 = load i64, i64* %nargs, align 8
  %conv450 = trunc i64 %66 to i8
  %conv451 = zext i8 %conv450 to i32
  %mul452 = mul nsw i32 %conv451, 8
  %cmp453 = icmp sle i32 %mul452, 127
  br i1 %cmp453, label %cond.true.455, label %cond.false.461

cond.true.455:                                    ; preds = %cond.false.449
  %67 = load i64, i64* %nargs, align 8
  %conv456 = trunc i64 %67 to i8
  %conv457 = zext i8 %conv456 to i32
  %mul458 = mul nsw i32 %conv457, 8
  %conv459 = trunc i32 %mul458 to i8
  %conv460 = sext i8 %conv459 to i32
  br label %cond.end.469

cond.false.461:                                   ; preds = %cond.false.449
  %68 = load i64, i64* %nargs, align 8
  %conv462 = trunc i64 %68 to i8
  %conv463 = zext i8 %conv462 to i32
  %mul464 = mul nsw i32 %conv463, 8
  %sub465 = sub nsw i32 %mul464, -128
  %conv466 = trunc i32 %sub465 to i8
  %conv467 = sext i8 %conv466 to i32
  %add468 = add nsw i32 %conv467, -128
  br label %cond.end.469

cond.end.469:                                     ; preds = %cond.false.461, %cond.true.455
  %cond470 = phi i32 [ %conv460, %cond.true.455 ], [ %add468, %cond.false.461 ]
  %conv471 = sext i32 %cond470 to i64
  store i64 %conv471, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.472:                                   ; preds = %do.body
  br i1 false, label %cond.true.473, label %cond.false.957

cond.true.473:                                    ; preds = %cond.false.472
  br i1 false, label %cond.true.474, label %cond.false.742

cond.true.474:                                    ; preds = %cond.true.473
  %69 = load i64, i64* %nargs, align 8
  %conv475 = trunc i64 %69 to i16
  %conv476 = sext i16 %conv475 to i32
  %add477 = add nsw i32 0, %conv476
  %mul478 = mul nsw i32 0, %add477
  %sub479 = sub nsw i32 %mul478, 1
  %cmp480 = icmp slt i32 %sub479, 0
  br i1 %cmp480, label %cond.true.482, label %cond.false.502

cond.true.482:                                    ; preds = %cond.true.474
  %70 = load i64, i64* %nargs, align 8
  %conv483 = trunc i64 %70 to i16
  %conv484 = sext i16 %conv483 to i32
  %add485 = add nsw i32 0, %conv484
  %mul486 = mul nsw i32 0, %add485
  %add487 = add nsw i32 %mul486, 0
  %neg488 = xor i32 %add487, -1
  %cmp489 = icmp eq i32 %neg488, -1
  %conv490 = zext i1 %cmp489 to i32
  %sub491 = sub nsw i32 0, %conv490
  %71 = load i64, i64* %nargs, align 8
  %conv492 = trunc i64 %71 to i16
  %conv493 = sext i16 %conv492 to i32
  %add494 = add nsw i32 0, %conv493
  %mul495 = mul nsw i32 0, %add494
  %add496 = add nsw i32 %mul495, 1
  %shl497 = shl i32 %add496, 30
  %sub498 = sub nsw i32 %shl497, 1
  %mul499 = mul nsw i32 %sub498, 2
  %add500 = add nsw i32 %mul499, 1
  %sub501 = sub nsw i32 %sub491, %add500
  br label %cond.end.508

cond.false.502:                                   ; preds = %cond.true.474
  %72 = load i64, i64* %nargs, align 8
  %conv503 = trunc i64 %72 to i16
  %conv504 = sext i16 %conv503 to i32
  %add505 = add nsw i32 0, %conv504
  %mul506 = mul nsw i32 0, %add505
  %add507 = add nsw i32 %mul506, 0
  br label %cond.end.508

cond.end.508:                                     ; preds = %cond.false.502, %cond.true.482
  %cond509 = phi i32 [ %sub501, %cond.true.482 ], [ %add507, %cond.false.502 ]
  %cmp510 = icmp eq i32 %cond509, 0
  br i1 %cmp510, label %land.lhs.true.512, label %lor.lhs.false.517

land.lhs.true.512:                                ; preds = %cond.end.508
  %73 = load i64, i64* %nargs, align 8
  %conv513 = trunc i64 %73 to i16
  %conv514 = sext i16 %conv513 to i32
  %cmp515 = icmp slt i32 %conv514, 0
  br i1 %cmp515, label %cond.true.696, label %lor.lhs.false.517

lor.lhs.false.517:                                ; preds = %land.lhs.true.512, %cond.end.508
  br i1 false, label %cond.true.518, label %cond.false.597

cond.true.518:                                    ; preds = %lor.lhs.false.517
  %74 = load i64, i64* %nargs, align 8
  %conv519 = trunc i64 %74 to i16
  %conv520 = sext i16 %conv519 to i32
  %cmp521 = icmp slt i32 %conv520, 0
  br i1 %cmp521, label %cond.true.523, label %cond.false.554

cond.true.523:                                    ; preds = %cond.true.518
  %75 = load i64, i64* %nargs, align 8
  %conv524 = trunc i64 %75 to i16
  %conv525 = sext i16 %conv524 to i32
  %76 = load i64, i64* %nargs, align 8
  %conv526 = trunc i64 %76 to i16
  %conv527 = sext i16 %conv526 to i32
  %add528 = add nsw i32 0, %conv527
  %mul529 = mul nsw i32 0, %add528
  %sub530 = sub nsw i32 %mul529, 1
  %cmp531 = icmp slt i32 %sub530, 0
  br i1 %cmp531, label %cond.true.533, label %cond.false.543

cond.true.533:                                    ; preds = %cond.true.523
  %77 = load i64, i64* %nargs, align 8
  %conv534 = trunc i64 %77 to i16
  %conv535 = sext i16 %conv534 to i32
  %add536 = add nsw i32 0, %conv535
  %mul537 = mul nsw i32 0, %add536
  %add538 = add nsw i32 %mul537, 1
  %shl539 = shl i32 %add538, 30
  %sub540 = sub nsw i32 %shl539, 1
  %mul541 = mul nsw i32 %sub540, 2
  %add542 = add nsw i32 %mul541, 1
  br label %cond.end.549

cond.false.543:                                   ; preds = %cond.true.523
  %78 = load i64, i64* %nargs, align 8
  %conv544 = trunc i64 %78 to i16
  %conv545 = sext i16 %conv544 to i32
  %add546 = add nsw i32 0, %conv545
  %mul547 = mul nsw i32 0, %add546
  %sub548 = sub nsw i32 %mul547, 1
  br label %cond.end.549

cond.end.549:                                     ; preds = %cond.false.543, %cond.true.533
  %cond550 = phi i32 [ %add542, %cond.true.533 ], [ %sub548, %cond.false.543 ]
  %div551 = sdiv i32 %cond550, 8
  %cmp552 = icmp slt i32 %conv525, %div551
  br i1 %cmp552, label %cond.true.696, label %lor.lhs.false.676

cond.false.554:                                   ; preds = %cond.true.518
  br i1 false, label %cond.true.555, label %cond.false.556

cond.true.555:                                    ; preds = %cond.false.554
  br i1 false, label %cond.true.696, label %lor.lhs.false.676

cond.false.556:                                   ; preds = %cond.false.554
  %79 = load i64, i64* %nargs, align 8
  %conv557 = trunc i64 %79 to i16
  %conv558 = sext i16 %conv557 to i32
  %add559 = add nsw i32 0, %conv558
  %mul560 = mul nsw i32 0, %add559
  %sub561 = sub nsw i32 %mul560, 1
  %cmp562 = icmp slt i32 %sub561, 0
  br i1 %cmp562, label %cond.true.564, label %cond.false.584

cond.true.564:                                    ; preds = %cond.false.556
  %80 = load i64, i64* %nargs, align 8
  %conv565 = trunc i64 %80 to i16
  %conv566 = sext i16 %conv565 to i32
  %add567 = add nsw i32 0, %conv566
  %mul568 = mul nsw i32 0, %add567
  %add569 = add nsw i32 %mul568, 0
  %neg570 = xor i32 %add569, -1
  %cmp571 = icmp eq i32 %neg570, -1
  %conv572 = zext i1 %cmp571 to i32
  %sub573 = sub nsw i32 0, %conv572
  %81 = load i64, i64* %nargs, align 8
  %conv574 = trunc i64 %81 to i16
  %conv575 = sext i16 %conv574 to i32
  %add576 = add nsw i32 0, %conv575
  %mul577 = mul nsw i32 0, %add576
  %add578 = add nsw i32 %mul577, 1
  %shl579 = shl i32 %add578, 30
  %sub580 = sub nsw i32 %shl579, 1
  %mul581 = mul nsw i32 %sub580, 2
  %add582 = add nsw i32 %mul581, 1
  %sub583 = sub nsw i32 %sub573, %add582
  br label %cond.end.590

cond.false.584:                                   ; preds = %cond.false.556
  %82 = load i64, i64* %nargs, align 8
  %conv585 = trunc i64 %82 to i16
  %conv586 = sext i16 %conv585 to i32
  %add587 = add nsw i32 0, %conv586
  %mul588 = mul nsw i32 0, %add587
  %add589 = add nsw i32 %mul588, 0
  br label %cond.end.590

cond.end.590:                                     ; preds = %cond.false.584, %cond.true.564
  %cond591 = phi i32 [ %sub583, %cond.true.564 ], [ %add589, %cond.false.584 ]
  %div592 = sdiv i32 %cond591, 8
  %83 = load i64, i64* %nargs, align 8
  %conv593 = trunc i64 %83 to i16
  %conv594 = sext i16 %conv593 to i32
  %cmp595 = icmp slt i32 %div592, %conv594
  br i1 %cmp595, label %cond.true.696, label %lor.lhs.false.676

cond.false.597:                                   ; preds = %lor.lhs.false.517
  br i1 false, label %cond.true.598, label %cond.false.599

cond.true.598:                                    ; preds = %cond.false.597
  br i1 false, label %cond.true.696, label %lor.lhs.false.676

cond.false.599:                                   ; preds = %cond.false.597
  %84 = load i64, i64* %nargs, align 8
  %conv600 = trunc i64 %84 to i16
  %conv601 = sext i16 %conv600 to i32
  %cmp602 = icmp slt i32 %conv601, 0
  br i1 %cmp602, label %cond.true.604, label %cond.false.645

cond.true.604:                                    ; preds = %cond.false.599
  %85 = load i64, i64* %nargs, align 8
  %conv605 = trunc i64 %85 to i16
  %conv606 = sext i16 %conv605 to i32
  %86 = load i64, i64* %nargs, align 8
  %conv607 = trunc i64 %86 to i16
  %conv608 = sext i16 %conv607 to i32
  %add609 = add nsw i32 0, %conv608
  %mul610 = mul nsw i32 0, %add609
  %sub611 = sub nsw i32 %mul610, 1
  %cmp612 = icmp slt i32 %sub611, 0
  br i1 %cmp612, label %cond.true.614, label %cond.false.634

cond.true.614:                                    ; preds = %cond.true.604
  %87 = load i64, i64* %nargs, align 8
  %conv615 = trunc i64 %87 to i16
  %conv616 = sext i16 %conv615 to i32
  %add617 = add nsw i32 0, %conv616
  %mul618 = mul nsw i32 0, %add617
  %add619 = add nsw i32 %mul618, 0
  %neg620 = xor i32 %add619, -1
  %cmp621 = icmp eq i32 %neg620, -1
  %conv622 = zext i1 %cmp621 to i32
  %sub623 = sub nsw i32 0, %conv622
  %88 = load i64, i64* %nargs, align 8
  %conv624 = trunc i64 %88 to i16
  %conv625 = sext i16 %conv624 to i32
  %add626 = add nsw i32 0, %conv625
  %mul627 = mul nsw i32 0, %add626
  %add628 = add nsw i32 %mul627, 1
  %shl629 = shl i32 %add628, 30
  %sub630 = sub nsw i32 %shl629, 1
  %mul631 = mul nsw i32 %sub630, 2
  %add632 = add nsw i32 %mul631, 1
  %sub633 = sub nsw i32 %sub623, %add632
  br label %cond.end.640

cond.false.634:                                   ; preds = %cond.true.604
  %89 = load i64, i64* %nargs, align 8
  %conv635 = trunc i64 %89 to i16
  %conv636 = sext i16 %conv635 to i32
  %add637 = add nsw i32 0, %conv636
  %mul638 = mul nsw i32 0, %add637
  %add639 = add nsw i32 %mul638, 0
  br label %cond.end.640

cond.end.640:                                     ; preds = %cond.false.634, %cond.true.614
  %cond641 = phi i32 [ %sub633, %cond.true.614 ], [ %add639, %cond.false.634 ]
  %div642 = sdiv i32 %cond641, 8
  %cmp643 = icmp slt i32 %conv606, %div642
  br i1 %cmp643, label %cond.true.696, label %lor.lhs.false.676

cond.false.645:                                   ; preds = %cond.false.599
  %90 = load i64, i64* %nargs, align 8
  %conv646 = trunc i64 %90 to i16
  %conv647 = sext i16 %conv646 to i32
  %add648 = add nsw i32 0, %conv647
  %mul649 = mul nsw i32 0, %add648
  %sub650 = sub nsw i32 %mul649, 1
  %cmp651 = icmp slt i32 %sub650, 0
  br i1 %cmp651, label %cond.true.653, label %cond.false.663

cond.true.653:                                    ; preds = %cond.false.645
  %91 = load i64, i64* %nargs, align 8
  %conv654 = trunc i64 %91 to i16
  %conv655 = sext i16 %conv654 to i32
  %add656 = add nsw i32 0, %conv655
  %mul657 = mul nsw i32 0, %add656
  %add658 = add nsw i32 %mul657, 1
  %shl659 = shl i32 %add658, 30
  %sub660 = sub nsw i32 %shl659, 1
  %mul661 = mul nsw i32 %sub660, 2
  %add662 = add nsw i32 %mul661, 1
  br label %cond.end.669

cond.false.663:                                   ; preds = %cond.false.645
  %92 = load i64, i64* %nargs, align 8
  %conv664 = trunc i64 %92 to i16
  %conv665 = sext i16 %conv664 to i32
  %add666 = add nsw i32 0, %conv665
  %mul667 = mul nsw i32 0, %add666
  %sub668 = sub nsw i32 %mul667, 1
  br label %cond.end.669

cond.end.669:                                     ; preds = %cond.false.663, %cond.true.653
  %cond670 = phi i32 [ %add662, %cond.true.653 ], [ %sub668, %cond.false.663 ]
  %div671 = sdiv i32 %cond670, 8
  %93 = load i64, i64* %nargs, align 8
  %conv672 = trunc i64 %93 to i16
  %conv673 = sext i16 %conv672 to i32
  %cmp674 = icmp slt i32 %div671, %conv673
  br i1 %cmp674, label %cond.true.696, label %lor.lhs.false.676

lor.lhs.false.676:                                ; preds = %cond.end.669, %cond.end.640, %cond.true.598, %cond.end.590, %cond.true.555, %cond.end.549
  %94 = load i64, i64* %nargs, align 8
  %conv677 = trunc i64 %94 to i16
  %conv678 = sext i16 %conv677 to i32
  %mul679 = mul nsw i32 %conv678, 8
  %mul680 = mul nsw i32 0, %mul679
  %sub681 = sub nsw i32 %mul680, 1
  %cmp682 = icmp slt i32 %sub681, 0
  br i1 %cmp682, label %land.lhs.true.684, label %lor.lhs.false.690

land.lhs.true.684:                                ; preds = %lor.lhs.false.676
  %95 = load i64, i64* %nargs, align 8
  %conv685 = trunc i64 %95 to i16
  %conv686 = sext i16 %conv685 to i32
  %mul687 = mul nsw i32 %conv686, 8
  %cmp688 = icmp slt i32 %mul687, -32768
  br i1 %cmp688, label %cond.true.696, label %lor.lhs.false.690

lor.lhs.false.690:                                ; preds = %land.lhs.true.684, %lor.lhs.false.676
  %96 = load i64, i64* %nargs, align 8
  %conv691 = trunc i64 %96 to i16
  %conv692 = sext i16 %conv691 to i32
  %mul693 = mul nsw i32 %conv692, 8
  %cmp694 = icmp slt i32 32767, %mul693
  br i1 %cmp694, label %cond.true.696, label %cond.false.719

cond.true.696:                                    ; preds = %lor.lhs.false.690, %land.lhs.true.684, %cond.end.669, %cond.end.640, %cond.true.598, %cond.end.590, %cond.true.555, %cond.end.549, %land.lhs.true.512
  %97 = load i64, i64* %nargs, align 8
  %conv697 = trunc i64 %97 to i16
  %conv698 = zext i16 %conv697 to i32
  %mul699 = mul nsw i32 %conv698, 8
  %cmp700 = icmp sle i32 %mul699, 32767
  br i1 %cmp700, label %cond.true.702, label %cond.false.708

cond.true.702:                                    ; preds = %cond.true.696
  %98 = load i64, i64* %nargs, align 8
  %conv703 = trunc i64 %98 to i16
  %conv704 = zext i16 %conv703 to i32
  %mul705 = mul nsw i32 %conv704, 8
  %conv706 = trunc i32 %mul705 to i16
  %conv707 = sext i16 %conv706 to i32
  br label %cond.end.716

cond.false.708:                                   ; preds = %cond.true.696
  %99 = load i64, i64* %nargs, align 8
  %conv709 = trunc i64 %99 to i16
  %conv710 = zext i16 %conv709 to i32
  %mul711 = mul nsw i32 %conv710, 8
  %sub712 = sub nsw i32 %mul711, -32768
  %conv713 = trunc i32 %sub712 to i16
  %conv714 = sext i16 %conv713 to i32
  %add715 = add nsw i32 %conv714, -32768
  br label %cond.end.716

cond.end.716:                                     ; preds = %cond.false.708, %cond.true.702
  %cond717 = phi i32 [ %conv707, %cond.true.702 ], [ %add715, %cond.false.708 ]
  %conv718 = sext i32 %cond717 to i64
  store i64 %conv718, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.719:                                   ; preds = %lor.lhs.false.690
  %100 = load i64, i64* %nargs, align 8
  %conv720 = trunc i64 %100 to i16
  %conv721 = zext i16 %conv720 to i32
  %mul722 = mul nsw i32 %conv721, 8
  %cmp723 = icmp sle i32 %mul722, 32767
  br i1 %cmp723, label %cond.true.725, label %cond.false.731

cond.true.725:                                    ; preds = %cond.false.719
  %101 = load i64, i64* %nargs, align 8
  %conv726 = trunc i64 %101 to i16
  %conv727 = zext i16 %conv726 to i32
  %mul728 = mul nsw i32 %conv727, 8
  %conv729 = trunc i32 %mul728 to i16
  %conv730 = sext i16 %conv729 to i32
  br label %cond.end.739

cond.false.731:                                   ; preds = %cond.false.719
  %102 = load i64, i64* %nargs, align 8
  %conv732 = trunc i64 %102 to i16
  %conv733 = zext i16 %conv732 to i32
  %mul734 = mul nsw i32 %conv733, 8
  %sub735 = sub nsw i32 %mul734, -32768
  %conv736 = trunc i32 %sub735 to i16
  %conv737 = sext i16 %conv736 to i32
  %add738 = add nsw i32 %conv737, -32768
  br label %cond.end.739

cond.end.739:                                     ; preds = %cond.false.731, %cond.true.725
  %cond740 = phi i32 [ %conv730, %cond.true.725 ], [ %add738, %cond.false.731 ]
  %conv741 = sext i32 %cond740 to i64
  store i64 %conv741, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.742:                                   ; preds = %cond.true.473
  %103 = load i64, i64* %nargs, align 8
  %add743 = add nsw i64 0, %103
  %mul744 = mul nsw i64 0, %add743
  %sub745 = sub nsw i64 %mul744, 1
  %cmp746 = icmp slt i64 %sub745, 0
  br i1 %cmp746, label %cond.true.748, label %cond.false.765

cond.true.748:                                    ; preds = %cond.false.742
  %104 = load i64, i64* %nargs, align 8
  %add749 = add nsw i64 0, %104
  %mul750 = mul nsw i64 0, %add749
  %add751 = add nsw i64 %mul750, 0
  %neg752 = xor i64 %add751, -1
  %cmp753 = icmp eq i64 %neg752, -1
  %conv754 = zext i1 %cmp753 to i32
  %sub755 = sub nsw i32 0, %conv754
  %conv756 = sext i32 %sub755 to i64
  %105 = load i64, i64* %nargs, align 8
  %add757 = add nsw i64 0, %105
  %mul758 = mul nsw i64 0, %add757
  %add759 = add nsw i64 %mul758, 1
  %shl760 = shl i64 %add759, 62
  %sub761 = sub nsw i64 %shl760, 1
  %mul762 = mul nsw i64 %sub761, 2
  %add763 = add nsw i64 %mul762, 1
  %sub764 = sub nsw i64 %conv756, %add763
  br label %cond.end.769

cond.false.765:                                   ; preds = %cond.false.742
  %106 = load i64, i64* %nargs, align 8
  %add766 = add nsw i64 0, %106
  %mul767 = mul nsw i64 0, %add766
  %add768 = add nsw i64 %mul767, 0
  br label %cond.end.769

cond.end.769:                                     ; preds = %cond.false.765, %cond.true.748
  %cond770 = phi i64 [ %sub764, %cond.true.748 ], [ %add768, %cond.false.765 ]
  %cmp771 = icmp eq i64 %cond770, 0
  br i1 %cmp771, label %land.lhs.true.773, label %lor.lhs.false.776

land.lhs.true.773:                                ; preds = %cond.end.769
  %107 = load i64, i64* %nargs, align 8
  %cmp774 = icmp slt i64 %107, 0
  br i1 %cmp774, label %cond.true.911, label %lor.lhs.false.776

lor.lhs.false.776:                                ; preds = %land.lhs.true.773, %cond.end.769
  br i1 false, label %cond.true.777, label %cond.false.837

cond.true.777:                                    ; preds = %lor.lhs.false.776
  %108 = load i64, i64* %nargs, align 8
  %cmp778 = icmp slt i64 %108, 0
  br i1 %cmp778, label %cond.true.780, label %cond.false.803

cond.true.780:                                    ; preds = %cond.true.777
  %109 = load i64, i64* %nargs, align 8
  %110 = load i64, i64* %nargs, align 8
  %add781 = add nsw i64 0, %110
  %mul782 = mul nsw i64 0, %add781
  %sub783 = sub nsw i64 %mul782, 1
  %cmp784 = icmp slt i64 %sub783, 0
  br i1 %cmp784, label %cond.true.786, label %cond.false.794

cond.true.786:                                    ; preds = %cond.true.780
  %111 = load i64, i64* %nargs, align 8
  %add787 = add nsw i64 0, %111
  %mul788 = mul nsw i64 0, %add787
  %add789 = add nsw i64 %mul788, 1
  %shl790 = shl i64 %add789, 62
  %sub791 = sub nsw i64 %shl790, 1
  %mul792 = mul nsw i64 %sub791, 2
  %add793 = add nsw i64 %mul792, 1
  br label %cond.end.798

cond.false.794:                                   ; preds = %cond.true.780
  %112 = load i64, i64* %nargs, align 8
  %add795 = add nsw i64 0, %112
  %mul796 = mul nsw i64 0, %add795
  %sub797 = sub nsw i64 %mul796, 1
  br label %cond.end.798

cond.end.798:                                     ; preds = %cond.false.794, %cond.true.786
  %cond799 = phi i64 [ %add793, %cond.true.786 ], [ %sub797, %cond.false.794 ]
  %div800 = sdiv i64 %cond799, 8
  %cmp801 = icmp slt i64 %109, %div800
  br i1 %cmp801, label %cond.true.911, label %lor.lhs.false.897

cond.false.803:                                   ; preds = %cond.true.777
  br i1 false, label %cond.true.804, label %cond.false.805

cond.true.804:                                    ; preds = %cond.false.803
  br i1 false, label %cond.true.911, label %lor.lhs.false.897

cond.false.805:                                   ; preds = %cond.false.803
  %113 = load i64, i64* %nargs, align 8
  %add806 = add nsw i64 0, %113
  %mul807 = mul nsw i64 0, %add806
  %sub808 = sub nsw i64 %mul807, 1
  %cmp809 = icmp slt i64 %sub808, 0
  br i1 %cmp809, label %cond.true.811, label %cond.false.828

cond.true.811:                                    ; preds = %cond.false.805
  %114 = load i64, i64* %nargs, align 8
  %add812 = add nsw i64 0, %114
  %mul813 = mul nsw i64 0, %add812
  %add814 = add nsw i64 %mul813, 0
  %neg815 = xor i64 %add814, -1
  %cmp816 = icmp eq i64 %neg815, -1
  %conv817 = zext i1 %cmp816 to i32
  %sub818 = sub nsw i32 0, %conv817
  %conv819 = sext i32 %sub818 to i64
  %115 = load i64, i64* %nargs, align 8
  %add820 = add nsw i64 0, %115
  %mul821 = mul nsw i64 0, %add820
  %add822 = add nsw i64 %mul821, 1
  %shl823 = shl i64 %add822, 62
  %sub824 = sub nsw i64 %shl823, 1
  %mul825 = mul nsw i64 %sub824, 2
  %add826 = add nsw i64 %mul825, 1
  %sub827 = sub nsw i64 %conv819, %add826
  br label %cond.end.832

cond.false.828:                                   ; preds = %cond.false.805
  %116 = load i64, i64* %nargs, align 8
  %add829 = add nsw i64 0, %116
  %mul830 = mul nsw i64 0, %add829
  %add831 = add nsw i64 %mul830, 0
  br label %cond.end.832

cond.end.832:                                     ; preds = %cond.false.828, %cond.true.811
  %cond833 = phi i64 [ %sub827, %cond.true.811 ], [ %add831, %cond.false.828 ]
  %div834 = sdiv i64 %cond833, 8
  %117 = load i64, i64* %nargs, align 8
  %cmp835 = icmp slt i64 %div834, %117
  br i1 %cmp835, label %cond.true.911, label %lor.lhs.false.897

cond.false.837:                                   ; preds = %lor.lhs.false.776
  br i1 false, label %cond.true.838, label %cond.false.839

cond.true.838:                                    ; preds = %cond.false.837
  br i1 false, label %cond.true.911, label %lor.lhs.false.897

cond.false.839:                                   ; preds = %cond.false.837
  %118 = load i64, i64* %nargs, align 8
  %cmp840 = icmp slt i64 %118, 0
  br i1 %cmp840, label %cond.true.842, label %cond.false.874

cond.true.842:                                    ; preds = %cond.false.839
  %119 = load i64, i64* %nargs, align 8
  %120 = load i64, i64* %nargs, align 8
  %add843 = add nsw i64 0, %120
  %mul844 = mul nsw i64 0, %add843
  %sub845 = sub nsw i64 %mul844, 1
  %cmp846 = icmp slt i64 %sub845, 0
  br i1 %cmp846, label %cond.true.848, label %cond.false.865

cond.true.848:                                    ; preds = %cond.true.842
  %121 = load i64, i64* %nargs, align 8
  %add849 = add nsw i64 0, %121
  %mul850 = mul nsw i64 0, %add849
  %add851 = add nsw i64 %mul850, 0
  %neg852 = xor i64 %add851, -1
  %cmp853 = icmp eq i64 %neg852, -1
  %conv854 = zext i1 %cmp853 to i32
  %sub855 = sub nsw i32 0, %conv854
  %conv856 = sext i32 %sub855 to i64
  %122 = load i64, i64* %nargs, align 8
  %add857 = add nsw i64 0, %122
  %mul858 = mul nsw i64 0, %add857
  %add859 = add nsw i64 %mul858, 1
  %shl860 = shl i64 %add859, 62
  %sub861 = sub nsw i64 %shl860, 1
  %mul862 = mul nsw i64 %sub861, 2
  %add863 = add nsw i64 %mul862, 1
  %sub864 = sub nsw i64 %conv856, %add863
  br label %cond.end.869

cond.false.865:                                   ; preds = %cond.true.842
  %123 = load i64, i64* %nargs, align 8
  %add866 = add nsw i64 0, %123
  %mul867 = mul nsw i64 0, %add866
  %add868 = add nsw i64 %mul867, 0
  br label %cond.end.869

cond.end.869:                                     ; preds = %cond.false.865, %cond.true.848
  %cond870 = phi i64 [ %sub864, %cond.true.848 ], [ %add868, %cond.false.865 ]
  %div871 = sdiv i64 %cond870, 8
  %cmp872 = icmp slt i64 %119, %div871
  br i1 %cmp872, label %cond.true.911, label %lor.lhs.false.897

cond.false.874:                                   ; preds = %cond.false.839
  %124 = load i64, i64* %nargs, align 8
  %add875 = add nsw i64 0, %124
  %mul876 = mul nsw i64 0, %add875
  %sub877 = sub nsw i64 %mul876, 1
  %cmp878 = icmp slt i64 %sub877, 0
  br i1 %cmp878, label %cond.true.880, label %cond.false.888

cond.true.880:                                    ; preds = %cond.false.874
  %125 = load i64, i64* %nargs, align 8
  %add881 = add nsw i64 0, %125
  %mul882 = mul nsw i64 0, %add881
  %add883 = add nsw i64 %mul882, 1
  %shl884 = shl i64 %add883, 62
  %sub885 = sub nsw i64 %shl884, 1
  %mul886 = mul nsw i64 %sub885, 2
  %add887 = add nsw i64 %mul886, 1
  br label %cond.end.892

cond.false.888:                                   ; preds = %cond.false.874
  %126 = load i64, i64* %nargs, align 8
  %add889 = add nsw i64 0, %126
  %mul890 = mul nsw i64 0, %add889
  %sub891 = sub nsw i64 %mul890, 1
  br label %cond.end.892

cond.end.892:                                     ; preds = %cond.false.888, %cond.true.880
  %cond893 = phi i64 [ %add887, %cond.true.880 ], [ %sub891, %cond.false.888 ]
  %div894 = sdiv i64 %cond893, 8
  %127 = load i64, i64* %nargs, align 8
  %cmp895 = icmp slt i64 %div894, %127
  br i1 %cmp895, label %cond.true.911, label %lor.lhs.false.897

lor.lhs.false.897:                                ; preds = %cond.end.892, %cond.end.869, %cond.true.838, %cond.end.832, %cond.true.804, %cond.end.798
  %128 = load i64, i64* %nargs, align 8
  %mul898 = mul nsw i64 %128, 8
  %mul899 = mul nsw i64 0, %mul898
  %sub900 = sub nsw i64 %mul899, 1
  %cmp901 = icmp slt i64 %sub900, 0
  br i1 %cmp901, label %land.lhs.true.903, label %lor.lhs.false.907

land.lhs.true.903:                                ; preds = %lor.lhs.false.897
  %129 = load i64, i64* %nargs, align 8
  %mul904 = mul nsw i64 %129, 8
  %cmp905 = icmp slt i64 %mul904, -32768
  br i1 %cmp905, label %cond.true.911, label %lor.lhs.false.907

lor.lhs.false.907:                                ; preds = %land.lhs.true.903, %lor.lhs.false.897
  %130 = load i64, i64* %nargs, align 8
  %mul908 = mul nsw i64 %130, 8
  %cmp909 = icmp slt i64 32767, %mul908
  br i1 %cmp909, label %cond.true.911, label %cond.false.934

cond.true.911:                                    ; preds = %lor.lhs.false.907, %land.lhs.true.903, %cond.end.892, %cond.end.869, %cond.true.838, %cond.end.832, %cond.true.804, %cond.end.798, %land.lhs.true.773
  %131 = load i64, i64* %nargs, align 8
  %conv912 = trunc i64 %131 to i16
  %conv913 = zext i16 %conv912 to i32
  %mul914 = mul nsw i32 %conv913, 8
  %cmp915 = icmp sle i32 %mul914, 32767
  br i1 %cmp915, label %cond.true.917, label %cond.false.923

cond.true.917:                                    ; preds = %cond.true.911
  %132 = load i64, i64* %nargs, align 8
  %conv918 = trunc i64 %132 to i16
  %conv919 = zext i16 %conv918 to i32
  %mul920 = mul nsw i32 %conv919, 8
  %conv921 = trunc i32 %mul920 to i16
  %conv922 = sext i16 %conv921 to i32
  br label %cond.end.931

cond.false.923:                                   ; preds = %cond.true.911
  %133 = load i64, i64* %nargs, align 8
  %conv924 = trunc i64 %133 to i16
  %conv925 = zext i16 %conv924 to i32
  %mul926 = mul nsw i32 %conv925, 8
  %sub927 = sub nsw i32 %mul926, -32768
  %conv928 = trunc i32 %sub927 to i16
  %conv929 = sext i16 %conv928 to i32
  %add930 = add nsw i32 %conv929, -32768
  br label %cond.end.931

cond.end.931:                                     ; preds = %cond.false.923, %cond.true.917
  %cond932 = phi i32 [ %conv922, %cond.true.917 ], [ %add930, %cond.false.923 ]
  %conv933 = sext i32 %cond932 to i64
  store i64 %conv933, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.934:                                   ; preds = %lor.lhs.false.907
  %134 = load i64, i64* %nargs, align 8
  %conv935 = trunc i64 %134 to i16
  %conv936 = zext i16 %conv935 to i32
  %mul937 = mul nsw i32 %conv936, 8
  %cmp938 = icmp sle i32 %mul937, 32767
  br i1 %cmp938, label %cond.true.940, label %cond.false.946

cond.true.940:                                    ; preds = %cond.false.934
  %135 = load i64, i64* %nargs, align 8
  %conv941 = trunc i64 %135 to i16
  %conv942 = zext i16 %conv941 to i32
  %mul943 = mul nsw i32 %conv942, 8
  %conv944 = trunc i32 %mul943 to i16
  %conv945 = sext i16 %conv944 to i32
  br label %cond.end.954

cond.false.946:                                   ; preds = %cond.false.934
  %136 = load i64, i64* %nargs, align 8
  %conv947 = trunc i64 %136 to i16
  %conv948 = zext i16 %conv947 to i32
  %mul949 = mul nsw i32 %conv948, 8
  %sub950 = sub nsw i32 %mul949, -32768
  %conv951 = trunc i32 %sub950 to i16
  %conv952 = sext i16 %conv951 to i32
  %add953 = add nsw i32 %conv952, -32768
  br label %cond.end.954

cond.end.954:                                     ; preds = %cond.false.946, %cond.true.940
  %cond955 = phi i32 [ %conv945, %cond.true.940 ], [ %add953, %cond.false.946 ]
  %conv956 = sext i32 %cond955 to i64
  store i64 %conv956, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.957:                                   ; preds = %cond.false.472
  br i1 false, label %cond.true.958, label %cond.false.1386

cond.true.958:                                    ; preds = %cond.false.957
  br i1 false, label %cond.true.959, label %cond.false.1185

cond.true.959:                                    ; preds = %cond.true.958
  %137 = load i64, i64* %nargs, align 8
  %conv960 = trunc i64 %137 to i32
  %add961 = add nsw i32 0, %conv960
  %mul962 = mul nsw i32 0, %add961
  %sub963 = sub nsw i32 %mul962, 1
  %cmp964 = icmp slt i32 %sub963, 0
  br i1 %cmp964, label %cond.true.966, label %cond.false.984

cond.true.966:                                    ; preds = %cond.true.959
  %138 = load i64, i64* %nargs, align 8
  %conv967 = trunc i64 %138 to i32
  %add968 = add nsw i32 0, %conv967
  %mul969 = mul nsw i32 0, %add968
  %add970 = add nsw i32 %mul969, 0
  %neg971 = xor i32 %add970, -1
  %cmp972 = icmp eq i32 %neg971, -1
  %conv973 = zext i1 %cmp972 to i32
  %sub974 = sub nsw i32 0, %conv973
  %139 = load i64, i64* %nargs, align 8
  %conv975 = trunc i64 %139 to i32
  %add976 = add nsw i32 0, %conv975
  %mul977 = mul nsw i32 0, %add976
  %add978 = add nsw i32 %mul977, 1
  %shl979 = shl i32 %add978, 30
  %sub980 = sub nsw i32 %shl979, 1
  %mul981 = mul nsw i32 %sub980, 2
  %add982 = add nsw i32 %mul981, 1
  %sub983 = sub nsw i32 %sub974, %add982
  br label %cond.end.989

cond.false.984:                                   ; preds = %cond.true.959
  %140 = load i64, i64* %nargs, align 8
  %conv985 = trunc i64 %140 to i32
  %add986 = add nsw i32 0, %conv985
  %mul987 = mul nsw i32 0, %add986
  %add988 = add nsw i32 %mul987, 0
  br label %cond.end.989

cond.end.989:                                     ; preds = %cond.false.984, %cond.true.966
  %cond990 = phi i32 [ %sub983, %cond.true.966 ], [ %add988, %cond.false.984 ]
  %cmp991 = icmp eq i32 %cond990, 0
  br i1 %cmp991, label %land.lhs.true.993, label %lor.lhs.false.997

land.lhs.true.993:                                ; preds = %cond.end.989
  %141 = load i64, i64* %nargs, align 8
  %conv994 = trunc i64 %141 to i32
  %cmp995 = icmp slt i32 %conv994, 0
  br i1 %cmp995, label %cond.true.1153, label %lor.lhs.false.997

lor.lhs.false.997:                                ; preds = %land.lhs.true.993, %cond.end.989
  br i1 false, label %cond.true.998, label %cond.false.1067

cond.true.998:                                    ; preds = %lor.lhs.false.997
  %142 = load i64, i64* %nargs, align 8
  %conv999 = trunc i64 %142 to i32
  %cmp1000 = icmp slt i32 %conv999, 0
  br i1 %cmp1000, label %cond.true.1002, label %cond.false.1029

cond.true.1002:                                   ; preds = %cond.true.998
  %143 = load i64, i64* %nargs, align 8
  %conv1003 = trunc i64 %143 to i32
  %144 = load i64, i64* %nargs, align 8
  %conv1004 = trunc i64 %144 to i32
  %add1005 = add nsw i32 0, %conv1004
  %mul1006 = mul nsw i32 0, %add1005
  %sub1007 = sub nsw i32 %mul1006, 1
  %cmp1008 = icmp slt i32 %sub1007, 0
  br i1 %cmp1008, label %cond.true.1010, label %cond.false.1019

cond.true.1010:                                   ; preds = %cond.true.1002
  %145 = load i64, i64* %nargs, align 8
  %conv1011 = trunc i64 %145 to i32
  %add1012 = add nsw i32 0, %conv1011
  %mul1013 = mul nsw i32 0, %add1012
  %add1014 = add nsw i32 %mul1013, 1
  %shl1015 = shl i32 %add1014, 30
  %sub1016 = sub nsw i32 %shl1015, 1
  %mul1017 = mul nsw i32 %sub1016, 2
  %add1018 = add nsw i32 %mul1017, 1
  br label %cond.end.1024

cond.false.1019:                                  ; preds = %cond.true.1002
  %146 = load i64, i64* %nargs, align 8
  %conv1020 = trunc i64 %146 to i32
  %add1021 = add nsw i32 0, %conv1020
  %mul1022 = mul nsw i32 0, %add1021
  %sub1023 = sub nsw i32 %mul1022, 1
  br label %cond.end.1024

cond.end.1024:                                    ; preds = %cond.false.1019, %cond.true.1010
  %cond1025 = phi i32 [ %add1018, %cond.true.1010 ], [ %sub1023, %cond.false.1019 ]
  %div1026 = sdiv i32 %cond1025, 8
  %cmp1027 = icmp slt i32 %conv1003, %div1026
  br i1 %cmp1027, label %cond.true.1153, label %lor.lhs.false.1136

cond.false.1029:                                  ; preds = %cond.true.998
  br i1 false, label %cond.true.1030, label %cond.false.1031

cond.true.1030:                                   ; preds = %cond.false.1029
  br i1 false, label %cond.true.1153, label %lor.lhs.false.1136

cond.false.1031:                                  ; preds = %cond.false.1029
  %147 = load i64, i64* %nargs, align 8
  %conv1032 = trunc i64 %147 to i32
  %add1033 = add nsw i32 0, %conv1032
  %mul1034 = mul nsw i32 0, %add1033
  %sub1035 = sub nsw i32 %mul1034, 1
  %cmp1036 = icmp slt i32 %sub1035, 0
  br i1 %cmp1036, label %cond.true.1038, label %cond.false.1056

cond.true.1038:                                   ; preds = %cond.false.1031
  %148 = load i64, i64* %nargs, align 8
  %conv1039 = trunc i64 %148 to i32
  %add1040 = add nsw i32 0, %conv1039
  %mul1041 = mul nsw i32 0, %add1040
  %add1042 = add nsw i32 %mul1041, 0
  %neg1043 = xor i32 %add1042, -1
  %cmp1044 = icmp eq i32 %neg1043, -1
  %conv1045 = zext i1 %cmp1044 to i32
  %sub1046 = sub nsw i32 0, %conv1045
  %149 = load i64, i64* %nargs, align 8
  %conv1047 = trunc i64 %149 to i32
  %add1048 = add nsw i32 0, %conv1047
  %mul1049 = mul nsw i32 0, %add1048
  %add1050 = add nsw i32 %mul1049, 1
  %shl1051 = shl i32 %add1050, 30
  %sub1052 = sub nsw i32 %shl1051, 1
  %mul1053 = mul nsw i32 %sub1052, 2
  %add1054 = add nsw i32 %mul1053, 1
  %sub1055 = sub nsw i32 %sub1046, %add1054
  br label %cond.end.1061

cond.false.1056:                                  ; preds = %cond.false.1031
  %150 = load i64, i64* %nargs, align 8
  %conv1057 = trunc i64 %150 to i32
  %add1058 = add nsw i32 0, %conv1057
  %mul1059 = mul nsw i32 0, %add1058
  %add1060 = add nsw i32 %mul1059, 0
  br label %cond.end.1061

cond.end.1061:                                    ; preds = %cond.false.1056, %cond.true.1038
  %cond1062 = phi i32 [ %sub1055, %cond.true.1038 ], [ %add1060, %cond.false.1056 ]
  %div1063 = sdiv i32 %cond1062, 8
  %151 = load i64, i64* %nargs, align 8
  %conv1064 = trunc i64 %151 to i32
  %cmp1065 = icmp slt i32 %div1063, %conv1064
  br i1 %cmp1065, label %cond.true.1153, label %lor.lhs.false.1136

cond.false.1067:                                  ; preds = %lor.lhs.false.997
  br i1 false, label %cond.true.1068, label %cond.false.1069

cond.true.1068:                                   ; preds = %cond.false.1067
  br i1 false, label %cond.true.1153, label %lor.lhs.false.1136

cond.false.1069:                                  ; preds = %cond.false.1067
  %152 = load i64, i64* %nargs, align 8
  %conv1070 = trunc i64 %152 to i32
  %cmp1071 = icmp slt i32 %conv1070, 0
  br i1 %cmp1071, label %cond.true.1073, label %cond.false.1109

cond.true.1073:                                   ; preds = %cond.false.1069
  %153 = load i64, i64* %nargs, align 8
  %conv1074 = trunc i64 %153 to i32
  %154 = load i64, i64* %nargs, align 8
  %conv1075 = trunc i64 %154 to i32
  %add1076 = add nsw i32 0, %conv1075
  %mul1077 = mul nsw i32 0, %add1076
  %sub1078 = sub nsw i32 %mul1077, 1
  %cmp1079 = icmp slt i32 %sub1078, 0
  br i1 %cmp1079, label %cond.true.1081, label %cond.false.1099

cond.true.1081:                                   ; preds = %cond.true.1073
  %155 = load i64, i64* %nargs, align 8
  %conv1082 = trunc i64 %155 to i32
  %add1083 = add nsw i32 0, %conv1082
  %mul1084 = mul nsw i32 0, %add1083
  %add1085 = add nsw i32 %mul1084, 0
  %neg1086 = xor i32 %add1085, -1
  %cmp1087 = icmp eq i32 %neg1086, -1
  %conv1088 = zext i1 %cmp1087 to i32
  %sub1089 = sub nsw i32 0, %conv1088
  %156 = load i64, i64* %nargs, align 8
  %conv1090 = trunc i64 %156 to i32
  %add1091 = add nsw i32 0, %conv1090
  %mul1092 = mul nsw i32 0, %add1091
  %add1093 = add nsw i32 %mul1092, 1
  %shl1094 = shl i32 %add1093, 30
  %sub1095 = sub nsw i32 %shl1094, 1
  %mul1096 = mul nsw i32 %sub1095, 2
  %add1097 = add nsw i32 %mul1096, 1
  %sub1098 = sub nsw i32 %sub1089, %add1097
  br label %cond.end.1104

cond.false.1099:                                  ; preds = %cond.true.1073
  %157 = load i64, i64* %nargs, align 8
  %conv1100 = trunc i64 %157 to i32
  %add1101 = add nsw i32 0, %conv1100
  %mul1102 = mul nsw i32 0, %add1101
  %add1103 = add nsw i32 %mul1102, 0
  br label %cond.end.1104

cond.end.1104:                                    ; preds = %cond.false.1099, %cond.true.1081
  %cond1105 = phi i32 [ %sub1098, %cond.true.1081 ], [ %add1103, %cond.false.1099 ]
  %div1106 = sdiv i32 %cond1105, 8
  %cmp1107 = icmp slt i32 %conv1074, %div1106
  br i1 %cmp1107, label %cond.true.1153, label %lor.lhs.false.1136

cond.false.1109:                                  ; preds = %cond.false.1069
  %158 = load i64, i64* %nargs, align 8
  %conv1110 = trunc i64 %158 to i32
  %add1111 = add nsw i32 0, %conv1110
  %mul1112 = mul nsw i32 0, %add1111
  %sub1113 = sub nsw i32 %mul1112, 1
  %cmp1114 = icmp slt i32 %sub1113, 0
  br i1 %cmp1114, label %cond.true.1116, label %cond.false.1125

cond.true.1116:                                   ; preds = %cond.false.1109
  %159 = load i64, i64* %nargs, align 8
  %conv1117 = trunc i64 %159 to i32
  %add1118 = add nsw i32 0, %conv1117
  %mul1119 = mul nsw i32 0, %add1118
  %add1120 = add nsw i32 %mul1119, 1
  %shl1121 = shl i32 %add1120, 30
  %sub1122 = sub nsw i32 %shl1121, 1
  %mul1123 = mul nsw i32 %sub1122, 2
  %add1124 = add nsw i32 %mul1123, 1
  br label %cond.end.1130

cond.false.1125:                                  ; preds = %cond.false.1109
  %160 = load i64, i64* %nargs, align 8
  %conv1126 = trunc i64 %160 to i32
  %add1127 = add nsw i32 0, %conv1126
  %mul1128 = mul nsw i32 0, %add1127
  %sub1129 = sub nsw i32 %mul1128, 1
  br label %cond.end.1130

cond.end.1130:                                    ; preds = %cond.false.1125, %cond.true.1116
  %cond1131 = phi i32 [ %add1124, %cond.true.1116 ], [ %sub1129, %cond.false.1125 ]
  %div1132 = sdiv i32 %cond1131, 8
  %161 = load i64, i64* %nargs, align 8
  %conv1133 = trunc i64 %161 to i32
  %cmp1134 = icmp slt i32 %div1132, %conv1133
  br i1 %cmp1134, label %cond.true.1153, label %lor.lhs.false.1136

lor.lhs.false.1136:                               ; preds = %cond.end.1130, %cond.end.1104, %cond.true.1068, %cond.end.1061, %cond.true.1030, %cond.end.1024
  %162 = load i64, i64* %nargs, align 8
  %conv1137 = trunc i64 %162 to i32
  %mul1138 = mul nsw i32 %conv1137, 8
  %mul1139 = mul nsw i32 0, %mul1138
  %sub1140 = sub nsw i32 %mul1139, 1
  %cmp1141 = icmp slt i32 %sub1140, 0
  br i1 %cmp1141, label %land.lhs.true.1143, label %lor.lhs.false.1148

land.lhs.true.1143:                               ; preds = %lor.lhs.false.1136
  %163 = load i64, i64* %nargs, align 8
  %conv1144 = trunc i64 %163 to i32
  %mul1145 = mul nsw i32 %conv1144, 8
  %cmp1146 = icmp slt i32 %mul1145, -2147483648
  br i1 %cmp1146, label %cond.true.1153, label %lor.lhs.false.1148

lor.lhs.false.1148:                               ; preds = %land.lhs.true.1143, %lor.lhs.false.1136
  %164 = load i64, i64* %nargs, align 8
  %conv1149 = trunc i64 %164 to i32
  %mul1150 = mul nsw i32 %conv1149, 8
  %cmp1151 = icmp slt i32 2147483647, %mul1150
  br i1 %cmp1151, label %cond.true.1153, label %cond.false.1169

cond.true.1153:                                   ; preds = %lor.lhs.false.1148, %land.lhs.true.1143, %cond.end.1130, %cond.end.1104, %cond.true.1068, %cond.end.1061, %cond.true.1030, %cond.end.1024, %land.lhs.true.993
  %165 = load i64, i64* %nargs, align 8
  %conv1154 = trunc i64 %165 to i32
  %mul1155 = mul i32 %conv1154, 8
  %cmp1156 = icmp ule i32 %mul1155, 2147483647
  br i1 %cmp1156, label %cond.true.1158, label %cond.false.1161

cond.true.1158:                                   ; preds = %cond.true.1153
  %166 = load i64, i64* %nargs, align 8
  %conv1159 = trunc i64 %166 to i32
  %mul1160 = mul i32 %conv1159, 8
  br label %cond.end.1166

cond.false.1161:                                  ; preds = %cond.true.1153
  %167 = load i64, i64* %nargs, align 8
  %conv1162 = trunc i64 %167 to i32
  %mul1163 = mul i32 %conv1162, 8
  %sub1164 = sub i32 %mul1163, -2147483648
  %add1165 = add nsw i32 %sub1164, -2147483648
  br label %cond.end.1166

cond.end.1166:                                    ; preds = %cond.false.1161, %cond.true.1158
  %cond1167 = phi i32 [ %mul1160, %cond.true.1158 ], [ %add1165, %cond.false.1161 ]
  %conv1168 = sext i32 %cond1167 to i64
  store i64 %conv1168, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.1169:                                  ; preds = %lor.lhs.false.1148
  %168 = load i64, i64* %nargs, align 8
  %conv1170 = trunc i64 %168 to i32
  %mul1171 = mul i32 %conv1170, 8
  %cmp1172 = icmp ule i32 %mul1171, 2147483647
  br i1 %cmp1172, label %cond.true.1174, label %cond.false.1177

cond.true.1174:                                   ; preds = %cond.false.1169
  %169 = load i64, i64* %nargs, align 8
  %conv1175 = trunc i64 %169 to i32
  %mul1176 = mul i32 %conv1175, 8
  br label %cond.end.1182

cond.false.1177:                                  ; preds = %cond.false.1169
  %170 = load i64, i64* %nargs, align 8
  %conv1178 = trunc i64 %170 to i32
  %mul1179 = mul i32 %conv1178, 8
  %sub1180 = sub i32 %mul1179, -2147483648
  %add1181 = add nsw i32 %sub1180, -2147483648
  br label %cond.end.1182

cond.end.1182:                                    ; preds = %cond.false.1177, %cond.true.1174
  %cond1183 = phi i32 [ %mul1176, %cond.true.1174 ], [ %add1181, %cond.false.1177 ]
  %conv1184 = sext i32 %cond1183 to i64
  store i64 %conv1184, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.1185:                                  ; preds = %cond.true.958
  %171 = load i64, i64* %nargs, align 8
  %add1186 = add nsw i64 0, %171
  %mul1187 = mul nsw i64 0, %add1186
  %sub1188 = sub nsw i64 %mul1187, 1
  %cmp1189 = icmp slt i64 %sub1188, 0
  br i1 %cmp1189, label %cond.true.1191, label %cond.false.1208

cond.true.1191:                                   ; preds = %cond.false.1185
  %172 = load i64, i64* %nargs, align 8
  %add1192 = add nsw i64 0, %172
  %mul1193 = mul nsw i64 0, %add1192
  %add1194 = add nsw i64 %mul1193, 0
  %neg1195 = xor i64 %add1194, -1
  %cmp1196 = icmp eq i64 %neg1195, -1
  %conv1197 = zext i1 %cmp1196 to i32
  %sub1198 = sub nsw i32 0, %conv1197
  %conv1199 = sext i32 %sub1198 to i64
  %173 = load i64, i64* %nargs, align 8
  %add1200 = add nsw i64 0, %173
  %mul1201 = mul nsw i64 0, %add1200
  %add1202 = add nsw i64 %mul1201, 1
  %shl1203 = shl i64 %add1202, 62
  %sub1204 = sub nsw i64 %shl1203, 1
  %mul1205 = mul nsw i64 %sub1204, 2
  %add1206 = add nsw i64 %mul1205, 1
  %sub1207 = sub nsw i64 %conv1199, %add1206
  br label %cond.end.1212

cond.false.1208:                                  ; preds = %cond.false.1185
  %174 = load i64, i64* %nargs, align 8
  %add1209 = add nsw i64 0, %174
  %mul1210 = mul nsw i64 0, %add1209
  %add1211 = add nsw i64 %mul1210, 0
  br label %cond.end.1212

cond.end.1212:                                    ; preds = %cond.false.1208, %cond.true.1191
  %cond1213 = phi i64 [ %sub1207, %cond.true.1191 ], [ %add1211, %cond.false.1208 ]
  %cmp1214 = icmp eq i64 %cond1213, 0
  br i1 %cmp1214, label %land.lhs.true.1216, label %lor.lhs.false.1219

land.lhs.true.1216:                               ; preds = %cond.end.1212
  %175 = load i64, i64* %nargs, align 8
  %cmp1217 = icmp slt i64 %175, 0
  br i1 %cmp1217, label %cond.true.1354, label %lor.lhs.false.1219

lor.lhs.false.1219:                               ; preds = %land.lhs.true.1216, %cond.end.1212
  br i1 false, label %cond.true.1220, label %cond.false.1280

cond.true.1220:                                   ; preds = %lor.lhs.false.1219
  %176 = load i64, i64* %nargs, align 8
  %cmp1221 = icmp slt i64 %176, 0
  br i1 %cmp1221, label %cond.true.1223, label %cond.false.1246

cond.true.1223:                                   ; preds = %cond.true.1220
  %177 = load i64, i64* %nargs, align 8
  %178 = load i64, i64* %nargs, align 8
  %add1224 = add nsw i64 0, %178
  %mul1225 = mul nsw i64 0, %add1224
  %sub1226 = sub nsw i64 %mul1225, 1
  %cmp1227 = icmp slt i64 %sub1226, 0
  br i1 %cmp1227, label %cond.true.1229, label %cond.false.1237

cond.true.1229:                                   ; preds = %cond.true.1223
  %179 = load i64, i64* %nargs, align 8
  %add1230 = add nsw i64 0, %179
  %mul1231 = mul nsw i64 0, %add1230
  %add1232 = add nsw i64 %mul1231, 1
  %shl1233 = shl i64 %add1232, 62
  %sub1234 = sub nsw i64 %shl1233, 1
  %mul1235 = mul nsw i64 %sub1234, 2
  %add1236 = add nsw i64 %mul1235, 1
  br label %cond.end.1241

cond.false.1237:                                  ; preds = %cond.true.1223
  %180 = load i64, i64* %nargs, align 8
  %add1238 = add nsw i64 0, %180
  %mul1239 = mul nsw i64 0, %add1238
  %sub1240 = sub nsw i64 %mul1239, 1
  br label %cond.end.1241

cond.end.1241:                                    ; preds = %cond.false.1237, %cond.true.1229
  %cond1242 = phi i64 [ %add1236, %cond.true.1229 ], [ %sub1240, %cond.false.1237 ]
  %div1243 = sdiv i64 %cond1242, 8
  %cmp1244 = icmp slt i64 %177, %div1243
  br i1 %cmp1244, label %cond.true.1354, label %lor.lhs.false.1340

cond.false.1246:                                  ; preds = %cond.true.1220
  br i1 false, label %cond.true.1247, label %cond.false.1248

cond.true.1247:                                   ; preds = %cond.false.1246
  br i1 false, label %cond.true.1354, label %lor.lhs.false.1340

cond.false.1248:                                  ; preds = %cond.false.1246
  %181 = load i64, i64* %nargs, align 8
  %add1249 = add nsw i64 0, %181
  %mul1250 = mul nsw i64 0, %add1249
  %sub1251 = sub nsw i64 %mul1250, 1
  %cmp1252 = icmp slt i64 %sub1251, 0
  br i1 %cmp1252, label %cond.true.1254, label %cond.false.1271

cond.true.1254:                                   ; preds = %cond.false.1248
  %182 = load i64, i64* %nargs, align 8
  %add1255 = add nsw i64 0, %182
  %mul1256 = mul nsw i64 0, %add1255
  %add1257 = add nsw i64 %mul1256, 0
  %neg1258 = xor i64 %add1257, -1
  %cmp1259 = icmp eq i64 %neg1258, -1
  %conv1260 = zext i1 %cmp1259 to i32
  %sub1261 = sub nsw i32 0, %conv1260
  %conv1262 = sext i32 %sub1261 to i64
  %183 = load i64, i64* %nargs, align 8
  %add1263 = add nsw i64 0, %183
  %mul1264 = mul nsw i64 0, %add1263
  %add1265 = add nsw i64 %mul1264, 1
  %shl1266 = shl i64 %add1265, 62
  %sub1267 = sub nsw i64 %shl1266, 1
  %mul1268 = mul nsw i64 %sub1267, 2
  %add1269 = add nsw i64 %mul1268, 1
  %sub1270 = sub nsw i64 %conv1262, %add1269
  br label %cond.end.1275

cond.false.1271:                                  ; preds = %cond.false.1248
  %184 = load i64, i64* %nargs, align 8
  %add1272 = add nsw i64 0, %184
  %mul1273 = mul nsw i64 0, %add1272
  %add1274 = add nsw i64 %mul1273, 0
  br label %cond.end.1275

cond.end.1275:                                    ; preds = %cond.false.1271, %cond.true.1254
  %cond1276 = phi i64 [ %sub1270, %cond.true.1254 ], [ %add1274, %cond.false.1271 ]
  %div1277 = sdiv i64 %cond1276, 8
  %185 = load i64, i64* %nargs, align 8
  %cmp1278 = icmp slt i64 %div1277, %185
  br i1 %cmp1278, label %cond.true.1354, label %lor.lhs.false.1340

cond.false.1280:                                  ; preds = %lor.lhs.false.1219
  br i1 false, label %cond.true.1281, label %cond.false.1282

cond.true.1281:                                   ; preds = %cond.false.1280
  br i1 false, label %cond.true.1354, label %lor.lhs.false.1340

cond.false.1282:                                  ; preds = %cond.false.1280
  %186 = load i64, i64* %nargs, align 8
  %cmp1283 = icmp slt i64 %186, 0
  br i1 %cmp1283, label %cond.true.1285, label %cond.false.1317

cond.true.1285:                                   ; preds = %cond.false.1282
  %187 = load i64, i64* %nargs, align 8
  %188 = load i64, i64* %nargs, align 8
  %add1286 = add nsw i64 0, %188
  %mul1287 = mul nsw i64 0, %add1286
  %sub1288 = sub nsw i64 %mul1287, 1
  %cmp1289 = icmp slt i64 %sub1288, 0
  br i1 %cmp1289, label %cond.true.1291, label %cond.false.1308

cond.true.1291:                                   ; preds = %cond.true.1285
  %189 = load i64, i64* %nargs, align 8
  %add1292 = add nsw i64 0, %189
  %mul1293 = mul nsw i64 0, %add1292
  %add1294 = add nsw i64 %mul1293, 0
  %neg1295 = xor i64 %add1294, -1
  %cmp1296 = icmp eq i64 %neg1295, -1
  %conv1297 = zext i1 %cmp1296 to i32
  %sub1298 = sub nsw i32 0, %conv1297
  %conv1299 = sext i32 %sub1298 to i64
  %190 = load i64, i64* %nargs, align 8
  %add1300 = add nsw i64 0, %190
  %mul1301 = mul nsw i64 0, %add1300
  %add1302 = add nsw i64 %mul1301, 1
  %shl1303 = shl i64 %add1302, 62
  %sub1304 = sub nsw i64 %shl1303, 1
  %mul1305 = mul nsw i64 %sub1304, 2
  %add1306 = add nsw i64 %mul1305, 1
  %sub1307 = sub nsw i64 %conv1299, %add1306
  br label %cond.end.1312

cond.false.1308:                                  ; preds = %cond.true.1285
  %191 = load i64, i64* %nargs, align 8
  %add1309 = add nsw i64 0, %191
  %mul1310 = mul nsw i64 0, %add1309
  %add1311 = add nsw i64 %mul1310, 0
  br label %cond.end.1312

cond.end.1312:                                    ; preds = %cond.false.1308, %cond.true.1291
  %cond1313 = phi i64 [ %sub1307, %cond.true.1291 ], [ %add1311, %cond.false.1308 ]
  %div1314 = sdiv i64 %cond1313, 8
  %cmp1315 = icmp slt i64 %187, %div1314
  br i1 %cmp1315, label %cond.true.1354, label %lor.lhs.false.1340

cond.false.1317:                                  ; preds = %cond.false.1282
  %192 = load i64, i64* %nargs, align 8
  %add1318 = add nsw i64 0, %192
  %mul1319 = mul nsw i64 0, %add1318
  %sub1320 = sub nsw i64 %mul1319, 1
  %cmp1321 = icmp slt i64 %sub1320, 0
  br i1 %cmp1321, label %cond.true.1323, label %cond.false.1331

cond.true.1323:                                   ; preds = %cond.false.1317
  %193 = load i64, i64* %nargs, align 8
  %add1324 = add nsw i64 0, %193
  %mul1325 = mul nsw i64 0, %add1324
  %add1326 = add nsw i64 %mul1325, 1
  %shl1327 = shl i64 %add1326, 62
  %sub1328 = sub nsw i64 %shl1327, 1
  %mul1329 = mul nsw i64 %sub1328, 2
  %add1330 = add nsw i64 %mul1329, 1
  br label %cond.end.1335

cond.false.1331:                                  ; preds = %cond.false.1317
  %194 = load i64, i64* %nargs, align 8
  %add1332 = add nsw i64 0, %194
  %mul1333 = mul nsw i64 0, %add1332
  %sub1334 = sub nsw i64 %mul1333, 1
  br label %cond.end.1335

cond.end.1335:                                    ; preds = %cond.false.1331, %cond.true.1323
  %cond1336 = phi i64 [ %add1330, %cond.true.1323 ], [ %sub1334, %cond.false.1331 ]
  %div1337 = sdiv i64 %cond1336, 8
  %195 = load i64, i64* %nargs, align 8
  %cmp1338 = icmp slt i64 %div1337, %195
  br i1 %cmp1338, label %cond.true.1354, label %lor.lhs.false.1340

lor.lhs.false.1340:                               ; preds = %cond.end.1335, %cond.end.1312, %cond.true.1281, %cond.end.1275, %cond.true.1247, %cond.end.1241
  %196 = load i64, i64* %nargs, align 8
  %mul1341 = mul nsw i64 %196, 8
  %mul1342 = mul nsw i64 0, %mul1341
  %sub1343 = sub nsw i64 %mul1342, 1
  %cmp1344 = icmp slt i64 %sub1343, 0
  br i1 %cmp1344, label %land.lhs.true.1346, label %lor.lhs.false.1350

land.lhs.true.1346:                               ; preds = %lor.lhs.false.1340
  %197 = load i64, i64* %nargs, align 8
  %mul1347 = mul nsw i64 %197, 8
  %cmp1348 = icmp slt i64 %mul1347, -2147483648
  br i1 %cmp1348, label %cond.true.1354, label %lor.lhs.false.1350

lor.lhs.false.1350:                               ; preds = %land.lhs.true.1346, %lor.lhs.false.1340
  %198 = load i64, i64* %nargs, align 8
  %mul1351 = mul nsw i64 %198, 8
  %cmp1352 = icmp slt i64 2147483647, %mul1351
  br i1 %cmp1352, label %cond.true.1354, label %cond.false.1370

cond.true.1354:                                   ; preds = %lor.lhs.false.1350, %land.lhs.true.1346, %cond.end.1335, %cond.end.1312, %cond.true.1281, %cond.end.1275, %cond.true.1247, %cond.end.1241, %land.lhs.true.1216
  %199 = load i64, i64* %nargs, align 8
  %conv1355 = trunc i64 %199 to i32
  %mul1356 = mul i32 %conv1355, 8
  %cmp1357 = icmp ule i32 %mul1356, 2147483647
  br i1 %cmp1357, label %cond.true.1359, label %cond.false.1362

cond.true.1359:                                   ; preds = %cond.true.1354
  %200 = load i64, i64* %nargs, align 8
  %conv1360 = trunc i64 %200 to i32
  %mul1361 = mul i32 %conv1360, 8
  br label %cond.end.1367

cond.false.1362:                                  ; preds = %cond.true.1354
  %201 = load i64, i64* %nargs, align 8
  %conv1363 = trunc i64 %201 to i32
  %mul1364 = mul i32 %conv1363, 8
  %sub1365 = sub i32 %mul1364, -2147483648
  %add1366 = add nsw i32 %sub1365, -2147483648
  br label %cond.end.1367

cond.end.1367:                                    ; preds = %cond.false.1362, %cond.true.1359
  %cond1368 = phi i32 [ %mul1361, %cond.true.1359 ], [ %add1366, %cond.false.1362 ]
  %conv1369 = sext i32 %cond1368 to i64
  store i64 %conv1369, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.1370:                                  ; preds = %lor.lhs.false.1350
  %202 = load i64, i64* %nargs, align 8
  %conv1371 = trunc i64 %202 to i32
  %mul1372 = mul i32 %conv1371, 8
  %cmp1373 = icmp ule i32 %mul1372, 2147483647
  br i1 %cmp1373, label %cond.true.1375, label %cond.false.1378

cond.true.1375:                                   ; preds = %cond.false.1370
  %203 = load i64, i64* %nargs, align 8
  %conv1376 = trunc i64 %203 to i32
  %mul1377 = mul i32 %conv1376, 8
  br label %cond.end.1383

cond.false.1378:                                  ; preds = %cond.false.1370
  %204 = load i64, i64* %nargs, align 8
  %conv1379 = trunc i64 %204 to i32
  %mul1380 = mul i32 %conv1379, 8
  %sub1381 = sub i32 %mul1380, -2147483648
  %add1382 = add nsw i32 %sub1381, -2147483648
  br label %cond.end.1383

cond.end.1383:                                    ; preds = %cond.false.1378, %cond.true.1375
  %cond1384 = phi i32 [ %mul1377, %cond.true.1375 ], [ %add1382, %cond.false.1378 ]
  %conv1385 = sext i32 %cond1384 to i64
  store i64 %conv1385, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.1386:                                  ; preds = %cond.false.957
  br i1 true, label %cond.true.1387, label %cond.false.1774

cond.true.1387:                                   ; preds = %cond.false.1386
  br i1 false, label %cond.true.1388, label %cond.false.1581

cond.true.1388:                                   ; preds = %cond.true.1387
  %205 = load i64, i64* %nargs, align 8
  %add1389 = add nsw i64 0, %205
  %mul1390 = mul nsw i64 0, %add1389
  %sub1391 = sub nsw i64 %mul1390, 1
  %cmp1392 = icmp slt i64 %sub1391, 0
  br i1 %cmp1392, label %cond.true.1394, label %cond.false.1411

cond.true.1394:                                   ; preds = %cond.true.1388
  %206 = load i64, i64* %nargs, align 8
  %add1395 = add nsw i64 0, %206
  %mul1396 = mul nsw i64 0, %add1395
  %add1397 = add nsw i64 %mul1396, 0
  %neg1398 = xor i64 %add1397, -1
  %cmp1399 = icmp eq i64 %neg1398, -1
  %conv1400 = zext i1 %cmp1399 to i32
  %sub1401 = sub nsw i32 0, %conv1400
  %conv1402 = sext i32 %sub1401 to i64
  %207 = load i64, i64* %nargs, align 8
  %add1403 = add nsw i64 0, %207
  %mul1404 = mul nsw i64 0, %add1403
  %add1405 = add nsw i64 %mul1404, 1
  %shl1406 = shl i64 %add1405, 62
  %sub1407 = sub nsw i64 %shl1406, 1
  %mul1408 = mul nsw i64 %sub1407, 2
  %add1409 = add nsw i64 %mul1408, 1
  %sub1410 = sub nsw i64 %conv1402, %add1409
  br label %cond.end.1415

cond.false.1411:                                  ; preds = %cond.true.1388
  %208 = load i64, i64* %nargs, align 8
  %add1412 = add nsw i64 0, %208
  %mul1413 = mul nsw i64 0, %add1412
  %add1414 = add nsw i64 %mul1413, 0
  br label %cond.end.1415

cond.end.1415:                                    ; preds = %cond.false.1411, %cond.true.1394
  %cond1416 = phi i64 [ %sub1410, %cond.true.1394 ], [ %add1414, %cond.false.1411 ]
  %cmp1417 = icmp eq i64 %cond1416, 0
  br i1 %cmp1417, label %land.lhs.true.1419, label %lor.lhs.false.1422

land.lhs.true.1419:                               ; preds = %cond.end.1415
  %209 = load i64, i64* %nargs, align 8
  %cmp1420 = icmp slt i64 %209, 0
  br i1 %cmp1420, label %cond.true.1557, label %lor.lhs.false.1422

lor.lhs.false.1422:                               ; preds = %land.lhs.true.1419, %cond.end.1415
  br i1 false, label %cond.true.1423, label %cond.false.1483

cond.true.1423:                                   ; preds = %lor.lhs.false.1422
  %210 = load i64, i64* %nargs, align 8
  %cmp1424 = icmp slt i64 %210, 0
  br i1 %cmp1424, label %cond.true.1426, label %cond.false.1449

cond.true.1426:                                   ; preds = %cond.true.1423
  %211 = load i64, i64* %nargs, align 8
  %212 = load i64, i64* %nargs, align 8
  %add1427 = add nsw i64 0, %212
  %mul1428 = mul nsw i64 0, %add1427
  %sub1429 = sub nsw i64 %mul1428, 1
  %cmp1430 = icmp slt i64 %sub1429, 0
  br i1 %cmp1430, label %cond.true.1432, label %cond.false.1440

cond.true.1432:                                   ; preds = %cond.true.1426
  %213 = load i64, i64* %nargs, align 8
  %add1433 = add nsw i64 0, %213
  %mul1434 = mul nsw i64 0, %add1433
  %add1435 = add nsw i64 %mul1434, 1
  %shl1436 = shl i64 %add1435, 62
  %sub1437 = sub nsw i64 %shl1436, 1
  %mul1438 = mul nsw i64 %sub1437, 2
  %add1439 = add nsw i64 %mul1438, 1
  br label %cond.end.1444

cond.false.1440:                                  ; preds = %cond.true.1426
  %214 = load i64, i64* %nargs, align 8
  %add1441 = add nsw i64 0, %214
  %mul1442 = mul nsw i64 0, %add1441
  %sub1443 = sub nsw i64 %mul1442, 1
  br label %cond.end.1444

cond.end.1444:                                    ; preds = %cond.false.1440, %cond.true.1432
  %cond1445 = phi i64 [ %add1439, %cond.true.1432 ], [ %sub1443, %cond.false.1440 ]
  %div1446 = sdiv i64 %cond1445, 8
  %cmp1447 = icmp slt i64 %211, %div1446
  br i1 %cmp1447, label %cond.true.1557, label %lor.lhs.false.1543

cond.false.1449:                                  ; preds = %cond.true.1423
  br i1 false, label %cond.true.1450, label %cond.false.1451

cond.true.1450:                                   ; preds = %cond.false.1449
  br i1 false, label %cond.true.1557, label %lor.lhs.false.1543

cond.false.1451:                                  ; preds = %cond.false.1449
  %215 = load i64, i64* %nargs, align 8
  %add1452 = add nsw i64 0, %215
  %mul1453 = mul nsw i64 0, %add1452
  %sub1454 = sub nsw i64 %mul1453, 1
  %cmp1455 = icmp slt i64 %sub1454, 0
  br i1 %cmp1455, label %cond.true.1457, label %cond.false.1474

cond.true.1457:                                   ; preds = %cond.false.1451
  %216 = load i64, i64* %nargs, align 8
  %add1458 = add nsw i64 0, %216
  %mul1459 = mul nsw i64 0, %add1458
  %add1460 = add nsw i64 %mul1459, 0
  %neg1461 = xor i64 %add1460, -1
  %cmp1462 = icmp eq i64 %neg1461, -1
  %conv1463 = zext i1 %cmp1462 to i32
  %sub1464 = sub nsw i32 0, %conv1463
  %conv1465 = sext i32 %sub1464 to i64
  %217 = load i64, i64* %nargs, align 8
  %add1466 = add nsw i64 0, %217
  %mul1467 = mul nsw i64 0, %add1466
  %add1468 = add nsw i64 %mul1467, 1
  %shl1469 = shl i64 %add1468, 62
  %sub1470 = sub nsw i64 %shl1469, 1
  %mul1471 = mul nsw i64 %sub1470, 2
  %add1472 = add nsw i64 %mul1471, 1
  %sub1473 = sub nsw i64 %conv1465, %add1472
  br label %cond.end.1478

cond.false.1474:                                  ; preds = %cond.false.1451
  %218 = load i64, i64* %nargs, align 8
  %add1475 = add nsw i64 0, %218
  %mul1476 = mul nsw i64 0, %add1475
  %add1477 = add nsw i64 %mul1476, 0
  br label %cond.end.1478

cond.end.1478:                                    ; preds = %cond.false.1474, %cond.true.1457
  %cond1479 = phi i64 [ %sub1473, %cond.true.1457 ], [ %add1477, %cond.false.1474 ]
  %div1480 = sdiv i64 %cond1479, 8
  %219 = load i64, i64* %nargs, align 8
  %cmp1481 = icmp slt i64 %div1480, %219
  br i1 %cmp1481, label %cond.true.1557, label %lor.lhs.false.1543

cond.false.1483:                                  ; preds = %lor.lhs.false.1422
  br i1 false, label %cond.true.1484, label %cond.false.1485

cond.true.1484:                                   ; preds = %cond.false.1483
  br i1 false, label %cond.true.1557, label %lor.lhs.false.1543

cond.false.1485:                                  ; preds = %cond.false.1483
  %220 = load i64, i64* %nargs, align 8
  %cmp1486 = icmp slt i64 %220, 0
  br i1 %cmp1486, label %cond.true.1488, label %cond.false.1520

cond.true.1488:                                   ; preds = %cond.false.1485
  %221 = load i64, i64* %nargs, align 8
  %222 = load i64, i64* %nargs, align 8
  %add1489 = add nsw i64 0, %222
  %mul1490 = mul nsw i64 0, %add1489
  %sub1491 = sub nsw i64 %mul1490, 1
  %cmp1492 = icmp slt i64 %sub1491, 0
  br i1 %cmp1492, label %cond.true.1494, label %cond.false.1511

cond.true.1494:                                   ; preds = %cond.true.1488
  %223 = load i64, i64* %nargs, align 8
  %add1495 = add nsw i64 0, %223
  %mul1496 = mul nsw i64 0, %add1495
  %add1497 = add nsw i64 %mul1496, 0
  %neg1498 = xor i64 %add1497, -1
  %cmp1499 = icmp eq i64 %neg1498, -1
  %conv1500 = zext i1 %cmp1499 to i32
  %sub1501 = sub nsw i32 0, %conv1500
  %conv1502 = sext i32 %sub1501 to i64
  %224 = load i64, i64* %nargs, align 8
  %add1503 = add nsw i64 0, %224
  %mul1504 = mul nsw i64 0, %add1503
  %add1505 = add nsw i64 %mul1504, 1
  %shl1506 = shl i64 %add1505, 62
  %sub1507 = sub nsw i64 %shl1506, 1
  %mul1508 = mul nsw i64 %sub1507, 2
  %add1509 = add nsw i64 %mul1508, 1
  %sub1510 = sub nsw i64 %conv1502, %add1509
  br label %cond.end.1515

cond.false.1511:                                  ; preds = %cond.true.1488
  %225 = load i64, i64* %nargs, align 8
  %add1512 = add nsw i64 0, %225
  %mul1513 = mul nsw i64 0, %add1512
  %add1514 = add nsw i64 %mul1513, 0
  br label %cond.end.1515

cond.end.1515:                                    ; preds = %cond.false.1511, %cond.true.1494
  %cond1516 = phi i64 [ %sub1510, %cond.true.1494 ], [ %add1514, %cond.false.1511 ]
  %div1517 = sdiv i64 %cond1516, 8
  %cmp1518 = icmp slt i64 %221, %div1517
  br i1 %cmp1518, label %cond.true.1557, label %lor.lhs.false.1543

cond.false.1520:                                  ; preds = %cond.false.1485
  %226 = load i64, i64* %nargs, align 8
  %add1521 = add nsw i64 0, %226
  %mul1522 = mul nsw i64 0, %add1521
  %sub1523 = sub nsw i64 %mul1522, 1
  %cmp1524 = icmp slt i64 %sub1523, 0
  br i1 %cmp1524, label %cond.true.1526, label %cond.false.1534

cond.true.1526:                                   ; preds = %cond.false.1520
  %227 = load i64, i64* %nargs, align 8
  %add1527 = add nsw i64 0, %227
  %mul1528 = mul nsw i64 0, %add1527
  %add1529 = add nsw i64 %mul1528, 1
  %shl1530 = shl i64 %add1529, 62
  %sub1531 = sub nsw i64 %shl1530, 1
  %mul1532 = mul nsw i64 %sub1531, 2
  %add1533 = add nsw i64 %mul1532, 1
  br label %cond.end.1538

cond.false.1534:                                  ; preds = %cond.false.1520
  %228 = load i64, i64* %nargs, align 8
  %add1535 = add nsw i64 0, %228
  %mul1536 = mul nsw i64 0, %add1535
  %sub1537 = sub nsw i64 %mul1536, 1
  br label %cond.end.1538

cond.end.1538:                                    ; preds = %cond.false.1534, %cond.true.1526
  %cond1539 = phi i64 [ %add1533, %cond.true.1526 ], [ %sub1537, %cond.false.1534 ]
  %div1540 = sdiv i64 %cond1539, 8
  %229 = load i64, i64* %nargs, align 8
  %cmp1541 = icmp slt i64 %div1540, %229
  br i1 %cmp1541, label %cond.true.1557, label %lor.lhs.false.1543

lor.lhs.false.1543:                               ; preds = %cond.end.1538, %cond.end.1515, %cond.true.1484, %cond.end.1478, %cond.true.1450, %cond.end.1444
  %230 = load i64, i64* %nargs, align 8
  %mul1544 = mul nsw i64 %230, 8
  %mul1545 = mul nsw i64 0, %mul1544
  %sub1546 = sub nsw i64 %mul1545, 1
  %cmp1547 = icmp slt i64 %sub1546, 0
  br i1 %cmp1547, label %land.lhs.true.1549, label %lor.lhs.false.1553

land.lhs.true.1549:                               ; preds = %lor.lhs.false.1543
  %231 = load i64, i64* %nargs, align 8
  %mul1550 = mul nsw i64 %231, 8
  %cmp1551 = icmp slt i64 %mul1550, -9223372036854775808
  br i1 %cmp1551, label %cond.true.1557, label %lor.lhs.false.1553

lor.lhs.false.1553:                               ; preds = %land.lhs.true.1549, %lor.lhs.false.1543
  %232 = load i64, i64* %nargs, align 8
  %mul1554 = mul nsw i64 %232, 8
  %cmp1555 = icmp slt i64 9223372036854775807, %mul1554
  br i1 %cmp1555, label %cond.true.1557, label %cond.false.1569

cond.true.1557:                                   ; preds = %lor.lhs.false.1553, %land.lhs.true.1549, %cond.end.1538, %cond.end.1515, %cond.true.1484, %cond.end.1478, %cond.true.1450, %cond.end.1444, %land.lhs.true.1419
  %233 = load i64, i64* %nargs, align 8
  %mul1558 = mul i64 %233, 8
  %cmp1559 = icmp ule i64 %mul1558, 9223372036854775807
  br i1 %cmp1559, label %cond.true.1561, label %cond.false.1563

cond.true.1561:                                   ; preds = %cond.true.1557
  %234 = load i64, i64* %nargs, align 8
  %mul1562 = mul i64 %234, 8
  br label %cond.end.1567

cond.false.1563:                                  ; preds = %cond.true.1557
  %235 = load i64, i64* %nargs, align 8
  %mul1564 = mul i64 %235, 8
  %sub1565 = sub i64 %mul1564, -9223372036854775808
  %add1566 = add nsw i64 %sub1565, -9223372036854775808
  br label %cond.end.1567

cond.end.1567:                                    ; preds = %cond.false.1563, %cond.true.1561
  %cond1568 = phi i64 [ %mul1562, %cond.true.1561 ], [ %add1566, %cond.false.1563 ]
  store i64 %cond1568, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.1569:                                  ; preds = %lor.lhs.false.1553
  %236 = load i64, i64* %nargs, align 8
  %mul1570 = mul i64 %236, 8
  %cmp1571 = icmp ule i64 %mul1570, 9223372036854775807
  br i1 %cmp1571, label %cond.true.1573, label %cond.false.1575

cond.true.1573:                                   ; preds = %cond.false.1569
  %237 = load i64, i64* %nargs, align 8
  %mul1574 = mul i64 %237, 8
  br label %cond.end.1579

cond.false.1575:                                  ; preds = %cond.false.1569
  %238 = load i64, i64* %nargs, align 8
  %mul1576 = mul i64 %238, 8
  %sub1577 = sub i64 %mul1576, -9223372036854775808
  %add1578 = add nsw i64 %sub1577, -9223372036854775808
  br label %cond.end.1579

cond.end.1579:                                    ; preds = %cond.false.1575, %cond.true.1573
  %cond1580 = phi i64 [ %mul1574, %cond.true.1573 ], [ %add1578, %cond.false.1575 ]
  store i64 %cond1580, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.1581:                                  ; preds = %cond.true.1387
  %239 = load i64, i64* %nargs, align 8
  %add1582 = add nsw i64 0, %239
  %mul1583 = mul nsw i64 0, %add1582
  %sub1584 = sub nsw i64 %mul1583, 1
  %cmp1585 = icmp slt i64 %sub1584, 0
  br i1 %cmp1585, label %cond.true.1587, label %cond.false.1604

cond.true.1587:                                   ; preds = %cond.false.1581
  %240 = load i64, i64* %nargs, align 8
  %add1588 = add nsw i64 0, %240
  %mul1589 = mul nsw i64 0, %add1588
  %add1590 = add nsw i64 %mul1589, 0
  %neg1591 = xor i64 %add1590, -1
  %cmp1592 = icmp eq i64 %neg1591, -1
  %conv1593 = zext i1 %cmp1592 to i32
  %sub1594 = sub nsw i32 0, %conv1593
  %conv1595 = sext i32 %sub1594 to i64
  %241 = load i64, i64* %nargs, align 8
  %add1596 = add nsw i64 0, %241
  %mul1597 = mul nsw i64 0, %add1596
  %add1598 = add nsw i64 %mul1597, 1
  %shl1599 = shl i64 %add1598, 62
  %sub1600 = sub nsw i64 %shl1599, 1
  %mul1601 = mul nsw i64 %sub1600, 2
  %add1602 = add nsw i64 %mul1601, 1
  %sub1603 = sub nsw i64 %conv1595, %add1602
  br label %cond.end.1608

cond.false.1604:                                  ; preds = %cond.false.1581
  %242 = load i64, i64* %nargs, align 8
  %add1605 = add nsw i64 0, %242
  %mul1606 = mul nsw i64 0, %add1605
  %add1607 = add nsw i64 %mul1606, 0
  br label %cond.end.1608

cond.end.1608:                                    ; preds = %cond.false.1604, %cond.true.1587
  %cond1609 = phi i64 [ %sub1603, %cond.true.1587 ], [ %add1607, %cond.false.1604 ]
  %cmp1610 = icmp eq i64 %cond1609, 0
  br i1 %cmp1610, label %land.lhs.true.1612, label %lor.lhs.false.1615

land.lhs.true.1612:                               ; preds = %cond.end.1608
  %243 = load i64, i64* %nargs, align 8
  %cmp1613 = icmp slt i64 %243, 0
  br i1 %cmp1613, label %cond.true.1750, label %lor.lhs.false.1615

lor.lhs.false.1615:                               ; preds = %land.lhs.true.1612, %cond.end.1608
  br i1 false, label %cond.true.1616, label %cond.false.1676

cond.true.1616:                                   ; preds = %lor.lhs.false.1615
  %244 = load i64, i64* %nargs, align 8
  %cmp1617 = icmp slt i64 %244, 0
  br i1 %cmp1617, label %cond.true.1619, label %cond.false.1642

cond.true.1619:                                   ; preds = %cond.true.1616
  %245 = load i64, i64* %nargs, align 8
  %246 = load i64, i64* %nargs, align 8
  %add1620 = add nsw i64 0, %246
  %mul1621 = mul nsw i64 0, %add1620
  %sub1622 = sub nsw i64 %mul1621, 1
  %cmp1623 = icmp slt i64 %sub1622, 0
  br i1 %cmp1623, label %cond.true.1625, label %cond.false.1633

cond.true.1625:                                   ; preds = %cond.true.1619
  %247 = load i64, i64* %nargs, align 8
  %add1626 = add nsw i64 0, %247
  %mul1627 = mul nsw i64 0, %add1626
  %add1628 = add nsw i64 %mul1627, 1
  %shl1629 = shl i64 %add1628, 62
  %sub1630 = sub nsw i64 %shl1629, 1
  %mul1631 = mul nsw i64 %sub1630, 2
  %add1632 = add nsw i64 %mul1631, 1
  br label %cond.end.1637

cond.false.1633:                                  ; preds = %cond.true.1619
  %248 = load i64, i64* %nargs, align 8
  %add1634 = add nsw i64 0, %248
  %mul1635 = mul nsw i64 0, %add1634
  %sub1636 = sub nsw i64 %mul1635, 1
  br label %cond.end.1637

cond.end.1637:                                    ; preds = %cond.false.1633, %cond.true.1625
  %cond1638 = phi i64 [ %add1632, %cond.true.1625 ], [ %sub1636, %cond.false.1633 ]
  %div1639 = sdiv i64 %cond1638, 8
  %cmp1640 = icmp slt i64 %245, %div1639
  br i1 %cmp1640, label %cond.true.1750, label %lor.lhs.false.1736

cond.false.1642:                                  ; preds = %cond.true.1616
  br i1 false, label %cond.true.1643, label %cond.false.1644

cond.true.1643:                                   ; preds = %cond.false.1642
  br i1 false, label %cond.true.1750, label %lor.lhs.false.1736

cond.false.1644:                                  ; preds = %cond.false.1642
  %249 = load i64, i64* %nargs, align 8
  %add1645 = add nsw i64 0, %249
  %mul1646 = mul nsw i64 0, %add1645
  %sub1647 = sub nsw i64 %mul1646, 1
  %cmp1648 = icmp slt i64 %sub1647, 0
  br i1 %cmp1648, label %cond.true.1650, label %cond.false.1667

cond.true.1650:                                   ; preds = %cond.false.1644
  %250 = load i64, i64* %nargs, align 8
  %add1651 = add nsw i64 0, %250
  %mul1652 = mul nsw i64 0, %add1651
  %add1653 = add nsw i64 %mul1652, 0
  %neg1654 = xor i64 %add1653, -1
  %cmp1655 = icmp eq i64 %neg1654, -1
  %conv1656 = zext i1 %cmp1655 to i32
  %sub1657 = sub nsw i32 0, %conv1656
  %conv1658 = sext i32 %sub1657 to i64
  %251 = load i64, i64* %nargs, align 8
  %add1659 = add nsw i64 0, %251
  %mul1660 = mul nsw i64 0, %add1659
  %add1661 = add nsw i64 %mul1660, 1
  %shl1662 = shl i64 %add1661, 62
  %sub1663 = sub nsw i64 %shl1662, 1
  %mul1664 = mul nsw i64 %sub1663, 2
  %add1665 = add nsw i64 %mul1664, 1
  %sub1666 = sub nsw i64 %conv1658, %add1665
  br label %cond.end.1671

cond.false.1667:                                  ; preds = %cond.false.1644
  %252 = load i64, i64* %nargs, align 8
  %add1668 = add nsw i64 0, %252
  %mul1669 = mul nsw i64 0, %add1668
  %add1670 = add nsw i64 %mul1669, 0
  br label %cond.end.1671

cond.end.1671:                                    ; preds = %cond.false.1667, %cond.true.1650
  %cond1672 = phi i64 [ %sub1666, %cond.true.1650 ], [ %add1670, %cond.false.1667 ]
  %div1673 = sdiv i64 %cond1672, 8
  %253 = load i64, i64* %nargs, align 8
  %cmp1674 = icmp slt i64 %div1673, %253
  br i1 %cmp1674, label %cond.true.1750, label %lor.lhs.false.1736

cond.false.1676:                                  ; preds = %lor.lhs.false.1615
  br i1 false, label %cond.true.1677, label %cond.false.1678

cond.true.1677:                                   ; preds = %cond.false.1676
  br i1 false, label %cond.true.1750, label %lor.lhs.false.1736

cond.false.1678:                                  ; preds = %cond.false.1676
  %254 = load i64, i64* %nargs, align 8
  %cmp1679 = icmp slt i64 %254, 0
  br i1 %cmp1679, label %cond.true.1681, label %cond.false.1713

cond.true.1681:                                   ; preds = %cond.false.1678
  %255 = load i64, i64* %nargs, align 8
  %256 = load i64, i64* %nargs, align 8
  %add1682 = add nsw i64 0, %256
  %mul1683 = mul nsw i64 0, %add1682
  %sub1684 = sub nsw i64 %mul1683, 1
  %cmp1685 = icmp slt i64 %sub1684, 0
  br i1 %cmp1685, label %cond.true.1687, label %cond.false.1704

cond.true.1687:                                   ; preds = %cond.true.1681
  %257 = load i64, i64* %nargs, align 8
  %add1688 = add nsw i64 0, %257
  %mul1689 = mul nsw i64 0, %add1688
  %add1690 = add nsw i64 %mul1689, 0
  %neg1691 = xor i64 %add1690, -1
  %cmp1692 = icmp eq i64 %neg1691, -1
  %conv1693 = zext i1 %cmp1692 to i32
  %sub1694 = sub nsw i32 0, %conv1693
  %conv1695 = sext i32 %sub1694 to i64
  %258 = load i64, i64* %nargs, align 8
  %add1696 = add nsw i64 0, %258
  %mul1697 = mul nsw i64 0, %add1696
  %add1698 = add nsw i64 %mul1697, 1
  %shl1699 = shl i64 %add1698, 62
  %sub1700 = sub nsw i64 %shl1699, 1
  %mul1701 = mul nsw i64 %sub1700, 2
  %add1702 = add nsw i64 %mul1701, 1
  %sub1703 = sub nsw i64 %conv1695, %add1702
  br label %cond.end.1708

cond.false.1704:                                  ; preds = %cond.true.1681
  %259 = load i64, i64* %nargs, align 8
  %add1705 = add nsw i64 0, %259
  %mul1706 = mul nsw i64 0, %add1705
  %add1707 = add nsw i64 %mul1706, 0
  br label %cond.end.1708

cond.end.1708:                                    ; preds = %cond.false.1704, %cond.true.1687
  %cond1709 = phi i64 [ %sub1703, %cond.true.1687 ], [ %add1707, %cond.false.1704 ]
  %div1710 = sdiv i64 %cond1709, 8
  %cmp1711 = icmp slt i64 %255, %div1710
  br i1 %cmp1711, label %cond.true.1750, label %lor.lhs.false.1736

cond.false.1713:                                  ; preds = %cond.false.1678
  %260 = load i64, i64* %nargs, align 8
  %add1714 = add nsw i64 0, %260
  %mul1715 = mul nsw i64 0, %add1714
  %sub1716 = sub nsw i64 %mul1715, 1
  %cmp1717 = icmp slt i64 %sub1716, 0
  br i1 %cmp1717, label %cond.true.1719, label %cond.false.1727

cond.true.1719:                                   ; preds = %cond.false.1713
  %261 = load i64, i64* %nargs, align 8
  %add1720 = add nsw i64 0, %261
  %mul1721 = mul nsw i64 0, %add1720
  %add1722 = add nsw i64 %mul1721, 1
  %shl1723 = shl i64 %add1722, 62
  %sub1724 = sub nsw i64 %shl1723, 1
  %mul1725 = mul nsw i64 %sub1724, 2
  %add1726 = add nsw i64 %mul1725, 1
  br label %cond.end.1731

cond.false.1727:                                  ; preds = %cond.false.1713
  %262 = load i64, i64* %nargs, align 8
  %add1728 = add nsw i64 0, %262
  %mul1729 = mul nsw i64 0, %add1728
  %sub1730 = sub nsw i64 %mul1729, 1
  br label %cond.end.1731

cond.end.1731:                                    ; preds = %cond.false.1727, %cond.true.1719
  %cond1732 = phi i64 [ %add1726, %cond.true.1719 ], [ %sub1730, %cond.false.1727 ]
  %div1733 = sdiv i64 %cond1732, 8
  %263 = load i64, i64* %nargs, align 8
  %cmp1734 = icmp slt i64 %div1733, %263
  br i1 %cmp1734, label %cond.true.1750, label %lor.lhs.false.1736

lor.lhs.false.1736:                               ; preds = %cond.end.1731, %cond.end.1708, %cond.true.1677, %cond.end.1671, %cond.true.1643, %cond.end.1637
  %264 = load i64, i64* %nargs, align 8
  %mul1737 = mul nsw i64 %264, 8
  %mul1738 = mul nsw i64 0, %mul1737
  %sub1739 = sub nsw i64 %mul1738, 1
  %cmp1740 = icmp slt i64 %sub1739, 0
  br i1 %cmp1740, label %land.lhs.true.1742, label %lor.lhs.false.1746

land.lhs.true.1742:                               ; preds = %lor.lhs.false.1736
  %265 = load i64, i64* %nargs, align 8
  %mul1743 = mul nsw i64 %265, 8
  %cmp1744 = icmp slt i64 %mul1743, -9223372036854775808
  br i1 %cmp1744, label %cond.true.1750, label %lor.lhs.false.1746

lor.lhs.false.1746:                               ; preds = %land.lhs.true.1742, %lor.lhs.false.1736
  %266 = load i64, i64* %nargs, align 8
  %mul1747 = mul nsw i64 %266, 8
  %cmp1748 = icmp slt i64 9223372036854775807, %mul1747
  br i1 %cmp1748, label %cond.true.1750, label %cond.false.1762

cond.true.1750:                                   ; preds = %lor.lhs.false.1746, %land.lhs.true.1742, %cond.end.1731, %cond.end.1708, %cond.true.1677, %cond.end.1671, %cond.true.1643, %cond.end.1637, %land.lhs.true.1612
  %267 = load i64, i64* %nargs, align 8
  %mul1751 = mul i64 %267, 8
  %cmp1752 = icmp ule i64 %mul1751, 9223372036854775807
  br i1 %cmp1752, label %cond.true.1754, label %cond.false.1756

cond.true.1754:                                   ; preds = %cond.true.1750
  %268 = load i64, i64* %nargs, align 8
  %mul1755 = mul i64 %268, 8
  br label %cond.end.1760

cond.false.1756:                                  ; preds = %cond.true.1750
  %269 = load i64, i64* %nargs, align 8
  %mul1757 = mul i64 %269, 8
  %sub1758 = sub i64 %mul1757, -9223372036854775808
  %add1759 = add nsw i64 %sub1758, -9223372036854775808
  br label %cond.end.1760

cond.end.1760:                                    ; preds = %cond.false.1756, %cond.true.1754
  %cond1761 = phi i64 [ %mul1755, %cond.true.1754 ], [ %add1759, %cond.false.1756 ]
  store i64 %cond1761, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.1762:                                  ; preds = %lor.lhs.false.1746
  %270 = load i64, i64* %nargs, align 8
  %mul1763 = mul i64 %270, 8
  %cmp1764 = icmp ule i64 %mul1763, 9223372036854775807
  br i1 %cmp1764, label %cond.true.1766, label %cond.false.1768

cond.true.1766:                                   ; preds = %cond.false.1762
  %271 = load i64, i64* %nargs, align 8
  %mul1767 = mul i64 %271, 8
  br label %cond.end.1772

cond.false.1768:                                  ; preds = %cond.false.1762
  %272 = load i64, i64* %nargs, align 8
  %mul1769 = mul i64 %272, 8
  %sub1770 = sub i64 %mul1769, -9223372036854775808
  %add1771 = add nsw i64 %sub1770, -9223372036854775808
  br label %cond.end.1772

cond.end.1772:                                    ; preds = %cond.false.1768, %cond.true.1766
  %cond1773 = phi i64 [ %mul1767, %cond.true.1766 ], [ %add1771, %cond.false.1768 ]
  store i64 %cond1773, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.1774:                                  ; preds = %cond.false.1386
  br i1 false, label %cond.true.1775, label %cond.false.1968

cond.true.1775:                                   ; preds = %cond.false.1774
  %273 = load i64, i64* %nargs, align 8
  %add1776 = add nsw i64 0, %273
  %mul1777 = mul nsw i64 0, %add1776
  %sub1778 = sub nsw i64 %mul1777, 1
  %cmp1779 = icmp slt i64 %sub1778, 0
  br i1 %cmp1779, label %cond.true.1781, label %cond.false.1798

cond.true.1781:                                   ; preds = %cond.true.1775
  %274 = load i64, i64* %nargs, align 8
  %add1782 = add nsw i64 0, %274
  %mul1783 = mul nsw i64 0, %add1782
  %add1784 = add nsw i64 %mul1783, 0
  %neg1785 = xor i64 %add1784, -1
  %cmp1786 = icmp eq i64 %neg1785, -1
  %conv1787 = zext i1 %cmp1786 to i32
  %sub1788 = sub nsw i32 0, %conv1787
  %conv1789 = sext i32 %sub1788 to i64
  %275 = load i64, i64* %nargs, align 8
  %add1790 = add nsw i64 0, %275
  %mul1791 = mul nsw i64 0, %add1790
  %add1792 = add nsw i64 %mul1791, 1
  %shl1793 = shl i64 %add1792, 62
  %sub1794 = sub nsw i64 %shl1793, 1
  %mul1795 = mul nsw i64 %sub1794, 2
  %add1796 = add nsw i64 %mul1795, 1
  %sub1797 = sub nsw i64 %conv1789, %add1796
  br label %cond.end.1802

cond.false.1798:                                  ; preds = %cond.true.1775
  %276 = load i64, i64* %nargs, align 8
  %add1799 = add nsw i64 0, %276
  %mul1800 = mul nsw i64 0, %add1799
  %add1801 = add nsw i64 %mul1800, 0
  br label %cond.end.1802

cond.end.1802:                                    ; preds = %cond.false.1798, %cond.true.1781
  %cond1803 = phi i64 [ %sub1797, %cond.true.1781 ], [ %add1801, %cond.false.1798 ]
  %cmp1804 = icmp eq i64 %cond1803, 0
  br i1 %cmp1804, label %land.lhs.true.1806, label %lor.lhs.false.1809

land.lhs.true.1806:                               ; preds = %cond.end.1802
  %277 = load i64, i64* %nargs, align 8
  %cmp1807 = icmp slt i64 %277, 0
  br i1 %cmp1807, label %cond.true.1944, label %lor.lhs.false.1809

lor.lhs.false.1809:                               ; preds = %land.lhs.true.1806, %cond.end.1802
  br i1 false, label %cond.true.1810, label %cond.false.1870

cond.true.1810:                                   ; preds = %lor.lhs.false.1809
  %278 = load i64, i64* %nargs, align 8
  %cmp1811 = icmp slt i64 %278, 0
  br i1 %cmp1811, label %cond.true.1813, label %cond.false.1836

cond.true.1813:                                   ; preds = %cond.true.1810
  %279 = load i64, i64* %nargs, align 8
  %280 = load i64, i64* %nargs, align 8
  %add1814 = add nsw i64 0, %280
  %mul1815 = mul nsw i64 0, %add1814
  %sub1816 = sub nsw i64 %mul1815, 1
  %cmp1817 = icmp slt i64 %sub1816, 0
  br i1 %cmp1817, label %cond.true.1819, label %cond.false.1827

cond.true.1819:                                   ; preds = %cond.true.1813
  %281 = load i64, i64* %nargs, align 8
  %add1820 = add nsw i64 0, %281
  %mul1821 = mul nsw i64 0, %add1820
  %add1822 = add nsw i64 %mul1821, 1
  %shl1823 = shl i64 %add1822, 62
  %sub1824 = sub nsw i64 %shl1823, 1
  %mul1825 = mul nsw i64 %sub1824, 2
  %add1826 = add nsw i64 %mul1825, 1
  br label %cond.end.1831

cond.false.1827:                                  ; preds = %cond.true.1813
  %282 = load i64, i64* %nargs, align 8
  %add1828 = add nsw i64 0, %282
  %mul1829 = mul nsw i64 0, %add1828
  %sub1830 = sub nsw i64 %mul1829, 1
  br label %cond.end.1831

cond.end.1831:                                    ; preds = %cond.false.1827, %cond.true.1819
  %cond1832 = phi i64 [ %add1826, %cond.true.1819 ], [ %sub1830, %cond.false.1827 ]
  %div1833 = sdiv i64 %cond1832, 8
  %cmp1834 = icmp slt i64 %279, %div1833
  br i1 %cmp1834, label %cond.true.1944, label %lor.lhs.false.1930

cond.false.1836:                                  ; preds = %cond.true.1810
  br i1 false, label %cond.true.1837, label %cond.false.1838

cond.true.1837:                                   ; preds = %cond.false.1836
  br i1 false, label %cond.true.1944, label %lor.lhs.false.1930

cond.false.1838:                                  ; preds = %cond.false.1836
  %283 = load i64, i64* %nargs, align 8
  %add1839 = add nsw i64 0, %283
  %mul1840 = mul nsw i64 0, %add1839
  %sub1841 = sub nsw i64 %mul1840, 1
  %cmp1842 = icmp slt i64 %sub1841, 0
  br i1 %cmp1842, label %cond.true.1844, label %cond.false.1861

cond.true.1844:                                   ; preds = %cond.false.1838
  %284 = load i64, i64* %nargs, align 8
  %add1845 = add nsw i64 0, %284
  %mul1846 = mul nsw i64 0, %add1845
  %add1847 = add nsw i64 %mul1846, 0
  %neg1848 = xor i64 %add1847, -1
  %cmp1849 = icmp eq i64 %neg1848, -1
  %conv1850 = zext i1 %cmp1849 to i32
  %sub1851 = sub nsw i32 0, %conv1850
  %conv1852 = sext i32 %sub1851 to i64
  %285 = load i64, i64* %nargs, align 8
  %add1853 = add nsw i64 0, %285
  %mul1854 = mul nsw i64 0, %add1853
  %add1855 = add nsw i64 %mul1854, 1
  %shl1856 = shl i64 %add1855, 62
  %sub1857 = sub nsw i64 %shl1856, 1
  %mul1858 = mul nsw i64 %sub1857, 2
  %add1859 = add nsw i64 %mul1858, 1
  %sub1860 = sub nsw i64 %conv1852, %add1859
  br label %cond.end.1865

cond.false.1861:                                  ; preds = %cond.false.1838
  %286 = load i64, i64* %nargs, align 8
  %add1862 = add nsw i64 0, %286
  %mul1863 = mul nsw i64 0, %add1862
  %add1864 = add nsw i64 %mul1863, 0
  br label %cond.end.1865

cond.end.1865:                                    ; preds = %cond.false.1861, %cond.true.1844
  %cond1866 = phi i64 [ %sub1860, %cond.true.1844 ], [ %add1864, %cond.false.1861 ]
  %div1867 = sdiv i64 %cond1866, 8
  %287 = load i64, i64* %nargs, align 8
  %cmp1868 = icmp slt i64 %div1867, %287
  br i1 %cmp1868, label %cond.true.1944, label %lor.lhs.false.1930

cond.false.1870:                                  ; preds = %lor.lhs.false.1809
  br i1 false, label %cond.true.1871, label %cond.false.1872

cond.true.1871:                                   ; preds = %cond.false.1870
  br i1 false, label %cond.true.1944, label %lor.lhs.false.1930

cond.false.1872:                                  ; preds = %cond.false.1870
  %288 = load i64, i64* %nargs, align 8
  %cmp1873 = icmp slt i64 %288, 0
  br i1 %cmp1873, label %cond.true.1875, label %cond.false.1907

cond.true.1875:                                   ; preds = %cond.false.1872
  %289 = load i64, i64* %nargs, align 8
  %290 = load i64, i64* %nargs, align 8
  %add1876 = add nsw i64 0, %290
  %mul1877 = mul nsw i64 0, %add1876
  %sub1878 = sub nsw i64 %mul1877, 1
  %cmp1879 = icmp slt i64 %sub1878, 0
  br i1 %cmp1879, label %cond.true.1881, label %cond.false.1898

cond.true.1881:                                   ; preds = %cond.true.1875
  %291 = load i64, i64* %nargs, align 8
  %add1882 = add nsw i64 0, %291
  %mul1883 = mul nsw i64 0, %add1882
  %add1884 = add nsw i64 %mul1883, 0
  %neg1885 = xor i64 %add1884, -1
  %cmp1886 = icmp eq i64 %neg1885, -1
  %conv1887 = zext i1 %cmp1886 to i32
  %sub1888 = sub nsw i32 0, %conv1887
  %conv1889 = sext i32 %sub1888 to i64
  %292 = load i64, i64* %nargs, align 8
  %add1890 = add nsw i64 0, %292
  %mul1891 = mul nsw i64 0, %add1890
  %add1892 = add nsw i64 %mul1891, 1
  %shl1893 = shl i64 %add1892, 62
  %sub1894 = sub nsw i64 %shl1893, 1
  %mul1895 = mul nsw i64 %sub1894, 2
  %add1896 = add nsw i64 %mul1895, 1
  %sub1897 = sub nsw i64 %conv1889, %add1896
  br label %cond.end.1902

cond.false.1898:                                  ; preds = %cond.true.1875
  %293 = load i64, i64* %nargs, align 8
  %add1899 = add nsw i64 0, %293
  %mul1900 = mul nsw i64 0, %add1899
  %add1901 = add nsw i64 %mul1900, 0
  br label %cond.end.1902

cond.end.1902:                                    ; preds = %cond.false.1898, %cond.true.1881
  %cond1903 = phi i64 [ %sub1897, %cond.true.1881 ], [ %add1901, %cond.false.1898 ]
  %div1904 = sdiv i64 %cond1903, 8
  %cmp1905 = icmp slt i64 %289, %div1904
  br i1 %cmp1905, label %cond.true.1944, label %lor.lhs.false.1930

cond.false.1907:                                  ; preds = %cond.false.1872
  %294 = load i64, i64* %nargs, align 8
  %add1908 = add nsw i64 0, %294
  %mul1909 = mul nsw i64 0, %add1908
  %sub1910 = sub nsw i64 %mul1909, 1
  %cmp1911 = icmp slt i64 %sub1910, 0
  br i1 %cmp1911, label %cond.true.1913, label %cond.false.1921

cond.true.1913:                                   ; preds = %cond.false.1907
  %295 = load i64, i64* %nargs, align 8
  %add1914 = add nsw i64 0, %295
  %mul1915 = mul nsw i64 0, %add1914
  %add1916 = add nsw i64 %mul1915, 1
  %shl1917 = shl i64 %add1916, 62
  %sub1918 = sub nsw i64 %shl1917, 1
  %mul1919 = mul nsw i64 %sub1918, 2
  %add1920 = add nsw i64 %mul1919, 1
  br label %cond.end.1925

cond.false.1921:                                  ; preds = %cond.false.1907
  %296 = load i64, i64* %nargs, align 8
  %add1922 = add nsw i64 0, %296
  %mul1923 = mul nsw i64 0, %add1922
  %sub1924 = sub nsw i64 %mul1923, 1
  br label %cond.end.1925

cond.end.1925:                                    ; preds = %cond.false.1921, %cond.true.1913
  %cond1926 = phi i64 [ %add1920, %cond.true.1913 ], [ %sub1924, %cond.false.1921 ]
  %div1927 = sdiv i64 %cond1926, 8
  %297 = load i64, i64* %nargs, align 8
  %cmp1928 = icmp slt i64 %div1927, %297
  br i1 %cmp1928, label %cond.true.1944, label %lor.lhs.false.1930

lor.lhs.false.1930:                               ; preds = %cond.end.1925, %cond.end.1902, %cond.true.1871, %cond.end.1865, %cond.true.1837, %cond.end.1831
  %298 = load i64, i64* %nargs, align 8
  %mul1931 = mul nsw i64 %298, 8
  %mul1932 = mul nsw i64 0, %mul1931
  %sub1933 = sub nsw i64 %mul1932, 1
  %cmp1934 = icmp slt i64 %sub1933, 0
  br i1 %cmp1934, label %land.lhs.true.1936, label %lor.lhs.false.1940

land.lhs.true.1936:                               ; preds = %lor.lhs.false.1930
  %299 = load i64, i64* %nargs, align 8
  %mul1937 = mul nsw i64 %299, 8
  %cmp1938 = icmp slt i64 %mul1937, -9223372036854775808
  br i1 %cmp1938, label %cond.true.1944, label %lor.lhs.false.1940

lor.lhs.false.1940:                               ; preds = %land.lhs.true.1936, %lor.lhs.false.1930
  %300 = load i64, i64* %nargs, align 8
  %mul1941 = mul nsw i64 %300, 8
  %cmp1942 = icmp slt i64 9223372036854775807, %mul1941
  br i1 %cmp1942, label %cond.true.1944, label %cond.false.1956

cond.true.1944:                                   ; preds = %lor.lhs.false.1940, %land.lhs.true.1936, %cond.end.1925, %cond.end.1902, %cond.true.1871, %cond.end.1865, %cond.true.1837, %cond.end.1831, %land.lhs.true.1806
  %301 = load i64, i64* %nargs, align 8
  %mul1945 = mul i64 %301, 8
  %cmp1946 = icmp ule i64 %mul1945, 9223372036854775807
  br i1 %cmp1946, label %cond.true.1948, label %cond.false.1950

cond.true.1948:                                   ; preds = %cond.true.1944
  %302 = load i64, i64* %nargs, align 8
  %mul1949 = mul i64 %302, 8
  br label %cond.end.1954

cond.false.1950:                                  ; preds = %cond.true.1944
  %303 = load i64, i64* %nargs, align 8
  %mul1951 = mul i64 %303, 8
  %sub1952 = sub i64 %mul1951, -9223372036854775808
  %add1953 = add nsw i64 %sub1952, -9223372036854775808
  br label %cond.end.1954

cond.end.1954:                                    ; preds = %cond.false.1950, %cond.true.1948
  %cond1955 = phi i64 [ %mul1949, %cond.true.1948 ], [ %add1953, %cond.false.1950 ]
  store i64 %cond1955, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.1956:                                  ; preds = %lor.lhs.false.1940
  %304 = load i64, i64* %nargs, align 8
  %mul1957 = mul i64 %304, 8
  %cmp1958 = icmp ule i64 %mul1957, 9223372036854775807
  br i1 %cmp1958, label %cond.true.1960, label %cond.false.1962

cond.true.1960:                                   ; preds = %cond.false.1956
  %305 = load i64, i64* %nargs, align 8
  %mul1961 = mul i64 %305, 8
  br label %cond.end.1966

cond.false.1962:                                  ; preds = %cond.false.1956
  %306 = load i64, i64* %nargs, align 8
  %mul1963 = mul i64 %306, 8
  %sub1964 = sub i64 %mul1963, -9223372036854775808
  %add1965 = add nsw i64 %sub1964, -9223372036854775808
  br label %cond.end.1966

cond.end.1966:                                    ; preds = %cond.false.1962, %cond.true.1960
  %cond1967 = phi i64 [ %mul1961, %cond.true.1960 ], [ %add1965, %cond.false.1962 ]
  store i64 %cond1967, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

cond.false.1968:                                  ; preds = %cond.false.1774
  %307 = load i64, i64* %nargs, align 8
  %add1969 = add nsw i64 0, %307
  %mul1970 = mul nsw i64 0, %add1969
  %sub1971 = sub nsw i64 %mul1970, 1
  %cmp1972 = icmp slt i64 %sub1971, 0
  br i1 %cmp1972, label %cond.true.1974, label %cond.false.1991

cond.true.1974:                                   ; preds = %cond.false.1968
  %308 = load i64, i64* %nargs, align 8
  %add1975 = add nsw i64 0, %308
  %mul1976 = mul nsw i64 0, %add1975
  %add1977 = add nsw i64 %mul1976, 0
  %neg1978 = xor i64 %add1977, -1
  %cmp1979 = icmp eq i64 %neg1978, -1
  %conv1980 = zext i1 %cmp1979 to i32
  %sub1981 = sub nsw i32 0, %conv1980
  %conv1982 = sext i32 %sub1981 to i64
  %309 = load i64, i64* %nargs, align 8
  %add1983 = add nsw i64 0, %309
  %mul1984 = mul nsw i64 0, %add1983
  %add1985 = add nsw i64 %mul1984, 1
  %shl1986 = shl i64 %add1985, 62
  %sub1987 = sub nsw i64 %shl1986, 1
  %mul1988 = mul nsw i64 %sub1987, 2
  %add1989 = add nsw i64 %mul1988, 1
  %sub1990 = sub nsw i64 %conv1982, %add1989
  br label %cond.end.1995

cond.false.1991:                                  ; preds = %cond.false.1968
  %310 = load i64, i64* %nargs, align 8
  %add1992 = add nsw i64 0, %310
  %mul1993 = mul nsw i64 0, %add1992
  %add1994 = add nsw i64 %mul1993, 0
  br label %cond.end.1995

cond.end.1995:                                    ; preds = %cond.false.1991, %cond.true.1974
  %cond1996 = phi i64 [ %sub1990, %cond.true.1974 ], [ %add1994, %cond.false.1991 ]
  %cmp1997 = icmp eq i64 %cond1996, 0
  br i1 %cmp1997, label %land.lhs.true.1999, label %lor.lhs.false.2002

land.lhs.true.1999:                               ; preds = %cond.end.1995
  %311 = load i64, i64* %nargs, align 8
  %cmp2000 = icmp slt i64 %311, 0
  br i1 %cmp2000, label %cond.true.2137, label %lor.lhs.false.2002

lor.lhs.false.2002:                               ; preds = %land.lhs.true.1999, %cond.end.1995
  br i1 false, label %cond.true.2003, label %cond.false.2063

cond.true.2003:                                   ; preds = %lor.lhs.false.2002
  %312 = load i64, i64* %nargs, align 8
  %cmp2004 = icmp slt i64 %312, 0
  br i1 %cmp2004, label %cond.true.2006, label %cond.false.2029

cond.true.2006:                                   ; preds = %cond.true.2003
  %313 = load i64, i64* %nargs, align 8
  %314 = load i64, i64* %nargs, align 8
  %add2007 = add nsw i64 0, %314
  %mul2008 = mul nsw i64 0, %add2007
  %sub2009 = sub nsw i64 %mul2008, 1
  %cmp2010 = icmp slt i64 %sub2009, 0
  br i1 %cmp2010, label %cond.true.2012, label %cond.false.2020

cond.true.2012:                                   ; preds = %cond.true.2006
  %315 = load i64, i64* %nargs, align 8
  %add2013 = add nsw i64 0, %315
  %mul2014 = mul nsw i64 0, %add2013
  %add2015 = add nsw i64 %mul2014, 1
  %shl2016 = shl i64 %add2015, 62
  %sub2017 = sub nsw i64 %shl2016, 1
  %mul2018 = mul nsw i64 %sub2017, 2
  %add2019 = add nsw i64 %mul2018, 1
  br label %cond.end.2024

cond.false.2020:                                  ; preds = %cond.true.2006
  %316 = load i64, i64* %nargs, align 8
  %add2021 = add nsw i64 0, %316
  %mul2022 = mul nsw i64 0, %add2021
  %sub2023 = sub nsw i64 %mul2022, 1
  br label %cond.end.2024

cond.end.2024:                                    ; preds = %cond.false.2020, %cond.true.2012
  %cond2025 = phi i64 [ %add2019, %cond.true.2012 ], [ %sub2023, %cond.false.2020 ]
  %div2026 = sdiv i64 %cond2025, 8
  %cmp2027 = icmp slt i64 %313, %div2026
  br i1 %cmp2027, label %cond.true.2137, label %lor.lhs.false.2123

cond.false.2029:                                  ; preds = %cond.true.2003
  br i1 false, label %cond.true.2030, label %cond.false.2031

cond.true.2030:                                   ; preds = %cond.false.2029
  br i1 false, label %cond.true.2137, label %lor.lhs.false.2123

cond.false.2031:                                  ; preds = %cond.false.2029
  %317 = load i64, i64* %nargs, align 8
  %add2032 = add nsw i64 0, %317
  %mul2033 = mul nsw i64 0, %add2032
  %sub2034 = sub nsw i64 %mul2033, 1
  %cmp2035 = icmp slt i64 %sub2034, 0
  br i1 %cmp2035, label %cond.true.2037, label %cond.false.2054

cond.true.2037:                                   ; preds = %cond.false.2031
  %318 = load i64, i64* %nargs, align 8
  %add2038 = add nsw i64 0, %318
  %mul2039 = mul nsw i64 0, %add2038
  %add2040 = add nsw i64 %mul2039, 0
  %neg2041 = xor i64 %add2040, -1
  %cmp2042 = icmp eq i64 %neg2041, -1
  %conv2043 = zext i1 %cmp2042 to i32
  %sub2044 = sub nsw i32 0, %conv2043
  %conv2045 = sext i32 %sub2044 to i64
  %319 = load i64, i64* %nargs, align 8
  %add2046 = add nsw i64 0, %319
  %mul2047 = mul nsw i64 0, %add2046
  %add2048 = add nsw i64 %mul2047, 1
  %shl2049 = shl i64 %add2048, 62
  %sub2050 = sub nsw i64 %shl2049, 1
  %mul2051 = mul nsw i64 %sub2050, 2
  %add2052 = add nsw i64 %mul2051, 1
  %sub2053 = sub nsw i64 %conv2045, %add2052
  br label %cond.end.2058

cond.false.2054:                                  ; preds = %cond.false.2031
  %320 = load i64, i64* %nargs, align 8
  %add2055 = add nsw i64 0, %320
  %mul2056 = mul nsw i64 0, %add2055
  %add2057 = add nsw i64 %mul2056, 0
  br label %cond.end.2058

cond.end.2058:                                    ; preds = %cond.false.2054, %cond.true.2037
  %cond2059 = phi i64 [ %sub2053, %cond.true.2037 ], [ %add2057, %cond.false.2054 ]
  %div2060 = sdiv i64 %cond2059, 8
  %321 = load i64, i64* %nargs, align 8
  %cmp2061 = icmp slt i64 %div2060, %321
  br i1 %cmp2061, label %cond.true.2137, label %lor.lhs.false.2123

cond.false.2063:                                  ; preds = %lor.lhs.false.2002
  br i1 false, label %cond.true.2064, label %cond.false.2065

cond.true.2064:                                   ; preds = %cond.false.2063
  br i1 false, label %cond.true.2137, label %lor.lhs.false.2123

cond.false.2065:                                  ; preds = %cond.false.2063
  %322 = load i64, i64* %nargs, align 8
  %cmp2066 = icmp slt i64 %322, 0
  br i1 %cmp2066, label %cond.true.2068, label %cond.false.2100

cond.true.2068:                                   ; preds = %cond.false.2065
  %323 = load i64, i64* %nargs, align 8
  %324 = load i64, i64* %nargs, align 8
  %add2069 = add nsw i64 0, %324
  %mul2070 = mul nsw i64 0, %add2069
  %sub2071 = sub nsw i64 %mul2070, 1
  %cmp2072 = icmp slt i64 %sub2071, 0
  br i1 %cmp2072, label %cond.true.2074, label %cond.false.2091

cond.true.2074:                                   ; preds = %cond.true.2068
  %325 = load i64, i64* %nargs, align 8
  %add2075 = add nsw i64 0, %325
  %mul2076 = mul nsw i64 0, %add2075
  %add2077 = add nsw i64 %mul2076, 0
  %neg2078 = xor i64 %add2077, -1
  %cmp2079 = icmp eq i64 %neg2078, -1
  %conv2080 = zext i1 %cmp2079 to i32
  %sub2081 = sub nsw i32 0, %conv2080
  %conv2082 = sext i32 %sub2081 to i64
  %326 = load i64, i64* %nargs, align 8
  %add2083 = add nsw i64 0, %326
  %mul2084 = mul nsw i64 0, %add2083
  %add2085 = add nsw i64 %mul2084, 1
  %shl2086 = shl i64 %add2085, 62
  %sub2087 = sub nsw i64 %shl2086, 1
  %mul2088 = mul nsw i64 %sub2087, 2
  %add2089 = add nsw i64 %mul2088, 1
  %sub2090 = sub nsw i64 %conv2082, %add2089
  br label %cond.end.2095

cond.false.2091:                                  ; preds = %cond.true.2068
  %327 = load i64, i64* %nargs, align 8
  %add2092 = add nsw i64 0, %327
  %mul2093 = mul nsw i64 0, %add2092
  %add2094 = add nsw i64 %mul2093, 0
  br label %cond.end.2095

cond.end.2095:                                    ; preds = %cond.false.2091, %cond.true.2074
  %cond2096 = phi i64 [ %sub2090, %cond.true.2074 ], [ %add2094, %cond.false.2091 ]
  %div2097 = sdiv i64 %cond2096, 8
  %cmp2098 = icmp slt i64 %323, %div2097
  br i1 %cmp2098, label %cond.true.2137, label %lor.lhs.false.2123

cond.false.2100:                                  ; preds = %cond.false.2065
  %328 = load i64, i64* %nargs, align 8
  %add2101 = add nsw i64 0, %328
  %mul2102 = mul nsw i64 0, %add2101
  %sub2103 = sub nsw i64 %mul2102, 1
  %cmp2104 = icmp slt i64 %sub2103, 0
  br i1 %cmp2104, label %cond.true.2106, label %cond.false.2114

cond.true.2106:                                   ; preds = %cond.false.2100
  %329 = load i64, i64* %nargs, align 8
  %add2107 = add nsw i64 0, %329
  %mul2108 = mul nsw i64 0, %add2107
  %add2109 = add nsw i64 %mul2108, 1
  %shl2110 = shl i64 %add2109, 62
  %sub2111 = sub nsw i64 %shl2110, 1
  %mul2112 = mul nsw i64 %sub2111, 2
  %add2113 = add nsw i64 %mul2112, 1
  br label %cond.end.2118

cond.false.2114:                                  ; preds = %cond.false.2100
  %330 = load i64, i64* %nargs, align 8
  %add2115 = add nsw i64 0, %330
  %mul2116 = mul nsw i64 0, %add2115
  %sub2117 = sub nsw i64 %mul2116, 1
  br label %cond.end.2118

cond.end.2118:                                    ; preds = %cond.false.2114, %cond.true.2106
  %cond2119 = phi i64 [ %add2113, %cond.true.2106 ], [ %sub2117, %cond.false.2114 ]
  %div2120 = sdiv i64 %cond2119, 8
  %331 = load i64, i64* %nargs, align 8
  %cmp2121 = icmp slt i64 %div2120, %331
  br i1 %cmp2121, label %cond.true.2137, label %lor.lhs.false.2123

lor.lhs.false.2123:                               ; preds = %cond.end.2118, %cond.end.2095, %cond.true.2064, %cond.end.2058, %cond.true.2030, %cond.end.2024
  %332 = load i64, i64* %nargs, align 8
  %mul2124 = mul nsw i64 %332, 8
  %mul2125 = mul nsw i64 0, %mul2124
  %sub2126 = sub nsw i64 %mul2125, 1
  %cmp2127 = icmp slt i64 %sub2126, 0
  br i1 %cmp2127, label %land.lhs.true.2129, label %lor.lhs.false.2133

land.lhs.true.2129:                               ; preds = %lor.lhs.false.2123
  %333 = load i64, i64* %nargs, align 8
  %mul2130 = mul nsw i64 %333, 8
  %cmp2131 = icmp slt i64 %mul2130, -9223372036854775808
  br i1 %cmp2131, label %cond.true.2137, label %lor.lhs.false.2133

lor.lhs.false.2133:                               ; preds = %land.lhs.true.2129, %lor.lhs.false.2123
  %334 = load i64, i64* %nargs, align 8
  %mul2134 = mul nsw i64 %334, 8
  %cmp2135 = icmp slt i64 9223372036854775807, %mul2134
  br i1 %cmp2135, label %cond.true.2137, label %cond.false.2149

cond.true.2137:                                   ; preds = %lor.lhs.false.2133, %land.lhs.true.2129, %cond.end.2118, %cond.end.2095, %cond.true.2064, %cond.end.2058, %cond.true.2030, %cond.end.2024, %land.lhs.true.1999
  %335 = load i64, i64* %nargs, align 8
  %mul2138 = mul i64 %335, 8
  %cmp2139 = icmp ule i64 %mul2138, 9223372036854775807
  br i1 %cmp2139, label %cond.true.2141, label %cond.false.2143

cond.true.2141:                                   ; preds = %cond.true.2137
  %336 = load i64, i64* %nargs, align 8
  %mul2142 = mul i64 %336, 8
  br label %cond.end.2147

cond.false.2143:                                  ; preds = %cond.true.2137
  %337 = load i64, i64* %nargs, align 8
  %mul2144 = mul i64 %337, 8
  %sub2145 = sub i64 %mul2144, -9223372036854775808
  %add2146 = add nsw i64 %sub2145, -9223372036854775808
  br label %cond.end.2147

cond.end.2147:                                    ; preds = %cond.false.2143, %cond.true.2141
  %cond2148 = phi i64 [ %mul2142, %cond.true.2141 ], [ %add2146, %cond.false.2143 ]
  store i64 %cond2148, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2161

cond.false.2149:                                  ; preds = %lor.lhs.false.2133
  %338 = load i64, i64* %nargs, align 8
  %mul2150 = mul i64 %338, 8
  %cmp2151 = icmp ule i64 %mul2150, 9223372036854775807
  br i1 %cmp2151, label %cond.true.2153, label %cond.false.2155

cond.true.2153:                                   ; preds = %cond.false.2149
  %339 = load i64, i64* %nargs, align 8
  %mul2154 = mul i64 %339, 8
  br label %cond.end.2159

cond.false.2155:                                  ; preds = %cond.false.2149
  %340 = load i64, i64* %nargs, align 8
  %mul2156 = mul i64 %340, 8
  %sub2157 = sub i64 %mul2156, -9223372036854775808
  %add2158 = add nsw i64 %sub2157, -9223372036854775808
  br label %cond.end.2159

cond.end.2159:                                    ; preds = %cond.false.2155, %cond.true.2153
  %cond2160 = phi i64 [ %mul2154, %cond.true.2153 ], [ %add2158, %cond.false.2155 ]
  store i64 %cond2160, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2161

lor.lhs.false.2161:                               ; preds = %cond.end.2159, %cond.end.2147, %cond.end.1966, %cond.end.1954, %cond.end.1772, %cond.end.1760, %cond.end.1579, %cond.end.1567, %cond.end.1383, %cond.end.1367, %cond.end.1182, %cond.end.1166, %cond.end.954, %cond.end.931, %cond.end.739, %cond.end.716, %cond.end.469, %cond.end.446, %cond.end.254, %cond.end.231
  %341 = load i64, i64* %alloca_nbytes, align 8
  %cmp2162 = icmp ult i64 -1, %341
  br i1 %cmp2162, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.2161, %cond.end.2159, %cond.end.2147, %cond.end.1966, %cond.end.1954, %cond.end.1772, %cond.end.1760, %cond.end.1579, %cond.end.1567, %cond.end.1383, %cond.end.1367, %cond.end.1182, %cond.end.1166, %cond.end.954, %cond.end.931, %cond.end.739, %cond.end.716, %cond.end.469, %cond.end.446, %cond.end.254, %cond.end.231
  call void @memory_full(i64 -1) #7
  unreachable

if.else:                                          ; preds = %lor.lhs.false.2161
  %342 = load i64, i64* %alloca_nbytes, align 8
  %343 = load i64, i64* %sa_avail, align 8
  %cmp2164 = icmp sle i64 %342, %343
  br i1 %cmp2164, label %if.then.2166, label %if.else.2168

if.then.2166:                                     ; preds = %if.else
  %344 = load i64, i64* %alloca_nbytes, align 8
  %345 = load i64, i64* %sa_avail, align 8
  %sub2167 = sub nsw i64 %345, %344
  store i64 %sub2167, i64* %sa_avail, align 8
  %346 = load i64, i64* %alloca_nbytes, align 8
  %347 = alloca i8, i64 %346
  %348 = bitcast i8* %347 to i64*
  store i64* %348, i64** %args, align 8
  br label %if.end

if.else.2168:                                     ; preds = %if.else
  %349 = load i64, i64* %alloca_nbytes, align 8
  %call2169 = call noalias i8* @xmalloc(i64 %349)
  %350 = bitcast i8* %call2169 to i64*
  store i64* %350, i64** %args, align 8
  %351 = load i64*, i64** %args, align 8
  %352 = load i64, i64* %nargs, align 8
  %call2170 = call i64 @make_save_memory(i64* %351, i64 %352)
  store i64 %call2170, i64* %arg_, align 8
  store i8 1, i8* %sa_must_free, align 1
  %353 = load i64, i64* %arg_, align 8
  call void @record_unwind_protect(void (i64)* @free_save_value, i64 %353)
  br label %if.end

if.end:                                           ; preds = %if.else.2168, %if.then.2166
  br label %if.end.2171

if.end.2171:                                      ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.2171
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %354 = load i64, i64* %i, align 8
  %355 = load i64, i64* %nargs, align 8
  %cmp2172 = icmp slt i64 %354, %355
  br i1 %cmp2172, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %356 = load i64, i64* %list.addr, align 8
  %sub2174 = sub nsw i64 %356, 3
  %357 = inttoptr i64 %sub2174 to i8*
  %358 = bitcast i8* %357 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %358, i32 0, i32 0
  %359 = load i64, i64* %car, align 8
  %360 = load i64, i64* %i, align 8
  %361 = load i64*, i64** %args, align 8
  %arrayidx = getelementptr inbounds i64, i64* %361, i64 %360
  store i64 %359, i64* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %362 = load i64, i64* %i, align 8
  %inc = add nsw i64 %362, 1
  store i64 %inc, i64* %i, align 8
  %363 = load i64, i64* %list.addr, align 8
  %sub2175 = sub nsw i64 %363, 3
  %364 = inttoptr i64 %sub2175 to i8*
  %365 = bitcast i8* %364 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %365, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %366 = load i64, i64* %cdr, align 8
  store i64 %366, i64* %list.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %367 = load i64, i64* %nargs, align 8
  %368 = load i64*, i64** %args, align 8
  %call2176 = call i64 @Fvconcat(i64 %367, i64* %368)
  store i64 %call2176, i64* %result, align 8
  br label %do.body.2177

do.body.2177:                                     ; preds = %for.end
  %369 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %369 to i1
  br i1 %tobool, label %if.then.2178, label %if.end.2181

if.then.2178:                                     ; preds = %do.body.2177
  store i8 0, i8* %sa_must_free, align 1
  %370 = load i64, i64* %sa_count, align 8
  %call2179 = call i64 @builtin_lisp_symbol(i32 0)
  %call2180 = call i64 @unbind_to(i64 %370, i64 %call2179)
  br label %if.end.2181

if.end.2181:                                      ; preds = %if.then.2178, %do.body.2177
  br label %do.end.2182

do.end.2182:                                      ; preds = %if.end.2181
  %371 = load i64, i64* %result, align 8
  ret i64 %371
}

declare i64 @Fappend(i64, i64*) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_family_list(i64 %frame) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %driver_list = alloca %struct.font_driver_list*, align 8
  %list = alloca i64, align 8
  %val = alloca i64, align 8
  %tail = alloca i64, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %list, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 63
  %2 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %2, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.26, %entry
  %3 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool = icmp ne %struct.font_driver_list* %3, null
  br i1 %tobool, label %for.body, label %for.end.27

for.body:                                         ; preds = %for.cond
  %4 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %4, i32 0, i32 1
  %5 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %list_family = getelementptr inbounds %struct.font_driver, %struct.font_driver* %5, i32 0, i32 5
  %6 = load i64 (%struct.frame*)*, i64 (%struct.frame*)** %list_family, align 8
  %tobool2 = icmp ne i64 (%struct.frame*)* %6, null
  br i1 %tobool2, label %if.then, label %if.end.25

if.then:                                          ; preds = %for.body
  %7 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver3 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %7, i32 0, i32 1
  %8 = load %struct.font_driver*, %struct.font_driver** %driver3, align 8
  %list_family4 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %8, i32 0, i32 5
  %9 = load i64 (%struct.frame*)*, i64 (%struct.frame*)** %list_family4, align 8
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %call5 = call i64 %9(%struct.frame* %10)
  store i64 %call5, i64* %val, align 8
  %11 = load i64, i64* %list, align 8
  store i64 %11, i64* %tail, align 8
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc, %if.then
  %12 = load i64, i64* %val, align 8
  %and = and i64 %12, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body.8, label %for.end

for.body.8:                                       ; preds = %for.cond.6
  %13 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 0
  %16 = load i64, i64* %car, align 8
  %17 = load i64, i64* %tail, align 8
  %call9 = call i64 @Fmemq(i64 %16, i64 %17)
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %call9, %call10
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.8
  %18 = load i64, i64* %val, align 8
  %sub13 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub13 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car14 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car14, align 8
  %and15 = and i64 %21, 7
  %conv16 = trunc i64 %and15 to i32
  %cmp17 = icmp eq i32 %conv16, 0
  br i1 %cmp17, label %if.then.19, label %if.end

if.then.19:                                       ; preds = %land.lhs.true
  %22 = load i64, i64* %val, align 8
  %sub20 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub20 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %car21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 0
  %25 = load i64, i64* %car21, align 8
  %call22 = call i64 @SYMBOL_NAME(i64 %25)
  %26 = load i64, i64* %list, align 8
  %call23 = call i64 @Fcons(i64 %call22, i64 %26)
  store i64 %call23, i64* %list, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.19, %land.lhs.true, %for.body.8
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load i64, i64* %val, align 8
  %sub24 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub24 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %30 = load i64, i64* %cdr, align 8
  store i64 %30, i64* %val, align 8
  br label %for.cond.6

for.end:                                          ; preds = %for.cond.6
  br label %if.end.25

if.end.25:                                        ; preds = %for.end, %for.body
  br label %for.inc.26

for.inc.26:                                       ; preds = %if.end.25
  %31 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %31, i32 0, i32 2
  %32 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %32, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.end.27:                                       ; preds = %for.cond
  %33 = load i64, i64* %list, align 8
  ret i64 %33
}

; Function Attrs: nounwind uwtable
define i64 @Ffind_font(i64 %font_spec, i64 %frame) #0 {
entry:
  %font_spec.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %val = alloca i64, align 8
  store i64 %font_spec, i64* %font_spec.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %font_spec.addr, align 8
  %1 = load i64, i64* %frame.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Flist_fonts(i64 %0, i64 %1, i64 6, i64 %call)
  store i64 %call1, i64* %val, align 8
  %2 = load i64, i64* %val, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %val, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i64, i64* %val, align 8
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define i64 @Ffont_xlfd_name(i64 %font, i64 %fold_wildcards) #0 {
entry:
  %retval = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %fold_wildcards.addr = alloca i64, align 8
  %name = alloca [256 x i8], align 16
  %namelen = alloca i32, align 4
  %pixel_size = alloca i32, align 4
  %font_name = alloca i64, align 8
  %p0 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  store i64 %font, i64* %font.addr, align 8
  store i64 %fold_wildcards, i64* %fold_wildcards.addr, align 8
  store i32 0, i32* %pixel_size, align 4
  %0 = load i64, i64* %font.addr, align 8
  call void @CHECK_FONT(i64 %0)
  %1 = load i64, i64* %font.addr, align 8
  %call = call zeroext i1 @FONT_OBJECT_P(i64 %1)
  br i1 %call, label %if.then, label %if.end.16

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %font.addr, align 8
  %call1 = call i64 @AREF(i64 %2, i64 14)
  store i64 %call1, i64* %font_name, align 8
  %3 = load i64, i64* %font_name, align 8
  %call2 = call zeroext i1 @STRINGP(i64 %3)
  br i1 %call2, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.then
  %4 = load i64, i64* %font_name, align 8
  %call3 = call i8* @SDATA(i64 %4)
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then.5, label %if.end.13

if.then.5:                                        ; preds = %land.lhs.true
  %6 = load i64, i64* %fold_wildcards.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %6, %call6
  br i1 %cmp7, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then.5
  %7 = load i64, i64* %font_name, align 8
  store i64 %7, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then.5
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %8 = load i64, i64* %font_name, align 8
  %call10 = call i8* @lispstpcpy(i8* %arraydecay, i64 %8)
  %9 = load i64, i64* %font_name, align 8
  %call11 = call i64 @SBYTES(i64 %9)
  %conv12 = trunc i64 %call11 to i32
  store i32 %conv12, i32* %namelen, align 4
  br label %done

if.end.13:                                        ; preds = %land.lhs.true, %if.then
  %10 = load i64, i64* %font.addr, align 8
  %call14 = call %struct.font* @XFONT_OBJECT(i64 %10)
  %pixel_size15 = getelementptr inbounds %struct.font, %struct.font* %call14, i32 0, i32 4
  %11 = load i32, i32* %pixel_size15, align 4
  store i32 %11, i32* %pixel_size, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.13, %entry
  %12 = load i64, i64* %font.addr, align 8
  %13 = load i32, i32* %pixel_size, align 4
  %arraydecay17 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %call18 = call i64 @font_unparse_xlfd(i64 %12, i32 %13, i8* %arraydecay17, i32 256)
  %conv19 = trunc i64 %call18 to i32
  store i32 %conv19, i32* %namelen, align 4
  %14 = load i32, i32* %namelen, align 4
  %cmp20 = icmp slt i32 %14, 0
  br i1 %cmp20, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %if.end.16
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call23, i64* %retval
  br label %return

if.end.24:                                        ; preds = %if.end.16
  br label %done

done:                                             ; preds = %if.end.24, %if.end
  %15 = load i64, i64* %fold_wildcards.addr, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %15, %call25
  br i1 %cmp26, label %if.end.32, label %if.then.28

if.then.28:                                       ; preds = %done
  %arraydecay29 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  store i8* %arraydecay29, i8** %p0, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.28
  %16 = load i8*, i8** %p0, align 8
  %call30 = call i8* @strstr(i8* %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0)) #6
  store i8* %call30, i8** %p1, align 8
  %tobool = icmp ne i8* %call30, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i8*, i8** %p1, align 8
  %18 = load i8*, i8** %p1, align 8
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 2
  %call31 = call i8* @strcpy(i8* %17, i8* %add.ptr) #5
  %19 = load i32, i32* %namelen, align 4
  %sub = sub nsw i32 %19, 2
  store i32 %sub, i32* %namelen, align 4
  %20 = load i8*, i8** %p1, align 8
  store i8* %20, i8** %p0, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.32

if.end.32:                                        ; preds = %while.end, %done
  %arraydecay33 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %21 = load i32, i32* %namelen, align 4
  %conv34 = sext i32 %21 to i64
  %call35 = call i64 @make_string(i8* %arraydecay33, i64 %conv34)
  store i64 %call35, i64* %retval
  br label %return

return:                                           ; preds = %if.end.32, %if.then.22, %if.then.9
  %22 = load i64, i64* %retval
  ret i64 %22
}

declare i8* @lispstpcpy(i8*, i64) #1

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #3

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define void @clear_font_cache(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %driver_list = alloca %struct.font_driver_list*, align 8
  %val = alloca i64, align 8
  %tmp = alloca i64, align 8
  %cache = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %font_driver_list = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 63
  %1 = load %struct.font_driver_list*, %struct.font_driver_list** %font_driver_list, align 8
  store %struct.font_driver_list* %1, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool = icmp ne %struct.font_driver_list* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %on = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %3, i32 0, i32 0
  %4 = load i8, i8* %on, align 1
  %tobool1 = trunc i8 %4 to i1
  br i1 %tobool1, label %if.then, label %if.end.27

if.then:                                          ; preds = %for.body
  %5 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %5, i32 0, i32 1
  %6 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %get_cache = getelementptr inbounds %struct.font_driver, %struct.font_driver* %6, i32 0, i32 2
  %7 = load i64 (%struct.frame*)*, i64 (%struct.frame*)** %get_cache, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 %7(%struct.frame* %8)
  store i64 %call, i64* %cache, align 8
  %9 = load i64, i64* %cache, align 8
  %sub = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %12 = load i64, i64* %cdr, align 8
  store i64 %12, i64* %val, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %13 = load i64, i64* %val, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %13, %call3
  br i1 %cmp, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %14 = load i64, i64* %val, align 8
  %sub4 = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub4 to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 0
  %17 = load i64, i64* %car, align 8
  %sub5 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub5 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %car6 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 0
  %20 = load i64, i64* %car6, align 8
  %21 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver7 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %21, i32 0, i32 1
  %22 = load %struct.font_driver*, %struct.font_driver** %driver7, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %22, i32 0, i32 0
  %23 = load i64, i64* %type, align 8
  %cmp8 = icmp eq i64 %20, %23
  %lnot = xor i1 %cmp8, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %24 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %24, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %25 = load i64, i64* %val, align 8
  %sub9 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub9 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u10 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr11 = bitcast %union.anon.10* %u10 to i64*
  %28 = load i64, i64* %cdr11, align 8
  store i64 %28, i64* %val, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %29 = load i64, i64* %val, align 8
  %sub12 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub12 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %car13 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 0
  %32 = load i64, i64* %car13, align 8
  %sub14 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub14 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %u15 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 1
  %cdr16 = bitcast %union.anon.10* %u15 to i64*
  %35 = load i64, i64* %cdr16, align 8
  store i64 %35, i64* %tmp, align 8
  %36 = load i64, i64* %tmp, align 8
  %sub17 = sub nsw i64 %36, 3
  %37 = inttoptr i64 %sub17 to i8*
  %38 = bitcast i8* %37 to %struct.Lisp_Cons*
  %car18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %38, i32 0, i32 0
  %39 = load i64, i64* %car18, align 8
  %shr = ashr i64 %39, 2
  %cmp19 = icmp eq i64 %shr, 0
  br i1 %cmp19, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %while.end
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %41 = load i64, i64* %val, align 8
  %sub21 = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub21 to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %car22 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 0
  %44 = load i64, i64* %car22, align 8
  %45 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver23 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %45, i32 0, i32 1
  %46 = load %struct.font_driver*, %struct.font_driver** %driver23, align 8
  call void @font_clear_cache(%struct.frame* %40, i64 %44, %struct.font_driver* %46)
  %47 = load i64, i64* %cache, align 8
  %48 = load i64, i64* %val, align 8
  %sub24 = sub nsw i64 %48, 3
  %49 = inttoptr i64 %sub24 to i8*
  %50 = bitcast i8* %49 to %struct.Lisp_Cons*
  %u25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %50, i32 0, i32 1
  %cdr26 = bitcast %union.anon.10* %u25 to i64*
  %51 = load i64, i64* %cdr26, align 8
  call void @XSETCDR(i64 %47, i64 %51)
  br label %if.end

if.end:                                           ; preds = %if.then.20, %while.end
  br label %if.end.27

if.end.27:                                        ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.27
  %52 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %52, i32 0, i32 2
  %53 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %53, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @font_clear_cache(%struct.frame* %f, i64 %cache, %struct.font_driver* %driver) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %cache.addr = alloca i64, align 8
  %driver.addr = alloca %struct.font_driver*, align 8
  %tail = alloca i64, align 8
  %elt = alloca i64, align 8
  %entity = alloca i64, align 8
  %i = alloca i64, align 8
  %objlist = alloca i64, align 8
  %val = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %cache, i64* %cache.addr, align 8
  store %struct.font_driver* %driver, %struct.font_driver** %driver.addr, align 8
  %0 = load i64, i64* %cache.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %3 = load i64, i64* %cdr, align 8
  %sub1 = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub1 to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %u2 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 1
  %cdr3 = bitcast %union.anon.10* %u2 to i64*
  %6 = load i64, i64* %cdr3, align 8
  store i64 %6, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.54, %entry
  %7 = load i64, i64* %tail, align 8
  %and = and i64 %7, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end.58

for.body:                                         ; preds = %for.cond
  %8 = load i64, i64* %tail, align 8
  %sub5 = sub nsw i64 %8, 3
  %9 = inttoptr i64 %sub5 to i8*
  %10 = bitcast i8* %9 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %10, i32 0, i32 0
  %11 = load i64, i64* %car, align 8
  store i64 %11, i64* %elt, align 8
  %12 = load i64, i64* %elt, align 8
  %and6 = and i64 %12, 7
  %conv7 = trunc i64 %and6 to i32
  %cmp8 = icmp eq i32 %conv7, 3
  br i1 %cmp8, label %land.lhs.true, label %if.end.53

land.lhs.true:                                    ; preds = %for.body
  %13 = load i64, i64* %elt, align 8
  %sub10 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub10 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %car11 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 0
  %16 = load i64, i64* %car11, align 8
  %call = call zeroext i1 @FONT_SPEC_P(i64 %16)
  br i1 %call, label %if.then, label %if.end.53

if.then:                                          ; preds = %land.lhs.true
  %17 = load i64, i64* %elt, align 8
  %sub13 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub13 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u14 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr15 = bitcast %union.anon.10* %u14 to i64*
  %20 = load i64, i64* %cdr15, align 8
  store i64 %20, i64* %elt, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.51, %if.then
  %21 = load i64, i64* %i, align 8
  %22 = load i64, i64* %elt, align 8
  %call17 = call i64 @ASIZE(i64 %22)
  %cmp18 = icmp slt i64 %21, %call17
  br i1 %cmp18, label %for.body.20, label %for.end.52

for.body.20:                                      ; preds = %for.cond.16
  %23 = load i64, i64* %elt, align 8
  %24 = load i64, i64* %i, align 8
  %call21 = call i64 @AREF(i64 %23, i64 %24)
  store i64 %call21, i64* %entity, align 8
  %25 = load i64, i64* %entity, align 8
  %call22 = call zeroext i1 @FONT_ENTITY_P(i64 %25)
  br i1 %call22, label %land.lhs.true.24, label %if.end.50

land.lhs.true.24:                                 ; preds = %for.body.20
  %26 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %type = getelementptr inbounds %struct.font_driver, %struct.font_driver* %26, i32 0, i32 0
  %27 = load i64, i64* %type, align 8
  %28 = load i64, i64* %entity, align 8
  %call25 = call i64 @AREF(i64 %28, i64 0)
  %cmp26 = icmp eq i64 %27, %call25
  br i1 %cmp26, label %if.then.28, label %if.end.50

if.then.28:                                       ; preds = %land.lhs.true.24
  %29 = load i64, i64* %entity, align 8
  %call29 = call i64 @AREF(i64 %29, i64 13)
  store i64 %call29, i64* %objlist, align 8
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc, %if.then.28
  %30 = load i64, i64* %objlist, align 8
  %and31 = and i64 %30, 7
  %conv32 = trunc i64 %and31 to i32
  %cmp33 = icmp eq i32 %conv32, 3
  br i1 %cmp33, label %for.body.35, label %for.end

for.body.35:                                      ; preds = %for.cond.30
  %31 = load i64, i64* %objlist, align 8
  %sub36 = sub nsw i64 %31, 3
  %32 = inttoptr i64 %sub36 to i8*
  %33 = bitcast i8* %32 to %struct.Lisp_Cons*
  %car37 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %33, i32 0, i32 0
  %34 = load i64, i64* %car37, align 8
  store i64 %34, i64* %val, align 8
  %35 = load i64, i64* %val, align 8
  %call38 = call %struct.font* @XFONT_OBJECT(i64 %35)
  store %struct.font* %call38, %struct.font** %font, align 8
  %36 = load i64, i64* %val, align 8
  %call39 = call i64 @AREF(i64 %36, i64 0)
  %call40 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp41 = icmp eq i64 %call39, %call40
  br i1 %cmp41, label %if.end, label %if.then.43

if.then.43:                                       ; preds = %for.body.35
  %37 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %close = getelementptr inbounds %struct.font_driver, %struct.font_driver* %37, i32 0, i32 8
  %38 = load void (%struct.font*)*, void (%struct.font*)** %close, align 8
  %39 = load %struct.font*, %struct.font** %font, align 8
  call void %38(%struct.font* %39)
  br label %if.end

if.end:                                           ; preds = %if.then.43, %for.body.35
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %40 = load i64, i64* %objlist, align 8
  %sub44 = sub nsw i64 %40, 3
  %41 = inttoptr i64 %sub44 to i8*
  %42 = bitcast i8* %41 to %struct.Lisp_Cons*
  %u45 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %42, i32 0, i32 1
  %cdr46 = bitcast %union.anon.10* %u45 to i64*
  %43 = load i64, i64* %cdr46, align 8
  store i64 %43, i64* %objlist, align 8
  br label %for.cond.30

for.end:                                          ; preds = %for.cond.30
  %44 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %free_entity = getelementptr inbounds %struct.font_driver, %struct.font_driver* %44, i32 0, i32 6
  %45 = load void (i64)*, void (i64)** %free_entity, align 8
  %tobool = icmp ne void (i64)* %45, null
  br i1 %tobool, label %if.then.47, label %if.end.49

if.then.47:                                       ; preds = %for.end
  %46 = load %struct.font_driver*, %struct.font_driver** %driver.addr, align 8
  %free_entity48 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %46, i32 0, i32 6
  %47 = load void (i64)*, void (i64)** %free_entity48, align 8
  %48 = load i64, i64* %entity, align 8
  call void %47(i64 %48)
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.47, %for.end
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %land.lhs.true.24, %for.body.20
  br label %for.inc.51

for.inc.51:                                       ; preds = %if.end.50
  %49 = load i64, i64* %i, align 8
  %inc = add nsw i64 %49, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond.16

for.end.52:                                       ; preds = %for.cond.16
  br label %if.end.53

if.end.53:                                        ; preds = %for.end.52, %land.lhs.true, %for.body
  br label %for.inc.54

for.inc.54:                                       ; preds = %if.end.53
  %50 = load i64, i64* %tail, align 8
  %sub55 = sub nsw i64 %50, 3
  %51 = inttoptr i64 %sub55 to i8*
  %52 = bitcast i8* %51 to %struct.Lisp_Cons*
  %u56 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %52, i32 0, i32 1
  %cdr57 = bitcast %union.anon.10* %u56 to i64*
  %53 = load i64, i64* %cdr57, align 8
  store i64 %53, i64* %tail, align 8
  br label %for.cond

for.end.58:                                       ; preds = %for.cond
  %54 = load i64, i64* %cache.addr, align 8
  %call59 = call i64 @builtin_lisp_symbol(i32 0)
  call void @XSETCDR(i64 %54, i64 %call59)
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fclear_font_cache() #0 {
entry:
  %list = alloca i64, align 8
  %frame = alloca i64, align 8
  %0 = load i64, i64* @Vframe_list, align 8
  store i64 %0, i64* %list, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %list, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i64, i64* %list, align 8
  %sub = sub nsw i64 %2, 3
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %4, i32 0, i32 0
  %5 = load i64, i64* %car, align 8
  store i64 %5, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %6, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %7 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub2 to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  call void @clear_font_cache(%struct.frame* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %list, align 8
  %sub3 = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub3 to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %13 = load i64, i64* %cdr, align 8
  store i64 %13, i64* %list, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %call = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define void @font_fill_lglyph_metrics(i64 %glyph, i64 %font_object) #0 {
entry:
  %glyph.addr = alloca i64, align 8
  %font_object.addr = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  %code = alloca i32, align 4
  %metrics = alloca %struct.font_metrics, align 2
  store i64 %glyph, i64* %glyph.addr, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  %0 = load i64, i64* %font_object.addr, align 8
  %call = call %struct.font* @XFONT_OBJECT(i64 %0)
  store %struct.font* %call, %struct.font** %font, align 8
  %1 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %1, i32 0, i32 18
  %2 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %encode_char = getelementptr inbounds %struct.font_driver, %struct.font_driver* %2, i32 0, i32 12
  %3 = load i32 (%struct.font*, i32)*, i32 (%struct.font*, i32)** %encode_char, align 8
  %4 = load %struct.font*, %struct.font** %font, align 8
  %5 = load i64, i64* %glyph.addr, align 8
  %call1 = call i64 @AREF(i64 %5, i64 2)
  %shr = ashr i64 %call1, 2
  %conv = trunc i64 %shr to i32
  %call2 = call i32 %3(%struct.font* %4, i32 %conv)
  store i32 %call2, i32* %code, align 4
  %6 = load i64, i64* %glyph.addr, align 8
  %7 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.26

cond.false:                                       ; preds = %entry
  %8 = load i32, i32* %code, align 4
  %cmp5 = icmp ule i32 0, %8
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false
  %9 = load i32, i32* %code, align 4
  %conv7 = zext i32 %9 to i64
  %cmp8 = icmp sle i64 -2305843009213693952, %conv7
  br i1 %cmp8, label %land.lhs.true, label %cond.false.15

land.lhs.true:                                    ; preds = %lor.lhs.false, %cond.false
  %10 = load i32, i32* %code, align 4
  %conv10 = zext i32 %10 to i64
  %cmp11 = icmp sle i64 %conv10, 2305843009213693951
  br i1 %cmp11, label %cond.true.13, label %cond.false.15

cond.true.13:                                     ; preds = %land.lhs.true
  %11 = load i32, i32* %code, align 4
  %conv14 = zext i32 %11 to i64
  %shl = shl i64 %conv14, 2
  %add = add i64 %shl, 2
  br label %cond.end.24

cond.false.15:                                    ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load i32, i32* %code, align 4
  %mul = mul i32 0, %12
  %sub = sub i32 %mul, 1
  %cmp16 = icmp ult i32 %sub, 0
  br i1 %cmp16, label %cond.true.18, label %cond.false.21

cond.true.18:                                     ; preds = %cond.false.15
  %13 = load i32, i32* %code, align 4
  %conv19 = zext i32 %13 to i64
  %call20 = call i64 @intbig_to_lisp(i64 %conv19)
  br label %cond.end

cond.false.21:                                    ; preds = %cond.false.15
  %14 = load i32, i32* %code, align 4
  %conv22 = zext i32 %14 to i64
  %call23 = call i64 @uintbig_to_lisp(i64 %conv22)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.21, %cond.true.18
  %cond = phi i64 [ %call20, %cond.true.18 ], [ %call23, %cond.false.21 ]
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.end, %cond.true.13
  %cond25 = phi i64 [ %add, %cond.true.13 ], [ %cond, %cond.end ]
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.end.24, %cond.true
  %cond27 = phi i64 [ %call4, %cond.true ], [ %cond25, %cond.end.24 ]
  call void @ASET(i64 %6, i64 3, i64 %cond27)
  %15 = load %struct.font*, %struct.font** %font, align 8
  %driver28 = getelementptr inbounds %struct.font, %struct.font* %15, i32 0, i32 18
  %16 = load %struct.font_driver*, %struct.font_driver** %driver28, align 8
  %text_extents = getelementptr inbounds %struct.font_driver, %struct.font_driver* %16, i32 0, i32 13
  %17 = load void (%struct.font*, i32*, i32, %struct.font_metrics*)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)** %text_extents, align 8
  %18 = load %struct.font*, %struct.font** %font, align 8
  call void %17(%struct.font* %18, i32* %code, i32 1, %struct.font_metrics* %metrics)
  %19 = load i64, i64* %glyph.addr, align 8
  %lbearing = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 0
  %20 = load i16, i16* %lbearing, align 2
  %conv29 = sext i16 %20 to i64
  %shl30 = shl i64 %conv29, 2
  %add31 = add i64 %shl30, 2
  call void @ASET(i64 %19, i64 5, i64 %add31)
  %21 = load i64, i64* %glyph.addr, align 8
  %rbearing = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 1
  %22 = load i16, i16* %rbearing, align 2
  %conv32 = sext i16 %22 to i64
  %shl33 = shl i64 %conv32, 2
  %add34 = add i64 %shl33, 2
  call void @ASET(i64 %21, i64 6, i64 %add34)
  %23 = load i64, i64* %glyph.addr, align 8
  %width = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 2
  %24 = load i16, i16* %width, align 2
  %conv35 = sext i16 %24 to i64
  %shl36 = shl i64 %conv35, 2
  %add37 = add i64 %shl36, 2
  call void @ASET(i64 %23, i64 4, i64 %add37)
  %25 = load i64, i64* %glyph.addr, align 8
  %ascent = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 3
  %26 = load i16, i16* %ascent, align 2
  %conv38 = sext i16 %26 to i64
  %shl39 = shl i64 %conv38, 2
  %add40 = add i64 %shl39, 2
  call void @ASET(i64 %25, i64 7, i64 %add40)
  %27 = load i64, i64* %glyph.addr, align 8
  %descent = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 4
  %28 = load i16, i16* %descent, align 2
  %conv41 = sext i16 %28 to i64
  %shl42 = shl i64 %conv41, 2
  %add43 = add i64 %shl42, 2
  call void @ASET(i64 %27, i64 8, i64 %add43)
  ret void
}

declare i64 @intbig_to_lisp(i64) #1

declare i64 @uintbig_to_lisp(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_shape_gstring(i64 %gstring) #0 {
entry:
  %retval = alloca i64, align 8
  %gstring.addr = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  %font_object = alloca i64, align 8
  %n = alloca i64, align 8
  %glyph = alloca i64, align 8
  %i = alloca i64, align 8
  %from = alloca i64, align 8
  %to = alloca i64, align 8
  store i64 %gstring, i64* %gstring.addr, align 8
  %0 = load i64, i64* %gstring.addr, align 8
  %call = call zeroext i1 @composition_gstring_p(i64 %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %gstring.addr, align 8
  call void @signal_error(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.32, i32 0, i32 0), i64 %1) #7
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %gstring.addr, align 8
  %call1 = call i64 @AREF(i64 %2, i64 1)
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call1, %call2
  br i1 %cmp, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %3 = load i64, i64* %gstring.addr, align 8
  store i64 %3, i64* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load i64, i64* %gstring.addr, align 8
  %call5 = call i64 @AREF(i64 %4, i64 0)
  %call6 = call i64 @AREF(i64 %call5, i64 0)
  store i64 %call6, i64* %font_object, align 8
  %5 = load i64, i64* %font_object, align 8
  call void @CHECK_FONT_OBJECT(i64 %5)
  %6 = load i64, i64* %font_object, align 8
  %call7 = call %struct.font* @XFONT_OBJECT(i64 %6)
  store %struct.font* %call7, %struct.font** %font, align 8
  %7 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %7, i32 0, i32 18
  %8 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %shape = getelementptr inbounds %struct.font_driver, %struct.font_driver* %8, i32 0, i32 22
  %9 = load i64 (i64)*, i64 (i64)** %shape, align 8
  %tobool = icmp ne i64 (i64)* %9, null
  br i1 %tobool, label %if.end.10, label %if.then.8

if.then.8:                                        ; preds = %if.end.4
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call9, i64* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %10 = load i64, i64* %i, align 8
  %cmp11 = icmp slt i64 %10, 3
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.font*, %struct.font** %font, align 8
  %driver12 = getelementptr inbounds %struct.font, %struct.font* %11, i32 0, i32 18
  %12 = load %struct.font_driver*, %struct.font_driver** %driver12, align 8
  %shape13 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %12, i32 0, i32 22
  %13 = load i64 (i64)*, i64 (i64)** %shape13, align 8
  %14 = load i64, i64* %gstring.addr, align 8
  %call14 = call i64 %13(i64 %14)
  store i64 %call14, i64* %n, align 8
  %15 = load i64, i64* %n, align 8
  %and = and i64 %15, 7
  %conv = trunc i64 %and to i32
  %and15 = and i32 %conv, -5
  %cmp16 = icmp eq i32 %and15, 2
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %for.body
  br label %for.end

if.end.19:                                        ; preds = %for.body
  %16 = load i64, i64* %gstring.addr, align 8
  %17 = load i64, i64* %gstring.addr, align 8
  %call20 = call i64 @ASIZE(i64 %17)
  %sub = sub nsw i64 %call20, 2
  %call21 = call i64 @larger_vector(i64 %16, i64 %sub, i64 -1)
  store i64 %call21, i64* %gstring.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.19
  %18 = load i64, i64* %i, align 8
  %inc = add nsw i64 %18, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.18, %for.cond
  %19 = load i64, i64* %i, align 8
  %cmp22 = icmp eq i64 %19, 3
  br i1 %cmp22, label %if.then.26, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %20 = load i64, i64* %n, align 8
  %shr = ashr i64 %20, 2
  %cmp24 = icmp eq i64 %shr, 0
  br i1 %cmp24, label %if.then.26, label %if.end.28

if.then.26:                                       ; preds = %lor.lhs.false, %for.end
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call27, i64* %retval
  br label %return

if.end.28:                                        ; preds = %lor.lhs.false
  %21 = load i64, i64* %n, align 8
  %shr29 = ashr i64 %21, 2
  %22 = load i64, i64* %gstring.addr, align 8
  %call30 = call i64 @ASIZE(i64 %22)
  %sub31 = sub nsw i64 %call30, 2
  %cmp32 = icmp slt i64 %shr29, %sub31
  br i1 %cmp32, label %if.then.34, label %if.end.37

if.then.34:                                       ; preds = %if.end.28
  %23 = load i64, i64* %gstring.addr, align 8
  %24 = load i64, i64* %n, align 8
  %shr35 = ashr i64 %24, 2
  %add = add nsw i64 %shr35, 2
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %23, i64 %add, i64 %call36)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %if.end.28
  %25 = load i64, i64* %gstring.addr, align 8
  %call38 = call i64 @AREF(i64 %25, i64 2)
  store i64 %call38, i64* %glyph, align 8
  %26 = load i64, i64* %glyph, align 8
  %call39 = call i64 @AREF(i64 %26, i64 0)
  %shr40 = ashr i64 %call39, 2
  store i64 %shr40, i64* %from, align 8
  %27 = load i64, i64* %glyph, align 8
  %call41 = call i64 @AREF(i64 %27, i64 1)
  %shr42 = ashr i64 %call41, 2
  store i64 %shr42, i64* %to, align 8
  %28 = load i64, i64* %from, align 8
  %cmp43 = icmp ne i64 %28, 0
  br i1 %cmp43, label %if.then.48, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %if.end.37
  %29 = load i64, i64* %to, align 8
  %30 = load i64, i64* %from, align 8
  %cmp46 = icmp slt i64 %29, %30
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %lor.lhs.false.45, %if.end.37
  br label %shaper_error

if.end.49:                                        ; preds = %lor.lhs.false.45
  store i64 1, i64* %i, align 8
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.88, %if.end.49
  %31 = load i64, i64* %i, align 8
  %32 = load i64, i64* %gstring.addr, align 8
  %call51 = call i64 @ASIZE(i64 %32)
  %sub52 = sub nsw i64 %call51, 2
  %cmp53 = icmp slt i64 %31, %sub52
  br i1 %cmp53, label %for.body.55, label %for.end.90

for.body.55:                                      ; preds = %for.cond.50
  %33 = load i64, i64* %gstring.addr, align 8
  %34 = load i64, i64* %i, align 8
  %add56 = add nsw i64 %34, 2
  %call57 = call i64 @AREF(i64 %33, i64 %add56)
  store i64 %call57, i64* %glyph, align 8
  %35 = load i64, i64* %glyph, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %35, %call58
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %for.body.55
  br label %for.end.90

if.end.62:                                        ; preds = %for.body.55
  %36 = load i64, i64* %glyph, align 8
  %call63 = call i64 @AREF(i64 %36, i64 0)
  %shr64 = ashr i64 %call63, 2
  %37 = load i64, i64* %glyph, align 8
  %call65 = call i64 @AREF(i64 %37, i64 1)
  %shr66 = ashr i64 %call65, 2
  %cmp67 = icmp sle i64 %shr64, %shr66
  br i1 %cmp67, label %land.lhs.true, label %if.then.82

land.lhs.true:                                    ; preds = %if.end.62
  %38 = load i64, i64* %glyph, align 8
  %call69 = call i64 @AREF(i64 %38, i64 0)
  %shr70 = ashr i64 %call69, 2
  %39 = load i64, i64* %from, align 8
  %cmp71 = icmp eq i64 %shr70, %39
  br i1 %cmp71, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %40 = load i64, i64* %glyph, align 8
  %call73 = call i64 @AREF(i64 %40, i64 1)
  %shr74 = ashr i64 %call73, 2
  %41 = load i64, i64* %to, align 8
  %cmp75 = icmp eq i64 %shr74, %41
  br i1 %cmp75, label %if.end.83, label %if.then.82

cond.false:                                       ; preds = %land.lhs.true
  %42 = load i64, i64* %glyph, align 8
  %call77 = call i64 @AREF(i64 %42, i64 0)
  %shr78 = ashr i64 %call77, 2
  %43 = load i64, i64* %to, align 8
  %add79 = add nsw i64 %43, 1
  %cmp80 = icmp eq i64 %shr78, %add79
  br i1 %cmp80, label %if.end.83, label %if.then.82

if.then.82:                                       ; preds = %cond.false, %cond.true, %if.end.62
  br label %shaper_error

if.end.83:                                        ; preds = %cond.false, %cond.true
  %44 = load i64, i64* %glyph, align 8
  %call84 = call i64 @AREF(i64 %44, i64 0)
  %shr85 = ashr i64 %call84, 2
  store i64 %shr85, i64* %from, align 8
  %45 = load i64, i64* %glyph, align 8
  %call86 = call i64 @AREF(i64 %45, i64 1)
  %shr87 = ashr i64 %call86, 2
  store i64 %shr87, i64* %to, align 8
  br label %for.inc.88

for.inc.88:                                       ; preds = %if.end.83
  %46 = load i64, i64* %i, align 8
  %inc89 = add nsw i64 %46, 1
  store i64 %inc89, i64* %i, align 8
  br label %for.cond.50

for.end.90:                                       ; preds = %if.then.61, %for.cond.50
  %47 = load i64, i64* %gstring.addr, align 8
  %48 = load i64, i64* %n, align 8
  %shr91 = ashr i64 %48, 2
  %call92 = call i64 @composition_gstring_put_cache(i64 %47, i64 %shr91)
  store i64 %call92, i64* %retval
  br label %return

shaper_error:                                     ; preds = %if.then.82, %if.then.48
  %call93 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call93, i64* %retval
  br label %return

return:                                           ; preds = %shaper_error, %for.end.90, %if.then.26, %if.then.8, %if.then.3
  %49 = load i64, i64* %retval
  ret i64 %49
}

declare zeroext i1 @composition_gstring_p(i64) #1

declare void @CHECK_FONT_OBJECT(i64) #1

declare i64 @larger_vector(i64, i64, i64) #1

declare i64 @composition_gstring_put_cache(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_variation_glyphs(i64 %font_object, i64 %character) #0 {
entry:
  %retval = alloca i64, align 8
  %font_object.addr = alloca i64, align 8
  %character.addr = alloca i64, align 8
  %variations = alloca [256 x i32], align 16
  %font = alloca %struct.font*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %val = alloca i64, align 8
  %vs = alloca i32, align 4
  %code = alloca i64, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  store i64 %character, i64* %character.addr, align 8
  %0 = load i64, i64* %font_object.addr, align 8
  call void @CHECK_FONT_OBJECT(i64 %0)
  %1 = load i64, i64* %character.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %1)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %character.addr, align 8
  %shr = ashr i64 %2, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %3 = load i64, i64* %character.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call1, i64 %3) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %font_object.addr, align 8
  %call2 = call %struct.font* @XFONT_OBJECT(i64 %6)
  store %struct.font* %call2, %struct.font** %font, align 8
  %7 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %7, i32 0, i32 18
  %8 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %get_variation_glyphs = getelementptr inbounds %struct.font_driver, %struct.font_driver* %8, i32 0, i32 24
  %9 = load i32 (%struct.font*, i32, i32*)*, i32 (%struct.font*, i32, i32*)** %get_variation_glyphs, align 8
  %tobool = icmp ne i32 (%struct.font*, i32, i32*)* %9, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %10 = load %struct.font*, %struct.font** %font, align 8
  %driver4 = getelementptr inbounds %struct.font, %struct.font* %10, i32 0, i32 18
  %11 = load %struct.font_driver*, %struct.font_driver** %driver4, align 8
  %get_variation_glyphs5 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %11, i32 0, i32 24
  %12 = load i32 (%struct.font*, i32, i32*)*, i32 (%struct.font*, i32, i32*)** %get_variation_glyphs5, align 8
  %13 = load %struct.font*, %struct.font** %font, align 8
  %14 = load i64, i64* %character.addr, align 8
  %shr6 = ashr i64 %14, 2
  %conv = trunc i64 %shr6 to i32
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i32 0
  %call7 = call i32 %12(%struct.font* %13, i32 %conv, i32* %arraydecay)
  store i32 %call7, i32* %n, align 4
  %15 = load i32, i32* %n, align 4
  %tobool8 = icmp ne i32 %15, 0
  br i1 %tobool8, label %if.end.11, label %if.then.9

if.then.9:                                        ; preds = %if.end
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call10, i64* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call12, i64* %val, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.11
  %16 = load i32, i32* %i, align 4
  %cmp13 = icmp slt i32 %16, 255
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %i, align 4
  %idxprom = sext i32 %17 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom
  %18 = load i32, i32* %arrayidx, align 4
  %tobool15 = icmp ne i32 %18, 0
  br i1 %tobool15, label %if.then.16, label %if.end.68

if.then.16:                                       ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %19, 16
  br i1 %cmp17, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %if.then.16
  %20 = load i32, i32* %i, align 4
  %add = add nsw i32 65024, %20
  br label %cond.end.22

cond.false.20:                                    ; preds = %if.then.16
  %21 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %21, 16
  %add21 = add nsw i32 917760, %sub
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.20, %cond.true.19
  %cond = phi i32 [ %add, %cond.true.19 ], [ %add21, %cond.false.20 ]
  store i32 %cond, i32* %vs, align 4
  %22 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %22 to i64
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom23
  %23 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp ule i32 0, %23
  br i1 %cmp25, label %land.lhs.true.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.22
  %24 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %24 to i64
  %arrayidx28 = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom27
  %25 = load i32, i32* %arrayidx28, align 4
  %conv29 = zext i32 %25 to i64
  %cmp30 = icmp sle i64 -2305843009213693952, %conv29
  br i1 %cmp30, label %land.lhs.true.32, label %cond.false.43

land.lhs.true.32:                                 ; preds = %lor.lhs.false, %cond.end.22
  %26 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %26 to i64
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom33
  %27 = load i32, i32* %arrayidx34, align 4
  %conv35 = zext i32 %27 to i64
  %cmp36 = icmp sle i64 %conv35, 2305843009213693951
  br i1 %cmp36, label %cond.true.38, label %cond.false.43

cond.true.38:                                     ; preds = %land.lhs.true.32
  %28 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %28 to i64
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom39
  %29 = load i32, i32* %arrayidx40, align 4
  %conv41 = zext i32 %29 to i64
  %shl = shl i64 %conv41, 2
  %add42 = add i64 %shl, 2
  br label %cond.end.61

cond.false.43:                                    ; preds = %land.lhs.true.32, %lor.lhs.false
  %30 = load i32, i32* %i, align 4
  %idxprom44 = sext i32 %30 to i64
  %arrayidx45 = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom44
  %31 = load i32, i32* %arrayidx45, align 4
  %mul = mul i32 0, %31
  %sub46 = sub i32 %mul, 1
  %cmp47 = icmp ult i32 %sub46, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.54

cond.true.49:                                     ; preds = %cond.false.43
  %32 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %32 to i64
  %arrayidx51 = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom50
  %33 = load i32, i32* %arrayidx51, align 4
  %conv52 = zext i32 %33 to i64
  %call53 = call i64 @intbig_to_lisp(i64 %conv52)
  br label %cond.end.59

cond.false.54:                                    ; preds = %cond.false.43
  %34 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %34 to i64
  %arrayidx56 = getelementptr inbounds [256 x i32], [256 x i32]* %variations, i32 0, i64 %idxprom55
  %35 = load i32, i32* %arrayidx56, align 4
  %conv57 = zext i32 %35 to i64
  %call58 = call i64 @uintbig_to_lisp(i64 %conv57)
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.54, %cond.true.49
  %cond60 = phi i64 [ %call53, %cond.true.49 ], [ %call58, %cond.false.54 ]
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.end.59, %cond.true.38
  %cond62 = phi i64 [ %add42, %cond.true.38 ], [ %cond60, %cond.end.59 ]
  store i64 %cond62, i64* %code, align 8
  %36 = load i32, i32* %vs, align 4
  %conv63 = sext i32 %36 to i64
  %shl64 = shl i64 %conv63, 2
  %add65 = add i64 %shl64, 2
  %37 = load i64, i64* %code, align 8
  %call66 = call i64 @Fcons(i64 %add65, i64 %37)
  %38 = load i64, i64* %val, align 8
  %call67 = call i64 @Fcons(i64 %call66, i64 %38)
  store i64 %call67, i64* %val, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %cond.end.61, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.68
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load i64, i64* %val, align 8
  store i64 %40, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.9, %if.then
  %41 = load i64, i64* %retval
  ret i64 %41
}

; Function Attrs: nounwind uwtable
define i64 @Finternal_char_font(i64 %position, i64 %ch) #0 {
entry:
  %retval = alloca i64, align 8
  %position.addr = alloca i64, align 8
  %ch.addr = alloca i64, align 8
  %pos = alloca i64, align 8
  %pos_byte = alloca i64, align 8
  %dummy = alloca i64, align 8
  %face_id = alloca i32, align 4
  %c = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %window = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %face = alloca %struct.face*, align 8
  %code = alloca i32, align 4
  %font_object = alloca i64, align 8
  store i64 %position, i64* %position.addr, align 8
  store i64 %ch, i64* %ch.addr, align 8
  %0 = load i64, i64* %position.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %ch.addr, align 8
  %call1 = call zeroext i1 @NATNUMP(i64 %1)
  br i1 %call1, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %2 = load i64, i64* %ch.addr, align 8
  %shr = ashr i64 %2, 2
  %cmp2 = icmp sle i64 %shr, 4194303
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  %call3 = call i64 @builtin_lisp_symbol(i32 260)
  %3 = load i64, i64* %ch.addr, align 8
  %4 = call i64 @wrong_type_argument(i64 %call3, i64 %3) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %5, %cond.true
  %6 = load i64, i64* %ch.addr, align 8
  %shr4 = ashr i64 %6, 2
  %conv = trunc i64 %shr4 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  store %struct.frame* %9, %struct.frame** %f, align 8
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %call5 = call i32 @lookup_basic_face(%struct.frame* %10, i32 0)
  store i32 %call5, i32* %face_id, align 4
  store i64 -1, i64* %pos, align 8
  br label %if.end.80

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %11 = load i64, i64* %position.addr, align 8
  %and = and i64 %11, 7
  %conv6 = trunc i64 %and to i32
  %cmp7 = icmp eq i32 %conv6, 1
  br i1 %cmp7, label %land.lhs.true.9, label %if.else.16

land.lhs.true.9:                                  ; preds = %do.body
  %12 = load i64, i64* %position.addr, align 8
  %call10 = call i32 @XMISCTYPE(i64 %12)
  %cmp11 = icmp eq i32 %call10, 24236
  br i1 %cmp11, label %if.then.13, label %if.else.16

if.then.13:                                       ; preds = %land.lhs.true.9
  %13 = load i64, i64* %position.addr, align 8
  %call14 = call i64 @marker_position(i64 %13)
  %call15 = call i64 @make_natnum(i64 %call14)
  store i64 %call15, i64* %position.addr, align 8
  br label %if.end

if.else.16:                                       ; preds = %land.lhs.true.9, %do.body
  %14 = load i64, i64* %position.addr, align 8
  %and17 = and i64 %14, 7
  %conv18 = trunc i64 %and17 to i32
  %and19 = and i32 %conv18, -5
  %cmp20 = icmp eq i32 %and19, 2
  br i1 %cmp20, label %cond.true.22, label %cond.false.23

cond.true.22:                                     ; preds = %if.else.16
  br label %cond.end.25

cond.false.23:                                    ; preds = %if.else.16
  %call24 = call i64 @builtin_lisp_symbol(i32 558)
  %15 = load i64, i64* %position.addr, align 8
  %16 = call i64 @wrong_type_argument(i64 %call24, i64 %15) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.25

cond.end.25:                                      ; preds = %17, %cond.true.22
  br label %if.end

if.end:                                           ; preds = %cond.end.25, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end
  %18 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 77
  %19 = load i64, i64* %begv, align 8
  %20 = load i64, i64* %position.addr, align 8
  %shr26 = ashr i64 %20, 2
  %cmp27 = icmp sle i64 %19, %shr26
  br i1 %cmp27, label %land.lhs.true.29, label %if.then.33

land.lhs.true.29:                                 ; preds = %do.end
  %21 = load i64, i64* %position.addr, align 8
  %shr30 = ashr i64 %21, 2
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 79
  %23 = load i64, i64* %zv, align 8
  %cmp31 = icmp slt i64 %shr30, %23
  br i1 %cmp31, label %if.end.38, label %if.then.33

if.then.33:                                       ; preds = %land.lhs.true.29, %do.end
  %24 = load i64, i64* %position.addr, align 8
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv34 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 77
  %26 = load i64, i64* %begv34, align 8
  %shl = shl i64 %26, 2
  %add = add i64 %shl, 2
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv35 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 79
  %28 = load i64, i64* %zv35, align 8
  %shl36 = shl i64 %28, 2
  %add37 = add i64 %shl36, 2
  call void @args_out_of_range_3(i64 %24, i64 %add, i64 %add37) #7
  unreachable

if.end.38:                                        ; preds = %land.lhs.true.29
  %29 = load i64, i64* %position.addr, align 8
  %shr39 = ashr i64 %29, 2
  store i64 %shr39, i64* %pos, align 8
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %31 = load i64, i64* %pos, align 8
  %call40 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %30, i64 %31)
  store i64 %call40, i64* %pos_byte, align 8
  %32 = load i64, i64* %ch.addr, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp42 = icmp eq i64 %32, %call41
  br i1 %cmp42, label %if.then.44, label %if.else.63

if.then.44:                                       ; preds = %if.end.38
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 39
  %34 = load i64, i64* %enable_multibyte_characters_, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp46 = icmp eq i64 %34, %call45
  br i1 %cmp46, label %cond.false.50, label %cond.true.48

cond.true.48:                                     ; preds = %if.then.44
  %35 = load i64, i64* %pos_byte, align 8
  %call49 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %35)
  br label %cond.end.61

cond.false.50:                                    ; preds = %if.then.44
  %36 = load i64, i64* %pos_byte, align 8
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 73
  %38 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %38, i32 0, i32 3
  %39 = load i64, i64* %gpt_byte, align 8
  %cmp51 = icmp sge i64 %36, %39
  br i1 %cmp51, label %cond.true.53, label %cond.false.55

cond.true.53:                                     ; preds = %cond.false.50
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text54 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 73
  %41 = load %struct.buffer_text*, %struct.buffer_text** %text54, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %41, i32 0, i32 5
  %42 = load i64, i64* %gap_size, align 8
  br label %cond.end.56

cond.false.55:                                    ; preds = %cond.false.50
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.55, %cond.true.53
  %cond = phi i64 [ %42, %cond.true.53 ], [ 0, %cond.false.55 ]
  %43 = load i64, i64* %pos_byte, align 8
  %add57 = add nsw i64 %cond, %43
  %44 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text58 = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 73
  %45 = load %struct.buffer_text*, %struct.buffer_text** %text58, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %45, i32 0, i32 0
  %46 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %46, i64 %add57
  %add.ptr59 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %47 = load i8, i8* %add.ptr59, align 1
  %conv60 = zext i8 %47 to i32
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.end.56, %cond.true.48
  %cond62 = phi i32 [ %call49, %cond.true.48 ], [ %conv60, %cond.end.56 ]
  store i32 %cond62, i32* %c, align 4
  br label %if.end.66

if.else.63:                                       ; preds = %if.end.38
  %48 = load i64, i64* %ch.addr, align 8
  call void @CHECK_NATNUM(i64 %48)
  %49 = load i64, i64* %ch.addr, align 8
  %shr64 = ashr i64 %49, 2
  %conv65 = trunc i64 %shr64 to i32
  store i32 %conv65, i32* %c, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %cond.end.61
  %call67 = call i64 @Fcurrent_buffer()
  %call68 = call i64 @builtin_lisp_symbol(i32 0)
  %call69 = call i64 @Fget_buffer_window(i64 %call67, i64 %call68)
  store i64 %call69, i64* %window, align 8
  %50 = load i64, i64* %window, align 8
  %call70 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp71 = icmp eq i64 %50, %call70
  br i1 %cmp71, label %if.then.73, label %if.end.75

if.then.73:                                       ; preds = %if.end.66
  %call74 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call74, i64* %retval
  br label %return

if.end.75:                                        ; preds = %if.end.66
  %51 = load i64, i64* %window, align 8
  %call76 = call %struct.window* @XWINDOW(i64 %51)
  store %struct.window* %call76, %struct.window** %w, align 8
  %52 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 1
  %53 = load i64, i64* %frame, align 8
  %sub77 = sub nsw i64 %53, 5
  %54 = inttoptr i64 %sub77 to i8*
  %55 = bitcast i8* %54 to %struct.frame*
  store %struct.frame* %55, %struct.frame** %f, align 8
  %56 = load %struct.window*, %struct.window** %w, align 8
  %57 = load i64, i64* %pos, align 8
  %58 = load i64, i64* %pos, align 8
  %add78 = add nsw i64 %58, 100
  %call79 = call i32 @face_at_buffer_position(%struct.window* %56, i64 %57, i64* %dummy, i64 %add78, i1 zeroext false, i32 -1)
  store i32 %call79, i32* %face_id, align 4
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.75, %cond.end
  br i1 true, label %cond.true.81, label %cond.false.85

cond.true.81:                                     ; preds = %if.end.80
  %59 = load i32, i32* %c, align 4
  %add82 = add i32 %59, 0
  %cmp83 = icmp ule i32 %add82, 4194303
  br i1 %cmp83, label %if.end.92, label %if.then.90

cond.false.85:                                    ; preds = %if.end.80
  %60 = load i32, i32* %c, align 4
  %conv86 = sext i32 %60 to i64
  %add87 = add i64 %conv86, 0
  %cmp88 = icmp ule i64 %add87, 4194303
  br i1 %cmp88, label %if.end.92, label %if.then.90

if.then.90:                                       ; preds = %cond.false.85, %cond.true.81
  %call91 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call91, i64* %retval
  br label %return

if.end.92:                                        ; preds = %cond.false.85, %cond.true.81
  %61 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 26
  %62 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %62, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp93 = icmp eq i32 %bf.cast, 2
  br i1 %cmp93, label %if.end.97, label %if.then.95

if.then.95:                                       ; preds = %if.end.92
  %63 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 61
  %64 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %65 = load i32, i32* %c, align 4
  %call96 = call i64 @terminal_glyph_code(%struct.terminal* %64, i32 %65)
  store i64 %call96, i64* %retval
  br label %return

if.end.97:                                        ; preds = %if.end.92
  %66 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %66, i32 0, i32 20
  %67 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %67, i32 0, i32 4
  %68 = load i32, i32* %used, align 4
  %cmp98 = icmp eq i32 %68, 0
  br i1 %cmp98, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %if.end.97
  %69 = load %struct.frame*, %struct.frame** %f, align 8
  call void @recompute_basic_faces(%struct.frame* %69)
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.100, %if.end.97
  %70 = load %struct.frame*, %struct.frame** %f, align 8
  br i1 true, label %cond.true.102, label %cond.false.109

cond.true.102:                                    ; preds = %if.end.101
  %71 = load i32, i32* %face_id, align 4
  %add103 = add i32 %71, 0
  %72 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache104 = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 20
  %73 = load %struct.face_cache*, %struct.face_cache** %face_cache104, align 8
  %used105 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %73, i32 0, i32 4
  %74 = load i32, i32* %used105, align 4
  %add106 = add i32 %74, 0
  %cmp107 = icmp ult i32 %add103, %add106
  br i1 %cmp107, label %cond.true.118, label %cond.false.120

cond.false.109:                                   ; preds = %if.end.101
  %75 = load i32, i32* %face_id, align 4
  %conv110 = sext i32 %75 to i64
  %add111 = add i64 %conv110, 0
  %76 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache112 = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 20
  %77 = load %struct.face_cache*, %struct.face_cache** %face_cache112, align 8
  %used113 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %77, i32 0, i32 4
  %78 = load i32, i32* %used113, align 4
  %conv114 = sext i32 %78 to i64
  %add115 = add i64 %conv114, 0
  %cmp116 = icmp ult i64 %add111, %add115
  br i1 %cmp116, label %cond.true.118, label %cond.false.120

cond.true.118:                                    ; preds = %cond.false.109, %cond.true.102
  %79 = load i32, i32* %face_id, align 4
  %idxprom = sext i32 %79 to i64
  %80 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache119 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 20
  %81 = load %struct.face_cache*, %struct.face_cache** %face_cache119, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %81, i32 0, i32 2
  %82 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %82, i64 %idxprom
  %83 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end.121

cond.false.120:                                   ; preds = %cond.false.109, %cond.true.102
  br label %cond.end.121

cond.end.121:                                     ; preds = %cond.false.120, %cond.true.118
  %cond122 = phi %struct.face* [ %83, %cond.true.118 ], [ null, %cond.false.120 ]
  %84 = load i32, i32* %c, align 4
  %85 = load i64, i64* %pos, align 8
  %call123 = call i64 @builtin_lisp_symbol(i32 0)
  %call124 = call i32 @face_for_char(%struct.frame* %70, %struct.face* %cond122, i32 %84, i64 %85, i64 %call123)
  store i32 %call124, i32* %face_id, align 4
  br i1 true, label %cond.true.125, label %cond.false.132

cond.true.125:                                    ; preds = %cond.end.121
  %86 = load i32, i32* %face_id, align 4
  %add126 = add i32 %86, 0
  %87 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache127 = getelementptr inbounds %struct.frame, %struct.frame* %87, i32 0, i32 20
  %88 = load %struct.face_cache*, %struct.face_cache** %face_cache127, align 8
  %used128 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %88, i32 0, i32 4
  %89 = load i32, i32* %used128, align 4
  %add129 = add i32 %89, 0
  %cmp130 = icmp ult i32 %add126, %add129
  br i1 %cmp130, label %cond.true.141, label %cond.false.146

cond.false.132:                                   ; preds = %cond.end.121
  %90 = load i32, i32* %face_id, align 4
  %conv133 = sext i32 %90 to i64
  %add134 = add i64 %conv133, 0
  %91 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache135 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 20
  %92 = load %struct.face_cache*, %struct.face_cache** %face_cache135, align 8
  %used136 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %92, i32 0, i32 4
  %93 = load i32, i32* %used136, align 4
  %conv137 = sext i32 %93 to i64
  %add138 = add i64 %conv137, 0
  %cmp139 = icmp ult i64 %add134, %add138
  br i1 %cmp139, label %cond.true.141, label %cond.false.146

cond.true.141:                                    ; preds = %cond.false.132, %cond.true.125
  %94 = load i32, i32* %face_id, align 4
  %idxprom142 = sext i32 %94 to i64
  %95 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache143 = getelementptr inbounds %struct.frame, %struct.frame* %95, i32 0, i32 20
  %96 = load %struct.face_cache*, %struct.face_cache** %face_cache143, align 8
  %faces_by_id144 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %96, i32 0, i32 2
  %97 = load %struct.face**, %struct.face*** %faces_by_id144, align 8
  %arrayidx145 = getelementptr inbounds %struct.face*, %struct.face** %97, i64 %idxprom142
  %98 = load %struct.face*, %struct.face** %arrayidx145, align 8
  br label %cond.end.147

cond.false.146:                                   ; preds = %cond.false.132, %cond.true.125
  br label %cond.end.147

cond.end.147:                                     ; preds = %cond.false.146, %cond.true.141
  %cond148 = phi %struct.face* [ %98, %cond.true.141 ], [ null, %cond.false.146 ]
  store %struct.face* %cond148, %struct.face** %face, align 8
  %99 = load %struct.face*, %struct.face** %face, align 8
  %font = getelementptr inbounds %struct.face, %struct.face* %99, i32 0, i32 10
  %100 = load %struct.font*, %struct.font** %font, align 8
  %tobool = icmp ne %struct.font* %100, null
  br i1 %tobool, label %if.end.151, label %if.then.149

if.then.149:                                      ; preds = %cond.end.147
  %call150 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call150, i64* %retval
  br label %return

if.end.151:                                       ; preds = %cond.end.147
  %101 = load %struct.face*, %struct.face** %face, align 8
  %font152 = getelementptr inbounds %struct.face, %struct.face* %101, i32 0, i32 10
  %102 = load %struct.font*, %struct.font** %font152, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %102, i32 0, i32 18
  %103 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %encode_char = getelementptr inbounds %struct.font_driver, %struct.font_driver* %103, i32 0, i32 12
  %104 = load i32 (%struct.font*, i32)*, i32 (%struct.font*, i32)** %encode_char, align 8
  %105 = load %struct.face*, %struct.face** %face, align 8
  %font153 = getelementptr inbounds %struct.face, %struct.face* %105, i32 0, i32 10
  %106 = load %struct.font*, %struct.font** %font153, align 8
  %107 = load i32, i32* %c, align 4
  %call154 = call i32 %104(%struct.font* %106, i32 %107)
  store i32 %call154, i32* %code, align 4
  %108 = load i32, i32* %code, align 4
  %cmp155 = icmp eq i32 %108, -1
  br i1 %cmp155, label %if.then.157, label %if.end.159

if.then.157:                                      ; preds = %if.end.151
  %call158 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call158, i64* %retval
  br label %return

if.end.159:                                       ; preds = %if.end.151
  %109 = load %struct.face*, %struct.face** %face, align 8
  %font160 = getelementptr inbounds %struct.face, %struct.face* %109, i32 0, i32 10
  %110 = load %struct.font*, %struct.font** %font160, align 8
  %111 = bitcast %struct.font* %110 to i8*
  %call161 = call i64 @make_lisp_ptr(i8* %111, i32 5)
  store i64 %call161, i64* %font_object, align 8
  %112 = load i64, i64* %font_object, align 8
  %113 = load i32, i32* %code, align 4
  %cmp162 = icmp ule i32 0, %113
  br i1 %cmp162, label %land.lhs.true.167, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.159
  %114 = load i32, i32* %code, align 4
  %conv164 = zext i32 %114 to i64
  %cmp165 = icmp sle i64 -2305843009213693952, %conv164
  br i1 %cmp165, label %land.lhs.true.167, label %cond.false.175

land.lhs.true.167:                                ; preds = %lor.lhs.false, %if.end.159
  %115 = load i32, i32* %code, align 4
  %conv168 = zext i32 %115 to i64
  %cmp169 = icmp sle i64 %conv168, 2305843009213693951
  br i1 %cmp169, label %cond.true.171, label %cond.false.175

cond.true.171:                                    ; preds = %land.lhs.true.167
  %116 = load i32, i32* %code, align 4
  %conv172 = zext i32 %116 to i64
  %shl173 = shl i64 %conv172, 2
  %add174 = add i64 %shl173, 2
  br label %cond.end.187

cond.false.175:                                   ; preds = %land.lhs.true.167, %lor.lhs.false
  %117 = load i32, i32* %code, align 4
  %mul = mul i32 0, %117
  %sub176 = sub i32 %mul, 1
  %cmp177 = icmp ult i32 %sub176, 0
  br i1 %cmp177, label %cond.true.179, label %cond.false.182

cond.true.179:                                    ; preds = %cond.false.175
  %118 = load i32, i32* %code, align 4
  %conv180 = zext i32 %118 to i64
  %call181 = call i64 @intbig_to_lisp(i64 %conv180)
  br label %cond.end.185

cond.false.182:                                   ; preds = %cond.false.175
  %119 = load i32, i32* %code, align 4
  %conv183 = zext i32 %119 to i64
  %call184 = call i64 @uintbig_to_lisp(i64 %conv183)
  br label %cond.end.185

cond.end.185:                                     ; preds = %cond.false.182, %cond.true.179
  %cond186 = phi i64 [ %call181, %cond.true.179 ], [ %call184, %cond.false.182 ]
  br label %cond.end.187

cond.end.187:                                     ; preds = %cond.end.185, %cond.true.171
  %cond188 = phi i64 [ %add174, %cond.true.171 ], [ %cond186, %cond.end.185 ]
  %call189 = call i64 @Fcons(i64 %112, i64 %cond188)
  store i64 %call189, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.187, %if.then.157, %if.then.149, %if.then.95, %if.then.90, %if.then.73
  %120 = load i64, i64* %retval
  ret i64 %120
}

declare i32 @lookup_basic_face(%struct.frame*, i32) #1

declare i32 @XMISCTYPE(i64) #1

declare i64 @make_natnum(i64) #1

declare i64 @marker_position(i64) #1

; Function Attrs: noreturn
declare void @args_out_of_range_3(i64, i64, i64) #2

declare i64 @buf_charpos_to_bytepos(%struct.buffer*, i64) #1

declare i32 @FETCH_MULTIBYTE_CHAR(i64) #1

declare void @CHECK_NATNUM(i64) #1

declare i64 @Fget_buffer_window(i64, i64) #1

declare i64 @Fcurrent_buffer() #1

declare %struct.window* @XWINDOW(i64) #1

declare i64 @terminal_glyph_code(%struct.terminal*, i32) #1

declare void @recompute_basic_faces(%struct.frame*) #1

declare i32 @face_for_char(%struct.frame*, %struct.face*, i32, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fopen_font(i64 %font_entity, i64 %size, i64 %frame) #0 {
entry:
  %font_entity.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %isize = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %font_entity, i64* %font_entity.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load i64, i64* %font_entity.addr, align 8
  call void @CHECK_FONT_ENTITY(i64 %1)
  %2 = load i64, i64* %size.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %font_entity.addr, align 8
  %call2 = call i64 @AREF(i64 %3, i64 8)
  %shr = ashr i64 %call2, 2
  store i64 %shr, i64* %isize, align 8
  br label %if.end.20

if.else:                                          ; preds = %entry
  %4 = load i64, i64* %size.addr, align 8
  call void @CHECK_NUMBER_OR_FLOAT(i64 %4)
  %5 = load i64, i64* %size.addr, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv, 7
  br i1 %cmp3, label %if.then.5, label %if.else.8

if.then.5:                                        ; preds = %if.else
  %6 = load i64, i64* %size.addr, align 8
  %call6 = call double @XFLOAT_DATA(i64 %6)
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 44
  %9 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %resy = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 8
  %10 = load double, double* %resy, align 8
  %mul = fmul double %call6, %10
  %div = fdiv double %mul, 7.227000e+01
  %add = fadd double %div, 5.000000e-01
  %conv7 = fptosi double %add to i64
  store i64 %conv7, i64* %isize, align 8
  br label %if.end

if.else.8:                                        ; preds = %if.else
  %11 = load i64, i64* %size.addr, align 8
  %shr9 = ashr i64 %11, 2
  store i64 %shr9, i64* %isize, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.8, %if.then.5
  %12 = load i64, i64* %isize, align 8
  %cmp10 = icmp sle i64 -2147483648, %12
  br i1 %cmp10, label %land.lhs.true, label %if.then.14

land.lhs.true:                                    ; preds = %if.end
  %13 = load i64, i64* %isize, align 8
  %cmp12 = icmp sle i64 %13, 2147483647
  br i1 %cmp12, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true, %if.end
  %14 = load i64, i64* %font_entity.addr, align 8
  %15 = load i64, i64* %size.addr, align 8
  call void @args_out_of_range(i64 %14, i64 %15) #7
  unreachable

if.end.15:                                        ; preds = %land.lhs.true
  %16 = load i64, i64* %isize, align 8
  %cmp16 = icmp eq i64 %16, 0
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.15
  store i64 120, i64* %isize, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.end.15
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.then
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %18 = load i64, i64* %font_entity.addr, align 8
  %19 = load i64, i64* %isize, align 8
  %conv21 = trunc i64 %19 to i32
  %call22 = call i64 @font_open_entity(%struct.frame* %17, i64 %18, i32 %conv21)
  ret i64 %call22
}

declare void @CHECK_FONT_ENTITY(i64) #1

declare void @CHECK_NUMBER_OR_FLOAT(i64) #1

; Function Attrs: noreturn
declare void @args_out_of_range(i64, i64) #2

; Function Attrs: nounwind uwtable
define i64 @Fclose_font(i64 %font_object, i64 %frame) #0 {
entry:
  %font_object.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %font_object.addr, align 8
  call void @CHECK_FONT_OBJECT(i64 %0)
  %1 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %1)
  %2 = load i64, i64* %font_object.addr, align 8
  call void @font_close_object(%struct.frame* %call, i64 %2)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define internal void @font_close_object(%struct.frame* %f, i64 %font_object) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %font_object.addr = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  %0 = load i64, i64* %font_object.addr, align 8
  %call = call %struct.font* @XFONT_OBJECT(i64 %0)
  store %struct.font* %call, %struct.font** %font, align 8
  %1 = load i64, i64* %font_object.addr, align 8
  %call1 = call i64 @AREF(i64 %1, i64 0)
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call1, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp4 = icmp eq i64 %2, %call3
  br i1 %cmp4, label %if.end.7, label %if.then.5

if.then.5:                                        ; preds = %do.body
  %3 = load i64, i64* %font_object.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  call void @font_add_log(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i64 %3, i64 %call6)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %4 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %4, i32 0, i32 18
  %5 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %close = getelementptr inbounds %struct.font_driver, %struct.font_driver* %5, i32 0, i32 8
  %6 = load void (%struct.font*)*, void (%struct.font*)** %close, align 8
  %7 = load %struct.font*, %struct.font** %font, align 8
  call void %6(%struct.font* %7)
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 44
  %10 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %n_fonts = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 28
  %11 = load i32, i32* %n_fonts, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %n_fonts, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fquery_font(i64 %font_object) #0 {
entry:
  %font_object.addr = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  %val = alloca i64, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  %0 = load i64, i64* %font_object.addr, align 8
  %call = call %struct.font* @CHECK_FONT_GET_OBJECT(i64 %0)
  store %struct.font* %call, %struct.font** %font, align 8
  %call1 = call i64 @make_uninit_vector(i64 9)
  store i64 %call1, i64* %val, align 8
  %1 = load i64, i64* %val, align 8
  %2 = load i64, i64* %font_object.addr, align 8
  %call2 = call i64 @AREF(i64 %2, i64 14)
  call void @ASET(i64 %1, i64 0, i64 %call2)
  %3 = load i64, i64* %val, align 8
  %4 = load i64, i64* %font_object.addr, align 8
  %call3 = call i64 @AREF(i64 %4, i64 16)
  call void @ASET(i64 %3, i64 1, i64 %call3)
  %5 = load i64, i64* %val, align 8
  %6 = load %struct.font*, %struct.font** %font, align 8
  %pixel_size = getelementptr inbounds %struct.font, %struct.font* %6, i32 0, i32 4
  %7 = load i32, i32* %pixel_size, align 4
  %conv = sext i32 %7 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  call void @ASET(i64 %5, i64 2, i64 %add)
  %8 = load i64, i64* %val, align 8
  %9 = load %struct.font*, %struct.font** %font, align 8
  %max_width = getelementptr inbounds %struct.font, %struct.font* %9, i32 0, i32 3
  %10 = load i32, i32* %max_width, align 4
  %conv4 = sext i32 %10 to i64
  %shl5 = shl i64 %conv4, 2
  %add6 = add i64 %shl5, 2
  call void @ASET(i64 %8, i64 3, i64 %add6)
  %11 = load i64, i64* %val, align 8
  %12 = load %struct.font*, %struct.font** %font, align 8
  %ascent = getelementptr inbounds %struct.font, %struct.font* %12, i32 0, i32 8
  %13 = load i32, i32* %ascent, align 4
  %conv7 = sext i32 %13 to i64
  %shl8 = shl i64 %conv7, 2
  %add9 = add i64 %shl8, 2
  call void @ASET(i64 %11, i64 4, i64 %add9)
  %14 = load i64, i64* %val, align 8
  %15 = load %struct.font*, %struct.font** %font, align 8
  %descent = getelementptr inbounds %struct.font, %struct.font* %15, i32 0, i32 9
  %16 = load i32, i32* %descent, align 4
  %conv10 = sext i32 %16 to i64
  %shl11 = shl i64 %conv10, 2
  %add12 = add i64 %shl11, 2
  call void @ASET(i64 %14, i64 5, i64 %add12)
  %17 = load i64, i64* %val, align 8
  %18 = load %struct.font*, %struct.font** %font, align 8
  %space_width = getelementptr inbounds %struct.font, %struct.font* %18, i32 0, i32 6
  %19 = load i32, i32* %space_width, align 4
  %conv13 = sext i32 %19 to i64
  %shl14 = shl i64 %conv13, 2
  %add15 = add i64 %shl14, 2
  call void @ASET(i64 %17, i64 6, i64 %add15)
  %20 = load i64, i64* %val, align 8
  %21 = load %struct.font*, %struct.font** %font, align 8
  %average_width = getelementptr inbounds %struct.font, %struct.font* %21, i32 0, i32 7
  %22 = load i32, i32* %average_width, align 4
  %conv16 = sext i32 %22 to i64
  %shl17 = shl i64 %conv16, 2
  %add18 = add i64 %shl17, 2
  call void @ASET(i64 %20, i64 7, i64 %add18)
  %23 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %23, i32 0, i32 18
  %24 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %otf_capability = getelementptr inbounds %struct.font_driver, %struct.font_driver* %24, i32 0, i32 18
  %25 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability, align 8
  %tobool = icmp ne i64 (%struct.font*)* %25, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %26 = load i64, i64* %val, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 721)
  %27 = load %struct.font*, %struct.font** %font, align 8
  %driver20 = getelementptr inbounds %struct.font, %struct.font* %27, i32 0, i32 18
  %28 = load %struct.font_driver*, %struct.font_driver** %driver20, align 8
  %otf_capability21 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %28, i32 0, i32 18
  %29 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability21, align 8
  %30 = load %struct.font*, %struct.font** %font, align 8
  %call22 = call i64 %29(%struct.font* %30)
  %call23 = call i64 @Fcons(i64 %call19, i64 %call22)
  call void @ASET(i64 %26, i64 8, i64 %call23)
  br label %if.end

if.else:                                          ; preds = %entry
  %31 = load i64, i64* %val, align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %31, i64 8, i64 %call24)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %32 = load i64, i64* %val, align 8
  ret i64 %32
}

declare %struct.font* @CHECK_FONT_GET_OBJECT(i64) #1

declare i64 @make_uninit_vector(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_get_glyphs(i64 %font_object, i64 %from, i64 %to, i64 %object) #0 {
entry:
  %retval = alloca i64, align 8
  %font_object.addr = alloca i64, align 8
  %from.addr = alloca i64, align 8
  %to.addr = alloca i64, align 8
  %object.addr = alloca i64, align 8
  %font = alloca %struct.font*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %chars = alloca i64*, align 8
  %vec = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %charpos = alloca i64, align 8
  %bytepos = alloca i64, align 8
  %alloca_nbytes = alloca i64, align 8
  %arg_ = alloca i64, align 8
  %c = alloca i32, align 4
  %chp = alloca i8*, align 8
  %chlen = alloca i32, align 4
  %p = alloca i8*, align 8
  %ifrom = alloca i64, align 8
  %ito = alloca i64, align 8
  %alloca_nbytes2289 = alloca i64, align 8
  %arg_4473 = alloca i64, align 8
  %c4482 = alloca i32, align 4
  %ifrom4630 = alloca i64, align 8
  %ito4631 = alloca i64, align 8
  %elt = alloca i64, align 8
  %g = alloca i64, align 8
  %c4669 = alloca i32, align 4
  %code = alloca i32, align 4
  %metrics = alloca %struct.font_metrics, align 2
  store i64 %font_object, i64* %font_object.addr, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %to, i64* %to.addr, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %font_object.addr, align 8
  %call = call %struct.font* @CHECK_FONT_GET_OBJECT(i64 %0)
  store %struct.font* %call, %struct.font** %font, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call1 = call i64 @SPECPDL_INDEX()
  store i64 %call1, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %1 = load i64, i64* %object.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call2
  br i1 %cmp, label %if.then, label %if.else.2278

if.then:                                          ; preds = %entry
  call void @validate_region(i64* %from.addr, i64* %to.addr)
  %2 = load i64, i64* %from.addr, align 8
  %3 = load i64, i64* %to.addr, align 8
  %cmp3 = icmp eq i64 %2, %3
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call5, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load i64, i64* %to.addr, align 8
  %shr = ashr i64 %4, 2
  %5 = load i64, i64* %from.addr, align 8
  %shr6 = ashr i64 %5, 2
  %sub = sub nsw i64 %shr, %shr6
  store i64 %sub, i64* %len, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  br i1 false, label %cond.true, label %cond.false.479

cond.true:                                        ; preds = %do.body
  br i1 false, label %cond.true.7, label %cond.false.264

cond.true.7:                                      ; preds = %cond.true
  %6 = load i64, i64* %len, align 8
  %conv = trunc i64 %6 to i8
  %conv8 = sext i8 %conv to i32
  %add = add nsw i32 0, %conv8
  %mul = mul nsw i32 0, %add
  %sub9 = sub nsw i32 %mul, 1
  %cmp10 = icmp slt i32 %sub9, 0
  br i1 %cmp10, label %cond.true.12, label %cond.false

cond.true.12:                                     ; preds = %cond.true.7
  %7 = load i64, i64* %len, align 8
  %conv13 = trunc i64 %7 to i8
  %conv14 = sext i8 %conv13 to i32
  %add15 = add nsw i32 0, %conv14
  %mul16 = mul nsw i32 0, %add15
  %add17 = add nsw i32 %mul16, 0
  %neg = xor i32 %add17, -1
  %cmp18 = icmp eq i32 %neg, -1
  %conv19 = zext i1 %cmp18 to i32
  %sub20 = sub nsw i32 0, %conv19
  %8 = load i64, i64* %len, align 8
  %conv21 = trunc i64 %8 to i8
  %conv22 = sext i8 %conv21 to i32
  %add23 = add nsw i32 0, %conv22
  %mul24 = mul nsw i32 0, %add23
  %add25 = add nsw i32 %mul24, 1
  %shl = shl i32 %add25, 30
  %sub26 = sub nsw i32 %shl, 1
  %mul27 = mul nsw i32 %sub26, 2
  %add28 = add nsw i32 %mul27, 1
  %sub29 = sub nsw i32 %sub20, %add28
  br label %cond.end

cond.false:                                       ; preds = %cond.true.7
  %9 = load i64, i64* %len, align 8
  %conv30 = trunc i64 %9 to i8
  %conv31 = sext i8 %conv30 to i32
  %add32 = add nsw i32 0, %conv31
  %mul33 = mul nsw i32 0, %add32
  %add34 = add nsw i32 %mul33, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.12
  %cond = phi i32 [ %sub29, %cond.true.12 ], [ %add34, %cond.false ]
  %cmp35 = icmp eq i32 %cond, 0
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %10 = load i64, i64* %len, align 8
  %conv37 = trunc i64 %10 to i8
  %conv38 = sext i8 %conv37 to i32
  %cmp39 = icmp slt i32 %conv38, 0
  br i1 %cmp39, label %cond.true.218, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end
  br i1 false, label %cond.true.41, label %cond.false.119

cond.true.41:                                     ; preds = %lor.lhs.false
  %11 = load i64, i64* %len, align 8
  %conv42 = trunc i64 %11 to i8
  %conv43 = sext i8 %conv42 to i32
  %cmp44 = icmp slt i32 %conv43, 0
  br i1 %cmp44, label %cond.true.46, label %cond.false.76

cond.true.46:                                     ; preds = %cond.true.41
  %12 = load i64, i64* %len, align 8
  %conv47 = trunc i64 %12 to i8
  %conv48 = sext i8 %conv47 to i32
  %13 = load i64, i64* %len, align 8
  %conv49 = trunc i64 %13 to i8
  %conv50 = sext i8 %conv49 to i32
  %add51 = add nsw i32 0, %conv50
  %mul52 = mul nsw i32 0, %add51
  %sub53 = sub nsw i32 %mul52, 1
  %cmp54 = icmp slt i32 %sub53, 0
  br i1 %cmp54, label %cond.true.56, label %cond.false.66

cond.true.56:                                     ; preds = %cond.true.46
  %14 = load i64, i64* %len, align 8
  %conv57 = trunc i64 %14 to i8
  %conv58 = sext i8 %conv57 to i32
  %add59 = add nsw i32 0, %conv58
  %mul60 = mul nsw i32 0, %add59
  %add61 = add nsw i32 %mul60, 1
  %shl62 = shl i32 %add61, 30
  %sub63 = sub nsw i32 %shl62, 1
  %mul64 = mul nsw i32 %sub63, 2
  %add65 = add nsw i32 %mul64, 1
  br label %cond.end.72

cond.false.66:                                    ; preds = %cond.true.46
  %15 = load i64, i64* %len, align 8
  %conv67 = trunc i64 %15 to i8
  %conv68 = sext i8 %conv67 to i32
  %add69 = add nsw i32 0, %conv68
  %mul70 = mul nsw i32 0, %add69
  %sub71 = sub nsw i32 %mul70, 1
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.66, %cond.true.56
  %cond73 = phi i32 [ %add65, %cond.true.56 ], [ %sub71, %cond.false.66 ]
  %div = sdiv i32 %cond73, 8
  %cmp74 = icmp slt i32 %conv48, %div
  br i1 %cmp74, label %cond.true.218, label %lor.lhs.false.198

cond.false.76:                                    ; preds = %cond.true.41
  br i1 false, label %cond.true.77, label %cond.false.78

cond.true.77:                                     ; preds = %cond.false.76
  br i1 false, label %cond.true.218, label %lor.lhs.false.198

cond.false.78:                                    ; preds = %cond.false.76
  %16 = load i64, i64* %len, align 8
  %conv79 = trunc i64 %16 to i8
  %conv80 = sext i8 %conv79 to i32
  %add81 = add nsw i32 0, %conv80
  %mul82 = mul nsw i32 0, %add81
  %sub83 = sub nsw i32 %mul82, 1
  %cmp84 = icmp slt i32 %sub83, 0
  br i1 %cmp84, label %cond.true.86, label %cond.false.106

cond.true.86:                                     ; preds = %cond.false.78
  %17 = load i64, i64* %len, align 8
  %conv87 = trunc i64 %17 to i8
  %conv88 = sext i8 %conv87 to i32
  %add89 = add nsw i32 0, %conv88
  %mul90 = mul nsw i32 0, %add89
  %add91 = add nsw i32 %mul90, 0
  %neg92 = xor i32 %add91, -1
  %cmp93 = icmp eq i32 %neg92, -1
  %conv94 = zext i1 %cmp93 to i32
  %sub95 = sub nsw i32 0, %conv94
  %18 = load i64, i64* %len, align 8
  %conv96 = trunc i64 %18 to i8
  %conv97 = sext i8 %conv96 to i32
  %add98 = add nsw i32 0, %conv97
  %mul99 = mul nsw i32 0, %add98
  %add100 = add nsw i32 %mul99, 1
  %shl101 = shl i32 %add100, 30
  %sub102 = sub nsw i32 %shl101, 1
  %mul103 = mul nsw i32 %sub102, 2
  %add104 = add nsw i32 %mul103, 1
  %sub105 = sub nsw i32 %sub95, %add104
  br label %cond.end.112

cond.false.106:                                   ; preds = %cond.false.78
  %19 = load i64, i64* %len, align 8
  %conv107 = trunc i64 %19 to i8
  %conv108 = sext i8 %conv107 to i32
  %add109 = add nsw i32 0, %conv108
  %mul110 = mul nsw i32 0, %add109
  %add111 = add nsw i32 %mul110, 0
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.106, %cond.true.86
  %cond113 = phi i32 [ %sub105, %cond.true.86 ], [ %add111, %cond.false.106 ]
  %div114 = sdiv i32 %cond113, 8
  %20 = load i64, i64* %len, align 8
  %conv115 = trunc i64 %20 to i8
  %conv116 = sext i8 %conv115 to i32
  %cmp117 = icmp slt i32 %div114, %conv116
  br i1 %cmp117, label %cond.true.218, label %lor.lhs.false.198

cond.false.119:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.120, label %cond.false.121

cond.true.120:                                    ; preds = %cond.false.119
  br i1 false, label %cond.true.218, label %lor.lhs.false.198

cond.false.121:                                   ; preds = %cond.false.119
  %21 = load i64, i64* %len, align 8
  %conv122 = trunc i64 %21 to i8
  %conv123 = sext i8 %conv122 to i32
  %cmp124 = icmp slt i32 %conv123, 0
  br i1 %cmp124, label %cond.true.126, label %cond.false.167

cond.true.126:                                    ; preds = %cond.false.121
  %22 = load i64, i64* %len, align 8
  %conv127 = trunc i64 %22 to i8
  %conv128 = sext i8 %conv127 to i32
  %23 = load i64, i64* %len, align 8
  %conv129 = trunc i64 %23 to i8
  %conv130 = sext i8 %conv129 to i32
  %add131 = add nsw i32 0, %conv130
  %mul132 = mul nsw i32 0, %add131
  %sub133 = sub nsw i32 %mul132, 1
  %cmp134 = icmp slt i32 %sub133, 0
  br i1 %cmp134, label %cond.true.136, label %cond.false.156

cond.true.136:                                    ; preds = %cond.true.126
  %24 = load i64, i64* %len, align 8
  %conv137 = trunc i64 %24 to i8
  %conv138 = sext i8 %conv137 to i32
  %add139 = add nsw i32 0, %conv138
  %mul140 = mul nsw i32 0, %add139
  %add141 = add nsw i32 %mul140, 0
  %neg142 = xor i32 %add141, -1
  %cmp143 = icmp eq i32 %neg142, -1
  %conv144 = zext i1 %cmp143 to i32
  %sub145 = sub nsw i32 0, %conv144
  %25 = load i64, i64* %len, align 8
  %conv146 = trunc i64 %25 to i8
  %conv147 = sext i8 %conv146 to i32
  %add148 = add nsw i32 0, %conv147
  %mul149 = mul nsw i32 0, %add148
  %add150 = add nsw i32 %mul149, 1
  %shl151 = shl i32 %add150, 30
  %sub152 = sub nsw i32 %shl151, 1
  %mul153 = mul nsw i32 %sub152, 2
  %add154 = add nsw i32 %mul153, 1
  %sub155 = sub nsw i32 %sub145, %add154
  br label %cond.end.162

cond.false.156:                                   ; preds = %cond.true.126
  %26 = load i64, i64* %len, align 8
  %conv157 = trunc i64 %26 to i8
  %conv158 = sext i8 %conv157 to i32
  %add159 = add nsw i32 0, %conv158
  %mul160 = mul nsw i32 0, %add159
  %add161 = add nsw i32 %mul160, 0
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.156, %cond.true.136
  %cond163 = phi i32 [ %sub155, %cond.true.136 ], [ %add161, %cond.false.156 ]
  %div164 = sdiv i32 %cond163, 8
  %cmp165 = icmp slt i32 %conv128, %div164
  br i1 %cmp165, label %cond.true.218, label %lor.lhs.false.198

cond.false.167:                                   ; preds = %cond.false.121
  %27 = load i64, i64* %len, align 8
  %conv168 = trunc i64 %27 to i8
  %conv169 = sext i8 %conv168 to i32
  %add170 = add nsw i32 0, %conv169
  %mul171 = mul nsw i32 0, %add170
  %sub172 = sub nsw i32 %mul171, 1
  %cmp173 = icmp slt i32 %sub172, 0
  br i1 %cmp173, label %cond.true.175, label %cond.false.185

cond.true.175:                                    ; preds = %cond.false.167
  %28 = load i64, i64* %len, align 8
  %conv176 = trunc i64 %28 to i8
  %conv177 = sext i8 %conv176 to i32
  %add178 = add nsw i32 0, %conv177
  %mul179 = mul nsw i32 0, %add178
  %add180 = add nsw i32 %mul179, 1
  %shl181 = shl i32 %add180, 30
  %sub182 = sub nsw i32 %shl181, 1
  %mul183 = mul nsw i32 %sub182, 2
  %add184 = add nsw i32 %mul183, 1
  br label %cond.end.191

cond.false.185:                                   ; preds = %cond.false.167
  %29 = load i64, i64* %len, align 8
  %conv186 = trunc i64 %29 to i8
  %conv187 = sext i8 %conv186 to i32
  %add188 = add nsw i32 0, %conv187
  %mul189 = mul nsw i32 0, %add188
  %sub190 = sub nsw i32 %mul189, 1
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.185, %cond.true.175
  %cond192 = phi i32 [ %add184, %cond.true.175 ], [ %sub190, %cond.false.185 ]
  %div193 = sdiv i32 %cond192, 8
  %30 = load i64, i64* %len, align 8
  %conv194 = trunc i64 %30 to i8
  %conv195 = sext i8 %conv194 to i32
  %cmp196 = icmp slt i32 %div193, %conv195
  br i1 %cmp196, label %cond.true.218, label %lor.lhs.false.198

lor.lhs.false.198:                                ; preds = %cond.end.191, %cond.end.162, %cond.true.120, %cond.end.112, %cond.true.77, %cond.end.72
  %31 = load i64, i64* %len, align 8
  %conv199 = trunc i64 %31 to i8
  %conv200 = sext i8 %conv199 to i32
  %mul201 = mul nsw i32 %conv200, 8
  %mul202 = mul nsw i32 0, %mul201
  %sub203 = sub nsw i32 %mul202, 1
  %cmp204 = icmp slt i32 %sub203, 0
  br i1 %cmp204, label %land.lhs.true.206, label %lor.lhs.false.212

land.lhs.true.206:                                ; preds = %lor.lhs.false.198
  %32 = load i64, i64* %len, align 8
  %conv207 = trunc i64 %32 to i8
  %conv208 = sext i8 %conv207 to i32
  %mul209 = mul nsw i32 %conv208, 8
  %cmp210 = icmp slt i32 %mul209, -128
  br i1 %cmp210, label %cond.true.218, label %lor.lhs.false.212

lor.lhs.false.212:                                ; preds = %land.lhs.true.206, %lor.lhs.false.198
  %33 = load i64, i64* %len, align 8
  %conv213 = trunc i64 %33 to i8
  %conv214 = sext i8 %conv213 to i32
  %mul215 = mul nsw i32 %conv214, 8
  %cmp216 = icmp slt i32 127, %mul215
  br i1 %cmp216, label %cond.true.218, label %cond.false.241

cond.true.218:                                    ; preds = %lor.lhs.false.212, %land.lhs.true.206, %cond.end.191, %cond.end.162, %cond.true.120, %cond.end.112, %cond.true.77, %cond.end.72, %land.lhs.true
  %34 = load i64, i64* %len, align 8
  %conv219 = trunc i64 %34 to i8
  %conv220 = zext i8 %conv219 to i32
  %mul221 = mul nsw i32 %conv220, 8
  %cmp222 = icmp sle i32 %mul221, 127
  br i1 %cmp222, label %cond.true.224, label %cond.false.230

cond.true.224:                                    ; preds = %cond.true.218
  %35 = load i64, i64* %len, align 8
  %conv225 = trunc i64 %35 to i8
  %conv226 = zext i8 %conv225 to i32
  %mul227 = mul nsw i32 %conv226, 8
  %conv228 = trunc i32 %mul227 to i8
  %conv229 = sext i8 %conv228 to i32
  br label %cond.end.238

cond.false.230:                                   ; preds = %cond.true.218
  %36 = load i64, i64* %len, align 8
  %conv231 = trunc i64 %36 to i8
  %conv232 = zext i8 %conv231 to i32
  %mul233 = mul nsw i32 %conv232, 8
  %sub234 = sub nsw i32 %mul233, -128
  %conv235 = trunc i32 %sub234 to i8
  %conv236 = sext i8 %conv235 to i32
  %add237 = add nsw i32 %conv236, -128
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.230, %cond.true.224
  %cond239 = phi i32 [ %conv229, %cond.true.224 ], [ %add237, %cond.false.230 ]
  %conv240 = sext i32 %cond239 to i64
  store i64 %conv240, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.241:                                   ; preds = %lor.lhs.false.212
  %37 = load i64, i64* %len, align 8
  %conv242 = trunc i64 %37 to i8
  %conv243 = zext i8 %conv242 to i32
  %mul244 = mul nsw i32 %conv243, 8
  %cmp245 = icmp sle i32 %mul244, 127
  br i1 %cmp245, label %cond.true.247, label %cond.false.253

cond.true.247:                                    ; preds = %cond.false.241
  %38 = load i64, i64* %len, align 8
  %conv248 = trunc i64 %38 to i8
  %conv249 = zext i8 %conv248 to i32
  %mul250 = mul nsw i32 %conv249, 8
  %conv251 = trunc i32 %mul250 to i8
  %conv252 = sext i8 %conv251 to i32
  br label %cond.end.261

cond.false.253:                                   ; preds = %cond.false.241
  %39 = load i64, i64* %len, align 8
  %conv254 = trunc i64 %39 to i8
  %conv255 = zext i8 %conv254 to i32
  %mul256 = mul nsw i32 %conv255, 8
  %sub257 = sub nsw i32 %mul256, -128
  %conv258 = trunc i32 %sub257 to i8
  %conv259 = sext i8 %conv258 to i32
  %add260 = add nsw i32 %conv259, -128
  br label %cond.end.261

cond.end.261:                                     ; preds = %cond.false.253, %cond.true.247
  %cond262 = phi i32 [ %conv252, %cond.true.247 ], [ %add260, %cond.false.253 ]
  %conv263 = sext i32 %cond262 to i64
  store i64 %conv263, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.264:                                   ; preds = %cond.true
  %40 = load i64, i64* %len, align 8
  %add265 = add nsw i64 0, %40
  %mul266 = mul nsw i64 0, %add265
  %sub267 = sub nsw i64 %mul266, 1
  %cmp268 = icmp slt i64 %sub267, 0
  br i1 %cmp268, label %cond.true.270, label %cond.false.287

cond.true.270:                                    ; preds = %cond.false.264
  %41 = load i64, i64* %len, align 8
  %add271 = add nsw i64 0, %41
  %mul272 = mul nsw i64 0, %add271
  %add273 = add nsw i64 %mul272, 0
  %neg274 = xor i64 %add273, -1
  %cmp275 = icmp eq i64 %neg274, -1
  %conv276 = zext i1 %cmp275 to i32
  %sub277 = sub nsw i32 0, %conv276
  %conv278 = sext i32 %sub277 to i64
  %42 = load i64, i64* %len, align 8
  %add279 = add nsw i64 0, %42
  %mul280 = mul nsw i64 0, %add279
  %add281 = add nsw i64 %mul280, 1
  %shl282 = shl i64 %add281, 62
  %sub283 = sub nsw i64 %shl282, 1
  %mul284 = mul nsw i64 %sub283, 2
  %add285 = add nsw i64 %mul284, 1
  %sub286 = sub nsw i64 %conv278, %add285
  br label %cond.end.291

cond.false.287:                                   ; preds = %cond.false.264
  %43 = load i64, i64* %len, align 8
  %add288 = add nsw i64 0, %43
  %mul289 = mul nsw i64 0, %add288
  %add290 = add nsw i64 %mul289, 0
  br label %cond.end.291

cond.end.291:                                     ; preds = %cond.false.287, %cond.true.270
  %cond292 = phi i64 [ %sub286, %cond.true.270 ], [ %add290, %cond.false.287 ]
  %cmp293 = icmp eq i64 %cond292, 0
  br i1 %cmp293, label %land.lhs.true.295, label %lor.lhs.false.298

land.lhs.true.295:                                ; preds = %cond.end.291
  %44 = load i64, i64* %len, align 8
  %cmp296 = icmp slt i64 %44, 0
  br i1 %cmp296, label %cond.true.433, label %lor.lhs.false.298

lor.lhs.false.298:                                ; preds = %land.lhs.true.295, %cond.end.291
  br i1 false, label %cond.true.299, label %cond.false.359

cond.true.299:                                    ; preds = %lor.lhs.false.298
  %45 = load i64, i64* %len, align 8
  %cmp300 = icmp slt i64 %45, 0
  br i1 %cmp300, label %cond.true.302, label %cond.false.325

cond.true.302:                                    ; preds = %cond.true.299
  %46 = load i64, i64* %len, align 8
  %47 = load i64, i64* %len, align 8
  %add303 = add nsw i64 0, %47
  %mul304 = mul nsw i64 0, %add303
  %sub305 = sub nsw i64 %mul304, 1
  %cmp306 = icmp slt i64 %sub305, 0
  br i1 %cmp306, label %cond.true.308, label %cond.false.316

cond.true.308:                                    ; preds = %cond.true.302
  %48 = load i64, i64* %len, align 8
  %add309 = add nsw i64 0, %48
  %mul310 = mul nsw i64 0, %add309
  %add311 = add nsw i64 %mul310, 1
  %shl312 = shl i64 %add311, 62
  %sub313 = sub nsw i64 %shl312, 1
  %mul314 = mul nsw i64 %sub313, 2
  %add315 = add nsw i64 %mul314, 1
  br label %cond.end.320

cond.false.316:                                   ; preds = %cond.true.302
  %49 = load i64, i64* %len, align 8
  %add317 = add nsw i64 0, %49
  %mul318 = mul nsw i64 0, %add317
  %sub319 = sub nsw i64 %mul318, 1
  br label %cond.end.320

cond.end.320:                                     ; preds = %cond.false.316, %cond.true.308
  %cond321 = phi i64 [ %add315, %cond.true.308 ], [ %sub319, %cond.false.316 ]
  %div322 = sdiv i64 %cond321, 8
  %cmp323 = icmp slt i64 %46, %div322
  br i1 %cmp323, label %cond.true.433, label %lor.lhs.false.419

cond.false.325:                                   ; preds = %cond.true.299
  br i1 false, label %cond.true.326, label %cond.false.327

cond.true.326:                                    ; preds = %cond.false.325
  br i1 false, label %cond.true.433, label %lor.lhs.false.419

cond.false.327:                                   ; preds = %cond.false.325
  %50 = load i64, i64* %len, align 8
  %add328 = add nsw i64 0, %50
  %mul329 = mul nsw i64 0, %add328
  %sub330 = sub nsw i64 %mul329, 1
  %cmp331 = icmp slt i64 %sub330, 0
  br i1 %cmp331, label %cond.true.333, label %cond.false.350

cond.true.333:                                    ; preds = %cond.false.327
  %51 = load i64, i64* %len, align 8
  %add334 = add nsw i64 0, %51
  %mul335 = mul nsw i64 0, %add334
  %add336 = add nsw i64 %mul335, 0
  %neg337 = xor i64 %add336, -1
  %cmp338 = icmp eq i64 %neg337, -1
  %conv339 = zext i1 %cmp338 to i32
  %sub340 = sub nsw i32 0, %conv339
  %conv341 = sext i32 %sub340 to i64
  %52 = load i64, i64* %len, align 8
  %add342 = add nsw i64 0, %52
  %mul343 = mul nsw i64 0, %add342
  %add344 = add nsw i64 %mul343, 1
  %shl345 = shl i64 %add344, 62
  %sub346 = sub nsw i64 %shl345, 1
  %mul347 = mul nsw i64 %sub346, 2
  %add348 = add nsw i64 %mul347, 1
  %sub349 = sub nsw i64 %conv341, %add348
  br label %cond.end.354

cond.false.350:                                   ; preds = %cond.false.327
  %53 = load i64, i64* %len, align 8
  %add351 = add nsw i64 0, %53
  %mul352 = mul nsw i64 0, %add351
  %add353 = add nsw i64 %mul352, 0
  br label %cond.end.354

cond.end.354:                                     ; preds = %cond.false.350, %cond.true.333
  %cond355 = phi i64 [ %sub349, %cond.true.333 ], [ %add353, %cond.false.350 ]
  %div356 = sdiv i64 %cond355, 8
  %54 = load i64, i64* %len, align 8
  %cmp357 = icmp slt i64 %div356, %54
  br i1 %cmp357, label %cond.true.433, label %lor.lhs.false.419

cond.false.359:                                   ; preds = %lor.lhs.false.298
  br i1 false, label %cond.true.360, label %cond.false.361

cond.true.360:                                    ; preds = %cond.false.359
  br i1 false, label %cond.true.433, label %lor.lhs.false.419

cond.false.361:                                   ; preds = %cond.false.359
  %55 = load i64, i64* %len, align 8
  %cmp362 = icmp slt i64 %55, 0
  br i1 %cmp362, label %cond.true.364, label %cond.false.396

cond.true.364:                                    ; preds = %cond.false.361
  %56 = load i64, i64* %len, align 8
  %57 = load i64, i64* %len, align 8
  %add365 = add nsw i64 0, %57
  %mul366 = mul nsw i64 0, %add365
  %sub367 = sub nsw i64 %mul366, 1
  %cmp368 = icmp slt i64 %sub367, 0
  br i1 %cmp368, label %cond.true.370, label %cond.false.387

cond.true.370:                                    ; preds = %cond.true.364
  %58 = load i64, i64* %len, align 8
  %add371 = add nsw i64 0, %58
  %mul372 = mul nsw i64 0, %add371
  %add373 = add nsw i64 %mul372, 0
  %neg374 = xor i64 %add373, -1
  %cmp375 = icmp eq i64 %neg374, -1
  %conv376 = zext i1 %cmp375 to i32
  %sub377 = sub nsw i32 0, %conv376
  %conv378 = sext i32 %sub377 to i64
  %59 = load i64, i64* %len, align 8
  %add379 = add nsw i64 0, %59
  %mul380 = mul nsw i64 0, %add379
  %add381 = add nsw i64 %mul380, 1
  %shl382 = shl i64 %add381, 62
  %sub383 = sub nsw i64 %shl382, 1
  %mul384 = mul nsw i64 %sub383, 2
  %add385 = add nsw i64 %mul384, 1
  %sub386 = sub nsw i64 %conv378, %add385
  br label %cond.end.391

cond.false.387:                                   ; preds = %cond.true.364
  %60 = load i64, i64* %len, align 8
  %add388 = add nsw i64 0, %60
  %mul389 = mul nsw i64 0, %add388
  %add390 = add nsw i64 %mul389, 0
  br label %cond.end.391

cond.end.391:                                     ; preds = %cond.false.387, %cond.true.370
  %cond392 = phi i64 [ %sub386, %cond.true.370 ], [ %add390, %cond.false.387 ]
  %div393 = sdiv i64 %cond392, 8
  %cmp394 = icmp slt i64 %56, %div393
  br i1 %cmp394, label %cond.true.433, label %lor.lhs.false.419

cond.false.396:                                   ; preds = %cond.false.361
  %61 = load i64, i64* %len, align 8
  %add397 = add nsw i64 0, %61
  %mul398 = mul nsw i64 0, %add397
  %sub399 = sub nsw i64 %mul398, 1
  %cmp400 = icmp slt i64 %sub399, 0
  br i1 %cmp400, label %cond.true.402, label %cond.false.410

cond.true.402:                                    ; preds = %cond.false.396
  %62 = load i64, i64* %len, align 8
  %add403 = add nsw i64 0, %62
  %mul404 = mul nsw i64 0, %add403
  %add405 = add nsw i64 %mul404, 1
  %shl406 = shl i64 %add405, 62
  %sub407 = sub nsw i64 %shl406, 1
  %mul408 = mul nsw i64 %sub407, 2
  %add409 = add nsw i64 %mul408, 1
  br label %cond.end.414

cond.false.410:                                   ; preds = %cond.false.396
  %63 = load i64, i64* %len, align 8
  %add411 = add nsw i64 0, %63
  %mul412 = mul nsw i64 0, %add411
  %sub413 = sub nsw i64 %mul412, 1
  br label %cond.end.414

cond.end.414:                                     ; preds = %cond.false.410, %cond.true.402
  %cond415 = phi i64 [ %add409, %cond.true.402 ], [ %sub413, %cond.false.410 ]
  %div416 = sdiv i64 %cond415, 8
  %64 = load i64, i64* %len, align 8
  %cmp417 = icmp slt i64 %div416, %64
  br i1 %cmp417, label %cond.true.433, label %lor.lhs.false.419

lor.lhs.false.419:                                ; preds = %cond.end.414, %cond.end.391, %cond.true.360, %cond.end.354, %cond.true.326, %cond.end.320
  %65 = load i64, i64* %len, align 8
  %mul420 = mul nsw i64 %65, 8
  %mul421 = mul nsw i64 0, %mul420
  %sub422 = sub nsw i64 %mul421, 1
  %cmp423 = icmp slt i64 %sub422, 0
  br i1 %cmp423, label %land.lhs.true.425, label %lor.lhs.false.429

land.lhs.true.425:                                ; preds = %lor.lhs.false.419
  %66 = load i64, i64* %len, align 8
  %mul426 = mul nsw i64 %66, 8
  %cmp427 = icmp slt i64 %mul426, -128
  br i1 %cmp427, label %cond.true.433, label %lor.lhs.false.429

lor.lhs.false.429:                                ; preds = %land.lhs.true.425, %lor.lhs.false.419
  %67 = load i64, i64* %len, align 8
  %mul430 = mul nsw i64 %67, 8
  %cmp431 = icmp slt i64 127, %mul430
  br i1 %cmp431, label %cond.true.433, label %cond.false.456

cond.true.433:                                    ; preds = %lor.lhs.false.429, %land.lhs.true.425, %cond.end.414, %cond.end.391, %cond.true.360, %cond.end.354, %cond.true.326, %cond.end.320, %land.lhs.true.295
  %68 = load i64, i64* %len, align 8
  %conv434 = trunc i64 %68 to i8
  %conv435 = zext i8 %conv434 to i32
  %mul436 = mul nsw i32 %conv435, 8
  %cmp437 = icmp sle i32 %mul436, 127
  br i1 %cmp437, label %cond.true.439, label %cond.false.445

cond.true.439:                                    ; preds = %cond.true.433
  %69 = load i64, i64* %len, align 8
  %conv440 = trunc i64 %69 to i8
  %conv441 = zext i8 %conv440 to i32
  %mul442 = mul nsw i32 %conv441, 8
  %conv443 = trunc i32 %mul442 to i8
  %conv444 = sext i8 %conv443 to i32
  br label %cond.end.453

cond.false.445:                                   ; preds = %cond.true.433
  %70 = load i64, i64* %len, align 8
  %conv446 = trunc i64 %70 to i8
  %conv447 = zext i8 %conv446 to i32
  %mul448 = mul nsw i32 %conv447, 8
  %sub449 = sub nsw i32 %mul448, -128
  %conv450 = trunc i32 %sub449 to i8
  %conv451 = sext i8 %conv450 to i32
  %add452 = add nsw i32 %conv451, -128
  br label %cond.end.453

cond.end.453:                                     ; preds = %cond.false.445, %cond.true.439
  %cond454 = phi i32 [ %conv444, %cond.true.439 ], [ %add452, %cond.false.445 ]
  %conv455 = sext i32 %cond454 to i64
  store i64 %conv455, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.456:                                   ; preds = %lor.lhs.false.429
  %71 = load i64, i64* %len, align 8
  %conv457 = trunc i64 %71 to i8
  %conv458 = zext i8 %conv457 to i32
  %mul459 = mul nsw i32 %conv458, 8
  %cmp460 = icmp sle i32 %mul459, 127
  br i1 %cmp460, label %cond.true.462, label %cond.false.468

cond.true.462:                                    ; preds = %cond.false.456
  %72 = load i64, i64* %len, align 8
  %conv463 = trunc i64 %72 to i8
  %conv464 = zext i8 %conv463 to i32
  %mul465 = mul nsw i32 %conv464, 8
  %conv466 = trunc i32 %mul465 to i8
  %conv467 = sext i8 %conv466 to i32
  br label %cond.end.476

cond.false.468:                                   ; preds = %cond.false.456
  %73 = load i64, i64* %len, align 8
  %conv469 = trunc i64 %73 to i8
  %conv470 = zext i8 %conv469 to i32
  %mul471 = mul nsw i32 %conv470, 8
  %sub472 = sub nsw i32 %mul471, -128
  %conv473 = trunc i32 %sub472 to i8
  %conv474 = sext i8 %conv473 to i32
  %add475 = add nsw i32 %conv474, -128
  br label %cond.end.476

cond.end.476:                                     ; preds = %cond.false.468, %cond.true.462
  %cond477 = phi i32 [ %conv467, %cond.true.462 ], [ %add475, %cond.false.468 ]
  %conv478 = sext i32 %cond477 to i64
  store i64 %conv478, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.479:                                   ; preds = %do.body
  br i1 false, label %cond.true.480, label %cond.false.964

cond.true.480:                                    ; preds = %cond.false.479
  br i1 false, label %cond.true.481, label %cond.false.749

cond.true.481:                                    ; preds = %cond.true.480
  %74 = load i64, i64* %len, align 8
  %conv482 = trunc i64 %74 to i16
  %conv483 = sext i16 %conv482 to i32
  %add484 = add nsw i32 0, %conv483
  %mul485 = mul nsw i32 0, %add484
  %sub486 = sub nsw i32 %mul485, 1
  %cmp487 = icmp slt i32 %sub486, 0
  br i1 %cmp487, label %cond.true.489, label %cond.false.509

cond.true.489:                                    ; preds = %cond.true.481
  %75 = load i64, i64* %len, align 8
  %conv490 = trunc i64 %75 to i16
  %conv491 = sext i16 %conv490 to i32
  %add492 = add nsw i32 0, %conv491
  %mul493 = mul nsw i32 0, %add492
  %add494 = add nsw i32 %mul493, 0
  %neg495 = xor i32 %add494, -1
  %cmp496 = icmp eq i32 %neg495, -1
  %conv497 = zext i1 %cmp496 to i32
  %sub498 = sub nsw i32 0, %conv497
  %76 = load i64, i64* %len, align 8
  %conv499 = trunc i64 %76 to i16
  %conv500 = sext i16 %conv499 to i32
  %add501 = add nsw i32 0, %conv500
  %mul502 = mul nsw i32 0, %add501
  %add503 = add nsw i32 %mul502, 1
  %shl504 = shl i32 %add503, 30
  %sub505 = sub nsw i32 %shl504, 1
  %mul506 = mul nsw i32 %sub505, 2
  %add507 = add nsw i32 %mul506, 1
  %sub508 = sub nsw i32 %sub498, %add507
  br label %cond.end.515

cond.false.509:                                   ; preds = %cond.true.481
  %77 = load i64, i64* %len, align 8
  %conv510 = trunc i64 %77 to i16
  %conv511 = sext i16 %conv510 to i32
  %add512 = add nsw i32 0, %conv511
  %mul513 = mul nsw i32 0, %add512
  %add514 = add nsw i32 %mul513, 0
  br label %cond.end.515

cond.end.515:                                     ; preds = %cond.false.509, %cond.true.489
  %cond516 = phi i32 [ %sub508, %cond.true.489 ], [ %add514, %cond.false.509 ]
  %cmp517 = icmp eq i32 %cond516, 0
  br i1 %cmp517, label %land.lhs.true.519, label %lor.lhs.false.524

land.lhs.true.519:                                ; preds = %cond.end.515
  %78 = load i64, i64* %len, align 8
  %conv520 = trunc i64 %78 to i16
  %conv521 = sext i16 %conv520 to i32
  %cmp522 = icmp slt i32 %conv521, 0
  br i1 %cmp522, label %cond.true.703, label %lor.lhs.false.524

lor.lhs.false.524:                                ; preds = %land.lhs.true.519, %cond.end.515
  br i1 false, label %cond.true.525, label %cond.false.604

cond.true.525:                                    ; preds = %lor.lhs.false.524
  %79 = load i64, i64* %len, align 8
  %conv526 = trunc i64 %79 to i16
  %conv527 = sext i16 %conv526 to i32
  %cmp528 = icmp slt i32 %conv527, 0
  br i1 %cmp528, label %cond.true.530, label %cond.false.561

cond.true.530:                                    ; preds = %cond.true.525
  %80 = load i64, i64* %len, align 8
  %conv531 = trunc i64 %80 to i16
  %conv532 = sext i16 %conv531 to i32
  %81 = load i64, i64* %len, align 8
  %conv533 = trunc i64 %81 to i16
  %conv534 = sext i16 %conv533 to i32
  %add535 = add nsw i32 0, %conv534
  %mul536 = mul nsw i32 0, %add535
  %sub537 = sub nsw i32 %mul536, 1
  %cmp538 = icmp slt i32 %sub537, 0
  br i1 %cmp538, label %cond.true.540, label %cond.false.550

cond.true.540:                                    ; preds = %cond.true.530
  %82 = load i64, i64* %len, align 8
  %conv541 = trunc i64 %82 to i16
  %conv542 = sext i16 %conv541 to i32
  %add543 = add nsw i32 0, %conv542
  %mul544 = mul nsw i32 0, %add543
  %add545 = add nsw i32 %mul544, 1
  %shl546 = shl i32 %add545, 30
  %sub547 = sub nsw i32 %shl546, 1
  %mul548 = mul nsw i32 %sub547, 2
  %add549 = add nsw i32 %mul548, 1
  br label %cond.end.556

cond.false.550:                                   ; preds = %cond.true.530
  %83 = load i64, i64* %len, align 8
  %conv551 = trunc i64 %83 to i16
  %conv552 = sext i16 %conv551 to i32
  %add553 = add nsw i32 0, %conv552
  %mul554 = mul nsw i32 0, %add553
  %sub555 = sub nsw i32 %mul554, 1
  br label %cond.end.556

cond.end.556:                                     ; preds = %cond.false.550, %cond.true.540
  %cond557 = phi i32 [ %add549, %cond.true.540 ], [ %sub555, %cond.false.550 ]
  %div558 = sdiv i32 %cond557, 8
  %cmp559 = icmp slt i32 %conv532, %div558
  br i1 %cmp559, label %cond.true.703, label %lor.lhs.false.683

cond.false.561:                                   ; preds = %cond.true.525
  br i1 false, label %cond.true.562, label %cond.false.563

cond.true.562:                                    ; preds = %cond.false.561
  br i1 false, label %cond.true.703, label %lor.lhs.false.683

cond.false.563:                                   ; preds = %cond.false.561
  %84 = load i64, i64* %len, align 8
  %conv564 = trunc i64 %84 to i16
  %conv565 = sext i16 %conv564 to i32
  %add566 = add nsw i32 0, %conv565
  %mul567 = mul nsw i32 0, %add566
  %sub568 = sub nsw i32 %mul567, 1
  %cmp569 = icmp slt i32 %sub568, 0
  br i1 %cmp569, label %cond.true.571, label %cond.false.591

cond.true.571:                                    ; preds = %cond.false.563
  %85 = load i64, i64* %len, align 8
  %conv572 = trunc i64 %85 to i16
  %conv573 = sext i16 %conv572 to i32
  %add574 = add nsw i32 0, %conv573
  %mul575 = mul nsw i32 0, %add574
  %add576 = add nsw i32 %mul575, 0
  %neg577 = xor i32 %add576, -1
  %cmp578 = icmp eq i32 %neg577, -1
  %conv579 = zext i1 %cmp578 to i32
  %sub580 = sub nsw i32 0, %conv579
  %86 = load i64, i64* %len, align 8
  %conv581 = trunc i64 %86 to i16
  %conv582 = sext i16 %conv581 to i32
  %add583 = add nsw i32 0, %conv582
  %mul584 = mul nsw i32 0, %add583
  %add585 = add nsw i32 %mul584, 1
  %shl586 = shl i32 %add585, 30
  %sub587 = sub nsw i32 %shl586, 1
  %mul588 = mul nsw i32 %sub587, 2
  %add589 = add nsw i32 %mul588, 1
  %sub590 = sub nsw i32 %sub580, %add589
  br label %cond.end.597

cond.false.591:                                   ; preds = %cond.false.563
  %87 = load i64, i64* %len, align 8
  %conv592 = trunc i64 %87 to i16
  %conv593 = sext i16 %conv592 to i32
  %add594 = add nsw i32 0, %conv593
  %mul595 = mul nsw i32 0, %add594
  %add596 = add nsw i32 %mul595, 0
  br label %cond.end.597

cond.end.597:                                     ; preds = %cond.false.591, %cond.true.571
  %cond598 = phi i32 [ %sub590, %cond.true.571 ], [ %add596, %cond.false.591 ]
  %div599 = sdiv i32 %cond598, 8
  %88 = load i64, i64* %len, align 8
  %conv600 = trunc i64 %88 to i16
  %conv601 = sext i16 %conv600 to i32
  %cmp602 = icmp slt i32 %div599, %conv601
  br i1 %cmp602, label %cond.true.703, label %lor.lhs.false.683

cond.false.604:                                   ; preds = %lor.lhs.false.524
  br i1 false, label %cond.true.605, label %cond.false.606

cond.true.605:                                    ; preds = %cond.false.604
  br i1 false, label %cond.true.703, label %lor.lhs.false.683

cond.false.606:                                   ; preds = %cond.false.604
  %89 = load i64, i64* %len, align 8
  %conv607 = trunc i64 %89 to i16
  %conv608 = sext i16 %conv607 to i32
  %cmp609 = icmp slt i32 %conv608, 0
  br i1 %cmp609, label %cond.true.611, label %cond.false.652

cond.true.611:                                    ; preds = %cond.false.606
  %90 = load i64, i64* %len, align 8
  %conv612 = trunc i64 %90 to i16
  %conv613 = sext i16 %conv612 to i32
  %91 = load i64, i64* %len, align 8
  %conv614 = trunc i64 %91 to i16
  %conv615 = sext i16 %conv614 to i32
  %add616 = add nsw i32 0, %conv615
  %mul617 = mul nsw i32 0, %add616
  %sub618 = sub nsw i32 %mul617, 1
  %cmp619 = icmp slt i32 %sub618, 0
  br i1 %cmp619, label %cond.true.621, label %cond.false.641

cond.true.621:                                    ; preds = %cond.true.611
  %92 = load i64, i64* %len, align 8
  %conv622 = trunc i64 %92 to i16
  %conv623 = sext i16 %conv622 to i32
  %add624 = add nsw i32 0, %conv623
  %mul625 = mul nsw i32 0, %add624
  %add626 = add nsw i32 %mul625, 0
  %neg627 = xor i32 %add626, -1
  %cmp628 = icmp eq i32 %neg627, -1
  %conv629 = zext i1 %cmp628 to i32
  %sub630 = sub nsw i32 0, %conv629
  %93 = load i64, i64* %len, align 8
  %conv631 = trunc i64 %93 to i16
  %conv632 = sext i16 %conv631 to i32
  %add633 = add nsw i32 0, %conv632
  %mul634 = mul nsw i32 0, %add633
  %add635 = add nsw i32 %mul634, 1
  %shl636 = shl i32 %add635, 30
  %sub637 = sub nsw i32 %shl636, 1
  %mul638 = mul nsw i32 %sub637, 2
  %add639 = add nsw i32 %mul638, 1
  %sub640 = sub nsw i32 %sub630, %add639
  br label %cond.end.647

cond.false.641:                                   ; preds = %cond.true.611
  %94 = load i64, i64* %len, align 8
  %conv642 = trunc i64 %94 to i16
  %conv643 = sext i16 %conv642 to i32
  %add644 = add nsw i32 0, %conv643
  %mul645 = mul nsw i32 0, %add644
  %add646 = add nsw i32 %mul645, 0
  br label %cond.end.647

cond.end.647:                                     ; preds = %cond.false.641, %cond.true.621
  %cond648 = phi i32 [ %sub640, %cond.true.621 ], [ %add646, %cond.false.641 ]
  %div649 = sdiv i32 %cond648, 8
  %cmp650 = icmp slt i32 %conv613, %div649
  br i1 %cmp650, label %cond.true.703, label %lor.lhs.false.683

cond.false.652:                                   ; preds = %cond.false.606
  %95 = load i64, i64* %len, align 8
  %conv653 = trunc i64 %95 to i16
  %conv654 = sext i16 %conv653 to i32
  %add655 = add nsw i32 0, %conv654
  %mul656 = mul nsw i32 0, %add655
  %sub657 = sub nsw i32 %mul656, 1
  %cmp658 = icmp slt i32 %sub657, 0
  br i1 %cmp658, label %cond.true.660, label %cond.false.670

cond.true.660:                                    ; preds = %cond.false.652
  %96 = load i64, i64* %len, align 8
  %conv661 = trunc i64 %96 to i16
  %conv662 = sext i16 %conv661 to i32
  %add663 = add nsw i32 0, %conv662
  %mul664 = mul nsw i32 0, %add663
  %add665 = add nsw i32 %mul664, 1
  %shl666 = shl i32 %add665, 30
  %sub667 = sub nsw i32 %shl666, 1
  %mul668 = mul nsw i32 %sub667, 2
  %add669 = add nsw i32 %mul668, 1
  br label %cond.end.676

cond.false.670:                                   ; preds = %cond.false.652
  %97 = load i64, i64* %len, align 8
  %conv671 = trunc i64 %97 to i16
  %conv672 = sext i16 %conv671 to i32
  %add673 = add nsw i32 0, %conv672
  %mul674 = mul nsw i32 0, %add673
  %sub675 = sub nsw i32 %mul674, 1
  br label %cond.end.676

cond.end.676:                                     ; preds = %cond.false.670, %cond.true.660
  %cond677 = phi i32 [ %add669, %cond.true.660 ], [ %sub675, %cond.false.670 ]
  %div678 = sdiv i32 %cond677, 8
  %98 = load i64, i64* %len, align 8
  %conv679 = trunc i64 %98 to i16
  %conv680 = sext i16 %conv679 to i32
  %cmp681 = icmp slt i32 %div678, %conv680
  br i1 %cmp681, label %cond.true.703, label %lor.lhs.false.683

lor.lhs.false.683:                                ; preds = %cond.end.676, %cond.end.647, %cond.true.605, %cond.end.597, %cond.true.562, %cond.end.556
  %99 = load i64, i64* %len, align 8
  %conv684 = trunc i64 %99 to i16
  %conv685 = sext i16 %conv684 to i32
  %mul686 = mul nsw i32 %conv685, 8
  %mul687 = mul nsw i32 0, %mul686
  %sub688 = sub nsw i32 %mul687, 1
  %cmp689 = icmp slt i32 %sub688, 0
  br i1 %cmp689, label %land.lhs.true.691, label %lor.lhs.false.697

land.lhs.true.691:                                ; preds = %lor.lhs.false.683
  %100 = load i64, i64* %len, align 8
  %conv692 = trunc i64 %100 to i16
  %conv693 = sext i16 %conv692 to i32
  %mul694 = mul nsw i32 %conv693, 8
  %cmp695 = icmp slt i32 %mul694, -32768
  br i1 %cmp695, label %cond.true.703, label %lor.lhs.false.697

lor.lhs.false.697:                                ; preds = %land.lhs.true.691, %lor.lhs.false.683
  %101 = load i64, i64* %len, align 8
  %conv698 = trunc i64 %101 to i16
  %conv699 = sext i16 %conv698 to i32
  %mul700 = mul nsw i32 %conv699, 8
  %cmp701 = icmp slt i32 32767, %mul700
  br i1 %cmp701, label %cond.true.703, label %cond.false.726

cond.true.703:                                    ; preds = %lor.lhs.false.697, %land.lhs.true.691, %cond.end.676, %cond.end.647, %cond.true.605, %cond.end.597, %cond.true.562, %cond.end.556, %land.lhs.true.519
  %102 = load i64, i64* %len, align 8
  %conv704 = trunc i64 %102 to i16
  %conv705 = zext i16 %conv704 to i32
  %mul706 = mul nsw i32 %conv705, 8
  %cmp707 = icmp sle i32 %mul706, 32767
  br i1 %cmp707, label %cond.true.709, label %cond.false.715

cond.true.709:                                    ; preds = %cond.true.703
  %103 = load i64, i64* %len, align 8
  %conv710 = trunc i64 %103 to i16
  %conv711 = zext i16 %conv710 to i32
  %mul712 = mul nsw i32 %conv711, 8
  %conv713 = trunc i32 %mul712 to i16
  %conv714 = sext i16 %conv713 to i32
  br label %cond.end.723

cond.false.715:                                   ; preds = %cond.true.703
  %104 = load i64, i64* %len, align 8
  %conv716 = trunc i64 %104 to i16
  %conv717 = zext i16 %conv716 to i32
  %mul718 = mul nsw i32 %conv717, 8
  %sub719 = sub nsw i32 %mul718, -32768
  %conv720 = trunc i32 %sub719 to i16
  %conv721 = sext i16 %conv720 to i32
  %add722 = add nsw i32 %conv721, -32768
  br label %cond.end.723

cond.end.723:                                     ; preds = %cond.false.715, %cond.true.709
  %cond724 = phi i32 [ %conv714, %cond.true.709 ], [ %add722, %cond.false.715 ]
  %conv725 = sext i32 %cond724 to i64
  store i64 %conv725, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.726:                                   ; preds = %lor.lhs.false.697
  %105 = load i64, i64* %len, align 8
  %conv727 = trunc i64 %105 to i16
  %conv728 = zext i16 %conv727 to i32
  %mul729 = mul nsw i32 %conv728, 8
  %cmp730 = icmp sle i32 %mul729, 32767
  br i1 %cmp730, label %cond.true.732, label %cond.false.738

cond.true.732:                                    ; preds = %cond.false.726
  %106 = load i64, i64* %len, align 8
  %conv733 = trunc i64 %106 to i16
  %conv734 = zext i16 %conv733 to i32
  %mul735 = mul nsw i32 %conv734, 8
  %conv736 = trunc i32 %mul735 to i16
  %conv737 = sext i16 %conv736 to i32
  br label %cond.end.746

cond.false.738:                                   ; preds = %cond.false.726
  %107 = load i64, i64* %len, align 8
  %conv739 = trunc i64 %107 to i16
  %conv740 = zext i16 %conv739 to i32
  %mul741 = mul nsw i32 %conv740, 8
  %sub742 = sub nsw i32 %mul741, -32768
  %conv743 = trunc i32 %sub742 to i16
  %conv744 = sext i16 %conv743 to i32
  %add745 = add nsw i32 %conv744, -32768
  br label %cond.end.746

cond.end.746:                                     ; preds = %cond.false.738, %cond.true.732
  %cond747 = phi i32 [ %conv737, %cond.true.732 ], [ %add745, %cond.false.738 ]
  %conv748 = sext i32 %cond747 to i64
  store i64 %conv748, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.749:                                   ; preds = %cond.true.480
  %108 = load i64, i64* %len, align 8
  %add750 = add nsw i64 0, %108
  %mul751 = mul nsw i64 0, %add750
  %sub752 = sub nsw i64 %mul751, 1
  %cmp753 = icmp slt i64 %sub752, 0
  br i1 %cmp753, label %cond.true.755, label %cond.false.772

cond.true.755:                                    ; preds = %cond.false.749
  %109 = load i64, i64* %len, align 8
  %add756 = add nsw i64 0, %109
  %mul757 = mul nsw i64 0, %add756
  %add758 = add nsw i64 %mul757, 0
  %neg759 = xor i64 %add758, -1
  %cmp760 = icmp eq i64 %neg759, -1
  %conv761 = zext i1 %cmp760 to i32
  %sub762 = sub nsw i32 0, %conv761
  %conv763 = sext i32 %sub762 to i64
  %110 = load i64, i64* %len, align 8
  %add764 = add nsw i64 0, %110
  %mul765 = mul nsw i64 0, %add764
  %add766 = add nsw i64 %mul765, 1
  %shl767 = shl i64 %add766, 62
  %sub768 = sub nsw i64 %shl767, 1
  %mul769 = mul nsw i64 %sub768, 2
  %add770 = add nsw i64 %mul769, 1
  %sub771 = sub nsw i64 %conv763, %add770
  br label %cond.end.776

cond.false.772:                                   ; preds = %cond.false.749
  %111 = load i64, i64* %len, align 8
  %add773 = add nsw i64 0, %111
  %mul774 = mul nsw i64 0, %add773
  %add775 = add nsw i64 %mul774, 0
  br label %cond.end.776

cond.end.776:                                     ; preds = %cond.false.772, %cond.true.755
  %cond777 = phi i64 [ %sub771, %cond.true.755 ], [ %add775, %cond.false.772 ]
  %cmp778 = icmp eq i64 %cond777, 0
  br i1 %cmp778, label %land.lhs.true.780, label %lor.lhs.false.783

land.lhs.true.780:                                ; preds = %cond.end.776
  %112 = load i64, i64* %len, align 8
  %cmp781 = icmp slt i64 %112, 0
  br i1 %cmp781, label %cond.true.918, label %lor.lhs.false.783

lor.lhs.false.783:                                ; preds = %land.lhs.true.780, %cond.end.776
  br i1 false, label %cond.true.784, label %cond.false.844

cond.true.784:                                    ; preds = %lor.lhs.false.783
  %113 = load i64, i64* %len, align 8
  %cmp785 = icmp slt i64 %113, 0
  br i1 %cmp785, label %cond.true.787, label %cond.false.810

cond.true.787:                                    ; preds = %cond.true.784
  %114 = load i64, i64* %len, align 8
  %115 = load i64, i64* %len, align 8
  %add788 = add nsw i64 0, %115
  %mul789 = mul nsw i64 0, %add788
  %sub790 = sub nsw i64 %mul789, 1
  %cmp791 = icmp slt i64 %sub790, 0
  br i1 %cmp791, label %cond.true.793, label %cond.false.801

cond.true.793:                                    ; preds = %cond.true.787
  %116 = load i64, i64* %len, align 8
  %add794 = add nsw i64 0, %116
  %mul795 = mul nsw i64 0, %add794
  %add796 = add nsw i64 %mul795, 1
  %shl797 = shl i64 %add796, 62
  %sub798 = sub nsw i64 %shl797, 1
  %mul799 = mul nsw i64 %sub798, 2
  %add800 = add nsw i64 %mul799, 1
  br label %cond.end.805

cond.false.801:                                   ; preds = %cond.true.787
  %117 = load i64, i64* %len, align 8
  %add802 = add nsw i64 0, %117
  %mul803 = mul nsw i64 0, %add802
  %sub804 = sub nsw i64 %mul803, 1
  br label %cond.end.805

cond.end.805:                                     ; preds = %cond.false.801, %cond.true.793
  %cond806 = phi i64 [ %add800, %cond.true.793 ], [ %sub804, %cond.false.801 ]
  %div807 = sdiv i64 %cond806, 8
  %cmp808 = icmp slt i64 %114, %div807
  br i1 %cmp808, label %cond.true.918, label %lor.lhs.false.904

cond.false.810:                                   ; preds = %cond.true.784
  br i1 false, label %cond.true.811, label %cond.false.812

cond.true.811:                                    ; preds = %cond.false.810
  br i1 false, label %cond.true.918, label %lor.lhs.false.904

cond.false.812:                                   ; preds = %cond.false.810
  %118 = load i64, i64* %len, align 8
  %add813 = add nsw i64 0, %118
  %mul814 = mul nsw i64 0, %add813
  %sub815 = sub nsw i64 %mul814, 1
  %cmp816 = icmp slt i64 %sub815, 0
  br i1 %cmp816, label %cond.true.818, label %cond.false.835

cond.true.818:                                    ; preds = %cond.false.812
  %119 = load i64, i64* %len, align 8
  %add819 = add nsw i64 0, %119
  %mul820 = mul nsw i64 0, %add819
  %add821 = add nsw i64 %mul820, 0
  %neg822 = xor i64 %add821, -1
  %cmp823 = icmp eq i64 %neg822, -1
  %conv824 = zext i1 %cmp823 to i32
  %sub825 = sub nsw i32 0, %conv824
  %conv826 = sext i32 %sub825 to i64
  %120 = load i64, i64* %len, align 8
  %add827 = add nsw i64 0, %120
  %mul828 = mul nsw i64 0, %add827
  %add829 = add nsw i64 %mul828, 1
  %shl830 = shl i64 %add829, 62
  %sub831 = sub nsw i64 %shl830, 1
  %mul832 = mul nsw i64 %sub831, 2
  %add833 = add nsw i64 %mul832, 1
  %sub834 = sub nsw i64 %conv826, %add833
  br label %cond.end.839

cond.false.835:                                   ; preds = %cond.false.812
  %121 = load i64, i64* %len, align 8
  %add836 = add nsw i64 0, %121
  %mul837 = mul nsw i64 0, %add836
  %add838 = add nsw i64 %mul837, 0
  br label %cond.end.839

cond.end.839:                                     ; preds = %cond.false.835, %cond.true.818
  %cond840 = phi i64 [ %sub834, %cond.true.818 ], [ %add838, %cond.false.835 ]
  %div841 = sdiv i64 %cond840, 8
  %122 = load i64, i64* %len, align 8
  %cmp842 = icmp slt i64 %div841, %122
  br i1 %cmp842, label %cond.true.918, label %lor.lhs.false.904

cond.false.844:                                   ; preds = %lor.lhs.false.783
  br i1 false, label %cond.true.845, label %cond.false.846

cond.true.845:                                    ; preds = %cond.false.844
  br i1 false, label %cond.true.918, label %lor.lhs.false.904

cond.false.846:                                   ; preds = %cond.false.844
  %123 = load i64, i64* %len, align 8
  %cmp847 = icmp slt i64 %123, 0
  br i1 %cmp847, label %cond.true.849, label %cond.false.881

cond.true.849:                                    ; preds = %cond.false.846
  %124 = load i64, i64* %len, align 8
  %125 = load i64, i64* %len, align 8
  %add850 = add nsw i64 0, %125
  %mul851 = mul nsw i64 0, %add850
  %sub852 = sub nsw i64 %mul851, 1
  %cmp853 = icmp slt i64 %sub852, 0
  br i1 %cmp853, label %cond.true.855, label %cond.false.872

cond.true.855:                                    ; preds = %cond.true.849
  %126 = load i64, i64* %len, align 8
  %add856 = add nsw i64 0, %126
  %mul857 = mul nsw i64 0, %add856
  %add858 = add nsw i64 %mul857, 0
  %neg859 = xor i64 %add858, -1
  %cmp860 = icmp eq i64 %neg859, -1
  %conv861 = zext i1 %cmp860 to i32
  %sub862 = sub nsw i32 0, %conv861
  %conv863 = sext i32 %sub862 to i64
  %127 = load i64, i64* %len, align 8
  %add864 = add nsw i64 0, %127
  %mul865 = mul nsw i64 0, %add864
  %add866 = add nsw i64 %mul865, 1
  %shl867 = shl i64 %add866, 62
  %sub868 = sub nsw i64 %shl867, 1
  %mul869 = mul nsw i64 %sub868, 2
  %add870 = add nsw i64 %mul869, 1
  %sub871 = sub nsw i64 %conv863, %add870
  br label %cond.end.876

cond.false.872:                                   ; preds = %cond.true.849
  %128 = load i64, i64* %len, align 8
  %add873 = add nsw i64 0, %128
  %mul874 = mul nsw i64 0, %add873
  %add875 = add nsw i64 %mul874, 0
  br label %cond.end.876

cond.end.876:                                     ; preds = %cond.false.872, %cond.true.855
  %cond877 = phi i64 [ %sub871, %cond.true.855 ], [ %add875, %cond.false.872 ]
  %div878 = sdiv i64 %cond877, 8
  %cmp879 = icmp slt i64 %124, %div878
  br i1 %cmp879, label %cond.true.918, label %lor.lhs.false.904

cond.false.881:                                   ; preds = %cond.false.846
  %129 = load i64, i64* %len, align 8
  %add882 = add nsw i64 0, %129
  %mul883 = mul nsw i64 0, %add882
  %sub884 = sub nsw i64 %mul883, 1
  %cmp885 = icmp slt i64 %sub884, 0
  br i1 %cmp885, label %cond.true.887, label %cond.false.895

cond.true.887:                                    ; preds = %cond.false.881
  %130 = load i64, i64* %len, align 8
  %add888 = add nsw i64 0, %130
  %mul889 = mul nsw i64 0, %add888
  %add890 = add nsw i64 %mul889, 1
  %shl891 = shl i64 %add890, 62
  %sub892 = sub nsw i64 %shl891, 1
  %mul893 = mul nsw i64 %sub892, 2
  %add894 = add nsw i64 %mul893, 1
  br label %cond.end.899

cond.false.895:                                   ; preds = %cond.false.881
  %131 = load i64, i64* %len, align 8
  %add896 = add nsw i64 0, %131
  %mul897 = mul nsw i64 0, %add896
  %sub898 = sub nsw i64 %mul897, 1
  br label %cond.end.899

cond.end.899:                                     ; preds = %cond.false.895, %cond.true.887
  %cond900 = phi i64 [ %add894, %cond.true.887 ], [ %sub898, %cond.false.895 ]
  %div901 = sdiv i64 %cond900, 8
  %132 = load i64, i64* %len, align 8
  %cmp902 = icmp slt i64 %div901, %132
  br i1 %cmp902, label %cond.true.918, label %lor.lhs.false.904

lor.lhs.false.904:                                ; preds = %cond.end.899, %cond.end.876, %cond.true.845, %cond.end.839, %cond.true.811, %cond.end.805
  %133 = load i64, i64* %len, align 8
  %mul905 = mul nsw i64 %133, 8
  %mul906 = mul nsw i64 0, %mul905
  %sub907 = sub nsw i64 %mul906, 1
  %cmp908 = icmp slt i64 %sub907, 0
  br i1 %cmp908, label %land.lhs.true.910, label %lor.lhs.false.914

land.lhs.true.910:                                ; preds = %lor.lhs.false.904
  %134 = load i64, i64* %len, align 8
  %mul911 = mul nsw i64 %134, 8
  %cmp912 = icmp slt i64 %mul911, -32768
  br i1 %cmp912, label %cond.true.918, label %lor.lhs.false.914

lor.lhs.false.914:                                ; preds = %land.lhs.true.910, %lor.lhs.false.904
  %135 = load i64, i64* %len, align 8
  %mul915 = mul nsw i64 %135, 8
  %cmp916 = icmp slt i64 32767, %mul915
  br i1 %cmp916, label %cond.true.918, label %cond.false.941

cond.true.918:                                    ; preds = %lor.lhs.false.914, %land.lhs.true.910, %cond.end.899, %cond.end.876, %cond.true.845, %cond.end.839, %cond.true.811, %cond.end.805, %land.lhs.true.780
  %136 = load i64, i64* %len, align 8
  %conv919 = trunc i64 %136 to i16
  %conv920 = zext i16 %conv919 to i32
  %mul921 = mul nsw i32 %conv920, 8
  %cmp922 = icmp sle i32 %mul921, 32767
  br i1 %cmp922, label %cond.true.924, label %cond.false.930

cond.true.924:                                    ; preds = %cond.true.918
  %137 = load i64, i64* %len, align 8
  %conv925 = trunc i64 %137 to i16
  %conv926 = zext i16 %conv925 to i32
  %mul927 = mul nsw i32 %conv926, 8
  %conv928 = trunc i32 %mul927 to i16
  %conv929 = sext i16 %conv928 to i32
  br label %cond.end.938

cond.false.930:                                   ; preds = %cond.true.918
  %138 = load i64, i64* %len, align 8
  %conv931 = trunc i64 %138 to i16
  %conv932 = zext i16 %conv931 to i32
  %mul933 = mul nsw i32 %conv932, 8
  %sub934 = sub nsw i32 %mul933, -32768
  %conv935 = trunc i32 %sub934 to i16
  %conv936 = sext i16 %conv935 to i32
  %add937 = add nsw i32 %conv936, -32768
  br label %cond.end.938

cond.end.938:                                     ; preds = %cond.false.930, %cond.true.924
  %cond939 = phi i32 [ %conv929, %cond.true.924 ], [ %add937, %cond.false.930 ]
  %conv940 = sext i32 %cond939 to i64
  store i64 %conv940, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.941:                                   ; preds = %lor.lhs.false.914
  %139 = load i64, i64* %len, align 8
  %conv942 = trunc i64 %139 to i16
  %conv943 = zext i16 %conv942 to i32
  %mul944 = mul nsw i32 %conv943, 8
  %cmp945 = icmp sle i32 %mul944, 32767
  br i1 %cmp945, label %cond.true.947, label %cond.false.953

cond.true.947:                                    ; preds = %cond.false.941
  %140 = load i64, i64* %len, align 8
  %conv948 = trunc i64 %140 to i16
  %conv949 = zext i16 %conv948 to i32
  %mul950 = mul nsw i32 %conv949, 8
  %conv951 = trunc i32 %mul950 to i16
  %conv952 = sext i16 %conv951 to i32
  br label %cond.end.961

cond.false.953:                                   ; preds = %cond.false.941
  %141 = load i64, i64* %len, align 8
  %conv954 = trunc i64 %141 to i16
  %conv955 = zext i16 %conv954 to i32
  %mul956 = mul nsw i32 %conv955, 8
  %sub957 = sub nsw i32 %mul956, -32768
  %conv958 = trunc i32 %sub957 to i16
  %conv959 = sext i16 %conv958 to i32
  %add960 = add nsw i32 %conv959, -32768
  br label %cond.end.961

cond.end.961:                                     ; preds = %cond.false.953, %cond.true.947
  %cond962 = phi i32 [ %conv952, %cond.true.947 ], [ %add960, %cond.false.953 ]
  %conv963 = sext i32 %cond962 to i64
  store i64 %conv963, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.964:                                   ; preds = %cond.false.479
  br i1 false, label %cond.true.965, label %cond.false.1393

cond.true.965:                                    ; preds = %cond.false.964
  br i1 false, label %cond.true.966, label %cond.false.1192

cond.true.966:                                    ; preds = %cond.true.965
  %142 = load i64, i64* %len, align 8
  %conv967 = trunc i64 %142 to i32
  %add968 = add nsw i32 0, %conv967
  %mul969 = mul nsw i32 0, %add968
  %sub970 = sub nsw i32 %mul969, 1
  %cmp971 = icmp slt i32 %sub970, 0
  br i1 %cmp971, label %cond.true.973, label %cond.false.991

cond.true.973:                                    ; preds = %cond.true.966
  %143 = load i64, i64* %len, align 8
  %conv974 = trunc i64 %143 to i32
  %add975 = add nsw i32 0, %conv974
  %mul976 = mul nsw i32 0, %add975
  %add977 = add nsw i32 %mul976, 0
  %neg978 = xor i32 %add977, -1
  %cmp979 = icmp eq i32 %neg978, -1
  %conv980 = zext i1 %cmp979 to i32
  %sub981 = sub nsw i32 0, %conv980
  %144 = load i64, i64* %len, align 8
  %conv982 = trunc i64 %144 to i32
  %add983 = add nsw i32 0, %conv982
  %mul984 = mul nsw i32 0, %add983
  %add985 = add nsw i32 %mul984, 1
  %shl986 = shl i32 %add985, 30
  %sub987 = sub nsw i32 %shl986, 1
  %mul988 = mul nsw i32 %sub987, 2
  %add989 = add nsw i32 %mul988, 1
  %sub990 = sub nsw i32 %sub981, %add989
  br label %cond.end.996

cond.false.991:                                   ; preds = %cond.true.966
  %145 = load i64, i64* %len, align 8
  %conv992 = trunc i64 %145 to i32
  %add993 = add nsw i32 0, %conv992
  %mul994 = mul nsw i32 0, %add993
  %add995 = add nsw i32 %mul994, 0
  br label %cond.end.996

cond.end.996:                                     ; preds = %cond.false.991, %cond.true.973
  %cond997 = phi i32 [ %sub990, %cond.true.973 ], [ %add995, %cond.false.991 ]
  %cmp998 = icmp eq i32 %cond997, 0
  br i1 %cmp998, label %land.lhs.true.1000, label %lor.lhs.false.1004

land.lhs.true.1000:                               ; preds = %cond.end.996
  %146 = load i64, i64* %len, align 8
  %conv1001 = trunc i64 %146 to i32
  %cmp1002 = icmp slt i32 %conv1001, 0
  br i1 %cmp1002, label %cond.true.1160, label %lor.lhs.false.1004

lor.lhs.false.1004:                               ; preds = %land.lhs.true.1000, %cond.end.996
  br i1 false, label %cond.true.1005, label %cond.false.1074

cond.true.1005:                                   ; preds = %lor.lhs.false.1004
  %147 = load i64, i64* %len, align 8
  %conv1006 = trunc i64 %147 to i32
  %cmp1007 = icmp slt i32 %conv1006, 0
  br i1 %cmp1007, label %cond.true.1009, label %cond.false.1036

cond.true.1009:                                   ; preds = %cond.true.1005
  %148 = load i64, i64* %len, align 8
  %conv1010 = trunc i64 %148 to i32
  %149 = load i64, i64* %len, align 8
  %conv1011 = trunc i64 %149 to i32
  %add1012 = add nsw i32 0, %conv1011
  %mul1013 = mul nsw i32 0, %add1012
  %sub1014 = sub nsw i32 %mul1013, 1
  %cmp1015 = icmp slt i32 %sub1014, 0
  br i1 %cmp1015, label %cond.true.1017, label %cond.false.1026

cond.true.1017:                                   ; preds = %cond.true.1009
  %150 = load i64, i64* %len, align 8
  %conv1018 = trunc i64 %150 to i32
  %add1019 = add nsw i32 0, %conv1018
  %mul1020 = mul nsw i32 0, %add1019
  %add1021 = add nsw i32 %mul1020, 1
  %shl1022 = shl i32 %add1021, 30
  %sub1023 = sub nsw i32 %shl1022, 1
  %mul1024 = mul nsw i32 %sub1023, 2
  %add1025 = add nsw i32 %mul1024, 1
  br label %cond.end.1031

cond.false.1026:                                  ; preds = %cond.true.1009
  %151 = load i64, i64* %len, align 8
  %conv1027 = trunc i64 %151 to i32
  %add1028 = add nsw i32 0, %conv1027
  %mul1029 = mul nsw i32 0, %add1028
  %sub1030 = sub nsw i32 %mul1029, 1
  br label %cond.end.1031

cond.end.1031:                                    ; preds = %cond.false.1026, %cond.true.1017
  %cond1032 = phi i32 [ %add1025, %cond.true.1017 ], [ %sub1030, %cond.false.1026 ]
  %div1033 = sdiv i32 %cond1032, 8
  %cmp1034 = icmp slt i32 %conv1010, %div1033
  br i1 %cmp1034, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1036:                                  ; preds = %cond.true.1005
  br i1 false, label %cond.true.1037, label %cond.false.1038

cond.true.1037:                                   ; preds = %cond.false.1036
  br i1 false, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1038:                                  ; preds = %cond.false.1036
  %152 = load i64, i64* %len, align 8
  %conv1039 = trunc i64 %152 to i32
  %add1040 = add nsw i32 0, %conv1039
  %mul1041 = mul nsw i32 0, %add1040
  %sub1042 = sub nsw i32 %mul1041, 1
  %cmp1043 = icmp slt i32 %sub1042, 0
  br i1 %cmp1043, label %cond.true.1045, label %cond.false.1063

cond.true.1045:                                   ; preds = %cond.false.1038
  %153 = load i64, i64* %len, align 8
  %conv1046 = trunc i64 %153 to i32
  %add1047 = add nsw i32 0, %conv1046
  %mul1048 = mul nsw i32 0, %add1047
  %add1049 = add nsw i32 %mul1048, 0
  %neg1050 = xor i32 %add1049, -1
  %cmp1051 = icmp eq i32 %neg1050, -1
  %conv1052 = zext i1 %cmp1051 to i32
  %sub1053 = sub nsw i32 0, %conv1052
  %154 = load i64, i64* %len, align 8
  %conv1054 = trunc i64 %154 to i32
  %add1055 = add nsw i32 0, %conv1054
  %mul1056 = mul nsw i32 0, %add1055
  %add1057 = add nsw i32 %mul1056, 1
  %shl1058 = shl i32 %add1057, 30
  %sub1059 = sub nsw i32 %shl1058, 1
  %mul1060 = mul nsw i32 %sub1059, 2
  %add1061 = add nsw i32 %mul1060, 1
  %sub1062 = sub nsw i32 %sub1053, %add1061
  br label %cond.end.1068

cond.false.1063:                                  ; preds = %cond.false.1038
  %155 = load i64, i64* %len, align 8
  %conv1064 = trunc i64 %155 to i32
  %add1065 = add nsw i32 0, %conv1064
  %mul1066 = mul nsw i32 0, %add1065
  %add1067 = add nsw i32 %mul1066, 0
  br label %cond.end.1068

cond.end.1068:                                    ; preds = %cond.false.1063, %cond.true.1045
  %cond1069 = phi i32 [ %sub1062, %cond.true.1045 ], [ %add1067, %cond.false.1063 ]
  %div1070 = sdiv i32 %cond1069, 8
  %156 = load i64, i64* %len, align 8
  %conv1071 = trunc i64 %156 to i32
  %cmp1072 = icmp slt i32 %div1070, %conv1071
  br i1 %cmp1072, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1074:                                  ; preds = %lor.lhs.false.1004
  br i1 false, label %cond.true.1075, label %cond.false.1076

cond.true.1075:                                   ; preds = %cond.false.1074
  br i1 false, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1076:                                  ; preds = %cond.false.1074
  %157 = load i64, i64* %len, align 8
  %conv1077 = trunc i64 %157 to i32
  %cmp1078 = icmp slt i32 %conv1077, 0
  br i1 %cmp1078, label %cond.true.1080, label %cond.false.1116

cond.true.1080:                                   ; preds = %cond.false.1076
  %158 = load i64, i64* %len, align 8
  %conv1081 = trunc i64 %158 to i32
  %159 = load i64, i64* %len, align 8
  %conv1082 = trunc i64 %159 to i32
  %add1083 = add nsw i32 0, %conv1082
  %mul1084 = mul nsw i32 0, %add1083
  %sub1085 = sub nsw i32 %mul1084, 1
  %cmp1086 = icmp slt i32 %sub1085, 0
  br i1 %cmp1086, label %cond.true.1088, label %cond.false.1106

cond.true.1088:                                   ; preds = %cond.true.1080
  %160 = load i64, i64* %len, align 8
  %conv1089 = trunc i64 %160 to i32
  %add1090 = add nsw i32 0, %conv1089
  %mul1091 = mul nsw i32 0, %add1090
  %add1092 = add nsw i32 %mul1091, 0
  %neg1093 = xor i32 %add1092, -1
  %cmp1094 = icmp eq i32 %neg1093, -1
  %conv1095 = zext i1 %cmp1094 to i32
  %sub1096 = sub nsw i32 0, %conv1095
  %161 = load i64, i64* %len, align 8
  %conv1097 = trunc i64 %161 to i32
  %add1098 = add nsw i32 0, %conv1097
  %mul1099 = mul nsw i32 0, %add1098
  %add1100 = add nsw i32 %mul1099, 1
  %shl1101 = shl i32 %add1100, 30
  %sub1102 = sub nsw i32 %shl1101, 1
  %mul1103 = mul nsw i32 %sub1102, 2
  %add1104 = add nsw i32 %mul1103, 1
  %sub1105 = sub nsw i32 %sub1096, %add1104
  br label %cond.end.1111

cond.false.1106:                                  ; preds = %cond.true.1080
  %162 = load i64, i64* %len, align 8
  %conv1107 = trunc i64 %162 to i32
  %add1108 = add nsw i32 0, %conv1107
  %mul1109 = mul nsw i32 0, %add1108
  %add1110 = add nsw i32 %mul1109, 0
  br label %cond.end.1111

cond.end.1111:                                    ; preds = %cond.false.1106, %cond.true.1088
  %cond1112 = phi i32 [ %sub1105, %cond.true.1088 ], [ %add1110, %cond.false.1106 ]
  %div1113 = sdiv i32 %cond1112, 8
  %cmp1114 = icmp slt i32 %conv1081, %div1113
  br i1 %cmp1114, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1116:                                  ; preds = %cond.false.1076
  %163 = load i64, i64* %len, align 8
  %conv1117 = trunc i64 %163 to i32
  %add1118 = add nsw i32 0, %conv1117
  %mul1119 = mul nsw i32 0, %add1118
  %sub1120 = sub nsw i32 %mul1119, 1
  %cmp1121 = icmp slt i32 %sub1120, 0
  br i1 %cmp1121, label %cond.true.1123, label %cond.false.1132

cond.true.1123:                                   ; preds = %cond.false.1116
  %164 = load i64, i64* %len, align 8
  %conv1124 = trunc i64 %164 to i32
  %add1125 = add nsw i32 0, %conv1124
  %mul1126 = mul nsw i32 0, %add1125
  %add1127 = add nsw i32 %mul1126, 1
  %shl1128 = shl i32 %add1127, 30
  %sub1129 = sub nsw i32 %shl1128, 1
  %mul1130 = mul nsw i32 %sub1129, 2
  %add1131 = add nsw i32 %mul1130, 1
  br label %cond.end.1137

cond.false.1132:                                  ; preds = %cond.false.1116
  %165 = load i64, i64* %len, align 8
  %conv1133 = trunc i64 %165 to i32
  %add1134 = add nsw i32 0, %conv1133
  %mul1135 = mul nsw i32 0, %add1134
  %sub1136 = sub nsw i32 %mul1135, 1
  br label %cond.end.1137

cond.end.1137:                                    ; preds = %cond.false.1132, %cond.true.1123
  %cond1138 = phi i32 [ %add1131, %cond.true.1123 ], [ %sub1136, %cond.false.1132 ]
  %div1139 = sdiv i32 %cond1138, 8
  %166 = load i64, i64* %len, align 8
  %conv1140 = trunc i64 %166 to i32
  %cmp1141 = icmp slt i32 %div1139, %conv1140
  br i1 %cmp1141, label %cond.true.1160, label %lor.lhs.false.1143

lor.lhs.false.1143:                               ; preds = %cond.end.1137, %cond.end.1111, %cond.true.1075, %cond.end.1068, %cond.true.1037, %cond.end.1031
  %167 = load i64, i64* %len, align 8
  %conv1144 = trunc i64 %167 to i32
  %mul1145 = mul nsw i32 %conv1144, 8
  %mul1146 = mul nsw i32 0, %mul1145
  %sub1147 = sub nsw i32 %mul1146, 1
  %cmp1148 = icmp slt i32 %sub1147, 0
  br i1 %cmp1148, label %land.lhs.true.1150, label %lor.lhs.false.1155

land.lhs.true.1150:                               ; preds = %lor.lhs.false.1143
  %168 = load i64, i64* %len, align 8
  %conv1151 = trunc i64 %168 to i32
  %mul1152 = mul nsw i32 %conv1151, 8
  %cmp1153 = icmp slt i32 %mul1152, -2147483648
  br i1 %cmp1153, label %cond.true.1160, label %lor.lhs.false.1155

lor.lhs.false.1155:                               ; preds = %land.lhs.true.1150, %lor.lhs.false.1143
  %169 = load i64, i64* %len, align 8
  %conv1156 = trunc i64 %169 to i32
  %mul1157 = mul nsw i32 %conv1156, 8
  %cmp1158 = icmp slt i32 2147483647, %mul1157
  br i1 %cmp1158, label %cond.true.1160, label %cond.false.1176

cond.true.1160:                                   ; preds = %lor.lhs.false.1155, %land.lhs.true.1150, %cond.end.1137, %cond.end.1111, %cond.true.1075, %cond.end.1068, %cond.true.1037, %cond.end.1031, %land.lhs.true.1000
  %170 = load i64, i64* %len, align 8
  %conv1161 = trunc i64 %170 to i32
  %mul1162 = mul i32 %conv1161, 8
  %cmp1163 = icmp ule i32 %mul1162, 2147483647
  br i1 %cmp1163, label %cond.true.1165, label %cond.false.1168

cond.true.1165:                                   ; preds = %cond.true.1160
  %171 = load i64, i64* %len, align 8
  %conv1166 = trunc i64 %171 to i32
  %mul1167 = mul i32 %conv1166, 8
  br label %cond.end.1173

cond.false.1168:                                  ; preds = %cond.true.1160
  %172 = load i64, i64* %len, align 8
  %conv1169 = trunc i64 %172 to i32
  %mul1170 = mul i32 %conv1169, 8
  %sub1171 = sub i32 %mul1170, -2147483648
  %add1172 = add nsw i32 %sub1171, -2147483648
  br label %cond.end.1173

cond.end.1173:                                    ; preds = %cond.false.1168, %cond.true.1165
  %cond1174 = phi i32 [ %mul1167, %cond.true.1165 ], [ %add1172, %cond.false.1168 ]
  %conv1175 = sext i32 %cond1174 to i64
  store i64 %conv1175, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1176:                                  ; preds = %lor.lhs.false.1155
  %173 = load i64, i64* %len, align 8
  %conv1177 = trunc i64 %173 to i32
  %mul1178 = mul i32 %conv1177, 8
  %cmp1179 = icmp ule i32 %mul1178, 2147483647
  br i1 %cmp1179, label %cond.true.1181, label %cond.false.1184

cond.true.1181:                                   ; preds = %cond.false.1176
  %174 = load i64, i64* %len, align 8
  %conv1182 = trunc i64 %174 to i32
  %mul1183 = mul i32 %conv1182, 8
  br label %cond.end.1189

cond.false.1184:                                  ; preds = %cond.false.1176
  %175 = load i64, i64* %len, align 8
  %conv1185 = trunc i64 %175 to i32
  %mul1186 = mul i32 %conv1185, 8
  %sub1187 = sub i32 %mul1186, -2147483648
  %add1188 = add nsw i32 %sub1187, -2147483648
  br label %cond.end.1189

cond.end.1189:                                    ; preds = %cond.false.1184, %cond.true.1181
  %cond1190 = phi i32 [ %mul1183, %cond.true.1181 ], [ %add1188, %cond.false.1184 ]
  %conv1191 = sext i32 %cond1190 to i64
  store i64 %conv1191, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1192:                                  ; preds = %cond.true.965
  %176 = load i64, i64* %len, align 8
  %add1193 = add nsw i64 0, %176
  %mul1194 = mul nsw i64 0, %add1193
  %sub1195 = sub nsw i64 %mul1194, 1
  %cmp1196 = icmp slt i64 %sub1195, 0
  br i1 %cmp1196, label %cond.true.1198, label %cond.false.1215

cond.true.1198:                                   ; preds = %cond.false.1192
  %177 = load i64, i64* %len, align 8
  %add1199 = add nsw i64 0, %177
  %mul1200 = mul nsw i64 0, %add1199
  %add1201 = add nsw i64 %mul1200, 0
  %neg1202 = xor i64 %add1201, -1
  %cmp1203 = icmp eq i64 %neg1202, -1
  %conv1204 = zext i1 %cmp1203 to i32
  %sub1205 = sub nsw i32 0, %conv1204
  %conv1206 = sext i32 %sub1205 to i64
  %178 = load i64, i64* %len, align 8
  %add1207 = add nsw i64 0, %178
  %mul1208 = mul nsw i64 0, %add1207
  %add1209 = add nsw i64 %mul1208, 1
  %shl1210 = shl i64 %add1209, 62
  %sub1211 = sub nsw i64 %shl1210, 1
  %mul1212 = mul nsw i64 %sub1211, 2
  %add1213 = add nsw i64 %mul1212, 1
  %sub1214 = sub nsw i64 %conv1206, %add1213
  br label %cond.end.1219

cond.false.1215:                                  ; preds = %cond.false.1192
  %179 = load i64, i64* %len, align 8
  %add1216 = add nsw i64 0, %179
  %mul1217 = mul nsw i64 0, %add1216
  %add1218 = add nsw i64 %mul1217, 0
  br label %cond.end.1219

cond.end.1219:                                    ; preds = %cond.false.1215, %cond.true.1198
  %cond1220 = phi i64 [ %sub1214, %cond.true.1198 ], [ %add1218, %cond.false.1215 ]
  %cmp1221 = icmp eq i64 %cond1220, 0
  br i1 %cmp1221, label %land.lhs.true.1223, label %lor.lhs.false.1226

land.lhs.true.1223:                               ; preds = %cond.end.1219
  %180 = load i64, i64* %len, align 8
  %cmp1224 = icmp slt i64 %180, 0
  br i1 %cmp1224, label %cond.true.1361, label %lor.lhs.false.1226

lor.lhs.false.1226:                               ; preds = %land.lhs.true.1223, %cond.end.1219
  br i1 false, label %cond.true.1227, label %cond.false.1287

cond.true.1227:                                   ; preds = %lor.lhs.false.1226
  %181 = load i64, i64* %len, align 8
  %cmp1228 = icmp slt i64 %181, 0
  br i1 %cmp1228, label %cond.true.1230, label %cond.false.1253

cond.true.1230:                                   ; preds = %cond.true.1227
  %182 = load i64, i64* %len, align 8
  %183 = load i64, i64* %len, align 8
  %add1231 = add nsw i64 0, %183
  %mul1232 = mul nsw i64 0, %add1231
  %sub1233 = sub nsw i64 %mul1232, 1
  %cmp1234 = icmp slt i64 %sub1233, 0
  br i1 %cmp1234, label %cond.true.1236, label %cond.false.1244

cond.true.1236:                                   ; preds = %cond.true.1230
  %184 = load i64, i64* %len, align 8
  %add1237 = add nsw i64 0, %184
  %mul1238 = mul nsw i64 0, %add1237
  %add1239 = add nsw i64 %mul1238, 1
  %shl1240 = shl i64 %add1239, 62
  %sub1241 = sub nsw i64 %shl1240, 1
  %mul1242 = mul nsw i64 %sub1241, 2
  %add1243 = add nsw i64 %mul1242, 1
  br label %cond.end.1248

cond.false.1244:                                  ; preds = %cond.true.1230
  %185 = load i64, i64* %len, align 8
  %add1245 = add nsw i64 0, %185
  %mul1246 = mul nsw i64 0, %add1245
  %sub1247 = sub nsw i64 %mul1246, 1
  br label %cond.end.1248

cond.end.1248:                                    ; preds = %cond.false.1244, %cond.true.1236
  %cond1249 = phi i64 [ %add1243, %cond.true.1236 ], [ %sub1247, %cond.false.1244 ]
  %div1250 = sdiv i64 %cond1249, 8
  %cmp1251 = icmp slt i64 %182, %div1250
  br i1 %cmp1251, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1253:                                  ; preds = %cond.true.1227
  br i1 false, label %cond.true.1254, label %cond.false.1255

cond.true.1254:                                   ; preds = %cond.false.1253
  br i1 false, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1255:                                  ; preds = %cond.false.1253
  %186 = load i64, i64* %len, align 8
  %add1256 = add nsw i64 0, %186
  %mul1257 = mul nsw i64 0, %add1256
  %sub1258 = sub nsw i64 %mul1257, 1
  %cmp1259 = icmp slt i64 %sub1258, 0
  br i1 %cmp1259, label %cond.true.1261, label %cond.false.1278

cond.true.1261:                                   ; preds = %cond.false.1255
  %187 = load i64, i64* %len, align 8
  %add1262 = add nsw i64 0, %187
  %mul1263 = mul nsw i64 0, %add1262
  %add1264 = add nsw i64 %mul1263, 0
  %neg1265 = xor i64 %add1264, -1
  %cmp1266 = icmp eq i64 %neg1265, -1
  %conv1267 = zext i1 %cmp1266 to i32
  %sub1268 = sub nsw i32 0, %conv1267
  %conv1269 = sext i32 %sub1268 to i64
  %188 = load i64, i64* %len, align 8
  %add1270 = add nsw i64 0, %188
  %mul1271 = mul nsw i64 0, %add1270
  %add1272 = add nsw i64 %mul1271, 1
  %shl1273 = shl i64 %add1272, 62
  %sub1274 = sub nsw i64 %shl1273, 1
  %mul1275 = mul nsw i64 %sub1274, 2
  %add1276 = add nsw i64 %mul1275, 1
  %sub1277 = sub nsw i64 %conv1269, %add1276
  br label %cond.end.1282

cond.false.1278:                                  ; preds = %cond.false.1255
  %189 = load i64, i64* %len, align 8
  %add1279 = add nsw i64 0, %189
  %mul1280 = mul nsw i64 0, %add1279
  %add1281 = add nsw i64 %mul1280, 0
  br label %cond.end.1282

cond.end.1282:                                    ; preds = %cond.false.1278, %cond.true.1261
  %cond1283 = phi i64 [ %sub1277, %cond.true.1261 ], [ %add1281, %cond.false.1278 ]
  %div1284 = sdiv i64 %cond1283, 8
  %190 = load i64, i64* %len, align 8
  %cmp1285 = icmp slt i64 %div1284, %190
  br i1 %cmp1285, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1287:                                  ; preds = %lor.lhs.false.1226
  br i1 false, label %cond.true.1288, label %cond.false.1289

cond.true.1288:                                   ; preds = %cond.false.1287
  br i1 false, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1289:                                  ; preds = %cond.false.1287
  %191 = load i64, i64* %len, align 8
  %cmp1290 = icmp slt i64 %191, 0
  br i1 %cmp1290, label %cond.true.1292, label %cond.false.1324

cond.true.1292:                                   ; preds = %cond.false.1289
  %192 = load i64, i64* %len, align 8
  %193 = load i64, i64* %len, align 8
  %add1293 = add nsw i64 0, %193
  %mul1294 = mul nsw i64 0, %add1293
  %sub1295 = sub nsw i64 %mul1294, 1
  %cmp1296 = icmp slt i64 %sub1295, 0
  br i1 %cmp1296, label %cond.true.1298, label %cond.false.1315

cond.true.1298:                                   ; preds = %cond.true.1292
  %194 = load i64, i64* %len, align 8
  %add1299 = add nsw i64 0, %194
  %mul1300 = mul nsw i64 0, %add1299
  %add1301 = add nsw i64 %mul1300, 0
  %neg1302 = xor i64 %add1301, -1
  %cmp1303 = icmp eq i64 %neg1302, -1
  %conv1304 = zext i1 %cmp1303 to i32
  %sub1305 = sub nsw i32 0, %conv1304
  %conv1306 = sext i32 %sub1305 to i64
  %195 = load i64, i64* %len, align 8
  %add1307 = add nsw i64 0, %195
  %mul1308 = mul nsw i64 0, %add1307
  %add1309 = add nsw i64 %mul1308, 1
  %shl1310 = shl i64 %add1309, 62
  %sub1311 = sub nsw i64 %shl1310, 1
  %mul1312 = mul nsw i64 %sub1311, 2
  %add1313 = add nsw i64 %mul1312, 1
  %sub1314 = sub nsw i64 %conv1306, %add1313
  br label %cond.end.1319

cond.false.1315:                                  ; preds = %cond.true.1292
  %196 = load i64, i64* %len, align 8
  %add1316 = add nsw i64 0, %196
  %mul1317 = mul nsw i64 0, %add1316
  %add1318 = add nsw i64 %mul1317, 0
  br label %cond.end.1319

cond.end.1319:                                    ; preds = %cond.false.1315, %cond.true.1298
  %cond1320 = phi i64 [ %sub1314, %cond.true.1298 ], [ %add1318, %cond.false.1315 ]
  %div1321 = sdiv i64 %cond1320, 8
  %cmp1322 = icmp slt i64 %192, %div1321
  br i1 %cmp1322, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1324:                                  ; preds = %cond.false.1289
  %197 = load i64, i64* %len, align 8
  %add1325 = add nsw i64 0, %197
  %mul1326 = mul nsw i64 0, %add1325
  %sub1327 = sub nsw i64 %mul1326, 1
  %cmp1328 = icmp slt i64 %sub1327, 0
  br i1 %cmp1328, label %cond.true.1330, label %cond.false.1338

cond.true.1330:                                   ; preds = %cond.false.1324
  %198 = load i64, i64* %len, align 8
  %add1331 = add nsw i64 0, %198
  %mul1332 = mul nsw i64 0, %add1331
  %add1333 = add nsw i64 %mul1332, 1
  %shl1334 = shl i64 %add1333, 62
  %sub1335 = sub nsw i64 %shl1334, 1
  %mul1336 = mul nsw i64 %sub1335, 2
  %add1337 = add nsw i64 %mul1336, 1
  br label %cond.end.1342

cond.false.1338:                                  ; preds = %cond.false.1324
  %199 = load i64, i64* %len, align 8
  %add1339 = add nsw i64 0, %199
  %mul1340 = mul nsw i64 0, %add1339
  %sub1341 = sub nsw i64 %mul1340, 1
  br label %cond.end.1342

cond.end.1342:                                    ; preds = %cond.false.1338, %cond.true.1330
  %cond1343 = phi i64 [ %add1337, %cond.true.1330 ], [ %sub1341, %cond.false.1338 ]
  %div1344 = sdiv i64 %cond1343, 8
  %200 = load i64, i64* %len, align 8
  %cmp1345 = icmp slt i64 %div1344, %200
  br i1 %cmp1345, label %cond.true.1361, label %lor.lhs.false.1347

lor.lhs.false.1347:                               ; preds = %cond.end.1342, %cond.end.1319, %cond.true.1288, %cond.end.1282, %cond.true.1254, %cond.end.1248
  %201 = load i64, i64* %len, align 8
  %mul1348 = mul nsw i64 %201, 8
  %mul1349 = mul nsw i64 0, %mul1348
  %sub1350 = sub nsw i64 %mul1349, 1
  %cmp1351 = icmp slt i64 %sub1350, 0
  br i1 %cmp1351, label %land.lhs.true.1353, label %lor.lhs.false.1357

land.lhs.true.1353:                               ; preds = %lor.lhs.false.1347
  %202 = load i64, i64* %len, align 8
  %mul1354 = mul nsw i64 %202, 8
  %cmp1355 = icmp slt i64 %mul1354, -2147483648
  br i1 %cmp1355, label %cond.true.1361, label %lor.lhs.false.1357

lor.lhs.false.1357:                               ; preds = %land.lhs.true.1353, %lor.lhs.false.1347
  %203 = load i64, i64* %len, align 8
  %mul1358 = mul nsw i64 %203, 8
  %cmp1359 = icmp slt i64 2147483647, %mul1358
  br i1 %cmp1359, label %cond.true.1361, label %cond.false.1377

cond.true.1361:                                   ; preds = %lor.lhs.false.1357, %land.lhs.true.1353, %cond.end.1342, %cond.end.1319, %cond.true.1288, %cond.end.1282, %cond.true.1254, %cond.end.1248, %land.lhs.true.1223
  %204 = load i64, i64* %len, align 8
  %conv1362 = trunc i64 %204 to i32
  %mul1363 = mul i32 %conv1362, 8
  %cmp1364 = icmp ule i32 %mul1363, 2147483647
  br i1 %cmp1364, label %cond.true.1366, label %cond.false.1369

cond.true.1366:                                   ; preds = %cond.true.1361
  %205 = load i64, i64* %len, align 8
  %conv1367 = trunc i64 %205 to i32
  %mul1368 = mul i32 %conv1367, 8
  br label %cond.end.1374

cond.false.1369:                                  ; preds = %cond.true.1361
  %206 = load i64, i64* %len, align 8
  %conv1370 = trunc i64 %206 to i32
  %mul1371 = mul i32 %conv1370, 8
  %sub1372 = sub i32 %mul1371, -2147483648
  %add1373 = add nsw i32 %sub1372, -2147483648
  br label %cond.end.1374

cond.end.1374:                                    ; preds = %cond.false.1369, %cond.true.1366
  %cond1375 = phi i32 [ %mul1368, %cond.true.1366 ], [ %add1373, %cond.false.1369 ]
  %conv1376 = sext i32 %cond1375 to i64
  store i64 %conv1376, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1377:                                  ; preds = %lor.lhs.false.1357
  %207 = load i64, i64* %len, align 8
  %conv1378 = trunc i64 %207 to i32
  %mul1379 = mul i32 %conv1378, 8
  %cmp1380 = icmp ule i32 %mul1379, 2147483647
  br i1 %cmp1380, label %cond.true.1382, label %cond.false.1385

cond.true.1382:                                   ; preds = %cond.false.1377
  %208 = load i64, i64* %len, align 8
  %conv1383 = trunc i64 %208 to i32
  %mul1384 = mul i32 %conv1383, 8
  br label %cond.end.1390

cond.false.1385:                                  ; preds = %cond.false.1377
  %209 = load i64, i64* %len, align 8
  %conv1386 = trunc i64 %209 to i32
  %mul1387 = mul i32 %conv1386, 8
  %sub1388 = sub i32 %mul1387, -2147483648
  %add1389 = add nsw i32 %sub1388, -2147483648
  br label %cond.end.1390

cond.end.1390:                                    ; preds = %cond.false.1385, %cond.true.1382
  %cond1391 = phi i32 [ %mul1384, %cond.true.1382 ], [ %add1389, %cond.false.1385 ]
  %conv1392 = sext i32 %cond1391 to i64
  store i64 %conv1392, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1393:                                  ; preds = %cond.false.964
  br i1 true, label %cond.true.1394, label %cond.false.1781

cond.true.1394:                                   ; preds = %cond.false.1393
  br i1 false, label %cond.true.1395, label %cond.false.1588

cond.true.1395:                                   ; preds = %cond.true.1394
  %210 = load i64, i64* %len, align 8
  %add1396 = add nsw i64 0, %210
  %mul1397 = mul nsw i64 0, %add1396
  %sub1398 = sub nsw i64 %mul1397, 1
  %cmp1399 = icmp slt i64 %sub1398, 0
  br i1 %cmp1399, label %cond.true.1401, label %cond.false.1418

cond.true.1401:                                   ; preds = %cond.true.1395
  %211 = load i64, i64* %len, align 8
  %add1402 = add nsw i64 0, %211
  %mul1403 = mul nsw i64 0, %add1402
  %add1404 = add nsw i64 %mul1403, 0
  %neg1405 = xor i64 %add1404, -1
  %cmp1406 = icmp eq i64 %neg1405, -1
  %conv1407 = zext i1 %cmp1406 to i32
  %sub1408 = sub nsw i32 0, %conv1407
  %conv1409 = sext i32 %sub1408 to i64
  %212 = load i64, i64* %len, align 8
  %add1410 = add nsw i64 0, %212
  %mul1411 = mul nsw i64 0, %add1410
  %add1412 = add nsw i64 %mul1411, 1
  %shl1413 = shl i64 %add1412, 62
  %sub1414 = sub nsw i64 %shl1413, 1
  %mul1415 = mul nsw i64 %sub1414, 2
  %add1416 = add nsw i64 %mul1415, 1
  %sub1417 = sub nsw i64 %conv1409, %add1416
  br label %cond.end.1422

cond.false.1418:                                  ; preds = %cond.true.1395
  %213 = load i64, i64* %len, align 8
  %add1419 = add nsw i64 0, %213
  %mul1420 = mul nsw i64 0, %add1419
  %add1421 = add nsw i64 %mul1420, 0
  br label %cond.end.1422

cond.end.1422:                                    ; preds = %cond.false.1418, %cond.true.1401
  %cond1423 = phi i64 [ %sub1417, %cond.true.1401 ], [ %add1421, %cond.false.1418 ]
  %cmp1424 = icmp eq i64 %cond1423, 0
  br i1 %cmp1424, label %land.lhs.true.1426, label %lor.lhs.false.1429

land.lhs.true.1426:                               ; preds = %cond.end.1422
  %214 = load i64, i64* %len, align 8
  %cmp1427 = icmp slt i64 %214, 0
  br i1 %cmp1427, label %cond.true.1564, label %lor.lhs.false.1429

lor.lhs.false.1429:                               ; preds = %land.lhs.true.1426, %cond.end.1422
  br i1 false, label %cond.true.1430, label %cond.false.1490

cond.true.1430:                                   ; preds = %lor.lhs.false.1429
  %215 = load i64, i64* %len, align 8
  %cmp1431 = icmp slt i64 %215, 0
  br i1 %cmp1431, label %cond.true.1433, label %cond.false.1456

cond.true.1433:                                   ; preds = %cond.true.1430
  %216 = load i64, i64* %len, align 8
  %217 = load i64, i64* %len, align 8
  %add1434 = add nsw i64 0, %217
  %mul1435 = mul nsw i64 0, %add1434
  %sub1436 = sub nsw i64 %mul1435, 1
  %cmp1437 = icmp slt i64 %sub1436, 0
  br i1 %cmp1437, label %cond.true.1439, label %cond.false.1447

cond.true.1439:                                   ; preds = %cond.true.1433
  %218 = load i64, i64* %len, align 8
  %add1440 = add nsw i64 0, %218
  %mul1441 = mul nsw i64 0, %add1440
  %add1442 = add nsw i64 %mul1441, 1
  %shl1443 = shl i64 %add1442, 62
  %sub1444 = sub nsw i64 %shl1443, 1
  %mul1445 = mul nsw i64 %sub1444, 2
  %add1446 = add nsw i64 %mul1445, 1
  br label %cond.end.1451

cond.false.1447:                                  ; preds = %cond.true.1433
  %219 = load i64, i64* %len, align 8
  %add1448 = add nsw i64 0, %219
  %mul1449 = mul nsw i64 0, %add1448
  %sub1450 = sub nsw i64 %mul1449, 1
  br label %cond.end.1451

cond.end.1451:                                    ; preds = %cond.false.1447, %cond.true.1439
  %cond1452 = phi i64 [ %add1446, %cond.true.1439 ], [ %sub1450, %cond.false.1447 ]
  %div1453 = sdiv i64 %cond1452, 8
  %cmp1454 = icmp slt i64 %216, %div1453
  br i1 %cmp1454, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1456:                                  ; preds = %cond.true.1430
  br i1 false, label %cond.true.1457, label %cond.false.1458

cond.true.1457:                                   ; preds = %cond.false.1456
  br i1 false, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1458:                                  ; preds = %cond.false.1456
  %220 = load i64, i64* %len, align 8
  %add1459 = add nsw i64 0, %220
  %mul1460 = mul nsw i64 0, %add1459
  %sub1461 = sub nsw i64 %mul1460, 1
  %cmp1462 = icmp slt i64 %sub1461, 0
  br i1 %cmp1462, label %cond.true.1464, label %cond.false.1481

cond.true.1464:                                   ; preds = %cond.false.1458
  %221 = load i64, i64* %len, align 8
  %add1465 = add nsw i64 0, %221
  %mul1466 = mul nsw i64 0, %add1465
  %add1467 = add nsw i64 %mul1466, 0
  %neg1468 = xor i64 %add1467, -1
  %cmp1469 = icmp eq i64 %neg1468, -1
  %conv1470 = zext i1 %cmp1469 to i32
  %sub1471 = sub nsw i32 0, %conv1470
  %conv1472 = sext i32 %sub1471 to i64
  %222 = load i64, i64* %len, align 8
  %add1473 = add nsw i64 0, %222
  %mul1474 = mul nsw i64 0, %add1473
  %add1475 = add nsw i64 %mul1474, 1
  %shl1476 = shl i64 %add1475, 62
  %sub1477 = sub nsw i64 %shl1476, 1
  %mul1478 = mul nsw i64 %sub1477, 2
  %add1479 = add nsw i64 %mul1478, 1
  %sub1480 = sub nsw i64 %conv1472, %add1479
  br label %cond.end.1485

cond.false.1481:                                  ; preds = %cond.false.1458
  %223 = load i64, i64* %len, align 8
  %add1482 = add nsw i64 0, %223
  %mul1483 = mul nsw i64 0, %add1482
  %add1484 = add nsw i64 %mul1483, 0
  br label %cond.end.1485

cond.end.1485:                                    ; preds = %cond.false.1481, %cond.true.1464
  %cond1486 = phi i64 [ %sub1480, %cond.true.1464 ], [ %add1484, %cond.false.1481 ]
  %div1487 = sdiv i64 %cond1486, 8
  %224 = load i64, i64* %len, align 8
  %cmp1488 = icmp slt i64 %div1487, %224
  br i1 %cmp1488, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1490:                                  ; preds = %lor.lhs.false.1429
  br i1 false, label %cond.true.1491, label %cond.false.1492

cond.true.1491:                                   ; preds = %cond.false.1490
  br i1 false, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1492:                                  ; preds = %cond.false.1490
  %225 = load i64, i64* %len, align 8
  %cmp1493 = icmp slt i64 %225, 0
  br i1 %cmp1493, label %cond.true.1495, label %cond.false.1527

cond.true.1495:                                   ; preds = %cond.false.1492
  %226 = load i64, i64* %len, align 8
  %227 = load i64, i64* %len, align 8
  %add1496 = add nsw i64 0, %227
  %mul1497 = mul nsw i64 0, %add1496
  %sub1498 = sub nsw i64 %mul1497, 1
  %cmp1499 = icmp slt i64 %sub1498, 0
  br i1 %cmp1499, label %cond.true.1501, label %cond.false.1518

cond.true.1501:                                   ; preds = %cond.true.1495
  %228 = load i64, i64* %len, align 8
  %add1502 = add nsw i64 0, %228
  %mul1503 = mul nsw i64 0, %add1502
  %add1504 = add nsw i64 %mul1503, 0
  %neg1505 = xor i64 %add1504, -1
  %cmp1506 = icmp eq i64 %neg1505, -1
  %conv1507 = zext i1 %cmp1506 to i32
  %sub1508 = sub nsw i32 0, %conv1507
  %conv1509 = sext i32 %sub1508 to i64
  %229 = load i64, i64* %len, align 8
  %add1510 = add nsw i64 0, %229
  %mul1511 = mul nsw i64 0, %add1510
  %add1512 = add nsw i64 %mul1511, 1
  %shl1513 = shl i64 %add1512, 62
  %sub1514 = sub nsw i64 %shl1513, 1
  %mul1515 = mul nsw i64 %sub1514, 2
  %add1516 = add nsw i64 %mul1515, 1
  %sub1517 = sub nsw i64 %conv1509, %add1516
  br label %cond.end.1522

cond.false.1518:                                  ; preds = %cond.true.1495
  %230 = load i64, i64* %len, align 8
  %add1519 = add nsw i64 0, %230
  %mul1520 = mul nsw i64 0, %add1519
  %add1521 = add nsw i64 %mul1520, 0
  br label %cond.end.1522

cond.end.1522:                                    ; preds = %cond.false.1518, %cond.true.1501
  %cond1523 = phi i64 [ %sub1517, %cond.true.1501 ], [ %add1521, %cond.false.1518 ]
  %div1524 = sdiv i64 %cond1523, 8
  %cmp1525 = icmp slt i64 %226, %div1524
  br i1 %cmp1525, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1527:                                  ; preds = %cond.false.1492
  %231 = load i64, i64* %len, align 8
  %add1528 = add nsw i64 0, %231
  %mul1529 = mul nsw i64 0, %add1528
  %sub1530 = sub nsw i64 %mul1529, 1
  %cmp1531 = icmp slt i64 %sub1530, 0
  br i1 %cmp1531, label %cond.true.1533, label %cond.false.1541

cond.true.1533:                                   ; preds = %cond.false.1527
  %232 = load i64, i64* %len, align 8
  %add1534 = add nsw i64 0, %232
  %mul1535 = mul nsw i64 0, %add1534
  %add1536 = add nsw i64 %mul1535, 1
  %shl1537 = shl i64 %add1536, 62
  %sub1538 = sub nsw i64 %shl1537, 1
  %mul1539 = mul nsw i64 %sub1538, 2
  %add1540 = add nsw i64 %mul1539, 1
  br label %cond.end.1545

cond.false.1541:                                  ; preds = %cond.false.1527
  %233 = load i64, i64* %len, align 8
  %add1542 = add nsw i64 0, %233
  %mul1543 = mul nsw i64 0, %add1542
  %sub1544 = sub nsw i64 %mul1543, 1
  br label %cond.end.1545

cond.end.1545:                                    ; preds = %cond.false.1541, %cond.true.1533
  %cond1546 = phi i64 [ %add1540, %cond.true.1533 ], [ %sub1544, %cond.false.1541 ]
  %div1547 = sdiv i64 %cond1546, 8
  %234 = load i64, i64* %len, align 8
  %cmp1548 = icmp slt i64 %div1547, %234
  br i1 %cmp1548, label %cond.true.1564, label %lor.lhs.false.1550

lor.lhs.false.1550:                               ; preds = %cond.end.1545, %cond.end.1522, %cond.true.1491, %cond.end.1485, %cond.true.1457, %cond.end.1451
  %235 = load i64, i64* %len, align 8
  %mul1551 = mul nsw i64 %235, 8
  %mul1552 = mul nsw i64 0, %mul1551
  %sub1553 = sub nsw i64 %mul1552, 1
  %cmp1554 = icmp slt i64 %sub1553, 0
  br i1 %cmp1554, label %land.lhs.true.1556, label %lor.lhs.false.1560

land.lhs.true.1556:                               ; preds = %lor.lhs.false.1550
  %236 = load i64, i64* %len, align 8
  %mul1557 = mul nsw i64 %236, 8
  %cmp1558 = icmp slt i64 %mul1557, -9223372036854775808
  br i1 %cmp1558, label %cond.true.1564, label %lor.lhs.false.1560

lor.lhs.false.1560:                               ; preds = %land.lhs.true.1556, %lor.lhs.false.1550
  %237 = load i64, i64* %len, align 8
  %mul1561 = mul nsw i64 %237, 8
  %cmp1562 = icmp slt i64 9223372036854775807, %mul1561
  br i1 %cmp1562, label %cond.true.1564, label %cond.false.1576

cond.true.1564:                                   ; preds = %lor.lhs.false.1560, %land.lhs.true.1556, %cond.end.1545, %cond.end.1522, %cond.true.1491, %cond.end.1485, %cond.true.1457, %cond.end.1451, %land.lhs.true.1426
  %238 = load i64, i64* %len, align 8
  %mul1565 = mul i64 %238, 8
  %cmp1566 = icmp ule i64 %mul1565, 9223372036854775807
  br i1 %cmp1566, label %cond.true.1568, label %cond.false.1570

cond.true.1568:                                   ; preds = %cond.true.1564
  %239 = load i64, i64* %len, align 8
  %mul1569 = mul i64 %239, 8
  br label %cond.end.1574

cond.false.1570:                                  ; preds = %cond.true.1564
  %240 = load i64, i64* %len, align 8
  %mul1571 = mul i64 %240, 8
  %sub1572 = sub i64 %mul1571, -9223372036854775808
  %add1573 = add nsw i64 %sub1572, -9223372036854775808
  br label %cond.end.1574

cond.end.1574:                                    ; preds = %cond.false.1570, %cond.true.1568
  %cond1575 = phi i64 [ %mul1569, %cond.true.1568 ], [ %add1573, %cond.false.1570 ]
  store i64 %cond1575, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1576:                                  ; preds = %lor.lhs.false.1560
  %241 = load i64, i64* %len, align 8
  %mul1577 = mul i64 %241, 8
  %cmp1578 = icmp ule i64 %mul1577, 9223372036854775807
  br i1 %cmp1578, label %cond.true.1580, label %cond.false.1582

cond.true.1580:                                   ; preds = %cond.false.1576
  %242 = load i64, i64* %len, align 8
  %mul1581 = mul i64 %242, 8
  br label %cond.end.1586

cond.false.1582:                                  ; preds = %cond.false.1576
  %243 = load i64, i64* %len, align 8
  %mul1583 = mul i64 %243, 8
  %sub1584 = sub i64 %mul1583, -9223372036854775808
  %add1585 = add nsw i64 %sub1584, -9223372036854775808
  br label %cond.end.1586

cond.end.1586:                                    ; preds = %cond.false.1582, %cond.true.1580
  %cond1587 = phi i64 [ %mul1581, %cond.true.1580 ], [ %add1585, %cond.false.1582 ]
  store i64 %cond1587, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1588:                                  ; preds = %cond.true.1394
  %244 = load i64, i64* %len, align 8
  %add1589 = add nsw i64 0, %244
  %mul1590 = mul nsw i64 0, %add1589
  %sub1591 = sub nsw i64 %mul1590, 1
  %cmp1592 = icmp slt i64 %sub1591, 0
  br i1 %cmp1592, label %cond.true.1594, label %cond.false.1611

cond.true.1594:                                   ; preds = %cond.false.1588
  %245 = load i64, i64* %len, align 8
  %add1595 = add nsw i64 0, %245
  %mul1596 = mul nsw i64 0, %add1595
  %add1597 = add nsw i64 %mul1596, 0
  %neg1598 = xor i64 %add1597, -1
  %cmp1599 = icmp eq i64 %neg1598, -1
  %conv1600 = zext i1 %cmp1599 to i32
  %sub1601 = sub nsw i32 0, %conv1600
  %conv1602 = sext i32 %sub1601 to i64
  %246 = load i64, i64* %len, align 8
  %add1603 = add nsw i64 0, %246
  %mul1604 = mul nsw i64 0, %add1603
  %add1605 = add nsw i64 %mul1604, 1
  %shl1606 = shl i64 %add1605, 62
  %sub1607 = sub nsw i64 %shl1606, 1
  %mul1608 = mul nsw i64 %sub1607, 2
  %add1609 = add nsw i64 %mul1608, 1
  %sub1610 = sub nsw i64 %conv1602, %add1609
  br label %cond.end.1615

cond.false.1611:                                  ; preds = %cond.false.1588
  %247 = load i64, i64* %len, align 8
  %add1612 = add nsw i64 0, %247
  %mul1613 = mul nsw i64 0, %add1612
  %add1614 = add nsw i64 %mul1613, 0
  br label %cond.end.1615

cond.end.1615:                                    ; preds = %cond.false.1611, %cond.true.1594
  %cond1616 = phi i64 [ %sub1610, %cond.true.1594 ], [ %add1614, %cond.false.1611 ]
  %cmp1617 = icmp eq i64 %cond1616, 0
  br i1 %cmp1617, label %land.lhs.true.1619, label %lor.lhs.false.1622

land.lhs.true.1619:                               ; preds = %cond.end.1615
  %248 = load i64, i64* %len, align 8
  %cmp1620 = icmp slt i64 %248, 0
  br i1 %cmp1620, label %cond.true.1757, label %lor.lhs.false.1622

lor.lhs.false.1622:                               ; preds = %land.lhs.true.1619, %cond.end.1615
  br i1 false, label %cond.true.1623, label %cond.false.1683

cond.true.1623:                                   ; preds = %lor.lhs.false.1622
  %249 = load i64, i64* %len, align 8
  %cmp1624 = icmp slt i64 %249, 0
  br i1 %cmp1624, label %cond.true.1626, label %cond.false.1649

cond.true.1626:                                   ; preds = %cond.true.1623
  %250 = load i64, i64* %len, align 8
  %251 = load i64, i64* %len, align 8
  %add1627 = add nsw i64 0, %251
  %mul1628 = mul nsw i64 0, %add1627
  %sub1629 = sub nsw i64 %mul1628, 1
  %cmp1630 = icmp slt i64 %sub1629, 0
  br i1 %cmp1630, label %cond.true.1632, label %cond.false.1640

cond.true.1632:                                   ; preds = %cond.true.1626
  %252 = load i64, i64* %len, align 8
  %add1633 = add nsw i64 0, %252
  %mul1634 = mul nsw i64 0, %add1633
  %add1635 = add nsw i64 %mul1634, 1
  %shl1636 = shl i64 %add1635, 62
  %sub1637 = sub nsw i64 %shl1636, 1
  %mul1638 = mul nsw i64 %sub1637, 2
  %add1639 = add nsw i64 %mul1638, 1
  br label %cond.end.1644

cond.false.1640:                                  ; preds = %cond.true.1626
  %253 = load i64, i64* %len, align 8
  %add1641 = add nsw i64 0, %253
  %mul1642 = mul nsw i64 0, %add1641
  %sub1643 = sub nsw i64 %mul1642, 1
  br label %cond.end.1644

cond.end.1644:                                    ; preds = %cond.false.1640, %cond.true.1632
  %cond1645 = phi i64 [ %add1639, %cond.true.1632 ], [ %sub1643, %cond.false.1640 ]
  %div1646 = sdiv i64 %cond1645, 8
  %cmp1647 = icmp slt i64 %250, %div1646
  br i1 %cmp1647, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1649:                                  ; preds = %cond.true.1623
  br i1 false, label %cond.true.1650, label %cond.false.1651

cond.true.1650:                                   ; preds = %cond.false.1649
  br i1 false, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1651:                                  ; preds = %cond.false.1649
  %254 = load i64, i64* %len, align 8
  %add1652 = add nsw i64 0, %254
  %mul1653 = mul nsw i64 0, %add1652
  %sub1654 = sub nsw i64 %mul1653, 1
  %cmp1655 = icmp slt i64 %sub1654, 0
  br i1 %cmp1655, label %cond.true.1657, label %cond.false.1674

cond.true.1657:                                   ; preds = %cond.false.1651
  %255 = load i64, i64* %len, align 8
  %add1658 = add nsw i64 0, %255
  %mul1659 = mul nsw i64 0, %add1658
  %add1660 = add nsw i64 %mul1659, 0
  %neg1661 = xor i64 %add1660, -1
  %cmp1662 = icmp eq i64 %neg1661, -1
  %conv1663 = zext i1 %cmp1662 to i32
  %sub1664 = sub nsw i32 0, %conv1663
  %conv1665 = sext i32 %sub1664 to i64
  %256 = load i64, i64* %len, align 8
  %add1666 = add nsw i64 0, %256
  %mul1667 = mul nsw i64 0, %add1666
  %add1668 = add nsw i64 %mul1667, 1
  %shl1669 = shl i64 %add1668, 62
  %sub1670 = sub nsw i64 %shl1669, 1
  %mul1671 = mul nsw i64 %sub1670, 2
  %add1672 = add nsw i64 %mul1671, 1
  %sub1673 = sub nsw i64 %conv1665, %add1672
  br label %cond.end.1678

cond.false.1674:                                  ; preds = %cond.false.1651
  %257 = load i64, i64* %len, align 8
  %add1675 = add nsw i64 0, %257
  %mul1676 = mul nsw i64 0, %add1675
  %add1677 = add nsw i64 %mul1676, 0
  br label %cond.end.1678

cond.end.1678:                                    ; preds = %cond.false.1674, %cond.true.1657
  %cond1679 = phi i64 [ %sub1673, %cond.true.1657 ], [ %add1677, %cond.false.1674 ]
  %div1680 = sdiv i64 %cond1679, 8
  %258 = load i64, i64* %len, align 8
  %cmp1681 = icmp slt i64 %div1680, %258
  br i1 %cmp1681, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1683:                                  ; preds = %lor.lhs.false.1622
  br i1 false, label %cond.true.1684, label %cond.false.1685

cond.true.1684:                                   ; preds = %cond.false.1683
  br i1 false, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1685:                                  ; preds = %cond.false.1683
  %259 = load i64, i64* %len, align 8
  %cmp1686 = icmp slt i64 %259, 0
  br i1 %cmp1686, label %cond.true.1688, label %cond.false.1720

cond.true.1688:                                   ; preds = %cond.false.1685
  %260 = load i64, i64* %len, align 8
  %261 = load i64, i64* %len, align 8
  %add1689 = add nsw i64 0, %261
  %mul1690 = mul nsw i64 0, %add1689
  %sub1691 = sub nsw i64 %mul1690, 1
  %cmp1692 = icmp slt i64 %sub1691, 0
  br i1 %cmp1692, label %cond.true.1694, label %cond.false.1711

cond.true.1694:                                   ; preds = %cond.true.1688
  %262 = load i64, i64* %len, align 8
  %add1695 = add nsw i64 0, %262
  %mul1696 = mul nsw i64 0, %add1695
  %add1697 = add nsw i64 %mul1696, 0
  %neg1698 = xor i64 %add1697, -1
  %cmp1699 = icmp eq i64 %neg1698, -1
  %conv1700 = zext i1 %cmp1699 to i32
  %sub1701 = sub nsw i32 0, %conv1700
  %conv1702 = sext i32 %sub1701 to i64
  %263 = load i64, i64* %len, align 8
  %add1703 = add nsw i64 0, %263
  %mul1704 = mul nsw i64 0, %add1703
  %add1705 = add nsw i64 %mul1704, 1
  %shl1706 = shl i64 %add1705, 62
  %sub1707 = sub nsw i64 %shl1706, 1
  %mul1708 = mul nsw i64 %sub1707, 2
  %add1709 = add nsw i64 %mul1708, 1
  %sub1710 = sub nsw i64 %conv1702, %add1709
  br label %cond.end.1715

cond.false.1711:                                  ; preds = %cond.true.1688
  %264 = load i64, i64* %len, align 8
  %add1712 = add nsw i64 0, %264
  %mul1713 = mul nsw i64 0, %add1712
  %add1714 = add nsw i64 %mul1713, 0
  br label %cond.end.1715

cond.end.1715:                                    ; preds = %cond.false.1711, %cond.true.1694
  %cond1716 = phi i64 [ %sub1710, %cond.true.1694 ], [ %add1714, %cond.false.1711 ]
  %div1717 = sdiv i64 %cond1716, 8
  %cmp1718 = icmp slt i64 %260, %div1717
  br i1 %cmp1718, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1720:                                  ; preds = %cond.false.1685
  %265 = load i64, i64* %len, align 8
  %add1721 = add nsw i64 0, %265
  %mul1722 = mul nsw i64 0, %add1721
  %sub1723 = sub nsw i64 %mul1722, 1
  %cmp1724 = icmp slt i64 %sub1723, 0
  br i1 %cmp1724, label %cond.true.1726, label %cond.false.1734

cond.true.1726:                                   ; preds = %cond.false.1720
  %266 = load i64, i64* %len, align 8
  %add1727 = add nsw i64 0, %266
  %mul1728 = mul nsw i64 0, %add1727
  %add1729 = add nsw i64 %mul1728, 1
  %shl1730 = shl i64 %add1729, 62
  %sub1731 = sub nsw i64 %shl1730, 1
  %mul1732 = mul nsw i64 %sub1731, 2
  %add1733 = add nsw i64 %mul1732, 1
  br label %cond.end.1738

cond.false.1734:                                  ; preds = %cond.false.1720
  %267 = load i64, i64* %len, align 8
  %add1735 = add nsw i64 0, %267
  %mul1736 = mul nsw i64 0, %add1735
  %sub1737 = sub nsw i64 %mul1736, 1
  br label %cond.end.1738

cond.end.1738:                                    ; preds = %cond.false.1734, %cond.true.1726
  %cond1739 = phi i64 [ %add1733, %cond.true.1726 ], [ %sub1737, %cond.false.1734 ]
  %div1740 = sdiv i64 %cond1739, 8
  %268 = load i64, i64* %len, align 8
  %cmp1741 = icmp slt i64 %div1740, %268
  br i1 %cmp1741, label %cond.true.1757, label %lor.lhs.false.1743

lor.lhs.false.1743:                               ; preds = %cond.end.1738, %cond.end.1715, %cond.true.1684, %cond.end.1678, %cond.true.1650, %cond.end.1644
  %269 = load i64, i64* %len, align 8
  %mul1744 = mul nsw i64 %269, 8
  %mul1745 = mul nsw i64 0, %mul1744
  %sub1746 = sub nsw i64 %mul1745, 1
  %cmp1747 = icmp slt i64 %sub1746, 0
  br i1 %cmp1747, label %land.lhs.true.1749, label %lor.lhs.false.1753

land.lhs.true.1749:                               ; preds = %lor.lhs.false.1743
  %270 = load i64, i64* %len, align 8
  %mul1750 = mul nsw i64 %270, 8
  %cmp1751 = icmp slt i64 %mul1750, -9223372036854775808
  br i1 %cmp1751, label %cond.true.1757, label %lor.lhs.false.1753

lor.lhs.false.1753:                               ; preds = %land.lhs.true.1749, %lor.lhs.false.1743
  %271 = load i64, i64* %len, align 8
  %mul1754 = mul nsw i64 %271, 8
  %cmp1755 = icmp slt i64 9223372036854775807, %mul1754
  br i1 %cmp1755, label %cond.true.1757, label %cond.false.1769

cond.true.1757:                                   ; preds = %lor.lhs.false.1753, %land.lhs.true.1749, %cond.end.1738, %cond.end.1715, %cond.true.1684, %cond.end.1678, %cond.true.1650, %cond.end.1644, %land.lhs.true.1619
  %272 = load i64, i64* %len, align 8
  %mul1758 = mul i64 %272, 8
  %cmp1759 = icmp ule i64 %mul1758, 9223372036854775807
  br i1 %cmp1759, label %cond.true.1761, label %cond.false.1763

cond.true.1761:                                   ; preds = %cond.true.1757
  %273 = load i64, i64* %len, align 8
  %mul1762 = mul i64 %273, 8
  br label %cond.end.1767

cond.false.1763:                                  ; preds = %cond.true.1757
  %274 = load i64, i64* %len, align 8
  %mul1764 = mul i64 %274, 8
  %sub1765 = sub i64 %mul1764, -9223372036854775808
  %add1766 = add nsw i64 %sub1765, -9223372036854775808
  br label %cond.end.1767

cond.end.1767:                                    ; preds = %cond.false.1763, %cond.true.1761
  %cond1768 = phi i64 [ %mul1762, %cond.true.1761 ], [ %add1766, %cond.false.1763 ]
  store i64 %cond1768, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1769:                                  ; preds = %lor.lhs.false.1753
  %275 = load i64, i64* %len, align 8
  %mul1770 = mul i64 %275, 8
  %cmp1771 = icmp ule i64 %mul1770, 9223372036854775807
  br i1 %cmp1771, label %cond.true.1773, label %cond.false.1775

cond.true.1773:                                   ; preds = %cond.false.1769
  %276 = load i64, i64* %len, align 8
  %mul1774 = mul i64 %276, 8
  br label %cond.end.1779

cond.false.1775:                                  ; preds = %cond.false.1769
  %277 = load i64, i64* %len, align 8
  %mul1776 = mul i64 %277, 8
  %sub1777 = sub i64 %mul1776, -9223372036854775808
  %add1778 = add nsw i64 %sub1777, -9223372036854775808
  br label %cond.end.1779

cond.end.1779:                                    ; preds = %cond.false.1775, %cond.true.1773
  %cond1780 = phi i64 [ %mul1774, %cond.true.1773 ], [ %add1778, %cond.false.1775 ]
  store i64 %cond1780, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1781:                                  ; preds = %cond.false.1393
  br i1 false, label %cond.true.1782, label %cond.false.1975

cond.true.1782:                                   ; preds = %cond.false.1781
  %278 = load i64, i64* %len, align 8
  %add1783 = add nsw i64 0, %278
  %mul1784 = mul nsw i64 0, %add1783
  %sub1785 = sub nsw i64 %mul1784, 1
  %cmp1786 = icmp slt i64 %sub1785, 0
  br i1 %cmp1786, label %cond.true.1788, label %cond.false.1805

cond.true.1788:                                   ; preds = %cond.true.1782
  %279 = load i64, i64* %len, align 8
  %add1789 = add nsw i64 0, %279
  %mul1790 = mul nsw i64 0, %add1789
  %add1791 = add nsw i64 %mul1790, 0
  %neg1792 = xor i64 %add1791, -1
  %cmp1793 = icmp eq i64 %neg1792, -1
  %conv1794 = zext i1 %cmp1793 to i32
  %sub1795 = sub nsw i32 0, %conv1794
  %conv1796 = sext i32 %sub1795 to i64
  %280 = load i64, i64* %len, align 8
  %add1797 = add nsw i64 0, %280
  %mul1798 = mul nsw i64 0, %add1797
  %add1799 = add nsw i64 %mul1798, 1
  %shl1800 = shl i64 %add1799, 62
  %sub1801 = sub nsw i64 %shl1800, 1
  %mul1802 = mul nsw i64 %sub1801, 2
  %add1803 = add nsw i64 %mul1802, 1
  %sub1804 = sub nsw i64 %conv1796, %add1803
  br label %cond.end.1809

cond.false.1805:                                  ; preds = %cond.true.1782
  %281 = load i64, i64* %len, align 8
  %add1806 = add nsw i64 0, %281
  %mul1807 = mul nsw i64 0, %add1806
  %add1808 = add nsw i64 %mul1807, 0
  br label %cond.end.1809

cond.end.1809:                                    ; preds = %cond.false.1805, %cond.true.1788
  %cond1810 = phi i64 [ %sub1804, %cond.true.1788 ], [ %add1808, %cond.false.1805 ]
  %cmp1811 = icmp eq i64 %cond1810, 0
  br i1 %cmp1811, label %land.lhs.true.1813, label %lor.lhs.false.1816

land.lhs.true.1813:                               ; preds = %cond.end.1809
  %282 = load i64, i64* %len, align 8
  %cmp1814 = icmp slt i64 %282, 0
  br i1 %cmp1814, label %cond.true.1951, label %lor.lhs.false.1816

lor.lhs.false.1816:                               ; preds = %land.lhs.true.1813, %cond.end.1809
  br i1 false, label %cond.true.1817, label %cond.false.1877

cond.true.1817:                                   ; preds = %lor.lhs.false.1816
  %283 = load i64, i64* %len, align 8
  %cmp1818 = icmp slt i64 %283, 0
  br i1 %cmp1818, label %cond.true.1820, label %cond.false.1843

cond.true.1820:                                   ; preds = %cond.true.1817
  %284 = load i64, i64* %len, align 8
  %285 = load i64, i64* %len, align 8
  %add1821 = add nsw i64 0, %285
  %mul1822 = mul nsw i64 0, %add1821
  %sub1823 = sub nsw i64 %mul1822, 1
  %cmp1824 = icmp slt i64 %sub1823, 0
  br i1 %cmp1824, label %cond.true.1826, label %cond.false.1834

cond.true.1826:                                   ; preds = %cond.true.1820
  %286 = load i64, i64* %len, align 8
  %add1827 = add nsw i64 0, %286
  %mul1828 = mul nsw i64 0, %add1827
  %add1829 = add nsw i64 %mul1828, 1
  %shl1830 = shl i64 %add1829, 62
  %sub1831 = sub nsw i64 %shl1830, 1
  %mul1832 = mul nsw i64 %sub1831, 2
  %add1833 = add nsw i64 %mul1832, 1
  br label %cond.end.1838

cond.false.1834:                                  ; preds = %cond.true.1820
  %287 = load i64, i64* %len, align 8
  %add1835 = add nsw i64 0, %287
  %mul1836 = mul nsw i64 0, %add1835
  %sub1837 = sub nsw i64 %mul1836, 1
  br label %cond.end.1838

cond.end.1838:                                    ; preds = %cond.false.1834, %cond.true.1826
  %cond1839 = phi i64 [ %add1833, %cond.true.1826 ], [ %sub1837, %cond.false.1834 ]
  %div1840 = sdiv i64 %cond1839, 8
  %cmp1841 = icmp slt i64 %284, %div1840
  br i1 %cmp1841, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1843:                                  ; preds = %cond.true.1817
  br i1 false, label %cond.true.1844, label %cond.false.1845

cond.true.1844:                                   ; preds = %cond.false.1843
  br i1 false, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1845:                                  ; preds = %cond.false.1843
  %288 = load i64, i64* %len, align 8
  %add1846 = add nsw i64 0, %288
  %mul1847 = mul nsw i64 0, %add1846
  %sub1848 = sub nsw i64 %mul1847, 1
  %cmp1849 = icmp slt i64 %sub1848, 0
  br i1 %cmp1849, label %cond.true.1851, label %cond.false.1868

cond.true.1851:                                   ; preds = %cond.false.1845
  %289 = load i64, i64* %len, align 8
  %add1852 = add nsw i64 0, %289
  %mul1853 = mul nsw i64 0, %add1852
  %add1854 = add nsw i64 %mul1853, 0
  %neg1855 = xor i64 %add1854, -1
  %cmp1856 = icmp eq i64 %neg1855, -1
  %conv1857 = zext i1 %cmp1856 to i32
  %sub1858 = sub nsw i32 0, %conv1857
  %conv1859 = sext i32 %sub1858 to i64
  %290 = load i64, i64* %len, align 8
  %add1860 = add nsw i64 0, %290
  %mul1861 = mul nsw i64 0, %add1860
  %add1862 = add nsw i64 %mul1861, 1
  %shl1863 = shl i64 %add1862, 62
  %sub1864 = sub nsw i64 %shl1863, 1
  %mul1865 = mul nsw i64 %sub1864, 2
  %add1866 = add nsw i64 %mul1865, 1
  %sub1867 = sub nsw i64 %conv1859, %add1866
  br label %cond.end.1872

cond.false.1868:                                  ; preds = %cond.false.1845
  %291 = load i64, i64* %len, align 8
  %add1869 = add nsw i64 0, %291
  %mul1870 = mul nsw i64 0, %add1869
  %add1871 = add nsw i64 %mul1870, 0
  br label %cond.end.1872

cond.end.1872:                                    ; preds = %cond.false.1868, %cond.true.1851
  %cond1873 = phi i64 [ %sub1867, %cond.true.1851 ], [ %add1871, %cond.false.1868 ]
  %div1874 = sdiv i64 %cond1873, 8
  %292 = load i64, i64* %len, align 8
  %cmp1875 = icmp slt i64 %div1874, %292
  br i1 %cmp1875, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1877:                                  ; preds = %lor.lhs.false.1816
  br i1 false, label %cond.true.1878, label %cond.false.1879

cond.true.1878:                                   ; preds = %cond.false.1877
  br i1 false, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1879:                                  ; preds = %cond.false.1877
  %293 = load i64, i64* %len, align 8
  %cmp1880 = icmp slt i64 %293, 0
  br i1 %cmp1880, label %cond.true.1882, label %cond.false.1914

cond.true.1882:                                   ; preds = %cond.false.1879
  %294 = load i64, i64* %len, align 8
  %295 = load i64, i64* %len, align 8
  %add1883 = add nsw i64 0, %295
  %mul1884 = mul nsw i64 0, %add1883
  %sub1885 = sub nsw i64 %mul1884, 1
  %cmp1886 = icmp slt i64 %sub1885, 0
  br i1 %cmp1886, label %cond.true.1888, label %cond.false.1905

cond.true.1888:                                   ; preds = %cond.true.1882
  %296 = load i64, i64* %len, align 8
  %add1889 = add nsw i64 0, %296
  %mul1890 = mul nsw i64 0, %add1889
  %add1891 = add nsw i64 %mul1890, 0
  %neg1892 = xor i64 %add1891, -1
  %cmp1893 = icmp eq i64 %neg1892, -1
  %conv1894 = zext i1 %cmp1893 to i32
  %sub1895 = sub nsw i32 0, %conv1894
  %conv1896 = sext i32 %sub1895 to i64
  %297 = load i64, i64* %len, align 8
  %add1897 = add nsw i64 0, %297
  %mul1898 = mul nsw i64 0, %add1897
  %add1899 = add nsw i64 %mul1898, 1
  %shl1900 = shl i64 %add1899, 62
  %sub1901 = sub nsw i64 %shl1900, 1
  %mul1902 = mul nsw i64 %sub1901, 2
  %add1903 = add nsw i64 %mul1902, 1
  %sub1904 = sub nsw i64 %conv1896, %add1903
  br label %cond.end.1909

cond.false.1905:                                  ; preds = %cond.true.1882
  %298 = load i64, i64* %len, align 8
  %add1906 = add nsw i64 0, %298
  %mul1907 = mul nsw i64 0, %add1906
  %add1908 = add nsw i64 %mul1907, 0
  br label %cond.end.1909

cond.end.1909:                                    ; preds = %cond.false.1905, %cond.true.1888
  %cond1910 = phi i64 [ %sub1904, %cond.true.1888 ], [ %add1908, %cond.false.1905 ]
  %div1911 = sdiv i64 %cond1910, 8
  %cmp1912 = icmp slt i64 %294, %div1911
  br i1 %cmp1912, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1914:                                  ; preds = %cond.false.1879
  %299 = load i64, i64* %len, align 8
  %add1915 = add nsw i64 0, %299
  %mul1916 = mul nsw i64 0, %add1915
  %sub1917 = sub nsw i64 %mul1916, 1
  %cmp1918 = icmp slt i64 %sub1917, 0
  br i1 %cmp1918, label %cond.true.1920, label %cond.false.1928

cond.true.1920:                                   ; preds = %cond.false.1914
  %300 = load i64, i64* %len, align 8
  %add1921 = add nsw i64 0, %300
  %mul1922 = mul nsw i64 0, %add1921
  %add1923 = add nsw i64 %mul1922, 1
  %shl1924 = shl i64 %add1923, 62
  %sub1925 = sub nsw i64 %shl1924, 1
  %mul1926 = mul nsw i64 %sub1925, 2
  %add1927 = add nsw i64 %mul1926, 1
  br label %cond.end.1932

cond.false.1928:                                  ; preds = %cond.false.1914
  %301 = load i64, i64* %len, align 8
  %add1929 = add nsw i64 0, %301
  %mul1930 = mul nsw i64 0, %add1929
  %sub1931 = sub nsw i64 %mul1930, 1
  br label %cond.end.1932

cond.end.1932:                                    ; preds = %cond.false.1928, %cond.true.1920
  %cond1933 = phi i64 [ %add1927, %cond.true.1920 ], [ %sub1931, %cond.false.1928 ]
  %div1934 = sdiv i64 %cond1933, 8
  %302 = load i64, i64* %len, align 8
  %cmp1935 = icmp slt i64 %div1934, %302
  br i1 %cmp1935, label %cond.true.1951, label %lor.lhs.false.1937

lor.lhs.false.1937:                               ; preds = %cond.end.1932, %cond.end.1909, %cond.true.1878, %cond.end.1872, %cond.true.1844, %cond.end.1838
  %303 = load i64, i64* %len, align 8
  %mul1938 = mul nsw i64 %303, 8
  %mul1939 = mul nsw i64 0, %mul1938
  %sub1940 = sub nsw i64 %mul1939, 1
  %cmp1941 = icmp slt i64 %sub1940, 0
  br i1 %cmp1941, label %land.lhs.true.1943, label %lor.lhs.false.1947

land.lhs.true.1943:                               ; preds = %lor.lhs.false.1937
  %304 = load i64, i64* %len, align 8
  %mul1944 = mul nsw i64 %304, 8
  %cmp1945 = icmp slt i64 %mul1944, -9223372036854775808
  br i1 %cmp1945, label %cond.true.1951, label %lor.lhs.false.1947

lor.lhs.false.1947:                               ; preds = %land.lhs.true.1943, %lor.lhs.false.1937
  %305 = load i64, i64* %len, align 8
  %mul1948 = mul nsw i64 %305, 8
  %cmp1949 = icmp slt i64 9223372036854775807, %mul1948
  br i1 %cmp1949, label %cond.true.1951, label %cond.false.1963

cond.true.1951:                                   ; preds = %lor.lhs.false.1947, %land.lhs.true.1943, %cond.end.1932, %cond.end.1909, %cond.true.1878, %cond.end.1872, %cond.true.1844, %cond.end.1838, %land.lhs.true.1813
  %306 = load i64, i64* %len, align 8
  %mul1952 = mul i64 %306, 8
  %cmp1953 = icmp ule i64 %mul1952, 9223372036854775807
  br i1 %cmp1953, label %cond.true.1955, label %cond.false.1957

cond.true.1955:                                   ; preds = %cond.true.1951
  %307 = load i64, i64* %len, align 8
  %mul1956 = mul i64 %307, 8
  br label %cond.end.1961

cond.false.1957:                                  ; preds = %cond.true.1951
  %308 = load i64, i64* %len, align 8
  %mul1958 = mul i64 %308, 8
  %sub1959 = sub i64 %mul1958, -9223372036854775808
  %add1960 = add nsw i64 %sub1959, -9223372036854775808
  br label %cond.end.1961

cond.end.1961:                                    ; preds = %cond.false.1957, %cond.true.1955
  %cond1962 = phi i64 [ %mul1956, %cond.true.1955 ], [ %add1960, %cond.false.1957 ]
  store i64 %cond1962, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1963:                                  ; preds = %lor.lhs.false.1947
  %309 = load i64, i64* %len, align 8
  %mul1964 = mul i64 %309, 8
  %cmp1965 = icmp ule i64 %mul1964, 9223372036854775807
  br i1 %cmp1965, label %cond.true.1967, label %cond.false.1969

cond.true.1967:                                   ; preds = %cond.false.1963
  %310 = load i64, i64* %len, align 8
  %mul1968 = mul i64 %310, 8
  br label %cond.end.1973

cond.false.1969:                                  ; preds = %cond.false.1963
  %311 = load i64, i64* %len, align 8
  %mul1970 = mul i64 %311, 8
  %sub1971 = sub i64 %mul1970, -9223372036854775808
  %add1972 = add nsw i64 %sub1971, -9223372036854775808
  br label %cond.end.1973

cond.end.1973:                                    ; preds = %cond.false.1969, %cond.true.1967
  %cond1974 = phi i64 [ %mul1968, %cond.true.1967 ], [ %add1972, %cond.false.1969 ]
  store i64 %cond1974, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

cond.false.1975:                                  ; preds = %cond.false.1781
  %312 = load i64, i64* %len, align 8
  %add1976 = add nsw i64 0, %312
  %mul1977 = mul nsw i64 0, %add1976
  %sub1978 = sub nsw i64 %mul1977, 1
  %cmp1979 = icmp slt i64 %sub1978, 0
  br i1 %cmp1979, label %cond.true.1981, label %cond.false.1998

cond.true.1981:                                   ; preds = %cond.false.1975
  %313 = load i64, i64* %len, align 8
  %add1982 = add nsw i64 0, %313
  %mul1983 = mul nsw i64 0, %add1982
  %add1984 = add nsw i64 %mul1983, 0
  %neg1985 = xor i64 %add1984, -1
  %cmp1986 = icmp eq i64 %neg1985, -1
  %conv1987 = zext i1 %cmp1986 to i32
  %sub1988 = sub nsw i32 0, %conv1987
  %conv1989 = sext i32 %sub1988 to i64
  %314 = load i64, i64* %len, align 8
  %add1990 = add nsw i64 0, %314
  %mul1991 = mul nsw i64 0, %add1990
  %add1992 = add nsw i64 %mul1991, 1
  %shl1993 = shl i64 %add1992, 62
  %sub1994 = sub nsw i64 %shl1993, 1
  %mul1995 = mul nsw i64 %sub1994, 2
  %add1996 = add nsw i64 %mul1995, 1
  %sub1997 = sub nsw i64 %conv1989, %add1996
  br label %cond.end.2002

cond.false.1998:                                  ; preds = %cond.false.1975
  %315 = load i64, i64* %len, align 8
  %add1999 = add nsw i64 0, %315
  %mul2000 = mul nsw i64 0, %add1999
  %add2001 = add nsw i64 %mul2000, 0
  br label %cond.end.2002

cond.end.2002:                                    ; preds = %cond.false.1998, %cond.true.1981
  %cond2003 = phi i64 [ %sub1997, %cond.true.1981 ], [ %add2001, %cond.false.1998 ]
  %cmp2004 = icmp eq i64 %cond2003, 0
  br i1 %cmp2004, label %land.lhs.true.2006, label %lor.lhs.false.2009

land.lhs.true.2006:                               ; preds = %cond.end.2002
  %316 = load i64, i64* %len, align 8
  %cmp2007 = icmp slt i64 %316, 0
  br i1 %cmp2007, label %cond.true.2144, label %lor.lhs.false.2009

lor.lhs.false.2009:                               ; preds = %land.lhs.true.2006, %cond.end.2002
  br i1 false, label %cond.true.2010, label %cond.false.2070

cond.true.2010:                                   ; preds = %lor.lhs.false.2009
  %317 = load i64, i64* %len, align 8
  %cmp2011 = icmp slt i64 %317, 0
  br i1 %cmp2011, label %cond.true.2013, label %cond.false.2036

cond.true.2013:                                   ; preds = %cond.true.2010
  %318 = load i64, i64* %len, align 8
  %319 = load i64, i64* %len, align 8
  %add2014 = add nsw i64 0, %319
  %mul2015 = mul nsw i64 0, %add2014
  %sub2016 = sub nsw i64 %mul2015, 1
  %cmp2017 = icmp slt i64 %sub2016, 0
  br i1 %cmp2017, label %cond.true.2019, label %cond.false.2027

cond.true.2019:                                   ; preds = %cond.true.2013
  %320 = load i64, i64* %len, align 8
  %add2020 = add nsw i64 0, %320
  %mul2021 = mul nsw i64 0, %add2020
  %add2022 = add nsw i64 %mul2021, 1
  %shl2023 = shl i64 %add2022, 62
  %sub2024 = sub nsw i64 %shl2023, 1
  %mul2025 = mul nsw i64 %sub2024, 2
  %add2026 = add nsw i64 %mul2025, 1
  br label %cond.end.2031

cond.false.2027:                                  ; preds = %cond.true.2013
  %321 = load i64, i64* %len, align 8
  %add2028 = add nsw i64 0, %321
  %mul2029 = mul nsw i64 0, %add2028
  %sub2030 = sub nsw i64 %mul2029, 1
  br label %cond.end.2031

cond.end.2031:                                    ; preds = %cond.false.2027, %cond.true.2019
  %cond2032 = phi i64 [ %add2026, %cond.true.2019 ], [ %sub2030, %cond.false.2027 ]
  %div2033 = sdiv i64 %cond2032, 8
  %cmp2034 = icmp slt i64 %318, %div2033
  br i1 %cmp2034, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2036:                                  ; preds = %cond.true.2010
  br i1 false, label %cond.true.2037, label %cond.false.2038

cond.true.2037:                                   ; preds = %cond.false.2036
  br i1 false, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2038:                                  ; preds = %cond.false.2036
  %322 = load i64, i64* %len, align 8
  %add2039 = add nsw i64 0, %322
  %mul2040 = mul nsw i64 0, %add2039
  %sub2041 = sub nsw i64 %mul2040, 1
  %cmp2042 = icmp slt i64 %sub2041, 0
  br i1 %cmp2042, label %cond.true.2044, label %cond.false.2061

cond.true.2044:                                   ; preds = %cond.false.2038
  %323 = load i64, i64* %len, align 8
  %add2045 = add nsw i64 0, %323
  %mul2046 = mul nsw i64 0, %add2045
  %add2047 = add nsw i64 %mul2046, 0
  %neg2048 = xor i64 %add2047, -1
  %cmp2049 = icmp eq i64 %neg2048, -1
  %conv2050 = zext i1 %cmp2049 to i32
  %sub2051 = sub nsw i32 0, %conv2050
  %conv2052 = sext i32 %sub2051 to i64
  %324 = load i64, i64* %len, align 8
  %add2053 = add nsw i64 0, %324
  %mul2054 = mul nsw i64 0, %add2053
  %add2055 = add nsw i64 %mul2054, 1
  %shl2056 = shl i64 %add2055, 62
  %sub2057 = sub nsw i64 %shl2056, 1
  %mul2058 = mul nsw i64 %sub2057, 2
  %add2059 = add nsw i64 %mul2058, 1
  %sub2060 = sub nsw i64 %conv2052, %add2059
  br label %cond.end.2065

cond.false.2061:                                  ; preds = %cond.false.2038
  %325 = load i64, i64* %len, align 8
  %add2062 = add nsw i64 0, %325
  %mul2063 = mul nsw i64 0, %add2062
  %add2064 = add nsw i64 %mul2063, 0
  br label %cond.end.2065

cond.end.2065:                                    ; preds = %cond.false.2061, %cond.true.2044
  %cond2066 = phi i64 [ %sub2060, %cond.true.2044 ], [ %add2064, %cond.false.2061 ]
  %div2067 = sdiv i64 %cond2066, 8
  %326 = load i64, i64* %len, align 8
  %cmp2068 = icmp slt i64 %div2067, %326
  br i1 %cmp2068, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2070:                                  ; preds = %lor.lhs.false.2009
  br i1 false, label %cond.true.2071, label %cond.false.2072

cond.true.2071:                                   ; preds = %cond.false.2070
  br i1 false, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2072:                                  ; preds = %cond.false.2070
  %327 = load i64, i64* %len, align 8
  %cmp2073 = icmp slt i64 %327, 0
  br i1 %cmp2073, label %cond.true.2075, label %cond.false.2107

cond.true.2075:                                   ; preds = %cond.false.2072
  %328 = load i64, i64* %len, align 8
  %329 = load i64, i64* %len, align 8
  %add2076 = add nsw i64 0, %329
  %mul2077 = mul nsw i64 0, %add2076
  %sub2078 = sub nsw i64 %mul2077, 1
  %cmp2079 = icmp slt i64 %sub2078, 0
  br i1 %cmp2079, label %cond.true.2081, label %cond.false.2098

cond.true.2081:                                   ; preds = %cond.true.2075
  %330 = load i64, i64* %len, align 8
  %add2082 = add nsw i64 0, %330
  %mul2083 = mul nsw i64 0, %add2082
  %add2084 = add nsw i64 %mul2083, 0
  %neg2085 = xor i64 %add2084, -1
  %cmp2086 = icmp eq i64 %neg2085, -1
  %conv2087 = zext i1 %cmp2086 to i32
  %sub2088 = sub nsw i32 0, %conv2087
  %conv2089 = sext i32 %sub2088 to i64
  %331 = load i64, i64* %len, align 8
  %add2090 = add nsw i64 0, %331
  %mul2091 = mul nsw i64 0, %add2090
  %add2092 = add nsw i64 %mul2091, 1
  %shl2093 = shl i64 %add2092, 62
  %sub2094 = sub nsw i64 %shl2093, 1
  %mul2095 = mul nsw i64 %sub2094, 2
  %add2096 = add nsw i64 %mul2095, 1
  %sub2097 = sub nsw i64 %conv2089, %add2096
  br label %cond.end.2102

cond.false.2098:                                  ; preds = %cond.true.2075
  %332 = load i64, i64* %len, align 8
  %add2099 = add nsw i64 0, %332
  %mul2100 = mul nsw i64 0, %add2099
  %add2101 = add nsw i64 %mul2100, 0
  br label %cond.end.2102

cond.end.2102:                                    ; preds = %cond.false.2098, %cond.true.2081
  %cond2103 = phi i64 [ %sub2097, %cond.true.2081 ], [ %add2101, %cond.false.2098 ]
  %div2104 = sdiv i64 %cond2103, 8
  %cmp2105 = icmp slt i64 %328, %div2104
  br i1 %cmp2105, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2107:                                  ; preds = %cond.false.2072
  %333 = load i64, i64* %len, align 8
  %add2108 = add nsw i64 0, %333
  %mul2109 = mul nsw i64 0, %add2108
  %sub2110 = sub nsw i64 %mul2109, 1
  %cmp2111 = icmp slt i64 %sub2110, 0
  br i1 %cmp2111, label %cond.true.2113, label %cond.false.2121

cond.true.2113:                                   ; preds = %cond.false.2107
  %334 = load i64, i64* %len, align 8
  %add2114 = add nsw i64 0, %334
  %mul2115 = mul nsw i64 0, %add2114
  %add2116 = add nsw i64 %mul2115, 1
  %shl2117 = shl i64 %add2116, 62
  %sub2118 = sub nsw i64 %shl2117, 1
  %mul2119 = mul nsw i64 %sub2118, 2
  %add2120 = add nsw i64 %mul2119, 1
  br label %cond.end.2125

cond.false.2121:                                  ; preds = %cond.false.2107
  %335 = load i64, i64* %len, align 8
  %add2122 = add nsw i64 0, %335
  %mul2123 = mul nsw i64 0, %add2122
  %sub2124 = sub nsw i64 %mul2123, 1
  br label %cond.end.2125

cond.end.2125:                                    ; preds = %cond.false.2121, %cond.true.2113
  %cond2126 = phi i64 [ %add2120, %cond.true.2113 ], [ %sub2124, %cond.false.2121 ]
  %div2127 = sdiv i64 %cond2126, 8
  %336 = load i64, i64* %len, align 8
  %cmp2128 = icmp slt i64 %div2127, %336
  br i1 %cmp2128, label %cond.true.2144, label %lor.lhs.false.2130

lor.lhs.false.2130:                               ; preds = %cond.end.2125, %cond.end.2102, %cond.true.2071, %cond.end.2065, %cond.true.2037, %cond.end.2031
  %337 = load i64, i64* %len, align 8
  %mul2131 = mul nsw i64 %337, 8
  %mul2132 = mul nsw i64 0, %mul2131
  %sub2133 = sub nsw i64 %mul2132, 1
  %cmp2134 = icmp slt i64 %sub2133, 0
  br i1 %cmp2134, label %land.lhs.true.2136, label %lor.lhs.false.2140

land.lhs.true.2136:                               ; preds = %lor.lhs.false.2130
  %338 = load i64, i64* %len, align 8
  %mul2137 = mul nsw i64 %338, 8
  %cmp2138 = icmp slt i64 %mul2137, -9223372036854775808
  br i1 %cmp2138, label %cond.true.2144, label %lor.lhs.false.2140

lor.lhs.false.2140:                               ; preds = %land.lhs.true.2136, %lor.lhs.false.2130
  %339 = load i64, i64* %len, align 8
  %mul2141 = mul nsw i64 %339, 8
  %cmp2142 = icmp slt i64 9223372036854775807, %mul2141
  br i1 %cmp2142, label %cond.true.2144, label %cond.false.2156

cond.true.2144:                                   ; preds = %lor.lhs.false.2140, %land.lhs.true.2136, %cond.end.2125, %cond.end.2102, %cond.true.2071, %cond.end.2065, %cond.true.2037, %cond.end.2031, %land.lhs.true.2006
  %340 = load i64, i64* %len, align 8
  %mul2145 = mul i64 %340, 8
  %cmp2146 = icmp ule i64 %mul2145, 9223372036854775807
  br i1 %cmp2146, label %cond.true.2148, label %cond.false.2150

cond.true.2148:                                   ; preds = %cond.true.2144
  %341 = load i64, i64* %len, align 8
  %mul2149 = mul i64 %341, 8
  br label %cond.end.2154

cond.false.2150:                                  ; preds = %cond.true.2144
  %342 = load i64, i64* %len, align 8
  %mul2151 = mul i64 %342, 8
  %sub2152 = sub i64 %mul2151, -9223372036854775808
  %add2153 = add nsw i64 %sub2152, -9223372036854775808
  br label %cond.end.2154

cond.end.2154:                                    ; preds = %cond.false.2150, %cond.true.2148
  %cond2155 = phi i64 [ %mul2149, %cond.true.2148 ], [ %add2153, %cond.false.2150 ]
  store i64 %cond2155, i64* %alloca_nbytes, align 8
  br i1 true, label %if.then.2171, label %lor.lhs.false.2168

cond.false.2156:                                  ; preds = %lor.lhs.false.2140
  %343 = load i64, i64* %len, align 8
  %mul2157 = mul i64 %343, 8
  %cmp2158 = icmp ule i64 %mul2157, 9223372036854775807
  br i1 %cmp2158, label %cond.true.2160, label %cond.false.2162

cond.true.2160:                                   ; preds = %cond.false.2156
  %344 = load i64, i64* %len, align 8
  %mul2161 = mul i64 %344, 8
  br label %cond.end.2166

cond.false.2162:                                  ; preds = %cond.false.2156
  %345 = load i64, i64* %len, align 8
  %mul2163 = mul i64 %345, 8
  %sub2164 = sub i64 %mul2163, -9223372036854775808
  %add2165 = add nsw i64 %sub2164, -9223372036854775808
  br label %cond.end.2166

cond.end.2166:                                    ; preds = %cond.false.2162, %cond.true.2160
  %cond2167 = phi i64 [ %mul2161, %cond.true.2160 ], [ %add2165, %cond.false.2162 ]
  store i64 %cond2167, i64* %alloca_nbytes, align 8
  br i1 false, label %if.then.2171, label %lor.lhs.false.2168

lor.lhs.false.2168:                               ; preds = %cond.end.2166, %cond.end.2154, %cond.end.1973, %cond.end.1961, %cond.end.1779, %cond.end.1767, %cond.end.1586, %cond.end.1574, %cond.end.1390, %cond.end.1374, %cond.end.1189, %cond.end.1173, %cond.end.961, %cond.end.938, %cond.end.746, %cond.end.723, %cond.end.476, %cond.end.453, %cond.end.261, %cond.end.238
  %346 = load i64, i64* %alloca_nbytes, align 8
  %cmp2169 = icmp ult i64 -1, %346
  br i1 %cmp2169, label %if.then.2171, label %if.else

if.then.2171:                                     ; preds = %lor.lhs.false.2168, %cond.end.2166, %cond.end.2154, %cond.end.1973, %cond.end.1961, %cond.end.1779, %cond.end.1767, %cond.end.1586, %cond.end.1574, %cond.end.1390, %cond.end.1374, %cond.end.1189, %cond.end.1173, %cond.end.961, %cond.end.938, %cond.end.746, %cond.end.723, %cond.end.476, %cond.end.453, %cond.end.261, %cond.end.238
  call void @memory_full(i64 -1) #7
  unreachable

if.else:                                          ; preds = %lor.lhs.false.2168
  %347 = load i64, i64* %alloca_nbytes, align 8
  %348 = load i64, i64* %sa_avail, align 8
  %cmp2172 = icmp sle i64 %347, %348
  br i1 %cmp2172, label %if.then.2174, label %if.else.2176

if.then.2174:                                     ; preds = %if.else
  %349 = load i64, i64* %alloca_nbytes, align 8
  %350 = load i64, i64* %sa_avail, align 8
  %sub2175 = sub nsw i64 %350, %349
  store i64 %sub2175, i64* %sa_avail, align 8
  %351 = load i64, i64* %alloca_nbytes, align 8
  %352 = alloca i8, i64 %351
  %353 = bitcast i8* %352 to i64*
  store i64* %353, i64** %chars, align 8
  br label %if.end.2179

if.else.2176:                                     ; preds = %if.else
  %354 = load i64, i64* %alloca_nbytes, align 8
  %call2177 = call noalias i8* @xmalloc(i64 %354)
  %355 = bitcast i8* %call2177 to i64*
  store i64* %355, i64** %chars, align 8
  %356 = load i64*, i64** %chars, align 8
  %357 = load i64, i64* %len, align 8
  %call2178 = call i64 @make_save_memory(i64* %356, i64 %357)
  store i64 %call2178, i64* %arg_, align 8
  store i8 1, i8* %sa_must_free, align 1
  %358 = load i64, i64* %arg_, align 8
  call void @record_unwind_protect(void (i64)* @free_save_value, i64 %358)
  br label %if.end.2179

if.end.2179:                                      ; preds = %if.else.2176, %if.then.2174
  br label %if.end.2180

if.end.2180:                                      ; preds = %if.end.2179
  br label %do.end

do.end:                                           ; preds = %if.end.2180
  %359 = load i64, i64* %from.addr, align 8
  %shr2181 = ashr i64 %359, 2
  store i64 %shr2181, i64* %charpos, align 8
  %360 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %361 = load i64, i64* %charpos, align 8
  %call2182 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %360, i64 %361)
  store i64 %call2182, i64* %bytepos, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %362 = load i64, i64* %charpos, align 8
  %363 = load i64, i64* %to.addr, align 8
  %shr2183 = ashr i64 %363, 2
  %cmp2184 = icmp slt i64 %362, %shr2183
  br i1 %cmp2184, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body.2186

do.body.2186:                                     ; preds = %for.body
  %364 = load i64, i64* %charpos, align 8
  %inc = add nsw i64 %364, 1
  store i64 %inc, i64* %charpos, align 8
  %365 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %365, i32 0, i32 39
  %366 = load i64, i64* %enable_multibyte_characters_, align 8
  %call2187 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2188 = icmp eq i64 %366, %call2187
  br i1 %cmp2188, label %if.else.2253, label %if.then.2190

if.then.2190:                                     ; preds = %do.body.2186
  %367 = load i64, i64* %bytepos, align 8
  %368 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %368, i32 0, i32 73
  %369 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %369, i32 0, i32 3
  %370 = load i64, i64* %gpt_byte, align 8
  %cmp2191 = icmp sge i64 %367, %370
  br i1 %cmp2191, label %cond.true.2193, label %cond.false.2195

cond.true.2193:                                   ; preds = %if.then.2190
  %371 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2194 = getelementptr inbounds %struct.buffer, %struct.buffer* %371, i32 0, i32 73
  %372 = load %struct.buffer_text*, %struct.buffer_text** %text2194, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %372, i32 0, i32 5
  %373 = load i64, i64* %gap_size, align 8
  br label %cond.end.2196

cond.false.2195:                                  ; preds = %if.then.2190
  br label %cond.end.2196

cond.end.2196:                                    ; preds = %cond.false.2195, %cond.true.2193
  %cond2197 = phi i64 [ %373, %cond.true.2193 ], [ 0, %cond.false.2195 ]
  %374 = load i64, i64* %bytepos, align 8
  %add2198 = add nsw i64 %cond2197, %374
  %375 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2199 = getelementptr inbounds %struct.buffer, %struct.buffer* %375, i32 0, i32 73
  %376 = load %struct.buffer_text*, %struct.buffer_text** %text2199, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %376, i32 0, i32 0
  %377 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %377, i64 %add2198
  %add.ptr2200 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr2200, i8** %chp, align 8
  %378 = load i8*, i8** %chp, align 8
  %arrayidx = getelementptr inbounds i8, i8* %378, i64 0
  %379 = load i8, i8* %arrayidx, align 1
  %conv2201 = zext i8 %379 to i32
  %and = and i32 %conv2201, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false.2205, label %cond.true.2202

cond.true.2202:                                   ; preds = %cond.end.2196
  store i32 1, i32* %chlen, align 4
  %380 = load i8*, i8** %chp, align 8
  %arrayidx2203 = getelementptr inbounds i8, i8* %380, i64 0
  %381 = load i8, i8* %arrayidx2203, align 1
  %conv2204 = zext i8 %381 to i32
  br label %cond.end.2249

cond.false.2205:                                  ; preds = %cond.end.2196
  %382 = load i8*, i8** %chp, align 8
  %arrayidx2206 = getelementptr inbounds i8, i8* %382, i64 0
  %383 = load i8, i8* %arrayidx2206, align 1
  %conv2207 = zext i8 %383 to i32
  %and2208 = and i32 %conv2207, 32
  %tobool2209 = icmp ne i32 %and2208, 0
  br i1 %tobool2209, label %cond.false.2224, label %cond.true.2210

cond.true.2210:                                   ; preds = %cond.false.2205
  store i32 2, i32* %chlen, align 4
  %384 = load i8*, i8** %chp, align 8
  %arrayidx2211 = getelementptr inbounds i8, i8* %384, i64 0
  %385 = load i8, i8* %arrayidx2211, align 1
  %conv2212 = zext i8 %385 to i32
  %and2213 = and i32 %conv2212, 31
  %shl2214 = shl i32 %and2213, 6
  %386 = load i8*, i8** %chp, align 8
  %arrayidx2215 = getelementptr inbounds i8, i8* %386, i64 1
  %387 = load i8, i8* %arrayidx2215, align 1
  %conv2216 = zext i8 %387 to i32
  %and2217 = and i32 %conv2216, 63
  %or = or i32 %shl2214, %and2217
  %388 = load i8*, i8** %chp, align 8
  %arrayidx2218 = getelementptr inbounds i8, i8* %388, i64 0
  %389 = load i8, i8* %arrayidx2218, align 1
  %conv2219 = zext i8 %389 to i32
  %cmp2220 = icmp slt i32 %conv2219, 194
  %cond2222 = select i1 %cmp2220, i32 4194176, i32 0
  %add2223 = add nsw i32 %or, %cond2222
  br label %cond.end.2247

cond.false.2224:                                  ; preds = %cond.false.2205
  %390 = load i8*, i8** %chp, align 8
  %arrayidx2225 = getelementptr inbounds i8, i8* %390, i64 0
  %391 = load i8, i8* %arrayidx2225, align 1
  %conv2226 = zext i8 %391 to i32
  %and2227 = and i32 %conv2226, 16
  %tobool2228 = icmp ne i32 %and2227, 0
  br i1 %tobool2228, label %cond.false.2243, label %cond.true.2229

cond.true.2229:                                   ; preds = %cond.false.2224
  store i32 3, i32* %chlen, align 4
  %392 = load i8*, i8** %chp, align 8
  %arrayidx2230 = getelementptr inbounds i8, i8* %392, i64 0
  %393 = load i8, i8* %arrayidx2230, align 1
  %conv2231 = zext i8 %393 to i32
  %and2232 = and i32 %conv2231, 15
  %shl2233 = shl i32 %and2232, 12
  %394 = load i8*, i8** %chp, align 8
  %arrayidx2234 = getelementptr inbounds i8, i8* %394, i64 1
  %395 = load i8, i8* %arrayidx2234, align 1
  %conv2235 = zext i8 %395 to i32
  %and2236 = and i32 %conv2235, 63
  %shl2237 = shl i32 %and2236, 6
  %or2238 = or i32 %shl2233, %shl2237
  %396 = load i8*, i8** %chp, align 8
  %arrayidx2239 = getelementptr inbounds i8, i8* %396, i64 2
  %397 = load i8, i8* %arrayidx2239, align 1
  %conv2240 = zext i8 %397 to i32
  %and2241 = and i32 %conv2240, 63
  %or2242 = or i32 %or2238, %and2241
  br label %cond.end.2245

cond.false.2243:                                  ; preds = %cond.false.2224
  %398 = load i8*, i8** %chp, align 8
  %call2244 = call i32 @string_char(i8* %398, i8** null, i32* %chlen)
  br label %cond.end.2245

cond.end.2245:                                    ; preds = %cond.false.2243, %cond.true.2229
  %cond2246 = phi i32 [ %or2242, %cond.true.2229 ], [ %call2244, %cond.false.2243 ]
  br label %cond.end.2247

cond.end.2247:                                    ; preds = %cond.end.2245, %cond.true.2210
  %cond2248 = phi i32 [ %add2223, %cond.true.2210 ], [ %cond2246, %cond.end.2245 ]
  br label %cond.end.2249

cond.end.2249:                                    ; preds = %cond.end.2247, %cond.true.2202
  %cond2250 = phi i32 [ %conv2204, %cond.true.2202 ], [ %cond2248, %cond.end.2247 ]
  store i32 %cond2250, i32* %c, align 4
  %399 = load i32, i32* %chlen, align 4
  %conv2251 = sext i32 %399 to i64
  %400 = load i64, i64* %bytepos, align 8
  %add2252 = add nsw i64 %400, %conv2251
  store i64 %add2252, i64* %bytepos, align 8
  br label %if.end.2271

if.else.2253:                                     ; preds = %do.body.2186
  %401 = load i64, i64* %bytepos, align 8
  %402 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2254 = getelementptr inbounds %struct.buffer, %struct.buffer* %402, i32 0, i32 73
  %403 = load %struct.buffer_text*, %struct.buffer_text** %text2254, align 8
  %gpt_byte2255 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %403, i32 0, i32 3
  %404 = load i64, i64* %gpt_byte2255, align 8
  %cmp2256 = icmp sge i64 %401, %404
  br i1 %cmp2256, label %cond.true.2258, label %cond.false.2261

cond.true.2258:                                   ; preds = %if.else.2253
  %405 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2259 = getelementptr inbounds %struct.buffer, %struct.buffer* %405, i32 0, i32 73
  %406 = load %struct.buffer_text*, %struct.buffer_text** %text2259, align 8
  %gap_size2260 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %406, i32 0, i32 5
  %407 = load i64, i64* %gap_size2260, align 8
  br label %cond.end.2262

cond.false.2261:                                  ; preds = %if.else.2253
  br label %cond.end.2262

cond.end.2262:                                    ; preds = %cond.false.2261, %cond.true.2258
  %cond2263 = phi i64 [ %407, %cond.true.2258 ], [ 0, %cond.false.2261 ]
  %408 = load i64, i64* %bytepos, align 8
  %add2264 = add nsw i64 %cond2263, %408
  %409 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text2265 = getelementptr inbounds %struct.buffer, %struct.buffer* %409, i32 0, i32 73
  %410 = load %struct.buffer_text*, %struct.buffer_text** %text2265, align 8
  %beg2266 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %410, i32 0, i32 0
  %411 = load i8*, i8** %beg2266, align 8
  %add.ptr2267 = getelementptr inbounds i8, i8* %411, i64 %add2264
  %add.ptr2268 = getelementptr inbounds i8, i8* %add.ptr2267, i64 -1
  %412 = load i8, i8* %add.ptr2268, align 1
  %conv2269 = zext i8 %412 to i32
  store i32 %conv2269, i32* %c, align 4
  %413 = load i64, i64* %bytepos, align 8
  %inc2270 = add nsw i64 %413, 1
  store i64 %inc2270, i64* %bytepos, align 8
  br label %if.end.2271

if.end.2271:                                      ; preds = %cond.end.2262, %cond.end.2249
  br label %do.end.2272

do.end.2272:                                      ; preds = %if.end.2271
  %414 = load i32, i32* %c, align 4
  %conv2273 = sext i32 %414 to i64
  %shl2274 = shl i64 %conv2273, 2
  %add2275 = add i64 %shl2274, 2
  %415 = load i64, i64* %i, align 8
  %416 = load i64*, i64** %chars, align 8
  %arrayidx2276 = getelementptr inbounds i64, i64* %416, i64 %415
  store i64 %add2275, i64* %arrayidx2276, align 8
  br label %for.inc

for.inc:                                          ; preds = %do.end.2272
  %417 = load i64, i64* %i, align 8
  %inc2277 = add nsw i64 %417, 1
  store i64 %inc2277, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.4663

if.else.2278:                                     ; preds = %entry
  %418 = load i64, i64* %object.addr, align 8
  %call2279 = call zeroext i1 @STRINGP(i64 %418)
  br i1 %call2279, label %if.then.2280, label %if.else.4627

if.then.2280:                                     ; preds = %if.else.2278
  %419 = load i64, i64* %object.addr, align 8
  %420 = load i64, i64* %from.addr, align 8
  %421 = load i64, i64* %to.addr, align 8
  %422 = load i64, i64* %object.addr, align 8
  %call2281 = call i64 @SCHARS(i64 %422)
  call void @validate_subarray(i64 %419, i64 %420, i64 %421, i64 %call2281, i64* %ifrom, i64* %ito)
  %423 = load i64, i64* %ifrom, align 8
  %424 = load i64, i64* %ito, align 8
  %cmp2282 = icmp eq i64 %423, %424
  br i1 %cmp2282, label %if.then.2284, label %if.end.2286

if.then.2284:                                     ; preds = %if.then.2280
  %call2285 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2285, i64* %retval
  br label %return

if.end.2286:                                      ; preds = %if.then.2280
  %425 = load i64, i64* %ito, align 8
  %426 = load i64, i64* %ifrom, align 8
  %sub2287 = sub nsw i64 %425, %426
  store i64 %sub2287, i64* %len, align 8
  br label %do.body.2288

do.body.2288:                                     ; preds = %if.end.2286
  br i1 false, label %cond.true.2290, label %cond.false.2774

cond.true.2290:                                   ; preds = %do.body.2288
  br i1 false, label %cond.true.2291, label %cond.false.2559

cond.true.2291:                                   ; preds = %cond.true.2290
  %427 = load i64, i64* %len, align 8
  %conv2292 = trunc i64 %427 to i8
  %conv2293 = sext i8 %conv2292 to i32
  %add2294 = add nsw i32 0, %conv2293
  %mul2295 = mul nsw i32 0, %add2294
  %sub2296 = sub nsw i32 %mul2295, 1
  %cmp2297 = icmp slt i32 %sub2296, 0
  br i1 %cmp2297, label %cond.true.2299, label %cond.false.2319

cond.true.2299:                                   ; preds = %cond.true.2291
  %428 = load i64, i64* %len, align 8
  %conv2300 = trunc i64 %428 to i8
  %conv2301 = sext i8 %conv2300 to i32
  %add2302 = add nsw i32 0, %conv2301
  %mul2303 = mul nsw i32 0, %add2302
  %add2304 = add nsw i32 %mul2303, 0
  %neg2305 = xor i32 %add2304, -1
  %cmp2306 = icmp eq i32 %neg2305, -1
  %conv2307 = zext i1 %cmp2306 to i32
  %sub2308 = sub nsw i32 0, %conv2307
  %429 = load i64, i64* %len, align 8
  %conv2309 = trunc i64 %429 to i8
  %conv2310 = sext i8 %conv2309 to i32
  %add2311 = add nsw i32 0, %conv2310
  %mul2312 = mul nsw i32 0, %add2311
  %add2313 = add nsw i32 %mul2312, 1
  %shl2314 = shl i32 %add2313, 30
  %sub2315 = sub nsw i32 %shl2314, 1
  %mul2316 = mul nsw i32 %sub2315, 2
  %add2317 = add nsw i32 %mul2316, 1
  %sub2318 = sub nsw i32 %sub2308, %add2317
  br label %cond.end.2325

cond.false.2319:                                  ; preds = %cond.true.2291
  %430 = load i64, i64* %len, align 8
  %conv2320 = trunc i64 %430 to i8
  %conv2321 = sext i8 %conv2320 to i32
  %add2322 = add nsw i32 0, %conv2321
  %mul2323 = mul nsw i32 0, %add2322
  %add2324 = add nsw i32 %mul2323, 0
  br label %cond.end.2325

cond.end.2325:                                    ; preds = %cond.false.2319, %cond.true.2299
  %cond2326 = phi i32 [ %sub2318, %cond.true.2299 ], [ %add2324, %cond.false.2319 ]
  %cmp2327 = icmp eq i32 %cond2326, 0
  br i1 %cmp2327, label %land.lhs.true.2329, label %lor.lhs.false.2334

land.lhs.true.2329:                               ; preds = %cond.end.2325
  %431 = load i64, i64* %len, align 8
  %conv2330 = trunc i64 %431 to i8
  %conv2331 = sext i8 %conv2330 to i32
  %cmp2332 = icmp slt i32 %conv2331, 0
  br i1 %cmp2332, label %cond.true.2513, label %lor.lhs.false.2334

lor.lhs.false.2334:                               ; preds = %land.lhs.true.2329, %cond.end.2325
  br i1 false, label %cond.true.2335, label %cond.false.2414

cond.true.2335:                                   ; preds = %lor.lhs.false.2334
  %432 = load i64, i64* %len, align 8
  %conv2336 = trunc i64 %432 to i8
  %conv2337 = sext i8 %conv2336 to i32
  %cmp2338 = icmp slt i32 %conv2337, 0
  br i1 %cmp2338, label %cond.true.2340, label %cond.false.2371

cond.true.2340:                                   ; preds = %cond.true.2335
  %433 = load i64, i64* %len, align 8
  %conv2341 = trunc i64 %433 to i8
  %conv2342 = sext i8 %conv2341 to i32
  %434 = load i64, i64* %len, align 8
  %conv2343 = trunc i64 %434 to i8
  %conv2344 = sext i8 %conv2343 to i32
  %add2345 = add nsw i32 0, %conv2344
  %mul2346 = mul nsw i32 0, %add2345
  %sub2347 = sub nsw i32 %mul2346, 1
  %cmp2348 = icmp slt i32 %sub2347, 0
  br i1 %cmp2348, label %cond.true.2350, label %cond.false.2360

cond.true.2350:                                   ; preds = %cond.true.2340
  %435 = load i64, i64* %len, align 8
  %conv2351 = trunc i64 %435 to i8
  %conv2352 = sext i8 %conv2351 to i32
  %add2353 = add nsw i32 0, %conv2352
  %mul2354 = mul nsw i32 0, %add2353
  %add2355 = add nsw i32 %mul2354, 1
  %shl2356 = shl i32 %add2355, 30
  %sub2357 = sub nsw i32 %shl2356, 1
  %mul2358 = mul nsw i32 %sub2357, 2
  %add2359 = add nsw i32 %mul2358, 1
  br label %cond.end.2366

cond.false.2360:                                  ; preds = %cond.true.2340
  %436 = load i64, i64* %len, align 8
  %conv2361 = trunc i64 %436 to i8
  %conv2362 = sext i8 %conv2361 to i32
  %add2363 = add nsw i32 0, %conv2362
  %mul2364 = mul nsw i32 0, %add2363
  %sub2365 = sub nsw i32 %mul2364, 1
  br label %cond.end.2366

cond.end.2366:                                    ; preds = %cond.false.2360, %cond.true.2350
  %cond2367 = phi i32 [ %add2359, %cond.true.2350 ], [ %sub2365, %cond.false.2360 ]
  %div2368 = sdiv i32 %cond2367, 8
  %cmp2369 = icmp slt i32 %conv2342, %div2368
  br i1 %cmp2369, label %cond.true.2513, label %lor.lhs.false.2493

cond.false.2371:                                  ; preds = %cond.true.2335
  br i1 false, label %cond.true.2372, label %cond.false.2373

cond.true.2372:                                   ; preds = %cond.false.2371
  br i1 false, label %cond.true.2513, label %lor.lhs.false.2493

cond.false.2373:                                  ; preds = %cond.false.2371
  %437 = load i64, i64* %len, align 8
  %conv2374 = trunc i64 %437 to i8
  %conv2375 = sext i8 %conv2374 to i32
  %add2376 = add nsw i32 0, %conv2375
  %mul2377 = mul nsw i32 0, %add2376
  %sub2378 = sub nsw i32 %mul2377, 1
  %cmp2379 = icmp slt i32 %sub2378, 0
  br i1 %cmp2379, label %cond.true.2381, label %cond.false.2401

cond.true.2381:                                   ; preds = %cond.false.2373
  %438 = load i64, i64* %len, align 8
  %conv2382 = trunc i64 %438 to i8
  %conv2383 = sext i8 %conv2382 to i32
  %add2384 = add nsw i32 0, %conv2383
  %mul2385 = mul nsw i32 0, %add2384
  %add2386 = add nsw i32 %mul2385, 0
  %neg2387 = xor i32 %add2386, -1
  %cmp2388 = icmp eq i32 %neg2387, -1
  %conv2389 = zext i1 %cmp2388 to i32
  %sub2390 = sub nsw i32 0, %conv2389
  %439 = load i64, i64* %len, align 8
  %conv2391 = trunc i64 %439 to i8
  %conv2392 = sext i8 %conv2391 to i32
  %add2393 = add nsw i32 0, %conv2392
  %mul2394 = mul nsw i32 0, %add2393
  %add2395 = add nsw i32 %mul2394, 1
  %shl2396 = shl i32 %add2395, 30
  %sub2397 = sub nsw i32 %shl2396, 1
  %mul2398 = mul nsw i32 %sub2397, 2
  %add2399 = add nsw i32 %mul2398, 1
  %sub2400 = sub nsw i32 %sub2390, %add2399
  br label %cond.end.2407

cond.false.2401:                                  ; preds = %cond.false.2373
  %440 = load i64, i64* %len, align 8
  %conv2402 = trunc i64 %440 to i8
  %conv2403 = sext i8 %conv2402 to i32
  %add2404 = add nsw i32 0, %conv2403
  %mul2405 = mul nsw i32 0, %add2404
  %add2406 = add nsw i32 %mul2405, 0
  br label %cond.end.2407

cond.end.2407:                                    ; preds = %cond.false.2401, %cond.true.2381
  %cond2408 = phi i32 [ %sub2400, %cond.true.2381 ], [ %add2406, %cond.false.2401 ]
  %div2409 = sdiv i32 %cond2408, 8
  %441 = load i64, i64* %len, align 8
  %conv2410 = trunc i64 %441 to i8
  %conv2411 = sext i8 %conv2410 to i32
  %cmp2412 = icmp slt i32 %div2409, %conv2411
  br i1 %cmp2412, label %cond.true.2513, label %lor.lhs.false.2493

cond.false.2414:                                  ; preds = %lor.lhs.false.2334
  br i1 false, label %cond.true.2415, label %cond.false.2416

cond.true.2415:                                   ; preds = %cond.false.2414
  br i1 false, label %cond.true.2513, label %lor.lhs.false.2493

cond.false.2416:                                  ; preds = %cond.false.2414
  %442 = load i64, i64* %len, align 8
  %conv2417 = trunc i64 %442 to i8
  %conv2418 = sext i8 %conv2417 to i32
  %cmp2419 = icmp slt i32 %conv2418, 0
  br i1 %cmp2419, label %cond.true.2421, label %cond.false.2462

cond.true.2421:                                   ; preds = %cond.false.2416
  %443 = load i64, i64* %len, align 8
  %conv2422 = trunc i64 %443 to i8
  %conv2423 = sext i8 %conv2422 to i32
  %444 = load i64, i64* %len, align 8
  %conv2424 = trunc i64 %444 to i8
  %conv2425 = sext i8 %conv2424 to i32
  %add2426 = add nsw i32 0, %conv2425
  %mul2427 = mul nsw i32 0, %add2426
  %sub2428 = sub nsw i32 %mul2427, 1
  %cmp2429 = icmp slt i32 %sub2428, 0
  br i1 %cmp2429, label %cond.true.2431, label %cond.false.2451

cond.true.2431:                                   ; preds = %cond.true.2421
  %445 = load i64, i64* %len, align 8
  %conv2432 = trunc i64 %445 to i8
  %conv2433 = sext i8 %conv2432 to i32
  %add2434 = add nsw i32 0, %conv2433
  %mul2435 = mul nsw i32 0, %add2434
  %add2436 = add nsw i32 %mul2435, 0
  %neg2437 = xor i32 %add2436, -1
  %cmp2438 = icmp eq i32 %neg2437, -1
  %conv2439 = zext i1 %cmp2438 to i32
  %sub2440 = sub nsw i32 0, %conv2439
  %446 = load i64, i64* %len, align 8
  %conv2441 = trunc i64 %446 to i8
  %conv2442 = sext i8 %conv2441 to i32
  %add2443 = add nsw i32 0, %conv2442
  %mul2444 = mul nsw i32 0, %add2443
  %add2445 = add nsw i32 %mul2444, 1
  %shl2446 = shl i32 %add2445, 30
  %sub2447 = sub nsw i32 %shl2446, 1
  %mul2448 = mul nsw i32 %sub2447, 2
  %add2449 = add nsw i32 %mul2448, 1
  %sub2450 = sub nsw i32 %sub2440, %add2449
  br label %cond.end.2457

cond.false.2451:                                  ; preds = %cond.true.2421
  %447 = load i64, i64* %len, align 8
  %conv2452 = trunc i64 %447 to i8
  %conv2453 = sext i8 %conv2452 to i32
  %add2454 = add nsw i32 0, %conv2453
  %mul2455 = mul nsw i32 0, %add2454
  %add2456 = add nsw i32 %mul2455, 0
  br label %cond.end.2457

cond.end.2457:                                    ; preds = %cond.false.2451, %cond.true.2431
  %cond2458 = phi i32 [ %sub2450, %cond.true.2431 ], [ %add2456, %cond.false.2451 ]
  %div2459 = sdiv i32 %cond2458, 8
  %cmp2460 = icmp slt i32 %conv2423, %div2459
  br i1 %cmp2460, label %cond.true.2513, label %lor.lhs.false.2493

cond.false.2462:                                  ; preds = %cond.false.2416
  %448 = load i64, i64* %len, align 8
  %conv2463 = trunc i64 %448 to i8
  %conv2464 = sext i8 %conv2463 to i32
  %add2465 = add nsw i32 0, %conv2464
  %mul2466 = mul nsw i32 0, %add2465
  %sub2467 = sub nsw i32 %mul2466, 1
  %cmp2468 = icmp slt i32 %sub2467, 0
  br i1 %cmp2468, label %cond.true.2470, label %cond.false.2480

cond.true.2470:                                   ; preds = %cond.false.2462
  %449 = load i64, i64* %len, align 8
  %conv2471 = trunc i64 %449 to i8
  %conv2472 = sext i8 %conv2471 to i32
  %add2473 = add nsw i32 0, %conv2472
  %mul2474 = mul nsw i32 0, %add2473
  %add2475 = add nsw i32 %mul2474, 1
  %shl2476 = shl i32 %add2475, 30
  %sub2477 = sub nsw i32 %shl2476, 1
  %mul2478 = mul nsw i32 %sub2477, 2
  %add2479 = add nsw i32 %mul2478, 1
  br label %cond.end.2486

cond.false.2480:                                  ; preds = %cond.false.2462
  %450 = load i64, i64* %len, align 8
  %conv2481 = trunc i64 %450 to i8
  %conv2482 = sext i8 %conv2481 to i32
  %add2483 = add nsw i32 0, %conv2482
  %mul2484 = mul nsw i32 0, %add2483
  %sub2485 = sub nsw i32 %mul2484, 1
  br label %cond.end.2486

cond.end.2486:                                    ; preds = %cond.false.2480, %cond.true.2470
  %cond2487 = phi i32 [ %add2479, %cond.true.2470 ], [ %sub2485, %cond.false.2480 ]
  %div2488 = sdiv i32 %cond2487, 8
  %451 = load i64, i64* %len, align 8
  %conv2489 = trunc i64 %451 to i8
  %conv2490 = sext i8 %conv2489 to i32
  %cmp2491 = icmp slt i32 %div2488, %conv2490
  br i1 %cmp2491, label %cond.true.2513, label %lor.lhs.false.2493

lor.lhs.false.2493:                               ; preds = %cond.end.2486, %cond.end.2457, %cond.true.2415, %cond.end.2407, %cond.true.2372, %cond.end.2366
  %452 = load i64, i64* %len, align 8
  %conv2494 = trunc i64 %452 to i8
  %conv2495 = sext i8 %conv2494 to i32
  %mul2496 = mul nsw i32 %conv2495, 8
  %mul2497 = mul nsw i32 0, %mul2496
  %sub2498 = sub nsw i32 %mul2497, 1
  %cmp2499 = icmp slt i32 %sub2498, 0
  br i1 %cmp2499, label %land.lhs.true.2501, label %lor.lhs.false.2507

land.lhs.true.2501:                               ; preds = %lor.lhs.false.2493
  %453 = load i64, i64* %len, align 8
  %conv2502 = trunc i64 %453 to i8
  %conv2503 = sext i8 %conv2502 to i32
  %mul2504 = mul nsw i32 %conv2503, 8
  %cmp2505 = icmp slt i32 %mul2504, -128
  br i1 %cmp2505, label %cond.true.2513, label %lor.lhs.false.2507

lor.lhs.false.2507:                               ; preds = %land.lhs.true.2501, %lor.lhs.false.2493
  %454 = load i64, i64* %len, align 8
  %conv2508 = trunc i64 %454 to i8
  %conv2509 = sext i8 %conv2508 to i32
  %mul2510 = mul nsw i32 %conv2509, 8
  %cmp2511 = icmp slt i32 127, %mul2510
  br i1 %cmp2511, label %cond.true.2513, label %cond.false.2536

cond.true.2513:                                   ; preds = %lor.lhs.false.2507, %land.lhs.true.2501, %cond.end.2486, %cond.end.2457, %cond.true.2415, %cond.end.2407, %cond.true.2372, %cond.end.2366, %land.lhs.true.2329
  %455 = load i64, i64* %len, align 8
  %conv2514 = trunc i64 %455 to i8
  %conv2515 = zext i8 %conv2514 to i32
  %mul2516 = mul nsw i32 %conv2515, 8
  %cmp2517 = icmp sle i32 %mul2516, 127
  br i1 %cmp2517, label %cond.true.2519, label %cond.false.2525

cond.true.2519:                                   ; preds = %cond.true.2513
  %456 = load i64, i64* %len, align 8
  %conv2520 = trunc i64 %456 to i8
  %conv2521 = zext i8 %conv2520 to i32
  %mul2522 = mul nsw i32 %conv2521, 8
  %conv2523 = trunc i32 %mul2522 to i8
  %conv2524 = sext i8 %conv2523 to i32
  br label %cond.end.2533

cond.false.2525:                                  ; preds = %cond.true.2513
  %457 = load i64, i64* %len, align 8
  %conv2526 = trunc i64 %457 to i8
  %conv2527 = zext i8 %conv2526 to i32
  %mul2528 = mul nsw i32 %conv2527, 8
  %sub2529 = sub nsw i32 %mul2528, -128
  %conv2530 = trunc i32 %sub2529 to i8
  %conv2531 = sext i8 %conv2530 to i32
  %add2532 = add nsw i32 %conv2531, -128
  br label %cond.end.2533

cond.end.2533:                                    ; preds = %cond.false.2525, %cond.true.2519
  %cond2534 = phi i32 [ %conv2524, %cond.true.2519 ], [ %add2532, %cond.false.2525 ]
  %conv2535 = sext i32 %cond2534 to i64
  store i64 %conv2535, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.2536:                                  ; preds = %lor.lhs.false.2507
  %458 = load i64, i64* %len, align 8
  %conv2537 = trunc i64 %458 to i8
  %conv2538 = zext i8 %conv2537 to i32
  %mul2539 = mul nsw i32 %conv2538, 8
  %cmp2540 = icmp sle i32 %mul2539, 127
  br i1 %cmp2540, label %cond.true.2542, label %cond.false.2548

cond.true.2542:                                   ; preds = %cond.false.2536
  %459 = load i64, i64* %len, align 8
  %conv2543 = trunc i64 %459 to i8
  %conv2544 = zext i8 %conv2543 to i32
  %mul2545 = mul nsw i32 %conv2544, 8
  %conv2546 = trunc i32 %mul2545 to i8
  %conv2547 = sext i8 %conv2546 to i32
  br label %cond.end.2556

cond.false.2548:                                  ; preds = %cond.false.2536
  %460 = load i64, i64* %len, align 8
  %conv2549 = trunc i64 %460 to i8
  %conv2550 = zext i8 %conv2549 to i32
  %mul2551 = mul nsw i32 %conv2550, 8
  %sub2552 = sub nsw i32 %mul2551, -128
  %conv2553 = trunc i32 %sub2552 to i8
  %conv2554 = sext i8 %conv2553 to i32
  %add2555 = add nsw i32 %conv2554, -128
  br label %cond.end.2556

cond.end.2556:                                    ; preds = %cond.false.2548, %cond.true.2542
  %cond2557 = phi i32 [ %conv2547, %cond.true.2542 ], [ %add2555, %cond.false.2548 ]
  %conv2558 = sext i32 %cond2557 to i64
  store i64 %conv2558, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.2559:                                  ; preds = %cond.true.2290
  %461 = load i64, i64* %len, align 8
  %add2560 = add nsw i64 0, %461
  %mul2561 = mul nsw i64 0, %add2560
  %sub2562 = sub nsw i64 %mul2561, 1
  %cmp2563 = icmp slt i64 %sub2562, 0
  br i1 %cmp2563, label %cond.true.2565, label %cond.false.2582

cond.true.2565:                                   ; preds = %cond.false.2559
  %462 = load i64, i64* %len, align 8
  %add2566 = add nsw i64 0, %462
  %mul2567 = mul nsw i64 0, %add2566
  %add2568 = add nsw i64 %mul2567, 0
  %neg2569 = xor i64 %add2568, -1
  %cmp2570 = icmp eq i64 %neg2569, -1
  %conv2571 = zext i1 %cmp2570 to i32
  %sub2572 = sub nsw i32 0, %conv2571
  %conv2573 = sext i32 %sub2572 to i64
  %463 = load i64, i64* %len, align 8
  %add2574 = add nsw i64 0, %463
  %mul2575 = mul nsw i64 0, %add2574
  %add2576 = add nsw i64 %mul2575, 1
  %shl2577 = shl i64 %add2576, 62
  %sub2578 = sub nsw i64 %shl2577, 1
  %mul2579 = mul nsw i64 %sub2578, 2
  %add2580 = add nsw i64 %mul2579, 1
  %sub2581 = sub nsw i64 %conv2573, %add2580
  br label %cond.end.2586

cond.false.2582:                                  ; preds = %cond.false.2559
  %464 = load i64, i64* %len, align 8
  %add2583 = add nsw i64 0, %464
  %mul2584 = mul nsw i64 0, %add2583
  %add2585 = add nsw i64 %mul2584, 0
  br label %cond.end.2586

cond.end.2586:                                    ; preds = %cond.false.2582, %cond.true.2565
  %cond2587 = phi i64 [ %sub2581, %cond.true.2565 ], [ %add2585, %cond.false.2582 ]
  %cmp2588 = icmp eq i64 %cond2587, 0
  br i1 %cmp2588, label %land.lhs.true.2590, label %lor.lhs.false.2593

land.lhs.true.2590:                               ; preds = %cond.end.2586
  %465 = load i64, i64* %len, align 8
  %cmp2591 = icmp slt i64 %465, 0
  br i1 %cmp2591, label %cond.true.2728, label %lor.lhs.false.2593

lor.lhs.false.2593:                               ; preds = %land.lhs.true.2590, %cond.end.2586
  br i1 false, label %cond.true.2594, label %cond.false.2654

cond.true.2594:                                   ; preds = %lor.lhs.false.2593
  %466 = load i64, i64* %len, align 8
  %cmp2595 = icmp slt i64 %466, 0
  br i1 %cmp2595, label %cond.true.2597, label %cond.false.2620

cond.true.2597:                                   ; preds = %cond.true.2594
  %467 = load i64, i64* %len, align 8
  %468 = load i64, i64* %len, align 8
  %add2598 = add nsw i64 0, %468
  %mul2599 = mul nsw i64 0, %add2598
  %sub2600 = sub nsw i64 %mul2599, 1
  %cmp2601 = icmp slt i64 %sub2600, 0
  br i1 %cmp2601, label %cond.true.2603, label %cond.false.2611

cond.true.2603:                                   ; preds = %cond.true.2597
  %469 = load i64, i64* %len, align 8
  %add2604 = add nsw i64 0, %469
  %mul2605 = mul nsw i64 0, %add2604
  %add2606 = add nsw i64 %mul2605, 1
  %shl2607 = shl i64 %add2606, 62
  %sub2608 = sub nsw i64 %shl2607, 1
  %mul2609 = mul nsw i64 %sub2608, 2
  %add2610 = add nsw i64 %mul2609, 1
  br label %cond.end.2615

cond.false.2611:                                  ; preds = %cond.true.2597
  %470 = load i64, i64* %len, align 8
  %add2612 = add nsw i64 0, %470
  %mul2613 = mul nsw i64 0, %add2612
  %sub2614 = sub nsw i64 %mul2613, 1
  br label %cond.end.2615

cond.end.2615:                                    ; preds = %cond.false.2611, %cond.true.2603
  %cond2616 = phi i64 [ %add2610, %cond.true.2603 ], [ %sub2614, %cond.false.2611 ]
  %div2617 = sdiv i64 %cond2616, 8
  %cmp2618 = icmp slt i64 %467, %div2617
  br i1 %cmp2618, label %cond.true.2728, label %lor.lhs.false.2714

cond.false.2620:                                  ; preds = %cond.true.2594
  br i1 false, label %cond.true.2621, label %cond.false.2622

cond.true.2621:                                   ; preds = %cond.false.2620
  br i1 false, label %cond.true.2728, label %lor.lhs.false.2714

cond.false.2622:                                  ; preds = %cond.false.2620
  %471 = load i64, i64* %len, align 8
  %add2623 = add nsw i64 0, %471
  %mul2624 = mul nsw i64 0, %add2623
  %sub2625 = sub nsw i64 %mul2624, 1
  %cmp2626 = icmp slt i64 %sub2625, 0
  br i1 %cmp2626, label %cond.true.2628, label %cond.false.2645

cond.true.2628:                                   ; preds = %cond.false.2622
  %472 = load i64, i64* %len, align 8
  %add2629 = add nsw i64 0, %472
  %mul2630 = mul nsw i64 0, %add2629
  %add2631 = add nsw i64 %mul2630, 0
  %neg2632 = xor i64 %add2631, -1
  %cmp2633 = icmp eq i64 %neg2632, -1
  %conv2634 = zext i1 %cmp2633 to i32
  %sub2635 = sub nsw i32 0, %conv2634
  %conv2636 = sext i32 %sub2635 to i64
  %473 = load i64, i64* %len, align 8
  %add2637 = add nsw i64 0, %473
  %mul2638 = mul nsw i64 0, %add2637
  %add2639 = add nsw i64 %mul2638, 1
  %shl2640 = shl i64 %add2639, 62
  %sub2641 = sub nsw i64 %shl2640, 1
  %mul2642 = mul nsw i64 %sub2641, 2
  %add2643 = add nsw i64 %mul2642, 1
  %sub2644 = sub nsw i64 %conv2636, %add2643
  br label %cond.end.2649

cond.false.2645:                                  ; preds = %cond.false.2622
  %474 = load i64, i64* %len, align 8
  %add2646 = add nsw i64 0, %474
  %mul2647 = mul nsw i64 0, %add2646
  %add2648 = add nsw i64 %mul2647, 0
  br label %cond.end.2649

cond.end.2649:                                    ; preds = %cond.false.2645, %cond.true.2628
  %cond2650 = phi i64 [ %sub2644, %cond.true.2628 ], [ %add2648, %cond.false.2645 ]
  %div2651 = sdiv i64 %cond2650, 8
  %475 = load i64, i64* %len, align 8
  %cmp2652 = icmp slt i64 %div2651, %475
  br i1 %cmp2652, label %cond.true.2728, label %lor.lhs.false.2714

cond.false.2654:                                  ; preds = %lor.lhs.false.2593
  br i1 false, label %cond.true.2655, label %cond.false.2656

cond.true.2655:                                   ; preds = %cond.false.2654
  br i1 false, label %cond.true.2728, label %lor.lhs.false.2714

cond.false.2656:                                  ; preds = %cond.false.2654
  %476 = load i64, i64* %len, align 8
  %cmp2657 = icmp slt i64 %476, 0
  br i1 %cmp2657, label %cond.true.2659, label %cond.false.2691

cond.true.2659:                                   ; preds = %cond.false.2656
  %477 = load i64, i64* %len, align 8
  %478 = load i64, i64* %len, align 8
  %add2660 = add nsw i64 0, %478
  %mul2661 = mul nsw i64 0, %add2660
  %sub2662 = sub nsw i64 %mul2661, 1
  %cmp2663 = icmp slt i64 %sub2662, 0
  br i1 %cmp2663, label %cond.true.2665, label %cond.false.2682

cond.true.2665:                                   ; preds = %cond.true.2659
  %479 = load i64, i64* %len, align 8
  %add2666 = add nsw i64 0, %479
  %mul2667 = mul nsw i64 0, %add2666
  %add2668 = add nsw i64 %mul2667, 0
  %neg2669 = xor i64 %add2668, -1
  %cmp2670 = icmp eq i64 %neg2669, -1
  %conv2671 = zext i1 %cmp2670 to i32
  %sub2672 = sub nsw i32 0, %conv2671
  %conv2673 = sext i32 %sub2672 to i64
  %480 = load i64, i64* %len, align 8
  %add2674 = add nsw i64 0, %480
  %mul2675 = mul nsw i64 0, %add2674
  %add2676 = add nsw i64 %mul2675, 1
  %shl2677 = shl i64 %add2676, 62
  %sub2678 = sub nsw i64 %shl2677, 1
  %mul2679 = mul nsw i64 %sub2678, 2
  %add2680 = add nsw i64 %mul2679, 1
  %sub2681 = sub nsw i64 %conv2673, %add2680
  br label %cond.end.2686

cond.false.2682:                                  ; preds = %cond.true.2659
  %481 = load i64, i64* %len, align 8
  %add2683 = add nsw i64 0, %481
  %mul2684 = mul nsw i64 0, %add2683
  %add2685 = add nsw i64 %mul2684, 0
  br label %cond.end.2686

cond.end.2686:                                    ; preds = %cond.false.2682, %cond.true.2665
  %cond2687 = phi i64 [ %sub2681, %cond.true.2665 ], [ %add2685, %cond.false.2682 ]
  %div2688 = sdiv i64 %cond2687, 8
  %cmp2689 = icmp slt i64 %477, %div2688
  br i1 %cmp2689, label %cond.true.2728, label %lor.lhs.false.2714

cond.false.2691:                                  ; preds = %cond.false.2656
  %482 = load i64, i64* %len, align 8
  %add2692 = add nsw i64 0, %482
  %mul2693 = mul nsw i64 0, %add2692
  %sub2694 = sub nsw i64 %mul2693, 1
  %cmp2695 = icmp slt i64 %sub2694, 0
  br i1 %cmp2695, label %cond.true.2697, label %cond.false.2705

cond.true.2697:                                   ; preds = %cond.false.2691
  %483 = load i64, i64* %len, align 8
  %add2698 = add nsw i64 0, %483
  %mul2699 = mul nsw i64 0, %add2698
  %add2700 = add nsw i64 %mul2699, 1
  %shl2701 = shl i64 %add2700, 62
  %sub2702 = sub nsw i64 %shl2701, 1
  %mul2703 = mul nsw i64 %sub2702, 2
  %add2704 = add nsw i64 %mul2703, 1
  br label %cond.end.2709

cond.false.2705:                                  ; preds = %cond.false.2691
  %484 = load i64, i64* %len, align 8
  %add2706 = add nsw i64 0, %484
  %mul2707 = mul nsw i64 0, %add2706
  %sub2708 = sub nsw i64 %mul2707, 1
  br label %cond.end.2709

cond.end.2709:                                    ; preds = %cond.false.2705, %cond.true.2697
  %cond2710 = phi i64 [ %add2704, %cond.true.2697 ], [ %sub2708, %cond.false.2705 ]
  %div2711 = sdiv i64 %cond2710, 8
  %485 = load i64, i64* %len, align 8
  %cmp2712 = icmp slt i64 %div2711, %485
  br i1 %cmp2712, label %cond.true.2728, label %lor.lhs.false.2714

lor.lhs.false.2714:                               ; preds = %cond.end.2709, %cond.end.2686, %cond.true.2655, %cond.end.2649, %cond.true.2621, %cond.end.2615
  %486 = load i64, i64* %len, align 8
  %mul2715 = mul nsw i64 %486, 8
  %mul2716 = mul nsw i64 0, %mul2715
  %sub2717 = sub nsw i64 %mul2716, 1
  %cmp2718 = icmp slt i64 %sub2717, 0
  br i1 %cmp2718, label %land.lhs.true.2720, label %lor.lhs.false.2724

land.lhs.true.2720:                               ; preds = %lor.lhs.false.2714
  %487 = load i64, i64* %len, align 8
  %mul2721 = mul nsw i64 %487, 8
  %cmp2722 = icmp slt i64 %mul2721, -128
  br i1 %cmp2722, label %cond.true.2728, label %lor.lhs.false.2724

lor.lhs.false.2724:                               ; preds = %land.lhs.true.2720, %lor.lhs.false.2714
  %488 = load i64, i64* %len, align 8
  %mul2725 = mul nsw i64 %488, 8
  %cmp2726 = icmp slt i64 127, %mul2725
  br i1 %cmp2726, label %cond.true.2728, label %cond.false.2751

cond.true.2728:                                   ; preds = %lor.lhs.false.2724, %land.lhs.true.2720, %cond.end.2709, %cond.end.2686, %cond.true.2655, %cond.end.2649, %cond.true.2621, %cond.end.2615, %land.lhs.true.2590
  %489 = load i64, i64* %len, align 8
  %conv2729 = trunc i64 %489 to i8
  %conv2730 = zext i8 %conv2729 to i32
  %mul2731 = mul nsw i32 %conv2730, 8
  %cmp2732 = icmp sle i32 %mul2731, 127
  br i1 %cmp2732, label %cond.true.2734, label %cond.false.2740

cond.true.2734:                                   ; preds = %cond.true.2728
  %490 = load i64, i64* %len, align 8
  %conv2735 = trunc i64 %490 to i8
  %conv2736 = zext i8 %conv2735 to i32
  %mul2737 = mul nsw i32 %conv2736, 8
  %conv2738 = trunc i32 %mul2737 to i8
  %conv2739 = sext i8 %conv2738 to i32
  br label %cond.end.2748

cond.false.2740:                                  ; preds = %cond.true.2728
  %491 = load i64, i64* %len, align 8
  %conv2741 = trunc i64 %491 to i8
  %conv2742 = zext i8 %conv2741 to i32
  %mul2743 = mul nsw i32 %conv2742, 8
  %sub2744 = sub nsw i32 %mul2743, -128
  %conv2745 = trunc i32 %sub2744 to i8
  %conv2746 = sext i8 %conv2745 to i32
  %add2747 = add nsw i32 %conv2746, -128
  br label %cond.end.2748

cond.end.2748:                                    ; preds = %cond.false.2740, %cond.true.2734
  %cond2749 = phi i32 [ %conv2739, %cond.true.2734 ], [ %add2747, %cond.false.2740 ]
  %conv2750 = sext i32 %cond2749 to i64
  store i64 %conv2750, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.2751:                                  ; preds = %lor.lhs.false.2724
  %492 = load i64, i64* %len, align 8
  %conv2752 = trunc i64 %492 to i8
  %conv2753 = zext i8 %conv2752 to i32
  %mul2754 = mul nsw i32 %conv2753, 8
  %cmp2755 = icmp sle i32 %mul2754, 127
  br i1 %cmp2755, label %cond.true.2757, label %cond.false.2763

cond.true.2757:                                   ; preds = %cond.false.2751
  %493 = load i64, i64* %len, align 8
  %conv2758 = trunc i64 %493 to i8
  %conv2759 = zext i8 %conv2758 to i32
  %mul2760 = mul nsw i32 %conv2759, 8
  %conv2761 = trunc i32 %mul2760 to i8
  %conv2762 = sext i8 %conv2761 to i32
  br label %cond.end.2771

cond.false.2763:                                  ; preds = %cond.false.2751
  %494 = load i64, i64* %len, align 8
  %conv2764 = trunc i64 %494 to i8
  %conv2765 = zext i8 %conv2764 to i32
  %mul2766 = mul nsw i32 %conv2765, 8
  %sub2767 = sub nsw i32 %mul2766, -128
  %conv2768 = trunc i32 %sub2767 to i8
  %conv2769 = sext i8 %conv2768 to i32
  %add2770 = add nsw i32 %conv2769, -128
  br label %cond.end.2771

cond.end.2771:                                    ; preds = %cond.false.2763, %cond.true.2757
  %cond2772 = phi i32 [ %conv2762, %cond.true.2757 ], [ %add2770, %cond.false.2763 ]
  %conv2773 = sext i32 %cond2772 to i64
  store i64 %conv2773, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.2774:                                  ; preds = %do.body.2288
  br i1 false, label %cond.true.2775, label %cond.false.3259

cond.true.2775:                                   ; preds = %cond.false.2774
  br i1 false, label %cond.true.2776, label %cond.false.3044

cond.true.2776:                                   ; preds = %cond.true.2775
  %495 = load i64, i64* %len, align 8
  %conv2777 = trunc i64 %495 to i16
  %conv2778 = sext i16 %conv2777 to i32
  %add2779 = add nsw i32 0, %conv2778
  %mul2780 = mul nsw i32 0, %add2779
  %sub2781 = sub nsw i32 %mul2780, 1
  %cmp2782 = icmp slt i32 %sub2781, 0
  br i1 %cmp2782, label %cond.true.2784, label %cond.false.2804

cond.true.2784:                                   ; preds = %cond.true.2776
  %496 = load i64, i64* %len, align 8
  %conv2785 = trunc i64 %496 to i16
  %conv2786 = sext i16 %conv2785 to i32
  %add2787 = add nsw i32 0, %conv2786
  %mul2788 = mul nsw i32 0, %add2787
  %add2789 = add nsw i32 %mul2788, 0
  %neg2790 = xor i32 %add2789, -1
  %cmp2791 = icmp eq i32 %neg2790, -1
  %conv2792 = zext i1 %cmp2791 to i32
  %sub2793 = sub nsw i32 0, %conv2792
  %497 = load i64, i64* %len, align 8
  %conv2794 = trunc i64 %497 to i16
  %conv2795 = sext i16 %conv2794 to i32
  %add2796 = add nsw i32 0, %conv2795
  %mul2797 = mul nsw i32 0, %add2796
  %add2798 = add nsw i32 %mul2797, 1
  %shl2799 = shl i32 %add2798, 30
  %sub2800 = sub nsw i32 %shl2799, 1
  %mul2801 = mul nsw i32 %sub2800, 2
  %add2802 = add nsw i32 %mul2801, 1
  %sub2803 = sub nsw i32 %sub2793, %add2802
  br label %cond.end.2810

cond.false.2804:                                  ; preds = %cond.true.2776
  %498 = load i64, i64* %len, align 8
  %conv2805 = trunc i64 %498 to i16
  %conv2806 = sext i16 %conv2805 to i32
  %add2807 = add nsw i32 0, %conv2806
  %mul2808 = mul nsw i32 0, %add2807
  %add2809 = add nsw i32 %mul2808, 0
  br label %cond.end.2810

cond.end.2810:                                    ; preds = %cond.false.2804, %cond.true.2784
  %cond2811 = phi i32 [ %sub2803, %cond.true.2784 ], [ %add2809, %cond.false.2804 ]
  %cmp2812 = icmp eq i32 %cond2811, 0
  br i1 %cmp2812, label %land.lhs.true.2814, label %lor.lhs.false.2819

land.lhs.true.2814:                               ; preds = %cond.end.2810
  %499 = load i64, i64* %len, align 8
  %conv2815 = trunc i64 %499 to i16
  %conv2816 = sext i16 %conv2815 to i32
  %cmp2817 = icmp slt i32 %conv2816, 0
  br i1 %cmp2817, label %cond.true.2998, label %lor.lhs.false.2819

lor.lhs.false.2819:                               ; preds = %land.lhs.true.2814, %cond.end.2810
  br i1 false, label %cond.true.2820, label %cond.false.2899

cond.true.2820:                                   ; preds = %lor.lhs.false.2819
  %500 = load i64, i64* %len, align 8
  %conv2821 = trunc i64 %500 to i16
  %conv2822 = sext i16 %conv2821 to i32
  %cmp2823 = icmp slt i32 %conv2822, 0
  br i1 %cmp2823, label %cond.true.2825, label %cond.false.2856

cond.true.2825:                                   ; preds = %cond.true.2820
  %501 = load i64, i64* %len, align 8
  %conv2826 = trunc i64 %501 to i16
  %conv2827 = sext i16 %conv2826 to i32
  %502 = load i64, i64* %len, align 8
  %conv2828 = trunc i64 %502 to i16
  %conv2829 = sext i16 %conv2828 to i32
  %add2830 = add nsw i32 0, %conv2829
  %mul2831 = mul nsw i32 0, %add2830
  %sub2832 = sub nsw i32 %mul2831, 1
  %cmp2833 = icmp slt i32 %sub2832, 0
  br i1 %cmp2833, label %cond.true.2835, label %cond.false.2845

cond.true.2835:                                   ; preds = %cond.true.2825
  %503 = load i64, i64* %len, align 8
  %conv2836 = trunc i64 %503 to i16
  %conv2837 = sext i16 %conv2836 to i32
  %add2838 = add nsw i32 0, %conv2837
  %mul2839 = mul nsw i32 0, %add2838
  %add2840 = add nsw i32 %mul2839, 1
  %shl2841 = shl i32 %add2840, 30
  %sub2842 = sub nsw i32 %shl2841, 1
  %mul2843 = mul nsw i32 %sub2842, 2
  %add2844 = add nsw i32 %mul2843, 1
  br label %cond.end.2851

cond.false.2845:                                  ; preds = %cond.true.2825
  %504 = load i64, i64* %len, align 8
  %conv2846 = trunc i64 %504 to i16
  %conv2847 = sext i16 %conv2846 to i32
  %add2848 = add nsw i32 0, %conv2847
  %mul2849 = mul nsw i32 0, %add2848
  %sub2850 = sub nsw i32 %mul2849, 1
  br label %cond.end.2851

cond.end.2851:                                    ; preds = %cond.false.2845, %cond.true.2835
  %cond2852 = phi i32 [ %add2844, %cond.true.2835 ], [ %sub2850, %cond.false.2845 ]
  %div2853 = sdiv i32 %cond2852, 8
  %cmp2854 = icmp slt i32 %conv2827, %div2853
  br i1 %cmp2854, label %cond.true.2998, label %lor.lhs.false.2978

cond.false.2856:                                  ; preds = %cond.true.2820
  br i1 false, label %cond.true.2857, label %cond.false.2858

cond.true.2857:                                   ; preds = %cond.false.2856
  br i1 false, label %cond.true.2998, label %lor.lhs.false.2978

cond.false.2858:                                  ; preds = %cond.false.2856
  %505 = load i64, i64* %len, align 8
  %conv2859 = trunc i64 %505 to i16
  %conv2860 = sext i16 %conv2859 to i32
  %add2861 = add nsw i32 0, %conv2860
  %mul2862 = mul nsw i32 0, %add2861
  %sub2863 = sub nsw i32 %mul2862, 1
  %cmp2864 = icmp slt i32 %sub2863, 0
  br i1 %cmp2864, label %cond.true.2866, label %cond.false.2886

cond.true.2866:                                   ; preds = %cond.false.2858
  %506 = load i64, i64* %len, align 8
  %conv2867 = trunc i64 %506 to i16
  %conv2868 = sext i16 %conv2867 to i32
  %add2869 = add nsw i32 0, %conv2868
  %mul2870 = mul nsw i32 0, %add2869
  %add2871 = add nsw i32 %mul2870, 0
  %neg2872 = xor i32 %add2871, -1
  %cmp2873 = icmp eq i32 %neg2872, -1
  %conv2874 = zext i1 %cmp2873 to i32
  %sub2875 = sub nsw i32 0, %conv2874
  %507 = load i64, i64* %len, align 8
  %conv2876 = trunc i64 %507 to i16
  %conv2877 = sext i16 %conv2876 to i32
  %add2878 = add nsw i32 0, %conv2877
  %mul2879 = mul nsw i32 0, %add2878
  %add2880 = add nsw i32 %mul2879, 1
  %shl2881 = shl i32 %add2880, 30
  %sub2882 = sub nsw i32 %shl2881, 1
  %mul2883 = mul nsw i32 %sub2882, 2
  %add2884 = add nsw i32 %mul2883, 1
  %sub2885 = sub nsw i32 %sub2875, %add2884
  br label %cond.end.2892

cond.false.2886:                                  ; preds = %cond.false.2858
  %508 = load i64, i64* %len, align 8
  %conv2887 = trunc i64 %508 to i16
  %conv2888 = sext i16 %conv2887 to i32
  %add2889 = add nsw i32 0, %conv2888
  %mul2890 = mul nsw i32 0, %add2889
  %add2891 = add nsw i32 %mul2890, 0
  br label %cond.end.2892

cond.end.2892:                                    ; preds = %cond.false.2886, %cond.true.2866
  %cond2893 = phi i32 [ %sub2885, %cond.true.2866 ], [ %add2891, %cond.false.2886 ]
  %div2894 = sdiv i32 %cond2893, 8
  %509 = load i64, i64* %len, align 8
  %conv2895 = trunc i64 %509 to i16
  %conv2896 = sext i16 %conv2895 to i32
  %cmp2897 = icmp slt i32 %div2894, %conv2896
  br i1 %cmp2897, label %cond.true.2998, label %lor.lhs.false.2978

cond.false.2899:                                  ; preds = %lor.lhs.false.2819
  br i1 false, label %cond.true.2900, label %cond.false.2901

cond.true.2900:                                   ; preds = %cond.false.2899
  br i1 false, label %cond.true.2998, label %lor.lhs.false.2978

cond.false.2901:                                  ; preds = %cond.false.2899
  %510 = load i64, i64* %len, align 8
  %conv2902 = trunc i64 %510 to i16
  %conv2903 = sext i16 %conv2902 to i32
  %cmp2904 = icmp slt i32 %conv2903, 0
  br i1 %cmp2904, label %cond.true.2906, label %cond.false.2947

cond.true.2906:                                   ; preds = %cond.false.2901
  %511 = load i64, i64* %len, align 8
  %conv2907 = trunc i64 %511 to i16
  %conv2908 = sext i16 %conv2907 to i32
  %512 = load i64, i64* %len, align 8
  %conv2909 = trunc i64 %512 to i16
  %conv2910 = sext i16 %conv2909 to i32
  %add2911 = add nsw i32 0, %conv2910
  %mul2912 = mul nsw i32 0, %add2911
  %sub2913 = sub nsw i32 %mul2912, 1
  %cmp2914 = icmp slt i32 %sub2913, 0
  br i1 %cmp2914, label %cond.true.2916, label %cond.false.2936

cond.true.2916:                                   ; preds = %cond.true.2906
  %513 = load i64, i64* %len, align 8
  %conv2917 = trunc i64 %513 to i16
  %conv2918 = sext i16 %conv2917 to i32
  %add2919 = add nsw i32 0, %conv2918
  %mul2920 = mul nsw i32 0, %add2919
  %add2921 = add nsw i32 %mul2920, 0
  %neg2922 = xor i32 %add2921, -1
  %cmp2923 = icmp eq i32 %neg2922, -1
  %conv2924 = zext i1 %cmp2923 to i32
  %sub2925 = sub nsw i32 0, %conv2924
  %514 = load i64, i64* %len, align 8
  %conv2926 = trunc i64 %514 to i16
  %conv2927 = sext i16 %conv2926 to i32
  %add2928 = add nsw i32 0, %conv2927
  %mul2929 = mul nsw i32 0, %add2928
  %add2930 = add nsw i32 %mul2929, 1
  %shl2931 = shl i32 %add2930, 30
  %sub2932 = sub nsw i32 %shl2931, 1
  %mul2933 = mul nsw i32 %sub2932, 2
  %add2934 = add nsw i32 %mul2933, 1
  %sub2935 = sub nsw i32 %sub2925, %add2934
  br label %cond.end.2942

cond.false.2936:                                  ; preds = %cond.true.2906
  %515 = load i64, i64* %len, align 8
  %conv2937 = trunc i64 %515 to i16
  %conv2938 = sext i16 %conv2937 to i32
  %add2939 = add nsw i32 0, %conv2938
  %mul2940 = mul nsw i32 0, %add2939
  %add2941 = add nsw i32 %mul2940, 0
  br label %cond.end.2942

cond.end.2942:                                    ; preds = %cond.false.2936, %cond.true.2916
  %cond2943 = phi i32 [ %sub2935, %cond.true.2916 ], [ %add2941, %cond.false.2936 ]
  %div2944 = sdiv i32 %cond2943, 8
  %cmp2945 = icmp slt i32 %conv2908, %div2944
  br i1 %cmp2945, label %cond.true.2998, label %lor.lhs.false.2978

cond.false.2947:                                  ; preds = %cond.false.2901
  %516 = load i64, i64* %len, align 8
  %conv2948 = trunc i64 %516 to i16
  %conv2949 = sext i16 %conv2948 to i32
  %add2950 = add nsw i32 0, %conv2949
  %mul2951 = mul nsw i32 0, %add2950
  %sub2952 = sub nsw i32 %mul2951, 1
  %cmp2953 = icmp slt i32 %sub2952, 0
  br i1 %cmp2953, label %cond.true.2955, label %cond.false.2965

cond.true.2955:                                   ; preds = %cond.false.2947
  %517 = load i64, i64* %len, align 8
  %conv2956 = trunc i64 %517 to i16
  %conv2957 = sext i16 %conv2956 to i32
  %add2958 = add nsw i32 0, %conv2957
  %mul2959 = mul nsw i32 0, %add2958
  %add2960 = add nsw i32 %mul2959, 1
  %shl2961 = shl i32 %add2960, 30
  %sub2962 = sub nsw i32 %shl2961, 1
  %mul2963 = mul nsw i32 %sub2962, 2
  %add2964 = add nsw i32 %mul2963, 1
  br label %cond.end.2971

cond.false.2965:                                  ; preds = %cond.false.2947
  %518 = load i64, i64* %len, align 8
  %conv2966 = trunc i64 %518 to i16
  %conv2967 = sext i16 %conv2966 to i32
  %add2968 = add nsw i32 0, %conv2967
  %mul2969 = mul nsw i32 0, %add2968
  %sub2970 = sub nsw i32 %mul2969, 1
  br label %cond.end.2971

cond.end.2971:                                    ; preds = %cond.false.2965, %cond.true.2955
  %cond2972 = phi i32 [ %add2964, %cond.true.2955 ], [ %sub2970, %cond.false.2965 ]
  %div2973 = sdiv i32 %cond2972, 8
  %519 = load i64, i64* %len, align 8
  %conv2974 = trunc i64 %519 to i16
  %conv2975 = sext i16 %conv2974 to i32
  %cmp2976 = icmp slt i32 %div2973, %conv2975
  br i1 %cmp2976, label %cond.true.2998, label %lor.lhs.false.2978

lor.lhs.false.2978:                               ; preds = %cond.end.2971, %cond.end.2942, %cond.true.2900, %cond.end.2892, %cond.true.2857, %cond.end.2851
  %520 = load i64, i64* %len, align 8
  %conv2979 = trunc i64 %520 to i16
  %conv2980 = sext i16 %conv2979 to i32
  %mul2981 = mul nsw i32 %conv2980, 8
  %mul2982 = mul nsw i32 0, %mul2981
  %sub2983 = sub nsw i32 %mul2982, 1
  %cmp2984 = icmp slt i32 %sub2983, 0
  br i1 %cmp2984, label %land.lhs.true.2986, label %lor.lhs.false.2992

land.lhs.true.2986:                               ; preds = %lor.lhs.false.2978
  %521 = load i64, i64* %len, align 8
  %conv2987 = trunc i64 %521 to i16
  %conv2988 = sext i16 %conv2987 to i32
  %mul2989 = mul nsw i32 %conv2988, 8
  %cmp2990 = icmp slt i32 %mul2989, -32768
  br i1 %cmp2990, label %cond.true.2998, label %lor.lhs.false.2992

lor.lhs.false.2992:                               ; preds = %land.lhs.true.2986, %lor.lhs.false.2978
  %522 = load i64, i64* %len, align 8
  %conv2993 = trunc i64 %522 to i16
  %conv2994 = sext i16 %conv2993 to i32
  %mul2995 = mul nsw i32 %conv2994, 8
  %cmp2996 = icmp slt i32 32767, %mul2995
  br i1 %cmp2996, label %cond.true.2998, label %cond.false.3021

cond.true.2998:                                   ; preds = %lor.lhs.false.2992, %land.lhs.true.2986, %cond.end.2971, %cond.end.2942, %cond.true.2900, %cond.end.2892, %cond.true.2857, %cond.end.2851, %land.lhs.true.2814
  %523 = load i64, i64* %len, align 8
  %conv2999 = trunc i64 %523 to i16
  %conv3000 = zext i16 %conv2999 to i32
  %mul3001 = mul nsw i32 %conv3000, 8
  %cmp3002 = icmp sle i32 %mul3001, 32767
  br i1 %cmp3002, label %cond.true.3004, label %cond.false.3010

cond.true.3004:                                   ; preds = %cond.true.2998
  %524 = load i64, i64* %len, align 8
  %conv3005 = trunc i64 %524 to i16
  %conv3006 = zext i16 %conv3005 to i32
  %mul3007 = mul nsw i32 %conv3006, 8
  %conv3008 = trunc i32 %mul3007 to i16
  %conv3009 = sext i16 %conv3008 to i32
  br label %cond.end.3018

cond.false.3010:                                  ; preds = %cond.true.2998
  %525 = load i64, i64* %len, align 8
  %conv3011 = trunc i64 %525 to i16
  %conv3012 = zext i16 %conv3011 to i32
  %mul3013 = mul nsw i32 %conv3012, 8
  %sub3014 = sub nsw i32 %mul3013, -32768
  %conv3015 = trunc i32 %sub3014 to i16
  %conv3016 = sext i16 %conv3015 to i32
  %add3017 = add nsw i32 %conv3016, -32768
  br label %cond.end.3018

cond.end.3018:                                    ; preds = %cond.false.3010, %cond.true.3004
  %cond3019 = phi i32 [ %conv3009, %cond.true.3004 ], [ %add3017, %cond.false.3010 ]
  %conv3020 = sext i32 %cond3019 to i64
  store i64 %conv3020, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3021:                                  ; preds = %lor.lhs.false.2992
  %526 = load i64, i64* %len, align 8
  %conv3022 = trunc i64 %526 to i16
  %conv3023 = zext i16 %conv3022 to i32
  %mul3024 = mul nsw i32 %conv3023, 8
  %cmp3025 = icmp sle i32 %mul3024, 32767
  br i1 %cmp3025, label %cond.true.3027, label %cond.false.3033

cond.true.3027:                                   ; preds = %cond.false.3021
  %527 = load i64, i64* %len, align 8
  %conv3028 = trunc i64 %527 to i16
  %conv3029 = zext i16 %conv3028 to i32
  %mul3030 = mul nsw i32 %conv3029, 8
  %conv3031 = trunc i32 %mul3030 to i16
  %conv3032 = sext i16 %conv3031 to i32
  br label %cond.end.3041

cond.false.3033:                                  ; preds = %cond.false.3021
  %528 = load i64, i64* %len, align 8
  %conv3034 = trunc i64 %528 to i16
  %conv3035 = zext i16 %conv3034 to i32
  %mul3036 = mul nsw i32 %conv3035, 8
  %sub3037 = sub nsw i32 %mul3036, -32768
  %conv3038 = trunc i32 %sub3037 to i16
  %conv3039 = sext i16 %conv3038 to i32
  %add3040 = add nsw i32 %conv3039, -32768
  br label %cond.end.3041

cond.end.3041:                                    ; preds = %cond.false.3033, %cond.true.3027
  %cond3042 = phi i32 [ %conv3032, %cond.true.3027 ], [ %add3040, %cond.false.3033 ]
  %conv3043 = sext i32 %cond3042 to i64
  store i64 %conv3043, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3044:                                  ; preds = %cond.true.2775
  %529 = load i64, i64* %len, align 8
  %add3045 = add nsw i64 0, %529
  %mul3046 = mul nsw i64 0, %add3045
  %sub3047 = sub nsw i64 %mul3046, 1
  %cmp3048 = icmp slt i64 %sub3047, 0
  br i1 %cmp3048, label %cond.true.3050, label %cond.false.3067

cond.true.3050:                                   ; preds = %cond.false.3044
  %530 = load i64, i64* %len, align 8
  %add3051 = add nsw i64 0, %530
  %mul3052 = mul nsw i64 0, %add3051
  %add3053 = add nsw i64 %mul3052, 0
  %neg3054 = xor i64 %add3053, -1
  %cmp3055 = icmp eq i64 %neg3054, -1
  %conv3056 = zext i1 %cmp3055 to i32
  %sub3057 = sub nsw i32 0, %conv3056
  %conv3058 = sext i32 %sub3057 to i64
  %531 = load i64, i64* %len, align 8
  %add3059 = add nsw i64 0, %531
  %mul3060 = mul nsw i64 0, %add3059
  %add3061 = add nsw i64 %mul3060, 1
  %shl3062 = shl i64 %add3061, 62
  %sub3063 = sub nsw i64 %shl3062, 1
  %mul3064 = mul nsw i64 %sub3063, 2
  %add3065 = add nsw i64 %mul3064, 1
  %sub3066 = sub nsw i64 %conv3058, %add3065
  br label %cond.end.3071

cond.false.3067:                                  ; preds = %cond.false.3044
  %532 = load i64, i64* %len, align 8
  %add3068 = add nsw i64 0, %532
  %mul3069 = mul nsw i64 0, %add3068
  %add3070 = add nsw i64 %mul3069, 0
  br label %cond.end.3071

cond.end.3071:                                    ; preds = %cond.false.3067, %cond.true.3050
  %cond3072 = phi i64 [ %sub3066, %cond.true.3050 ], [ %add3070, %cond.false.3067 ]
  %cmp3073 = icmp eq i64 %cond3072, 0
  br i1 %cmp3073, label %land.lhs.true.3075, label %lor.lhs.false.3078

land.lhs.true.3075:                               ; preds = %cond.end.3071
  %533 = load i64, i64* %len, align 8
  %cmp3076 = icmp slt i64 %533, 0
  br i1 %cmp3076, label %cond.true.3213, label %lor.lhs.false.3078

lor.lhs.false.3078:                               ; preds = %land.lhs.true.3075, %cond.end.3071
  br i1 false, label %cond.true.3079, label %cond.false.3139

cond.true.3079:                                   ; preds = %lor.lhs.false.3078
  %534 = load i64, i64* %len, align 8
  %cmp3080 = icmp slt i64 %534, 0
  br i1 %cmp3080, label %cond.true.3082, label %cond.false.3105

cond.true.3082:                                   ; preds = %cond.true.3079
  %535 = load i64, i64* %len, align 8
  %536 = load i64, i64* %len, align 8
  %add3083 = add nsw i64 0, %536
  %mul3084 = mul nsw i64 0, %add3083
  %sub3085 = sub nsw i64 %mul3084, 1
  %cmp3086 = icmp slt i64 %sub3085, 0
  br i1 %cmp3086, label %cond.true.3088, label %cond.false.3096

cond.true.3088:                                   ; preds = %cond.true.3082
  %537 = load i64, i64* %len, align 8
  %add3089 = add nsw i64 0, %537
  %mul3090 = mul nsw i64 0, %add3089
  %add3091 = add nsw i64 %mul3090, 1
  %shl3092 = shl i64 %add3091, 62
  %sub3093 = sub nsw i64 %shl3092, 1
  %mul3094 = mul nsw i64 %sub3093, 2
  %add3095 = add nsw i64 %mul3094, 1
  br label %cond.end.3100

cond.false.3096:                                  ; preds = %cond.true.3082
  %538 = load i64, i64* %len, align 8
  %add3097 = add nsw i64 0, %538
  %mul3098 = mul nsw i64 0, %add3097
  %sub3099 = sub nsw i64 %mul3098, 1
  br label %cond.end.3100

cond.end.3100:                                    ; preds = %cond.false.3096, %cond.true.3088
  %cond3101 = phi i64 [ %add3095, %cond.true.3088 ], [ %sub3099, %cond.false.3096 ]
  %div3102 = sdiv i64 %cond3101, 8
  %cmp3103 = icmp slt i64 %535, %div3102
  br i1 %cmp3103, label %cond.true.3213, label %lor.lhs.false.3199

cond.false.3105:                                  ; preds = %cond.true.3079
  br i1 false, label %cond.true.3106, label %cond.false.3107

cond.true.3106:                                   ; preds = %cond.false.3105
  br i1 false, label %cond.true.3213, label %lor.lhs.false.3199

cond.false.3107:                                  ; preds = %cond.false.3105
  %539 = load i64, i64* %len, align 8
  %add3108 = add nsw i64 0, %539
  %mul3109 = mul nsw i64 0, %add3108
  %sub3110 = sub nsw i64 %mul3109, 1
  %cmp3111 = icmp slt i64 %sub3110, 0
  br i1 %cmp3111, label %cond.true.3113, label %cond.false.3130

cond.true.3113:                                   ; preds = %cond.false.3107
  %540 = load i64, i64* %len, align 8
  %add3114 = add nsw i64 0, %540
  %mul3115 = mul nsw i64 0, %add3114
  %add3116 = add nsw i64 %mul3115, 0
  %neg3117 = xor i64 %add3116, -1
  %cmp3118 = icmp eq i64 %neg3117, -1
  %conv3119 = zext i1 %cmp3118 to i32
  %sub3120 = sub nsw i32 0, %conv3119
  %conv3121 = sext i32 %sub3120 to i64
  %541 = load i64, i64* %len, align 8
  %add3122 = add nsw i64 0, %541
  %mul3123 = mul nsw i64 0, %add3122
  %add3124 = add nsw i64 %mul3123, 1
  %shl3125 = shl i64 %add3124, 62
  %sub3126 = sub nsw i64 %shl3125, 1
  %mul3127 = mul nsw i64 %sub3126, 2
  %add3128 = add nsw i64 %mul3127, 1
  %sub3129 = sub nsw i64 %conv3121, %add3128
  br label %cond.end.3134

cond.false.3130:                                  ; preds = %cond.false.3107
  %542 = load i64, i64* %len, align 8
  %add3131 = add nsw i64 0, %542
  %mul3132 = mul nsw i64 0, %add3131
  %add3133 = add nsw i64 %mul3132, 0
  br label %cond.end.3134

cond.end.3134:                                    ; preds = %cond.false.3130, %cond.true.3113
  %cond3135 = phi i64 [ %sub3129, %cond.true.3113 ], [ %add3133, %cond.false.3130 ]
  %div3136 = sdiv i64 %cond3135, 8
  %543 = load i64, i64* %len, align 8
  %cmp3137 = icmp slt i64 %div3136, %543
  br i1 %cmp3137, label %cond.true.3213, label %lor.lhs.false.3199

cond.false.3139:                                  ; preds = %lor.lhs.false.3078
  br i1 false, label %cond.true.3140, label %cond.false.3141

cond.true.3140:                                   ; preds = %cond.false.3139
  br i1 false, label %cond.true.3213, label %lor.lhs.false.3199

cond.false.3141:                                  ; preds = %cond.false.3139
  %544 = load i64, i64* %len, align 8
  %cmp3142 = icmp slt i64 %544, 0
  br i1 %cmp3142, label %cond.true.3144, label %cond.false.3176

cond.true.3144:                                   ; preds = %cond.false.3141
  %545 = load i64, i64* %len, align 8
  %546 = load i64, i64* %len, align 8
  %add3145 = add nsw i64 0, %546
  %mul3146 = mul nsw i64 0, %add3145
  %sub3147 = sub nsw i64 %mul3146, 1
  %cmp3148 = icmp slt i64 %sub3147, 0
  br i1 %cmp3148, label %cond.true.3150, label %cond.false.3167

cond.true.3150:                                   ; preds = %cond.true.3144
  %547 = load i64, i64* %len, align 8
  %add3151 = add nsw i64 0, %547
  %mul3152 = mul nsw i64 0, %add3151
  %add3153 = add nsw i64 %mul3152, 0
  %neg3154 = xor i64 %add3153, -1
  %cmp3155 = icmp eq i64 %neg3154, -1
  %conv3156 = zext i1 %cmp3155 to i32
  %sub3157 = sub nsw i32 0, %conv3156
  %conv3158 = sext i32 %sub3157 to i64
  %548 = load i64, i64* %len, align 8
  %add3159 = add nsw i64 0, %548
  %mul3160 = mul nsw i64 0, %add3159
  %add3161 = add nsw i64 %mul3160, 1
  %shl3162 = shl i64 %add3161, 62
  %sub3163 = sub nsw i64 %shl3162, 1
  %mul3164 = mul nsw i64 %sub3163, 2
  %add3165 = add nsw i64 %mul3164, 1
  %sub3166 = sub nsw i64 %conv3158, %add3165
  br label %cond.end.3171

cond.false.3167:                                  ; preds = %cond.true.3144
  %549 = load i64, i64* %len, align 8
  %add3168 = add nsw i64 0, %549
  %mul3169 = mul nsw i64 0, %add3168
  %add3170 = add nsw i64 %mul3169, 0
  br label %cond.end.3171

cond.end.3171:                                    ; preds = %cond.false.3167, %cond.true.3150
  %cond3172 = phi i64 [ %sub3166, %cond.true.3150 ], [ %add3170, %cond.false.3167 ]
  %div3173 = sdiv i64 %cond3172, 8
  %cmp3174 = icmp slt i64 %545, %div3173
  br i1 %cmp3174, label %cond.true.3213, label %lor.lhs.false.3199

cond.false.3176:                                  ; preds = %cond.false.3141
  %550 = load i64, i64* %len, align 8
  %add3177 = add nsw i64 0, %550
  %mul3178 = mul nsw i64 0, %add3177
  %sub3179 = sub nsw i64 %mul3178, 1
  %cmp3180 = icmp slt i64 %sub3179, 0
  br i1 %cmp3180, label %cond.true.3182, label %cond.false.3190

cond.true.3182:                                   ; preds = %cond.false.3176
  %551 = load i64, i64* %len, align 8
  %add3183 = add nsw i64 0, %551
  %mul3184 = mul nsw i64 0, %add3183
  %add3185 = add nsw i64 %mul3184, 1
  %shl3186 = shl i64 %add3185, 62
  %sub3187 = sub nsw i64 %shl3186, 1
  %mul3188 = mul nsw i64 %sub3187, 2
  %add3189 = add nsw i64 %mul3188, 1
  br label %cond.end.3194

cond.false.3190:                                  ; preds = %cond.false.3176
  %552 = load i64, i64* %len, align 8
  %add3191 = add nsw i64 0, %552
  %mul3192 = mul nsw i64 0, %add3191
  %sub3193 = sub nsw i64 %mul3192, 1
  br label %cond.end.3194

cond.end.3194:                                    ; preds = %cond.false.3190, %cond.true.3182
  %cond3195 = phi i64 [ %add3189, %cond.true.3182 ], [ %sub3193, %cond.false.3190 ]
  %div3196 = sdiv i64 %cond3195, 8
  %553 = load i64, i64* %len, align 8
  %cmp3197 = icmp slt i64 %div3196, %553
  br i1 %cmp3197, label %cond.true.3213, label %lor.lhs.false.3199

lor.lhs.false.3199:                               ; preds = %cond.end.3194, %cond.end.3171, %cond.true.3140, %cond.end.3134, %cond.true.3106, %cond.end.3100
  %554 = load i64, i64* %len, align 8
  %mul3200 = mul nsw i64 %554, 8
  %mul3201 = mul nsw i64 0, %mul3200
  %sub3202 = sub nsw i64 %mul3201, 1
  %cmp3203 = icmp slt i64 %sub3202, 0
  br i1 %cmp3203, label %land.lhs.true.3205, label %lor.lhs.false.3209

land.lhs.true.3205:                               ; preds = %lor.lhs.false.3199
  %555 = load i64, i64* %len, align 8
  %mul3206 = mul nsw i64 %555, 8
  %cmp3207 = icmp slt i64 %mul3206, -32768
  br i1 %cmp3207, label %cond.true.3213, label %lor.lhs.false.3209

lor.lhs.false.3209:                               ; preds = %land.lhs.true.3205, %lor.lhs.false.3199
  %556 = load i64, i64* %len, align 8
  %mul3210 = mul nsw i64 %556, 8
  %cmp3211 = icmp slt i64 32767, %mul3210
  br i1 %cmp3211, label %cond.true.3213, label %cond.false.3236

cond.true.3213:                                   ; preds = %lor.lhs.false.3209, %land.lhs.true.3205, %cond.end.3194, %cond.end.3171, %cond.true.3140, %cond.end.3134, %cond.true.3106, %cond.end.3100, %land.lhs.true.3075
  %557 = load i64, i64* %len, align 8
  %conv3214 = trunc i64 %557 to i16
  %conv3215 = zext i16 %conv3214 to i32
  %mul3216 = mul nsw i32 %conv3215, 8
  %cmp3217 = icmp sle i32 %mul3216, 32767
  br i1 %cmp3217, label %cond.true.3219, label %cond.false.3225

cond.true.3219:                                   ; preds = %cond.true.3213
  %558 = load i64, i64* %len, align 8
  %conv3220 = trunc i64 %558 to i16
  %conv3221 = zext i16 %conv3220 to i32
  %mul3222 = mul nsw i32 %conv3221, 8
  %conv3223 = trunc i32 %mul3222 to i16
  %conv3224 = sext i16 %conv3223 to i32
  br label %cond.end.3233

cond.false.3225:                                  ; preds = %cond.true.3213
  %559 = load i64, i64* %len, align 8
  %conv3226 = trunc i64 %559 to i16
  %conv3227 = zext i16 %conv3226 to i32
  %mul3228 = mul nsw i32 %conv3227, 8
  %sub3229 = sub nsw i32 %mul3228, -32768
  %conv3230 = trunc i32 %sub3229 to i16
  %conv3231 = sext i16 %conv3230 to i32
  %add3232 = add nsw i32 %conv3231, -32768
  br label %cond.end.3233

cond.end.3233:                                    ; preds = %cond.false.3225, %cond.true.3219
  %cond3234 = phi i32 [ %conv3224, %cond.true.3219 ], [ %add3232, %cond.false.3225 ]
  %conv3235 = sext i32 %cond3234 to i64
  store i64 %conv3235, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3236:                                  ; preds = %lor.lhs.false.3209
  %560 = load i64, i64* %len, align 8
  %conv3237 = trunc i64 %560 to i16
  %conv3238 = zext i16 %conv3237 to i32
  %mul3239 = mul nsw i32 %conv3238, 8
  %cmp3240 = icmp sle i32 %mul3239, 32767
  br i1 %cmp3240, label %cond.true.3242, label %cond.false.3248

cond.true.3242:                                   ; preds = %cond.false.3236
  %561 = load i64, i64* %len, align 8
  %conv3243 = trunc i64 %561 to i16
  %conv3244 = zext i16 %conv3243 to i32
  %mul3245 = mul nsw i32 %conv3244, 8
  %conv3246 = trunc i32 %mul3245 to i16
  %conv3247 = sext i16 %conv3246 to i32
  br label %cond.end.3256

cond.false.3248:                                  ; preds = %cond.false.3236
  %562 = load i64, i64* %len, align 8
  %conv3249 = trunc i64 %562 to i16
  %conv3250 = zext i16 %conv3249 to i32
  %mul3251 = mul nsw i32 %conv3250, 8
  %sub3252 = sub nsw i32 %mul3251, -32768
  %conv3253 = trunc i32 %sub3252 to i16
  %conv3254 = sext i16 %conv3253 to i32
  %add3255 = add nsw i32 %conv3254, -32768
  br label %cond.end.3256

cond.end.3256:                                    ; preds = %cond.false.3248, %cond.true.3242
  %cond3257 = phi i32 [ %conv3247, %cond.true.3242 ], [ %add3255, %cond.false.3248 ]
  %conv3258 = sext i32 %cond3257 to i64
  store i64 %conv3258, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3259:                                  ; preds = %cond.false.2774
  br i1 false, label %cond.true.3260, label %cond.false.3688

cond.true.3260:                                   ; preds = %cond.false.3259
  br i1 false, label %cond.true.3261, label %cond.false.3487

cond.true.3261:                                   ; preds = %cond.true.3260
  %563 = load i64, i64* %len, align 8
  %conv3262 = trunc i64 %563 to i32
  %add3263 = add nsw i32 0, %conv3262
  %mul3264 = mul nsw i32 0, %add3263
  %sub3265 = sub nsw i32 %mul3264, 1
  %cmp3266 = icmp slt i32 %sub3265, 0
  br i1 %cmp3266, label %cond.true.3268, label %cond.false.3286

cond.true.3268:                                   ; preds = %cond.true.3261
  %564 = load i64, i64* %len, align 8
  %conv3269 = trunc i64 %564 to i32
  %add3270 = add nsw i32 0, %conv3269
  %mul3271 = mul nsw i32 0, %add3270
  %add3272 = add nsw i32 %mul3271, 0
  %neg3273 = xor i32 %add3272, -1
  %cmp3274 = icmp eq i32 %neg3273, -1
  %conv3275 = zext i1 %cmp3274 to i32
  %sub3276 = sub nsw i32 0, %conv3275
  %565 = load i64, i64* %len, align 8
  %conv3277 = trunc i64 %565 to i32
  %add3278 = add nsw i32 0, %conv3277
  %mul3279 = mul nsw i32 0, %add3278
  %add3280 = add nsw i32 %mul3279, 1
  %shl3281 = shl i32 %add3280, 30
  %sub3282 = sub nsw i32 %shl3281, 1
  %mul3283 = mul nsw i32 %sub3282, 2
  %add3284 = add nsw i32 %mul3283, 1
  %sub3285 = sub nsw i32 %sub3276, %add3284
  br label %cond.end.3291

cond.false.3286:                                  ; preds = %cond.true.3261
  %566 = load i64, i64* %len, align 8
  %conv3287 = trunc i64 %566 to i32
  %add3288 = add nsw i32 0, %conv3287
  %mul3289 = mul nsw i32 0, %add3288
  %add3290 = add nsw i32 %mul3289, 0
  br label %cond.end.3291

cond.end.3291:                                    ; preds = %cond.false.3286, %cond.true.3268
  %cond3292 = phi i32 [ %sub3285, %cond.true.3268 ], [ %add3290, %cond.false.3286 ]
  %cmp3293 = icmp eq i32 %cond3292, 0
  br i1 %cmp3293, label %land.lhs.true.3295, label %lor.lhs.false.3299

land.lhs.true.3295:                               ; preds = %cond.end.3291
  %567 = load i64, i64* %len, align 8
  %conv3296 = trunc i64 %567 to i32
  %cmp3297 = icmp slt i32 %conv3296, 0
  br i1 %cmp3297, label %cond.true.3455, label %lor.lhs.false.3299

lor.lhs.false.3299:                               ; preds = %land.lhs.true.3295, %cond.end.3291
  br i1 false, label %cond.true.3300, label %cond.false.3369

cond.true.3300:                                   ; preds = %lor.lhs.false.3299
  %568 = load i64, i64* %len, align 8
  %conv3301 = trunc i64 %568 to i32
  %cmp3302 = icmp slt i32 %conv3301, 0
  br i1 %cmp3302, label %cond.true.3304, label %cond.false.3331

cond.true.3304:                                   ; preds = %cond.true.3300
  %569 = load i64, i64* %len, align 8
  %conv3305 = trunc i64 %569 to i32
  %570 = load i64, i64* %len, align 8
  %conv3306 = trunc i64 %570 to i32
  %add3307 = add nsw i32 0, %conv3306
  %mul3308 = mul nsw i32 0, %add3307
  %sub3309 = sub nsw i32 %mul3308, 1
  %cmp3310 = icmp slt i32 %sub3309, 0
  br i1 %cmp3310, label %cond.true.3312, label %cond.false.3321

cond.true.3312:                                   ; preds = %cond.true.3304
  %571 = load i64, i64* %len, align 8
  %conv3313 = trunc i64 %571 to i32
  %add3314 = add nsw i32 0, %conv3313
  %mul3315 = mul nsw i32 0, %add3314
  %add3316 = add nsw i32 %mul3315, 1
  %shl3317 = shl i32 %add3316, 30
  %sub3318 = sub nsw i32 %shl3317, 1
  %mul3319 = mul nsw i32 %sub3318, 2
  %add3320 = add nsw i32 %mul3319, 1
  br label %cond.end.3326

cond.false.3321:                                  ; preds = %cond.true.3304
  %572 = load i64, i64* %len, align 8
  %conv3322 = trunc i64 %572 to i32
  %add3323 = add nsw i32 0, %conv3322
  %mul3324 = mul nsw i32 0, %add3323
  %sub3325 = sub nsw i32 %mul3324, 1
  br label %cond.end.3326

cond.end.3326:                                    ; preds = %cond.false.3321, %cond.true.3312
  %cond3327 = phi i32 [ %add3320, %cond.true.3312 ], [ %sub3325, %cond.false.3321 ]
  %div3328 = sdiv i32 %cond3327, 8
  %cmp3329 = icmp slt i32 %conv3305, %div3328
  br i1 %cmp3329, label %cond.true.3455, label %lor.lhs.false.3438

cond.false.3331:                                  ; preds = %cond.true.3300
  br i1 false, label %cond.true.3332, label %cond.false.3333

cond.true.3332:                                   ; preds = %cond.false.3331
  br i1 false, label %cond.true.3455, label %lor.lhs.false.3438

cond.false.3333:                                  ; preds = %cond.false.3331
  %573 = load i64, i64* %len, align 8
  %conv3334 = trunc i64 %573 to i32
  %add3335 = add nsw i32 0, %conv3334
  %mul3336 = mul nsw i32 0, %add3335
  %sub3337 = sub nsw i32 %mul3336, 1
  %cmp3338 = icmp slt i32 %sub3337, 0
  br i1 %cmp3338, label %cond.true.3340, label %cond.false.3358

cond.true.3340:                                   ; preds = %cond.false.3333
  %574 = load i64, i64* %len, align 8
  %conv3341 = trunc i64 %574 to i32
  %add3342 = add nsw i32 0, %conv3341
  %mul3343 = mul nsw i32 0, %add3342
  %add3344 = add nsw i32 %mul3343, 0
  %neg3345 = xor i32 %add3344, -1
  %cmp3346 = icmp eq i32 %neg3345, -1
  %conv3347 = zext i1 %cmp3346 to i32
  %sub3348 = sub nsw i32 0, %conv3347
  %575 = load i64, i64* %len, align 8
  %conv3349 = trunc i64 %575 to i32
  %add3350 = add nsw i32 0, %conv3349
  %mul3351 = mul nsw i32 0, %add3350
  %add3352 = add nsw i32 %mul3351, 1
  %shl3353 = shl i32 %add3352, 30
  %sub3354 = sub nsw i32 %shl3353, 1
  %mul3355 = mul nsw i32 %sub3354, 2
  %add3356 = add nsw i32 %mul3355, 1
  %sub3357 = sub nsw i32 %sub3348, %add3356
  br label %cond.end.3363

cond.false.3358:                                  ; preds = %cond.false.3333
  %576 = load i64, i64* %len, align 8
  %conv3359 = trunc i64 %576 to i32
  %add3360 = add nsw i32 0, %conv3359
  %mul3361 = mul nsw i32 0, %add3360
  %add3362 = add nsw i32 %mul3361, 0
  br label %cond.end.3363

cond.end.3363:                                    ; preds = %cond.false.3358, %cond.true.3340
  %cond3364 = phi i32 [ %sub3357, %cond.true.3340 ], [ %add3362, %cond.false.3358 ]
  %div3365 = sdiv i32 %cond3364, 8
  %577 = load i64, i64* %len, align 8
  %conv3366 = trunc i64 %577 to i32
  %cmp3367 = icmp slt i32 %div3365, %conv3366
  br i1 %cmp3367, label %cond.true.3455, label %lor.lhs.false.3438

cond.false.3369:                                  ; preds = %lor.lhs.false.3299
  br i1 false, label %cond.true.3370, label %cond.false.3371

cond.true.3370:                                   ; preds = %cond.false.3369
  br i1 false, label %cond.true.3455, label %lor.lhs.false.3438

cond.false.3371:                                  ; preds = %cond.false.3369
  %578 = load i64, i64* %len, align 8
  %conv3372 = trunc i64 %578 to i32
  %cmp3373 = icmp slt i32 %conv3372, 0
  br i1 %cmp3373, label %cond.true.3375, label %cond.false.3411

cond.true.3375:                                   ; preds = %cond.false.3371
  %579 = load i64, i64* %len, align 8
  %conv3376 = trunc i64 %579 to i32
  %580 = load i64, i64* %len, align 8
  %conv3377 = trunc i64 %580 to i32
  %add3378 = add nsw i32 0, %conv3377
  %mul3379 = mul nsw i32 0, %add3378
  %sub3380 = sub nsw i32 %mul3379, 1
  %cmp3381 = icmp slt i32 %sub3380, 0
  br i1 %cmp3381, label %cond.true.3383, label %cond.false.3401

cond.true.3383:                                   ; preds = %cond.true.3375
  %581 = load i64, i64* %len, align 8
  %conv3384 = trunc i64 %581 to i32
  %add3385 = add nsw i32 0, %conv3384
  %mul3386 = mul nsw i32 0, %add3385
  %add3387 = add nsw i32 %mul3386, 0
  %neg3388 = xor i32 %add3387, -1
  %cmp3389 = icmp eq i32 %neg3388, -1
  %conv3390 = zext i1 %cmp3389 to i32
  %sub3391 = sub nsw i32 0, %conv3390
  %582 = load i64, i64* %len, align 8
  %conv3392 = trunc i64 %582 to i32
  %add3393 = add nsw i32 0, %conv3392
  %mul3394 = mul nsw i32 0, %add3393
  %add3395 = add nsw i32 %mul3394, 1
  %shl3396 = shl i32 %add3395, 30
  %sub3397 = sub nsw i32 %shl3396, 1
  %mul3398 = mul nsw i32 %sub3397, 2
  %add3399 = add nsw i32 %mul3398, 1
  %sub3400 = sub nsw i32 %sub3391, %add3399
  br label %cond.end.3406

cond.false.3401:                                  ; preds = %cond.true.3375
  %583 = load i64, i64* %len, align 8
  %conv3402 = trunc i64 %583 to i32
  %add3403 = add nsw i32 0, %conv3402
  %mul3404 = mul nsw i32 0, %add3403
  %add3405 = add nsw i32 %mul3404, 0
  br label %cond.end.3406

cond.end.3406:                                    ; preds = %cond.false.3401, %cond.true.3383
  %cond3407 = phi i32 [ %sub3400, %cond.true.3383 ], [ %add3405, %cond.false.3401 ]
  %div3408 = sdiv i32 %cond3407, 8
  %cmp3409 = icmp slt i32 %conv3376, %div3408
  br i1 %cmp3409, label %cond.true.3455, label %lor.lhs.false.3438

cond.false.3411:                                  ; preds = %cond.false.3371
  %584 = load i64, i64* %len, align 8
  %conv3412 = trunc i64 %584 to i32
  %add3413 = add nsw i32 0, %conv3412
  %mul3414 = mul nsw i32 0, %add3413
  %sub3415 = sub nsw i32 %mul3414, 1
  %cmp3416 = icmp slt i32 %sub3415, 0
  br i1 %cmp3416, label %cond.true.3418, label %cond.false.3427

cond.true.3418:                                   ; preds = %cond.false.3411
  %585 = load i64, i64* %len, align 8
  %conv3419 = trunc i64 %585 to i32
  %add3420 = add nsw i32 0, %conv3419
  %mul3421 = mul nsw i32 0, %add3420
  %add3422 = add nsw i32 %mul3421, 1
  %shl3423 = shl i32 %add3422, 30
  %sub3424 = sub nsw i32 %shl3423, 1
  %mul3425 = mul nsw i32 %sub3424, 2
  %add3426 = add nsw i32 %mul3425, 1
  br label %cond.end.3432

cond.false.3427:                                  ; preds = %cond.false.3411
  %586 = load i64, i64* %len, align 8
  %conv3428 = trunc i64 %586 to i32
  %add3429 = add nsw i32 0, %conv3428
  %mul3430 = mul nsw i32 0, %add3429
  %sub3431 = sub nsw i32 %mul3430, 1
  br label %cond.end.3432

cond.end.3432:                                    ; preds = %cond.false.3427, %cond.true.3418
  %cond3433 = phi i32 [ %add3426, %cond.true.3418 ], [ %sub3431, %cond.false.3427 ]
  %div3434 = sdiv i32 %cond3433, 8
  %587 = load i64, i64* %len, align 8
  %conv3435 = trunc i64 %587 to i32
  %cmp3436 = icmp slt i32 %div3434, %conv3435
  br i1 %cmp3436, label %cond.true.3455, label %lor.lhs.false.3438

lor.lhs.false.3438:                               ; preds = %cond.end.3432, %cond.end.3406, %cond.true.3370, %cond.end.3363, %cond.true.3332, %cond.end.3326
  %588 = load i64, i64* %len, align 8
  %conv3439 = trunc i64 %588 to i32
  %mul3440 = mul nsw i32 %conv3439, 8
  %mul3441 = mul nsw i32 0, %mul3440
  %sub3442 = sub nsw i32 %mul3441, 1
  %cmp3443 = icmp slt i32 %sub3442, 0
  br i1 %cmp3443, label %land.lhs.true.3445, label %lor.lhs.false.3450

land.lhs.true.3445:                               ; preds = %lor.lhs.false.3438
  %589 = load i64, i64* %len, align 8
  %conv3446 = trunc i64 %589 to i32
  %mul3447 = mul nsw i32 %conv3446, 8
  %cmp3448 = icmp slt i32 %mul3447, -2147483648
  br i1 %cmp3448, label %cond.true.3455, label %lor.lhs.false.3450

lor.lhs.false.3450:                               ; preds = %land.lhs.true.3445, %lor.lhs.false.3438
  %590 = load i64, i64* %len, align 8
  %conv3451 = trunc i64 %590 to i32
  %mul3452 = mul nsw i32 %conv3451, 8
  %cmp3453 = icmp slt i32 2147483647, %mul3452
  br i1 %cmp3453, label %cond.true.3455, label %cond.false.3471

cond.true.3455:                                   ; preds = %lor.lhs.false.3450, %land.lhs.true.3445, %cond.end.3432, %cond.end.3406, %cond.true.3370, %cond.end.3363, %cond.true.3332, %cond.end.3326, %land.lhs.true.3295
  %591 = load i64, i64* %len, align 8
  %conv3456 = trunc i64 %591 to i32
  %mul3457 = mul i32 %conv3456, 8
  %cmp3458 = icmp ule i32 %mul3457, 2147483647
  br i1 %cmp3458, label %cond.true.3460, label %cond.false.3463

cond.true.3460:                                   ; preds = %cond.true.3455
  %592 = load i64, i64* %len, align 8
  %conv3461 = trunc i64 %592 to i32
  %mul3462 = mul i32 %conv3461, 8
  br label %cond.end.3468

cond.false.3463:                                  ; preds = %cond.true.3455
  %593 = load i64, i64* %len, align 8
  %conv3464 = trunc i64 %593 to i32
  %mul3465 = mul i32 %conv3464, 8
  %sub3466 = sub i32 %mul3465, -2147483648
  %add3467 = add nsw i32 %sub3466, -2147483648
  br label %cond.end.3468

cond.end.3468:                                    ; preds = %cond.false.3463, %cond.true.3460
  %cond3469 = phi i32 [ %mul3462, %cond.true.3460 ], [ %add3467, %cond.false.3463 ]
  %conv3470 = sext i32 %cond3469 to i64
  store i64 %conv3470, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3471:                                  ; preds = %lor.lhs.false.3450
  %594 = load i64, i64* %len, align 8
  %conv3472 = trunc i64 %594 to i32
  %mul3473 = mul i32 %conv3472, 8
  %cmp3474 = icmp ule i32 %mul3473, 2147483647
  br i1 %cmp3474, label %cond.true.3476, label %cond.false.3479

cond.true.3476:                                   ; preds = %cond.false.3471
  %595 = load i64, i64* %len, align 8
  %conv3477 = trunc i64 %595 to i32
  %mul3478 = mul i32 %conv3477, 8
  br label %cond.end.3484

cond.false.3479:                                  ; preds = %cond.false.3471
  %596 = load i64, i64* %len, align 8
  %conv3480 = trunc i64 %596 to i32
  %mul3481 = mul i32 %conv3480, 8
  %sub3482 = sub i32 %mul3481, -2147483648
  %add3483 = add nsw i32 %sub3482, -2147483648
  br label %cond.end.3484

cond.end.3484:                                    ; preds = %cond.false.3479, %cond.true.3476
  %cond3485 = phi i32 [ %mul3478, %cond.true.3476 ], [ %add3483, %cond.false.3479 ]
  %conv3486 = sext i32 %cond3485 to i64
  store i64 %conv3486, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3487:                                  ; preds = %cond.true.3260
  %597 = load i64, i64* %len, align 8
  %add3488 = add nsw i64 0, %597
  %mul3489 = mul nsw i64 0, %add3488
  %sub3490 = sub nsw i64 %mul3489, 1
  %cmp3491 = icmp slt i64 %sub3490, 0
  br i1 %cmp3491, label %cond.true.3493, label %cond.false.3510

cond.true.3493:                                   ; preds = %cond.false.3487
  %598 = load i64, i64* %len, align 8
  %add3494 = add nsw i64 0, %598
  %mul3495 = mul nsw i64 0, %add3494
  %add3496 = add nsw i64 %mul3495, 0
  %neg3497 = xor i64 %add3496, -1
  %cmp3498 = icmp eq i64 %neg3497, -1
  %conv3499 = zext i1 %cmp3498 to i32
  %sub3500 = sub nsw i32 0, %conv3499
  %conv3501 = sext i32 %sub3500 to i64
  %599 = load i64, i64* %len, align 8
  %add3502 = add nsw i64 0, %599
  %mul3503 = mul nsw i64 0, %add3502
  %add3504 = add nsw i64 %mul3503, 1
  %shl3505 = shl i64 %add3504, 62
  %sub3506 = sub nsw i64 %shl3505, 1
  %mul3507 = mul nsw i64 %sub3506, 2
  %add3508 = add nsw i64 %mul3507, 1
  %sub3509 = sub nsw i64 %conv3501, %add3508
  br label %cond.end.3514

cond.false.3510:                                  ; preds = %cond.false.3487
  %600 = load i64, i64* %len, align 8
  %add3511 = add nsw i64 0, %600
  %mul3512 = mul nsw i64 0, %add3511
  %add3513 = add nsw i64 %mul3512, 0
  br label %cond.end.3514

cond.end.3514:                                    ; preds = %cond.false.3510, %cond.true.3493
  %cond3515 = phi i64 [ %sub3509, %cond.true.3493 ], [ %add3513, %cond.false.3510 ]
  %cmp3516 = icmp eq i64 %cond3515, 0
  br i1 %cmp3516, label %land.lhs.true.3518, label %lor.lhs.false.3521

land.lhs.true.3518:                               ; preds = %cond.end.3514
  %601 = load i64, i64* %len, align 8
  %cmp3519 = icmp slt i64 %601, 0
  br i1 %cmp3519, label %cond.true.3656, label %lor.lhs.false.3521

lor.lhs.false.3521:                               ; preds = %land.lhs.true.3518, %cond.end.3514
  br i1 false, label %cond.true.3522, label %cond.false.3582

cond.true.3522:                                   ; preds = %lor.lhs.false.3521
  %602 = load i64, i64* %len, align 8
  %cmp3523 = icmp slt i64 %602, 0
  br i1 %cmp3523, label %cond.true.3525, label %cond.false.3548

cond.true.3525:                                   ; preds = %cond.true.3522
  %603 = load i64, i64* %len, align 8
  %604 = load i64, i64* %len, align 8
  %add3526 = add nsw i64 0, %604
  %mul3527 = mul nsw i64 0, %add3526
  %sub3528 = sub nsw i64 %mul3527, 1
  %cmp3529 = icmp slt i64 %sub3528, 0
  br i1 %cmp3529, label %cond.true.3531, label %cond.false.3539

cond.true.3531:                                   ; preds = %cond.true.3525
  %605 = load i64, i64* %len, align 8
  %add3532 = add nsw i64 0, %605
  %mul3533 = mul nsw i64 0, %add3532
  %add3534 = add nsw i64 %mul3533, 1
  %shl3535 = shl i64 %add3534, 62
  %sub3536 = sub nsw i64 %shl3535, 1
  %mul3537 = mul nsw i64 %sub3536, 2
  %add3538 = add nsw i64 %mul3537, 1
  br label %cond.end.3543

cond.false.3539:                                  ; preds = %cond.true.3525
  %606 = load i64, i64* %len, align 8
  %add3540 = add nsw i64 0, %606
  %mul3541 = mul nsw i64 0, %add3540
  %sub3542 = sub nsw i64 %mul3541, 1
  br label %cond.end.3543

cond.end.3543:                                    ; preds = %cond.false.3539, %cond.true.3531
  %cond3544 = phi i64 [ %add3538, %cond.true.3531 ], [ %sub3542, %cond.false.3539 ]
  %div3545 = sdiv i64 %cond3544, 8
  %cmp3546 = icmp slt i64 %603, %div3545
  br i1 %cmp3546, label %cond.true.3656, label %lor.lhs.false.3642

cond.false.3548:                                  ; preds = %cond.true.3522
  br i1 false, label %cond.true.3549, label %cond.false.3550

cond.true.3549:                                   ; preds = %cond.false.3548
  br i1 false, label %cond.true.3656, label %lor.lhs.false.3642

cond.false.3550:                                  ; preds = %cond.false.3548
  %607 = load i64, i64* %len, align 8
  %add3551 = add nsw i64 0, %607
  %mul3552 = mul nsw i64 0, %add3551
  %sub3553 = sub nsw i64 %mul3552, 1
  %cmp3554 = icmp slt i64 %sub3553, 0
  br i1 %cmp3554, label %cond.true.3556, label %cond.false.3573

cond.true.3556:                                   ; preds = %cond.false.3550
  %608 = load i64, i64* %len, align 8
  %add3557 = add nsw i64 0, %608
  %mul3558 = mul nsw i64 0, %add3557
  %add3559 = add nsw i64 %mul3558, 0
  %neg3560 = xor i64 %add3559, -1
  %cmp3561 = icmp eq i64 %neg3560, -1
  %conv3562 = zext i1 %cmp3561 to i32
  %sub3563 = sub nsw i32 0, %conv3562
  %conv3564 = sext i32 %sub3563 to i64
  %609 = load i64, i64* %len, align 8
  %add3565 = add nsw i64 0, %609
  %mul3566 = mul nsw i64 0, %add3565
  %add3567 = add nsw i64 %mul3566, 1
  %shl3568 = shl i64 %add3567, 62
  %sub3569 = sub nsw i64 %shl3568, 1
  %mul3570 = mul nsw i64 %sub3569, 2
  %add3571 = add nsw i64 %mul3570, 1
  %sub3572 = sub nsw i64 %conv3564, %add3571
  br label %cond.end.3577

cond.false.3573:                                  ; preds = %cond.false.3550
  %610 = load i64, i64* %len, align 8
  %add3574 = add nsw i64 0, %610
  %mul3575 = mul nsw i64 0, %add3574
  %add3576 = add nsw i64 %mul3575, 0
  br label %cond.end.3577

cond.end.3577:                                    ; preds = %cond.false.3573, %cond.true.3556
  %cond3578 = phi i64 [ %sub3572, %cond.true.3556 ], [ %add3576, %cond.false.3573 ]
  %div3579 = sdiv i64 %cond3578, 8
  %611 = load i64, i64* %len, align 8
  %cmp3580 = icmp slt i64 %div3579, %611
  br i1 %cmp3580, label %cond.true.3656, label %lor.lhs.false.3642

cond.false.3582:                                  ; preds = %lor.lhs.false.3521
  br i1 false, label %cond.true.3583, label %cond.false.3584

cond.true.3583:                                   ; preds = %cond.false.3582
  br i1 false, label %cond.true.3656, label %lor.lhs.false.3642

cond.false.3584:                                  ; preds = %cond.false.3582
  %612 = load i64, i64* %len, align 8
  %cmp3585 = icmp slt i64 %612, 0
  br i1 %cmp3585, label %cond.true.3587, label %cond.false.3619

cond.true.3587:                                   ; preds = %cond.false.3584
  %613 = load i64, i64* %len, align 8
  %614 = load i64, i64* %len, align 8
  %add3588 = add nsw i64 0, %614
  %mul3589 = mul nsw i64 0, %add3588
  %sub3590 = sub nsw i64 %mul3589, 1
  %cmp3591 = icmp slt i64 %sub3590, 0
  br i1 %cmp3591, label %cond.true.3593, label %cond.false.3610

cond.true.3593:                                   ; preds = %cond.true.3587
  %615 = load i64, i64* %len, align 8
  %add3594 = add nsw i64 0, %615
  %mul3595 = mul nsw i64 0, %add3594
  %add3596 = add nsw i64 %mul3595, 0
  %neg3597 = xor i64 %add3596, -1
  %cmp3598 = icmp eq i64 %neg3597, -1
  %conv3599 = zext i1 %cmp3598 to i32
  %sub3600 = sub nsw i32 0, %conv3599
  %conv3601 = sext i32 %sub3600 to i64
  %616 = load i64, i64* %len, align 8
  %add3602 = add nsw i64 0, %616
  %mul3603 = mul nsw i64 0, %add3602
  %add3604 = add nsw i64 %mul3603, 1
  %shl3605 = shl i64 %add3604, 62
  %sub3606 = sub nsw i64 %shl3605, 1
  %mul3607 = mul nsw i64 %sub3606, 2
  %add3608 = add nsw i64 %mul3607, 1
  %sub3609 = sub nsw i64 %conv3601, %add3608
  br label %cond.end.3614

cond.false.3610:                                  ; preds = %cond.true.3587
  %617 = load i64, i64* %len, align 8
  %add3611 = add nsw i64 0, %617
  %mul3612 = mul nsw i64 0, %add3611
  %add3613 = add nsw i64 %mul3612, 0
  br label %cond.end.3614

cond.end.3614:                                    ; preds = %cond.false.3610, %cond.true.3593
  %cond3615 = phi i64 [ %sub3609, %cond.true.3593 ], [ %add3613, %cond.false.3610 ]
  %div3616 = sdiv i64 %cond3615, 8
  %cmp3617 = icmp slt i64 %613, %div3616
  br i1 %cmp3617, label %cond.true.3656, label %lor.lhs.false.3642

cond.false.3619:                                  ; preds = %cond.false.3584
  %618 = load i64, i64* %len, align 8
  %add3620 = add nsw i64 0, %618
  %mul3621 = mul nsw i64 0, %add3620
  %sub3622 = sub nsw i64 %mul3621, 1
  %cmp3623 = icmp slt i64 %sub3622, 0
  br i1 %cmp3623, label %cond.true.3625, label %cond.false.3633

cond.true.3625:                                   ; preds = %cond.false.3619
  %619 = load i64, i64* %len, align 8
  %add3626 = add nsw i64 0, %619
  %mul3627 = mul nsw i64 0, %add3626
  %add3628 = add nsw i64 %mul3627, 1
  %shl3629 = shl i64 %add3628, 62
  %sub3630 = sub nsw i64 %shl3629, 1
  %mul3631 = mul nsw i64 %sub3630, 2
  %add3632 = add nsw i64 %mul3631, 1
  br label %cond.end.3637

cond.false.3633:                                  ; preds = %cond.false.3619
  %620 = load i64, i64* %len, align 8
  %add3634 = add nsw i64 0, %620
  %mul3635 = mul nsw i64 0, %add3634
  %sub3636 = sub nsw i64 %mul3635, 1
  br label %cond.end.3637

cond.end.3637:                                    ; preds = %cond.false.3633, %cond.true.3625
  %cond3638 = phi i64 [ %add3632, %cond.true.3625 ], [ %sub3636, %cond.false.3633 ]
  %div3639 = sdiv i64 %cond3638, 8
  %621 = load i64, i64* %len, align 8
  %cmp3640 = icmp slt i64 %div3639, %621
  br i1 %cmp3640, label %cond.true.3656, label %lor.lhs.false.3642

lor.lhs.false.3642:                               ; preds = %cond.end.3637, %cond.end.3614, %cond.true.3583, %cond.end.3577, %cond.true.3549, %cond.end.3543
  %622 = load i64, i64* %len, align 8
  %mul3643 = mul nsw i64 %622, 8
  %mul3644 = mul nsw i64 0, %mul3643
  %sub3645 = sub nsw i64 %mul3644, 1
  %cmp3646 = icmp slt i64 %sub3645, 0
  br i1 %cmp3646, label %land.lhs.true.3648, label %lor.lhs.false.3652

land.lhs.true.3648:                               ; preds = %lor.lhs.false.3642
  %623 = load i64, i64* %len, align 8
  %mul3649 = mul nsw i64 %623, 8
  %cmp3650 = icmp slt i64 %mul3649, -2147483648
  br i1 %cmp3650, label %cond.true.3656, label %lor.lhs.false.3652

lor.lhs.false.3652:                               ; preds = %land.lhs.true.3648, %lor.lhs.false.3642
  %624 = load i64, i64* %len, align 8
  %mul3653 = mul nsw i64 %624, 8
  %cmp3654 = icmp slt i64 2147483647, %mul3653
  br i1 %cmp3654, label %cond.true.3656, label %cond.false.3672

cond.true.3656:                                   ; preds = %lor.lhs.false.3652, %land.lhs.true.3648, %cond.end.3637, %cond.end.3614, %cond.true.3583, %cond.end.3577, %cond.true.3549, %cond.end.3543, %land.lhs.true.3518
  %625 = load i64, i64* %len, align 8
  %conv3657 = trunc i64 %625 to i32
  %mul3658 = mul i32 %conv3657, 8
  %cmp3659 = icmp ule i32 %mul3658, 2147483647
  br i1 %cmp3659, label %cond.true.3661, label %cond.false.3664

cond.true.3661:                                   ; preds = %cond.true.3656
  %626 = load i64, i64* %len, align 8
  %conv3662 = trunc i64 %626 to i32
  %mul3663 = mul i32 %conv3662, 8
  br label %cond.end.3669

cond.false.3664:                                  ; preds = %cond.true.3656
  %627 = load i64, i64* %len, align 8
  %conv3665 = trunc i64 %627 to i32
  %mul3666 = mul i32 %conv3665, 8
  %sub3667 = sub i32 %mul3666, -2147483648
  %add3668 = add nsw i32 %sub3667, -2147483648
  br label %cond.end.3669

cond.end.3669:                                    ; preds = %cond.false.3664, %cond.true.3661
  %cond3670 = phi i32 [ %mul3663, %cond.true.3661 ], [ %add3668, %cond.false.3664 ]
  %conv3671 = sext i32 %cond3670 to i64
  store i64 %conv3671, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3672:                                  ; preds = %lor.lhs.false.3652
  %628 = load i64, i64* %len, align 8
  %conv3673 = trunc i64 %628 to i32
  %mul3674 = mul i32 %conv3673, 8
  %cmp3675 = icmp ule i32 %mul3674, 2147483647
  br i1 %cmp3675, label %cond.true.3677, label %cond.false.3680

cond.true.3677:                                   ; preds = %cond.false.3672
  %629 = load i64, i64* %len, align 8
  %conv3678 = trunc i64 %629 to i32
  %mul3679 = mul i32 %conv3678, 8
  br label %cond.end.3685

cond.false.3680:                                  ; preds = %cond.false.3672
  %630 = load i64, i64* %len, align 8
  %conv3681 = trunc i64 %630 to i32
  %mul3682 = mul i32 %conv3681, 8
  %sub3683 = sub i32 %mul3682, -2147483648
  %add3684 = add nsw i32 %sub3683, -2147483648
  br label %cond.end.3685

cond.end.3685:                                    ; preds = %cond.false.3680, %cond.true.3677
  %cond3686 = phi i32 [ %mul3679, %cond.true.3677 ], [ %add3684, %cond.false.3680 ]
  %conv3687 = sext i32 %cond3686 to i64
  store i64 %conv3687, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3688:                                  ; preds = %cond.false.3259
  br i1 true, label %cond.true.3689, label %cond.false.4076

cond.true.3689:                                   ; preds = %cond.false.3688
  br i1 false, label %cond.true.3690, label %cond.false.3883

cond.true.3690:                                   ; preds = %cond.true.3689
  %631 = load i64, i64* %len, align 8
  %add3691 = add nsw i64 0, %631
  %mul3692 = mul nsw i64 0, %add3691
  %sub3693 = sub nsw i64 %mul3692, 1
  %cmp3694 = icmp slt i64 %sub3693, 0
  br i1 %cmp3694, label %cond.true.3696, label %cond.false.3713

cond.true.3696:                                   ; preds = %cond.true.3690
  %632 = load i64, i64* %len, align 8
  %add3697 = add nsw i64 0, %632
  %mul3698 = mul nsw i64 0, %add3697
  %add3699 = add nsw i64 %mul3698, 0
  %neg3700 = xor i64 %add3699, -1
  %cmp3701 = icmp eq i64 %neg3700, -1
  %conv3702 = zext i1 %cmp3701 to i32
  %sub3703 = sub nsw i32 0, %conv3702
  %conv3704 = sext i32 %sub3703 to i64
  %633 = load i64, i64* %len, align 8
  %add3705 = add nsw i64 0, %633
  %mul3706 = mul nsw i64 0, %add3705
  %add3707 = add nsw i64 %mul3706, 1
  %shl3708 = shl i64 %add3707, 62
  %sub3709 = sub nsw i64 %shl3708, 1
  %mul3710 = mul nsw i64 %sub3709, 2
  %add3711 = add nsw i64 %mul3710, 1
  %sub3712 = sub nsw i64 %conv3704, %add3711
  br label %cond.end.3717

cond.false.3713:                                  ; preds = %cond.true.3690
  %634 = load i64, i64* %len, align 8
  %add3714 = add nsw i64 0, %634
  %mul3715 = mul nsw i64 0, %add3714
  %add3716 = add nsw i64 %mul3715, 0
  br label %cond.end.3717

cond.end.3717:                                    ; preds = %cond.false.3713, %cond.true.3696
  %cond3718 = phi i64 [ %sub3712, %cond.true.3696 ], [ %add3716, %cond.false.3713 ]
  %cmp3719 = icmp eq i64 %cond3718, 0
  br i1 %cmp3719, label %land.lhs.true.3721, label %lor.lhs.false.3724

land.lhs.true.3721:                               ; preds = %cond.end.3717
  %635 = load i64, i64* %len, align 8
  %cmp3722 = icmp slt i64 %635, 0
  br i1 %cmp3722, label %cond.true.3859, label %lor.lhs.false.3724

lor.lhs.false.3724:                               ; preds = %land.lhs.true.3721, %cond.end.3717
  br i1 false, label %cond.true.3725, label %cond.false.3785

cond.true.3725:                                   ; preds = %lor.lhs.false.3724
  %636 = load i64, i64* %len, align 8
  %cmp3726 = icmp slt i64 %636, 0
  br i1 %cmp3726, label %cond.true.3728, label %cond.false.3751

cond.true.3728:                                   ; preds = %cond.true.3725
  %637 = load i64, i64* %len, align 8
  %638 = load i64, i64* %len, align 8
  %add3729 = add nsw i64 0, %638
  %mul3730 = mul nsw i64 0, %add3729
  %sub3731 = sub nsw i64 %mul3730, 1
  %cmp3732 = icmp slt i64 %sub3731, 0
  br i1 %cmp3732, label %cond.true.3734, label %cond.false.3742

cond.true.3734:                                   ; preds = %cond.true.3728
  %639 = load i64, i64* %len, align 8
  %add3735 = add nsw i64 0, %639
  %mul3736 = mul nsw i64 0, %add3735
  %add3737 = add nsw i64 %mul3736, 1
  %shl3738 = shl i64 %add3737, 62
  %sub3739 = sub nsw i64 %shl3738, 1
  %mul3740 = mul nsw i64 %sub3739, 2
  %add3741 = add nsw i64 %mul3740, 1
  br label %cond.end.3746

cond.false.3742:                                  ; preds = %cond.true.3728
  %640 = load i64, i64* %len, align 8
  %add3743 = add nsw i64 0, %640
  %mul3744 = mul nsw i64 0, %add3743
  %sub3745 = sub nsw i64 %mul3744, 1
  br label %cond.end.3746

cond.end.3746:                                    ; preds = %cond.false.3742, %cond.true.3734
  %cond3747 = phi i64 [ %add3741, %cond.true.3734 ], [ %sub3745, %cond.false.3742 ]
  %div3748 = sdiv i64 %cond3747, 8
  %cmp3749 = icmp slt i64 %637, %div3748
  br i1 %cmp3749, label %cond.true.3859, label %lor.lhs.false.3845

cond.false.3751:                                  ; preds = %cond.true.3725
  br i1 false, label %cond.true.3752, label %cond.false.3753

cond.true.3752:                                   ; preds = %cond.false.3751
  br i1 false, label %cond.true.3859, label %lor.lhs.false.3845

cond.false.3753:                                  ; preds = %cond.false.3751
  %641 = load i64, i64* %len, align 8
  %add3754 = add nsw i64 0, %641
  %mul3755 = mul nsw i64 0, %add3754
  %sub3756 = sub nsw i64 %mul3755, 1
  %cmp3757 = icmp slt i64 %sub3756, 0
  br i1 %cmp3757, label %cond.true.3759, label %cond.false.3776

cond.true.3759:                                   ; preds = %cond.false.3753
  %642 = load i64, i64* %len, align 8
  %add3760 = add nsw i64 0, %642
  %mul3761 = mul nsw i64 0, %add3760
  %add3762 = add nsw i64 %mul3761, 0
  %neg3763 = xor i64 %add3762, -1
  %cmp3764 = icmp eq i64 %neg3763, -1
  %conv3765 = zext i1 %cmp3764 to i32
  %sub3766 = sub nsw i32 0, %conv3765
  %conv3767 = sext i32 %sub3766 to i64
  %643 = load i64, i64* %len, align 8
  %add3768 = add nsw i64 0, %643
  %mul3769 = mul nsw i64 0, %add3768
  %add3770 = add nsw i64 %mul3769, 1
  %shl3771 = shl i64 %add3770, 62
  %sub3772 = sub nsw i64 %shl3771, 1
  %mul3773 = mul nsw i64 %sub3772, 2
  %add3774 = add nsw i64 %mul3773, 1
  %sub3775 = sub nsw i64 %conv3767, %add3774
  br label %cond.end.3780

cond.false.3776:                                  ; preds = %cond.false.3753
  %644 = load i64, i64* %len, align 8
  %add3777 = add nsw i64 0, %644
  %mul3778 = mul nsw i64 0, %add3777
  %add3779 = add nsw i64 %mul3778, 0
  br label %cond.end.3780

cond.end.3780:                                    ; preds = %cond.false.3776, %cond.true.3759
  %cond3781 = phi i64 [ %sub3775, %cond.true.3759 ], [ %add3779, %cond.false.3776 ]
  %div3782 = sdiv i64 %cond3781, 8
  %645 = load i64, i64* %len, align 8
  %cmp3783 = icmp slt i64 %div3782, %645
  br i1 %cmp3783, label %cond.true.3859, label %lor.lhs.false.3845

cond.false.3785:                                  ; preds = %lor.lhs.false.3724
  br i1 false, label %cond.true.3786, label %cond.false.3787

cond.true.3786:                                   ; preds = %cond.false.3785
  br i1 false, label %cond.true.3859, label %lor.lhs.false.3845

cond.false.3787:                                  ; preds = %cond.false.3785
  %646 = load i64, i64* %len, align 8
  %cmp3788 = icmp slt i64 %646, 0
  br i1 %cmp3788, label %cond.true.3790, label %cond.false.3822

cond.true.3790:                                   ; preds = %cond.false.3787
  %647 = load i64, i64* %len, align 8
  %648 = load i64, i64* %len, align 8
  %add3791 = add nsw i64 0, %648
  %mul3792 = mul nsw i64 0, %add3791
  %sub3793 = sub nsw i64 %mul3792, 1
  %cmp3794 = icmp slt i64 %sub3793, 0
  br i1 %cmp3794, label %cond.true.3796, label %cond.false.3813

cond.true.3796:                                   ; preds = %cond.true.3790
  %649 = load i64, i64* %len, align 8
  %add3797 = add nsw i64 0, %649
  %mul3798 = mul nsw i64 0, %add3797
  %add3799 = add nsw i64 %mul3798, 0
  %neg3800 = xor i64 %add3799, -1
  %cmp3801 = icmp eq i64 %neg3800, -1
  %conv3802 = zext i1 %cmp3801 to i32
  %sub3803 = sub nsw i32 0, %conv3802
  %conv3804 = sext i32 %sub3803 to i64
  %650 = load i64, i64* %len, align 8
  %add3805 = add nsw i64 0, %650
  %mul3806 = mul nsw i64 0, %add3805
  %add3807 = add nsw i64 %mul3806, 1
  %shl3808 = shl i64 %add3807, 62
  %sub3809 = sub nsw i64 %shl3808, 1
  %mul3810 = mul nsw i64 %sub3809, 2
  %add3811 = add nsw i64 %mul3810, 1
  %sub3812 = sub nsw i64 %conv3804, %add3811
  br label %cond.end.3817

cond.false.3813:                                  ; preds = %cond.true.3790
  %651 = load i64, i64* %len, align 8
  %add3814 = add nsw i64 0, %651
  %mul3815 = mul nsw i64 0, %add3814
  %add3816 = add nsw i64 %mul3815, 0
  br label %cond.end.3817

cond.end.3817:                                    ; preds = %cond.false.3813, %cond.true.3796
  %cond3818 = phi i64 [ %sub3812, %cond.true.3796 ], [ %add3816, %cond.false.3813 ]
  %div3819 = sdiv i64 %cond3818, 8
  %cmp3820 = icmp slt i64 %647, %div3819
  br i1 %cmp3820, label %cond.true.3859, label %lor.lhs.false.3845

cond.false.3822:                                  ; preds = %cond.false.3787
  %652 = load i64, i64* %len, align 8
  %add3823 = add nsw i64 0, %652
  %mul3824 = mul nsw i64 0, %add3823
  %sub3825 = sub nsw i64 %mul3824, 1
  %cmp3826 = icmp slt i64 %sub3825, 0
  br i1 %cmp3826, label %cond.true.3828, label %cond.false.3836

cond.true.3828:                                   ; preds = %cond.false.3822
  %653 = load i64, i64* %len, align 8
  %add3829 = add nsw i64 0, %653
  %mul3830 = mul nsw i64 0, %add3829
  %add3831 = add nsw i64 %mul3830, 1
  %shl3832 = shl i64 %add3831, 62
  %sub3833 = sub nsw i64 %shl3832, 1
  %mul3834 = mul nsw i64 %sub3833, 2
  %add3835 = add nsw i64 %mul3834, 1
  br label %cond.end.3840

cond.false.3836:                                  ; preds = %cond.false.3822
  %654 = load i64, i64* %len, align 8
  %add3837 = add nsw i64 0, %654
  %mul3838 = mul nsw i64 0, %add3837
  %sub3839 = sub nsw i64 %mul3838, 1
  br label %cond.end.3840

cond.end.3840:                                    ; preds = %cond.false.3836, %cond.true.3828
  %cond3841 = phi i64 [ %add3835, %cond.true.3828 ], [ %sub3839, %cond.false.3836 ]
  %div3842 = sdiv i64 %cond3841, 8
  %655 = load i64, i64* %len, align 8
  %cmp3843 = icmp slt i64 %div3842, %655
  br i1 %cmp3843, label %cond.true.3859, label %lor.lhs.false.3845

lor.lhs.false.3845:                               ; preds = %cond.end.3840, %cond.end.3817, %cond.true.3786, %cond.end.3780, %cond.true.3752, %cond.end.3746
  %656 = load i64, i64* %len, align 8
  %mul3846 = mul nsw i64 %656, 8
  %mul3847 = mul nsw i64 0, %mul3846
  %sub3848 = sub nsw i64 %mul3847, 1
  %cmp3849 = icmp slt i64 %sub3848, 0
  br i1 %cmp3849, label %land.lhs.true.3851, label %lor.lhs.false.3855

land.lhs.true.3851:                               ; preds = %lor.lhs.false.3845
  %657 = load i64, i64* %len, align 8
  %mul3852 = mul nsw i64 %657, 8
  %cmp3853 = icmp slt i64 %mul3852, -9223372036854775808
  br i1 %cmp3853, label %cond.true.3859, label %lor.lhs.false.3855

lor.lhs.false.3855:                               ; preds = %land.lhs.true.3851, %lor.lhs.false.3845
  %658 = load i64, i64* %len, align 8
  %mul3856 = mul nsw i64 %658, 8
  %cmp3857 = icmp slt i64 9223372036854775807, %mul3856
  br i1 %cmp3857, label %cond.true.3859, label %cond.false.3871

cond.true.3859:                                   ; preds = %lor.lhs.false.3855, %land.lhs.true.3851, %cond.end.3840, %cond.end.3817, %cond.true.3786, %cond.end.3780, %cond.true.3752, %cond.end.3746, %land.lhs.true.3721
  %659 = load i64, i64* %len, align 8
  %mul3860 = mul i64 %659, 8
  %cmp3861 = icmp ule i64 %mul3860, 9223372036854775807
  br i1 %cmp3861, label %cond.true.3863, label %cond.false.3865

cond.true.3863:                                   ; preds = %cond.true.3859
  %660 = load i64, i64* %len, align 8
  %mul3864 = mul i64 %660, 8
  br label %cond.end.3869

cond.false.3865:                                  ; preds = %cond.true.3859
  %661 = load i64, i64* %len, align 8
  %mul3866 = mul i64 %661, 8
  %sub3867 = sub i64 %mul3866, -9223372036854775808
  %add3868 = add nsw i64 %sub3867, -9223372036854775808
  br label %cond.end.3869

cond.end.3869:                                    ; preds = %cond.false.3865, %cond.true.3863
  %cond3870 = phi i64 [ %mul3864, %cond.true.3863 ], [ %add3868, %cond.false.3865 ]
  store i64 %cond3870, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3871:                                  ; preds = %lor.lhs.false.3855
  %662 = load i64, i64* %len, align 8
  %mul3872 = mul i64 %662, 8
  %cmp3873 = icmp ule i64 %mul3872, 9223372036854775807
  br i1 %cmp3873, label %cond.true.3875, label %cond.false.3877

cond.true.3875:                                   ; preds = %cond.false.3871
  %663 = load i64, i64* %len, align 8
  %mul3876 = mul i64 %663, 8
  br label %cond.end.3881

cond.false.3877:                                  ; preds = %cond.false.3871
  %664 = load i64, i64* %len, align 8
  %mul3878 = mul i64 %664, 8
  %sub3879 = sub i64 %mul3878, -9223372036854775808
  %add3880 = add nsw i64 %sub3879, -9223372036854775808
  br label %cond.end.3881

cond.end.3881:                                    ; preds = %cond.false.3877, %cond.true.3875
  %cond3882 = phi i64 [ %mul3876, %cond.true.3875 ], [ %add3880, %cond.false.3877 ]
  store i64 %cond3882, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.3883:                                  ; preds = %cond.true.3689
  %665 = load i64, i64* %len, align 8
  %add3884 = add nsw i64 0, %665
  %mul3885 = mul nsw i64 0, %add3884
  %sub3886 = sub nsw i64 %mul3885, 1
  %cmp3887 = icmp slt i64 %sub3886, 0
  br i1 %cmp3887, label %cond.true.3889, label %cond.false.3906

cond.true.3889:                                   ; preds = %cond.false.3883
  %666 = load i64, i64* %len, align 8
  %add3890 = add nsw i64 0, %666
  %mul3891 = mul nsw i64 0, %add3890
  %add3892 = add nsw i64 %mul3891, 0
  %neg3893 = xor i64 %add3892, -1
  %cmp3894 = icmp eq i64 %neg3893, -1
  %conv3895 = zext i1 %cmp3894 to i32
  %sub3896 = sub nsw i32 0, %conv3895
  %conv3897 = sext i32 %sub3896 to i64
  %667 = load i64, i64* %len, align 8
  %add3898 = add nsw i64 0, %667
  %mul3899 = mul nsw i64 0, %add3898
  %add3900 = add nsw i64 %mul3899, 1
  %shl3901 = shl i64 %add3900, 62
  %sub3902 = sub nsw i64 %shl3901, 1
  %mul3903 = mul nsw i64 %sub3902, 2
  %add3904 = add nsw i64 %mul3903, 1
  %sub3905 = sub nsw i64 %conv3897, %add3904
  br label %cond.end.3910

cond.false.3906:                                  ; preds = %cond.false.3883
  %668 = load i64, i64* %len, align 8
  %add3907 = add nsw i64 0, %668
  %mul3908 = mul nsw i64 0, %add3907
  %add3909 = add nsw i64 %mul3908, 0
  br label %cond.end.3910

cond.end.3910:                                    ; preds = %cond.false.3906, %cond.true.3889
  %cond3911 = phi i64 [ %sub3905, %cond.true.3889 ], [ %add3909, %cond.false.3906 ]
  %cmp3912 = icmp eq i64 %cond3911, 0
  br i1 %cmp3912, label %land.lhs.true.3914, label %lor.lhs.false.3917

land.lhs.true.3914:                               ; preds = %cond.end.3910
  %669 = load i64, i64* %len, align 8
  %cmp3915 = icmp slt i64 %669, 0
  br i1 %cmp3915, label %cond.true.4052, label %lor.lhs.false.3917

lor.lhs.false.3917:                               ; preds = %land.lhs.true.3914, %cond.end.3910
  br i1 false, label %cond.true.3918, label %cond.false.3978

cond.true.3918:                                   ; preds = %lor.lhs.false.3917
  %670 = load i64, i64* %len, align 8
  %cmp3919 = icmp slt i64 %670, 0
  br i1 %cmp3919, label %cond.true.3921, label %cond.false.3944

cond.true.3921:                                   ; preds = %cond.true.3918
  %671 = load i64, i64* %len, align 8
  %672 = load i64, i64* %len, align 8
  %add3922 = add nsw i64 0, %672
  %mul3923 = mul nsw i64 0, %add3922
  %sub3924 = sub nsw i64 %mul3923, 1
  %cmp3925 = icmp slt i64 %sub3924, 0
  br i1 %cmp3925, label %cond.true.3927, label %cond.false.3935

cond.true.3927:                                   ; preds = %cond.true.3921
  %673 = load i64, i64* %len, align 8
  %add3928 = add nsw i64 0, %673
  %mul3929 = mul nsw i64 0, %add3928
  %add3930 = add nsw i64 %mul3929, 1
  %shl3931 = shl i64 %add3930, 62
  %sub3932 = sub nsw i64 %shl3931, 1
  %mul3933 = mul nsw i64 %sub3932, 2
  %add3934 = add nsw i64 %mul3933, 1
  br label %cond.end.3939

cond.false.3935:                                  ; preds = %cond.true.3921
  %674 = load i64, i64* %len, align 8
  %add3936 = add nsw i64 0, %674
  %mul3937 = mul nsw i64 0, %add3936
  %sub3938 = sub nsw i64 %mul3937, 1
  br label %cond.end.3939

cond.end.3939:                                    ; preds = %cond.false.3935, %cond.true.3927
  %cond3940 = phi i64 [ %add3934, %cond.true.3927 ], [ %sub3938, %cond.false.3935 ]
  %div3941 = sdiv i64 %cond3940, 8
  %cmp3942 = icmp slt i64 %671, %div3941
  br i1 %cmp3942, label %cond.true.4052, label %lor.lhs.false.4038

cond.false.3944:                                  ; preds = %cond.true.3918
  br i1 false, label %cond.true.3945, label %cond.false.3946

cond.true.3945:                                   ; preds = %cond.false.3944
  br i1 false, label %cond.true.4052, label %lor.lhs.false.4038

cond.false.3946:                                  ; preds = %cond.false.3944
  %675 = load i64, i64* %len, align 8
  %add3947 = add nsw i64 0, %675
  %mul3948 = mul nsw i64 0, %add3947
  %sub3949 = sub nsw i64 %mul3948, 1
  %cmp3950 = icmp slt i64 %sub3949, 0
  br i1 %cmp3950, label %cond.true.3952, label %cond.false.3969

cond.true.3952:                                   ; preds = %cond.false.3946
  %676 = load i64, i64* %len, align 8
  %add3953 = add nsw i64 0, %676
  %mul3954 = mul nsw i64 0, %add3953
  %add3955 = add nsw i64 %mul3954, 0
  %neg3956 = xor i64 %add3955, -1
  %cmp3957 = icmp eq i64 %neg3956, -1
  %conv3958 = zext i1 %cmp3957 to i32
  %sub3959 = sub nsw i32 0, %conv3958
  %conv3960 = sext i32 %sub3959 to i64
  %677 = load i64, i64* %len, align 8
  %add3961 = add nsw i64 0, %677
  %mul3962 = mul nsw i64 0, %add3961
  %add3963 = add nsw i64 %mul3962, 1
  %shl3964 = shl i64 %add3963, 62
  %sub3965 = sub nsw i64 %shl3964, 1
  %mul3966 = mul nsw i64 %sub3965, 2
  %add3967 = add nsw i64 %mul3966, 1
  %sub3968 = sub nsw i64 %conv3960, %add3967
  br label %cond.end.3973

cond.false.3969:                                  ; preds = %cond.false.3946
  %678 = load i64, i64* %len, align 8
  %add3970 = add nsw i64 0, %678
  %mul3971 = mul nsw i64 0, %add3970
  %add3972 = add nsw i64 %mul3971, 0
  br label %cond.end.3973

cond.end.3973:                                    ; preds = %cond.false.3969, %cond.true.3952
  %cond3974 = phi i64 [ %sub3968, %cond.true.3952 ], [ %add3972, %cond.false.3969 ]
  %div3975 = sdiv i64 %cond3974, 8
  %679 = load i64, i64* %len, align 8
  %cmp3976 = icmp slt i64 %div3975, %679
  br i1 %cmp3976, label %cond.true.4052, label %lor.lhs.false.4038

cond.false.3978:                                  ; preds = %lor.lhs.false.3917
  br i1 false, label %cond.true.3979, label %cond.false.3980

cond.true.3979:                                   ; preds = %cond.false.3978
  br i1 false, label %cond.true.4052, label %lor.lhs.false.4038

cond.false.3980:                                  ; preds = %cond.false.3978
  %680 = load i64, i64* %len, align 8
  %cmp3981 = icmp slt i64 %680, 0
  br i1 %cmp3981, label %cond.true.3983, label %cond.false.4015

cond.true.3983:                                   ; preds = %cond.false.3980
  %681 = load i64, i64* %len, align 8
  %682 = load i64, i64* %len, align 8
  %add3984 = add nsw i64 0, %682
  %mul3985 = mul nsw i64 0, %add3984
  %sub3986 = sub nsw i64 %mul3985, 1
  %cmp3987 = icmp slt i64 %sub3986, 0
  br i1 %cmp3987, label %cond.true.3989, label %cond.false.4006

cond.true.3989:                                   ; preds = %cond.true.3983
  %683 = load i64, i64* %len, align 8
  %add3990 = add nsw i64 0, %683
  %mul3991 = mul nsw i64 0, %add3990
  %add3992 = add nsw i64 %mul3991, 0
  %neg3993 = xor i64 %add3992, -1
  %cmp3994 = icmp eq i64 %neg3993, -1
  %conv3995 = zext i1 %cmp3994 to i32
  %sub3996 = sub nsw i32 0, %conv3995
  %conv3997 = sext i32 %sub3996 to i64
  %684 = load i64, i64* %len, align 8
  %add3998 = add nsw i64 0, %684
  %mul3999 = mul nsw i64 0, %add3998
  %add4000 = add nsw i64 %mul3999, 1
  %shl4001 = shl i64 %add4000, 62
  %sub4002 = sub nsw i64 %shl4001, 1
  %mul4003 = mul nsw i64 %sub4002, 2
  %add4004 = add nsw i64 %mul4003, 1
  %sub4005 = sub nsw i64 %conv3997, %add4004
  br label %cond.end.4010

cond.false.4006:                                  ; preds = %cond.true.3983
  %685 = load i64, i64* %len, align 8
  %add4007 = add nsw i64 0, %685
  %mul4008 = mul nsw i64 0, %add4007
  %add4009 = add nsw i64 %mul4008, 0
  br label %cond.end.4010

cond.end.4010:                                    ; preds = %cond.false.4006, %cond.true.3989
  %cond4011 = phi i64 [ %sub4005, %cond.true.3989 ], [ %add4009, %cond.false.4006 ]
  %div4012 = sdiv i64 %cond4011, 8
  %cmp4013 = icmp slt i64 %681, %div4012
  br i1 %cmp4013, label %cond.true.4052, label %lor.lhs.false.4038

cond.false.4015:                                  ; preds = %cond.false.3980
  %686 = load i64, i64* %len, align 8
  %add4016 = add nsw i64 0, %686
  %mul4017 = mul nsw i64 0, %add4016
  %sub4018 = sub nsw i64 %mul4017, 1
  %cmp4019 = icmp slt i64 %sub4018, 0
  br i1 %cmp4019, label %cond.true.4021, label %cond.false.4029

cond.true.4021:                                   ; preds = %cond.false.4015
  %687 = load i64, i64* %len, align 8
  %add4022 = add nsw i64 0, %687
  %mul4023 = mul nsw i64 0, %add4022
  %add4024 = add nsw i64 %mul4023, 1
  %shl4025 = shl i64 %add4024, 62
  %sub4026 = sub nsw i64 %shl4025, 1
  %mul4027 = mul nsw i64 %sub4026, 2
  %add4028 = add nsw i64 %mul4027, 1
  br label %cond.end.4033

cond.false.4029:                                  ; preds = %cond.false.4015
  %688 = load i64, i64* %len, align 8
  %add4030 = add nsw i64 0, %688
  %mul4031 = mul nsw i64 0, %add4030
  %sub4032 = sub nsw i64 %mul4031, 1
  br label %cond.end.4033

cond.end.4033:                                    ; preds = %cond.false.4029, %cond.true.4021
  %cond4034 = phi i64 [ %add4028, %cond.true.4021 ], [ %sub4032, %cond.false.4029 ]
  %div4035 = sdiv i64 %cond4034, 8
  %689 = load i64, i64* %len, align 8
  %cmp4036 = icmp slt i64 %div4035, %689
  br i1 %cmp4036, label %cond.true.4052, label %lor.lhs.false.4038

lor.lhs.false.4038:                               ; preds = %cond.end.4033, %cond.end.4010, %cond.true.3979, %cond.end.3973, %cond.true.3945, %cond.end.3939
  %690 = load i64, i64* %len, align 8
  %mul4039 = mul nsw i64 %690, 8
  %mul4040 = mul nsw i64 0, %mul4039
  %sub4041 = sub nsw i64 %mul4040, 1
  %cmp4042 = icmp slt i64 %sub4041, 0
  br i1 %cmp4042, label %land.lhs.true.4044, label %lor.lhs.false.4048

land.lhs.true.4044:                               ; preds = %lor.lhs.false.4038
  %691 = load i64, i64* %len, align 8
  %mul4045 = mul nsw i64 %691, 8
  %cmp4046 = icmp slt i64 %mul4045, -9223372036854775808
  br i1 %cmp4046, label %cond.true.4052, label %lor.lhs.false.4048

lor.lhs.false.4048:                               ; preds = %land.lhs.true.4044, %lor.lhs.false.4038
  %692 = load i64, i64* %len, align 8
  %mul4049 = mul nsw i64 %692, 8
  %cmp4050 = icmp slt i64 9223372036854775807, %mul4049
  br i1 %cmp4050, label %cond.true.4052, label %cond.false.4064

cond.true.4052:                                   ; preds = %lor.lhs.false.4048, %land.lhs.true.4044, %cond.end.4033, %cond.end.4010, %cond.true.3979, %cond.end.3973, %cond.true.3945, %cond.end.3939, %land.lhs.true.3914
  %693 = load i64, i64* %len, align 8
  %mul4053 = mul i64 %693, 8
  %cmp4054 = icmp ule i64 %mul4053, 9223372036854775807
  br i1 %cmp4054, label %cond.true.4056, label %cond.false.4058

cond.true.4056:                                   ; preds = %cond.true.4052
  %694 = load i64, i64* %len, align 8
  %mul4057 = mul i64 %694, 8
  br label %cond.end.4062

cond.false.4058:                                  ; preds = %cond.true.4052
  %695 = load i64, i64* %len, align 8
  %mul4059 = mul i64 %695, 8
  %sub4060 = sub i64 %mul4059, -9223372036854775808
  %add4061 = add nsw i64 %sub4060, -9223372036854775808
  br label %cond.end.4062

cond.end.4062:                                    ; preds = %cond.false.4058, %cond.true.4056
  %cond4063 = phi i64 [ %mul4057, %cond.true.4056 ], [ %add4061, %cond.false.4058 ]
  store i64 %cond4063, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.4064:                                  ; preds = %lor.lhs.false.4048
  %696 = load i64, i64* %len, align 8
  %mul4065 = mul i64 %696, 8
  %cmp4066 = icmp ule i64 %mul4065, 9223372036854775807
  br i1 %cmp4066, label %cond.true.4068, label %cond.false.4070

cond.true.4068:                                   ; preds = %cond.false.4064
  %697 = load i64, i64* %len, align 8
  %mul4069 = mul i64 %697, 8
  br label %cond.end.4074

cond.false.4070:                                  ; preds = %cond.false.4064
  %698 = load i64, i64* %len, align 8
  %mul4071 = mul i64 %698, 8
  %sub4072 = sub i64 %mul4071, -9223372036854775808
  %add4073 = add nsw i64 %sub4072, -9223372036854775808
  br label %cond.end.4074

cond.end.4074:                                    ; preds = %cond.false.4070, %cond.true.4068
  %cond4075 = phi i64 [ %mul4069, %cond.true.4068 ], [ %add4073, %cond.false.4070 ]
  store i64 %cond4075, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.4076:                                  ; preds = %cond.false.3688
  br i1 false, label %cond.true.4077, label %cond.false.4270

cond.true.4077:                                   ; preds = %cond.false.4076
  %699 = load i64, i64* %len, align 8
  %add4078 = add nsw i64 0, %699
  %mul4079 = mul nsw i64 0, %add4078
  %sub4080 = sub nsw i64 %mul4079, 1
  %cmp4081 = icmp slt i64 %sub4080, 0
  br i1 %cmp4081, label %cond.true.4083, label %cond.false.4100

cond.true.4083:                                   ; preds = %cond.true.4077
  %700 = load i64, i64* %len, align 8
  %add4084 = add nsw i64 0, %700
  %mul4085 = mul nsw i64 0, %add4084
  %add4086 = add nsw i64 %mul4085, 0
  %neg4087 = xor i64 %add4086, -1
  %cmp4088 = icmp eq i64 %neg4087, -1
  %conv4089 = zext i1 %cmp4088 to i32
  %sub4090 = sub nsw i32 0, %conv4089
  %conv4091 = sext i32 %sub4090 to i64
  %701 = load i64, i64* %len, align 8
  %add4092 = add nsw i64 0, %701
  %mul4093 = mul nsw i64 0, %add4092
  %add4094 = add nsw i64 %mul4093, 1
  %shl4095 = shl i64 %add4094, 62
  %sub4096 = sub nsw i64 %shl4095, 1
  %mul4097 = mul nsw i64 %sub4096, 2
  %add4098 = add nsw i64 %mul4097, 1
  %sub4099 = sub nsw i64 %conv4091, %add4098
  br label %cond.end.4104

cond.false.4100:                                  ; preds = %cond.true.4077
  %702 = load i64, i64* %len, align 8
  %add4101 = add nsw i64 0, %702
  %mul4102 = mul nsw i64 0, %add4101
  %add4103 = add nsw i64 %mul4102, 0
  br label %cond.end.4104

cond.end.4104:                                    ; preds = %cond.false.4100, %cond.true.4083
  %cond4105 = phi i64 [ %sub4099, %cond.true.4083 ], [ %add4103, %cond.false.4100 ]
  %cmp4106 = icmp eq i64 %cond4105, 0
  br i1 %cmp4106, label %land.lhs.true.4108, label %lor.lhs.false.4111

land.lhs.true.4108:                               ; preds = %cond.end.4104
  %703 = load i64, i64* %len, align 8
  %cmp4109 = icmp slt i64 %703, 0
  br i1 %cmp4109, label %cond.true.4246, label %lor.lhs.false.4111

lor.lhs.false.4111:                               ; preds = %land.lhs.true.4108, %cond.end.4104
  br i1 false, label %cond.true.4112, label %cond.false.4172

cond.true.4112:                                   ; preds = %lor.lhs.false.4111
  %704 = load i64, i64* %len, align 8
  %cmp4113 = icmp slt i64 %704, 0
  br i1 %cmp4113, label %cond.true.4115, label %cond.false.4138

cond.true.4115:                                   ; preds = %cond.true.4112
  %705 = load i64, i64* %len, align 8
  %706 = load i64, i64* %len, align 8
  %add4116 = add nsw i64 0, %706
  %mul4117 = mul nsw i64 0, %add4116
  %sub4118 = sub nsw i64 %mul4117, 1
  %cmp4119 = icmp slt i64 %sub4118, 0
  br i1 %cmp4119, label %cond.true.4121, label %cond.false.4129

cond.true.4121:                                   ; preds = %cond.true.4115
  %707 = load i64, i64* %len, align 8
  %add4122 = add nsw i64 0, %707
  %mul4123 = mul nsw i64 0, %add4122
  %add4124 = add nsw i64 %mul4123, 1
  %shl4125 = shl i64 %add4124, 62
  %sub4126 = sub nsw i64 %shl4125, 1
  %mul4127 = mul nsw i64 %sub4126, 2
  %add4128 = add nsw i64 %mul4127, 1
  br label %cond.end.4133

cond.false.4129:                                  ; preds = %cond.true.4115
  %708 = load i64, i64* %len, align 8
  %add4130 = add nsw i64 0, %708
  %mul4131 = mul nsw i64 0, %add4130
  %sub4132 = sub nsw i64 %mul4131, 1
  br label %cond.end.4133

cond.end.4133:                                    ; preds = %cond.false.4129, %cond.true.4121
  %cond4134 = phi i64 [ %add4128, %cond.true.4121 ], [ %sub4132, %cond.false.4129 ]
  %div4135 = sdiv i64 %cond4134, 8
  %cmp4136 = icmp slt i64 %705, %div4135
  br i1 %cmp4136, label %cond.true.4246, label %lor.lhs.false.4232

cond.false.4138:                                  ; preds = %cond.true.4112
  br i1 false, label %cond.true.4139, label %cond.false.4140

cond.true.4139:                                   ; preds = %cond.false.4138
  br i1 false, label %cond.true.4246, label %lor.lhs.false.4232

cond.false.4140:                                  ; preds = %cond.false.4138
  %709 = load i64, i64* %len, align 8
  %add4141 = add nsw i64 0, %709
  %mul4142 = mul nsw i64 0, %add4141
  %sub4143 = sub nsw i64 %mul4142, 1
  %cmp4144 = icmp slt i64 %sub4143, 0
  br i1 %cmp4144, label %cond.true.4146, label %cond.false.4163

cond.true.4146:                                   ; preds = %cond.false.4140
  %710 = load i64, i64* %len, align 8
  %add4147 = add nsw i64 0, %710
  %mul4148 = mul nsw i64 0, %add4147
  %add4149 = add nsw i64 %mul4148, 0
  %neg4150 = xor i64 %add4149, -1
  %cmp4151 = icmp eq i64 %neg4150, -1
  %conv4152 = zext i1 %cmp4151 to i32
  %sub4153 = sub nsw i32 0, %conv4152
  %conv4154 = sext i32 %sub4153 to i64
  %711 = load i64, i64* %len, align 8
  %add4155 = add nsw i64 0, %711
  %mul4156 = mul nsw i64 0, %add4155
  %add4157 = add nsw i64 %mul4156, 1
  %shl4158 = shl i64 %add4157, 62
  %sub4159 = sub nsw i64 %shl4158, 1
  %mul4160 = mul nsw i64 %sub4159, 2
  %add4161 = add nsw i64 %mul4160, 1
  %sub4162 = sub nsw i64 %conv4154, %add4161
  br label %cond.end.4167

cond.false.4163:                                  ; preds = %cond.false.4140
  %712 = load i64, i64* %len, align 8
  %add4164 = add nsw i64 0, %712
  %mul4165 = mul nsw i64 0, %add4164
  %add4166 = add nsw i64 %mul4165, 0
  br label %cond.end.4167

cond.end.4167:                                    ; preds = %cond.false.4163, %cond.true.4146
  %cond4168 = phi i64 [ %sub4162, %cond.true.4146 ], [ %add4166, %cond.false.4163 ]
  %div4169 = sdiv i64 %cond4168, 8
  %713 = load i64, i64* %len, align 8
  %cmp4170 = icmp slt i64 %div4169, %713
  br i1 %cmp4170, label %cond.true.4246, label %lor.lhs.false.4232

cond.false.4172:                                  ; preds = %lor.lhs.false.4111
  br i1 false, label %cond.true.4173, label %cond.false.4174

cond.true.4173:                                   ; preds = %cond.false.4172
  br i1 false, label %cond.true.4246, label %lor.lhs.false.4232

cond.false.4174:                                  ; preds = %cond.false.4172
  %714 = load i64, i64* %len, align 8
  %cmp4175 = icmp slt i64 %714, 0
  br i1 %cmp4175, label %cond.true.4177, label %cond.false.4209

cond.true.4177:                                   ; preds = %cond.false.4174
  %715 = load i64, i64* %len, align 8
  %716 = load i64, i64* %len, align 8
  %add4178 = add nsw i64 0, %716
  %mul4179 = mul nsw i64 0, %add4178
  %sub4180 = sub nsw i64 %mul4179, 1
  %cmp4181 = icmp slt i64 %sub4180, 0
  br i1 %cmp4181, label %cond.true.4183, label %cond.false.4200

cond.true.4183:                                   ; preds = %cond.true.4177
  %717 = load i64, i64* %len, align 8
  %add4184 = add nsw i64 0, %717
  %mul4185 = mul nsw i64 0, %add4184
  %add4186 = add nsw i64 %mul4185, 0
  %neg4187 = xor i64 %add4186, -1
  %cmp4188 = icmp eq i64 %neg4187, -1
  %conv4189 = zext i1 %cmp4188 to i32
  %sub4190 = sub nsw i32 0, %conv4189
  %conv4191 = sext i32 %sub4190 to i64
  %718 = load i64, i64* %len, align 8
  %add4192 = add nsw i64 0, %718
  %mul4193 = mul nsw i64 0, %add4192
  %add4194 = add nsw i64 %mul4193, 1
  %shl4195 = shl i64 %add4194, 62
  %sub4196 = sub nsw i64 %shl4195, 1
  %mul4197 = mul nsw i64 %sub4196, 2
  %add4198 = add nsw i64 %mul4197, 1
  %sub4199 = sub nsw i64 %conv4191, %add4198
  br label %cond.end.4204

cond.false.4200:                                  ; preds = %cond.true.4177
  %719 = load i64, i64* %len, align 8
  %add4201 = add nsw i64 0, %719
  %mul4202 = mul nsw i64 0, %add4201
  %add4203 = add nsw i64 %mul4202, 0
  br label %cond.end.4204

cond.end.4204:                                    ; preds = %cond.false.4200, %cond.true.4183
  %cond4205 = phi i64 [ %sub4199, %cond.true.4183 ], [ %add4203, %cond.false.4200 ]
  %div4206 = sdiv i64 %cond4205, 8
  %cmp4207 = icmp slt i64 %715, %div4206
  br i1 %cmp4207, label %cond.true.4246, label %lor.lhs.false.4232

cond.false.4209:                                  ; preds = %cond.false.4174
  %720 = load i64, i64* %len, align 8
  %add4210 = add nsw i64 0, %720
  %mul4211 = mul nsw i64 0, %add4210
  %sub4212 = sub nsw i64 %mul4211, 1
  %cmp4213 = icmp slt i64 %sub4212, 0
  br i1 %cmp4213, label %cond.true.4215, label %cond.false.4223

cond.true.4215:                                   ; preds = %cond.false.4209
  %721 = load i64, i64* %len, align 8
  %add4216 = add nsw i64 0, %721
  %mul4217 = mul nsw i64 0, %add4216
  %add4218 = add nsw i64 %mul4217, 1
  %shl4219 = shl i64 %add4218, 62
  %sub4220 = sub nsw i64 %shl4219, 1
  %mul4221 = mul nsw i64 %sub4220, 2
  %add4222 = add nsw i64 %mul4221, 1
  br label %cond.end.4227

cond.false.4223:                                  ; preds = %cond.false.4209
  %722 = load i64, i64* %len, align 8
  %add4224 = add nsw i64 0, %722
  %mul4225 = mul nsw i64 0, %add4224
  %sub4226 = sub nsw i64 %mul4225, 1
  br label %cond.end.4227

cond.end.4227:                                    ; preds = %cond.false.4223, %cond.true.4215
  %cond4228 = phi i64 [ %add4222, %cond.true.4215 ], [ %sub4226, %cond.false.4223 ]
  %div4229 = sdiv i64 %cond4228, 8
  %723 = load i64, i64* %len, align 8
  %cmp4230 = icmp slt i64 %div4229, %723
  br i1 %cmp4230, label %cond.true.4246, label %lor.lhs.false.4232

lor.lhs.false.4232:                               ; preds = %cond.end.4227, %cond.end.4204, %cond.true.4173, %cond.end.4167, %cond.true.4139, %cond.end.4133
  %724 = load i64, i64* %len, align 8
  %mul4233 = mul nsw i64 %724, 8
  %mul4234 = mul nsw i64 0, %mul4233
  %sub4235 = sub nsw i64 %mul4234, 1
  %cmp4236 = icmp slt i64 %sub4235, 0
  br i1 %cmp4236, label %land.lhs.true.4238, label %lor.lhs.false.4242

land.lhs.true.4238:                               ; preds = %lor.lhs.false.4232
  %725 = load i64, i64* %len, align 8
  %mul4239 = mul nsw i64 %725, 8
  %cmp4240 = icmp slt i64 %mul4239, -9223372036854775808
  br i1 %cmp4240, label %cond.true.4246, label %lor.lhs.false.4242

lor.lhs.false.4242:                               ; preds = %land.lhs.true.4238, %lor.lhs.false.4232
  %726 = load i64, i64* %len, align 8
  %mul4243 = mul nsw i64 %726, 8
  %cmp4244 = icmp slt i64 9223372036854775807, %mul4243
  br i1 %cmp4244, label %cond.true.4246, label %cond.false.4258

cond.true.4246:                                   ; preds = %lor.lhs.false.4242, %land.lhs.true.4238, %cond.end.4227, %cond.end.4204, %cond.true.4173, %cond.end.4167, %cond.true.4139, %cond.end.4133, %land.lhs.true.4108
  %727 = load i64, i64* %len, align 8
  %mul4247 = mul i64 %727, 8
  %cmp4248 = icmp ule i64 %mul4247, 9223372036854775807
  br i1 %cmp4248, label %cond.true.4250, label %cond.false.4252

cond.true.4250:                                   ; preds = %cond.true.4246
  %728 = load i64, i64* %len, align 8
  %mul4251 = mul i64 %728, 8
  br label %cond.end.4256

cond.false.4252:                                  ; preds = %cond.true.4246
  %729 = load i64, i64* %len, align 8
  %mul4253 = mul i64 %729, 8
  %sub4254 = sub i64 %mul4253, -9223372036854775808
  %add4255 = add nsw i64 %sub4254, -9223372036854775808
  br label %cond.end.4256

cond.end.4256:                                    ; preds = %cond.false.4252, %cond.true.4250
  %cond4257 = phi i64 [ %mul4251, %cond.true.4250 ], [ %add4255, %cond.false.4252 ]
  store i64 %cond4257, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.4258:                                  ; preds = %lor.lhs.false.4242
  %730 = load i64, i64* %len, align 8
  %mul4259 = mul i64 %730, 8
  %cmp4260 = icmp ule i64 %mul4259, 9223372036854775807
  br i1 %cmp4260, label %cond.true.4262, label %cond.false.4264

cond.true.4262:                                   ; preds = %cond.false.4258
  %731 = load i64, i64* %len, align 8
  %mul4263 = mul i64 %731, 8
  br label %cond.end.4268

cond.false.4264:                                  ; preds = %cond.false.4258
  %732 = load i64, i64* %len, align 8
  %mul4265 = mul i64 %732, 8
  %sub4266 = sub i64 %mul4265, -9223372036854775808
  %add4267 = add nsw i64 %sub4266, -9223372036854775808
  br label %cond.end.4268

cond.end.4268:                                    ; preds = %cond.false.4264, %cond.true.4262
  %cond4269 = phi i64 [ %mul4263, %cond.true.4262 ], [ %add4267, %cond.false.4264 ]
  store i64 %cond4269, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

cond.false.4270:                                  ; preds = %cond.false.4076
  %733 = load i64, i64* %len, align 8
  %add4271 = add nsw i64 0, %733
  %mul4272 = mul nsw i64 0, %add4271
  %sub4273 = sub nsw i64 %mul4272, 1
  %cmp4274 = icmp slt i64 %sub4273, 0
  br i1 %cmp4274, label %cond.true.4276, label %cond.false.4293

cond.true.4276:                                   ; preds = %cond.false.4270
  %734 = load i64, i64* %len, align 8
  %add4277 = add nsw i64 0, %734
  %mul4278 = mul nsw i64 0, %add4277
  %add4279 = add nsw i64 %mul4278, 0
  %neg4280 = xor i64 %add4279, -1
  %cmp4281 = icmp eq i64 %neg4280, -1
  %conv4282 = zext i1 %cmp4281 to i32
  %sub4283 = sub nsw i32 0, %conv4282
  %conv4284 = sext i32 %sub4283 to i64
  %735 = load i64, i64* %len, align 8
  %add4285 = add nsw i64 0, %735
  %mul4286 = mul nsw i64 0, %add4285
  %add4287 = add nsw i64 %mul4286, 1
  %shl4288 = shl i64 %add4287, 62
  %sub4289 = sub nsw i64 %shl4288, 1
  %mul4290 = mul nsw i64 %sub4289, 2
  %add4291 = add nsw i64 %mul4290, 1
  %sub4292 = sub nsw i64 %conv4284, %add4291
  br label %cond.end.4297

cond.false.4293:                                  ; preds = %cond.false.4270
  %736 = load i64, i64* %len, align 8
  %add4294 = add nsw i64 0, %736
  %mul4295 = mul nsw i64 0, %add4294
  %add4296 = add nsw i64 %mul4295, 0
  br label %cond.end.4297

cond.end.4297:                                    ; preds = %cond.false.4293, %cond.true.4276
  %cond4298 = phi i64 [ %sub4292, %cond.true.4276 ], [ %add4296, %cond.false.4293 ]
  %cmp4299 = icmp eq i64 %cond4298, 0
  br i1 %cmp4299, label %land.lhs.true.4301, label %lor.lhs.false.4304

land.lhs.true.4301:                               ; preds = %cond.end.4297
  %737 = load i64, i64* %len, align 8
  %cmp4302 = icmp slt i64 %737, 0
  br i1 %cmp4302, label %cond.true.4439, label %lor.lhs.false.4304

lor.lhs.false.4304:                               ; preds = %land.lhs.true.4301, %cond.end.4297
  br i1 false, label %cond.true.4305, label %cond.false.4365

cond.true.4305:                                   ; preds = %lor.lhs.false.4304
  %738 = load i64, i64* %len, align 8
  %cmp4306 = icmp slt i64 %738, 0
  br i1 %cmp4306, label %cond.true.4308, label %cond.false.4331

cond.true.4308:                                   ; preds = %cond.true.4305
  %739 = load i64, i64* %len, align 8
  %740 = load i64, i64* %len, align 8
  %add4309 = add nsw i64 0, %740
  %mul4310 = mul nsw i64 0, %add4309
  %sub4311 = sub nsw i64 %mul4310, 1
  %cmp4312 = icmp slt i64 %sub4311, 0
  br i1 %cmp4312, label %cond.true.4314, label %cond.false.4322

cond.true.4314:                                   ; preds = %cond.true.4308
  %741 = load i64, i64* %len, align 8
  %add4315 = add nsw i64 0, %741
  %mul4316 = mul nsw i64 0, %add4315
  %add4317 = add nsw i64 %mul4316, 1
  %shl4318 = shl i64 %add4317, 62
  %sub4319 = sub nsw i64 %shl4318, 1
  %mul4320 = mul nsw i64 %sub4319, 2
  %add4321 = add nsw i64 %mul4320, 1
  br label %cond.end.4326

cond.false.4322:                                  ; preds = %cond.true.4308
  %742 = load i64, i64* %len, align 8
  %add4323 = add nsw i64 0, %742
  %mul4324 = mul nsw i64 0, %add4323
  %sub4325 = sub nsw i64 %mul4324, 1
  br label %cond.end.4326

cond.end.4326:                                    ; preds = %cond.false.4322, %cond.true.4314
  %cond4327 = phi i64 [ %add4321, %cond.true.4314 ], [ %sub4325, %cond.false.4322 ]
  %div4328 = sdiv i64 %cond4327, 8
  %cmp4329 = icmp slt i64 %739, %div4328
  br i1 %cmp4329, label %cond.true.4439, label %lor.lhs.false.4425

cond.false.4331:                                  ; preds = %cond.true.4305
  br i1 false, label %cond.true.4332, label %cond.false.4333

cond.true.4332:                                   ; preds = %cond.false.4331
  br i1 false, label %cond.true.4439, label %lor.lhs.false.4425

cond.false.4333:                                  ; preds = %cond.false.4331
  %743 = load i64, i64* %len, align 8
  %add4334 = add nsw i64 0, %743
  %mul4335 = mul nsw i64 0, %add4334
  %sub4336 = sub nsw i64 %mul4335, 1
  %cmp4337 = icmp slt i64 %sub4336, 0
  br i1 %cmp4337, label %cond.true.4339, label %cond.false.4356

cond.true.4339:                                   ; preds = %cond.false.4333
  %744 = load i64, i64* %len, align 8
  %add4340 = add nsw i64 0, %744
  %mul4341 = mul nsw i64 0, %add4340
  %add4342 = add nsw i64 %mul4341, 0
  %neg4343 = xor i64 %add4342, -1
  %cmp4344 = icmp eq i64 %neg4343, -1
  %conv4345 = zext i1 %cmp4344 to i32
  %sub4346 = sub nsw i32 0, %conv4345
  %conv4347 = sext i32 %sub4346 to i64
  %745 = load i64, i64* %len, align 8
  %add4348 = add nsw i64 0, %745
  %mul4349 = mul nsw i64 0, %add4348
  %add4350 = add nsw i64 %mul4349, 1
  %shl4351 = shl i64 %add4350, 62
  %sub4352 = sub nsw i64 %shl4351, 1
  %mul4353 = mul nsw i64 %sub4352, 2
  %add4354 = add nsw i64 %mul4353, 1
  %sub4355 = sub nsw i64 %conv4347, %add4354
  br label %cond.end.4360

cond.false.4356:                                  ; preds = %cond.false.4333
  %746 = load i64, i64* %len, align 8
  %add4357 = add nsw i64 0, %746
  %mul4358 = mul nsw i64 0, %add4357
  %add4359 = add nsw i64 %mul4358, 0
  br label %cond.end.4360

cond.end.4360:                                    ; preds = %cond.false.4356, %cond.true.4339
  %cond4361 = phi i64 [ %sub4355, %cond.true.4339 ], [ %add4359, %cond.false.4356 ]
  %div4362 = sdiv i64 %cond4361, 8
  %747 = load i64, i64* %len, align 8
  %cmp4363 = icmp slt i64 %div4362, %747
  br i1 %cmp4363, label %cond.true.4439, label %lor.lhs.false.4425

cond.false.4365:                                  ; preds = %lor.lhs.false.4304
  br i1 false, label %cond.true.4366, label %cond.false.4367

cond.true.4366:                                   ; preds = %cond.false.4365
  br i1 false, label %cond.true.4439, label %lor.lhs.false.4425

cond.false.4367:                                  ; preds = %cond.false.4365
  %748 = load i64, i64* %len, align 8
  %cmp4368 = icmp slt i64 %748, 0
  br i1 %cmp4368, label %cond.true.4370, label %cond.false.4402

cond.true.4370:                                   ; preds = %cond.false.4367
  %749 = load i64, i64* %len, align 8
  %750 = load i64, i64* %len, align 8
  %add4371 = add nsw i64 0, %750
  %mul4372 = mul nsw i64 0, %add4371
  %sub4373 = sub nsw i64 %mul4372, 1
  %cmp4374 = icmp slt i64 %sub4373, 0
  br i1 %cmp4374, label %cond.true.4376, label %cond.false.4393

cond.true.4376:                                   ; preds = %cond.true.4370
  %751 = load i64, i64* %len, align 8
  %add4377 = add nsw i64 0, %751
  %mul4378 = mul nsw i64 0, %add4377
  %add4379 = add nsw i64 %mul4378, 0
  %neg4380 = xor i64 %add4379, -1
  %cmp4381 = icmp eq i64 %neg4380, -1
  %conv4382 = zext i1 %cmp4381 to i32
  %sub4383 = sub nsw i32 0, %conv4382
  %conv4384 = sext i32 %sub4383 to i64
  %752 = load i64, i64* %len, align 8
  %add4385 = add nsw i64 0, %752
  %mul4386 = mul nsw i64 0, %add4385
  %add4387 = add nsw i64 %mul4386, 1
  %shl4388 = shl i64 %add4387, 62
  %sub4389 = sub nsw i64 %shl4388, 1
  %mul4390 = mul nsw i64 %sub4389, 2
  %add4391 = add nsw i64 %mul4390, 1
  %sub4392 = sub nsw i64 %conv4384, %add4391
  br label %cond.end.4397

cond.false.4393:                                  ; preds = %cond.true.4370
  %753 = load i64, i64* %len, align 8
  %add4394 = add nsw i64 0, %753
  %mul4395 = mul nsw i64 0, %add4394
  %add4396 = add nsw i64 %mul4395, 0
  br label %cond.end.4397

cond.end.4397:                                    ; preds = %cond.false.4393, %cond.true.4376
  %cond4398 = phi i64 [ %sub4392, %cond.true.4376 ], [ %add4396, %cond.false.4393 ]
  %div4399 = sdiv i64 %cond4398, 8
  %cmp4400 = icmp slt i64 %749, %div4399
  br i1 %cmp4400, label %cond.true.4439, label %lor.lhs.false.4425

cond.false.4402:                                  ; preds = %cond.false.4367
  %754 = load i64, i64* %len, align 8
  %add4403 = add nsw i64 0, %754
  %mul4404 = mul nsw i64 0, %add4403
  %sub4405 = sub nsw i64 %mul4404, 1
  %cmp4406 = icmp slt i64 %sub4405, 0
  br i1 %cmp4406, label %cond.true.4408, label %cond.false.4416

cond.true.4408:                                   ; preds = %cond.false.4402
  %755 = load i64, i64* %len, align 8
  %add4409 = add nsw i64 0, %755
  %mul4410 = mul nsw i64 0, %add4409
  %add4411 = add nsw i64 %mul4410, 1
  %shl4412 = shl i64 %add4411, 62
  %sub4413 = sub nsw i64 %shl4412, 1
  %mul4414 = mul nsw i64 %sub4413, 2
  %add4415 = add nsw i64 %mul4414, 1
  br label %cond.end.4420

cond.false.4416:                                  ; preds = %cond.false.4402
  %756 = load i64, i64* %len, align 8
  %add4417 = add nsw i64 0, %756
  %mul4418 = mul nsw i64 0, %add4417
  %sub4419 = sub nsw i64 %mul4418, 1
  br label %cond.end.4420

cond.end.4420:                                    ; preds = %cond.false.4416, %cond.true.4408
  %cond4421 = phi i64 [ %add4415, %cond.true.4408 ], [ %sub4419, %cond.false.4416 ]
  %div4422 = sdiv i64 %cond4421, 8
  %757 = load i64, i64* %len, align 8
  %cmp4423 = icmp slt i64 %div4422, %757
  br i1 %cmp4423, label %cond.true.4439, label %lor.lhs.false.4425

lor.lhs.false.4425:                               ; preds = %cond.end.4420, %cond.end.4397, %cond.true.4366, %cond.end.4360, %cond.true.4332, %cond.end.4326
  %758 = load i64, i64* %len, align 8
  %mul4426 = mul nsw i64 %758, 8
  %mul4427 = mul nsw i64 0, %mul4426
  %sub4428 = sub nsw i64 %mul4427, 1
  %cmp4429 = icmp slt i64 %sub4428, 0
  br i1 %cmp4429, label %land.lhs.true.4431, label %lor.lhs.false.4435

land.lhs.true.4431:                               ; preds = %lor.lhs.false.4425
  %759 = load i64, i64* %len, align 8
  %mul4432 = mul nsw i64 %759, 8
  %cmp4433 = icmp slt i64 %mul4432, -9223372036854775808
  br i1 %cmp4433, label %cond.true.4439, label %lor.lhs.false.4435

lor.lhs.false.4435:                               ; preds = %land.lhs.true.4431, %lor.lhs.false.4425
  %760 = load i64, i64* %len, align 8
  %mul4436 = mul nsw i64 %760, 8
  %cmp4437 = icmp slt i64 9223372036854775807, %mul4436
  br i1 %cmp4437, label %cond.true.4439, label %cond.false.4451

cond.true.4439:                                   ; preds = %lor.lhs.false.4435, %land.lhs.true.4431, %cond.end.4420, %cond.end.4397, %cond.true.4366, %cond.end.4360, %cond.true.4332, %cond.end.4326, %land.lhs.true.4301
  %761 = load i64, i64* %len, align 8
  %mul4440 = mul i64 %761, 8
  %cmp4441 = icmp ule i64 %mul4440, 9223372036854775807
  br i1 %cmp4441, label %cond.true.4443, label %cond.false.4445

cond.true.4443:                                   ; preds = %cond.true.4439
  %762 = load i64, i64* %len, align 8
  %mul4444 = mul i64 %762, 8
  br label %cond.end.4449

cond.false.4445:                                  ; preds = %cond.true.4439
  %763 = load i64, i64* %len, align 8
  %mul4446 = mul i64 %763, 8
  %sub4447 = sub i64 %mul4446, -9223372036854775808
  %add4448 = add nsw i64 %sub4447, -9223372036854775808
  br label %cond.end.4449

cond.end.4449:                                    ; preds = %cond.false.4445, %cond.true.4443
  %cond4450 = phi i64 [ %mul4444, %cond.true.4443 ], [ %add4448, %cond.false.4445 ]
  store i64 %cond4450, i64* %alloca_nbytes2289, align 8
  br i1 true, label %if.then.4466, label %lor.lhs.false.4463

cond.false.4451:                                  ; preds = %lor.lhs.false.4435
  %764 = load i64, i64* %len, align 8
  %mul4452 = mul i64 %764, 8
  %cmp4453 = icmp ule i64 %mul4452, 9223372036854775807
  br i1 %cmp4453, label %cond.true.4455, label %cond.false.4457

cond.true.4455:                                   ; preds = %cond.false.4451
  %765 = load i64, i64* %len, align 8
  %mul4456 = mul i64 %765, 8
  br label %cond.end.4461

cond.false.4457:                                  ; preds = %cond.false.4451
  %766 = load i64, i64* %len, align 8
  %mul4458 = mul i64 %766, 8
  %sub4459 = sub i64 %mul4458, -9223372036854775808
  %add4460 = add nsw i64 %sub4459, -9223372036854775808
  br label %cond.end.4461

cond.end.4461:                                    ; preds = %cond.false.4457, %cond.true.4455
  %cond4462 = phi i64 [ %mul4456, %cond.true.4455 ], [ %add4460, %cond.false.4457 ]
  store i64 %cond4462, i64* %alloca_nbytes2289, align 8
  br i1 false, label %if.then.4466, label %lor.lhs.false.4463

lor.lhs.false.4463:                               ; preds = %cond.end.4461, %cond.end.4449, %cond.end.4268, %cond.end.4256, %cond.end.4074, %cond.end.4062, %cond.end.3881, %cond.end.3869, %cond.end.3685, %cond.end.3669, %cond.end.3484, %cond.end.3468, %cond.end.3256, %cond.end.3233, %cond.end.3041, %cond.end.3018, %cond.end.2771, %cond.end.2748, %cond.end.2556, %cond.end.2533
  %767 = load i64, i64* %alloca_nbytes2289, align 8
  %cmp4464 = icmp ult i64 -1, %767
  br i1 %cmp4464, label %if.then.4466, label %if.else.4467

if.then.4466:                                     ; preds = %lor.lhs.false.4463, %cond.end.4461, %cond.end.4449, %cond.end.4268, %cond.end.4256, %cond.end.4074, %cond.end.4062, %cond.end.3881, %cond.end.3869, %cond.end.3685, %cond.end.3669, %cond.end.3484, %cond.end.3468, %cond.end.3256, %cond.end.3233, %cond.end.3041, %cond.end.3018, %cond.end.2771, %cond.end.2748, %cond.end.2556, %cond.end.2533
  call void @memory_full(i64 -1) #7
  unreachable

if.else.4467:                                     ; preds = %lor.lhs.false.4463
  %768 = load i64, i64* %alloca_nbytes2289, align 8
  %769 = load i64, i64* %sa_avail, align 8
  %cmp4468 = icmp sle i64 %768, %769
  br i1 %cmp4468, label %if.then.4470, label %if.else.4472

if.then.4470:                                     ; preds = %if.else.4467
  %770 = load i64, i64* %alloca_nbytes2289, align 8
  %771 = load i64, i64* %sa_avail, align 8
  %sub4471 = sub nsw i64 %771, %770
  store i64 %sub4471, i64* %sa_avail, align 8
  %772 = load i64, i64* %alloca_nbytes2289, align 8
  %773 = alloca i8, i64 %772
  %774 = bitcast i8* %773 to i64*
  store i64* %774, i64** %chars, align 8
  br label %if.end.4476

if.else.4472:                                     ; preds = %if.else.4467
  %775 = load i64, i64* %alloca_nbytes2289, align 8
  %call4474 = call noalias i8* @xmalloc(i64 %775)
  %776 = bitcast i8* %call4474 to i64*
  store i64* %776, i64** %chars, align 8
  %777 = load i64*, i64** %chars, align 8
  %778 = load i64, i64* %len, align 8
  %call4475 = call i64 @make_save_memory(i64* %777, i64 %778)
  store i64 %call4475, i64* %arg_4473, align 8
  store i8 1, i8* %sa_must_free, align 1
  %779 = load i64, i64* %arg_4473, align 8
  call void @record_unwind_protect(void (i64)* @free_save_value, i64 %779)
  br label %if.end.4476

if.end.4476:                                      ; preds = %if.else.4472, %if.then.4470
  br label %if.end.4477

if.end.4477:                                      ; preds = %if.end.4476
  br label %do.end.4478

do.end.4478:                                      ; preds = %if.end.4477
  %780 = load i64, i64* %object.addr, align 8
  %call4479 = call i8* @SDATA(i64 %780)
  store i8* %call4479, i8** %p, align 8
  %781 = load i64, i64* %object.addr, align 8
  %call4480 = call zeroext i1 @STRING_MULTIBYTE(i64 %781)
  br i1 %call4480, label %if.then.4481, label %if.else.4612

if.then.4481:                                     ; preds = %do.end.4478
  store i64 0, i64* %i, align 8
  br label %for.cond.4483

for.cond.4483:                                    ; preds = %for.inc.4542, %if.then.4481
  %782 = load i64, i64* %i, align 8
  %783 = load i64, i64* %ifrom, align 8
  %cmp4484 = icmp slt i64 %782, %783
  br i1 %cmp4484, label %for.body.4486, label %for.end.4544

for.body.4486:                                    ; preds = %for.cond.4483
  %784 = load i8*, i8** %p, align 8
  %arrayidx4487 = getelementptr inbounds i8, i8* %784, i64 0
  %785 = load i8, i8* %arrayidx4487, align 1
  %conv4488 = zext i8 %785 to i32
  %and4489 = and i32 %conv4488, 128
  %tobool4490 = icmp ne i32 %and4489, 0
  br i1 %tobool4490, label %cond.false.4493, label %cond.true.4491

cond.true.4491:                                   ; preds = %for.body.4486
  %786 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %786, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %787 = load i8, i8* %786, align 1
  %conv4492 = zext i8 %787 to i32
  br label %cond.end.4540

cond.false.4493:                                  ; preds = %for.body.4486
  %788 = load i8*, i8** %p, align 8
  %arrayidx4494 = getelementptr inbounds i8, i8* %788, i64 0
  %789 = load i8, i8* %arrayidx4494, align 1
  %conv4495 = zext i8 %789 to i32
  %and4496 = and i32 %conv4495, 32
  %tobool4497 = icmp ne i32 %and4496, 0
  br i1 %tobool4497, label %cond.false.4514, label %cond.true.4498

cond.true.4498:                                   ; preds = %cond.false.4493
  %790 = load i8*, i8** %p, align 8
  %add.ptr4499 = getelementptr inbounds i8, i8* %790, i64 2
  store i8* %add.ptr4499, i8** %p, align 8
  %791 = load i8*, i8** %p, align 8
  %arrayidx4500 = getelementptr inbounds i8, i8* %791, i64 -2
  %792 = load i8, i8* %arrayidx4500, align 1
  %conv4501 = zext i8 %792 to i32
  %and4502 = and i32 %conv4501, 31
  %shl4503 = shl i32 %and4502, 6
  %793 = load i8*, i8** %p, align 8
  %arrayidx4504 = getelementptr inbounds i8, i8* %793, i64 -1
  %794 = load i8, i8* %arrayidx4504, align 1
  %conv4505 = zext i8 %794 to i32
  %and4506 = and i32 %conv4505, 63
  %or4507 = or i32 %shl4503, %and4506
  %795 = load i8*, i8** %p, align 8
  %arrayidx4508 = getelementptr inbounds i8, i8* %795, i64 -2
  %796 = load i8, i8* %arrayidx4508, align 1
  %conv4509 = zext i8 %796 to i32
  %cmp4510 = icmp slt i32 %conv4509, 194
  %cond4512 = select i1 %cmp4510, i32 4194176, i32 0
  %or4513 = or i32 %or4507, %cond4512
  br label %cond.end.4538

cond.false.4514:                                  ; preds = %cond.false.4493
  %797 = load i8*, i8** %p, align 8
  %arrayidx4515 = getelementptr inbounds i8, i8* %797, i64 0
  %798 = load i8, i8* %arrayidx4515, align 1
  %conv4516 = zext i8 %798 to i32
  %and4517 = and i32 %conv4516, 16
  %tobool4518 = icmp ne i32 %and4517, 0
  br i1 %tobool4518, label %cond.false.4534, label %cond.true.4519

cond.true.4519:                                   ; preds = %cond.false.4514
  %799 = load i8*, i8** %p, align 8
  %add.ptr4520 = getelementptr inbounds i8, i8* %799, i64 3
  store i8* %add.ptr4520, i8** %p, align 8
  %800 = load i8*, i8** %p, align 8
  %arrayidx4521 = getelementptr inbounds i8, i8* %800, i64 -3
  %801 = load i8, i8* %arrayidx4521, align 1
  %conv4522 = zext i8 %801 to i32
  %and4523 = and i32 %conv4522, 15
  %shl4524 = shl i32 %and4523, 12
  %802 = load i8*, i8** %p, align 8
  %arrayidx4525 = getelementptr inbounds i8, i8* %802, i64 -2
  %803 = load i8, i8* %arrayidx4525, align 1
  %conv4526 = zext i8 %803 to i32
  %and4527 = and i32 %conv4526, 63
  %shl4528 = shl i32 %and4527, 6
  %or4529 = or i32 %shl4524, %shl4528
  %804 = load i8*, i8** %p, align 8
  %arrayidx4530 = getelementptr inbounds i8, i8* %804, i64 -1
  %805 = load i8, i8* %arrayidx4530, align 1
  %conv4531 = zext i8 %805 to i32
  %and4532 = and i32 %conv4531, 63
  %or4533 = or i32 %or4529, %and4532
  br label %cond.end.4536

cond.false.4534:                                  ; preds = %cond.false.4514
  %806 = load i8*, i8** %p, align 8
  %call4535 = call i32 @string_char(i8* %806, i8** %p, i32* null)
  br label %cond.end.4536

cond.end.4536:                                    ; preds = %cond.false.4534, %cond.true.4519
  %cond4537 = phi i32 [ %or4533, %cond.true.4519 ], [ %call4535, %cond.false.4534 ]
  br label %cond.end.4538

cond.end.4538:                                    ; preds = %cond.end.4536, %cond.true.4498
  %cond4539 = phi i32 [ %or4513, %cond.true.4498 ], [ %cond4537, %cond.end.4536 ]
  br label %cond.end.4540

cond.end.4540:                                    ; preds = %cond.end.4538, %cond.true.4491
  %cond4541 = phi i32 [ %conv4492, %cond.true.4491 ], [ %cond4539, %cond.end.4538 ]
  store i32 %cond4541, i32* %c4482, align 4
  br label %for.inc.4542

for.inc.4542:                                     ; preds = %cond.end.4540
  %807 = load i64, i64* %i, align 8
  %inc4543 = add nsw i64 %807, 1
  store i64 %inc4543, i64* %i, align 8
  br label %for.cond.4483

for.end.4544:                                     ; preds = %for.cond.4483
  store i64 0, i64* %i, align 8
  br label %for.cond.4545

for.cond.4545:                                    ; preds = %for.inc.4609, %for.end.4544
  %808 = load i64, i64* %i, align 8
  %809 = load i64, i64* %len, align 8
  %cmp4546 = icmp slt i64 %808, %809
  br i1 %cmp4546, label %for.body.4548, label %for.end.4611

for.body.4548:                                    ; preds = %for.cond.4545
  %810 = load i8*, i8** %p, align 8
  %arrayidx4549 = getelementptr inbounds i8, i8* %810, i64 0
  %811 = load i8, i8* %arrayidx4549, align 1
  %conv4550 = zext i8 %811 to i32
  %and4551 = and i32 %conv4550, 128
  %tobool4552 = icmp ne i32 %and4551, 0
  br i1 %tobool4552, label %cond.false.4556, label %cond.true.4553

cond.true.4553:                                   ; preds = %for.body.4548
  %812 = load i8*, i8** %p, align 8
  %incdec.ptr4554 = getelementptr inbounds i8, i8* %812, i32 1
  store i8* %incdec.ptr4554, i8** %p, align 8
  %813 = load i8, i8* %812, align 1
  %conv4555 = zext i8 %813 to i32
  br label %cond.end.4603

cond.false.4556:                                  ; preds = %for.body.4548
  %814 = load i8*, i8** %p, align 8
  %arrayidx4557 = getelementptr inbounds i8, i8* %814, i64 0
  %815 = load i8, i8* %arrayidx4557, align 1
  %conv4558 = zext i8 %815 to i32
  %and4559 = and i32 %conv4558, 32
  %tobool4560 = icmp ne i32 %and4559, 0
  br i1 %tobool4560, label %cond.false.4577, label %cond.true.4561

cond.true.4561:                                   ; preds = %cond.false.4556
  %816 = load i8*, i8** %p, align 8
  %add.ptr4562 = getelementptr inbounds i8, i8* %816, i64 2
  store i8* %add.ptr4562, i8** %p, align 8
  %817 = load i8*, i8** %p, align 8
  %arrayidx4563 = getelementptr inbounds i8, i8* %817, i64 -2
  %818 = load i8, i8* %arrayidx4563, align 1
  %conv4564 = zext i8 %818 to i32
  %and4565 = and i32 %conv4564, 31
  %shl4566 = shl i32 %and4565, 6
  %819 = load i8*, i8** %p, align 8
  %arrayidx4567 = getelementptr inbounds i8, i8* %819, i64 -1
  %820 = load i8, i8* %arrayidx4567, align 1
  %conv4568 = zext i8 %820 to i32
  %and4569 = and i32 %conv4568, 63
  %or4570 = or i32 %shl4566, %and4569
  %821 = load i8*, i8** %p, align 8
  %arrayidx4571 = getelementptr inbounds i8, i8* %821, i64 -2
  %822 = load i8, i8* %arrayidx4571, align 1
  %conv4572 = zext i8 %822 to i32
  %cmp4573 = icmp slt i32 %conv4572, 194
  %cond4575 = select i1 %cmp4573, i32 4194176, i32 0
  %or4576 = or i32 %or4570, %cond4575
  br label %cond.end.4601

cond.false.4577:                                  ; preds = %cond.false.4556
  %823 = load i8*, i8** %p, align 8
  %arrayidx4578 = getelementptr inbounds i8, i8* %823, i64 0
  %824 = load i8, i8* %arrayidx4578, align 1
  %conv4579 = zext i8 %824 to i32
  %and4580 = and i32 %conv4579, 16
  %tobool4581 = icmp ne i32 %and4580, 0
  br i1 %tobool4581, label %cond.false.4597, label %cond.true.4582

cond.true.4582:                                   ; preds = %cond.false.4577
  %825 = load i8*, i8** %p, align 8
  %add.ptr4583 = getelementptr inbounds i8, i8* %825, i64 3
  store i8* %add.ptr4583, i8** %p, align 8
  %826 = load i8*, i8** %p, align 8
  %arrayidx4584 = getelementptr inbounds i8, i8* %826, i64 -3
  %827 = load i8, i8* %arrayidx4584, align 1
  %conv4585 = zext i8 %827 to i32
  %and4586 = and i32 %conv4585, 15
  %shl4587 = shl i32 %and4586, 12
  %828 = load i8*, i8** %p, align 8
  %arrayidx4588 = getelementptr inbounds i8, i8* %828, i64 -2
  %829 = load i8, i8* %arrayidx4588, align 1
  %conv4589 = zext i8 %829 to i32
  %and4590 = and i32 %conv4589, 63
  %shl4591 = shl i32 %and4590, 6
  %or4592 = or i32 %shl4587, %shl4591
  %830 = load i8*, i8** %p, align 8
  %arrayidx4593 = getelementptr inbounds i8, i8* %830, i64 -1
  %831 = load i8, i8* %arrayidx4593, align 1
  %conv4594 = zext i8 %831 to i32
  %and4595 = and i32 %conv4594, 63
  %or4596 = or i32 %or4592, %and4595
  br label %cond.end.4599

cond.false.4597:                                  ; preds = %cond.false.4577
  %832 = load i8*, i8** %p, align 8
  %call4598 = call i32 @string_char(i8* %832, i8** %p, i32* null)
  br label %cond.end.4599

cond.end.4599:                                    ; preds = %cond.false.4597, %cond.true.4582
  %cond4600 = phi i32 [ %or4596, %cond.true.4582 ], [ %call4598, %cond.false.4597 ]
  br label %cond.end.4601

cond.end.4601:                                    ; preds = %cond.end.4599, %cond.true.4561
  %cond4602 = phi i32 [ %or4576, %cond.true.4561 ], [ %cond4600, %cond.end.4599 ]
  br label %cond.end.4603

cond.end.4603:                                    ; preds = %cond.end.4601, %cond.true.4553
  %cond4604 = phi i32 [ %conv4555, %cond.true.4553 ], [ %cond4602, %cond.end.4601 ]
  store i32 %cond4604, i32* %c4482, align 4
  %833 = load i32, i32* %c4482, align 4
  %conv4605 = sext i32 %833 to i64
  %shl4606 = shl i64 %conv4605, 2
  %add4607 = add i64 %shl4606, 2
  %834 = load i64, i64* %i, align 8
  %835 = load i64*, i64** %chars, align 8
  %arrayidx4608 = getelementptr inbounds i64, i64* %835, i64 %834
  store i64 %add4607, i64* %arrayidx4608, align 8
  br label %for.inc.4609

for.inc.4609:                                     ; preds = %cond.end.4603
  %836 = load i64, i64* %i, align 8
  %inc4610 = add nsw i64 %836, 1
  store i64 %inc4610, i64* %i, align 8
  br label %for.cond.4545

for.end.4611:                                     ; preds = %for.cond.4545
  br label %if.end.4626

if.else.4612:                                     ; preds = %do.end.4478
  store i64 0, i64* %i, align 8
  br label %for.cond.4613

for.cond.4613:                                    ; preds = %for.inc.4623, %if.else.4612
  %837 = load i64, i64* %i, align 8
  %838 = load i64, i64* %len, align 8
  %cmp4614 = icmp slt i64 %837, %838
  br i1 %cmp4614, label %for.body.4616, label %for.end.4625

for.body.4616:                                    ; preds = %for.cond.4613
  %839 = load i64, i64* %ifrom, align 8
  %840 = load i64, i64* %i, align 8
  %add4617 = add nsw i64 %839, %840
  %841 = load i8*, i8** %p, align 8
  %arrayidx4618 = getelementptr inbounds i8, i8* %841, i64 %add4617
  %842 = load i8, i8* %arrayidx4618, align 1
  %conv4619 = zext i8 %842 to i64
  %shl4620 = shl i64 %conv4619, 2
  %add4621 = add i64 %shl4620, 2
  %843 = load i64, i64* %i, align 8
  %844 = load i64*, i64** %chars, align 8
  %arrayidx4622 = getelementptr inbounds i64, i64* %844, i64 %843
  store i64 %add4621, i64* %arrayidx4622, align 8
  br label %for.inc.4623

for.inc.4623:                                     ; preds = %for.body.4616
  %845 = load i64, i64* %i, align 8
  %inc4624 = add nsw i64 %845, 1
  store i64 %inc4624, i64* %i, align 8
  br label %for.cond.4613

for.end.4625:                                     ; preds = %for.cond.4613
  br label %if.end.4626

if.end.4626:                                      ; preds = %for.end.4625, %for.end.4611
  br label %if.end.4662

if.else.4627:                                     ; preds = %if.else.2278
  %846 = load i64, i64* %object.addr, align 8
  %call4628 = call zeroext i1 @VECTORP(i64 %846)
  br i1 %call4628, label %if.then.4629, label %if.else.4659

if.then.4629:                                     ; preds = %if.else.4627
  %847 = load i64, i64* %object.addr, align 8
  %848 = load i64, i64* %from.addr, align 8
  %849 = load i64, i64* %to.addr, align 8
  %850 = load i64, i64* %object.addr, align 8
  %call4632 = call i64 @ASIZE(i64 %850)
  call void @validate_subarray(i64 %847, i64 %848, i64 %849, i64 %call4632, i64* %ifrom4630, i64* %ito4631)
  %851 = load i64, i64* %ifrom4630, align 8
  %852 = load i64, i64* %ito4631, align 8
  %cmp4633 = icmp eq i64 %851, %852
  br i1 %cmp4633, label %if.then.4635, label %if.end.4637

if.then.4635:                                     ; preds = %if.then.4629
  %call4636 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4636, i64* %retval
  br label %return

if.end.4637:                                      ; preds = %if.then.4629
  %853 = load i64, i64* %ito4631, align 8
  %854 = load i64, i64* %ifrom4630, align 8
  %sub4638 = sub nsw i64 %853, %854
  store i64 %sub4638, i64* %len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.4639

for.cond.4639:                                    ; preds = %for.inc.4655, %if.end.4637
  %855 = load i64, i64* %i, align 8
  %856 = load i64, i64* %len, align 8
  %cmp4640 = icmp slt i64 %855, %856
  br i1 %cmp4640, label %for.body.4642, label %for.end.4657

for.body.4642:                                    ; preds = %for.cond.4639
  %857 = load i64, i64* %object.addr, align 8
  %858 = load i64, i64* %ifrom4630, align 8
  %859 = load i64, i64* %i, align 8
  %add4643 = add nsw i64 %858, %859
  %call4644 = call i64 @AREF(i64 %857, i64 %add4643)
  store i64 %call4644, i64* %elt, align 8
  %860 = load i64, i64* %elt, align 8
  %call4645 = call zeroext i1 @NATNUMP(i64 %860)
  br i1 %call4645, label %land.lhs.true.4647, label %cond.false.4652

land.lhs.true.4647:                               ; preds = %for.body.4642
  %861 = load i64, i64* %elt, align 8
  %shr4648 = ashr i64 %861, 2
  %cmp4649 = icmp sle i64 %shr4648, 4194303
  br i1 %cmp4649, label %cond.true.4651, label %cond.false.4652

cond.true.4651:                                   ; preds = %land.lhs.true.4647
  br label %cond.end.4654

cond.false.4652:                                  ; preds = %land.lhs.true.4647, %for.body.4642
  %call4653 = call i64 @builtin_lisp_symbol(i32 260)
  %862 = load i64, i64* %elt, align 8
  %863 = call i64 @wrong_type_argument(i64 %call4653, i64 %862) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.4654

cond.end.4654:                                    ; preds = %864, %cond.true.4651
  br label %for.inc.4655

for.inc.4655:                                     ; preds = %cond.end.4654
  %865 = load i64, i64* %i, align 8
  %inc4656 = add nsw i64 %865, 1
  store i64 %inc4656, i64* %i, align 8
  br label %for.cond.4639

for.end.4657:                                     ; preds = %for.cond.4639
  %866 = load i64, i64* %object.addr, align 8
  %867 = load i64, i64* %ifrom4630, align 8
  %call4658 = call i64* @aref_addr(i64 %866, i64 %867)
  store i64* %call4658, i64** %chars, align 8
  br label %if.end.4661

if.else.4659:                                     ; preds = %if.else.4627
  %call4660 = call i64 @builtin_lisp_symbol(i32 179)
  %868 = load i64, i64* %object.addr, align 8
  %869 = call i64 @wrong_type_argument(i64 %call4660, i64 %868) #7
  unreachable

if.end.4661:                                      ; preds = %for.end.4657
  br label %if.end.4662

if.end.4662:                                      ; preds = %if.end.4661, %if.end.4626
  br label %if.end.4663

if.end.4663:                                      ; preds = %if.end.4662, %for.end
  %870 = load i64, i64* %len, align 8
  %call4664 = call i64 @make_uninit_vector(i64 %870)
  store i64 %call4664, i64* %vec, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.4665

for.cond.4665:                                    ; preds = %for.inc.4740, %if.end.4663
  %871 = load i64, i64* %i, align 8
  %872 = load i64, i64* %len, align 8
  %cmp4666 = icmp slt i64 %871, %872
  br i1 %cmp4666, label %for.body.4668, label %for.end.4742

for.body.4668:                                    ; preds = %for.cond.4665
  %873 = load i64, i64* %i, align 8
  %874 = load i64*, i64** %chars, align 8
  %arrayidx4670 = getelementptr inbounds i64, i64* %874, i64 %873
  %875 = load i64, i64* %arrayidx4670, align 8
  %shr4671 = ashr i64 %875, 2
  %conv4672 = trunc i64 %shr4671 to i32
  store i32 %conv4672, i32* %c4669, align 4
  %876 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %876, i32 0, i32 18
  %877 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %encode_char = getelementptr inbounds %struct.font_driver, %struct.font_driver* %877, i32 0, i32 12
  %878 = load i32 (%struct.font*, i32)*, i32 (%struct.font*, i32)** %encode_char, align 8
  %879 = load %struct.font*, %struct.font** %font, align 8
  %880 = load i32, i32* %c4669, align 4
  %call4673 = call i32 %878(%struct.font* %879, i32 %880)
  store i32 %call4673, i32* %code, align 4
  %881 = load i32, i32* %code, align 4
  %cmp4674 = icmp eq i32 %881, -1
  br i1 %cmp4674, label %if.then.4676, label %if.end.4678

if.then.4676:                                     ; preds = %for.body.4668
  %882 = load i64, i64* %vec, align 8
  %883 = load i64, i64* %i, align 8
  %call4677 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %882, i64 %883, i64 %call4677)
  br label %for.inc.4740

if.end.4678:                                      ; preds = %for.body.4668
  %call4679 = call i64 @builtin_lisp_symbol(i32 0)
  %call4680 = call i64 @Fmake_vector(i64 42, i64 %call4679)
  store i64 %call4680, i64* %g, align 8
  %884 = load i64, i64* %g, align 8
  %885 = load i64, i64* %i, align 8
  %shl4681 = shl i64 %885, 2
  %add4682 = add i64 %shl4681, 2
  call void @ASET(i64 %884, i64 0, i64 %add4682)
  %886 = load i64, i64* %g, align 8
  %887 = load i64, i64* %i, align 8
  %shl4683 = shl i64 %887, 2
  %add4684 = add i64 %shl4683, 2
  call void @ASET(i64 %886, i64 1, i64 %add4684)
  %888 = load i64, i64* %g, align 8
  %889 = load i32, i32* %c4669, align 4
  %conv4685 = sext i32 %889 to i64
  %shl4686 = shl i64 %conv4685, 2
  %add4687 = add i64 %shl4686, 2
  call void @ASET(i64 %888, i64 2, i64 %add4687)
  %890 = load i64, i64* %g, align 8
  %891 = load i32, i32* %code, align 4
  %cmp4688 = icmp eq i32 %891, -1
  br i1 %cmp4688, label %cond.true.4690, label %cond.false.4692

cond.true.4690:                                   ; preds = %if.end.4678
  %call4691 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.4722

cond.false.4692:                                  ; preds = %if.end.4678
  %892 = load i32, i32* %code, align 4
  %cmp4693 = icmp ule i32 0, %892
  br i1 %cmp4693, label %land.lhs.true.4699, label %lor.lhs.false.4695

lor.lhs.false.4695:                               ; preds = %cond.false.4692
  %893 = load i32, i32* %code, align 4
  %conv4696 = zext i32 %893 to i64
  %cmp4697 = icmp sle i64 -2305843009213693952, %conv4696
  br i1 %cmp4697, label %land.lhs.true.4699, label %cond.false.4707

land.lhs.true.4699:                               ; preds = %lor.lhs.false.4695, %cond.false.4692
  %894 = load i32, i32* %code, align 4
  %conv4700 = zext i32 %894 to i64
  %cmp4701 = icmp sle i64 %conv4700, 2305843009213693951
  br i1 %cmp4701, label %cond.true.4703, label %cond.false.4707

cond.true.4703:                                   ; preds = %land.lhs.true.4699
  %895 = load i32, i32* %code, align 4
  %conv4704 = zext i32 %895 to i64
  %shl4705 = shl i64 %conv4704, 2
  %add4706 = add i64 %shl4705, 2
  br label %cond.end.4720

cond.false.4707:                                  ; preds = %land.lhs.true.4699, %lor.lhs.false.4695
  %896 = load i32, i32* %code, align 4
  %mul4708 = mul i32 0, %896
  %sub4709 = sub i32 %mul4708, 1
  %cmp4710 = icmp ult i32 %sub4709, 0
  br i1 %cmp4710, label %cond.true.4712, label %cond.false.4715

cond.true.4712:                                   ; preds = %cond.false.4707
  %897 = load i32, i32* %code, align 4
  %conv4713 = zext i32 %897 to i64
  %call4714 = call i64 @intbig_to_lisp(i64 %conv4713)
  br label %cond.end.4718

cond.false.4715:                                  ; preds = %cond.false.4707
  %898 = load i32, i32* %code, align 4
  %conv4716 = zext i32 %898 to i64
  %call4717 = call i64 @uintbig_to_lisp(i64 %conv4716)
  br label %cond.end.4718

cond.end.4718:                                    ; preds = %cond.false.4715, %cond.true.4712
  %cond4719 = phi i64 [ %call4714, %cond.true.4712 ], [ %call4717, %cond.false.4715 ]
  br label %cond.end.4720

cond.end.4720:                                    ; preds = %cond.end.4718, %cond.true.4703
  %cond4721 = phi i64 [ %add4706, %cond.true.4703 ], [ %cond4719, %cond.end.4718 ]
  br label %cond.end.4722

cond.end.4722:                                    ; preds = %cond.end.4720, %cond.true.4690
  %cond4723 = phi i64 [ %call4691, %cond.true.4690 ], [ %cond4721, %cond.end.4720 ]
  call void @ASET(i64 %890, i64 3, i64 %cond4723)
  %899 = load %struct.font*, %struct.font** %font, align 8
  %driver4724 = getelementptr inbounds %struct.font, %struct.font* %899, i32 0, i32 18
  %900 = load %struct.font_driver*, %struct.font_driver** %driver4724, align 8
  %text_extents = getelementptr inbounds %struct.font_driver, %struct.font_driver* %900, i32 0, i32 13
  %901 = load void (%struct.font*, i32*, i32, %struct.font_metrics*)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)** %text_extents, align 8
  %902 = load %struct.font*, %struct.font** %font, align 8
  call void %901(%struct.font* %902, i32* %code, i32 1, %struct.font_metrics* %metrics)
  %903 = load i64, i64* %g, align 8
  %width = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 2
  %904 = load i16, i16* %width, align 2
  %conv4725 = sext i16 %904 to i64
  %shl4726 = shl i64 %conv4725, 2
  %add4727 = add i64 %shl4726, 2
  call void @ASET(i64 %903, i64 4, i64 %add4727)
  %905 = load i64, i64* %g, align 8
  %lbearing = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 0
  %906 = load i16, i16* %lbearing, align 2
  %conv4728 = sext i16 %906 to i64
  %shl4729 = shl i64 %conv4728, 2
  %add4730 = add i64 %shl4729, 2
  call void @ASET(i64 %905, i64 5, i64 %add4730)
  %907 = load i64, i64* %g, align 8
  %rbearing = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 1
  %908 = load i16, i16* %rbearing, align 2
  %conv4731 = sext i16 %908 to i64
  %shl4732 = shl i64 %conv4731, 2
  %add4733 = add i64 %shl4732, 2
  call void @ASET(i64 %907, i64 6, i64 %add4733)
  %909 = load i64, i64* %g, align 8
  %ascent = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 3
  %910 = load i16, i16* %ascent, align 2
  %conv4734 = sext i16 %910 to i64
  %shl4735 = shl i64 %conv4734, 2
  %add4736 = add i64 %shl4735, 2
  call void @ASET(i64 %909, i64 7, i64 %add4736)
  %911 = load i64, i64* %g, align 8
  %descent = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 4
  %912 = load i16, i16* %descent, align 2
  %conv4737 = sext i16 %912 to i64
  %shl4738 = shl i64 %conv4737, 2
  %add4739 = add i64 %shl4738, 2
  call void @ASET(i64 %911, i64 8, i64 %add4739)
  %913 = load i64, i64* %vec, align 8
  %914 = load i64, i64* %i, align 8
  %915 = load i64, i64* %g, align 8
  call void @ASET(i64 %913, i64 %914, i64 %915)
  br label %for.inc.4740

for.inc.4740:                                     ; preds = %cond.end.4722, %if.then.4676
  %916 = load i64, i64* %i, align 8
  %inc4741 = add nsw i64 %916, 1
  store i64 %inc4741, i64* %i, align 8
  br label %for.cond.4665

for.end.4742:                                     ; preds = %for.cond.4665
  %917 = load i64, i64* %object.addr, align 8
  %call4743 = call zeroext i1 @VECTORP(i64 %917)
  br i1 %call4743, label %if.end.4752, label %if.then.4744

if.then.4744:                                     ; preds = %for.end.4742
  br label %do.body.4745

do.body.4745:                                     ; preds = %if.then.4744
  %918 = load i8, i8* %sa_must_free, align 1
  %tobool4746 = trunc i8 %918 to i1
  br i1 %tobool4746, label %if.then.4747, label %if.end.4750

if.then.4747:                                     ; preds = %do.body.4745
  store i8 0, i8* %sa_must_free, align 1
  %919 = load i64, i64* %sa_count, align 8
  %call4748 = call i64 @builtin_lisp_symbol(i32 0)
  %call4749 = call i64 @unbind_to(i64 %919, i64 %call4748)
  br label %if.end.4750

if.end.4750:                                      ; preds = %if.then.4747, %do.body.4745
  br label %do.end.4751

do.end.4751:                                      ; preds = %if.end.4750
  br label %if.end.4752

if.end.4752:                                      ; preds = %do.end.4751, %for.end.4742
  %920 = load i64, i64* %vec, align 8
  store i64 %920, i64* %retval
  br label %return

return:                                           ; preds = %if.end.4752, %if.then.4635, %if.then.2284, %if.then.4
  %921 = load i64, i64* %retval
  ret i64 %921
}

declare void @validate_region(i64*, i64*) #1

declare void @validate_subarray(i64, i64, i64, i64, i64*, i64*) #1

declare i64 @SCHARS(i64) #1

declare zeroext i1 @STRING_MULTIBYTE(i64) #1

declare i64* @aref_addr(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffont_match_p(i64 %spec, i64 %font) #0 {
entry:
  %spec.addr = alloca i64, align 8
  %font.addr = alloca i64, align 8
  store i64 %spec, i64* %spec.addr, align 8
  store i64 %font, i64* %font.addr, align 8
  %0 = load i64, i64* %spec.addr, align 8
  call void @CHECK_FONT_SPEC(i64 %0)
  %1 = load i64, i64* %font.addr, align 8
  call void @CHECK_FONT(i64 %1)
  %2 = load i64, i64* %spec.addr, align 8
  %3 = load i64, i64* %font.addr, align 8
  %call = call zeroext i1 @font_match_p(i64 %2, i64 %3)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Ffont_at(i64 %position, i64 %window, i64 %string) #0 {
entry:
  %position.addr = alloca i64, align 8
  %window.addr = alloca i64, align 8
  %string.addr = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  store i64 %position, i64* %position.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @decode_live_window(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load i64, i64* %string.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.then, label %if.else.32

if.then:                                          ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 10
  %3 = load i64, i64* %contents, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %3)
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp3 = icmp ne %struct.buffer* %call2, %4
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.33, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load i64, i64* %position.addr, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp5 = icmp eq i32 %conv, 1
  br i1 %cmp5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.body
  %6 = load i64, i64* %position.addr, align 8
  %call7 = call i32 @XMISCTYPE(i64 %6)
  %cmp8 = icmp eq i32 %call7, 24236
  br i1 %cmp8, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %land.lhs.true
  %7 = load i64, i64* %position.addr, align 8
  %call11 = call i64 @marker_position(i64 %7)
  %call12 = call i64 @make_natnum(i64 %call11)
  store i64 %call12, i64* %position.addr, align 8
  br label %if.end.19

if.else:                                          ; preds = %land.lhs.true, %do.body
  %8 = load i64, i64* %position.addr, align 8
  %and13 = and i64 %8, 7
  %conv14 = trunc i64 %and13 to i32
  %and15 = and i32 %conv14, -5
  %cmp16 = icmp eq i32 %and15, 2
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call18 = call i64 @builtin_lisp_symbol(i32 558)
  %9 = load i64, i64* %position.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call18, i64 %9) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %11, %cond.true
  br label %if.end.19

if.end.19:                                        ; preds = %cond.end, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 77
  %13 = load i64, i64* %begv, align 8
  %14 = load i64, i64* %position.addr, align 8
  %shr = ashr i64 %14, 2
  %cmp20 = icmp sle i64 %13, %shr
  br i1 %cmp20, label %land.lhs.true.22, label %if.then.26

land.lhs.true.22:                                 ; preds = %do.end
  %15 = load i64, i64* %position.addr, align 8
  %shr23 = ashr i64 %15, 2
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 79
  %17 = load i64, i64* %zv, align 8
  %cmp24 = icmp slt i64 %shr23, %17
  br i1 %cmp24, label %if.end.31, label %if.then.26

if.then.26:                                       ; preds = %land.lhs.true.22, %do.end
  %18 = load i64, i64* %position.addr, align 8
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv27 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 77
  %20 = load i64, i64* %begv27, align 8
  %shl = shl i64 %20, 2
  %add = add i64 %shl, 2
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv28 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 79
  %22 = load i64, i64* %zv28, align 8
  %shl29 = shl i64 %22, 2
  %add30 = add i64 %shl29, 2
  call void @args_out_of_range_3(i64 %18, i64 %add, i64 %add30) #7
  unreachable

if.end.31:                                        ; preds = %land.lhs.true.22
  br label %if.end.52

if.else.32:                                       ; preds = %entry
  %23 = load i64, i64* %position.addr, align 8
  %and33 = and i64 %23, 7
  %conv34 = trunc i64 %and33 to i32
  %and35 = and i32 %conv34, -5
  %cmp36 = icmp eq i32 %and35, 2
  br i1 %cmp36, label %cond.true.38, label %cond.false.39

cond.true.38:                                     ; preds = %if.else.32
  br label %cond.end.41

cond.false.39:                                    ; preds = %if.else.32
  %call40 = call i64 @builtin_lisp_symbol(i32 559)
  %24 = load i64, i64* %position.addr, align 8
  %25 = call i64 @wrong_type_argument(i64 %call40, i64 %24) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.41

cond.end.41:                                      ; preds = %26, %cond.true.38
  %27 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %27)
  %28 = load i64, i64* %position.addr, align 8
  %shr42 = ashr i64 %28, 2
  %cmp43 = icmp sle i64 0, %shr42
  br i1 %cmp43, label %land.lhs.true.45, label %if.then.50

land.lhs.true.45:                                 ; preds = %cond.end.41
  %29 = load i64, i64* %position.addr, align 8
  %shr46 = ashr i64 %29, 2
  %30 = load i64, i64* %string.addr, align 8
  %call47 = call i64 @SCHARS(i64 %30)
  %cmp48 = icmp slt i64 %shr46, %call47
  br i1 %cmp48, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %land.lhs.true.45, %cond.end.41
  %31 = load i64, i64* %string.addr, align 8
  %32 = load i64, i64* %position.addr, align 8
  call void @args_out_of_range(i64 %31, i64 %32) #7
  unreachable

if.end.51:                                        ; preds = %land.lhs.true.45
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.end.31
  %33 = load i64, i64* %position.addr, align 8
  %shr53 = ashr i64 %33, 2
  %34 = load %struct.window*, %struct.window** %w, align 8
  %35 = load i64, i64* %string.addr, align 8
  %call54 = call i64 @font_at(i32 -1, i64 %shr53, %struct.face* null, %struct.window* %34, i64 %35)
  ret i64 %call54
}

declare %struct.window* @decode_live_window(i64) #1

declare %struct.buffer* @XBUFFER(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @font_at(i32 %c, i64 %pos, %struct.face* %face, %struct.window* %w, i64 %string) #0 {
entry:
  %retval = alloca i64, align 8
  %c.addr = alloca i32, align 4
  %pos.addr = alloca i64, align 8
  %face.addr = alloca %struct.face*, align 8
  %w.addr = alloca %struct.window*, align 8
  %string.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %multibyte = alloca i8, align 1
  %font_object = alloca i64, align 8
  %pos_byte = alloca i64, align 8
  %str = alloca i8*, align 8
  %pos_byte53 = alloca i64, align 8
  %face_id = alloca i32, align 4
  %endptr = alloca i64, align 8
  %face_id151 = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  store i64 %pos, i64* %pos.addr, align 8
  store %struct.face* %face, %struct.face** %face.addr, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 39
  %2 = load i64, i64* %enable_multibyte_characters_, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %2, %call1
  %lnot = xor i1 %cmp2, true
  %lnot.ext = zext i1 %lnot to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %string.addr, align 8
  %call3 = call zeroext i1 @STRING_MULTIBYTE(i64 %3)
  %conv = zext i1 %call3 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %lnot.ext, %cond.true ], [ %conv, %cond.false ]
  %tobool = icmp ne i32 %cond, 0
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %multibyte, align 1
  %4 = load i32, i32* %c.addr, align 4
  %cmp4 = icmp slt i32 %4, 0
  br i1 %cmp4, label %if.then, label %if.end.113

if.then:                                          ; preds = %cond.end
  %5 = load i64, i64* %string.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %5, %call6
  br i1 %cmp7, label %if.then.9, label %if.else.48

if.then.9:                                        ; preds = %if.then
  %6 = load i8, i8* %multibyte, align 1
  %tobool10 = trunc i8 %6 to i1
  br i1 %tobool10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.then.9
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %8 = load i64, i64* %pos.addr, align 8
  %call12 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %7, i64 %8)
  store i64 %call12, i64* %pos_byte, align 8
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_13 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 39
  %10 = load i64, i64* %enable_multibyte_characters_13, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %10, %call14
  br i1 %cmp15, label %cond.false.19, label %cond.true.17

cond.true.17:                                     ; preds = %if.then.11
  %11 = load i64, i64* %pos_byte, align 8
  %call18 = call i32 @FETCH_MULTIBYTE_CHAR(i64 %11)
  br label %cond.end.30

cond.false.19:                                    ; preds = %if.then.11
  %12 = load i64, i64* %pos_byte, align 8
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 73
  %14 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %14, i32 0, i32 3
  %15 = load i64, i64* %gpt_byte, align 8
  %cmp20 = icmp sge i64 %12, %15
  br i1 %cmp20, label %cond.true.22, label %cond.false.24

cond.true.22:                                     ; preds = %cond.false.19
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text23 = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 73
  %17 = load %struct.buffer_text*, %struct.buffer_text** %text23, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %17, i32 0, i32 5
  %18 = load i64, i64* %gap_size, align 8
  br label %cond.end.25

cond.false.24:                                    ; preds = %cond.false.19
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.false.24, %cond.true.22
  %cond26 = phi i64 [ %18, %cond.true.22 ], [ 0, %cond.false.24 ]
  %19 = load i64, i64* %pos_byte, align 8
  %add = add nsw i64 %cond26, %19
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text27 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  %21 = load %struct.buffer_text*, %struct.buffer_text** %text27, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %21, i32 0, i32 0
  %22 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %add
  %add.ptr28 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %23 = load i8, i8* %add.ptr28, align 1
  %conv29 = zext i8 %23 to i32
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.end.25, %cond.true.17
  %cond31 = phi i32 [ %call18, %cond.true.17 ], [ %conv29, %cond.end.25 ]
  store i32 %cond31, i32* %c.addr, align 4
  br label %if.end

if.else:                                          ; preds = %if.then.9
  %24 = load i64, i64* %pos.addr, align 8
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text32 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 73
  %26 = load %struct.buffer_text*, %struct.buffer_text** %text32, align 8
  %gpt_byte33 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %26, i32 0, i32 3
  %27 = load i64, i64* %gpt_byte33, align 8
  %cmp34 = icmp sge i64 %24, %27
  br i1 %cmp34, label %cond.true.36, label %cond.false.39

cond.true.36:                                     ; preds = %if.else
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text37 = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 73
  %29 = load %struct.buffer_text*, %struct.buffer_text** %text37, align 8
  %gap_size38 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %29, i32 0, i32 5
  %30 = load i64, i64* %gap_size38, align 8
  br label %cond.end.40

cond.false.39:                                    ; preds = %if.else
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.39, %cond.true.36
  %cond41 = phi i64 [ %30, %cond.true.36 ], [ 0, %cond.false.39 ]
  %31 = load i64, i64* %pos.addr, align 8
  %add42 = add nsw i64 %cond41, %31
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text43 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 73
  %33 = load %struct.buffer_text*, %struct.buffer_text** %text43, align 8
  %beg44 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %33, i32 0, i32 0
  %34 = load i8*, i8** %beg44, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %34, i64 %add42
  %add.ptr46 = getelementptr inbounds i8, i8* %add.ptr45, i64 -1
  %35 = load i8, i8* %add.ptr46, align 1
  %conv47 = zext i8 %35 to i32
  store i32 %conv47, i32* %c.addr, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end.40, %cond.end.30
  br label %if.end.112

if.else.48:                                       ; preds = %if.then
  %36 = load i64, i64* %string.addr, align 8
  %call49 = call zeroext i1 @STRING_MULTIBYTE(i64 %36)
  %frombool50 = zext i1 %call49 to i8
  store i8 %frombool50, i8* %multibyte, align 1
  %37 = load i8, i8* %multibyte, align 1
  %tobool51 = trunc i8 %37 to i1
  br i1 %tobool51, label %if.then.52, label %if.else.107

if.then.52:                                       ; preds = %if.else.48
  %38 = load i64, i64* %string.addr, align 8
  %39 = load i64, i64* %pos.addr, align 8
  %call54 = call i64 @string_char_to_byte(i64 %38, i64 %39)
  store i64 %call54, i64* %pos_byte53, align 8
  %40 = load i64, i64* %string.addr, align 8
  %call55 = call i8* @SDATA(i64 %40)
  %41 = load i64, i64* %pos_byte53, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %call55, i64 %41
  store i8* %add.ptr56, i8** %str, align 8
  %42 = load i8*, i8** %str, align 8
  %arrayidx = getelementptr inbounds i8, i8* %42, i64 0
  %43 = load i8, i8* %arrayidx, align 1
  %conv57 = zext i8 %43 to i32
  %and = and i32 %conv57, 128
  %tobool58 = icmp ne i32 %and, 0
  br i1 %tobool58, label %cond.false.62, label %cond.true.59

cond.true.59:                                     ; preds = %if.then.52
  %44 = load i8*, i8** %str, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %45 to i32
  br label %cond.end.105

cond.false.62:                                    ; preds = %if.then.52
  %46 = load i8*, i8** %str, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %46, i64 0
  %47 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %47 to i32
  %and65 = and i32 %conv64, 32
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %cond.false.80, label %cond.true.67

cond.true.67:                                     ; preds = %cond.false.62
  %48 = load i8*, i8** %str, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %48, i64 0
  %49 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %49 to i32
  %and70 = and i32 %conv69, 31
  %shl = shl i32 %and70, 6
  %50 = load i8*, i8** %str, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %50, i64 1
  %51 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %51 to i32
  %and73 = and i32 %conv72, 63
  %or = or i32 %shl, %and73
  %52 = load i8*, i8** %str, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %52, i64 0
  %53 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %53 to i32
  %cmp76 = icmp slt i32 %conv75, 194
  %cond78 = select i1 %cmp76, i32 4194176, i32 0
  %add79 = add nsw i32 %or, %cond78
  br label %cond.end.103

cond.false.80:                                    ; preds = %cond.false.62
  %54 = load i8*, i8** %str, align 8
  %arrayidx81 = getelementptr inbounds i8, i8* %54, i64 0
  %55 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %55 to i32
  %and83 = and i32 %conv82, 16
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %cond.false.99, label %cond.true.85

cond.true.85:                                     ; preds = %cond.false.80
  %56 = load i8*, i8** %str, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %56, i64 0
  %57 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %57 to i32
  %and88 = and i32 %conv87, 15
  %shl89 = shl i32 %and88, 12
  %58 = load i8*, i8** %str, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %58, i64 1
  %59 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %59 to i32
  %and92 = and i32 %conv91, 63
  %shl93 = shl i32 %and92, 6
  %or94 = or i32 %shl89, %shl93
  %60 = load i8*, i8** %str, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %60, i64 2
  %61 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %61 to i32
  %and97 = and i32 %conv96, 63
  %or98 = or i32 %or94, %and97
  br label %cond.end.101

cond.false.99:                                    ; preds = %cond.false.80
  %62 = load i8*, i8** %str, align 8
  %call100 = call i32 @string_char(i8* %62, i8** null, i32* null)
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.false.99, %cond.true.85
  %cond102 = phi i32 [ %or98, %cond.true.85 ], [ %call100, %cond.false.99 ]
  br label %cond.end.103

cond.end.103:                                     ; preds = %cond.end.101, %cond.true.67
  %cond104 = phi i32 [ %add79, %cond.true.67 ], [ %cond102, %cond.end.101 ]
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.end.103, %cond.true.59
  %cond106 = phi i32 [ %conv61, %cond.true.59 ], [ %cond104, %cond.end.103 ]
  store i32 %cond106, i32* %c.addr, align 4
  br label %if.end.111

if.else.107:                                      ; preds = %if.else.48
  %63 = load i64, i64* %pos.addr, align 8
  %64 = load i64, i64* %string.addr, align 8
  %call108 = call i8* @SDATA(i64 %64)
  %arrayidx109 = getelementptr inbounds i8, i8* %call108, i64 %63
  %65 = load i8, i8* %arrayidx109, align 1
  %conv110 = zext i8 %65 to i32
  store i32 %conv110, i32* %c.addr, align 4
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.107, %cond.end.105
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.end
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %cond.end
  %66 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 1
  %67 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %67, 5
  %68 = inttoptr i64 %sub to i8*
  %69 = bitcast i8* %68 to %struct.frame*
  store %struct.frame* %69, %struct.frame** %f, align 8
  %70 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %70, i32 0, i32 26
  %71 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %71, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp114 = icmp eq i32 %bf.cast, 2
  br i1 %cmp114, label %if.end.118, label %if.then.116

if.then.116:                                      ; preds = %if.end.113
  %call117 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call117, i64* %retval
  br label %return

if.end.118:                                       ; preds = %if.end.113
  %72 = load %struct.face*, %struct.face** %face.addr, align 8
  %tobool119 = icmp ne %struct.face* %72, null
  br i1 %tobool119, label %if.end.148, label %if.then.120

if.then.120:                                      ; preds = %if.end.118
  %73 = load i64, i64* %string.addr, align 8
  %call121 = call zeroext i1 @STRINGP(i64 %73)
  br i1 %call121, label %if.then.122, label %if.else.124

if.then.122:                                      ; preds = %if.then.120
  %74 = load %struct.window*, %struct.window** %w.addr, align 8
  %75 = load i64, i64* %string.addr, align 8
  %76 = load i64, i64* %pos.addr, align 8
  %call123 = call i32 @face_at_string_position(%struct.window* %74, i64 %75, i64 %76, i64 0, i64* %endptr, i32 0, i1 zeroext false)
  store i32 %call123, i32* %face_id, align 4
  br label %if.end.127

if.else.124:                                      ; preds = %if.then.120
  %77 = load %struct.window*, %struct.window** %w.addr, align 8
  %78 = load i64, i64* %pos.addr, align 8
  %79 = load i64, i64* %pos.addr, align 8
  %add125 = add nsw i64 %79, 100
  %call126 = call i32 @face_at_buffer_position(%struct.window* %77, i64 %78, i64* %endptr, i64 %add125, i1 zeroext false, i32 -1)
  store i32 %call126, i32* %face_id, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %if.else.124, %if.then.122
  br i1 true, label %cond.true.128, label %cond.false.133

cond.true.128:                                    ; preds = %if.end.127
  %80 = load i32, i32* %face_id, align 4
  %add129 = add i32 %80, 0
  %81 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 20
  %82 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %82, i32 0, i32 4
  %83 = load i32, i32* %used, align 4
  %add130 = add i32 %83, 0
  %cmp131 = icmp ult i32 %add129, %add130
  br i1 %cmp131, label %cond.true.142, label %cond.false.145

cond.false.133:                                   ; preds = %if.end.127
  %84 = load i32, i32* %face_id, align 4
  %conv134 = sext i32 %84 to i64
  %add135 = add i64 %conv134, 0
  %85 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache136 = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 20
  %86 = load %struct.face_cache*, %struct.face_cache** %face_cache136, align 8
  %used137 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %86, i32 0, i32 4
  %87 = load i32, i32* %used137, align 4
  %conv138 = sext i32 %87 to i64
  %add139 = add i64 %conv138, 0
  %cmp140 = icmp ult i64 %add135, %add139
  br i1 %cmp140, label %cond.true.142, label %cond.false.145

cond.true.142:                                    ; preds = %cond.false.133, %cond.true.128
  %88 = load i32, i32* %face_id, align 4
  %idxprom = sext i32 %88 to i64
  %89 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache143 = getelementptr inbounds %struct.frame, %struct.frame* %89, i32 0, i32 20
  %90 = load %struct.face_cache*, %struct.face_cache** %face_cache143, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %90, i32 0, i32 2
  %91 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx144 = getelementptr inbounds %struct.face*, %struct.face** %91, i64 %idxprom
  %92 = load %struct.face*, %struct.face** %arrayidx144, align 8
  br label %cond.end.146

cond.false.145:                                   ; preds = %cond.false.133, %cond.true.128
  br label %cond.end.146

cond.end.146:                                     ; preds = %cond.false.145, %cond.true.142
  %cond147 = phi %struct.face* [ %92, %cond.true.142 ], [ null, %cond.false.145 ]
  store %struct.face* %cond147, %struct.face** %face.addr, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %cond.end.146, %if.end.118
  %93 = load i8, i8* %multibyte, align 1
  %tobool149 = trunc i8 %93 to i1
  br i1 %tobool149, label %if.then.150, label %if.end.177

if.then.150:                                      ; preds = %if.end.148
  %94 = load %struct.frame*, %struct.frame** %f, align 8
  %95 = load %struct.face*, %struct.face** %face.addr, align 8
  %96 = load i32, i32* %c.addr, align 4
  %97 = load i64, i64* %pos.addr, align 8
  %98 = load i64, i64* %string.addr, align 8
  %call152 = call i32 @face_for_char(%struct.frame* %94, %struct.face* %95, i32 %96, i64 %97, i64 %98)
  store i32 %call152, i32* %face_id151, align 4
  br i1 true, label %cond.true.153, label %cond.false.160

cond.true.153:                                    ; preds = %if.then.150
  %99 = load i32, i32* %face_id151, align 4
  %add154 = add i32 %99, 0
  %100 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache155 = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 20
  %101 = load %struct.face_cache*, %struct.face_cache** %face_cache155, align 8
  %used156 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %101, i32 0, i32 4
  %102 = load i32, i32* %used156, align 4
  %add157 = add i32 %102, 0
  %cmp158 = icmp ult i32 %add154, %add157
  br i1 %cmp158, label %cond.true.169, label %cond.false.174

cond.false.160:                                   ; preds = %if.then.150
  %103 = load i32, i32* %face_id151, align 4
  %conv161 = sext i32 %103 to i64
  %add162 = add i64 %conv161, 0
  %104 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache163 = getelementptr inbounds %struct.frame, %struct.frame* %104, i32 0, i32 20
  %105 = load %struct.face_cache*, %struct.face_cache** %face_cache163, align 8
  %used164 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %105, i32 0, i32 4
  %106 = load i32, i32* %used164, align 4
  %conv165 = sext i32 %106 to i64
  %add166 = add i64 %conv165, 0
  %cmp167 = icmp ult i64 %add162, %add166
  br i1 %cmp167, label %cond.true.169, label %cond.false.174

cond.true.169:                                    ; preds = %cond.false.160, %cond.true.153
  %107 = load i32, i32* %face_id151, align 4
  %idxprom170 = sext i32 %107 to i64
  %108 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache171 = getelementptr inbounds %struct.frame, %struct.frame* %108, i32 0, i32 20
  %109 = load %struct.face_cache*, %struct.face_cache** %face_cache171, align 8
  %faces_by_id172 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %109, i32 0, i32 2
  %110 = load %struct.face**, %struct.face*** %faces_by_id172, align 8
  %arrayidx173 = getelementptr inbounds %struct.face*, %struct.face** %110, i64 %idxprom170
  %111 = load %struct.face*, %struct.face** %arrayidx173, align 8
  br label %cond.end.175

cond.false.174:                                   ; preds = %cond.false.160, %cond.true.153
  br label %cond.end.175

cond.end.175:                                     ; preds = %cond.false.174, %cond.true.169
  %cond176 = phi %struct.face* [ %111, %cond.true.169 ], [ null, %cond.false.174 ]
  store %struct.face* %cond176, %struct.face** %face.addr, align 8
  br label %if.end.177

if.end.177:                                       ; preds = %cond.end.175, %if.end.148
  %112 = load %struct.face*, %struct.face** %face.addr, align 8
  %font = getelementptr inbounds %struct.face, %struct.face* %112, i32 0, i32 10
  %113 = load %struct.font*, %struct.font** %font, align 8
  %tobool178 = icmp ne %struct.font* %113, null
  br i1 %tobool178, label %if.end.181, label %if.then.179

if.then.179:                                      ; preds = %if.end.177
  %call180 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call180, i64* %retval
  br label %return

if.end.181:                                       ; preds = %if.end.177
  %114 = load %struct.face*, %struct.face** %face.addr, align 8
  %font182 = getelementptr inbounds %struct.face, %struct.face* %114, i32 0, i32 10
  %115 = load %struct.font*, %struct.font** %font182, align 8
  %116 = bitcast %struct.font* %115 to i8*
  %call183 = call i64 @make_lisp_ptr(i8* %116, i32 5)
  store i64 %call183, i64* %font_object, align 8
  %117 = load i64, i64* %font_object, align 8
  store i64 %117, i64* %retval
  br label %return

return:                                           ; preds = %if.end.181, %if.then.179, %if.then.116
  %118 = load i64, i64* %retval
  ret i64 %118
}

; Function Attrs: nounwind uwtable
define i64 @Fframe_font_cache(i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %call = call %struct.frame* @decode_live_frame(i64 %0)
  store %struct.frame* %call, %struct.frame** %f, align 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 44
  %5 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %name_list_element = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 4
  %6 = load i64, i64* %name_list_element, align 8
  store i64 %6, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i64, i64* %retval
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define i64 @Ffont_info(i64 %name, i64 %frame) #0 {
entry:
  %retval = alloca i64, align 8
  %name.addr = alloca i64, align 8
  %frame.addr = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %font = alloca %struct.font*, align 8
  %info = alloca i64, align 8
  %font_object = alloca i64, align 8
  %fontset = alloca i32, align 4
  %face = alloca %struct.face*, align 8
  %entity = alloca i64, align 8
  store i64 %name, i64* %name.addr, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %0 = load i64, i64* %name.addr, align 8
  %call = call zeroext i1 @FONTP(i64 %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %name.addr, align 8
  call void @CHECK_STRING(i64 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %frame.addr, align 8
  %call1 = call %struct.frame* @decode_window_system_frame(i64 %2)
  store %struct.frame* %call1, %struct.frame** %f, align 8
  %3 = load i64, i64* %name.addr, align 8
  %call2 = call zeroext i1 @STRINGP(i64 %3)
  br i1 %call2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %4 = load i64, i64* %name.addr, align 8
  %call4 = call i32 @fs_query_fontset(i64 %4, i32 0)
  store i32 %call4, i32* %fontset, align 4
  %5 = load i32, i32* %fontset, align 4
  %cmp = icmp sge i32 %5, 0
  br i1 %cmp, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.then.3
  %6 = load i32, i32* %fontset, align 4
  %call6 = call i64 @fontset_ascii(i32 %6)
  store i64 %call6, i64* %name.addr, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %if.then.3
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %8 = load i64, i64* %name.addr, align 8
  %call8 = call i64 @font_open_by_name(%struct.frame* %7, i64 %8)
  store i64 %call8, i64* %font_object, align 8
  br label %if.end.37

if.else:                                          ; preds = %if.end
  %9 = load i64, i64* %name.addr, align 8
  %call9 = call zeroext i1 @FONT_OBJECT_P(i64 %9)
  br i1 %call9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %if.else
  %10 = load i64, i64* %name.addr, align 8
  store i64 %10, i64* %font_object, align 8
  br label %if.end.36

if.else.11:                                       ; preds = %if.else
  %11 = load i64, i64* %name.addr, align 8
  %call12 = call zeroext i1 @FONT_ENTITY_P(i64 %11)
  br i1 %call12, label %if.then.13, label %if.else.15

if.then.13:                                       ; preds = %if.else.11
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %13 = load i64, i64* %name.addr, align 8
  %call14 = call i64 @font_open_entity(%struct.frame* %12, i64 %13, i32 0)
  store i64 %call14, i64* %font_object, align 8
  br label %if.end.35

if.else.15:                                       ; preds = %if.else.11
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.15
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 20
  %15 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %15, i32 0, i32 4
  %16 = load i32, i32* %used, align 4
  %add = add i32 %16, 0
  %cmp16 = icmp ult i32 0, %add
  br i1 %cmp16, label %cond.true.22, label %cond.false.24

cond.false:                                       ; preds = %if.else.15
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache17 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 20
  %18 = load %struct.face_cache*, %struct.face_cache** %face_cache17, align 8
  %used18 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %18, i32 0, i32 4
  %19 = load i32, i32* %used18, align 4
  %conv = sext i32 %19 to i64
  %add19 = add i64 %conv, 0
  %cmp20 = icmp ult i64 0, %add19
  br i1 %cmp20, label %cond.true.22, label %cond.false.24

cond.true.22:                                     ; preds = %cond.false, %cond.true
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache23 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 20
  %21 = load %struct.face_cache*, %struct.face_cache** %face_cache23, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %21, i32 0, i32 2
  %22 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %22, i64 0
  %23 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end

cond.false.24:                                    ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.24, %cond.true.22
  %cond = phi %struct.face* [ %23, %cond.true.22 ], [ null, %cond.false.24 ]
  store %struct.face* %cond, %struct.face** %face, align 8
  %24 = load %struct.frame*, %struct.frame** %f, align 8
  %25 = load %struct.face*, %struct.face** %face, align 8
  %lface = getelementptr inbounds %struct.face, %struct.face* %25, i32 0, i32 0
  %arraydecay = getelementptr inbounds [19 x i64], [19 x i64]* %lface, i32 0, i32 0
  %26 = load i64, i64* %name.addr, align 8
  %call25 = call i64 @font_matching_entity(%struct.frame* %24, i64* %arraydecay, i64 %26)
  store i64 %call25, i64* %entity, align 8
  %27 = load i64, i64* %entity, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp27 = icmp eq i64 %27, %call26
  br i1 %cmp27, label %cond.false.31, label %cond.true.29

cond.true.29:                                     ; preds = %cond.end
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  %29 = load i64, i64* %entity, align 8
  %call30 = call i64 @font_open_entity(%struct.frame* %28, i64 %29, i32 0)
  br label %cond.end.33

cond.false.31:                                    ; preds = %cond.end
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.31, %cond.true.29
  %cond34 = phi i64 [ %call30, %cond.true.29 ], [ %call32, %cond.false.31 ]
  store i64 %cond34, i64* %font_object, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %cond.end.33, %if.then.13
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then.10
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end.7
  %30 = load i64, i64* %font_object, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp39 = icmp eq i64 %30, %call38
  br i1 %cmp39, label %if.then.41, label %if.end.43

if.then.41:                                       ; preds = %if.end.37
  %call42 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call42, i64* %retval
  br label %return

if.end.43:                                        ; preds = %if.end.37
  %31 = load i64, i64* %font_object, align 8
  %call44 = call %struct.font* @XFONT_OBJECT(i64 %31)
  store %struct.font* %call44, %struct.font** %font, align 8
  %call45 = call i64 @make_uninit_vector(i64 14)
  store i64 %call45, i64* %info, align 8
  %32 = load i64, i64* %info, align 8
  %33 = load i64, i64* %font_object, align 8
  %call46 = call i64 @AREF(i64 %33, i64 14)
  call void @ASET(i64 %32, i64 0, i64 %call46)
  %34 = load i64, i64* %info, align 8
  %35 = load i64, i64* %font_object, align 8
  %call47 = call i64 @AREF(i64 %35, i64 15)
  call void @ASET(i64 %34, i64 1, i64 %call47)
  %36 = load i64, i64* %info, align 8
  %37 = load %struct.font*, %struct.font** %font, align 8
  %pixel_size = getelementptr inbounds %struct.font, %struct.font* %37, i32 0, i32 4
  %38 = load i32, i32* %pixel_size, align 4
  %conv48 = sext i32 %38 to i64
  %shl = shl i64 %conv48, 2
  %add49 = add i64 %shl, 2
  call void @ASET(i64 %36, i64 2, i64 %add49)
  %39 = load i64, i64* %info, align 8
  %40 = load %struct.font*, %struct.font** %font, align 8
  %height = getelementptr inbounds %struct.font, %struct.font* %40, i32 0, i32 5
  %41 = load i32, i32* %height, align 4
  %conv50 = sext i32 %41 to i64
  %shl51 = shl i64 %conv50, 2
  %add52 = add i64 %shl51, 2
  call void @ASET(i64 %39, i64 3, i64 %add52)
  %42 = load i64, i64* %info, align 8
  %43 = load %struct.font*, %struct.font** %font, align 8
  %baseline_offset = getelementptr inbounds %struct.font, %struct.font* %43, i32 0, i32 13
  %44 = load i32, i32* %baseline_offset, align 4
  %conv53 = sext i32 %44 to i64
  %shl54 = shl i64 %conv53, 2
  %add55 = add i64 %shl54, 2
  call void @ASET(i64 %42, i64 4, i64 %add55)
  %45 = load i64, i64* %info, align 8
  %46 = load %struct.font*, %struct.font** %font, align 8
  %relative_compose = getelementptr inbounds %struct.font, %struct.font* %46, i32 0, i32 14
  %47 = load i32, i32* %relative_compose, align 4
  %conv56 = sext i32 %47 to i64
  %shl57 = shl i64 %conv56, 2
  %add58 = add i64 %shl57, 2
  call void @ASET(i64 %45, i64 5, i64 %add58)
  %48 = load i64, i64* %info, align 8
  %49 = load %struct.font*, %struct.font** %font, align 8
  %default_ascent = getelementptr inbounds %struct.font, %struct.font* %49, i32 0, i32 15
  %50 = load i32, i32* %default_ascent, align 4
  %conv59 = sext i32 %50 to i64
  %shl60 = shl i64 %conv59, 2
  %add61 = add i64 %shl60, 2
  call void @ASET(i64 %48, i64 6, i64 %add61)
  %51 = load i64, i64* %info, align 8
  %52 = load %struct.font*, %struct.font** %font, align 8
  %max_width = getelementptr inbounds %struct.font, %struct.font* %52, i32 0, i32 3
  %53 = load i32, i32* %max_width, align 4
  %conv62 = sext i32 %53 to i64
  %shl63 = shl i64 %conv62, 2
  %add64 = add i64 %shl63, 2
  call void @ASET(i64 %51, i64 7, i64 %add64)
  %54 = load i64, i64* %info, align 8
  %55 = load %struct.font*, %struct.font** %font, align 8
  %ascent = getelementptr inbounds %struct.font, %struct.font* %55, i32 0, i32 8
  %56 = load i32, i32* %ascent, align 4
  %conv65 = sext i32 %56 to i64
  %shl66 = shl i64 %conv65, 2
  %add67 = add i64 %shl66, 2
  call void @ASET(i64 %54, i64 8, i64 %add67)
  %57 = load i64, i64* %info, align 8
  %58 = load %struct.font*, %struct.font** %font, align 8
  %descent = getelementptr inbounds %struct.font, %struct.font* %58, i32 0, i32 9
  %59 = load i32, i32* %descent, align 4
  %conv68 = sext i32 %59 to i64
  %shl69 = shl i64 %conv68, 2
  %add70 = add i64 %shl69, 2
  call void @ASET(i64 %57, i64 9, i64 %add70)
  %60 = load i64, i64* %info, align 8
  %61 = load %struct.font*, %struct.font** %font, align 8
  %space_width = getelementptr inbounds %struct.font, %struct.font* %61, i32 0, i32 6
  %62 = load i32, i32* %space_width, align 4
  %conv71 = sext i32 %62 to i64
  %shl72 = shl i64 %conv71, 2
  %add73 = add i64 %shl72, 2
  call void @ASET(i64 %60, i64 10, i64 %add73)
  %63 = load i64, i64* %info, align 8
  %64 = load %struct.font*, %struct.font** %font, align 8
  %average_width = getelementptr inbounds %struct.font, %struct.font* %64, i32 0, i32 7
  %65 = load i32, i32* %average_width, align 4
  %conv74 = sext i32 %65 to i64
  %shl75 = shl i64 %conv74, 2
  %add76 = add i64 %shl75, 2
  call void @ASET(i64 %63, i64 11, i64 %add76)
  %66 = load i64, i64* %info, align 8
  %67 = load i64, i64* %font_object, align 8
  %call77 = call i64 @AREF(i64 %67, i64 16)
  call void @ASET(i64 %66, i64 12, i64 %call77)
  %68 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %68, i32 0, i32 18
  %69 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %otf_capability = getelementptr inbounds %struct.font_driver, %struct.font_driver* %69, i32 0, i32 18
  %70 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability, align 8
  %tobool = icmp ne i64 (%struct.font*)* %70, null
  br i1 %tobool, label %if.then.78, label %if.else.84

if.then.78:                                       ; preds = %if.end.43
  %71 = load i64, i64* %info, align 8
  %call79 = call i64 @builtin_lisp_symbol(i32 721)
  %72 = load %struct.font*, %struct.font** %font, align 8
  %driver80 = getelementptr inbounds %struct.font, %struct.font* %72, i32 0, i32 18
  %73 = load %struct.font_driver*, %struct.font_driver** %driver80, align 8
  %otf_capability81 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %73, i32 0, i32 18
  %74 = load i64 (%struct.font*)*, i64 (%struct.font*)** %otf_capability81, align 8
  %75 = load %struct.font*, %struct.font** %font, align 8
  %call82 = call i64 %74(%struct.font* %75)
  %call83 = call i64 @Fcons(i64 %call79, i64 %call82)
  call void @ASET(i64 %71, i64 13, i64 %call83)
  br label %if.end.86

if.else.84:                                       ; preds = %if.end.43
  %76 = load i64, i64* %info, align 8
  %call85 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %76, i64 13, i64 %call85)
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.84, %if.then.78
  %77 = load i64, i64* %info, align 8
  store i64 %77, i64* %retval
  br label %return

return:                                           ; preds = %if.end.86, %if.then.41
  %78 = load i64, i64* %retval
  ret i64 %78
}

declare %struct.frame* @decode_window_system_frame(i64) #1

declare i64 @Fcopy_sequence(i64) #1

declare void @XSETCAR(i64, i64) #1

declare i64 @list3(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define void @font_deferred_log(i8* %action, i64 %arg, i64 %result) #0 {
entry:
  %action.addr = alloca i8*, align 8
  %arg.addr = alloca i64, align 8
  %result.addr = alloca i64, align 8
  store i8* %action, i8** %action.addr, align 8
  store i64 %arg, i64* %arg.addr, align 8
  store i64 %result, i64* %result.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* @Vfont_log_deferred, align 8
  %2 = load i8*, i8** %action.addr, align 8
  %call1 = call i64 @build_string(i8* %2)
  call void @ASET(i64 %1, i64 0, i64 %call1)
  %3 = load i64, i64* @Vfont_log_deferred, align 8
  %4 = load i64, i64* %arg.addr, align 8
  call void @ASET(i64 %3, i64 1, i64 %4)
  %5 = load i64, i64* @Vfont_log_deferred, align 8
  %6 = load i64, i64* %result.addr, align 8
  call void @ASET(i64 %5, i64 2, i64 %6)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare i64 @build_string(i8*) #1

; Function Attrs: nounwind uwtable
define void @syms_of_font() #0 {
entry:
  store i32 0, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 0), align 4
  store i32 2, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 6), align 4
  store i32 9, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 5), align 4
  store i32 16, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 8), align 4
  store i32 23, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @sort_shift_bits, i32 0, i64 7), align 4
  call void @staticpro(i64* @font_charset_alist)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* @font_charset_alist, align 8
  call void @staticpro(i64* @scratch_font_spec)
  %call1 = call i64 @Ffont_spec(i64 0, i64* null)
  store i64 %call1, i64* @scratch_font_spec, align 8
  call void @staticpro(i64* @scratch_font_prefer)
  %call2 = call i64 @Ffont_spec(i64 0, i64* null)
  store i64 %call2, i64* @scratch_font_prefer, align 8
  call void @staticpro(i64* @Vfont_log_deferred)
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %call4 = call i64 @Fmake_vector(i64 14, i64 %call3)
  store i64 %call4, i64* @Vfont_log_deferred, align 8
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfontp to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* }* @Sfont_spec to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_get to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_face_attributes to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_put to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Slist_fonts to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_family_list to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfind_font to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_xlfd_name to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* @Sclear_font_cache)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_shape_gstring to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_variation_glyphs to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sinternal_char_font to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sopen_font to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sclose_font to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Squery_font to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_get_glyphs to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_match_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_at to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sframe_font_cache to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfont_info to %struct.Lisp_Subr*))
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_font.o_fwd, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 102))
  br label %do.end

do.end:                                           ; preds = %do.body
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call5, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 102), align 8
  br label %do.body.6

do.body.6:                                        ; preds = %do.end
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_font.o_fwd.37, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.38, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 106))
  br label %do.end.7

do.end.7:                                         ; preds = %do.body.6
  %call8 = call i64 @build_style_table(%struct.table_entry* getelementptr inbounds ([10 x %struct.table_entry], [10 x %struct.table_entry]* @weight_table, i32 0, i32 0), i32 10)
  store i64 %call8, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 106), align 8
  %call9 = call i64 @intern_c_string(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.38, i32 0, i32 0))
  %sub = sub nsw i64 %call9, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub
  %0 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  %1 = bitcast %struct.Lisp_Symbol* %0 to i16*
  %bf.load = load i16, i16* %1, align 8
  %bf.clear = and i16 %bf.load, -49
  %bf.set = or i16 %bf.clear, 16
  store i16 %bf.set, i16* %1, align 8
  br label %do.body.10

do.body.10:                                       ; preds = %do.end.7
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_font.o_fwd.39, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 105))
  br label %do.end.11

do.end.11:                                        ; preds = %do.body.10
  %call12 = call i64 @build_style_table(%struct.table_entry* getelementptr inbounds ([5 x %struct.table_entry], [5 x %struct.table_entry]* @slant_table, i32 0, i32 0), i32 5)
  store i64 %call12, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 105), align 8
  %call13 = call i64 @intern_c_string(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0))
  %sub14 = sub nsw i64 %call13, 0
  %add.ptr15 = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub14
  %2 = bitcast i8* %add.ptr15 to %struct.Lisp_Symbol*
  %3 = bitcast %struct.Lisp_Symbol* %2 to i16*
  %bf.load16 = load i16, i16* %3, align 8
  %bf.clear17 = and i16 %bf.load16, -49
  %bf.set18 = or i16 %bf.clear17, 16
  store i16 %bf.set18, i16* %3, align 8
  br label %do.body.19

do.body.19:                                       ; preds = %do.end.11
  call void @defvar_lisp_nopro(%struct.Lisp_Objfwd* @syms_of_font.o_fwd.41, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 107))
  br label %do.end.20

do.end.20:                                        ; preds = %do.body.19
  %call21 = call i64 @build_style_table(%struct.table_entry* getelementptr inbounds ([9 x %struct.table_entry], [9 x %struct.table_entry]* @width_table, i32 0, i32 0), i32 9)
  store i64 %call21, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 107), align 8
  %call22 = call i64 @intern_c_string(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i32 0, i32 0))
  %sub23 = sub nsw i64 %call22, 0
  %add.ptr24 = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub23
  %4 = bitcast i8* %add.ptr24 to %struct.Lisp_Symbol*
  %5 = bitcast %struct.Lisp_Symbol* %4 to i16*
  %bf.load25 = load i16, i16* %5, align 8
  %bf.clear26 = and i16 %bf.load25, -49
  %bf.set27 = or i16 %bf.clear26, 16
  store i16 %bf.set27, i16* %5, align 8
  call void @staticpro(i64* @font_style_table)
  %call28 = call i64 @make_uninit_vector(i64 3)
  store i64 %call28, i64* @font_style_table, align 8
  %6 = load i64, i64* @font_style_table, align 8
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 106), align 8
  call void @ASET(i64 %6, i64 0, i64 %7)
  %8 = load i64, i64* @font_style_table, align 8
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 105), align 8
  call void @ASET(i64 %8, i64 1, i64 %9)
  %10 = load i64, i64* @font_style_table, align 8
  %11 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 107), align 8
  call void @ASET(i64 %10, i64 2, i64 %11)
  br label %do.body.29

do.body.29:                                       ; preds = %do.end.20
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_font.o_fwd.43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104))
  br label %do.end.30

do.end.30:                                        ; preds = %do.body.29
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call31, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  call void @syms_of_ftfont()
  call void @syms_of_xfont()
  call void @syms_of_ftxfont()
  call void @syms_of_xftfont()
  ret void
}

declare void @staticpro(i64*) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defvar_lisp_nopro(%struct.Lisp_Objfwd*, i8*, i64*) #1

; Function Attrs: nounwind uwtable
define internal i64 @build_style_table(%struct.table_entry* %entry1, i32 %nelement) #0 {
entry:
  %entry.addr = alloca %struct.table_entry*, align 8
  %nelement.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %table = alloca i64, align 8
  %elt = alloca i64, align 8
  store %struct.table_entry* %entry1, %struct.table_entry** %entry.addr, align 8
  store i32 %nelement, i32* %nelement.addr, align 4
  %0 = load i32, i32* %nelement.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call i64 @make_uninit_vector(i64 %conv)
  store i64 %call, i64* %table, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.36, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nelement.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end.38

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %4 to i64
  %5 = load %struct.table_entry*, %struct.table_entry** %entry.addr, align 8
  %arrayidx = getelementptr inbounds %struct.table_entry, %struct.table_entry* %5, i64 %idxprom4
  %names = getelementptr inbounds %struct.table_entry, %struct.table_entry* %arrayidx, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [5 x i8*], [5 x i8*]* %names, i32 0, i64 %idxprom
  %6 = load i8*, i8** %arrayidx5, align 8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %for.body.6, label %for.end

for.body.6:                                       ; preds = %for.cond.3
  br label %for.inc

for.inc:                                          ; preds = %for.body.6
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  %8 = load i32, i32* %j, align 4
  %add = add nsw i32 %8, 1
  %conv7 = sext i32 %add to i64
  %shl = shl i64 %conv7, 2
  %add8 = add i64 %shl, 2
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %call10 = call i64 @Fmake_vector(i64 %add8, i64 %call9)
  store i64 %call10, i64* %elt, align 8
  %9 = load i64, i64* %elt, align 8
  %10 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %10 to i64
  %11 = load %struct.table_entry*, %struct.table_entry** %entry.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct.table_entry, %struct.table_entry* %11, i64 %idxprom11
  %numeric = getelementptr inbounds %struct.table_entry, %struct.table_entry* %arrayidx12, i32 0, i32 0
  %12 = load i32, i32* %numeric, align 4
  %conv13 = sext i32 %12 to i64
  %shl14 = shl i64 %conv13, 2
  %add15 = add i64 %shl14, 2
  call void @ASET(i64 %9, i64 0, i64 %add15)
  store i32 0, i32* %j, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.32, %for.end
  %13 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %13 to i64
  %14 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %14 to i64
  %15 = load %struct.table_entry*, %struct.table_entry** %entry.addr, align 8
  %arrayidx19 = getelementptr inbounds %struct.table_entry, %struct.table_entry* %15, i64 %idxprom18
  %names20 = getelementptr inbounds %struct.table_entry, %struct.table_entry* %arrayidx19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* %names20, i32 0, i64 %idxprom17
  %16 = load i8*, i8** %arrayidx21, align 8
  %tobool22 = icmp ne i8* %16, null
  br i1 %tobool22, label %for.body.23, label %for.end.34

for.body.23:                                      ; preds = %for.cond.16
  %17 = load i64, i64* %elt, align 8
  %18 = load i32, i32* %j, align 4
  %add24 = add nsw i32 %18, 1
  %conv25 = sext i32 %add24 to i64
  %19 = load i32, i32* %j, align 4
  %idxprom26 = sext i32 %19 to i64
  %20 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %20 to i64
  %21 = load %struct.table_entry*, %struct.table_entry** %entry.addr, align 8
  %arrayidx28 = getelementptr inbounds %struct.table_entry, %struct.table_entry* %21, i64 %idxprom27
  %names29 = getelementptr inbounds %struct.table_entry, %struct.table_entry* %arrayidx28, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [5 x i8*], [5 x i8*]* %names29, i32 0, i64 %idxprom26
  %22 = load i8*, i8** %arrayidx30, align 8
  %call31 = call i64 @intern_c_string(i8* %22)
  call void @ASET(i64 %17, i64 %conv25, i64 %call31)
  br label %for.inc.32

for.inc.32:                                       ; preds = %for.body.23
  %23 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %23, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond.16

for.end.34:                                       ; preds = %for.cond.16
  %24 = load i64, i64* %table, align 8
  %25 = load i32, i32* %i, align 4
  %conv35 = sext i32 %25 to i64
  %26 = load i64, i64* %elt, align 8
  call void @ASET(i64 %24, i64 %conv35, i64 %26)
  br label %for.inc.36

for.inc.36:                                       ; preds = %for.end.34
  %27 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %27, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end.38:                                       ; preds = %for.cond
  %28 = load i64, i64* %table, align 8
  ret i64 %28
}

declare i64 @intern_c_string(i8*) #1

declare void @syms_of_ftfont() #1

declare void @syms_of_xfont() #1

declare void @syms_of_ftxfont() #1

declare void @syms_of_xftfont() #1

; Function Attrs: nounwind uwtable
define void @init_font() #0 {
entry:
  %call = call i8* @egetenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.45, i32 0, i32 0))
  %tobool = icmp ne i8* %call, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  store i64 %cond, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 104), align 8
  ret void
}

declare i8* @egetenv(i8*) #1

declare void @memclear(i8*, i64) #1

declare i64 @Fnumber_to_string(i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @font_check_otf_features(i64 %script, i64 %langsys, i64 %features, i64 %table) #0 {
entry:
  %retval = alloca i1, align 1
  %script.addr = alloca i64, align 8
  %langsys.addr = alloca i64, align 8
  %features.addr = alloca i64, align 8
  %table.addr = alloca i64, align 8
  %val = alloca i64, align 8
  %negative = alloca i8, align 1
  store i64 %script, i64* %script.addr, align 8
  store i64 %langsys, i64* %langsys.addr, align 8
  store i64 %features, i64* %features.addr, align 8
  store i64 %table, i64* %table.addr, align 8
  %0 = load i64, i64* %script.addr, align 8
  %1 = load i64, i64* %table.addr, align 8
  %call = call i64 @assq_no_quit(i64 %0, i64 %1)
  store i64 %call, i64* %table.addr, align 8
  %2 = load i64, i64* %table.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %table.addr, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %6 = load i64, i64* %cdr, align 8
  store i64 %6, i64* %table.addr, align 8
  %7 = load i64, i64* %langsys.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %7, %call2
  br i1 %cmp3, label %if.else, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %8 = load i64, i64* %langsys.addr, align 8
  %9 = load i64, i64* %table.addr, align 8
  %call5 = call i64 @assq_no_quit(i64 %8, i64 %9)
  store i64 %call5, i64* %table.addr, align 8
  %10 = load i64, i64* %table.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %10, %call6
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.4
  store i1 false, i1* %retval
  br label %return

if.end.9:                                         ; preds = %if.then.4
  br label %if.end.18

if.else:                                          ; preds = %if.end
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %11 = load i64, i64* %table.addr, align 8
  %call11 = call i64 @assq_no_quit(i64 %call10, i64 %11)
  store i64 %call11, i64* %val, align 8
  %12 = load i64, i64* %val, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %12, %call12
  br i1 %cmp13, label %if.then.14, label %if.else.16

if.then.14:                                       ; preds = %if.else
  %13 = load i64, i64* %table.addr, align 8
  %sub15 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub15 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 0
  %16 = load i64, i64* %car, align 8
  store i64 %16, i64* %table.addr, align 8
  br label %if.end.17

if.else.16:                                       ; preds = %if.else
  %17 = load i64, i64* %val, align 8
  store i64 %17, i64* %table.addr, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.16, %if.then.14
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end.9
  %18 = load i64, i64* %table.addr, align 8
  %sub19 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub19 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %u20 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 1
  %cdr21 = bitcast %union.anon.10* %u20 to i64*
  %21 = load i64, i64* %cdr21, align 8
  store i64 %21, i64* %table.addr, align 8
  store i8 0, i8* %negative, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.18
  %22 = load i64, i64* %features.addr, align 8
  %and = and i64 %22, 7
  %conv = trunc i64 %and to i32
  %cmp22 = icmp eq i32 %conv, 3
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i64, i64* %features.addr, align 8
  %sub24 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub24 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %car25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 0
  %26 = load i64, i64* %car25, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp27 = icmp eq i64 %26, %call26
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %for.body
  store i8 1, i8* %negative, align 1
  br label %for.inc

if.end.30:                                        ; preds = %for.body
  %27 = load i64, i64* %features.addr, align 8
  %sub31 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub31 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car32 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car32, align 8
  %31 = load i64, i64* %table.addr, align 8
  %call33 = call i64 @Fmemq(i64 %30, i64 %31)
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp35 = icmp eq i64 %call33, %call34
  %conv36 = zext i1 %cmp35 to i32
  %32 = load i8, i8* %negative, align 1
  %tobool = trunc i8 %32 to i1
  %conv37 = zext i1 %tobool to i32
  %cmp38 = icmp ne i32 %conv36, %conv37
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %if.end.30
  store i1 false, i1* %retval
  br label %return

if.end.41:                                        ; preds = %if.end.30
  br label %for.inc

for.inc:                                          ; preds = %if.end.41, %if.then.29
  %33 = load i64, i64* %features.addr, align 8
  %sub42 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub42 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %u43 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 1
  %cdr44 = bitcast %union.anon.10* %u43 to i64*
  %36 = load i64, i64* %cdr44, align 8
  store i64 %36, i64* %features.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.40, %if.then.8, %if.then
  %37 = load i1, i1* %retval
  ret i1 %37
}

declare i64 @fast_c_string_match_ignore_case(i64, i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @font_parse_fcname(i8* %name, i64 %len, i64 %font) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %font.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  %size_beg = alloca i8*, align 8
  %size_end = alloca i8*, align 8
  %props_beg = alloca i8*, align 8
  %family_end = alloca i8*, align 8
  %decimal = alloca i8, align 1
  %size_found = alloca i8, align 1
  %extra_props = alloca i64, align 8
  %family = alloca i64, align 8
  %point_size = alloca double, align 8
  %val = alloca i64, align 8
  %word_len = alloca i64, align 8
  %key = alloca i64, align 8
  %prop = alloca i32, align 4
  %driver_list = alloca %struct.font_driver_list*, align 8
  %weight = alloca i64, align 8
  %slant = alloca i64, align 8
  %width = alloca i64, align 8
  %size = alloca i64, align 8
  %word_start = alloca i8*, align 8
  %word_len265 = alloca i64, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 %font, i64* %font.addr, align 8
  store i8* null, i8** %size_beg, align 8
  store i8* null, i8** %size_end, align 8
  store i8* null, i8** %props_beg, align 8
  store i8* null, i8** %family_end, align 8
  %0 = load i64, i64* %len.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8
  store i8* %1, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.40, %if.end
  %2 = load i8*, i8** %p, align 8
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %for.body, label %for.end.42

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %cmp1 = icmp eq i32 %conv, 92
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %6 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx, align 1
  %conv3 = sext i8 %7 to i32
  %tobool4 = icmp ne i32 %conv3, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %land.lhs.true
  %8 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %if.end.39

if.else:                                          ; preds = %land.lhs.true, %for.body
  %9 = load i8*, i8** %p, align 8
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 58
  br i1 %cmp7, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %if.else
  %11 = load i8*, i8** %p, align 8
  store i8* %11, i8** %family_end, align 8
  store i8* %11, i8** %props_beg, align 8
  br label %for.end.42

if.else.10:                                       ; preds = %if.else
  %12 = load i8*, i8** %p, align 8
  %13 = load i8, i8* %12, align 1
  %conv11 = sext i8 %13 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then.14, label %if.end.37

if.then.14:                                       ; preds = %if.else.10
  store i8 0, i8* %decimal, align 1
  store i8 1, i8* %size_found, align 1
  %14 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %add.ptr, i8** %q, align 8
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc, %if.then.14
  %15 = load i8*, i8** %q, align 8
  %16 = load i8, i8* %15, align 1
  %conv16 = sext i8 %16 to i32
  %tobool17 = icmp ne i32 %conv16, 0
  br i1 %tobool17, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.15
  %17 = load i8*, i8** %q, align 8
  %18 = load i8, i8* %17, align 1
  %conv18 = sext i8 %18 to i32
  %cmp19 = icmp ne i32 %conv18, 58
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.15
  %19 = phi i1 [ false, %for.cond.15 ], [ %cmp19, %land.rhs ]
  br i1 %19, label %for.body.21, label %for.end

for.body.21:                                      ; preds = %land.end
  %20 = load i8*, i8** %q, align 8
  %21 = load i8, i8* %20, align 1
  %conv22 = sext i8 %21 to i32
  %call = call zeroext i1 @c_isdigit(i32 %conv22)
  br i1 %call, label %if.end.31, label %if.then.23

if.then.23:                                       ; preds = %for.body.21
  %22 = load i8*, i8** %q, align 8
  %23 = load i8, i8* %22, align 1
  %conv24 = sext i8 %23 to i32
  %cmp25 = icmp ne i32 %conv24, 46
  br i1 %cmp25, label %if.then.29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.23
  %24 = load i8, i8* %decimal, align 1
  %tobool27 = trunc i8 %24 to i1
  br i1 %tobool27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %lor.lhs.false, %if.then.23
  store i8 0, i8* %size_found, align 1
  br label %for.end

if.end.30:                                        ; preds = %lor.lhs.false
  store i8 1, i8* %decimal, align 1
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %for.body.21
  br label %for.inc

for.inc:                                          ; preds = %if.end.31
  %25 = load i8*, i8** %q, align 8
  %incdec.ptr32 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr32, i8** %q, align 8
  br label %for.cond.15

for.end:                                          ; preds = %if.then.29, %land.end
  %26 = load i8, i8* %size_found, align 1
  %tobool33 = trunc i8 %26 to i1
  br i1 %tobool33, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %for.end
  %27 = load i8*, i8** %p, align 8
  store i8* %27, i8** %family_end, align 8
  %28 = load i8*, i8** %p, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %28, i64 1
  store i8* %add.ptr35, i8** %size_beg, align 8
  %29 = load i8*, i8** %q, align 8
  store i8* %29, i8** %size_end, align 8
  br label %for.end.42

if.end.36:                                        ; preds = %for.end
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.else.10
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.then.5
  br label %for.inc.40

for.inc.40:                                       ; preds = %if.end.39
  %30 = load i8*, i8** %p, align 8
  %incdec.ptr41 = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr41, i8** %p, align 8
  br label %for.cond

for.end.42:                                       ; preds = %if.then.34, %if.then.9, %for.cond
  %31 = load i8*, i8** %family_end, align 8
  %tobool43 = icmp ne i8* %31, null
  br i1 %tobool43, label %if.then.44, label %if.else.260

if.then.44:                                       ; preds = %for.end.42
  %call45 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call45, i64* %extra_props, align 8
  %32 = load i8*, i8** %family_end, align 8
  %33 = load i8*, i8** %name.addr, align 8
  %cmp46 = icmp ugt i8* %32, %33
  br i1 %cmp46, label %if.then.48, label %if.end.50

if.then.48:                                       ; preds = %if.then.44
  %34 = load i8*, i8** %name.addr, align 8
  %35 = load i8*, i8** %family_end, align 8
  %36 = load i8*, i8** %name.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %35 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %36 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call49 = call i64 @font_intern_prop(i8* %34, i64 %sub.ptr.sub, i1 zeroext true)
  store i64 %call49, i64* %family, align 8
  %37 = load i64, i64* %font.addr, align 8
  %38 = load i64, i64* %family, align 8
  call void @ASET(i64 %37, i64 2, i64 %38)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.48, %if.then.44
  %39 = load i8*, i8** %size_beg, align 8
  %tobool51 = icmp ne i8* %39, null
  br i1 %tobool51, label %if.then.52, label %if.end.64

if.then.52:                                       ; preds = %if.end.50
  %40 = load i8*, i8** %size_beg, align 8
  %call53 = call double @strtod(i8* %40, i8** %size_end) #5
  store double %call53, double* %point_size, align 8
  %41 = load i64, i64* %font.addr, align 8
  %42 = load double, double* %point_size, align 8
  %call54 = call i64 @make_float(double %42)
  call void @ASET(i64 %41, i64 8, i64 %call54)
  %43 = load i8*, i8** %size_end, align 8
  %44 = load i8, i8* %43, align 1
  %conv55 = sext i8 %44 to i32
  %cmp56 = icmp eq i32 %conv55, 58
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.63

land.lhs.true.58:                                 ; preds = %if.then.52
  %45 = load i8*, i8** %size_end, align 8
  %arrayidx59 = getelementptr inbounds i8, i8* %45, i64 1
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %tobool61 = icmp ne i32 %conv60, 0
  br i1 %tobool61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %land.lhs.true.58
  %47 = load i8*, i8** %size_end, align 8
  store i8* %47, i8** %props_beg, align 8
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.62, %land.lhs.true.58, %if.then.52
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.end.50
  %48 = load i8*, i8** %props_beg, align 8
  %tobool65 = icmp ne i8* %48, null
  br i1 %tobool65, label %if.then.66, label %if.end.244

if.then.66:                                       ; preds = %if.end.64
  %49 = load i8*, i8** %props_beg, align 8
  store i8* %49, i8** %p, align 8
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc.242, %if.then.66
  %50 = load i8*, i8** %p, align 8
  %51 = load i8, i8* %50, align 1
  %tobool68 = icmp ne i8 %51, 0
  br i1 %tobool68, label %for.body.69, label %for.end.243

for.body.69:                                      ; preds = %for.cond.67
  %52 = load i8*, i8** %p, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %52, i64 1
  store i8* %add.ptr70, i8** %q, align 8
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.84, %for.body.69
  %53 = load i8*, i8** %q, align 8
  %54 = load i8, i8* %53, align 1
  %conv72 = sext i8 %54 to i32
  %tobool73 = icmp ne i32 %conv72, 0
  br i1 %tobool73, label %land.lhs.true.74, label %land.end.82

land.lhs.true.74:                                 ; preds = %for.cond.71
  %55 = load i8*, i8** %q, align 8
  %56 = load i8, i8* %55, align 1
  %conv75 = sext i8 %56 to i32
  %cmp76 = icmp ne i32 %conv75, 61
  br i1 %cmp76, label %land.rhs.78, label %land.end.82

land.rhs.78:                                      ; preds = %land.lhs.true.74
  %57 = load i8*, i8** %q, align 8
  %58 = load i8, i8* %57, align 1
  %conv79 = sext i8 %58 to i32
  %cmp80 = icmp ne i32 %conv79, 58
  br label %land.end.82

land.end.82:                                      ; preds = %land.rhs.78, %land.lhs.true.74, %for.cond.71
  %59 = phi i1 [ false, %land.lhs.true.74 ], [ false, %for.cond.71 ], [ %cmp80, %land.rhs.78 ]
  br i1 %59, label %for.body.83, label %for.end.86

for.body.83:                                      ; preds = %land.end.82
  br label %for.inc.84

for.inc.84:                                       ; preds = %for.body.83
  %60 = load i8*, i8** %q, align 8
  %incdec.ptr85 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr85, i8** %q, align 8
  br label %for.cond.71

for.end.86:                                       ; preds = %land.end.82
  %61 = load i8*, i8** %q, align 8
  %62 = load i8, i8* %61, align 1
  %conv87 = sext i8 %62 to i32
  %cmp88 = icmp ne i32 %conv87, 61
  br i1 %cmp88, label %if.then.90, label %if.else.191

if.then.90:                                       ; preds = %for.end.86
  %63 = load i8*, i8** %p, align 8
  %add.ptr91 = getelementptr inbounds i8, i8* %63, i64 1
  store i8* %add.ptr91, i8** %p, align 8
  %64 = load i8*, i8** %q, align 8
  %65 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast92 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast93 = ptrtoint i8* %65 to i64
  %sub.ptr.sub94 = sub i64 %sub.ptr.lhs.cast92, %sub.ptr.rhs.cast93
  store i64 %sub.ptr.sub94, i64* %word_len, align 8
  %66 = load i8*, i8** %p, align 8
  %67 = load i8*, i8** %q, align 8
  %68 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast95 = ptrtoint i8* %67 to i64
  %sub.ptr.rhs.cast96 = ptrtoint i8* %68 to i64
  %sub.ptr.sub97 = sub i64 %sub.ptr.lhs.cast95, %sub.ptr.rhs.cast96
  %call98 = call i64 @font_intern_prop(i8* %66, i64 %sub.ptr.sub97, i1 zeroext true)
  store i64 %call98, i64* %val, align 8
  %69 = load i64, i64* %word_len, align 8
  %cmp99 = icmp eq i64 %69, 5
  br i1 %cmp99, label %land.lhs.true.101, label %lor.lhs.false.105

land.lhs.true.101:                                ; preds = %if.then.90
  %70 = load i8*, i8** %p, align 8
  %call102 = call i32 @memcmp(i8* %70, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i64 5) #6
  %cmp103 = icmp eq i32 %call102, 0
  br i1 %cmp103, label %if.then.133, label %lor.lhs.false.105

lor.lhs.false.105:                                ; preds = %land.lhs.true.101, %if.then.90
  %71 = load i64, i64* %word_len, align 8
  %cmp106 = icmp eq i64 %71, 6
  br i1 %cmp106, label %land.lhs.true.108, label %lor.lhs.false.112

land.lhs.true.108:                                ; preds = %lor.lhs.false.105
  %72 = load i8*, i8** %p, align 8
  %call109 = call i32 @memcmp(i8* %72, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i64 6) #6
  %cmp110 = icmp eq i32 %call109, 0
  br i1 %cmp110, label %if.then.133, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %land.lhs.true.108, %lor.lhs.false.105
  %73 = load i64, i64* %word_len, align 8
  %cmp113 = icmp eq i64 %73, 8
  br i1 %cmp113, label %land.lhs.true.115, label %lor.lhs.false.119

land.lhs.true.115:                                ; preds = %lor.lhs.false.112
  %74 = load i8*, i8** %p, align 8
  %call116 = call i32 @memcmp(i8* %74, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.60, i32 0, i32 0), i64 8) #6
  %cmp117 = icmp eq i32 %call116, 0
  br i1 %cmp117, label %if.then.133, label %lor.lhs.false.119

lor.lhs.false.119:                                ; preds = %land.lhs.true.115, %lor.lhs.false.112
  %75 = load i64, i64* %word_len, align 8
  %cmp120 = icmp eq i64 %75, 4
  br i1 %cmp120, label %land.lhs.true.122, label %lor.lhs.false.126

land.lhs.true.122:                                ; preds = %lor.lhs.false.119
  %76 = load i8*, i8** %p, align 8
  %call123 = call i32 @memcmp(i8* %76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i64 4) #6
  %cmp124 = icmp eq i32 %call123, 0
  br i1 %cmp124, label %if.then.133, label %lor.lhs.false.126

lor.lhs.false.126:                                ; preds = %land.lhs.true.122, %lor.lhs.false.119
  %77 = load i64, i64* %word_len, align 8
  %cmp127 = icmp eq i64 %77, 5
  br i1 %cmp127, label %land.lhs.true.129, label %if.else.136

land.lhs.true.129:                                ; preds = %lor.lhs.false.126
  %78 = load i8*, i8** %p, align 8
  %call130 = call i32 @memcmp(i8* %78, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.62, i32 0, i32 0), i64 5) #6
  %cmp131 = icmp eq i32 %call130, 0
  br i1 %cmp131, label %if.then.133, label %if.else.136

if.then.133:                                      ; preds = %land.lhs.true.129, %land.lhs.true.122, %land.lhs.true.115, %land.lhs.true.108, %land.lhs.true.101
  %79 = load i64, i64* %font.addr, align 8
  %80 = load i64, i64* %val, align 8
  %call134 = call i32 @font_style_to_value(i32 5, i64 %80, i1 zeroext true)
  %conv135 = sext i32 %call134 to i64
  %shl = shl i64 %conv135, 2
  %add = add i64 %shl, 2
  call void @ASET(i64 %79, i64 5, i64 %add)
  br label %if.end.190

if.else.136:                                      ; preds = %land.lhs.true.129, %lor.lhs.false.126
  %81 = load i64, i64* %word_len, align 8
  %cmp137 = icmp eq i64 %81, 5
  br i1 %cmp137, label %land.lhs.true.139, label %lor.lhs.false.143

land.lhs.true.139:                                ; preds = %if.else.136
  %82 = load i8*, i8** %p, align 8
  %call140 = call i32 @memcmp(i8* %82, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.63, i32 0, i32 0), i64 5) #6
  %cmp141 = icmp eq i32 %call140, 0
  br i1 %cmp141, label %if.then.157, label %lor.lhs.false.143

lor.lhs.false.143:                                ; preds = %land.lhs.true.139, %if.else.136
  %83 = load i64, i64* %word_len, align 8
  %cmp144 = icmp eq i64 %83, 6
  br i1 %cmp144, label %land.lhs.true.146, label %lor.lhs.false.150

land.lhs.true.146:                                ; preds = %lor.lhs.false.143
  %84 = load i8*, i8** %p, align 8
  %call147 = call i32 @memcmp(i8* %84, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.64, i32 0, i32 0), i64 6) #6
  %cmp148 = icmp eq i32 %call147, 0
  br i1 %cmp148, label %if.then.157, label %lor.lhs.false.150

lor.lhs.false.150:                                ; preds = %land.lhs.true.146, %lor.lhs.false.143
  %85 = load i64, i64* %word_len, align 8
  %cmp151 = icmp eq i64 %85, 7
  br i1 %cmp151, label %land.lhs.true.153, label %if.else.162

land.lhs.true.153:                                ; preds = %lor.lhs.false.150
  %86 = load i8*, i8** %p, align 8
  %call154 = call i32 @memcmp(i8* %86, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), i64 7) #6
  %cmp155 = icmp eq i32 %call154, 0
  br i1 %cmp155, label %if.then.157, label %if.else.162

if.then.157:                                      ; preds = %land.lhs.true.153, %land.lhs.true.146, %land.lhs.true.139
  %87 = load i64, i64* %font.addr, align 8
  %88 = load i64, i64* %val, align 8
  %call158 = call i32 @font_style_to_value(i32 6, i64 %88, i1 zeroext true)
  %conv159 = sext i32 %call158 to i64
  %shl160 = shl i64 %conv159, 2
  %add161 = add i64 %shl160, 2
  call void @ASET(i64 %87, i64 6, i64 %add161)
  br label %if.end.189

if.else.162:                                      ; preds = %land.lhs.true.153, %lor.lhs.false.150
  %89 = load i64, i64* %word_len, align 8
  %cmp163 = icmp eq i64 %89, 8
  br i1 %cmp163, label %land.lhs.true.165, label %if.else.170

land.lhs.true.165:                                ; preds = %if.else.162
  %90 = load i8*, i8** %p, align 8
  %call166 = call i32 @memcmp(i8* %90, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66, i32 0, i32 0), i64 8) #6
  %cmp167 = icmp eq i32 %call166, 0
  br i1 %cmp167, label %if.then.169, label %if.else.170

if.then.169:                                      ; preds = %land.lhs.true.165
  %91 = load i64, i64* %font.addr, align 8
  call void @ASET(i64 %91, i64 10, i64 442)
  br label %if.end.188

if.else.170:                                      ; preds = %land.lhs.true.165, %if.else.162
  %92 = load i64, i64* %word_len, align 8
  %cmp171 = icmp eq i64 %92, 4
  br i1 %cmp171, label %land.lhs.true.173, label %if.else.178

land.lhs.true.173:                                ; preds = %if.else.170
  %93 = load i8*, i8** %p, align 8
  %call174 = call i32 @memcmp(i8* %93, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i32 0, i32 0), i64 4) #6
  %cmp175 = icmp eq i32 %call174, 0
  br i1 %cmp175, label %if.then.177, label %if.else.178

if.then.177:                                      ; preds = %land.lhs.true.173
  %94 = load i64, i64* %font.addr, align 8
  call void @ASET(i64 %94, i64 10, i64 402)
  br label %if.end.187

if.else.178:                                      ; preds = %land.lhs.true.173, %if.else.170
  %95 = load i64, i64* %word_len, align 8
  %cmp179 = icmp eq i64 %95, 12
  br i1 %cmp179, label %land.lhs.true.181, label %if.end.186

land.lhs.true.181:                                ; preds = %if.else.178
  %96 = load i8*, i8** %p, align 8
  %call182 = call i32 @memcmp(i8* %96, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.68, i32 0, i32 0), i64 12) #6
  %cmp183 = icmp eq i32 %call182, 0
  br i1 %cmp183, label %if.then.185, label %if.end.186

if.then.185:                                      ; preds = %land.lhs.true.181
  %97 = load i64, i64* %font.addr, align 8
  call void @ASET(i64 %97, i64 10, i64 2)
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.185, %land.lhs.true.181, %if.else.178
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %if.then.177
  br label %if.end.188

if.end.188:                                       ; preds = %if.end.187, %if.then.169
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %if.then.157
  br label %if.end.190

if.end.190:                                       ; preds = %if.end.189, %if.then.133
  br label %if.end.241

if.else.191:                                      ; preds = %for.end.86
  %98 = load i8*, i8** %q, align 8
  %99 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast192 = ptrtoint i8* %98 to i64
  %sub.ptr.rhs.cast193 = ptrtoint i8* %99 to i64
  %sub.ptr.sub194 = sub i64 %sub.ptr.lhs.cast192, %sub.ptr.rhs.cast193
  %cmp195 = icmp eq i64 %sub.ptr.sub194, 10
  br i1 %cmp195, label %land.lhs.true.197, label %if.else.203

land.lhs.true.197:                                ; preds = %if.else.191
  %100 = load i8*, i8** %p, align 8
  %add.ptr198 = getelementptr inbounds i8, i8* %100, i64 1
  %call199 = call i32 @memcmp(i8* %add.ptr198, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.69, i32 0, i32 0), i64 9) #6
  %cmp200 = icmp eq i32 %call199, 0
  br i1 %cmp200, label %if.then.202, label %if.else.203

if.then.202:                                      ; preds = %land.lhs.true.197
  store i32 8, i32* %prop, align 4
  br label %if.end.209

if.else.203:                                      ; preds = %land.lhs.true.197, %if.else.191
  %101 = load i8*, i8** %p, align 8
  %102 = load i8*, i8** %q, align 8
  %103 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast204 = ptrtoint i8* %102 to i64
  %sub.ptr.rhs.cast205 = ptrtoint i8* %103 to i64
  %sub.ptr.sub206 = sub i64 %sub.ptr.lhs.cast204, %sub.ptr.rhs.cast205
  %call207 = call i64 @font_intern_prop(i8* %101, i64 %sub.ptr.sub206, i1 zeroext true)
  store i64 %call207, i64* %key, align 8
  %104 = load i64, i64* %key, align 8
  %call208 = call i32 @get_font_prop_index(i64 %104)
  store i32 %call208, i32* %prop, align 4
  br label %if.end.209

if.end.209:                                       ; preds = %if.else.203, %if.then.202
  %105 = load i8*, i8** %q, align 8
  %add.ptr210 = getelementptr inbounds i8, i8* %105, i64 1
  store i8* %add.ptr210, i8** %p, align 8
  %106 = load i8*, i8** %p, align 8
  store i8* %106, i8** %q, align 8
  br label %for.cond.211

for.cond.211:                                     ; preds = %for.inc.220, %if.end.209
  %107 = load i8*, i8** %q, align 8
  %108 = load i8, i8* %107, align 1
  %conv212 = sext i8 %108 to i32
  %tobool213 = icmp ne i32 %conv212, 0
  br i1 %tobool213, label %land.rhs.214, label %land.end.218

land.rhs.214:                                     ; preds = %for.cond.211
  %109 = load i8*, i8** %q, align 8
  %110 = load i8, i8* %109, align 1
  %conv215 = sext i8 %110 to i32
  %cmp216 = icmp ne i32 %conv215, 58
  br label %land.end.218

land.end.218:                                     ; preds = %land.rhs.214, %for.cond.211
  %111 = phi i1 [ false, %for.cond.211 ], [ %cmp216, %land.rhs.214 ]
  br i1 %111, label %for.body.219, label %for.end.222

for.body.219:                                     ; preds = %land.end.218
  br label %for.inc.220

for.inc.220:                                      ; preds = %for.body.219
  %112 = load i8*, i8** %q, align 8
  %incdec.ptr221 = getelementptr inbounds i8, i8* %112, i32 1
  store i8* %incdec.ptr221, i8** %q, align 8
  br label %for.cond.211

for.end.222:                                      ; preds = %land.end.218
  %113 = load i8*, i8** %p, align 8
  %114 = load i8*, i8** %q, align 8
  %115 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast223 = ptrtoint i8* %114 to i64
  %sub.ptr.rhs.cast224 = ptrtoint i8* %115 to i64
  %sub.ptr.sub225 = sub i64 %sub.ptr.lhs.cast223, %sub.ptr.rhs.cast224
  %call226 = call i64 @font_intern_prop(i8* %113, i64 %sub.ptr.sub225, i1 zeroext false)
  store i64 %call226, i64* %val, align 8
  %116 = load i32, i32* %prop, align 4
  %cmp227 = icmp sge i32 %116, 1
  br i1 %cmp227, label %land.lhs.true.229, label %if.else.236

land.lhs.true.229:                                ; preds = %for.end.222
  %117 = load i32, i32* %prop, align 4
  %cmp230 = icmp slt i32 %117, 12
  br i1 %cmp230, label %if.then.232, label %if.else.236

if.then.232:                                      ; preds = %land.lhs.true.229
  %118 = load i64, i64* %font.addr, align 8
  %119 = load i32, i32* %prop, align 4
  %conv233 = sext i32 %119 to i64
  %120 = load i32, i32* %prop, align 4
  %call234 = call i64 @builtin_lisp_symbol(i32 0)
  %121 = load i64, i64* %val, align 8
  %call235 = call i64 @font_prop_validate(i32 %120, i64 %call234, i64 %121)
  call void @ASET(i64 %118, i64 %conv233, i64 %call235)
  br label %if.end.240

if.else.236:                                      ; preds = %land.lhs.true.229, %for.end.222
  %122 = load i64, i64* %extra_props, align 8
  %123 = load i64, i64* %key, align 8
  %124 = load i64, i64* %val, align 8
  %call237 = call i64 @Fcons(i64 %123, i64 %124)
  %call238 = call i64 @list1(i64 %call237)
  %call239 = call i64 @nconc2(i64 %122, i64 %call238)
  store i64 %call239, i64* %extra_props, align 8
  br label %if.end.240

if.end.240:                                       ; preds = %if.else.236, %if.then.232
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.240, %if.end.190
  %125 = load i8*, i8** %q, align 8
  store i8* %125, i8** %p, align 8
  br label %for.inc.242

for.inc.242:                                      ; preds = %if.end.241
  %126 = load i8*, i8** %q, align 8
  store i8* %126, i8** %p, align 8
  br label %for.cond.67

for.end.243:                                      ; preds = %for.cond.67
  br label %if.end.244

if.end.244:                                       ; preds = %for.end.243, %if.end.64
  %127 = load i64, i64* %extra_props, align 8
  %call245 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp246 = icmp eq i64 %127, %call245
  br i1 %cmp246, label %if.end.259, label %if.then.248

if.then.248:                                      ; preds = %if.end.244
  %128 = load %struct.font_driver_list*, %struct.font_driver_list** @font_driver_list, align 8
  store %struct.font_driver_list* %128, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond.249

for.cond.249:                                     ; preds = %for.inc.257, %if.then.248
  %129 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %tobool250 = icmp ne %struct.font_driver_list* %129, null
  br i1 %tobool250, label %for.body.251, label %for.end.258

for.body.251:                                     ; preds = %for.cond.249
  %130 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %130, i32 0, i32 1
  %131 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %filter_properties = getelementptr inbounds %struct.font_driver, %struct.font_driver* %131, i32 0, i32 25
  %132 = load void (i64, i64)*, void (i64, i64)** %filter_properties, align 8
  %tobool252 = icmp ne void (i64, i64)* %132, null
  br i1 %tobool252, label %if.then.253, label %if.end.256

if.then.253:                                      ; preds = %for.body.251
  %133 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %driver254 = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %133, i32 0, i32 1
  %134 = load %struct.font_driver*, %struct.font_driver** %driver254, align 8
  %filter_properties255 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %134, i32 0, i32 25
  %135 = load void (i64, i64)*, void (i64, i64)** %filter_properties255, align 8
  %136 = load i64, i64* %font.addr, align 8
  %137 = load i64, i64* %extra_props, align 8
  call void %135(i64 %136, i64 %137)
  br label %if.end.256

if.end.256:                                       ; preds = %if.then.253, %for.body.251
  br label %for.inc.257

for.inc.257:                                      ; preds = %if.end.256
  %138 = load %struct.font_driver_list*, %struct.font_driver_list** %driver_list, align 8
  %next = getelementptr inbounds %struct.font_driver_list, %struct.font_driver_list* %138, i32 0, i32 2
  %139 = load %struct.font_driver_list*, %struct.font_driver_list** %next, align 8
  store %struct.font_driver_list* %139, %struct.font_driver_list** %driver_list, align 8
  br label %for.cond.249

for.end.258:                                      ; preds = %for.cond.249
  br label %if.end.259

if.end.259:                                       ; preds = %for.end.258, %if.end.244
  br label %if.end.537

if.else.260:                                      ; preds = %for.end.42
  %call261 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call261, i64* %weight, align 8
  %call262 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call262, i64* %slant, align 8
  %call263 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call263, i64* %width, align 8
  %call264 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call264, i64* %size, align 8
  %140 = load i8*, i8** %name.addr, align 8
  %141 = load i64, i64* %len.addr, align 8
  %add.ptr266 = getelementptr inbounds i8, i8* %140, i64 %141
  %add.ptr267 = getelementptr inbounds i8, i8* %add.ptr266, i64 -1
  store i8* %add.ptr267, i8** %p, align 8
  br label %for.cond.268

for.cond.268:                                     ; preds = %for.inc.276, %if.else.260
  %142 = load i8*, i8** %p, align 8
  %143 = load i8*, i8** %name.addr, align 8
  %cmp269 = icmp uge i8* %142, %143
  br i1 %cmp269, label %for.body.271, label %for.end.278

for.body.271:                                     ; preds = %for.cond.268
  %144 = load i8*, i8** %p, align 8
  %145 = load i8, i8* %144, align 1
  %conv272 = sext i8 %145 to i32
  %call273 = call zeroext i1 @c_isdigit(i32 %conv272)
  br i1 %call273, label %if.end.275, label %if.then.274

if.then.274:                                      ; preds = %for.body.271
  br label %for.end.278

if.end.275:                                       ; preds = %for.body.271
  br label %for.inc.276

for.inc.276:                                      ; preds = %if.end.275
  %146 = load i8*, i8** %p, align 8
  %incdec.ptr277 = getelementptr inbounds i8, i8* %146, i32 -1
  store i8* %incdec.ptr277, i8** %p, align 8
  br label %for.cond.268

for.end.278:                                      ; preds = %if.then.274, %for.cond.268
  %147 = load i8*, i8** %p, align 8
  %148 = load i8*, i8** %name.addr, align 8
  %149 = load i64, i64* %len.addr, align 8
  %add.ptr279 = getelementptr inbounds i8, i8* %148, i64 %149
  %add.ptr280 = getelementptr inbounds i8, i8* %add.ptr279, i64 -1
  %cmp281 = icmp ult i8* %147, %add.ptr280
  br i1 %cmp281, label %land.lhs.true.283, label %if.else.295

land.lhs.true.283:                                ; preds = %for.end.278
  %150 = load i8*, i8** %p, align 8
  %add.ptr284 = getelementptr inbounds i8, i8* %150, i64 1
  %151 = load i8*, i8** %name.addr, align 8
  %cmp285 = icmp eq i8* %add.ptr284, %151
  br i1 %cmp285, label %if.then.291, label %lor.lhs.false.287

lor.lhs.false.287:                                ; preds = %land.lhs.true.283
  %152 = load i8*, i8** %p, align 8
  %153 = load i8, i8* %152, align 1
  %conv288 = sext i8 %153 to i32
  %cmp289 = icmp eq i32 %conv288, 32
  br i1 %cmp289, label %if.then.291, label %if.else.295

if.then.291:                                      ; preds = %lor.lhs.false.287, %land.lhs.true.283
  %154 = load i8*, i8** %p, align 8
  %add.ptr292 = getelementptr inbounds i8, i8* %154, i64 1
  %call293 = call double @strtod(i8* %add.ptr292, i8** null) #5
  %call294 = call i64 @make_float(double %call293)
  store i64 %call294, i64* %size, align 8
  br label %if.end.297

if.else.295:                                      ; preds = %lor.lhs.false.287, %for.end.278
  %155 = load i8*, i8** %name.addr, align 8
  %156 = load i64, i64* %len.addr, align 8
  %add.ptr296 = getelementptr inbounds i8, i8* %155, i64 %156
  store i8* %add.ptr296, i8** %p, align 8
  br label %if.end.297

if.end.297:                                       ; preds = %if.else.295, %if.then.291
  br label %for.cond.298

for.cond.298:                                     ; preds = %for.inc.496, %if.end.297
  %157 = load i8*, i8** %p, align 8
  %158 = load i8*, i8** %name.addr, align 8
  %cmp299 = icmp ugt i8* %157, %158
  br i1 %cmp299, label %for.body.301, label %for.end.497

for.body.301:                                     ; preds = %for.cond.298
  %159 = load i8*, i8** %p, align 8
  %add.ptr302 = getelementptr inbounds i8, i8* %159, i64 -1
  store i8* %add.ptr302, i8** %q, align 8
  br label %for.cond.303

for.cond.303:                                     ; preds = %for.inc.323, %for.body.301
  %160 = load i8*, i8** %q, align 8
  %161 = load i8*, i8** %name.addr, align 8
  %cmp304 = icmp uge i8* %160, %161
  br i1 %cmp304, label %for.body.306, label %for.end.325

for.body.306:                                     ; preds = %for.cond.303
  %162 = load i8*, i8** %q, align 8
  %163 = load i8*, i8** %name.addr, align 8
  %cmp307 = icmp ugt i8* %162, %163
  br i1 %cmp307, label %land.lhs.true.309, label %if.else.316

land.lhs.true.309:                                ; preds = %for.body.306
  %164 = load i8*, i8** %q, align 8
  %add.ptr310 = getelementptr inbounds i8, i8* %164, i64 -1
  %165 = load i8, i8* %add.ptr310, align 1
  %conv311 = sext i8 %165 to i32
  %cmp312 = icmp eq i32 %conv311, 92
  br i1 %cmp312, label %if.then.314, label %if.else.316

if.then.314:                                      ; preds = %land.lhs.true.309
  %166 = load i8*, i8** %q, align 8
  %incdec.ptr315 = getelementptr inbounds i8, i8* %166, i32 -1
  store i8* %incdec.ptr315, i8** %q, align 8
  br label %if.end.322

if.else.316:                                      ; preds = %land.lhs.true.309, %for.body.306
  %167 = load i8*, i8** %q, align 8
  %168 = load i8, i8* %167, align 1
  %conv317 = sext i8 %168 to i32
  %cmp318 = icmp eq i32 %conv317, 32
  br i1 %cmp318, label %if.then.320, label %if.end.321

if.then.320:                                      ; preds = %if.else.316
  br label %for.end.325

if.end.321:                                       ; preds = %if.else.316
  br label %if.end.322

if.end.322:                                       ; preds = %if.end.321, %if.then.314
  br label %for.inc.323

for.inc.323:                                      ; preds = %if.end.322
  %169 = load i8*, i8** %q, align 8
  %incdec.ptr324 = getelementptr inbounds i8, i8* %169, i32 -1
  store i8* %incdec.ptr324, i8** %q, align 8
  br label %for.cond.303

for.end.325:                                      ; preds = %if.then.320, %for.cond.303
  %170 = load i8*, i8** %q, align 8
  %add.ptr326 = getelementptr inbounds i8, i8* %170, i64 1
  store i8* %add.ptr326, i8** %word_start, align 8
  %171 = load i8*, i8** %p, align 8
  %172 = load i8*, i8** %word_start, align 8
  %sub.ptr.lhs.cast327 = ptrtoint i8* %171 to i64
  %sub.ptr.rhs.cast328 = ptrtoint i8* %172 to i64
  %sub.ptr.sub329 = sub i64 %sub.ptr.lhs.cast327, %sub.ptr.rhs.cast328
  store i64 %sub.ptr.sub329, i64* %word_len265, align 8
  %173 = load i64, i64* %word_len265, align 8
  %cmp330 = icmp eq i64 %173, 11
  br i1 %cmp330, label %land.lhs.true.332, label %if.else.341

land.lhs.true.332:                                ; preds = %for.end.325
  %174 = load i8*, i8** %word_start, align 8
  %call333 = call i32 @memcmp(i8* %174, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), i64 11) #6
  %cmp334 = icmp eq i32 %call333, 0
  br i1 %cmp334, label %if.then.336, label %if.else.341

if.then.336:                                      ; preds = %land.lhs.true.332
  %175 = load i64, i64* %weight, align 8
  %call337 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp338 = icmp eq i64 %175, %call337
  br i1 %cmp338, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.336
  %call340 = call i64 @font_intern_prop(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i32 0, i32 0), i64 11, i1 zeroext true)
  br label %cond.end

cond.false:                                       ; preds = %if.then.336
  %176 = load i64, i64* %weight, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call340, %cond.true ], [ %176, %cond.false ]
  store i64 %cond, i64* %weight, align 8
  br label %if.end.495

if.else.341:                                      ; preds = %land.lhs.true.332, %for.end.325
  %177 = load i64, i64* %word_len265, align 8
  %cmp342 = icmp eq i64 %177, 5
  br i1 %cmp342, label %land.lhs.true.344, label %if.else.357

land.lhs.true.344:                                ; preds = %if.else.341
  %178 = load i8*, i8** %word_start, align 8
  %call345 = call i32 @memcmp(i8* %178, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0), i64 5) #6
  %cmp346 = icmp eq i32 %call345, 0
  br i1 %cmp346, label %if.then.348, label %if.else.357

if.then.348:                                      ; preds = %land.lhs.true.344
  %179 = load i64, i64* %weight, align 8
  %call349 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp350 = icmp eq i64 %179, %call349
  br i1 %cmp350, label %cond.true.352, label %cond.false.354

cond.true.352:                                    ; preds = %if.then.348
  %call353 = call i64 @font_intern_prop(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i64 5, i1 zeroext true)
  br label %cond.end.355

cond.false.354:                                   ; preds = %if.then.348
  %180 = load i64, i64* %weight, align 8
  br label %cond.end.355

cond.end.355:                                     ; preds = %cond.false.354, %cond.true.352
  %cond356 = phi i64 [ %call353, %cond.true.352 ], [ %180, %cond.false.354 ]
  store i64 %cond356, i64* %weight, align 8
  br label %if.end.494

if.else.357:                                      ; preds = %land.lhs.true.344, %if.else.341
  %181 = load i64, i64* %word_len265, align 8
  %cmp358 = icmp eq i64 %181, 4
  br i1 %cmp358, label %land.lhs.true.360, label %if.else.373

land.lhs.true.360:                                ; preds = %if.else.357
  %182 = load i8*, i8** %word_start, align 8
  %call361 = call i32 @memcmp(i8* %182, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i32 0, i32 0), i64 4) #6
  %cmp362 = icmp eq i32 %call361, 0
  br i1 %cmp362, label %if.then.364, label %if.else.373

if.then.364:                                      ; preds = %land.lhs.true.360
  %183 = load i64, i64* %weight, align 8
  %call365 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp366 = icmp eq i64 %183, %call365
  br i1 %cmp366, label %cond.true.368, label %cond.false.370

cond.true.368:                                    ; preds = %if.then.364
  %call369 = call i64 @font_intern_prop(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74, i32 0, i32 0), i64 4, i1 zeroext true)
  br label %cond.end.371

cond.false.370:                                   ; preds = %if.then.364
  %184 = load i64, i64* %weight, align 8
  br label %cond.end.371

cond.end.371:                                     ; preds = %cond.false.370, %cond.true.368
  %cond372 = phi i64 [ %call369, %cond.true.368 ], [ %184, %cond.false.370 ]
  store i64 %cond372, i64* %weight, align 8
  br label %if.end.493

if.else.373:                                      ; preds = %land.lhs.true.360, %if.else.357
  %185 = load i64, i64* %word_len265, align 8
  %cmp374 = icmp eq i64 %185, 6
  br i1 %cmp374, label %land.lhs.true.376, label %if.else.389

land.lhs.true.376:                                ; preds = %if.else.373
  %186 = load i8*, i8** %word_start, align 8
  %call377 = call i32 @memcmp(i8* %186, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), i64 6) #6
  %cmp378 = icmp eq i32 %call377, 0
  br i1 %cmp378, label %if.then.380, label %if.else.389

if.then.380:                                      ; preds = %land.lhs.true.376
  %187 = load i64, i64* %weight, align 8
  %call381 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp382 = icmp eq i64 %187, %call381
  br i1 %cmp382, label %cond.true.384, label %cond.false.386

cond.true.384:                                    ; preds = %if.then.380
  %call385 = call i64 @font_intern_prop(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i64 6, i1 zeroext true)
  br label %cond.end.387

cond.false.386:                                   ; preds = %if.then.380
  %188 = load i64, i64* %weight, align 8
  br label %cond.end.387

cond.end.387:                                     ; preds = %cond.false.386, %cond.true.384
  %cond388 = phi i64 [ %call385, %cond.true.384 ], [ %188, %cond.false.386 ]
  store i64 %cond388, i64* %weight, align 8
  br label %if.end.492

if.else.389:                                      ; preds = %land.lhs.true.376, %if.else.373
  %189 = load i64, i64* %word_len265, align 8
  %cmp390 = icmp eq i64 %189, 9
  br i1 %cmp390, label %land.lhs.true.392, label %if.else.405

land.lhs.true.392:                                ; preds = %if.else.389
  %190 = load i8*, i8** %word_start, align 8
  %call393 = call i32 @memcmp(i8* %190, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), i64 9) #6
  %cmp394 = icmp eq i32 %call393, 0
  br i1 %cmp394, label %if.then.396, label %if.else.405

if.then.396:                                      ; preds = %land.lhs.true.392
  %191 = load i64, i64* %weight, align 8
  %call397 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp398 = icmp eq i64 %191, %call397
  br i1 %cmp398, label %cond.true.400, label %cond.false.402

cond.true.400:                                    ; preds = %if.then.396
  %call401 = call i64 @font_intern_prop(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i64 9, i1 zeroext true)
  br label %cond.end.403

cond.false.402:                                   ; preds = %if.then.396
  %192 = load i64, i64* %weight, align 8
  br label %cond.end.403

cond.end.403:                                     ; preds = %cond.false.402, %cond.true.400
  %cond404 = phi i64 [ %call401, %cond.true.400 ], [ %192, %cond.false.402 ]
  store i64 %cond404, i64* %weight, align 8
  br label %if.end.491

if.else.405:                                      ; preds = %land.lhs.true.392, %if.else.389
  %193 = load i64, i64* %word_len265, align 8
  %cmp406 = icmp eq i64 %193, 4
  br i1 %cmp406, label %land.lhs.true.408, label %if.else.421

land.lhs.true.408:                                ; preds = %if.else.405
  %194 = load i8*, i8** %word_start, align 8
  %call409 = call i32 @memcmp(i8* %194, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i32 0, i32 0), i64 4) #6
  %cmp410 = icmp eq i32 %call409, 0
  br i1 %cmp410, label %if.then.412, label %if.else.421

if.then.412:                                      ; preds = %land.lhs.true.408
  %195 = load i64, i64* %weight, align 8
  %call413 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp414 = icmp eq i64 %195, %call413
  br i1 %cmp414, label %cond.true.416, label %cond.false.418

cond.true.416:                                    ; preds = %if.then.412
  %call417 = call i64 @font_intern_prop(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i64 4, i1 zeroext true)
  br label %cond.end.419

cond.false.418:                                   ; preds = %if.then.412
  %196 = load i64, i64* %weight, align 8
  br label %cond.end.419

cond.end.419:                                     ; preds = %cond.false.418, %cond.true.416
  %cond420 = phi i64 [ %call417, %cond.true.416 ], [ %196, %cond.false.418 ]
  store i64 %cond420, i64* %weight, align 8
  br label %if.end.490

if.else.421:                                      ; preds = %land.lhs.true.408, %if.else.405
  %197 = load i64, i64* %word_len265, align 8
  %cmp422 = icmp eq i64 %197, 6
  br i1 %cmp422, label %land.lhs.true.424, label %if.else.437

land.lhs.true.424:                                ; preds = %if.else.421
  %198 = load i8*, i8** %word_start, align 8
  %call425 = call i32 @memcmp(i8* %198, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.79, i32 0, i32 0), i64 6) #6
  %cmp426 = icmp eq i32 %call425, 0
  br i1 %cmp426, label %if.then.428, label %if.else.437

if.then.428:                                      ; preds = %land.lhs.true.424
  %199 = load i64, i64* %slant, align 8
  %call429 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp430 = icmp eq i64 %199, %call429
  br i1 %cmp430, label %cond.true.432, label %cond.false.434

cond.true.432:                                    ; preds = %if.then.428
  %call433 = call i64 @font_intern_prop(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.64, i32 0, i32 0), i64 6, i1 zeroext true)
  br label %cond.end.435

cond.false.434:                                   ; preds = %if.then.428
  %200 = load i64, i64* %slant, align 8
  br label %cond.end.435

cond.end.435:                                     ; preds = %cond.false.434, %cond.true.432
  %cond436 = phi i64 [ %call433, %cond.true.432 ], [ %200, %cond.false.434 ]
  store i64 %cond436, i64* %slant, align 8
  br label %if.end.489

if.else.437:                                      ; preds = %land.lhs.true.424, %if.else.421
  %201 = load i64, i64* %word_len265, align 8
  %cmp438 = icmp eq i64 %201, 7
  br i1 %cmp438, label %land.lhs.true.440, label %if.else.453

land.lhs.true.440:                                ; preds = %if.else.437
  %202 = load i8*, i8** %word_start, align 8
  %call441 = call i32 @memcmp(i8* %202, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i32 0, i32 0), i64 7) #6
  %cmp442 = icmp eq i32 %call441, 0
  br i1 %cmp442, label %if.then.444, label %if.else.453

if.then.444:                                      ; preds = %land.lhs.true.440
  %203 = load i64, i64* %slant, align 8
  %call445 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp446 = icmp eq i64 %203, %call445
  br i1 %cmp446, label %cond.true.448, label %cond.false.450

cond.true.448:                                    ; preds = %if.then.444
  %call449 = call i64 @font_intern_prop(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), i64 7, i1 zeroext true)
  br label %cond.end.451

cond.false.450:                                   ; preds = %if.then.444
  %204 = load i64, i64* %slant, align 8
  br label %cond.end.451

cond.end.451:                                     ; preds = %cond.false.450, %cond.true.448
  %cond452 = phi i64 [ %call449, %cond.true.448 ], [ %204, %cond.false.450 ]
  store i64 %cond452, i64* %slant, align 8
  br label %if.end.488

if.else.453:                                      ; preds = %land.lhs.true.440, %if.else.437
  %205 = load i64, i64* %word_len265, align 8
  %cmp454 = icmp eq i64 %205, 14
  br i1 %cmp454, label %land.lhs.true.456, label %if.else.469

land.lhs.true.456:                                ; preds = %if.else.453
  %206 = load i8*, i8** %word_start, align 8
  %call457 = call i32 @memcmp(i8* %206, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.81, i32 0, i32 0), i64 14) #6
  %cmp458 = icmp eq i32 %call457, 0
  br i1 %cmp458, label %if.then.460, label %if.else.469

if.then.460:                                      ; preds = %land.lhs.true.456
  %207 = load i64, i64* %width, align 8
  %call461 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp462 = icmp eq i64 %207, %call461
  br i1 %cmp462, label %cond.true.464, label %cond.false.466

cond.true.464:                                    ; preds = %if.then.460
  %call465 = call i64 @font_intern_prop(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.82, i32 0, i32 0), i64 14, i1 zeroext true)
  br label %cond.end.467

cond.false.466:                                   ; preds = %if.then.460
  %208 = load i64, i64* %width, align 8
  br label %cond.end.467

cond.end.467:                                     ; preds = %cond.false.466, %cond.true.464
  %cond468 = phi i64 [ %call465, %cond.true.464 ], [ %208, %cond.false.466 ]
  store i64 %cond468, i64* %width, align 8
  br label %if.end.487

if.else.469:                                      ; preds = %land.lhs.true.456, %if.else.453
  %209 = load i64, i64* %word_len265, align 8
  %cmp470 = icmp eq i64 %209, 9
  br i1 %cmp470, label %land.lhs.true.472, label %if.else.485

land.lhs.true.472:                                ; preds = %if.else.469
  %210 = load i8*, i8** %word_start, align 8
  %call473 = call i32 @memcmp(i8* %210, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.83, i32 0, i32 0), i64 9) #6
  %cmp474 = icmp eq i32 %call473, 0
  br i1 %cmp474, label %if.then.476, label %if.else.485

if.then.476:                                      ; preds = %land.lhs.true.472
  %211 = load i64, i64* %width, align 8
  %call477 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp478 = icmp eq i64 %211, %call477
  br i1 %cmp478, label %cond.true.480, label %cond.false.482

cond.true.480:                                    ; preds = %if.then.476
  %call481 = call i64 @font_intern_prop(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i32 0, i32 0), i64 9, i1 zeroext true)
  br label %cond.end.483

cond.false.482:                                   ; preds = %if.then.476
  %212 = load i64, i64* %width, align 8
  br label %cond.end.483

cond.end.483:                                     ; preds = %cond.false.482, %cond.true.480
  %cond484 = phi i64 [ %call481, %cond.true.480 ], [ %212, %cond.false.482 ]
  store i64 %cond484, i64* %width, align 8
  br label %if.end.486

if.else.485:                                      ; preds = %land.lhs.true.472, %if.else.469
  %213 = load i8*, i8** %p, align 8
  store i8* %213, i8** %family_end, align 8
  br label %for.end.497

if.end.486:                                       ; preds = %cond.end.483
  br label %if.end.487

if.end.487:                                       ; preds = %if.end.486, %cond.end.467
  br label %if.end.488

if.end.488:                                       ; preds = %if.end.487, %cond.end.451
  br label %if.end.489

if.end.489:                                       ; preds = %if.end.488, %cond.end.435
  br label %if.end.490

if.end.490:                                       ; preds = %if.end.489, %cond.end.419
  br label %if.end.491

if.end.491:                                       ; preds = %if.end.490, %cond.end.403
  br label %if.end.492

if.end.492:                                       ; preds = %if.end.491, %cond.end.387
  br label %if.end.493

if.end.493:                                       ; preds = %if.end.492, %cond.end.371
  br label %if.end.494

if.end.494:                                       ; preds = %if.end.493, %cond.end.355
  br label %if.end.495

if.end.495:                                       ; preds = %if.end.494, %cond.end
  br label %for.inc.496

for.inc.496:                                      ; preds = %if.end.495
  %214 = load i8*, i8** %q, align 8
  store i8* %214, i8** %p, align 8
  br label %for.cond.298

for.end.497:                                      ; preds = %if.else.485, %for.cond.298
  %215 = load i8*, i8** %family_end, align 8
  %tobool498 = icmp ne i8* %215, null
  br i1 %tobool498, label %if.then.499, label %if.end.504

if.then.499:                                      ; preds = %for.end.497
  %216 = load i64, i64* %font.addr, align 8
  %217 = load i8*, i8** %name.addr, align 8
  %218 = load i8*, i8** %family_end, align 8
  %219 = load i8*, i8** %name.addr, align 8
  %sub.ptr.lhs.cast500 = ptrtoint i8* %218 to i64
  %sub.ptr.rhs.cast501 = ptrtoint i8* %219 to i64
  %sub.ptr.sub502 = sub i64 %sub.ptr.lhs.cast500, %sub.ptr.rhs.cast501
  %call503 = call i64 @font_intern_prop(i8* %217, i64 %sub.ptr.sub502, i1 zeroext true)
  call void @ASET(i64 %216, i64 2, i64 %call503)
  br label %if.end.504

if.end.504:                                       ; preds = %if.then.499, %for.end.497
  %220 = load i64, i64* %size, align 8
  %call505 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp506 = icmp eq i64 %220, %call505
  br i1 %cmp506, label %if.end.509, label %if.then.508

if.then.508:                                      ; preds = %if.end.504
  %221 = load i64, i64* %font.addr, align 8
  %222 = load i64, i64* %size, align 8
  call void @ASET(i64 %221, i64 8, i64 %222)
  br label %if.end.509

if.end.509:                                       ; preds = %if.then.508, %if.end.504
  %223 = load i64, i64* %weight, align 8
  %call510 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp511 = icmp eq i64 %223, %call510
  br i1 %cmp511, label %if.end.518, label %if.then.513

if.then.513:                                      ; preds = %if.end.509
  %224 = load i64, i64* %font.addr, align 8
  %225 = load i64, i64* %weight, align 8
  %call514 = call i32 @font_style_to_value(i32 5, i64 %225, i1 zeroext true)
  %conv515 = sext i32 %call514 to i64
  %shl516 = shl i64 %conv515, 2
  %add517 = add i64 %shl516, 2
  call void @ASET(i64 %224, i64 5, i64 %add517)
  br label %if.end.518

if.end.518:                                       ; preds = %if.then.513, %if.end.509
  %226 = load i64, i64* %slant, align 8
  %call519 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp520 = icmp eq i64 %226, %call519
  br i1 %cmp520, label %if.end.527, label %if.then.522

if.then.522:                                      ; preds = %if.end.518
  %227 = load i64, i64* %font.addr, align 8
  %228 = load i64, i64* %slant, align 8
  %call523 = call i32 @font_style_to_value(i32 6, i64 %228, i1 zeroext true)
  %conv524 = sext i32 %call523 to i64
  %shl525 = shl i64 %conv524, 2
  %add526 = add i64 %shl525, 2
  call void @ASET(i64 %227, i64 6, i64 %add526)
  br label %if.end.527

if.end.527:                                       ; preds = %if.then.522, %if.end.518
  %229 = load i64, i64* %width, align 8
  %call528 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp529 = icmp eq i64 %229, %call528
  br i1 %cmp529, label %if.end.536, label %if.then.531

if.then.531:                                      ; preds = %if.end.527
  %230 = load i64, i64* %font.addr, align 8
  %231 = load i64, i64* %width, align 8
  %call532 = call i32 @font_style_to_value(i32 7, i64 %231, i1 zeroext true)
  %conv533 = sext i32 %call532 to i64
  %shl534 = shl i64 %conv533, 2
  %add535 = add i64 %shl534, 2
  call void @ASET(i64 %230, i64 7, i64 %add535)
  br label %if.end.536

if.end.536:                                       ; preds = %if.then.531, %if.end.527
  br label %if.end.537

if.end.537:                                       ; preds = %if.end.536, %if.end.259
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.537, %if.then
  %232 = load i32, i32* %retval
  ret i32 %232
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #3

declare void @get_font_ascent_descent(%struct.font*, i32*, i32*) #1

declare i64 @Fvector(i64, i64*) #1

declare i64 @list2(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @font_prop_validate_symbol(i64 %prop, i64 %val) #0 {
entry:
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %call = call zeroext i1 @STRINGP(i64 %0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %val.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %call2 = call i64 @Fintern(i64 %1, i64 %call1)
  store i64 %call2, i64* %val.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %val.addr, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.else, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %call5 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call5, i64* %val.addr, align 8
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %3 = load i64, i64* %prop.addr, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 102)
  %cmp7 = icmp eq i64 %3, %call6
  br i1 %cmp7, label %if.then.9, label %if.end.14

if.then.9:                                        ; preds = %if.else
  %4 = load i64, i64* %val.addr, align 8
  %call10 = call i64 @SYMBOL_NAME(i64 %4)
  %call11 = call i64 @Fdowncase(i64 %call10)
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %call13 = call i64 @Fintern(i64 %call11, i64 %call12)
  store i64 %call13, i64* %val.addr, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.9, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.then.4
  %5 = load i64, i64* %val.addr, align 8
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define internal i64 @font_prop_validate_style(i64 %style, i64 %val) #0 {
entry:
  %style.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %prop = alloca i32, align 4
  %n = alloca i64, align 8
  %elt = alloca i64, align 8
  %n58 = alloca i32, align 4
  store i64 %style, i64* %style.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %style.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 138)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load i64, i64* %style.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 119)
  %cmp2 = icmp eq i64 %1, %call1
  %cond = select i1 %cmp2, i32 6, i32 7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond3 = phi i32 [ 5, %cond.true ], [ %cond, %cond.false ]
  store i32 %cond3, i32* %prop, align 4
  %2 = load i64, i64* %val.addr, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and4 = and i32 %conv, -5
  %cmp5 = icmp eq i32 %and4, 2
  br i1 %cmp5, label %if.then, label %if.else.52

if.then:                                          ; preds = %cond.end
  %3 = load i64, i64* %val.addr, align 8
  %shr = ashr i64 %3, 2
  store i64 %shr, i64* %n, align 8
  %4 = load i64, i64* @font_style_table, align 8
  %5 = load i32, i32* %prop, align 4
  %sub = sub i32 %5, 5
  %conv7 = zext i32 %sub to i64
  %call8 = call i64 @AREF(i64 %4, i64 %conv7)
  call void @CHECK_VECTOR(i64 %call8)
  %6 = load i64, i64* %n, align 8
  %shr9 = ashr i64 %6, 4
  %and10 = and i64 %shr9, 15
  %7 = load i64, i64* @font_style_table, align 8
  %8 = load i32, i32* %prop, align 4
  %sub11 = sub i32 %8, 5
  %conv12 = zext i32 %sub11 to i64
  %call13 = call i64 @AREF(i64 %7, i64 %conv12)
  %call14 = call i64 @ASIZE(i64 %call13)
  %cmp15 = icmp sge i64 %and10, %call14
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then
  %call18 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call18, i64* %val.addr, align 8
  br label %if.end.51

if.else:                                          ; preds = %if.then
  %9 = load i64, i64* @font_style_table, align 8
  %10 = load i32, i32* %prop, align 4
  %sub19 = sub i32 %10, 5
  %conv20 = zext i32 %sub19 to i64
  %call21 = call i64 @AREF(i64 %9, i64 %conv20)
  %11 = load i64, i64* %n, align 8
  %shr22 = ashr i64 %11, 4
  %and23 = and i64 %shr22, 15
  %call24 = call i64 @AREF(i64 %call21, i64 %and23)
  store i64 %call24, i64* %elt, align 8
  %12 = load i64, i64* %elt, align 8
  call void @CHECK_VECTOR(i64 %12)
  %13 = load i64, i64* %n, align 8
  %and25 = and i64 %13, 15
  %add = add nsw i64 %and25, 1
  %14 = load i64, i64* %elt, align 8
  %call26 = call i64 @ASIZE(i64 %14)
  %cmp27 = icmp sge i64 %add, %call26
  br i1 %cmp27, label %if.then.29, label %if.else.31

if.then.29:                                       ; preds = %if.else
  %call30 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call30, i64* %val.addr, align 8
  br label %if.end.50

if.else.31:                                       ; preds = %if.else
  %15 = load i64, i64* %elt, align 8
  %call32 = call i64 @AREF(i64 %15, i64 0)
  %and33 = and i64 %call32, 7
  %conv34 = trunc i64 %and33 to i32
  %and35 = and i32 %conv34, -5
  %cmp36 = icmp eq i32 %and35, 2
  br i1 %cmp36, label %cond.true.38, label %cond.false.39

cond.true.38:                                     ; preds = %if.else.31
  br label %cond.end.42

cond.false.39:                                    ; preds = %if.else.31
  %call40 = call i64 @builtin_lisp_symbol(i32 559)
  %16 = load i64, i64* %elt, align 8
  %call41 = call i64 @AREF(i64 %16, i64 0)
  %17 = call i64 @wrong_type_argument(i64 %call40, i64 %call41) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.42

cond.end.42:                                      ; preds = %18, %cond.true.38
  %19 = load i64, i64* %elt, align 8
  %call43 = call i64 @AREF(i64 %19, i64 0)
  %shr44 = ashr i64 %call43, 2
  %20 = load i64, i64* %n, align 8
  %shr45 = ashr i64 %20, 8
  %cmp46 = icmp ne i64 %shr44, %shr45
  br i1 %cmp46, label %if.then.48, label %if.end

if.then.48:                                       ; preds = %cond.end.42
  %call49 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call49, i64* %val.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.48, %cond.end.42
  br label %if.end.50

if.end.50:                                        ; preds = %if.end, %if.then.29
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.17
  br label %if.end.72

if.else.52:                                       ; preds = %cond.end
  %21 = load i64, i64* %val.addr, align 8
  %and53 = and i64 %21, 7
  %conv54 = trunc i64 %and53 to i32
  %cmp55 = icmp eq i32 %conv54, 0
  br i1 %cmp55, label %if.then.57, label %if.else.69

if.then.57:                                       ; preds = %if.else.52
  %22 = load i32, i32* %prop, align 4
  %23 = load i64, i64* %val.addr, align 8
  %call59 = call i32 @font_style_to_value(i32 %22, i64 %23, i1 zeroext false)
  store i32 %call59, i32* %n58, align 4
  %24 = load i32, i32* %n58, align 4
  %cmp60 = icmp sge i32 %24, 0
  br i1 %cmp60, label %cond.true.62, label %cond.false.65

cond.true.62:                                     ; preds = %if.then.57
  %25 = load i32, i32* %n58, align 4
  %conv63 = sext i32 %25 to i64
  %shl = shl i64 %conv63, 2
  %add64 = add i64 %shl, 2
  br label %cond.end.67

cond.false.65:                                    ; preds = %if.then.57
  %call66 = call i64 @builtin_lisp_symbol(i32 372)
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.false.65, %cond.true.62
  %cond68 = phi i64 [ %add64, %cond.true.62 ], [ %call66, %cond.false.65 ]
  store i64 %cond68, i64* %val.addr, align 8
  br label %if.end.71

if.else.69:                                       ; preds = %if.else.52
  %call70 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call70, i64* %val.addr, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.69, %cond.end.67
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.end.51
  %26 = load i64, i64* %val.addr, align 8
  ret i64 %26
}

; Function Attrs: nounwind uwtable
define internal i64 @font_prop_validate_non_neg(i64 %prop, i64 %val) #0 {
entry:
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %val.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 7
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load i64, i64* %val.addr, align 8
  %call2 = call double @XFLOAT_DATA(i64 %2)
  %cmp3 = fcmp oge double %call2, 0.000000e+00
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %val.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %call5 = call i64 @builtin_lisp_symbol(i32 372)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %call5, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define internal i64 @font_prop_validate_otf(i64 %prop, i64 %val) #0 {
entry:
  %retval = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %tmp = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  %0 = load i64, i64* %val.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %val.addr, align 8
  %sub = sub nsw i64 %1, 3
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %3, i32 0, i32 0
  %4 = load i64, i64* %car, align 8
  %and3 = and i64 %4, 7
  %conv4 = trunc i64 %and3 to i32
  %cmp5 = icmp eq i32 %conv4, 0
  br i1 %cmp5, label %if.end.9, label %if.then.7

if.then.7:                                        ; preds = %if.end
  %call8 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call8, i64* %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %5 = load i64, i64* %val.addr, align 8
  %sub10 = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub10 to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 1
  %cdr = bitcast %union.anon.10* %u to i64*
  %8 = load i64, i64* %cdr, align 8
  store i64 %8, i64* %tail, align 8
  %9 = load i64, i64* %tail, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %9, %call11
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.9
  %10 = load i64, i64* %val.addr, align 8
  store i64 %10, i64* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.9
  %11 = load i64, i64* %tail, align 8
  %and16 = and i64 %11, 7
  %conv17 = trunc i64 %and16 to i32
  %cmp18 = icmp eq i32 %conv17, 3
  br i1 %cmp18, label %lor.lhs.false, label %if.then.26

lor.lhs.false:                                    ; preds = %if.end.15
  %12 = load i64, i64* %val.addr, align 8
  %sub20 = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub20 to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car21, align 8
  %and22 = and i64 %15, 7
  %conv23 = trunc i64 %and22 to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %if.end.28, label %if.then.26

if.then.26:                                       ; preds = %lor.lhs.false, %if.end.15
  %call27 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call27, i64* %retval
  br label %return

if.end.28:                                        ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.72, %if.end.28
  %16 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %16, 2
  br i1 %cmp29, label %for.body, label %for.end.73

for.body:                                         ; preds = %for.cond
  %17 = load i64, i64* %tail, align 8
  %sub31 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub31 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u32 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr33 = bitcast %union.anon.10* %u32 to i64*
  %20 = load i64, i64* %cdr33, align 8
  store i64 %20, i64* %tail, align 8
  %21 = load i64, i64* %tail, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp35 = icmp eq i64 %21, %call34
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %for.body
  %22 = load i64, i64* %val.addr, align 8
  store i64 %22, i64* %retval
  br label %return

if.end.38:                                        ; preds = %for.body
  %23 = load i64, i64* %tail, align 8
  %and39 = and i64 %23, 7
  %conv40 = trunc i64 %and39 to i32
  %cmp41 = icmp eq i32 %conv40, 3
  br i1 %cmp41, label %if.end.45, label %if.then.43

if.then.43:                                       ; preds = %if.end.38
  %call44 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call44, i64* %retval
  br label %return

if.end.45:                                        ; preds = %if.end.38
  %24 = load i64, i64* %tail, align 8
  %sub46 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub46 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %car47 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 0
  %27 = load i64, i64* %car47, align 8
  store i64 %27, i64* %tmp, align 8
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc, %if.end.45
  %28 = load i64, i64* %tmp, align 8
  %and49 = and i64 %28, 7
  %conv50 = trunc i64 %and49 to i32
  %cmp51 = icmp eq i32 %conv50, 3
  br i1 %cmp51, label %for.body.53, label %for.end

for.body.53:                                      ; preds = %for.cond.48
  %29 = load i64, i64* %tmp, align 8
  %sub54 = sub nsw i64 %29, 3
  %30 = inttoptr i64 %sub54 to i8*
  %31 = bitcast i8* %30 to %struct.Lisp_Cons*
  %car55 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %31, i32 0, i32 0
  %32 = load i64, i64* %car55, align 8
  %and56 = and i64 %32, 7
  %conv57 = trunc i64 %and56 to i32
  %cmp58 = icmp eq i32 %conv57, 0
  br i1 %cmp58, label %if.end.62, label %if.then.60

if.then.60:                                       ; preds = %for.body.53
  %call61 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call61, i64* %retval
  br label %return

if.end.62:                                        ; preds = %for.body.53
  br label %for.inc

for.inc:                                          ; preds = %if.end.62
  %33 = load i64, i64* %tmp, align 8
  %sub63 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub63 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %u64 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 1
  %cdr65 = bitcast %union.anon.10* %u64 to i64*
  %36 = load i64, i64* %cdr65, align 8
  store i64 %36, i64* %tmp, align 8
  br label %for.cond.48

for.end:                                          ; preds = %for.cond.48
  %37 = load i64, i64* %tmp, align 8
  %call66 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp67 = icmp eq i64 %37, %call66
  br i1 %cmp67, label %if.end.71, label %if.then.69

if.then.69:                                       ; preds = %for.end
  %call70 = call i64 @builtin_lisp_symbol(i32 372)
  store i64 %call70, i64* %retval
  br label %return

if.end.71:                                        ; preds = %for.end
  br label %for.inc.72

for.inc.72:                                       ; preds = %if.end.71
  %38 = load i32, i32* %i, align 4
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end.73:                                       ; preds = %for.cond
  %39 = load i64, i64* %val.addr, align 8
  store i64 %39, i64* %retval
  br label %return

return:                                           ; preds = %for.end.73, %if.then.69, %if.then.60, %if.then.43, %if.then.37, %if.then.26, %if.then.14, %if.then.7, %if.then
  %40 = load i64, i64* %retval
  ret i64 %40
}

declare i8* @record_xmalloc(i64) #1

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @font_compare(i8* %d1, i8* %d2) #0 {
entry:
  %retval = alloca i32, align 4
  %d1.addr = alloca i8*, align 8
  %d2.addr = alloca i8*, align 8
  %data1 = alloca %struct.font_sort_data*, align 8
  %data2 = alloca %struct.font_sort_data*, align 8
  store i8* %d1, i8** %d1.addr, align 8
  store i8* %d2, i8** %d2.addr, align 8
  %0 = load i8*, i8** %d1.addr, align 8
  %1 = bitcast i8* %0 to %struct.font_sort_data*
  store %struct.font_sort_data* %1, %struct.font_sort_data** %data1, align 8
  %2 = load i8*, i8** %d2.addr, align 8
  %3 = bitcast i8* %2 to %struct.font_sort_data*
  store %struct.font_sort_data* %3, %struct.font_sort_data** %data2, align 8
  %4 = load %struct.font_sort_data*, %struct.font_sort_data** %data1, align 8
  %score = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %4, i32 0, i32 0
  %5 = load i32, i32* %score, align 4
  %6 = load %struct.font_sort_data*, %struct.font_sort_data** %data2, align 8
  %score1 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %6, i32 0, i32 0
  %7 = load i32, i32* %score1, align 4
  %cmp = icmp ult i32 %5, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %8 = load %struct.font_sort_data*, %struct.font_sort_data** %data1, align 8
  %score2 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %8, i32 0, i32 0
  %9 = load i32, i32* %score2, align 4
  %10 = load %struct.font_sort_data*, %struct.font_sort_data** %data2, align 8
  %score3 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %10, i32 0, i32 0
  %11 = load i32, i32* %score3, align 4
  %cmp4 = icmp ugt i32 %9, %11
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end
  %12 = load %struct.font_sort_data*, %struct.font_sort_data** %data1, align 8
  %font_driver_preference = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %12, i32 0, i32 1
  %13 = load i32, i32* %font_driver_preference, align 4
  %14 = load %struct.font_sort_data*, %struct.font_sort_data** %data2, align 8
  %font_driver_preference7 = getelementptr inbounds %struct.font_sort_data, %struct.font_sort_data* %14, i32 0, i32 1
  %15 = load i32, i32* %font_driver_preference7, align 4
  %sub = sub nsw i32 %13, %15
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

declare i64 @string_char_to_byte(i64, i64) #1

declare i32 @face_at_string_position(%struct.window*, i64, i64, i64, i64*, i32, i1 zeroext) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }
attributes #7 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
