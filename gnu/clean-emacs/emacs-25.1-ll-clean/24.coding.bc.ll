; ModuleID = './src/coding.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.coding_system = type { i64, i32, i32, %union.anon, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type { %struct.ccl_program }
%struct.ccl_program = type { i64, i32, i64*, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i8 }
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.charset = type { i32, i64, i32, [15 x i32], i8*, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [190 x i8], i32 }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.Lisp_Hash_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.hash_table_test, %struct.Lisp_Hash_Table* }
%struct.hash_table_test = type { i64, i64, i64, i1 (%struct.hash_table_test*, i64, i64)*, i64 (%struct.hash_table_test*, i64)* }
%struct.undecided_spec = type { i32, i32, i8 }
%struct.iso_2022_spec = type { i32, [2 x i32], [4 x i32], i32, i8, %struct.composition_status }
%struct.composition_status = type { i32, i32, i8, i32, i32, i32, [68 x i32] }
%struct.utf_16_spec = type { i32, i32, i32 }
%struct.Lisp_Cons = type { i64, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.emacs_mule_spec = type { %struct.composition_status }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.kboard = type opaque
%struct.image_cache = type opaque
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type opaque
%struct.redisplay_interface = type opaque
%struct.frame = type opaque
%struct.glyph = type opaque
%struct.window = type opaque
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.1, i16, i16, i8*, i8*, i8* }
%union.anon.1 = type { i64 ()* }

@Vcoding_system_hash_table = common global i64 0, align 8
@globals = external global %struct.emacs_globals, align 8
@Vemacs_mule_charset_list = external global i64, align 8
@Viso_2022_charset_list = external global i64, align 8
@system_eol_type = internal global i64 0, align 8
@current_buffer = external global %struct.buffer*, align 8
@coding_priorities = internal global [21 x i32] zeroinitializer, align 16
@coding_categories = internal global [21 x %struct.coding_system] zeroinitializer, align 16
@charset_map_loaded = external global i8, align 1
@Vsjis_coding_system = internal global i64 0, align 8
@charset_table = external global %struct.charset*, align 8
@.str = private unnamed_addr constant [18 x i8] c"Invalid code: %ld\00", align 1
@Vcharset_hash_table = external global i64, align 8
@.str.1 = private unnamed_addr constant [39 x i8] c"Can't encode by shift_jis encoding: %c\00", align 1
@Vbig5_coding_system = internal global i64 0, align 8
@.str.2 = private unnamed_addr constant [34 x i8] c"Can't encode by Big5 encoding: %c\00", align 1
@charset_ascii = external global i32, align 4
@safe_terminal_coding = common global %struct.coding_system zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [18 x i8] c"Too few arguments\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"Invalid first argument\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Too few arguments for operation `%s'\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"Invalid argument %ld of operation `%s'\00", align 1
@Vcoding_category_table = internal global i64 0, align 8
@.str.7 = private unnamed_addr constant [21 x i8] c"Invalid charset-list\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"Can't handle charset `%s'\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Invalid endian: %s\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c"Invalid graphic register number: %ld\00", align 1
@.str.11 = private unnamed_addr constant [39 x i8] c"There should be three or four charsets\00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"Dimension of charset %s is not one\00", align 1
@.str.13 = private unnamed_addr constant [35 x i8] c"Dimension of charset %s is not two\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"There should be just two charsets\00", align 1
@.str.15 = private unnamed_addr constant [31 x i8] c"Invalid coding system type: %s\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"Invalid eol-type\00", align 1
@.str.17 = private unnamed_addr constant [30 x i8] c"define-coding-system-internal\00", align 1
@iso_code_class = internal global [256 x i32] zeroinitializer, align 16
@emacs_mule_bytes = common global [256 x i8] zeroinitializer, align 16
@Vcode_conversion_reused_workbuf = internal global i64 0, align 8
@Vcode_conversion_workbuf_name = internal global i64 0, align 8
@.str.18 = private unnamed_addr constant [24 x i8] c" *code-conversion-work*\00", align 1
@reused_workbuf_in_use = internal global i8 0, align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"Invalid coding system\00", align 1
@.str.20 = private unnamed_addr constant [22 x i8] c"coding-category-iso-7\00", align 1
@.str.21 = private unnamed_addr constant [28 x i8] c"coding-category-iso-7-tight\00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"coding-category-iso-8-1\00", align 1
@.str.23 = private unnamed_addr constant [24 x i8] c"coding-category-iso-8-2\00", align 1
@.str.24 = private unnamed_addr constant [27 x i8] c"coding-category-iso-7-else\00", align 1
@.str.25 = private unnamed_addr constant [27 x i8] c"coding-category-iso-8-else\00", align 1
@.str.26 = private unnamed_addr constant [27 x i8] c"coding-category-utf-8-auto\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"coding-category-utf-8\00", align 1
@.str.28 = private unnamed_addr constant [26 x i8] c"coding-category-utf-8-sig\00", align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"coding-category-utf-16-be\00", align 1
@.str.30 = private unnamed_addr constant [28 x i8] c"coding-category-utf-16-auto\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"coding-category-utf-16-le\00", align 1
@.str.32 = private unnamed_addr constant [32 x i8] c"coding-category-utf-16-be-nosig\00", align 1
@.str.33 = private unnamed_addr constant [32 x i8] c"coding-category-utf-16-le-nosig\00", align 1
@.str.34 = private unnamed_addr constant [24 x i8] c"coding-category-charset\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"coding-category-sjis\00", align 1
@.str.36 = private unnamed_addr constant [21 x i8] c"coding-category-big5\00", align 1
@.str.37 = private unnamed_addr constant [20 x i8] c"coding-category-ccl\00", align 1
@.str.38 = private unnamed_addr constant [27 x i8] c"coding-category-emacs-mule\00", align 1
@.str.39 = private unnamed_addr constant [25 x i8] c"coding-category-raw-text\00", align 1
@.str.40 = private unnamed_addr constant [26 x i8] c"coding-category-undecided\00", align 1
@syms_of_coding.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.41 = private unnamed_addr constant [19 x i8] c"coding-system-list\00", align 1
@syms_of_coding.o_fwd.42 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.43 = private unnamed_addr constant [20 x i8] c"coding-system-alist\00", align 1
@syms_of_coding.o_fwd.44 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.45 = private unnamed_addr constant [21 x i8] c"coding-category-list\00", align 1
@syms_of_coding.o_fwd.46 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.47 = private unnamed_addr constant [23 x i8] c"coding-system-for-read\00", align 1
@syms_of_coding.o_fwd.48 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.49 = private unnamed_addr constant [24 x i8] c"coding-system-for-write\00", align 1
@syms_of_coding.o_fwd.50 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.51 = private unnamed_addr constant [24 x i8] c"last-coding-system-used\00", align 1
@syms_of_coding.o_fwd.52 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.53 = private unnamed_addr constant [27 x i8] c"last-code-conversion-error\00", align 1
@syms_of_coding.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.54 = private unnamed_addr constant [23 x i8] c"inhibit-eol-conversion\00", align 1
@syms_of_coding.b_fwd.55 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.56 = private unnamed_addr constant [30 x i8] c"inherit-process-coding-system\00", align 1
@syms_of_coding.o_fwd.57 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.58 = private unnamed_addr constant [25 x i8] c"file-coding-system-alist\00", align 1
@syms_of_coding.o_fwd.59 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.60 = private unnamed_addr constant [28 x i8] c"process-coding-system-alist\00", align 1
@syms_of_coding.o_fwd.61 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.62 = private unnamed_addr constant [28 x i8] c"network-coding-system-alist\00", align 1
@syms_of_coding.o_fwd.63 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.64 = private unnamed_addr constant [21 x i8] c"locale-coding-system\00", align 1
@syms_of_coding.o_fwd.65 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.66 = private unnamed_addr constant [18 x i8] c"eol-mnemonic-unix\00", align 1
@.str.67 = private unnamed_addr constant [2 x i8] c":\00", align 1
@syms_of_coding.o_fwd.68 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.69 = private unnamed_addr constant [17 x i8] c"eol-mnemonic-dos\00", align 1
@.str.70 = private unnamed_addr constant [2 x i8] c"\5C\00", align 1
@syms_of_coding.o_fwd.71 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.72 = private unnamed_addr constant [17 x i8] c"eol-mnemonic-mac\00", align 1
@.str.73 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@syms_of_coding.o_fwd.74 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.75 = private unnamed_addr constant [23 x i8] c"eol-mnemonic-undecided\00", align 1
@syms_of_coding.o_fwd.76 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.77 = private unnamed_addr constant [29 x i8] c"enable-character-translation\00", align 1
@syms_of_coding.o_fwd.78 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.79 = private unnamed_addr constant [38 x i8] c"standard-translation-table-for-decode\00", align 1
@syms_of_coding.o_fwd.80 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.81 = private unnamed_addr constant [38 x i8] c"standard-translation-table-for-encode\00", align 1
@syms_of_coding.o_fwd.82 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.83 = private unnamed_addr constant [23 x i8] c"charset-revision-table\00", align 1
@syms_of_coding.o_fwd.84 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.85 = private unnamed_addr constant [30 x i8] c"default-process-coding-system\00", align 1
@syms_of_coding.o_fwd.86 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.87 = private unnamed_addr constant [23 x i8] c"latin-extra-code-table\00", align 1
@syms_of_coding.o_fwd.88 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.89 = private unnamed_addr constant [35 x i8] c"select-safe-coding-system-function\00", align 1
@syms_of_coding.b_fwd.90 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.91 = private unnamed_addr constant [30 x i8] c"coding-system-require-warning\00", align 1
@syms_of_coding.b_fwd.92 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.93 = private unnamed_addr constant [29 x i8] c"inhibit-iso-escape-detection\00", align 1
@syms_of_coding.b_fwd.94 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.95 = private unnamed_addr constant [28 x i8] c"inhibit-null-byte-detection\00", align 1
@syms_of_coding.b_fwd.96 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.97 = private unnamed_addr constant [27 x i8] c"disable-ascii-optimization\00", align 1
@syms_of_coding.o_fwd.98 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.99 = private unnamed_addr constant [28 x i8] c"translation-table-for-input\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c":coding-type\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c":for-unibyte\00", align 1
@.str.102 = private unnamed_addr constant [11 x i8] c":docstring\00", align 1
@.str.103 = private unnamed_addr constant [157 x i8] c"Do no conversion.\0A\0AWhen you visit a file with this coding, the file is read into a\0Aunibyte buffer as is, thus each byte of a file is treated as a\0Acharacter.\00", align 1
@.str.104 = private unnamed_addr constant [10 x i8] c":eol-type\00", align 1
@.str.105 = private unnamed_addr constant [14 x i8] c":charset-list\00", align 1
@.str.106 = private unnamed_addr constant [61 x i8] c"No conversion on encoding, automatic conversion on decoding.\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"Unknown error\00", align 1
@iso_charset_table = external global [3 x [2 x [128 x i32]]], align 16
@charset_jisx0201_roman = external global i32, align 4
@charset_jisx0208_1978 = external global i32, align 4
@charset_jisx0208 = external global i32, align 4
@.str.108 = private unnamed_addr constant [5 x i8] c"()*+\00", align 1
@.str.109 = private unnamed_addr constant [5 x i8] c",-./\00", align 1
@charset_work = external global i64, align 8
@.str.110 = private unnamed_addr constant [10 x i8] c"iso-8859-\00", align 1
@.str.111 = private unnamed_addr constant [11 x i8] c"iso-latin-\00", align 1
@emacs_mule_charset = external global [256 x i32], align 16
@charset_eight_bit = external global i32, align 4
@suffixes = internal constant [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i32 0, i32 0)], align 16
@.str.112 = private unnamed_addr constant [6 x i8] c"-unix\00", align 1
@.str.113 = private unnamed_addr constant [5 x i8] c"-dos\00", align 1
@.str.114 = private unnamed_addr constant [5 x i8] c"-mac\00", align 1
@.str.115 = private unnamed_addr constant [16 x i8] c"coding-system-p\00", align 1
@Scoding_system_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcoding_system_p }, i16 1, i16 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.115, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.116 = private unnamed_addr constant [19 x i8] c"read-coding-system\00", align 1
@Sread_coding_system = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fread_coding_system }, i16 1, i16 2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.116, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.117 = private unnamed_addr constant [27 x i8] c"read-non-nil-coding-system\00", align 1
@Sread_non_nil_coding_system = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fread_non_nil_coding_system }, i16 1, i16 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.117, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.118 = private unnamed_addr constant [20 x i8] c"check-coding-system\00", align 1
@Scheck_coding_system = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcheck_coding_system }, i16 1, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.118, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.119 = private unnamed_addr constant [21 x i8] c"detect-coding-region\00", align 1
@Sdetect_coding_region = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fdetect_coding_region }, i16 2, i16 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.119, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.120 = private unnamed_addr constant [21 x i8] c"detect-coding-string\00", align 1
@Sdetect_coding_string = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fdetect_coding_string }, i16 1, i16 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.120, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.121 = private unnamed_addr constant [36 x i8] c"find-coding-systems-region-internal\00", align 1
@Sfind_coding_systems_region_internal = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Ffind_coding_systems_region_internal }, i16 2, i16 3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.121, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.122 = private unnamed_addr constant [26 x i8] c"unencodable-char-position\00", align 1
@Sunencodable_char_position = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64, i64)* @Funencodable_char_position }, i16 3, i16 5, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.122, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.123 = private unnamed_addr constant [28 x i8] c"check-coding-systems-region\00", align 1
@Scheck_coding_systems_region = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fcheck_coding_systems_region }, i16 3, i16 3, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.123, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.124 = private unnamed_addr constant [21 x i8] c"decode-coding-region\00", align 1
@.str.125 = private unnamed_addr constant [19 x i8] c"r\0AzCoding system: \00", align 1
@Sdecode_coding_region = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fdecode_coding_region }, i16 3, i16 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.125, i32 0, i32 0), i8* null }, align 8
@.str.126 = private unnamed_addr constant [21 x i8] c"encode-coding-region\00", align 1
@Sencode_coding_region = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fencode_coding_region }, i16 3, i16 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.125, i32 0, i32 0), i8* null }, align 8
@.str.127 = private unnamed_addr constant [21 x i8] c"decode-coding-string\00", align 1
@Sdecode_coding_string = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fdecode_coding_string }, i16 2, i16 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.127, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.128 = private unnamed_addr constant [21 x i8] c"encode-coding-string\00", align 1
@Sencode_coding_string = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64, i64)* } { i64 (i64, i64, i64, i64)* @Fencode_coding_string }, i16 2, i16 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.128, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.129 = private unnamed_addr constant [17 x i8] c"decode-sjis-char\00", align 1
@Sdecode_sjis_char = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fdecode_sjis_char }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.129, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.130 = private unnamed_addr constant [17 x i8] c"encode-sjis-char\00", align 1
@Sencode_sjis_char = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fencode_sjis_char }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.130, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.131 = private unnamed_addr constant [17 x i8] c"decode-big5-char\00", align 1
@Sdecode_big5_char = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fdecode_big5_char }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.131, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.132 = private unnamed_addr constant [17 x i8] c"encode-big5-char\00", align 1
@Sencode_big5_char = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fencode_big5_char }, i16 1, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.132, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.133 = private unnamed_addr constant [36 x i8] c"set-terminal-coding-system-internal\00", align 1
@Sset_terminal_coding_system_internal = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_terminal_coding_system_internal }, i16 1, i16 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.133, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.134 = private unnamed_addr constant [41 x i8] c"set-safe-terminal-coding-system-internal\00", align 1
@Sset_safe_terminal_coding_system_internal = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fset_safe_terminal_coding_system_internal }, i16 1, i16 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.134, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.135 = private unnamed_addr constant [23 x i8] c"terminal-coding-system\00", align 1
@Sterminal_coding_system = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fterminal_coding_system }, i16 0, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.135, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.136 = private unnamed_addr constant [36 x i8] c"set-keyboard-coding-system-internal\00", align 1
@Sset_keyboard_coding_system_internal = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fset_keyboard_coding_system_internal }, i16 1, i16 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.136, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.137 = private unnamed_addr constant [23 x i8] c"keyboard-coding-system\00", align 1
@Skeyboard_coding_system = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fkeyboard_coding_system }, i16 0, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.137, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.138 = private unnamed_addr constant [29 x i8] c"find-operation-coding-system\00", align 1
@Sfind_operation_coding_system = internal global { %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64*)* } { i64 (i64, i64*)* @Ffind_operation_coding_system }, i16 1, i16 -2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.138, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.139 = private unnamed_addr constant [27 x i8] c"set-coding-system-priority\00", align 1
@Sset_coding_system_priority = internal global { %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64*)* } { i64 (i64, i64*)* @Fset_coding_system_priority }, i16 0, i16 -2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.139, i32 0, i32 0), i8* null, i8* null }, align 8
@Sdefine_coding_system_internal = internal global { %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64*)* } { i64 (i64, i64*)* @Fdefine_coding_system_internal }, i16 13, i16 -2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.140 = private unnamed_addr constant [27 x i8] c"define-coding-system-alias\00", align 1
@Sdefine_coding_system_alias = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fdefine_coding_system_alias }, i16 2, i16 2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.140, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.141 = private unnamed_addr constant [18 x i8] c"coding-system-put\00", align 1
@Scoding_system_put = internal global { %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64, i64)* } { i64 (i64, i64, i64)* @Fcoding_system_put }, i16 3, i16 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.141, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.142 = private unnamed_addr constant [19 x i8] c"coding-system-base\00", align 1
@Scoding_system_base = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcoding_system_base }, i16 1, i16 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.142, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.143 = private unnamed_addr constant [20 x i8] c"coding-system-plist\00", align 1
@Scoding_system_plist = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcoding_system_plist }, i16 1, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.143, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.144 = private unnamed_addr constant [22 x i8] c"coding-system-aliases\00", align 1
@Scoding_system_aliases = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcoding_system_aliases }, i16 1, i16 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.144, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.145 = private unnamed_addr constant [23 x i8] c"coding-system-eol-type\00", align 1
@Scoding_system_eol_type = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcoding_system_eol_type }, i16 1, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.145, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.146 = private unnamed_addr constant [28 x i8] c"coding-system-priority-list\00", align 1
@Scoding_system_priority_list = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcoding_system_priority_list }, i16 0, i16 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.146, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind uwtable
define void @setup_coding_system(i64 %coding_system, %struct.coding_system* %coding) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %coding.addr = alloca %struct.coding_system*, align 8
  %attrs = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %coding_type = alloca i64, align 8
  %val = alloca i64, align 8
  %i = alloca i32, align 4
  %flags = alloca i32, align 4
  %tail = alloca i64, align 8
  %safe_charsets376 = alloca i64, align 8
  %max_charset_id377 = alloca i32, align 4
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 958)
  store i64 %call1, i64* %coding_system.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %2 = load i64, i64* %coding_system.addr, align 8
  %call3 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call2, i64 %2, i64* null)
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 0
  store i64 %call3, i64* %id, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id4 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 0
  %5 = load i64, i64* %id4, align 8
  %cmp5 = icmp slt i64 %5, 0
  br i1 %cmp5, label %if.then.6, label %if.end.11

if.then.6:                                        ; preds = %do.body
  %6 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcheck_coding_system(i64 %6)
  %7 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call8 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %7)
  %8 = load i64, i64* %coding_system.addr, align 8
  %call9 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call8, i64 %8, i64* null)
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id10 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 0
  store i64 %call9, i64* %id10, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.6, %do.body
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id12 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 0
  %11 = load i64, i64* %id12, align 8
  %cmp13 = icmp slt i64 %11, 0
  br i1 %cmp13, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.end.11
  %call15 = call i64 @builtin_lisp_symbol(i32 280)
  %12 = load i64, i64* %coding_system.addr, align 8
  %13 = call i64 @wrong_type_argument(i64 %call15, i64 %12) #6
  unreachable

if.end.16:                                        ; preds = %if.end.11
  br label %do.end

do.end:                                           ; preds = %if.end.16
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call17 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id18 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id18, align 8
  %call19 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call17, i64 %16)
  %call20 = call i64 @AREF(i64 %call19, i64 0)
  store i64 %call20, i64* %attrs, align 8
  %17 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %17 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %call21 = call i64 @builtin_lisp_symbol(i32 973)
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %18 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call22 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %18)
  %19 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id23 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %19, i32 0, i32 0
  %20 = load i64, i64* %id23, align 8
  %call24 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call22, i64 %20)
  %call25 = call i64 @AREF(i64 %call24, i64 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call21, %cond.true ], [ %call25, %cond.false ]
  store i64 %cond, i64* %eol_type, align 8
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 1
  %bf.load = load i32, i32* %mode, align 8
  %bf.clear = and i32 %bf.load, -507905
  store i32 %bf.clear, i32* %mode, align 8
  %22 = load i64, i64* %eol_type, align 8
  %call26 = call zeroext i1 @VECTORP(i64 %22)
  br i1 %call26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %cond.end
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 1
  %bf.load28 = load i32, i32* %common_flags, align 8
  %bf.clear29 = and i32 %bf.load28, -16384
  %bf.set = or i32 %bf.clear29, 5120
  store i32 %bf.set, i32* %common_flags, align 8
  br label %if.end.42

if.else:                                          ; preds = %cond.end
  %24 = load i64, i64* %eol_type, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp31 = icmp eq i64 %24, %call30
  br i1 %cmp31, label %if.else.37, label %if.then.32

if.then.32:                                       ; preds = %if.else
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags33 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %25, i32 0, i32 1
  %bf.load34 = load i32, i32* %common_flags33, align 8
  %bf.clear35 = and i32 %bf.load34, -16384
  %bf.set36 = or i32 %bf.clear35, 3072
  store i32 %bf.set36, i32* %common_flags33, align 8
  br label %if.end.41

if.else.37:                                       ; preds = %if.else
  %26 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags38 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 1
  %bf.load39 = load i32, i32* %common_flags38, align 8
  %bf.clear40 = and i32 %bf.load39, -16384
  store i32 %bf.clear40, i32* %common_flags38, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.37, %if.then.32
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.27
  %27 = load i64, i64* %attrs, align 8
  %call43 = call i64 @AREF(i64 %27, i64 9)
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp45 = icmp eq i64 %call43, %call44
  br i1 %cmp45, label %if.end.53, label %if.then.46

if.then.46:                                       ; preds = %if.end.42
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags47 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %28, i32 0, i32 1
  %bf.load48 = load i32, i32* %common_flags47, align 8
  %bf.clear49 = and i32 %bf.load48, 16383
  %or = or i32 %bf.clear49, 1024
  %bf.load50 = load i32, i32* %common_flags47, align 8
  %bf.value = and i32 %or, 16383
  %bf.clear51 = and i32 %bf.load50, -16384
  %bf.set52 = or i32 %bf.clear51, %bf.value
  store i32 %bf.set52, i32* %common_flags47, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.46, %if.end.42
  %29 = load i64, i64* %attrs, align 8
  %call54 = call i64 @AREF(i64 %29, i64 10)
  %call55 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp56 = icmp eq i64 %call54, %call55
  br i1 %cmp56, label %if.end.66, label %if.then.57

if.then.57:                                       ; preds = %if.end.53
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags58 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %30, i32 0, i32 1
  %bf.load59 = load i32, i32* %common_flags58, align 8
  %bf.clear60 = and i32 %bf.load59, 16383
  %or61 = or i32 %bf.clear60, 2048
  %bf.load62 = load i32, i32* %common_flags58, align 8
  %bf.value63 = and i32 %or61, 16383
  %bf.clear64 = and i32 %bf.load62, -16384
  %bf.set65 = or i32 %bf.clear64, %bf.value63
  store i32 %bf.set65, i32* %common_flags58, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.57, %if.end.53
  %31 = load i64, i64* %attrs, align 8
  %call67 = call i64 @AREF(i64 %31, i64 12)
  %call68 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp69 = icmp eq i64 %call67, %call68
  br i1 %cmp69, label %if.end.79, label %if.then.70

if.then.70:                                       ; preds = %if.end.66
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags71 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %32, i32 0, i32 1
  %bf.load72 = load i32, i32* %common_flags71, align 8
  %bf.clear73 = and i32 %bf.load72, 16383
  %or74 = or i32 %bf.clear73, 256
  %bf.load75 = load i32, i32* %common_flags71, align 8
  %bf.value76 = and i32 %or74, 16383
  %bf.clear77 = and i32 %bf.load75, -16384
  %bf.set78 = or i32 %bf.clear77, %bf.value76
  store i32 %bf.set78, i32* %common_flags71, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.70, %if.end.66
  %33 = load i64, i64* %attrs, align 8
  %call80 = call i64 @AREF(i64 %33, i64 15)
  store i64 %call80, i64* %val, align 8
  %34 = load i64, i64* %val, align 8
  %call81 = call i64 @SCHARS(i64 %34)
  %sub = sub nsw i64 %call81, 1
  %conv = trunc i64 %sub to i32
  %35 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %max_charset_id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %35, i32 0, i32 2
  store i32 %conv, i32* %max_charset_id, align 4
  %36 = load i64, i64* %val, align 8
  %call82 = call i8* @SDATA(i64 %36)
  %37 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets = getelementptr inbounds %struct.coding_system, %struct.coding_system* %37, i32 0, i32 4
  store i8* %call82, i8** %safe_charsets, align 8
  %38 = load i64, i64* %attrs, align 8
  %call83 = call i64 @AREF(i64 %38, i64 11)
  %shr = ashr i64 %call83, 2
  %conv84 = trunc i64 %shr to i32
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %default_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %39, i32 0, i32 28
  store i32 %conv84, i32* %default_char, align 4
  %40 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %carryover_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %40, i32 0, i32 27
  store i32 0, i32* %carryover_bytes, align 4
  %41 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %raw_destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %41, i32 0, i32 1
  %bf.load85 = load i32, i32* %raw_destination, align 8
  %bf.clear86 = and i32 %bf.load85, -4194305
  store i32 %bf.clear86, i32* %raw_destination, align 8
  %42 = load i64, i64* %attrs, align 8
  %call87 = call i64 @AREF(i64 %42, i64 3)
  store i64 %call87, i64* %coding_type, align 8
  %43 = load i64, i64* %coding_type, align 8
  %call88 = call i64 @builtin_lisp_symbol(i32 958)
  %cmp89 = icmp eq i64 %43, %call88
  br i1 %cmp89, label %if.then.91, label %if.else.112

if.then.91:                                       ; preds = %if.end.79
  %44 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector = getelementptr inbounds %struct.coding_system, %struct.coding_system* %44, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* null, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector, align 8
  %45 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder = getelementptr inbounds %struct.coding_system, %struct.coding_system* %45, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_raw_text, void (%struct.coding_system*)** %decoder, align 8
  %46 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder = getelementptr inbounds %struct.coding_system, %struct.coding_system* %46, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_raw_text, i1 (%struct.coding_system*)** %encoder, align 8
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags92 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %47, i32 0, i32 1
  %bf.load93 = load i32, i32* %common_flags92, align 8
  %bf.clear94 = and i32 %bf.load93, 16383
  %or95 = or i32 %bf.clear94, 4096
  %bf.load96 = load i32, i32* %common_flags92, align 8
  %bf.value97 = and i32 %or95, 16383
  %bf.clear98 = and i32 %bf.load96, -16384
  %bf.set99 = or i32 %bf.clear98, %bf.value97
  store i32 %bf.set99, i32* %common_flags92, align 8
  %48 = load i64, i64* %attrs, align 8
  %call100 = call i64 @AREF(i64 %48, i64 27)
  %call101 = call i32 @encode_inhibit_flag(i64 %call100)
  %49 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %49, i32 0, i32 3
  %undecided = bitcast %union.anon* %spec to %struct.undecided_spec*
  %inhibit_nbd = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided, i32 0, i32 0
  store i32 %call101, i32* %inhibit_nbd, align 4
  %50 = load i64, i64* %attrs, align 8
  %call102 = call i64 @AREF(i64 %50, i64 28)
  %call103 = call i32 @encode_inhibit_flag(i64 %call102)
  %51 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec104 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %51, i32 0, i32 3
  %undecided105 = bitcast %union.anon* %spec104 to %struct.undecided_spec*
  %inhibit_ied = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided105, i32 0, i32 1
  store i32 %call103, i32* %inhibit_ied, align 4
  %52 = load i64, i64* %attrs, align 8
  %call106 = call i64 @AREF(i64 %52, i64 29)
  %call107 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp108 = icmp eq i64 %call106, %call107
  %lnot = xor i1 %cmp108, true
  %53 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec110 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %53, i32 0, i32 3
  %undecided111 = bitcast %union.anon* %spec110 to %struct.undecided_spec*
  %prefer_utf_8 = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided111, i32 0, i32 2
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %prefer_utf_8, align 1
  br label %if.end.496

if.else.112:                                      ; preds = %if.end.79
  %54 = load i64, i64* %coding_type, align 8
  %call113 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp114 = icmp eq i64 %54, %call113
  br i1 %cmp114, label %if.then.116, label %if.else.222

if.then.116:                                      ; preds = %if.else.112
  %55 = load i64, i64* %attrs, align 8
  %call117 = call i64 @AREF(i64 %55, i64 23)
  %shr118 = ashr i64 %call117, 2
  %conv119 = trunc i64 %shr118 to i32
  store i32 %conv119, i32* %flags, align 4
  %56 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec120 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %56, i32 0, i32 3
  %iso_2022 = bitcast %union.anon* %spec120 to %struct.iso_2022_spec*
  %current_invocation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation, i32 0, i64 0
  store i32 0, i32* %arrayidx, align 4
  %57 = load i32, i32* %flags, align 4
  %and = and i32 %57, 8
  %tobool121 = icmp ne i32 %and, 0
  %cond122 = select i1 %tobool121, i32 -1, i32 1
  %58 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec123 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %58, i32 0, i32 3
  %iso_2022124 = bitcast %union.anon* %spec123 to %struct.iso_2022_spec*
  %current_invocation125 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022124, i32 0, i32 1
  %arrayidx126 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation125, i32 0, i64 1
  store i32 %cond122, i32* %arrayidx126, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.116
  %59 = load i32, i32* %i, align 4
  %cmp127 = icmp slt i32 %59, 4
  br i1 %cmp127, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %60 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call129 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %60)
  %61 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id130 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %61, i32 0, i32 0
  %62 = load i64, i64* %id130, align 8
  %call131 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call129, i64 %62)
  %call132 = call i64 @AREF(i64 %call131, i64 0)
  %call133 = call i64 @AREF(i64 %call132, i64 20)
  %63 = load i32, i32* %i, align 4
  %conv134 = sext i32 %63 to i64
  %call135 = call i64 @AREF(i64 %call133, i64 %conv134)
  %shr136 = ashr i64 %call135, 2
  %conv137 = trunc i64 %shr136 to i32
  %64 = load i32, i32* %i, align 4
  %idxprom = sext i32 %64 to i64
  %65 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec138 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %65, i32 0, i32 3
  %iso_2022139 = bitcast %union.anon* %spec138 to %struct.iso_2022_spec*
  %current_designation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022139, i32 0, i32 2
  %arrayidx140 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation, i32 0, i64 %idxprom
  store i32 %conv137, i32* %arrayidx140, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %66 = load i32, i32* %i, align 4
  %inc = add nsw i32 %66, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %67 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec141 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %67, i32 0, i32 3
  %iso_2022142 = bitcast %union.anon* %spec141 to %struct.iso_2022_spec*
  %single_shifting = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022142, i32 0, i32 4
  %bf.load143 = load i8, i8* %single_shifting, align 4
  %bf.clear144 = and i8 %bf.load143, -2
  store i8 %bf.clear144, i8* %single_shifting, align 4
  %68 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec145 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %68, i32 0, i32 3
  %iso_2022146 = bitcast %union.anon* %spec145 to %struct.iso_2022_spec*
  %bol = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022146, i32 0, i32 4
  %bf.load147 = load i8, i8* %bol, align 4
  %bf.clear148 = and i8 %bf.load147, -3
  %bf.set149 = or i8 %bf.clear148, 2
  store i8 %bf.set149, i8* %bol, align 4
  %69 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector150 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %69, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_iso_2022, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector150, align 8
  %70 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder151 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %70, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_iso_2022, void (%struct.coding_system*)** %decoder151, align 8
  %71 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder152 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %71, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_iso_2022, i1 (%struct.coding_system*)** %encoder152, align 8
  %72 = load i32, i32* %flags, align 4
  %and153 = and i32 %72, 2048
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %if.then.155, label %if.end.164

if.then.155:                                      ; preds = %for.end
  %73 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode156 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %73, i32 0, i32 1
  %bf.load157 = load i32, i32* %mode156, align 8
  %bf.lshr = lshr i32 %bf.load157, 14
  %bf.clear158 = and i32 %bf.lshr, 31
  %or159 = or i32 %bf.clear158, 16
  %bf.load160 = load i32, i32* %mode156, align 8
  %bf.value161 = and i32 %or159, 31
  %bf.shl = shl i32 %bf.value161, 14
  %bf.clear162 = and i32 %bf.load160, -507905
  %bf.set163 = or i32 %bf.clear162, %bf.shl
  store i32 %bf.set163, i32* %mode156, align 8
  br label %if.end.164

if.end.164:                                       ; preds = %if.then.155, %for.end
  %74 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags165 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %74, i32 0, i32 1
  %bf.load166 = load i32, i32* %common_flags165, align 8
  %bf.clear167 = and i32 %bf.load166, 16383
  %or168 = or i32 %bf.clear167, 3584
  %bf.load169 = load i32, i32* %common_flags165, align 8
  %bf.value170 = and i32 %or168, 16383
  %bf.clear171 = and i32 %bf.load169, -16384
  %bf.set172 = or i32 %bf.clear171, %bf.value170
  store i32 %bf.set172, i32* %common_flags165, align 8
  %75 = load i32, i32* %flags, align 4
  %and173 = and i32 %75, 8192
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %if.then.175, label %if.end.184

if.then.175:                                      ; preds = %if.end.164
  %76 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags176 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %76, i32 0, i32 1
  %bf.load177 = load i32, i32* %common_flags176, align 8
  %bf.clear178 = and i32 %bf.load177, 16383
  %or179 = or i32 %bf.clear178, 1
  %bf.load180 = load i32, i32* %common_flags176, align 8
  %bf.value181 = and i32 %or179, 16383
  %bf.clear182 = and i32 %bf.load180, -16384
  %bf.set183 = or i32 %bf.clear182, %bf.value181
  store i32 %bf.set183, i32* %common_flags176, align 8
  br label %if.end.184

if.end.184:                                       ; preds = %if.then.175, %if.end.164
  %77 = load i32, i32* %flags, align 4
  %and185 = and i32 %77, 64
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %if.then.187, label %if.end.196

if.then.187:                                      ; preds = %if.end.184
  %78 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags188 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %78, i32 0, i32 1
  %bf.load189 = load i32, i32* %common_flags188, align 8
  %bf.clear190 = and i32 %bf.load189, 16383
  %or191 = or i32 %bf.clear190, 3
  %bf.load192 = load i32, i32* %common_flags188, align 8
  %bf.value193 = and i32 %or191, 16383
  %bf.clear194 = and i32 %bf.load192, -16384
  %bf.set195 = or i32 %bf.clear194, %bf.value193
  store i32 %bf.set195, i32* %common_flags188, align 8
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.187, %if.end.184
  %79 = load i32, i32* %flags, align 4
  %and197 = and i32 %79, 1048576
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %if.then.199, label %if.end.207

if.then.199:                                      ; preds = %if.end.196
  %80 = load i64, i64* %attrs, align 8
  call void @setup_iso_safe_charsets(i64 %80)
  %81 = load i64, i64* %attrs, align 8
  %call200 = call i64 @AREF(i64 %81, i64 15)
  store i64 %call200, i64* %val, align 8
  %82 = load i64, i64* %val, align 8
  %call201 = call i64 @SCHARS(i64 %82)
  %sub202 = sub nsw i64 %call201, 1
  %conv203 = trunc i64 %sub202 to i32
  %83 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %max_charset_id204 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %83, i32 0, i32 2
  store i32 %conv203, i32* %max_charset_id204, align 4
  %84 = load i64, i64* %val, align 8
  %call205 = call i8* @SDATA(i64 %84)
  %85 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets206 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %85, i32 0, i32 4
  store i8* %call205, i8** %safe_charsets206, align 8
  br label %if.end.207

if.end.207:                                       ; preds = %if.then.199, %if.end.196
  %86 = load i32, i32* %flags, align 4
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec208 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %87, i32 0, i32 3
  %iso_2022209 = bitcast %union.anon* %spec208 to %struct.iso_2022_spec*
  %flags210 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022209, i32 0, i32 0
  store i32 %86, i32* %flags210, align 4
  %88 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec211 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %88, i32 0, i32 3
  %iso_2022212 = bitcast %union.anon* %spec211 to %struct.iso_2022_spec*
  %cmp_status = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022212, i32 0, i32 5
  %state = getelementptr inbounds %struct.composition_status, %struct.composition_status* %cmp_status, i32 0, i32 0
  store i32 0, i32* %state, align 4
  %89 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec213 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %89, i32 0, i32 3
  %iso_2022214 = bitcast %union.anon* %spec213 to %struct.iso_2022_spec*
  %cmp_status215 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022214, i32 0, i32 5
  %method = getelementptr inbounds %struct.composition_status, %struct.composition_status* %cmp_status215, i32 0, i32 1
  store i32 4, i32* %method, align 4
  %90 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec216 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %90, i32 0, i32 3
  %iso_2022217 = bitcast %union.anon* %spec216 to %struct.iso_2022_spec*
  %ctext_extended_segment_len = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022217, i32 0, i32 3
  store i32 0, i32* %ctext_extended_segment_len, align 4
  %91 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec218 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %91, i32 0, i32 3
  %iso_2022219 = bitcast %union.anon* %spec218 to %struct.iso_2022_spec*
  %embedded_utf_8 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022219, i32 0, i32 4
  %bf.load220 = load i8, i8* %embedded_utf_8, align 4
  %bf.clear221 = and i8 %bf.load220, -5
  store i8 %bf.clear221, i8* %embedded_utf_8, align 4
  br label %if.end.495

if.else.222:                                      ; preds = %if.else.112
  %92 = load i64, i64* %coding_type, align 8
  %call223 = call i64 @builtin_lisp_symbol(i32 261)
  %cmp224 = icmp eq i64 %92, %call223
  br i1 %cmp224, label %if.then.226, label %if.else.238

if.then.226:                                      ; preds = %if.else.222
  %93 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector227 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %93, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_charset, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector227, align 8
  %94 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder228 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %94, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_charset, void (%struct.coding_system*)** %decoder228, align 8
  %95 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder229 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %95, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_charset, i1 (%struct.coding_system*)** %encoder229, align 8
  %96 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags230 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %96, i32 0, i32 1
  %bf.load231 = load i32, i32* %common_flags230, align 8
  %bf.clear232 = and i32 %bf.load231, 16383
  %or233 = or i32 %bf.clear232, 3072
  %bf.load234 = load i32, i32* %common_flags230, align 8
  %bf.value235 = and i32 %or233, 16383
  %bf.clear236 = and i32 %bf.load234, -16384
  %bf.set237 = or i32 %bf.clear236, %bf.value235
  store i32 %bf.set237, i32* %common_flags230, align 8
  br label %if.end.494

if.else.238:                                      ; preds = %if.else.222
  %97 = load i64, i64* %coding_type, align 8
  %call239 = call i64 @builtin_lisp_symbol(i32 988)
  %cmp240 = icmp eq i64 %97, %call239
  br i1 %cmp240, label %if.then.242, label %if.else.282

if.then.242:                                      ; preds = %if.else.238
  %98 = load i64, i64* %attrs, align 8
  %call243 = call i64 @AREF(i64 %98, i64 24)
  store i64 %call243, i64* %val, align 8
  %99 = load i64, i64* %val, align 8
  %and244 = and i64 %99, 7
  %conv245 = trunc i64 %and244 to i32
  %cmp246 = icmp eq i32 %conv245, 3
  br i1 %cmp246, label %cond.true.248, label %cond.false.249

cond.true.248:                                    ; preds = %if.then.242
  br label %cond.end.254

cond.false.249:                                   ; preds = %if.then.242
  %100 = load i64, i64* %val, align 8
  %call250 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp251 = icmp eq i64 %100, %call250
  %cond253 = select i1 %cmp251, i32 2, i32 1
  br label %cond.end.254

cond.end.254:                                     ; preds = %cond.false.249, %cond.true.248
  %cond255 = phi i32 [ 0, %cond.true.248 ], [ %cond253, %cond.false.249 ]
  %101 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec256 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %101, i32 0, i32 3
  %utf_8_bom = bitcast %union.anon* %spec256 to i32*
  store i32 %cond255, i32* %utf_8_bom, align 4
  %102 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector257 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %102, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_utf_8, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector257, align 8
  %103 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder258 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %103, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_utf_8, void (%struct.coding_system*)** %decoder258, align 8
  %104 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder259 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %104, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_utf_8, i1 (%struct.coding_system*)** %encoder259, align 8
  %105 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags260 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %105, i32 0, i32 1
  %bf.load261 = load i32, i32* %common_flags260, align 8
  %bf.clear262 = and i32 %bf.load261, 16383
  %or263 = or i32 %bf.clear262, 3072
  %bf.load264 = load i32, i32* %common_flags260, align 8
  %bf.value265 = and i32 %or263, 16383
  %bf.clear266 = and i32 %bf.load264, -16384
  %bf.set267 = or i32 %bf.clear266, %bf.value265
  store i32 %bf.set267, i32* %common_flags260, align 8
  %106 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec268 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %106, i32 0, i32 3
  %utf_8_bom269 = bitcast %union.anon* %spec268 to i32*
  %107 = load i32, i32* %utf_8_bom269, align 4
  %cmp270 = icmp eq i32 %107, 0
  br i1 %cmp270, label %if.then.272, label %if.end.281

if.then.272:                                      ; preds = %cond.end.254
  %108 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags273 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %108, i32 0, i32 1
  %bf.load274 = load i32, i32* %common_flags273, align 8
  %bf.clear275 = and i32 %bf.load274, 16383
  %or276 = or i32 %bf.clear275, 4096
  %bf.load277 = load i32, i32* %common_flags273, align 8
  %bf.value278 = and i32 %or276, 16383
  %bf.clear279 = and i32 %bf.load277, -16384
  %bf.set280 = or i32 %bf.clear279, %bf.value278
  store i32 %bf.set280, i32* %common_flags273, align 8
  br label %if.end.281

if.end.281:                                       ; preds = %if.then.272, %cond.end.254
  br label %if.end.493

if.else.282:                                      ; preds = %if.else.238
  %109 = load i64, i64* %coding_type, align 8
  %call283 = call i64 @builtin_lisp_symbol(i32 986)
  %cmp284 = icmp eq i64 %109, %call283
  br i1 %cmp284, label %if.then.286, label %if.else.336

if.then.286:                                      ; preds = %if.else.282
  %110 = load i64, i64* %attrs, align 8
  %call287 = call i64 @AREF(i64 %110, i64 24)
  store i64 %call287, i64* %val, align 8
  %111 = load i64, i64* %val, align 8
  %and288 = and i64 %111, 7
  %conv289 = trunc i64 %and288 to i32
  %cmp290 = icmp eq i32 %conv289, 3
  br i1 %cmp290, label %cond.true.292, label %cond.false.293

cond.true.292:                                    ; preds = %if.then.286
  br label %cond.end.298

cond.false.293:                                   ; preds = %if.then.286
  %112 = load i64, i64* %val, align 8
  %call294 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp295 = icmp eq i64 %112, %call294
  %cond297 = select i1 %cmp295, i32 2, i32 1
  br label %cond.end.298

cond.end.298:                                     ; preds = %cond.false.293, %cond.true.292
  %cond299 = phi i32 [ 0, %cond.true.292 ], [ %cond297, %cond.false.293 ]
  %113 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec300 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %113, i32 0, i32 3
  %utf_16 = bitcast %union.anon* %spec300 to %struct.utf_16_spec*
  %bom = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16, i32 0, i32 0
  store i32 %cond299, i32* %bom, align 4
  %114 = load i64, i64* %attrs, align 8
  %call301 = call i64 @AREF(i64 %114, i64 25)
  store i64 %call301, i64* %val, align 8
  %115 = load i64, i64* %val, align 8
  %call302 = call i64 @builtin_lisp_symbol(i32 202)
  %cmp303 = icmp eq i64 %115, %call302
  %cond305 = select i1 %cmp303, i32 0, i32 1
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec306 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %116, i32 0, i32 3
  %utf_16307 = bitcast %union.anon* %spec306 to %struct.utf_16_spec*
  %endian = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16307, i32 0, i32 1
  store i32 %cond305, i32* %endian, align 4
  %117 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec308 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %117, i32 0, i32 3
  %utf_16309 = bitcast %union.anon* %spec308 to %struct.utf_16_spec*
  %surrogate = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16309, i32 0, i32 2
  store i32 0, i32* %surrogate, align 4
  %118 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector310 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %118, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_utf_16, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector310, align 8
  %119 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder311 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %119, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_utf_16, void (%struct.coding_system*)** %decoder311, align 8
  %120 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder312 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %120, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_utf_16, i1 (%struct.coding_system*)** %encoder312, align 8
  %121 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags313 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %121, i32 0, i32 1
  %bf.load314 = load i32, i32* %common_flags313, align 8
  %bf.clear315 = and i32 %bf.load314, 16383
  %or316 = or i32 %bf.clear315, 3072
  %bf.load317 = load i32, i32* %common_flags313, align 8
  %bf.value318 = and i32 %or316, 16383
  %bf.clear319 = and i32 %bf.load317, -16384
  %bf.set320 = or i32 %bf.clear319, %bf.value318
  store i32 %bf.set320, i32* %common_flags313, align 8
  %122 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec321 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %122, i32 0, i32 3
  %utf_16322 = bitcast %union.anon* %spec321 to %struct.utf_16_spec*
  %bom323 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16322, i32 0, i32 0
  %123 = load i32, i32* %bom323, align 4
  %cmp324 = icmp eq i32 %123, 0
  br i1 %cmp324, label %if.then.326, label %if.end.335

if.then.326:                                      ; preds = %cond.end.298
  %124 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags327 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %124, i32 0, i32 1
  %bf.load328 = load i32, i32* %common_flags327, align 8
  %bf.clear329 = and i32 %bf.load328, 16383
  %or330 = or i32 %bf.clear329, 4096
  %bf.load331 = load i32, i32* %common_flags327, align 8
  %bf.value332 = and i32 %or330, 16383
  %bf.clear333 = and i32 %bf.load331, -16384
  %bf.set334 = or i32 %bf.clear333, %bf.value332
  store i32 %bf.set334, i32* %common_flags327, align 8
  br label %if.end.335

if.end.335:                                       ; preds = %if.then.326, %cond.end.298
  br label %if.end.492

if.else.336:                                      ; preds = %if.else.282
  %125 = load i64, i64* %coding_type, align 8
  %call337 = call i64 @builtin_lisp_symbol(i32 246)
  %cmp338 = icmp eq i64 %125, %call337
  br i1 %cmp338, label %if.then.340, label %if.else.352

if.then.340:                                      ; preds = %if.else.336
  %126 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector341 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %126, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_ccl, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector341, align 8
  %127 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder342 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %127, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_ccl, void (%struct.coding_system*)** %decoder342, align 8
  %128 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder343 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %128, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_ccl, i1 (%struct.coding_system*)** %encoder343, align 8
  %129 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags344 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %129, i32 0, i32 1
  %bf.load345 = load i32, i32* %common_flags344, align 8
  %bf.clear346 = and i32 %bf.load345, 16383
  %or347 = or i32 %bf.clear346, 3584
  %bf.load348 = load i32, i32* %common_flags344, align 8
  %bf.value349 = and i32 %or347, 16383
  %bf.clear350 = and i32 %bf.load348, -16384
  %bf.set351 = or i32 %bf.clear350, %bf.value349
  store i32 %bf.set351, i32* %common_flags344, align 8
  br label %if.end.491

if.else.352:                                      ; preds = %if.else.336
  %130 = load i64, i64* %coding_type, align 8
  %call353 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp354 = icmp eq i64 %130, %call353
  br i1 %cmp354, label %if.then.356, label %if.else.428

if.then.356:                                      ; preds = %if.else.352
  %131 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector357 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %131, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_emacs_mule, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector357, align 8
  %132 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder358 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %132, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_emacs_mule, void (%struct.coding_system*)** %decoder358, align 8
  %133 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder359 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %133, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_emacs_mule, i1 (%struct.coding_system*)** %encoder359, align 8
  %134 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags360 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %134, i32 0, i32 1
  %bf.load361 = load i32, i32* %common_flags360, align 8
  %bf.clear362 = and i32 %bf.load361, 16383
  %or363 = or i32 %bf.clear362, 3072
  %bf.load364 = load i32, i32* %common_flags360, align 8
  %bf.value365 = and i32 %or363, 16383
  %bf.clear366 = and i32 %bf.load364, -16384
  %bf.set367 = or i32 %bf.clear366, %bf.value365
  store i32 %bf.set367, i32* %common_flags360, align 8
  %135 = load i64, i64* %attrs, align 8
  %call368 = call i64 @AREF(i64 %135, i64 26)
  %call369 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp370 = icmp eq i64 %call368, %call369
  br i1 %cmp370, label %if.end.420, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then.356
  %136 = load i64, i64* %attrs, align 8
  %call372 = call i64 @AREF(i64 %136, i64 4)
  %137 = load i64, i64* @Vemacs_mule_charset_list, align 8
  %cmp373 = icmp eq i64 %call372, %137
  br i1 %cmp373, label %if.end.420, label %if.then.375

if.then.375:                                      ; preds = %land.lhs.true
  store i32 0, i32* %max_charset_id377, align 4
  %138 = load i64, i64* @Vemacs_mule_charset_list, align 8
  store i64 %138, i64* %tail, align 8
  br label %for.cond.378

for.cond.378:                                     ; preds = %for.inc.395, %if.then.375
  %139 = load i64, i64* %tail, align 8
  %and379 = and i64 %139, 7
  %conv380 = trunc i64 %and379 to i32
  %cmp381 = icmp eq i32 %conv380, 3
  br i1 %cmp381, label %for.body.383, label %for.end.397

for.body.383:                                     ; preds = %for.cond.378
  %140 = load i32, i32* %max_charset_id377, align 4
  %conv384 = sext i32 %140 to i64
  %141 = load i64, i64* %tail, align 8
  %sub385 = sub nsw i64 %141, 3
  %142 = inttoptr i64 %sub385 to i8*
  %143 = bitcast i8* %142 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %143, i32 0, i32 0
  %144 = load i64, i64* %car, align 8
  %shr386 = ashr i64 %144, 2
  %cmp387 = icmp slt i64 %conv384, %shr386
  br i1 %cmp387, label %if.then.389, label %if.end.394

if.then.389:                                      ; preds = %for.body.383
  %145 = load i64, i64* %tail, align 8
  %sub390 = sub nsw i64 %145, 3
  %146 = inttoptr i64 %sub390 to i8*
  %147 = bitcast i8* %146 to %struct.Lisp_Cons*
  %car391 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %147, i32 0, i32 0
  %148 = load i64, i64* %car391, align 8
  %shr392 = ashr i64 %148, 2
  %conv393 = trunc i64 %shr392 to i32
  store i32 %conv393, i32* %max_charset_id377, align 4
  br label %if.end.394

if.end.394:                                       ; preds = %if.then.389, %for.body.383
  br label %for.inc.395

for.inc.395:                                      ; preds = %if.end.394
  %149 = load i64, i64* %tail, align 8
  %sub396 = sub nsw i64 %149, 3
  %150 = inttoptr i64 %sub396 to i8*
  %151 = bitcast i8* %150 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %151, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %152 = load i64, i64* %cdr, align 8
  store i64 %152, i64* %tail, align 8
  br label %for.cond.378

for.end.397:                                      ; preds = %for.cond.378
  %153 = load i32, i32* %max_charset_id377, align 4
  %add = add nsw i32 %153, 1
  %conv398 = sext i32 %add to i64
  %call399 = call i64 @make_uninit_string(i64 %conv398)
  store i64 %call399, i64* %safe_charsets376, align 8
  %154 = load i64, i64* %safe_charsets376, align 8
  %call400 = call i8* @SDATA(i64 %154)
  %155 = load i32, i32* %max_charset_id377, align 4
  %add401 = add nsw i32 %155, 1
  %conv402 = sext i32 %add401 to i64
  call void @llvm.memset.p0i8.i64(i8* %call400, i8 -1, i64 %conv402, i32 1, i1 false)
  %156 = load i64, i64* @Vemacs_mule_charset_list, align 8
  store i64 %156, i64* %tail, align 8
  br label %for.cond.403

for.cond.403:                                     ; preds = %for.inc.412, %for.end.397
  %157 = load i64, i64* %tail, align 8
  %and404 = and i64 %157, 7
  %conv405 = trunc i64 %and404 to i32
  %cmp406 = icmp eq i32 %conv405, 3
  br i1 %cmp406, label %for.body.408, label %for.end.416

for.body.408:                                     ; preds = %for.cond.403
  %158 = load i64, i64* %safe_charsets376, align 8
  %159 = load i64, i64* %tail, align 8
  %sub409 = sub nsw i64 %159, 3
  %160 = inttoptr i64 %sub409 to i8*
  %161 = bitcast i8* %160 to %struct.Lisp_Cons*
  %car410 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %161, i32 0, i32 0
  %162 = load i64, i64* %car410, align 8
  %shr411 = ashr i64 %162, 2
  call void @SSET(i64 %158, i64 %shr411, i8 zeroext 0)
  br label %for.inc.412

for.inc.412:                                      ; preds = %for.body.408
  %163 = load i64, i64* %tail, align 8
  %sub413 = sub nsw i64 %163, 3
  %164 = inttoptr i64 %sub413 to i8*
  %165 = bitcast i8* %164 to %struct.Lisp_Cons*
  %u414 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %165, i32 0, i32 1
  %cdr415 = bitcast %union.anon.0* %u414 to i64*
  %166 = load i64, i64* %cdr415, align 8
  store i64 %166, i64* %tail, align 8
  br label %for.cond.403

for.end.416:                                      ; preds = %for.cond.403
  %167 = load i32, i32* %max_charset_id377, align 4
  %168 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %max_charset_id417 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %168, i32 0, i32 2
  store i32 %167, i32* %max_charset_id417, align 4
  %169 = load i64, i64* %safe_charsets376, align 8
  %call418 = call i8* @SDATA(i64 %169)
  %170 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets419 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %170, i32 0, i32 4
  store i8* %call418, i8** %safe_charsets419, align 8
  br label %if.end.420

if.end.420:                                       ; preds = %for.end.416, %land.lhs.true, %if.then.356
  %171 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec421 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %171, i32 0, i32 3
  %emacs_mule = bitcast %union.anon* %spec421 to %struct.emacs_mule_spec*
  %cmp_status422 = getelementptr inbounds %struct.emacs_mule_spec, %struct.emacs_mule_spec* %emacs_mule, i32 0, i32 0
  %state423 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %cmp_status422, i32 0, i32 0
  store i32 0, i32* %state423, align 4
  %172 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec424 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %172, i32 0, i32 3
  %emacs_mule425 = bitcast %union.anon* %spec424 to %struct.emacs_mule_spec*
  %cmp_status426 = getelementptr inbounds %struct.emacs_mule_spec, %struct.emacs_mule_spec* %emacs_mule425, i32 0, i32 0
  %method427 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %cmp_status426, i32 0, i32 1
  store i32 4, i32* %method427, align 4
  br label %if.end.490

if.else.428:                                      ; preds = %if.else.352
  %173 = load i64, i64* %coding_type, align 8
  %call429 = call i64 @builtin_lisp_symbol(i32 861)
  %cmp430 = icmp eq i64 %173, %call429
  br i1 %cmp430, label %if.then.432, label %if.else.444

if.then.432:                                      ; preds = %if.else.428
  %174 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector433 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %174, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_sjis, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector433, align 8
  %175 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder434 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %175, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_sjis, void (%struct.coding_system*)** %decoder434, align 8
  %176 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder435 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %176, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_sjis, i1 (%struct.coding_system*)** %encoder435, align 8
  %177 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags436 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %177, i32 0, i32 1
  %bf.load437 = load i32, i32* %common_flags436, align 8
  %bf.clear438 = and i32 %bf.load437, 16383
  %or439 = or i32 %bf.clear438, 3072
  %bf.load440 = load i32, i32* %common_flags436, align 8
  %bf.value441 = and i32 %or439, 16383
  %bf.clear442 = and i32 %bf.load440, -16384
  %bf.set443 = or i32 %bf.clear442, %bf.value441
  store i32 %bf.set443, i32* %common_flags436, align 8
  br label %if.end.489

if.else.444:                                      ; preds = %if.else.428
  %178 = load i64, i64* %coding_type, align 8
  %call445 = call i64 @builtin_lisp_symbol(i32 203)
  %cmp446 = icmp eq i64 %178, %call445
  br i1 %cmp446, label %if.then.448, label %if.else.460

if.then.448:                                      ; preds = %if.else.444
  %179 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector449 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %179, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* @detect_coding_big5, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector449, align 8
  %180 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder450 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %180, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_big5, void (%struct.coding_system*)** %decoder450, align 8
  %181 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder451 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %181, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_big5, i1 (%struct.coding_system*)** %encoder451, align 8
  %182 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags452 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %182, i32 0, i32 1
  %bf.load453 = load i32, i32* %common_flags452, align 8
  %bf.clear454 = and i32 %bf.load453, 16383
  %or455 = or i32 %bf.clear454, 3072
  %bf.load456 = load i32, i32* %common_flags452, align 8
  %bf.value457 = and i32 %or455, 16383
  %bf.clear458 = and i32 %bf.load456, -16384
  %bf.set459 = or i32 %bf.clear458, %bf.value457
  store i32 %bf.set459, i32* %common_flags452, align 8
  br label %if.end.488

if.else.460:                                      ; preds = %if.else.444
  %183 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detector461 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %183, i32 0, i32 29
  store i1 (%struct.coding_system*, %struct.coding_detection_info*)* null, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector461, align 8
  %184 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder462 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %184, i32 0, i32 30
  store void (%struct.coding_system*)* @decode_coding_raw_text, void (%struct.coding_system*)** %decoder462, align 8
  %185 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder463 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %185, i32 0, i32 31
  store i1 (%struct.coding_system*)* @encode_coding_raw_text, i1 (%struct.coding_system*)** %encoder463, align 8
  %186 = load i64, i64* %eol_type, align 8
  %call464 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp465 = icmp eq i64 %186, %call464
  br i1 %cmp465, label %if.end.487, label %if.then.467

if.then.467:                                      ; preds = %if.else.460
  %187 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags468 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %187, i32 0, i32 1
  %bf.load469 = load i32, i32* %common_flags468, align 8
  %bf.clear470 = and i32 %bf.load469, 16383
  %or471 = or i32 %bf.clear470, 1024
  %bf.load472 = load i32, i32* %common_flags468, align 8
  %bf.value473 = and i32 %or471, 16383
  %bf.clear474 = and i32 %bf.load472, -16384
  %bf.set475 = or i32 %bf.clear474, %bf.value473
  store i32 %bf.set475, i32* %common_flags468, align 8
  %188 = load i64, i64* %eol_type, align 8
  %call476 = call zeroext i1 @VECTORP(i64 %188)
  br i1 %call476, label %if.end.486, label %if.then.477

if.then.477:                                      ; preds = %if.then.467
  %189 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags478 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %189, i32 0, i32 1
  %bf.load479 = load i32, i32* %common_flags478, align 8
  %bf.clear480 = and i32 %bf.load479, 16383
  %or481 = or i32 %bf.clear480, 2048
  %bf.load482 = load i32, i32* %common_flags478, align 8
  %bf.value483 = and i32 %or481, 16383
  %bf.clear484 = and i32 %bf.load482, -16384
  %bf.set485 = or i32 %bf.clear484, %bf.value483
  store i32 %bf.set485, i32* %common_flags478, align 8
  br label %if.end.486

if.end.486:                                       ; preds = %if.then.477, %if.then.467
  br label %if.end.487

if.end.487:                                       ; preds = %if.end.486, %if.else.460
  br label %if.end.488

if.end.488:                                       ; preds = %if.end.487, %if.then.448
  br label %if.end.489

if.end.489:                                       ; preds = %if.end.488, %if.then.432
  br label %if.end.490

if.end.490:                                       ; preds = %if.end.489, %if.end.420
  br label %if.end.491

if.end.491:                                       ; preds = %if.end.490, %if.then.340
  br label %if.end.492

if.end.492:                                       ; preds = %if.end.491, %if.end.335
  br label %if.end.493

if.end.493:                                       ; preds = %if.end.492, %if.end.281
  br label %if.end.494

if.end.494:                                       ; preds = %if.end.493, %if.then.226
  br label %if.end.495

if.end.495:                                       ; preds = %if.end.494, %if.end.207
  br label %if.end.496

if.end.496:                                       ; preds = %if.end.495, %if.then.91
  ret void
}

declare i64 @builtin_lisp_symbol(i32) #1

declare i64 @hash_lookup(%struct.Lisp_Hash_Table*, i64, i64*) #1

declare %struct.Lisp_Hash_Table* @XHASH_TABLE(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fcheck_coding_system(i64 %coding_system) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %define_form = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 277)
  %call1 = call i64 @Fget(i64 %0, i64 %call)
  store i64 %call1, i64* %define_form, align 8
  %1 = load i64, i64* %define_form, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %coding_system.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 277)
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %call5 = call i64 @Fput(i64 %2, i64 %call3, i64 %call4)
  %3 = load i64, i64* %define_form, align 8
  %call6 = call i64 @safe_eval(i64 %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcoding_system_p(i64 %4)
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %call7, %call8
  br i1 %cmp9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end
  %5 = load i64, i64* %coding_system.addr, align 8
  ret i64 %5

if.end.11:                                        ; preds = %if.end
  %call12 = call i64 @builtin_lisp_symbol(i32 278)
  %6 = load i64, i64* %coding_system.addr, align 8
  call void @xsignal1(i64 %call12, i64 %6) #6
  unreachable
}

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #2

declare i64 @AREF(i64, i64) #1

declare i64 @HASH_VALUE(%struct.Lisp_Hash_Table*, i64) #1

declare zeroext i1 @VECTORP(i64) #1

declare i64 @SCHARS(i64) #1

declare i8* @SDATA(i64) #1

; Function Attrs: nounwind uwtable
define internal void @decode_coding_raw_text(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %eol_dos = alloca i8, align 1
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 0
  %3 = load i64, i64* %id, align 8
  %call1 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %3)
  %call2 = call i64 @AREF(i64 %call1, i64 2)
  %call3 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp = icmp eq i64 %call2, %call3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool = zext i1 %4 to i8
  store i8 %frombool, i8* %eol_dos, align 1
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %chars_at_source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 1
  %bf.load = load i32, i32* %chars_at_source, align 8
  %bf.clear = and i32 %bf.load, -2097153
  %bf.set = or i32 %bf.clear, 2097152
  store i32 %bf.set, i32* %chars_at_source, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 14
  %7 = load i64, i64* %src_chars, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 11
  store i64 %7, i64* %consumed_char, align 8
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 15
  %10 = load i64, i64* %src_bytes, align 8
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 10
  store i64 %10, i64* %consumed, align 8
  %12 = load i8, i8* %eol_dos, align 1
  %tobool4 = trunc i8 %12 to i1
  br i1 %tobool4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %land.end
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 15
  %14 = load i64, i64* %src_bytes5, align 8
  %sub = sub nsw i64 %14, 1
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 17
  %16 = load i8*, i8** %source, align 8
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 %sub
  %17 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %17 to i32
  %cmp6 = icmp eq i32 %conv, 13
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char8 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %18, i32 0, i32 11
  %19 = load i64, i64* %consumed_char8, align 8
  %dec = add nsw i64 %19, -1
  store i64 %dec, i64* %consumed_char8, align 8
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed9 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 10
  %21 = load i64, i64* %consumed9, align 8
  %dec10 = add nsw i64 %21, -1
  store i64 %dec10, i64* %consumed9, align 8
  %22 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %22, i32 1)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %land.end
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %23, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_raw_text(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %produced_chars = alloca i64, align 8
  %c = alloca i32, align 4
  %safe_room = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %str = alloca [5 x i8], align 1
  %p0 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %ch142 = alloca i32, align 4
  %more_bytes213 = alloca i64, align 8
  %ch232 = alloca i32, align 4
  %safe_room297 = alloca i32, align 4
  %more_bytes308 = alloca i64, align 8
  %more_bytes407 = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf2 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 23
  %4 = load i32*, i32** %charbuf2, align 8
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 25
  %6 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %6 to i64
  %add.ptr = getelementptr inbounds i32, i32* %4, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 22
  %8 = load i8*, i8** %destination, align 8
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 8
  %10 = load i64, i64* %produced, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %8, i64 %10
  store i8* %add.ptr3, i8** %dst, align 8
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination4 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 22
  %12 = load i8*, i8** %destination4, align 8
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 20
  %14 = load i64, i64* %dst_bytes, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %12, i64 %14
  store i8* %add.ptr5, i8** %dst_end, align 8
  store i64 0, i64* %produced_chars, align 8
  %15 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %15 to i1
  br i1 %tobool, label %if.then, label %if.else.290

if.then:                                          ; preds = %entry
  store i32 10, i32* %safe_room, align 4
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load6 = load i32, i32* %src_multibyte, align 8
  %bf.lshr7 = lshr i32 %bf.load6, 19
  %bf.clear8 = and i32 %bf.lshr7, 1
  %bf.cast9 = trunc i32 %bf.clear8 to i1
  br i1 %bf.cast9, label %if.then.10, label %if.else.202

if.then.10:                                       ; preds = %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end.201, %if.then.10
  %17 = load i32*, i32** %charbuf, align 8
  %18 = load i32*, i32** %charbuf_end, align 8
  %cmp = icmp ult i32* %17, %18
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %19 = load i8*, i8** %dst, align 8
  %20 = load i32, i32* %safe_room, align 4
  %idx.ext11 = sext i32 %20 to i64
  %add.ptr12 = getelementptr inbounds i8, i8* %19, i64 %idx.ext11
  %21 = load i8*, i8** %dst_end, align 8
  %cmp13 = icmp uge i8* %add.ptr12, %21
  br i1 %cmp13, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %do.body
  %22 = load i32*, i32** %charbuf_end, align 8
  %23 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %22 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %24 = load i32, i32* %safe_room, align 4
  %conv = sext i32 %24 to i64
  %add = add nsw i64 %sub.ptr.div, %conv
  store i64 %add, i64* %more_bytes, align 8
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %26 = load i64, i64* %more_bytes, align 8
  %27 = load i8*, i8** %dst, align 8
  %call = call i8* @alloc_destination(%struct.coding_system* %25, i64 %26, i8* %27)
  store i8* %call, i8** %dst, align 8
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination15 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %28, i32 0, i32 22
  %29 = load i8*, i8** %destination15, align 8
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes16 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %30, i32 0, i32 20
  %31 = load i64, i64* %dst_bytes16, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %29, i64 %31
  store i8* %add.ptr17, i8** %dst_end, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.14, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %32 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %c, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %34 = load i32, i32* %c, align 4
  %add18 = add i32 %34, 0
  %cmp19 = icmp ult i32 %add18, 128
  br i1 %cmp19, label %if.then.25, label %if.else

cond.false:                                       ; preds = %do.end
  %35 = load i32, i32* %c, align 4
  %conv21 = sext i32 %35 to i64
  %add22 = add i64 %conv21, 0
  %cmp23 = icmp ult i64 %add22, 128
  br i1 %cmp23, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %cond.false, %cond.true
  br label %do.body.26

do.body.26:                                       ; preds = %if.then.25
  %36 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %36, 1
  store i64 %inc, i64* %produced_chars, align 8
  %37 = load i32, i32* %c, align 4
  %conv27 = trunc i32 %37 to i8
  %38 = load i8*, i8** %dst, align 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr28, i8** %dst, align 8
  store i8 %conv27, i8* %38, align 1
  br label %do.end.29

do.end.29:                                        ; preds = %do.body.26
  br label %if.end.201

if.else:                                          ; preds = %cond.false, %cond.true
  %39 = load i32, i32* %c, align 4
  %cmp30 = icmp sgt i32 %39, 4194175
  br i1 %cmp30, label %if.then.32, label %if.else.92

if.then.32:                                       ; preds = %if.else
  %40 = load i32, i32* %c, align 4
  %cmp33 = icmp sgt i32 %40, 4194175
  br i1 %cmp33, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %if.then.32
  %41 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %41, 4194048
  br label %cond.end

cond.false.36:                                    ; preds = %if.then.32
  %42 = load i32, i32* %c, align 4
  %and = and i32 %42, 255
  br label %cond.end

cond.end:                                         ; preds = %cond.false.36, %cond.true.35
  %cond = phi i32 [ %sub, %cond.true.35 ], [ %and, %cond.false.36 ]
  store i32 %cond, i32* %c, align 4
  br label %do.body.37

do.body.37:                                       ; preds = %cond.end
  %43 = load i64, i64* %produced_chars, align 8
  %inc38 = add nsw i64 %43, 1
  store i64 %inc38, i64* %produced_chars, align 8
  %44 = load i8, i8* %multibytep, align 1
  %tobool39 = trunc i8 %44 to i1
  br i1 %tobool39, label %if.then.40, label %if.else.87

if.then.40:                                       ; preds = %do.body.37
  %45 = load i32, i32* %c, align 4
  store i32 %45, i32* %ch, align 4
  %46 = load i32, i32* %ch, align 4
  %cmp41 = icmp uge i32 %46, 128
  br i1 %cmp41, label %if.then.43, label %if.end.45

if.then.43:                                       ; preds = %if.then.40
  %47 = load i32, i32* %ch, align 4
  %add44 = add i32 %47, 4194048
  store i32 %add44, i32* %ch, align 4
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.43, %if.then.40
  br label %do.body.46

do.body.46:                                       ; preds = %if.end.45
  %48 = load i32, i32* %ch, align 4
  %cmp47 = icmp ule i32 %48, 127
  br i1 %cmp47, label %if.then.49, label %if.else.52

if.then.49:                                       ; preds = %do.body.46
  %49 = load i32, i32* %ch, align 4
  %conv50 = trunc i32 %49 to i8
  %50 = load i8*, i8** %dst, align 8
  %incdec.ptr51 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr51, i8** %dst, align 8
  store i8 %conv50, i8* %50, align 1
  br label %if.end.85

if.else.52:                                       ; preds = %do.body.46
  %51 = load i32, i32* %ch, align 4
  %cmp53 = icmp ule i32 %51, 2047
  br i1 %cmp53, label %if.then.55, label %if.else.62

if.then.55:                                       ; preds = %if.else.52
  %52 = load i32, i32* %ch, align 4
  %shr = lshr i32 %52, 6
  %or = or i32 192, %shr
  %conv56 = trunc i32 %or to i8
  %53 = load i8*, i8** %dst, align 8
  %incdec.ptr57 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %incdec.ptr57, i8** %dst, align 8
  store i8 %conv56, i8* %53, align 1
  %54 = load i32, i32* %ch, align 4
  %and58 = and i32 %54, 63
  %or59 = or i32 128, %and58
  %conv60 = trunc i32 %or59 to i8
  %55 = load i8*, i8** %dst, align 8
  %incdec.ptr61 = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr61, i8** %dst, align 8
  store i8 %conv60, i8* %55, align 1
  br label %if.end.84

if.else.62:                                       ; preds = %if.else.52
  %56 = load i32, i32* %ch, align 4
  %cmp63 = icmp ule i32 %56, 65535
  br i1 %cmp63, label %if.then.65, label %if.else.79

if.then.65:                                       ; preds = %if.else.62
  %57 = load i32, i32* %ch, align 4
  %shr66 = lshr i32 %57, 12
  %or67 = or i32 224, %shr66
  %conv68 = trunc i32 %or67 to i8
  %58 = load i8*, i8** %dst, align 8
  %incdec.ptr69 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr69, i8** %dst, align 8
  store i8 %conv68, i8* %58, align 1
  %59 = load i32, i32* %ch, align 4
  %shr70 = lshr i32 %59, 6
  %and71 = and i32 %shr70, 63
  %or72 = or i32 128, %and71
  %conv73 = trunc i32 %or72 to i8
  %60 = load i8*, i8** %dst, align 8
  %incdec.ptr74 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr74, i8** %dst, align 8
  store i8 %conv73, i8* %60, align 1
  %61 = load i32, i32* %ch, align 4
  %and75 = and i32 %61, 63
  %or76 = or i32 128, %and75
  %conv77 = trunc i32 %or76 to i8
  %62 = load i8*, i8** %dst, align 8
  %incdec.ptr78 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr78, i8** %dst, align 8
  store i8 %conv77, i8* %62, align 1
  br label %if.end.83

if.else.79:                                       ; preds = %if.else.62
  %63 = load i32, i32* %ch, align 4
  %64 = load i8*, i8** %dst, align 8
  %call80 = call i32 @char_string(i32 %63, i8* %64)
  %65 = load i8*, i8** %dst, align 8
  %idx.ext81 = sext i32 %call80 to i64
  %add.ptr82 = getelementptr inbounds i8, i8* %65, i64 %idx.ext81
  store i8* %add.ptr82, i8** %dst, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.79, %if.then.65
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.then.55
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.then.49
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  br label %if.end.90

if.else.87:                                       ; preds = %do.body.37
  %66 = load i32, i32* %c, align 4
  %conv88 = trunc i32 %66 to i8
  %67 = load i8*, i8** %dst, align 8
  %incdec.ptr89 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %incdec.ptr89, i8** %dst, align 8
  store i8 %conv88, i8* %67, align 1
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %do.end.86
  br label %do.end.91

do.end.91:                                        ; preds = %if.end.90
  br label %if.end.200

if.else.92:                                       ; preds = %if.else
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %str, i32 0, i32 0
  store i8* %arraydecay, i8** %p0, align 8
  %arraydecay93 = getelementptr inbounds [5 x i8], [5 x i8]* %str, i32 0, i32 0
  store i8* %arraydecay93, i8** %p1, align 8
  br label %do.body.94

do.body.94:                                       ; preds = %if.else.92
  %68 = load i32, i32* %c, align 4
  %cmp95 = icmp sle i32 %68, 127
  br i1 %cmp95, label %if.then.97, label %if.else.100

if.then.97:                                       ; preds = %do.body.94
  %69 = load i32, i32* %c, align 4
  %conv98 = trunc i32 %69 to i8
  %70 = load i8*, i8** %p1, align 8
  %incdec.ptr99 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr99, i8** %p1, align 8
  store i8 %conv98, i8* %70, align 1
  br label %if.end.135

if.else.100:                                      ; preds = %do.body.94
  %71 = load i32, i32* %c, align 4
  %cmp101 = icmp sle i32 %71, 2047
  br i1 %cmp101, label %if.then.103, label %if.else.112

if.then.103:                                      ; preds = %if.else.100
  %72 = load i32, i32* %c, align 4
  %shr104 = ashr i32 %72, 6
  %or105 = or i32 192, %shr104
  %conv106 = trunc i32 %or105 to i8
  %73 = load i8*, i8** %p1, align 8
  %incdec.ptr107 = getelementptr inbounds i8, i8* %73, i32 1
  store i8* %incdec.ptr107, i8** %p1, align 8
  store i8 %conv106, i8* %73, align 1
  %74 = load i32, i32* %c, align 4
  %and108 = and i32 %74, 63
  %or109 = or i32 128, %and108
  %conv110 = trunc i32 %or109 to i8
  %75 = load i8*, i8** %p1, align 8
  %incdec.ptr111 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr111, i8** %p1, align 8
  store i8 %conv110, i8* %75, align 1
  br label %if.end.134

if.else.112:                                      ; preds = %if.else.100
  %76 = load i32, i32* %c, align 4
  %cmp113 = icmp sle i32 %76, 65535
  br i1 %cmp113, label %if.then.115, label %if.else.129

if.then.115:                                      ; preds = %if.else.112
  %77 = load i32, i32* %c, align 4
  %shr116 = ashr i32 %77, 12
  %or117 = or i32 224, %shr116
  %conv118 = trunc i32 %or117 to i8
  %78 = load i8*, i8** %p1, align 8
  %incdec.ptr119 = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %incdec.ptr119, i8** %p1, align 8
  store i8 %conv118, i8* %78, align 1
  %79 = load i32, i32* %c, align 4
  %shr120 = ashr i32 %79, 6
  %and121 = and i32 %shr120, 63
  %or122 = or i32 128, %and121
  %conv123 = trunc i32 %or122 to i8
  %80 = load i8*, i8** %p1, align 8
  %incdec.ptr124 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr124, i8** %p1, align 8
  store i8 %conv123, i8* %80, align 1
  %81 = load i32, i32* %c, align 4
  %and125 = and i32 %81, 63
  %or126 = or i32 128, %and125
  %conv127 = trunc i32 %or126 to i8
  %82 = load i8*, i8** %p1, align 8
  %incdec.ptr128 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %incdec.ptr128, i8** %p1, align 8
  store i8 %conv127, i8* %82, align 1
  br label %if.end.133

if.else.129:                                      ; preds = %if.else.112
  %83 = load i32, i32* %c, align 4
  %84 = load i8*, i8** %p1, align 8
  %call130 = call i32 @char_string(i32 %83, i8* %84)
  %85 = load i8*, i8** %p1, align 8
  %idx.ext131 = sext i32 %call130 to i64
  %add.ptr132 = getelementptr inbounds i8, i8* %85, i64 %idx.ext131
  store i8* %add.ptr132, i8** %p1, align 8
  br label %if.end.133

if.end.133:                                       ; preds = %if.else.129, %if.then.115
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.then.103
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.then.97
  br label %do.end.136

do.end.136:                                       ; preds = %if.end.135
  br label %do.body.137

do.body.137:                                      ; preds = %do.cond, %do.end.136
  br label %do.body.138

do.body.138:                                      ; preds = %do.body.137
  %86 = load i64, i64* %produced_chars, align 8
  %inc139 = add nsw i64 %86, 1
  store i64 %inc139, i64* %produced_chars, align 8
  %87 = load i8, i8* %multibytep, align 1
  %tobool140 = trunc i8 %87 to i1
  br i1 %tobool140, label %if.then.141, label %if.else.192

if.then.141:                                      ; preds = %do.body.138
  %88 = load i8*, i8** %p0, align 8
  %89 = load i8, i8* %88, align 1
  %conv143 = zext i8 %89 to i32
  store i32 %conv143, i32* %ch142, align 4
  %90 = load i32, i32* %ch142, align 4
  %cmp144 = icmp uge i32 %90, 128
  br i1 %cmp144, label %if.then.146, label %if.end.148

if.then.146:                                      ; preds = %if.then.141
  %91 = load i32, i32* %ch142, align 4
  %add147 = add i32 %91, 4194048
  store i32 %add147, i32* %ch142, align 4
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.146, %if.then.141
  br label %do.body.149

do.body.149:                                      ; preds = %if.end.148
  %92 = load i32, i32* %ch142, align 4
  %cmp150 = icmp ule i32 %92, 127
  br i1 %cmp150, label %if.then.152, label %if.else.155

if.then.152:                                      ; preds = %do.body.149
  %93 = load i32, i32* %ch142, align 4
  %conv153 = trunc i32 %93 to i8
  %94 = load i8*, i8** %dst, align 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %94, i32 1
  store i8* %incdec.ptr154, i8** %dst, align 8
  store i8 %conv153, i8* %94, align 1
  br label %if.end.190

if.else.155:                                      ; preds = %do.body.149
  %95 = load i32, i32* %ch142, align 4
  %cmp156 = icmp ule i32 %95, 2047
  br i1 %cmp156, label %if.then.158, label %if.else.167

if.then.158:                                      ; preds = %if.else.155
  %96 = load i32, i32* %ch142, align 4
  %shr159 = lshr i32 %96, 6
  %or160 = or i32 192, %shr159
  %conv161 = trunc i32 %or160 to i8
  %97 = load i8*, i8** %dst, align 8
  %incdec.ptr162 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %incdec.ptr162, i8** %dst, align 8
  store i8 %conv161, i8* %97, align 1
  %98 = load i32, i32* %ch142, align 4
  %and163 = and i32 %98, 63
  %or164 = or i32 128, %and163
  %conv165 = trunc i32 %or164 to i8
  %99 = load i8*, i8** %dst, align 8
  %incdec.ptr166 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %incdec.ptr166, i8** %dst, align 8
  store i8 %conv165, i8* %99, align 1
  br label %if.end.189

if.else.167:                                      ; preds = %if.else.155
  %100 = load i32, i32* %ch142, align 4
  %cmp168 = icmp ule i32 %100, 65535
  br i1 %cmp168, label %if.then.170, label %if.else.184

if.then.170:                                      ; preds = %if.else.167
  %101 = load i32, i32* %ch142, align 4
  %shr171 = lshr i32 %101, 12
  %or172 = or i32 224, %shr171
  %conv173 = trunc i32 %or172 to i8
  %102 = load i8*, i8** %dst, align 8
  %incdec.ptr174 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr174, i8** %dst, align 8
  store i8 %conv173, i8* %102, align 1
  %103 = load i32, i32* %ch142, align 4
  %shr175 = lshr i32 %103, 6
  %and176 = and i32 %shr175, 63
  %or177 = or i32 128, %and176
  %conv178 = trunc i32 %or177 to i8
  %104 = load i8*, i8** %dst, align 8
  %incdec.ptr179 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %incdec.ptr179, i8** %dst, align 8
  store i8 %conv178, i8* %104, align 1
  %105 = load i32, i32* %ch142, align 4
  %and180 = and i32 %105, 63
  %or181 = or i32 128, %and180
  %conv182 = trunc i32 %or181 to i8
  %106 = load i8*, i8** %dst, align 8
  %incdec.ptr183 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr183, i8** %dst, align 8
  store i8 %conv182, i8* %106, align 1
  br label %if.end.188

if.else.184:                                      ; preds = %if.else.167
  %107 = load i32, i32* %ch142, align 4
  %108 = load i8*, i8** %dst, align 8
  %call185 = call i32 @char_string(i32 %107, i8* %108)
  %109 = load i8*, i8** %dst, align 8
  %idx.ext186 = sext i32 %call185 to i64
  %add.ptr187 = getelementptr inbounds i8, i8* %109, i64 %idx.ext186
  store i8* %add.ptr187, i8** %dst, align 8
  br label %if.end.188

if.end.188:                                       ; preds = %if.else.184, %if.then.170
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %if.then.158
  br label %if.end.190

if.end.190:                                       ; preds = %if.end.189, %if.then.152
  br label %do.end.191

do.end.191:                                       ; preds = %if.end.190
  br label %if.end.194

if.else.192:                                      ; preds = %do.body.138
  %110 = load i8*, i8** %p0, align 8
  %111 = load i8, i8* %110, align 1
  %112 = load i8*, i8** %dst, align 8
  %incdec.ptr193 = getelementptr inbounds i8, i8* %112, i32 1
  store i8* %incdec.ptr193, i8** %dst, align 8
  store i8 %111, i8* %112, align 1
  br label %if.end.194

if.end.194:                                       ; preds = %if.else.192, %do.end.191
  br label %do.end.195

do.end.195:                                       ; preds = %if.end.194
  %113 = load i8*, i8** %p0, align 8
  %incdec.ptr196 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %incdec.ptr196, i8** %p0, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.end.195
  %114 = load i8*, i8** %p0, align 8
  %115 = load i8*, i8** %p1, align 8
  %cmp197 = icmp ult i8* %114, %115
  br i1 %cmp197, label %do.body.137, label %do.end.199

do.end.199:                                       ; preds = %do.cond
  br label %if.end.200

if.end.200:                                       ; preds = %do.end.199, %do.end.91
  br label %if.end.201

if.end.201:                                       ; preds = %if.end.200, %do.end.29
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.289

if.else.202:                                      ; preds = %if.then
  br label %while.cond.203

while.cond.203:                                   ; preds = %do.end.287, %if.else.202
  %116 = load i32*, i32** %charbuf, align 8
  %117 = load i32*, i32** %charbuf_end, align 8
  %cmp204 = icmp ult i32* %116, %117
  br i1 %cmp204, label %while.body.206, label %while.end.288

while.body.206:                                   ; preds = %while.cond.203
  br label %do.body.207

do.body.207:                                      ; preds = %while.body.206
  %118 = load i8*, i8** %dst, align 8
  %119 = load i32, i32* %safe_room, align 4
  %idx.ext208 = sext i32 %119 to i64
  %add.ptr209 = getelementptr inbounds i8, i8* %118, i64 %idx.ext208
  %120 = load i8*, i8** %dst_end, align 8
  %cmp210 = icmp uge i8* %add.ptr209, %120
  br i1 %cmp210, label %if.then.212, label %if.end.224

if.then.212:                                      ; preds = %do.body.207
  %121 = load i32*, i32** %charbuf_end, align 8
  %122 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast214 = ptrtoint i32* %121 to i64
  %sub.ptr.rhs.cast215 = ptrtoint i32* %122 to i64
  %sub.ptr.sub216 = sub i64 %sub.ptr.lhs.cast214, %sub.ptr.rhs.cast215
  %sub.ptr.div217 = sdiv exact i64 %sub.ptr.sub216, 4
  %123 = load i32, i32* %safe_room, align 4
  %conv218 = sext i32 %123 to i64
  %add219 = add nsw i64 %sub.ptr.div217, %conv218
  store i64 %add219, i64* %more_bytes213, align 8
  %124 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %125 = load i64, i64* %more_bytes213, align 8
  %126 = load i8*, i8** %dst, align 8
  %call220 = call i8* @alloc_destination(%struct.coding_system* %124, i64 %125, i8* %126)
  store i8* %call220, i8** %dst, align 8
  %127 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination221 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %127, i32 0, i32 22
  %128 = load i8*, i8** %destination221, align 8
  %129 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes222 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %129, i32 0, i32 20
  %130 = load i64, i64* %dst_bytes222, align 8
  %add.ptr223 = getelementptr inbounds i8, i8* %128, i64 %130
  store i8* %add.ptr223, i8** %dst_end, align 8
  br label %if.end.224

if.end.224:                                       ; preds = %if.then.212, %do.body.207
  br label %do.end.226

do.end.226:                                       ; preds = %if.end.224
  %131 = load i32*, i32** %charbuf, align 8
  %incdec.ptr227 = getelementptr inbounds i32, i32* %131, i32 1
  store i32* %incdec.ptr227, i32** %charbuf, align 8
  %132 = load i32, i32* %131, align 4
  store i32 %132, i32* %c, align 4
  br label %do.body.228

do.body.228:                                      ; preds = %do.end.226
  %133 = load i64, i64* %produced_chars, align 8
  %inc229 = add nsw i64 %133, 1
  store i64 %inc229, i64* %produced_chars, align 8
  %134 = load i8, i8* %multibytep, align 1
  %tobool230 = trunc i8 %134 to i1
  br i1 %tobool230, label %if.then.231, label %if.else.282

if.then.231:                                      ; preds = %do.body.228
  %135 = load i32, i32* %c, align 4
  store i32 %135, i32* %ch232, align 4
  %136 = load i32, i32* %ch232, align 4
  %cmp233 = icmp uge i32 %136, 128
  br i1 %cmp233, label %if.then.235, label %if.end.237

if.then.235:                                      ; preds = %if.then.231
  %137 = load i32, i32* %ch232, align 4
  %add236 = add i32 %137, 4194048
  store i32 %add236, i32* %ch232, align 4
  br label %if.end.237

if.end.237:                                       ; preds = %if.then.235, %if.then.231
  br label %do.body.238

do.body.238:                                      ; preds = %if.end.237
  %138 = load i32, i32* %ch232, align 4
  %cmp239 = icmp ule i32 %138, 127
  br i1 %cmp239, label %if.then.241, label %if.else.244

if.then.241:                                      ; preds = %do.body.238
  %139 = load i32, i32* %ch232, align 4
  %conv242 = trunc i32 %139 to i8
  %140 = load i8*, i8** %dst, align 8
  %incdec.ptr243 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %incdec.ptr243, i8** %dst, align 8
  store i8 %conv242, i8* %140, align 1
  br label %if.end.279

if.else.244:                                      ; preds = %do.body.238
  %141 = load i32, i32* %ch232, align 4
  %cmp245 = icmp ule i32 %141, 2047
  br i1 %cmp245, label %if.then.247, label %if.else.256

if.then.247:                                      ; preds = %if.else.244
  %142 = load i32, i32* %ch232, align 4
  %shr248 = lshr i32 %142, 6
  %or249 = or i32 192, %shr248
  %conv250 = trunc i32 %or249 to i8
  %143 = load i8*, i8** %dst, align 8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr251, i8** %dst, align 8
  store i8 %conv250, i8* %143, align 1
  %144 = load i32, i32* %ch232, align 4
  %and252 = and i32 %144, 63
  %or253 = or i32 128, %and252
  %conv254 = trunc i32 %or253 to i8
  %145 = load i8*, i8** %dst, align 8
  %incdec.ptr255 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr255, i8** %dst, align 8
  store i8 %conv254, i8* %145, align 1
  br label %if.end.278

if.else.256:                                      ; preds = %if.else.244
  %146 = load i32, i32* %ch232, align 4
  %cmp257 = icmp ule i32 %146, 65535
  br i1 %cmp257, label %if.then.259, label %if.else.273

if.then.259:                                      ; preds = %if.else.256
  %147 = load i32, i32* %ch232, align 4
  %shr260 = lshr i32 %147, 12
  %or261 = or i32 224, %shr260
  %conv262 = trunc i32 %or261 to i8
  %148 = load i8*, i8** %dst, align 8
  %incdec.ptr263 = getelementptr inbounds i8, i8* %148, i32 1
  store i8* %incdec.ptr263, i8** %dst, align 8
  store i8 %conv262, i8* %148, align 1
  %149 = load i32, i32* %ch232, align 4
  %shr264 = lshr i32 %149, 6
  %and265 = and i32 %shr264, 63
  %or266 = or i32 128, %and265
  %conv267 = trunc i32 %or266 to i8
  %150 = load i8*, i8** %dst, align 8
  %incdec.ptr268 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %incdec.ptr268, i8** %dst, align 8
  store i8 %conv267, i8* %150, align 1
  %151 = load i32, i32* %ch232, align 4
  %and269 = and i32 %151, 63
  %or270 = or i32 128, %and269
  %conv271 = trunc i32 %or270 to i8
  %152 = load i8*, i8** %dst, align 8
  %incdec.ptr272 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %incdec.ptr272, i8** %dst, align 8
  store i8 %conv271, i8* %152, align 1
  br label %if.end.277

if.else.273:                                      ; preds = %if.else.256
  %153 = load i32, i32* %ch232, align 4
  %154 = load i8*, i8** %dst, align 8
  %call274 = call i32 @char_string(i32 %153, i8* %154)
  %155 = load i8*, i8** %dst, align 8
  %idx.ext275 = sext i32 %call274 to i64
  %add.ptr276 = getelementptr inbounds i8, i8* %155, i64 %idx.ext275
  store i8* %add.ptr276, i8** %dst, align 8
  br label %if.end.277

if.end.277:                                       ; preds = %if.else.273, %if.then.259
  br label %if.end.278

if.end.278:                                       ; preds = %if.end.277, %if.then.247
  br label %if.end.279

if.end.279:                                       ; preds = %if.end.278, %if.then.241
  br label %do.end.281

do.end.281:                                       ; preds = %if.end.279
  br label %if.end.285

if.else.282:                                      ; preds = %do.body.228
  %156 = load i32, i32* %c, align 4
  %conv283 = trunc i32 %156 to i8
  %157 = load i8*, i8** %dst, align 8
  %incdec.ptr284 = getelementptr inbounds i8, i8* %157, i32 1
  store i8* %incdec.ptr284, i8** %dst, align 8
  store i8 %conv283, i8* %157, align 1
  br label %if.end.285

if.end.285:                                       ; preds = %if.else.282, %do.end.281
  br label %do.end.287

do.end.287:                                       ; preds = %if.end.285
  br label %while.cond.203

while.end.288:                                    ; preds = %while.cond.203
  br label %if.end.289

if.end.289:                                       ; preds = %while.end.288, %while.end
  br label %if.end.441

if.else.290:                                      ; preds = %entry
  %158 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte291 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %158, i32 0, i32 1
  %bf.load292 = load i32, i32* %src_multibyte291, align 8
  %bf.lshr293 = lshr i32 %bf.load292, 19
  %bf.clear294 = and i32 %bf.lshr293, 1
  %bf.cast295 = trunc i32 %bf.clear294 to i1
  br i1 %bf.cast295, label %if.then.296, label %if.else.397

if.then.296:                                      ; preds = %if.else.290
  store i32 5, i32* %safe_room297, align 4
  br label %while.cond.298

while.cond.298:                                   ; preds = %if.end.395, %if.then.296
  %159 = load i32*, i32** %charbuf, align 8
  %160 = load i32*, i32** %charbuf_end, align 8
  %cmp299 = icmp ult i32* %159, %160
  br i1 %cmp299, label %while.body.301, label %while.end.396

while.body.301:                                   ; preds = %while.cond.298
  br label %do.body.302

do.body.302:                                      ; preds = %while.body.301
  %161 = load i8*, i8** %dst, align 8
  %162 = load i32, i32* %safe_room297, align 4
  %idx.ext303 = sext i32 %162 to i64
  %add.ptr304 = getelementptr inbounds i8, i8* %161, i64 %idx.ext303
  %163 = load i8*, i8** %dst_end, align 8
  %cmp305 = icmp uge i8* %add.ptr304, %163
  br i1 %cmp305, label %if.then.307, label %if.end.319

if.then.307:                                      ; preds = %do.body.302
  %164 = load i32*, i32** %charbuf_end, align 8
  %165 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast309 = ptrtoint i32* %164 to i64
  %sub.ptr.rhs.cast310 = ptrtoint i32* %165 to i64
  %sub.ptr.sub311 = sub i64 %sub.ptr.lhs.cast309, %sub.ptr.rhs.cast310
  %sub.ptr.div312 = sdiv exact i64 %sub.ptr.sub311, 4
  %166 = load i32, i32* %safe_room297, align 4
  %conv313 = sext i32 %166 to i64
  %add314 = add nsw i64 %sub.ptr.div312, %conv313
  store i64 %add314, i64* %more_bytes308, align 8
  %167 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %168 = load i64, i64* %more_bytes308, align 8
  %169 = load i8*, i8** %dst, align 8
  %call315 = call i8* @alloc_destination(%struct.coding_system* %167, i64 %168, i8* %169)
  store i8* %call315, i8** %dst, align 8
  %170 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination316 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %170, i32 0, i32 22
  %171 = load i8*, i8** %destination316, align 8
  %172 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes317 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %172, i32 0, i32 20
  %173 = load i64, i64* %dst_bytes317, align 8
  %add.ptr318 = getelementptr inbounds i8, i8* %171, i64 %173
  store i8* %add.ptr318, i8** %dst_end, align 8
  br label %if.end.319

if.end.319:                                       ; preds = %if.then.307, %do.body.302
  br label %do.end.321

do.end.321:                                       ; preds = %if.end.319
  %174 = load i32*, i32** %charbuf, align 8
  %incdec.ptr322 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr322, i32** %charbuf, align 8
  %175 = load i32, i32* %174, align 4
  store i32 %175, i32* %c, align 4
  br i1 true, label %cond.true.323, label %cond.false.327

cond.true.323:                                    ; preds = %do.end.321
  %176 = load i32, i32* %c, align 4
  %add324 = add i32 %176, 0
  %cmp325 = icmp ult i32 %add324, 128
  br i1 %cmp325, label %if.then.332, label %if.else.335

cond.false.327:                                   ; preds = %do.end.321
  %177 = load i32, i32* %c, align 4
  %conv328 = sext i32 %177 to i64
  %add329 = add i64 %conv328, 0
  %cmp330 = icmp ult i64 %add329, 128
  br i1 %cmp330, label %if.then.332, label %if.else.335

if.then.332:                                      ; preds = %cond.false.327, %cond.true.323
  %178 = load i32, i32* %c, align 4
  %conv333 = trunc i32 %178 to i8
  %179 = load i8*, i8** %dst, align 8
  %incdec.ptr334 = getelementptr inbounds i8, i8* %179, i32 1
  store i8* %incdec.ptr334, i8** %dst, align 8
  store i8 %conv333, i8* %179, align 1
  br label %if.end.395

if.else.335:                                      ; preds = %cond.false.327, %cond.true.323
  %180 = load i32, i32* %c, align 4
  %cmp336 = icmp sgt i32 %180, 4194175
  br i1 %cmp336, label %if.then.338, label %if.else.349

if.then.338:                                      ; preds = %if.else.335
  %181 = load i32, i32* %c, align 4
  %cmp339 = icmp sgt i32 %181, 4194175
  br i1 %cmp339, label %cond.true.341, label %cond.false.343

cond.true.341:                                    ; preds = %if.then.338
  %182 = load i32, i32* %c, align 4
  %sub342 = sub nsw i32 %182, 4194048
  br label %cond.end.345

cond.false.343:                                   ; preds = %if.then.338
  %183 = load i32, i32* %c, align 4
  %and344 = and i32 %183, 255
  br label %cond.end.345

cond.end.345:                                     ; preds = %cond.false.343, %cond.true.341
  %cond346 = phi i32 [ %sub342, %cond.true.341 ], [ %and344, %cond.false.343 ]
  %conv347 = trunc i32 %cond346 to i8
  %184 = load i8*, i8** %dst, align 8
  %incdec.ptr348 = getelementptr inbounds i8, i8* %184, i32 1
  store i8* %incdec.ptr348, i8** %dst, align 8
  store i8 %conv347, i8* %184, align 1
  br label %if.end.394

if.else.349:                                      ; preds = %if.else.335
  br label %do.body.350

do.body.350:                                      ; preds = %if.else.349
  %185 = load i32, i32* %c, align 4
  %cmp351 = icmp sle i32 %185, 127
  br i1 %cmp351, label %if.then.353, label %if.else.356

if.then.353:                                      ; preds = %do.body.350
  %186 = load i32, i32* %c, align 4
  %conv354 = trunc i32 %186 to i8
  %187 = load i8*, i8** %dst, align 8
  %incdec.ptr355 = getelementptr inbounds i8, i8* %187, i32 1
  store i8* %incdec.ptr355, i8** %dst, align 8
  store i8 %conv354, i8* %187, align 1
  br label %if.end.391

if.else.356:                                      ; preds = %do.body.350
  %188 = load i32, i32* %c, align 4
  %cmp357 = icmp sle i32 %188, 2047
  br i1 %cmp357, label %if.then.359, label %if.else.368

if.then.359:                                      ; preds = %if.else.356
  %189 = load i32, i32* %c, align 4
  %shr360 = ashr i32 %189, 6
  %or361 = or i32 192, %shr360
  %conv362 = trunc i32 %or361 to i8
  %190 = load i8*, i8** %dst, align 8
  %incdec.ptr363 = getelementptr inbounds i8, i8* %190, i32 1
  store i8* %incdec.ptr363, i8** %dst, align 8
  store i8 %conv362, i8* %190, align 1
  %191 = load i32, i32* %c, align 4
  %and364 = and i32 %191, 63
  %or365 = or i32 128, %and364
  %conv366 = trunc i32 %or365 to i8
  %192 = load i8*, i8** %dst, align 8
  %incdec.ptr367 = getelementptr inbounds i8, i8* %192, i32 1
  store i8* %incdec.ptr367, i8** %dst, align 8
  store i8 %conv366, i8* %192, align 1
  br label %if.end.390

if.else.368:                                      ; preds = %if.else.356
  %193 = load i32, i32* %c, align 4
  %cmp369 = icmp sle i32 %193, 65535
  br i1 %cmp369, label %if.then.371, label %if.else.385

if.then.371:                                      ; preds = %if.else.368
  %194 = load i32, i32* %c, align 4
  %shr372 = ashr i32 %194, 12
  %or373 = or i32 224, %shr372
  %conv374 = trunc i32 %or373 to i8
  %195 = load i8*, i8** %dst, align 8
  %incdec.ptr375 = getelementptr inbounds i8, i8* %195, i32 1
  store i8* %incdec.ptr375, i8** %dst, align 8
  store i8 %conv374, i8* %195, align 1
  %196 = load i32, i32* %c, align 4
  %shr376 = ashr i32 %196, 6
  %and377 = and i32 %shr376, 63
  %or378 = or i32 128, %and377
  %conv379 = trunc i32 %or378 to i8
  %197 = load i8*, i8** %dst, align 8
  %incdec.ptr380 = getelementptr inbounds i8, i8* %197, i32 1
  store i8* %incdec.ptr380, i8** %dst, align 8
  store i8 %conv379, i8* %197, align 1
  %198 = load i32, i32* %c, align 4
  %and381 = and i32 %198, 63
  %or382 = or i32 128, %and381
  %conv383 = trunc i32 %or382 to i8
  %199 = load i8*, i8** %dst, align 8
  %incdec.ptr384 = getelementptr inbounds i8, i8* %199, i32 1
  store i8* %incdec.ptr384, i8** %dst, align 8
  store i8 %conv383, i8* %199, align 1
  br label %if.end.389

if.else.385:                                      ; preds = %if.else.368
  %200 = load i32, i32* %c, align 4
  %201 = load i8*, i8** %dst, align 8
  %call386 = call i32 @char_string(i32 %200, i8* %201)
  %202 = load i8*, i8** %dst, align 8
  %idx.ext387 = sext i32 %call386 to i64
  %add.ptr388 = getelementptr inbounds i8, i8* %202, i64 %idx.ext387
  store i8* %add.ptr388, i8** %dst, align 8
  br label %if.end.389

if.end.389:                                       ; preds = %if.else.385, %if.then.371
  br label %if.end.390

if.end.390:                                       ; preds = %if.end.389, %if.then.359
  br label %if.end.391

if.end.391:                                       ; preds = %if.end.390, %if.then.353
  br label %do.end.393

do.end.393:                                       ; preds = %if.end.391
  br label %if.end.394

if.end.394:                                       ; preds = %do.end.393, %cond.end.345
  br label %if.end.395

if.end.395:                                       ; preds = %if.end.394, %if.then.332
  br label %while.cond.298

while.end.396:                                    ; preds = %while.cond.298
  br label %if.end.434

if.else.397:                                      ; preds = %if.else.290
  br label %do.body.398

do.body.398:                                      ; preds = %if.else.397
  %203 = load i8*, i8** %dst, align 8
  %204 = load i32*, i32** %charbuf_end, align 8
  %205 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast399 = ptrtoint i32* %204 to i64
  %sub.ptr.rhs.cast400 = ptrtoint i32* %205 to i64
  %sub.ptr.sub401 = sub i64 %sub.ptr.lhs.cast399, %sub.ptr.rhs.cast400
  %sub.ptr.div402 = sdiv exact i64 %sub.ptr.sub401, 4
  %add.ptr403 = getelementptr inbounds i8, i8* %203, i64 %sub.ptr.div402
  %206 = load i8*, i8** %dst_end, align 8
  %cmp404 = icmp uge i8* %add.ptr403, %206
  br i1 %cmp404, label %if.then.406, label %if.end.421

if.then.406:                                      ; preds = %do.body.398
  %207 = load i32*, i32** %charbuf_end, align 8
  %208 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast408 = ptrtoint i32* %207 to i64
  %sub.ptr.rhs.cast409 = ptrtoint i32* %208 to i64
  %sub.ptr.sub410 = sub i64 %sub.ptr.lhs.cast408, %sub.ptr.rhs.cast409
  %sub.ptr.div411 = sdiv exact i64 %sub.ptr.sub410, 4
  %209 = load i32*, i32** %charbuf_end, align 8
  %210 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast412 = ptrtoint i32* %209 to i64
  %sub.ptr.rhs.cast413 = ptrtoint i32* %210 to i64
  %sub.ptr.sub414 = sub i64 %sub.ptr.lhs.cast412, %sub.ptr.rhs.cast413
  %sub.ptr.div415 = sdiv exact i64 %sub.ptr.sub414, 4
  %add416 = add nsw i64 %sub.ptr.div411, %sub.ptr.div415
  store i64 %add416, i64* %more_bytes407, align 8
  %211 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %212 = load i64, i64* %more_bytes407, align 8
  %213 = load i8*, i8** %dst, align 8
  %call417 = call i8* @alloc_destination(%struct.coding_system* %211, i64 %212, i8* %213)
  store i8* %call417, i8** %dst, align 8
  %214 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination418 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %214, i32 0, i32 22
  %215 = load i8*, i8** %destination418, align 8
  %216 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes419 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %216, i32 0, i32 20
  %217 = load i64, i64* %dst_bytes419, align 8
  %add.ptr420 = getelementptr inbounds i8, i8* %215, i64 %217
  store i8* %add.ptr420, i8** %dst_end, align 8
  br label %if.end.421

if.end.421:                                       ; preds = %if.then.406, %do.body.398
  br label %do.end.423

do.end.423:                                       ; preds = %if.end.421
  br label %while.cond.424

while.cond.424:                                   ; preds = %while.body.429, %do.end.423
  %218 = load i32*, i32** %charbuf, align 8
  %219 = load i32*, i32** %charbuf_end, align 8
  %cmp425 = icmp ult i32* %218, %219
  br i1 %cmp425, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.424
  %220 = load i8*, i8** %dst, align 8
  %221 = load i8*, i8** %dst_end, align 8
  %cmp427 = icmp ult i8* %220, %221
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.424
  %222 = phi i1 [ false, %while.cond.424 ], [ %cmp427, %land.rhs ]
  br i1 %222, label %while.body.429, label %while.end.433

while.body.429:                                   ; preds = %land.end
  %223 = load i32*, i32** %charbuf, align 8
  %incdec.ptr430 = getelementptr inbounds i32, i32* %223, i32 1
  store i32* %incdec.ptr430, i32** %charbuf, align 8
  %224 = load i32, i32* %223, align 4
  %conv431 = trunc i32 %224 to i8
  %225 = load i8*, i8** %dst, align 8
  %incdec.ptr432 = getelementptr inbounds i8, i8* %225, i32 1
  store i8* %incdec.ptr432, i8** %dst, align 8
  store i8 %conv431, i8* %225, align 1
  br label %while.cond.424

while.end.433:                                    ; preds = %land.end
  br label %if.end.434

if.end.434:                                       ; preds = %while.end.433, %while.end.396
  %226 = load i8*, i8** %dst, align 8
  %227 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination435 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %227, i32 0, i32 22
  %228 = load i8*, i8** %destination435, align 8
  %229 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced436 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %229, i32 0, i32 8
  %230 = load i64, i64* %produced436, align 8
  %add.ptr437 = getelementptr inbounds i8, i8* %228, i64 %230
  %sub.ptr.lhs.cast438 = ptrtoint i8* %226 to i64
  %sub.ptr.rhs.cast439 = ptrtoint i8* %add.ptr437 to i64
  %sub.ptr.sub440 = sub i64 %sub.ptr.lhs.cast438, %sub.ptr.rhs.cast439
  store i64 %sub.ptr.sub440, i64* %produced_chars, align 8
  br label %if.end.441

if.end.441:                                       ; preds = %if.end.434, %if.end.289
  %231 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %231, i32 0)
  %232 = load i64, i64* %produced_chars, align 8
  %233 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %233, i32 0, i32 9
  %234 = load i64, i64* %produced_char, align 8
  %add442 = add nsw i64 %234, %232
  store i64 %add442, i64* %produced_char, align 8
  %235 = load i8*, i8** %dst, align 8
  %236 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination443 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %236, i32 0, i32 22
  %237 = load i8*, i8** %destination443, align 8
  %sub.ptr.lhs.cast444 = ptrtoint i8* %235 to i64
  %sub.ptr.rhs.cast445 = ptrtoint i8* %237 to i64
  %sub.ptr.sub446 = sub i64 %sub.ptr.lhs.cast444, %sub.ptr.rhs.cast445
  %238 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced447 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %238, i32 0, i32 8
  store i64 %sub.ptr.sub446, i64* %produced447, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define internal i32 @encode_inhibit_flag(i64 %flag) #0 {
entry:
  %flag.addr = alloca i64, align 8
  store i64 %flag, i64* %flag.addr, align 8
  %0 = load i64, i64* %flag.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load i64, i64* %flag.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp2 = icmp eq i64 %1, %call1
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_iso_2022(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %single_shifting = alloca i8, align 1
  %id = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %consumed_chars = alloca i64, align 8
  %i = alloca i32, align 4
  %rejected = alloca i32, align 4
  %found = alloca i32, align 4
  %composition_count = alloca i32, align 4
  %this = alloca %struct.coding_system*, align 8
  %attrs = alloca i64, align 8
  %val = alloca i64, align 8
  %len = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load i8*, i8** %src, align 8
  store i8* %2, i8** %src_base, align 8
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 17
  %4 = load i8*, i8** %source1, align 8
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 15
  %6 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %6
  store i8* %add.ptr, i8** %src_end, align 8
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i8 0, i8* %single_shifting, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i32 0, i32* %rejected, align 4
  store i32 0, i32* %found, align 4
  store i32 -1, i32* %composition_count, align 4
  %8 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %8, i32 0, i32 0
  %9 = load i32, i32* %checked, align 4
  %or = or i32 %9, 63
  store i32 %or, i32* %checked, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %10, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom
  store %struct.coding_system* %arrayidx, %struct.coding_system** %this, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id2 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 0
  %13 = load i64, i64* %id2, align 8
  %cmp3 = icmp slt i64 %13, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id4 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id4, align 8
  %call5 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %16)
  %call6 = call i64 @AREF(i64 %call5, i64 0)
  store i64 %call6, i64* %attrs, align 8
  %17 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 3
  %iso_2022 = bitcast %union.anon* %spec to %struct.iso_2022_spec*
  %flags = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022, i32 0, i32 0
  %18 = load i32, i32* %flags, align 4
  %and = and i32 %18, 1048576
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.end
  %19 = load i64, i64* %attrs, align 8
  %call7 = call i64 @AREF(i64 %19, i64 4)
  %20 = load i64, i64* @Viso_2022_charset_list, align 8
  %cmp8 = icmp eq i64 %call7, %20
  br i1 %cmp8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %land.lhs.true
  %21 = load i64, i64* %attrs, align 8
  call void @setup_iso_safe_charsets(i64 %21)
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %land.lhs.true, %if.end
  %22 = load i64, i64* %attrs, align 8
  %call11 = call i64 @AREF(i64 %22, i64 15)
  store i64 %call11, i64* %val, align 8
  %23 = load i64, i64* %val, align 8
  %call12 = call i64 @SCHARS(i64 %23)
  %sub = sub nsw i64 %call12, 1
  %conv = trunc i64 %sub to i32
  %24 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %max_charset_id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %24, i32 0, i32 2
  store i32 %conv, i32* %max_charset_id, align 4
  %25 = load i64, i64* %val, align 8
  %call13 = call i8* @SDATA(i64 %25)
  %26 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %safe_charsets = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 4
  store i8* %call13, i8** %safe_charsets, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.10, %if.then
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %28, i32 0, i32 5
  %29 = load i64, i64* %head_ascii, align 8
  %30 = load i8*, i8** %src, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %30, i64 %29
  store i8* %add.ptr14, i8** %src, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.then.378, %for.end
  %31 = load i32, i32* %rejected, align 4
  %cmp15 = icmp ne i32 %31, 63
  br i1 %cmp15, label %while.body, label %while.end.484

while.body:                                       ; preds = %while.cond
  %32 = load i8*, i8** %src, align 8
  store i8* %32, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %while.body
  %33 = load i8*, i8** %src, align 8
  %34 = load i8*, i8** %src_end, align 8
  %cmp17 = icmp eq i8* %33, %34
  br i1 %cmp17, label %if.then.19, label %if.end.24

if.then.19:                                       ; preds = %do.body
  %35 = load i8*, i8** %src_base, align 8
  %36 = load i8*, i8** %src, align 8
  %cmp20 = icmp ult i8* %35, %36
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.19
  %37 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %37, i32 1)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %if.then.19
  br label %no_more_source

if.end.24:                                        ; preds = %do.body
  %38 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %39 = load i8, i8* %38, align 1
  %conv25 = zext i8 %39 to i32
  store i32 %conv25, i32* %c, align 4
  %40 = load i8, i8* %multibytep, align 1
  %tobool26 = trunc i8 %40 to i1
  br i1 %tobool26, label %land.lhs.true.28, label %if.end.44

land.lhs.true.28:                                 ; preds = %if.end.24
  %41 = load i32, i32* %c, align 4
  %and29 = and i32 %41, 128
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.44

if.then.31:                                       ; preds = %land.lhs.true.28
  %42 = load i32, i32* %c, align 4
  %and32 = and i32 %42, 254
  %cmp33 = icmp eq i32 %and32, 192
  br i1 %cmp33, label %if.then.35, label %if.else

if.then.35:                                       ; preds = %if.then.31
  %43 = load i32, i32* %c, align 4
  %and36 = and i32 %43, 1
  %shl = shl i32 %and36, 6
  %44 = load i8*, i8** %src, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr37, i8** %src, align 8
  %45 = load i8, i8* %44, align 1
  %conv38 = zext i8 %45 to i32
  %or39 = or i32 %shl, %conv38
  store i32 %or39, i32* %c, align 4
  br label %if.end.43

if.else:                                          ; preds = %if.then.31
  %46 = load i8*, i8** %src, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %46, i32 -1
  store i8* %incdec.ptr40, i8** %src, align 8
  %47 = load i8*, i8** %src, align 8
  %call41 = call i32 @string_char(i8* %47, i8** %src, i32* null)
  %sub42 = sub nsw i32 0, %call41
  store i32 %sub42, i32* %c, align 4
  %48 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %48, i32 3)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else, %if.then.35
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %land.lhs.true.28, %if.end.24
  %49 = load i64, i64* %consumed_chars, align 8
  %inc45 = add nsw i64 %49, 1
  store i64 %inc45, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.44
  %50 = load i32, i32* %c, align 4
  switch i32 %50, label %sw.default [
    i32 27, label %sw.bb
    i32 14, label %sw.bb.350
    i32 15, label %sw.bb.350
    i32 155, label %sw.bb.355
    i32 142, label %sw.bb.358
    i32 143, label %sw.bb.358
  ]

sw.bb:                                            ; preds = %do.end
  %51 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 452), align 1
  %tobool46 = trunc i8 %51 to i1
  br i1 %tobool46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %sw.bb
  br label %sw.epilog

if.end.48:                                        ; preds = %sw.bb
  store i8 0, i8* %single_shifting, align 1
  br label %do.body.49

do.body.49:                                       ; preds = %if.end.48
  %52 = load i8*, i8** %src, align 8
  %53 = load i8*, i8** %src_end, align 8
  %cmp50 = icmp eq i8* %52, %53
  br i1 %cmp50, label %if.then.52, label %if.end.57

if.then.52:                                       ; preds = %do.body.49
  %54 = load i8*, i8** %src_base, align 8
  %55 = load i8*, i8** %src, align 8
  %cmp53 = icmp ult i8* %54, %55
  br i1 %cmp53, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %if.then.52
  %56 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %56, i32 1)
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.55, %if.then.52
  br label %no_more_source

if.end.57:                                        ; preds = %do.body.49
  %57 = load i8*, i8** %src, align 8
  %incdec.ptr58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr58, i8** %src, align 8
  %58 = load i8, i8* %57, align 1
  %conv59 = zext i8 %58 to i32
  store i32 %conv59, i32* %c, align 4
  %59 = load i8, i8* %multibytep, align 1
  %tobool60 = trunc i8 %59 to i1
  br i1 %tobool60, label %land.lhs.true.62, label %if.end.80

land.lhs.true.62:                                 ; preds = %if.end.57
  %60 = load i32, i32* %c, align 4
  %and63 = and i32 %60, 128
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then.65, label %if.end.80

if.then.65:                                       ; preds = %land.lhs.true.62
  %61 = load i32, i32* %c, align 4
  %and66 = and i32 %61, 254
  %cmp67 = icmp eq i32 %and66, 192
  br i1 %cmp67, label %if.then.69, label %if.else.75

if.then.69:                                       ; preds = %if.then.65
  %62 = load i32, i32* %c, align 4
  %and70 = and i32 %62, 1
  %shl71 = shl i32 %and70, 6
  %63 = load i8*, i8** %src, align 8
  %incdec.ptr72 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr72, i8** %src, align 8
  %64 = load i8, i8* %63, align 1
  %conv73 = zext i8 %64 to i32
  %or74 = or i32 %shl71, %conv73
  store i32 %or74, i32* %c, align 4
  br label %if.end.79

if.else.75:                                       ; preds = %if.then.65
  %65 = load i8*, i8** %src, align 8
  %incdec.ptr76 = getelementptr inbounds i8, i8* %65, i32 -1
  store i8* %incdec.ptr76, i8** %src, align 8
  %66 = load i8*, i8** %src, align 8
  %call77 = call i32 @string_char(i8* %66, i8** %src, i32* null)
  %sub78 = sub nsw i32 0, %call77
  store i32 %sub78, i32* %c, align 4
  %67 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %67, i32 3)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.75, %if.then.69
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %land.lhs.true.62, %if.end.57
  %68 = load i64, i64* %consumed_chars, align 8
  %inc81 = add nsw i64 %68, 1
  store i64 %inc81, i64* %consumed_chars, align 8
  br label %do.end.82

do.end.82:                                        ; preds = %if.end.80
  %69 = load i32, i32* %c, align 4
  %cmp83 = icmp eq i32 %69, 78
  br i1 %cmp83, label %if.then.87, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end.82
  %70 = load i32, i32* %c, align 4
  %cmp85 = icmp eq i32 %70, 79
  br i1 %cmp85, label %if.then.87, label %if.else.89

if.then.87:                                       ; preds = %lor.lhs.false, %do.end.82
  store i8 1, i8* %single_shifting, align 1
  %71 = load i32, i32* %rejected, align 4
  %or88 = or i32 %71, 15
  store i32 %or88, i32* %rejected, align 4
  br label %if.end.349

if.else.89:                                       ; preds = %lor.lhs.false
  %72 = load i32, i32* %c, align 4
  %cmp90 = icmp eq i32 %72, 49
  br i1 %cmp90, label %if.then.92, label %if.else.101

if.then.92:                                       ; preds = %if.else.89
  %73 = load i32, i32* %composition_count, align 4
  %cmp93 = icmp slt i32 %73, 0
  br i1 %cmp93, label %if.then.98, label %lor.lhs.false.95

lor.lhs.false.95:                                 ; preds = %if.then.92
  %74 = load i32, i32* %composition_count, align 4
  %cmp96 = icmp sgt i32 %74, 16
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %lor.lhs.false.95, %if.then.92
  br label %sw.epilog

if.end.99:                                        ; preds = %lor.lhs.false.95
  store i32 -1, i32* %composition_count, align 4
  %75 = load i32, i32* %found, align 4
  %or100 = or i32 %75, 63
  store i32 %or100, i32* %found, align 4
  br label %if.end.348

if.else.101:                                      ; preds = %if.else.89
  %76 = load i32, i32* %c, align 4
  %cmp102 = icmp sge i32 %76, 48
  br i1 %cmp102, label %land.lhs.true.104, label %if.else.108

land.lhs.true.104:                                ; preds = %if.else.101
  %77 = load i32, i32* %c, align 4
  %cmp105 = icmp sle i32 %77, 52
  br i1 %cmp105, label %if.then.107, label %if.else.108

if.then.107:                                      ; preds = %land.lhs.true.104
  store i32 0, i32* %composition_count, align 4
  br label %if.end.347

if.else.108:                                      ; preds = %land.lhs.true.104, %if.else.101
  %78 = load i32, i32* %c, align 4
  %cmp109 = icmp sge i32 %78, 40
  br i1 %cmp109, label %land.lhs.true.111, label %if.else.170

land.lhs.true.111:                                ; preds = %if.else.108
  %79 = load i32, i32* %c, align 4
  %cmp112 = icmp sle i32 %79, 47
  br i1 %cmp112, label %if.then.114, label %if.else.170

if.then.114:                                      ; preds = %land.lhs.true.111
  br label %do.body.115

do.body.115:                                      ; preds = %if.then.114
  %80 = load i8*, i8** %src, align 8
  %81 = load i8*, i8** %src_end, align 8
  %cmp116 = icmp eq i8* %80, %81
  br i1 %cmp116, label %if.then.118, label %if.end.123

if.then.118:                                      ; preds = %do.body.115
  %82 = load i8*, i8** %src_base, align 8
  %83 = load i8*, i8** %src, align 8
  %cmp119 = icmp ult i8* %82, %83
  br i1 %cmp119, label %if.then.121, label %if.end.122

if.then.121:                                      ; preds = %if.then.118
  %84 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %84, i32 1)
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.121, %if.then.118
  br label %no_more_source

if.end.123:                                       ; preds = %do.body.115
  %85 = load i8*, i8** %src, align 8
  %incdec.ptr124 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %incdec.ptr124, i8** %src, align 8
  %86 = load i8, i8* %85, align 1
  %conv125 = zext i8 %86 to i32
  store i32 %conv125, i32* %c1, align 4
  %87 = load i8, i8* %multibytep, align 1
  %tobool126 = trunc i8 %87 to i1
  br i1 %tobool126, label %land.lhs.true.128, label %if.end.146

land.lhs.true.128:                                ; preds = %if.end.123
  %88 = load i32, i32* %c1, align 4
  %and129 = and i32 %88, 128
  %tobool130 = icmp ne i32 %and129, 0
  br i1 %tobool130, label %if.then.131, label %if.end.146

if.then.131:                                      ; preds = %land.lhs.true.128
  %89 = load i32, i32* %c1, align 4
  %and132 = and i32 %89, 254
  %cmp133 = icmp eq i32 %and132, 192
  br i1 %cmp133, label %if.then.135, label %if.else.141

if.then.135:                                      ; preds = %if.then.131
  %90 = load i32, i32* %c1, align 4
  %and136 = and i32 %90, 1
  %shl137 = shl i32 %and136, 6
  %91 = load i8*, i8** %src, align 8
  %incdec.ptr138 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr138, i8** %src, align 8
  %92 = load i8, i8* %91, align 1
  %conv139 = zext i8 %92 to i32
  %or140 = or i32 %shl137, %conv139
  store i32 %or140, i32* %c1, align 4
  br label %if.end.145

if.else.141:                                      ; preds = %if.then.131
  %93 = load i8*, i8** %src, align 8
  %incdec.ptr142 = getelementptr inbounds i8, i8* %93, i32 -1
  store i8* %incdec.ptr142, i8** %src, align 8
  %94 = load i8*, i8** %src, align 8
  %call143 = call i32 @string_char(i8* %94, i8** %src, i32* null)
  %sub144 = sub nsw i32 0, %call143
  store i32 %sub144, i32* %c1, align 4
  %95 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %95, i32 3)
  br label %if.end.145

if.end.145:                                       ; preds = %if.else.141, %if.then.135
  br label %if.end.146

if.end.146:                                       ; preds = %if.end.145, %land.lhs.true.128, %if.end.123
  %96 = load i64, i64* %consumed_chars, align 8
  %inc147 = add nsw i64 %96, 1
  store i64 %inc147, i64* %consumed_chars, align 8
  br label %do.end.148

do.end.148:                                       ; preds = %if.end.146
  %97 = load i32, i32* %c1, align 4
  %cmp149 = icmp slt i32 %97, 32
  br i1 %cmp149, label %if.then.163, label %lor.lhs.false.151

lor.lhs.false.151:                                ; preds = %do.end.148
  %98 = load i32, i32* %c1, align 4
  %cmp152 = icmp sge i32 %98, 128
  br i1 %cmp152, label %if.then.163, label %lor.lhs.false.154

lor.lhs.false.154:                                ; preds = %lor.lhs.false.151
  %99 = load i32, i32* %c1, align 4
  %idxprom155 = sext i32 %99 to i64
  %100 = load i32, i32* %c, align 4
  %cmp156 = icmp sge i32 %100, 44
  %conv157 = zext i1 %cmp156 to i32
  %idxprom158 = sext i32 %conv157 to i64
  %arrayidx159 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* getelementptr inbounds ([3 x [2 x [128 x i32]]], [3 x [2 x [128 x i32]]]* @iso_charset_table, i32 0, i64 0), i32 0, i64 %idxprom158
  %arrayidx160 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx159, i32 0, i64 %idxprom155
  %101 = load i32, i32* %arrayidx160, align 4
  store i32 %101, i32* %id, align 4
  %cmp161 = icmp slt i32 %101, 0
  br i1 %cmp161, label %if.then.163, label %if.end.169

if.then.163:                                      ; preds = %lor.lhs.false.154, %lor.lhs.false.151, %do.end.148
  %102 = load i32, i32* %c1, align 4
  %cmp164 = icmp sge i32 %102, 128
  br i1 %cmp164, label %if.then.166, label %if.end.168

if.then.166:                                      ; preds = %if.then.163
  %103 = load i32, i32* %rejected, align 4
  %or167 = or i32 %103, 19
  store i32 %or167, i32* %rejected, align 4
  br label %if.end.168

if.end.168:                                       ; preds = %if.then.166, %if.then.163
  br label %sw.epilog

if.end.169:                                       ; preds = %lor.lhs.false.154
  br label %if.end.293

if.else.170:                                      ; preds = %land.lhs.true.111, %if.else.108
  %104 = load i32, i32* %c, align 4
  %cmp171 = icmp eq i32 %104, 36
  br i1 %cmp171, label %if.then.173, label %if.else.286

if.then.173:                                      ; preds = %if.else.170
  br label %do.body.174

do.body.174:                                      ; preds = %if.then.173
  %105 = load i8*, i8** %src, align 8
  %106 = load i8*, i8** %src_end, align 8
  %cmp175 = icmp eq i8* %105, %106
  br i1 %cmp175, label %if.then.177, label %if.end.182

if.then.177:                                      ; preds = %do.body.174
  %107 = load i8*, i8** %src_base, align 8
  %108 = load i8*, i8** %src, align 8
  %cmp178 = icmp ult i8* %107, %108
  br i1 %cmp178, label %if.then.180, label %if.end.181

if.then.180:                                      ; preds = %if.then.177
  %109 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %109, i32 1)
  br label %if.end.181

if.end.181:                                       ; preds = %if.then.180, %if.then.177
  br label %no_more_source

if.end.182:                                       ; preds = %do.body.174
  %110 = load i8*, i8** %src, align 8
  %incdec.ptr183 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %incdec.ptr183, i8** %src, align 8
  %111 = load i8, i8* %110, align 1
  %conv184 = zext i8 %111 to i32
  store i32 %conv184, i32* %c, align 4
  %112 = load i8, i8* %multibytep, align 1
  %tobool185 = trunc i8 %112 to i1
  br i1 %tobool185, label %land.lhs.true.187, label %if.end.205

land.lhs.true.187:                                ; preds = %if.end.182
  %113 = load i32, i32* %c, align 4
  %and188 = and i32 %113, 128
  %tobool189 = icmp ne i32 %and188, 0
  br i1 %tobool189, label %if.then.190, label %if.end.205

if.then.190:                                      ; preds = %land.lhs.true.187
  %114 = load i32, i32* %c, align 4
  %and191 = and i32 %114, 254
  %cmp192 = icmp eq i32 %and191, 192
  br i1 %cmp192, label %if.then.194, label %if.else.200

if.then.194:                                      ; preds = %if.then.190
  %115 = load i32, i32* %c, align 4
  %and195 = and i32 %115, 1
  %shl196 = shl i32 %and195, 6
  %116 = load i8*, i8** %src, align 8
  %incdec.ptr197 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr197, i8** %src, align 8
  %117 = load i8, i8* %116, align 1
  %conv198 = zext i8 %117 to i32
  %or199 = or i32 %shl196, %conv198
  store i32 %or199, i32* %c, align 4
  br label %if.end.204

if.else.200:                                      ; preds = %if.then.190
  %118 = load i8*, i8** %src, align 8
  %incdec.ptr201 = getelementptr inbounds i8, i8* %118, i32 -1
  store i8* %incdec.ptr201, i8** %src, align 8
  %119 = load i8*, i8** %src, align 8
  %call202 = call i32 @string_char(i8* %119, i8** %src, i32* null)
  %sub203 = sub nsw i32 0, %call202
  store i32 %sub203, i32* %c, align 4
  %120 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %120, i32 3)
  br label %if.end.204

if.end.204:                                       ; preds = %if.else.200, %if.then.194
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %land.lhs.true.187, %if.end.182
  %121 = load i64, i64* %consumed_chars, align 8
  %inc206 = add nsw i64 %121, 1
  store i64 %inc206, i64* %consumed_chars, align 8
  br label %do.end.207

do.end.207:                                       ; preds = %if.end.205
  %122 = load i32, i32* %c, align 4
  %cmp208 = icmp sge i32 %122, 64
  br i1 %cmp208, label %land.lhs.true.210, label %if.else.216

land.lhs.true.210:                                ; preds = %do.end.207
  %123 = load i32, i32* %c, align 4
  %cmp211 = icmp sle i32 %123, 66
  br i1 %cmp211, label %if.then.213, label %if.else.216

if.then.213:                                      ; preds = %land.lhs.true.210
  %124 = load i32, i32* %c, align 4
  %idxprom214 = sext i32 %124 to i64
  %arrayidx215 = getelementptr inbounds [128 x i32], [128 x i32]* getelementptr inbounds ([3 x [2 x [128 x i32]]], [3 x [2 x [128 x i32]]]* @iso_charset_table, i32 0, i64 1, i64 0), i32 0, i64 %idxprom214
  %125 = load i32, i32* %arrayidx215, align 4
  store i32 %125, i32* %id, align 4
  br label %if.end.285

if.else.216:                                      ; preds = %land.lhs.true.210, %do.end.207
  %126 = load i32, i32* %c, align 4
  %cmp217 = icmp sge i32 %126, 40
  br i1 %cmp217, label %land.lhs.true.219, label %if.else.278

land.lhs.true.219:                                ; preds = %if.else.216
  %127 = load i32, i32* %c, align 4
  %cmp220 = icmp sle i32 %127, 47
  br i1 %cmp220, label %if.then.222, label %if.else.278

if.then.222:                                      ; preds = %land.lhs.true.219
  br label %do.body.223

do.body.223:                                      ; preds = %if.then.222
  %128 = load i8*, i8** %src, align 8
  %129 = load i8*, i8** %src_end, align 8
  %cmp224 = icmp eq i8* %128, %129
  br i1 %cmp224, label %if.then.226, label %if.end.231

if.then.226:                                      ; preds = %do.body.223
  %130 = load i8*, i8** %src_base, align 8
  %131 = load i8*, i8** %src, align 8
  %cmp227 = icmp ult i8* %130, %131
  br i1 %cmp227, label %if.then.229, label %if.end.230

if.then.229:                                      ; preds = %if.then.226
  %132 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %132, i32 1)
  br label %if.end.230

if.end.230:                                       ; preds = %if.then.229, %if.then.226
  br label %no_more_source

if.end.231:                                       ; preds = %do.body.223
  %133 = load i8*, i8** %src, align 8
  %incdec.ptr232 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr232, i8** %src, align 8
  %134 = load i8, i8* %133, align 1
  %conv233 = zext i8 %134 to i32
  store i32 %conv233, i32* %c1, align 4
  %135 = load i8, i8* %multibytep, align 1
  %tobool234 = trunc i8 %135 to i1
  br i1 %tobool234, label %land.lhs.true.236, label %if.end.254

land.lhs.true.236:                                ; preds = %if.end.231
  %136 = load i32, i32* %c1, align 4
  %and237 = and i32 %136, 128
  %tobool238 = icmp ne i32 %and237, 0
  br i1 %tobool238, label %if.then.239, label %if.end.254

if.then.239:                                      ; preds = %land.lhs.true.236
  %137 = load i32, i32* %c1, align 4
  %and240 = and i32 %137, 254
  %cmp241 = icmp eq i32 %and240, 192
  br i1 %cmp241, label %if.then.243, label %if.else.249

if.then.243:                                      ; preds = %if.then.239
  %138 = load i32, i32* %c1, align 4
  %and244 = and i32 %138, 1
  %shl245 = shl i32 %and244, 6
  %139 = load i8*, i8** %src, align 8
  %incdec.ptr246 = getelementptr inbounds i8, i8* %139, i32 1
  store i8* %incdec.ptr246, i8** %src, align 8
  %140 = load i8, i8* %139, align 1
  %conv247 = zext i8 %140 to i32
  %or248 = or i32 %shl245, %conv247
  store i32 %or248, i32* %c1, align 4
  br label %if.end.253

if.else.249:                                      ; preds = %if.then.239
  %141 = load i8*, i8** %src, align 8
  %incdec.ptr250 = getelementptr inbounds i8, i8* %141, i32 -1
  store i8* %incdec.ptr250, i8** %src, align 8
  %142 = load i8*, i8** %src, align 8
  %call251 = call i32 @string_char(i8* %142, i8** %src, i32* null)
  %sub252 = sub nsw i32 0, %call251
  store i32 %sub252, i32* %c1, align 4
  %143 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %143, i32 3)
  br label %if.end.253

if.end.253:                                       ; preds = %if.else.249, %if.then.243
  br label %if.end.254

if.end.254:                                       ; preds = %if.end.253, %land.lhs.true.236, %if.end.231
  %144 = load i64, i64* %consumed_chars, align 8
  %inc255 = add nsw i64 %144, 1
  store i64 %inc255, i64* %consumed_chars, align 8
  br label %do.end.256

do.end.256:                                       ; preds = %if.end.254
  %145 = load i32, i32* %c1, align 4
  %cmp257 = icmp slt i32 %145, 32
  br i1 %cmp257, label %if.then.271, label %lor.lhs.false.259

lor.lhs.false.259:                                ; preds = %do.end.256
  %146 = load i32, i32* %c1, align 4
  %cmp260 = icmp sge i32 %146, 128
  br i1 %cmp260, label %if.then.271, label %lor.lhs.false.262

lor.lhs.false.262:                                ; preds = %lor.lhs.false.259
  %147 = load i32, i32* %c1, align 4
  %idxprom263 = sext i32 %147 to i64
  %148 = load i32, i32* %c, align 4
  %cmp264 = icmp sge i32 %148, 44
  %conv265 = zext i1 %cmp264 to i32
  %idxprom266 = sext i32 %conv265 to i64
  %arrayidx267 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* getelementptr inbounds ([3 x [2 x [128 x i32]]], [3 x [2 x [128 x i32]]]* @iso_charset_table, i32 0, i64 1), i32 0, i64 %idxprom266
  %arrayidx268 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx267, i32 0, i64 %idxprom263
  %149 = load i32, i32* %arrayidx268, align 4
  store i32 %149, i32* %id, align 4
  %cmp269 = icmp slt i32 %149, 0
  br i1 %cmp269, label %if.then.271, label %if.end.277

if.then.271:                                      ; preds = %lor.lhs.false.262, %lor.lhs.false.259, %do.end.256
  %150 = load i32, i32* %c1, align 4
  %cmp272 = icmp sge i32 %150, 128
  br i1 %cmp272, label %if.then.274, label %if.end.276

if.then.274:                                      ; preds = %if.then.271
  %151 = load i32, i32* %rejected, align 4
  %or275 = or i32 %151, 19
  store i32 %or275, i32* %rejected, align 4
  br label %if.end.276

if.end.276:                                       ; preds = %if.then.274, %if.then.271
  br label %sw.epilog

if.end.277:                                       ; preds = %lor.lhs.false.262
  br label %if.end.284

if.else.278:                                      ; preds = %land.lhs.true.219, %if.else.216
  %152 = load i32, i32* %c, align 4
  %cmp279 = icmp sge i32 %152, 128
  br i1 %cmp279, label %if.then.281, label %if.end.283

if.then.281:                                      ; preds = %if.else.278
  %153 = load i32, i32* %rejected, align 4
  %or282 = or i32 %153, 19
  store i32 %or282, i32* %rejected, align 4
  br label %if.end.283

if.end.283:                                       ; preds = %if.then.281, %if.else.278
  br label %sw.epilog

if.end.284:                                       ; preds = %if.end.277
  br label %if.end.285

if.end.285:                                       ; preds = %if.end.284, %if.then.213
  br label %if.end.292

if.else.286:                                      ; preds = %if.else.170
  %154 = load i32, i32* %c, align 4
  %cmp287 = icmp sge i32 %154, 128
  br i1 %cmp287, label %if.then.289, label %if.end.291

if.then.289:                                      ; preds = %if.else.286
  %155 = load i32, i32* %rejected, align 4
  %or290 = or i32 %155, 19
  store i32 %or290, i32* %rejected, align 4
  br label %if.end.291

if.end.291:                                       ; preds = %if.then.289, %if.else.286
  br label %sw.epilog

if.end.292:                                       ; preds = %if.end.285
  br label %if.end.293

if.end.293:                                       ; preds = %if.end.292, %if.end.169
  %156 = load i32, i32* %rejected, align 4
  %or294 = or i32 %156, 12
  store i32 %or294, i32* %rejected, align 4
  %157 = load i32, i32* %id, align 4
  %158 = load i32, i32* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 0, i32 2), align 4
  %cmp295 = icmp sle i32 %157, %158
  br i1 %cmp295, label %land.lhs.true.297, label %if.else.305

land.lhs.true.297:                                ; preds = %if.end.293
  %159 = load i32, i32* %id, align 4
  %idxprom298 = sext i32 %159 to i64
  %160 = load i8*, i8** getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 0, i32 4), align 8
  %arrayidx299 = getelementptr inbounds i8, i8* %160, i64 %idxprom298
  %161 = load i8, i8* %arrayidx299, align 1
  %conv300 = zext i8 %161 to i32
  %cmp301 = icmp ne i32 %conv300, 255
  br i1 %cmp301, label %if.then.303, label %if.else.305

if.then.303:                                      ; preds = %land.lhs.true.297
  %162 = load i32, i32* %found, align 4
  %or304 = or i32 %162, 1
  store i32 %or304, i32* %found, align 4
  br label %if.end.307

if.else.305:                                      ; preds = %land.lhs.true.297, %if.end.293
  %163 = load i32, i32* %rejected, align 4
  %or306 = or i32 %163, 1
  store i32 %or306, i32* %rejected, align 4
  br label %if.end.307

if.end.307:                                       ; preds = %if.else.305, %if.then.303
  %164 = load i32, i32* %id, align 4
  %165 = load i32, i32* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 1, i32 2), align 4
  %cmp308 = icmp sle i32 %164, %165
  br i1 %cmp308, label %land.lhs.true.310, label %if.else.318

land.lhs.true.310:                                ; preds = %if.end.307
  %166 = load i32, i32* %id, align 4
  %idxprom311 = sext i32 %166 to i64
  %167 = load i8*, i8** getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 1, i32 4), align 8
  %arrayidx312 = getelementptr inbounds i8, i8* %167, i64 %idxprom311
  %168 = load i8, i8* %arrayidx312, align 1
  %conv313 = zext i8 %168 to i32
  %cmp314 = icmp ne i32 %conv313, 255
  br i1 %cmp314, label %if.then.316, label %if.else.318

if.then.316:                                      ; preds = %land.lhs.true.310
  %169 = load i32, i32* %found, align 4
  %or317 = or i32 %169, 2
  store i32 %or317, i32* %found, align 4
  br label %if.end.320

if.else.318:                                      ; preds = %land.lhs.true.310, %if.end.307
  %170 = load i32, i32* %rejected, align 4
  %or319 = or i32 %170, 2
  store i32 %or319, i32* %rejected, align 4
  br label %if.end.320

if.end.320:                                       ; preds = %if.else.318, %if.then.316
  %171 = load i32, i32* %id, align 4
  %172 = load i32, i32* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 4, i32 2), align 4
  %cmp321 = icmp sle i32 %171, %172
  br i1 %cmp321, label %land.lhs.true.323, label %if.else.331

land.lhs.true.323:                                ; preds = %if.end.320
  %173 = load i32, i32* %id, align 4
  %idxprom324 = sext i32 %173 to i64
  %174 = load i8*, i8** getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 4, i32 4), align 8
  %arrayidx325 = getelementptr inbounds i8, i8* %174, i64 %idxprom324
  %175 = load i8, i8* %arrayidx325, align 1
  %conv326 = zext i8 %175 to i32
  %cmp327 = icmp ne i32 %conv326, 255
  br i1 %cmp327, label %if.then.329, label %if.else.331

if.then.329:                                      ; preds = %land.lhs.true.323
  %176 = load i32, i32* %found, align 4
  %or330 = or i32 %176, 16
  store i32 %or330, i32* %found, align 4
  br label %if.end.333

if.else.331:                                      ; preds = %land.lhs.true.323, %if.end.320
  %177 = load i32, i32* %rejected, align 4
  %or332 = or i32 %177, 16
  store i32 %or332, i32* %rejected, align 4
  br label %if.end.333

if.end.333:                                       ; preds = %if.else.331, %if.then.329
  %178 = load i32, i32* %id, align 4
  %179 = load i32, i32* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 5, i32 2), align 4
  %cmp334 = icmp sle i32 %178, %179
  br i1 %cmp334, label %land.lhs.true.336, label %if.else.344

land.lhs.true.336:                                ; preds = %if.end.333
  %180 = load i32, i32* %id, align 4
  %idxprom337 = sext i32 %180 to i64
  %181 = load i8*, i8** getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 5, i32 4), align 8
  %arrayidx338 = getelementptr inbounds i8, i8* %181, i64 %idxprom337
  %182 = load i8, i8* %arrayidx338, align 1
  %conv339 = zext i8 %182 to i32
  %cmp340 = icmp ne i32 %conv339, 255
  br i1 %cmp340, label %if.then.342, label %if.else.344

if.then.342:                                      ; preds = %land.lhs.true.336
  %183 = load i32, i32* %found, align 4
  %or343 = or i32 %183, 32
  store i32 %or343, i32* %found, align 4
  br label %if.end.346

if.else.344:                                      ; preds = %land.lhs.true.336, %if.end.333
  %184 = load i32, i32* %rejected, align 4
  %or345 = or i32 %184, 32
  store i32 %or345, i32* %rejected, align 4
  br label %if.end.346

if.end.346:                                       ; preds = %if.else.344, %if.then.342
  br label %if.end.347

if.end.347:                                       ; preds = %if.end.346, %if.then.107
  br label %if.end.348

if.end.348:                                       ; preds = %if.end.347, %if.end.99
  br label %if.end.349

if.end.349:                                       ; preds = %if.end.348, %if.then.87
  br label %sw.epilog

sw.bb.350:                                        ; preds = %do.end, %do.end
  %185 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 452), align 1
  %tobool351 = trunc i8 %185 to i1
  br i1 %tobool351, label %if.then.352, label %if.end.353

if.then.352:                                      ; preds = %sw.bb.350
  br label %sw.epilog

if.end.353:                                       ; preds = %sw.bb.350
  store i8 0, i8* %single_shifting, align 1
  %186 = load i32, i32* %rejected, align 4
  %or354 = or i32 %186, 15
  store i32 %or354, i32* %rejected, align 4
  br label %sw.epilog

sw.bb.355:                                        ; preds = %do.end
  store i8 0, i8* %single_shifting, align 1
  %187 = load i32, i32* %rejected, align 4
  %or356 = or i32 %187, 19
  store i32 %or356, i32* %rejected, align 4
  %188 = load i32, i32* %found, align 4
  %or357 = or i32 %188, 32
  store i32 %or357, i32* %found, align 4
  br label %check_extra_latin

sw.bb.358:                                        ; preds = %do.end, %do.end
  %189 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 452), align 1
  %tobool359 = trunc i8 %189 to i1
  br i1 %tobool359, label %if.then.360, label %if.end.361

if.then.360:                                      ; preds = %sw.bb.358
  br label %sw.epilog

if.end.361:                                       ; preds = %sw.bb.358
  store i8 0, i8* %single_shifting, align 1
  %190 = load i32, i32* %rejected, align 4
  %or362 = or i32 %190, 19
  store i32 %or362, i32* %rejected, align 4
  %191 = load i32, i32* getelementptr inbounds (%struct.iso_2022_spec, %struct.iso_2022_spec* bitcast (%union.anon* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 2, i32 3) to %struct.iso_2022_spec*), i32 0, i32 0), align 4
  %and363 = and i32 %191, 32
  %tobool364 = icmp ne i32 %and363, 0
  br i1 %tobool364, label %if.then.365, label %if.end.367

if.then.365:                                      ; preds = %if.end.361
  %192 = load i32, i32* %found, align 4
  %or366 = or i32 %192, 4
  store i32 %or366, i32* %found, align 4
  store i8 1, i8* %single_shifting, align 1
  br label %if.end.367

if.end.367:                                       ; preds = %if.then.365, %if.end.361
  %193 = load i32, i32* getelementptr inbounds (%struct.iso_2022_spec, %struct.iso_2022_spec* bitcast (%union.anon* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 3, i32 3) to %struct.iso_2022_spec*), i32 0, i32 0), align 4
  %and368 = and i32 %193, 32
  %tobool369 = icmp ne i32 %and368, 0
  br i1 %tobool369, label %if.then.370, label %if.end.372

if.then.370:                                      ; preds = %if.end.367
  %194 = load i32, i32* %found, align 4
  %or371 = or i32 %194, 8
  store i32 %or371, i32* %found, align 4
  store i8 1, i8* %single_shifting, align 1
  br label %if.end.372

if.end.372:                                       ; preds = %if.then.370, %if.end.367
  %195 = load i8, i8* %single_shifting, align 1
  %tobool373 = trunc i8 %195 to i1
  br i1 %tobool373, label %if.then.374, label %if.end.375

if.then.374:                                      ; preds = %if.end.372
  br label %sw.epilog

if.end.375:                                       ; preds = %if.end.372
  br label %check_extra_latin

sw.default:                                       ; preds = %do.end
  %196 = load i32, i32* %c, align 4
  %cmp376 = icmp slt i32 %196, 0
  br i1 %cmp376, label %if.then.378, label %if.end.379

if.then.378:                                      ; preds = %sw.default
  br label %while.cond

if.end.379:                                       ; preds = %sw.default
  %197 = load i32, i32* %c, align 4
  %cmp380 = icmp slt i32 %197, 128
  br i1 %cmp380, label %if.then.382, label %if.end.388

if.then.382:                                      ; preds = %if.end.379
  %198 = load i32, i32* %composition_count, align 4
  %cmp383 = icmp sge i32 %198, 0
  br i1 %cmp383, label %if.then.385, label %if.end.387

if.then.385:                                      ; preds = %if.then.382
  %199 = load i32, i32* %composition_count, align 4
  %inc386 = add nsw i32 %199, 1
  store i32 %inc386, i32* %composition_count, align 4
  br label %if.end.387

if.end.387:                                       ; preds = %if.then.385, %if.then.382
  store i8 0, i8* %single_shifting, align 1
  br label %sw.epilog

if.end.388:                                       ; preds = %if.end.379
  %200 = load i32, i32* %rejected, align 4
  %or389 = or i32 %200, 19
  store i32 %or389, i32* %rejected, align 4
  %201 = load i32, i32* %c, align 4
  %cmp390 = icmp sge i32 %201, 160
  br i1 %cmp390, label %if.then.392, label %if.end.466

if.then.392:                                      ; preds = %if.end.388
  %202 = load i32, i32* %found, align 4
  %or393 = or i32 %202, 4
  store i32 %or393, i32* %found, align 4
  %203 = load i8, i8* %single_shifting, align 1
  %tobool394 = trunc i8 %203 to i1
  br i1 %tobool394, label %if.end.465, label %land.lhs.true.395

land.lhs.true.395:                                ; preds = %if.then.392
  %204 = load i32, i32* %rejected, align 4
  %and396 = and i32 %204, 8
  %tobool397 = icmp ne i32 %and396, 0
  br i1 %tobool397, label %if.end.465, label %if.then.398

if.then.398:                                      ; preds = %land.lhs.true.395
  store i64 1, i64* %len, align 8
  br label %while.cond.399

while.cond.399:                                   ; preds = %if.end.440, %if.then.398
  %205 = load i8*, i8** %src, align 8
  %206 = load i8*, i8** %src_end, align 8
  %cmp400 = icmp ult i8* %205, %206
  br i1 %cmp400, label %while.body.402, label %while.end

while.body.402:                                   ; preds = %while.cond.399
  %207 = load i8*, i8** %src, align 8
  store i8* %207, i8** %src_base, align 8
  br label %do.body.403

do.body.403:                                      ; preds = %while.body.402
  %208 = load i8*, i8** %src, align 8
  %209 = load i8*, i8** %src_end, align 8
  %cmp404 = icmp eq i8* %208, %209
  br i1 %cmp404, label %if.then.406, label %if.end.411

if.then.406:                                      ; preds = %do.body.403
  %210 = load i8*, i8** %src_base, align 8
  %211 = load i8*, i8** %src, align 8
  %cmp407 = icmp ult i8* %210, %211
  br i1 %cmp407, label %if.then.409, label %if.end.410

if.then.409:                                      ; preds = %if.then.406
  %212 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %212, i32 1)
  br label %if.end.410

if.end.410:                                       ; preds = %if.then.409, %if.then.406
  br label %no_more_source

if.end.411:                                       ; preds = %do.body.403
  %213 = load i8*, i8** %src, align 8
  %incdec.ptr412 = getelementptr inbounds i8, i8* %213, i32 1
  store i8* %incdec.ptr412, i8** %src, align 8
  %214 = load i8, i8* %213, align 1
  %conv413 = zext i8 %214 to i32
  store i32 %conv413, i32* %c, align 4
  %215 = load i8, i8* %multibytep, align 1
  %tobool414 = trunc i8 %215 to i1
  br i1 %tobool414, label %land.lhs.true.416, label %if.end.434

land.lhs.true.416:                                ; preds = %if.end.411
  %216 = load i32, i32* %c, align 4
  %and417 = and i32 %216, 128
  %tobool418 = icmp ne i32 %and417, 0
  br i1 %tobool418, label %if.then.419, label %if.end.434

if.then.419:                                      ; preds = %land.lhs.true.416
  %217 = load i32, i32* %c, align 4
  %and420 = and i32 %217, 254
  %cmp421 = icmp eq i32 %and420, 192
  br i1 %cmp421, label %if.then.423, label %if.else.429

if.then.423:                                      ; preds = %if.then.419
  %218 = load i32, i32* %c, align 4
  %and424 = and i32 %218, 1
  %shl425 = shl i32 %and424, 6
  %219 = load i8*, i8** %src, align 8
  %incdec.ptr426 = getelementptr inbounds i8, i8* %219, i32 1
  store i8* %incdec.ptr426, i8** %src, align 8
  %220 = load i8, i8* %219, align 1
  %conv427 = zext i8 %220 to i32
  %or428 = or i32 %shl425, %conv427
  store i32 %or428, i32* %c, align 4
  br label %if.end.433

if.else.429:                                      ; preds = %if.then.419
  %221 = load i8*, i8** %src, align 8
  %incdec.ptr430 = getelementptr inbounds i8, i8* %221, i32 -1
  store i8* %incdec.ptr430, i8** %src, align 8
  %222 = load i8*, i8** %src, align 8
  %call431 = call i32 @string_char(i8* %222, i8** %src, i32* null)
  %sub432 = sub nsw i32 0, %call431
  store i32 %sub432, i32* %c, align 4
  %223 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %223, i32 3)
  br label %if.end.433

if.end.433:                                       ; preds = %if.else.429, %if.then.423
  br label %if.end.434

if.end.434:                                       ; preds = %if.end.433, %land.lhs.true.416, %if.end.411
  %224 = load i64, i64* %consumed_chars, align 8
  %inc435 = add nsw i64 %224, 1
  store i64 %inc435, i64* %consumed_chars, align 8
  br label %do.end.436

do.end.436:                                       ; preds = %if.end.434
  %225 = load i32, i32* %c, align 4
  %cmp437 = icmp slt i32 %225, 160
  br i1 %cmp437, label %if.then.439, label %if.end.440

if.then.439:                                      ; preds = %do.end.436
  %226 = load i8*, i8** %src_base, align 8
  store i8* %226, i8** %src, align 8
  br label %while.end

if.end.440:                                       ; preds = %do.end.436
  %227 = load i64, i64* %len, align 8
  %inc441 = add nsw i64 %227, 1
  store i64 %inc441, i64* %len, align 8
  br label %while.cond.399

while.end:                                        ; preds = %if.then.439, %while.cond.399
  %228 = load i64, i64* %len, align 8
  %and442 = and i64 %228, 1
  %tobool443 = icmp ne i64 %and442, 0
  br i1 %tobool443, label %land.lhs.true.444, label %if.else.455

land.lhs.true.444:                                ; preds = %while.end
  %229 = load i8*, i8** %src, align 8
  %230 = load i8*, i8** %src_end, align 8
  %cmp445 = icmp ult i8* %229, %230
  br i1 %cmp445, label %if.then.447, label %if.else.455

if.then.447:                                      ; preds = %land.lhs.true.444
  %231 = load i32, i32* %rejected, align 4
  %or448 = or i32 %231, 8
  store i32 %or448, i32* %rejected, align 4
  %232 = load i32, i32* %composition_count, align 4
  %cmp449 = icmp sge i32 %232, 0
  br i1 %cmp449, label %if.then.451, label %if.end.454

if.then.451:                                      ; preds = %if.then.447
  %233 = load i64, i64* %len, align 8
  %234 = load i32, i32* %composition_count, align 4
  %conv452 = sext i32 %234 to i64
  %add = add nsw i64 %conv452, %233
  %conv453 = trunc i64 %add to i32
  store i32 %conv453, i32* %composition_count, align 4
  br label %if.end.454

if.end.454:                                       ; preds = %if.then.451, %if.then.447
  br label %if.end.464

if.else.455:                                      ; preds = %land.lhs.true.444, %while.end
  %235 = load i32, i32* %found, align 4
  %or456 = or i32 %235, 8
  store i32 %or456, i32* %found, align 4
  %236 = load i32, i32* %composition_count, align 4
  %cmp457 = icmp sge i32 %236, 0
  br i1 %cmp457, label %if.then.459, label %if.end.463

if.then.459:                                      ; preds = %if.else.455
  %237 = load i64, i64* %len, align 8
  %div = sdiv i64 %237, 2
  %238 = load i32, i32* %composition_count, align 4
  %conv460 = sext i32 %238 to i64
  %add461 = add nsw i64 %conv460, %div
  %conv462 = trunc i64 %add461 to i32
  store i32 %conv462, i32* %composition_count, align 4
  br label %if.end.463

if.end.463:                                       ; preds = %if.then.459, %if.else.455
  br label %if.end.464

if.end.464:                                       ; preds = %if.end.463, %if.end.454
  br label %if.end.465

if.end.465:                                       ; preds = %if.end.464, %land.lhs.true.395, %if.then.392
  br label %sw.epilog

if.end.466:                                       ; preds = %if.end.388
  br label %check_extra_latin

check_extra_latin:                                ; preds = %if.end.466, %if.end.375, %sw.bb.355
  %239 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 157), align 8
  %call467 = call zeroext i1 @VECTORP(i64 %239)
  br i1 %call467, label %lor.lhs.false.468, label %if.then.474

lor.lhs.false.468:                                ; preds = %check_extra_latin
  %240 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 157), align 8
  %241 = load i32, i32* %c, align 4
  %conv469 = sext i32 %241 to i64
  %call470 = call i64 @AREF(i64 %240, i64 %conv469)
  %call471 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp472 = icmp eq i64 %call470, %call471
  br i1 %cmp472, label %if.then.474, label %if.end.475

if.then.474:                                      ; preds = %lor.lhs.false.468, %check_extra_latin
  store i32 63, i32* %rejected, align 4
  br label %sw.epilog

if.end.475:                                       ; preds = %lor.lhs.false.468
  %242 = load i32, i32* getelementptr inbounds (%struct.iso_2022_spec, %struct.iso_2022_spec* bitcast (%union.anon* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 2, i32 3) to %struct.iso_2022_spec*), i32 0, i32 0), align 4
  %and476 = and i32 %242, 4096
  %tobool477 = icmp ne i32 %and476, 0
  br i1 %tobool477, label %if.then.478, label %if.else.480

if.then.478:                                      ; preds = %if.end.475
  %243 = load i32, i32* %found, align 4
  %or479 = or i32 %243, 4
  store i32 %or479, i32* %found, align 4
  br label %if.end.482

if.else.480:                                      ; preds = %if.end.475
  %244 = load i32, i32* %rejected, align 4
  %or481 = or i32 %244, 4
  store i32 %or481, i32* %rejected, align 4
  br label %if.end.482

if.end.482:                                       ; preds = %if.else.480, %if.then.478
  %245 = load i32, i32* %rejected, align 4
  %or483 = or i32 %245, 8
  store i32 %or483, i32* %rejected, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.482, %if.then.474, %if.end.465, %if.end.387, %if.then.374, %if.then.360, %if.end.353, %if.then.352, %if.end.349, %if.end.291, %if.end.283, %if.end.276, %if.end.168, %if.then.98, %if.then.47
  br label %while.cond

while.end.484:                                    ; preds = %while.cond
  %246 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected485 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %246, i32 0, i32 2
  %247 = load i32, i32* %rejected485, align 4
  %or486 = or i32 %247, 63
  store i32 %or486, i32* %rejected485, align 4
  store i1 false, i1* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.410, %if.end.230, %if.end.181, %if.end.122, %if.end.56, %if.end.23
  %248 = load i32, i32* %rejected, align 4
  %249 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected487 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %249, i32 0, i32 2
  %250 = load i32, i32* %rejected487, align 4
  %or488 = or i32 %250, %248
  store i32 %or488, i32* %rejected487, align 4
  %251 = load i32, i32* %found, align 4
  %252 = load i32, i32* %rejected, align 4
  %neg = xor i32 %252, -1
  %and489 = and i32 %251, %neg
  %253 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found490 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %253, i32 0, i32 1
  %254 = load i32, i32* %found490, align 4
  %or491 = or i32 %254, %and489
  store i32 %or491, i32* %found490, align 4
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %no_more_source, %while.end.484
  %255 = load i1, i1* %retval
  ret i1 %255
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_iso_2022(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %consumed_chars_base = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %charset_id_0 = alloca i32, align 4
  %charset_id_1 = alloca i32, align 4
  %charset_id_2 = alloca i32, align 4
  %charset_id_3 = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %c = alloca i32, align 4
  %cmp_status = alloca %struct.composition_status*, align 8
  %attrs = alloca i64, align 8
  %char_offset = alloca i64, align 8
  %last_offset = alloca i64, align 8
  %last_id = alloca i32, align 4
  %eol_dos = alloca i8, align 1
  %byte_after_cr = alloca i32, align 4
  %i = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %c3 = alloca i32, align 4
  %rule = alloca i32, align 4
  %gref = alloca i32, align 4
  %nref = alloca i32, align 4
  %b = alloca i32, align 4
  %reg = alloca i32, align 4
  %chars96 = alloca i32, align 4
  %id777 = alloca i32, align 4
  %prev = alloca i32, align 4
  %dim = alloca i32, align 4
  %M = alloca i32, align 4
  %L = alloca i32, align 4
  %size = alloca i32, align 4
  %reg1677 = alloca i32, align 4
  %chars961678 = alloca i32, align 4
  %id1766 = alloca i32, align 4
  %prev1767 = alloca i32, align 4
  %offset = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr7, i64 -15
  store i32* %add.ptr8, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 3
  %iso_2022 = bitcast %union.anon* %spec to %struct.iso_2022_spec*
  %current_invocation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation, i32 0, i64 0
  %18 = load i32, i32* %arrayidx, align 4
  %cmp = icmp slt i32 %18, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %19 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec9 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %19, i32 0, i32 3
  %iso_202210 = bitcast %union.anon* %spec9 to %struct.iso_2022_spec*
  %current_invocation11 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202210, i32 0, i32 1
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation11, i32 0, i64 0
  %20 = load i32, i32* %arrayidx12, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec13 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 3
  %iso_202214 = bitcast %union.anon* %spec13 to %struct.iso_2022_spec*
  %current_designation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202214, i32 0, i32 2
  %arrayidx15 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation, i32 0, i64 %idxprom
  %22 = load i32, i32* %arrayidx15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %22, %cond.false ]
  store i32 %cond, i32* %charset_id_0, align 4
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec16 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 3
  %iso_202217 = bitcast %union.anon* %spec16 to %struct.iso_2022_spec*
  %current_invocation18 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202217, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation18, i32 0, i64 1
  %24 = load i32, i32* %arrayidx19, align 4
  %cmp20 = icmp slt i32 %24, 0
  br i1 %cmp20, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %cond.end
  br label %cond.end.32

cond.false.22:                                    ; preds = %cond.end
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec23 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %25, i32 0, i32 3
  %iso_202224 = bitcast %union.anon* %spec23 to %struct.iso_2022_spec*
  %current_invocation25 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202224, i32 0, i32 1
  %arrayidx26 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation25, i32 0, i64 1
  %26 = load i32, i32* %arrayidx26, align 4
  %idxprom27 = sext i32 %26 to i64
  %27 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec28 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %27, i32 0, i32 3
  %iso_202229 = bitcast %union.anon* %spec28 to %struct.iso_2022_spec*
  %current_designation30 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202229, i32 0, i32 2
  %arrayidx31 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation30, i32 0, i64 %idxprom27
  %28 = load i32, i32* %arrayidx31, align 4
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.22, %cond.true.21
  %cond33 = phi i32 [ -1, %cond.true.21 ], [ %28, %cond.false.22 ]
  store i32 %cond33, i32* %charset_id_1, align 4
  %29 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec34 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %29, i32 0, i32 3
  %iso_202235 = bitcast %union.anon* %spec34 to %struct.iso_2022_spec*
  %cmp_status36 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202235, i32 0, i32 5
  store %struct.composition_status* %cmp_status36, %struct.composition_status** %cmp_status, align 8
  %30 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %30)
  %31 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %31, i32 0, i32 0
  %32 = load i64, i64* %id, align 8
  %call37 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %32)
  %call38 = call i64 @AREF(i64 %call37, i64 0)
  store i64 %call38, i64* %attrs, align 8
  %33 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %33, i32 0, i32 9
  %34 = load i64, i64* %produced_char, align 8
  store i64 %34, i64* %char_offset, align 8
  %35 = load i64, i64* %char_offset, align 8
  store i64 %35, i64* %last_offset, align 8
  %36 = load i32, i32* @charset_ascii, align 4
  store i32 %36, i32* %last_id, align 4
  %37 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %37 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %cond.end.32
  %38 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call39 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %38)
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id40 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %39, i32 0, i32 0
  %40 = load i64, i64* %id40, align 8
  %call41 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call39, i64 %40)
  %call42 = call i64 @AREF(i64 %call41, i64 2)
  %call43 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp44 = icmp eq i64 %call42, %call43
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end.32
  %41 = phi i1 [ false, %cond.end.32 ], [ %cmp44, %land.rhs ]
  %frombool45 = zext i1 %41 to i8
  store i8 %frombool45, i8* %eol_dos, align 1
  store i32 -1, i32* %byte_after_cr, align 4
  %42 = load i64, i64* %attrs, align 8
  call void @setup_iso_safe_charsets(i64 %42)
  %43 = load i64, i64* %attrs, align 8
  %call46 = call i64 @AREF(i64 %43, i64 15)
  %call47 = call i8* @SDATA(i64 %call46)
  %44 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets = getelementptr inbounds %struct.coding_system, %struct.coding_system* %44, i32 0, i32 4
  store i8* %call47, i8** %safe_charsets, align 8
  %45 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state = getelementptr inbounds %struct.composition_status, %struct.composition_status* %45, i32 0, i32 0
  %46 = load i32, i32* %state, align 4
  %cmp48 = icmp ne i32 %46, 0
  br i1 %cmp48, label %if.then, label %if.end.59

if.then:                                          ; preds = %land.end
  %47 = load i32*, i32** %charbuf_end, align 8
  %48 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %47 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %48 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %49 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length = getelementptr inbounds %struct.composition_status, %struct.composition_status* %49, i32 0, i32 3
  %50 = load i32, i32* %length, align 4
  %conv = sext i32 %50 to i64
  %cmp49 = icmp slt i64 %sub.ptr.div, %conv
  br i1 %cmp49, label %if.then.51, label %if.end

if.then.51:                                       ; preds = %if.then
  call void @emacs_abort() #6
  unreachable

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %51 = load i32, i32* %i, align 4
  %52 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length52 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %52, i32 0, i32 3
  %53 = load i32, i32* %length52, align 4
  %cmp53 = icmp slt i32 %51, %53
  br i1 %cmp53, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %54 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %54 to i64
  %55 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %carryover = getelementptr inbounds %struct.composition_status, %struct.composition_status* %55, i32 0, i32 6
  %arrayidx56 = getelementptr inbounds [68 x i32], [68 x i32]* %carryover, i32 0, i64 %idxprom55
  %56 = load i32, i32* %arrayidx56, align 4
  %57 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %57, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  store i32 %56, i32* %57, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %58 = load i32, i32* %i, align 4
  %inc = add nsw i32 %58, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %59 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %59, i32 0, i32 1
  %bf.load57 = load i32, i32* %annotated, align 8
  %bf.clear58 = and i32 %bf.load57, -8388609
  %bf.set = or i32 %bf.clear58, 8388608
  store i32 %bf.set, i32* %annotated, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %for.end, %land.end
  br label %while.body

while.body:                                       ; preds = %if.end.59, %cond.end.120, %if.end.183, %do.end.287, %cond.end.433, %cond.end.464, %if.end.898, %cond.end.935, %cond.end.973, %do.end.1255, %do.end.1322, %sw.epilog, %if.end.1668, %if.end.1889, %if.end.2251, %cond.end.2315
  %60 = load i8*, i8** %src, align 8
  store i8* %60, i8** %src_base, align 8
  %61 = load i64, i64* %consumed_chars, align 8
  store i64 %61, i64* %consumed_chars_base, align 8
  %62 = load i32*, i32** %charbuf, align 8
  %63 = load i32*, i32** %charbuf_end, align 8
  %cmp60 = icmp uge i32* %62, %63
  br i1 %cmp60, label %if.then.62, label %if.end.68

if.then.62:                                       ; preds = %while.body
  %64 = load i32, i32* %byte_after_cr, align 4
  %cmp63 = icmp sge i32 %64, 0
  br i1 %cmp63, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %if.then.62
  %65 = load i8*, i8** %src_base, align 8
  %incdec.ptr66 = getelementptr inbounds i8, i8* %65, i32 -1
  store i8* %incdec.ptr66, i8** %src_base, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %if.then.62
  br label %while.end

if.end.68:                                        ; preds = %while.body
  %66 = load i32, i32* %byte_after_cr, align 4
  %cmp69 = icmp sge i32 %66, 0
  br i1 %cmp69, label %if.then.71, label %if.else

if.then.71:                                       ; preds = %if.end.68
  %67 = load i32, i32* %byte_after_cr, align 4
  store i32 %67, i32* %c1, align 4
  store i32 -1, i32* %byte_after_cr, align 4
  br label %if.end.99

if.else:                                          ; preds = %if.end.68
  br label %do.body

do.body:                                          ; preds = %if.else
  %68 = load i8*, i8** %src, align 8
  %69 = load i8*, i8** %src_end, align 8
  %cmp72 = icmp eq i8* %68, %69
  br i1 %cmp72, label %if.then.74, label %if.end.79

if.then.74:                                       ; preds = %do.body
  %70 = load i8*, i8** %src_base, align 8
  %71 = load i8*, i8** %src, align 8
  %cmp75 = icmp ult i8* %70, %71
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.then.74
  %72 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %72, i32 1)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %if.then.74
  br label %no_more_source

if.end.79:                                        ; preds = %do.body
  %73 = load i8*, i8** %src, align 8
  %incdec.ptr80 = getelementptr inbounds i8, i8* %73, i32 1
  store i8* %incdec.ptr80, i8** %src, align 8
  %74 = load i8, i8* %73, align 1
  %conv81 = zext i8 %74 to i32
  store i32 %conv81, i32* %c1, align 4
  %75 = load i8, i8* %multibytep, align 1
  %tobool82 = trunc i8 %75 to i1
  br i1 %tobool82, label %land.lhs.true, label %if.end.97

land.lhs.true:                                    ; preds = %if.end.79
  %76 = load i32, i32* %c1, align 4
  %and = and i32 %76, 128
  %tobool84 = icmp ne i32 %and, 0
  br i1 %tobool84, label %if.then.85, label %if.end.97

if.then.85:                                       ; preds = %land.lhs.true
  %77 = load i32, i32* %c1, align 4
  %and86 = and i32 %77, 254
  %cmp87 = icmp eq i32 %and86, 192
  br i1 %cmp87, label %if.then.89, label %if.else.93

if.then.89:                                       ; preds = %if.then.85
  %78 = load i32, i32* %c1, align 4
  %and90 = and i32 %78, 1
  %shl = shl i32 %and90, 6
  %79 = load i8*, i8** %src, align 8
  %incdec.ptr91 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr91, i8** %src, align 8
  %80 = load i8, i8* %79, align 1
  %conv92 = zext i8 %80 to i32
  %or = or i32 %shl, %conv92
  store i32 %or, i32* %c1, align 4
  br label %if.end.96

if.else.93:                                       ; preds = %if.then.85
  %81 = load i8*, i8** %src, align 8
  %incdec.ptr94 = getelementptr inbounds i8, i8* %81, i32 -1
  store i8* %incdec.ptr94, i8** %src, align 8
  %82 = load i8*, i8** %src, align 8
  %call95 = call i32 @string_char(i8* %82, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call95
  store i32 %sub, i32* %c1, align 4
  %83 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %83, i32 3)
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.93, %if.then.89
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %land.lhs.true, %if.end.79
  %84 = load i64, i64* %consumed_chars, align 8
  %inc98 = add nsw i64 %84, 1
  store i64 %inc98, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.97
  br label %if.end.99

if.end.99:                                        ; preds = %do.end, %if.then.71
  %85 = load i32, i32* %c1, align 4
  %cmp100 = icmp slt i32 %85, 0
  br i1 %cmp100, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.end.99
  br label %invalid_code

if.end.103:                                       ; preds = %if.end.99
  %86 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec104 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %86, i32 0, i32 3
  %iso_2022105 = bitcast %union.anon* %spec104 to %struct.iso_2022_spec*
  %ctext_extended_segment_len = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022105, i32 0, i32 3
  %87 = load i32, i32* %ctext_extended_segment_len, align 4
  %cmp106 = icmp sgt i32 %87, 0
  br i1 %cmp106, label %if.then.108, label %if.end.127

if.then.108:                                      ; preds = %if.end.103
  br i1 true, label %cond.true.109, label %cond.false.112

cond.true.109:                                    ; preds = %if.then.108
  %88 = load i32, i32* %c1, align 4
  %add = add i32 %88, 0
  %cmp110 = icmp ult i32 %add, 128
  br i1 %cmp110, label %cond.true.117, label %cond.false.118

cond.false.112:                                   ; preds = %if.then.108
  %89 = load i32, i32* %c1, align 4
  %conv113 = sext i32 %89 to i64
  %add114 = add i64 %conv113, 0
  %cmp115 = icmp ult i64 %add114, 128
  br i1 %cmp115, label %cond.true.117, label %cond.false.118

cond.true.117:                                    ; preds = %cond.false.112, %cond.true.109
  %90 = load i32, i32* %c1, align 4
  br label %cond.end.120

cond.false.118:                                   ; preds = %cond.false.112, %cond.true.109
  %91 = load i32, i32* %c1, align 4
  %add119 = add nsw i32 %91, 4194048
  br label %cond.end.120

cond.end.120:                                     ; preds = %cond.false.118, %cond.true.117
  %cond121 = phi i32 [ %90, %cond.true.117 ], [ %add119, %cond.false.118 ]
  %92 = load i32*, i32** %charbuf, align 8
  %incdec.ptr122 = getelementptr inbounds i32, i32* %92, i32 1
  store i32* %incdec.ptr122, i32** %charbuf, align 8
  store i32 %cond121, i32* %92, align 4
  %93 = load i64, i64* %char_offset, align 8
  %inc123 = add nsw i64 %93, 1
  store i64 %inc123, i64* %char_offset, align 8
  %94 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec124 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %94, i32 0, i32 3
  %iso_2022125 = bitcast %union.anon* %spec124 to %struct.iso_2022_spec*
  %ctext_extended_segment_len126 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022125, i32 0, i32 3
  %95 = load i32, i32* %ctext_extended_segment_len126, align 4
  %dec = add nsw i32 %95, -1
  store i32 %dec, i32* %ctext_extended_segment_len126, align 4
  br label %while.body

if.end.127:                                       ; preds = %if.end.103
  %96 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec128 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %96, i32 0, i32 3
  %iso_2022129 = bitcast %union.anon* %spec128 to %struct.iso_2022_spec*
  %embedded_utf_8 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022129, i32 0, i32 4
  %bf.load130 = load i8, i8* %embedded_utf_8, align 4
  %bf.lshr131 = lshr i8 %bf.load130, 2
  %bf.clear132 = and i8 %bf.lshr131, 1
  %bf.cast133 = trunc i8 %bf.clear132 to i1
  br i1 %bf.cast133, label %if.then.134, label %if.end.184

if.then.134:                                      ; preds = %if.end.127
  %97 = load i32, i32* %c1, align 4
  %cmp135 = icmp eq i32 %97, 27
  br i1 %cmp135, label %if.then.137, label %if.else.166

if.then.137:                                      ; preds = %if.then.134
  %98 = load i8*, i8** %src, align 8
  %add.ptr138 = getelementptr inbounds i8, i8* %98, i64 1
  %99 = load i8*, i8** %src_end, align 8
  %cmp139 = icmp uge i8* %add.ptr138, %99
  br i1 %cmp139, label %if.then.141, label %if.end.142

if.then.141:                                      ; preds = %if.then.137
  br label %no_more_source

if.end.142:                                       ; preds = %if.then.137
  %100 = load i32*, i32** %charbuf, align 8
  %incdec.ptr143 = getelementptr inbounds i32, i32* %100, i32 1
  store i32* %incdec.ptr143, i32** %charbuf, align 8
  store i32 27, i32* %100, align 4
  %101 = load i64, i64* %char_offset, align 8
  %inc144 = add nsw i64 %101, 1
  store i64 %inc144, i64* %char_offset, align 8
  %102 = load i8*, i8** %src, align 8
  %arrayidx145 = getelementptr inbounds i8, i8* %102, i64 0
  %103 = load i8, i8* %arrayidx145, align 1
  %conv146 = zext i8 %103 to i32
  %cmp147 = icmp eq i32 %conv146, 37
  br i1 %cmp147, label %land.lhs.true.149, label %if.end.165

land.lhs.true.149:                                ; preds = %if.end.142
  %104 = load i8*, i8** %src, align 8
  %arrayidx150 = getelementptr inbounds i8, i8* %104, i64 1
  %105 = load i8, i8* %arrayidx150, align 1
  %conv151 = zext i8 %105 to i32
  %cmp152 = icmp eq i32 %conv151, 64
  br i1 %cmp152, label %if.then.154, label %if.end.165

if.then.154:                                      ; preds = %land.lhs.true.149
  %106 = load i8*, i8** %src, align 8
  %add.ptr155 = getelementptr inbounds i8, i8* %106, i64 2
  store i8* %add.ptr155, i8** %src, align 8
  %107 = load i64, i64* %consumed_chars, align 8
  %add156 = add nsw i64 %107, 2
  store i64 %add156, i64* %consumed_chars, align 8
  %108 = load i64, i64* %char_offset, align 8
  %add157 = add nsw i64 %108, 2
  store i64 %add157, i64* %char_offset, align 8
  %109 = load i32*, i32** %charbuf, align 8
  %incdec.ptr158 = getelementptr inbounds i32, i32* %109, i32 1
  store i32* %incdec.ptr158, i32** %charbuf, align 8
  store i32 37, i32* %109, align 4
  %110 = load i32*, i32** %charbuf, align 8
  %incdec.ptr159 = getelementptr inbounds i32, i32* %110, i32 1
  store i32* %incdec.ptr159, i32** %charbuf, align 8
  store i32 64, i32* %110, align 4
  %111 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec160 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %111, i32 0, i32 3
  %iso_2022161 = bitcast %union.anon* %spec160 to %struct.iso_2022_spec*
  %embedded_utf_8162 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022161, i32 0, i32 4
  %bf.load163 = load i8, i8* %embedded_utf_8162, align 4
  %bf.clear164 = and i8 %bf.load163, -5
  store i8 %bf.clear164, i8* %embedded_utf_8162, align 4
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.154, %land.lhs.true.149, %if.end.142
  br label %if.end.183

if.else.166:                                      ; preds = %if.then.134
  br i1 true, label %cond.true.167, label %cond.false.171

cond.true.167:                                    ; preds = %if.else.166
  %112 = load i32, i32* %c1, align 4
  %add168 = add i32 %112, 0
  %cmp169 = icmp ult i32 %add168, 128
  br i1 %cmp169, label %cond.true.176, label %cond.false.177

cond.false.171:                                   ; preds = %if.else.166
  %113 = load i32, i32* %c1, align 4
  %conv172 = sext i32 %113 to i64
  %add173 = add i64 %conv172, 0
  %cmp174 = icmp ult i64 %add173, 128
  br i1 %cmp174, label %cond.true.176, label %cond.false.177

cond.true.176:                                    ; preds = %cond.false.171, %cond.true.167
  %114 = load i32, i32* %c1, align 4
  br label %cond.end.179

cond.false.177:                                   ; preds = %cond.false.171, %cond.true.167
  %115 = load i32, i32* %c1, align 4
  %add178 = add nsw i32 %115, 4194048
  br label %cond.end.179

cond.end.179:                                     ; preds = %cond.false.177, %cond.true.176
  %cond180 = phi i32 [ %114, %cond.true.176 ], [ %add178, %cond.false.177 ]
  %116 = load i32*, i32** %charbuf, align 8
  %incdec.ptr181 = getelementptr inbounds i32, i32* %116, i32 1
  store i32* %incdec.ptr181, i32** %charbuf, align 8
  store i32 %cond180, i32* %116, align 4
  %117 = load i64, i64* %char_offset, align 8
  %inc182 = add nsw i64 %117, 1
  store i64 %inc182, i64* %char_offset, align 8
  br label %if.end.183

if.end.183:                                       ; preds = %cond.end.179, %if.end.165
  br label %while.body

if.end.184:                                       ; preds = %if.end.127
  %118 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state185 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %118, i32 0, i32 0
  %119 = load i32, i32* %state185, align 4
  %cmp186 = icmp eq i32 %119, 2
  br i1 %cmp186, label %land.lhs.true.191, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.184
  %120 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state188 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %120, i32 0, i32 0
  %121 = load i32, i32* %state188, align 4
  %cmp189 = icmp eq i32 %121, 4
  br i1 %cmp189, label %land.lhs.true.191, label %if.end.288

land.lhs.true.191:                                ; preds = %lor.lhs.false, %if.end.184
  %122 = load i32, i32* %c1, align 4
  %cmp192 = icmp ne i32 %122, 27
  br i1 %cmp192, label %if.then.194, label %if.end.288

if.then.194:                                      ; preds = %land.lhs.true.191
  br label %do.body.195

do.body.195:                                      ; preds = %if.then.194
  %123 = load i32, i32* %c1, align 4
  %sub196 = sub nsw i32 %123, 32
  store i32 %sub196, i32* %rule, align 4
  %124 = load i32, i32* %rule, align 4
  %cmp197 = icmp slt i32 %124, 0
  br i1 %cmp197, label %if.then.199, label %if.end.200

if.then.199:                                      ; preds = %do.body.195
  br label %invalid_code

if.end.200:                                       ; preds = %do.body.195
  %125 = load i32, i32* %rule, align 4
  %cmp201 = icmp slt i32 %125, 81
  br i1 %cmp201, label %if.then.203, label %if.else.213

if.then.203:                                      ; preds = %if.end.200
  %126 = load i32, i32* %rule, align 4
  %div = sdiv i32 %126, 9
  store i32 %div, i32* %gref, align 4
  %127 = load i32, i32* %rule, align 4
  %rem = srem i32 %127, 9
  store i32 %rem, i32* %nref, align 4
  %128 = load i32, i32* %gref, align 4
  %cmp204 = icmp eq i32 %128, 4
  br i1 %cmp204, label %if.then.206, label %if.end.207

if.then.206:                                      ; preds = %if.then.203
  store i32 10, i32* %gref, align 4
  br label %if.end.207

if.end.207:                                       ; preds = %if.then.206, %if.then.203
  %129 = load i32, i32* %nref, align 4
  %cmp208 = icmp eq i32 %129, 4
  br i1 %cmp208, label %if.then.210, label %if.end.211

if.then.210:                                      ; preds = %if.end.207
  store i32 10, i32* %nref, align 4
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.210, %if.end.207
  %130 = load i32, i32* %gref, align 4
  %mul = mul nsw i32 %130, 12
  %131 = load i32, i32* %nref, align 4
  %add212 = add nsw i32 %mul, %131
  store i32 %add212, i32* %rule, align 4
  br label %if.end.278

if.else.213:                                      ; preds = %if.end.200
  br label %do.body.214

do.body.214:                                      ; preds = %if.else.213
  %132 = load i8*, i8** %src, align 8
  %133 = load i8*, i8** %src_end, align 8
  %cmp215 = icmp eq i8* %132, %133
  br i1 %cmp215, label %if.then.217, label %if.end.222

if.then.217:                                      ; preds = %do.body.214
  %134 = load i8*, i8** %src_base, align 8
  %135 = load i8*, i8** %src, align 8
  %cmp218 = icmp ult i8* %134, %135
  br i1 %cmp218, label %if.then.220, label %if.end.221

if.then.220:                                      ; preds = %if.then.217
  %136 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %136, i32 1)
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.220, %if.then.217
  br label %no_more_source

if.end.222:                                       ; preds = %do.body.214
  %137 = load i8*, i8** %src, align 8
  %incdec.ptr223 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr223, i8** %src, align 8
  %138 = load i8, i8* %137, align 1
  %conv224 = zext i8 %138 to i32
  store i32 %conv224, i32* %b, align 4
  %139 = load i8, i8* %multibytep, align 1
  %tobool225 = trunc i8 %139 to i1
  br i1 %tobool225, label %land.lhs.true.227, label %if.end.245

land.lhs.true.227:                                ; preds = %if.end.222
  %140 = load i32, i32* %b, align 4
  %and228 = and i32 %140, 128
  %tobool229 = icmp ne i32 %and228, 0
  br i1 %tobool229, label %if.then.230, label %if.end.245

if.then.230:                                      ; preds = %land.lhs.true.227
  %141 = load i32, i32* %b, align 4
  %and231 = and i32 %141, 254
  %cmp232 = icmp eq i32 %and231, 192
  br i1 %cmp232, label %if.then.234, label %if.else.240

if.then.234:                                      ; preds = %if.then.230
  %142 = load i32, i32* %b, align 4
  %and235 = and i32 %142, 1
  %shl236 = shl i32 %and235, 6
  %143 = load i8*, i8** %src, align 8
  %incdec.ptr237 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr237, i8** %src, align 8
  %144 = load i8, i8* %143, align 1
  %conv238 = zext i8 %144 to i32
  %or239 = or i32 %shl236, %conv238
  store i32 %or239, i32* %b, align 4
  br label %if.end.244

if.else.240:                                      ; preds = %if.then.230
  %145 = load i8*, i8** %src, align 8
  %incdec.ptr241 = getelementptr inbounds i8, i8* %145, i32 -1
  store i8* %incdec.ptr241, i8** %src, align 8
  %146 = load i8*, i8** %src, align 8
  %call242 = call i32 @string_char(i8* %146, i8** %src, i32* null)
  %sub243 = sub nsw i32 0, %call242
  store i32 %sub243, i32* %b, align 4
  %147 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %147, i32 3)
  br label %if.end.244

if.end.244:                                       ; preds = %if.else.240, %if.then.234
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.244, %land.lhs.true.227, %if.end.222
  %148 = load i64, i64* %consumed_chars, align 8
  %inc246 = add nsw i64 %148, 1
  store i64 %inc246, i64* %consumed_chars, align 8
  br label %do.end.247

do.end.247:                                       ; preds = %if.end.245
  br i1 true, label %cond.true.248, label %cond.false.253

cond.true.248:                                    ; preds = %do.end.247
  %149 = load i32, i32* %rule, align 4
  %sub249 = sub nsw i32 %149, 81
  %add250 = add i32 %sub249, 0
  %cmp251 = icmp ult i32 %add250, 12
  br i1 %cmp251, label %land.lhs.true.259, label %if.then.271

cond.false.253:                                   ; preds = %do.end.247
  %150 = load i32, i32* %rule, align 4
  %sub254 = sub nsw i32 %150, 81
  %conv255 = sext i32 %sub254 to i64
  %add256 = add i64 %conv255, 0
  %cmp257 = icmp ult i64 %add256, 12
  br i1 %cmp257, label %land.lhs.true.259, label %if.then.271

land.lhs.true.259:                                ; preds = %cond.false.253, %cond.true.248
  br i1 true, label %cond.true.260, label %cond.false.265

cond.true.260:                                    ; preds = %land.lhs.true.259
  %151 = load i32, i32* %b, align 4
  %sub261 = sub nsw i32 %151, 32
  %add262 = add i32 %sub261, 0
  %cmp263 = icmp ult i32 %add262, 12
  br i1 %cmp263, label %if.end.272, label %if.then.271

cond.false.265:                                   ; preds = %land.lhs.true.259
  %152 = load i32, i32* %b, align 4
  %sub266 = sub nsw i32 %152, 32
  %conv267 = sext i32 %sub266 to i64
  %add268 = add i64 %conv267, 0
  %cmp269 = icmp ult i64 %add268, 12
  br i1 %cmp269, label %if.end.272, label %if.then.271

if.then.271:                                      ; preds = %cond.false.265, %cond.true.260, %cond.false.253, %cond.true.248
  br label %invalid_code

if.end.272:                                       ; preds = %cond.false.265, %cond.true.260
  %153 = load i32, i32* %rule, align 4
  %sub273 = sub nsw i32 %153, 81
  %mul274 = mul nsw i32 %sub273, 12
  %154 = load i32, i32* %b, align 4
  %sub275 = sub nsw i32 %154, 32
  %add276 = add nsw i32 %mul274, %sub275
  store i32 %add276, i32* %rule, align 4
  %155 = load i32, i32* %rule, align 4
  %add277 = add nsw i32 %155, 256
  store i32 %add277, i32* %rule, align 4
  br label %if.end.278

if.end.278:                                       ; preds = %if.end.272, %if.end.211
  br label %do.end.279

do.end.279:                                       ; preds = %if.end.278
  br label %do.body.280

do.body.280:                                      ; preds = %do.end.279
  %156 = load i32*, i32** %charbuf, align 8
  %incdec.ptr281 = getelementptr inbounds i32, i32* %156, i32 1
  store i32* %incdec.ptr281, i32** %charbuf, align 8
  store i32 -2, i32* %156, align 4
  %157 = load i32, i32* %rule, align 4
  %158 = load i32*, i32** %charbuf, align 8
  %incdec.ptr282 = getelementptr inbounds i32, i32* %158, i32 1
  store i32* %incdec.ptr282, i32** %charbuf, align 8
  store i32 %157, i32* %158, align 4
  %159 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length283 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %159, i32 0, i32 3
  %160 = load i32, i32* %length283, align 4
  %add284 = add nsw i32 %160, 2
  store i32 %add284, i32* %length283, align 4
  %161 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state285 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %161, i32 0, i32 0
  %162 = load i32, i32* %state285, align 4
  %dec286 = add i32 %162, -1
  store i32 %dec286, i32* %state285, align 4
  br label %do.end.287

do.end.287:                                       ; preds = %do.body.280
  br label %while.body

if.end.288:                                       ; preds = %land.lhs.true.191, %lor.lhs.false
  %163 = load i32, i32* %c1, align 4
  %idxprom289 = sext i32 %163 to i64
  %arrayidx290 = getelementptr inbounds [256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 %idxprom289
  %164 = load i32, i32* %arrayidx290, align 4
  switch i32 %164, label %sw.default.1891 [
    i32 9, label %sw.bb
    i32 10, label %sw.bb.307
    i32 11, label %sw.bb.317
    i32 12, label %sw.bb.335
    i32 0, label %sw.bb.342
    i32 5, label %sw.bb.396
    i32 1, label %sw.bb.397
    i32 2, label %sw.bb.435
    i32 3, label %sw.bb.466
    i32 6, label %sw.bb.474
    i32 7, label %sw.bb.482
    i32 8, label %sw.bb.490
    i32 4, label %sw.bb.491
  ]

sw.bb:                                            ; preds = %if.end.288
  %165 = load i32, i32* %charset_id_0, align 4
  %cmp291 = icmp slt i32 %165, 0
  br i1 %cmp291, label %if.then.300, label %lor.lhs.false.293

lor.lhs.false.293:                                ; preds = %sw.bb
  %166 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %167 = load i32, i32* %charset_id_0, align 4
  %idx.ext294 = sext i32 %167 to i64
  %add.ptr295 = getelementptr inbounds %struct.charset, %struct.charset* %166, i64 %idx.ext294
  %iso_chars_96 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr295, i32 0, i32 5
  %bf.load296 = load i8, i8* %iso_chars_96, align 8
  %bf.lshr297 = lshr i8 %bf.load296, 1
  %bf.clear298 = and i8 %bf.lshr297, 1
  %bf.cast299 = trunc i8 %bf.clear298 to i1
  br i1 %bf.cast299, label %if.else.303, label %if.then.300

if.then.300:                                      ; preds = %lor.lhs.false.293, %sw.bb
  %168 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %169 = load i32, i32* @charset_ascii, align 4
  %idx.ext301 = sext i32 %169 to i64
  %add.ptr302 = getelementptr inbounds %struct.charset, %struct.charset* %168, i64 %idx.ext301
  store %struct.charset* %add.ptr302, %struct.charset** %charset, align 8
  br label %if.end.306

if.else.303:                                      ; preds = %lor.lhs.false.293
  %170 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %171 = load i32, i32* %charset_id_0, align 4
  %idx.ext304 = sext i32 %171 to i64
  %add.ptr305 = getelementptr inbounds %struct.charset, %struct.charset* %170, i64 %idx.ext304
  store %struct.charset* %add.ptr305, %struct.charset** %charset, align 8
  br label %if.end.306

if.end.306:                                       ; preds = %if.else.303, %if.then.300
  br label %sw.epilog.1892

sw.bb.307:                                        ; preds = %if.end.288
  %172 = load i32, i32* %charset_id_0, align 4
  %cmp308 = icmp slt i32 %172, 0
  br i1 %cmp308, label %if.then.310, label %if.else.313

if.then.310:                                      ; preds = %sw.bb.307
  %173 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %174 = load i32, i32* @charset_ascii, align 4
  %idx.ext311 = sext i32 %174 to i64
  %add.ptr312 = getelementptr inbounds %struct.charset, %struct.charset* %173, i64 %idx.ext311
  store %struct.charset* %add.ptr312, %struct.charset** %charset, align 8
  br label %if.end.316

if.else.313:                                      ; preds = %sw.bb.307
  %175 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %176 = load i32, i32* %charset_id_0, align 4
  %idx.ext314 = sext i32 %176 to i64
  %add.ptr315 = getelementptr inbounds %struct.charset, %struct.charset* %175, i64 %idx.ext314
  store %struct.charset* %add.ptr315, %struct.charset** %charset, align 8
  br label %if.end.316

if.end.316:                                       ; preds = %if.else.313, %if.then.310
  br label %sw.epilog.1892

sw.bb.317:                                        ; preds = %if.end.288
  %177 = load i32, i32* %charset_id_1, align 4
  %cmp318 = icmp slt i32 %177, 0
  br i1 %cmp318, label %if.then.333, label %lor.lhs.false.320

lor.lhs.false.320:                                ; preds = %sw.bb.317
  %178 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %179 = load i32, i32* %charset_id_1, align 4
  %idx.ext321 = sext i32 %179 to i64
  %add.ptr322 = getelementptr inbounds %struct.charset, %struct.charset* %178, i64 %idx.ext321
  %iso_chars_96323 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr322, i32 0, i32 5
  %bf.load324 = load i8, i8* %iso_chars_96323, align 8
  %bf.lshr325 = lshr i8 %bf.load324, 1
  %bf.clear326 = and i8 %bf.lshr325, 1
  %bf.cast327 = trunc i8 %bf.clear326 to i1
  br i1 %bf.cast327, label %lor.lhs.false.328, label %if.then.333

lor.lhs.false.328:                                ; preds = %lor.lhs.false.320
  %180 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec329 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %180, i32 0, i32 3
  %iso_2022330 = bitcast %union.anon* %spec329 to %struct.iso_2022_spec*
  %flags = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022330, i32 0, i32 0
  %181 = load i32, i32* %flags, align 4
  %and331 = and i32 %181, 8
  %tobool332 = icmp ne i32 %and331, 0
  br i1 %tobool332, label %if.then.333, label %if.end.334

if.then.333:                                      ; preds = %lor.lhs.false.328, %lor.lhs.false.320, %sw.bb.317
  br label %invalid_code

if.end.334:                                       ; preds = %lor.lhs.false.328
  br label %sw.bb.335

sw.bb.335:                                        ; preds = %if.end.288, %if.end.334
  %182 = load i32, i32* %charset_id_1, align 4
  %cmp336 = icmp slt i32 %182, 0
  br i1 %cmp336, label %if.then.338, label %if.end.339

if.then.338:                                      ; preds = %sw.bb.335
  br label %invalid_code

if.end.339:                                       ; preds = %sw.bb.335
  %183 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %184 = load i32, i32* %charset_id_1, align 4
  %idx.ext340 = sext i32 %184 to i64
  %add.ptr341 = getelementptr inbounds %struct.charset, %struct.charset* %183, i64 %idx.ext340
  store %struct.charset* %add.ptr341, %struct.charset** %charset, align 8
  br label %sw.epilog.1892

sw.bb.342:                                        ; preds = %if.end.288
  %185 = load i8, i8* %eol_dos, align 1
  %tobool343 = trunc i8 %185 to i1
  br i1 %tobool343, label %land.lhs.true.345, label %if.end.383

land.lhs.true.345:                                ; preds = %sw.bb.342
  %186 = load i32, i32* %c1, align 4
  %cmp346 = icmp eq i32 %186, 13
  br i1 %cmp346, label %if.then.348, label %if.end.383

if.then.348:                                      ; preds = %land.lhs.true.345
  br label %do.body.349

do.body.349:                                      ; preds = %if.then.348
  %187 = load i8*, i8** %src, align 8
  %188 = load i8*, i8** %src_end, align 8
  %cmp350 = icmp eq i8* %187, %188
  br i1 %cmp350, label %if.then.352, label %if.end.357

if.then.352:                                      ; preds = %do.body.349
  %189 = load i8*, i8** %src_base, align 8
  %190 = load i8*, i8** %src, align 8
  %cmp353 = icmp ult i8* %189, %190
  br i1 %cmp353, label %if.then.355, label %if.end.356

if.then.355:                                      ; preds = %if.then.352
  %191 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %191, i32 1)
  br label %if.end.356

if.end.356:                                       ; preds = %if.then.355, %if.then.352
  br label %no_more_source

if.end.357:                                       ; preds = %do.body.349
  %192 = load i8*, i8** %src, align 8
  %incdec.ptr358 = getelementptr inbounds i8, i8* %192, i32 1
  store i8* %incdec.ptr358, i8** %src, align 8
  %193 = load i8, i8* %192, align 1
  %conv359 = zext i8 %193 to i32
  store i32 %conv359, i32* %byte_after_cr, align 4
  %194 = load i8, i8* %multibytep, align 1
  %tobool360 = trunc i8 %194 to i1
  br i1 %tobool360, label %land.lhs.true.362, label %if.end.380

land.lhs.true.362:                                ; preds = %if.end.357
  %195 = load i32, i32* %byte_after_cr, align 4
  %and363 = and i32 %195, 128
  %tobool364 = icmp ne i32 %and363, 0
  br i1 %tobool364, label %if.then.365, label %if.end.380

if.then.365:                                      ; preds = %land.lhs.true.362
  %196 = load i32, i32* %byte_after_cr, align 4
  %and366 = and i32 %196, 254
  %cmp367 = icmp eq i32 %and366, 192
  br i1 %cmp367, label %if.then.369, label %if.else.375

if.then.369:                                      ; preds = %if.then.365
  %197 = load i32, i32* %byte_after_cr, align 4
  %and370 = and i32 %197, 1
  %shl371 = shl i32 %and370, 6
  %198 = load i8*, i8** %src, align 8
  %incdec.ptr372 = getelementptr inbounds i8, i8* %198, i32 1
  store i8* %incdec.ptr372, i8** %src, align 8
  %199 = load i8, i8* %198, align 1
  %conv373 = zext i8 %199 to i32
  %or374 = or i32 %shl371, %conv373
  store i32 %or374, i32* %byte_after_cr, align 4
  br label %if.end.379

if.else.375:                                      ; preds = %if.then.365
  %200 = load i8*, i8** %src, align 8
  %incdec.ptr376 = getelementptr inbounds i8, i8* %200, i32 -1
  store i8* %incdec.ptr376, i8** %src, align 8
  %201 = load i8*, i8** %src, align 8
  %call377 = call i32 @string_char(i8* %201, i8** %src, i32* null)
  %sub378 = sub nsw i32 0, %call377
  store i32 %sub378, i32* %byte_after_cr, align 4
  %202 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %202, i32 3)
  br label %if.end.379

if.end.379:                                       ; preds = %if.else.375, %if.then.369
  br label %if.end.380

if.end.380:                                       ; preds = %if.end.379, %land.lhs.true.362, %if.end.357
  %203 = load i64, i64* %consumed_chars, align 8
  %inc381 = add nsw i64 %203, 1
  store i64 %inc381, i64* %consumed_chars, align 8
  br label %do.end.382

do.end.382:                                       ; preds = %if.end.380
  br label %if.end.383

if.end.383:                                       ; preds = %do.end.382, %land.lhs.true.345, %sw.bb.342
  br label %do.body.384

do.body.384:                                      ; preds = %if.end.383
  %204 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state385 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %204, i32 0, i32 0
  %205 = load i32, i32* %state385, align 4
  %cmp386 = icmp ne i32 %205, 0
  br i1 %cmp386, label %if.then.388, label %if.end.392

if.then.388:                                      ; preds = %do.body.384
  %206 = load i32*, i32** %charbuf, align 8
  %207 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call389 = call i32 @finish_composition(i32* %206, %struct.composition_status* %207)
  %conv390 = sext i32 %call389 to i64
  %208 = load i64, i64* %char_offset, align 8
  %add391 = add nsw i64 %208, %conv390
  store i64 %add391, i64* %char_offset, align 8
  br label %if.end.392

if.end.392:                                       ; preds = %if.then.388, %do.body.384
  br label %do.end.393

do.end.393:                                       ; preds = %if.end.392
  %209 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %210 = load i32, i32* @charset_ascii, align 4
  %idx.ext394 = sext i32 %210 to i64
  %add.ptr395 = getelementptr inbounds %struct.charset, %struct.charset* %209, i64 %idx.ext394
  store %struct.charset* %add.ptr395, %struct.charset** %charset, align 8
  br label %sw.epilog.1892

sw.bb.396:                                        ; preds = %if.end.288
  br label %invalid_code

sw.bb.397:                                        ; preds = %if.end.288
  %211 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec398 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %211, i32 0, i32 3
  %iso_2022399 = bitcast %union.anon* %spec398 to %struct.iso_2022_spec*
  %flags400 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022399, i32 0, i32 0
  %212 = load i32, i32* %flags400, align 4
  %and401 = and i32 %212, 16
  %tobool402 = icmp ne i32 %and401, 0
  br i1 %tobool402, label %lor.lhs.false.403, label %if.then.410

lor.lhs.false.403:                                ; preds = %sw.bb.397
  %213 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec404 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %213, i32 0, i32 3
  %iso_2022405 = bitcast %union.anon* %spec404 to %struct.iso_2022_spec*
  %current_designation406 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022405, i32 0, i32 2
  %arrayidx407 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation406, i32 0, i64 1
  %214 = load i32, i32* %arrayidx407, align 4
  %cmp408 = icmp slt i32 %214, 0
  br i1 %cmp408, label %if.then.410, label %if.end.411

if.then.410:                                      ; preds = %lor.lhs.false.403, %sw.bb.397
  br label %invalid_code

if.end.411:                                       ; preds = %lor.lhs.false.403
  %215 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec412 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %215, i32 0, i32 3
  %iso_2022413 = bitcast %union.anon* %spec412 to %struct.iso_2022_spec*
  %current_invocation414 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022413, i32 0, i32 1
  %arrayidx415 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation414, i32 0, i64 0
  store i32 1, i32* %arrayidx415, align 4
  %216 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec416 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %216, i32 0, i32 3
  %iso_2022417 = bitcast %union.anon* %spec416 to %struct.iso_2022_spec*
  %current_invocation418 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022417, i32 0, i32 1
  %arrayidx419 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation418, i32 0, i64 0
  %217 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp slt i32 %217, 0
  br i1 %cmp420, label %cond.true.422, label %cond.false.423

cond.true.422:                                    ; preds = %if.end.411
  br label %cond.end.433

cond.false.423:                                   ; preds = %if.end.411
  %218 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec424 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %218, i32 0, i32 3
  %iso_2022425 = bitcast %union.anon* %spec424 to %struct.iso_2022_spec*
  %current_invocation426 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022425, i32 0, i32 1
  %arrayidx427 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation426, i32 0, i64 0
  %219 = load i32, i32* %arrayidx427, align 4
  %idxprom428 = sext i32 %219 to i64
  %220 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec429 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %220, i32 0, i32 3
  %iso_2022430 = bitcast %union.anon* %spec429 to %struct.iso_2022_spec*
  %current_designation431 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022430, i32 0, i32 2
  %arrayidx432 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation431, i32 0, i64 %idxprom428
  %221 = load i32, i32* %arrayidx432, align 4
  br label %cond.end.433

cond.end.433:                                     ; preds = %cond.false.423, %cond.true.422
  %cond434 = phi i32 [ -1, %cond.true.422 ], [ %221, %cond.false.423 ]
  store i32 %cond434, i32* %charset_id_0, align 4
  br label %while.body

sw.bb.435:                                        ; preds = %if.end.288
  %222 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec436 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %222, i32 0, i32 3
  %iso_2022437 = bitcast %union.anon* %spec436 to %struct.iso_2022_spec*
  %flags438 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022437, i32 0, i32 0
  %223 = load i32, i32* %flags438, align 4
  %and439 = and i32 %223, 16
  %tobool440 = icmp ne i32 %and439, 0
  br i1 %tobool440, label %if.end.442, label %if.then.441

if.then.441:                                      ; preds = %sw.bb.435
  br label %invalid_code

if.end.442:                                       ; preds = %sw.bb.435
  %224 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec443 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %224, i32 0, i32 3
  %iso_2022444 = bitcast %union.anon* %spec443 to %struct.iso_2022_spec*
  %current_invocation445 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022444, i32 0, i32 1
  %arrayidx446 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation445, i32 0, i64 0
  store i32 0, i32* %arrayidx446, align 4
  %225 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec447 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %225, i32 0, i32 3
  %iso_2022448 = bitcast %union.anon* %spec447 to %struct.iso_2022_spec*
  %current_invocation449 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022448, i32 0, i32 1
  %arrayidx450 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation449, i32 0, i64 0
  %226 = load i32, i32* %arrayidx450, align 4
  %cmp451 = icmp slt i32 %226, 0
  br i1 %cmp451, label %cond.true.453, label %cond.false.454

cond.true.453:                                    ; preds = %if.end.442
  br label %cond.end.464

cond.false.454:                                   ; preds = %if.end.442
  %227 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec455 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %227, i32 0, i32 3
  %iso_2022456 = bitcast %union.anon* %spec455 to %struct.iso_2022_spec*
  %current_invocation457 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022456, i32 0, i32 1
  %arrayidx458 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation457, i32 0, i64 0
  %228 = load i32, i32* %arrayidx458, align 4
  %idxprom459 = sext i32 %228 to i64
  %229 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec460 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %229, i32 0, i32 3
  %iso_2022461 = bitcast %union.anon* %spec460 to %struct.iso_2022_spec*
  %current_designation462 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022461, i32 0, i32 2
  %arrayidx463 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation462, i32 0, i64 %idxprom459
  %230 = load i32, i32* %arrayidx463, align 4
  br label %cond.end.464

cond.end.464:                                     ; preds = %cond.false.454, %cond.true.453
  %cond465 = phi i32 [ -1, %cond.true.453 ], [ %230, %cond.false.454 ]
  store i32 %cond465, i32* %charset_id_0, align 4
  br label %while.body

sw.bb.466:                                        ; preds = %if.end.288
  %231 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec467 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %231, i32 0, i32 3
  %iso_2022468 = bitcast %union.anon* %spec467 to %struct.iso_2022_spec*
  %flags469 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022468, i32 0, i32 0
  %232 = load i32, i32* %flags469, align 4
  %and470 = and i32 %232, 8
  %tobool471 = icmp ne i32 %and470, 0
  br i1 %tobool471, label %if.end.473, label %if.then.472

if.then.472:                                      ; preds = %sw.bb.466
  br label %invalid_code

if.end.473:                                       ; preds = %sw.bb.466
  br label %sw.bb.474

sw.bb.474:                                        ; preds = %if.end.288, %if.end.473
  %233 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec475 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %233, i32 0, i32 3
  %iso_2022476 = bitcast %union.anon* %spec475 to %struct.iso_2022_spec*
  %flags477 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022476, i32 0, i32 0
  %234 = load i32, i32* %flags477, align 4
  %and478 = and i32 %234, 32
  %tobool479 = icmp ne i32 %and478, 0
  br i1 %tobool479, label %if.end.481, label %if.then.480

if.then.480:                                      ; preds = %sw.bb.474
  br label %invalid_code

if.end.481:                                       ; preds = %sw.bb.474
  store i32 78, i32* %c1, align 4
  br label %label_escape_sequence

sw.bb.482:                                        ; preds = %if.end.288
  %235 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec483 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %235, i32 0, i32 3
  %iso_2022484 = bitcast %union.anon* %spec483 to %struct.iso_2022_spec*
  %flags485 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022484, i32 0, i32 0
  %236 = load i32, i32* %flags485, align 4
  %and486 = and i32 %236, 32
  %tobool487 = icmp ne i32 %and486, 0
  br i1 %tobool487, label %if.end.489, label %if.then.488

if.then.488:                                      ; preds = %sw.bb.482
  br label %invalid_code

if.end.489:                                       ; preds = %sw.bb.482
  store i32 79, i32* %c1, align 4
  br label %label_escape_sequence

sw.bb.490:                                        ; preds = %if.end.288
  store i32 91, i32* %c1, align 4
  br label %label_escape_sequence

sw.bb.491:                                        ; preds = %if.end.288
  br label %do.body.492

do.body.492:                                      ; preds = %sw.bb.491
  %237 = load i8*, i8** %src, align 8
  %238 = load i8*, i8** %src_end, align 8
  %cmp493 = icmp eq i8* %237, %238
  br i1 %cmp493, label %if.then.495, label %if.end.500

if.then.495:                                      ; preds = %do.body.492
  %239 = load i8*, i8** %src_base, align 8
  %240 = load i8*, i8** %src, align 8
  %cmp496 = icmp ult i8* %239, %240
  br i1 %cmp496, label %if.then.498, label %if.end.499

if.then.498:                                      ; preds = %if.then.495
  %241 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %241, i32 1)
  br label %if.end.499

if.end.499:                                       ; preds = %if.then.498, %if.then.495
  br label %no_more_source

if.end.500:                                       ; preds = %do.body.492
  %242 = load i8*, i8** %src, align 8
  %incdec.ptr501 = getelementptr inbounds i8, i8* %242, i32 1
  store i8* %incdec.ptr501, i8** %src, align 8
  %243 = load i8, i8* %242, align 1
  %conv502 = zext i8 %243 to i32
  store i32 %conv502, i32* %c1, align 4
  %244 = load i8, i8* %multibytep, align 1
  %tobool503 = trunc i8 %244 to i1
  br i1 %tobool503, label %land.lhs.true.505, label %if.end.523

land.lhs.true.505:                                ; preds = %if.end.500
  %245 = load i32, i32* %c1, align 4
  %and506 = and i32 %245, 128
  %tobool507 = icmp ne i32 %and506, 0
  br i1 %tobool507, label %if.then.508, label %if.end.523

if.then.508:                                      ; preds = %land.lhs.true.505
  %246 = load i32, i32* %c1, align 4
  %and509 = and i32 %246, 254
  %cmp510 = icmp eq i32 %and509, 192
  br i1 %cmp510, label %if.then.512, label %if.else.518

if.then.512:                                      ; preds = %if.then.508
  %247 = load i32, i32* %c1, align 4
  %and513 = and i32 %247, 1
  %shl514 = shl i32 %and513, 6
  %248 = load i8*, i8** %src, align 8
  %incdec.ptr515 = getelementptr inbounds i8, i8* %248, i32 1
  store i8* %incdec.ptr515, i8** %src, align 8
  %249 = load i8, i8* %248, align 1
  %conv516 = zext i8 %249 to i32
  %or517 = or i32 %shl514, %conv516
  store i32 %or517, i32* %c1, align 4
  br label %if.end.522

if.else.518:                                      ; preds = %if.then.508
  %250 = load i8*, i8** %src, align 8
  %incdec.ptr519 = getelementptr inbounds i8, i8* %250, i32 -1
  store i8* %incdec.ptr519, i8** %src, align 8
  %251 = load i8*, i8** %src, align 8
  %call520 = call i32 @string_char(i8* %251, i8** %src, i32* null)
  %sub521 = sub nsw i32 0, %call520
  store i32 %sub521, i32* %c1, align 4
  %252 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %252, i32 3)
  br label %if.end.522

if.end.522:                                       ; preds = %if.else.518, %if.then.512
  br label %if.end.523

if.end.523:                                       ; preds = %if.end.522, %land.lhs.true.505, %if.end.500
  %253 = load i64, i64* %consumed_chars, align 8
  %inc524 = add nsw i64 %253, 1
  store i64 %inc524, i64* %consumed_chars, align 8
  br label %do.end.525

do.end.525:                                       ; preds = %if.end.523
  br label %label_escape_sequence

label_escape_sequence:                            ; preds = %do.end.639, %do.end.525, %sw.bb.490, %if.end.489, %if.end.481
  %254 = load i32, i32* %c1, align 4
  switch i32 %254, label %sw.default.1669 [
    i32 38, label %sw.bb.526
    i32 36, label %sw.bb.640
    i32 110, label %sw.bb.899
    i32 111, label %sw.bb.937
    i32 78, label %sw.bb.975
    i32 79, label %sw.bb.1065
    i32 48, label %sw.bb.1155
    i32 50, label %sw.bb.1155
    i32 51, label %sw.bb.1155
    i32 52, label %sw.bb.1155
    i32 49, label %sw.bb.1256
    i32 91, label %sw.bb.1323
    i32 37, label %sw.bb.1473
  ]

sw.bb.526:                                        ; preds = %label_escape_sequence
  br label %do.body.527

do.body.527:                                      ; preds = %sw.bb.526
  %255 = load i8*, i8** %src, align 8
  %256 = load i8*, i8** %src_end, align 8
  %cmp528 = icmp eq i8* %255, %256
  br i1 %cmp528, label %if.then.530, label %if.end.535

if.then.530:                                      ; preds = %do.body.527
  %257 = load i8*, i8** %src_base, align 8
  %258 = load i8*, i8** %src, align 8
  %cmp531 = icmp ult i8* %257, %258
  br i1 %cmp531, label %if.then.533, label %if.end.534

if.then.533:                                      ; preds = %if.then.530
  %259 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %259, i32 1)
  br label %if.end.534

if.end.534:                                       ; preds = %if.then.533, %if.then.530
  br label %no_more_source

if.end.535:                                       ; preds = %do.body.527
  %260 = load i8*, i8** %src, align 8
  %incdec.ptr536 = getelementptr inbounds i8, i8* %260, i32 1
  store i8* %incdec.ptr536, i8** %src, align 8
  %261 = load i8, i8* %260, align 1
  %conv537 = zext i8 %261 to i32
  store i32 %conv537, i32* %c1, align 4
  %262 = load i8, i8* %multibytep, align 1
  %tobool538 = trunc i8 %262 to i1
  br i1 %tobool538, label %land.lhs.true.540, label %if.end.558

land.lhs.true.540:                                ; preds = %if.end.535
  %263 = load i32, i32* %c1, align 4
  %and541 = and i32 %263, 128
  %tobool542 = icmp ne i32 %and541, 0
  br i1 %tobool542, label %if.then.543, label %if.end.558

if.then.543:                                      ; preds = %land.lhs.true.540
  %264 = load i32, i32* %c1, align 4
  %and544 = and i32 %264, 254
  %cmp545 = icmp eq i32 %and544, 192
  br i1 %cmp545, label %if.then.547, label %if.else.553

if.then.547:                                      ; preds = %if.then.543
  %265 = load i32, i32* %c1, align 4
  %and548 = and i32 %265, 1
  %shl549 = shl i32 %and548, 6
  %266 = load i8*, i8** %src, align 8
  %incdec.ptr550 = getelementptr inbounds i8, i8* %266, i32 1
  store i8* %incdec.ptr550, i8** %src, align 8
  %267 = load i8, i8* %266, align 1
  %conv551 = zext i8 %267 to i32
  %or552 = or i32 %shl549, %conv551
  store i32 %or552, i32* %c1, align 4
  br label %if.end.557

if.else.553:                                      ; preds = %if.then.543
  %268 = load i8*, i8** %src, align 8
  %incdec.ptr554 = getelementptr inbounds i8, i8* %268, i32 -1
  store i8* %incdec.ptr554, i8** %src, align 8
  %269 = load i8*, i8** %src, align 8
  %call555 = call i32 @string_char(i8* %269, i8** %src, i32* null)
  %sub556 = sub nsw i32 0, %call555
  store i32 %sub556, i32* %c1, align 4
  %270 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %270, i32 3)
  br label %if.end.557

if.end.557:                                       ; preds = %if.else.553, %if.then.547
  br label %if.end.558

if.end.558:                                       ; preds = %if.end.557, %land.lhs.true.540, %if.end.535
  %271 = load i64, i64* %consumed_chars, align 8
  %inc559 = add nsw i64 %271, 1
  store i64 %inc559, i64* %consumed_chars, align 8
  br label %do.end.560

do.end.560:                                       ; preds = %if.end.558
  %272 = load i32, i32* %c1, align 4
  %cmp561 = icmp sge i32 %272, 64
  br i1 %cmp561, label %land.lhs.true.563, label %if.then.566

land.lhs.true.563:                                ; preds = %do.end.560
  %273 = load i32, i32* %c1, align 4
  %cmp564 = icmp sle i32 %273, 126
  br i1 %cmp564, label %if.end.567, label %if.then.566

if.then.566:                                      ; preds = %land.lhs.true.563, %do.end.560
  br label %invalid_code

if.end.567:                                       ; preds = %land.lhs.true.563
  br label %do.body.568

do.body.568:                                      ; preds = %if.end.567
  %274 = load i8*, i8** %src, align 8
  %275 = load i8*, i8** %src_end, align 8
  %cmp569 = icmp eq i8* %274, %275
  br i1 %cmp569, label %if.then.571, label %if.end.576

if.then.571:                                      ; preds = %do.body.568
  %276 = load i8*, i8** %src_base, align 8
  %277 = load i8*, i8** %src, align 8
  %cmp572 = icmp ult i8* %276, %277
  br i1 %cmp572, label %if.then.574, label %if.end.575

if.then.574:                                      ; preds = %if.then.571
  %278 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %278, i32 1)
  br label %if.end.575

if.end.575:                                       ; preds = %if.then.574, %if.then.571
  br label %no_more_source

if.end.576:                                       ; preds = %do.body.568
  %279 = load i8*, i8** %src, align 8
  %incdec.ptr577 = getelementptr inbounds i8, i8* %279, i32 1
  store i8* %incdec.ptr577, i8** %src, align 8
  %280 = load i8, i8* %279, align 1
  %conv578 = zext i8 %280 to i32
  store i32 %conv578, i32* %c1, align 4
  %281 = load i8, i8* %multibytep, align 1
  %tobool579 = trunc i8 %281 to i1
  br i1 %tobool579, label %land.lhs.true.581, label %if.end.599

land.lhs.true.581:                                ; preds = %if.end.576
  %282 = load i32, i32* %c1, align 4
  %and582 = and i32 %282, 128
  %tobool583 = icmp ne i32 %and582, 0
  br i1 %tobool583, label %if.then.584, label %if.end.599

if.then.584:                                      ; preds = %land.lhs.true.581
  %283 = load i32, i32* %c1, align 4
  %and585 = and i32 %283, 254
  %cmp586 = icmp eq i32 %and585, 192
  br i1 %cmp586, label %if.then.588, label %if.else.594

if.then.588:                                      ; preds = %if.then.584
  %284 = load i32, i32* %c1, align 4
  %and589 = and i32 %284, 1
  %shl590 = shl i32 %and589, 6
  %285 = load i8*, i8** %src, align 8
  %incdec.ptr591 = getelementptr inbounds i8, i8* %285, i32 1
  store i8* %incdec.ptr591, i8** %src, align 8
  %286 = load i8, i8* %285, align 1
  %conv592 = zext i8 %286 to i32
  %or593 = or i32 %shl590, %conv592
  store i32 %or593, i32* %c1, align 4
  br label %if.end.598

if.else.594:                                      ; preds = %if.then.584
  %287 = load i8*, i8** %src, align 8
  %incdec.ptr595 = getelementptr inbounds i8, i8* %287, i32 -1
  store i8* %incdec.ptr595, i8** %src, align 8
  %288 = load i8*, i8** %src, align 8
  %call596 = call i32 @string_char(i8* %288, i8** %src, i32* null)
  %sub597 = sub nsw i32 0, %call596
  store i32 %sub597, i32* %c1, align 4
  %289 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %289, i32 3)
  br label %if.end.598

if.end.598:                                       ; preds = %if.else.594, %if.then.588
  br label %if.end.599

if.end.599:                                       ; preds = %if.end.598, %land.lhs.true.581, %if.end.576
  %290 = load i64, i64* %consumed_chars, align 8
  %inc600 = add nsw i64 %290, 1
  store i64 %inc600, i64* %consumed_chars, align 8
  br label %do.end.601

do.end.601:                                       ; preds = %if.end.599
  %291 = load i32, i32* %c1, align 4
  %cmp602 = icmp ne i32 %291, 27
  br i1 %cmp602, label %if.then.604, label %if.end.605

if.then.604:                                      ; preds = %do.end.601
  br label %invalid_code

if.end.605:                                       ; preds = %do.end.601
  br label %do.body.606

do.body.606:                                      ; preds = %if.end.605
  %292 = load i8*, i8** %src, align 8
  %293 = load i8*, i8** %src_end, align 8
  %cmp607 = icmp eq i8* %292, %293
  br i1 %cmp607, label %if.then.609, label %if.end.614

if.then.609:                                      ; preds = %do.body.606
  %294 = load i8*, i8** %src_base, align 8
  %295 = load i8*, i8** %src, align 8
  %cmp610 = icmp ult i8* %294, %295
  br i1 %cmp610, label %if.then.612, label %if.end.613

if.then.612:                                      ; preds = %if.then.609
  %296 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %296, i32 1)
  br label %if.end.613

if.end.613:                                       ; preds = %if.then.612, %if.then.609
  br label %no_more_source

if.end.614:                                       ; preds = %do.body.606
  %297 = load i8*, i8** %src, align 8
  %incdec.ptr615 = getelementptr inbounds i8, i8* %297, i32 1
  store i8* %incdec.ptr615, i8** %src, align 8
  %298 = load i8, i8* %297, align 1
  %conv616 = zext i8 %298 to i32
  store i32 %conv616, i32* %c1, align 4
  %299 = load i8, i8* %multibytep, align 1
  %tobool617 = trunc i8 %299 to i1
  br i1 %tobool617, label %land.lhs.true.619, label %if.end.637

land.lhs.true.619:                                ; preds = %if.end.614
  %300 = load i32, i32* %c1, align 4
  %and620 = and i32 %300, 128
  %tobool621 = icmp ne i32 %and620, 0
  br i1 %tobool621, label %if.then.622, label %if.end.637

if.then.622:                                      ; preds = %land.lhs.true.619
  %301 = load i32, i32* %c1, align 4
  %and623 = and i32 %301, 254
  %cmp624 = icmp eq i32 %and623, 192
  br i1 %cmp624, label %if.then.626, label %if.else.632

if.then.626:                                      ; preds = %if.then.622
  %302 = load i32, i32* %c1, align 4
  %and627 = and i32 %302, 1
  %shl628 = shl i32 %and627, 6
  %303 = load i8*, i8** %src, align 8
  %incdec.ptr629 = getelementptr inbounds i8, i8* %303, i32 1
  store i8* %incdec.ptr629, i8** %src, align 8
  %304 = load i8, i8* %303, align 1
  %conv630 = zext i8 %304 to i32
  %or631 = or i32 %shl628, %conv630
  store i32 %or631, i32* %c1, align 4
  br label %if.end.636

if.else.632:                                      ; preds = %if.then.622
  %305 = load i8*, i8** %src, align 8
  %incdec.ptr633 = getelementptr inbounds i8, i8* %305, i32 -1
  store i8* %incdec.ptr633, i8** %src, align 8
  %306 = load i8*, i8** %src, align 8
  %call634 = call i32 @string_char(i8* %306, i8** %src, i32* null)
  %sub635 = sub nsw i32 0, %call634
  store i32 %sub635, i32* %c1, align 4
  %307 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %307, i32 3)
  br label %if.end.636

if.end.636:                                       ; preds = %if.else.632, %if.then.626
  br label %if.end.637

if.end.637:                                       ; preds = %if.end.636, %land.lhs.true.619, %if.end.614
  %308 = load i64, i64* %consumed_chars, align 8
  %inc638 = add nsw i64 %308, 1
  store i64 %inc638, i64* %consumed_chars, align 8
  br label %do.end.639

do.end.639:                                       ; preds = %if.end.637
  br label %label_escape_sequence

sw.bb.640:                                        ; preds = %label_escape_sequence
  %309 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec641 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %309, i32 0, i32 3
  %iso_2022642 = bitcast %union.anon* %spec641 to %struct.iso_2022_spec*
  %flags643 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022642, i32 0, i32 0
  %310 = load i32, i32* %flags643, align 4
  %and644 = and i32 %310, 64
  %tobool645 = icmp ne i32 %and644, 0
  br i1 %tobool645, label %if.end.647, label %if.then.646

if.then.646:                                      ; preds = %sw.bb.640
  br label %invalid_code

if.end.647:                                       ; preds = %sw.bb.640
  br label %do.body.648

do.body.648:                                      ; preds = %if.end.647
  %311 = load i8*, i8** %src, align 8
  %312 = load i8*, i8** %src_end, align 8
  %cmp649 = icmp eq i8* %311, %312
  br i1 %cmp649, label %if.then.651, label %if.end.656

if.then.651:                                      ; preds = %do.body.648
  %313 = load i8*, i8** %src_base, align 8
  %314 = load i8*, i8** %src, align 8
  %cmp652 = icmp ult i8* %313, %314
  br i1 %cmp652, label %if.then.654, label %if.end.655

if.then.654:                                      ; preds = %if.then.651
  %315 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %315, i32 1)
  br label %if.end.655

if.end.655:                                       ; preds = %if.then.654, %if.then.651
  br label %no_more_source

if.end.656:                                       ; preds = %do.body.648
  %316 = load i8*, i8** %src, align 8
  %incdec.ptr657 = getelementptr inbounds i8, i8* %316, i32 1
  store i8* %incdec.ptr657, i8** %src, align 8
  %317 = load i8, i8* %316, align 1
  %conv658 = zext i8 %317 to i32
  store i32 %conv658, i32* %c1, align 4
  %318 = load i8, i8* %multibytep, align 1
  %tobool659 = trunc i8 %318 to i1
  br i1 %tobool659, label %land.lhs.true.661, label %if.end.679

land.lhs.true.661:                                ; preds = %if.end.656
  %319 = load i32, i32* %c1, align 4
  %and662 = and i32 %319, 128
  %tobool663 = icmp ne i32 %and662, 0
  br i1 %tobool663, label %if.then.664, label %if.end.679

if.then.664:                                      ; preds = %land.lhs.true.661
  %320 = load i32, i32* %c1, align 4
  %and665 = and i32 %320, 254
  %cmp666 = icmp eq i32 %and665, 192
  br i1 %cmp666, label %if.then.668, label %if.else.674

if.then.668:                                      ; preds = %if.then.664
  %321 = load i32, i32* %c1, align 4
  %and669 = and i32 %321, 1
  %shl670 = shl i32 %and669, 6
  %322 = load i8*, i8** %src, align 8
  %incdec.ptr671 = getelementptr inbounds i8, i8* %322, i32 1
  store i8* %incdec.ptr671, i8** %src, align 8
  %323 = load i8, i8* %322, align 1
  %conv672 = zext i8 %323 to i32
  %or673 = or i32 %shl670, %conv672
  store i32 %or673, i32* %c1, align 4
  br label %if.end.678

if.else.674:                                      ; preds = %if.then.664
  %324 = load i8*, i8** %src, align 8
  %incdec.ptr675 = getelementptr inbounds i8, i8* %324, i32 -1
  store i8* %incdec.ptr675, i8** %src, align 8
  %325 = load i8*, i8** %src, align 8
  %call676 = call i32 @string_char(i8* %325, i8** %src, i32* null)
  %sub677 = sub nsw i32 0, %call676
  store i32 %sub677, i32* %c1, align 4
  %326 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %326, i32 3)
  br label %if.end.678

if.end.678:                                       ; preds = %if.else.674, %if.then.668
  br label %if.end.679

if.end.679:                                       ; preds = %if.end.678, %land.lhs.true.661, %if.end.656
  %327 = load i64, i64* %consumed_chars, align 8
  %inc680 = add nsw i64 %327, 1
  store i64 %inc680, i64* %consumed_chars, align 8
  br label %do.end.681

do.end.681:                                       ; preds = %if.end.679
  %328 = load i32, i32* %c1, align 4
  %cmp682 = icmp sge i32 %328, 64
  br i1 %cmp682, label %land.lhs.true.684, label %if.else.688

land.lhs.true.684:                                ; preds = %do.end.681
  %329 = load i32, i32* %c1, align 4
  %cmp685 = icmp sle i32 %329, 66
  br i1 %cmp685, label %if.then.687, label %if.else.688

if.then.687:                                      ; preds = %land.lhs.true.684
  store i32 0, i32* %reg, align 4
  store i32 0, i32* %chars96, align 4
  br label %if.end.775

if.else.688:                                      ; preds = %land.lhs.true.684, %do.end.681
  %330 = load i32, i32* %c1, align 4
  %cmp689 = icmp sge i32 %330, 40
  br i1 %cmp689, label %land.lhs.true.691, label %if.else.730

land.lhs.true.691:                                ; preds = %if.else.688
  %331 = load i32, i32* %c1, align 4
  %cmp692 = icmp sle i32 %331, 43
  br i1 %cmp692, label %if.then.694, label %if.else.730

if.then.694:                                      ; preds = %land.lhs.true.691
  %332 = load i32, i32* %c1, align 4
  %sub695 = sub nsw i32 %332, 40
  store i32 %sub695, i32* %reg, align 4
  store i32 0, i32* %chars96, align 4
  br label %do.body.696

do.body.696:                                      ; preds = %if.then.694
  %333 = load i8*, i8** %src, align 8
  %334 = load i8*, i8** %src_end, align 8
  %cmp697 = icmp eq i8* %333, %334
  br i1 %cmp697, label %if.then.699, label %if.end.704

if.then.699:                                      ; preds = %do.body.696
  %335 = load i8*, i8** %src_base, align 8
  %336 = load i8*, i8** %src, align 8
  %cmp700 = icmp ult i8* %335, %336
  br i1 %cmp700, label %if.then.702, label %if.end.703

if.then.702:                                      ; preds = %if.then.699
  %337 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %337, i32 1)
  br label %if.end.703

if.end.703:                                       ; preds = %if.then.702, %if.then.699
  br label %no_more_source

if.end.704:                                       ; preds = %do.body.696
  %338 = load i8*, i8** %src, align 8
  %incdec.ptr705 = getelementptr inbounds i8, i8* %338, i32 1
  store i8* %incdec.ptr705, i8** %src, align 8
  %339 = load i8, i8* %338, align 1
  %conv706 = zext i8 %339 to i32
  store i32 %conv706, i32* %c1, align 4
  %340 = load i8, i8* %multibytep, align 1
  %tobool707 = trunc i8 %340 to i1
  br i1 %tobool707, label %land.lhs.true.709, label %if.end.727

land.lhs.true.709:                                ; preds = %if.end.704
  %341 = load i32, i32* %c1, align 4
  %and710 = and i32 %341, 128
  %tobool711 = icmp ne i32 %and710, 0
  br i1 %tobool711, label %if.then.712, label %if.end.727

if.then.712:                                      ; preds = %land.lhs.true.709
  %342 = load i32, i32* %c1, align 4
  %and713 = and i32 %342, 254
  %cmp714 = icmp eq i32 %and713, 192
  br i1 %cmp714, label %if.then.716, label %if.else.722

if.then.716:                                      ; preds = %if.then.712
  %343 = load i32, i32* %c1, align 4
  %and717 = and i32 %343, 1
  %shl718 = shl i32 %and717, 6
  %344 = load i8*, i8** %src, align 8
  %incdec.ptr719 = getelementptr inbounds i8, i8* %344, i32 1
  store i8* %incdec.ptr719, i8** %src, align 8
  %345 = load i8, i8* %344, align 1
  %conv720 = zext i8 %345 to i32
  %or721 = or i32 %shl718, %conv720
  store i32 %or721, i32* %c1, align 4
  br label %if.end.726

if.else.722:                                      ; preds = %if.then.712
  %346 = load i8*, i8** %src, align 8
  %incdec.ptr723 = getelementptr inbounds i8, i8* %346, i32 -1
  store i8* %incdec.ptr723, i8** %src, align 8
  %347 = load i8*, i8** %src, align 8
  %call724 = call i32 @string_char(i8* %347, i8** %src, i32* null)
  %sub725 = sub nsw i32 0, %call724
  store i32 %sub725, i32* %c1, align 4
  %348 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %348, i32 3)
  br label %if.end.726

if.end.726:                                       ; preds = %if.else.722, %if.then.716
  br label %if.end.727

if.end.727:                                       ; preds = %if.end.726, %land.lhs.true.709, %if.end.704
  %349 = load i64, i64* %consumed_chars, align 8
  %inc728 = add nsw i64 %349, 1
  store i64 %inc728, i64* %consumed_chars, align 8
  br label %do.end.729

do.end.729:                                       ; preds = %if.end.727
  br label %if.end.774

if.else.730:                                      ; preds = %land.lhs.true.691, %if.else.688
  %350 = load i32, i32* %c1, align 4
  %cmp731 = icmp sge i32 %350, 44
  br i1 %cmp731, label %land.lhs.true.733, label %if.else.772

land.lhs.true.733:                                ; preds = %if.else.730
  %351 = load i32, i32* %c1, align 4
  %cmp734 = icmp sle i32 %351, 47
  br i1 %cmp734, label %if.then.736, label %if.else.772

if.then.736:                                      ; preds = %land.lhs.true.733
  %352 = load i32, i32* %c1, align 4
  %sub737 = sub nsw i32 %352, 44
  store i32 %sub737, i32* %reg, align 4
  store i32 1, i32* %chars96, align 4
  br label %do.body.738

do.body.738:                                      ; preds = %if.then.736
  %353 = load i8*, i8** %src, align 8
  %354 = load i8*, i8** %src_end, align 8
  %cmp739 = icmp eq i8* %353, %354
  br i1 %cmp739, label %if.then.741, label %if.end.746

if.then.741:                                      ; preds = %do.body.738
  %355 = load i8*, i8** %src_base, align 8
  %356 = load i8*, i8** %src, align 8
  %cmp742 = icmp ult i8* %355, %356
  br i1 %cmp742, label %if.then.744, label %if.end.745

if.then.744:                                      ; preds = %if.then.741
  %357 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %357, i32 1)
  br label %if.end.745

if.end.745:                                       ; preds = %if.then.744, %if.then.741
  br label %no_more_source

if.end.746:                                       ; preds = %do.body.738
  %358 = load i8*, i8** %src, align 8
  %incdec.ptr747 = getelementptr inbounds i8, i8* %358, i32 1
  store i8* %incdec.ptr747, i8** %src, align 8
  %359 = load i8, i8* %358, align 1
  %conv748 = zext i8 %359 to i32
  store i32 %conv748, i32* %c1, align 4
  %360 = load i8, i8* %multibytep, align 1
  %tobool749 = trunc i8 %360 to i1
  br i1 %tobool749, label %land.lhs.true.751, label %if.end.769

land.lhs.true.751:                                ; preds = %if.end.746
  %361 = load i32, i32* %c1, align 4
  %and752 = and i32 %361, 128
  %tobool753 = icmp ne i32 %and752, 0
  br i1 %tobool753, label %if.then.754, label %if.end.769

if.then.754:                                      ; preds = %land.lhs.true.751
  %362 = load i32, i32* %c1, align 4
  %and755 = and i32 %362, 254
  %cmp756 = icmp eq i32 %and755, 192
  br i1 %cmp756, label %if.then.758, label %if.else.764

if.then.758:                                      ; preds = %if.then.754
  %363 = load i32, i32* %c1, align 4
  %and759 = and i32 %363, 1
  %shl760 = shl i32 %and759, 6
  %364 = load i8*, i8** %src, align 8
  %incdec.ptr761 = getelementptr inbounds i8, i8* %364, i32 1
  store i8* %incdec.ptr761, i8** %src, align 8
  %365 = load i8, i8* %364, align 1
  %conv762 = zext i8 %365 to i32
  %or763 = or i32 %shl760, %conv762
  store i32 %or763, i32* %c1, align 4
  br label %if.end.768

if.else.764:                                      ; preds = %if.then.754
  %366 = load i8*, i8** %src, align 8
  %incdec.ptr765 = getelementptr inbounds i8, i8* %366, i32 -1
  store i8* %incdec.ptr765, i8** %src, align 8
  %367 = load i8*, i8** %src, align 8
  %call766 = call i32 @string_char(i8* %367, i8** %src, i32* null)
  %sub767 = sub nsw i32 0, %call766
  store i32 %sub767, i32* %c1, align 4
  %368 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %368, i32 3)
  br label %if.end.768

if.end.768:                                       ; preds = %if.else.764, %if.then.758
  br label %if.end.769

if.end.769:                                       ; preds = %if.end.768, %land.lhs.true.751, %if.end.746
  %369 = load i64, i64* %consumed_chars, align 8
  %inc770 = add nsw i64 %369, 1
  store i64 %inc770, i64* %consumed_chars, align 8
  br label %do.end.771

do.end.771:                                       ; preds = %if.end.769
  br label %if.end.773

if.else.772:                                      ; preds = %land.lhs.true.733, %if.else.730
  br label %invalid_code

if.end.773:                                       ; preds = %do.end.771
  br label %if.end.774

if.end.774:                                       ; preds = %if.end.773, %do.end.729
  br label %if.end.775

if.end.775:                                       ; preds = %if.end.774, %if.then.687
  br label %do.body.776

do.body.776:                                      ; preds = %if.end.775
  %370 = load i32, i32* %c1, align 4
  %cmp778 = icmp slt i32 %370, 48
  br i1 %cmp778, label %if.then.800, label %lor.lhs.false.780

lor.lhs.false.780:                                ; preds = %do.body.776
  %371 = load i32, i32* %c1, align 4
  %cmp781 = icmp sge i32 %371, 128
  br i1 %cmp781, label %if.then.800, label %lor.lhs.false.783

lor.lhs.false.783:                                ; preds = %lor.lhs.false.780
  %372 = load i32, i32* %c1, align 4
  %idxprom784 = sext i32 %372 to i64
  %373 = load i32, i32* %chars96, align 4
  %idxprom785 = sext i32 %373 to i64
  %arrayidx786 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* getelementptr inbounds ([3 x [2 x [128 x i32]]], [3 x [2 x [128 x i32]]]* @iso_charset_table, i32 0, i64 1), i32 0, i64 %idxprom785
  %arrayidx787 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx786, i32 0, i64 %idxprom784
  %374 = load i32, i32* %arrayidx787, align 4
  store i32 %374, i32* %id777, align 4
  %cmp788 = icmp slt i32 %374, 0
  br i1 %cmp788, label %if.then.800, label %lor.lhs.false.790

lor.lhs.false.790:                                ; preds = %lor.lhs.false.783
  %375 = load i32, i32* %id777, align 4
  %376 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %max_charset_id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %376, i32 0, i32 2
  %377 = load i32, i32* %max_charset_id, align 4
  %cmp791 = icmp sle i32 %375, %377
  br i1 %cmp791, label %land.lhs.true.793, label %if.then.800

land.lhs.true.793:                                ; preds = %lor.lhs.false.790
  %378 = load i32, i32* %id777, align 4
  %idxprom794 = sext i32 %378 to i64
  %379 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets795 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %379, i32 0, i32 4
  %380 = load i8*, i8** %safe_charsets795, align 8
  %arrayidx796 = getelementptr inbounds i8, i8* %380, i64 %idxprom794
  %381 = load i8, i8* %arrayidx796, align 1
  %conv797 = zext i8 %381 to i32
  %cmp798 = icmp ne i32 %conv797, 255
  br i1 %cmp798, label %if.end.806, label %if.then.800

if.then.800:                                      ; preds = %land.lhs.true.793, %lor.lhs.false.790, %lor.lhs.false.783, %lor.lhs.false.780, %do.body.776
  %382 = load i32, i32* %reg, align 4
  %idxprom801 = sext i32 %382 to i64
  %383 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec802 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %383, i32 0, i32 3
  %iso_2022803 = bitcast %union.anon* %spec802 to %struct.iso_2022_spec*
  %current_designation804 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022803, i32 0, i32 2
  %arrayidx805 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation804, i32 0, i64 %idxprom801
  store i32 -2, i32* %arrayidx805, align 4
  store i32 -1, i32* %chars96, align 4
  br label %do.end.847

if.end.806:                                       ; preds = %land.lhs.true.793
  %384 = load i32, i32* %reg, align 4
  %idxprom807 = sext i32 %384 to i64
  %385 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec808 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %385, i32 0, i32 3
  %iso_2022809 = bitcast %union.anon* %spec808 to %struct.iso_2022_spec*
  %current_designation810 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022809, i32 0, i32 2
  %arrayidx811 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation810, i32 0, i64 %idxprom807
  %386 = load i32, i32* %arrayidx811, align 4
  store i32 %386, i32* %prev, align 4
  %387 = load i32, i32* %id777, align 4
  %388 = load i32, i32* @charset_jisx0201_roman, align 4
  %cmp812 = icmp eq i32 %387, %388
  br i1 %cmp812, label %if.then.814, label %if.else.822

if.then.814:                                      ; preds = %if.end.806
  %389 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec815 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %389, i32 0, i32 3
  %iso_2022816 = bitcast %union.anon* %spec815 to %struct.iso_2022_spec*
  %flags817 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022816, i32 0, i32 0
  %390 = load i32, i32* %flags817, align 4
  %and818 = and i32 %390, 32768
  %tobool819 = icmp ne i32 %and818, 0
  br i1 %tobool819, label %if.then.820, label %if.end.821

if.then.820:                                      ; preds = %if.then.814
  %391 = load i32, i32* @charset_ascii, align 4
  store i32 %391, i32* %id777, align 4
  br label %if.end.821

if.end.821:                                       ; preds = %if.then.820, %if.then.814
  br label %if.end.834

if.else.822:                                      ; preds = %if.end.806
  %392 = load i32, i32* %id777, align 4
  %393 = load i32, i32* @charset_jisx0208_1978, align 4
  %cmp823 = icmp eq i32 %392, %393
  br i1 %cmp823, label %if.then.825, label %if.end.833

if.then.825:                                      ; preds = %if.else.822
  %394 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec826 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %394, i32 0, i32 3
  %iso_2022827 = bitcast %union.anon* %spec826 to %struct.iso_2022_spec*
  %flags828 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022827, i32 0, i32 0
  %395 = load i32, i32* %flags828, align 4
  %and829 = and i32 %395, 65536
  %tobool830 = icmp ne i32 %and829, 0
  br i1 %tobool830, label %if.then.831, label %if.end.832

if.then.831:                                      ; preds = %if.then.825
  %396 = load i32, i32* @charset_jisx0208, align 4
  store i32 %396, i32* %id777, align 4
  br label %if.end.832

if.end.832:                                       ; preds = %if.then.831, %if.then.825
  br label %if.end.833

if.end.833:                                       ; preds = %if.end.832, %if.else.822
  br label %if.end.834

if.end.834:                                       ; preds = %if.end.833, %if.end.821
  %397 = load i32, i32* %id777, align 4
  %398 = load i32, i32* %reg, align 4
  %idxprom835 = sext i32 %398 to i64
  %399 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec836 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %399, i32 0, i32 3
  %iso_2022837 = bitcast %union.anon* %spec836 to %struct.iso_2022_spec*
  %current_designation838 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022837, i32 0, i32 2
  %arrayidx839 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation838, i32 0, i64 %idxprom835
  store i32 %397, i32* %arrayidx839, align 4
  %400 = load i32, i32* %prev, align 4
  %cmp840 = icmp eq i32 %400, -2
  br i1 %cmp840, label %land.lhs.true.842, label %if.end.846

land.lhs.true.842:                                ; preds = %if.end.834
  %401 = load i32, i32* %id777, align 4
  %402 = load i32, i32* @charset_ascii, align 4
  %cmp843 = icmp eq i32 %401, %402
  br i1 %cmp843, label %if.then.845, label %if.end.846

if.then.845:                                      ; preds = %land.lhs.true.842
  store i32 -1, i32* %chars96, align 4
  br label %if.end.846

if.end.846:                                       ; preds = %if.then.845, %land.lhs.true.842, %if.end.834
  br label %do.end.847

do.end.847:                                       ; preds = %if.end.846, %if.then.800
  %403 = load i32, i32* %reg, align 4
  %cmp848 = icmp eq i32 %403, 0
  br i1 %cmp848, label %if.then.850, label %if.else.870

if.then.850:                                      ; preds = %do.end.847
  %404 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec851 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %404, i32 0, i32 3
  %iso_2022852 = bitcast %union.anon* %spec851 to %struct.iso_2022_spec*
  %current_invocation853 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022852, i32 0, i32 1
  %arrayidx854 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation853, i32 0, i64 0
  %405 = load i32, i32* %arrayidx854, align 4
  %cmp855 = icmp slt i32 %405, 0
  br i1 %cmp855, label %cond.true.857, label %cond.false.858

cond.true.857:                                    ; preds = %if.then.850
  br label %cond.end.868

cond.false.858:                                   ; preds = %if.then.850
  %406 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec859 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %406, i32 0, i32 3
  %iso_2022860 = bitcast %union.anon* %spec859 to %struct.iso_2022_spec*
  %current_invocation861 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022860, i32 0, i32 1
  %arrayidx862 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation861, i32 0, i64 0
  %407 = load i32, i32* %arrayidx862, align 4
  %idxprom863 = sext i32 %407 to i64
  %408 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec864 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %408, i32 0, i32 3
  %iso_2022865 = bitcast %union.anon* %spec864 to %struct.iso_2022_spec*
  %current_designation866 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022865, i32 0, i32 2
  %arrayidx867 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation866, i32 0, i64 %idxprom863
  %409 = load i32, i32* %arrayidx867, align 4
  br label %cond.end.868

cond.end.868:                                     ; preds = %cond.false.858, %cond.true.857
  %cond869 = phi i32 [ -1, %cond.true.857 ], [ %409, %cond.false.858 ]
  store i32 %cond869, i32* %charset_id_0, align 4
  br label %if.end.894

if.else.870:                                      ; preds = %do.end.847
  %410 = load i32, i32* %reg, align 4
  %cmp871 = icmp eq i32 %410, 1
  br i1 %cmp871, label %if.then.873, label %if.end.893

if.then.873:                                      ; preds = %if.else.870
  %411 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec874 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %411, i32 0, i32 3
  %iso_2022875 = bitcast %union.anon* %spec874 to %struct.iso_2022_spec*
  %current_invocation876 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022875, i32 0, i32 1
  %arrayidx877 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation876, i32 0, i64 1
  %412 = load i32, i32* %arrayidx877, align 4
  %cmp878 = icmp slt i32 %412, 0
  br i1 %cmp878, label %cond.true.880, label %cond.false.881

cond.true.880:                                    ; preds = %if.then.873
  br label %cond.end.891

cond.false.881:                                   ; preds = %if.then.873
  %413 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec882 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %413, i32 0, i32 3
  %iso_2022883 = bitcast %union.anon* %spec882 to %struct.iso_2022_spec*
  %current_invocation884 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022883, i32 0, i32 1
  %arrayidx885 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation884, i32 0, i64 1
  %414 = load i32, i32* %arrayidx885, align 4
  %idxprom886 = sext i32 %414 to i64
  %415 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec887 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %415, i32 0, i32 3
  %iso_2022888 = bitcast %union.anon* %spec887 to %struct.iso_2022_spec*
  %current_designation889 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022888, i32 0, i32 2
  %arrayidx890 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation889, i32 0, i64 %idxprom886
  %416 = load i32, i32* %arrayidx890, align 4
  br label %cond.end.891

cond.end.891:                                     ; preds = %cond.false.881, %cond.true.880
  %cond892 = phi i32 [ -1, %cond.true.880 ], [ %416, %cond.false.881 ]
  store i32 %cond892, i32* %charset_id_1, align 4
  br label %if.end.893

if.end.893:                                       ; preds = %cond.end.891, %if.else.870
  br label %if.end.894

if.end.894:                                       ; preds = %if.end.893, %cond.end.868
  %417 = load i32, i32* %chars96, align 4
  %cmp895 = icmp slt i32 %417, 0
  br i1 %cmp895, label %if.then.897, label %if.end.898

if.then.897:                                      ; preds = %if.end.894
  br label %invalid_code

if.end.898:                                       ; preds = %if.end.894
  br label %while.body

sw.bb.899:                                        ; preds = %label_escape_sequence
  %418 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec900 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %418, i32 0, i32 3
  %iso_2022901 = bitcast %union.anon* %spec900 to %struct.iso_2022_spec*
  %flags902 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022901, i32 0, i32 0
  %419 = load i32, i32* %flags902, align 4
  %and903 = and i32 %419, 16
  %tobool904 = icmp ne i32 %and903, 0
  br i1 %tobool904, label %lor.lhs.false.905, label %if.then.912

lor.lhs.false.905:                                ; preds = %sw.bb.899
  %420 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec906 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %420, i32 0, i32 3
  %iso_2022907 = bitcast %union.anon* %spec906 to %struct.iso_2022_spec*
  %current_designation908 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022907, i32 0, i32 2
  %arrayidx909 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation908, i32 0, i64 2
  %421 = load i32, i32* %arrayidx909, align 4
  %cmp910 = icmp slt i32 %421, 0
  br i1 %cmp910, label %if.then.912, label %if.end.913

if.then.912:                                      ; preds = %lor.lhs.false.905, %sw.bb.899
  br label %invalid_code

if.end.913:                                       ; preds = %lor.lhs.false.905
  %422 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec914 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %422, i32 0, i32 3
  %iso_2022915 = bitcast %union.anon* %spec914 to %struct.iso_2022_spec*
  %current_invocation916 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022915, i32 0, i32 1
  %arrayidx917 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation916, i32 0, i64 0
  store i32 2, i32* %arrayidx917, align 4
  %423 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec918 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %423, i32 0, i32 3
  %iso_2022919 = bitcast %union.anon* %spec918 to %struct.iso_2022_spec*
  %current_invocation920 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022919, i32 0, i32 1
  %arrayidx921 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation920, i32 0, i64 0
  %424 = load i32, i32* %arrayidx921, align 4
  %cmp922 = icmp slt i32 %424, 0
  br i1 %cmp922, label %cond.true.924, label %cond.false.925

cond.true.924:                                    ; preds = %if.end.913
  br label %cond.end.935

cond.false.925:                                   ; preds = %if.end.913
  %425 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec926 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %425, i32 0, i32 3
  %iso_2022927 = bitcast %union.anon* %spec926 to %struct.iso_2022_spec*
  %current_invocation928 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022927, i32 0, i32 1
  %arrayidx929 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation928, i32 0, i64 0
  %426 = load i32, i32* %arrayidx929, align 4
  %idxprom930 = sext i32 %426 to i64
  %427 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec931 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %427, i32 0, i32 3
  %iso_2022932 = bitcast %union.anon* %spec931 to %struct.iso_2022_spec*
  %current_designation933 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022932, i32 0, i32 2
  %arrayidx934 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation933, i32 0, i64 %idxprom930
  %428 = load i32, i32* %arrayidx934, align 4
  br label %cond.end.935

cond.end.935:                                     ; preds = %cond.false.925, %cond.true.924
  %cond936 = phi i32 [ -1, %cond.true.924 ], [ %428, %cond.false.925 ]
  store i32 %cond936, i32* %charset_id_0, align 4
  br label %while.body

sw.bb.937:                                        ; preds = %label_escape_sequence
  %429 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec938 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %429, i32 0, i32 3
  %iso_2022939 = bitcast %union.anon* %spec938 to %struct.iso_2022_spec*
  %flags940 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022939, i32 0, i32 0
  %430 = load i32, i32* %flags940, align 4
  %and941 = and i32 %430, 16
  %tobool942 = icmp ne i32 %and941, 0
  br i1 %tobool942, label %lor.lhs.false.943, label %if.then.950

lor.lhs.false.943:                                ; preds = %sw.bb.937
  %431 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec944 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %431, i32 0, i32 3
  %iso_2022945 = bitcast %union.anon* %spec944 to %struct.iso_2022_spec*
  %current_designation946 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022945, i32 0, i32 2
  %arrayidx947 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation946, i32 0, i64 3
  %432 = load i32, i32* %arrayidx947, align 4
  %cmp948 = icmp slt i32 %432, 0
  br i1 %cmp948, label %if.then.950, label %if.end.951

if.then.950:                                      ; preds = %lor.lhs.false.943, %sw.bb.937
  br label %invalid_code

if.end.951:                                       ; preds = %lor.lhs.false.943
  %433 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec952 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %433, i32 0, i32 3
  %iso_2022953 = bitcast %union.anon* %spec952 to %struct.iso_2022_spec*
  %current_invocation954 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022953, i32 0, i32 1
  %arrayidx955 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation954, i32 0, i64 0
  store i32 3, i32* %arrayidx955, align 4
  %434 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec956 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %434, i32 0, i32 3
  %iso_2022957 = bitcast %union.anon* %spec956 to %struct.iso_2022_spec*
  %current_invocation958 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022957, i32 0, i32 1
  %arrayidx959 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation958, i32 0, i64 0
  %435 = load i32, i32* %arrayidx959, align 4
  %cmp960 = icmp slt i32 %435, 0
  br i1 %cmp960, label %cond.true.962, label %cond.false.963

cond.true.962:                                    ; preds = %if.end.951
  br label %cond.end.973

cond.false.963:                                   ; preds = %if.end.951
  %436 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec964 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %436, i32 0, i32 3
  %iso_2022965 = bitcast %union.anon* %spec964 to %struct.iso_2022_spec*
  %current_invocation966 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022965, i32 0, i32 1
  %arrayidx967 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation966, i32 0, i64 0
  %437 = load i32, i32* %arrayidx967, align 4
  %idxprom968 = sext i32 %437 to i64
  %438 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec969 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %438, i32 0, i32 3
  %iso_2022970 = bitcast %union.anon* %spec969 to %struct.iso_2022_spec*
  %current_designation971 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022970, i32 0, i32 2
  %arrayidx972 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation971, i32 0, i64 %idxprom968
  %439 = load i32, i32* %arrayidx972, align 4
  br label %cond.end.973

cond.end.973:                                     ; preds = %cond.false.963, %cond.true.962
  %cond974 = phi i32 [ -1, %cond.true.962 ], [ %439, %cond.false.963 ]
  store i32 %cond974, i32* %charset_id_0, align 4
  br label %while.body

sw.bb.975:                                        ; preds = %label_escape_sequence
  %440 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec976 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %440, i32 0, i32 3
  %iso_2022977 = bitcast %union.anon* %spec976 to %struct.iso_2022_spec*
  %flags978 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022977, i32 0, i32 0
  %441 = load i32, i32* %flags978, align 4
  %and979 = and i32 %441, 32
  %tobool980 = icmp ne i32 %and979, 0
  br i1 %tobool980, label %lor.lhs.false.981, label %if.then.988

lor.lhs.false.981:                                ; preds = %sw.bb.975
  %442 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec982 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %442, i32 0, i32 3
  %iso_2022983 = bitcast %union.anon* %spec982 to %struct.iso_2022_spec*
  %current_designation984 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022983, i32 0, i32 2
  %arrayidx985 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation984, i32 0, i64 2
  %443 = load i32, i32* %arrayidx985, align 4
  %cmp986 = icmp slt i32 %443, 0
  br i1 %cmp986, label %if.then.988, label %if.end.989

if.then.988:                                      ; preds = %lor.lhs.false.981, %sw.bb.975
  br label %invalid_code

if.end.989:                                       ; preds = %lor.lhs.false.981
  %444 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec990 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %444, i32 0, i32 3
  %iso_2022991 = bitcast %union.anon* %spec990 to %struct.iso_2022_spec*
  %current_designation992 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022991, i32 0, i32 2
  %arrayidx993 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation992, i32 0, i64 2
  %445 = load i32, i32* %arrayidx993, align 4
  store i32 %445, i32* %charset_id_2, align 4
  %446 = load i32, i32* %charset_id_2, align 4
  %cmp994 = icmp slt i32 %446, 0
  br i1 %cmp994, label %if.then.996, label %if.else.999

if.then.996:                                      ; preds = %if.end.989
  %447 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %448 = load i32, i32* @charset_ascii, align 4
  %idx.ext997 = sext i32 %448 to i64
  %add.ptr998 = getelementptr inbounds %struct.charset, %struct.charset* %447, i64 %idx.ext997
  store %struct.charset* %add.ptr998, %struct.charset** %charset, align 8
  br label %if.end.1002

if.else.999:                                      ; preds = %if.end.989
  %449 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %450 = load i32, i32* %charset_id_2, align 4
  %idx.ext1000 = sext i32 %450 to i64
  %add.ptr1001 = getelementptr inbounds %struct.charset, %struct.charset* %449, i64 %idx.ext1000
  store %struct.charset* %add.ptr1001, %struct.charset** %charset, align 8
  br label %if.end.1002

if.end.1002:                                      ; preds = %if.else.999, %if.then.996
  br label %do.body.1003

do.body.1003:                                     ; preds = %if.end.1002
  %451 = load i8*, i8** %src, align 8
  %452 = load i8*, i8** %src_end, align 8
  %cmp1004 = icmp eq i8* %451, %452
  br i1 %cmp1004, label %if.then.1006, label %if.end.1011

if.then.1006:                                     ; preds = %do.body.1003
  %453 = load i8*, i8** %src_base, align 8
  %454 = load i8*, i8** %src, align 8
  %cmp1007 = icmp ult i8* %453, %454
  br i1 %cmp1007, label %if.then.1009, label %if.end.1010

if.then.1009:                                     ; preds = %if.then.1006
  %455 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %455, i32 1)
  br label %if.end.1010

if.end.1010:                                      ; preds = %if.then.1009, %if.then.1006
  br label %no_more_source

if.end.1011:                                      ; preds = %do.body.1003
  %456 = load i8*, i8** %src, align 8
  %incdec.ptr1012 = getelementptr inbounds i8, i8* %456, i32 1
  store i8* %incdec.ptr1012, i8** %src, align 8
  %457 = load i8, i8* %456, align 1
  %conv1013 = zext i8 %457 to i32
  store i32 %conv1013, i32* %c1, align 4
  %458 = load i8, i8* %multibytep, align 1
  %tobool1014 = trunc i8 %458 to i1
  br i1 %tobool1014, label %land.lhs.true.1016, label %if.end.1034

land.lhs.true.1016:                               ; preds = %if.end.1011
  %459 = load i32, i32* %c1, align 4
  %and1017 = and i32 %459, 128
  %tobool1018 = icmp ne i32 %and1017, 0
  br i1 %tobool1018, label %if.then.1019, label %if.end.1034

if.then.1019:                                     ; preds = %land.lhs.true.1016
  %460 = load i32, i32* %c1, align 4
  %and1020 = and i32 %460, 254
  %cmp1021 = icmp eq i32 %and1020, 192
  br i1 %cmp1021, label %if.then.1023, label %if.else.1029

if.then.1023:                                     ; preds = %if.then.1019
  %461 = load i32, i32* %c1, align 4
  %and1024 = and i32 %461, 1
  %shl1025 = shl i32 %and1024, 6
  %462 = load i8*, i8** %src, align 8
  %incdec.ptr1026 = getelementptr inbounds i8, i8* %462, i32 1
  store i8* %incdec.ptr1026, i8** %src, align 8
  %463 = load i8, i8* %462, align 1
  %conv1027 = zext i8 %463 to i32
  %or1028 = or i32 %shl1025, %conv1027
  store i32 %or1028, i32* %c1, align 4
  br label %if.end.1033

if.else.1029:                                     ; preds = %if.then.1019
  %464 = load i8*, i8** %src, align 8
  %incdec.ptr1030 = getelementptr inbounds i8, i8* %464, i32 -1
  store i8* %incdec.ptr1030, i8** %src, align 8
  %465 = load i8*, i8** %src, align 8
  %call1031 = call i32 @string_char(i8* %465, i8** %src, i32* null)
  %sub1032 = sub nsw i32 0, %call1031
  store i32 %sub1032, i32* %c1, align 4
  %466 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %466, i32 3)
  br label %if.end.1033

if.end.1033:                                      ; preds = %if.else.1029, %if.then.1023
  br label %if.end.1034

if.end.1034:                                      ; preds = %if.end.1033, %land.lhs.true.1016, %if.end.1011
  %467 = load i64, i64* %consumed_chars, align 8
  %inc1035 = add nsw i64 %467, 1
  store i64 %inc1035, i64* %consumed_chars, align 8
  br label %do.end.1036

do.end.1036:                                      ; preds = %if.end.1034
  %468 = load i32, i32* %c1, align 4
  %cmp1037 = icmp slt i32 %468, 32
  br i1 %cmp1037, label %if.then.1063, label %lor.lhs.false.1039

lor.lhs.false.1039:                               ; preds = %do.end.1036
  %469 = load i32, i32* %c1, align 4
  %cmp1040 = icmp sge i32 %469, 128
  br i1 %cmp1040, label %land.lhs.true.1042, label %lor.lhs.false.1045

land.lhs.true.1042:                               ; preds = %lor.lhs.false.1039
  %470 = load i32, i32* %c1, align 4
  %cmp1043 = icmp slt i32 %470, 160
  br i1 %cmp1043, label %if.then.1063, label %lor.lhs.false.1045

lor.lhs.false.1045:                               ; preds = %land.lhs.true.1042, %lor.lhs.false.1039
  %471 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1046 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %471, i32 0, i32 3
  %iso_20221047 = bitcast %union.anon* %spec1046 to %struct.iso_2022_spec*
  %flags1048 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221047, i32 0, i32 0
  %472 = load i32, i32* %flags1048, align 4
  %and1049 = and i32 %472, 8
  %tobool1050 = icmp ne i32 %and1049, 0
  br i1 %tobool1050, label %if.end.1064, label %land.lhs.true.1051

land.lhs.true.1051:                               ; preds = %lor.lhs.false.1045
  %473 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1052 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %473, i32 0, i32 3
  %iso_20221053 = bitcast %union.anon* %spec1052 to %struct.iso_2022_spec*
  %flags1054 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221053, i32 0, i32 0
  %474 = load i32, i32* %flags1054, align 4
  %and1055 = and i32 %474, 131072
  %tobool1056 = icmp ne i32 %and1055, 0
  br i1 %tobool1056, label %cond.true.1057, label %cond.false.1060

cond.true.1057:                                   ; preds = %land.lhs.true.1051
  %475 = load i32, i32* %c1, align 4
  %cmp1058 = icmp sge i32 %475, 128
  br i1 %cmp1058, label %if.then.1063, label %if.end.1064

cond.false.1060:                                  ; preds = %land.lhs.true.1051
  %476 = load i32, i32* %c1, align 4
  %cmp1061 = icmp slt i32 %476, 128
  br i1 %cmp1061, label %if.then.1063, label %if.end.1064

if.then.1063:                                     ; preds = %cond.false.1060, %cond.true.1057, %land.lhs.true.1042, %do.end.1036
  br label %invalid_code

if.end.1064:                                      ; preds = %cond.false.1060, %cond.true.1057, %lor.lhs.false.1045
  br label %sw.epilog.1890

sw.bb.1065:                                       ; preds = %label_escape_sequence
  %477 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1066 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %477, i32 0, i32 3
  %iso_20221067 = bitcast %union.anon* %spec1066 to %struct.iso_2022_spec*
  %flags1068 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221067, i32 0, i32 0
  %478 = load i32, i32* %flags1068, align 4
  %and1069 = and i32 %478, 32
  %tobool1070 = icmp ne i32 %and1069, 0
  br i1 %tobool1070, label %lor.lhs.false.1071, label %if.then.1078

lor.lhs.false.1071:                               ; preds = %sw.bb.1065
  %479 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1072 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %479, i32 0, i32 3
  %iso_20221073 = bitcast %union.anon* %spec1072 to %struct.iso_2022_spec*
  %current_designation1074 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221073, i32 0, i32 2
  %arrayidx1075 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1074, i32 0, i64 3
  %480 = load i32, i32* %arrayidx1075, align 4
  %cmp1076 = icmp slt i32 %480, 0
  br i1 %cmp1076, label %if.then.1078, label %if.end.1079

if.then.1078:                                     ; preds = %lor.lhs.false.1071, %sw.bb.1065
  br label %invalid_code

if.end.1079:                                      ; preds = %lor.lhs.false.1071
  %481 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1080 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %481, i32 0, i32 3
  %iso_20221081 = bitcast %union.anon* %spec1080 to %struct.iso_2022_spec*
  %current_designation1082 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221081, i32 0, i32 2
  %arrayidx1083 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1082, i32 0, i64 3
  %482 = load i32, i32* %arrayidx1083, align 4
  store i32 %482, i32* %charset_id_3, align 4
  %483 = load i32, i32* %charset_id_3, align 4
  %cmp1084 = icmp slt i32 %483, 0
  br i1 %cmp1084, label %if.then.1086, label %if.else.1089

if.then.1086:                                     ; preds = %if.end.1079
  %484 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %485 = load i32, i32* @charset_ascii, align 4
  %idx.ext1087 = sext i32 %485 to i64
  %add.ptr1088 = getelementptr inbounds %struct.charset, %struct.charset* %484, i64 %idx.ext1087
  store %struct.charset* %add.ptr1088, %struct.charset** %charset, align 8
  br label %if.end.1092

if.else.1089:                                     ; preds = %if.end.1079
  %486 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %487 = load i32, i32* %charset_id_3, align 4
  %idx.ext1090 = sext i32 %487 to i64
  %add.ptr1091 = getelementptr inbounds %struct.charset, %struct.charset* %486, i64 %idx.ext1090
  store %struct.charset* %add.ptr1091, %struct.charset** %charset, align 8
  br label %if.end.1092

if.end.1092:                                      ; preds = %if.else.1089, %if.then.1086
  br label %do.body.1093

do.body.1093:                                     ; preds = %if.end.1092
  %488 = load i8*, i8** %src, align 8
  %489 = load i8*, i8** %src_end, align 8
  %cmp1094 = icmp eq i8* %488, %489
  br i1 %cmp1094, label %if.then.1096, label %if.end.1101

if.then.1096:                                     ; preds = %do.body.1093
  %490 = load i8*, i8** %src_base, align 8
  %491 = load i8*, i8** %src, align 8
  %cmp1097 = icmp ult i8* %490, %491
  br i1 %cmp1097, label %if.then.1099, label %if.end.1100

if.then.1099:                                     ; preds = %if.then.1096
  %492 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %492, i32 1)
  br label %if.end.1100

if.end.1100:                                      ; preds = %if.then.1099, %if.then.1096
  br label %no_more_source

if.end.1101:                                      ; preds = %do.body.1093
  %493 = load i8*, i8** %src, align 8
  %incdec.ptr1102 = getelementptr inbounds i8, i8* %493, i32 1
  store i8* %incdec.ptr1102, i8** %src, align 8
  %494 = load i8, i8* %493, align 1
  %conv1103 = zext i8 %494 to i32
  store i32 %conv1103, i32* %c1, align 4
  %495 = load i8, i8* %multibytep, align 1
  %tobool1104 = trunc i8 %495 to i1
  br i1 %tobool1104, label %land.lhs.true.1106, label %if.end.1124

land.lhs.true.1106:                               ; preds = %if.end.1101
  %496 = load i32, i32* %c1, align 4
  %and1107 = and i32 %496, 128
  %tobool1108 = icmp ne i32 %and1107, 0
  br i1 %tobool1108, label %if.then.1109, label %if.end.1124

if.then.1109:                                     ; preds = %land.lhs.true.1106
  %497 = load i32, i32* %c1, align 4
  %and1110 = and i32 %497, 254
  %cmp1111 = icmp eq i32 %and1110, 192
  br i1 %cmp1111, label %if.then.1113, label %if.else.1119

if.then.1113:                                     ; preds = %if.then.1109
  %498 = load i32, i32* %c1, align 4
  %and1114 = and i32 %498, 1
  %shl1115 = shl i32 %and1114, 6
  %499 = load i8*, i8** %src, align 8
  %incdec.ptr1116 = getelementptr inbounds i8, i8* %499, i32 1
  store i8* %incdec.ptr1116, i8** %src, align 8
  %500 = load i8, i8* %499, align 1
  %conv1117 = zext i8 %500 to i32
  %or1118 = or i32 %shl1115, %conv1117
  store i32 %or1118, i32* %c1, align 4
  br label %if.end.1123

if.else.1119:                                     ; preds = %if.then.1109
  %501 = load i8*, i8** %src, align 8
  %incdec.ptr1120 = getelementptr inbounds i8, i8* %501, i32 -1
  store i8* %incdec.ptr1120, i8** %src, align 8
  %502 = load i8*, i8** %src, align 8
  %call1121 = call i32 @string_char(i8* %502, i8** %src, i32* null)
  %sub1122 = sub nsw i32 0, %call1121
  store i32 %sub1122, i32* %c1, align 4
  %503 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %503, i32 3)
  br label %if.end.1123

if.end.1123:                                      ; preds = %if.else.1119, %if.then.1113
  br label %if.end.1124

if.end.1124:                                      ; preds = %if.end.1123, %land.lhs.true.1106, %if.end.1101
  %504 = load i64, i64* %consumed_chars, align 8
  %inc1125 = add nsw i64 %504, 1
  store i64 %inc1125, i64* %consumed_chars, align 8
  br label %do.end.1126

do.end.1126:                                      ; preds = %if.end.1124
  %505 = load i32, i32* %c1, align 4
  %cmp1127 = icmp slt i32 %505, 32
  br i1 %cmp1127, label %if.then.1153, label %lor.lhs.false.1129

lor.lhs.false.1129:                               ; preds = %do.end.1126
  %506 = load i32, i32* %c1, align 4
  %cmp1130 = icmp sge i32 %506, 128
  br i1 %cmp1130, label %land.lhs.true.1132, label %lor.lhs.false.1135

land.lhs.true.1132:                               ; preds = %lor.lhs.false.1129
  %507 = load i32, i32* %c1, align 4
  %cmp1133 = icmp slt i32 %507, 160
  br i1 %cmp1133, label %if.then.1153, label %lor.lhs.false.1135

lor.lhs.false.1135:                               ; preds = %land.lhs.true.1132, %lor.lhs.false.1129
  %508 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1136 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %508, i32 0, i32 3
  %iso_20221137 = bitcast %union.anon* %spec1136 to %struct.iso_2022_spec*
  %flags1138 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221137, i32 0, i32 0
  %509 = load i32, i32* %flags1138, align 4
  %and1139 = and i32 %509, 8
  %tobool1140 = icmp ne i32 %and1139, 0
  br i1 %tobool1140, label %if.end.1154, label %land.lhs.true.1141

land.lhs.true.1141:                               ; preds = %lor.lhs.false.1135
  %510 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1142 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %510, i32 0, i32 3
  %iso_20221143 = bitcast %union.anon* %spec1142 to %struct.iso_2022_spec*
  %flags1144 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221143, i32 0, i32 0
  %511 = load i32, i32* %flags1144, align 4
  %and1145 = and i32 %511, 131072
  %tobool1146 = icmp ne i32 %and1145, 0
  br i1 %tobool1146, label %cond.true.1147, label %cond.false.1150

cond.true.1147:                                   ; preds = %land.lhs.true.1141
  %512 = load i32, i32* %c1, align 4
  %cmp1148 = icmp sge i32 %512, 128
  br i1 %cmp1148, label %if.then.1153, label %if.end.1154

cond.false.1150:                                  ; preds = %land.lhs.true.1141
  %513 = load i32, i32* %c1, align 4
  %cmp1151 = icmp slt i32 %513, 128
  br i1 %cmp1151, label %if.then.1153, label %if.end.1154

if.then.1153:                                     ; preds = %cond.false.1150, %cond.true.1147, %land.lhs.true.1132, %do.end.1126
  br label %invalid_code

if.end.1154:                                      ; preds = %cond.false.1150, %cond.true.1147, %lor.lhs.false.1135
  br label %sw.epilog.1890

sw.bb.1155:                                       ; preds = %label_escape_sequence, %label_escape_sequence, %label_escape_sequence, %label_escape_sequence
  %514 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %514, i32 0, i32 1
  %bf.load1156 = load i32, i32* %common_flags, align 8
  %bf.clear1157 = and i32 %bf.load1156, 16383
  %and1158 = and i32 %bf.clear1157, 1
  %tobool1159 = icmp ne i32 %and1158, 0
  br i1 %tobool1159, label %if.end.1161, label %if.then.1160

if.then.1160:                                     ; preds = %sw.bb.1155
  br label %invalid_code

if.end.1161:                                      ; preds = %sw.bb.1155
  %515 = load i32, i32* %last_id, align 4
  %516 = load i32, i32* @charset_ascii, align 4
  %cmp1162 = icmp ne i32 %515, %516
  br i1 %cmp1162, label %if.then.1164, label %if.end.1179

if.then.1164:                                     ; preds = %if.end.1161
  br label %do.body.1165

do.body.1165:                                     ; preds = %if.then.1164
  br label %do.body.1166

do.body.1166:                                     ; preds = %do.body.1165
  %517 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1167 = getelementptr inbounds i32, i32* %517, i32 1
  store i32* %incdec.ptr1167, i32** %charbuf, align 8
  store i32 -4, i32* %517, align 4
  %518 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1168 = getelementptr inbounds i32, i32* %518, i32 1
  store i32* %incdec.ptr1168, i32** %charbuf, align 8
  store i32 3, i32* %518, align 4
  %519 = load i64, i64* %char_offset, align 8
  %520 = load i64, i64* %last_offset, align 8
  %sub1169 = sub nsw i64 %519, %520
  %conv1170 = trunc i64 %sub1169 to i32
  %521 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1171 = getelementptr inbounds i32, i32* %521, i32 1
  store i32* %incdec.ptr1171, i32** %charbuf, align 8
  store i32 %conv1170, i32* %521, align 4
  %522 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated1172 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %522, i32 0, i32 1
  %bf.load1173 = load i32, i32* %annotated1172, align 8
  %bf.clear1174 = and i32 %bf.load1173, -8388609
  %bf.set1175 = or i32 %bf.clear1174, 8388608
  store i32 %bf.set1175, i32* %annotated1172, align 8
  br label %do.end.1176

do.end.1176:                                      ; preds = %do.body.1166
  %523 = load i32, i32* %last_id, align 4
  %524 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1177 = getelementptr inbounds i32, i32* %524, i32 1
  store i32* %incdec.ptr1177, i32** %charbuf, align 8
  store i32 %523, i32* %524, align 4
  br label %do.end.1178

do.end.1178:                                      ; preds = %do.end.1176
  %525 = load i32, i32* @charset_ascii, align 4
  store i32 %525, i32* %last_id, align 4
  %526 = load i64, i64* %char_offset, align 8
  store i64 %526, i64* %last_offset, align 8
  br label %if.end.1179

if.end.1179:                                      ; preds = %do.end.1178, %if.end.1161
  br label %do.body.1180

do.body.1180:                                     ; preds = %if.end.1179
  %527 = load i32, i32* %c1, align 4
  %cmp1181 = icmp eq i32 %527, 48
  br i1 %cmp1181, label %land.lhs.true.1183, label %if.else.1204

land.lhs.true.1183:                               ; preds = %do.body.1180
  %528 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1184 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %528, i32 0, i32 0
  %529 = load i32, i32* %state1184, align 4
  %cmp1185 = icmp eq i32 %529, 3
  br i1 %cmp1185, label %land.lhs.true.1187, label %lor.lhs.false.1190

land.lhs.true.1187:                               ; preds = %land.lhs.true.1183
  %530 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method = getelementptr inbounds %struct.composition_status, %struct.composition_status* %530, i32 0, i32 1
  %531 = load i32, i32* %method, align 4
  %cmp1188 = icmp eq i32 %531, 2
  br i1 %cmp1188, label %if.then.1198, label %lor.lhs.false.1190

lor.lhs.false.1190:                               ; preds = %land.lhs.true.1187, %land.lhs.true.1183
  %532 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1191 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %532, i32 0, i32 0
  %533 = load i32, i32* %state1191, align 4
  %cmp1192 = icmp eq i32 %533, 4
  br i1 %cmp1192, label %land.lhs.true.1194, label %if.else.1204

land.lhs.true.1194:                               ; preds = %lor.lhs.false.1190
  %534 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method1195 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %534, i32 0, i32 1
  %535 = load i32, i32* %method1195, align 4
  %cmp1196 = icmp eq i32 %535, 3
  br i1 %cmp1196, label %if.then.1198, label %if.else.1204

if.then.1198:                                     ; preds = %land.lhs.true.1194, %land.lhs.true.1187
  %536 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1199 = getelementptr inbounds i32, i32* %536, i32 1
  store i32* %incdec.ptr1199, i32** %charbuf, align 8
  store i32 -1, i32* %536, align 4
  %537 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1200 = getelementptr inbounds i32, i32* %537, i32 1
  store i32* %incdec.ptr1200, i32** %charbuf, align 8
  store i32 -1, i32* %537, align 4
  %538 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1201 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %538, i32 0, i32 0
  store i32 1, i32* %state1201, align 4
  %539 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length1202 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %539, i32 0, i32 3
  %540 = load i32, i32* %length1202, align 4
  %add1203 = add nsw i32 %540, 2
  store i32 %add1203, i32* %length1202, align 4
  br label %if.end.1254

if.else.1204:                                     ; preds = %land.lhs.true.1194, %lor.lhs.false.1190, %do.body.1180
  br label %do.body.1205

do.body.1205:                                     ; preds = %if.else.1204
  %541 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1206 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %541, i32 0, i32 0
  %542 = load i32, i32* %state1206, align 4
  %cmp1207 = icmp ne i32 %542, 0
  br i1 %cmp1207, label %if.then.1209, label %if.end.1213

if.then.1209:                                     ; preds = %do.body.1205
  %543 = load i32*, i32** %charbuf, align 8
  %544 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call1210 = call i32 @finish_composition(i32* %543, %struct.composition_status* %544)
  %conv1211 = sext i32 %call1210 to i64
  %545 = load i64, i64* %char_offset, align 8
  %add1212 = add nsw i64 %545, %conv1211
  store i64 %add1212, i64* %char_offset, align 8
  br label %if.end.1213

if.end.1213:                                      ; preds = %if.then.1209, %do.body.1205
  br label %do.end.1214

do.end.1214:                                      ; preds = %if.end.1213
  %546 = load i32, i32* %c1, align 4
  %cmp1215 = icmp eq i32 %546, 48
  br i1 %cmp1215, label %cond.true.1217, label %cond.false.1218

cond.true.1217:                                   ; preds = %do.end.1214
  br label %cond.end.1228

cond.false.1218:                                  ; preds = %do.end.1214
  %547 = load i32, i32* %c1, align 4
  %cmp1219 = icmp eq i32 %547, 50
  br i1 %cmp1219, label %cond.true.1221, label %cond.false.1222

cond.true.1221:                                   ; preds = %cond.false.1218
  br label %cond.end.1226

cond.false.1222:                                  ; preds = %cond.false.1218
  %548 = load i32, i32* %c1, align 4
  %cmp1223 = icmp eq i32 %548, 51
  %cond1225 = select i1 %cmp1223, i32 2, i32 3
  br label %cond.end.1226

cond.end.1226:                                    ; preds = %cond.false.1222, %cond.true.1221
  %cond1227 = phi i32 [ 1, %cond.true.1221 ], [ %cond1225, %cond.false.1222 ]
  br label %cond.end.1228

cond.end.1228:                                    ; preds = %cond.end.1226, %cond.true.1217
  %cond1229 = phi i32 [ 0, %cond.true.1217 ], [ %cond1227, %cond.end.1226 ]
  %549 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method1230 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %549, i32 0, i32 1
  store i32 %cond1229, i32* %method1230, align 4
  %550 = load i32, i32* %c1, align 4
  %cmp1231 = icmp sle i32 %550, 50
  %cond1233 = select i1 %cmp1231, i32 1, i32 3
  %551 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1234 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %551, i32 0, i32 0
  store i32 %cond1233, i32* %state1234, align 4
  br label %do.body.1235

do.body.1235:                                     ; preds = %cond.end.1228
  br label %do.body.1236

do.body.1236:                                     ; preds = %do.body.1235
  %552 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1237 = getelementptr inbounds i32, i32* %552, i32 1
  store i32* %incdec.ptr1237, i32** %charbuf, align 8
  store i32 -5, i32* %552, align 4
  %553 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1238 = getelementptr inbounds i32, i32* %553, i32 1
  store i32* %incdec.ptr1238, i32** %charbuf, align 8
  store i32 1, i32* %553, align 4
  %554 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1239 = getelementptr inbounds i32, i32* %554, i32 1
  store i32* %incdec.ptr1239, i32** %charbuf, align 8
  store i32 0, i32* %554, align 4
  %555 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated1240 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %555, i32 0, i32 1
  %bf.load1241 = load i32, i32* %annotated1240, align 8
  %bf.clear1242 = and i32 %bf.load1241, -8388609
  %bf.set1243 = or i32 %bf.clear1242, 8388608
  store i32 %bf.set1243, i32* %annotated1240, align 8
  br label %do.end.1244

do.end.1244:                                      ; preds = %do.body.1236
  %556 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1245 = getelementptr inbounds i32, i32* %556, i32 1
  store i32* %incdec.ptr1245, i32** %charbuf, align 8
  store i32 0, i32* %556, align 4
  %557 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method1246 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %557, i32 0, i32 1
  %558 = load i32, i32* %method1246, align 4
  %559 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1247 = getelementptr inbounds i32, i32* %559, i32 1
  store i32* %incdec.ptr1247, i32** %charbuf, align 8
  store i32 %558, i32* %559, align 4
  br label %do.end.1248

do.end.1248:                                      ; preds = %do.end.1244
  %560 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length1249 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %560, i32 0, i32 3
  store i32 5, i32* %length1249, align 4
  %561 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps = getelementptr inbounds %struct.composition_status, %struct.composition_status* %561, i32 0, i32 5
  store i32 0, i32* %ncomps, align 4
  %562 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars = getelementptr inbounds %struct.composition_status, %struct.composition_status* %562, i32 0, i32 4
  store i32 0, i32* %nchars, align 4
  %563 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated1250 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %563, i32 0, i32 1
  %bf.load1251 = load i32, i32* %annotated1250, align 8
  %bf.clear1252 = and i32 %bf.load1251, -8388609
  %bf.set1253 = or i32 %bf.clear1252, 8388608
  store i32 %bf.set1253, i32* %annotated1250, align 8
  br label %if.end.1254

if.end.1254:                                      ; preds = %do.end.1248, %if.then.1198
  br label %do.end.1255

do.end.1255:                                      ; preds = %if.end.1254
  br label %while.body

sw.bb.1256:                                       ; preds = %label_escape_sequence
  %564 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1257 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %564, i32 0, i32 0
  %565 = load i32, i32* %state1257, align 4
  %cmp1258 = icmp eq i32 %565, 0
  br i1 %cmp1258, label %if.then.1260, label %if.end.1261

if.then.1260:                                     ; preds = %sw.bb.1256
  br label %invalid_code

if.end.1261:                                      ; preds = %sw.bb.1256
  br label %do.body.1262

do.body.1262:                                     ; preds = %if.end.1261
  %566 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars1263 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %566, i32 0, i32 4
  %567 = load i32, i32* %nchars1263, align 4
  %cmp1264 = icmp eq i32 %567, 0
  br i1 %cmp1264, label %if.then.1275, label %lor.lhs.false.1266

lor.lhs.false.1266:                               ; preds = %do.body.1262
  %568 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1267 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %568, i32 0, i32 0
  %569 = load i32, i32* %state1267, align 4
  %cmp1268 = icmp eq i32 %569, 1
  %conv1269 = zext i1 %cmp1268 to i32
  %570 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method1270 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %570, i32 0, i32 1
  %571 = load i32, i32* %method1270, align 4
  %cmp1271 = icmp eq i32 %571, 1
  %conv1272 = zext i1 %cmp1271 to i32
  %cmp1273 = icmp eq i32 %conv1269, %conv1272
  br i1 %cmp1273, label %if.then.1275, label %if.end.1286

if.then.1275:                                     ; preds = %lor.lhs.false.1266, %do.body.1262
  br label %do.body.1276

do.body.1276:                                     ; preds = %if.then.1275
  %572 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1277 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %572, i32 0, i32 0
  %573 = load i32, i32* %state1277, align 4
  %cmp1278 = icmp ne i32 %573, 0
  br i1 %cmp1278, label %if.then.1280, label %if.end.1284

if.then.1280:                                     ; preds = %do.body.1276
  %574 = load i32*, i32** %charbuf, align 8
  %575 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call1281 = call i32 @finish_composition(i32* %574, %struct.composition_status* %575)
  %conv1282 = sext i32 %call1281 to i64
  %576 = load i64, i64* %char_offset, align 8
  %add1283 = add nsw i64 %576, %conv1282
  store i64 %add1283, i64* %char_offset, align 8
  br label %if.end.1284

if.end.1284:                                      ; preds = %if.then.1280, %do.body.1276
  br label %do.end.1285

do.end.1285:                                      ; preds = %if.end.1284
  br label %invalid_code

if.end.1286:                                      ; preds = %lor.lhs.false.1266
  %577 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method1287 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %577, i32 0, i32 1
  %578 = load i32, i32* %method1287, align 4
  %cmp1288 = icmp eq i32 %578, 2
  br i1 %cmp1288, label %if.then.1290, label %if.else.1298

if.then.1290:                                     ; preds = %if.end.1286
  %579 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps1291 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %579, i32 0, i32 5
  %580 = load i32, i32* %ncomps1291, align 4
  %add1292 = add nsw i32 %580, 2
  %581 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length1293 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %581, i32 0, i32 3
  %582 = load i32, i32* %length1293, align 4
  %sub1294 = sub nsw i32 0, %582
  %idxprom1295 = sext i32 %sub1294 to i64
  %583 = load i32*, i32** %charbuf, align 8
  %arrayidx1296 = getelementptr inbounds i32, i32* %583, i64 %idxprom1295
  %584 = load i32, i32* %arrayidx1296, align 4
  %sub1297 = sub nsw i32 %584, %add1292
  store i32 %sub1297, i32* %arrayidx1296, align 4
  br label %if.end.1311

if.else.1298:                                     ; preds = %if.end.1286
  %585 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method1299 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %585, i32 0, i32 1
  %586 = load i32, i32* %method1299, align 4
  %cmp1300 = icmp eq i32 %586, 3
  br i1 %cmp1300, label %if.then.1302, label %if.end.1310

if.then.1302:                                     ; preds = %if.else.1298
  %587 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps1303 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %587, i32 0, i32 5
  %588 = load i32, i32* %ncomps1303, align 4
  %mul1304 = mul nsw i32 %588, 3
  %589 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length1305 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %589, i32 0, i32 3
  %590 = load i32, i32* %length1305, align 4
  %sub1306 = sub nsw i32 0, %590
  %idxprom1307 = sext i32 %sub1306 to i64
  %591 = load i32*, i32** %charbuf, align 8
  %arrayidx1308 = getelementptr inbounds i32, i32* %591, i64 %idxprom1307
  %592 = load i32, i32* %arrayidx1308, align 4
  %sub1309 = sub nsw i32 %592, %mul1304
  store i32 %sub1309, i32* %arrayidx1308, align 4
  br label %if.end.1310

if.end.1310:                                      ; preds = %if.then.1302, %if.else.1298
  br label %if.end.1311

if.end.1311:                                      ; preds = %if.end.1310, %if.then.1290
  %593 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars1312 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %593, i32 0, i32 4
  %594 = load i32, i32* %nchars1312, align 4
  %595 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length1313 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %595, i32 0, i32 3
  %596 = load i32, i32* %length1313, align 4
  %sub1314 = sub nsw i32 0, %596
  %add1315 = add nsw i32 %sub1314, 2
  %idxprom1316 = sext i32 %add1315 to i64
  %597 = load i32*, i32** %charbuf, align 8
  %arrayidx1317 = getelementptr inbounds i32, i32* %597, i64 %idxprom1316
  store i32 %594, i32* %arrayidx1317, align 4
  %598 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars1318 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %598, i32 0, i32 4
  %599 = load i32, i32* %nchars1318, align 4
  %conv1319 = sext i32 %599 to i64
  %600 = load i64, i64* %char_offset, align 8
  %add1320 = add nsw i64 %600, %conv1319
  store i64 %add1320, i64* %char_offset, align 8
  %601 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1321 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %601, i32 0, i32 0
  store i32 0, i32* %state1321, align 4
  br label %do.end.1322

do.end.1322:                                      ; preds = %if.end.1311
  br label %while.body

sw.bb.1323:                                       ; preds = %label_escape_sequence
  %602 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1324 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %602, i32 0, i32 3
  %iso_20221325 = bitcast %union.anon* %spec1324 to %struct.iso_2022_spec*
  %flags1326 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221325, i32 0, i32 0
  %603 = load i32, i32* %flags1326, align 4
  %and1327 = and i32 %603, 256
  %tobool1328 = icmp ne i32 %and1327, 0
  br i1 %tobool1328, label %if.end.1330, label %if.then.1329

if.then.1329:                                     ; preds = %sw.bb.1323
  br label %invalid_code

if.end.1330:                                      ; preds = %sw.bb.1323
  br label %do.body.1331

do.body.1331:                                     ; preds = %if.end.1330
  %604 = load i8*, i8** %src, align 8
  %605 = load i8*, i8** %src_end, align 8
  %cmp1332 = icmp eq i8* %604, %605
  br i1 %cmp1332, label %if.then.1334, label %if.end.1339

if.then.1334:                                     ; preds = %do.body.1331
  %606 = load i8*, i8** %src_base, align 8
  %607 = load i8*, i8** %src, align 8
  %cmp1335 = icmp ult i8* %606, %607
  br i1 %cmp1335, label %if.then.1337, label %if.end.1338

if.then.1337:                                     ; preds = %if.then.1334
  %608 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %608, i32 1)
  br label %if.end.1338

if.end.1338:                                      ; preds = %if.then.1337, %if.then.1334
  br label %no_more_source

if.end.1339:                                      ; preds = %do.body.1331
  %609 = load i8*, i8** %src, align 8
  %incdec.ptr1340 = getelementptr inbounds i8, i8* %609, i32 1
  store i8* %incdec.ptr1340, i8** %src, align 8
  %610 = load i8, i8* %609, align 1
  %conv1341 = zext i8 %610 to i32
  store i32 %conv1341, i32* %c1, align 4
  %611 = load i8, i8* %multibytep, align 1
  %tobool1342 = trunc i8 %611 to i1
  br i1 %tobool1342, label %land.lhs.true.1344, label %if.end.1362

land.lhs.true.1344:                               ; preds = %if.end.1339
  %612 = load i32, i32* %c1, align 4
  %and1345 = and i32 %612, 128
  %tobool1346 = icmp ne i32 %and1345, 0
  br i1 %tobool1346, label %if.then.1347, label %if.end.1362

if.then.1347:                                     ; preds = %land.lhs.true.1344
  %613 = load i32, i32* %c1, align 4
  %and1348 = and i32 %613, 254
  %cmp1349 = icmp eq i32 %and1348, 192
  br i1 %cmp1349, label %if.then.1351, label %if.else.1357

if.then.1351:                                     ; preds = %if.then.1347
  %614 = load i32, i32* %c1, align 4
  %and1352 = and i32 %614, 1
  %shl1353 = shl i32 %and1352, 6
  %615 = load i8*, i8** %src, align 8
  %incdec.ptr1354 = getelementptr inbounds i8, i8* %615, i32 1
  store i8* %incdec.ptr1354, i8** %src, align 8
  %616 = load i8, i8* %615, align 1
  %conv1355 = zext i8 %616 to i32
  %or1356 = or i32 %shl1353, %conv1355
  store i32 %or1356, i32* %c1, align 4
  br label %if.end.1361

if.else.1357:                                     ; preds = %if.then.1347
  %617 = load i8*, i8** %src, align 8
  %incdec.ptr1358 = getelementptr inbounds i8, i8* %617, i32 -1
  store i8* %incdec.ptr1358, i8** %src, align 8
  %618 = load i8*, i8** %src, align 8
  %call1359 = call i32 @string_char(i8* %618, i8** %src, i32* null)
  %sub1360 = sub nsw i32 0, %call1359
  store i32 %sub1360, i32* %c1, align 4
  %619 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %619, i32 3)
  br label %if.end.1361

if.end.1361:                                      ; preds = %if.else.1357, %if.then.1351
  br label %if.end.1362

if.end.1362:                                      ; preds = %if.end.1361, %land.lhs.true.1344, %if.end.1339
  %620 = load i64, i64* %consumed_chars, align 8
  %inc1363 = add nsw i64 %620, 1
  store i64 %inc1363, i64* %consumed_chars, align 8
  br label %do.end.1364

do.end.1364:                                      ; preds = %if.end.1362
  %621 = load i32, i32* %c1, align 4
  switch i32 %621, label %sw.default [
    i32 93, label %sw.bb.1365
    i32 48, label %sw.bb.1373
    i32 49, label %sw.bb.1373
    i32 50, label %sw.bb.1423
  ]

sw.bb.1365:                                       ; preds = %do.end.1364
  %622 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %622, i32 0, i32 1
  %bf.load1366 = load i32, i32* %mode, align 8
  %bf.lshr1367 = lshr i32 %bf.load1366, 14
  %bf.clear1368 = and i32 %bf.lshr1367, 31
  %and1369 = and i32 %bf.clear1368, -5
  %bf.load1370 = load i32, i32* %mode, align 8
  %bf.value = and i32 %and1369, 31
  %bf.shl = shl i32 %bf.value, 14
  %bf.clear1371 = and i32 %bf.load1370, -507905
  %bf.set1372 = or i32 %bf.clear1371, %bf.shl
  store i32 %bf.set1372, i32* %mode, align 8
  br label %sw.bb.1373

sw.bb.1373:                                       ; preds = %do.end.1364, %do.end.1364, %sw.bb.1365
  br label %do.body.1374

do.body.1374:                                     ; preds = %sw.bb.1373
  %623 = load i8*, i8** %src, align 8
  %624 = load i8*, i8** %src_end, align 8
  %cmp1375 = icmp eq i8* %623, %624
  br i1 %cmp1375, label %if.then.1377, label %if.end.1382

if.then.1377:                                     ; preds = %do.body.1374
  %625 = load i8*, i8** %src_base, align 8
  %626 = load i8*, i8** %src, align 8
  %cmp1378 = icmp ult i8* %625, %626
  br i1 %cmp1378, label %if.then.1380, label %if.end.1381

if.then.1380:                                     ; preds = %if.then.1377
  %627 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %627, i32 1)
  br label %if.end.1381

if.end.1381:                                      ; preds = %if.then.1380, %if.then.1377
  br label %no_more_source

if.end.1382:                                      ; preds = %do.body.1374
  %628 = load i8*, i8** %src, align 8
  %incdec.ptr1383 = getelementptr inbounds i8, i8* %628, i32 1
  store i8* %incdec.ptr1383, i8** %src, align 8
  %629 = load i8, i8* %628, align 1
  %conv1384 = zext i8 %629 to i32
  store i32 %conv1384, i32* %c1, align 4
  %630 = load i8, i8* %multibytep, align 1
  %tobool1385 = trunc i8 %630 to i1
  br i1 %tobool1385, label %land.lhs.true.1387, label %if.end.1405

land.lhs.true.1387:                               ; preds = %if.end.1382
  %631 = load i32, i32* %c1, align 4
  %and1388 = and i32 %631, 128
  %tobool1389 = icmp ne i32 %and1388, 0
  br i1 %tobool1389, label %if.then.1390, label %if.end.1405

if.then.1390:                                     ; preds = %land.lhs.true.1387
  %632 = load i32, i32* %c1, align 4
  %and1391 = and i32 %632, 254
  %cmp1392 = icmp eq i32 %and1391, 192
  br i1 %cmp1392, label %if.then.1394, label %if.else.1400

if.then.1394:                                     ; preds = %if.then.1390
  %633 = load i32, i32* %c1, align 4
  %and1395 = and i32 %633, 1
  %shl1396 = shl i32 %and1395, 6
  %634 = load i8*, i8** %src, align 8
  %incdec.ptr1397 = getelementptr inbounds i8, i8* %634, i32 1
  store i8* %incdec.ptr1397, i8** %src, align 8
  %635 = load i8, i8* %634, align 1
  %conv1398 = zext i8 %635 to i32
  %or1399 = or i32 %shl1396, %conv1398
  store i32 %or1399, i32* %c1, align 4
  br label %if.end.1404

if.else.1400:                                     ; preds = %if.then.1390
  %636 = load i8*, i8** %src, align 8
  %incdec.ptr1401 = getelementptr inbounds i8, i8* %636, i32 -1
  store i8* %incdec.ptr1401, i8** %src, align 8
  %637 = load i8*, i8** %src, align 8
  %call1402 = call i32 @string_char(i8* %637, i8** %src, i32* null)
  %sub1403 = sub nsw i32 0, %call1402
  store i32 %sub1403, i32* %c1, align 4
  %638 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %638, i32 3)
  br label %if.end.1404

if.end.1404:                                      ; preds = %if.else.1400, %if.then.1394
  br label %if.end.1405

if.end.1405:                                      ; preds = %if.end.1404, %land.lhs.true.1387, %if.end.1382
  %639 = load i64, i64* %consumed_chars, align 8
  %inc1406 = add nsw i64 %639, 1
  store i64 %inc1406, i64* %consumed_chars, align 8
  br label %do.end.1407

do.end.1407:                                      ; preds = %if.end.1405
  %640 = load i32, i32* %c1, align 4
  %cmp1408 = icmp eq i32 %640, 93
  br i1 %cmp1408, label %if.then.1410, label %if.else.1421

if.then.1410:                                     ; preds = %do.end.1407
  %641 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode1411 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %641, i32 0, i32 1
  %bf.load1412 = load i32, i32* %mode1411, align 8
  %bf.lshr1413 = lshr i32 %bf.load1412, 14
  %bf.clear1414 = and i32 %bf.lshr1413, 31
  %and1415 = and i32 %bf.clear1414, -5
  %bf.load1416 = load i32, i32* %mode1411, align 8
  %bf.value1417 = and i32 %and1415, 31
  %bf.shl1418 = shl i32 %bf.value1417, 14
  %bf.clear1419 = and i32 %bf.load1416, -507905
  %bf.set1420 = or i32 %bf.clear1419, %bf.shl1418
  store i32 %bf.set1420, i32* %mode1411, align 8
  br label %if.end.1422

if.else.1421:                                     ; preds = %do.end.1407
  br label %invalid_code

if.end.1422:                                      ; preds = %if.then.1410
  br label %sw.epilog

sw.bb.1423:                                       ; preds = %do.end.1364
  br label %do.body.1424

do.body.1424:                                     ; preds = %sw.bb.1423
  %642 = load i8*, i8** %src, align 8
  %643 = load i8*, i8** %src_end, align 8
  %cmp1425 = icmp eq i8* %642, %643
  br i1 %cmp1425, label %if.then.1427, label %if.end.1432

if.then.1427:                                     ; preds = %do.body.1424
  %644 = load i8*, i8** %src_base, align 8
  %645 = load i8*, i8** %src, align 8
  %cmp1428 = icmp ult i8* %644, %645
  br i1 %cmp1428, label %if.then.1430, label %if.end.1431

if.then.1430:                                     ; preds = %if.then.1427
  %646 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %646, i32 1)
  br label %if.end.1431

if.end.1431:                                      ; preds = %if.then.1430, %if.then.1427
  br label %no_more_source

if.end.1432:                                      ; preds = %do.body.1424
  %647 = load i8*, i8** %src, align 8
  %incdec.ptr1433 = getelementptr inbounds i8, i8* %647, i32 1
  store i8* %incdec.ptr1433, i8** %src, align 8
  %648 = load i8, i8* %647, align 1
  %conv1434 = zext i8 %648 to i32
  store i32 %conv1434, i32* %c1, align 4
  %649 = load i8, i8* %multibytep, align 1
  %tobool1435 = trunc i8 %649 to i1
  br i1 %tobool1435, label %land.lhs.true.1437, label %if.end.1455

land.lhs.true.1437:                               ; preds = %if.end.1432
  %650 = load i32, i32* %c1, align 4
  %and1438 = and i32 %650, 128
  %tobool1439 = icmp ne i32 %and1438, 0
  br i1 %tobool1439, label %if.then.1440, label %if.end.1455

if.then.1440:                                     ; preds = %land.lhs.true.1437
  %651 = load i32, i32* %c1, align 4
  %and1441 = and i32 %651, 254
  %cmp1442 = icmp eq i32 %and1441, 192
  br i1 %cmp1442, label %if.then.1444, label %if.else.1450

if.then.1444:                                     ; preds = %if.then.1440
  %652 = load i32, i32* %c1, align 4
  %and1445 = and i32 %652, 1
  %shl1446 = shl i32 %and1445, 6
  %653 = load i8*, i8** %src, align 8
  %incdec.ptr1447 = getelementptr inbounds i8, i8* %653, i32 1
  store i8* %incdec.ptr1447, i8** %src, align 8
  %654 = load i8, i8* %653, align 1
  %conv1448 = zext i8 %654 to i32
  %or1449 = or i32 %shl1446, %conv1448
  store i32 %or1449, i32* %c1, align 4
  br label %if.end.1454

if.else.1450:                                     ; preds = %if.then.1440
  %655 = load i8*, i8** %src, align 8
  %incdec.ptr1451 = getelementptr inbounds i8, i8* %655, i32 -1
  store i8* %incdec.ptr1451, i8** %src, align 8
  %656 = load i8*, i8** %src, align 8
  %call1452 = call i32 @string_char(i8* %656, i8** %src, i32* null)
  %sub1453 = sub nsw i32 0, %call1452
  store i32 %sub1453, i32* %c1, align 4
  %657 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %657, i32 3)
  br label %if.end.1454

if.end.1454:                                      ; preds = %if.else.1450, %if.then.1444
  br label %if.end.1455

if.end.1455:                                      ; preds = %if.end.1454, %land.lhs.true.1437, %if.end.1432
  %658 = load i64, i64* %consumed_chars, align 8
  %inc1456 = add nsw i64 %658, 1
  store i64 %inc1456, i64* %consumed_chars, align 8
  br label %do.end.1457

do.end.1457:                                      ; preds = %if.end.1455
  %659 = load i32, i32* %c1, align 4
  %cmp1458 = icmp eq i32 %659, 93
  br i1 %cmp1458, label %if.then.1460, label %if.else.1471

if.then.1460:                                     ; preds = %do.end.1457
  %660 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode1461 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %660, i32 0, i32 1
  %bf.load1462 = load i32, i32* %mode1461, align 8
  %bf.lshr1463 = lshr i32 %bf.load1462, 14
  %bf.clear1464 = and i32 %bf.lshr1463, 31
  %or1465 = or i32 %bf.clear1464, 4
  %bf.load1466 = load i32, i32* %mode1461, align 8
  %bf.value1467 = and i32 %or1465, 31
  %bf.shl1468 = shl i32 %bf.value1467, 14
  %bf.clear1469 = and i32 %bf.load1466, -507905
  %bf.set1470 = or i32 %bf.clear1469, %bf.shl1468
  store i32 %bf.set1470, i32* %mode1461, align 8
  br label %if.end.1472

if.else.1471:                                     ; preds = %do.end.1457
  br label %invalid_code

if.end.1472:                                      ; preds = %if.then.1460
  br label %sw.epilog

sw.default:                                       ; preds = %do.end.1364
  br label %invalid_code

sw.epilog:                                        ; preds = %if.end.1472, %if.end.1422
  br label %while.body

sw.bb.1473:                                       ; preds = %label_escape_sequence
  br label %do.body.1474

do.body.1474:                                     ; preds = %sw.bb.1473
  %661 = load i8*, i8** %src, align 8
  %662 = load i8*, i8** %src_end, align 8
  %cmp1475 = icmp eq i8* %661, %662
  br i1 %cmp1475, label %if.then.1477, label %if.end.1482

if.then.1477:                                     ; preds = %do.body.1474
  %663 = load i8*, i8** %src_base, align 8
  %664 = load i8*, i8** %src, align 8
  %cmp1478 = icmp ult i8* %663, %664
  br i1 %cmp1478, label %if.then.1480, label %if.end.1481

if.then.1480:                                     ; preds = %if.then.1477
  %665 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %665, i32 1)
  br label %if.end.1481

if.end.1481:                                      ; preds = %if.then.1480, %if.then.1477
  br label %no_more_source

if.end.1482:                                      ; preds = %do.body.1474
  %666 = load i8*, i8** %src, align 8
  %incdec.ptr1483 = getelementptr inbounds i8, i8* %666, i32 1
  store i8* %incdec.ptr1483, i8** %src, align 8
  %667 = load i8, i8* %666, align 1
  %conv1484 = zext i8 %667 to i32
  store i32 %conv1484, i32* %c1, align 4
  %668 = load i8, i8* %multibytep, align 1
  %tobool1485 = trunc i8 %668 to i1
  br i1 %tobool1485, label %land.lhs.true.1487, label %if.end.1505

land.lhs.true.1487:                               ; preds = %if.end.1482
  %669 = load i32, i32* %c1, align 4
  %and1488 = and i32 %669, 128
  %tobool1489 = icmp ne i32 %and1488, 0
  br i1 %tobool1489, label %if.then.1490, label %if.end.1505

if.then.1490:                                     ; preds = %land.lhs.true.1487
  %670 = load i32, i32* %c1, align 4
  %and1491 = and i32 %670, 254
  %cmp1492 = icmp eq i32 %and1491, 192
  br i1 %cmp1492, label %if.then.1494, label %if.else.1500

if.then.1494:                                     ; preds = %if.then.1490
  %671 = load i32, i32* %c1, align 4
  %and1495 = and i32 %671, 1
  %shl1496 = shl i32 %and1495, 6
  %672 = load i8*, i8** %src, align 8
  %incdec.ptr1497 = getelementptr inbounds i8, i8* %672, i32 1
  store i8* %incdec.ptr1497, i8** %src, align 8
  %673 = load i8, i8* %672, align 1
  %conv1498 = zext i8 %673 to i32
  %or1499 = or i32 %shl1496, %conv1498
  store i32 %or1499, i32* %c1, align 4
  br label %if.end.1504

if.else.1500:                                     ; preds = %if.then.1490
  %674 = load i8*, i8** %src, align 8
  %incdec.ptr1501 = getelementptr inbounds i8, i8* %674, i32 -1
  store i8* %incdec.ptr1501, i8** %src, align 8
  %675 = load i8*, i8** %src, align 8
  %call1502 = call i32 @string_char(i8* %675, i8** %src, i32* null)
  %sub1503 = sub nsw i32 0, %call1502
  store i32 %sub1503, i32* %c1, align 4
  %676 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %676, i32 3)
  br label %if.end.1504

if.end.1504:                                      ; preds = %if.else.1500, %if.then.1494
  br label %if.end.1505

if.end.1505:                                      ; preds = %if.end.1504, %land.lhs.true.1487, %if.end.1482
  %677 = load i64, i64* %consumed_chars, align 8
  %inc1506 = add nsw i64 %677, 1
  store i64 %inc1506, i64* %consumed_chars, align 8
  br label %do.end.1507

do.end.1507:                                      ; preds = %if.end.1505
  %678 = load i32, i32* %c1, align 4
  %cmp1508 = icmp eq i32 %678, 47
  br i1 %cmp1508, label %if.then.1510, label %if.else.1648

if.then.1510:                                     ; preds = %do.end.1507
  br label %do.body.1511

do.body.1511:                                     ; preds = %if.then.1510
  %679 = load i8*, i8** %src, align 8
  %680 = load i8*, i8** %src_end, align 8
  %cmp1512 = icmp eq i8* %679, %680
  br i1 %cmp1512, label %if.then.1514, label %if.end.1519

if.then.1514:                                     ; preds = %do.body.1511
  %681 = load i8*, i8** %src_base, align 8
  %682 = load i8*, i8** %src, align 8
  %cmp1515 = icmp ult i8* %681, %682
  br i1 %cmp1515, label %if.then.1517, label %if.end.1518

if.then.1517:                                     ; preds = %if.then.1514
  %683 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %683, i32 1)
  br label %if.end.1518

if.end.1518:                                      ; preds = %if.then.1517, %if.then.1514
  br label %no_more_source

if.end.1519:                                      ; preds = %do.body.1511
  %684 = load i8*, i8** %src, align 8
  %incdec.ptr1520 = getelementptr inbounds i8, i8* %684, i32 1
  store i8* %incdec.ptr1520, i8** %src, align 8
  %685 = load i8, i8* %684, align 1
  %conv1521 = zext i8 %685 to i32
  store i32 %conv1521, i32* %dim, align 4
  %686 = load i8, i8* %multibytep, align 1
  %tobool1522 = trunc i8 %686 to i1
  br i1 %tobool1522, label %land.lhs.true.1524, label %if.end.1542

land.lhs.true.1524:                               ; preds = %if.end.1519
  %687 = load i32, i32* %dim, align 4
  %and1525 = and i32 %687, 128
  %tobool1526 = icmp ne i32 %and1525, 0
  br i1 %tobool1526, label %if.then.1527, label %if.end.1542

if.then.1527:                                     ; preds = %land.lhs.true.1524
  %688 = load i32, i32* %dim, align 4
  %and1528 = and i32 %688, 254
  %cmp1529 = icmp eq i32 %and1528, 192
  br i1 %cmp1529, label %if.then.1531, label %if.else.1537

if.then.1531:                                     ; preds = %if.then.1527
  %689 = load i32, i32* %dim, align 4
  %and1532 = and i32 %689, 1
  %shl1533 = shl i32 %and1532, 6
  %690 = load i8*, i8** %src, align 8
  %incdec.ptr1534 = getelementptr inbounds i8, i8* %690, i32 1
  store i8* %incdec.ptr1534, i8** %src, align 8
  %691 = load i8, i8* %690, align 1
  %conv1535 = zext i8 %691 to i32
  %or1536 = or i32 %shl1533, %conv1535
  store i32 %or1536, i32* %dim, align 4
  br label %if.end.1541

if.else.1537:                                     ; preds = %if.then.1527
  %692 = load i8*, i8** %src, align 8
  %incdec.ptr1538 = getelementptr inbounds i8, i8* %692, i32 -1
  store i8* %incdec.ptr1538, i8** %src, align 8
  %693 = load i8*, i8** %src, align 8
  %call1539 = call i32 @string_char(i8* %693, i8** %src, i32* null)
  %sub1540 = sub nsw i32 0, %call1539
  store i32 %sub1540, i32* %dim, align 4
  %694 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %694, i32 3)
  br label %if.end.1541

if.end.1541:                                      ; preds = %if.else.1537, %if.then.1531
  br label %if.end.1542

if.end.1542:                                      ; preds = %if.end.1541, %land.lhs.true.1524, %if.end.1519
  %695 = load i64, i64* %consumed_chars, align 8
  %inc1543 = add nsw i64 %695, 1
  store i64 %inc1543, i64* %consumed_chars, align 8
  br label %do.end.1544

do.end.1544:                                      ; preds = %if.end.1542
  %696 = load i32, i32* %dim, align 4
  %cmp1545 = icmp slt i32 %696, 48
  br i1 %cmp1545, label %if.then.1550, label %lor.lhs.false.1547

lor.lhs.false.1547:                               ; preds = %do.end.1544
  %697 = load i32, i32* %dim, align 4
  %cmp1548 = icmp sgt i32 %697, 52
  br i1 %cmp1548, label %if.then.1550, label %if.end.1551

if.then.1550:                                     ; preds = %lor.lhs.false.1547, %do.end.1544
  br label %invalid_code

if.end.1551:                                      ; preds = %lor.lhs.false.1547
  br label %do.body.1552

do.body.1552:                                     ; preds = %if.end.1551
  %698 = load i8*, i8** %src, align 8
  %699 = load i8*, i8** %src_end, align 8
  %cmp1553 = icmp eq i8* %698, %699
  br i1 %cmp1553, label %if.then.1555, label %if.end.1560

if.then.1555:                                     ; preds = %do.body.1552
  %700 = load i8*, i8** %src_base, align 8
  %701 = load i8*, i8** %src, align 8
  %cmp1556 = icmp ult i8* %700, %701
  br i1 %cmp1556, label %if.then.1558, label %if.end.1559

if.then.1558:                                     ; preds = %if.then.1555
  %702 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %702, i32 1)
  br label %if.end.1559

if.end.1559:                                      ; preds = %if.then.1558, %if.then.1555
  br label %no_more_source

if.end.1560:                                      ; preds = %do.body.1552
  %703 = load i8*, i8** %src, align 8
  %incdec.ptr1561 = getelementptr inbounds i8, i8* %703, i32 1
  store i8* %incdec.ptr1561, i8** %src, align 8
  %704 = load i8, i8* %703, align 1
  %conv1562 = zext i8 %704 to i32
  store i32 %conv1562, i32* %M, align 4
  %705 = load i8, i8* %multibytep, align 1
  %tobool1563 = trunc i8 %705 to i1
  br i1 %tobool1563, label %land.lhs.true.1565, label %if.end.1583

land.lhs.true.1565:                               ; preds = %if.end.1560
  %706 = load i32, i32* %M, align 4
  %and1566 = and i32 %706, 128
  %tobool1567 = icmp ne i32 %and1566, 0
  br i1 %tobool1567, label %if.then.1568, label %if.end.1583

if.then.1568:                                     ; preds = %land.lhs.true.1565
  %707 = load i32, i32* %M, align 4
  %and1569 = and i32 %707, 254
  %cmp1570 = icmp eq i32 %and1569, 192
  br i1 %cmp1570, label %if.then.1572, label %if.else.1578

if.then.1572:                                     ; preds = %if.then.1568
  %708 = load i32, i32* %M, align 4
  %and1573 = and i32 %708, 1
  %shl1574 = shl i32 %and1573, 6
  %709 = load i8*, i8** %src, align 8
  %incdec.ptr1575 = getelementptr inbounds i8, i8* %709, i32 1
  store i8* %incdec.ptr1575, i8** %src, align 8
  %710 = load i8, i8* %709, align 1
  %conv1576 = zext i8 %710 to i32
  %or1577 = or i32 %shl1574, %conv1576
  store i32 %or1577, i32* %M, align 4
  br label %if.end.1582

if.else.1578:                                     ; preds = %if.then.1568
  %711 = load i8*, i8** %src, align 8
  %incdec.ptr1579 = getelementptr inbounds i8, i8* %711, i32 -1
  store i8* %incdec.ptr1579, i8** %src, align 8
  %712 = load i8*, i8** %src, align 8
  %call1580 = call i32 @string_char(i8* %712, i8** %src, i32* null)
  %sub1581 = sub nsw i32 0, %call1580
  store i32 %sub1581, i32* %M, align 4
  %713 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %713, i32 3)
  br label %if.end.1582

if.end.1582:                                      ; preds = %if.else.1578, %if.then.1572
  br label %if.end.1583

if.end.1583:                                      ; preds = %if.end.1582, %land.lhs.true.1565, %if.end.1560
  %714 = load i64, i64* %consumed_chars, align 8
  %inc1584 = add nsw i64 %714, 1
  store i64 %inc1584, i64* %consumed_chars, align 8
  br label %do.end.1585

do.end.1585:                                      ; preds = %if.end.1583
  %715 = load i32, i32* %M, align 4
  %cmp1586 = icmp slt i32 %715, 128
  br i1 %cmp1586, label %if.then.1588, label %if.end.1589

if.then.1588:                                     ; preds = %do.end.1585
  br label %invalid_code

if.end.1589:                                      ; preds = %do.end.1585
  br label %do.body.1590

do.body.1590:                                     ; preds = %if.end.1589
  %716 = load i8*, i8** %src, align 8
  %717 = load i8*, i8** %src_end, align 8
  %cmp1591 = icmp eq i8* %716, %717
  br i1 %cmp1591, label %if.then.1593, label %if.end.1598

if.then.1593:                                     ; preds = %do.body.1590
  %718 = load i8*, i8** %src_base, align 8
  %719 = load i8*, i8** %src, align 8
  %cmp1594 = icmp ult i8* %718, %719
  br i1 %cmp1594, label %if.then.1596, label %if.end.1597

if.then.1596:                                     ; preds = %if.then.1593
  %720 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %720, i32 1)
  br label %if.end.1597

if.end.1597:                                      ; preds = %if.then.1596, %if.then.1593
  br label %no_more_source

if.end.1598:                                      ; preds = %do.body.1590
  %721 = load i8*, i8** %src, align 8
  %incdec.ptr1599 = getelementptr inbounds i8, i8* %721, i32 1
  store i8* %incdec.ptr1599, i8** %src, align 8
  %722 = load i8, i8* %721, align 1
  %conv1600 = zext i8 %722 to i32
  store i32 %conv1600, i32* %L, align 4
  %723 = load i8, i8* %multibytep, align 1
  %tobool1601 = trunc i8 %723 to i1
  br i1 %tobool1601, label %land.lhs.true.1603, label %if.end.1621

land.lhs.true.1603:                               ; preds = %if.end.1598
  %724 = load i32, i32* %L, align 4
  %and1604 = and i32 %724, 128
  %tobool1605 = icmp ne i32 %and1604, 0
  br i1 %tobool1605, label %if.then.1606, label %if.end.1621

if.then.1606:                                     ; preds = %land.lhs.true.1603
  %725 = load i32, i32* %L, align 4
  %and1607 = and i32 %725, 254
  %cmp1608 = icmp eq i32 %and1607, 192
  br i1 %cmp1608, label %if.then.1610, label %if.else.1616

if.then.1610:                                     ; preds = %if.then.1606
  %726 = load i32, i32* %L, align 4
  %and1611 = and i32 %726, 1
  %shl1612 = shl i32 %and1611, 6
  %727 = load i8*, i8** %src, align 8
  %incdec.ptr1613 = getelementptr inbounds i8, i8* %727, i32 1
  store i8* %incdec.ptr1613, i8** %src, align 8
  %728 = load i8, i8* %727, align 1
  %conv1614 = zext i8 %728 to i32
  %or1615 = or i32 %shl1612, %conv1614
  store i32 %or1615, i32* %L, align 4
  br label %if.end.1620

if.else.1616:                                     ; preds = %if.then.1606
  %729 = load i8*, i8** %src, align 8
  %incdec.ptr1617 = getelementptr inbounds i8, i8* %729, i32 -1
  store i8* %incdec.ptr1617, i8** %src, align 8
  %730 = load i8*, i8** %src, align 8
  %call1618 = call i32 @string_char(i8* %730, i8** %src, i32* null)
  %sub1619 = sub nsw i32 0, %call1618
  store i32 %sub1619, i32* %L, align 4
  %731 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %731, i32 3)
  br label %if.end.1620

if.end.1620:                                      ; preds = %if.else.1616, %if.then.1610
  br label %if.end.1621

if.end.1621:                                      ; preds = %if.end.1620, %land.lhs.true.1603, %if.end.1598
  %732 = load i64, i64* %consumed_chars, align 8
  %inc1622 = add nsw i64 %732, 1
  store i64 %inc1622, i64* %consumed_chars, align 8
  br label %do.end.1623

do.end.1623:                                      ; preds = %if.end.1621
  %733 = load i32, i32* %L, align 4
  %cmp1624 = icmp slt i32 %733, 128
  br i1 %cmp1624, label %if.then.1626, label %if.end.1627

if.then.1626:                                     ; preds = %do.end.1623
  br label %invalid_code

if.end.1627:                                      ; preds = %do.end.1623
  %734 = load i32, i32* %M, align 4
  %sub1628 = sub nsw i32 %734, 128
  %mul1629 = mul nsw i32 %sub1628, 128
  %735 = load i32, i32* %L, align 4
  %sub1630 = sub nsw i32 %735, 128
  %add1631 = add nsw i32 %mul1629, %sub1630
  store i32 %add1631, i32* %size, align 4
  %736 = load i32*, i32** %charbuf, align 8
  %add.ptr1632 = getelementptr inbounds i32, i32* %736, i64 6
  %737 = load i32*, i32** %charbuf_end, align 8
  %cmp1633 = icmp ugt i32* %add.ptr1632, %737
  br i1 %cmp1633, label %if.then.1635, label %if.end.1636

if.then.1635:                                     ; preds = %if.end.1627
  br label %break_loop

if.end.1636:                                      ; preds = %if.end.1627
  %738 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1637 = getelementptr inbounds i32, i32* %738, i32 1
  store i32* %incdec.ptr1637, i32** %charbuf, align 8
  store i32 27, i32* %738, align 4
  %739 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1638 = getelementptr inbounds i32, i32* %739, i32 1
  store i32* %incdec.ptr1638, i32** %charbuf, align 8
  store i32 37, i32* %739, align 4
  %740 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1639 = getelementptr inbounds i32, i32* %740, i32 1
  store i32* %incdec.ptr1639, i32** %charbuf, align 8
  store i32 47, i32* %740, align 4
  %741 = load i32, i32* %dim, align 4
  %742 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1640 = getelementptr inbounds i32, i32* %742, i32 1
  store i32* %incdec.ptr1640, i32** %charbuf, align 8
  store i32 %741, i32* %742, align 4
  %743 = load i32, i32* %M, align 4
  %add1641 = add nsw i32 %743, 4194048
  %744 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1642 = getelementptr inbounds i32, i32* %744, i32 1
  store i32* %incdec.ptr1642, i32** %charbuf, align 8
  store i32 %add1641, i32* %744, align 4
  %745 = load i32, i32* %L, align 4
  %add1643 = add nsw i32 %745, 4194048
  %746 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1644 = getelementptr inbounds i32, i32* %746, i32 1
  store i32* %incdec.ptr1644, i32** %charbuf, align 8
  store i32 %add1643, i32* %746, align 4
  %747 = load i32, i32* %size, align 4
  %748 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1645 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %748, i32 0, i32 3
  %iso_20221646 = bitcast %union.anon* %spec1645 to %struct.iso_2022_spec*
  %ctext_extended_segment_len1647 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221646, i32 0, i32 3
  store i32 %747, i32* %ctext_extended_segment_len1647, align 4
  br label %if.end.1668

if.else.1648:                                     ; preds = %do.end.1507
  %749 = load i32, i32* %c1, align 4
  %cmp1649 = icmp eq i32 %749, 71
  br i1 %cmp1649, label %if.then.1651, label %if.else.1666

if.then.1651:                                     ; preds = %if.else.1648
  %750 = load i32*, i32** %charbuf, align 8
  %add.ptr1652 = getelementptr inbounds i32, i32* %750, i64 3
  %751 = load i32*, i32** %charbuf_end, align 8
  %cmp1653 = icmp ugt i32* %add.ptr1652, %751
  br i1 %cmp1653, label %if.then.1655, label %if.end.1656

if.then.1655:                                     ; preds = %if.then.1651
  br label %break_loop

if.end.1656:                                      ; preds = %if.then.1651
  %752 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1657 = getelementptr inbounds i32, i32* %752, i32 1
  store i32* %incdec.ptr1657, i32** %charbuf, align 8
  store i32 27, i32* %752, align 4
  %753 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1658 = getelementptr inbounds i32, i32* %753, i32 1
  store i32* %incdec.ptr1658, i32** %charbuf, align 8
  store i32 37, i32* %753, align 4
  %754 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1659 = getelementptr inbounds i32, i32* %754, i32 1
  store i32* %incdec.ptr1659, i32** %charbuf, align 8
  store i32 71, i32* %754, align 4
  %755 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1660 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %755, i32 0, i32 3
  %iso_20221661 = bitcast %union.anon* %spec1660 to %struct.iso_2022_spec*
  %embedded_utf_81662 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221661, i32 0, i32 4
  %bf.load1663 = load i8, i8* %embedded_utf_81662, align 4
  %bf.clear1664 = and i8 %bf.load1663, -5
  %bf.set1665 = or i8 %bf.clear1664, 4
  store i8 %bf.set1665, i8* %embedded_utf_81662, align 4
  br label %if.end.1667

if.else.1666:                                     ; preds = %if.else.1648
  br label %invalid_code

if.end.1667:                                      ; preds = %if.end.1656
  br label %if.end.1668

if.end.1668:                                      ; preds = %if.end.1667, %if.end.1636
  br label %while.body

sw.default.1669:                                  ; preds = %label_escape_sequence
  %756 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1670 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %756, i32 0, i32 3
  %iso_20221671 = bitcast %union.anon* %spec1670 to %struct.iso_2022_spec*
  %flags1672 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221671, i32 0, i32 0
  %757 = load i32, i32* %flags1672, align 4
  %and1673 = and i32 %757, 64
  %tobool1674 = icmp ne i32 %and1673, 0
  br i1 %tobool1674, label %if.end.1676, label %if.then.1675

if.then.1675:                                     ; preds = %sw.default.1669
  br label %invalid_code

if.end.1676:                                      ; preds = %sw.default.1669
  %758 = load i32, i32* %c1, align 4
  %cmp1679 = icmp sge i32 %758, 40
  br i1 %cmp1679, label %land.lhs.true.1681, label %if.else.1720

land.lhs.true.1681:                               ; preds = %if.end.1676
  %759 = load i32, i32* %c1, align 4
  %cmp1682 = icmp sle i32 %759, 43
  br i1 %cmp1682, label %if.then.1684, label %if.else.1720

if.then.1684:                                     ; preds = %land.lhs.true.1681
  %760 = load i32, i32* %c1, align 4
  %sub1685 = sub nsw i32 %760, 40
  store i32 %sub1685, i32* %reg1677, align 4
  store i32 0, i32* %chars961678, align 4
  br label %do.body.1686

do.body.1686:                                     ; preds = %if.then.1684
  %761 = load i8*, i8** %src, align 8
  %762 = load i8*, i8** %src_end, align 8
  %cmp1687 = icmp eq i8* %761, %762
  br i1 %cmp1687, label %if.then.1689, label %if.end.1694

if.then.1689:                                     ; preds = %do.body.1686
  %763 = load i8*, i8** %src_base, align 8
  %764 = load i8*, i8** %src, align 8
  %cmp1690 = icmp ult i8* %763, %764
  br i1 %cmp1690, label %if.then.1692, label %if.end.1693

if.then.1692:                                     ; preds = %if.then.1689
  %765 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %765, i32 1)
  br label %if.end.1693

if.end.1693:                                      ; preds = %if.then.1692, %if.then.1689
  br label %no_more_source

if.end.1694:                                      ; preds = %do.body.1686
  %766 = load i8*, i8** %src, align 8
  %incdec.ptr1695 = getelementptr inbounds i8, i8* %766, i32 1
  store i8* %incdec.ptr1695, i8** %src, align 8
  %767 = load i8, i8* %766, align 1
  %conv1696 = zext i8 %767 to i32
  store i32 %conv1696, i32* %c1, align 4
  %768 = load i8, i8* %multibytep, align 1
  %tobool1697 = trunc i8 %768 to i1
  br i1 %tobool1697, label %land.lhs.true.1699, label %if.end.1717

land.lhs.true.1699:                               ; preds = %if.end.1694
  %769 = load i32, i32* %c1, align 4
  %and1700 = and i32 %769, 128
  %tobool1701 = icmp ne i32 %and1700, 0
  br i1 %tobool1701, label %if.then.1702, label %if.end.1717

if.then.1702:                                     ; preds = %land.lhs.true.1699
  %770 = load i32, i32* %c1, align 4
  %and1703 = and i32 %770, 254
  %cmp1704 = icmp eq i32 %and1703, 192
  br i1 %cmp1704, label %if.then.1706, label %if.else.1712

if.then.1706:                                     ; preds = %if.then.1702
  %771 = load i32, i32* %c1, align 4
  %and1707 = and i32 %771, 1
  %shl1708 = shl i32 %and1707, 6
  %772 = load i8*, i8** %src, align 8
  %incdec.ptr1709 = getelementptr inbounds i8, i8* %772, i32 1
  store i8* %incdec.ptr1709, i8** %src, align 8
  %773 = load i8, i8* %772, align 1
  %conv1710 = zext i8 %773 to i32
  %or1711 = or i32 %shl1708, %conv1710
  store i32 %or1711, i32* %c1, align 4
  br label %if.end.1716

if.else.1712:                                     ; preds = %if.then.1702
  %774 = load i8*, i8** %src, align 8
  %incdec.ptr1713 = getelementptr inbounds i8, i8* %774, i32 -1
  store i8* %incdec.ptr1713, i8** %src, align 8
  %775 = load i8*, i8** %src, align 8
  %call1714 = call i32 @string_char(i8* %775, i8** %src, i32* null)
  %sub1715 = sub nsw i32 0, %call1714
  store i32 %sub1715, i32* %c1, align 4
  %776 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %776, i32 3)
  br label %if.end.1716

if.end.1716:                                      ; preds = %if.else.1712, %if.then.1706
  br label %if.end.1717

if.end.1717:                                      ; preds = %if.end.1716, %land.lhs.true.1699, %if.end.1694
  %777 = load i64, i64* %consumed_chars, align 8
  %inc1718 = add nsw i64 %777, 1
  store i64 %inc1718, i64* %consumed_chars, align 8
  br label %do.end.1719

do.end.1719:                                      ; preds = %if.end.1717
  br label %if.end.1764

if.else.1720:                                     ; preds = %land.lhs.true.1681, %if.end.1676
  %778 = load i32, i32* %c1, align 4
  %cmp1721 = icmp sge i32 %778, 44
  br i1 %cmp1721, label %land.lhs.true.1723, label %if.else.1762

land.lhs.true.1723:                               ; preds = %if.else.1720
  %779 = load i32, i32* %c1, align 4
  %cmp1724 = icmp sle i32 %779, 47
  br i1 %cmp1724, label %if.then.1726, label %if.else.1762

if.then.1726:                                     ; preds = %land.lhs.true.1723
  %780 = load i32, i32* %c1, align 4
  %sub1727 = sub nsw i32 %780, 44
  store i32 %sub1727, i32* %reg1677, align 4
  store i32 1, i32* %chars961678, align 4
  br label %do.body.1728

do.body.1728:                                     ; preds = %if.then.1726
  %781 = load i8*, i8** %src, align 8
  %782 = load i8*, i8** %src_end, align 8
  %cmp1729 = icmp eq i8* %781, %782
  br i1 %cmp1729, label %if.then.1731, label %if.end.1736

if.then.1731:                                     ; preds = %do.body.1728
  %783 = load i8*, i8** %src_base, align 8
  %784 = load i8*, i8** %src, align 8
  %cmp1732 = icmp ult i8* %783, %784
  br i1 %cmp1732, label %if.then.1734, label %if.end.1735

if.then.1734:                                     ; preds = %if.then.1731
  %785 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %785, i32 1)
  br label %if.end.1735

if.end.1735:                                      ; preds = %if.then.1734, %if.then.1731
  br label %no_more_source

if.end.1736:                                      ; preds = %do.body.1728
  %786 = load i8*, i8** %src, align 8
  %incdec.ptr1737 = getelementptr inbounds i8, i8* %786, i32 1
  store i8* %incdec.ptr1737, i8** %src, align 8
  %787 = load i8, i8* %786, align 1
  %conv1738 = zext i8 %787 to i32
  store i32 %conv1738, i32* %c1, align 4
  %788 = load i8, i8* %multibytep, align 1
  %tobool1739 = trunc i8 %788 to i1
  br i1 %tobool1739, label %land.lhs.true.1741, label %if.end.1759

land.lhs.true.1741:                               ; preds = %if.end.1736
  %789 = load i32, i32* %c1, align 4
  %and1742 = and i32 %789, 128
  %tobool1743 = icmp ne i32 %and1742, 0
  br i1 %tobool1743, label %if.then.1744, label %if.end.1759

if.then.1744:                                     ; preds = %land.lhs.true.1741
  %790 = load i32, i32* %c1, align 4
  %and1745 = and i32 %790, 254
  %cmp1746 = icmp eq i32 %and1745, 192
  br i1 %cmp1746, label %if.then.1748, label %if.else.1754

if.then.1748:                                     ; preds = %if.then.1744
  %791 = load i32, i32* %c1, align 4
  %and1749 = and i32 %791, 1
  %shl1750 = shl i32 %and1749, 6
  %792 = load i8*, i8** %src, align 8
  %incdec.ptr1751 = getelementptr inbounds i8, i8* %792, i32 1
  store i8* %incdec.ptr1751, i8** %src, align 8
  %793 = load i8, i8* %792, align 1
  %conv1752 = zext i8 %793 to i32
  %or1753 = or i32 %shl1750, %conv1752
  store i32 %or1753, i32* %c1, align 4
  br label %if.end.1758

if.else.1754:                                     ; preds = %if.then.1744
  %794 = load i8*, i8** %src, align 8
  %incdec.ptr1755 = getelementptr inbounds i8, i8* %794, i32 -1
  store i8* %incdec.ptr1755, i8** %src, align 8
  %795 = load i8*, i8** %src, align 8
  %call1756 = call i32 @string_char(i8* %795, i8** %src, i32* null)
  %sub1757 = sub nsw i32 0, %call1756
  store i32 %sub1757, i32* %c1, align 4
  %796 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %796, i32 3)
  br label %if.end.1758

if.end.1758:                                      ; preds = %if.else.1754, %if.then.1748
  br label %if.end.1759

if.end.1759:                                      ; preds = %if.end.1758, %land.lhs.true.1741, %if.end.1736
  %797 = load i64, i64* %consumed_chars, align 8
  %inc1760 = add nsw i64 %797, 1
  store i64 %inc1760, i64* %consumed_chars, align 8
  br label %do.end.1761

do.end.1761:                                      ; preds = %if.end.1759
  br label %if.end.1763

if.else.1762:                                     ; preds = %land.lhs.true.1723, %if.else.1720
  br label %invalid_code

if.end.1763:                                      ; preds = %do.end.1761
  br label %if.end.1764

if.end.1764:                                      ; preds = %if.end.1763, %do.end.1719
  br label %do.body.1765

do.body.1765:                                     ; preds = %if.end.1764
  %798 = load i32, i32* %c1, align 4
  %cmp1768 = icmp slt i32 %798, 48
  br i1 %cmp1768, label %if.then.1791, label %lor.lhs.false.1770

lor.lhs.false.1770:                               ; preds = %do.body.1765
  %799 = load i32, i32* %c1, align 4
  %cmp1771 = icmp sge i32 %799, 128
  br i1 %cmp1771, label %if.then.1791, label %lor.lhs.false.1773

lor.lhs.false.1773:                               ; preds = %lor.lhs.false.1770
  %800 = load i32, i32* %c1, align 4
  %idxprom1774 = sext i32 %800 to i64
  %801 = load i32, i32* %chars961678, align 4
  %idxprom1775 = sext i32 %801 to i64
  %arrayidx1776 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* getelementptr inbounds ([3 x [2 x [128 x i32]]], [3 x [2 x [128 x i32]]]* @iso_charset_table, i32 0, i64 0), i32 0, i64 %idxprom1775
  %arrayidx1777 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx1776, i32 0, i64 %idxprom1774
  %802 = load i32, i32* %arrayidx1777, align 4
  store i32 %802, i32* %id1766, align 4
  %cmp1778 = icmp slt i32 %802, 0
  br i1 %cmp1778, label %if.then.1791, label %lor.lhs.false.1780

lor.lhs.false.1780:                               ; preds = %lor.lhs.false.1773
  %803 = load i32, i32* %id1766, align 4
  %804 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %max_charset_id1781 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %804, i32 0, i32 2
  %805 = load i32, i32* %max_charset_id1781, align 4
  %cmp1782 = icmp sle i32 %803, %805
  br i1 %cmp1782, label %land.lhs.true.1784, label %if.then.1791

land.lhs.true.1784:                               ; preds = %lor.lhs.false.1780
  %806 = load i32, i32* %id1766, align 4
  %idxprom1785 = sext i32 %806 to i64
  %807 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets1786 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %807, i32 0, i32 4
  %808 = load i8*, i8** %safe_charsets1786, align 8
  %arrayidx1787 = getelementptr inbounds i8, i8* %808, i64 %idxprom1785
  %809 = load i8, i8* %arrayidx1787, align 1
  %conv1788 = zext i8 %809 to i32
  %cmp1789 = icmp ne i32 %conv1788, 255
  br i1 %cmp1789, label %if.end.1797, label %if.then.1791

if.then.1791:                                     ; preds = %land.lhs.true.1784, %lor.lhs.false.1780, %lor.lhs.false.1773, %lor.lhs.false.1770, %do.body.1765
  %810 = load i32, i32* %reg1677, align 4
  %idxprom1792 = sext i32 %810 to i64
  %811 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1793 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %811, i32 0, i32 3
  %iso_20221794 = bitcast %union.anon* %spec1793 to %struct.iso_2022_spec*
  %current_designation1795 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221794, i32 0, i32 2
  %arrayidx1796 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1795, i32 0, i64 %idxprom1792
  store i32 -2, i32* %arrayidx1796, align 4
  store i32 -1, i32* %chars961678, align 4
  br label %do.end.1838

if.end.1797:                                      ; preds = %land.lhs.true.1784
  %812 = load i32, i32* %reg1677, align 4
  %idxprom1798 = sext i32 %812 to i64
  %813 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1799 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %813, i32 0, i32 3
  %iso_20221800 = bitcast %union.anon* %spec1799 to %struct.iso_2022_spec*
  %current_designation1801 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221800, i32 0, i32 2
  %arrayidx1802 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1801, i32 0, i64 %idxprom1798
  %814 = load i32, i32* %arrayidx1802, align 4
  store i32 %814, i32* %prev1767, align 4
  %815 = load i32, i32* %id1766, align 4
  %816 = load i32, i32* @charset_jisx0201_roman, align 4
  %cmp1803 = icmp eq i32 %815, %816
  br i1 %cmp1803, label %if.then.1805, label %if.else.1813

if.then.1805:                                     ; preds = %if.end.1797
  %817 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1806 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %817, i32 0, i32 3
  %iso_20221807 = bitcast %union.anon* %spec1806 to %struct.iso_2022_spec*
  %flags1808 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221807, i32 0, i32 0
  %818 = load i32, i32* %flags1808, align 4
  %and1809 = and i32 %818, 32768
  %tobool1810 = icmp ne i32 %and1809, 0
  br i1 %tobool1810, label %if.then.1811, label %if.end.1812

if.then.1811:                                     ; preds = %if.then.1805
  %819 = load i32, i32* @charset_ascii, align 4
  store i32 %819, i32* %id1766, align 4
  br label %if.end.1812

if.end.1812:                                      ; preds = %if.then.1811, %if.then.1805
  br label %if.end.1825

if.else.1813:                                     ; preds = %if.end.1797
  %820 = load i32, i32* %id1766, align 4
  %821 = load i32, i32* @charset_jisx0208_1978, align 4
  %cmp1814 = icmp eq i32 %820, %821
  br i1 %cmp1814, label %if.then.1816, label %if.end.1824

if.then.1816:                                     ; preds = %if.else.1813
  %822 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1817 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %822, i32 0, i32 3
  %iso_20221818 = bitcast %union.anon* %spec1817 to %struct.iso_2022_spec*
  %flags1819 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221818, i32 0, i32 0
  %823 = load i32, i32* %flags1819, align 4
  %and1820 = and i32 %823, 65536
  %tobool1821 = icmp ne i32 %and1820, 0
  br i1 %tobool1821, label %if.then.1822, label %if.end.1823

if.then.1822:                                     ; preds = %if.then.1816
  %824 = load i32, i32* @charset_jisx0208, align 4
  store i32 %824, i32* %id1766, align 4
  br label %if.end.1823

if.end.1823:                                      ; preds = %if.then.1822, %if.then.1816
  br label %if.end.1824

if.end.1824:                                      ; preds = %if.end.1823, %if.else.1813
  br label %if.end.1825

if.end.1825:                                      ; preds = %if.end.1824, %if.end.1812
  %825 = load i32, i32* %id1766, align 4
  %826 = load i32, i32* %reg1677, align 4
  %idxprom1826 = sext i32 %826 to i64
  %827 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1827 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %827, i32 0, i32 3
  %iso_20221828 = bitcast %union.anon* %spec1827 to %struct.iso_2022_spec*
  %current_designation1829 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221828, i32 0, i32 2
  %arrayidx1830 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1829, i32 0, i64 %idxprom1826
  store i32 %825, i32* %arrayidx1830, align 4
  %828 = load i32, i32* %prev1767, align 4
  %cmp1831 = icmp eq i32 %828, -2
  br i1 %cmp1831, label %land.lhs.true.1833, label %if.end.1837

land.lhs.true.1833:                               ; preds = %if.end.1825
  %829 = load i32, i32* %id1766, align 4
  %830 = load i32, i32* @charset_ascii, align 4
  %cmp1834 = icmp eq i32 %829, %830
  br i1 %cmp1834, label %if.then.1836, label %if.end.1837

if.then.1836:                                     ; preds = %land.lhs.true.1833
  store i32 -1, i32* %chars961678, align 4
  br label %if.end.1837

if.end.1837:                                      ; preds = %if.then.1836, %land.lhs.true.1833, %if.end.1825
  br label %do.end.1838

do.end.1838:                                      ; preds = %if.end.1837, %if.then.1791
  %831 = load i32, i32* %reg1677, align 4
  %cmp1839 = icmp eq i32 %831, 0
  br i1 %cmp1839, label %if.then.1841, label %if.else.1861

if.then.1841:                                     ; preds = %do.end.1838
  %832 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1842 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %832, i32 0, i32 3
  %iso_20221843 = bitcast %union.anon* %spec1842 to %struct.iso_2022_spec*
  %current_invocation1844 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221843, i32 0, i32 1
  %arrayidx1845 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1844, i32 0, i64 0
  %833 = load i32, i32* %arrayidx1845, align 4
  %cmp1846 = icmp slt i32 %833, 0
  br i1 %cmp1846, label %cond.true.1848, label %cond.false.1849

cond.true.1848:                                   ; preds = %if.then.1841
  br label %cond.end.1859

cond.false.1849:                                  ; preds = %if.then.1841
  %834 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1850 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %834, i32 0, i32 3
  %iso_20221851 = bitcast %union.anon* %spec1850 to %struct.iso_2022_spec*
  %current_invocation1852 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221851, i32 0, i32 1
  %arrayidx1853 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1852, i32 0, i64 0
  %835 = load i32, i32* %arrayidx1853, align 4
  %idxprom1854 = sext i32 %835 to i64
  %836 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1855 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %836, i32 0, i32 3
  %iso_20221856 = bitcast %union.anon* %spec1855 to %struct.iso_2022_spec*
  %current_designation1857 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221856, i32 0, i32 2
  %arrayidx1858 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1857, i32 0, i64 %idxprom1854
  %837 = load i32, i32* %arrayidx1858, align 4
  br label %cond.end.1859

cond.end.1859:                                    ; preds = %cond.false.1849, %cond.true.1848
  %cond1860 = phi i32 [ -1, %cond.true.1848 ], [ %837, %cond.false.1849 ]
  store i32 %cond1860, i32* %charset_id_0, align 4
  br label %if.end.1885

if.else.1861:                                     ; preds = %do.end.1838
  %838 = load i32, i32* %reg1677, align 4
  %cmp1862 = icmp eq i32 %838, 1
  br i1 %cmp1862, label %if.then.1864, label %if.end.1884

if.then.1864:                                     ; preds = %if.else.1861
  %839 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1865 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %839, i32 0, i32 3
  %iso_20221866 = bitcast %union.anon* %spec1865 to %struct.iso_2022_spec*
  %current_invocation1867 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221866, i32 0, i32 1
  %arrayidx1868 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1867, i32 0, i64 1
  %840 = load i32, i32* %arrayidx1868, align 4
  %cmp1869 = icmp slt i32 %840, 0
  br i1 %cmp1869, label %cond.true.1871, label %cond.false.1872

cond.true.1871:                                   ; preds = %if.then.1864
  br label %cond.end.1882

cond.false.1872:                                  ; preds = %if.then.1864
  %841 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1873 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %841, i32 0, i32 3
  %iso_20221874 = bitcast %union.anon* %spec1873 to %struct.iso_2022_spec*
  %current_invocation1875 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221874, i32 0, i32 1
  %arrayidx1876 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1875, i32 0, i64 1
  %842 = load i32, i32* %arrayidx1876, align 4
  %idxprom1877 = sext i32 %842 to i64
  %843 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1878 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %843, i32 0, i32 3
  %iso_20221879 = bitcast %union.anon* %spec1878 to %struct.iso_2022_spec*
  %current_designation1880 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221879, i32 0, i32 2
  %arrayidx1881 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1880, i32 0, i64 %idxprom1877
  %844 = load i32, i32* %arrayidx1881, align 4
  br label %cond.end.1882

cond.end.1882:                                    ; preds = %cond.false.1872, %cond.true.1871
  %cond1883 = phi i32 [ -1, %cond.true.1871 ], [ %844, %cond.false.1872 ]
  store i32 %cond1883, i32* %charset_id_1, align 4
  br label %if.end.1884

if.end.1884:                                      ; preds = %cond.end.1882, %if.else.1861
  br label %if.end.1885

if.end.1885:                                      ; preds = %if.end.1884, %cond.end.1859
  %845 = load i32, i32* %chars961678, align 4
  %cmp1886 = icmp slt i32 %845, 0
  br i1 %cmp1886, label %if.then.1888, label %if.end.1889

if.then.1888:                                     ; preds = %if.end.1885
  br label %invalid_code

if.end.1889:                                      ; preds = %if.end.1885
  br label %while.body

sw.epilog.1890:                                   ; preds = %if.end.1154, %if.end.1064
  br label %sw.epilog.1892

sw.default.1891:                                  ; preds = %if.end.288
  call void @emacs_abort() #6
  unreachable

sw.epilog.1892:                                   ; preds = %sw.epilog.1890, %do.end.393, %if.end.339, %if.end.316, %if.end.306
  %846 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state1893 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %846, i32 0, i32 0
  %847 = load i32, i32* %state1893, align 4
  %cmp1894 = icmp eq i32 %847, 0
  br i1 %cmp1894, label %land.lhs.true.1896, label %if.end.1924

land.lhs.true.1896:                               ; preds = %sw.epilog.1892
  %848 = load %struct.charset*, %struct.charset** %charset, align 8
  %id1897 = getelementptr inbounds %struct.charset, %struct.charset* %848, i32 0, i32 0
  %849 = load i32, i32* %id1897, align 4
  %850 = load i32, i32* @charset_ascii, align 4
  %cmp1898 = icmp ne i32 %849, %850
  br i1 %cmp1898, label %land.lhs.true.1900, label %if.end.1924

land.lhs.true.1900:                               ; preds = %land.lhs.true.1896
  %851 = load i32, i32* %last_id, align 4
  %852 = load %struct.charset*, %struct.charset** %charset, align 8
  %id1901 = getelementptr inbounds %struct.charset, %struct.charset* %852, i32 0, i32 0
  %853 = load i32, i32* %id1901, align 4
  %cmp1902 = icmp ne i32 %851, %853
  br i1 %cmp1902, label %if.then.1904, label %if.end.1924

if.then.1904:                                     ; preds = %land.lhs.true.1900
  %854 = load i32, i32* %last_id, align 4
  %855 = load i32, i32* @charset_ascii, align 4
  %cmp1905 = icmp ne i32 %854, %855
  br i1 %cmp1905, label %if.then.1907, label %if.end.1922

if.then.1907:                                     ; preds = %if.then.1904
  br label %do.body.1908

do.body.1908:                                     ; preds = %if.then.1907
  br label %do.body.1909

do.body.1909:                                     ; preds = %do.body.1908
  %856 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1910 = getelementptr inbounds i32, i32* %856, i32 1
  store i32* %incdec.ptr1910, i32** %charbuf, align 8
  store i32 -4, i32* %856, align 4
  %857 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1911 = getelementptr inbounds i32, i32* %857, i32 1
  store i32* %incdec.ptr1911, i32** %charbuf, align 8
  store i32 3, i32* %857, align 4
  %858 = load i64, i64* %char_offset, align 8
  %859 = load i64, i64* %last_offset, align 8
  %sub1912 = sub nsw i64 %858, %859
  %conv1913 = trunc i64 %sub1912 to i32
  %860 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1914 = getelementptr inbounds i32, i32* %860, i32 1
  store i32* %incdec.ptr1914, i32** %charbuf, align 8
  store i32 %conv1913, i32* %860, align 4
  %861 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated1915 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %861, i32 0, i32 1
  %bf.load1916 = load i32, i32* %annotated1915, align 8
  %bf.clear1917 = and i32 %bf.load1916, -8388609
  %bf.set1918 = or i32 %bf.clear1917, 8388608
  store i32 %bf.set1918, i32* %annotated1915, align 8
  br label %do.end.1919

do.end.1919:                                      ; preds = %do.body.1909
  %862 = load i32, i32* %last_id, align 4
  %863 = load i32*, i32** %charbuf, align 8
  %incdec.ptr1920 = getelementptr inbounds i32, i32* %863, i32 1
  store i32* %incdec.ptr1920, i32** %charbuf, align 8
  store i32 %862, i32* %863, align 4
  br label %do.end.1921

do.end.1921:                                      ; preds = %do.end.1919
  br label %if.end.1922

if.end.1922:                                      ; preds = %do.end.1921, %if.then.1904
  %864 = load %struct.charset*, %struct.charset** %charset, align 8
  %id1923 = getelementptr inbounds %struct.charset, %struct.charset* %864, i32 0, i32 0
  %865 = load i32, i32* %id1923, align 4
  store i32 %865, i32* %last_id, align 4
  %866 = load i64, i64* %char_offset, align 8
  store i64 %866, i64* %last_offset, align 8
  br label %if.end.1924

if.end.1924:                                      ; preds = %if.end.1922, %land.lhs.true.1900, %land.lhs.true.1896, %sw.epilog.1892
  %867 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %867, i32 0, i32 2
  %868 = load i32, i32* %dimension, align 4
  %cmp1925 = icmp sgt i32 %868, 1
  br i1 %cmp1925, label %if.then.1927, label %if.end.2038

if.then.1927:                                     ; preds = %if.end.1924
  br label %do.body.1928

do.body.1928:                                     ; preds = %if.then.1927
  %869 = load i8*, i8** %src, align 8
  %870 = load i8*, i8** %src_end, align 8
  %cmp1929 = icmp eq i8* %869, %870
  br i1 %cmp1929, label %if.then.1931, label %if.end.1936

if.then.1931:                                     ; preds = %do.body.1928
  %871 = load i8*, i8** %src_base, align 8
  %872 = load i8*, i8** %src, align 8
  %cmp1932 = icmp ult i8* %871, %872
  br i1 %cmp1932, label %if.then.1934, label %if.end.1935

if.then.1934:                                     ; preds = %if.then.1931
  %873 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %873, i32 1)
  br label %if.end.1935

if.end.1935:                                      ; preds = %if.then.1934, %if.then.1931
  br label %no_more_source

if.end.1936:                                      ; preds = %do.body.1928
  %874 = load i8*, i8** %src, align 8
  %incdec.ptr1937 = getelementptr inbounds i8, i8* %874, i32 1
  store i8* %incdec.ptr1937, i8** %src, align 8
  %875 = load i8, i8* %874, align 1
  %conv1938 = zext i8 %875 to i32
  store i32 %conv1938, i32* %c2, align 4
  %876 = load i8, i8* %multibytep, align 1
  %tobool1939 = trunc i8 %876 to i1
  br i1 %tobool1939, label %land.lhs.true.1941, label %if.end.1959

land.lhs.true.1941:                               ; preds = %if.end.1936
  %877 = load i32, i32* %c2, align 4
  %and1942 = and i32 %877, 128
  %tobool1943 = icmp ne i32 %and1942, 0
  br i1 %tobool1943, label %if.then.1944, label %if.end.1959

if.then.1944:                                     ; preds = %land.lhs.true.1941
  %878 = load i32, i32* %c2, align 4
  %and1945 = and i32 %878, 254
  %cmp1946 = icmp eq i32 %and1945, 192
  br i1 %cmp1946, label %if.then.1948, label %if.else.1954

if.then.1948:                                     ; preds = %if.then.1944
  %879 = load i32, i32* %c2, align 4
  %and1949 = and i32 %879, 1
  %shl1950 = shl i32 %and1949, 6
  %880 = load i8*, i8** %src, align 8
  %incdec.ptr1951 = getelementptr inbounds i8, i8* %880, i32 1
  store i8* %incdec.ptr1951, i8** %src, align 8
  %881 = load i8, i8* %880, align 1
  %conv1952 = zext i8 %881 to i32
  %or1953 = or i32 %shl1950, %conv1952
  store i32 %or1953, i32* %c2, align 4
  br label %if.end.1958

if.else.1954:                                     ; preds = %if.then.1944
  %882 = load i8*, i8** %src, align 8
  %incdec.ptr1955 = getelementptr inbounds i8, i8* %882, i32 -1
  store i8* %incdec.ptr1955, i8** %src, align 8
  %883 = load i8*, i8** %src, align 8
  %call1956 = call i32 @string_char(i8* %883, i8** %src, i32* null)
  %sub1957 = sub nsw i32 0, %call1956
  store i32 %sub1957, i32* %c2, align 4
  %884 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %884, i32 3)
  br label %if.end.1958

if.end.1958:                                      ; preds = %if.else.1954, %if.then.1948
  br label %if.end.1959

if.end.1959:                                      ; preds = %if.end.1958, %land.lhs.true.1941, %if.end.1936
  %885 = load i64, i64* %consumed_chars, align 8
  %inc1960 = add nsw i64 %885, 1
  store i64 %inc1960, i64* %consumed_chars, align 8
  br label %do.end.1961

do.end.1961:                                      ; preds = %if.end.1959
  %886 = load i32, i32* %c2, align 4
  %cmp1962 = icmp slt i32 %886, 32
  br i1 %cmp1962, label %if.then.1975, label %lor.lhs.false.1964

lor.lhs.false.1964:                               ; preds = %do.end.1961
  %887 = load i32, i32* %c2, align 4
  %cmp1965 = icmp sge i32 %887, 128
  br i1 %cmp1965, label %land.lhs.true.1967, label %lor.lhs.false.1970

land.lhs.true.1967:                               ; preds = %lor.lhs.false.1964
  %888 = load i32, i32* %c2, align 4
  %cmp1968 = icmp slt i32 %888, 160
  br i1 %cmp1968, label %if.then.1975, label %lor.lhs.false.1970

lor.lhs.false.1970:                               ; preds = %land.lhs.true.1967, %lor.lhs.false.1964
  %889 = load i32, i32* %c1, align 4
  %and1971 = and i32 %889, 128
  %890 = load i32, i32* %c2, align 4
  %and1972 = and i32 %890, 128
  %cmp1973 = icmp ne i32 %and1971, %and1972
  br i1 %cmp1973, label %if.then.1975, label %if.end.1976

if.then.1975:                                     ; preds = %lor.lhs.false.1970, %land.lhs.true.1967, %do.end.1961
  br label %invalid_code

if.end.1976:                                      ; preds = %lor.lhs.false.1970
  %891 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension1977 = getelementptr inbounds %struct.charset, %struct.charset* %891, i32 0, i32 2
  %892 = load i32, i32* %dimension1977, align 4
  %cmp1978 = icmp eq i32 %892, 2
  br i1 %cmp1978, label %if.then.1980, label %if.else.1983

if.then.1980:                                     ; preds = %if.end.1976
  %893 = load i32, i32* %c1, align 4
  %shl1981 = shl i32 %893, 8
  %894 = load i32, i32* %c2, align 4
  %or1982 = or i32 %shl1981, %894
  store i32 %or1982, i32* %c1, align 4
  br label %if.end.2037

if.else.1983:                                     ; preds = %if.end.1976
  br label %do.body.1984

do.body.1984:                                     ; preds = %if.else.1983
  %895 = load i8*, i8** %src, align 8
  %896 = load i8*, i8** %src_end, align 8
  %cmp1985 = icmp eq i8* %895, %896
  br i1 %cmp1985, label %if.then.1987, label %if.end.1992

if.then.1987:                                     ; preds = %do.body.1984
  %897 = load i8*, i8** %src_base, align 8
  %898 = load i8*, i8** %src, align 8
  %cmp1988 = icmp ult i8* %897, %898
  br i1 %cmp1988, label %if.then.1990, label %if.end.1991

if.then.1990:                                     ; preds = %if.then.1987
  %899 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %899, i32 1)
  br label %if.end.1991

if.end.1991:                                      ; preds = %if.then.1990, %if.then.1987
  br label %no_more_source

if.end.1992:                                      ; preds = %do.body.1984
  %900 = load i8*, i8** %src, align 8
  %incdec.ptr1993 = getelementptr inbounds i8, i8* %900, i32 1
  store i8* %incdec.ptr1993, i8** %src, align 8
  %901 = load i8, i8* %900, align 1
  %conv1994 = zext i8 %901 to i32
  store i32 %conv1994, i32* %c3, align 4
  %902 = load i8, i8* %multibytep, align 1
  %tobool1995 = trunc i8 %902 to i1
  br i1 %tobool1995, label %land.lhs.true.1997, label %if.end.2015

land.lhs.true.1997:                               ; preds = %if.end.1992
  %903 = load i32, i32* %c3, align 4
  %and1998 = and i32 %903, 128
  %tobool1999 = icmp ne i32 %and1998, 0
  br i1 %tobool1999, label %if.then.2000, label %if.end.2015

if.then.2000:                                     ; preds = %land.lhs.true.1997
  %904 = load i32, i32* %c3, align 4
  %and2001 = and i32 %904, 254
  %cmp2002 = icmp eq i32 %and2001, 192
  br i1 %cmp2002, label %if.then.2004, label %if.else.2010

if.then.2004:                                     ; preds = %if.then.2000
  %905 = load i32, i32* %c3, align 4
  %and2005 = and i32 %905, 1
  %shl2006 = shl i32 %and2005, 6
  %906 = load i8*, i8** %src, align 8
  %incdec.ptr2007 = getelementptr inbounds i8, i8* %906, i32 1
  store i8* %incdec.ptr2007, i8** %src, align 8
  %907 = load i8, i8* %906, align 1
  %conv2008 = zext i8 %907 to i32
  %or2009 = or i32 %shl2006, %conv2008
  store i32 %or2009, i32* %c3, align 4
  br label %if.end.2014

if.else.2010:                                     ; preds = %if.then.2000
  %908 = load i8*, i8** %src, align 8
  %incdec.ptr2011 = getelementptr inbounds i8, i8* %908, i32 -1
  store i8* %incdec.ptr2011, i8** %src, align 8
  %909 = load i8*, i8** %src, align 8
  %call2012 = call i32 @string_char(i8* %909, i8** %src, i32* null)
  %sub2013 = sub nsw i32 0, %call2012
  store i32 %sub2013, i32* %c3, align 4
  %910 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %910, i32 3)
  br label %if.end.2014

if.end.2014:                                      ; preds = %if.else.2010, %if.then.2004
  br label %if.end.2015

if.end.2015:                                      ; preds = %if.end.2014, %land.lhs.true.1997, %if.end.1992
  %911 = load i64, i64* %consumed_chars, align 8
  %inc2016 = add nsw i64 %911, 1
  store i64 %inc2016, i64* %consumed_chars, align 8
  br label %do.end.2017

do.end.2017:                                      ; preds = %if.end.2015
  %912 = load i32, i32* %c3, align 4
  %cmp2018 = icmp slt i32 %912, 32
  br i1 %cmp2018, label %if.then.2031, label %lor.lhs.false.2020

lor.lhs.false.2020:                               ; preds = %do.end.2017
  %913 = load i32, i32* %c3, align 4
  %cmp2021 = icmp sge i32 %913, 128
  br i1 %cmp2021, label %land.lhs.true.2023, label %lor.lhs.false.2026

land.lhs.true.2023:                               ; preds = %lor.lhs.false.2020
  %914 = load i32, i32* %c3, align 4
  %cmp2024 = icmp slt i32 %914, 160
  br i1 %cmp2024, label %if.then.2031, label %lor.lhs.false.2026

lor.lhs.false.2026:                               ; preds = %land.lhs.true.2023, %lor.lhs.false.2020
  %915 = load i32, i32* %c1, align 4
  %and2027 = and i32 %915, 128
  %916 = load i32, i32* %c3, align 4
  %and2028 = and i32 %916, 128
  %cmp2029 = icmp ne i32 %and2027, %and2028
  br i1 %cmp2029, label %if.then.2031, label %if.end.2032

if.then.2031:                                     ; preds = %lor.lhs.false.2026, %land.lhs.true.2023, %do.end.2017
  br label %invalid_code

if.end.2032:                                      ; preds = %lor.lhs.false.2026
  %917 = load i32, i32* %c1, align 4
  %shl2033 = shl i32 %917, 16
  %918 = load i32, i32* %c2, align 4
  %shl2034 = shl i32 %918, 8
  %or2035 = or i32 %shl2033, %shl2034
  %919 = load i32, i32* %c2, align 4
  %or2036 = or i32 %or2035, %919
  store i32 %or2036, i32* %c1, align 4
  br label %if.end.2037

if.end.2037:                                      ; preds = %if.end.2032, %if.then.1980
  br label %if.end.2038

if.end.2038:                                      ; preds = %if.end.2037, %if.end.1924
  %920 = load i32, i32* %c1, align 4
  %and2039 = and i32 %920, 8355711
  store i32 %and2039, i32* %c1, align 4
  br label %do.body.2040

do.body.2040:                                     ; preds = %if.end.2038
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.2041, label %cond.false.2045

cond.true.2041:                                   ; preds = %do.body.2040
  %921 = load i32, i32* %c1, align 4
  %add2042 = add i32 %921, 0
  %cmp2043 = icmp ult i32 %add2042, 128
  br i1 %cmp2043, label %land.lhs.true.2050, label %cond.false.2058

cond.false.2045:                                  ; preds = %do.body.2040
  %922 = load i32, i32* %c1, align 4
  %conv2046 = sext i32 %922 to i64
  %add2047 = add i64 %conv2046, 0
  %cmp2048 = icmp ult i64 %add2047, 128
  br i1 %cmp2048, label %land.lhs.true.2050, label %cond.false.2058

land.lhs.true.2050:                               ; preds = %cond.false.2045, %cond.true.2041
  %923 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %923, i32 0, i32 5
  %bf.load2051 = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr2052 = lshr i8 %bf.load2051, 2
  %bf.clear2053 = and i8 %bf.lshr2052, 1
  %bf.cast2054 = trunc i8 %bf.clear2053 to i1
  br i1 %bf.cast2054, label %cond.true.2056, label %cond.false.2058

cond.true.2056:                                   ; preds = %land.lhs.true.2050
  %924 = load i32, i32* %c1, align 4
  %conv2057 = sext i32 %924 to i64
  br label %cond.end.2133

cond.false.2058:                                  ; preds = %land.lhs.true.2050, %cond.false.2045, %cond.true.2041
  %925 = load i32, i32* %c1, align 4
  %926 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %926, i32 0, i32 10
  %927 = load i32, i32* %min_code, align 4
  %cmp2059 = icmp ult i32 %925, %927
  br i1 %cmp2059, label %cond.true.2064, label %lor.lhs.false.2061

lor.lhs.false.2061:                               ; preds = %cond.false.2058
  %928 = load i32, i32* %c1, align 4
  %929 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_code = getelementptr inbounds %struct.charset, %struct.charset* %929, i32 0, i32 11
  %930 = load i32, i32* %max_code, align 4
  %cmp2062 = icmp ugt i32 %928, %930
  br i1 %cmp2062, label %cond.true.2064, label %cond.false.2065

cond.true.2064:                                   ; preds = %lor.lhs.false.2061, %cond.false.2058
  br label %cond.end.2131

cond.false.2065:                                  ; preds = %lor.lhs.false.2061
  %931 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %931, i32 0, i32 5
  %bf.load2066 = load i8, i8* %unified_p, align 8
  %bf.lshr2067 = lshr i8 %bf.load2066, 5
  %bf.clear2068 = and i8 %bf.lshr2067, 1
  %bf.cast2069 = trunc i8 %bf.clear2068 to i1
  br i1 %bf.cast2069, label %cond.true.2071, label %cond.false.2074

cond.true.2071:                                   ; preds = %cond.false.2065
  %932 = load %struct.charset*, %struct.charset** %charset, align 8
  %933 = load i32, i32* %c1, align 4
  %call2072 = call i32 @decode_char(%struct.charset* %932, i32 %933)
  %conv2073 = sext i32 %call2072 to i64
  br label %cond.end.2129

cond.false.2074:                                  ; preds = %cond.false.2065
  %934 = load %struct.charset*, %struct.charset** %charset, align 8
  %method2075 = getelementptr inbounds %struct.charset, %struct.charset* %934, i32 0, i32 9
  %935 = load i32, i32* %method2075, align 4
  %cmp2076 = icmp eq i32 %935, 0
  br i1 %cmp2076, label %cond.true.2078, label %cond.false.2092

cond.true.2078:                                   ; preds = %cond.false.2074
  %936 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %936, i32 0, i32 5
  %bf.load2079 = load i8, i8* %code_linear_p, align 8
  %bf.clear2080 = and i8 %bf.load2079, 1
  %bf.cast2081 = trunc i8 %bf.clear2080 to i1
  br i1 %bf.cast2081, label %cond.true.2083, label %cond.false.2087

cond.true.2083:                                   ; preds = %cond.true.2078
  %937 = load i32, i32* %c1, align 4
  %938 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code2084 = getelementptr inbounds %struct.charset, %struct.charset* %938, i32 0, i32 10
  %939 = load i32, i32* %min_code2084, align 4
  %sub2085 = sub i32 %937, %939
  %940 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %940, i32 0, i32 17
  %941 = load i32, i32* %code_offset, align 4
  %add2086 = add nsw i32 %sub2085, %941
  br label %cond.end.2089

cond.false.2087:                                  ; preds = %cond.true.2078
  %942 = load %struct.charset*, %struct.charset** %charset, align 8
  %943 = load i32, i32* %c1, align 4
  %call2088 = call i32 @decode_char(%struct.charset* %942, i32 %943)
  br label %cond.end.2089

cond.end.2089:                                    ; preds = %cond.false.2087, %cond.true.2083
  %cond2090 = phi i32 [ %add2086, %cond.true.2083 ], [ %call2088, %cond.false.2087 ]
  %conv2091 = sext i32 %cond2090 to i64
  br label %cond.end.2127

cond.false.2092:                                  ; preds = %cond.false.2074
  %944 = load %struct.charset*, %struct.charset** %charset, align 8
  %method2093 = getelementptr inbounds %struct.charset, %struct.charset* %944, i32 0, i32 9
  %945 = load i32, i32* %method2093, align 4
  %cmp2094 = icmp eq i32 %945, 1
  br i1 %cmp2094, label %cond.true.2096, label %cond.false.2122

cond.true.2096:                                   ; preds = %cond.false.2092
  %946 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p2097 = getelementptr inbounds %struct.charset, %struct.charset* %946, i32 0, i32 5
  %bf.load2098 = load i8, i8* %code_linear_p2097, align 8
  %bf.clear2099 = and i8 %bf.load2098, 1
  %bf.cast2100 = trunc i8 %bf.clear2099 to i1
  br i1 %bf.cast2100, label %land.lhs.true.2102, label %cond.false.2117

land.lhs.true.2102:                               ; preds = %cond.true.2096
  %947 = load i64, i64* @Vcharset_hash_table, align 8
  %call2103 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %947)
  %948 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %948, i32 0, i32 1
  %949 = load i64, i64* %hash_index, align 8
  %call2104 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call2103, i64 %949)
  %call2105 = call i64 @AREF(i64 %call2104, i64 4)
  %call2106 = call zeroext i1 @VECTORP(i64 %call2105)
  br i1 %call2106, label %cond.true.2108, label %cond.false.2117

cond.true.2108:                                   ; preds = %land.lhs.true.2102
  %950 = load i64, i64* @Vcharset_hash_table, align 8
  %call2109 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %950)
  %951 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index2110 = getelementptr inbounds %struct.charset, %struct.charset* %951, i32 0, i32 1
  %952 = load i64, i64* %hash_index2110, align 8
  %call2111 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call2109, i64 %952)
  %call2112 = call i64 @AREF(i64 %call2111, i64 4)
  %953 = load i32, i32* %c1, align 4
  %954 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code2113 = getelementptr inbounds %struct.charset, %struct.charset* %954, i32 0, i32 10
  %955 = load i32, i32* %min_code2113, align 4
  %sub2114 = sub i32 %953, %955
  %conv2115 = zext i32 %sub2114 to i64
  %call2116 = call i64 @AREF(i64 %call2112, i64 %conv2115)
  %shr = ashr i64 %call2116, 2
  br label %cond.end.2120

cond.false.2117:                                  ; preds = %land.lhs.true.2102, %cond.true.2096
  %956 = load %struct.charset*, %struct.charset** %charset, align 8
  %957 = load i32, i32* %c1, align 4
  %call2118 = call i32 @decode_char(%struct.charset* %956, i32 %957)
  %conv2119 = sext i32 %call2118 to i64
  br label %cond.end.2120

cond.end.2120:                                    ; preds = %cond.false.2117, %cond.true.2108
  %cond2121 = phi i64 [ %shr, %cond.true.2108 ], [ %conv2119, %cond.false.2117 ]
  br label %cond.end.2125

cond.false.2122:                                  ; preds = %cond.false.2092
  %958 = load %struct.charset*, %struct.charset** %charset, align 8
  %959 = load i32, i32* %c1, align 4
  %call2123 = call i32 @decode_char(%struct.charset* %958, i32 %959)
  %conv2124 = sext i32 %call2123 to i64
  br label %cond.end.2125

cond.end.2125:                                    ; preds = %cond.false.2122, %cond.end.2120
  %cond2126 = phi i64 [ %cond2121, %cond.end.2120 ], [ %conv2124, %cond.false.2122 ]
  br label %cond.end.2127

cond.end.2127:                                    ; preds = %cond.end.2125, %cond.end.2089
  %cond2128 = phi i64 [ %conv2091, %cond.end.2089 ], [ %cond2126, %cond.end.2125 ]
  br label %cond.end.2129

cond.end.2129:                                    ; preds = %cond.end.2127, %cond.true.2071
  %cond2130 = phi i64 [ %conv2073, %cond.true.2071 ], [ %cond2128, %cond.end.2127 ]
  br label %cond.end.2131

cond.end.2131:                                    ; preds = %cond.end.2129, %cond.true.2064
  %cond2132 = phi i64 [ -1, %cond.true.2064 ], [ %cond2130, %cond.end.2129 ]
  br label %cond.end.2133

cond.end.2133:                                    ; preds = %cond.end.2131, %cond.true.2056
  %cond2134 = phi i64 [ %conv2057, %cond.true.2056 ], [ %cond2132, %cond.end.2131 ]
  %conv2135 = trunc i64 %cond2134 to i32
  store i32 %conv2135, i32* %c, align 4
  %960 = load i8, i8* @charset_map_loaded, align 1
  %tobool2136 = trunc i8 %960 to i1
  br i1 %tobool2136, label %land.lhs.true.2138, label %if.end.2145

land.lhs.true.2138:                               ; preds = %cond.end.2133
  %961 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call2139 = call i64 @coding_change_source(%struct.coding_system* %961)
  store i64 %call2139, i64* %offset, align 8
  %tobool2140 = icmp ne i64 %call2139, 0
  br i1 %tobool2140, label %if.then.2141, label %if.end.2145

if.then.2141:                                     ; preds = %land.lhs.true.2138
  %962 = load i64, i64* %offset, align 8
  %963 = load i8*, i8** %src, align 8
  %add.ptr2142 = getelementptr inbounds i8, i8* %963, i64 %962
  store i8* %add.ptr2142, i8** %src, align 8
  %964 = load i64, i64* %offset, align 8
  %965 = load i8*, i8** %src_base, align 8
  %add.ptr2143 = getelementptr inbounds i8, i8* %965, i64 %964
  store i8* %add.ptr2143, i8** %src_base, align 8
  %966 = load i64, i64* %offset, align 8
  %967 = load i8*, i8** %src_end, align 8
  %add.ptr2144 = getelementptr inbounds i8, i8* %967, i64 %966
  store i8* %add.ptr2144, i8** %src_end, align 8
  br label %if.end.2145

if.end.2145:                                      ; preds = %if.then.2141, %land.lhs.true.2138, %cond.end.2133
  br label %do.end.2146

do.end.2146:                                      ; preds = %if.end.2145
  %968 = load i32, i32* %c, align 4
  %cmp2147 = icmp slt i32 %968, 0
  br i1 %cmp2147, label %if.then.2149, label %if.else.2186

if.then.2149:                                     ; preds = %do.end.2146
  br label %do.body.2150

do.body.2150:                                     ; preds = %if.then.2149
  %969 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2151 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %969, i32 0, i32 0
  %970 = load i32, i32* %state2151, align 4
  %cmp2152 = icmp ne i32 %970, 0
  br i1 %cmp2152, label %if.then.2154, label %if.end.2158

if.then.2154:                                     ; preds = %do.body.2150
  %971 = load i32*, i32** %charbuf, align 8
  %972 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call2155 = call i32 @finish_composition(i32* %971, %struct.composition_status* %972)
  %conv2156 = sext i32 %call2155 to i64
  %973 = load i64, i64* %char_offset, align 8
  %add2157 = add nsw i64 %973, %conv2156
  store i64 %add2157, i64* %char_offset, align 8
  br label %if.end.2158

if.end.2158:                                      ; preds = %if.then.2154, %do.body.2150
  br label %do.end.2159

do.end.2159:                                      ; preds = %if.end.2158
  br label %for.cond.2160

for.cond.2160:                                    ; preds = %for.inc.2182, %do.end.2159
  %974 = load i8*, i8** %src_base, align 8
  %975 = load i8*, i8** %src, align 8
  %cmp2161 = icmp ult i8* %974, %975
  br i1 %cmp2161, label %for.body.2163, label %for.end.2185

for.body.2163:                                    ; preds = %for.cond.2160
  br i1 true, label %cond.true.2164, label %cond.false.2169

cond.true.2164:                                   ; preds = %for.body.2163
  %976 = load i8*, i8** %src_base, align 8
  %977 = load i8, i8* %976, align 1
  %conv2165 = zext i8 %977 to i32
  %add2166 = add i32 %conv2165, 0
  %cmp2167 = icmp ult i32 %add2166, 128
  br i1 %cmp2167, label %if.then.2174, label %if.else.2177

cond.false.2169:                                  ; preds = %for.body.2163
  %978 = load i8*, i8** %src_base, align 8
  %979 = load i8, i8* %978, align 1
  %conv2170 = zext i8 %979 to i64
  %add2171 = add i64 %conv2170, 0
  %cmp2172 = icmp ult i64 %add2171, 128
  br i1 %cmp2172, label %if.then.2174, label %if.else.2177

if.then.2174:                                     ; preds = %cond.false.2169, %cond.true.2164
  %980 = load i8*, i8** %src_base, align 8
  %981 = load i8, i8* %980, align 1
  %conv2175 = zext i8 %981 to i32
  %982 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2176 = getelementptr inbounds i32, i32* %982, i32 1
  store i32* %incdec.ptr2176, i32** %charbuf, align 8
  store i32 %conv2175, i32* %982, align 4
  br label %if.end.2181

if.else.2177:                                     ; preds = %cond.false.2169, %cond.true.2164
  %983 = load i8*, i8** %src_base, align 8
  %984 = load i8, i8* %983, align 1
  %conv2178 = zext i8 %984 to i32
  %add2179 = add nsw i32 %conv2178, 4194048
  %985 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2180 = getelementptr inbounds i32, i32* %985, i32 1
  store i32* %incdec.ptr2180, i32** %charbuf, align 8
  store i32 %add2179, i32* %985, align 4
  br label %if.end.2181

if.end.2181:                                      ; preds = %if.else.2177, %if.then.2174
  br label %for.inc.2182

for.inc.2182:                                     ; preds = %if.end.2181
  %986 = load i8*, i8** %src_base, align 8
  %incdec.ptr2183 = getelementptr inbounds i8, i8* %986, i32 1
  store i8* %incdec.ptr2183, i8** %src_base, align 8
  %987 = load i64, i64* %char_offset, align 8
  %inc2184 = add nsw i64 %987, 1
  store i64 %inc2184, i64* %char_offset, align 8
  br label %for.cond.2160

for.end.2185:                                     ; preds = %for.cond.2160
  br label %if.end.2251

if.else.2186:                                     ; preds = %do.end.2146
  %988 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2187 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %988, i32 0, i32 0
  %989 = load i32, i32* %state2187, align 4
  %cmp2188 = icmp eq i32 %989, 0
  br i1 %cmp2188, label %if.then.2190, label %if.else.2193

if.then.2190:                                     ; preds = %if.else.2186
  %990 = load i32, i32* %c, align 4
  %991 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2191 = getelementptr inbounds i32, i32* %991, i32 1
  store i32* %incdec.ptr2191, i32** %charbuf, align 8
  store i32 %990, i32* %991, align 4
  %992 = load i64, i64* %char_offset, align 8
  %inc2192 = add nsw i64 %992, 1
  store i64 %inc2192, i64* %char_offset, align 8
  br label %if.end.2250

if.else.2193:                                     ; preds = %if.else.2186
  %993 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2194 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %993, i32 0, i32 0
  %994 = load i32, i32* %state2194, align 4
  %cmp2195 = icmp eq i32 %994, 1
  br i1 %cmp2195, label %cond.true.2197, label %cond.false.2199

cond.true.2197:                                   ; preds = %if.else.2193
  %995 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars2198 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %995, i32 0, i32 4
  %996 = load i32, i32* %nchars2198, align 4
  br label %cond.end.2201

cond.false.2199:                                  ; preds = %if.else.2193
  %997 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps2200 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %997, i32 0, i32 5
  %998 = load i32, i32* %ncomps2200, align 4
  br label %cond.end.2201

cond.end.2201:                                    ; preds = %cond.false.2199, %cond.true.2197
  %cond2202 = phi i32 [ %996, %cond.true.2197 ], [ %998, %cond.false.2199 ]
  %cmp2203 = icmp sge i32 %cond2202, 16
  br i1 %cmp2203, label %if.then.2205, label %if.else.2218

if.then.2205:                                     ; preds = %cond.end.2201
  br label %do.body.2206

do.body.2206:                                     ; preds = %if.then.2205
  %999 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2207 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %999, i32 0, i32 0
  %1000 = load i32, i32* %state2207, align 4
  %cmp2208 = icmp ne i32 %1000, 0
  br i1 %cmp2208, label %if.then.2210, label %if.end.2214

if.then.2210:                                     ; preds = %do.body.2206
  %1001 = load i32*, i32** %charbuf, align 8
  %1002 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call2211 = call i32 @finish_composition(i32* %1001, %struct.composition_status* %1002)
  %conv2212 = sext i32 %call2211 to i64
  %1003 = load i64, i64* %char_offset, align 8
  %add2213 = add nsw i64 %1003, %conv2212
  store i64 %add2213, i64* %char_offset, align 8
  br label %if.end.2214

if.end.2214:                                      ; preds = %if.then.2210, %do.body.2206
  br label %do.end.2215

do.end.2215:                                      ; preds = %if.end.2214
  %1004 = load i32, i32* %c, align 4
  %1005 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2216 = getelementptr inbounds i32, i32* %1005, i32 1
  store i32* %incdec.ptr2216, i32** %charbuf, align 8
  store i32 %1004, i32* %1005, align 4
  %1006 = load i64, i64* %char_offset, align 8
  %inc2217 = add nsw i64 %1006, 1
  store i64 %inc2217, i64* %char_offset, align 8
  br label %if.end.2249

if.else.2218:                                     ; preds = %cond.end.2201
  br label %do.body.2219

do.body.2219:                                     ; preds = %if.else.2218
  %1007 = load i32, i32* %c, align 4
  %1008 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2220 = getelementptr inbounds i32, i32* %1008, i32 1
  store i32* %incdec.ptr2220, i32** %charbuf, align 8
  store i32 %1007, i32* %1008, align 4
  %1009 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length2221 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1009, i32 0, i32 3
  %1010 = load i32, i32* %length2221, align 4
  %inc2222 = add nsw i32 %1010, 1
  store i32 %inc2222, i32* %length2221, align 4
  %1011 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2223 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1011, i32 0, i32 0
  %1012 = load i32, i32* %state2223, align 4
  %cmp2224 = icmp eq i32 %1012, 1
  br i1 %cmp2224, label %if.then.2226, label %if.else.2229

if.then.2226:                                     ; preds = %do.body.2219
  %1013 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars2227 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1013, i32 0, i32 4
  %1014 = load i32, i32* %nchars2227, align 4
  %inc2228 = add nsw i32 %1014, 1
  store i32 %inc2228, i32* %nchars2227, align 4
  br label %if.end.2232

if.else.2229:                                     ; preds = %do.body.2219
  %1015 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps2230 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1015, i32 0, i32 5
  %1016 = load i32, i32* %ncomps2230, align 4
  %inc2231 = add nsw i32 %1016, 1
  store i32 %inc2231, i32* %ncomps2230, align 4
  br label %if.end.2232

if.end.2232:                                      ; preds = %if.else.2229, %if.then.2226
  %1017 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method2233 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1017, i32 0, i32 1
  %1018 = load i32, i32* %method2233, align 4
  %cmp2234 = icmp eq i32 %1018, 1
  br i1 %cmp2234, label %if.then.2244, label %lor.lhs.false.2236

lor.lhs.false.2236:                               ; preds = %if.end.2232
  %1019 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method2237 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1019, i32 0, i32 1
  %1020 = load i32, i32* %method2237, align 4
  %cmp2238 = icmp eq i32 %1020, 3
  br i1 %cmp2238, label %land.lhs.true.2240, label %if.end.2247

land.lhs.true.2240:                               ; preds = %lor.lhs.false.2236
  %1021 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2241 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1021, i32 0, i32 0
  %1022 = load i32, i32* %state2241, align 4
  %cmp2242 = icmp eq i32 %1022, 3
  br i1 %cmp2242, label %if.then.2244, label %if.end.2247

if.then.2244:                                     ; preds = %land.lhs.true.2240, %if.end.2232
  %1023 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2245 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1023, i32 0, i32 0
  %1024 = load i32, i32* %state2245, align 4
  %inc2246 = add i32 %1024, 1
  store i32 %inc2246, i32* %state2245, align 4
  br label %if.end.2247

if.end.2247:                                      ; preds = %if.then.2244, %land.lhs.true.2240, %lor.lhs.false.2236
  br label %do.end.2248

do.end.2248:                                      ; preds = %if.end.2247
  br label %if.end.2249

if.end.2249:                                      ; preds = %do.end.2248, %do.end.2215
  br label %if.end.2250

if.end.2250:                                      ; preds = %if.end.2249, %if.then.2190
  br label %if.end.2251

if.end.2251:                                      ; preds = %if.end.2250, %for.end.2185
  br label %while.body

invalid_code:                                     ; preds = %if.then.2031, %if.then.1975, %if.then.1888, %if.else.1762, %if.then.1675, %if.else.1666, %if.then.1626, %if.then.1588, %if.then.1550, %sw.default, %if.else.1471, %if.else.1421, %if.then.1329, %do.end.1285, %if.then.1260, %if.then.1160, %if.then.1153, %if.then.1078, %if.then.1063, %if.then.988, %if.then.950, %if.then.912, %if.then.897, %if.else.772, %if.then.646, %if.then.604, %if.then.566, %if.then.488, %if.then.480, %if.then.472, %if.then.441, %if.then.410, %sw.bb.396, %if.then.338, %if.then.333, %if.then.271, %if.then.199, %if.then.102
  br label %do.body.2252

do.body.2252:                                     ; preds = %invalid_code
  %1025 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2253 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1025, i32 0, i32 0
  %1026 = load i32, i32* %state2253, align 4
  %cmp2254 = icmp ne i32 %1026, 0
  br i1 %cmp2254, label %if.then.2256, label %if.end.2260

if.then.2256:                                     ; preds = %do.body.2252
  %1027 = load i32*, i32** %charbuf, align 8
  %1028 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call2257 = call i32 @finish_composition(i32* %1027, %struct.composition_status* %1028)
  %conv2258 = sext i32 %call2257 to i64
  %1029 = load i64, i64* %char_offset, align 8
  %add2259 = add nsw i64 %1029, %conv2258
  store i64 %add2259, i64* %char_offset, align 8
  br label %if.end.2260

if.end.2260:                                      ; preds = %if.then.2256, %do.body.2252
  br label %do.end.2261

do.end.2261:                                      ; preds = %if.end.2260
  %1030 = load i8*, i8** %src_base, align 8
  store i8* %1030, i8** %src, align 8
  %1031 = load i64, i64* %consumed_chars_base, align 8
  store i64 %1031, i64* %consumed_chars, align 8
  br label %do.body.2262

do.body.2262:                                     ; preds = %do.end.2261
  %1032 = load i8*, i8** %src, align 8
  %1033 = load i8*, i8** %src_end, align 8
  %cmp2263 = icmp eq i8* %1032, %1033
  br i1 %cmp2263, label %if.then.2265, label %if.end.2270

if.then.2265:                                     ; preds = %do.body.2262
  %1034 = load i8*, i8** %src_base, align 8
  %1035 = load i8*, i8** %src, align 8
  %cmp2266 = icmp ult i8* %1034, %1035
  br i1 %cmp2266, label %if.then.2268, label %if.end.2269

if.then.2268:                                     ; preds = %if.then.2265
  %1036 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %1036, i32 1)
  br label %if.end.2269

if.end.2269:                                      ; preds = %if.then.2268, %if.then.2265
  br label %no_more_source

if.end.2270:                                      ; preds = %do.body.2262
  %1037 = load i8*, i8** %src, align 8
  %incdec.ptr2271 = getelementptr inbounds i8, i8* %1037, i32 1
  store i8* %incdec.ptr2271, i8** %src, align 8
  %1038 = load i8, i8* %1037, align 1
  %conv2272 = zext i8 %1038 to i32
  store i32 %conv2272, i32* %c, align 4
  %1039 = load i8, i8* %multibytep, align 1
  %tobool2273 = trunc i8 %1039 to i1
  br i1 %tobool2273, label %land.lhs.true.2275, label %if.end.2293

land.lhs.true.2275:                               ; preds = %if.end.2270
  %1040 = load i32, i32* %c, align 4
  %and2276 = and i32 %1040, 128
  %tobool2277 = icmp ne i32 %and2276, 0
  br i1 %tobool2277, label %if.then.2278, label %if.end.2293

if.then.2278:                                     ; preds = %land.lhs.true.2275
  %1041 = load i32, i32* %c, align 4
  %and2279 = and i32 %1041, 254
  %cmp2280 = icmp eq i32 %and2279, 192
  br i1 %cmp2280, label %if.then.2282, label %if.else.2288

if.then.2282:                                     ; preds = %if.then.2278
  %1042 = load i32, i32* %c, align 4
  %and2283 = and i32 %1042, 1
  %shl2284 = shl i32 %and2283, 6
  %1043 = load i8*, i8** %src, align 8
  %incdec.ptr2285 = getelementptr inbounds i8, i8* %1043, i32 1
  store i8* %incdec.ptr2285, i8** %src, align 8
  %1044 = load i8, i8* %1043, align 1
  %conv2286 = zext i8 %1044 to i32
  %or2287 = or i32 %shl2284, %conv2286
  store i32 %or2287, i32* %c, align 4
  br label %if.end.2292

if.else.2288:                                     ; preds = %if.then.2278
  %1045 = load i8*, i8** %src, align 8
  %incdec.ptr2289 = getelementptr inbounds i8, i8* %1045, i32 -1
  store i8* %incdec.ptr2289, i8** %src, align 8
  %1046 = load i8*, i8** %src, align 8
  %call2290 = call i32 @string_char(i8* %1046, i8** %src, i32* null)
  %sub2291 = sub nsw i32 0, %call2290
  store i32 %sub2291, i32* %c, align 4
  %1047 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %1047, i32 3)
  br label %if.end.2292

if.end.2292:                                      ; preds = %if.else.2288, %if.then.2282
  br label %if.end.2293

if.end.2293:                                      ; preds = %if.end.2292, %land.lhs.true.2275, %if.end.2270
  %1048 = load i64, i64* %consumed_chars, align 8
  %inc2294 = add nsw i64 %1048, 1
  store i64 %inc2294, i64* %consumed_chars, align 8
  br label %do.end.2295

do.end.2295:                                      ; preds = %if.end.2293
  %1049 = load i32, i32* %c, align 4
  %cmp2296 = icmp slt i32 %1049, 0
  br i1 %cmp2296, label %cond.true.2298, label %cond.false.2300

cond.true.2298:                                   ; preds = %do.end.2295
  %1050 = load i32, i32* %c, align 4
  %sub2299 = sub nsw i32 0, %1050
  br label %cond.end.2315

cond.false.2300:                                  ; preds = %do.end.2295
  br i1 true, label %cond.true.2301, label %cond.false.2305

cond.true.2301:                                   ; preds = %cond.false.2300
  %1051 = load i32, i32* %c, align 4
  %add2302 = add i32 %1051, 0
  %cmp2303 = icmp ult i32 %add2302, 128
  br i1 %cmp2303, label %cond.true.2310, label %cond.false.2311

cond.false.2305:                                  ; preds = %cond.false.2300
  %1052 = load i32, i32* %c, align 4
  %conv2306 = sext i32 %1052 to i64
  %add2307 = add i64 %conv2306, 0
  %cmp2308 = icmp ult i64 %add2307, 128
  br i1 %cmp2308, label %cond.true.2310, label %cond.false.2311

cond.true.2310:                                   ; preds = %cond.false.2305, %cond.true.2301
  %1053 = load i32, i32* %c, align 4
  br label %cond.end.2313

cond.false.2311:                                  ; preds = %cond.false.2305, %cond.true.2301
  %1054 = load i32, i32* %c, align 4
  %add2312 = add nsw i32 %1054, 4194048
  br label %cond.end.2313

cond.end.2313:                                    ; preds = %cond.false.2311, %cond.true.2310
  %cond2314 = phi i32 [ %1053, %cond.true.2310 ], [ %add2312, %cond.false.2311 ]
  br label %cond.end.2315

cond.end.2315:                                    ; preds = %cond.end.2313, %cond.true.2298
  %cond2316 = phi i32 [ %sub2299, %cond.true.2298 ], [ %cond2314, %cond.end.2313 ]
  %1055 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2317 = getelementptr inbounds i32, i32* %1055, i32 1
  store i32* %incdec.ptr2317, i32** %charbuf, align 8
  store i32 %cond2316, i32* %1055, align 4
  %1056 = load i64, i64* %char_offset, align 8
  %inc2318 = add nsw i64 %1056, 1
  store i64 %inc2318, i64* %char_offset, align 8
  %1057 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2319 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1057, i32 0, i32 3
  %iso_20222320 = bitcast %union.anon* %spec2319 to %struct.iso_2022_spec*
  %current_invocation2321 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222320, i32 0, i32 1
  %arrayidx2322 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation2321, i32 0, i64 0
  store i32 0, i32* %arrayidx2322, align 4
  %1058 = load i32, i32* @charset_ascii, align 4
  %1059 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2323 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1059, i32 0, i32 3
  %iso_20222324 = bitcast %union.anon* %spec2323 to %struct.iso_2022_spec*
  %current_designation2325 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222324, i32 0, i32 2
  %arrayidx2326 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation2325, i32 0, i64 0
  store i32 %1058, i32* %arrayidx2326, align 4
  %1060 = load i32, i32* @charset_ascii, align 4
  store i32 %1060, i32* %charset_id_0, align 4
  br label %while.body

break_loop:                                       ; preds = %if.then.1655, %if.then.1635
  br label %while.end

while.end:                                        ; preds = %break_loop, %if.end.67
  br label %no_more_source

no_more_source:                                   ; preds = %while.end, %if.end.2269, %if.end.1991, %if.end.1935, %if.end.1735, %if.end.1693, %if.end.1597, %if.end.1559, %if.end.1518, %if.end.1481, %if.end.1431, %if.end.1381, %if.end.1338, %if.end.1100, %if.end.1010, %if.end.745, %if.end.703, %if.end.655, %if.end.613, %if.end.575, %if.end.534, %if.end.499, %if.end.356, %if.end.221, %if.then.141, %if.end.78
  %1061 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2327 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1061, i32 0, i32 0
  %1062 = load i32, i32* %state2327, align 4
  %cmp2328 = icmp ne i32 %1062, 0
  br i1 %cmp2328, label %if.then.2330, label %if.else.2366

if.then.2330:                                     ; preds = %no_more_source
  %1063 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode2331 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1063, i32 0, i32 1
  %bf.load2332 = load i32, i32* %mode2331, align 8
  %bf.lshr2333 = lshr i32 %bf.load2332, 14
  %bf.clear2334 = and i32 %bf.lshr2333, 31
  %and2335 = and i32 %bf.clear2334, 1
  %tobool2336 = icmp ne i32 %and2335, 0
  br i1 %tobool2336, label %if.then.2337, label %if.else.2348

if.then.2337:                                     ; preds = %if.then.2330
  br label %do.body.2338

do.body.2338:                                     ; preds = %if.then.2337
  %1064 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state2339 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1064, i32 0, i32 0
  %1065 = load i32, i32* %state2339, align 4
  %cmp2340 = icmp ne i32 %1065, 0
  br i1 %cmp2340, label %if.then.2342, label %if.end.2346

if.then.2342:                                     ; preds = %do.body.2338
  %1066 = load i32*, i32** %charbuf, align 8
  %1067 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call2343 = call i32 @finish_composition(i32* %1066, %struct.composition_status* %1067)
  %conv2344 = sext i32 %call2343 to i64
  %1068 = load i64, i64* %char_offset, align 8
  %add2345 = add nsw i64 %1068, %conv2344
  store i64 %add2345, i64* %char_offset, align 8
  br label %if.end.2346

if.end.2346:                                      ; preds = %if.then.2342, %do.body.2338
  br label %do.end.2347

do.end.2347:                                      ; preds = %if.end.2346
  br label %if.end.2365

if.else.2348:                                     ; preds = %if.then.2330
  %1069 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length2349 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1069, i32 0, i32 3
  %1070 = load i32, i32* %length2349, align 4
  %1071 = load i32*, i32** %charbuf, align 8
  %idx.ext2350 = sext i32 %1070 to i64
  %idx.neg = sub i64 0, %idx.ext2350
  %add.ptr2351 = getelementptr inbounds i32, i32* %1071, i64 %idx.neg
  store i32* %add.ptr2351, i32** %charbuf, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.2352

for.cond.2352:                                    ; preds = %for.inc.2362, %if.else.2348
  %1072 = load i32, i32* %i, align 4
  %1073 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length2353 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1073, i32 0, i32 3
  %1074 = load i32, i32* %length2353, align 4
  %cmp2354 = icmp slt i32 %1072, %1074
  br i1 %cmp2354, label %for.body.2356, label %for.end.2364

for.body.2356:                                    ; preds = %for.cond.2352
  %1075 = load i32, i32* %i, align 4
  %idxprom2357 = sext i32 %1075 to i64
  %1076 = load i32*, i32** %charbuf, align 8
  %arrayidx2358 = getelementptr inbounds i32, i32* %1076, i64 %idxprom2357
  %1077 = load i32, i32* %arrayidx2358, align 4
  %1078 = load i32, i32* %i, align 4
  %idxprom2359 = sext i32 %1078 to i64
  %1079 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %carryover2360 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %1079, i32 0, i32 6
  %arrayidx2361 = getelementptr inbounds [68 x i32], [68 x i32]* %carryover2360, i32 0, i64 %idxprom2359
  store i32 %1077, i32* %arrayidx2361, align 4
  br label %for.inc.2362

for.inc.2362:                                     ; preds = %for.body.2356
  %1080 = load i32, i32* %i, align 4
  %inc2363 = add nsw i32 %1080, 1
  store i32 %inc2363, i32* %i, align 4
  br label %for.cond.2352

for.end.2364:                                     ; preds = %for.cond.2352
  br label %if.end.2365

if.end.2365:                                      ; preds = %for.end.2364, %do.end.2347
  br label %if.end.2385

if.else.2366:                                     ; preds = %no_more_source
  %1081 = load i32, i32* %last_id, align 4
  %1082 = load i32, i32* @charset_ascii, align 4
  %cmp2367 = icmp ne i32 %1081, %1082
  br i1 %cmp2367, label %if.then.2369, label %if.end.2384

if.then.2369:                                     ; preds = %if.else.2366
  br label %do.body.2370

do.body.2370:                                     ; preds = %if.then.2369
  br label %do.body.2371

do.body.2371:                                     ; preds = %do.body.2370
  %1083 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2372 = getelementptr inbounds i32, i32* %1083, i32 1
  store i32* %incdec.ptr2372, i32** %charbuf, align 8
  store i32 -4, i32* %1083, align 4
  %1084 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2373 = getelementptr inbounds i32, i32* %1084, i32 1
  store i32* %incdec.ptr2373, i32** %charbuf, align 8
  store i32 3, i32* %1084, align 4
  %1085 = load i64, i64* %char_offset, align 8
  %1086 = load i64, i64* %last_offset, align 8
  %sub2374 = sub nsw i64 %1085, %1086
  %conv2375 = trunc i64 %sub2374 to i32
  %1087 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2376 = getelementptr inbounds i32, i32* %1087, i32 1
  store i32* %incdec.ptr2376, i32** %charbuf, align 8
  store i32 %conv2375, i32* %1087, align 4
  %1088 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated2377 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1088, i32 0, i32 1
  %bf.load2378 = load i32, i32* %annotated2377, align 8
  %bf.clear2379 = and i32 %bf.load2378, -8388609
  %bf.set2380 = or i32 %bf.clear2379, 8388608
  store i32 %bf.set2380, i32* %annotated2377, align 8
  br label %do.end.2381

do.end.2381:                                      ; preds = %do.body.2371
  %1089 = load i32, i32* %last_id, align 4
  %1090 = load i32*, i32** %charbuf, align 8
  %incdec.ptr2382 = getelementptr inbounds i32, i32* %1090, i32 1
  store i32* %incdec.ptr2382, i32** %charbuf, align 8
  store i32 %1089, i32* %1090, align 4
  br label %do.end.2383

do.end.2383:                                      ; preds = %do.end.2381
  br label %if.end.2384

if.end.2384:                                      ; preds = %do.end.2383, %if.else.2366
  br label %if.end.2385

if.end.2385:                                      ; preds = %if.end.2384, %if.end.2365
  %1091 = load i64, i64* %consumed_chars_base, align 8
  %1092 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1092, i32 0, i32 11
  %1093 = load i64, i64* %consumed_char, align 8
  %add2386 = add nsw i64 %1093, %1091
  store i64 %add2386, i64* %consumed_char, align 8
  %1094 = load i8*, i8** %src_base, align 8
  %1095 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source2387 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1095, i32 0, i32 17
  %1096 = load i8*, i8** %source2387, align 8
  %sub.ptr.lhs.cast2388 = ptrtoint i8* %1094 to i64
  %sub.ptr.rhs.cast2389 = ptrtoint i8* %1096 to i64
  %sub.ptr.sub2390 = sub i64 %sub.ptr.lhs.cast2388, %sub.ptr.rhs.cast2389
  %1097 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed2391 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1097, i32 0, i32 10
  store i64 %sub.ptr.sub2390, i64* %consumed2391, align 8
  %1098 = load i32*, i32** %charbuf, align 8
  %1099 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf2392 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1099, i32 0, i32 23
  %1100 = load i32*, i32** %charbuf2392, align 8
  %sub.ptr.lhs.cast2393 = ptrtoint i32* %1098 to i64
  %sub.ptr.rhs.cast2394 = ptrtoint i32* %1100 to i64
  %sub.ptr.sub2395 = sub i64 %sub.ptr.lhs.cast2393, %sub.ptr.rhs.cast2394
  %sub.ptr.div2396 = sdiv exact i64 %sub.ptr.sub2395, 4
  %conv2397 = trunc i64 %sub.ptr.div2396 to i32
  %1101 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used2398 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1101, i32 0, i32 25
  store i32 %conv2397, i32* %charbuf_used2398, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_iso_2022(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %safe_room = alloca i32, align 4
  %bol_designation = alloca i8, align 1
  %produced_chars = alloca i64, align 8
  %attrs = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %ascii_compatible = alloca i8, align 1
  %c = alloca i32, align 4
  %preferred_charset_id = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %desig_buf = alloca [16 x i8], align 16
  %nbytes = alloca i64, align 8
  %offset = alloca i64, align 8
  %more_bytes67 = alloca i64, align 8
  %reg = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %final_char = alloca i8, align 1
  %intermediate_char_94 = alloca i8*, align 8
  %intermediate_char_96 = alloca i8*, align 8
  %revision = alloca i32, align 4
  %ch = alloca i32, align 4
  %b = alloca i32, align 4
  %i = alloca i32, align 4
  %reg376 = alloca i32, align 4
  %charset377 = alloca %struct.charset*, align 8
  %final_char438 = alloca i8, align 1
  %intermediate_char_94441 = alloca i8*, align 8
  %intermediate_char_96442 = alloca i8*, align 8
  %revision443 = alloca i32, align 4
  %ch464 = alloca i32, align 4
  %b529 = alloca i32, align 4
  %charset635 = alloca %struct.charset*, align 8
  %code = alloca i32, align 4
  %offset640 = alloca i64, align 8
  %id758 = alloca i32, align 4
  %ch795 = alloca i32, align 4
  %ch913 = alloca i32, align 4
  %id977 = alloca i32, align 4
  %ch1021 = alloca i32, align 4
  %ch1204 = alloca i32, align 4
  %ch1346 = alloca i32, align 4
  %charset1403 = alloca %struct.charset*, align 8
  %result = alloca i8, align 1
  %offset1410 = alloca i64, align 8
  %offset1542 = alloca i64, align 8
  %offset1558 = alloca i64, align 8
  %offset1584 = alloca i64, align 8
  %code1600 = alloca i32, align 4
  %offset1602 = alloca i64, align 8
  %id1732 = alloca i32, align 4
  %ch1771 = alloca i32, align 4
  %ch1892 = alloca i32, align 4
  %id1959 = alloca i32, align 4
  %ch2003 = alloca i32, align 4
  %ch2186 = alloca i32, align 4
  %more_bytes2333 = alloca i64, align 8
  %reg2348 = alloca i32, align 4
  %charset2349 = alloca %struct.charset*, align 8
  %final_char2412 = alloca i8, align 1
  %intermediate_char_942415 = alloca i8*, align 8
  %intermediate_char_962416 = alloca i8*, align 8
  %revision2417 = alloca i32, align 4
  %ch2439 = alloca i32, align 4
  %b2507 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load i32*, i32** %charbuf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 25
  %5 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 8
  %9 = load i64, i64* %produced, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %dst, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 22
  %11 = load i8*, i8** %destination3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 20
  %13 = load i64, i64* %dst_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %dst_end, align 8
  store i32 16, i32* %safe_room, align 4
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 3
  %iso_2022 = bitcast %union.anon* %spec to %struct.iso_2022_spec*
  %flags = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022, i32 0, i32 0
  %15 = load i32, i32* %flags, align 4
  %and = and i32 %15, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 3
  %iso_20226 = bitcast %union.anon* %spec5 to %struct.iso_2022_spec*
  %bol = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20226, i32 0, i32 4
  %bf.load7 = load i8, i8* %bol, align 4
  %bf.lshr8 = lshr i8 %bf.load7, 1
  %bf.clear9 = and i8 %bf.lshr8, 1
  %bf.cast10 = trunc i8 %bf.clear9 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %17 = phi i1 [ false, %entry ], [ %bf.cast10, %land.rhs ]
  %frombool11 = zext i1 %17 to i8
  store i8 %frombool11, i8* %bol_designation, align 1
  store i64 0, i64* %produced_chars, align 8
  store i32 -1, i32* %preferred_charset_id, align 4
  br label %do.body

do.body:                                          ; preds = %land.end
  %18 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %18)
  %19 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %19, i32 0, i32 0
  %20 = load i64, i64* %id, align 8
  %call12 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %20)
  %call13 = call i64 @AREF(i64 %call12, i64 0)
  store i64 %call13, i64* %attrs, align 8
  %21 = load i64, i64* %attrs, align 8
  %call14 = call i64 @AREF(i64 %21, i64 4)
  store i64 %call14, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %22 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool15 = trunc i8 %22 to i1
  br i1 %tobool15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %call16 = call i64 @builtin_lisp_symbol(i32 973)
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %23 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call17 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %23)
  %24 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id18 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %24, i32 0, i32 0
  %25 = load i64, i64* %id18, align 8
  %call19 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call17, i64 %25)
  %call20 = call i64 @AREF(i64 %call19, i64 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call16, %cond.true ], [ %call20, %cond.false ]
  store i64 %cond, i64* %eol_type, align 8
  %26 = load i64, i64* %eol_type, align 8
  %call21 = call zeroext i1 @VECTORP(i64 %26)
  br i1 %call21, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %call22 = call i64 @builtin_lisp_symbol(i32 973)
  store i64 %call22, i64* %eol_type, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %27 = load i64, i64* %attrs, align 8
  call void @setup_iso_safe_charsets(i64 %27)
  %28 = load i64, i64* %attrs, align 8
  %call23 = call i64 @AREF(i64 %28, i64 4)
  store i64 %call23, i64* %charset_list, align 8
  %29 = load i64, i64* %attrs, align 8
  %call24 = call i64 @AREF(i64 %29, i64 15)
  %call25 = call i8* @SDATA(i64 %call24)
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets = getelementptr inbounds %struct.coding_system, %struct.coding_system* %30, i32 0, i32 4
  store i8* %call25, i8** %safe_charsets, align 8
  %31 = load i64, i64* %attrs, align 8
  %call26 = call i64 @AREF(i64 %31, i64 5)
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call26, %call27
  br i1 %cmp, label %land.end.34, label %land.rhs.28

land.rhs.28:                                      ; preds = %if.end
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec29 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %32, i32 0, i32 3
  %iso_202230 = bitcast %union.anon* %spec29 to %struct.iso_2022_spec*
  %flags31 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202230, i32 0, i32 0
  %33 = load i32, i32* %flags31, align 4
  %and32 = and i32 %33, 80
  %tobool33 = icmp ne i32 %and32, 0
  %lnot = xor i1 %tobool33, true
  br label %land.end.34

land.end.34:                                      ; preds = %land.rhs.28, %if.end
  %34 = phi i1 [ false, %if.end ], [ %lnot, %land.rhs.28 ]
  %frombool35 = zext i1 %34 to i8
  store i8 %frombool35, i8* %ascii_compatible, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end.2313, %sw.epilog, %land.end.34
  %35 = load i32*, i32** %charbuf, align 8
  %36 = load i32*, i32** %charbuf_end, align 8
  %cmp36 = icmp ult i32* %35, %36
  br i1 %cmp36, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.37

do.body.37:                                       ; preds = %while.body
  %37 = load i8*, i8** %dst, align 8
  %38 = load i32, i32* %safe_room, align 4
  %idx.ext38 = sext i32 %38 to i64
  %add.ptr39 = getelementptr inbounds i8, i8* %37, i64 %idx.ext38
  %39 = load i8*, i8** %dst_end, align 8
  %cmp40 = icmp uge i8* %add.ptr39, %39
  br i1 %cmp40, label %if.then.41, label %if.end.46

if.then.41:                                       ; preds = %do.body.37
  %40 = load i32*, i32** %charbuf_end, align 8
  %41 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %40 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %41 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %42 = load i32, i32* %safe_room, align 4
  %conv = sext i32 %42 to i64
  %add = add nsw i64 %sub.ptr.div, %conv
  store i64 %add, i64* %more_bytes, align 8
  %43 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %44 = load i64, i64* %more_bytes, align 8
  %45 = load i8*, i8** %dst, align 8
  %call42 = call i8* @alloc_destination(%struct.coding_system* %43, i64 %44, i8* %45)
  store i8* %call42, i8** %dst, align 8
  %46 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination43 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %46, i32 0, i32 22
  %47 = load i8*, i8** %destination43, align 8
  %48 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes44 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %48, i32 0, i32 20
  %49 = load i64, i64* %dst_bytes44, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %47, i64 %49
  store i8* %add.ptr45, i8** %dst_end, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.41, %do.body.37
  br label %do.end.47

do.end.47:                                        ; preds = %if.end.46
  %50 = load i8, i8* %bol_designation, align 1
  %tobool48 = trunc i8 %50 to i1
  br i1 %tobool48, label %if.then.49, label %if.end.80

if.then.49:                                       ; preds = %do.end.47
  store i8 0, i8* @charset_map_loaded, align 1
  %51 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %52 = load i32*, i32** %charbuf, align 8
  %53 = load i32*, i32** %charbuf_end, align 8
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %desig_buf, i32 0, i32 0
  %call50 = call i64 @encode_designation_at_bol(%struct.coding_system* %51, i32* %52, i32* %53, i8* %arraydecay)
  store i64 %call50, i64* %nbytes, align 8
  %54 = load i8, i8* @charset_map_loaded, align 1
  %tobool51 = trunc i8 %54 to i1
  br i1 %tobool51, label %land.lhs.true, label %if.end.58

land.lhs.true:                                    ; preds = %if.then.49
  %55 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call53 = call i64 @coding_change_destination(%struct.coding_system* %55)
  store i64 %call53, i64* %offset, align 8
  %tobool54 = icmp ne i64 %call53, 0
  br i1 %tobool54, label %if.then.55, label %if.end.58

if.then.55:                                       ; preds = %land.lhs.true
  %56 = load i64, i64* %offset, align 8
  %57 = load i8*, i8** %dst, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %57, i64 %56
  store i8* %add.ptr56, i8** %dst, align 8
  %58 = load i64, i64* %offset, align 8
  %59 = load i8*, i8** %dst_end, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %59, i64 %58
  store i8* %add.ptr57, i8** %dst_end, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.55, %land.lhs.true, %if.then.49
  %60 = load i8*, i8** %dst, align 8
  %61 = bitcast [16 x i8]* %desig_buf to i8*
  %62 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 %62, i32 1, i1 false)
  %63 = load i64, i64* %nbytes, align 8
  %64 = load i8*, i8** %dst, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %64, i64 %63
  store i8* %add.ptr59, i8** %dst, align 8
  %65 = load i64, i64* %nbytes, align 8
  %66 = load i64, i64* %produced_chars, align 8
  %add60 = add nsw i64 %66, %65
  store i64 %add60, i64* %produced_chars, align 8
  store i8 0, i8* %bol_designation, align 1
  br label %do.body.61

do.body.61:                                       ; preds = %if.end.58
  %67 = load i8*, i8** %dst, align 8
  %68 = load i32, i32* %safe_room, align 4
  %idx.ext62 = sext i32 %68 to i64
  %add.ptr63 = getelementptr inbounds i8, i8* %67, i64 %idx.ext62
  %69 = load i8*, i8** %dst_end, align 8
  %cmp64 = icmp uge i8* %add.ptr63, %69
  br i1 %cmp64, label %if.then.66, label %if.end.78

if.then.66:                                       ; preds = %do.body.61
  %70 = load i32*, i32** %charbuf_end, align 8
  %71 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast68 = ptrtoint i32* %70 to i64
  %sub.ptr.rhs.cast69 = ptrtoint i32* %71 to i64
  %sub.ptr.sub70 = sub i64 %sub.ptr.lhs.cast68, %sub.ptr.rhs.cast69
  %sub.ptr.div71 = sdiv exact i64 %sub.ptr.sub70, 4
  %72 = load i32, i32* %safe_room, align 4
  %conv72 = sext i32 %72 to i64
  %add73 = add nsw i64 %sub.ptr.div71, %conv72
  store i64 %add73, i64* %more_bytes67, align 8
  %73 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %74 = load i64, i64* %more_bytes67, align 8
  %75 = load i8*, i8** %dst, align 8
  %call74 = call i8* @alloc_destination(%struct.coding_system* %73, i64 %74, i8* %75)
  store i8* %call74, i8** %dst, align 8
  %76 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination75 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %76, i32 0, i32 22
  %77 = load i8*, i8** %destination75, align 8
  %78 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes76 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %78, i32 0, i32 20
  %79 = load i64, i64* %dst_bytes76, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %77, i64 %79
  store i8* %add.ptr77, i8** %dst_end, align 8
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.66, %do.body.61
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  br label %if.end.80

if.end.80:                                        ; preds = %do.end.79, %do.end.47
  %80 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %80, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %c, align 4
  %82 = load i32, i32* %c, align 4
  %cmp81 = icmp slt i32 %82, 0
  br i1 %cmp81, label %if.then.83, label %if.end.99

if.then.83:                                       ; preds = %if.end.80
  %83 = load i32*, i32** %charbuf, align 8
  %84 = load i32, i32* %83, align 4
  switch i32 %84, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.84
  ]

sw.bb:                                            ; preds = %if.then.83
  br label %sw.epilog

sw.bb.84:                                         ; preds = %if.then.83
  %85 = load i32*, i32** %charbuf, align 8
  %arrayidx = getelementptr inbounds i32, i32* %85, i64 2
  %86 = load i32, i32* %arrayidx, align 4
  store i32 %86, i32* %preferred_charset_id, align 4
  %87 = load i32, i32* %preferred_charset_id, align 4
  %cmp85 = icmp sge i32 %87, 0
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.95

land.lhs.true.87:                                 ; preds = %sw.bb.84
  %88 = load i32, i32* %preferred_charset_id, align 4
  %conv88 = sext i32 %88 to i64
  %shl = shl i64 %conv88, 2
  %add89 = add i64 %shl, 2
  %89 = load i64, i64* %charset_list, align 8
  %call90 = call i64 @Fmemq(i64 %add89, i64 %89)
  %call91 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp92 = icmp eq i64 %call90, %call91
  br i1 %cmp92, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %land.lhs.true.87
  store i32 -1, i32* %preferred_charset_id, align 4
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.94, %land.lhs.true.87, %sw.bb.84
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.83
  call void @emacs_abort() #6
  unreachable

sw.epilog:                                        ; preds = %if.end.95, %sw.bb
  %90 = load i32, i32* %c, align 4
  %sub = sub nsw i32 0, %90
  %sub96 = sub nsw i32 %sub, 1
  %91 = load i32*, i32** %charbuf, align 8
  %idx.ext97 = sext i32 %sub96 to i64
  %add.ptr98 = getelementptr inbounds i32, i32* %91, i64 %idx.ext97
  store i32* %add.ptr98, i32** %charbuf, align 8
  br label %while.cond

if.end.99:                                        ; preds = %if.end.80
  %92 = load i32, i32* %c, align 4
  %cmp100 = icmp slt i32 %92, 32
  br i1 %cmp100, label %if.then.104, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.99
  %93 = load i32, i32* %c, align 4
  %cmp102 = icmp eq i32 %93, 127
  br i1 %cmp102, label %if.then.104, label %if.else.616

if.then.104:                                      ; preds = %lor.lhs.false, %if.end.99
  %94 = load i32, i32* %c, align 4
  %cmp105 = icmp eq i32 %94, 10
  br i1 %cmp105, label %if.then.114, label %lor.lhs.false.107

lor.lhs.false.107:                                ; preds = %if.then.104
  %95 = load i32, i32* %c, align 4
  %cmp108 = icmp eq i32 %95, 13
  br i1 %cmp108, label %land.lhs.true.110, label %if.else.368

land.lhs.true.110:                                ; preds = %lor.lhs.false.107
  %96 = load i64, i64* %eol_type, align 8
  %call111 = call i64 @builtin_lisp_symbol(i32 635)
  %cmp112 = icmp eq i64 %96, %call111
  br i1 %cmp112, label %if.then.114, label %if.else.368

if.then.114:                                      ; preds = %land.lhs.true.110, %if.then.104
  %97 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec115 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %97, i32 0, i32 3
  %iso_2022116 = bitcast %union.anon* %spec115 to %struct.iso_2022_spec*
  %flags117 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022116, i32 0, i32 0
  %98 = load i32, i32* %flags117, align 4
  %and118 = and i32 %98, 2
  %tobool119 = icmp ne i32 %and118, 0
  br i1 %tobool119, label %if.then.120, label %if.end.332

if.then.120:                                      ; preds = %if.then.114
  br label %do.body.121

do.body.121:                                      ; preds = %if.then.120
  %99 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec122 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %99, i32 0, i32 3
  %iso_2022123 = bitcast %union.anon* %spec122 to %struct.iso_2022_spec*
  %current_invocation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022123, i32 0, i32 1
  %arrayidx124 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation, i32 0, i64 0
  %100 = load i32, i32* %arrayidx124, align 4
  %cmp125 = icmp ne i32 %100, 0
  br i1 %cmp125, label %if.then.127, label %if.end.137

if.then.127:                                      ; preds = %do.body.121
  br label %do.body.128

do.body.128:                                      ; preds = %if.then.127
  br label %do.body.129

do.body.129:                                      ; preds = %do.body.128
  %101 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %101, 1
  store i64 %inc, i64* %produced_chars, align 8
  %102 = load i8*, i8** %dst, align 8
  %incdec.ptr130 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr130, i8** %dst, align 8
  store i8 15, i8* %102, align 1
  br label %do.end.131

do.end.131:                                       ; preds = %do.body.129
  %103 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec132 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %103, i32 0, i32 3
  %iso_2022133 = bitcast %union.anon* %spec132 to %struct.iso_2022_spec*
  %current_invocation134 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022133, i32 0, i32 1
  %arrayidx135 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation134, i32 0, i64 0
  store i32 0, i32* %arrayidx135, align 4
  br label %do.end.136

do.end.136:                                       ; preds = %do.end.131
  br label %if.end.137

if.end.137:                                       ; preds = %do.end.136, %do.body.121
  store i32 0, i32* %reg, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.137
  %104 = load i32, i32* %reg, align 4
  %cmp138 = icmp slt i32 %104, 4
  br i1 %cmp138, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %105 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call140 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %105)
  %106 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id141 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %106, i32 0, i32 0
  %107 = load i64, i64* %id141, align 8
  %call142 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call140, i64 %107)
  %call143 = call i64 @AREF(i64 %call142, i64 0)
  %call144 = call i64 @AREF(i64 %call143, i64 20)
  %108 = load i32, i32* %reg, align 4
  %conv145 = sext i32 %108 to i64
  %call146 = call i64 @AREF(i64 %call144, i64 %conv145)
  %shr = ashr i64 %call146, 2
  %cmp147 = icmp sge i64 %shr, 0
  br i1 %cmp147, label %land.lhs.true.149, label %if.end.329

land.lhs.true.149:                                ; preds = %for.body
  %109 = load i32, i32* %reg, align 4
  %idxprom = sext i32 %109 to i64
  %110 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec150 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %110, i32 0, i32 3
  %iso_2022151 = bitcast %union.anon* %spec150 to %struct.iso_2022_spec*
  %current_designation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022151, i32 0, i32 2
  %arrayidx152 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation, i32 0, i64 %idxprom
  %111 = load i32, i32* %arrayidx152, align 4
  %conv153 = sext i32 %111 to i64
  %112 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call154 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %112)
  %113 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id155 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %113, i32 0, i32 0
  %114 = load i64, i64* %id155, align 8
  %call156 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call154, i64 %114)
  %call157 = call i64 @AREF(i64 %call156, i64 0)
  %call158 = call i64 @AREF(i64 %call157, i64 20)
  %115 = load i32, i32* %reg, align 4
  %conv159 = sext i32 %115 to i64
  %call160 = call i64 @AREF(i64 %call158, i64 %conv159)
  %shr161 = ashr i64 %call160, 2
  %cmp162 = icmp ne i64 %conv153, %shr161
  br i1 %cmp162, label %if.then.164, label %if.end.329

if.then.164:                                      ; preds = %land.lhs.true.149
  %116 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %117 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call165 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %117)
  %118 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id166 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %118, i32 0, i32 0
  %119 = load i64, i64* %id166, align 8
  %call167 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call165, i64 %119)
  %call168 = call i64 @AREF(i64 %call167, i64 0)
  %call169 = call i64 @AREF(i64 %call168, i64 20)
  %120 = load i32, i32* %reg, align 4
  %conv170 = sext i32 %120 to i64
  %call171 = call i64 @AREF(i64 %call169, i64 %conv170)
  %shr172 = ashr i64 %call171, 2
  %add.ptr173 = getelementptr inbounds %struct.charset, %struct.charset* %116, i64 %shr172
  store %struct.charset* %add.ptr173, %struct.charset** %charset, align 8
  br label %do.body.174

do.body.174:                                      ; preds = %if.then.164
  %121 = load %struct.charset*, %struct.charset** %charset, align 8
  %iso_final = getelementptr inbounds %struct.charset, %struct.charset* %121, i32 0, i32 6
  %122 = load i32, i32* %iso_final, align 4
  %conv175 = trunc i32 %122 to i8
  store i8 %conv175, i8* %final_char, align 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i8** %intermediate_char_94, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8** %intermediate_char_96, align 8
  store i32 -1, i32* %revision, align 4
  %123 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec176 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %123, i32 0, i32 3
  %iso_2022177 = bitcast %union.anon* %spec176 to %struct.iso_2022_spec*
  %flags178 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022177, i32 0, i32 0
  %124 = load i32, i32* %flags178, align 4
  %and179 = and i32 %124, 128
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %do.body.174
  %125 = load %struct.charset*, %struct.charset** %charset, align 8
  %iso_revision = getelementptr inbounds %struct.charset, %struct.charset* %125, i32 0, i32 7
  %126 = load i32, i32* %iso_revision, align 4
  store i32 %126, i32* %revision, align 4
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.181, %do.body.174
  %127 = load i32, i32* %revision, align 4
  %cmp183 = icmp sge i32 %127, 0
  br i1 %cmp183, label %if.then.185, label %if.end.248

if.then.185:                                      ; preds = %if.end.182
  br label %do.body.186

do.body.186:                                      ; preds = %if.then.185
  %128 = load i64, i64* %produced_chars, align 8
  %add187 = add nsw i64 %128, 2
  store i64 %add187, i64* %produced_chars, align 8
  %129 = load i8*, i8** %dst, align 8
  %incdec.ptr188 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %incdec.ptr188, i8** %dst, align 8
  store i8 27, i8* %129, align 1
  %130 = load i8*, i8** %dst, align 8
  %incdec.ptr189 = getelementptr inbounds i8, i8* %130, i32 1
  store i8* %incdec.ptr189, i8** %dst, align 8
  store i8 38, i8* %130, align 1
  br label %do.end.190

do.end.190:                                       ; preds = %do.body.186
  br label %do.body.191

do.body.191:                                      ; preds = %do.end.190
  %131 = load i64, i64* %produced_chars, align 8
  %inc192 = add nsw i64 %131, 1
  store i64 %inc192, i64* %produced_chars, align 8
  %132 = load i8, i8* %multibytep, align 1
  %tobool193 = trunc i8 %132 to i1
  br i1 %tobool193, label %if.then.194, label %if.else.242

if.then.194:                                      ; preds = %do.body.191
  %133 = load i32, i32* %revision, align 4
  %add195 = add nsw i32 64, %133
  store i32 %add195, i32* %ch, align 4
  %134 = load i32, i32* %ch, align 4
  %cmp196 = icmp uge i32 %134, 128
  br i1 %cmp196, label %if.then.198, label %if.end.200

if.then.198:                                      ; preds = %if.then.194
  %135 = load i32, i32* %ch, align 4
  %add199 = add i32 %135, 4194048
  store i32 %add199, i32* %ch, align 4
  br label %if.end.200

if.end.200:                                       ; preds = %if.then.198, %if.then.194
  br label %do.body.201

do.body.201:                                      ; preds = %if.end.200
  %136 = load i32, i32* %ch, align 4
  %cmp202 = icmp ule i32 %136, 127
  br i1 %cmp202, label %if.then.204, label %if.else

if.then.204:                                      ; preds = %do.body.201
  %137 = load i32, i32* %ch, align 4
  %conv205 = trunc i32 %137 to i8
  %138 = load i8*, i8** %dst, align 8
  %incdec.ptr206 = getelementptr inbounds i8, i8* %138, i32 1
  store i8* %incdec.ptr206, i8** %dst, align 8
  store i8 %conv205, i8* %138, align 1
  br label %if.end.240

if.else:                                          ; preds = %do.body.201
  %139 = load i32, i32* %ch, align 4
  %cmp207 = icmp ule i32 %139, 2047
  br i1 %cmp207, label %if.then.209, label %if.else.217

if.then.209:                                      ; preds = %if.else
  %140 = load i32, i32* %ch, align 4
  %shr210 = lshr i32 %140, 6
  %or = or i32 192, %shr210
  %conv211 = trunc i32 %or to i8
  %141 = load i8*, i8** %dst, align 8
  %incdec.ptr212 = getelementptr inbounds i8, i8* %141, i32 1
  store i8* %incdec.ptr212, i8** %dst, align 8
  store i8 %conv211, i8* %141, align 1
  %142 = load i32, i32* %ch, align 4
  %and213 = and i32 %142, 63
  %or214 = or i32 128, %and213
  %conv215 = trunc i32 %or214 to i8
  %143 = load i8*, i8** %dst, align 8
  %incdec.ptr216 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr216, i8** %dst, align 8
  store i8 %conv215, i8* %143, align 1
  br label %if.end.239

if.else.217:                                      ; preds = %if.else
  %144 = load i32, i32* %ch, align 4
  %cmp218 = icmp ule i32 %144, 65535
  br i1 %cmp218, label %if.then.220, label %if.else.234

if.then.220:                                      ; preds = %if.else.217
  %145 = load i32, i32* %ch, align 4
  %shr221 = lshr i32 %145, 12
  %or222 = or i32 224, %shr221
  %conv223 = trunc i32 %or222 to i8
  %146 = load i8*, i8** %dst, align 8
  %incdec.ptr224 = getelementptr inbounds i8, i8* %146, i32 1
  store i8* %incdec.ptr224, i8** %dst, align 8
  store i8 %conv223, i8* %146, align 1
  %147 = load i32, i32* %ch, align 4
  %shr225 = lshr i32 %147, 6
  %and226 = and i32 %shr225, 63
  %or227 = or i32 128, %and226
  %conv228 = trunc i32 %or227 to i8
  %148 = load i8*, i8** %dst, align 8
  %incdec.ptr229 = getelementptr inbounds i8, i8* %148, i32 1
  store i8* %incdec.ptr229, i8** %dst, align 8
  store i8 %conv228, i8* %148, align 1
  %149 = load i32, i32* %ch, align 4
  %and230 = and i32 %149, 63
  %or231 = or i32 128, %and230
  %conv232 = trunc i32 %or231 to i8
  %150 = load i8*, i8** %dst, align 8
  %incdec.ptr233 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %incdec.ptr233, i8** %dst, align 8
  store i8 %conv232, i8* %150, align 1
  br label %if.end.238

if.else.234:                                      ; preds = %if.else.217
  %151 = load i32, i32* %ch, align 4
  %152 = load i8*, i8** %dst, align 8
  %call235 = call i32 @char_string(i32 %151, i8* %152)
  %153 = load i8*, i8** %dst, align 8
  %idx.ext236 = sext i32 %call235 to i64
  %add.ptr237 = getelementptr inbounds i8, i8* %153, i64 %idx.ext236
  store i8* %add.ptr237, i8** %dst, align 8
  br label %if.end.238

if.end.238:                                       ; preds = %if.else.234, %if.then.220
  br label %if.end.239

if.end.239:                                       ; preds = %if.end.238, %if.then.209
  br label %if.end.240

if.end.240:                                       ; preds = %if.end.239, %if.then.204
  br label %do.end.241

do.end.241:                                       ; preds = %if.end.240
  br label %if.end.246

if.else.242:                                      ; preds = %do.body.191
  %154 = load i32, i32* %revision, align 4
  %add243 = add nsw i32 64, %154
  %conv244 = trunc i32 %add243 to i8
  %155 = load i8*, i8** %dst, align 8
  %incdec.ptr245 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %incdec.ptr245, i8** %dst, align 8
  store i8 %conv244, i8* %155, align 1
  br label %if.end.246

if.end.246:                                       ; preds = %if.else.242, %do.end.241
  br label %do.end.247

do.end.247:                                       ; preds = %if.end.246
  br label %if.end.248

if.end.248:                                       ; preds = %do.end.247, %if.end.182
  br label %do.body.249

do.body.249:                                      ; preds = %if.end.248
  %156 = load i64, i64* %produced_chars, align 8
  %inc250 = add nsw i64 %156, 1
  store i64 %inc250, i64* %produced_chars, align 8
  %157 = load i8*, i8** %dst, align 8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %157, i32 1
  store i8* %incdec.ptr251, i8** %dst, align 8
  store i8 27, i8* %157, align 1
  br label %do.end.252

do.end.252:                                       ; preds = %do.body.249
  %158 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %158, i32 0, i32 2
  %159 = load i32, i32* %dimension, align 4
  %cmp253 = icmp eq i32 %159, 1
  br i1 %cmp253, label %if.then.255, label %if.else.274

if.then.255:                                      ; preds = %do.end.252
  %160 = load %struct.charset*, %struct.charset** %charset, align 8
  %iso_chars_96 = getelementptr inbounds %struct.charset, %struct.charset* %160, i32 0, i32 5
  %bf.load256 = load i8, i8* %iso_chars_96, align 8
  %bf.lshr257 = lshr i8 %bf.load256, 1
  %bf.clear258 = and i8 %bf.lshr257, 1
  %bf.cast259 = trunc i8 %bf.clear258 to i1
  br i1 %bf.cast259, label %if.else.264, label %if.then.260

if.then.260:                                      ; preds = %if.then.255
  %161 = load i32, i32* %reg, align 4
  %idxprom261 = sext i32 %161 to i64
  %162 = load i8*, i8** %intermediate_char_94, align 8
  %arrayidx262 = getelementptr inbounds i8, i8* %162, i64 %idxprom261
  %163 = load i8, i8* %arrayidx262, align 1
  %conv263 = sext i8 %163 to i32
  store i32 %conv263, i32* %b, align 4
  br label %if.end.268

if.else.264:                                      ; preds = %if.then.255
  %164 = load i32, i32* %reg, align 4
  %idxprom265 = sext i32 %164 to i64
  %165 = load i8*, i8** %intermediate_char_96, align 8
  %arrayidx266 = getelementptr inbounds i8, i8* %165, i64 %idxprom265
  %166 = load i8, i8* %arrayidx266, align 1
  %conv267 = sext i8 %166 to i32
  store i32 %conv267, i32* %b, align 4
  br label %if.end.268

if.end.268:                                       ; preds = %if.else.264, %if.then.260
  br label %do.body.269

do.body.269:                                      ; preds = %if.end.268
  %167 = load i64, i64* %produced_chars, align 8
  %inc270 = add nsw i64 %167, 1
  store i64 %inc270, i64* %produced_chars, align 8
  %168 = load i32, i32* %b, align 4
  %conv271 = trunc i32 %168 to i8
  %169 = load i8*, i8** %dst, align 8
  %incdec.ptr272 = getelementptr inbounds i8, i8* %169, i32 1
  store i8* %incdec.ptr272, i8** %dst, align 8
  store i8 %conv271, i8* %169, align 1
  br label %do.end.273

do.end.273:                                       ; preds = %do.body.269
  br label %if.end.317

if.else.274:                                      ; preds = %do.end.252
  br label %do.body.275

do.body.275:                                      ; preds = %if.else.274
  %170 = load i64, i64* %produced_chars, align 8
  %inc276 = add nsw i64 %170, 1
  store i64 %inc276, i64* %produced_chars, align 8
  %171 = load i8*, i8** %dst, align 8
  %incdec.ptr277 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %incdec.ptr277, i8** %dst, align 8
  store i8 36, i8* %171, align 1
  br label %do.end.278

do.end.278:                                       ; preds = %do.body.275
  %172 = load %struct.charset*, %struct.charset** %charset, align 8
  %iso_chars_96279 = getelementptr inbounds %struct.charset, %struct.charset* %172, i32 0, i32 5
  %bf.load280 = load i8, i8* %iso_chars_96279, align 8
  %bf.lshr281 = lshr i8 %bf.load280, 1
  %bf.clear282 = and i8 %bf.lshr281, 1
  %bf.cast283 = trunc i8 %bf.clear282 to i1
  br i1 %bf.cast283, label %if.else.309, label %if.then.284

if.then.284:                                      ; preds = %do.end.278
  %173 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec285 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %173, i32 0, i32 3
  %iso_2022286 = bitcast %union.anon* %spec285 to %struct.iso_2022_spec*
  %flags287 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022286, i32 0, i32 0
  %174 = load i32, i32* %flags287, align 4
  %and288 = and i32 %174, 1
  %tobool289 = icmp ne i32 %and288, 0
  br i1 %tobool289, label %if.then.301, label %lor.lhs.false.290

lor.lhs.false.290:                                ; preds = %if.then.284
  %175 = load i32, i32* %reg, align 4
  %cmp291 = icmp ne i32 %175, 0
  br i1 %cmp291, label %if.then.301, label %lor.lhs.false.293

lor.lhs.false.293:                                ; preds = %lor.lhs.false.290
  %176 = load i8, i8* %final_char, align 1
  %conv294 = zext i8 %176 to i32
  %cmp295 = icmp slt i32 %conv294, 64
  br i1 %cmp295, label %if.then.301, label %lor.lhs.false.297

lor.lhs.false.297:                                ; preds = %lor.lhs.false.293
  %177 = load i8, i8* %final_char, align 1
  %conv298 = zext i8 %177 to i32
  %cmp299 = icmp sgt i32 %conv298, 66
  br i1 %cmp299, label %if.then.301, label %if.end.308

if.then.301:                                      ; preds = %lor.lhs.false.297, %lor.lhs.false.293, %lor.lhs.false.290, %if.then.284
  br label %do.body.302

do.body.302:                                      ; preds = %if.then.301
  %178 = load i64, i64* %produced_chars, align 8
  %inc303 = add nsw i64 %178, 1
  store i64 %inc303, i64* %produced_chars, align 8
  %179 = load i32, i32* %reg, align 4
  %idxprom304 = sext i32 %179 to i64
  %180 = load i8*, i8** %intermediate_char_94, align 8
  %arrayidx305 = getelementptr inbounds i8, i8* %180, i64 %idxprom304
  %181 = load i8, i8* %arrayidx305, align 1
  %182 = load i8*, i8** %dst, align 8
  %incdec.ptr306 = getelementptr inbounds i8, i8* %182, i32 1
  store i8* %incdec.ptr306, i8** %dst, align 8
  store i8 %181, i8* %182, align 1
  br label %do.end.307

do.end.307:                                       ; preds = %do.body.302
  br label %if.end.308

if.end.308:                                       ; preds = %do.end.307, %lor.lhs.false.297
  br label %if.end.316

if.else.309:                                      ; preds = %do.end.278
  br label %do.body.310

do.body.310:                                      ; preds = %if.else.309
  %183 = load i64, i64* %produced_chars, align 8
  %inc311 = add nsw i64 %183, 1
  store i64 %inc311, i64* %produced_chars, align 8
  %184 = load i32, i32* %reg, align 4
  %idxprom312 = sext i32 %184 to i64
  %185 = load i8*, i8** %intermediate_char_96, align 8
  %arrayidx313 = getelementptr inbounds i8, i8* %185, i64 %idxprom312
  %186 = load i8, i8* %arrayidx313, align 1
  %187 = load i8*, i8** %dst, align 8
  %incdec.ptr314 = getelementptr inbounds i8, i8* %187, i32 1
  store i8* %incdec.ptr314, i8** %dst, align 8
  store i8 %186, i8* %187, align 1
  br label %do.end.315

do.end.315:                                       ; preds = %do.body.310
  br label %if.end.316

if.end.316:                                       ; preds = %do.end.315, %if.end.308
  br label %if.end.317

if.end.317:                                       ; preds = %if.end.316, %do.end.273
  br label %do.body.318

do.body.318:                                      ; preds = %if.end.317
  %188 = load i64, i64* %produced_chars, align 8
  %inc319 = add nsw i64 %188, 1
  store i64 %inc319, i64* %produced_chars, align 8
  %189 = load i8, i8* %final_char, align 1
  %190 = load i8*, i8** %dst, align 8
  %incdec.ptr320 = getelementptr inbounds i8, i8* %190, i32 1
  store i8* %incdec.ptr320, i8** %dst, align 8
  store i8 %189, i8* %190, align 1
  br label %do.end.321

do.end.321:                                       ; preds = %do.body.318
  %191 = load %struct.charset*, %struct.charset** %charset, align 8
  %id322 = getelementptr inbounds %struct.charset, %struct.charset* %191, i32 0, i32 0
  %192 = load i32, i32* %id322, align 4
  %193 = load i32, i32* %reg, align 4
  %idxprom323 = sext i32 %193 to i64
  %194 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec324 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %194, i32 0, i32 3
  %iso_2022325 = bitcast %union.anon* %spec324 to %struct.iso_2022_spec*
  %current_designation326 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022325, i32 0, i32 2
  %arrayidx327 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation326, i32 0, i64 %idxprom323
  store i32 %192, i32* %arrayidx327, align 4
  br label %do.end.328

do.end.328:                                       ; preds = %do.end.321
  br label %if.end.329

if.end.329:                                       ; preds = %do.end.328, %land.lhs.true.149, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.329
  %195 = load i32, i32* %reg, align 4
  %inc330 = add nsw i32 %195, 1
  store i32 %inc330, i32* %reg, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.end.331

do.end.331:                                       ; preds = %for.end
  br label %if.end.332

if.end.332:                                       ; preds = %do.end.331, %if.then.114
  %196 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec333 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %196, i32 0, i32 3
  %iso_2022334 = bitcast %union.anon* %spec333 to %struct.iso_2022_spec*
  %flags335 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022334, i32 0, i32 0
  %197 = load i32, i32* %flags335, align 4
  %and336 = and i32 %197, 512
  %tobool337 = icmp ne i32 %and336, 0
  br i1 %tobool337, label %if.then.338, label %if.end.360

if.then.338:                                      ; preds = %if.end.332
  store i32 0, i32* %i, align 4
  br label %for.cond.339

for.cond.339:                                     ; preds = %for.inc.357, %if.then.338
  %198 = load i32, i32* %i, align 4
  %cmp340 = icmp slt i32 %198, 4
  br i1 %cmp340, label %for.body.342, label %for.end.359

for.body.342:                                     ; preds = %for.cond.339
  %199 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call343 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %199)
  %200 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id344 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %200, i32 0, i32 0
  %201 = load i64, i64* %id344, align 8
  %call345 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call343, i64 %201)
  %call346 = call i64 @AREF(i64 %call345, i64 0)
  %call347 = call i64 @AREF(i64 %call346, i64 20)
  %202 = load i32, i32* %i, align 4
  %conv348 = sext i32 %202 to i64
  %call349 = call i64 @AREF(i64 %call347, i64 %conv348)
  %shr350 = ashr i64 %call349, 2
  %conv351 = trunc i64 %shr350 to i32
  %203 = load i32, i32* %i, align 4
  %idxprom352 = sext i32 %203 to i64
  %204 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec353 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %204, i32 0, i32 3
  %iso_2022354 = bitcast %union.anon* %spec353 to %struct.iso_2022_spec*
  %current_designation355 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022354, i32 0, i32 2
  %arrayidx356 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation355, i32 0, i64 %idxprom352
  store i32 %conv351, i32* %arrayidx356, align 4
  br label %for.inc.357

for.inc.357:                                      ; preds = %for.body.342
  %205 = load i32, i32* %i, align 4
  %inc358 = add nsw i32 %205, 1
  store i32 %inc358, i32* %i, align 4
  br label %for.cond.339

for.end.359:                                      ; preds = %for.cond.339
  br label %if.end.360

if.end.360:                                       ; preds = %for.end.359, %if.end.332
  %206 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec361 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %206, i32 0, i32 3
  %iso_2022362 = bitcast %union.anon* %spec361 to %struct.iso_2022_spec*
  %flags363 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022362, i32 0, i32 0
  %207 = load i32, i32* %flags363, align 4
  %and364 = and i32 %207, 1024
  %cmp365 = icmp ne i32 %and364, 0
  %frombool367 = zext i1 %cmp365 to i8
  store i8 %frombool367, i8* %bol_designation, align 1
  br label %if.end.610

if.else.368:                                      ; preds = %land.lhs.true.110, %lor.lhs.false.107
  %208 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec369 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %208, i32 0, i32 3
  %iso_2022370 = bitcast %union.anon* %spec369 to %struct.iso_2022_spec*
  %flags371 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022370, i32 0, i32 0
  %209 = load i32, i32* %flags371, align 4
  %and372 = and i32 %209, 4
  %tobool373 = icmp ne i32 %and372, 0
  br i1 %tobool373, label %if.then.374, label %if.end.609

if.then.374:                                      ; preds = %if.else.368
  br label %do.body.375

do.body.375:                                      ; preds = %if.then.374
  %210 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec378 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %210, i32 0, i32 3
  %iso_2022379 = bitcast %union.anon* %spec378 to %struct.iso_2022_spec*
  %current_invocation380 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022379, i32 0, i32 1
  %arrayidx381 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation380, i32 0, i64 0
  %211 = load i32, i32* %arrayidx381, align 4
  %cmp382 = icmp ne i32 %211, 0
  br i1 %cmp382, label %if.then.384, label %if.end.395

if.then.384:                                      ; preds = %do.body.375
  br label %do.body.385

do.body.385:                                      ; preds = %if.then.384
  br label %do.body.386

do.body.386:                                      ; preds = %do.body.385
  %212 = load i64, i64* %produced_chars, align 8
  %inc387 = add nsw i64 %212, 1
  store i64 %inc387, i64* %produced_chars, align 8
  %213 = load i8*, i8** %dst, align 8
  %incdec.ptr388 = getelementptr inbounds i8, i8* %213, i32 1
  store i8* %incdec.ptr388, i8** %dst, align 8
  store i8 15, i8* %213, align 1
  br label %do.end.389

do.end.389:                                       ; preds = %do.body.386
  %214 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec390 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %214, i32 0, i32 3
  %iso_2022391 = bitcast %union.anon* %spec390 to %struct.iso_2022_spec*
  %current_invocation392 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022391, i32 0, i32 1
  %arrayidx393 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation392, i32 0, i64 0
  store i32 0, i32* %arrayidx393, align 4
  br label %do.end.394

do.end.394:                                       ; preds = %do.end.389
  br label %if.end.395

if.end.395:                                       ; preds = %do.end.394, %do.body.375
  store i32 0, i32* %reg376, align 4
  br label %for.cond.396

for.cond.396:                                     ; preds = %for.inc.605, %if.end.395
  %215 = load i32, i32* %reg376, align 4
  %cmp397 = icmp slt i32 %215, 4
  br i1 %cmp397, label %for.body.399, label %for.end.607

for.body.399:                                     ; preds = %for.cond.396
  %216 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call400 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %216)
  %217 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id401 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %217, i32 0, i32 0
  %218 = load i64, i64* %id401, align 8
  %call402 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call400, i64 %218)
  %call403 = call i64 @AREF(i64 %call402, i64 0)
  %call404 = call i64 @AREF(i64 %call403, i64 20)
  %219 = load i32, i32* %reg376, align 4
  %conv405 = sext i32 %219 to i64
  %call406 = call i64 @AREF(i64 %call404, i64 %conv405)
  %shr407 = ashr i64 %call406, 2
  %cmp408 = icmp sge i64 %shr407, 0
  br i1 %cmp408, label %land.lhs.true.410, label %if.end.604

land.lhs.true.410:                                ; preds = %for.body.399
  %220 = load i32, i32* %reg376, align 4
  %idxprom411 = sext i32 %220 to i64
  %221 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec412 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %221, i32 0, i32 3
  %iso_2022413 = bitcast %union.anon* %spec412 to %struct.iso_2022_spec*
  %current_designation414 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022413, i32 0, i32 2
  %arrayidx415 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation414, i32 0, i64 %idxprom411
  %222 = load i32, i32* %arrayidx415, align 4
  %conv416 = sext i32 %222 to i64
  %223 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call417 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %223)
  %224 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id418 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %224, i32 0, i32 0
  %225 = load i64, i64* %id418, align 8
  %call419 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call417, i64 %225)
  %call420 = call i64 @AREF(i64 %call419, i64 0)
  %call421 = call i64 @AREF(i64 %call420, i64 20)
  %226 = load i32, i32* %reg376, align 4
  %conv422 = sext i32 %226 to i64
  %call423 = call i64 @AREF(i64 %call421, i64 %conv422)
  %shr424 = ashr i64 %call423, 2
  %cmp425 = icmp ne i64 %conv416, %shr424
  br i1 %cmp425, label %if.then.427, label %if.end.604

if.then.427:                                      ; preds = %land.lhs.true.410
  %227 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %228 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call428 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %228)
  %229 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id429 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %229, i32 0, i32 0
  %230 = load i64, i64* %id429, align 8
  %call430 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call428, i64 %230)
  %call431 = call i64 @AREF(i64 %call430, i64 0)
  %call432 = call i64 @AREF(i64 %call431, i64 20)
  %231 = load i32, i32* %reg376, align 4
  %conv433 = sext i32 %231 to i64
  %call434 = call i64 @AREF(i64 %call432, i64 %conv433)
  %shr435 = ashr i64 %call434, 2
  %add.ptr436 = getelementptr inbounds %struct.charset, %struct.charset* %227, i64 %shr435
  store %struct.charset* %add.ptr436, %struct.charset** %charset377, align 8
  br label %do.body.437

do.body.437:                                      ; preds = %if.then.427
  %232 = load %struct.charset*, %struct.charset** %charset377, align 8
  %iso_final439 = getelementptr inbounds %struct.charset, %struct.charset* %232, i32 0, i32 6
  %233 = load i32, i32* %iso_final439, align 4
  %conv440 = trunc i32 %233 to i8
  store i8 %conv440, i8* %final_char438, align 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i8** %intermediate_char_94441, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8** %intermediate_char_96442, align 8
  store i32 -1, i32* %revision443, align 4
  %234 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec444 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %234, i32 0, i32 3
  %iso_2022445 = bitcast %union.anon* %spec444 to %struct.iso_2022_spec*
  %flags446 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022445, i32 0, i32 0
  %235 = load i32, i32* %flags446, align 4
  %and447 = and i32 %235, 128
  %tobool448 = icmp ne i32 %and447, 0
  br i1 %tobool448, label %if.then.449, label %if.end.451

if.then.449:                                      ; preds = %do.body.437
  %236 = load %struct.charset*, %struct.charset** %charset377, align 8
  %iso_revision450 = getelementptr inbounds %struct.charset, %struct.charset* %236, i32 0, i32 7
  %237 = load i32, i32* %iso_revision450, align 4
  store i32 %237, i32* %revision443, align 4
  br label %if.end.451

if.end.451:                                       ; preds = %if.then.449, %do.body.437
  %238 = load i32, i32* %revision443, align 4
  %cmp452 = icmp sge i32 %238, 0
  br i1 %cmp452, label %if.then.454, label %if.end.520

if.then.454:                                      ; preds = %if.end.451
  br label %do.body.455

do.body.455:                                      ; preds = %if.then.454
  %239 = load i64, i64* %produced_chars, align 8
  %add456 = add nsw i64 %239, 2
  store i64 %add456, i64* %produced_chars, align 8
  %240 = load i8*, i8** %dst, align 8
  %incdec.ptr457 = getelementptr inbounds i8, i8* %240, i32 1
  store i8* %incdec.ptr457, i8** %dst, align 8
  store i8 27, i8* %240, align 1
  %241 = load i8*, i8** %dst, align 8
  %incdec.ptr458 = getelementptr inbounds i8, i8* %241, i32 1
  store i8* %incdec.ptr458, i8** %dst, align 8
  store i8 38, i8* %241, align 1
  br label %do.end.459

do.end.459:                                       ; preds = %do.body.455
  br label %do.body.460

do.body.460:                                      ; preds = %do.end.459
  %242 = load i64, i64* %produced_chars, align 8
  %inc461 = add nsw i64 %242, 1
  store i64 %inc461, i64* %produced_chars, align 8
  %243 = load i8, i8* %multibytep, align 1
  %tobool462 = trunc i8 %243 to i1
  br i1 %tobool462, label %if.then.463, label %if.else.514

if.then.463:                                      ; preds = %do.body.460
  %244 = load i32, i32* %revision443, align 4
  %add465 = add nsw i32 64, %244
  store i32 %add465, i32* %ch464, align 4
  %245 = load i32, i32* %ch464, align 4
  %cmp466 = icmp uge i32 %245, 128
  br i1 %cmp466, label %if.then.468, label %if.end.470

if.then.468:                                      ; preds = %if.then.463
  %246 = load i32, i32* %ch464, align 4
  %add469 = add i32 %246, 4194048
  store i32 %add469, i32* %ch464, align 4
  br label %if.end.470

if.end.470:                                       ; preds = %if.then.468, %if.then.463
  br label %do.body.471

do.body.471:                                      ; preds = %if.end.470
  %247 = load i32, i32* %ch464, align 4
  %cmp472 = icmp ule i32 %247, 127
  br i1 %cmp472, label %if.then.474, label %if.else.477

if.then.474:                                      ; preds = %do.body.471
  %248 = load i32, i32* %ch464, align 4
  %conv475 = trunc i32 %248 to i8
  %249 = load i8*, i8** %dst, align 8
  %incdec.ptr476 = getelementptr inbounds i8, i8* %249, i32 1
  store i8* %incdec.ptr476, i8** %dst, align 8
  store i8 %conv475, i8* %249, align 1
  br label %if.end.512

if.else.477:                                      ; preds = %do.body.471
  %250 = load i32, i32* %ch464, align 4
  %cmp478 = icmp ule i32 %250, 2047
  br i1 %cmp478, label %if.then.480, label %if.else.489

if.then.480:                                      ; preds = %if.else.477
  %251 = load i32, i32* %ch464, align 4
  %shr481 = lshr i32 %251, 6
  %or482 = or i32 192, %shr481
  %conv483 = trunc i32 %or482 to i8
  %252 = load i8*, i8** %dst, align 8
  %incdec.ptr484 = getelementptr inbounds i8, i8* %252, i32 1
  store i8* %incdec.ptr484, i8** %dst, align 8
  store i8 %conv483, i8* %252, align 1
  %253 = load i32, i32* %ch464, align 4
  %and485 = and i32 %253, 63
  %or486 = or i32 128, %and485
  %conv487 = trunc i32 %or486 to i8
  %254 = load i8*, i8** %dst, align 8
  %incdec.ptr488 = getelementptr inbounds i8, i8* %254, i32 1
  store i8* %incdec.ptr488, i8** %dst, align 8
  store i8 %conv487, i8* %254, align 1
  br label %if.end.511

if.else.489:                                      ; preds = %if.else.477
  %255 = load i32, i32* %ch464, align 4
  %cmp490 = icmp ule i32 %255, 65535
  br i1 %cmp490, label %if.then.492, label %if.else.506

if.then.492:                                      ; preds = %if.else.489
  %256 = load i32, i32* %ch464, align 4
  %shr493 = lshr i32 %256, 12
  %or494 = or i32 224, %shr493
  %conv495 = trunc i32 %or494 to i8
  %257 = load i8*, i8** %dst, align 8
  %incdec.ptr496 = getelementptr inbounds i8, i8* %257, i32 1
  store i8* %incdec.ptr496, i8** %dst, align 8
  store i8 %conv495, i8* %257, align 1
  %258 = load i32, i32* %ch464, align 4
  %shr497 = lshr i32 %258, 6
  %and498 = and i32 %shr497, 63
  %or499 = or i32 128, %and498
  %conv500 = trunc i32 %or499 to i8
  %259 = load i8*, i8** %dst, align 8
  %incdec.ptr501 = getelementptr inbounds i8, i8* %259, i32 1
  store i8* %incdec.ptr501, i8** %dst, align 8
  store i8 %conv500, i8* %259, align 1
  %260 = load i32, i32* %ch464, align 4
  %and502 = and i32 %260, 63
  %or503 = or i32 128, %and502
  %conv504 = trunc i32 %or503 to i8
  %261 = load i8*, i8** %dst, align 8
  %incdec.ptr505 = getelementptr inbounds i8, i8* %261, i32 1
  store i8* %incdec.ptr505, i8** %dst, align 8
  store i8 %conv504, i8* %261, align 1
  br label %if.end.510

if.else.506:                                      ; preds = %if.else.489
  %262 = load i32, i32* %ch464, align 4
  %263 = load i8*, i8** %dst, align 8
  %call507 = call i32 @char_string(i32 %262, i8* %263)
  %264 = load i8*, i8** %dst, align 8
  %idx.ext508 = sext i32 %call507 to i64
  %add.ptr509 = getelementptr inbounds i8, i8* %264, i64 %idx.ext508
  store i8* %add.ptr509, i8** %dst, align 8
  br label %if.end.510

if.end.510:                                       ; preds = %if.else.506, %if.then.492
  br label %if.end.511

if.end.511:                                       ; preds = %if.end.510, %if.then.480
  br label %if.end.512

if.end.512:                                       ; preds = %if.end.511, %if.then.474
  br label %do.end.513

do.end.513:                                       ; preds = %if.end.512
  br label %if.end.518

if.else.514:                                      ; preds = %do.body.460
  %265 = load i32, i32* %revision443, align 4
  %add515 = add nsw i32 64, %265
  %conv516 = trunc i32 %add515 to i8
  %266 = load i8*, i8** %dst, align 8
  %incdec.ptr517 = getelementptr inbounds i8, i8* %266, i32 1
  store i8* %incdec.ptr517, i8** %dst, align 8
  store i8 %conv516, i8* %266, align 1
  br label %if.end.518

if.end.518:                                       ; preds = %if.else.514, %do.end.513
  br label %do.end.519

do.end.519:                                       ; preds = %if.end.518
  br label %if.end.520

if.end.520:                                       ; preds = %do.end.519, %if.end.451
  br label %do.body.521

do.body.521:                                      ; preds = %if.end.520
  %267 = load i64, i64* %produced_chars, align 8
  %inc522 = add nsw i64 %267, 1
  store i64 %inc522, i64* %produced_chars, align 8
  %268 = load i8*, i8** %dst, align 8
  %incdec.ptr523 = getelementptr inbounds i8, i8* %268, i32 1
  store i8* %incdec.ptr523, i8** %dst, align 8
  store i8 27, i8* %268, align 1
  br label %do.end.524

do.end.524:                                       ; preds = %do.body.521
  %269 = load %struct.charset*, %struct.charset** %charset377, align 8
  %dimension525 = getelementptr inbounds %struct.charset, %struct.charset* %269, i32 0, i32 2
  %270 = load i32, i32* %dimension525, align 4
  %cmp526 = icmp eq i32 %270, 1
  br i1 %cmp526, label %if.then.528, label %if.else.549

if.then.528:                                      ; preds = %do.end.524
  %271 = load %struct.charset*, %struct.charset** %charset377, align 8
  %iso_chars_96530 = getelementptr inbounds %struct.charset, %struct.charset* %271, i32 0, i32 5
  %bf.load531 = load i8, i8* %iso_chars_96530, align 8
  %bf.lshr532 = lshr i8 %bf.load531, 1
  %bf.clear533 = and i8 %bf.lshr532, 1
  %bf.cast534 = trunc i8 %bf.clear533 to i1
  br i1 %bf.cast534, label %if.else.539, label %if.then.535

if.then.535:                                      ; preds = %if.then.528
  %272 = load i32, i32* %reg376, align 4
  %idxprom536 = sext i32 %272 to i64
  %273 = load i8*, i8** %intermediate_char_94441, align 8
  %arrayidx537 = getelementptr inbounds i8, i8* %273, i64 %idxprom536
  %274 = load i8, i8* %arrayidx537, align 1
  %conv538 = sext i8 %274 to i32
  store i32 %conv538, i32* %b529, align 4
  br label %if.end.543

if.else.539:                                      ; preds = %if.then.528
  %275 = load i32, i32* %reg376, align 4
  %idxprom540 = sext i32 %275 to i64
  %276 = load i8*, i8** %intermediate_char_96442, align 8
  %arrayidx541 = getelementptr inbounds i8, i8* %276, i64 %idxprom540
  %277 = load i8, i8* %arrayidx541, align 1
  %conv542 = sext i8 %277 to i32
  store i32 %conv542, i32* %b529, align 4
  br label %if.end.543

if.end.543:                                       ; preds = %if.else.539, %if.then.535
  br label %do.body.544

do.body.544:                                      ; preds = %if.end.543
  %278 = load i64, i64* %produced_chars, align 8
  %inc545 = add nsw i64 %278, 1
  store i64 %inc545, i64* %produced_chars, align 8
  %279 = load i32, i32* %b529, align 4
  %conv546 = trunc i32 %279 to i8
  %280 = load i8*, i8** %dst, align 8
  %incdec.ptr547 = getelementptr inbounds i8, i8* %280, i32 1
  store i8* %incdec.ptr547, i8** %dst, align 8
  store i8 %conv546, i8* %280, align 1
  br label %do.end.548

do.end.548:                                       ; preds = %do.body.544
  br label %if.end.592

if.else.549:                                      ; preds = %do.end.524
  br label %do.body.550

do.body.550:                                      ; preds = %if.else.549
  %281 = load i64, i64* %produced_chars, align 8
  %inc551 = add nsw i64 %281, 1
  store i64 %inc551, i64* %produced_chars, align 8
  %282 = load i8*, i8** %dst, align 8
  %incdec.ptr552 = getelementptr inbounds i8, i8* %282, i32 1
  store i8* %incdec.ptr552, i8** %dst, align 8
  store i8 36, i8* %282, align 1
  br label %do.end.553

do.end.553:                                       ; preds = %do.body.550
  %283 = load %struct.charset*, %struct.charset** %charset377, align 8
  %iso_chars_96554 = getelementptr inbounds %struct.charset, %struct.charset* %283, i32 0, i32 5
  %bf.load555 = load i8, i8* %iso_chars_96554, align 8
  %bf.lshr556 = lshr i8 %bf.load555, 1
  %bf.clear557 = and i8 %bf.lshr556, 1
  %bf.cast558 = trunc i8 %bf.clear557 to i1
  br i1 %bf.cast558, label %if.else.584, label %if.then.559

if.then.559:                                      ; preds = %do.end.553
  %284 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec560 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %284, i32 0, i32 3
  %iso_2022561 = bitcast %union.anon* %spec560 to %struct.iso_2022_spec*
  %flags562 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022561, i32 0, i32 0
  %285 = load i32, i32* %flags562, align 4
  %and563 = and i32 %285, 1
  %tobool564 = icmp ne i32 %and563, 0
  br i1 %tobool564, label %if.then.576, label %lor.lhs.false.565

lor.lhs.false.565:                                ; preds = %if.then.559
  %286 = load i32, i32* %reg376, align 4
  %cmp566 = icmp ne i32 %286, 0
  br i1 %cmp566, label %if.then.576, label %lor.lhs.false.568

lor.lhs.false.568:                                ; preds = %lor.lhs.false.565
  %287 = load i8, i8* %final_char438, align 1
  %conv569 = zext i8 %287 to i32
  %cmp570 = icmp slt i32 %conv569, 64
  br i1 %cmp570, label %if.then.576, label %lor.lhs.false.572

lor.lhs.false.572:                                ; preds = %lor.lhs.false.568
  %288 = load i8, i8* %final_char438, align 1
  %conv573 = zext i8 %288 to i32
  %cmp574 = icmp sgt i32 %conv573, 66
  br i1 %cmp574, label %if.then.576, label %if.end.583

if.then.576:                                      ; preds = %lor.lhs.false.572, %lor.lhs.false.568, %lor.lhs.false.565, %if.then.559
  br label %do.body.577

do.body.577:                                      ; preds = %if.then.576
  %289 = load i64, i64* %produced_chars, align 8
  %inc578 = add nsw i64 %289, 1
  store i64 %inc578, i64* %produced_chars, align 8
  %290 = load i32, i32* %reg376, align 4
  %idxprom579 = sext i32 %290 to i64
  %291 = load i8*, i8** %intermediate_char_94441, align 8
  %arrayidx580 = getelementptr inbounds i8, i8* %291, i64 %idxprom579
  %292 = load i8, i8* %arrayidx580, align 1
  %293 = load i8*, i8** %dst, align 8
  %incdec.ptr581 = getelementptr inbounds i8, i8* %293, i32 1
  store i8* %incdec.ptr581, i8** %dst, align 8
  store i8 %292, i8* %293, align 1
  br label %do.end.582

do.end.582:                                       ; preds = %do.body.577
  br label %if.end.583

if.end.583:                                       ; preds = %do.end.582, %lor.lhs.false.572
  br label %if.end.591

if.else.584:                                      ; preds = %do.end.553
  br label %do.body.585

do.body.585:                                      ; preds = %if.else.584
  %294 = load i64, i64* %produced_chars, align 8
  %inc586 = add nsw i64 %294, 1
  store i64 %inc586, i64* %produced_chars, align 8
  %295 = load i32, i32* %reg376, align 4
  %idxprom587 = sext i32 %295 to i64
  %296 = load i8*, i8** %intermediate_char_96442, align 8
  %arrayidx588 = getelementptr inbounds i8, i8* %296, i64 %idxprom587
  %297 = load i8, i8* %arrayidx588, align 1
  %298 = load i8*, i8** %dst, align 8
  %incdec.ptr589 = getelementptr inbounds i8, i8* %298, i32 1
  store i8* %incdec.ptr589, i8** %dst, align 8
  store i8 %297, i8* %298, align 1
  br label %do.end.590

do.end.590:                                       ; preds = %do.body.585
  br label %if.end.591

if.end.591:                                       ; preds = %do.end.590, %if.end.583
  br label %if.end.592

if.end.592:                                       ; preds = %if.end.591, %do.end.548
  br label %do.body.593

do.body.593:                                      ; preds = %if.end.592
  %299 = load i64, i64* %produced_chars, align 8
  %inc594 = add nsw i64 %299, 1
  store i64 %inc594, i64* %produced_chars, align 8
  %300 = load i8, i8* %final_char438, align 1
  %301 = load i8*, i8** %dst, align 8
  %incdec.ptr595 = getelementptr inbounds i8, i8* %301, i32 1
  store i8* %incdec.ptr595, i8** %dst, align 8
  store i8 %300, i8* %301, align 1
  br label %do.end.596

do.end.596:                                       ; preds = %do.body.593
  %302 = load %struct.charset*, %struct.charset** %charset377, align 8
  %id597 = getelementptr inbounds %struct.charset, %struct.charset* %302, i32 0, i32 0
  %303 = load i32, i32* %id597, align 4
  %304 = load i32, i32* %reg376, align 4
  %idxprom598 = sext i32 %304 to i64
  %305 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec599 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %305, i32 0, i32 3
  %iso_2022600 = bitcast %union.anon* %spec599 to %struct.iso_2022_spec*
  %current_designation601 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022600, i32 0, i32 2
  %arrayidx602 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation601, i32 0, i64 %idxprom598
  store i32 %303, i32* %arrayidx602, align 4
  br label %do.end.603

do.end.603:                                       ; preds = %do.end.596
  br label %if.end.604

if.end.604:                                       ; preds = %do.end.603, %land.lhs.true.410, %for.body.399
  br label %for.inc.605

for.inc.605:                                      ; preds = %if.end.604
  %306 = load i32, i32* %reg376, align 4
  %inc606 = add nsw i32 %306, 1
  store i32 %inc606, i32* %reg376, align 4
  br label %for.cond.396

for.end.607:                                      ; preds = %for.cond.396
  br label %do.end.608

do.end.608:                                       ; preds = %for.end.607
  br label %if.end.609

if.end.609:                                       ; preds = %do.end.608, %if.else.368
  br label %if.end.610

if.end.610:                                       ; preds = %if.end.609, %if.end.360
  br label %do.body.611

do.body.611:                                      ; preds = %if.end.610
  %307 = load i64, i64* %produced_chars, align 8
  %inc612 = add nsw i64 %307, 1
  store i64 %inc612, i64* %produced_chars, align 8
  %308 = load i32, i32* %c, align 4
  %conv613 = trunc i32 %308 to i8
  %309 = load i8*, i8** %dst, align 8
  %incdec.ptr614 = getelementptr inbounds i8, i8* %309, i32 1
  store i8* %incdec.ptr614, i8** %dst, align 8
  store i8 %conv613, i8* %309, align 1
  br label %do.end.615

do.end.615:                                       ; preds = %do.body.611
  br label %if.end.2313

if.else.616:                                      ; preds = %lor.lhs.false
  br i1 true, label %cond.true.617, label %cond.false.621

cond.true.617:                                    ; preds = %if.else.616
  %310 = load i32, i32* %c, align 4
  %add618 = add i32 %310, 0
  %cmp619 = icmp ult i32 %add618, 128
  br i1 %cmp619, label %if.then.626, label %if.else.1330

cond.false.621:                                   ; preds = %if.else.616
  %311 = load i32, i32* %c, align 4
  %conv622 = sext i32 %311 to i64
  %add623 = add i64 %conv622, 0
  %cmp624 = icmp ult i64 %add623, 128
  br i1 %cmp624, label %if.then.626, label %if.else.1330

if.then.626:                                      ; preds = %cond.false.621, %cond.true.617
  %312 = load i8, i8* %ascii_compatible, align 1
  %tobool627 = trunc i8 %312 to i1
  br i1 %tobool627, label %if.then.628, label %if.else.634

if.then.628:                                      ; preds = %if.then.626
  br label %do.body.629

do.body.629:                                      ; preds = %if.then.628
  %313 = load i64, i64* %produced_chars, align 8
  %inc630 = add nsw i64 %313, 1
  store i64 %inc630, i64* %produced_chars, align 8
  %314 = load i32, i32* %c, align 4
  %conv631 = trunc i32 %314 to i8
  %315 = load i8*, i8** %dst, align 8
  %incdec.ptr632 = getelementptr inbounds i8, i8* %315, i32 1
  store i8* %incdec.ptr632, i8** %dst, align 8
  store i8 %conv631, i8* %315, align 1
  br label %do.end.633

do.end.633:                                       ; preds = %do.body.629
  br label %if.end.1329

if.else.634:                                      ; preds = %if.then.626
  %316 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %317 = load i32, i32* @charset_ascii, align 4
  %idx.ext636 = sext i32 %317 to i64
  %add.ptr637 = getelementptr inbounds %struct.charset, %struct.charset* %316, i64 %idx.ext636
  store %struct.charset* %add.ptr637, %struct.charset** %charset635, align 8
  br label %do.body.638

do.body.638:                                      ; preds = %if.else.634
  br label %do.body.639

do.body.639:                                      ; preds = %do.body.638
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.641, label %cond.false.645

cond.true.641:                                    ; preds = %do.body.639
  %318 = load i32, i32* %c, align 4
  %add642 = add i32 %318, 0
  %cmp643 = icmp ult i32 %add642, 128
  br i1 %cmp643, label %land.lhs.true.650, label %cond.false.657

cond.false.645:                                   ; preds = %do.body.639
  %319 = load i32, i32* %c, align 4
  %conv646 = sext i32 %319 to i64
  %add647 = add i64 %conv646, 0
  %cmp648 = icmp ult i64 %add647, 128
  br i1 %cmp648, label %land.lhs.true.650, label %cond.false.657

land.lhs.true.650:                                ; preds = %cond.false.645, %cond.true.641
  %320 = load %struct.charset*, %struct.charset** %charset635, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %320, i32 0, i32 5
  %bf.load651 = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr652 = lshr i8 %bf.load651, 2
  %bf.clear653 = and i8 %bf.lshr652, 1
  %bf.cast654 = trunc i8 %bf.clear653 to i1
  br i1 %bf.cast654, label %cond.true.656, label %cond.false.657

cond.true.656:                                    ; preds = %land.lhs.true.650
  %321 = load i32, i32* %c, align 4
  br label %cond.end.741

cond.false.657:                                   ; preds = %land.lhs.true.650, %cond.false.645, %cond.true.641
  %322 = load %struct.charset*, %struct.charset** %charset635, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %322, i32 0, i32 5
  %bf.load658 = load i8, i8* %unified_p, align 8
  %bf.lshr659 = lshr i8 %bf.load658, 5
  %bf.clear660 = and i8 %bf.lshr659, 1
  %bf.cast661 = trunc i8 %bf.clear660 to i1
  br i1 %bf.cast661, label %cond.true.670, label %lor.lhs.false.663

lor.lhs.false.663:                                ; preds = %cond.false.657
  %323 = load %struct.charset*, %struct.charset** %charset635, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %323, i32 0, i32 9
  %324 = load i32, i32* %method, align 4
  %cmp664 = icmp eq i32 %324, 2
  br i1 %cmp664, label %cond.true.670, label %lor.lhs.false.666

lor.lhs.false.666:                                ; preds = %lor.lhs.false.663
  %325 = load %struct.charset*, %struct.charset** %charset635, align 8
  %method667 = getelementptr inbounds %struct.charset, %struct.charset* %325, i32 0, i32 9
  %326 = load i32, i32* %method667, align 4
  %cmp668 = icmp eq i32 %326, 3
  br i1 %cmp668, label %cond.true.670, label %cond.false.672

cond.true.670:                                    ; preds = %lor.lhs.false.666, %lor.lhs.false.663, %cond.false.657
  %327 = load %struct.charset*, %struct.charset** %charset635, align 8
  %328 = load i32, i32* %c, align 4
  %call671 = call i32 @encode_char(%struct.charset* %327, i32 %328)
  br label %cond.end.739

cond.false.672:                                   ; preds = %lor.lhs.false.666
  %329 = load i32, i32* %c, align 4
  %330 = load %struct.charset*, %struct.charset** %charset635, align 8
  %min_char = getelementptr inbounds %struct.charset, %struct.charset* %330, i32 0, i32 13
  %331 = load i32, i32* %min_char, align 4
  %cmp673 = icmp slt i32 %329, %331
  br i1 %cmp673, label %cond.true.678, label %lor.lhs.false.675

lor.lhs.false.675:                                ; preds = %cond.false.672
  %332 = load i32, i32* %c, align 4
  %333 = load %struct.charset*, %struct.charset** %charset635, align 8
  %max_char = getelementptr inbounds %struct.charset, %struct.charset* %333, i32 0, i32 14
  %334 = load i32, i32* %max_char, align 4
  %cmp676 = icmp sgt i32 %332, %334
  br i1 %cmp676, label %cond.true.678, label %cond.false.679

cond.true.678:                                    ; preds = %lor.lhs.false.675, %cond.false.672
  %335 = load %struct.charset*, %struct.charset** %charset635, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %335, i32 0, i32 15
  %336 = load i32, i32* %invalid_code, align 4
  br label %cond.end.737

cond.false.679:                                   ; preds = %lor.lhs.false.675
  %337 = load %struct.charset*, %struct.charset** %charset635, align 8
  %method680 = getelementptr inbounds %struct.charset, %struct.charset* %337, i32 0, i32 9
  %338 = load i32, i32* %method680, align 4
  %cmp681 = icmp eq i32 %338, 0
  br i1 %cmp681, label %cond.true.683, label %cond.false.695

cond.true.683:                                    ; preds = %cond.false.679
  %339 = load %struct.charset*, %struct.charset** %charset635, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %339, i32 0, i32 5
  %bf.load684 = load i8, i8* %code_linear_p, align 8
  %bf.clear685 = and i8 %bf.load684, 1
  %bf.cast686 = trunc i8 %bf.clear685 to i1
  br i1 %bf.cast686, label %cond.true.688, label %cond.false.691

cond.true.688:                                    ; preds = %cond.true.683
  %340 = load i32, i32* %c, align 4
  %341 = load %struct.charset*, %struct.charset** %charset635, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %341, i32 0, i32 17
  %342 = load i32, i32* %code_offset, align 4
  %sub689 = sub nsw i32 %340, %342
  %343 = load %struct.charset*, %struct.charset** %charset635, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %343, i32 0, i32 10
  %344 = load i32, i32* %min_code, align 4
  %add690 = add i32 %sub689, %344
  br label %cond.end.693

cond.false.691:                                   ; preds = %cond.true.683
  %345 = load %struct.charset*, %struct.charset** %charset635, align 8
  %346 = load i32, i32* %c, align 4
  %call692 = call i32 @encode_char(%struct.charset* %345, i32 %346)
  br label %cond.end.693

cond.end.693:                                     ; preds = %cond.false.691, %cond.true.688
  %cond694 = phi i32 [ %add690, %cond.true.688 ], [ %call692, %cond.false.691 ]
  br label %cond.end.735

cond.false.695:                                   ; preds = %cond.false.679
  %347 = load %struct.charset*, %struct.charset** %charset635, align 8
  %method696 = getelementptr inbounds %struct.charset, %struct.charset* %347, i32 0, i32 9
  %348 = load i32, i32* %method696, align 4
  %cmp697 = icmp eq i32 %348, 1
  br i1 %cmp697, label %cond.true.699, label %cond.false.731

cond.true.699:                                    ; preds = %cond.false.695
  %349 = load %struct.charset*, %struct.charset** %charset635, align 8
  %compact_codes_p = getelementptr inbounds %struct.charset, %struct.charset* %349, i32 0, i32 5
  %bf.load700 = load i8, i8* %compact_codes_p, align 8
  %bf.lshr701 = lshr i8 %bf.load700, 4
  %bf.clear702 = and i8 %bf.lshr701, 1
  %bf.cast703 = trunc i8 %bf.clear702 to i1
  br i1 %bf.cast703, label %land.lhs.true.705, label %cond.false.727

land.lhs.true.705:                                ; preds = %cond.true.699
  %350 = load i64, i64* @Vcharset_hash_table, align 8
  %call706 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %350)
  %351 = load %struct.charset*, %struct.charset** %charset635, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %351, i32 0, i32 1
  %352 = load i64, i64* %hash_index, align 8
  %call707 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call706, i64 %352)
  %call708 = call i64 @AREF(i64 %call707, i64 5)
  %call709 = call zeroext i1 @CHAR_TABLE_P(i64 %call708)
  br i1 %call709, label %cond.true.711, label %cond.false.727

cond.true.711:                                    ; preds = %land.lhs.true.705
  %353 = load i64, i64* @Vcharset_hash_table, align 8
  %call712 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %353)
  %354 = load %struct.charset*, %struct.charset** %charset635, align 8
  %hash_index713 = getelementptr inbounds %struct.charset, %struct.charset* %354, i32 0, i32 1
  %355 = load i64, i64* %hash_index713, align 8
  %call714 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call712, i64 %355)
  %call715 = call i64 @AREF(i64 %call714, i64 5)
  %356 = load i32, i32* %c, align 4
  %call716 = call i64 @CHAR_TABLE_REF(i64 %call715, i32 %356)
  store i64 %call716, i64* @charset_work, align 8
  %357 = load i64, i64* @charset_work, align 8
  %call717 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp718 = icmp eq i64 %357, %call717
  br i1 %cmp718, label %cond.true.720, label %cond.false.722

cond.true.720:                                    ; preds = %cond.true.711
  %358 = load %struct.charset*, %struct.charset** %charset635, align 8
  %invalid_code721 = getelementptr inbounds %struct.charset, %struct.charset* %358, i32 0, i32 15
  %359 = load i32, i32* %invalid_code721, align 4
  br label %cond.end.725

cond.false.722:                                   ; preds = %cond.true.711
  %360 = load i64, i64* @charset_work, align 8
  %shr723 = ashr i64 %360, 2
  %conv724 = trunc i64 %shr723 to i32
  br label %cond.end.725

cond.end.725:                                     ; preds = %cond.false.722, %cond.true.720
  %cond726 = phi i32 [ %359, %cond.true.720 ], [ %conv724, %cond.false.722 ]
  br label %cond.end.729

cond.false.727:                                   ; preds = %land.lhs.true.705, %cond.true.699
  %361 = load %struct.charset*, %struct.charset** %charset635, align 8
  %362 = load i32, i32* %c, align 4
  %call728 = call i32 @encode_char(%struct.charset* %361, i32 %362)
  br label %cond.end.729

cond.end.729:                                     ; preds = %cond.false.727, %cond.end.725
  %cond730 = phi i32 [ %cond726, %cond.end.725 ], [ %call728, %cond.false.727 ]
  br label %cond.end.733

cond.false.731:                                   ; preds = %cond.false.695
  %363 = load %struct.charset*, %struct.charset** %charset635, align 8
  %364 = load i32, i32* %c, align 4
  %call732 = call i32 @encode_char(%struct.charset* %363, i32 %364)
  br label %cond.end.733

cond.end.733:                                     ; preds = %cond.false.731, %cond.end.729
  %cond734 = phi i32 [ %cond730, %cond.end.729 ], [ %call732, %cond.false.731 ]
  br label %cond.end.735

cond.end.735:                                     ; preds = %cond.end.733, %cond.end.693
  %cond736 = phi i32 [ %cond694, %cond.end.693 ], [ %cond734, %cond.end.733 ]
  br label %cond.end.737

cond.end.737:                                     ; preds = %cond.end.735, %cond.true.678
  %cond738 = phi i32 [ %336, %cond.true.678 ], [ %cond736, %cond.end.735 ]
  br label %cond.end.739

cond.end.739:                                     ; preds = %cond.end.737, %cond.true.670
  %cond740 = phi i32 [ %call671, %cond.true.670 ], [ %cond738, %cond.end.737 ]
  br label %cond.end.741

cond.end.741:                                     ; preds = %cond.end.739, %cond.true.656
  %cond742 = phi i32 [ %321, %cond.true.656 ], [ %cond740, %cond.end.739 ]
  store i32 %cond742, i32* %code, align 4
  %365 = load i8, i8* @charset_map_loaded, align 1
  %tobool743 = trunc i8 %365 to i1
  br i1 %tobool743, label %land.lhs.true.745, label %if.end.751

land.lhs.true.745:                                ; preds = %cond.end.741
  %366 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call746 = call i64 @coding_change_destination(%struct.coding_system* %366)
  store i64 %call746, i64* %offset640, align 8
  %tobool747 = icmp ne i64 %call746, 0
  br i1 %tobool747, label %if.then.748, label %if.end.751

if.then.748:                                      ; preds = %land.lhs.true.745
  %367 = load i64, i64* %offset640, align 8
  %368 = load i8*, i8** %dst, align 8
  %add.ptr749 = getelementptr inbounds i8, i8* %368, i64 %367
  store i8* %add.ptr749, i8** %dst, align 8
  %369 = load i64, i64* %offset640, align 8
  %370 = load i8*, i8** %dst_end, align 8
  %add.ptr750 = getelementptr inbounds i8, i8* %370, i64 %369
  store i8* %add.ptr750, i8** %dst_end, align 8
  br label %if.end.751

if.end.751:                                       ; preds = %if.then.748, %land.lhs.true.745, %cond.end.741
  br label %do.end.752

do.end.752:                                       ; preds = %if.end.751
  %371 = load %struct.charset*, %struct.charset** %charset635, align 8
  %dimension753 = getelementptr inbounds %struct.charset, %struct.charset* %371, i32 0, i32 2
  %372 = load i32, i32* %dimension753, align 4
  %cmp754 = icmp eq i32 %372, 1
  br i1 %cmp754, label %if.then.756, label %if.else.975

if.then.756:                                      ; preds = %do.end.752
  br label %do.body.757

do.body.757:                                      ; preds = %do.cond, %if.then.756
  %373 = load %struct.charset*, %struct.charset** %charset635, align 8
  %id759 = getelementptr inbounds %struct.charset, %struct.charset* %373, i32 0, i32 0
  %374 = load i32, i32* %id759, align 4
  store i32 %374, i32* %id758, align 4
  %375 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec760 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %375, i32 0, i32 3
  %iso_2022761 = bitcast %union.anon* %spec760 to %struct.iso_2022_spec*
  %flags762 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022761, i32 0, i32 0
  %376 = load i32, i32* %flags762, align 4
  %and763 = and i32 %376, 32768
  %tobool764 = icmp ne i32 %and763, 0
  br i1 %tobool764, label %land.lhs.true.765, label %if.end.771

land.lhs.true.765:                                ; preds = %do.body.757
  %377 = load i32, i32* %id758, align 4
  %378 = load i32, i32* @charset_ascii, align 4
  %cmp766 = icmp eq i32 %377, %378
  br i1 %cmp766, label %if.then.768, label %if.end.771

if.then.768:                                      ; preds = %land.lhs.true.765
  %379 = load i32, i32* @charset_jisx0201_roman, align 4
  store i32 %379, i32* %id758, align 4
  %380 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %381 = load i32, i32* %id758, align 4
  %idx.ext769 = sext i32 %381 to i64
  %add.ptr770 = getelementptr inbounds %struct.charset, %struct.charset* %380, i64 %idx.ext769
  store %struct.charset* %add.ptr770, %struct.charset** %charset635, align 8
  br label %if.end.771

if.end.771:                                       ; preds = %if.then.768, %land.lhs.true.765, %do.body.757
  %382 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec772 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %382, i32 0, i32 3
  %iso_2022773 = bitcast %union.anon* %spec772 to %struct.iso_2022_spec*
  %single_shifting = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022773, i32 0, i32 4
  %bf.load774 = load i8, i8* %single_shifting, align 4
  %bf.clear775 = and i8 %bf.load774, 1
  %bf.cast776 = trunc i8 %bf.clear775 to i1
  br i1 %bf.cast776, label %if.then.777, label %if.else.857

if.then.777:                                      ; preds = %if.end.771
  %383 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec778 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %383, i32 0, i32 3
  %iso_2022779 = bitcast %union.anon* %spec778 to %struct.iso_2022_spec*
  %flags780 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022779, i32 0, i32 0
  %384 = load i32, i32* %flags780, align 4
  %and781 = and i32 %384, 8
  %tobool782 = icmp ne i32 %and781, 0
  br i1 %tobool782, label %if.then.783, label %if.else.790

if.then.783:                                      ; preds = %if.then.777
  br label %do.body.784

do.body.784:                                      ; preds = %if.then.783
  %385 = load i64, i64* %produced_chars, align 8
  %inc785 = add nsw i64 %385, 1
  store i64 %inc785, i64* %produced_chars, align 8
  %386 = load i32, i32* %code, align 4
  %and786 = and i32 %386, 127
  %conv787 = trunc i32 %and786 to i8
  %387 = load i8*, i8** %dst, align 8
  %incdec.ptr788 = getelementptr inbounds i8, i8* %387, i32 1
  store i8* %incdec.ptr788, i8** %dst, align 8
  store i8 %conv787, i8* %387, align 1
  br label %do.end.789

do.end.789:                                       ; preds = %do.body.784
  br label %if.end.851

if.else.790:                                      ; preds = %if.then.777
  br label %do.body.791

do.body.791:                                      ; preds = %if.else.790
  %388 = load i64, i64* %produced_chars, align 8
  %inc792 = add nsw i64 %388, 1
  store i64 %inc792, i64* %produced_chars, align 8
  %389 = load i8, i8* %multibytep, align 1
  %tobool793 = trunc i8 %389 to i1
  br i1 %tobool793, label %if.then.794, label %if.else.845

if.then.794:                                      ; preds = %do.body.791
  %390 = load i32, i32* %code, align 4
  %or796 = or i32 %390, 128
  store i32 %or796, i32* %ch795, align 4
  %391 = load i32, i32* %ch795, align 4
  %cmp797 = icmp uge i32 %391, 128
  br i1 %cmp797, label %if.then.799, label %if.end.801

if.then.799:                                      ; preds = %if.then.794
  %392 = load i32, i32* %ch795, align 4
  %add800 = add i32 %392, 4194048
  store i32 %add800, i32* %ch795, align 4
  br label %if.end.801

if.end.801:                                       ; preds = %if.then.799, %if.then.794
  br label %do.body.802

do.body.802:                                      ; preds = %if.end.801
  %393 = load i32, i32* %ch795, align 4
  %cmp803 = icmp ule i32 %393, 127
  br i1 %cmp803, label %if.then.805, label %if.else.808

if.then.805:                                      ; preds = %do.body.802
  %394 = load i32, i32* %ch795, align 4
  %conv806 = trunc i32 %394 to i8
  %395 = load i8*, i8** %dst, align 8
  %incdec.ptr807 = getelementptr inbounds i8, i8* %395, i32 1
  store i8* %incdec.ptr807, i8** %dst, align 8
  store i8 %conv806, i8* %395, align 1
  br label %if.end.843

if.else.808:                                      ; preds = %do.body.802
  %396 = load i32, i32* %ch795, align 4
  %cmp809 = icmp ule i32 %396, 2047
  br i1 %cmp809, label %if.then.811, label %if.else.820

if.then.811:                                      ; preds = %if.else.808
  %397 = load i32, i32* %ch795, align 4
  %shr812 = lshr i32 %397, 6
  %or813 = or i32 192, %shr812
  %conv814 = trunc i32 %or813 to i8
  %398 = load i8*, i8** %dst, align 8
  %incdec.ptr815 = getelementptr inbounds i8, i8* %398, i32 1
  store i8* %incdec.ptr815, i8** %dst, align 8
  store i8 %conv814, i8* %398, align 1
  %399 = load i32, i32* %ch795, align 4
  %and816 = and i32 %399, 63
  %or817 = or i32 128, %and816
  %conv818 = trunc i32 %or817 to i8
  %400 = load i8*, i8** %dst, align 8
  %incdec.ptr819 = getelementptr inbounds i8, i8* %400, i32 1
  store i8* %incdec.ptr819, i8** %dst, align 8
  store i8 %conv818, i8* %400, align 1
  br label %if.end.842

if.else.820:                                      ; preds = %if.else.808
  %401 = load i32, i32* %ch795, align 4
  %cmp821 = icmp ule i32 %401, 65535
  br i1 %cmp821, label %if.then.823, label %if.else.837

if.then.823:                                      ; preds = %if.else.820
  %402 = load i32, i32* %ch795, align 4
  %shr824 = lshr i32 %402, 12
  %or825 = or i32 224, %shr824
  %conv826 = trunc i32 %or825 to i8
  %403 = load i8*, i8** %dst, align 8
  %incdec.ptr827 = getelementptr inbounds i8, i8* %403, i32 1
  store i8* %incdec.ptr827, i8** %dst, align 8
  store i8 %conv826, i8* %403, align 1
  %404 = load i32, i32* %ch795, align 4
  %shr828 = lshr i32 %404, 6
  %and829 = and i32 %shr828, 63
  %or830 = or i32 128, %and829
  %conv831 = trunc i32 %or830 to i8
  %405 = load i8*, i8** %dst, align 8
  %incdec.ptr832 = getelementptr inbounds i8, i8* %405, i32 1
  store i8* %incdec.ptr832, i8** %dst, align 8
  store i8 %conv831, i8* %405, align 1
  %406 = load i32, i32* %ch795, align 4
  %and833 = and i32 %406, 63
  %or834 = or i32 128, %and833
  %conv835 = trunc i32 %or834 to i8
  %407 = load i8*, i8** %dst, align 8
  %incdec.ptr836 = getelementptr inbounds i8, i8* %407, i32 1
  store i8* %incdec.ptr836, i8** %dst, align 8
  store i8 %conv835, i8* %407, align 1
  br label %if.end.841

if.else.837:                                      ; preds = %if.else.820
  %408 = load i32, i32* %ch795, align 4
  %409 = load i8*, i8** %dst, align 8
  %call838 = call i32 @char_string(i32 %408, i8* %409)
  %410 = load i8*, i8** %dst, align 8
  %idx.ext839 = sext i32 %call838 to i64
  %add.ptr840 = getelementptr inbounds i8, i8* %410, i64 %idx.ext839
  store i8* %add.ptr840, i8** %dst, align 8
  br label %if.end.841

if.end.841:                                       ; preds = %if.else.837, %if.then.823
  br label %if.end.842

if.end.842:                                       ; preds = %if.end.841, %if.then.811
  br label %if.end.843

if.end.843:                                       ; preds = %if.end.842, %if.then.805
  br label %do.end.844

do.end.844:                                       ; preds = %if.end.843
  br label %if.end.849

if.else.845:                                      ; preds = %do.body.791
  %411 = load i32, i32* %code, align 4
  %or846 = or i32 %411, 128
  %conv847 = trunc i32 %or846 to i8
  %412 = load i8*, i8** %dst, align 8
  %incdec.ptr848 = getelementptr inbounds i8, i8* %412, i32 1
  store i8* %incdec.ptr848, i8** %dst, align 8
  store i8 %conv847, i8* %412, align 1
  br label %if.end.849

if.end.849:                                       ; preds = %if.else.845, %do.end.844
  br label %do.end.850

do.end.850:                                       ; preds = %if.end.849
  br label %if.end.851

if.end.851:                                       ; preds = %do.end.850, %do.end.789
  %413 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec852 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %413, i32 0, i32 3
  %iso_2022853 = bitcast %union.anon* %spec852 to %struct.iso_2022_spec*
  %single_shifting854 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022853, i32 0, i32 4
  %bf.load855 = load i8, i8* %single_shifting854, align 4
  %bf.clear856 = and i8 %bf.load855, -2
  store i8 %bf.clear856, i8* %single_shifting854, align 4
  br label %do.end.974

if.else.857:                                      ; preds = %if.end.771
  %414 = load i32, i32* %id758, align 4
  %415 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec858 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %415, i32 0, i32 3
  %iso_2022859 = bitcast %union.anon* %spec858 to %struct.iso_2022_spec*
  %current_invocation860 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022859, i32 0, i32 1
  %arrayidx861 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation860, i32 0, i64 0
  %416 = load i32, i32* %arrayidx861, align 4
  %cmp862 = icmp slt i32 %416, 0
  br i1 %cmp862, label %cond.true.864, label %cond.false.865

cond.true.864:                                    ; preds = %if.else.857
  br label %cond.end.875

cond.false.865:                                   ; preds = %if.else.857
  %417 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec866 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %417, i32 0, i32 3
  %iso_2022867 = bitcast %union.anon* %spec866 to %struct.iso_2022_spec*
  %current_invocation868 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022867, i32 0, i32 1
  %arrayidx869 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation868, i32 0, i64 0
  %418 = load i32, i32* %arrayidx869, align 4
  %idxprom870 = sext i32 %418 to i64
  %419 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec871 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %419, i32 0, i32 3
  %iso_2022872 = bitcast %union.anon* %spec871 to %struct.iso_2022_spec*
  %current_designation873 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022872, i32 0, i32 2
  %arrayidx874 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation873, i32 0, i64 %idxprom870
  %420 = load i32, i32* %arrayidx874, align 4
  br label %cond.end.875

cond.end.875:                                     ; preds = %cond.false.865, %cond.true.864
  %cond876 = phi i32 [ -1, %cond.true.864 ], [ %420, %cond.false.865 ]
  %cmp877 = icmp eq i32 %414, %cond876
  br i1 %cmp877, label %if.then.879, label %if.else.886

if.then.879:                                      ; preds = %cond.end.875
  br label %do.body.880

do.body.880:                                      ; preds = %if.then.879
  %421 = load i64, i64* %produced_chars, align 8
  %inc881 = add nsw i64 %421, 1
  store i64 %inc881, i64* %produced_chars, align 8
  %422 = load i32, i32* %code, align 4
  %and882 = and i32 %422, 127
  %conv883 = trunc i32 %and882 to i8
  %423 = load i8*, i8** %dst, align 8
  %incdec.ptr884 = getelementptr inbounds i8, i8* %423, i32 1
  store i8* %incdec.ptr884, i8** %dst, align 8
  store i8 %conv883, i8* %423, align 1
  br label %do.end.885

do.end.885:                                       ; preds = %do.body.880
  br label %do.end.974

if.else.886:                                      ; preds = %cond.end.875
  %424 = load i32, i32* %id758, align 4
  %425 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec887 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %425, i32 0, i32 3
  %iso_2022888 = bitcast %union.anon* %spec887 to %struct.iso_2022_spec*
  %current_invocation889 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022888, i32 0, i32 1
  %arrayidx890 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation889, i32 0, i64 1
  %426 = load i32, i32* %arrayidx890, align 4
  %cmp891 = icmp slt i32 %426, 0
  br i1 %cmp891, label %cond.true.893, label %cond.false.894

cond.true.893:                                    ; preds = %if.else.886
  br label %cond.end.904

cond.false.894:                                   ; preds = %if.else.886
  %427 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec895 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %427, i32 0, i32 3
  %iso_2022896 = bitcast %union.anon* %spec895 to %struct.iso_2022_spec*
  %current_invocation897 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022896, i32 0, i32 1
  %arrayidx898 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation897, i32 0, i64 1
  %428 = load i32, i32* %arrayidx898, align 4
  %idxprom899 = sext i32 %428 to i64
  %429 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec900 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %429, i32 0, i32 3
  %iso_2022901 = bitcast %union.anon* %spec900 to %struct.iso_2022_spec*
  %current_designation902 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022901, i32 0, i32 2
  %arrayidx903 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation902, i32 0, i64 %idxprom899
  %430 = load i32, i32* %arrayidx903, align 4
  br label %cond.end.904

cond.end.904:                                     ; preds = %cond.false.894, %cond.true.893
  %cond905 = phi i32 [ -1, %cond.true.893 ], [ %430, %cond.false.894 ]
  %cmp906 = icmp eq i32 %424, %cond905
  br i1 %cmp906, label %if.then.908, label %if.else.969

if.then.908:                                      ; preds = %cond.end.904
  br label %do.body.909

do.body.909:                                      ; preds = %if.then.908
  %431 = load i64, i64* %produced_chars, align 8
  %inc910 = add nsw i64 %431, 1
  store i64 %inc910, i64* %produced_chars, align 8
  %432 = load i8, i8* %multibytep, align 1
  %tobool911 = trunc i8 %432 to i1
  br i1 %tobool911, label %if.then.912, label %if.else.963

if.then.912:                                      ; preds = %do.body.909
  %433 = load i32, i32* %code, align 4
  %or914 = or i32 %433, 128
  store i32 %or914, i32* %ch913, align 4
  %434 = load i32, i32* %ch913, align 4
  %cmp915 = icmp uge i32 %434, 128
  br i1 %cmp915, label %if.then.917, label %if.end.919

if.then.917:                                      ; preds = %if.then.912
  %435 = load i32, i32* %ch913, align 4
  %add918 = add i32 %435, 4194048
  store i32 %add918, i32* %ch913, align 4
  br label %if.end.919

if.end.919:                                       ; preds = %if.then.917, %if.then.912
  br label %do.body.920

do.body.920:                                      ; preds = %if.end.919
  %436 = load i32, i32* %ch913, align 4
  %cmp921 = icmp ule i32 %436, 127
  br i1 %cmp921, label %if.then.923, label %if.else.926

if.then.923:                                      ; preds = %do.body.920
  %437 = load i32, i32* %ch913, align 4
  %conv924 = trunc i32 %437 to i8
  %438 = load i8*, i8** %dst, align 8
  %incdec.ptr925 = getelementptr inbounds i8, i8* %438, i32 1
  store i8* %incdec.ptr925, i8** %dst, align 8
  store i8 %conv924, i8* %438, align 1
  br label %if.end.961

if.else.926:                                      ; preds = %do.body.920
  %439 = load i32, i32* %ch913, align 4
  %cmp927 = icmp ule i32 %439, 2047
  br i1 %cmp927, label %if.then.929, label %if.else.938

if.then.929:                                      ; preds = %if.else.926
  %440 = load i32, i32* %ch913, align 4
  %shr930 = lshr i32 %440, 6
  %or931 = or i32 192, %shr930
  %conv932 = trunc i32 %or931 to i8
  %441 = load i8*, i8** %dst, align 8
  %incdec.ptr933 = getelementptr inbounds i8, i8* %441, i32 1
  store i8* %incdec.ptr933, i8** %dst, align 8
  store i8 %conv932, i8* %441, align 1
  %442 = load i32, i32* %ch913, align 4
  %and934 = and i32 %442, 63
  %or935 = or i32 128, %and934
  %conv936 = trunc i32 %or935 to i8
  %443 = load i8*, i8** %dst, align 8
  %incdec.ptr937 = getelementptr inbounds i8, i8* %443, i32 1
  store i8* %incdec.ptr937, i8** %dst, align 8
  store i8 %conv936, i8* %443, align 1
  br label %if.end.960

if.else.938:                                      ; preds = %if.else.926
  %444 = load i32, i32* %ch913, align 4
  %cmp939 = icmp ule i32 %444, 65535
  br i1 %cmp939, label %if.then.941, label %if.else.955

if.then.941:                                      ; preds = %if.else.938
  %445 = load i32, i32* %ch913, align 4
  %shr942 = lshr i32 %445, 12
  %or943 = or i32 224, %shr942
  %conv944 = trunc i32 %or943 to i8
  %446 = load i8*, i8** %dst, align 8
  %incdec.ptr945 = getelementptr inbounds i8, i8* %446, i32 1
  store i8* %incdec.ptr945, i8** %dst, align 8
  store i8 %conv944, i8* %446, align 1
  %447 = load i32, i32* %ch913, align 4
  %shr946 = lshr i32 %447, 6
  %and947 = and i32 %shr946, 63
  %or948 = or i32 128, %and947
  %conv949 = trunc i32 %or948 to i8
  %448 = load i8*, i8** %dst, align 8
  %incdec.ptr950 = getelementptr inbounds i8, i8* %448, i32 1
  store i8* %incdec.ptr950, i8** %dst, align 8
  store i8 %conv949, i8* %448, align 1
  %449 = load i32, i32* %ch913, align 4
  %and951 = and i32 %449, 63
  %or952 = or i32 128, %and951
  %conv953 = trunc i32 %or952 to i8
  %450 = load i8*, i8** %dst, align 8
  %incdec.ptr954 = getelementptr inbounds i8, i8* %450, i32 1
  store i8* %incdec.ptr954, i8** %dst, align 8
  store i8 %conv953, i8* %450, align 1
  br label %if.end.959

if.else.955:                                      ; preds = %if.else.938
  %451 = load i32, i32* %ch913, align 4
  %452 = load i8*, i8** %dst, align 8
  %call956 = call i32 @char_string(i32 %451, i8* %452)
  %453 = load i8*, i8** %dst, align 8
  %idx.ext957 = sext i32 %call956 to i64
  %add.ptr958 = getelementptr inbounds i8, i8* %453, i64 %idx.ext957
  store i8* %add.ptr958, i8** %dst, align 8
  br label %if.end.959

if.end.959:                                       ; preds = %if.else.955, %if.then.941
  br label %if.end.960

if.end.960:                                       ; preds = %if.end.959, %if.then.929
  br label %if.end.961

if.end.961:                                       ; preds = %if.end.960, %if.then.923
  br label %do.end.962

do.end.962:                                       ; preds = %if.end.961
  br label %if.end.967

if.else.963:                                      ; preds = %do.body.909
  %454 = load i32, i32* %code, align 4
  %or964 = or i32 %454, 128
  %conv965 = trunc i32 %or964 to i8
  %455 = load i8*, i8** %dst, align 8
  %incdec.ptr966 = getelementptr inbounds i8, i8* %455, i32 1
  store i8* %incdec.ptr966, i8** %dst, align 8
  store i8 %conv965, i8* %455, align 1
  br label %if.end.967

if.end.967:                                       ; preds = %if.else.963, %do.end.962
  br label %do.end.968

do.end.968:                                       ; preds = %if.end.967
  br label %do.end.974

if.else.969:                                      ; preds = %cond.end.904
  %456 = load %struct.charset*, %struct.charset** %charset635, align 8
  %457 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %458 = load i8*, i8** %dst, align 8
  %call970 = call i8* @encode_invocation_designation(%struct.charset* %456, %struct.coding_system* %457, i8* %458, i64* %produced_chars)
  store i8* %call970, i8** %dst, align 8
  br label %if.end.971

if.end.971:                                       ; preds = %if.else.969
  br label %if.end.972

if.end.972:                                       ; preds = %if.end.971
  br label %if.end.973

if.end.973:                                       ; preds = %if.end.972
  br label %do.cond

do.cond:                                          ; preds = %if.end.973
  br i1 true, label %do.body.757, label %do.end.974

do.end.974:                                       ; preds = %do.cond, %do.end.968, %do.end.885, %if.end.851
  br label %if.end.1326

if.else.975:                                      ; preds = %do.end.752
  br label %do.body.976

do.body.976:                                      ; preds = %do.cond.1324, %if.else.975
  %459 = load %struct.charset*, %struct.charset** %charset635, align 8
  %id978 = getelementptr inbounds %struct.charset, %struct.charset* %459, i32 0, i32 0
  %460 = load i32, i32* %id978, align 4
  store i32 %460, i32* %id977, align 4
  %461 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec979 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %461, i32 0, i32 3
  %iso_2022980 = bitcast %union.anon* %spec979 to %struct.iso_2022_spec*
  %flags981 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022980, i32 0, i32 0
  %462 = load i32, i32* %flags981, align 4
  %and982 = and i32 %462, 65536
  %tobool983 = icmp ne i32 %and982, 0
  br i1 %tobool983, label %land.lhs.true.984, label %if.end.990

land.lhs.true.984:                                ; preds = %do.body.976
  %463 = load i32, i32* %id977, align 4
  %464 = load i32, i32* @charset_jisx0208, align 4
  %cmp985 = icmp eq i32 %463, %464
  br i1 %cmp985, label %if.then.987, label %if.end.990

if.then.987:                                      ; preds = %land.lhs.true.984
  %465 = load i32, i32* @charset_jisx0208_1978, align 4
  store i32 %465, i32* %id977, align 4
  %466 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %467 = load i32, i32* %id977, align 4
  %idx.ext988 = sext i32 %467 to i64
  %add.ptr989 = getelementptr inbounds %struct.charset, %struct.charset* %466, i64 %idx.ext988
  store %struct.charset* %add.ptr989, %struct.charset** %charset635, align 8
  br label %if.end.990

if.end.990:                                       ; preds = %if.then.987, %land.lhs.true.984, %do.body.976
  %468 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec991 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %468, i32 0, i32 3
  %iso_2022992 = bitcast %union.anon* %spec991 to %struct.iso_2022_spec*
  %single_shifting993 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022992, i32 0, i32 4
  %bf.load994 = load i8, i8* %single_shifting993, align 4
  %bf.clear995 = and i8 %bf.load994, 1
  %bf.cast996 = trunc i8 %bf.clear995 to i1
  br i1 %bf.cast996, label %if.then.997, label %if.else.1142

if.then.997:                                      ; preds = %if.end.990
  %469 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec998 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %469, i32 0, i32 3
  %iso_2022999 = bitcast %union.anon* %spec998 to %struct.iso_2022_spec*
  %flags1000 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022999, i32 0, i32 0
  %470 = load i32, i32* %flags1000, align 4
  %and1001 = and i32 %470, 8
  %tobool1002 = icmp ne i32 %and1001, 0
  br i1 %tobool1002, label %if.then.1003, label %if.else.1016

if.then.1003:                                     ; preds = %if.then.997
  br label %do.body.1004

do.body.1004:                                     ; preds = %if.then.1003
  %471 = load i64, i64* %produced_chars, align 8
  %add1005 = add nsw i64 %471, 2
  store i64 %add1005, i64* %produced_chars, align 8
  %472 = load i32, i32* %code, align 4
  %shr1006 = lshr i32 %472, 8
  %and1007 = and i32 %shr1006, 127
  %conv1008 = trunc i32 %and1007 to i8
  %473 = load i8*, i8** %dst, align 8
  %incdec.ptr1009 = getelementptr inbounds i8, i8* %473, i32 1
  store i8* %incdec.ptr1009, i8** %dst, align 8
  store i8 %conv1008, i8* %473, align 1
  %474 = load i32, i32* %code, align 4
  %and1010 = and i32 %474, 255
  %and1011 = and i32 %and1010, 127
  %conv1012 = trunc i32 %and1011 to i8
  %475 = load i8*, i8** %dst, align 8
  %incdec.ptr1013 = getelementptr inbounds i8, i8* %475, i32 1
  store i8* %incdec.ptr1013, i8** %dst, align 8
  store i8 %conv1012, i8* %475, align 1
  br label %do.end.1015

do.end.1015:                                      ; preds = %do.body.1004
  br label %if.end.1136

if.else.1016:                                     ; preds = %if.then.997
  br label %do.body.1017

do.body.1017:                                     ; preds = %if.else.1016
  %476 = load i64, i64* %produced_chars, align 8
  %add1018 = add nsw i64 %476, 2
  store i64 %add1018, i64* %produced_chars, align 8
  %477 = load i8, i8* %multibytep, align 1
  %tobool1019 = trunc i8 %477 to i1
  br i1 %tobool1019, label %if.then.1020, label %if.else.1124

if.then.1020:                                     ; preds = %do.body.1017
  %478 = load i32, i32* %code, align 4
  %shr1022 = lshr i32 %478, 8
  %or1023 = or i32 %shr1022, 128
  store i32 %or1023, i32* %ch1021, align 4
  %479 = load i32, i32* %ch1021, align 4
  %cmp1024 = icmp uge i32 %479, 128
  br i1 %cmp1024, label %if.then.1026, label %if.end.1028

if.then.1026:                                     ; preds = %if.then.1020
  %480 = load i32, i32* %ch1021, align 4
  %add1027 = add i32 %480, 4194048
  store i32 %add1027, i32* %ch1021, align 4
  br label %if.end.1028

if.end.1028:                                      ; preds = %if.then.1026, %if.then.1020
  br label %do.body.1029

do.body.1029:                                     ; preds = %if.end.1028
  %481 = load i32, i32* %ch1021, align 4
  %cmp1030 = icmp ule i32 %481, 127
  br i1 %cmp1030, label %if.then.1032, label %if.else.1035

if.then.1032:                                     ; preds = %do.body.1029
  %482 = load i32, i32* %ch1021, align 4
  %conv1033 = trunc i32 %482 to i8
  %483 = load i8*, i8** %dst, align 8
  %incdec.ptr1034 = getelementptr inbounds i8, i8* %483, i32 1
  store i8* %incdec.ptr1034, i8** %dst, align 8
  store i8 %conv1033, i8* %483, align 1
  br label %if.end.1070

if.else.1035:                                     ; preds = %do.body.1029
  %484 = load i32, i32* %ch1021, align 4
  %cmp1036 = icmp ule i32 %484, 2047
  br i1 %cmp1036, label %if.then.1038, label %if.else.1047

if.then.1038:                                     ; preds = %if.else.1035
  %485 = load i32, i32* %ch1021, align 4
  %shr1039 = lshr i32 %485, 6
  %or1040 = or i32 192, %shr1039
  %conv1041 = trunc i32 %or1040 to i8
  %486 = load i8*, i8** %dst, align 8
  %incdec.ptr1042 = getelementptr inbounds i8, i8* %486, i32 1
  store i8* %incdec.ptr1042, i8** %dst, align 8
  store i8 %conv1041, i8* %486, align 1
  %487 = load i32, i32* %ch1021, align 4
  %and1043 = and i32 %487, 63
  %or1044 = or i32 128, %and1043
  %conv1045 = trunc i32 %or1044 to i8
  %488 = load i8*, i8** %dst, align 8
  %incdec.ptr1046 = getelementptr inbounds i8, i8* %488, i32 1
  store i8* %incdec.ptr1046, i8** %dst, align 8
  store i8 %conv1045, i8* %488, align 1
  br label %if.end.1069

if.else.1047:                                     ; preds = %if.else.1035
  %489 = load i32, i32* %ch1021, align 4
  %cmp1048 = icmp ule i32 %489, 65535
  br i1 %cmp1048, label %if.then.1050, label %if.else.1064

if.then.1050:                                     ; preds = %if.else.1047
  %490 = load i32, i32* %ch1021, align 4
  %shr1051 = lshr i32 %490, 12
  %or1052 = or i32 224, %shr1051
  %conv1053 = trunc i32 %or1052 to i8
  %491 = load i8*, i8** %dst, align 8
  %incdec.ptr1054 = getelementptr inbounds i8, i8* %491, i32 1
  store i8* %incdec.ptr1054, i8** %dst, align 8
  store i8 %conv1053, i8* %491, align 1
  %492 = load i32, i32* %ch1021, align 4
  %shr1055 = lshr i32 %492, 6
  %and1056 = and i32 %shr1055, 63
  %or1057 = or i32 128, %and1056
  %conv1058 = trunc i32 %or1057 to i8
  %493 = load i8*, i8** %dst, align 8
  %incdec.ptr1059 = getelementptr inbounds i8, i8* %493, i32 1
  store i8* %incdec.ptr1059, i8** %dst, align 8
  store i8 %conv1058, i8* %493, align 1
  %494 = load i32, i32* %ch1021, align 4
  %and1060 = and i32 %494, 63
  %or1061 = or i32 128, %and1060
  %conv1062 = trunc i32 %or1061 to i8
  %495 = load i8*, i8** %dst, align 8
  %incdec.ptr1063 = getelementptr inbounds i8, i8* %495, i32 1
  store i8* %incdec.ptr1063, i8** %dst, align 8
  store i8 %conv1062, i8* %495, align 1
  br label %if.end.1068

if.else.1064:                                     ; preds = %if.else.1047
  %496 = load i32, i32* %ch1021, align 4
  %497 = load i8*, i8** %dst, align 8
  %call1065 = call i32 @char_string(i32 %496, i8* %497)
  %498 = load i8*, i8** %dst, align 8
  %idx.ext1066 = sext i32 %call1065 to i64
  %add.ptr1067 = getelementptr inbounds i8, i8* %498, i64 %idx.ext1066
  store i8* %add.ptr1067, i8** %dst, align 8
  br label %if.end.1068

if.end.1068:                                      ; preds = %if.else.1064, %if.then.1050
  br label %if.end.1069

if.end.1069:                                      ; preds = %if.end.1068, %if.then.1038
  br label %if.end.1070

if.end.1070:                                      ; preds = %if.end.1069, %if.then.1032
  br label %do.end.1072

do.end.1072:                                      ; preds = %if.end.1070
  %499 = load i32, i32* %code, align 4
  %and1073 = and i32 %499, 255
  %or1074 = or i32 %and1073, 128
  store i32 %or1074, i32* %ch1021, align 4
  %500 = load i32, i32* %ch1021, align 4
  %cmp1075 = icmp uge i32 %500, 128
  br i1 %cmp1075, label %if.then.1077, label %if.end.1079

if.then.1077:                                     ; preds = %do.end.1072
  %501 = load i32, i32* %ch1021, align 4
  %add1078 = add i32 %501, 4194048
  store i32 %add1078, i32* %ch1021, align 4
  br label %if.end.1079

if.end.1079:                                      ; preds = %if.then.1077, %do.end.1072
  br label %do.body.1080

do.body.1080:                                     ; preds = %if.end.1079
  %502 = load i32, i32* %ch1021, align 4
  %cmp1081 = icmp ule i32 %502, 127
  br i1 %cmp1081, label %if.then.1083, label %if.else.1086

if.then.1083:                                     ; preds = %do.body.1080
  %503 = load i32, i32* %ch1021, align 4
  %conv1084 = trunc i32 %503 to i8
  %504 = load i8*, i8** %dst, align 8
  %incdec.ptr1085 = getelementptr inbounds i8, i8* %504, i32 1
  store i8* %incdec.ptr1085, i8** %dst, align 8
  store i8 %conv1084, i8* %504, align 1
  br label %if.end.1121

if.else.1086:                                     ; preds = %do.body.1080
  %505 = load i32, i32* %ch1021, align 4
  %cmp1087 = icmp ule i32 %505, 2047
  br i1 %cmp1087, label %if.then.1089, label %if.else.1098

if.then.1089:                                     ; preds = %if.else.1086
  %506 = load i32, i32* %ch1021, align 4
  %shr1090 = lshr i32 %506, 6
  %or1091 = or i32 192, %shr1090
  %conv1092 = trunc i32 %or1091 to i8
  %507 = load i8*, i8** %dst, align 8
  %incdec.ptr1093 = getelementptr inbounds i8, i8* %507, i32 1
  store i8* %incdec.ptr1093, i8** %dst, align 8
  store i8 %conv1092, i8* %507, align 1
  %508 = load i32, i32* %ch1021, align 4
  %and1094 = and i32 %508, 63
  %or1095 = or i32 128, %and1094
  %conv1096 = trunc i32 %or1095 to i8
  %509 = load i8*, i8** %dst, align 8
  %incdec.ptr1097 = getelementptr inbounds i8, i8* %509, i32 1
  store i8* %incdec.ptr1097, i8** %dst, align 8
  store i8 %conv1096, i8* %509, align 1
  br label %if.end.1120

if.else.1098:                                     ; preds = %if.else.1086
  %510 = load i32, i32* %ch1021, align 4
  %cmp1099 = icmp ule i32 %510, 65535
  br i1 %cmp1099, label %if.then.1101, label %if.else.1115

if.then.1101:                                     ; preds = %if.else.1098
  %511 = load i32, i32* %ch1021, align 4
  %shr1102 = lshr i32 %511, 12
  %or1103 = or i32 224, %shr1102
  %conv1104 = trunc i32 %or1103 to i8
  %512 = load i8*, i8** %dst, align 8
  %incdec.ptr1105 = getelementptr inbounds i8, i8* %512, i32 1
  store i8* %incdec.ptr1105, i8** %dst, align 8
  store i8 %conv1104, i8* %512, align 1
  %513 = load i32, i32* %ch1021, align 4
  %shr1106 = lshr i32 %513, 6
  %and1107 = and i32 %shr1106, 63
  %or1108 = or i32 128, %and1107
  %conv1109 = trunc i32 %or1108 to i8
  %514 = load i8*, i8** %dst, align 8
  %incdec.ptr1110 = getelementptr inbounds i8, i8* %514, i32 1
  store i8* %incdec.ptr1110, i8** %dst, align 8
  store i8 %conv1109, i8* %514, align 1
  %515 = load i32, i32* %ch1021, align 4
  %and1111 = and i32 %515, 63
  %or1112 = or i32 128, %and1111
  %conv1113 = trunc i32 %or1112 to i8
  %516 = load i8*, i8** %dst, align 8
  %incdec.ptr1114 = getelementptr inbounds i8, i8* %516, i32 1
  store i8* %incdec.ptr1114, i8** %dst, align 8
  store i8 %conv1113, i8* %516, align 1
  br label %if.end.1119

if.else.1115:                                     ; preds = %if.else.1098
  %517 = load i32, i32* %ch1021, align 4
  %518 = load i8*, i8** %dst, align 8
  %call1116 = call i32 @char_string(i32 %517, i8* %518)
  %519 = load i8*, i8** %dst, align 8
  %idx.ext1117 = sext i32 %call1116 to i64
  %add.ptr1118 = getelementptr inbounds i8, i8* %519, i64 %idx.ext1117
  store i8* %add.ptr1118, i8** %dst, align 8
  br label %if.end.1119

if.end.1119:                                      ; preds = %if.else.1115, %if.then.1101
  br label %if.end.1120

if.end.1120:                                      ; preds = %if.end.1119, %if.then.1089
  br label %if.end.1121

if.end.1121:                                      ; preds = %if.end.1120, %if.then.1083
  br label %do.end.1123

do.end.1123:                                      ; preds = %if.end.1121
  br label %if.end.1133

if.else.1124:                                     ; preds = %do.body.1017
  %520 = load i32, i32* %code, align 4
  %shr1125 = lshr i32 %520, 8
  %or1126 = or i32 %shr1125, 128
  %conv1127 = trunc i32 %or1126 to i8
  %521 = load i8*, i8** %dst, align 8
  %incdec.ptr1128 = getelementptr inbounds i8, i8* %521, i32 1
  store i8* %incdec.ptr1128, i8** %dst, align 8
  store i8 %conv1127, i8* %521, align 1
  %522 = load i32, i32* %code, align 4
  %and1129 = and i32 %522, 255
  %or1130 = or i32 %and1129, 128
  %conv1131 = trunc i32 %or1130 to i8
  %523 = load i8*, i8** %dst, align 8
  %incdec.ptr1132 = getelementptr inbounds i8, i8* %523, i32 1
  store i8* %incdec.ptr1132, i8** %dst, align 8
  store i8 %conv1131, i8* %523, align 1
  br label %if.end.1133

if.end.1133:                                      ; preds = %if.else.1124, %do.end.1123
  br label %do.end.1135

do.end.1135:                                      ; preds = %if.end.1133
  br label %if.end.1136

if.end.1136:                                      ; preds = %do.end.1135, %do.end.1015
  %524 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1137 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %524, i32 0, i32 3
  %iso_20221138 = bitcast %union.anon* %spec1137 to %struct.iso_2022_spec*
  %single_shifting1139 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221138, i32 0, i32 4
  %bf.load1140 = load i8, i8* %single_shifting1139, align 4
  %bf.clear1141 = and i8 %bf.load1140, -2
  store i8 %bf.clear1141, i8* %single_shifting1139, align 4
  br label %do.end.1325

if.else.1142:                                     ; preds = %if.end.990
  %525 = load i32, i32* %id977, align 4
  %526 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1143 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %526, i32 0, i32 3
  %iso_20221144 = bitcast %union.anon* %spec1143 to %struct.iso_2022_spec*
  %current_invocation1145 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221144, i32 0, i32 1
  %arrayidx1146 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1145, i32 0, i64 0
  %527 = load i32, i32* %arrayidx1146, align 4
  %cmp1147 = icmp slt i32 %527, 0
  br i1 %cmp1147, label %cond.true.1149, label %cond.false.1150

cond.true.1149:                                   ; preds = %if.else.1142
  br label %cond.end.1160

cond.false.1150:                                  ; preds = %if.else.1142
  %528 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1151 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %528, i32 0, i32 3
  %iso_20221152 = bitcast %union.anon* %spec1151 to %struct.iso_2022_spec*
  %current_invocation1153 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221152, i32 0, i32 1
  %arrayidx1154 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1153, i32 0, i64 0
  %529 = load i32, i32* %arrayidx1154, align 4
  %idxprom1155 = sext i32 %529 to i64
  %530 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1156 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %530, i32 0, i32 3
  %iso_20221157 = bitcast %union.anon* %spec1156 to %struct.iso_2022_spec*
  %current_designation1158 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221157, i32 0, i32 2
  %arrayidx1159 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1158, i32 0, i64 %idxprom1155
  %531 = load i32, i32* %arrayidx1159, align 4
  br label %cond.end.1160

cond.end.1160:                                    ; preds = %cond.false.1150, %cond.true.1149
  %cond1161 = phi i32 [ -1, %cond.true.1149 ], [ %531, %cond.false.1150 ]
  %cmp1162 = icmp eq i32 %525, %cond1161
  br i1 %cmp1162, label %if.then.1164, label %if.else.1177

if.then.1164:                                     ; preds = %cond.end.1160
  br label %do.body.1165

do.body.1165:                                     ; preds = %if.then.1164
  %532 = load i64, i64* %produced_chars, align 8
  %add1166 = add nsw i64 %532, 2
  store i64 %add1166, i64* %produced_chars, align 8
  %533 = load i32, i32* %code, align 4
  %shr1167 = lshr i32 %533, 8
  %and1168 = and i32 %shr1167, 127
  %conv1169 = trunc i32 %and1168 to i8
  %534 = load i8*, i8** %dst, align 8
  %incdec.ptr1170 = getelementptr inbounds i8, i8* %534, i32 1
  store i8* %incdec.ptr1170, i8** %dst, align 8
  store i8 %conv1169, i8* %534, align 1
  %535 = load i32, i32* %code, align 4
  %and1171 = and i32 %535, 255
  %and1172 = and i32 %and1171, 127
  %conv1173 = trunc i32 %and1172 to i8
  %536 = load i8*, i8** %dst, align 8
  %incdec.ptr1174 = getelementptr inbounds i8, i8* %536, i32 1
  store i8* %incdec.ptr1174, i8** %dst, align 8
  store i8 %conv1173, i8* %536, align 1
  br label %do.end.1176

do.end.1176:                                      ; preds = %do.body.1165
  br label %do.end.1325

if.else.1177:                                     ; preds = %cond.end.1160
  %537 = load i32, i32* %id977, align 4
  %538 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1178 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %538, i32 0, i32 3
  %iso_20221179 = bitcast %union.anon* %spec1178 to %struct.iso_2022_spec*
  %current_invocation1180 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221179, i32 0, i32 1
  %arrayidx1181 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1180, i32 0, i64 1
  %539 = load i32, i32* %arrayidx1181, align 4
  %cmp1182 = icmp slt i32 %539, 0
  br i1 %cmp1182, label %cond.true.1184, label %cond.false.1185

cond.true.1184:                                   ; preds = %if.else.1177
  br label %cond.end.1195

cond.false.1185:                                  ; preds = %if.else.1177
  %540 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1186 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %540, i32 0, i32 3
  %iso_20221187 = bitcast %union.anon* %spec1186 to %struct.iso_2022_spec*
  %current_invocation1188 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221187, i32 0, i32 1
  %arrayidx1189 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1188, i32 0, i64 1
  %541 = load i32, i32* %arrayidx1189, align 4
  %idxprom1190 = sext i32 %541 to i64
  %542 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1191 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %542, i32 0, i32 3
  %iso_20221192 = bitcast %union.anon* %spec1191 to %struct.iso_2022_spec*
  %current_designation1193 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221192, i32 0, i32 2
  %arrayidx1194 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1193, i32 0, i64 %idxprom1190
  %543 = load i32, i32* %arrayidx1194, align 4
  br label %cond.end.1195

cond.end.1195:                                    ; preds = %cond.false.1185, %cond.true.1184
  %cond1196 = phi i32 [ -1, %cond.true.1184 ], [ %543, %cond.false.1185 ]
  %cmp1197 = icmp eq i32 %537, %cond1196
  br i1 %cmp1197, label %if.then.1199, label %if.else.1319

if.then.1199:                                     ; preds = %cond.end.1195
  br label %do.body.1200

do.body.1200:                                     ; preds = %if.then.1199
  %544 = load i64, i64* %produced_chars, align 8
  %add1201 = add nsw i64 %544, 2
  store i64 %add1201, i64* %produced_chars, align 8
  %545 = load i8, i8* %multibytep, align 1
  %tobool1202 = trunc i8 %545 to i1
  br i1 %tobool1202, label %if.then.1203, label %if.else.1307

if.then.1203:                                     ; preds = %do.body.1200
  %546 = load i32, i32* %code, align 4
  %shr1205 = lshr i32 %546, 8
  %or1206 = or i32 %shr1205, 128
  store i32 %or1206, i32* %ch1204, align 4
  %547 = load i32, i32* %ch1204, align 4
  %cmp1207 = icmp uge i32 %547, 128
  br i1 %cmp1207, label %if.then.1209, label %if.end.1211

if.then.1209:                                     ; preds = %if.then.1203
  %548 = load i32, i32* %ch1204, align 4
  %add1210 = add i32 %548, 4194048
  store i32 %add1210, i32* %ch1204, align 4
  br label %if.end.1211

if.end.1211:                                      ; preds = %if.then.1209, %if.then.1203
  br label %do.body.1212

do.body.1212:                                     ; preds = %if.end.1211
  %549 = load i32, i32* %ch1204, align 4
  %cmp1213 = icmp ule i32 %549, 127
  br i1 %cmp1213, label %if.then.1215, label %if.else.1218

if.then.1215:                                     ; preds = %do.body.1212
  %550 = load i32, i32* %ch1204, align 4
  %conv1216 = trunc i32 %550 to i8
  %551 = load i8*, i8** %dst, align 8
  %incdec.ptr1217 = getelementptr inbounds i8, i8* %551, i32 1
  store i8* %incdec.ptr1217, i8** %dst, align 8
  store i8 %conv1216, i8* %551, align 1
  br label %if.end.1253

if.else.1218:                                     ; preds = %do.body.1212
  %552 = load i32, i32* %ch1204, align 4
  %cmp1219 = icmp ule i32 %552, 2047
  br i1 %cmp1219, label %if.then.1221, label %if.else.1230

if.then.1221:                                     ; preds = %if.else.1218
  %553 = load i32, i32* %ch1204, align 4
  %shr1222 = lshr i32 %553, 6
  %or1223 = or i32 192, %shr1222
  %conv1224 = trunc i32 %or1223 to i8
  %554 = load i8*, i8** %dst, align 8
  %incdec.ptr1225 = getelementptr inbounds i8, i8* %554, i32 1
  store i8* %incdec.ptr1225, i8** %dst, align 8
  store i8 %conv1224, i8* %554, align 1
  %555 = load i32, i32* %ch1204, align 4
  %and1226 = and i32 %555, 63
  %or1227 = or i32 128, %and1226
  %conv1228 = trunc i32 %or1227 to i8
  %556 = load i8*, i8** %dst, align 8
  %incdec.ptr1229 = getelementptr inbounds i8, i8* %556, i32 1
  store i8* %incdec.ptr1229, i8** %dst, align 8
  store i8 %conv1228, i8* %556, align 1
  br label %if.end.1252

if.else.1230:                                     ; preds = %if.else.1218
  %557 = load i32, i32* %ch1204, align 4
  %cmp1231 = icmp ule i32 %557, 65535
  br i1 %cmp1231, label %if.then.1233, label %if.else.1247

if.then.1233:                                     ; preds = %if.else.1230
  %558 = load i32, i32* %ch1204, align 4
  %shr1234 = lshr i32 %558, 12
  %or1235 = or i32 224, %shr1234
  %conv1236 = trunc i32 %or1235 to i8
  %559 = load i8*, i8** %dst, align 8
  %incdec.ptr1237 = getelementptr inbounds i8, i8* %559, i32 1
  store i8* %incdec.ptr1237, i8** %dst, align 8
  store i8 %conv1236, i8* %559, align 1
  %560 = load i32, i32* %ch1204, align 4
  %shr1238 = lshr i32 %560, 6
  %and1239 = and i32 %shr1238, 63
  %or1240 = or i32 128, %and1239
  %conv1241 = trunc i32 %or1240 to i8
  %561 = load i8*, i8** %dst, align 8
  %incdec.ptr1242 = getelementptr inbounds i8, i8* %561, i32 1
  store i8* %incdec.ptr1242, i8** %dst, align 8
  store i8 %conv1241, i8* %561, align 1
  %562 = load i32, i32* %ch1204, align 4
  %and1243 = and i32 %562, 63
  %or1244 = or i32 128, %and1243
  %conv1245 = trunc i32 %or1244 to i8
  %563 = load i8*, i8** %dst, align 8
  %incdec.ptr1246 = getelementptr inbounds i8, i8* %563, i32 1
  store i8* %incdec.ptr1246, i8** %dst, align 8
  store i8 %conv1245, i8* %563, align 1
  br label %if.end.1251

if.else.1247:                                     ; preds = %if.else.1230
  %564 = load i32, i32* %ch1204, align 4
  %565 = load i8*, i8** %dst, align 8
  %call1248 = call i32 @char_string(i32 %564, i8* %565)
  %566 = load i8*, i8** %dst, align 8
  %idx.ext1249 = sext i32 %call1248 to i64
  %add.ptr1250 = getelementptr inbounds i8, i8* %566, i64 %idx.ext1249
  store i8* %add.ptr1250, i8** %dst, align 8
  br label %if.end.1251

if.end.1251:                                      ; preds = %if.else.1247, %if.then.1233
  br label %if.end.1252

if.end.1252:                                      ; preds = %if.end.1251, %if.then.1221
  br label %if.end.1253

if.end.1253:                                      ; preds = %if.end.1252, %if.then.1215
  br label %do.end.1255

do.end.1255:                                      ; preds = %if.end.1253
  %567 = load i32, i32* %code, align 4
  %and1256 = and i32 %567, 255
  %or1257 = or i32 %and1256, 128
  store i32 %or1257, i32* %ch1204, align 4
  %568 = load i32, i32* %ch1204, align 4
  %cmp1258 = icmp uge i32 %568, 128
  br i1 %cmp1258, label %if.then.1260, label %if.end.1262

if.then.1260:                                     ; preds = %do.end.1255
  %569 = load i32, i32* %ch1204, align 4
  %add1261 = add i32 %569, 4194048
  store i32 %add1261, i32* %ch1204, align 4
  br label %if.end.1262

if.end.1262:                                      ; preds = %if.then.1260, %do.end.1255
  br label %do.body.1263

do.body.1263:                                     ; preds = %if.end.1262
  %570 = load i32, i32* %ch1204, align 4
  %cmp1264 = icmp ule i32 %570, 127
  br i1 %cmp1264, label %if.then.1266, label %if.else.1269

if.then.1266:                                     ; preds = %do.body.1263
  %571 = load i32, i32* %ch1204, align 4
  %conv1267 = trunc i32 %571 to i8
  %572 = load i8*, i8** %dst, align 8
  %incdec.ptr1268 = getelementptr inbounds i8, i8* %572, i32 1
  store i8* %incdec.ptr1268, i8** %dst, align 8
  store i8 %conv1267, i8* %572, align 1
  br label %if.end.1304

if.else.1269:                                     ; preds = %do.body.1263
  %573 = load i32, i32* %ch1204, align 4
  %cmp1270 = icmp ule i32 %573, 2047
  br i1 %cmp1270, label %if.then.1272, label %if.else.1281

if.then.1272:                                     ; preds = %if.else.1269
  %574 = load i32, i32* %ch1204, align 4
  %shr1273 = lshr i32 %574, 6
  %or1274 = or i32 192, %shr1273
  %conv1275 = trunc i32 %or1274 to i8
  %575 = load i8*, i8** %dst, align 8
  %incdec.ptr1276 = getelementptr inbounds i8, i8* %575, i32 1
  store i8* %incdec.ptr1276, i8** %dst, align 8
  store i8 %conv1275, i8* %575, align 1
  %576 = load i32, i32* %ch1204, align 4
  %and1277 = and i32 %576, 63
  %or1278 = or i32 128, %and1277
  %conv1279 = trunc i32 %or1278 to i8
  %577 = load i8*, i8** %dst, align 8
  %incdec.ptr1280 = getelementptr inbounds i8, i8* %577, i32 1
  store i8* %incdec.ptr1280, i8** %dst, align 8
  store i8 %conv1279, i8* %577, align 1
  br label %if.end.1303

if.else.1281:                                     ; preds = %if.else.1269
  %578 = load i32, i32* %ch1204, align 4
  %cmp1282 = icmp ule i32 %578, 65535
  br i1 %cmp1282, label %if.then.1284, label %if.else.1298

if.then.1284:                                     ; preds = %if.else.1281
  %579 = load i32, i32* %ch1204, align 4
  %shr1285 = lshr i32 %579, 12
  %or1286 = or i32 224, %shr1285
  %conv1287 = trunc i32 %or1286 to i8
  %580 = load i8*, i8** %dst, align 8
  %incdec.ptr1288 = getelementptr inbounds i8, i8* %580, i32 1
  store i8* %incdec.ptr1288, i8** %dst, align 8
  store i8 %conv1287, i8* %580, align 1
  %581 = load i32, i32* %ch1204, align 4
  %shr1289 = lshr i32 %581, 6
  %and1290 = and i32 %shr1289, 63
  %or1291 = or i32 128, %and1290
  %conv1292 = trunc i32 %or1291 to i8
  %582 = load i8*, i8** %dst, align 8
  %incdec.ptr1293 = getelementptr inbounds i8, i8* %582, i32 1
  store i8* %incdec.ptr1293, i8** %dst, align 8
  store i8 %conv1292, i8* %582, align 1
  %583 = load i32, i32* %ch1204, align 4
  %and1294 = and i32 %583, 63
  %or1295 = or i32 128, %and1294
  %conv1296 = trunc i32 %or1295 to i8
  %584 = load i8*, i8** %dst, align 8
  %incdec.ptr1297 = getelementptr inbounds i8, i8* %584, i32 1
  store i8* %incdec.ptr1297, i8** %dst, align 8
  store i8 %conv1296, i8* %584, align 1
  br label %if.end.1302

if.else.1298:                                     ; preds = %if.else.1281
  %585 = load i32, i32* %ch1204, align 4
  %586 = load i8*, i8** %dst, align 8
  %call1299 = call i32 @char_string(i32 %585, i8* %586)
  %587 = load i8*, i8** %dst, align 8
  %idx.ext1300 = sext i32 %call1299 to i64
  %add.ptr1301 = getelementptr inbounds i8, i8* %587, i64 %idx.ext1300
  store i8* %add.ptr1301, i8** %dst, align 8
  br label %if.end.1302

if.end.1302:                                      ; preds = %if.else.1298, %if.then.1284
  br label %if.end.1303

if.end.1303:                                      ; preds = %if.end.1302, %if.then.1272
  br label %if.end.1304

if.end.1304:                                      ; preds = %if.end.1303, %if.then.1266
  br label %do.end.1306

do.end.1306:                                      ; preds = %if.end.1304
  br label %if.end.1316

if.else.1307:                                     ; preds = %do.body.1200
  %588 = load i32, i32* %code, align 4
  %shr1308 = lshr i32 %588, 8
  %or1309 = or i32 %shr1308, 128
  %conv1310 = trunc i32 %or1309 to i8
  %589 = load i8*, i8** %dst, align 8
  %incdec.ptr1311 = getelementptr inbounds i8, i8* %589, i32 1
  store i8* %incdec.ptr1311, i8** %dst, align 8
  store i8 %conv1310, i8* %589, align 1
  %590 = load i32, i32* %code, align 4
  %and1312 = and i32 %590, 255
  %or1313 = or i32 %and1312, 128
  %conv1314 = trunc i32 %or1313 to i8
  %591 = load i8*, i8** %dst, align 8
  %incdec.ptr1315 = getelementptr inbounds i8, i8* %591, i32 1
  store i8* %incdec.ptr1315, i8** %dst, align 8
  store i8 %conv1314, i8* %591, align 1
  br label %if.end.1316

if.end.1316:                                      ; preds = %if.else.1307, %do.end.1306
  br label %do.end.1318

do.end.1318:                                      ; preds = %if.end.1316
  br label %do.end.1325

if.else.1319:                                     ; preds = %cond.end.1195
  %592 = load %struct.charset*, %struct.charset** %charset635, align 8
  %593 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %594 = load i8*, i8** %dst, align 8
  %call1320 = call i8* @encode_invocation_designation(%struct.charset* %592, %struct.coding_system* %593, i8* %594, i64* %produced_chars)
  store i8* %call1320, i8** %dst, align 8
  br label %if.end.1321

if.end.1321:                                      ; preds = %if.else.1319
  br label %if.end.1322

if.end.1322:                                      ; preds = %if.end.1321
  br label %if.end.1323

if.end.1323:                                      ; preds = %if.end.1322
  br label %do.cond.1324

do.cond.1324:                                     ; preds = %if.end.1323
  br i1 true, label %do.body.976, label %do.end.1325

do.end.1325:                                      ; preds = %do.cond.1324, %do.end.1318, %do.end.1176, %if.end.1136
  br label %if.end.1326

if.end.1326:                                      ; preds = %do.end.1325, %do.end.974
  br label %do.end.1328

do.end.1328:                                      ; preds = %if.end.1326
  br label %if.end.1329

if.end.1329:                                      ; preds = %do.end.1328, %do.end.633
  br label %if.end.2312

if.else.1330:                                     ; preds = %cond.false.621, %cond.true.617
  %595 = load i32, i32* %c, align 4
  %cmp1331 = icmp sgt i32 %595, 4194175
  br i1 %cmp1331, label %if.then.1333, label %if.else.1402

if.then.1333:                                     ; preds = %if.else.1330
  %596 = load i32, i32* %c, align 4
  %cmp1334 = icmp sgt i32 %596, 4194175
  br i1 %cmp1334, label %cond.true.1336, label %cond.false.1338

cond.true.1336:                                   ; preds = %if.then.1333
  %597 = load i32, i32* %c, align 4
  %sub1337 = sub nsw i32 %597, 4194048
  br label %cond.end.1340

cond.false.1338:                                  ; preds = %if.then.1333
  %598 = load i32, i32* %c, align 4
  %and1339 = and i32 %598, 255
  br label %cond.end.1340

cond.end.1340:                                    ; preds = %cond.false.1338, %cond.true.1336
  %cond1341 = phi i32 [ %sub1337, %cond.true.1336 ], [ %and1339, %cond.false.1338 ]
  store i32 %cond1341, i32* %c, align 4
  br label %do.body.1342

do.body.1342:                                     ; preds = %cond.end.1340
  %599 = load i64, i64* %produced_chars, align 8
  %inc1343 = add nsw i64 %599, 1
  store i64 %inc1343, i64* %produced_chars, align 8
  %600 = load i8, i8* %multibytep, align 1
  %tobool1344 = trunc i8 %600 to i1
  br i1 %tobool1344, label %if.then.1345, label %if.else.1396

if.then.1345:                                     ; preds = %do.body.1342
  %601 = load i32, i32* %c, align 4
  store i32 %601, i32* %ch1346, align 4
  %602 = load i32, i32* %ch1346, align 4
  %cmp1347 = icmp uge i32 %602, 128
  br i1 %cmp1347, label %if.then.1349, label %if.end.1351

if.then.1349:                                     ; preds = %if.then.1345
  %603 = load i32, i32* %ch1346, align 4
  %add1350 = add i32 %603, 4194048
  store i32 %add1350, i32* %ch1346, align 4
  br label %if.end.1351

if.end.1351:                                      ; preds = %if.then.1349, %if.then.1345
  br label %do.body.1352

do.body.1352:                                     ; preds = %if.end.1351
  %604 = load i32, i32* %ch1346, align 4
  %cmp1353 = icmp ule i32 %604, 127
  br i1 %cmp1353, label %if.then.1355, label %if.else.1358

if.then.1355:                                     ; preds = %do.body.1352
  %605 = load i32, i32* %ch1346, align 4
  %conv1356 = trunc i32 %605 to i8
  %606 = load i8*, i8** %dst, align 8
  %incdec.ptr1357 = getelementptr inbounds i8, i8* %606, i32 1
  store i8* %incdec.ptr1357, i8** %dst, align 8
  store i8 %conv1356, i8* %606, align 1
  br label %if.end.1393

if.else.1358:                                     ; preds = %do.body.1352
  %607 = load i32, i32* %ch1346, align 4
  %cmp1359 = icmp ule i32 %607, 2047
  br i1 %cmp1359, label %if.then.1361, label %if.else.1370

if.then.1361:                                     ; preds = %if.else.1358
  %608 = load i32, i32* %ch1346, align 4
  %shr1362 = lshr i32 %608, 6
  %or1363 = or i32 192, %shr1362
  %conv1364 = trunc i32 %or1363 to i8
  %609 = load i8*, i8** %dst, align 8
  %incdec.ptr1365 = getelementptr inbounds i8, i8* %609, i32 1
  store i8* %incdec.ptr1365, i8** %dst, align 8
  store i8 %conv1364, i8* %609, align 1
  %610 = load i32, i32* %ch1346, align 4
  %and1366 = and i32 %610, 63
  %or1367 = or i32 128, %and1366
  %conv1368 = trunc i32 %or1367 to i8
  %611 = load i8*, i8** %dst, align 8
  %incdec.ptr1369 = getelementptr inbounds i8, i8* %611, i32 1
  store i8* %incdec.ptr1369, i8** %dst, align 8
  store i8 %conv1368, i8* %611, align 1
  br label %if.end.1392

if.else.1370:                                     ; preds = %if.else.1358
  %612 = load i32, i32* %ch1346, align 4
  %cmp1371 = icmp ule i32 %612, 65535
  br i1 %cmp1371, label %if.then.1373, label %if.else.1387

if.then.1373:                                     ; preds = %if.else.1370
  %613 = load i32, i32* %ch1346, align 4
  %shr1374 = lshr i32 %613, 12
  %or1375 = or i32 224, %shr1374
  %conv1376 = trunc i32 %or1375 to i8
  %614 = load i8*, i8** %dst, align 8
  %incdec.ptr1377 = getelementptr inbounds i8, i8* %614, i32 1
  store i8* %incdec.ptr1377, i8** %dst, align 8
  store i8 %conv1376, i8* %614, align 1
  %615 = load i32, i32* %ch1346, align 4
  %shr1378 = lshr i32 %615, 6
  %and1379 = and i32 %shr1378, 63
  %or1380 = or i32 128, %and1379
  %conv1381 = trunc i32 %or1380 to i8
  %616 = load i8*, i8** %dst, align 8
  %incdec.ptr1382 = getelementptr inbounds i8, i8* %616, i32 1
  store i8* %incdec.ptr1382, i8** %dst, align 8
  store i8 %conv1381, i8* %616, align 1
  %617 = load i32, i32* %ch1346, align 4
  %and1383 = and i32 %617, 63
  %or1384 = or i32 128, %and1383
  %conv1385 = trunc i32 %or1384 to i8
  %618 = load i8*, i8** %dst, align 8
  %incdec.ptr1386 = getelementptr inbounds i8, i8* %618, i32 1
  store i8* %incdec.ptr1386, i8** %dst, align 8
  store i8 %conv1385, i8* %618, align 1
  br label %if.end.1391

if.else.1387:                                     ; preds = %if.else.1370
  %619 = load i32, i32* %ch1346, align 4
  %620 = load i8*, i8** %dst, align 8
  %call1388 = call i32 @char_string(i32 %619, i8* %620)
  %621 = load i8*, i8** %dst, align 8
  %idx.ext1389 = sext i32 %call1388 to i64
  %add.ptr1390 = getelementptr inbounds i8, i8* %621, i64 %idx.ext1389
  store i8* %add.ptr1390, i8** %dst, align 8
  br label %if.end.1391

if.end.1391:                                      ; preds = %if.else.1387, %if.then.1373
  br label %if.end.1392

if.end.1392:                                      ; preds = %if.end.1391, %if.then.1361
  br label %if.end.1393

if.end.1393:                                      ; preds = %if.end.1392, %if.then.1355
  br label %do.end.1395

do.end.1395:                                      ; preds = %if.end.1393
  br label %if.end.1399

if.else.1396:                                     ; preds = %do.body.1342
  %622 = load i32, i32* %c, align 4
  %conv1397 = trunc i32 %622 to i8
  %623 = load i8*, i8** %dst, align 8
  %incdec.ptr1398 = getelementptr inbounds i8, i8* %623, i32 1
  store i8* %incdec.ptr1398, i8** %dst, align 8
  store i8 %conv1397, i8* %623, align 1
  br label %if.end.1399

if.end.1399:                                      ; preds = %if.else.1396, %do.end.1395
  br label %do.end.1401

do.end.1401:                                      ; preds = %if.end.1399
  br label %if.end.2311

if.else.1402:                                     ; preds = %if.else.1330
  %624 = load i32, i32* %preferred_charset_id, align 4
  %cmp1404 = icmp sge i32 %624, 0
  br i1 %cmp1404, label %if.then.1406, label %if.else.1556

if.then.1406:                                     ; preds = %if.else.1402
  %625 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %626 = load i32, i32* %preferred_charset_id, align 4
  %idx.ext1407 = sext i32 %626 to i64
  %add.ptr1408 = getelementptr inbounds %struct.charset, %struct.charset* %625, i64 %idx.ext1407
  store %struct.charset* %add.ptr1408, %struct.charset** %charset1403, align 8
  br label %do.body.1409

do.body.1409:                                     ; preds = %if.then.1406
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.1411, label %cond.false.1415

cond.true.1411:                                   ; preds = %do.body.1409
  %627 = load i32, i32* %c, align 4
  %add1412 = add i32 %627, 0
  %cmp1413 = icmp ult i32 %add1412, 128
  br i1 %cmp1413, label %land.lhs.true.1420, label %lor.rhs

cond.false.1415:                                  ; preds = %do.body.1409
  %628 = load i32, i32* %c, align 4
  %conv1416 = sext i32 %628 to i64
  %add1417 = add i64 %conv1416, 0
  %cmp1418 = icmp ult i64 %add1417, 128
  br i1 %cmp1418, label %land.lhs.true.1420, label %lor.rhs

land.lhs.true.1420:                               ; preds = %cond.false.1415, %cond.true.1411
  %629 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %ascii_compatible_p1421 = getelementptr inbounds %struct.charset, %struct.charset* %629, i32 0, i32 5
  %bf.load1422 = load i8, i8* %ascii_compatible_p1421, align 8
  %bf.lshr1423 = lshr i8 %bf.load1422, 2
  %bf.clear1424 = and i8 %bf.lshr1423, 1
  %bf.cast1425 = trunc i8 %bf.clear1424 to i1
  br i1 %bf.cast1425, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true.1420, %cond.false.1415, %cond.true.1411
  %630 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %unified_p1427 = getelementptr inbounds %struct.charset, %struct.charset* %630, i32 0, i32 5
  %bf.load1428 = load i8, i8* %unified_p1427, align 8
  %bf.lshr1429 = lshr i8 %bf.load1428, 5
  %bf.clear1430 = and i8 %bf.lshr1429, 1
  %bf.cast1431 = trunc i8 %bf.clear1430 to i1
  br i1 %bf.cast1431, label %cond.true.1441, label %lor.lhs.false.1433

lor.lhs.false.1433:                               ; preds = %lor.rhs
  %631 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1434 = getelementptr inbounds %struct.charset, %struct.charset* %631, i32 0, i32 9
  %632 = load i32, i32* %method1434, align 4
  %cmp1435 = icmp eq i32 %632, 2
  br i1 %cmp1435, label %cond.true.1441, label %lor.lhs.false.1437

lor.lhs.false.1437:                               ; preds = %lor.lhs.false.1433
  %633 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1438 = getelementptr inbounds %struct.charset, %struct.charset* %633, i32 0, i32 9
  %634 = load i32, i32* %method1438, align 4
  %cmp1439 = icmp eq i32 %634, 3
  br i1 %cmp1439, label %cond.true.1441, label %cond.false.1446

cond.true.1441:                                   ; preds = %lor.lhs.false.1437, %lor.lhs.false.1433, %lor.rhs
  %635 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %636 = load i32, i32* %c, align 4
  %call1442 = call i32 @encode_char(%struct.charset* %635, i32 %636)
  %637 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %invalid_code1443 = getelementptr inbounds %struct.charset, %struct.charset* %637, i32 0, i32 15
  %638 = load i32, i32* %invalid_code1443, align 4
  %cmp1444 = icmp ne i32 %call1442, %638
  %conv1445 = zext i1 %cmp1444 to i32
  br label %cond.end.1524

cond.false.1446:                                  ; preds = %lor.lhs.false.1437
  %639 = load i32, i32* %c, align 4
  %cmp1447 = icmp slt i32 %639, 65536
  br i1 %cmp1447, label %cond.true.1449, label %cond.false.1459

cond.true.1449:                                   ; preds = %cond.false.1446
  %640 = load i32, i32* %c, align 4
  %shr1450 = ashr i32 %640, 10
  %idxprom1451 = sext i32 %shr1450 to i64
  %641 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %fast_map = getelementptr inbounds %struct.charset, %struct.charset* %641, i32 0, i32 16
  %arrayidx1452 = getelementptr inbounds [190 x i8], [190 x i8]* %fast_map, i32 0, i64 %idxprom1451
  %642 = load i8, i8* %arrayidx1452, align 1
  %conv1453 = zext i8 %642 to i32
  %643 = load i32, i32* %c, align 4
  %shr1454 = ashr i32 %643, 7
  %and1455 = and i32 %shr1454, 7
  %shl1456 = shl i32 1, %and1455
  %and1457 = and i32 %conv1453, %shl1456
  %tobool1458 = icmp ne i32 %and1457, 0
  br i1 %tobool1458, label %land.rhs.1471, label %land.end.1522

cond.false.1459:                                  ; preds = %cond.false.1446
  %644 = load i32, i32* %c, align 4
  %shr1460 = ashr i32 %644, 15
  %add1461 = add nsw i32 %shr1460, 62
  %idxprom1462 = sext i32 %add1461 to i64
  %645 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %fast_map1463 = getelementptr inbounds %struct.charset, %struct.charset* %645, i32 0, i32 16
  %arrayidx1464 = getelementptr inbounds [190 x i8], [190 x i8]* %fast_map1463, i32 0, i64 %idxprom1462
  %646 = load i8, i8* %arrayidx1464, align 1
  %conv1465 = zext i8 %646 to i32
  %647 = load i32, i32* %c, align 4
  %shr1466 = ashr i32 %647, 12
  %and1467 = and i32 %shr1466, 7
  %shl1468 = shl i32 1, %and1467
  %and1469 = and i32 %conv1465, %shl1468
  %tobool1470 = icmp ne i32 %and1469, 0
  br i1 %tobool1470, label %land.rhs.1471, label %land.end.1522

land.rhs.1471:                                    ; preds = %cond.false.1459, %cond.true.1449
  %648 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1472 = getelementptr inbounds %struct.charset, %struct.charset* %648, i32 0, i32 9
  %649 = load i32, i32* %method1472, align 4
  %cmp1473 = icmp eq i32 %649, 0
  br i1 %cmp1473, label %cond.true.1475, label %cond.false.1484

cond.true.1475:                                   ; preds = %land.rhs.1471
  %650 = load i32, i32* %c, align 4
  %651 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %min_char1476 = getelementptr inbounds %struct.charset, %struct.charset* %651, i32 0, i32 13
  %652 = load i32, i32* %min_char1476, align 4
  %cmp1477 = icmp sge i32 %650, %652
  br i1 %cmp1477, label %land.rhs.1479, label %land.end.1483

land.rhs.1479:                                    ; preds = %cond.true.1475
  %653 = load i32, i32* %c, align 4
  %654 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %max_char1480 = getelementptr inbounds %struct.charset, %struct.charset* %654, i32 0, i32 14
  %655 = load i32, i32* %max_char1480, align 4
  %cmp1481 = icmp sle i32 %653, %655
  br label %land.end.1483

land.end.1483:                                    ; preds = %land.rhs.1479, %cond.true.1475
  %656 = phi i1 [ false, %cond.true.1475 ], [ %cmp1481, %land.rhs.1479 ]
  %land.ext = zext i1 %656 to i32
  br label %cond.end.1519

cond.false.1484:                                  ; preds = %land.rhs.1471
  %657 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1485 = getelementptr inbounds %struct.charset, %struct.charset* %657, i32 0, i32 9
  %658 = load i32, i32* %method1485, align 4
  %cmp1486 = icmp eq i32 %658, 1
  br i1 %cmp1486, label %land.lhs.true.1488, label %cond.false.1512

land.lhs.true.1488:                               ; preds = %cond.false.1484
  %659 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %compact_codes_p1489 = getelementptr inbounds %struct.charset, %struct.charset* %659, i32 0, i32 5
  %bf.load1490 = load i8, i8* %compact_codes_p1489, align 8
  %bf.lshr1491 = lshr i8 %bf.load1490, 4
  %bf.clear1492 = and i8 %bf.lshr1491, 1
  %bf.cast1493 = trunc i8 %bf.clear1492 to i1
  br i1 %bf.cast1493, label %land.lhs.true.1495, label %cond.false.1512

land.lhs.true.1495:                               ; preds = %land.lhs.true.1488
  %660 = load i64, i64* @Vcharset_hash_table, align 8
  %call1496 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %660)
  %661 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %hash_index1497 = getelementptr inbounds %struct.charset, %struct.charset* %661, i32 0, i32 1
  %662 = load i64, i64* %hash_index1497, align 8
  %call1498 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call1496, i64 %662)
  %call1499 = call i64 @AREF(i64 %call1498, i64 5)
  %call1500 = call zeroext i1 @CHAR_TABLE_P(i64 %call1499)
  br i1 %call1500, label %cond.true.1502, label %cond.false.1512

cond.true.1502:                                   ; preds = %land.lhs.true.1495
  %663 = load i64, i64* @Vcharset_hash_table, align 8
  %call1503 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %663)
  %664 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %hash_index1504 = getelementptr inbounds %struct.charset, %struct.charset* %664, i32 0, i32 1
  %665 = load i64, i64* %hash_index1504, align 8
  %call1505 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call1503, i64 %665)
  %call1506 = call i64 @AREF(i64 %call1505, i64 5)
  %666 = load i32, i32* %c, align 4
  %call1507 = call i64 @CHAR_TABLE_REF(i64 %call1506, i32 %666)
  %call1508 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1509 = icmp eq i64 %call1507, %call1508
  %lnot1511 = xor i1 %cmp1509, true
  %lnot.ext = zext i1 %lnot1511 to i32
  br label %cond.end.1517

cond.false.1512:                                  ; preds = %land.lhs.true.1495, %land.lhs.true.1488, %cond.false.1484
  %667 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %668 = load i32, i32* %c, align 4
  %call1513 = call i32 @encode_char(%struct.charset* %667, i32 %668)
  %669 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %invalid_code1514 = getelementptr inbounds %struct.charset, %struct.charset* %669, i32 0, i32 15
  %670 = load i32, i32* %invalid_code1514, align 4
  %cmp1515 = icmp ne i32 %call1513, %670
  %conv1516 = zext i1 %cmp1515 to i32
  br label %cond.end.1517

cond.end.1517:                                    ; preds = %cond.false.1512, %cond.true.1502
  %cond1518 = phi i32 [ %lnot.ext, %cond.true.1502 ], [ %conv1516, %cond.false.1512 ]
  br label %cond.end.1519

cond.end.1519:                                    ; preds = %cond.end.1517, %land.end.1483
  %cond1520 = phi i32 [ %land.ext, %land.end.1483 ], [ %cond1518, %cond.end.1517 ]
  %tobool1521 = icmp ne i32 %cond1520, 0
  br label %land.end.1522

land.end.1522:                                    ; preds = %cond.end.1519, %cond.false.1459, %cond.true.1449
  %671 = phi i1 [ false, %cond.false.1459 ], [ false, %cond.true.1449 ], [ %tobool1521, %cond.end.1519 ]
  %land.ext1523 = zext i1 %671 to i32
  br label %cond.end.1524

cond.end.1524:                                    ; preds = %land.end.1522, %cond.true.1441
  %cond1525 = phi i32 [ %conv1445, %cond.true.1441 ], [ %land.ext1523, %land.end.1522 ]
  %tobool1526 = icmp ne i32 %cond1525, 0
  br label %lor.end

lor.end:                                          ; preds = %cond.end.1524, %land.lhs.true.1420
  %672 = phi i1 [ true, %land.lhs.true.1420 ], [ %tobool1526, %cond.end.1524 ]
  %frombool1527 = zext i1 %672 to i8
  store i8 %frombool1527, i8* %result, align 1
  %673 = load i8, i8* @charset_map_loaded, align 1
  %tobool1528 = trunc i8 %673 to i1
  br i1 %tobool1528, label %land.lhs.true.1530, label %if.end.1536

land.lhs.true.1530:                               ; preds = %lor.end
  %674 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call1531 = call i64 @coding_change_destination(%struct.coding_system* %674)
  store i64 %call1531, i64* %offset1410, align 8
  %tobool1532 = icmp ne i64 %call1531, 0
  br i1 %tobool1532, label %if.then.1533, label %if.end.1536

if.then.1533:                                     ; preds = %land.lhs.true.1530
  %675 = load i64, i64* %offset1410, align 8
  %676 = load i8*, i8** %dst, align 8
  %add.ptr1534 = getelementptr inbounds i8, i8* %676, i64 %675
  store i8* %add.ptr1534, i8** %dst, align 8
  %677 = load i64, i64* %offset1410, align 8
  %678 = load i8*, i8** %dst_end, align 8
  %add.ptr1535 = getelementptr inbounds i8, i8* %678, i64 %677
  store i8* %add.ptr1535, i8** %dst_end, align 8
  br label %if.end.1536

if.end.1536:                                      ; preds = %if.then.1533, %land.lhs.true.1530, %lor.end
  br label %do.end.1538

do.end.1538:                                      ; preds = %if.end.1536
  %679 = load i8, i8* %result, align 1
  %tobool1539 = trunc i8 %679 to i1
  br i1 %tobool1539, label %if.end.1555, label %if.then.1540

if.then.1540:                                     ; preds = %do.end.1538
  br label %do.body.1541

do.body.1541:                                     ; preds = %if.then.1540
  store i8 0, i8* @charset_map_loaded, align 1
  %680 = load i32, i32* %c, align 4
  %681 = load i64, i64* %charset_list, align 8
  %call1543 = call %struct.charset* @char_charset(i32 %680, i64 %681, i32* null)
  store %struct.charset* %call1543, %struct.charset** %charset1403, align 8
  %682 = load i8, i8* @charset_map_loaded, align 1
  %tobool1544 = trunc i8 %682 to i1
  br i1 %tobool1544, label %land.lhs.true.1546, label %if.end.1552

land.lhs.true.1546:                               ; preds = %do.body.1541
  %683 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call1547 = call i64 @coding_change_destination(%struct.coding_system* %683)
  store i64 %call1547, i64* %offset1542, align 8
  %tobool1548 = icmp ne i64 %call1547, 0
  br i1 %tobool1548, label %if.then.1549, label %if.end.1552

if.then.1549:                                     ; preds = %land.lhs.true.1546
  %684 = load i64, i64* %offset1542, align 8
  %685 = load i8*, i8** %dst, align 8
  %add.ptr1550 = getelementptr inbounds i8, i8* %685, i64 %684
  store i8* %add.ptr1550, i8** %dst, align 8
  %686 = load i64, i64* %offset1542, align 8
  %687 = load i8*, i8** %dst_end, align 8
  %add.ptr1551 = getelementptr inbounds i8, i8* %687, i64 %686
  store i8* %add.ptr1551, i8** %dst_end, align 8
  br label %if.end.1552

if.end.1552:                                      ; preds = %if.then.1549, %land.lhs.true.1546, %do.body.1541
  br label %do.end.1554

do.end.1554:                                      ; preds = %if.end.1552
  br label %if.end.1555

if.end.1555:                                      ; preds = %do.end.1554, %do.end.1538
  br label %if.end.1571

if.else.1556:                                     ; preds = %if.else.1402
  br label %do.body.1557

do.body.1557:                                     ; preds = %if.else.1556
  store i8 0, i8* @charset_map_loaded, align 1
  %688 = load i32, i32* %c, align 4
  %689 = load i64, i64* %charset_list, align 8
  %call1559 = call %struct.charset* @char_charset(i32 %688, i64 %689, i32* null)
  store %struct.charset* %call1559, %struct.charset** %charset1403, align 8
  %690 = load i8, i8* @charset_map_loaded, align 1
  %tobool1560 = trunc i8 %690 to i1
  br i1 %tobool1560, label %land.lhs.true.1562, label %if.end.1568

land.lhs.true.1562:                               ; preds = %do.body.1557
  %691 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call1563 = call i64 @coding_change_destination(%struct.coding_system* %691)
  store i64 %call1563, i64* %offset1558, align 8
  %tobool1564 = icmp ne i64 %call1563, 0
  br i1 %tobool1564, label %if.then.1565, label %if.end.1568

if.then.1565:                                     ; preds = %land.lhs.true.1562
  %692 = load i64, i64* %offset1558, align 8
  %693 = load i8*, i8** %dst, align 8
  %add.ptr1566 = getelementptr inbounds i8, i8* %693, i64 %692
  store i8* %add.ptr1566, i8** %dst, align 8
  %694 = load i64, i64* %offset1558, align 8
  %695 = load i8*, i8** %dst_end, align 8
  %add.ptr1567 = getelementptr inbounds i8, i8* %695, i64 %694
  store i8* %add.ptr1567, i8** %dst_end, align 8
  br label %if.end.1568

if.end.1568:                                      ; preds = %if.then.1565, %land.lhs.true.1562, %do.body.1557
  br label %do.end.1570

do.end.1570:                                      ; preds = %if.end.1568
  br label %if.end.1571

if.end.1571:                                      ; preds = %do.end.1570, %if.end.1555
  %696 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %tobool1572 = icmp ne %struct.charset* %696, null
  br i1 %tobool1572, label %if.end.1598, label %if.then.1573

if.then.1573:                                     ; preds = %if.end.1571
  %697 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %697, i32 0, i32 1
  %bf.load1574 = load i32, i32* %mode, align 8
  %bf.lshr1575 = lshr i32 %bf.load1574, 14
  %bf.clear1576 = and i32 %bf.lshr1575, 31
  %and1577 = and i32 %bf.clear1576, 16
  %tobool1578 = icmp ne i32 %and1577, 0
  br i1 %tobool1578, label %if.then.1579, label %if.else.1582

if.then.1579:                                     ; preds = %if.then.1573
  store i32 63, i32* %c, align 4
  %698 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %699 = load i32, i32* @charset_ascii, align 4
  %idx.ext1580 = sext i32 %699 to i64
  %add.ptr1581 = getelementptr inbounds %struct.charset, %struct.charset* %698, i64 %idx.ext1580
  store %struct.charset* %add.ptr1581, %struct.charset** %charset1403, align 8
  br label %if.end.1597

if.else.1582:                                     ; preds = %if.then.1573
  %700 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %default_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %700, i32 0, i32 28
  %701 = load i32, i32* %default_char, align 4
  store i32 %701, i32* %c, align 4
  br label %do.body.1583

do.body.1583:                                     ; preds = %if.else.1582
  store i8 0, i8* @charset_map_loaded, align 1
  %702 = load i32, i32* %c, align 4
  %703 = load i64, i64* %charset_list, align 8
  %call1585 = call %struct.charset* @char_charset(i32 %702, i64 %703, i32* null)
  store %struct.charset* %call1585, %struct.charset** %charset1403, align 8
  %704 = load i8, i8* @charset_map_loaded, align 1
  %tobool1586 = trunc i8 %704 to i1
  br i1 %tobool1586, label %land.lhs.true.1588, label %if.end.1594

land.lhs.true.1588:                               ; preds = %do.body.1583
  %705 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call1589 = call i64 @coding_change_destination(%struct.coding_system* %705)
  store i64 %call1589, i64* %offset1584, align 8
  %tobool1590 = icmp ne i64 %call1589, 0
  br i1 %tobool1590, label %if.then.1591, label %if.end.1594

if.then.1591:                                     ; preds = %land.lhs.true.1588
  %706 = load i64, i64* %offset1584, align 8
  %707 = load i8*, i8** %dst, align 8
  %add.ptr1592 = getelementptr inbounds i8, i8* %707, i64 %706
  store i8* %add.ptr1592, i8** %dst, align 8
  %708 = load i64, i64* %offset1584, align 8
  %709 = load i8*, i8** %dst_end, align 8
  %add.ptr1593 = getelementptr inbounds i8, i8* %709, i64 %708
  store i8* %add.ptr1593, i8** %dst_end, align 8
  br label %if.end.1594

if.end.1594:                                      ; preds = %if.then.1591, %land.lhs.true.1588, %do.body.1583
  br label %do.end.1596

do.end.1596:                                      ; preds = %if.end.1594
  br label %if.end.1597

if.end.1597:                                      ; preds = %do.end.1596, %if.then.1579
  br label %if.end.1598

if.end.1598:                                      ; preds = %if.end.1597, %if.end.1571
  br label %do.body.1599

do.body.1599:                                     ; preds = %if.end.1598
  br label %do.body.1601

do.body.1601:                                     ; preds = %do.body.1599
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.1603, label %cond.false.1607

cond.true.1603:                                   ; preds = %do.body.1601
  %710 = load i32, i32* %c, align 4
  %add1604 = add i32 %710, 0
  %cmp1605 = icmp ult i32 %add1604, 128
  br i1 %cmp1605, label %land.lhs.true.1612, label %cond.false.1620

cond.false.1607:                                  ; preds = %do.body.1601
  %711 = load i32, i32* %c, align 4
  %conv1608 = sext i32 %711 to i64
  %add1609 = add i64 %conv1608, 0
  %cmp1610 = icmp ult i64 %add1609, 128
  br i1 %cmp1610, label %land.lhs.true.1612, label %cond.false.1620

land.lhs.true.1612:                               ; preds = %cond.false.1607, %cond.true.1603
  %712 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %ascii_compatible_p1613 = getelementptr inbounds %struct.charset, %struct.charset* %712, i32 0, i32 5
  %bf.load1614 = load i8, i8* %ascii_compatible_p1613, align 8
  %bf.lshr1615 = lshr i8 %bf.load1614, 2
  %bf.clear1616 = and i8 %bf.lshr1615, 1
  %bf.cast1617 = trunc i8 %bf.clear1616 to i1
  br i1 %bf.cast1617, label %cond.true.1619, label %cond.false.1620

cond.true.1619:                                   ; preds = %land.lhs.true.1612
  %713 = load i32, i32* %c, align 4
  br label %cond.end.1714

cond.false.1620:                                  ; preds = %land.lhs.true.1612, %cond.false.1607, %cond.true.1603
  %714 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %unified_p1621 = getelementptr inbounds %struct.charset, %struct.charset* %714, i32 0, i32 5
  %bf.load1622 = load i8, i8* %unified_p1621, align 8
  %bf.lshr1623 = lshr i8 %bf.load1622, 5
  %bf.clear1624 = and i8 %bf.lshr1623, 1
  %bf.cast1625 = trunc i8 %bf.clear1624 to i1
  br i1 %bf.cast1625, label %cond.true.1635, label %lor.lhs.false.1627

lor.lhs.false.1627:                               ; preds = %cond.false.1620
  %715 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1628 = getelementptr inbounds %struct.charset, %struct.charset* %715, i32 0, i32 9
  %716 = load i32, i32* %method1628, align 4
  %cmp1629 = icmp eq i32 %716, 2
  br i1 %cmp1629, label %cond.true.1635, label %lor.lhs.false.1631

lor.lhs.false.1631:                               ; preds = %lor.lhs.false.1627
  %717 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1632 = getelementptr inbounds %struct.charset, %struct.charset* %717, i32 0, i32 9
  %718 = load i32, i32* %method1632, align 4
  %cmp1633 = icmp eq i32 %718, 3
  br i1 %cmp1633, label %cond.true.1635, label %cond.false.1637

cond.true.1635:                                   ; preds = %lor.lhs.false.1631, %lor.lhs.false.1627, %cond.false.1620
  %719 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %720 = load i32, i32* %c, align 4
  %call1636 = call i32 @encode_char(%struct.charset* %719, i32 %720)
  br label %cond.end.1712

cond.false.1637:                                  ; preds = %lor.lhs.false.1631
  %721 = load i32, i32* %c, align 4
  %722 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %min_char1638 = getelementptr inbounds %struct.charset, %struct.charset* %722, i32 0, i32 13
  %723 = load i32, i32* %min_char1638, align 4
  %cmp1639 = icmp slt i32 %721, %723
  br i1 %cmp1639, label %cond.true.1645, label %lor.lhs.false.1641

lor.lhs.false.1641:                               ; preds = %cond.false.1637
  %724 = load i32, i32* %c, align 4
  %725 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %max_char1642 = getelementptr inbounds %struct.charset, %struct.charset* %725, i32 0, i32 14
  %726 = load i32, i32* %max_char1642, align 4
  %cmp1643 = icmp sgt i32 %724, %726
  br i1 %cmp1643, label %cond.true.1645, label %cond.false.1647

cond.true.1645:                                   ; preds = %lor.lhs.false.1641, %cond.false.1637
  %727 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %invalid_code1646 = getelementptr inbounds %struct.charset, %struct.charset* %727, i32 0, i32 15
  %728 = load i32, i32* %invalid_code1646, align 4
  br label %cond.end.1710

cond.false.1647:                                  ; preds = %lor.lhs.false.1641
  %729 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1648 = getelementptr inbounds %struct.charset, %struct.charset* %729, i32 0, i32 9
  %730 = load i32, i32* %method1648, align 4
  %cmp1649 = icmp eq i32 %730, 0
  br i1 %cmp1649, label %cond.true.1651, label %cond.false.1666

cond.true.1651:                                   ; preds = %cond.false.1647
  %731 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %code_linear_p1652 = getelementptr inbounds %struct.charset, %struct.charset* %731, i32 0, i32 5
  %bf.load1653 = load i8, i8* %code_linear_p1652, align 8
  %bf.clear1654 = and i8 %bf.load1653, 1
  %bf.cast1655 = trunc i8 %bf.clear1654 to i1
  br i1 %bf.cast1655, label %cond.true.1657, label %cond.false.1662

cond.true.1657:                                   ; preds = %cond.true.1651
  %732 = load i32, i32* %c, align 4
  %733 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %code_offset1658 = getelementptr inbounds %struct.charset, %struct.charset* %733, i32 0, i32 17
  %734 = load i32, i32* %code_offset1658, align 4
  %sub1659 = sub nsw i32 %732, %734
  %735 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %min_code1660 = getelementptr inbounds %struct.charset, %struct.charset* %735, i32 0, i32 10
  %736 = load i32, i32* %min_code1660, align 4
  %add1661 = add i32 %sub1659, %736
  br label %cond.end.1664

cond.false.1662:                                  ; preds = %cond.true.1651
  %737 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %738 = load i32, i32* %c, align 4
  %call1663 = call i32 @encode_char(%struct.charset* %737, i32 %738)
  br label %cond.end.1664

cond.end.1664:                                    ; preds = %cond.false.1662, %cond.true.1657
  %cond1665 = phi i32 [ %add1661, %cond.true.1657 ], [ %call1663, %cond.false.1662 ]
  br label %cond.end.1708

cond.false.1666:                                  ; preds = %cond.false.1647
  %739 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %method1667 = getelementptr inbounds %struct.charset, %struct.charset* %739, i32 0, i32 9
  %740 = load i32, i32* %method1667, align 4
  %cmp1668 = icmp eq i32 %740, 1
  br i1 %cmp1668, label %cond.true.1670, label %cond.false.1704

cond.true.1670:                                   ; preds = %cond.false.1666
  %741 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %compact_codes_p1671 = getelementptr inbounds %struct.charset, %struct.charset* %741, i32 0, i32 5
  %bf.load1672 = load i8, i8* %compact_codes_p1671, align 8
  %bf.lshr1673 = lshr i8 %bf.load1672, 4
  %bf.clear1674 = and i8 %bf.lshr1673, 1
  %bf.cast1675 = trunc i8 %bf.clear1674 to i1
  br i1 %bf.cast1675, label %land.lhs.true.1677, label %cond.false.1700

land.lhs.true.1677:                               ; preds = %cond.true.1670
  %742 = load i64, i64* @Vcharset_hash_table, align 8
  %call1678 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %742)
  %743 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %hash_index1679 = getelementptr inbounds %struct.charset, %struct.charset* %743, i32 0, i32 1
  %744 = load i64, i64* %hash_index1679, align 8
  %call1680 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call1678, i64 %744)
  %call1681 = call i64 @AREF(i64 %call1680, i64 5)
  %call1682 = call zeroext i1 @CHAR_TABLE_P(i64 %call1681)
  br i1 %call1682, label %cond.true.1684, label %cond.false.1700

cond.true.1684:                                   ; preds = %land.lhs.true.1677
  %745 = load i64, i64* @Vcharset_hash_table, align 8
  %call1685 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %745)
  %746 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %hash_index1686 = getelementptr inbounds %struct.charset, %struct.charset* %746, i32 0, i32 1
  %747 = load i64, i64* %hash_index1686, align 8
  %call1687 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call1685, i64 %747)
  %call1688 = call i64 @AREF(i64 %call1687, i64 5)
  %748 = load i32, i32* %c, align 4
  %call1689 = call i64 @CHAR_TABLE_REF(i64 %call1688, i32 %748)
  store i64 %call1689, i64* @charset_work, align 8
  %749 = load i64, i64* @charset_work, align 8
  %call1690 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1691 = icmp eq i64 %749, %call1690
  br i1 %cmp1691, label %cond.true.1693, label %cond.false.1695

cond.true.1693:                                   ; preds = %cond.true.1684
  %750 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %invalid_code1694 = getelementptr inbounds %struct.charset, %struct.charset* %750, i32 0, i32 15
  %751 = load i32, i32* %invalid_code1694, align 4
  br label %cond.end.1698

cond.false.1695:                                  ; preds = %cond.true.1684
  %752 = load i64, i64* @charset_work, align 8
  %shr1696 = ashr i64 %752, 2
  %conv1697 = trunc i64 %shr1696 to i32
  br label %cond.end.1698

cond.end.1698:                                    ; preds = %cond.false.1695, %cond.true.1693
  %cond1699 = phi i32 [ %751, %cond.true.1693 ], [ %conv1697, %cond.false.1695 ]
  br label %cond.end.1702

cond.false.1700:                                  ; preds = %land.lhs.true.1677, %cond.true.1670
  %753 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %754 = load i32, i32* %c, align 4
  %call1701 = call i32 @encode_char(%struct.charset* %753, i32 %754)
  br label %cond.end.1702

cond.end.1702:                                    ; preds = %cond.false.1700, %cond.end.1698
  %cond1703 = phi i32 [ %cond1699, %cond.end.1698 ], [ %call1701, %cond.false.1700 ]
  br label %cond.end.1706

cond.false.1704:                                  ; preds = %cond.false.1666
  %755 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %756 = load i32, i32* %c, align 4
  %call1705 = call i32 @encode_char(%struct.charset* %755, i32 %756)
  br label %cond.end.1706

cond.end.1706:                                    ; preds = %cond.false.1704, %cond.end.1702
  %cond1707 = phi i32 [ %cond1703, %cond.end.1702 ], [ %call1705, %cond.false.1704 ]
  br label %cond.end.1708

cond.end.1708:                                    ; preds = %cond.end.1706, %cond.end.1664
  %cond1709 = phi i32 [ %cond1665, %cond.end.1664 ], [ %cond1707, %cond.end.1706 ]
  br label %cond.end.1710

cond.end.1710:                                    ; preds = %cond.end.1708, %cond.true.1645
  %cond1711 = phi i32 [ %728, %cond.true.1645 ], [ %cond1709, %cond.end.1708 ]
  br label %cond.end.1712

cond.end.1712:                                    ; preds = %cond.end.1710, %cond.true.1635
  %cond1713 = phi i32 [ %call1636, %cond.true.1635 ], [ %cond1711, %cond.end.1710 ]
  br label %cond.end.1714

cond.end.1714:                                    ; preds = %cond.end.1712, %cond.true.1619
  %cond1715 = phi i32 [ %713, %cond.true.1619 ], [ %cond1713, %cond.end.1712 ]
  store i32 %cond1715, i32* %code1600, align 4
  %757 = load i8, i8* @charset_map_loaded, align 1
  %tobool1716 = trunc i8 %757 to i1
  br i1 %tobool1716, label %land.lhs.true.1718, label %if.end.1724

land.lhs.true.1718:                               ; preds = %cond.end.1714
  %758 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call1719 = call i64 @coding_change_destination(%struct.coding_system* %758)
  store i64 %call1719, i64* %offset1602, align 8
  %tobool1720 = icmp ne i64 %call1719, 0
  br i1 %tobool1720, label %if.then.1721, label %if.end.1724

if.then.1721:                                     ; preds = %land.lhs.true.1718
  %759 = load i64, i64* %offset1602, align 8
  %760 = load i8*, i8** %dst, align 8
  %add.ptr1722 = getelementptr inbounds i8, i8* %760, i64 %759
  store i8* %add.ptr1722, i8** %dst, align 8
  %761 = load i64, i64* %offset1602, align 8
  %762 = load i8*, i8** %dst_end, align 8
  %add.ptr1723 = getelementptr inbounds i8, i8* %762, i64 %761
  store i8* %add.ptr1723, i8** %dst_end, align 8
  br label %if.end.1724

if.end.1724:                                      ; preds = %if.then.1721, %land.lhs.true.1718, %cond.end.1714
  br label %do.end.1726

do.end.1726:                                      ; preds = %if.end.1724
  %763 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %dimension1727 = getelementptr inbounds %struct.charset, %struct.charset* %763, i32 0, i32 2
  %764 = load i32, i32* %dimension1727, align 4
  %cmp1728 = icmp eq i32 %764, 1
  br i1 %cmp1728, label %if.then.1730, label %if.else.1957

if.then.1730:                                     ; preds = %do.end.1726
  br label %do.body.1731

do.body.1731:                                     ; preds = %do.cond.1955, %if.then.1730
  %765 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %id1733 = getelementptr inbounds %struct.charset, %struct.charset* %765, i32 0, i32 0
  %766 = load i32, i32* %id1733, align 4
  store i32 %766, i32* %id1732, align 4
  %767 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1734 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %767, i32 0, i32 3
  %iso_20221735 = bitcast %union.anon* %spec1734 to %struct.iso_2022_spec*
  %flags1736 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221735, i32 0, i32 0
  %768 = load i32, i32* %flags1736, align 4
  %and1737 = and i32 %768, 32768
  %tobool1738 = icmp ne i32 %and1737, 0
  br i1 %tobool1738, label %land.lhs.true.1739, label %if.end.1745

land.lhs.true.1739:                               ; preds = %do.body.1731
  %769 = load i32, i32* %id1732, align 4
  %770 = load i32, i32* @charset_ascii, align 4
  %cmp1740 = icmp eq i32 %769, %770
  br i1 %cmp1740, label %if.then.1742, label %if.end.1745

if.then.1742:                                     ; preds = %land.lhs.true.1739
  %771 = load i32, i32* @charset_jisx0201_roman, align 4
  store i32 %771, i32* %id1732, align 4
  %772 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %773 = load i32, i32* %id1732, align 4
  %idx.ext1743 = sext i32 %773 to i64
  %add.ptr1744 = getelementptr inbounds %struct.charset, %struct.charset* %772, i64 %idx.ext1743
  store %struct.charset* %add.ptr1744, %struct.charset** %charset1403, align 8
  br label %if.end.1745

if.end.1745:                                      ; preds = %if.then.1742, %land.lhs.true.1739, %do.body.1731
  %774 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1746 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %774, i32 0, i32 3
  %iso_20221747 = bitcast %union.anon* %spec1746 to %struct.iso_2022_spec*
  %single_shifting1748 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221747, i32 0, i32 4
  %bf.load1749 = load i8, i8* %single_shifting1748, align 4
  %bf.clear1750 = and i8 %bf.load1749, 1
  %bf.cast1751 = trunc i8 %bf.clear1750 to i1
  br i1 %bf.cast1751, label %if.then.1752, label %if.else.1835

if.then.1752:                                     ; preds = %if.end.1745
  %775 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1753 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %775, i32 0, i32 3
  %iso_20221754 = bitcast %union.anon* %spec1753 to %struct.iso_2022_spec*
  %flags1755 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221754, i32 0, i32 0
  %776 = load i32, i32* %flags1755, align 4
  %and1756 = and i32 %776, 8
  %tobool1757 = icmp ne i32 %and1756, 0
  br i1 %tobool1757, label %if.then.1758, label %if.else.1766

if.then.1758:                                     ; preds = %if.then.1752
  br label %do.body.1759

do.body.1759:                                     ; preds = %if.then.1758
  %777 = load i64, i64* %produced_chars, align 8
  %inc1760 = add nsw i64 %777, 1
  store i64 %inc1760, i64* %produced_chars, align 8
  %778 = load i32, i32* %code1600, align 4
  %and1761 = and i32 %778, 127
  %conv1762 = trunc i32 %and1761 to i8
  %779 = load i8*, i8** %dst, align 8
  %incdec.ptr1763 = getelementptr inbounds i8, i8* %779, i32 1
  store i8* %incdec.ptr1763, i8** %dst, align 8
  store i8 %conv1762, i8* %779, align 1
  br label %do.end.1765

do.end.1765:                                      ; preds = %do.body.1759
  br label %if.end.1829

if.else.1766:                                     ; preds = %if.then.1752
  br label %do.body.1767

do.body.1767:                                     ; preds = %if.else.1766
  %780 = load i64, i64* %produced_chars, align 8
  %inc1768 = add nsw i64 %780, 1
  store i64 %inc1768, i64* %produced_chars, align 8
  %781 = load i8, i8* %multibytep, align 1
  %tobool1769 = trunc i8 %781 to i1
  br i1 %tobool1769, label %if.then.1770, label %if.else.1822

if.then.1770:                                     ; preds = %do.body.1767
  %782 = load i32, i32* %code1600, align 4
  %or1772 = or i32 %782, 128
  store i32 %or1772, i32* %ch1771, align 4
  %783 = load i32, i32* %ch1771, align 4
  %cmp1773 = icmp uge i32 %783, 128
  br i1 %cmp1773, label %if.then.1775, label %if.end.1777

if.then.1775:                                     ; preds = %if.then.1770
  %784 = load i32, i32* %ch1771, align 4
  %add1776 = add i32 %784, 4194048
  store i32 %add1776, i32* %ch1771, align 4
  br label %if.end.1777

if.end.1777:                                      ; preds = %if.then.1775, %if.then.1770
  br label %do.body.1778

do.body.1778:                                     ; preds = %if.end.1777
  %785 = load i32, i32* %ch1771, align 4
  %cmp1779 = icmp ule i32 %785, 127
  br i1 %cmp1779, label %if.then.1781, label %if.else.1784

if.then.1781:                                     ; preds = %do.body.1778
  %786 = load i32, i32* %ch1771, align 4
  %conv1782 = trunc i32 %786 to i8
  %787 = load i8*, i8** %dst, align 8
  %incdec.ptr1783 = getelementptr inbounds i8, i8* %787, i32 1
  store i8* %incdec.ptr1783, i8** %dst, align 8
  store i8 %conv1782, i8* %787, align 1
  br label %if.end.1819

if.else.1784:                                     ; preds = %do.body.1778
  %788 = load i32, i32* %ch1771, align 4
  %cmp1785 = icmp ule i32 %788, 2047
  br i1 %cmp1785, label %if.then.1787, label %if.else.1796

if.then.1787:                                     ; preds = %if.else.1784
  %789 = load i32, i32* %ch1771, align 4
  %shr1788 = lshr i32 %789, 6
  %or1789 = or i32 192, %shr1788
  %conv1790 = trunc i32 %or1789 to i8
  %790 = load i8*, i8** %dst, align 8
  %incdec.ptr1791 = getelementptr inbounds i8, i8* %790, i32 1
  store i8* %incdec.ptr1791, i8** %dst, align 8
  store i8 %conv1790, i8* %790, align 1
  %791 = load i32, i32* %ch1771, align 4
  %and1792 = and i32 %791, 63
  %or1793 = or i32 128, %and1792
  %conv1794 = trunc i32 %or1793 to i8
  %792 = load i8*, i8** %dst, align 8
  %incdec.ptr1795 = getelementptr inbounds i8, i8* %792, i32 1
  store i8* %incdec.ptr1795, i8** %dst, align 8
  store i8 %conv1794, i8* %792, align 1
  br label %if.end.1818

if.else.1796:                                     ; preds = %if.else.1784
  %793 = load i32, i32* %ch1771, align 4
  %cmp1797 = icmp ule i32 %793, 65535
  br i1 %cmp1797, label %if.then.1799, label %if.else.1813

if.then.1799:                                     ; preds = %if.else.1796
  %794 = load i32, i32* %ch1771, align 4
  %shr1800 = lshr i32 %794, 12
  %or1801 = or i32 224, %shr1800
  %conv1802 = trunc i32 %or1801 to i8
  %795 = load i8*, i8** %dst, align 8
  %incdec.ptr1803 = getelementptr inbounds i8, i8* %795, i32 1
  store i8* %incdec.ptr1803, i8** %dst, align 8
  store i8 %conv1802, i8* %795, align 1
  %796 = load i32, i32* %ch1771, align 4
  %shr1804 = lshr i32 %796, 6
  %and1805 = and i32 %shr1804, 63
  %or1806 = or i32 128, %and1805
  %conv1807 = trunc i32 %or1806 to i8
  %797 = load i8*, i8** %dst, align 8
  %incdec.ptr1808 = getelementptr inbounds i8, i8* %797, i32 1
  store i8* %incdec.ptr1808, i8** %dst, align 8
  store i8 %conv1807, i8* %797, align 1
  %798 = load i32, i32* %ch1771, align 4
  %and1809 = and i32 %798, 63
  %or1810 = or i32 128, %and1809
  %conv1811 = trunc i32 %or1810 to i8
  %799 = load i8*, i8** %dst, align 8
  %incdec.ptr1812 = getelementptr inbounds i8, i8* %799, i32 1
  store i8* %incdec.ptr1812, i8** %dst, align 8
  store i8 %conv1811, i8* %799, align 1
  br label %if.end.1817

if.else.1813:                                     ; preds = %if.else.1796
  %800 = load i32, i32* %ch1771, align 4
  %801 = load i8*, i8** %dst, align 8
  %call1814 = call i32 @char_string(i32 %800, i8* %801)
  %802 = load i8*, i8** %dst, align 8
  %idx.ext1815 = sext i32 %call1814 to i64
  %add.ptr1816 = getelementptr inbounds i8, i8* %802, i64 %idx.ext1815
  store i8* %add.ptr1816, i8** %dst, align 8
  br label %if.end.1817

if.end.1817:                                      ; preds = %if.else.1813, %if.then.1799
  br label %if.end.1818

if.end.1818:                                      ; preds = %if.end.1817, %if.then.1787
  br label %if.end.1819

if.end.1819:                                      ; preds = %if.end.1818, %if.then.1781
  br label %do.end.1821

do.end.1821:                                      ; preds = %if.end.1819
  br label %if.end.1826

if.else.1822:                                     ; preds = %do.body.1767
  %803 = load i32, i32* %code1600, align 4
  %or1823 = or i32 %803, 128
  %conv1824 = trunc i32 %or1823 to i8
  %804 = load i8*, i8** %dst, align 8
  %incdec.ptr1825 = getelementptr inbounds i8, i8* %804, i32 1
  store i8* %incdec.ptr1825, i8** %dst, align 8
  store i8 %conv1824, i8* %804, align 1
  br label %if.end.1826

if.end.1826:                                      ; preds = %if.else.1822, %do.end.1821
  br label %do.end.1828

do.end.1828:                                      ; preds = %if.end.1826
  br label %if.end.1829

if.end.1829:                                      ; preds = %do.end.1828, %do.end.1765
  %805 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1830 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %805, i32 0, i32 3
  %iso_20221831 = bitcast %union.anon* %spec1830 to %struct.iso_2022_spec*
  %single_shifting1832 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221831, i32 0, i32 4
  %bf.load1833 = load i8, i8* %single_shifting1832, align 4
  %bf.clear1834 = and i8 %bf.load1833, -2
  store i8 %bf.clear1834, i8* %single_shifting1832, align 4
  br label %do.end.1956

if.else.1835:                                     ; preds = %if.end.1745
  %806 = load i32, i32* %id1732, align 4
  %807 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1836 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %807, i32 0, i32 3
  %iso_20221837 = bitcast %union.anon* %spec1836 to %struct.iso_2022_spec*
  %current_invocation1838 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221837, i32 0, i32 1
  %arrayidx1839 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1838, i32 0, i64 0
  %808 = load i32, i32* %arrayidx1839, align 4
  %cmp1840 = icmp slt i32 %808, 0
  br i1 %cmp1840, label %cond.true.1842, label %cond.false.1843

cond.true.1842:                                   ; preds = %if.else.1835
  br label %cond.end.1853

cond.false.1843:                                  ; preds = %if.else.1835
  %809 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1844 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %809, i32 0, i32 3
  %iso_20221845 = bitcast %union.anon* %spec1844 to %struct.iso_2022_spec*
  %current_invocation1846 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221845, i32 0, i32 1
  %arrayidx1847 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1846, i32 0, i64 0
  %810 = load i32, i32* %arrayidx1847, align 4
  %idxprom1848 = sext i32 %810 to i64
  %811 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1849 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %811, i32 0, i32 3
  %iso_20221850 = bitcast %union.anon* %spec1849 to %struct.iso_2022_spec*
  %current_designation1851 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221850, i32 0, i32 2
  %arrayidx1852 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1851, i32 0, i64 %idxprom1848
  %812 = load i32, i32* %arrayidx1852, align 4
  br label %cond.end.1853

cond.end.1853:                                    ; preds = %cond.false.1843, %cond.true.1842
  %cond1854 = phi i32 [ -1, %cond.true.1842 ], [ %812, %cond.false.1843 ]
  %cmp1855 = icmp eq i32 %806, %cond1854
  br i1 %cmp1855, label %if.then.1857, label %if.else.1865

if.then.1857:                                     ; preds = %cond.end.1853
  br label %do.body.1858

do.body.1858:                                     ; preds = %if.then.1857
  %813 = load i64, i64* %produced_chars, align 8
  %inc1859 = add nsw i64 %813, 1
  store i64 %inc1859, i64* %produced_chars, align 8
  %814 = load i32, i32* %code1600, align 4
  %and1860 = and i32 %814, 127
  %conv1861 = trunc i32 %and1860 to i8
  %815 = load i8*, i8** %dst, align 8
  %incdec.ptr1862 = getelementptr inbounds i8, i8* %815, i32 1
  store i8* %incdec.ptr1862, i8** %dst, align 8
  store i8 %conv1861, i8* %815, align 1
  br label %do.end.1864

do.end.1864:                                      ; preds = %do.body.1858
  br label %do.end.1956

if.else.1865:                                     ; preds = %cond.end.1853
  %816 = load i32, i32* %id1732, align 4
  %817 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1866 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %817, i32 0, i32 3
  %iso_20221867 = bitcast %union.anon* %spec1866 to %struct.iso_2022_spec*
  %current_invocation1868 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221867, i32 0, i32 1
  %arrayidx1869 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1868, i32 0, i64 1
  %818 = load i32, i32* %arrayidx1869, align 4
  %cmp1870 = icmp slt i32 %818, 0
  br i1 %cmp1870, label %cond.true.1872, label %cond.false.1873

cond.true.1872:                                   ; preds = %if.else.1865
  br label %cond.end.1883

cond.false.1873:                                  ; preds = %if.else.1865
  %819 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1874 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %819, i32 0, i32 3
  %iso_20221875 = bitcast %union.anon* %spec1874 to %struct.iso_2022_spec*
  %current_invocation1876 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221875, i32 0, i32 1
  %arrayidx1877 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation1876, i32 0, i64 1
  %820 = load i32, i32* %arrayidx1877, align 4
  %idxprom1878 = sext i32 %820 to i64
  %821 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1879 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %821, i32 0, i32 3
  %iso_20221880 = bitcast %union.anon* %spec1879 to %struct.iso_2022_spec*
  %current_designation1881 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221880, i32 0, i32 2
  %arrayidx1882 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation1881, i32 0, i64 %idxprom1878
  %822 = load i32, i32* %arrayidx1882, align 4
  br label %cond.end.1883

cond.end.1883:                                    ; preds = %cond.false.1873, %cond.true.1872
  %cond1884 = phi i32 [ -1, %cond.true.1872 ], [ %822, %cond.false.1873 ]
  %cmp1885 = icmp eq i32 %816, %cond1884
  br i1 %cmp1885, label %if.then.1887, label %if.else.1950

if.then.1887:                                     ; preds = %cond.end.1883
  br label %do.body.1888

do.body.1888:                                     ; preds = %if.then.1887
  %823 = load i64, i64* %produced_chars, align 8
  %inc1889 = add nsw i64 %823, 1
  store i64 %inc1889, i64* %produced_chars, align 8
  %824 = load i8, i8* %multibytep, align 1
  %tobool1890 = trunc i8 %824 to i1
  br i1 %tobool1890, label %if.then.1891, label %if.else.1943

if.then.1891:                                     ; preds = %do.body.1888
  %825 = load i32, i32* %code1600, align 4
  %or1893 = or i32 %825, 128
  store i32 %or1893, i32* %ch1892, align 4
  %826 = load i32, i32* %ch1892, align 4
  %cmp1894 = icmp uge i32 %826, 128
  br i1 %cmp1894, label %if.then.1896, label %if.end.1898

if.then.1896:                                     ; preds = %if.then.1891
  %827 = load i32, i32* %ch1892, align 4
  %add1897 = add i32 %827, 4194048
  store i32 %add1897, i32* %ch1892, align 4
  br label %if.end.1898

if.end.1898:                                      ; preds = %if.then.1896, %if.then.1891
  br label %do.body.1899

do.body.1899:                                     ; preds = %if.end.1898
  %828 = load i32, i32* %ch1892, align 4
  %cmp1900 = icmp ule i32 %828, 127
  br i1 %cmp1900, label %if.then.1902, label %if.else.1905

if.then.1902:                                     ; preds = %do.body.1899
  %829 = load i32, i32* %ch1892, align 4
  %conv1903 = trunc i32 %829 to i8
  %830 = load i8*, i8** %dst, align 8
  %incdec.ptr1904 = getelementptr inbounds i8, i8* %830, i32 1
  store i8* %incdec.ptr1904, i8** %dst, align 8
  store i8 %conv1903, i8* %830, align 1
  br label %if.end.1940

if.else.1905:                                     ; preds = %do.body.1899
  %831 = load i32, i32* %ch1892, align 4
  %cmp1906 = icmp ule i32 %831, 2047
  br i1 %cmp1906, label %if.then.1908, label %if.else.1917

if.then.1908:                                     ; preds = %if.else.1905
  %832 = load i32, i32* %ch1892, align 4
  %shr1909 = lshr i32 %832, 6
  %or1910 = or i32 192, %shr1909
  %conv1911 = trunc i32 %or1910 to i8
  %833 = load i8*, i8** %dst, align 8
  %incdec.ptr1912 = getelementptr inbounds i8, i8* %833, i32 1
  store i8* %incdec.ptr1912, i8** %dst, align 8
  store i8 %conv1911, i8* %833, align 1
  %834 = load i32, i32* %ch1892, align 4
  %and1913 = and i32 %834, 63
  %or1914 = or i32 128, %and1913
  %conv1915 = trunc i32 %or1914 to i8
  %835 = load i8*, i8** %dst, align 8
  %incdec.ptr1916 = getelementptr inbounds i8, i8* %835, i32 1
  store i8* %incdec.ptr1916, i8** %dst, align 8
  store i8 %conv1915, i8* %835, align 1
  br label %if.end.1939

if.else.1917:                                     ; preds = %if.else.1905
  %836 = load i32, i32* %ch1892, align 4
  %cmp1918 = icmp ule i32 %836, 65535
  br i1 %cmp1918, label %if.then.1920, label %if.else.1934

if.then.1920:                                     ; preds = %if.else.1917
  %837 = load i32, i32* %ch1892, align 4
  %shr1921 = lshr i32 %837, 12
  %or1922 = or i32 224, %shr1921
  %conv1923 = trunc i32 %or1922 to i8
  %838 = load i8*, i8** %dst, align 8
  %incdec.ptr1924 = getelementptr inbounds i8, i8* %838, i32 1
  store i8* %incdec.ptr1924, i8** %dst, align 8
  store i8 %conv1923, i8* %838, align 1
  %839 = load i32, i32* %ch1892, align 4
  %shr1925 = lshr i32 %839, 6
  %and1926 = and i32 %shr1925, 63
  %or1927 = or i32 128, %and1926
  %conv1928 = trunc i32 %or1927 to i8
  %840 = load i8*, i8** %dst, align 8
  %incdec.ptr1929 = getelementptr inbounds i8, i8* %840, i32 1
  store i8* %incdec.ptr1929, i8** %dst, align 8
  store i8 %conv1928, i8* %840, align 1
  %841 = load i32, i32* %ch1892, align 4
  %and1930 = and i32 %841, 63
  %or1931 = or i32 128, %and1930
  %conv1932 = trunc i32 %or1931 to i8
  %842 = load i8*, i8** %dst, align 8
  %incdec.ptr1933 = getelementptr inbounds i8, i8* %842, i32 1
  store i8* %incdec.ptr1933, i8** %dst, align 8
  store i8 %conv1932, i8* %842, align 1
  br label %if.end.1938

if.else.1934:                                     ; preds = %if.else.1917
  %843 = load i32, i32* %ch1892, align 4
  %844 = load i8*, i8** %dst, align 8
  %call1935 = call i32 @char_string(i32 %843, i8* %844)
  %845 = load i8*, i8** %dst, align 8
  %idx.ext1936 = sext i32 %call1935 to i64
  %add.ptr1937 = getelementptr inbounds i8, i8* %845, i64 %idx.ext1936
  store i8* %add.ptr1937, i8** %dst, align 8
  br label %if.end.1938

if.end.1938:                                      ; preds = %if.else.1934, %if.then.1920
  br label %if.end.1939

if.end.1939:                                      ; preds = %if.end.1938, %if.then.1908
  br label %if.end.1940

if.end.1940:                                      ; preds = %if.end.1939, %if.then.1902
  br label %do.end.1942

do.end.1942:                                      ; preds = %if.end.1940
  br label %if.end.1947

if.else.1943:                                     ; preds = %do.body.1888
  %846 = load i32, i32* %code1600, align 4
  %or1944 = or i32 %846, 128
  %conv1945 = trunc i32 %or1944 to i8
  %847 = load i8*, i8** %dst, align 8
  %incdec.ptr1946 = getelementptr inbounds i8, i8* %847, i32 1
  store i8* %incdec.ptr1946, i8** %dst, align 8
  store i8 %conv1945, i8* %847, align 1
  br label %if.end.1947

if.end.1947:                                      ; preds = %if.else.1943, %do.end.1942
  br label %do.end.1949

do.end.1949:                                      ; preds = %if.end.1947
  br label %do.end.1956

if.else.1950:                                     ; preds = %cond.end.1883
  %848 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %849 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %850 = load i8*, i8** %dst, align 8
  %call1951 = call i8* @encode_invocation_designation(%struct.charset* %848, %struct.coding_system* %849, i8* %850, i64* %produced_chars)
  store i8* %call1951, i8** %dst, align 8
  br label %if.end.1952

if.end.1952:                                      ; preds = %if.else.1950
  br label %if.end.1953

if.end.1953:                                      ; preds = %if.end.1952
  br label %if.end.1954

if.end.1954:                                      ; preds = %if.end.1953
  br label %do.cond.1955

do.cond.1955:                                     ; preds = %if.end.1954
  br i1 true, label %do.body.1731, label %do.end.1956

do.end.1956:                                      ; preds = %do.cond.1955, %do.end.1949, %do.end.1864, %if.end.1829
  br label %if.end.2308

if.else.1957:                                     ; preds = %do.end.1726
  br label %do.body.1958

do.body.1958:                                     ; preds = %do.cond.2306, %if.else.1957
  %851 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %id1960 = getelementptr inbounds %struct.charset, %struct.charset* %851, i32 0, i32 0
  %852 = load i32, i32* %id1960, align 4
  store i32 %852, i32* %id1959, align 4
  %853 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1961 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %853, i32 0, i32 3
  %iso_20221962 = bitcast %union.anon* %spec1961 to %struct.iso_2022_spec*
  %flags1963 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221962, i32 0, i32 0
  %854 = load i32, i32* %flags1963, align 4
  %and1964 = and i32 %854, 65536
  %tobool1965 = icmp ne i32 %and1964, 0
  br i1 %tobool1965, label %land.lhs.true.1966, label %if.end.1972

land.lhs.true.1966:                               ; preds = %do.body.1958
  %855 = load i32, i32* %id1959, align 4
  %856 = load i32, i32* @charset_jisx0208, align 4
  %cmp1967 = icmp eq i32 %855, %856
  br i1 %cmp1967, label %if.then.1969, label %if.end.1972

if.then.1969:                                     ; preds = %land.lhs.true.1966
  %857 = load i32, i32* @charset_jisx0208_1978, align 4
  store i32 %857, i32* %id1959, align 4
  %858 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %859 = load i32, i32* %id1959, align 4
  %idx.ext1970 = sext i32 %859 to i64
  %add.ptr1971 = getelementptr inbounds %struct.charset, %struct.charset* %858, i64 %idx.ext1970
  store %struct.charset* %add.ptr1971, %struct.charset** %charset1403, align 8
  br label %if.end.1972

if.end.1972:                                      ; preds = %if.then.1969, %land.lhs.true.1966, %do.body.1958
  %860 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1973 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %860, i32 0, i32 3
  %iso_20221974 = bitcast %union.anon* %spec1973 to %struct.iso_2022_spec*
  %single_shifting1975 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221974, i32 0, i32 4
  %bf.load1976 = load i8, i8* %single_shifting1975, align 4
  %bf.clear1977 = and i8 %bf.load1976, 1
  %bf.cast1978 = trunc i8 %bf.clear1977 to i1
  br i1 %bf.cast1978, label %if.then.1979, label %if.else.2124

if.then.1979:                                     ; preds = %if.end.1972
  %861 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec1980 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %861, i32 0, i32 3
  %iso_20221981 = bitcast %union.anon* %spec1980 to %struct.iso_2022_spec*
  %flags1982 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20221981, i32 0, i32 0
  %862 = load i32, i32* %flags1982, align 4
  %and1983 = and i32 %862, 8
  %tobool1984 = icmp ne i32 %and1983, 0
  br i1 %tobool1984, label %if.then.1985, label %if.else.1998

if.then.1985:                                     ; preds = %if.then.1979
  br label %do.body.1986

do.body.1986:                                     ; preds = %if.then.1985
  %863 = load i64, i64* %produced_chars, align 8
  %add1987 = add nsw i64 %863, 2
  store i64 %add1987, i64* %produced_chars, align 8
  %864 = load i32, i32* %code1600, align 4
  %shr1988 = lshr i32 %864, 8
  %and1989 = and i32 %shr1988, 127
  %conv1990 = trunc i32 %and1989 to i8
  %865 = load i8*, i8** %dst, align 8
  %incdec.ptr1991 = getelementptr inbounds i8, i8* %865, i32 1
  store i8* %incdec.ptr1991, i8** %dst, align 8
  store i8 %conv1990, i8* %865, align 1
  %866 = load i32, i32* %code1600, align 4
  %and1992 = and i32 %866, 255
  %and1993 = and i32 %and1992, 127
  %conv1994 = trunc i32 %and1993 to i8
  %867 = load i8*, i8** %dst, align 8
  %incdec.ptr1995 = getelementptr inbounds i8, i8* %867, i32 1
  store i8* %incdec.ptr1995, i8** %dst, align 8
  store i8 %conv1994, i8* %867, align 1
  br label %do.end.1997

do.end.1997:                                      ; preds = %do.body.1986
  br label %if.end.2118

if.else.1998:                                     ; preds = %if.then.1979
  br label %do.body.1999

do.body.1999:                                     ; preds = %if.else.1998
  %868 = load i64, i64* %produced_chars, align 8
  %add2000 = add nsw i64 %868, 2
  store i64 %add2000, i64* %produced_chars, align 8
  %869 = load i8, i8* %multibytep, align 1
  %tobool2001 = trunc i8 %869 to i1
  br i1 %tobool2001, label %if.then.2002, label %if.else.2106

if.then.2002:                                     ; preds = %do.body.1999
  %870 = load i32, i32* %code1600, align 4
  %shr2004 = lshr i32 %870, 8
  %or2005 = or i32 %shr2004, 128
  store i32 %or2005, i32* %ch2003, align 4
  %871 = load i32, i32* %ch2003, align 4
  %cmp2006 = icmp uge i32 %871, 128
  br i1 %cmp2006, label %if.then.2008, label %if.end.2010

if.then.2008:                                     ; preds = %if.then.2002
  %872 = load i32, i32* %ch2003, align 4
  %add2009 = add i32 %872, 4194048
  store i32 %add2009, i32* %ch2003, align 4
  br label %if.end.2010

if.end.2010:                                      ; preds = %if.then.2008, %if.then.2002
  br label %do.body.2011

do.body.2011:                                     ; preds = %if.end.2010
  %873 = load i32, i32* %ch2003, align 4
  %cmp2012 = icmp ule i32 %873, 127
  br i1 %cmp2012, label %if.then.2014, label %if.else.2017

if.then.2014:                                     ; preds = %do.body.2011
  %874 = load i32, i32* %ch2003, align 4
  %conv2015 = trunc i32 %874 to i8
  %875 = load i8*, i8** %dst, align 8
  %incdec.ptr2016 = getelementptr inbounds i8, i8* %875, i32 1
  store i8* %incdec.ptr2016, i8** %dst, align 8
  store i8 %conv2015, i8* %875, align 1
  br label %if.end.2052

if.else.2017:                                     ; preds = %do.body.2011
  %876 = load i32, i32* %ch2003, align 4
  %cmp2018 = icmp ule i32 %876, 2047
  br i1 %cmp2018, label %if.then.2020, label %if.else.2029

if.then.2020:                                     ; preds = %if.else.2017
  %877 = load i32, i32* %ch2003, align 4
  %shr2021 = lshr i32 %877, 6
  %or2022 = or i32 192, %shr2021
  %conv2023 = trunc i32 %or2022 to i8
  %878 = load i8*, i8** %dst, align 8
  %incdec.ptr2024 = getelementptr inbounds i8, i8* %878, i32 1
  store i8* %incdec.ptr2024, i8** %dst, align 8
  store i8 %conv2023, i8* %878, align 1
  %879 = load i32, i32* %ch2003, align 4
  %and2025 = and i32 %879, 63
  %or2026 = or i32 128, %and2025
  %conv2027 = trunc i32 %or2026 to i8
  %880 = load i8*, i8** %dst, align 8
  %incdec.ptr2028 = getelementptr inbounds i8, i8* %880, i32 1
  store i8* %incdec.ptr2028, i8** %dst, align 8
  store i8 %conv2027, i8* %880, align 1
  br label %if.end.2051

if.else.2029:                                     ; preds = %if.else.2017
  %881 = load i32, i32* %ch2003, align 4
  %cmp2030 = icmp ule i32 %881, 65535
  br i1 %cmp2030, label %if.then.2032, label %if.else.2046

if.then.2032:                                     ; preds = %if.else.2029
  %882 = load i32, i32* %ch2003, align 4
  %shr2033 = lshr i32 %882, 12
  %or2034 = or i32 224, %shr2033
  %conv2035 = trunc i32 %or2034 to i8
  %883 = load i8*, i8** %dst, align 8
  %incdec.ptr2036 = getelementptr inbounds i8, i8* %883, i32 1
  store i8* %incdec.ptr2036, i8** %dst, align 8
  store i8 %conv2035, i8* %883, align 1
  %884 = load i32, i32* %ch2003, align 4
  %shr2037 = lshr i32 %884, 6
  %and2038 = and i32 %shr2037, 63
  %or2039 = or i32 128, %and2038
  %conv2040 = trunc i32 %or2039 to i8
  %885 = load i8*, i8** %dst, align 8
  %incdec.ptr2041 = getelementptr inbounds i8, i8* %885, i32 1
  store i8* %incdec.ptr2041, i8** %dst, align 8
  store i8 %conv2040, i8* %885, align 1
  %886 = load i32, i32* %ch2003, align 4
  %and2042 = and i32 %886, 63
  %or2043 = or i32 128, %and2042
  %conv2044 = trunc i32 %or2043 to i8
  %887 = load i8*, i8** %dst, align 8
  %incdec.ptr2045 = getelementptr inbounds i8, i8* %887, i32 1
  store i8* %incdec.ptr2045, i8** %dst, align 8
  store i8 %conv2044, i8* %887, align 1
  br label %if.end.2050

if.else.2046:                                     ; preds = %if.else.2029
  %888 = load i32, i32* %ch2003, align 4
  %889 = load i8*, i8** %dst, align 8
  %call2047 = call i32 @char_string(i32 %888, i8* %889)
  %890 = load i8*, i8** %dst, align 8
  %idx.ext2048 = sext i32 %call2047 to i64
  %add.ptr2049 = getelementptr inbounds i8, i8* %890, i64 %idx.ext2048
  store i8* %add.ptr2049, i8** %dst, align 8
  br label %if.end.2050

if.end.2050:                                      ; preds = %if.else.2046, %if.then.2032
  br label %if.end.2051

if.end.2051:                                      ; preds = %if.end.2050, %if.then.2020
  br label %if.end.2052

if.end.2052:                                      ; preds = %if.end.2051, %if.then.2014
  br label %do.end.2054

do.end.2054:                                      ; preds = %if.end.2052
  %891 = load i32, i32* %code1600, align 4
  %and2055 = and i32 %891, 255
  %or2056 = or i32 %and2055, 128
  store i32 %or2056, i32* %ch2003, align 4
  %892 = load i32, i32* %ch2003, align 4
  %cmp2057 = icmp uge i32 %892, 128
  br i1 %cmp2057, label %if.then.2059, label %if.end.2061

if.then.2059:                                     ; preds = %do.end.2054
  %893 = load i32, i32* %ch2003, align 4
  %add2060 = add i32 %893, 4194048
  store i32 %add2060, i32* %ch2003, align 4
  br label %if.end.2061

if.end.2061:                                      ; preds = %if.then.2059, %do.end.2054
  br label %do.body.2062

do.body.2062:                                     ; preds = %if.end.2061
  %894 = load i32, i32* %ch2003, align 4
  %cmp2063 = icmp ule i32 %894, 127
  br i1 %cmp2063, label %if.then.2065, label %if.else.2068

if.then.2065:                                     ; preds = %do.body.2062
  %895 = load i32, i32* %ch2003, align 4
  %conv2066 = trunc i32 %895 to i8
  %896 = load i8*, i8** %dst, align 8
  %incdec.ptr2067 = getelementptr inbounds i8, i8* %896, i32 1
  store i8* %incdec.ptr2067, i8** %dst, align 8
  store i8 %conv2066, i8* %896, align 1
  br label %if.end.2103

if.else.2068:                                     ; preds = %do.body.2062
  %897 = load i32, i32* %ch2003, align 4
  %cmp2069 = icmp ule i32 %897, 2047
  br i1 %cmp2069, label %if.then.2071, label %if.else.2080

if.then.2071:                                     ; preds = %if.else.2068
  %898 = load i32, i32* %ch2003, align 4
  %shr2072 = lshr i32 %898, 6
  %or2073 = or i32 192, %shr2072
  %conv2074 = trunc i32 %or2073 to i8
  %899 = load i8*, i8** %dst, align 8
  %incdec.ptr2075 = getelementptr inbounds i8, i8* %899, i32 1
  store i8* %incdec.ptr2075, i8** %dst, align 8
  store i8 %conv2074, i8* %899, align 1
  %900 = load i32, i32* %ch2003, align 4
  %and2076 = and i32 %900, 63
  %or2077 = or i32 128, %and2076
  %conv2078 = trunc i32 %or2077 to i8
  %901 = load i8*, i8** %dst, align 8
  %incdec.ptr2079 = getelementptr inbounds i8, i8* %901, i32 1
  store i8* %incdec.ptr2079, i8** %dst, align 8
  store i8 %conv2078, i8* %901, align 1
  br label %if.end.2102

if.else.2080:                                     ; preds = %if.else.2068
  %902 = load i32, i32* %ch2003, align 4
  %cmp2081 = icmp ule i32 %902, 65535
  br i1 %cmp2081, label %if.then.2083, label %if.else.2097

if.then.2083:                                     ; preds = %if.else.2080
  %903 = load i32, i32* %ch2003, align 4
  %shr2084 = lshr i32 %903, 12
  %or2085 = or i32 224, %shr2084
  %conv2086 = trunc i32 %or2085 to i8
  %904 = load i8*, i8** %dst, align 8
  %incdec.ptr2087 = getelementptr inbounds i8, i8* %904, i32 1
  store i8* %incdec.ptr2087, i8** %dst, align 8
  store i8 %conv2086, i8* %904, align 1
  %905 = load i32, i32* %ch2003, align 4
  %shr2088 = lshr i32 %905, 6
  %and2089 = and i32 %shr2088, 63
  %or2090 = or i32 128, %and2089
  %conv2091 = trunc i32 %or2090 to i8
  %906 = load i8*, i8** %dst, align 8
  %incdec.ptr2092 = getelementptr inbounds i8, i8* %906, i32 1
  store i8* %incdec.ptr2092, i8** %dst, align 8
  store i8 %conv2091, i8* %906, align 1
  %907 = load i32, i32* %ch2003, align 4
  %and2093 = and i32 %907, 63
  %or2094 = or i32 128, %and2093
  %conv2095 = trunc i32 %or2094 to i8
  %908 = load i8*, i8** %dst, align 8
  %incdec.ptr2096 = getelementptr inbounds i8, i8* %908, i32 1
  store i8* %incdec.ptr2096, i8** %dst, align 8
  store i8 %conv2095, i8* %908, align 1
  br label %if.end.2101

if.else.2097:                                     ; preds = %if.else.2080
  %909 = load i32, i32* %ch2003, align 4
  %910 = load i8*, i8** %dst, align 8
  %call2098 = call i32 @char_string(i32 %909, i8* %910)
  %911 = load i8*, i8** %dst, align 8
  %idx.ext2099 = sext i32 %call2098 to i64
  %add.ptr2100 = getelementptr inbounds i8, i8* %911, i64 %idx.ext2099
  store i8* %add.ptr2100, i8** %dst, align 8
  br label %if.end.2101

if.end.2101:                                      ; preds = %if.else.2097, %if.then.2083
  br label %if.end.2102

if.end.2102:                                      ; preds = %if.end.2101, %if.then.2071
  br label %if.end.2103

if.end.2103:                                      ; preds = %if.end.2102, %if.then.2065
  br label %do.end.2105

do.end.2105:                                      ; preds = %if.end.2103
  br label %if.end.2115

if.else.2106:                                     ; preds = %do.body.1999
  %912 = load i32, i32* %code1600, align 4
  %shr2107 = lshr i32 %912, 8
  %or2108 = or i32 %shr2107, 128
  %conv2109 = trunc i32 %or2108 to i8
  %913 = load i8*, i8** %dst, align 8
  %incdec.ptr2110 = getelementptr inbounds i8, i8* %913, i32 1
  store i8* %incdec.ptr2110, i8** %dst, align 8
  store i8 %conv2109, i8* %913, align 1
  %914 = load i32, i32* %code1600, align 4
  %and2111 = and i32 %914, 255
  %or2112 = or i32 %and2111, 128
  %conv2113 = trunc i32 %or2112 to i8
  %915 = load i8*, i8** %dst, align 8
  %incdec.ptr2114 = getelementptr inbounds i8, i8* %915, i32 1
  store i8* %incdec.ptr2114, i8** %dst, align 8
  store i8 %conv2113, i8* %915, align 1
  br label %if.end.2115

if.end.2115:                                      ; preds = %if.else.2106, %do.end.2105
  br label %do.end.2117

do.end.2117:                                      ; preds = %if.end.2115
  br label %if.end.2118

if.end.2118:                                      ; preds = %do.end.2117, %do.end.1997
  %916 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2119 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %916, i32 0, i32 3
  %iso_20222120 = bitcast %union.anon* %spec2119 to %struct.iso_2022_spec*
  %single_shifting2121 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222120, i32 0, i32 4
  %bf.load2122 = load i8, i8* %single_shifting2121, align 4
  %bf.clear2123 = and i8 %bf.load2122, -2
  store i8 %bf.clear2123, i8* %single_shifting2121, align 4
  br label %do.end.2307

if.else.2124:                                     ; preds = %if.end.1972
  %917 = load i32, i32* %id1959, align 4
  %918 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2125 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %918, i32 0, i32 3
  %iso_20222126 = bitcast %union.anon* %spec2125 to %struct.iso_2022_spec*
  %current_invocation2127 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222126, i32 0, i32 1
  %arrayidx2128 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation2127, i32 0, i64 0
  %919 = load i32, i32* %arrayidx2128, align 4
  %cmp2129 = icmp slt i32 %919, 0
  br i1 %cmp2129, label %cond.true.2131, label %cond.false.2132

cond.true.2131:                                   ; preds = %if.else.2124
  br label %cond.end.2142

cond.false.2132:                                  ; preds = %if.else.2124
  %920 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2133 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %920, i32 0, i32 3
  %iso_20222134 = bitcast %union.anon* %spec2133 to %struct.iso_2022_spec*
  %current_invocation2135 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222134, i32 0, i32 1
  %arrayidx2136 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation2135, i32 0, i64 0
  %921 = load i32, i32* %arrayidx2136, align 4
  %idxprom2137 = sext i32 %921 to i64
  %922 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2138 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %922, i32 0, i32 3
  %iso_20222139 = bitcast %union.anon* %spec2138 to %struct.iso_2022_spec*
  %current_designation2140 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222139, i32 0, i32 2
  %arrayidx2141 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation2140, i32 0, i64 %idxprom2137
  %923 = load i32, i32* %arrayidx2141, align 4
  br label %cond.end.2142

cond.end.2142:                                    ; preds = %cond.false.2132, %cond.true.2131
  %cond2143 = phi i32 [ -1, %cond.true.2131 ], [ %923, %cond.false.2132 ]
  %cmp2144 = icmp eq i32 %917, %cond2143
  br i1 %cmp2144, label %if.then.2146, label %if.else.2159

if.then.2146:                                     ; preds = %cond.end.2142
  br label %do.body.2147

do.body.2147:                                     ; preds = %if.then.2146
  %924 = load i64, i64* %produced_chars, align 8
  %add2148 = add nsw i64 %924, 2
  store i64 %add2148, i64* %produced_chars, align 8
  %925 = load i32, i32* %code1600, align 4
  %shr2149 = lshr i32 %925, 8
  %and2150 = and i32 %shr2149, 127
  %conv2151 = trunc i32 %and2150 to i8
  %926 = load i8*, i8** %dst, align 8
  %incdec.ptr2152 = getelementptr inbounds i8, i8* %926, i32 1
  store i8* %incdec.ptr2152, i8** %dst, align 8
  store i8 %conv2151, i8* %926, align 1
  %927 = load i32, i32* %code1600, align 4
  %and2153 = and i32 %927, 255
  %and2154 = and i32 %and2153, 127
  %conv2155 = trunc i32 %and2154 to i8
  %928 = load i8*, i8** %dst, align 8
  %incdec.ptr2156 = getelementptr inbounds i8, i8* %928, i32 1
  store i8* %incdec.ptr2156, i8** %dst, align 8
  store i8 %conv2155, i8* %928, align 1
  br label %do.end.2158

do.end.2158:                                      ; preds = %do.body.2147
  br label %do.end.2307

if.else.2159:                                     ; preds = %cond.end.2142
  %929 = load i32, i32* %id1959, align 4
  %930 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2160 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %930, i32 0, i32 3
  %iso_20222161 = bitcast %union.anon* %spec2160 to %struct.iso_2022_spec*
  %current_invocation2162 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222161, i32 0, i32 1
  %arrayidx2163 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation2162, i32 0, i64 1
  %931 = load i32, i32* %arrayidx2163, align 4
  %cmp2164 = icmp slt i32 %931, 0
  br i1 %cmp2164, label %cond.true.2166, label %cond.false.2167

cond.true.2166:                                   ; preds = %if.else.2159
  br label %cond.end.2177

cond.false.2167:                                  ; preds = %if.else.2159
  %932 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2168 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %932, i32 0, i32 3
  %iso_20222169 = bitcast %union.anon* %spec2168 to %struct.iso_2022_spec*
  %current_invocation2170 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222169, i32 0, i32 1
  %arrayidx2171 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation2170, i32 0, i64 1
  %933 = load i32, i32* %arrayidx2171, align 4
  %idxprom2172 = sext i32 %933 to i64
  %934 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2173 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %934, i32 0, i32 3
  %iso_20222174 = bitcast %union.anon* %spec2173 to %struct.iso_2022_spec*
  %current_designation2175 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222174, i32 0, i32 2
  %arrayidx2176 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation2175, i32 0, i64 %idxprom2172
  %935 = load i32, i32* %arrayidx2176, align 4
  br label %cond.end.2177

cond.end.2177:                                    ; preds = %cond.false.2167, %cond.true.2166
  %cond2178 = phi i32 [ -1, %cond.true.2166 ], [ %935, %cond.false.2167 ]
  %cmp2179 = icmp eq i32 %929, %cond2178
  br i1 %cmp2179, label %if.then.2181, label %if.else.2301

if.then.2181:                                     ; preds = %cond.end.2177
  br label %do.body.2182

do.body.2182:                                     ; preds = %if.then.2181
  %936 = load i64, i64* %produced_chars, align 8
  %add2183 = add nsw i64 %936, 2
  store i64 %add2183, i64* %produced_chars, align 8
  %937 = load i8, i8* %multibytep, align 1
  %tobool2184 = trunc i8 %937 to i1
  br i1 %tobool2184, label %if.then.2185, label %if.else.2289

if.then.2185:                                     ; preds = %do.body.2182
  %938 = load i32, i32* %code1600, align 4
  %shr2187 = lshr i32 %938, 8
  %or2188 = or i32 %shr2187, 128
  store i32 %or2188, i32* %ch2186, align 4
  %939 = load i32, i32* %ch2186, align 4
  %cmp2189 = icmp uge i32 %939, 128
  br i1 %cmp2189, label %if.then.2191, label %if.end.2193

if.then.2191:                                     ; preds = %if.then.2185
  %940 = load i32, i32* %ch2186, align 4
  %add2192 = add i32 %940, 4194048
  store i32 %add2192, i32* %ch2186, align 4
  br label %if.end.2193

if.end.2193:                                      ; preds = %if.then.2191, %if.then.2185
  br label %do.body.2194

do.body.2194:                                     ; preds = %if.end.2193
  %941 = load i32, i32* %ch2186, align 4
  %cmp2195 = icmp ule i32 %941, 127
  br i1 %cmp2195, label %if.then.2197, label %if.else.2200

if.then.2197:                                     ; preds = %do.body.2194
  %942 = load i32, i32* %ch2186, align 4
  %conv2198 = trunc i32 %942 to i8
  %943 = load i8*, i8** %dst, align 8
  %incdec.ptr2199 = getelementptr inbounds i8, i8* %943, i32 1
  store i8* %incdec.ptr2199, i8** %dst, align 8
  store i8 %conv2198, i8* %943, align 1
  br label %if.end.2235

if.else.2200:                                     ; preds = %do.body.2194
  %944 = load i32, i32* %ch2186, align 4
  %cmp2201 = icmp ule i32 %944, 2047
  br i1 %cmp2201, label %if.then.2203, label %if.else.2212

if.then.2203:                                     ; preds = %if.else.2200
  %945 = load i32, i32* %ch2186, align 4
  %shr2204 = lshr i32 %945, 6
  %or2205 = or i32 192, %shr2204
  %conv2206 = trunc i32 %or2205 to i8
  %946 = load i8*, i8** %dst, align 8
  %incdec.ptr2207 = getelementptr inbounds i8, i8* %946, i32 1
  store i8* %incdec.ptr2207, i8** %dst, align 8
  store i8 %conv2206, i8* %946, align 1
  %947 = load i32, i32* %ch2186, align 4
  %and2208 = and i32 %947, 63
  %or2209 = or i32 128, %and2208
  %conv2210 = trunc i32 %or2209 to i8
  %948 = load i8*, i8** %dst, align 8
  %incdec.ptr2211 = getelementptr inbounds i8, i8* %948, i32 1
  store i8* %incdec.ptr2211, i8** %dst, align 8
  store i8 %conv2210, i8* %948, align 1
  br label %if.end.2234

if.else.2212:                                     ; preds = %if.else.2200
  %949 = load i32, i32* %ch2186, align 4
  %cmp2213 = icmp ule i32 %949, 65535
  br i1 %cmp2213, label %if.then.2215, label %if.else.2229

if.then.2215:                                     ; preds = %if.else.2212
  %950 = load i32, i32* %ch2186, align 4
  %shr2216 = lshr i32 %950, 12
  %or2217 = or i32 224, %shr2216
  %conv2218 = trunc i32 %or2217 to i8
  %951 = load i8*, i8** %dst, align 8
  %incdec.ptr2219 = getelementptr inbounds i8, i8* %951, i32 1
  store i8* %incdec.ptr2219, i8** %dst, align 8
  store i8 %conv2218, i8* %951, align 1
  %952 = load i32, i32* %ch2186, align 4
  %shr2220 = lshr i32 %952, 6
  %and2221 = and i32 %shr2220, 63
  %or2222 = or i32 128, %and2221
  %conv2223 = trunc i32 %or2222 to i8
  %953 = load i8*, i8** %dst, align 8
  %incdec.ptr2224 = getelementptr inbounds i8, i8* %953, i32 1
  store i8* %incdec.ptr2224, i8** %dst, align 8
  store i8 %conv2223, i8* %953, align 1
  %954 = load i32, i32* %ch2186, align 4
  %and2225 = and i32 %954, 63
  %or2226 = or i32 128, %and2225
  %conv2227 = trunc i32 %or2226 to i8
  %955 = load i8*, i8** %dst, align 8
  %incdec.ptr2228 = getelementptr inbounds i8, i8* %955, i32 1
  store i8* %incdec.ptr2228, i8** %dst, align 8
  store i8 %conv2227, i8* %955, align 1
  br label %if.end.2233

if.else.2229:                                     ; preds = %if.else.2212
  %956 = load i32, i32* %ch2186, align 4
  %957 = load i8*, i8** %dst, align 8
  %call2230 = call i32 @char_string(i32 %956, i8* %957)
  %958 = load i8*, i8** %dst, align 8
  %idx.ext2231 = sext i32 %call2230 to i64
  %add.ptr2232 = getelementptr inbounds i8, i8* %958, i64 %idx.ext2231
  store i8* %add.ptr2232, i8** %dst, align 8
  br label %if.end.2233

if.end.2233:                                      ; preds = %if.else.2229, %if.then.2215
  br label %if.end.2234

if.end.2234:                                      ; preds = %if.end.2233, %if.then.2203
  br label %if.end.2235

if.end.2235:                                      ; preds = %if.end.2234, %if.then.2197
  br label %do.end.2237

do.end.2237:                                      ; preds = %if.end.2235
  %959 = load i32, i32* %code1600, align 4
  %and2238 = and i32 %959, 255
  %or2239 = or i32 %and2238, 128
  store i32 %or2239, i32* %ch2186, align 4
  %960 = load i32, i32* %ch2186, align 4
  %cmp2240 = icmp uge i32 %960, 128
  br i1 %cmp2240, label %if.then.2242, label %if.end.2244

if.then.2242:                                     ; preds = %do.end.2237
  %961 = load i32, i32* %ch2186, align 4
  %add2243 = add i32 %961, 4194048
  store i32 %add2243, i32* %ch2186, align 4
  br label %if.end.2244

if.end.2244:                                      ; preds = %if.then.2242, %do.end.2237
  br label %do.body.2245

do.body.2245:                                     ; preds = %if.end.2244
  %962 = load i32, i32* %ch2186, align 4
  %cmp2246 = icmp ule i32 %962, 127
  br i1 %cmp2246, label %if.then.2248, label %if.else.2251

if.then.2248:                                     ; preds = %do.body.2245
  %963 = load i32, i32* %ch2186, align 4
  %conv2249 = trunc i32 %963 to i8
  %964 = load i8*, i8** %dst, align 8
  %incdec.ptr2250 = getelementptr inbounds i8, i8* %964, i32 1
  store i8* %incdec.ptr2250, i8** %dst, align 8
  store i8 %conv2249, i8* %964, align 1
  br label %if.end.2286

if.else.2251:                                     ; preds = %do.body.2245
  %965 = load i32, i32* %ch2186, align 4
  %cmp2252 = icmp ule i32 %965, 2047
  br i1 %cmp2252, label %if.then.2254, label %if.else.2263

if.then.2254:                                     ; preds = %if.else.2251
  %966 = load i32, i32* %ch2186, align 4
  %shr2255 = lshr i32 %966, 6
  %or2256 = or i32 192, %shr2255
  %conv2257 = trunc i32 %or2256 to i8
  %967 = load i8*, i8** %dst, align 8
  %incdec.ptr2258 = getelementptr inbounds i8, i8* %967, i32 1
  store i8* %incdec.ptr2258, i8** %dst, align 8
  store i8 %conv2257, i8* %967, align 1
  %968 = load i32, i32* %ch2186, align 4
  %and2259 = and i32 %968, 63
  %or2260 = or i32 128, %and2259
  %conv2261 = trunc i32 %or2260 to i8
  %969 = load i8*, i8** %dst, align 8
  %incdec.ptr2262 = getelementptr inbounds i8, i8* %969, i32 1
  store i8* %incdec.ptr2262, i8** %dst, align 8
  store i8 %conv2261, i8* %969, align 1
  br label %if.end.2285

if.else.2263:                                     ; preds = %if.else.2251
  %970 = load i32, i32* %ch2186, align 4
  %cmp2264 = icmp ule i32 %970, 65535
  br i1 %cmp2264, label %if.then.2266, label %if.else.2280

if.then.2266:                                     ; preds = %if.else.2263
  %971 = load i32, i32* %ch2186, align 4
  %shr2267 = lshr i32 %971, 12
  %or2268 = or i32 224, %shr2267
  %conv2269 = trunc i32 %or2268 to i8
  %972 = load i8*, i8** %dst, align 8
  %incdec.ptr2270 = getelementptr inbounds i8, i8* %972, i32 1
  store i8* %incdec.ptr2270, i8** %dst, align 8
  store i8 %conv2269, i8* %972, align 1
  %973 = load i32, i32* %ch2186, align 4
  %shr2271 = lshr i32 %973, 6
  %and2272 = and i32 %shr2271, 63
  %or2273 = or i32 128, %and2272
  %conv2274 = trunc i32 %or2273 to i8
  %974 = load i8*, i8** %dst, align 8
  %incdec.ptr2275 = getelementptr inbounds i8, i8* %974, i32 1
  store i8* %incdec.ptr2275, i8** %dst, align 8
  store i8 %conv2274, i8* %974, align 1
  %975 = load i32, i32* %ch2186, align 4
  %and2276 = and i32 %975, 63
  %or2277 = or i32 128, %and2276
  %conv2278 = trunc i32 %or2277 to i8
  %976 = load i8*, i8** %dst, align 8
  %incdec.ptr2279 = getelementptr inbounds i8, i8* %976, i32 1
  store i8* %incdec.ptr2279, i8** %dst, align 8
  store i8 %conv2278, i8* %976, align 1
  br label %if.end.2284

if.else.2280:                                     ; preds = %if.else.2263
  %977 = load i32, i32* %ch2186, align 4
  %978 = load i8*, i8** %dst, align 8
  %call2281 = call i32 @char_string(i32 %977, i8* %978)
  %979 = load i8*, i8** %dst, align 8
  %idx.ext2282 = sext i32 %call2281 to i64
  %add.ptr2283 = getelementptr inbounds i8, i8* %979, i64 %idx.ext2282
  store i8* %add.ptr2283, i8** %dst, align 8
  br label %if.end.2284

if.end.2284:                                      ; preds = %if.else.2280, %if.then.2266
  br label %if.end.2285

if.end.2285:                                      ; preds = %if.end.2284, %if.then.2254
  br label %if.end.2286

if.end.2286:                                      ; preds = %if.end.2285, %if.then.2248
  br label %do.end.2288

do.end.2288:                                      ; preds = %if.end.2286
  br label %if.end.2298

if.else.2289:                                     ; preds = %do.body.2182
  %980 = load i32, i32* %code1600, align 4
  %shr2290 = lshr i32 %980, 8
  %or2291 = or i32 %shr2290, 128
  %conv2292 = trunc i32 %or2291 to i8
  %981 = load i8*, i8** %dst, align 8
  %incdec.ptr2293 = getelementptr inbounds i8, i8* %981, i32 1
  store i8* %incdec.ptr2293, i8** %dst, align 8
  store i8 %conv2292, i8* %981, align 1
  %982 = load i32, i32* %code1600, align 4
  %and2294 = and i32 %982, 255
  %or2295 = or i32 %and2294, 128
  %conv2296 = trunc i32 %or2295 to i8
  %983 = load i8*, i8** %dst, align 8
  %incdec.ptr2297 = getelementptr inbounds i8, i8* %983, i32 1
  store i8* %incdec.ptr2297, i8** %dst, align 8
  store i8 %conv2296, i8* %983, align 1
  br label %if.end.2298

if.end.2298:                                      ; preds = %if.else.2289, %do.end.2288
  br label %do.end.2300

do.end.2300:                                      ; preds = %if.end.2298
  br label %do.end.2307

if.else.2301:                                     ; preds = %cond.end.2177
  %984 = load %struct.charset*, %struct.charset** %charset1403, align 8
  %985 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %986 = load i8*, i8** %dst, align 8
  %call2302 = call i8* @encode_invocation_designation(%struct.charset* %984, %struct.coding_system* %985, i8* %986, i64* %produced_chars)
  store i8* %call2302, i8** %dst, align 8
  br label %if.end.2303

if.end.2303:                                      ; preds = %if.else.2301
  br label %if.end.2304

if.end.2304:                                      ; preds = %if.end.2303
  br label %if.end.2305

if.end.2305:                                      ; preds = %if.end.2304
  br label %do.cond.2306

do.cond.2306:                                     ; preds = %if.end.2305
  br i1 true, label %do.body.1958, label %do.end.2307

do.end.2307:                                      ; preds = %do.cond.2306, %do.end.2300, %do.end.2158, %if.end.2118
  br label %if.end.2308

if.end.2308:                                      ; preds = %do.end.2307, %do.end.1956
  br label %do.end.2310

do.end.2310:                                      ; preds = %if.end.2308
  br label %if.end.2311

if.end.2311:                                      ; preds = %do.end.2310, %do.end.1401
  br label %if.end.2312

if.end.2312:                                      ; preds = %if.end.2311, %if.end.1329
  br label %if.end.2313

if.end.2313:                                      ; preds = %if.end.2312, %do.end.615
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %987 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode2314 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %987, i32 0, i32 1
  %bf.load2315 = load i32, i32* %mode2314, align 8
  %bf.lshr2316 = lshr i32 %bf.load2315, 14
  %bf.clear2317 = and i32 %bf.lshr2316, 31
  %and2318 = and i32 %bf.clear2317, 1
  %tobool2319 = icmp ne i32 %and2318, 0
  br i1 %tobool2319, label %land.lhs.true.2320, label %if.end.2594

land.lhs.true.2320:                               ; preds = %while.end
  %988 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2321 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %988, i32 0, i32 3
  %iso_20222322 = bitcast %union.anon* %spec2321 to %struct.iso_2022_spec*
  %flags2323 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222322, i32 0, i32 0
  %989 = load i32, i32* %flags2323, align 4
  %and2324 = and i32 %989, 2
  %tobool2325 = icmp ne i32 %and2324, 0
  br i1 %tobool2325, label %if.then.2326, label %if.end.2594

if.then.2326:                                     ; preds = %land.lhs.true.2320
  br label %do.body.2327

do.body.2327:                                     ; preds = %if.then.2326
  %990 = load i8*, i8** %dst, align 8
  %991 = load i32, i32* %safe_room, align 4
  %idx.ext2328 = sext i32 %991 to i64
  %add.ptr2329 = getelementptr inbounds i8, i8* %990, i64 %idx.ext2328
  %992 = load i8*, i8** %dst_end, align 8
  %cmp2330 = icmp uge i8* %add.ptr2329, %992
  br i1 %cmp2330, label %if.then.2332, label %if.end.2344

if.then.2332:                                     ; preds = %do.body.2327
  %993 = load i32*, i32** %charbuf_end, align 8
  %994 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast2334 = ptrtoint i32* %993 to i64
  %sub.ptr.rhs.cast2335 = ptrtoint i32* %994 to i64
  %sub.ptr.sub2336 = sub i64 %sub.ptr.lhs.cast2334, %sub.ptr.rhs.cast2335
  %sub.ptr.div2337 = sdiv exact i64 %sub.ptr.sub2336, 4
  %995 = load i32, i32* %safe_room, align 4
  %conv2338 = sext i32 %995 to i64
  %add2339 = add nsw i64 %sub.ptr.div2337, %conv2338
  store i64 %add2339, i64* %more_bytes2333, align 8
  %996 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %997 = load i64, i64* %more_bytes2333, align 8
  %998 = load i8*, i8** %dst, align 8
  %call2340 = call i8* @alloc_destination(%struct.coding_system* %996, i64 %997, i8* %998)
  store i8* %call2340, i8** %dst, align 8
  %999 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination2341 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %999, i32 0, i32 22
  %1000 = load i8*, i8** %destination2341, align 8
  %1001 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2342 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1001, i32 0, i32 20
  %1002 = load i64, i64* %dst_bytes2342, align 8
  %add.ptr2343 = getelementptr inbounds i8, i8* %1000, i64 %1002
  store i8* %add.ptr2343, i8** %dst_end, align 8
  br label %if.end.2344

if.end.2344:                                      ; preds = %if.then.2332, %do.body.2327
  br label %do.end.2346

do.end.2346:                                      ; preds = %if.end.2344
  br label %do.body.2347

do.body.2347:                                     ; preds = %do.end.2346
  %1003 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2350 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1003, i32 0, i32 3
  %iso_20222351 = bitcast %union.anon* %spec2350 to %struct.iso_2022_spec*
  %current_invocation2352 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222351, i32 0, i32 1
  %arrayidx2353 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation2352, i32 0, i64 0
  %1004 = load i32, i32* %arrayidx2353, align 4
  %cmp2354 = icmp ne i32 %1004, 0
  br i1 %cmp2354, label %if.then.2356, label %if.end.2369

if.then.2356:                                     ; preds = %do.body.2347
  br label %do.body.2357

do.body.2357:                                     ; preds = %if.then.2356
  br label %do.body.2358

do.body.2358:                                     ; preds = %do.body.2357
  %1005 = load i64, i64* %produced_chars, align 8
  %inc2359 = add nsw i64 %1005, 1
  store i64 %inc2359, i64* %produced_chars, align 8
  %1006 = load i8*, i8** %dst, align 8
  %incdec.ptr2360 = getelementptr inbounds i8, i8* %1006, i32 1
  store i8* %incdec.ptr2360, i8** %dst, align 8
  store i8 15, i8* %1006, align 1
  br label %do.end.2362

do.end.2362:                                      ; preds = %do.body.2358
  %1007 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2363 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1007, i32 0, i32 3
  %iso_20222364 = bitcast %union.anon* %spec2363 to %struct.iso_2022_spec*
  %current_invocation2365 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222364, i32 0, i32 1
  %arrayidx2366 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation2365, i32 0, i64 0
  store i32 0, i32* %arrayidx2366, align 4
  br label %do.end.2368

do.end.2368:                                      ; preds = %do.end.2362
  br label %if.end.2369

if.end.2369:                                      ; preds = %do.end.2368, %do.body.2347
  store i32 0, i32* %reg2348, align 4
  br label %for.cond.2370

for.cond.2370:                                    ; preds = %for.inc.2589, %if.end.2369
  %1008 = load i32, i32* %reg2348, align 4
  %cmp2371 = icmp slt i32 %1008, 4
  br i1 %cmp2371, label %for.body.2373, label %for.end.2591

for.body.2373:                                    ; preds = %for.cond.2370
  %1009 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2374 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1009)
  %1010 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id2375 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1010, i32 0, i32 0
  %1011 = load i64, i64* %id2375, align 8
  %call2376 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call2374, i64 %1011)
  %call2377 = call i64 @AREF(i64 %call2376, i64 0)
  %call2378 = call i64 @AREF(i64 %call2377, i64 20)
  %1012 = load i32, i32* %reg2348, align 4
  %conv2379 = sext i32 %1012 to i64
  %call2380 = call i64 @AREF(i64 %call2378, i64 %conv2379)
  %shr2381 = ashr i64 %call2380, 2
  %cmp2382 = icmp sge i64 %shr2381, 0
  br i1 %cmp2382, label %land.lhs.true.2384, label %if.end.2588

land.lhs.true.2384:                               ; preds = %for.body.2373
  %1013 = load i32, i32* %reg2348, align 4
  %idxprom2385 = sext i32 %1013 to i64
  %1014 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2386 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1014, i32 0, i32 3
  %iso_20222387 = bitcast %union.anon* %spec2386 to %struct.iso_2022_spec*
  %current_designation2388 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222387, i32 0, i32 2
  %arrayidx2389 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation2388, i32 0, i64 %idxprom2385
  %1015 = load i32, i32* %arrayidx2389, align 4
  %conv2390 = sext i32 %1015 to i64
  %1016 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2391 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1016)
  %1017 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id2392 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1017, i32 0, i32 0
  %1018 = load i64, i64* %id2392, align 8
  %call2393 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call2391, i64 %1018)
  %call2394 = call i64 @AREF(i64 %call2393, i64 0)
  %call2395 = call i64 @AREF(i64 %call2394, i64 20)
  %1019 = load i32, i32* %reg2348, align 4
  %conv2396 = sext i32 %1019 to i64
  %call2397 = call i64 @AREF(i64 %call2395, i64 %conv2396)
  %shr2398 = ashr i64 %call2397, 2
  %cmp2399 = icmp ne i64 %conv2390, %shr2398
  br i1 %cmp2399, label %if.then.2401, label %if.end.2588

if.then.2401:                                     ; preds = %land.lhs.true.2384
  %1020 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %1021 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2402 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1021)
  %1022 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id2403 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1022, i32 0, i32 0
  %1023 = load i64, i64* %id2403, align 8
  %call2404 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call2402, i64 %1023)
  %call2405 = call i64 @AREF(i64 %call2404, i64 0)
  %call2406 = call i64 @AREF(i64 %call2405, i64 20)
  %1024 = load i32, i32* %reg2348, align 4
  %conv2407 = sext i32 %1024 to i64
  %call2408 = call i64 @AREF(i64 %call2406, i64 %conv2407)
  %shr2409 = ashr i64 %call2408, 2
  %add.ptr2410 = getelementptr inbounds %struct.charset, %struct.charset* %1020, i64 %shr2409
  store %struct.charset* %add.ptr2410, %struct.charset** %charset2349, align 8
  br label %do.body.2411

do.body.2411:                                     ; preds = %if.then.2401
  %1025 = load %struct.charset*, %struct.charset** %charset2349, align 8
  %iso_final2413 = getelementptr inbounds %struct.charset, %struct.charset* %1025, i32 0, i32 6
  %1026 = load i32, i32* %iso_final2413, align 4
  %conv2414 = trunc i32 %1026 to i8
  store i8 %conv2414, i8* %final_char2412, align 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i8** %intermediate_char_942415, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8** %intermediate_char_962416, align 8
  store i32 -1, i32* %revision2417, align 4
  %1027 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2418 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1027, i32 0, i32 3
  %iso_20222419 = bitcast %union.anon* %spec2418 to %struct.iso_2022_spec*
  %flags2420 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222419, i32 0, i32 0
  %1028 = load i32, i32* %flags2420, align 4
  %and2421 = and i32 %1028, 128
  %tobool2422 = icmp ne i32 %and2421, 0
  br i1 %tobool2422, label %if.then.2423, label %if.end.2425

if.then.2423:                                     ; preds = %do.body.2411
  %1029 = load %struct.charset*, %struct.charset** %charset2349, align 8
  %iso_revision2424 = getelementptr inbounds %struct.charset, %struct.charset* %1029, i32 0, i32 7
  %1030 = load i32, i32* %iso_revision2424, align 4
  store i32 %1030, i32* %revision2417, align 4
  br label %if.end.2425

if.end.2425:                                      ; preds = %if.then.2423, %do.body.2411
  %1031 = load i32, i32* %revision2417, align 4
  %cmp2426 = icmp sge i32 %1031, 0
  br i1 %cmp2426, label %if.then.2428, label %if.end.2497

if.then.2428:                                     ; preds = %if.end.2425
  br label %do.body.2429

do.body.2429:                                     ; preds = %if.then.2428
  %1032 = load i64, i64* %produced_chars, align 8
  %add2430 = add nsw i64 %1032, 2
  store i64 %add2430, i64* %produced_chars, align 8
  %1033 = load i8*, i8** %dst, align 8
  %incdec.ptr2431 = getelementptr inbounds i8, i8* %1033, i32 1
  store i8* %incdec.ptr2431, i8** %dst, align 8
  store i8 27, i8* %1033, align 1
  %1034 = load i8*, i8** %dst, align 8
  %incdec.ptr2432 = getelementptr inbounds i8, i8* %1034, i32 1
  store i8* %incdec.ptr2432, i8** %dst, align 8
  store i8 38, i8* %1034, align 1
  br label %do.end.2434

do.end.2434:                                      ; preds = %do.body.2429
  br label %do.body.2435

do.body.2435:                                     ; preds = %do.end.2434
  %1035 = load i64, i64* %produced_chars, align 8
  %inc2436 = add nsw i64 %1035, 1
  store i64 %inc2436, i64* %produced_chars, align 8
  %1036 = load i8, i8* %multibytep, align 1
  %tobool2437 = trunc i8 %1036 to i1
  br i1 %tobool2437, label %if.then.2438, label %if.else.2490

if.then.2438:                                     ; preds = %do.body.2435
  %1037 = load i32, i32* %revision2417, align 4
  %add2440 = add nsw i32 64, %1037
  store i32 %add2440, i32* %ch2439, align 4
  %1038 = load i32, i32* %ch2439, align 4
  %cmp2441 = icmp uge i32 %1038, 128
  br i1 %cmp2441, label %if.then.2443, label %if.end.2445

if.then.2443:                                     ; preds = %if.then.2438
  %1039 = load i32, i32* %ch2439, align 4
  %add2444 = add i32 %1039, 4194048
  store i32 %add2444, i32* %ch2439, align 4
  br label %if.end.2445

if.end.2445:                                      ; preds = %if.then.2443, %if.then.2438
  br label %do.body.2446

do.body.2446:                                     ; preds = %if.end.2445
  %1040 = load i32, i32* %ch2439, align 4
  %cmp2447 = icmp ule i32 %1040, 127
  br i1 %cmp2447, label %if.then.2449, label %if.else.2452

if.then.2449:                                     ; preds = %do.body.2446
  %1041 = load i32, i32* %ch2439, align 4
  %conv2450 = trunc i32 %1041 to i8
  %1042 = load i8*, i8** %dst, align 8
  %incdec.ptr2451 = getelementptr inbounds i8, i8* %1042, i32 1
  store i8* %incdec.ptr2451, i8** %dst, align 8
  store i8 %conv2450, i8* %1042, align 1
  br label %if.end.2487

if.else.2452:                                     ; preds = %do.body.2446
  %1043 = load i32, i32* %ch2439, align 4
  %cmp2453 = icmp ule i32 %1043, 2047
  br i1 %cmp2453, label %if.then.2455, label %if.else.2464

if.then.2455:                                     ; preds = %if.else.2452
  %1044 = load i32, i32* %ch2439, align 4
  %shr2456 = lshr i32 %1044, 6
  %or2457 = or i32 192, %shr2456
  %conv2458 = trunc i32 %or2457 to i8
  %1045 = load i8*, i8** %dst, align 8
  %incdec.ptr2459 = getelementptr inbounds i8, i8* %1045, i32 1
  store i8* %incdec.ptr2459, i8** %dst, align 8
  store i8 %conv2458, i8* %1045, align 1
  %1046 = load i32, i32* %ch2439, align 4
  %and2460 = and i32 %1046, 63
  %or2461 = or i32 128, %and2460
  %conv2462 = trunc i32 %or2461 to i8
  %1047 = load i8*, i8** %dst, align 8
  %incdec.ptr2463 = getelementptr inbounds i8, i8* %1047, i32 1
  store i8* %incdec.ptr2463, i8** %dst, align 8
  store i8 %conv2462, i8* %1047, align 1
  br label %if.end.2486

if.else.2464:                                     ; preds = %if.else.2452
  %1048 = load i32, i32* %ch2439, align 4
  %cmp2465 = icmp ule i32 %1048, 65535
  br i1 %cmp2465, label %if.then.2467, label %if.else.2481

if.then.2467:                                     ; preds = %if.else.2464
  %1049 = load i32, i32* %ch2439, align 4
  %shr2468 = lshr i32 %1049, 12
  %or2469 = or i32 224, %shr2468
  %conv2470 = trunc i32 %or2469 to i8
  %1050 = load i8*, i8** %dst, align 8
  %incdec.ptr2471 = getelementptr inbounds i8, i8* %1050, i32 1
  store i8* %incdec.ptr2471, i8** %dst, align 8
  store i8 %conv2470, i8* %1050, align 1
  %1051 = load i32, i32* %ch2439, align 4
  %shr2472 = lshr i32 %1051, 6
  %and2473 = and i32 %shr2472, 63
  %or2474 = or i32 128, %and2473
  %conv2475 = trunc i32 %or2474 to i8
  %1052 = load i8*, i8** %dst, align 8
  %incdec.ptr2476 = getelementptr inbounds i8, i8* %1052, i32 1
  store i8* %incdec.ptr2476, i8** %dst, align 8
  store i8 %conv2475, i8* %1052, align 1
  %1053 = load i32, i32* %ch2439, align 4
  %and2477 = and i32 %1053, 63
  %or2478 = or i32 128, %and2477
  %conv2479 = trunc i32 %or2478 to i8
  %1054 = load i8*, i8** %dst, align 8
  %incdec.ptr2480 = getelementptr inbounds i8, i8* %1054, i32 1
  store i8* %incdec.ptr2480, i8** %dst, align 8
  store i8 %conv2479, i8* %1054, align 1
  br label %if.end.2485

if.else.2481:                                     ; preds = %if.else.2464
  %1055 = load i32, i32* %ch2439, align 4
  %1056 = load i8*, i8** %dst, align 8
  %call2482 = call i32 @char_string(i32 %1055, i8* %1056)
  %1057 = load i8*, i8** %dst, align 8
  %idx.ext2483 = sext i32 %call2482 to i64
  %add.ptr2484 = getelementptr inbounds i8, i8* %1057, i64 %idx.ext2483
  store i8* %add.ptr2484, i8** %dst, align 8
  br label %if.end.2485

if.end.2485:                                      ; preds = %if.else.2481, %if.then.2467
  br label %if.end.2486

if.end.2486:                                      ; preds = %if.end.2485, %if.then.2455
  br label %if.end.2487

if.end.2487:                                      ; preds = %if.end.2486, %if.then.2449
  br label %do.end.2489

do.end.2489:                                      ; preds = %if.end.2487
  br label %if.end.2494

if.else.2490:                                     ; preds = %do.body.2435
  %1058 = load i32, i32* %revision2417, align 4
  %add2491 = add nsw i32 64, %1058
  %conv2492 = trunc i32 %add2491 to i8
  %1059 = load i8*, i8** %dst, align 8
  %incdec.ptr2493 = getelementptr inbounds i8, i8* %1059, i32 1
  store i8* %incdec.ptr2493, i8** %dst, align 8
  store i8 %conv2492, i8* %1059, align 1
  br label %if.end.2494

if.end.2494:                                      ; preds = %if.else.2490, %do.end.2489
  br label %do.end.2496

do.end.2496:                                      ; preds = %if.end.2494
  br label %if.end.2497

if.end.2497:                                      ; preds = %do.end.2496, %if.end.2425
  br label %do.body.2498

do.body.2498:                                     ; preds = %if.end.2497
  %1060 = load i64, i64* %produced_chars, align 8
  %inc2499 = add nsw i64 %1060, 1
  store i64 %inc2499, i64* %produced_chars, align 8
  %1061 = load i8*, i8** %dst, align 8
  %incdec.ptr2500 = getelementptr inbounds i8, i8* %1061, i32 1
  store i8* %incdec.ptr2500, i8** %dst, align 8
  store i8 27, i8* %1061, align 1
  br label %do.end.2502

do.end.2502:                                      ; preds = %do.body.2498
  %1062 = load %struct.charset*, %struct.charset** %charset2349, align 8
  %dimension2503 = getelementptr inbounds %struct.charset, %struct.charset* %1062, i32 0, i32 2
  %1063 = load i32, i32* %dimension2503, align 4
  %cmp2504 = icmp eq i32 %1063, 1
  br i1 %cmp2504, label %if.then.2506, label %if.else.2528

if.then.2506:                                     ; preds = %do.end.2502
  %1064 = load %struct.charset*, %struct.charset** %charset2349, align 8
  %iso_chars_962508 = getelementptr inbounds %struct.charset, %struct.charset* %1064, i32 0, i32 5
  %bf.load2509 = load i8, i8* %iso_chars_962508, align 8
  %bf.lshr2510 = lshr i8 %bf.load2509, 1
  %bf.clear2511 = and i8 %bf.lshr2510, 1
  %bf.cast2512 = trunc i8 %bf.clear2511 to i1
  br i1 %bf.cast2512, label %if.else.2517, label %if.then.2513

if.then.2513:                                     ; preds = %if.then.2506
  %1065 = load i32, i32* %reg2348, align 4
  %idxprom2514 = sext i32 %1065 to i64
  %1066 = load i8*, i8** %intermediate_char_942415, align 8
  %arrayidx2515 = getelementptr inbounds i8, i8* %1066, i64 %idxprom2514
  %1067 = load i8, i8* %arrayidx2515, align 1
  %conv2516 = sext i8 %1067 to i32
  store i32 %conv2516, i32* %b2507, align 4
  br label %if.end.2521

if.else.2517:                                     ; preds = %if.then.2506
  %1068 = load i32, i32* %reg2348, align 4
  %idxprom2518 = sext i32 %1068 to i64
  %1069 = load i8*, i8** %intermediate_char_962416, align 8
  %arrayidx2519 = getelementptr inbounds i8, i8* %1069, i64 %idxprom2518
  %1070 = load i8, i8* %arrayidx2519, align 1
  %conv2520 = sext i8 %1070 to i32
  store i32 %conv2520, i32* %b2507, align 4
  br label %if.end.2521

if.end.2521:                                      ; preds = %if.else.2517, %if.then.2513
  br label %do.body.2522

do.body.2522:                                     ; preds = %if.end.2521
  %1071 = load i64, i64* %produced_chars, align 8
  %inc2523 = add nsw i64 %1071, 1
  store i64 %inc2523, i64* %produced_chars, align 8
  %1072 = load i32, i32* %b2507, align 4
  %conv2524 = trunc i32 %1072 to i8
  %1073 = load i8*, i8** %dst, align 8
  %incdec.ptr2525 = getelementptr inbounds i8, i8* %1073, i32 1
  store i8* %incdec.ptr2525, i8** %dst, align 8
  store i8 %conv2524, i8* %1073, align 1
  br label %do.end.2527

do.end.2527:                                      ; preds = %do.body.2522
  br label %if.end.2574

if.else.2528:                                     ; preds = %do.end.2502
  br label %do.body.2529

do.body.2529:                                     ; preds = %if.else.2528
  %1074 = load i64, i64* %produced_chars, align 8
  %inc2530 = add nsw i64 %1074, 1
  store i64 %inc2530, i64* %produced_chars, align 8
  %1075 = load i8*, i8** %dst, align 8
  %incdec.ptr2531 = getelementptr inbounds i8, i8* %1075, i32 1
  store i8* %incdec.ptr2531, i8** %dst, align 8
  store i8 36, i8* %1075, align 1
  br label %do.end.2533

do.end.2533:                                      ; preds = %do.body.2529
  %1076 = load %struct.charset*, %struct.charset** %charset2349, align 8
  %iso_chars_962534 = getelementptr inbounds %struct.charset, %struct.charset* %1076, i32 0, i32 5
  %bf.load2535 = load i8, i8* %iso_chars_962534, align 8
  %bf.lshr2536 = lshr i8 %bf.load2535, 1
  %bf.clear2537 = and i8 %bf.lshr2536, 1
  %bf.cast2538 = trunc i8 %bf.clear2537 to i1
  br i1 %bf.cast2538, label %if.else.2565, label %if.then.2539

if.then.2539:                                     ; preds = %do.end.2533
  %1077 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2540 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1077, i32 0, i32 3
  %iso_20222541 = bitcast %union.anon* %spec2540 to %struct.iso_2022_spec*
  %flags2542 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222541, i32 0, i32 0
  %1078 = load i32, i32* %flags2542, align 4
  %and2543 = and i32 %1078, 1
  %tobool2544 = icmp ne i32 %and2543, 0
  br i1 %tobool2544, label %if.then.2556, label %lor.lhs.false.2545

lor.lhs.false.2545:                               ; preds = %if.then.2539
  %1079 = load i32, i32* %reg2348, align 4
  %cmp2546 = icmp ne i32 %1079, 0
  br i1 %cmp2546, label %if.then.2556, label %lor.lhs.false.2548

lor.lhs.false.2548:                               ; preds = %lor.lhs.false.2545
  %1080 = load i8, i8* %final_char2412, align 1
  %conv2549 = zext i8 %1080 to i32
  %cmp2550 = icmp slt i32 %conv2549, 64
  br i1 %cmp2550, label %if.then.2556, label %lor.lhs.false.2552

lor.lhs.false.2552:                               ; preds = %lor.lhs.false.2548
  %1081 = load i8, i8* %final_char2412, align 1
  %conv2553 = zext i8 %1081 to i32
  %cmp2554 = icmp sgt i32 %conv2553, 66
  br i1 %cmp2554, label %if.then.2556, label %if.end.2564

if.then.2556:                                     ; preds = %lor.lhs.false.2552, %lor.lhs.false.2548, %lor.lhs.false.2545, %if.then.2539
  br label %do.body.2557

do.body.2557:                                     ; preds = %if.then.2556
  %1082 = load i64, i64* %produced_chars, align 8
  %inc2558 = add nsw i64 %1082, 1
  store i64 %inc2558, i64* %produced_chars, align 8
  %1083 = load i32, i32* %reg2348, align 4
  %idxprom2559 = sext i32 %1083 to i64
  %1084 = load i8*, i8** %intermediate_char_942415, align 8
  %arrayidx2560 = getelementptr inbounds i8, i8* %1084, i64 %idxprom2559
  %1085 = load i8, i8* %arrayidx2560, align 1
  %1086 = load i8*, i8** %dst, align 8
  %incdec.ptr2561 = getelementptr inbounds i8, i8* %1086, i32 1
  store i8* %incdec.ptr2561, i8** %dst, align 8
  store i8 %1085, i8* %1086, align 1
  br label %do.end.2563

do.end.2563:                                      ; preds = %do.body.2557
  br label %if.end.2564

if.end.2564:                                      ; preds = %do.end.2563, %lor.lhs.false.2552
  br label %if.end.2573

if.else.2565:                                     ; preds = %do.end.2533
  br label %do.body.2566

do.body.2566:                                     ; preds = %if.else.2565
  %1087 = load i64, i64* %produced_chars, align 8
  %inc2567 = add nsw i64 %1087, 1
  store i64 %inc2567, i64* %produced_chars, align 8
  %1088 = load i32, i32* %reg2348, align 4
  %idxprom2568 = sext i32 %1088 to i64
  %1089 = load i8*, i8** %intermediate_char_962416, align 8
  %arrayidx2569 = getelementptr inbounds i8, i8* %1089, i64 %idxprom2568
  %1090 = load i8, i8* %arrayidx2569, align 1
  %1091 = load i8*, i8** %dst, align 8
  %incdec.ptr2570 = getelementptr inbounds i8, i8* %1091, i32 1
  store i8* %incdec.ptr2570, i8** %dst, align 8
  store i8 %1090, i8* %1091, align 1
  br label %do.end.2572

do.end.2572:                                      ; preds = %do.body.2566
  br label %if.end.2573

if.end.2573:                                      ; preds = %do.end.2572, %if.end.2564
  br label %if.end.2574

if.end.2574:                                      ; preds = %if.end.2573, %do.end.2527
  br label %do.body.2575

do.body.2575:                                     ; preds = %if.end.2574
  %1092 = load i64, i64* %produced_chars, align 8
  %inc2576 = add nsw i64 %1092, 1
  store i64 %inc2576, i64* %produced_chars, align 8
  %1093 = load i8, i8* %final_char2412, align 1
  %1094 = load i8*, i8** %dst, align 8
  %incdec.ptr2577 = getelementptr inbounds i8, i8* %1094, i32 1
  store i8* %incdec.ptr2577, i8** %dst, align 8
  store i8 %1093, i8* %1094, align 1
  br label %do.end.2579

do.end.2579:                                      ; preds = %do.body.2575
  %1095 = load %struct.charset*, %struct.charset** %charset2349, align 8
  %id2580 = getelementptr inbounds %struct.charset, %struct.charset* %1095, i32 0, i32 0
  %1096 = load i32, i32* %id2580, align 4
  %1097 = load i32, i32* %reg2348, align 4
  %idxprom2581 = sext i32 %1097 to i64
  %1098 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2582 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1098, i32 0, i32 3
  %iso_20222583 = bitcast %union.anon* %spec2582 to %struct.iso_2022_spec*
  %current_designation2584 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222583, i32 0, i32 2
  %arrayidx2585 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation2584, i32 0, i64 %idxprom2581
  store i32 %1096, i32* %arrayidx2585, align 4
  br label %do.end.2587

do.end.2587:                                      ; preds = %do.end.2579
  br label %if.end.2588

if.end.2588:                                      ; preds = %do.end.2587, %land.lhs.true.2384, %for.body.2373
  br label %for.inc.2589

for.inc.2589:                                     ; preds = %if.end.2588
  %1099 = load i32, i32* %reg2348, align 4
  %inc2590 = add nsw i32 %1099, 1
  store i32 %inc2590, i32* %reg2348, align 4
  br label %for.cond.2370

for.end.2591:                                     ; preds = %for.cond.2370
  br label %do.end.2593

do.end.2593:                                      ; preds = %for.end.2591
  br label %if.end.2594

if.end.2594:                                      ; preds = %do.end.2593, %land.lhs.true.2320, %while.end
  %1100 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %1100, i32 0)
  %1101 = load i8, i8* %bol_designation, align 1
  %tobool2595 = trunc i8 %1101 to i1
  %1102 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec2596 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1102, i32 0, i32 3
  %iso_20222597 = bitcast %union.anon* %spec2596 to %struct.iso_2022_spec*
  %bol2598 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_20222597, i32 0, i32 4
  %1103 = zext i1 %tobool2595 to i8
  %bf.load2599 = load i8, i8* %bol2598, align 4
  %bf.shl = shl i8 %1103, 1
  %bf.clear2600 = and i8 %bf.load2599, -3
  %bf.set = or i8 %bf.clear2600, %bf.shl
  store i8 %bf.set, i8* %bol2598, align 4
  %tobool2601 = trunc i8 %1103 to i1
  %1104 = load i64, i64* %produced_chars, align 8
  %1105 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1105, i32 0, i32 9
  %1106 = load i64, i64* %produced_char, align 8
  %add2602 = add nsw i64 %1106, %1104
  store i64 %add2602, i64* %produced_char, align 8
  %1107 = load i8*, i8** %dst, align 8
  %1108 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination2603 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1108, i32 0, i32 22
  %1109 = load i8*, i8** %destination2603, align 8
  %sub.ptr.lhs.cast2604 = ptrtoint i8* %1107 to i64
  %sub.ptr.rhs.cast2605 = ptrtoint i8* %1109 to i64
  %sub.ptr.sub2606 = sub i64 %sub.ptr.lhs.cast2604, %sub.ptr.rhs.cast2605
  %1110 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced2607 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1110, i32 0, i32 8
  store i64 %sub.ptr.sub2606, i64* %produced2607, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define internal void @setup_iso_safe_charsets(i64 %attrs) #0 {
entry:
  %attrs.addr = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %safe_charsets = alloca i64, align 8
  %request = alloca i64, align 8
  %reg_usage = alloca i64, align 8
  %tail = alloca i64, align 8
  %reg94 = alloca i64, align 8
  %reg96 = alloca i64, align 8
  %flags = alloca i32, align 4
  %max_charset_id = alloca i32, align 4
  %id = alloca i32, align 4
  %id39 = alloca i64, align 8
  %reg = alloca i64, align 8
  %charset = alloca %struct.charset*, align 8
  store i64 %attrs, i64* %attrs.addr, align 8
  %0 = load i64, i64* %attrs.addr, align 8
  %call = call i64 @AREF(i64 %0, i64 23)
  %shr = ashr i64 %call, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %flags, align 4
  %1 = load i64, i64* %attrs.addr, align 8
  %call1 = call i64 @AREF(i64 %1, i64 4)
  store i64 %call1, i64* %charset_list, align 8
  %2 = load i32, i32* %flags, align 4
  %and = and i32 %2, 1048576
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %charset_list, align 8
  %4 = load i64, i64* @Viso_2022_charset_list, align 8
  %cmp = icmp eq i64 %3, %4
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %5 = load i64, i64* @Viso_2022_charset_list, align 8
  store i64 %5, i64* %charset_list, align 8
  %6 = load i64, i64* %attrs.addr, align 8
  %7 = load i64, i64* %charset_list, align 8
  call void @ASET(i64 %6, i64 4, i64 %7)
  %8 = load i64, i64* %attrs.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %8, i64 15, i64 %call3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load i64, i64* %attrs.addr, align 8
  %call4 = call i64 @AREF(i64 %9, i64 15)
  %call5 = call zeroext i1 @STRINGP(i64 %call4)
  br i1 %call5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  br label %return

if.end.7:                                         ; preds = %if.end
  store i32 0, i32* %max_charset_id, align 4
  %10 = load i64, i64* %charset_list, align 8
  store i64 %10, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %11 = load i64, i64* %tail, align 8
  %and8 = and i64 %11, 7
  %conv9 = trunc i64 %and8 to i32
  %cmp10 = icmp eq i32 %conv9, 3
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 0
  %15 = load i64, i64* %car, align 8
  %shr12 = ashr i64 %15, 2
  %conv13 = trunc i64 %shr12 to i32
  store i32 %conv13, i32* %id, align 4
  %16 = load i32, i32* %max_charset_id, align 4
  %17 = load i32, i32* %id, align 4
  %cmp14 = icmp slt i32 %16, %17
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %for.body
  %18 = load i32, i32* %id, align 4
  store i32 %18, i32* %max_charset_id, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.17
  %19 = load i64, i64* %tail, align 8
  %sub18 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub18 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %22 = load i64, i64* %cdr, align 8
  store i64 %22, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %max_charset_id, align 4
  %add = add nsw i32 %23, 1
  %conv19 = sext i32 %add to i64
  %call20 = call i64 @make_uninit_string(i64 %conv19)
  store i64 %call20, i64* %safe_charsets, align 8
  %24 = load i64, i64* %safe_charsets, align 8
  %call21 = call i8* @SDATA(i64 %24)
  %25 = load i32, i32* %max_charset_id, align 4
  %add22 = add nsw i32 %25, 1
  %conv23 = sext i32 %add22 to i64
  call void @llvm.memset.p0i8.i64(i8* %call21, i8 -1, i64 %conv23, i32 1, i1 false)
  %26 = load i64, i64* %attrs.addr, align 8
  %call24 = call i64 @AREF(i64 %26, i64 22)
  store i64 %call24, i64* %request, align 8
  %27 = load i64, i64* %attrs.addr, align 8
  %call25 = call i64 @AREF(i64 %27, i64 21)
  store i64 %call25, i64* %reg_usage, align 8
  %28 = load i64, i64* %reg_usage, align 8
  %sub26 = sub nsw i64 %28, 3
  %29 = inttoptr i64 %sub26 to i8*
  %30 = bitcast i8* %29 to %struct.Lisp_Cons*
  %car27 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %30, i32 0, i32 0
  %31 = load i64, i64* %car27, align 8
  %shr28 = ashr i64 %31, 2
  store i64 %shr28, i64* %reg94, align 8
  %32 = load i64, i64* %reg_usage, align 8
  %sub29 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub29 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %u30 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 1
  %cdr31 = bitcast %union.anon.0* %u30 to i64*
  %35 = load i64, i64* %cdr31, align 8
  %shr32 = ashr i64 %35, 2
  store i64 %shr32, i64* %reg96, align 8
  %36 = load i64, i64* %charset_list, align 8
  store i64 %36, i64* %tail, align 8
  br label %for.cond.33

for.cond.33:                                      ; preds = %for.inc.68, %for.end
  %37 = load i64, i64* %tail, align 8
  %and34 = and i64 %37, 7
  %conv35 = trunc i64 %and34 to i32
  %cmp36 = icmp eq i32 %conv35, 3
  br i1 %cmp36, label %for.body.38, label %for.end.72

for.body.38:                                      ; preds = %for.cond.33
  %38 = load i64, i64* %tail, align 8
  %sub40 = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub40 to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %car41 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 0
  %41 = load i64, i64* %car41, align 8
  store i64 %41, i64* %id39, align 8
  %42 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %43 = load i64, i64* %id39, align 8
  %shr42 = ashr i64 %43, 2
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %42, i64 %shr42
  store %struct.charset* %add.ptr, %struct.charset** %charset, align 8
  %44 = load i64, i64* %id39, align 8
  %45 = load i64, i64* %request, align 8
  %call43 = call i64 @Fassq(i64 %44, i64 %45)
  %call44 = call i64 @Fcdr(i64 %call43)
  store i64 %call44, i64* %reg, align 8
  %46 = load i64, i64* %reg, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp46 = icmp eq i64 %46, %call45
  br i1 %cmp46, label %if.else, label %if.then.48

if.then.48:                                       ; preds = %for.body.38
  %47 = load i64, i64* %safe_charsets, align 8
  %48 = load i64, i64* %id39, align 8
  %shr49 = ashr i64 %48, 2
  %49 = load i64, i64* %reg, align 8
  %shr50 = ashr i64 %49, 2
  %conv51 = trunc i64 %shr50 to i8
  call void @SSET(i64 %47, i64 %shr49, i8 zeroext %conv51)
  br label %if.end.67

if.else:                                          ; preds = %for.body.38
  %50 = load %struct.charset*, %struct.charset** %charset, align 8
  %iso_chars_96 = getelementptr inbounds %struct.charset, %struct.charset* %50, i32 0, i32 5
  %bf.load = load i8, i8* %iso_chars_96, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then.52, label %if.else.59

if.then.52:                                       ; preds = %if.else
  %51 = load i64, i64* %reg96, align 8
  %cmp53 = icmp slt i64 %51, 4
  br i1 %cmp53, label %if.then.55, label %if.end.58

if.then.55:                                       ; preds = %if.then.52
  %52 = load i64, i64* %safe_charsets, align 8
  %53 = load i64, i64* %id39, align 8
  %shr56 = ashr i64 %53, 2
  %54 = load i64, i64* %reg96, align 8
  %conv57 = trunc i64 %54 to i8
  call void @SSET(i64 %52, i64 %shr56, i8 zeroext %conv57)
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.55, %if.then.52
  br label %if.end.66

if.else.59:                                       ; preds = %if.else
  %55 = load i64, i64* %reg94, align 8
  %cmp60 = icmp slt i64 %55, 4
  br i1 %cmp60, label %if.then.62, label %if.end.65

if.then.62:                                       ; preds = %if.else.59
  %56 = load i64, i64* %safe_charsets, align 8
  %57 = load i64, i64* %id39, align 8
  %shr63 = ashr i64 %57, 2
  %58 = load i64, i64* %reg94, align 8
  %conv64 = trunc i64 %58 to i8
  call void @SSET(i64 %56, i64 %shr63, i8 zeroext %conv64)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.62, %if.else.59
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.end.58
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.48
  br label %for.inc.68

for.inc.68:                                       ; preds = %if.end.67
  %59 = load i64, i64* %tail, align 8
  %sub69 = sub nsw i64 %59, 3
  %60 = inttoptr i64 %sub69 to i8*
  %61 = bitcast i8* %60 to %struct.Lisp_Cons*
  %u70 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %61, i32 0, i32 1
  %cdr71 = bitcast %union.anon.0* %u70 to i64*
  %62 = load i64, i64* %cdr71, align 8
  store i64 %62, i64* %tail, align 8
  br label %for.cond.33

for.end.72:                                       ; preds = %for.cond.33
  %63 = load i64, i64* %attrs.addr, align 8
  %64 = load i64, i64* %safe_charsets, align 8
  call void @ASET(i64 %63, i64 15, i64 %64)
  br label %return

return:                                           ; preds = %for.end.72, %if.then.6
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_charset(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %consumed_chars = alloca i64, align 8
  %attrs = alloca i64, align 8
  %valids = alloca i64, align 8
  %name = alloca i64, align 8
  %found = alloca i32, align 4
  %head_ascii = alloca i64, align 8
  %check_latin_extra = alloca i8, align 1
  %c = alloca i32, align 4
  %val = alloca i64, align 8
  %charset = alloca %struct.charset*, align 8
  %dim = alloca i32, align 4
  %idx = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 17
  %3 = load i8*, i8** %source1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  %5 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %src_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i32 0, i32* %found, align 4
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii2 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 5
  %8 = load i64, i64* %head_ascii2, align 8
  store i64 %8, i64* %head_ascii, align 8
  store i8 0, i8* %check_latin_extra, align 1
  %9 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %9, i32 0, i32 0
  %10 = load i32, i32* %checked, align 4
  %or = or i32 %10, 16384
  store i32 %or, i32* %checked, align 4
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 14), %struct.coding_system** %coding.addr, align 8
  %11 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %11)
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 0
  %13 = load i64, i64* %id, align 8
  %call3 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %13)
  %call4 = call i64 @AREF(i64 %call3, i64 0)
  store i64 %call4, i64* %attrs, align 8
  %14 = load i64, i64* %attrs, align 8
  %call5 = call i64 @AREF(i64 %14, i64 16)
  store i64 %call5, i64* %valids, align 8
  %15 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call6 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %15)
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id7 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 0
  %17 = load i64, i64* %id7, align 8
  %call8 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call6, i64 %17)
  store i64 %call8, i64* %name, align 8
  %18 = load i64, i64* %name, align 8
  %call9 = call i64 @SYMBOL_NAME(i64 %18)
  %call10 = call i8* @SSDATA(i64 %call9)
  %call11 = call i32 @strncmp(i8* %call10, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.110, i32 0, i32 0), i64 9) #7
  %cmp = icmp eq i32 %call11, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %19 = load i64, i64* %name, align 8
  %call12 = call i64 @SYMBOL_NAME(i64 %19)
  %call13 = call i8* @SSDATA(i64 %call12)
  %call14 = call i32 @strncmp(i8* %call13, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.111, i32 0, i32 0), i64 10) #7
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %check_latin_extra, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %20 = load i64, i64* %attrs, align 8
  %call16 = call i64 @AREF(i64 %20, i64 5)
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp18 = icmp eq i64 %call16, %call17
  br i1 %cmp18, label %if.end.21, label %if.then.19

if.then.19:                                       ; preds = %if.end
  %21 = load i64, i64* %head_ascii, align 8
  %22 = load i8*, i8** %src, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %22, i64 %21
  store i8* %add.ptr20, i8** %src, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end
  br label %while.body

while.body:                                       ; preds = %if.end.21, %if.then.45, %if.end.228
  %23 = load i8*, i8** %src, align 8
  store i8* %23, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %while.body
  %24 = load i8*, i8** %src, align 8
  %25 = load i8*, i8** %src_end, align 8
  %cmp22 = icmp eq i8* %24, %25
  br i1 %cmp22, label %if.then.23, label %if.end.27

if.then.23:                                       ; preds = %do.body
  %26 = load i8*, i8** %src_base, align 8
  %27 = load i8*, i8** %src, align 8
  %cmp24 = icmp ult i8* %26, %27
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.23
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %28, i32 1)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.then.23
  br label %no_more_source

if.end.27:                                        ; preds = %do.body
  %29 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %30 = load i8, i8* %29, align 1
  %conv = zext i8 %30 to i32
  store i32 %conv, i32* %c, align 4
  %31 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %31 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.42

land.lhs.true:                                    ; preds = %if.end.27
  %32 = load i32, i32* %c, align 4
  %and = and i32 %32, 128
  %tobool29 = icmp ne i32 %and, 0
  br i1 %tobool29, label %if.then.30, label %if.end.42

if.then.30:                                       ; preds = %land.lhs.true
  %33 = load i32, i32* %c, align 4
  %and31 = and i32 %33, 254
  %cmp32 = icmp eq i32 %and31, 192
  br i1 %cmp32, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %if.then.30
  %34 = load i32, i32* %c, align 4
  %and35 = and i32 %34, 1
  %shl = shl i32 %and35, 6
  %35 = load i8*, i8** %src, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr36, i8** %src, align 8
  %36 = load i8, i8* %35, align 1
  %conv37 = zext i8 %36 to i32
  %or38 = or i32 %shl, %conv37
  store i32 %or38, i32* %c, align 4
  br label %if.end.41

if.else:                                          ; preds = %if.then.30
  %37 = load i8*, i8** %src, align 8
  %incdec.ptr39 = getelementptr inbounds i8, i8* %37, i32 -1
  store i8* %incdec.ptr39, i8** %src, align 8
  %38 = load i8*, i8** %src, align 8
  %call40 = call i32 @string_char(i8* %38, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call40
  store i32 %sub, i32* %c, align 4
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %39, i32 3)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.34
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %land.lhs.true, %if.end.27
  %40 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %40, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.42
  %41 = load i32, i32* %c, align 4
  %cmp43 = icmp slt i32 %41, 0
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %do.end
  br label %while.body

if.end.46:                                        ; preds = %do.end
  %42 = load i64, i64* %valids, align 8
  %43 = load i32, i32* %c, align 4
  %conv47 = sext i32 %43 to i64
  %call48 = call i64 @AREF(i64 %42, i64 %conv47)
  store i64 %call48, i64* %val, align 8
  %44 = load i64, i64* %val, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp50 = icmp eq i64 %44, %call49
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.46
  br label %while.end.229

if.end.53:                                        ; preds = %if.end.46
  %45 = load i32, i32* %c, align 4
  %cmp54 = icmp sge i32 %45, 128
  br i1 %cmp54, label %if.then.56, label %if.end.72

if.then.56:                                       ; preds = %if.end.53
  %46 = load i32, i32* %c, align 4
  %cmp57 = icmp slt i32 %46, 160
  br i1 %cmp57, label %land.lhs.true.59, label %if.end.71

land.lhs.true.59:                                 ; preds = %if.then.56
  %47 = load i8, i8* %check_latin_extra, align 1
  %tobool60 = trunc i8 %47 to i1
  br i1 %tobool60, label %land.lhs.true.62, label %if.end.71

land.lhs.true.62:                                 ; preds = %land.lhs.true.59
  %48 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 157), align 8
  %call63 = call zeroext i1 @VECTORP(i64 %48)
  br i1 %call63, label %lor.lhs.false.64, label %if.then.70

lor.lhs.false.64:                                 ; preds = %land.lhs.true.62
  %49 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 157), align 8
  %50 = load i32, i32* %c, align 4
  %conv65 = sext i32 %50 to i64
  %call66 = call i64 @AREF(i64 %49, i64 %conv65)
  %call67 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp68 = icmp eq i64 %call66, %call67
  br i1 %cmp68, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %lor.lhs.false.64, %land.lhs.true.62
  br label %while.end.229

if.end.71:                                        ; preds = %lor.lhs.false.64, %land.lhs.true.59, %if.then.56
  store i32 16384, i32* %found, align 4
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.end.53
  %51 = load i64, i64* %val, align 8
  %and73 = and i64 %51, 7
  %conv74 = trunc i64 %and73 to i32
  %and75 = and i32 %conv74, -5
  %cmp76 = icmp eq i32 %and75, 2
  br i1 %cmp76, label %if.then.78, label %if.else.140

if.then.78:                                       ; preds = %if.end.72
  %52 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %53 = load i64, i64* %val, align 8
  %shr = ashr i64 %53, 2
  %add.ptr79 = getelementptr inbounds %struct.charset, %struct.charset* %52, i64 %shr
  store %struct.charset* %add.ptr79, %struct.charset** %charset, align 8
  %54 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %54, i32 0, i32 2
  %55 = load i32, i32* %dimension, align 4
  store i32 %55, i32* %dim, align 4
  store i32 1, i32* %idx, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.78
  %56 = load i32, i32* %idx, align 4
  %57 = load i32, i32* %dim, align 4
  %cmp80 = icmp slt i32 %56, %57
  br i1 %cmp80, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %58 = load i8*, i8** %src, align 8
  %59 = load i8*, i8** %src_end, align 8
  %cmp82 = icmp eq i8* %58, %59
  br i1 %cmp82, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %for.body
  br label %too_short

if.end.85:                                        ; preds = %for.body
  br label %do.body.86

do.body.86:                                       ; preds = %if.end.85
  %60 = load i8*, i8** %src, align 8
  %61 = load i8*, i8** %src_end, align 8
  %cmp87 = icmp eq i8* %60, %61
  br i1 %cmp87, label %if.then.89, label %if.end.94

if.then.89:                                       ; preds = %do.body.86
  %62 = load i8*, i8** %src_base, align 8
  %63 = load i8*, i8** %src, align 8
  %cmp90 = icmp ult i8* %62, %63
  br i1 %cmp90, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %if.then.89
  %64 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %64, i32 1)
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.92, %if.then.89
  br label %no_more_source

if.end.94:                                        ; preds = %do.body.86
  %65 = load i8*, i8** %src, align 8
  %incdec.ptr95 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %incdec.ptr95, i8** %src, align 8
  %66 = load i8, i8* %65, align 1
  %conv96 = zext i8 %66 to i32
  store i32 %conv96, i32* %c, align 4
  %67 = load i8, i8* %multibytep, align 1
  %tobool97 = trunc i8 %67 to i1
  br i1 %tobool97, label %land.lhs.true.99, label %if.end.117

land.lhs.true.99:                                 ; preds = %if.end.94
  %68 = load i32, i32* %c, align 4
  %and100 = and i32 %68, 128
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %if.then.102, label %if.end.117

if.then.102:                                      ; preds = %land.lhs.true.99
  %69 = load i32, i32* %c, align 4
  %and103 = and i32 %69, 254
  %cmp104 = icmp eq i32 %and103, 192
  br i1 %cmp104, label %if.then.106, label %if.else.112

if.then.106:                                      ; preds = %if.then.102
  %70 = load i32, i32* %c, align 4
  %and107 = and i32 %70, 1
  %shl108 = shl i32 %and107, 6
  %71 = load i8*, i8** %src, align 8
  %incdec.ptr109 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr109, i8** %src, align 8
  %72 = load i8, i8* %71, align 1
  %conv110 = zext i8 %72 to i32
  %or111 = or i32 %shl108, %conv110
  store i32 %or111, i32* %c, align 4
  br label %if.end.116

if.else.112:                                      ; preds = %if.then.102
  %73 = load i8*, i8** %src, align 8
  %incdec.ptr113 = getelementptr inbounds i8, i8* %73, i32 -1
  store i8* %incdec.ptr113, i8** %src, align 8
  %74 = load i8*, i8** %src, align 8
  %call114 = call i32 @string_char(i8* %74, i8** %src, i32* null)
  %sub115 = sub nsw i32 0, %call114
  store i32 %sub115, i32* %c, align 4
  %75 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %75, i32 3)
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.112, %if.then.106
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %land.lhs.true.99, %if.end.94
  %76 = load i64, i64* %consumed_chars, align 8
  %inc118 = add nsw i64 %76, 1
  store i64 %inc118, i64* %consumed_chars, align 8
  br label %do.end.119

do.end.119:                                       ; preds = %if.end.117
  %77 = load i32, i32* %c, align 4
  %78 = load i32, i32* %dim, align 4
  %sub120 = sub nsw i32 %78, 1
  %79 = load i32, i32* %idx, align 4
  %sub121 = sub nsw i32 %sub120, %79
  %mul = mul nsw i32 %sub121, 4
  %idxprom = sext i32 %mul to i64
  %80 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_space = getelementptr inbounds %struct.charset, %struct.charset* %80, i32 0, i32 3
  %arrayidx = getelementptr inbounds [15 x i32], [15 x i32]* %code_space, i32 0, i64 %idxprom
  %81 = load i32, i32* %arrayidx, align 4
  %cmp122 = icmp slt i32 %77, %81
  br i1 %cmp122, label %if.then.133, label %lor.lhs.false.124

lor.lhs.false.124:                                ; preds = %do.end.119
  %82 = load i32, i32* %c, align 4
  %83 = load i32, i32* %dim, align 4
  %sub125 = sub nsw i32 %83, 1
  %84 = load i32, i32* %idx, align 4
  %sub126 = sub nsw i32 %sub125, %84
  %mul127 = mul nsw i32 %sub126, 4
  %add = add nsw i32 %mul127, 1
  %idxprom128 = sext i32 %add to i64
  %85 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_space129 = getelementptr inbounds %struct.charset, %struct.charset* %85, i32 0, i32 3
  %arrayidx130 = getelementptr inbounds [15 x i32], [15 x i32]* %code_space129, i32 0, i64 %idxprom128
  %86 = load i32, i32* %arrayidx130, align 4
  %cmp131 = icmp sgt i32 %82, %86
  br i1 %cmp131, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %lor.lhs.false.124, %do.end.119
  br label %for.end

if.end.134:                                       ; preds = %lor.lhs.false.124
  br label %for.inc

for.inc:                                          ; preds = %if.end.134
  %87 = load i32, i32* %idx, align 4
  %inc135 = add nsw i32 %87, 1
  store i32 %inc135, i32* %idx, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.133, %for.cond
  %88 = load i32, i32* %idx, align 4
  %89 = load i32, i32* %dim, align 4
  %cmp136 = icmp slt i32 %88, %89
  br i1 %cmp136, label %if.then.138, label %if.end.139

if.then.138:                                      ; preds = %for.end
  br label %while.end.229

if.end.139:                                       ; preds = %for.end
  br label %if.end.228

if.else.140:                                      ; preds = %if.end.72
  store i32 1, i32* %idx, align 4
  br label %for.cond.141

for.cond.141:                                     ; preds = %for.inc.219, %if.else.140
  %90 = load i64, i64* %val, align 8
  %and142 = and i64 %90, 7
  %conv143 = trunc i64 %and142 to i32
  %cmp144 = icmp eq i32 %conv143, 3
  br i1 %cmp144, label %for.body.146, label %for.end.221

for.body.146:                                     ; preds = %for.cond.141
  %91 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %92 = load i64, i64* %val, align 8
  %sub147 = sub nsw i64 %92, 3
  %93 = inttoptr i64 %sub147 to i8*
  %94 = bitcast i8* %93 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %94, i32 0, i32 0
  %95 = load i64, i64* %car, align 8
  %shr148 = ashr i64 %95, 2
  %add.ptr149 = getelementptr inbounds %struct.charset, %struct.charset* %91, i64 %shr148
  store %struct.charset* %add.ptr149, %struct.charset** %charset, align 8
  %96 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension150 = getelementptr inbounds %struct.charset, %struct.charset* %96, i32 0, i32 2
  %97 = load i32, i32* %dimension150, align 4
  store i32 %97, i32* %dim, align 4
  br label %while.cond.151

while.cond.151:                                   ; preds = %if.end.212, %for.body.146
  %98 = load i32, i32* %idx, align 4
  %99 = load i32, i32* %dim, align 4
  %cmp152 = icmp slt i32 %98, %99
  br i1 %cmp152, label %while.body.154, label %while.end

while.body.154:                                   ; preds = %while.cond.151
  %100 = load i8*, i8** %src, align 8
  %101 = load i8*, i8** %src_end, align 8
  %cmp155 = icmp eq i8* %100, %101
  br i1 %cmp155, label %if.then.157, label %if.end.158

if.then.157:                                      ; preds = %while.body.154
  br label %too_short

if.end.158:                                       ; preds = %while.body.154
  br label %do.body.159

do.body.159:                                      ; preds = %if.end.158
  %102 = load i8*, i8** %src, align 8
  %103 = load i8*, i8** %src_end, align 8
  %cmp160 = icmp eq i8* %102, %103
  br i1 %cmp160, label %if.then.162, label %if.end.167

if.then.162:                                      ; preds = %do.body.159
  %104 = load i8*, i8** %src_base, align 8
  %105 = load i8*, i8** %src, align 8
  %cmp163 = icmp ult i8* %104, %105
  br i1 %cmp163, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %if.then.162
  %106 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %106, i32 1)
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.165, %if.then.162
  br label %no_more_source

if.end.167:                                       ; preds = %do.body.159
  %107 = load i8*, i8** %src, align 8
  %incdec.ptr168 = getelementptr inbounds i8, i8* %107, i32 1
  store i8* %incdec.ptr168, i8** %src, align 8
  %108 = load i8, i8* %107, align 1
  %conv169 = zext i8 %108 to i32
  store i32 %conv169, i32* %c, align 4
  %109 = load i8, i8* %multibytep, align 1
  %tobool170 = trunc i8 %109 to i1
  br i1 %tobool170, label %land.lhs.true.172, label %if.end.190

land.lhs.true.172:                                ; preds = %if.end.167
  %110 = load i32, i32* %c, align 4
  %and173 = and i32 %110, 128
  %tobool174 = icmp ne i32 %and173, 0
  br i1 %tobool174, label %if.then.175, label %if.end.190

if.then.175:                                      ; preds = %land.lhs.true.172
  %111 = load i32, i32* %c, align 4
  %and176 = and i32 %111, 254
  %cmp177 = icmp eq i32 %and176, 192
  br i1 %cmp177, label %if.then.179, label %if.else.185

if.then.179:                                      ; preds = %if.then.175
  %112 = load i32, i32* %c, align 4
  %and180 = and i32 %112, 1
  %shl181 = shl i32 %and180, 6
  %113 = load i8*, i8** %src, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %incdec.ptr182, i8** %src, align 8
  %114 = load i8, i8* %113, align 1
  %conv183 = zext i8 %114 to i32
  %or184 = or i32 %shl181, %conv183
  store i32 %or184, i32* %c, align 4
  br label %if.end.189

if.else.185:                                      ; preds = %if.then.175
  %115 = load i8*, i8** %src, align 8
  %incdec.ptr186 = getelementptr inbounds i8, i8* %115, i32 -1
  store i8* %incdec.ptr186, i8** %src, align 8
  %116 = load i8*, i8** %src, align 8
  %call187 = call i32 @string_char(i8* %116, i8** %src, i32* null)
  %sub188 = sub nsw i32 0, %call187
  store i32 %sub188, i32* %c, align 4
  %117 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %117, i32 3)
  br label %if.end.189

if.end.189:                                       ; preds = %if.else.185, %if.then.179
  br label %if.end.190

if.end.190:                                       ; preds = %if.end.189, %land.lhs.true.172, %if.end.167
  %118 = load i64, i64* %consumed_chars, align 8
  %inc191 = add nsw i64 %118, 1
  store i64 %inc191, i64* %consumed_chars, align 8
  br label %do.end.192

do.end.192:                                       ; preds = %if.end.190
  %119 = load i32, i32* %c, align 4
  %120 = load i32, i32* %dim, align 4
  %sub193 = sub nsw i32 %120, 1
  %121 = load i32, i32* %idx, align 4
  %sub194 = sub nsw i32 %sub193, %121
  %mul195 = mul nsw i32 %sub194, 4
  %idxprom196 = sext i32 %mul195 to i64
  %122 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_space197 = getelementptr inbounds %struct.charset, %struct.charset* %122, i32 0, i32 3
  %arrayidx198 = getelementptr inbounds [15 x i32], [15 x i32]* %code_space197, i32 0, i64 %idxprom196
  %123 = load i32, i32* %arrayidx198, align 4
  %cmp199 = icmp slt i32 %119, %123
  br i1 %cmp199, label %if.then.211, label %lor.lhs.false.201

lor.lhs.false.201:                                ; preds = %do.end.192
  %124 = load i32, i32* %c, align 4
  %125 = load i32, i32* %dim, align 4
  %sub202 = sub nsw i32 %125, 1
  %126 = load i32, i32* %idx, align 4
  %sub203 = sub nsw i32 %sub202, %126
  %mul204 = mul nsw i32 %sub203, 4
  %add205 = add nsw i32 %mul204, 1
  %idxprom206 = sext i32 %add205 to i64
  %127 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_space207 = getelementptr inbounds %struct.charset, %struct.charset* %127, i32 0, i32 3
  %arrayidx208 = getelementptr inbounds [15 x i32], [15 x i32]* %code_space207, i32 0, i64 %idxprom206
  %128 = load i32, i32* %arrayidx208, align 4
  %cmp209 = icmp sgt i32 %124, %128
  br i1 %cmp209, label %if.then.211, label %if.end.212

if.then.211:                                      ; preds = %lor.lhs.false.201, %do.end.192
  br label %while.end

if.end.212:                                       ; preds = %lor.lhs.false.201
  %129 = load i32, i32* %idx, align 4
  %inc213 = add nsw i32 %129, 1
  store i32 %inc213, i32* %idx, align 4
  br label %while.cond.151

while.end:                                        ; preds = %if.then.211, %while.cond.151
  %130 = load i32, i32* %idx, align 4
  %131 = load i32, i32* %dim, align 4
  %cmp214 = icmp eq i32 %130, %131
  br i1 %cmp214, label %if.then.216, label %if.end.218

if.then.216:                                      ; preds = %while.end
  %call217 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call217, i64* %val, align 8
  br label %for.end.221

if.end.218:                                       ; preds = %while.end
  br label %for.inc.219

for.inc.219:                                      ; preds = %if.end.218
  %132 = load i64, i64* %val, align 8
  %sub220 = sub nsw i64 %132, 3
  %133 = inttoptr i64 %sub220 to i8*
  %134 = bitcast i8* %133 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %134, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %135 = load i64, i64* %cdr, align 8
  store i64 %135, i64* %val, align 8
  br label %for.cond.141

for.end.221:                                      ; preds = %if.then.216, %for.cond.141
  %136 = load i64, i64* %val, align 8
  %and222 = and i64 %136, 7
  %conv223 = trunc i64 %and222 to i32
  %cmp224 = icmp eq i32 %conv223, 3
  br i1 %cmp224, label %if.then.226, label %if.end.227

if.then.226:                                      ; preds = %for.end.221
  br label %while.end.229

if.end.227:                                       ; preds = %for.end.221
  br label %if.end.228

if.end.228:                                       ; preds = %if.end.227, %if.end.139
  br label %while.body

while.end.229:                                    ; preds = %if.then.226, %if.then.138, %if.then.70, %if.then.52
  br label %too_short

too_short:                                        ; preds = %while.end.229, %if.then.157, %if.then.84
  %137 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %137, i32 0, i32 2
  %138 = load i32, i32* %rejected, align 4
  %or230 = or i32 %138, 16384
  store i32 %or230, i32* %rejected, align 4
  store i1 false, i1* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.166, %if.end.93, %if.end.26
  %139 = load i32, i32* %found, align 4
  %140 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found231 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %140, i32 0, i32 1
  %141 = load i32, i32* %found231, align 4
  %or232 = or i32 %141, %139
  store i32 %or232, i32* %found231, align 4
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %no_more_source, %too_short
  %142 = load i1, i1* %retval
  ret i1 %142
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_charset(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %consumed_chars_base = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %attrs = alloca i64, align 8
  %valids = alloca i64, align 8
  %char_offset = alloca i64, align 8
  %last_offset = alloca i64, align 8
  %last_id = alloca i32, align 4
  %eol_dos = alloca i8, align 1
  %byte_after_cr = alloca i32, align 4
  %c = alloca i32, align 4
  %val = alloca i64, align 8
  %charset = alloca %struct.charset*, align 8
  %dim = alloca i32, align 4
  %len = alloca i32, align 4
  %code = alloca i32, align 4
  %offset = alloca i64, align 8
  %offset310 = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr7, i64 -10
  store i32* %add.ptr8, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %17)
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %18, i32 0, i32 0
  %19 = load i64, i64* %id, align 8
  %call9 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %19)
  %call10 = call i64 @AREF(i64 %call9, i64 0)
  store i64 %call10, i64* %attrs, align 8
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 9
  %21 = load i64, i64* %produced_char, align 8
  store i64 %21, i64* %char_offset, align 8
  %22 = load i64, i64* %char_offset, align 8
  store i64 %22, i64* %last_offset, align 8
  %23 = load i32, i32* @charset_ascii, align 4
  store i32 %23, i32* %last_id, align 4
  %24 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %24 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %25 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call11 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %25)
  %26 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id12 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 0
  %27 = load i64, i64* %id12, align 8
  %call13 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call11, i64 %27)
  %call14 = call i64 @AREF(i64 %call13, i64 2)
  %call15 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp = icmp eq i64 %call14, %call15
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %28 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool16 = zext i1 %28 to i8
  store i8 %frombool16, i8* %eol_dos, align 1
  store i32 -1, i32* %byte_after_cr, align 4
  %29 = load i64, i64* %attrs, align 8
  %call17 = call i64 @AREF(i64 %29, i64 16)
  store i64 %call17, i64* %valids, align 8
  br label %while.body

while.body:                                       ; preds = %land.end, %if.end.461, %cond.end.517
  store i32 1, i32* %len, align 4
  %30 = load i8*, i8** %src, align 8
  store i8* %30, i8** %src_base, align 8
  %31 = load i64, i64* %consumed_chars, align 8
  store i64 %31, i64* %consumed_chars_base, align 8
  %32 = load i32*, i32** %charbuf, align 8
  %33 = load i32*, i32** %charbuf_end, align 8
  %cmp18 = icmp uge i32* %32, %33
  br i1 %cmp18, label %if.then, label %if.end.21

if.then:                                          ; preds = %while.body
  %34 = load i32, i32* %byte_after_cr, align 4
  %cmp19 = icmp sge i32 %34, 0
  br i1 %cmp19, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %if.then
  %35 = load i8*, i8** %src_base, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %35, i32 -1
  store i8* %incdec.ptr, i8** %src_base, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.20, %if.then
  br label %while.end.521

if.end.21:                                        ; preds = %while.body
  %36 = load i32, i32* %byte_after_cr, align 4
  %cmp22 = icmp sge i32 %36, 0
  br i1 %cmp22, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %if.end.21
  %37 = load i32, i32* %byte_after_cr, align 4
  store i32 %37, i32* %c, align 4
  store i32 -1, i32* %byte_after_cr, align 4
  br label %if.end.88

if.else:                                          ; preds = %if.end.21
  br label %do.body

do.body:                                          ; preds = %if.else
  %38 = load i8*, i8** %src, align 8
  %39 = load i8*, i8** %src_end, align 8
  %cmp24 = icmp eq i8* %38, %39
  br i1 %cmp24, label %if.then.25, label %if.end.29

if.then.25:                                       ; preds = %do.body
  %40 = load i8*, i8** %src_base, align 8
  %41 = load i8*, i8** %src, align 8
  %cmp26 = icmp ult i8* %40, %41
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.then.25
  %42 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %42, i32 1)
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %if.then.25
  br label %no_more_source

if.end.29:                                        ; preds = %do.body
  %43 = load i8*, i8** %src, align 8
  %incdec.ptr30 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr30, i8** %src, align 8
  %44 = load i8, i8* %43, align 1
  %conv = zext i8 %44 to i32
  store i32 %conv, i32* %c, align 4
  %45 = load i8, i8* %multibytep, align 1
  %tobool31 = trunc i8 %45 to i1
  br i1 %tobool31, label %land.lhs.true, label %if.end.46

land.lhs.true:                                    ; preds = %if.end.29
  %46 = load i32, i32* %c, align 4
  %and = and i32 %46, 128
  %tobool33 = icmp ne i32 %and, 0
  br i1 %tobool33, label %if.then.34, label %if.end.46

if.then.34:                                       ; preds = %land.lhs.true
  %47 = load i32, i32* %c, align 4
  %and35 = and i32 %47, 254
  %cmp36 = icmp eq i32 %and35, 192
  br i1 %cmp36, label %if.then.38, label %if.else.42

if.then.38:                                       ; preds = %if.then.34
  %48 = load i32, i32* %c, align 4
  %and39 = and i32 %48, 1
  %shl = shl i32 %and39, 6
  %49 = load i8*, i8** %src, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr40, i8** %src, align 8
  %50 = load i8, i8* %49, align 1
  %conv41 = zext i8 %50 to i32
  %or = or i32 %shl, %conv41
  store i32 %or, i32* %c, align 4
  br label %if.end.45

if.else.42:                                       ; preds = %if.then.34
  %51 = load i8*, i8** %src, align 8
  %incdec.ptr43 = getelementptr inbounds i8, i8* %51, i32 -1
  store i8* %incdec.ptr43, i8** %src, align 8
  %52 = load i8*, i8** %src, align 8
  %call44 = call i32 @string_char(i8* %52, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call44
  store i32 %sub, i32* %c, align 4
  %53 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %53, i32 3)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.38
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %land.lhs.true, %if.end.29
  %54 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %54, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.46
  %55 = load i8, i8* %eol_dos, align 1
  %tobool47 = trunc i8 %55 to i1
  br i1 %tobool47, label %land.lhs.true.49, label %if.end.87

land.lhs.true.49:                                 ; preds = %do.end
  %56 = load i32, i32* %c, align 4
  %cmp50 = icmp eq i32 %56, 13
  br i1 %cmp50, label %if.then.52, label %if.end.87

if.then.52:                                       ; preds = %land.lhs.true.49
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.52
  %57 = load i8*, i8** %src, align 8
  %58 = load i8*, i8** %src_end, align 8
  %cmp54 = icmp eq i8* %57, %58
  br i1 %cmp54, label %if.then.56, label %if.end.61

if.then.56:                                       ; preds = %do.body.53
  %59 = load i8*, i8** %src_base, align 8
  %60 = load i8*, i8** %src, align 8
  %cmp57 = icmp ult i8* %59, %60
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.then.56
  %61 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %61, i32 1)
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.59, %if.then.56
  br label %no_more_source

if.end.61:                                        ; preds = %do.body.53
  %62 = load i8*, i8** %src, align 8
  %incdec.ptr62 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr62, i8** %src, align 8
  %63 = load i8, i8* %62, align 1
  %conv63 = zext i8 %63 to i32
  store i32 %conv63, i32* %byte_after_cr, align 4
  %64 = load i8, i8* %multibytep, align 1
  %tobool64 = trunc i8 %64 to i1
  br i1 %tobool64, label %land.lhs.true.66, label %if.end.84

land.lhs.true.66:                                 ; preds = %if.end.61
  %65 = load i32, i32* %byte_after_cr, align 4
  %and67 = and i32 %65, 128
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.then.69, label %if.end.84

if.then.69:                                       ; preds = %land.lhs.true.66
  %66 = load i32, i32* %byte_after_cr, align 4
  %and70 = and i32 %66, 254
  %cmp71 = icmp eq i32 %and70, 192
  br i1 %cmp71, label %if.then.73, label %if.else.79

if.then.73:                                       ; preds = %if.then.69
  %67 = load i32, i32* %byte_after_cr, align 4
  %and74 = and i32 %67, 1
  %shl75 = shl i32 %and74, 6
  %68 = load i8*, i8** %src, align 8
  %incdec.ptr76 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %incdec.ptr76, i8** %src, align 8
  %69 = load i8, i8* %68, align 1
  %conv77 = zext i8 %69 to i32
  %or78 = or i32 %shl75, %conv77
  store i32 %or78, i32* %byte_after_cr, align 4
  br label %if.end.83

if.else.79:                                       ; preds = %if.then.69
  %70 = load i8*, i8** %src, align 8
  %incdec.ptr80 = getelementptr inbounds i8, i8* %70, i32 -1
  store i8* %incdec.ptr80, i8** %src, align 8
  %71 = load i8*, i8** %src, align 8
  %call81 = call i32 @string_char(i8* %71, i8** %src, i32* null)
  %sub82 = sub nsw i32 0, %call81
  store i32 %sub82, i32* %byte_after_cr, align 4
  %72 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %72, i32 3)
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.79, %if.then.73
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %land.lhs.true.66, %if.end.61
  %73 = load i64, i64* %consumed_chars, align 8
  %inc85 = add nsw i64 %73, 1
  store i64 %inc85, i64* %consumed_chars, align 8
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.84
  br label %if.end.87

if.end.87:                                        ; preds = %do.end.86, %land.lhs.true.49, %do.end
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87, %if.then.23
  %74 = load i32, i32* %c, align 4
  %cmp89 = icmp slt i32 %74, 0
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.end.88
  br label %invalid_code

if.end.92:                                        ; preds = %if.end.88
  %75 = load i32, i32* %c, align 4
  store i32 %75, i32* %code, align 4
  %76 = load i64, i64* %valids, align 8
  %77 = load i32, i32* %c, align 4
  %conv93 = sext i32 %77 to i64
  %call94 = call i64 @AREF(i64 %76, i64 %conv93)
  store i64 %call94, i64* %val, align 8
  %78 = load i64, i64* %val, align 8
  %and95 = and i64 %78, 7
  %conv96 = trunc i64 %and95 to i32
  %and97 = and i32 %conv96, -5
  %cmp98 = icmp eq i32 %and97, 2
  br i1 %cmp98, label %if.end.106, label %land.lhs.true.100

land.lhs.true.100:                                ; preds = %if.end.92
  %79 = load i64, i64* %val, align 8
  %and101 = and i64 %79, 7
  %conv102 = trunc i64 %and101 to i32
  %cmp103 = icmp eq i32 %conv102, 3
  br i1 %cmp103, label %if.end.106, label %if.then.105

if.then.105:                                      ; preds = %land.lhs.true.100
  br label %invalid_code

if.end.106:                                       ; preds = %land.lhs.true.100, %if.end.92
  %80 = load i64, i64* %val, align 8
  %and107 = and i64 %80, 7
  %conv108 = trunc i64 %and107 to i32
  %and109 = and i32 %conv108, -5
  %cmp110 = icmp eq i32 %and109, 2
  br i1 %cmp110, label %if.then.112, label %if.else.256

if.then.112:                                      ; preds = %if.end.106
  %81 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %82 = load i64, i64* %val, align 8
  %shr = ashr i64 %82, 2
  %add.ptr113 = getelementptr inbounds %struct.charset, %struct.charset* %81, i64 %shr
  store %struct.charset* %add.ptr113, %struct.charset** %charset, align 8
  %83 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %83, i32 0, i32 2
  %84 = load i32, i32* %dimension, align 4
  store i32 %84, i32* %dim, align 4
  br label %while.cond.114

while.cond.114:                                   ; preds = %do.end.151, %if.then.112
  %85 = load i32, i32* %len, align 4
  %86 = load i32, i32* %dim, align 4
  %cmp115 = icmp slt i32 %85, %86
  br i1 %cmp115, label %while.body.117, label %while.end

while.body.117:                                   ; preds = %while.cond.114
  br label %do.body.118

do.body.118:                                      ; preds = %while.body.117
  %87 = load i8*, i8** %src, align 8
  %88 = load i8*, i8** %src_end, align 8
  %cmp119 = icmp eq i8* %87, %88
  br i1 %cmp119, label %if.then.121, label %if.end.126

if.then.121:                                      ; preds = %do.body.118
  %89 = load i8*, i8** %src_base, align 8
  %90 = load i8*, i8** %src, align 8
  %cmp122 = icmp ult i8* %89, %90
  br i1 %cmp122, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %if.then.121
  %91 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %91, i32 1)
  br label %if.end.125

if.end.125:                                       ; preds = %if.then.124, %if.then.121
  br label %no_more_source

if.end.126:                                       ; preds = %do.body.118
  %92 = load i8*, i8** %src, align 8
  %incdec.ptr127 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr127, i8** %src, align 8
  %93 = load i8, i8* %92, align 1
  %conv128 = zext i8 %93 to i32
  store i32 %conv128, i32* %c, align 4
  %94 = load i8, i8* %multibytep, align 1
  %tobool129 = trunc i8 %94 to i1
  br i1 %tobool129, label %land.lhs.true.131, label %if.end.149

land.lhs.true.131:                                ; preds = %if.end.126
  %95 = load i32, i32* %c, align 4
  %and132 = and i32 %95, 128
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %if.then.134, label %if.end.149

if.then.134:                                      ; preds = %land.lhs.true.131
  %96 = load i32, i32* %c, align 4
  %and135 = and i32 %96, 254
  %cmp136 = icmp eq i32 %and135, 192
  br i1 %cmp136, label %if.then.138, label %if.else.144

if.then.138:                                      ; preds = %if.then.134
  %97 = load i32, i32* %c, align 4
  %and139 = and i32 %97, 1
  %shl140 = shl i32 %and139, 6
  %98 = load i8*, i8** %src, align 8
  %incdec.ptr141 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %incdec.ptr141, i8** %src, align 8
  %99 = load i8, i8* %98, align 1
  %conv142 = zext i8 %99 to i32
  %or143 = or i32 %shl140, %conv142
  store i32 %or143, i32* %c, align 4
  br label %if.end.148

if.else.144:                                      ; preds = %if.then.134
  %100 = load i8*, i8** %src, align 8
  %incdec.ptr145 = getelementptr inbounds i8, i8* %100, i32 -1
  store i8* %incdec.ptr145, i8** %src, align 8
  %101 = load i8*, i8** %src, align 8
  %call146 = call i32 @string_char(i8* %101, i8** %src, i32* null)
  %sub147 = sub nsw i32 0, %call146
  store i32 %sub147, i32* %c, align 4
  %102 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %102, i32 3)
  br label %if.end.148

if.end.148:                                       ; preds = %if.else.144, %if.then.138
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %land.lhs.true.131, %if.end.126
  %103 = load i64, i64* %consumed_chars, align 8
  %inc150 = add nsw i64 %103, 1
  store i64 %inc150, i64* %consumed_chars, align 8
  br label %do.end.151

do.end.151:                                       ; preds = %if.end.149
  %104 = load i32, i32* %code, align 4
  %shl152 = shl i32 %104, 8
  %105 = load i32, i32* %c, align 4
  %or153 = or i32 %shl152, %105
  store i32 %or153, i32* %code, align 4
  %106 = load i32, i32* %len, align 4
  %inc154 = add nsw i32 %106, 1
  store i32 %inc154, i32* %len, align 4
  br label %while.cond.114

while.end:                                        ; preds = %while.cond.114
  br label %do.body.155

do.body.155:                                      ; preds = %while.end
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.155
  %107 = load i32, i32* %code, align 4
  %add = add i32 %107, 0
  %cmp156 = icmp ult i32 %add, 128
  br i1 %cmp156, label %land.lhs.true.162, label %cond.false.170

cond.false:                                       ; preds = %do.body.155
  %108 = load i32, i32* %code, align 4
  %conv158 = zext i32 %108 to i64
  %add159 = add i64 %conv158, 0
  %cmp160 = icmp ult i64 %add159, 128
  br i1 %cmp160, label %land.lhs.true.162, label %cond.false.170

land.lhs.true.162:                                ; preds = %cond.false, %cond.true
  %109 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %109, i32 0, i32 5
  %bf.load163 = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr164 = lshr i8 %bf.load163, 2
  %bf.clear165 = and i8 %bf.lshr164, 1
  %bf.cast166 = trunc i8 %bf.clear165 to i1
  br i1 %bf.cast166, label %cond.true.168, label %cond.false.170

cond.true.168:                                    ; preds = %land.lhs.true.162
  %110 = load i32, i32* %code, align 4
  %conv169 = zext i32 %110 to i64
  br label %cond.end.242

cond.false.170:                                   ; preds = %land.lhs.true.162, %cond.false, %cond.true
  %111 = load i32, i32* %code, align 4
  %112 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %112, i32 0, i32 10
  %113 = load i32, i32* %min_code, align 4
  %cmp171 = icmp ult i32 %111, %113
  br i1 %cmp171, label %cond.true.175, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.170
  %114 = load i32, i32* %code, align 4
  %115 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_code = getelementptr inbounds %struct.charset, %struct.charset* %115, i32 0, i32 11
  %116 = load i32, i32* %max_code, align 4
  %cmp173 = icmp ugt i32 %114, %116
  br i1 %cmp173, label %cond.true.175, label %cond.false.176

cond.true.175:                                    ; preds = %lor.lhs.false, %cond.false.170
  br label %cond.end.240

cond.false.176:                                   ; preds = %lor.lhs.false
  %117 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %117, i32 0, i32 5
  %bf.load177 = load i8, i8* %unified_p, align 8
  %bf.lshr178 = lshr i8 %bf.load177, 5
  %bf.clear179 = and i8 %bf.lshr178, 1
  %bf.cast180 = trunc i8 %bf.clear179 to i1
  br i1 %bf.cast180, label %cond.true.182, label %cond.false.185

cond.true.182:                                    ; preds = %cond.false.176
  %118 = load %struct.charset*, %struct.charset** %charset, align 8
  %119 = load i32, i32* %code, align 4
  %call183 = call i32 @decode_char(%struct.charset* %118, i32 %119)
  %conv184 = sext i32 %call183 to i64
  br label %cond.end.238

cond.false.185:                                   ; preds = %cond.false.176
  %120 = load %struct.charset*, %struct.charset** %charset, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %120, i32 0, i32 9
  %121 = load i32, i32* %method, align 4
  %cmp186 = icmp eq i32 %121, 0
  br i1 %cmp186, label %cond.true.188, label %cond.false.200

cond.true.188:                                    ; preds = %cond.false.185
  %122 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %122, i32 0, i32 5
  %bf.load189 = load i8, i8* %code_linear_p, align 8
  %bf.clear190 = and i8 %bf.load189, 1
  %bf.cast191 = trunc i8 %bf.clear190 to i1
  br i1 %bf.cast191, label %cond.true.193, label %cond.false.197

cond.true.193:                                    ; preds = %cond.true.188
  %123 = load i32, i32* %code, align 4
  %124 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code194 = getelementptr inbounds %struct.charset, %struct.charset* %124, i32 0, i32 10
  %125 = load i32, i32* %min_code194, align 4
  %sub195 = sub i32 %123, %125
  %126 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %126, i32 0, i32 17
  %127 = load i32, i32* %code_offset, align 4
  %add196 = add nsw i32 %sub195, %127
  br label %cond.end

cond.false.197:                                   ; preds = %cond.true.188
  %128 = load %struct.charset*, %struct.charset** %charset, align 8
  %129 = load i32, i32* %code, align 4
  %call198 = call i32 @decode_char(%struct.charset* %128, i32 %129)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.197, %cond.true.193
  %cond = phi i32 [ %add196, %cond.true.193 ], [ %call198, %cond.false.197 ]
  %conv199 = sext i32 %cond to i64
  br label %cond.end.236

cond.false.200:                                   ; preds = %cond.false.185
  %130 = load %struct.charset*, %struct.charset** %charset, align 8
  %method201 = getelementptr inbounds %struct.charset, %struct.charset* %130, i32 0, i32 9
  %131 = load i32, i32* %method201, align 4
  %cmp202 = icmp eq i32 %131, 1
  br i1 %cmp202, label %cond.true.204, label %cond.false.231

cond.true.204:                                    ; preds = %cond.false.200
  %132 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p205 = getelementptr inbounds %struct.charset, %struct.charset* %132, i32 0, i32 5
  %bf.load206 = load i8, i8* %code_linear_p205, align 8
  %bf.clear207 = and i8 %bf.load206, 1
  %bf.cast208 = trunc i8 %bf.clear207 to i1
  br i1 %bf.cast208, label %land.lhs.true.210, label %cond.false.226

land.lhs.true.210:                                ; preds = %cond.true.204
  %133 = load i64, i64* @Vcharset_hash_table, align 8
  %call211 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %133)
  %134 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %134, i32 0, i32 1
  %135 = load i64, i64* %hash_index, align 8
  %call212 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call211, i64 %135)
  %call213 = call i64 @AREF(i64 %call212, i64 4)
  %call214 = call zeroext i1 @VECTORP(i64 %call213)
  br i1 %call214, label %cond.true.216, label %cond.false.226

cond.true.216:                                    ; preds = %land.lhs.true.210
  %136 = load i64, i64* @Vcharset_hash_table, align 8
  %call217 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %136)
  %137 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index218 = getelementptr inbounds %struct.charset, %struct.charset* %137, i32 0, i32 1
  %138 = load i64, i64* %hash_index218, align 8
  %call219 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call217, i64 %138)
  %call220 = call i64 @AREF(i64 %call219, i64 4)
  %139 = load i32, i32* %code, align 4
  %140 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code221 = getelementptr inbounds %struct.charset, %struct.charset* %140, i32 0, i32 10
  %141 = load i32, i32* %min_code221, align 4
  %sub222 = sub i32 %139, %141
  %conv223 = zext i32 %sub222 to i64
  %call224 = call i64 @AREF(i64 %call220, i64 %conv223)
  %shr225 = ashr i64 %call224, 2
  br label %cond.end.229

cond.false.226:                                   ; preds = %land.lhs.true.210, %cond.true.204
  %142 = load %struct.charset*, %struct.charset** %charset, align 8
  %143 = load i32, i32* %code, align 4
  %call227 = call i32 @decode_char(%struct.charset* %142, i32 %143)
  %conv228 = sext i32 %call227 to i64
  br label %cond.end.229

cond.end.229:                                     ; preds = %cond.false.226, %cond.true.216
  %cond230 = phi i64 [ %shr225, %cond.true.216 ], [ %conv228, %cond.false.226 ]
  br label %cond.end.234

cond.false.231:                                   ; preds = %cond.false.200
  %144 = load %struct.charset*, %struct.charset** %charset, align 8
  %145 = load i32, i32* %code, align 4
  %call232 = call i32 @decode_char(%struct.charset* %144, i32 %145)
  %conv233 = sext i32 %call232 to i64
  br label %cond.end.234

cond.end.234:                                     ; preds = %cond.false.231, %cond.end.229
  %cond235 = phi i64 [ %cond230, %cond.end.229 ], [ %conv233, %cond.false.231 ]
  br label %cond.end.236

cond.end.236:                                     ; preds = %cond.end.234, %cond.end
  %cond237 = phi i64 [ %conv199, %cond.end ], [ %cond235, %cond.end.234 ]
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.end.236, %cond.true.182
  %cond239 = phi i64 [ %conv184, %cond.true.182 ], [ %cond237, %cond.end.236 ]
  br label %cond.end.240

cond.end.240:                                     ; preds = %cond.end.238, %cond.true.175
  %cond241 = phi i64 [ -1, %cond.true.175 ], [ %cond239, %cond.end.238 ]
  br label %cond.end.242

cond.end.242:                                     ; preds = %cond.end.240, %cond.true.168
  %cond243 = phi i64 [ %conv169, %cond.true.168 ], [ %cond241, %cond.end.240 ]
  %conv244 = trunc i64 %cond243 to i32
  store i32 %conv244, i32* %c, align 4
  %146 = load i8, i8* @charset_map_loaded, align 1
  %tobool245 = trunc i8 %146 to i1
  br i1 %tobool245, label %land.lhs.true.247, label %if.end.254

land.lhs.true.247:                                ; preds = %cond.end.242
  %147 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call248 = call i64 @coding_change_source(%struct.coding_system* %147)
  store i64 %call248, i64* %offset, align 8
  %tobool249 = icmp ne i64 %call248, 0
  br i1 %tobool249, label %if.then.250, label %if.end.254

if.then.250:                                      ; preds = %land.lhs.true.247
  %148 = load i64, i64* %offset, align 8
  %149 = load i8*, i8** %src, align 8
  %add.ptr251 = getelementptr inbounds i8, i8* %149, i64 %148
  store i8* %add.ptr251, i8** %src, align 8
  %150 = load i64, i64* %offset, align 8
  %151 = load i8*, i8** %src_base, align 8
  %add.ptr252 = getelementptr inbounds i8, i8* %151, i64 %150
  store i8* %add.ptr252, i8** %src_base, align 8
  %152 = load i64, i64* %offset, align 8
  %153 = load i8*, i8** %src_end, align 8
  %add.ptr253 = getelementptr inbounds i8, i8* %153, i64 %152
  store i8* %add.ptr253, i8** %src_end, align 8
  br label %if.end.254

if.end.254:                                       ; preds = %if.then.250, %land.lhs.true.247, %cond.end.242
  br label %do.end.255

do.end.255:                                       ; preds = %if.end.254
  br label %if.end.431

if.else.256:                                      ; preds = %if.end.106
  br label %while.cond.257

while.cond.257:                                   ; preds = %if.end.428, %if.else.256
  %154 = load i64, i64* %val, align 8
  %and258 = and i64 %154, 7
  %conv259 = trunc i64 %and258 to i32
  %cmp260 = icmp eq i32 %conv259, 3
  br i1 %cmp260, label %while.body.262, label %while.end.430

while.body.262:                                   ; preds = %while.cond.257
  %155 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %156 = load i64, i64* %val, align 8
  %sub263 = sub nsw i64 %156, 3
  %157 = inttoptr i64 %sub263 to i8*
  %158 = bitcast i8* %157 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %158, i32 0, i32 0
  %159 = load i64, i64* %car, align 8
  %shr264 = ashr i64 %159, 2
  %add.ptr265 = getelementptr inbounds %struct.charset, %struct.charset* %155, i64 %shr264
  store %struct.charset* %add.ptr265, %struct.charset** %charset, align 8
  %160 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension266 = getelementptr inbounds %struct.charset, %struct.charset* %160, i32 0, i32 2
  %161 = load i32, i32* %dimension266, align 4
  store i32 %161, i32* %dim, align 4
  br label %while.cond.267

while.cond.267:                                   ; preds = %do.end.304, %while.body.262
  %162 = load i32, i32* %len, align 4
  %163 = load i32, i32* %dim, align 4
  %cmp268 = icmp slt i32 %162, %163
  br i1 %cmp268, label %while.body.270, label %while.end.308

while.body.270:                                   ; preds = %while.cond.267
  br label %do.body.271

do.body.271:                                      ; preds = %while.body.270
  %164 = load i8*, i8** %src, align 8
  %165 = load i8*, i8** %src_end, align 8
  %cmp272 = icmp eq i8* %164, %165
  br i1 %cmp272, label %if.then.274, label %if.end.279

if.then.274:                                      ; preds = %do.body.271
  %166 = load i8*, i8** %src_base, align 8
  %167 = load i8*, i8** %src, align 8
  %cmp275 = icmp ult i8* %166, %167
  br i1 %cmp275, label %if.then.277, label %if.end.278

if.then.277:                                      ; preds = %if.then.274
  %168 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %168, i32 1)
  br label %if.end.278

if.end.278:                                       ; preds = %if.then.277, %if.then.274
  br label %no_more_source

if.end.279:                                       ; preds = %do.body.271
  %169 = load i8*, i8** %src, align 8
  %incdec.ptr280 = getelementptr inbounds i8, i8* %169, i32 1
  store i8* %incdec.ptr280, i8** %src, align 8
  %170 = load i8, i8* %169, align 1
  %conv281 = zext i8 %170 to i32
  store i32 %conv281, i32* %c, align 4
  %171 = load i8, i8* %multibytep, align 1
  %tobool282 = trunc i8 %171 to i1
  br i1 %tobool282, label %land.lhs.true.284, label %if.end.302

land.lhs.true.284:                                ; preds = %if.end.279
  %172 = load i32, i32* %c, align 4
  %and285 = and i32 %172, 128
  %tobool286 = icmp ne i32 %and285, 0
  br i1 %tobool286, label %if.then.287, label %if.end.302

if.then.287:                                      ; preds = %land.lhs.true.284
  %173 = load i32, i32* %c, align 4
  %and288 = and i32 %173, 254
  %cmp289 = icmp eq i32 %and288, 192
  br i1 %cmp289, label %if.then.291, label %if.else.297

if.then.291:                                      ; preds = %if.then.287
  %174 = load i32, i32* %c, align 4
  %and292 = and i32 %174, 1
  %shl293 = shl i32 %and292, 6
  %175 = load i8*, i8** %src, align 8
  %incdec.ptr294 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr294, i8** %src, align 8
  %176 = load i8, i8* %175, align 1
  %conv295 = zext i8 %176 to i32
  %or296 = or i32 %shl293, %conv295
  store i32 %or296, i32* %c, align 4
  br label %if.end.301

if.else.297:                                      ; preds = %if.then.287
  %177 = load i8*, i8** %src, align 8
  %incdec.ptr298 = getelementptr inbounds i8, i8* %177, i32 -1
  store i8* %incdec.ptr298, i8** %src, align 8
  %178 = load i8*, i8** %src, align 8
  %call299 = call i32 @string_char(i8* %178, i8** %src, i32* null)
  %sub300 = sub nsw i32 0, %call299
  store i32 %sub300, i32* %c, align 4
  %179 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %179, i32 3)
  br label %if.end.301

if.end.301:                                       ; preds = %if.else.297, %if.then.291
  br label %if.end.302

if.end.302:                                       ; preds = %if.end.301, %land.lhs.true.284, %if.end.279
  %180 = load i64, i64* %consumed_chars, align 8
  %inc303 = add nsw i64 %180, 1
  store i64 %inc303, i64* %consumed_chars, align 8
  br label %do.end.304

do.end.304:                                       ; preds = %if.end.302
  %181 = load i32, i32* %code, align 4
  %shl305 = shl i32 %181, 8
  %182 = load i32, i32* %c, align 4
  %or306 = or i32 %shl305, %182
  store i32 %or306, i32* %code, align 4
  %183 = load i32, i32* %len, align 4
  %inc307 = add nsw i32 %183, 1
  store i32 %inc307, i32* %len, align 4
  br label %while.cond.267

while.end.308:                                    ; preds = %while.cond.267
  br label %do.body.309

do.body.309:                                      ; preds = %while.end.308
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.311, label %cond.false.315

cond.true.311:                                    ; preds = %do.body.309
  %184 = load i32, i32* %code, align 4
  %add312 = add i32 %184, 0
  %cmp313 = icmp ult i32 %add312, 128
  br i1 %cmp313, label %land.lhs.true.320, label %cond.false.329

cond.false.315:                                   ; preds = %do.body.309
  %185 = load i32, i32* %code, align 4
  %conv316 = zext i32 %185 to i64
  %add317 = add i64 %conv316, 0
  %cmp318 = icmp ult i64 %add317, 128
  br i1 %cmp318, label %land.lhs.true.320, label %cond.false.329

land.lhs.true.320:                                ; preds = %cond.false.315, %cond.true.311
  %186 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p321 = getelementptr inbounds %struct.charset, %struct.charset* %186, i32 0, i32 5
  %bf.load322 = load i8, i8* %ascii_compatible_p321, align 8
  %bf.lshr323 = lshr i8 %bf.load322, 2
  %bf.clear324 = and i8 %bf.lshr323, 1
  %bf.cast325 = trunc i8 %bf.clear324 to i1
  br i1 %bf.cast325, label %cond.true.327, label %cond.false.329

cond.true.327:                                    ; preds = %land.lhs.true.320
  %187 = load i32, i32* %code, align 4
  %conv328 = zext i32 %187 to i64
  br label %cond.end.411

cond.false.329:                                   ; preds = %land.lhs.true.320, %cond.false.315, %cond.true.311
  %188 = load i32, i32* %code, align 4
  %189 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code330 = getelementptr inbounds %struct.charset, %struct.charset* %189, i32 0, i32 10
  %190 = load i32, i32* %min_code330, align 4
  %cmp331 = icmp ult i32 %188, %190
  br i1 %cmp331, label %cond.true.337, label %lor.lhs.false.333

lor.lhs.false.333:                                ; preds = %cond.false.329
  %191 = load i32, i32* %code, align 4
  %192 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_code334 = getelementptr inbounds %struct.charset, %struct.charset* %192, i32 0, i32 11
  %193 = load i32, i32* %max_code334, align 4
  %cmp335 = icmp ugt i32 %191, %193
  br i1 %cmp335, label %cond.true.337, label %cond.false.338

cond.true.337:                                    ; preds = %lor.lhs.false.333, %cond.false.329
  br label %cond.end.409

cond.false.338:                                   ; preds = %lor.lhs.false.333
  %194 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p339 = getelementptr inbounds %struct.charset, %struct.charset* %194, i32 0, i32 5
  %bf.load340 = load i8, i8* %unified_p339, align 8
  %bf.lshr341 = lshr i8 %bf.load340, 5
  %bf.clear342 = and i8 %bf.lshr341, 1
  %bf.cast343 = trunc i8 %bf.clear342 to i1
  br i1 %bf.cast343, label %cond.true.345, label %cond.false.348

cond.true.345:                                    ; preds = %cond.false.338
  %195 = load %struct.charset*, %struct.charset** %charset, align 8
  %196 = load i32, i32* %code, align 4
  %call346 = call i32 @decode_char(%struct.charset* %195, i32 %196)
  %conv347 = sext i32 %call346 to i64
  br label %cond.end.407

cond.false.348:                                   ; preds = %cond.false.338
  %197 = load %struct.charset*, %struct.charset** %charset, align 8
  %method349 = getelementptr inbounds %struct.charset, %struct.charset* %197, i32 0, i32 9
  %198 = load i32, i32* %method349, align 4
  %cmp350 = icmp eq i32 %198, 0
  br i1 %cmp350, label %cond.true.352, label %cond.false.368

cond.true.352:                                    ; preds = %cond.false.348
  %199 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p353 = getelementptr inbounds %struct.charset, %struct.charset* %199, i32 0, i32 5
  %bf.load354 = load i8, i8* %code_linear_p353, align 8
  %bf.clear355 = and i8 %bf.load354, 1
  %bf.cast356 = trunc i8 %bf.clear355 to i1
  br i1 %bf.cast356, label %cond.true.358, label %cond.false.363

cond.true.358:                                    ; preds = %cond.true.352
  %200 = load i32, i32* %code, align 4
  %201 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code359 = getelementptr inbounds %struct.charset, %struct.charset* %201, i32 0, i32 10
  %202 = load i32, i32* %min_code359, align 4
  %sub360 = sub i32 %200, %202
  %203 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset361 = getelementptr inbounds %struct.charset, %struct.charset* %203, i32 0, i32 17
  %204 = load i32, i32* %code_offset361, align 4
  %add362 = add nsw i32 %sub360, %204
  br label %cond.end.365

cond.false.363:                                   ; preds = %cond.true.352
  %205 = load %struct.charset*, %struct.charset** %charset, align 8
  %206 = load i32, i32* %code, align 4
  %call364 = call i32 @decode_char(%struct.charset* %205, i32 %206)
  br label %cond.end.365

cond.end.365:                                     ; preds = %cond.false.363, %cond.true.358
  %cond366 = phi i32 [ %add362, %cond.true.358 ], [ %call364, %cond.false.363 ]
  %conv367 = sext i32 %cond366 to i64
  br label %cond.end.405

cond.false.368:                                   ; preds = %cond.false.348
  %207 = load %struct.charset*, %struct.charset** %charset, align 8
  %method369 = getelementptr inbounds %struct.charset, %struct.charset* %207, i32 0, i32 9
  %208 = load i32, i32* %method369, align 4
  %cmp370 = icmp eq i32 %208, 1
  br i1 %cmp370, label %cond.true.372, label %cond.false.400

cond.true.372:                                    ; preds = %cond.false.368
  %209 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p373 = getelementptr inbounds %struct.charset, %struct.charset* %209, i32 0, i32 5
  %bf.load374 = load i8, i8* %code_linear_p373, align 8
  %bf.clear375 = and i8 %bf.load374, 1
  %bf.cast376 = trunc i8 %bf.clear375 to i1
  br i1 %bf.cast376, label %land.lhs.true.378, label %cond.false.395

land.lhs.true.378:                                ; preds = %cond.true.372
  %210 = load i64, i64* @Vcharset_hash_table, align 8
  %call379 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %210)
  %211 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index380 = getelementptr inbounds %struct.charset, %struct.charset* %211, i32 0, i32 1
  %212 = load i64, i64* %hash_index380, align 8
  %call381 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call379, i64 %212)
  %call382 = call i64 @AREF(i64 %call381, i64 4)
  %call383 = call zeroext i1 @VECTORP(i64 %call382)
  br i1 %call383, label %cond.true.385, label %cond.false.395

cond.true.385:                                    ; preds = %land.lhs.true.378
  %213 = load i64, i64* @Vcharset_hash_table, align 8
  %call386 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %213)
  %214 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index387 = getelementptr inbounds %struct.charset, %struct.charset* %214, i32 0, i32 1
  %215 = load i64, i64* %hash_index387, align 8
  %call388 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call386, i64 %215)
  %call389 = call i64 @AREF(i64 %call388, i64 4)
  %216 = load i32, i32* %code, align 4
  %217 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code390 = getelementptr inbounds %struct.charset, %struct.charset* %217, i32 0, i32 10
  %218 = load i32, i32* %min_code390, align 4
  %sub391 = sub i32 %216, %218
  %conv392 = zext i32 %sub391 to i64
  %call393 = call i64 @AREF(i64 %call389, i64 %conv392)
  %shr394 = ashr i64 %call393, 2
  br label %cond.end.398

cond.false.395:                                   ; preds = %land.lhs.true.378, %cond.true.372
  %219 = load %struct.charset*, %struct.charset** %charset, align 8
  %220 = load i32, i32* %code, align 4
  %call396 = call i32 @decode_char(%struct.charset* %219, i32 %220)
  %conv397 = sext i32 %call396 to i64
  br label %cond.end.398

cond.end.398:                                     ; preds = %cond.false.395, %cond.true.385
  %cond399 = phi i64 [ %shr394, %cond.true.385 ], [ %conv397, %cond.false.395 ]
  br label %cond.end.403

cond.false.400:                                   ; preds = %cond.false.368
  %221 = load %struct.charset*, %struct.charset** %charset, align 8
  %222 = load i32, i32* %code, align 4
  %call401 = call i32 @decode_char(%struct.charset* %221, i32 %222)
  %conv402 = sext i32 %call401 to i64
  br label %cond.end.403

cond.end.403:                                     ; preds = %cond.false.400, %cond.end.398
  %cond404 = phi i64 [ %cond399, %cond.end.398 ], [ %conv402, %cond.false.400 ]
  br label %cond.end.405

cond.end.405:                                     ; preds = %cond.end.403, %cond.end.365
  %cond406 = phi i64 [ %conv367, %cond.end.365 ], [ %cond404, %cond.end.403 ]
  br label %cond.end.407

cond.end.407:                                     ; preds = %cond.end.405, %cond.true.345
  %cond408 = phi i64 [ %conv347, %cond.true.345 ], [ %cond406, %cond.end.405 ]
  br label %cond.end.409

cond.end.409:                                     ; preds = %cond.end.407, %cond.true.337
  %cond410 = phi i64 [ -1, %cond.true.337 ], [ %cond408, %cond.end.407 ]
  br label %cond.end.411

cond.end.411:                                     ; preds = %cond.end.409, %cond.true.327
  %cond412 = phi i64 [ %conv328, %cond.true.327 ], [ %cond410, %cond.end.409 ]
  %conv413 = trunc i64 %cond412 to i32
  store i32 %conv413, i32* %c, align 4
  %223 = load i8, i8* @charset_map_loaded, align 1
  %tobool414 = trunc i8 %223 to i1
  br i1 %tobool414, label %land.lhs.true.416, label %if.end.423

land.lhs.true.416:                                ; preds = %cond.end.411
  %224 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call417 = call i64 @coding_change_source(%struct.coding_system* %224)
  store i64 %call417, i64* %offset310, align 8
  %tobool418 = icmp ne i64 %call417, 0
  br i1 %tobool418, label %if.then.419, label %if.end.423

if.then.419:                                      ; preds = %land.lhs.true.416
  %225 = load i64, i64* %offset310, align 8
  %226 = load i8*, i8** %src, align 8
  %add.ptr420 = getelementptr inbounds i8, i8* %226, i64 %225
  store i8* %add.ptr420, i8** %src, align 8
  %227 = load i64, i64* %offset310, align 8
  %228 = load i8*, i8** %src_base, align 8
  %add.ptr421 = getelementptr inbounds i8, i8* %228, i64 %227
  store i8* %add.ptr421, i8** %src_base, align 8
  %229 = load i64, i64* %offset310, align 8
  %230 = load i8*, i8** %src_end, align 8
  %add.ptr422 = getelementptr inbounds i8, i8* %230, i64 %229
  store i8* %add.ptr422, i8** %src_end, align 8
  br label %if.end.423

if.end.423:                                       ; preds = %if.then.419, %land.lhs.true.416, %cond.end.411
  br label %do.end.424

do.end.424:                                       ; preds = %if.end.423
  %231 = load i32, i32* %c, align 4
  %cmp425 = icmp sge i32 %231, 0
  br i1 %cmp425, label %if.then.427, label %if.end.428

if.then.427:                                      ; preds = %do.end.424
  br label %while.end.430

if.end.428:                                       ; preds = %do.end.424
  %232 = load i64, i64* %val, align 8
  %sub429 = sub nsw i64 %232, 3
  %233 = inttoptr i64 %sub429 to i8*
  %234 = bitcast i8* %233 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %234, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %235 = load i64, i64* %cdr, align 8
  store i64 %235, i64* %val, align 8
  br label %while.cond.257

while.end.430:                                    ; preds = %if.then.427, %while.cond.257
  br label %if.end.431

if.end.431:                                       ; preds = %while.end.430, %do.end.255
  %236 = load i32, i32* %c, align 4
  %cmp432 = icmp slt i32 %236, 0
  br i1 %cmp432, label %if.then.434, label %if.end.435

if.then.434:                                      ; preds = %if.end.431
  br label %invalid_code

if.end.435:                                       ; preds = %if.end.431
  %237 = load %struct.charset*, %struct.charset** %charset, align 8
  %id436 = getelementptr inbounds %struct.charset, %struct.charset* %237, i32 0, i32 0
  %238 = load i32, i32* %id436, align 4
  %239 = load i32, i32* @charset_ascii, align 4
  %cmp437 = icmp ne i32 %238, %239
  br i1 %cmp437, label %land.lhs.true.439, label %if.end.461

land.lhs.true.439:                                ; preds = %if.end.435
  %240 = load i32, i32* %last_id, align 4
  %241 = load %struct.charset*, %struct.charset** %charset, align 8
  %id440 = getelementptr inbounds %struct.charset, %struct.charset* %241, i32 0, i32 0
  %242 = load i32, i32* %id440, align 4
  %cmp441 = icmp ne i32 %240, %242
  br i1 %cmp441, label %if.then.443, label %if.end.461

if.then.443:                                      ; preds = %land.lhs.true.439
  %243 = load i32, i32* %last_id, align 4
  %244 = load i32, i32* @charset_ascii, align 4
  %cmp444 = icmp ne i32 %243, %244
  br i1 %cmp444, label %if.then.446, label %if.end.459

if.then.446:                                      ; preds = %if.then.443
  br label %do.body.447

do.body.447:                                      ; preds = %if.then.446
  br label %do.body.448

do.body.448:                                      ; preds = %do.body.447
  %245 = load i32*, i32** %charbuf, align 8
  %incdec.ptr449 = getelementptr inbounds i32, i32* %245, i32 1
  store i32* %incdec.ptr449, i32** %charbuf, align 8
  store i32 -4, i32* %245, align 4
  %246 = load i32*, i32** %charbuf, align 8
  %incdec.ptr450 = getelementptr inbounds i32, i32* %246, i32 1
  store i32* %incdec.ptr450, i32** %charbuf, align 8
  store i32 3, i32* %246, align 4
  %247 = load i64, i64* %char_offset, align 8
  %248 = load i64, i64* %last_offset, align 8
  %sub451 = sub nsw i64 %247, %248
  %conv452 = trunc i64 %sub451 to i32
  %249 = load i32*, i32** %charbuf, align 8
  %incdec.ptr453 = getelementptr inbounds i32, i32* %249, i32 1
  store i32* %incdec.ptr453, i32** %charbuf, align 8
  store i32 %conv452, i32* %249, align 4
  %250 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %250, i32 0, i32 1
  %bf.load454 = load i32, i32* %annotated, align 8
  %bf.clear455 = and i32 %bf.load454, -8388609
  %bf.set = or i32 %bf.clear455, 8388608
  store i32 %bf.set, i32* %annotated, align 8
  br label %do.end.456

do.end.456:                                       ; preds = %do.body.448
  %251 = load i32, i32* %last_id, align 4
  %252 = load i32*, i32** %charbuf, align 8
  %incdec.ptr457 = getelementptr inbounds i32, i32* %252, i32 1
  store i32* %incdec.ptr457, i32** %charbuf, align 8
  store i32 %251, i32* %252, align 4
  br label %do.end.458

do.end.458:                                       ; preds = %do.end.456
  br label %if.end.459

if.end.459:                                       ; preds = %do.end.458, %if.then.443
  %253 = load %struct.charset*, %struct.charset** %charset, align 8
  %id460 = getelementptr inbounds %struct.charset, %struct.charset* %253, i32 0, i32 0
  %254 = load i32, i32* %id460, align 4
  store i32 %254, i32* %last_id, align 4
  %255 = load i64, i64* %char_offset, align 8
  store i64 %255, i64* %last_offset, align 8
  br label %if.end.461

if.end.461:                                       ; preds = %if.end.459, %land.lhs.true.439, %if.end.435
  %256 = load i32, i32* %c, align 4
  %257 = load i32*, i32** %charbuf, align 8
  %incdec.ptr462 = getelementptr inbounds i32, i32* %257, i32 1
  store i32* %incdec.ptr462, i32** %charbuf, align 8
  store i32 %256, i32* %257, align 4
  %258 = load i64, i64* %char_offset, align 8
  %inc463 = add nsw i64 %258, 1
  store i64 %inc463, i64* %char_offset, align 8
  br label %while.body

invalid_code:                                     ; preds = %if.then.434, %if.then.105, %if.then.91
  %259 = load i8*, i8** %src_base, align 8
  store i8* %259, i8** %src, align 8
  %260 = load i64, i64* %consumed_chars_base, align 8
  store i64 %260, i64* %consumed_chars, align 8
  br label %do.body.464

do.body.464:                                      ; preds = %invalid_code
  %261 = load i8*, i8** %src, align 8
  %262 = load i8*, i8** %src_end, align 8
  %cmp465 = icmp eq i8* %261, %262
  br i1 %cmp465, label %if.then.467, label %if.end.472

if.then.467:                                      ; preds = %do.body.464
  %263 = load i8*, i8** %src_base, align 8
  %264 = load i8*, i8** %src, align 8
  %cmp468 = icmp ult i8* %263, %264
  br i1 %cmp468, label %if.then.470, label %if.end.471

if.then.470:                                      ; preds = %if.then.467
  %265 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %265, i32 1)
  br label %if.end.471

if.end.471:                                       ; preds = %if.then.470, %if.then.467
  br label %no_more_source

if.end.472:                                       ; preds = %do.body.464
  %266 = load i8*, i8** %src, align 8
  %incdec.ptr473 = getelementptr inbounds i8, i8* %266, i32 1
  store i8* %incdec.ptr473, i8** %src, align 8
  %267 = load i8, i8* %266, align 1
  %conv474 = zext i8 %267 to i32
  store i32 %conv474, i32* %c, align 4
  %268 = load i8, i8* %multibytep, align 1
  %tobool475 = trunc i8 %268 to i1
  br i1 %tobool475, label %land.lhs.true.477, label %if.end.495

land.lhs.true.477:                                ; preds = %if.end.472
  %269 = load i32, i32* %c, align 4
  %and478 = and i32 %269, 128
  %tobool479 = icmp ne i32 %and478, 0
  br i1 %tobool479, label %if.then.480, label %if.end.495

if.then.480:                                      ; preds = %land.lhs.true.477
  %270 = load i32, i32* %c, align 4
  %and481 = and i32 %270, 254
  %cmp482 = icmp eq i32 %and481, 192
  br i1 %cmp482, label %if.then.484, label %if.else.490

if.then.484:                                      ; preds = %if.then.480
  %271 = load i32, i32* %c, align 4
  %and485 = and i32 %271, 1
  %shl486 = shl i32 %and485, 6
  %272 = load i8*, i8** %src, align 8
  %incdec.ptr487 = getelementptr inbounds i8, i8* %272, i32 1
  store i8* %incdec.ptr487, i8** %src, align 8
  %273 = load i8, i8* %272, align 1
  %conv488 = zext i8 %273 to i32
  %or489 = or i32 %shl486, %conv488
  store i32 %or489, i32* %c, align 4
  br label %if.end.494

if.else.490:                                      ; preds = %if.then.480
  %274 = load i8*, i8** %src, align 8
  %incdec.ptr491 = getelementptr inbounds i8, i8* %274, i32 -1
  store i8* %incdec.ptr491, i8** %src, align 8
  %275 = load i8*, i8** %src, align 8
  %call492 = call i32 @string_char(i8* %275, i8** %src, i32* null)
  %sub493 = sub nsw i32 0, %call492
  store i32 %sub493, i32* %c, align 4
  %276 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %276, i32 3)
  br label %if.end.494

if.end.494:                                       ; preds = %if.else.490, %if.then.484
  br label %if.end.495

if.end.495:                                       ; preds = %if.end.494, %land.lhs.true.477, %if.end.472
  %277 = load i64, i64* %consumed_chars, align 8
  %inc496 = add nsw i64 %277, 1
  store i64 %inc496, i64* %consumed_chars, align 8
  br label %do.end.497

do.end.497:                                       ; preds = %if.end.495
  %278 = load i32, i32* %c, align 4
  %cmp498 = icmp slt i32 %278, 0
  br i1 %cmp498, label %cond.true.500, label %cond.false.502

cond.true.500:                                    ; preds = %do.end.497
  %279 = load i32, i32* %c, align 4
  %sub501 = sub nsw i32 0, %279
  br label %cond.end.517

cond.false.502:                                   ; preds = %do.end.497
  br i1 true, label %cond.true.503, label %cond.false.507

cond.true.503:                                    ; preds = %cond.false.502
  %280 = load i32, i32* %c, align 4
  %add504 = add i32 %280, 0
  %cmp505 = icmp ult i32 %add504, 128
  br i1 %cmp505, label %cond.true.512, label %cond.false.513

cond.false.507:                                   ; preds = %cond.false.502
  %281 = load i32, i32* %c, align 4
  %conv508 = sext i32 %281 to i64
  %add509 = add i64 %conv508, 0
  %cmp510 = icmp ult i64 %add509, 128
  br i1 %cmp510, label %cond.true.512, label %cond.false.513

cond.true.512:                                    ; preds = %cond.false.507, %cond.true.503
  %282 = load i32, i32* %c, align 4
  br label %cond.end.515

cond.false.513:                                   ; preds = %cond.false.507, %cond.true.503
  %283 = load i32, i32* %c, align 4
  %add514 = add nsw i32 %283, 4194048
  br label %cond.end.515

cond.end.515:                                     ; preds = %cond.false.513, %cond.true.512
  %cond516 = phi i32 [ %282, %cond.true.512 ], [ %add514, %cond.false.513 ]
  br label %cond.end.517

cond.end.517:                                     ; preds = %cond.end.515, %cond.true.500
  %cond518 = phi i32 [ %sub501, %cond.true.500 ], [ %cond516, %cond.end.515 ]
  %284 = load i32*, i32** %charbuf, align 8
  %incdec.ptr519 = getelementptr inbounds i32, i32* %284, i32 1
  store i32* %incdec.ptr519, i32** %charbuf, align 8
  store i32 %cond518, i32* %284, align 4
  %285 = load i64, i64* %char_offset, align 8
  %inc520 = add nsw i64 %285, 1
  store i64 %inc520, i64* %char_offset, align 8
  br label %while.body

while.end.521:                                    ; preds = %if.end
  br label %no_more_source

no_more_source:                                   ; preds = %while.end.521, %if.end.471, %if.end.278, %if.end.125, %if.end.60, %if.end.28
  %286 = load i32, i32* %last_id, align 4
  %287 = load i32, i32* @charset_ascii, align 4
  %cmp522 = icmp ne i32 %286, %287
  br i1 %cmp522, label %if.then.524, label %if.end.539

if.then.524:                                      ; preds = %no_more_source
  br label %do.body.525

do.body.525:                                      ; preds = %if.then.524
  br label %do.body.526

do.body.526:                                      ; preds = %do.body.525
  %288 = load i32*, i32** %charbuf, align 8
  %incdec.ptr527 = getelementptr inbounds i32, i32* %288, i32 1
  store i32* %incdec.ptr527, i32** %charbuf, align 8
  store i32 -4, i32* %288, align 4
  %289 = load i32*, i32** %charbuf, align 8
  %incdec.ptr528 = getelementptr inbounds i32, i32* %289, i32 1
  store i32* %incdec.ptr528, i32** %charbuf, align 8
  store i32 3, i32* %289, align 4
  %290 = load i64, i64* %char_offset, align 8
  %291 = load i64, i64* %last_offset, align 8
  %sub529 = sub nsw i64 %290, %291
  %conv530 = trunc i64 %sub529 to i32
  %292 = load i32*, i32** %charbuf, align 8
  %incdec.ptr531 = getelementptr inbounds i32, i32* %292, i32 1
  store i32* %incdec.ptr531, i32** %charbuf, align 8
  store i32 %conv530, i32* %292, align 4
  %293 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated532 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %293, i32 0, i32 1
  %bf.load533 = load i32, i32* %annotated532, align 8
  %bf.clear534 = and i32 %bf.load533, -8388609
  %bf.set535 = or i32 %bf.clear534, 8388608
  store i32 %bf.set535, i32* %annotated532, align 8
  br label %do.end.536

do.end.536:                                       ; preds = %do.body.526
  %294 = load i32, i32* %last_id, align 4
  %295 = load i32*, i32** %charbuf, align 8
  %incdec.ptr537 = getelementptr inbounds i32, i32* %295, i32 1
  store i32* %incdec.ptr537, i32** %charbuf, align 8
  store i32 %294, i32* %295, align 4
  br label %do.end.538

do.end.538:                                       ; preds = %do.end.536
  br label %if.end.539

if.end.539:                                       ; preds = %do.end.538, %no_more_source
  %296 = load i64, i64* %consumed_chars_base, align 8
  %297 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %297, i32 0, i32 11
  %298 = load i64, i64* %consumed_char, align 8
  %add540 = add nsw i64 %298, %296
  store i64 %add540, i64* %consumed_char, align 8
  %299 = load i8*, i8** %src_base, align 8
  %300 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source541 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %300, i32 0, i32 17
  %301 = load i8*, i8** %source541, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %299 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %301 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %302 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed542 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %302, i32 0, i32 10
  store i64 %sub.ptr.sub, i64* %consumed542, align 8
  %303 = load i32*, i32** %charbuf, align 8
  %304 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf543 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %304, i32 0, i32 23
  %305 = load i32*, i32** %charbuf543, align 8
  %sub.ptr.lhs.cast544 = ptrtoint i32* %303 to i64
  %sub.ptr.rhs.cast545 = ptrtoint i32* %305 to i64
  %sub.ptr.sub546 = sub i64 %sub.ptr.lhs.cast544, %sub.ptr.rhs.cast545
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub546, 4
  %conv547 = trunc i64 %sub.ptr.div to i32
  %306 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used548 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %306, i32 0, i32 25
  store i32 %conv547, i32* %charbuf_used548, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_charset(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %safe_room = alloca i32, align 4
  %produced_chars = alloca i64, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %ascii_compatible = alloca i8, align 1
  %c = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %code = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %offset = alloca i64, align 8
  %ch118 = alloca i32, align 4
  %ch181 = alloca i32, align 4
  %ch299 = alloca i32, align 4
  %ch359 = alloca i32, align 4
  %ch476 = alloca i32, align 4
  %ch590 = alloca i32, align 4
  %ch717 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load i32*, i32** %charbuf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 25
  %5 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 8
  %9 = load i64, i64* %produced, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %dst, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 22
  %11 = load i8*, i8** %destination3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 20
  %13 = load i64, i64* %dst_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %dst_end, align 8
  store i32 5, i32* %safe_room, align 4
  store i64 0, i64* %produced_chars, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id, align 8
  %call5 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %16)
  %call6 = call i64 @AREF(i64 %call5, i64 0)
  store i64 %call6, i64* %attrs, align 8
  %17 = load i64, i64* %attrs, align 8
  %call7 = call i64 @AREF(i64 %17, i64 4)
  store i64 %call7, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %18 = load i64, i64* %attrs, align 8
  %call8 = call i64 @AREF(i64 %18, i64 5)
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call8, %call9
  %lnot = xor i1 %cmp, true
  %frombool10 = zext i1 %lnot to i8
  store i8 %frombool10, i8* %ascii_compatible, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end.773, %do.end
  %19 = load i32*, i32** %charbuf, align 8
  %20 = load i32*, i32** %charbuf_end, align 8
  %cmp11 = icmp ult i32* %19, %20
  br i1 %cmp11, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.12

do.body.12:                                       ; preds = %while.body
  %21 = load i8*, i8** %dst, align 8
  %22 = load i32, i32* %safe_room, align 4
  %idx.ext13 = sext i32 %22 to i64
  %add.ptr14 = getelementptr inbounds i8, i8* %21, i64 %idx.ext13
  %23 = load i8*, i8** %dst_end, align 8
  %cmp15 = icmp uge i8* %add.ptr14, %23
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.12
  %24 = load i32*, i32** %charbuf_end, align 8
  %25 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %26 = load i32, i32* %safe_room, align 4
  %conv = sext i32 %26 to i64
  %add = add nsw i64 %sub.ptr.div, %conv
  store i64 %add, i64* %more_bytes, align 8
  %27 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %28 = load i64, i64* %more_bytes, align 8
  %29 = load i8*, i8** %dst, align 8
  %call16 = call i8* @alloc_destination(%struct.coding_system* %27, i64 %28, i8* %29)
  store i8* %call16, i8** %dst, align 8
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination17 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %30, i32 0, i32 22
  %31 = load i8*, i8** %destination17, align 8
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes18 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %32, i32 0, i32 20
  %33 = load i64, i64* %dst_bytes18, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %31, i64 %33
  store i8* %add.ptr19, i8** %dst_end, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body.12
  br label %do.end.20

do.end.20:                                        ; preds = %if.end
  %34 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %34, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %c, align 4
  %36 = load i8, i8* %ascii_compatible, align 1
  %tobool = trunc i8 %36 to i1
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %do.end.20
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %37 = load i32, i32* %c, align 4
  %add22 = add i32 %37, 0
  %cmp23 = icmp ult i32 %add22, 128
  br i1 %cmp23, label %if.then.29, label %if.else

cond.false:                                       ; preds = %land.lhs.true
  %38 = load i32, i32* %c, align 4
  %conv25 = sext i32 %38 to i64
  %add26 = add i64 %conv25, 0
  %cmp27 = icmp ult i64 %add26, 128
  br i1 %cmp27, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %cond.false, %cond.true
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.29
  %39 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %39, 1
  store i64 %inc, i64* %produced_chars, align 8
  %40 = load i32, i32* %c, align 4
  %conv31 = trunc i32 %40 to i8
  %41 = load i8*, i8** %dst, align 8
  %incdec.ptr32 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr32, i8** %dst, align 8
  store i8 %conv31, i8* %41, align 1
  br label %do.end.33

do.end.33:                                        ; preds = %do.body.30
  br label %if.end.773

if.else:                                          ; preds = %cond.false, %cond.true, %do.end.20
  %42 = load i32, i32* %c, align 4
  %cmp34 = icmp sgt i32 %42, 4194175
  br i1 %cmp34, label %if.then.36, label %if.else.96

if.then.36:                                       ; preds = %if.else
  %43 = load i32, i32* %c, align 4
  %cmp37 = icmp sgt i32 %43, 4194175
  br i1 %cmp37, label %cond.true.39, label %cond.false.40

cond.true.39:                                     ; preds = %if.then.36
  %44 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %44, 4194048
  br label %cond.end

cond.false.40:                                    ; preds = %if.then.36
  %45 = load i32, i32* %c, align 4
  %and = and i32 %45, 255
  br label %cond.end

cond.end:                                         ; preds = %cond.false.40, %cond.true.39
  %cond = phi i32 [ %sub, %cond.true.39 ], [ %and, %cond.false.40 ]
  store i32 %cond, i32* %c, align 4
  br label %do.body.41

do.body.41:                                       ; preds = %cond.end
  %46 = load i64, i64* %produced_chars, align 8
  %inc42 = add nsw i64 %46, 1
  store i64 %inc42, i64* %produced_chars, align 8
  %47 = load i8, i8* %multibytep, align 1
  %tobool43 = trunc i8 %47 to i1
  br i1 %tobool43, label %if.then.44, label %if.else.91

if.then.44:                                       ; preds = %do.body.41
  %48 = load i32, i32* %c, align 4
  store i32 %48, i32* %ch, align 4
  %49 = load i32, i32* %ch, align 4
  %cmp45 = icmp uge i32 %49, 128
  br i1 %cmp45, label %if.then.47, label %if.end.49

if.then.47:                                       ; preds = %if.then.44
  %50 = load i32, i32* %ch, align 4
  %add48 = add i32 %50, 4194048
  store i32 %add48, i32* %ch, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.47, %if.then.44
  br label %do.body.50

do.body.50:                                       ; preds = %if.end.49
  %51 = load i32, i32* %ch, align 4
  %cmp51 = icmp ule i32 %51, 127
  br i1 %cmp51, label %if.then.53, label %if.else.56

if.then.53:                                       ; preds = %do.body.50
  %52 = load i32, i32* %ch, align 4
  %conv54 = trunc i32 %52 to i8
  %53 = load i8*, i8** %dst, align 8
  %incdec.ptr55 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %incdec.ptr55, i8** %dst, align 8
  store i8 %conv54, i8* %53, align 1
  br label %if.end.89

if.else.56:                                       ; preds = %do.body.50
  %54 = load i32, i32* %ch, align 4
  %cmp57 = icmp ule i32 %54, 2047
  br i1 %cmp57, label %if.then.59, label %if.else.66

if.then.59:                                       ; preds = %if.else.56
  %55 = load i32, i32* %ch, align 4
  %shr = lshr i32 %55, 6
  %or = or i32 192, %shr
  %conv60 = trunc i32 %or to i8
  %56 = load i8*, i8** %dst, align 8
  %incdec.ptr61 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr61, i8** %dst, align 8
  store i8 %conv60, i8* %56, align 1
  %57 = load i32, i32* %ch, align 4
  %and62 = and i32 %57, 63
  %or63 = or i32 128, %and62
  %conv64 = trunc i32 %or63 to i8
  %58 = load i8*, i8** %dst, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr65, i8** %dst, align 8
  store i8 %conv64, i8* %58, align 1
  br label %if.end.88

if.else.66:                                       ; preds = %if.else.56
  %59 = load i32, i32* %ch, align 4
  %cmp67 = icmp ule i32 %59, 65535
  br i1 %cmp67, label %if.then.69, label %if.else.83

if.then.69:                                       ; preds = %if.else.66
  %60 = load i32, i32* %ch, align 4
  %shr70 = lshr i32 %60, 12
  %or71 = or i32 224, %shr70
  %conv72 = trunc i32 %or71 to i8
  %61 = load i8*, i8** %dst, align 8
  %incdec.ptr73 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr73, i8** %dst, align 8
  store i8 %conv72, i8* %61, align 1
  %62 = load i32, i32* %ch, align 4
  %shr74 = lshr i32 %62, 6
  %and75 = and i32 %shr74, 63
  %or76 = or i32 128, %and75
  %conv77 = trunc i32 %or76 to i8
  %63 = load i8*, i8** %dst, align 8
  %incdec.ptr78 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr78, i8** %dst, align 8
  store i8 %conv77, i8* %63, align 1
  %64 = load i32, i32* %ch, align 4
  %and79 = and i32 %64, 63
  %or80 = or i32 128, %and79
  %conv81 = trunc i32 %or80 to i8
  %65 = load i8*, i8** %dst, align 8
  %incdec.ptr82 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %incdec.ptr82, i8** %dst, align 8
  store i8 %conv81, i8* %65, align 1
  br label %if.end.87

if.else.83:                                       ; preds = %if.else.66
  %66 = load i32, i32* %ch, align 4
  %67 = load i8*, i8** %dst, align 8
  %call84 = call i32 @char_string(i32 %66, i8* %67)
  %68 = load i8*, i8** %dst, align 8
  %idx.ext85 = sext i32 %call84 to i64
  %add.ptr86 = getelementptr inbounds i8, i8* %68, i64 %idx.ext85
  store i8* %add.ptr86, i8** %dst, align 8
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.83, %if.then.69
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87, %if.then.59
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.then.53
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  br label %if.end.94

if.else.91:                                       ; preds = %do.body.41
  %69 = load i32, i32* %c, align 4
  %conv92 = trunc i32 %69 to i8
  %70 = load i8*, i8** %dst, align 8
  %incdec.ptr93 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr93, i8** %dst, align 8
  store i8 %conv92, i8* %70, align 1
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.91, %do.end.90
  br label %do.end.95

do.end.95:                                        ; preds = %if.end.94
  br label %if.end.772

if.else.96:                                       ; preds = %if.else
  br label %do.body.97

do.body.97:                                       ; preds = %if.else.96
  store i8 0, i8* @charset_map_loaded, align 1
  %71 = load i32, i32* %c, align 4
  %72 = load i64, i64* %charset_list, align 8
  %call98 = call %struct.charset* @char_charset(i32 %71, i64 %72, i32* %code)
  store %struct.charset* %call98, %struct.charset** %charset, align 8
  %73 = load i8, i8* @charset_map_loaded, align 1
  %tobool99 = trunc i8 %73 to i1
  br i1 %tobool99, label %land.lhs.true.101, label %if.end.107

land.lhs.true.101:                                ; preds = %do.body.97
  %74 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call102 = call i64 @coding_change_destination(%struct.coding_system* %74)
  store i64 %call102, i64* %offset, align 8
  %tobool103 = icmp ne i64 %call102, 0
  br i1 %tobool103, label %if.then.104, label %if.end.107

if.then.104:                                      ; preds = %land.lhs.true.101
  %75 = load i64, i64* %offset, align 8
  %76 = load i8*, i8** %dst, align 8
  %add.ptr105 = getelementptr inbounds i8, i8* %76, i64 %75
  store i8* %add.ptr105, i8** %dst, align 8
  %77 = load i64, i64* %offset, align 8
  %78 = load i8*, i8** %dst_end, align 8
  %add.ptr106 = getelementptr inbounds i8, i8* %78, i64 %77
  store i8* %add.ptr106, i8** %dst_end, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.104, %land.lhs.true.101, %do.body.97
  br label %do.end.108

do.end.108:                                       ; preds = %if.end.107
  %79 = load %struct.charset*, %struct.charset** %charset, align 8
  %tobool109 = icmp ne %struct.charset* %79, null
  br i1 %tobool109, label %if.then.110, label %if.else.704

if.then.110:                                      ; preds = %do.end.108
  %80 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %80, i32 0, i32 2
  %81 = load i32, i32* %dimension, align 4
  %cmp111 = icmp eq i32 %81, 1
  br i1 %cmp111, label %if.then.113, label %if.else.172

if.then.113:                                      ; preds = %if.then.110
  br label %do.body.114

do.body.114:                                      ; preds = %if.then.113
  %82 = load i64, i64* %produced_chars, align 8
  %inc115 = add nsw i64 %82, 1
  store i64 %inc115, i64* %produced_chars, align 8
  %83 = load i8, i8* %multibytep, align 1
  %tobool116 = trunc i8 %83 to i1
  br i1 %tobool116, label %if.then.117, label %if.else.167

if.then.117:                                      ; preds = %do.body.114
  %84 = load i32, i32* %code, align 4
  store i32 %84, i32* %ch118, align 4
  %85 = load i32, i32* %ch118, align 4
  %cmp119 = icmp uge i32 %85, 128
  br i1 %cmp119, label %if.then.121, label %if.end.123

if.then.121:                                      ; preds = %if.then.117
  %86 = load i32, i32* %ch118, align 4
  %add122 = add i32 %86, 4194048
  store i32 %add122, i32* %ch118, align 4
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.121, %if.then.117
  br label %do.body.124

do.body.124:                                      ; preds = %if.end.123
  %87 = load i32, i32* %ch118, align 4
  %cmp125 = icmp ule i32 %87, 127
  br i1 %cmp125, label %if.then.127, label %if.else.130

if.then.127:                                      ; preds = %do.body.124
  %88 = load i32, i32* %ch118, align 4
  %conv128 = trunc i32 %88 to i8
  %89 = load i8*, i8** %dst, align 8
  %incdec.ptr129 = getelementptr inbounds i8, i8* %89, i32 1
  store i8* %incdec.ptr129, i8** %dst, align 8
  store i8 %conv128, i8* %89, align 1
  br label %if.end.165

if.else.130:                                      ; preds = %do.body.124
  %90 = load i32, i32* %ch118, align 4
  %cmp131 = icmp ule i32 %90, 2047
  br i1 %cmp131, label %if.then.133, label %if.else.142

if.then.133:                                      ; preds = %if.else.130
  %91 = load i32, i32* %ch118, align 4
  %shr134 = lshr i32 %91, 6
  %or135 = or i32 192, %shr134
  %conv136 = trunc i32 %or135 to i8
  %92 = load i8*, i8** %dst, align 8
  %incdec.ptr137 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr137, i8** %dst, align 8
  store i8 %conv136, i8* %92, align 1
  %93 = load i32, i32* %ch118, align 4
  %and138 = and i32 %93, 63
  %or139 = or i32 128, %and138
  %conv140 = trunc i32 %or139 to i8
  %94 = load i8*, i8** %dst, align 8
  %incdec.ptr141 = getelementptr inbounds i8, i8* %94, i32 1
  store i8* %incdec.ptr141, i8** %dst, align 8
  store i8 %conv140, i8* %94, align 1
  br label %if.end.164

if.else.142:                                      ; preds = %if.else.130
  %95 = load i32, i32* %ch118, align 4
  %cmp143 = icmp ule i32 %95, 65535
  br i1 %cmp143, label %if.then.145, label %if.else.159

if.then.145:                                      ; preds = %if.else.142
  %96 = load i32, i32* %ch118, align 4
  %shr146 = lshr i32 %96, 12
  %or147 = or i32 224, %shr146
  %conv148 = trunc i32 %or147 to i8
  %97 = load i8*, i8** %dst, align 8
  %incdec.ptr149 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %incdec.ptr149, i8** %dst, align 8
  store i8 %conv148, i8* %97, align 1
  %98 = load i32, i32* %ch118, align 4
  %shr150 = lshr i32 %98, 6
  %and151 = and i32 %shr150, 63
  %or152 = or i32 128, %and151
  %conv153 = trunc i32 %or152 to i8
  %99 = load i8*, i8** %dst, align 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %incdec.ptr154, i8** %dst, align 8
  store i8 %conv153, i8* %99, align 1
  %100 = load i32, i32* %ch118, align 4
  %and155 = and i32 %100, 63
  %or156 = or i32 128, %and155
  %conv157 = trunc i32 %or156 to i8
  %101 = load i8*, i8** %dst, align 8
  %incdec.ptr158 = getelementptr inbounds i8, i8* %101, i32 1
  store i8* %incdec.ptr158, i8** %dst, align 8
  store i8 %conv157, i8* %101, align 1
  br label %if.end.163

if.else.159:                                      ; preds = %if.else.142
  %102 = load i32, i32* %ch118, align 4
  %103 = load i8*, i8** %dst, align 8
  %call160 = call i32 @char_string(i32 %102, i8* %103)
  %104 = load i8*, i8** %dst, align 8
  %idx.ext161 = sext i32 %call160 to i64
  %add.ptr162 = getelementptr inbounds i8, i8* %104, i64 %idx.ext161
  store i8* %add.ptr162, i8** %dst, align 8
  br label %if.end.163

if.end.163:                                       ; preds = %if.else.159, %if.then.145
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %if.then.133
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164, %if.then.127
  br label %do.end.166

do.end.166:                                       ; preds = %if.end.165
  br label %if.end.170

if.else.167:                                      ; preds = %do.body.114
  %105 = load i32, i32* %code, align 4
  %conv168 = trunc i32 %105 to i8
  %106 = load i8*, i8** %dst, align 8
  %incdec.ptr169 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr169, i8** %dst, align 8
  store i8 %conv168, i8* %106, align 1
  br label %if.end.170

if.end.170:                                       ; preds = %if.else.167, %do.end.166
  br label %do.end.171

do.end.171:                                       ; preds = %if.end.170
  br label %if.end.703

if.else.172:                                      ; preds = %if.then.110
  %107 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension173 = getelementptr inbounds %struct.charset, %struct.charset* %107, i32 0, i32 2
  %108 = load i32, i32* %dimension173, align 4
  %cmp174 = icmp eq i32 %108, 2
  br i1 %cmp174, label %if.then.176, label %if.else.289

if.then.176:                                      ; preds = %if.else.172
  br label %do.body.177

do.body.177:                                      ; preds = %if.then.176
  %109 = load i64, i64* %produced_chars, align 8
  %add178 = add nsw i64 %109, 2
  store i64 %add178, i64* %produced_chars, align 8
  %110 = load i8, i8* %multibytep, align 1
  %tobool179 = trunc i8 %110 to i1
  br i1 %tobool179, label %if.then.180, label %if.else.280

if.then.180:                                      ; preds = %do.body.177
  %111 = load i32, i32* %code, align 4
  %shr182 = lshr i32 %111, 8
  store i32 %shr182, i32* %ch181, align 4
  %112 = load i32, i32* %ch181, align 4
  %cmp183 = icmp uge i32 %112, 128
  br i1 %cmp183, label %if.then.185, label %if.end.187

if.then.185:                                      ; preds = %if.then.180
  %113 = load i32, i32* %ch181, align 4
  %add186 = add i32 %113, 4194048
  store i32 %add186, i32* %ch181, align 4
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.185, %if.then.180
  br label %do.body.188

do.body.188:                                      ; preds = %if.end.187
  %114 = load i32, i32* %ch181, align 4
  %cmp189 = icmp ule i32 %114, 127
  br i1 %cmp189, label %if.then.191, label %if.else.194

if.then.191:                                      ; preds = %do.body.188
  %115 = load i32, i32* %ch181, align 4
  %conv192 = trunc i32 %115 to i8
  %116 = load i8*, i8** %dst, align 8
  %incdec.ptr193 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr193, i8** %dst, align 8
  store i8 %conv192, i8* %116, align 1
  br label %if.end.229

if.else.194:                                      ; preds = %do.body.188
  %117 = load i32, i32* %ch181, align 4
  %cmp195 = icmp ule i32 %117, 2047
  br i1 %cmp195, label %if.then.197, label %if.else.206

if.then.197:                                      ; preds = %if.else.194
  %118 = load i32, i32* %ch181, align 4
  %shr198 = lshr i32 %118, 6
  %or199 = or i32 192, %shr198
  %conv200 = trunc i32 %or199 to i8
  %119 = load i8*, i8** %dst, align 8
  %incdec.ptr201 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %incdec.ptr201, i8** %dst, align 8
  store i8 %conv200, i8* %119, align 1
  %120 = load i32, i32* %ch181, align 4
  %and202 = and i32 %120, 63
  %or203 = or i32 128, %and202
  %conv204 = trunc i32 %or203 to i8
  %121 = load i8*, i8** %dst, align 8
  %incdec.ptr205 = getelementptr inbounds i8, i8* %121, i32 1
  store i8* %incdec.ptr205, i8** %dst, align 8
  store i8 %conv204, i8* %121, align 1
  br label %if.end.228

if.else.206:                                      ; preds = %if.else.194
  %122 = load i32, i32* %ch181, align 4
  %cmp207 = icmp ule i32 %122, 65535
  br i1 %cmp207, label %if.then.209, label %if.else.223

if.then.209:                                      ; preds = %if.else.206
  %123 = load i32, i32* %ch181, align 4
  %shr210 = lshr i32 %123, 12
  %or211 = or i32 224, %shr210
  %conv212 = trunc i32 %or211 to i8
  %124 = load i8*, i8** %dst, align 8
  %incdec.ptr213 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr213, i8** %dst, align 8
  store i8 %conv212, i8* %124, align 1
  %125 = load i32, i32* %ch181, align 4
  %shr214 = lshr i32 %125, 6
  %and215 = and i32 %shr214, 63
  %or216 = or i32 128, %and215
  %conv217 = trunc i32 %or216 to i8
  %126 = load i8*, i8** %dst, align 8
  %incdec.ptr218 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr218, i8** %dst, align 8
  store i8 %conv217, i8* %126, align 1
  %127 = load i32, i32* %ch181, align 4
  %and219 = and i32 %127, 63
  %or220 = or i32 128, %and219
  %conv221 = trunc i32 %or220 to i8
  %128 = load i8*, i8** %dst, align 8
  %incdec.ptr222 = getelementptr inbounds i8, i8* %128, i32 1
  store i8* %incdec.ptr222, i8** %dst, align 8
  store i8 %conv221, i8* %128, align 1
  br label %if.end.227

if.else.223:                                      ; preds = %if.else.206
  %129 = load i32, i32* %ch181, align 4
  %130 = load i8*, i8** %dst, align 8
  %call224 = call i32 @char_string(i32 %129, i8* %130)
  %131 = load i8*, i8** %dst, align 8
  %idx.ext225 = sext i32 %call224 to i64
  %add.ptr226 = getelementptr inbounds i8, i8* %131, i64 %idx.ext225
  store i8* %add.ptr226, i8** %dst, align 8
  br label %if.end.227

if.end.227:                                       ; preds = %if.else.223, %if.then.209
  br label %if.end.228

if.end.228:                                       ; preds = %if.end.227, %if.then.197
  br label %if.end.229

if.end.229:                                       ; preds = %if.end.228, %if.then.191
  br label %do.end.230

do.end.230:                                       ; preds = %if.end.229
  %132 = load i32, i32* %code, align 4
  %and231 = and i32 %132, 255
  store i32 %and231, i32* %ch181, align 4
  %133 = load i32, i32* %ch181, align 4
  %cmp232 = icmp uge i32 %133, 128
  br i1 %cmp232, label %if.then.234, label %if.end.236

if.then.234:                                      ; preds = %do.end.230
  %134 = load i32, i32* %ch181, align 4
  %add235 = add i32 %134, 4194048
  store i32 %add235, i32* %ch181, align 4
  br label %if.end.236

if.end.236:                                       ; preds = %if.then.234, %do.end.230
  br label %do.body.237

do.body.237:                                      ; preds = %if.end.236
  %135 = load i32, i32* %ch181, align 4
  %cmp238 = icmp ule i32 %135, 127
  br i1 %cmp238, label %if.then.240, label %if.else.243

if.then.240:                                      ; preds = %do.body.237
  %136 = load i32, i32* %ch181, align 4
  %conv241 = trunc i32 %136 to i8
  %137 = load i8*, i8** %dst, align 8
  %incdec.ptr242 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr242, i8** %dst, align 8
  store i8 %conv241, i8* %137, align 1
  br label %if.end.278

if.else.243:                                      ; preds = %do.body.237
  %138 = load i32, i32* %ch181, align 4
  %cmp244 = icmp ule i32 %138, 2047
  br i1 %cmp244, label %if.then.246, label %if.else.255

if.then.246:                                      ; preds = %if.else.243
  %139 = load i32, i32* %ch181, align 4
  %shr247 = lshr i32 %139, 6
  %or248 = or i32 192, %shr247
  %conv249 = trunc i32 %or248 to i8
  %140 = load i8*, i8** %dst, align 8
  %incdec.ptr250 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %incdec.ptr250, i8** %dst, align 8
  store i8 %conv249, i8* %140, align 1
  %141 = load i32, i32* %ch181, align 4
  %and251 = and i32 %141, 63
  %or252 = or i32 128, %and251
  %conv253 = trunc i32 %or252 to i8
  %142 = load i8*, i8** %dst, align 8
  %incdec.ptr254 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr254, i8** %dst, align 8
  store i8 %conv253, i8* %142, align 1
  br label %if.end.277

if.else.255:                                      ; preds = %if.else.243
  %143 = load i32, i32* %ch181, align 4
  %cmp256 = icmp ule i32 %143, 65535
  br i1 %cmp256, label %if.then.258, label %if.else.272

if.then.258:                                      ; preds = %if.else.255
  %144 = load i32, i32* %ch181, align 4
  %shr259 = lshr i32 %144, 12
  %or260 = or i32 224, %shr259
  %conv261 = trunc i32 %or260 to i8
  %145 = load i8*, i8** %dst, align 8
  %incdec.ptr262 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr262, i8** %dst, align 8
  store i8 %conv261, i8* %145, align 1
  %146 = load i32, i32* %ch181, align 4
  %shr263 = lshr i32 %146, 6
  %and264 = and i32 %shr263, 63
  %or265 = or i32 128, %and264
  %conv266 = trunc i32 %or265 to i8
  %147 = load i8*, i8** %dst, align 8
  %incdec.ptr267 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %incdec.ptr267, i8** %dst, align 8
  store i8 %conv266, i8* %147, align 1
  %148 = load i32, i32* %ch181, align 4
  %and268 = and i32 %148, 63
  %or269 = or i32 128, %and268
  %conv270 = trunc i32 %or269 to i8
  %149 = load i8*, i8** %dst, align 8
  %incdec.ptr271 = getelementptr inbounds i8, i8* %149, i32 1
  store i8* %incdec.ptr271, i8** %dst, align 8
  store i8 %conv270, i8* %149, align 1
  br label %if.end.276

if.else.272:                                      ; preds = %if.else.255
  %150 = load i32, i32* %ch181, align 4
  %151 = load i8*, i8** %dst, align 8
  %call273 = call i32 @char_string(i32 %150, i8* %151)
  %152 = load i8*, i8** %dst, align 8
  %idx.ext274 = sext i32 %call273 to i64
  %add.ptr275 = getelementptr inbounds i8, i8* %152, i64 %idx.ext274
  store i8* %add.ptr275, i8** %dst, align 8
  br label %if.end.276

if.end.276:                                       ; preds = %if.else.272, %if.then.258
  br label %if.end.277

if.end.277:                                       ; preds = %if.end.276, %if.then.246
  br label %if.end.278

if.end.278:                                       ; preds = %if.end.277, %if.then.240
  br label %do.end.279

do.end.279:                                       ; preds = %if.end.278
  br label %if.end.287

if.else.280:                                      ; preds = %do.body.177
  %153 = load i32, i32* %code, align 4
  %shr281 = lshr i32 %153, 8
  %conv282 = trunc i32 %shr281 to i8
  %154 = load i8*, i8** %dst, align 8
  %incdec.ptr283 = getelementptr inbounds i8, i8* %154, i32 1
  store i8* %incdec.ptr283, i8** %dst, align 8
  store i8 %conv282, i8* %154, align 1
  %155 = load i32, i32* %code, align 4
  %and284 = and i32 %155, 255
  %conv285 = trunc i32 %and284 to i8
  %156 = load i8*, i8** %dst, align 8
  %incdec.ptr286 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %incdec.ptr286, i8** %dst, align 8
  store i8 %conv285, i8* %156, align 1
  br label %if.end.287

if.end.287:                                       ; preds = %if.else.280, %do.end.279
  br label %do.end.288

do.end.288:                                       ; preds = %if.end.287
  br label %if.end.702

if.else.289:                                      ; preds = %if.else.172
  %157 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension290 = getelementptr inbounds %struct.charset, %struct.charset* %157, i32 0, i32 2
  %158 = load i32, i32* %dimension290, align 4
  %cmp291 = icmp eq i32 %158, 3
  br i1 %cmp291, label %if.then.293, label %if.else.470

if.then.293:                                      ; preds = %if.else.289
  br label %do.body.294

do.body.294:                                      ; preds = %if.then.293
  br label %do.body.295

do.body.295:                                      ; preds = %do.body.294
  %159 = load i64, i64* %produced_chars, align 8
  %inc296 = add nsw i64 %159, 1
  store i64 %inc296, i64* %produced_chars, align 8
  %160 = load i8, i8* %multibytep, align 1
  %tobool297 = trunc i8 %160 to i1
  br i1 %tobool297, label %if.then.298, label %if.else.349

if.then.298:                                      ; preds = %do.body.295
  %161 = load i32, i32* %code, align 4
  %shr300 = lshr i32 %161, 16
  store i32 %shr300, i32* %ch299, align 4
  %162 = load i32, i32* %ch299, align 4
  %cmp301 = icmp uge i32 %162, 128
  br i1 %cmp301, label %if.then.303, label %if.end.305

if.then.303:                                      ; preds = %if.then.298
  %163 = load i32, i32* %ch299, align 4
  %add304 = add i32 %163, 4194048
  store i32 %add304, i32* %ch299, align 4
  br label %if.end.305

if.end.305:                                       ; preds = %if.then.303, %if.then.298
  br label %do.body.306

do.body.306:                                      ; preds = %if.end.305
  %164 = load i32, i32* %ch299, align 4
  %cmp307 = icmp ule i32 %164, 127
  br i1 %cmp307, label %if.then.309, label %if.else.312

if.then.309:                                      ; preds = %do.body.306
  %165 = load i32, i32* %ch299, align 4
  %conv310 = trunc i32 %165 to i8
  %166 = load i8*, i8** %dst, align 8
  %incdec.ptr311 = getelementptr inbounds i8, i8* %166, i32 1
  store i8* %incdec.ptr311, i8** %dst, align 8
  store i8 %conv310, i8* %166, align 1
  br label %if.end.347

if.else.312:                                      ; preds = %do.body.306
  %167 = load i32, i32* %ch299, align 4
  %cmp313 = icmp ule i32 %167, 2047
  br i1 %cmp313, label %if.then.315, label %if.else.324

if.then.315:                                      ; preds = %if.else.312
  %168 = load i32, i32* %ch299, align 4
  %shr316 = lshr i32 %168, 6
  %or317 = or i32 192, %shr316
  %conv318 = trunc i32 %or317 to i8
  %169 = load i8*, i8** %dst, align 8
  %incdec.ptr319 = getelementptr inbounds i8, i8* %169, i32 1
  store i8* %incdec.ptr319, i8** %dst, align 8
  store i8 %conv318, i8* %169, align 1
  %170 = load i32, i32* %ch299, align 4
  %and320 = and i32 %170, 63
  %or321 = or i32 128, %and320
  %conv322 = trunc i32 %or321 to i8
  %171 = load i8*, i8** %dst, align 8
  %incdec.ptr323 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %incdec.ptr323, i8** %dst, align 8
  store i8 %conv322, i8* %171, align 1
  br label %if.end.346

if.else.324:                                      ; preds = %if.else.312
  %172 = load i32, i32* %ch299, align 4
  %cmp325 = icmp ule i32 %172, 65535
  br i1 %cmp325, label %if.then.327, label %if.else.341

if.then.327:                                      ; preds = %if.else.324
  %173 = load i32, i32* %ch299, align 4
  %shr328 = lshr i32 %173, 12
  %or329 = or i32 224, %shr328
  %conv330 = trunc i32 %or329 to i8
  %174 = load i8*, i8** %dst, align 8
  %incdec.ptr331 = getelementptr inbounds i8, i8* %174, i32 1
  store i8* %incdec.ptr331, i8** %dst, align 8
  store i8 %conv330, i8* %174, align 1
  %175 = load i32, i32* %ch299, align 4
  %shr332 = lshr i32 %175, 6
  %and333 = and i32 %shr332, 63
  %or334 = or i32 128, %and333
  %conv335 = trunc i32 %or334 to i8
  %176 = load i8*, i8** %dst, align 8
  %incdec.ptr336 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr336, i8** %dst, align 8
  store i8 %conv335, i8* %176, align 1
  %177 = load i32, i32* %ch299, align 4
  %and337 = and i32 %177, 63
  %or338 = or i32 128, %and337
  %conv339 = trunc i32 %or338 to i8
  %178 = load i8*, i8** %dst, align 8
  %incdec.ptr340 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %incdec.ptr340, i8** %dst, align 8
  store i8 %conv339, i8* %178, align 1
  br label %if.end.345

if.else.341:                                      ; preds = %if.else.324
  %179 = load i32, i32* %ch299, align 4
  %180 = load i8*, i8** %dst, align 8
  %call342 = call i32 @char_string(i32 %179, i8* %180)
  %181 = load i8*, i8** %dst, align 8
  %idx.ext343 = sext i32 %call342 to i64
  %add.ptr344 = getelementptr inbounds i8, i8* %181, i64 %idx.ext343
  store i8* %add.ptr344, i8** %dst, align 8
  br label %if.end.345

if.end.345:                                       ; preds = %if.else.341, %if.then.327
  br label %if.end.346

if.end.346:                                       ; preds = %if.end.345, %if.then.315
  br label %if.end.347

if.end.347:                                       ; preds = %if.end.346, %if.then.309
  br label %do.end.348

do.end.348:                                       ; preds = %if.end.347
  br label %if.end.353

if.else.349:                                      ; preds = %do.body.295
  %182 = load i32, i32* %code, align 4
  %shr350 = lshr i32 %182, 16
  %conv351 = trunc i32 %shr350 to i8
  %183 = load i8*, i8** %dst, align 8
  %incdec.ptr352 = getelementptr inbounds i8, i8* %183, i32 1
  store i8* %incdec.ptr352, i8** %dst, align 8
  store i8 %conv351, i8* %183, align 1
  br label %if.end.353

if.end.353:                                       ; preds = %if.else.349, %do.end.348
  br label %do.end.354

do.end.354:                                       ; preds = %if.end.353
  br label %do.body.355

do.body.355:                                      ; preds = %do.end.354
  %184 = load i64, i64* %produced_chars, align 8
  %add356 = add nsw i64 %184, 2
  store i64 %add356, i64* %produced_chars, align 8
  %185 = load i8, i8* %multibytep, align 1
  %tobool357 = trunc i8 %185 to i1
  br i1 %tobool357, label %if.then.358, label %if.else.459

if.then.358:                                      ; preds = %do.body.355
  %186 = load i32, i32* %code, align 4
  %shr360 = lshr i32 %186, 8
  %and361 = and i32 %shr360, 255
  store i32 %and361, i32* %ch359, align 4
  %187 = load i32, i32* %ch359, align 4
  %cmp362 = icmp uge i32 %187, 128
  br i1 %cmp362, label %if.then.364, label %if.end.366

if.then.364:                                      ; preds = %if.then.358
  %188 = load i32, i32* %ch359, align 4
  %add365 = add i32 %188, 4194048
  store i32 %add365, i32* %ch359, align 4
  br label %if.end.366

if.end.366:                                       ; preds = %if.then.364, %if.then.358
  br label %do.body.367

do.body.367:                                      ; preds = %if.end.366
  %189 = load i32, i32* %ch359, align 4
  %cmp368 = icmp ule i32 %189, 127
  br i1 %cmp368, label %if.then.370, label %if.else.373

if.then.370:                                      ; preds = %do.body.367
  %190 = load i32, i32* %ch359, align 4
  %conv371 = trunc i32 %190 to i8
  %191 = load i8*, i8** %dst, align 8
  %incdec.ptr372 = getelementptr inbounds i8, i8* %191, i32 1
  store i8* %incdec.ptr372, i8** %dst, align 8
  store i8 %conv371, i8* %191, align 1
  br label %if.end.408

if.else.373:                                      ; preds = %do.body.367
  %192 = load i32, i32* %ch359, align 4
  %cmp374 = icmp ule i32 %192, 2047
  br i1 %cmp374, label %if.then.376, label %if.else.385

if.then.376:                                      ; preds = %if.else.373
  %193 = load i32, i32* %ch359, align 4
  %shr377 = lshr i32 %193, 6
  %or378 = or i32 192, %shr377
  %conv379 = trunc i32 %or378 to i8
  %194 = load i8*, i8** %dst, align 8
  %incdec.ptr380 = getelementptr inbounds i8, i8* %194, i32 1
  store i8* %incdec.ptr380, i8** %dst, align 8
  store i8 %conv379, i8* %194, align 1
  %195 = load i32, i32* %ch359, align 4
  %and381 = and i32 %195, 63
  %or382 = or i32 128, %and381
  %conv383 = trunc i32 %or382 to i8
  %196 = load i8*, i8** %dst, align 8
  %incdec.ptr384 = getelementptr inbounds i8, i8* %196, i32 1
  store i8* %incdec.ptr384, i8** %dst, align 8
  store i8 %conv383, i8* %196, align 1
  br label %if.end.407

if.else.385:                                      ; preds = %if.else.373
  %197 = load i32, i32* %ch359, align 4
  %cmp386 = icmp ule i32 %197, 65535
  br i1 %cmp386, label %if.then.388, label %if.else.402

if.then.388:                                      ; preds = %if.else.385
  %198 = load i32, i32* %ch359, align 4
  %shr389 = lshr i32 %198, 12
  %or390 = or i32 224, %shr389
  %conv391 = trunc i32 %or390 to i8
  %199 = load i8*, i8** %dst, align 8
  %incdec.ptr392 = getelementptr inbounds i8, i8* %199, i32 1
  store i8* %incdec.ptr392, i8** %dst, align 8
  store i8 %conv391, i8* %199, align 1
  %200 = load i32, i32* %ch359, align 4
  %shr393 = lshr i32 %200, 6
  %and394 = and i32 %shr393, 63
  %or395 = or i32 128, %and394
  %conv396 = trunc i32 %or395 to i8
  %201 = load i8*, i8** %dst, align 8
  %incdec.ptr397 = getelementptr inbounds i8, i8* %201, i32 1
  store i8* %incdec.ptr397, i8** %dst, align 8
  store i8 %conv396, i8* %201, align 1
  %202 = load i32, i32* %ch359, align 4
  %and398 = and i32 %202, 63
  %or399 = or i32 128, %and398
  %conv400 = trunc i32 %or399 to i8
  %203 = load i8*, i8** %dst, align 8
  %incdec.ptr401 = getelementptr inbounds i8, i8* %203, i32 1
  store i8* %incdec.ptr401, i8** %dst, align 8
  store i8 %conv400, i8* %203, align 1
  br label %if.end.406

if.else.402:                                      ; preds = %if.else.385
  %204 = load i32, i32* %ch359, align 4
  %205 = load i8*, i8** %dst, align 8
  %call403 = call i32 @char_string(i32 %204, i8* %205)
  %206 = load i8*, i8** %dst, align 8
  %idx.ext404 = sext i32 %call403 to i64
  %add.ptr405 = getelementptr inbounds i8, i8* %206, i64 %idx.ext404
  store i8* %add.ptr405, i8** %dst, align 8
  br label %if.end.406

if.end.406:                                       ; preds = %if.else.402, %if.then.388
  br label %if.end.407

if.end.407:                                       ; preds = %if.end.406, %if.then.376
  br label %if.end.408

if.end.408:                                       ; preds = %if.end.407, %if.then.370
  br label %do.end.409

do.end.409:                                       ; preds = %if.end.408
  %207 = load i32, i32* %code, align 4
  %and410 = and i32 %207, 255
  store i32 %and410, i32* %ch359, align 4
  %208 = load i32, i32* %ch359, align 4
  %cmp411 = icmp uge i32 %208, 128
  br i1 %cmp411, label %if.then.413, label %if.end.415

if.then.413:                                      ; preds = %do.end.409
  %209 = load i32, i32* %ch359, align 4
  %add414 = add i32 %209, 4194048
  store i32 %add414, i32* %ch359, align 4
  br label %if.end.415

if.end.415:                                       ; preds = %if.then.413, %do.end.409
  br label %do.body.416

do.body.416:                                      ; preds = %if.end.415
  %210 = load i32, i32* %ch359, align 4
  %cmp417 = icmp ule i32 %210, 127
  br i1 %cmp417, label %if.then.419, label %if.else.422

if.then.419:                                      ; preds = %do.body.416
  %211 = load i32, i32* %ch359, align 4
  %conv420 = trunc i32 %211 to i8
  %212 = load i8*, i8** %dst, align 8
  %incdec.ptr421 = getelementptr inbounds i8, i8* %212, i32 1
  store i8* %incdec.ptr421, i8** %dst, align 8
  store i8 %conv420, i8* %212, align 1
  br label %if.end.457

if.else.422:                                      ; preds = %do.body.416
  %213 = load i32, i32* %ch359, align 4
  %cmp423 = icmp ule i32 %213, 2047
  br i1 %cmp423, label %if.then.425, label %if.else.434

if.then.425:                                      ; preds = %if.else.422
  %214 = load i32, i32* %ch359, align 4
  %shr426 = lshr i32 %214, 6
  %or427 = or i32 192, %shr426
  %conv428 = trunc i32 %or427 to i8
  %215 = load i8*, i8** %dst, align 8
  %incdec.ptr429 = getelementptr inbounds i8, i8* %215, i32 1
  store i8* %incdec.ptr429, i8** %dst, align 8
  store i8 %conv428, i8* %215, align 1
  %216 = load i32, i32* %ch359, align 4
  %and430 = and i32 %216, 63
  %or431 = or i32 128, %and430
  %conv432 = trunc i32 %or431 to i8
  %217 = load i8*, i8** %dst, align 8
  %incdec.ptr433 = getelementptr inbounds i8, i8* %217, i32 1
  store i8* %incdec.ptr433, i8** %dst, align 8
  store i8 %conv432, i8* %217, align 1
  br label %if.end.456

if.else.434:                                      ; preds = %if.else.422
  %218 = load i32, i32* %ch359, align 4
  %cmp435 = icmp ule i32 %218, 65535
  br i1 %cmp435, label %if.then.437, label %if.else.451

if.then.437:                                      ; preds = %if.else.434
  %219 = load i32, i32* %ch359, align 4
  %shr438 = lshr i32 %219, 12
  %or439 = or i32 224, %shr438
  %conv440 = trunc i32 %or439 to i8
  %220 = load i8*, i8** %dst, align 8
  %incdec.ptr441 = getelementptr inbounds i8, i8* %220, i32 1
  store i8* %incdec.ptr441, i8** %dst, align 8
  store i8 %conv440, i8* %220, align 1
  %221 = load i32, i32* %ch359, align 4
  %shr442 = lshr i32 %221, 6
  %and443 = and i32 %shr442, 63
  %or444 = or i32 128, %and443
  %conv445 = trunc i32 %or444 to i8
  %222 = load i8*, i8** %dst, align 8
  %incdec.ptr446 = getelementptr inbounds i8, i8* %222, i32 1
  store i8* %incdec.ptr446, i8** %dst, align 8
  store i8 %conv445, i8* %222, align 1
  %223 = load i32, i32* %ch359, align 4
  %and447 = and i32 %223, 63
  %or448 = or i32 128, %and447
  %conv449 = trunc i32 %or448 to i8
  %224 = load i8*, i8** %dst, align 8
  %incdec.ptr450 = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %incdec.ptr450, i8** %dst, align 8
  store i8 %conv449, i8* %224, align 1
  br label %if.end.455

if.else.451:                                      ; preds = %if.else.434
  %225 = load i32, i32* %ch359, align 4
  %226 = load i8*, i8** %dst, align 8
  %call452 = call i32 @char_string(i32 %225, i8* %226)
  %227 = load i8*, i8** %dst, align 8
  %idx.ext453 = sext i32 %call452 to i64
  %add.ptr454 = getelementptr inbounds i8, i8* %227, i64 %idx.ext453
  store i8* %add.ptr454, i8** %dst, align 8
  br label %if.end.455

if.end.455:                                       ; preds = %if.else.451, %if.then.437
  br label %if.end.456

if.end.456:                                       ; preds = %if.end.455, %if.then.425
  br label %if.end.457

if.end.457:                                       ; preds = %if.end.456, %if.then.419
  br label %do.end.458

do.end.458:                                       ; preds = %if.end.457
  br label %if.end.467

if.else.459:                                      ; preds = %do.body.355
  %228 = load i32, i32* %code, align 4
  %shr460 = lshr i32 %228, 8
  %and461 = and i32 %shr460, 255
  %conv462 = trunc i32 %and461 to i8
  %229 = load i8*, i8** %dst, align 8
  %incdec.ptr463 = getelementptr inbounds i8, i8* %229, i32 1
  store i8* %incdec.ptr463, i8** %dst, align 8
  store i8 %conv462, i8* %229, align 1
  %230 = load i32, i32* %code, align 4
  %and464 = and i32 %230, 255
  %conv465 = trunc i32 %and464 to i8
  %231 = load i8*, i8** %dst, align 8
  %incdec.ptr466 = getelementptr inbounds i8, i8* %231, i32 1
  store i8* %incdec.ptr466, i8** %dst, align 8
  store i8 %conv465, i8* %231, align 1
  br label %if.end.467

if.end.467:                                       ; preds = %if.else.459, %do.end.458
  br label %do.end.468

do.end.468:                                       ; preds = %if.end.467
  br label %do.end.469

do.end.469:                                       ; preds = %do.end.468
  br label %if.end.701

if.else.470:                                      ; preds = %if.else.289
  br label %do.body.471

do.body.471:                                      ; preds = %if.else.470
  br label %do.body.472

do.body.472:                                      ; preds = %do.body.471
  %232 = load i64, i64* %produced_chars, align 8
  %add473 = add nsw i64 %232, 2
  store i64 %add473, i64* %produced_chars, align 8
  %233 = load i8, i8* %multibytep, align 1
  %tobool474 = trunc i8 %233 to i1
  br i1 %tobool474, label %if.then.475, label %if.else.576

if.then.475:                                      ; preds = %do.body.472
  %234 = load i32, i32* %code, align 4
  %shr477 = lshr i32 %234, 24
  store i32 %shr477, i32* %ch476, align 4
  %235 = load i32, i32* %ch476, align 4
  %cmp478 = icmp uge i32 %235, 128
  br i1 %cmp478, label %if.then.480, label %if.end.482

if.then.480:                                      ; preds = %if.then.475
  %236 = load i32, i32* %ch476, align 4
  %add481 = add i32 %236, 4194048
  store i32 %add481, i32* %ch476, align 4
  br label %if.end.482

if.end.482:                                       ; preds = %if.then.480, %if.then.475
  br label %do.body.483

do.body.483:                                      ; preds = %if.end.482
  %237 = load i32, i32* %ch476, align 4
  %cmp484 = icmp ule i32 %237, 127
  br i1 %cmp484, label %if.then.486, label %if.else.489

if.then.486:                                      ; preds = %do.body.483
  %238 = load i32, i32* %ch476, align 4
  %conv487 = trunc i32 %238 to i8
  %239 = load i8*, i8** %dst, align 8
  %incdec.ptr488 = getelementptr inbounds i8, i8* %239, i32 1
  store i8* %incdec.ptr488, i8** %dst, align 8
  store i8 %conv487, i8* %239, align 1
  br label %if.end.524

if.else.489:                                      ; preds = %do.body.483
  %240 = load i32, i32* %ch476, align 4
  %cmp490 = icmp ule i32 %240, 2047
  br i1 %cmp490, label %if.then.492, label %if.else.501

if.then.492:                                      ; preds = %if.else.489
  %241 = load i32, i32* %ch476, align 4
  %shr493 = lshr i32 %241, 6
  %or494 = or i32 192, %shr493
  %conv495 = trunc i32 %or494 to i8
  %242 = load i8*, i8** %dst, align 8
  %incdec.ptr496 = getelementptr inbounds i8, i8* %242, i32 1
  store i8* %incdec.ptr496, i8** %dst, align 8
  store i8 %conv495, i8* %242, align 1
  %243 = load i32, i32* %ch476, align 4
  %and497 = and i32 %243, 63
  %or498 = or i32 128, %and497
  %conv499 = trunc i32 %or498 to i8
  %244 = load i8*, i8** %dst, align 8
  %incdec.ptr500 = getelementptr inbounds i8, i8* %244, i32 1
  store i8* %incdec.ptr500, i8** %dst, align 8
  store i8 %conv499, i8* %244, align 1
  br label %if.end.523

if.else.501:                                      ; preds = %if.else.489
  %245 = load i32, i32* %ch476, align 4
  %cmp502 = icmp ule i32 %245, 65535
  br i1 %cmp502, label %if.then.504, label %if.else.518

if.then.504:                                      ; preds = %if.else.501
  %246 = load i32, i32* %ch476, align 4
  %shr505 = lshr i32 %246, 12
  %or506 = or i32 224, %shr505
  %conv507 = trunc i32 %or506 to i8
  %247 = load i8*, i8** %dst, align 8
  %incdec.ptr508 = getelementptr inbounds i8, i8* %247, i32 1
  store i8* %incdec.ptr508, i8** %dst, align 8
  store i8 %conv507, i8* %247, align 1
  %248 = load i32, i32* %ch476, align 4
  %shr509 = lshr i32 %248, 6
  %and510 = and i32 %shr509, 63
  %or511 = or i32 128, %and510
  %conv512 = trunc i32 %or511 to i8
  %249 = load i8*, i8** %dst, align 8
  %incdec.ptr513 = getelementptr inbounds i8, i8* %249, i32 1
  store i8* %incdec.ptr513, i8** %dst, align 8
  store i8 %conv512, i8* %249, align 1
  %250 = load i32, i32* %ch476, align 4
  %and514 = and i32 %250, 63
  %or515 = or i32 128, %and514
  %conv516 = trunc i32 %or515 to i8
  %251 = load i8*, i8** %dst, align 8
  %incdec.ptr517 = getelementptr inbounds i8, i8* %251, i32 1
  store i8* %incdec.ptr517, i8** %dst, align 8
  store i8 %conv516, i8* %251, align 1
  br label %if.end.522

if.else.518:                                      ; preds = %if.else.501
  %252 = load i32, i32* %ch476, align 4
  %253 = load i8*, i8** %dst, align 8
  %call519 = call i32 @char_string(i32 %252, i8* %253)
  %254 = load i8*, i8** %dst, align 8
  %idx.ext520 = sext i32 %call519 to i64
  %add.ptr521 = getelementptr inbounds i8, i8* %254, i64 %idx.ext520
  store i8* %add.ptr521, i8** %dst, align 8
  br label %if.end.522

if.end.522:                                       ; preds = %if.else.518, %if.then.504
  br label %if.end.523

if.end.523:                                       ; preds = %if.end.522, %if.then.492
  br label %if.end.524

if.end.524:                                       ; preds = %if.end.523, %if.then.486
  br label %do.end.525

do.end.525:                                       ; preds = %if.end.524
  %255 = load i32, i32* %code, align 4
  %shr526 = lshr i32 %255, 16
  %and527 = and i32 %shr526, 255
  store i32 %and527, i32* %ch476, align 4
  %256 = load i32, i32* %ch476, align 4
  %cmp528 = icmp uge i32 %256, 128
  br i1 %cmp528, label %if.then.530, label %if.end.532

if.then.530:                                      ; preds = %do.end.525
  %257 = load i32, i32* %ch476, align 4
  %add531 = add i32 %257, 4194048
  store i32 %add531, i32* %ch476, align 4
  br label %if.end.532

if.end.532:                                       ; preds = %if.then.530, %do.end.525
  br label %do.body.533

do.body.533:                                      ; preds = %if.end.532
  %258 = load i32, i32* %ch476, align 4
  %cmp534 = icmp ule i32 %258, 127
  br i1 %cmp534, label %if.then.536, label %if.else.539

if.then.536:                                      ; preds = %do.body.533
  %259 = load i32, i32* %ch476, align 4
  %conv537 = trunc i32 %259 to i8
  %260 = load i8*, i8** %dst, align 8
  %incdec.ptr538 = getelementptr inbounds i8, i8* %260, i32 1
  store i8* %incdec.ptr538, i8** %dst, align 8
  store i8 %conv537, i8* %260, align 1
  br label %if.end.574

if.else.539:                                      ; preds = %do.body.533
  %261 = load i32, i32* %ch476, align 4
  %cmp540 = icmp ule i32 %261, 2047
  br i1 %cmp540, label %if.then.542, label %if.else.551

if.then.542:                                      ; preds = %if.else.539
  %262 = load i32, i32* %ch476, align 4
  %shr543 = lshr i32 %262, 6
  %or544 = or i32 192, %shr543
  %conv545 = trunc i32 %or544 to i8
  %263 = load i8*, i8** %dst, align 8
  %incdec.ptr546 = getelementptr inbounds i8, i8* %263, i32 1
  store i8* %incdec.ptr546, i8** %dst, align 8
  store i8 %conv545, i8* %263, align 1
  %264 = load i32, i32* %ch476, align 4
  %and547 = and i32 %264, 63
  %or548 = or i32 128, %and547
  %conv549 = trunc i32 %or548 to i8
  %265 = load i8*, i8** %dst, align 8
  %incdec.ptr550 = getelementptr inbounds i8, i8* %265, i32 1
  store i8* %incdec.ptr550, i8** %dst, align 8
  store i8 %conv549, i8* %265, align 1
  br label %if.end.573

if.else.551:                                      ; preds = %if.else.539
  %266 = load i32, i32* %ch476, align 4
  %cmp552 = icmp ule i32 %266, 65535
  br i1 %cmp552, label %if.then.554, label %if.else.568

if.then.554:                                      ; preds = %if.else.551
  %267 = load i32, i32* %ch476, align 4
  %shr555 = lshr i32 %267, 12
  %or556 = or i32 224, %shr555
  %conv557 = trunc i32 %or556 to i8
  %268 = load i8*, i8** %dst, align 8
  %incdec.ptr558 = getelementptr inbounds i8, i8* %268, i32 1
  store i8* %incdec.ptr558, i8** %dst, align 8
  store i8 %conv557, i8* %268, align 1
  %269 = load i32, i32* %ch476, align 4
  %shr559 = lshr i32 %269, 6
  %and560 = and i32 %shr559, 63
  %or561 = or i32 128, %and560
  %conv562 = trunc i32 %or561 to i8
  %270 = load i8*, i8** %dst, align 8
  %incdec.ptr563 = getelementptr inbounds i8, i8* %270, i32 1
  store i8* %incdec.ptr563, i8** %dst, align 8
  store i8 %conv562, i8* %270, align 1
  %271 = load i32, i32* %ch476, align 4
  %and564 = and i32 %271, 63
  %or565 = or i32 128, %and564
  %conv566 = trunc i32 %or565 to i8
  %272 = load i8*, i8** %dst, align 8
  %incdec.ptr567 = getelementptr inbounds i8, i8* %272, i32 1
  store i8* %incdec.ptr567, i8** %dst, align 8
  store i8 %conv566, i8* %272, align 1
  br label %if.end.572

if.else.568:                                      ; preds = %if.else.551
  %273 = load i32, i32* %ch476, align 4
  %274 = load i8*, i8** %dst, align 8
  %call569 = call i32 @char_string(i32 %273, i8* %274)
  %275 = load i8*, i8** %dst, align 8
  %idx.ext570 = sext i32 %call569 to i64
  %add.ptr571 = getelementptr inbounds i8, i8* %275, i64 %idx.ext570
  store i8* %add.ptr571, i8** %dst, align 8
  br label %if.end.572

if.end.572:                                       ; preds = %if.else.568, %if.then.554
  br label %if.end.573

if.end.573:                                       ; preds = %if.end.572, %if.then.542
  br label %if.end.574

if.end.574:                                       ; preds = %if.end.573, %if.then.536
  br label %do.end.575

do.end.575:                                       ; preds = %if.end.574
  br label %if.end.584

if.else.576:                                      ; preds = %do.body.472
  %276 = load i32, i32* %code, align 4
  %shr577 = lshr i32 %276, 24
  %conv578 = trunc i32 %shr577 to i8
  %277 = load i8*, i8** %dst, align 8
  %incdec.ptr579 = getelementptr inbounds i8, i8* %277, i32 1
  store i8* %incdec.ptr579, i8** %dst, align 8
  store i8 %conv578, i8* %277, align 1
  %278 = load i32, i32* %code, align 4
  %shr580 = lshr i32 %278, 16
  %and581 = and i32 %shr580, 255
  %conv582 = trunc i32 %and581 to i8
  %279 = load i8*, i8** %dst, align 8
  %incdec.ptr583 = getelementptr inbounds i8, i8* %279, i32 1
  store i8* %incdec.ptr583, i8** %dst, align 8
  store i8 %conv582, i8* %279, align 1
  br label %if.end.584

if.end.584:                                       ; preds = %if.else.576, %do.end.575
  br label %do.end.585

do.end.585:                                       ; preds = %if.end.584
  br label %do.body.586

do.body.586:                                      ; preds = %do.end.585
  %280 = load i64, i64* %produced_chars, align 8
  %add587 = add nsw i64 %280, 2
  store i64 %add587, i64* %produced_chars, align 8
  %281 = load i8, i8* %multibytep, align 1
  %tobool588 = trunc i8 %281 to i1
  br i1 %tobool588, label %if.then.589, label %if.else.690

if.then.589:                                      ; preds = %do.body.586
  %282 = load i32, i32* %code, align 4
  %shr591 = lshr i32 %282, 8
  %and592 = and i32 %shr591, 255
  store i32 %and592, i32* %ch590, align 4
  %283 = load i32, i32* %ch590, align 4
  %cmp593 = icmp uge i32 %283, 128
  br i1 %cmp593, label %if.then.595, label %if.end.597

if.then.595:                                      ; preds = %if.then.589
  %284 = load i32, i32* %ch590, align 4
  %add596 = add i32 %284, 4194048
  store i32 %add596, i32* %ch590, align 4
  br label %if.end.597

if.end.597:                                       ; preds = %if.then.595, %if.then.589
  br label %do.body.598

do.body.598:                                      ; preds = %if.end.597
  %285 = load i32, i32* %ch590, align 4
  %cmp599 = icmp ule i32 %285, 127
  br i1 %cmp599, label %if.then.601, label %if.else.604

if.then.601:                                      ; preds = %do.body.598
  %286 = load i32, i32* %ch590, align 4
  %conv602 = trunc i32 %286 to i8
  %287 = load i8*, i8** %dst, align 8
  %incdec.ptr603 = getelementptr inbounds i8, i8* %287, i32 1
  store i8* %incdec.ptr603, i8** %dst, align 8
  store i8 %conv602, i8* %287, align 1
  br label %if.end.639

if.else.604:                                      ; preds = %do.body.598
  %288 = load i32, i32* %ch590, align 4
  %cmp605 = icmp ule i32 %288, 2047
  br i1 %cmp605, label %if.then.607, label %if.else.616

if.then.607:                                      ; preds = %if.else.604
  %289 = load i32, i32* %ch590, align 4
  %shr608 = lshr i32 %289, 6
  %or609 = or i32 192, %shr608
  %conv610 = trunc i32 %or609 to i8
  %290 = load i8*, i8** %dst, align 8
  %incdec.ptr611 = getelementptr inbounds i8, i8* %290, i32 1
  store i8* %incdec.ptr611, i8** %dst, align 8
  store i8 %conv610, i8* %290, align 1
  %291 = load i32, i32* %ch590, align 4
  %and612 = and i32 %291, 63
  %or613 = or i32 128, %and612
  %conv614 = trunc i32 %or613 to i8
  %292 = load i8*, i8** %dst, align 8
  %incdec.ptr615 = getelementptr inbounds i8, i8* %292, i32 1
  store i8* %incdec.ptr615, i8** %dst, align 8
  store i8 %conv614, i8* %292, align 1
  br label %if.end.638

if.else.616:                                      ; preds = %if.else.604
  %293 = load i32, i32* %ch590, align 4
  %cmp617 = icmp ule i32 %293, 65535
  br i1 %cmp617, label %if.then.619, label %if.else.633

if.then.619:                                      ; preds = %if.else.616
  %294 = load i32, i32* %ch590, align 4
  %shr620 = lshr i32 %294, 12
  %or621 = or i32 224, %shr620
  %conv622 = trunc i32 %or621 to i8
  %295 = load i8*, i8** %dst, align 8
  %incdec.ptr623 = getelementptr inbounds i8, i8* %295, i32 1
  store i8* %incdec.ptr623, i8** %dst, align 8
  store i8 %conv622, i8* %295, align 1
  %296 = load i32, i32* %ch590, align 4
  %shr624 = lshr i32 %296, 6
  %and625 = and i32 %shr624, 63
  %or626 = or i32 128, %and625
  %conv627 = trunc i32 %or626 to i8
  %297 = load i8*, i8** %dst, align 8
  %incdec.ptr628 = getelementptr inbounds i8, i8* %297, i32 1
  store i8* %incdec.ptr628, i8** %dst, align 8
  store i8 %conv627, i8* %297, align 1
  %298 = load i32, i32* %ch590, align 4
  %and629 = and i32 %298, 63
  %or630 = or i32 128, %and629
  %conv631 = trunc i32 %or630 to i8
  %299 = load i8*, i8** %dst, align 8
  %incdec.ptr632 = getelementptr inbounds i8, i8* %299, i32 1
  store i8* %incdec.ptr632, i8** %dst, align 8
  store i8 %conv631, i8* %299, align 1
  br label %if.end.637

if.else.633:                                      ; preds = %if.else.616
  %300 = load i32, i32* %ch590, align 4
  %301 = load i8*, i8** %dst, align 8
  %call634 = call i32 @char_string(i32 %300, i8* %301)
  %302 = load i8*, i8** %dst, align 8
  %idx.ext635 = sext i32 %call634 to i64
  %add.ptr636 = getelementptr inbounds i8, i8* %302, i64 %idx.ext635
  store i8* %add.ptr636, i8** %dst, align 8
  br label %if.end.637

if.end.637:                                       ; preds = %if.else.633, %if.then.619
  br label %if.end.638

if.end.638:                                       ; preds = %if.end.637, %if.then.607
  br label %if.end.639

if.end.639:                                       ; preds = %if.end.638, %if.then.601
  br label %do.end.640

do.end.640:                                       ; preds = %if.end.639
  %303 = load i32, i32* %code, align 4
  %and641 = and i32 %303, 255
  store i32 %and641, i32* %ch590, align 4
  %304 = load i32, i32* %ch590, align 4
  %cmp642 = icmp uge i32 %304, 128
  br i1 %cmp642, label %if.then.644, label %if.end.646

if.then.644:                                      ; preds = %do.end.640
  %305 = load i32, i32* %ch590, align 4
  %add645 = add i32 %305, 4194048
  store i32 %add645, i32* %ch590, align 4
  br label %if.end.646

if.end.646:                                       ; preds = %if.then.644, %do.end.640
  br label %do.body.647

do.body.647:                                      ; preds = %if.end.646
  %306 = load i32, i32* %ch590, align 4
  %cmp648 = icmp ule i32 %306, 127
  br i1 %cmp648, label %if.then.650, label %if.else.653

if.then.650:                                      ; preds = %do.body.647
  %307 = load i32, i32* %ch590, align 4
  %conv651 = trunc i32 %307 to i8
  %308 = load i8*, i8** %dst, align 8
  %incdec.ptr652 = getelementptr inbounds i8, i8* %308, i32 1
  store i8* %incdec.ptr652, i8** %dst, align 8
  store i8 %conv651, i8* %308, align 1
  br label %if.end.688

if.else.653:                                      ; preds = %do.body.647
  %309 = load i32, i32* %ch590, align 4
  %cmp654 = icmp ule i32 %309, 2047
  br i1 %cmp654, label %if.then.656, label %if.else.665

if.then.656:                                      ; preds = %if.else.653
  %310 = load i32, i32* %ch590, align 4
  %shr657 = lshr i32 %310, 6
  %or658 = or i32 192, %shr657
  %conv659 = trunc i32 %or658 to i8
  %311 = load i8*, i8** %dst, align 8
  %incdec.ptr660 = getelementptr inbounds i8, i8* %311, i32 1
  store i8* %incdec.ptr660, i8** %dst, align 8
  store i8 %conv659, i8* %311, align 1
  %312 = load i32, i32* %ch590, align 4
  %and661 = and i32 %312, 63
  %or662 = or i32 128, %and661
  %conv663 = trunc i32 %or662 to i8
  %313 = load i8*, i8** %dst, align 8
  %incdec.ptr664 = getelementptr inbounds i8, i8* %313, i32 1
  store i8* %incdec.ptr664, i8** %dst, align 8
  store i8 %conv663, i8* %313, align 1
  br label %if.end.687

if.else.665:                                      ; preds = %if.else.653
  %314 = load i32, i32* %ch590, align 4
  %cmp666 = icmp ule i32 %314, 65535
  br i1 %cmp666, label %if.then.668, label %if.else.682

if.then.668:                                      ; preds = %if.else.665
  %315 = load i32, i32* %ch590, align 4
  %shr669 = lshr i32 %315, 12
  %or670 = or i32 224, %shr669
  %conv671 = trunc i32 %or670 to i8
  %316 = load i8*, i8** %dst, align 8
  %incdec.ptr672 = getelementptr inbounds i8, i8* %316, i32 1
  store i8* %incdec.ptr672, i8** %dst, align 8
  store i8 %conv671, i8* %316, align 1
  %317 = load i32, i32* %ch590, align 4
  %shr673 = lshr i32 %317, 6
  %and674 = and i32 %shr673, 63
  %or675 = or i32 128, %and674
  %conv676 = trunc i32 %or675 to i8
  %318 = load i8*, i8** %dst, align 8
  %incdec.ptr677 = getelementptr inbounds i8, i8* %318, i32 1
  store i8* %incdec.ptr677, i8** %dst, align 8
  store i8 %conv676, i8* %318, align 1
  %319 = load i32, i32* %ch590, align 4
  %and678 = and i32 %319, 63
  %or679 = or i32 128, %and678
  %conv680 = trunc i32 %or679 to i8
  %320 = load i8*, i8** %dst, align 8
  %incdec.ptr681 = getelementptr inbounds i8, i8* %320, i32 1
  store i8* %incdec.ptr681, i8** %dst, align 8
  store i8 %conv680, i8* %320, align 1
  br label %if.end.686

if.else.682:                                      ; preds = %if.else.665
  %321 = load i32, i32* %ch590, align 4
  %322 = load i8*, i8** %dst, align 8
  %call683 = call i32 @char_string(i32 %321, i8* %322)
  %323 = load i8*, i8** %dst, align 8
  %idx.ext684 = sext i32 %call683 to i64
  %add.ptr685 = getelementptr inbounds i8, i8* %323, i64 %idx.ext684
  store i8* %add.ptr685, i8** %dst, align 8
  br label %if.end.686

if.end.686:                                       ; preds = %if.else.682, %if.then.668
  br label %if.end.687

if.end.687:                                       ; preds = %if.end.686, %if.then.656
  br label %if.end.688

if.end.688:                                       ; preds = %if.end.687, %if.then.650
  br label %do.end.689

do.end.689:                                       ; preds = %if.end.688
  br label %if.end.698

if.else.690:                                      ; preds = %do.body.586
  %324 = load i32, i32* %code, align 4
  %shr691 = lshr i32 %324, 8
  %and692 = and i32 %shr691, 255
  %conv693 = trunc i32 %and692 to i8
  %325 = load i8*, i8** %dst, align 8
  %incdec.ptr694 = getelementptr inbounds i8, i8* %325, i32 1
  store i8* %incdec.ptr694, i8** %dst, align 8
  store i8 %conv693, i8* %325, align 1
  %326 = load i32, i32* %code, align 4
  %and695 = and i32 %326, 255
  %conv696 = trunc i32 %and695 to i8
  %327 = load i8*, i8** %dst, align 8
  %incdec.ptr697 = getelementptr inbounds i8, i8* %327, i32 1
  store i8* %incdec.ptr697, i8** %dst, align 8
  store i8 %conv696, i8* %327, align 1
  br label %if.end.698

if.end.698:                                       ; preds = %if.else.690, %do.end.689
  br label %do.end.699

do.end.699:                                       ; preds = %if.end.698
  br label %do.end.700

do.end.700:                                       ; preds = %do.end.699
  br label %if.end.701

if.end.701:                                       ; preds = %do.end.700, %do.end.469
  br label %if.end.702

if.end.702:                                       ; preds = %if.end.701, %do.end.288
  br label %if.end.703

if.end.703:                                       ; preds = %if.end.702, %do.end.171
  br label %if.end.771

if.else.704:                                      ; preds = %do.end.108
  %328 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %328, i32 0, i32 1
  %bf.load705 = load i32, i32* %mode, align 8
  %bf.lshr706 = lshr i32 %bf.load705, 14
  %bf.clear707 = and i32 %bf.lshr706, 31
  %and708 = and i32 %bf.clear707, 16
  %tobool709 = icmp ne i32 %and708, 0
  br i1 %tobool709, label %if.then.710, label %if.else.711

if.then.710:                                      ; preds = %if.else.704
  store i32 63, i32* %c, align 4
  br label %if.end.712

if.else.711:                                      ; preds = %if.else.704
  %329 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %default_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %329, i32 0, i32 28
  %330 = load i32, i32* %default_char, align 4
  store i32 %330, i32* %c, align 4
  br label %if.end.712

if.end.712:                                       ; preds = %if.else.711, %if.then.710
  br label %do.body.713

do.body.713:                                      ; preds = %if.end.712
  %331 = load i64, i64* %produced_chars, align 8
  %inc714 = add nsw i64 %331, 1
  store i64 %inc714, i64* %produced_chars, align 8
  %332 = load i8, i8* %multibytep, align 1
  %tobool715 = trunc i8 %332 to i1
  br i1 %tobool715, label %if.then.716, label %if.else.766

if.then.716:                                      ; preds = %do.body.713
  %333 = load i32, i32* %c, align 4
  store i32 %333, i32* %ch717, align 4
  %334 = load i32, i32* %ch717, align 4
  %cmp718 = icmp uge i32 %334, 128
  br i1 %cmp718, label %if.then.720, label %if.end.722

if.then.720:                                      ; preds = %if.then.716
  %335 = load i32, i32* %ch717, align 4
  %add721 = add i32 %335, 4194048
  store i32 %add721, i32* %ch717, align 4
  br label %if.end.722

if.end.722:                                       ; preds = %if.then.720, %if.then.716
  br label %do.body.723

do.body.723:                                      ; preds = %if.end.722
  %336 = load i32, i32* %ch717, align 4
  %cmp724 = icmp ule i32 %336, 127
  br i1 %cmp724, label %if.then.726, label %if.else.729

if.then.726:                                      ; preds = %do.body.723
  %337 = load i32, i32* %ch717, align 4
  %conv727 = trunc i32 %337 to i8
  %338 = load i8*, i8** %dst, align 8
  %incdec.ptr728 = getelementptr inbounds i8, i8* %338, i32 1
  store i8* %incdec.ptr728, i8** %dst, align 8
  store i8 %conv727, i8* %338, align 1
  br label %if.end.764

if.else.729:                                      ; preds = %do.body.723
  %339 = load i32, i32* %ch717, align 4
  %cmp730 = icmp ule i32 %339, 2047
  br i1 %cmp730, label %if.then.732, label %if.else.741

if.then.732:                                      ; preds = %if.else.729
  %340 = load i32, i32* %ch717, align 4
  %shr733 = lshr i32 %340, 6
  %or734 = or i32 192, %shr733
  %conv735 = trunc i32 %or734 to i8
  %341 = load i8*, i8** %dst, align 8
  %incdec.ptr736 = getelementptr inbounds i8, i8* %341, i32 1
  store i8* %incdec.ptr736, i8** %dst, align 8
  store i8 %conv735, i8* %341, align 1
  %342 = load i32, i32* %ch717, align 4
  %and737 = and i32 %342, 63
  %or738 = or i32 128, %and737
  %conv739 = trunc i32 %or738 to i8
  %343 = load i8*, i8** %dst, align 8
  %incdec.ptr740 = getelementptr inbounds i8, i8* %343, i32 1
  store i8* %incdec.ptr740, i8** %dst, align 8
  store i8 %conv739, i8* %343, align 1
  br label %if.end.763

if.else.741:                                      ; preds = %if.else.729
  %344 = load i32, i32* %ch717, align 4
  %cmp742 = icmp ule i32 %344, 65535
  br i1 %cmp742, label %if.then.744, label %if.else.758

if.then.744:                                      ; preds = %if.else.741
  %345 = load i32, i32* %ch717, align 4
  %shr745 = lshr i32 %345, 12
  %or746 = or i32 224, %shr745
  %conv747 = trunc i32 %or746 to i8
  %346 = load i8*, i8** %dst, align 8
  %incdec.ptr748 = getelementptr inbounds i8, i8* %346, i32 1
  store i8* %incdec.ptr748, i8** %dst, align 8
  store i8 %conv747, i8* %346, align 1
  %347 = load i32, i32* %ch717, align 4
  %shr749 = lshr i32 %347, 6
  %and750 = and i32 %shr749, 63
  %or751 = or i32 128, %and750
  %conv752 = trunc i32 %or751 to i8
  %348 = load i8*, i8** %dst, align 8
  %incdec.ptr753 = getelementptr inbounds i8, i8* %348, i32 1
  store i8* %incdec.ptr753, i8** %dst, align 8
  store i8 %conv752, i8* %348, align 1
  %349 = load i32, i32* %ch717, align 4
  %and754 = and i32 %349, 63
  %or755 = or i32 128, %and754
  %conv756 = trunc i32 %or755 to i8
  %350 = load i8*, i8** %dst, align 8
  %incdec.ptr757 = getelementptr inbounds i8, i8* %350, i32 1
  store i8* %incdec.ptr757, i8** %dst, align 8
  store i8 %conv756, i8* %350, align 1
  br label %if.end.762

if.else.758:                                      ; preds = %if.else.741
  %351 = load i32, i32* %ch717, align 4
  %352 = load i8*, i8** %dst, align 8
  %call759 = call i32 @char_string(i32 %351, i8* %352)
  %353 = load i8*, i8** %dst, align 8
  %idx.ext760 = sext i32 %call759 to i64
  %add.ptr761 = getelementptr inbounds i8, i8* %353, i64 %idx.ext760
  store i8* %add.ptr761, i8** %dst, align 8
  br label %if.end.762

if.end.762:                                       ; preds = %if.else.758, %if.then.744
  br label %if.end.763

if.end.763:                                       ; preds = %if.end.762, %if.then.732
  br label %if.end.764

if.end.764:                                       ; preds = %if.end.763, %if.then.726
  br label %do.end.765

do.end.765:                                       ; preds = %if.end.764
  br label %if.end.769

if.else.766:                                      ; preds = %do.body.713
  %354 = load i32, i32* %c, align 4
  %conv767 = trunc i32 %354 to i8
  %355 = load i8*, i8** %dst, align 8
  %incdec.ptr768 = getelementptr inbounds i8, i8* %355, i32 1
  store i8* %incdec.ptr768, i8** %dst, align 8
  store i8 %conv767, i8* %355, align 1
  br label %if.end.769

if.end.769:                                       ; preds = %if.else.766, %do.end.765
  br label %do.end.770

do.end.770:                                       ; preds = %if.end.769
  br label %if.end.771

if.end.771:                                       ; preds = %do.end.770, %if.end.703
  br label %if.end.772

if.end.772:                                       ; preds = %if.end.771, %do.end.95
  br label %if.end.773

if.end.773:                                       ; preds = %if.end.772, %do.end.33
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %356 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %356, i32 0)
  %357 = load i64, i64* %produced_chars, align 8
  %358 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %358, i32 0, i32 9
  %359 = load i64, i64* %produced_char, align 8
  %add774 = add nsw i64 %359, %357
  store i64 %add774, i64* %produced_char, align 8
  %360 = load i8*, i8** %dst, align 8
  %361 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination775 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %361, i32 0, i32 22
  %362 = load i8*, i8** %destination775, align 8
  %sub.ptr.lhs.cast776 = ptrtoint i8* %360 to i64
  %sub.ptr.rhs.cast777 = ptrtoint i8* %362 to i64
  %sub.ptr.sub778 = sub i64 %sub.ptr.lhs.cast776, %sub.ptr.rhs.cast777
  %363 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced779 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %363, i32 0, i32 8
  store i64 %sub.ptr.sub778, i64* %produced779, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_utf_8(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %consumed_chars = alloca i64, align 8
  %bom_found = alloca i8, align 1
  %nchars = alloca i64, align 8
  %eol_seen = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %c3 = alloca i32, align 4
  %c4 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 17
  %3 = load i8*, i8** %source1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  %5 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %src_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i8 0, i8* %bom_found, align 1
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 5
  %8 = load i64, i64* %head_ascii, align 8
  store i64 %8, i64* %nchars, align 8
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen2 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 1
  %bf.load3 = load i32, i32* %eol_seen2, align 8
  %bf.lshr4 = lshr i32 %bf.load3, 24
  %bf.clear5 = and i32 %bf.lshr4, 7
  store i32 %bf.clear5, i32* %eol_seen, align 4
  %10 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %10, i32 0, i32 0
  %11 = load i32, i32* %checked, align 4
  %or = or i32 %11, 448
  store i32 %or, i32* %checked, align 4
  %12 = load i64, i64* %nchars, align 8
  %13 = load i8*, i8** %src, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i64 %12
  store i8* %add.ptr6, i8** %src, align 8
  %14 = load i8*, i8** %src, align 8
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source7 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 17
  %16 = load i8*, i8** %source7, align 8
  %cmp = icmp eq i8* %14, %16
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %17 = load i8*, i8** %src, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %17, i64 3
  %18 = load i8*, i8** %src_end, align 8
  %cmp9 = icmp ult i8* %add.ptr8, %18
  br i1 %cmp9, label %land.lhs.true.10, label %if.end

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %19 = load i8*, i8** %src, align 8
  %arrayidx = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %20 to i32
  %cmp11 = icmp eq i32 %conv, 239
  br i1 %cmp11, label %land.lhs.true.13, label %if.end

land.lhs.true.13:                                 ; preds = %land.lhs.true.10
  %21 = load i8*, i8** %src, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %22 to i32
  %cmp16 = icmp eq i32 %conv15, 187
  br i1 %cmp16, label %land.lhs.true.18, label %if.end

land.lhs.true.18:                                 ; preds = %land.lhs.true.13
  %23 = load i8*, i8** %src, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 2
  %24 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %24 to i32
  %cmp21 = icmp eq i32 %conv20, 191
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.18
  store i8 1, i8* %bom_found, align 1
  %25 = load i8*, i8** %src, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %25, i64 3
  store i8* %add.ptr23, i8** %src, align 8
  %26 = load i64, i64* %nchars, align 8
  %inc = add nsw i64 %26, 1
  store i64 %inc, i64* %nchars, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.18, %land.lhs.true.13, %land.lhs.true.10, %land.lhs.true, %entry
  br label %while.body

while.body:                                       ; preds = %if.end, %if.end.77, %if.then.124, %if.then.172, %if.then.220, %if.then.268
  %27 = load i8*, i8** %src, align 8
  store i8* %27, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %while.body
  %28 = load i8*, i8** %src, align 8
  %29 = load i8*, i8** %src_end, align 8
  %cmp24 = icmp eq i8* %28, %29
  br i1 %cmp24, label %if.then.26, label %if.end.31

if.then.26:                                       ; preds = %do.body
  %30 = load i8*, i8** %src_base, align 8
  %31 = load i8*, i8** %src, align 8
  %cmp27 = icmp ult i8* %30, %31
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.then.26
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %32, i32 1)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %if.then.26
  br label %no_more_source

if.end.31:                                        ; preds = %do.body
  %33 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %34 = load i8, i8* %33, align 1
  %conv32 = zext i8 %34 to i32
  store i32 %conv32, i32* %c, align 4
  %35 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %35 to i1
  br i1 %tobool, label %land.lhs.true.34, label %if.end.47

land.lhs.true.34:                                 ; preds = %if.end.31
  %36 = load i32, i32* %c, align 4
  %and = and i32 %36, 128
  %tobool35 = icmp ne i32 %and, 0
  br i1 %tobool35, label %if.then.36, label %if.end.47

if.then.36:                                       ; preds = %land.lhs.true.34
  %37 = load i32, i32* %c, align 4
  %and37 = and i32 %37, 254
  %cmp38 = icmp eq i32 %and37, 192
  br i1 %cmp38, label %if.then.40, label %if.else

if.then.40:                                       ; preds = %if.then.36
  %38 = load i32, i32* %c, align 4
  %and41 = and i32 %38, 1
  %shl = shl i32 %and41, 6
  %39 = load i8*, i8** %src, align 8
  %incdec.ptr42 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr42, i8** %src, align 8
  %40 = load i8, i8* %39, align 1
  %conv43 = zext i8 %40 to i32
  %or44 = or i32 %shl, %conv43
  store i32 %or44, i32* %c, align 4
  br label %if.end.46

if.else:                                          ; preds = %if.then.36
  %41 = load i8*, i8** %src, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %41, i32 -1
  store i8* %incdec.ptr45, i8** %src, align 8
  %42 = load i8*, i8** %src, align 8
  %call = call i32 @string_char(i8* %42, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call
  store i32 %sub, i32* %c, align 4
  %43 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %43, i32 3)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else, %if.then.40
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %land.lhs.true.34, %if.end.31
  %44 = load i64, i64* %consumed_chars, align 8
  %inc48 = add nsw i64 %44, 1
  store i64 %inc48, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.47
  %45 = load i32, i32* %c, align 4
  %cmp49 = icmp slt i32 %45, 0
  br i1 %cmp49, label %if.then.53, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %46 = load i32, i32* %c, align 4
  %cmp51 = icmp slt i32 %46, 128
  br i1 %cmp51, label %if.then.53, label %if.end.78

if.then.53:                                       ; preds = %lor.lhs.false, %do.end
  %47 = load i64, i64* %nchars, align 8
  %inc54 = add nsw i64 %47, 1
  store i64 %inc54, i64* %nchars, align 8
  %48 = load i32, i32* %c, align 4
  %cmp55 = icmp eq i32 %48, 13
  br i1 %cmp55, label %if.then.57, label %if.else.71

if.then.57:                                       ; preds = %if.then.53
  %49 = load i8*, i8** %src, align 8
  %50 = load i8*, i8** %src_end, align 8
  %cmp58 = icmp ult i8* %49, %50
  br i1 %cmp58, label %land.lhs.true.60, label %if.else.68

land.lhs.true.60:                                 ; preds = %if.then.57
  %51 = load i8*, i8** %src, align 8
  %52 = load i8, i8* %51, align 1
  %conv61 = zext i8 %52 to i32
  %cmp62 = icmp eq i32 %conv61, 10
  br i1 %cmp62, label %if.then.64, label %if.else.68

if.then.64:                                       ; preds = %land.lhs.true.60
  %53 = load i32, i32* %eol_seen, align 4
  %or65 = or i32 %53, 4
  store i32 %or65, i32* %eol_seen, align 4
  %54 = load i8*, i8** %src, align 8
  %incdec.ptr66 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr66, i8** %src, align 8
  %55 = load i64, i64* %nchars, align 8
  %inc67 = add nsw i64 %55, 1
  store i64 %inc67, i64* %nchars, align 8
  br label %if.end.70

if.else.68:                                       ; preds = %land.lhs.true.60, %if.then.57
  %56 = load i32, i32* %eol_seen, align 4
  %or69 = or i32 %56, 2
  store i32 %or69, i32* %eol_seen, align 4
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.68, %if.then.64
  br label %if.end.77

if.else.71:                                       ; preds = %if.then.53
  %57 = load i32, i32* %c, align 4
  %cmp72 = icmp eq i32 %57, 10
  br i1 %cmp72, label %if.then.74, label %if.end.76

if.then.74:                                       ; preds = %if.else.71
  %58 = load i32, i32* %eol_seen, align 4
  %or75 = or i32 %58, 1
  store i32 %or75, i32* %eol_seen, align 4
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.74, %if.else.71
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.end.70
  br label %while.body

if.end.78:                                        ; preds = %lor.lhs.false
  br label %do.body.79

do.body.79:                                       ; preds = %if.end.78
  %59 = load i8*, i8** %src, align 8
  %60 = load i8*, i8** %src_end, align 8
  %cmp80 = icmp eq i8* %59, %60
  br i1 %cmp80, label %if.then.82, label %if.end.87

if.then.82:                                       ; preds = %do.body.79
  %61 = load i8*, i8** %src_base, align 8
  %62 = load i8*, i8** %src, align 8
  %cmp83 = icmp ult i8* %61, %62
  br i1 %cmp83, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %if.then.82
  %63 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %63, i32 1)
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.85, %if.then.82
  br label %no_more_source

if.end.87:                                        ; preds = %do.body.79
  %64 = load i8*, i8** %src, align 8
  %incdec.ptr88 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr88, i8** %src, align 8
  %65 = load i8, i8* %64, align 1
  %conv89 = zext i8 %65 to i32
  store i32 %conv89, i32* %c1, align 4
  %66 = load i8, i8* %multibytep, align 1
  %tobool90 = trunc i8 %66 to i1
  br i1 %tobool90, label %land.lhs.true.92, label %if.end.110

land.lhs.true.92:                                 ; preds = %if.end.87
  %67 = load i32, i32* %c1, align 4
  %and93 = and i32 %67, 128
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %if.then.95, label %if.end.110

if.then.95:                                       ; preds = %land.lhs.true.92
  %68 = load i32, i32* %c1, align 4
  %and96 = and i32 %68, 254
  %cmp97 = icmp eq i32 %and96, 192
  br i1 %cmp97, label %if.then.99, label %if.else.105

if.then.99:                                       ; preds = %if.then.95
  %69 = load i32, i32* %c1, align 4
  %and100 = and i32 %69, 1
  %shl101 = shl i32 %and100, 6
  %70 = load i8*, i8** %src, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr102, i8** %src, align 8
  %71 = load i8, i8* %70, align 1
  %conv103 = zext i8 %71 to i32
  %or104 = or i32 %shl101, %conv103
  store i32 %or104, i32* %c1, align 4
  br label %if.end.109

if.else.105:                                      ; preds = %if.then.95
  %72 = load i8*, i8** %src, align 8
  %incdec.ptr106 = getelementptr inbounds i8, i8* %72, i32 -1
  store i8* %incdec.ptr106, i8** %src, align 8
  %73 = load i8*, i8** %src, align 8
  %call107 = call i32 @string_char(i8* %73, i8** %src, i32* null)
  %sub108 = sub nsw i32 0, %call107
  store i32 %sub108, i32* %c1, align 4
  %74 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %74, i32 3)
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.105, %if.then.99
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %land.lhs.true.92, %if.end.87
  %75 = load i64, i64* %consumed_chars, align 8
  %inc111 = add nsw i64 %75, 1
  store i64 %inc111, i64* %consumed_chars, align 8
  br label %do.end.112

do.end.112:                                       ; preds = %if.end.110
  %76 = load i32, i32* %c1, align 4
  %cmp113 = icmp slt i32 %76, 0
  br i1 %cmp113, label %if.then.119, label %lor.lhs.false.115

lor.lhs.false.115:                                ; preds = %do.end.112
  %77 = load i32, i32* %c1, align 4
  %and116 = and i32 %77, 192
  %cmp117 = icmp eq i32 %and116, 128
  br i1 %cmp117, label %if.end.120, label %if.then.119

if.then.119:                                      ; preds = %lor.lhs.false.115, %do.end.112
  br label %while.end

if.end.120:                                       ; preds = %lor.lhs.false.115
  %78 = load i32, i32* %c, align 4
  %and121 = and i32 %78, 224
  %cmp122 = icmp eq i32 %and121, 192
  br i1 %cmp122, label %if.then.124, label %if.end.126

if.then.124:                                      ; preds = %if.end.120
  %79 = load i64, i64* %nchars, align 8
  %inc125 = add nsw i64 %79, 1
  store i64 %inc125, i64* %nchars, align 8
  br label %while.body

if.end.126:                                       ; preds = %if.end.120
  br label %do.body.127

do.body.127:                                      ; preds = %if.end.126
  %80 = load i8*, i8** %src, align 8
  %81 = load i8*, i8** %src_end, align 8
  %cmp128 = icmp eq i8* %80, %81
  br i1 %cmp128, label %if.then.130, label %if.end.135

if.then.130:                                      ; preds = %do.body.127
  %82 = load i8*, i8** %src_base, align 8
  %83 = load i8*, i8** %src, align 8
  %cmp131 = icmp ult i8* %82, %83
  br i1 %cmp131, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %if.then.130
  %84 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %84, i32 1)
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.133, %if.then.130
  br label %no_more_source

if.end.135:                                       ; preds = %do.body.127
  %85 = load i8*, i8** %src, align 8
  %incdec.ptr136 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %incdec.ptr136, i8** %src, align 8
  %86 = load i8, i8* %85, align 1
  %conv137 = zext i8 %86 to i32
  store i32 %conv137, i32* %c2, align 4
  %87 = load i8, i8* %multibytep, align 1
  %tobool138 = trunc i8 %87 to i1
  br i1 %tobool138, label %land.lhs.true.140, label %if.end.158

land.lhs.true.140:                                ; preds = %if.end.135
  %88 = load i32, i32* %c2, align 4
  %and141 = and i32 %88, 128
  %tobool142 = icmp ne i32 %and141, 0
  br i1 %tobool142, label %if.then.143, label %if.end.158

if.then.143:                                      ; preds = %land.lhs.true.140
  %89 = load i32, i32* %c2, align 4
  %and144 = and i32 %89, 254
  %cmp145 = icmp eq i32 %and144, 192
  br i1 %cmp145, label %if.then.147, label %if.else.153

if.then.147:                                      ; preds = %if.then.143
  %90 = load i32, i32* %c2, align 4
  %and148 = and i32 %90, 1
  %shl149 = shl i32 %and148, 6
  %91 = load i8*, i8** %src, align 8
  %incdec.ptr150 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr150, i8** %src, align 8
  %92 = load i8, i8* %91, align 1
  %conv151 = zext i8 %92 to i32
  %or152 = or i32 %shl149, %conv151
  store i32 %or152, i32* %c2, align 4
  br label %if.end.157

if.else.153:                                      ; preds = %if.then.143
  %93 = load i8*, i8** %src, align 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %93, i32 -1
  store i8* %incdec.ptr154, i8** %src, align 8
  %94 = load i8*, i8** %src, align 8
  %call155 = call i32 @string_char(i8* %94, i8** %src, i32* null)
  %sub156 = sub nsw i32 0, %call155
  store i32 %sub156, i32* %c2, align 4
  %95 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %95, i32 3)
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.153, %if.then.147
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %land.lhs.true.140, %if.end.135
  %96 = load i64, i64* %consumed_chars, align 8
  %inc159 = add nsw i64 %96, 1
  store i64 %inc159, i64* %consumed_chars, align 8
  br label %do.end.160

do.end.160:                                       ; preds = %if.end.158
  %97 = load i32, i32* %c2, align 4
  %cmp161 = icmp slt i32 %97, 0
  br i1 %cmp161, label %if.then.167, label %lor.lhs.false.163

lor.lhs.false.163:                                ; preds = %do.end.160
  %98 = load i32, i32* %c2, align 4
  %and164 = and i32 %98, 192
  %cmp165 = icmp eq i32 %and164, 128
  br i1 %cmp165, label %if.end.168, label %if.then.167

if.then.167:                                      ; preds = %lor.lhs.false.163, %do.end.160
  br label %while.end

if.end.168:                                       ; preds = %lor.lhs.false.163
  %99 = load i32, i32* %c, align 4
  %and169 = and i32 %99, 240
  %cmp170 = icmp eq i32 %and169, 224
  br i1 %cmp170, label %if.then.172, label %if.end.174

if.then.172:                                      ; preds = %if.end.168
  %100 = load i64, i64* %nchars, align 8
  %inc173 = add nsw i64 %100, 1
  store i64 %inc173, i64* %nchars, align 8
  br label %while.body

if.end.174:                                       ; preds = %if.end.168
  br label %do.body.175

do.body.175:                                      ; preds = %if.end.174
  %101 = load i8*, i8** %src, align 8
  %102 = load i8*, i8** %src_end, align 8
  %cmp176 = icmp eq i8* %101, %102
  br i1 %cmp176, label %if.then.178, label %if.end.183

if.then.178:                                      ; preds = %do.body.175
  %103 = load i8*, i8** %src_base, align 8
  %104 = load i8*, i8** %src, align 8
  %cmp179 = icmp ult i8* %103, %104
  br i1 %cmp179, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %if.then.178
  %105 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %105, i32 1)
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.181, %if.then.178
  br label %no_more_source

if.end.183:                                       ; preds = %do.body.175
  %106 = load i8*, i8** %src, align 8
  %incdec.ptr184 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr184, i8** %src, align 8
  %107 = load i8, i8* %106, align 1
  %conv185 = zext i8 %107 to i32
  store i32 %conv185, i32* %c3, align 4
  %108 = load i8, i8* %multibytep, align 1
  %tobool186 = trunc i8 %108 to i1
  br i1 %tobool186, label %land.lhs.true.188, label %if.end.206

land.lhs.true.188:                                ; preds = %if.end.183
  %109 = load i32, i32* %c3, align 4
  %and189 = and i32 %109, 128
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %if.then.191, label %if.end.206

if.then.191:                                      ; preds = %land.lhs.true.188
  %110 = load i32, i32* %c3, align 4
  %and192 = and i32 %110, 254
  %cmp193 = icmp eq i32 %and192, 192
  br i1 %cmp193, label %if.then.195, label %if.else.201

if.then.195:                                      ; preds = %if.then.191
  %111 = load i32, i32* %c3, align 4
  %and196 = and i32 %111, 1
  %shl197 = shl i32 %and196, 6
  %112 = load i8*, i8** %src, align 8
  %incdec.ptr198 = getelementptr inbounds i8, i8* %112, i32 1
  store i8* %incdec.ptr198, i8** %src, align 8
  %113 = load i8, i8* %112, align 1
  %conv199 = zext i8 %113 to i32
  %or200 = or i32 %shl197, %conv199
  store i32 %or200, i32* %c3, align 4
  br label %if.end.205

if.else.201:                                      ; preds = %if.then.191
  %114 = load i8*, i8** %src, align 8
  %incdec.ptr202 = getelementptr inbounds i8, i8* %114, i32 -1
  store i8* %incdec.ptr202, i8** %src, align 8
  %115 = load i8*, i8** %src, align 8
  %call203 = call i32 @string_char(i8* %115, i8** %src, i32* null)
  %sub204 = sub nsw i32 0, %call203
  store i32 %sub204, i32* %c3, align 4
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %116, i32 3)
  br label %if.end.205

if.end.205:                                       ; preds = %if.else.201, %if.then.195
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %land.lhs.true.188, %if.end.183
  %117 = load i64, i64* %consumed_chars, align 8
  %inc207 = add nsw i64 %117, 1
  store i64 %inc207, i64* %consumed_chars, align 8
  br label %do.end.208

do.end.208:                                       ; preds = %if.end.206
  %118 = load i32, i32* %c3, align 4
  %cmp209 = icmp slt i32 %118, 0
  br i1 %cmp209, label %if.then.215, label %lor.lhs.false.211

lor.lhs.false.211:                                ; preds = %do.end.208
  %119 = load i32, i32* %c3, align 4
  %and212 = and i32 %119, 192
  %cmp213 = icmp eq i32 %and212, 128
  br i1 %cmp213, label %if.end.216, label %if.then.215

if.then.215:                                      ; preds = %lor.lhs.false.211, %do.end.208
  br label %while.end

if.end.216:                                       ; preds = %lor.lhs.false.211
  %120 = load i32, i32* %c, align 4
  %and217 = and i32 %120, 248
  %cmp218 = icmp eq i32 %and217, 240
  br i1 %cmp218, label %if.then.220, label %if.end.222

if.then.220:                                      ; preds = %if.end.216
  %121 = load i64, i64* %nchars, align 8
  %inc221 = add nsw i64 %121, 1
  store i64 %inc221, i64* %nchars, align 8
  br label %while.body

if.end.222:                                       ; preds = %if.end.216
  br label %do.body.223

do.body.223:                                      ; preds = %if.end.222
  %122 = load i8*, i8** %src, align 8
  %123 = load i8*, i8** %src_end, align 8
  %cmp224 = icmp eq i8* %122, %123
  br i1 %cmp224, label %if.then.226, label %if.end.231

if.then.226:                                      ; preds = %do.body.223
  %124 = load i8*, i8** %src_base, align 8
  %125 = load i8*, i8** %src, align 8
  %cmp227 = icmp ult i8* %124, %125
  br i1 %cmp227, label %if.then.229, label %if.end.230

if.then.229:                                      ; preds = %if.then.226
  %126 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %126, i32 1)
  br label %if.end.230

if.end.230:                                       ; preds = %if.then.229, %if.then.226
  br label %no_more_source

if.end.231:                                       ; preds = %do.body.223
  %127 = load i8*, i8** %src, align 8
  %incdec.ptr232 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %incdec.ptr232, i8** %src, align 8
  %128 = load i8, i8* %127, align 1
  %conv233 = zext i8 %128 to i32
  store i32 %conv233, i32* %c4, align 4
  %129 = load i8, i8* %multibytep, align 1
  %tobool234 = trunc i8 %129 to i1
  br i1 %tobool234, label %land.lhs.true.236, label %if.end.254

land.lhs.true.236:                                ; preds = %if.end.231
  %130 = load i32, i32* %c4, align 4
  %and237 = and i32 %130, 128
  %tobool238 = icmp ne i32 %and237, 0
  br i1 %tobool238, label %if.then.239, label %if.end.254

if.then.239:                                      ; preds = %land.lhs.true.236
  %131 = load i32, i32* %c4, align 4
  %and240 = and i32 %131, 254
  %cmp241 = icmp eq i32 %and240, 192
  br i1 %cmp241, label %if.then.243, label %if.else.249

if.then.243:                                      ; preds = %if.then.239
  %132 = load i32, i32* %c4, align 4
  %and244 = and i32 %132, 1
  %shl245 = shl i32 %and244, 6
  %133 = load i8*, i8** %src, align 8
  %incdec.ptr246 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr246, i8** %src, align 8
  %134 = load i8, i8* %133, align 1
  %conv247 = zext i8 %134 to i32
  %or248 = or i32 %shl245, %conv247
  store i32 %or248, i32* %c4, align 4
  br label %if.end.253

if.else.249:                                      ; preds = %if.then.239
  %135 = load i8*, i8** %src, align 8
  %incdec.ptr250 = getelementptr inbounds i8, i8* %135, i32 -1
  store i8* %incdec.ptr250, i8** %src, align 8
  %136 = load i8*, i8** %src, align 8
  %call251 = call i32 @string_char(i8* %136, i8** %src, i32* null)
  %sub252 = sub nsw i32 0, %call251
  store i32 %sub252, i32* %c4, align 4
  %137 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %137, i32 3)
  br label %if.end.253

if.end.253:                                       ; preds = %if.else.249, %if.then.243
  br label %if.end.254

if.end.254:                                       ; preds = %if.end.253, %land.lhs.true.236, %if.end.231
  %138 = load i64, i64* %consumed_chars, align 8
  %inc255 = add nsw i64 %138, 1
  store i64 %inc255, i64* %consumed_chars, align 8
  br label %do.end.256

do.end.256:                                       ; preds = %if.end.254
  %139 = load i32, i32* %c4, align 4
  %cmp257 = icmp slt i32 %139, 0
  br i1 %cmp257, label %if.then.263, label %lor.lhs.false.259

lor.lhs.false.259:                                ; preds = %do.end.256
  %140 = load i32, i32* %c4, align 4
  %and260 = and i32 %140, 192
  %cmp261 = icmp eq i32 %and260, 128
  br i1 %cmp261, label %if.end.264, label %if.then.263

if.then.263:                                      ; preds = %lor.lhs.false.259, %do.end.256
  br label %while.end

if.end.264:                                       ; preds = %lor.lhs.false.259
  %141 = load i32, i32* %c, align 4
  %and265 = and i32 %141, 252
  %cmp266 = icmp eq i32 %and265, 248
  br i1 %cmp266, label %if.then.268, label %if.end.270

if.then.268:                                      ; preds = %if.end.264
  %142 = load i64, i64* %nchars, align 8
  %inc269 = add nsw i64 %142, 1
  store i64 %inc269, i64* %nchars, align 8
  br label %while.body

if.end.270:                                       ; preds = %if.end.264
  br label %while.end

while.end:                                        ; preds = %if.end.270, %if.then.263, %if.then.215, %if.then.167, %if.then.119
  %143 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %143, i32 0, i32 2
  %144 = load i32, i32* %rejected, align 4
  %or271 = or i32 %144, 448
  store i32 %or271, i32* %rejected, align 4
  store i1 false, i1* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.230, %if.end.182, %if.end.134, %if.end.86, %if.end.30
  %145 = load i8*, i8** %src_base, align 8
  %146 = load i8*, i8** %src, align 8
  %cmp272 = icmp ult i8* %145, %146
  br i1 %cmp272, label %land.lhs.true.274, label %if.end.283

land.lhs.true.274:                                ; preds = %no_more_source
  %147 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %147, i32 0, i32 1
  %bf.load275 = load i32, i32* %mode, align 8
  %bf.lshr276 = lshr i32 %bf.load275, 14
  %bf.clear277 = and i32 %bf.lshr276, 31
  %and278 = and i32 %bf.clear277, 1
  %tobool279 = icmp ne i32 %and278, 0
  br i1 %tobool279, label %if.then.280, label %if.end.283

if.then.280:                                      ; preds = %land.lhs.true.274
  %148 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected281 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %148, i32 0, i32 2
  %149 = load i32, i32* %rejected281, align 4
  %or282 = or i32 %149, 448
  store i32 %or282, i32* %rejected281, align 4
  store i1 false, i1* %retval
  br label %return

if.end.283:                                       ; preds = %land.lhs.true.274, %no_more_source
  %150 = load i8, i8* %bom_found, align 1
  %tobool284 = trunc i8 %150 to i1
  br i1 %tobool284, label %if.then.285, label %if.else.287

if.then.285:                                      ; preds = %if.end.283
  %151 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %151, i32 0, i32 1
  %152 = load i32, i32* %found, align 4
  %or286 = or i32 %152, 448
  store i32 %or286, i32* %found, align 4
  br label %if.end.297

if.else.287:                                      ; preds = %if.end.283
  %153 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected288 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %153, i32 0, i32 2
  %154 = load i32, i32* %rejected288, align 4
  %or289 = or i32 %154, 256
  store i32 %or289, i32* %rejected288, align 4
  %155 = load i64, i64* %nchars, align 8
  %156 = load i8*, i8** %src_end, align 8
  %157 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source290 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %157, i32 0, i32 17
  %158 = load i8*, i8** %source290, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %156 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %158 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp291 = icmp slt i64 %155, %sub.ptr.sub
  br i1 %cmp291, label %if.then.293, label %if.end.296

if.then.293:                                      ; preds = %if.else.287
  %159 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found294 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %159, i32 0, i32 1
  %160 = load i32, i32* %found294, align 4
  %or295 = or i32 %160, 192
  store i32 %or295, i32* %found294, align 4
  br label %if.end.296

if.end.296:                                       ; preds = %if.then.293, %if.else.287
  br label %if.end.297

if.end.297:                                       ; preds = %if.end.296, %if.then.285
  %161 = load i8*, i8** %src_base, align 8
  %162 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source298 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %162, i32 0, i32 17
  %163 = load i8*, i8** %source298, align 8
  %sub.ptr.lhs.cast299 = ptrtoint i8* %161 to i64
  %sub.ptr.rhs.cast300 = ptrtoint i8* %163 to i64
  %sub.ptr.sub301 = sub i64 %sub.ptr.lhs.cast299, %sub.ptr.rhs.cast300
  %164 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detected_utf8_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %164, i32 0, i32 6
  store i64 %sub.ptr.sub301, i64* %detected_utf8_bytes, align 8
  %165 = load i64, i64* %nchars, align 8
  %166 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detected_utf8_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %166, i32 0, i32 7
  store i64 %165, i64* %detected_utf8_chars, align 8
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.297, %if.then.280, %while.end
  %167 = load i1, i1* %retval
  ret i1 %167
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_utf_8(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %consumed_chars_base = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %bom = alloca i32, align 4
  %eol_dos = alloca i8, align 1
  %byte_after_cr = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %c3 = alloca i32, align 4
  %c = alloca i32, align 4
  %c1134 = alloca i32, align 4
  %c2135 = alloca i32, align 4
  %c3136 = alloca i32, align 4
  %c4 = alloca i32, align 4
  %c5 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  store i32* %add.ptr7, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  store i64 0, i64* %consumed_chars_base, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 3
  %utf_8_bom = bitcast %union.anon* %spec to i32*
  %18 = load i32, i32* %utf_8_bom, align 4
  store i32 %18, i32* %bom, align 4
  %19 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %19 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %20 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %20)
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 0
  %22 = load i64, i64* %id, align 8
  %call8 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %22)
  %call9 = call i64 @AREF(i64 %call8, i64 2)
  %call10 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp = icmp eq i64 %call9, %call10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %23 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool11 = zext i1 %23 to i8
  store i8 %frombool11, i8* %eol_dos, align 1
  store i32 -1, i32* %byte_after_cr, align 4
  %24 = load i32, i32* %bom, align 4
  %cmp12 = icmp ne i32 %24, 1
  br i1 %cmp12, label %if.then, label %if.end.131

if.then:                                          ; preds = %land.end
  %25 = load i8*, i8** %src, align 8
  store i8* %25, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %26 = load i8*, i8** %src, align 8
  %27 = load i8*, i8** %src_end, align 8
  %cmp13 = icmp eq i8* %26, %27
  br i1 %cmp13, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %do.body
  %28 = load i8*, i8** %src_base, align 8
  %29 = load i8*, i8** %src, align 8
  %cmp15 = icmp ult i8* %28, %29
  br i1 %cmp15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %if.then.14
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %30, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.16, %if.then.14
  br label %no_more_source

if.end.17:                                        ; preds = %do.body
  %31 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %32 = load i8, i8* %31, align 1
  %conv = zext i8 %32 to i32
  store i32 %conv, i32* %c1, align 4
  %33 = load i8, i8* %multibytep, align 1
  %tobool18 = trunc i8 %33 to i1
  br i1 %tobool18, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %if.end.17
  %34 = load i32, i32* %c1, align 4
  %and = and i32 %34, 128
  %tobool20 = icmp ne i32 %and, 0
  br i1 %tobool20, label %if.then.21, label %if.end.32

if.then.21:                                       ; preds = %land.lhs.true
  %35 = load i32, i32* %c1, align 4
  %and22 = and i32 %35, 254
  %cmp23 = icmp eq i32 %and22, 192
  br i1 %cmp23, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.then.21
  %36 = load i32, i32* %c1, align 4
  %and26 = and i32 %36, 1
  %shl = shl i32 %and26, 6
  %37 = load i8*, i8** %src, align 8
  %incdec.ptr27 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr27, i8** %src, align 8
  %38 = load i8, i8* %37, align 1
  %conv28 = zext i8 %38 to i32
  %or = or i32 %shl, %conv28
  store i32 %or, i32* %c1, align 4
  br label %if.end.31

if.else:                                          ; preds = %if.then.21
  %39 = load i8*, i8** %src, align 8
  %incdec.ptr29 = getelementptr inbounds i8, i8* %39, i32 -1
  store i8* %incdec.ptr29, i8** %src, align 8
  %40 = load i8*, i8** %src, align 8
  %call30 = call i32 @string_char(i8* %40, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call30
  store i32 %sub, i32* %c1, align 4
  %41 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %41, i32 3)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.25
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %land.lhs.true, %if.end.17
  %42 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %42, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.32
  %43 = load i32, i32* %c1, align 4
  %and33 = and i32 %43, 240
  %cmp34 = icmp eq i32 %and33, 224
  br i1 %cmp34, label %if.else.37, label %if.then.36

if.then.36:                                       ; preds = %do.end
  %44 = load i8*, i8** %src_base, align 8
  store i8* %44, i8** %src, align 8
  br label %if.end.130

if.else.37:                                       ; preds = %do.end
  br label %do.body.38

do.body.38:                                       ; preds = %if.else.37
  %45 = load i8*, i8** %src, align 8
  %46 = load i8*, i8** %src_end, align 8
  %cmp39 = icmp eq i8* %45, %46
  br i1 %cmp39, label %if.then.41, label %if.end.46

if.then.41:                                       ; preds = %do.body.38
  %47 = load i8*, i8** %src_base, align 8
  %48 = load i8*, i8** %src, align 8
  %cmp42 = icmp ult i8* %47, %48
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.then.41
  %49 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %49, i32 1)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.44, %if.then.41
  br label %no_more_source

if.end.46:                                        ; preds = %do.body.38
  %50 = load i8*, i8** %src, align 8
  %incdec.ptr47 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr47, i8** %src, align 8
  %51 = load i8, i8* %50, align 1
  %conv48 = zext i8 %51 to i32
  store i32 %conv48, i32* %c2, align 4
  %52 = load i8, i8* %multibytep, align 1
  %tobool49 = trunc i8 %52 to i1
  br i1 %tobool49, label %land.lhs.true.51, label %if.end.69

land.lhs.true.51:                                 ; preds = %if.end.46
  %53 = load i32, i32* %c2, align 4
  %and52 = and i32 %53, 128
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then.54, label %if.end.69

if.then.54:                                       ; preds = %land.lhs.true.51
  %54 = load i32, i32* %c2, align 4
  %and55 = and i32 %54, 254
  %cmp56 = icmp eq i32 %and55, 192
  br i1 %cmp56, label %if.then.58, label %if.else.64

if.then.58:                                       ; preds = %if.then.54
  %55 = load i32, i32* %c2, align 4
  %and59 = and i32 %55, 1
  %shl60 = shl i32 %and59, 6
  %56 = load i8*, i8** %src, align 8
  %incdec.ptr61 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr61, i8** %src, align 8
  %57 = load i8, i8* %56, align 1
  %conv62 = zext i8 %57 to i32
  %or63 = or i32 %shl60, %conv62
  store i32 %or63, i32* %c2, align 4
  br label %if.end.68

if.else.64:                                       ; preds = %if.then.54
  %58 = load i8*, i8** %src, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %58, i32 -1
  store i8* %incdec.ptr65, i8** %src, align 8
  %59 = load i8*, i8** %src, align 8
  %call66 = call i32 @string_char(i8* %59, i8** %src, i32* null)
  %sub67 = sub nsw i32 0, %call66
  store i32 %sub67, i32* %c2, align 4
  %60 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %60, i32 3)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.64, %if.then.58
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %land.lhs.true.51, %if.end.46
  %61 = load i64, i64* %consumed_chars, align 8
  %inc70 = add nsw i64 %61, 1
  store i64 %inc70, i64* %consumed_chars, align 8
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.69
  %62 = load i32, i32* %c2, align 4
  %and72 = and i32 %62, 192
  %cmp73 = icmp eq i32 %and72, 128
  br i1 %cmp73, label %if.else.76, label %if.then.75

if.then.75:                                       ; preds = %do.end.71
  %63 = load i8*, i8** %src_base, align 8
  store i8* %63, i8** %src, align 8
  br label %if.end.129

if.else.76:                                       ; preds = %do.end.71
  br label %do.body.77

do.body.77:                                       ; preds = %if.else.76
  %64 = load i8*, i8** %src, align 8
  %65 = load i8*, i8** %src_end, align 8
  %cmp78 = icmp eq i8* %64, %65
  br i1 %cmp78, label %if.then.80, label %if.end.85

if.then.80:                                       ; preds = %do.body.77
  %66 = load i8*, i8** %src_base, align 8
  %67 = load i8*, i8** %src, align 8
  %cmp81 = icmp ult i8* %66, %67
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.then.80
  %68 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %68, i32 1)
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.83, %if.then.80
  br label %no_more_source

if.end.85:                                        ; preds = %do.body.77
  %69 = load i8*, i8** %src, align 8
  %incdec.ptr86 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr86, i8** %src, align 8
  %70 = load i8, i8* %69, align 1
  %conv87 = zext i8 %70 to i32
  store i32 %conv87, i32* %c3, align 4
  %71 = load i8, i8* %multibytep, align 1
  %tobool88 = trunc i8 %71 to i1
  br i1 %tobool88, label %land.lhs.true.90, label %if.end.108

land.lhs.true.90:                                 ; preds = %if.end.85
  %72 = load i32, i32* %c3, align 4
  %and91 = and i32 %72, 128
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %if.then.93, label %if.end.108

if.then.93:                                       ; preds = %land.lhs.true.90
  %73 = load i32, i32* %c3, align 4
  %and94 = and i32 %73, 254
  %cmp95 = icmp eq i32 %and94, 192
  br i1 %cmp95, label %if.then.97, label %if.else.103

if.then.97:                                       ; preds = %if.then.93
  %74 = load i32, i32* %c3, align 4
  %and98 = and i32 %74, 1
  %shl99 = shl i32 %and98, 6
  %75 = load i8*, i8** %src, align 8
  %incdec.ptr100 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr100, i8** %src, align 8
  %76 = load i8, i8* %75, align 1
  %conv101 = zext i8 %76 to i32
  %or102 = or i32 %shl99, %conv101
  store i32 %or102, i32* %c3, align 4
  br label %if.end.107

if.else.103:                                      ; preds = %if.then.93
  %77 = load i8*, i8** %src, align 8
  %incdec.ptr104 = getelementptr inbounds i8, i8* %77, i32 -1
  store i8* %incdec.ptr104, i8** %src, align 8
  %78 = load i8*, i8** %src, align 8
  %call105 = call i32 @string_char(i8* %78, i8** %src, i32* null)
  %sub106 = sub nsw i32 0, %call105
  store i32 %sub106, i32* %c3, align 4
  %79 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %79, i32 3)
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.103, %if.then.97
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %land.lhs.true.90, %if.end.85
  %80 = load i64, i64* %consumed_chars, align 8
  %inc109 = add nsw i64 %80, 1
  store i64 %inc109, i64* %consumed_chars, align 8
  br label %do.end.110

do.end.110:                                       ; preds = %if.end.108
  %81 = load i32, i32* %c3, align 4
  %and111 = and i32 %81, 192
  %cmp112 = icmp eq i32 %and111, 128
  br i1 %cmp112, label %if.else.115, label %if.then.114

if.then.114:                                      ; preds = %do.end.110
  %82 = load i8*, i8** %src_base, align 8
  store i8* %82, i8** %src, align 8
  br label %if.end.128

if.else.115:                                      ; preds = %do.end.110
  %83 = load i32, i32* %c1, align 4
  %cmp116 = icmp ne i32 %83, 239
  br i1 %cmp116, label %if.then.123, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.115
  %84 = load i32, i32* %c2, align 4
  %cmp118 = icmp ne i32 %84, 187
  br i1 %cmp118, label %if.then.123, label %lor.lhs.false.120

lor.lhs.false.120:                                ; preds = %lor.lhs.false
  %85 = load i32, i32* %c3, align 4
  %cmp121 = icmp ne i32 %85, 191
  br i1 %cmp121, label %if.then.123, label %if.else.124

if.then.123:                                      ; preds = %lor.lhs.false.120, %lor.lhs.false, %if.else.115
  %86 = load i8*, i8** %src_base, align 8
  store i8* %86, i8** %src, align 8
  br label %if.end.127

if.else.124:                                      ; preds = %lor.lhs.false.120
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec125 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %87, i32 0, i32 3
  %utf_8_bom126 = bitcast %union.anon* %spec125 to i32*
  store i32 1, i32* %utf_8_bom126, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %if.else.124, %if.then.123
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.then.114
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.then.75
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.then.36
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %land.end
  %88 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec132 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %88, i32 0, i32 3
  %utf_8_bom133 = bitcast %union.anon* %spec132 to i32*
  store i32 1, i32* %utf_8_bom133, align 4
  br label %while.body

while.body:                                       ; preds = %if.end.131, %if.then.203, %if.end.547, %cond.end
  %89 = load i8*, i8** %src, align 8
  store i8* %89, i8** %src_base, align 8
  %90 = load i64, i64* %consumed_chars, align 8
  store i64 %90, i64* %consumed_chars_base, align 8
  %91 = load i32*, i32** %charbuf, align 8
  %92 = load i32*, i32** %charbuf_end, align 8
  %cmp137 = icmp uge i32* %91, %92
  br i1 %cmp137, label %if.then.139, label %if.end.145

if.then.139:                                      ; preds = %while.body
  %93 = load i32, i32* %byte_after_cr, align 4
  %cmp140 = icmp sge i32 %93, 0
  br i1 %cmp140, label %if.then.142, label %if.end.144

if.then.142:                                      ; preds = %if.then.139
  %94 = load i8*, i8** %src_base, align 8
  %incdec.ptr143 = getelementptr inbounds i8, i8* %94, i32 -1
  store i8* %incdec.ptr143, i8** %src_base, align 8
  br label %if.end.144

if.end.144:                                       ; preds = %if.then.142, %if.then.139
  br label %while.end.593

if.end.145:                                       ; preds = %while.body
  %95 = load i8, i8* %multibytep, align 1
  %tobool146 = trunc i8 %95 to i1
  br i1 %tobool146, label %land.lhs.true.148, label %if.end.205

land.lhs.true.148:                                ; preds = %if.end.145
  %96 = load i8, i8* %eol_dos, align 1
  %tobool149 = trunc i8 %96 to i1
  br i1 %tobool149, label %if.end.205, label %land.lhs.true.150

land.lhs.true.150:                                ; preds = %land.lhs.true.148
  %97 = load i32*, i32** %charbuf, align 8
  %98 = load i32*, i32** %charbuf_end, align 8
  %add.ptr151 = getelementptr inbounds i32, i32* %98, i64 -6
  %cmp152 = icmp ult i32* %97, %add.ptr151
  br i1 %cmp152, label %land.lhs.true.154, label %if.end.205

land.lhs.true.154:                                ; preds = %land.lhs.true.150
  %99 = load i8*, i8** %src, align 8
  %100 = load i8*, i8** %src_end, align 8
  %add.ptr155 = getelementptr inbounds i8, i8* %100, i64 -6
  %cmp156 = icmp ult i8* %99, %add.ptr155
  br i1 %cmp156, label %if.then.158, label %if.end.205

if.then.158:                                      ; preds = %land.lhs.true.154
  br label %while.cond.159

while.cond.159:                                   ; preds = %if.end.197, %if.then.158
  %101 = load i32*, i32** %charbuf, align 8
  %102 = load i32*, i32** %charbuf_end, align 8
  %add.ptr160 = getelementptr inbounds i32, i32* %102, i64 -6
  %cmp161 = icmp ult i32* %101, %add.ptr160
  br i1 %cmp161, label %land.rhs.163, label %land.end.167

land.rhs.163:                                     ; preds = %while.cond.159
  %103 = load i8*, i8** %src, align 8
  %104 = load i8*, i8** %src_end, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %104, i64 -6
  %cmp165 = icmp ult i8* %103, %add.ptr164
  br label %land.end.167

land.end.167:                                     ; preds = %land.rhs.163, %while.cond.159
  %105 = phi i1 [ false, %while.cond.159 ], [ %cmp165, %land.rhs.163 ]
  br i1 %105, label %while.body.168, label %while.end

while.body.168:                                   ; preds = %land.end.167
  %106 = load i8*, i8** %src, align 8
  %107 = load i8, i8* %106, align 1
  %conv169 = zext i8 %107 to i32
  store i32 %conv169, i32* %c1134, align 4
  %108 = load i32, i32* %c1134, align 4
  %and170 = and i32 %108, 128
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %if.then.172, label %if.end.173

if.then.172:                                      ; preds = %while.body.168
  br label %while.end

if.end.173:                                       ; preds = %while.body.168
  %109 = load i8*, i8** %src, align 8
  %incdec.ptr174 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %incdec.ptr174, i8** %src, align 8
  %110 = load i64, i64* %consumed_chars, align 8
  %inc175 = add nsw i64 %110, 1
  store i64 %inc175, i64* %consumed_chars, align 8
  %111 = load i32, i32* %c1134, align 4
  %112 = load i32*, i32** %charbuf, align 8
  %incdec.ptr176 = getelementptr inbounds i32, i32* %112, i32 1
  store i32* %incdec.ptr176, i32** %charbuf, align 8
  store i32 %111, i32* %112, align 4
  %113 = load i8*, i8** %src, align 8
  %114 = load i8, i8* %113, align 1
  %conv177 = zext i8 %114 to i32
  store i32 %conv177, i32* %c1134, align 4
  %115 = load i32, i32* %c1134, align 4
  %and178 = and i32 %115, 128
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %if.then.180, label %if.end.181

if.then.180:                                      ; preds = %if.end.173
  br label %while.end

if.end.181:                                       ; preds = %if.end.173
  %116 = load i8*, i8** %src, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr182, i8** %src, align 8
  %117 = load i64, i64* %consumed_chars, align 8
  %inc183 = add nsw i64 %117, 1
  store i64 %inc183, i64* %consumed_chars, align 8
  %118 = load i32, i32* %c1134, align 4
  %119 = load i32*, i32** %charbuf, align 8
  %incdec.ptr184 = getelementptr inbounds i32, i32* %119, i32 1
  store i32* %incdec.ptr184, i32** %charbuf, align 8
  store i32 %118, i32* %119, align 4
  %120 = load i8*, i8** %src, align 8
  %121 = load i8, i8* %120, align 1
  %conv185 = zext i8 %121 to i32
  store i32 %conv185, i32* %c1134, align 4
  %122 = load i32, i32* %c1134, align 4
  %and186 = and i32 %122, 128
  %tobool187 = icmp ne i32 %and186, 0
  br i1 %tobool187, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %if.end.181
  br label %while.end

if.end.189:                                       ; preds = %if.end.181
  %123 = load i8*, i8** %src, align 8
  %incdec.ptr190 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %incdec.ptr190, i8** %src, align 8
  %124 = load i64, i64* %consumed_chars, align 8
  %inc191 = add nsw i64 %124, 1
  store i64 %inc191, i64* %consumed_chars, align 8
  %125 = load i32, i32* %c1134, align 4
  %126 = load i32*, i32** %charbuf, align 8
  %incdec.ptr192 = getelementptr inbounds i32, i32* %126, i32 1
  store i32* %incdec.ptr192, i32** %charbuf, align 8
  store i32 %125, i32* %126, align 4
  %127 = load i8*, i8** %src, align 8
  %128 = load i8, i8* %127, align 1
  %conv193 = zext i8 %128 to i32
  store i32 %conv193, i32* %c1134, align 4
  %129 = load i32, i32* %c1134, align 4
  %and194 = and i32 %129, 128
  %tobool195 = icmp ne i32 %and194, 0
  br i1 %tobool195, label %if.then.196, label %if.end.197

if.then.196:                                      ; preds = %if.end.189
  br label %while.end

if.end.197:                                       ; preds = %if.end.189
  %130 = load i8*, i8** %src, align 8
  %incdec.ptr198 = getelementptr inbounds i8, i8* %130, i32 1
  store i8* %incdec.ptr198, i8** %src, align 8
  %131 = load i64, i64* %consumed_chars, align 8
  %inc199 = add nsw i64 %131, 1
  store i64 %inc199, i64* %consumed_chars, align 8
  %132 = load i32, i32* %c1134, align 4
  %133 = load i32*, i32** %charbuf, align 8
  %incdec.ptr200 = getelementptr inbounds i32, i32* %133, i32 1
  store i32* %incdec.ptr200, i32** %charbuf, align 8
  store i32 %132, i32* %133, align 4
  br label %while.cond.159

while.end:                                        ; preds = %if.then.196, %if.then.188, %if.then.180, %if.then.172, %land.end.167
  %134 = load i8*, i8** %src, align 8
  %135 = load i8*, i8** %src_base, align 8
  %cmp201 = icmp ne i8* %134, %135
  br i1 %cmp201, label %if.then.203, label %if.end.204

if.then.203:                                      ; preds = %while.end
  br label %while.body

if.end.204:                                       ; preds = %while.end
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %land.lhs.true.154, %land.lhs.true.150, %land.lhs.true.148, %if.end.145
  %136 = load i32, i32* %byte_after_cr, align 4
  %cmp206 = icmp sge i32 %136, 0
  br i1 %cmp206, label %if.then.208, label %if.else.209

if.then.208:                                      ; preds = %if.end.205
  %137 = load i32, i32* %byte_after_cr, align 4
  store i32 %137, i32* %c1134, align 4
  store i32 -1, i32* %byte_after_cr, align 4
  br label %if.end.244

if.else.209:                                      ; preds = %if.end.205
  br label %do.body.210

do.body.210:                                      ; preds = %if.else.209
  %138 = load i8*, i8** %src, align 8
  %139 = load i8*, i8** %src_end, align 8
  %cmp211 = icmp eq i8* %138, %139
  br i1 %cmp211, label %if.then.213, label %if.end.218

if.then.213:                                      ; preds = %do.body.210
  %140 = load i8*, i8** %src_base, align 8
  %141 = load i8*, i8** %src, align 8
  %cmp214 = icmp ult i8* %140, %141
  br i1 %cmp214, label %if.then.216, label %if.end.217

if.then.216:                                      ; preds = %if.then.213
  %142 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %142, i32 1)
  br label %if.end.217

if.end.217:                                       ; preds = %if.then.216, %if.then.213
  br label %no_more_source

if.end.218:                                       ; preds = %do.body.210
  %143 = load i8*, i8** %src, align 8
  %incdec.ptr219 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr219, i8** %src, align 8
  %144 = load i8, i8* %143, align 1
  %conv220 = zext i8 %144 to i32
  store i32 %conv220, i32* %c1134, align 4
  %145 = load i8, i8* %multibytep, align 1
  %tobool221 = trunc i8 %145 to i1
  br i1 %tobool221, label %land.lhs.true.223, label %if.end.241

land.lhs.true.223:                                ; preds = %if.end.218
  %146 = load i32, i32* %c1134, align 4
  %and224 = and i32 %146, 128
  %tobool225 = icmp ne i32 %and224, 0
  br i1 %tobool225, label %if.then.226, label %if.end.241

if.then.226:                                      ; preds = %land.lhs.true.223
  %147 = load i32, i32* %c1134, align 4
  %and227 = and i32 %147, 254
  %cmp228 = icmp eq i32 %and227, 192
  br i1 %cmp228, label %if.then.230, label %if.else.236

if.then.230:                                      ; preds = %if.then.226
  %148 = load i32, i32* %c1134, align 4
  %and231 = and i32 %148, 1
  %shl232 = shl i32 %and231, 6
  %149 = load i8*, i8** %src, align 8
  %incdec.ptr233 = getelementptr inbounds i8, i8* %149, i32 1
  store i8* %incdec.ptr233, i8** %src, align 8
  %150 = load i8, i8* %149, align 1
  %conv234 = zext i8 %150 to i32
  %or235 = or i32 %shl232, %conv234
  store i32 %or235, i32* %c1134, align 4
  br label %if.end.240

if.else.236:                                      ; preds = %if.then.226
  %151 = load i8*, i8** %src, align 8
  %incdec.ptr237 = getelementptr inbounds i8, i8* %151, i32 -1
  store i8* %incdec.ptr237, i8** %src, align 8
  %152 = load i8*, i8** %src, align 8
  %call238 = call i32 @string_char(i8* %152, i8** %src, i32* null)
  %sub239 = sub nsw i32 0, %call238
  store i32 %sub239, i32* %c1134, align 4
  %153 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %153, i32 3)
  br label %if.end.240

if.end.240:                                       ; preds = %if.else.236, %if.then.230
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.240, %land.lhs.true.223, %if.end.218
  %154 = load i64, i64* %consumed_chars, align 8
  %inc242 = add nsw i64 %154, 1
  store i64 %inc242, i64* %consumed_chars, align 8
  br label %do.end.243

do.end.243:                                       ; preds = %if.end.241
  br label %if.end.244

if.end.244:                                       ; preds = %do.end.243, %if.then.208
  %155 = load i32, i32* %c1134, align 4
  %cmp245 = icmp slt i32 %155, 0
  br i1 %cmp245, label %if.then.247, label %if.else.249

if.then.247:                                      ; preds = %if.end.244
  %156 = load i32, i32* %c1134, align 4
  %sub248 = sub nsw i32 0, %156
  store i32 %sub248, i32* %c, align 4
  br label %if.end.547

if.else.249:                                      ; preds = %if.end.244
  %157 = load i32, i32* %c1134, align 4
  %cmp250 = icmp slt i32 %157, 128
  br i1 %cmp250, label %if.then.252, label %if.else.294

if.then.252:                                      ; preds = %if.else.249
  %158 = load i8, i8* %eol_dos, align 1
  %tobool253 = trunc i8 %158 to i1
  br i1 %tobool253, label %land.lhs.true.255, label %if.end.293

land.lhs.true.255:                                ; preds = %if.then.252
  %159 = load i32, i32* %c1134, align 4
  %cmp256 = icmp eq i32 %159, 13
  br i1 %cmp256, label %if.then.258, label %if.end.293

if.then.258:                                      ; preds = %land.lhs.true.255
  br label %do.body.259

do.body.259:                                      ; preds = %if.then.258
  %160 = load i8*, i8** %src, align 8
  %161 = load i8*, i8** %src_end, align 8
  %cmp260 = icmp eq i8* %160, %161
  br i1 %cmp260, label %if.then.262, label %if.end.267

if.then.262:                                      ; preds = %do.body.259
  %162 = load i8*, i8** %src_base, align 8
  %163 = load i8*, i8** %src, align 8
  %cmp263 = icmp ult i8* %162, %163
  br i1 %cmp263, label %if.then.265, label %if.end.266

if.then.265:                                      ; preds = %if.then.262
  %164 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %164, i32 1)
  br label %if.end.266

if.end.266:                                       ; preds = %if.then.265, %if.then.262
  br label %no_more_source

if.end.267:                                       ; preds = %do.body.259
  %165 = load i8*, i8** %src, align 8
  %incdec.ptr268 = getelementptr inbounds i8, i8* %165, i32 1
  store i8* %incdec.ptr268, i8** %src, align 8
  %166 = load i8, i8* %165, align 1
  %conv269 = zext i8 %166 to i32
  store i32 %conv269, i32* %byte_after_cr, align 4
  %167 = load i8, i8* %multibytep, align 1
  %tobool270 = trunc i8 %167 to i1
  br i1 %tobool270, label %land.lhs.true.272, label %if.end.290

land.lhs.true.272:                                ; preds = %if.end.267
  %168 = load i32, i32* %byte_after_cr, align 4
  %and273 = and i32 %168, 128
  %tobool274 = icmp ne i32 %and273, 0
  br i1 %tobool274, label %if.then.275, label %if.end.290

if.then.275:                                      ; preds = %land.lhs.true.272
  %169 = load i32, i32* %byte_after_cr, align 4
  %and276 = and i32 %169, 254
  %cmp277 = icmp eq i32 %and276, 192
  br i1 %cmp277, label %if.then.279, label %if.else.285

if.then.279:                                      ; preds = %if.then.275
  %170 = load i32, i32* %byte_after_cr, align 4
  %and280 = and i32 %170, 1
  %shl281 = shl i32 %and280, 6
  %171 = load i8*, i8** %src, align 8
  %incdec.ptr282 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %incdec.ptr282, i8** %src, align 8
  %172 = load i8, i8* %171, align 1
  %conv283 = zext i8 %172 to i32
  %or284 = or i32 %shl281, %conv283
  store i32 %or284, i32* %byte_after_cr, align 4
  br label %if.end.289

if.else.285:                                      ; preds = %if.then.275
  %173 = load i8*, i8** %src, align 8
  %incdec.ptr286 = getelementptr inbounds i8, i8* %173, i32 -1
  store i8* %incdec.ptr286, i8** %src, align 8
  %174 = load i8*, i8** %src, align 8
  %call287 = call i32 @string_char(i8* %174, i8** %src, i32* null)
  %sub288 = sub nsw i32 0, %call287
  store i32 %sub288, i32* %byte_after_cr, align 4
  %175 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %175, i32 3)
  br label %if.end.289

if.end.289:                                       ; preds = %if.else.285, %if.then.279
  br label %if.end.290

if.end.290:                                       ; preds = %if.end.289, %land.lhs.true.272, %if.end.267
  %176 = load i64, i64* %consumed_chars, align 8
  %inc291 = add nsw i64 %176, 1
  store i64 %inc291, i64* %consumed_chars, align 8
  br label %do.end.292

do.end.292:                                       ; preds = %if.end.290
  br label %if.end.293

if.end.293:                                       ; preds = %do.end.292, %land.lhs.true.255, %if.then.252
  %177 = load i32, i32* %c1134, align 4
  store i32 %177, i32* %c, align 4
  br label %if.end.546

if.else.294:                                      ; preds = %if.else.249
  br label %do.body.295

do.body.295:                                      ; preds = %if.else.294
  %178 = load i8*, i8** %src, align 8
  %179 = load i8*, i8** %src_end, align 8
  %cmp296 = icmp eq i8* %178, %179
  br i1 %cmp296, label %if.then.298, label %if.end.303

if.then.298:                                      ; preds = %do.body.295
  %180 = load i8*, i8** %src_base, align 8
  %181 = load i8*, i8** %src, align 8
  %cmp299 = icmp ult i8* %180, %181
  br i1 %cmp299, label %if.then.301, label %if.end.302

if.then.301:                                      ; preds = %if.then.298
  %182 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %182, i32 1)
  br label %if.end.302

if.end.302:                                       ; preds = %if.then.301, %if.then.298
  br label %no_more_source

if.end.303:                                       ; preds = %do.body.295
  %183 = load i8*, i8** %src, align 8
  %incdec.ptr304 = getelementptr inbounds i8, i8* %183, i32 1
  store i8* %incdec.ptr304, i8** %src, align 8
  %184 = load i8, i8* %183, align 1
  %conv305 = zext i8 %184 to i32
  store i32 %conv305, i32* %c2135, align 4
  %185 = load i8, i8* %multibytep, align 1
  %tobool306 = trunc i8 %185 to i1
  br i1 %tobool306, label %land.lhs.true.308, label %if.end.326

land.lhs.true.308:                                ; preds = %if.end.303
  %186 = load i32, i32* %c2135, align 4
  %and309 = and i32 %186, 128
  %tobool310 = icmp ne i32 %and309, 0
  br i1 %tobool310, label %if.then.311, label %if.end.326

if.then.311:                                      ; preds = %land.lhs.true.308
  %187 = load i32, i32* %c2135, align 4
  %and312 = and i32 %187, 254
  %cmp313 = icmp eq i32 %and312, 192
  br i1 %cmp313, label %if.then.315, label %if.else.321

if.then.315:                                      ; preds = %if.then.311
  %188 = load i32, i32* %c2135, align 4
  %and316 = and i32 %188, 1
  %shl317 = shl i32 %and316, 6
  %189 = load i8*, i8** %src, align 8
  %incdec.ptr318 = getelementptr inbounds i8, i8* %189, i32 1
  store i8* %incdec.ptr318, i8** %src, align 8
  %190 = load i8, i8* %189, align 1
  %conv319 = zext i8 %190 to i32
  %or320 = or i32 %shl317, %conv319
  store i32 %or320, i32* %c2135, align 4
  br label %if.end.325

if.else.321:                                      ; preds = %if.then.311
  %191 = load i8*, i8** %src, align 8
  %incdec.ptr322 = getelementptr inbounds i8, i8* %191, i32 -1
  store i8* %incdec.ptr322, i8** %src, align 8
  %192 = load i8*, i8** %src, align 8
  %call323 = call i32 @string_char(i8* %192, i8** %src, i32* null)
  %sub324 = sub nsw i32 0, %call323
  store i32 %sub324, i32* %c2135, align 4
  %193 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %193, i32 3)
  br label %if.end.325

if.end.325:                                       ; preds = %if.else.321, %if.then.315
  br label %if.end.326

if.end.326:                                       ; preds = %if.end.325, %land.lhs.true.308, %if.end.303
  %194 = load i64, i64* %consumed_chars, align 8
  %inc327 = add nsw i64 %194, 1
  store i64 %inc327, i64* %consumed_chars, align 8
  br label %do.end.328

do.end.328:                                       ; preds = %if.end.326
  %195 = load i32, i32* %c2135, align 4
  %cmp329 = icmp slt i32 %195, 0
  br i1 %cmp329, label %if.then.335, label %lor.lhs.false.331

lor.lhs.false.331:                                ; preds = %do.end.328
  %196 = load i32, i32* %c2135, align 4
  %and332 = and i32 %196, 192
  %cmp333 = icmp eq i32 %and332, 128
  br i1 %cmp333, label %if.end.336, label %if.then.335

if.then.335:                                      ; preds = %lor.lhs.false.331, %do.end.328
  br label %invalid_code

if.end.336:                                       ; preds = %lor.lhs.false.331
  %197 = load i32, i32* %c1134, align 4
  %and337 = and i32 %197, 224
  %cmp338 = icmp eq i32 %and337, 192
  br i1 %cmp338, label %if.then.340, label %if.else.349

if.then.340:                                      ; preds = %if.end.336
  %198 = load i32, i32* %c1134, align 4
  %and341 = and i32 %198, 31
  %shl342 = shl i32 %and341, 6
  %199 = load i32, i32* %c2135, align 4
  %and343 = and i32 %199, 63
  %or344 = or i32 %shl342, %and343
  store i32 %or344, i32* %c, align 4
  %200 = load i32, i32* %c, align 4
  %cmp345 = icmp slt i32 %200, 128
  br i1 %cmp345, label %if.then.347, label %if.end.348

if.then.347:                                      ; preds = %if.then.340
  br label %invalid_code

if.end.348:                                       ; preds = %if.then.340
  br label %if.end.545

if.else.349:                                      ; preds = %if.end.336
  br label %do.body.350

do.body.350:                                      ; preds = %if.else.349
  %201 = load i8*, i8** %src, align 8
  %202 = load i8*, i8** %src_end, align 8
  %cmp351 = icmp eq i8* %201, %202
  br i1 %cmp351, label %if.then.353, label %if.end.358

if.then.353:                                      ; preds = %do.body.350
  %203 = load i8*, i8** %src_base, align 8
  %204 = load i8*, i8** %src, align 8
  %cmp354 = icmp ult i8* %203, %204
  br i1 %cmp354, label %if.then.356, label %if.end.357

if.then.356:                                      ; preds = %if.then.353
  %205 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %205, i32 1)
  br label %if.end.357

if.end.357:                                       ; preds = %if.then.356, %if.then.353
  br label %no_more_source

if.end.358:                                       ; preds = %do.body.350
  %206 = load i8*, i8** %src, align 8
  %incdec.ptr359 = getelementptr inbounds i8, i8* %206, i32 1
  store i8* %incdec.ptr359, i8** %src, align 8
  %207 = load i8, i8* %206, align 1
  %conv360 = zext i8 %207 to i32
  store i32 %conv360, i32* %c3136, align 4
  %208 = load i8, i8* %multibytep, align 1
  %tobool361 = trunc i8 %208 to i1
  br i1 %tobool361, label %land.lhs.true.363, label %if.end.381

land.lhs.true.363:                                ; preds = %if.end.358
  %209 = load i32, i32* %c3136, align 4
  %and364 = and i32 %209, 128
  %tobool365 = icmp ne i32 %and364, 0
  br i1 %tobool365, label %if.then.366, label %if.end.381

if.then.366:                                      ; preds = %land.lhs.true.363
  %210 = load i32, i32* %c3136, align 4
  %and367 = and i32 %210, 254
  %cmp368 = icmp eq i32 %and367, 192
  br i1 %cmp368, label %if.then.370, label %if.else.376

if.then.370:                                      ; preds = %if.then.366
  %211 = load i32, i32* %c3136, align 4
  %and371 = and i32 %211, 1
  %shl372 = shl i32 %and371, 6
  %212 = load i8*, i8** %src, align 8
  %incdec.ptr373 = getelementptr inbounds i8, i8* %212, i32 1
  store i8* %incdec.ptr373, i8** %src, align 8
  %213 = load i8, i8* %212, align 1
  %conv374 = zext i8 %213 to i32
  %or375 = or i32 %shl372, %conv374
  store i32 %or375, i32* %c3136, align 4
  br label %if.end.380

if.else.376:                                      ; preds = %if.then.366
  %214 = load i8*, i8** %src, align 8
  %incdec.ptr377 = getelementptr inbounds i8, i8* %214, i32 -1
  store i8* %incdec.ptr377, i8** %src, align 8
  %215 = load i8*, i8** %src, align 8
  %call378 = call i32 @string_char(i8* %215, i8** %src, i32* null)
  %sub379 = sub nsw i32 0, %call378
  store i32 %sub379, i32* %c3136, align 4
  %216 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %216, i32 3)
  br label %if.end.380

if.end.380:                                       ; preds = %if.else.376, %if.then.370
  br label %if.end.381

if.end.381:                                       ; preds = %if.end.380, %land.lhs.true.363, %if.end.358
  %217 = load i64, i64* %consumed_chars, align 8
  %inc382 = add nsw i64 %217, 1
  store i64 %inc382, i64* %consumed_chars, align 8
  br label %do.end.383

do.end.383:                                       ; preds = %if.end.381
  %218 = load i32, i32* %c3136, align 4
  %cmp384 = icmp slt i32 %218, 0
  br i1 %cmp384, label %if.then.390, label %lor.lhs.false.386

lor.lhs.false.386:                                ; preds = %do.end.383
  %219 = load i32, i32* %c3136, align 4
  %and387 = and i32 %219, 192
  %cmp388 = icmp eq i32 %and387, 128
  br i1 %cmp388, label %if.end.391, label %if.then.390

if.then.390:                                      ; preds = %lor.lhs.false.386, %do.end.383
  br label %invalid_code

if.end.391:                                       ; preds = %lor.lhs.false.386
  %220 = load i32, i32* %c1134, align 4
  %and392 = and i32 %220, 240
  %cmp393 = icmp eq i32 %and392, 224
  br i1 %cmp393, label %if.then.395, label %if.else.413

if.then.395:                                      ; preds = %if.end.391
  %221 = load i32, i32* %c1134, align 4
  %and396 = and i32 %221, 15
  %shl397 = shl i32 %and396, 12
  %222 = load i32, i32* %c2135, align 4
  %and398 = and i32 %222, 63
  %shl399 = shl i32 %and398, 6
  %or400 = or i32 %shl397, %shl399
  %223 = load i32, i32* %c3136, align 4
  %and401 = and i32 %223, 63
  %or402 = or i32 %or400, %and401
  store i32 %or402, i32* %c, align 4
  %224 = load i32, i32* %c, align 4
  %cmp403 = icmp slt i32 %224, 2048
  br i1 %cmp403, label %if.then.411, label %lor.lhs.false.405

lor.lhs.false.405:                                ; preds = %if.then.395
  %225 = load i32, i32* %c, align 4
  %cmp406 = icmp sge i32 %225, 55296
  br i1 %cmp406, label %land.lhs.true.408, label %if.end.412

land.lhs.true.408:                                ; preds = %lor.lhs.false.405
  %226 = load i32, i32* %c, align 4
  %cmp409 = icmp slt i32 %226, 57344
  br i1 %cmp409, label %if.then.411, label %if.end.412

if.then.411:                                      ; preds = %land.lhs.true.408, %if.then.395
  br label %invalid_code

if.end.412:                                       ; preds = %land.lhs.true.408, %lor.lhs.false.405
  br label %if.end.544

if.else.413:                                      ; preds = %if.end.391
  br label %do.body.414

do.body.414:                                      ; preds = %if.else.413
  %227 = load i8*, i8** %src, align 8
  %228 = load i8*, i8** %src_end, align 8
  %cmp415 = icmp eq i8* %227, %228
  br i1 %cmp415, label %if.then.417, label %if.end.422

if.then.417:                                      ; preds = %do.body.414
  %229 = load i8*, i8** %src_base, align 8
  %230 = load i8*, i8** %src, align 8
  %cmp418 = icmp ult i8* %229, %230
  br i1 %cmp418, label %if.then.420, label %if.end.421

if.then.420:                                      ; preds = %if.then.417
  %231 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %231, i32 1)
  br label %if.end.421

if.end.421:                                       ; preds = %if.then.420, %if.then.417
  br label %no_more_source

if.end.422:                                       ; preds = %do.body.414
  %232 = load i8*, i8** %src, align 8
  %incdec.ptr423 = getelementptr inbounds i8, i8* %232, i32 1
  store i8* %incdec.ptr423, i8** %src, align 8
  %233 = load i8, i8* %232, align 1
  %conv424 = zext i8 %233 to i32
  store i32 %conv424, i32* %c4, align 4
  %234 = load i8, i8* %multibytep, align 1
  %tobool425 = trunc i8 %234 to i1
  br i1 %tobool425, label %land.lhs.true.427, label %if.end.445

land.lhs.true.427:                                ; preds = %if.end.422
  %235 = load i32, i32* %c4, align 4
  %and428 = and i32 %235, 128
  %tobool429 = icmp ne i32 %and428, 0
  br i1 %tobool429, label %if.then.430, label %if.end.445

if.then.430:                                      ; preds = %land.lhs.true.427
  %236 = load i32, i32* %c4, align 4
  %and431 = and i32 %236, 254
  %cmp432 = icmp eq i32 %and431, 192
  br i1 %cmp432, label %if.then.434, label %if.else.440

if.then.434:                                      ; preds = %if.then.430
  %237 = load i32, i32* %c4, align 4
  %and435 = and i32 %237, 1
  %shl436 = shl i32 %and435, 6
  %238 = load i8*, i8** %src, align 8
  %incdec.ptr437 = getelementptr inbounds i8, i8* %238, i32 1
  store i8* %incdec.ptr437, i8** %src, align 8
  %239 = load i8, i8* %238, align 1
  %conv438 = zext i8 %239 to i32
  %or439 = or i32 %shl436, %conv438
  store i32 %or439, i32* %c4, align 4
  br label %if.end.444

if.else.440:                                      ; preds = %if.then.430
  %240 = load i8*, i8** %src, align 8
  %incdec.ptr441 = getelementptr inbounds i8, i8* %240, i32 -1
  store i8* %incdec.ptr441, i8** %src, align 8
  %241 = load i8*, i8** %src, align 8
  %call442 = call i32 @string_char(i8* %241, i8** %src, i32* null)
  %sub443 = sub nsw i32 0, %call442
  store i32 %sub443, i32* %c4, align 4
  %242 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %242, i32 3)
  br label %if.end.444

if.end.444:                                       ; preds = %if.else.440, %if.then.434
  br label %if.end.445

if.end.445:                                       ; preds = %if.end.444, %land.lhs.true.427, %if.end.422
  %243 = load i64, i64* %consumed_chars, align 8
  %inc446 = add nsw i64 %243, 1
  store i64 %inc446, i64* %consumed_chars, align 8
  br label %do.end.447

do.end.447:                                       ; preds = %if.end.445
  %244 = load i32, i32* %c4, align 4
  %cmp448 = icmp slt i32 %244, 0
  br i1 %cmp448, label %if.then.454, label %lor.lhs.false.450

lor.lhs.false.450:                                ; preds = %do.end.447
  %245 = load i32, i32* %c4, align 4
  %and451 = and i32 %245, 192
  %cmp452 = icmp eq i32 %and451, 128
  br i1 %cmp452, label %if.end.455, label %if.then.454

if.then.454:                                      ; preds = %lor.lhs.false.450, %do.end.447
  br label %invalid_code

if.end.455:                                       ; preds = %lor.lhs.false.450
  %246 = load i32, i32* %c1134, align 4
  %and456 = and i32 %246, 248
  %cmp457 = icmp eq i32 %and456, 240
  br i1 %cmp457, label %if.then.459, label %if.else.474

if.then.459:                                      ; preds = %if.end.455
  %247 = load i32, i32* %c1134, align 4
  %and460 = and i32 %247, 7
  %shl461 = shl i32 %and460, 18
  %248 = load i32, i32* %c2135, align 4
  %and462 = and i32 %248, 63
  %shl463 = shl i32 %and462, 12
  %or464 = or i32 %shl461, %shl463
  %249 = load i32, i32* %c3136, align 4
  %and465 = and i32 %249, 63
  %shl466 = shl i32 %and465, 6
  %or467 = or i32 %or464, %shl466
  %250 = load i32, i32* %c4, align 4
  %and468 = and i32 %250, 63
  %or469 = or i32 %or467, %and468
  store i32 %or469, i32* %c, align 4
  %251 = load i32, i32* %c, align 4
  %cmp470 = icmp slt i32 %251, 65536
  br i1 %cmp470, label %if.then.472, label %if.end.473

if.then.472:                                      ; preds = %if.then.459
  br label %invalid_code

if.end.473:                                       ; preds = %if.then.459
  br label %if.end.543

if.else.474:                                      ; preds = %if.end.455
  br label %do.body.475

do.body.475:                                      ; preds = %if.else.474
  %252 = load i8*, i8** %src, align 8
  %253 = load i8*, i8** %src_end, align 8
  %cmp476 = icmp eq i8* %252, %253
  br i1 %cmp476, label %if.then.478, label %if.end.483

if.then.478:                                      ; preds = %do.body.475
  %254 = load i8*, i8** %src_base, align 8
  %255 = load i8*, i8** %src, align 8
  %cmp479 = icmp ult i8* %254, %255
  br i1 %cmp479, label %if.then.481, label %if.end.482

if.then.481:                                      ; preds = %if.then.478
  %256 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %256, i32 1)
  br label %if.end.482

if.end.482:                                       ; preds = %if.then.481, %if.then.478
  br label %no_more_source

if.end.483:                                       ; preds = %do.body.475
  %257 = load i8*, i8** %src, align 8
  %incdec.ptr484 = getelementptr inbounds i8, i8* %257, i32 1
  store i8* %incdec.ptr484, i8** %src, align 8
  %258 = load i8, i8* %257, align 1
  %conv485 = zext i8 %258 to i32
  store i32 %conv485, i32* %c5, align 4
  %259 = load i8, i8* %multibytep, align 1
  %tobool486 = trunc i8 %259 to i1
  br i1 %tobool486, label %land.lhs.true.488, label %if.end.506

land.lhs.true.488:                                ; preds = %if.end.483
  %260 = load i32, i32* %c5, align 4
  %and489 = and i32 %260, 128
  %tobool490 = icmp ne i32 %and489, 0
  br i1 %tobool490, label %if.then.491, label %if.end.506

if.then.491:                                      ; preds = %land.lhs.true.488
  %261 = load i32, i32* %c5, align 4
  %and492 = and i32 %261, 254
  %cmp493 = icmp eq i32 %and492, 192
  br i1 %cmp493, label %if.then.495, label %if.else.501

if.then.495:                                      ; preds = %if.then.491
  %262 = load i32, i32* %c5, align 4
  %and496 = and i32 %262, 1
  %shl497 = shl i32 %and496, 6
  %263 = load i8*, i8** %src, align 8
  %incdec.ptr498 = getelementptr inbounds i8, i8* %263, i32 1
  store i8* %incdec.ptr498, i8** %src, align 8
  %264 = load i8, i8* %263, align 1
  %conv499 = zext i8 %264 to i32
  %or500 = or i32 %shl497, %conv499
  store i32 %or500, i32* %c5, align 4
  br label %if.end.505

if.else.501:                                      ; preds = %if.then.491
  %265 = load i8*, i8** %src, align 8
  %incdec.ptr502 = getelementptr inbounds i8, i8* %265, i32 -1
  store i8* %incdec.ptr502, i8** %src, align 8
  %266 = load i8*, i8** %src, align 8
  %call503 = call i32 @string_char(i8* %266, i8** %src, i32* null)
  %sub504 = sub nsw i32 0, %call503
  store i32 %sub504, i32* %c5, align 4
  %267 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %267, i32 3)
  br label %if.end.505

if.end.505:                                       ; preds = %if.else.501, %if.then.495
  br label %if.end.506

if.end.506:                                       ; preds = %if.end.505, %land.lhs.true.488, %if.end.483
  %268 = load i64, i64* %consumed_chars, align 8
  %inc507 = add nsw i64 %268, 1
  store i64 %inc507, i64* %consumed_chars, align 8
  br label %do.end.508

do.end.508:                                       ; preds = %if.end.506
  %269 = load i32, i32* %c5, align 4
  %cmp509 = icmp slt i32 %269, 0
  br i1 %cmp509, label %if.then.515, label %lor.lhs.false.511

lor.lhs.false.511:                                ; preds = %do.end.508
  %270 = load i32, i32* %c5, align 4
  %and512 = and i32 %270, 192
  %cmp513 = icmp eq i32 %and512, 128
  br i1 %cmp513, label %if.end.516, label %if.then.515

if.then.515:                                      ; preds = %lor.lhs.false.511, %do.end.508
  br label %invalid_code

if.end.516:                                       ; preds = %lor.lhs.false.511
  %271 = load i32, i32* %c1134, align 4
  %and517 = and i32 %271, 252
  %cmp518 = icmp eq i32 %and517, 248
  br i1 %cmp518, label %if.then.520, label %if.else.541

if.then.520:                                      ; preds = %if.end.516
  %272 = load i32, i32* %c1134, align 4
  %and521 = and i32 %272, 3
  %shl522 = shl i32 %and521, 24
  %273 = load i32, i32* %c2135, align 4
  %and523 = and i32 %273, 63
  %shl524 = shl i32 %and523, 18
  %or525 = or i32 %shl522, %shl524
  %274 = load i32, i32* %c3136, align 4
  %and526 = and i32 %274, 63
  %shl527 = shl i32 %and526, 12
  %or528 = or i32 %or525, %shl527
  %275 = load i32, i32* %c4, align 4
  %and529 = and i32 %275, 63
  %shl530 = shl i32 %and529, 6
  %or531 = or i32 %or528, %shl530
  %276 = load i32, i32* %c5, align 4
  %and532 = and i32 %276, 63
  %or533 = or i32 %or531, %and532
  store i32 %or533, i32* %c, align 4
  %277 = load i32, i32* %c, align 4
  %cmp534 = icmp sgt i32 %277, 4194303
  br i1 %cmp534, label %if.then.539, label %lor.lhs.false.536

lor.lhs.false.536:                                ; preds = %if.then.520
  %278 = load i32, i32* %c, align 4
  %cmp537 = icmp slt i32 %278, 2097152
  br i1 %cmp537, label %if.then.539, label %if.end.540

if.then.539:                                      ; preds = %lor.lhs.false.536, %if.then.520
  br label %invalid_code

if.end.540:                                       ; preds = %lor.lhs.false.536
  br label %if.end.542

if.else.541:                                      ; preds = %if.end.516
  br label %invalid_code

if.end.542:                                       ; preds = %if.end.540
  br label %if.end.543

if.end.543:                                       ; preds = %if.end.542, %if.end.473
  br label %if.end.544

if.end.544:                                       ; preds = %if.end.543, %if.end.412
  br label %if.end.545

if.end.545:                                       ; preds = %if.end.544, %if.end.348
  br label %if.end.546

if.end.546:                                       ; preds = %if.end.545, %if.end.293
  br label %if.end.547

if.end.547:                                       ; preds = %if.end.546, %if.then.247
  %279 = load i32, i32* %c, align 4
  %280 = load i32*, i32** %charbuf, align 8
  %incdec.ptr548 = getelementptr inbounds i32, i32* %280, i32 1
  store i32* %incdec.ptr548, i32** %charbuf, align 8
  store i32 %279, i32* %280, align 4
  br label %while.body

invalid_code:                                     ; preds = %if.else.541, %if.then.539, %if.then.515, %if.then.472, %if.then.454, %if.then.411, %if.then.390, %if.then.347, %if.then.335
  %281 = load i8*, i8** %src_base, align 8
  store i8* %281, i8** %src, align 8
  %282 = load i64, i64* %consumed_chars_base, align 8
  store i64 %282, i64* %consumed_chars, align 8
  br label %do.body.549

do.body.549:                                      ; preds = %invalid_code
  %283 = load i8*, i8** %src, align 8
  %284 = load i8*, i8** %src_end, align 8
  %cmp550 = icmp eq i8* %283, %284
  br i1 %cmp550, label %if.then.552, label %if.end.557

if.then.552:                                      ; preds = %do.body.549
  %285 = load i8*, i8** %src_base, align 8
  %286 = load i8*, i8** %src, align 8
  %cmp553 = icmp ult i8* %285, %286
  br i1 %cmp553, label %if.then.555, label %if.end.556

if.then.555:                                      ; preds = %if.then.552
  %287 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %287, i32 1)
  br label %if.end.556

if.end.556:                                       ; preds = %if.then.555, %if.then.552
  br label %no_more_source

if.end.557:                                       ; preds = %do.body.549
  %288 = load i8*, i8** %src, align 8
  %incdec.ptr558 = getelementptr inbounds i8, i8* %288, i32 1
  store i8* %incdec.ptr558, i8** %src, align 8
  %289 = load i8, i8* %288, align 1
  %conv559 = zext i8 %289 to i32
  store i32 %conv559, i32* %c, align 4
  %290 = load i8, i8* %multibytep, align 1
  %tobool560 = trunc i8 %290 to i1
  br i1 %tobool560, label %land.lhs.true.562, label %if.end.580

land.lhs.true.562:                                ; preds = %if.end.557
  %291 = load i32, i32* %c, align 4
  %and563 = and i32 %291, 128
  %tobool564 = icmp ne i32 %and563, 0
  br i1 %tobool564, label %if.then.565, label %if.end.580

if.then.565:                                      ; preds = %land.lhs.true.562
  %292 = load i32, i32* %c, align 4
  %and566 = and i32 %292, 254
  %cmp567 = icmp eq i32 %and566, 192
  br i1 %cmp567, label %if.then.569, label %if.else.575

if.then.569:                                      ; preds = %if.then.565
  %293 = load i32, i32* %c, align 4
  %and570 = and i32 %293, 1
  %shl571 = shl i32 %and570, 6
  %294 = load i8*, i8** %src, align 8
  %incdec.ptr572 = getelementptr inbounds i8, i8* %294, i32 1
  store i8* %incdec.ptr572, i8** %src, align 8
  %295 = load i8, i8* %294, align 1
  %conv573 = zext i8 %295 to i32
  %or574 = or i32 %shl571, %conv573
  store i32 %or574, i32* %c, align 4
  br label %if.end.579

if.else.575:                                      ; preds = %if.then.565
  %296 = load i8*, i8** %src, align 8
  %incdec.ptr576 = getelementptr inbounds i8, i8* %296, i32 -1
  store i8* %incdec.ptr576, i8** %src, align 8
  %297 = load i8*, i8** %src, align 8
  %call577 = call i32 @string_char(i8* %297, i8** %src, i32* null)
  %sub578 = sub nsw i32 0, %call577
  store i32 %sub578, i32* %c, align 4
  %298 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %298, i32 3)
  br label %if.end.579

if.end.579:                                       ; preds = %if.else.575, %if.then.569
  br label %if.end.580

if.end.580:                                       ; preds = %if.end.579, %land.lhs.true.562, %if.end.557
  %299 = load i64, i64* %consumed_chars, align 8
  %inc581 = add nsw i64 %299, 1
  store i64 %inc581, i64* %consumed_chars, align 8
  br label %do.end.582

do.end.582:                                       ; preds = %if.end.580
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.582
  %300 = load i32, i32* %c, align 4
  %add = add i32 %300, 0
  %cmp583 = icmp ult i32 %add, 128
  br i1 %cmp583, label %cond.true.589, label %cond.false.590

cond.false:                                       ; preds = %do.end.582
  %301 = load i32, i32* %c, align 4
  %conv585 = sext i32 %301 to i64
  %add586 = add i64 %conv585, 0
  %cmp587 = icmp ult i64 %add586, 128
  br i1 %cmp587, label %cond.true.589, label %cond.false.590

cond.true.589:                                    ; preds = %cond.false, %cond.true
  %302 = load i32, i32* %c, align 4
  br label %cond.end

cond.false.590:                                   ; preds = %cond.false, %cond.true
  %303 = load i32, i32* %c, align 4
  %add591 = add nsw i32 %303, 4194048
  br label %cond.end

cond.end:                                         ; preds = %cond.false.590, %cond.true.589
  %cond = phi i32 [ %302, %cond.true.589 ], [ %add591, %cond.false.590 ]
  %304 = load i32*, i32** %charbuf, align 8
  %incdec.ptr592 = getelementptr inbounds i32, i32* %304, i32 1
  store i32* %incdec.ptr592, i32** %charbuf, align 8
  store i32 %cond, i32* %304, align 4
  br label %while.body

while.end.593:                                    ; preds = %if.end.144
  br label %no_more_source

no_more_source:                                   ; preds = %while.end.593, %if.end.556, %if.end.482, %if.end.421, %if.end.357, %if.end.302, %if.end.266, %if.end.217, %if.end.84, %if.end.45, %if.end
  %305 = load i64, i64* %consumed_chars_base, align 8
  %306 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %306, i32 0, i32 11
  %307 = load i64, i64* %consumed_char, align 8
  %add594 = add nsw i64 %307, %305
  store i64 %add594, i64* %consumed_char, align 8
  %308 = load i8*, i8** %src_base, align 8
  %309 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source595 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %309, i32 0, i32 17
  %310 = load i8*, i8** %source595, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %308 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %310 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %311 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed596 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %311, i32 0, i32 10
  store i64 %sub.ptr.sub, i64* %consumed596, align 8
  %312 = load i32*, i32** %charbuf, align 8
  %313 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf597 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %313, i32 0, i32 23
  %314 = load i32*, i32** %charbuf597, align 8
  %sub.ptr.lhs.cast598 = ptrtoint i32* %312 to i64
  %sub.ptr.rhs.cast599 = ptrtoint i32* %314 to i64
  %sub.ptr.sub600 = sub i64 %sub.ptr.lhs.cast598, %sub.ptr.rhs.cast599
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub600, 4
  %conv601 = trunc i64 %sub.ptr.div to i32
  %315 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used602 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %315, i32 0, i32 25
  store i32 %conv601, i32* %charbuf_used602, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_utf_8(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %produced_chars = alloca i64, align 8
  %c = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %ch62 = alloca i32, align 4
  %safe_room = alloca i32, align 4
  %str = alloca [5 x i8], align 1
  %p = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %more_bytes178 = alloca i64, align 8
  %ch202 = alloca i32, align 4
  %ch307 = alloca i32, align 4
  %safe_room364 = alloca i32, align 4
  %more_bytes375 = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load i32*, i32** %charbuf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 25
  %5 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 8
  %9 = load i64, i64* %produced, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %dst, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 22
  %11 = load i8*, i8** %destination3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 20
  %13 = load i64, i64* %dst_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %dst_end, align 8
  store i64 0, i64* %produced_chars, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 3
  %utf_8_bom = bitcast %union.anon* %spec to i32*
  %15 = load i32, i32* %utf_8_bom, align 4
  %cmp = icmp eq i32 %15, 2
  br i1 %cmp, label %if.then, label %if.end.167

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %16 = load i8*, i8** %dst, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 3
  %17 = load i8*, i8** %dst_end, align 8
  %cmp6 = icmp uge i8* %add.ptr5, %17
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %do.body
  %18 = load i32*, i32** %charbuf_end, align 8
  %19 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %add = add nsw i64 %sub.ptr.div, 3
  store i64 %add, i64* %more_bytes, align 8
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %21 = load i64, i64* %more_bytes, align 8
  %22 = load i8*, i8** %dst, align 8
  %call = call i8* @alloc_destination(%struct.coding_system* %20, i64 %21, i8* %22)
  store i8* %call, i8** %dst, align 8
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination8 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 22
  %24 = load i8*, i8** %destination8, align 8
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes9 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %25, i32 0, i32 20
  %26 = load i64, i64* %dst_bytes9, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %24, i64 %26
  store i8* %add.ptr10, i8** %dst_end, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  br label %do.body.12

do.body.12:                                       ; preds = %do.body.11
  %27 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %27, 1
  store i64 %inc, i64* %produced_chars, align 8
  %28 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %28 to i1
  br i1 %tobool, label %if.then.13, label %if.else.54

if.then.13:                                       ; preds = %do.body.12
  store i32 239, i32* %ch, align 4
  %29 = load i32, i32* %ch, align 4
  %cmp14 = icmp uge i32 %29, 128
  br i1 %cmp14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %if.then.13
  %30 = load i32, i32* %ch, align 4
  %add16 = add i32 %30, 4194048
  store i32 %add16, i32* %ch, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.15, %if.then.13
  br label %do.body.18

do.body.18:                                       ; preds = %if.end.17
  %31 = load i32, i32* %ch, align 4
  %cmp19 = icmp ule i32 %31, 127
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body.18
  %32 = load i32, i32* %ch, align 4
  %conv = trunc i32 %32 to i8
  %33 = load i8*, i8** %dst, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr, i8** %dst, align 8
  store i8 %conv, i8* %33, align 1
  br label %if.end.52

if.else:                                          ; preds = %do.body.18
  %34 = load i32, i32* %ch, align 4
  %cmp21 = icmp ule i32 %34, 2047
  br i1 %cmp21, label %if.then.23, label %if.else.29

if.then.23:                                       ; preds = %if.else
  %35 = load i32, i32* %ch, align 4
  %shr = lshr i32 %35, 6
  %or = or i32 192, %shr
  %conv24 = trunc i32 %or to i8
  %36 = load i8*, i8** %dst, align 8
  %incdec.ptr25 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr25, i8** %dst, align 8
  store i8 %conv24, i8* %36, align 1
  %37 = load i32, i32* %ch, align 4
  %and = and i32 %37, 63
  %or26 = or i32 128, %and
  %conv27 = trunc i32 %or26 to i8
  %38 = load i8*, i8** %dst, align 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr28, i8** %dst, align 8
  store i8 %conv27, i8* %38, align 1
  br label %if.end.51

if.else.29:                                       ; preds = %if.else
  %39 = load i32, i32* %ch, align 4
  %cmp30 = icmp ule i32 %39, 65535
  br i1 %cmp30, label %if.then.32, label %if.else.46

if.then.32:                                       ; preds = %if.else.29
  %40 = load i32, i32* %ch, align 4
  %shr33 = lshr i32 %40, 12
  %or34 = or i32 224, %shr33
  %conv35 = trunc i32 %or34 to i8
  %41 = load i8*, i8** %dst, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr36, i8** %dst, align 8
  store i8 %conv35, i8* %41, align 1
  %42 = load i32, i32* %ch, align 4
  %shr37 = lshr i32 %42, 6
  %and38 = and i32 %shr37, 63
  %or39 = or i32 128, %and38
  %conv40 = trunc i32 %or39 to i8
  %43 = load i8*, i8** %dst, align 8
  %incdec.ptr41 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr41, i8** %dst, align 8
  store i8 %conv40, i8* %43, align 1
  %44 = load i32, i32* %ch, align 4
  %and42 = and i32 %44, 63
  %or43 = or i32 128, %and42
  %conv44 = trunc i32 %or43 to i8
  %45 = load i8*, i8** %dst, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr45, i8** %dst, align 8
  store i8 %conv44, i8* %45, align 1
  br label %if.end.50

if.else.46:                                       ; preds = %if.else.29
  %46 = load i32, i32* %ch, align 4
  %47 = load i8*, i8** %dst, align 8
  %call47 = call i32 @char_string(i32 %46, i8* %47)
  %48 = load i8*, i8** %dst, align 8
  %idx.ext48 = sext i32 %call47 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %48, i64 %idx.ext48
  store i8* %add.ptr49, i8** %dst, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.46, %if.then.32
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.23
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.then.20
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  br label %if.end.56

if.else.54:                                       ; preds = %do.body.12
  %49 = load i8*, i8** %dst, align 8
  %incdec.ptr55 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr55, i8** %dst, align 8
  store i8 -17, i8* %49, align 1
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.54, %do.end.53
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  br label %do.body.58

do.body.58:                                       ; preds = %do.end.57
  %50 = load i64, i64* %produced_chars, align 8
  %add59 = add nsw i64 %50, 2
  store i64 %add59, i64* %produced_chars, align 8
  %51 = load i8, i8* %multibytep, align 1
  %tobool60 = trunc i8 %51 to i1
  br i1 %tobool60, label %if.then.61, label %if.else.159

if.then.61:                                       ; preds = %do.body.58
  store i32 187, i32* %ch62, align 4
  %52 = load i32, i32* %ch62, align 4
  %cmp63 = icmp uge i32 %52, 128
  br i1 %cmp63, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %if.then.61
  %53 = load i32, i32* %ch62, align 4
  %add66 = add i32 %53, 4194048
  store i32 %add66, i32* %ch62, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %if.then.61
  br label %do.body.68

do.body.68:                                       ; preds = %if.end.67
  %54 = load i32, i32* %ch62, align 4
  %cmp69 = icmp ule i32 %54, 127
  br i1 %cmp69, label %if.then.71, label %if.else.74

if.then.71:                                       ; preds = %do.body.68
  %55 = load i32, i32* %ch62, align 4
  %conv72 = trunc i32 %55 to i8
  %56 = load i8*, i8** %dst, align 8
  %incdec.ptr73 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr73, i8** %dst, align 8
  store i8 %conv72, i8* %56, align 1
  br label %if.end.109

if.else.74:                                       ; preds = %do.body.68
  %57 = load i32, i32* %ch62, align 4
  %cmp75 = icmp ule i32 %57, 2047
  br i1 %cmp75, label %if.then.77, label %if.else.86

if.then.77:                                       ; preds = %if.else.74
  %58 = load i32, i32* %ch62, align 4
  %shr78 = lshr i32 %58, 6
  %or79 = or i32 192, %shr78
  %conv80 = trunc i32 %or79 to i8
  %59 = load i8*, i8** %dst, align 8
  %incdec.ptr81 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr81, i8** %dst, align 8
  store i8 %conv80, i8* %59, align 1
  %60 = load i32, i32* %ch62, align 4
  %and82 = and i32 %60, 63
  %or83 = or i32 128, %and82
  %conv84 = trunc i32 %or83 to i8
  %61 = load i8*, i8** %dst, align 8
  %incdec.ptr85 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr85, i8** %dst, align 8
  store i8 %conv84, i8* %61, align 1
  br label %if.end.108

if.else.86:                                       ; preds = %if.else.74
  %62 = load i32, i32* %ch62, align 4
  %cmp87 = icmp ule i32 %62, 65535
  br i1 %cmp87, label %if.then.89, label %if.else.103

if.then.89:                                       ; preds = %if.else.86
  %63 = load i32, i32* %ch62, align 4
  %shr90 = lshr i32 %63, 12
  %or91 = or i32 224, %shr90
  %conv92 = trunc i32 %or91 to i8
  %64 = load i8*, i8** %dst, align 8
  %incdec.ptr93 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr93, i8** %dst, align 8
  store i8 %conv92, i8* %64, align 1
  %65 = load i32, i32* %ch62, align 4
  %shr94 = lshr i32 %65, 6
  %and95 = and i32 %shr94, 63
  %or96 = or i32 128, %and95
  %conv97 = trunc i32 %or96 to i8
  %66 = load i8*, i8** %dst, align 8
  %incdec.ptr98 = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %incdec.ptr98, i8** %dst, align 8
  store i8 %conv97, i8* %66, align 1
  %67 = load i32, i32* %ch62, align 4
  %and99 = and i32 %67, 63
  %or100 = or i32 128, %and99
  %conv101 = trunc i32 %or100 to i8
  %68 = load i8*, i8** %dst, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %incdec.ptr102, i8** %dst, align 8
  store i8 %conv101, i8* %68, align 1
  br label %if.end.107

if.else.103:                                      ; preds = %if.else.86
  %69 = load i32, i32* %ch62, align 4
  %70 = load i8*, i8** %dst, align 8
  %call104 = call i32 @char_string(i32 %69, i8* %70)
  %71 = load i8*, i8** %dst, align 8
  %idx.ext105 = sext i32 %call104 to i64
  %add.ptr106 = getelementptr inbounds i8, i8* %71, i64 %idx.ext105
  store i8* %add.ptr106, i8** %dst, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.103, %if.then.89
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.then.77
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %if.then.71
  br label %do.end.110

do.end.110:                                       ; preds = %if.end.109
  store i32 191, i32* %ch62, align 4
  %72 = load i32, i32* %ch62, align 4
  %cmp111 = icmp uge i32 %72, 128
  br i1 %cmp111, label %if.then.113, label %if.end.115

if.then.113:                                      ; preds = %do.end.110
  %73 = load i32, i32* %ch62, align 4
  %add114 = add i32 %73, 4194048
  store i32 %add114, i32* %ch62, align 4
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.113, %do.end.110
  br label %do.body.116

do.body.116:                                      ; preds = %if.end.115
  %74 = load i32, i32* %ch62, align 4
  %cmp117 = icmp ule i32 %74, 127
  br i1 %cmp117, label %if.then.119, label %if.else.122

if.then.119:                                      ; preds = %do.body.116
  %75 = load i32, i32* %ch62, align 4
  %conv120 = trunc i32 %75 to i8
  %76 = load i8*, i8** %dst, align 8
  %incdec.ptr121 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %incdec.ptr121, i8** %dst, align 8
  store i8 %conv120, i8* %76, align 1
  br label %if.end.157

if.else.122:                                      ; preds = %do.body.116
  %77 = load i32, i32* %ch62, align 4
  %cmp123 = icmp ule i32 %77, 2047
  br i1 %cmp123, label %if.then.125, label %if.else.134

if.then.125:                                      ; preds = %if.else.122
  %78 = load i32, i32* %ch62, align 4
  %shr126 = lshr i32 %78, 6
  %or127 = or i32 192, %shr126
  %conv128 = trunc i32 %or127 to i8
  %79 = load i8*, i8** %dst, align 8
  %incdec.ptr129 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr129, i8** %dst, align 8
  store i8 %conv128, i8* %79, align 1
  %80 = load i32, i32* %ch62, align 4
  %and130 = and i32 %80, 63
  %or131 = or i32 128, %and130
  %conv132 = trunc i32 %or131 to i8
  %81 = load i8*, i8** %dst, align 8
  %incdec.ptr133 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr133, i8** %dst, align 8
  store i8 %conv132, i8* %81, align 1
  br label %if.end.156

if.else.134:                                      ; preds = %if.else.122
  %82 = load i32, i32* %ch62, align 4
  %cmp135 = icmp ule i32 %82, 65535
  br i1 %cmp135, label %if.then.137, label %if.else.151

if.then.137:                                      ; preds = %if.else.134
  %83 = load i32, i32* %ch62, align 4
  %shr138 = lshr i32 %83, 12
  %or139 = or i32 224, %shr138
  %conv140 = trunc i32 %or139 to i8
  %84 = load i8*, i8** %dst, align 8
  %incdec.ptr141 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %incdec.ptr141, i8** %dst, align 8
  store i8 %conv140, i8* %84, align 1
  %85 = load i32, i32* %ch62, align 4
  %shr142 = lshr i32 %85, 6
  %and143 = and i32 %shr142, 63
  %or144 = or i32 128, %and143
  %conv145 = trunc i32 %or144 to i8
  %86 = load i8*, i8** %dst, align 8
  %incdec.ptr146 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %incdec.ptr146, i8** %dst, align 8
  store i8 %conv145, i8* %86, align 1
  %87 = load i32, i32* %ch62, align 4
  %and147 = and i32 %87, 63
  %or148 = or i32 128, %and147
  %conv149 = trunc i32 %or148 to i8
  %88 = load i8*, i8** %dst, align 8
  %incdec.ptr150 = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %incdec.ptr150, i8** %dst, align 8
  store i8 %conv149, i8* %88, align 1
  br label %if.end.155

if.else.151:                                      ; preds = %if.else.134
  %89 = load i32, i32* %ch62, align 4
  %90 = load i8*, i8** %dst, align 8
  %call152 = call i32 @char_string(i32 %89, i8* %90)
  %91 = load i8*, i8** %dst, align 8
  %idx.ext153 = sext i32 %call152 to i64
  %add.ptr154 = getelementptr inbounds i8, i8* %91, i64 %idx.ext153
  store i8* %add.ptr154, i8** %dst, align 8
  br label %if.end.155

if.end.155:                                       ; preds = %if.else.151, %if.then.137
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155, %if.then.125
  br label %if.end.157

if.end.157:                                       ; preds = %if.end.156, %if.then.119
  br label %do.end.158

do.end.158:                                       ; preds = %if.end.157
  br label %if.end.162

if.else.159:                                      ; preds = %do.body.58
  %92 = load i8*, i8** %dst, align 8
  %incdec.ptr160 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr160, i8** %dst, align 8
  store i8 -69, i8* %92, align 1
  %93 = load i8*, i8** %dst, align 8
  %incdec.ptr161 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %incdec.ptr161, i8** %dst, align 8
  store i8 -65, i8* %93, align 1
  br label %if.end.162

if.end.162:                                       ; preds = %if.else.159, %do.end.158
  br label %do.end.163

do.end.163:                                       ; preds = %if.end.162
  br label %do.end.164

do.end.164:                                       ; preds = %do.end.163
  %94 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec165 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %94, i32 0, i32 3
  %utf_8_bom166 = bitcast %union.anon* %spec165 to i32*
  store i32 1, i32* %utf_8_bom166, align 4
  br label %if.end.167

if.end.167:                                       ; preds = %do.end.164, %entry
  %95 = load i8, i8* %multibytep, align 1
  %tobool168 = trunc i8 %95 to i1
  br i1 %tobool168, label %if.then.169, label %if.else.363

if.then.169:                                      ; preds = %if.end.167
  store i32 10, i32* %safe_room, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.362, %if.then.169
  %96 = load i32*, i32** %charbuf, align 8
  %97 = load i32*, i32** %charbuf_end, align 8
  %cmp170 = icmp ult i32* %96, %97
  br i1 %cmp170, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %str, i32 0, i32 0
  store i8* %arraydecay, i8** %pend, align 8
  br label %do.body.172

do.body.172:                                      ; preds = %while.body
  %98 = load i8*, i8** %dst, align 8
  %99 = load i32, i32* %safe_room, align 4
  %idx.ext173 = sext i32 %99 to i64
  %add.ptr174 = getelementptr inbounds i8, i8* %98, i64 %idx.ext173
  %100 = load i8*, i8** %dst_end, align 8
  %cmp175 = icmp uge i8* %add.ptr174, %100
  br i1 %cmp175, label %if.then.177, label %if.end.189

if.then.177:                                      ; preds = %do.body.172
  %101 = load i32*, i32** %charbuf_end, align 8
  %102 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast179 = ptrtoint i32* %101 to i64
  %sub.ptr.rhs.cast180 = ptrtoint i32* %102 to i64
  %sub.ptr.sub181 = sub i64 %sub.ptr.lhs.cast179, %sub.ptr.rhs.cast180
  %sub.ptr.div182 = sdiv exact i64 %sub.ptr.sub181, 4
  %103 = load i32, i32* %safe_room, align 4
  %conv183 = sext i32 %103 to i64
  %add184 = add nsw i64 %sub.ptr.div182, %conv183
  store i64 %add184, i64* %more_bytes178, align 8
  %104 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %105 = load i64, i64* %more_bytes178, align 8
  %106 = load i8*, i8** %dst, align 8
  %call185 = call i8* @alloc_destination(%struct.coding_system* %104, i64 %105, i8* %106)
  store i8* %call185, i8** %dst, align 8
  %107 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination186 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %107, i32 0, i32 22
  %108 = load i8*, i8** %destination186, align 8
  %109 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes187 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %109, i32 0, i32 20
  %110 = load i64, i64* %dst_bytes187, align 8
  %add.ptr188 = getelementptr inbounds i8, i8* %108, i64 %110
  store i8* %add.ptr188, i8** %dst_end, align 8
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.177, %do.body.172
  br label %do.end.190

do.end.190:                                       ; preds = %if.end.189
  %111 = load i32*, i32** %charbuf, align 8
  %incdec.ptr191 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %incdec.ptr191, i32** %charbuf, align 8
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %c, align 4
  %113 = load i32, i32* %c, align 4
  %cmp192 = icmp sgt i32 %113, 4194175
  br i1 %cmp192, label %if.then.194, label %if.else.256

if.then.194:                                      ; preds = %do.end.190
  %114 = load i32, i32* %c, align 4
  %cmp195 = icmp sgt i32 %114, 4194175
  br i1 %cmp195, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.194
  %115 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %115, 4194048
  br label %cond.end

cond.false:                                       ; preds = %if.then.194
  %116 = load i32, i32* %c, align 4
  %and197 = and i32 %116, 255
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %and197, %cond.false ]
  store i32 %cond, i32* %c, align 4
  br label %do.body.198

do.body.198:                                      ; preds = %cond.end
  %117 = load i64, i64* %produced_chars, align 8
  %inc199 = add nsw i64 %117, 1
  store i64 %inc199, i64* %produced_chars, align 8
  %118 = load i8, i8* %multibytep, align 1
  %tobool200 = trunc i8 %118 to i1
  br i1 %tobool200, label %if.then.201, label %if.else.251

if.then.201:                                      ; preds = %do.body.198
  %119 = load i32, i32* %c, align 4
  store i32 %119, i32* %ch202, align 4
  %120 = load i32, i32* %ch202, align 4
  %cmp203 = icmp uge i32 %120, 128
  br i1 %cmp203, label %if.then.205, label %if.end.207

if.then.205:                                      ; preds = %if.then.201
  %121 = load i32, i32* %ch202, align 4
  %add206 = add i32 %121, 4194048
  store i32 %add206, i32* %ch202, align 4
  br label %if.end.207

if.end.207:                                       ; preds = %if.then.205, %if.then.201
  br label %do.body.208

do.body.208:                                      ; preds = %if.end.207
  %122 = load i32, i32* %ch202, align 4
  %cmp209 = icmp ule i32 %122, 127
  br i1 %cmp209, label %if.then.211, label %if.else.214

if.then.211:                                      ; preds = %do.body.208
  %123 = load i32, i32* %ch202, align 4
  %conv212 = trunc i32 %123 to i8
  %124 = load i8*, i8** %dst, align 8
  %incdec.ptr213 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr213, i8** %dst, align 8
  store i8 %conv212, i8* %124, align 1
  br label %if.end.249

if.else.214:                                      ; preds = %do.body.208
  %125 = load i32, i32* %ch202, align 4
  %cmp215 = icmp ule i32 %125, 2047
  br i1 %cmp215, label %if.then.217, label %if.else.226

if.then.217:                                      ; preds = %if.else.214
  %126 = load i32, i32* %ch202, align 4
  %shr218 = lshr i32 %126, 6
  %or219 = or i32 192, %shr218
  %conv220 = trunc i32 %or219 to i8
  %127 = load i8*, i8** %dst, align 8
  %incdec.ptr221 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %incdec.ptr221, i8** %dst, align 8
  store i8 %conv220, i8* %127, align 1
  %128 = load i32, i32* %ch202, align 4
  %and222 = and i32 %128, 63
  %or223 = or i32 128, %and222
  %conv224 = trunc i32 %or223 to i8
  %129 = load i8*, i8** %dst, align 8
  %incdec.ptr225 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %incdec.ptr225, i8** %dst, align 8
  store i8 %conv224, i8* %129, align 1
  br label %if.end.248

if.else.226:                                      ; preds = %if.else.214
  %130 = load i32, i32* %ch202, align 4
  %cmp227 = icmp ule i32 %130, 65535
  br i1 %cmp227, label %if.then.229, label %if.else.243

if.then.229:                                      ; preds = %if.else.226
  %131 = load i32, i32* %ch202, align 4
  %shr230 = lshr i32 %131, 12
  %or231 = or i32 224, %shr230
  %conv232 = trunc i32 %or231 to i8
  %132 = load i8*, i8** %dst, align 8
  %incdec.ptr233 = getelementptr inbounds i8, i8* %132, i32 1
  store i8* %incdec.ptr233, i8** %dst, align 8
  store i8 %conv232, i8* %132, align 1
  %133 = load i32, i32* %ch202, align 4
  %shr234 = lshr i32 %133, 6
  %and235 = and i32 %shr234, 63
  %or236 = or i32 128, %and235
  %conv237 = trunc i32 %or236 to i8
  %134 = load i8*, i8** %dst, align 8
  %incdec.ptr238 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr238, i8** %dst, align 8
  store i8 %conv237, i8* %134, align 1
  %135 = load i32, i32* %ch202, align 4
  %and239 = and i32 %135, 63
  %or240 = or i32 128, %and239
  %conv241 = trunc i32 %or240 to i8
  %136 = load i8*, i8** %dst, align 8
  %incdec.ptr242 = getelementptr inbounds i8, i8* %136, i32 1
  store i8* %incdec.ptr242, i8** %dst, align 8
  store i8 %conv241, i8* %136, align 1
  br label %if.end.247

if.else.243:                                      ; preds = %if.else.226
  %137 = load i32, i32* %ch202, align 4
  %138 = load i8*, i8** %dst, align 8
  %call244 = call i32 @char_string(i32 %137, i8* %138)
  %139 = load i8*, i8** %dst, align 8
  %idx.ext245 = sext i32 %call244 to i64
  %add.ptr246 = getelementptr inbounds i8, i8* %139, i64 %idx.ext245
  store i8* %add.ptr246, i8** %dst, align 8
  br label %if.end.247

if.end.247:                                       ; preds = %if.else.243, %if.then.229
  br label %if.end.248

if.end.248:                                       ; preds = %if.end.247, %if.then.217
  br label %if.end.249

if.end.249:                                       ; preds = %if.end.248, %if.then.211
  br label %do.end.250

do.end.250:                                       ; preds = %if.end.249
  br label %if.end.254

if.else.251:                                      ; preds = %do.body.198
  %140 = load i32, i32* %c, align 4
  %conv252 = trunc i32 %140 to i8
  %141 = load i8*, i8** %dst, align 8
  %incdec.ptr253 = getelementptr inbounds i8, i8* %141, i32 1
  store i8* %incdec.ptr253, i8** %dst, align 8
  store i8 %conv252, i8* %141, align 1
  br label %if.end.254

if.end.254:                                       ; preds = %if.else.251, %do.end.250
  br label %do.end.255

do.end.255:                                       ; preds = %if.end.254
  br label %if.end.362

if.else.256:                                      ; preds = %do.end.190
  br label %do.body.257

do.body.257:                                      ; preds = %if.else.256
  %142 = load i32, i32* %c, align 4
  %cmp258 = icmp sle i32 %142, 127
  br i1 %cmp258, label %if.then.260, label %if.else.263

if.then.260:                                      ; preds = %do.body.257
  %143 = load i32, i32* %c, align 4
  %conv261 = trunc i32 %143 to i8
  %144 = load i8*, i8** %pend, align 8
  %incdec.ptr262 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %incdec.ptr262, i8** %pend, align 8
  store i8 %conv261, i8* %144, align 1
  br label %if.end.298

if.else.263:                                      ; preds = %do.body.257
  %145 = load i32, i32* %c, align 4
  %cmp264 = icmp sle i32 %145, 2047
  br i1 %cmp264, label %if.then.266, label %if.else.275

if.then.266:                                      ; preds = %if.else.263
  %146 = load i32, i32* %c, align 4
  %shr267 = ashr i32 %146, 6
  %or268 = or i32 192, %shr267
  %conv269 = trunc i32 %or268 to i8
  %147 = load i8*, i8** %pend, align 8
  %incdec.ptr270 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %incdec.ptr270, i8** %pend, align 8
  store i8 %conv269, i8* %147, align 1
  %148 = load i32, i32* %c, align 4
  %and271 = and i32 %148, 63
  %or272 = or i32 128, %and271
  %conv273 = trunc i32 %or272 to i8
  %149 = load i8*, i8** %pend, align 8
  %incdec.ptr274 = getelementptr inbounds i8, i8* %149, i32 1
  store i8* %incdec.ptr274, i8** %pend, align 8
  store i8 %conv273, i8* %149, align 1
  br label %if.end.297

if.else.275:                                      ; preds = %if.else.263
  %150 = load i32, i32* %c, align 4
  %cmp276 = icmp sle i32 %150, 65535
  br i1 %cmp276, label %if.then.278, label %if.else.292

if.then.278:                                      ; preds = %if.else.275
  %151 = load i32, i32* %c, align 4
  %shr279 = ashr i32 %151, 12
  %or280 = or i32 224, %shr279
  %conv281 = trunc i32 %or280 to i8
  %152 = load i8*, i8** %pend, align 8
  %incdec.ptr282 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %incdec.ptr282, i8** %pend, align 8
  store i8 %conv281, i8* %152, align 1
  %153 = load i32, i32* %c, align 4
  %shr283 = ashr i32 %153, 6
  %and284 = and i32 %shr283, 63
  %or285 = or i32 128, %and284
  %conv286 = trunc i32 %or285 to i8
  %154 = load i8*, i8** %pend, align 8
  %incdec.ptr287 = getelementptr inbounds i8, i8* %154, i32 1
  store i8* %incdec.ptr287, i8** %pend, align 8
  store i8 %conv286, i8* %154, align 1
  %155 = load i32, i32* %c, align 4
  %and288 = and i32 %155, 63
  %or289 = or i32 128, %and288
  %conv290 = trunc i32 %or289 to i8
  %156 = load i8*, i8** %pend, align 8
  %incdec.ptr291 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %incdec.ptr291, i8** %pend, align 8
  store i8 %conv290, i8* %156, align 1
  br label %if.end.296

if.else.292:                                      ; preds = %if.else.275
  %157 = load i32, i32* %c, align 4
  %158 = load i8*, i8** %pend, align 8
  %call293 = call i32 @char_string(i32 %157, i8* %158)
  %159 = load i8*, i8** %pend, align 8
  %idx.ext294 = sext i32 %call293 to i64
  %add.ptr295 = getelementptr inbounds i8, i8* %159, i64 %idx.ext294
  store i8* %add.ptr295, i8** %pend, align 8
  br label %if.end.296

if.end.296:                                       ; preds = %if.else.292, %if.then.278
  br label %if.end.297

if.end.297:                                       ; preds = %if.end.296, %if.then.266
  br label %if.end.298

if.end.298:                                       ; preds = %if.end.297, %if.then.260
  br label %do.end.299

do.end.299:                                       ; preds = %if.end.298
  %arraydecay300 = getelementptr inbounds [5 x i8], [5 x i8]* %str, i32 0, i32 0
  store i8* %arraydecay300, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end.299
  %160 = load i8*, i8** %p, align 8
  %161 = load i8*, i8** %pend, align 8
  %cmp301 = icmp ult i8* %160, %161
  br i1 %cmp301, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body.303

do.body.303:                                      ; preds = %for.body
  %162 = load i64, i64* %produced_chars, align 8
  %inc304 = add nsw i64 %162, 1
  store i64 %inc304, i64* %produced_chars, align 8
  %163 = load i8, i8* %multibytep, align 1
  %tobool305 = trunc i8 %163 to i1
  br i1 %tobool305, label %if.then.306, label %if.else.357

if.then.306:                                      ; preds = %do.body.303
  %164 = load i8*, i8** %p, align 8
  %165 = load i8, i8* %164, align 1
  %conv308 = zext i8 %165 to i32
  store i32 %conv308, i32* %ch307, align 4
  %166 = load i32, i32* %ch307, align 4
  %cmp309 = icmp uge i32 %166, 128
  br i1 %cmp309, label %if.then.311, label %if.end.313

if.then.311:                                      ; preds = %if.then.306
  %167 = load i32, i32* %ch307, align 4
  %add312 = add i32 %167, 4194048
  store i32 %add312, i32* %ch307, align 4
  br label %if.end.313

if.end.313:                                       ; preds = %if.then.311, %if.then.306
  br label %do.body.314

do.body.314:                                      ; preds = %if.end.313
  %168 = load i32, i32* %ch307, align 4
  %cmp315 = icmp ule i32 %168, 127
  br i1 %cmp315, label %if.then.317, label %if.else.320

if.then.317:                                      ; preds = %do.body.314
  %169 = load i32, i32* %ch307, align 4
  %conv318 = trunc i32 %169 to i8
  %170 = load i8*, i8** %dst, align 8
  %incdec.ptr319 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %incdec.ptr319, i8** %dst, align 8
  store i8 %conv318, i8* %170, align 1
  br label %if.end.355

if.else.320:                                      ; preds = %do.body.314
  %171 = load i32, i32* %ch307, align 4
  %cmp321 = icmp ule i32 %171, 2047
  br i1 %cmp321, label %if.then.323, label %if.else.332

if.then.323:                                      ; preds = %if.else.320
  %172 = load i32, i32* %ch307, align 4
  %shr324 = lshr i32 %172, 6
  %or325 = or i32 192, %shr324
  %conv326 = trunc i32 %or325 to i8
  %173 = load i8*, i8** %dst, align 8
  %incdec.ptr327 = getelementptr inbounds i8, i8* %173, i32 1
  store i8* %incdec.ptr327, i8** %dst, align 8
  store i8 %conv326, i8* %173, align 1
  %174 = load i32, i32* %ch307, align 4
  %and328 = and i32 %174, 63
  %or329 = or i32 128, %and328
  %conv330 = trunc i32 %or329 to i8
  %175 = load i8*, i8** %dst, align 8
  %incdec.ptr331 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr331, i8** %dst, align 8
  store i8 %conv330, i8* %175, align 1
  br label %if.end.354

if.else.332:                                      ; preds = %if.else.320
  %176 = load i32, i32* %ch307, align 4
  %cmp333 = icmp ule i32 %176, 65535
  br i1 %cmp333, label %if.then.335, label %if.else.349

if.then.335:                                      ; preds = %if.else.332
  %177 = load i32, i32* %ch307, align 4
  %shr336 = lshr i32 %177, 12
  %or337 = or i32 224, %shr336
  %conv338 = trunc i32 %or337 to i8
  %178 = load i8*, i8** %dst, align 8
  %incdec.ptr339 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %incdec.ptr339, i8** %dst, align 8
  store i8 %conv338, i8* %178, align 1
  %179 = load i32, i32* %ch307, align 4
  %shr340 = lshr i32 %179, 6
  %and341 = and i32 %shr340, 63
  %or342 = or i32 128, %and341
  %conv343 = trunc i32 %or342 to i8
  %180 = load i8*, i8** %dst, align 8
  %incdec.ptr344 = getelementptr inbounds i8, i8* %180, i32 1
  store i8* %incdec.ptr344, i8** %dst, align 8
  store i8 %conv343, i8* %180, align 1
  %181 = load i32, i32* %ch307, align 4
  %and345 = and i32 %181, 63
  %or346 = or i32 128, %and345
  %conv347 = trunc i32 %or346 to i8
  %182 = load i8*, i8** %dst, align 8
  %incdec.ptr348 = getelementptr inbounds i8, i8* %182, i32 1
  store i8* %incdec.ptr348, i8** %dst, align 8
  store i8 %conv347, i8* %182, align 1
  br label %if.end.353

if.else.349:                                      ; preds = %if.else.332
  %183 = load i32, i32* %ch307, align 4
  %184 = load i8*, i8** %dst, align 8
  %call350 = call i32 @char_string(i32 %183, i8* %184)
  %185 = load i8*, i8** %dst, align 8
  %idx.ext351 = sext i32 %call350 to i64
  %add.ptr352 = getelementptr inbounds i8, i8* %185, i64 %idx.ext351
  store i8* %add.ptr352, i8** %dst, align 8
  br label %if.end.353

if.end.353:                                       ; preds = %if.else.349, %if.then.335
  br label %if.end.354

if.end.354:                                       ; preds = %if.end.353, %if.then.323
  br label %if.end.355

if.end.355:                                       ; preds = %if.end.354, %if.then.317
  br label %do.end.356

do.end.356:                                       ; preds = %if.end.355
  br label %if.end.359

if.else.357:                                      ; preds = %do.body.303
  %186 = load i8*, i8** %p, align 8
  %187 = load i8, i8* %186, align 1
  %188 = load i8*, i8** %dst, align 8
  %incdec.ptr358 = getelementptr inbounds i8, i8* %188, i32 1
  store i8* %incdec.ptr358, i8** %dst, align 8
  store i8 %187, i8* %188, align 1
  br label %if.end.359

if.end.359:                                       ; preds = %if.else.357, %do.end.356
  br label %do.end.360

do.end.360:                                       ; preds = %if.end.359
  br label %for.inc

for.inc:                                          ; preds = %do.end.360
  %189 = load i8*, i8** %p, align 8
  %incdec.ptr361 = getelementptr inbounds i8, i8* %189, i32 1
  store i8* %incdec.ptr361, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.362

if.end.362:                                       ; preds = %for.end, %do.end.255
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.454

if.else.363:                                      ; preds = %if.end.167
  store i32 5, i32* %safe_room364, align 4
  br label %while.cond.365

while.cond.365:                                   ; preds = %if.end.446, %if.else.363
  %190 = load i32*, i32** %charbuf, align 8
  %191 = load i32*, i32** %charbuf_end, align 8
  %cmp366 = icmp ult i32* %190, %191
  br i1 %cmp366, label %while.body.368, label %while.end.447

while.body.368:                                   ; preds = %while.cond.365
  br label %do.body.369

do.body.369:                                      ; preds = %while.body.368
  %192 = load i8*, i8** %dst, align 8
  %193 = load i32, i32* %safe_room364, align 4
  %idx.ext370 = sext i32 %193 to i64
  %add.ptr371 = getelementptr inbounds i8, i8* %192, i64 %idx.ext370
  %194 = load i8*, i8** %dst_end, align 8
  %cmp372 = icmp uge i8* %add.ptr371, %194
  br i1 %cmp372, label %if.then.374, label %if.end.386

if.then.374:                                      ; preds = %do.body.369
  %195 = load i32*, i32** %charbuf_end, align 8
  %196 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast376 = ptrtoint i32* %195 to i64
  %sub.ptr.rhs.cast377 = ptrtoint i32* %196 to i64
  %sub.ptr.sub378 = sub i64 %sub.ptr.lhs.cast376, %sub.ptr.rhs.cast377
  %sub.ptr.div379 = sdiv exact i64 %sub.ptr.sub378, 4
  %197 = load i32, i32* %safe_room364, align 4
  %conv380 = sext i32 %197 to i64
  %add381 = add nsw i64 %sub.ptr.div379, %conv380
  store i64 %add381, i64* %more_bytes375, align 8
  %198 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %199 = load i64, i64* %more_bytes375, align 8
  %200 = load i8*, i8** %dst, align 8
  %call382 = call i8* @alloc_destination(%struct.coding_system* %198, i64 %199, i8* %200)
  store i8* %call382, i8** %dst, align 8
  %201 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination383 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %201, i32 0, i32 22
  %202 = load i8*, i8** %destination383, align 8
  %203 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes384 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %203, i32 0, i32 20
  %204 = load i64, i64* %dst_bytes384, align 8
  %add.ptr385 = getelementptr inbounds i8, i8* %202, i64 %204
  store i8* %add.ptr385, i8** %dst_end, align 8
  br label %if.end.386

if.end.386:                                       ; preds = %if.then.374, %do.body.369
  br label %do.end.387

do.end.387:                                       ; preds = %if.end.386
  %205 = load i32*, i32** %charbuf, align 8
  %incdec.ptr388 = getelementptr inbounds i32, i32* %205, i32 1
  store i32* %incdec.ptr388, i32** %charbuf, align 8
  %206 = load i32, i32* %205, align 4
  store i32 %206, i32* %c, align 4
  %207 = load i32, i32* %c, align 4
  %cmp389 = icmp sgt i32 %207, 4194175
  br i1 %cmp389, label %if.then.391, label %if.else.402

if.then.391:                                      ; preds = %do.end.387
  %208 = load i32, i32* %c, align 4
  %cmp392 = icmp sgt i32 %208, 4194175
  br i1 %cmp392, label %cond.true.394, label %cond.false.396

cond.true.394:                                    ; preds = %if.then.391
  %209 = load i32, i32* %c, align 4
  %sub395 = sub nsw i32 %209, 4194048
  br label %cond.end.398

cond.false.396:                                   ; preds = %if.then.391
  %210 = load i32, i32* %c, align 4
  %and397 = and i32 %210, 255
  br label %cond.end.398

cond.end.398:                                     ; preds = %cond.false.396, %cond.true.394
  %cond399 = phi i32 [ %sub395, %cond.true.394 ], [ %and397, %cond.false.396 ]
  %conv400 = trunc i32 %cond399 to i8
  %211 = load i8*, i8** %dst, align 8
  %incdec.ptr401 = getelementptr inbounds i8, i8* %211, i32 1
  store i8* %incdec.ptr401, i8** %dst, align 8
  store i8 %conv400, i8* %211, align 1
  br label %if.end.446

if.else.402:                                      ; preds = %do.end.387
  br label %do.body.403

do.body.403:                                      ; preds = %if.else.402
  %212 = load i32, i32* %c, align 4
  %cmp404 = icmp sle i32 %212, 127
  br i1 %cmp404, label %if.then.406, label %if.else.409

if.then.406:                                      ; preds = %do.body.403
  %213 = load i32, i32* %c, align 4
  %conv407 = trunc i32 %213 to i8
  %214 = load i8*, i8** %dst, align 8
  %incdec.ptr408 = getelementptr inbounds i8, i8* %214, i32 1
  store i8* %incdec.ptr408, i8** %dst, align 8
  store i8 %conv407, i8* %214, align 1
  br label %if.end.444

if.else.409:                                      ; preds = %do.body.403
  %215 = load i32, i32* %c, align 4
  %cmp410 = icmp sle i32 %215, 2047
  br i1 %cmp410, label %if.then.412, label %if.else.421

if.then.412:                                      ; preds = %if.else.409
  %216 = load i32, i32* %c, align 4
  %shr413 = ashr i32 %216, 6
  %or414 = or i32 192, %shr413
  %conv415 = trunc i32 %or414 to i8
  %217 = load i8*, i8** %dst, align 8
  %incdec.ptr416 = getelementptr inbounds i8, i8* %217, i32 1
  store i8* %incdec.ptr416, i8** %dst, align 8
  store i8 %conv415, i8* %217, align 1
  %218 = load i32, i32* %c, align 4
  %and417 = and i32 %218, 63
  %or418 = or i32 128, %and417
  %conv419 = trunc i32 %or418 to i8
  %219 = load i8*, i8** %dst, align 8
  %incdec.ptr420 = getelementptr inbounds i8, i8* %219, i32 1
  store i8* %incdec.ptr420, i8** %dst, align 8
  store i8 %conv419, i8* %219, align 1
  br label %if.end.443

if.else.421:                                      ; preds = %if.else.409
  %220 = load i32, i32* %c, align 4
  %cmp422 = icmp sle i32 %220, 65535
  br i1 %cmp422, label %if.then.424, label %if.else.438

if.then.424:                                      ; preds = %if.else.421
  %221 = load i32, i32* %c, align 4
  %shr425 = ashr i32 %221, 12
  %or426 = or i32 224, %shr425
  %conv427 = trunc i32 %or426 to i8
  %222 = load i8*, i8** %dst, align 8
  %incdec.ptr428 = getelementptr inbounds i8, i8* %222, i32 1
  store i8* %incdec.ptr428, i8** %dst, align 8
  store i8 %conv427, i8* %222, align 1
  %223 = load i32, i32* %c, align 4
  %shr429 = ashr i32 %223, 6
  %and430 = and i32 %shr429, 63
  %or431 = or i32 128, %and430
  %conv432 = trunc i32 %or431 to i8
  %224 = load i8*, i8** %dst, align 8
  %incdec.ptr433 = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %incdec.ptr433, i8** %dst, align 8
  store i8 %conv432, i8* %224, align 1
  %225 = load i32, i32* %c, align 4
  %and434 = and i32 %225, 63
  %or435 = or i32 128, %and434
  %conv436 = trunc i32 %or435 to i8
  %226 = load i8*, i8** %dst, align 8
  %incdec.ptr437 = getelementptr inbounds i8, i8* %226, i32 1
  store i8* %incdec.ptr437, i8** %dst, align 8
  store i8 %conv436, i8* %226, align 1
  br label %if.end.442

if.else.438:                                      ; preds = %if.else.421
  %227 = load i32, i32* %c, align 4
  %228 = load i8*, i8** %dst, align 8
  %call439 = call i32 @char_string(i32 %227, i8* %228)
  %229 = load i8*, i8** %dst, align 8
  %idx.ext440 = sext i32 %call439 to i64
  %add.ptr441 = getelementptr inbounds i8, i8* %229, i64 %idx.ext440
  store i8* %add.ptr441, i8** %dst, align 8
  br label %if.end.442

if.end.442:                                       ; preds = %if.else.438, %if.then.424
  br label %if.end.443

if.end.443:                                       ; preds = %if.end.442, %if.then.412
  br label %if.end.444

if.end.444:                                       ; preds = %if.end.443, %if.then.406
  br label %do.end.445

do.end.445:                                       ; preds = %if.end.444
  br label %if.end.446

if.end.446:                                       ; preds = %do.end.445, %cond.end.398
  br label %while.cond.365

while.end.447:                                    ; preds = %while.cond.365
  %230 = load i8*, i8** %dst, align 8
  %231 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination448 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %231, i32 0, i32 22
  %232 = load i8*, i8** %destination448, align 8
  %233 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced449 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %233, i32 0, i32 8
  %234 = load i64, i64* %produced449, align 8
  %add.ptr450 = getelementptr inbounds i8, i8* %232, i64 %234
  %sub.ptr.lhs.cast451 = ptrtoint i8* %230 to i64
  %sub.ptr.rhs.cast452 = ptrtoint i8* %add.ptr450 to i64
  %sub.ptr.sub453 = sub i64 %sub.ptr.lhs.cast451, %sub.ptr.rhs.cast452
  store i64 %sub.ptr.sub453, i64* %produced_chars, align 8
  br label %if.end.454

if.end.454:                                       ; preds = %while.end.447, %while.end
  %235 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %235, i32 0)
  %236 = load i64, i64* %produced_chars, align 8
  %237 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %237, i32 0, i32 9
  %238 = load i64, i64* %produced_char, align 8
  %add455 = add nsw i64 %238, %236
  store i64 %add455, i64* %produced_char, align 8
  %239 = load i8*, i8** %dst, align 8
  %240 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination456 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %240, i32 0, i32 22
  %241 = load i8*, i8** %destination456, align 8
  %sub.ptr.lhs.cast457 = ptrtoint i8* %239 to i64
  %sub.ptr.rhs.cast458 = ptrtoint i8* %241 to i64
  %sub.ptr.sub459 = sub i64 %sub.ptr.lhs.cast457, %sub.ptr.rhs.cast458
  %242 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced460 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %242, i32 0, i32 8
  store i64 %sub.ptr.sub459, i64* %produced460, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_utf_16(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %e = alloca [256 x i8], align 16
  %o = alloca [256 x i8], align 16
  %e_num = alloca i32, align 4
  %o_num = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 17
  %3 = load i8*, i8** %source1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  %5 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %src_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %7 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %7, i32 0, i32 0
  %8 = load i32, i32* %checked, align 4
  %or = or i32 %8, 15872
  store i32 %or, i32* %checked, align 4
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 1
  %bf.load2 = load i32, i32* %mode, align 8
  %bf.lshr3 = lshr i32 %bf.load2, 14
  %bf.clear4 = and i32 %bf.lshr3, 31
  %and = and i32 %bf.clear4, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 14
  %11 = load i64, i64* %src_chars, align 8
  %and5 = and i64 %11, 1
  %tobool6 = icmp ne i64 %and5, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %12, i32 0, i32 2
  %13 = load i32, i32* %rejected, align 4
  %or7 = or i32 %13, 15872
  store i32 %or7, i32* %rejected, align 4
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body.8

do.body.8:                                        ; preds = %do.cond, %do.body
  %14 = load i8*, i8** %src, align 8
  %15 = load i8*, i8** %src_end, align 8
  %cmp = icmp eq i8* %14, %15
  br i1 %cmp, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %do.body.8
  br label %no_more_source

if.end.10:                                        ; preds = %do.body.8
  %16 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %17 = load i8, i8* %16, align 1
  %conv = zext i8 %17 to i32
  store i32 %conv, i32* %c1, align 4
  %18 = load i8, i8* %multibytep, align 1
  %tobool11 = trunc i8 %18 to i1
  br i1 %tobool11, label %land.lhs.true.13, label %if.end.44

land.lhs.true.13:                                 ; preds = %if.end.10
  %19 = load i32, i32* %c1, align 4
  %and14 = and i32 %19, 128
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.44

if.then.16:                                       ; preds = %land.lhs.true.13
  %20 = load i32, i32* %c1, align 4
  %and17 = and i32 %20, 254
  %cmp18 = icmp eq i32 %and17, 192
  br i1 %cmp18, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %if.then.16
  %21 = load i32, i32* %c1, align 4
  %and21 = and i32 %21, 1
  %shl = shl i32 %and21, 6
  %22 = load i8*, i8** %src, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %incdec.ptr22, i8** %src, align 8
  %23 = load i8, i8* %22, align 1
  %conv23 = zext i8 %23 to i32
  %or24 = or i32 %shl, %conv23
  store i32 %or24, i32* %c1, align 4
  br label %if.end.43

if.else:                                          ; preds = %if.then.16
  %24 = load i32, i32* %c1, align 4
  %and25 = and i32 %24, 128
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  br label %cond.end.40

cond.false:                                       ; preds = %if.else
  %25 = load i32, i32* %c1, align 4
  %and27 = and i32 %25, 32
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.false.30, label %cond.true.29

cond.true.29:                                     ; preds = %cond.false
  br label %cond.end.38

cond.false.30:                                    ; preds = %cond.false
  %26 = load i32, i32* %c1, align 4
  %and31 = and i32 %26, 16
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %cond.false.34, label %cond.true.33

cond.true.33:                                     ; preds = %cond.false.30
  br label %cond.end

cond.false.34:                                    ; preds = %cond.false.30
  %27 = load i32, i32* %c1, align 4
  %and35 = and i32 %27, 8
  %tobool36 = icmp ne i32 %and35, 0
  %lnot = xor i1 %tobool36, true
  %cond = select i1 %lnot, i32 4, i32 5
  br label %cond.end

cond.end:                                         ; preds = %cond.false.34, %cond.true.33
  %cond37 = phi i32 [ 3, %cond.true.33 ], [ %cond, %cond.false.34 ]
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.end, %cond.true.29
  %cond39 = phi i32 [ 2, %cond.true.29 ], [ %cond37, %cond.end ]
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.end.38, %cond.true
  %cond41 = phi i32 [ 1, %cond.true ], [ %cond39, %cond.end.38 ]
  %sub = sub nsw i32 %cond41, 1
  %28 = load i8*, i8** %src, align 8
  %idx.ext = sext i32 %sub to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %28, i64 %idx.ext
  store i8* %add.ptr42, i8** %src, align 8
  store i32 -1, i32* %c1, align 4
  br label %if.end.43

if.end.43:                                        ; preds = %cond.end.40, %if.then.20
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %land.lhs.true.13, %if.end.10
  br label %do.cond

do.cond:                                          ; preds = %if.end.44
  %29 = load i32, i32* %c1, align 4
  %cmp45 = icmp slt i32 %29, 0
  br i1 %cmp45, label %do.body.8, label %do.end

do.end:                                           ; preds = %do.cond
  %30 = load i8*, i8** %src, align 8
  %31 = load i8*, i8** %src_end, align 8
  %cmp47 = icmp eq i8* %30, %31
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %do.end
  br label %no_more_source

if.end.50:                                        ; preds = %do.end
  %32 = load i8*, i8** %src, align 8
  %incdec.ptr51 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr51, i8** %src, align 8
  %33 = load i8, i8* %32, align 1
  %conv52 = zext i8 %33 to i32
  store i32 %conv52, i32* %c2, align 4
  %34 = load i8, i8* %multibytep, align 1
  %tobool53 = trunc i8 %34 to i1
  br i1 %tobool53, label %land.lhs.true.55, label %if.end.70

land.lhs.true.55:                                 ; preds = %if.end.50
  %35 = load i32, i32* %c2, align 4
  %and56 = and i32 %35, 128
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %if.then.58, label %if.end.70

if.then.58:                                       ; preds = %land.lhs.true.55
  %36 = load i32, i32* %c2, align 4
  %and59 = and i32 %36, 254
  %cmp60 = icmp eq i32 %and59, 192
  br i1 %cmp60, label %if.then.62, label %if.else.68

if.then.62:                                       ; preds = %if.then.58
  %37 = load i32, i32* %c2, align 4
  %and63 = and i32 %37, 1
  %shl64 = shl i32 %and63, 6
  %38 = load i8*, i8** %src, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr65, i8** %src, align 8
  %39 = load i8, i8* %38, align 1
  %conv66 = zext i8 %39 to i32
  %or67 = or i32 %shl64, %conv66
  store i32 %or67, i32* %c2, align 4
  br label %if.end.69

if.else.68:                                       ; preds = %if.then.58
  store i32 -1, i32* %c2, align 4
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.68, %if.then.62
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %land.lhs.true.55, %if.end.50
  br label %do.end.72

do.end.72:                                        ; preds = %if.end.70
  %40 = load i32, i32* %c1, align 4
  %cmp73 = icmp eq i32 %40, 255
  br i1 %cmp73, label %land.lhs.true.75, label %if.else.82

land.lhs.true.75:                                 ; preds = %do.end.72
  %41 = load i32, i32* %c2, align 4
  %cmp76 = icmp eq i32 %41, 254
  br i1 %cmp76, label %if.then.78, label %if.else.82

if.then.78:                                       ; preds = %land.lhs.true.75
  %42 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %42, i32 0, i32 1
  %43 = load i32, i32* %found, align 4
  %or79 = or i32 %43, 2560
  store i32 %or79, i32* %found, align 4
  %44 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected80 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %44, i32 0, i32 2
  %45 = load i32, i32* %rejected80, align 4
  %or81 = or i32 %45, 13312
  store i32 %or81, i32* %rejected80, align 4
  br label %if.end.221

if.else.82:                                       ; preds = %land.lhs.true.75, %do.end.72
  %46 = load i32, i32* %c1, align 4
  %cmp83 = icmp eq i32 %46, 254
  br i1 %cmp83, label %land.lhs.true.85, label %if.else.93

land.lhs.true.85:                                 ; preds = %if.else.82
  %47 = load i32, i32* %c2, align 4
  %cmp86 = icmp eq i32 %47, 255
  br i1 %cmp86, label %if.then.88, label %if.else.93

if.then.88:                                       ; preds = %land.lhs.true.85
  %48 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found89 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %48, i32 0, i32 1
  %49 = load i32, i32* %found89, align 4
  %or90 = or i32 %49, 1536
  store i32 %or90, i32* %found89, align 4
  %50 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected91 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %50, i32 0, i32 2
  %51 = load i32, i32* %rejected91, align 4
  %or92 = or i32 %51, 14336
  store i32 %or92, i32* %rejected91, align 4
  br label %if.end.220

if.else.93:                                       ; preds = %land.lhs.true.85, %if.else.82
  %52 = load i32, i32* %c2, align 4
  %cmp94 = icmp slt i32 %52, 0
  br i1 %cmp94, label %if.then.96, label %if.else.99

if.then.96:                                       ; preds = %if.else.93
  %53 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected97 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %53, i32 0, i32 2
  %54 = load i32, i32* %rejected97, align 4
  %or98 = or i32 %54, 15872
  store i32 %or98, i32* %rejected97, align 4
  store i1 false, i1* %retval
  br label %return

if.else.99:                                       ; preds = %if.else.93
  store i32 1, i32* %e_num, align 4
  store i32 1, i32* %o_num, align 4
  %55 = bitcast [256 x i8]* %e to i8*
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 256, i32 16, i1 false)
  %56 = bitcast [256 x i8]* %o to i8*
  call void @llvm.memset.p0i8.i64(i8* %56, i8 0, i64 256, i32 16, i1 false)
  %57 = load i32, i32* %c1, align 4
  %idxprom = sext i32 %57 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %e, i32 0, i64 %idxprom
  store i8 1, i8* %arrayidx, align 1
  %58 = load i32, i32* %c2, align 4
  %idxprom100 = sext i32 %58 to i64
  %arrayidx101 = getelementptr inbounds [256 x i8], [256 x i8]* %o, i32 0, i64 %idxprom100
  store i8 1, i8* %arrayidx101, align 1
  %59 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected102 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %59, i32 0, i32 2
  %60 = load i32, i32* %rejected102, align 4
  %or103 = or i32 %60, 3584
  store i32 %or103, i32* %rejected102, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.219, %if.else.99
  %61 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected104 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %61, i32 0, i32 2
  %62 = load i32, i32* %rejected104, align 4
  %and105 = and i32 %62, 15872
  %cmp106 = icmp ne i32 %and105, 15872
  br i1 %cmp106, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.108

do.body.108:                                      ; preds = %while.body
  br label %do.body.109

do.body.109:                                      ; preds = %do.cond.159, %do.body.108
  %63 = load i8*, i8** %src, align 8
  %64 = load i8*, i8** %src_end, align 8
  %cmp110 = icmp eq i8* %63, %64
  br i1 %cmp110, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %do.body.109
  br label %no_more_source

if.end.113:                                       ; preds = %do.body.109
  %65 = load i8*, i8** %src, align 8
  %incdec.ptr114 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %incdec.ptr114, i8** %src, align 8
  %66 = load i8, i8* %65, align 1
  %conv115 = zext i8 %66 to i32
  store i32 %conv115, i32* %c1, align 4
  %67 = load i8, i8* %multibytep, align 1
  %tobool116 = trunc i8 %67 to i1
  br i1 %tobool116, label %land.lhs.true.118, label %if.end.158

land.lhs.true.118:                                ; preds = %if.end.113
  %68 = load i32, i32* %c1, align 4
  %and119 = and i32 %68, 128
  %tobool120 = icmp ne i32 %and119, 0
  br i1 %tobool120, label %if.then.121, label %if.end.158

if.then.121:                                      ; preds = %land.lhs.true.118
  %69 = load i32, i32* %c1, align 4
  %and122 = and i32 %69, 254
  %cmp123 = icmp eq i32 %and122, 192
  br i1 %cmp123, label %if.then.125, label %if.else.131

if.then.125:                                      ; preds = %if.then.121
  %70 = load i32, i32* %c1, align 4
  %and126 = and i32 %70, 1
  %shl127 = shl i32 %and126, 6
  %71 = load i8*, i8** %src, align 8
  %incdec.ptr128 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr128, i8** %src, align 8
  %72 = load i8, i8* %71, align 1
  %conv129 = zext i8 %72 to i32
  %or130 = or i32 %shl127, %conv129
  store i32 %or130, i32* %c1, align 4
  br label %if.end.157

if.else.131:                                      ; preds = %if.then.121
  %73 = load i32, i32* %c1, align 4
  %and132 = and i32 %73, 128
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %cond.false.135, label %cond.true.134

cond.true.134:                                    ; preds = %if.else.131
  br label %cond.end.152

cond.false.135:                                   ; preds = %if.else.131
  %74 = load i32, i32* %c1, align 4
  %and136 = and i32 %74, 32
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %cond.false.139, label %cond.true.138

cond.true.138:                                    ; preds = %cond.false.135
  br label %cond.end.150

cond.false.139:                                   ; preds = %cond.false.135
  %75 = load i32, i32* %c1, align 4
  %and140 = and i32 %75, 16
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %cond.false.143, label %cond.true.142

cond.true.142:                                    ; preds = %cond.false.139
  br label %cond.end.148

cond.false.143:                                   ; preds = %cond.false.139
  %76 = load i32, i32* %c1, align 4
  %and144 = and i32 %76, 8
  %tobool145 = icmp ne i32 %and144, 0
  %lnot146 = xor i1 %tobool145, true
  %cond147 = select i1 %lnot146, i32 4, i32 5
  br label %cond.end.148

cond.end.148:                                     ; preds = %cond.false.143, %cond.true.142
  %cond149 = phi i32 [ 3, %cond.true.142 ], [ %cond147, %cond.false.143 ]
  br label %cond.end.150

cond.end.150:                                     ; preds = %cond.end.148, %cond.true.138
  %cond151 = phi i32 [ 2, %cond.true.138 ], [ %cond149, %cond.end.148 ]
  br label %cond.end.152

cond.end.152:                                     ; preds = %cond.end.150, %cond.true.134
  %cond153 = phi i32 [ 1, %cond.true.134 ], [ %cond151, %cond.end.150 ]
  %sub154 = sub nsw i32 %cond153, 1
  %77 = load i8*, i8** %src, align 8
  %idx.ext155 = sext i32 %sub154 to i64
  %add.ptr156 = getelementptr inbounds i8, i8* %77, i64 %idx.ext155
  store i8* %add.ptr156, i8** %src, align 8
  store i32 -1, i32* %c1, align 4
  br label %if.end.157

if.end.157:                                       ; preds = %cond.end.152, %if.then.125
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %land.lhs.true.118, %if.end.113
  br label %do.cond.159

do.cond.159:                                      ; preds = %if.end.158
  %78 = load i32, i32* %c1, align 4
  %cmp160 = icmp slt i32 %78, 0
  br i1 %cmp160, label %do.body.109, label %do.end.162

do.end.162:                                       ; preds = %do.cond.159
  %79 = load i8*, i8** %src, align 8
  %80 = load i8*, i8** %src_end, align 8
  %cmp163 = icmp eq i8* %79, %80
  br i1 %cmp163, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %do.end.162
  br label %no_more_source

if.end.166:                                       ; preds = %do.end.162
  %81 = load i8*, i8** %src, align 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr167, i8** %src, align 8
  %82 = load i8, i8* %81, align 1
  %conv168 = zext i8 %82 to i32
  store i32 %conv168, i32* %c2, align 4
  %83 = load i8, i8* %multibytep, align 1
  %tobool169 = trunc i8 %83 to i1
  br i1 %tobool169, label %land.lhs.true.171, label %if.end.186

land.lhs.true.171:                                ; preds = %if.end.166
  %84 = load i32, i32* %c2, align 4
  %and172 = and i32 %84, 128
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %if.then.174, label %if.end.186

if.then.174:                                      ; preds = %land.lhs.true.171
  %85 = load i32, i32* %c2, align 4
  %and175 = and i32 %85, 254
  %cmp176 = icmp eq i32 %and175, 192
  br i1 %cmp176, label %if.then.178, label %if.else.184

if.then.178:                                      ; preds = %if.then.174
  %86 = load i32, i32* %c2, align 4
  %and179 = and i32 %86, 1
  %shl180 = shl i32 %and179, 6
  %87 = load i8*, i8** %src, align 8
  %incdec.ptr181 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %incdec.ptr181, i8** %src, align 8
  %88 = load i8, i8* %87, align 1
  %conv182 = zext i8 %88 to i32
  %or183 = or i32 %shl180, %conv182
  store i32 %or183, i32* %c2, align 4
  br label %if.end.185

if.else.184:                                      ; preds = %if.then.174
  store i32 -1, i32* %c2, align 4
  br label %if.end.185

if.end.185:                                       ; preds = %if.else.184, %if.then.178
  br label %if.end.186

if.end.186:                                       ; preds = %if.end.185, %land.lhs.true.171, %if.end.166
  br label %do.end.188

do.end.188:                                       ; preds = %if.end.186
  %89 = load i32, i32* %c2, align 4
  %cmp189 = icmp slt i32 %89, 0
  br i1 %cmp189, label %if.then.191, label %if.end.192

if.then.191:                                      ; preds = %do.end.188
  br label %while.end

if.end.192:                                       ; preds = %do.end.188
  %90 = load i32, i32* %c1, align 4
  %idxprom193 = sext i32 %90 to i64
  %arrayidx194 = getelementptr inbounds [256 x i8], [256 x i8]* %e, i32 0, i64 %idxprom193
  %91 = load i8, i8* %arrayidx194, align 1
  %tobool195 = icmp ne i8 %91, 0
  br i1 %tobool195, label %if.end.205, label %if.then.196

if.then.196:                                      ; preds = %if.end.192
  %92 = load i32, i32* %c1, align 4
  %idxprom197 = sext i32 %92 to i64
  %arrayidx198 = getelementptr inbounds [256 x i8], [256 x i8]* %e, i32 0, i64 %idxprom197
  store i8 1, i8* %arrayidx198, align 1
  %93 = load i32, i32* %e_num, align 4
  %inc = add i32 %93, 1
  store i32 %inc, i32* %e_num, align 4
  %94 = load i32, i32* %e_num, align 4
  %cmp199 = icmp uge i32 %94, 128
  br i1 %cmp199, label %if.then.201, label %if.end.204

if.then.201:                                      ; preds = %if.then.196
  %95 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected202 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %95, i32 0, i32 2
  %96 = load i32, i32* %rejected202, align 4
  %or203 = or i32 %96, 4096
  store i32 %or203, i32* %rejected202, align 4
  br label %if.end.204

if.end.204:                                       ; preds = %if.then.201, %if.then.196
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %if.end.192
  %97 = load i32, i32* %c2, align 4
  %idxprom206 = sext i32 %97 to i64
  %arrayidx207 = getelementptr inbounds [256 x i8], [256 x i8]* %o, i32 0, i64 %idxprom206
  %98 = load i8, i8* %arrayidx207, align 1
  %tobool208 = icmp ne i8 %98, 0
  br i1 %tobool208, label %if.end.219, label %if.then.209

if.then.209:                                      ; preds = %if.end.205
  %99 = load i32, i32* %c2, align 4
  %idxprom210 = sext i32 %99 to i64
  %arrayidx211 = getelementptr inbounds [256 x i8], [256 x i8]* %o, i32 0, i64 %idxprom210
  store i8 1, i8* %arrayidx211, align 1
  %100 = load i32, i32* %o_num, align 4
  %inc212 = add i32 %100, 1
  store i32 %inc212, i32* %o_num, align 4
  %101 = load i32, i32* %o_num, align 4
  %cmp213 = icmp uge i32 %101, 128
  br i1 %cmp213, label %if.then.215, label %if.end.218

if.then.215:                                      ; preds = %if.then.209
  %102 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected216 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %102, i32 0, i32 2
  %103 = load i32, i32* %rejected216, align 4
  %or217 = or i32 %103, 8192
  store i32 %or217, i32* %rejected216, align 4
  br label %if.end.218

if.end.218:                                       ; preds = %if.then.215, %if.then.209
  br label %if.end.219

if.end.219:                                       ; preds = %if.end.218, %if.end.205
  br label %while.cond

while.end:                                        ; preds = %if.then.191, %while.cond
  store i1 false, i1* %retval
  br label %return

if.end.220:                                       ; preds = %if.then.88
  br label %if.end.221

if.end.221:                                       ; preds = %if.end.220, %if.then.78
  br label %no_more_source

no_more_source:                                   ; preds = %if.end.221, %if.then.165, %if.then.112, %if.then.49, %if.then.9
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %no_more_source, %while.end, %if.then.96, %if.then
  %104 = load i1, i1* %retval
  ret i1 %104
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_utf_16(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %consumed_chars_base = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %bom = alloca i32, align 4
  %endian = alloca i32, align 4
  %surrogate = alloca i32, align 4
  %eol_dos = alloca i8, align 1
  %byte_after_cr1 = alloca i32, align 4
  %byte_after_cr2 = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %c97 = alloca i32, align 4
  %c198 = alloca i32, align 4
  %c299 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr7, i64 -2
  store i32* %add.ptr8, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  store i64 0, i64* %consumed_chars_base, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 3
  %utf_16 = bitcast %union.anon* %spec to %struct.utf_16_spec*
  %bom9 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16, i32 0, i32 0
  %18 = load i32, i32* %bom9, align 4
  store i32 %18, i32* %bom, align 4
  %19 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec10 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %19, i32 0, i32 3
  %utf_1611 = bitcast %union.anon* %spec10 to %struct.utf_16_spec*
  %endian12 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_1611, i32 0, i32 1
  %20 = load i32, i32* %endian12, align 4
  store i32 %20, i32* %endian, align 4
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec13 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 3
  %utf_1614 = bitcast %union.anon* %spec13 to %struct.utf_16_spec*
  %surrogate15 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_1614, i32 0, i32 2
  %22 = load i32, i32* %surrogate15, align 4
  store i32 %22, i32* %surrogate, align 4
  %23 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %23 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %24 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %24)
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %25, i32 0, i32 0
  %26 = load i64, i64* %id, align 8
  %call16 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %26)
  %call17 = call i64 @AREF(i64 %call16, i64 2)
  %call18 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp = icmp eq i64 %call17, %call18
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %27 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool19 = zext i1 %27 to i8
  store i8 %frombool19, i8* %eol_dos, align 1
  store i32 -1, i32* %byte_after_cr1, align 4
  store i32 -1, i32* %byte_after_cr2, align 4
  %28 = load i32, i32* %bom, align 4
  %cmp20 = icmp eq i32 %28, 2
  br i1 %cmp20, label %if.then, label %if.else.88

if.then:                                          ; preds = %land.end
  %29 = load i8*, i8** %src, align 8
  store i8* %29, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %30 = load i8*, i8** %src, align 8
  %31 = load i8*, i8** %src_end, align 8
  %cmp21 = icmp eq i8* %30, %31
  br i1 %cmp21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %do.body
  %32 = load i8*, i8** %src_base, align 8
  %33 = load i8*, i8** %src, align 8
  %cmp23 = icmp ult i8* %32, %33
  br i1 %cmp23, label %if.then.24, label %if.end

if.then.24:                                       ; preds = %if.then.22
  %34 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %34, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.24, %if.then.22
  br label %no_more_source

if.end.25:                                        ; preds = %do.body
  %35 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %36 = load i8, i8* %35, align 1
  %conv = zext i8 %36 to i32
  store i32 %conv, i32* %c1, align 4
  %37 = load i8, i8* %multibytep, align 1
  %tobool26 = trunc i8 %37 to i1
  br i1 %tobool26, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %if.end.25
  %38 = load i32, i32* %c1, align 4
  %and = and i32 %38, 128
  %tobool28 = icmp ne i32 %and, 0
  br i1 %tobool28, label %if.then.29, label %if.end.40

if.then.29:                                       ; preds = %land.lhs.true
  %39 = load i32, i32* %c1, align 4
  %and30 = and i32 %39, 254
  %cmp31 = icmp eq i32 %and30, 192
  br i1 %cmp31, label %if.then.33, label %if.else

if.then.33:                                       ; preds = %if.then.29
  %40 = load i32, i32* %c1, align 4
  %and34 = and i32 %40, 1
  %shl = shl i32 %and34, 6
  %41 = load i8*, i8** %src, align 8
  %incdec.ptr35 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr35, i8** %src, align 8
  %42 = load i8, i8* %41, align 1
  %conv36 = zext i8 %42 to i32
  %or = or i32 %shl, %conv36
  store i32 %or, i32* %c1, align 4
  br label %if.end.39

if.else:                                          ; preds = %if.then.29
  %43 = load i8*, i8** %src, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %43, i32 -1
  store i8* %incdec.ptr37, i8** %src, align 8
  %44 = load i8*, i8** %src, align 8
  %call38 = call i32 @string_char(i8* %44, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call38
  store i32 %sub, i32* %c1, align 4
  %45 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %45, i32 3)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else, %if.then.33
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %land.lhs.true, %if.end.25
  %46 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %46, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.40
  br label %do.body.41

do.body.41:                                       ; preds = %do.end
  %47 = load i8*, i8** %src, align 8
  %48 = load i8*, i8** %src_end, align 8
  %cmp42 = icmp eq i8* %47, %48
  br i1 %cmp42, label %if.then.44, label %if.end.49

if.then.44:                                       ; preds = %do.body.41
  %49 = load i8*, i8** %src_base, align 8
  %50 = load i8*, i8** %src, align 8
  %cmp45 = icmp ult i8* %49, %50
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.then.44
  %51 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %51, i32 1)
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.47, %if.then.44
  br label %no_more_source

if.end.49:                                        ; preds = %do.body.41
  %52 = load i8*, i8** %src, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %incdec.ptr50, i8** %src, align 8
  %53 = load i8, i8* %52, align 1
  %conv51 = zext i8 %53 to i32
  store i32 %conv51, i32* %c2, align 4
  %54 = load i8, i8* %multibytep, align 1
  %tobool52 = trunc i8 %54 to i1
  br i1 %tobool52, label %land.lhs.true.54, label %if.end.72

land.lhs.true.54:                                 ; preds = %if.end.49
  %55 = load i32, i32* %c2, align 4
  %and55 = and i32 %55, 128
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then.57, label %if.end.72

if.then.57:                                       ; preds = %land.lhs.true.54
  %56 = load i32, i32* %c2, align 4
  %and58 = and i32 %56, 254
  %cmp59 = icmp eq i32 %and58, 192
  br i1 %cmp59, label %if.then.61, label %if.else.67

if.then.61:                                       ; preds = %if.then.57
  %57 = load i32, i32* %c2, align 4
  %and62 = and i32 %57, 1
  %shl63 = shl i32 %and62, 6
  %58 = load i8*, i8** %src, align 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr64, i8** %src, align 8
  %59 = load i8, i8* %58, align 1
  %conv65 = zext i8 %59 to i32
  %or66 = or i32 %shl63, %conv65
  store i32 %or66, i32* %c2, align 4
  br label %if.end.71

if.else.67:                                       ; preds = %if.then.57
  %60 = load i8*, i8** %src, align 8
  %incdec.ptr68 = getelementptr inbounds i8, i8* %60, i32 -1
  store i8* %incdec.ptr68, i8** %src, align 8
  %61 = load i8*, i8** %src, align 8
  %call69 = call i32 @string_char(i8* %61, i8** %src, i32* null)
  %sub70 = sub nsw i32 0, %call69
  store i32 %sub70, i32* %c2, align 4
  %62 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %62, i32 3)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.67, %if.then.61
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %land.lhs.true.54, %if.end.49
  %63 = load i64, i64* %consumed_chars, align 8
  %inc73 = add nsw i64 %63, 1
  store i64 %inc73, i64* %consumed_chars, align 8
  br label %do.end.74

do.end.74:                                        ; preds = %if.end.72
  %64 = load i32, i32* %c1, align 4
  %shl75 = shl i32 %64, 8
  %65 = load i32, i32* %c2, align 4
  %or76 = or i32 %shl75, %65
  store i32 %or76, i32* %c, align 4
  %66 = load i32, i32* %endian, align 4
  %cmp77 = icmp eq i32 %66, 0
  br i1 %cmp77, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.74
  %67 = load i32, i32* %c, align 4
  %cmp79 = icmp ne i32 %67, 65279
  br i1 %cmp79, label %if.then.83, label %if.end.84

cond.false:                                       ; preds = %do.end.74
  %68 = load i32, i32* %c, align 4
  %cmp81 = icmp ne i32 %68, 65534
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %cond.false, %cond.true
  %69 = load i8*, i8** %src_base, align 8
  store i8* %69, i8** %src, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.83, %cond.false, %cond.true
  %70 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec85 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %70, i32 0, i32 3
  %utf_1686 = bitcast %union.anon* %spec85 to %struct.utf_16_spec*
  %bom87 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_1686, i32 0, i32 0
  store i32 1, i32* %bom87, align 4
  br label %if.end.96

if.else.88:                                       ; preds = %land.end
  %71 = load i32, i32* %bom, align 4
  %cmp89 = icmp eq i32 %71, 0
  br i1 %cmp89, label %if.then.91, label %if.end.95

if.then.91:                                       ; preds = %if.else.88
  %72 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec92 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %72, i32 0, i32 3
  %utf_1693 = bitcast %union.anon* %spec92 to %struct.utf_16_spec*
  %bom94 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_1693, i32 0, i32 0
  store i32 1, i32* %bom94, align 4
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.91, %if.else.88
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.end.84
  br label %while.body

while.body:                                       ; preds = %if.end.96, %if.then.150, %cond.end, %if.end.344
  %73 = load i8*, i8** %src, align 8
  store i8* %73, i8** %src_base, align 8
  %74 = load i64, i64* %consumed_chars, align 8
  store i64 %74, i64* %consumed_chars_base, align 8
  %75 = load i32*, i32** %charbuf, align 8
  %76 = load i32*, i32** %charbuf_end, align 8
  %cmp100 = icmp uge i32* %75, %76
  br i1 %cmp100, label %if.then.102, label %if.end.108

if.then.102:                                      ; preds = %while.body
  %77 = load i32, i32* %byte_after_cr1, align 4
  %cmp103 = icmp sge i32 %77, 0
  br i1 %cmp103, label %if.then.105, label %if.end.107

if.then.105:                                      ; preds = %if.then.102
  %78 = load i8*, i8** %src_base, align 8
  %add.ptr106 = getelementptr inbounds i8, i8* %78, i64 -2
  store i8* %add.ptr106, i8** %src_base, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.105, %if.then.102
  br label %while.end

if.end.108:                                       ; preds = %while.body
  %79 = load i32, i32* %byte_after_cr1, align 4
  %cmp109 = icmp sge i32 %79, 0
  br i1 %cmp109, label %if.then.111, label %if.else.112

if.then.111:                                      ; preds = %if.end.108
  %80 = load i32, i32* %byte_after_cr1, align 4
  store i32 %80, i32* %c198, align 4
  store i32 -1, i32* %byte_after_cr1, align 4
  br label %if.end.147

if.else.112:                                      ; preds = %if.end.108
  br label %do.body.113

do.body.113:                                      ; preds = %if.else.112
  %81 = load i8*, i8** %src, align 8
  %82 = load i8*, i8** %src_end, align 8
  %cmp114 = icmp eq i8* %81, %82
  br i1 %cmp114, label %if.then.116, label %if.end.121

if.then.116:                                      ; preds = %do.body.113
  %83 = load i8*, i8** %src_base, align 8
  %84 = load i8*, i8** %src, align 8
  %cmp117 = icmp ult i8* %83, %84
  br i1 %cmp117, label %if.then.119, label %if.end.120

if.then.119:                                      ; preds = %if.then.116
  %85 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %85, i32 1)
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.119, %if.then.116
  br label %no_more_source

if.end.121:                                       ; preds = %do.body.113
  %86 = load i8*, i8** %src, align 8
  %incdec.ptr122 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %incdec.ptr122, i8** %src, align 8
  %87 = load i8, i8* %86, align 1
  %conv123 = zext i8 %87 to i32
  store i32 %conv123, i32* %c198, align 4
  %88 = load i8, i8* %multibytep, align 1
  %tobool124 = trunc i8 %88 to i1
  br i1 %tobool124, label %land.lhs.true.126, label %if.end.144

land.lhs.true.126:                                ; preds = %if.end.121
  %89 = load i32, i32* %c198, align 4
  %and127 = and i32 %89, 128
  %tobool128 = icmp ne i32 %and127, 0
  br i1 %tobool128, label %if.then.129, label %if.end.144

if.then.129:                                      ; preds = %land.lhs.true.126
  %90 = load i32, i32* %c198, align 4
  %and130 = and i32 %90, 254
  %cmp131 = icmp eq i32 %and130, 192
  br i1 %cmp131, label %if.then.133, label %if.else.139

if.then.133:                                      ; preds = %if.then.129
  %91 = load i32, i32* %c198, align 4
  %and134 = and i32 %91, 1
  %shl135 = shl i32 %and134, 6
  %92 = load i8*, i8** %src, align 8
  %incdec.ptr136 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %incdec.ptr136, i8** %src, align 8
  %93 = load i8, i8* %92, align 1
  %conv137 = zext i8 %93 to i32
  %or138 = or i32 %shl135, %conv137
  store i32 %or138, i32* %c198, align 4
  br label %if.end.143

if.else.139:                                      ; preds = %if.then.129
  %94 = load i8*, i8** %src, align 8
  %incdec.ptr140 = getelementptr inbounds i8, i8* %94, i32 -1
  store i8* %incdec.ptr140, i8** %src, align 8
  %95 = load i8*, i8** %src, align 8
  %call141 = call i32 @string_char(i8* %95, i8** %src, i32* null)
  %sub142 = sub nsw i32 0, %call141
  store i32 %sub142, i32* %c198, align 4
  %96 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %96, i32 3)
  br label %if.end.143

if.end.143:                                       ; preds = %if.else.139, %if.then.133
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %land.lhs.true.126, %if.end.121
  %97 = load i64, i64* %consumed_chars, align 8
  %inc145 = add nsw i64 %97, 1
  store i64 %inc145, i64* %consumed_chars, align 8
  br label %do.end.146

do.end.146:                                       ; preds = %if.end.144
  br label %if.end.147

if.end.147:                                       ; preds = %do.end.146, %if.then.111
  %98 = load i32, i32* %c198, align 4
  %cmp148 = icmp slt i32 %98, 0
  br i1 %cmp148, label %if.then.150, label %if.end.153

if.then.150:                                      ; preds = %if.end.147
  %99 = load i32, i32* %c198, align 4
  %sub151 = sub nsw i32 0, %99
  %100 = load i32*, i32** %charbuf, align 8
  %incdec.ptr152 = getelementptr inbounds i32, i32* %100, i32 1
  store i32* %incdec.ptr152, i32** %charbuf, align 8
  store i32 %sub151, i32* %100, align 4
  br label %while.body

if.end.153:                                       ; preds = %if.end.147
  %101 = load i32, i32* %byte_after_cr2, align 4
  %cmp154 = icmp sge i32 %101, 0
  br i1 %cmp154, label %if.then.156, label %if.else.157

if.then.156:                                      ; preds = %if.end.153
  %102 = load i32, i32* %byte_after_cr2, align 4
  store i32 %102, i32* %c299, align 4
  store i32 -1, i32* %byte_after_cr2, align 4
  br label %if.end.192

if.else.157:                                      ; preds = %if.end.153
  br label %do.body.158

do.body.158:                                      ; preds = %if.else.157
  %103 = load i8*, i8** %src, align 8
  %104 = load i8*, i8** %src_end, align 8
  %cmp159 = icmp eq i8* %103, %104
  br i1 %cmp159, label %if.then.161, label %if.end.166

if.then.161:                                      ; preds = %do.body.158
  %105 = load i8*, i8** %src_base, align 8
  %106 = load i8*, i8** %src, align 8
  %cmp162 = icmp ult i8* %105, %106
  br i1 %cmp162, label %if.then.164, label %if.end.165

if.then.164:                                      ; preds = %if.then.161
  %107 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %107, i32 1)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.164, %if.then.161
  br label %no_more_source

if.end.166:                                       ; preds = %do.body.158
  %108 = load i8*, i8** %src, align 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %108, i32 1
  store i8* %incdec.ptr167, i8** %src, align 8
  %109 = load i8, i8* %108, align 1
  %conv168 = zext i8 %109 to i32
  store i32 %conv168, i32* %c299, align 4
  %110 = load i8, i8* %multibytep, align 1
  %tobool169 = trunc i8 %110 to i1
  br i1 %tobool169, label %land.lhs.true.171, label %if.end.189

land.lhs.true.171:                                ; preds = %if.end.166
  %111 = load i32, i32* %c299, align 4
  %and172 = and i32 %111, 128
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %if.then.174, label %if.end.189

if.then.174:                                      ; preds = %land.lhs.true.171
  %112 = load i32, i32* %c299, align 4
  %and175 = and i32 %112, 254
  %cmp176 = icmp eq i32 %and175, 192
  br i1 %cmp176, label %if.then.178, label %if.else.184

if.then.178:                                      ; preds = %if.then.174
  %113 = load i32, i32* %c299, align 4
  %and179 = and i32 %113, 1
  %shl180 = shl i32 %and179, 6
  %114 = load i8*, i8** %src, align 8
  %incdec.ptr181 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %incdec.ptr181, i8** %src, align 8
  %115 = load i8, i8* %114, align 1
  %conv182 = zext i8 %115 to i32
  %or183 = or i32 %shl180, %conv182
  store i32 %or183, i32* %c299, align 4
  br label %if.end.188

if.else.184:                                      ; preds = %if.then.174
  %116 = load i8*, i8** %src, align 8
  %incdec.ptr185 = getelementptr inbounds i8, i8* %116, i32 -1
  store i8* %incdec.ptr185, i8** %src, align 8
  %117 = load i8*, i8** %src, align 8
  %call186 = call i32 @string_char(i8* %117, i8** %src, i32* null)
  %sub187 = sub nsw i32 0, %call186
  store i32 %sub187, i32* %c299, align 4
  %118 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %118, i32 3)
  br label %if.end.188

if.end.188:                                       ; preds = %if.else.184, %if.then.178
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %land.lhs.true.171, %if.end.166
  %119 = load i64, i64* %consumed_chars, align 8
  %inc190 = add nsw i64 %119, 1
  store i64 %inc190, i64* %consumed_chars, align 8
  br label %do.end.191

do.end.191:                                       ; preds = %if.end.189
  br label %if.end.192

if.end.192:                                       ; preds = %do.end.191, %if.then.156
  %120 = load i32, i32* %c299, align 4
  %cmp193 = icmp slt i32 %120, 0
  br i1 %cmp193, label %if.then.195, label %if.end.210

if.then.195:                                      ; preds = %if.end.192
  br i1 true, label %cond.true.196, label %cond.false.199

cond.true.196:                                    ; preds = %if.then.195
  %121 = load i32, i32* %c198, align 4
  %add = add i32 %121, 0
  %cmp197 = icmp ult i32 %add, 128
  br i1 %cmp197, label %cond.true.204, label %cond.false.205

cond.false.199:                                   ; preds = %if.then.195
  %122 = load i32, i32* %c198, align 4
  %conv200 = sext i32 %122 to i64
  %add201 = add i64 %conv200, 0
  %cmp202 = icmp ult i64 %add201, 128
  br i1 %cmp202, label %cond.true.204, label %cond.false.205

cond.true.204:                                    ; preds = %cond.false.199, %cond.true.196
  %123 = load i32, i32* %c198, align 4
  br label %cond.end

cond.false.205:                                   ; preds = %cond.false.199, %cond.true.196
  %124 = load i32, i32* %c198, align 4
  %add206 = add nsw i32 %124, 4194048
  br label %cond.end

cond.end:                                         ; preds = %cond.false.205, %cond.true.204
  %cond = phi i32 [ %123, %cond.true.204 ], [ %add206, %cond.false.205 ]
  %125 = load i32*, i32** %charbuf, align 8
  %incdec.ptr207 = getelementptr inbounds i32, i32* %125, i32 1
  store i32* %incdec.ptr207, i32** %charbuf, align 8
  store i32 %cond, i32* %125, align 4
  %126 = load i32, i32* %c299, align 4
  %sub208 = sub nsw i32 0, %126
  %127 = load i32*, i32** %charbuf, align 8
  %incdec.ptr209 = getelementptr inbounds i32, i32* %127, i32 1
  store i32* %incdec.ptr209, i32** %charbuf, align 8
  store i32 %sub208, i32* %127, align 4
  br label %while.body

if.end.210:                                       ; preds = %if.end.192
  %128 = load i32, i32* %endian, align 4
  %cmp211 = icmp eq i32 %128, 0
  br i1 %cmp211, label %cond.true.213, label %cond.false.216

cond.true.213:                                    ; preds = %if.end.210
  %129 = load i32, i32* %c198, align 4
  %shl214 = shl i32 %129, 8
  %130 = load i32, i32* %c299, align 4
  %or215 = or i32 %shl214, %130
  br label %cond.end.219

cond.false.216:                                   ; preds = %if.end.210
  %131 = load i32, i32* %c299, align 4
  %shl217 = shl i32 %131, 8
  %132 = load i32, i32* %c198, align 4
  %or218 = or i32 %shl217, %132
  br label %cond.end.219

cond.end.219:                                     ; preds = %cond.false.216, %cond.true.213
  %cond220 = phi i32 [ %or215, %cond.true.213 ], [ %or218, %cond.false.216 ]
  store i32 %cond220, i32* %c97, align 4
  %133 = load i32, i32* %surrogate, align 4
  %tobool221 = icmp ne i32 %133, 0
  br i1 %tobool221, label %if.then.222, label %if.else.258

if.then.222:                                      ; preds = %cond.end.219
  %134 = load i32, i32* %c97, align 4
  %and223 = and i32 %134, 64512
  %cmp224 = icmp eq i32 %and223, 56320
  br i1 %cmp224, label %if.else.247, label %if.then.226

if.then.226:                                      ; preds = %if.then.222
  %135 = load i32, i32* %endian, align 4
  %cmp227 = icmp eq i32 %135, 0
  br i1 %cmp227, label %if.then.229, label %if.else.231

if.then.229:                                      ; preds = %if.then.226
  %136 = load i32, i32* %surrogate, align 4
  %shr = ashr i32 %136, 8
  store i32 %shr, i32* %c198, align 4
  %137 = load i32, i32* %surrogate, align 4
  %and230 = and i32 %137, 255
  store i32 %and230, i32* %c299, align 4
  br label %if.end.234

if.else.231:                                      ; preds = %if.then.226
  %138 = load i32, i32* %surrogate, align 4
  %and232 = and i32 %138, 255
  store i32 %and232, i32* %c198, align 4
  %139 = load i32, i32* %surrogate, align 4
  %shr233 = ashr i32 %139, 8
  store i32 %shr233, i32* %c299, align 4
  br label %if.end.234

if.end.234:                                       ; preds = %if.else.231, %if.then.229
  %140 = load i32, i32* %c198, align 4
  %141 = load i32*, i32** %charbuf, align 8
  %incdec.ptr235 = getelementptr inbounds i32, i32* %141, i32 1
  store i32* %incdec.ptr235, i32** %charbuf, align 8
  store i32 %140, i32* %141, align 4
  %142 = load i32, i32* %c299, align 4
  %143 = load i32*, i32** %charbuf, align 8
  %incdec.ptr236 = getelementptr inbounds i32, i32* %143, i32 1
  store i32* %incdec.ptr236, i32** %charbuf, align 8
  store i32 %142, i32* %143, align 4
  %144 = load i32, i32* %c97, align 4
  %and237 = and i32 %144, 64512
  %cmp238 = icmp eq i32 %and237, 55296
  br i1 %cmp238, label %if.then.240, label %if.else.244

if.then.240:                                      ; preds = %if.end.234
  %145 = load i32, i32* %c97, align 4
  store i32 %145, i32* %surrogate, align 4
  %146 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec241 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %146, i32 0, i32 3
  %utf_16242 = bitcast %union.anon* %spec241 to %struct.utf_16_spec*
  %surrogate243 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16242, i32 0, i32 2
  store i32 %145, i32* %surrogate243, align 4
  br label %if.end.246

if.else.244:                                      ; preds = %if.end.234
  %147 = load i32, i32* %c97, align 4
  %148 = load i32*, i32** %charbuf, align 8
  %incdec.ptr245 = getelementptr inbounds i32, i32* %148, i32 1
  store i32* %incdec.ptr245, i32** %charbuf, align 8
  store i32 %147, i32* %148, align 4
  br label %if.end.246

if.end.246:                                       ; preds = %if.else.244, %if.then.240
  br label %if.end.257

if.else.247:                                      ; preds = %if.then.222
  %149 = load i32, i32* %surrogate, align 4
  %sub248 = sub nsw i32 %149, 55296
  %shl249 = shl i32 %sub248, 10
  %150 = load i32, i32* %c97, align 4
  %sub250 = sub nsw i32 %150, 56320
  %or251 = or i32 %shl249, %sub250
  store i32 %or251, i32* %c97, align 4
  store i32 0, i32* %surrogate, align 4
  %151 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec252 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %151, i32 0, i32 3
  %utf_16253 = bitcast %union.anon* %spec252 to %struct.utf_16_spec*
  %surrogate254 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16253, i32 0, i32 2
  store i32 0, i32* %surrogate254, align 4
  %152 = load i32, i32* %c97, align 4
  %add255 = add nsw i32 65536, %152
  %153 = load i32*, i32** %charbuf, align 8
  %incdec.ptr256 = getelementptr inbounds i32, i32* %153, i32 1
  store i32* %incdec.ptr256, i32** %charbuf, align 8
  store i32 %add255, i32* %153, align 4
  br label %if.end.257

if.end.257:                                       ; preds = %if.else.247, %if.end.246
  br label %if.end.344

if.else.258:                                      ; preds = %cond.end.219
  %154 = load i32, i32* %c97, align 4
  %and259 = and i32 %154, 64512
  %cmp260 = icmp eq i32 %and259, 55296
  br i1 %cmp260, label %if.then.262, label %if.else.266

if.then.262:                                      ; preds = %if.else.258
  %155 = load i32, i32* %c97, align 4
  store i32 %155, i32* %surrogate, align 4
  %156 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec263 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %156, i32 0, i32 3
  %utf_16264 = bitcast %union.anon* %spec263 to %struct.utf_16_spec*
  %surrogate265 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16264, i32 0, i32 2
  store i32 %155, i32* %surrogate265, align 4
  br label %if.end.343

if.else.266:                                      ; preds = %if.else.258
  %157 = load i8, i8* %eol_dos, align 1
  %tobool267 = trunc i8 %157 to i1
  br i1 %tobool267, label %land.lhs.true.269, label %if.end.341

land.lhs.true.269:                                ; preds = %if.else.266
  %158 = load i32, i32* %c97, align 4
  %cmp270 = icmp eq i32 %158, 13
  br i1 %cmp270, label %if.then.272, label %if.end.341

if.then.272:                                      ; preds = %land.lhs.true.269
  br label %do.body.273

do.body.273:                                      ; preds = %if.then.272
  %159 = load i8*, i8** %src, align 8
  %160 = load i8*, i8** %src_end, align 8
  %cmp274 = icmp eq i8* %159, %160
  br i1 %cmp274, label %if.then.276, label %if.end.281

if.then.276:                                      ; preds = %do.body.273
  %161 = load i8*, i8** %src_base, align 8
  %162 = load i8*, i8** %src, align 8
  %cmp277 = icmp ult i8* %161, %162
  br i1 %cmp277, label %if.then.279, label %if.end.280

if.then.279:                                      ; preds = %if.then.276
  %163 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %163, i32 1)
  br label %if.end.280

if.end.280:                                       ; preds = %if.then.279, %if.then.276
  br label %no_more_source

if.end.281:                                       ; preds = %do.body.273
  %164 = load i8*, i8** %src, align 8
  %incdec.ptr282 = getelementptr inbounds i8, i8* %164, i32 1
  store i8* %incdec.ptr282, i8** %src, align 8
  %165 = load i8, i8* %164, align 1
  %conv283 = zext i8 %165 to i32
  store i32 %conv283, i32* %byte_after_cr1, align 4
  %166 = load i8, i8* %multibytep, align 1
  %tobool284 = trunc i8 %166 to i1
  br i1 %tobool284, label %land.lhs.true.286, label %if.end.304

land.lhs.true.286:                                ; preds = %if.end.281
  %167 = load i32, i32* %byte_after_cr1, align 4
  %and287 = and i32 %167, 128
  %tobool288 = icmp ne i32 %and287, 0
  br i1 %tobool288, label %if.then.289, label %if.end.304

if.then.289:                                      ; preds = %land.lhs.true.286
  %168 = load i32, i32* %byte_after_cr1, align 4
  %and290 = and i32 %168, 254
  %cmp291 = icmp eq i32 %and290, 192
  br i1 %cmp291, label %if.then.293, label %if.else.299

if.then.293:                                      ; preds = %if.then.289
  %169 = load i32, i32* %byte_after_cr1, align 4
  %and294 = and i32 %169, 1
  %shl295 = shl i32 %and294, 6
  %170 = load i8*, i8** %src, align 8
  %incdec.ptr296 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %incdec.ptr296, i8** %src, align 8
  %171 = load i8, i8* %170, align 1
  %conv297 = zext i8 %171 to i32
  %or298 = or i32 %shl295, %conv297
  store i32 %or298, i32* %byte_after_cr1, align 4
  br label %if.end.303

if.else.299:                                      ; preds = %if.then.289
  %172 = load i8*, i8** %src, align 8
  %incdec.ptr300 = getelementptr inbounds i8, i8* %172, i32 -1
  store i8* %incdec.ptr300, i8** %src, align 8
  %173 = load i8*, i8** %src, align 8
  %call301 = call i32 @string_char(i8* %173, i8** %src, i32* null)
  %sub302 = sub nsw i32 0, %call301
  store i32 %sub302, i32* %byte_after_cr1, align 4
  %174 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %174, i32 3)
  br label %if.end.303

if.end.303:                                       ; preds = %if.else.299, %if.then.293
  br label %if.end.304

if.end.304:                                       ; preds = %if.end.303, %land.lhs.true.286, %if.end.281
  %175 = load i64, i64* %consumed_chars, align 8
  %inc305 = add nsw i64 %175, 1
  store i64 %inc305, i64* %consumed_chars, align 8
  br label %do.end.306

do.end.306:                                       ; preds = %if.end.304
  br label %do.body.307

do.body.307:                                      ; preds = %do.end.306
  %176 = load i8*, i8** %src, align 8
  %177 = load i8*, i8** %src_end, align 8
  %cmp308 = icmp eq i8* %176, %177
  br i1 %cmp308, label %if.then.310, label %if.end.315

if.then.310:                                      ; preds = %do.body.307
  %178 = load i8*, i8** %src_base, align 8
  %179 = load i8*, i8** %src, align 8
  %cmp311 = icmp ult i8* %178, %179
  br i1 %cmp311, label %if.then.313, label %if.end.314

if.then.313:                                      ; preds = %if.then.310
  %180 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %180, i32 1)
  br label %if.end.314

if.end.314:                                       ; preds = %if.then.313, %if.then.310
  br label %no_more_source

if.end.315:                                       ; preds = %do.body.307
  %181 = load i8*, i8** %src, align 8
  %incdec.ptr316 = getelementptr inbounds i8, i8* %181, i32 1
  store i8* %incdec.ptr316, i8** %src, align 8
  %182 = load i8, i8* %181, align 1
  %conv317 = zext i8 %182 to i32
  store i32 %conv317, i32* %byte_after_cr2, align 4
  %183 = load i8, i8* %multibytep, align 1
  %tobool318 = trunc i8 %183 to i1
  br i1 %tobool318, label %land.lhs.true.320, label %if.end.338

land.lhs.true.320:                                ; preds = %if.end.315
  %184 = load i32, i32* %byte_after_cr2, align 4
  %and321 = and i32 %184, 128
  %tobool322 = icmp ne i32 %and321, 0
  br i1 %tobool322, label %if.then.323, label %if.end.338

if.then.323:                                      ; preds = %land.lhs.true.320
  %185 = load i32, i32* %byte_after_cr2, align 4
  %and324 = and i32 %185, 254
  %cmp325 = icmp eq i32 %and324, 192
  br i1 %cmp325, label %if.then.327, label %if.else.333

if.then.327:                                      ; preds = %if.then.323
  %186 = load i32, i32* %byte_after_cr2, align 4
  %and328 = and i32 %186, 1
  %shl329 = shl i32 %and328, 6
  %187 = load i8*, i8** %src, align 8
  %incdec.ptr330 = getelementptr inbounds i8, i8* %187, i32 1
  store i8* %incdec.ptr330, i8** %src, align 8
  %188 = load i8, i8* %187, align 1
  %conv331 = zext i8 %188 to i32
  %or332 = or i32 %shl329, %conv331
  store i32 %or332, i32* %byte_after_cr2, align 4
  br label %if.end.337

if.else.333:                                      ; preds = %if.then.323
  %189 = load i8*, i8** %src, align 8
  %incdec.ptr334 = getelementptr inbounds i8, i8* %189, i32 -1
  store i8* %incdec.ptr334, i8** %src, align 8
  %190 = load i8*, i8** %src, align 8
  %call335 = call i32 @string_char(i8* %190, i8** %src, i32* null)
  %sub336 = sub nsw i32 0, %call335
  store i32 %sub336, i32* %byte_after_cr2, align 4
  %191 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %191, i32 3)
  br label %if.end.337

if.end.337:                                       ; preds = %if.else.333, %if.then.327
  br label %if.end.338

if.end.338:                                       ; preds = %if.end.337, %land.lhs.true.320, %if.end.315
  %192 = load i64, i64* %consumed_chars, align 8
  %inc339 = add nsw i64 %192, 1
  store i64 %inc339, i64* %consumed_chars, align 8
  br label %do.end.340

do.end.340:                                       ; preds = %if.end.338
  br label %if.end.341

if.end.341:                                       ; preds = %do.end.340, %land.lhs.true.269, %if.else.266
  %193 = load i32, i32* %c97, align 4
  %194 = load i32*, i32** %charbuf, align 8
  %incdec.ptr342 = getelementptr inbounds i32, i32* %194, i32 1
  store i32* %incdec.ptr342, i32** %charbuf, align 8
  store i32 %193, i32* %194, align 4
  br label %if.end.343

if.end.343:                                       ; preds = %if.end.341, %if.then.262
  br label %if.end.344

if.end.344:                                       ; preds = %if.end.343, %if.end.257
  br label %while.body

while.end:                                        ; preds = %if.end.107
  br label %no_more_source

no_more_source:                                   ; preds = %while.end, %if.end.314, %if.end.280, %if.end.165, %if.end.120, %if.end.48, %if.end
  %195 = load i64, i64* %consumed_chars_base, align 8
  %196 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %196, i32 0, i32 11
  %197 = load i64, i64* %consumed_char, align 8
  %add345 = add nsw i64 %197, %195
  store i64 %add345, i64* %consumed_char, align 8
  %198 = load i8*, i8** %src_base, align 8
  %199 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source346 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %199, i32 0, i32 17
  %200 = load i8*, i8** %source346, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %198 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %200 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %201 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed347 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %201, i32 0, i32 10
  store i64 %sub.ptr.sub, i64* %consumed347, align 8
  %202 = load i32*, i32** %charbuf, align 8
  %203 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf348 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %203, i32 0, i32 23
  %204 = load i32*, i32** %charbuf348, align 8
  %sub.ptr.lhs.cast349 = ptrtoint i32* %202 to i64
  %sub.ptr.rhs.cast350 = ptrtoint i32* %204 to i64
  %sub.ptr.sub351 = sub i64 %sub.ptr.lhs.cast349, %sub.ptr.rhs.cast350
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub351, 4
  %conv352 = trunc i64 %sub.ptr.div to i32
  %205 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used353 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %205, i32 0, i32 25
  store i32 %conv352, i32* %charbuf_used353, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_utf_16(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %safe_room = alloca i32, align 4
  %bom = alloca i32, align 4
  %big_endian = alloca i8, align 1
  %produced_chars = alloca i64, align 8
  %c = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %ch123 = alloca i32, align 4
  %more_bytes238 = alloca i64, align 8
  %ch265 = alloca i32, align 4
  %ch378 = alloca i32, align 4
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %ch499 = alloca i32, align 4
  %ch611 = alloca i32, align 4
  %ch726 = alloca i32, align 4
  %ch838 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load i32*, i32** %charbuf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 25
  %5 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 8
  %9 = load i64, i64* %produced, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %dst, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 22
  %11 = load i8*, i8** %destination3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 20
  %13 = load i64, i64* %dst_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %dst_end, align 8
  store i32 8, i32* %safe_room, align 4
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 3
  %utf_16 = bitcast %union.anon* %spec to %struct.utf_16_spec*
  %bom5 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16, i32 0, i32 0
  %15 = load i32, i32* %bom5, align 4
  store i32 %15, i32* %bom, align 4
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec6 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 3
  %utf_167 = bitcast %union.anon* %spec6 to %struct.utf_16_spec*
  %endian = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_167, i32 0, i32 1
  %17 = load i32, i32* %endian, align 4
  %cmp = icmp eq i32 %17, 0
  %frombool8 = zext i1 %cmp to i8
  store i8 %frombool8, i8* %big_endian, align 1
  store i64 0, i64* %produced_chars, align 8
  %18 = load i32, i32* %bom, align 4
  %cmp9 = icmp ne i32 %18, 1
  br i1 %cmp9, label %if.then, label %if.end.229

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %19 = load i8*, i8** %dst, align 8
  %20 = load i32, i32* %safe_room, align 4
  %idx.ext10 = sext i32 %20 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %19, i64 %idx.ext10
  %21 = load i8*, i8** %dst_end, align 8
  %cmp12 = icmp uge i8* %add.ptr11, %21
  br i1 %cmp12, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %do.body
  %22 = load i32*, i32** %charbuf_end, align 8
  %23 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %22 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %24 = load i32, i32* %safe_room, align 4
  %conv = sext i32 %24 to i64
  %add = add nsw i64 %sub.ptr.div, %conv
  store i64 %add, i64* %more_bytes, align 8
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %26 = load i64, i64* %more_bytes, align 8
  %27 = load i8*, i8** %dst, align 8
  %call = call i8* @alloc_destination(%struct.coding_system* %25, i64 %26, i8* %27)
  store i8* %call, i8** %dst, align 8
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %28, i32 0, i32 22
  %29 = load i8*, i8** %destination14, align 8
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes15 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %30, i32 0, i32 20
  %31 = load i64, i64* %dst_bytes15, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %29, i64 %31
  store i8* %add.ptr16, i8** %dst_end, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.13, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %32 = load i8, i8* %big_endian, align 1
  %tobool = trunc i8 %32 to i1
  br i1 %tobool, label %if.then.17, label %if.else.118

if.then.17:                                       ; preds = %do.end
  br label %do.body.18

do.body.18:                                       ; preds = %if.then.17
  %33 = load i64, i64* %produced_chars, align 8
  %add19 = add nsw i64 %33, 2
  store i64 %add19, i64* %produced_chars, align 8
  %34 = load i8, i8* %multibytep, align 1
  %tobool20 = trunc i8 %34 to i1
  br i1 %tobool20, label %if.then.21, label %if.else.113

if.then.21:                                       ; preds = %do.body.18
  store i32 254, i32* %ch, align 4
  %35 = load i32, i32* %ch, align 4
  %cmp22 = icmp uge i32 %35, 128
  br i1 %cmp22, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %if.then.21
  %36 = load i32, i32* %ch, align 4
  %add25 = add i32 %36, 4194048
  store i32 %add25, i32* %ch, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.24, %if.then.21
  br label %do.body.27

do.body.27:                                       ; preds = %if.end.26
  %37 = load i32, i32* %ch, align 4
  %cmp28 = icmp ule i32 %37, 127
  br i1 %cmp28, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %do.body.27
  %38 = load i32, i32* %ch, align 4
  %conv31 = trunc i32 %38 to i8
  %39 = load i8*, i8** %dst, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr, i8** %dst, align 8
  store i8 %conv31, i8* %39, align 1
  br label %if.end.63

if.else:                                          ; preds = %do.body.27
  %40 = load i32, i32* %ch, align 4
  %cmp32 = icmp ule i32 %40, 2047
  br i1 %cmp32, label %if.then.34, label %if.else.40

if.then.34:                                       ; preds = %if.else
  %41 = load i32, i32* %ch, align 4
  %shr = lshr i32 %41, 6
  %or = or i32 192, %shr
  %conv35 = trunc i32 %or to i8
  %42 = load i8*, i8** %dst, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr36, i8** %dst, align 8
  store i8 %conv35, i8* %42, align 1
  %43 = load i32, i32* %ch, align 4
  %and = and i32 %43, 63
  %or37 = or i32 128, %and
  %conv38 = trunc i32 %or37 to i8
  %44 = load i8*, i8** %dst, align 8
  %incdec.ptr39 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr39, i8** %dst, align 8
  store i8 %conv38, i8* %44, align 1
  br label %if.end.62

if.else.40:                                       ; preds = %if.else
  %45 = load i32, i32* %ch, align 4
  %cmp41 = icmp ule i32 %45, 65535
  br i1 %cmp41, label %if.then.43, label %if.else.57

if.then.43:                                       ; preds = %if.else.40
  %46 = load i32, i32* %ch, align 4
  %shr44 = lshr i32 %46, 12
  %or45 = or i32 224, %shr44
  %conv46 = trunc i32 %or45 to i8
  %47 = load i8*, i8** %dst, align 8
  %incdec.ptr47 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %incdec.ptr47, i8** %dst, align 8
  store i8 %conv46, i8* %47, align 1
  %48 = load i32, i32* %ch, align 4
  %shr48 = lshr i32 %48, 6
  %and49 = and i32 %shr48, 63
  %or50 = or i32 128, %and49
  %conv51 = trunc i32 %or50 to i8
  %49 = load i8*, i8** %dst, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr52, i8** %dst, align 8
  store i8 %conv51, i8* %49, align 1
  %50 = load i32, i32* %ch, align 4
  %and53 = and i32 %50, 63
  %or54 = or i32 128, %and53
  %conv55 = trunc i32 %or54 to i8
  %51 = load i8*, i8** %dst, align 8
  %incdec.ptr56 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr56, i8** %dst, align 8
  store i8 %conv55, i8* %51, align 1
  br label %if.end.61

if.else.57:                                       ; preds = %if.else.40
  %52 = load i32, i32* %ch, align 4
  %53 = load i8*, i8** %dst, align 8
  %call58 = call i32 @char_string(i32 %52, i8* %53)
  %54 = load i8*, i8** %dst, align 8
  %idx.ext59 = sext i32 %call58 to i64
  %add.ptr60 = getelementptr inbounds i8, i8* %54, i64 %idx.ext59
  store i8* %add.ptr60, i8** %dst, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.57, %if.then.43
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.then.34
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then.30
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  store i32 255, i32* %ch, align 4
  %55 = load i32, i32* %ch, align 4
  %cmp65 = icmp uge i32 %55, 128
  br i1 %cmp65, label %if.then.67, label %if.end.69

if.then.67:                                       ; preds = %do.end.64
  %56 = load i32, i32* %ch, align 4
  %add68 = add i32 %56, 4194048
  store i32 %add68, i32* %ch, align 4
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.67, %do.end.64
  br label %do.body.70

do.body.70:                                       ; preds = %if.end.69
  %57 = load i32, i32* %ch, align 4
  %cmp71 = icmp ule i32 %57, 127
  br i1 %cmp71, label %if.then.73, label %if.else.76

if.then.73:                                       ; preds = %do.body.70
  %58 = load i32, i32* %ch, align 4
  %conv74 = trunc i32 %58 to i8
  %59 = load i8*, i8** %dst, align 8
  %incdec.ptr75 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr75, i8** %dst, align 8
  store i8 %conv74, i8* %59, align 1
  br label %if.end.111

if.else.76:                                       ; preds = %do.body.70
  %60 = load i32, i32* %ch, align 4
  %cmp77 = icmp ule i32 %60, 2047
  br i1 %cmp77, label %if.then.79, label %if.else.88

if.then.79:                                       ; preds = %if.else.76
  %61 = load i32, i32* %ch, align 4
  %shr80 = lshr i32 %61, 6
  %or81 = or i32 192, %shr80
  %conv82 = trunc i32 %or81 to i8
  %62 = load i8*, i8** %dst, align 8
  %incdec.ptr83 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr83, i8** %dst, align 8
  store i8 %conv82, i8* %62, align 1
  %63 = load i32, i32* %ch, align 4
  %and84 = and i32 %63, 63
  %or85 = or i32 128, %and84
  %conv86 = trunc i32 %or85 to i8
  %64 = load i8*, i8** %dst, align 8
  %incdec.ptr87 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr87, i8** %dst, align 8
  store i8 %conv86, i8* %64, align 1
  br label %if.end.110

if.else.88:                                       ; preds = %if.else.76
  %65 = load i32, i32* %ch, align 4
  %cmp89 = icmp ule i32 %65, 65535
  br i1 %cmp89, label %if.then.91, label %if.else.105

if.then.91:                                       ; preds = %if.else.88
  %66 = load i32, i32* %ch, align 4
  %shr92 = lshr i32 %66, 12
  %or93 = or i32 224, %shr92
  %conv94 = trunc i32 %or93 to i8
  %67 = load i8*, i8** %dst, align 8
  %incdec.ptr95 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %incdec.ptr95, i8** %dst, align 8
  store i8 %conv94, i8* %67, align 1
  %68 = load i32, i32* %ch, align 4
  %shr96 = lshr i32 %68, 6
  %and97 = and i32 %shr96, 63
  %or98 = or i32 128, %and97
  %conv99 = trunc i32 %or98 to i8
  %69 = load i8*, i8** %dst, align 8
  %incdec.ptr100 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr100, i8** %dst, align 8
  store i8 %conv99, i8* %69, align 1
  %70 = load i32, i32* %ch, align 4
  %and101 = and i32 %70, 63
  %or102 = or i32 128, %and101
  %conv103 = trunc i32 %or102 to i8
  %71 = load i8*, i8** %dst, align 8
  %incdec.ptr104 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr104, i8** %dst, align 8
  store i8 %conv103, i8* %71, align 1
  br label %if.end.109

if.else.105:                                      ; preds = %if.else.88
  %72 = load i32, i32* %ch, align 4
  %73 = load i8*, i8** %dst, align 8
  %call106 = call i32 @char_string(i32 %72, i8* %73)
  %74 = load i8*, i8** %dst, align 8
  %idx.ext107 = sext i32 %call106 to i64
  %add.ptr108 = getelementptr inbounds i8, i8* %74, i64 %idx.ext107
  store i8* %add.ptr108, i8** %dst, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.105, %if.then.91
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.then.79
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %if.then.73
  br label %do.end.112

do.end.112:                                       ; preds = %if.end.111
  br label %if.end.116

if.else.113:                                      ; preds = %do.body.18
  %75 = load i8*, i8** %dst, align 8
  %incdec.ptr114 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr114, i8** %dst, align 8
  store i8 -2, i8* %75, align 1
  %76 = load i8*, i8** %dst, align 8
  %incdec.ptr115 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %incdec.ptr115, i8** %dst, align 8
  store i8 -1, i8* %76, align 1
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.113, %do.end.112
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  br label %if.end.225

if.else.118:                                      ; preds = %do.end
  br label %do.body.119

do.body.119:                                      ; preds = %if.else.118
  %77 = load i64, i64* %produced_chars, align 8
  %add120 = add nsw i64 %77, 2
  store i64 %add120, i64* %produced_chars, align 8
  %78 = load i8, i8* %multibytep, align 1
  %tobool121 = trunc i8 %78 to i1
  br i1 %tobool121, label %if.then.122, label %if.else.220

if.then.122:                                      ; preds = %do.body.119
  store i32 255, i32* %ch123, align 4
  %79 = load i32, i32* %ch123, align 4
  %cmp124 = icmp uge i32 %79, 128
  br i1 %cmp124, label %if.then.126, label %if.end.128

if.then.126:                                      ; preds = %if.then.122
  %80 = load i32, i32* %ch123, align 4
  %add127 = add i32 %80, 4194048
  store i32 %add127, i32* %ch123, align 4
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.126, %if.then.122
  br label %do.body.129

do.body.129:                                      ; preds = %if.end.128
  %81 = load i32, i32* %ch123, align 4
  %cmp130 = icmp ule i32 %81, 127
  br i1 %cmp130, label %if.then.132, label %if.else.135

if.then.132:                                      ; preds = %do.body.129
  %82 = load i32, i32* %ch123, align 4
  %conv133 = trunc i32 %82 to i8
  %83 = load i8*, i8** %dst, align 8
  %incdec.ptr134 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %incdec.ptr134, i8** %dst, align 8
  store i8 %conv133, i8* %83, align 1
  br label %if.end.170

if.else.135:                                      ; preds = %do.body.129
  %84 = load i32, i32* %ch123, align 4
  %cmp136 = icmp ule i32 %84, 2047
  br i1 %cmp136, label %if.then.138, label %if.else.147

if.then.138:                                      ; preds = %if.else.135
  %85 = load i32, i32* %ch123, align 4
  %shr139 = lshr i32 %85, 6
  %or140 = or i32 192, %shr139
  %conv141 = trunc i32 %or140 to i8
  %86 = load i8*, i8** %dst, align 8
  %incdec.ptr142 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %incdec.ptr142, i8** %dst, align 8
  store i8 %conv141, i8* %86, align 1
  %87 = load i32, i32* %ch123, align 4
  %and143 = and i32 %87, 63
  %or144 = or i32 128, %and143
  %conv145 = trunc i32 %or144 to i8
  %88 = load i8*, i8** %dst, align 8
  %incdec.ptr146 = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %incdec.ptr146, i8** %dst, align 8
  store i8 %conv145, i8* %88, align 1
  br label %if.end.169

if.else.147:                                      ; preds = %if.else.135
  %89 = load i32, i32* %ch123, align 4
  %cmp148 = icmp ule i32 %89, 65535
  br i1 %cmp148, label %if.then.150, label %if.else.164

if.then.150:                                      ; preds = %if.else.147
  %90 = load i32, i32* %ch123, align 4
  %shr151 = lshr i32 %90, 12
  %or152 = or i32 224, %shr151
  %conv153 = trunc i32 %or152 to i8
  %91 = load i8*, i8** %dst, align 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr154, i8** %dst, align 8
  store i8 %conv153, i8* %91, align 1
  %92 = load i32, i32* %ch123, align 4
  %shr155 = lshr i32 %92, 6
  %and156 = and i32 %shr155, 63
  %or157 = or i32 128, %and156
  %conv158 = trunc i32 %or157 to i8
  %93 = load i8*, i8** %dst, align 8
  %incdec.ptr159 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %incdec.ptr159, i8** %dst, align 8
  store i8 %conv158, i8* %93, align 1
  %94 = load i32, i32* %ch123, align 4
  %and160 = and i32 %94, 63
  %or161 = or i32 128, %and160
  %conv162 = trunc i32 %or161 to i8
  %95 = load i8*, i8** %dst, align 8
  %incdec.ptr163 = getelementptr inbounds i8, i8* %95, i32 1
  store i8* %incdec.ptr163, i8** %dst, align 8
  store i8 %conv162, i8* %95, align 1
  br label %if.end.168

if.else.164:                                      ; preds = %if.else.147
  %96 = load i32, i32* %ch123, align 4
  %97 = load i8*, i8** %dst, align 8
  %call165 = call i32 @char_string(i32 %96, i8* %97)
  %98 = load i8*, i8** %dst, align 8
  %idx.ext166 = sext i32 %call165 to i64
  %add.ptr167 = getelementptr inbounds i8, i8* %98, i64 %idx.ext166
  store i8* %add.ptr167, i8** %dst, align 8
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.164, %if.then.150
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %if.then.138
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %if.then.132
  br label %do.end.171

do.end.171:                                       ; preds = %if.end.170
  store i32 254, i32* %ch123, align 4
  %99 = load i32, i32* %ch123, align 4
  %cmp172 = icmp uge i32 %99, 128
  br i1 %cmp172, label %if.then.174, label %if.end.176

if.then.174:                                      ; preds = %do.end.171
  %100 = load i32, i32* %ch123, align 4
  %add175 = add i32 %100, 4194048
  store i32 %add175, i32* %ch123, align 4
  br label %if.end.176

if.end.176:                                       ; preds = %if.then.174, %do.end.171
  br label %do.body.177

do.body.177:                                      ; preds = %if.end.176
  %101 = load i32, i32* %ch123, align 4
  %cmp178 = icmp ule i32 %101, 127
  br i1 %cmp178, label %if.then.180, label %if.else.183

if.then.180:                                      ; preds = %do.body.177
  %102 = load i32, i32* %ch123, align 4
  %conv181 = trunc i32 %102 to i8
  %103 = load i8*, i8** %dst, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %103, i32 1
  store i8* %incdec.ptr182, i8** %dst, align 8
  store i8 %conv181, i8* %103, align 1
  br label %if.end.218

if.else.183:                                      ; preds = %do.body.177
  %104 = load i32, i32* %ch123, align 4
  %cmp184 = icmp ule i32 %104, 2047
  br i1 %cmp184, label %if.then.186, label %if.else.195

if.then.186:                                      ; preds = %if.else.183
  %105 = load i32, i32* %ch123, align 4
  %shr187 = lshr i32 %105, 6
  %or188 = or i32 192, %shr187
  %conv189 = trunc i32 %or188 to i8
  %106 = load i8*, i8** %dst, align 8
  %incdec.ptr190 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr190, i8** %dst, align 8
  store i8 %conv189, i8* %106, align 1
  %107 = load i32, i32* %ch123, align 4
  %and191 = and i32 %107, 63
  %or192 = or i32 128, %and191
  %conv193 = trunc i32 %or192 to i8
  %108 = load i8*, i8** %dst, align 8
  %incdec.ptr194 = getelementptr inbounds i8, i8* %108, i32 1
  store i8* %incdec.ptr194, i8** %dst, align 8
  store i8 %conv193, i8* %108, align 1
  br label %if.end.217

if.else.195:                                      ; preds = %if.else.183
  %109 = load i32, i32* %ch123, align 4
  %cmp196 = icmp ule i32 %109, 65535
  br i1 %cmp196, label %if.then.198, label %if.else.212

if.then.198:                                      ; preds = %if.else.195
  %110 = load i32, i32* %ch123, align 4
  %shr199 = lshr i32 %110, 12
  %or200 = or i32 224, %shr199
  %conv201 = trunc i32 %or200 to i8
  %111 = load i8*, i8** %dst, align 8
  %incdec.ptr202 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %incdec.ptr202, i8** %dst, align 8
  store i8 %conv201, i8* %111, align 1
  %112 = load i32, i32* %ch123, align 4
  %shr203 = lshr i32 %112, 6
  %and204 = and i32 %shr203, 63
  %or205 = or i32 128, %and204
  %conv206 = trunc i32 %or205 to i8
  %113 = load i8*, i8** %dst, align 8
  %incdec.ptr207 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %incdec.ptr207, i8** %dst, align 8
  store i8 %conv206, i8* %113, align 1
  %114 = load i32, i32* %ch123, align 4
  %and208 = and i32 %114, 63
  %or209 = or i32 128, %and208
  %conv210 = trunc i32 %or209 to i8
  %115 = load i8*, i8** %dst, align 8
  %incdec.ptr211 = getelementptr inbounds i8, i8* %115, i32 1
  store i8* %incdec.ptr211, i8** %dst, align 8
  store i8 %conv210, i8* %115, align 1
  br label %if.end.216

if.else.212:                                      ; preds = %if.else.195
  %116 = load i32, i32* %ch123, align 4
  %117 = load i8*, i8** %dst, align 8
  %call213 = call i32 @char_string(i32 %116, i8* %117)
  %118 = load i8*, i8** %dst, align 8
  %idx.ext214 = sext i32 %call213 to i64
  %add.ptr215 = getelementptr inbounds i8, i8* %118, i64 %idx.ext214
  store i8* %add.ptr215, i8** %dst, align 8
  br label %if.end.216

if.end.216:                                       ; preds = %if.else.212, %if.then.198
  br label %if.end.217

if.end.217:                                       ; preds = %if.end.216, %if.then.186
  br label %if.end.218

if.end.218:                                       ; preds = %if.end.217, %if.then.180
  br label %do.end.219

do.end.219:                                       ; preds = %if.end.218
  br label %if.end.223

if.else.220:                                      ; preds = %do.body.119
  %119 = load i8*, i8** %dst, align 8
  %incdec.ptr221 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %incdec.ptr221, i8** %dst, align 8
  store i8 -1, i8* %119, align 1
  %120 = load i8*, i8** %dst, align 8
  %incdec.ptr222 = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %incdec.ptr222, i8** %dst, align 8
  store i8 -2, i8* %120, align 1
  br label %if.end.223

if.end.223:                                       ; preds = %if.else.220, %do.end.219
  br label %do.end.224

do.end.224:                                       ; preds = %if.end.223
  br label %if.end.225

if.end.225:                                       ; preds = %do.end.224, %do.end.117
  %121 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec226 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %121, i32 0, i32 3
  %utf_16227 = bitcast %union.anon* %spec226 to %struct.utf_16_spec*
  %bom228 = getelementptr inbounds %struct.utf_16_spec, %struct.utf_16_spec* %utf_16227, i32 0, i32 0
  store i32 1, i32* %bom228, align 4
  br label %if.end.229

if.end.229:                                       ; preds = %if.end.225, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end.948, %if.end.229
  %122 = load i32*, i32** %charbuf, align 8
  %123 = load i32*, i32** %charbuf_end, align 8
  %cmp230 = icmp ult i32* %122, %123
  br i1 %cmp230, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.232

do.body.232:                                      ; preds = %while.body
  %124 = load i8*, i8** %dst, align 8
  %125 = load i32, i32* %safe_room, align 4
  %idx.ext233 = sext i32 %125 to i64
  %add.ptr234 = getelementptr inbounds i8, i8* %124, i64 %idx.ext233
  %126 = load i8*, i8** %dst_end, align 8
  %cmp235 = icmp uge i8* %add.ptr234, %126
  br i1 %cmp235, label %if.then.237, label %if.end.249

if.then.237:                                      ; preds = %do.body.232
  %127 = load i32*, i32** %charbuf_end, align 8
  %128 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast239 = ptrtoint i32* %127 to i64
  %sub.ptr.rhs.cast240 = ptrtoint i32* %128 to i64
  %sub.ptr.sub241 = sub i64 %sub.ptr.lhs.cast239, %sub.ptr.rhs.cast240
  %sub.ptr.div242 = sdiv exact i64 %sub.ptr.sub241, 4
  %129 = load i32, i32* %safe_room, align 4
  %conv243 = sext i32 %129 to i64
  %add244 = add nsw i64 %sub.ptr.div242, %conv243
  store i64 %add244, i64* %more_bytes238, align 8
  %130 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %131 = load i64, i64* %more_bytes238, align 8
  %132 = load i8*, i8** %dst, align 8
  %call245 = call i8* @alloc_destination(%struct.coding_system* %130, i64 %131, i8* %132)
  store i8* %call245, i8** %dst, align 8
  %133 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination246 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %133, i32 0, i32 22
  %134 = load i8*, i8** %destination246, align 8
  %135 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes247 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %135, i32 0, i32 20
  %136 = load i64, i64* %dst_bytes247, align 8
  %add.ptr248 = getelementptr inbounds i8, i8* %134, i64 %136
  store i8* %add.ptr248, i8** %dst_end, align 8
  br label %if.end.249

if.end.249:                                       ; preds = %if.then.237, %do.body.232
  br label %do.end.250

do.end.250:                                       ; preds = %if.end.249
  %137 = load i32*, i32** %charbuf, align 8
  %incdec.ptr251 = getelementptr inbounds i32, i32* %137, i32 1
  store i32* %incdec.ptr251, i32** %charbuf, align 8
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %c, align 4
  %139 = load i32, i32* %c, align 4
  %cmp252 = icmp sgt i32 %139, 1114111
  br i1 %cmp252, label %if.then.254, label %if.end.255

if.then.254:                                      ; preds = %do.end.250
  %140 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %default_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %140, i32 0, i32 28
  %141 = load i32, i32* %default_char, align 4
  store i32 %141, i32* %c, align 4
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.254, %do.end.250
  %142 = load i32, i32* %c, align 4
  %cmp256 = icmp slt i32 %142, 65536
  br i1 %cmp256, label %if.then.258, label %if.else.487

if.then.258:                                      ; preds = %if.end.255
  %143 = load i8, i8* %big_endian, align 1
  %tobool259 = trunc i8 %143 to i1
  br i1 %tobool259, label %if.then.260, label %if.else.373

if.then.260:                                      ; preds = %if.then.258
  br label %do.body.261

do.body.261:                                      ; preds = %if.then.260
  %144 = load i64, i64* %produced_chars, align 8
  %add262 = add nsw i64 %144, 2
  store i64 %add262, i64* %produced_chars, align 8
  %145 = load i8, i8* %multibytep, align 1
  %tobool263 = trunc i8 %145 to i1
  br i1 %tobool263, label %if.then.264, label %if.else.364

if.then.264:                                      ; preds = %do.body.261
  %146 = load i32, i32* %c, align 4
  %shr266 = ashr i32 %146, 8
  store i32 %shr266, i32* %ch265, align 4
  %147 = load i32, i32* %ch265, align 4
  %cmp267 = icmp uge i32 %147, 128
  br i1 %cmp267, label %if.then.269, label %if.end.271

if.then.269:                                      ; preds = %if.then.264
  %148 = load i32, i32* %ch265, align 4
  %add270 = add i32 %148, 4194048
  store i32 %add270, i32* %ch265, align 4
  br label %if.end.271

if.end.271:                                       ; preds = %if.then.269, %if.then.264
  br label %do.body.272

do.body.272:                                      ; preds = %if.end.271
  %149 = load i32, i32* %ch265, align 4
  %cmp273 = icmp ule i32 %149, 127
  br i1 %cmp273, label %if.then.275, label %if.else.278

if.then.275:                                      ; preds = %do.body.272
  %150 = load i32, i32* %ch265, align 4
  %conv276 = trunc i32 %150 to i8
  %151 = load i8*, i8** %dst, align 8
  %incdec.ptr277 = getelementptr inbounds i8, i8* %151, i32 1
  store i8* %incdec.ptr277, i8** %dst, align 8
  store i8 %conv276, i8* %151, align 1
  br label %if.end.313

if.else.278:                                      ; preds = %do.body.272
  %152 = load i32, i32* %ch265, align 4
  %cmp279 = icmp ule i32 %152, 2047
  br i1 %cmp279, label %if.then.281, label %if.else.290

if.then.281:                                      ; preds = %if.else.278
  %153 = load i32, i32* %ch265, align 4
  %shr282 = lshr i32 %153, 6
  %or283 = or i32 192, %shr282
  %conv284 = trunc i32 %or283 to i8
  %154 = load i8*, i8** %dst, align 8
  %incdec.ptr285 = getelementptr inbounds i8, i8* %154, i32 1
  store i8* %incdec.ptr285, i8** %dst, align 8
  store i8 %conv284, i8* %154, align 1
  %155 = load i32, i32* %ch265, align 4
  %and286 = and i32 %155, 63
  %or287 = or i32 128, %and286
  %conv288 = trunc i32 %or287 to i8
  %156 = load i8*, i8** %dst, align 8
  %incdec.ptr289 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %incdec.ptr289, i8** %dst, align 8
  store i8 %conv288, i8* %156, align 1
  br label %if.end.312

if.else.290:                                      ; preds = %if.else.278
  %157 = load i32, i32* %ch265, align 4
  %cmp291 = icmp ule i32 %157, 65535
  br i1 %cmp291, label %if.then.293, label %if.else.307

if.then.293:                                      ; preds = %if.else.290
  %158 = load i32, i32* %ch265, align 4
  %shr294 = lshr i32 %158, 12
  %or295 = or i32 224, %shr294
  %conv296 = trunc i32 %or295 to i8
  %159 = load i8*, i8** %dst, align 8
  %incdec.ptr297 = getelementptr inbounds i8, i8* %159, i32 1
  store i8* %incdec.ptr297, i8** %dst, align 8
  store i8 %conv296, i8* %159, align 1
  %160 = load i32, i32* %ch265, align 4
  %shr298 = lshr i32 %160, 6
  %and299 = and i32 %shr298, 63
  %or300 = or i32 128, %and299
  %conv301 = trunc i32 %or300 to i8
  %161 = load i8*, i8** %dst, align 8
  %incdec.ptr302 = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %incdec.ptr302, i8** %dst, align 8
  store i8 %conv301, i8* %161, align 1
  %162 = load i32, i32* %ch265, align 4
  %and303 = and i32 %162, 63
  %or304 = or i32 128, %and303
  %conv305 = trunc i32 %or304 to i8
  %163 = load i8*, i8** %dst, align 8
  %incdec.ptr306 = getelementptr inbounds i8, i8* %163, i32 1
  store i8* %incdec.ptr306, i8** %dst, align 8
  store i8 %conv305, i8* %163, align 1
  br label %if.end.311

if.else.307:                                      ; preds = %if.else.290
  %164 = load i32, i32* %ch265, align 4
  %165 = load i8*, i8** %dst, align 8
  %call308 = call i32 @char_string(i32 %164, i8* %165)
  %166 = load i8*, i8** %dst, align 8
  %idx.ext309 = sext i32 %call308 to i64
  %add.ptr310 = getelementptr inbounds i8, i8* %166, i64 %idx.ext309
  store i8* %add.ptr310, i8** %dst, align 8
  br label %if.end.311

if.end.311:                                       ; preds = %if.else.307, %if.then.293
  br label %if.end.312

if.end.312:                                       ; preds = %if.end.311, %if.then.281
  br label %if.end.313

if.end.313:                                       ; preds = %if.end.312, %if.then.275
  br label %do.end.314

do.end.314:                                       ; preds = %if.end.313
  %167 = load i32, i32* %c, align 4
  %and315 = and i32 %167, 255
  store i32 %and315, i32* %ch265, align 4
  %168 = load i32, i32* %ch265, align 4
  %cmp316 = icmp uge i32 %168, 128
  br i1 %cmp316, label %if.then.318, label %if.end.320

if.then.318:                                      ; preds = %do.end.314
  %169 = load i32, i32* %ch265, align 4
  %add319 = add i32 %169, 4194048
  store i32 %add319, i32* %ch265, align 4
  br label %if.end.320

if.end.320:                                       ; preds = %if.then.318, %do.end.314
  br label %do.body.321

do.body.321:                                      ; preds = %if.end.320
  %170 = load i32, i32* %ch265, align 4
  %cmp322 = icmp ule i32 %170, 127
  br i1 %cmp322, label %if.then.324, label %if.else.327

if.then.324:                                      ; preds = %do.body.321
  %171 = load i32, i32* %ch265, align 4
  %conv325 = trunc i32 %171 to i8
  %172 = load i8*, i8** %dst, align 8
  %incdec.ptr326 = getelementptr inbounds i8, i8* %172, i32 1
  store i8* %incdec.ptr326, i8** %dst, align 8
  store i8 %conv325, i8* %172, align 1
  br label %if.end.362

if.else.327:                                      ; preds = %do.body.321
  %173 = load i32, i32* %ch265, align 4
  %cmp328 = icmp ule i32 %173, 2047
  br i1 %cmp328, label %if.then.330, label %if.else.339

if.then.330:                                      ; preds = %if.else.327
  %174 = load i32, i32* %ch265, align 4
  %shr331 = lshr i32 %174, 6
  %or332 = or i32 192, %shr331
  %conv333 = trunc i32 %or332 to i8
  %175 = load i8*, i8** %dst, align 8
  %incdec.ptr334 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr334, i8** %dst, align 8
  store i8 %conv333, i8* %175, align 1
  %176 = load i32, i32* %ch265, align 4
  %and335 = and i32 %176, 63
  %or336 = or i32 128, %and335
  %conv337 = trunc i32 %or336 to i8
  %177 = load i8*, i8** %dst, align 8
  %incdec.ptr338 = getelementptr inbounds i8, i8* %177, i32 1
  store i8* %incdec.ptr338, i8** %dst, align 8
  store i8 %conv337, i8* %177, align 1
  br label %if.end.361

if.else.339:                                      ; preds = %if.else.327
  %178 = load i32, i32* %ch265, align 4
  %cmp340 = icmp ule i32 %178, 65535
  br i1 %cmp340, label %if.then.342, label %if.else.356

if.then.342:                                      ; preds = %if.else.339
  %179 = load i32, i32* %ch265, align 4
  %shr343 = lshr i32 %179, 12
  %or344 = or i32 224, %shr343
  %conv345 = trunc i32 %or344 to i8
  %180 = load i8*, i8** %dst, align 8
  %incdec.ptr346 = getelementptr inbounds i8, i8* %180, i32 1
  store i8* %incdec.ptr346, i8** %dst, align 8
  store i8 %conv345, i8* %180, align 1
  %181 = load i32, i32* %ch265, align 4
  %shr347 = lshr i32 %181, 6
  %and348 = and i32 %shr347, 63
  %or349 = or i32 128, %and348
  %conv350 = trunc i32 %or349 to i8
  %182 = load i8*, i8** %dst, align 8
  %incdec.ptr351 = getelementptr inbounds i8, i8* %182, i32 1
  store i8* %incdec.ptr351, i8** %dst, align 8
  store i8 %conv350, i8* %182, align 1
  %183 = load i32, i32* %ch265, align 4
  %and352 = and i32 %183, 63
  %or353 = or i32 128, %and352
  %conv354 = trunc i32 %or353 to i8
  %184 = load i8*, i8** %dst, align 8
  %incdec.ptr355 = getelementptr inbounds i8, i8* %184, i32 1
  store i8* %incdec.ptr355, i8** %dst, align 8
  store i8 %conv354, i8* %184, align 1
  br label %if.end.360

if.else.356:                                      ; preds = %if.else.339
  %185 = load i32, i32* %ch265, align 4
  %186 = load i8*, i8** %dst, align 8
  %call357 = call i32 @char_string(i32 %185, i8* %186)
  %187 = load i8*, i8** %dst, align 8
  %idx.ext358 = sext i32 %call357 to i64
  %add.ptr359 = getelementptr inbounds i8, i8* %187, i64 %idx.ext358
  store i8* %add.ptr359, i8** %dst, align 8
  br label %if.end.360

if.end.360:                                       ; preds = %if.else.356, %if.then.342
  br label %if.end.361

if.end.361:                                       ; preds = %if.end.360, %if.then.330
  br label %if.end.362

if.end.362:                                       ; preds = %if.end.361, %if.then.324
  br label %do.end.363

do.end.363:                                       ; preds = %if.end.362
  br label %if.end.371

if.else.364:                                      ; preds = %do.body.261
  %188 = load i32, i32* %c, align 4
  %shr365 = ashr i32 %188, 8
  %conv366 = trunc i32 %shr365 to i8
  %189 = load i8*, i8** %dst, align 8
  %incdec.ptr367 = getelementptr inbounds i8, i8* %189, i32 1
  store i8* %incdec.ptr367, i8** %dst, align 8
  store i8 %conv366, i8* %189, align 1
  %190 = load i32, i32* %c, align 4
  %and368 = and i32 %190, 255
  %conv369 = trunc i32 %and368 to i8
  %191 = load i8*, i8** %dst, align 8
  %incdec.ptr370 = getelementptr inbounds i8, i8* %191, i32 1
  store i8* %incdec.ptr370, i8** %dst, align 8
  store i8 %conv369, i8* %191, align 1
  br label %if.end.371

if.end.371:                                       ; preds = %if.else.364, %do.end.363
  br label %do.end.372

do.end.372:                                       ; preds = %if.end.371
  br label %if.end.486

if.else.373:                                      ; preds = %if.then.258
  br label %do.body.374

do.body.374:                                      ; preds = %if.else.373
  %192 = load i64, i64* %produced_chars, align 8
  %add375 = add nsw i64 %192, 2
  store i64 %add375, i64* %produced_chars, align 8
  %193 = load i8, i8* %multibytep, align 1
  %tobool376 = trunc i8 %193 to i1
  br i1 %tobool376, label %if.then.377, label %if.else.477

if.then.377:                                      ; preds = %do.body.374
  %194 = load i32, i32* %c, align 4
  %and379 = and i32 %194, 255
  store i32 %and379, i32* %ch378, align 4
  %195 = load i32, i32* %ch378, align 4
  %cmp380 = icmp uge i32 %195, 128
  br i1 %cmp380, label %if.then.382, label %if.end.384

if.then.382:                                      ; preds = %if.then.377
  %196 = load i32, i32* %ch378, align 4
  %add383 = add i32 %196, 4194048
  store i32 %add383, i32* %ch378, align 4
  br label %if.end.384

if.end.384:                                       ; preds = %if.then.382, %if.then.377
  br label %do.body.385

do.body.385:                                      ; preds = %if.end.384
  %197 = load i32, i32* %ch378, align 4
  %cmp386 = icmp ule i32 %197, 127
  br i1 %cmp386, label %if.then.388, label %if.else.391

if.then.388:                                      ; preds = %do.body.385
  %198 = load i32, i32* %ch378, align 4
  %conv389 = trunc i32 %198 to i8
  %199 = load i8*, i8** %dst, align 8
  %incdec.ptr390 = getelementptr inbounds i8, i8* %199, i32 1
  store i8* %incdec.ptr390, i8** %dst, align 8
  store i8 %conv389, i8* %199, align 1
  br label %if.end.426

if.else.391:                                      ; preds = %do.body.385
  %200 = load i32, i32* %ch378, align 4
  %cmp392 = icmp ule i32 %200, 2047
  br i1 %cmp392, label %if.then.394, label %if.else.403

if.then.394:                                      ; preds = %if.else.391
  %201 = load i32, i32* %ch378, align 4
  %shr395 = lshr i32 %201, 6
  %or396 = or i32 192, %shr395
  %conv397 = trunc i32 %or396 to i8
  %202 = load i8*, i8** %dst, align 8
  %incdec.ptr398 = getelementptr inbounds i8, i8* %202, i32 1
  store i8* %incdec.ptr398, i8** %dst, align 8
  store i8 %conv397, i8* %202, align 1
  %203 = load i32, i32* %ch378, align 4
  %and399 = and i32 %203, 63
  %or400 = or i32 128, %and399
  %conv401 = trunc i32 %or400 to i8
  %204 = load i8*, i8** %dst, align 8
  %incdec.ptr402 = getelementptr inbounds i8, i8* %204, i32 1
  store i8* %incdec.ptr402, i8** %dst, align 8
  store i8 %conv401, i8* %204, align 1
  br label %if.end.425

if.else.403:                                      ; preds = %if.else.391
  %205 = load i32, i32* %ch378, align 4
  %cmp404 = icmp ule i32 %205, 65535
  br i1 %cmp404, label %if.then.406, label %if.else.420

if.then.406:                                      ; preds = %if.else.403
  %206 = load i32, i32* %ch378, align 4
  %shr407 = lshr i32 %206, 12
  %or408 = or i32 224, %shr407
  %conv409 = trunc i32 %or408 to i8
  %207 = load i8*, i8** %dst, align 8
  %incdec.ptr410 = getelementptr inbounds i8, i8* %207, i32 1
  store i8* %incdec.ptr410, i8** %dst, align 8
  store i8 %conv409, i8* %207, align 1
  %208 = load i32, i32* %ch378, align 4
  %shr411 = lshr i32 %208, 6
  %and412 = and i32 %shr411, 63
  %or413 = or i32 128, %and412
  %conv414 = trunc i32 %or413 to i8
  %209 = load i8*, i8** %dst, align 8
  %incdec.ptr415 = getelementptr inbounds i8, i8* %209, i32 1
  store i8* %incdec.ptr415, i8** %dst, align 8
  store i8 %conv414, i8* %209, align 1
  %210 = load i32, i32* %ch378, align 4
  %and416 = and i32 %210, 63
  %or417 = or i32 128, %and416
  %conv418 = trunc i32 %or417 to i8
  %211 = load i8*, i8** %dst, align 8
  %incdec.ptr419 = getelementptr inbounds i8, i8* %211, i32 1
  store i8* %incdec.ptr419, i8** %dst, align 8
  store i8 %conv418, i8* %211, align 1
  br label %if.end.424

if.else.420:                                      ; preds = %if.else.403
  %212 = load i32, i32* %ch378, align 4
  %213 = load i8*, i8** %dst, align 8
  %call421 = call i32 @char_string(i32 %212, i8* %213)
  %214 = load i8*, i8** %dst, align 8
  %idx.ext422 = sext i32 %call421 to i64
  %add.ptr423 = getelementptr inbounds i8, i8* %214, i64 %idx.ext422
  store i8* %add.ptr423, i8** %dst, align 8
  br label %if.end.424

if.end.424:                                       ; preds = %if.else.420, %if.then.406
  br label %if.end.425

if.end.425:                                       ; preds = %if.end.424, %if.then.394
  br label %if.end.426

if.end.426:                                       ; preds = %if.end.425, %if.then.388
  br label %do.end.427

do.end.427:                                       ; preds = %if.end.426
  %215 = load i32, i32* %c, align 4
  %shr428 = ashr i32 %215, 8
  store i32 %shr428, i32* %ch378, align 4
  %216 = load i32, i32* %ch378, align 4
  %cmp429 = icmp uge i32 %216, 128
  br i1 %cmp429, label %if.then.431, label %if.end.433

if.then.431:                                      ; preds = %do.end.427
  %217 = load i32, i32* %ch378, align 4
  %add432 = add i32 %217, 4194048
  store i32 %add432, i32* %ch378, align 4
  br label %if.end.433

if.end.433:                                       ; preds = %if.then.431, %do.end.427
  br label %do.body.434

do.body.434:                                      ; preds = %if.end.433
  %218 = load i32, i32* %ch378, align 4
  %cmp435 = icmp ule i32 %218, 127
  br i1 %cmp435, label %if.then.437, label %if.else.440

if.then.437:                                      ; preds = %do.body.434
  %219 = load i32, i32* %ch378, align 4
  %conv438 = trunc i32 %219 to i8
  %220 = load i8*, i8** %dst, align 8
  %incdec.ptr439 = getelementptr inbounds i8, i8* %220, i32 1
  store i8* %incdec.ptr439, i8** %dst, align 8
  store i8 %conv438, i8* %220, align 1
  br label %if.end.475

if.else.440:                                      ; preds = %do.body.434
  %221 = load i32, i32* %ch378, align 4
  %cmp441 = icmp ule i32 %221, 2047
  br i1 %cmp441, label %if.then.443, label %if.else.452

if.then.443:                                      ; preds = %if.else.440
  %222 = load i32, i32* %ch378, align 4
  %shr444 = lshr i32 %222, 6
  %or445 = or i32 192, %shr444
  %conv446 = trunc i32 %or445 to i8
  %223 = load i8*, i8** %dst, align 8
  %incdec.ptr447 = getelementptr inbounds i8, i8* %223, i32 1
  store i8* %incdec.ptr447, i8** %dst, align 8
  store i8 %conv446, i8* %223, align 1
  %224 = load i32, i32* %ch378, align 4
  %and448 = and i32 %224, 63
  %or449 = or i32 128, %and448
  %conv450 = trunc i32 %or449 to i8
  %225 = load i8*, i8** %dst, align 8
  %incdec.ptr451 = getelementptr inbounds i8, i8* %225, i32 1
  store i8* %incdec.ptr451, i8** %dst, align 8
  store i8 %conv450, i8* %225, align 1
  br label %if.end.474

if.else.452:                                      ; preds = %if.else.440
  %226 = load i32, i32* %ch378, align 4
  %cmp453 = icmp ule i32 %226, 65535
  br i1 %cmp453, label %if.then.455, label %if.else.469

if.then.455:                                      ; preds = %if.else.452
  %227 = load i32, i32* %ch378, align 4
  %shr456 = lshr i32 %227, 12
  %or457 = or i32 224, %shr456
  %conv458 = trunc i32 %or457 to i8
  %228 = load i8*, i8** %dst, align 8
  %incdec.ptr459 = getelementptr inbounds i8, i8* %228, i32 1
  store i8* %incdec.ptr459, i8** %dst, align 8
  store i8 %conv458, i8* %228, align 1
  %229 = load i32, i32* %ch378, align 4
  %shr460 = lshr i32 %229, 6
  %and461 = and i32 %shr460, 63
  %or462 = or i32 128, %and461
  %conv463 = trunc i32 %or462 to i8
  %230 = load i8*, i8** %dst, align 8
  %incdec.ptr464 = getelementptr inbounds i8, i8* %230, i32 1
  store i8* %incdec.ptr464, i8** %dst, align 8
  store i8 %conv463, i8* %230, align 1
  %231 = load i32, i32* %ch378, align 4
  %and465 = and i32 %231, 63
  %or466 = or i32 128, %and465
  %conv467 = trunc i32 %or466 to i8
  %232 = load i8*, i8** %dst, align 8
  %incdec.ptr468 = getelementptr inbounds i8, i8* %232, i32 1
  store i8* %incdec.ptr468, i8** %dst, align 8
  store i8 %conv467, i8* %232, align 1
  br label %if.end.473

if.else.469:                                      ; preds = %if.else.452
  %233 = load i32, i32* %ch378, align 4
  %234 = load i8*, i8** %dst, align 8
  %call470 = call i32 @char_string(i32 %233, i8* %234)
  %235 = load i8*, i8** %dst, align 8
  %idx.ext471 = sext i32 %call470 to i64
  %add.ptr472 = getelementptr inbounds i8, i8* %235, i64 %idx.ext471
  store i8* %add.ptr472, i8** %dst, align 8
  br label %if.end.473

if.end.473:                                       ; preds = %if.else.469, %if.then.455
  br label %if.end.474

if.end.474:                                       ; preds = %if.end.473, %if.then.443
  br label %if.end.475

if.end.475:                                       ; preds = %if.end.474, %if.then.437
  br label %do.end.476

do.end.476:                                       ; preds = %if.end.475
  br label %if.end.484

if.else.477:                                      ; preds = %do.body.374
  %236 = load i32, i32* %c, align 4
  %and478 = and i32 %236, 255
  %conv479 = trunc i32 %and478 to i8
  %237 = load i8*, i8** %dst, align 8
  %incdec.ptr480 = getelementptr inbounds i8, i8* %237, i32 1
  store i8* %incdec.ptr480, i8** %dst, align 8
  store i8 %conv479, i8* %237, align 1
  %238 = load i32, i32* %c, align 4
  %shr481 = ashr i32 %238, 8
  %conv482 = trunc i32 %shr481 to i8
  %239 = load i8*, i8** %dst, align 8
  %incdec.ptr483 = getelementptr inbounds i8, i8* %239, i32 1
  store i8* %incdec.ptr483, i8** %dst, align 8
  store i8 %conv482, i8* %239, align 1
  br label %if.end.484

if.end.484:                                       ; preds = %if.else.477, %do.end.476
  br label %do.end.485

do.end.485:                                       ; preds = %if.end.484
  br label %if.end.486

if.end.486:                                       ; preds = %do.end.485, %do.end.372
  br label %if.end.948

if.else.487:                                      ; preds = %if.end.255
  %240 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %240, 65536
  store i32 %sub, i32* %c, align 4
  %241 = load i32, i32* %c, align 4
  %shr488 = ashr i32 %241, 10
  %add489 = add nsw i32 %shr488, 55296
  store i32 %add489, i32* %c1, align 4
  %242 = load i32, i32* %c, align 4
  %and490 = and i32 %242, 1023
  %add491 = add nsw i32 %and490, 56320
  store i32 %add491, i32* %c2, align 4
  %243 = load i8, i8* %big_endian, align 1
  %tobool492 = trunc i8 %243 to i1
  br i1 %tobool492, label %if.then.493, label %if.else.720

if.then.493:                                      ; preds = %if.else.487
  br label %do.body.494

do.body.494:                                      ; preds = %if.then.493
  br label %do.body.495

do.body.495:                                      ; preds = %do.body.494
  %244 = load i64, i64* %produced_chars, align 8
  %add496 = add nsw i64 %244, 2
  store i64 %add496, i64* %produced_chars, align 8
  %245 = load i8, i8* %multibytep, align 1
  %tobool497 = trunc i8 %245 to i1
  br i1 %tobool497, label %if.then.498, label %if.else.598

if.then.498:                                      ; preds = %do.body.495
  %246 = load i32, i32* %c1, align 4
  %shr500 = ashr i32 %246, 8
  store i32 %shr500, i32* %ch499, align 4
  %247 = load i32, i32* %ch499, align 4
  %cmp501 = icmp uge i32 %247, 128
  br i1 %cmp501, label %if.then.503, label %if.end.505

if.then.503:                                      ; preds = %if.then.498
  %248 = load i32, i32* %ch499, align 4
  %add504 = add i32 %248, 4194048
  store i32 %add504, i32* %ch499, align 4
  br label %if.end.505

if.end.505:                                       ; preds = %if.then.503, %if.then.498
  br label %do.body.506

do.body.506:                                      ; preds = %if.end.505
  %249 = load i32, i32* %ch499, align 4
  %cmp507 = icmp ule i32 %249, 127
  br i1 %cmp507, label %if.then.509, label %if.else.512

if.then.509:                                      ; preds = %do.body.506
  %250 = load i32, i32* %ch499, align 4
  %conv510 = trunc i32 %250 to i8
  %251 = load i8*, i8** %dst, align 8
  %incdec.ptr511 = getelementptr inbounds i8, i8* %251, i32 1
  store i8* %incdec.ptr511, i8** %dst, align 8
  store i8 %conv510, i8* %251, align 1
  br label %if.end.547

if.else.512:                                      ; preds = %do.body.506
  %252 = load i32, i32* %ch499, align 4
  %cmp513 = icmp ule i32 %252, 2047
  br i1 %cmp513, label %if.then.515, label %if.else.524

if.then.515:                                      ; preds = %if.else.512
  %253 = load i32, i32* %ch499, align 4
  %shr516 = lshr i32 %253, 6
  %or517 = or i32 192, %shr516
  %conv518 = trunc i32 %or517 to i8
  %254 = load i8*, i8** %dst, align 8
  %incdec.ptr519 = getelementptr inbounds i8, i8* %254, i32 1
  store i8* %incdec.ptr519, i8** %dst, align 8
  store i8 %conv518, i8* %254, align 1
  %255 = load i32, i32* %ch499, align 4
  %and520 = and i32 %255, 63
  %or521 = or i32 128, %and520
  %conv522 = trunc i32 %or521 to i8
  %256 = load i8*, i8** %dst, align 8
  %incdec.ptr523 = getelementptr inbounds i8, i8* %256, i32 1
  store i8* %incdec.ptr523, i8** %dst, align 8
  store i8 %conv522, i8* %256, align 1
  br label %if.end.546

if.else.524:                                      ; preds = %if.else.512
  %257 = load i32, i32* %ch499, align 4
  %cmp525 = icmp ule i32 %257, 65535
  br i1 %cmp525, label %if.then.527, label %if.else.541

if.then.527:                                      ; preds = %if.else.524
  %258 = load i32, i32* %ch499, align 4
  %shr528 = lshr i32 %258, 12
  %or529 = or i32 224, %shr528
  %conv530 = trunc i32 %or529 to i8
  %259 = load i8*, i8** %dst, align 8
  %incdec.ptr531 = getelementptr inbounds i8, i8* %259, i32 1
  store i8* %incdec.ptr531, i8** %dst, align 8
  store i8 %conv530, i8* %259, align 1
  %260 = load i32, i32* %ch499, align 4
  %shr532 = lshr i32 %260, 6
  %and533 = and i32 %shr532, 63
  %or534 = or i32 128, %and533
  %conv535 = trunc i32 %or534 to i8
  %261 = load i8*, i8** %dst, align 8
  %incdec.ptr536 = getelementptr inbounds i8, i8* %261, i32 1
  store i8* %incdec.ptr536, i8** %dst, align 8
  store i8 %conv535, i8* %261, align 1
  %262 = load i32, i32* %ch499, align 4
  %and537 = and i32 %262, 63
  %or538 = or i32 128, %and537
  %conv539 = trunc i32 %or538 to i8
  %263 = load i8*, i8** %dst, align 8
  %incdec.ptr540 = getelementptr inbounds i8, i8* %263, i32 1
  store i8* %incdec.ptr540, i8** %dst, align 8
  store i8 %conv539, i8* %263, align 1
  br label %if.end.545

if.else.541:                                      ; preds = %if.else.524
  %264 = load i32, i32* %ch499, align 4
  %265 = load i8*, i8** %dst, align 8
  %call542 = call i32 @char_string(i32 %264, i8* %265)
  %266 = load i8*, i8** %dst, align 8
  %idx.ext543 = sext i32 %call542 to i64
  %add.ptr544 = getelementptr inbounds i8, i8* %266, i64 %idx.ext543
  store i8* %add.ptr544, i8** %dst, align 8
  br label %if.end.545

if.end.545:                                       ; preds = %if.else.541, %if.then.527
  br label %if.end.546

if.end.546:                                       ; preds = %if.end.545, %if.then.515
  br label %if.end.547

if.end.547:                                       ; preds = %if.end.546, %if.then.509
  br label %do.end.548

do.end.548:                                       ; preds = %if.end.547
  %267 = load i32, i32* %c1, align 4
  %and549 = and i32 %267, 255
  store i32 %and549, i32* %ch499, align 4
  %268 = load i32, i32* %ch499, align 4
  %cmp550 = icmp uge i32 %268, 128
  br i1 %cmp550, label %if.then.552, label %if.end.554

if.then.552:                                      ; preds = %do.end.548
  %269 = load i32, i32* %ch499, align 4
  %add553 = add i32 %269, 4194048
  store i32 %add553, i32* %ch499, align 4
  br label %if.end.554

if.end.554:                                       ; preds = %if.then.552, %do.end.548
  br label %do.body.555

do.body.555:                                      ; preds = %if.end.554
  %270 = load i32, i32* %ch499, align 4
  %cmp556 = icmp ule i32 %270, 127
  br i1 %cmp556, label %if.then.558, label %if.else.561

if.then.558:                                      ; preds = %do.body.555
  %271 = load i32, i32* %ch499, align 4
  %conv559 = trunc i32 %271 to i8
  %272 = load i8*, i8** %dst, align 8
  %incdec.ptr560 = getelementptr inbounds i8, i8* %272, i32 1
  store i8* %incdec.ptr560, i8** %dst, align 8
  store i8 %conv559, i8* %272, align 1
  br label %if.end.596

if.else.561:                                      ; preds = %do.body.555
  %273 = load i32, i32* %ch499, align 4
  %cmp562 = icmp ule i32 %273, 2047
  br i1 %cmp562, label %if.then.564, label %if.else.573

if.then.564:                                      ; preds = %if.else.561
  %274 = load i32, i32* %ch499, align 4
  %shr565 = lshr i32 %274, 6
  %or566 = or i32 192, %shr565
  %conv567 = trunc i32 %or566 to i8
  %275 = load i8*, i8** %dst, align 8
  %incdec.ptr568 = getelementptr inbounds i8, i8* %275, i32 1
  store i8* %incdec.ptr568, i8** %dst, align 8
  store i8 %conv567, i8* %275, align 1
  %276 = load i32, i32* %ch499, align 4
  %and569 = and i32 %276, 63
  %or570 = or i32 128, %and569
  %conv571 = trunc i32 %or570 to i8
  %277 = load i8*, i8** %dst, align 8
  %incdec.ptr572 = getelementptr inbounds i8, i8* %277, i32 1
  store i8* %incdec.ptr572, i8** %dst, align 8
  store i8 %conv571, i8* %277, align 1
  br label %if.end.595

if.else.573:                                      ; preds = %if.else.561
  %278 = load i32, i32* %ch499, align 4
  %cmp574 = icmp ule i32 %278, 65535
  br i1 %cmp574, label %if.then.576, label %if.else.590

if.then.576:                                      ; preds = %if.else.573
  %279 = load i32, i32* %ch499, align 4
  %shr577 = lshr i32 %279, 12
  %or578 = or i32 224, %shr577
  %conv579 = trunc i32 %or578 to i8
  %280 = load i8*, i8** %dst, align 8
  %incdec.ptr580 = getelementptr inbounds i8, i8* %280, i32 1
  store i8* %incdec.ptr580, i8** %dst, align 8
  store i8 %conv579, i8* %280, align 1
  %281 = load i32, i32* %ch499, align 4
  %shr581 = lshr i32 %281, 6
  %and582 = and i32 %shr581, 63
  %or583 = or i32 128, %and582
  %conv584 = trunc i32 %or583 to i8
  %282 = load i8*, i8** %dst, align 8
  %incdec.ptr585 = getelementptr inbounds i8, i8* %282, i32 1
  store i8* %incdec.ptr585, i8** %dst, align 8
  store i8 %conv584, i8* %282, align 1
  %283 = load i32, i32* %ch499, align 4
  %and586 = and i32 %283, 63
  %or587 = or i32 128, %and586
  %conv588 = trunc i32 %or587 to i8
  %284 = load i8*, i8** %dst, align 8
  %incdec.ptr589 = getelementptr inbounds i8, i8* %284, i32 1
  store i8* %incdec.ptr589, i8** %dst, align 8
  store i8 %conv588, i8* %284, align 1
  br label %if.end.594

if.else.590:                                      ; preds = %if.else.573
  %285 = load i32, i32* %ch499, align 4
  %286 = load i8*, i8** %dst, align 8
  %call591 = call i32 @char_string(i32 %285, i8* %286)
  %287 = load i8*, i8** %dst, align 8
  %idx.ext592 = sext i32 %call591 to i64
  %add.ptr593 = getelementptr inbounds i8, i8* %287, i64 %idx.ext592
  store i8* %add.ptr593, i8** %dst, align 8
  br label %if.end.594

if.end.594:                                       ; preds = %if.else.590, %if.then.576
  br label %if.end.595

if.end.595:                                       ; preds = %if.end.594, %if.then.564
  br label %if.end.596

if.end.596:                                       ; preds = %if.end.595, %if.then.558
  br label %do.end.597

do.end.597:                                       ; preds = %if.end.596
  br label %if.end.605

if.else.598:                                      ; preds = %do.body.495
  %288 = load i32, i32* %c1, align 4
  %shr599 = ashr i32 %288, 8
  %conv600 = trunc i32 %shr599 to i8
  %289 = load i8*, i8** %dst, align 8
  %incdec.ptr601 = getelementptr inbounds i8, i8* %289, i32 1
  store i8* %incdec.ptr601, i8** %dst, align 8
  store i8 %conv600, i8* %289, align 1
  %290 = load i32, i32* %c1, align 4
  %and602 = and i32 %290, 255
  %conv603 = trunc i32 %and602 to i8
  %291 = load i8*, i8** %dst, align 8
  %incdec.ptr604 = getelementptr inbounds i8, i8* %291, i32 1
  store i8* %incdec.ptr604, i8** %dst, align 8
  store i8 %conv603, i8* %291, align 1
  br label %if.end.605

if.end.605:                                       ; preds = %if.else.598, %do.end.597
  br label %do.end.606

do.end.606:                                       ; preds = %if.end.605
  br label %do.body.607

do.body.607:                                      ; preds = %do.end.606
  %292 = load i64, i64* %produced_chars, align 8
  %add608 = add nsw i64 %292, 2
  store i64 %add608, i64* %produced_chars, align 8
  %293 = load i8, i8* %multibytep, align 1
  %tobool609 = trunc i8 %293 to i1
  br i1 %tobool609, label %if.then.610, label %if.else.710

if.then.610:                                      ; preds = %do.body.607
  %294 = load i32, i32* %c2, align 4
  %shr612 = ashr i32 %294, 8
  store i32 %shr612, i32* %ch611, align 4
  %295 = load i32, i32* %ch611, align 4
  %cmp613 = icmp uge i32 %295, 128
  br i1 %cmp613, label %if.then.615, label %if.end.617

if.then.615:                                      ; preds = %if.then.610
  %296 = load i32, i32* %ch611, align 4
  %add616 = add i32 %296, 4194048
  store i32 %add616, i32* %ch611, align 4
  br label %if.end.617

if.end.617:                                       ; preds = %if.then.615, %if.then.610
  br label %do.body.618

do.body.618:                                      ; preds = %if.end.617
  %297 = load i32, i32* %ch611, align 4
  %cmp619 = icmp ule i32 %297, 127
  br i1 %cmp619, label %if.then.621, label %if.else.624

if.then.621:                                      ; preds = %do.body.618
  %298 = load i32, i32* %ch611, align 4
  %conv622 = trunc i32 %298 to i8
  %299 = load i8*, i8** %dst, align 8
  %incdec.ptr623 = getelementptr inbounds i8, i8* %299, i32 1
  store i8* %incdec.ptr623, i8** %dst, align 8
  store i8 %conv622, i8* %299, align 1
  br label %if.end.659

if.else.624:                                      ; preds = %do.body.618
  %300 = load i32, i32* %ch611, align 4
  %cmp625 = icmp ule i32 %300, 2047
  br i1 %cmp625, label %if.then.627, label %if.else.636

if.then.627:                                      ; preds = %if.else.624
  %301 = load i32, i32* %ch611, align 4
  %shr628 = lshr i32 %301, 6
  %or629 = or i32 192, %shr628
  %conv630 = trunc i32 %or629 to i8
  %302 = load i8*, i8** %dst, align 8
  %incdec.ptr631 = getelementptr inbounds i8, i8* %302, i32 1
  store i8* %incdec.ptr631, i8** %dst, align 8
  store i8 %conv630, i8* %302, align 1
  %303 = load i32, i32* %ch611, align 4
  %and632 = and i32 %303, 63
  %or633 = or i32 128, %and632
  %conv634 = trunc i32 %or633 to i8
  %304 = load i8*, i8** %dst, align 8
  %incdec.ptr635 = getelementptr inbounds i8, i8* %304, i32 1
  store i8* %incdec.ptr635, i8** %dst, align 8
  store i8 %conv634, i8* %304, align 1
  br label %if.end.658

if.else.636:                                      ; preds = %if.else.624
  %305 = load i32, i32* %ch611, align 4
  %cmp637 = icmp ule i32 %305, 65535
  br i1 %cmp637, label %if.then.639, label %if.else.653

if.then.639:                                      ; preds = %if.else.636
  %306 = load i32, i32* %ch611, align 4
  %shr640 = lshr i32 %306, 12
  %or641 = or i32 224, %shr640
  %conv642 = trunc i32 %or641 to i8
  %307 = load i8*, i8** %dst, align 8
  %incdec.ptr643 = getelementptr inbounds i8, i8* %307, i32 1
  store i8* %incdec.ptr643, i8** %dst, align 8
  store i8 %conv642, i8* %307, align 1
  %308 = load i32, i32* %ch611, align 4
  %shr644 = lshr i32 %308, 6
  %and645 = and i32 %shr644, 63
  %or646 = or i32 128, %and645
  %conv647 = trunc i32 %or646 to i8
  %309 = load i8*, i8** %dst, align 8
  %incdec.ptr648 = getelementptr inbounds i8, i8* %309, i32 1
  store i8* %incdec.ptr648, i8** %dst, align 8
  store i8 %conv647, i8* %309, align 1
  %310 = load i32, i32* %ch611, align 4
  %and649 = and i32 %310, 63
  %or650 = or i32 128, %and649
  %conv651 = trunc i32 %or650 to i8
  %311 = load i8*, i8** %dst, align 8
  %incdec.ptr652 = getelementptr inbounds i8, i8* %311, i32 1
  store i8* %incdec.ptr652, i8** %dst, align 8
  store i8 %conv651, i8* %311, align 1
  br label %if.end.657

if.else.653:                                      ; preds = %if.else.636
  %312 = load i32, i32* %ch611, align 4
  %313 = load i8*, i8** %dst, align 8
  %call654 = call i32 @char_string(i32 %312, i8* %313)
  %314 = load i8*, i8** %dst, align 8
  %idx.ext655 = sext i32 %call654 to i64
  %add.ptr656 = getelementptr inbounds i8, i8* %314, i64 %idx.ext655
  store i8* %add.ptr656, i8** %dst, align 8
  br label %if.end.657

if.end.657:                                       ; preds = %if.else.653, %if.then.639
  br label %if.end.658

if.end.658:                                       ; preds = %if.end.657, %if.then.627
  br label %if.end.659

if.end.659:                                       ; preds = %if.end.658, %if.then.621
  br label %do.end.660

do.end.660:                                       ; preds = %if.end.659
  %315 = load i32, i32* %c2, align 4
  %and661 = and i32 %315, 255
  store i32 %and661, i32* %ch611, align 4
  %316 = load i32, i32* %ch611, align 4
  %cmp662 = icmp uge i32 %316, 128
  br i1 %cmp662, label %if.then.664, label %if.end.666

if.then.664:                                      ; preds = %do.end.660
  %317 = load i32, i32* %ch611, align 4
  %add665 = add i32 %317, 4194048
  store i32 %add665, i32* %ch611, align 4
  br label %if.end.666

if.end.666:                                       ; preds = %if.then.664, %do.end.660
  br label %do.body.667

do.body.667:                                      ; preds = %if.end.666
  %318 = load i32, i32* %ch611, align 4
  %cmp668 = icmp ule i32 %318, 127
  br i1 %cmp668, label %if.then.670, label %if.else.673

if.then.670:                                      ; preds = %do.body.667
  %319 = load i32, i32* %ch611, align 4
  %conv671 = trunc i32 %319 to i8
  %320 = load i8*, i8** %dst, align 8
  %incdec.ptr672 = getelementptr inbounds i8, i8* %320, i32 1
  store i8* %incdec.ptr672, i8** %dst, align 8
  store i8 %conv671, i8* %320, align 1
  br label %if.end.708

if.else.673:                                      ; preds = %do.body.667
  %321 = load i32, i32* %ch611, align 4
  %cmp674 = icmp ule i32 %321, 2047
  br i1 %cmp674, label %if.then.676, label %if.else.685

if.then.676:                                      ; preds = %if.else.673
  %322 = load i32, i32* %ch611, align 4
  %shr677 = lshr i32 %322, 6
  %or678 = or i32 192, %shr677
  %conv679 = trunc i32 %or678 to i8
  %323 = load i8*, i8** %dst, align 8
  %incdec.ptr680 = getelementptr inbounds i8, i8* %323, i32 1
  store i8* %incdec.ptr680, i8** %dst, align 8
  store i8 %conv679, i8* %323, align 1
  %324 = load i32, i32* %ch611, align 4
  %and681 = and i32 %324, 63
  %or682 = or i32 128, %and681
  %conv683 = trunc i32 %or682 to i8
  %325 = load i8*, i8** %dst, align 8
  %incdec.ptr684 = getelementptr inbounds i8, i8* %325, i32 1
  store i8* %incdec.ptr684, i8** %dst, align 8
  store i8 %conv683, i8* %325, align 1
  br label %if.end.707

if.else.685:                                      ; preds = %if.else.673
  %326 = load i32, i32* %ch611, align 4
  %cmp686 = icmp ule i32 %326, 65535
  br i1 %cmp686, label %if.then.688, label %if.else.702

if.then.688:                                      ; preds = %if.else.685
  %327 = load i32, i32* %ch611, align 4
  %shr689 = lshr i32 %327, 12
  %or690 = or i32 224, %shr689
  %conv691 = trunc i32 %or690 to i8
  %328 = load i8*, i8** %dst, align 8
  %incdec.ptr692 = getelementptr inbounds i8, i8* %328, i32 1
  store i8* %incdec.ptr692, i8** %dst, align 8
  store i8 %conv691, i8* %328, align 1
  %329 = load i32, i32* %ch611, align 4
  %shr693 = lshr i32 %329, 6
  %and694 = and i32 %shr693, 63
  %or695 = or i32 128, %and694
  %conv696 = trunc i32 %or695 to i8
  %330 = load i8*, i8** %dst, align 8
  %incdec.ptr697 = getelementptr inbounds i8, i8* %330, i32 1
  store i8* %incdec.ptr697, i8** %dst, align 8
  store i8 %conv696, i8* %330, align 1
  %331 = load i32, i32* %ch611, align 4
  %and698 = and i32 %331, 63
  %or699 = or i32 128, %and698
  %conv700 = trunc i32 %or699 to i8
  %332 = load i8*, i8** %dst, align 8
  %incdec.ptr701 = getelementptr inbounds i8, i8* %332, i32 1
  store i8* %incdec.ptr701, i8** %dst, align 8
  store i8 %conv700, i8* %332, align 1
  br label %if.end.706

if.else.702:                                      ; preds = %if.else.685
  %333 = load i32, i32* %ch611, align 4
  %334 = load i8*, i8** %dst, align 8
  %call703 = call i32 @char_string(i32 %333, i8* %334)
  %335 = load i8*, i8** %dst, align 8
  %idx.ext704 = sext i32 %call703 to i64
  %add.ptr705 = getelementptr inbounds i8, i8* %335, i64 %idx.ext704
  store i8* %add.ptr705, i8** %dst, align 8
  br label %if.end.706

if.end.706:                                       ; preds = %if.else.702, %if.then.688
  br label %if.end.707

if.end.707:                                       ; preds = %if.end.706, %if.then.676
  br label %if.end.708

if.end.708:                                       ; preds = %if.end.707, %if.then.670
  br label %do.end.709

do.end.709:                                       ; preds = %if.end.708
  br label %if.end.717

if.else.710:                                      ; preds = %do.body.607
  %336 = load i32, i32* %c2, align 4
  %shr711 = ashr i32 %336, 8
  %conv712 = trunc i32 %shr711 to i8
  %337 = load i8*, i8** %dst, align 8
  %incdec.ptr713 = getelementptr inbounds i8, i8* %337, i32 1
  store i8* %incdec.ptr713, i8** %dst, align 8
  store i8 %conv712, i8* %337, align 1
  %338 = load i32, i32* %c2, align 4
  %and714 = and i32 %338, 255
  %conv715 = trunc i32 %and714 to i8
  %339 = load i8*, i8** %dst, align 8
  %incdec.ptr716 = getelementptr inbounds i8, i8* %339, i32 1
  store i8* %incdec.ptr716, i8** %dst, align 8
  store i8 %conv715, i8* %339, align 1
  br label %if.end.717

if.end.717:                                       ; preds = %if.else.710, %do.end.709
  br label %do.end.718

do.end.718:                                       ; preds = %if.end.717
  br label %do.end.719

do.end.719:                                       ; preds = %do.end.718
  br label %if.end.947

if.else.720:                                      ; preds = %if.else.487
  br label %do.body.721

do.body.721:                                      ; preds = %if.else.720
  br label %do.body.722

do.body.722:                                      ; preds = %do.body.721
  %340 = load i64, i64* %produced_chars, align 8
  %add723 = add nsw i64 %340, 2
  store i64 %add723, i64* %produced_chars, align 8
  %341 = load i8, i8* %multibytep, align 1
  %tobool724 = trunc i8 %341 to i1
  br i1 %tobool724, label %if.then.725, label %if.else.825

if.then.725:                                      ; preds = %do.body.722
  %342 = load i32, i32* %c1, align 4
  %and727 = and i32 %342, 255
  store i32 %and727, i32* %ch726, align 4
  %343 = load i32, i32* %ch726, align 4
  %cmp728 = icmp uge i32 %343, 128
  br i1 %cmp728, label %if.then.730, label %if.end.732

if.then.730:                                      ; preds = %if.then.725
  %344 = load i32, i32* %ch726, align 4
  %add731 = add i32 %344, 4194048
  store i32 %add731, i32* %ch726, align 4
  br label %if.end.732

if.end.732:                                       ; preds = %if.then.730, %if.then.725
  br label %do.body.733

do.body.733:                                      ; preds = %if.end.732
  %345 = load i32, i32* %ch726, align 4
  %cmp734 = icmp ule i32 %345, 127
  br i1 %cmp734, label %if.then.736, label %if.else.739

if.then.736:                                      ; preds = %do.body.733
  %346 = load i32, i32* %ch726, align 4
  %conv737 = trunc i32 %346 to i8
  %347 = load i8*, i8** %dst, align 8
  %incdec.ptr738 = getelementptr inbounds i8, i8* %347, i32 1
  store i8* %incdec.ptr738, i8** %dst, align 8
  store i8 %conv737, i8* %347, align 1
  br label %if.end.774

if.else.739:                                      ; preds = %do.body.733
  %348 = load i32, i32* %ch726, align 4
  %cmp740 = icmp ule i32 %348, 2047
  br i1 %cmp740, label %if.then.742, label %if.else.751

if.then.742:                                      ; preds = %if.else.739
  %349 = load i32, i32* %ch726, align 4
  %shr743 = lshr i32 %349, 6
  %or744 = or i32 192, %shr743
  %conv745 = trunc i32 %or744 to i8
  %350 = load i8*, i8** %dst, align 8
  %incdec.ptr746 = getelementptr inbounds i8, i8* %350, i32 1
  store i8* %incdec.ptr746, i8** %dst, align 8
  store i8 %conv745, i8* %350, align 1
  %351 = load i32, i32* %ch726, align 4
  %and747 = and i32 %351, 63
  %or748 = or i32 128, %and747
  %conv749 = trunc i32 %or748 to i8
  %352 = load i8*, i8** %dst, align 8
  %incdec.ptr750 = getelementptr inbounds i8, i8* %352, i32 1
  store i8* %incdec.ptr750, i8** %dst, align 8
  store i8 %conv749, i8* %352, align 1
  br label %if.end.773

if.else.751:                                      ; preds = %if.else.739
  %353 = load i32, i32* %ch726, align 4
  %cmp752 = icmp ule i32 %353, 65535
  br i1 %cmp752, label %if.then.754, label %if.else.768

if.then.754:                                      ; preds = %if.else.751
  %354 = load i32, i32* %ch726, align 4
  %shr755 = lshr i32 %354, 12
  %or756 = or i32 224, %shr755
  %conv757 = trunc i32 %or756 to i8
  %355 = load i8*, i8** %dst, align 8
  %incdec.ptr758 = getelementptr inbounds i8, i8* %355, i32 1
  store i8* %incdec.ptr758, i8** %dst, align 8
  store i8 %conv757, i8* %355, align 1
  %356 = load i32, i32* %ch726, align 4
  %shr759 = lshr i32 %356, 6
  %and760 = and i32 %shr759, 63
  %or761 = or i32 128, %and760
  %conv762 = trunc i32 %or761 to i8
  %357 = load i8*, i8** %dst, align 8
  %incdec.ptr763 = getelementptr inbounds i8, i8* %357, i32 1
  store i8* %incdec.ptr763, i8** %dst, align 8
  store i8 %conv762, i8* %357, align 1
  %358 = load i32, i32* %ch726, align 4
  %and764 = and i32 %358, 63
  %or765 = or i32 128, %and764
  %conv766 = trunc i32 %or765 to i8
  %359 = load i8*, i8** %dst, align 8
  %incdec.ptr767 = getelementptr inbounds i8, i8* %359, i32 1
  store i8* %incdec.ptr767, i8** %dst, align 8
  store i8 %conv766, i8* %359, align 1
  br label %if.end.772

if.else.768:                                      ; preds = %if.else.751
  %360 = load i32, i32* %ch726, align 4
  %361 = load i8*, i8** %dst, align 8
  %call769 = call i32 @char_string(i32 %360, i8* %361)
  %362 = load i8*, i8** %dst, align 8
  %idx.ext770 = sext i32 %call769 to i64
  %add.ptr771 = getelementptr inbounds i8, i8* %362, i64 %idx.ext770
  store i8* %add.ptr771, i8** %dst, align 8
  br label %if.end.772

if.end.772:                                       ; preds = %if.else.768, %if.then.754
  br label %if.end.773

if.end.773:                                       ; preds = %if.end.772, %if.then.742
  br label %if.end.774

if.end.774:                                       ; preds = %if.end.773, %if.then.736
  br label %do.end.775

do.end.775:                                       ; preds = %if.end.774
  %363 = load i32, i32* %c1, align 4
  %shr776 = ashr i32 %363, 8
  store i32 %shr776, i32* %ch726, align 4
  %364 = load i32, i32* %ch726, align 4
  %cmp777 = icmp uge i32 %364, 128
  br i1 %cmp777, label %if.then.779, label %if.end.781

if.then.779:                                      ; preds = %do.end.775
  %365 = load i32, i32* %ch726, align 4
  %add780 = add i32 %365, 4194048
  store i32 %add780, i32* %ch726, align 4
  br label %if.end.781

if.end.781:                                       ; preds = %if.then.779, %do.end.775
  br label %do.body.782

do.body.782:                                      ; preds = %if.end.781
  %366 = load i32, i32* %ch726, align 4
  %cmp783 = icmp ule i32 %366, 127
  br i1 %cmp783, label %if.then.785, label %if.else.788

if.then.785:                                      ; preds = %do.body.782
  %367 = load i32, i32* %ch726, align 4
  %conv786 = trunc i32 %367 to i8
  %368 = load i8*, i8** %dst, align 8
  %incdec.ptr787 = getelementptr inbounds i8, i8* %368, i32 1
  store i8* %incdec.ptr787, i8** %dst, align 8
  store i8 %conv786, i8* %368, align 1
  br label %if.end.823

if.else.788:                                      ; preds = %do.body.782
  %369 = load i32, i32* %ch726, align 4
  %cmp789 = icmp ule i32 %369, 2047
  br i1 %cmp789, label %if.then.791, label %if.else.800

if.then.791:                                      ; preds = %if.else.788
  %370 = load i32, i32* %ch726, align 4
  %shr792 = lshr i32 %370, 6
  %or793 = or i32 192, %shr792
  %conv794 = trunc i32 %or793 to i8
  %371 = load i8*, i8** %dst, align 8
  %incdec.ptr795 = getelementptr inbounds i8, i8* %371, i32 1
  store i8* %incdec.ptr795, i8** %dst, align 8
  store i8 %conv794, i8* %371, align 1
  %372 = load i32, i32* %ch726, align 4
  %and796 = and i32 %372, 63
  %or797 = or i32 128, %and796
  %conv798 = trunc i32 %or797 to i8
  %373 = load i8*, i8** %dst, align 8
  %incdec.ptr799 = getelementptr inbounds i8, i8* %373, i32 1
  store i8* %incdec.ptr799, i8** %dst, align 8
  store i8 %conv798, i8* %373, align 1
  br label %if.end.822

if.else.800:                                      ; preds = %if.else.788
  %374 = load i32, i32* %ch726, align 4
  %cmp801 = icmp ule i32 %374, 65535
  br i1 %cmp801, label %if.then.803, label %if.else.817

if.then.803:                                      ; preds = %if.else.800
  %375 = load i32, i32* %ch726, align 4
  %shr804 = lshr i32 %375, 12
  %or805 = or i32 224, %shr804
  %conv806 = trunc i32 %or805 to i8
  %376 = load i8*, i8** %dst, align 8
  %incdec.ptr807 = getelementptr inbounds i8, i8* %376, i32 1
  store i8* %incdec.ptr807, i8** %dst, align 8
  store i8 %conv806, i8* %376, align 1
  %377 = load i32, i32* %ch726, align 4
  %shr808 = lshr i32 %377, 6
  %and809 = and i32 %shr808, 63
  %or810 = or i32 128, %and809
  %conv811 = trunc i32 %or810 to i8
  %378 = load i8*, i8** %dst, align 8
  %incdec.ptr812 = getelementptr inbounds i8, i8* %378, i32 1
  store i8* %incdec.ptr812, i8** %dst, align 8
  store i8 %conv811, i8* %378, align 1
  %379 = load i32, i32* %ch726, align 4
  %and813 = and i32 %379, 63
  %or814 = or i32 128, %and813
  %conv815 = trunc i32 %or814 to i8
  %380 = load i8*, i8** %dst, align 8
  %incdec.ptr816 = getelementptr inbounds i8, i8* %380, i32 1
  store i8* %incdec.ptr816, i8** %dst, align 8
  store i8 %conv815, i8* %380, align 1
  br label %if.end.821

if.else.817:                                      ; preds = %if.else.800
  %381 = load i32, i32* %ch726, align 4
  %382 = load i8*, i8** %dst, align 8
  %call818 = call i32 @char_string(i32 %381, i8* %382)
  %383 = load i8*, i8** %dst, align 8
  %idx.ext819 = sext i32 %call818 to i64
  %add.ptr820 = getelementptr inbounds i8, i8* %383, i64 %idx.ext819
  store i8* %add.ptr820, i8** %dst, align 8
  br label %if.end.821

if.end.821:                                       ; preds = %if.else.817, %if.then.803
  br label %if.end.822

if.end.822:                                       ; preds = %if.end.821, %if.then.791
  br label %if.end.823

if.end.823:                                       ; preds = %if.end.822, %if.then.785
  br label %do.end.824

do.end.824:                                       ; preds = %if.end.823
  br label %if.end.832

if.else.825:                                      ; preds = %do.body.722
  %384 = load i32, i32* %c1, align 4
  %and826 = and i32 %384, 255
  %conv827 = trunc i32 %and826 to i8
  %385 = load i8*, i8** %dst, align 8
  %incdec.ptr828 = getelementptr inbounds i8, i8* %385, i32 1
  store i8* %incdec.ptr828, i8** %dst, align 8
  store i8 %conv827, i8* %385, align 1
  %386 = load i32, i32* %c1, align 4
  %shr829 = ashr i32 %386, 8
  %conv830 = trunc i32 %shr829 to i8
  %387 = load i8*, i8** %dst, align 8
  %incdec.ptr831 = getelementptr inbounds i8, i8* %387, i32 1
  store i8* %incdec.ptr831, i8** %dst, align 8
  store i8 %conv830, i8* %387, align 1
  br label %if.end.832

if.end.832:                                       ; preds = %if.else.825, %do.end.824
  br label %do.end.833

do.end.833:                                       ; preds = %if.end.832
  br label %do.body.834

do.body.834:                                      ; preds = %do.end.833
  %388 = load i64, i64* %produced_chars, align 8
  %add835 = add nsw i64 %388, 2
  store i64 %add835, i64* %produced_chars, align 8
  %389 = load i8, i8* %multibytep, align 1
  %tobool836 = trunc i8 %389 to i1
  br i1 %tobool836, label %if.then.837, label %if.else.937

if.then.837:                                      ; preds = %do.body.834
  %390 = load i32, i32* %c2, align 4
  %and839 = and i32 %390, 255
  store i32 %and839, i32* %ch838, align 4
  %391 = load i32, i32* %ch838, align 4
  %cmp840 = icmp uge i32 %391, 128
  br i1 %cmp840, label %if.then.842, label %if.end.844

if.then.842:                                      ; preds = %if.then.837
  %392 = load i32, i32* %ch838, align 4
  %add843 = add i32 %392, 4194048
  store i32 %add843, i32* %ch838, align 4
  br label %if.end.844

if.end.844:                                       ; preds = %if.then.842, %if.then.837
  br label %do.body.845

do.body.845:                                      ; preds = %if.end.844
  %393 = load i32, i32* %ch838, align 4
  %cmp846 = icmp ule i32 %393, 127
  br i1 %cmp846, label %if.then.848, label %if.else.851

if.then.848:                                      ; preds = %do.body.845
  %394 = load i32, i32* %ch838, align 4
  %conv849 = trunc i32 %394 to i8
  %395 = load i8*, i8** %dst, align 8
  %incdec.ptr850 = getelementptr inbounds i8, i8* %395, i32 1
  store i8* %incdec.ptr850, i8** %dst, align 8
  store i8 %conv849, i8* %395, align 1
  br label %if.end.886

if.else.851:                                      ; preds = %do.body.845
  %396 = load i32, i32* %ch838, align 4
  %cmp852 = icmp ule i32 %396, 2047
  br i1 %cmp852, label %if.then.854, label %if.else.863

if.then.854:                                      ; preds = %if.else.851
  %397 = load i32, i32* %ch838, align 4
  %shr855 = lshr i32 %397, 6
  %or856 = or i32 192, %shr855
  %conv857 = trunc i32 %or856 to i8
  %398 = load i8*, i8** %dst, align 8
  %incdec.ptr858 = getelementptr inbounds i8, i8* %398, i32 1
  store i8* %incdec.ptr858, i8** %dst, align 8
  store i8 %conv857, i8* %398, align 1
  %399 = load i32, i32* %ch838, align 4
  %and859 = and i32 %399, 63
  %or860 = or i32 128, %and859
  %conv861 = trunc i32 %or860 to i8
  %400 = load i8*, i8** %dst, align 8
  %incdec.ptr862 = getelementptr inbounds i8, i8* %400, i32 1
  store i8* %incdec.ptr862, i8** %dst, align 8
  store i8 %conv861, i8* %400, align 1
  br label %if.end.885

if.else.863:                                      ; preds = %if.else.851
  %401 = load i32, i32* %ch838, align 4
  %cmp864 = icmp ule i32 %401, 65535
  br i1 %cmp864, label %if.then.866, label %if.else.880

if.then.866:                                      ; preds = %if.else.863
  %402 = load i32, i32* %ch838, align 4
  %shr867 = lshr i32 %402, 12
  %or868 = or i32 224, %shr867
  %conv869 = trunc i32 %or868 to i8
  %403 = load i8*, i8** %dst, align 8
  %incdec.ptr870 = getelementptr inbounds i8, i8* %403, i32 1
  store i8* %incdec.ptr870, i8** %dst, align 8
  store i8 %conv869, i8* %403, align 1
  %404 = load i32, i32* %ch838, align 4
  %shr871 = lshr i32 %404, 6
  %and872 = and i32 %shr871, 63
  %or873 = or i32 128, %and872
  %conv874 = trunc i32 %or873 to i8
  %405 = load i8*, i8** %dst, align 8
  %incdec.ptr875 = getelementptr inbounds i8, i8* %405, i32 1
  store i8* %incdec.ptr875, i8** %dst, align 8
  store i8 %conv874, i8* %405, align 1
  %406 = load i32, i32* %ch838, align 4
  %and876 = and i32 %406, 63
  %or877 = or i32 128, %and876
  %conv878 = trunc i32 %or877 to i8
  %407 = load i8*, i8** %dst, align 8
  %incdec.ptr879 = getelementptr inbounds i8, i8* %407, i32 1
  store i8* %incdec.ptr879, i8** %dst, align 8
  store i8 %conv878, i8* %407, align 1
  br label %if.end.884

if.else.880:                                      ; preds = %if.else.863
  %408 = load i32, i32* %ch838, align 4
  %409 = load i8*, i8** %dst, align 8
  %call881 = call i32 @char_string(i32 %408, i8* %409)
  %410 = load i8*, i8** %dst, align 8
  %idx.ext882 = sext i32 %call881 to i64
  %add.ptr883 = getelementptr inbounds i8, i8* %410, i64 %idx.ext882
  store i8* %add.ptr883, i8** %dst, align 8
  br label %if.end.884

if.end.884:                                       ; preds = %if.else.880, %if.then.866
  br label %if.end.885

if.end.885:                                       ; preds = %if.end.884, %if.then.854
  br label %if.end.886

if.end.886:                                       ; preds = %if.end.885, %if.then.848
  br label %do.end.887

do.end.887:                                       ; preds = %if.end.886
  %411 = load i32, i32* %c2, align 4
  %shr888 = ashr i32 %411, 8
  store i32 %shr888, i32* %ch838, align 4
  %412 = load i32, i32* %ch838, align 4
  %cmp889 = icmp uge i32 %412, 128
  br i1 %cmp889, label %if.then.891, label %if.end.893

if.then.891:                                      ; preds = %do.end.887
  %413 = load i32, i32* %ch838, align 4
  %add892 = add i32 %413, 4194048
  store i32 %add892, i32* %ch838, align 4
  br label %if.end.893

if.end.893:                                       ; preds = %if.then.891, %do.end.887
  br label %do.body.894

do.body.894:                                      ; preds = %if.end.893
  %414 = load i32, i32* %ch838, align 4
  %cmp895 = icmp ule i32 %414, 127
  br i1 %cmp895, label %if.then.897, label %if.else.900

if.then.897:                                      ; preds = %do.body.894
  %415 = load i32, i32* %ch838, align 4
  %conv898 = trunc i32 %415 to i8
  %416 = load i8*, i8** %dst, align 8
  %incdec.ptr899 = getelementptr inbounds i8, i8* %416, i32 1
  store i8* %incdec.ptr899, i8** %dst, align 8
  store i8 %conv898, i8* %416, align 1
  br label %if.end.935

if.else.900:                                      ; preds = %do.body.894
  %417 = load i32, i32* %ch838, align 4
  %cmp901 = icmp ule i32 %417, 2047
  br i1 %cmp901, label %if.then.903, label %if.else.912

if.then.903:                                      ; preds = %if.else.900
  %418 = load i32, i32* %ch838, align 4
  %shr904 = lshr i32 %418, 6
  %or905 = or i32 192, %shr904
  %conv906 = trunc i32 %or905 to i8
  %419 = load i8*, i8** %dst, align 8
  %incdec.ptr907 = getelementptr inbounds i8, i8* %419, i32 1
  store i8* %incdec.ptr907, i8** %dst, align 8
  store i8 %conv906, i8* %419, align 1
  %420 = load i32, i32* %ch838, align 4
  %and908 = and i32 %420, 63
  %or909 = or i32 128, %and908
  %conv910 = trunc i32 %or909 to i8
  %421 = load i8*, i8** %dst, align 8
  %incdec.ptr911 = getelementptr inbounds i8, i8* %421, i32 1
  store i8* %incdec.ptr911, i8** %dst, align 8
  store i8 %conv910, i8* %421, align 1
  br label %if.end.934

if.else.912:                                      ; preds = %if.else.900
  %422 = load i32, i32* %ch838, align 4
  %cmp913 = icmp ule i32 %422, 65535
  br i1 %cmp913, label %if.then.915, label %if.else.929

if.then.915:                                      ; preds = %if.else.912
  %423 = load i32, i32* %ch838, align 4
  %shr916 = lshr i32 %423, 12
  %or917 = or i32 224, %shr916
  %conv918 = trunc i32 %or917 to i8
  %424 = load i8*, i8** %dst, align 8
  %incdec.ptr919 = getelementptr inbounds i8, i8* %424, i32 1
  store i8* %incdec.ptr919, i8** %dst, align 8
  store i8 %conv918, i8* %424, align 1
  %425 = load i32, i32* %ch838, align 4
  %shr920 = lshr i32 %425, 6
  %and921 = and i32 %shr920, 63
  %or922 = or i32 128, %and921
  %conv923 = trunc i32 %or922 to i8
  %426 = load i8*, i8** %dst, align 8
  %incdec.ptr924 = getelementptr inbounds i8, i8* %426, i32 1
  store i8* %incdec.ptr924, i8** %dst, align 8
  store i8 %conv923, i8* %426, align 1
  %427 = load i32, i32* %ch838, align 4
  %and925 = and i32 %427, 63
  %or926 = or i32 128, %and925
  %conv927 = trunc i32 %or926 to i8
  %428 = load i8*, i8** %dst, align 8
  %incdec.ptr928 = getelementptr inbounds i8, i8* %428, i32 1
  store i8* %incdec.ptr928, i8** %dst, align 8
  store i8 %conv927, i8* %428, align 1
  br label %if.end.933

if.else.929:                                      ; preds = %if.else.912
  %429 = load i32, i32* %ch838, align 4
  %430 = load i8*, i8** %dst, align 8
  %call930 = call i32 @char_string(i32 %429, i8* %430)
  %431 = load i8*, i8** %dst, align 8
  %idx.ext931 = sext i32 %call930 to i64
  %add.ptr932 = getelementptr inbounds i8, i8* %431, i64 %idx.ext931
  store i8* %add.ptr932, i8** %dst, align 8
  br label %if.end.933

if.end.933:                                       ; preds = %if.else.929, %if.then.915
  br label %if.end.934

if.end.934:                                       ; preds = %if.end.933, %if.then.903
  br label %if.end.935

if.end.935:                                       ; preds = %if.end.934, %if.then.897
  br label %do.end.936

do.end.936:                                       ; preds = %if.end.935
  br label %if.end.944

if.else.937:                                      ; preds = %do.body.834
  %432 = load i32, i32* %c2, align 4
  %and938 = and i32 %432, 255
  %conv939 = trunc i32 %and938 to i8
  %433 = load i8*, i8** %dst, align 8
  %incdec.ptr940 = getelementptr inbounds i8, i8* %433, i32 1
  store i8* %incdec.ptr940, i8** %dst, align 8
  store i8 %conv939, i8* %433, align 1
  %434 = load i32, i32* %c2, align 4
  %shr941 = ashr i32 %434, 8
  %conv942 = trunc i32 %shr941 to i8
  %435 = load i8*, i8** %dst, align 8
  %incdec.ptr943 = getelementptr inbounds i8, i8* %435, i32 1
  store i8* %incdec.ptr943, i8** %dst, align 8
  store i8 %conv942, i8* %435, align 1
  br label %if.end.944

if.end.944:                                       ; preds = %if.else.937, %do.end.936
  br label %do.end.945

do.end.945:                                       ; preds = %if.end.944
  br label %do.end.946

do.end.946:                                       ; preds = %do.end.945
  br label %if.end.947

if.end.947:                                       ; preds = %do.end.946, %do.end.719
  br label %if.end.948

if.end.948:                                       ; preds = %if.end.947, %if.end.486
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %436 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %436, i32 0)
  %437 = load i8*, i8** %dst, align 8
  %438 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination949 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %438, i32 0, i32 22
  %439 = load i8*, i8** %destination949, align 8
  %sub.ptr.lhs.cast950 = ptrtoint i8* %437 to i64
  %sub.ptr.rhs.cast951 = ptrtoint i8* %439 to i64
  %sub.ptr.sub952 = sub i64 %sub.ptr.lhs.cast950, %sub.ptr.rhs.cast951
  %440 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced953 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %440, i32 0, i32 8
  store i64 %sub.ptr.sub952, i64* %produced953, align 8
  %441 = load i64, i64* %produced_chars, align 8
  %442 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %442, i32 0, i32 9
  %443 = load i64, i64* %produced_char, align 8
  %add954 = add nsw i64 %443, %441
  store i64 %add954, i64* %produced_char, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_ccl(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %consumed_chars = alloca i64, align 8
  %found = alloca i32, align 4
  %valids = alloca i8*, align 8
  %head_ascii = alloca i64, align 8
  %attrs = alloca i64, align 8
  %c = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 17
  %3 = load i8*, i8** %source1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  %5 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %src_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i32 0, i32* %found, align 4
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii2 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 5
  %8 = load i64, i64* %head_ascii2, align 8
  store i64 %8, i64* %head_ascii, align 8
  %9 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %9, i32 0, i32 0
  %10 = load i32, i32* %checked, align 4
  %or = or i32 %10, 131072
  store i32 %or, i32* %checked, align 4
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 17), %struct.coding_system** %coding.addr, align 8
  %11 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %11)
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 0
  %13 = load i64, i64* %id, align 8
  %call3 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %13)
  %call4 = call i64 @AREF(i64 %call3, i64 0)
  %call5 = call i64 @AREF(i64 %call4, i64 19)
  %call6 = call i8* @SDATA(i64 %call5)
  store i8* %call6, i8** %valids, align 8
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call7 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id8 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id8, align 8
  %call9 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call7, i64 %16)
  %call10 = call i64 @AREF(i64 %call9, i64 0)
  store i64 %call10, i64* %attrs, align 8
  %17 = load i64, i64* %attrs, align 8
  %call11 = call i64 @AREF(i64 %17, i64 5)
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call11, %call12
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %18 = load i64, i64* %head_ascii, align 8
  %19 = load i8*, i8** %src, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %19, i64 %18
  store i8* %add.ptr13, i8** %src, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.body

while.body:                                       ; preds = %if.end, %if.end.46
  %20 = load i8*, i8** %src, align 8
  store i8* %20, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %while.body
  %21 = load i8*, i8** %src, align 8
  %22 = load i8*, i8** %src_end, align 8
  %cmp14 = icmp eq i8* %21, %22
  br i1 %cmp14, label %if.then.15, label %if.end.19

if.then.15:                                       ; preds = %do.body
  %23 = load i8*, i8** %src_base, align 8
  %24 = load i8*, i8** %src, align 8
  %cmp16 = icmp ult i8* %23, %24
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.15
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %25, i32 1)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.then.15
  br label %no_more_source

if.end.19:                                        ; preds = %do.body
  %26 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %27 = load i8, i8* %26, align 1
  %conv = zext i8 %27 to i32
  store i32 %conv, i32* %c, align 4
  %28 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %28 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.34

land.lhs.true:                                    ; preds = %if.end.19
  %29 = load i32, i32* %c, align 4
  %and = and i32 %29, 128
  %tobool21 = icmp ne i32 %and, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %land.lhs.true
  %30 = load i32, i32* %c, align 4
  %and23 = and i32 %30, 254
  %cmp24 = icmp eq i32 %and23, 192
  br i1 %cmp24, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %if.then.22
  %31 = load i32, i32* %c, align 4
  %and27 = and i32 %31, 1
  %shl = shl i32 %and27, 6
  %32 = load i8*, i8** %src, align 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr28, i8** %src, align 8
  %33 = load i8, i8* %32, align 1
  %conv29 = zext i8 %33 to i32
  %or30 = or i32 %shl, %conv29
  store i32 %or30, i32* %c, align 4
  br label %if.end.33

if.else:                                          ; preds = %if.then.22
  %34 = load i8*, i8** %src, align 8
  %incdec.ptr31 = getelementptr inbounds i8, i8* %34, i32 -1
  store i8* %incdec.ptr31, i8** %src, align 8
  %35 = load i8*, i8** %src, align 8
  %call32 = call i32 @string_char(i8* %35, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call32
  store i32 %sub, i32* %c, align 4
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %36, i32 3)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.then.26
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %land.lhs.true, %if.end.19
  %37 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %37, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.34
  %38 = load i32, i32* %c, align 4
  %cmp35 = icmp slt i32 %38, 0
  br i1 %cmp35, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %39 = load i32, i32* %c, align 4
  %idxprom = sext i32 %39 to i64
  %40 = load i8*, i8** %valids, align 8
  %arrayidx = getelementptr inbounds i8, i8* %40, i64 %idxprom
  %41 = load i8, i8* %arrayidx, align 1
  %tobool37 = icmp ne i8 %41, 0
  br i1 %tobool37, label %if.end.39, label %if.then.38

if.then.38:                                       ; preds = %lor.lhs.false, %do.end
  br label %while.end

if.end.39:                                        ; preds = %lor.lhs.false
  %42 = load i32, i32* %c, align 4
  %idxprom40 = sext i32 %42 to i64
  %43 = load i8*, i8** %valids, align 8
  %arrayidx41 = getelementptr inbounds i8, i8* %43, i64 %idxprom40
  %44 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %44 to i32
  %cmp43 = icmp sgt i32 %conv42, 1
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.39
  store i32 131072, i32* %found, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.end.39
  br label %while.body

while.end:                                        ; preds = %if.then.38
  %45 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %45, i32 0, i32 2
  %46 = load i32, i32* %rejected, align 4
  %or47 = or i32 %46, 131072
  store i32 %or47, i32* %rejected, align 4
  store i1 false, i1* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.18
  %47 = load i32, i32* %found, align 4
  %48 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found48 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %48, i32 0, i32 1
  %49 = load i32, i32* %found48, align 4
  %or49 = or i32 %49, %47
  store i32 %or49, i32* %found48, align 4
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %no_more_source, %while.end
  %50 = load i1, i1* %retval
  ret i1 %50
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_ccl(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %ccl = alloca %struct.ccl_program*, align 8
  %source_charbuf = alloca [1024 x i32], align 16
  %source_byteidx = alloca [1025 x i32], align 16
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %p = alloca i8*, align 8
  %offset = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  store i32* %add.ptr7, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 3
  %ccl8 = bitcast %union.anon* %spec to %struct.ccl_spec**
  %18 = load %struct.ccl_spec*, %struct.ccl_spec** %ccl8, align 8
  %ccl9 = getelementptr inbounds %struct.ccl_spec, %struct.ccl_spec* %18, i32 0, i32 0
  store %struct.ccl_program* %ccl9, %struct.ccl_program** %ccl, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %19 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %19)
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 0
  %21 = load i64, i64* %id, align 8
  %call10 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %21)
  %call11 = call i64 @AREF(i64 %call10, i64 0)
  store i64 %call11, i64* %attrs, align 8
  %22 = load i64, i64* %attrs, align 8
  %call12 = call i64 @AREF(i64 %22, i64 4)
  store i64 %call12, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %while.body

while.body:                                       ; preds = %do.end, %if.end.132
  %23 = load i8*, i8** %src, align 8
  store i8* %23, i8** %p, align 8
  store i32 0, i32* %i, align 4
  %24 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %24 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  br label %while.cond.13

while.cond.13:                                    ; preds = %cond.end.62, %if.then
  %25 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %25, 1024
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.13
  %26 = load i8*, i8** %p, align 8
  %27 = load i8*, i8** %src_end, align 8
  %cmp14 = icmp ult i8* %26, %27
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.13
  %28 = phi i1 [ false, %while.cond.13 ], [ %cmp14, %land.rhs ]
  br i1 %28, label %while.body.15, label %while.end

while.body.15:                                    ; preds = %land.end
  %29 = load i8*, i8** %p, align 8
  %30 = load i8*, i8** %src, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %29 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %30 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %31 = load i32, i32* %i, align 4
  %idxprom = sext i32 %31 to i64
  %arrayidx = getelementptr inbounds [1025 x i32], [1025 x i32]* %source_byteidx, i32 0, i64 %idxprom
  store i32 %conv, i32* %arrayidx, align 4
  %32 = load i8*, i8** %p, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %33 to i32
  %and = and i32 %conv17, 128
  %tobool18 = icmp ne i32 %and, 0
  br i1 %tobool18, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.body.15
  %34 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %35 = load i8, i8* %34, align 1
  %conv19 = zext i8 %35 to i32
  br label %cond.end.62

cond.false:                                       ; preds = %while.body.15
  %36 = load i8*, i8** %p, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %36, i64 0
  %37 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %37 to i32
  %and22 = and i32 %conv21, 32
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %cond.false.37, label %cond.true.24

cond.true.24:                                     ; preds = %cond.false
  %38 = load i8*, i8** %p, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %38, i64 2
  store i8* %add.ptr25, i8** %p, align 8
  %39 = load i8*, i8** %p, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %39, i64 -2
  %40 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %40 to i32
  %and28 = and i32 %conv27, 31
  %shl = shl i32 %and28, 6
  %41 = load i8*, i8** %p, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %41, i64 -1
  %42 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %42 to i32
  %and31 = and i32 %conv30, 63
  %or = or i32 %shl, %and31
  %43 = load i8*, i8** %p, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %43, i64 -2
  %44 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %44 to i32
  %cmp34 = icmp slt i32 %conv33, 194
  %cond = select i1 %cmp34, i32 4194176, i32 0
  %or36 = or i32 %or, %cond
  br label %cond.end.60

cond.false.37:                                    ; preds = %cond.false
  %45 = load i8*, i8** %p, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %45, i64 0
  %46 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %46 to i32
  %and40 = and i32 %conv39, 16
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %cond.false.57, label %cond.true.42

cond.true.42:                                     ; preds = %cond.false.37
  %47 = load i8*, i8** %p, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %47, i64 3
  store i8* %add.ptr43, i8** %p, align 8
  %48 = load i8*, i8** %p, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %48, i64 -3
  %49 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %49 to i32
  %and46 = and i32 %conv45, 15
  %shl47 = shl i32 %and46, 12
  %50 = load i8*, i8** %p, align 8
  %arrayidx48 = getelementptr inbounds i8, i8* %50, i64 -2
  %51 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %51 to i32
  %and50 = and i32 %conv49, 63
  %shl51 = shl i32 %and50, 6
  %or52 = or i32 %shl47, %shl51
  %52 = load i8*, i8** %p, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %52, i64 -1
  %53 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %53 to i32
  %and55 = and i32 %conv54, 63
  %or56 = or i32 %or52, %and55
  br label %cond.end

cond.false.57:                                    ; preds = %cond.false.37
  %54 = load i8*, i8** %p, align 8
  %call58 = call i32 @string_char(i8* %54, i8** %p, i32* null)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.57, %cond.true.42
  %cond59 = phi i32 [ %or56, %cond.true.42 ], [ %call58, %cond.false.57 ]
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.end, %cond.true.24
  %cond61 = phi i32 [ %or36, %cond.true.24 ], [ %cond59, %cond.end ]
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.end.60, %cond.true
  %cond63 = phi i32 [ %conv19, %cond.true ], [ %cond61, %cond.end.60 ]
  %55 = load i32, i32* %i, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %i, align 4
  %idxprom64 = sext i32 %55 to i64
  %arrayidx65 = getelementptr inbounds [1024 x i32], [1024 x i32]* %source_charbuf, i32 0, i64 %idxprom64
  store i32 %cond63, i32* %arrayidx65, align 4
  br label %while.cond.13

while.end:                                        ; preds = %land.end
  %56 = load i8*, i8** %p, align 8
  %57 = load i8*, i8** %src, align 8
  %sub.ptr.lhs.cast66 = ptrtoint i8* %56 to i64
  %sub.ptr.rhs.cast67 = ptrtoint i8* %57 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %conv69 = trunc i64 %sub.ptr.sub68 to i32
  %58 = load i32, i32* %i, align 4
  %idxprom70 = sext i32 %58 to i64
  %arrayidx71 = getelementptr inbounds [1025 x i32], [1025 x i32]* %source_byteidx, i32 0, i64 %idxprom70
  store i32 %conv69, i32* %arrayidx71, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %while.cond.72

while.cond.72:                                    ; preds = %while.body.79, %if.else
  %59 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %59, 1024
  br i1 %cmp73, label %land.rhs.75, label %land.end.78

land.rhs.75:                                      ; preds = %while.cond.72
  %60 = load i8*, i8** %p, align 8
  %61 = load i8*, i8** %src_end, align 8
  %cmp76 = icmp ult i8* %60, %61
  br label %land.end.78

land.end.78:                                      ; preds = %land.rhs.75, %while.cond.72
  %62 = phi i1 [ false, %while.cond.72 ], [ %cmp76, %land.rhs.75 ]
  br i1 %62, label %while.body.79, label %while.end.85

while.body.79:                                    ; preds = %land.end.78
  %63 = load i8*, i8** %p, align 8
  %incdec.ptr80 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr80, i8** %p, align 8
  %64 = load i8, i8* %63, align 1
  %conv81 = zext i8 %64 to i32
  %65 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %65, 1
  store i32 %inc82, i32* %i, align 4
  %idxprom83 = sext i32 %65 to i64
  %arrayidx84 = getelementptr inbounds [1024 x i32], [1024 x i32]* %source_charbuf, i32 0, i64 %idxprom83
  store i32 %conv81, i32* %arrayidx84, align 4
  br label %while.cond.72

while.end.85:                                     ; preds = %land.end.78
  br label %if.end

if.end:                                           ; preds = %while.end.85, %while.end
  %66 = load i8*, i8** %p, align 8
  %67 = load i8*, i8** %src_end, align 8
  %cmp86 = icmp eq i8* %66, %67
  br i1 %cmp86, label %land.lhs.true, label %if.end.96

land.lhs.true:                                    ; preds = %if.end
  %68 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %68, i32 0, i32 1
  %bf.load88 = load i32, i32* %mode, align 8
  %bf.lshr89 = lshr i32 %bf.load88, 14
  %bf.clear90 = and i32 %bf.lshr89, 31
  %and91 = and i32 %bf.clear90, 1
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %if.then.93, label %if.end.96

if.then.93:                                       ; preds = %land.lhs.true
  %69 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %last_block = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %69, i32 0, i32 11
  %bf.load94 = load i8, i8* %last_block, align 4
  %bf.clear95 = and i8 %bf.load94, -2
  %bf.set = or i8 %bf.clear95, 1
  store i8 %bf.set, i8* %last_block, align 4
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.93, %land.lhs.true, %if.end
  store i8 0, i8* @charset_map_loaded, align 1
  %70 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %source_charbuf, i32 0, i32 0
  %71 = load i32*, i32** %charbuf, align 8
  %72 = load i32, i32* %i, align 4
  %73 = load i32*, i32** %charbuf_end, align 8
  %74 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast97 = ptrtoint i32* %73 to i64
  %sub.ptr.rhs.cast98 = ptrtoint i32* %74 to i64
  %sub.ptr.sub99 = sub i64 %sub.ptr.lhs.cast97, %sub.ptr.rhs.cast98
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub99, 4
  %conv100 = trunc i64 %sub.ptr.div to i32
  %75 = load i64, i64* %charset_list, align 8
  call void @ccl_driver(%struct.ccl_program* %70, i32* %arraydecay, i32* %71, i32 %72, i32 %conv100, i64 %75)
  %76 = load i8, i8* @charset_map_loaded, align 1
  %tobool101 = trunc i8 %76 to i1
  br i1 %tobool101, label %land.lhs.true.103, label %if.end.110

land.lhs.true.103:                                ; preds = %if.end.96
  %77 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call104 = call i64 @coding_change_source(%struct.coding_system* %77)
  store i64 %call104, i64* %offset, align 8
  %tobool105 = icmp ne i64 %call104, 0
  br i1 %tobool105, label %if.then.106, label %if.end.110

if.then.106:                                      ; preds = %land.lhs.true.103
  %78 = load i64, i64* %offset, align 8
  %79 = load i8*, i8** %p, align 8
  %add.ptr107 = getelementptr inbounds i8, i8* %79, i64 %78
  store i8* %add.ptr107, i8** %p, align 8
  %80 = load i64, i64* %offset, align 8
  %81 = load i8*, i8** %src, align 8
  %add.ptr108 = getelementptr inbounds i8, i8* %81, i64 %80
  store i8* %add.ptr108, i8** %src, align 8
  %82 = load i64, i64* %offset, align 8
  %83 = load i8*, i8** %src_end, align 8
  %add.ptr109 = getelementptr inbounds i8, i8* %83, i64 %82
  store i8* %add.ptr109, i8** %src_end, align 8
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.106, %land.lhs.true.103, %if.end.96
  %84 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %84, i32 0, i32 10
  %85 = load i32, i32* %produced, align 4
  %86 = load i32*, i32** %charbuf, align 8
  %idx.ext111 = sext i32 %85 to i64
  %add.ptr112 = getelementptr inbounds i32, i32* %86, i64 %idx.ext111
  store i32* %add.ptr112, i32** %charbuf, align 8
  %87 = load i8, i8* %multibytep, align 1
  %tobool113 = trunc i8 %87 to i1
  br i1 %tobool113, label %if.then.114, label %if.else.120

if.then.114:                                      ; preds = %if.end.110
  %88 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %consumed115 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %88, i32 0, i32 9
  %89 = load i32, i32* %consumed115, align 4
  %idxprom116 = sext i32 %89 to i64
  %arrayidx117 = getelementptr inbounds [1025 x i32], [1025 x i32]* %source_byteidx, i32 0, i64 %idxprom116
  %90 = load i32, i32* %arrayidx117, align 4
  %91 = load i8*, i8** %src, align 8
  %idx.ext118 = sext i32 %90 to i64
  %add.ptr119 = getelementptr inbounds i8, i8* %91, i64 %idx.ext118
  store i8* %add.ptr119, i8** %src, align 8
  br label %if.end.124

if.else.120:                                      ; preds = %if.end.110
  %92 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %consumed121 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %92, i32 0, i32 9
  %93 = load i32, i32* %consumed121, align 4
  %94 = load i8*, i8** %src, align 8
  %idx.ext122 = sext i32 %93 to i64
  %add.ptr123 = getelementptr inbounds i8, i8* %94, i64 %idx.ext122
  store i8* %add.ptr123, i8** %src, align 8
  br label %if.end.124

if.end.124:                                       ; preds = %if.else.120, %if.then.114
  %95 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %consumed125 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %95, i32 0, i32 9
  %96 = load i32, i32* %consumed125, align 4
  %conv126 = sext i32 %96 to i64
  %97 = load i64, i64* %consumed_chars, align 8
  %add = add nsw i64 %97, %conv126
  store i64 %add, i64* %consumed_chars, align 8
  %98 = load i8*, i8** %p, align 8
  %99 = load i8*, i8** %src_end, align 8
  %cmp127 = icmp eq i8* %98, %99
  br i1 %cmp127, label %if.then.131, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.124
  %100 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %status = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %100, i32 0, i32 6
  %101 = load i32, i32* %status, align 4
  %cmp129 = icmp ne i32 %101, 1
  br i1 %cmp129, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %lor.lhs.false, %if.end.124
  br label %while.end.133

if.end.132:                                       ; preds = %lor.lhs.false
  br label %while.body

while.end.133:                                    ; preds = %if.then.131
  %102 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %status134 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %102, i32 0, i32 6
  %103 = load i32, i32* %status134, align 4
  switch i32 %103, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.135
    i32 4, label %sw.bb.136
    i32 3, label %sw.bb.136
  ]

sw.bb:                                            ; preds = %while.end.133
  %104 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %104, i32 1)
  br label %sw.epilog

sw.bb.135:                                        ; preds = %while.end.133
  %105 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %105, i32 2)
  br label %sw.epilog

sw.bb.136:                                        ; preds = %while.end.133, %while.end.133
  %106 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %106, i32 4)
  br label %sw.epilog

sw.default:                                       ; preds = %while.end.133
  %107 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %107, i32 0)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.136, %sw.bb.135, %sw.bb
  %108 = load i64, i64* %consumed_chars, align 8
  %109 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %109, i32 0, i32 11
  %110 = load i64, i64* %consumed_char, align 8
  %add137 = add nsw i64 %110, %108
  store i64 %add137, i64* %consumed_char, align 8
  %111 = load i8*, i8** %src, align 8
  %112 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source138 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %112, i32 0, i32 17
  %113 = load i8*, i8** %source138, align 8
  %sub.ptr.lhs.cast139 = ptrtoint i8* %111 to i64
  %sub.ptr.rhs.cast140 = ptrtoint i8* %113 to i64
  %sub.ptr.sub141 = sub i64 %sub.ptr.lhs.cast139, %sub.ptr.rhs.cast140
  %114 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed142 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %114, i32 0, i32 10
  store i64 %sub.ptr.sub141, i64* %consumed142, align 8
  %115 = load i32*, i32** %charbuf, align 8
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf143 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %116, i32 0, i32 23
  %117 = load i32*, i32** %charbuf143, align 8
  %sub.ptr.lhs.cast144 = ptrtoint i32* %115 to i64
  %sub.ptr.rhs.cast145 = ptrtoint i32* %117 to i64
  %sub.ptr.sub146 = sub i64 %sub.ptr.lhs.cast144, %sub.ptr.rhs.cast145
  %sub.ptr.div147 = sdiv exact i64 %sub.ptr.sub146, 4
  %conv148 = trunc i64 %sub.ptr.div147 to i32
  %118 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used149 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %118, i32 0, i32 25
  store i32 %conv148, i32* %charbuf_used149, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_ccl(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %ccl = alloca %struct.ccl_program*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %destination_charbuf = alloca [1024 x i32], align 16
  %produced_chars = alloca i64, align 8
  %i = alloca i32, align 4
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %offset = alloca i64, align 8
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %more_bytes114 = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 3
  %ccl1 = bitcast %union.anon* %spec to %struct.ccl_spec**
  %1 = load %struct.ccl_spec*, %struct.ccl_spec** %ccl1, align 8
  %ccl2 = getelementptr inbounds %struct.ccl_spec, %struct.ccl_spec* %1, i32 0, i32 0
  store %struct.ccl_program* %ccl2, %struct.ccl_program** %ccl, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 23
  %4 = load i32*, i32** %charbuf3, align 8
  store i32* %4, i32** %charbuf, align 8
  %5 = load i32*, i32** %charbuf, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 25
  %7 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds i32, i32* %5, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 22
  %9 = load i8*, i8** %destination, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 8
  %11 = load i64, i64* %produced, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %9, i64 %11
  store i8* %add.ptr4, i8** %dst, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 22
  %13 = load i8*, i8** %destination5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 20
  %15 = load i64, i64* %dst_bytes, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i64 %15
  store i8* %add.ptr6, i8** %dst_end, align 8
  store i64 0, i64* %produced_chars, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %16 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %16)
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 0
  %18 = load i64, i64* %id, align 8
  %call7 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %18)
  %call8 = call i64 @AREF(i64 %call7, i64 0)
  store i64 %call8, i64* %attrs, align 8
  %19 = load i64, i64* %attrs, align 8
  %call9 = call i64 @AREF(i64 %19, i64 4)
  store i64 %call9, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 11
  %21 = load i64, i64* %consumed_char, align 8
  %22 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %22, i32 0, i32 14
  %23 = load i64, i64* %src_chars, align 8
  %cmp = icmp eq i64 %21, %23
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.end
  %24 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %24, i32 0, i32 1
  %bf.load10 = load i32, i32* %mode, align 8
  %bf.lshr11 = lshr i32 %bf.load10, 14
  %bf.clear12 = and i32 %bf.lshr11, 31
  %and = and i32 %bf.clear12, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %25 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %last_block = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %25, i32 0, i32 11
  %bf.load13 = load i8, i8* %last_block, align 4
  %bf.clear14 = and i8 %bf.load13, -2
  %bf.set = or i8 %bf.clear14, 1
  store i8 %bf.set, i8* %last_block, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %do.end
  br label %do.body.15

do.body.15:                                       ; preds = %do.cond, %if.end
  store i8 0, i8* @charset_map_loaded, align 1
  %26 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %27 = load i32*, i32** %charbuf, align 8
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %destination_charbuf, i32 0, i32 0
  %28 = load i32*, i32** %charbuf_end, align 8
  %29 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %28 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %conv = trunc i64 %sub.ptr.div to i32
  %30 = load i64, i64* %charset_list, align 8
  call void @ccl_driver(%struct.ccl_program* %26, i32* %27, i32* %arraydecay, i32 %conv, i32 1024, i64 %30)
  %31 = load i8, i8* @charset_map_loaded, align 1
  %tobool16 = trunc i8 %31 to i1
  br i1 %tobool16, label %land.lhs.true.18, label %if.end.23

land.lhs.true.18:                                 ; preds = %do.body.15
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call19 = call i64 @coding_change_destination(%struct.coding_system* %32)
  store i64 %call19, i64* %offset, align 8
  %tobool20 = icmp ne i64 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.23

if.then.21:                                       ; preds = %land.lhs.true.18
  %33 = load i64, i64* %offset, align 8
  %34 = load i8*, i8** %dst, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %34, i64 %33
  store i8* %add.ptr22, i8** %dst, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.21, %land.lhs.true.18, %do.body.15
  %35 = load i8, i8* %multibytep, align 1
  %tobool24 = trunc i8 %35 to i1
  br i1 %tobool24, label %if.then.25, label %if.else.106

if.then.25:                                       ; preds = %if.end.23
  br label %do.body.26

do.body.26:                                       ; preds = %if.then.25
  %36 = load i8*, i8** %dst, align 8
  %37 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced27 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %37, i32 0, i32 10
  %38 = load i32, i32* %produced27, align 4
  %mul = mul nsw i32 %38, 2
  %idx.ext28 = sext i32 %mul to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %36, i64 %idx.ext28
  %39 = load i8*, i8** %dst_end, align 8
  %cmp30 = icmp uge i8* %add.ptr29, %39
  br i1 %cmp30, label %if.then.32, label %if.end.44

if.then.32:                                       ; preds = %do.body.26
  %40 = load i32*, i32** %charbuf_end, align 8
  %41 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast33 = ptrtoint i32* %40 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i32* %41 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div36 = sdiv exact i64 %sub.ptr.sub35, 4
  %42 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced37 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %42, i32 0, i32 10
  %43 = load i32, i32* %produced37, align 4
  %mul38 = mul nsw i32 %43, 2
  %conv39 = sext i32 %mul38 to i64
  %add = add nsw i64 %sub.ptr.div36, %conv39
  store i64 %add, i64* %more_bytes, align 8
  %44 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %45 = load i64, i64* %more_bytes, align 8
  %46 = load i8*, i8** %dst, align 8
  %call40 = call i8* @alloc_destination(%struct.coding_system* %44, i64 %45, i8* %46)
  store i8* %call40, i8** %dst, align 8
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination41 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %47, i32 0, i32 22
  %48 = load i8*, i8** %destination41, align 8
  %49 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes42 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %49, i32 0, i32 20
  %50 = load i64, i64* %dst_bytes42, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %48, i64 %50
  store i8* %add.ptr43, i8** %dst_end, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.32, %do.body.26
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end.45
  %51 = load i32, i32* %i, align 4
  %52 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced46 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %52, i32 0, i32 10
  %53 = load i32, i32* %produced46, align 4
  %cmp47 = icmp slt i32 %51, %53
  br i1 %cmp47, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body.49

do.body.49:                                       ; preds = %for.body
  %54 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %54, 1
  store i64 %inc, i64* %produced_chars, align 8
  %55 = load i8, i8* %multibytep, align 1
  %tobool50 = trunc i8 %55 to i1
  br i1 %tobool50, label %if.then.51, label %if.else.97

if.then.51:                                       ; preds = %do.body.49
  %56 = load i32, i32* %i, align 4
  %idxprom = sext i32 %56 to i64
  %arrayidx = getelementptr inbounds [1024 x i32], [1024 x i32]* %destination_charbuf, i32 0, i64 %idxprom
  %57 = load i32, i32* %arrayidx, align 4
  %and52 = and i32 %57, 255
  store i32 %and52, i32* %ch, align 4
  %58 = load i32, i32* %ch, align 4
  %cmp53 = icmp uge i32 %58, 128
  br i1 %cmp53, label %if.then.55, label %if.end.57

if.then.55:                                       ; preds = %if.then.51
  %59 = load i32, i32* %ch, align 4
  %add56 = add i32 %59, 4194048
  store i32 %add56, i32* %ch, align 4
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.55, %if.then.51
  br label %do.body.58

do.body.58:                                       ; preds = %if.end.57
  %60 = load i32, i32* %ch, align 4
  %cmp59 = icmp ule i32 %60, 127
  br i1 %cmp59, label %if.then.61, label %if.else

if.then.61:                                       ; preds = %do.body.58
  %61 = load i32, i32* %ch, align 4
  %conv62 = trunc i32 %61 to i8
  %62 = load i8*, i8** %dst, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr, i8** %dst, align 8
  store i8 %conv62, i8* %62, align 1
  br label %if.end.95

if.else:                                          ; preds = %do.body.58
  %63 = load i32, i32* %ch, align 4
  %cmp63 = icmp ule i32 %63, 2047
  br i1 %cmp63, label %if.then.65, label %if.else.72

if.then.65:                                       ; preds = %if.else
  %64 = load i32, i32* %ch, align 4
  %shr = lshr i32 %64, 6
  %or = or i32 192, %shr
  %conv66 = trunc i32 %or to i8
  %65 = load i8*, i8** %dst, align 8
  %incdec.ptr67 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %incdec.ptr67, i8** %dst, align 8
  store i8 %conv66, i8* %65, align 1
  %66 = load i32, i32* %ch, align 4
  %and68 = and i32 %66, 63
  %or69 = or i32 128, %and68
  %conv70 = trunc i32 %or69 to i8
  %67 = load i8*, i8** %dst, align 8
  %incdec.ptr71 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %incdec.ptr71, i8** %dst, align 8
  store i8 %conv70, i8* %67, align 1
  br label %if.end.94

if.else.72:                                       ; preds = %if.else
  %68 = load i32, i32* %ch, align 4
  %cmp73 = icmp ule i32 %68, 65535
  br i1 %cmp73, label %if.then.75, label %if.else.89

if.then.75:                                       ; preds = %if.else.72
  %69 = load i32, i32* %ch, align 4
  %shr76 = lshr i32 %69, 12
  %or77 = or i32 224, %shr76
  %conv78 = trunc i32 %or77 to i8
  %70 = load i8*, i8** %dst, align 8
  %incdec.ptr79 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr79, i8** %dst, align 8
  store i8 %conv78, i8* %70, align 1
  %71 = load i32, i32* %ch, align 4
  %shr80 = lshr i32 %71, 6
  %and81 = and i32 %shr80, 63
  %or82 = or i32 128, %and81
  %conv83 = trunc i32 %or82 to i8
  %72 = load i8*, i8** %dst, align 8
  %incdec.ptr84 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %incdec.ptr84, i8** %dst, align 8
  store i8 %conv83, i8* %72, align 1
  %73 = load i32, i32* %ch, align 4
  %and85 = and i32 %73, 63
  %or86 = or i32 128, %and85
  %conv87 = trunc i32 %or86 to i8
  %74 = load i8*, i8** %dst, align 8
  %incdec.ptr88 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr88, i8** %dst, align 8
  store i8 %conv87, i8* %74, align 1
  br label %if.end.93

if.else.89:                                       ; preds = %if.else.72
  %75 = load i32, i32* %ch, align 4
  %76 = load i8*, i8** %dst, align 8
  %call90 = call i32 @char_string(i32 %75, i8* %76)
  %77 = load i8*, i8** %dst, align 8
  %idx.ext91 = sext i32 %call90 to i64
  %add.ptr92 = getelementptr inbounds i8, i8* %77, i64 %idx.ext91
  store i8* %add.ptr92, i8** %dst, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.89, %if.then.75
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.then.65
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.then.61
  br label %do.end.96

do.end.96:                                        ; preds = %if.end.95
  br label %if.end.103

if.else.97:                                       ; preds = %do.body.49
  %78 = load i32, i32* %i, align 4
  %idxprom98 = sext i32 %78 to i64
  %arrayidx99 = getelementptr inbounds [1024 x i32], [1024 x i32]* %destination_charbuf, i32 0, i64 %idxprom98
  %79 = load i32, i32* %arrayidx99, align 4
  %and100 = and i32 %79, 255
  %conv101 = trunc i32 %and100 to i8
  %80 = load i8*, i8** %dst, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr102, i8** %dst, align 8
  store i8 %conv101, i8* %80, align 1
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.97, %do.end.96
  br label %do.end.104

do.end.104:                                       ; preds = %if.end.103
  br label %for.inc

for.inc:                                          ; preds = %do.end.104
  %81 = load i32, i32* %i, align 4
  %inc105 = add nsw i32 %81, 1
  store i32 %inc105, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.144

if.else.106:                                      ; preds = %if.end.23
  br label %do.body.107

do.body.107:                                      ; preds = %if.else.106
  %82 = load i8*, i8** %dst, align 8
  %83 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced108 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %83, i32 0, i32 10
  %84 = load i32, i32* %produced108, align 4
  %idx.ext109 = sext i32 %84 to i64
  %add.ptr110 = getelementptr inbounds i8, i8* %82, i64 %idx.ext109
  %85 = load i8*, i8** %dst_end, align 8
  %cmp111 = icmp uge i8* %add.ptr110, %85
  br i1 %cmp111, label %if.then.113, label %if.end.126

if.then.113:                                      ; preds = %do.body.107
  %86 = load i32*, i32** %charbuf_end, align 8
  %87 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast115 = ptrtoint i32* %86 to i64
  %sub.ptr.rhs.cast116 = ptrtoint i32* %87 to i64
  %sub.ptr.sub117 = sub i64 %sub.ptr.lhs.cast115, %sub.ptr.rhs.cast116
  %sub.ptr.div118 = sdiv exact i64 %sub.ptr.sub117, 4
  %88 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced119 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %88, i32 0, i32 10
  %89 = load i32, i32* %produced119, align 4
  %conv120 = sext i32 %89 to i64
  %add121 = add nsw i64 %sub.ptr.div118, %conv120
  store i64 %add121, i64* %more_bytes114, align 8
  %90 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %91 = load i64, i64* %more_bytes114, align 8
  %92 = load i8*, i8** %dst, align 8
  %call122 = call i8* @alloc_destination(%struct.coding_system* %90, i64 %91, i8* %92)
  store i8* %call122, i8** %dst, align 8
  %93 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination123 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %93, i32 0, i32 22
  %94 = load i8*, i8** %destination123, align 8
  %95 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes124 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %95, i32 0, i32 20
  %96 = load i64, i64* %dst_bytes124, align 8
  %add.ptr125 = getelementptr inbounds i8, i8* %94, i64 %96
  store i8* %add.ptr125, i8** %dst_end, align 8
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.113, %do.body.107
  br label %do.end.127

do.end.127:                                       ; preds = %if.end.126
  store i32 0, i32* %i, align 4
  br label %for.cond.128

for.cond.128:                                     ; preds = %for.inc.138, %do.end.127
  %97 = load i32, i32* %i, align 4
  %98 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced129 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %98, i32 0, i32 10
  %99 = load i32, i32* %produced129, align 4
  %cmp130 = icmp slt i32 %97, %99
  br i1 %cmp130, label %for.body.132, label %for.end.140

for.body.132:                                     ; preds = %for.cond.128
  %100 = load i32, i32* %i, align 4
  %idxprom133 = sext i32 %100 to i64
  %arrayidx134 = getelementptr inbounds [1024 x i32], [1024 x i32]* %destination_charbuf, i32 0, i64 %idxprom133
  %101 = load i32, i32* %arrayidx134, align 4
  %and135 = and i32 %101, 255
  %conv136 = trunc i32 %and135 to i8
  %102 = load i8*, i8** %dst, align 8
  %incdec.ptr137 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr137, i8** %dst, align 8
  store i8 %conv136, i8* %102, align 1
  br label %for.inc.138

for.inc.138:                                      ; preds = %for.body.132
  %103 = load i32, i32* %i, align 4
  %inc139 = add nsw i32 %103, 1
  store i32 %inc139, i32* %i, align 4
  br label %for.cond.128

for.end.140:                                      ; preds = %for.cond.128
  %104 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %produced141 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %104, i32 0, i32 10
  %105 = load i32, i32* %produced141, align 4
  %conv142 = sext i32 %105 to i64
  %106 = load i64, i64* %produced_chars, align 8
  %add143 = add nsw i64 %106, %conv142
  store i64 %add143, i64* %produced_chars, align 8
  br label %if.end.144

if.end.144:                                       ; preds = %for.end.140, %for.end
  %107 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %consumed = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %107, i32 0, i32 9
  %108 = load i32, i32* %consumed, align 4
  %109 = load i32*, i32** %charbuf, align 8
  %idx.ext145 = sext i32 %108 to i64
  %add.ptr146 = getelementptr inbounds i32, i32* %109, i64 %idx.ext145
  store i32* %add.ptr146, i32** %charbuf, align 8
  %110 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %status = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %110, i32 0, i32 6
  %111 = load i32, i32* %status, align 4
  %cmp147 = icmp eq i32 %111, 4
  br i1 %cmp147, label %if.then.152, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.144
  %112 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %status149 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %112, i32 0, i32 6
  %113 = load i32, i32* %status149, align 4
  %cmp150 = icmp eq i32 %113, 3
  br i1 %cmp150, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %lor.lhs.false, %if.end.144
  br label %do.end.156

if.end.153:                                       ; preds = %lor.lhs.false
  br label %do.cond

do.cond:                                          ; preds = %if.end.153
  %114 = load i32*, i32** %charbuf, align 8
  %115 = load i32*, i32** %charbuf_end, align 8
  %cmp154 = icmp ult i32* %114, %115
  br i1 %cmp154, label %do.body.15, label %do.end.156

do.end.156:                                       ; preds = %do.cond, %if.then.152
  %116 = load %struct.ccl_program*, %struct.ccl_program** %ccl, align 8
  %status157 = getelementptr inbounds %struct.ccl_program, %struct.ccl_program* %116, i32 0, i32 6
  %117 = load i32, i32* %status157, align 4
  switch i32 %117, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.158
    i32 4, label %sw.bb.159
    i32 3, label %sw.bb.159
  ]

sw.bb:                                            ; preds = %do.end.156
  %118 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %118, i32 1)
  br label %sw.epilog

sw.bb.158:                                        ; preds = %do.end.156
  %119 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %119, i32 2)
  br label %sw.epilog

sw.bb.159:                                        ; preds = %do.end.156, %do.end.156
  %120 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %120, i32 4)
  br label %sw.epilog

sw.default:                                       ; preds = %do.end.156
  %121 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %121, i32 0)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.159, %sw.bb.158, %sw.bb
  %122 = load i64, i64* %produced_chars, align 8
  %123 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %123, i32 0, i32 9
  %124 = load i64, i64* %produced_char, align 8
  %add160 = add nsw i64 %124, %122
  store i64 %add160, i64* %produced_char, align 8
  %125 = load i8*, i8** %dst, align 8
  %126 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination161 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %126, i32 0, i32 22
  %127 = load i8*, i8** %destination161, align 8
  %sub.ptr.lhs.cast162 = ptrtoint i8* %125 to i64
  %sub.ptr.rhs.cast163 = ptrtoint i8* %127 to i64
  %sub.ptr.sub164 = sub i64 %sub.ptr.lhs.cast162, %sub.ptr.rhs.cast163
  %128 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced165 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %128, i32 0, i32 8
  store i64 %sub.ptr.sub164, i64* %produced165, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_emacs_mule(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %consumed_chars = alloca i64, align 8
  %c = alloca i32, align 4
  %found = alloca i32, align 4
  %src_start = alloca i8*, align 8
  %more_bytes = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 17
  %3 = load i8*, i8** %source1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  %5 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %src_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i32 0, i32* %found, align 4
  %7 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %7, i32 0, i32 0
  %8 = load i32, i32* %checked, align 4
  %or = or i32 %8, 262144
  store i32 %or, i32* %checked, align 4
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 5
  %10 = load i64, i64* %head_ascii, align 8
  %11 = load i8*, i8** %src, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %11, i64 %10
  store i8* %add.ptr2, i8** %src, align 8
  br label %while.body

while.body:                                       ; preds = %entry, %if.then.22, %if.end.140
  %12 = load i8*, i8** %src, align 8
  store i8* %12, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %while.body
  %13 = load i8*, i8** %src, align 8
  %14 = load i8*, i8** %src_end, align 8
  %cmp = icmp eq i8* %13, %14
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %15 = load i8*, i8** %src_base, align 8
  %16 = load i8*, i8** %src, align 8
  %cmp3 = icmp ult i8* %15, %16
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %17, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  br label %no_more_source

if.end.5:                                         ; preds = %do.body
  %18 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %19 = load i8, i8* %18, align 1
  %conv = zext i8 %19 to i32
  store i32 %conv, i32* %c, align 4
  %20 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %20 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.end.5
  %21 = load i32, i32* %c, align 4
  %and = and i32 %21, 128
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.then.8, label %if.end.19

if.then.8:                                        ; preds = %land.lhs.true
  %22 = load i32, i32* %c, align 4
  %and9 = and i32 %22, 254
  %cmp10 = icmp eq i32 %and9, 192
  br i1 %cmp10, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.then.8
  %23 = load i32, i32* %c, align 4
  %and13 = and i32 %23, 1
  %shl = shl i32 %and13, 6
  %24 = load i8*, i8** %src, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr14, i8** %src, align 8
  %25 = load i8, i8* %24, align 1
  %conv15 = zext i8 %25 to i32
  %or16 = or i32 %shl, %conv15
  store i32 %or16, i32* %c, align 4
  br label %if.end.18

if.else:                                          ; preds = %if.then.8
  %26 = load i8*, i8** %src, align 8
  %incdec.ptr17 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr17, i8** %src, align 8
  %27 = load i8*, i8** %src, align 8
  %call = call i32 @string_char(i8* %27, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call
  store i32 %sub, i32* %c, align 4
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %28, i32 3)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.12
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %land.lhs.true, %if.end.5
  %29 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %29, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %30 = load i32, i32* %c, align 4
  %cmp20 = icmp slt i32 %30, 0
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %do.end
  br label %while.body

if.end.23:                                        ; preds = %do.end
  %31 = load i32, i32* %c, align 4
  %cmp24 = icmp eq i32 %31, 128
  br i1 %cmp24, label %if.then.26, label %if.end.73

if.then.26:                                       ; preds = %if.end.23
  br label %repeat

repeat:                                           ; preds = %if.then.71, %if.then.26
  %32 = load i8*, i8** %src, align 8
  store i8* %32, i8** %src_start, align 8
  br label %do.body.27

do.body.27:                                       ; preds = %do.cond, %repeat
  br label %do.body.28

do.body.28:                                       ; preds = %do.body.27
  %33 = load i8*, i8** %src, align 8
  %34 = load i8*, i8** %src_end, align 8
  %cmp29 = icmp eq i8* %33, %34
  br i1 %cmp29, label %if.then.31, label %if.end.36

if.then.31:                                       ; preds = %do.body.28
  %35 = load i8*, i8** %src_base, align 8
  %36 = load i8*, i8** %src, align 8
  %cmp32 = icmp ult i8* %35, %36
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.31
  %37 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %37, i32 1)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.then.31
  br label %no_more_source

if.end.36:                                        ; preds = %do.body.28
  %38 = load i8*, i8** %src, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr37, i8** %src, align 8
  %39 = load i8, i8* %38, align 1
  %conv38 = zext i8 %39 to i32
  store i32 %conv38, i32* %c, align 4
  %40 = load i8, i8* %multibytep, align 1
  %tobool39 = trunc i8 %40 to i1
  br i1 %tobool39, label %land.lhs.true.41, label %if.end.59

land.lhs.true.41:                                 ; preds = %if.end.36
  %41 = load i32, i32* %c, align 4
  %and42 = and i32 %41, 128
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then.44, label %if.end.59

if.then.44:                                       ; preds = %land.lhs.true.41
  %42 = load i32, i32* %c, align 4
  %and45 = and i32 %42, 254
  %cmp46 = icmp eq i32 %and45, 192
  br i1 %cmp46, label %if.then.48, label %if.else.54

if.then.48:                                       ; preds = %if.then.44
  %43 = load i32, i32* %c, align 4
  %and49 = and i32 %43, 1
  %shl50 = shl i32 %and49, 6
  %44 = load i8*, i8** %src, align 8
  %incdec.ptr51 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr51, i8** %src, align 8
  %45 = load i8, i8* %44, align 1
  %conv52 = zext i8 %45 to i32
  %or53 = or i32 %shl50, %conv52
  store i32 %or53, i32* %c, align 4
  br label %if.end.58

if.else.54:                                       ; preds = %if.then.44
  %46 = load i8*, i8** %src, align 8
  %incdec.ptr55 = getelementptr inbounds i8, i8* %46, i32 -1
  store i8* %incdec.ptr55, i8** %src, align 8
  %47 = load i8*, i8** %src, align 8
  %call56 = call i32 @string_char(i8* %47, i8** %src, i32* null)
  %sub57 = sub nsw i32 0, %call56
  store i32 %sub57, i32* %c, align 4
  %48 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %48, i32 3)
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.54, %if.then.48
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %land.lhs.true.41, %if.end.36
  %49 = load i64, i64* %consumed_chars, align 8
  %inc60 = add nsw i64 %49, 1
  store i64 %inc60, i64* %consumed_chars, align 8
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.59
  br label %do.cond

do.cond:                                          ; preds = %do.end.61
  %50 = load i32, i32* %c, align 4
  %cmp62 = icmp sge i32 %50, 160
  br i1 %cmp62, label %do.body.27, label %do.end.64

do.end.64:                                        ; preds = %do.cond
  %51 = load i8*, i8** %src, align 8
  %52 = load i8*, i8** %src_start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp65 = icmp sle i64 %sub.ptr.sub, 4
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %do.end.64
  br label %while.end.141

if.end.68:                                        ; preds = %do.end.64
  store i32 262144, i32* %found, align 4
  %53 = load i32, i32* %c, align 4
  %cmp69 = icmp eq i32 %53, 128
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.68
  br label %repeat

if.end.72:                                        ; preds = %if.end.68
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.end.23
  %54 = load i32, i32* %c, align 4
  %cmp74 = icmp slt i32 %54, 128
  br i1 %cmp74, label %if.then.76, label %if.else.89

if.then.76:                                       ; preds = %if.end.73
  %55 = load i32, i32* %c, align 4
  %cmp77 = icmp slt i32 %55, 32
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.88

land.lhs.true.79:                                 ; preds = %if.then.76
  %56 = load i32, i32* %c, align 4
  %cmp80 = icmp eq i32 %56, 27
  br i1 %cmp80, label %if.then.87, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.79
  %57 = load i32, i32* %c, align 4
  %cmp82 = icmp eq i32 %57, 15
  br i1 %cmp82, label %if.then.87, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %lor.lhs.false
  %58 = load i32, i32* %c, align 4
  %cmp85 = icmp eq i32 %58, 14
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %lor.lhs.false.84, %lor.lhs.false, %land.lhs.true.79
  br label %while.end.141

if.end.88:                                        ; preds = %lor.lhs.false.84, %if.then.76
  br label %if.end.140

if.else.89:                                       ; preds = %if.end.73
  %59 = load i32, i32* %c, align 4
  %idxprom = sext i32 %59 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @emacs_mule_bytes, i32 0, i64 %idxprom
  %60 = load i8, i8* %arrayidx, align 1
  %conv90 = sext i8 %60 to i32
  %sub91 = sub nsw i32 %conv90, 1
  store i32 %sub91, i32* %more_bytes, align 4
  br label %while.cond.92

while.cond.92:                                    ; preds = %if.end.135, %if.else.89
  %61 = load i32, i32* %more_bytes, align 4
  %cmp93 = icmp sgt i32 %61, 0
  br i1 %cmp93, label %while.body.95, label %while.end

while.body.95:                                    ; preds = %while.cond.92
  br label %do.body.96

do.body.96:                                       ; preds = %while.body.95
  %62 = load i8*, i8** %src, align 8
  %63 = load i8*, i8** %src_end, align 8
  %cmp97 = icmp eq i8* %62, %63
  br i1 %cmp97, label %if.then.99, label %if.end.104

if.then.99:                                       ; preds = %do.body.96
  %64 = load i8*, i8** %src_base, align 8
  %65 = load i8*, i8** %src, align 8
  %cmp100 = icmp ult i8* %64, %65
  br i1 %cmp100, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.then.99
  %66 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %66, i32 1)
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.102, %if.then.99
  br label %no_more_source

if.end.104:                                       ; preds = %do.body.96
  %67 = load i8*, i8** %src, align 8
  %incdec.ptr105 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %incdec.ptr105, i8** %src, align 8
  %68 = load i8, i8* %67, align 1
  %conv106 = zext i8 %68 to i32
  store i32 %conv106, i32* %c, align 4
  %69 = load i8, i8* %multibytep, align 1
  %tobool107 = trunc i8 %69 to i1
  br i1 %tobool107, label %land.lhs.true.109, label %if.end.127

land.lhs.true.109:                                ; preds = %if.end.104
  %70 = load i32, i32* %c, align 4
  %and110 = and i32 %70, 128
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %if.then.112, label %if.end.127

if.then.112:                                      ; preds = %land.lhs.true.109
  %71 = load i32, i32* %c, align 4
  %and113 = and i32 %71, 254
  %cmp114 = icmp eq i32 %and113, 192
  br i1 %cmp114, label %if.then.116, label %if.else.122

if.then.116:                                      ; preds = %if.then.112
  %72 = load i32, i32* %c, align 4
  %and117 = and i32 %72, 1
  %shl118 = shl i32 %and117, 6
  %73 = load i8*, i8** %src, align 8
  %incdec.ptr119 = getelementptr inbounds i8, i8* %73, i32 1
  store i8* %incdec.ptr119, i8** %src, align 8
  %74 = load i8, i8* %73, align 1
  %conv120 = zext i8 %74 to i32
  %or121 = or i32 %shl118, %conv120
  store i32 %or121, i32* %c, align 4
  br label %if.end.126

if.else.122:                                      ; preds = %if.then.112
  %75 = load i8*, i8** %src, align 8
  %incdec.ptr123 = getelementptr inbounds i8, i8* %75, i32 -1
  store i8* %incdec.ptr123, i8** %src, align 8
  %76 = load i8*, i8** %src, align 8
  %call124 = call i32 @string_char(i8* %76, i8** %src, i32* null)
  %sub125 = sub nsw i32 0, %call124
  store i32 %sub125, i32* %c, align 4
  %77 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %77, i32 3)
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.122, %if.then.116
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %land.lhs.true.109, %if.end.104
  %78 = load i64, i64* %consumed_chars, align 8
  %inc128 = add nsw i64 %78, 1
  store i64 %inc128, i64* %consumed_chars, align 8
  br label %do.end.130

do.end.130:                                       ; preds = %if.end.127
  %79 = load i32, i32* %c, align 4
  %cmp131 = icmp slt i32 %79, 160
  br i1 %cmp131, label %if.then.133, label %if.end.135

if.then.133:                                      ; preds = %do.end.130
  %80 = load i8*, i8** %src, align 8
  %incdec.ptr134 = getelementptr inbounds i8, i8* %80, i32 -1
  store i8* %incdec.ptr134, i8** %src, align 8
  br label %while.end

if.end.135:                                       ; preds = %do.end.130
  %81 = load i32, i32* %more_bytes, align 4
  %dec = add nsw i32 %81, -1
  store i32 %dec, i32* %more_bytes, align 4
  br label %while.cond.92

while.end:                                        ; preds = %if.then.133, %while.cond.92
  %82 = load i32, i32* %more_bytes, align 4
  %cmp136 = icmp ne i32 %82, 0
  br i1 %cmp136, label %if.then.138, label %if.end.139

if.then.138:                                      ; preds = %while.end
  br label %while.end.141

if.end.139:                                       ; preds = %while.end
  store i32 262144, i32* %found, align 4
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %if.end.88
  br label %while.body

while.end.141:                                    ; preds = %if.then.138, %if.then.87, %if.then.67
  %83 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %83, i32 0, i32 2
  %84 = load i32, i32* %rejected, align 4
  %or142 = or i32 %84, 262144
  store i32 %or142, i32* %rejected, align 4
  store i1 false, i1* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.103, %if.end.35, %if.end
  %85 = load i8*, i8** %src_base, align 8
  %86 = load i8*, i8** %src, align 8
  %cmp143 = icmp ult i8* %85, %86
  br i1 %cmp143, label %land.lhs.true.145, label %if.end.154

land.lhs.true.145:                                ; preds = %no_more_source
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %87, i32 0, i32 1
  %bf.load146 = load i32, i32* %mode, align 8
  %bf.lshr147 = lshr i32 %bf.load146, 14
  %bf.clear148 = and i32 %bf.lshr147, 31
  %and149 = and i32 %bf.clear148, 1
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %if.then.151, label %if.end.154

if.then.151:                                      ; preds = %land.lhs.true.145
  %88 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected152 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %88, i32 0, i32 2
  %89 = load i32, i32* %rejected152, align 4
  %or153 = or i32 %89, 262144
  store i32 %or153, i32* %rejected152, align 4
  store i1 false, i1* %retval
  br label %return

if.end.154:                                       ; preds = %land.lhs.true.145, %no_more_source
  %90 = load i32, i32* %found, align 4
  %91 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found155 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %91, i32 0, i32 1
  %92 = load i32, i32* %found155, align 4
  %or156 = or i32 %92, %90
  store i32 %or156, i32* %found155, align 4
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.154, %if.then.151, %while.end.141
  %93 = load i1, i1* %retval
  ret i1 %93
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_emacs_mule(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %consumed_chars_base = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %char_offset = alloca i64, align 8
  %last_offset = alloca i64, align 8
  %last_id = alloca i32, align 4
  %eol_dos = alloca i8, align 1
  %byte_after_cr = alloca i32, align 4
  %cmp_status = alloca %struct.composition_status*, align 8
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %id25 = alloca i32, align 4
  %current_src = alloca i8*, align 8
  %method = alloca i32, align 4
  %nbytes = alloca i32, align 4
  %nchars = alloca i32, align 4
  %nchars387 = alloca i32, align 4
  %nbytes388 = alloca i32, align 4
  %orig = alloca i8*, align 8
  %offset = alloca i64, align 8
  %idx = alloca i32, align 4
  %idx533 = alloca i32, align 4
  %rule = alloca i32, align 4
  %idx570 = alloca i32, align 4
  %gref = alloca i32, align 4
  %nref = alloca i32, align 4
  %rule667 = alloca i32, align 4
  %gref669 = alloca i32, align 4
  %nref670 = alloca i32, align 4
  %i832 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr7, i64 -15
  %add.ptr9 = getelementptr inbounds i32, i32* %add.ptr8, i64 -1
  store i32* %add.ptr9, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 9
  %18 = load i64, i64* %produced_char, align 8
  store i64 %18, i64* %char_offset, align 8
  %19 = load i64, i64* %char_offset, align 8
  store i64 %19, i64* %last_offset, align 8
  %20 = load i32, i32* @charset_ascii, align 4
  store i32 %20, i32* %last_id, align 4
  %21 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %21 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %22 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %22)
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 0
  %24 = load i64, i64* %id, align 8
  %call10 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %24)
  %call11 = call i64 @AREF(i64 %call10, i64 2)
  %call12 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp = icmp eq i64 %call11, %call12
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %25 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool13 = zext i1 %25 to i8
  store i8 %frombool13, i8* %eol_dos, align 1
  store i32 -1, i32* %byte_after_cr, align 4
  %26 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 3
  %emacs_mule = bitcast %union.anon* %spec to %struct.emacs_mule_spec*
  %cmp_status14 = getelementptr inbounds %struct.emacs_mule_spec, %struct.emacs_mule_spec* %emacs_mule, i32 0, i32 0
  store %struct.composition_status* %cmp_status14, %struct.composition_status** %cmp_status, align 8
  %27 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state = getelementptr inbounds %struct.composition_status, %struct.composition_status* %27, i32 0, i32 0
  %28 = load i32, i32* %state, align 4
  %cmp15 = icmp ne i32 %28, 0
  br i1 %cmp15, label %if.then, label %if.end.24

if.then:                                          ; preds = %land.end
  %29 = load i32*, i32** %charbuf_end, align 8
  %30 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %29 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %30 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %31 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length = getelementptr inbounds %struct.composition_status, %struct.composition_status* %31, i32 0, i32 3
  %32 = load i32, i32* %length, align 4
  %conv = sext i32 %32 to i64
  %cmp16 = icmp slt i64 %sub.ptr.div, %conv
  br i1 %cmp16, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %if.then
  call void @emacs_abort() #6
  unreachable

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length19 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %34, i32 0, i32 3
  %35 = load i32, i32* %length19, align 4
  %cmp20 = icmp slt i32 %33, %35
  br i1 %cmp20, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load i32, i32* %i, align 4
  %idxprom = sext i32 %36 to i64
  %37 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %carryover = getelementptr inbounds %struct.composition_status, %struct.composition_status* %37, i32 0, i32 6
  %arrayidx = getelementptr inbounds [68 x i32], [68 x i32]* %carryover, i32 0, i64 %idxprom
  %38 = load i32, i32* %arrayidx, align 4
  %39 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %39, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  store i32 %38, i32* %39, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %41 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %41, i32 0, i32 1
  %bf.load22 = load i32, i32* %annotated, align 8
  %bf.clear23 = and i32 %bf.load22, -8388609
  %bf.set = or i32 %bf.clear23, 8388608
  store i32 %bf.set, i32* %annotated, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %for.end, %land.end
  br label %while.body

while.body:                                       ; preds = %if.end.24, %if.end.314, %if.end.754, %cond.end
  %42 = load i8*, i8** %src, align 8
  store i8* %42, i8** %src_base, align 8
  %43 = load i64, i64* %consumed_chars, align 8
  store i64 %43, i64* %consumed_chars_base, align 8
  %44 = load i32*, i32** %charbuf, align 8
  %45 = load i32*, i32** %charbuf_end, align 8
  %cmp26 = icmp uge i32* %44, %45
  br i1 %cmp26, label %if.then.28, label %if.end.34

if.then.28:                                       ; preds = %while.body
  %46 = load i32, i32* %byte_after_cr, align 4
  %cmp29 = icmp sge i32 %46, 0
  br i1 %cmp29, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.then.28
  %47 = load i8*, i8** %src_base, align 8
  %incdec.ptr32 = getelementptr inbounds i8, i8* %47, i32 -1
  store i8* %incdec.ptr32, i8** %src_base, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %if.then.28
  br label %while.end

if.end.34:                                        ; preds = %while.body
  %48 = load i32, i32* %byte_after_cr, align 4
  %cmp35 = icmp sge i32 %48, 0
  br i1 %cmp35, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %if.end.34
  %49 = load i32, i32* %byte_after_cr, align 4
  store i32 %49, i32* %c, align 4
  store i32 -1, i32* %byte_after_cr, align 4
  br label %if.end.65

if.else:                                          ; preds = %if.end.34
  br label %do.body

do.body:                                          ; preds = %if.else
  %50 = load i8*, i8** %src, align 8
  %51 = load i8*, i8** %src_end, align 8
  %cmp38 = icmp eq i8* %50, %51
  br i1 %cmp38, label %if.then.40, label %if.end.45

if.then.40:                                       ; preds = %do.body
  %52 = load i8*, i8** %src_base, align 8
  %53 = load i8*, i8** %src, align 8
  %cmp41 = icmp ult i8* %52, %53
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.then.40
  %54 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %54, i32 1)
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.43, %if.then.40
  br label %no_more_source

if.end.45:                                        ; preds = %do.body
  %55 = load i8*, i8** %src, align 8
  %incdec.ptr46 = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr46, i8** %src, align 8
  %56 = load i8, i8* %55, align 1
  %conv47 = zext i8 %56 to i32
  store i32 %conv47, i32* %c, align 4
  %57 = load i8, i8* %multibytep, align 1
  %tobool48 = trunc i8 %57 to i1
  br i1 %tobool48, label %land.lhs.true, label %if.end.63

land.lhs.true:                                    ; preds = %if.end.45
  %58 = load i32, i32* %c, align 4
  %and = and i32 %58, 128
  %tobool50 = icmp ne i32 %and, 0
  br i1 %tobool50, label %if.then.51, label %if.end.63

if.then.51:                                       ; preds = %land.lhs.true
  %59 = load i32, i32* %c, align 4
  %and52 = and i32 %59, 254
  %cmp53 = icmp eq i32 %and52, 192
  br i1 %cmp53, label %if.then.55, label %if.else.59

if.then.55:                                       ; preds = %if.then.51
  %60 = load i32, i32* %c, align 4
  %and56 = and i32 %60, 1
  %shl = shl i32 %and56, 6
  %61 = load i8*, i8** %src, align 8
  %incdec.ptr57 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr57, i8** %src, align 8
  %62 = load i8, i8* %61, align 1
  %conv58 = zext i8 %62 to i32
  %or = or i32 %shl, %conv58
  store i32 %or, i32* %c, align 4
  br label %if.end.62

if.else.59:                                       ; preds = %if.then.51
  %63 = load i8*, i8** %src, align 8
  %incdec.ptr60 = getelementptr inbounds i8, i8* %63, i32 -1
  store i8* %incdec.ptr60, i8** %src, align 8
  %64 = load i8*, i8** %src, align 8
  %call61 = call i32 @string_char(i8* %64, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call61
  store i32 %sub, i32* %c, align 4
  %65 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %65, i32 3)
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.59, %if.then.55
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %land.lhs.true, %if.end.45
  %66 = load i64, i64* %consumed_chars, align 8
  %inc64 = add nsw i64 %66, 1
  store i64 %inc64, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.63
  br label %if.end.65

if.end.65:                                        ; preds = %do.end, %if.then.37
  %67 = load i32, i32* %c, align 4
  %cmp66 = icmp slt i32 %67, 0
  br i1 %cmp66, label %if.then.70, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.65
  %68 = load i32, i32* %c, align 4
  %cmp68 = icmp eq i32 %68, 128
  br i1 %cmp68, label %if.then.70, label %if.end.315

if.then.70:                                       ; preds = %lor.lhs.false, %if.end.65
  br label %do.body.71

do.body.71:                                       ; preds = %if.then.70
  %69 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state72 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %69, i32 0, i32 0
  %70 = load i32, i32* %state72, align 4
  %cmp73 = icmp ne i32 %70, 0
  br i1 %cmp73, label %if.then.75, label %if.end.78

if.then.75:                                       ; preds = %do.body.71
  %71 = load i32*, i32** %charbuf, align 8
  %72 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call76 = call i32 @emacs_mule_finish_composition(i32* %71, %struct.composition_status* %72)
  %conv77 = sext i32 %call76 to i64
  %73 = load i64, i64* %char_offset, align 8
  %add = add nsw i64 %73, %conv77
  store i64 %add, i64* %char_offset, align 8
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.75, %do.body.71
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  %74 = load i32, i32* %c, align 4
  %cmp80 = icmp slt i32 %74, 0
  br i1 %cmp80, label %if.then.82, label %if.else.86

if.then.82:                                       ; preds = %do.end.79
  %75 = load i32, i32* %c, align 4
  %sub83 = sub nsw i32 0, %75
  %76 = load i32*, i32** %charbuf, align 8
  %incdec.ptr84 = getelementptr inbounds i32, i32* %76, i32 1
  store i32* %incdec.ptr84, i32** %charbuf, align 8
  store i32 %sub83, i32* %76, align 4
  %77 = load i64, i64* %char_offset, align 8
  %inc85 = add nsw i64 %77, 1
  store i64 %inc85, i64* %char_offset, align 8
  br label %if.end.314

if.else.86:                                       ; preds = %do.end.79
  br label %do.body.87

do.body.87:                                       ; preds = %if.else.86
  %78 = load i8*, i8** %src, align 8
  store i8* %78, i8** %current_src, align 8
  br label %do.body.88

do.body.88:                                       ; preds = %do.body.87
  %79 = load i8*, i8** %src, align 8
  %80 = load i8*, i8** %src_end, align 8
  %cmp89 = icmp eq i8* %79, %80
  br i1 %cmp89, label %if.then.91, label %if.end.96

if.then.91:                                       ; preds = %do.body.88
  %81 = load i8*, i8** %src_base, align 8
  %82 = load i8*, i8** %src, align 8
  %cmp92 = icmp ult i8* %81, %82
  br i1 %cmp92, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %if.then.91
  %83 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %83, i32 1)
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.94, %if.then.91
  br label %no_more_source

if.end.96:                                        ; preds = %do.body.88
  %84 = load i8*, i8** %src, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %incdec.ptr97, i8** %src, align 8
  %85 = load i8, i8* %84, align 1
  %conv98 = zext i8 %85 to i32
  store i32 %conv98, i32* %c, align 4
  %86 = load i8, i8* %multibytep, align 1
  %tobool99 = trunc i8 %86 to i1
  br i1 %tobool99, label %land.lhs.true.101, label %if.end.119

land.lhs.true.101:                                ; preds = %if.end.96
  %87 = load i32, i32* %c, align 4
  %and102 = and i32 %87, 128
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then.104, label %if.end.119

if.then.104:                                      ; preds = %land.lhs.true.101
  %88 = load i32, i32* %c, align 4
  %and105 = and i32 %88, 254
  %cmp106 = icmp eq i32 %and105, 192
  br i1 %cmp106, label %if.then.108, label %if.else.114

if.then.108:                                      ; preds = %if.then.104
  %89 = load i32, i32* %c, align 4
  %and109 = and i32 %89, 1
  %shl110 = shl i32 %and109, 6
  %90 = load i8*, i8** %src, align 8
  %incdec.ptr111 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %incdec.ptr111, i8** %src, align 8
  %91 = load i8, i8* %90, align 1
  %conv112 = zext i8 %91 to i32
  %or113 = or i32 %shl110, %conv112
  store i32 %or113, i32* %c, align 4
  br label %if.end.118

if.else.114:                                      ; preds = %if.then.104
  %92 = load i8*, i8** %src, align 8
  %incdec.ptr115 = getelementptr inbounds i8, i8* %92, i32 -1
  store i8* %incdec.ptr115, i8** %src, align 8
  %93 = load i8*, i8** %src, align 8
  %call116 = call i32 @string_char(i8* %93, i8** %src, i32* null)
  %sub117 = sub nsw i32 0, %call116
  store i32 %sub117, i32* %c, align 4
  %94 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %94, i32 3)
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.114, %if.then.108
  br label %if.end.119

if.end.119:                                       ; preds = %if.end.118, %land.lhs.true.101, %if.end.96
  %95 = load i64, i64* %consumed_chars, align 8
  %inc120 = add nsw i64 %95, 1
  store i64 %inc120, i64* %consumed_chars, align 8
  br label %do.end.121

do.end.121:                                       ; preds = %if.end.119
  %96 = load i32, i32* %c, align 4
  %cmp122 = icmp slt i32 %96, 0
  br i1 %cmp122, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %do.end.121
  br label %invalid_code

if.end.125:                                       ; preds = %do.end.121
  %97 = load i32, i32* %c, align 4
  %sub126 = sub nsw i32 %97, 242
  %cmp127 = icmp sge i32 %sub126, 0
  br i1 %cmp127, label %land.lhs.true.129, label %if.else.252

land.lhs.true.129:                                ; preds = %if.end.125
  %98 = load i32, i32* %c, align 4
  %sub130 = sub nsw i32 %98, 242
  %cmp131 = icmp sle i32 %sub130, 3
  br i1 %cmp131, label %if.then.133, label %if.else.252

if.then.133:                                      ; preds = %land.lhs.true.129
  br label %do.body.134

do.body.134:                                      ; preds = %if.then.133
  %99 = load i32, i32* %c, align 4
  %sub135 = sub nsw i32 %99, 242
  store i32 %sub135, i32* %method, align 4
  br label %do.body.136

do.body.136:                                      ; preds = %do.body.134
  %100 = load i8*, i8** %src, align 8
  %101 = load i8*, i8** %src_end, align 8
  %cmp137 = icmp eq i8* %100, %101
  br i1 %cmp137, label %if.then.139, label %if.end.144

if.then.139:                                      ; preds = %do.body.136
  %102 = load i8*, i8** %src_base, align 8
  %103 = load i8*, i8** %src, align 8
  %cmp140 = icmp ult i8* %102, %103
  br i1 %cmp140, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %if.then.139
  %104 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %104, i32 1)
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.142, %if.then.139
  br label %no_more_source

if.end.144:                                       ; preds = %do.body.136
  %105 = load i8*, i8** %src, align 8
  %incdec.ptr145 = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %incdec.ptr145, i8** %src, align 8
  %106 = load i8, i8* %105, align 1
  %conv146 = zext i8 %106 to i32
  store i32 %conv146, i32* %c, align 4
  %107 = load i8, i8* %multibytep, align 1
  %tobool147 = trunc i8 %107 to i1
  br i1 %tobool147, label %land.lhs.true.149, label %if.end.167

land.lhs.true.149:                                ; preds = %if.end.144
  %108 = load i32, i32* %c, align 4
  %and150 = and i32 %108, 128
  %tobool151 = icmp ne i32 %and150, 0
  br i1 %tobool151, label %if.then.152, label %if.end.167

if.then.152:                                      ; preds = %land.lhs.true.149
  %109 = load i32, i32* %c, align 4
  %and153 = and i32 %109, 254
  %cmp154 = icmp eq i32 %and153, 192
  br i1 %cmp154, label %if.then.156, label %if.else.162

if.then.156:                                      ; preds = %if.then.152
  %110 = load i32, i32* %c, align 4
  %and157 = and i32 %110, 1
  %shl158 = shl i32 %and157, 6
  %111 = load i8*, i8** %src, align 8
  %incdec.ptr159 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %incdec.ptr159, i8** %src, align 8
  %112 = load i8, i8* %111, align 1
  %conv160 = zext i8 %112 to i32
  %or161 = or i32 %shl158, %conv160
  store i32 %or161, i32* %c, align 4
  br label %if.end.166

if.else.162:                                      ; preds = %if.then.152
  %113 = load i8*, i8** %src, align 8
  %incdec.ptr163 = getelementptr inbounds i8, i8* %113, i32 -1
  store i8* %incdec.ptr163, i8** %src, align 8
  %114 = load i8*, i8** %src, align 8
  %call164 = call i32 @string_char(i8* %114, i8** %src, i32* null)
  %sub165 = sub nsw i32 0, %call164
  store i32 %sub165, i32* %c, align 4
  %115 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %115, i32 3)
  br label %if.end.166

if.end.166:                                       ; preds = %if.else.162, %if.then.156
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %land.lhs.true.149, %if.end.144
  %116 = load i64, i64* %consumed_chars, align 8
  %inc168 = add nsw i64 %116, 1
  store i64 %inc168, i64* %consumed_chars, align 8
  br label %do.end.169

do.end.169:                                       ; preds = %if.end.167
  %117 = load i32, i32* %c, align 4
  %cmp170 = icmp slt i32 %117, 0
  br i1 %cmp170, label %if.then.172, label %if.end.173

if.then.172:                                      ; preds = %do.end.169
  br label %invalid_code

if.end.173:                                       ; preds = %do.end.169
  %118 = load i32, i32* %c, align 4
  %sub174 = sub nsw i32 %118, 160
  store i32 %sub174, i32* %nbytes, align 4
  %119 = load i32, i32* %nbytes, align 4
  %cmp175 = icmp slt i32 %119, 3
  br i1 %cmp175, label %if.then.183, label %lor.lhs.false.177

lor.lhs.false.177:                                ; preds = %if.end.173
  %120 = load i32, i32* %method, align 4
  %cmp178 = icmp eq i32 %120, 0
  br i1 %cmp178, label %land.lhs.true.180, label %if.end.184

land.lhs.true.180:                                ; preds = %lor.lhs.false.177
  %121 = load i32, i32* %nbytes, align 4
  %cmp181 = icmp ne i32 %121, 4
  br i1 %cmp181, label %if.then.183, label %if.end.184

if.then.183:                                      ; preds = %land.lhs.true.180, %if.end.173
  br label %invalid_code

if.end.184:                                       ; preds = %land.lhs.true.180, %lor.lhs.false.177
  br label %do.body.185

do.body.185:                                      ; preds = %if.end.184
  %122 = load i8*, i8** %src, align 8
  %123 = load i8*, i8** %src_end, align 8
  %cmp186 = icmp eq i8* %122, %123
  br i1 %cmp186, label %if.then.188, label %if.end.193

if.then.188:                                      ; preds = %do.body.185
  %124 = load i8*, i8** %src_base, align 8
  %125 = load i8*, i8** %src, align 8
  %cmp189 = icmp ult i8* %124, %125
  br i1 %cmp189, label %if.then.191, label %if.end.192

if.then.191:                                      ; preds = %if.then.188
  %126 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %126, i32 1)
  br label %if.end.192

if.end.192:                                       ; preds = %if.then.191, %if.then.188
  br label %no_more_source

if.end.193:                                       ; preds = %do.body.185
  %127 = load i8*, i8** %src, align 8
  %incdec.ptr194 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %incdec.ptr194, i8** %src, align 8
  %128 = load i8, i8* %127, align 1
  %conv195 = zext i8 %128 to i32
  store i32 %conv195, i32* %c, align 4
  %129 = load i8, i8* %multibytep, align 1
  %tobool196 = trunc i8 %129 to i1
  br i1 %tobool196, label %land.lhs.true.198, label %if.end.216

land.lhs.true.198:                                ; preds = %if.end.193
  %130 = load i32, i32* %c, align 4
  %and199 = and i32 %130, 128
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %if.then.201, label %if.end.216

if.then.201:                                      ; preds = %land.lhs.true.198
  %131 = load i32, i32* %c, align 4
  %and202 = and i32 %131, 254
  %cmp203 = icmp eq i32 %and202, 192
  br i1 %cmp203, label %if.then.205, label %if.else.211

if.then.205:                                      ; preds = %if.then.201
  %132 = load i32, i32* %c, align 4
  %and206 = and i32 %132, 1
  %shl207 = shl i32 %and206, 6
  %133 = load i8*, i8** %src, align 8
  %incdec.ptr208 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr208, i8** %src, align 8
  %134 = load i8, i8* %133, align 1
  %conv209 = zext i8 %134 to i32
  %or210 = or i32 %shl207, %conv209
  store i32 %or210, i32* %c, align 4
  br label %if.end.215

if.else.211:                                      ; preds = %if.then.201
  %135 = load i8*, i8** %src, align 8
  %incdec.ptr212 = getelementptr inbounds i8, i8* %135, i32 -1
  store i8* %incdec.ptr212, i8** %src, align 8
  %136 = load i8*, i8** %src, align 8
  %call213 = call i32 @string_char(i8* %136, i8** %src, i32* null)
  %sub214 = sub nsw i32 0, %call213
  store i32 %sub214, i32* %c, align 4
  %137 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %137, i32 3)
  br label %if.end.215

if.end.215:                                       ; preds = %if.else.211, %if.then.205
  br label %if.end.216

if.end.216:                                       ; preds = %if.end.215, %land.lhs.true.198, %if.end.193
  %138 = load i64, i64* %consumed_chars, align 8
  %inc217 = add nsw i64 %138, 1
  store i64 %inc217, i64* %consumed_chars, align 8
  br label %do.end.218

do.end.218:                                       ; preds = %if.end.216
  %139 = load i32, i32* %c, align 4
  %sub219 = sub nsw i32 %139, 160
  store i32 %sub219, i32* %nchars, align 4
  %140 = load i32, i32* %nchars, align 4
  %cmp220 = icmp sle i32 %140, 0
  br i1 %cmp220, label %if.then.225, label %lor.lhs.false.222

lor.lhs.false.222:                                ; preds = %do.end.218
  %141 = load i32, i32* %nchars, align 4
  %cmp223 = icmp sge i32 %141, 16
  br i1 %cmp223, label %if.then.225, label %if.end.226

if.then.225:                                      ; preds = %lor.lhs.false.222, %do.end.218
  br label %invalid_code

if.end.226:                                       ; preds = %lor.lhs.false.222
  %142 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form = getelementptr inbounds %struct.composition_status, %struct.composition_status* %142, i32 0, i32 2
  store i8 0, i8* %old_form, align 1
  %143 = load i32, i32* %method, align 4
  %144 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method227 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %144, i32 0, i32 1
  store i32 %143, i32* %method227, align 4
  %145 = load i32, i32* %method, align 4
  %cmp228 = icmp eq i32 %145, 0
  br i1 %cmp228, label %if.then.230, label %if.else.232

if.then.230:                                      ; preds = %if.end.226
  %146 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state231 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %146, i32 0, i32 0
  store i32 1, i32* %state231, align 4
  br label %if.end.234

if.else.232:                                      ; preds = %if.end.226
  %147 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state233 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %147, i32 0, i32 0
  store i32 3, i32* %state233, align 4
  br label %if.end.234

if.end.234:                                       ; preds = %if.else.232, %if.then.230
  %148 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length235 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %148, i32 0, i32 3
  store i32 5, i32* %length235, align 4
  %149 = load i32, i32* %nchars, align 4
  %150 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars236 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %150, i32 0, i32 4
  store i32 %149, i32* %nchars236, align 4
  %151 = load i32, i32* %nbytes, align 4
  %sub237 = sub nsw i32 %151, 4
  %152 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps = getelementptr inbounds %struct.composition_status, %struct.composition_status* %152, i32 0, i32 5
  store i32 %sub237, i32* %ncomps, align 4
  br label %do.body.238

do.body.238:                                      ; preds = %if.end.234
  br label %do.body.239

do.body.239:                                      ; preds = %do.body.238
  %153 = load i32*, i32** %charbuf, align 8
  %incdec.ptr240 = getelementptr inbounds i32, i32* %153, i32 1
  store i32* %incdec.ptr240, i32** %charbuf, align 8
  store i32 -5, i32* %153, align 4
  %154 = load i32*, i32** %charbuf, align 8
  %incdec.ptr241 = getelementptr inbounds i32, i32* %154, i32 1
  store i32* %incdec.ptr241, i32** %charbuf, align 8
  store i32 1, i32* %154, align 4
  %155 = load i32, i32* %nchars, align 4
  %156 = load i32*, i32** %charbuf, align 8
  %incdec.ptr242 = getelementptr inbounds i32, i32* %156, i32 1
  store i32* %incdec.ptr242, i32** %charbuf, align 8
  store i32 %155, i32* %156, align 4
  %157 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated243 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %157, i32 0, i32 1
  %bf.load244 = load i32, i32* %annotated243, align 8
  %bf.clear245 = and i32 %bf.load244, -8388609
  %bf.set246 = or i32 %bf.clear245, 8388608
  store i32 %bf.set246, i32* %annotated243, align 8
  br label %do.end.247

do.end.247:                                       ; preds = %do.body.239
  %158 = load i32, i32* %nbytes, align 4
  %159 = load i32*, i32** %charbuf, align 8
  %incdec.ptr248 = getelementptr inbounds i32, i32* %159, i32 1
  store i32* %incdec.ptr248, i32** %charbuf, align 8
  store i32 %158, i32* %159, align 4
  %160 = load i32, i32* %method, align 4
  %161 = load i32*, i32** %charbuf, align 8
  %incdec.ptr249 = getelementptr inbounds i32, i32* %161, i32 1
  store i32* %incdec.ptr249, i32** %charbuf, align 8
  store i32 %160, i32* %161, align 4
  br label %do.end.250

do.end.250:                                       ; preds = %do.end.247
  br label %do.end.251

do.end.251:                                       ; preds = %do.end.250
  br label %if.end.312

if.else.252:                                      ; preds = %land.lhs.true.129, %if.end.125
  %162 = load i32, i32* %c, align 4
  %cmp253 = icmp slt i32 %162, 160
  br i1 %cmp253, label %if.then.255, label %if.else.256

if.then.255:                                      ; preds = %if.else.252
  br label %invalid_code

if.else.256:                                      ; preds = %if.else.252
  %163 = load i32, i32* %c, align 4
  %cmp257 = icmp slt i32 %163, 192
  br i1 %cmp257, label %if.then.259, label %if.else.282

if.then.259:                                      ; preds = %if.else.256
  br label %do.body.260

do.body.260:                                      ; preds = %if.then.259
  %164 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form261 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %164, i32 0, i32 2
  store i8 1, i8* %old_form261, align 1
  %165 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method262 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %165, i32 0, i32 1
  store i32 0, i32* %method262, align 4
  %166 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state263 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %166, i32 0, i32 0
  store i32 1, i32* %state263, align 4
  %167 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length264 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %167, i32 0, i32 3
  store i32 5, i32* %length264, align 4
  %168 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps265 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %168, i32 0, i32 5
  store i32 0, i32* %ncomps265, align 4
  %169 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars266 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %169, i32 0, i32 4
  store i32 0, i32* %nchars266, align 4
  br label %do.body.267

do.body.267:                                      ; preds = %do.body.260
  br label %do.body.268

do.body.268:                                      ; preds = %do.body.267
  %170 = load i32*, i32** %charbuf, align 8
  %incdec.ptr269 = getelementptr inbounds i32, i32* %170, i32 1
  store i32* %incdec.ptr269, i32** %charbuf, align 8
  store i32 -5, i32* %170, align 4
  %171 = load i32*, i32** %charbuf, align 8
  %incdec.ptr270 = getelementptr inbounds i32, i32* %171, i32 1
  store i32* %incdec.ptr270, i32** %charbuf, align 8
  store i32 1, i32* %171, align 4
  %172 = load i32*, i32** %charbuf, align 8
  %incdec.ptr271 = getelementptr inbounds i32, i32* %172, i32 1
  store i32* %incdec.ptr271, i32** %charbuf, align 8
  store i32 0, i32* %172, align 4
  %173 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated272 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %173, i32 0, i32 1
  %bf.load273 = load i32, i32* %annotated272, align 8
  %bf.clear274 = and i32 %bf.load273, -8388609
  %bf.set275 = or i32 %bf.clear274, 8388608
  store i32 %bf.set275, i32* %annotated272, align 8
  br label %do.end.276

do.end.276:                                       ; preds = %do.body.268
  %174 = load i32*, i32** %charbuf, align 8
  %incdec.ptr277 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr277, i32** %charbuf, align 8
  store i32 0, i32* %174, align 4
  %175 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method278 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %175, i32 0, i32 1
  %176 = load i32, i32* %method278, align 4
  %177 = load i32*, i32** %charbuf, align 8
  %incdec.ptr279 = getelementptr inbounds i32, i32* %177, i32 1
  store i32* %incdec.ptr279, i32** %charbuf, align 8
  store i32 %176, i32* %177, align 4
  br label %do.end.280

do.end.280:                                       ; preds = %do.end.276
  br label %do.end.281

do.end.281:                                       ; preds = %do.end.280
  %178 = load i8*, i8** %current_src, align 8
  store i8* %178, i8** %src, align 8
  br label %if.end.310

if.else.282:                                      ; preds = %if.else.256
  %179 = load i32, i32* %c, align 4
  %cmp283 = icmp eq i32 %179, 255
  br i1 %cmp283, label %if.then.285, label %if.else.308

if.then.285:                                      ; preds = %if.else.282
  br label %do.body.286

do.body.286:                                      ; preds = %if.then.285
  %180 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form287 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %180, i32 0, i32 2
  store i8 1, i8* %old_form287, align 1
  %181 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method288 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %181, i32 0, i32 1
  store i32 1, i32* %method288, align 4
  %182 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state289 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %182, i32 0, i32 0
  store i32 1, i32* %state289, align 4
  %183 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length290 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %183, i32 0, i32 3
  store i32 5, i32* %length290, align 4
  %184 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps291 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %184, i32 0, i32 5
  store i32 0, i32* %ncomps291, align 4
  %185 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars292 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %185, i32 0, i32 4
  store i32 0, i32* %nchars292, align 4
  br label %do.body.293

do.body.293:                                      ; preds = %do.body.286
  br label %do.body.294

do.body.294:                                      ; preds = %do.body.293
  %186 = load i32*, i32** %charbuf, align 8
  %incdec.ptr295 = getelementptr inbounds i32, i32* %186, i32 1
  store i32* %incdec.ptr295, i32** %charbuf, align 8
  store i32 -5, i32* %186, align 4
  %187 = load i32*, i32** %charbuf, align 8
  %incdec.ptr296 = getelementptr inbounds i32, i32* %187, i32 1
  store i32* %incdec.ptr296, i32** %charbuf, align 8
  store i32 1, i32* %187, align 4
  %188 = load i32*, i32** %charbuf, align 8
  %incdec.ptr297 = getelementptr inbounds i32, i32* %188, i32 1
  store i32* %incdec.ptr297, i32** %charbuf, align 8
  store i32 0, i32* %188, align 4
  %189 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated298 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %189, i32 0, i32 1
  %bf.load299 = load i32, i32* %annotated298, align 8
  %bf.clear300 = and i32 %bf.load299, -8388609
  %bf.set301 = or i32 %bf.clear300, 8388608
  store i32 %bf.set301, i32* %annotated298, align 8
  br label %do.end.302

do.end.302:                                       ; preds = %do.body.294
  %190 = load i32*, i32** %charbuf, align 8
  %incdec.ptr303 = getelementptr inbounds i32, i32* %190, i32 1
  store i32* %incdec.ptr303, i32** %charbuf, align 8
  store i32 0, i32* %190, align 4
  %191 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method304 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %191, i32 0, i32 1
  %192 = load i32, i32* %method304, align 4
  %193 = load i32*, i32** %charbuf, align 8
  %incdec.ptr305 = getelementptr inbounds i32, i32* %193, i32 1
  store i32* %incdec.ptr305, i32** %charbuf, align 8
  store i32 %192, i32* %193, align 4
  br label %do.end.306

do.end.306:                                       ; preds = %do.end.302
  br label %do.end.307

do.end.307:                                       ; preds = %do.end.306
  br label %if.end.309

if.else.308:                                      ; preds = %if.else.282
  br label %invalid_code

if.end.309:                                       ; preds = %do.end.307
  br label %if.end.310

if.end.310:                                       ; preds = %if.end.309, %do.end.281
  br label %if.end.311

if.end.311:                                       ; preds = %if.end.310
  br label %if.end.312

if.end.312:                                       ; preds = %if.end.311, %do.end.251
  br label %do.end.313

do.end.313:                                       ; preds = %if.end.312
  br label %if.end.314

if.end.314:                                       ; preds = %do.end.313, %if.then.82
  br label %while.body

if.end.315:                                       ; preds = %lor.lhs.false
  %194 = load i32, i32* %c, align 4
  %cmp316 = icmp slt i32 %194, 128
  br i1 %cmp316, label %if.then.318, label %if.else.386

if.then.318:                                      ; preds = %if.end.315
  %195 = load i8, i8* %eol_dos, align 1
  %tobool319 = trunc i8 %195 to i1
  br i1 %tobool319, label %land.lhs.true.321, label %if.end.359

land.lhs.true.321:                                ; preds = %if.then.318
  %196 = load i32, i32* %c, align 4
  %cmp322 = icmp eq i32 %196, 13
  br i1 %cmp322, label %if.then.324, label %if.end.359

if.then.324:                                      ; preds = %land.lhs.true.321
  br label %do.body.325

do.body.325:                                      ; preds = %if.then.324
  %197 = load i8*, i8** %src, align 8
  %198 = load i8*, i8** %src_end, align 8
  %cmp326 = icmp eq i8* %197, %198
  br i1 %cmp326, label %if.then.328, label %if.end.333

if.then.328:                                      ; preds = %do.body.325
  %199 = load i8*, i8** %src_base, align 8
  %200 = load i8*, i8** %src, align 8
  %cmp329 = icmp ult i8* %199, %200
  br i1 %cmp329, label %if.then.331, label %if.end.332

if.then.331:                                      ; preds = %if.then.328
  %201 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %201, i32 1)
  br label %if.end.332

if.end.332:                                       ; preds = %if.then.331, %if.then.328
  br label %no_more_source

if.end.333:                                       ; preds = %do.body.325
  %202 = load i8*, i8** %src, align 8
  %incdec.ptr334 = getelementptr inbounds i8, i8* %202, i32 1
  store i8* %incdec.ptr334, i8** %src, align 8
  %203 = load i8, i8* %202, align 1
  %conv335 = zext i8 %203 to i32
  store i32 %conv335, i32* %byte_after_cr, align 4
  %204 = load i8, i8* %multibytep, align 1
  %tobool336 = trunc i8 %204 to i1
  br i1 %tobool336, label %land.lhs.true.338, label %if.end.356

land.lhs.true.338:                                ; preds = %if.end.333
  %205 = load i32, i32* %byte_after_cr, align 4
  %and339 = and i32 %205, 128
  %tobool340 = icmp ne i32 %and339, 0
  br i1 %tobool340, label %if.then.341, label %if.end.356

if.then.341:                                      ; preds = %land.lhs.true.338
  %206 = load i32, i32* %byte_after_cr, align 4
  %and342 = and i32 %206, 254
  %cmp343 = icmp eq i32 %and342, 192
  br i1 %cmp343, label %if.then.345, label %if.else.351

if.then.345:                                      ; preds = %if.then.341
  %207 = load i32, i32* %byte_after_cr, align 4
  %and346 = and i32 %207, 1
  %shl347 = shl i32 %and346, 6
  %208 = load i8*, i8** %src, align 8
  %incdec.ptr348 = getelementptr inbounds i8, i8* %208, i32 1
  store i8* %incdec.ptr348, i8** %src, align 8
  %209 = load i8, i8* %208, align 1
  %conv349 = zext i8 %209 to i32
  %or350 = or i32 %shl347, %conv349
  store i32 %or350, i32* %byte_after_cr, align 4
  br label %if.end.355

if.else.351:                                      ; preds = %if.then.341
  %210 = load i8*, i8** %src, align 8
  %incdec.ptr352 = getelementptr inbounds i8, i8* %210, i32 -1
  store i8* %incdec.ptr352, i8** %src, align 8
  %211 = load i8*, i8** %src, align 8
  %call353 = call i32 @string_char(i8* %211, i8** %src, i32* null)
  %sub354 = sub nsw i32 0, %call353
  store i32 %sub354, i32* %byte_after_cr, align 4
  %212 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %212, i32 3)
  br label %if.end.355

if.end.355:                                       ; preds = %if.else.351, %if.then.345
  br label %if.end.356

if.end.356:                                       ; preds = %if.end.355, %land.lhs.true.338, %if.end.333
  %213 = load i64, i64* %consumed_chars, align 8
  %inc357 = add nsw i64 %213, 1
  store i64 %inc357, i64* %consumed_chars, align 8
  br label %do.end.358

do.end.358:                                       ; preds = %if.end.356
  br label %if.end.359

if.end.359:                                       ; preds = %do.end.358, %land.lhs.true.321, %if.then.318
  %214 = load i32, i32* @charset_ascii, align 4
  store i32 %214, i32* %id25, align 4
  %215 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state360 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %215, i32 0, i32 0
  %216 = load i32, i32* %state360, align 4
  %cmp361 = icmp ne i32 %216, 0
  br i1 %cmp361, label %if.then.363, label %if.end.385

if.then.363:                                      ; preds = %if.end.359
  %217 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form364 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %217, i32 0, i32 2
  %218 = load i8, i8* %old_form364, align 1
  %tobool365 = trunc i8 %218 to i1
  br i1 %tobool365, label %if.then.366, label %if.else.377

if.then.366:                                      ; preds = %if.then.363
  br label %do.body.367

do.body.367:                                      ; preds = %if.then.366
  %219 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state368 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %219, i32 0, i32 0
  %220 = load i32, i32* %state368, align 4
  %cmp369 = icmp ne i32 %220, 0
  br i1 %cmp369, label %if.then.371, label %if.end.375

if.then.371:                                      ; preds = %do.body.367
  %221 = load i32*, i32** %charbuf, align 8
  %222 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call372 = call i32 @emacs_mule_finish_composition(i32* %221, %struct.composition_status* %222)
  %conv373 = sext i32 %call372 to i64
  %223 = load i64, i64* %char_offset, align 8
  %add374 = add nsw i64 %223, %conv373
  store i64 %add374, i64* %char_offset, align 8
  br label %if.end.375

if.end.375:                                       ; preds = %if.then.371, %do.body.367
  br label %do.end.376

do.end.376:                                       ; preds = %if.end.375
  br label %if.end.384

if.else.377:                                      ; preds = %if.then.363
  %224 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state378 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %224, i32 0, i32 0
  %225 = load i32, i32* %state378, align 4
  %cmp379 = icmp uge i32 %225, 3
  br i1 %cmp379, label %if.then.381, label %if.end.383

if.then.381:                                      ; preds = %if.else.377
  %226 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps382 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %226, i32 0, i32 5
  %227 = load i32, i32* %ncomps382, align 4
  %dec = add nsw i32 %227, -1
  store i32 %dec, i32* %ncomps382, align 4
  br label %if.end.383

if.end.383:                                       ; preds = %if.then.381, %if.else.377
  br label %if.end.384

if.end.384:                                       ; preds = %if.end.383, %do.end.376
  br label %if.end.385

if.end.385:                                       ; preds = %if.end.384, %if.end.359
  br label %if.end.424

if.else.386:                                      ; preds = %if.end.315
  %228 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source389 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %228, i32 0, i32 17
  %229 = load i8*, i8** %source389, align 8
  store i8* %229, i8** %orig, align 8
  %230 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %231 = load i8*, i8** %src_base, align 8
  %232 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call390 = call i32 @emacs_mule_char(%struct.coding_system* %230, i8* %231, i32* %nbytes388, i32* %nchars387, i32* %id25, %struct.composition_status* %232)
  store i32 %call390, i32* %c, align 4
  %233 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source391 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %233, i32 0, i32 17
  %234 = load i8*, i8** %source391, align 8
  %235 = load i8*, i8** %orig, align 8
  %sub.ptr.lhs.cast392 = ptrtoint i8* %234 to i64
  %sub.ptr.rhs.cast393 = ptrtoint i8* %235 to i64
  %sub.ptr.sub394 = sub i64 %sub.ptr.lhs.cast392, %sub.ptr.rhs.cast393
  store i64 %sub.ptr.sub394, i64* %offset, align 8
  %236 = load i64, i64* %offset, align 8
  %tobool395 = icmp ne i64 %236, 0
  br i1 %tobool395, label %if.then.396, label %if.end.400

if.then.396:                                      ; preds = %if.else.386
  %237 = load i64, i64* %offset, align 8
  %238 = load i8*, i8** %src, align 8
  %add.ptr397 = getelementptr inbounds i8, i8* %238, i64 %237
  store i8* %add.ptr397, i8** %src, align 8
  %239 = load i64, i64* %offset, align 8
  %240 = load i8*, i8** %src_base, align 8
  %add.ptr398 = getelementptr inbounds i8, i8* %240, i64 %239
  store i8* %add.ptr398, i8** %src_base, align 8
  %241 = load i64, i64* %offset, align 8
  %242 = load i8*, i8** %src_end, align 8
  %add.ptr399 = getelementptr inbounds i8, i8* %242, i64 %241
  store i8* %add.ptr399, i8** %src_end, align 8
  br label %if.end.400

if.end.400:                                       ; preds = %if.then.396, %if.else.386
  %243 = load i32, i32* %c, align 4
  %cmp401 = icmp slt i32 %243, 0
  br i1 %cmp401, label %if.then.403, label %if.end.412

if.then.403:                                      ; preds = %if.end.400
  %244 = load i32, i32* %c, align 4
  %cmp404 = icmp eq i32 %244, -1
  br i1 %cmp404, label %if.then.406, label %if.end.407

if.then.406:                                      ; preds = %if.then.403
  br label %invalid_code

if.end.407:                                       ; preds = %if.then.403
  %245 = load i32, i32* %c, align 4
  %cmp408 = icmp eq i32 %245, -2
  br i1 %cmp408, label %if.then.410, label %if.end.411

if.then.410:                                      ; preds = %if.end.407
  br label %while.end

if.end.411:                                       ; preds = %if.end.407
  br label %if.end.412

if.end.412:                                       ; preds = %if.end.411, %if.end.400
  %246 = load i8*, i8** %src_base, align 8
  %247 = load i32, i32* %nbytes388, align 4
  %idx.ext413 = sext i32 %247 to i64
  %add.ptr414 = getelementptr inbounds i8, i8* %246, i64 %idx.ext413
  store i8* %add.ptr414, i8** %src, align 8
  %248 = load i64, i64* %consumed_chars_base, align 8
  %249 = load i32, i32* %nchars387, align 4
  %conv415 = sext i32 %249 to i64
  %add416 = add nsw i64 %248, %conv415
  store i64 %add416, i64* %consumed_chars, align 8
  %250 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state417 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %250, i32 0, i32 0
  %251 = load i32, i32* %state417, align 4
  %cmp418 = icmp uge i32 %251, 3
  br i1 %cmp418, label %if.then.420, label %if.end.423

if.then.420:                                      ; preds = %if.end.412
  %252 = load i32, i32* %nchars387, align 4
  %253 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps421 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %253, i32 0, i32 5
  %254 = load i32, i32* %ncomps421, align 4
  %sub422 = sub nsw i32 %254, %252
  store i32 %sub422, i32* %ncomps421, align 4
  br label %if.end.423

if.end.423:                                       ; preds = %if.then.420, %if.end.412
  br label %if.end.424

if.end.424:                                       ; preds = %if.end.423, %if.end.385
  %255 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state425 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %255, i32 0, i32 0
  %256 = load i32, i32* %state425, align 4
  %cmp426 = icmp eq i32 %256, 0
  br i1 %cmp426, label %if.then.428, label %if.else.453

if.then.428:                                      ; preds = %if.end.424
  %257 = load i32, i32* %last_id, align 4
  %258 = load i32, i32* %id25, align 4
  %cmp429 = icmp ne i32 %257, %258
  br i1 %cmp429, label %if.then.431, label %if.end.450

if.then.431:                                      ; preds = %if.then.428
  %259 = load i32, i32* %last_id, align 4
  %260 = load i32, i32* @charset_ascii, align 4
  %cmp432 = icmp ne i32 %259, %260
  br i1 %cmp432, label %if.then.434, label %if.end.449

if.then.434:                                      ; preds = %if.then.431
  br label %do.body.435

do.body.435:                                      ; preds = %if.then.434
  br label %do.body.436

do.body.436:                                      ; preds = %do.body.435
  %261 = load i32*, i32** %charbuf, align 8
  %incdec.ptr437 = getelementptr inbounds i32, i32* %261, i32 1
  store i32* %incdec.ptr437, i32** %charbuf, align 8
  store i32 -4, i32* %261, align 4
  %262 = load i32*, i32** %charbuf, align 8
  %incdec.ptr438 = getelementptr inbounds i32, i32* %262, i32 1
  store i32* %incdec.ptr438, i32** %charbuf, align 8
  store i32 3, i32* %262, align 4
  %263 = load i64, i64* %char_offset, align 8
  %264 = load i64, i64* %last_offset, align 8
  %sub439 = sub nsw i64 %263, %264
  %conv440 = trunc i64 %sub439 to i32
  %265 = load i32*, i32** %charbuf, align 8
  %incdec.ptr441 = getelementptr inbounds i32, i32* %265, i32 1
  store i32* %incdec.ptr441, i32** %charbuf, align 8
  store i32 %conv440, i32* %265, align 4
  %266 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated442 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %266, i32 0, i32 1
  %bf.load443 = load i32, i32* %annotated442, align 8
  %bf.clear444 = and i32 %bf.load443, -8388609
  %bf.set445 = or i32 %bf.clear444, 8388608
  store i32 %bf.set445, i32* %annotated442, align 8
  br label %do.end.446

do.end.446:                                       ; preds = %do.body.436
  %267 = load i32, i32* %last_id, align 4
  %268 = load i32*, i32** %charbuf, align 8
  %incdec.ptr447 = getelementptr inbounds i32, i32* %268, i32 1
  store i32* %incdec.ptr447, i32** %charbuf, align 8
  store i32 %267, i32* %268, align 4
  br label %do.end.448

do.end.448:                                       ; preds = %do.end.446
  br label %if.end.449

if.end.449:                                       ; preds = %do.end.448, %if.then.431
  %269 = load i32, i32* %id25, align 4
  store i32 %269, i32* %last_id, align 4
  %270 = load i64, i64* %char_offset, align 8
  store i64 %270, i64* %last_offset, align 8
  br label %if.end.450

if.end.450:                                       ; preds = %if.end.449, %if.then.428
  %271 = load i32, i32* %c, align 4
  %272 = load i32*, i32** %charbuf, align 8
  %incdec.ptr451 = getelementptr inbounds i32, i32* %272, i32 1
  store i32* %incdec.ptr451, i32** %charbuf, align 8
  store i32 %271, i32* %272, align 4
  %273 = load i64, i64* %char_offset, align 8
  %inc452 = add nsw i64 %273, 1
  store i64 %inc452, i64* %char_offset, align 8
  br label %if.end.754

if.else.453:                                      ; preds = %if.end.424
  %274 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state454 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %274, i32 0, i32 0
  %275 = load i32, i32* %state454, align 4
  %cmp455 = icmp eq i32 %275, 1
  br i1 %cmp455, label %if.then.457, label %if.else.561

if.then.457:                                      ; preds = %if.else.453
  %276 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form458 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %276, i32 0, i32 2
  %277 = load i8, i8* %old_form458, align 1
  %tobool459 = trunc i8 %277 to i1
  br i1 %tobool459, label %if.then.460, label %if.else.522

if.then.460:                                      ; preds = %if.then.457
  %278 = load i32, i32* %c, align 4
  %cmp461 = icmp sge i32 %278, 0
  br i1 %cmp461, label %if.then.463, label %if.else.476

if.then.463:                                      ; preds = %if.then.460
  br label %do.body.464

do.body.464:                                      ; preds = %if.then.463
  %279 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state465 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %279, i32 0, i32 0
  %280 = load i32, i32* %state465, align 4
  %cmp466 = icmp ne i32 %280, 0
  br i1 %cmp466, label %if.then.468, label %if.end.472

if.then.468:                                      ; preds = %do.body.464
  %281 = load i32*, i32** %charbuf, align 8
  %282 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call469 = call i32 @emacs_mule_finish_composition(i32* %281, %struct.composition_status* %282)
  %conv470 = sext i32 %call469 to i64
  %283 = load i64, i64* %char_offset, align 8
  %add471 = add nsw i64 %283, %conv470
  store i64 %add471, i64* %char_offset, align 8
  br label %if.end.472

if.end.472:                                       ; preds = %if.then.468, %do.body.464
  br label %do.end.473

do.end.473:                                       ; preds = %if.end.472
  %284 = load i32, i32* %c, align 4
  %285 = load i32*, i32** %charbuf, align 8
  %incdec.ptr474 = getelementptr inbounds i32, i32* %285, i32 1
  store i32* %incdec.ptr474, i32** %charbuf, align 8
  store i32 %284, i32* %285, align 4
  %286 = load i64, i64* %char_offset, align 8
  %inc475 = add nsw i64 %286, 1
  store i64 %inc475, i64* %char_offset, align 8
  br label %if.end.521

if.else.476:                                      ; preds = %if.then.460
  %287 = load i32, i32* %c, align 4
  %sub477 = sub nsw i32 0, %287
  %288 = load i32*, i32** %charbuf, align 8
  %incdec.ptr478 = getelementptr inbounds i32, i32* %288, i32 1
  store i32* %incdec.ptr478, i32** %charbuf, align 8
  store i32 %sub477, i32* %288, align 4
  %289 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars479 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %289, i32 0, i32 4
  %290 = load i32, i32* %nchars479, align 4
  %inc480 = add nsw i32 %290, 1
  store i32 %inc480, i32* %nchars479, align 4
  %291 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length481 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %291, i32 0, i32 3
  %292 = load i32, i32* %length481, align 4
  %inc482 = add nsw i32 %292, 1
  store i32 %inc482, i32* %length481, align 4
  %293 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars483 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %293, i32 0, i32 4
  %294 = load i32, i32* %nchars483, align 4
  %cmp484 = icmp eq i32 %294, 16
  br i1 %cmp484, label %if.then.486, label %if.else.513

if.then.486:                                      ; preds = %if.else.476
  br label %do.body.487

do.body.487:                                      ; preds = %if.then.486
  %295 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length488 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %295, i32 0, i32 3
  %296 = load i32, i32* %length488, align 4
  %sub489 = sub nsw i32 0, %296
  store i32 %sub489, i32* %idx, align 4
  %297 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form490 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %297, i32 0, i32 2
  %298 = load i8, i8* %old_form490, align 1
  %tobool491 = trunc i8 %298 to i1
  br i1 %tobool491, label %if.then.492, label %if.else.497

if.then.492:                                      ; preds = %do.body.487
  %299 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars493 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %299, i32 0, i32 4
  %300 = load i32, i32* %nchars493, align 4
  %301 = load i32, i32* %idx, align 4
  %add494 = add nsw i32 %301, 2
  %idxprom495 = sext i32 %add494 to i64
  %302 = load i32*, i32** %charbuf, align 8
  %arrayidx496 = getelementptr inbounds i32, i32* %302, i64 %idxprom495
  store i32 %300, i32* %arrayidx496, align 4
  br label %if.end.510

if.else.497:                                      ; preds = %do.body.487
  %303 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method498 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %303, i32 0, i32 1
  %304 = load i32, i32* %method498, align 4
  %cmp499 = icmp ugt i32 %304, 0
  br i1 %cmp499, label %if.then.501, label %if.end.509

if.then.501:                                      ; preds = %if.else.497
  %305 = load i32, i32* %idx, align 4
  %add502 = add nsw i32 %305, 2
  %idxprom503 = sext i32 %add502 to i64
  %306 = load i32*, i32** %charbuf, align 8
  %arrayidx504 = getelementptr inbounds i32, i32* %306, i64 %idxprom503
  %307 = load i32, i32* %arrayidx504, align 4
  %308 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length505 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %308, i32 0, i32 3
  %309 = load i32, i32* %length505, align 4
  %sub506 = sub nsw i32 %307, %309
  %310 = load i32, i32* %idx, align 4
  %idxprom507 = sext i32 %310 to i64
  %311 = load i32*, i32** %charbuf, align 8
  %arrayidx508 = getelementptr inbounds i32, i32* %311, i64 %idxprom507
  store i32 %sub506, i32* %arrayidx508, align 4
  br label %if.end.509

if.end.509:                                       ; preds = %if.then.501, %if.else.497
  br label %if.end.510

if.end.510:                                       ; preds = %if.end.509, %if.then.492
  %312 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state511 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %312, i32 0, i32 0
  store i32 0, i32* %state511, align 4
  br label %do.end.512

do.end.512:                                       ; preds = %if.end.510
  br label %if.end.520

if.else.513:                                      ; preds = %if.else.476
  %313 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method514 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %313, i32 0, i32 1
  %314 = load i32, i32* %method514, align 4
  %cmp515 = icmp eq i32 %314, 1
  br i1 %cmp515, label %if.then.517, label %if.end.519

if.then.517:                                      ; preds = %if.else.513
  %315 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state518 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %315, i32 0, i32 0
  store i32 2, i32* %state518, align 4
  br label %if.end.519

if.end.519:                                       ; preds = %if.then.517, %if.else.513
  br label %if.end.520

if.end.520:                                       ; preds = %if.end.519, %do.end.512
  br label %if.end.521

if.end.521:                                       ; preds = %if.end.520, %do.end.473
  br label %if.end.560

if.else.522:                                      ; preds = %if.then.457
  %316 = load i32, i32* %c, align 4
  %317 = load i32*, i32** %charbuf, align 8
  %incdec.ptr523 = getelementptr inbounds i32, i32* %317, i32 1
  store i32* %incdec.ptr523, i32** %charbuf, align 8
  store i32 %316, i32* %317, align 4
  %318 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length524 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %318, i32 0, i32 3
  %319 = load i32, i32* %length524, align 4
  %inc525 = add nsw i32 %319, 1
  store i32 %inc525, i32* %length524, align 4
  %320 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars526 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %320, i32 0, i32 4
  %321 = load i32, i32* %nchars526, align 4
  %dec527 = add nsw i32 %321, -1
  store i32 %dec527, i32* %nchars526, align 4
  %322 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars528 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %322, i32 0, i32 4
  %323 = load i32, i32* %nchars528, align 4
  %cmp529 = icmp eq i32 %323, 0
  br i1 %cmp529, label %if.then.531, label %if.end.559

if.then.531:                                      ; preds = %if.else.522
  br label %do.body.532

do.body.532:                                      ; preds = %if.then.531
  %324 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length534 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %324, i32 0, i32 3
  %325 = load i32, i32* %length534, align 4
  %sub535 = sub nsw i32 0, %325
  store i32 %sub535, i32* %idx533, align 4
  %326 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form536 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %326, i32 0, i32 2
  %327 = load i8, i8* %old_form536, align 1
  %tobool537 = trunc i8 %327 to i1
  br i1 %tobool537, label %if.then.538, label %if.else.543

if.then.538:                                      ; preds = %do.body.532
  %328 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars539 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %328, i32 0, i32 4
  %329 = load i32, i32* %nchars539, align 4
  %330 = load i32, i32* %idx533, align 4
  %add540 = add nsw i32 %330, 2
  %idxprom541 = sext i32 %add540 to i64
  %331 = load i32*, i32** %charbuf, align 8
  %arrayidx542 = getelementptr inbounds i32, i32* %331, i64 %idxprom541
  store i32 %329, i32* %arrayidx542, align 4
  br label %if.end.556

if.else.543:                                      ; preds = %do.body.532
  %332 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method544 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %332, i32 0, i32 1
  %333 = load i32, i32* %method544, align 4
  %cmp545 = icmp ugt i32 %333, 0
  br i1 %cmp545, label %if.then.547, label %if.end.555

if.then.547:                                      ; preds = %if.else.543
  %334 = load i32, i32* %idx533, align 4
  %add548 = add nsw i32 %334, 2
  %idxprom549 = sext i32 %add548 to i64
  %335 = load i32*, i32** %charbuf, align 8
  %arrayidx550 = getelementptr inbounds i32, i32* %335, i64 %idxprom549
  %336 = load i32, i32* %arrayidx550, align 4
  %337 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length551 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %337, i32 0, i32 3
  %338 = load i32, i32* %length551, align 4
  %sub552 = sub nsw i32 %336, %338
  %339 = load i32, i32* %idx533, align 4
  %idxprom553 = sext i32 %339 to i64
  %340 = load i32*, i32** %charbuf, align 8
  %arrayidx554 = getelementptr inbounds i32, i32* %340, i64 %idxprom553
  store i32 %sub552, i32* %arrayidx554, align 4
  br label %if.end.555

if.end.555:                                       ; preds = %if.then.547, %if.else.543
  br label %if.end.556

if.end.556:                                       ; preds = %if.end.555, %if.then.538
  %341 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state557 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %341, i32 0, i32 0
  store i32 0, i32* %state557, align 4
  br label %do.end.558

do.end.558:                                       ; preds = %if.end.556
  br label %if.end.559

if.end.559:                                       ; preds = %do.end.558, %if.else.522
  br label %if.end.560

if.end.560:                                       ; preds = %if.end.559, %if.end.521
  br label %if.end.753

if.else.561:                                      ; preds = %if.else.453
  %342 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state562 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %342, i32 0, i32 0
  %343 = load i32, i32* %state562, align 4
  %cmp563 = icmp eq i32 %343, 2
  br i1 %cmp563, label %if.then.565, label %if.else.629

if.then.565:                                      ; preds = %if.else.561
  %344 = load i32, i32* %c, align 4
  %cmp566 = icmp sge i32 %344, 0
  br i1 %cmp566, label %if.then.568, label %if.else.598

if.then.568:                                      ; preds = %if.then.565
  br label %do.body.569

do.body.569:                                      ; preds = %if.then.568
  %345 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length571 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %345, i32 0, i32 3
  %346 = load i32, i32* %length571, align 4
  %sub572 = sub nsw i32 0, %346
  store i32 %sub572, i32* %idx570, align 4
  %347 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %old_form573 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %347, i32 0, i32 2
  %348 = load i8, i8* %old_form573, align 1
  %tobool574 = trunc i8 %348 to i1
  br i1 %tobool574, label %if.then.575, label %if.else.580

if.then.575:                                      ; preds = %do.body.569
  %349 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %nchars576 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %349, i32 0, i32 4
  %350 = load i32, i32* %nchars576, align 4
  %351 = load i32, i32* %idx570, align 4
  %add577 = add nsw i32 %351, 2
  %idxprom578 = sext i32 %add577 to i64
  %352 = load i32*, i32** %charbuf, align 8
  %arrayidx579 = getelementptr inbounds i32, i32* %352, i64 %idxprom578
  store i32 %350, i32* %arrayidx579, align 4
  br label %if.end.593

if.else.580:                                      ; preds = %do.body.569
  %353 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method581 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %353, i32 0, i32 1
  %354 = load i32, i32* %method581, align 4
  %cmp582 = icmp ugt i32 %354, 0
  br i1 %cmp582, label %if.then.584, label %if.end.592

if.then.584:                                      ; preds = %if.else.580
  %355 = load i32, i32* %idx570, align 4
  %add585 = add nsw i32 %355, 2
  %idxprom586 = sext i32 %add585 to i64
  %356 = load i32*, i32** %charbuf, align 8
  %arrayidx587 = getelementptr inbounds i32, i32* %356, i64 %idxprom586
  %357 = load i32, i32* %arrayidx587, align 4
  %358 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length588 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %358, i32 0, i32 3
  %359 = load i32, i32* %length588, align 4
  %sub589 = sub nsw i32 %357, %359
  %360 = load i32, i32* %idx570, align 4
  %idxprom590 = sext i32 %360 to i64
  %361 = load i32*, i32** %charbuf, align 8
  %arrayidx591 = getelementptr inbounds i32, i32* %361, i64 %idxprom590
  store i32 %sub589, i32* %arrayidx591, align 4
  br label %if.end.592

if.end.592:                                       ; preds = %if.then.584, %if.else.580
  br label %if.end.593

if.end.593:                                       ; preds = %if.end.592, %if.then.575
  %362 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state594 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %362, i32 0, i32 0
  store i32 0, i32* %state594, align 4
  br label %do.end.595

do.end.595:                                       ; preds = %if.end.593
  %363 = load i32, i32* %c, align 4
  %364 = load i32*, i32** %charbuf, align 8
  %incdec.ptr596 = getelementptr inbounds i32, i32* %364, i32 1
  store i32* %incdec.ptr596, i32** %charbuf, align 8
  store i32 %363, i32* %364, align 4
  %365 = load i64, i64* %char_offset, align 8
  %inc597 = add nsw i64 %365, 1
  store i64 %inc597, i64* %char_offset, align 8
  br label %if.end.628

if.else.598:                                      ; preds = %if.then.565
  %366 = load i32, i32* %c, align 4
  %sub599 = sub nsw i32 0, %366
  store i32 %sub599, i32* %c, align 4
  br label %do.body.600

do.body.600:                                      ; preds = %if.else.598
  %367 = load i32, i32* %c, align 4
  %sub601 = sub nsw i32 %367, 160
  store i32 %sub601, i32* %c, align 4
  %368 = load i32, i32* %c, align 4
  %cmp602 = icmp slt i32 %368, 0
  br i1 %cmp602, label %if.then.607, label %lor.lhs.false.604

lor.lhs.false.604:                                ; preds = %do.body.600
  %369 = load i32, i32* %c, align 4
  %cmp605 = icmp sge i32 %369, 81
  br i1 %cmp605, label %if.then.607, label %if.end.608

if.then.607:                                      ; preds = %lor.lhs.false.604, %do.body.600
  br label %invalid_code

if.end.608:                                       ; preds = %lor.lhs.false.604
  %370 = load i32, i32* %c, align 4
  %div = sdiv i32 %370, 9
  store i32 %div, i32* %gref, align 4
  %371 = load i32, i32* %c, align 4
  %rem = srem i32 %371, 9
  store i32 %rem, i32* %nref, align 4
  %372 = load i32, i32* %gref, align 4
  %cmp609 = icmp eq i32 %372, 4
  br i1 %cmp609, label %if.then.611, label %if.end.612

if.then.611:                                      ; preds = %if.end.608
  store i32 10, i32* %gref, align 4
  br label %if.end.612

if.end.612:                                       ; preds = %if.then.611, %if.end.608
  %373 = load i32, i32* %nref, align 4
  %cmp613 = icmp eq i32 %373, 4
  br i1 %cmp613, label %if.then.615, label %if.end.616

if.then.615:                                      ; preds = %if.end.612
  store i32 10, i32* %nref, align 4
  br label %if.end.616

if.end.616:                                       ; preds = %if.then.615, %if.end.612
  %374 = load i32, i32* %gref, align 4
  %mul = mul nsw i32 %374, 12
  %375 = load i32, i32* %nref, align 4
  %add617 = add nsw i32 %mul, %375
  store i32 %add617, i32* %rule, align 4
  br label %do.end.618

do.end.618:                                       ; preds = %if.end.616
  %376 = load i32, i32* %rule, align 4
  %cmp619 = icmp slt i32 %376, 0
  br i1 %cmp619, label %if.then.621, label %if.end.622

if.then.621:                                      ; preds = %do.end.618
  br label %invalid_code

if.end.622:                                       ; preds = %do.end.618
  %377 = load i32*, i32** %charbuf, align 8
  %incdec.ptr623 = getelementptr inbounds i32, i32* %377, i32 1
  store i32* %incdec.ptr623, i32** %charbuf, align 8
  store i32 -2, i32* %377, align 4
  %378 = load i32, i32* %rule, align 4
  %379 = load i32*, i32** %charbuf, align 8
  %incdec.ptr624 = getelementptr inbounds i32, i32* %379, i32 1
  store i32* %incdec.ptr624, i32** %charbuf, align 8
  store i32 %378, i32* %379, align 4
  %380 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length625 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %380, i32 0, i32 3
  %381 = load i32, i32* %length625, align 4
  %add626 = add nsw i32 %381, 2
  store i32 %add626, i32* %length625, align 4
  %382 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state627 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %382, i32 0, i32 0
  store i32 1, i32* %state627, align 4
  br label %if.end.628

if.end.628:                                       ; preds = %if.end.622, %do.end.595
  br label %if.end.752

if.else.629:                                      ; preds = %if.else.561
  %383 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state630 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %383, i32 0, i32 0
  %384 = load i32, i32* %state630, align 4
  %cmp631 = icmp eq i32 %384, 3
  br i1 %cmp631, label %if.then.633, label %if.else.666

if.then.633:                                      ; preds = %if.else.629
  %385 = load i32, i32* %c, align 4
  %386 = load i32*, i32** %charbuf, align 8
  %incdec.ptr634 = getelementptr inbounds i32, i32* %386, i32 1
  store i32* %incdec.ptr634, i32** %charbuf, align 8
  store i32 %385, i32* %386, align 4
  %387 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length635 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %387, i32 0, i32 3
  %388 = load i32, i32* %length635, align 4
  %inc636 = add nsw i32 %388, 1
  store i32 %inc636, i32* %length635, align 4
  %389 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps637 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %389, i32 0, i32 5
  %390 = load i32, i32* %ncomps637, align 4
  %cmp638 = icmp eq i32 %390, 0
  br i1 %cmp638, label %if.then.640, label %if.else.642

if.then.640:                                      ; preds = %if.then.633
  %391 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state641 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %391, i32 0, i32 0
  store i32 1, i32* %state641, align 4
  br label %if.end.665

if.else.642:                                      ; preds = %if.then.633
  %392 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps643 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %392, i32 0, i32 5
  %393 = load i32, i32* %ncomps643, align 4
  %cmp644 = icmp sgt i32 %393, 0
  br i1 %cmp644, label %if.then.646, label %if.else.653

if.then.646:                                      ; preds = %if.else.642
  %394 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %method647 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %394, i32 0, i32 1
  %395 = load i32, i32* %method647, align 4
  %cmp648 = icmp eq i32 %395, 3
  br i1 %cmp648, label %if.then.650, label %if.end.652

if.then.650:                                      ; preds = %if.then.646
  %396 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state651 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %396, i32 0, i32 0
  store i32 4, i32* %state651, align 4
  br label %if.end.652

if.end.652:                                       ; preds = %if.then.650, %if.then.646
  br label %if.end.664

if.else.653:                                      ; preds = %if.else.642
  br label %do.body.654

do.body.654:                                      ; preds = %if.else.653
  %397 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state655 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %397, i32 0, i32 0
  %398 = load i32, i32* %state655, align 4
  %cmp656 = icmp ne i32 %398, 0
  br i1 %cmp656, label %if.then.658, label %if.end.662

if.then.658:                                      ; preds = %do.body.654
  %399 = load i32*, i32** %charbuf, align 8
  %400 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call659 = call i32 @emacs_mule_finish_composition(i32* %399, %struct.composition_status* %400)
  %conv660 = sext i32 %call659 to i64
  %401 = load i64, i64* %char_offset, align 8
  %add661 = add nsw i64 %401, %conv660
  store i64 %add661, i64* %char_offset, align 8
  br label %if.end.662

if.end.662:                                       ; preds = %if.then.658, %do.body.654
  br label %do.end.663

do.end.663:                                       ; preds = %if.end.662
  br label %if.end.664

if.end.664:                                       ; preds = %do.end.663, %if.end.652
  br label %if.end.665

if.end.665:                                       ; preds = %if.end.664, %if.then.640
  br label %if.end.751

if.else.666:                                      ; preds = %if.else.629
  br label %do.body.668

do.body.668:                                      ; preds = %if.else.666
  %402 = load i32, i32* %c, align 4
  %sub671 = sub nsw i32 %402, 32
  store i32 %sub671, i32* %gref669, align 4
  %403 = load i32, i32* %gref669, align 4
  %cmp672 = icmp slt i32 %403, 0
  br i1 %cmp672, label %if.then.677, label %lor.lhs.false.674

lor.lhs.false.674:                                ; preds = %do.body.668
  %404 = load i32, i32* %gref669, align 4
  %cmp675 = icmp sge i32 %404, 81
  br i1 %cmp675, label %if.then.677, label %if.end.678

if.then.677:                                      ; preds = %lor.lhs.false.674, %do.body.668
  br label %invalid_code

if.end.678:                                       ; preds = %lor.lhs.false.674
  br label %do.body.679

do.body.679:                                      ; preds = %if.end.678
  %405 = load i8*, i8** %src, align 8
  %406 = load i8*, i8** %src_end, align 8
  %cmp680 = icmp eq i8* %405, %406
  br i1 %cmp680, label %if.then.682, label %if.end.687

if.then.682:                                      ; preds = %do.body.679
  %407 = load i8*, i8** %src_base, align 8
  %408 = load i8*, i8** %src, align 8
  %cmp683 = icmp ult i8* %407, %408
  br i1 %cmp683, label %if.then.685, label %if.end.686

if.then.685:                                      ; preds = %if.then.682
  %409 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %409, i32 1)
  br label %if.end.686

if.end.686:                                       ; preds = %if.then.685, %if.then.682
  br label %no_more_source

if.end.687:                                       ; preds = %do.body.679
  %410 = load i8*, i8** %src, align 8
  %incdec.ptr688 = getelementptr inbounds i8, i8* %410, i32 1
  store i8* %incdec.ptr688, i8** %src, align 8
  %411 = load i8, i8* %410, align 1
  %conv689 = zext i8 %411 to i32
  store i32 %conv689, i32* %c, align 4
  %412 = load i8, i8* %multibytep, align 1
  %tobool690 = trunc i8 %412 to i1
  br i1 %tobool690, label %land.lhs.true.692, label %if.end.710

land.lhs.true.692:                                ; preds = %if.end.687
  %413 = load i32, i32* %c, align 4
  %and693 = and i32 %413, 128
  %tobool694 = icmp ne i32 %and693, 0
  br i1 %tobool694, label %if.then.695, label %if.end.710

if.then.695:                                      ; preds = %land.lhs.true.692
  %414 = load i32, i32* %c, align 4
  %and696 = and i32 %414, 254
  %cmp697 = icmp eq i32 %and696, 192
  br i1 %cmp697, label %if.then.699, label %if.else.705

if.then.699:                                      ; preds = %if.then.695
  %415 = load i32, i32* %c, align 4
  %and700 = and i32 %415, 1
  %shl701 = shl i32 %and700, 6
  %416 = load i8*, i8** %src, align 8
  %incdec.ptr702 = getelementptr inbounds i8, i8* %416, i32 1
  store i8* %incdec.ptr702, i8** %src, align 8
  %417 = load i8, i8* %416, align 1
  %conv703 = zext i8 %417 to i32
  %or704 = or i32 %shl701, %conv703
  store i32 %or704, i32* %c, align 4
  br label %if.end.709

if.else.705:                                      ; preds = %if.then.695
  %418 = load i8*, i8** %src, align 8
  %incdec.ptr706 = getelementptr inbounds i8, i8* %418, i32 -1
  store i8* %incdec.ptr706, i8** %src, align 8
  %419 = load i8*, i8** %src, align 8
  %call707 = call i32 @string_char(i8* %419, i8** %src, i32* null)
  %sub708 = sub nsw i32 0, %call707
  store i32 %sub708, i32* %c, align 4
  %420 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %420, i32 3)
  br label %if.end.709

if.end.709:                                       ; preds = %if.else.705, %if.then.699
  br label %if.end.710

if.end.710:                                       ; preds = %if.end.709, %land.lhs.true.692, %if.end.687
  %421 = load i64, i64* %consumed_chars, align 8
  %inc711 = add nsw i64 %421, 1
  store i64 %inc711, i64* %consumed_chars, align 8
  br label %do.end.712

do.end.712:                                       ; preds = %if.end.710
  %422 = load i32, i32* %c, align 4
  %sub713 = sub nsw i32 %422, 32
  store i32 %sub713, i32* %nref670, align 4
  %423 = load i32, i32* %nref670, align 4
  %cmp714 = icmp slt i32 %423, 0
  br i1 %cmp714, label %if.then.719, label %lor.lhs.false.716

lor.lhs.false.716:                                ; preds = %do.end.712
  %424 = load i32, i32* %nref670, align 4
  %cmp717 = icmp sge i32 %424, 81
  br i1 %cmp717, label %if.then.719, label %if.end.720

if.then.719:                                      ; preds = %lor.lhs.false.716, %do.end.712
  br label %invalid_code

if.end.720:                                       ; preds = %lor.lhs.false.716
  %425 = load i32, i32* %gref669, align 4
  %mul721 = mul nsw i32 %425, 12
  %426 = load i32, i32* %nref670, align 4
  %add722 = add nsw i32 %mul721, %426
  store i32 %add722, i32* %rule667, align 4
  br label %do.end.723

do.end.723:                                       ; preds = %if.end.720
  %427 = load i32, i32* %rule667, align 4
  %cmp724 = icmp slt i32 %427, 0
  br i1 %cmp724, label %if.then.726, label %if.end.727

if.then.726:                                      ; preds = %do.end.723
  br label %invalid_code

if.end.727:                                       ; preds = %do.end.723
  %428 = load i32*, i32** %charbuf, align 8
  %incdec.ptr728 = getelementptr inbounds i32, i32* %428, i32 1
  store i32* %incdec.ptr728, i32** %charbuf, align 8
  store i32 -2, i32* %428, align 4
  %429 = load i32, i32* %rule667, align 4
  %430 = load i32*, i32** %charbuf, align 8
  %incdec.ptr729 = getelementptr inbounds i32, i32* %430, i32 1
  store i32* %incdec.ptr729, i32** %charbuf, align 8
  store i32 %429, i32* %430, align 4
  %431 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length730 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %431, i32 0, i32 3
  %432 = load i32, i32* %length730, align 4
  %add731 = add nsw i32 %432, 2
  store i32 %add731, i32* %length730, align 4
  %433 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps732 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %433, i32 0, i32 5
  %434 = load i32, i32* %ncomps732, align 4
  %dec733 = add nsw i32 %434, -1
  store i32 %dec733, i32* %ncomps732, align 4
  %435 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %ncomps734 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %435, i32 0, i32 5
  %436 = load i32, i32* %ncomps734, align 4
  %cmp735 = icmp sgt i32 %436, 0
  br i1 %cmp735, label %if.then.737, label %if.else.739

if.then.737:                                      ; preds = %if.end.727
  %437 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state738 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %437, i32 0, i32 0
  store i32 3, i32* %state738, align 4
  br label %if.end.750

if.else.739:                                      ; preds = %if.end.727
  br label %do.body.740

do.body.740:                                      ; preds = %if.else.739
  %438 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state741 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %438, i32 0, i32 0
  %439 = load i32, i32* %state741, align 4
  %cmp742 = icmp ne i32 %439, 0
  br i1 %cmp742, label %if.then.744, label %if.end.748

if.then.744:                                      ; preds = %do.body.740
  %440 = load i32*, i32** %charbuf, align 8
  %441 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call745 = call i32 @emacs_mule_finish_composition(i32* %440, %struct.composition_status* %441)
  %conv746 = sext i32 %call745 to i64
  %442 = load i64, i64* %char_offset, align 8
  %add747 = add nsw i64 %442, %conv746
  store i64 %add747, i64* %char_offset, align 8
  br label %if.end.748

if.end.748:                                       ; preds = %if.then.744, %do.body.740
  br label %do.end.749

do.end.749:                                       ; preds = %if.end.748
  br label %if.end.750

if.end.750:                                       ; preds = %do.end.749, %if.then.737
  br label %if.end.751

if.end.751:                                       ; preds = %if.end.750, %if.end.665
  br label %if.end.752

if.end.752:                                       ; preds = %if.end.751, %if.end.628
  br label %if.end.753

if.end.753:                                       ; preds = %if.end.752, %if.end.560
  br label %if.end.754

if.end.754:                                       ; preds = %if.end.753, %if.end.450
  br label %while.body

invalid_code:                                     ; preds = %if.then.726, %if.then.719, %if.then.677, %if.then.621, %if.then.607, %if.then.406, %if.else.308, %if.then.255, %if.then.225, %if.then.183, %if.then.172, %if.then.124
  br label %do.body.755

do.body.755:                                      ; preds = %invalid_code
  %443 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state756 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %443, i32 0, i32 0
  %444 = load i32, i32* %state756, align 4
  %cmp757 = icmp ne i32 %444, 0
  br i1 %cmp757, label %if.then.759, label %if.end.763

if.then.759:                                      ; preds = %do.body.755
  %445 = load i32*, i32** %charbuf, align 8
  %446 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call760 = call i32 @emacs_mule_finish_composition(i32* %445, %struct.composition_status* %446)
  %conv761 = sext i32 %call760 to i64
  %447 = load i64, i64* %char_offset, align 8
  %add762 = add nsw i64 %447, %conv761
  store i64 %add762, i64* %char_offset, align 8
  br label %if.end.763

if.end.763:                                       ; preds = %if.then.759, %do.body.755
  br label %do.end.764

do.end.764:                                       ; preds = %if.end.763
  %448 = load i8*, i8** %src_base, align 8
  store i8* %448, i8** %src, align 8
  %449 = load i64, i64* %consumed_chars_base, align 8
  store i64 %449, i64* %consumed_chars, align 8
  br label %do.body.765

do.body.765:                                      ; preds = %do.end.764
  %450 = load i8*, i8** %src, align 8
  %451 = load i8*, i8** %src_end, align 8
  %cmp766 = icmp eq i8* %450, %451
  br i1 %cmp766, label %if.then.768, label %if.end.773

if.then.768:                                      ; preds = %do.body.765
  %452 = load i8*, i8** %src_base, align 8
  %453 = load i8*, i8** %src, align 8
  %cmp769 = icmp ult i8* %452, %453
  br i1 %cmp769, label %if.then.771, label %if.end.772

if.then.771:                                      ; preds = %if.then.768
  %454 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %454, i32 1)
  br label %if.end.772

if.end.772:                                       ; preds = %if.then.771, %if.then.768
  br label %no_more_source

if.end.773:                                       ; preds = %do.body.765
  %455 = load i8*, i8** %src, align 8
  %incdec.ptr774 = getelementptr inbounds i8, i8* %455, i32 1
  store i8* %incdec.ptr774, i8** %src, align 8
  %456 = load i8, i8* %455, align 1
  %conv775 = zext i8 %456 to i32
  store i32 %conv775, i32* %c, align 4
  %457 = load i8, i8* %multibytep, align 1
  %tobool776 = trunc i8 %457 to i1
  br i1 %tobool776, label %land.lhs.true.778, label %if.end.796

land.lhs.true.778:                                ; preds = %if.end.773
  %458 = load i32, i32* %c, align 4
  %and779 = and i32 %458, 128
  %tobool780 = icmp ne i32 %and779, 0
  br i1 %tobool780, label %if.then.781, label %if.end.796

if.then.781:                                      ; preds = %land.lhs.true.778
  %459 = load i32, i32* %c, align 4
  %and782 = and i32 %459, 254
  %cmp783 = icmp eq i32 %and782, 192
  br i1 %cmp783, label %if.then.785, label %if.else.791

if.then.785:                                      ; preds = %if.then.781
  %460 = load i32, i32* %c, align 4
  %and786 = and i32 %460, 1
  %shl787 = shl i32 %and786, 6
  %461 = load i8*, i8** %src, align 8
  %incdec.ptr788 = getelementptr inbounds i8, i8* %461, i32 1
  store i8* %incdec.ptr788, i8** %src, align 8
  %462 = load i8, i8* %461, align 1
  %conv789 = zext i8 %462 to i32
  %or790 = or i32 %shl787, %conv789
  store i32 %or790, i32* %c, align 4
  br label %if.end.795

if.else.791:                                      ; preds = %if.then.781
  %463 = load i8*, i8** %src, align 8
  %incdec.ptr792 = getelementptr inbounds i8, i8* %463, i32 -1
  store i8* %incdec.ptr792, i8** %src, align 8
  %464 = load i8*, i8** %src, align 8
  %call793 = call i32 @string_char(i8* %464, i8** %src, i32* null)
  %sub794 = sub nsw i32 0, %call793
  store i32 %sub794, i32* %c, align 4
  %465 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %465, i32 3)
  br label %if.end.795

if.end.795:                                       ; preds = %if.else.791, %if.then.785
  br label %if.end.796

if.end.796:                                       ; preds = %if.end.795, %land.lhs.true.778, %if.end.773
  %466 = load i64, i64* %consumed_chars, align 8
  %inc797 = add nsw i64 %466, 1
  store i64 %inc797, i64* %consumed_chars, align 8
  br label %do.end.798

do.end.798:                                       ; preds = %if.end.796
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.798
  %467 = load i32, i32* %c, align 4
  %add799 = add i32 %467, 0
  %cmp800 = icmp ult i32 %add799, 128
  br i1 %cmp800, label %cond.true.806, label %cond.false.807

cond.false:                                       ; preds = %do.end.798
  %468 = load i32, i32* %c, align 4
  %conv802 = sext i32 %468 to i64
  %add803 = add i64 %conv802, 0
  %cmp804 = icmp ult i64 %add803, 128
  br i1 %cmp804, label %cond.true.806, label %cond.false.807

cond.true.806:                                    ; preds = %cond.false, %cond.true
  %469 = load i32, i32* %c, align 4
  br label %cond.end

cond.false.807:                                   ; preds = %cond.false, %cond.true
  %470 = load i32, i32* %c, align 4
  %add808 = add nsw i32 %470, 4194048
  br label %cond.end

cond.end:                                         ; preds = %cond.false.807, %cond.true.806
  %cond = phi i32 [ %469, %cond.true.806 ], [ %add808, %cond.false.807 ]
  %471 = load i32*, i32** %charbuf, align 8
  %incdec.ptr809 = getelementptr inbounds i32, i32* %471, i32 1
  store i32* %incdec.ptr809, i32** %charbuf, align 8
  store i32 %cond, i32* %471, align 4
  %472 = load i64, i64* %char_offset, align 8
  %inc810 = add nsw i64 %472, 1
  store i64 %inc810, i64* %char_offset, align 8
  br label %while.body

while.end:                                        ; preds = %if.then.410, %if.end.33
  br label %no_more_source

no_more_source:                                   ; preds = %while.end, %if.end.772, %if.end.686, %if.end.332, %if.end.192, %if.end.143, %if.end.95, %if.end.44
  %473 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state811 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %473, i32 0, i32 0
  %474 = load i32, i32* %state811, align 4
  %cmp812 = icmp ne i32 %474, 0
  br i1 %cmp812, label %if.then.814, label %if.end.850

if.then.814:                                      ; preds = %no_more_source
  %475 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %475, i32 0, i32 1
  %bf.load815 = load i32, i32* %mode, align 8
  %bf.lshr816 = lshr i32 %bf.load815, 14
  %bf.clear817 = and i32 %bf.lshr816, 31
  %and818 = and i32 %bf.clear817, 1
  %tobool819 = icmp ne i32 %and818, 0
  br i1 %tobool819, label %if.then.820, label %if.else.831

if.then.820:                                      ; preds = %if.then.814
  br label %do.body.821

do.body.821:                                      ; preds = %if.then.820
  %476 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %state822 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %476, i32 0, i32 0
  %477 = load i32, i32* %state822, align 4
  %cmp823 = icmp ne i32 %477, 0
  br i1 %cmp823, label %if.then.825, label %if.end.829

if.then.825:                                      ; preds = %do.body.821
  %478 = load i32*, i32** %charbuf, align 8
  %479 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %call826 = call i32 @emacs_mule_finish_composition(i32* %478, %struct.composition_status* %479)
  %conv827 = sext i32 %call826 to i64
  %480 = load i64, i64* %char_offset, align 8
  %add828 = add nsw i64 %480, %conv827
  store i64 %add828, i64* %char_offset, align 8
  br label %if.end.829

if.end.829:                                       ; preds = %if.then.825, %do.body.821
  br label %do.end.830

do.end.830:                                       ; preds = %if.end.829
  br label %if.end.849

if.else.831:                                      ; preds = %if.then.814
  %481 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length833 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %481, i32 0, i32 3
  %482 = load i32, i32* %length833, align 4
  %483 = load i32*, i32** %charbuf, align 8
  %idx.ext834 = sext i32 %482 to i64
  %idx.neg = sub i64 0, %idx.ext834
  %add.ptr835 = getelementptr inbounds i32, i32* %483, i64 %idx.neg
  store i32* %add.ptr835, i32** %charbuf, align 8
  store i32 0, i32* %i832, align 4
  br label %for.cond.836

for.cond.836:                                     ; preds = %for.inc.846, %if.else.831
  %484 = load i32, i32* %i832, align 4
  %485 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %length837 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %485, i32 0, i32 3
  %486 = load i32, i32* %length837, align 4
  %cmp838 = icmp slt i32 %484, %486
  br i1 %cmp838, label %for.body.840, label %for.end.848

for.body.840:                                     ; preds = %for.cond.836
  %487 = load i32, i32* %i832, align 4
  %idxprom841 = sext i32 %487 to i64
  %488 = load i32*, i32** %charbuf, align 8
  %arrayidx842 = getelementptr inbounds i32, i32* %488, i64 %idxprom841
  %489 = load i32, i32* %arrayidx842, align 4
  %490 = load i32, i32* %i832, align 4
  %idxprom843 = sext i32 %490 to i64
  %491 = load %struct.composition_status*, %struct.composition_status** %cmp_status, align 8
  %carryover844 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %491, i32 0, i32 6
  %arrayidx845 = getelementptr inbounds [68 x i32], [68 x i32]* %carryover844, i32 0, i64 %idxprom843
  store i32 %489, i32* %arrayidx845, align 4
  br label %for.inc.846

for.inc.846:                                      ; preds = %for.body.840
  %492 = load i32, i32* %i832, align 4
  %inc847 = add nsw i32 %492, 1
  store i32 %inc847, i32* %i832, align 4
  br label %for.cond.836

for.end.848:                                      ; preds = %for.cond.836
  br label %if.end.849

if.end.849:                                       ; preds = %for.end.848, %do.end.830
  br label %if.end.850

if.end.850:                                       ; preds = %if.end.849, %no_more_source
  %493 = load i32, i32* %last_id, align 4
  %494 = load i32, i32* @charset_ascii, align 4
  %cmp851 = icmp ne i32 %493, %494
  br i1 %cmp851, label %if.then.853, label %if.end.868

if.then.853:                                      ; preds = %if.end.850
  br label %do.body.854

do.body.854:                                      ; preds = %if.then.853
  br label %do.body.855

do.body.855:                                      ; preds = %do.body.854
  %495 = load i32*, i32** %charbuf, align 8
  %incdec.ptr856 = getelementptr inbounds i32, i32* %495, i32 1
  store i32* %incdec.ptr856, i32** %charbuf, align 8
  store i32 -4, i32* %495, align 4
  %496 = load i32*, i32** %charbuf, align 8
  %incdec.ptr857 = getelementptr inbounds i32, i32* %496, i32 1
  store i32* %incdec.ptr857, i32** %charbuf, align 8
  store i32 3, i32* %496, align 4
  %497 = load i64, i64* %char_offset, align 8
  %498 = load i64, i64* %last_offset, align 8
  %sub858 = sub nsw i64 %497, %498
  %conv859 = trunc i64 %sub858 to i32
  %499 = load i32*, i32** %charbuf, align 8
  %incdec.ptr860 = getelementptr inbounds i32, i32* %499, i32 1
  store i32* %incdec.ptr860, i32** %charbuf, align 8
  store i32 %conv859, i32* %499, align 4
  %500 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated861 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %500, i32 0, i32 1
  %bf.load862 = load i32, i32* %annotated861, align 8
  %bf.clear863 = and i32 %bf.load862, -8388609
  %bf.set864 = or i32 %bf.clear863, 8388608
  store i32 %bf.set864, i32* %annotated861, align 8
  br label %do.end.865

do.end.865:                                       ; preds = %do.body.855
  %501 = load i32, i32* %last_id, align 4
  %502 = load i32*, i32** %charbuf, align 8
  %incdec.ptr866 = getelementptr inbounds i32, i32* %502, i32 1
  store i32* %incdec.ptr866, i32** %charbuf, align 8
  store i32 %501, i32* %502, align 4
  br label %do.end.867

do.end.867:                                       ; preds = %do.end.865
  br label %if.end.868

if.end.868:                                       ; preds = %do.end.867, %if.end.850
  %503 = load i64, i64* %consumed_chars_base, align 8
  %504 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %504, i32 0, i32 11
  %505 = load i64, i64* %consumed_char, align 8
  %add869 = add nsw i64 %505, %503
  store i64 %add869, i64* %consumed_char, align 8
  %506 = load i8*, i8** %src_base, align 8
  %507 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source870 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %507, i32 0, i32 17
  %508 = load i8*, i8** %source870, align 8
  %sub.ptr.lhs.cast871 = ptrtoint i8* %506 to i64
  %sub.ptr.rhs.cast872 = ptrtoint i8* %508 to i64
  %sub.ptr.sub873 = sub i64 %sub.ptr.lhs.cast871, %sub.ptr.rhs.cast872
  %509 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed874 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %509, i32 0, i32 10
  store i64 %sub.ptr.sub873, i64* %consumed874, align 8
  %510 = load i32*, i32** %charbuf, align 8
  %511 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf875 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %511, i32 0, i32 23
  %512 = load i32*, i32** %charbuf875, align 8
  %sub.ptr.lhs.cast876 = ptrtoint i32* %510 to i64
  %sub.ptr.rhs.cast877 = ptrtoint i32* %512 to i64
  %sub.ptr.sub878 = sub i64 %sub.ptr.lhs.cast876, %sub.ptr.rhs.cast877
  %sub.ptr.div879 = sdiv exact i64 %sub.ptr.sub878, 4
  %conv880 = trunc i64 %sub.ptr.div879 to i32
  %513 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used881 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %513, i32 0, i32 25
  store i32 %conv880, i32* %charbuf_used881, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_emacs_mule(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %safe_room = alloca i32, align 4
  %produced_chars = alloca i64, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %c = alloca i32, align 4
  %preferred_charset_id = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %code = alloca i32, align 4
  %dimension = alloca i32, align 4
  %emacs_mule_id = alloca i32, align 4
  %leading_codes = alloca [2 x i8], align 1
  %result = alloca i8, align 1
  %offset = alloca i64, align 8
  %offset347 = alloca i64, align 8
  %offset362 = alloca i64, align 8
  %offset394 = alloca i64, align 8
  %ch450 = alloca i32, align 4
  %ch513 = alloca i32, align 4
  %ch577 = alloca i32, align 4
  %ch639 = alloca i32, align 4
  %ch699 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load i32*, i32** %charbuf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 25
  %5 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 8
  %9 = load i64, i64* %produced, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %dst, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 22
  %11 = load i8*, i8** %destination3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 20
  %13 = load i64, i64* %dst_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %dst_end, align 8
  store i32 8, i32* %safe_room, align 4
  store i64 0, i64* %produced_chars, align 8
  store i32 -1, i32* %preferred_charset_id, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id, align 8
  %call5 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %16)
  %call6 = call i64 @AREF(i64 %call5, i64 0)
  store i64 %call6, i64* %attrs, align 8
  %17 = load i64, i64* %attrs, align 8
  %call7 = call i64 @AREF(i64 %17, i64 4)
  store i64 %call7, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %18 = load i64, i64* %charset_list, align 8
  %19 = load i64, i64* @Vemacs_mule_charset_list, align 8
  %cmp = icmp eq i64 %18, %19
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %20 = load i64, i64* @Vemacs_mule_charset_list, align 8
  store i64 %20, i64* %charset_list, align 8
  %21 = load i64, i64* %attrs, align 8
  %22 = load i64, i64* %charset_list, align 8
  call void @ASET(i64 %21, i64 4, i64 %22)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end
  br label %while.cond

while.cond:                                       ; preds = %if.end.757, %do.end.391, %sw.epilog, %if.end
  %23 = load i32*, i32** %charbuf, align 8
  %24 = load i32*, i32** %charbuf_end, align 8
  %cmp8 = icmp ult i32* %23, %24
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.9

do.body.9:                                        ; preds = %while.body
  %25 = load i8*, i8** %dst, align 8
  %26 = load i32, i32* %safe_room, align 4
  %idx.ext10 = sext i32 %26 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %25, i64 %idx.ext10
  %27 = load i8*, i8** %dst_end, align 8
  %cmp12 = icmp uge i8* %add.ptr11, %27
  br i1 %cmp12, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %do.body.9
  %28 = load i32*, i32** %charbuf_end, align 8
  %29 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %28 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %30 = load i32, i32* %safe_room, align 4
  %conv = sext i32 %30 to i64
  %add = add nsw i64 %sub.ptr.div, %conv
  store i64 %add, i64* %more_bytes, align 8
  %31 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %32 = load i64, i64* %more_bytes, align 8
  %33 = load i8*, i8** %dst, align 8
  %call14 = call i8* @alloc_destination(%struct.coding_system* %31, i64 %32, i8* %33)
  store i8* %call14, i8** %dst, align 8
  %34 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination15 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %34, i32 0, i32 22
  %35 = load i8*, i8** %destination15, align 8
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes16 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %36, i32 0, i32 20
  %37 = load i64, i64* %dst_bytes16, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %35, i64 %37
  store i8* %add.ptr17, i8** %dst_end, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.13, %do.body.9
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %38 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %38, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %c, align 4
  %40 = load i32, i32* %c, align 4
  %cmp20 = icmp slt i32 %40, 0
  br i1 %cmp20, label %if.then.22, label %if.end.37

if.then.22:                                       ; preds = %do.end.19
  %41 = load i32*, i32** %charbuf, align 8
  %42 = load i32, i32* %41, align 4
  switch i32 %42, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.23
  ]

sw.bb:                                            ; preds = %if.then.22
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.then.22
  %43 = load i32*, i32** %charbuf, align 8
  %arrayidx = getelementptr inbounds i32, i32* %43, i64 3
  %44 = load i32, i32* %arrayidx, align 4
  store i32 %44, i32* %preferred_charset_id, align 4
  %45 = load i32, i32* %preferred_charset_id, align 4
  %cmp24 = icmp sge i32 %45, 0
  br i1 %cmp24, label %land.lhs.true, label %if.end.33

land.lhs.true:                                    ; preds = %sw.bb.23
  %46 = load i32, i32* %preferred_charset_id, align 4
  %conv26 = sext i32 %46 to i64
  %shl = shl i64 %conv26, 2
  %add27 = add i64 %shl, 2
  %47 = load i64, i64* %charset_list, align 8
  %call28 = call i64 @Fmemq(i64 %add27, i64 %47)
  %call29 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp30 = icmp eq i64 %call28, %call29
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %land.lhs.true
  store i32 -1, i32* %preferred_charset_id, align 4
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %land.lhs.true, %sw.bb.23
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.22
  call void @emacs_abort() #6
  unreachable

sw.epilog:                                        ; preds = %if.end.33, %sw.bb
  %48 = load i32, i32* %c, align 4
  %sub = sub nsw i32 0, %48
  %sub34 = sub nsw i32 %sub, 1
  %49 = load i32*, i32** %charbuf, align 8
  %idx.ext35 = sext i32 %sub34 to i64
  %add.ptr36 = getelementptr inbounds i32, i32* %49, i64 %idx.ext35
  store i32* %add.ptr36, i32** %charbuf, align 8
  br label %while.cond

if.end.37:                                        ; preds = %do.end.19
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.37
  %50 = load i32, i32* %c, align 4
  %add38 = add i32 %50, 0
  %cmp39 = icmp ult i32 %add38, 128
  br i1 %cmp39, label %if.then.45, label %if.else

cond.false:                                       ; preds = %if.end.37
  %51 = load i32, i32* %c, align 4
  %conv41 = sext i32 %51 to i64
  %add42 = add i64 %conv41, 0
  %cmp43 = icmp ult i64 %add42, 128
  br i1 %cmp43, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %cond.false, %cond.true
  br label %do.body.46

do.body.46:                                       ; preds = %if.then.45
  %52 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %52, 1
  store i64 %inc, i64* %produced_chars, align 8
  %53 = load i32, i32* %c, align 4
  %conv47 = trunc i32 %53 to i8
  %54 = load i8*, i8** %dst, align 8
  %incdec.ptr48 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr48, i8** %dst, align 8
  store i8 %conv47, i8* %54, align 1
  br label %do.end.49

do.end.49:                                        ; preds = %do.body.46
  br label %if.end.757

if.else:                                          ; preds = %cond.false, %cond.true
  %55 = load i32, i32* %c, align 4
  %cmp50 = icmp sgt i32 %55, 4194175
  br i1 %cmp50, label %if.then.52, label %if.else.112

if.then.52:                                       ; preds = %if.else
  %56 = load i32, i32* %c, align 4
  %cmp53 = icmp sgt i32 %56, 4194175
  br i1 %cmp53, label %cond.true.55, label %cond.false.57

cond.true.55:                                     ; preds = %if.then.52
  %57 = load i32, i32* %c, align 4
  %sub56 = sub nsw i32 %57, 4194048
  br label %cond.end

cond.false.57:                                    ; preds = %if.then.52
  %58 = load i32, i32* %c, align 4
  %and = and i32 %58, 255
  br label %cond.end

cond.end:                                         ; preds = %cond.false.57, %cond.true.55
  %cond = phi i32 [ %sub56, %cond.true.55 ], [ %and, %cond.false.57 ]
  store i32 %cond, i32* %c, align 4
  br label %do.body.58

do.body.58:                                       ; preds = %cond.end
  %59 = load i64, i64* %produced_chars, align 8
  %inc59 = add nsw i64 %59, 1
  store i64 %inc59, i64* %produced_chars, align 8
  %60 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %60 to i1
  br i1 %tobool, label %if.then.60, label %if.else.107

if.then.60:                                       ; preds = %do.body.58
  %61 = load i32, i32* %c, align 4
  store i32 %61, i32* %ch, align 4
  %62 = load i32, i32* %ch, align 4
  %cmp61 = icmp uge i32 %62, 128
  br i1 %cmp61, label %if.then.63, label %if.end.65

if.then.63:                                       ; preds = %if.then.60
  %63 = load i32, i32* %ch, align 4
  %add64 = add i32 %63, 4194048
  store i32 %add64, i32* %ch, align 4
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.63, %if.then.60
  br label %do.body.66

do.body.66:                                       ; preds = %if.end.65
  %64 = load i32, i32* %ch, align 4
  %cmp67 = icmp ule i32 %64, 127
  br i1 %cmp67, label %if.then.69, label %if.else.72

if.then.69:                                       ; preds = %do.body.66
  %65 = load i32, i32* %ch, align 4
  %conv70 = trunc i32 %65 to i8
  %66 = load i8*, i8** %dst, align 8
  %incdec.ptr71 = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %incdec.ptr71, i8** %dst, align 8
  store i8 %conv70, i8* %66, align 1
  br label %if.end.105

if.else.72:                                       ; preds = %do.body.66
  %67 = load i32, i32* %ch, align 4
  %cmp73 = icmp ule i32 %67, 2047
  br i1 %cmp73, label %if.then.75, label %if.else.82

if.then.75:                                       ; preds = %if.else.72
  %68 = load i32, i32* %ch, align 4
  %shr = lshr i32 %68, 6
  %or = or i32 192, %shr
  %conv76 = trunc i32 %or to i8
  %69 = load i8*, i8** %dst, align 8
  %incdec.ptr77 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr77, i8** %dst, align 8
  store i8 %conv76, i8* %69, align 1
  %70 = load i32, i32* %ch, align 4
  %and78 = and i32 %70, 63
  %or79 = or i32 128, %and78
  %conv80 = trunc i32 %or79 to i8
  %71 = load i8*, i8** %dst, align 8
  %incdec.ptr81 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %incdec.ptr81, i8** %dst, align 8
  store i8 %conv80, i8* %71, align 1
  br label %if.end.104

if.else.82:                                       ; preds = %if.else.72
  %72 = load i32, i32* %ch, align 4
  %cmp83 = icmp ule i32 %72, 65535
  br i1 %cmp83, label %if.then.85, label %if.else.99

if.then.85:                                       ; preds = %if.else.82
  %73 = load i32, i32* %ch, align 4
  %shr86 = lshr i32 %73, 12
  %or87 = or i32 224, %shr86
  %conv88 = trunc i32 %or87 to i8
  %74 = load i8*, i8** %dst, align 8
  %incdec.ptr89 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr89, i8** %dst, align 8
  store i8 %conv88, i8* %74, align 1
  %75 = load i32, i32* %ch, align 4
  %shr90 = lshr i32 %75, 6
  %and91 = and i32 %shr90, 63
  %or92 = or i32 128, %and91
  %conv93 = trunc i32 %or92 to i8
  %76 = load i8*, i8** %dst, align 8
  %incdec.ptr94 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %incdec.ptr94, i8** %dst, align 8
  store i8 %conv93, i8* %76, align 1
  %77 = load i32, i32* %ch, align 4
  %and95 = and i32 %77, 63
  %or96 = or i32 128, %and95
  %conv97 = trunc i32 %or96 to i8
  %78 = load i8*, i8** %dst, align 8
  %incdec.ptr98 = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %incdec.ptr98, i8** %dst, align 8
  store i8 %conv97, i8* %78, align 1
  br label %if.end.103

if.else.99:                                       ; preds = %if.else.82
  %79 = load i32, i32* %ch, align 4
  %80 = load i8*, i8** %dst, align 8
  %call100 = call i32 @char_string(i32 %79, i8* %80)
  %81 = load i8*, i8** %dst, align 8
  %idx.ext101 = sext i32 %call100 to i64
  %add.ptr102 = getelementptr inbounds i8, i8* %81, i64 %idx.ext101
  store i8* %add.ptr102, i8** %dst, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.99, %if.then.85
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %if.then.75
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.then.69
  br label %do.end.106

do.end.106:                                       ; preds = %if.end.105
  br label %if.end.110

if.else.107:                                      ; preds = %do.body.58
  %82 = load i32, i32* %c, align 4
  %conv108 = trunc i32 %82 to i8
  %83 = load i8*, i8** %dst, align 8
  %incdec.ptr109 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %incdec.ptr109, i8** %dst, align 8
  store i8 %conv108, i8* %83, align 1
  br label %if.end.110

if.end.110:                                       ; preds = %if.else.107, %do.end.106
  br label %do.end.111

do.end.111:                                       ; preds = %if.end.110
  br label %if.end.756

if.else.112:                                      ; preds = %if.else
  %84 = load i32, i32* %preferred_charset_id, align 4
  %cmp113 = icmp sge i32 %84, 0
  br i1 %cmp113, label %if.then.115, label %if.else.360

if.then.115:                                      ; preds = %if.else.112
  %85 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %86 = load i32, i32* %preferred_charset_id, align 4
  %idx.ext116 = sext i32 %86 to i64
  %add.ptr117 = getelementptr inbounds %struct.charset, %struct.charset* %85, i64 %idx.ext116
  store %struct.charset* %add.ptr117, %struct.charset** %charset, align 8
  br label %do.body.118

do.body.118:                                      ; preds = %if.then.115
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.119, label %cond.false.123

cond.true.119:                                    ; preds = %do.body.118
  %87 = load i32, i32* %c, align 4
  %add120 = add i32 %87, 0
  %cmp121 = icmp ult i32 %add120, 128
  br i1 %cmp121, label %land.lhs.true.128, label %lor.rhs

cond.false.123:                                   ; preds = %do.body.118
  %88 = load i32, i32* %c, align 4
  %conv124 = sext i32 %88 to i64
  %add125 = add i64 %conv124, 0
  %cmp126 = icmp ult i64 %add125, 128
  br i1 %cmp126, label %land.lhs.true.128, label %lor.rhs

land.lhs.true.128:                                ; preds = %cond.false.123, %cond.true.119
  %89 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %89, i32 0, i32 5
  %bf.load129 = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr130 = lshr i8 %bf.load129, 2
  %bf.clear131 = and i8 %bf.lshr130, 1
  %bf.cast132 = trunc i8 %bf.clear131 to i1
  br i1 %bf.cast132, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true.128, %cond.false.123, %cond.true.119
  %90 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %90, i32 0, i32 5
  %bf.load134 = load i8, i8* %unified_p, align 8
  %bf.lshr135 = lshr i8 %bf.load134, 5
  %bf.clear136 = and i8 %bf.lshr135, 1
  %bf.cast137 = trunc i8 %bf.clear136 to i1
  br i1 %bf.cast137, label %cond.true.145, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.rhs
  %91 = load %struct.charset*, %struct.charset** %charset, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %91, i32 0, i32 9
  %92 = load i32, i32* %method, align 4
  %cmp139 = icmp eq i32 %92, 2
  br i1 %cmp139, label %cond.true.145, label %lor.lhs.false.141

lor.lhs.false.141:                                ; preds = %lor.lhs.false
  %93 = load %struct.charset*, %struct.charset** %charset, align 8
  %method142 = getelementptr inbounds %struct.charset, %struct.charset* %93, i32 0, i32 9
  %94 = load i32, i32* %method142, align 4
  %cmp143 = icmp eq i32 %94, 3
  br i1 %cmp143, label %cond.true.145, label %cond.false.149

cond.true.145:                                    ; preds = %lor.lhs.false.141, %lor.lhs.false, %lor.rhs
  %95 = load %struct.charset*, %struct.charset** %charset, align 8
  %96 = load i32, i32* %c, align 4
  %call146 = call i32 @encode_char(%struct.charset* %95, i32 %96)
  %97 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %97, i32 0, i32 15
  %98 = load i32, i32* %invalid_code, align 4
  %cmp147 = icmp ne i32 %call146, %98
  %conv148 = zext i1 %cmp147 to i32
  br label %cond.end.219

cond.false.149:                                   ; preds = %lor.lhs.false.141
  %99 = load i32, i32* %c, align 4
  %cmp150 = icmp slt i32 %99, 65536
  br i1 %cmp150, label %cond.true.152, label %cond.false.161

cond.true.152:                                    ; preds = %cond.false.149
  %100 = load i32, i32* %c, align 4
  %shr153 = ashr i32 %100, 10
  %idxprom = sext i32 %shr153 to i64
  %101 = load %struct.charset*, %struct.charset** %charset, align 8
  %fast_map = getelementptr inbounds %struct.charset, %struct.charset* %101, i32 0, i32 16
  %arrayidx154 = getelementptr inbounds [190 x i8], [190 x i8]* %fast_map, i32 0, i64 %idxprom
  %102 = load i8, i8* %arrayidx154, align 1
  %conv155 = zext i8 %102 to i32
  %103 = load i32, i32* %c, align 4
  %shr156 = ashr i32 %103, 7
  %and157 = and i32 %shr156, 7
  %shl158 = shl i32 1, %and157
  %and159 = and i32 %conv155, %shl158
  %tobool160 = icmp ne i32 %and159, 0
  br i1 %tobool160, label %land.rhs, label %land.end.217

cond.false.161:                                   ; preds = %cond.false.149
  %104 = load i32, i32* %c, align 4
  %shr162 = ashr i32 %104, 15
  %add163 = add nsw i32 %shr162, 62
  %idxprom164 = sext i32 %add163 to i64
  %105 = load %struct.charset*, %struct.charset** %charset, align 8
  %fast_map165 = getelementptr inbounds %struct.charset, %struct.charset* %105, i32 0, i32 16
  %arrayidx166 = getelementptr inbounds [190 x i8], [190 x i8]* %fast_map165, i32 0, i64 %idxprom164
  %106 = load i8, i8* %arrayidx166, align 1
  %conv167 = zext i8 %106 to i32
  %107 = load i32, i32* %c, align 4
  %shr168 = ashr i32 %107, 12
  %and169 = and i32 %shr168, 7
  %shl170 = shl i32 1, %and169
  %and171 = and i32 %conv167, %shl170
  %tobool172 = icmp ne i32 %and171, 0
  br i1 %tobool172, label %land.rhs, label %land.end.217

land.rhs:                                         ; preds = %cond.false.161, %cond.true.152
  %108 = load %struct.charset*, %struct.charset** %charset, align 8
  %method173 = getelementptr inbounds %struct.charset, %struct.charset* %108, i32 0, i32 9
  %109 = load i32, i32* %method173, align 4
  %cmp174 = icmp eq i32 %109, 0
  br i1 %cmp174, label %cond.true.176, label %cond.false.182

cond.true.176:                                    ; preds = %land.rhs
  %110 = load i32, i32* %c, align 4
  %111 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_char = getelementptr inbounds %struct.charset, %struct.charset* %111, i32 0, i32 13
  %112 = load i32, i32* %min_char, align 4
  %cmp177 = icmp sge i32 %110, %112
  br i1 %cmp177, label %land.rhs.179, label %land.end

land.rhs.179:                                     ; preds = %cond.true.176
  %113 = load i32, i32* %c, align 4
  %114 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_char = getelementptr inbounds %struct.charset, %struct.charset* %114, i32 0, i32 14
  %115 = load i32, i32* %max_char, align 4
  %cmp180 = icmp sle i32 %113, %115
  br label %land.end

land.end:                                         ; preds = %land.rhs.179, %cond.true.176
  %116 = phi i1 [ false, %cond.true.176 ], [ %cmp180, %land.rhs.179 ]
  %land.ext = zext i1 %116 to i32
  br label %cond.end.214

cond.false.182:                                   ; preds = %land.rhs
  %117 = load %struct.charset*, %struct.charset** %charset, align 8
  %method183 = getelementptr inbounds %struct.charset, %struct.charset* %117, i32 0, i32 9
  %118 = load i32, i32* %method183, align 4
  %cmp184 = icmp eq i32 %118, 1
  br i1 %cmp184, label %land.lhs.true.186, label %cond.false.207

land.lhs.true.186:                                ; preds = %cond.false.182
  %119 = load %struct.charset*, %struct.charset** %charset, align 8
  %compact_codes_p = getelementptr inbounds %struct.charset, %struct.charset* %119, i32 0, i32 5
  %bf.load187 = load i8, i8* %compact_codes_p, align 8
  %bf.lshr188 = lshr i8 %bf.load187, 4
  %bf.clear189 = and i8 %bf.lshr188, 1
  %bf.cast190 = trunc i8 %bf.clear189 to i1
  br i1 %bf.cast190, label %land.lhs.true.192, label %cond.false.207

land.lhs.true.192:                                ; preds = %land.lhs.true.186
  %120 = load i64, i64* @Vcharset_hash_table, align 8
  %call193 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %120)
  %121 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %121, i32 0, i32 1
  %122 = load i64, i64* %hash_index, align 8
  %call194 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call193, i64 %122)
  %call195 = call i64 @AREF(i64 %call194, i64 5)
  %call196 = call zeroext i1 @CHAR_TABLE_P(i64 %call195)
  br i1 %call196, label %cond.true.198, label %cond.false.207

cond.true.198:                                    ; preds = %land.lhs.true.192
  %123 = load i64, i64* @Vcharset_hash_table, align 8
  %call199 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %123)
  %124 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index200 = getelementptr inbounds %struct.charset, %struct.charset* %124, i32 0, i32 1
  %125 = load i64, i64* %hash_index200, align 8
  %call201 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call199, i64 %125)
  %call202 = call i64 @AREF(i64 %call201, i64 5)
  %126 = load i32, i32* %c, align 4
  %call203 = call i64 @CHAR_TABLE_REF(i64 %call202, i32 %126)
  %call204 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp205 = icmp eq i64 %call203, %call204
  %lnot = xor i1 %cmp205, true
  %lnot.ext = zext i1 %lnot to i32
  br label %cond.end.212

cond.false.207:                                   ; preds = %land.lhs.true.192, %land.lhs.true.186, %cond.false.182
  %127 = load %struct.charset*, %struct.charset** %charset, align 8
  %128 = load i32, i32* %c, align 4
  %call208 = call i32 @encode_char(%struct.charset* %127, i32 %128)
  %129 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code209 = getelementptr inbounds %struct.charset, %struct.charset* %129, i32 0, i32 15
  %130 = load i32, i32* %invalid_code209, align 4
  %cmp210 = icmp ne i32 %call208, %130
  %conv211 = zext i1 %cmp210 to i32
  br label %cond.end.212

cond.end.212:                                     ; preds = %cond.false.207, %cond.true.198
  %cond213 = phi i32 [ %lnot.ext, %cond.true.198 ], [ %conv211, %cond.false.207 ]
  br label %cond.end.214

cond.end.214:                                     ; preds = %cond.end.212, %land.end
  %cond215 = phi i32 [ %land.ext, %land.end ], [ %cond213, %cond.end.212 ]
  %tobool216 = icmp ne i32 %cond215, 0
  br label %land.end.217

land.end.217:                                     ; preds = %cond.end.214, %cond.false.161, %cond.true.152
  %131 = phi i1 [ false, %cond.false.161 ], [ false, %cond.true.152 ], [ %tobool216, %cond.end.214 ]
  %land.ext218 = zext i1 %131 to i32
  br label %cond.end.219

cond.end.219:                                     ; preds = %land.end.217, %cond.true.145
  %cond220 = phi i32 [ %conv148, %cond.true.145 ], [ %land.ext218, %land.end.217 ]
  %tobool221 = icmp ne i32 %cond220, 0
  br label %lor.end

lor.end:                                          ; preds = %cond.end.219, %land.lhs.true.128
  %132 = phi i1 [ true, %land.lhs.true.128 ], [ %tobool221, %cond.end.219 ]
  %frombool222 = zext i1 %132 to i8
  store i8 %frombool222, i8* %result, align 1
  %133 = load i8, i8* @charset_map_loaded, align 1
  %tobool223 = trunc i8 %133 to i1
  br i1 %tobool223, label %land.lhs.true.225, label %if.end.231

land.lhs.true.225:                                ; preds = %lor.end
  %134 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call226 = call i64 @coding_change_destination(%struct.coding_system* %134)
  store i64 %call226, i64* %offset, align 8
  %tobool227 = icmp ne i64 %call226, 0
  br i1 %tobool227, label %if.then.228, label %if.end.231

if.then.228:                                      ; preds = %land.lhs.true.225
  %135 = load i64, i64* %offset, align 8
  %136 = load i8*, i8** %dst, align 8
  %add.ptr229 = getelementptr inbounds i8, i8* %136, i64 %135
  store i8* %add.ptr229, i8** %dst, align 8
  %137 = load i64, i64* %offset, align 8
  %138 = load i8*, i8** %dst_end, align 8
  %add.ptr230 = getelementptr inbounds i8, i8* %138, i64 %137
  store i8* %add.ptr230, i8** %dst_end, align 8
  br label %if.end.231

if.end.231:                                       ; preds = %if.then.228, %land.lhs.true.225, %lor.end
  br label %do.end.232

do.end.232:                                       ; preds = %if.end.231
  %139 = load i8, i8* %result, align 1
  %tobool233 = trunc i8 %139 to i1
  br i1 %tobool233, label %if.then.234, label %if.else.345

if.then.234:                                      ; preds = %do.end.232
  br i1 true, label %cond.true.235, label %cond.false.239

cond.true.235:                                    ; preds = %if.then.234
  %140 = load i32, i32* %c, align 4
  %add236 = add i32 %140, 0
  %cmp237 = icmp ult i32 %add236, 128
  br i1 %cmp237, label %land.lhs.true.244, label %cond.false.252

cond.false.239:                                   ; preds = %if.then.234
  %141 = load i32, i32* %c, align 4
  %conv240 = sext i32 %141 to i64
  %add241 = add i64 %conv240, 0
  %cmp242 = icmp ult i64 %add241, 128
  br i1 %cmp242, label %land.lhs.true.244, label %cond.false.252

land.lhs.true.244:                                ; preds = %cond.false.239, %cond.true.235
  %142 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p245 = getelementptr inbounds %struct.charset, %struct.charset* %142, i32 0, i32 5
  %bf.load246 = load i8, i8* %ascii_compatible_p245, align 8
  %bf.lshr247 = lshr i8 %bf.load246, 2
  %bf.clear248 = and i8 %bf.lshr247, 1
  %bf.cast249 = trunc i8 %bf.clear248 to i1
  br i1 %bf.cast249, label %cond.true.251, label %cond.false.252

cond.true.251:                                    ; preds = %land.lhs.true.244
  %143 = load i32, i32* %c, align 4
  br label %cond.end.343

cond.false.252:                                   ; preds = %land.lhs.true.244, %cond.false.239, %cond.true.235
  %144 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p253 = getelementptr inbounds %struct.charset, %struct.charset* %144, i32 0, i32 5
  %bf.load254 = load i8, i8* %unified_p253, align 8
  %bf.lshr255 = lshr i8 %bf.load254, 5
  %bf.clear256 = and i8 %bf.lshr255, 1
  %bf.cast257 = trunc i8 %bf.clear256 to i1
  br i1 %bf.cast257, label %cond.true.267, label %lor.lhs.false.259

lor.lhs.false.259:                                ; preds = %cond.false.252
  %145 = load %struct.charset*, %struct.charset** %charset, align 8
  %method260 = getelementptr inbounds %struct.charset, %struct.charset* %145, i32 0, i32 9
  %146 = load i32, i32* %method260, align 4
  %cmp261 = icmp eq i32 %146, 2
  br i1 %cmp261, label %cond.true.267, label %lor.lhs.false.263

lor.lhs.false.263:                                ; preds = %lor.lhs.false.259
  %147 = load %struct.charset*, %struct.charset** %charset, align 8
  %method264 = getelementptr inbounds %struct.charset, %struct.charset* %147, i32 0, i32 9
  %148 = load i32, i32* %method264, align 4
  %cmp265 = icmp eq i32 %148, 3
  br i1 %cmp265, label %cond.true.267, label %cond.false.269

cond.true.267:                                    ; preds = %lor.lhs.false.263, %lor.lhs.false.259, %cond.false.252
  %149 = load %struct.charset*, %struct.charset** %charset, align 8
  %150 = load i32, i32* %c, align 4
  %call268 = call i32 @encode_char(%struct.charset* %149, i32 %150)
  br label %cond.end.341

cond.false.269:                                   ; preds = %lor.lhs.false.263
  %151 = load i32, i32* %c, align 4
  %152 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_char270 = getelementptr inbounds %struct.charset, %struct.charset* %152, i32 0, i32 13
  %153 = load i32, i32* %min_char270, align 4
  %cmp271 = icmp slt i32 %151, %153
  br i1 %cmp271, label %cond.true.277, label %lor.lhs.false.273

lor.lhs.false.273:                                ; preds = %cond.false.269
  %154 = load i32, i32* %c, align 4
  %155 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_char274 = getelementptr inbounds %struct.charset, %struct.charset* %155, i32 0, i32 14
  %156 = load i32, i32* %max_char274, align 4
  %cmp275 = icmp sgt i32 %154, %156
  br i1 %cmp275, label %cond.true.277, label %cond.false.279

cond.true.277:                                    ; preds = %lor.lhs.false.273, %cond.false.269
  %157 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code278 = getelementptr inbounds %struct.charset, %struct.charset* %157, i32 0, i32 15
  %158 = load i32, i32* %invalid_code278, align 4
  br label %cond.end.339

cond.false.279:                                   ; preds = %lor.lhs.false.273
  %159 = load %struct.charset*, %struct.charset** %charset, align 8
  %method280 = getelementptr inbounds %struct.charset, %struct.charset* %159, i32 0, i32 9
  %160 = load i32, i32* %method280, align 4
  %cmp281 = icmp eq i32 %160, 0
  br i1 %cmp281, label %cond.true.283, label %cond.false.295

cond.true.283:                                    ; preds = %cond.false.279
  %161 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %161, i32 0, i32 5
  %bf.load284 = load i8, i8* %code_linear_p, align 8
  %bf.clear285 = and i8 %bf.load284, 1
  %bf.cast286 = trunc i8 %bf.clear285 to i1
  br i1 %bf.cast286, label %cond.true.288, label %cond.false.291

cond.true.288:                                    ; preds = %cond.true.283
  %162 = load i32, i32* %c, align 4
  %163 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %163, i32 0, i32 17
  %164 = load i32, i32* %code_offset, align 4
  %sub289 = sub nsw i32 %162, %164
  %165 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %165, i32 0, i32 10
  %166 = load i32, i32* %min_code, align 4
  %add290 = add i32 %sub289, %166
  br label %cond.end.293

cond.false.291:                                   ; preds = %cond.true.283
  %167 = load %struct.charset*, %struct.charset** %charset, align 8
  %168 = load i32, i32* %c, align 4
  %call292 = call i32 @encode_char(%struct.charset* %167, i32 %168)
  br label %cond.end.293

cond.end.293:                                     ; preds = %cond.false.291, %cond.true.288
  %cond294 = phi i32 [ %add290, %cond.true.288 ], [ %call292, %cond.false.291 ]
  br label %cond.end.337

cond.false.295:                                   ; preds = %cond.false.279
  %169 = load %struct.charset*, %struct.charset** %charset, align 8
  %method296 = getelementptr inbounds %struct.charset, %struct.charset* %169, i32 0, i32 9
  %170 = load i32, i32* %method296, align 4
  %cmp297 = icmp eq i32 %170, 1
  br i1 %cmp297, label %cond.true.299, label %cond.false.333

cond.true.299:                                    ; preds = %cond.false.295
  %171 = load %struct.charset*, %struct.charset** %charset, align 8
  %compact_codes_p300 = getelementptr inbounds %struct.charset, %struct.charset* %171, i32 0, i32 5
  %bf.load301 = load i8, i8* %compact_codes_p300, align 8
  %bf.lshr302 = lshr i8 %bf.load301, 4
  %bf.clear303 = and i8 %bf.lshr302, 1
  %bf.cast304 = trunc i8 %bf.clear303 to i1
  br i1 %bf.cast304, label %land.lhs.true.306, label %cond.false.329

land.lhs.true.306:                                ; preds = %cond.true.299
  %172 = load i64, i64* @Vcharset_hash_table, align 8
  %call307 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %172)
  %173 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index308 = getelementptr inbounds %struct.charset, %struct.charset* %173, i32 0, i32 1
  %174 = load i64, i64* %hash_index308, align 8
  %call309 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call307, i64 %174)
  %call310 = call i64 @AREF(i64 %call309, i64 5)
  %call311 = call zeroext i1 @CHAR_TABLE_P(i64 %call310)
  br i1 %call311, label %cond.true.313, label %cond.false.329

cond.true.313:                                    ; preds = %land.lhs.true.306
  %175 = load i64, i64* @Vcharset_hash_table, align 8
  %call314 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %175)
  %176 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index315 = getelementptr inbounds %struct.charset, %struct.charset* %176, i32 0, i32 1
  %177 = load i64, i64* %hash_index315, align 8
  %call316 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call314, i64 %177)
  %call317 = call i64 @AREF(i64 %call316, i64 5)
  %178 = load i32, i32* %c, align 4
  %call318 = call i64 @CHAR_TABLE_REF(i64 %call317, i32 %178)
  store i64 %call318, i64* @charset_work, align 8
  %179 = load i64, i64* @charset_work, align 8
  %call319 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp320 = icmp eq i64 %179, %call319
  br i1 %cmp320, label %cond.true.322, label %cond.false.324

cond.true.322:                                    ; preds = %cond.true.313
  %180 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code323 = getelementptr inbounds %struct.charset, %struct.charset* %180, i32 0, i32 15
  %181 = load i32, i32* %invalid_code323, align 4
  br label %cond.end.327

cond.false.324:                                   ; preds = %cond.true.313
  %182 = load i64, i64* @charset_work, align 8
  %shr325 = ashr i64 %182, 2
  %conv326 = trunc i64 %shr325 to i32
  br label %cond.end.327

cond.end.327:                                     ; preds = %cond.false.324, %cond.true.322
  %cond328 = phi i32 [ %181, %cond.true.322 ], [ %conv326, %cond.false.324 ]
  br label %cond.end.331

cond.false.329:                                   ; preds = %land.lhs.true.306, %cond.true.299
  %183 = load %struct.charset*, %struct.charset** %charset, align 8
  %184 = load i32, i32* %c, align 4
  %call330 = call i32 @encode_char(%struct.charset* %183, i32 %184)
  br label %cond.end.331

cond.end.331:                                     ; preds = %cond.false.329, %cond.end.327
  %cond332 = phi i32 [ %cond328, %cond.end.327 ], [ %call330, %cond.false.329 ]
  br label %cond.end.335

cond.false.333:                                   ; preds = %cond.false.295
  %185 = load %struct.charset*, %struct.charset** %charset, align 8
  %186 = load i32, i32* %c, align 4
  %call334 = call i32 @encode_char(%struct.charset* %185, i32 %186)
  br label %cond.end.335

cond.end.335:                                     ; preds = %cond.false.333, %cond.end.331
  %cond336 = phi i32 [ %cond332, %cond.end.331 ], [ %call334, %cond.false.333 ]
  br label %cond.end.337

cond.end.337:                                     ; preds = %cond.end.335, %cond.end.293
  %cond338 = phi i32 [ %cond294, %cond.end.293 ], [ %cond336, %cond.end.335 ]
  br label %cond.end.339

cond.end.339:                                     ; preds = %cond.end.337, %cond.true.277
  %cond340 = phi i32 [ %158, %cond.true.277 ], [ %cond338, %cond.end.337 ]
  br label %cond.end.341

cond.end.341:                                     ; preds = %cond.end.339, %cond.true.267
  %cond342 = phi i32 [ %call268, %cond.true.267 ], [ %cond340, %cond.end.339 ]
  br label %cond.end.343

cond.end.343:                                     ; preds = %cond.end.341, %cond.true.251
  %cond344 = phi i32 [ %143, %cond.true.251 ], [ %cond342, %cond.end.341 ]
  store i32 %cond344, i32* %code, align 4
  br label %if.end.359

if.else.345:                                      ; preds = %do.end.232
  br label %do.body.346

do.body.346:                                      ; preds = %if.else.345
  store i8 0, i8* @charset_map_loaded, align 1
  %187 = load i32, i32* %c, align 4
  %188 = load i64, i64* %charset_list, align 8
  %call348 = call %struct.charset* @char_charset(i32 %187, i64 %188, i32* %code)
  store %struct.charset* %call348, %struct.charset** %charset, align 8
  %189 = load i8, i8* @charset_map_loaded, align 1
  %tobool349 = trunc i8 %189 to i1
  br i1 %tobool349, label %land.lhs.true.351, label %if.end.357

land.lhs.true.351:                                ; preds = %do.body.346
  %190 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call352 = call i64 @coding_change_destination(%struct.coding_system* %190)
  store i64 %call352, i64* %offset347, align 8
  %tobool353 = icmp ne i64 %call352, 0
  br i1 %tobool353, label %if.then.354, label %if.end.357

if.then.354:                                      ; preds = %land.lhs.true.351
  %191 = load i64, i64* %offset347, align 8
  %192 = load i8*, i8** %dst, align 8
  %add.ptr355 = getelementptr inbounds i8, i8* %192, i64 %191
  store i8* %add.ptr355, i8** %dst, align 8
  %193 = load i64, i64* %offset347, align 8
  %194 = load i8*, i8** %dst_end, align 8
  %add.ptr356 = getelementptr inbounds i8, i8* %194, i64 %193
  store i8* %add.ptr356, i8** %dst_end, align 8
  br label %if.end.357

if.end.357:                                       ; preds = %if.then.354, %land.lhs.true.351, %do.body.346
  br label %do.end.358

do.end.358:                                       ; preds = %if.end.357
  br label %if.end.359

if.end.359:                                       ; preds = %do.end.358, %cond.end.343
  br label %if.end.374

if.else.360:                                      ; preds = %if.else.112
  br label %do.body.361

do.body.361:                                      ; preds = %if.else.360
  store i8 0, i8* @charset_map_loaded, align 1
  %195 = load i32, i32* %c, align 4
  %196 = load i64, i64* %charset_list, align 8
  %call363 = call %struct.charset* @char_charset(i32 %195, i64 %196, i32* %code)
  store %struct.charset* %call363, %struct.charset** %charset, align 8
  %197 = load i8, i8* @charset_map_loaded, align 1
  %tobool364 = trunc i8 %197 to i1
  br i1 %tobool364, label %land.lhs.true.366, label %if.end.372

land.lhs.true.366:                                ; preds = %do.body.361
  %198 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call367 = call i64 @coding_change_destination(%struct.coding_system* %198)
  store i64 %call367, i64* %offset362, align 8
  %tobool368 = icmp ne i64 %call367, 0
  br i1 %tobool368, label %if.then.369, label %if.end.372

if.then.369:                                      ; preds = %land.lhs.true.366
  %199 = load i64, i64* %offset362, align 8
  %200 = load i8*, i8** %dst, align 8
  %add.ptr370 = getelementptr inbounds i8, i8* %200, i64 %199
  store i8* %add.ptr370, i8** %dst, align 8
  %201 = load i64, i64* %offset362, align 8
  %202 = load i8*, i8** %dst_end, align 8
  %add.ptr371 = getelementptr inbounds i8, i8* %202, i64 %201
  store i8* %add.ptr371, i8** %dst_end, align 8
  br label %if.end.372

if.end.372:                                       ; preds = %if.then.369, %land.lhs.true.366, %do.body.361
  br label %do.end.373

do.end.373:                                       ; preds = %if.end.372
  br label %if.end.374

if.end.374:                                       ; preds = %do.end.373, %if.end.359
  %203 = load %struct.charset*, %struct.charset** %charset, align 8
  %tobool375 = icmp ne %struct.charset* %203, null
  br i1 %tobool375, label %if.end.406, label %if.then.376

if.then.376:                                      ; preds = %if.end.374
  %204 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %default_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %204, i32 0, i32 28
  %205 = load i32, i32* %default_char, align 4
  store i32 %205, i32* %c, align 4
  br i1 true, label %cond.true.377, label %cond.false.381

cond.true.377:                                    ; preds = %if.then.376
  %206 = load i32, i32* %c, align 4
  %add378 = add i32 %206, 0
  %cmp379 = icmp ult i32 %add378, 128
  br i1 %cmp379, label %if.then.386, label %if.end.392

cond.false.381:                                   ; preds = %if.then.376
  %207 = load i32, i32* %c, align 4
  %conv382 = sext i32 %207 to i64
  %add383 = add i64 %conv382, 0
  %cmp384 = icmp ult i64 %add383, 128
  br i1 %cmp384, label %if.then.386, label %if.end.392

if.then.386:                                      ; preds = %cond.false.381, %cond.true.377
  br label %do.body.387

do.body.387:                                      ; preds = %if.then.386
  %208 = load i64, i64* %produced_chars, align 8
  %inc388 = add nsw i64 %208, 1
  store i64 %inc388, i64* %produced_chars, align 8
  %209 = load i32, i32* %c, align 4
  %conv389 = trunc i32 %209 to i8
  %210 = load i8*, i8** %dst, align 8
  %incdec.ptr390 = getelementptr inbounds i8, i8* %210, i32 1
  store i8* %incdec.ptr390, i8** %dst, align 8
  store i8 %conv389, i8* %210, align 1
  br label %do.end.391

do.end.391:                                       ; preds = %do.body.387
  br label %while.cond

if.end.392:                                       ; preds = %cond.false.381, %cond.true.377
  br label %do.body.393

do.body.393:                                      ; preds = %if.end.392
  store i8 0, i8* @charset_map_loaded, align 1
  %211 = load i32, i32* %c, align 4
  %212 = load i64, i64* %charset_list, align 8
  %call395 = call %struct.charset* @char_charset(i32 %211, i64 %212, i32* %code)
  store %struct.charset* %call395, %struct.charset** %charset, align 8
  %213 = load i8, i8* @charset_map_loaded, align 1
  %tobool396 = trunc i8 %213 to i1
  br i1 %tobool396, label %land.lhs.true.398, label %if.end.404

land.lhs.true.398:                                ; preds = %do.body.393
  %214 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call399 = call i64 @coding_change_destination(%struct.coding_system* %214)
  store i64 %call399, i64* %offset394, align 8
  %tobool400 = icmp ne i64 %call399, 0
  br i1 %tobool400, label %if.then.401, label %if.end.404

if.then.401:                                      ; preds = %land.lhs.true.398
  %215 = load i64, i64* %offset394, align 8
  %216 = load i8*, i8** %dst, align 8
  %add.ptr402 = getelementptr inbounds i8, i8* %216, i64 %215
  store i8* %add.ptr402, i8** %dst, align 8
  %217 = load i64, i64* %offset394, align 8
  %218 = load i8*, i8** %dst_end, align 8
  %add.ptr403 = getelementptr inbounds i8, i8* %218, i64 %217
  store i8* %add.ptr403, i8** %dst_end, align 8
  br label %if.end.404

if.end.404:                                       ; preds = %if.then.401, %land.lhs.true.398, %do.body.393
  br label %do.end.405

do.end.405:                                       ; preds = %if.end.404
  br label %if.end.406

if.end.406:                                       ; preds = %do.end.405, %if.end.374
  %219 = load %struct.charset*, %struct.charset** %charset, align 8
  %dimension407 = getelementptr inbounds %struct.charset, %struct.charset* %219, i32 0, i32 2
  %220 = load i32, i32* %dimension407, align 4
  store i32 %220, i32* %dimension, align 4
  %221 = load %struct.charset*, %struct.charset** %charset, align 8
  %emacs_mule_id408 = getelementptr inbounds %struct.charset, %struct.charset* %221, i32 0, i32 8
  %222 = load i32, i32* %emacs_mule_id408, align 4
  store i32 %222, i32* %emacs_mule_id, align 4
  br label %do.body.409

do.body.409:                                      ; preds = %if.end.406
  %223 = load i32, i32* %emacs_mule_id, align 4
  %cmp410 = icmp slt i32 %223, 160
  br i1 %cmp410, label %if.then.412, label %if.else.416

if.then.412:                                      ; preds = %do.body.409
  %224 = load i32, i32* %emacs_mule_id, align 4
  %conv413 = trunc i32 %224 to i8
  %arrayidx414 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 0
  store i8 %conv413, i8* %arrayidx414, align 1
  %arrayidx415 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  store i8 0, i8* %arrayidx415, align 1
  br label %if.end.444

if.else.416:                                      ; preds = %do.body.409
  %225 = load i32, i32* %emacs_mule_id, align 4
  %cmp417 = icmp slt i32 %225, 224
  br i1 %cmp417, label %if.then.419, label %if.else.423

if.then.419:                                      ; preds = %if.else.416
  %arrayidx420 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 0
  store i8 -102, i8* %arrayidx420, align 1
  %226 = load i32, i32* %emacs_mule_id, align 4
  %conv421 = trunc i32 %226 to i8
  %arrayidx422 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  store i8 %conv421, i8* %arrayidx422, align 1
  br label %if.end.443

if.else.423:                                      ; preds = %if.else.416
  %227 = load i32, i32* %emacs_mule_id, align 4
  %cmp424 = icmp slt i32 %227, 240
  br i1 %cmp424, label %if.then.426, label %if.else.430

if.then.426:                                      ; preds = %if.else.423
  %arrayidx427 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 0
  store i8 -101, i8* %arrayidx427, align 1
  %228 = load i32, i32* %emacs_mule_id, align 4
  %conv428 = trunc i32 %228 to i8
  %arrayidx429 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  store i8 %conv428, i8* %arrayidx429, align 1
  br label %if.end.442

if.else.430:                                      ; preds = %if.else.423
  %229 = load i32, i32* %emacs_mule_id, align 4
  %cmp431 = icmp slt i32 %229, 245
  br i1 %cmp431, label %if.then.433, label %if.else.437

if.then.433:                                      ; preds = %if.else.430
  %arrayidx434 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 0
  store i8 -100, i8* %arrayidx434, align 1
  %230 = load i32, i32* %emacs_mule_id, align 4
  %conv435 = trunc i32 %230 to i8
  %arrayidx436 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  store i8 %conv435, i8* %arrayidx436, align 1
  br label %if.end.441

if.else.437:                                      ; preds = %if.else.430
  %arrayidx438 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 0
  store i8 -99, i8* %arrayidx438, align 1
  %231 = load i32, i32* %emacs_mule_id, align 4
  %conv439 = trunc i32 %231 to i8
  %arrayidx440 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  store i8 %conv439, i8* %arrayidx440, align 1
  br label %if.end.441

if.end.441:                                       ; preds = %if.else.437, %if.then.433
  br label %if.end.442

if.end.442:                                       ; preds = %if.end.441, %if.then.426
  br label %if.end.443

if.end.443:                                       ; preds = %if.end.442, %if.then.419
  br label %if.end.444

if.end.444:                                       ; preds = %if.end.443, %if.then.412
  br label %do.end.445

do.end.445:                                       ; preds = %if.end.444
  br label %do.body.446

do.body.446:                                      ; preds = %do.end.445
  %232 = load i64, i64* %produced_chars, align 8
  %inc447 = add nsw i64 %232, 1
  store i64 %inc447, i64* %produced_chars, align 8
  %233 = load i8, i8* %multibytep, align 1
  %tobool448 = trunc i8 %233 to i1
  br i1 %tobool448, label %if.then.449, label %if.else.501

if.then.449:                                      ; preds = %do.body.446
  %arrayidx451 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 0
  %234 = load i8, i8* %arrayidx451, align 1
  %conv452 = zext i8 %234 to i32
  store i32 %conv452, i32* %ch450, align 4
  %235 = load i32, i32* %ch450, align 4
  %cmp453 = icmp uge i32 %235, 128
  br i1 %cmp453, label %if.then.455, label %if.end.457

if.then.455:                                      ; preds = %if.then.449
  %236 = load i32, i32* %ch450, align 4
  %add456 = add i32 %236, 4194048
  store i32 %add456, i32* %ch450, align 4
  br label %if.end.457

if.end.457:                                       ; preds = %if.then.455, %if.then.449
  br label %do.body.458

do.body.458:                                      ; preds = %if.end.457
  %237 = load i32, i32* %ch450, align 4
  %cmp459 = icmp ule i32 %237, 127
  br i1 %cmp459, label %if.then.461, label %if.else.464

if.then.461:                                      ; preds = %do.body.458
  %238 = load i32, i32* %ch450, align 4
  %conv462 = trunc i32 %238 to i8
  %239 = load i8*, i8** %dst, align 8
  %incdec.ptr463 = getelementptr inbounds i8, i8* %239, i32 1
  store i8* %incdec.ptr463, i8** %dst, align 8
  store i8 %conv462, i8* %239, align 1
  br label %if.end.499

if.else.464:                                      ; preds = %do.body.458
  %240 = load i32, i32* %ch450, align 4
  %cmp465 = icmp ule i32 %240, 2047
  br i1 %cmp465, label %if.then.467, label %if.else.476

if.then.467:                                      ; preds = %if.else.464
  %241 = load i32, i32* %ch450, align 4
  %shr468 = lshr i32 %241, 6
  %or469 = or i32 192, %shr468
  %conv470 = trunc i32 %or469 to i8
  %242 = load i8*, i8** %dst, align 8
  %incdec.ptr471 = getelementptr inbounds i8, i8* %242, i32 1
  store i8* %incdec.ptr471, i8** %dst, align 8
  store i8 %conv470, i8* %242, align 1
  %243 = load i32, i32* %ch450, align 4
  %and472 = and i32 %243, 63
  %or473 = or i32 128, %and472
  %conv474 = trunc i32 %or473 to i8
  %244 = load i8*, i8** %dst, align 8
  %incdec.ptr475 = getelementptr inbounds i8, i8* %244, i32 1
  store i8* %incdec.ptr475, i8** %dst, align 8
  store i8 %conv474, i8* %244, align 1
  br label %if.end.498

if.else.476:                                      ; preds = %if.else.464
  %245 = load i32, i32* %ch450, align 4
  %cmp477 = icmp ule i32 %245, 65535
  br i1 %cmp477, label %if.then.479, label %if.else.493

if.then.479:                                      ; preds = %if.else.476
  %246 = load i32, i32* %ch450, align 4
  %shr480 = lshr i32 %246, 12
  %or481 = or i32 224, %shr480
  %conv482 = trunc i32 %or481 to i8
  %247 = load i8*, i8** %dst, align 8
  %incdec.ptr483 = getelementptr inbounds i8, i8* %247, i32 1
  store i8* %incdec.ptr483, i8** %dst, align 8
  store i8 %conv482, i8* %247, align 1
  %248 = load i32, i32* %ch450, align 4
  %shr484 = lshr i32 %248, 6
  %and485 = and i32 %shr484, 63
  %or486 = or i32 128, %and485
  %conv487 = trunc i32 %or486 to i8
  %249 = load i8*, i8** %dst, align 8
  %incdec.ptr488 = getelementptr inbounds i8, i8* %249, i32 1
  store i8* %incdec.ptr488, i8** %dst, align 8
  store i8 %conv487, i8* %249, align 1
  %250 = load i32, i32* %ch450, align 4
  %and489 = and i32 %250, 63
  %or490 = or i32 128, %and489
  %conv491 = trunc i32 %or490 to i8
  %251 = load i8*, i8** %dst, align 8
  %incdec.ptr492 = getelementptr inbounds i8, i8* %251, i32 1
  store i8* %incdec.ptr492, i8** %dst, align 8
  store i8 %conv491, i8* %251, align 1
  br label %if.end.497

if.else.493:                                      ; preds = %if.else.476
  %252 = load i32, i32* %ch450, align 4
  %253 = load i8*, i8** %dst, align 8
  %call494 = call i32 @char_string(i32 %252, i8* %253)
  %254 = load i8*, i8** %dst, align 8
  %idx.ext495 = sext i32 %call494 to i64
  %add.ptr496 = getelementptr inbounds i8, i8* %254, i64 %idx.ext495
  store i8* %add.ptr496, i8** %dst, align 8
  br label %if.end.497

if.end.497:                                       ; preds = %if.else.493, %if.then.479
  br label %if.end.498

if.end.498:                                       ; preds = %if.end.497, %if.then.467
  br label %if.end.499

if.end.499:                                       ; preds = %if.end.498, %if.then.461
  br label %do.end.500

do.end.500:                                       ; preds = %if.end.499
  br label %if.end.504

if.else.501:                                      ; preds = %do.body.446
  %arrayidx502 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 0
  %255 = load i8, i8* %arrayidx502, align 1
  %256 = load i8*, i8** %dst, align 8
  %incdec.ptr503 = getelementptr inbounds i8, i8* %256, i32 1
  store i8* %incdec.ptr503, i8** %dst, align 8
  store i8 %255, i8* %256, align 1
  br label %if.end.504

if.end.504:                                       ; preds = %if.else.501, %do.end.500
  br label %do.end.505

do.end.505:                                       ; preds = %if.end.504
  %arrayidx506 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  %257 = load i8, i8* %arrayidx506, align 1
  %tobool507 = icmp ne i8 %257, 0
  br i1 %tobool507, label %if.then.508, label %if.end.569

if.then.508:                                      ; preds = %do.end.505
  br label %do.body.509

do.body.509:                                      ; preds = %if.then.508
  %258 = load i64, i64* %produced_chars, align 8
  %inc510 = add nsw i64 %258, 1
  store i64 %inc510, i64* %produced_chars, align 8
  %259 = load i8, i8* %multibytep, align 1
  %tobool511 = trunc i8 %259 to i1
  br i1 %tobool511, label %if.then.512, label %if.else.564

if.then.512:                                      ; preds = %do.body.509
  %arrayidx514 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  %260 = load i8, i8* %arrayidx514, align 1
  %conv515 = zext i8 %260 to i32
  store i32 %conv515, i32* %ch513, align 4
  %261 = load i32, i32* %ch513, align 4
  %cmp516 = icmp uge i32 %261, 128
  br i1 %cmp516, label %if.then.518, label %if.end.520

if.then.518:                                      ; preds = %if.then.512
  %262 = load i32, i32* %ch513, align 4
  %add519 = add i32 %262, 4194048
  store i32 %add519, i32* %ch513, align 4
  br label %if.end.520

if.end.520:                                       ; preds = %if.then.518, %if.then.512
  br label %do.body.521

do.body.521:                                      ; preds = %if.end.520
  %263 = load i32, i32* %ch513, align 4
  %cmp522 = icmp ule i32 %263, 127
  br i1 %cmp522, label %if.then.524, label %if.else.527

if.then.524:                                      ; preds = %do.body.521
  %264 = load i32, i32* %ch513, align 4
  %conv525 = trunc i32 %264 to i8
  %265 = load i8*, i8** %dst, align 8
  %incdec.ptr526 = getelementptr inbounds i8, i8* %265, i32 1
  store i8* %incdec.ptr526, i8** %dst, align 8
  store i8 %conv525, i8* %265, align 1
  br label %if.end.562

if.else.527:                                      ; preds = %do.body.521
  %266 = load i32, i32* %ch513, align 4
  %cmp528 = icmp ule i32 %266, 2047
  br i1 %cmp528, label %if.then.530, label %if.else.539

if.then.530:                                      ; preds = %if.else.527
  %267 = load i32, i32* %ch513, align 4
  %shr531 = lshr i32 %267, 6
  %or532 = or i32 192, %shr531
  %conv533 = trunc i32 %or532 to i8
  %268 = load i8*, i8** %dst, align 8
  %incdec.ptr534 = getelementptr inbounds i8, i8* %268, i32 1
  store i8* %incdec.ptr534, i8** %dst, align 8
  store i8 %conv533, i8* %268, align 1
  %269 = load i32, i32* %ch513, align 4
  %and535 = and i32 %269, 63
  %or536 = or i32 128, %and535
  %conv537 = trunc i32 %or536 to i8
  %270 = load i8*, i8** %dst, align 8
  %incdec.ptr538 = getelementptr inbounds i8, i8* %270, i32 1
  store i8* %incdec.ptr538, i8** %dst, align 8
  store i8 %conv537, i8* %270, align 1
  br label %if.end.561

if.else.539:                                      ; preds = %if.else.527
  %271 = load i32, i32* %ch513, align 4
  %cmp540 = icmp ule i32 %271, 65535
  br i1 %cmp540, label %if.then.542, label %if.else.556

if.then.542:                                      ; preds = %if.else.539
  %272 = load i32, i32* %ch513, align 4
  %shr543 = lshr i32 %272, 12
  %or544 = or i32 224, %shr543
  %conv545 = trunc i32 %or544 to i8
  %273 = load i8*, i8** %dst, align 8
  %incdec.ptr546 = getelementptr inbounds i8, i8* %273, i32 1
  store i8* %incdec.ptr546, i8** %dst, align 8
  store i8 %conv545, i8* %273, align 1
  %274 = load i32, i32* %ch513, align 4
  %shr547 = lshr i32 %274, 6
  %and548 = and i32 %shr547, 63
  %or549 = or i32 128, %and548
  %conv550 = trunc i32 %or549 to i8
  %275 = load i8*, i8** %dst, align 8
  %incdec.ptr551 = getelementptr inbounds i8, i8* %275, i32 1
  store i8* %incdec.ptr551, i8** %dst, align 8
  store i8 %conv550, i8* %275, align 1
  %276 = load i32, i32* %ch513, align 4
  %and552 = and i32 %276, 63
  %or553 = or i32 128, %and552
  %conv554 = trunc i32 %or553 to i8
  %277 = load i8*, i8** %dst, align 8
  %incdec.ptr555 = getelementptr inbounds i8, i8* %277, i32 1
  store i8* %incdec.ptr555, i8** %dst, align 8
  store i8 %conv554, i8* %277, align 1
  br label %if.end.560

if.else.556:                                      ; preds = %if.else.539
  %278 = load i32, i32* %ch513, align 4
  %279 = load i8*, i8** %dst, align 8
  %call557 = call i32 @char_string(i32 %278, i8* %279)
  %280 = load i8*, i8** %dst, align 8
  %idx.ext558 = sext i32 %call557 to i64
  %add.ptr559 = getelementptr inbounds i8, i8* %280, i64 %idx.ext558
  store i8* %add.ptr559, i8** %dst, align 8
  br label %if.end.560

if.end.560:                                       ; preds = %if.else.556, %if.then.542
  br label %if.end.561

if.end.561:                                       ; preds = %if.end.560, %if.then.530
  br label %if.end.562

if.end.562:                                       ; preds = %if.end.561, %if.then.524
  br label %do.end.563

do.end.563:                                       ; preds = %if.end.562
  br label %if.end.567

if.else.564:                                      ; preds = %do.body.509
  %arrayidx565 = getelementptr inbounds [2 x i8], [2 x i8]* %leading_codes, i32 0, i64 1
  %281 = load i8, i8* %arrayidx565, align 1
  %282 = load i8*, i8** %dst, align 8
  %incdec.ptr566 = getelementptr inbounds i8, i8* %282, i32 1
  store i8* %incdec.ptr566, i8** %dst, align 8
  store i8 %281, i8* %282, align 1
  br label %if.end.567

if.end.567:                                       ; preds = %if.else.564, %do.end.563
  br label %do.end.568

do.end.568:                                       ; preds = %if.end.567
  br label %if.end.569

if.end.569:                                       ; preds = %do.end.568, %do.end.505
  %283 = load i32, i32* %dimension, align 4
  %cmp570 = icmp eq i32 %283, 1
  br i1 %cmp570, label %if.then.572, label %if.else.633

if.then.572:                                      ; preds = %if.end.569
  br label %do.body.573

do.body.573:                                      ; preds = %if.then.572
  %284 = load i64, i64* %produced_chars, align 8
  %inc574 = add nsw i64 %284, 1
  store i64 %inc574, i64* %produced_chars, align 8
  %285 = load i8, i8* %multibytep, align 1
  %tobool575 = trunc i8 %285 to i1
  br i1 %tobool575, label %if.then.576, label %if.else.627

if.then.576:                                      ; preds = %do.body.573
  %286 = load i32, i32* %code, align 4
  %or578 = or i32 %286, 128
  store i32 %or578, i32* %ch577, align 4
  %287 = load i32, i32* %ch577, align 4
  %cmp579 = icmp uge i32 %287, 128
  br i1 %cmp579, label %if.then.581, label %if.end.583

if.then.581:                                      ; preds = %if.then.576
  %288 = load i32, i32* %ch577, align 4
  %add582 = add i32 %288, 4194048
  store i32 %add582, i32* %ch577, align 4
  br label %if.end.583

if.end.583:                                       ; preds = %if.then.581, %if.then.576
  br label %do.body.584

do.body.584:                                      ; preds = %if.end.583
  %289 = load i32, i32* %ch577, align 4
  %cmp585 = icmp ule i32 %289, 127
  br i1 %cmp585, label %if.then.587, label %if.else.590

if.then.587:                                      ; preds = %do.body.584
  %290 = load i32, i32* %ch577, align 4
  %conv588 = trunc i32 %290 to i8
  %291 = load i8*, i8** %dst, align 8
  %incdec.ptr589 = getelementptr inbounds i8, i8* %291, i32 1
  store i8* %incdec.ptr589, i8** %dst, align 8
  store i8 %conv588, i8* %291, align 1
  br label %if.end.625

if.else.590:                                      ; preds = %do.body.584
  %292 = load i32, i32* %ch577, align 4
  %cmp591 = icmp ule i32 %292, 2047
  br i1 %cmp591, label %if.then.593, label %if.else.602

if.then.593:                                      ; preds = %if.else.590
  %293 = load i32, i32* %ch577, align 4
  %shr594 = lshr i32 %293, 6
  %or595 = or i32 192, %shr594
  %conv596 = trunc i32 %or595 to i8
  %294 = load i8*, i8** %dst, align 8
  %incdec.ptr597 = getelementptr inbounds i8, i8* %294, i32 1
  store i8* %incdec.ptr597, i8** %dst, align 8
  store i8 %conv596, i8* %294, align 1
  %295 = load i32, i32* %ch577, align 4
  %and598 = and i32 %295, 63
  %or599 = or i32 128, %and598
  %conv600 = trunc i32 %or599 to i8
  %296 = load i8*, i8** %dst, align 8
  %incdec.ptr601 = getelementptr inbounds i8, i8* %296, i32 1
  store i8* %incdec.ptr601, i8** %dst, align 8
  store i8 %conv600, i8* %296, align 1
  br label %if.end.624

if.else.602:                                      ; preds = %if.else.590
  %297 = load i32, i32* %ch577, align 4
  %cmp603 = icmp ule i32 %297, 65535
  br i1 %cmp603, label %if.then.605, label %if.else.619

if.then.605:                                      ; preds = %if.else.602
  %298 = load i32, i32* %ch577, align 4
  %shr606 = lshr i32 %298, 12
  %or607 = or i32 224, %shr606
  %conv608 = trunc i32 %or607 to i8
  %299 = load i8*, i8** %dst, align 8
  %incdec.ptr609 = getelementptr inbounds i8, i8* %299, i32 1
  store i8* %incdec.ptr609, i8** %dst, align 8
  store i8 %conv608, i8* %299, align 1
  %300 = load i32, i32* %ch577, align 4
  %shr610 = lshr i32 %300, 6
  %and611 = and i32 %shr610, 63
  %or612 = or i32 128, %and611
  %conv613 = trunc i32 %or612 to i8
  %301 = load i8*, i8** %dst, align 8
  %incdec.ptr614 = getelementptr inbounds i8, i8* %301, i32 1
  store i8* %incdec.ptr614, i8** %dst, align 8
  store i8 %conv613, i8* %301, align 1
  %302 = load i32, i32* %ch577, align 4
  %and615 = and i32 %302, 63
  %or616 = or i32 128, %and615
  %conv617 = trunc i32 %or616 to i8
  %303 = load i8*, i8** %dst, align 8
  %incdec.ptr618 = getelementptr inbounds i8, i8* %303, i32 1
  store i8* %incdec.ptr618, i8** %dst, align 8
  store i8 %conv617, i8* %303, align 1
  br label %if.end.623

if.else.619:                                      ; preds = %if.else.602
  %304 = load i32, i32* %ch577, align 4
  %305 = load i8*, i8** %dst, align 8
  %call620 = call i32 @char_string(i32 %304, i8* %305)
  %306 = load i8*, i8** %dst, align 8
  %idx.ext621 = sext i32 %call620 to i64
  %add.ptr622 = getelementptr inbounds i8, i8* %306, i64 %idx.ext621
  store i8* %add.ptr622, i8** %dst, align 8
  br label %if.end.623

if.end.623:                                       ; preds = %if.else.619, %if.then.605
  br label %if.end.624

if.end.624:                                       ; preds = %if.end.623, %if.then.593
  br label %if.end.625

if.end.625:                                       ; preds = %if.end.624, %if.then.587
  br label %do.end.626

do.end.626:                                       ; preds = %if.end.625
  br label %if.end.631

if.else.627:                                      ; preds = %do.body.573
  %307 = load i32, i32* %code, align 4
  %or628 = or i32 %307, 128
  %conv629 = trunc i32 %or628 to i8
  %308 = load i8*, i8** %dst, align 8
  %incdec.ptr630 = getelementptr inbounds i8, i8* %308, i32 1
  store i8* %incdec.ptr630, i8** %dst, align 8
  store i8 %conv629, i8* %308, align 1
  br label %if.end.631

if.end.631:                                       ; preds = %if.else.627, %do.end.626
  br label %do.end.632

do.end.632:                                       ; preds = %if.end.631
  br label %if.end.755

if.else.633:                                      ; preds = %if.end.569
  %309 = load i32, i32* %code, align 4
  %or634 = or i32 %309, 32896
  store i32 %or634, i32* %code, align 4
  br label %do.body.635

do.body.635:                                      ; preds = %if.else.633
  %310 = load i64, i64* %produced_chars, align 8
  %inc636 = add nsw i64 %310, 1
  store i64 %inc636, i64* %produced_chars, align 8
  %311 = load i8, i8* %multibytep, align 1
  %tobool637 = trunc i8 %311 to i1
  br i1 %tobool637, label %if.then.638, label %if.else.689

if.then.638:                                      ; preds = %do.body.635
  %312 = load i32, i32* %code, align 4
  %shr640 = lshr i32 %312, 8
  store i32 %shr640, i32* %ch639, align 4
  %313 = load i32, i32* %ch639, align 4
  %cmp641 = icmp uge i32 %313, 128
  br i1 %cmp641, label %if.then.643, label %if.end.645

if.then.643:                                      ; preds = %if.then.638
  %314 = load i32, i32* %ch639, align 4
  %add644 = add i32 %314, 4194048
  store i32 %add644, i32* %ch639, align 4
  br label %if.end.645

if.end.645:                                       ; preds = %if.then.643, %if.then.638
  br label %do.body.646

do.body.646:                                      ; preds = %if.end.645
  %315 = load i32, i32* %ch639, align 4
  %cmp647 = icmp ule i32 %315, 127
  br i1 %cmp647, label %if.then.649, label %if.else.652

if.then.649:                                      ; preds = %do.body.646
  %316 = load i32, i32* %ch639, align 4
  %conv650 = trunc i32 %316 to i8
  %317 = load i8*, i8** %dst, align 8
  %incdec.ptr651 = getelementptr inbounds i8, i8* %317, i32 1
  store i8* %incdec.ptr651, i8** %dst, align 8
  store i8 %conv650, i8* %317, align 1
  br label %if.end.687

if.else.652:                                      ; preds = %do.body.646
  %318 = load i32, i32* %ch639, align 4
  %cmp653 = icmp ule i32 %318, 2047
  br i1 %cmp653, label %if.then.655, label %if.else.664

if.then.655:                                      ; preds = %if.else.652
  %319 = load i32, i32* %ch639, align 4
  %shr656 = lshr i32 %319, 6
  %or657 = or i32 192, %shr656
  %conv658 = trunc i32 %or657 to i8
  %320 = load i8*, i8** %dst, align 8
  %incdec.ptr659 = getelementptr inbounds i8, i8* %320, i32 1
  store i8* %incdec.ptr659, i8** %dst, align 8
  store i8 %conv658, i8* %320, align 1
  %321 = load i32, i32* %ch639, align 4
  %and660 = and i32 %321, 63
  %or661 = or i32 128, %and660
  %conv662 = trunc i32 %or661 to i8
  %322 = load i8*, i8** %dst, align 8
  %incdec.ptr663 = getelementptr inbounds i8, i8* %322, i32 1
  store i8* %incdec.ptr663, i8** %dst, align 8
  store i8 %conv662, i8* %322, align 1
  br label %if.end.686

if.else.664:                                      ; preds = %if.else.652
  %323 = load i32, i32* %ch639, align 4
  %cmp665 = icmp ule i32 %323, 65535
  br i1 %cmp665, label %if.then.667, label %if.else.681

if.then.667:                                      ; preds = %if.else.664
  %324 = load i32, i32* %ch639, align 4
  %shr668 = lshr i32 %324, 12
  %or669 = or i32 224, %shr668
  %conv670 = trunc i32 %or669 to i8
  %325 = load i8*, i8** %dst, align 8
  %incdec.ptr671 = getelementptr inbounds i8, i8* %325, i32 1
  store i8* %incdec.ptr671, i8** %dst, align 8
  store i8 %conv670, i8* %325, align 1
  %326 = load i32, i32* %ch639, align 4
  %shr672 = lshr i32 %326, 6
  %and673 = and i32 %shr672, 63
  %or674 = or i32 128, %and673
  %conv675 = trunc i32 %or674 to i8
  %327 = load i8*, i8** %dst, align 8
  %incdec.ptr676 = getelementptr inbounds i8, i8* %327, i32 1
  store i8* %incdec.ptr676, i8** %dst, align 8
  store i8 %conv675, i8* %327, align 1
  %328 = load i32, i32* %ch639, align 4
  %and677 = and i32 %328, 63
  %or678 = or i32 128, %and677
  %conv679 = trunc i32 %or678 to i8
  %329 = load i8*, i8** %dst, align 8
  %incdec.ptr680 = getelementptr inbounds i8, i8* %329, i32 1
  store i8* %incdec.ptr680, i8** %dst, align 8
  store i8 %conv679, i8* %329, align 1
  br label %if.end.685

if.else.681:                                      ; preds = %if.else.664
  %330 = load i32, i32* %ch639, align 4
  %331 = load i8*, i8** %dst, align 8
  %call682 = call i32 @char_string(i32 %330, i8* %331)
  %332 = load i8*, i8** %dst, align 8
  %idx.ext683 = sext i32 %call682 to i64
  %add.ptr684 = getelementptr inbounds i8, i8* %332, i64 %idx.ext683
  store i8* %add.ptr684, i8** %dst, align 8
  br label %if.end.685

if.end.685:                                       ; preds = %if.else.681, %if.then.667
  br label %if.end.686

if.end.686:                                       ; preds = %if.end.685, %if.then.655
  br label %if.end.687

if.end.687:                                       ; preds = %if.end.686, %if.then.649
  br label %do.end.688

do.end.688:                                       ; preds = %if.end.687
  br label %if.end.693

if.else.689:                                      ; preds = %do.body.635
  %333 = load i32, i32* %code, align 4
  %shr690 = lshr i32 %333, 8
  %conv691 = trunc i32 %shr690 to i8
  %334 = load i8*, i8** %dst, align 8
  %incdec.ptr692 = getelementptr inbounds i8, i8* %334, i32 1
  store i8* %incdec.ptr692, i8** %dst, align 8
  store i8 %conv691, i8* %334, align 1
  br label %if.end.693

if.end.693:                                       ; preds = %if.else.689, %do.end.688
  br label %do.end.694

do.end.694:                                       ; preds = %if.end.693
  br label %do.body.695

do.body.695:                                      ; preds = %do.end.694
  %335 = load i64, i64* %produced_chars, align 8
  %inc696 = add nsw i64 %335, 1
  store i64 %inc696, i64* %produced_chars, align 8
  %336 = load i8, i8* %multibytep, align 1
  %tobool697 = trunc i8 %336 to i1
  br i1 %tobool697, label %if.then.698, label %if.else.749

if.then.698:                                      ; preds = %do.body.695
  %337 = load i32, i32* %code, align 4
  %and700 = and i32 %337, 255
  store i32 %and700, i32* %ch699, align 4
  %338 = load i32, i32* %ch699, align 4
  %cmp701 = icmp uge i32 %338, 128
  br i1 %cmp701, label %if.then.703, label %if.end.705

if.then.703:                                      ; preds = %if.then.698
  %339 = load i32, i32* %ch699, align 4
  %add704 = add i32 %339, 4194048
  store i32 %add704, i32* %ch699, align 4
  br label %if.end.705

if.end.705:                                       ; preds = %if.then.703, %if.then.698
  br label %do.body.706

do.body.706:                                      ; preds = %if.end.705
  %340 = load i32, i32* %ch699, align 4
  %cmp707 = icmp ule i32 %340, 127
  br i1 %cmp707, label %if.then.709, label %if.else.712

if.then.709:                                      ; preds = %do.body.706
  %341 = load i32, i32* %ch699, align 4
  %conv710 = trunc i32 %341 to i8
  %342 = load i8*, i8** %dst, align 8
  %incdec.ptr711 = getelementptr inbounds i8, i8* %342, i32 1
  store i8* %incdec.ptr711, i8** %dst, align 8
  store i8 %conv710, i8* %342, align 1
  br label %if.end.747

if.else.712:                                      ; preds = %do.body.706
  %343 = load i32, i32* %ch699, align 4
  %cmp713 = icmp ule i32 %343, 2047
  br i1 %cmp713, label %if.then.715, label %if.else.724

if.then.715:                                      ; preds = %if.else.712
  %344 = load i32, i32* %ch699, align 4
  %shr716 = lshr i32 %344, 6
  %or717 = or i32 192, %shr716
  %conv718 = trunc i32 %or717 to i8
  %345 = load i8*, i8** %dst, align 8
  %incdec.ptr719 = getelementptr inbounds i8, i8* %345, i32 1
  store i8* %incdec.ptr719, i8** %dst, align 8
  store i8 %conv718, i8* %345, align 1
  %346 = load i32, i32* %ch699, align 4
  %and720 = and i32 %346, 63
  %or721 = or i32 128, %and720
  %conv722 = trunc i32 %or721 to i8
  %347 = load i8*, i8** %dst, align 8
  %incdec.ptr723 = getelementptr inbounds i8, i8* %347, i32 1
  store i8* %incdec.ptr723, i8** %dst, align 8
  store i8 %conv722, i8* %347, align 1
  br label %if.end.746

if.else.724:                                      ; preds = %if.else.712
  %348 = load i32, i32* %ch699, align 4
  %cmp725 = icmp ule i32 %348, 65535
  br i1 %cmp725, label %if.then.727, label %if.else.741

if.then.727:                                      ; preds = %if.else.724
  %349 = load i32, i32* %ch699, align 4
  %shr728 = lshr i32 %349, 12
  %or729 = or i32 224, %shr728
  %conv730 = trunc i32 %or729 to i8
  %350 = load i8*, i8** %dst, align 8
  %incdec.ptr731 = getelementptr inbounds i8, i8* %350, i32 1
  store i8* %incdec.ptr731, i8** %dst, align 8
  store i8 %conv730, i8* %350, align 1
  %351 = load i32, i32* %ch699, align 4
  %shr732 = lshr i32 %351, 6
  %and733 = and i32 %shr732, 63
  %or734 = or i32 128, %and733
  %conv735 = trunc i32 %or734 to i8
  %352 = load i8*, i8** %dst, align 8
  %incdec.ptr736 = getelementptr inbounds i8, i8* %352, i32 1
  store i8* %incdec.ptr736, i8** %dst, align 8
  store i8 %conv735, i8* %352, align 1
  %353 = load i32, i32* %ch699, align 4
  %and737 = and i32 %353, 63
  %or738 = or i32 128, %and737
  %conv739 = trunc i32 %or738 to i8
  %354 = load i8*, i8** %dst, align 8
  %incdec.ptr740 = getelementptr inbounds i8, i8* %354, i32 1
  store i8* %incdec.ptr740, i8** %dst, align 8
  store i8 %conv739, i8* %354, align 1
  br label %if.end.745

if.else.741:                                      ; preds = %if.else.724
  %355 = load i32, i32* %ch699, align 4
  %356 = load i8*, i8** %dst, align 8
  %call742 = call i32 @char_string(i32 %355, i8* %356)
  %357 = load i8*, i8** %dst, align 8
  %idx.ext743 = sext i32 %call742 to i64
  %add.ptr744 = getelementptr inbounds i8, i8* %357, i64 %idx.ext743
  store i8* %add.ptr744, i8** %dst, align 8
  br label %if.end.745

if.end.745:                                       ; preds = %if.else.741, %if.then.727
  br label %if.end.746

if.end.746:                                       ; preds = %if.end.745, %if.then.715
  br label %if.end.747

if.end.747:                                       ; preds = %if.end.746, %if.then.709
  br label %do.end.748

do.end.748:                                       ; preds = %if.end.747
  br label %if.end.753

if.else.749:                                      ; preds = %do.body.695
  %358 = load i32, i32* %code, align 4
  %and750 = and i32 %358, 255
  %conv751 = trunc i32 %and750 to i8
  %359 = load i8*, i8** %dst, align 8
  %incdec.ptr752 = getelementptr inbounds i8, i8* %359, i32 1
  store i8* %incdec.ptr752, i8** %dst, align 8
  store i8 %conv751, i8* %359, align 1
  br label %if.end.753

if.end.753:                                       ; preds = %if.else.749, %do.end.748
  br label %do.end.754

do.end.754:                                       ; preds = %if.end.753
  br label %if.end.755

if.end.755:                                       ; preds = %do.end.754, %do.end.632
  br label %if.end.756

if.end.756:                                       ; preds = %if.end.755, %do.end.111
  br label %if.end.757

if.end.757:                                       ; preds = %if.end.756, %do.end.49
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %360 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %360, i32 0)
  %361 = load i64, i64* %produced_chars, align 8
  %362 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %362, i32 0, i32 9
  %363 = load i64, i64* %produced_char, align 8
  %add758 = add nsw i64 %363, %361
  store i64 %add758, i64* %produced_char, align 8
  %364 = load i8*, i8** %dst, align 8
  %365 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination759 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %365, i32 0, i32 22
  %366 = load i8*, i8** %destination759, align 8
  %sub.ptr.lhs.cast760 = ptrtoint i8* %364 to i64
  %sub.ptr.rhs.cast761 = ptrtoint i8* %366 to i64
  %sub.ptr.sub762 = sub i64 %sub.ptr.lhs.cast760, %sub.ptr.rhs.cast761
  %367 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced763 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %367, i32 0, i32 8
  store i64 %sub.ptr.sub762, i64* %produced763, align 8
  ret i1 false
}

declare i64 @make_uninit_string(i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

declare void @SSET(i64, i64, i8 zeroext) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_sjis(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %consumed_chars = alloca i64, align 8
  %found = alloca i32, align 4
  %c = alloca i32, align 4
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %max_first_byte_of_2_byte_code = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 17
  %3 = load i8*, i8** %source1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  %5 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %src_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i32 0, i32* %found, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %7 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %7)
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 0
  %9 = load i64, i64* %id, align 8
  %call2 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %9)
  %call3 = call i64 @AREF(i64 %call2, i64 0)
  store i64 %call3, i64* %attrs, align 8
  %10 = load i64, i64* %attrs, align 8
  %call4 = call i64 @AREF(i64 %10, i64 4)
  store i64 %call4, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %11 = load i64, i64* %charset_list, align 8
  %call5 = call i64 @Flength(i64 %11)
  %shr = ashr i64 %call5, 2
  %cmp = icmp sgt i64 %shr, 3
  %cond = select i1 %cmp, i32 252, i32 239
  store i32 %cond, i32* %max_first_byte_of_2_byte_code, align 4
  %12 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %12, i32 0, i32 0
  %13 = load i32, i32* %checked, align 4
  %or = or i32 %13, 32768
  store i32 %or, i32* %checked, align 4
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 5
  %15 = load i64, i64* %head_ascii, align 8
  %16 = load i8*, i8** %src, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %16, i64 %15
  store i8* %add.ptr6, i8** %src, align 8
  br label %while.body

while.body:                                       ; preds = %do.end, %if.then.30, %if.end.96
  %17 = load i8*, i8** %src, align 8
  store i8* %17, i8** %src_base, align 8
  br label %do.body.7

do.body.7:                                        ; preds = %while.body
  %18 = load i8*, i8** %src, align 8
  %19 = load i8*, i8** %src_end, align 8
  %cmp8 = icmp eq i8* %18, %19
  br i1 %cmp8, label %if.then, label %if.end.11

if.then:                                          ; preds = %do.body.7
  %20 = load i8*, i8** %src_base, align 8
  %21 = load i8*, i8** %src, align 8
  %cmp9 = icmp ult i8* %20, %21
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %22 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %22, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  br label %no_more_source

if.end.11:                                        ; preds = %do.body.7
  %23 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %24 = load i8, i8* %23, align 1
  %conv = zext i8 %24 to i32
  store i32 %conv, i32* %c, align 4
  %25 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %25 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.26

land.lhs.true:                                    ; preds = %if.end.11
  %26 = load i32, i32* %c, align 4
  %and = and i32 %26, 128
  %tobool13 = icmp ne i32 %and, 0
  br i1 %tobool13, label %if.then.14, label %if.end.26

if.then.14:                                       ; preds = %land.lhs.true
  %27 = load i32, i32* %c, align 4
  %and15 = and i32 %27, 254
  %cmp16 = icmp eq i32 %and15, 192
  br i1 %cmp16, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %if.then.14
  %28 = load i32, i32* %c, align 4
  %and19 = and i32 %28, 1
  %shl = shl i32 %and19, 6
  %29 = load i8*, i8** %src, align 8
  %incdec.ptr20 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr20, i8** %src, align 8
  %30 = load i8, i8* %29, align 1
  %conv21 = zext i8 %30 to i32
  %or22 = or i32 %shl, %conv21
  store i32 %or22, i32* %c, align 4
  br label %if.end.25

if.else:                                          ; preds = %if.then.14
  %31 = load i8*, i8** %src, align 8
  %incdec.ptr23 = getelementptr inbounds i8, i8* %31, i32 -1
  store i8* %incdec.ptr23, i8** %src, align 8
  %32 = load i8*, i8** %src, align 8
  %call24 = call i32 @string_char(i8* %32, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call24
  store i32 %sub, i32* %c, align 4
  %33 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %33, i32 3)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.18
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %land.lhs.true, %if.end.11
  %34 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %34, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  %35 = load i32, i32* %c, align 4
  %cmp28 = icmp slt i32 %35, 128
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %do.end.27
  br label %while.body

if.end.31:                                        ; preds = %do.end.27
  %36 = load i32, i32* %c, align 4
  %cmp32 = icmp sge i32 %36, 129
  br i1 %cmp32, label %land.lhs.true.34, label %lor.lhs.false

land.lhs.true.34:                                 ; preds = %if.end.31
  %37 = load i32, i32* %c, align 4
  %cmp35 = icmp sle i32 %37, 159
  br i1 %cmp35, label %if.then.42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.34, %if.end.31
  %38 = load i32, i32* %c, align 4
  %cmp37 = icmp sge i32 %38, 224
  br i1 %cmp37, label %land.lhs.true.39, label %if.else.87

land.lhs.true.39:                                 ; preds = %lor.lhs.false
  %39 = load i32, i32* %c, align 4
  %40 = load i32, i32* %max_first_byte_of_2_byte_code, align 4
  %cmp40 = icmp sle i32 %39, %40
  br i1 %cmp40, label %if.then.42, label %if.else.87

if.then.42:                                       ; preds = %land.lhs.true.39, %land.lhs.true.34
  br label %do.body.43

do.body.43:                                       ; preds = %if.then.42
  %41 = load i8*, i8** %src, align 8
  %42 = load i8*, i8** %src_end, align 8
  %cmp44 = icmp eq i8* %41, %42
  br i1 %cmp44, label %if.then.46, label %if.end.51

if.then.46:                                       ; preds = %do.body.43
  %43 = load i8*, i8** %src_base, align 8
  %44 = load i8*, i8** %src, align 8
  %cmp47 = icmp ult i8* %43, %44
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.then.46
  %45 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %45, i32 1)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.49, %if.then.46
  br label %no_more_source

if.end.51:                                        ; preds = %do.body.43
  %46 = load i8*, i8** %src, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %incdec.ptr52, i8** %src, align 8
  %47 = load i8, i8* %46, align 1
  %conv53 = zext i8 %47 to i32
  store i32 %conv53, i32* %c, align 4
  %48 = load i8, i8* %multibytep, align 1
  %tobool54 = trunc i8 %48 to i1
  br i1 %tobool54, label %land.lhs.true.56, label %if.end.74

land.lhs.true.56:                                 ; preds = %if.end.51
  %49 = load i32, i32* %c, align 4
  %and57 = and i32 %49, 128
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then.59, label %if.end.74

if.then.59:                                       ; preds = %land.lhs.true.56
  %50 = load i32, i32* %c, align 4
  %and60 = and i32 %50, 254
  %cmp61 = icmp eq i32 %and60, 192
  br i1 %cmp61, label %if.then.63, label %if.else.69

if.then.63:                                       ; preds = %if.then.59
  %51 = load i32, i32* %c, align 4
  %and64 = and i32 %51, 1
  %shl65 = shl i32 %and64, 6
  %52 = load i8*, i8** %src, align 8
  %incdec.ptr66 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %incdec.ptr66, i8** %src, align 8
  %53 = load i8, i8* %52, align 1
  %conv67 = zext i8 %53 to i32
  %or68 = or i32 %shl65, %conv67
  store i32 %or68, i32* %c, align 4
  br label %if.end.73

if.else.69:                                       ; preds = %if.then.59
  %54 = load i8*, i8** %src, align 8
  %incdec.ptr70 = getelementptr inbounds i8, i8* %54, i32 -1
  store i8* %incdec.ptr70, i8** %src, align 8
  %55 = load i8*, i8** %src, align 8
  %call71 = call i32 @string_char(i8* %55, i8** %src, i32* null)
  %sub72 = sub nsw i32 0, %call71
  store i32 %sub72, i32* %c, align 4
  %56 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %56, i32 3)
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.69, %if.then.63
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %land.lhs.true.56, %if.end.51
  %57 = load i64, i64* %consumed_chars, align 8
  %inc75 = add nsw i64 %57, 1
  store i64 %inc75, i64* %consumed_chars, align 8
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.74
  %58 = load i32, i32* %c, align 4
  %cmp77 = icmp slt i32 %58, 64
  br i1 %cmp77, label %if.then.85, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %do.end.76
  %59 = load i32, i32* %c, align 4
  %cmp80 = icmp eq i32 %59, 127
  br i1 %cmp80, label %if.then.85, label %lor.lhs.false.82

lor.lhs.false.82:                                 ; preds = %lor.lhs.false.79
  %60 = load i32, i32* %c, align 4
  %cmp83 = icmp sgt i32 %60, 252
  br i1 %cmp83, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %lor.lhs.false.82, %lor.lhs.false.79, %do.end.76
  br label %while.end

if.end.86:                                        ; preds = %lor.lhs.false.82
  store i32 32768, i32* %found, align 4
  br label %if.end.96

if.else.87:                                       ; preds = %land.lhs.true.39, %lor.lhs.false
  %61 = load i32, i32* %c, align 4
  %cmp88 = icmp sge i32 %61, 160
  br i1 %cmp88, label %land.lhs.true.90, label %if.else.94

land.lhs.true.90:                                 ; preds = %if.else.87
  %62 = load i32, i32* %c, align 4
  %cmp91 = icmp slt i32 %62, 224
  br i1 %cmp91, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %land.lhs.true.90
  store i32 32768, i32* %found, align 4
  br label %if.end.95

if.else.94:                                       ; preds = %land.lhs.true.90, %if.else.87
  br label %while.end

if.end.95:                                        ; preds = %if.then.93
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.end.86
  br label %while.body

while.end:                                        ; preds = %if.else.94, %if.then.85
  %63 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %63, i32 0, i32 2
  %64 = load i32, i32* %rejected, align 4
  %or97 = or i32 %64, 32768
  store i32 %or97, i32* %rejected, align 4
  store i1 false, i1* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.50, %if.end
  %65 = load i8*, i8** %src_base, align 8
  %66 = load i8*, i8** %src, align 8
  %cmp98 = icmp ult i8* %65, %66
  br i1 %cmp98, label %land.lhs.true.100, label %if.end.109

land.lhs.true.100:                                ; preds = %no_more_source
  %67 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %67, i32 0, i32 1
  %bf.load101 = load i32, i32* %mode, align 8
  %bf.lshr102 = lshr i32 %bf.load101, 14
  %bf.clear103 = and i32 %bf.lshr102, 31
  %and104 = and i32 %bf.clear103, 1
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %if.then.106, label %if.end.109

if.then.106:                                      ; preds = %land.lhs.true.100
  %68 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected107 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %68, i32 0, i32 2
  %69 = load i32, i32* %rejected107, align 4
  %or108 = or i32 %69, 32768
  store i32 %or108, i32* %rejected107, align 4
  store i1 false, i1* %retval
  br label %return

if.end.109:                                       ; preds = %land.lhs.true.100, %no_more_source
  %70 = load i32, i32* %found, align 4
  %71 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found110 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %71, i32 0, i32 1
  %72 = load i32, i32* %found110, align 4
  %or111 = or i32 %72, %70
  store i32 %or111, i32* %found110, align 4
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.109, %if.then.106, %while.end
  %73 = load i1, i1* %retval
  ret i1 %73
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_sjis(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %consumed_chars_base = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %charset_roman = alloca %struct.charset*, align 8
  %charset_kanji = alloca %struct.charset*, align 8
  %charset_kana = alloca %struct.charset*, align 8
  %charset_kanji2 = alloca %struct.charset*, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %val = alloca i64, align 8
  %char_offset = alloca i64, align 8
  %last_offset = alloca i64, align 8
  %last_id = alloca i32, align 4
  %eol_dos = alloca i8, align 1
  %byte_after_cr = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  %s1263 = alloca i32, align 4
  %s2264 = alloca i32, align 4
  %j1265 = alloca i32, align 4
  %j2266 = alloca i32, align 4
  %offset = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr7, i64 -10
  store i32* %add.ptr8, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 9
  %18 = load i64, i64* %produced_char, align 8
  store i64 %18, i64* %char_offset, align 8
  %19 = load i64, i64* %char_offset, align 8
  store i64 %19, i64* %last_offset, align 8
  %20 = load i32, i32* @charset_ascii, align 4
  store i32 %20, i32* %last_id, align 4
  %21 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %21 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %22 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %22)
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 0
  %24 = load i64, i64* %id, align 8
  %call9 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %24)
  %call10 = call i64 @AREF(i64 %call9, i64 2)
  %call11 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp = icmp eq i64 %call10, %call11
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %25 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool12 = zext i1 %25 to i8
  store i8 %frombool12, i8* %eol_dos, align 1
  store i32 -1, i32* %byte_after_cr, align 4
  br label %do.body

do.body:                                          ; preds = %land.end
  %26 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call13 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %26)
  %27 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %27, i32 0, i32 0
  %28 = load i64, i64* %id14, align 8
  %call15 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call13, i64 %28)
  %call16 = call i64 @AREF(i64 %call15, i64 0)
  store i64 %call16, i64* %attrs, align 8
  %29 = load i64, i64* %attrs, align 8
  %call17 = call i64 @AREF(i64 %29, i64 4)
  store i64 %call17, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i64, i64* %charset_list, align 8
  store i64 %30, i64* %val, align 8
  %31 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %32 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 0
  %35 = load i64, i64* %car, align 8
  %shr = ashr i64 %35, 2
  %add.ptr18 = getelementptr inbounds %struct.charset, %struct.charset* %31, i64 %shr
  store %struct.charset* %add.ptr18, %struct.charset** %charset_roman, align 8
  %36 = load i64, i64* %val, align 8
  %sub19 = sub nsw i64 %36, 3
  %37 = inttoptr i64 %sub19 to i8*
  %38 = bitcast i8* %37 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %38, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %39 = load i64, i64* %cdr, align 8
  store i64 %39, i64* %val, align 8
  %40 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %41 = load i64, i64* %val, align 8
  %sub20 = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub20 to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %car21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 0
  %44 = load i64, i64* %car21, align 8
  %shr22 = ashr i64 %44, 2
  %add.ptr23 = getelementptr inbounds %struct.charset, %struct.charset* %40, i64 %shr22
  store %struct.charset* %add.ptr23, %struct.charset** %charset_kana, align 8
  %45 = load i64, i64* %val, align 8
  %sub24 = sub nsw i64 %45, 3
  %46 = inttoptr i64 %sub24 to i8*
  %47 = bitcast i8* %46 to %struct.Lisp_Cons*
  %u25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %47, i32 0, i32 1
  %cdr26 = bitcast %union.anon.0* %u25 to i64*
  %48 = load i64, i64* %cdr26, align 8
  store i64 %48, i64* %val, align 8
  %49 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %50 = load i64, i64* %val, align 8
  %sub27 = sub nsw i64 %50, 3
  %51 = inttoptr i64 %sub27 to i8*
  %52 = bitcast i8* %51 to %struct.Lisp_Cons*
  %car28 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %52, i32 0, i32 0
  %53 = load i64, i64* %car28, align 8
  %shr29 = ashr i64 %53, 2
  %add.ptr30 = getelementptr inbounds %struct.charset, %struct.charset* %49, i64 %shr29
  store %struct.charset* %add.ptr30, %struct.charset** %charset_kanji, align 8
  %54 = load i64, i64* %val, align 8
  %sub31 = sub nsw i64 %54, 3
  %55 = inttoptr i64 %sub31 to i8*
  %56 = bitcast i8* %55 to %struct.Lisp_Cons*
  %u32 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %56, i32 0, i32 1
  %cdr33 = bitcast %union.anon.0* %u32 to i64*
  %57 = load i64, i64* %cdr33, align 8
  store i64 %57, i64* %val, align 8
  %58 = load i64, i64* %val, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp35 = icmp eq i64 %58, %call34
  br i1 %cmp35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %59 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %60 = load i64, i64* %val, align 8
  %sub36 = sub nsw i64 %60, 3
  %61 = inttoptr i64 %sub36 to i8*
  %62 = bitcast i8* %61 to %struct.Lisp_Cons*
  %car37 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %62, i32 0, i32 0
  %63 = load i64, i64* %car37, align 8
  %shr38 = ashr i64 %63, 2
  %add.ptr39 = getelementptr inbounds %struct.charset, %struct.charset* %59, i64 %shr38
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.charset* [ null, %cond.true ], [ %add.ptr39, %cond.false ]
  store %struct.charset* %cond, %struct.charset** %charset_kanji2, align 8
  br label %while.body

while.body:                                       ; preds = %cond.end, %do.end.467, %cond.end.510
  %64 = load i8*, i8** %src, align 8
  store i8* %64, i8** %src_base, align 8
  %65 = load i64, i64* %consumed_chars, align 8
  store i64 %65, i64* %consumed_chars_base, align 8
  %66 = load i32*, i32** %charbuf, align 8
  %67 = load i32*, i32** %charbuf_end, align 8
  %cmp40 = icmp uge i32* %66, %67
  br i1 %cmp40, label %if.then, label %if.end.43

if.then:                                          ; preds = %while.body
  %68 = load i32, i32* %byte_after_cr, align 4
  %cmp41 = icmp sge i32 %68, 0
  br i1 %cmp41, label %if.then.42, label %if.end

if.then.42:                                       ; preds = %if.then
  %69 = load i8*, i8** %src_base, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %69, i32 -1
  store i8* %incdec.ptr, i8** %src_base, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.42, %if.then
  br label %while.end

if.end.43:                                        ; preds = %while.body
  %70 = load i32, i32* %byte_after_cr, align 4
  %cmp44 = icmp sge i32 %70, 0
  br i1 %cmp44, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %if.end.43
  %71 = load i32, i32* %byte_after_cr, align 4
  store i32 %71, i32* %c, align 4
  store i32 -1, i32* %byte_after_cr, align 4
  br label %if.end.72

if.else:                                          ; preds = %if.end.43
  br label %do.body.46

do.body.46:                                       ; preds = %if.else
  %72 = load i8*, i8** %src, align 8
  %73 = load i8*, i8** %src_end, align 8
  %cmp47 = icmp eq i8* %72, %73
  br i1 %cmp47, label %if.then.48, label %if.end.52

if.then.48:                                       ; preds = %do.body.46
  %74 = load i8*, i8** %src_base, align 8
  %75 = load i8*, i8** %src, align 8
  %cmp49 = icmp ult i8* %74, %75
  br i1 %cmp49, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %if.then.48
  %76 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %76, i32 1)
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.50, %if.then.48
  br label %no_more_source

if.end.52:                                        ; preds = %do.body.46
  %77 = load i8*, i8** %src, align 8
  %incdec.ptr53 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %incdec.ptr53, i8** %src, align 8
  %78 = load i8, i8* %77, align 1
  %conv = zext i8 %78 to i32
  store i32 %conv, i32* %c, align 4
  %79 = load i8, i8* %multibytep, align 1
  %tobool54 = trunc i8 %79 to i1
  br i1 %tobool54, label %land.lhs.true, label %if.end.70

land.lhs.true:                                    ; preds = %if.end.52
  %80 = load i32, i32* %c, align 4
  %and = and i32 %80, 128
  %tobool56 = icmp ne i32 %and, 0
  br i1 %tobool56, label %if.then.57, label %if.end.70

if.then.57:                                       ; preds = %land.lhs.true
  %81 = load i32, i32* %c, align 4
  %and58 = and i32 %81, 254
  %cmp59 = icmp eq i32 %and58, 192
  br i1 %cmp59, label %if.then.61, label %if.else.65

if.then.61:                                       ; preds = %if.then.57
  %82 = load i32, i32* %c, align 4
  %and62 = and i32 %82, 1
  %shl = shl i32 %and62, 6
  %83 = load i8*, i8** %src, align 8
  %incdec.ptr63 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %incdec.ptr63, i8** %src, align 8
  %84 = load i8, i8* %83, align 1
  %conv64 = zext i8 %84 to i32
  %or = or i32 %shl, %conv64
  store i32 %or, i32* %c, align 4
  br label %if.end.69

if.else.65:                                       ; preds = %if.then.57
  %85 = load i8*, i8** %src, align 8
  %incdec.ptr66 = getelementptr inbounds i8, i8* %85, i32 -1
  store i8* %incdec.ptr66, i8** %src, align 8
  %86 = load i8*, i8** %src, align 8
  %call67 = call i32 @string_char(i8* %86, i8** %src, i32* null)
  %sub68 = sub nsw i32 0, %call67
  store i32 %sub68, i32* %c, align 4
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %87, i32 3)
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.65, %if.then.61
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %land.lhs.true, %if.end.52
  %88 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %88, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %if.end.72

if.end.72:                                        ; preds = %do.end.71, %if.then.45
  %89 = load i32, i32* %c, align 4
  %cmp73 = icmp slt i32 %89, 0
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.end.72
  br label %invalid_code

if.end.76:                                        ; preds = %if.end.72
  %90 = load i32, i32* %c, align 4
  %cmp77 = icmp slt i32 %90, 128
  br i1 %cmp77, label %if.then.79, label %if.else.121

if.then.79:                                       ; preds = %if.end.76
  %91 = load i8, i8* %eol_dos, align 1
  %tobool80 = trunc i8 %91 to i1
  br i1 %tobool80, label %land.lhs.true.82, label %if.end.120

land.lhs.true.82:                                 ; preds = %if.then.79
  %92 = load i32, i32* %c, align 4
  %cmp83 = icmp eq i32 %92, 13
  br i1 %cmp83, label %if.then.85, label %if.end.120

if.then.85:                                       ; preds = %land.lhs.true.82
  br label %do.body.86

do.body.86:                                       ; preds = %if.then.85
  %93 = load i8*, i8** %src, align 8
  %94 = load i8*, i8** %src_end, align 8
  %cmp87 = icmp eq i8* %93, %94
  br i1 %cmp87, label %if.then.89, label %if.end.94

if.then.89:                                       ; preds = %do.body.86
  %95 = load i8*, i8** %src_base, align 8
  %96 = load i8*, i8** %src, align 8
  %cmp90 = icmp ult i8* %95, %96
  br i1 %cmp90, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %if.then.89
  %97 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %97, i32 1)
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.92, %if.then.89
  br label %no_more_source

if.end.94:                                        ; preds = %do.body.86
  %98 = load i8*, i8** %src, align 8
  %incdec.ptr95 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %incdec.ptr95, i8** %src, align 8
  %99 = load i8, i8* %98, align 1
  %conv96 = zext i8 %99 to i32
  store i32 %conv96, i32* %byte_after_cr, align 4
  %100 = load i8, i8* %multibytep, align 1
  %tobool97 = trunc i8 %100 to i1
  br i1 %tobool97, label %land.lhs.true.99, label %if.end.117

land.lhs.true.99:                                 ; preds = %if.end.94
  %101 = load i32, i32* %byte_after_cr, align 4
  %and100 = and i32 %101, 128
  %tobool101 = icmp ne i32 %and100, 0
  br i1 %tobool101, label %if.then.102, label %if.end.117

if.then.102:                                      ; preds = %land.lhs.true.99
  %102 = load i32, i32* %byte_after_cr, align 4
  %and103 = and i32 %102, 254
  %cmp104 = icmp eq i32 %and103, 192
  br i1 %cmp104, label %if.then.106, label %if.else.112

if.then.106:                                      ; preds = %if.then.102
  %103 = load i32, i32* %byte_after_cr, align 4
  %and107 = and i32 %103, 1
  %shl108 = shl i32 %and107, 6
  %104 = load i8*, i8** %src, align 8
  %incdec.ptr109 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %incdec.ptr109, i8** %src, align 8
  %105 = load i8, i8* %104, align 1
  %conv110 = zext i8 %105 to i32
  %or111 = or i32 %shl108, %conv110
  store i32 %or111, i32* %byte_after_cr, align 4
  br label %if.end.116

if.else.112:                                      ; preds = %if.then.102
  %106 = load i8*, i8** %src, align 8
  %incdec.ptr113 = getelementptr inbounds i8, i8* %106, i32 -1
  store i8* %incdec.ptr113, i8** %src, align 8
  %107 = load i8*, i8** %src, align 8
  %call114 = call i32 @string_char(i8* %107, i8** %src, i32* null)
  %sub115 = sub nsw i32 0, %call114
  store i32 %sub115, i32* %byte_after_cr, align 4
  %108 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %108, i32 3)
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.112, %if.then.106
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %land.lhs.true.99, %if.end.94
  %109 = load i64, i64* %consumed_chars, align 8
  %inc118 = add nsw i64 %109, 1
  store i64 %inc118, i64* %consumed_chars, align 8
  br label %do.end.119

do.end.119:                                       ; preds = %if.end.117
  br label %if.end.120

if.end.120:                                       ; preds = %do.end.119, %land.lhs.true.82, %if.then.79
  %110 = load %struct.charset*, %struct.charset** %charset_roman, align 8
  store %struct.charset* %110, %struct.charset** %charset, align 8
  br label %if.end.334

if.else.121:                                      ; preds = %if.end.76
  %111 = load i32, i32* %c, align 4
  %cmp122 = icmp eq i32 %111, 128
  br i1 %cmp122, label %if.then.126, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.121
  %112 = load i32, i32* %c, align 4
  %cmp124 = icmp eq i32 %112, 160
  br i1 %cmp124, label %if.then.126, label %if.else.127

if.then.126:                                      ; preds = %lor.lhs.false, %if.else.121
  br label %invalid_code

if.else.127:                                      ; preds = %lor.lhs.false
  %113 = load i32, i32* %c, align 4
  %cmp128 = icmp sge i32 %113, 161
  br i1 %cmp128, label %land.lhs.true.130, label %if.else.135

land.lhs.true.130:                                ; preds = %if.else.127
  %114 = load i32, i32* %c, align 4
  %cmp131 = icmp sle i32 %114, 223
  br i1 %cmp131, label %if.then.133, label %if.else.135

if.then.133:                                      ; preds = %land.lhs.true.130
  %115 = load i32, i32* %c, align 4
  %and134 = and i32 %115, 127
  store i32 %and134, i32* %c, align 4
  %116 = load %struct.charset*, %struct.charset** %charset_kana, align 8
  store %struct.charset* %116, %struct.charset** %charset, align 8
  br label %if.end.332

if.else.135:                                      ; preds = %land.lhs.true.130, %if.else.127
  %117 = load i32, i32* %c, align 4
  %cmp136 = icmp sle i32 %117, 239
  br i1 %cmp136, label %if.then.138, label %if.else.210

if.then.138:                                      ; preds = %if.else.135
  br label %do.body.139

do.body.139:                                      ; preds = %if.then.138
  %118 = load i8*, i8** %src, align 8
  %119 = load i8*, i8** %src_end, align 8
  %cmp140 = icmp eq i8* %118, %119
  br i1 %cmp140, label %if.then.142, label %if.end.147

if.then.142:                                      ; preds = %do.body.139
  %120 = load i8*, i8** %src_base, align 8
  %121 = load i8*, i8** %src, align 8
  %cmp143 = icmp ult i8* %120, %121
  br i1 %cmp143, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %if.then.142
  %122 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %122, i32 1)
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.145, %if.then.142
  br label %no_more_source

if.end.147:                                       ; preds = %do.body.139
  %123 = load i8*, i8** %src, align 8
  %incdec.ptr148 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %incdec.ptr148, i8** %src, align 8
  %124 = load i8, i8* %123, align 1
  %conv149 = zext i8 %124 to i32
  store i32 %conv149, i32* %c1, align 4
  %125 = load i8, i8* %multibytep, align 1
  %tobool150 = trunc i8 %125 to i1
  br i1 %tobool150, label %land.lhs.true.152, label %if.end.170

land.lhs.true.152:                                ; preds = %if.end.147
  %126 = load i32, i32* %c1, align 4
  %and153 = and i32 %126, 128
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %if.then.155, label %if.end.170

if.then.155:                                      ; preds = %land.lhs.true.152
  %127 = load i32, i32* %c1, align 4
  %and156 = and i32 %127, 254
  %cmp157 = icmp eq i32 %and156, 192
  br i1 %cmp157, label %if.then.159, label %if.else.165

if.then.159:                                      ; preds = %if.then.155
  %128 = load i32, i32* %c1, align 4
  %and160 = and i32 %128, 1
  %shl161 = shl i32 %and160, 6
  %129 = load i8*, i8** %src, align 8
  %incdec.ptr162 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %incdec.ptr162, i8** %src, align 8
  %130 = load i8, i8* %129, align 1
  %conv163 = zext i8 %130 to i32
  %or164 = or i32 %shl161, %conv163
  store i32 %or164, i32* %c1, align 4
  br label %if.end.169

if.else.165:                                      ; preds = %if.then.155
  %131 = load i8*, i8** %src, align 8
  %incdec.ptr166 = getelementptr inbounds i8, i8* %131, i32 -1
  store i8* %incdec.ptr166, i8** %src, align 8
  %132 = load i8*, i8** %src, align 8
  %call167 = call i32 @string_char(i8* %132, i8** %src, i32* null)
  %sub168 = sub nsw i32 0, %call167
  store i32 %sub168, i32* %c1, align 4
  %133 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %133, i32 3)
  br label %if.end.169

if.end.169:                                       ; preds = %if.else.165, %if.then.159
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %land.lhs.true.152, %if.end.147
  %134 = load i64, i64* %consumed_chars, align 8
  %inc171 = add nsw i64 %134, 1
  store i64 %inc171, i64* %consumed_chars, align 8
  br label %do.end.172

do.end.172:                                       ; preds = %if.end.170
  %135 = load i32, i32* %c1, align 4
  %cmp173 = icmp slt i32 %135, 64
  br i1 %cmp173, label %if.then.181, label %lor.lhs.false.175

lor.lhs.false.175:                                ; preds = %do.end.172
  %136 = load i32, i32* %c1, align 4
  %cmp176 = icmp eq i32 %136, 127
  br i1 %cmp176, label %if.then.181, label %lor.lhs.false.178

lor.lhs.false.178:                                ; preds = %lor.lhs.false.175
  %137 = load i32, i32* %c1, align 4
  %cmp179 = icmp sgt i32 %137, 252
  br i1 %cmp179, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %lor.lhs.false.178, %lor.lhs.false.175, %do.end.172
  br label %invalid_code

if.end.182:                                       ; preds = %lor.lhs.false.178
  %138 = load i32, i32* %c, align 4
  %shl183 = shl i32 %138, 8
  %139 = load i32, i32* %c1, align 4
  %or184 = or i32 %shl183, %139
  store i32 %or184, i32* %c, align 4
  br label %do.body.185

do.body.185:                                      ; preds = %if.end.182
  %140 = load i32, i32* %c, align 4
  %shr186 = ashr i32 %140, 8
  store i32 %shr186, i32* %s1, align 4
  %141 = load i32, i32* %c, align 4
  %and187 = and i32 %141, 255
  store i32 %and187, i32* %s2, align 4
  %142 = load i32, i32* %s2, align 4
  %cmp188 = icmp sge i32 %142, 159
  br i1 %cmp188, label %if.then.190, label %if.else.196

if.then.190:                                      ; preds = %do.body.185
  %143 = load i32, i32* %s1, align 4
  %mul = mul nsw i32 %143, 2
  %144 = load i32, i32* %s1, align 4
  %cmp191 = icmp sge i32 %144, 224
  %cond193 = select i1 %cmp191, i32 352, i32 224
  %sub194 = sub nsw i32 %mul, %cond193
  store i32 %sub194, i32* %j1, align 4
  %145 = load i32, i32* %s2, align 4
  %sub195 = sub nsw i32 %145, 126
  store i32 %sub195, i32* %j2, align 4
  br label %if.end.206

if.else.196:                                      ; preds = %do.body.185
  %146 = load i32, i32* %s1, align 4
  %mul197 = mul nsw i32 %146, 2
  %147 = load i32, i32* %s1, align 4
  %cmp198 = icmp sge i32 %147, 224
  %cond200 = select i1 %cmp198, i32 353, i32 225
  %sub201 = sub nsw i32 %mul197, %cond200
  store i32 %sub201, i32* %j1, align 4
  %148 = load i32, i32* %s2, align 4
  %149 = load i32, i32* %s2, align 4
  %cmp202 = icmp sge i32 %149, 127
  %cond204 = select i1 %cmp202, i32 32, i32 31
  %sub205 = sub nsw i32 %148, %cond204
  store i32 %sub205, i32* %j2, align 4
  br label %if.end.206

if.end.206:                                       ; preds = %if.else.196, %if.then.190
  %150 = load i32, i32* %j1, align 4
  %shl207 = shl i32 %150, 8
  %151 = load i32, i32* %j2, align 4
  %or208 = or i32 %shl207, %151
  store i32 %or208, i32* %c, align 4
  br label %do.end.209

do.end.209:                                       ; preds = %if.end.206
  %152 = load %struct.charset*, %struct.charset** %charset_kanji, align 8
  store %struct.charset* %152, %struct.charset** %charset, align 8
  br label %if.end.331

if.else.210:                                      ; preds = %if.else.135
  %153 = load i32, i32* %c, align 4
  %cmp211 = icmp sle i32 %153, 252
  br i1 %cmp211, label %land.lhs.true.213, label %if.else.329

land.lhs.true.213:                                ; preds = %if.else.210
  %154 = load %struct.charset*, %struct.charset** %charset_kanji2, align 8
  %tobool214 = icmp ne %struct.charset* %154, null
  br i1 %tobool214, label %if.then.215, label %if.else.329

if.then.215:                                      ; preds = %land.lhs.true.213
  br label %do.body.216

do.body.216:                                      ; preds = %if.then.215
  %155 = load i8*, i8** %src, align 8
  %156 = load i8*, i8** %src_end, align 8
  %cmp217 = icmp eq i8* %155, %156
  br i1 %cmp217, label %if.then.219, label %if.end.224

if.then.219:                                      ; preds = %do.body.216
  %157 = load i8*, i8** %src_base, align 8
  %158 = load i8*, i8** %src, align 8
  %cmp220 = icmp ult i8* %157, %158
  br i1 %cmp220, label %if.then.222, label %if.end.223

if.then.222:                                      ; preds = %if.then.219
  %159 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %159, i32 1)
  br label %if.end.223

if.end.223:                                       ; preds = %if.then.222, %if.then.219
  br label %no_more_source

if.end.224:                                       ; preds = %do.body.216
  %160 = load i8*, i8** %src, align 8
  %incdec.ptr225 = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %incdec.ptr225, i8** %src, align 8
  %161 = load i8, i8* %160, align 1
  %conv226 = zext i8 %161 to i32
  store i32 %conv226, i32* %c1, align 4
  %162 = load i8, i8* %multibytep, align 1
  %tobool227 = trunc i8 %162 to i1
  br i1 %tobool227, label %land.lhs.true.229, label %if.end.247

land.lhs.true.229:                                ; preds = %if.end.224
  %163 = load i32, i32* %c1, align 4
  %and230 = and i32 %163, 128
  %tobool231 = icmp ne i32 %and230, 0
  br i1 %tobool231, label %if.then.232, label %if.end.247

if.then.232:                                      ; preds = %land.lhs.true.229
  %164 = load i32, i32* %c1, align 4
  %and233 = and i32 %164, 254
  %cmp234 = icmp eq i32 %and233, 192
  br i1 %cmp234, label %if.then.236, label %if.else.242

if.then.236:                                      ; preds = %if.then.232
  %165 = load i32, i32* %c1, align 4
  %and237 = and i32 %165, 1
  %shl238 = shl i32 %and237, 6
  %166 = load i8*, i8** %src, align 8
  %incdec.ptr239 = getelementptr inbounds i8, i8* %166, i32 1
  store i8* %incdec.ptr239, i8** %src, align 8
  %167 = load i8, i8* %166, align 1
  %conv240 = zext i8 %167 to i32
  %or241 = or i32 %shl238, %conv240
  store i32 %or241, i32* %c1, align 4
  br label %if.end.246

if.else.242:                                      ; preds = %if.then.232
  %168 = load i8*, i8** %src, align 8
  %incdec.ptr243 = getelementptr inbounds i8, i8* %168, i32 -1
  store i8* %incdec.ptr243, i8** %src, align 8
  %169 = load i8*, i8** %src, align 8
  %call244 = call i32 @string_char(i8* %169, i8** %src, i32* null)
  %sub245 = sub nsw i32 0, %call244
  store i32 %sub245, i32* %c1, align 4
  %170 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %170, i32 3)
  br label %if.end.246

if.end.246:                                       ; preds = %if.else.242, %if.then.236
  br label %if.end.247

if.end.247:                                       ; preds = %if.end.246, %land.lhs.true.229, %if.end.224
  %171 = load i64, i64* %consumed_chars, align 8
  %inc248 = add nsw i64 %171, 1
  store i64 %inc248, i64* %consumed_chars, align 8
  br label %do.end.249

do.end.249:                                       ; preds = %if.end.247
  %172 = load i32, i32* %c1, align 4
  %cmp250 = icmp slt i32 %172, 64
  br i1 %cmp250, label %if.then.258, label %lor.lhs.false.252

lor.lhs.false.252:                                ; preds = %do.end.249
  %173 = load i32, i32* %c1, align 4
  %cmp253 = icmp eq i32 %173, 127
  br i1 %cmp253, label %if.then.258, label %lor.lhs.false.255

lor.lhs.false.255:                                ; preds = %lor.lhs.false.252
  %174 = load i32, i32* %c1, align 4
  %cmp256 = icmp sgt i32 %174, 252
  br i1 %cmp256, label %if.then.258, label %if.end.259

if.then.258:                                      ; preds = %lor.lhs.false.255, %lor.lhs.false.252, %do.end.249
  br label %invalid_code

if.end.259:                                       ; preds = %lor.lhs.false.255
  %175 = load i32, i32* %c, align 4
  %shl260 = shl i32 %175, 8
  %176 = load i32, i32* %c1, align 4
  %or261 = or i32 %shl260, %176
  store i32 %or261, i32* %c, align 4
  br label %do.body.262

do.body.262:                                      ; preds = %if.end.259
  %177 = load i32, i32* %c, align 4
  %shr267 = ashr i32 %177, 8
  store i32 %shr267, i32* %s1263, align 4
  %178 = load i32, i32* %c, align 4
  %and268 = and i32 %178, 255
  store i32 %and268, i32* %s2264, align 4
  %179 = load i32, i32* %s2264, align 4
  %cmp269 = icmp sge i32 %179, 159
  br i1 %cmp269, label %if.then.271, label %if.else.299

if.then.271:                                      ; preds = %do.body.262
  %180 = load i32, i32* %s1263, align 4
  %cmp272 = icmp eq i32 %180, 240
  br i1 %cmp272, label %cond.true.274, label %cond.false.275

cond.true.274:                                    ; preds = %if.then.271
  br label %cond.end.296

cond.false.275:                                   ; preds = %if.then.271
  %181 = load i32, i32* %s1263, align 4
  %cmp276 = icmp eq i32 %181, 241
  br i1 %cmp276, label %cond.true.278, label %cond.false.279

cond.true.278:                                    ; preds = %cond.false.275
  br label %cond.end.294

cond.false.279:                                   ; preds = %cond.false.275
  %182 = load i32, i32* %s1263, align 4
  %cmp280 = icmp eq i32 %182, 242
  br i1 %cmp280, label %cond.true.282, label %cond.false.283

cond.true.282:                                    ; preds = %cond.false.279
  br label %cond.end.292

cond.false.283:                                   ; preds = %cond.false.279
  %183 = load i32, i32* %s1263, align 4
  %cmp284 = icmp eq i32 %183, 243
  br i1 %cmp284, label %cond.true.286, label %cond.false.287

cond.true.286:                                    ; preds = %cond.false.283
  br label %cond.end.290

cond.false.287:                                   ; preds = %cond.false.283
  %184 = load i32, i32* %s1263, align 4
  %sub288 = sub nsw i32 %184, 244
  %mul289 = mul nsw i32 %sub288, 2
  %add = add nsw i32 110, %mul289
  br label %cond.end.290

cond.end.290:                                     ; preds = %cond.false.287, %cond.true.286
  %cond291 = phi i32 [ 46, %cond.true.286 ], [ %add, %cond.false.287 ]
  br label %cond.end.292

cond.end.292:                                     ; preds = %cond.end.290, %cond.true.282
  %cond293 = phi i32 [ 44, %cond.true.282 ], [ %cond291, %cond.end.290 ]
  br label %cond.end.294

cond.end.294:                                     ; preds = %cond.end.292, %cond.true.278
  %cond295 = phi i32 [ 36, %cond.true.278 ], [ %cond293, %cond.end.292 ]
  br label %cond.end.296

cond.end.296:                                     ; preds = %cond.end.294, %cond.true.274
  %cond297 = phi i32 [ 40, %cond.true.274 ], [ %cond295, %cond.end.294 ]
  store i32 %cond297, i32* %j1265, align 4
  %185 = load i32, i32* %s2264, align 4
  %sub298 = sub nsw i32 %185, 126
  store i32 %sub298, i32* %j2266, align 4
  br label %if.end.325

if.else.299:                                      ; preds = %do.body.262
  %186 = load i32, i32* %s1263, align 4
  %cmp300 = icmp sle i32 %186, 242
  br i1 %cmp300, label %cond.true.302, label %cond.false.306

cond.true.302:                                    ; preds = %if.else.299
  %187 = load i32, i32* %s1263, align 4
  %sub303 = sub nsw i32 %187, 240
  %mul304 = mul nsw i32 %sub303, 2
  %add305 = add nsw i32 33, %mul304
  br label %cond.end.319

cond.false.306:                                   ; preds = %if.else.299
  %188 = load i32, i32* %s1263, align 4
  %cmp307 = icmp sle i32 %188, 244
  br i1 %cmp307, label %cond.true.309, label %cond.false.313

cond.true.309:                                    ; preds = %cond.false.306
  %189 = load i32, i32* %s1263, align 4
  %sub310 = sub nsw i32 %189, 243
  %mul311 = mul nsw i32 %sub310, 2
  %add312 = add nsw i32 45, %mul311
  br label %cond.end.317

cond.false.313:                                   ; preds = %cond.false.306
  %190 = load i32, i32* %s1263, align 4
  %sub314 = sub nsw i32 %190, 245
  %mul315 = mul nsw i32 %sub314, 2
  %add316 = add nsw i32 111, %mul315
  br label %cond.end.317

cond.end.317:                                     ; preds = %cond.false.313, %cond.true.309
  %cond318 = phi i32 [ %add312, %cond.true.309 ], [ %add316, %cond.false.313 ]
  br label %cond.end.319

cond.end.319:                                     ; preds = %cond.end.317, %cond.true.302
  %cond320 = phi i32 [ %add305, %cond.true.302 ], [ %cond318, %cond.end.317 ]
  store i32 %cond320, i32* %j1265, align 4
  %191 = load i32, i32* %s2264, align 4
  %192 = load i32, i32* %s2264, align 4
  %cmp321 = icmp sge i32 %192, 127
  %cond323 = select i1 %cmp321, i32 32, i32 31
  %sub324 = sub nsw i32 %191, %cond323
  store i32 %sub324, i32* %j2266, align 4
  br label %if.end.325

if.end.325:                                       ; preds = %cond.end.319, %cond.end.296
  %193 = load i32, i32* %j1265, align 4
  %shl326 = shl i32 %193, 8
  %194 = load i32, i32* %j2266, align 4
  %or327 = or i32 %shl326, %194
  store i32 %or327, i32* %c, align 4
  br label %do.end.328

do.end.328:                                       ; preds = %if.end.325
  %195 = load %struct.charset*, %struct.charset** %charset_kanji2, align 8
  store %struct.charset* %195, %struct.charset** %charset, align 8
  br label %if.end.330

if.else.329:                                      ; preds = %land.lhs.true.213, %if.else.210
  br label %invalid_code

if.end.330:                                       ; preds = %do.end.328
  br label %if.end.331

if.end.331:                                       ; preds = %if.end.330, %do.end.209
  br label %if.end.332

if.end.332:                                       ; preds = %if.end.331, %if.then.133
  br label %if.end.333

if.end.333:                                       ; preds = %if.end.332
  br label %if.end.334

if.end.334:                                       ; preds = %if.end.333, %if.end.120
  %196 = load %struct.charset*, %struct.charset** %charset, align 8
  %id335 = getelementptr inbounds %struct.charset, %struct.charset* %196, i32 0, i32 0
  %197 = load i32, i32* %id335, align 4
  %198 = load i32, i32* @charset_ascii, align 4
  %cmp336 = icmp ne i32 %197, %198
  br i1 %cmp336, label %land.lhs.true.338, label %if.end.360

land.lhs.true.338:                                ; preds = %if.end.334
  %199 = load i32, i32* %last_id, align 4
  %200 = load %struct.charset*, %struct.charset** %charset, align 8
  %id339 = getelementptr inbounds %struct.charset, %struct.charset* %200, i32 0, i32 0
  %201 = load i32, i32* %id339, align 4
  %cmp340 = icmp ne i32 %199, %201
  br i1 %cmp340, label %if.then.342, label %if.end.360

if.then.342:                                      ; preds = %land.lhs.true.338
  %202 = load i32, i32* %last_id, align 4
  %203 = load i32, i32* @charset_ascii, align 4
  %cmp343 = icmp ne i32 %202, %203
  br i1 %cmp343, label %if.then.345, label %if.end.358

if.then.345:                                      ; preds = %if.then.342
  br label %do.body.346

do.body.346:                                      ; preds = %if.then.345
  br label %do.body.347

do.body.347:                                      ; preds = %do.body.346
  %204 = load i32*, i32** %charbuf, align 8
  %incdec.ptr348 = getelementptr inbounds i32, i32* %204, i32 1
  store i32* %incdec.ptr348, i32** %charbuf, align 8
  store i32 -4, i32* %204, align 4
  %205 = load i32*, i32** %charbuf, align 8
  %incdec.ptr349 = getelementptr inbounds i32, i32* %205, i32 1
  store i32* %incdec.ptr349, i32** %charbuf, align 8
  store i32 3, i32* %205, align 4
  %206 = load i64, i64* %char_offset, align 8
  %207 = load i64, i64* %last_offset, align 8
  %sub350 = sub nsw i64 %206, %207
  %conv351 = trunc i64 %sub350 to i32
  %208 = load i32*, i32** %charbuf, align 8
  %incdec.ptr352 = getelementptr inbounds i32, i32* %208, i32 1
  store i32* %incdec.ptr352, i32** %charbuf, align 8
  store i32 %conv351, i32* %208, align 4
  %209 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %209, i32 0, i32 1
  %bf.load353 = load i32, i32* %annotated, align 8
  %bf.clear354 = and i32 %bf.load353, -8388609
  %bf.set = or i32 %bf.clear354, 8388608
  store i32 %bf.set, i32* %annotated, align 8
  br label %do.end.355

do.end.355:                                       ; preds = %do.body.347
  %210 = load i32, i32* %last_id, align 4
  %211 = load i32*, i32** %charbuf, align 8
  %incdec.ptr356 = getelementptr inbounds i32, i32* %211, i32 1
  store i32* %incdec.ptr356, i32** %charbuf, align 8
  store i32 %210, i32* %211, align 4
  br label %do.end.357

do.end.357:                                       ; preds = %do.end.355
  br label %if.end.358

if.end.358:                                       ; preds = %do.end.357, %if.then.342
  %212 = load %struct.charset*, %struct.charset** %charset, align 8
  %id359 = getelementptr inbounds %struct.charset, %struct.charset* %212, i32 0, i32 0
  %213 = load i32, i32* %id359, align 4
  store i32 %213, i32* %last_id, align 4
  %214 = load i64, i64* %char_offset, align 8
  store i64 %214, i64* %last_offset, align 8
  br label %if.end.360

if.end.360:                                       ; preds = %if.end.358, %land.lhs.true.338, %if.end.334
  br label %do.body.361

do.body.361:                                      ; preds = %if.end.360
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.362, label %cond.false.366

cond.true.362:                                    ; preds = %do.body.361
  %215 = load i32, i32* %c, align 4
  %add363 = add i32 %215, 0
  %cmp364 = icmp ult i32 %add363, 128
  br i1 %cmp364, label %land.lhs.true.371, label %cond.false.379

cond.false.366:                                   ; preds = %do.body.361
  %216 = load i32, i32* %c, align 4
  %conv367 = sext i32 %216 to i64
  %add368 = add i64 %conv367, 0
  %cmp369 = icmp ult i64 %add368, 128
  br i1 %cmp369, label %land.lhs.true.371, label %cond.false.379

land.lhs.true.371:                                ; preds = %cond.false.366, %cond.true.362
  %217 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %217, i32 0, i32 5
  %bf.load372 = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr373 = lshr i8 %bf.load372, 2
  %bf.clear374 = and i8 %bf.lshr373, 1
  %bf.cast375 = trunc i8 %bf.clear374 to i1
  br i1 %bf.cast375, label %cond.true.377, label %cond.false.379

cond.true.377:                                    ; preds = %land.lhs.true.371
  %218 = load i32, i32* %c, align 4
  %conv378 = sext i32 %218 to i64
  br label %cond.end.454

cond.false.379:                                   ; preds = %land.lhs.true.371, %cond.false.366, %cond.true.362
  %219 = load i32, i32* %c, align 4
  %220 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %220, i32 0, i32 10
  %221 = load i32, i32* %min_code, align 4
  %cmp380 = icmp ult i32 %219, %221
  br i1 %cmp380, label %cond.true.385, label %lor.lhs.false.382

lor.lhs.false.382:                                ; preds = %cond.false.379
  %222 = load i32, i32* %c, align 4
  %223 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_code = getelementptr inbounds %struct.charset, %struct.charset* %223, i32 0, i32 11
  %224 = load i32, i32* %max_code, align 4
  %cmp383 = icmp ugt i32 %222, %224
  br i1 %cmp383, label %cond.true.385, label %cond.false.386

cond.true.385:                                    ; preds = %lor.lhs.false.382, %cond.false.379
  br label %cond.end.452

cond.false.386:                                   ; preds = %lor.lhs.false.382
  %225 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %225, i32 0, i32 5
  %bf.load387 = load i8, i8* %unified_p, align 8
  %bf.lshr388 = lshr i8 %bf.load387, 5
  %bf.clear389 = and i8 %bf.lshr388, 1
  %bf.cast390 = trunc i8 %bf.clear389 to i1
  br i1 %bf.cast390, label %cond.true.392, label %cond.false.395

cond.true.392:                                    ; preds = %cond.false.386
  %226 = load %struct.charset*, %struct.charset** %charset, align 8
  %227 = load i32, i32* %c, align 4
  %call393 = call i32 @decode_char(%struct.charset* %226, i32 %227)
  %conv394 = sext i32 %call393 to i64
  br label %cond.end.450

cond.false.395:                                   ; preds = %cond.false.386
  %228 = load %struct.charset*, %struct.charset** %charset, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %228, i32 0, i32 9
  %229 = load i32, i32* %method, align 4
  %cmp396 = icmp eq i32 %229, 0
  br i1 %cmp396, label %cond.true.398, label %cond.false.412

cond.true.398:                                    ; preds = %cond.false.395
  %230 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %230, i32 0, i32 5
  %bf.load399 = load i8, i8* %code_linear_p, align 8
  %bf.clear400 = and i8 %bf.load399, 1
  %bf.cast401 = trunc i8 %bf.clear400 to i1
  br i1 %bf.cast401, label %cond.true.403, label %cond.false.407

cond.true.403:                                    ; preds = %cond.true.398
  %231 = load i32, i32* %c, align 4
  %232 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code404 = getelementptr inbounds %struct.charset, %struct.charset* %232, i32 0, i32 10
  %233 = load i32, i32* %min_code404, align 4
  %sub405 = sub i32 %231, %233
  %234 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %234, i32 0, i32 17
  %235 = load i32, i32* %code_offset, align 4
  %add406 = add nsw i32 %sub405, %235
  br label %cond.end.409

cond.false.407:                                   ; preds = %cond.true.398
  %236 = load %struct.charset*, %struct.charset** %charset, align 8
  %237 = load i32, i32* %c, align 4
  %call408 = call i32 @decode_char(%struct.charset* %236, i32 %237)
  br label %cond.end.409

cond.end.409:                                     ; preds = %cond.false.407, %cond.true.403
  %cond410 = phi i32 [ %add406, %cond.true.403 ], [ %call408, %cond.false.407 ]
  %conv411 = sext i32 %cond410 to i64
  br label %cond.end.448

cond.false.412:                                   ; preds = %cond.false.395
  %238 = load %struct.charset*, %struct.charset** %charset, align 8
  %method413 = getelementptr inbounds %struct.charset, %struct.charset* %238, i32 0, i32 9
  %239 = load i32, i32* %method413, align 4
  %cmp414 = icmp eq i32 %239, 1
  br i1 %cmp414, label %cond.true.416, label %cond.false.443

cond.true.416:                                    ; preds = %cond.false.412
  %240 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p417 = getelementptr inbounds %struct.charset, %struct.charset* %240, i32 0, i32 5
  %bf.load418 = load i8, i8* %code_linear_p417, align 8
  %bf.clear419 = and i8 %bf.load418, 1
  %bf.cast420 = trunc i8 %bf.clear419 to i1
  br i1 %bf.cast420, label %land.lhs.true.422, label %cond.false.438

land.lhs.true.422:                                ; preds = %cond.true.416
  %241 = load i64, i64* @Vcharset_hash_table, align 8
  %call423 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %241)
  %242 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %242, i32 0, i32 1
  %243 = load i64, i64* %hash_index, align 8
  %call424 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call423, i64 %243)
  %call425 = call i64 @AREF(i64 %call424, i64 4)
  %call426 = call zeroext i1 @VECTORP(i64 %call425)
  br i1 %call426, label %cond.true.428, label %cond.false.438

cond.true.428:                                    ; preds = %land.lhs.true.422
  %244 = load i64, i64* @Vcharset_hash_table, align 8
  %call429 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %244)
  %245 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index430 = getelementptr inbounds %struct.charset, %struct.charset* %245, i32 0, i32 1
  %246 = load i64, i64* %hash_index430, align 8
  %call431 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call429, i64 %246)
  %call432 = call i64 @AREF(i64 %call431, i64 4)
  %247 = load i32, i32* %c, align 4
  %248 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code433 = getelementptr inbounds %struct.charset, %struct.charset* %248, i32 0, i32 10
  %249 = load i32, i32* %min_code433, align 4
  %sub434 = sub i32 %247, %249
  %conv435 = zext i32 %sub434 to i64
  %call436 = call i64 @AREF(i64 %call432, i64 %conv435)
  %shr437 = ashr i64 %call436, 2
  br label %cond.end.441

cond.false.438:                                   ; preds = %land.lhs.true.422, %cond.true.416
  %250 = load %struct.charset*, %struct.charset** %charset, align 8
  %251 = load i32, i32* %c, align 4
  %call439 = call i32 @decode_char(%struct.charset* %250, i32 %251)
  %conv440 = sext i32 %call439 to i64
  br label %cond.end.441

cond.end.441:                                     ; preds = %cond.false.438, %cond.true.428
  %cond442 = phi i64 [ %shr437, %cond.true.428 ], [ %conv440, %cond.false.438 ]
  br label %cond.end.446

cond.false.443:                                   ; preds = %cond.false.412
  %252 = load %struct.charset*, %struct.charset** %charset, align 8
  %253 = load i32, i32* %c, align 4
  %call444 = call i32 @decode_char(%struct.charset* %252, i32 %253)
  %conv445 = sext i32 %call444 to i64
  br label %cond.end.446

cond.end.446:                                     ; preds = %cond.false.443, %cond.end.441
  %cond447 = phi i64 [ %cond442, %cond.end.441 ], [ %conv445, %cond.false.443 ]
  br label %cond.end.448

cond.end.448:                                     ; preds = %cond.end.446, %cond.end.409
  %cond449 = phi i64 [ %conv411, %cond.end.409 ], [ %cond447, %cond.end.446 ]
  br label %cond.end.450

cond.end.450:                                     ; preds = %cond.end.448, %cond.true.392
  %cond451 = phi i64 [ %conv394, %cond.true.392 ], [ %cond449, %cond.end.448 ]
  br label %cond.end.452

cond.end.452:                                     ; preds = %cond.end.450, %cond.true.385
  %cond453 = phi i64 [ -1, %cond.true.385 ], [ %cond451, %cond.end.450 ]
  br label %cond.end.454

cond.end.454:                                     ; preds = %cond.end.452, %cond.true.377
  %cond455 = phi i64 [ %conv378, %cond.true.377 ], [ %cond453, %cond.end.452 ]
  %conv456 = trunc i64 %cond455 to i32
  store i32 %conv456, i32* %c, align 4
  %254 = load i8, i8* @charset_map_loaded, align 1
  %tobool457 = trunc i8 %254 to i1
  br i1 %tobool457, label %land.lhs.true.459, label %if.end.466

land.lhs.true.459:                                ; preds = %cond.end.454
  %255 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call460 = call i64 @coding_change_source(%struct.coding_system* %255)
  store i64 %call460, i64* %offset, align 8
  %tobool461 = icmp ne i64 %call460, 0
  br i1 %tobool461, label %if.then.462, label %if.end.466

if.then.462:                                      ; preds = %land.lhs.true.459
  %256 = load i64, i64* %offset, align 8
  %257 = load i8*, i8** %src, align 8
  %add.ptr463 = getelementptr inbounds i8, i8* %257, i64 %256
  store i8* %add.ptr463, i8** %src, align 8
  %258 = load i64, i64* %offset, align 8
  %259 = load i8*, i8** %src_base, align 8
  %add.ptr464 = getelementptr inbounds i8, i8* %259, i64 %258
  store i8* %add.ptr464, i8** %src_base, align 8
  %260 = load i64, i64* %offset, align 8
  %261 = load i8*, i8** %src_end, align 8
  %add.ptr465 = getelementptr inbounds i8, i8* %261, i64 %260
  store i8* %add.ptr465, i8** %src_end, align 8
  br label %if.end.466

if.end.466:                                       ; preds = %if.then.462, %land.lhs.true.459, %cond.end.454
  br label %do.end.467

do.end.467:                                       ; preds = %if.end.466
  %262 = load i32, i32* %c, align 4
  %263 = load i32*, i32** %charbuf, align 8
  %incdec.ptr468 = getelementptr inbounds i32, i32* %263, i32 1
  store i32* %incdec.ptr468, i32** %charbuf, align 8
  store i32 %262, i32* %263, align 4
  %264 = load i64, i64* %char_offset, align 8
  %inc469 = add nsw i64 %264, 1
  store i64 %inc469, i64* %char_offset, align 8
  br label %while.body

invalid_code:                                     ; preds = %if.else.329, %if.then.258, %if.then.181, %if.then.126, %if.then.75
  %265 = load i8*, i8** %src_base, align 8
  store i8* %265, i8** %src, align 8
  %266 = load i64, i64* %consumed_chars_base, align 8
  store i64 %266, i64* %consumed_chars, align 8
  br label %do.body.470

do.body.470:                                      ; preds = %invalid_code
  %267 = load i8*, i8** %src, align 8
  %268 = load i8*, i8** %src_end, align 8
  %cmp471 = icmp eq i8* %267, %268
  br i1 %cmp471, label %if.then.473, label %if.end.478

if.then.473:                                      ; preds = %do.body.470
  %269 = load i8*, i8** %src_base, align 8
  %270 = load i8*, i8** %src, align 8
  %cmp474 = icmp ult i8* %269, %270
  br i1 %cmp474, label %if.then.476, label %if.end.477

if.then.476:                                      ; preds = %if.then.473
  %271 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %271, i32 1)
  br label %if.end.477

if.end.477:                                       ; preds = %if.then.476, %if.then.473
  br label %no_more_source

if.end.478:                                       ; preds = %do.body.470
  %272 = load i8*, i8** %src, align 8
  %incdec.ptr479 = getelementptr inbounds i8, i8* %272, i32 1
  store i8* %incdec.ptr479, i8** %src, align 8
  %273 = load i8, i8* %272, align 1
  %conv480 = zext i8 %273 to i32
  store i32 %conv480, i32* %c, align 4
  %274 = load i8, i8* %multibytep, align 1
  %tobool481 = trunc i8 %274 to i1
  br i1 %tobool481, label %land.lhs.true.483, label %if.end.501

land.lhs.true.483:                                ; preds = %if.end.478
  %275 = load i32, i32* %c, align 4
  %and484 = and i32 %275, 128
  %tobool485 = icmp ne i32 %and484, 0
  br i1 %tobool485, label %if.then.486, label %if.end.501

if.then.486:                                      ; preds = %land.lhs.true.483
  %276 = load i32, i32* %c, align 4
  %and487 = and i32 %276, 254
  %cmp488 = icmp eq i32 %and487, 192
  br i1 %cmp488, label %if.then.490, label %if.else.496

if.then.490:                                      ; preds = %if.then.486
  %277 = load i32, i32* %c, align 4
  %and491 = and i32 %277, 1
  %shl492 = shl i32 %and491, 6
  %278 = load i8*, i8** %src, align 8
  %incdec.ptr493 = getelementptr inbounds i8, i8* %278, i32 1
  store i8* %incdec.ptr493, i8** %src, align 8
  %279 = load i8, i8* %278, align 1
  %conv494 = zext i8 %279 to i32
  %or495 = or i32 %shl492, %conv494
  store i32 %or495, i32* %c, align 4
  br label %if.end.500

if.else.496:                                      ; preds = %if.then.486
  %280 = load i8*, i8** %src, align 8
  %incdec.ptr497 = getelementptr inbounds i8, i8* %280, i32 -1
  store i8* %incdec.ptr497, i8** %src, align 8
  %281 = load i8*, i8** %src, align 8
  %call498 = call i32 @string_char(i8* %281, i8** %src, i32* null)
  %sub499 = sub nsw i32 0, %call498
  store i32 %sub499, i32* %c, align 4
  %282 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %282, i32 3)
  br label %if.end.500

if.end.500:                                       ; preds = %if.else.496, %if.then.490
  br label %if.end.501

if.end.501:                                       ; preds = %if.end.500, %land.lhs.true.483, %if.end.478
  %283 = load i64, i64* %consumed_chars, align 8
  %inc502 = add nsw i64 %283, 1
  store i64 %inc502, i64* %consumed_chars, align 8
  br label %do.end.503

do.end.503:                                       ; preds = %if.end.501
  %284 = load i32, i32* %c, align 4
  %cmp504 = icmp slt i32 %284, 0
  br i1 %cmp504, label %cond.true.506, label %cond.false.508

cond.true.506:                                    ; preds = %do.end.503
  %285 = load i32, i32* %c, align 4
  %sub507 = sub nsw i32 0, %285
  br label %cond.end.510

cond.false.508:                                   ; preds = %do.end.503
  %286 = load i32, i32* %c, align 4
  %add509 = add nsw i32 %286, 4194048
  br label %cond.end.510

cond.end.510:                                     ; preds = %cond.false.508, %cond.true.506
  %cond511 = phi i32 [ %sub507, %cond.true.506 ], [ %add509, %cond.false.508 ]
  %287 = load i32*, i32** %charbuf, align 8
  %incdec.ptr512 = getelementptr inbounds i32, i32* %287, i32 1
  store i32* %incdec.ptr512, i32** %charbuf, align 8
  store i32 %cond511, i32* %287, align 4
  %288 = load i64, i64* %char_offset, align 8
  %inc513 = add nsw i64 %288, 1
  store i64 %inc513, i64* %char_offset, align 8
  br label %while.body

while.end:                                        ; preds = %if.end
  br label %no_more_source

no_more_source:                                   ; preds = %while.end, %if.end.477, %if.end.223, %if.end.146, %if.end.93, %if.end.51
  %289 = load i32, i32* %last_id, align 4
  %290 = load i32, i32* @charset_ascii, align 4
  %cmp514 = icmp ne i32 %289, %290
  br i1 %cmp514, label %if.then.516, label %if.end.531

if.then.516:                                      ; preds = %no_more_source
  br label %do.body.517

do.body.517:                                      ; preds = %if.then.516
  br label %do.body.518

do.body.518:                                      ; preds = %do.body.517
  %291 = load i32*, i32** %charbuf, align 8
  %incdec.ptr519 = getelementptr inbounds i32, i32* %291, i32 1
  store i32* %incdec.ptr519, i32** %charbuf, align 8
  store i32 -4, i32* %291, align 4
  %292 = load i32*, i32** %charbuf, align 8
  %incdec.ptr520 = getelementptr inbounds i32, i32* %292, i32 1
  store i32* %incdec.ptr520, i32** %charbuf, align 8
  store i32 3, i32* %292, align 4
  %293 = load i64, i64* %char_offset, align 8
  %294 = load i64, i64* %last_offset, align 8
  %sub521 = sub nsw i64 %293, %294
  %conv522 = trunc i64 %sub521 to i32
  %295 = load i32*, i32** %charbuf, align 8
  %incdec.ptr523 = getelementptr inbounds i32, i32* %295, i32 1
  store i32* %incdec.ptr523, i32** %charbuf, align 8
  store i32 %conv522, i32* %295, align 4
  %296 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated524 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %296, i32 0, i32 1
  %bf.load525 = load i32, i32* %annotated524, align 8
  %bf.clear526 = and i32 %bf.load525, -8388609
  %bf.set527 = or i32 %bf.clear526, 8388608
  store i32 %bf.set527, i32* %annotated524, align 8
  br label %do.end.528

do.end.528:                                       ; preds = %do.body.518
  %297 = load i32, i32* %last_id, align 4
  %298 = load i32*, i32** %charbuf, align 8
  %incdec.ptr529 = getelementptr inbounds i32, i32* %298, i32 1
  store i32* %incdec.ptr529, i32** %charbuf, align 8
  store i32 %297, i32* %298, align 4
  br label %do.end.530

do.end.530:                                       ; preds = %do.end.528
  br label %if.end.531

if.end.531:                                       ; preds = %do.end.530, %no_more_source
  %299 = load i64, i64* %consumed_chars_base, align 8
  %300 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %300, i32 0, i32 11
  %301 = load i64, i64* %consumed_char, align 8
  %add532 = add nsw i64 %301, %299
  store i64 %add532, i64* %consumed_char, align 8
  %302 = load i8*, i8** %src_base, align 8
  %303 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source533 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %303, i32 0, i32 17
  %304 = load i8*, i8** %source533, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %302 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %304 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %305 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed534 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %305, i32 0, i32 10
  store i64 %sub.ptr.sub, i64* %consumed534, align 8
  %306 = load i32*, i32** %charbuf, align 8
  %307 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf535 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %307, i32 0, i32 23
  %308 = load i32*, i32** %charbuf535, align 8
  %sub.ptr.lhs.cast536 = ptrtoint i32* %306 to i64
  %sub.ptr.rhs.cast537 = ptrtoint i32* %308 to i64
  %sub.ptr.sub538 = sub i64 %sub.ptr.lhs.cast536, %sub.ptr.rhs.cast537
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub538, 4
  %conv539 = trunc i64 %sub.ptr.div to i32
  %309 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used540 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %309, i32 0, i32 25
  store i32 %conv539, i32* %charbuf_used540, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_sjis(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %safe_room = alloca i32, align 4
  %produced_chars = alloca i64, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %val = alloca i64, align 8
  %ascii_compatible = alloca i8, align 1
  %charset_kanji = alloca %struct.charset*, align 8
  %charset_kana = alloca %struct.charset*, align 8
  %charset_kanji2 = alloca %struct.charset*, align 8
  %c = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %code = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %offset = alloca i64, align 8
  %offset145 = alloca i64, align 8
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  %ch196 = alloca i32, align 4
  %ch308 = alloca i32, align 4
  %c1370 = alloca i32, align 4
  %c2371 = alloca i32, align 4
  %s1394 = alloca i32, align 4
  %s2395 = alloca i32, align 4
  %j1396 = alloca i32, align 4
  %j2397 = alloca i32, align 4
  %ch467 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load i32*, i32** %charbuf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 25
  %5 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 8
  %9 = load i64, i64* %produced, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %dst, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 22
  %11 = load i8*, i8** %destination3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 20
  %13 = load i64, i64* %dst_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %dst_end, align 8
  store i32 4, i32* %safe_room, align 4
  store i64 0, i64* %produced_chars, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id, align 8
  %call5 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %16)
  %call6 = call i64 @AREF(i64 %call5, i64 0)
  store i64 %call6, i64* %attrs, align 8
  %17 = load i64, i64* %attrs, align 8
  %call7 = call i64 @AREF(i64 %17, i64 4)
  store i64 %call7, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %18 = load i64, i64* %charset_list, align 8
  %sub = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %21 = load i64, i64* %cdr, align 8
  store i64 %21, i64* %val, align 8
  %22 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %23 = load i64, i64* %val, align 8
  %sub8 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub8 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 0
  %26 = load i64, i64* %car, align 8
  %shr = ashr i64 %26, 2
  %add.ptr9 = getelementptr inbounds %struct.charset, %struct.charset* %22, i64 %shr
  store %struct.charset* %add.ptr9, %struct.charset** %charset_kana, align 8
  %27 = load i64, i64* %val, align 8
  %sub10 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub10 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %u11 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 1
  %cdr12 = bitcast %union.anon.0* %u11 to i64*
  %30 = load i64, i64* %cdr12, align 8
  store i64 %30, i64* %val, align 8
  %31 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %32 = load i64, i64* %val, align 8
  %sub13 = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub13 to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %car14 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 0
  %35 = load i64, i64* %car14, align 8
  %shr15 = ashr i64 %35, 2
  %add.ptr16 = getelementptr inbounds %struct.charset, %struct.charset* %31, i64 %shr15
  store %struct.charset* %add.ptr16, %struct.charset** %charset_kanji, align 8
  %36 = load i64, i64* %val, align 8
  %sub17 = sub nsw i64 %36, 3
  %37 = inttoptr i64 %sub17 to i8*
  %38 = bitcast i8* %37 to %struct.Lisp_Cons*
  %u18 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %38, i32 0, i32 1
  %cdr19 = bitcast %union.anon.0* %u18 to i64*
  %39 = load i64, i64* %cdr19, align 8
  store i64 %39, i64* %val, align 8
  %40 = load i64, i64* %val, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %40, %call20
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %41 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %42 = load i64, i64* %val, align 8
  %sub21 = sub nsw i64 %42, 3
  %43 = inttoptr i64 %sub21 to i8*
  %44 = bitcast i8* %43 to %struct.Lisp_Cons*
  %car22 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %44, i32 0, i32 0
  %45 = load i64, i64* %car22, align 8
  %shr23 = ashr i64 %45, 2
  %add.ptr24 = getelementptr inbounds %struct.charset, %struct.charset* %41, i64 %shr23
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.charset* [ null, %cond.true ], [ %add.ptr24, %cond.false ]
  store %struct.charset* %cond, %struct.charset** %charset_kanji2, align 8
  %46 = load i64, i64* %attrs, align 8
  %call25 = call i64 @AREF(i64 %46, i64 5)
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp27 = icmp eq i64 %call25, %call26
  %lnot = xor i1 %cmp27, true
  %frombool28 = zext i1 %lnot to i8
  store i8 %frombool28, i8* %ascii_compatible, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end.590, %cond.end
  %47 = load i32*, i32** %charbuf, align 8
  %48 = load i32*, i32** %charbuf_end, align 8
  %cmp29 = icmp ult i32* %47, %48
  br i1 %cmp29, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.30

do.body.30:                                       ; preds = %while.body
  %49 = load i8*, i8** %dst, align 8
  %50 = load i32, i32* %safe_room, align 4
  %idx.ext31 = sext i32 %50 to i64
  %add.ptr32 = getelementptr inbounds i8, i8* %49, i64 %idx.ext31
  %51 = load i8*, i8** %dst_end, align 8
  %cmp33 = icmp uge i8* %add.ptr32, %51
  br i1 %cmp33, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.30
  %52 = load i32*, i32** %charbuf_end, align 8
  %53 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %52 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %53 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %54 = load i32, i32* %safe_room, align 4
  %conv = sext i32 %54 to i64
  %add = add nsw i64 %sub.ptr.div, %conv
  store i64 %add, i64* %more_bytes, align 8
  %55 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %56 = load i64, i64* %more_bytes, align 8
  %57 = load i8*, i8** %dst, align 8
  %call34 = call i8* @alloc_destination(%struct.coding_system* %55, i64 %56, i8* %57)
  store i8* %call34, i8** %dst, align 8
  %58 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination35 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %58, i32 0, i32 22
  %59 = load i8*, i8** %destination35, align 8
  %60 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes36 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %60, i32 0, i32 20
  %61 = load i64, i64* %dst_bytes36, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %59, i64 %61
  store i8* %add.ptr37, i8** %dst_end, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body.30
  br label %do.end.38

do.end.38:                                        ; preds = %if.end
  %62 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %62, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %c, align 4
  br i1 true, label %cond.true.39, label %cond.false.43

cond.true.39:                                     ; preds = %do.end.38
  %64 = load i32, i32* %c, align 4
  %add40 = add i32 %64, 0
  %cmp41 = icmp ult i32 %add40, 128
  br i1 %cmp41, label %land.lhs.true, label %if.else

cond.false.43:                                    ; preds = %do.end.38
  %65 = load i32, i32* %c, align 4
  %conv44 = sext i32 %65 to i64
  %add45 = add i64 %conv44, 0
  %cmp46 = icmp ult i64 %add45, 128
  br i1 %cmp46, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false.43, %cond.true.39
  %66 = load i8, i8* %ascii_compatible, align 1
  %tobool = trunc i8 %66 to i1
  br i1 %tobool, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %land.lhs.true
  br label %do.body.50

do.body.50:                                       ; preds = %if.then.49
  %67 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %67, 1
  store i64 %inc, i64* %produced_chars, align 8
  %68 = load i32, i32* %c, align 4
  %conv51 = trunc i32 %68 to i8
  %69 = load i8*, i8** %dst, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr52, i8** %dst, align 8
  store i8 %conv51, i8* %69, align 1
  br label %do.end.53

do.end.53:                                        ; preds = %do.body.50
  br label %if.end.590

if.else:                                          ; preds = %land.lhs.true, %cond.false.43, %cond.true.39
  %70 = load i32, i32* %c, align 4
  %cmp54 = icmp sgt i32 %70, 4194175
  br i1 %cmp54, label %if.then.56, label %if.else.120

if.then.56:                                       ; preds = %if.else
  %71 = load i32, i32* %c, align 4
  %cmp57 = icmp sgt i32 %71, 4194175
  br i1 %cmp57, label %cond.true.59, label %cond.false.61

cond.true.59:                                     ; preds = %if.then.56
  %72 = load i32, i32* %c, align 4
  %sub60 = sub nsw i32 %72, 4194048
  br label %cond.end.62

cond.false.61:                                    ; preds = %if.then.56
  %73 = load i32, i32* %c, align 4
  %and = and i32 %73, 255
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.61, %cond.true.59
  %cond63 = phi i32 [ %sub60, %cond.true.59 ], [ %and, %cond.false.61 ]
  store i32 %cond63, i32* %c, align 4
  br label %do.body.64

do.body.64:                                       ; preds = %cond.end.62
  %74 = load i64, i64* %produced_chars, align 8
  %inc65 = add nsw i64 %74, 1
  store i64 %inc65, i64* %produced_chars, align 8
  %75 = load i8, i8* %multibytep, align 1
  %tobool66 = trunc i8 %75 to i1
  br i1 %tobool66, label %if.then.67, label %if.else.115

if.then.67:                                       ; preds = %do.body.64
  %76 = load i32, i32* %c, align 4
  store i32 %76, i32* %ch, align 4
  %77 = load i32, i32* %ch, align 4
  %cmp68 = icmp uge i32 %77, 128
  br i1 %cmp68, label %if.then.70, label %if.end.72

if.then.70:                                       ; preds = %if.then.67
  %78 = load i32, i32* %ch, align 4
  %add71 = add i32 %78, 4194048
  store i32 %add71, i32* %ch, align 4
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.70, %if.then.67
  br label %do.body.73

do.body.73:                                       ; preds = %if.end.72
  %79 = load i32, i32* %ch, align 4
  %cmp74 = icmp ule i32 %79, 127
  br i1 %cmp74, label %if.then.76, label %if.else.79

if.then.76:                                       ; preds = %do.body.73
  %80 = load i32, i32* %ch, align 4
  %conv77 = trunc i32 %80 to i8
  %81 = load i8*, i8** %dst, align 8
  %incdec.ptr78 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr78, i8** %dst, align 8
  store i8 %conv77, i8* %81, align 1
  br label %if.end.113

if.else.79:                                       ; preds = %do.body.73
  %82 = load i32, i32* %ch, align 4
  %cmp80 = icmp ule i32 %82, 2047
  br i1 %cmp80, label %if.then.82, label %if.else.90

if.then.82:                                       ; preds = %if.else.79
  %83 = load i32, i32* %ch, align 4
  %shr83 = lshr i32 %83, 6
  %or = or i32 192, %shr83
  %conv84 = trunc i32 %or to i8
  %84 = load i8*, i8** %dst, align 8
  %incdec.ptr85 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %incdec.ptr85, i8** %dst, align 8
  store i8 %conv84, i8* %84, align 1
  %85 = load i32, i32* %ch, align 4
  %and86 = and i32 %85, 63
  %or87 = or i32 128, %and86
  %conv88 = trunc i32 %or87 to i8
  %86 = load i8*, i8** %dst, align 8
  %incdec.ptr89 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %incdec.ptr89, i8** %dst, align 8
  store i8 %conv88, i8* %86, align 1
  br label %if.end.112

if.else.90:                                       ; preds = %if.else.79
  %87 = load i32, i32* %ch, align 4
  %cmp91 = icmp ule i32 %87, 65535
  br i1 %cmp91, label %if.then.93, label %if.else.107

if.then.93:                                       ; preds = %if.else.90
  %88 = load i32, i32* %ch, align 4
  %shr94 = lshr i32 %88, 12
  %or95 = or i32 224, %shr94
  %conv96 = trunc i32 %or95 to i8
  %89 = load i8*, i8** %dst, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %89, i32 1
  store i8* %incdec.ptr97, i8** %dst, align 8
  store i8 %conv96, i8* %89, align 1
  %90 = load i32, i32* %ch, align 4
  %shr98 = lshr i32 %90, 6
  %and99 = and i32 %shr98, 63
  %or100 = or i32 128, %and99
  %conv101 = trunc i32 %or100 to i8
  %91 = load i8*, i8** %dst, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr102, i8** %dst, align 8
  store i8 %conv101, i8* %91, align 1
  %92 = load i32, i32* %ch, align 4
  %and103 = and i32 %92, 63
  %or104 = or i32 128, %and103
  %conv105 = trunc i32 %or104 to i8
  %93 = load i8*, i8** %dst, align 8
  %incdec.ptr106 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %incdec.ptr106, i8** %dst, align 8
  store i8 %conv105, i8* %93, align 1
  br label %if.end.111

if.else.107:                                      ; preds = %if.else.90
  %94 = load i32, i32* %ch, align 4
  %95 = load i8*, i8** %dst, align 8
  %call108 = call i32 @char_string(i32 %94, i8* %95)
  %96 = load i8*, i8** %dst, align 8
  %idx.ext109 = sext i32 %call108 to i64
  %add.ptr110 = getelementptr inbounds i8, i8* %96, i64 %idx.ext109
  store i8* %add.ptr110, i8** %dst, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.107, %if.then.93
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.then.82
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %if.then.76
  br label %do.end.114

do.end.114:                                       ; preds = %if.end.113
  br label %if.end.118

if.else.115:                                      ; preds = %do.body.64
  %97 = load i32, i32* %c, align 4
  %conv116 = trunc i32 %97 to i8
  %98 = load i8*, i8** %dst, align 8
  %incdec.ptr117 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %incdec.ptr117, i8** %dst, align 8
  store i8 %conv116, i8* %98, align 1
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.115, %do.end.114
  br label %do.end.119

do.end.119:                                       ; preds = %if.end.118
  br label %if.end.589

if.else.120:                                      ; preds = %if.else
  br label %do.body.121

do.body.121:                                      ; preds = %if.else.120
  store i8 0, i8* @charset_map_loaded, align 1
  %99 = load i32, i32* %c, align 4
  %100 = load i64, i64* %charset_list, align 8
  %call122 = call %struct.charset* @char_charset(i32 %99, i64 %100, i32* %code)
  store %struct.charset* %call122, %struct.charset** %charset, align 8
  %101 = load i8, i8* @charset_map_loaded, align 1
  %tobool123 = trunc i8 %101 to i1
  br i1 %tobool123, label %land.lhs.true.125, label %if.end.131

land.lhs.true.125:                                ; preds = %do.body.121
  %102 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call126 = call i64 @coding_change_destination(%struct.coding_system* %102)
  store i64 %call126, i64* %offset, align 8
  %tobool127 = icmp ne i64 %call126, 0
  br i1 %tobool127, label %if.then.128, label %if.end.131

if.then.128:                                      ; preds = %land.lhs.true.125
  %103 = load i64, i64* %offset, align 8
  %104 = load i8*, i8** %dst, align 8
  %add.ptr129 = getelementptr inbounds i8, i8* %104, i64 %103
  store i8* %add.ptr129, i8** %dst, align 8
  %105 = load i64, i64* %offset, align 8
  %106 = load i8*, i8** %dst_end, align 8
  %add.ptr130 = getelementptr inbounds i8, i8* %106, i64 %105
  store i8* %add.ptr130, i8** %dst_end, align 8
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.128, %land.lhs.true.125, %do.body.121
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  %107 = load %struct.charset*, %struct.charset** %charset, align 8
  %tobool133 = icmp ne %struct.charset* %107, null
  br i1 %tobool133, label %if.end.158, label %if.then.134

if.then.134:                                      ; preds = %do.end.132
  %108 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %108, i32 0, i32 1
  %bf.load135 = load i32, i32* %mode, align 8
  %bf.lshr136 = lshr i32 %bf.load135, 14
  %bf.clear137 = and i32 %bf.lshr136, 31
  %and138 = and i32 %bf.clear137, 16
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %if.then.140, label %if.else.143

if.then.140:                                      ; preds = %if.then.134
  store i32 63, i32* %code, align 4
  %109 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %110 = load i32, i32* @charset_ascii, align 4
  %idx.ext141 = sext i32 %110 to i64
  %add.ptr142 = getelementptr inbounds %struct.charset, %struct.charset* %109, i64 %idx.ext141
  store %struct.charset* %add.ptr142, %struct.charset** %charset, align 8
  br label %if.end.157

if.else.143:                                      ; preds = %if.then.134
  %111 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %default_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %111, i32 0, i32 28
  %112 = load i32, i32* %default_char, align 4
  store i32 %112, i32* %c, align 4
  br label %do.body.144

do.body.144:                                      ; preds = %if.else.143
  store i8 0, i8* @charset_map_loaded, align 1
  %113 = load i32, i32* %c, align 4
  %114 = load i64, i64* %charset_list, align 8
  %call146 = call %struct.charset* @char_charset(i32 %113, i64 %114, i32* %code)
  store %struct.charset* %call146, %struct.charset** %charset, align 8
  %115 = load i8, i8* @charset_map_loaded, align 1
  %tobool147 = trunc i8 %115 to i1
  br i1 %tobool147, label %land.lhs.true.149, label %if.end.155

land.lhs.true.149:                                ; preds = %do.body.144
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call150 = call i64 @coding_change_destination(%struct.coding_system* %116)
  store i64 %call150, i64* %offset145, align 8
  %tobool151 = icmp ne i64 %call150, 0
  br i1 %tobool151, label %if.then.152, label %if.end.155

if.then.152:                                      ; preds = %land.lhs.true.149
  %117 = load i64, i64* %offset145, align 8
  %118 = load i8*, i8** %dst, align 8
  %add.ptr153 = getelementptr inbounds i8, i8* %118, i64 %117
  store i8* %add.ptr153, i8** %dst, align 8
  %119 = load i64, i64* %offset145, align 8
  %120 = load i8*, i8** %dst_end, align 8
  %add.ptr154 = getelementptr inbounds i8, i8* %120, i64 %119
  store i8* %add.ptr154, i8** %dst_end, align 8
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.152, %land.lhs.true.149, %do.body.144
  br label %do.end.156

do.end.156:                                       ; preds = %if.end.155
  br label %if.end.157

if.end.157:                                       ; preds = %do.end.156, %if.then.140
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %do.end.132
  %121 = load i32, i32* %code, align 4
  %122 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %122, i32 0, i32 15
  %123 = load i32, i32* %invalid_code, align 4
  %cmp159 = icmp eq i32 %121, %123
  br i1 %cmp159, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %if.end.158
  call void @emacs_abort() #6
  unreachable

if.end.162:                                       ; preds = %if.end.158
  %124 = load %struct.charset*, %struct.charset** %charset, align 8
  %125 = load %struct.charset*, %struct.charset** %charset_kanji, align 8
  %cmp163 = icmp eq %struct.charset* %124, %125
  br i1 %cmp163, label %if.then.165, label %if.else.300

if.then.165:                                      ; preds = %if.end.162
  br label %do.body.166

do.body.166:                                      ; preds = %if.then.165
  %126 = load i32, i32* %code, align 4
  %shr167 = lshr i32 %126, 8
  store i32 %shr167, i32* %j1, align 4
  %127 = load i32, i32* %code, align 4
  %and168 = and i32 %127, 255
  store i32 %and168, i32* %j2, align 4
  %128 = load i32, i32* %j1, align 4
  %and169 = and i32 %128, 1
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %if.then.171, label %if.else.180

if.then.171:                                      ; preds = %do.body.166
  %129 = load i32, i32* %j1, align 4
  %div = sdiv i32 %129, 2
  %130 = load i32, i32* %j1, align 4
  %cmp172 = icmp slt i32 %130, 95
  %cond174 = select i1 %cmp172, i32 113, i32 177
  %add175 = add nsw i32 %div, %cond174
  store i32 %add175, i32* %s1, align 4
  %131 = load i32, i32* %j2, align 4
  %132 = load i32, i32* %j2, align 4
  %cmp176 = icmp sge i32 %132, 96
  %cond178 = select i1 %cmp176, i32 32, i32 31
  %add179 = add nsw i32 %131, %cond178
  store i32 %add179, i32* %s2, align 4
  br label %if.end.187

if.else.180:                                      ; preds = %do.body.166
  %133 = load i32, i32* %j1, align 4
  %div181 = sdiv i32 %133, 2
  %134 = load i32, i32* %j1, align 4
  %cmp182 = icmp slt i32 %134, 95
  %cond184 = select i1 %cmp182, i32 112, i32 176
  %add185 = add nsw i32 %div181, %cond184
  store i32 %add185, i32* %s1, align 4
  %135 = load i32, i32* %j2, align 4
  %add186 = add nsw i32 %135, 126
  store i32 %add186, i32* %s2, align 4
  br label %if.end.187

if.end.187:                                       ; preds = %if.else.180, %if.then.171
  %136 = load i32, i32* %s1, align 4
  %shl = shl i32 %136, 8
  %137 = load i32, i32* %s2, align 4
  %or188 = or i32 %shl, %137
  store i32 %or188, i32* %code, align 4
  br label %do.end.189

do.end.189:                                       ; preds = %if.end.187
  %138 = load i32, i32* %code, align 4
  %shr190 = lshr i32 %138, 8
  store i32 %shr190, i32* %c1, align 4
  %139 = load i32, i32* %code, align 4
  %and191 = and i32 %139, 255
  store i32 %and191, i32* %c2, align 4
  br label %do.body.192

do.body.192:                                      ; preds = %do.end.189
  %140 = load i64, i64* %produced_chars, align 8
  %add193 = add nsw i64 %140, 2
  store i64 %add193, i64* %produced_chars, align 8
  %141 = load i8, i8* %multibytep, align 1
  %tobool194 = trunc i8 %141 to i1
  br i1 %tobool194, label %if.then.195, label %if.else.293

if.then.195:                                      ; preds = %do.body.192
  %142 = load i32, i32* %c1, align 4
  store i32 %142, i32* %ch196, align 4
  %143 = load i32, i32* %ch196, align 4
  %cmp197 = icmp uge i32 %143, 128
  br i1 %cmp197, label %if.then.199, label %if.end.201

if.then.199:                                      ; preds = %if.then.195
  %144 = load i32, i32* %ch196, align 4
  %add200 = add i32 %144, 4194048
  store i32 %add200, i32* %ch196, align 4
  br label %if.end.201

if.end.201:                                       ; preds = %if.then.199, %if.then.195
  br label %do.body.202

do.body.202:                                      ; preds = %if.end.201
  %145 = load i32, i32* %ch196, align 4
  %cmp203 = icmp ule i32 %145, 127
  br i1 %cmp203, label %if.then.205, label %if.else.208

if.then.205:                                      ; preds = %do.body.202
  %146 = load i32, i32* %ch196, align 4
  %conv206 = trunc i32 %146 to i8
  %147 = load i8*, i8** %dst, align 8
  %incdec.ptr207 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %incdec.ptr207, i8** %dst, align 8
  store i8 %conv206, i8* %147, align 1
  br label %if.end.243

if.else.208:                                      ; preds = %do.body.202
  %148 = load i32, i32* %ch196, align 4
  %cmp209 = icmp ule i32 %148, 2047
  br i1 %cmp209, label %if.then.211, label %if.else.220

if.then.211:                                      ; preds = %if.else.208
  %149 = load i32, i32* %ch196, align 4
  %shr212 = lshr i32 %149, 6
  %or213 = or i32 192, %shr212
  %conv214 = trunc i32 %or213 to i8
  %150 = load i8*, i8** %dst, align 8
  %incdec.ptr215 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %incdec.ptr215, i8** %dst, align 8
  store i8 %conv214, i8* %150, align 1
  %151 = load i32, i32* %ch196, align 4
  %and216 = and i32 %151, 63
  %or217 = or i32 128, %and216
  %conv218 = trunc i32 %or217 to i8
  %152 = load i8*, i8** %dst, align 8
  %incdec.ptr219 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %incdec.ptr219, i8** %dst, align 8
  store i8 %conv218, i8* %152, align 1
  br label %if.end.242

if.else.220:                                      ; preds = %if.else.208
  %153 = load i32, i32* %ch196, align 4
  %cmp221 = icmp ule i32 %153, 65535
  br i1 %cmp221, label %if.then.223, label %if.else.237

if.then.223:                                      ; preds = %if.else.220
  %154 = load i32, i32* %ch196, align 4
  %shr224 = lshr i32 %154, 12
  %or225 = or i32 224, %shr224
  %conv226 = trunc i32 %or225 to i8
  %155 = load i8*, i8** %dst, align 8
  %incdec.ptr227 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %incdec.ptr227, i8** %dst, align 8
  store i8 %conv226, i8* %155, align 1
  %156 = load i32, i32* %ch196, align 4
  %shr228 = lshr i32 %156, 6
  %and229 = and i32 %shr228, 63
  %or230 = or i32 128, %and229
  %conv231 = trunc i32 %or230 to i8
  %157 = load i8*, i8** %dst, align 8
  %incdec.ptr232 = getelementptr inbounds i8, i8* %157, i32 1
  store i8* %incdec.ptr232, i8** %dst, align 8
  store i8 %conv231, i8* %157, align 1
  %158 = load i32, i32* %ch196, align 4
  %and233 = and i32 %158, 63
  %or234 = or i32 128, %and233
  %conv235 = trunc i32 %or234 to i8
  %159 = load i8*, i8** %dst, align 8
  %incdec.ptr236 = getelementptr inbounds i8, i8* %159, i32 1
  store i8* %incdec.ptr236, i8** %dst, align 8
  store i8 %conv235, i8* %159, align 1
  br label %if.end.241

if.else.237:                                      ; preds = %if.else.220
  %160 = load i32, i32* %ch196, align 4
  %161 = load i8*, i8** %dst, align 8
  %call238 = call i32 @char_string(i32 %160, i8* %161)
  %162 = load i8*, i8** %dst, align 8
  %idx.ext239 = sext i32 %call238 to i64
  %add.ptr240 = getelementptr inbounds i8, i8* %162, i64 %idx.ext239
  store i8* %add.ptr240, i8** %dst, align 8
  br label %if.end.241

if.end.241:                                       ; preds = %if.else.237, %if.then.223
  br label %if.end.242

if.end.242:                                       ; preds = %if.end.241, %if.then.211
  br label %if.end.243

if.end.243:                                       ; preds = %if.end.242, %if.then.205
  br label %do.end.244

do.end.244:                                       ; preds = %if.end.243
  %163 = load i32, i32* %c2, align 4
  store i32 %163, i32* %ch196, align 4
  %164 = load i32, i32* %ch196, align 4
  %cmp245 = icmp uge i32 %164, 128
  br i1 %cmp245, label %if.then.247, label %if.end.249

if.then.247:                                      ; preds = %do.end.244
  %165 = load i32, i32* %ch196, align 4
  %add248 = add i32 %165, 4194048
  store i32 %add248, i32* %ch196, align 4
  br label %if.end.249

if.end.249:                                       ; preds = %if.then.247, %do.end.244
  br label %do.body.250

do.body.250:                                      ; preds = %if.end.249
  %166 = load i32, i32* %ch196, align 4
  %cmp251 = icmp ule i32 %166, 127
  br i1 %cmp251, label %if.then.253, label %if.else.256

if.then.253:                                      ; preds = %do.body.250
  %167 = load i32, i32* %ch196, align 4
  %conv254 = trunc i32 %167 to i8
  %168 = load i8*, i8** %dst, align 8
  %incdec.ptr255 = getelementptr inbounds i8, i8* %168, i32 1
  store i8* %incdec.ptr255, i8** %dst, align 8
  store i8 %conv254, i8* %168, align 1
  br label %if.end.291

if.else.256:                                      ; preds = %do.body.250
  %169 = load i32, i32* %ch196, align 4
  %cmp257 = icmp ule i32 %169, 2047
  br i1 %cmp257, label %if.then.259, label %if.else.268

if.then.259:                                      ; preds = %if.else.256
  %170 = load i32, i32* %ch196, align 4
  %shr260 = lshr i32 %170, 6
  %or261 = or i32 192, %shr260
  %conv262 = trunc i32 %or261 to i8
  %171 = load i8*, i8** %dst, align 8
  %incdec.ptr263 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %incdec.ptr263, i8** %dst, align 8
  store i8 %conv262, i8* %171, align 1
  %172 = load i32, i32* %ch196, align 4
  %and264 = and i32 %172, 63
  %or265 = or i32 128, %and264
  %conv266 = trunc i32 %or265 to i8
  %173 = load i8*, i8** %dst, align 8
  %incdec.ptr267 = getelementptr inbounds i8, i8* %173, i32 1
  store i8* %incdec.ptr267, i8** %dst, align 8
  store i8 %conv266, i8* %173, align 1
  br label %if.end.290

if.else.268:                                      ; preds = %if.else.256
  %174 = load i32, i32* %ch196, align 4
  %cmp269 = icmp ule i32 %174, 65535
  br i1 %cmp269, label %if.then.271, label %if.else.285

if.then.271:                                      ; preds = %if.else.268
  %175 = load i32, i32* %ch196, align 4
  %shr272 = lshr i32 %175, 12
  %or273 = or i32 224, %shr272
  %conv274 = trunc i32 %or273 to i8
  %176 = load i8*, i8** %dst, align 8
  %incdec.ptr275 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr275, i8** %dst, align 8
  store i8 %conv274, i8* %176, align 1
  %177 = load i32, i32* %ch196, align 4
  %shr276 = lshr i32 %177, 6
  %and277 = and i32 %shr276, 63
  %or278 = or i32 128, %and277
  %conv279 = trunc i32 %or278 to i8
  %178 = load i8*, i8** %dst, align 8
  %incdec.ptr280 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %incdec.ptr280, i8** %dst, align 8
  store i8 %conv279, i8* %178, align 1
  %179 = load i32, i32* %ch196, align 4
  %and281 = and i32 %179, 63
  %or282 = or i32 128, %and281
  %conv283 = trunc i32 %or282 to i8
  %180 = load i8*, i8** %dst, align 8
  %incdec.ptr284 = getelementptr inbounds i8, i8* %180, i32 1
  store i8* %incdec.ptr284, i8** %dst, align 8
  store i8 %conv283, i8* %180, align 1
  br label %if.end.289

if.else.285:                                      ; preds = %if.else.268
  %181 = load i32, i32* %ch196, align 4
  %182 = load i8*, i8** %dst, align 8
  %call286 = call i32 @char_string(i32 %181, i8* %182)
  %183 = load i8*, i8** %dst, align 8
  %idx.ext287 = sext i32 %call286 to i64
  %add.ptr288 = getelementptr inbounds i8, i8* %183, i64 %idx.ext287
  store i8* %add.ptr288, i8** %dst, align 8
  br label %if.end.289

if.end.289:                                       ; preds = %if.else.285, %if.then.271
  br label %if.end.290

if.end.290:                                       ; preds = %if.end.289, %if.then.259
  br label %if.end.291

if.end.291:                                       ; preds = %if.end.290, %if.then.253
  br label %do.end.292

do.end.292:                                       ; preds = %if.end.291
  br label %if.end.298

if.else.293:                                      ; preds = %do.body.192
  %184 = load i32, i32* %c1, align 4
  %conv294 = trunc i32 %184 to i8
  %185 = load i8*, i8** %dst, align 8
  %incdec.ptr295 = getelementptr inbounds i8, i8* %185, i32 1
  store i8* %incdec.ptr295, i8** %dst, align 8
  store i8 %conv294, i8* %185, align 1
  %186 = load i32, i32* %c2, align 4
  %conv296 = trunc i32 %186 to i8
  %187 = load i8*, i8** %dst, align 8
  %incdec.ptr297 = getelementptr inbounds i8, i8* %187, i32 1
  store i8* %incdec.ptr297, i8** %dst, align 8
  store i8 %conv296, i8* %187, align 1
  br label %if.end.298

if.end.298:                                       ; preds = %if.else.293, %do.end.292
  br label %do.end.299

do.end.299:                                       ; preds = %if.end.298
  br label %if.end.588

if.else.300:                                      ; preds = %if.end.162
  %188 = load %struct.charset*, %struct.charset** %charset, align 8
  %189 = load %struct.charset*, %struct.charset** %charset_kana, align 8
  %cmp301 = icmp eq %struct.charset* %188, %189
  br i1 %cmp301, label %if.then.303, label %if.else.364

if.then.303:                                      ; preds = %if.else.300
  br label %do.body.304

do.body.304:                                      ; preds = %if.then.303
  %190 = load i64, i64* %produced_chars, align 8
  %inc305 = add nsw i64 %190, 1
  store i64 %inc305, i64* %produced_chars, align 8
  %191 = load i8, i8* %multibytep, align 1
  %tobool306 = trunc i8 %191 to i1
  br i1 %tobool306, label %if.then.307, label %if.else.358

if.then.307:                                      ; preds = %do.body.304
  %192 = load i32, i32* %code, align 4
  %or309 = or i32 %192, 128
  store i32 %or309, i32* %ch308, align 4
  %193 = load i32, i32* %ch308, align 4
  %cmp310 = icmp uge i32 %193, 128
  br i1 %cmp310, label %if.then.312, label %if.end.314

if.then.312:                                      ; preds = %if.then.307
  %194 = load i32, i32* %ch308, align 4
  %add313 = add i32 %194, 4194048
  store i32 %add313, i32* %ch308, align 4
  br label %if.end.314

if.end.314:                                       ; preds = %if.then.312, %if.then.307
  br label %do.body.315

do.body.315:                                      ; preds = %if.end.314
  %195 = load i32, i32* %ch308, align 4
  %cmp316 = icmp ule i32 %195, 127
  br i1 %cmp316, label %if.then.318, label %if.else.321

if.then.318:                                      ; preds = %do.body.315
  %196 = load i32, i32* %ch308, align 4
  %conv319 = trunc i32 %196 to i8
  %197 = load i8*, i8** %dst, align 8
  %incdec.ptr320 = getelementptr inbounds i8, i8* %197, i32 1
  store i8* %incdec.ptr320, i8** %dst, align 8
  store i8 %conv319, i8* %197, align 1
  br label %if.end.356

if.else.321:                                      ; preds = %do.body.315
  %198 = load i32, i32* %ch308, align 4
  %cmp322 = icmp ule i32 %198, 2047
  br i1 %cmp322, label %if.then.324, label %if.else.333

if.then.324:                                      ; preds = %if.else.321
  %199 = load i32, i32* %ch308, align 4
  %shr325 = lshr i32 %199, 6
  %or326 = or i32 192, %shr325
  %conv327 = trunc i32 %or326 to i8
  %200 = load i8*, i8** %dst, align 8
  %incdec.ptr328 = getelementptr inbounds i8, i8* %200, i32 1
  store i8* %incdec.ptr328, i8** %dst, align 8
  store i8 %conv327, i8* %200, align 1
  %201 = load i32, i32* %ch308, align 4
  %and329 = and i32 %201, 63
  %or330 = or i32 128, %and329
  %conv331 = trunc i32 %or330 to i8
  %202 = load i8*, i8** %dst, align 8
  %incdec.ptr332 = getelementptr inbounds i8, i8* %202, i32 1
  store i8* %incdec.ptr332, i8** %dst, align 8
  store i8 %conv331, i8* %202, align 1
  br label %if.end.355

if.else.333:                                      ; preds = %if.else.321
  %203 = load i32, i32* %ch308, align 4
  %cmp334 = icmp ule i32 %203, 65535
  br i1 %cmp334, label %if.then.336, label %if.else.350

if.then.336:                                      ; preds = %if.else.333
  %204 = load i32, i32* %ch308, align 4
  %shr337 = lshr i32 %204, 12
  %or338 = or i32 224, %shr337
  %conv339 = trunc i32 %or338 to i8
  %205 = load i8*, i8** %dst, align 8
  %incdec.ptr340 = getelementptr inbounds i8, i8* %205, i32 1
  store i8* %incdec.ptr340, i8** %dst, align 8
  store i8 %conv339, i8* %205, align 1
  %206 = load i32, i32* %ch308, align 4
  %shr341 = lshr i32 %206, 6
  %and342 = and i32 %shr341, 63
  %or343 = or i32 128, %and342
  %conv344 = trunc i32 %or343 to i8
  %207 = load i8*, i8** %dst, align 8
  %incdec.ptr345 = getelementptr inbounds i8, i8* %207, i32 1
  store i8* %incdec.ptr345, i8** %dst, align 8
  store i8 %conv344, i8* %207, align 1
  %208 = load i32, i32* %ch308, align 4
  %and346 = and i32 %208, 63
  %or347 = or i32 128, %and346
  %conv348 = trunc i32 %or347 to i8
  %209 = load i8*, i8** %dst, align 8
  %incdec.ptr349 = getelementptr inbounds i8, i8* %209, i32 1
  store i8* %incdec.ptr349, i8** %dst, align 8
  store i8 %conv348, i8* %209, align 1
  br label %if.end.354

if.else.350:                                      ; preds = %if.else.333
  %210 = load i32, i32* %ch308, align 4
  %211 = load i8*, i8** %dst, align 8
  %call351 = call i32 @char_string(i32 %210, i8* %211)
  %212 = load i8*, i8** %dst, align 8
  %idx.ext352 = sext i32 %call351 to i64
  %add.ptr353 = getelementptr inbounds i8, i8* %212, i64 %idx.ext352
  store i8* %add.ptr353, i8** %dst, align 8
  br label %if.end.354

if.end.354:                                       ; preds = %if.else.350, %if.then.336
  br label %if.end.355

if.end.355:                                       ; preds = %if.end.354, %if.then.324
  br label %if.end.356

if.end.356:                                       ; preds = %if.end.355, %if.then.318
  br label %do.end.357

do.end.357:                                       ; preds = %if.end.356
  br label %if.end.362

if.else.358:                                      ; preds = %do.body.304
  %213 = load i32, i32* %code, align 4
  %or359 = or i32 %213, 128
  %conv360 = trunc i32 %or359 to i8
  %214 = load i8*, i8** %dst, align 8
  %incdec.ptr361 = getelementptr inbounds i8, i8* %214, i32 1
  store i8* %incdec.ptr361, i8** %dst, align 8
  store i8 %conv360, i8* %214, align 1
  br label %if.end.362

if.end.362:                                       ; preds = %if.else.358, %do.end.357
  br label %do.end.363

do.end.363:                                       ; preds = %if.end.362
  br label %if.end.587

if.else.364:                                      ; preds = %if.else.300
  %215 = load %struct.charset*, %struct.charset** %charset_kanji2, align 8
  %tobool365 = icmp ne %struct.charset* %215, null
  br i1 %tobool365, label %land.lhs.true.366, label %if.else.579

land.lhs.true.366:                                ; preds = %if.else.364
  %216 = load %struct.charset*, %struct.charset** %charset, align 8
  %217 = load %struct.charset*, %struct.charset** %charset_kanji2, align 8
  %cmp367 = icmp eq %struct.charset* %216, %217
  br i1 %cmp367, label %if.then.369, label %if.else.579

if.then.369:                                      ; preds = %land.lhs.true.366
  %218 = load i32, i32* %code, align 4
  %shr372 = lshr i32 %218, 8
  store i32 %shr372, i32* %c1370, align 4
  %219 = load i32, i32* %c1370, align 4
  %cmp373 = icmp eq i32 %219, 33
  br i1 %cmp373, label %if.then.392, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.369
  %220 = load i32, i32* %c1370, align 4
  %cmp375 = icmp sge i32 %220, 35
  br i1 %cmp375, label %land.lhs.true.377, label %lor.lhs.false.380

land.lhs.true.377:                                ; preds = %lor.lhs.false
  %221 = load i32, i32* %c1370, align 4
  %cmp378 = icmp sle i32 %221, 37
  br i1 %cmp378, label %if.then.392, label %lor.lhs.false.380

lor.lhs.false.380:                                ; preds = %land.lhs.true.377, %lor.lhs.false
  %222 = load i32, i32* %c1370, align 4
  %cmp381 = icmp eq i32 %222, 40
  br i1 %cmp381, label %if.then.392, label %lor.lhs.false.383

lor.lhs.false.383:                                ; preds = %lor.lhs.false.380
  %223 = load i32, i32* %c1370, align 4
  %cmp384 = icmp sge i32 %223, 44
  br i1 %cmp384, label %land.lhs.true.386, label %lor.lhs.false.389

land.lhs.true.386:                                ; preds = %lor.lhs.false.383
  %224 = load i32, i32* %c1370, align 4
  %cmp387 = icmp sle i32 %224, 47
  br i1 %cmp387, label %if.then.392, label %lor.lhs.false.389

lor.lhs.false.389:                                ; preds = %land.lhs.true.386, %lor.lhs.false.383
  %225 = load i32, i32* %c1370, align 4
  %cmp390 = icmp sge i32 %225, 110
  br i1 %cmp390, label %if.then.392, label %if.else.571

if.then.392:                                      ; preds = %lor.lhs.false.389, %land.lhs.true.386, %lor.lhs.false.380, %land.lhs.true.377, %if.then.369
  br label %do.body.393

do.body.393:                                      ; preds = %if.then.392
  %226 = load i32, i32* %code, align 4
  %shr398 = lshr i32 %226, 8
  store i32 %shr398, i32* %j1396, align 4
  %227 = load i32, i32* %code, align 4
  %and399 = and i32 %227, 255
  store i32 %and399, i32* %j2397, align 4
  %228 = load i32, i32* %j1396, align 4
  %and400 = and i32 %228, 1
  %tobool401 = icmp ne i32 %and400, 0
  br i1 %tobool401, label %if.then.402, label %if.else.428

if.then.402:                                      ; preds = %do.body.393
  %229 = load i32, i32* %j1396, align 4
  %cmp403 = icmp sle i32 %229, 37
  br i1 %cmp403, label %cond.true.405, label %cond.false.409

cond.true.405:                                    ; preds = %if.then.402
  %230 = load i32, i32* %j1396, align 4
  %sub406 = sub nsw i32 %230, 33
  %div407 = sdiv i32 %sub406, 2
  %add408 = add nsw i32 240, %div407
  br label %cond.end.422

cond.false.409:                                   ; preds = %if.then.402
  %231 = load i32, i32* %j1396, align 4
  %cmp410 = icmp sle i32 %231, 47
  br i1 %cmp410, label %cond.true.412, label %cond.false.416

cond.true.412:                                    ; preds = %cond.false.409
  %232 = load i32, i32* %j1396, align 4
  %sub413 = sub nsw i32 %232, 45
  %div414 = sdiv i32 %sub413, 2
  %add415 = add nsw i32 243, %div414
  br label %cond.end.420

cond.false.416:                                   ; preds = %cond.false.409
  %233 = load i32, i32* %j1396, align 4
  %sub417 = sub nsw i32 %233, 111
  %div418 = sdiv i32 %sub417, 2
  %add419 = add nsw i32 245, %div418
  br label %cond.end.420

cond.end.420:                                     ; preds = %cond.false.416, %cond.true.412
  %cond421 = phi i32 [ %add415, %cond.true.412 ], [ %add419, %cond.false.416 ]
  br label %cond.end.422

cond.end.422:                                     ; preds = %cond.end.420, %cond.true.405
  %cond423 = phi i32 [ %add408, %cond.true.405 ], [ %cond421, %cond.end.420 ]
  store i32 %cond423, i32* %s1394, align 4
  %234 = load i32, i32* %j2397, align 4
  %235 = load i32, i32* %j2397, align 4
  %cmp424 = icmp sge i32 %235, 96
  %cond426 = select i1 %cmp424, i32 32, i32 31
  %add427 = add nsw i32 %234, %cond426
  store i32 %add427, i32* %s2395, align 4
  br label %if.end.457

if.else.428:                                      ; preds = %do.body.393
  %236 = load i32, i32* %j1396, align 4
  %cmp429 = icmp eq i32 %236, 40
  br i1 %cmp429, label %cond.true.431, label %cond.false.432

cond.true.431:                                    ; preds = %if.else.428
  br label %cond.end.454

cond.false.432:                                   ; preds = %if.else.428
  %237 = load i32, i32* %j1396, align 4
  %cmp433 = icmp eq i32 %237, 36
  br i1 %cmp433, label %cond.true.435, label %cond.false.436

cond.true.435:                                    ; preds = %cond.false.432
  br label %cond.end.452

cond.false.436:                                   ; preds = %cond.false.432
  %238 = load i32, i32* %j1396, align 4
  %cmp437 = icmp eq i32 %238, 44
  br i1 %cmp437, label %cond.true.439, label %cond.false.440

cond.true.439:                                    ; preds = %cond.false.436
  br label %cond.end.450

cond.false.440:                                   ; preds = %cond.false.436
  %239 = load i32, i32* %j1396, align 4
  %cmp441 = icmp eq i32 %239, 46
  br i1 %cmp441, label %cond.true.443, label %cond.false.444

cond.true.443:                                    ; preds = %cond.false.440
  br label %cond.end.448

cond.false.444:                                   ; preds = %cond.false.440
  %240 = load i32, i32* %j1396, align 4
  %sub445 = sub nsw i32 %240, 110
  %div446 = sdiv i32 %sub445, 2
  %add447 = add nsw i32 244, %div446
  br label %cond.end.448

cond.end.448:                                     ; preds = %cond.false.444, %cond.true.443
  %cond449 = phi i32 [ 243, %cond.true.443 ], [ %add447, %cond.false.444 ]
  br label %cond.end.450

cond.end.450:                                     ; preds = %cond.end.448, %cond.true.439
  %cond451 = phi i32 [ 242, %cond.true.439 ], [ %cond449, %cond.end.448 ]
  br label %cond.end.452

cond.end.452:                                     ; preds = %cond.end.450, %cond.true.435
  %cond453 = phi i32 [ 241, %cond.true.435 ], [ %cond451, %cond.end.450 ]
  br label %cond.end.454

cond.end.454:                                     ; preds = %cond.end.452, %cond.true.431
  %cond455 = phi i32 [ 240, %cond.true.431 ], [ %cond453, %cond.end.452 ]
  store i32 %cond455, i32* %s1394, align 4
  %241 = load i32, i32* %j2397, align 4
  %add456 = add nsw i32 %241, 126
  store i32 %add456, i32* %s2395, align 4
  br label %if.end.457

if.end.457:                                       ; preds = %cond.end.454, %cond.end.422
  %242 = load i32, i32* %s1394, align 4
  %shl458 = shl i32 %242, 8
  %243 = load i32, i32* %s2395, align 4
  %or459 = or i32 %shl458, %243
  store i32 %or459, i32* %code, align 4
  br label %do.end.460

do.end.460:                                       ; preds = %if.end.457
  %244 = load i32, i32* %code, align 4
  %shr461 = lshr i32 %244, 8
  store i32 %shr461, i32* %c1370, align 4
  %245 = load i32, i32* %code, align 4
  %and462 = and i32 %245, 255
  store i32 %and462, i32* %c2371, align 4
  br label %do.body.463

do.body.463:                                      ; preds = %do.end.460
  %246 = load i64, i64* %produced_chars, align 8
  %add464 = add nsw i64 %246, 2
  store i64 %add464, i64* %produced_chars, align 8
  %247 = load i8, i8* %multibytep, align 1
  %tobool465 = trunc i8 %247 to i1
  br i1 %tobool465, label %if.then.466, label %if.else.564

if.then.466:                                      ; preds = %do.body.463
  %248 = load i32, i32* %c1370, align 4
  store i32 %248, i32* %ch467, align 4
  %249 = load i32, i32* %ch467, align 4
  %cmp468 = icmp uge i32 %249, 128
  br i1 %cmp468, label %if.then.470, label %if.end.472

if.then.470:                                      ; preds = %if.then.466
  %250 = load i32, i32* %ch467, align 4
  %add471 = add i32 %250, 4194048
  store i32 %add471, i32* %ch467, align 4
  br label %if.end.472

if.end.472:                                       ; preds = %if.then.470, %if.then.466
  br label %do.body.473

do.body.473:                                      ; preds = %if.end.472
  %251 = load i32, i32* %ch467, align 4
  %cmp474 = icmp ule i32 %251, 127
  br i1 %cmp474, label %if.then.476, label %if.else.479

if.then.476:                                      ; preds = %do.body.473
  %252 = load i32, i32* %ch467, align 4
  %conv477 = trunc i32 %252 to i8
  %253 = load i8*, i8** %dst, align 8
  %incdec.ptr478 = getelementptr inbounds i8, i8* %253, i32 1
  store i8* %incdec.ptr478, i8** %dst, align 8
  store i8 %conv477, i8* %253, align 1
  br label %if.end.514

if.else.479:                                      ; preds = %do.body.473
  %254 = load i32, i32* %ch467, align 4
  %cmp480 = icmp ule i32 %254, 2047
  br i1 %cmp480, label %if.then.482, label %if.else.491

if.then.482:                                      ; preds = %if.else.479
  %255 = load i32, i32* %ch467, align 4
  %shr483 = lshr i32 %255, 6
  %or484 = or i32 192, %shr483
  %conv485 = trunc i32 %or484 to i8
  %256 = load i8*, i8** %dst, align 8
  %incdec.ptr486 = getelementptr inbounds i8, i8* %256, i32 1
  store i8* %incdec.ptr486, i8** %dst, align 8
  store i8 %conv485, i8* %256, align 1
  %257 = load i32, i32* %ch467, align 4
  %and487 = and i32 %257, 63
  %or488 = or i32 128, %and487
  %conv489 = trunc i32 %or488 to i8
  %258 = load i8*, i8** %dst, align 8
  %incdec.ptr490 = getelementptr inbounds i8, i8* %258, i32 1
  store i8* %incdec.ptr490, i8** %dst, align 8
  store i8 %conv489, i8* %258, align 1
  br label %if.end.513

if.else.491:                                      ; preds = %if.else.479
  %259 = load i32, i32* %ch467, align 4
  %cmp492 = icmp ule i32 %259, 65535
  br i1 %cmp492, label %if.then.494, label %if.else.508

if.then.494:                                      ; preds = %if.else.491
  %260 = load i32, i32* %ch467, align 4
  %shr495 = lshr i32 %260, 12
  %or496 = or i32 224, %shr495
  %conv497 = trunc i32 %or496 to i8
  %261 = load i8*, i8** %dst, align 8
  %incdec.ptr498 = getelementptr inbounds i8, i8* %261, i32 1
  store i8* %incdec.ptr498, i8** %dst, align 8
  store i8 %conv497, i8* %261, align 1
  %262 = load i32, i32* %ch467, align 4
  %shr499 = lshr i32 %262, 6
  %and500 = and i32 %shr499, 63
  %or501 = or i32 128, %and500
  %conv502 = trunc i32 %or501 to i8
  %263 = load i8*, i8** %dst, align 8
  %incdec.ptr503 = getelementptr inbounds i8, i8* %263, i32 1
  store i8* %incdec.ptr503, i8** %dst, align 8
  store i8 %conv502, i8* %263, align 1
  %264 = load i32, i32* %ch467, align 4
  %and504 = and i32 %264, 63
  %or505 = or i32 128, %and504
  %conv506 = trunc i32 %or505 to i8
  %265 = load i8*, i8** %dst, align 8
  %incdec.ptr507 = getelementptr inbounds i8, i8* %265, i32 1
  store i8* %incdec.ptr507, i8** %dst, align 8
  store i8 %conv506, i8* %265, align 1
  br label %if.end.512

if.else.508:                                      ; preds = %if.else.491
  %266 = load i32, i32* %ch467, align 4
  %267 = load i8*, i8** %dst, align 8
  %call509 = call i32 @char_string(i32 %266, i8* %267)
  %268 = load i8*, i8** %dst, align 8
  %idx.ext510 = sext i32 %call509 to i64
  %add.ptr511 = getelementptr inbounds i8, i8* %268, i64 %idx.ext510
  store i8* %add.ptr511, i8** %dst, align 8
  br label %if.end.512

if.end.512:                                       ; preds = %if.else.508, %if.then.494
  br label %if.end.513

if.end.513:                                       ; preds = %if.end.512, %if.then.482
  br label %if.end.514

if.end.514:                                       ; preds = %if.end.513, %if.then.476
  br label %do.end.515

do.end.515:                                       ; preds = %if.end.514
  %269 = load i32, i32* %c2371, align 4
  store i32 %269, i32* %ch467, align 4
  %270 = load i32, i32* %ch467, align 4
  %cmp516 = icmp uge i32 %270, 128
  br i1 %cmp516, label %if.then.518, label %if.end.520

if.then.518:                                      ; preds = %do.end.515
  %271 = load i32, i32* %ch467, align 4
  %add519 = add i32 %271, 4194048
  store i32 %add519, i32* %ch467, align 4
  br label %if.end.520

if.end.520:                                       ; preds = %if.then.518, %do.end.515
  br label %do.body.521

do.body.521:                                      ; preds = %if.end.520
  %272 = load i32, i32* %ch467, align 4
  %cmp522 = icmp ule i32 %272, 127
  br i1 %cmp522, label %if.then.524, label %if.else.527

if.then.524:                                      ; preds = %do.body.521
  %273 = load i32, i32* %ch467, align 4
  %conv525 = trunc i32 %273 to i8
  %274 = load i8*, i8** %dst, align 8
  %incdec.ptr526 = getelementptr inbounds i8, i8* %274, i32 1
  store i8* %incdec.ptr526, i8** %dst, align 8
  store i8 %conv525, i8* %274, align 1
  br label %if.end.562

if.else.527:                                      ; preds = %do.body.521
  %275 = load i32, i32* %ch467, align 4
  %cmp528 = icmp ule i32 %275, 2047
  br i1 %cmp528, label %if.then.530, label %if.else.539

if.then.530:                                      ; preds = %if.else.527
  %276 = load i32, i32* %ch467, align 4
  %shr531 = lshr i32 %276, 6
  %or532 = or i32 192, %shr531
  %conv533 = trunc i32 %or532 to i8
  %277 = load i8*, i8** %dst, align 8
  %incdec.ptr534 = getelementptr inbounds i8, i8* %277, i32 1
  store i8* %incdec.ptr534, i8** %dst, align 8
  store i8 %conv533, i8* %277, align 1
  %278 = load i32, i32* %ch467, align 4
  %and535 = and i32 %278, 63
  %or536 = or i32 128, %and535
  %conv537 = trunc i32 %or536 to i8
  %279 = load i8*, i8** %dst, align 8
  %incdec.ptr538 = getelementptr inbounds i8, i8* %279, i32 1
  store i8* %incdec.ptr538, i8** %dst, align 8
  store i8 %conv537, i8* %279, align 1
  br label %if.end.561

if.else.539:                                      ; preds = %if.else.527
  %280 = load i32, i32* %ch467, align 4
  %cmp540 = icmp ule i32 %280, 65535
  br i1 %cmp540, label %if.then.542, label %if.else.556

if.then.542:                                      ; preds = %if.else.539
  %281 = load i32, i32* %ch467, align 4
  %shr543 = lshr i32 %281, 12
  %or544 = or i32 224, %shr543
  %conv545 = trunc i32 %or544 to i8
  %282 = load i8*, i8** %dst, align 8
  %incdec.ptr546 = getelementptr inbounds i8, i8* %282, i32 1
  store i8* %incdec.ptr546, i8** %dst, align 8
  store i8 %conv545, i8* %282, align 1
  %283 = load i32, i32* %ch467, align 4
  %shr547 = lshr i32 %283, 6
  %and548 = and i32 %shr547, 63
  %or549 = or i32 128, %and548
  %conv550 = trunc i32 %or549 to i8
  %284 = load i8*, i8** %dst, align 8
  %incdec.ptr551 = getelementptr inbounds i8, i8* %284, i32 1
  store i8* %incdec.ptr551, i8** %dst, align 8
  store i8 %conv550, i8* %284, align 1
  %285 = load i32, i32* %ch467, align 4
  %and552 = and i32 %285, 63
  %or553 = or i32 128, %and552
  %conv554 = trunc i32 %or553 to i8
  %286 = load i8*, i8** %dst, align 8
  %incdec.ptr555 = getelementptr inbounds i8, i8* %286, i32 1
  store i8* %incdec.ptr555, i8** %dst, align 8
  store i8 %conv554, i8* %286, align 1
  br label %if.end.560

if.else.556:                                      ; preds = %if.else.539
  %287 = load i32, i32* %ch467, align 4
  %288 = load i8*, i8** %dst, align 8
  %call557 = call i32 @char_string(i32 %287, i8* %288)
  %289 = load i8*, i8** %dst, align 8
  %idx.ext558 = sext i32 %call557 to i64
  %add.ptr559 = getelementptr inbounds i8, i8* %289, i64 %idx.ext558
  store i8* %add.ptr559, i8** %dst, align 8
  br label %if.end.560

if.end.560:                                       ; preds = %if.else.556, %if.then.542
  br label %if.end.561

if.end.561:                                       ; preds = %if.end.560, %if.then.530
  br label %if.end.562

if.end.562:                                       ; preds = %if.end.561, %if.then.524
  br label %do.end.563

do.end.563:                                       ; preds = %if.end.562
  br label %if.end.569

if.else.564:                                      ; preds = %do.body.463
  %290 = load i32, i32* %c1370, align 4
  %conv565 = trunc i32 %290 to i8
  %291 = load i8*, i8** %dst, align 8
  %incdec.ptr566 = getelementptr inbounds i8, i8* %291, i32 1
  store i8* %incdec.ptr566, i8** %dst, align 8
  store i8 %conv565, i8* %291, align 1
  %292 = load i32, i32* %c2371, align 4
  %conv567 = trunc i32 %292 to i8
  %293 = load i8*, i8** %dst, align 8
  %incdec.ptr568 = getelementptr inbounds i8, i8* %293, i32 1
  store i8* %incdec.ptr568, i8** %dst, align 8
  store i8 %conv567, i8* %293, align 1
  br label %if.end.569

if.end.569:                                       ; preds = %if.else.564, %do.end.563
  br label %do.end.570

do.end.570:                                       ; preds = %if.end.569
  br label %if.end.578

if.else.571:                                      ; preds = %lor.lhs.false.389
  br label %do.body.572

do.body.572:                                      ; preds = %if.else.571
  %294 = load i64, i64* %produced_chars, align 8
  %inc573 = add nsw i64 %294, 1
  store i64 %inc573, i64* %produced_chars, align 8
  %295 = load i32, i32* %code, align 4
  %and574 = and i32 %295, 127
  %conv575 = trunc i32 %and574 to i8
  %296 = load i8*, i8** %dst, align 8
  %incdec.ptr576 = getelementptr inbounds i8, i8* %296, i32 1
  store i8* %incdec.ptr576, i8** %dst, align 8
  store i8 %conv575, i8* %296, align 1
  br label %do.end.577

do.end.577:                                       ; preds = %do.body.572
  br label %if.end.578

if.end.578:                                       ; preds = %do.end.577, %do.end.570
  br label %if.end.586

if.else.579:                                      ; preds = %land.lhs.true.366, %if.else.364
  br label %do.body.580

do.body.580:                                      ; preds = %if.else.579
  %297 = load i64, i64* %produced_chars, align 8
  %inc581 = add nsw i64 %297, 1
  store i64 %inc581, i64* %produced_chars, align 8
  %298 = load i32, i32* %code, align 4
  %and582 = and i32 %298, 127
  %conv583 = trunc i32 %and582 to i8
  %299 = load i8*, i8** %dst, align 8
  %incdec.ptr584 = getelementptr inbounds i8, i8* %299, i32 1
  store i8* %incdec.ptr584, i8** %dst, align 8
  store i8 %conv583, i8* %299, align 1
  br label %do.end.585

do.end.585:                                       ; preds = %do.body.580
  br label %if.end.586

if.end.586:                                       ; preds = %do.end.585, %if.end.578
  br label %if.end.587

if.end.587:                                       ; preds = %if.end.586, %do.end.363
  br label %if.end.588

if.end.588:                                       ; preds = %if.end.587, %do.end.299
  br label %if.end.589

if.end.589:                                       ; preds = %if.end.588, %do.end.119
  br label %if.end.590

if.end.590:                                       ; preds = %if.end.589, %do.end.53
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %300 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %300, i32 0)
  %301 = load i64, i64* %produced_chars, align 8
  %302 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %302, i32 0, i32 9
  %303 = load i64, i64* %produced_char, align 8
  %add591 = add nsw i64 %303, %301
  store i64 %add591, i64* %produced_char, align 8
  %304 = load i8*, i8** %dst, align 8
  %305 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination592 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %305, i32 0, i32 22
  %306 = load i8*, i8** %destination592, align 8
  %sub.ptr.lhs.cast593 = ptrtoint i8* %304 to i64
  %sub.ptr.rhs.cast594 = ptrtoint i8* %306 to i64
  %sub.ptr.sub595 = sub i64 %sub.ptr.lhs.cast593, %sub.ptr.rhs.cast594
  %307 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced596 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %307, i32 0, i32 8
  store i64 %sub.ptr.sub595, i64* %produced596, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @detect_coding_big5(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info) #0 {
entry:
  %retval = alloca i1, align 1
  %coding.addr = alloca %struct.coding_system*, align 8
  %detect_info.addr = alloca %struct.coding_detection_info*, align 8
  %src = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %consumed_chars = alloca i64, align 8
  %found = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store %struct.coding_detection_info* %detect_info, %struct.coding_detection_info** %detect_info.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %src, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 17
  %3 = load i8*, i8** %source1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  %5 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %src_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i32 0, i32* %found, align 4
  %7 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %7, i32 0, i32 0
  %8 = load i32, i32* %checked, align 4
  %or = or i32 %8, 65536
  store i32 %or, i32* %checked, align 4
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 5
  %10 = load i64, i64* %head_ascii, align 8
  %11 = load i8*, i8** %src, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %11, i64 %10
  store i8* %add.ptr2, i8** %src, align 8
  br label %while.body

while.body:                                       ; preds = %entry, %if.then.22, %if.end.71
  %12 = load i8*, i8** %src, align 8
  store i8* %12, i8** %src_base, align 8
  br label %do.body

do.body:                                          ; preds = %while.body
  %13 = load i8*, i8** %src, align 8
  %14 = load i8*, i8** %src_end, align 8
  %cmp = icmp eq i8* %13, %14
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %15 = load i8*, i8** %src_base, align 8
  %16 = load i8*, i8** %src, align 8
  %cmp3 = icmp ult i8* %15, %16
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %17, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  br label %no_more_source

if.end.5:                                         ; preds = %do.body
  %18 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %19 = load i8, i8* %18, align 1
  %conv = zext i8 %19 to i32
  store i32 %conv, i32* %c, align 4
  %20 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %20 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.end.5
  %21 = load i32, i32* %c, align 4
  %and = and i32 %21, 128
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.then.8, label %if.end.19

if.then.8:                                        ; preds = %land.lhs.true
  %22 = load i32, i32* %c, align 4
  %and9 = and i32 %22, 254
  %cmp10 = icmp eq i32 %and9, 192
  br i1 %cmp10, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.then.8
  %23 = load i32, i32* %c, align 4
  %and13 = and i32 %23, 1
  %shl = shl i32 %and13, 6
  %24 = load i8*, i8** %src, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr14, i8** %src, align 8
  %25 = load i8, i8* %24, align 1
  %conv15 = zext i8 %25 to i32
  %or16 = or i32 %shl, %conv15
  store i32 %or16, i32* %c, align 4
  br label %if.end.18

if.else:                                          ; preds = %if.then.8
  %26 = load i8*, i8** %src, align 8
  %incdec.ptr17 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr17, i8** %src, align 8
  %27 = load i8*, i8** %src, align 8
  %call = call i32 @string_char(i8* %27, i8** %src, i32* null)
  %sub = sub nsw i32 0, %call
  store i32 %sub, i32* %c, align 4
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %28, i32 3)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.12
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %land.lhs.true, %if.end.5
  %29 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %29, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %30 = load i32, i32* %c, align 4
  %cmp20 = icmp slt i32 %30, 128
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %do.end
  br label %while.body

if.end.23:                                        ; preds = %do.end
  %31 = load i32, i32* %c, align 4
  %cmp24 = icmp sge i32 %31, 161
  br i1 %cmp24, label %if.then.26, label %if.else.70

if.then.26:                                       ; preds = %if.end.23
  br label %do.body.27

do.body.27:                                       ; preds = %if.then.26
  %32 = load i8*, i8** %src, align 8
  %33 = load i8*, i8** %src_end, align 8
  %cmp28 = icmp eq i8* %32, %33
  br i1 %cmp28, label %if.then.30, label %if.end.35

if.then.30:                                       ; preds = %do.body.27
  %34 = load i8*, i8** %src_base, align 8
  %35 = load i8*, i8** %src, align 8
  %cmp31 = icmp ult i8* %34, %35
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.then.30
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %36, i32 1)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.then.30
  br label %no_more_source

if.end.35:                                        ; preds = %do.body.27
  %37 = load i8*, i8** %src, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr36, i8** %src, align 8
  %38 = load i8, i8* %37, align 1
  %conv37 = zext i8 %38 to i32
  store i32 %conv37, i32* %c, align 4
  %39 = load i8, i8* %multibytep, align 1
  %tobool38 = trunc i8 %39 to i1
  br i1 %tobool38, label %land.lhs.true.40, label %if.end.58

land.lhs.true.40:                                 ; preds = %if.end.35
  %40 = load i32, i32* %c, align 4
  %and41 = and i32 %40, 128
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.58

if.then.43:                                       ; preds = %land.lhs.true.40
  %41 = load i32, i32* %c, align 4
  %and44 = and i32 %41, 254
  %cmp45 = icmp eq i32 %and44, 192
  br i1 %cmp45, label %if.then.47, label %if.else.53

if.then.47:                                       ; preds = %if.then.43
  %42 = load i32, i32* %c, align 4
  %and48 = and i32 %42, 1
  %shl49 = shl i32 %and48, 6
  %43 = load i8*, i8** %src, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr50, i8** %src, align 8
  %44 = load i8, i8* %43, align 1
  %conv51 = zext i8 %44 to i32
  %or52 = or i32 %shl49, %conv51
  store i32 %or52, i32* %c, align 4
  br label %if.end.57

if.else.53:                                       ; preds = %if.then.43
  %45 = load i8*, i8** %src, align 8
  %incdec.ptr54 = getelementptr inbounds i8, i8* %45, i32 -1
  store i8* %incdec.ptr54, i8** %src, align 8
  %46 = load i8*, i8** %src, align 8
  %call55 = call i32 @string_char(i8* %46, i8** %src, i32* null)
  %sub56 = sub nsw i32 0, %call55
  store i32 %sub56, i32* %c, align 4
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %47, i32 3)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.53, %if.then.47
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %land.lhs.true.40, %if.end.35
  %48 = load i64, i64* %consumed_chars, align 8
  %inc59 = add nsw i64 %48, 1
  store i64 %inc59, i64* %consumed_chars, align 8
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.58
  %49 = load i32, i32* %c, align 4
  %cmp61 = icmp slt i32 %49, 64
  br i1 %cmp61, label %if.then.68, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end.60
  %50 = load i32, i32* %c, align 4
  %cmp63 = icmp sge i32 %50, 127
  br i1 %cmp63, label %land.lhs.true.65, label %if.end.69

land.lhs.true.65:                                 ; preds = %lor.lhs.false
  %51 = load i32, i32* %c, align 4
  %cmp66 = icmp sle i32 %51, 160
  br i1 %cmp66, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %land.lhs.true.65, %do.end.60
  store i1 false, i1* %retval
  br label %return

if.end.69:                                        ; preds = %land.lhs.true.65, %lor.lhs.false
  store i32 65536, i32* %found, align 4
  br label %if.end.71

if.else.70:                                       ; preds = %if.end.23
  br label %while.end

if.end.71:                                        ; preds = %if.end.69
  br label %while.body

while.end:                                        ; preds = %if.else.70
  %52 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %52, i32 0, i32 2
  %53 = load i32, i32* %rejected, align 4
  %or72 = or i32 %53, 65536
  store i32 %or72, i32* %rejected, align 4
  store i1 false, i1* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.34, %if.end
  %54 = load i8*, i8** %src_base, align 8
  %55 = load i8*, i8** %src, align 8
  %cmp73 = icmp ult i8* %54, %55
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.84

land.lhs.true.75:                                 ; preds = %no_more_source
  %56 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %56, i32 0, i32 1
  %bf.load76 = load i32, i32* %mode, align 8
  %bf.lshr77 = lshr i32 %bf.load76, 14
  %bf.clear78 = and i32 %bf.lshr77, 31
  %and79 = and i32 %bf.clear78, 1
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.then.81, label %if.end.84

if.then.81:                                       ; preds = %land.lhs.true.75
  %57 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %rejected82 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %57, i32 0, i32 2
  %58 = load i32, i32* %rejected82, align 4
  %or83 = or i32 %58, 65536
  store i32 %or83, i32* %rejected82, align 4
  store i1 false, i1* %retval
  br label %return

if.end.84:                                        ; preds = %land.lhs.true.75, %no_more_source
  %59 = load i32, i32* %found, align 4
  %60 = load %struct.coding_detection_info*, %struct.coding_detection_info** %detect_info.addr, align 8
  %found85 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %60, i32 0, i32 1
  %61 = load i32, i32* %found85, align 4
  %or86 = or i32 %61, %59
  store i32 %or86, i32* %found85, align 4
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.84, %if.then.81, %while.end, %if.then.68
  %62 = load i1, i1* %retval
  ret i1 %62
}

; Function Attrs: nounwind uwtable
define internal void @decode_coding_big5(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %consumed_chars = alloca i64, align 8
  %consumed_chars_base = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %charset_roman = alloca %struct.charset*, align 8
  %charset_big5 = alloca %struct.charset*, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %val = alloca i64, align 8
  %char_offset = alloca i64, align 8
  %last_offset = alloca i64, align 8
  %last_id = alloca i32, align 4
  %eol_dos = alloca i8, align 1
  %byte_after_cr = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %offset = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 10
  %3 = load i64, i64* %consumed, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 17
  %5 = load i8*, i8** %source1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 15
  %7 = load i64, i64* %src_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %src_end, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 23
  %9 = load i32*, i32** %charbuf3, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 25
  %11 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %9, i64 %idx.ext
  store i32* %add.ptr4, i32** %charbuf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 23
  %13 = load i32*, i32** %charbuf5, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 24
  %15 = load i32, i32* %charbuf_size, align 4
  %idx.ext6 = sext i32 %15 to i64
  %add.ptr7 = getelementptr inbounds i32, i32* %13, i64 %idx.ext6
  %add.ptr8 = getelementptr inbounds i32, i32* %add.ptr7, i64 -10
  store i32* %add.ptr8, i32** %charbuf_end, align 8
  store i64 0, i64* %consumed_chars, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 9
  %18 = load i64, i64* %produced_char, align 8
  store i64 %18, i64* %char_offset, align 8
  %19 = load i64, i64* %char_offset, align 8
  store i64 %19, i64* %last_offset, align 8
  %20 = load i32, i32* @charset_ascii, align 4
  store i32 %20, i32* %last_id, align 4
  %21 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %21 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %22 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %22)
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 0
  %24 = load i64, i64* %id, align 8
  %call9 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %24)
  %call10 = call i64 @AREF(i64 %call9, i64 2)
  %call11 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp = icmp eq i64 %call10, %call11
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %25 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %frombool12 = zext i1 %25 to i8
  store i8 %frombool12, i8* %eol_dos, align 1
  store i32 -1, i32* %byte_after_cr, align 4
  br label %do.body

do.body:                                          ; preds = %land.end
  %26 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call13 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %26)
  %27 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %27, i32 0, i32 0
  %28 = load i64, i64* %id14, align 8
  %call15 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call13, i64 %28)
  %call16 = call i64 @AREF(i64 %call15, i64 0)
  store i64 %call16, i64* %attrs, align 8
  %29 = load i64, i64* %attrs, align 8
  %call17 = call i64 @AREF(i64 %29, i64 4)
  store i64 %call17, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i64, i64* %charset_list, align 8
  store i64 %30, i64* %val, align 8
  %31 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %32 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %32, 3
  %33 = inttoptr i64 %sub to i8*
  %34 = bitcast i8* %33 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %34, i32 0, i32 0
  %35 = load i64, i64* %car, align 8
  %shr = ashr i64 %35, 2
  %add.ptr18 = getelementptr inbounds %struct.charset, %struct.charset* %31, i64 %shr
  store %struct.charset* %add.ptr18, %struct.charset** %charset_roman, align 8
  %36 = load i64, i64* %val, align 8
  %sub19 = sub nsw i64 %36, 3
  %37 = inttoptr i64 %sub19 to i8*
  %38 = bitcast i8* %37 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %38, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %39 = load i64, i64* %cdr, align 8
  store i64 %39, i64* %val, align 8
  %40 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %41 = load i64, i64* %val, align 8
  %sub20 = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub20 to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %car21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 0
  %44 = load i64, i64* %car21, align 8
  %shr22 = ashr i64 %44, 2
  %add.ptr23 = getelementptr inbounds %struct.charset, %struct.charset* %40, i64 %shr22
  store %struct.charset* %add.ptr23, %struct.charset** %charset_big5, align 8
  br label %while.body

while.body:                                       ; preds = %do.end, %do.end.289, %cond.end.332
  %45 = load i8*, i8** %src, align 8
  store i8* %45, i8** %src_base, align 8
  %46 = load i64, i64* %consumed_chars, align 8
  store i64 %46, i64* %consumed_chars_base, align 8
  %47 = load i32*, i32** %charbuf, align 8
  %48 = load i32*, i32** %charbuf_end, align 8
  %cmp24 = icmp uge i32* %47, %48
  br i1 %cmp24, label %if.then, label %if.end.27

if.then:                                          ; preds = %while.body
  %49 = load i32, i32* %byte_after_cr, align 4
  %cmp25 = icmp sge i32 %49, 0
  br i1 %cmp25, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %if.then
  %50 = load i8*, i8** %src_base, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %50, i32 -1
  store i8* %incdec.ptr, i8** %src_base, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.26, %if.then
  br label %while.end

if.end.27:                                        ; preds = %while.body
  %51 = load i32, i32* %byte_after_cr, align 4
  %cmp28 = icmp sge i32 %51, 0
  br i1 %cmp28, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %if.end.27
  %52 = load i32, i32* %byte_after_cr, align 4
  store i32 %52, i32* %c, align 4
  store i32 -1, i32* %byte_after_cr, align 4
  br label %if.end.56

if.else:                                          ; preds = %if.end.27
  br label %do.body.30

do.body.30:                                       ; preds = %if.else
  %53 = load i8*, i8** %src, align 8
  %54 = load i8*, i8** %src_end, align 8
  %cmp31 = icmp eq i8* %53, %54
  br i1 %cmp31, label %if.then.32, label %if.end.36

if.then.32:                                       ; preds = %do.body.30
  %55 = load i8*, i8** %src_base, align 8
  %56 = load i8*, i8** %src, align 8
  %cmp33 = icmp ult i8* %55, %56
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.32
  %57 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %57, i32 1)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.then.32
  br label %no_more_source

if.end.36:                                        ; preds = %do.body.30
  %58 = load i8*, i8** %src, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr37, i8** %src, align 8
  %59 = load i8, i8* %58, align 1
  %conv = zext i8 %59 to i32
  store i32 %conv, i32* %c, align 4
  %60 = load i8, i8* %multibytep, align 1
  %tobool38 = trunc i8 %60 to i1
  br i1 %tobool38, label %land.lhs.true, label %if.end.54

land.lhs.true:                                    ; preds = %if.end.36
  %61 = load i32, i32* %c, align 4
  %and = and i32 %61, 128
  %tobool40 = icmp ne i32 %and, 0
  br i1 %tobool40, label %if.then.41, label %if.end.54

if.then.41:                                       ; preds = %land.lhs.true
  %62 = load i32, i32* %c, align 4
  %and42 = and i32 %62, 254
  %cmp43 = icmp eq i32 %and42, 192
  br i1 %cmp43, label %if.then.45, label %if.else.49

if.then.45:                                       ; preds = %if.then.41
  %63 = load i32, i32* %c, align 4
  %and46 = and i32 %63, 1
  %shl = shl i32 %and46, 6
  %64 = load i8*, i8** %src, align 8
  %incdec.ptr47 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr47, i8** %src, align 8
  %65 = load i8, i8* %64, align 1
  %conv48 = zext i8 %65 to i32
  %or = or i32 %shl, %conv48
  store i32 %or, i32* %c, align 4
  br label %if.end.53

if.else.49:                                       ; preds = %if.then.41
  %66 = load i8*, i8** %src, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %66, i32 -1
  store i8* %incdec.ptr50, i8** %src, align 8
  %67 = load i8*, i8** %src, align 8
  %call51 = call i32 @string_char(i8* %67, i8** %src, i32* null)
  %sub52 = sub nsw i32 0, %call51
  store i32 %sub52, i32* %c, align 4
  %68 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %68, i32 3)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.49, %if.then.45
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %land.lhs.true, %if.end.36
  %69 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %69, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  br label %if.end.56

if.end.56:                                        ; preds = %do.end.55, %if.then.29
  %70 = load i32, i32* %c, align 4
  %cmp57 = icmp slt i32 %70, 0
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.56
  br label %invalid_code

if.end.60:                                        ; preds = %if.end.56
  %71 = load i32, i32* %c, align 4
  %cmp61 = icmp slt i32 %71, 128
  br i1 %cmp61, label %if.then.63, label %if.else.105

if.then.63:                                       ; preds = %if.end.60
  %72 = load i8, i8* %eol_dos, align 1
  %tobool64 = trunc i8 %72 to i1
  br i1 %tobool64, label %land.lhs.true.66, label %if.end.104

land.lhs.true.66:                                 ; preds = %if.then.63
  %73 = load i32, i32* %c, align 4
  %cmp67 = icmp eq i32 %73, 13
  br i1 %cmp67, label %if.then.69, label %if.end.104

if.then.69:                                       ; preds = %land.lhs.true.66
  br label %do.body.70

do.body.70:                                       ; preds = %if.then.69
  %74 = load i8*, i8** %src, align 8
  %75 = load i8*, i8** %src_end, align 8
  %cmp71 = icmp eq i8* %74, %75
  br i1 %cmp71, label %if.then.73, label %if.end.78

if.then.73:                                       ; preds = %do.body.70
  %76 = load i8*, i8** %src_base, align 8
  %77 = load i8*, i8** %src, align 8
  %cmp74 = icmp ult i8* %76, %77
  br i1 %cmp74, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.then.73
  %78 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %78, i32 1)
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %if.then.73
  br label %no_more_source

if.end.78:                                        ; preds = %do.body.70
  %79 = load i8*, i8** %src, align 8
  %incdec.ptr79 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr79, i8** %src, align 8
  %80 = load i8, i8* %79, align 1
  %conv80 = zext i8 %80 to i32
  store i32 %conv80, i32* %byte_after_cr, align 4
  %81 = load i8, i8* %multibytep, align 1
  %tobool81 = trunc i8 %81 to i1
  br i1 %tobool81, label %land.lhs.true.83, label %if.end.101

land.lhs.true.83:                                 ; preds = %if.end.78
  %82 = load i32, i32* %byte_after_cr, align 4
  %and84 = and i32 %82, 128
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then.86, label %if.end.101

if.then.86:                                       ; preds = %land.lhs.true.83
  %83 = load i32, i32* %byte_after_cr, align 4
  %and87 = and i32 %83, 254
  %cmp88 = icmp eq i32 %and87, 192
  br i1 %cmp88, label %if.then.90, label %if.else.96

if.then.90:                                       ; preds = %if.then.86
  %84 = load i32, i32* %byte_after_cr, align 4
  %and91 = and i32 %84, 1
  %shl92 = shl i32 %and91, 6
  %85 = load i8*, i8** %src, align 8
  %incdec.ptr93 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %incdec.ptr93, i8** %src, align 8
  %86 = load i8, i8* %85, align 1
  %conv94 = zext i8 %86 to i32
  %or95 = or i32 %shl92, %conv94
  store i32 %or95, i32* %byte_after_cr, align 4
  br label %if.end.100

if.else.96:                                       ; preds = %if.then.86
  %87 = load i8*, i8** %src, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %87, i32 -1
  store i8* %incdec.ptr97, i8** %src, align 8
  %88 = load i8*, i8** %src, align 8
  %call98 = call i32 @string_char(i8* %88, i8** %src, i32* null)
  %sub99 = sub nsw i32 0, %call98
  store i32 %sub99, i32* %byte_after_cr, align 4
  %89 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %89, i32 3)
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.96, %if.then.90
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %land.lhs.true.83, %if.end.78
  %90 = load i64, i64* %consumed_chars, align 8
  %inc102 = add nsw i64 %90, 1
  store i64 %inc102, i64* %consumed_chars, align 8
  br label %do.end.103

do.end.103:                                       ; preds = %if.end.101
  br label %if.end.104

if.end.104:                                       ; preds = %do.end.103, %land.lhs.true.66, %if.then.63
  %91 = load %struct.charset*, %struct.charset** %charset_roman, align 8
  store %struct.charset* %91, %struct.charset** %charset, align 8
  br label %if.end.161

if.else.105:                                      ; preds = %if.end.60
  %92 = load i32, i32* %c, align 4
  %cmp106 = icmp slt i32 %92, 161
  br i1 %cmp106, label %if.then.110, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.105
  %93 = load i32, i32* %c, align 4
  %cmp108 = icmp sgt i32 %93, 254
  br i1 %cmp108, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %lor.lhs.false, %if.else.105
  br label %invalid_code

if.end.111:                                       ; preds = %lor.lhs.false
  br label %do.body.112

do.body.112:                                      ; preds = %if.end.111
  %94 = load i8*, i8** %src, align 8
  %95 = load i8*, i8** %src_end, align 8
  %cmp113 = icmp eq i8* %94, %95
  br i1 %cmp113, label %if.then.115, label %if.end.120

if.then.115:                                      ; preds = %do.body.112
  %96 = load i8*, i8** %src_base, align 8
  %97 = load i8*, i8** %src, align 8
  %cmp116 = icmp ult i8* %96, %97
  br i1 %cmp116, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.then.115
  %98 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %98, i32 1)
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.118, %if.then.115
  br label %no_more_source

if.end.120:                                       ; preds = %do.body.112
  %99 = load i8*, i8** %src, align 8
  %incdec.ptr121 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %incdec.ptr121, i8** %src, align 8
  %100 = load i8, i8* %99, align 1
  %conv122 = zext i8 %100 to i32
  store i32 %conv122, i32* %c1, align 4
  %101 = load i8, i8* %multibytep, align 1
  %tobool123 = trunc i8 %101 to i1
  br i1 %tobool123, label %land.lhs.true.125, label %if.end.143

land.lhs.true.125:                                ; preds = %if.end.120
  %102 = load i32, i32* %c1, align 4
  %and126 = and i32 %102, 128
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %if.then.128, label %if.end.143

if.then.128:                                      ; preds = %land.lhs.true.125
  %103 = load i32, i32* %c1, align 4
  %and129 = and i32 %103, 254
  %cmp130 = icmp eq i32 %and129, 192
  br i1 %cmp130, label %if.then.132, label %if.else.138

if.then.132:                                      ; preds = %if.then.128
  %104 = load i32, i32* %c1, align 4
  %and133 = and i32 %104, 1
  %shl134 = shl i32 %and133, 6
  %105 = load i8*, i8** %src, align 8
  %incdec.ptr135 = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %incdec.ptr135, i8** %src, align 8
  %106 = load i8, i8* %105, align 1
  %conv136 = zext i8 %106 to i32
  %or137 = or i32 %shl134, %conv136
  store i32 %or137, i32* %c1, align 4
  br label %if.end.142

if.else.138:                                      ; preds = %if.then.128
  %107 = load i8*, i8** %src, align 8
  %incdec.ptr139 = getelementptr inbounds i8, i8* %107, i32 -1
  store i8* %incdec.ptr139, i8** %src, align 8
  %108 = load i8*, i8** %src, align 8
  %call140 = call i32 @string_char(i8* %108, i8** %src, i32* null)
  %sub141 = sub nsw i32 0, %call140
  store i32 %sub141, i32* %c1, align 4
  %109 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %109, i32 3)
  br label %if.end.142

if.end.142:                                       ; preds = %if.else.138, %if.then.132
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %land.lhs.true.125, %if.end.120
  %110 = load i64, i64* %consumed_chars, align 8
  %inc144 = add nsw i64 %110, 1
  store i64 %inc144, i64* %consumed_chars, align 8
  br label %do.end.145

do.end.145:                                       ; preds = %if.end.143
  %111 = load i32, i32* %c1, align 4
  %cmp146 = icmp slt i32 %111, 64
  br i1 %cmp146, label %if.then.157, label %lor.lhs.false.148

lor.lhs.false.148:                                ; preds = %do.end.145
  %112 = load i32, i32* %c1, align 4
  %cmp149 = icmp sgt i32 %112, 126
  br i1 %cmp149, label %land.lhs.true.151, label %lor.lhs.false.154

land.lhs.true.151:                                ; preds = %lor.lhs.false.148
  %113 = load i32, i32* %c1, align 4
  %cmp152 = icmp slt i32 %113, 161
  br i1 %cmp152, label %if.then.157, label %lor.lhs.false.154

lor.lhs.false.154:                                ; preds = %land.lhs.true.151, %lor.lhs.false.148
  %114 = load i32, i32* %c1, align 4
  %cmp155 = icmp sgt i32 %114, 254
  br i1 %cmp155, label %if.then.157, label %if.end.158

if.then.157:                                      ; preds = %lor.lhs.false.154, %land.lhs.true.151, %do.end.145
  br label %invalid_code

if.end.158:                                       ; preds = %lor.lhs.false.154
  %115 = load i32, i32* %c, align 4
  %shl159 = shl i32 %115, 8
  %116 = load i32, i32* %c1, align 4
  %or160 = or i32 %shl159, %116
  store i32 %or160, i32* %c, align 4
  %117 = load %struct.charset*, %struct.charset** %charset_big5, align 8
  store %struct.charset* %117, %struct.charset** %charset, align 8
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.158, %if.end.104
  %118 = load %struct.charset*, %struct.charset** %charset, align 8
  %id162 = getelementptr inbounds %struct.charset, %struct.charset* %118, i32 0, i32 0
  %119 = load i32, i32* %id162, align 4
  %120 = load i32, i32* @charset_ascii, align 4
  %cmp163 = icmp ne i32 %119, %120
  br i1 %cmp163, label %land.lhs.true.165, label %if.end.187

land.lhs.true.165:                                ; preds = %if.end.161
  %121 = load i32, i32* %last_id, align 4
  %122 = load %struct.charset*, %struct.charset** %charset, align 8
  %id166 = getelementptr inbounds %struct.charset, %struct.charset* %122, i32 0, i32 0
  %123 = load i32, i32* %id166, align 4
  %cmp167 = icmp ne i32 %121, %123
  br i1 %cmp167, label %if.then.169, label %if.end.187

if.then.169:                                      ; preds = %land.lhs.true.165
  %124 = load i32, i32* %last_id, align 4
  %125 = load i32, i32* @charset_ascii, align 4
  %cmp170 = icmp ne i32 %124, %125
  br i1 %cmp170, label %if.then.172, label %if.end.185

if.then.172:                                      ; preds = %if.then.169
  br label %do.body.173

do.body.173:                                      ; preds = %if.then.172
  br label %do.body.174

do.body.174:                                      ; preds = %do.body.173
  %126 = load i32*, i32** %charbuf, align 8
  %incdec.ptr175 = getelementptr inbounds i32, i32* %126, i32 1
  store i32* %incdec.ptr175, i32** %charbuf, align 8
  store i32 -4, i32* %126, align 4
  %127 = load i32*, i32** %charbuf, align 8
  %incdec.ptr176 = getelementptr inbounds i32, i32* %127, i32 1
  store i32* %incdec.ptr176, i32** %charbuf, align 8
  store i32 3, i32* %127, align 4
  %128 = load i64, i64* %char_offset, align 8
  %129 = load i64, i64* %last_offset, align 8
  %sub177 = sub nsw i64 %128, %129
  %conv178 = trunc i64 %sub177 to i32
  %130 = load i32*, i32** %charbuf, align 8
  %incdec.ptr179 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr179, i32** %charbuf, align 8
  store i32 %conv178, i32* %130, align 4
  %131 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %131, i32 0, i32 1
  %bf.load180 = load i32, i32* %annotated, align 8
  %bf.clear181 = and i32 %bf.load180, -8388609
  %bf.set = or i32 %bf.clear181, 8388608
  store i32 %bf.set, i32* %annotated, align 8
  br label %do.end.182

do.end.182:                                       ; preds = %do.body.174
  %132 = load i32, i32* %last_id, align 4
  %133 = load i32*, i32** %charbuf, align 8
  %incdec.ptr183 = getelementptr inbounds i32, i32* %133, i32 1
  store i32* %incdec.ptr183, i32** %charbuf, align 8
  store i32 %132, i32* %133, align 4
  br label %do.end.184

do.end.184:                                       ; preds = %do.end.182
  br label %if.end.185

if.end.185:                                       ; preds = %do.end.184, %if.then.169
  %134 = load %struct.charset*, %struct.charset** %charset, align 8
  %id186 = getelementptr inbounds %struct.charset, %struct.charset* %134, i32 0, i32 0
  %135 = load i32, i32* %id186, align 4
  store i32 %135, i32* %last_id, align 4
  %136 = load i64, i64* %char_offset, align 8
  store i64 %136, i64* %last_offset, align 8
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.185, %land.lhs.true.165, %if.end.161
  br label %do.body.188

do.body.188:                                      ; preds = %if.end.187
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body.188
  %137 = load i32, i32* %c, align 4
  %add = add i32 %137, 0
  %cmp189 = icmp ult i32 %add, 128
  br i1 %cmp189, label %land.lhs.true.195, label %cond.false.203

cond.false:                                       ; preds = %do.body.188
  %138 = load i32, i32* %c, align 4
  %conv191 = sext i32 %138 to i64
  %add192 = add i64 %conv191, 0
  %cmp193 = icmp ult i64 %add192, 128
  br i1 %cmp193, label %land.lhs.true.195, label %cond.false.203

land.lhs.true.195:                                ; preds = %cond.false, %cond.true
  %139 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %139, i32 0, i32 5
  %bf.load196 = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr197 = lshr i8 %bf.load196, 2
  %bf.clear198 = and i8 %bf.lshr197, 1
  %bf.cast199 = trunc i8 %bf.clear198 to i1
  br i1 %bf.cast199, label %cond.true.201, label %cond.false.203

cond.true.201:                                    ; preds = %land.lhs.true.195
  %140 = load i32, i32* %c, align 4
  %conv202 = sext i32 %140 to i64
  br label %cond.end.276

cond.false.203:                                   ; preds = %land.lhs.true.195, %cond.false, %cond.true
  %141 = load i32, i32* %c, align 4
  %142 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %142, i32 0, i32 10
  %143 = load i32, i32* %min_code, align 4
  %cmp204 = icmp ult i32 %141, %143
  br i1 %cmp204, label %cond.true.209, label %lor.lhs.false.206

lor.lhs.false.206:                                ; preds = %cond.false.203
  %144 = load i32, i32* %c, align 4
  %145 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_code = getelementptr inbounds %struct.charset, %struct.charset* %145, i32 0, i32 11
  %146 = load i32, i32* %max_code, align 4
  %cmp207 = icmp ugt i32 %144, %146
  br i1 %cmp207, label %cond.true.209, label %cond.false.210

cond.true.209:                                    ; preds = %lor.lhs.false.206, %cond.false.203
  br label %cond.end.274

cond.false.210:                                   ; preds = %lor.lhs.false.206
  %147 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %147, i32 0, i32 5
  %bf.load211 = load i8, i8* %unified_p, align 8
  %bf.lshr212 = lshr i8 %bf.load211, 5
  %bf.clear213 = and i8 %bf.lshr212, 1
  %bf.cast214 = trunc i8 %bf.clear213 to i1
  br i1 %bf.cast214, label %cond.true.216, label %cond.false.219

cond.true.216:                                    ; preds = %cond.false.210
  %148 = load %struct.charset*, %struct.charset** %charset, align 8
  %149 = load i32, i32* %c, align 4
  %call217 = call i32 @decode_char(%struct.charset* %148, i32 %149)
  %conv218 = sext i32 %call217 to i64
  br label %cond.end.272

cond.false.219:                                   ; preds = %cond.false.210
  %150 = load %struct.charset*, %struct.charset** %charset, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %150, i32 0, i32 9
  %151 = load i32, i32* %method, align 4
  %cmp220 = icmp eq i32 %151, 0
  br i1 %cmp220, label %cond.true.222, label %cond.false.234

cond.true.222:                                    ; preds = %cond.false.219
  %152 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %152, i32 0, i32 5
  %bf.load223 = load i8, i8* %code_linear_p, align 8
  %bf.clear224 = and i8 %bf.load223, 1
  %bf.cast225 = trunc i8 %bf.clear224 to i1
  br i1 %bf.cast225, label %cond.true.227, label %cond.false.231

cond.true.227:                                    ; preds = %cond.true.222
  %153 = load i32, i32* %c, align 4
  %154 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code228 = getelementptr inbounds %struct.charset, %struct.charset* %154, i32 0, i32 10
  %155 = load i32, i32* %min_code228, align 4
  %sub229 = sub i32 %153, %155
  %156 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %156, i32 0, i32 17
  %157 = load i32, i32* %code_offset, align 4
  %add230 = add nsw i32 %sub229, %157
  br label %cond.end

cond.false.231:                                   ; preds = %cond.true.222
  %158 = load %struct.charset*, %struct.charset** %charset, align 8
  %159 = load i32, i32* %c, align 4
  %call232 = call i32 @decode_char(%struct.charset* %158, i32 %159)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.231, %cond.true.227
  %cond = phi i32 [ %add230, %cond.true.227 ], [ %call232, %cond.false.231 ]
  %conv233 = sext i32 %cond to i64
  br label %cond.end.270

cond.false.234:                                   ; preds = %cond.false.219
  %160 = load %struct.charset*, %struct.charset** %charset, align 8
  %method235 = getelementptr inbounds %struct.charset, %struct.charset* %160, i32 0, i32 9
  %161 = load i32, i32* %method235, align 4
  %cmp236 = icmp eq i32 %161, 1
  br i1 %cmp236, label %cond.true.238, label %cond.false.265

cond.true.238:                                    ; preds = %cond.false.234
  %162 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p239 = getelementptr inbounds %struct.charset, %struct.charset* %162, i32 0, i32 5
  %bf.load240 = load i8, i8* %code_linear_p239, align 8
  %bf.clear241 = and i8 %bf.load240, 1
  %bf.cast242 = trunc i8 %bf.clear241 to i1
  br i1 %bf.cast242, label %land.lhs.true.244, label %cond.false.260

land.lhs.true.244:                                ; preds = %cond.true.238
  %163 = load i64, i64* @Vcharset_hash_table, align 8
  %call245 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %163)
  %164 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %164, i32 0, i32 1
  %165 = load i64, i64* %hash_index, align 8
  %call246 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call245, i64 %165)
  %call247 = call i64 @AREF(i64 %call246, i64 4)
  %call248 = call zeroext i1 @VECTORP(i64 %call247)
  br i1 %call248, label %cond.true.250, label %cond.false.260

cond.true.250:                                    ; preds = %land.lhs.true.244
  %166 = load i64, i64* @Vcharset_hash_table, align 8
  %call251 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %166)
  %167 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index252 = getelementptr inbounds %struct.charset, %struct.charset* %167, i32 0, i32 1
  %168 = load i64, i64* %hash_index252, align 8
  %call253 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call251, i64 %168)
  %call254 = call i64 @AREF(i64 %call253, i64 4)
  %169 = load i32, i32* %c, align 4
  %170 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code255 = getelementptr inbounds %struct.charset, %struct.charset* %170, i32 0, i32 10
  %171 = load i32, i32* %min_code255, align 4
  %sub256 = sub i32 %169, %171
  %conv257 = zext i32 %sub256 to i64
  %call258 = call i64 @AREF(i64 %call254, i64 %conv257)
  %shr259 = ashr i64 %call258, 2
  br label %cond.end.263

cond.false.260:                                   ; preds = %land.lhs.true.244, %cond.true.238
  %172 = load %struct.charset*, %struct.charset** %charset, align 8
  %173 = load i32, i32* %c, align 4
  %call261 = call i32 @decode_char(%struct.charset* %172, i32 %173)
  %conv262 = sext i32 %call261 to i64
  br label %cond.end.263

cond.end.263:                                     ; preds = %cond.false.260, %cond.true.250
  %cond264 = phi i64 [ %shr259, %cond.true.250 ], [ %conv262, %cond.false.260 ]
  br label %cond.end.268

cond.false.265:                                   ; preds = %cond.false.234
  %174 = load %struct.charset*, %struct.charset** %charset, align 8
  %175 = load i32, i32* %c, align 4
  %call266 = call i32 @decode_char(%struct.charset* %174, i32 %175)
  %conv267 = sext i32 %call266 to i64
  br label %cond.end.268

cond.end.268:                                     ; preds = %cond.false.265, %cond.end.263
  %cond269 = phi i64 [ %cond264, %cond.end.263 ], [ %conv267, %cond.false.265 ]
  br label %cond.end.270

cond.end.270:                                     ; preds = %cond.end.268, %cond.end
  %cond271 = phi i64 [ %conv233, %cond.end ], [ %cond269, %cond.end.268 ]
  br label %cond.end.272

cond.end.272:                                     ; preds = %cond.end.270, %cond.true.216
  %cond273 = phi i64 [ %conv218, %cond.true.216 ], [ %cond271, %cond.end.270 ]
  br label %cond.end.274

cond.end.274:                                     ; preds = %cond.end.272, %cond.true.209
  %cond275 = phi i64 [ -1, %cond.true.209 ], [ %cond273, %cond.end.272 ]
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.end.274, %cond.true.201
  %cond277 = phi i64 [ %conv202, %cond.true.201 ], [ %cond275, %cond.end.274 ]
  %conv278 = trunc i64 %cond277 to i32
  store i32 %conv278, i32* %c, align 4
  %176 = load i8, i8* @charset_map_loaded, align 1
  %tobool279 = trunc i8 %176 to i1
  br i1 %tobool279, label %land.lhs.true.281, label %if.end.288

land.lhs.true.281:                                ; preds = %cond.end.276
  %177 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call282 = call i64 @coding_change_source(%struct.coding_system* %177)
  store i64 %call282, i64* %offset, align 8
  %tobool283 = icmp ne i64 %call282, 0
  br i1 %tobool283, label %if.then.284, label %if.end.288

if.then.284:                                      ; preds = %land.lhs.true.281
  %178 = load i64, i64* %offset, align 8
  %179 = load i8*, i8** %src, align 8
  %add.ptr285 = getelementptr inbounds i8, i8* %179, i64 %178
  store i8* %add.ptr285, i8** %src, align 8
  %180 = load i64, i64* %offset, align 8
  %181 = load i8*, i8** %src_base, align 8
  %add.ptr286 = getelementptr inbounds i8, i8* %181, i64 %180
  store i8* %add.ptr286, i8** %src_base, align 8
  %182 = load i64, i64* %offset, align 8
  %183 = load i8*, i8** %src_end, align 8
  %add.ptr287 = getelementptr inbounds i8, i8* %183, i64 %182
  store i8* %add.ptr287, i8** %src_end, align 8
  br label %if.end.288

if.end.288:                                       ; preds = %if.then.284, %land.lhs.true.281, %cond.end.276
  br label %do.end.289

do.end.289:                                       ; preds = %if.end.288
  %184 = load i32, i32* %c, align 4
  %185 = load i32*, i32** %charbuf, align 8
  %incdec.ptr290 = getelementptr inbounds i32, i32* %185, i32 1
  store i32* %incdec.ptr290, i32** %charbuf, align 8
  store i32 %184, i32* %185, align 4
  %186 = load i64, i64* %char_offset, align 8
  %inc291 = add nsw i64 %186, 1
  store i64 %inc291, i64* %char_offset, align 8
  br label %while.body

invalid_code:                                     ; preds = %if.then.157, %if.then.110, %if.then.59
  %187 = load i8*, i8** %src_base, align 8
  store i8* %187, i8** %src, align 8
  %188 = load i64, i64* %consumed_chars_base, align 8
  store i64 %188, i64* %consumed_chars, align 8
  br label %do.body.292

do.body.292:                                      ; preds = %invalid_code
  %189 = load i8*, i8** %src, align 8
  %190 = load i8*, i8** %src_end, align 8
  %cmp293 = icmp eq i8* %189, %190
  br i1 %cmp293, label %if.then.295, label %if.end.300

if.then.295:                                      ; preds = %do.body.292
  %191 = load i8*, i8** %src_base, align 8
  %192 = load i8*, i8** %src, align 8
  %cmp296 = icmp ult i8* %191, %192
  br i1 %cmp296, label %if.then.298, label %if.end.299

if.then.298:                                      ; preds = %if.then.295
  %193 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %193, i32 1)
  br label %if.end.299

if.end.299:                                       ; preds = %if.then.298, %if.then.295
  br label %no_more_source

if.end.300:                                       ; preds = %do.body.292
  %194 = load i8*, i8** %src, align 8
  %incdec.ptr301 = getelementptr inbounds i8, i8* %194, i32 1
  store i8* %incdec.ptr301, i8** %src, align 8
  %195 = load i8, i8* %194, align 1
  %conv302 = zext i8 %195 to i32
  store i32 %conv302, i32* %c, align 4
  %196 = load i8, i8* %multibytep, align 1
  %tobool303 = trunc i8 %196 to i1
  br i1 %tobool303, label %land.lhs.true.305, label %if.end.323

land.lhs.true.305:                                ; preds = %if.end.300
  %197 = load i32, i32* %c, align 4
  %and306 = and i32 %197, 128
  %tobool307 = icmp ne i32 %and306, 0
  br i1 %tobool307, label %if.then.308, label %if.end.323

if.then.308:                                      ; preds = %land.lhs.true.305
  %198 = load i32, i32* %c, align 4
  %and309 = and i32 %198, 254
  %cmp310 = icmp eq i32 %and309, 192
  br i1 %cmp310, label %if.then.312, label %if.else.318

if.then.312:                                      ; preds = %if.then.308
  %199 = load i32, i32* %c, align 4
  %and313 = and i32 %199, 1
  %shl314 = shl i32 %and313, 6
  %200 = load i8*, i8** %src, align 8
  %incdec.ptr315 = getelementptr inbounds i8, i8* %200, i32 1
  store i8* %incdec.ptr315, i8** %src, align 8
  %201 = load i8, i8* %200, align 1
  %conv316 = zext i8 %201 to i32
  %or317 = or i32 %shl314, %conv316
  store i32 %or317, i32* %c, align 4
  br label %if.end.322

if.else.318:                                      ; preds = %if.then.308
  %202 = load i8*, i8** %src, align 8
  %incdec.ptr319 = getelementptr inbounds i8, i8* %202, i32 -1
  store i8* %incdec.ptr319, i8** %src, align 8
  %203 = load i8*, i8** %src, align 8
  %call320 = call i32 @string_char(i8* %203, i8** %src, i32* null)
  %sub321 = sub nsw i32 0, %call320
  store i32 %sub321, i32* %c, align 4
  %204 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %204, i32 3)
  br label %if.end.322

if.end.322:                                       ; preds = %if.else.318, %if.then.312
  br label %if.end.323

if.end.323:                                       ; preds = %if.end.322, %land.lhs.true.305, %if.end.300
  %205 = load i64, i64* %consumed_chars, align 8
  %inc324 = add nsw i64 %205, 1
  store i64 %inc324, i64* %consumed_chars, align 8
  br label %do.end.325

do.end.325:                                       ; preds = %if.end.323
  %206 = load i32, i32* %c, align 4
  %cmp326 = icmp slt i32 %206, 0
  br i1 %cmp326, label %cond.true.328, label %cond.false.330

cond.true.328:                                    ; preds = %do.end.325
  %207 = load i32, i32* %c, align 4
  %sub329 = sub nsw i32 0, %207
  br label %cond.end.332

cond.false.330:                                   ; preds = %do.end.325
  %208 = load i32, i32* %c, align 4
  %add331 = add nsw i32 %208, 4194048
  br label %cond.end.332

cond.end.332:                                     ; preds = %cond.false.330, %cond.true.328
  %cond333 = phi i32 [ %sub329, %cond.true.328 ], [ %add331, %cond.false.330 ]
  %209 = load i32*, i32** %charbuf, align 8
  %incdec.ptr334 = getelementptr inbounds i32, i32* %209, i32 1
  store i32* %incdec.ptr334, i32** %charbuf, align 8
  store i32 %cond333, i32* %209, align 4
  %210 = load i64, i64* %char_offset, align 8
  %inc335 = add nsw i64 %210, 1
  store i64 %inc335, i64* %char_offset, align 8
  br label %while.body

while.end:                                        ; preds = %if.end
  br label %no_more_source

no_more_source:                                   ; preds = %while.end, %if.end.299, %if.end.119, %if.end.77, %if.end.35
  %211 = load i32, i32* %last_id, align 4
  %212 = load i32, i32* @charset_ascii, align 4
  %cmp336 = icmp ne i32 %211, %212
  br i1 %cmp336, label %if.then.338, label %if.end.353

if.then.338:                                      ; preds = %no_more_source
  br label %do.body.339

do.body.339:                                      ; preds = %if.then.338
  br label %do.body.340

do.body.340:                                      ; preds = %do.body.339
  %213 = load i32*, i32** %charbuf, align 8
  %incdec.ptr341 = getelementptr inbounds i32, i32* %213, i32 1
  store i32* %incdec.ptr341, i32** %charbuf, align 8
  store i32 -4, i32* %213, align 4
  %214 = load i32*, i32** %charbuf, align 8
  %incdec.ptr342 = getelementptr inbounds i32, i32* %214, i32 1
  store i32* %incdec.ptr342, i32** %charbuf, align 8
  store i32 3, i32* %214, align 4
  %215 = load i64, i64* %char_offset, align 8
  %216 = load i64, i64* %last_offset, align 8
  %sub343 = sub nsw i64 %215, %216
  %conv344 = trunc i64 %sub343 to i32
  %217 = load i32*, i32** %charbuf, align 8
  %incdec.ptr345 = getelementptr inbounds i32, i32* %217, i32 1
  store i32* %incdec.ptr345, i32** %charbuf, align 8
  store i32 %conv344, i32* %217, align 4
  %218 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated346 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %218, i32 0, i32 1
  %bf.load347 = load i32, i32* %annotated346, align 8
  %bf.clear348 = and i32 %bf.load347, -8388609
  %bf.set349 = or i32 %bf.clear348, 8388608
  store i32 %bf.set349, i32* %annotated346, align 8
  br label %do.end.350

do.end.350:                                       ; preds = %do.body.340
  %219 = load i32, i32* %last_id, align 4
  %220 = load i32*, i32** %charbuf, align 8
  %incdec.ptr351 = getelementptr inbounds i32, i32* %220, i32 1
  store i32* %incdec.ptr351, i32** %charbuf, align 8
  store i32 %219, i32* %220, align 4
  br label %do.end.352

do.end.352:                                       ; preds = %do.end.350
  br label %if.end.353

if.end.353:                                       ; preds = %do.end.352, %no_more_source
  %221 = load i64, i64* %consumed_chars_base, align 8
  %222 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %222, i32 0, i32 11
  %223 = load i64, i64* %consumed_char, align 8
  %add354 = add nsw i64 %223, %221
  store i64 %add354, i64* %consumed_char, align 8
  %224 = load i8*, i8** %src_base, align 8
  %225 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source355 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %225, i32 0, i32 17
  %226 = load i8*, i8** %source355, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %224 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %226 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %227 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed356 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %227, i32 0, i32 10
  store i64 %sub.ptr.sub, i64* %consumed356, align 8
  %228 = load i32*, i32** %charbuf, align 8
  %229 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf357 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %229, i32 0, i32 23
  %230 = load i32*, i32** %charbuf357, align 8
  %sub.ptr.lhs.cast358 = ptrtoint i32* %228 to i64
  %sub.ptr.rhs.cast359 = ptrtoint i32* %230 to i64
  %sub.ptr.sub360 = sub i64 %sub.ptr.lhs.cast358, %sub.ptr.rhs.cast359
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub360, 4
  %conv361 = trunc i64 %sub.ptr.div to i32
  %231 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used362 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %231, i32 0, i32 25
  store i32 %conv361, i32* %charbuf_used362, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @encode_coding_big5(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %multibytep = alloca i8, align 1
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %safe_room = alloca i32, align 4
  %produced_chars = alloca i64, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %val = alloca i64, align 8
  %ascii_compatible = alloca i8, align 1
  %charset_big5 = alloca %struct.charset*, align 8
  %c = alloca i32, align 4
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %code = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %offset = alloca i64, align 8
  %offset125 = alloca i64, align 8
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %ch152 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 23
  %2 = load i32*, i32** %charbuf1, align 8
  store i32* %2, i32** %charbuf, align 8
  %3 = load i32*, i32** %charbuf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 25
  %5 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 8
  %9 = load i64, i64* %produced, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %dst, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 22
  %11 = load i8*, i8** %destination3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 20
  %13 = load i64, i64* %dst_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %dst_end, align 8
  store i32 4, i32* %safe_room, align 4
  store i64 0, i64* %produced_chars, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id, align 8
  %call5 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %16)
  %call6 = call i64 @AREF(i64 %call5, i64 0)
  store i64 %call6, i64* %attrs, align 8
  %17 = load i64, i64* %attrs, align 8
  %call7 = call i64 @AREF(i64 %17, i64 4)
  store i64 %call7, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %18 = load i64, i64* %charset_list, align 8
  %sub = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %21 = load i64, i64* %cdr, align 8
  store i64 %21, i64* %val, align 8
  %22 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %23 = load i64, i64* %val, align 8
  %sub8 = sub nsw i64 %23, 3
  %24 = inttoptr i64 %sub8 to i8*
  %25 = bitcast i8* %24 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %25, i32 0, i32 0
  %26 = load i64, i64* %car, align 8
  %shr = ashr i64 %26, 2
  %add.ptr9 = getelementptr inbounds %struct.charset, %struct.charset* %22, i64 %shr
  store %struct.charset* %add.ptr9, %struct.charset** %charset_big5, align 8
  %27 = load i64, i64* %attrs, align 8
  %call10 = call i64 @AREF(i64 %27, i64 5)
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call10, %call11
  %lnot = xor i1 %cmp, true
  %frombool12 = zext i1 %lnot to i8
  store i8 %frombool12, i8* %ascii_compatible, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end.265, %do.end
  %28 = load i32*, i32** %charbuf, align 8
  %29 = load i32*, i32** %charbuf_end, align 8
  %cmp13 = icmp ult i32* %28, %29
  br i1 %cmp13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.14

do.body.14:                                       ; preds = %while.body
  %30 = load i8*, i8** %dst, align 8
  %31 = load i32, i32* %safe_room, align 4
  %idx.ext15 = sext i32 %31 to i64
  %add.ptr16 = getelementptr inbounds i8, i8* %30, i64 %idx.ext15
  %32 = load i8*, i8** %dst_end, align 8
  %cmp17 = icmp uge i8* %add.ptr16, %32
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %do.body.14
  %33 = load i32*, i32** %charbuf_end, align 8
  %34 = load i32*, i32** %charbuf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %33 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %34 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %35 = load i32, i32* %safe_room, align 4
  %conv = sext i32 %35 to i64
  %add = add nsw i64 %sub.ptr.div, %conv
  store i64 %add, i64* %more_bytes, align 8
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %37 = load i64, i64* %more_bytes, align 8
  %38 = load i8*, i8** %dst, align 8
  %call18 = call i8* @alloc_destination(%struct.coding_system* %36, i64 %37, i8* %38)
  store i8* %call18, i8** %dst, align 8
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination19 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %39, i32 0, i32 22
  %40 = load i8*, i8** %destination19, align 8
  %41 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes20 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %41, i32 0, i32 20
  %42 = load i64, i64* %dst_bytes20, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %40, i64 %42
  store i8* %add.ptr21, i8** %dst_end, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body.14
  br label %do.end.22

do.end.22:                                        ; preds = %if.end
  %43 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %43, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %c, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end.22
  %45 = load i32, i32* %c, align 4
  %add23 = add i32 %45, 0
  %cmp24 = icmp ult i32 %add23, 128
  br i1 %cmp24, label %land.lhs.true, label %if.else

cond.false:                                       ; preds = %do.end.22
  %46 = load i32, i32* %c, align 4
  %conv26 = sext i32 %46 to i64
  %add27 = add i64 %conv26, 0
  %cmp28 = icmp ult i64 %add27, 128
  br i1 %cmp28, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %47 = load i8, i8* %ascii_compatible, align 1
  %tobool = trunc i8 %47 to i1
  br i1 %tobool, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %land.lhs.true
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.31
  %48 = load i64, i64* %produced_chars, align 8
  %inc = add nsw i64 %48, 1
  store i64 %inc, i64* %produced_chars, align 8
  %49 = load i32, i32* %c, align 4
  %conv33 = trunc i32 %49 to i8
  %50 = load i8*, i8** %dst, align 8
  %incdec.ptr34 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr34, i8** %dst, align 8
  store i8 %conv33, i8* %50, align 1
  br label %do.end.35

do.end.35:                                        ; preds = %do.body.32
  br label %if.end.265

if.else:                                          ; preds = %land.lhs.true, %cond.false, %cond.true
  %51 = load i32, i32* %c, align 4
  %cmp36 = icmp sgt i32 %51, 4194175
  br i1 %cmp36, label %if.then.38, label %if.else.100

if.then.38:                                       ; preds = %if.else
  %52 = load i32, i32* %c, align 4
  %cmp39 = icmp sgt i32 %52, 4194175
  br i1 %cmp39, label %cond.true.41, label %cond.false.43

cond.true.41:                                     ; preds = %if.then.38
  %53 = load i32, i32* %c, align 4
  %sub42 = sub nsw i32 %53, 4194048
  br label %cond.end

cond.false.43:                                    ; preds = %if.then.38
  %54 = load i32, i32* %c, align 4
  %and = and i32 %54, 255
  br label %cond.end

cond.end:                                         ; preds = %cond.false.43, %cond.true.41
  %cond = phi i32 [ %sub42, %cond.true.41 ], [ %and, %cond.false.43 ]
  store i32 %cond, i32* %c, align 4
  br label %do.body.44

do.body.44:                                       ; preds = %cond.end
  %55 = load i64, i64* %produced_chars, align 8
  %inc45 = add nsw i64 %55, 1
  store i64 %inc45, i64* %produced_chars, align 8
  %56 = load i8, i8* %multibytep, align 1
  %tobool46 = trunc i8 %56 to i1
  br i1 %tobool46, label %if.then.47, label %if.else.95

if.then.47:                                       ; preds = %do.body.44
  %57 = load i32, i32* %c, align 4
  store i32 %57, i32* %ch, align 4
  %58 = load i32, i32* %ch, align 4
  %cmp48 = icmp uge i32 %58, 128
  br i1 %cmp48, label %if.then.50, label %if.end.52

if.then.50:                                       ; preds = %if.then.47
  %59 = load i32, i32* %ch, align 4
  %add51 = add i32 %59, 4194048
  store i32 %add51, i32* %ch, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.50, %if.then.47
  br label %do.body.53

do.body.53:                                       ; preds = %if.end.52
  %60 = load i32, i32* %ch, align 4
  %cmp54 = icmp ule i32 %60, 127
  br i1 %cmp54, label %if.then.56, label %if.else.59

if.then.56:                                       ; preds = %do.body.53
  %61 = load i32, i32* %ch, align 4
  %conv57 = trunc i32 %61 to i8
  %62 = load i8*, i8** %dst, align 8
  %incdec.ptr58 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr58, i8** %dst, align 8
  store i8 %conv57, i8* %62, align 1
  br label %if.end.93

if.else.59:                                       ; preds = %do.body.53
  %63 = load i32, i32* %ch, align 4
  %cmp60 = icmp ule i32 %63, 2047
  br i1 %cmp60, label %if.then.62, label %if.else.70

if.then.62:                                       ; preds = %if.else.59
  %64 = load i32, i32* %ch, align 4
  %shr63 = lshr i32 %64, 6
  %or = or i32 192, %shr63
  %conv64 = trunc i32 %or to i8
  %65 = load i8*, i8** %dst, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %incdec.ptr65, i8** %dst, align 8
  store i8 %conv64, i8* %65, align 1
  %66 = load i32, i32* %ch, align 4
  %and66 = and i32 %66, 63
  %or67 = or i32 128, %and66
  %conv68 = trunc i32 %or67 to i8
  %67 = load i8*, i8** %dst, align 8
  %incdec.ptr69 = getelementptr inbounds i8, i8* %67, i32 1
  store i8* %incdec.ptr69, i8** %dst, align 8
  store i8 %conv68, i8* %67, align 1
  br label %if.end.92

if.else.70:                                       ; preds = %if.else.59
  %68 = load i32, i32* %ch, align 4
  %cmp71 = icmp ule i32 %68, 65535
  br i1 %cmp71, label %if.then.73, label %if.else.87

if.then.73:                                       ; preds = %if.else.70
  %69 = load i32, i32* %ch, align 4
  %shr74 = lshr i32 %69, 12
  %or75 = or i32 224, %shr74
  %conv76 = trunc i32 %or75 to i8
  %70 = load i8*, i8** %dst, align 8
  %incdec.ptr77 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr77, i8** %dst, align 8
  store i8 %conv76, i8* %70, align 1
  %71 = load i32, i32* %ch, align 4
  %shr78 = lshr i32 %71, 6
  %and79 = and i32 %shr78, 63
  %or80 = or i32 128, %and79
  %conv81 = trunc i32 %or80 to i8
  %72 = load i8*, i8** %dst, align 8
  %incdec.ptr82 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %incdec.ptr82, i8** %dst, align 8
  store i8 %conv81, i8* %72, align 1
  %73 = load i32, i32* %ch, align 4
  %and83 = and i32 %73, 63
  %or84 = or i32 128, %and83
  %conv85 = trunc i32 %or84 to i8
  %74 = load i8*, i8** %dst, align 8
  %incdec.ptr86 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr86, i8** %dst, align 8
  store i8 %conv85, i8* %74, align 1
  br label %if.end.91

if.else.87:                                       ; preds = %if.else.70
  %75 = load i32, i32* %ch, align 4
  %76 = load i8*, i8** %dst, align 8
  %call88 = call i32 @char_string(i32 %75, i8* %76)
  %77 = load i8*, i8** %dst, align 8
  %idx.ext89 = sext i32 %call88 to i64
  %add.ptr90 = getelementptr inbounds i8, i8* %77, i64 %idx.ext89
  store i8* %add.ptr90, i8** %dst, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.87, %if.then.73
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %if.then.62
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.then.56
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %if.end.98

if.else.95:                                       ; preds = %do.body.44
  %78 = load i32, i32* %c, align 4
  %conv96 = trunc i32 %78 to i8
  %79 = load i8*, i8** %dst, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr97, i8** %dst, align 8
  store i8 %conv96, i8* %79, align 1
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.95, %do.end.94
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  br label %if.end.264

if.else.100:                                      ; preds = %if.else
  br label %do.body.101

do.body.101:                                      ; preds = %if.else.100
  store i8 0, i8* @charset_map_loaded, align 1
  %80 = load i32, i32* %c, align 4
  %81 = load i64, i64* %charset_list, align 8
  %call102 = call %struct.charset* @char_charset(i32 %80, i64 %81, i32* %code)
  store %struct.charset* %call102, %struct.charset** %charset, align 8
  %82 = load i8, i8* @charset_map_loaded, align 1
  %tobool103 = trunc i8 %82 to i1
  br i1 %tobool103, label %land.lhs.true.105, label %if.end.111

land.lhs.true.105:                                ; preds = %do.body.101
  %83 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call106 = call i64 @coding_change_destination(%struct.coding_system* %83)
  store i64 %call106, i64* %offset, align 8
  %tobool107 = icmp ne i64 %call106, 0
  br i1 %tobool107, label %if.then.108, label %if.end.111

if.then.108:                                      ; preds = %land.lhs.true.105
  %84 = load i64, i64* %offset, align 8
  %85 = load i8*, i8** %dst, align 8
  %add.ptr109 = getelementptr inbounds i8, i8* %85, i64 %84
  store i8* %add.ptr109, i8** %dst, align 8
  %86 = load i64, i64* %offset, align 8
  %87 = load i8*, i8** %dst_end, align 8
  %add.ptr110 = getelementptr inbounds i8, i8* %87, i64 %86
  store i8* %add.ptr110, i8** %dst_end, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.then.108, %land.lhs.true.105, %do.body.101
  br label %do.end.112

do.end.112:                                       ; preds = %if.end.111
  %88 = load %struct.charset*, %struct.charset** %charset, align 8
  %tobool113 = icmp ne %struct.charset* %88, null
  br i1 %tobool113, label %if.end.138, label %if.then.114

if.then.114:                                      ; preds = %do.end.112
  %89 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %89, i32 0, i32 1
  %bf.load115 = load i32, i32* %mode, align 8
  %bf.lshr116 = lshr i32 %bf.load115, 14
  %bf.clear117 = and i32 %bf.lshr116, 31
  %and118 = and i32 %bf.clear117, 16
  %tobool119 = icmp ne i32 %and118, 0
  br i1 %tobool119, label %if.then.120, label %if.else.123

if.then.120:                                      ; preds = %if.then.114
  store i32 63, i32* %code, align 4
  %90 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %91 = load i32, i32* @charset_ascii, align 4
  %idx.ext121 = sext i32 %91 to i64
  %add.ptr122 = getelementptr inbounds %struct.charset, %struct.charset* %90, i64 %idx.ext121
  store %struct.charset* %add.ptr122, %struct.charset** %charset, align 8
  br label %if.end.137

if.else.123:                                      ; preds = %if.then.114
  %92 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %default_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %92, i32 0, i32 28
  %93 = load i32, i32* %default_char, align 4
  store i32 %93, i32* %c, align 4
  br label %do.body.124

do.body.124:                                      ; preds = %if.else.123
  store i8 0, i8* @charset_map_loaded, align 1
  %94 = load i32, i32* %c, align 4
  %95 = load i64, i64* %charset_list, align 8
  %call126 = call %struct.charset* @char_charset(i32 %94, i64 %95, i32* %code)
  store %struct.charset* %call126, %struct.charset** %charset, align 8
  %96 = load i8, i8* @charset_map_loaded, align 1
  %tobool127 = trunc i8 %96 to i1
  br i1 %tobool127, label %land.lhs.true.129, label %if.end.135

land.lhs.true.129:                                ; preds = %do.body.124
  %97 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call130 = call i64 @coding_change_destination(%struct.coding_system* %97)
  store i64 %call130, i64* %offset125, align 8
  %tobool131 = icmp ne i64 %call130, 0
  br i1 %tobool131, label %if.then.132, label %if.end.135

if.then.132:                                      ; preds = %land.lhs.true.129
  %98 = load i64, i64* %offset125, align 8
  %99 = load i8*, i8** %dst, align 8
  %add.ptr133 = getelementptr inbounds i8, i8* %99, i64 %98
  store i8* %add.ptr133, i8** %dst, align 8
  %100 = load i64, i64* %offset125, align 8
  %101 = load i8*, i8** %dst_end, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %101, i64 %100
  store i8* %add.ptr134, i8** %dst_end, align 8
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.132, %land.lhs.true.129, %do.body.124
  br label %do.end.136

do.end.136:                                       ; preds = %if.end.135
  br label %if.end.137

if.end.137:                                       ; preds = %do.end.136, %if.then.120
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.137, %do.end.112
  %102 = load i32, i32* %code, align 4
  %103 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %103, i32 0, i32 15
  %104 = load i32, i32* %invalid_code, align 4
  %cmp139 = icmp eq i32 %102, %104
  br i1 %cmp139, label %if.then.141, label %if.end.142

if.then.141:                                      ; preds = %if.end.138
  call void @emacs_abort() #6
  unreachable

if.end.142:                                       ; preds = %if.end.138
  %105 = load %struct.charset*, %struct.charset** %charset, align 8
  %106 = load %struct.charset*, %struct.charset** %charset_big5, align 8
  %cmp143 = icmp eq %struct.charset* %105, %106
  br i1 %cmp143, label %if.then.145, label %if.else.256

if.then.145:                                      ; preds = %if.end.142
  %107 = load i32, i32* %code, align 4
  %shr146 = lshr i32 %107, 8
  store i32 %shr146, i32* %c1, align 4
  %108 = load i32, i32* %code, align 4
  %and147 = and i32 %108, 255
  store i32 %and147, i32* %c2, align 4
  br label %do.body.148

do.body.148:                                      ; preds = %if.then.145
  %109 = load i64, i64* %produced_chars, align 8
  %add149 = add nsw i64 %109, 2
  store i64 %add149, i64* %produced_chars, align 8
  %110 = load i8, i8* %multibytep, align 1
  %tobool150 = trunc i8 %110 to i1
  br i1 %tobool150, label %if.then.151, label %if.else.249

if.then.151:                                      ; preds = %do.body.148
  %111 = load i32, i32* %c1, align 4
  store i32 %111, i32* %ch152, align 4
  %112 = load i32, i32* %ch152, align 4
  %cmp153 = icmp uge i32 %112, 128
  br i1 %cmp153, label %if.then.155, label %if.end.157

if.then.155:                                      ; preds = %if.then.151
  %113 = load i32, i32* %ch152, align 4
  %add156 = add i32 %113, 4194048
  store i32 %add156, i32* %ch152, align 4
  br label %if.end.157

if.end.157:                                       ; preds = %if.then.155, %if.then.151
  br label %do.body.158

do.body.158:                                      ; preds = %if.end.157
  %114 = load i32, i32* %ch152, align 4
  %cmp159 = icmp ule i32 %114, 127
  br i1 %cmp159, label %if.then.161, label %if.else.164

if.then.161:                                      ; preds = %do.body.158
  %115 = load i32, i32* %ch152, align 4
  %conv162 = trunc i32 %115 to i8
  %116 = load i8*, i8** %dst, align 8
  %incdec.ptr163 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr163, i8** %dst, align 8
  store i8 %conv162, i8* %116, align 1
  br label %if.end.199

if.else.164:                                      ; preds = %do.body.158
  %117 = load i32, i32* %ch152, align 4
  %cmp165 = icmp ule i32 %117, 2047
  br i1 %cmp165, label %if.then.167, label %if.else.176

if.then.167:                                      ; preds = %if.else.164
  %118 = load i32, i32* %ch152, align 4
  %shr168 = lshr i32 %118, 6
  %or169 = or i32 192, %shr168
  %conv170 = trunc i32 %or169 to i8
  %119 = load i8*, i8** %dst, align 8
  %incdec.ptr171 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %incdec.ptr171, i8** %dst, align 8
  store i8 %conv170, i8* %119, align 1
  %120 = load i32, i32* %ch152, align 4
  %and172 = and i32 %120, 63
  %or173 = or i32 128, %and172
  %conv174 = trunc i32 %or173 to i8
  %121 = load i8*, i8** %dst, align 8
  %incdec.ptr175 = getelementptr inbounds i8, i8* %121, i32 1
  store i8* %incdec.ptr175, i8** %dst, align 8
  store i8 %conv174, i8* %121, align 1
  br label %if.end.198

if.else.176:                                      ; preds = %if.else.164
  %122 = load i32, i32* %ch152, align 4
  %cmp177 = icmp ule i32 %122, 65535
  br i1 %cmp177, label %if.then.179, label %if.else.193

if.then.179:                                      ; preds = %if.else.176
  %123 = load i32, i32* %ch152, align 4
  %shr180 = lshr i32 %123, 12
  %or181 = or i32 224, %shr180
  %conv182 = trunc i32 %or181 to i8
  %124 = load i8*, i8** %dst, align 8
  %incdec.ptr183 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr183, i8** %dst, align 8
  store i8 %conv182, i8* %124, align 1
  %125 = load i32, i32* %ch152, align 4
  %shr184 = lshr i32 %125, 6
  %and185 = and i32 %shr184, 63
  %or186 = or i32 128, %and185
  %conv187 = trunc i32 %or186 to i8
  %126 = load i8*, i8** %dst, align 8
  %incdec.ptr188 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr188, i8** %dst, align 8
  store i8 %conv187, i8* %126, align 1
  %127 = load i32, i32* %ch152, align 4
  %and189 = and i32 %127, 63
  %or190 = or i32 128, %and189
  %conv191 = trunc i32 %or190 to i8
  %128 = load i8*, i8** %dst, align 8
  %incdec.ptr192 = getelementptr inbounds i8, i8* %128, i32 1
  store i8* %incdec.ptr192, i8** %dst, align 8
  store i8 %conv191, i8* %128, align 1
  br label %if.end.197

if.else.193:                                      ; preds = %if.else.176
  %129 = load i32, i32* %ch152, align 4
  %130 = load i8*, i8** %dst, align 8
  %call194 = call i32 @char_string(i32 %129, i8* %130)
  %131 = load i8*, i8** %dst, align 8
  %idx.ext195 = sext i32 %call194 to i64
  %add.ptr196 = getelementptr inbounds i8, i8* %131, i64 %idx.ext195
  store i8* %add.ptr196, i8** %dst, align 8
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.193, %if.then.179
  br label %if.end.198

if.end.198:                                       ; preds = %if.end.197, %if.then.167
  br label %if.end.199

if.end.199:                                       ; preds = %if.end.198, %if.then.161
  br label %do.end.200

do.end.200:                                       ; preds = %if.end.199
  %132 = load i32, i32* %c2, align 4
  store i32 %132, i32* %ch152, align 4
  %133 = load i32, i32* %ch152, align 4
  %cmp201 = icmp uge i32 %133, 128
  br i1 %cmp201, label %if.then.203, label %if.end.205

if.then.203:                                      ; preds = %do.end.200
  %134 = load i32, i32* %ch152, align 4
  %add204 = add i32 %134, 4194048
  store i32 %add204, i32* %ch152, align 4
  br label %if.end.205

if.end.205:                                       ; preds = %if.then.203, %do.end.200
  br label %do.body.206

do.body.206:                                      ; preds = %if.end.205
  %135 = load i32, i32* %ch152, align 4
  %cmp207 = icmp ule i32 %135, 127
  br i1 %cmp207, label %if.then.209, label %if.else.212

if.then.209:                                      ; preds = %do.body.206
  %136 = load i32, i32* %ch152, align 4
  %conv210 = trunc i32 %136 to i8
  %137 = load i8*, i8** %dst, align 8
  %incdec.ptr211 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr211, i8** %dst, align 8
  store i8 %conv210, i8* %137, align 1
  br label %if.end.247

if.else.212:                                      ; preds = %do.body.206
  %138 = load i32, i32* %ch152, align 4
  %cmp213 = icmp ule i32 %138, 2047
  br i1 %cmp213, label %if.then.215, label %if.else.224

if.then.215:                                      ; preds = %if.else.212
  %139 = load i32, i32* %ch152, align 4
  %shr216 = lshr i32 %139, 6
  %or217 = or i32 192, %shr216
  %conv218 = trunc i32 %or217 to i8
  %140 = load i8*, i8** %dst, align 8
  %incdec.ptr219 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %incdec.ptr219, i8** %dst, align 8
  store i8 %conv218, i8* %140, align 1
  %141 = load i32, i32* %ch152, align 4
  %and220 = and i32 %141, 63
  %or221 = or i32 128, %and220
  %conv222 = trunc i32 %or221 to i8
  %142 = load i8*, i8** %dst, align 8
  %incdec.ptr223 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr223, i8** %dst, align 8
  store i8 %conv222, i8* %142, align 1
  br label %if.end.246

if.else.224:                                      ; preds = %if.else.212
  %143 = load i32, i32* %ch152, align 4
  %cmp225 = icmp ule i32 %143, 65535
  br i1 %cmp225, label %if.then.227, label %if.else.241

if.then.227:                                      ; preds = %if.else.224
  %144 = load i32, i32* %ch152, align 4
  %shr228 = lshr i32 %144, 12
  %or229 = or i32 224, %shr228
  %conv230 = trunc i32 %or229 to i8
  %145 = load i8*, i8** %dst, align 8
  %incdec.ptr231 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr231, i8** %dst, align 8
  store i8 %conv230, i8* %145, align 1
  %146 = load i32, i32* %ch152, align 4
  %shr232 = lshr i32 %146, 6
  %and233 = and i32 %shr232, 63
  %or234 = or i32 128, %and233
  %conv235 = trunc i32 %or234 to i8
  %147 = load i8*, i8** %dst, align 8
  %incdec.ptr236 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %incdec.ptr236, i8** %dst, align 8
  store i8 %conv235, i8* %147, align 1
  %148 = load i32, i32* %ch152, align 4
  %and237 = and i32 %148, 63
  %or238 = or i32 128, %and237
  %conv239 = trunc i32 %or238 to i8
  %149 = load i8*, i8** %dst, align 8
  %incdec.ptr240 = getelementptr inbounds i8, i8* %149, i32 1
  store i8* %incdec.ptr240, i8** %dst, align 8
  store i8 %conv239, i8* %149, align 1
  br label %if.end.245

if.else.241:                                      ; preds = %if.else.224
  %150 = load i32, i32* %ch152, align 4
  %151 = load i8*, i8** %dst, align 8
  %call242 = call i32 @char_string(i32 %150, i8* %151)
  %152 = load i8*, i8** %dst, align 8
  %idx.ext243 = sext i32 %call242 to i64
  %add.ptr244 = getelementptr inbounds i8, i8* %152, i64 %idx.ext243
  store i8* %add.ptr244, i8** %dst, align 8
  br label %if.end.245

if.end.245:                                       ; preds = %if.else.241, %if.then.227
  br label %if.end.246

if.end.246:                                       ; preds = %if.end.245, %if.then.215
  br label %if.end.247

if.end.247:                                       ; preds = %if.end.246, %if.then.209
  br label %do.end.248

do.end.248:                                       ; preds = %if.end.247
  br label %if.end.254

if.else.249:                                      ; preds = %do.body.148
  %153 = load i32, i32* %c1, align 4
  %conv250 = trunc i32 %153 to i8
  %154 = load i8*, i8** %dst, align 8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %154, i32 1
  store i8* %incdec.ptr251, i8** %dst, align 8
  store i8 %conv250, i8* %154, align 1
  %155 = load i32, i32* %c2, align 4
  %conv252 = trunc i32 %155 to i8
  %156 = load i8*, i8** %dst, align 8
  %incdec.ptr253 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %incdec.ptr253, i8** %dst, align 8
  store i8 %conv252, i8* %156, align 1
  br label %if.end.254

if.end.254:                                       ; preds = %if.else.249, %do.end.248
  br label %do.end.255

do.end.255:                                       ; preds = %if.end.254
  br label %if.end.263

if.else.256:                                      ; preds = %if.end.142
  br label %do.body.257

do.body.257:                                      ; preds = %if.else.256
  %157 = load i64, i64* %produced_chars, align 8
  %inc258 = add nsw i64 %157, 1
  store i64 %inc258, i64* %produced_chars, align 8
  %158 = load i32, i32* %code, align 4
  %and259 = and i32 %158, 127
  %conv260 = trunc i32 %and259 to i8
  %159 = load i8*, i8** %dst, align 8
  %incdec.ptr261 = getelementptr inbounds i8, i8* %159, i32 1
  store i8* %incdec.ptr261, i8** %dst, align 8
  store i8 %conv260, i8* %159, align 1
  br label %do.end.262

do.end.262:                                       ; preds = %do.body.257
  br label %if.end.263

if.end.263:                                       ; preds = %do.end.262, %do.end.255
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.263, %do.end.99
  br label %if.end.265

if.end.265:                                       ; preds = %if.end.264, %do.end.35
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %160 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %160, i32 0)
  %161 = load i64, i64* %produced_chars, align 8
  %162 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %162, i32 0, i32 9
  %163 = load i64, i64* %produced_char, align 8
  %add266 = add nsw i64 %163, %161
  store i64 %add266, i64* %produced_char, align 8
  %164 = load i8*, i8** %dst, align 8
  %165 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination267 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %165, i32 0, i32 22
  %166 = load i8*, i8** %destination267, align 8
  %sub.ptr.lhs.cast268 = ptrtoint i8* %164 to i64
  %sub.ptr.rhs.cast269 = ptrtoint i8* %166 to i64
  %sub.ptr.sub270 = sub i64 %sub.ptr.lhs.cast268, %sub.ptr.rhs.cast269
  %167 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced271 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %167, i32 0, i32 8
  store i64 %sub.ptr.sub270, i64* %produced271, align 8
  ret i1 false
}

; Function Attrs: nounwind uwtable
define i64 @coding_charset_list(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %flags = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %0)
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 0
  %2 = load i64, i64* %id, align 8
  %call1 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %2)
  %call2 = call i64 @AREF(i64 %call1, i64 0)
  store i64 %call2, i64* %attrs, align 8
  %3 = load i64, i64* %attrs, align 8
  %call3 = call i64 @AREF(i64 %3, i64 4)
  store i64 %call3, i64* %charset_list, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load i64, i64* %attrs, align 8
  %call4 = call i64 @AREF(i64 %4, i64 3)
  %call5 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp = icmp eq i64 %call4, %call5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %5 = load i64, i64* %attrs, align 8
  %call6 = call i64 @AREF(i64 %5, i64 23)
  %shr = ashr i64 %call6, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %flags, align 4
  %6 = load i32, i32* %flags, align 4
  %and = and i32 %6, 1048576
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then
  %7 = load i64, i64* @Viso_2022_charset_list, align 8
  store i64 %7, i64* %charset_list, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.then
  br label %if.end.14

if.else:                                          ; preds = %do.end
  %8 = load i64, i64* %attrs, align 8
  %call8 = call i64 @AREF(i64 %8, i64 3)
  %call9 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp10 = icmp eq i64 %call8, %call9
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.else
  %9 = load i64, i64* @Vemacs_mule_charset_list, align 8
  store i64 %9, i64* %charset_list, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %if.else
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  %10 = load i64, i64* %charset_list, align 8
  ret i64 %10
}

; Function Attrs: nounwind uwtable
define i64 @coding_system_charset_list(i64 %coding_system) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %id = alloca i64, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %flags = alloca i32, align 4
  store i64 %coding_system, i64* %coding_system.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %0)
  %1 = load i64, i64* %coding_system.addr, align 8
  %call1 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call, i64 %1, i64* null)
  store i64 %call1, i64* %id, align 8
  %2 = load i64, i64* %id, align 8
  %cmp = icmp slt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %3 = load i64, i64* %coding_system.addr, align 8
  %call2 = call i64 @Fcheck_coding_system(i64 %3)
  %4 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call3 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %4)
  %5 = load i64, i64* %coding_system.addr, align 8
  %call4 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call3, i64 %5, i64* null)
  store i64 %call4, i64* %id, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %6 = load i64, i64* %id, align 8
  %cmp5 = icmp slt i64 %6, 0
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %call7 = call i64 @builtin_lisp_symbol(i32 280)
  %7 = load i64, i64* %coding_system.addr, align 8
  %8 = call i64 @wrong_type_argument(i64 %call7, i64 %7) #6
  unreachable

if.end.8:                                         ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.8
  %9 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call9 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %9)
  %10 = load i64, i64* %id, align 8
  %call10 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call9, i64 %10)
  %call11 = call i64 @AREF(i64 %call10, i64 0)
  store i64 %call11, i64* %attrs, align 8
  %11 = load i64, i64* %attrs, align 8
  %call12 = call i64 @AREF(i64 %11, i64 3)
  %call13 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp14 = icmp eq i64 %call12, %call13
  br i1 %cmp14, label %if.then.15, label %if.else.20

if.then.15:                                       ; preds = %do.end
  %12 = load i64, i64* %attrs, align 8
  %call16 = call i64 @AREF(i64 %12, i64 23)
  %shr = ashr i64 %call16, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %flags, align 4
  %13 = load i32, i32* %flags, align 4
  %and = and i32 %13, 1048576
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then.15
  %14 = load i64, i64* @Viso_2022_charset_list, align 8
  store i64 %14, i64* %charset_list, align 8
  br label %if.end.19

if.else:                                          ; preds = %if.then.15
  %15 = load i64, i64* %attrs, align 8
  %call18 = call i64 @AREF(i64 %15, i64 4)
  store i64 %call18, i64* %charset_list, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.17
  br label %if.end.29

if.else.20:                                       ; preds = %do.end
  %16 = load i64, i64* %attrs, align 8
  %call21 = call i64 @AREF(i64 %16, i64 3)
  %call22 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp23 = icmp eq i64 %call21, %call22
  br i1 %cmp23, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %if.else.20
  %17 = load i64, i64* @Vemacs_mule_charset_list, align 8
  store i64 %17, i64* %charset_list, align 8
  br label %if.end.28

if.else.26:                                       ; preds = %if.else.20
  %18 = load i64, i64* %attrs, align 8
  %call27 = call i64 @AREF(i64 %18, i64 4)
  store i64 %call27, i64* %charset_list, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.26, %if.then.25
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.end.19
  %19 = load i64, i64* %charset_list, align 8
  ret i64 %19
}

; Function Attrs: nounwind uwtable
define i64 @raw_text_coding_system(i64 %coding_system) #0 {
entry:
  %retval = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %raw_text_eol_type = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 788)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %coding_system.addr, align 8
  %2 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fgethash(i64 %1, i64 %2, i64 %call2)
  store i64 %call3, i64* %spec, align 8
  %3 = load i64, i64* %spec, align 8
  %call4 = call i64 @AREF(i64 %3, i64 0)
  store i64 %call4, i64* %attrs, align 8
  %4 = load i64, i64* %attrs, align 8
  %call5 = call i64 @AREF(i64 %4, i64 3)
  %call6 = call i64 @builtin_lisp_symbol(i32 788)
  %cmp7 = icmp eq i64 %call5, %call6
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  %5 = load i64, i64* %coding_system.addr, align 8
  store i64 %5, i64* %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %6 = load i64, i64* %spec, align 8
  %call10 = call i64 @AREF(i64 %6, i64 2)
  store i64 %call10, i64* %eol_type, align 8
  %7 = load i64, i64* %eol_type, align 8
  %call11 = call zeroext i1 @VECTORP(i64 %7)
  br i1 %call11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.end.9
  %call13 = call i64 @builtin_lisp_symbol(i32 788)
  store i64 %call13, i64* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.9
  %call15 = call i64 @builtin_lisp_symbol(i32 788)
  %8 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %call17 = call i64 @Fgethash(i64 %call15, i64 %8, i64 %call16)
  store i64 %call17, i64* %spec, align 8
  %9 = load i64, i64* %spec, align 8
  %call18 = call i64 @AREF(i64 %9, i64 2)
  store i64 %call18, i64* %raw_text_eol_type, align 8
  %10 = load i64, i64* %eol_type, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp20 = icmp eq i64 %10, %call19
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.14
  %11 = load i64, i64* %raw_text_eol_type, align 8
  %call21 = call i64 @AREF(i64 %11, i64 0)
  br label %cond.end.28

cond.false:                                       ; preds = %if.end.14
  %12 = load i64, i64* %eol_type, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp23 = icmp eq i64 %12, %call22
  br i1 %cmp23, label %cond.true.24, label %cond.false.26

cond.true.24:                                     ; preds = %cond.false
  %13 = load i64, i64* %raw_text_eol_type, align 8
  %call25 = call i64 @AREF(i64 %13, i64 1)
  br label %cond.end

cond.false.26:                                    ; preds = %cond.false
  %14 = load i64, i64* %raw_text_eol_type, align 8
  %call27 = call i64 @AREF(i64 %14, i64 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.26, %cond.true.24
  %cond = phi i64 [ %call25, %cond.true.24 ], [ %call27, %cond.false.26 ]
  br label %cond.end.28

cond.end.28:                                      ; preds = %cond.end, %cond.true
  %cond29 = phi i64 [ %call21, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond29, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.28, %if.then.12, %if.then.8, %if.then
  %15 = load i64, i64* %retval
  ret i64 %15
}

declare i64 @Fgethash(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @raw_text_coding_system_p(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 30
  %1 = load void (%struct.coding_system*)*, void (%struct.coding_system*)** %decoder, align 8
  %cmp = icmp eq void (%struct.coding_system*)* %1, @decode_coding_raw_text
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 31
  %3 = load i1 (%struct.coding_system*)*, i1 (%struct.coding_system*)** %encoder, align 8
  %cmp1 = icmp eq i1 (%struct.coding_system*)* %3, @encode_coding_raw_text
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %cond = select i1 %4, i32 1, i32 0
  %tobool = icmp ne i32 %cond, 0
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define i64 @coding_inherit_eol_type(i64 %coding_system, i64 %parent) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %parent.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %parent_eol_type = alloca i64, align 8
  %parent_spec = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %parent, i64* %parent.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 788)
  store i64 %call1, i64* %coding_system.addr, align 8
  br label %if.end.10

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %2 = load i64, i64* %coding_system.addr, align 8
  %call3 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call2, i64 %2, i64* null)
  %cmp4 = icmp slt i64 %call3, 0
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.body
  %3 = load i64, i64* %coding_system.addr, align 8
  %call5 = call i64 @Fcheck_coding_system(i64 %3)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %call5, %call6
  br i1 %cmp7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %land.lhs.true
  %call9 = call i64 @builtin_lisp_symbol(i32 280)
  %4 = load i64, i64* %coding_system.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call9, i64 %4) #6
  unreachable

if.end:                                           ; preds = %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %if.then
  %6 = load i64, i64* %coding_system.addr, align 8
  %7 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %call12 = call i64 @Fgethash(i64 %6, i64 %7, i64 %call11)
  store i64 %call12, i64* %spec, align 8
  %8 = load i64, i64* %spec, align 8
  %call13 = call i64 @AREF(i64 %8, i64 2)
  store i64 %call13, i64* %eol_type, align 8
  %9 = load i64, i64* %eol_type, align 8
  %call14 = call zeroext i1 @VECTORP(i64 %9)
  br i1 %call14, label %if.then.15, label %if.end.56

if.then.15:                                       ; preds = %if.end.10
  %10 = load i64, i64* %parent.addr, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %10, %call16
  br i1 %cmp17, label %if.else.37, label %if.then.18

if.then.18:                                       ; preds = %if.then.15
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  %11 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call20 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %11)
  %12 = load i64, i64* %parent.addr, align 8
  %call21 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call20, i64 %12, i64* null)
  %cmp22 = icmp slt i64 %call21, 0
  br i1 %cmp22, label %land.lhs.true.23, label %if.end.29

land.lhs.true.23:                                 ; preds = %do.body.19
  %13 = load i64, i64* %parent.addr, align 8
  %call24 = call i64 @Fcheck_coding_system(i64 %13)
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %call24, %call25
  br i1 %cmp26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %land.lhs.true.23
  %call28 = call i64 @builtin_lisp_symbol(i32 280)
  %14 = load i64, i64* %parent.addr, align 8
  %15 = call i64 @wrong_type_argument(i64 %call28, i64 %14) #6
  unreachable

if.end.29:                                        ; preds = %land.lhs.true.23, %do.body.19
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  %16 = load i64, i64* %parent.addr, align 8
  %17 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %call32 = call i64 @Fgethash(i64 %16, i64 %17, i64 %call31)
  store i64 %call32, i64* %parent_spec, align 8
  %18 = load i64, i64* %parent_spec, align 8
  %call33 = call i64 @AREF(i64 %18, i64 2)
  store i64 %call33, i64* %parent_eol_type, align 8
  %19 = load i64, i64* %parent_eol_type, align 8
  %call34 = call zeroext i1 @VECTORP(i64 %19)
  br i1 %call34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %do.end.30
  %20 = load i64, i64* @system_eol_type, align 8
  store i64 %20, i64* %parent_eol_type, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %do.end.30
  br label %if.end.38

if.else.37:                                       ; preds = %if.then.15
  %21 = load i64, i64* @system_eol_type, align 8
  store i64 %21, i64* %parent_eol_type, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.37, %if.end.36
  %22 = load i64, i64* %parent_eol_type, align 8
  %call39 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp40 = icmp eq i64 %22, %call39
  br i1 %cmp40, label %if.then.41, label %if.else.43

if.then.41:                                       ; preds = %if.end.38
  %23 = load i64, i64* %eol_type, align 8
  %call42 = call i64 @AREF(i64 %23, i64 0)
  store i64 %call42, i64* %coding_system.addr, align 8
  br label %if.end.55

if.else.43:                                       ; preds = %if.end.38
  %24 = load i64, i64* %parent_eol_type, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp45 = icmp eq i64 %24, %call44
  br i1 %cmp45, label %if.then.46, label %if.else.48

if.then.46:                                       ; preds = %if.else.43
  %25 = load i64, i64* %eol_type, align 8
  %call47 = call i64 @AREF(i64 %25, i64 1)
  store i64 %call47, i64* %coding_system.addr, align 8
  br label %if.end.54

if.else.48:                                       ; preds = %if.else.43
  %26 = load i64, i64* %parent_eol_type, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 635)
  %cmp50 = icmp eq i64 %26, %call49
  br i1 %cmp50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.else.48
  %27 = load i64, i64* %eol_type, align 8
  %call52 = call i64 @AREF(i64 %27, i64 2)
  store i64 %call52, i64* %coding_system.addr, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.51, %if.else.48
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %if.then.46
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.41
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.end.10
  %28 = load i64, i64* %coding_system.addr, align 8
  ret i64 %28
}

; Function Attrs: nounwind uwtable
define i64 @complement_process_encoding_system(i64 %coding_system) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %coding_base = alloca i64, align 8
  %eol_base = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %coding_base, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %eol_base, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp eq i32 %1, 1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 62), align 8
  %call3 = call i64 @CDR_SAFE(i64 %2)
  store i64 %call3, i64* %coding_system.addr, align 8
  br label %if.end.7

if.else:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %3, 2
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  %call6 = call i64 @preferred_coding_system()
  store i64 %call6, i64* %coding_system.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.else
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  %4 = load i64, i64* %coding_system.addr, align 8
  %5 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fgethash(i64 %4, i64 %5, i64 %call8)
  store i64 %call9, i64* %spec, align 8
  %6 = load i64, i64* %spec, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %6, %call10
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.7
  br label %for.inc

if.end.13:                                        ; preds = %if.end.7
  %7 = load i64, i64* %spec, align 8
  %call14 = call i64 @AREF(i64 %7, i64 0)
  store i64 %call14, i64* %attrs, align 8
  %8 = load i64, i64* %coding_base, align 8
  %call15 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp16 = icmp eq i64 %8, %call15
  br i1 %cmp16, label %land.lhs.true, label %if.end.22

land.lhs.true:                                    ; preds = %if.end.13
  %9 = load i64, i64* %attrs, align 8
  %call17 = call i64 @AREF(i64 %9, i64 3)
  %call18 = call i64 @builtin_lisp_symbol(i32 958)
  %cmp19 = icmp eq i64 %call17, %call18
  br i1 %cmp19, label %if.end.22, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true
  %10 = load i64, i64* %attrs, align 8
  %call21 = call i64 @AREF(i64 %10, i64 0)
  store i64 %call21, i64* %coding_base, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.20, %land.lhs.true, %if.end.13
  %11 = load i64, i64* %eol_base, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp24 = icmp eq i64 %11, %call23
  br i1 %cmp24, label %land.lhs.true.25, label %if.end.29

land.lhs.true.25:                                 ; preds = %if.end.22
  %12 = load i64, i64* %spec, align 8
  %call26 = call i64 @AREF(i64 %12, i64 2)
  %call27 = call zeroext i1 @VECTORP(i64 %call26)
  br i1 %call27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %land.lhs.true.25
  %13 = load i64, i64* %coding_system.addr, align 8
  store i64 %13, i64* %eol_base, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %land.lhs.true.25, %if.end.22
  %14 = load i64, i64* %coding_base, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp31 = icmp eq i64 %14, %call30
  br i1 %cmp31, label %if.end.36, label %land.lhs.true.32

land.lhs.true.32:                                 ; preds = %if.end.29
  %15 = load i64, i64* %eol_base, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp34 = icmp eq i64 %15, %call33
  br i1 %cmp34, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true.32
  br label %for.end

if.end.36:                                        ; preds = %land.lhs.true.32, %if.end.29
  br label %for.inc

for.inc:                                          ; preds = %if.end.36, %if.then.12
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.35, %for.cond
  %17 = load i32, i32* %i, align 4
  %cmp37 = icmp sgt i32 %17, 0
  br i1 %cmp37, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %for.end
  %18 = load i64, i64* %coding_base, align 8
  %19 = load i64, i64* %eol_base, align 8
  %call39 = call i64 @coding_inherit_eol_type(i64 %18, i64 %19)
  store i64 %call39, i64* %coding_system.addr, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.38, %for.end
  %20 = load i64, i64* %coding_system.addr, align 8
  ret i64 %20
}

declare i64 @CDR_SAFE(i64) #1

; Function Attrs: nounwind uwtable
define i64 @preferred_coding_system() #0 {
entry:
  %id = alloca i32, align 4
  %0 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 0), align 4
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom
  %id1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx, i32 0, i32 0
  %1 = load i64, i64* %id1, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %id, align 4
  %2 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %2)
  %3 = load i32, i32* %id, align 4
  %conv2 = sext i32 %3 to i64
  %call3 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call, i64 %conv2)
  ret i64 %call3
}

; Function Attrs: nounwind uwtable
define i64 @code_conversion_save(i1 zeroext %with_work_buf, i1 zeroext %multibyte) #0 {
entry:
  %with_work_buf.addr = alloca i8, align 1
  %multibyte.addr = alloca i8, align 1
  %workbuf = alloca i64, align 8
  %frombool = zext i1 %with_work_buf to i8
  store i8 %frombool, i8* %with_work_buf.addr, align 1
  %frombool1 = zext i1 %multibyte to i8
  store i8 %frombool1, i8* %multibyte.addr, align 1
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %workbuf, align 8
  %0 = load i8, i8* %with_work_buf.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %multibyte.addr, align 1
  %tobool2 = trunc i8 %1 to i1
  %call3 = call i64 @make_conversion_work_buffer(i1 zeroext %tobool2)
  store i64 %call3, i64* %workbuf, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = call i64 @Fcurrent_buffer()
  %2 = load i64, i64* %workbuf, align 8
  %call5 = call i64 @Fcons(i64 %call4, i64 %2)
  call void @record_unwind_protect(void (i64)* @code_conversion_restore, i64 %call5)
  %3 = load i64, i64* %workbuf, align 8
  ret i64 %3
}

; Function Attrs: nounwind uwtable
define internal i64 @make_conversion_work_buffer(i1 zeroext %multibyte) #0 {
entry:
  %multibyte.addr = alloca i8, align 1
  %name = alloca i64, align 8
  %workbuf = alloca i64, align 8
  %current = alloca %struct.buffer*, align 8
  %frombool = zext i1 %multibyte to i8
  store i8 %frombool, i8* %multibyte.addr, align 1
  %0 = load i8, i8* @reused_workbuf_in_use, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @Vcode_conversion_workbuf_name, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fgenerate_new_buffer_name(i64 %1, i64 %call)
  store i64 %call1, i64* %name, align 8
  %2 = load i64, i64* %name, align 8
  %call2 = call i64 @Fget_buffer_create(i64 %2)
  store i64 %call2, i64* %workbuf, align 8
  br label %if.end.7

if.else:                                          ; preds = %entry
  store i8 1, i8* @reused_workbuf_in_use, align 1
  %3 = load i64, i64* @Vcode_conversion_reused_workbuf, align 8
  %call3 = call i64 @Fbuffer_live_p(i64 %3)
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call3, %call4
  br i1 %cmp, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  %4 = load i64, i64* @Vcode_conversion_workbuf_name, align 8
  %call6 = call i64 @Fget_buffer_create(i64 %4)
  store i64 %call6, i64* @Vcode_conversion_reused_workbuf, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.else
  %5 = load i64, i64* @Vcode_conversion_reused_workbuf, align 8
  store i64 %5, i64* %workbuf, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %6, %struct.buffer** %current, align 8
  %7 = load i64, i64* %workbuf, align 8
  %call8 = call %struct.buffer* @XBUFFER(i64 %7)
  call void @set_buffer_internal(%struct.buffer* %call8)
  %call9 = call i64 @builtin_lisp_symbol(i32 544)
  %call10 = call i64 @Fmake_local_variable(i64 %call9)
  %call11 = call i64 @builtin_lisp_symbol(i32 901)
  %call12 = call i64 @Fset(i64 %call10, i64 %call11)
  %call13 = call i64 @Ferase_buffer()
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_undo_list(%struct.buffer* %8, i64 %call14)
  %9 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %10 = load i8, i8* %multibyte.addr, align 1
  %tobool15 = trunc i8 %10 to i1
  br i1 %tobool15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.7
  %call16 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %if.end.7
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call16, %cond.true ], [ %call17, %cond.false ]
  call void @bset_enable_multibyte_characters(%struct.buffer* %9, i64 %cond)
  %11 = load %struct.buffer*, %struct.buffer** %current, align 8
  call void @set_buffer_internal(%struct.buffer* %11)
  %12 = load i64, i64* %workbuf, align 8
  ret i64 %12
}

declare void @record_unwind_protect(void (i64)*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @code_conversion_restore(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  %current = alloca i64, align 8
  %workbuf = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 0
  %3 = load i64, i64* %car, align 8
  store i64 %3, i64* %current, align 8
  %4 = load i64, i64* %arg.addr, align 8
  %sub1 = sub nsw i64 %4, 3
  %5 = inttoptr i64 %sub1 to i8*
  %6 = bitcast i8* %5 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %6, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %7 = load i64, i64* %cdr, align 8
  store i64 %7, i64* %workbuf, align 8
  %8 = load i64, i64* %workbuf, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %8, %call
  br i1 %cmp, label %if.end.5, label %if.then

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %workbuf, align 8
  %10 = load i64, i64* @Vcode_conversion_reused_workbuf, align 8
  %cmp2 = icmp eq i64 %9, %10
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  store i8 0, i8* @reused_workbuf_in_use, align 1
  br label %if.end

if.else:                                          ; preds = %if.then
  %11 = load i64, i64* %workbuf, align 8
  %call4 = call i64 @Fkill_buffer(i64 %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %entry
  %12 = load i64, i64* %current, align 8
  %call6 = call %struct.buffer* @XBUFFER(i64 %12)
  call void @set_buffer_internal(%struct.buffer* %call6)
  ret void
}

declare i64 @Fcons(i64, i64) #1

declare i64 @Fcurrent_buffer() #1

; Function Attrs: nounwind uwtable
define void @decode_coding_gap(%struct.coding_system* %coding, i64 %chars, i64 %bytes) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %chars.addr = alloca i64, align 8
  %bytes.addr = alloca i64, align 8
  %count = alloca i64, align 8
  %attrs = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %src_end = alloca i8*, align 8
  %src = alloca i8*, align 8
  %src132 = alloca i8*, align 8
  %src_beg = alloca i8*, align 8
  %dst = alloca i8*, align 8
  %diff = alloca i64, align 8
  %prev_Z = alloca i64, align 8
  %prev_Z_BYTE = alloca i64, align 8
  %val = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %chars, i64* %chars.addr, align 8
  store i64 %bytes, i64* %bytes.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %call1 = call i64 @Fcurrent_buffer()
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 16
  store i64 %call1, i64* %src_object, align 8
  %1 = load i64, i64* %chars.addr, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 14
  store i64 %1, i64* %src_chars, align 8
  %3 = load i64, i64* %bytes.addr, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 15
  store i64 %3, i64* %src_bytes, align 8
  %5 = load i64, i64* %chars.addr, align 8
  %sub = sub nsw i64 0, %5
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 12
  store i64 %sub, i64* %src_pos, align 8
  %7 = load i64, i64* %bytes.addr, align 8
  %sub2 = sub nsw i64 0, %7
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 13
  store i64 %sub2, i64* %src_pos_byte, align 8
  %9 = load i64, i64* %chars.addr, align 8
  %10 = load i64, i64* %bytes.addr, align 8
  %cmp = icmp slt i64 %9, %10
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 1
  %12 = zext i1 %cmp to i32
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.shl = shl i32 %12, 19
  %bf.clear = and i32 %bf.load, -524289
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %src_multibyte, align 8
  %bf.result.cast = trunc i32 %12 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 16
  %14 = load i64, i64* %src_object3, align 8
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 21
  store i64 %14, i64* %dst_object, align 8
  %16 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 75
  %17 = load i64, i64* %pt, align 8
  %add = add nsw i64 %17, 0
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %18, i32 0, i32 18
  store i64 %add, i64* %dst_pos, align 8
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 76
  %20 = load i64, i64* %pt_byte, align 8
  %add4 = add nsw i64 %20, 0
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 19
  store i64 %add4, i64* %dst_pos_byte, align 8
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %22, i32 0, i32 39
  %23 = load i64, i64* %enable_multibyte_characters_, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %23, %call5
  %lnot = xor i1 %cmp6, true
  %24 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %24, i32 0, i32 1
  %25 = zext i1 %lnot to i32
  %bf.load7 = load i32, i32* %dst_multibyte, align 8
  %bf.shl8 = shl i32 %25, 20
  %bf.clear9 = and i32 %bf.load7, -1048577
  %bf.set10 = or i32 %bf.clear9, %bf.shl8
  store i32 %bf.set10, i32* %dst_multibyte, align 8
  %bf.result.cast11 = trunc i32 %25 to i8
  %tobool12 = trunc i8 %bf.result.cast11 to i1
  %26 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 5
  store i64 -1, i64* %head_ascii, align 8
  %27 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detected_utf8_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %27, i32 0, i32 7
  store i64 -1, i64* %detected_utf8_chars, align 8
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detected_utf8_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %28, i32 0, i32 6
  store i64 -1, i64* %detected_utf8_bytes, align 8
  %29 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen = getelementptr inbounds %struct.coding_system, %struct.coding_system* %29, i32 0, i32 1
  %bf.load13 = load i32, i32* %eol_seen, align 8
  %bf.clear14 = and i32 %bf.load13, -117440513
  store i32 %bf.clear14, i32* %eol_seen, align 8
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %30, i32 0, i32 1
  %bf.load15 = load i32, i32* %common_flags, align 8
  %bf.clear16 = and i32 %bf.load15, 16383
  %and = and i32 %bf.clear16, 4096
  %tobool17 = icmp ne i32 %and, 0
  br i1 %tobool17, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %31 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @detect_coding(%struct.coding_system* %31)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %32 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call18 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %32)
  %33 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %33, i32 0, i32 0
  %34 = load i64, i64* %id, align 8
  %call19 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call18, i64 %34)
  %call20 = call i64 @AREF(i64 %call19, i64 0)
  store i64 %call20, i64* %attrs, align 8
  %35 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 437), align 1
  %tobool21 = trunc i8 %35 to i1
  br i1 %tobool21, label %if.end.171, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte22 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %36, i32 0, i32 1
  %bf.load23 = load i32, i32* %src_multibyte22, align 8
  %bf.lshr = lshr i32 %bf.load23, 19
  %bf.clear24 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear24 to i1
  br i1 %bf.cast, label %if.end.171, label %land.lhs.true.25

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %37 = load i64, i64* %attrs, align 8
  %call26 = call i64 @AREF(i64 %37, i64 5)
  %call27 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp28 = icmp eq i64 %call26, %call27
  br i1 %cmp28, label %if.end.171, label %land.lhs.true.29

land.lhs.true.29:                                 ; preds = %land.lhs.true.25
  %38 = load i64, i64* %attrs, align 8
  %call30 = call i64 @AREF(i64 %38, i64 9)
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp32 = icmp eq i64 %call30, %call31
  br i1 %cmp32, label %land.lhs.true.33, label %if.end.171

land.lhs.true.33:                                 ; preds = %land.lhs.true.29
  %39 = load i64, i64* %attrs, align 8
  %call34 = call i64 @get_translation_table(i64 %39, i1 zeroext false, i32* null)
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp36 = icmp eq i64 %call34, %call35
  br i1 %cmp36, label %if.then.37, label %if.end.171

if.then.37:                                       ; preds = %land.lhs.true.33
  %40 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii38 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %40, i32 0, i32 5
  %41 = load i64, i64* %head_ascii38, align 8
  store i64 %41, i64* %chars.addr, align 8
  %42 = load i64, i64* %chars.addr, align 8
  %cmp39 = icmp slt i64 %42, 0
  br i1 %cmp39, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %if.then.37
  %43 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call41 = call i64 @check_ascii(%struct.coding_system* %43)
  store i64 %call41, i64* %chars.addr, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.40, %if.then.37
  %44 = load i64, i64* %chars.addr, align 8
  %45 = load i64, i64* %bytes.addr, align 8
  %cmp43 = icmp ne i64 %44, %45
  br i1 %cmp43, label %if.then.44, label %if.end.85

if.then.44:                                       ; preds = %if.end.42
  %46 = load i64, i64* %attrs, align 8
  %call45 = call i64 @AREF(i64 %46, i64 3)
  %call46 = call i64 @builtin_lisp_symbol(i32 988)
  %cmp47 = icmp eq i64 %call45, %call46
  br i1 %cmp47, label %land.lhs.true.48, label %if.else.83

land.lhs.true.48:                                 ; preds = %if.then.44
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detected_utf8_bytes49 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %47, i32 0, i32 6
  %48 = load i64, i64* %detected_utf8_bytes49, align 8
  %49 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes50 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %49, i32 0, i32 15
  %50 = load i64, i64* %src_bytes50, align 8
  %cmp51 = icmp eq i64 %48, %50
  br i1 %cmp51, label %if.then.52, label %if.else.83

if.then.52:                                       ; preds = %land.lhs.true.48
  %51 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detected_utf8_chars53 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %51, i32 0, i32 7
  %52 = load i64, i64* %detected_utf8_chars53, align 8
  %cmp54 = icmp sge i64 %52, 0
  br i1 %cmp54, label %if.then.55, label %if.else

if.then.55:                                       ; preds = %if.then.52
  %53 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %detected_utf8_chars56 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %53, i32 0, i32 7
  %54 = load i64, i64* %detected_utf8_chars56, align 8
  store i64 %54, i64* %chars.addr, align 8
  br label %if.end.58

if.else:                                          ; preds = %if.then.52
  %55 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call57 = call i64 @check_utf_8(%struct.coding_system* %55)
  store i64 %call57, i64* %chars.addr, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.else, %if.then.55
  %56 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %56, i32 0, i32 3
  %utf_8_bom = bitcast %union.anon* %spec to i32*
  %57 = load i32, i32* %utf_8_bom, align 4
  %cmp59 = icmp ne i32 %57, 1
  br i1 %cmp59, label %land.lhs.true.60, label %if.end.82

land.lhs.true.60:                                 ; preds = %if.end.58
  %58 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii61 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %58, i32 0, i32 5
  %59 = load i64, i64* %head_ascii61, align 8
  %cmp62 = icmp eq i64 %59, 0
  br i1 %cmp62, label %land.lhs.true.63, label %if.end.82

land.lhs.true.63:                                 ; preds = %land.lhs.true.60
  %60 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %60, i32 0, i32 17
  %61 = load i8*, i8** %source, align 8
  %arrayidx = getelementptr inbounds i8, i8* %61, i64 0
  %62 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %62 to i32
  %cmp64 = icmp eq i32 %conv, 239
  br i1 %cmp64, label %land.lhs.true.66, label %if.end.82

land.lhs.true.66:                                 ; preds = %land.lhs.true.63
  %63 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source67 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %63, i32 0, i32 17
  %64 = load i8*, i8** %source67, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %64, i64 1
  %65 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %65 to i32
  %cmp70 = icmp eq i32 %conv69, 187
  br i1 %cmp70, label %land.lhs.true.72, label %if.end.82

land.lhs.true.72:                                 ; preds = %land.lhs.true.66
  %66 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source73 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %66, i32 0, i32 17
  %67 = load i8*, i8** %source73, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %67, i64 2
  %68 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %68 to i32
  %cmp76 = icmp eq i32 %conv75, 191
  br i1 %cmp76, label %if.then.78, label %if.end.82

if.then.78:                                       ; preds = %land.lhs.true.72
  %69 = load i64, i64* %chars.addr, align 8
  %dec = add nsw i64 %69, -1
  store i64 %dec, i64* %chars.addr, align 8
  %70 = load i64, i64* %bytes.addr, align 8
  %sub79 = sub nsw i64 %70, 3
  store i64 %sub79, i64* %bytes.addr, align 8
  %71 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes80 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %71, i32 0, i32 15
  %72 = load i64, i64* %src_bytes80, align 8
  %sub81 = sub nsw i64 %72, 3
  store i64 %sub81, i64* %src_bytes80, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.78, %land.lhs.true.72, %land.lhs.true.66, %land.lhs.true.63, %land.lhs.true.60, %if.end.58
  br label %if.end.84

if.else.83:                                       ; preds = %land.lhs.true.48, %if.then.44
  store i64 -1, i64* %chars.addr, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.83, %if.end.82
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.end.42
  %73 = load i64, i64* %chars.addr, align 8
  %cmp86 = icmp sge i64 %73, 0
  br i1 %cmp86, label %if.then.88, label %if.end.170

if.then.88:                                       ; preds = %if.end.85
  %74 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call89 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %74)
  %75 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id90 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %75, i32 0, i32 0
  %76 = load i64, i64* %id90, align 8
  %call91 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call89, i64 %76)
  %call92 = call i64 @AREF(i64 %call91, i64 2)
  store i64 %call92, i64* %eol_type, align 8
  %77 = load i64, i64* %eol_type, align 8
  %call93 = call zeroext i1 @VECTORP(i64 %77)
  br i1 %call93, label %if.then.94, label %if.end.108

if.then.94:                                       ; preds = %if.then.88
  %78 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen95 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %78, i32 0, i32 1
  %bf.load96 = load i32, i32* %eol_seen95, align 8
  %bf.lshr97 = lshr i32 %bf.load96, 24
  %bf.clear98 = and i32 %bf.lshr97, 7
  %cmp99 = icmp ne i32 %bf.clear98, 0
  br i1 %cmp99, label %if.then.101, label %if.end.107

if.then.101:                                      ; preds = %if.then.94
  %79 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %80 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen102 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %80, i32 0, i32 1
  %bf.load103 = load i32, i32* %eol_seen102, align 8
  %bf.lshr104 = lshr i32 %bf.load103, 24
  %bf.clear105 = and i32 %bf.lshr104, 7
  %call106 = call i64 @adjust_coding_eol_type(%struct.coding_system* %79, i32 %bf.clear105)
  store i64 %call106, i64* %eol_type, align 8
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.101, %if.then.94
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.then.88
  %81 = load i64, i64* %eol_type, align 8
  %call109 = call i64 @builtin_lisp_symbol(i32 635)
  %cmp110 = icmp eq i64 %81, %call109
  br i1 %cmp110, label %if.then.112, label %if.else.127

if.then.112:                                      ; preds = %if.end.108
  %82 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %82, i32 0, i32 73
  %83 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %83, i32 0, i32 0
  %84 = load i8*, i8** %beg, align 8
  %85 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text113 = getelementptr inbounds %struct.buffer, %struct.buffer* %85, i32 0, i32 73
  %86 = load %struct.buffer_text*, %struct.buffer_text** %text113, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %86, i32 0, i32 3
  %87 = load i64, i64* %gpt_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %84, i64 %87
  %88 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text114 = getelementptr inbounds %struct.buffer, %struct.buffer* %88, i32 0, i32 73
  %89 = load %struct.buffer_text*, %struct.buffer_text** %text114, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %89, i32 0, i32 5
  %90 = load i64, i64* %gap_size, align 8
  %add.ptr115 = getelementptr inbounds i8, i8* %add.ptr, i64 %90
  %add.ptr116 = getelementptr inbounds i8, i8* %add.ptr115, i64 -1
  store i8* %add.ptr116, i8** %src_end, align 8
  %91 = load i8*, i8** %src_end, align 8
  %92 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes117 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %92, i32 0, i32 15
  %93 = load i64, i64* %src_bytes117, align 8
  %idx.neg = sub i64 0, %93
  %add.ptr118 = getelementptr inbounds i8, i8* %91, i64 %idx.neg
  store i8* %add.ptr118, i8** %src, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.126, %if.then.112
  %94 = load i8*, i8** %src, align 8
  %95 = load i8*, i8** %src_end, align 8
  %cmp119 = icmp ult i8* %94, %95
  br i1 %cmp119, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %96 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %97 = load i8, i8* %96, align 1
  %conv121 = zext i8 %97 to i32
  %cmp122 = icmp eq i32 %conv121, 13
  br i1 %cmp122, label %if.then.124, label %if.end.126

if.then.124:                                      ; preds = %while.body
  %98 = load i8*, i8** %src, align 8
  %arrayidx125 = getelementptr inbounds i8, i8* %98, i64 -1
  store i8 10, i8* %arrayidx125, align 1
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.124, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.169

if.else.127:                                      ; preds = %if.end.108
  %99 = load i64, i64* %eol_type, align 8
  %call128 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp129 = icmp eq i64 %99, %call128
  br i1 %cmp129, label %if.then.131, label %if.end.168

if.then.131:                                      ; preds = %if.else.127
  %100 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text133 = getelementptr inbounds %struct.buffer, %struct.buffer* %100, i32 0, i32 73
  %101 = load %struct.buffer_text*, %struct.buffer_text** %text133, align 8
  %beg134 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %101, i32 0, i32 0
  %102 = load i8*, i8** %beg134, align 8
  %103 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text135 = getelementptr inbounds %struct.buffer, %struct.buffer* %103, i32 0, i32 73
  %104 = load %struct.buffer_text*, %struct.buffer_text** %text135, align 8
  %gpt_byte136 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %104, i32 0, i32 3
  %105 = load i64, i64* %gpt_byte136, align 8
  %add.ptr137 = getelementptr inbounds i8, i8* %102, i64 %105
  %106 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text138 = getelementptr inbounds %struct.buffer, %struct.buffer* %106, i32 0, i32 73
  %107 = load %struct.buffer_text*, %struct.buffer_text** %text138, align 8
  %gap_size139 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %107, i32 0, i32 5
  %108 = load i64, i64* %gap_size139, align 8
  %add.ptr140 = getelementptr inbounds i8, i8* %add.ptr137, i64 %108
  %add.ptr141 = getelementptr inbounds i8, i8* %add.ptr140, i64 -1
  store i8* %add.ptr141, i8** %src132, align 8
  %109 = load i8*, i8** %src132, align 8
  %110 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes142 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %110, i32 0, i32 15
  %111 = load i64, i64* %src_bytes142, align 8
  %idx.neg143 = sub i64 0, %111
  %add.ptr144 = getelementptr inbounds i8, i8* %109, i64 %idx.neg143
  store i8* %add.ptr144, i8** %src_beg, align 8
  %112 = load i8*, i8** %src132, align 8
  store i8* %112, i8** %dst, align 8
  br label %while.cond.145

while.cond.145:                                   ; preds = %if.end.164, %if.then.131
  %113 = load i8*, i8** %src_beg, align 8
  %114 = load i8*, i8** %src132, align 8
  %cmp146 = icmp ult i8* %113, %114
  br i1 %cmp146, label %while.body.148, label %while.end.165

while.body.148:                                   ; preds = %while.cond.145
  %115 = load i8*, i8** %src132, align 8
  %incdec.ptr149 = getelementptr inbounds i8, i8* %115, i32 -1
  store i8* %incdec.ptr149, i8** %src132, align 8
  %116 = load i8, i8* %incdec.ptr149, align 1
  %117 = load i8*, i8** %dst, align 8
  %incdec.ptr150 = getelementptr inbounds i8, i8* %117, i32 -1
  store i8* %incdec.ptr150, i8** %dst, align 8
  store i8 %116, i8* %incdec.ptr150, align 1
  %118 = load i8*, i8** %src132, align 8
  %119 = load i8, i8* %118, align 1
  %conv151 = zext i8 %119 to i32
  %cmp152 = icmp eq i32 %conv151, 10
  br i1 %cmp152, label %land.lhs.true.154, label %if.end.164

land.lhs.true.154:                                ; preds = %while.body.148
  %120 = load i8*, i8** %src132, align 8
  %121 = load i8*, i8** %src_beg, align 8
  %cmp155 = icmp ugt i8* %120, %121
  br i1 %cmp155, label %land.lhs.true.157, label %if.end.164

land.lhs.true.157:                                ; preds = %land.lhs.true.154
  %122 = load i8*, i8** %src132, align 8
  %arrayidx158 = getelementptr inbounds i8, i8* %122, i64 -1
  %123 = load i8, i8* %arrayidx158, align 1
  %conv159 = zext i8 %123 to i32
  %cmp160 = icmp eq i32 %conv159, 13
  br i1 %cmp160, label %if.then.162, label %if.end.164

if.then.162:                                      ; preds = %land.lhs.true.157
  %124 = load i8*, i8** %src132, align 8
  %incdec.ptr163 = getelementptr inbounds i8, i8* %124, i32 -1
  store i8* %incdec.ptr163, i8** %src132, align 8
  br label %if.end.164

if.end.164:                                       ; preds = %if.then.162, %land.lhs.true.157, %land.lhs.true.154, %while.body.148
  br label %while.cond.145

while.end.165:                                    ; preds = %while.cond.145
  %125 = load i8*, i8** %dst, align 8
  %126 = load i8*, i8** %src132, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %125 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %126 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %diff, align 8
  %127 = load i64, i64* %diff, align 8
  %128 = load i64, i64* %bytes.addr, align 8
  %sub166 = sub nsw i64 %128, %127
  store i64 %sub166, i64* %bytes.addr, align 8
  %129 = load i64, i64* %diff, align 8
  %130 = load i64, i64* %chars.addr, align 8
  %sub167 = sub nsw i64 %130, %129
  store i64 %sub167, i64* %chars.addr, align 8
  br label %if.end.168

if.end.168:                                       ; preds = %while.end.165, %if.else.127
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %while.end
  %131 = load i64, i64* %bytes.addr, align 8
  %132 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %132, i32 0, i32 8
  store i64 %131, i64* %produced, align 8
  %133 = load i64, i64* %chars.addr, align 8
  %134 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %134, i32 0, i32 9
  store i64 %133, i64* %produced_char, align 8
  %135 = load i64, i64* %chars.addr, align 8
  %136 = load i64, i64* %bytes.addr, align 8
  call void @insert_from_gap(i64 %135, i64 %136, i1 zeroext true)
  br label %return

if.end.170:                                       ; preds = %if.end.85
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %land.lhs.true.33, %land.lhs.true.29, %land.lhs.true.25, %land.lhs.true, %if.end
  %call172 = call i64 @code_conversion_save(i1 zeroext false, i1 zeroext false)
  %137 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %137, i32 0, i32 1
  %bf.load173 = load i32, i32* %mode, align 8
  %bf.lshr174 = lshr i32 %bf.load173, 14
  %bf.clear175 = and i32 %bf.lshr174, 31
  %or = or i32 %bf.clear175, 1
  %bf.load176 = load i32, i32* %mode, align 8
  %bf.value = and i32 %or, 31
  %bf.shl177 = shl i32 %bf.value, 14
  %bf.clear178 = and i32 %bf.load176, -507905
  %bf.set179 = or i32 %bf.clear178, %bf.shl177
  store i32 %bf.set179, i32* %mode, align 8
  %138 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text180 = getelementptr inbounds %struct.buffer, %struct.buffer* %138, i32 0, i32 73
  %139 = load %struct.buffer_text*, %struct.buffer_text** %text180, align 8
  %inhibit_shrinking = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %139, i32 0, i32 17
  %bf.load181 = load i8, i8* %inhibit_shrinking, align 8
  %bf.clear182 = and i8 %bf.load181, -2
  %bf.set183 = or i8 %bf.clear182, 1
  store i8 %bf.set183, i8* %inhibit_shrinking, align 8
  %140 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @decode_coding(%struct.coding_system* %140)
  %141 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text184 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 73
  %142 = load %struct.buffer_text*, %struct.buffer_text** %text184, align 8
  %inhibit_shrinking185 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %142, i32 0, i32 17
  %bf.load186 = load i8, i8* %inhibit_shrinking185, align 8
  %bf.clear187 = and i8 %bf.load186, -2
  store i8 %bf.clear187, i8* %inhibit_shrinking185, align 8
  %143 = load i64, i64* %attrs, align 8
  %call188 = call i64 @AREF(i64 %143, i64 9)
  %call189 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp190 = icmp eq i64 %call188, %call189
  br i1 %cmp190, label %if.end.211, label %if.then.192

if.then.192:                                      ; preds = %if.end.171
  %144 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text193 = getelementptr inbounds %struct.buffer, %struct.buffer* %144, i32 0, i32 73
  %145 = load %struct.buffer_text*, %struct.buffer_text** %text193, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %145, i32 0, i32 2
  %146 = load i64, i64* %z, align 8
  store i64 %146, i64* %prev_Z, align 8
  %147 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text194 = getelementptr inbounds %struct.buffer, %struct.buffer* %147, i32 0, i32 73
  %148 = load %struct.buffer_text*, %struct.buffer_text** %text194, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %148, i32 0, i32 4
  %149 = load i64, i64* %z_byte, align 8
  store i64 %149, i64* %prev_Z_BYTE, align 8
  %150 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %151 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos195 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %151, i32 0, i32 18
  %152 = load i64, i64* %dst_pos195, align 8
  %153 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte196 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %153, i32 0, i32 19
  %154 = load i64, i64* %dst_pos_byte196, align 8
  call void @temp_set_point_both(%struct.buffer* %150, i64 %152, i64 %154)
  %155 = load i64, i64* %attrs, align 8
  %call197 = call i64 @AREF(i64 %155, i64 9)
  %156 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char198 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %156, i32 0, i32 9
  %157 = load i64, i64* %produced_char198, align 8
  %shl = shl i64 %157, 2
  %add199 = add i64 %shl, 2
  %call200 = call i64 @call1(i64 %call197, i64 %add199)
  store i64 %call200, i64* %val, align 8
  %158 = load i64, i64* %val, align 8
  call void @CHECK_NATNUM(i64 %158)
  %159 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text201 = getelementptr inbounds %struct.buffer, %struct.buffer* %159, i32 0, i32 73
  %160 = load %struct.buffer_text*, %struct.buffer_text** %text201, align 8
  %z202 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %160, i32 0, i32 2
  %161 = load i64, i64* %z202, align 8
  %162 = load i64, i64* %prev_Z, align 8
  %sub203 = sub nsw i64 %161, %162
  %163 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char204 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %163, i32 0, i32 9
  %164 = load i64, i64* %produced_char204, align 8
  %add205 = add nsw i64 %164, %sub203
  store i64 %add205, i64* %produced_char204, align 8
  %165 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text206 = getelementptr inbounds %struct.buffer, %struct.buffer* %165, i32 0, i32 73
  %166 = load %struct.buffer_text*, %struct.buffer_text** %text206, align 8
  %z_byte207 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %166, i32 0, i32 4
  %167 = load i64, i64* %z_byte207, align 8
  %168 = load i64, i64* %prev_Z_BYTE, align 8
  %sub208 = sub nsw i64 %167, %168
  %169 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced209 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %169, i32 0, i32 8
  %170 = load i64, i64* %produced209, align 8
  %add210 = add nsw i64 %170, %sub208
  store i64 %add210, i64* %produced209, align 8
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.192, %if.end.171
  %171 = load i64, i64* %count, align 8
  %call212 = call i64 @builtin_lisp_symbol(i32 0)
  %call213 = call i64 @unbind_to(i64 %171, i64 %call212)
  br label %return

return:                                           ; preds = %if.end.211, %if.end.169
  ret void
}

declare i64 @SPECPDL_INDEX() #1

; Function Attrs: nounwind uwtable
define internal void @detect_coding(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %saved_mode = alloca i32, align 4
  %found = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %detect_info = alloca %struct.coding_detection_info, align 4
  %null_byte_found = alloca i8, align 1
  %eight_bit_found = alloca i8, align 1
  %inhibit_nbd = alloca i8, align 1
  %inhibit_ied = alloca i8, align 1
  %prefer_utf_8 = alloca i8, align 1
  %category = alloca i32, align 4
  %this = alloca %struct.coding_system*, align 8
  %coding_systems = alloca i64, align 8
  %coding_systems272 = alloca i64, align 8
  %coding_systems361 = alloca i64, align 8
  %detect_info362 = alloca %struct.coding_detection_info, align 4
  %coding_systems416 = alloca i64, align 8
  %detect_info417 = alloca %struct.coding_detection_info, align 4
  %specified_eol = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %mode, align 8
  %bf.lshr = lshr i32 %bf.load, 14
  %bf.clear = and i32 %bf.lshr, 31
  store i32 %bf.clear, i32* %saved_mode, align 4
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %found, align 8
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call1 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 0
  %3 = load i64, i64* %id, align 8
  %call2 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call1, i64 %3)
  %call3 = call i64 @AREF(i64 %call2, i64 2)
  store i64 %call3, i64* %eol_type, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 11
  store i64 0, i64* %consumed_char, align 8
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 10
  store i64 0, i64* %consumed, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 9
  store i64 0, i64* %produced_char, align 8
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 8
  store i64 0, i64* %produced, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %8)
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 17
  %10 = load i8*, i8** %source, align 8
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 15
  %12 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %12
  store i8* %add.ptr, i8** %src_end, align 8
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 1
  %bf.load4 = load i32, i32* %eol_seen, align 8
  %bf.clear5 = and i32 %bf.load4, -117440513
  store i32 %bf.clear5, i32* %eol_seen, align 8
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call6 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id7 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 0
  %16 = load i64, i64* %id7, align 8
  %call8 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call6, i64 %16)
  %call9 = call i64 @AREF(i64 %call8, i64 0)
  %call10 = call i64 @AREF(i64 %call9, i64 3)
  %call11 = call i64 @builtin_lisp_symbol(i32 958)
  %cmp = icmp eq i64 %call10, %call11
  br i1 %cmp, label %if.then, label %if.else.352

if.then:                                          ; preds = %entry
  store i8 0, i8* %null_byte_found, align 1
  store i8 0, i8* %eight_bit_found, align 1
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 3
  %undecided = bitcast %union.anon* %spec to %struct.undecided_spec*
  %inhibit_nbd12 = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided, i32 0, i32 0
  %18 = load i32, i32* %inhibit_nbd12, align 4
  %19 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 457), align 1
  %tobool = trunc i8 %19 to i1
  %call13 = call zeroext i1 @inhibit_flag(i32 %18, i1 zeroext %tobool)
  %frombool = zext i1 %call13 to i8
  store i8 %frombool, i8* %inhibit_nbd, align 1
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 3
  %undecided15 = bitcast %union.anon* %spec14 to %struct.undecided_spec*
  %inhibit_ied16 = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided15, i32 0, i32 1
  %21 = load i32, i32* %inhibit_ied16, align 4
  %22 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 452), align 1
  %tobool17 = trunc i8 %22 to i1
  %call18 = call zeroext i1 @inhibit_flag(i32 %21, i1 zeroext %tobool17)
  %frombool19 = zext i1 %call18 to i8
  store i8 %frombool19, i8* %inhibit_ied, align 1
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec20 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 3
  %undecided21 = bitcast %union.anon* %spec20 to %struct.undecided_spec*
  %prefer_utf_822 = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided21, i32 0, i32 2
  %24 = load i8, i8* %prefer_utf_822, align 1
  %tobool23 = trunc i8 %24 to i1
  %frombool24 = zext i1 %tobool23 to i8
  store i8 %frombool24, i8* %prefer_utf_8, align 1
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %25, i32 0, i32 5
  store i64 0, i64* %head_ascii, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  store i32 0, i32* %rejected, align 4
  %found25 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  store i32 0, i32* %found25, align 4
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  store i32 0, i32* %checked, align 4
  %26 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source26 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 17
  %27 = load i8*, i8** %source26, align 8
  store i8* %27, i8** %src, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %28 = load i8*, i8** %src, align 8
  %29 = load i8*, i8** %src_end, align 8
  %cmp27 = icmp ult i8* %28, %29
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i8*, i8** %src, align 8
  %31 = load i8, i8* %30, align 1
  %conv = zext i8 %31 to i32
  store i32 %conv, i32* %c, align 4
  %32 = load i32, i32* %c, align 4
  %and = and i32 %32, 128
  %tobool28 = icmp ne i32 %and, 0
  br i1 %tobool28, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %for.body
  store i8 1, i8* %eight_bit_found, align 1
  %33 = load i8, i8* %null_byte_found, align 1
  %tobool30 = trunc i8 %33 to i1
  br i1 %tobool30, label %if.then.31, label %if.end

if.then.31:                                       ; preds = %if.then.29
  br label %for.end

if.end:                                           ; preds = %if.then.29
  br label %if.end.135

if.else:                                          ; preds = %for.body
  %34 = load i32, i32* %c, align 4
  %cmp32 = icmp slt i32 %34, 32
  br i1 %cmp32, label %if.then.34, label %if.else.128

if.then.34:                                       ; preds = %if.else
  %35 = load i32, i32* %c, align 4
  %cmp35 = icmp eq i32 %35, 27
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.34
  %36 = load i32, i32* %c, align 4
  %cmp37 = icmp eq i32 %36, 15
  br i1 %cmp37, label %land.lhs.true, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false
  %37 = load i32, i32* %c, align 4
  %cmp40 = icmp eq i32 %37, 14
  br i1 %cmp40, label %land.lhs.true, label %if.else.58

land.lhs.true:                                    ; preds = %lor.lhs.false.39, %lor.lhs.false, %if.then.34
  %38 = load i8, i8* %inhibit_ied, align 1
  %tobool42 = trunc i8 %38 to i1
  br i1 %tobool42, label %if.else.58, label %land.lhs.true.43

land.lhs.true.43:                                 ; preds = %land.lhs.true
  %checked44 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %39 = load i32, i32* %checked44, align 4
  %tobool45 = icmp ne i32 %39, 0
  br i1 %tobool45, label %if.else.58, label %if.then.46

if.then.46:                                       ; preds = %land.lhs.true.43
  %40 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call47 = call zeroext i1 @detect_coding_iso_2022(%struct.coding_system* %40, %struct.coding_detection_info* %detect_info)
  br i1 %call47, label %if.then.48, label %if.end.57

if.then.48:                                       ; preds = %if.then.46
  %rejected49 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %41 = load i32, i32* %rejected49, align 4
  %and50 = and i32 %41, 16
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.end.55, label %if.then.52

if.then.52:                                       ; preds = %if.then.48
  %42 = load i8*, i8** %src_end, align 8
  store i8* %42, i8** %src, align 8
  %43 = load i8*, i8** %src, align 8
  %44 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source53 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %44, i32 0, i32 17
  %45 = load i8*, i8** %source53, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %45 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %46 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii54 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %46, i32 0, i32 5
  store i64 %sub.ptr.sub, i64* %head_ascii54, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.52, %if.then.48
  %rejected56 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %47 = load i32, i32* %rejected56, align 4
  %or = or i32 %47, -52
  store i32 %or, i32* %rejected56, align 4
  br label %for.end

if.end.57:                                        ; preds = %if.then.46
  br label %if.end.122

if.else.58:                                       ; preds = %land.lhs.true.43, %land.lhs.true, %lor.lhs.false.39
  %48 = load i32, i32* %c, align 4
  %tobool59 = icmp ne i32 %48, 0
  br i1 %tobool59, label %if.else.66, label %land.lhs.true.60

land.lhs.true.60:                                 ; preds = %if.else.58
  %49 = load i8, i8* %inhibit_nbd, align 1
  %tobool61 = trunc i8 %49 to i1
  br i1 %tobool61, label %if.else.66, label %if.then.62

if.then.62:                                       ; preds = %land.lhs.true.60
  store i8 1, i8* %null_byte_found, align 1
  %50 = load i8, i8* %eight_bit_found, align 1
  %tobool63 = trunc i8 %50 to i1
  br i1 %tobool63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.then.62
  br label %for.end

if.end.65:                                        ; preds = %if.then.62
  br label %if.end.121

if.else.66:                                       ; preds = %land.lhs.true.60, %if.else.58
  %51 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 437), align 1
  %tobool67 = trunc i8 %51 to i1
  br i1 %tobool67, label %if.end.120, label %land.lhs.true.68

land.lhs.true.68:                                 ; preds = %if.else.66
  %52 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool69 = trunc i8 %52 to i1
  br i1 %tobool69, label %if.end.120, label %if.then.70

if.then.70:                                       ; preds = %land.lhs.true.68
  %53 = load i32, i32* %c, align 4
  %cmp71 = icmp eq i32 %53, 13
  br i1 %cmp71, label %if.then.73, label %if.else.104

if.then.73:                                       ; preds = %if.then.70
  %54 = load i8*, i8** %src, align 8
  %55 = load i8*, i8** %src_end, align 8
  %cmp74 = icmp ult i8* %54, %55
  br i1 %cmp74, label %land.lhs.true.76, label %if.else.92

land.lhs.true.76:                                 ; preds = %if.then.73
  %56 = load i8*, i8** %src, align 8
  %arrayidx = getelementptr inbounds i8, i8* %56, i64 1
  %57 = load i8, i8* %arrayidx, align 1
  %conv77 = zext i8 %57 to i32
  %cmp78 = icmp eq i32 %conv77, 10
  br i1 %cmp78, label %if.then.80, label %if.else.92

if.then.80:                                       ; preds = %land.lhs.true.76
  %58 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen81 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %58, i32 0, i32 1
  %bf.load82 = load i32, i32* %eol_seen81, align 8
  %bf.lshr83 = lshr i32 %bf.load82, 24
  %bf.clear84 = and i32 %bf.lshr83, 7
  %or85 = or i32 %bf.clear84, 4
  %bf.load86 = load i32, i32* %eol_seen81, align 8
  %bf.value = and i32 %or85, 7
  %bf.shl = shl i32 %bf.value, 24
  %bf.clear87 = and i32 %bf.load86, -117440513
  %bf.set = or i32 %bf.clear87, %bf.shl
  store i32 %bf.set, i32* %eol_seen81, align 8
  %59 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %60 = load i8, i8* %eight_bit_found, align 1
  %tobool88 = trunc i8 %60 to i1
  br i1 %tobool88, label %if.end.91, label %if.then.89

if.then.89:                                       ; preds = %if.then.80
  %61 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii90 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %61, i32 0, i32 5
  %62 = load i64, i64* %head_ascii90, align 8
  %inc = add nsw i64 %62, 1
  store i64 %inc, i64* %head_ascii90, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.89, %if.then.80
  br label %if.end.103

if.else.92:                                       ; preds = %land.lhs.true.76, %if.then.73
  %63 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen93 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %63, i32 0, i32 1
  %bf.load94 = load i32, i32* %eol_seen93, align 8
  %bf.lshr95 = lshr i32 %bf.load94, 24
  %bf.clear96 = and i32 %bf.lshr95, 7
  %or97 = or i32 %bf.clear96, 2
  %bf.load98 = load i32, i32* %eol_seen93, align 8
  %bf.value99 = and i32 %or97, 7
  %bf.shl100 = shl i32 %bf.value99, 24
  %bf.clear101 = and i32 %bf.load98, -117440513
  %bf.set102 = or i32 %bf.clear101, %bf.shl100
  store i32 %bf.set102, i32* %eol_seen93, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.92, %if.end.91
  br label %if.end.119

if.else.104:                                      ; preds = %if.then.70
  %64 = load i32, i32* %c, align 4
  %cmp105 = icmp eq i32 %64, 10
  br i1 %cmp105, label %if.then.107, label %if.end.118

if.then.107:                                      ; preds = %if.else.104
  %65 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen108 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %65, i32 0, i32 1
  %bf.load109 = load i32, i32* %eol_seen108, align 8
  %bf.lshr110 = lshr i32 %bf.load109, 24
  %bf.clear111 = and i32 %bf.lshr110, 7
  %or112 = or i32 %bf.clear111, 1
  %bf.load113 = load i32, i32* %eol_seen108, align 8
  %bf.value114 = and i32 %or112, 7
  %bf.shl115 = shl i32 %bf.value114, 24
  %bf.clear116 = and i32 %bf.load113, -117440513
  %bf.set117 = or i32 %bf.clear116, %bf.shl115
  store i32 %bf.set117, i32* %eol_seen108, align 8
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.107, %if.else.104
  br label %if.end.119

if.end.119:                                       ; preds = %if.end.118, %if.end.103
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %land.lhs.true.68, %if.else.66
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end.65
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %if.end.57
  %66 = load i8, i8* %eight_bit_found, align 1
  %tobool123 = trunc i8 %66 to i1
  br i1 %tobool123, label %if.end.127, label %if.then.124

if.then.124:                                      ; preds = %if.end.122
  %67 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii125 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %67, i32 0, i32 5
  %68 = load i64, i64* %head_ascii125, align 8
  %inc126 = add nsw i64 %68, 1
  store i64 %inc126, i64* %head_ascii125, align 8
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.124, %if.end.122
  br label %if.end.134

if.else.128:                                      ; preds = %if.else
  %69 = load i8, i8* %eight_bit_found, align 1
  %tobool129 = trunc i8 %69 to i1
  br i1 %tobool129, label %if.end.133, label %if.then.130

if.then.130:                                      ; preds = %if.else.128
  %70 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii131 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %70, i32 0, i32 5
  %71 = load i64, i64* %head_ascii131, align 8
  %inc132 = add nsw i64 %71, 1
  store i64 %inc132, i64* %head_ascii131, align 8
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.130, %if.else.128
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.end.127
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.135
  %72 = load i8*, i8** %src, align 8
  %incdec.ptr136 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %incdec.ptr136, i8** %src, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.64, %if.end.55, %if.then.31, %for.cond
  %73 = load i8, i8* %null_byte_found, align 1
  %tobool137 = trunc i8 %73 to i1
  br i1 %tobool137, label %if.then.150, label %lor.lhs.false.139

lor.lhs.false.139:                                ; preds = %for.end
  %74 = load i8, i8* %eight_bit_found, align 1
  %tobool140 = trunc i8 %74 to i1
  br i1 %tobool140, label %if.then.150, label %lor.lhs.false.142

lor.lhs.false.142:                                ; preds = %lor.lhs.false.139
  %75 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii143 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %75, i32 0, i32 5
  %76 = load i64, i64* %head_ascii143, align 8
  %77 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes144 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %77, i32 0, i32 15
  %78 = load i64, i64* %src_bytes144, align 8
  %cmp145 = icmp slt i64 %76, %78
  br i1 %cmp145, label %if.then.150, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %lor.lhs.false.142
  %found148 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %79 = load i32, i32* %found148, align 4
  %tobool149 = icmp ne i32 %79, 0
  br i1 %tobool149, label %if.then.150, label %if.end.351

if.then.150:                                      ; preds = %lor.lhs.false.147, %lor.lhs.false.142, %lor.lhs.false.139, %for.end
  %80 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii151 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %80, i32 0, i32 5
  %81 = load i64, i64* %head_ascii151, align 8
  %82 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes152 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %82, i32 0, i32 15
  %83 = load i64, i64* %src_bytes152, align 8
  %cmp153 = icmp eq i64 %81, %83
  br i1 %cmp153, label %if.then.155, label %if.else.170

if.then.155:                                      ; preds = %if.then.150
  store i32 0, i32* %i, align 4
  br label %for.cond.156

for.cond.156:                                     ; preds = %for.inc.167, %if.then.155
  %84 = load i32, i32* %i, align 4
  %cmp157 = icmp slt i32 %84, 19
  br i1 %cmp157, label %for.body.159, label %for.end.169

for.body.159:                                     ; preds = %for.cond.156
  %85 = load i32, i32* %i, align 4
  %idxprom = sext i32 %85 to i64
  %arrayidx160 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom
  %86 = load i32, i32* %arrayidx160, align 4
  store i32 %86, i32* %category, align 4
  %87 = load i32, i32* %category, align 4
  %idx.ext = zext i32 %87 to i64
  %add.ptr161 = getelementptr inbounds %struct.coding_system, %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i32 0), i64 %idx.ext
  store %struct.coding_system* %add.ptr161, %struct.coding_system** %this, align 8
  %found162 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %88 = load i32, i32* %found162, align 4
  %89 = load i32, i32* %category, align 4
  %shl = shl i32 1, %89
  %and163 = and i32 %88, %shl
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %for.body.159
  br label %for.end.169

if.end.166:                                       ; preds = %for.body.159
  br label %for.inc.167

for.inc.167:                                      ; preds = %if.end.166
  %90 = load i32, i32* %i, align 4
  %inc168 = add nsw i32 %90, 1
  store i32 %inc168, i32* %i, align 4
  br label %for.cond.156

for.end.169:                                      ; preds = %if.then.165, %for.cond.156
  br label %if.end.239

if.else.170:                                      ; preds = %if.then.150
  %91 = load i8, i8* %null_byte_found, align 1
  %tobool171 = trunc i8 %91 to i1
  br i1 %tobool171, label %if.then.172, label %if.else.177

if.then.172:                                      ; preds = %if.else.170
  %checked173 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %92 = load i32, i32* %checked173, align 4
  %or174 = or i32 %92, -15873
  store i32 %or174, i32* %checked173, align 4
  %rejected175 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %93 = load i32, i32* %rejected175, align 4
  %or176 = or i32 %93, -15873
  store i32 %or176, i32* %rejected175, align 4
  br label %if.end.189

if.else.177:                                      ; preds = %if.else.170
  %94 = load i8, i8* %prefer_utf_8, align 1
  %tobool178 = trunc i8 %94 to i1
  br i1 %tobool178, label %land.lhs.true.180, label %if.end.188

land.lhs.true.180:                                ; preds = %if.else.177
  %95 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call181 = call zeroext i1 @detect_coding_utf_8(%struct.coding_system* %95, %struct.coding_detection_info* %detect_info)
  br i1 %call181, label %if.then.183, label %if.end.188

if.then.183:                                      ; preds = %land.lhs.true.180
  %checked184 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %96 = load i32, i32* %checked184, align 4
  %or185 = or i32 %96, -449
  store i32 %or185, i32* %checked184, align 4
  %rejected186 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %97 = load i32, i32* %rejected186, align 4
  %or187 = or i32 %97, -449
  store i32 %or187, i32* %rejected186, align 4
  br label %if.end.188

if.end.188:                                       ; preds = %if.then.183, %land.lhs.true.180, %if.else.177
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %if.then.172
  store i32 0, i32* %i, align 4
  br label %for.cond.190

for.cond.190:                                     ; preds = %for.inc.236, %if.end.189
  %98 = load i32, i32* %i, align 4
  %cmp191 = icmp slt i32 %98, 19
  br i1 %cmp191, label %for.body.193, label %for.end.238

for.body.193:                                     ; preds = %for.cond.190
  %99 = load i32, i32* %i, align 4
  %idxprom194 = sext i32 %99 to i64
  %arrayidx195 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom194
  %100 = load i32, i32* %arrayidx195, align 4
  store i32 %100, i32* %category, align 4
  %101 = load i32, i32* %category, align 4
  %idx.ext196 = zext i32 %101 to i64
  %add.ptr197 = getelementptr inbounds %struct.coding_system, %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i32 0), i64 %idx.ext196
  store %struct.coding_system* %add.ptr197, %struct.coding_system** %this, align 8
  %102 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id198 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %102, i32 0, i32 0
  %103 = load i64, i64* %id198, align 8
  %104 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id199 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %104, i32 0, i32 0
  store i64 %103, i64* %id199, align 8
  %105 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id200 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %105, i32 0, i32 0
  %106 = load i64, i64* %id200, align 8
  %cmp201 = icmp slt i64 %106, 0
  br i1 %cmp201, label %if.then.203, label %if.else.207

if.then.203:                                      ; preds = %for.body.193
  %107 = load i32, i32* %category, align 4
  %shl204 = shl i32 1, %107
  %rejected205 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %108 = load i32, i32* %rejected205, align 4
  %or206 = or i32 %108, %shl204
  store i32 %or206, i32* %rejected205, align 4
  br label %if.end.235

if.else.207:                                      ; preds = %for.body.193
  %109 = load i32, i32* %category, align 4
  %cmp208 = icmp uge i32 %109, 19
  br i1 %cmp208, label %if.then.210, label %if.else.211

if.then.210:                                      ; preds = %if.else.207
  br label %for.inc.236

if.else.211:                                      ; preds = %if.else.207
  %checked212 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %110 = load i32, i32* %checked212, align 4
  %111 = load i32, i32* %category, align 4
  %shl213 = shl i32 1, %111
  %and214 = and i32 %110, %shl213
  %tobool215 = icmp ne i32 %and214, 0
  br i1 %tobool215, label %if.then.216, label %if.else.223

if.then.216:                                      ; preds = %if.else.211
  %found217 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %112 = load i32, i32* %found217, align 4
  %113 = load i32, i32* %category, align 4
  %shl218 = shl i32 1, %113
  %and219 = and i32 %112, %shl218
  %tobool220 = icmp ne i32 %and219, 0
  br i1 %tobool220, label %if.then.221, label %if.end.222

if.then.221:                                      ; preds = %if.then.216
  br label %for.end.238

if.end.222:                                       ; preds = %if.then.216
  br label %if.end.233

if.else.223:                                      ; preds = %if.else.211
  %114 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %detector = getelementptr inbounds %struct.coding_system, %struct.coding_system* %114, i32 0, i32 29
  %115 = load i1 (%struct.coding_system*, %struct.coding_detection_info*)*, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector, align 8
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call224 = call zeroext i1 %115(%struct.coding_system* %116, %struct.coding_detection_info* %detect_info)
  br i1 %call224, label %land.lhs.true.226, label %if.end.232

land.lhs.true.226:                                ; preds = %if.else.223
  %found227 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %117 = load i32, i32* %found227, align 4
  %118 = load i32, i32* %category, align 4
  %shl228 = shl i32 1, %118
  %and229 = and i32 %117, %shl228
  %tobool230 = icmp ne i32 %and229, 0
  br i1 %tobool230, label %if.then.231, label %if.end.232

if.then.231:                                      ; preds = %land.lhs.true.226
  br label %for.end.238

if.end.232:                                       ; preds = %land.lhs.true.226, %if.else.223
  br label %if.end.233

if.end.233:                                       ; preds = %if.end.232, %if.end.222
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.233
  br label %if.end.235

if.end.235:                                       ; preds = %if.end.234, %if.then.203
  br label %for.inc.236

for.inc.236:                                      ; preds = %if.end.235, %if.then.210
  %119 = load i32, i32* %i, align 4
  %inc237 = add nsw i32 %119, 1
  store i32 %inc237, i32* %i, align 4
  br label %for.cond.190

for.end.238:                                      ; preds = %if.then.231, %if.then.221, %for.cond.190
  br label %if.end.239

if.end.239:                                       ; preds = %for.end.238, %for.end.169
  %120 = load i32, i32* %i, align 4
  %cmp240 = icmp slt i32 %120, 19
  br i1 %cmp240, label %if.then.242, label %if.else.310

if.then.242:                                      ; preds = %if.end.239
  %121 = load i32, i32* %category, align 4
  %cmp243 = icmp eq i32 %121, 6
  br i1 %cmp243, label %if.then.245, label %if.else.268

if.then.245:                                      ; preds = %if.then.242
  %122 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call246 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %122)
  %123 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id247 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %123, i32 0, i32 0
  %124 = load i64, i64* %id247, align 8
  %call248 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call246, i64 %124)
  %call249 = call i64 @AREF(i64 %call248, i64 0)
  %call250 = call i64 @AREF(i64 %call249, i64 24)
  store i64 %call250, i64* %coding_systems, align 8
  %125 = load i64, i64* %coding_systems, align 8
  %and251 = and i64 %125, 7
  %conv252 = trunc i64 %and251 to i32
  %cmp253 = icmp eq i32 %conv252, 3
  br i1 %cmp253, label %if.then.255, label %if.else.263

if.then.255:                                      ; preds = %if.then.245
  %found256 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %126 = load i32, i32* %found256, align 4
  %and257 = and i32 %126, 256
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %if.then.259, label %if.else.260

if.then.259:                                      ; preds = %if.then.255
  %127 = load i64, i64* %coding_systems, align 8
  %sub = sub nsw i64 %127, 3
  %128 = inttoptr i64 %sub to i8*
  %129 = bitcast i8* %128 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %129, i32 0, i32 0
  %130 = load i64, i64* %car, align 8
  store i64 %130, i64* %found, align 8
  br label %if.end.262

if.else.260:                                      ; preds = %if.then.255
  %131 = load i64, i64* %coding_systems, align 8
  %sub261 = sub nsw i64 %131, 3
  %132 = inttoptr i64 %sub261 to i8*
  %133 = bitcast i8* %132 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %133, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %134 = load i64, i64* %cdr, align 8
  store i64 %134, i64* %found, align 8
  br label %if.end.262

if.end.262:                                       ; preds = %if.else.260, %if.then.259
  br label %if.end.267

if.else.263:                                      ; preds = %if.then.245
  %135 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call264 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %135)
  %136 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id265 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %136, i32 0, i32 0
  %137 = load i64, i64* %id265, align 8
  %call266 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call264, i64 %137)
  store i64 %call266, i64* %found, align 8
  br label %if.end.267

if.end.267:                                       ; preds = %if.else.263, %if.end.262
  br label %if.end.309

if.else.268:                                      ; preds = %if.then.242
  %138 = load i32, i32* %category, align 4
  %cmp269 = icmp eq i32 %138, 9
  br i1 %cmp269, label %if.then.271, label %if.else.304

if.then.271:                                      ; preds = %if.else.268
  %139 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call273 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %139)
  %140 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id274 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %140, i32 0, i32 0
  %141 = load i64, i64* %id274, align 8
  %call275 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call273, i64 %141)
  %call276 = call i64 @AREF(i64 %call275, i64 0)
  %call277 = call i64 @AREF(i64 %call276, i64 24)
  store i64 %call277, i64* %coding_systems272, align 8
  %142 = load i64, i64* %coding_systems272, align 8
  %and278 = and i64 %142, 7
  %conv279 = trunc i64 %and278 to i32
  %cmp280 = icmp eq i32 %conv279, 3
  br i1 %cmp280, label %if.then.282, label %if.else.299

if.then.282:                                      ; preds = %if.then.271
  %found283 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %143 = load i32, i32* %found283, align 4
  %and284 = and i32 %143, 2048
  %tobool285 = icmp ne i32 %and284, 0
  br i1 %tobool285, label %if.then.286, label %if.else.289

if.then.286:                                      ; preds = %if.then.282
  %144 = load i64, i64* %coding_systems272, align 8
  %sub287 = sub nsw i64 %144, 3
  %145 = inttoptr i64 %sub287 to i8*
  %146 = bitcast i8* %145 to %struct.Lisp_Cons*
  %car288 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %146, i32 0, i32 0
  %147 = load i64, i64* %car288, align 8
  store i64 %147, i64* %found, align 8
  br label %if.end.298

if.else.289:                                      ; preds = %if.then.282
  %found290 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %148 = load i32, i32* %found290, align 4
  %and291 = and i32 %148, 1024
  %tobool292 = icmp ne i32 %and291, 0
  br i1 %tobool292, label %if.then.293, label %if.end.297

if.then.293:                                      ; preds = %if.else.289
  %149 = load i64, i64* %coding_systems272, align 8
  %sub294 = sub nsw i64 %149, 3
  %150 = inttoptr i64 %sub294 to i8*
  %151 = bitcast i8* %150 to %struct.Lisp_Cons*
  %u295 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %151, i32 0, i32 1
  %cdr296 = bitcast %union.anon.0* %u295 to i64*
  %152 = load i64, i64* %cdr296, align 8
  store i64 %152, i64* %found, align 8
  br label %if.end.297

if.end.297:                                       ; preds = %if.then.293, %if.else.289
  br label %if.end.298

if.end.298:                                       ; preds = %if.end.297, %if.then.286
  br label %if.end.303

if.else.299:                                      ; preds = %if.then.271
  %153 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call300 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %153)
  %154 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id301 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %154, i32 0, i32 0
  %155 = load i64, i64* %id301, align 8
  %call302 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call300, i64 %155)
  store i64 %call302, i64* %found, align 8
  br label %if.end.303

if.end.303:                                       ; preds = %if.else.299, %if.end.298
  br label %if.end.308

if.else.304:                                      ; preds = %if.else.268
  %156 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call305 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %156)
  %157 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id306 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %157, i32 0, i32 0
  %158 = load i64, i64* %id306, align 8
  %call307 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call305, i64 %158)
  store i64 %call307, i64* %found, align 8
  br label %if.end.308

if.end.308:                                       ; preds = %if.else.304, %if.end.303
  br label %if.end.309

if.end.309:                                       ; preds = %if.end.308, %if.end.267
  br label %if.end.350

if.else.310:                                      ; preds = %if.end.239
  %159 = load i8, i8* %null_byte_found, align 1
  %tobool311 = trunc i8 %159 to i1
  br i1 %tobool311, label %if.then.312, label %if.else.314

if.then.312:                                      ; preds = %if.else.310
  %call313 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call313, i64* %found, align 8
  br label %if.end.349

if.else.314:                                      ; preds = %if.else.310
  %rejected315 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %160 = load i32, i32* %rejected315, align 4
  %and316 = and i32 %160, 524287
  %cmp317 = icmp eq i32 %and316, 524287
  br i1 %cmp317, label %if.then.319, label %if.else.321

if.then.319:                                      ; preds = %if.else.314
  %call320 = call i64 @builtin_lisp_symbol(i32 788)
  store i64 %call320, i64* %found, align 8
  br label %if.end.348

if.else.321:                                      ; preds = %if.else.314
  %rejected322 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %161 = load i32, i32* %rejected322, align 4
  %tobool323 = icmp ne i32 %161, 0
  br i1 %tobool323, label %if.then.324, label %if.end.347

if.then.324:                                      ; preds = %if.else.321
  store i32 0, i32* %i, align 4
  br label %for.cond.325

for.cond.325:                                     ; preds = %for.inc.344, %if.then.324
  %162 = load i32, i32* %i, align 4
  %cmp326 = icmp slt i32 %162, 19
  br i1 %cmp326, label %for.body.328, label %for.end.346

for.body.328:                                     ; preds = %for.cond.325
  %rejected329 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %163 = load i32, i32* %rejected329, align 4
  %164 = load i32, i32* %i, align 4
  %idxprom330 = sext i32 %164 to i64
  %arrayidx331 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom330
  %165 = load i32, i32* %arrayidx331, align 4
  %shl332 = shl i32 1, %165
  %and333 = and i32 %163, %shl332
  %tobool334 = icmp ne i32 %and333, 0
  br i1 %tobool334, label %if.end.343, label %if.then.335

if.then.335:                                      ; preds = %for.body.328
  %166 = load i32, i32* %i, align 4
  %idxprom336 = sext i32 %166 to i64
  %arrayidx337 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom336
  %167 = load i32, i32* %arrayidx337, align 4
  %idx.ext338 = zext i32 %167 to i64
  %add.ptr339 = getelementptr inbounds %struct.coding_system, %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i32 0), i64 %idx.ext338
  store %struct.coding_system* %add.ptr339, %struct.coding_system** %this, align 8
  %168 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call340 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %168)
  %169 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id341 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %169, i32 0, i32 0
  %170 = load i64, i64* %id341, align 8
  %call342 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call340, i64 %170)
  store i64 %call342, i64* %found, align 8
  br label %for.end.346

if.end.343:                                       ; preds = %for.body.328
  br label %for.inc.344

for.inc.344:                                      ; preds = %if.end.343
  %171 = load i32, i32* %i, align 4
  %inc345 = add nsw i32 %171, 1
  store i32 %inc345, i32* %i, align 4
  br label %for.cond.325

for.end.346:                                      ; preds = %if.then.335, %for.cond.325
  br label %if.end.347

if.end.347:                                       ; preds = %for.end.346, %if.else.321
  br label %if.end.348

if.end.348:                                       ; preds = %if.end.347, %if.then.319
  br label %if.end.349

if.end.349:                                       ; preds = %if.end.348, %if.then.312
  br label %if.end.350

if.end.350:                                       ; preds = %if.end.349, %if.end.309
  br label %if.end.351

if.end.351:                                       ; preds = %if.end.350, %lor.lhs.false.147
  br label %if.end.453

if.else.352:                                      ; preds = %entry
  %172 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call353 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %172)
  %173 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id354 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %173, i32 0, i32 0
  %174 = load i64, i64* %id354, align 8
  %call355 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call353, i64 %174)
  %call356 = call i64 @AREF(i64 %call355, i64 0)
  %call357 = call i64 @AREF(i64 %call356, i64 14)
  %shr = ashr i64 %call357, 2
  %cmp358 = icmp eq i64 %shr, 6
  br i1 %cmp358, label %if.then.360, label %if.else.406

if.then.360:                                      ; preds = %if.else.352
  %175 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call363 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %175)
  %176 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id364 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %176, i32 0, i32 0
  %177 = load i64, i64* %id364, align 8
  %call365 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call363, i64 %177)
  %call366 = call i64 @AREF(i64 %call365, i64 0)
  %call367 = call i64 @AREF(i64 %call366, i64 24)
  store i64 %call367, i64* %coding_systems361, align 8
  %rejected368 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info362, i32 0, i32 2
  store i32 0, i32* %rejected368, align 4
  %found369 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info362, i32 0, i32 1
  store i32 0, i32* %found369, align 4
  %178 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call370 = call i64 @check_ascii(%struct.coding_system* %178)
  %179 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes371 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %179, i32 0, i32 15
  %180 = load i64, i64* %src_bytes371, align 8
  %cmp372 = icmp eq i64 %call370, %180
  br i1 %cmp372, label %if.then.374, label %if.else.384

if.then.374:                                      ; preds = %if.then.360
  %181 = load i64, i64* %coding_systems361, align 8
  %and375 = and i64 %181, 7
  %conv376 = trunc i64 %and375 to i32
  %cmp377 = icmp eq i32 %conv376, 3
  br i1 %cmp377, label %if.then.379, label %if.end.383

if.then.379:                                      ; preds = %if.then.374
  %182 = load i64, i64* %coding_systems361, align 8
  %sub380 = sub nsw i64 %182, 3
  %183 = inttoptr i64 %sub380 to i8*
  %184 = bitcast i8* %183 to %struct.Lisp_Cons*
  %u381 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %184, i32 0, i32 1
  %cdr382 = bitcast %union.anon.0* %u381 to i64*
  %185 = load i64, i64* %cdr382, align 8
  store i64 %185, i64* %found, align 8
  br label %if.end.383

if.end.383:                                       ; preds = %if.then.379, %if.then.374
  br label %if.end.405

if.else.384:                                      ; preds = %if.then.360
  %186 = load i64, i64* %coding_systems361, align 8
  %and385 = and i64 %186, 7
  %conv386 = trunc i64 %and385 to i32
  %cmp387 = icmp eq i32 %conv386, 3
  br i1 %cmp387, label %land.lhs.true.389, label %if.end.404

land.lhs.true.389:                                ; preds = %if.else.384
  %187 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call390 = call zeroext i1 @detect_coding_utf_8(%struct.coding_system* %187, %struct.coding_detection_info* %detect_info362)
  br i1 %call390, label %if.then.392, label %if.end.404

if.then.392:                                      ; preds = %land.lhs.true.389
  %found393 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info362, i32 0, i32 1
  %188 = load i32, i32* %found393, align 4
  %and394 = and i32 %188, 256
  %tobool395 = icmp ne i32 %and394, 0
  br i1 %tobool395, label %if.then.396, label %if.else.399

if.then.396:                                      ; preds = %if.then.392
  %189 = load i64, i64* %coding_systems361, align 8
  %sub397 = sub nsw i64 %189, 3
  %190 = inttoptr i64 %sub397 to i8*
  %191 = bitcast i8* %190 to %struct.Lisp_Cons*
  %car398 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %191, i32 0, i32 0
  %192 = load i64, i64* %car398, align 8
  store i64 %192, i64* %found, align 8
  br label %if.end.403

if.else.399:                                      ; preds = %if.then.392
  %193 = load i64, i64* %coding_systems361, align 8
  %sub400 = sub nsw i64 %193, 3
  %194 = inttoptr i64 %sub400 to i8*
  %195 = bitcast i8* %194 to %struct.Lisp_Cons*
  %u401 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %195, i32 0, i32 1
  %cdr402 = bitcast %union.anon.0* %u401 to i64*
  %196 = load i64, i64* %cdr402, align 8
  store i64 %196, i64* %found, align 8
  br label %if.end.403

if.end.403:                                       ; preds = %if.else.399, %if.then.396
  br label %if.end.404

if.end.404:                                       ; preds = %if.end.403, %land.lhs.true.389, %if.else.384
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.404, %if.end.383
  br label %if.end.452

if.else.406:                                      ; preds = %if.else.352
  %197 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call407 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %197)
  %198 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id408 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %198, i32 0, i32 0
  %199 = load i64, i64* %id408, align 8
  %call409 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call407, i64 %199)
  %call410 = call i64 @AREF(i64 %call409, i64 0)
  %call411 = call i64 @AREF(i64 %call410, i64 14)
  %shr412 = ashr i64 %call411, 2
  %cmp413 = icmp eq i64 %shr412, 9
  br i1 %cmp413, label %if.then.415, label %if.end.451

if.then.415:                                      ; preds = %if.else.406
  %200 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call418 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %200)
  %201 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id419 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %201, i32 0, i32 0
  %202 = load i64, i64* %id419, align 8
  %call420 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call418, i64 %202)
  %call421 = call i64 @AREF(i64 %call420, i64 0)
  %call422 = call i64 @AREF(i64 %call421, i64 24)
  store i64 %call422, i64* %coding_systems416, align 8
  %rejected423 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info417, i32 0, i32 2
  store i32 0, i32* %rejected423, align 4
  %found424 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info417, i32 0, i32 1
  store i32 0, i32* %found424, align 4
  %203 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii425 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %203, i32 0, i32 5
  store i64 0, i64* %head_ascii425, align 8
  %204 = load i64, i64* %coding_systems416, align 8
  %and426 = and i64 %204, 7
  %conv427 = trunc i64 %and426 to i32
  %cmp428 = icmp eq i32 %conv427, 3
  br i1 %cmp428, label %land.lhs.true.430, label %if.end.450

land.lhs.true.430:                                ; preds = %if.then.415
  %205 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call431 = call zeroext i1 @detect_coding_utf_16(%struct.coding_system* %205, %struct.coding_detection_info* %detect_info417)
  br i1 %call431, label %if.then.433, label %if.end.450

if.then.433:                                      ; preds = %land.lhs.true.430
  %found434 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info417, i32 0, i32 1
  %206 = load i32, i32* %found434, align 4
  %and435 = and i32 %206, 2048
  %tobool436 = icmp ne i32 %and435, 0
  br i1 %tobool436, label %if.then.437, label %if.else.440

if.then.437:                                      ; preds = %if.then.433
  %207 = load i64, i64* %coding_systems416, align 8
  %sub438 = sub nsw i64 %207, 3
  %208 = inttoptr i64 %sub438 to i8*
  %209 = bitcast i8* %208 to %struct.Lisp_Cons*
  %car439 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %209, i32 0, i32 0
  %210 = load i64, i64* %car439, align 8
  store i64 %210, i64* %found, align 8
  br label %if.end.449

if.else.440:                                      ; preds = %if.then.433
  %found441 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info417, i32 0, i32 1
  %211 = load i32, i32* %found441, align 4
  %and442 = and i32 %211, 1024
  %tobool443 = icmp ne i32 %and442, 0
  br i1 %tobool443, label %if.then.444, label %if.end.448

if.then.444:                                      ; preds = %if.else.440
  %212 = load i64, i64* %coding_systems416, align 8
  %sub445 = sub nsw i64 %212, 3
  %213 = inttoptr i64 %sub445 to i8*
  %214 = bitcast i8* %213 to %struct.Lisp_Cons*
  %u446 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %214, i32 0, i32 1
  %cdr447 = bitcast %union.anon.0* %u446 to i64*
  %215 = load i64, i64* %cdr447, align 8
  store i64 %215, i64* %found, align 8
  br label %if.end.448

if.end.448:                                       ; preds = %if.then.444, %if.else.440
  br label %if.end.449

if.end.449:                                       ; preds = %if.end.448, %if.then.437
  br label %if.end.450

if.end.450:                                       ; preds = %if.end.449, %land.lhs.true.430, %if.then.415
  br label %if.end.451

if.end.451:                                       ; preds = %if.end.450, %if.else.406
  br label %if.end.452

if.end.452:                                       ; preds = %if.end.451, %if.end.405
  br label %if.end.453

if.end.453:                                       ; preds = %if.end.452, %if.end.351
  %216 = load i64, i64* %found, align 8
  %call454 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp455 = icmp eq i64 %216, %call454
  br i1 %cmp455, label %if.end.476, label %if.then.457

if.then.457:                                      ; preds = %if.end.453
  %217 = load i64, i64* %eol_type, align 8
  %call458 = call zeroext i1 @VECTORP(i64 %217)
  br i1 %call458, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.457
  br label %cond.end.469

cond.false:                                       ; preds = %if.then.457
  %218 = load i64, i64* %eol_type, align 8
  %call460 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp461 = icmp eq i64 %218, %call460
  br i1 %cmp461, label %cond.true.463, label %cond.false.464

cond.true.463:                                    ; preds = %cond.false
  br label %cond.end

cond.false.464:                                   ; preds = %cond.false
  %219 = load i64, i64* %eol_type, align 8
  %call465 = call i64 @builtin_lisp_symbol(i32 635)
  %cmp466 = icmp eq i64 %219, %call465
  %cond = select i1 %cmp466, i32 2, i32 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false.464, %cond.true.463
  %cond468 = phi i32 [ 4, %cond.true.463 ], [ %cond, %cond.false.464 ]
  br label %cond.end.469

cond.end.469:                                     ; preds = %cond.end, %cond.true
  %cond470 = phi i32 [ 0, %cond.true ], [ %cond468, %cond.end ]
  store i32 %cond470, i32* %specified_eol, align 4
  %220 = load i64, i64* %found, align 8
  %221 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @setup_coding_system(i64 %220, %struct.coding_system* %221)
  %222 = load i32, i32* %specified_eol, align 4
  %cmp471 = icmp ne i32 %222, 0
  br i1 %cmp471, label %if.then.473, label %if.end.475

if.then.473:                                      ; preds = %cond.end.469
  %223 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %224 = load i32, i32* %specified_eol, align 4
  %call474 = call i64 @adjust_coding_eol_type(%struct.coding_system* %223, i32 %224)
  br label %if.end.475

if.end.475:                                       ; preds = %if.then.473, %cond.end.469
  br label %if.end.476

if.end.476:                                       ; preds = %if.end.475, %if.end.453
  %225 = load i32, i32* %saved_mode, align 4
  %226 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode477 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %226, i32 0, i32 1
  %bf.load478 = load i32, i32* %mode477, align 8
  %bf.value479 = and i32 %225, 31
  %bf.shl480 = shl i32 %bf.value479, 14
  %bf.clear481 = and i32 %bf.load478, -507905
  %bf.set482 = or i32 %bf.clear481, %bf.shl480
  store i32 %bf.set482, i32* %mode477, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @get_translation_table(i64 %attrs, i1 zeroext %encodep, i32* %max_lookup) #0 {
entry:
  %retval = alloca i64, align 8
  %attrs.addr = alloca i64, align 8
  %encodep.addr = alloca i8, align 1
  %max_lookup.addr = alloca i32*, align 8
  %standard = alloca i64, align 8
  %translation_table = alloca i64, align 8
  %val = alloca i64, align 8
  %tail = alloca i64, align 8
  %tailval = alloca i64, align 8
  store i64 %attrs, i64* %attrs.addr, align 8
  %frombool = zext i1 %encodep to i8
  store i8 %frombool, i8* %encodep.addr, align 1
  store i32* %max_lookup, i32** %max_lookup.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 80), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %max_lookup.addr, align 8
  %tobool = icmp ne i32* %1, null
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %2 = load i32*, i32** %max_lookup.addr, align 8
  store i32 0, i32* %2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2, i64* %retval
  br label %return

if.end.3:                                         ; preds = %entry
  %3 = load i8, i8* %encodep.addr, align 1
  %tobool4 = trunc i8 %3 to i1
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end.3
  %4 = load i64, i64* %attrs.addr, align 8
  %call6 = call i64 @AREF(i64 %4, i64 7)
  store i64 %call6, i64* %translation_table, align 8
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 279), align 8
  store i64 %5, i64* %standard, align 8
  br label %if.end.8

if.else:                                          ; preds = %if.end.3
  %6 = load i64, i64* %attrs.addr, align 8
  %call7 = call i64 @AREF(i64 %6, i64 6)
  store i64 %call7, i64* %translation_table, align 8
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 278), align 8
  store i64 %7, i64* %standard, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.5
  %8 = load i64, i64* %translation_table, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %8, %call9
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %if.end.8
  %9 = load i64, i64* %standard, align 8
  store i64 %9, i64* %translation_table, align 8
  br label %if.end.55

if.else.12:                                       ; preds = %if.end.8
  %10 = load i64, i64* %translation_table, align 8
  %and = and i64 %10, 7
  %conv = trunc i64 %and to i32
  %cmp13 = icmp eq i32 %conv, 0
  br i1 %cmp13, label %if.then.15, label %if.else.18

if.then.15:                                       ; preds = %if.else.12
  %11 = load i64, i64* %translation_table, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 934)
  %call17 = call i64 @Fget(i64 %11, i64 %call16)
  store i64 %call17, i64* %translation_table, align 8
  br label %if.end.41

if.else.18:                                       ; preds = %if.else.12
  %12 = load i64, i64* %translation_table, align 8
  %and19 = and i64 %12, 7
  %conv20 = trunc i64 %and19 to i32
  %cmp21 = icmp eq i32 %conv20, 3
  br i1 %cmp21, label %if.then.23, label %if.end.40

if.then.23:                                       ; preds = %if.else.18
  %13 = load i64, i64* %translation_table, align 8
  %call24 = call i64 @Fcopy_sequence(i64 %13)
  store i64 %call24, i64* %translation_table, align 8
  %14 = load i64, i64* %translation_table, align 8
  store i64 %14, i64* %val, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.23
  %15 = load i64, i64* %val, align 8
  %and25 = and i64 %15, 7
  %conv26 = trunc i64 %and25 to i32
  %cmp27 = icmp eq i32 %conv26, 3
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %16, 3
  %17 = inttoptr i64 %sub to i8*
  %18 = bitcast i8* %17 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %18, i32 0, i32 0
  %19 = load i64, i64* %car, align 8
  %and29 = and i64 %19, 7
  %conv30 = trunc i64 %and29 to i32
  %cmp31 = icmp eq i32 %conv30, 0
  br i1 %cmp31, label %if.then.33, label %if.end.38

if.then.33:                                       ; preds = %for.body
  %20 = load i64, i64* %val, align 8
  %21 = load i64, i64* %val, align 8
  %sub34 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub34 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %car35 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 0
  %24 = load i64, i64* %car35, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 934)
  %call37 = call i64 @Fget(i64 %24, i64 %call36)
  call void @XSETCAR(i64 %20, i64 %call37)
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.33, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.38
  %25 = load i64, i64* %val, align 8
  %sub39 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub39 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %28 = load i64, i64* %cdr, align 8
  store i64 %28, i64* %val, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.40

if.end.40:                                        ; preds = %for.end, %if.else.18
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.15
  %29 = load i64, i64* %standard, align 8
  %call42 = call zeroext i1 @CHAR_TABLE_P(i64 %29)
  br i1 %call42, label %if.then.43, label %if.end.54

if.then.43:                                       ; preds = %if.end.41
  %30 = load i64, i64* %translation_table, align 8
  %and44 = and i64 %30, 7
  %conv45 = trunc i64 %and44 to i32
  %cmp46 = icmp eq i32 %conv45, 3
  br i1 %cmp46, label %if.then.48, label %if.else.51

if.then.48:                                       ; preds = %if.then.43
  %31 = load i64, i64* %translation_table, align 8
  %32 = load i64, i64* %standard, align 8
  %call49 = call i64 @list1(i64 %32)
  %call50 = call i64 @nconc2(i64 %31, i64 %call49)
  store i64 %call50, i64* %translation_table, align 8
  br label %if.end.53

if.else.51:                                       ; preds = %if.then.43
  %33 = load i64, i64* %translation_table, align 8
  %34 = load i64, i64* %standard, align 8
  %call52 = call i64 @list2(i64 %33, i64 %34)
  store i64 %call52, i64* %translation_table, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.51, %if.then.48
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %if.end.41
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.11
  %35 = load i32*, i32** %max_lookup.addr, align 8
  %tobool56 = icmp ne i32* %35, null
  br i1 %tobool56, label %if.then.57, label %if.end.134

if.then.57:                                       ; preds = %if.end.55
  %36 = load i32*, i32** %max_lookup.addr, align 8
  store i32 1, i32* %36, align 4
  %37 = load i64, i64* %translation_table, align 8
  %call58 = call zeroext i1 @CHAR_TABLE_P(i64 %37)
  br i1 %call58, label %land.lhs.true, label %if.else.79

land.lhs.true:                                    ; preds = %if.then.57
  %38 = load i64, i64* %translation_table, align 8
  %call60 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %38)
  %call61 = call i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table* %call60)
  %cmp62 = icmp sgt i32 %call61, 1
  br i1 %cmp62, label %if.then.64, label %if.else.79

if.then.64:                                       ; preds = %land.lhs.true
  %39 = load i64, i64* %translation_table, align 8
  %call65 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %39)
  %extras = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call65, i32 0, i32 6
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %extras, i32 0, i64 1
  %40 = load i64, i64* %arrayidx, align 8
  store i64 %40, i64* %val, align 8
  %41 = load i64, i64* %val, align 8
  %call66 = call zeroext i1 @NATNUMP(i64 %41)
  br i1 %call66, label %land.lhs.true.68, label %if.end.78

land.lhs.true.68:                                 ; preds = %if.then.64
  %42 = load i32*, i32** %max_lookup.addr, align 8
  %43 = load i32, i32* %42, align 4
  %conv69 = sext i32 %43 to i64
  %44 = load i64, i64* %val, align 8
  %shr = ashr i64 %44, 2
  %cmp70 = icmp slt i64 %conv69, %shr
  br i1 %cmp70, label %if.then.72, label %if.end.78

if.then.72:                                       ; preds = %land.lhs.true.68
  %45 = load i64, i64* %val, align 8
  %shr73 = ashr i64 %45, 2
  %cmp74 = icmp slt i64 %shr73, 4096
  br i1 %cmp74, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.72
  %46 = load i64, i64* %val, align 8
  %shr76 = ashr i64 %46, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then.72
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr76, %cond.true ], [ 4096, %cond.false ]
  %conv77 = trunc i64 %cond to i32
  %47 = load i32*, i32** %max_lookup.addr, align 8
  store i32 %conv77, i32* %47, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %cond.end, %land.lhs.true.68, %if.then.64
  br label %if.end.133

if.else.79:                                       ; preds = %land.lhs.true, %if.then.57
  %48 = load i64, i64* %translation_table, align 8
  %and80 = and i64 %48, 7
  %conv81 = trunc i64 %and80 to i32
  %cmp82 = icmp eq i32 %conv81, 3
  br i1 %cmp82, label %if.then.84, label %if.end.132

if.then.84:                                       ; preds = %if.else.79
  %49 = load i64, i64* %translation_table, align 8
  store i64 %49, i64* %tail, align 8
  br label %for.cond.85

for.cond.85:                                      ; preds = %for.inc.127, %if.then.84
  %50 = load i64, i64* %tail, align 8
  %and86 = and i64 %50, 7
  %conv87 = trunc i64 %and86 to i32
  %cmp88 = icmp eq i32 %conv87, 3
  br i1 %cmp88, label %for.body.90, label %for.end.131

for.body.90:                                      ; preds = %for.cond.85
  %51 = load i64, i64* %tail, align 8
  %sub91 = sub nsw i64 %51, 3
  %52 = inttoptr i64 %sub91 to i8*
  %53 = bitcast i8* %52 to %struct.Lisp_Cons*
  %car92 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %53, i32 0, i32 0
  %54 = load i64, i64* %car92, align 8
  %call93 = call zeroext i1 @CHAR_TABLE_P(i64 %54)
  br i1 %call93, label %land.lhs.true.95, label %if.end.126

land.lhs.true.95:                                 ; preds = %for.body.90
  %55 = load i64, i64* %tail, align 8
  %sub96 = sub nsw i64 %55, 3
  %56 = inttoptr i64 %sub96 to i8*
  %57 = bitcast i8* %56 to %struct.Lisp_Cons*
  %car97 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %57, i32 0, i32 0
  %58 = load i64, i64* %car97, align 8
  %call98 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %58)
  %call99 = call i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table* %call98)
  %cmp100 = icmp sgt i32 %call99, 1
  br i1 %cmp100, label %if.then.102, label %if.end.126

if.then.102:                                      ; preds = %land.lhs.true.95
  %59 = load i64, i64* %tail, align 8
  %sub103 = sub nsw i64 %59, 3
  %60 = inttoptr i64 %sub103 to i8*
  %61 = bitcast i8* %60 to %struct.Lisp_Cons*
  %car104 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %61, i32 0, i32 0
  %62 = load i64, i64* %car104, align 8
  %call105 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %62)
  %extras106 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call105, i32 0, i32 6
  %arrayidx107 = getelementptr inbounds [0 x i64], [0 x i64]* %extras106, i32 0, i64 1
  %63 = load i64, i64* %arrayidx107, align 8
  store i64 %63, i64* %tailval, align 8
  %64 = load i64, i64* %tailval, align 8
  %call108 = call zeroext i1 @NATNUMP(i64 %64)
  br i1 %call108, label %land.lhs.true.110, label %if.end.125

land.lhs.true.110:                                ; preds = %if.then.102
  %65 = load i32*, i32** %max_lookup.addr, align 8
  %66 = load i32, i32* %65, align 4
  %conv111 = sext i32 %66 to i64
  %67 = load i64, i64* %tailval, align 8
  %shr112 = ashr i64 %67, 2
  %cmp113 = icmp slt i64 %conv111, %shr112
  br i1 %cmp113, label %if.then.115, label %if.end.125

if.then.115:                                      ; preds = %land.lhs.true.110
  %68 = load i64, i64* %tailval, align 8
  %shr116 = ashr i64 %68, 2
  %cmp117 = icmp slt i64 %shr116, 4096
  br i1 %cmp117, label %cond.true.119, label %cond.false.121

cond.true.119:                                    ; preds = %if.then.115
  %69 = load i64, i64* %tailval, align 8
  %shr120 = ashr i64 %69, 2
  br label %cond.end.122

cond.false.121:                                   ; preds = %if.then.115
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.false.121, %cond.true.119
  %cond123 = phi i64 [ %shr120, %cond.true.119 ], [ 4096, %cond.false.121 ]
  %conv124 = trunc i64 %cond123 to i32
  %70 = load i32*, i32** %max_lookup.addr, align 8
  store i32 %conv124, i32* %70, align 4
  br label %if.end.125

if.end.125:                                       ; preds = %cond.end.122, %land.lhs.true.110, %if.then.102
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %land.lhs.true.95, %for.body.90
  br label %for.inc.127

for.inc.127:                                      ; preds = %if.end.126
  %71 = load i64, i64* %tail, align 8
  %sub128 = sub nsw i64 %71, 3
  %72 = inttoptr i64 %sub128 to i8*
  %73 = bitcast i8* %72 to %struct.Lisp_Cons*
  %u129 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %73, i32 0, i32 1
  %cdr130 = bitcast %union.anon.0* %u129 to i64*
  %74 = load i64, i64* %cdr130, align 8
  store i64 %74, i64* %tail, align 8
  br label %for.cond.85

for.end.131:                                      ; preds = %for.cond.85
  br label %if.end.132

if.end.132:                                       ; preds = %for.end.131, %if.else.79
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.end.78
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.end.55
  %75 = load i64, i64* %translation_table, align 8
  store i64 %75, i64* %retval
  br label %return

return:                                           ; preds = %if.end.134, %if.end
  %76 = load i64, i64* %retval
  ret i64 %76
}

; Function Attrs: nounwind uwtable
define internal i64 @check_ascii(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %end = alloca i8*, align 8
  %eol_type = alloca i64, align 8
  %eol_seen = alloca i32, align 4
  %c = alloca i32, align 4
  %c48 = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %0)
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 0
  %2 = load i64, i64* %id, align 8
  %call1 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %2)
  %call2 = call i64 @AREF(i64 %call1, i64 2)
  store i64 %call2, i64* %eol_type, align 8
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 1
  %bf.load = load i32, i32* %eol_seen3, align 8
  %bf.lshr = lshr i32 %bf.load, 24
  %bf.clear = and i32 %bf.lshr, 7
  store i32 %bf.clear, i32* %eol_seen, align 4
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %4)
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 17
  %6 = load i8*, i8** %source, align 8
  store i8* %6, i8** %src, align 8
  %7 = load i8*, i8** %src, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 15
  %9 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr, i8** %end, align 8
  %10 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %11 = load i64, i64* %eol_type, align 8
  %and = and i64 %11, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %12 = load i8*, i8** %src, align 8
  %13 = load i8*, i8** %end, align 8
  %cmp5 = icmp ult i8* %12, %13
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %14 = load i8*, i8** %src, align 8
  %15 = load i8, i8* %14, align 1
  %conv7 = zext i8 %15 to i32
  %and8 = and i32 %conv7, 128
  %tobool9 = icmp ne i32 %and8, 0
  %lnot = xor i1 %tobool9, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %16 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %16, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %17 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %18 = load i8, i8* %17, align 1
  %conv10 = zext i8 %18 to i32
  %cmp11 = icmp eq i32 %conv10, 10
  br i1 %cmp11, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %while.body
  %19 = load i32, i32* %eol_seen, align 4
  %or = or i32 %19, 1
  store i32 %or, i32* %eol_seen, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.13, %while.body
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end.67

if.else:                                          ; preds = %lor.lhs.false
  %20 = load i8*, i8** %end, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %20, i32 -1
  store i8* %incdec.ptr14, i8** %end, align 8
  br label %while.cond.15

while.cond.15:                                    ; preds = %if.end.43, %if.else
  %21 = load i8*, i8** %src, align 8
  %22 = load i8*, i8** %end, align 8
  %cmp16 = icmp ult i8* %21, %22
  br i1 %cmp16, label %while.body.18, label %while.end.44

while.body.18:                                    ; preds = %while.cond.15
  %23 = load i8*, i8** %src, align 8
  %24 = load i8, i8* %23, align 1
  %conv19 = zext i8 %24 to i32
  store i32 %conv19, i32* %c, align 4
  %25 = load i32, i32* %c, align 4
  %and20 = and i32 %25, 128
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %while.body.18
  br label %while.end.44

if.end.23:                                        ; preds = %while.body.18
  %26 = load i8*, i8** %src, align 8
  %incdec.ptr24 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr24, i8** %src, align 8
  %27 = load i32, i32* %c, align 4
  %cmp25 = icmp eq i32 %27, 13
  br i1 %cmp25, label %if.then.27, label %if.else.37

if.then.27:                                       ; preds = %if.end.23
  %28 = load i8*, i8** %src, align 8
  %29 = load i8, i8* %28, align 1
  %conv28 = zext i8 %29 to i32
  %cmp29 = icmp eq i32 %conv28, 10
  br i1 %cmp29, label %if.then.31, label %if.else.34

if.then.31:                                       ; preds = %if.then.27
  %30 = load i32, i32* %eol_seen, align 4
  %or32 = or i32 %30, 4
  store i32 %or32, i32* %eol_seen, align 4
  %31 = load i8*, i8** %src, align 8
  %incdec.ptr33 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr33, i8** %src, align 8
  br label %if.end.36

if.else.34:                                       ; preds = %if.then.27
  %32 = load i32, i32* %eol_seen, align 4
  %or35 = or i32 %32, 2
  store i32 %or35, i32* %eol_seen, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.34, %if.then.31
  br label %if.end.43

if.else.37:                                       ; preds = %if.end.23
  %33 = load i32, i32* %c, align 4
  %cmp38 = icmp eq i32 %33, 10
  br i1 %cmp38, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %if.else.37
  %34 = load i32, i32* %eol_seen, align 4
  %or41 = or i32 %34, 1
  store i32 %or41, i32* %eol_seen, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.40, %if.else.37
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.end.36
  br label %while.cond.15

while.end.44:                                     ; preds = %if.then.22, %while.cond.15
  %35 = load i8*, i8** %src, align 8
  %36 = load i8*, i8** %end, align 8
  %cmp45 = icmp eq i8* %35, %36
  br i1 %cmp45, label %if.then.47, label %if.end.66

if.then.47:                                       ; preds = %while.end.44
  %37 = load i8*, i8** %src, align 8
  %38 = load i8, i8* %37, align 1
  %conv49 = zext i8 %38 to i32
  store i32 %conv49, i32* %c48, align 4
  %39 = load i32, i32* %c48, align 4
  %and50 = and i32 %39, 128
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.end.65, label %if.then.52

if.then.52:                                       ; preds = %if.then.47
  %40 = load i32, i32* %c48, align 4
  %cmp53 = icmp eq i32 %40, 13
  br i1 %cmp53, label %if.then.55, label %if.else.57

if.then.55:                                       ; preds = %if.then.52
  %41 = load i32, i32* %eol_seen, align 4
  %or56 = or i32 %41, 2
  store i32 %or56, i32* %eol_seen, align 4
  br label %if.end.63

if.else.57:                                       ; preds = %if.then.52
  %42 = load i32, i32* %c48, align 4
  %cmp58 = icmp eq i32 %42, 10
  br i1 %cmp58, label %if.then.60, label %if.end.62

if.then.60:                                       ; preds = %if.else.57
  %43 = load i32, i32* %eol_seen, align 4
  %or61 = or i32 %43, 1
  store i32 %or61, i32* %eol_seen, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.60, %if.else.57
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then.55
  %44 = load i8*, i8** %src, align 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr64, i8** %src, align 8
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.63, %if.then.47
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %while.end.44
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %while.end
  %45 = load i8*, i8** %src, align 8
  %46 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source68 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %46, i32 0, i32 17
  %47 = load i8*, i8** %source68, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %45 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %47 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %48 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %48, i32 0, i32 5
  store i64 %sub.ptr.sub, i64* %head_ascii, align 8
  %49 = load i32, i32* %eol_seen, align 4
  %50 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen69 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %50, i32 0, i32 1
  %bf.load70 = load i32, i32* %eol_seen69, align 8
  %bf.value = and i32 %49, 7
  %bf.shl = shl i32 %bf.value, 24
  %bf.clear71 = and i32 %bf.load70, -117440513
  %bf.set = or i32 %bf.clear71, %bf.shl
  store i32 %bf.set, i32* %eol_seen69, align 8
  %51 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii72 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %51, i32 0, i32 5
  %52 = load i64, i64* %head_ascii72, align 8
  ret i64 %52
}

; Function Attrs: nounwind uwtable
define internal i64 @check_utf_8(%struct.coding_system* %coding) #0 {
entry:
  %retval = alloca i64, align 8
  %coding.addr = alloca %struct.coding_system*, align 8
  %src = alloca i8*, align 8
  %end = alloca i8*, align 8
  %eol_seen = alloca i32, align 4
  %nchars = alloca i64, align 8
  %c = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 5
  %1 = load i64, i64* %head_ascii, align 8
  store i64 %1, i64* %nchars, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 5
  %3 = load i64, i64* %head_ascii1, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call = call i64 @check_ascii(%struct.coding_system* %4)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 17
  %7 = load i8*, i8** %source, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %head_ascii2 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 5
  %9 = load i64, i64* %head_ascii2, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr, i8** %src, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 17
  %11 = load i8*, i8** %source3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 15
  %13 = load i64, i64* %src_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  %add.ptr5 = getelementptr inbounds i8, i8* %add.ptr4, i64 -1
  store i8* %add.ptr5, i8** %end, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen6 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 1
  %bf.load = load i32, i32* %eol_seen6, align 8
  %bf.lshr = lshr i32 %bf.load, 24
  %bf.clear = and i32 %bf.lshr, 7
  store i32 %bf.clear, i32* %eol_seen, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.149, %if.end
  %15 = load i8*, i8** %src, align 8
  %16 = load i8*, i8** %end, align 8
  %cmp7 = icmp ult i8* %15, %16
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i8*, i8** %src, align 8
  %18 = load i8, i8* %17, align 1
  %conv = zext i8 %18 to i32
  store i32 %conv, i32* %c, align 4
  %19 = load i8*, i8** %src, align 8
  %20 = load i8, i8* %19, align 1
  %conv8 = zext i8 %20 to i32
  %cmp9 = icmp slt i32 %conv8, 128
  br i1 %cmp9, label %if.then.11, label %if.else.34

if.then.11:                                       ; preds = %while.body
  %21 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %22 = load i32, i32* %c, align 4
  %cmp12 = icmp slt i32 %22, 32
  br i1 %cmp12, label %if.then.14, label %if.end.33

if.then.14:                                       ; preds = %if.then.11
  %23 = load i32, i32* %c, align 4
  %cmp15 = icmp eq i32 %23, 13
  br i1 %cmp15, label %if.then.17, label %if.else.26

if.then.17:                                       ; preds = %if.then.14
  %24 = load i8*, i8** %src, align 8
  %25 = load i8, i8* %24, align 1
  %conv18 = zext i8 %25 to i32
  %cmp19 = icmp eq i32 %conv18, 10
  br i1 %cmp19, label %if.then.21, label %if.else.23

if.then.21:                                       ; preds = %if.then.17
  %26 = load i32, i32* %eol_seen, align 4
  %or = or i32 %26, 4
  store i32 %or, i32* %eol_seen, align 4
  %27 = load i8*, i8** %src, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr22, i8** %src, align 8
  %28 = load i64, i64* %nchars, align 8
  %inc = add nsw i64 %28, 1
  store i64 %inc, i64* %nchars, align 8
  br label %if.end.25

if.else.23:                                       ; preds = %if.then.17
  %29 = load i32, i32* %eol_seen, align 4
  %or24 = or i32 %29, 2
  store i32 %or24, i32* %eol_seen, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.23, %if.then.21
  br label %if.end.32

if.else.26:                                       ; preds = %if.then.14
  %30 = load i32, i32* %c, align 4
  %cmp27 = icmp eq i32 %30, 10
  br i1 %cmp27, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %if.else.26
  %31 = load i32, i32* %eol_seen, align 4
  %or30 = or i32 %31, 1
  store i32 %or30, i32* %eol_seen, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.29, %if.else.26
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.end.25
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.11
  br label %if.end.149

if.else.34:                                       ; preds = %while.body
  %32 = load i32, i32* %c, align 4
  %and = and i32 %32, 224
  %cmp35 = icmp eq i32 %and, 192
  br i1 %cmp35, label %if.then.37, label %if.else.51

if.then.37:                                       ; preds = %if.else.34
  %33 = load i32, i32* %c, align 4
  %cmp38 = icmp slt i32 %33, 194
  br i1 %cmp38, label %if.then.48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.37
  %34 = load i8*, i8** %src, align 8
  %add.ptr40 = getelementptr inbounds i8, i8* %34, i64 1
  %35 = load i8*, i8** %end, align 8
  %cmp41 = icmp uge i8* %add.ptr40, %35
  br i1 %cmp41, label %if.then.48, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %lor.lhs.false
  %36 = load i8*, i8** %src, align 8
  %arrayidx = getelementptr inbounds i8, i8* %36, i64 1
  %37 = load i8, i8* %arrayidx, align 1
  %conv44 = zext i8 %37 to i32
  %and45 = and i32 %conv44, 192
  %cmp46 = icmp eq i32 %and45, 128
  br i1 %cmp46, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %lor.lhs.false.43, %lor.lhs.false, %if.then.37
  store i64 -1, i64* %retval
  br label %return

if.end.49:                                        ; preds = %lor.lhs.false.43
  %38 = load i8*, i8** %src, align 8
  %add.ptr50 = getelementptr inbounds i8, i8* %38, i64 2
  store i8* %add.ptr50, i8** %src, align 8
  br label %if.end.148

if.else.51:                                       ; preds = %if.else.34
  %39 = load i32, i32* %c, align 4
  %and52 = and i32 %39, 240
  %cmp53 = icmp eq i32 %and52, 224
  br i1 %cmp53, label %if.then.55, label %if.else.93

if.then.55:                                       ; preds = %if.else.51
  %40 = load i8*, i8** %src, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %40, i64 2
  %41 = load i8*, i8** %end, align 8
  %cmp57 = icmp uge i8* %add.ptr56, %41
  br i1 %cmp57, label %if.then.70, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %if.then.55
  %42 = load i8*, i8** %src, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %43 to i32
  %and62 = and i32 %conv61, 192
  %cmp63 = icmp eq i32 %and62, 128
  br i1 %cmp63, label %land.lhs.true, label %if.then.70

land.lhs.true:                                    ; preds = %lor.lhs.false.59
  %44 = load i8*, i8** %src, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %44, i64 2
  %45 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %45 to i32
  %and67 = and i32 %conv66, 192
  %cmp68 = icmp eq i32 %and67, 128
  br i1 %cmp68, label %if.end.71, label %if.then.70

if.then.70:                                       ; preds = %land.lhs.true, %lor.lhs.false.59, %if.then.55
  store i64 -1, i64* %retval
  br label %return

if.end.71:                                        ; preds = %land.lhs.true
  %46 = load i32, i32* %c, align 4
  %and72 = and i32 %46, 15
  %shl = shl i32 %and72, 12
  %47 = load i8*, i8** %src, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %48 to i32
  %and75 = and i32 %conv74, 63
  %shl76 = shl i32 %and75, 6
  %or77 = or i32 %shl, %shl76
  %49 = load i8*, i8** %src, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %49, i64 2
  %50 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %50 to i32
  %and80 = and i32 %conv79, 63
  %or81 = or i32 %or77, %and80
  store i32 %or81, i32* %c, align 4
  %51 = load i32, i32* %c, align 4
  %cmp82 = icmp slt i32 %51, 2048
  br i1 %cmp82, label %if.then.90, label %lor.lhs.false.84

lor.lhs.false.84:                                 ; preds = %if.end.71
  %52 = load i32, i32* %c, align 4
  %cmp85 = icmp sge i32 %52, 55296
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.91

land.lhs.true.87:                                 ; preds = %lor.lhs.false.84
  %53 = load i32, i32* %c, align 4
  %cmp88 = icmp slt i32 %53, 57344
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %land.lhs.true.87, %if.end.71
  store i64 -1, i64* %retval
  br label %return

if.end.91:                                        ; preds = %land.lhs.true.87, %lor.lhs.false.84
  %54 = load i8*, i8** %src, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %54, i64 3
  store i8* %add.ptr92, i8** %src, align 8
  br label %if.end.147

if.else.93:                                       ; preds = %if.else.51
  %55 = load i32, i32* %c, align 4
  %and94 = and i32 %55, 248
  %cmp95 = icmp eq i32 %and94, 240
  br i1 %cmp95, label %if.then.97, label %if.else.145

if.then.97:                                       ; preds = %if.else.93
  %56 = load i8*, i8** %src, align 8
  %add.ptr98 = getelementptr inbounds i8, i8* %56, i64 3
  %57 = load i8*, i8** %end, align 8
  %cmp99 = icmp uge i8* %add.ptr98, %57
  br i1 %cmp99, label %if.then.119, label %lor.lhs.false.101

lor.lhs.false.101:                                ; preds = %if.then.97
  %58 = load i8*, i8** %src, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %58, i64 1
  %59 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %59 to i32
  %and104 = and i32 %conv103, 192
  %cmp105 = icmp eq i32 %and104, 128
  br i1 %cmp105, label %land.lhs.true.107, label %if.then.119

land.lhs.true.107:                                ; preds = %lor.lhs.false.101
  %60 = load i8*, i8** %src, align 8
  %arrayidx108 = getelementptr inbounds i8, i8* %60, i64 2
  %61 = load i8, i8* %arrayidx108, align 1
  %conv109 = zext i8 %61 to i32
  %and110 = and i32 %conv109, 192
  %cmp111 = icmp eq i32 %and110, 128
  br i1 %cmp111, label %land.lhs.true.113, label %if.then.119

land.lhs.true.113:                                ; preds = %land.lhs.true.107
  %62 = load i8*, i8** %src, align 8
  %arrayidx114 = getelementptr inbounds i8, i8* %62, i64 3
  %63 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %63 to i32
  %and116 = and i32 %conv115, 192
  %cmp117 = icmp eq i32 %and116, 128
  br i1 %cmp117, label %if.end.120, label %if.then.119

if.then.119:                                      ; preds = %land.lhs.true.113, %land.lhs.true.107, %lor.lhs.false.101, %if.then.97
  store i64 -1, i64* %retval
  br label %return

if.end.120:                                       ; preds = %land.lhs.true.113
  %64 = load i32, i32* %c, align 4
  %and121 = and i32 %64, 7
  %shl122 = shl i32 %and121, 18
  %65 = load i8*, i8** %src, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %65, i64 1
  %66 = load i8, i8* %arrayidx123, align 1
  %conv124 = zext i8 %66 to i32
  %and125 = and i32 %conv124, 63
  %shl126 = shl i32 %and125, 12
  %or127 = or i32 %shl122, %shl126
  %67 = load i8*, i8** %src, align 8
  %arrayidx128 = getelementptr inbounds i8, i8* %67, i64 2
  %68 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %68 to i32
  %and130 = and i32 %conv129, 63
  %shl131 = shl i32 %and130, 6
  %or132 = or i32 %or127, %shl131
  %69 = load i8*, i8** %src, align 8
  %arrayidx133 = getelementptr inbounds i8, i8* %69, i64 3
  %70 = load i8, i8* %arrayidx133, align 1
  %conv134 = zext i8 %70 to i32
  %and135 = and i32 %conv134, 63
  %or136 = or i32 %or132, %and135
  store i32 %or136, i32* %c, align 4
  %71 = load i32, i32* %c, align 4
  %cmp137 = icmp slt i32 %71, 65536
  br i1 %cmp137, label %if.then.142, label %lor.lhs.false.139

lor.lhs.false.139:                                ; preds = %if.end.120
  %72 = load i32, i32* %c, align 4
  %cmp140 = icmp sge i32 %72, 1114112
  br i1 %cmp140, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %lor.lhs.false.139, %if.end.120
  store i64 -1, i64* %retval
  br label %return

if.end.143:                                       ; preds = %lor.lhs.false.139
  %73 = load i8*, i8** %src, align 8
  %add.ptr144 = getelementptr inbounds i8, i8* %73, i64 4
  store i8* %add.ptr144, i8** %src, align 8
  br label %if.end.146

if.else.145:                                      ; preds = %if.else.93
  store i64 -1, i64* %retval
  br label %return

if.end.146:                                       ; preds = %if.end.143
  br label %if.end.147

if.end.147:                                       ; preds = %if.end.146, %if.end.91
  br label %if.end.148

if.end.148:                                       ; preds = %if.end.147, %if.end.49
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.end.33
  %74 = load i64, i64* %nchars, align 8
  %inc150 = add nsw i64 %74, 1
  store i64 %inc150, i64* %nchars, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %75 = load i8*, i8** %src, align 8
  %76 = load i8*, i8** %end, align 8
  %cmp151 = icmp eq i8* %75, %76
  br i1 %cmp151, label %if.then.153, label %if.end.173

if.then.153:                                      ; preds = %while.end
  %77 = load i8*, i8** %src, align 8
  %78 = load i8, i8* %77, align 1
  %conv154 = zext i8 %78 to i32
  %cmp155 = icmp slt i32 %conv154, 128
  br i1 %cmp155, label %if.end.158, label %if.then.157

if.then.157:                                      ; preds = %if.then.153
  store i64 -1, i64* %retval
  br label %return

if.end.158:                                       ; preds = %if.then.153
  %79 = load i64, i64* %nchars, align 8
  %inc159 = add nsw i64 %79, 1
  store i64 %inc159, i64* %nchars, align 8
  %80 = load i8*, i8** %src, align 8
  %81 = load i8, i8* %80, align 1
  %conv160 = zext i8 %81 to i32
  %cmp161 = icmp eq i32 %conv160, 13
  br i1 %cmp161, label %if.then.163, label %if.else.165

if.then.163:                                      ; preds = %if.end.158
  %82 = load i32, i32* %eol_seen, align 4
  %or164 = or i32 %82, 2
  store i32 %or164, i32* %eol_seen, align 4
  br label %if.end.172

if.else.165:                                      ; preds = %if.end.158
  %83 = load i8*, i8** %src, align 8
  %84 = load i8, i8* %83, align 1
  %conv166 = zext i8 %84 to i32
  %cmp167 = icmp eq i32 %conv166, 10
  br i1 %cmp167, label %if.then.169, label %if.end.171

if.then.169:                                      ; preds = %if.else.165
  %85 = load i32, i32* %eol_seen, align 4
  %or170 = or i32 %85, 1
  store i32 %or170, i32* %eol_seen, align 4
  br label %if.end.171

if.end.171:                                       ; preds = %if.then.169, %if.else.165
  br label %if.end.172

if.end.172:                                       ; preds = %if.end.171, %if.then.163
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172, %while.end
  %86 = load i32, i32* %eol_seen, align 4
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %eol_seen174 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %87, i32 0, i32 1
  %bf.load175 = load i32, i32* %eol_seen174, align 8
  %bf.value = and i32 %86, 7
  %bf.shl = shl i32 %bf.value, 24
  %bf.clear176 = and i32 %bf.load175, -117440513
  %bf.set = or i32 %bf.clear176, %bf.shl
  store i32 %bf.set, i32* %eol_seen174, align 8
  %88 = load i64, i64* %nchars, align 8
  store i64 %88, i64* %retval
  br label %return

return:                                           ; preds = %if.end.173, %if.then.157, %if.else.145, %if.then.142, %if.then.119, %if.then.90, %if.then.70, %if.then.48
  %89 = load i64, i64* %retval
  ret i64 %89
}

; Function Attrs: nounwind uwtable
define internal i64 @adjust_coding_eol_type(%struct.coding_system* %coding, i32 %eol_seen) #0 {
entry:
  %retval = alloca i64, align 8
  %coding.addr = alloca %struct.coding_system*, align 8
  %eol_seen.addr = alloca i32, align 4
  %eol_type = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i32 %eol_seen, i32* %eol_seen.addr, align 4
  %0 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %0)
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 0
  %2 = load i64, i64* %id, align 8
  %call1 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %2)
  %call2 = call i64 @AREF(i64 %call1, i64 2)
  store i64 %call2, i64* %eol_type, align 8
  %3 = load i64, i64* %eol_type, align 8
  %call3 = call zeroext i1 @VECTORP(i64 %3)
  br i1 %call3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %eol_type, align 8
  store i64 %4, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %eol_seen.addr, align 4
  %and = and i32 %5, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call5 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %6)
  %7 = load i64, i64* %eol_type, align 8
  %call6 = call i64 @AREF(i64 %7, i64 0)
  %call7 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call5, i64 %call6, i64* null)
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id8 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 0
  store i64 %call7, i64* %id8, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 973)
  store i64 %call9, i64* %eol_type, align 8
  br label %if.end.29

if.else:                                          ; preds = %if.end
  %9 = load i32, i32* %eol_seen.addr, align 4
  %and10 = and i32 %9, 4
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then.12, label %if.else.18

if.then.12:                                       ; preds = %if.else
  %10 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call13 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %10)
  %11 = load i64, i64* %eol_type, align 8
  %call14 = call i64 @AREF(i64 %11, i64 1)
  %call15 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call13, i64 %call14, i64* null)
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id16 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 0
  store i64 %call15, i64* %id16, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 351)
  store i64 %call17, i64* %eol_type, align 8
  br label %if.end.28

if.else.18:                                       ; preds = %if.else
  %13 = load i32, i32* %eol_seen.addr, align 4
  %and19 = and i32 %13, 2
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.27

if.then.21:                                       ; preds = %if.else.18
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call22 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %14)
  %15 = load i64, i64* %eol_type, align 8
  %call23 = call i64 @AREF(i64 %15, i64 2)
  %call24 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call22, i64 %call23, i64* null)
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id25 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 0
  store i64 %call24, i64* %id25, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 635)
  store i64 %call26, i64* %eol_type, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.21, %if.else.18
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.12
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then.4
  %17 = load i64, i64* %eol_type, align 8
  store i64 %17, i64* %retval
  br label %return

return:                                           ; preds = %if.end.29, %if.then
  %18 = load i64, i64* %retval
  ret i64 %18
}

declare void @insert_from_gap(i64, i64, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define internal void @decode_coding(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %attrs = alloca i64, align 8
  %undo_list = alloca i64, align 8
  %translation_table = alloca i64, align 8
  %cclspec = alloca %struct.ccl_spec, align 8
  %carryover = alloca i32, align 4
  %i = alloca i32, align 4
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %units = alloca i64, align 8
  %pos = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %src = alloca i8*, align 8
  %c = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 16
  %1 = load i64, i64* %src_object, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 12
  %3 = load i64, i64* %src_pos, align 8
  %cmp = icmp sgt i64 %3, 0
  br i1 %cmp, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 12
  %5 = load i64, i64* %src_pos3, align 8
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 73
  %7 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %7, i32 0, i32 1
  %8 = load i64, i64* %gpt, align 8
  %cmp4 = icmp slt i64 %5, %8
  br i1 %cmp4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %land.lhs.true.2
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos6 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 12
  %10 = load i64, i64* %src_pos6, align 8
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 14
  %12 = load i64, i64* %src_chars, align 8
  %add = add nsw i64 %10, %12
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 73
  %14 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %gpt8 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %14, i32 0, i32 1
  %15 = load i64, i64* %gpt8, align 8
  %cmp9 = icmp sgt i64 %add, %15
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.5
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos10 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 12
  %17 = load i64, i64* %src_pos10, align 8
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %18, i32 0, i32 13
  %19 = load i64, i64* %src_pos_byte, align 8
  call void @move_gap_both(i64 %17, i64 %19)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.5, %land.lhs.true.2, %land.lhs.true, %entry
  %call11 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call11, i64* %undo_list, align 8
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 21
  %21 = load i64, i64* %dst_object, align 8
  %call12 = call zeroext i1 @BUFFERP(i64 %21)
  br i1 %call12, label %if.then.13, label %if.end.31

if.then.13:                                       ; preds = %if.end
  %22 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %22, i32 0, i32 21
  %23 = load i64, i64* %dst_object14, align 8
  %call15 = call %struct.buffer* @XBUFFER(i64 %23)
  call void @set_buffer_internal(%struct.buffer* %call15)
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text16 = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 73
  %25 = load %struct.buffer_text*, %struct.buffer_text** %text16, align 8
  %gpt17 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %25, i32 0, i32 1
  %26 = load i64, i64* %gpt17, align 8
  %27 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 75
  %28 = load i64, i64* %pt, align 8
  %add18 = add nsw i64 %28, 0
  %cmp19 = icmp ne i64 %26, %add18
  br i1 %cmp19, label %if.then.20, label %if.end.24

if.then.20:                                       ; preds = %if.then.13
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt21 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 75
  %30 = load i64, i64* %pt21, align 8
  %add22 = add nsw i64 %30, 0
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 76
  %32 = load i64, i64* %pt_byte, align 8
  %add23 = add nsw i64 %32, 0
  call void @move_gap_both(i64 %add22, i64 %add23)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.20, %if.then.13
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text25 = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 73
  %34 = load %struct.buffer_text*, %struct.buffer_text** %text25, align 8
  %modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %34, i32 0, i32 6
  %35 = load i64, i64* %modiff, align 8
  %36 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text26 = getelementptr inbounds %struct.buffer, %struct.buffer* %36, i32 0, i32 73
  %37 = load %struct.buffer_text*, %struct.buffer_text** %text26, align 8
  %save_modiff = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %37, i32 0, i32 8
  %38 = load i64, i64* %save_modiff, align 8
  %cmp27 = icmp sle i64 %35, %38
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.24
  call void @record_first_change()
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %if.end.24
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %undo_list_ = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 98
  %40 = load i64, i64* %undo_list_, align 8
  store i64 %40, i64* %undo_list, align 8
  %41 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 901)
  call void @bset_undo_list(%struct.buffer* %41, i64 %call30)
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.29, %if.end
  %42 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %42, i32 0, i32 11
  store i64 0, i64* %consumed_char, align 8
  %43 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %43, i32 0, i32 10
  store i64 0, i64* %consumed, align 8
  %44 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %44, i32 0, i32 9
  store i64 0, i64* %produced_char, align 8
  %45 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %45, i32 0, i32 8
  store i64 0, i64* %produced, align 8
  %46 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %chars_at_source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %46, i32 0, i32 1
  %bf.load = load i32, i32* %chars_at_source, align 8
  %bf.clear = and i32 %bf.load, -2097153
  store i32 %bf.clear, i32* %chars_at_source, align 8
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %47, i32 0)
  br label %do.body

do.body:                                          ; preds = %if.end.31
  %48 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %48, i32 0, i32 15
  %49 = load i64, i64* %src_bytes, align 8
  %add32 = add nsw i64 %49, 16
  %cmp33 = icmp slt i64 %add32, 16384
  br i1 %cmp33, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %50 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes34 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %50, i32 0, i32 15
  %51 = load i64, i64* %src_bytes34, align 8
  %add35 = add nsw i64 %51, 16
  br label %cond.end

cond.false:                                       ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add35, %cond.true ], [ 16384, %cond.false ]
  store i64 %cond, i64* %units, align 8
  %52 = load i64, i64* %units, align 8
  %mul = mul i64 %52, 4
  %53 = load i64, i64* %sa_avail, align 8
  %cmp36 = icmp ule i64 %mul, %53
  br i1 %cmp36, label %cond.true.37, label %cond.false.40

cond.true.37:                                     ; preds = %cond.end
  %54 = load i64, i64* %units, align 8
  %mul38 = mul i64 %54, 4
  %55 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %55, %mul38
  store i64 %sub, i64* %sa_avail, align 8
  %56 = load i64, i64* %units, align 8
  %mul39 = mul i64 %56, 4
  %57 = alloca i8, i64 %mul39
  br label %cond.end.43

cond.false.40:                                    ; preds = %cond.end
  store i8 1, i8* %sa_must_free, align 1
  %58 = load i64, i64* %units, align 8
  %mul41 = mul i64 %58, 4
  %call42 = call i8* @record_xmalloc(i64 %mul41)
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.40, %cond.true.37
  %cond44 = phi i8* [ %57, %cond.true.37 ], [ %call42, %cond.false.40 ]
  %59 = bitcast i8* %cond44 to i32*
  %60 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf = getelementptr inbounds %struct.coding_system, %struct.coding_system* %60, i32 0, i32 23
  store i32* %59, i32** %charbuf, align 8
  %61 = load i64, i64* %units, align 8
  %conv = trunc i64 %61 to i32
  %62 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %62, i32 0, i32 24
  store i32 %conv, i32* %charbuf_size, align 4
  br label %do.end

do.end:                                           ; preds = %cond.end.43
  %63 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call45 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %63)
  %64 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %64, i32 0, i32 0
  %65 = load i64, i64* %id, align 8
  %call46 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call45, i64 %65)
  %call47 = call i64 @AREF(i64 %call46, i64 0)
  store i64 %call47, i64* %attrs, align 8
  %66 = load i64, i64* %attrs, align 8
  %call48 = call i64 @get_translation_table(i64 %66, i1 zeroext false, i32* null)
  store i64 %call48, i64* %translation_table, align 8
  store i32 0, i32* %carryover, align 4
  %67 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder = getelementptr inbounds %struct.coding_system, %struct.coding_system* %67, i32 0, i32 30
  %68 = load void (%struct.coding_system*)*, void (%struct.coding_system*)** %decoder, align 8
  %cmp49 = icmp eq void (%struct.coding_system*)* %68, @decode_coding_ccl
  br i1 %cmp49, label %if.then.51, label %if.end.59

if.then.51:                                       ; preds = %do.end
  %69 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %69, i32 0, i32 3
  %ccl = bitcast %union.anon* %spec to %struct.ccl_spec**
  store %struct.ccl_spec* %cclspec, %struct.ccl_spec** %ccl, align 8
  %ccl52 = getelementptr inbounds %struct.ccl_spec, %struct.ccl_spec* %cclspec, i32 0, i32 0
  %70 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call53 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %70)
  %71 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id54 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %71, i32 0, i32 0
  %72 = load i64, i64* %id54, align 8
  %call55 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call53, i64 %72)
  %call56 = call i64 @AREF(i64 %call55, i64 0)
  %call57 = call i64 @AREF(i64 %call56, i64 17)
  %call58 = call zeroext i1 @setup_ccl_program(%struct.ccl_program* %ccl52, i64 %call57)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.51, %do.end
  br label %do.body.60

do.body.60:                                       ; preds = %lor.end.103, %if.end.59
  %73 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %73, i32 0, i32 18
  %74 = load i64, i64* %dst_pos, align 8
  %75 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char61 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %75, i32 0, i32 9
  %76 = load i64, i64* %produced_char61, align 8
  %add62 = add nsw i64 %74, %76
  store i64 %add62, i64* %pos, align 8
  %77 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %77)
  %78 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %78, i32 0, i32 1
  %bf.load63 = load i32, i32* %annotated, align 8
  %bf.clear64 = and i32 %bf.load63, -8388609
  store i32 %bf.clear64, i32* %annotated, align 8
  %79 = load i32, i32* %carryover, align 4
  %80 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %80, i32 0, i32 25
  store i32 %79, i32* %charbuf_used, align 4
  %81 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %decoder65 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %81, i32 0, i32 30
  %82 = load void (%struct.coding_system*)*, void (%struct.coding_system*)** %decoder65, align 8
  %83 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void %82(%struct.coding_system* %83)
  %84 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_destination(%struct.coding_system* %84)
  %85 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %86 = load i64, i64* %translation_table, align 8
  %call66 = call i32 @produce_chars(%struct.coding_system* %85, i64 %86, i1 zeroext false)
  store i32 %call66, i32* %carryover, align 4
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated67 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %87, i32 0, i32 1
  %bf.load68 = load i32, i32* %annotated67, align 8
  %bf.lshr = lshr i32 %bf.load68, 23
  %bf.clear69 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear69 to i1
  br i1 %bf.cast, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %do.body.60
  %88 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %89 = load i64, i64* %pos, align 8
  call void @produce_annotation(%struct.coding_system* %88, i64 %89)
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.70, %do.body.60
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.71
  %90 = load i32, i32* %i, align 4
  %91 = load i32, i32* %carryover, align 4
  %cmp72 = icmp slt i32 %90, %91
  br i1 %cmp72, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %92 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used74 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %92, i32 0, i32 25
  %93 = load i32, i32* %charbuf_used74, align 4
  %94 = load i32, i32* %carryover, align 4
  %sub75 = sub nsw i32 %93, %94
  %95 = load i32, i32* %i, align 4
  %add76 = add nsw i32 %sub75, %95
  %idxprom = sext i32 %add76 to i64
  %96 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf77 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %96, i32 0, i32 23
  %97 = load i32*, i32** %charbuf77, align 8
  %arrayidx = getelementptr inbounds i32, i32* %97, i64 %idxprom
  %98 = load i32, i32* %arrayidx, align 4
  %99 = load i32, i32* %i, align 4
  %idxprom78 = sext i32 %99 to i64
  %100 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf79 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %100, i32 0, i32 23
  %101 = load i32*, i32** %charbuf79, align 8
  %arrayidx80 = getelementptr inbounds i32, i32* %101, i64 %idxprom78
  store i32 %98, i32* %arrayidx80, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %102 = load i32, i32* %i, align 4
  %inc = add nsw i32 %102, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.cond

do.cond:                                          ; preds = %for.end
  %103 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %result = getelementptr inbounds %struct.coding_system, %struct.coding_system* %103, i32 0, i32 1
  %bf.load81 = load i32, i32* %result, align 8
  %bf.lshr82 = lshr i32 %bf.load81, 27
  %bf.clear83 = and i32 %bf.lshr82, 7
  %cmp84 = icmp eq i32 %bf.clear83, 2
  br i1 %cmp84, label %lor.end.103, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond
  %104 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed86 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %104, i32 0, i32 10
  %105 = load i64, i64* %consumed86, align 8
  %106 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes87 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %106, i32 0, i32 15
  %107 = load i64, i64* %src_bytes87, align 8
  %cmp88 = icmp slt i64 %105, %107
  br i1 %cmp88, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %108 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %result90 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %108, i32 0, i32 1
  %bf.load91 = load i32, i32* %result90, align 8
  %bf.lshr92 = lshr i32 %bf.load91, 27
  %bf.clear93 = and i32 %bf.lshr92, 7
  %cmp94 = icmp eq i32 %bf.clear93, 0
  br i1 %cmp94, label %lor.end, label %lor.rhs.96

lor.rhs.96:                                       ; preds = %land.rhs
  %109 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %result97 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %109, i32 0, i32 1
  %bf.load98 = load i32, i32* %result97, align 8
  %bf.lshr99 = lshr i32 %bf.load98, 27
  %bf.clear100 = and i32 %bf.lshr99, 7
  %cmp101 = icmp eq i32 %bf.clear100, 3
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs.96, %land.rhs
  %110 = phi i1 [ true, %land.rhs ], [ %cmp101, %lor.rhs.96 ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.rhs
  %111 = phi i1 [ false, %lor.rhs ], [ %110, %lor.end ]
  br label %lor.end.103

lor.end.103:                                      ; preds = %land.end, %do.cond
  %112 = phi i1 [ true, %do.cond ], [ %111, %land.end ]
  br i1 %112, label %do.body.60, label %do.end.104

do.end.104:                                       ; preds = %lor.end.103
  %113 = load i32, i32* %carryover, align 4
  %cmp105 = icmp sgt i32 %113, 0
  br i1 %cmp105, label %if.then.107, label %if.end.110

if.then.107:                                      ; preds = %do.end.104
  %114 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_destination(%struct.coding_system* %114)
  %115 = load i32, i32* %carryover, align 4
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used108 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %116, i32 0, i32 25
  store i32 %115, i32* %charbuf_used108, align 4
  %117 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %118 = load i64, i64* %translation_table, align 8
  %call109 = call i32 @produce_chars(%struct.coding_system* %117, i64 %118, i1 zeroext true)
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.107, %do.end.104
  %119 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %carryover_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %119, i32 0, i32 27
  store i32 0, i32* %carryover_bytes, align 4
  %120 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed111 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %120, i32 0, i32 10
  %121 = load i64, i64* %consumed111, align 8
  %122 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes112 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %122, i32 0, i32 15
  %123 = load i64, i64* %src_bytes112, align 8
  %cmp113 = icmp slt i64 %121, %123
  br i1 %cmp113, label %if.then.115, label %if.end.161

if.then.115:                                      ; preds = %if.end.110
  %124 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes116 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %124, i32 0, i32 15
  %125 = load i64, i64* %src_bytes116, align 8
  %126 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed117 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %126, i32 0, i32 10
  %127 = load i64, i64* %consumed117, align 8
  %sub118 = sub nsw i64 %125, %127
  store i64 %sub118, i64* %nbytes, align 8
  %128 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %128)
  %129 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_destination(%struct.coding_system* %129)
  %130 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %130, i32 0, i32 17
  %131 = load i8*, i8** %source, align 8
  %132 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed119 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %132, i32 0, i32 10
  %133 = load i64, i64* %consumed119, align 8
  %add.ptr = getelementptr inbounds i8, i8* %131, i64 %133
  store i8* %add.ptr, i8** %src, align 8
  %134 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %134, i32 0, i32 1
  %bf.load120 = load i32, i32* %mode, align 8
  %bf.lshr121 = lshr i32 %bf.load120, 14
  %bf.clear122 = and i32 %bf.lshr121, 31
  %and = and i32 %bf.clear122, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.123, label %if.else

if.then.123:                                      ; preds = %if.then.115
  %135 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used124 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %135, i32 0, i32 25
  store i32 0, i32* %charbuf_used124, align 4
  %136 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %chars_at_source125 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %136, i32 0, i32 1
  %bf.load126 = load i32, i32* %chars_at_source125, align 8
  %bf.clear127 = and i32 %bf.load126, -2097153
  store i32 %bf.clear127, i32* %chars_at_source125, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.135, %if.then.123
  %137 = load i64, i64* %nbytes, align 8
  %dec = add nsw i64 %137, -1
  store i64 %dec, i64* %nbytes, align 8
  %cmp128 = icmp sgt i64 %137, 0
  br i1 %cmp128, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %138 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %138, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %139 = load i8, i8* %138, align 1
  %conv130 = zext i8 %139 to i32
  store i32 %conv130, i32* %c, align 4
  %140 = load i32, i32* %c, align 4
  %and131 = and i32 %140, 128
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %if.then.133, label %if.end.135

if.then.133:                                      ; preds = %while.body
  %141 = load i32, i32* %c, align 4
  %add134 = add nsw i32 %141, 4194048
  store i32 %add134, i32* %c, align 4
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.133, %while.body
  %142 = load i32, i32* %c, align 4
  %143 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used136 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %143, i32 0, i32 25
  %144 = load i32, i32* %charbuf_used136, align 4
  %inc137 = add nsw i32 %144, 1
  store i32 %inc137, i32* %charbuf_used136, align 4
  %idxprom138 = sext i32 %144 to i64
  %145 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf139 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %145, i32 0, i32 23
  %146 = load i32*, i32** %charbuf139, align 8
  %arrayidx140 = getelementptr inbounds i32, i32* %146, i64 %idxprom138
  store i32 %142, i32* %arrayidx140, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %147 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call141 = call i64 @builtin_lisp_symbol(i32 0)
  %call142 = call i32 @produce_chars(%struct.coding_system* %147, i64 %call141, i1 zeroext true)
  br label %if.end.158

if.else:                                          ; preds = %if.then.115
  %148 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %carryover143 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %148, i32 0, i32 26
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %carryover143, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8
  %149 = load i64, i64* %nbytes, align 8
  %cmp144 = icmp ugt i64 %149, 64
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %if.else
  store i64 64, i64* %nbytes, align 8
  br label %if.end.147

if.end.147:                                       ; preds = %if.then.146, %if.else
  %150 = load i64, i64* %nbytes, align 8
  %conv148 = trunc i64 %150 to i32
  %151 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %carryover_bytes149 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %151, i32 0, i32 27
  store i32 %conv148, i32* %carryover_bytes149, align 4
  br label %while.cond.150

while.cond.150:                                   ; preds = %while.body.154, %if.end.147
  %152 = load i64, i64* %nbytes, align 8
  %dec151 = add nsw i64 %152, -1
  store i64 %dec151, i64* %nbytes, align 8
  %cmp152 = icmp sgt i64 %152, 0
  br i1 %cmp152, label %while.body.154, label %while.end.157

while.body.154:                                   ; preds = %while.cond.150
  %153 = load i8*, i8** %src, align 8
  %incdec.ptr155 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %incdec.ptr155, i8** %src, align 8
  %154 = load i8, i8* %153, align 1
  %155 = load i8*, i8** %p, align 8
  %incdec.ptr156 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %incdec.ptr156, i8** %p, align 8
  store i8 %154, i8* %155, align 1
  br label %while.cond.150

while.end.157:                                    ; preds = %while.cond.150
  br label %if.end.158

if.end.158:                                       ; preds = %while.end.157, %while.end
  %156 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes159 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %156, i32 0, i32 15
  %157 = load i64, i64* %src_bytes159, align 8
  %158 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed160 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %158, i32 0, i32 10
  store i64 %157, i64* %consumed160, align 8
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.158, %if.end.110
  %159 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call162 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %159)
  %160 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id163 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %160, i32 0, i32 0
  %161 = load i64, i64* %id163, align 8
  %call164 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call162, i64 %161)
  %call165 = call i64 @AREF(i64 %call164, i64 2)
  %call166 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp167 = icmp eq i64 %call165, %call166
  br i1 %cmp167, label %if.end.172, label %land.lhs.true.169

land.lhs.true.169:                                ; preds = %if.end.161
  %162 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool170 = trunc i8 %162 to i1
  br i1 %tobool170, label %if.end.172, label %if.then.171

if.then.171:                                      ; preds = %land.lhs.true.169
  %163 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @decode_eol(%struct.coding_system* %163)
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.171, %land.lhs.true.169, %if.end.161
  %164 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object173 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %164, i32 0, i32 21
  %165 = load i64, i64* %dst_object173, align 8
  %call174 = call zeroext i1 @BUFFERP(i64 %165)
  br i1 %call174, label %if.then.175, label %if.end.178

if.then.175:                                      ; preds = %if.end.172
  %166 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %167 = load i64, i64* %undo_list, align 8
  call void @bset_undo_list(%struct.buffer* %166, i64 %167)
  %168 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos176 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %168, i32 0, i32 18
  %169 = load i64, i64* %dst_pos176, align 8
  %170 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char177 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %170, i32 0, i32 9
  %171 = load i64, i64* %produced_char177, align 8
  call void @record_insert(i64 %169, i64 %171)
  br label %if.end.178

if.end.178:                                       ; preds = %if.then.175, %if.end.172
  br label %do.body.179

do.body.179:                                      ; preds = %if.end.178
  %172 = load i8, i8* %sa_must_free, align 1
  %tobool180 = trunc i8 %172 to i1
  br i1 %tobool180, label %if.then.181, label %if.end.184

if.then.181:                                      ; preds = %do.body.179
  store i8 0, i8* %sa_must_free, align 1
  %173 = load i64, i64* %sa_count, align 8
  %call182 = call i64 @builtin_lisp_symbol(i32 0)
  %call183 = call i64 @unbind_to(i64 %173, i64 %call182)
  br label %if.end.184

if.end.184:                                       ; preds = %if.then.181, %do.body.179
  br label %do.end.186

do.end.186:                                       ; preds = %if.end.184
  ret void
}

declare void @temp_set_point_both(%struct.buffer*, i64, i64) #1

declare i64 @call1(i64, i64) #1

declare void @CHECK_NATNUM(i64) #1

declare i64 @unbind_to(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @decode_coding_object(%struct.coding_system* %coding, i64 %src_object, i64 %from, i64 %from_byte, i64 %to, i64 %to_byte, i64 %dst_object) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src_object.addr = alloca i64, align 8
  %from.addr = alloca i64, align 8
  %from_byte.addr = alloca i64, align 8
  %to.addr = alloca i64, align 8
  %to_byte.addr = alloca i64, align 8
  %dst_object.addr = alloca i64, align 8
  %count = alloca i64, align 8
  %destination = alloca i8*, align 8
  %dst_bytes = alloca i64, align 8
  %chars = alloca i64, align 8
  %bytes = alloca i64, align 8
  %attrs = alloca i64, align 8
  %saved_pt = alloca i64, align 8
  %saved_pt_byte = alloca i64, align 8
  %need_marker_adjustment = alloca i8, align 1
  %old_deactivate_mark = alloca i64, align 8
  %tail = alloca %struct.Lisp_Marker*, align 8
  %prev_Z = alloca i64, align 8
  %prev_Z_BYTE = alloca i64, align 8
  %val = alloca i64, align 8
  %tail284 = alloca %struct.Lisp_Marker*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %src_object, i64* %src_object.addr, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %from_byte, i64* %from_byte.addr, align 8
  store i64 %to, i64* %to.addr, align 8
  store i64 %to_byte, i64* %to_byte.addr, align 8
  store i64 %dst_object, i64* %dst_object.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %0 = load i64, i64* %to.addr, align 8
  %1 = load i64, i64* %from.addr, align 8
  %sub = sub nsw i64 %0, %1
  store i64 %sub, i64* %chars, align 8
  %2 = load i64, i64* %to_byte.addr, align 8
  %3 = load i64, i64* %from_byte.addr, align 8
  %sub1 = sub nsw i64 %2, %3
  store i64 %sub1, i64* %bytes, align 8
  store i64 -1, i64* %saved_pt, align 8
  store i8 0, i8* %need_marker_adjustment, align 1
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 52), align 8
  store i64 %4, i64* %old_deactivate_mark, align 8
  %5 = load i64, i64* %dst_object.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %5, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 22
  %7 = load i8*, i8** %destination3, align 8
  store i8* %7, i8** %destination, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes4 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 20
  %9 = load i64, i64* %dst_bytes4, align 8
  store i64 %9, i64* %dst_bytes, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i64, i64* %src_object.addr, align 8
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 16
  store i64 %10, i64* %src_object5, align 8
  %12 = load i64, i64* %chars, align 8
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 14
  store i64 %12, i64* %src_chars, align 8
  %14 = load i64, i64* %bytes, align 8
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 15
  store i64 %14, i64* %src_bytes, align 8
  %16 = load i64, i64* %chars, align 8
  %17 = load i64, i64* %bytes, align 8
  %cmp6 = icmp slt i64 %16, %17
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %18, i32 0, i32 1
  %19 = zext i1 %cmp6 to i32
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.shl = shl i32 %19, 19
  %bf.clear = and i32 %bf.load, -524289
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %src_multibyte, align 8
  %bf.result.cast = trunc i32 %19 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %20 = load i64, i64* %src_object.addr, align 8
  %call7 = call zeroext i1 @STRINGP(i64 %20)
  br i1 %call7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end
  %21 = load i64, i64* %from.addr, align 8
  %22 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %22, i32 0, i32 12
  store i64 %21, i64* %src_pos, align 8
  %23 = load i64, i64* %from_byte.addr, align 8
  %24 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %24, i32 0, i32 13
  store i64 %23, i64* %src_pos_byte, align 8
  br label %if.end.48

if.else:                                          ; preds = %if.end
  %25 = load i64, i64* %src_object.addr, align 8
  %call9 = call zeroext i1 @BUFFERP(i64 %25)
  br i1 %call9, label %if.then.10, label %if.end.47

if.then.10:                                       ; preds = %if.else
  %26 = load i64, i64* %src_object.addr, align 8
  %call11 = call %struct.buffer* @XBUFFER(i64 %26)
  call void @set_buffer_internal(%struct.buffer* %call11)
  %27 = load i64, i64* %from.addr, align 8
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 73
  %29 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %29, i32 0, i32 1
  %30 = load i64, i64* %gpt, align 8
  %cmp12 = icmp ne i64 %27, %30
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.then.10
  %31 = load i64, i64* %from.addr, align 8
  %32 = load i64, i64* %from_byte.addr, align 8
  call void @move_gap_both(i64 %31, i64 %32)
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.then.10
  %33 = load i64, i64* %src_object.addr, align 8
  %34 = load i64, i64* %dst_object.addr, align 8
  %cmp15 = icmp eq i64 %33, %34
  br i1 %cmp15, label %if.then.16, label %if.else.43

if.then.16:                                       ; preds = %if.end.14
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text17 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text17, align 8
  %markers = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 16
  %37 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers, align 8
  store %struct.Lisp_Marker* %37, %struct.Lisp_Marker** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.16
  %38 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %tobool18 = icmp ne %struct.Lisp_Marker* %38, null
  br i1 %tobool18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %charpos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %39, i32 0, i32 3
  %40 = load i64, i64* %charpos, align 8
  %41 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %42 = bitcast %struct.Lisp_Marker* %41 to i32*
  %bf.load19 = load i32, i32* %42, align 8
  %bf.lshr = lshr i32 %bf.load19, 31
  %bf.cast = trunc i32 %bf.lshr to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %43 = load i64, i64* %from.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %44 = load i64, i64* %to.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %43, %cond.true ], [ %44, %cond.false ]
  %cmp20 = icmp eq i64 %40, %cond
  %45 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %46 = bitcast %struct.Lisp_Marker* %45 to i32*
  %47 = zext i1 %cmp20 to i32
  %bf.load21 = load i32, i32* %46, align 8
  %bf.shl22 = shl i32 %47, 30
  %bf.clear23 = and i32 %bf.load21, -1073741825
  %bf.set24 = or i32 %bf.clear23, %bf.shl22
  store i32 %bf.set24, i32* %46, align 8
  %bf.result.cast25 = trunc i32 %47 to i8
  %tobool26 = trunc i8 %bf.result.cast25 to i1
  %48 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %49 = bitcast %struct.Lisp_Marker* %48 to i32*
  %bf.load27 = load i32, i32* %49, align 8
  %bf.lshr28 = lshr i32 %bf.load27, 30
  %bf.clear29 = and i32 %bf.lshr28, 1
  %bf.cast30 = trunc i32 %bf.clear29 to i1
  %conv = zext i1 %bf.cast30 to i32
  %50 = load i8, i8* %need_marker_adjustment, align 1
  %tobool31 = trunc i8 %50 to i1
  %conv32 = zext i1 %tobool31 to i32
  %or = or i32 %conv32, %conv
  %tobool33 = icmp ne i32 %or, 0
  %frombool = zext i1 %tobool33 to i8
  store i8 %frombool, i8* %need_marker_adjustment, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %51 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %51, i32 0, i32 2
  %52 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next, align 8
  store %struct.Lisp_Marker* %52, %struct.Lisp_Marker** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %53 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %53, i32 0, i32 75
  %54 = load i64, i64* %pt, align 8
  %add = add nsw i64 %54, 0
  store i64 %add, i64* %saved_pt, align 8
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 76
  %56 = load i64, i64* %pt_byte, align 8
  %add34 = add nsw i64 %56, 0
  store i64 %add34, i64* %saved_pt_byte, align 8
  %57 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %58 = load i64, i64* %from.addr, align 8
  %59 = load i64, i64* %from_byte.addr, align 8
  call void @temp_set_point_both(%struct.buffer* %57, i64 %58, i64 %59)
  %60 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text35 = getelementptr inbounds %struct.buffer, %struct.buffer* %60, i32 0, i32 73
  %61 = load %struct.buffer_text*, %struct.buffer_text** %text35, align 8
  %inhibit_shrinking = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %61, i32 0, i32 17
  %bf.load36 = load i8, i8* %inhibit_shrinking, align 8
  %bf.clear37 = and i8 %bf.load36, -2
  %bf.set38 = or i8 %bf.clear37, 1
  store i8 %bf.set38, i8* %inhibit_shrinking, align 8
  %62 = load i64, i64* %from.addr, align 8
  %63 = load i64, i64* %from_byte.addr, align 8
  %64 = load i64, i64* %to.addr, align 8
  %65 = load i64, i64* %to_byte.addr, align 8
  call void @del_range_both(i64 %62, i64 %63, i64 %64, i64 %65, i1 zeroext true)
  %66 = load i64, i64* %chars, align 8
  %sub39 = sub nsw i64 0, %66
  %67 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos40 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %67, i32 0, i32 12
  store i64 %sub39, i64* %src_pos40, align 8
  %68 = load i64, i64* %bytes, align 8
  %sub41 = sub nsw i64 0, %68
  %69 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte42 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %69, i32 0, i32 13
  store i64 %sub41, i64* %src_pos_byte42, align 8
  br label %if.end.46

if.else.43:                                       ; preds = %if.end.14
  %70 = load i64, i64* %from.addr, align 8
  %71 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos44 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %71, i32 0, i32 12
  store i64 %70, i64* %src_pos44, align 8
  %72 = load i64, i64* %from_byte.addr, align 8
  %73 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte45 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %73, i32 0, i32 13
  store i64 %72, i64* %src_pos_byte45, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %for.end
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.else
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.then.8
  %74 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %74, i32 0, i32 1
  %bf.load49 = load i32, i32* %common_flags, align 8
  %bf.clear50 = and i32 %bf.load49, 16383
  %and = and i32 %bf.clear50, 4096
  %tobool51 = icmp ne i32 %and, 0
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.48
  %75 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @detect_coding(%struct.coding_system* %75)
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.end.48
  %76 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call54 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %76)
  %77 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %77, i32 0, i32 0
  %78 = load i64, i64* %id, align 8
  %call55 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call54, i64 %78)
  %call56 = call i64 @AREF(i64 %call55, i64 0)
  store i64 %call56, i64* %attrs, align 8
  %79 = load i64, i64* %dst_object.addr, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp58 = icmp eq i64 %79, %call57
  br i1 %cmp58, label %if.then.67, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.53
  %80 = load i64, i64* %attrs, align 8
  %call60 = call i64 @AREF(i64 %80, i64 9)
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %call60, %call61
  br i1 %cmp62, label %if.else.86, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %81 = load i64, i64* %dst_object.addr, align 8
  %call64 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp65 = icmp eq i64 %81, %call64
  br i1 %cmp65, label %if.then.67, label %if.else.86

if.then.67:                                       ; preds = %land.lhs.true, %if.end.53
  %82 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags68 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %82, i32 0, i32 1
  %bf.load69 = load i32, i32* %common_flags68, align 8
  %bf.clear70 = and i32 %bf.load69, 16383
  %and71 = and i32 %bf.clear70, 256
  %tobool72 = icmp ne i32 %and71, 0
  %lnot = xor i1 %tobool72, true
  %83 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %83, i32 0, i32 1
  %84 = zext i1 %lnot to i32
  %bf.load73 = load i32, i32* %dst_multibyte, align 8
  %bf.shl74 = shl i32 %84, 20
  %bf.clear75 = and i32 %bf.load73, -1048577
  %bf.set76 = or i32 %bf.clear75, %bf.shl74
  store i32 %bf.set76, i32* %dst_multibyte, align 8
  %bf.result.cast77 = trunc i32 %84 to i8
  %tobool78 = trunc i8 %bf.result.cast77 to i1
  %85 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte79 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %85, i32 0, i32 1
  %bf.load80 = load i32, i32* %dst_multibyte79, align 8
  %bf.lshr81 = lshr i32 %bf.load80, 20
  %bf.clear82 = and i32 %bf.lshr81, 1
  %bf.cast83 = trunc i32 %bf.clear82 to i1
  %call84 = call i64 @code_conversion_save(i1 zeroext true, i1 zeroext %bf.cast83)
  %86 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object85 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %86, i32 0, i32 21
  store i64 %call84, i64* %dst_object85, align 8
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %87, i32 0, i32 18
  store i64 1, i64* %dst_pos, align 8
  %88 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %88, i32 0, i32 19
  store i64 1, i64* %dst_pos_byte, align 8
  br label %if.end.159

if.else.86:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %89 = load i64, i64* %dst_object.addr, align 8
  %call87 = call zeroext i1 @BUFFERP(i64 %89)
  br i1 %call87, label %if.then.88, label %if.else.150

if.then.88:                                       ; preds = %if.else.86
  %call89 = call i64 @code_conversion_save(i1 zeroext false, i1 zeroext false)
  %90 = load i64, i64* %dst_object.addr, align 8
  %91 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object90 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %91, i32 0, i32 21
  store i64 %90, i64* %dst_object90, align 8
  %92 = load i64, i64* %dst_object.addr, align 8
  %call91 = call %struct.buffer* @XBUFFER(i64 %92)
  %93 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp92 = icmp eq %struct.buffer* %call91, %93
  br i1 %cmp92, label %cond.true.94, label %cond.false.97

cond.true.94:                                     ; preds = %if.then.88
  %94 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt95 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 75
  %95 = load i64, i64* %pt95, align 8
  %add96 = add nsw i64 %95, 0
  br label %cond.end.111

cond.false.97:                                    ; preds = %if.then.88
  %96 = load i64, i64* %dst_object.addr, align 8
  %call98 = call %struct.buffer* @XBUFFER(i64 %96)
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call98, i32 0, i32 45
  %97 = load i64, i64* %pt_marker_, align 8
  %call99 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp100 = icmp eq i64 %97, %call99
  br i1 %cmp100, label %cond.true.102, label %cond.false.105

cond.true.102:                                    ; preds = %cond.false.97
  %98 = load i64, i64* %dst_object.addr, align 8
  %call103 = call %struct.buffer* @XBUFFER(i64 %98)
  %pt104 = getelementptr inbounds %struct.buffer, %struct.buffer* %call103, i32 0, i32 75
  %99 = load i64, i64* %pt104, align 8
  br label %cond.end.109

cond.false.105:                                   ; preds = %cond.false.97
  %100 = load i64, i64* %dst_object.addr, align 8
  %call106 = call %struct.buffer* @XBUFFER(i64 %100)
  %pt_marker_107 = getelementptr inbounds %struct.buffer, %struct.buffer* %call106, i32 0, i32 45
  %101 = load i64, i64* %pt_marker_107, align 8
  %call108 = call i64 @marker_position(i64 %101)
  br label %cond.end.109

cond.end.109:                                     ; preds = %cond.false.105, %cond.true.102
  %cond110 = phi i64 [ %99, %cond.true.102 ], [ %call108, %cond.false.105 ]
  br label %cond.end.111

cond.end.111:                                     ; preds = %cond.end.109, %cond.true.94
  %cond112 = phi i64 [ %add96, %cond.true.94 ], [ %cond110, %cond.end.109 ]
  %102 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos113 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %102, i32 0, i32 18
  store i64 %cond112, i64* %dst_pos113, align 8
  %103 = load i64, i64* %dst_object.addr, align 8
  %call114 = call %struct.buffer* @XBUFFER(i64 %103)
  %104 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp115 = icmp eq %struct.buffer* %call114, %104
  br i1 %cmp115, label %cond.true.117, label %cond.false.120

cond.true.117:                                    ; preds = %cond.end.111
  %105 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte118 = getelementptr inbounds %struct.buffer, %struct.buffer* %105, i32 0, i32 76
  %106 = load i64, i64* %pt_byte118, align 8
  %add119 = add nsw i64 %106, 0
  br label %cond.end.135

cond.false.120:                                   ; preds = %cond.end.111
  %107 = load i64, i64* %dst_object.addr, align 8
  %call121 = call %struct.buffer* @XBUFFER(i64 %107)
  %pt_marker_122 = getelementptr inbounds %struct.buffer, %struct.buffer* %call121, i32 0, i32 45
  %108 = load i64, i64* %pt_marker_122, align 8
  %call123 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp124 = icmp eq i64 %108, %call123
  br i1 %cmp124, label %cond.true.126, label %cond.false.129

cond.true.126:                                    ; preds = %cond.false.120
  %109 = load i64, i64* %dst_object.addr, align 8
  %call127 = call %struct.buffer* @XBUFFER(i64 %109)
  %pt_byte128 = getelementptr inbounds %struct.buffer, %struct.buffer* %call127, i32 0, i32 76
  %110 = load i64, i64* %pt_byte128, align 8
  br label %cond.end.133

cond.false.129:                                   ; preds = %cond.false.120
  %111 = load i64, i64* %dst_object.addr, align 8
  %call130 = call %struct.buffer* @XBUFFER(i64 %111)
  %pt_marker_131 = getelementptr inbounds %struct.buffer, %struct.buffer* %call130, i32 0, i32 45
  %112 = load i64, i64* %pt_marker_131, align 8
  %call132 = call i64 @marker_byte_position(i64 %112)
  br label %cond.end.133

cond.end.133:                                     ; preds = %cond.false.129, %cond.true.126
  %cond134 = phi i64 [ %110, %cond.true.126 ], [ %call132, %cond.false.129 ]
  br label %cond.end.135

cond.end.135:                                     ; preds = %cond.end.133, %cond.true.117
  %cond136 = phi i64 [ %add119, %cond.true.117 ], [ %cond134, %cond.end.133 ]
  %113 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte137 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %113, i32 0, i32 19
  store i64 %cond136, i64* %dst_pos_byte137, align 8
  %114 = load i64, i64* %dst_object.addr, align 8
  %call138 = call %struct.buffer* @XBUFFER(i64 %114)
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call138, i32 0, i32 39
  %115 = load i64, i64* %enable_multibyte_characters_, align 8
  %call139 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp140 = icmp eq i64 %115, %call139
  %lnot142 = xor i1 %cmp140, true
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte143 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %116, i32 0, i32 1
  %117 = zext i1 %lnot142 to i32
  %bf.load144 = load i32, i32* %dst_multibyte143, align 8
  %bf.shl145 = shl i32 %117, 20
  %bf.clear146 = and i32 %bf.load144, -1048577
  %bf.set147 = or i32 %bf.clear146, %bf.shl145
  store i32 %bf.set147, i32* %dst_multibyte143, align 8
  %bf.result.cast148 = trunc i32 %117 to i8
  %tobool149 = trunc i8 %bf.result.cast148 to i1
  br label %if.end.158

if.else.150:                                      ; preds = %if.else.86
  %call151 = call i64 @code_conversion_save(i1 zeroext false, i1 zeroext false)
  %call152 = call i64 @builtin_lisp_symbol(i32 0)
  %118 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object153 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %118, i32 0, i32 21
  store i64 %call152, i64* %dst_object153, align 8
  %119 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte154 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %119, i32 0, i32 1
  %bf.load155 = load i32, i32* %dst_multibyte154, align 8
  %bf.clear156 = and i32 %bf.load155, -1048577
  %bf.set157 = or i32 %bf.clear156, 1048576
  store i32 %bf.set157, i32* %dst_multibyte154, align 8
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.150, %cond.end.135
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %if.then.67
  %120 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @decode_coding(%struct.coding_system* %120)
  %121 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object160 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %121, i32 0, i32 21
  %122 = load i64, i64* %dst_object160, align 8
  %call161 = call zeroext i1 @BUFFERP(i64 %122)
  br i1 %call161, label %if.then.162, label %if.end.165

if.then.162:                                      ; preds = %if.end.159
  %123 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object163 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %123, i32 0, i32 21
  %124 = load i64, i64* %dst_object163, align 8
  %call164 = call %struct.buffer* @XBUFFER(i64 %124)
  call void @set_buffer_internal(%struct.buffer* %call164)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.162, %if.end.159
  %125 = load i64, i64* %attrs, align 8
  %call166 = call i64 @AREF(i64 %125, i64 9)
  %call167 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp168 = icmp eq i64 %call166, %call167
  br i1 %cmp168, label %if.end.187, label %if.then.170

if.then.170:                                      ; preds = %if.end.165
  %126 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text171 = getelementptr inbounds %struct.buffer, %struct.buffer* %126, i32 0, i32 73
  %127 = load %struct.buffer_text*, %struct.buffer_text** %text171, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %127, i32 0, i32 2
  %128 = load i64, i64* %z, align 8
  store i64 %128, i64* %prev_Z, align 8
  %129 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text172 = getelementptr inbounds %struct.buffer, %struct.buffer* %129, i32 0, i32 73
  %130 = load %struct.buffer_text*, %struct.buffer_text** %text172, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %130, i32 0, i32 4
  %131 = load i64, i64* %z_byte, align 8
  store i64 %131, i64* %prev_Z_BYTE, align 8
  %132 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %133 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos173 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %133, i32 0, i32 18
  %134 = load i64, i64* %dst_pos173, align 8
  %135 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte174 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %135, i32 0, i32 19
  %136 = load i64, i64* %dst_pos_byte174, align 8
  call void @temp_set_point_both(%struct.buffer* %132, i64 %134, i64 %136)
  %137 = load i64, i64* %attrs, align 8
  %call175 = call i64 @AREF(i64 %137, i64 9)
  %138 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %138, i32 0, i32 9
  %139 = load i64, i64* %produced_char, align 8
  %shl = shl i64 %139, 2
  %add176 = add i64 %shl, 2
  %call177 = call i64 @safe_call1(i64 %call175, i64 %add176)
  store i64 %call177, i64* %val, align 8
  %140 = load i64, i64* %val, align 8
  call void @CHECK_NATNUM(i64 %140)
  %141 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text178 = getelementptr inbounds %struct.buffer, %struct.buffer* %141, i32 0, i32 73
  %142 = load %struct.buffer_text*, %struct.buffer_text** %text178, align 8
  %z179 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %142, i32 0, i32 2
  %143 = load i64, i64* %z179, align 8
  %144 = load i64, i64* %prev_Z, align 8
  %sub180 = sub nsw i64 %143, %144
  %145 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char181 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %145, i32 0, i32 9
  %146 = load i64, i64* %produced_char181, align 8
  %add182 = add nsw i64 %146, %sub180
  store i64 %add182, i64* %produced_char181, align 8
  %147 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text183 = getelementptr inbounds %struct.buffer, %struct.buffer* %147, i32 0, i32 73
  %148 = load %struct.buffer_text*, %struct.buffer_text** %text183, align 8
  %z_byte184 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %148, i32 0, i32 4
  %149 = load i64, i64* %z_byte184, align 8
  %150 = load i64, i64* %prev_Z_BYTE, align 8
  %sub185 = sub nsw i64 %149, %150
  %151 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %151, i32 0, i32 8
  %152 = load i64, i64* %produced, align 8
  %add186 = add nsw i64 %152, %sub185
  store i64 %add186, i64* %produced, align 8
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.170, %if.end.165
  %153 = load i64, i64* %dst_object.addr, align 8
  %call188 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp189 = icmp eq i64 %153, %call188
  br i1 %cmp189, label %if.then.191, label %if.else.194

if.then.191:                                      ; preds = %if.end.187
  %call192 = call i64 @Fbuffer_string()
  %154 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object193 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %154, i32 0, i32 21
  store i64 %call192, i64* %dst_object193, align 8
  br label %if.end.243

if.else.194:                                      ; preds = %if.end.187
  %155 = load i64, i64* %dst_object.addr, align 8
  %call195 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp196 = icmp eq i64 %155, %call195
  br i1 %cmp196, label %land.lhs.true.198, label %if.end.242

land.lhs.true.198:                                ; preds = %if.else.194
  %156 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object199 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %156, i32 0, i32 21
  %157 = load i64, i64* %dst_object199, align 8
  %call200 = call zeroext i1 @BUFFERP(i64 %157)
  br i1 %call200, label %if.then.202, label %if.end.242

if.then.202:                                      ; preds = %land.lhs.true.198
  %158 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object203 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %158, i32 0, i32 21
  %159 = load i64, i64* %dst_object203, align 8
  %call204 = call %struct.buffer* @XBUFFER(i64 %159)
  call void @set_buffer_internal(%struct.buffer* %call204)
  %160 = load i64, i64* %dst_bytes, align 8
  %161 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced205 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %161, i32 0, i32 8
  %162 = load i64, i64* %produced205, align 8
  %cmp206 = icmp slt i64 %160, %162
  br i1 %cmp206, label %if.then.208, label %if.end.241

if.then.208:                                      ; preds = %if.then.202
  %163 = load i8*, i8** %destination, align 8
  %164 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced209 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %164, i32 0, i32 8
  %165 = load i64, i64* %produced209, align 8
  %call210 = call i8* @xrealloc(i8* %163, i64 %165)
  store i8* %call210, i8** %destination, align 8
  %166 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %166, i32 0, i32 77
  %167 = load i64, i64* %begv, align 8
  %168 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text211 = getelementptr inbounds %struct.buffer, %struct.buffer* %168, i32 0, i32 73
  %169 = load %struct.buffer_text*, %struct.buffer_text** %text211, align 8
  %gpt212 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %169, i32 0, i32 1
  %170 = load i64, i64* %gpt212, align 8
  %cmp213 = icmp slt i64 %167, %170
  br i1 %cmp213, label %land.lhs.true.215, label %if.end.225

land.lhs.true.215:                                ; preds = %if.then.208
  %171 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text216 = getelementptr inbounds %struct.buffer, %struct.buffer* %171, i32 0, i32 73
  %172 = load %struct.buffer_text*, %struct.buffer_text** %text216, align 8
  %gpt217 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %172, i32 0, i32 1
  %173 = load i64, i64* %gpt217, align 8
  %174 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv218 = getelementptr inbounds %struct.buffer, %struct.buffer* %174, i32 0, i32 77
  %175 = load i64, i64* %begv218, align 8
  %176 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char219 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %176, i32 0, i32 9
  %177 = load i64, i64* %produced_char219, align 8
  %add220 = add nsw i64 %175, %177
  %cmp221 = icmp slt i64 %173, %add220
  br i1 %cmp221, label %if.then.223, label %if.end.225

if.then.223:                                      ; preds = %land.lhs.true.215
  %178 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv224 = getelementptr inbounds %struct.buffer, %struct.buffer* %178, i32 0, i32 77
  %179 = load i64, i64* %begv224, align 8
  %180 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %180, i32 0, i32 78
  %181 = load i64, i64* %begv_byte, align 8
  call void @move_gap_both(i64 %179, i64 %181)
  br label %if.end.225

if.end.225:                                       ; preds = %if.then.223, %land.lhs.true.215, %if.then.208
  %182 = load i8*, i8** %destination, align 8
  %183 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte226 = getelementptr inbounds %struct.buffer, %struct.buffer* %183, i32 0, i32 78
  %184 = load i64, i64* %begv_byte226, align 8
  %185 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text227 = getelementptr inbounds %struct.buffer, %struct.buffer* %185, i32 0, i32 73
  %186 = load %struct.buffer_text*, %struct.buffer_text** %text227, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %186, i32 0, i32 3
  %187 = load i64, i64* %gpt_byte, align 8
  %cmp228 = icmp sge i64 %184, %187
  br i1 %cmp228, label %cond.true.230, label %cond.false.232

cond.true.230:                                    ; preds = %if.end.225
  %188 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text231 = getelementptr inbounds %struct.buffer, %struct.buffer* %188, i32 0, i32 73
  %189 = load %struct.buffer_text*, %struct.buffer_text** %text231, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %189, i32 0, i32 5
  %190 = load i64, i64* %gap_size, align 8
  br label %cond.end.233

cond.false.232:                                   ; preds = %if.end.225
  br label %cond.end.233

cond.end.233:                                     ; preds = %cond.false.232, %cond.true.230
  %cond234 = phi i64 [ %190, %cond.true.230 ], [ 0, %cond.false.232 ]
  %191 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv_byte235 = getelementptr inbounds %struct.buffer, %struct.buffer* %191, i32 0, i32 78
  %192 = load i64, i64* %begv_byte235, align 8
  %add236 = add nsw i64 %cond234, %192
  %193 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text237 = getelementptr inbounds %struct.buffer, %struct.buffer* %193, i32 0, i32 73
  %194 = load %struct.buffer_text*, %struct.buffer_text** %text237, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %194, i32 0, i32 0
  %195 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %195, i64 %add236
  %add.ptr238 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %196 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced239 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %196, i32 0, i32 8
  %197 = load i64, i64* %produced239, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %182, i8* %add.ptr238, i64 %197, i32 1, i1 false)
  %198 = load i8*, i8** %destination, align 8
  %199 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination240 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %199, i32 0, i32 22
  store i8* %198, i8** %destination240, align 8
  br label %if.end.241

if.end.241:                                       ; preds = %cond.end.233, %if.then.202
  br label %if.end.242

if.end.242:                                       ; preds = %if.end.241, %land.lhs.true.198, %if.else.194
  br label %if.end.243

if.end.243:                                       ; preds = %if.end.242, %if.then.191
  %200 = load i64, i64* %saved_pt, align 8
  %cmp244 = icmp sge i64 %200, 0
  br i1 %cmp244, label %if.then.246, label %if.end.324

if.then.246:                                      ; preds = %if.end.243
  %201 = load i64, i64* %src_object.addr, align 8
  %call247 = call %struct.buffer* @XBUFFER(i64 %201)
  call void @set_buffer_internal(%struct.buffer* %call247)
  %202 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text248 = getelementptr inbounds %struct.buffer, %struct.buffer* %202, i32 0, i32 73
  %203 = load %struct.buffer_text*, %struct.buffer_text** %text248, align 8
  %inhibit_shrinking249 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %203, i32 0, i32 17
  %bf.load250 = load i8, i8* %inhibit_shrinking249, align 8
  %bf.clear251 = and i8 %bf.load250, -2
  store i8 %bf.clear251, i8* %inhibit_shrinking249, align 8
  %204 = load i64, i64* %saved_pt, align 8
  %205 = load i64, i64* %from.addr, align 8
  %cmp252 = icmp slt i64 %204, %205
  br i1 %cmp252, label %if.then.254, label %if.else.255

if.then.254:                                      ; preds = %if.then.246
  %206 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %207 = load i64, i64* %saved_pt, align 8
  %208 = load i64, i64* %saved_pt_byte, align 8
  call void @temp_set_point_both(%struct.buffer* %206, i64 %207, i64 %208)
  br label %if.end.281

if.else.255:                                      ; preds = %if.then.246
  %209 = load i64, i64* %saved_pt, align 8
  %210 = load i64, i64* %from.addr, align 8
  %211 = load i64, i64* %chars, align 8
  %add256 = add nsw i64 %210, %211
  %cmp257 = icmp slt i64 %209, %add256
  br i1 %cmp257, label %if.then.259, label %if.else.260

if.then.259:                                      ; preds = %if.else.255
  %212 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %213 = load i64, i64* %from.addr, align 8
  %214 = load i64, i64* %from_byte.addr, align 8
  call void @temp_set_point_both(%struct.buffer* %212, i64 %213, i64 %214)
  br label %if.end.280

if.else.260:                                      ; preds = %if.else.255
  %215 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_261 = getelementptr inbounds %struct.buffer, %struct.buffer* %215, i32 0, i32 39
  %216 = load i64, i64* %enable_multibyte_characters_261, align 8
  %call262 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp263 = icmp eq i64 %216, %call262
  br i1 %cmp263, label %if.else.272, label %if.then.265

if.then.265:                                      ; preds = %if.else.260
  %217 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %218 = load i64, i64* %saved_pt, align 8
  %219 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char266 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %219, i32 0, i32 9
  %220 = load i64, i64* %produced_char266, align 8
  %221 = load i64, i64* %chars, align 8
  %sub267 = sub nsw i64 %220, %221
  %add268 = add nsw i64 %218, %sub267
  %222 = load i64, i64* %saved_pt_byte, align 8
  %223 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced269 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %223, i32 0, i32 8
  %224 = load i64, i64* %produced269, align 8
  %225 = load i64, i64* %bytes, align 8
  %sub270 = sub nsw i64 %224, %225
  %add271 = add nsw i64 %222, %sub270
  call void @temp_set_point_both(%struct.buffer* %217, i64 %add268, i64 %add271)
  br label %if.end.279

if.else.272:                                      ; preds = %if.else.260
  %226 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %227 = load i64, i64* %saved_pt, align 8
  %228 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced273 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %228, i32 0, i32 8
  %229 = load i64, i64* %produced273, align 8
  %230 = load i64, i64* %bytes, align 8
  %sub274 = sub nsw i64 %229, %230
  %add275 = add nsw i64 %227, %sub274
  %231 = load i64, i64* %saved_pt_byte, align 8
  %232 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced276 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %232, i32 0, i32 8
  %233 = load i64, i64* %produced276, align 8
  %234 = load i64, i64* %bytes, align 8
  %sub277 = sub nsw i64 %233, %234
  %add278 = add nsw i64 %231, %sub277
  call void @temp_set_point_both(%struct.buffer* %226, i64 %add275, i64 %add278)
  br label %if.end.279

if.end.279:                                       ; preds = %if.else.272, %if.then.265
  br label %if.end.280

if.end.280:                                       ; preds = %if.end.279, %if.then.259
  br label %if.end.281

if.end.281:                                       ; preds = %if.end.280, %if.then.254
  %235 = load i8, i8* %need_marker_adjustment, align 1
  %tobool282 = trunc i8 %235 to i1
  br i1 %tobool282, label %if.then.283, label %if.end.323

if.then.283:                                      ; preds = %if.end.281
  %236 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text285 = getelementptr inbounds %struct.buffer, %struct.buffer* %236, i32 0, i32 73
  %237 = load %struct.buffer_text*, %struct.buffer_text** %text285, align 8
  %markers286 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %237, i32 0, i32 16
  %238 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers286, align 8
  store %struct.Lisp_Marker* %238, %struct.Lisp_Marker** %tail284, align 8
  br label %for.cond.287

for.cond.287:                                     ; preds = %for.inc.320, %if.then.283
  %239 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %tobool288 = icmp ne %struct.Lisp_Marker* %239, null
  br i1 %tobool288, label %for.body.289, label %for.end.322

for.body.289:                                     ; preds = %for.cond.287
  %240 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %241 = bitcast %struct.Lisp_Marker* %240 to i32*
  %bf.load290 = load i32, i32* %241, align 8
  %bf.lshr291 = lshr i32 %bf.load290, 30
  %bf.clear292 = and i32 %bf.lshr291, 1
  %bf.cast293 = trunc i32 %bf.clear292 to i1
  br i1 %bf.cast293, label %if.then.294, label %if.end.319

if.then.294:                                      ; preds = %for.body.289
  %242 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %243 = bitcast %struct.Lisp_Marker* %242 to i32*
  %bf.load295 = load i32, i32* %243, align 8
  %bf.clear296 = and i32 %bf.load295, -1073741825
  store i32 %bf.clear296, i32* %243, align 8
  %244 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %245 = bitcast %struct.Lisp_Marker* %244 to i32*
  %bf.load297 = load i32, i32* %245, align 8
  %bf.lshr298 = lshr i32 %bf.load297, 31
  %bf.cast299 = trunc i32 %bf.lshr298 to i1
  br i1 %bf.cast299, label %if.then.300, label %if.else.302

if.then.300:                                      ; preds = %if.then.294
  %246 = load i64, i64* %from_byte.addr, align 8
  %247 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %bytepos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %247, i32 0, i32 4
  store i64 %246, i64* %bytepos, align 8
  %248 = load i64, i64* %from.addr, align 8
  %249 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %charpos301 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %249, i32 0, i32 3
  store i64 %248, i64* %charpos301, align 8
  br label %if.end.318

if.else.302:                                      ; preds = %if.then.294
  %250 = load i64, i64* %from_byte.addr, align 8
  %251 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced303 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %251, i32 0, i32 8
  %252 = load i64, i64* %produced303, align 8
  %add304 = add nsw i64 %250, %252
  %253 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %bytepos305 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %253, i32 0, i32 4
  store i64 %add304, i64* %bytepos305, align 8
  %254 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_306 = getelementptr inbounds %struct.buffer, %struct.buffer* %254, i32 0, i32 39
  %255 = load i64, i64* %enable_multibyte_characters_306, align 8
  %call307 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp308 = icmp eq i64 %255, %call307
  br i1 %cmp308, label %cond.true.310, label %cond.false.312

cond.true.310:                                    ; preds = %if.else.302
  %256 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %bytepos311 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %256, i32 0, i32 4
  %257 = load i64, i64* %bytepos311, align 8
  br label %cond.end.315

cond.false.312:                                   ; preds = %if.else.302
  %258 = load i64, i64* %from.addr, align 8
  %259 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char313 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %259, i32 0, i32 9
  %260 = load i64, i64* %produced_char313, align 8
  %add314 = add nsw i64 %258, %260
  br label %cond.end.315

cond.end.315:                                     ; preds = %cond.false.312, %cond.true.310
  %cond316 = phi i64 [ %257, %cond.true.310 ], [ %add314, %cond.false.312 ]
  %261 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %charpos317 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %261, i32 0, i32 3
  store i64 %cond316, i64* %charpos317, align 8
  br label %if.end.318

if.end.318:                                       ; preds = %cond.end.315, %if.then.300
  br label %if.end.319

if.end.319:                                       ; preds = %if.end.318, %for.body.289
  br label %for.inc.320

for.inc.320:                                      ; preds = %if.end.319
  %262 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail284, align 8
  %next321 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %262, i32 0, i32 2
  %263 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next321, align 8
  store %struct.Lisp_Marker* %263, %struct.Lisp_Marker** %tail284, align 8
  br label %for.cond.287

for.end.322:                                      ; preds = %for.cond.287
  br label %if.end.323

if.end.323:                                       ; preds = %for.end.322, %if.end.281
  br label %if.end.324

if.end.324:                                       ; preds = %if.end.323, %if.end.243
  %264 = load i64, i64* %old_deactivate_mark, align 8
  store i64 %264, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 52), align 8
  %265 = load i64, i64* %count, align 8
  %266 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object325 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %266, i32 0, i32 21
  %267 = load i64, i64* %dst_object325, align 8
  %call326 = call i64 @unbind_to(i64 %265, i64 %267)
  ret void
}

declare zeroext i1 @STRINGP(i64) #1

declare zeroext i1 @BUFFERP(i64) #1

declare void @set_buffer_internal(%struct.buffer*) #1

declare %struct.buffer* @XBUFFER(i64) #1

declare void @move_gap_both(i64, i64) #1

declare void @del_range_both(i64, i64, i64, i64, i1 zeroext) #1

declare i64 @marker_position(i64) #1

declare i64 @marker_byte_position(i64) #1

declare i64 @safe_call1(i64, i64) #1

declare i64 @Fbuffer_string() #1

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: nounwind uwtable
define void @encode_coding_object(%struct.coding_system* %coding, i64 %src_object, i64 %from, i64 %from_byte, i64 %to, i64 %to_byte, i64 %dst_object) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %src_object.addr = alloca i64, align 8
  %from.addr = alloca i64, align 8
  %from_byte.addr = alloca i64, align 8
  %to.addr = alloca i64, align 8
  %to_byte.addr = alloca i64, align 8
  %dst_object.addr = alloca i64, align 8
  %count = alloca i64, align 8
  %chars = alloca i64, align 8
  %bytes = alloca i64, align 8
  %attrs = alloca i64, align 8
  %saved_pt = alloca i64, align 8
  %saved_pt_byte = alloca i64, align 8
  %need_marker_adjustment = alloca i8, align 1
  %kill_src_buffer = alloca i8, align 1
  %old_deactivate_mark = alloca i64, align 8
  %tail = alloca %struct.Lisp_Marker*, align 8
  %current = alloca %struct.buffer*, align 8
  %dst_bytes = alloca i64, align 8
  %tail248 = alloca %struct.Lisp_Marker*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %src_object, i64* %src_object.addr, align 8
  store i64 %from, i64* %from.addr, align 8
  store i64 %from_byte, i64* %from_byte.addr, align 8
  store i64 %to, i64* %to.addr, align 8
  store i64 %to_byte, i64* %to_byte.addr, align 8
  store i64 %dst_object, i64* %dst_object.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %0 = load i64, i64* %to.addr, align 8
  %1 = load i64, i64* %from.addr, align 8
  %sub = sub nsw i64 %0, %1
  store i64 %sub, i64* %chars, align 8
  %2 = load i64, i64* %to_byte.addr, align 8
  %3 = load i64, i64* %from_byte.addr, align 8
  %sub1 = sub nsw i64 %2, %3
  store i64 %sub1, i64* %bytes, align 8
  store i64 -1, i64* %saved_pt, align 8
  store i8 0, i8* %need_marker_adjustment, align 1
  store i8 0, i8* %kill_src_buffer, align 1
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 52), align 8
  store i64 %4, i64* %old_deactivate_mark, align 8
  %5 = load i64, i64* %src_object.addr, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object2 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 16
  store i64 %5, i64* %src_object2, align 8
  %7 = load i64, i64* %chars, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 14
  store i64 %7, i64* %src_chars, align 8
  %9 = load i64, i64* %bytes, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 15
  store i64 %9, i64* %src_bytes, align 8
  %11 = load i64, i64* %chars, align 8
  %12 = load i64, i64* %bytes, align 8
  %cmp = icmp slt i64 %11, %12
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 1
  %14 = zext i1 %cmp to i32
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.shl = shl i32 %14, 19
  %bf.clear = and i32 %bf.load, -524289
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %src_multibyte, align 8
  %bf.result.cast = trunc i32 %14 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %15 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call3 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %15)
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 0
  %17 = load i64, i64* %id, align 8
  %call4 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call3, i64 %17)
  %call5 = call i64 @AREF(i64 %call4, i64 0)
  store i64 %call5, i64* %attrs, align 8
  %18 = load i64, i64* %src_object.addr, align 8
  %19 = load i64, i64* %dst_object.addr, align 8
  %cmp6 = icmp eq i64 %18, %19
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  %21 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %markers = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %21, i32 0, i32 16
  %22 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers, align 8
  store %struct.Lisp_Marker* %22, %struct.Lisp_Marker** %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %23 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %tobool7 = icmp ne %struct.Lisp_Marker* %23, null
  br i1 %tobool7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %charpos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %24, i32 0, i32 3
  %25 = load i64, i64* %charpos, align 8
  %26 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %27 = bitcast %struct.Lisp_Marker* %26 to i32*
  %bf.load8 = load i32, i32* %27, align 8
  %bf.lshr = lshr i32 %bf.load8, 31
  %bf.cast = trunc i32 %bf.lshr to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %28 = load i64, i64* %from.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %29 = load i64, i64* %to.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %28, %cond.true ], [ %29, %cond.false ]
  %cmp9 = icmp eq i64 %25, %cond
  %30 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %31 = bitcast %struct.Lisp_Marker* %30 to i32*
  %32 = zext i1 %cmp9 to i32
  %bf.load10 = load i32, i32* %31, align 8
  %bf.shl11 = shl i32 %32, 30
  %bf.clear12 = and i32 %bf.load10, -1073741825
  %bf.set13 = or i32 %bf.clear12, %bf.shl11
  store i32 %bf.set13, i32* %31, align 8
  %bf.result.cast14 = trunc i32 %32 to i8
  %tobool15 = trunc i8 %bf.result.cast14 to i1
  %33 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %34 = bitcast %struct.Lisp_Marker* %33 to i32*
  %bf.load16 = load i32, i32* %34, align 8
  %bf.lshr17 = lshr i32 %bf.load16, 30
  %bf.clear18 = and i32 %bf.lshr17, 1
  %bf.cast19 = trunc i32 %bf.clear18 to i1
  %conv = zext i1 %bf.cast19 to i32
  %35 = load i8, i8* %need_marker_adjustment, align 1
  %tobool20 = trunc i8 %35 to i1
  %conv21 = zext i1 %tobool20 to i32
  %or = or i32 %conv21, %conv
  %tobool22 = icmp ne i32 %or, 0
  %frombool = zext i1 %tobool22 to i8
  store i8 %frombool, i8* %need_marker_adjustment, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %36 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail, align 8
  %next = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %36, i32 0, i32 2
  %37 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next, align 8
  store %struct.Lisp_Marker* %37, %struct.Lisp_Marker** %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %38 = load i64, i64* %attrs, align 8
  %call23 = call i64 @AREF(i64 %38, i64 10)
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp25 = icmp eq i64 %call23, %call24
  br i1 %cmp25, label %if.else.90, label %if.then.27

if.then.27:                                       ; preds = %if.end
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte28 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %39, i32 0, i32 1
  %bf.load29 = load i32, i32* %src_multibyte28, align 8
  %bf.lshr30 = lshr i32 %bf.load29, 19
  %bf.clear31 = and i32 %bf.lshr30, 1
  %bf.cast32 = trunc i32 %bf.clear31 to i1
  %call33 = call i64 @code_conversion_save(i1 zeroext true, i1 zeroext %bf.cast32)
  %40 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object34 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %40, i32 0, i32 16
  store i64 %call33, i64* %src_object34, align 8
  %41 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object35 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %41, i32 0, i32 16
  %42 = load i64, i64* %src_object35, align 8
  %call36 = call %struct.buffer* @XBUFFER(i64 %42)
  call void @set_buffer_internal(%struct.buffer* %call36)
  %43 = load i64, i64* %src_object.addr, align 8
  %call37 = call zeroext i1 @STRINGP(i64 %43)
  br i1 %call37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.then.27
  %44 = load i64, i64* %src_object.addr, align 8
  %45 = load i64, i64* %from.addr, align 8
  %46 = load i64, i64* %from_byte.addr, align 8
  %47 = load i64, i64* %chars, align 8
  %48 = load i64, i64* %bytes, align 8
  call void @insert_from_string(i64 %44, i64 %45, i64 %46, i64 %47, i64 %48, i1 zeroext false)
  br label %if.end.44

if.else:                                          ; preds = %if.then.27
  %49 = load i64, i64* %src_object.addr, align 8
  %call39 = call zeroext i1 @BUFFERP(i64 %49)
  br i1 %call39, label %if.then.40, label %if.else.42

if.then.40:                                       ; preds = %if.else
  %50 = load i64, i64* %src_object.addr, align 8
  %call41 = call %struct.buffer* @XBUFFER(i64 %50)
  %51 = load i64, i64* %from.addr, align 8
  %52 = load i64, i64* %chars, align 8
  call void @insert_from_buffer(%struct.buffer* %call41, i64 %51, i64 %52, i1 zeroext false)
  br label %if.end.43

if.else.42:                                       ; preds = %if.else
  %53 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %53, i32 0, i32 17
  %54 = load i8*, i8** %source, align 8
  %55 = load i64, i64* %from.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %54, i64 %55
  %56 = load i64, i64* %chars, align 8
  %57 = load i64, i64* %bytes, align 8
  call void @insert_1_both(i8* %add.ptr, i64 %56, i64 %57, i1 zeroext false, i1 zeroext false, i1 zeroext false)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.42, %if.then.40
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.then.38
  %58 = load i64, i64* %src_object.addr, align 8
  %59 = load i64, i64* %dst_object.addr, align 8
  %cmp45 = icmp eq i64 %58, %59
  br i1 %cmp45, label %if.then.47, label %if.end.52

if.then.47:                                       ; preds = %if.end.44
  %60 = load i64, i64* %src_object.addr, align 8
  %call48 = call %struct.buffer* @XBUFFER(i64 %60)
  call void @set_buffer_internal(%struct.buffer* %call48)
  %61 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %61, i32 0, i32 75
  %62 = load i64, i64* %pt, align 8
  %add = add nsw i64 %62, 0
  store i64 %add, i64* %saved_pt, align 8
  %63 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %63, i32 0, i32 76
  %64 = load i64, i64* %pt_byte, align 8
  %add49 = add nsw i64 %64, 0
  store i64 %add49, i64* %saved_pt_byte, align 8
  %65 = load i64, i64* %from.addr, align 8
  %66 = load i64, i64* %from_byte.addr, align 8
  %67 = load i64, i64* %to.addr, align 8
  %68 = load i64, i64* %to_byte.addr, align 8
  call void @del_range_both(i64 %65, i64 %66, i64 %67, i64 %68, i1 zeroext true)
  %69 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object50 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %69, i32 0, i32 16
  %70 = load i64, i64* %src_object50, align 8
  %call51 = call %struct.buffer* @XBUFFER(i64 %70)
  call void @set_buffer_internal(%struct.buffer* %call51)
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.47, %if.end.44
  %71 = load i64, i64* %attrs, align 8
  %call53 = call i64 @AREF(i64 %71, i64 10)
  %72 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text54 = getelementptr inbounds %struct.buffer, %struct.buffer* %72, i32 0, i32 73
  %73 = load %struct.buffer_text*, %struct.buffer_text** %text54, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %73, i32 0, i32 2
  %74 = load i64, i64* %z, align 8
  %shl = shl i64 %74, 2
  %add55 = add i64 %shl, 2
  %call56 = call i64 @safe_call2(i64 %call53, i64 6, i64 %add55)
  %75 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object57 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %75, i32 0, i32 16
  %76 = load i64, i64* %src_object57, align 8
  %call58 = call %struct.buffer* @XBUFFER(i64 %76)
  %77 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp59 = icmp ne %struct.buffer* %call58, %77
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.end.52
  store i8 1, i8* %kill_src_buffer, align 1
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.61, %if.end.52
  %call63 = call i64 @Fcurrent_buffer()
  %78 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object64 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %78, i32 0, i32 16
  store i64 %call63, i64* %src_object64, align 8
  %79 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text65 = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 73
  %80 = load %struct.buffer_text*, %struct.buffer_text** %text65, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %80, i32 0, i32 1
  %81 = load i64, i64* %gpt, align 8
  %cmp66 = icmp ne i64 1, %81
  br i1 %cmp66, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.end.62
  call void @move_gap_both(i64 1, i64 1)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.68, %if.end.62
  %82 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text70 = getelementptr inbounds %struct.buffer, %struct.buffer* %82, i32 0, i32 73
  %83 = load %struct.buffer_text*, %struct.buffer_text** %text70, align 8
  %z71 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %83, i32 0, i32 2
  %84 = load i64, i64* %z71, align 8
  %sub72 = sub nsw i64 %84, 1
  %85 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars73 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %85, i32 0, i32 14
  store i64 %sub72, i64* %src_chars73, align 8
  %86 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text74 = getelementptr inbounds %struct.buffer, %struct.buffer* %86, i32 0, i32 73
  %87 = load %struct.buffer_text*, %struct.buffer_text** %text74, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %87, i32 0, i32 4
  %88 = load i64, i64* %z_byte, align 8
  %sub75 = sub nsw i64 %88, 1
  %89 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes76 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %89, i32 0, i32 15
  store i64 %sub75, i64* %src_bytes76, align 8
  %90 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %90, i32 0, i32 12
  store i64 1, i64* %src_pos, align 8
  %91 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %91, i32 0, i32 13
  store i64 1, i64* %src_pos_byte, align 8
  %92 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text77 = getelementptr inbounds %struct.buffer, %struct.buffer* %92, i32 0, i32 73
  %93 = load %struct.buffer_text*, %struct.buffer_text** %text77, align 8
  %z78 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %93, i32 0, i32 2
  %94 = load i64, i64* %z78, align 8
  %95 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text79 = getelementptr inbounds %struct.buffer, %struct.buffer* %95, i32 0, i32 73
  %96 = load %struct.buffer_text*, %struct.buffer_text** %text79, align 8
  %z_byte80 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %96, i32 0, i32 4
  %97 = load i64, i64* %z_byte80, align 8
  %cmp81 = icmp slt i64 %94, %97
  %98 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte83 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %98, i32 0, i32 1
  %99 = zext i1 %cmp81 to i32
  %bf.load84 = load i32, i32* %src_multibyte83, align 8
  %bf.shl85 = shl i32 %99, 19
  %bf.clear86 = and i32 %bf.load84, -524289
  %bf.set87 = or i32 %bf.clear86, %bf.shl85
  store i32 %bf.set87, i32* %src_multibyte83, align 8
  %bf.result.cast88 = trunc i32 %99 to i8
  %tobool89 = trunc i8 %bf.result.cast88 to i1
  br label %if.end.132

if.else.90:                                       ; preds = %if.end
  %100 = load i64, i64* %src_object.addr, align 8
  %call91 = call zeroext i1 @STRINGP(i64 %100)
  br i1 %call91, label %if.then.92, label %if.else.96

if.then.92:                                       ; preds = %if.else.90
  %call93 = call i64 @code_conversion_save(i1 zeroext false, i1 zeroext false)
  %101 = load i64, i64* %from.addr, align 8
  %102 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos94 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %102, i32 0, i32 12
  store i64 %101, i64* %src_pos94, align 8
  %103 = load i64, i64* %from_byte.addr, align 8
  %104 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte95 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %104, i32 0, i32 13
  store i64 %103, i64* %src_pos_byte95, align 8
  br label %if.end.131

if.else.96:                                       ; preds = %if.else.90
  %105 = load i64, i64* %src_object.addr, align 8
  %call97 = call zeroext i1 @BUFFERP(i64 %105)
  br i1 %call97, label %if.then.98, label %if.else.126

if.then.98:                                       ; preds = %if.else.96
  %call99 = call i64 @code_conversion_save(i1 zeroext false, i1 zeroext false)
  %106 = load i64, i64* %src_object.addr, align 8
  %call100 = call %struct.buffer* @XBUFFER(i64 %106)
  call void @set_buffer_internal(%struct.buffer* %call100)
  %107 = load i64, i64* %src_object.addr, align 8
  %108 = load i64, i64* %dst_object.addr, align 8
  %cmp101 = icmp eq i64 %107, %108
  br i1 %cmp101, label %if.then.103, label %if.else.112

if.then.103:                                      ; preds = %if.then.98
  %109 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt104 = getelementptr inbounds %struct.buffer, %struct.buffer* %109, i32 0, i32 75
  %110 = load i64, i64* %pt104, align 8
  %add105 = add nsw i64 %110, 0
  store i64 %add105, i64* %saved_pt, align 8
  %111 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte106 = getelementptr inbounds %struct.buffer, %struct.buffer* %111, i32 0, i32 76
  %112 = load i64, i64* %pt_byte106, align 8
  %add107 = add nsw i64 %112, 0
  store i64 %add107, i64* %saved_pt_byte, align 8
  %113 = load i64, i64* %from.addr, align 8
  %114 = load i64, i64* %to.addr, align 8
  %call108 = call i64 @del_range_1(i64 %113, i64 %114, i1 zeroext true, i1 zeroext true)
  %115 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object109 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %115, i32 0, i32 16
  store i64 %call108, i64* %src_object109, align 8
  %116 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos110 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %116, i32 0, i32 12
  store i64 0, i64* %src_pos110, align 8
  %117 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte111 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %117, i32 0, i32 13
  store i64 0, i64* %src_pos_byte111, align 8
  br label %if.end.125

if.else.112:                                      ; preds = %if.then.98
  %118 = load i64, i64* %from.addr, align 8
  %119 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text113 = getelementptr inbounds %struct.buffer, %struct.buffer* %119, i32 0, i32 73
  %120 = load %struct.buffer_text*, %struct.buffer_text** %text113, align 8
  %gpt114 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %120, i32 0, i32 1
  %121 = load i64, i64* %gpt114, align 8
  %cmp115 = icmp slt i64 %118, %121
  br i1 %cmp115, label %land.lhs.true, label %if.end.122

land.lhs.true:                                    ; preds = %if.else.112
  %122 = load i64, i64* %to.addr, align 8
  %123 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text117 = getelementptr inbounds %struct.buffer, %struct.buffer* %123, i32 0, i32 73
  %124 = load %struct.buffer_text*, %struct.buffer_text** %text117, align 8
  %gpt118 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %124, i32 0, i32 1
  %125 = load i64, i64* %gpt118, align 8
  %cmp119 = icmp sge i64 %122, %125
  br i1 %cmp119, label %if.then.121, label %if.end.122

if.then.121:                                      ; preds = %land.lhs.true
  %126 = load i64, i64* %from.addr, align 8
  %127 = load i64, i64* %from_byte.addr, align 8
  call void @move_gap_both(i64 %126, i64 %127)
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.121, %land.lhs.true, %if.else.112
  %128 = load i64, i64* %from.addr, align 8
  %129 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos123 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %129, i32 0, i32 12
  store i64 %128, i64* %src_pos123, align 8
  %130 = load i64, i64* %from_byte.addr, align 8
  %131 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte124 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %131, i32 0, i32 13
  store i64 %130, i64* %src_pos_byte124, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.122, %if.then.103
  br label %if.end.130

if.else.126:                                      ; preds = %if.else.96
  %call127 = call i64 @code_conversion_save(i1 zeroext false, i1 zeroext false)
  %132 = load i64, i64* %from.addr, align 8
  %133 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos128 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %133, i32 0, i32 12
  store i64 %132, i64* %src_pos128, align 8
  %134 = load i64, i64* %from_byte.addr, align 8
  %135 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte129 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %135, i32 0, i32 13
  store i64 %134, i64* %src_pos_byte129, align 8
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.126, %if.end.125
  br label %if.end.131

if.end.131:                                       ; preds = %if.end.130, %if.then.92
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.end.69
  %136 = load i64, i64* %dst_object.addr, align 8
  %call133 = call zeroext i1 @BUFFERP(i64 %136)
  br i1 %call133, label %if.then.134, label %if.else.160

if.then.134:                                      ; preds = %if.end.132
  %137 = load i64, i64* %dst_object.addr, align 8
  %138 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object135 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %138, i32 0, i32 21
  store i64 %137, i64* %dst_object135, align 8
  %139 = load i64, i64* %src_object.addr, align 8
  %140 = load i64, i64* %dst_object.addr, align 8
  %cmp136 = icmp eq i64 %139, %140
  br i1 %cmp136, label %if.then.138, label %if.else.139

if.then.138:                                      ; preds = %if.then.134
  %141 = load i64, i64* %from.addr, align 8
  %142 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %142, i32 0, i32 18
  store i64 %141, i64* %dst_pos, align 8
  %143 = load i64, i64* %from_byte.addr, align 8
  %144 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %144, i32 0, i32 19
  store i64 %143, i64* %dst_pos_byte, align 8
  br label %if.end.149

if.else.139:                                      ; preds = %if.then.134
  %145 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  store %struct.buffer* %145, %struct.buffer** %current, align 8
  %146 = load i64, i64* %dst_object.addr, align 8
  %call140 = call %struct.buffer* @XBUFFER(i64 %146)
  call void @set_buffer_temp(%struct.buffer* %call140)
  %147 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt141 = getelementptr inbounds %struct.buffer, %struct.buffer* %147, i32 0, i32 75
  %148 = load i64, i64* %pt141, align 8
  %add142 = add nsw i64 %148, 0
  %149 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos143 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %149, i32 0, i32 18
  store i64 %add142, i64* %dst_pos143, align 8
  %150 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte144 = getelementptr inbounds %struct.buffer, %struct.buffer* %150, i32 0, i32 76
  %151 = load i64, i64* %pt_byte144, align 8
  %add145 = add nsw i64 %151, 0
  %152 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte146 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %152, i32 0, i32 19
  store i64 %add145, i64* %dst_pos_byte146, align 8
  %153 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos147 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %153, i32 0, i32 18
  %154 = load i64, i64* %dst_pos147, align 8
  %155 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte148 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %155, i32 0, i32 19
  %156 = load i64, i64* %dst_pos_byte148, align 8
  call void @move_gap_both(i64 %154, i64 %156)
  %157 = load %struct.buffer*, %struct.buffer** %current, align 8
  call void @set_buffer_temp(%struct.buffer* %157)
  br label %if.end.149

if.end.149:                                       ; preds = %if.else.139, %if.then.138
  %158 = load i64, i64* %dst_object.addr, align 8
  %call150 = call %struct.buffer* @XBUFFER(i64 %158)
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call150, i32 0, i32 39
  %159 = load i64, i64* %enable_multibyte_characters_, align 8
  %call151 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp152 = icmp eq i64 %159, %call151
  %lnot = xor i1 %cmp152, true
  %160 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %160, i32 0, i32 1
  %161 = zext i1 %lnot to i32
  %bf.load154 = load i32, i32* %dst_multibyte, align 8
  %bf.shl155 = shl i32 %161, 20
  %bf.clear156 = and i32 %bf.load154, -1048577
  %bf.set157 = or i32 %bf.clear156, %bf.shl155
  store i32 %bf.set157, i32* %dst_multibyte, align 8
  %bf.result.cast158 = trunc i32 %161 to i8
  %tobool159 = trunc i8 %bf.result.cast158 to i1
  br label %if.end.187

if.else.160:                                      ; preds = %if.end.132
  %162 = load i64, i64* %dst_object.addr, align 8
  %call161 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp162 = icmp eq i64 %162, %call161
  br i1 %cmp162, label %if.then.164, label %if.else.180

if.then.164:                                      ; preds = %if.else.160
  %163 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars165 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %163, i32 0, i32 14
  %164 = load i64, i64* %src_chars165, align 8
  %cmp166 = icmp sgt i64 1, %164
  br i1 %cmp166, label %cond.true.168, label %cond.false.169

cond.true.168:                                    ; preds = %if.then.164
  br label %cond.end.171

cond.false.169:                                   ; preds = %if.then.164
  %165 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars170 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %165, i32 0, i32 14
  %166 = load i64, i64* %src_chars170, align 8
  br label %cond.end.171

cond.end.171:                                     ; preds = %cond.false.169, %cond.true.168
  %cond172 = phi i64 [ 1, %cond.true.168 ], [ %166, %cond.false.169 ]
  store i64 %cond172, i64* %dst_bytes, align 8
  %call173 = call i64 @builtin_lisp_symbol(i32 0)
  %167 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object174 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %167, i32 0, i32 21
  store i64 %call173, i64* %dst_object174, align 8
  %168 = load i64, i64* %dst_bytes, align 8
  %call175 = call noalias i8* @xmalloc(i64 %168)
  %169 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %169, i32 0, i32 22
  store i8* %call175, i8** %destination, align 8
  %170 = load i64, i64* %dst_bytes, align 8
  %171 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes176 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %171, i32 0, i32 20
  store i64 %170, i64* %dst_bytes176, align 8
  %172 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte177 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %172, i32 0, i32 1
  %bf.load178 = load i32, i32* %dst_multibyte177, align 8
  %bf.clear179 = and i32 %bf.load178, -1048577
  store i32 %bf.clear179, i32* %dst_multibyte177, align 8
  br label %if.end.186

if.else.180:                                      ; preds = %if.else.160
  %call181 = call i64 @builtin_lisp_symbol(i32 0)
  %173 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object182 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %173, i32 0, i32 21
  store i64 %call181, i64* %dst_object182, align 8
  %174 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte183 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %174, i32 0, i32 1
  %bf.load184 = load i32, i32* %dst_multibyte183, align 8
  %bf.clear185 = and i32 %bf.load184, -1048577
  store i32 %bf.clear185, i32* %dst_multibyte183, align 8
  br label %if.end.186

if.end.186:                                       ; preds = %if.else.180, %cond.end.171
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %if.end.149
  %175 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @encode_coding(%struct.coding_system* %175)
  %176 = load i64, i64* %dst_object.addr, align 8
  %call188 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp189 = icmp eq i64 %176, %call188
  br i1 %cmp189, label %if.then.191, label %if.end.212

if.then.191:                                      ; preds = %if.end.187
  %177 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object192 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %177, i32 0, i32 21
  %178 = load i64, i64* %dst_object192, align 8
  %call193 = call zeroext i1 @BUFFERP(i64 %178)
  br i1 %call193, label %if.then.194, label %if.else.197

if.then.194:                                      ; preds = %if.then.191
  %call195 = call i64 @Fbuffer_string()
  %179 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object196 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %179, i32 0, i32 21
  store i64 %call195, i64* %dst_object196, align 8
  br label %if.end.211

if.else.197:                                      ; preds = %if.then.191
  %180 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %raw_destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %180, i32 0, i32 1
  %bf.load198 = load i32, i32* %raw_destination, align 8
  %bf.lshr199 = lshr i32 %bf.load198, 22
  %bf.clear200 = and i32 %bf.lshr199, 1
  %bf.cast201 = trunc i32 %bf.clear200 to i1
  br i1 %bf.cast201, label %if.then.202, label %if.else.205

if.then.202:                                      ; preds = %if.else.197
  %call203 = call i64 @builtin_lisp_symbol(i32 0)
  %181 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object204 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %181, i32 0, i32 21
  store i64 %call203, i64* %dst_object204, align 8
  br label %if.end.210

if.else.205:                                      ; preds = %if.else.197
  %182 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination206 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %182, i32 0, i32 22
  %183 = load i8*, i8** %destination206, align 8
  %184 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %184, i32 0, i32 8
  %185 = load i64, i64* %produced, align 8
  %call207 = call i64 @make_unibyte_string(i8* %183, i64 %185)
  %186 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object208 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %186, i32 0, i32 21
  store i64 %call207, i64* %dst_object208, align 8
  %187 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination209 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %187, i32 0, i32 22
  %188 = load i8*, i8** %destination209, align 8
  call void @xfree(i8* %188)
  br label %if.end.210

if.end.210:                                       ; preds = %if.else.205, %if.then.202
  br label %if.end.211

if.end.211:                                       ; preds = %if.end.210, %if.then.194
  br label %if.end.212

if.end.212:                                       ; preds = %if.end.211, %if.end.187
  %189 = load i64, i64* %saved_pt, align 8
  %cmp213 = icmp sge i64 %189, 0
  br i1 %cmp213, label %if.then.215, label %if.end.288

if.then.215:                                      ; preds = %if.end.212
  %190 = load i64, i64* %src_object.addr, align 8
  %call216 = call %struct.buffer* @XBUFFER(i64 %190)
  call void @set_buffer_internal(%struct.buffer* %call216)
  %191 = load i64, i64* %saved_pt, align 8
  %192 = load i64, i64* %from.addr, align 8
  %cmp217 = icmp slt i64 %191, %192
  br i1 %cmp217, label %if.then.219, label %if.else.220

if.then.219:                                      ; preds = %if.then.215
  %193 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %194 = load i64, i64* %saved_pt, align 8
  %195 = load i64, i64* %saved_pt_byte, align 8
  call void @temp_set_point_both(%struct.buffer* %193, i64 %194, i64 %195)
  br label %if.end.245

if.else.220:                                      ; preds = %if.then.215
  %196 = load i64, i64* %saved_pt, align 8
  %197 = load i64, i64* %from.addr, align 8
  %198 = load i64, i64* %chars, align 8
  %add221 = add nsw i64 %197, %198
  %cmp222 = icmp slt i64 %196, %add221
  br i1 %cmp222, label %if.then.224, label %if.else.225

if.then.224:                                      ; preds = %if.else.220
  %199 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %200 = load i64, i64* %from.addr, align 8
  %201 = load i64, i64* %from_byte.addr, align 8
  call void @temp_set_point_both(%struct.buffer* %199, i64 %200, i64 %201)
  br label %if.end.244

if.else.225:                                      ; preds = %if.else.220
  %202 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_226 = getelementptr inbounds %struct.buffer, %struct.buffer* %202, i32 0, i32 39
  %203 = load i64, i64* %enable_multibyte_characters_226, align 8
  %call227 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp228 = icmp eq i64 %203, %call227
  br i1 %cmp228, label %if.else.236, label %if.then.230

if.then.230:                                      ; preds = %if.else.225
  %204 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %205 = load i64, i64* %saved_pt, align 8
  %206 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %206, i32 0, i32 9
  %207 = load i64, i64* %produced_char, align 8
  %208 = load i64, i64* %chars, align 8
  %sub231 = sub nsw i64 %207, %208
  %add232 = add nsw i64 %205, %sub231
  %209 = load i64, i64* %saved_pt_byte, align 8
  %210 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced233 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %210, i32 0, i32 8
  %211 = load i64, i64* %produced233, align 8
  %212 = load i64, i64* %bytes, align 8
  %sub234 = sub nsw i64 %211, %212
  %add235 = add nsw i64 %209, %sub234
  call void @temp_set_point_both(%struct.buffer* %204, i64 %add232, i64 %add235)
  br label %if.end.243

if.else.236:                                      ; preds = %if.else.225
  %213 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %214 = load i64, i64* %saved_pt, align 8
  %215 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced237 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %215, i32 0, i32 8
  %216 = load i64, i64* %produced237, align 8
  %217 = load i64, i64* %bytes, align 8
  %sub238 = sub nsw i64 %216, %217
  %add239 = add nsw i64 %214, %sub238
  %218 = load i64, i64* %saved_pt_byte, align 8
  %219 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced240 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %219, i32 0, i32 8
  %220 = load i64, i64* %produced240, align 8
  %221 = load i64, i64* %bytes, align 8
  %sub241 = sub nsw i64 %220, %221
  %add242 = add nsw i64 %218, %sub241
  call void @temp_set_point_both(%struct.buffer* %213, i64 %add239, i64 %add242)
  br label %if.end.243

if.end.243:                                       ; preds = %if.else.236, %if.then.230
  br label %if.end.244

if.end.244:                                       ; preds = %if.end.243, %if.then.224
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.244, %if.then.219
  %222 = load i8, i8* %need_marker_adjustment, align 1
  %tobool246 = trunc i8 %222 to i1
  br i1 %tobool246, label %if.then.247, label %if.end.287

if.then.247:                                      ; preds = %if.end.245
  %223 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text249 = getelementptr inbounds %struct.buffer, %struct.buffer* %223, i32 0, i32 73
  %224 = load %struct.buffer_text*, %struct.buffer_text** %text249, align 8
  %markers250 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %224, i32 0, i32 16
  %225 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %markers250, align 8
  store %struct.Lisp_Marker* %225, %struct.Lisp_Marker** %tail248, align 8
  br label %for.cond.251

for.cond.251:                                     ; preds = %for.inc.284, %if.then.247
  %226 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %tobool252 = icmp ne %struct.Lisp_Marker* %226, null
  br i1 %tobool252, label %for.body.253, label %for.end.286

for.body.253:                                     ; preds = %for.cond.251
  %227 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %228 = bitcast %struct.Lisp_Marker* %227 to i32*
  %bf.load254 = load i32, i32* %228, align 8
  %bf.lshr255 = lshr i32 %bf.load254, 30
  %bf.clear256 = and i32 %bf.lshr255, 1
  %bf.cast257 = trunc i32 %bf.clear256 to i1
  br i1 %bf.cast257, label %if.then.258, label %if.end.283

if.then.258:                                      ; preds = %for.body.253
  %229 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %230 = bitcast %struct.Lisp_Marker* %229 to i32*
  %bf.load259 = load i32, i32* %230, align 8
  %bf.clear260 = and i32 %bf.load259, -1073741825
  store i32 %bf.clear260, i32* %230, align 8
  %231 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %232 = bitcast %struct.Lisp_Marker* %231 to i32*
  %bf.load261 = load i32, i32* %232, align 8
  %bf.lshr262 = lshr i32 %bf.load261, 31
  %bf.cast263 = trunc i32 %bf.lshr262 to i1
  br i1 %bf.cast263, label %if.then.264, label %if.else.266

if.then.264:                                      ; preds = %if.then.258
  %233 = load i64, i64* %from_byte.addr, align 8
  %234 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %bytepos = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %234, i32 0, i32 4
  store i64 %233, i64* %bytepos, align 8
  %235 = load i64, i64* %from.addr, align 8
  %236 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %charpos265 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %236, i32 0, i32 3
  store i64 %235, i64* %charpos265, align 8
  br label %if.end.282

if.else.266:                                      ; preds = %if.then.258
  %237 = load i64, i64* %from_byte.addr, align 8
  %238 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced267 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %238, i32 0, i32 8
  %239 = load i64, i64* %produced267, align 8
  %add268 = add nsw i64 %237, %239
  %240 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %bytepos269 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %240, i32 0, i32 4
  store i64 %add268, i64* %bytepos269, align 8
  %241 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_270 = getelementptr inbounds %struct.buffer, %struct.buffer* %241, i32 0, i32 39
  %242 = load i64, i64* %enable_multibyte_characters_270, align 8
  %call271 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp272 = icmp eq i64 %242, %call271
  br i1 %cmp272, label %cond.true.274, label %cond.false.276

cond.true.274:                                    ; preds = %if.else.266
  %243 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %bytepos275 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %243, i32 0, i32 4
  %244 = load i64, i64* %bytepos275, align 8
  br label %cond.end.279

cond.false.276:                                   ; preds = %if.else.266
  %245 = load i64, i64* %from.addr, align 8
  %246 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char277 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %246, i32 0, i32 9
  %247 = load i64, i64* %produced_char277, align 8
  %add278 = add nsw i64 %245, %247
  br label %cond.end.279

cond.end.279:                                     ; preds = %cond.false.276, %cond.true.274
  %cond280 = phi i64 [ %244, %cond.true.274 ], [ %add278, %cond.false.276 ]
  %248 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %charpos281 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %248, i32 0, i32 3
  store i64 %cond280, i64* %charpos281, align 8
  br label %if.end.282

if.end.282:                                       ; preds = %cond.end.279, %if.then.264
  br label %if.end.283

if.end.283:                                       ; preds = %if.end.282, %for.body.253
  br label %for.inc.284

for.inc.284:                                      ; preds = %if.end.283
  %249 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %tail248, align 8
  %next285 = getelementptr inbounds %struct.Lisp_Marker, %struct.Lisp_Marker* %249, i32 0, i32 2
  %250 = load %struct.Lisp_Marker*, %struct.Lisp_Marker** %next285, align 8
  store %struct.Lisp_Marker* %250, %struct.Lisp_Marker** %tail248, align 8
  br label %for.cond.251

for.end.286:                                      ; preds = %for.cond.251
  br label %if.end.287

if.end.287:                                       ; preds = %for.end.286, %if.end.245
  br label %if.end.288

if.end.288:                                       ; preds = %if.end.287, %if.end.212
  %251 = load i8, i8* %kill_src_buffer, align 1
  %tobool289 = trunc i8 %251 to i1
  br i1 %tobool289, label %if.then.290, label %if.end.293

if.then.290:                                      ; preds = %if.end.288
  %252 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object291 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %252, i32 0, i32 16
  %253 = load i64, i64* %src_object291, align 8
  %call292 = call i64 @Fkill_buffer(i64 %253)
  br label %if.end.293

if.end.293:                                       ; preds = %if.then.290, %if.end.288
  %254 = load i64, i64* %old_deactivate_mark, align 8
  store i64 %254, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 52), align 8
  %255 = load i64, i64* %count, align 8
  %call294 = call i64 @builtin_lisp_symbol(i32 0)
  %call295 = call i64 @unbind_to(i64 %255, i64 %call294)
  ret void
}

declare void @insert_from_string(i64, i64, i64, i64, i64, i1 zeroext) #1

declare void @insert_from_buffer(%struct.buffer*, i64, i64, i1 zeroext) #1

declare void @insert_1_both(i8*, i64, i64, i1 zeroext, i1 zeroext, i1 zeroext) #1

declare i64 @safe_call2(i64, i64, i64) #1

declare i64 @del_range_1(i64, i64, i1 zeroext, i1 zeroext) #1

declare void @set_buffer_temp(%struct.buffer*) #1

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define internal void @encode_coding(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %attrs = alloca i64, align 8
  %translation_table = alloca i64, align 8
  %max_lookup = alloca i32, align 4
  %cclspec = alloca %struct.ccl_spec, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %units = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %0 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call1 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %0)
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 0
  %2 = load i64, i64* %id, align 8
  %call2 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call1, i64 %2)
  %call3 = call i64 @AREF(i64 %call2, i64 0)
  store i64 %call3, i64* %attrs, align 8
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 31
  %4 = load i1 (%struct.coding_system*)*, i1 (%struct.coding_system*)** %encoder, align 8
  %cmp = icmp eq i1 (%struct.coding_system*)* %4, @encode_coding_raw_text
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4, i64* %translation_table, align 8
  store i32 0, i32* %max_lookup, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load i64, i64* %attrs, align 8
  %call5 = call i64 @get_translation_table(i64 %5, i1 zeroext true, i32* %max_lookup)
  store i64 %call5, i64* %translation_table, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 21
  %7 = load i64, i64* %dst_object, align 8
  %call6 = call zeroext i1 @BUFFERP(i64 %7)
  br i1 %call6, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.end
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object8 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 21
  %9 = load i64, i64* %dst_object8, align 8
  %call9 = call %struct.buffer* @XBUFFER(i64 %9)
  call void @set_buffer_internal(%struct.buffer* %call9)
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 39
  %11 = load i64, i64* %enable_multibyte_characters_, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %11, %call10
  %lnot = xor i1 %cmp11, true
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 1
  %13 = zext i1 %lnot to i32
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.shl = shl i32 %13, 20
  %bf.clear = and i32 %bf.load, -1048577
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %dst_multibyte, align 8
  %bf.result.cast = trunc i32 %13 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.7, %if.end
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 11
  store i64 0, i64* %consumed_char, align 8
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 10
  store i64 0, i64* %consumed, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 9
  store i64 0, i64* %produced_char, align 8
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 8
  store i64 0, i64* %produced, align 8
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %18, i32 0)
  br label %do.body

do.body:                                          ; preds = %if.end.12
  %19 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %19, i32 0, i32 14
  %20 = load i64, i64* %src_chars, align 8
  %add = add nsw i64 %20, 16
  %cmp13 = icmp slt i64 %add, 16384
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 14
  %22 = load i64, i64* %src_chars14, align 8
  %add15 = add nsw i64 %22, 16
  br label %cond.end

cond.false:                                       ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add15, %cond.true ], [ 16384, %cond.false ]
  store i64 %cond, i64* %units, align 8
  %23 = load i64, i64* %units, align 8
  %mul = mul i64 %23, 4
  %24 = load i64, i64* %sa_avail, align 8
  %cmp16 = icmp ule i64 %mul, %24
  br i1 %cmp16, label %cond.true.17, label %cond.false.20

cond.true.17:                                     ; preds = %cond.end
  %25 = load i64, i64* %units, align 8
  %mul18 = mul i64 %25, 4
  %26 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %26, %mul18
  store i64 %sub, i64* %sa_avail, align 8
  %27 = load i64, i64* %units, align 8
  %mul19 = mul i64 %27, 4
  %28 = alloca i8, i64 %mul19
  br label %cond.end.23

cond.false.20:                                    ; preds = %cond.end
  store i8 1, i8* %sa_must_free, align 1
  %29 = load i64, i64* %units, align 8
  %mul21 = mul i64 %29, 4
  %call22 = call i8* @record_xmalloc(i64 %mul21)
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.20, %cond.true.17
  %cond24 = phi i8* [ %28, %cond.true.17 ], [ %call22, %cond.false.20 ]
  %30 = bitcast i8* %cond24 to i32*
  %31 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf = getelementptr inbounds %struct.coding_system, %struct.coding_system* %31, i32 0, i32 23
  store i32* %30, i32** %charbuf, align 8
  %32 = load i64, i64* %units, align 8
  %conv = trunc i64 %32 to i32
  %33 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %33, i32 0, i32 24
  store i32 %conv, i32* %charbuf_size, align 4
  br label %do.end

do.end:                                           ; preds = %cond.end.23
  %34 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder25 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %34, i32 0, i32 31
  %35 = load i1 (%struct.coding_system*)*, i1 (%struct.coding_system*)** %encoder25, align 8
  %cmp26 = icmp eq i1 (%struct.coding_system*)* %35, @encode_coding_ccl
  br i1 %cmp26, label %if.then.28, label %if.end.36

if.then.28:                                       ; preds = %do.end
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %36, i32 0, i32 3
  %ccl = bitcast %union.anon* %spec to %struct.ccl_spec**
  store %struct.ccl_spec* %cclspec, %struct.ccl_spec** %ccl, align 8
  %ccl29 = getelementptr inbounds %struct.ccl_spec, %struct.ccl_spec* %cclspec, i32 0, i32 0
  %37 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call30 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %37)
  %38 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id31 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %38, i32 0, i32 0
  %39 = load i64, i64* %id31, align 8
  %call32 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call30, i64 %39)
  %call33 = call i64 @AREF(i64 %call32, i64 0)
  %call34 = call i64 @AREF(i64 %call33, i64 18)
  %call35 = call zeroext i1 @setup_ccl_program(%struct.ccl_program* %ccl29, i64 %call34)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.28, %do.end
  br label %do.body.37

do.body.37:                                       ; preds = %do.cond, %if.end.36
  %40 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %40)
  %41 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %42 = load i64, i64* %translation_table, align 8
  %43 = load i32, i32* %max_lookup, align 4
  call void @consume_chars(%struct.coding_system* %41, i64 %42, i32 %43)
  %44 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_destination(%struct.coding_system* %44)
  %45 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder38 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %45, i32 0, i32 31
  %46 = load i1 (%struct.coding_system*)*, i1 (%struct.coding_system*)** %encoder38, align 8
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call39 = call zeroext i1 %46(%struct.coding_system* %47)
  br label %do.cond

do.cond:                                          ; preds = %do.body.37
  %48 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char40 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %48, i32 0, i32 11
  %49 = load i64, i64* %consumed_char40, align 8
  %50 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars41 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %50, i32 0, i32 14
  %51 = load i64, i64* %src_chars41, align 8
  %cmp42 = icmp slt i64 %49, %51
  br i1 %cmp42, label %do.body.37, label %do.end.44

do.end.44:                                        ; preds = %do.cond
  %52 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object45 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %52, i32 0, i32 21
  %53 = load i64, i64* %dst_object45, align 8
  %call46 = call zeroext i1 @BUFFERP(i64 %53)
  br i1 %call46, label %land.lhs.true, label %if.end.54

land.lhs.true:                                    ; preds = %do.end.44
  %54 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char48 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %54, i32 0, i32 9
  %55 = load i64, i64* %produced_char48, align 8
  %cmp49 = icmp sgt i64 %55, 0
  br i1 %cmp49, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %land.lhs.true
  %56 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char52 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %56, i32 0, i32 9
  %57 = load i64, i64* %produced_char52, align 8
  %58 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced53 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %58, i32 0, i32 8
  %59 = load i64, i64* %produced53, align 8
  call void @insert_from_gap(i64 %57, i64 %59, i1 zeroext false)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %land.lhs.true, %do.end.44
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.54
  %60 = load i8, i8* %sa_must_free, align 1
  %tobool56 = trunc i8 %60 to i1
  br i1 %tobool56, label %if.then.57, label %if.end.60

if.then.57:                                       ; preds = %do.body.55
  store i8 0, i8* %sa_must_free, align 1
  %61 = load i64, i64* %sa_count, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %call59 = call i64 @unbind_to(i64 %61, i64 %call58)
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.57, %do.body.55
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.60
  ret void
}

declare i64 @make_unibyte_string(i8*, i64) #1

declare void @xfree(i8*) #1

declare i64 @Fkill_buffer(i64) #1

declare i64 @HASH_KEY(%struct.Lisp_Hash_Table*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fcoding_system_p(i64 %object) #0 {
entry:
  %retval = alloca i64, align 8
  %object.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call1 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %2 = load i64, i64* %object.addr, align 8
  %call2 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call1, i64 %2, i64* null)
  %cmp3 = icmp sge i64 %call2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call4, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i64, i64* %object.addr, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp5 = icmp eq i32 %conv, 0
  br i1 %cmp5, label %lor.lhs.false.7, label %if.then.13

lor.lhs.false.7:                                  ; preds = %if.end
  %4 = load i64, i64* %object.addr, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 277)
  %call9 = call i64 @Fget(i64 %4, i64 %call8)
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %call9, %call10
  br i1 %cmp11, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %lor.lhs.false.7, %if.end
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call14, i64* %retval
  br label %return

if.end.15:                                        ; preds = %lor.lhs.false.7
  %call16 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call16, i64* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then.13, %if.then
  %5 = load i64, i64* %retval
  ret i64 %5
}

declare i64 @Fget(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fread_non_nil_coding_system(i64 %prompt) #0 {
entry:
  %prompt.addr = alloca i64, align 8
  %val = alloca i64, align 8
  store i64 %prompt, i64* %prompt.addr, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %prompt.addr, align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @builtin_lisp_symbol(i32 279)
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %call6 = call i64 @Fcompleting_read(i64 %0, i64 %1, i64 %call, i64 %call1, i64 %call2, i64 %call3, i64 %call4, i64 %call5)
  store i64 %call6, i64* %val, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %2 = load i64, i64* %val, align 8
  %call7 = call i64 @SCHARS(i64 %2)
  %cmp = icmp eq i64 %call7, 0
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %3 = load i64, i64* %val, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fintern(i64 %3, i64 %call8)
  ret i64 %call9
}

declare i64 @Fcompleting_read(i64, i64, i64, i64, i64, i64, i64, i64) #1

declare i64 @Fintern(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fread_coding_system(i64 %prompt, i64 %default_coding_system) #0 {
entry:
  %prompt.addr = alloca i64, align 8
  %default_coding_system.addr = alloca i64, align 8
  %val = alloca i64, align 8
  %count = alloca i64, align 8
  store i64 %prompt, i64* %prompt.addr, align 8
  store i64 %default_coding_system, i64* %default_coding_system.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %0 = load i64, i64* %default_coding_system.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %default_coding_system.addr, align 8
  %call2 = call i64 @SYMBOL_NAME(i64 %1)
  store i64 %call2, i64* %default_coding_system.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 289)
  %call4 = call i64 @builtin_lisp_symbol(i32 901)
  call void @specbind(i64 %call3, i64 %call4)
  %2 = load i64, i64* %prompt.addr, align 8
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %call6 = call i64 @builtin_lisp_symbol(i32 901)
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %call8 = call i64 @builtin_lisp_symbol(i32 279)
  %4 = load i64, i64* %default_coding_system.addr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %call10 = call i64 @Fcompleting_read(i64 %2, i64 %3, i64 %call5, i64 %call6, i64 %call7, i64 %call8, i64 %4, i64 %call9)
  store i64 %call10, i64* %val, align 8
  %5 = load i64, i64* %count, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %call12 = call i64 @unbind_to(i64 %5, i64 %call11)
  %6 = load i64, i64* %val, align 8
  %call13 = call i64 @SCHARS(i64 %6)
  %cmp14 = icmp eq i64 %call13, 0
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load i64, i64* %val, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %call18 = call i64 @Fintern(i64 %7, i64 %call17)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call16, %cond.true ], [ %call18, %cond.false ]
  ret i64 %cond
}

declare i64 @SYMBOL_NAME(i64) #1

declare void @specbind(i64, i64) #1

declare i64 @Fput(i64, i64, i64) #1

declare i64 @safe_eval(i64) #1

; Function Attrs: noreturn
declare void @xsignal1(i64, i64) #2

; Function Attrs: nounwind uwtable
define i64 @detect_coding_system(i8* %src, i64 %src_chars, i64 %src_bytes, i1 zeroext %highest, i1 zeroext %multibytep, i64 %coding_system) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %src_chars.addr = alloca i64, align 8
  %src_bytes.addr = alloca i64, align 8
  %highest.addr = alloca i8, align 1
  %multibytep.addr = alloca i8, align 1
  %coding_system.addr = alloca i64, align 8
  %src_end = alloca i8*, align 8
  %attrs = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %val = alloca i64, align 8
  %coding = alloca %struct.coding_system, align 8
  %id = alloca i64, align 8
  %detect_info = alloca %struct.coding_detection_info, align 4
  %base_category = alloca i32, align 4
  %null_byte_found = alloca i8, align 1
  %eight_bit_found = alloca i8, align 1
  %category = alloca i32, align 4
  %this = alloca %struct.coding_system*, align 8
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %inhibit_nbd = alloca i8, align 1
  %inhibit_ied = alloca i8, align 1
  %prefer_utf_8 = alloca i8, align 1
  %mask = alloca i32, align 4
  %found285 = alloca i32, align 4
  %this343 = alloca %struct.coding_system*, align 8
  %this361 = alloca %struct.coding_system*, align 8
  %normal_eol = alloca i32, align 4
  %utf_16_be_eol = alloca i32, align 4
  %utf_16_le_eol = alloca i32, align 4
  %tail = alloca i64, align 8
  %category444 = alloca i32, align 4
  %this_eol = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i64 %src_chars, i64* %src_chars.addr, align 8
  store i64 %src_bytes, i64* %src_bytes.addr, align 8
  %frombool = zext i1 %highest to i8
  store i8 %frombool, i8* %highest.addr, align 1
  %frombool1 = zext i1 %multibytep to i8
  store i8 %frombool1, i8* %multibytep.addr, align 1
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i8*, i8** %src.addr, align 8
  %1 = load i64, i64* %src_bytes.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %src_end, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %val, align 8
  store i8 0, i8* %null_byte_found, align 1
  store i8 0, i8* %eight_bit_found, align 1
  %2 = load i64, i64* %coding_system.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 958)
  store i64 %call3, i64* %coding_system.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* %coding_system.addr, align 8
  call void @setup_coding_system(i64 %3, %struct.coding_system* %coding)
  %4 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call4 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %4)
  %id5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 0
  %5 = load i64, i64* %id5, align 8
  %call6 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call4, i64 %5)
  %call7 = call i64 @AREF(i64 %call6, i64 0)
  store i64 %call7, i64* %attrs, align 8
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call8 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %6)
  %id9 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 0
  %7 = load i64, i64* %id9, align 8
  %call10 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call8, i64 %7)
  %call11 = call i64 @AREF(i64 %call10, i64 2)
  store i64 %call11, i64* %eol_type, align 8
  %8 = load i64, i64* %attrs, align 8
  %call12 = call i64 @AREF(i64 %8, i64 0)
  store i64 %call12, i64* %coding_system.addr, align 8
  %9 = load i8*, i8** %src.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 17
  store i8* %9, i8** %source, align 8
  %10 = load i64, i64* %src_chars.addr, align 8
  %src_chars13 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 14
  store i64 %10, i64* %src_chars13, align 8
  %11 = load i64, i64* %src_bytes.addr, align 8
  %src_bytes14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 15
  store i64 %11, i64* %src_bytes14, align 8
  %12 = load i8, i8* %multibytep.addr, align 1
  %tobool = trunc i8 %12 to i1
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %13 = zext i1 %tobool to i32
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.shl = shl i32 %13, 19
  %bf.clear = and i32 %bf.load, -524289
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %src_multibyte, align 8
  %bf.result.cast = trunc i32 %13 to i8
  %tobool15 = trunc i8 %bf.result.cast to i1
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 10
  store i64 0, i64* %consumed, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %bf.load16 = load i32, i32* %mode, align 8
  %bf.lshr = lshr i32 %bf.load16, 14
  %bf.clear17 = and i32 %bf.lshr, 31
  %or = or i32 %bf.clear17, 1
  %bf.load18 = load i32, i32* %mode, align 8
  %bf.value = and i32 %or, 31
  %bf.shl19 = shl i32 %bf.value, 14
  %bf.clear20 = and i32 %bf.load18, -507905
  %bf.set21 = or i32 %bf.clear20, %bf.shl19
  store i32 %bf.set21, i32* %mode, align 8
  %head_ascii = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 5
  store i64 0, i64* %head_ascii, align 8
  %rejected = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  store i32 0, i32* %rejected, align 4
  %found = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  store i32 0, i32* %found, align 4
  %checked = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  store i32 0, i32* %checked, align 4
  %14 = load i64, i64* %attrs, align 8
  %call22 = call i64 @AREF(i64 %14, i64 14)
  %shr = ashr i64 %call22, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %base_category, align 4
  %15 = load i32, i32* %base_category, align 4
  %cmp23 = icmp eq i32 %15, 20
  br i1 %cmp23, label %if.then.25, label %if.else.337

if.then.25:                                       ; preds = %if.end
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 3
  %undecided = bitcast %union.anon* %spec to %struct.undecided_spec*
  %inhibit_nbd26 = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided, i32 0, i32 0
  %16 = load i32, i32* %inhibit_nbd26, align 4
  %17 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 457), align 1
  %tobool27 = trunc i8 %17 to i1
  %call28 = call zeroext i1 @inhibit_flag(i32 %16, i1 zeroext %tobool27)
  %frombool29 = zext i1 %call28 to i8
  store i8 %frombool29, i8* %inhibit_nbd, align 1
  %spec30 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 3
  %undecided31 = bitcast %union.anon* %spec30 to %struct.undecided_spec*
  %inhibit_ied32 = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided31, i32 0, i32 1
  %18 = load i32, i32* %inhibit_ied32, align 4
  %19 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 452), align 1
  %tobool33 = trunc i8 %19 to i1
  %call34 = call zeroext i1 @inhibit_flag(i32 %18, i1 zeroext %tobool33)
  %frombool35 = zext i1 %call34 to i8
  store i8 %frombool35, i8* %inhibit_ied, align 1
  %spec36 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 3
  %undecided37 = bitcast %union.anon* %spec36 to %struct.undecided_spec*
  %prefer_utf_838 = getelementptr inbounds %struct.undecided_spec, %struct.undecided_spec* %undecided37, i32 0, i32 2
  %20 = load i8, i8* %prefer_utf_838, align 1
  %tobool39 = trunc i8 %20 to i1
  %frombool40 = zext i1 %tobool39 to i8
  store i8 %frombool40, i8* %prefer_utf_8, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.25
  %21 = load i8*, i8** %src.addr, align 8
  %22 = load i8*, i8** %src_end, align 8
  %cmp41 = icmp ult i8* %21, %22
  br i1 %cmp41, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i8*, i8** %src.addr, align 8
  %24 = load i8, i8* %23, align 1
  %conv43 = zext i8 %24 to i32
  store i32 %conv43, i32* %c, align 4
  %25 = load i32, i32* %c, align 4
  %and = and i32 %25, 128
  %tobool44 = icmp ne i32 %and, 0
  br i1 %tobool44, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %for.body
  store i8 1, i8* %eight_bit_found, align 1
  %26 = load i8, i8* %null_byte_found, align 1
  %tobool46 = trunc i8 %26 to i1
  br i1 %tobool46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.then.45
  br label %for.end

if.end.48:                                        ; preds = %if.then.45
  br label %if.end.97

if.else:                                          ; preds = %for.body
  %27 = load i32, i32* %c, align 4
  %cmp49 = icmp slt i32 %27, 32
  br i1 %cmp49, label %if.then.51, label %if.else.90

if.then.51:                                       ; preds = %if.else
  %28 = load i32, i32* %c, align 4
  %cmp52 = icmp eq i32 %28, 27
  br i1 %cmp52, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.51
  %29 = load i32, i32* %c, align 4
  %cmp54 = icmp eq i32 %29, 15
  br i1 %cmp54, label %land.lhs.true, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %lor.lhs.false
  %30 = load i32, i32* %c, align 4
  %cmp57 = icmp eq i32 %30, 14
  br i1 %cmp57, label %land.lhs.true, label %if.else.76

land.lhs.true:                                    ; preds = %lor.lhs.false.56, %lor.lhs.false, %if.then.51
  %31 = load i8, i8* %inhibit_ied, align 1
  %tobool59 = trunc i8 %31 to i1
  br i1 %tobool59, label %if.else.76, label %land.lhs.true.60

land.lhs.true.60:                                 ; preds = %land.lhs.true
  %checked61 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %32 = load i32, i32* %checked61, align 4
  %tobool62 = icmp ne i32 %32, 0
  br i1 %tobool62, label %if.else.76, label %if.then.63

if.then.63:                                       ; preds = %land.lhs.true.60
  %call64 = call zeroext i1 @detect_coding_iso_2022(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info)
  br i1 %call64, label %if.then.65, label %if.end.75

if.then.65:                                       ; preds = %if.then.63
  %rejected66 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %33 = load i32, i32* %rejected66, align 4
  %and67 = and i32 %33, 16
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %if.end.72, label %if.then.69

if.then.69:                                       ; preds = %if.then.65
  %34 = load i8*, i8** %src_end, align 8
  store i8* %34, i8** %src.addr, align 8
  %35 = load i8*, i8** %src.addr, align 8
  %source70 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 17
  %36 = load i8*, i8** %source70, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %35 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %36 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %head_ascii71 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 5
  store i64 %sub.ptr.sub, i64* %head_ascii71, align 8
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.69, %if.then.65
  %rejected73 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %37 = load i32, i32* %rejected73, align 4
  %or74 = or i32 %37, -52
  store i32 %or74, i32* %rejected73, align 4
  br label %for.end

if.end.75:                                        ; preds = %if.then.63
  br label %if.end.85

if.else.76:                                       ; preds = %land.lhs.true.60, %land.lhs.true, %lor.lhs.false.56
  %38 = load i32, i32* %c, align 4
  %tobool77 = icmp ne i32 %38, 0
  br i1 %tobool77, label %if.end.84, label %land.lhs.true.78

land.lhs.true.78:                                 ; preds = %if.else.76
  %39 = load i8, i8* %inhibit_nbd, align 1
  %tobool79 = trunc i8 %39 to i1
  br i1 %tobool79, label %if.end.84, label %if.then.80

if.then.80:                                       ; preds = %land.lhs.true.78
  store i8 1, i8* %null_byte_found, align 1
  %40 = load i8, i8* %eight_bit_found, align 1
  %tobool81 = trunc i8 %40 to i1
  br i1 %tobool81, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %if.then.80
  br label %for.end

if.end.83:                                        ; preds = %if.then.80
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %land.lhs.true.78, %if.else.76
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.end.75
  %41 = load i8, i8* %eight_bit_found, align 1
  %tobool86 = trunc i8 %41 to i1
  br i1 %tobool86, label %if.end.89, label %if.then.87

if.then.87:                                       ; preds = %if.end.85
  %head_ascii88 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 5
  %42 = load i64, i64* %head_ascii88, align 8
  %inc = add nsw i64 %42, 1
  store i64 %inc, i64* %head_ascii88, align 8
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.87, %if.end.85
  br label %if.end.96

if.else.90:                                       ; preds = %if.else
  %43 = load i8, i8* %eight_bit_found, align 1
  %tobool91 = trunc i8 %43 to i1
  br i1 %tobool91, label %if.end.95, label %if.then.92

if.then.92:                                       ; preds = %if.else.90
  %head_ascii93 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 5
  %44 = load i64, i64* %head_ascii93, align 8
  %inc94 = add nsw i64 %44, 1
  store i64 %inc94, i64* %head_ascii93, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.92, %if.else.90
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.end.89
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.end.48
  br label %for.inc

for.inc:                                          ; preds = %if.end.97
  %45 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.82, %if.end.72, %if.then.47, %for.cond
  %46 = load i8, i8* %null_byte_found, align 1
  %tobool98 = trunc i8 %46 to i1
  br i1 %tobool98, label %if.then.111, label %lor.lhs.false.100

lor.lhs.false.100:                                ; preds = %for.end
  %47 = load i8, i8* %eight_bit_found, align 1
  %tobool101 = trunc i8 %47 to i1
  br i1 %tobool101, label %if.then.111, label %lor.lhs.false.103

lor.lhs.false.103:                                ; preds = %lor.lhs.false.100
  %head_ascii104 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 5
  %48 = load i64, i64* %head_ascii104, align 8
  %src_bytes105 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 15
  %49 = load i64, i64* %src_bytes105, align 8
  %cmp106 = icmp slt i64 %48, %49
  br i1 %cmp106, label %if.then.111, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %lor.lhs.false.103
  %found109 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %50 = load i32, i32* %found109, align 4
  %tobool110 = icmp ne i32 %50, 0
  br i1 %tobool110, label %if.then.111, label %if.end.214

if.then.111:                                      ; preds = %lor.lhs.false.108, %lor.lhs.false.103, %lor.lhs.false.100, %for.end
  %head_ascii112 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 5
  %51 = load i64, i64* %head_ascii112, align 8
  %src_bytes113 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 15
  %52 = load i64, i64* %src_bytes113, align 8
  %cmp114 = icmp eq i64 %51, %52
  br i1 %cmp114, label %if.then.116, label %if.else.130

if.then.116:                                      ; preds = %if.then.111
  store i32 0, i32* %i, align 4
  br label %for.cond.117

for.cond.117:                                     ; preds = %for.inc.127, %if.then.116
  %53 = load i32, i32* %i, align 4
  %cmp118 = icmp slt i32 %53, 19
  br i1 %cmp118, label %for.body.120, label %for.end.129

for.body.120:                                     ; preds = %for.cond.117
  %54 = load i32, i32* %i, align 4
  %idxprom = sext i32 %54 to i64
  %arrayidx = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom
  %55 = load i32, i32* %arrayidx, align 4
  store i32 %55, i32* %category, align 4
  %56 = load i32, i32* %category, align 4
  %idx.ext = zext i32 %56 to i64
  %add.ptr121 = getelementptr inbounds %struct.coding_system, %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i32 0), i64 %idx.ext
  store %struct.coding_system* %add.ptr121, %struct.coding_system** %this, align 8
  %found122 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %57 = load i32, i32* %found122, align 4
  %58 = load i32, i32* %category, align 4
  %shl = shl i32 1, %58
  %and123 = and i32 %57, %shl
  %tobool124 = icmp ne i32 %and123, 0
  br i1 %tobool124, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %for.body.120
  br label %for.end.129

if.end.126:                                       ; preds = %for.body.120
  br label %for.inc.127

for.inc.127:                                      ; preds = %if.end.126
  %59 = load i32, i32* %i, align 4
  %inc128 = add nsw i32 %59, 1
  store i32 %inc128, i32* %i, align 4
  br label %for.cond.117

for.end.129:                                      ; preds = %if.then.125, %for.cond.117
  br label %if.end.213

if.else.130:                                      ; preds = %if.then.111
  %60 = load i8, i8* %null_byte_found, align 1
  %tobool131 = trunc i8 %60 to i1
  br i1 %tobool131, label %if.then.132, label %if.else.137

if.then.132:                                      ; preds = %if.else.130
  %checked133 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %61 = load i32, i32* %checked133, align 4
  %or134 = or i32 %61, -15873
  store i32 %or134, i32* %checked133, align 4
  %rejected135 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %62 = load i32, i32* %rejected135, align 4
  %or136 = or i32 %62, -15873
  store i32 %or136, i32* %rejected135, align 4
  br label %if.end.149

if.else.137:                                      ; preds = %if.else.130
  %63 = load i8, i8* %prefer_utf_8, align 1
  %tobool138 = trunc i8 %63 to i1
  br i1 %tobool138, label %land.lhs.true.140, label %if.end.148

land.lhs.true.140:                                ; preds = %if.else.137
  %call141 = call zeroext i1 @detect_coding_utf_8(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info)
  br i1 %call141, label %if.then.143, label %if.end.148

if.then.143:                                      ; preds = %land.lhs.true.140
  %checked144 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %64 = load i32, i32* %checked144, align 4
  %or145 = or i32 %64, -449
  store i32 %or145, i32* %checked144, align 4
  %rejected146 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %65 = load i32, i32* %rejected146, align 4
  %or147 = or i32 %65, -449
  store i32 %or147, i32* %rejected146, align 4
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.143, %land.lhs.true.140, %if.else.137
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.then.132
  store i32 0, i32* %i, align 4
  br label %for.cond.150

for.cond.150:                                     ; preds = %for.inc.210, %if.end.149
  %66 = load i32, i32* %i, align 4
  %cmp151 = icmp slt i32 %66, 19
  br i1 %cmp151, label %for.body.153, label %for.end.212

for.body.153:                                     ; preds = %for.cond.150
  %67 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %67 to i64
  %arrayidx155 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom154
  %68 = load i32, i32* %arrayidx155, align 4
  store i32 %68, i32* %category, align 4
  %69 = load i32, i32* %category, align 4
  %idx.ext156 = zext i32 %69 to i64
  %add.ptr157 = getelementptr inbounds %struct.coding_system, %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i32 0), i64 %idx.ext156
  store %struct.coding_system* %add.ptr157, %struct.coding_system** %this, align 8
  %70 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id158 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %70, i32 0, i32 0
  %71 = load i64, i64* %id158, align 8
  %cmp159 = icmp slt i64 %71, 0
  br i1 %cmp159, label %if.then.161, label %if.else.165

if.then.161:                                      ; preds = %for.body.153
  %72 = load i32, i32* %category, align 4
  %shl162 = shl i32 1, %72
  %rejected163 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %73 = load i32, i32* %rejected163, align 4
  %or164 = or i32 %73, %shl162
  store i32 %or164, i32* %rejected163, align 4
  br label %if.end.209

if.else.165:                                      ; preds = %for.body.153
  %74 = load i32, i32* %category, align 4
  %cmp166 = icmp uge i32 %74, 19
  br i1 %cmp166, label %if.then.168, label %if.else.169

if.then.168:                                      ; preds = %if.else.165
  br label %for.inc.210

if.else.169:                                      ; preds = %if.else.165
  %checked170 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 0
  %75 = load i32, i32* %checked170, align 4
  %76 = load i32, i32* %category, align 4
  %shl171 = shl i32 1, %76
  %and172 = and i32 %75, %shl171
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %if.then.174, label %if.else.184

if.then.174:                                      ; preds = %if.else.169
  %77 = load i8, i8* %highest.addr, align 1
  %tobool175 = trunc i8 %77 to i1
  br i1 %tobool175, label %land.lhs.true.177, label %if.end.183

land.lhs.true.177:                                ; preds = %if.then.174
  %found178 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %78 = load i32, i32* %found178, align 4
  %79 = load i32, i32* %category, align 4
  %shl179 = shl i32 1, %79
  %and180 = and i32 %78, %shl179
  %tobool181 = icmp ne i32 %and180, 0
  br i1 %tobool181, label %if.then.182, label %if.end.183

if.then.182:                                      ; preds = %land.lhs.true.177
  br label %for.end.212

if.end.183:                                       ; preds = %land.lhs.true.177, %if.then.174
  br label %if.end.207

if.else.184:                                      ; preds = %if.else.169
  %80 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %detector = getelementptr inbounds %struct.coding_system, %struct.coding_system* %80, i32 0, i32 29
  %81 = load i1 (%struct.coding_system*, %struct.coding_detection_info*)*, i1 (%struct.coding_system*, %struct.coding_detection_info*)** %detector, align 8
  %call185 = call zeroext i1 %81(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info)
  br i1 %call185, label %land.lhs.true.187, label %if.end.206

land.lhs.true.187:                                ; preds = %if.else.184
  %82 = load i8, i8* %highest.addr, align 1
  %tobool188 = trunc i8 %82 to i1
  br i1 %tobool188, label %land.lhs.true.190, label %if.end.206

land.lhs.true.190:                                ; preds = %land.lhs.true.187
  %found191 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %83 = load i32, i32* %found191, align 4
  %84 = load i32, i32* %category, align 4
  %shl192 = shl i32 1, %84
  %and193 = and i32 %83, %shl192
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %if.then.195, label %if.end.206

if.then.195:                                      ; preds = %land.lhs.true.190
  %85 = load i32, i32* %category, align 4
  %cmp196 = icmp eq i32 %85, 9
  br i1 %cmp196, label %if.then.198, label %if.end.205

if.then.198:                                      ; preds = %if.then.195
  %found199 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %86 = load i32, i32* %found199, align 4
  %and200 = and i32 %86, 2048
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %if.then.202, label %if.else.203

if.then.202:                                      ; preds = %if.then.198
  store i32 11, i32* %category, align 4
  br label %if.end.204

if.else.203:                                      ; preds = %if.then.198
  store i32 10, i32* %category, align 4
  br label %if.end.204

if.end.204:                                       ; preds = %if.else.203, %if.then.202
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %if.then.195
  br label %for.end.212

if.end.206:                                       ; preds = %land.lhs.true.190, %land.lhs.true.187, %if.else.184
  br label %if.end.207

if.end.207:                                       ; preds = %if.end.206, %if.end.183
  br label %if.end.208

if.end.208:                                       ; preds = %if.end.207
  br label %if.end.209

if.end.209:                                       ; preds = %if.end.208, %if.then.161
  br label %for.inc.210

for.inc.210:                                      ; preds = %if.end.209, %if.then.168
  %87 = load i32, i32* %i, align 4
  %inc211 = add nsw i32 %87, 1
  store i32 %inc211, i32* %i, align 4
  br label %for.cond.150

for.end.212:                                      ; preds = %if.end.205, %if.then.182, %for.cond.150
  br label %if.end.213

if.end.213:                                       ; preds = %for.end.212, %for.end.129
  br label %if.end.214

if.end.214:                                       ; preds = %if.end.213, %lor.lhs.false.108
  %rejected215 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %88 = load i32, i32* %rejected215, align 4
  %and216 = and i32 %88, 524287
  %cmp217 = icmp eq i32 %and216, 524287
  br i1 %cmp217, label %if.then.222, label %lor.lhs.false.219

lor.lhs.false.219:                                ; preds = %if.end.214
  %89 = load i8, i8* %null_byte_found, align 1
  %tobool220 = trunc i8 %89 to i1
  br i1 %tobool220, label %if.then.222, label %if.else.229

if.then.222:                                      ; preds = %lor.lhs.false.219, %if.end.214
  %found223 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  store i32 524288, i32* %found223, align 4
  %90 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call224 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %90)
  %call225 = call i64 @builtin_lisp_symbol(i32 702)
  %call226 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call224, i64 %call225, i64* null)
  store i64 %call226, i64* %id, align 8
  %91 = load i64, i64* %id, align 8
  %shl227 = shl i64 %91, 2
  %add = add i64 %shl227, 2
  %call228 = call i64 @list1(i64 %add)
  store i64 %call228, i64* %val, align 8
  br label %if.end.336

if.else.229:                                      ; preds = %lor.lhs.false.219
  %rejected230 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %92 = load i32, i32* %rejected230, align 4
  %tobool231 = icmp ne i32 %92, 0
  br i1 %tobool231, label %if.else.240, label %land.lhs.true.232

land.lhs.true.232:                                ; preds = %if.else.229
  %found233 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %93 = load i32, i32* %found233, align 4
  %tobool234 = icmp ne i32 %93, 0
  br i1 %tobool234, label %if.else.240, label %if.then.235

if.then.235:                                      ; preds = %land.lhs.true.232
  %found236 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  store i32 524287, i32* %found236, align 4
  %94 = load i64, i64* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 20, i32 0), align 8
  store i64 %94, i64* %id, align 8
  %95 = load i64, i64* %id, align 8
  %shl237 = shl i64 %95, 2
  %add238 = add i64 %shl237, 2
  %call239 = call i64 @list1(i64 %add238)
  store i64 %call239, i64* %val, align 8
  br label %if.end.335

if.else.240:                                      ; preds = %land.lhs.true.232, %if.else.229
  %96 = load i8, i8* %highest.addr, align 1
  %tobool241 = trunc i8 %96 to i1
  br i1 %tobool241, label %if.then.242, label %if.else.281

if.then.242:                                      ; preds = %if.else.240
  %found243 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %97 = load i32, i32* %found243, align 4
  %tobool244 = icmp ne i32 %97, 0
  br i1 %tobool244, label %if.then.245, label %if.else.252

if.then.245:                                      ; preds = %if.then.242
  %98 = load i32, i32* %category, align 4
  %shl246 = shl i32 1, %98
  %found247 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  store i32 %shl246, i32* %found247, align 4
  %99 = load %struct.coding_system*, %struct.coding_system** %this, align 8
  %id248 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %99, i32 0, i32 0
  %100 = load i64, i64* %id248, align 8
  %shl249 = shl i64 %100, 2
  %add250 = add i64 %shl249, 2
  %call251 = call i64 @list1(i64 %add250)
  store i64 %call251, i64* %val, align 8
  br label %if.end.280

if.else.252:                                      ; preds = %if.then.242
  store i32 0, i32* %i, align 4
  br label %for.cond.253

for.cond.253:                                     ; preds = %for.inc.277, %if.else.252
  %101 = load i32, i32* %i, align 4
  %cmp254 = icmp slt i32 %101, 19
  br i1 %cmp254, label %for.body.256, label %for.end.279

for.body.256:                                     ; preds = %for.cond.253
  %rejected257 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %102 = load i32, i32* %rejected257, align 4
  %103 = load i32, i32* %i, align 4
  %idxprom258 = sext i32 %103 to i64
  %arrayidx259 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom258
  %104 = load i32, i32* %arrayidx259, align 4
  %shl260 = shl i32 1, %104
  %and261 = and i32 %102, %shl260
  %tobool262 = icmp ne i32 %and261, 0
  br i1 %tobool262, label %if.end.276, label %if.then.263

if.then.263:                                      ; preds = %for.body.256
  %105 = load i32, i32* %i, align 4
  %idxprom264 = sext i32 %105 to i64
  %arrayidx265 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom264
  %106 = load i32, i32* %arrayidx265, align 4
  %shl266 = shl i32 1, %106
  %found267 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  store i32 %shl266, i32* %found267, align 4
  %107 = load i32, i32* %i, align 4
  %idxprom268 = sext i32 %107 to i64
  %arrayidx269 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom268
  %108 = load i32, i32* %arrayidx269, align 4
  %idxprom270 = zext i32 %108 to i64
  %arrayidx271 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom270
  %id272 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx271, i32 0, i32 0
  %109 = load i64, i64* %id272, align 8
  store i64 %109, i64* %id, align 8
  %110 = load i64, i64* %id, align 8
  %shl273 = shl i64 %110, 2
  %add274 = add i64 %shl273, 2
  %call275 = call i64 @list1(i64 %add274)
  store i64 %call275, i64* %val, align 8
  br label %for.end.279

if.end.276:                                       ; preds = %for.body.256
  br label %for.inc.277

for.inc.277:                                      ; preds = %if.end.276
  %111 = load i32, i32* %i, align 4
  %inc278 = add nsw i32 %111, 1
  store i32 %inc278, i32* %i, align 4
  br label %for.cond.253

for.end.279:                                      ; preds = %if.then.263, %for.cond.253
  br label %if.end.280

if.end.280:                                       ; preds = %for.end.279, %if.then.245
  br label %if.end.334

if.else.281:                                      ; preds = %if.else.240
  %rejected282 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %112 = load i32, i32* %rejected282, align 4
  %found283 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %113 = load i32, i32* %found283, align 4
  %or284 = or i32 %112, %113
  store i32 %or284, i32* %mask, align 4
  store i32 0, i32* %found285, align 4
  store i32 18, i32* %i, align 4
  br label %for.cond.286

for.cond.286:                                     ; preds = %for.inc.309, %if.else.281
  %114 = load i32, i32* %i, align 4
  %cmp287 = icmp sge i32 %114, 0
  br i1 %cmp287, label %for.body.289, label %for.end.310

for.body.289:                                     ; preds = %for.cond.286
  %115 = load i32, i32* %i, align 4
  %idxprom290 = sext i32 %115 to i64
  %arrayidx291 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom290
  %116 = load i32, i32* %arrayidx291, align 4
  store i32 %116, i32* %category, align 4
  %117 = load i32, i32* %mask, align 4
  %118 = load i32, i32* %category, align 4
  %shl292 = shl i32 1, %118
  %and293 = and i32 %117, %shl292
  %tobool294 = icmp ne i32 %and293, 0
  br i1 %tobool294, label %if.end.308, label %if.then.295

if.then.295:                                      ; preds = %for.body.289
  %119 = load i32, i32* %category, align 4
  %shl296 = shl i32 1, %119
  %120 = load i32, i32* %found285, align 4
  %or297 = or i32 %120, %shl296
  store i32 %or297, i32* %found285, align 4
  %121 = load i32, i32* %category, align 4
  %idxprom298 = zext i32 %121 to i64
  %arrayidx299 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom298
  %id300 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx299, i32 0, i32 0
  %122 = load i64, i64* %id300, align 8
  store i64 %122, i64* %id, align 8
  %123 = load i64, i64* %id, align 8
  %cmp301 = icmp sge i64 %123, 0
  br i1 %cmp301, label %if.then.303, label %if.end.307

if.then.303:                                      ; preds = %if.then.295
  %124 = load i64, i64* %id, align 8
  %shl304 = shl i64 %124, 2
  %add305 = add i64 %shl304, 2
  %call306 = call i64 @list1(i64 %add305)
  store i64 %call306, i64* %val, align 8
  br label %if.end.307

if.end.307:                                       ; preds = %if.then.303, %if.then.295
  br label %if.end.308

if.end.308:                                       ; preds = %if.end.307, %for.body.289
  br label %for.inc.309

for.inc.309:                                      ; preds = %if.end.308
  %125 = load i32, i32* %i, align 4
  %dec = add nsw i32 %125, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.286

for.end.310:                                      ; preds = %for.cond.286
  store i32 18, i32* %i, align 4
  br label %for.cond.311

for.cond.311:                                     ; preds = %for.inc.329, %for.end.310
  %126 = load i32, i32* %i, align 4
  %cmp312 = icmp sge i32 %126, 0
  br i1 %cmp312, label %for.body.314, label %for.end.331

for.body.314:                                     ; preds = %for.cond.311
  %127 = load i32, i32* %i, align 4
  %idxprom315 = sext i32 %127 to i64
  %arrayidx316 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom315
  %128 = load i32, i32* %arrayidx316, align 4
  store i32 %128, i32* %category, align 4
  %found317 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %129 = load i32, i32* %found317, align 4
  %130 = load i32, i32* %category, align 4
  %shl318 = shl i32 1, %130
  %and319 = and i32 %129, %shl318
  %tobool320 = icmp ne i32 %and319, 0
  br i1 %tobool320, label %if.then.321, label %if.end.328

if.then.321:                                      ; preds = %for.body.314
  %131 = load i32, i32* %category, align 4
  %idxprom322 = zext i32 %131 to i64
  %arrayidx323 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom322
  %id324 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx323, i32 0, i32 0
  %132 = load i64, i64* %id324, align 8
  store i64 %132, i64* %id, align 8
  %133 = load i64, i64* %id, align 8
  %shl325 = shl i64 %133, 2
  %add326 = add i64 %shl325, 2
  %134 = load i64, i64* %val, align 8
  %call327 = call i64 @Fcons(i64 %add326, i64 %134)
  store i64 %call327, i64* %val, align 8
  br label %if.end.328

if.end.328:                                       ; preds = %if.then.321, %for.body.314
  br label %for.inc.329

for.inc.329:                                      ; preds = %if.end.328
  %135 = load i32, i32* %i, align 4
  %dec330 = add nsw i32 %135, -1
  store i32 %dec330, i32* %i, align 4
  br label %for.cond.311

for.end.331:                                      ; preds = %for.cond.311
  %136 = load i32, i32* %found285, align 4
  %found332 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %137 = load i32, i32* %found332, align 4
  %or333 = or i32 %137, %136
  store i32 %or333, i32* %found332, align 4
  br label %if.end.334

if.end.334:                                       ; preds = %for.end.331, %if.end.280
  br label %if.end.335

if.end.335:                                       ; preds = %if.end.334, %if.then.235
  br label %if.end.336

if.end.336:                                       ; preds = %if.end.335, %if.then.222
  br label %if.end.396

if.else.337:                                      ; preds = %if.end
  %138 = load i32, i32* %base_category, align 4
  %cmp338 = icmp eq i32 %138, 6
  br i1 %cmp338, label %if.then.340, label %if.else.355

if.then.340:                                      ; preds = %if.else.337
  %call341 = call zeroext i1 @detect_coding_utf_8(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info)
  br i1 %call341, label %if.then.342, label %if.end.354

if.then.342:                                      ; preds = %if.then.340
  %found344 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %139 = load i32, i32* %found344, align 4
  %and345 = and i32 %139, 256
  %tobool346 = icmp ne i32 %and345, 0
  br i1 %tobool346, label %if.then.347, label %if.else.348

if.then.347:                                      ; preds = %if.then.342
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 8), %struct.coding_system** %this343, align 8
  br label %if.end.349

if.else.348:                                      ; preds = %if.then.342
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 7), %struct.coding_system** %this343, align 8
  br label %if.end.349

if.end.349:                                       ; preds = %if.else.348, %if.then.347
  %140 = load %struct.coding_system*, %struct.coding_system** %this343, align 8
  %id350 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %140, i32 0, i32 0
  %141 = load i64, i64* %id350, align 8
  %shl351 = shl i64 %141, 2
  %add352 = add i64 %shl351, 2
  %call353 = call i64 @list1(i64 %add352)
  store i64 %call353, i64* %val, align 8
  br label %if.end.354

if.end.354:                                       ; preds = %if.end.349, %if.then.340
  br label %if.end.395

if.else.355:                                      ; preds = %if.else.337
  %142 = load i32, i32* %base_category, align 4
  %cmp356 = icmp eq i32 %142, 9
  br i1 %cmp356, label %if.then.358, label %if.else.385

if.then.358:                                      ; preds = %if.else.355
  %call359 = call zeroext i1 @detect_coding_utf_16(%struct.coding_system* %coding, %struct.coding_detection_info* %detect_info)
  br i1 %call359, label %if.then.360, label %if.end.384

if.then.360:                                      ; preds = %if.then.358
  %found362 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %143 = load i32, i32* %found362, align 4
  %and363 = and i32 %143, 2048
  %tobool364 = icmp ne i32 %and363, 0
  br i1 %tobool364, label %if.then.365, label %if.else.366

if.then.365:                                      ; preds = %if.then.360
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 11), %struct.coding_system** %this361, align 8
  br label %if.end.379

if.else.366:                                      ; preds = %if.then.360
  %found367 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %144 = load i32, i32* %found367, align 4
  %and368 = and i32 %144, 1024
  %tobool369 = icmp ne i32 %and368, 0
  br i1 %tobool369, label %if.then.370, label %if.else.371

if.then.370:                                      ; preds = %if.else.366
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 10), %struct.coding_system** %this361, align 8
  br label %if.end.378

if.else.371:                                      ; preds = %if.else.366
  %rejected372 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 2
  %145 = load i32, i32* %rejected372, align 4
  %and373 = and i32 %145, 8192
  %tobool374 = icmp ne i32 %and373, 0
  br i1 %tobool374, label %if.then.375, label %if.else.376

if.then.375:                                      ; preds = %if.else.371
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 12), %struct.coding_system** %this361, align 8
  br label %if.end.377

if.else.376:                                      ; preds = %if.else.371
  store %struct.coding_system* getelementptr inbounds ([21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 13), %struct.coding_system** %this361, align 8
  br label %if.end.377

if.end.377:                                       ; preds = %if.else.376, %if.then.375
  br label %if.end.378

if.end.378:                                       ; preds = %if.end.377, %if.then.370
  br label %if.end.379

if.end.379:                                       ; preds = %if.end.378, %if.then.365
  %146 = load %struct.coding_system*, %struct.coding_system** %this361, align 8
  %id380 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %146, i32 0, i32 0
  %147 = load i64, i64* %id380, align 8
  %shl381 = shl i64 %147, 2
  %add382 = add i64 %shl381, 2
  %call383 = call i64 @list1(i64 %add382)
  store i64 %call383, i64* %val, align 8
  br label %if.end.384

if.end.384:                                       ; preds = %if.end.379, %if.then.358
  br label %if.end.394

if.else.385:                                      ; preds = %if.else.355
  %148 = load i64, i64* %attrs, align 8
  %call386 = call i64 @AREF(i64 %148, i64 14)
  %shr387 = ashr i64 %call386, 2
  %sh_prom = trunc i64 %shr387 to i32
  %shl388 = shl i32 1, %sh_prom
  %found389 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  store i32 %shl388, i32* %found389, align 4
  %id390 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 0
  %149 = load i64, i64* %id390, align 8
  %shl391 = shl i64 %149, 2
  %add392 = add i64 %shl391, 2
  %call393 = call i64 @list1(i64 %add392)
  store i64 %call393, i64* %val, align 8
  br label %if.end.394

if.end.394:                                       ; preds = %if.else.385, %if.end.384
  br label %if.end.395

if.end.395:                                       ; preds = %if.end.394, %if.end.354
  br label %if.end.396

if.end.396:                                       ; preds = %if.end.395, %if.end.336
  store i32 -1, i32* %normal_eol, align 4
  store i32 -1, i32* %utf_16_be_eol, align 4
  store i32 -1, i32* %utf_16_le_eol, align 4
  %150 = load i64, i64* %eol_type, align 8
  %call397 = call zeroext i1 @VECTORP(i64 %150)
  br i1 %call397, label %if.then.398, label %if.else.424

if.then.398:                                      ; preds = %if.end.396
  %found399 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %151 = load i32, i32* %found399, align 4
  %and400 = and i32 %151, -15873
  %tobool401 = icmp ne i32 %and400, 0
  br i1 %tobool401, label %if.then.402, label %if.end.409

if.then.402:                                      ; preds = %if.then.398
  %152 = load i8, i8* %null_byte_found, align 1
  %tobool403 = trunc i8 %152 to i1
  br i1 %tobool403, label %if.then.404, label %if.else.405

if.then.404:                                      ; preds = %if.then.402
  store i32 1, i32* %normal_eol, align 4
  br label %if.end.408

if.else.405:                                      ; preds = %if.then.402
  %source406 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 17
  %153 = load i8*, i8** %source406, align 8
  %154 = load i64, i64* %src_bytes.addr, align 8
  %call407 = call i32 @detect_eol(i8* %153, i64 %154, i32 19)
  store i32 %call407, i32* %normal_eol, align 4
  br label %if.end.408

if.end.408:                                       ; preds = %if.else.405, %if.then.404
  br label %if.end.409

if.end.409:                                       ; preds = %if.end.408, %if.then.398
  %found410 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %155 = load i32, i32* %found410, align 4
  %and411 = and i32 %155, 5120
  %tobool412 = icmp ne i32 %and411, 0
  br i1 %tobool412, label %if.then.413, label %if.end.416

if.then.413:                                      ; preds = %if.end.409
  %source414 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 17
  %156 = load i8*, i8** %source414, align 8
  %157 = load i64, i64* %src_bytes.addr, align 8
  %call415 = call i32 @detect_eol(i8* %156, i64 %157, i32 10)
  store i32 %call415, i32* %utf_16_be_eol, align 4
  br label %if.end.416

if.end.416:                                       ; preds = %if.then.413, %if.end.409
  %found417 = getelementptr inbounds %struct.coding_detection_info, %struct.coding_detection_info* %detect_info, i32 0, i32 1
  %158 = load i32, i32* %found417, align 4
  %and418 = and i32 %158, 10240
  %tobool419 = icmp ne i32 %and418, 0
  br i1 %tobool419, label %if.then.420, label %if.end.423

if.then.420:                                      ; preds = %if.end.416
  %source421 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 17
  %159 = load i8*, i8** %source421, align 8
  %160 = load i64, i64* %src_bytes.addr, align 8
  %call422 = call i32 @detect_eol(i8* %159, i64 %160, i32 11)
  store i32 %call422, i32* %utf_16_le_eol, align 4
  br label %if.end.423

if.end.423:                                       ; preds = %if.then.420, %if.end.416
  br label %if.end.437

if.else.424:                                      ; preds = %if.end.396
  %161 = load i64, i64* %eol_type, align 8
  %call425 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp426 = icmp eq i64 %161, %call425
  br i1 %cmp426, label %if.then.428, label %if.else.429

if.then.428:                                      ; preds = %if.else.424
  store i32 1, i32* %utf_16_le_eol, align 4
  store i32 1, i32* %utf_16_be_eol, align 4
  store i32 1, i32* %normal_eol, align 4
  br label %if.end.436

if.else.429:                                      ; preds = %if.else.424
  %162 = load i64, i64* %eol_type, align 8
  %call430 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp431 = icmp eq i64 %162, %call430
  br i1 %cmp431, label %if.then.433, label %if.else.434

if.then.433:                                      ; preds = %if.else.429
  store i32 4, i32* %utf_16_le_eol, align 4
  store i32 4, i32* %utf_16_be_eol, align 4
  store i32 4, i32* %normal_eol, align 4
  br label %if.end.435

if.else.434:                                      ; preds = %if.else.429
  store i32 2, i32* %utf_16_le_eol, align 4
  store i32 2, i32* %utf_16_be_eol, align 4
  store i32 2, i32* %normal_eol, align 4
  br label %if.end.435

if.end.435:                                       ; preds = %if.else.434, %if.then.433
  br label %if.end.436

if.end.436:                                       ; preds = %if.end.435, %if.then.428
  br label %if.end.437

if.end.437:                                       ; preds = %if.end.436, %if.end.423
  %163 = load i64, i64* %val, align 8
  store i64 %163, i64* %tail, align 8
  br label %for.cond.438

for.cond.438:                                     ; preds = %for.inc.497, %if.end.437
  %164 = load i64, i64* %tail, align 8
  %and439 = and i64 %164, 7
  %conv440 = trunc i64 %and439 to i32
  %cmp441 = icmp eq i32 %conv440, 3
  br i1 %cmp441, label %for.body.443, label %for.end.499

for.body.443:                                     ; preds = %for.cond.438
  %165 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %165, 3
  %166 = inttoptr i64 %sub to i8*
  %167 = bitcast i8* %166 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %167, i32 0, i32 0
  %168 = load i64, i64* %car, align 8
  %shr445 = ashr i64 %168, 2
  store i64 %shr445, i64* %id, align 8
  %169 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call446 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %169)
  %170 = load i64, i64* %id, align 8
  %call447 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call446, i64 %170)
  %call448 = call i64 @AREF(i64 %call447, i64 0)
  store i64 %call448, i64* %attrs, align 8
  %171 = load i64, i64* %attrs, align 8
  %call449 = call i64 @AREF(i64 %171, i64 14)
  %shr450 = ashr i64 %call449, 2
  %conv451 = trunc i64 %shr450 to i32
  store i32 %conv451, i32* %category444, align 4
  %172 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call452 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %172)
  %173 = load i64, i64* %id, align 8
  %call453 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call452, i64 %173)
  %call454 = call i64 @AREF(i64 %call453, i64 2)
  store i64 %call454, i64* %eol_type, align 8
  %174 = load i64, i64* %eol_type, align 8
  %call455 = call zeroext i1 @VECTORP(i64 %174)
  br i1 %call455, label %if.then.456, label %if.else.493

if.then.456:                                      ; preds = %for.body.443
  %175 = load i32, i32* %category444, align 4
  %cmp457 = icmp eq i32 %175, 10
  br i1 %cmp457, label %if.then.462, label %lor.lhs.false.459

lor.lhs.false.459:                                ; preds = %if.then.456
  %176 = load i32, i32* %category444, align 4
  %cmp460 = icmp eq i32 %176, 12
  br i1 %cmp460, label %if.then.462, label %if.else.463

if.then.462:                                      ; preds = %lor.lhs.false.459, %if.then.456
  %177 = load i32, i32* %utf_16_be_eol, align 4
  store i32 %177, i32* %this_eol, align 4
  br label %if.end.472

if.else.463:                                      ; preds = %lor.lhs.false.459
  %178 = load i32, i32* %category444, align 4
  %cmp464 = icmp eq i32 %178, 11
  br i1 %cmp464, label %if.then.469, label %lor.lhs.false.466

lor.lhs.false.466:                                ; preds = %if.else.463
  %179 = load i32, i32* %category444, align 4
  %cmp467 = icmp eq i32 %179, 13
  br i1 %cmp467, label %if.then.469, label %if.else.470

if.then.469:                                      ; preds = %lor.lhs.false.466, %if.else.463
  %180 = load i32, i32* %utf_16_le_eol, align 4
  store i32 %180, i32* %this_eol, align 4
  br label %if.end.471

if.else.470:                                      ; preds = %lor.lhs.false.466
  %181 = load i32, i32* %normal_eol, align 4
  store i32 %181, i32* %this_eol, align 4
  br label %if.end.471

if.end.471:                                       ; preds = %if.else.470, %if.then.469
  br label %if.end.472

if.end.472:                                       ; preds = %if.end.471, %if.then.462
  %182 = load i32, i32* %this_eol, align 4
  %cmp473 = icmp eq i32 %182, 1
  br i1 %cmp473, label %if.then.475, label %if.else.477

if.then.475:                                      ; preds = %if.end.472
  %183 = load i64, i64* %tail, align 8
  %184 = load i64, i64* %eol_type, align 8
  %call476 = call i64 @AREF(i64 %184, i64 0)
  call void @XSETCAR(i64 %183, i64 %call476)
  br label %if.end.492

if.else.477:                                      ; preds = %if.end.472
  %185 = load i32, i32* %this_eol, align 4
  %cmp478 = icmp eq i32 %185, 4
  br i1 %cmp478, label %if.then.480, label %if.else.482

if.then.480:                                      ; preds = %if.else.477
  %186 = load i64, i64* %tail, align 8
  %187 = load i64, i64* %eol_type, align 8
  %call481 = call i64 @AREF(i64 %187, i64 1)
  call void @XSETCAR(i64 %186, i64 %call481)
  br label %if.end.491

if.else.482:                                      ; preds = %if.else.477
  %188 = load i32, i32* %this_eol, align 4
  %cmp483 = icmp eq i32 %188, 2
  br i1 %cmp483, label %if.then.485, label %if.else.487

if.then.485:                                      ; preds = %if.else.482
  %189 = load i64, i64* %tail, align 8
  %190 = load i64, i64* %eol_type, align 8
  %call486 = call i64 @AREF(i64 %190, i64 2)
  call void @XSETCAR(i64 %189, i64 %call486)
  br label %if.end.490

if.else.487:                                      ; preds = %if.else.482
  %191 = load i64, i64* %tail, align 8
  %192 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call488 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %192)
  %193 = load i64, i64* %id, align 8
  %call489 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call488, i64 %193)
  call void @XSETCAR(i64 %191, i64 %call489)
  br label %if.end.490

if.end.490:                                       ; preds = %if.else.487, %if.then.485
  br label %if.end.491

if.end.491:                                       ; preds = %if.end.490, %if.then.480
  br label %if.end.492

if.end.492:                                       ; preds = %if.end.491, %if.then.475
  br label %if.end.496

if.else.493:                                      ; preds = %for.body.443
  %194 = load i64, i64* %tail, align 8
  %195 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call494 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %195)
  %196 = load i64, i64* %id, align 8
  %call495 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call494, i64 %196)
  call void @XSETCAR(i64 %194, i64 %call495)
  br label %if.end.496

if.end.496:                                       ; preds = %if.else.493, %if.end.492
  br label %for.inc.497

for.inc.497:                                      ; preds = %if.end.496
  %197 = load i64, i64* %tail, align 8
  %sub498 = sub nsw i64 %197, 3
  %198 = inttoptr i64 %sub498 to i8*
  %199 = bitcast i8* %198 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %199, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %200 = load i64, i64* %cdr, align 8
  store i64 %200, i64* %tail, align 8
  br label %for.cond.438

for.end.499:                                      ; preds = %for.cond.438
  %201 = load i8, i8* %highest.addr, align 1
  %tobool500 = trunc i8 %201 to i1
  br i1 %tobool500, label %cond.true, label %cond.false.510

cond.true:                                        ; preds = %for.end.499
  %202 = load i64, i64* %val, align 8
  %and502 = and i64 %202, 7
  %conv503 = trunc i64 %and502 to i32
  %cmp504 = icmp eq i32 %conv503, 3
  br i1 %cmp504, label %cond.true.506, label %cond.false

cond.true.506:                                    ; preds = %cond.true
  %203 = load i64, i64* %val, align 8
  %sub507 = sub nsw i64 %203, 3
  %204 = inttoptr i64 %sub507 to i8*
  %205 = bitcast i8* %204 to %struct.Lisp_Cons*
  %car508 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %205, i32 0, i32 0
  %206 = load i64, i64* %car508, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %call509 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.506
  %cond = phi i64 [ %206, %cond.true.506 ], [ %call509, %cond.false ]
  br label %cond.end.511

cond.false.510:                                   ; preds = %for.end.499
  %207 = load i64, i64* %val, align 8
  br label %cond.end.511

cond.end.511:                                     ; preds = %cond.false.510, %cond.end
  %cond512 = phi i64 [ %cond, %cond.end ], [ %207, %cond.false.510 ]
  ret i64 %cond512
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @inhibit_flag(i32 %encoded_flag, i1 zeroext %var) #0 {
entry:
  %encoded_flag.addr = alloca i32, align 4
  %var.addr = alloca i8, align 1
  store i32 %encoded_flag, i32* %encoded_flag.addr, align 4
  %frombool = zext i1 %var to i8
  store i8 %frombool, i8* %var.addr, align 1
  %0 = load i32, i32* %encoded_flag.addr, align 4
  %1 = load i8, i8* %var.addr, align 1
  %tobool = trunc i8 %1 to i1
  %conv = zext i1 %tobool to i32
  %add = add nsw i32 %0, %conv
  %cmp = icmp slt i32 0, %add
  ret i1 %cmp
}

declare i64 @list1(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @detect_eol(i8* %source, i64 %src_bytes, i32 %category) #0 {
entry:
  %source.addr = alloca i8*, align 8
  %src_bytes.addr = alloca i64, align 8
  %category.addr = alloca i32, align 4
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %c = alloca i8, align 1
  %total = alloca i32, align 4
  %eol_seen = alloca i32, align 4
  %msb = alloca i8, align 1
  %lsb = alloca i8, align 1
  %this_eol = alloca i32, align 4
  %this_eol88 = alloca i32, align 4
  store i8* %source, i8** %source.addr, align 8
  store i64 %src_bytes, i64* %src_bytes.addr, align 8
  store i32 %category, i32* %category.addr, align 4
  %0 = load i8*, i8** %source.addr, align 8
  store i8* %0, i8** %src, align 8
  %1 = load i8*, i8** %src, align 8
  %2 = load i64, i64* %src_bytes.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %add.ptr, i8** %src_end, align 8
  store i32 0, i32* %total, align 4
  store i32 0, i32* %eol_seen, align 4
  %3 = load i32, i32* %category.addr, align 4
  %shl = shl i32 1, %3
  %and = and i32 %shl, 15872
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else.75

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %category.addr, align 4
  %cmp = icmp eq i32 %4, 15
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %msb, align 1
  %5 = load i8, i8* %msb, align 1
  %tobool1 = trunc i8 %5 to i1
  %lnot = xor i1 %tobool1, true
  %frombool2 = zext i1 %lnot to i8
  store i8 %frombool2, i8* %lsb, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end.73, %if.then
  %6 = load i8*, i8** %src, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %6, i64 1
  %7 = load i8*, i8** %src_end, align 8
  %cmp4 = icmp ult i8* %add.ptr3, %7
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i8, i8* %lsb, align 1
  %tobool5 = trunc i8 %8 to i1
  %idxprom = zext i1 %tobool5 to i64
  %9 = load i8*, i8** %src, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  store i8 %10, i8* %c, align 1
  %11 = load i8, i8* %msb, align 1
  %tobool6 = trunc i8 %11 to i1
  %idxprom7 = zext i1 %tobool6 to i64
  %12 = load i8*, i8** %src, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 %idxprom7
  %13 = load i8, i8* %arrayidx8, align 1
  %conv = zext i8 %13 to i32
  %cmp9 = icmp eq i32 %conv, 0
  br i1 %cmp9, label %land.lhs.true, label %if.end.73

land.lhs.true:                                    ; preds = %while.body
  %14 = load i8, i8* %c, align 1
  %conv11 = zext i8 %14 to i32
  %cmp12 = icmp eq i32 %conv11, 10
  br i1 %cmp12, label %if.then.17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %15 = load i8, i8* %c, align 1
  %conv14 = zext i8 %15 to i32
  %cmp15 = icmp eq i32 %conv14, 13
  br i1 %cmp15, label %if.then.17, label %if.end.73

if.then.17:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %16 = load i8, i8* %c, align 1
  %conv18 = zext i8 %16 to i32
  %cmp19 = icmp eq i32 %conv18, 10
  br i1 %cmp19, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.then.17
  store i32 1, i32* %this_eol, align 4
  br label %if.end.45

if.else:                                          ; preds = %if.then.17
  %17 = load i8*, i8** %src, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %17, i64 3
  %18 = load i8*, i8** %src_end, align 8
  %cmp23 = icmp uge i8* %add.ptr22, %18
  br i1 %cmp23, label %if.then.42, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %if.else
  %19 = load i8, i8* %msb, align 1
  %tobool26 = trunc i8 %19 to i1
  %conv27 = zext i1 %tobool26 to i32
  %add = add nsw i32 %conv27, 2
  %idxprom28 = sext i32 %add to i64
  %20 = load i8*, i8** %src, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %20, i64 %idxprom28
  %21 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %21 to i32
  %cmp31 = icmp ne i32 %conv30, 0
  br i1 %cmp31, label %if.then.42, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %lor.lhs.false.25
  %22 = load i8, i8* %lsb, align 1
  %tobool34 = trunc i8 %22 to i1
  %conv35 = zext i1 %tobool34 to i32
  %add36 = add nsw i32 %conv35, 2
  %idxprom37 = sext i32 %add36 to i64
  %23 = load i8*, i8** %src, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %23, i64 %idxprom37
  %24 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %24 to i32
  %cmp40 = icmp ne i32 %conv39, 10
  br i1 %cmp40, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %lor.lhs.false.33, %lor.lhs.false.25, %if.else
  store i32 2, i32* %this_eol, align 4
  br label %if.end

if.else.43:                                       ; preds = %lor.lhs.false.33
  store i32 4, i32* %this_eol, align 4
  %25 = load i8*, i8** %src, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %25, i64 2
  store i8* %add.ptr44, i8** %src, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.43, %if.then.42
  br label %if.end.45

if.end.45:                                        ; preds = %if.end, %if.then.21
  %26 = load i32, i32* %eol_seen, align 4
  %cmp46 = icmp eq i32 %26, 0
  br i1 %cmp46, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %if.end.45
  %27 = load i32, i32* %this_eol, align 4
  store i32 %27, i32* %eol_seen, align 4
  br label %if.end.68

if.else.49:                                       ; preds = %if.end.45
  %28 = load i32, i32* %eol_seen, align 4
  %29 = load i32, i32* %this_eol, align 4
  %cmp50 = icmp ne i32 %28, %29
  br i1 %cmp50, label %if.then.52, label %if.end.67

if.then.52:                                       ; preds = %if.else.49
  %30 = load i32, i32* %eol_seen, align 4
  %cmp53 = icmp eq i32 %30, 2
  br i1 %cmp53, label %land.lhs.true.55, label %lor.lhs.false.58

land.lhs.true.55:                                 ; preds = %if.then.52
  %31 = load i32, i32* %this_eol, align 4
  %cmp56 = icmp eq i32 %31, 4
  br i1 %cmp56, label %if.then.64, label %lor.lhs.false.58

lor.lhs.false.58:                                 ; preds = %land.lhs.true.55, %if.then.52
  %32 = load i32, i32* %eol_seen, align 4
  %cmp59 = icmp eq i32 %32, 4
  br i1 %cmp59, label %land.lhs.true.61, label %if.else.65

land.lhs.true.61:                                 ; preds = %lor.lhs.false.58
  %33 = load i32, i32* %this_eol, align 4
  %cmp62 = icmp eq i32 %33, 2
  br i1 %cmp62, label %if.then.64, label %if.else.65

if.then.64:                                       ; preds = %land.lhs.true.61, %land.lhs.true.55
  store i32 4, i32* %eol_seen, align 4
  br label %if.end.66

if.else.65:                                       ; preds = %land.lhs.true.61, %lor.lhs.false.58
  store i32 1, i32* %eol_seen, align 4
  br label %while.end

if.end.66:                                        ; preds = %if.then.64
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.else.49
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %if.then.48
  %34 = load i32, i32* %total, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %total, align 4
  %cmp69 = icmp eq i32 %inc, 3
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.68
  br label %while.end

if.end.72:                                        ; preds = %if.end.68
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %lor.lhs.false, %while.body
  %35 = load i8*, i8** %src, align 8
  %add.ptr74 = getelementptr inbounds i8, i8* %35, i64 2
  store i8* %add.ptr74, i8** %src, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then.71, %if.else.65, %while.cond
  br label %if.end.135

if.else.75:                                       ; preds = %entry
  br label %while.cond.76

while.cond.76:                                    ; preds = %if.end.133, %if.else.75
  %36 = load i8*, i8** %src, align 8
  %37 = load i8*, i8** %src_end, align 8
  %cmp77 = icmp ult i8* %36, %37
  br i1 %cmp77, label %while.body.79, label %while.end.134

while.body.79:                                    ; preds = %while.cond.76
  %38 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %39 = load i8, i8* %38, align 1
  store i8 %39, i8* %c, align 1
  %40 = load i8, i8* %c, align 1
  %conv80 = zext i8 %40 to i32
  %cmp81 = icmp eq i32 %conv80, 10
  br i1 %cmp81, label %if.then.87, label %lor.lhs.false.83

lor.lhs.false.83:                                 ; preds = %while.body.79
  %41 = load i8, i8* %c, align 1
  %conv84 = zext i8 %41 to i32
  %cmp85 = icmp eq i32 %conv84, 13
  br i1 %cmp85, label %if.then.87, label %if.end.133

if.then.87:                                       ; preds = %lor.lhs.false.83, %while.body.79
  %42 = load i8, i8* %c, align 1
  %conv89 = zext i8 %42 to i32
  %cmp90 = icmp eq i32 %conv89, 10
  br i1 %cmp90, label %if.then.92, label %if.else.93

if.then.92:                                       ; preds = %if.then.87
  store i32 1, i32* %this_eol88, align 4
  br label %if.end.104

if.else.93:                                       ; preds = %if.then.87
  %43 = load i8*, i8** %src, align 8
  %44 = load i8*, i8** %src_end, align 8
  %cmp94 = icmp uge i8* %43, %44
  br i1 %cmp94, label %if.then.100, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %if.else.93
  %45 = load i8*, i8** %src, align 8
  %46 = load i8, i8* %45, align 1
  %conv97 = zext i8 %46 to i32
  %cmp98 = icmp ne i32 %conv97, 10
  br i1 %cmp98, label %if.then.100, label %if.else.101

if.then.100:                                      ; preds = %lor.lhs.false.96, %if.else.93
  store i32 2, i32* %this_eol88, align 4
  br label %if.end.103

if.else.101:                                      ; preds = %lor.lhs.false.96
  store i32 4, i32* %this_eol88, align 4
  %47 = load i8*, i8** %src, align 8
  %incdec.ptr102 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %incdec.ptr102, i8** %src, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.101, %if.then.100
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %if.then.92
  %48 = load i32, i32* %eol_seen, align 4
  %cmp105 = icmp eq i32 %48, 0
  br i1 %cmp105, label %if.then.107, label %if.else.108

if.then.107:                                      ; preds = %if.end.104
  %49 = load i32, i32* %this_eol88, align 4
  store i32 %49, i32* %eol_seen, align 4
  br label %if.end.127

if.else.108:                                      ; preds = %if.end.104
  %50 = load i32, i32* %eol_seen, align 4
  %51 = load i32, i32* %this_eol88, align 4
  %cmp109 = icmp ne i32 %50, %51
  br i1 %cmp109, label %if.then.111, label %if.end.126

if.then.111:                                      ; preds = %if.else.108
  %52 = load i32, i32* %eol_seen, align 4
  %cmp112 = icmp eq i32 %52, 2
  br i1 %cmp112, label %land.lhs.true.114, label %lor.lhs.false.117

land.lhs.true.114:                                ; preds = %if.then.111
  %53 = load i32, i32* %this_eol88, align 4
  %cmp115 = icmp eq i32 %53, 4
  br i1 %cmp115, label %if.then.123, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %land.lhs.true.114, %if.then.111
  %54 = load i32, i32* %eol_seen, align 4
  %cmp118 = icmp eq i32 %54, 4
  br i1 %cmp118, label %land.lhs.true.120, label %if.else.124

land.lhs.true.120:                                ; preds = %lor.lhs.false.117
  %55 = load i32, i32* %this_eol88, align 4
  %cmp121 = icmp eq i32 %55, 2
  br i1 %cmp121, label %if.then.123, label %if.else.124

if.then.123:                                      ; preds = %land.lhs.true.120, %land.lhs.true.114
  store i32 4, i32* %eol_seen, align 4
  br label %if.end.125

if.else.124:                                      ; preds = %land.lhs.true.120, %lor.lhs.false.117
  store i32 1, i32* %eol_seen, align 4
  br label %while.end.134

if.end.125:                                       ; preds = %if.then.123
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %if.else.108
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.then.107
  %56 = load i32, i32* %total, align 4
  %inc128 = add nsw i32 %56, 1
  store i32 %inc128, i32* %total, align 4
  %cmp129 = icmp eq i32 %inc128, 3
  br i1 %cmp129, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %if.end.127
  br label %while.end.134

if.end.132:                                       ; preds = %if.end.127
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %lor.lhs.false.83
  br label %while.cond.76

while.end.134:                                    ; preds = %if.then.131, %if.else.124, %while.cond.76
  br label %if.end.135

if.end.135:                                       ; preds = %while.end.134, %while.end
  %57 = load i32, i32* %eol_seen, align 4
  ret i32 %57
}

declare void @XSETCAR(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fdetect_coding_region(i64 %start, i64 %end, i64 %highest) #0 {
entry:
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %highest.addr = alloca i64, align 8
  %from = alloca i64, align 8
  %to = alloca i64, align 8
  %from_byte = alloca i64, align 8
  %to_byte = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %highest, i64* %highest.addr, align 8
  call void @validate_region(i64* %start.addr, i64* %end.addr)
  %0 = load i64, i64* %start.addr, align 8
  %shr = ashr i64 %0, 2
  store i64 %shr, i64* %from, align 8
  %1 = load i64, i64* %end.addr, align 8
  %shr1 = ashr i64 %1, 2
  store i64 %shr1, i64* %to, align 8
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %3 = load i64, i64* %from, align 8
  %call = call i64 @buf_charpos_to_bytepos(%struct.buffer* %2, i64 %3)
  store i64 %call, i64* %from_byte, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %5 = load i64, i64* %to, align 8
  %call2 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %4, i64 %5)
  store i64 %call2, i64* %to_byte, align 8
  %6 = load i64, i64* %from, align 8
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 73
  %8 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %8, i32 0, i32 1
  %9 = load i64, i64* %gpt, align 8
  %cmp = icmp slt i64 %6, %9
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %10 = load i64, i64* %to, align 8
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text3 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 73
  %12 = load %struct.buffer_text*, %struct.buffer_text** %text3, align 8
  %gpt4 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %12, i32 0, i32 1
  %13 = load i64, i64* %gpt4, align 8
  %cmp5 = icmp sge i64 %10, %13
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %14 = load i64, i64* %to, align 8
  %15 = load i64, i64* %to_byte, align 8
  call void @move_gap_both(i64 %14, i64 %15)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %16 = load i64, i64* %from_byte, align 8
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text6 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 73
  %18 = load %struct.buffer_text*, %struct.buffer_text** %text6, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %18, i32 0, i32 3
  %19 = load i64, i64* %gpt_byte, align 8
  %cmp7 = icmp sge i64 %16, %19
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text8 = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  %21 = load %struct.buffer_text*, %struct.buffer_text** %text8, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %21, i32 0, i32 5
  %22 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %22, %cond.true ], [ 0, %cond.false ]
  %23 = load i64, i64* %from_byte, align 8
  %add = add nsw i64 %cond, %23
  %24 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text9 = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 73
  %25 = load %struct.buffer_text*, %struct.buffer_text** %text9, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %25, i32 0, i32 0
  %26 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %add
  %add.ptr10 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %27 = load i64, i64* %to, align 8
  %28 = load i64, i64* %from, align 8
  %sub = sub nsw i64 %27, %28
  %29 = load i64, i64* %to_byte, align 8
  %30 = load i64, i64* %from_byte, align 8
  %sub11 = sub nsw i64 %29, %30
  %31 = load i64, i64* %highest.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %31, %call12
  %lnot = xor i1 %cmp13, true
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 39
  %33 = load i64, i64* %enable_multibyte_characters_, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %33, %call14
  %lnot16 = xor i1 %cmp15, true
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %call18 = call i64 @detect_coding_system(i8* %add.ptr10, i64 %sub, i64 %sub11, i1 zeroext %lnot, i1 zeroext %lnot16, i64 %call17)
  ret i64 %call18
}

declare void @validate_region(i64*, i64*) #1

declare i64 @buf_charpos_to_bytepos(%struct.buffer*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fdetect_coding_string(i64 %string, i64 %highest) #0 {
entry:
  %string.addr = alloca i64, align 8
  %highest.addr = alloca i64, align 8
  store i64 %string, i64* %string.addr, align 8
  store i64 %highest, i64* %highest.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %string.addr, align 8
  %call = call i8* @SDATA(i64 %1)
  %2 = load i64, i64* %string.addr, align 8
  %call1 = call i64 @SCHARS(i64 %2)
  %3 = load i64, i64* %string.addr, align 8
  %call2 = call i64 @SBYTES(i64 %3)
  %4 = load i64, i64* %highest.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call3
  %lnot = xor i1 %cmp, true
  %5 = load i64, i64* %string.addr, align 8
  %call4 = call zeroext i1 @STRING_MULTIBYTE(i64 %5)
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %call6 = call i64 @detect_coding_system(i8* %call, i64 %call1, i64 %call2, i1 zeroext %lnot, i1 zeroext %call4, i64 %call5)
  ret i64 %call6
}

declare void @CHECK_STRING(i64) #1

declare i64 @SBYTES(i64) #1

declare zeroext i1 @STRING_MULTIBYTE(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ffind_coding_systems_region_internal(i64 %start, i64 %end, i64 %exclude) #0 {
entry:
  %retval = alloca i64, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %exclude.addr = alloca i64, align 8
  %coding_attrs_list = alloca i64, align 8
  %safe_codings = alloca i64, align 8
  %start_byte = alloca i64, align 8
  %end_byte = alloca i64, align 8
  %p = alloca i8*, align 8
  %pbeg = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %c = alloca i32, align 4
  %tail = alloca i64, align 8
  %elt = alloca i64, align 8
  %work_table = alloca i64, align 8
  %attrs = alloca i64, align 8
  %p_offset = alloca i64, align 8
  %pend_offset = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %exclude, i64* %exclude.addr, align 8
  %0 = load i64, i64* %start.addr, align 8
  %call = call zeroext i1 @STRINGP(i64 %0)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %start.addr, align 8
  %call1 = call zeroext i1 @STRING_MULTIBYTE(i64 %1)
  br i1 %call1, label %lor.lhs.false, label %if.then.4

lor.lhs.false:                                    ; preds = %if.then
  %2 = load i64, i64* %start.addr, align 8
  %call2 = call i64 @SCHARS(i64 %2)
  %3 = load i64, i64* %start.addr, align 8
  %call3 = call i64 @SBYTES(i64 %3)
  %cmp = icmp eq i64 %call2, %call3
  br i1 %cmp, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %lor.lhs.false, %if.then
  %call5 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call5, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i64 0, i64* %start_byte, align 8
  %4 = load i64, i64* %start.addr, align 8
  %call6 = call i64 @SBYTES(i64 %4)
  store i64 %call6, i64* %end_byte, align 8
  br label %if.end.105

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %5 = load i64, i64* %start.addr, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp7 = icmp eq i32 %conv, 1
  br i1 %cmp7, label %land.lhs.true, label %if.else.15

land.lhs.true:                                    ; preds = %do.body
  %6 = load i64, i64* %start.addr, align 8
  %call9 = call i32 @XMISCTYPE(i64 %6)
  %cmp10 = icmp eq i32 %call9, 24236
  br i1 %cmp10, label %if.then.12, label %if.else.15

if.then.12:                                       ; preds = %land.lhs.true
  %7 = load i64, i64* %start.addr, align 8
  %call13 = call i64 @marker_position(i64 %7)
  %call14 = call i64 @make_natnum(i64 %call13)
  store i64 %call14, i64* %start.addr, align 8
  br label %if.end.22

if.else.15:                                       ; preds = %land.lhs.true, %do.body
  %8 = load i64, i64* %start.addr, align 8
  %and16 = and i64 %8, 7
  %conv17 = trunc i64 %and16 to i32
  %and18 = and i32 %conv17, -5
  %cmp19 = icmp eq i32 %and18, 2
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.15
  br label %cond.end

cond.false:                                       ; preds = %if.else.15
  %call21 = call i64 @builtin_lisp_symbol(i32 558)
  %9 = load i64, i64* %start.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call21, i64 %9) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %11, %cond.true
  br label %if.end.22

if.end.22:                                        ; preds = %cond.end, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.22
  br label %do.body.23

do.body.23:                                       ; preds = %do.end
  %12 = load i64, i64* %end.addr, align 8
  %and24 = and i64 %12, 7
  %conv25 = trunc i64 %and24 to i32
  %cmp26 = icmp eq i32 %conv25, 1
  br i1 %cmp26, label %land.lhs.true.28, label %if.else.35

land.lhs.true.28:                                 ; preds = %do.body.23
  %13 = load i64, i64* %end.addr, align 8
  %call29 = call i32 @XMISCTYPE(i64 %13)
  %cmp30 = icmp eq i32 %call29, 24236
  br i1 %cmp30, label %if.then.32, label %if.else.35

if.then.32:                                       ; preds = %land.lhs.true.28
  %14 = load i64, i64* %end.addr, align 8
  %call33 = call i64 @marker_position(i64 %14)
  %call34 = call i64 @make_natnum(i64 %call33)
  store i64 %call34, i64* %end.addr, align 8
  br label %if.end.45

if.else.35:                                       ; preds = %land.lhs.true.28, %do.body.23
  %15 = load i64, i64* %end.addr, align 8
  %and36 = and i64 %15, 7
  %conv37 = trunc i64 %and36 to i32
  %and38 = and i32 %conv37, -5
  %cmp39 = icmp eq i32 %and38, 2
  br i1 %cmp39, label %cond.true.41, label %cond.false.42

cond.true.41:                                     ; preds = %if.else.35
  br label %cond.end.44

cond.false.42:                                    ; preds = %if.else.35
  %call43 = call i64 @builtin_lisp_symbol(i32 558)
  %16 = load i64, i64* %end.addr, align 8
  %17 = call i64 @wrong_type_argument(i64 %call43, i64 %16) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.44

cond.end.44:                                      ; preds = %18, %cond.true.41
  br label %if.end.45

if.end.45:                                        ; preds = %cond.end.44, %if.then.32
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  %19 = load i64, i64* %start.addr, align 8
  %shr = ashr i64 %19, 2
  %cmp47 = icmp slt i64 %shr, 1
  br i1 %cmp47, label %if.then.58, label %lor.lhs.false.49

lor.lhs.false.49:                                 ; preds = %do.end.46
  %20 = load i64, i64* %end.addr, align 8
  %shr50 = ashr i64 %20, 2
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 73
  %22 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %22, i32 0, i32 2
  %23 = load i64, i64* %z, align 8
  %cmp51 = icmp sgt i64 %shr50, %23
  br i1 %cmp51, label %if.then.58, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %lor.lhs.false.49
  %24 = load i64, i64* %start.addr, align 8
  %shr54 = ashr i64 %24, 2
  %25 = load i64, i64* %end.addr, align 8
  %shr55 = ashr i64 %25, 2
  %cmp56 = icmp sgt i64 %shr54, %shr55
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %lor.lhs.false.53, %lor.lhs.false.49, %do.end.46
  %26 = load i64, i64* %start.addr, align 8
  %27 = load i64, i64* %end.addr, align 8
  call void @args_out_of_range(i64 %26, i64 %27) #6
  unreachable

if.end.59:                                        ; preds = %lor.lhs.false.53
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 39
  %29 = load i64, i64* %enable_multibyte_characters_, align 8
  %call60 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp61 = icmp eq i64 %29, %call60
  br i1 %cmp61, label %if.then.63, label %if.end.65

if.then.63:                                       ; preds = %if.end.59
  %call64 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call64, i64* %retval
  br label %return

if.end.65:                                        ; preds = %if.end.59
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %31 = load i64, i64* %start.addr, align 8
  %shr66 = ashr i64 %31, 2
  %call67 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %30, i64 %shr66)
  store i64 %call67, i64* %start_byte, align 8
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %33 = load i64, i64* %end.addr, align 8
  %shr68 = ashr i64 %33, 2
  %call69 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %32, i64 %shr68)
  store i64 %call69, i64* %end_byte, align 8
  %34 = load i64, i64* %end.addr, align 8
  %shr70 = ashr i64 %34, 2
  %35 = load i64, i64* %start.addr, align 8
  %shr71 = ashr i64 %35, 2
  %sub = sub nsw i64 %shr70, %shr71
  %36 = load i64, i64* %end_byte, align 8
  %37 = load i64, i64* %start_byte, align 8
  %sub72 = sub nsw i64 %36, %37
  %cmp73 = icmp eq i64 %sub, %sub72
  br i1 %cmp73, label %if.then.75, label %if.end.77

if.then.75:                                       ; preds = %if.end.65
  %call76 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call76, i64* %retval
  br label %return

if.end.77:                                        ; preds = %if.end.65
  %38 = load i64, i64* %start.addr, align 8
  %shr78 = ashr i64 %38, 2
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text79 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 73
  %40 = load %struct.buffer_text*, %struct.buffer_text** %text79, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %40, i32 0, i32 1
  %41 = load i64, i64* %gpt, align 8
  %cmp80 = icmp slt i64 %shr78, %41
  br i1 %cmp80, label %land.lhs.true.82, label %if.end.104

land.lhs.true.82:                                 ; preds = %if.end.77
  %42 = load i64, i64* %end.addr, align 8
  %shr83 = ashr i64 %42, 2
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text84 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 73
  %44 = load %struct.buffer_text*, %struct.buffer_text** %text84, align 8
  %gpt85 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %44, i32 0, i32 1
  %45 = load i64, i64* %gpt85, align 8
  %cmp86 = icmp sgt i64 %shr83, %45
  br i1 %cmp86, label %if.then.88, label %if.end.104

if.then.88:                                       ; preds = %land.lhs.true.82
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text89 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text89, align 8
  %gpt90 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 1
  %48 = load i64, i64* %gpt90, align 8
  %49 = load i64, i64* %start.addr, align 8
  %shr91 = ashr i64 %49, 2
  %sub92 = sub nsw i64 %48, %shr91
  %50 = load i64, i64* %end.addr, align 8
  %shr93 = ashr i64 %50, 2
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text94 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 73
  %52 = load %struct.buffer_text*, %struct.buffer_text** %text94, align 8
  %gpt95 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %52, i32 0, i32 1
  %53 = load i64, i64* %gpt95, align 8
  %sub96 = sub nsw i64 %shr93, %53
  %cmp97 = icmp slt i64 %sub92, %sub96
  br i1 %cmp97, label %if.then.99, label %if.else.101

if.then.99:                                       ; preds = %if.then.88
  %54 = load i64, i64* %start.addr, align 8
  %shr100 = ashr i64 %54, 2
  %55 = load i64, i64* %start_byte, align 8
  call void @move_gap_both(i64 %shr100, i64 %55)
  br label %if.end.103

if.else.101:                                      ; preds = %if.then.88
  %56 = load i64, i64* %end.addr, align 8
  %shr102 = ashr i64 %56, 2
  %57 = load i64, i64* %end_byte, align 8
  call void @move_gap_both(i64 %shr102, i64 %57)
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.101, %if.then.99
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %land.lhs.true.82, %if.end.77
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.end
  %call106 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call106, i64* %coding_attrs_list, align 8
  %58 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  store i64 %58, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.105
  %59 = load i64, i64* %tail, align 8
  %and107 = and i64 %59, 7
  %conv108 = trunc i64 %and107 to i32
  %cmp109 = icmp eq i32 %conv108, 3
  br i1 %cmp109, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %60 = load i64, i64* %exclude.addr, align 8
  %call111 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp112 = icmp eq i64 %60, %call111
  br i1 %cmp112, label %if.then.120, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %for.body
  %61 = load i64, i64* %tail, align 8
  %sub115 = sub nsw i64 %61, 3
  %62 = inttoptr i64 %sub115 to i8*
  %63 = bitcast i8* %62 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %63, i32 0, i32 0
  %64 = load i64, i64* %car, align 8
  %65 = load i64, i64* %exclude.addr, align 8
  %call116 = call i64 @Fmemq(i64 %64, i64 %65)
  %call117 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp118 = icmp eq i64 %call116, %call117
  br i1 %cmp118, label %if.then.120, label %if.end.135

if.then.120:                                      ; preds = %lor.lhs.false.114, %for.body
  %66 = load i64, i64* %tail, align 8
  %sub121 = sub nsw i64 %66, 3
  %67 = inttoptr i64 %sub121 to i8*
  %68 = bitcast i8* %67 to %struct.Lisp_Cons*
  %car122 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %68, i32 0, i32 0
  %69 = load i64, i64* %car122, align 8
  %70 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call123 = call i64 @builtin_lisp_symbol(i32 0)
  %call124 = call i64 @Fgethash(i64 %69, i64 %70, i64 %call123)
  %call125 = call i64 @AREF(i64 %call124, i64 0)
  store i64 %call125, i64* %attrs, align 8
  %71 = load i64, i64* %tail, align 8
  %sub126 = sub nsw i64 %71, 3
  %72 = inttoptr i64 %sub126 to i8*
  %73 = bitcast i8* %72 to %struct.Lisp_Cons*
  %car127 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %73, i32 0, i32 0
  %74 = load i64, i64* %car127, align 8
  %75 = load i64, i64* %attrs, align 8
  %call128 = call i64 @AREF(i64 %75, i64 0)
  %cmp129 = icmp eq i64 %74, %call128
  br i1 %cmp129, label %if.then.131, label %if.end.134

if.then.131:                                      ; preds = %if.then.120
  %76 = load i64, i64* %attrs, align 8
  %77 = load i64, i64* %attrs, align 8
  %call132 = call i64 @get_translation_table(i64 %77, i1 zeroext true, i32* null)
  call void @ASET(i64 %76, i64 8, i64 %call132)
  %78 = load i64, i64* %attrs, align 8
  %79 = load i64, i64* %coding_attrs_list, align 8
  %call133 = call i64 @Fcons(i64 %78, i64 %79)
  store i64 %call133, i64* %coding_attrs_list, align 8
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.131, %if.then.120
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %lor.lhs.false.114
  br label %for.inc

for.inc:                                          ; preds = %if.end.135
  %80 = load i64, i64* %tail, align 8
  %sub136 = sub nsw i64 %80, 3
  %81 = inttoptr i64 %sub136 to i8*
  %82 = bitcast i8* %81 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %82, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %83 = load i64, i64* %cdr, align 8
  store i64 %83, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %84 = load i64, i64* %start.addr, align 8
  %call137 = call zeroext i1 @STRINGP(i64 %84)
  br i1 %call137, label %if.then.138, label %if.else.140

if.then.138:                                      ; preds = %for.end
  %85 = load i64, i64* %start.addr, align 8
  %call139 = call i8* @SDATA(i64 %85)
  store i8* %call139, i8** %pbeg, align 8
  store i8* %call139, i8** %p, align 8
  br label %if.end.150

if.else.140:                                      ; preds = %for.end
  %86 = load i64, i64* %start_byte, align 8
  %87 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text141 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 73
  %88 = load %struct.buffer_text*, %struct.buffer_text** %text141, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %88, i32 0, i32 3
  %89 = load i64, i64* %gpt_byte, align 8
  %cmp142 = icmp sge i64 %86, %89
  br i1 %cmp142, label %cond.true.144, label %cond.false.146

cond.true.144:                                    ; preds = %if.else.140
  %90 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text145 = getelementptr inbounds %struct.buffer, %struct.buffer* %90, i32 0, i32 73
  %91 = load %struct.buffer_text*, %struct.buffer_text** %text145, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %91, i32 0, i32 5
  %92 = load i64, i64* %gap_size, align 8
  br label %cond.end.147

cond.false.146:                                   ; preds = %if.else.140
  br label %cond.end.147

cond.end.147:                                     ; preds = %cond.false.146, %cond.true.144
  %cond = phi i64 [ %92, %cond.true.144 ], [ 0, %cond.false.146 ]
  %93 = load i64, i64* %start_byte, align 8
  %add = add nsw i64 %cond, %93
  %94 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text148 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 73
  %95 = load %struct.buffer_text*, %struct.buffer_text** %text148, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %95, i32 0, i32 0
  %96 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %96, i64 %add
  %add.ptr149 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr149, i8** %pbeg, align 8
  store i8* %add.ptr149, i8** %p, align 8
  br label %if.end.150

if.end.150:                                       ; preds = %cond.end.147, %if.then.138
  %97 = load i8*, i8** %p, align 8
  %98 = load i64, i64* %end_byte, align 8
  %99 = load i64, i64* %start_byte, align 8
  %sub151 = sub nsw i64 %98, %99
  %add.ptr152 = getelementptr inbounds i8, i8* %97, i64 %sub151
  store i8* %add.ptr152, i8** %pend, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.150
  %100 = load i8*, i8** %p, align 8
  %101 = load i8*, i8** %pend, align 8
  %cmp153 = icmp ult i8* %100, %101
  br i1 %cmp153, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %102 = load i8*, i8** %p, align 8
  %103 = load i8, i8* %102, align 1
  %conv155 = zext i8 %103 to i32
  %add156 = add i32 %conv155, 0
  %cmp157 = icmp ult i32 %add156, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %104 = phi i1 [ false, %while.cond ], [ %cmp157, %land.rhs ]
  br i1 %104, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %105 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond.159

while.cond.159:                                   ; preds = %while.body.169, %while.end
  %106 = load i8*, i8** %p, align 8
  %107 = load i8*, i8** %pend, align 8
  %cmp160 = icmp ult i8* %106, %107
  br i1 %cmp160, label %land.rhs.162, label %land.end.168

land.rhs.162:                                     ; preds = %while.cond.159
  %108 = load i8*, i8** %pend, align 8
  %add.ptr163 = getelementptr inbounds i8, i8* %108, i64 -1
  %109 = load i8, i8* %add.ptr163, align 1
  %conv164 = zext i8 %109 to i32
  %add165 = add i32 %conv164, 0
  %cmp166 = icmp ult i32 %add165, 128
  br label %land.end.168

land.end.168:                                     ; preds = %land.rhs.162, %while.cond.159
  %110 = phi i1 [ false, %while.cond.159 ], [ %cmp166, %land.rhs.162 ]
  br i1 %110, label %while.body.169, label %while.end.171

while.body.169:                                   ; preds = %land.end.168
  %111 = load i8*, i8** %pend, align 8
  %incdec.ptr170 = getelementptr inbounds i8, i8* %111, i32 -1
  store i8* %incdec.ptr170, i8** %pend, align 8
  br label %while.cond.159

while.end.171:                                    ; preds = %land.end.168
  %call172 = call i64 @builtin_lisp_symbol(i32 0)
  %call173 = call i64 @builtin_lisp_symbol(i32 0)
  %call174 = call i64 @Fmake_char_table(i64 %call172, i64 %call173)
  store i64 %call174, i64* %work_table, align 8
  br label %while.cond.175

while.cond.175:                                   ; preds = %if.end.329, %if.then.248, %while.end.171
  %112 = load i8*, i8** %p, align 8
  %113 = load i8*, i8** %pend, align 8
  %cmp176 = icmp ult i8* %112, %113
  br i1 %cmp176, label %while.body.178, label %while.end.330

while.body.178:                                   ; preds = %while.cond.175
  br i1 true, label %cond.true.179, label %cond.false.184

cond.true.179:                                    ; preds = %while.body.178
  %114 = load i8*, i8** %p, align 8
  %115 = load i8, i8* %114, align 1
  %conv180 = zext i8 %115 to i32
  %add181 = add i32 %conv180, 0
  %cmp182 = icmp ult i32 %add181, 128
  br i1 %cmp182, label %if.then.189, label %if.else.191

cond.false.184:                                   ; preds = %while.body.178
  %116 = load i8*, i8** %p, align 8
  %117 = load i8, i8* %116, align 1
  %conv185 = zext i8 %117 to i64
  %add186 = add i64 %conv185, 0
  %cmp187 = icmp ult i64 %add186, 128
  br i1 %cmp187, label %if.then.189, label %if.else.191

if.then.189:                                      ; preds = %cond.false.184, %cond.true.179
  %118 = load i8*, i8** %p, align 8
  %incdec.ptr190 = getelementptr inbounds i8, i8* %118, i32 1
  store i8* %incdec.ptr190, i8** %p, align 8
  br label %if.end.329

if.else.191:                                      ; preds = %cond.false.184, %cond.true.179
  %119 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %119, i64 0
  %120 = load i8, i8* %arrayidx, align 1
  %conv192 = zext i8 %120 to i32
  %and193 = and i32 %conv192, 128
  %tobool = icmp ne i32 %and193, 0
  br i1 %tobool, label %cond.false.197, label %cond.true.194

cond.true.194:                                    ; preds = %if.else.191
  %121 = load i8*, i8** %p, align 8
  %incdec.ptr195 = getelementptr inbounds i8, i8* %121, i32 1
  store i8* %incdec.ptr195, i8** %p, align 8
  %122 = load i8, i8* %121, align 1
  %conv196 = zext i8 %122 to i32
  br label %cond.end.242

cond.false.197:                                   ; preds = %if.else.191
  %123 = load i8*, i8** %p, align 8
  %arrayidx198 = getelementptr inbounds i8, i8* %123, i64 0
  %124 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %124 to i32
  %and200 = and i32 %conv199, 32
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %cond.false.216, label %cond.true.202

cond.true.202:                                    ; preds = %cond.false.197
  %125 = load i8*, i8** %p, align 8
  %add.ptr203 = getelementptr inbounds i8, i8* %125, i64 2
  store i8* %add.ptr203, i8** %p, align 8
  %126 = load i8*, i8** %p, align 8
  %arrayidx204 = getelementptr inbounds i8, i8* %126, i64 -2
  %127 = load i8, i8* %arrayidx204, align 1
  %conv205 = zext i8 %127 to i32
  %and206 = and i32 %conv205, 31
  %shl = shl i32 %and206, 6
  %128 = load i8*, i8** %p, align 8
  %arrayidx207 = getelementptr inbounds i8, i8* %128, i64 -1
  %129 = load i8, i8* %arrayidx207, align 1
  %conv208 = zext i8 %129 to i32
  %and209 = and i32 %conv208, 63
  %or = or i32 %shl, %and209
  %130 = load i8*, i8** %p, align 8
  %arrayidx210 = getelementptr inbounds i8, i8* %130, i64 -2
  %131 = load i8, i8* %arrayidx210, align 1
  %conv211 = zext i8 %131 to i32
  %cmp212 = icmp slt i32 %conv211, 194
  %cond214 = select i1 %cmp212, i32 4194176, i32 0
  %or215 = or i32 %or, %cond214
  br label %cond.end.240

cond.false.216:                                   ; preds = %cond.false.197
  %132 = load i8*, i8** %p, align 8
  %arrayidx217 = getelementptr inbounds i8, i8* %132, i64 0
  %133 = load i8, i8* %arrayidx217, align 1
  %conv218 = zext i8 %133 to i32
  %and219 = and i32 %conv218, 16
  %tobool220 = icmp ne i32 %and219, 0
  br i1 %tobool220, label %cond.false.236, label %cond.true.221

cond.true.221:                                    ; preds = %cond.false.216
  %134 = load i8*, i8** %p, align 8
  %add.ptr222 = getelementptr inbounds i8, i8* %134, i64 3
  store i8* %add.ptr222, i8** %p, align 8
  %135 = load i8*, i8** %p, align 8
  %arrayidx223 = getelementptr inbounds i8, i8* %135, i64 -3
  %136 = load i8, i8* %arrayidx223, align 1
  %conv224 = zext i8 %136 to i32
  %and225 = and i32 %conv224, 15
  %shl226 = shl i32 %and225, 12
  %137 = load i8*, i8** %p, align 8
  %arrayidx227 = getelementptr inbounds i8, i8* %137, i64 -2
  %138 = load i8, i8* %arrayidx227, align 1
  %conv228 = zext i8 %138 to i32
  %and229 = and i32 %conv228, 63
  %shl230 = shl i32 %and229, 6
  %or231 = or i32 %shl226, %shl230
  %139 = load i8*, i8** %p, align 8
  %arrayidx232 = getelementptr inbounds i8, i8* %139, i64 -1
  %140 = load i8, i8* %arrayidx232, align 1
  %conv233 = zext i8 %140 to i32
  %and234 = and i32 %conv233, 63
  %or235 = or i32 %or231, %and234
  br label %cond.end.238

cond.false.236:                                   ; preds = %cond.false.216
  %141 = load i8*, i8** %p, align 8
  %call237 = call i32 @string_char(i8* %141, i8** %p, i32* null)
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.236, %cond.true.221
  %cond239 = phi i32 [ %or235, %cond.true.221 ], [ %call237, %cond.false.236 ]
  br label %cond.end.240

cond.end.240:                                     ; preds = %cond.end.238, %cond.true.202
  %cond241 = phi i32 [ %or215, %cond.true.202 ], [ %cond239, %cond.end.238 ]
  br label %cond.end.242

cond.end.242:                                     ; preds = %cond.end.240, %cond.true.194
  %cond243 = phi i32 [ %conv196, %cond.true.194 ], [ %cond241, %cond.end.240 ]
  store i32 %cond243, i32* %c, align 4
  %142 = load i64, i64* %work_table, align 8
  %143 = load i32, i32* %c, align 4
  %call244 = call i64 @char_table_ref(i64 %142, i32 %143)
  %call245 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp246 = icmp eq i64 %call244, %call245
  br i1 %cmp246, label %if.end.249, label %if.then.248

if.then.248:                                      ; preds = %cond.end.242
  br label %while.cond.175

if.end.249:                                       ; preds = %cond.end.242
  store i8 0, i8* @charset_map_loaded, align 1
  %144 = load i64, i64* %coding_attrs_list, align 8
  store i64 %144, i64* %tail, align 8
  br label %for.cond.250

for.cond.250:                                     ; preds = %if.end.298, %if.end.249
  %145 = load i64, i64* %tail, align 8
  %and251 = and i64 %145, 7
  %conv252 = trunc i64 %and251 to i32
  %cmp253 = icmp eq i32 %conv252, 3
  br i1 %cmp253, label %for.body.255, label %for.end.299

for.body.255:                                     ; preds = %for.cond.250
  %146 = load i64, i64* %tail, align 8
  %sub256 = sub nsw i64 %146, 3
  %147 = inttoptr i64 %sub256 to i8*
  %148 = bitcast i8* %147 to %struct.Lisp_Cons*
  %car257 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %148, i32 0, i32 0
  %149 = load i64, i64* %car257, align 8
  store i64 %149, i64* %elt, align 8
  %150 = load i64, i64* %elt, align 8
  %call258 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp259 = icmp eq i64 %150, %call258
  br i1 %cmp259, label %if.then.261, label %if.else.265

if.then.261:                                      ; preds = %for.body.255
  %151 = load i64, i64* %tail, align 8
  %sub262 = sub nsw i64 %151, 3
  %152 = inttoptr i64 %sub262 to i8*
  %153 = bitcast i8* %152 to %struct.Lisp_Cons*
  %u263 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %153, i32 0, i32 1
  %cdr264 = bitcast %union.anon.0* %u263 to i64*
  %154 = load i64, i64* %cdr264, align 8
  store i64 %154, i64* %tail, align 8
  br label %if.end.298

if.else.265:                                      ; preds = %for.body.255
  %155 = load i32, i32* %c, align 4
  %156 = load i64, i64* %elt, align 8
  %call266 = call zeroext i1 @char_encodable_p(i32 %155, i64 %156)
  br i1 %call266, label %if.then.267, label %if.else.271

if.then.267:                                      ; preds = %if.else.265
  %157 = load i64, i64* %tail, align 8
  %sub268 = sub nsw i64 %157, 3
  %158 = inttoptr i64 %sub268 to i8*
  %159 = bitcast i8* %158 to %struct.Lisp_Cons*
  %u269 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %159, i32 0, i32 1
  %cdr270 = bitcast %union.anon.0* %u269 to i64*
  %160 = load i64, i64* %cdr270, align 8
  store i64 %160, i64* %tail, align 8
  br label %if.end.297

if.else.271:                                      ; preds = %if.else.265
  %161 = load i64, i64* %tail, align 8
  %sub272 = sub nsw i64 %161, 3
  %162 = inttoptr i64 %sub272 to i8*
  %163 = bitcast i8* %162 to %struct.Lisp_Cons*
  %u273 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %163, i32 0, i32 1
  %cdr274 = bitcast %union.anon.0* %u273 to i64*
  %164 = load i64, i64* %cdr274, align 8
  %and275 = and i64 %164, 7
  %conv276 = trunc i64 %and275 to i32
  %cmp277 = icmp eq i32 %conv276, 3
  br i1 %cmp277, label %if.then.279, label %if.else.291

if.then.279:                                      ; preds = %if.else.271
  %165 = load i64, i64* %tail, align 8
  %166 = load i64, i64* %tail, align 8
  %sub280 = sub nsw i64 %166, 3
  %167 = inttoptr i64 %sub280 to i8*
  %168 = bitcast i8* %167 to %struct.Lisp_Cons*
  %u281 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %168, i32 0, i32 1
  %cdr282 = bitcast %union.anon.0* %u281 to i64*
  %169 = load i64, i64* %cdr282, align 8
  %sub283 = sub nsw i64 %169, 3
  %170 = inttoptr i64 %sub283 to i8*
  %171 = bitcast i8* %170 to %struct.Lisp_Cons*
  %car284 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %171, i32 0, i32 0
  %172 = load i64, i64* %car284, align 8
  call void @XSETCAR(i64 %165, i64 %172)
  %173 = load i64, i64* %tail, align 8
  %174 = load i64, i64* %tail, align 8
  %sub285 = sub nsw i64 %174, 3
  %175 = inttoptr i64 %sub285 to i8*
  %176 = bitcast i8* %175 to %struct.Lisp_Cons*
  %u286 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %176, i32 0, i32 1
  %cdr287 = bitcast %union.anon.0* %u286 to i64*
  %177 = load i64, i64* %cdr287, align 8
  %sub288 = sub nsw i64 %177, 3
  %178 = inttoptr i64 %sub288 to i8*
  %179 = bitcast i8* %178 to %struct.Lisp_Cons*
  %u289 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %179, i32 0, i32 1
  %cdr290 = bitcast %union.anon.0* %u289 to i64*
  %180 = load i64, i64* %cdr290, align 8
  call void @XSETCDR(i64 %173, i64 %180)
  br label %if.end.296

if.else.291:                                      ; preds = %if.else.271
  %181 = load i64, i64* %tail, align 8
  %call292 = call i64 @builtin_lisp_symbol(i32 0)
  call void @XSETCAR(i64 %181, i64 %call292)
  %182 = load i64, i64* %tail, align 8
  %sub293 = sub nsw i64 %182, 3
  %183 = inttoptr i64 %sub293 to i8*
  %184 = bitcast i8* %183 to %struct.Lisp_Cons*
  %u294 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %184, i32 0, i32 1
  %cdr295 = bitcast %union.anon.0* %u294 to i64*
  %185 = load i64, i64* %cdr295, align 8
  store i64 %185, i64* %tail, align 8
  br label %if.end.296

if.end.296:                                       ; preds = %if.else.291, %if.then.279
  br label %if.end.297

if.end.297:                                       ; preds = %if.end.296, %if.then.267
  br label %if.end.298

if.end.298:                                       ; preds = %if.end.297, %if.then.261
  br label %for.cond.250

for.end.299:                                      ; preds = %for.cond.250
  %186 = load i8, i8* @charset_map_loaded, align 1
  %tobool300 = trunc i8 %186 to i1
  br i1 %tobool300, label %if.then.301, label %if.end.327

if.then.301:                                      ; preds = %for.end.299
  %187 = load i8*, i8** %p, align 8
  %188 = load i8*, i8** %pbeg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %187 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %188 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %p_offset, align 8
  %189 = load i8*, i8** %pend, align 8
  %190 = load i8*, i8** %pbeg, align 8
  %sub.ptr.lhs.cast302 = ptrtoint i8* %189 to i64
  %sub.ptr.rhs.cast303 = ptrtoint i8* %190 to i64
  %sub.ptr.sub304 = sub i64 %sub.ptr.lhs.cast302, %sub.ptr.rhs.cast303
  store i64 %sub.ptr.sub304, i64* %pend_offset, align 8
  %191 = load i64, i64* %start.addr, align 8
  %call305 = call zeroext i1 @STRINGP(i64 %191)
  br i1 %call305, label %if.then.306, label %if.else.308

if.then.306:                                      ; preds = %if.then.301
  %192 = load i64, i64* %start.addr, align 8
  %call307 = call i8* @SDATA(i64 %192)
  store i8* %call307, i8** %pbeg, align 8
  br label %if.end.324

if.else.308:                                      ; preds = %if.then.301
  %193 = load i64, i64* %start_byte, align 8
  %194 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text309 = getelementptr inbounds %struct.buffer, %struct.buffer* %194, i32 0, i32 73
  %195 = load %struct.buffer_text*, %struct.buffer_text** %text309, align 8
  %gpt_byte310 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %195, i32 0, i32 3
  %196 = load i64, i64* %gpt_byte310, align 8
  %cmp311 = icmp sge i64 %193, %196
  br i1 %cmp311, label %cond.true.313, label %cond.false.316

cond.true.313:                                    ; preds = %if.else.308
  %197 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text314 = getelementptr inbounds %struct.buffer, %struct.buffer* %197, i32 0, i32 73
  %198 = load %struct.buffer_text*, %struct.buffer_text** %text314, align 8
  %gap_size315 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %198, i32 0, i32 5
  %199 = load i64, i64* %gap_size315, align 8
  br label %cond.end.317

cond.false.316:                                   ; preds = %if.else.308
  br label %cond.end.317

cond.end.317:                                     ; preds = %cond.false.316, %cond.true.313
  %cond318 = phi i64 [ %199, %cond.true.313 ], [ 0, %cond.false.316 ]
  %200 = load i64, i64* %start_byte, align 8
  %add319 = add nsw i64 %cond318, %200
  %201 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text320 = getelementptr inbounds %struct.buffer, %struct.buffer* %201, i32 0, i32 73
  %202 = load %struct.buffer_text*, %struct.buffer_text** %text320, align 8
  %beg321 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %202, i32 0, i32 0
  %203 = load i8*, i8** %beg321, align 8
  %add.ptr322 = getelementptr inbounds i8, i8* %203, i64 %add319
  %add.ptr323 = getelementptr inbounds i8, i8* %add.ptr322, i64 -1
  store i8* %add.ptr323, i8** %pbeg, align 8
  br label %if.end.324

if.end.324:                                       ; preds = %cond.end.317, %if.then.306
  %204 = load i8*, i8** %pbeg, align 8
  %205 = load i64, i64* %p_offset, align 8
  %add.ptr325 = getelementptr inbounds i8, i8* %204, i64 %205
  store i8* %add.ptr325, i8** %p, align 8
  %206 = load i8*, i8** %pbeg, align 8
  %207 = load i64, i64* %pend_offset, align 8
  %add.ptr326 = getelementptr inbounds i8, i8* %206, i64 %207
  store i8* %add.ptr326, i8** %pend, align 8
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.324, %for.end.299
  %208 = load i64, i64* %work_table, align 8
  %209 = load i32, i32* %c, align 4
  %call328 = call i64 @builtin_lisp_symbol(i32 901)
  call void @char_table_set(i64 %208, i32 %209, i64 %call328)
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.327, %if.then.189
  br label %while.cond.175

while.end.330:                                    ; preds = %while.cond.175
  %call331 = call i64 @builtin_lisp_symbol(i32 788)
  %call332 = call i64 @builtin_lisp_symbol(i32 702)
  %call333 = call i64 @list2(i64 %call331, i64 %call332)
  store i64 %call333, i64* %safe_codings, align 8
  %210 = load i64, i64* %coding_attrs_list, align 8
  store i64 %210, i64* %tail, align 8
  br label %for.cond.334

for.cond.334:                                     ; preds = %for.inc.351, %while.end.330
  %211 = load i64, i64* %tail, align 8
  %and335 = and i64 %211, 7
  %conv336 = trunc i64 %and335 to i32
  %cmp337 = icmp eq i32 %conv336, 3
  br i1 %cmp337, label %for.body.339, label %for.end.355

for.body.339:                                     ; preds = %for.cond.334
  %212 = load i64, i64* %tail, align 8
  %sub340 = sub nsw i64 %212, 3
  %213 = inttoptr i64 %sub340 to i8*
  %214 = bitcast i8* %213 to %struct.Lisp_Cons*
  %car341 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %214, i32 0, i32 0
  %215 = load i64, i64* %car341, align 8
  %call342 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp343 = icmp eq i64 %215, %call342
  br i1 %cmp343, label %if.end.350, label %if.then.345

if.then.345:                                      ; preds = %for.body.339
  %216 = load i64, i64* %tail, align 8
  %sub346 = sub nsw i64 %216, 3
  %217 = inttoptr i64 %sub346 to i8*
  %218 = bitcast i8* %217 to %struct.Lisp_Cons*
  %car347 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %218, i32 0, i32 0
  %219 = load i64, i64* %car347, align 8
  %call348 = call i64 @AREF(i64 %219, i64 0)
  %220 = load i64, i64* %safe_codings, align 8
  %call349 = call i64 @Fcons(i64 %call348, i64 %220)
  store i64 %call349, i64* %safe_codings, align 8
  br label %if.end.350

if.end.350:                                       ; preds = %if.then.345, %for.body.339
  br label %for.inc.351

for.inc.351:                                      ; preds = %if.end.350
  %221 = load i64, i64* %tail, align 8
  %sub352 = sub nsw i64 %221, 3
  %222 = inttoptr i64 %sub352 to i8*
  %223 = bitcast i8* %222 to %struct.Lisp_Cons*
  %u353 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %223, i32 0, i32 1
  %cdr354 = bitcast %union.anon.0* %u353 to i64*
  %224 = load i64, i64* %cdr354, align 8
  store i64 %224, i64* %tail, align 8
  br label %for.cond.334

for.end.355:                                      ; preds = %for.cond.334
  %225 = load i64, i64* %safe_codings, align 8
  store i64 %225, i64* %retval
  br label %return

return:                                           ; preds = %for.end.355, %if.then.75, %if.then.63, %if.then.4
  %226 = load i64, i64* %retval
  ret i64 %226
}

declare i32 @XMISCTYPE(i64) #1

declare i64 @make_natnum(i64) #1

; Function Attrs: noreturn
declare void @args_out_of_range(i64, i64) #2

declare i64 @Fmemq(i64, i64) #1

declare void @ASET(i64, i64, i64) #1

declare i64 @Fmake_char_table(i64, i64) #1

declare i32 @string_char(i8*, i8**, i32*) #1

declare i64 @char_table_ref(i64, i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @char_encodable_p(i32 %c, i64 %attrs) #0 {
entry:
  %c.addr = alloca i32, align 4
  %attrs.addr = alloca i64, align 8
  %tail = alloca i64, align 8
  %charset = alloca %struct.charset*, align 8
  %translation_table = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  store i64 %attrs, i64* %attrs.addr, align 8
  %0 = load i64, i64* %attrs.addr, align 8
  %call = call i64 @AREF(i64 %0, i64 8)
  store i64 %call, i64* %translation_table, align 8
  %1 = load i64, i64* %translation_table, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %translation_table, align 8
  %3 = load i32, i32* %c.addr, align 4
  %call2 = call i32 @translate_char(i64 %2, i32 %3)
  store i32 %call2, i32* %c.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %attrs.addr, align 8
  %call3 = call i64 @AREF(i64 %4, i64 4)
  store i64 %call3, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, i64* %tail, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp4 = icmp eq i32 %conv, 3
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %7 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car, align 8
  %shr = ashr i64 %10, 2
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %6, i64 %shr
  store %struct.charset* %add.ptr, %struct.charset** %charset, align 8
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %11 = load i32, i32* %c.addr, align 4
  %add = add i32 %11, 0
  %cmp6 = icmp ult i32 %add, 128
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false

cond.false:                                       ; preds = %for.body
  %12 = load i32, i32* %c.addr, align 4
  %conv8 = sext i32 %12 to i64
  %add9 = add i64 %conv8, 0
  %cmp10 = icmp ult i64 %add9, 128
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %13 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %13, i32 0, i32 5
  %bf.load = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then.90, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.false, %cond.true
  %14 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %14, i32 0, i32 5
  %bf.load13 = load i8, i8* %unified_p, align 8
  %bf.lshr14 = lshr i8 %bf.load13, 5
  %bf.clear15 = and i8 %bf.lshr14, 1
  %bf.cast16 = trunc i8 %bf.clear15 to i1
  br i1 %bf.cast16, label %cond.true.25, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %lor.lhs.false
  %15 = load %struct.charset*, %struct.charset** %charset, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %15, i32 0, i32 9
  %16 = load i32, i32* %method, align 4
  %cmp19 = icmp eq i32 %16, 2
  br i1 %cmp19, label %cond.true.25, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false.18
  %17 = load %struct.charset*, %struct.charset** %charset, align 8
  %method22 = getelementptr inbounds %struct.charset, %struct.charset* %17, i32 0, i32 9
  %18 = load i32, i32* %method22, align 4
  %cmp23 = icmp eq i32 %18, 3
  br i1 %cmp23, label %cond.true.25, label %cond.false.29

cond.true.25:                                     ; preds = %lor.lhs.false.21, %lor.lhs.false.18, %lor.lhs.false
  %19 = load %struct.charset*, %struct.charset** %charset, align 8
  %20 = load i32, i32* %c.addr, align 4
  %call26 = call i32 @encode_char(%struct.charset* %19, i32 %20)
  %21 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %21, i32 0, i32 15
  %22 = load i32, i32* %invalid_code, align 4
  %cmp27 = icmp ne i32 %call26, %22
  br i1 %cmp27, label %if.then.90, label %if.end.91

cond.false.29:                                    ; preds = %lor.lhs.false.21
  %23 = load i32, i32* %c.addr, align 4
  %cmp30 = icmp slt i32 %23, 65536
  br i1 %cmp30, label %cond.true.32, label %cond.false.38

cond.true.32:                                     ; preds = %cond.false.29
  %24 = load i32, i32* %c.addr, align 4
  %shr33 = ashr i32 %24, 10
  %idxprom = sext i32 %shr33 to i64
  %25 = load %struct.charset*, %struct.charset** %charset, align 8
  %fast_map = getelementptr inbounds %struct.charset, %struct.charset* %25, i32 0, i32 16
  %arrayidx = getelementptr inbounds [190 x i8], [190 x i8]* %fast_map, i32 0, i64 %idxprom
  %26 = load i8, i8* %arrayidx, align 1
  %conv34 = zext i8 %26 to i32
  %27 = load i32, i32* %c.addr, align 4
  %shr35 = ashr i32 %27, 7
  %and36 = and i32 %shr35, 7
  %shl = shl i32 1, %and36
  %and37 = and i32 %conv34, %shl
  %tobool = icmp ne i32 %and37, 0
  br i1 %tobool, label %land.lhs.true.50, label %if.end.91

cond.false.38:                                    ; preds = %cond.false.29
  %28 = load i32, i32* %c.addr, align 4
  %shr39 = ashr i32 %28, 15
  %add40 = add nsw i32 %shr39, 62
  %idxprom41 = sext i32 %add40 to i64
  %29 = load %struct.charset*, %struct.charset** %charset, align 8
  %fast_map42 = getelementptr inbounds %struct.charset, %struct.charset* %29, i32 0, i32 16
  %arrayidx43 = getelementptr inbounds [190 x i8], [190 x i8]* %fast_map42, i32 0, i64 %idxprom41
  %30 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %30 to i32
  %31 = load i32, i32* %c.addr, align 4
  %shr45 = ashr i32 %31, 12
  %and46 = and i32 %shr45, 7
  %shl47 = shl i32 1, %and46
  %and48 = and i32 %conv44, %shl47
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %land.lhs.true.50, label %if.end.91

land.lhs.true.50:                                 ; preds = %cond.false.38, %cond.true.32
  %32 = load %struct.charset*, %struct.charset** %charset, align 8
  %method51 = getelementptr inbounds %struct.charset, %struct.charset* %32, i32 0, i32 9
  %33 = load i32, i32* %method51, align 4
  %cmp52 = icmp eq i32 %33, 0
  br i1 %cmp52, label %cond.true.54, label %cond.false.60

cond.true.54:                                     ; preds = %land.lhs.true.50
  %34 = load i32, i32* %c.addr, align 4
  %35 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_char = getelementptr inbounds %struct.charset, %struct.charset* %35, i32 0, i32 13
  %36 = load i32, i32* %min_char, align 4
  %cmp55 = icmp sge i32 %34, %36
  br i1 %cmp55, label %land.lhs.true.57, label %if.end.91

land.lhs.true.57:                                 ; preds = %cond.true.54
  %37 = load i32, i32* %c.addr, align 4
  %38 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_char = getelementptr inbounds %struct.charset, %struct.charset* %38, i32 0, i32 14
  %39 = load i32, i32* %max_char, align 4
  %cmp58 = icmp sle i32 %37, %39
  br i1 %cmp58, label %if.then.90, label %if.end.91

cond.false.60:                                    ; preds = %land.lhs.true.50
  %40 = load %struct.charset*, %struct.charset** %charset, align 8
  %method61 = getelementptr inbounds %struct.charset, %struct.charset* %40, i32 0, i32 9
  %41 = load i32, i32* %method61, align 4
  %cmp62 = icmp eq i32 %41, 1
  br i1 %cmp62, label %land.lhs.true.64, label %cond.false.85

land.lhs.true.64:                                 ; preds = %cond.false.60
  %42 = load %struct.charset*, %struct.charset** %charset, align 8
  %compact_codes_p = getelementptr inbounds %struct.charset, %struct.charset* %42, i32 0, i32 5
  %bf.load65 = load i8, i8* %compact_codes_p, align 8
  %bf.lshr66 = lshr i8 %bf.load65, 4
  %bf.clear67 = and i8 %bf.lshr66, 1
  %bf.cast68 = trunc i8 %bf.clear67 to i1
  br i1 %bf.cast68, label %land.lhs.true.70, label %cond.false.85

land.lhs.true.70:                                 ; preds = %land.lhs.true.64
  %43 = load i64, i64* @Vcharset_hash_table, align 8
  %call71 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %43)
  %44 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %44, i32 0, i32 1
  %45 = load i64, i64* %hash_index, align 8
  %call72 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call71, i64 %45)
  %call73 = call i64 @AREF(i64 %call72, i64 5)
  %call74 = call zeroext i1 @CHAR_TABLE_P(i64 %call73)
  br i1 %call74, label %cond.true.76, label %cond.false.85

cond.true.76:                                     ; preds = %land.lhs.true.70
  %46 = load i64, i64* @Vcharset_hash_table, align 8
  %call77 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %46)
  %47 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index78 = getelementptr inbounds %struct.charset, %struct.charset* %47, i32 0, i32 1
  %48 = load i64, i64* %hash_index78, align 8
  %call79 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call77, i64 %48)
  %call80 = call i64 @AREF(i64 %call79, i64 5)
  %49 = load i32, i32* %c.addr, align 4
  %call81 = call i64 @CHAR_TABLE_REF(i64 %call80, i32 %49)
  %call82 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp83 = icmp eq i64 %call81, %call82
  br i1 %cmp83, label %if.end.91, label %if.then.90

cond.false.85:                                    ; preds = %land.lhs.true.70, %land.lhs.true.64, %cond.false.60
  %50 = load %struct.charset*, %struct.charset** %charset, align 8
  %51 = load i32, i32* %c.addr, align 4
  %call86 = call i32 @encode_char(%struct.charset* %50, i32 %51)
  %52 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code87 = getelementptr inbounds %struct.charset, %struct.charset* %52, i32 0, i32 15
  %53 = load i32, i32* %invalid_code87, align 4
  %cmp88 = icmp ne i32 %call86, %53
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %cond.false.85, %cond.true.76, %land.lhs.true.57, %cond.true.25, %land.lhs.true
  br label %for.end

if.end.91:                                        ; preds = %cond.false.85, %cond.true.76, %land.lhs.true.57, %cond.true.54, %cond.false.38, %cond.true.32, %cond.true.25
  br label %for.inc

for.inc:                                          ; preds = %if.end.91
  %54 = load i64, i64* %tail, align 8
  %sub92 = sub nsw i64 %54, 3
  %55 = inttoptr i64 %sub92 to i8*
  %56 = bitcast i8* %55 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %56, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %57 = load i64, i64* %cdr, align 8
  store i64 %57, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.90, %for.cond
  %58 = load i64, i64* %tail, align 8
  %call93 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp94 = icmp eq i64 %58, %call93
  %lnot = xor i1 %cmp94, true
  ret i1 %lnot
}

declare void @XSETCDR(i64, i64) #1

declare void @char_table_set(i64, i32, i64) #1

declare i64 @list2(i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Funencodable_char_position(i64 %start, i64 %end, i64 %coding_system, i64 %count, i64 %string) #0 {
entry:
  %retval = alloca i64, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %string.addr = alloca i64, align 8
  %n = alloca i64, align 8
  %coding = alloca %struct.coding_system, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %translation_table = alloca i64, align 8
  %positions = alloca i64, align 8
  %from = alloca i64, align 8
  %to = alloca i64, align 8
  %p = alloca i8*, align 8
  %stop = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %ascii_compatible = alloca i8, align 1
  %c = alloca i32, align 4
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @Fcheck_coding_system(i64 %0)
  call void @setup_coding_system(i64 %call, %struct.coding_system* %coding)
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call1 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 0
  %2 = load i64, i64* %id, align 8
  %call2 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call1, i64 %2)
  %call3 = call i64 @AREF(i64 %call2, i64 0)
  store i64 %call3, i64* %attrs, align 8
  %3 = load i64, i64* %attrs, align 8
  %call4 = call i64 @AREF(i64 %3, i64 3)
  %call5 = call i64 @builtin_lisp_symbol(i32 788)
  %cmp = icmp eq i64 %call4, %call5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call6, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %attrs, align 8
  %call7 = call i64 @AREF(i64 %4, i64 5)
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %call7, %call8
  %lnot = xor i1 %cmp9, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %ascii_compatible, align 1
  %5 = load i64, i64* %attrs, align 8
  %call10 = call i64 @AREF(i64 %5, i64 4)
  store i64 %call10, i64* %charset_list, align 8
  %6 = load i64, i64* %attrs, align 8
  %call11 = call i64 @get_translation_table(i64 %6, i1 zeroext true, i32* null)
  store i64 %call11, i64* %translation_table, align 8
  %7 = load i64, i64* %string.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %7, %call12
  br i1 %cmp13, label %if.then.14, label %if.else.59

if.then.14:                                       ; preds = %if.end
  call void @validate_region(i64* %start.addr, i64* %end.addr)
  %8 = load i64, i64* %start.addr, align 8
  %shr = ashr i64 %8, 2
  store i64 %shr, i64* %from, align 8
  %9 = load i64, i64* %end.addr, align 8
  %shr15 = ashr i64 %9, 2
  store i64 %shr15, i64* %to, align 8
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 39
  %11 = load i64, i64* %enable_multibyte_characters_, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %11, %call16
  br i1 %cmp17, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.14
  %12 = load i8, i8* %ascii_compatible, align 1
  %tobool = trunc i8 %12 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.24

land.lhs.true:                                    ; preds = %lor.lhs.false
  %13 = load i64, i64* %to, align 8
  %14 = load i64, i64* %from, align 8
  %sub = sub nsw i64 %13, %14
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %16 = load i64, i64* %to, align 8
  %call18 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %15, i64 %16)
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %18 = load i64, i64* %from, align 8
  %call19 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %17, i64 %18)
  %sub20 = sub nsw i64 %call18, %call19
  %cmp21 = icmp eq i64 %sub, %sub20
  br i1 %cmp21, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %land.lhs.true, %if.then.14
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call23, i64* %retval
  br label %return

if.end.24:                                        ; preds = %land.lhs.true, %lor.lhs.false
  %19 = load i64, i64* %from, align 8
  %20 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %20, i32 0, i32 73
  %21 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %21, i32 0, i32 1
  %22 = load i64, i64* %gpt, align 8
  %cmp25 = icmp sge i64 %19, %22
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.24
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text26 = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 73
  %24 = load %struct.buffer_text*, %struct.buffer_text** %text26, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %24, i32 0, i32 5
  %25 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.24
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %25, %cond.true ], [ 0, %cond.false ]
  %26 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %27 = load i64, i64* %from, align 8
  %call27 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %26, i64 %27)
  %add = add nsw i64 %cond, %call27
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text28 = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 73
  %29 = load %struct.buffer_text*, %struct.buffer_text** %text28, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %29, i32 0, i32 0
  %30 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 %add
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr29, i8** %p, align 8
  %31 = load i64, i64* %to, align 8
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text30 = getelementptr inbounds %struct.buffer, %struct.buffer* %32, i32 0, i32 73
  %33 = load %struct.buffer_text*, %struct.buffer_text** %text30, align 8
  %gpt31 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %33, i32 0, i32 1
  %34 = load i64, i64* %gpt31, align 8
  %cmp32 = icmp sge i64 %31, %34
  br i1 %cmp32, label %cond.true.33, label %cond.false.36

cond.true.33:                                     ; preds = %cond.end
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text34 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text34, align 8
  %gap_size35 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 5
  %37 = load i64, i64* %gap_size35, align 8
  br label %cond.end.37

cond.false.36:                                    ; preds = %cond.end
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.36, %cond.true.33
  %cond38 = phi i64 [ %37, %cond.true.33 ], [ 0, %cond.false.36 ]
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %39 = load i64, i64* %to, align 8
  %call39 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %38, i64 %39)
  %add40 = add nsw i64 %cond38, %call39
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text41 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 73
  %41 = load %struct.buffer_text*, %struct.buffer_text** %text41, align 8
  %beg42 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %41, i32 0, i32 0
  %42 = load i8*, i8** %beg42, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %42, i64 %add40
  %add.ptr44 = getelementptr inbounds i8, i8* %add.ptr43, i64 -1
  store i8* %add.ptr44, i8** %pend, align 8
  %43 = load i64, i64* %from, align 8
  %44 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text45 = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 73
  %45 = load %struct.buffer_text*, %struct.buffer_text** %text45, align 8
  %gpt46 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %45, i32 0, i32 1
  %46 = load i64, i64* %gpt46, align 8
  %cmp47 = icmp slt i64 %43, %46
  br i1 %cmp47, label %land.lhs.true.48, label %if.else

land.lhs.true.48:                                 ; preds = %cond.end.37
  %47 = load i64, i64* %to, align 8
  %48 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text49 = getelementptr inbounds %struct.buffer, %struct.buffer* %48, i32 0, i32 73
  %49 = load %struct.buffer_text*, %struct.buffer_text** %text49, align 8
  %gpt50 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %49, i32 0, i32 1
  %50 = load i64, i64* %gpt50, align 8
  %cmp51 = icmp sge i64 %47, %50
  br i1 %cmp51, label %if.then.52, label %if.else

if.then.52:                                       ; preds = %land.lhs.true.48
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text53 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 73
  %52 = load %struct.buffer_text*, %struct.buffer_text** %text53, align 8
  %beg54 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %52, i32 0, i32 0
  %53 = load i8*, i8** %beg54, align 8
  %54 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text55 = getelementptr inbounds %struct.buffer, %struct.buffer* %54, i32 0, i32 73
  %55 = load %struct.buffer_text*, %struct.buffer_text** %text55, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %55, i32 0, i32 3
  %56 = load i64, i64* %gpt_byte, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %53, i64 %56
  %add.ptr57 = getelementptr inbounds i8, i8* %add.ptr56, i64 -1
  store i8* %add.ptr57, i8** %stop, align 8
  br label %if.end.58

if.else:                                          ; preds = %land.lhs.true.48, %cond.end.37
  %57 = load i8*, i8** %pend, align 8
  store i8* %57, i8** %stop, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.else, %if.then.52
  br label %if.end.78

if.else.59:                                       ; preds = %if.end
  %58 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %58)
  %59 = load i64, i64* %string.addr, align 8
  %60 = load i64, i64* %start.addr, align 8
  %61 = load i64, i64* %end.addr, align 8
  %62 = load i64, i64* %string.addr, align 8
  %call60 = call i64 @SCHARS(i64 %62)
  call void @validate_subarray(i64 %59, i64 %60, i64 %61, i64 %call60, i64* %from, i64* %to)
  %63 = load i64, i64* %string.addr, align 8
  %call61 = call zeroext i1 @STRING_MULTIBYTE(i64 %63)
  br i1 %call61, label %if.end.64, label %if.then.62

if.then.62:                                       ; preds = %if.else.59
  %call63 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call63, i64* %retval
  br label %return

if.end.64:                                        ; preds = %if.else.59
  %64 = load i64, i64* %string.addr, align 8
  %call65 = call i8* @SDATA(i64 %64)
  %65 = load i64, i64* %string.addr, align 8
  %66 = load i64, i64* %from, align 8
  %call66 = call i64 @string_char_to_byte(i64 %65, i64 %66)
  %add.ptr67 = getelementptr inbounds i8, i8* %call65, i64 %call66
  store i8* %add.ptr67, i8** %p, align 8
  %67 = load i64, i64* %string.addr, align 8
  %call68 = call i8* @SDATA(i64 %67)
  %68 = load i64, i64* %string.addr, align 8
  %69 = load i64, i64* %to, align 8
  %call69 = call i64 @string_char_to_byte(i64 %68, i64 %69)
  %add.ptr70 = getelementptr inbounds i8, i8* %call68, i64 %call69
  store i8* %add.ptr70, i8** %pend, align 8
  store i8* %add.ptr70, i8** %stop, align 8
  %70 = load i8, i8* %ascii_compatible, align 1
  %tobool71 = trunc i8 %70 to i1
  br i1 %tobool71, label %land.lhs.true.72, label %if.end.77

land.lhs.true.72:                                 ; preds = %if.end.64
  %71 = load i64, i64* %to, align 8
  %72 = load i64, i64* %from, align 8
  %sub73 = sub nsw i64 %71, %72
  %73 = load i8*, i8** %pend, align 8
  %74 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %73 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %74 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp74 = icmp eq i64 %sub73, %sub.ptr.sub
  br i1 %cmp74, label %if.then.75, label %if.end.77

if.then.75:                                       ; preds = %land.lhs.true.72
  %call76 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call76, i64* %retval
  br label %return

if.end.77:                                        ; preds = %land.lhs.true.72, %if.end.64
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.end.58
  %75 = load i64, i64* %count.addr, align 8
  %call79 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp80 = icmp eq i64 %75, %call79
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %if.end.78
  store i64 1, i64* %n, align 8
  br label %if.end.84

if.else.82:                                       ; preds = %if.end.78
  %76 = load i64, i64* %count.addr, align 8
  call void @CHECK_NATNUM(i64 %76)
  %77 = load i64, i64* %count.addr, align 8
  %shr83 = ashr i64 %77, 2
  store i64 %shr83, i64* %n, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.82, %if.then.81
  %call85 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call85, i64* %positions, align 8
  store i8 0, i8* @charset_map_loaded, align 1
  br label %while.body

while.body:                                       ; preds = %if.end.84, %if.end.247
  %78 = load i8, i8* %ascii_compatible, align 1
  %tobool86 = trunc i8 %78 to i1
  br i1 %tobool86, label %if.then.87, label %if.end.94

if.then.87:                                       ; preds = %while.body
  br label %while.cond.88

while.cond.88:                                    ; preds = %while.body.93, %if.then.87
  %79 = load i8*, i8** %p, align 8
  %80 = load i8*, i8** %stop, align 8
  %cmp89 = icmp ult i8* %79, %80
  br i1 %cmp89, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.88
  %81 = load i8*, i8** %p, align 8
  %82 = load i8, i8* %81, align 1
  %conv = zext i8 %82 to i32
  %add90 = add i32 %conv, 0
  %cmp91 = icmp ult i32 %add90, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.88
  %83 = phi i1 [ false, %while.cond.88 ], [ %cmp91, %land.rhs ]
  br i1 %83, label %while.body.93, label %while.end

while.body.93:                                    ; preds = %land.end
  %84 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %85 = load i64, i64* %from, align 8
  %inc = add nsw i64 %85, 1
  store i64 %inc, i64* %from, align 8
  br label %while.cond.88

while.end:                                        ; preds = %land.end
  br label %if.end.94

if.end.94:                                        ; preds = %while.end, %while.body
  %86 = load i8*, i8** %p, align 8
  %87 = load i8*, i8** %stop, align 8
  %cmp95 = icmp uge i8* %86, %87
  br i1 %cmp95, label %if.then.97, label %if.end.111

if.then.97:                                       ; preds = %if.end.94
  %88 = load i8*, i8** %p, align 8
  %89 = load i8*, i8** %pend, align 8
  %cmp98 = icmp uge i8* %88, %89
  br i1 %cmp98, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %if.then.97
  br label %while.end.248

if.end.101:                                       ; preds = %if.then.97
  %90 = load i8*, i8** %pend, align 8
  store i8* %90, i8** %stop, align 8
  %91 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text102 = getelementptr inbounds %struct.buffer, %struct.buffer* %91, i32 0, i32 73
  %92 = load %struct.buffer_text*, %struct.buffer_text** %text102, align 8
  %beg103 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %92, i32 0, i32 0
  %93 = load i8*, i8** %beg103, align 8
  %94 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text104 = getelementptr inbounds %struct.buffer, %struct.buffer* %94, i32 0, i32 73
  %95 = load %struct.buffer_text*, %struct.buffer_text** %text104, align 8
  %gpt_byte105 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %95, i32 0, i32 3
  %96 = load i64, i64* %gpt_byte105, align 8
  %add.ptr106 = getelementptr inbounds i8, i8* %93, i64 %96
  %97 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text107 = getelementptr inbounds %struct.buffer, %struct.buffer* %97, i32 0, i32 73
  %98 = load %struct.buffer_text*, %struct.buffer_text** %text107, align 8
  %gap_size108 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %98, i32 0, i32 5
  %99 = load i64, i64* %gap_size108, align 8
  %add.ptr109 = getelementptr inbounds i8, i8* %add.ptr106, i64 %99
  %add.ptr110 = getelementptr inbounds i8, i8* %add.ptr109, i64 -1
  store i8* %add.ptr110, i8** %p, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.101, %if.end.94
  %100 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %100, i64 0
  %101 = load i8, i8* %arrayidx, align 1
  %conv112 = zext i8 %101 to i32
  %and = and i32 %conv112, 128
  %tobool113 = icmp ne i32 %and, 0
  br i1 %tobool113, label %cond.false.117, label %cond.true.114

cond.true.114:                                    ; preds = %if.end.111
  %102 = load i8*, i8** %p, align 8
  %incdec.ptr115 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %incdec.ptr115, i8** %p, align 8
  %103 = load i8, i8* %102, align 1
  %conv116 = zext i8 %103 to i32
  br label %cond.end.162

cond.false.117:                                   ; preds = %if.end.111
  %104 = load i8*, i8** %p, align 8
  %arrayidx118 = getelementptr inbounds i8, i8* %104, i64 0
  %105 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %105 to i32
  %and120 = and i32 %conv119, 32
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %cond.false.136, label %cond.true.122

cond.true.122:                                    ; preds = %cond.false.117
  %106 = load i8*, i8** %p, align 8
  %add.ptr123 = getelementptr inbounds i8, i8* %106, i64 2
  store i8* %add.ptr123, i8** %p, align 8
  %107 = load i8*, i8** %p, align 8
  %arrayidx124 = getelementptr inbounds i8, i8* %107, i64 -2
  %108 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %108 to i32
  %and126 = and i32 %conv125, 31
  %shl = shl i32 %and126, 6
  %109 = load i8*, i8** %p, align 8
  %arrayidx127 = getelementptr inbounds i8, i8* %109, i64 -1
  %110 = load i8, i8* %arrayidx127, align 1
  %conv128 = zext i8 %110 to i32
  %and129 = and i32 %conv128, 63
  %or = or i32 %shl, %and129
  %111 = load i8*, i8** %p, align 8
  %arrayidx130 = getelementptr inbounds i8, i8* %111, i64 -2
  %112 = load i8, i8* %arrayidx130, align 1
  %conv131 = zext i8 %112 to i32
  %cmp132 = icmp slt i32 %conv131, 194
  %cond134 = select i1 %cmp132, i32 4194176, i32 0
  %or135 = or i32 %or, %cond134
  br label %cond.end.160

cond.false.136:                                   ; preds = %cond.false.117
  %113 = load i8*, i8** %p, align 8
  %arrayidx137 = getelementptr inbounds i8, i8* %113, i64 0
  %114 = load i8, i8* %arrayidx137, align 1
  %conv138 = zext i8 %114 to i32
  %and139 = and i32 %conv138, 16
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %cond.false.156, label %cond.true.141

cond.true.141:                                    ; preds = %cond.false.136
  %115 = load i8*, i8** %p, align 8
  %add.ptr142 = getelementptr inbounds i8, i8* %115, i64 3
  store i8* %add.ptr142, i8** %p, align 8
  %116 = load i8*, i8** %p, align 8
  %arrayidx143 = getelementptr inbounds i8, i8* %116, i64 -3
  %117 = load i8, i8* %arrayidx143, align 1
  %conv144 = zext i8 %117 to i32
  %and145 = and i32 %conv144, 15
  %shl146 = shl i32 %and145, 12
  %118 = load i8*, i8** %p, align 8
  %arrayidx147 = getelementptr inbounds i8, i8* %118, i64 -2
  %119 = load i8, i8* %arrayidx147, align 1
  %conv148 = zext i8 %119 to i32
  %and149 = and i32 %conv148, 63
  %shl150 = shl i32 %and149, 6
  %or151 = or i32 %shl146, %shl150
  %120 = load i8*, i8** %p, align 8
  %arrayidx152 = getelementptr inbounds i8, i8* %120, i64 -1
  %121 = load i8, i8* %arrayidx152, align 1
  %conv153 = zext i8 %121 to i32
  %and154 = and i32 %conv153, 63
  %or155 = or i32 %or151, %and154
  br label %cond.end.158

cond.false.156:                                   ; preds = %cond.false.136
  %122 = load i8*, i8** %p, align 8
  %call157 = call i32 @string_char(i8* %122, i8** %p, i32* null)
  br label %cond.end.158

cond.end.158:                                     ; preds = %cond.false.156, %cond.true.141
  %cond159 = phi i32 [ %or155, %cond.true.141 ], [ %call157, %cond.false.156 ]
  br label %cond.end.160

cond.end.160:                                     ; preds = %cond.end.158, %cond.true.122
  %cond161 = phi i32 [ %or135, %cond.true.122 ], [ %cond159, %cond.end.158 ]
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.end.160, %cond.true.114
  %cond163 = phi i32 [ %conv116, %cond.true.114 ], [ %cond161, %cond.end.160 ]
  store i32 %cond163, i32* %c, align 4
  br i1 true, label %cond.true.164, label %cond.false.168

cond.true.164:                                    ; preds = %cond.end.162
  %123 = load i32, i32* %c, align 4
  %add165 = add i32 %123, 0
  %cmp166 = icmp ult i32 %add165, 128
  br i1 %cmp166, label %land.lhs.true.173, label %land.lhs.true.176

cond.false.168:                                   ; preds = %cond.end.162
  %124 = load i32, i32* %c, align 4
  %conv169 = sext i32 %124 to i64
  %add170 = add i64 %conv169, 0
  %cmp171 = icmp ult i64 %add170, 128
  br i1 %cmp171, label %land.lhs.true.173, label %land.lhs.true.176

land.lhs.true.173:                                ; preds = %cond.false.168, %cond.true.164
  %125 = load i8, i8* %ascii_compatible, align 1
  %tobool174 = trunc i8 %125 to i1
  br i1 %tobool174, label %if.end.188, label %land.lhs.true.176

land.lhs.true.176:                                ; preds = %land.lhs.true.173, %cond.false.168, %cond.true.164
  %126 = load i64, i64* %translation_table, align 8
  %127 = load i32, i32* %c, align 4
  %call177 = call i32 @translate_char(i64 %126, i32 %127)
  %128 = load i64, i64* %charset_list, align 8
  %call178 = call %struct.charset* @char_charset(i32 %call177, i64 %128, i32* null)
  %tobool179 = icmp ne %struct.charset* %call178, null
  br i1 %tobool179, label %if.end.188, label %if.then.180

if.then.180:                                      ; preds = %land.lhs.true.176
  %129 = load i64, i64* %from, align 8
  %shl181 = shl i64 %129, 2
  %add182 = add i64 %shl181, 2
  %130 = load i64, i64* %positions, align 8
  %call183 = call i64 @Fcons(i64 %add182, i64 %130)
  store i64 %call183, i64* %positions, align 8
  %131 = load i64, i64* %n, align 8
  %dec = add nsw i64 %131, -1
  store i64 %dec, i64* %n, align 8
  %132 = load i64, i64* %n, align 8
  %cmp184 = icmp eq i64 %132, 0
  br i1 %cmp184, label %if.then.186, label %if.end.187

if.then.186:                                      ; preds = %if.then.180
  br label %while.end.248

if.end.187:                                       ; preds = %if.then.180
  br label %if.end.188

if.end.188:                                       ; preds = %if.end.187, %land.lhs.true.176, %land.lhs.true.173
  %133 = load i64, i64* %from, align 8
  %inc189 = add nsw i64 %133, 1
  store i64 %inc189, i64* %from, align 8
  %134 = load i8, i8* @charset_map_loaded, align 1
  %tobool190 = trunc i8 %134 to i1
  br i1 %tobool190, label %land.lhs.true.192, label %if.end.247

land.lhs.true.192:                                ; preds = %if.end.188
  %135 = load i64, i64* %string.addr, align 8
  %call193 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp194 = icmp eq i64 %135, %call193
  br i1 %cmp194, label %if.then.196, label %if.end.247

if.then.196:                                      ; preds = %land.lhs.true.192
  %136 = load i64, i64* %from, align 8
  %137 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text197 = getelementptr inbounds %struct.buffer, %struct.buffer* %137, i32 0, i32 73
  %138 = load %struct.buffer_text*, %struct.buffer_text** %text197, align 8
  %gpt198 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %138, i32 0, i32 1
  %139 = load i64, i64* %gpt198, align 8
  %cmp199 = icmp sge i64 %136, %139
  br i1 %cmp199, label %cond.true.201, label %cond.false.204

cond.true.201:                                    ; preds = %if.then.196
  %140 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text202 = getelementptr inbounds %struct.buffer, %struct.buffer* %140, i32 0, i32 73
  %141 = load %struct.buffer_text*, %struct.buffer_text** %text202, align 8
  %gap_size203 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %141, i32 0, i32 5
  %142 = load i64, i64* %gap_size203, align 8
  br label %cond.end.205

cond.false.204:                                   ; preds = %if.then.196
  br label %cond.end.205

cond.end.205:                                     ; preds = %cond.false.204, %cond.true.201
  %cond206 = phi i64 [ %142, %cond.true.201 ], [ 0, %cond.false.204 ]
  %143 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %144 = load i64, i64* %from, align 8
  %call207 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %143, i64 %144)
  %add208 = add nsw i64 %cond206, %call207
  %145 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text209 = getelementptr inbounds %struct.buffer, %struct.buffer* %145, i32 0, i32 73
  %146 = load %struct.buffer_text*, %struct.buffer_text** %text209, align 8
  %beg210 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %146, i32 0, i32 0
  %147 = load i8*, i8** %beg210, align 8
  %add.ptr211 = getelementptr inbounds i8, i8* %147, i64 %add208
  %add.ptr212 = getelementptr inbounds i8, i8* %add.ptr211, i64 -1
  store i8* %add.ptr212, i8** %p, align 8
  %148 = load i64, i64* %to, align 8
  %149 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text213 = getelementptr inbounds %struct.buffer, %struct.buffer* %149, i32 0, i32 73
  %150 = load %struct.buffer_text*, %struct.buffer_text** %text213, align 8
  %gpt214 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %150, i32 0, i32 1
  %151 = load i64, i64* %gpt214, align 8
  %cmp215 = icmp sge i64 %148, %151
  br i1 %cmp215, label %cond.true.217, label %cond.false.220

cond.true.217:                                    ; preds = %cond.end.205
  %152 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text218 = getelementptr inbounds %struct.buffer, %struct.buffer* %152, i32 0, i32 73
  %153 = load %struct.buffer_text*, %struct.buffer_text** %text218, align 8
  %gap_size219 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %153, i32 0, i32 5
  %154 = load i64, i64* %gap_size219, align 8
  br label %cond.end.221

cond.false.220:                                   ; preds = %cond.end.205
  br label %cond.end.221

cond.end.221:                                     ; preds = %cond.false.220, %cond.true.217
  %cond222 = phi i64 [ %154, %cond.true.217 ], [ 0, %cond.false.220 ]
  %155 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %156 = load i64, i64* %to, align 8
  %call223 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %155, i64 %156)
  %add224 = add nsw i64 %cond222, %call223
  %157 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text225 = getelementptr inbounds %struct.buffer, %struct.buffer* %157, i32 0, i32 73
  %158 = load %struct.buffer_text*, %struct.buffer_text** %text225, align 8
  %beg226 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %158, i32 0, i32 0
  %159 = load i8*, i8** %beg226, align 8
  %add.ptr227 = getelementptr inbounds i8, i8* %159, i64 %add224
  %add.ptr228 = getelementptr inbounds i8, i8* %add.ptr227, i64 -1
  store i8* %add.ptr228, i8** %pend, align 8
  %160 = load i64, i64* %from, align 8
  %161 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text229 = getelementptr inbounds %struct.buffer, %struct.buffer* %161, i32 0, i32 73
  %162 = load %struct.buffer_text*, %struct.buffer_text** %text229, align 8
  %gpt230 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %162, i32 0, i32 1
  %163 = load i64, i64* %gpt230, align 8
  %cmp231 = icmp slt i64 %160, %163
  br i1 %cmp231, label %land.lhs.true.233, label %if.else.245

land.lhs.true.233:                                ; preds = %cond.end.221
  %164 = load i64, i64* %to, align 8
  %165 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text234 = getelementptr inbounds %struct.buffer, %struct.buffer* %165, i32 0, i32 73
  %166 = load %struct.buffer_text*, %struct.buffer_text** %text234, align 8
  %gpt235 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %166, i32 0, i32 1
  %167 = load i64, i64* %gpt235, align 8
  %cmp236 = icmp sge i64 %164, %167
  br i1 %cmp236, label %if.then.238, label %if.else.245

if.then.238:                                      ; preds = %land.lhs.true.233
  %168 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text239 = getelementptr inbounds %struct.buffer, %struct.buffer* %168, i32 0, i32 73
  %169 = load %struct.buffer_text*, %struct.buffer_text** %text239, align 8
  %beg240 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %169, i32 0, i32 0
  %170 = load i8*, i8** %beg240, align 8
  %171 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text241 = getelementptr inbounds %struct.buffer, %struct.buffer* %171, i32 0, i32 73
  %172 = load %struct.buffer_text*, %struct.buffer_text** %text241, align 8
  %gpt_byte242 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %172, i32 0, i32 3
  %173 = load i64, i64* %gpt_byte242, align 8
  %add.ptr243 = getelementptr inbounds i8, i8* %170, i64 %173
  %add.ptr244 = getelementptr inbounds i8, i8* %add.ptr243, i64 -1
  store i8* %add.ptr244, i8** %stop, align 8
  br label %if.end.246

if.else.245:                                      ; preds = %land.lhs.true.233, %cond.end.221
  %174 = load i8*, i8** %pend, align 8
  store i8* %174, i8** %stop, align 8
  br label %if.end.246

if.end.246:                                       ; preds = %if.else.245, %if.then.238
  store i8 0, i8* @charset_map_loaded, align 1
  br label %if.end.247

if.end.247:                                       ; preds = %if.end.246, %land.lhs.true.192, %if.end.188
  br label %while.body

while.end.248:                                    ; preds = %if.then.186, %if.then.100
  %175 = load i64, i64* %count.addr, align 8
  %call249 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp250 = icmp eq i64 %175, %call249
  br i1 %cmp250, label %cond.true.252, label %cond.false.254

cond.true.252:                                    ; preds = %while.end.248
  %176 = load i64, i64* %positions, align 8
  %call253 = call i64 @Fcar(i64 %176)
  br label %cond.end.256

cond.false.254:                                   ; preds = %while.end.248
  %177 = load i64, i64* %positions, align 8
  %call255 = call i64 @Fnreverse(i64 %177)
  br label %cond.end.256

cond.end.256:                                     ; preds = %cond.false.254, %cond.true.252
  %cond257 = phi i64 [ %call253, %cond.true.252 ], [ %call255, %cond.false.254 ]
  store i64 %cond257, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.256, %if.then.75, %if.then.62, %if.then.22, %if.then
  %178 = load i64, i64* %retval
  ret i64 %178
}

declare void @validate_subarray(i64, i64, i64, i64, i64*, i64*) #1

declare i64 @string_char_to_byte(i64, i64) #1

declare %struct.charset* @char_charset(i32, i64, i32*) #1

declare i32 @translate_char(i64, i32) #1

declare i64 @Fcar(i64) #1

declare i64 @Fnreverse(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fcheck_coding_systems_region(i64 %start, i64 %end, i64 %coding_system_list) #0 {
entry:
  %retval = alloca i64, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %coding_system_list.addr = alloca i64, align 8
  %list = alloca i64, align 8
  %start_byte = alloca i64, align 8
  %end_byte = alloca i64, align 8
  %pos = alloca i64, align 8
  %p = alloca i8*, align 8
  %pbeg = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %c = alloca i32, align 4
  %tail = alloca i64, align 8
  %elt = alloca i64, align 8
  %attrs = alloca i64, align 8
  %p_offset = alloca i64, align 8
  %pend_offset = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %coding_system_list, i64* %coding_system_list.addr, align 8
  %0 = load i64, i64* %start.addr, align 8
  %call = call zeroext i1 @STRINGP(i64 %0)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %start.addr, align 8
  %call1 = call zeroext i1 @STRING_MULTIBYTE(i64 %1)
  br i1 %call1, label %lor.lhs.false, label %if.then.4

lor.lhs.false:                                    ; preds = %if.then
  %2 = load i64, i64* %start.addr, align 8
  %call2 = call i64 @SCHARS(i64 %2)
  %3 = load i64, i64* %start.addr, align 8
  %call3 = call i64 @SBYTES(i64 %3)
  %cmp = icmp eq i64 %call2, %call3
  br i1 %cmp, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %lor.lhs.false, %if.then
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call5, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i64 0, i64* %start_byte, align 8
  %4 = load i64, i64* %start.addr, align 8
  %call6 = call i64 @SBYTES(i64 %4)
  store i64 %call6, i64* %end_byte, align 8
  store i64 0, i64* %pos, align 8
  br label %if.end.106

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %5 = load i64, i64* %start.addr, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp7 = icmp eq i32 %conv, 1
  br i1 %cmp7, label %land.lhs.true, label %if.else.15

land.lhs.true:                                    ; preds = %do.body
  %6 = load i64, i64* %start.addr, align 8
  %call9 = call i32 @XMISCTYPE(i64 %6)
  %cmp10 = icmp eq i32 %call9, 24236
  br i1 %cmp10, label %if.then.12, label %if.else.15

if.then.12:                                       ; preds = %land.lhs.true
  %7 = load i64, i64* %start.addr, align 8
  %call13 = call i64 @marker_position(i64 %7)
  %call14 = call i64 @make_natnum(i64 %call13)
  store i64 %call14, i64* %start.addr, align 8
  br label %if.end.22

if.else.15:                                       ; preds = %land.lhs.true, %do.body
  %8 = load i64, i64* %start.addr, align 8
  %and16 = and i64 %8, 7
  %conv17 = trunc i64 %and16 to i32
  %and18 = and i32 %conv17, -5
  %cmp19 = icmp eq i32 %and18, 2
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.15
  br label %cond.end

cond.false:                                       ; preds = %if.else.15
  %call21 = call i64 @builtin_lisp_symbol(i32 558)
  %9 = load i64, i64* %start.addr, align 8
  %10 = call i64 @wrong_type_argument(i64 %call21, i64 %9) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %11, %cond.true
  br label %if.end.22

if.end.22:                                        ; preds = %cond.end, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.22
  br label %do.body.23

do.body.23:                                       ; preds = %do.end
  %12 = load i64, i64* %end.addr, align 8
  %and24 = and i64 %12, 7
  %conv25 = trunc i64 %and24 to i32
  %cmp26 = icmp eq i32 %conv25, 1
  br i1 %cmp26, label %land.lhs.true.28, label %if.else.35

land.lhs.true.28:                                 ; preds = %do.body.23
  %13 = load i64, i64* %end.addr, align 8
  %call29 = call i32 @XMISCTYPE(i64 %13)
  %cmp30 = icmp eq i32 %call29, 24236
  br i1 %cmp30, label %if.then.32, label %if.else.35

if.then.32:                                       ; preds = %land.lhs.true.28
  %14 = load i64, i64* %end.addr, align 8
  %call33 = call i64 @marker_position(i64 %14)
  %call34 = call i64 @make_natnum(i64 %call33)
  store i64 %call34, i64* %end.addr, align 8
  br label %if.end.45

if.else.35:                                       ; preds = %land.lhs.true.28, %do.body.23
  %15 = load i64, i64* %end.addr, align 8
  %and36 = and i64 %15, 7
  %conv37 = trunc i64 %and36 to i32
  %and38 = and i32 %conv37, -5
  %cmp39 = icmp eq i32 %and38, 2
  br i1 %cmp39, label %cond.true.41, label %cond.false.42

cond.true.41:                                     ; preds = %if.else.35
  br label %cond.end.44

cond.false.42:                                    ; preds = %if.else.35
  %call43 = call i64 @builtin_lisp_symbol(i32 558)
  %16 = load i64, i64* %end.addr, align 8
  %17 = call i64 @wrong_type_argument(i64 %call43, i64 %16) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.44

cond.end.44:                                      ; preds = %18, %cond.true.41
  br label %if.end.45

if.end.45:                                        ; preds = %cond.end.44, %if.then.32
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  %19 = load i64, i64* %start.addr, align 8
  %shr = ashr i64 %19, 2
  %cmp47 = icmp slt i64 %shr, 1
  br i1 %cmp47, label %if.then.58, label %lor.lhs.false.49

lor.lhs.false.49:                                 ; preds = %do.end.46
  %20 = load i64, i64* %end.addr, align 8
  %shr50 = ashr i64 %20, 2
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 73
  %22 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %22, i32 0, i32 2
  %23 = load i64, i64* %z, align 8
  %cmp51 = icmp sgt i64 %shr50, %23
  br i1 %cmp51, label %if.then.58, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %lor.lhs.false.49
  %24 = load i64, i64* %start.addr, align 8
  %shr54 = ashr i64 %24, 2
  %25 = load i64, i64* %end.addr, align 8
  %shr55 = ashr i64 %25, 2
  %cmp56 = icmp sgt i64 %shr54, %shr55
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %lor.lhs.false.53, %lor.lhs.false.49, %do.end.46
  %26 = load i64, i64* %start.addr, align 8
  %27 = load i64, i64* %end.addr, align 8
  call void @args_out_of_range(i64 %26, i64 %27) #6
  unreachable

if.end.59:                                        ; preds = %lor.lhs.false.53
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 39
  %29 = load i64, i64* %enable_multibyte_characters_, align 8
  %call60 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp61 = icmp eq i64 %29, %call60
  br i1 %cmp61, label %if.then.63, label %if.end.65

if.then.63:                                       ; preds = %if.end.59
  %call64 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call64, i64* %retval
  br label %return

if.end.65:                                        ; preds = %if.end.59
  %30 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %31 = load i64, i64* %start.addr, align 8
  %shr66 = ashr i64 %31, 2
  %call67 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %30, i64 %shr66)
  store i64 %call67, i64* %start_byte, align 8
  %32 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %33 = load i64, i64* %end.addr, align 8
  %shr68 = ashr i64 %33, 2
  %call69 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %32, i64 %shr68)
  store i64 %call69, i64* %end_byte, align 8
  %34 = load i64, i64* %end.addr, align 8
  %shr70 = ashr i64 %34, 2
  %35 = load i64, i64* %start.addr, align 8
  %shr71 = ashr i64 %35, 2
  %sub = sub nsw i64 %shr70, %shr71
  %36 = load i64, i64* %end_byte, align 8
  %37 = load i64, i64* %start_byte, align 8
  %sub72 = sub nsw i64 %36, %37
  %cmp73 = icmp eq i64 %sub, %sub72
  br i1 %cmp73, label %if.then.75, label %if.end.77

if.then.75:                                       ; preds = %if.end.65
  %call76 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call76, i64* %retval
  br label %return

if.end.77:                                        ; preds = %if.end.65
  %38 = load i64, i64* %start.addr, align 8
  %shr78 = ashr i64 %38, 2
  %39 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text79 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 73
  %40 = load %struct.buffer_text*, %struct.buffer_text** %text79, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %40, i32 0, i32 1
  %41 = load i64, i64* %gpt, align 8
  %cmp80 = icmp slt i64 %shr78, %41
  br i1 %cmp80, label %land.lhs.true.82, label %if.end.104

land.lhs.true.82:                                 ; preds = %if.end.77
  %42 = load i64, i64* %end.addr, align 8
  %shr83 = ashr i64 %42, 2
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text84 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 73
  %44 = load %struct.buffer_text*, %struct.buffer_text** %text84, align 8
  %gpt85 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %44, i32 0, i32 1
  %45 = load i64, i64* %gpt85, align 8
  %cmp86 = icmp sgt i64 %shr83, %45
  br i1 %cmp86, label %if.then.88, label %if.end.104

if.then.88:                                       ; preds = %land.lhs.true.82
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text89 = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 73
  %47 = load %struct.buffer_text*, %struct.buffer_text** %text89, align 8
  %gpt90 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %47, i32 0, i32 1
  %48 = load i64, i64* %gpt90, align 8
  %49 = load i64, i64* %start.addr, align 8
  %shr91 = ashr i64 %49, 2
  %sub92 = sub nsw i64 %48, %shr91
  %50 = load i64, i64* %end.addr, align 8
  %shr93 = ashr i64 %50, 2
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text94 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 73
  %52 = load %struct.buffer_text*, %struct.buffer_text** %text94, align 8
  %gpt95 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %52, i32 0, i32 1
  %53 = load i64, i64* %gpt95, align 8
  %sub96 = sub nsw i64 %shr93, %53
  %cmp97 = icmp slt i64 %sub92, %sub96
  br i1 %cmp97, label %if.then.99, label %if.else.101

if.then.99:                                       ; preds = %if.then.88
  %54 = load i64, i64* %start.addr, align 8
  %shr100 = ashr i64 %54, 2
  %55 = load i64, i64* %start_byte, align 8
  call void @move_gap_both(i64 %shr100, i64 %55)
  br label %if.end.103

if.else.101:                                      ; preds = %if.then.88
  %56 = load i64, i64* %end.addr, align 8
  %shr102 = ashr i64 %56, 2
  %57 = load i64, i64* %end_byte, align 8
  call void @move_gap_both(i64 %shr102, i64 %57)
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.101, %if.then.99
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %land.lhs.true.82, %if.end.77
  %58 = load i64, i64* %start.addr, align 8
  %shr105 = ashr i64 %58, 2
  store i64 %shr105, i64* %pos, align 8
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.104, %if.end
  %call107 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call107, i64* %list, align 8
  %59 = load i64, i64* %coding_system_list.addr, align 8
  store i64 %59, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.106
  %60 = load i64, i64* %tail, align 8
  %and108 = and i64 %60, 7
  %conv109 = trunc i64 %and108 to i32
  %cmp110 = icmp eq i32 %conv109, 3
  br i1 %cmp110, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %61 = load i64, i64* %tail, align 8
  %sub112 = sub nsw i64 %61, 3
  %62 = inttoptr i64 %sub112 to i8*
  %63 = bitcast i8* %62 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %63, i32 0, i32 0
  %64 = load i64, i64* %car, align 8
  store i64 %64, i64* %elt, align 8
  %65 = load i64, i64* %elt, align 8
  %66 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call113 = call i64 @builtin_lisp_symbol(i32 0)
  %call114 = call i64 @Fgethash(i64 %65, i64 %66, i64 %call113)
  %call115 = call i64 @AREF(i64 %call114, i64 0)
  store i64 %call115, i64* %attrs, align 8
  %67 = load i64, i64* %attrs, align 8
  %68 = load i64, i64* %attrs, align 8
  %call116 = call i64 @get_translation_table(i64 %68, i1 zeroext true, i32* null)
  call void @ASET(i64 %67, i64 8, i64 %call116)
  %69 = load i64, i64* %elt, align 8
  %70 = load i64, i64* %attrs, align 8
  %call117 = call i64 @list2(i64 %69, i64 %70)
  %71 = load i64, i64* %list, align 8
  %call118 = call i64 @Fcons(i64 %call117, i64 %71)
  store i64 %call118, i64* %list, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %72 = load i64, i64* %tail, align 8
  %sub119 = sub nsw i64 %72, 3
  %73 = inttoptr i64 %sub119 to i8*
  %74 = bitcast i8* %73 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %74, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %75 = load i64, i64* %cdr, align 8
  store i64 %75, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %76 = load i64, i64* %start.addr, align 8
  %call120 = call zeroext i1 @STRINGP(i64 %76)
  br i1 %call120, label %if.then.121, label %if.else.123

if.then.121:                                      ; preds = %for.end
  %77 = load i64, i64* %start.addr, align 8
  %call122 = call i8* @SDATA(i64 %77)
  store i8* %call122, i8** %pbeg, align 8
  store i8* %call122, i8** %p, align 8
  br label %if.end.133

if.else.123:                                      ; preds = %for.end
  %78 = load i64, i64* %start_byte, align 8
  %79 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text124 = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 73
  %80 = load %struct.buffer_text*, %struct.buffer_text** %text124, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %80, i32 0, i32 3
  %81 = load i64, i64* %gpt_byte, align 8
  %cmp125 = icmp sge i64 %78, %81
  br i1 %cmp125, label %cond.true.127, label %cond.false.129

cond.true.127:                                    ; preds = %if.else.123
  %82 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text128 = getelementptr inbounds %struct.buffer, %struct.buffer* %82, i32 0, i32 73
  %83 = load %struct.buffer_text*, %struct.buffer_text** %text128, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %83, i32 0, i32 5
  %84 = load i64, i64* %gap_size, align 8
  br label %cond.end.130

cond.false.129:                                   ; preds = %if.else.123
  br label %cond.end.130

cond.end.130:                                     ; preds = %cond.false.129, %cond.true.127
  %cond = phi i64 [ %84, %cond.true.127 ], [ 0, %cond.false.129 ]
  %85 = load i64, i64* %start_byte, align 8
  %add = add nsw i64 %cond, %85
  %86 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text131 = getelementptr inbounds %struct.buffer, %struct.buffer* %86, i32 0, i32 73
  %87 = load %struct.buffer_text*, %struct.buffer_text** %text131, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %87, i32 0, i32 0
  %88 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %88, i64 %add
  %add.ptr132 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr132, i8** %pbeg, align 8
  store i8* %add.ptr132, i8** %p, align 8
  br label %if.end.133

if.end.133:                                       ; preds = %cond.end.130, %if.then.121
  %89 = load i8*, i8** %p, align 8
  %90 = load i64, i64* %end_byte, align 8
  %91 = load i64, i64* %start_byte, align 8
  %sub134 = sub nsw i64 %90, %91
  %add.ptr135 = getelementptr inbounds i8, i8* %89, i64 %sub134
  store i8* %add.ptr135, i8** %pend, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.133
  %92 = load i8*, i8** %p, align 8
  %93 = load i8*, i8** %pend, align 8
  %cmp136 = icmp ult i8* %92, %93
  br i1 %cmp136, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %94 = load i8*, i8** %p, align 8
  %95 = load i8, i8* %94, align 1
  %conv138 = zext i8 %95 to i32
  %add139 = add i32 %conv138, 0
  %cmp140 = icmp ult i32 %add139, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %96 = phi i1 [ false, %while.cond ], [ %cmp140, %land.rhs ]
  br i1 %96, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %97 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %98 = load i64, i64* %pos, align 8
  %inc = add nsw i64 %98, 1
  store i64 %inc, i64* %pos, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond.142

while.cond.142:                                   ; preds = %while.body.152, %while.end
  %99 = load i8*, i8** %p, align 8
  %100 = load i8*, i8** %pend, align 8
  %cmp143 = icmp ult i8* %99, %100
  br i1 %cmp143, label %land.rhs.145, label %land.end.151

land.rhs.145:                                     ; preds = %while.cond.142
  %101 = load i8*, i8** %pend, align 8
  %add.ptr146 = getelementptr inbounds i8, i8* %101, i64 -1
  %102 = load i8, i8* %add.ptr146, align 1
  %conv147 = zext i8 %102 to i32
  %add148 = add i32 %conv147, 0
  %cmp149 = icmp ult i32 %add148, 128
  br label %land.end.151

land.end.151:                                     ; preds = %land.rhs.145, %while.cond.142
  %103 = phi i1 [ false, %while.cond.142 ], [ %cmp149, %land.rhs.145 ]
  br i1 %103, label %while.body.152, label %while.end.154

while.body.152:                                   ; preds = %land.end.151
  %104 = load i8*, i8** %pend, align 8
  %incdec.ptr153 = getelementptr inbounds i8, i8* %104, i32 -1
  store i8* %incdec.ptr153, i8** %pend, align 8
  br label %while.cond.142

while.end.154:                                    ; preds = %land.end.151
  br label %while.cond.155

while.cond.155:                                   ; preds = %if.end.279, %while.end.154
  %105 = load i8*, i8** %p, align 8
  %106 = load i8*, i8** %pend, align 8
  %cmp156 = icmp ult i8* %105, %106
  br i1 %cmp156, label %while.body.158, label %while.end.281

while.body.158:                                   ; preds = %while.cond.155
  br i1 true, label %cond.true.159, label %cond.false.164

cond.true.159:                                    ; preds = %while.body.158
  %107 = load i8*, i8** %p, align 8
  %108 = load i8, i8* %107, align 1
  %conv160 = zext i8 %108 to i32
  %add161 = add i32 %conv160, 0
  %cmp162 = icmp ult i32 %add161, 128
  br i1 %cmp162, label %if.then.169, label %if.else.171

cond.false.164:                                   ; preds = %while.body.158
  %109 = load i8*, i8** %p, align 8
  %110 = load i8, i8* %109, align 1
  %conv165 = zext i8 %110 to i64
  %add166 = add i64 %conv165, 0
  %cmp167 = icmp ult i64 %add166, 128
  br i1 %cmp167, label %if.then.169, label %if.else.171

if.then.169:                                      ; preds = %cond.false.164, %cond.true.159
  %111 = load i8*, i8** %p, align 8
  %incdec.ptr170 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %incdec.ptr170, i8** %p, align 8
  br label %if.end.279

if.else.171:                                      ; preds = %cond.false.164, %cond.true.159
  %112 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %112, i64 0
  %113 = load i8, i8* %arrayidx, align 1
  %conv172 = zext i8 %113 to i32
  %and173 = and i32 %conv172, 128
  %tobool = icmp ne i32 %and173, 0
  br i1 %tobool, label %cond.false.177, label %cond.true.174

cond.true.174:                                    ; preds = %if.else.171
  %114 = load i8*, i8** %p, align 8
  %incdec.ptr175 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %incdec.ptr175, i8** %p, align 8
  %115 = load i8, i8* %114, align 1
  %conv176 = zext i8 %115 to i32
  br label %cond.end.222

cond.false.177:                                   ; preds = %if.else.171
  %116 = load i8*, i8** %p, align 8
  %arrayidx178 = getelementptr inbounds i8, i8* %116, i64 0
  %117 = load i8, i8* %arrayidx178, align 1
  %conv179 = zext i8 %117 to i32
  %and180 = and i32 %conv179, 32
  %tobool181 = icmp ne i32 %and180, 0
  br i1 %tobool181, label %cond.false.196, label %cond.true.182

cond.true.182:                                    ; preds = %cond.false.177
  %118 = load i8*, i8** %p, align 8
  %add.ptr183 = getelementptr inbounds i8, i8* %118, i64 2
  store i8* %add.ptr183, i8** %p, align 8
  %119 = load i8*, i8** %p, align 8
  %arrayidx184 = getelementptr inbounds i8, i8* %119, i64 -2
  %120 = load i8, i8* %arrayidx184, align 1
  %conv185 = zext i8 %120 to i32
  %and186 = and i32 %conv185, 31
  %shl = shl i32 %and186, 6
  %121 = load i8*, i8** %p, align 8
  %arrayidx187 = getelementptr inbounds i8, i8* %121, i64 -1
  %122 = load i8, i8* %arrayidx187, align 1
  %conv188 = zext i8 %122 to i32
  %and189 = and i32 %conv188, 63
  %or = or i32 %shl, %and189
  %123 = load i8*, i8** %p, align 8
  %arrayidx190 = getelementptr inbounds i8, i8* %123, i64 -2
  %124 = load i8, i8* %arrayidx190, align 1
  %conv191 = zext i8 %124 to i32
  %cmp192 = icmp slt i32 %conv191, 194
  %cond194 = select i1 %cmp192, i32 4194176, i32 0
  %or195 = or i32 %or, %cond194
  br label %cond.end.220

cond.false.196:                                   ; preds = %cond.false.177
  %125 = load i8*, i8** %p, align 8
  %arrayidx197 = getelementptr inbounds i8, i8* %125, i64 0
  %126 = load i8, i8* %arrayidx197, align 1
  %conv198 = zext i8 %126 to i32
  %and199 = and i32 %conv198, 16
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %cond.false.216, label %cond.true.201

cond.true.201:                                    ; preds = %cond.false.196
  %127 = load i8*, i8** %p, align 8
  %add.ptr202 = getelementptr inbounds i8, i8* %127, i64 3
  store i8* %add.ptr202, i8** %p, align 8
  %128 = load i8*, i8** %p, align 8
  %arrayidx203 = getelementptr inbounds i8, i8* %128, i64 -3
  %129 = load i8, i8* %arrayidx203, align 1
  %conv204 = zext i8 %129 to i32
  %and205 = and i32 %conv204, 15
  %shl206 = shl i32 %and205, 12
  %130 = load i8*, i8** %p, align 8
  %arrayidx207 = getelementptr inbounds i8, i8* %130, i64 -2
  %131 = load i8, i8* %arrayidx207, align 1
  %conv208 = zext i8 %131 to i32
  %and209 = and i32 %conv208, 63
  %shl210 = shl i32 %and209, 6
  %or211 = or i32 %shl206, %shl210
  %132 = load i8*, i8** %p, align 8
  %arrayidx212 = getelementptr inbounds i8, i8* %132, i64 -1
  %133 = load i8, i8* %arrayidx212, align 1
  %conv213 = zext i8 %133 to i32
  %and214 = and i32 %conv213, 63
  %or215 = or i32 %or211, %and214
  br label %cond.end.218

cond.false.216:                                   ; preds = %cond.false.196
  %134 = load i8*, i8** %p, align 8
  %call217 = call i32 @string_char(i8* %134, i8** %p, i32* null)
  br label %cond.end.218

cond.end.218:                                     ; preds = %cond.false.216, %cond.true.201
  %cond219 = phi i32 [ %or215, %cond.true.201 ], [ %call217, %cond.false.216 ]
  br label %cond.end.220

cond.end.220:                                     ; preds = %cond.end.218, %cond.true.182
  %cond221 = phi i32 [ %or195, %cond.true.182 ], [ %cond219, %cond.end.218 ]
  br label %cond.end.222

cond.end.222:                                     ; preds = %cond.end.220, %cond.true.174
  %cond223 = phi i32 [ %conv176, %cond.true.174 ], [ %cond221, %cond.end.220 ]
  store i32 %cond223, i32* %c, align 4
  store i8 0, i8* @charset_map_loaded, align 1
  %135 = load i64, i64* %list, align 8
  store i64 %135, i64* %tail, align 8
  br label %for.cond.224

for.cond.224:                                     ; preds = %for.inc.246, %cond.end.222
  %136 = load i64, i64* %tail, align 8
  %and225 = and i64 %136, 7
  %conv226 = trunc i64 %and225 to i32
  %cmp227 = icmp eq i32 %conv226, 3
  br i1 %cmp227, label %for.body.229, label %for.end.250

for.body.229:                                     ; preds = %for.cond.224
  %137 = load i64, i64* %tail, align 8
  %sub230 = sub nsw i64 %137, 3
  %138 = inttoptr i64 %sub230 to i8*
  %139 = bitcast i8* %138 to %struct.Lisp_Cons*
  %car231 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %139, i32 0, i32 0
  %140 = load i64, i64* %car231, align 8
  %sub232 = sub nsw i64 %140, 3
  %141 = inttoptr i64 %sub232 to i8*
  %142 = bitcast i8* %141 to %struct.Lisp_Cons*
  %u233 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %142, i32 0, i32 1
  %cdr234 = bitcast %union.anon.0* %u233 to i64*
  %143 = load i64, i64* %cdr234, align 8
  store i64 %143, i64* %elt, align 8
  %144 = load i32, i32* %c, align 4
  %145 = load i64, i64* %elt, align 8
  %sub235 = sub nsw i64 %145, 3
  %146 = inttoptr i64 %sub235 to i8*
  %147 = bitcast i8* %146 to %struct.Lisp_Cons*
  %car236 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %147, i32 0, i32 0
  %148 = load i64, i64* %car236, align 8
  %call237 = call zeroext i1 @char_encodable_p(i32 %144, i64 %148)
  br i1 %call237, label %if.end.245, label %if.then.238

if.then.238:                                      ; preds = %for.body.229
  %149 = load i64, i64* %elt, align 8
  %150 = load i64, i64* %pos, align 8
  %shl239 = shl i64 %150, 2
  %add240 = add i64 %shl239, 2
  %151 = load i64, i64* %elt, align 8
  %sub241 = sub nsw i64 %151, 3
  %152 = inttoptr i64 %sub241 to i8*
  %153 = bitcast i8* %152 to %struct.Lisp_Cons*
  %u242 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %153, i32 0, i32 1
  %cdr243 = bitcast %union.anon.0* %u242 to i64*
  %154 = load i64, i64* %cdr243, align 8
  %call244 = call i64 @Fcons(i64 %add240, i64 %154)
  call void @XSETCDR(i64 %149, i64 %call244)
  br label %if.end.245

if.end.245:                                       ; preds = %if.then.238, %for.body.229
  br label %for.inc.246

for.inc.246:                                      ; preds = %if.end.245
  %155 = load i64, i64* %tail, align 8
  %sub247 = sub nsw i64 %155, 3
  %156 = inttoptr i64 %sub247 to i8*
  %157 = bitcast i8* %156 to %struct.Lisp_Cons*
  %u248 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %157, i32 0, i32 1
  %cdr249 = bitcast %union.anon.0* %u248 to i64*
  %158 = load i64, i64* %cdr249, align 8
  store i64 %158, i64* %tail, align 8
  br label %for.cond.224

for.end.250:                                      ; preds = %for.cond.224
  %159 = load i8, i8* @charset_map_loaded, align 1
  %tobool251 = trunc i8 %159 to i1
  br i1 %tobool251, label %if.then.252, label %if.end.278

if.then.252:                                      ; preds = %for.end.250
  %160 = load i8*, i8** %p, align 8
  %161 = load i8*, i8** %pbeg, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %160 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %161 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %p_offset, align 8
  %162 = load i8*, i8** %pend, align 8
  %163 = load i8*, i8** %pbeg, align 8
  %sub.ptr.lhs.cast253 = ptrtoint i8* %162 to i64
  %sub.ptr.rhs.cast254 = ptrtoint i8* %163 to i64
  %sub.ptr.sub255 = sub i64 %sub.ptr.lhs.cast253, %sub.ptr.rhs.cast254
  store i64 %sub.ptr.sub255, i64* %pend_offset, align 8
  %164 = load i64, i64* %start.addr, align 8
  %call256 = call zeroext i1 @STRINGP(i64 %164)
  br i1 %call256, label %if.then.257, label %if.else.259

if.then.257:                                      ; preds = %if.then.252
  %165 = load i64, i64* %start.addr, align 8
  %call258 = call i8* @SDATA(i64 %165)
  store i8* %call258, i8** %pbeg, align 8
  br label %if.end.275

if.else.259:                                      ; preds = %if.then.252
  %166 = load i64, i64* %start_byte, align 8
  %167 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text260 = getelementptr inbounds %struct.buffer, %struct.buffer* %167, i32 0, i32 73
  %168 = load %struct.buffer_text*, %struct.buffer_text** %text260, align 8
  %gpt_byte261 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %168, i32 0, i32 3
  %169 = load i64, i64* %gpt_byte261, align 8
  %cmp262 = icmp sge i64 %166, %169
  br i1 %cmp262, label %cond.true.264, label %cond.false.267

cond.true.264:                                    ; preds = %if.else.259
  %170 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text265 = getelementptr inbounds %struct.buffer, %struct.buffer* %170, i32 0, i32 73
  %171 = load %struct.buffer_text*, %struct.buffer_text** %text265, align 8
  %gap_size266 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %171, i32 0, i32 5
  %172 = load i64, i64* %gap_size266, align 8
  br label %cond.end.268

cond.false.267:                                   ; preds = %if.else.259
  br label %cond.end.268

cond.end.268:                                     ; preds = %cond.false.267, %cond.true.264
  %cond269 = phi i64 [ %172, %cond.true.264 ], [ 0, %cond.false.267 ]
  %173 = load i64, i64* %start_byte, align 8
  %add270 = add nsw i64 %cond269, %173
  %174 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text271 = getelementptr inbounds %struct.buffer, %struct.buffer* %174, i32 0, i32 73
  %175 = load %struct.buffer_text*, %struct.buffer_text** %text271, align 8
  %beg272 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %175, i32 0, i32 0
  %176 = load i8*, i8** %beg272, align 8
  %add.ptr273 = getelementptr inbounds i8, i8* %176, i64 %add270
  %add.ptr274 = getelementptr inbounds i8, i8* %add.ptr273, i64 -1
  store i8* %add.ptr274, i8** %pbeg, align 8
  br label %if.end.275

if.end.275:                                       ; preds = %cond.end.268, %if.then.257
  %177 = load i8*, i8** %pbeg, align 8
  %178 = load i64, i64* %p_offset, align 8
  %add.ptr276 = getelementptr inbounds i8, i8* %177, i64 %178
  store i8* %add.ptr276, i8** %p, align 8
  %179 = load i8*, i8** %pbeg, align 8
  %180 = load i64, i64* %pend_offset, align 8
  %add.ptr277 = getelementptr inbounds i8, i8* %179, i64 %180
  store i8* %add.ptr277, i8** %pend, align 8
  br label %if.end.278

if.end.278:                                       ; preds = %if.end.275, %for.end.250
  br label %if.end.279

if.end.279:                                       ; preds = %if.end.278, %if.then.169
  %181 = load i64, i64* %pos, align 8
  %inc280 = add nsw i64 %181, 1
  store i64 %inc280, i64* %pos, align 8
  br label %while.cond.155

while.end.281:                                    ; preds = %while.cond.155
  %182 = load i64, i64* %list, align 8
  store i64 %182, i64* %tail, align 8
  %call282 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call282, i64* %list, align 8
  br label %for.cond.283

for.cond.283:                                     ; preds = %for.inc.314, %while.end.281
  %183 = load i64, i64* %tail, align 8
  %and284 = and i64 %183, 7
  %conv285 = trunc i64 %and284 to i32
  %cmp286 = icmp eq i32 %conv285, 3
  br i1 %cmp286, label %for.body.288, label %for.end.318

for.body.288:                                     ; preds = %for.cond.283
  %184 = load i64, i64* %tail, align 8
  %sub289 = sub nsw i64 %184, 3
  %185 = inttoptr i64 %sub289 to i8*
  %186 = bitcast i8* %185 to %struct.Lisp_Cons*
  %car290 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %186, i32 0, i32 0
  %187 = load i64, i64* %car290, align 8
  store i64 %187, i64* %elt, align 8
  %188 = load i64, i64* %elt, align 8
  %sub291 = sub nsw i64 %188, 3
  %189 = inttoptr i64 %sub291 to i8*
  %190 = bitcast i8* %189 to %struct.Lisp_Cons*
  %u292 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %190, i32 0, i32 1
  %cdr293 = bitcast %union.anon.0* %u292 to i64*
  %191 = load i64, i64* %cdr293, align 8
  %sub294 = sub nsw i64 %191, 3
  %192 = inttoptr i64 %sub294 to i8*
  %193 = bitcast i8* %192 to %struct.Lisp_Cons*
  %u295 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %193, i32 0, i32 1
  %cdr296 = bitcast %union.anon.0* %u295 to i64*
  %194 = load i64, i64* %cdr296, align 8
  %and297 = and i64 %194, 7
  %conv298 = trunc i64 %and297 to i32
  %cmp299 = icmp eq i32 %conv298, 3
  br i1 %cmp299, label %if.then.301, label %if.end.313

if.then.301:                                      ; preds = %for.body.288
  %195 = load i64, i64* %elt, align 8
  %sub302 = sub nsw i64 %195, 3
  %196 = inttoptr i64 %sub302 to i8*
  %197 = bitcast i8* %196 to %struct.Lisp_Cons*
  %car303 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %197, i32 0, i32 0
  %198 = load i64, i64* %car303, align 8
  %199 = load i64, i64* %elt, align 8
  %sub304 = sub nsw i64 %199, 3
  %200 = inttoptr i64 %sub304 to i8*
  %201 = bitcast i8* %200 to %struct.Lisp_Cons*
  %u305 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %201, i32 0, i32 1
  %cdr306 = bitcast %union.anon.0* %u305 to i64*
  %202 = load i64, i64* %cdr306, align 8
  %sub307 = sub nsw i64 %202, 3
  %203 = inttoptr i64 %sub307 to i8*
  %204 = bitcast i8* %203 to %struct.Lisp_Cons*
  %u308 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %204, i32 0, i32 1
  %cdr309 = bitcast %union.anon.0* %u308 to i64*
  %205 = load i64, i64* %cdr309, align 8
  %call310 = call i64 @Fnreverse(i64 %205)
  %call311 = call i64 @Fcons(i64 %198, i64 %call310)
  %206 = load i64, i64* %list, align 8
  %call312 = call i64 @Fcons(i64 %call311, i64 %206)
  store i64 %call312, i64* %list, align 8
  br label %if.end.313

if.end.313:                                       ; preds = %if.then.301, %for.body.288
  br label %for.inc.314

for.inc.314:                                      ; preds = %if.end.313
  %207 = load i64, i64* %tail, align 8
  %sub315 = sub nsw i64 %207, 3
  %208 = inttoptr i64 %sub315 to i8*
  %209 = bitcast i8* %208 to %struct.Lisp_Cons*
  %u316 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %209, i32 0, i32 1
  %cdr317 = bitcast %union.anon.0* %u316 to i64*
  %210 = load i64, i64* %cdr317, align 8
  store i64 %210, i64* %tail, align 8
  br label %for.cond.283

for.end.318:                                      ; preds = %for.cond.283
  %211 = load i64, i64* %list, align 8
  store i64 %211, i64* %retval
  br label %return

return:                                           ; preds = %for.end.318, %if.then.75, %if.then.63, %if.then.4
  %212 = load i64, i64* %retval
  ret i64 %212
}

; Function Attrs: nounwind uwtable
define i64 @Fdecode_coding_region(i64 %start, i64 %end, i64 %coding_system, i64 %destination) #0 {
entry:
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %destination.addr = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %destination, i64* %destination.addr, align 8
  %0 = load i64, i64* %start.addr, align 8
  %1 = load i64, i64* %end.addr, align 8
  %2 = load i64, i64* %coding_system.addr, align 8
  %3 = load i64, i64* %destination.addr, align 8
  %call = call i64 @code_convert_region(i64 %0, i64 %1, i64 %2, i64 %3, i1 zeroext false, i1 zeroext false)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal i64 @code_convert_region(i64 %start, i64 %end, i64 %coding_system, i64 %dst_object, i1 zeroext %encodep, i1 zeroext %norecord) #0 {
entry:
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %dst_object.addr = alloca i64, align 8
  %encodep.addr = alloca i8, align 1
  %norecord.addr = alloca i8, align 1
  %coding = alloca %struct.coding_system, align 8
  %from = alloca i64, align 8
  %from_byte = alloca i64, align 8
  %to = alloca i64, align 8
  %to_byte = alloca i64, align 8
  %src_object = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  %buf_pt = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %dst_object, i64* %dst_object.addr, align 8
  %frombool = zext i1 %encodep to i8
  store i8 %frombool, i8* %encodep.addr, align 1
  %frombool1 = zext i1 %norecord to i8
  store i8 %frombool1, i8* %norecord.addr, align 1
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call2, i64* %coding_system.addr, align 8
  br label %if.end.11

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call3 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %2 = load i64, i64* %coding_system.addr, align 8
  %call4 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call3, i64 %2, i64* null)
  %cmp5 = icmp slt i64 %call4, 0
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %do.body
  %3 = load i64, i64* %coding_system.addr, align 8
  %call6 = call i64 @Fcheck_coding_system(i64 %3)
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %call6, %call7
  br i1 %cmp8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %land.lhs.true
  %call10 = call i64 @builtin_lisp_symbol(i32 280)
  %4 = load i64, i64* %coding_system.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call10, i64 %4) #6
  unreachable

if.end:                                           ; preds = %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.11

if.end.11:                                        ; preds = %do.end, %if.then
  %call12 = call i64 @Fcurrent_buffer()
  store i64 %call12, i64* %src_object, align 8
  %6 = load i64, i64* %dst_object.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp14 = icmp eq i64 %6, %call13
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %if.end.11
  %7 = load i64, i64* %src_object, align 8
  store i64 %7, i64* %dst_object.addr, align 8
  br label %if.end.21

if.else.16:                                       ; preds = %if.end.11
  %8 = load i64, i64* %dst_object.addr, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp18 = icmp eq i64 %8, %call17
  br i1 %cmp18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.else.16
  %9 = load i64, i64* %dst_object.addr, align 8
  call void @CHECK_BUFFER(i64 %9)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.19, %if.else.16
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.then.15
  call void @validate_region(i64* %start.addr, i64* %end.addr)
  %10 = load i64, i64* %start.addr, align 8
  %shr = ashr i64 %10, 2
  store i64 %shr, i64* %from, align 8
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %12 = load i64, i64* %from, align 8
  %call22 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %11, i64 %12)
  store i64 %call22, i64* %from_byte, align 8
  %13 = load i64, i64* %end.addr, align 8
  %shr23 = ashr i64 %13, 2
  store i64 %shr23, i64* %to, align 8
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %15 = load i64, i64* %to, align 8
  %call24 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %14, i64 %15)
  store i64 %call24, i64* %to_byte, align 8
  %16 = load i64, i64* %coding_system.addr, align 8
  call void @setup_coding_system(i64 %16, %struct.coding_system* %coding)
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %bf.load = load i32, i32* %mode, align 8
  %bf.lshr = lshr i32 %bf.load, 14
  %bf.clear = and i32 %bf.lshr, 31
  %or = or i32 %bf.clear, 1
  %bf.load25 = load i32, i32* %mode, align 8
  %bf.value = and i32 %or, 31
  %bf.shl = shl i32 %bf.value, 14
  %bf.clear26 = and i32 %bf.load25, -507905
  %bf.set = or i32 %bf.clear26, %bf.shl
  store i32 %bf.set, i32* %mode, align 8
  %17 = load i64, i64* %dst_object.addr, align 8
  %call27 = call zeroext i1 @BUFFERP(i64 %17)
  br i1 %call27, label %land.lhs.true.28, label %if.end.42

land.lhs.true.28:                                 ; preds = %if.end.21
  %18 = load i64, i64* %dst_object.addr, align 8
  %19 = load i64, i64* %src_object, align 8
  %cmp29 = icmp eq i64 %18, %19
  br i1 %cmp29, label %if.end.42, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true.28
  %20 = load i64, i64* %dst_object.addr, align 8
  %call31 = call %struct.buffer* @XBUFFER(i64 %20)
  store %struct.buffer* %call31, %struct.buffer** %buf, align 8
  %21 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp32 = icmp eq %struct.buffer* %21, %22
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.30
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 75
  %24 = load i64, i64* %pt, align 8
  %add = add nsw i64 %24, 0
  br label %cond.end.40

cond.false:                                       ; preds = %if.then.30
  %25 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 45
  %26 = load i64, i64* %pt_marker_, align 8
  %call33 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp34 = icmp eq i64 %26, %call33
  br i1 %cmp34, label %cond.true.35, label %cond.false.37

cond.true.35:                                     ; preds = %cond.false
  %27 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %pt36 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 75
  %28 = load i64, i64* %pt36, align 8
  br label %cond.end

cond.false.37:                                    ; preds = %cond.false
  %29 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %pt_marker_38 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 45
  %30 = load i64, i64* %pt_marker_38, align 8
  %call39 = call i64 @marker_position(i64 %30)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.37, %cond.true.35
  %cond = phi i64 [ %28, %cond.true.35 ], [ %call39, %cond.false.37 ]
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.end, %cond.true
  %cond41 = phi i64 [ %add, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond41, i64* %buf_pt, align 8
  %31 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %32 = load i64, i64* %buf_pt, align 8
  %33 = load i64, i64* %buf_pt, align 8
  call void @invalidate_buffer_caches(%struct.buffer* %31, i64 %32, i64 %33)
  br label %if.end.42

if.end.42:                                        ; preds = %cond.end.40, %land.lhs.true.28, %if.end.21
  %34 = load i8, i8* %encodep.addr, align 1
  %tobool = trunc i8 %34 to i1
  br i1 %tobool, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %if.end.42
  %35 = load i64, i64* %src_object, align 8
  %36 = load i64, i64* %from, align 8
  %37 = load i64, i64* %from_byte, align 8
  %38 = load i64, i64* %to, align 8
  %39 = load i64, i64* %to_byte, align 8
  %40 = load i64, i64* %dst_object.addr, align 8
  call void @encode_coding_object(%struct.coding_system* %coding, i64 %35, i64 %36, i64 %37, i64 %38, i64 %39, i64 %40)
  br label %if.end.45

if.else.44:                                       ; preds = %if.end.42
  %41 = load i64, i64* %src_object, align 8
  %42 = load i64, i64* %from, align 8
  %43 = load i64, i64* %from_byte, align 8
  %44 = load i64, i64* %to, align 8
  %45 = load i64, i64* %to_byte, align 8
  %46 = load i64, i64* %dst_object.addr, align 8
  call void @decode_coding_object(%struct.coding_system* %coding, i64 %41, i64 %42, i64 %43, i64 %44, i64 %45, i64 %46)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.44, %if.then.43
  %47 = load i8, i8* %norecord.addr, align 1
  %tobool46 = trunc i8 %47 to i1
  br i1 %tobool46, label %if.end.50, label %if.then.47

if.then.47:                                       ; preds = %if.end.45
  %48 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call48 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %48)
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 0
  %49 = load i64, i64* %id, align 8
  %call49 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call48, i64 %49)
  store i64 %call49, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 155), align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.47, %if.end.45
  %50 = load i64, i64* %dst_object.addr, align 8
  %call51 = call zeroext i1 @BUFFERP(i64 %50)
  br i1 %call51, label %cond.true.52, label %cond.false.54

cond.true.52:                                     ; preds = %if.end.50
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 9
  %51 = load i64, i64* %produced_char, align 8
  %shl = shl i64 %51, 2
  %add53 = add i64 %shl, 2
  br label %cond.end.56

cond.false.54:                                    ; preds = %if.end.50
  %dst_object55 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 21
  %52 = load i64, i64* %dst_object55, align 8
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.54, %cond.true.52
  %cond57 = phi i64 [ %add53, %cond.true.52 ], [ %52, %cond.false.54 ]
  ret i64 %cond57
}

; Function Attrs: nounwind uwtable
define i64 @Fencode_coding_region(i64 %start, i64 %end, i64 %coding_system, i64 %destination) #0 {
entry:
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %destination.addr = alloca i64, align 8
  store i64 %start, i64* %start.addr, align 8
  store i64 %end, i64* %end.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %destination, i64* %destination.addr, align 8
  %0 = load i64, i64* %start.addr, align 8
  %1 = load i64, i64* %end.addr, align 8
  %2 = load i64, i64* %coding_system.addr, align 8
  %3 = load i64, i64* %destination.addr, align 8
  %call = call i64 @code_convert_region(i64 %0, i64 %1, i64 %2, i64 %3, i1 zeroext true, i1 zeroext false)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @code_convert_string(i64 %string, i64 %coding_system, i64 %dst_object, i1 zeroext %encodep, i1 zeroext %nocopy, i1 zeroext %norecord) #0 {
entry:
  %retval = alloca i64, align 8
  %string.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %dst_object.addr = alloca i64, align 8
  %encodep.addr = alloca i8, align 1
  %nocopy.addr = alloca i8, align 1
  %norecord.addr = alloca i8, align 1
  %coding = alloca %struct.coding_system, align 8
  %chars = alloca i64, align 8
  %bytes = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  %buf_pt = alloca i64, align 8
  store i64 %string, i64* %string.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %dst_object, i64* %dst_object.addr, align 8
  %frombool = zext i1 %encodep to i8
  store i8 %frombool, i8* %encodep.addr, align 1
  %frombool1 = zext i1 %nocopy to i8
  store i8 %frombool1, i8* %nocopy.addr, align 1
  %frombool2 = zext i1 %norecord to i8
  store i8 %frombool2, i8* %norecord.addr, align 1
  %0 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %2 = load i8, i8* %norecord.addr, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %call4 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call4, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 155), align 8
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %3 = load i64, i64* %dst_object.addr, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %3, %call5
  br i1 %cmp6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end
  %4 = load i8, i8* %nocopy.addr, align 1
  %tobool8 = trunc i8 %4 to i1
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.7
  %5 = load i64, i64* %string.addr, align 8
  %call9 = call i64 @Fcopy_sequence(i64 %5)
  br label %cond.end

cond.false:                                       ; preds = %if.then.7
  %6 = load i64, i64* %string.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call9, %cond.true ], [ %6, %cond.false ]
  store i64 %cond, i64* %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %entry
  %7 = load i64, i64* %coding_system.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %7, %call12
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.end.11
  %call15 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call15, i64* %coding_system.addr, align 8
  br label %if.end.25

if.else:                                          ; preds = %if.end.11
  br label %do.body

do.body:                                          ; preds = %if.else
  %8 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call16 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %8)
  %9 = load i64, i64* %coding_system.addr, align 8
  %call17 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call16, i64 %9, i64* null)
  %cmp18 = icmp slt i64 %call17, 0
  br i1 %cmp18, label %land.lhs.true, label %if.end.24

land.lhs.true:                                    ; preds = %do.body
  %10 = load i64, i64* %coding_system.addr, align 8
  %call19 = call i64 @Fcheck_coding_system(i64 %10)
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %call19, %call20
  br i1 %cmp21, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %land.lhs.true
  %call23 = call i64 @builtin_lisp_symbol(i32 280)
  %11 = load i64, i64* %coding_system.addr, align 8
  %12 = call i64 @wrong_type_argument(i64 %call23, i64 %11) #6
  unreachable

if.end.24:                                        ; preds = %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.24
  br label %if.end.25

if.end.25:                                        ; preds = %do.end, %if.then.14
  %13 = load i64, i64* %dst_object.addr, align 8
  %call26 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp27 = icmp eq i64 %13, %call26
  br i1 %cmp27, label %if.then.28, label %if.else.30

if.then.28:                                       ; preds = %if.end.25
  %call29 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call29, i64* %dst_object.addr, align 8
  br label %if.end.35

if.else.30:                                       ; preds = %if.end.25
  %14 = load i64, i64* %dst_object.addr, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp32 = icmp eq i64 %14, %call31
  br i1 %cmp32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.else.30
  %15 = load i64, i64* %dst_object.addr, align 8
  call void @CHECK_BUFFER(i64 %15)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.else.30
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.28
  %16 = load i64, i64* %coding_system.addr, align 8
  call void @setup_coding_system(i64 %16, %struct.coding_system* %coding)
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %bf.load = load i32, i32* %mode, align 8
  %bf.lshr = lshr i32 %bf.load, 14
  %bf.clear = and i32 %bf.lshr, 31
  %or = or i32 %bf.clear, 1
  %bf.load36 = load i32, i32* %mode, align 8
  %bf.value = and i32 %or, 31
  %bf.shl = shl i32 %bf.value, 14
  %bf.clear37 = and i32 %bf.load36, -507905
  %bf.set = or i32 %bf.clear37, %bf.shl
  store i32 %bf.set, i32* %mode, align 8
  %17 = load i64, i64* %string.addr, align 8
  %call38 = call i64 @SCHARS(i64 %17)
  store i64 %call38, i64* %chars, align 8
  %18 = load i64, i64* %string.addr, align 8
  %call39 = call i64 @SBYTES(i64 %18)
  store i64 %call39, i64* %bytes, align 8
  %19 = load i64, i64* %dst_object.addr, align 8
  %call40 = call zeroext i1 @BUFFERP(i64 %19)
  br i1 %call40, label %if.then.41, label %if.end.57

if.then.41:                                       ; preds = %if.end.35
  %20 = load i64, i64* %dst_object.addr, align 8
  %call42 = call %struct.buffer* @XBUFFER(i64 %20)
  store %struct.buffer* %call42, %struct.buffer** %buf, align 8
  %21 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %22 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp43 = icmp eq %struct.buffer* %21, %22
  br i1 %cmp43, label %cond.true.44, label %cond.false.45

cond.true.44:                                     ; preds = %if.then.41
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 75
  %24 = load i64, i64* %pt, align 8
  %add = add nsw i64 %24, 0
  br label %cond.end.55

cond.false.45:                                    ; preds = %if.then.41
  %25 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %pt_marker_ = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 45
  %26 = load i64, i64* %pt_marker_, align 8
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp47 = icmp eq i64 %26, %call46
  br i1 %cmp47, label %cond.true.48, label %cond.false.50

cond.true.48:                                     ; preds = %cond.false.45
  %27 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %pt49 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 75
  %28 = load i64, i64* %pt49, align 8
  br label %cond.end.53

cond.false.50:                                    ; preds = %cond.false.45
  %29 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %pt_marker_51 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 45
  %30 = load i64, i64* %pt_marker_51, align 8
  %call52 = call i64 @marker_position(i64 %30)
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.50, %cond.true.48
  %cond54 = phi i64 [ %28, %cond.true.48 ], [ %call52, %cond.false.50 ]
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.end.53, %cond.true.44
  %cond56 = phi i64 [ %add, %cond.true.44 ], [ %cond54, %cond.end.53 ]
  store i64 %cond56, i64* %buf_pt, align 8
  %31 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %32 = load i64, i64* %buf_pt, align 8
  %33 = load i64, i64* %buf_pt, align 8
  call void @invalidate_buffer_caches(%struct.buffer* %31, i64 %32, i64 %33)
  br label %if.end.57

if.end.57:                                        ; preds = %cond.end.55, %if.end.35
  %34 = load i8, i8* %encodep.addr, align 1
  %tobool58 = trunc i8 %34 to i1
  br i1 %tobool58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %if.end.57
  %35 = load i64, i64* %string.addr, align 8
  %36 = load i64, i64* %chars, align 8
  %37 = load i64, i64* %bytes, align 8
  %38 = load i64, i64* %dst_object.addr, align 8
  call void @encode_coding_object(%struct.coding_system* %coding, i64 %35, i64 0, i64 0, i64 %36, i64 %37, i64 %38)
  br label %if.end.61

if.else.60:                                       ; preds = %if.end.57
  %39 = load i64, i64* %string.addr, align 8
  %40 = load i64, i64* %chars, align 8
  %41 = load i64, i64* %bytes, align 8
  %42 = load i64, i64* %dst_object.addr, align 8
  call void @decode_coding_object(%struct.coding_system* %coding, i64 %39, i64 0, i64 0, i64 %40, i64 %41, i64 %42)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.60, %if.then.59
  %43 = load i8, i8* %norecord.addr, align 1
  %tobool62 = trunc i8 %43 to i1
  br i1 %tobool62, label %if.end.66, label %if.then.63

if.then.63:                                       ; preds = %if.end.61
  %44 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call64 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %44)
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 0
  %45 = load i64, i64* %id, align 8
  %call65 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call64, i64 %45)
  store i64 %call65, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 155), align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.63, %if.end.61
  %46 = load i64, i64* %dst_object.addr, align 8
  %call67 = call zeroext i1 @BUFFERP(i64 %46)
  br i1 %call67, label %cond.true.68, label %cond.false.70

cond.true.68:                                     ; preds = %if.end.66
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 9
  %47 = load i64, i64* %produced_char, align 8
  %shl = shl i64 %47, 2
  %add69 = add i64 %shl, 2
  br label %cond.end.72

cond.false.70:                                    ; preds = %if.end.66
  %dst_object71 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 21
  %48 = load i64, i64* %dst_object71, align 8
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.70, %cond.true.68
  %cond73 = phi i64 [ %add69, %cond.true.68 ], [ %48, %cond.false.70 ]
  store i64 %cond73, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.72, %cond.end
  %49 = load i64, i64* %retval
  ret i64 %49
}

declare i64 @Fcopy_sequence(i64) #1

declare void @CHECK_BUFFER(i64) #1

declare void @invalidate_buffer_caches(%struct.buffer*, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @code_convert_string_norecord(i64 %string, i64 %coding_system, i1 zeroext %encodep) #0 {
entry:
  %string.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %encodep.addr = alloca i8, align 1
  store i64 %string, i64* %string.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %frombool = zext i1 %encodep to i8
  store i8 %frombool, i8* %encodep.addr, align 1
  %0 = load i64, i64* %string.addr, align 8
  %1 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %2 = load i8, i8* %encodep.addr, align 1
  %tobool = trunc i8 %2 to i1
  %call1 = call i64 @code_convert_string(i64 %0, i64 %1, i64 %call, i1 zeroext %tobool, i1 zeroext false, i1 zeroext true)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @decode_file_name(i64 %fname) #0 {
entry:
  %retval = alloca i64, align 8
  %fname.addr = alloca i64, align 8
  store i64 %fname, i64* %fname.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 94), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %fname.addr, align 8
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 94), align 8
  %call1 = call i64 @code_convert_string_norecord(i64 %1, i64 %2, i1 zeroext false)
  store i64 %call1, i64* %retval
  br label %return

if.else:                                          ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 59), align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %3, %call2
  br i1 %cmp3, label %if.else.6, label %if.then.4

if.then.4:                                        ; preds = %if.else
  %4 = load i64, i64* %fname.addr, align 8
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 59), align 8
  %call5 = call i64 @code_convert_string_norecord(i64 %4, i64 %5, i1 zeroext false)
  store i64 %call5, i64* %retval
  br label %return

if.else.6:                                        ; preds = %if.else
  %6 = load i64, i64* %fname.addr, align 8
  store i64 %6, i64* %retval
  br label %return

return:                                           ; preds = %if.else.6, %if.then.4, %if.then
  %7 = load i64, i64* %retval
  ret i64 %7
}

; Function Attrs: nounwind uwtable
define i64 @encode_file_name(i64 %fname) #0 {
entry:
  %retval = alloca i64, align 8
  %fname.addr = alloca i64, align 8
  store i64 %fname, i64* %fname.addr, align 8
  %0 = load i64, i64* %fname.addr, align 8
  %call = call zeroext i1 @STRING_MULTIBYTE(i64 %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %fname.addr, align 8
  store i64 %1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 94), align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.else, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load i64, i64* %fname.addr, align 8
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 94), align 8
  %call3 = call i64 @code_convert_string_norecord(i64 %3, i64 %4, i1 zeroext true)
  store i64 %call3, i64* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 59), align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %5, %call4
  br i1 %cmp5, label %if.else.8, label %if.then.6

if.then.6:                                        ; preds = %if.else
  %6 = load i64, i64* %fname.addr, align 8
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 59), align 8
  %call7 = call i64 @code_convert_string_norecord(i64 %6, i64 %7, i1 zeroext true)
  store i64 %call7, i64* %retval
  br label %return

if.else.8:                                        ; preds = %if.else
  %8 = load i64, i64* %fname.addr, align 8
  store i64 %8, i64* %retval
  br label %return

return:                                           ; preds = %if.else.8, %if.then.6, %if.then.2, %if.then
  %9 = load i64, i64* %retval
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define i64 @Fdecode_coding_string(i64 %string, i64 %coding_system, i64 %nocopy, i64 %buffer) #0 {
entry:
  %string.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %nocopy.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  store i64 %string, i64* %string.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %nocopy, i64* %nocopy.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %1 = load i64, i64* %coding_system.addr, align 8
  %2 = load i64, i64* %buffer.addr, align 8
  %3 = load i64, i64* %nocopy.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call
  %lnot = xor i1 %cmp, true
  %call1 = call i64 @code_convert_string(i64 %0, i64 %1, i64 %2, i1 zeroext false, i1 zeroext %lnot, i1 zeroext false)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Fencode_coding_string(i64 %string, i64 %coding_system, i64 %nocopy, i64 %buffer) #0 {
entry:
  %string.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %nocopy.addr = alloca i64, align 8
  %buffer.addr = alloca i64, align 8
  store i64 %string, i64* %string.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %nocopy, i64* %nocopy.addr, align 8
  store i64 %buffer, i64* %buffer.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %1 = load i64, i64* %coding_system.addr, align 8
  %2 = load i64, i64* %buffer.addr, align 8
  %3 = load i64, i64* %nocopy.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call
  %lnot = xor i1 %cmp, true
  %call1 = call i64 @code_convert_string(i64 %0, i64 %1, i64 %2, i1 zeroext true, i1 zeroext %lnot, i1 zeroext false)
  ret i64 %call1
}

; Function Attrs: nounwind uwtable
define i64 @Fdecode_sjis_char(i64 %code) #0 {
entry:
  %retval = alloca i64, align 8
  %code.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  %val = alloca i64, align 8
  %charset_roman = alloca %struct.charset*, align 8
  %charset_kanji = alloca %struct.charset*, align 8
  %charset_kana = alloca %struct.charset*, align 8
  %charset = alloca %struct.charset*, align 8
  %ch = alloca i64, align 8
  %c = alloca i32, align 4
  %c1 = alloca i64, align 8
  %c2 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  store i64 %code, i64* %code.addr, align 8
  %0 = load i64, i64* %code.addr, align 8
  call void @CHECK_NATNUM(i64 %0)
  %1 = load i64, i64* %code.addr, align 8
  %shr = ashr i64 %1, 2
  store i64 %shr, i64* %ch, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load i64, i64* @Vsjis_coding_system, align 8
  %3 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fgethash(i64 %2, i64 %3, i64 %call)
  store i64 %call1, i64* %spec, align 8
  %4 = load i64, i64* %spec, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %5 = load i64, i64* @Vsjis_coding_system, align 8
  %call3 = call i64 @Fcheck_coding_system(i64 %5)
  %6 = load i64, i64* @Vsjis_coding_system, align 8
  %7 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %call5 = call i64 @Fgethash(i64 %6, i64 %7, i64 %call4)
  store i64 %call5, i64* %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %8 = load i64, i64* %spec, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %8, %call6
  br i1 %cmp7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end
  %call9 = call i64 @builtin_lisp_symbol(i32 280)
  %9 = load i64, i64* @Vsjis_coding_system, align 8
  %10 = call i64 @wrong_type_argument(i64 %call9, i64 %9) #6
  unreachable

if.end.10:                                        ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %11 = load i64, i64* %spec, align 8
  %call11 = call i64 @AREF(i64 %11, i64 0)
  store i64 %call11, i64* %attrs, align 8
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %12 = load i64, i64* %ch, align 8
  %add = add nsw i64 %12, 0
  %cmp12 = icmp slt i64 %add, 128
  br i1 %cmp12, label %land.lhs.true, label %if.end.19

cond.false:                                       ; preds = %do.end
  %13 = load i64, i64* %ch, align 8
  %add13 = add i64 %13, 0
  %cmp14 = icmp ult i64 %add13, 128
  br i1 %cmp14, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %14 = load i64, i64* %attrs, align 8
  %call15 = call i64 @AREF(i64 %14, i64 5)
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %call15, %call16
  br i1 %cmp17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %land.lhs.true
  %15 = load i64, i64* %code.addr, align 8
  store i64 %15, i64* %retval
  br label %return

if.end.19:                                        ; preds = %land.lhs.true, %cond.false, %cond.true
  %16 = load i64, i64* %attrs, align 8
  %call20 = call i64 @AREF(i64 %16, i64 4)
  store i64 %call20, i64* %val, align 8
  %17 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %18 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car, align 8
  %shr21 = ashr i64 %21, 2
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %17, i64 %shr21
  store %struct.charset* %add.ptr, %struct.charset** %charset_roman, align 8
  %22 = load i64, i64* %val, align 8
  %sub22 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub22 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %25 = load i64, i64* %cdr, align 8
  store i64 %25, i64* %val, align 8
  %26 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %27 = load i64, i64* %val, align 8
  %sub23 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub23 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car24 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car24, align 8
  %shr25 = ashr i64 %30, 2
  %add.ptr26 = getelementptr inbounds %struct.charset, %struct.charset* %26, i64 %shr25
  store %struct.charset* %add.ptr26, %struct.charset** %charset_kana, align 8
  %31 = load i64, i64* %val, align 8
  %sub27 = sub nsw i64 %31, 3
  %32 = inttoptr i64 %sub27 to i8*
  %33 = bitcast i8* %32 to %struct.Lisp_Cons*
  %u28 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %33, i32 0, i32 1
  %cdr29 = bitcast %union.anon.0* %u28 to i64*
  %34 = load i64, i64* %cdr29, align 8
  store i64 %34, i64* %val, align 8
  %35 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %36 = load i64, i64* %val, align 8
  %sub30 = sub nsw i64 %36, 3
  %37 = inttoptr i64 %sub30 to i8*
  %38 = bitcast i8* %37 to %struct.Lisp_Cons*
  %car31 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %38, i32 0, i32 0
  %39 = load i64, i64* %car31, align 8
  %shr32 = ashr i64 %39, 2
  %add.ptr33 = getelementptr inbounds %struct.charset, %struct.charset* %35, i64 %shr32
  store %struct.charset* %add.ptr33, %struct.charset** %charset_kanji, align 8
  %40 = load i64, i64* %ch, align 8
  %cmp34 = icmp sle i64 %40, 127
  br i1 %cmp34, label %if.then.35, label %if.else

if.then.35:                                       ; preds = %if.end.19
  %41 = load i64, i64* %ch, align 8
  %conv = trunc i64 %41 to i32
  store i32 %conv, i32* %c, align 4
  %42 = load %struct.charset*, %struct.charset** %charset_roman, align 8
  store %struct.charset* %42, %struct.charset** %charset, align 8
  br label %if.end.92

if.else:                                          ; preds = %if.end.19
  %43 = load i64, i64* %ch, align 8
  %cmp36 = icmp sge i64 %43, 160
  br i1 %cmp36, label %land.lhs.true.38, label %if.else.44

land.lhs.true.38:                                 ; preds = %if.else
  %44 = load i64, i64* %ch, align 8
  %cmp39 = icmp slt i64 %44, 223
  br i1 %cmp39, label %if.then.41, label %if.else.44

if.then.41:                                       ; preds = %land.lhs.true.38
  %45 = load i64, i64* %ch, align 8
  %sub42 = sub nsw i64 %45, 128
  %conv43 = trunc i64 %sub42 to i32
  store i32 %conv43, i32* %c, align 4
  %46 = load %struct.charset*, %struct.charset** %charset_kana, align 8
  store %struct.charset* %46, %struct.charset** %charset, align 8
  br label %if.end.91

if.else.44:                                       ; preds = %land.lhs.true.38, %if.else
  %47 = load i64, i64* %ch, align 8
  %shr45 = ashr i64 %47, 8
  store i64 %shr45, i64* %c1, align 8
  %48 = load i64, i64* %ch, align 8
  %and = and i64 %48, 255
  %conv46 = trunc i64 %and to i32
  store i32 %conv46, i32* %c2, align 4
  %49 = load i64, i64* %c1, align 8
  %cmp47 = icmp slt i64 %49, 129
  br i1 %cmp47, label %if.then.66, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.44
  %50 = load i64, i64* %c1, align 8
  %cmp49 = icmp sgt i64 %50, 159
  br i1 %cmp49, label %land.lhs.true.51, label %lor.lhs.false.54

land.lhs.true.51:                                 ; preds = %lor.lhs.false
  %51 = load i64, i64* %c1, align 8
  %cmp52 = icmp slt i64 %51, 224
  br i1 %cmp52, label %if.then.66, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %land.lhs.true.51, %lor.lhs.false
  %52 = load i64, i64* %c1, align 8
  %cmp55 = icmp sgt i64 %52, 239
  br i1 %cmp55, label %if.then.66, label %lor.lhs.false.57

lor.lhs.false.57:                                 ; preds = %lor.lhs.false.54
  %53 = load i32, i32* %c2, align 4
  %cmp58 = icmp slt i32 %53, 64
  br i1 %cmp58, label %if.then.66, label %lor.lhs.false.60

lor.lhs.false.60:                                 ; preds = %lor.lhs.false.57
  %54 = load i32, i32* %c2, align 4
  %cmp61 = icmp eq i32 %54, 127
  br i1 %cmp61, label %if.then.66, label %lor.lhs.false.63

lor.lhs.false.63:                                 ; preds = %lor.lhs.false.60
  %55 = load i32, i32* %c2, align 4
  %cmp64 = icmp sgt i32 %55, 252
  br i1 %cmp64, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %lor.lhs.false.63, %lor.lhs.false.60, %lor.lhs.false.57, %lor.lhs.false.54, %land.lhs.true.51, %if.else.44
  %56 = load i64, i64* %ch, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %56) #6
  unreachable

if.end.67:                                        ; preds = %lor.lhs.false.63
  %57 = load i64, i64* %ch, align 8
  %conv68 = trunc i64 %57 to i32
  store i32 %conv68, i32* %c, align 4
  br label %do.body.69

do.body.69:                                       ; preds = %if.end.67
  %58 = load i32, i32* %c, align 4
  %shr70 = ashr i32 %58, 8
  store i32 %shr70, i32* %s1, align 4
  %59 = load i32, i32* %c, align 4
  %and71 = and i32 %59, 255
  store i32 %and71, i32* %s2, align 4
  %60 = load i32, i32* %s2, align 4
  %cmp72 = icmp sge i32 %60, 159
  br i1 %cmp72, label %if.then.74, label %if.else.79

if.then.74:                                       ; preds = %do.body.69
  %61 = load i32, i32* %s1, align 4
  %mul = mul nsw i32 %61, 2
  %62 = load i32, i32* %s1, align 4
  %cmp75 = icmp sge i32 %62, 224
  %cond = select i1 %cmp75, i32 352, i32 224
  %sub77 = sub nsw i32 %mul, %cond
  store i32 %sub77, i32* %j1, align 4
  %63 = load i32, i32* %s2, align 4
  %sub78 = sub nsw i32 %63, 126
  store i32 %sub78, i32* %j2, align 4
  br label %if.end.89

if.else.79:                                       ; preds = %do.body.69
  %64 = load i32, i32* %s1, align 4
  %mul80 = mul nsw i32 %64, 2
  %65 = load i32, i32* %s1, align 4
  %cmp81 = icmp sge i32 %65, 224
  %cond83 = select i1 %cmp81, i32 353, i32 225
  %sub84 = sub nsw i32 %mul80, %cond83
  store i32 %sub84, i32* %j1, align 4
  %66 = load i32, i32* %s2, align 4
  %67 = load i32, i32* %s2, align 4
  %cmp85 = icmp sge i32 %67, 127
  %cond87 = select i1 %cmp85, i32 32, i32 31
  %sub88 = sub nsw i32 %66, %cond87
  store i32 %sub88, i32* %j2, align 4
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.79, %if.then.74
  %68 = load i32, i32* %j1, align 4
  %shl = shl i32 %68, 8
  %69 = load i32, i32* %j2, align 4
  %or = or i32 %shl, %69
  store i32 %or, i32* %c, align 4
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  %70 = load %struct.charset*, %struct.charset** %charset_kanji, align 8
  store %struct.charset* %70, %struct.charset** %charset, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %do.end.90, %if.then.41
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %if.then.35
  br i1 true, label %cond.true.93, label %cond.false.97

cond.true.93:                                     ; preds = %if.end.92
  %71 = load i32, i32* %c, align 4
  %add94 = add i32 %71, 0
  %cmp95 = icmp ult i32 %add94, 128
  br i1 %cmp95, label %land.lhs.true.102, label %cond.false.106

cond.false.97:                                    ; preds = %if.end.92
  %72 = load i32, i32* %c, align 4
  %conv98 = sext i32 %72 to i64
  %add99 = add i64 %conv98, 0
  %cmp100 = icmp ult i64 %add99, 128
  br i1 %cmp100, label %land.lhs.true.102, label %cond.false.106

land.lhs.true.102:                                ; preds = %cond.false.97, %cond.true.93
  %73 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %73, i32 0, i32 5
  %bf.load = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %cond.true.104, label %cond.false.106

cond.true.104:                                    ; preds = %land.lhs.true.102
  %74 = load i32, i32* %c, align 4
  %conv105 = sext i32 %74 to i64
  br label %cond.end.180

cond.false.106:                                   ; preds = %land.lhs.true.102, %cond.false.97, %cond.true.93
  %75 = load i32, i32* %c, align 4
  %76 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %76, i32 0, i32 10
  %77 = load i32, i32* %min_code, align 4
  %cmp107 = icmp ult i32 %75, %77
  br i1 %cmp107, label %cond.true.112, label %lor.lhs.false.109

lor.lhs.false.109:                                ; preds = %cond.false.106
  %78 = load i32, i32* %c, align 4
  %79 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_code = getelementptr inbounds %struct.charset, %struct.charset* %79, i32 0, i32 11
  %80 = load i32, i32* %max_code, align 4
  %cmp110 = icmp ugt i32 %78, %80
  br i1 %cmp110, label %cond.true.112, label %cond.false.113

cond.true.112:                                    ; preds = %lor.lhs.false.109, %cond.false.106
  br label %cond.end.178

cond.false.113:                                   ; preds = %lor.lhs.false.109
  %81 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %81, i32 0, i32 5
  %bf.load114 = load i8, i8* %unified_p, align 8
  %bf.lshr115 = lshr i8 %bf.load114, 5
  %bf.clear116 = and i8 %bf.lshr115, 1
  %bf.cast117 = trunc i8 %bf.clear116 to i1
  br i1 %bf.cast117, label %cond.true.119, label %cond.false.122

cond.true.119:                                    ; preds = %cond.false.113
  %82 = load %struct.charset*, %struct.charset** %charset, align 8
  %83 = load i32, i32* %c, align 4
  %call120 = call i32 @decode_char(%struct.charset* %82, i32 %83)
  %conv121 = sext i32 %call120 to i64
  br label %cond.end.176

cond.false.122:                                   ; preds = %cond.false.113
  %84 = load %struct.charset*, %struct.charset** %charset, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %84, i32 0, i32 9
  %85 = load i32, i32* %method, align 4
  %cmp123 = icmp eq i32 %85, 0
  br i1 %cmp123, label %cond.true.125, label %cond.false.138

cond.true.125:                                    ; preds = %cond.false.122
  %86 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %86, i32 0, i32 5
  %bf.load126 = load i8, i8* %code_linear_p, align 8
  %bf.clear127 = and i8 %bf.load126, 1
  %bf.cast128 = trunc i8 %bf.clear127 to i1
  br i1 %bf.cast128, label %cond.true.130, label %cond.false.134

cond.true.130:                                    ; preds = %cond.true.125
  %87 = load i32, i32* %c, align 4
  %88 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code131 = getelementptr inbounds %struct.charset, %struct.charset* %88, i32 0, i32 10
  %89 = load i32, i32* %min_code131, align 4
  %sub132 = sub i32 %87, %89
  %90 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %90, i32 0, i32 17
  %91 = load i32, i32* %code_offset, align 4
  %add133 = add nsw i32 %sub132, %91
  br label %cond.end

cond.false.134:                                   ; preds = %cond.true.125
  %92 = load %struct.charset*, %struct.charset** %charset, align 8
  %93 = load i32, i32* %c, align 4
  %call135 = call i32 @decode_char(%struct.charset* %92, i32 %93)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.134, %cond.true.130
  %cond136 = phi i32 [ %add133, %cond.true.130 ], [ %call135, %cond.false.134 ]
  %conv137 = sext i32 %cond136 to i64
  br label %cond.end.174

cond.false.138:                                   ; preds = %cond.false.122
  %94 = load %struct.charset*, %struct.charset** %charset, align 8
  %method139 = getelementptr inbounds %struct.charset, %struct.charset* %94, i32 0, i32 9
  %95 = load i32, i32* %method139, align 4
  %cmp140 = icmp eq i32 %95, 1
  br i1 %cmp140, label %cond.true.142, label %cond.false.169

cond.true.142:                                    ; preds = %cond.false.138
  %96 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p143 = getelementptr inbounds %struct.charset, %struct.charset* %96, i32 0, i32 5
  %bf.load144 = load i8, i8* %code_linear_p143, align 8
  %bf.clear145 = and i8 %bf.load144, 1
  %bf.cast146 = trunc i8 %bf.clear145 to i1
  br i1 %bf.cast146, label %land.lhs.true.148, label %cond.false.164

land.lhs.true.148:                                ; preds = %cond.true.142
  %97 = load i64, i64* @Vcharset_hash_table, align 8
  %call149 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %97)
  %98 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %98, i32 0, i32 1
  %99 = load i64, i64* %hash_index, align 8
  %call150 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call149, i64 %99)
  %call151 = call i64 @AREF(i64 %call150, i64 4)
  %call152 = call zeroext i1 @VECTORP(i64 %call151)
  br i1 %call152, label %cond.true.154, label %cond.false.164

cond.true.154:                                    ; preds = %land.lhs.true.148
  %100 = load i64, i64* @Vcharset_hash_table, align 8
  %call155 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %100)
  %101 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index156 = getelementptr inbounds %struct.charset, %struct.charset* %101, i32 0, i32 1
  %102 = load i64, i64* %hash_index156, align 8
  %call157 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call155, i64 %102)
  %call158 = call i64 @AREF(i64 %call157, i64 4)
  %103 = load i32, i32* %c, align 4
  %104 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code159 = getelementptr inbounds %struct.charset, %struct.charset* %104, i32 0, i32 10
  %105 = load i32, i32* %min_code159, align 4
  %sub160 = sub i32 %103, %105
  %conv161 = zext i32 %sub160 to i64
  %call162 = call i64 @AREF(i64 %call158, i64 %conv161)
  %shr163 = ashr i64 %call162, 2
  br label %cond.end.167

cond.false.164:                                   ; preds = %land.lhs.true.148, %cond.true.142
  %106 = load %struct.charset*, %struct.charset** %charset, align 8
  %107 = load i32, i32* %c, align 4
  %call165 = call i32 @decode_char(%struct.charset* %106, i32 %107)
  %conv166 = sext i32 %call165 to i64
  br label %cond.end.167

cond.end.167:                                     ; preds = %cond.false.164, %cond.true.154
  %cond168 = phi i64 [ %shr163, %cond.true.154 ], [ %conv166, %cond.false.164 ]
  br label %cond.end.172

cond.false.169:                                   ; preds = %cond.false.138
  %108 = load %struct.charset*, %struct.charset** %charset, align 8
  %109 = load i32, i32* %c, align 4
  %call170 = call i32 @decode_char(%struct.charset* %108, i32 %109)
  %conv171 = sext i32 %call170 to i64
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.169, %cond.end.167
  %cond173 = phi i64 [ %cond168, %cond.end.167 ], [ %conv171, %cond.false.169 ]
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.end.172, %cond.end
  %cond175 = phi i64 [ %conv137, %cond.end ], [ %cond173, %cond.end.172 ]
  br label %cond.end.176

cond.end.176:                                     ; preds = %cond.end.174, %cond.true.119
  %cond177 = phi i64 [ %conv121, %cond.true.119 ], [ %cond175, %cond.end.174 ]
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.end.176, %cond.true.112
  %cond179 = phi i64 [ -1, %cond.true.112 ], [ %cond177, %cond.end.176 ]
  br label %cond.end.180

cond.end.180:                                     ; preds = %cond.end.178, %cond.true.104
  %cond181 = phi i64 [ %conv105, %cond.true.104 ], [ %cond179, %cond.end.178 ]
  %conv182 = trunc i64 %cond181 to i32
  store i32 %conv182, i32* %c, align 4
  %110 = load i32, i32* %c, align 4
  %cmp183 = icmp slt i32 %110, 0
  br i1 %cmp183, label %if.then.185, label %if.end.186

if.then.185:                                      ; preds = %cond.end.180
  %111 = load i64, i64* %ch, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %111) #6
  unreachable

if.end.186:                                       ; preds = %cond.end.180
  %112 = load i32, i32* %c, align 4
  %conv187 = sext i32 %112 to i64
  %shl188 = shl i64 %conv187, 2
  %add189 = add i64 %shl188, 2
  store i64 %add189, i64* %retval
  br label %return

return:                                           ; preds = %if.end.186, %if.then.18
  %113 = load i64, i64* %retval
  ret i64 %113
}

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

declare i32 @decode_char(%struct.charset*, i32) #1

; Function Attrs: nounwind uwtable
define i64 @Fencode_sjis_char(i64 %ch) #0 {
entry:
  %retval = alloca i64, align 8
  %ch.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %c = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %code = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %j1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  store i64 %ch, i64* %ch.addr, align 8
  %0 = load i64, i64* %ch.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %ch.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %2 = load i64, i64* %ch.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call1, i64 %2) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %ch.addr, align 8
  %shr2 = ashr i64 %5, 2
  %conv = trunc i64 %shr2 to i32
  store i32 %conv, i32* %c, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end
  %6 = load i64, i64* @Vsjis_coding_system, align 8
  %7 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %call4 = call i64 @Fgethash(i64 %6, i64 %7, i64 %call3)
  store i64 %call4, i64* %spec, align 8
  %8 = load i64, i64* %spec, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %8, %call5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %9 = load i64, i64* @Vsjis_coding_system, align 8
  %call8 = call i64 @Fcheck_coding_system(i64 %9)
  %10 = load i64, i64* @Vsjis_coding_system, align 8
  %11 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %call10 = call i64 @Fgethash(i64 %10, i64 %11, i64 %call9)
  store i64 %call10, i64* %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %12 = load i64, i64* %spec, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %12, %call11
  br i1 %cmp12, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.end
  %call15 = call i64 @builtin_lisp_symbol(i32 280)
  %13 = load i64, i64* @Vsjis_coding_system, align 8
  %14 = call i64 @wrong_type_argument(i64 %call15, i64 %13) #6
  unreachable

if.end.16:                                        ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.16
  %15 = load i64, i64* %spec, align 8
  %call17 = call i64 @AREF(i64 %15, i64 0)
  store i64 %call17, i64* %attrs, align 8
  br i1 true, label %cond.true.18, label %cond.false.21

cond.true.18:                                     ; preds = %do.end
  %16 = load i32, i32* %c, align 4
  %add = add i32 %16, 0
  %cmp19 = icmp ult i32 %add, 128
  br i1 %cmp19, label %land.lhs.true.26, label %if.end.32

cond.false.21:                                    ; preds = %do.end
  %17 = load i32, i32* %c, align 4
  %conv22 = sext i32 %17 to i64
  %add23 = add i64 %conv22, 0
  %cmp24 = icmp ult i64 %add23, 128
  br i1 %cmp24, label %land.lhs.true.26, label %if.end.32

land.lhs.true.26:                                 ; preds = %cond.false.21, %cond.true.18
  %18 = load i64, i64* %attrs, align 8
  %call27 = call i64 @AREF(i64 %18, i64 5)
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp29 = icmp eq i64 %call27, %call28
  br i1 %cmp29, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.26
  %19 = load i64, i64* %ch.addr, align 8
  store i64 %19, i64* %retval
  br label %return

if.end.32:                                        ; preds = %land.lhs.true.26, %cond.false.21, %cond.true.18
  %20 = load i64, i64* %attrs, align 8
  %call33 = call i64 @AREF(i64 %20, i64 4)
  store i64 %call33, i64* %charset_list, align 8
  %21 = load i32, i32* %c, align 4
  %22 = load i64, i64* %charset_list, align 8
  %call34 = call %struct.charset* @char_charset(i32 %21, i64 %22, i32* %code)
  store %struct.charset* %call34, %struct.charset** %charset, align 8
  %23 = load i32, i32* %code, align 4
  %24 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %24, i32 0, i32 15
  %25 = load i32, i32* %invalid_code, align 4
  %cmp35 = icmp eq i32 %23, %25
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.32
  %26 = load i32, i32* %c, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i32 0, i32 0), i32 %26) #6
  unreachable

if.end.38:                                        ; preds = %if.end.32
  br label %do.body.39

do.body.39:                                       ; preds = %if.end.38
  %27 = load i32, i32* %code, align 4
  %shr40 = lshr i32 %27, 8
  store i32 %shr40, i32* %j1, align 4
  %28 = load i32, i32* %code, align 4
  %and = and i32 %28, 255
  store i32 %and, i32* %j2, align 4
  %29 = load i32, i32* %j1, align 4
  %and41 = and i32 %29, 1
  %tobool = icmp ne i32 %and41, 0
  br i1 %tobool, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %do.body.39
  %30 = load i32, i32* %j1, align 4
  %div = sdiv i32 %30, 2
  %31 = load i32, i32* %j1, align 4
  %cmp43 = icmp slt i32 %31, 95
  %cond = select i1 %cmp43, i32 113, i32 177
  %add45 = add nsw i32 %div, %cond
  store i32 %add45, i32* %s1, align 4
  %32 = load i32, i32* %j2, align 4
  %33 = load i32, i32* %j2, align 4
  %cmp46 = icmp sge i32 %33, 96
  %cond48 = select i1 %cmp46, i32 32, i32 31
  %add49 = add nsw i32 %32, %cond48
  store i32 %add49, i32* %s2, align 4
  br label %if.end.56

if.else:                                          ; preds = %do.body.39
  %34 = load i32, i32* %j1, align 4
  %div50 = sdiv i32 %34, 2
  %35 = load i32, i32* %j1, align 4
  %cmp51 = icmp slt i32 %35, 95
  %cond53 = select i1 %cmp51, i32 112, i32 176
  %add54 = add nsw i32 %div50, %cond53
  store i32 %add54, i32* %s1, align 4
  %36 = load i32, i32* %j2, align 4
  %add55 = add nsw i32 %36, 126
  store i32 %add55, i32* %s2, align 4
  br label %if.end.56

if.end.56:                                        ; preds = %if.else, %if.then.42
  %37 = load i32, i32* %s1, align 4
  %shl = shl i32 %37, 8
  %38 = load i32, i32* %s2, align 4
  %or = or i32 %shl, %38
  store i32 %or, i32* %code, align 4
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  %39 = load i32, i32* %code, align 4
  %conv58 = zext i32 %39 to i64
  %shl59 = shl i64 %conv58, 2
  %add60 = add i64 %shl59, 2
  store i64 %add60, i64* %retval
  br label %return

return:                                           ; preds = %do.end.57, %if.then.31
  %40 = load i64, i64* %retval
  ret i64 %40
}

declare zeroext i1 @NATNUMP(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fdecode_big5_char(i64 %code) #0 {
entry:
  %retval = alloca i64, align 8
  %code.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  %val = alloca i64, align 8
  %charset_roman = alloca %struct.charset*, align 8
  %charset_big5 = alloca %struct.charset*, align 8
  %charset = alloca %struct.charset*, align 8
  %ch = alloca i64, align 8
  %c = alloca i32, align 4
  %b1 = alloca i64, align 8
  %b2 = alloca i32, align 4
  store i64 %code, i64* %code.addr, align 8
  %0 = load i64, i64* %code.addr, align 8
  call void @CHECK_NATNUM(i64 %0)
  %1 = load i64, i64* %code.addr, align 8
  %shr = ashr i64 %1, 2
  store i64 %shr, i64* %ch, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load i64, i64* @Vbig5_coding_system, align 8
  %3 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fgethash(i64 %2, i64 %3, i64 %call)
  store i64 %call1, i64* %spec, align 8
  %4 = load i64, i64* %spec, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %5 = load i64, i64* @Vbig5_coding_system, align 8
  %call3 = call i64 @Fcheck_coding_system(i64 %5)
  %6 = load i64, i64* @Vbig5_coding_system, align 8
  %7 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %call5 = call i64 @Fgethash(i64 %6, i64 %7, i64 %call4)
  store i64 %call5, i64* %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %8 = load i64, i64* %spec, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %8, %call6
  br i1 %cmp7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end
  %call9 = call i64 @builtin_lisp_symbol(i32 280)
  %9 = load i64, i64* @Vbig5_coding_system, align 8
  %10 = call i64 @wrong_type_argument(i64 %call9, i64 %9) #6
  unreachable

if.end.10:                                        ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %11 = load i64, i64* %spec, align 8
  %call11 = call i64 @AREF(i64 %11, i64 0)
  store i64 %call11, i64* %attrs, align 8
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %12 = load i64, i64* %ch, align 8
  %add = add nsw i64 %12, 0
  %cmp12 = icmp slt i64 %add, 128
  br i1 %cmp12, label %land.lhs.true, label %if.end.19

cond.false:                                       ; preds = %do.end
  %13 = load i64, i64* %ch, align 8
  %add13 = add i64 %13, 0
  %cmp14 = icmp ult i64 %add13, 128
  br i1 %cmp14, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %14 = load i64, i64* %attrs, align 8
  %call15 = call i64 @AREF(i64 %14, i64 5)
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %call15, %call16
  br i1 %cmp17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %land.lhs.true
  %15 = load i64, i64* %code.addr, align 8
  store i64 %15, i64* %retval
  br label %return

if.end.19:                                        ; preds = %land.lhs.true, %cond.false, %cond.true
  %16 = load i64, i64* %attrs, align 8
  %call20 = call i64 @AREF(i64 %16, i64 4)
  store i64 %call20, i64* %val, align 8
  %17 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %18 = load i64, i64* %val, align 8
  %sub = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car, align 8
  %shr21 = ashr i64 %21, 2
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %17, i64 %shr21
  store %struct.charset* %add.ptr, %struct.charset** %charset_roman, align 8
  %22 = load i64, i64* %val, align 8
  %sub22 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub22 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %25 = load i64, i64* %cdr, align 8
  store i64 %25, i64* %val, align 8
  %26 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %27 = load i64, i64* %val, align 8
  %sub23 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub23 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car24 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car24, align 8
  %shr25 = ashr i64 %30, 2
  %add.ptr26 = getelementptr inbounds %struct.charset, %struct.charset* %26, i64 %shr25
  store %struct.charset* %add.ptr26, %struct.charset** %charset_big5, align 8
  %31 = load i64, i64* %ch, align 8
  %cmp27 = icmp sle i64 %31, 127
  br i1 %cmp27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %if.end.19
  %32 = load i64, i64* %ch, align 8
  %conv = trunc i64 %32 to i32
  store i32 %conv, i32* %c, align 4
  %33 = load %struct.charset*, %struct.charset** %charset_roman, align 8
  store %struct.charset* %33, %struct.charset** %charset, align 8
  br label %if.end.50

if.else:                                          ; preds = %if.end.19
  %34 = load i64, i64* %ch, align 8
  %shr29 = ashr i64 %34, 8
  store i64 %shr29, i64* %b1, align 8
  %35 = load i64, i64* %ch, align 8
  %and = and i64 %35, 127
  %conv30 = trunc i64 %and to i32
  store i32 %conv30, i32* %b2, align 4
  %36 = load i64, i64* %b1, align 8
  %cmp31 = icmp slt i64 %36, 161
  br i1 %cmp31, label %if.then.47, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %37 = load i64, i64* %b1, align 8
  %cmp33 = icmp sgt i64 %37, 254
  br i1 %cmp33, label %if.then.47, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %lor.lhs.false
  %38 = load i32, i32* %b2, align 4
  %cmp36 = icmp slt i32 %38, 64
  br i1 %cmp36, label %if.then.47, label %lor.lhs.false.38

lor.lhs.false.38:                                 ; preds = %lor.lhs.false.35
  %39 = load i32, i32* %b2, align 4
  %cmp39 = icmp sgt i32 %39, 126
  br i1 %cmp39, label %land.lhs.true.41, label %lor.lhs.false.44

land.lhs.true.41:                                 ; preds = %lor.lhs.false.38
  %40 = load i32, i32* %b2, align 4
  %cmp42 = icmp slt i32 %40, 161
  br i1 %cmp42, label %if.then.47, label %lor.lhs.false.44

lor.lhs.false.44:                                 ; preds = %land.lhs.true.41, %lor.lhs.false.38
  %41 = load i32, i32* %b2, align 4
  %cmp45 = icmp sgt i32 %41, 254
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %lor.lhs.false.44, %land.lhs.true.41, %lor.lhs.false.35, %lor.lhs.false, %if.else
  %42 = load i64, i64* %ch, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %42) #6
  unreachable

if.end.48:                                        ; preds = %lor.lhs.false.44
  %43 = load i64, i64* %ch, align 8
  %conv49 = trunc i64 %43 to i32
  store i32 %conv49, i32* %c, align 4
  %44 = load %struct.charset*, %struct.charset** %charset_big5, align 8
  store %struct.charset* %44, %struct.charset** %charset, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.48, %if.then.28
  br i1 true, label %cond.true.51, label %cond.false.55

cond.true.51:                                     ; preds = %if.end.50
  %45 = load i32, i32* %c, align 4
  %add52 = add i32 %45, 0
  %cmp53 = icmp ult i32 %add52, 128
  br i1 %cmp53, label %land.lhs.true.60, label %cond.false.64

cond.false.55:                                    ; preds = %if.end.50
  %46 = load i32, i32* %c, align 4
  %conv56 = sext i32 %46 to i64
  %add57 = add i64 %conv56, 0
  %cmp58 = icmp ult i64 %add57, 128
  br i1 %cmp58, label %land.lhs.true.60, label %cond.false.64

land.lhs.true.60:                                 ; preds = %cond.false.55, %cond.true.51
  %47 = load %struct.charset*, %struct.charset** %charset, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %47, i32 0, i32 5
  %bf.load = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %cond.true.62, label %cond.false.64

cond.true.62:                                     ; preds = %land.lhs.true.60
  %48 = load i32, i32* %c, align 4
  %conv63 = sext i32 %48 to i64
  br label %cond.end.137

cond.false.64:                                    ; preds = %land.lhs.true.60, %cond.false.55, %cond.true.51
  %49 = load i32, i32* %c, align 4
  %50 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %50, i32 0, i32 10
  %51 = load i32, i32* %min_code, align 4
  %cmp65 = icmp ult i32 %49, %51
  br i1 %cmp65, label %cond.true.70, label %lor.lhs.false.67

lor.lhs.false.67:                                 ; preds = %cond.false.64
  %52 = load i32, i32* %c, align 4
  %53 = load %struct.charset*, %struct.charset** %charset, align 8
  %max_code = getelementptr inbounds %struct.charset, %struct.charset* %53, i32 0, i32 11
  %54 = load i32, i32* %max_code, align 4
  %cmp68 = icmp ugt i32 %52, %54
  br i1 %cmp68, label %cond.true.70, label %cond.false.71

cond.true.70:                                     ; preds = %lor.lhs.false.67, %cond.false.64
  br label %cond.end.135

cond.false.71:                                    ; preds = %lor.lhs.false.67
  %55 = load %struct.charset*, %struct.charset** %charset, align 8
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %55, i32 0, i32 5
  %bf.load72 = load i8, i8* %unified_p, align 8
  %bf.lshr73 = lshr i8 %bf.load72, 5
  %bf.clear74 = and i8 %bf.lshr73, 1
  %bf.cast75 = trunc i8 %bf.clear74 to i1
  br i1 %bf.cast75, label %cond.true.77, label %cond.false.80

cond.true.77:                                     ; preds = %cond.false.71
  %56 = load %struct.charset*, %struct.charset** %charset, align 8
  %57 = load i32, i32* %c, align 4
  %call78 = call i32 @decode_char(%struct.charset* %56, i32 %57)
  %conv79 = sext i32 %call78 to i64
  br label %cond.end.133

cond.false.80:                                    ; preds = %cond.false.71
  %58 = load %struct.charset*, %struct.charset** %charset, align 8
  %method = getelementptr inbounds %struct.charset, %struct.charset* %58, i32 0, i32 9
  %59 = load i32, i32* %method, align 4
  %cmp81 = icmp eq i32 %59, 0
  br i1 %cmp81, label %cond.true.83, label %cond.false.95

cond.true.83:                                     ; preds = %cond.false.80
  %60 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %60, i32 0, i32 5
  %bf.load84 = load i8, i8* %code_linear_p, align 8
  %bf.clear85 = and i8 %bf.load84, 1
  %bf.cast86 = trunc i8 %bf.clear85 to i1
  br i1 %bf.cast86, label %cond.true.88, label %cond.false.92

cond.true.88:                                     ; preds = %cond.true.83
  %61 = load i32, i32* %c, align 4
  %62 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code89 = getelementptr inbounds %struct.charset, %struct.charset* %62, i32 0, i32 10
  %63 = load i32, i32* %min_code89, align 4
  %sub90 = sub i32 %61, %63
  %64 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %64, i32 0, i32 17
  %65 = load i32, i32* %code_offset, align 4
  %add91 = add nsw i32 %sub90, %65
  br label %cond.end

cond.false.92:                                    ; preds = %cond.true.83
  %66 = load %struct.charset*, %struct.charset** %charset, align 8
  %67 = load i32, i32* %c, align 4
  %call93 = call i32 @decode_char(%struct.charset* %66, i32 %67)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.92, %cond.true.88
  %cond = phi i32 [ %add91, %cond.true.88 ], [ %call93, %cond.false.92 ]
  %conv94 = sext i32 %cond to i64
  br label %cond.end.131

cond.false.95:                                    ; preds = %cond.false.80
  %68 = load %struct.charset*, %struct.charset** %charset, align 8
  %method96 = getelementptr inbounds %struct.charset, %struct.charset* %68, i32 0, i32 9
  %69 = load i32, i32* %method96, align 4
  %cmp97 = icmp eq i32 %69, 1
  br i1 %cmp97, label %cond.true.99, label %cond.false.126

cond.true.99:                                     ; preds = %cond.false.95
  %70 = load %struct.charset*, %struct.charset** %charset, align 8
  %code_linear_p100 = getelementptr inbounds %struct.charset, %struct.charset* %70, i32 0, i32 5
  %bf.load101 = load i8, i8* %code_linear_p100, align 8
  %bf.clear102 = and i8 %bf.load101, 1
  %bf.cast103 = trunc i8 %bf.clear102 to i1
  br i1 %bf.cast103, label %land.lhs.true.105, label %cond.false.121

land.lhs.true.105:                                ; preds = %cond.true.99
  %71 = load i64, i64* @Vcharset_hash_table, align 8
  %call106 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %71)
  %72 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %72, i32 0, i32 1
  %73 = load i64, i64* %hash_index, align 8
  %call107 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call106, i64 %73)
  %call108 = call i64 @AREF(i64 %call107, i64 4)
  %call109 = call zeroext i1 @VECTORP(i64 %call108)
  br i1 %call109, label %cond.true.111, label %cond.false.121

cond.true.111:                                    ; preds = %land.lhs.true.105
  %74 = load i64, i64* @Vcharset_hash_table, align 8
  %call112 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %74)
  %75 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index113 = getelementptr inbounds %struct.charset, %struct.charset* %75, i32 0, i32 1
  %76 = load i64, i64* %hash_index113, align 8
  %call114 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call112, i64 %76)
  %call115 = call i64 @AREF(i64 %call114, i64 4)
  %77 = load i32, i32* %c, align 4
  %78 = load %struct.charset*, %struct.charset** %charset, align 8
  %min_code116 = getelementptr inbounds %struct.charset, %struct.charset* %78, i32 0, i32 10
  %79 = load i32, i32* %min_code116, align 4
  %sub117 = sub i32 %77, %79
  %conv118 = zext i32 %sub117 to i64
  %call119 = call i64 @AREF(i64 %call115, i64 %conv118)
  %shr120 = ashr i64 %call119, 2
  br label %cond.end.124

cond.false.121:                                   ; preds = %land.lhs.true.105, %cond.true.99
  %80 = load %struct.charset*, %struct.charset** %charset, align 8
  %81 = load i32, i32* %c, align 4
  %call122 = call i32 @decode_char(%struct.charset* %80, i32 %81)
  %conv123 = sext i32 %call122 to i64
  br label %cond.end.124

cond.end.124:                                     ; preds = %cond.false.121, %cond.true.111
  %cond125 = phi i64 [ %shr120, %cond.true.111 ], [ %conv123, %cond.false.121 ]
  br label %cond.end.129

cond.false.126:                                   ; preds = %cond.false.95
  %82 = load %struct.charset*, %struct.charset** %charset, align 8
  %83 = load i32, i32* %c, align 4
  %call127 = call i32 @decode_char(%struct.charset* %82, i32 %83)
  %conv128 = sext i32 %call127 to i64
  br label %cond.end.129

cond.end.129:                                     ; preds = %cond.false.126, %cond.end.124
  %cond130 = phi i64 [ %cond125, %cond.end.124 ], [ %conv128, %cond.false.126 ]
  br label %cond.end.131

cond.end.131:                                     ; preds = %cond.end.129, %cond.end
  %cond132 = phi i64 [ %conv94, %cond.end ], [ %cond130, %cond.end.129 ]
  br label %cond.end.133

cond.end.133:                                     ; preds = %cond.end.131, %cond.true.77
  %cond134 = phi i64 [ %conv79, %cond.true.77 ], [ %cond132, %cond.end.131 ]
  br label %cond.end.135

cond.end.135:                                     ; preds = %cond.end.133, %cond.true.70
  %cond136 = phi i64 [ -1, %cond.true.70 ], [ %cond134, %cond.end.133 ]
  br label %cond.end.137

cond.end.137:                                     ; preds = %cond.end.135, %cond.true.62
  %cond138 = phi i64 [ %conv63, %cond.true.62 ], [ %cond136, %cond.end.135 ]
  %conv139 = trunc i64 %cond138 to i32
  store i32 %conv139, i32* %c, align 4
  %84 = load i32, i32* %c, align 4
  %cmp140 = icmp slt i32 %84, 0
  br i1 %cmp140, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %cond.end.137
  %85 = load i64, i64* %ch, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %85) #6
  unreachable

if.end.143:                                       ; preds = %cond.end.137
  %86 = load i32, i32* %c, align 4
  %conv144 = sext i32 %86 to i64
  %shl = shl i64 %conv144, 2
  %add145 = add i64 %shl, 2
  store i64 %add145, i64* %retval
  br label %return

return:                                           ; preds = %if.end.143, %if.then.18
  %87 = load i64, i64* %retval
  ret i64 %87
}

; Function Attrs: nounwind uwtable
define i64 @Fencode_big5_char(i64 %ch) #0 {
entry:
  %retval = alloca i64, align 8
  %ch.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %charset = alloca %struct.charset*, align 8
  %c = alloca i32, align 4
  %code = alloca i32, align 4
  store i64 %ch, i64* %ch.addr, align 8
  %0 = load i64, i64* %ch.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %ch.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %2 = load i64, i64* %ch.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call1, i64 %2) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %ch.addr, align 8
  %shr2 = ashr i64 %5, 2
  %conv = trunc i64 %shr2 to i32
  store i32 %conv, i32* %c, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end
  %6 = load i64, i64* @Vbig5_coding_system, align 8
  %7 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %call4 = call i64 @Fgethash(i64 %6, i64 %7, i64 %call3)
  store i64 %call4, i64* %spec, align 8
  %8 = load i64, i64* %spec, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %8, %call5
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %9 = load i64, i64* @Vbig5_coding_system, align 8
  %call8 = call i64 @Fcheck_coding_system(i64 %9)
  %10 = load i64, i64* @Vbig5_coding_system, align 8
  %11 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %call10 = call i64 @Fgethash(i64 %10, i64 %11, i64 %call9)
  store i64 %call10, i64* %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %12 = load i64, i64* %spec, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %12, %call11
  br i1 %cmp12, label %if.then.14, label %if.end.16

if.then.14:                                       ; preds = %if.end
  %call15 = call i64 @builtin_lisp_symbol(i32 280)
  %13 = load i64, i64* @Vbig5_coding_system, align 8
  %14 = call i64 @wrong_type_argument(i64 %call15, i64 %13) #6
  unreachable

if.end.16:                                        ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.16
  %15 = load i64, i64* %spec, align 8
  %call17 = call i64 @AREF(i64 %15, i64 0)
  store i64 %call17, i64* %attrs, align 8
  br i1 true, label %cond.true.18, label %cond.false.21

cond.true.18:                                     ; preds = %do.end
  %16 = load i32, i32* %c, align 4
  %add = add i32 %16, 0
  %cmp19 = icmp ult i32 %add, 128
  br i1 %cmp19, label %land.lhs.true.26, label %if.end.32

cond.false.21:                                    ; preds = %do.end
  %17 = load i32, i32* %c, align 4
  %conv22 = sext i32 %17 to i64
  %add23 = add i64 %conv22, 0
  %cmp24 = icmp ult i64 %add23, 128
  br i1 %cmp24, label %land.lhs.true.26, label %if.end.32

land.lhs.true.26:                                 ; preds = %cond.false.21, %cond.true.18
  %18 = load i64, i64* %attrs, align 8
  %call27 = call i64 @AREF(i64 %18, i64 5)
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp29 = icmp eq i64 %call27, %call28
  br i1 %cmp29, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.26
  %19 = load i64, i64* %ch.addr, align 8
  store i64 %19, i64* %retval
  br label %return

if.end.32:                                        ; preds = %land.lhs.true.26, %cond.false.21, %cond.true.18
  %20 = load i64, i64* %attrs, align 8
  %call33 = call i64 @AREF(i64 %20, i64 4)
  store i64 %call33, i64* %charset_list, align 8
  %21 = load i32, i32* %c, align 4
  %22 = load i64, i64* %charset_list, align 8
  %call34 = call %struct.charset* @char_charset(i32 %21, i64 %22, i32* %code)
  store %struct.charset* %call34, %struct.charset** %charset, align 8
  %23 = load i32, i32* %code, align 4
  %24 = load %struct.charset*, %struct.charset** %charset, align 8
  %invalid_code = getelementptr inbounds %struct.charset, %struct.charset* %24, i32 0, i32 15
  %25 = load i32, i32* %invalid_code, align 4
  %cmp35 = icmp eq i32 %23, %25
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.32
  %26 = load i32, i32* %c, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0), i32 %26) #6
  unreachable

if.end.38:                                        ; preds = %if.end.32
  %27 = load i32, i32* %code, align 4
  %conv39 = zext i32 %27 to i64
  %shl = shl i64 %conv39, 2
  %add40 = add i64 %shl, 2
  store i64 %add40, i64* %retval
  br label %return

return:                                           ; preds = %if.end.38, %if.then.31
  %28 = load i64, i64* %retval
  ret i64 %28
}

; Function Attrs: nounwind uwtable
define i64 @Fset_terminal_coding_system_internal(i64 %coding_system, i64 %terminal) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %terminal.addr = alloca i64, align 8
  %term = alloca %struct.terminal*, align 8
  %terminal_coding = alloca %struct.coding_system*, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_live_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %term, align 8
  %1 = load %struct.terminal*, %struct.terminal** %term, align 8
  %terminal_coding1 = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 13
  %2 = load %struct.coding_system*, %struct.coding_system** %terminal_coding1, align 8
  store %struct.coding_system* %2, %struct.coding_system** %terminal_coding, align 8
  %3 = load i64, i64* %coding_system.addr, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 897)
  %4 = load i64, i64* %coding_system.addr, align 8
  %5 = call i64 @wrong_type_argument(i64 %call3, i64 %4) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  %7 = load i64, i64* %coding_system.addr, align 8
  %call4 = call i64 @Fcheck_coding_system(i64 %7)
  %8 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  call void @setup_coding_system(i64 %call4, %struct.coding_system* %8)
  %9 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 1
  %bf.load = load i32, i32* %mode, align 8
  %bf.lshr = lshr i32 %bf.load, 14
  %bf.clear = and i32 %bf.lshr, 31
  %or = or i32 %bf.clear, 16
  %bf.load5 = load i32, i32* %mode, align 8
  %bf.value = and i32 %or, 31
  %bf.shl = shl i32 %bf.value, 14
  %bf.clear6 = and i32 %bf.load5, -507905
  %bf.set = or i32 %bf.clear6, %bf.shl
  store i32 %bf.set, i32* %mode, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 1
  %bf.load7 = load i32, i32* %common_flags, align 8
  %bf.clear8 = and i32 %bf.load7, 16383
  %and9 = and i32 %bf.clear8, -2
  %bf.load10 = load i32, i32* %common_flags, align 8
  %bf.value11 = and i32 %and9, 16383
  %bf.clear12 = and i32 %bf.load10, -16384
  %bf.set13 = or i32 %bf.clear12, %bf.value11
  store i32 %bf.set13, i32* %common_flags, align 8
  %11 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 1
  %bf.load14 = load i32, i32* %src_multibyte, align 8
  %bf.clear15 = and i32 %bf.load14, -524289
  %bf.set16 = or i32 %bf.clear15, 524288
  store i32 %bf.set16, i32* %src_multibyte, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 1
  %bf.load17 = load i32, i32* %dst_multibyte, align 8
  %bf.clear18 = and i32 %bf.load17, -1048577
  store i32 %bf.clear18, i32* %dst_multibyte, align 8
  %13 = load %struct.terminal*, %struct.terminal** %term, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %common_flags19 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 1
  %bf.load20 = load i32, i32* %common_flags19, align 8
  %bf.clear21 = and i32 %bf.load20, 16383
  %and22 = and i32 %bf.clear21, 2048
  %tobool = icmp ne i32 %and22, 0
  br i1 %tobool, label %cond.true.23, label %cond.false.25

cond.true.23:                                     ; preds = %cond.end
  %15 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %call24 = call i64 @coding_charset_list(%struct.coding_system* %15)
  br label %cond.end.28

cond.false.25:                                    ; preds = %cond.end
  %16 = load i32, i32* @charset_ascii, align 4
  %conv26 = sext i32 %16 to i64
  %shl = shl i64 %conv26, 2
  %add = add i64 %shl, 2
  %call27 = call i64 @list1(i64 %add)
  br label %cond.end.28

cond.end.28:                                      ; preds = %cond.false.25, %cond.true.23
  %cond = phi i64 [ %call24, %cond.true.23 ], [ %call27, %cond.false.25 ]
  call void @tset_charset_list(%struct.terminal* %13, i64 %cond)
  %call29 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call29
}

declare %struct.terminal* @decode_live_terminal(i64) #1

declare void @tset_charset_list(%struct.terminal*, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_safe_terminal_coding_system_internal(i64 %coding_system) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 897)
  %1 = load i64, i64* %coding_system.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %coding_system.addr, align 8
  %call2 = call i64 @Fcheck_coding_system(i64 %4)
  call void @setup_coding_system(i64 %call2, %struct.coding_system* @safe_terminal_coding)
  %bf.load = load i32, i32* getelementptr inbounds (%struct.coding_system, %struct.coding_system* @safe_terminal_coding, i32 0, i32 1), align 8
  %bf.clear = and i32 %bf.load, 16383
  %and3 = and i32 %bf.clear, -2
  %bf.load4 = load i32, i32* getelementptr inbounds (%struct.coding_system, %struct.coding_system* @safe_terminal_coding, i32 0, i32 1), align 8
  %bf.value = and i32 %and3, 16383
  %bf.clear5 = and i32 %bf.load4, -16384
  %bf.set = or i32 %bf.clear5, %bf.value
  store i32 %bf.set, i32* getelementptr inbounds (%struct.coding_system, %struct.coding_system* @safe_terminal_coding, i32 0, i32 1), align 8
  %bf.load6 = load i32, i32* getelementptr inbounds (%struct.coding_system, %struct.coding_system* @safe_terminal_coding, i32 0, i32 1), align 8
  %bf.clear7 = and i32 %bf.load6, -524289
  %bf.set8 = or i32 %bf.clear7, 524288
  store i32 %bf.set8, i32* getelementptr inbounds (%struct.coding_system, %struct.coding_system* @safe_terminal_coding, i32 0, i32 1), align 8
  %bf.load9 = load i32, i32* getelementptr inbounds (%struct.coding_system, %struct.coding_system* @safe_terminal_coding, i32 0, i32 1), align 8
  %bf.clear10 = and i32 %bf.load9, -1048577
  store i32 %bf.clear10, i32* getelementptr inbounds (%struct.coding_system, %struct.coding_system* @safe_terminal_coding, i32 0, i32 1), align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call11
}

; Function Attrs: nounwind uwtable
define i64 @Fterminal_coding_system(i64 %terminal) #0 {
entry:
  %terminal.addr = alloca i64, align 8
  %terminal_coding = alloca %struct.coding_system*, align 8
  %coding_system = alloca i64, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_live_terminal(i64 %0)
  %terminal_coding1 = getelementptr inbounds %struct.terminal, %struct.terminal* %call, i32 0, i32 13
  %1 = load %struct.coding_system*, %struct.coding_system** %terminal_coding1, align 8
  store %struct.coding_system* %1, %struct.coding_system** %terminal_coding, align 8
  %2 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %2)
  %3 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 0
  %4 = load i64, i64* %id, align 8
  %call3 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call2, i64 %4)
  store i64 %call3, i64* %coding_system, align 8
  %5 = load i64, i64* %coding_system, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 958)
  %cmp = icmp eq i64 %5, %call4
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %6 = load i64, i64* %coding_system, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %call5, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fset_keyboard_coding_system_internal(i64 %coding_system, i64 %terminal) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_live_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load i64, i64* %coding_system.addr, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 897)
  %2 = load i64, i64* %coding_system.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call2, i64 %2) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %coding_system.addr, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %5, %call3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %call6 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call6, i64* %coding_system.addr, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end
  %6 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcheck_coding_system(i64 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load i64, i64* %coding_system.addr, align 8
  %8 = load %struct.terminal*, %struct.terminal** %t, align 8
  %keyboard_coding = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 14
  %9 = load %struct.coding_system*, %struct.coding_system** %keyboard_coding, align 8
  call void @setup_coding_system(i64 %7, %struct.coding_system* %9)
  %10 = load %struct.terminal*, %struct.terminal** %t, align 8
  %keyboard_coding8 = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 14
  %11 = load %struct.coding_system*, %struct.coding_system** %keyboard_coding8, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 1
  %bf.load = load i32, i32* %common_flags, align 8
  %bf.clear = and i32 %bf.load, 16383
  %and9 = and i32 %bf.clear, -2
  %bf.load10 = load i32, i32* %common_flags, align 8
  %bf.value = and i32 %and9, 16383
  %bf.clear11 = and i32 %bf.load10, -16384
  %bf.set = or i32 %bf.clear11, %bf.value
  store i32 %bf.set, i32* %common_flags, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call12
}

; Function Attrs: nounwind uwtable
define i64 @Fkeyboard_coding_system(i64 %terminal) #0 {
entry:
  %terminal.addr = alloca i64, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %0)
  %1 = load i64, i64* %terminal.addr, align 8
  %call1 = call %struct.terminal* @decode_live_terminal(i64 %1)
  %keyboard_coding = getelementptr inbounds %struct.terminal, %struct.terminal* %call1, i32 0, i32 14
  %2 = load %struct.coding_system*, %struct.coding_system** %keyboard_coding, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 0
  %3 = load i64, i64* %id, align 8
  %call2 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call, i64 %3)
  ret i64 %call2
}

; Function Attrs: nounwind uwtable
define i64 @Ffind_operation_coding_system(i64 %nargs, i64* %args) #0 {
entry:
  %retval = alloca i64, align 8
  %nargs.addr = alloca i64, align 8
  %args.addr = alloca i64*, align 8
  %operation = alloca i64, align 8
  %target_idx = alloca i64, align 8
  %target = alloca i64, align 8
  %val = alloca i64, align 8
  %chain = alloca i64, align 8
  %elt = alloca i64, align 8
  store i64 %nargs, i64* %nargs.addr, align 8
  store i64* %args, i64** %args.addr, align 8
  %0 = load i64, i64* %nargs.addr, align 8
  %cmp = icmp slt i64 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i64*, i64** %args.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  store i64 %2, i64* %operation, align 8
  %3 = load i64, i64* %operation, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %lor.lhs.false, label %if.then.5

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i64, i64* %operation, align 8
  %call = call i64 @builtin_lisp_symbol(i32 902)
  %call3 = call i64 @Fget(i64 %4, i64 %call)
  store i64 %call3, i64* %target_idx, align 8
  %5 = load i64, i64* %target_idx, align 8
  %call4 = call zeroext i1 @NATNUMP(i64 %5)
  %lnot = xor i1 %call4, true
  br i1 %lnot, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %lor.lhs.false, %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i32 0, i32 0)) #6
  unreachable

if.end.6:                                         ; preds = %lor.lhs.false
  %6 = load i64, i64* %nargs.addr, align 8
  %7 = load i64, i64* %target_idx, align 8
  %shr = ashr i64 %7, 2
  %add = add nsw i64 1, %shr
  %cmp7 = icmp sle i64 %6, %add
  br i1 %cmp7, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end.6
  %8 = load i64, i64* %operation, align 8
  %call10 = call i64 @SYMBOL_NAME(i64 %8)
  %call11 = call i8* @SDATA(i64 %call10)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0), i8* %call11) #6
  unreachable

if.end.12:                                        ; preds = %if.end.6
  %9 = load i64, i64* %target_idx, align 8
  %shr13 = ashr i64 %9, 2
  %add14 = add nsw i64 %shr13, 1
  %10 = load i64*, i64** %args.addr, align 8
  %arrayidx15 = getelementptr inbounds i64, i64* %10, i64 %add14
  %11 = load i64, i64* %arrayidx15, align 8
  store i64 %11, i64* %target, align 8
  %12 = load i64, i64* %target, align 8
  %call16 = call zeroext i1 @STRINGP(i64 %12)
  br i1 %call16, label %if.end.48, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %if.end.12
  %13 = load i64, i64* %operation, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 553)
  %cmp20 = icmp eq i64 %13, %call19
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false.33

land.lhs.true:                                    ; preds = %lor.lhs.false.18
  %14 = load i64, i64* %target, align 8
  %and22 = and i64 %14, 7
  %conv23 = trunc i64 %and22 to i32
  %cmp24 = icmp eq i32 %conv23, 3
  br i1 %cmp24, label %land.lhs.true.26, label %lor.lhs.false.33

land.lhs.true.26:                                 ; preds = %land.lhs.true
  %15 = load i64, i64* %target, align 8
  %sub = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 0
  %18 = load i64, i64* %car, align 8
  %call27 = call zeroext i1 @STRINGP(i64 %18)
  br i1 %call27, label %land.lhs.true.29, label %lor.lhs.false.33

land.lhs.true.29:                                 ; preds = %land.lhs.true.26
  %19 = load i64, i64* %target, align 8
  %sub30 = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub30 to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %22 = load i64, i64* %cdr, align 8
  %call31 = call zeroext i1 @BUFFERP(i64 %22)
  br i1 %call31, label %if.end.48, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %land.lhs.true.29, %land.lhs.true.26, %land.lhs.true, %lor.lhs.false.18
  %23 = load i64, i64* %operation, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 720)
  %cmp35 = icmp eq i64 %23, %call34
  br i1 %cmp35, label %land.lhs.true.37, label %if.then.43

land.lhs.true.37:                                 ; preds = %lor.lhs.false.33
  %24 = load i64, i64* %target, align 8
  %and38 = and i64 %24, 7
  %conv39 = trunc i64 %and38 to i32
  %and40 = and i32 %conv39, -5
  %cmp41 = icmp eq i32 %and40, 2
  br i1 %cmp41, label %if.end.48, label %if.then.43

if.then.43:                                       ; preds = %land.lhs.true.37, %lor.lhs.false.33
  %25 = load i64, i64* %target_idx, align 8
  %shr44 = ashr i64 %25, 2
  %add45 = add nsw i64 %shr44, 1
  %26 = load i64, i64* %operation, align 8
  %call46 = call i64 @SYMBOL_NAME(i64 %26)
  %call47 = call i8* @SDATA(i64 %call46)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i32 0, i32 0), i64 %add45, i8* %call47) #6
  unreachable

if.end.48:                                        ; preds = %land.lhs.true.37, %land.lhs.true.29, %if.end.12
  %27 = load i64, i64* %target, align 8
  %and49 = and i64 %27, 7
  %conv50 = trunc i64 %and49 to i32
  %cmp51 = icmp eq i32 %conv50, 3
  br i1 %cmp51, label %if.then.53, label %if.end.56

if.then.53:                                       ; preds = %if.end.48
  %28 = load i64, i64* %target, align 8
  %sub54 = sub nsw i64 %28, 3
  %29 = inttoptr i64 %sub54 to i8*
  %30 = bitcast i8* %29 to %struct.Lisp_Cons*
  %car55 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %30, i32 0, i32 0
  %31 = load i64, i64* %car55, align 8
  store i64 %31, i64* %target, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.53, %if.end.48
  %32 = load i64, i64* %operation, align 8
  %call57 = call i64 @builtin_lisp_symbol(i32 553)
  %cmp58 = icmp eq i64 %32, %call57
  br i1 %cmp58, label %cond.true, label %lor.lhs.false.60

lor.lhs.false.60:                                 ; preds = %if.end.56
  %33 = load i64, i64* %operation, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 1040)
  %cmp62 = icmp eq i64 %33, %call61
  br i1 %cmp62, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.60, %if.end.56
  %34 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 93), align 8
  br label %cond.end.69

cond.false:                                       ; preds = %lor.lhs.false.60
  %35 = load i64, i64* %operation, align 8
  %call64 = call i64 @builtin_lisp_symbol(i32 720)
  %cmp65 = icmp eq i64 %35, %call64
  br i1 %cmp65, label %cond.true.67, label %cond.false.68

cond.true.67:                                     ; preds = %cond.false
  %36 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 205), align 8
  br label %cond.end

cond.false.68:                                    ; preds = %cond.false
  %37 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 237), align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.68, %cond.true.67
  %cond = phi i64 [ %36, %cond.true.67 ], [ %37, %cond.false.68 ]
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.end, %cond.true
  %cond70 = phi i64 [ %34, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond70, i64* %chain, align 8
  %38 = load i64, i64* %chain, align 8
  %call71 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp72 = icmp eq i64 %38, %call71
  br i1 %cmp72, label %if.then.74, label %if.end.76

if.then.74:                                       ; preds = %cond.end.69
  %call75 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call75, i64* %retval
  br label %return

if.end.76:                                        ; preds = %cond.end.69
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.76
  %39 = load i64, i64* %chain, align 8
  %and77 = and i64 %39, 7
  %conv78 = trunc i64 %and77 to i32
  %cmp79 = icmp eq i32 %conv78, 3
  br i1 %cmp79, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i64, i64* %chain, align 8
  %sub81 = sub nsw i64 %40, 3
  %41 = inttoptr i64 %sub81 to i8*
  %42 = bitcast i8* %41 to %struct.Lisp_Cons*
  %car82 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %42, i32 0, i32 0
  %43 = load i64, i64* %car82, align 8
  store i64 %43, i64* %elt, align 8
  %44 = load i64, i64* %elt, align 8
  %and83 = and i64 %44, 7
  %conv84 = trunc i64 %and83 to i32
  %cmp85 = icmp eq i32 %conv84, 3
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.163

land.lhs.true.87:                                 ; preds = %for.body
  %45 = load i64, i64* %target, align 8
  %call88 = call zeroext i1 @STRINGP(i64 %45)
  br i1 %call88, label %land.lhs.true.90, label %lor.lhs.false.101

land.lhs.true.90:                                 ; preds = %land.lhs.true.87
  %46 = load i64, i64* %elt, align 8
  %sub91 = sub nsw i64 %46, 3
  %47 = inttoptr i64 %sub91 to i8*
  %48 = bitcast i8* %47 to %struct.Lisp_Cons*
  %car92 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %48, i32 0, i32 0
  %49 = load i64, i64* %car92, align 8
  %call93 = call zeroext i1 @STRINGP(i64 %49)
  br i1 %call93, label %land.lhs.true.95, label %lor.lhs.false.101

land.lhs.true.95:                                 ; preds = %land.lhs.true.90
  %50 = load i64, i64* %elt, align 8
  %sub96 = sub nsw i64 %50, 3
  %51 = inttoptr i64 %sub96 to i8*
  %52 = bitcast i8* %51 to %struct.Lisp_Cons*
  %car97 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %52, i32 0, i32 0
  %53 = load i64, i64* %car97, align 8
  %54 = load i64, i64* %target, align 8
  %call98 = call i64 @fast_string_match(i64 %53, i64 %54)
  %cmp99 = icmp sge i64 %call98, 0
  br i1 %cmp99, label %if.then.112, label %lor.lhs.false.101

lor.lhs.false.101:                                ; preds = %land.lhs.true.95, %land.lhs.true.90, %land.lhs.true.87
  %55 = load i64, i64* %target, align 8
  %and102 = and i64 %55, 7
  %conv103 = trunc i64 %and102 to i32
  %and104 = and i32 %conv103, -5
  %cmp105 = icmp eq i32 %and104, 2
  br i1 %cmp105, label %land.lhs.true.107, label %if.end.163

land.lhs.true.107:                                ; preds = %lor.lhs.false.101
  %56 = load i64, i64* %target, align 8
  %57 = load i64, i64* %elt, align 8
  %sub108 = sub nsw i64 %57, 3
  %58 = inttoptr i64 %sub108 to i8*
  %59 = bitcast i8* %58 to %struct.Lisp_Cons*
  %car109 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %59, i32 0, i32 0
  %60 = load i64, i64* %car109, align 8
  %cmp110 = icmp eq i64 %56, %60
  br i1 %cmp110, label %if.then.112, label %if.end.163

if.then.112:                                      ; preds = %land.lhs.true.107, %land.lhs.true.95
  %61 = load i64, i64* %elt, align 8
  %sub113 = sub nsw i64 %61, 3
  %62 = inttoptr i64 %sub113 to i8*
  %63 = bitcast i8* %62 to %struct.Lisp_Cons*
  %u114 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %63, i32 0, i32 1
  %cdr115 = bitcast %union.anon.0* %u114 to i64*
  %64 = load i64, i64* %cdr115, align 8
  store i64 %64, i64* %val, align 8
  %65 = load i64, i64* %val, align 8
  %and116 = and i64 %65, 7
  %conv117 = trunc i64 %and116 to i32
  %cmp118 = icmp eq i32 %conv117, 3
  br i1 %cmp118, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.then.112
  %66 = load i64, i64* %val, align 8
  store i64 %66, i64* %retval
  br label %return

if.end.121:                                       ; preds = %if.then.112
  %67 = load i64, i64* %val, align 8
  %and122 = and i64 %67, 7
  %conv123 = trunc i64 %and122 to i32
  %cmp124 = icmp eq i32 %conv123, 0
  br i1 %cmp124, label %if.end.128, label %if.then.126

if.then.126:                                      ; preds = %if.end.121
  %call127 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call127, i64* %retval
  br label %return

if.end.128:                                       ; preds = %if.end.121
  %68 = load i64, i64* %val, align 8
  %call129 = call i64 @Fcoding_system_p(i64 %68)
  %call130 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp131 = icmp eq i64 %call129, %call130
  br i1 %cmp131, label %if.end.135, label %if.then.133

if.then.133:                                      ; preds = %if.end.128
  %69 = load i64, i64* %val, align 8
  %70 = load i64, i64* %val, align 8
  %call134 = call i64 @Fcons(i64 %69, i64 %70)
  store i64 %call134, i64* %retval
  br label %return

if.end.135:                                       ; preds = %if.end.128
  %71 = load i64, i64* %val, align 8
  %call136 = call i64 @Ffboundp(i64 %71)
  %call137 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp138 = icmp eq i64 %call136, %call137
  br i1 %cmp138, label %if.end.161, label %if.then.140

if.then.140:                                      ; preds = %if.end.135
  %72 = load i64, i64* %val, align 8
  %73 = load i64, i64* %nargs.addr, align 8
  %74 = load i64*, i64** %args.addr, align 8
  %call141 = call i64 @Flist(i64 %73, i64* %74)
  %call142 = call i64 @call1(i64 %72, i64 %call141)
  store i64 %call142, i64* %val, align 8
  %75 = load i64, i64* %val, align 8
  %and143 = and i64 %75, 7
  %conv144 = trunc i64 %and143 to i32
  %cmp145 = icmp eq i32 %conv144, 3
  br i1 %cmp145, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %if.then.140
  %76 = load i64, i64* %val, align 8
  store i64 %76, i64* %retval
  br label %return

if.end.148:                                       ; preds = %if.then.140
  %77 = load i64, i64* %val, align 8
  %and149 = and i64 %77, 7
  %conv150 = trunc i64 %and149 to i32
  %cmp151 = icmp eq i32 %conv150, 0
  br i1 %cmp151, label %land.lhs.true.153, label %if.end.160

land.lhs.true.153:                                ; preds = %if.end.148
  %78 = load i64, i64* %val, align 8
  %call154 = call i64 @Fcoding_system_p(i64 %78)
  %call155 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp156 = icmp eq i64 %call154, %call155
  br i1 %cmp156, label %if.end.160, label %if.then.158

if.then.158:                                      ; preds = %land.lhs.true.153
  %79 = load i64, i64* %val, align 8
  %80 = load i64, i64* %val, align 8
  %call159 = call i64 @Fcons(i64 %79, i64 %80)
  store i64 %call159, i64* %retval
  br label %return

if.end.160:                                       ; preds = %land.lhs.true.153, %if.end.148
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.160, %if.end.135
  %call162 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call162, i64* %retval
  br label %return

if.end.163:                                       ; preds = %land.lhs.true.107, %lor.lhs.false.101, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.163
  %81 = load i64, i64* %chain, align 8
  %sub164 = sub nsw i64 %81, 3
  %82 = inttoptr i64 %sub164 to i8*
  %83 = bitcast i8* %82 to %struct.Lisp_Cons*
  %u165 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %83, i32 0, i32 1
  %cdr166 = bitcast %union.anon.0* %u165 to i64*
  %84 = load i64, i64* %cdr166, align 8
  store i64 %84, i64* %chain, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call167 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call167, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.end.161, %if.then.158, %if.then.147, %if.then.133, %if.then.126, %if.then.120, %if.then.74
  %85 = load i64, i64* %retval
  ret i64 %85
}

declare i64 @fast_string_match(i64, i64) #1

declare i64 @Ffboundp(i64) #1

declare i64 @Flist(i64, i64*) #1

; Function Attrs: nounwind uwtable
define i64 @Fset_coding_system_priority(i64 %nargs, i64* %args) #0 {
entry:
  %nargs.addr = alloca i64, align 8
  %args.addr = alloca i64*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %changed = alloca [21 x i8], align 16
  %priorities = alloca [21 x i32], align 16
  %category = alloca i32, align 4
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  store i64 %nargs, i64* %nargs.addr, align 8
  store i64* %args, i64** %args.addr, align 8
  %0 = bitcast [21 x i8]* %changed to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 21, i32 16, i1 false)
  store i64 0, i64* %j, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8
  %2 = load i64, i64* %nargs.addr, align 8
  %cmp = icmp slt i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  %3 = load i64, i64* %i, align 8
  %4 = load i64*, i64** %args.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %4, i64 %3
  %5 = load i64, i64* %arrayidx, align 8
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fgethash(i64 %5, i64 %6, i64 %call)
  store i64 %call1, i64* %spec, align 8
  %7 = load i64, i64* %spec, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp3 = icmp eq i64 %7, %call2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %8 = load i64, i64* %i, align 8
  %9 = load i64*, i64** %args.addr, align 8
  %arrayidx4 = getelementptr inbounds i64, i64* %9, i64 %8
  %10 = load i64, i64* %arrayidx4, align 8
  %call5 = call i64 @Fcheck_coding_system(i64 %10)
  %11 = load i64, i64* %i, align 8
  %12 = load i64*, i64** %args.addr, align 8
  %arrayidx6 = getelementptr inbounds i64, i64* %12, i64 %11
  %13 = load i64, i64* %arrayidx6, align 8
  %14 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %call8 = call i64 @Fgethash(i64 %13, i64 %14, i64 %call7)
  store i64 %call8, i64* %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %15 = load i64, i64* %spec, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %15, %call9
  br i1 %cmp10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.end
  %call12 = call i64 @builtin_lisp_symbol(i32 280)
  %16 = load i64, i64* %i, align 8
  %17 = load i64*, i64** %args.addr, align 8
  %arrayidx13 = getelementptr inbounds i64, i64* %17, i64 %16
  %18 = load i64, i64* %arrayidx13, align 8
  %19 = call i64 @wrong_type_argument(i64 %call12, i64 %18) #6
  unreachable

if.end.14:                                        ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.14
  %20 = load i64, i64* %spec, align 8
  %call15 = call i64 @AREF(i64 %20, i64 0)
  store i64 %call15, i64* %attrs, align 8
  %21 = load i64, i64* %attrs, align 8
  %call16 = call i64 @AREF(i64 %21, i64 14)
  %shr = ashr i64 %call16, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %category, align 4
  %22 = load i32, i32* %category, align 4
  %idxprom = zext i32 %22 to i64
  %arrayidx17 = getelementptr inbounds [21 x i8], [21 x i8]* %changed, i32 0, i64 %idxprom
  %23 = load i8, i8* %arrayidx17, align 1
  %tobool = trunc i8 %23 to i1
  br i1 %tobool, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %do.end
  br label %for.inc

if.end.19:                                        ; preds = %do.end
  %24 = load i32, i32* %category, align 4
  %idxprom20 = zext i32 %24 to i64
  %arrayidx21 = getelementptr inbounds [21 x i8], [21 x i8]* %changed, i32 0, i64 %idxprom20
  store i8 1, i8* %arrayidx21, align 1
  %25 = load i32, i32* %category, align 4
  %26 = load i64, i64* %j, align 8
  %inc = add nsw i64 %26, 1
  store i64 %inc, i64* %j, align 8
  %arrayidx22 = getelementptr inbounds [21 x i32], [21 x i32]* %priorities, i32 0, i64 %26
  store i32 %25, i32* %arrayidx22, align 4
  %27 = load i32, i32* %category, align 4
  %idxprom23 = zext i32 %27 to i64
  %arrayidx24 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom23
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx24, i32 0, i32 0
  %28 = load i64, i64* %id, align 8
  %cmp25 = icmp sge i64 %28, 0
  br i1 %cmp25, label %land.lhs.true, label %if.end.39

land.lhs.true:                                    ; preds = %if.end.19
  %29 = load i64, i64* %i, align 8
  %30 = load i64*, i64** %args.addr, align 8
  %arrayidx27 = getelementptr inbounds i64, i64* %30, i64 %29
  %31 = load i64, i64* %arrayidx27, align 8
  %32 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call28 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %32)
  %33 = load i32, i32* %category, align 4
  %idxprom29 = zext i32 %33 to i64
  %arrayidx30 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom29
  %id31 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx30, i32 0, i32 0
  %34 = load i64, i64* %id31, align 8
  %call32 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call28, i64 %34)
  %cmp33 = icmp eq i64 %31, %call32
  br i1 %cmp33, label %if.end.39, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true
  %35 = load i64, i64* %i, align 8
  %36 = load i64*, i64** %args.addr, align 8
  %arrayidx36 = getelementptr inbounds i64, i64* %36, i64 %35
  %37 = load i64, i64* %arrayidx36, align 8
  %38 = load i32, i32* %category, align 4
  %idxprom37 = zext i32 %38 to i64
  %arrayidx38 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom37
  call void @setup_coding_system(i64 %37, %struct.coding_system* %arrayidx38)
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.35, %land.lhs.true, %if.end.19
  %39 = load i64, i64* @Vcoding_category_table, align 8
  %40 = load i32, i32* %category, align 4
  %conv40 = zext i32 %40 to i64
  %call41 = call i64 @AREF(i64 %39, i64 %conv40)
  %41 = load i64, i64* %i, align 8
  %42 = load i64*, i64** %args.addr, align 8
  %arrayidx42 = getelementptr inbounds i64, i64* %42, i64 %41
  %43 = load i64, i64* %arrayidx42, align 8
  %call43 = call i64 @Fset(i64 %call41, i64 %43)
  br label %for.inc

for.inc:                                          ; preds = %if.end.39, %if.then.18
  %44 = load i64, i64* %i, align 8
  %inc44 = add nsw i64 %44, 1
  store i64 %inc44, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %45 = load i64, i64* %j, align 8
  store i64 %45, i64* %i, align 8
  store i64 0, i64* %j, align 8
  br label %for.cond.45

for.cond.45:                                      ; preds = %for.inc.63, %for.end
  %46 = load i64, i64* %i, align 8
  %cmp46 = icmp slt i64 %46, 21
  br i1 %cmp46, label %for.body.48, label %for.end.66

for.body.48:                                      ; preds = %for.cond.45
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.48
  %47 = load i64, i64* %j, align 8
  %cmp49 = icmp slt i64 %47, 21
  br i1 %cmp49, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %48 = load i64, i64* %j, align 8
  %arrayidx51 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %48
  %49 = load i32, i32* %arrayidx51, align 4
  %idxprom52 = zext i32 %49 to i64
  %arrayidx53 = getelementptr inbounds [21 x i8], [21 x i8]* %changed, i32 0, i64 %idxprom52
  %50 = load i8, i8* %arrayidx53, align 1
  %tobool54 = trunc i8 %50 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %51 = phi i1 [ false, %while.cond ], [ %tobool54, %land.rhs ]
  br i1 %51, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %52 = load i64, i64* %j, align 8
  %inc56 = add nsw i64 %52, 1
  store i64 %inc56, i64* %j, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %53 = load i64, i64* %j, align 8
  %cmp57 = icmp eq i64 %53, 21
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %while.end
  call void @emacs_abort() #6
  unreachable

if.end.60:                                        ; preds = %while.end
  %54 = load i64, i64* %j, align 8
  %arrayidx61 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %54
  %55 = load i32, i32* %arrayidx61, align 4
  %56 = load i64, i64* %i, align 8
  %arrayidx62 = getelementptr inbounds [21 x i32], [21 x i32]* %priorities, i32 0, i64 %56
  store i32 %55, i32* %arrayidx62, align 4
  br label %for.inc.63

for.inc.63:                                       ; preds = %if.end.60
  %57 = load i64, i64* %i, align 8
  %inc64 = add nsw i64 %57, 1
  store i64 %inc64, i64* %i, align 8
  %58 = load i64, i64* %j, align 8
  %inc65 = add nsw i64 %58, 1
  store i64 %inc65, i64* %j, align 8
  br label %for.cond.45

for.end.66:                                       ; preds = %for.cond.45
  %59 = bitcast [21 x i32]* %priorities to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([21 x i32]* @coding_priorities to i8*), i8* %59, i64 84, i32 16, i1 false)
  %call67 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call67, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 33), align 8
  store i64 21, i64* %i, align 8
  br label %for.cond.68

for.cond.68:                                      ; preds = %for.body.71, %for.end.66
  %60 = load i64, i64* %i, align 8
  %dec = add nsw i64 %60, -1
  store i64 %dec, i64* %i, align 8
  %cmp69 = icmp sgt i64 %60, 0
  br i1 %cmp69, label %for.body.71, label %for.end.76

for.body.71:                                      ; preds = %for.cond.68
  %61 = load i64, i64* @Vcoding_category_table, align 8
  %62 = load i64, i64* %i, align 8
  %arrayidx72 = getelementptr inbounds [21 x i32], [21 x i32]* %priorities, i32 0, i64 %62
  %63 = load i32, i32* %arrayidx72, align 4
  %conv73 = zext i32 %63 to i64
  %call74 = call i64 @AREF(i64 %61, i64 %conv73)
  %64 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 33), align 8
  %call75 = call i64 @Fcons(i64 %call74, i64 %64)
  store i64 %call75, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 33), align 8
  br label %for.cond.68

for.end.76:                                       ; preds = %for.cond.68
  %call77 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call77
}

declare i64 @Fset(i64, i64) #1

; Function Attrs: noreturn
declare void @emacs_abort() #2

; Function Attrs: nounwind uwtable
define i64 @Fcoding_system_priority_list(i64 %highestp) #0 {
entry:
  %retval = alloca i64, align 8
  %highestp.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %val = alloca i64, align 8
  %category = alloca i32, align 4
  %id = alloca i32, align 4
  %attrs = alloca i64, align 8
  store i64 %highestp, i64* %highestp.addr, align 8
  store i32 0, i32* %i, align 4
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %val, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 21
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %category, align 4
  %3 = load i32, i32* %category, align 4
  %idxprom1 = zext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom1
  %id3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx2, i32 0, i32 0
  %4 = load i64, i64* %id3, align 8
  %conv = trunc i64 %4 to i32
  store i32 %conv, i32* %id, align 4
  %5 = load i32, i32* %id, align 4
  %cmp4 = icmp slt i32 %5, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call6 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %6)
  %7 = load i32, i32* %id, align 4
  %conv7 = sext i32 %7 to i64
  %call8 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call6, i64 %conv7)
  %call9 = call i64 @AREF(i64 %call8, i64 0)
  store i64 %call9, i64* %attrs, align 8
  %8 = load i64, i64* %highestp.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %8, %call10
  br i1 %cmp11, label %if.end.15, label %if.then.13

if.then.13:                                       ; preds = %if.end
  %9 = load i64, i64* %attrs, align 8
  %call14 = call i64 @AREF(i64 %9, i64 0)
  store i64 %call14, i64* %retval
  br label %return

if.end.15:                                        ; preds = %if.end
  %10 = load i64, i64* %attrs, align 8
  %call16 = call i64 @AREF(i64 %10, i64 0)
  %11 = load i64, i64* %val, align 8
  %call17 = call i64 @Fcons(i64 %call16, i64 %11)
  store i64 %call17, i64* %val, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.15, %if.then
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i64, i64* %val, align 8
  %call18 = call i64 @Fnreverse(i64 %13)
  store i64 %call18, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.13
  %14 = load i64, i64* %retval
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define i64 @Fdefine_coding_system_internal(i64 %nargs, i64* %args) #0 {
entry:
  %retval = alloca i64, align 8
  %nargs.addr = alloca i64, align 8
  %args.addr = alloca i64*, align 8
  %name = alloca i64, align 8
  %spec_vec = alloca i64, align 8
  %attrs = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %aliases = alloca i64, align 8
  %coding_type = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %safe_charsets = alloca i64, align 8
  %category = alloca i32, align 4
  %tail = alloca i64, align 8
  %val = alloca i64, align 8
  %max_charset_id = alloca i32, align 4
  %i = alloca i32, align 4
  %charset = alloca %struct.charset*, align 8
  %csid = alloca i32, align 4
  %idx = alloca i64, align 8
  %charset246 = alloca %struct.charset*, align 8
  %dim = alloca i32, align 4
  %idx251 = alloca i32, align 4
  %tmp = alloca i64, align 8
  %tmp2 = alloca i64, align 8
  %dim2 = alloca i32, align 4
  %valids = alloca i64, align 8
  %from = alloca i32, align 4
  %to = alloca i32, align 4
  %bom = alloca i64, align 8
  %endian = alloca i64, align 8
  %initial = alloca i64, align 8
  %reg_usage = alloca i64, align 8
  %request = alloca i64, align 8
  %flags = alloca i64, align 8
  %charset593 = alloca %struct.charset*, align 8
  %csid596 = alloca i32, align 4
  %idx599 = alloca i64, align 8
  %id654 = alloca i32, align 4
  %tmp1 = alloca i64, align 8
  %idx662 = alloca i64, align 8
  %id729 = alloca i32, align 4
  %charset781 = alloca %struct.charset*, align 8
  %charset881 = alloca %struct.charset*, align 8
  %bom941 = alloca i64, align 8
  %this_spec = alloca i64, align 8
  %this_name = alloca i64, align 8
  %this_aliases = alloca i64, align 8
  %this_eol_type = alloca i64, align 8
  %id1129 = alloca i32, align 4
  store i64 %nargs, i64* %nargs.addr, align 8
  store i64* %args, i64** %args.addr, align 8
  store i32 0, i32* %max_charset_id, align 4
  %0 = load i64, i64* %nargs.addr, align 8
  %cmp = icmp slt i64 %0, 13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %short_args

if.end:                                           ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fmake_vector(i64 122, i64 %call)
  store i64 %call1, i64* %attrs, align 8
  %1 = load i64*, i64** %args.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  store i64 %2, i64* %name, align 8
  %3 = load i64, i64* %name, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call i64 @builtin_lisp_symbol(i32 897)
  %4 = load i64, i64* %name, align 8
  %5 = call i64 @wrong_type_argument(i64 %call4, i64 %4) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %6, %cond.true
  %7 = load i64, i64* %attrs, align 8
  %8 = load i64, i64* %name, align 8
  call void @ASET(i64 %7, i64 0, i64 %8)
  %9 = load i64*, i64** %args.addr, align 8
  %arrayidx5 = getelementptr inbounds i64, i64* %9, i64 1
  %10 = load i64, i64* %arrayidx5, align 8
  store i64 %10, i64* %val, align 8
  %11 = load i64, i64* %val, align 8
  %call6 = call zeroext i1 @STRINGP(i64 %11)
  br i1 %call6, label %if.end.16, label %if.then.7

if.then.7:                                        ; preds = %cond.end
  %12 = load i64, i64* %val, align 8
  %call8 = call zeroext i1 @NATNUMP(i64 %12)
  br i1 %call8, label %land.lhs.true, label %cond.false.13

land.lhs.true:                                    ; preds = %if.then.7
  %13 = load i64, i64* %val, align 8
  %shr = ashr i64 %13, 2
  %cmp10 = icmp sle i64 %shr, 4194303
  br i1 %cmp10, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %land.lhs.true
  br label %cond.end.15

cond.false.13:                                    ; preds = %land.lhs.true, %if.then.7
  %call14 = call i64 @builtin_lisp_symbol(i32 260)
  %14 = load i64, i64* %val, align 8
  %15 = call i64 @wrong_type_argument(i64 %call14, i64 %14) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.15

cond.end.15:                                      ; preds = %16, %cond.true.12
  br label %if.end.16

if.end.16:                                        ; preds = %cond.end.15, %cond.end
  %17 = load i64, i64* %attrs, align 8
  %18 = load i64, i64* %val, align 8
  call void @ASET(i64 %17, i64 2, i64 %18)
  %19 = load i64*, i64** %args.addr, align 8
  %arrayidx17 = getelementptr inbounds i64, i64* %19, i64 2
  %20 = load i64, i64* %arrayidx17, align 8
  store i64 %20, i64* %coding_type, align 8
  %21 = load i64, i64* %coding_type, align 8
  %and18 = and i64 %21, 7
  %conv19 = trunc i64 %and18 to i32
  %cmp20 = icmp eq i32 %conv19, 0
  br i1 %cmp20, label %cond.true.22, label %cond.false.23

cond.true.22:                                     ; preds = %if.end.16
  br label %cond.end.25

cond.false.23:                                    ; preds = %if.end.16
  %call24 = call i64 @builtin_lisp_symbol(i32 897)
  %22 = load i64, i64* %coding_type, align 8
  %23 = call i64 @wrong_type_argument(i64 %call24, i64 %22) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.25

cond.end.25:                                      ; preds = %24, %cond.true.22
  %25 = load i64, i64* %attrs, align 8
  %26 = load i64, i64* %coding_type, align 8
  call void @ASET(i64 %25, i64 3, i64 %26)
  %27 = load i64*, i64** %args.addr, align 8
  %arrayidx26 = getelementptr inbounds i64, i64* %27, i64 3
  %28 = load i64, i64* %arrayidx26, align 8
  store i64 %28, i64* %charset_list, align 8
  %29 = load i64, i64* %charset_list, align 8
  %and27 = and i64 %29, 7
  %conv28 = trunc i64 %and27 to i32
  %cmp29 = icmp eq i32 %conv28, 0
  br i1 %cmp29, label %if.then.31, label %if.else.72

if.then.31:                                       ; preds = %cond.end.25
  %30 = load i64, i64* %charset_list, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp33 = icmp eq i64 %30, %call32
  br i1 %cmp33, label %if.then.35, label %if.else

if.then.35:                                       ; preds = %if.then.31
  %31 = load i64, i64* %coding_type, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp37 = icmp eq i64 %31, %call36
  br i1 %cmp37, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.then.35
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0)) #6
  unreachable

if.end.40:                                        ; preds = %if.then.35
  %32 = load i64, i64* @Viso_2022_charset_list, align 8
  store i64 %32, i64* %charset_list, align 8
  br label %if.end.51

if.else:                                          ; preds = %if.then.31
  %33 = load i64, i64* %charset_list, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp42 = icmp eq i64 %33, %call41
  br i1 %cmp42, label %if.then.44, label %if.end.50

if.then.44:                                       ; preds = %if.else
  %34 = load i64, i64* %coding_type, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp46 = icmp eq i64 %34, %call45
  br i1 %cmp46, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.then.44
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0)) #6
  unreachable

if.end.49:                                        ; preds = %if.then.44
  %35 = load i64, i64* @Vemacs_mule_charset_list, align 8
  store i64 %35, i64* %charset_list, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.else
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.end.40
  %36 = load i64, i64* %charset_list, align 8
  store i64 %36, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.51
  %37 = load i64, i64* %tail, align 8
  %and52 = and i64 %37, 7
  %conv53 = trunc i64 %and52 to i32
  %cmp54 = icmp eq i32 %conv53, 3
  br i1 %cmp54, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 0
  %41 = load i64, i64* %car, align 8
  %call56 = call zeroext i1 @RANGED_INTEGERP(i64 0, i64 %41, i64 2147483646)
  br i1 %call56, label %if.end.58, label %if.then.57

if.then.57:                                       ; preds = %for.body
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0)) #6
  unreachable

if.end.58:                                        ; preds = %for.body
  %42 = load i32, i32* %max_charset_id, align 4
  %conv59 = sext i32 %42 to i64
  %43 = load i64, i64* %tail, align 8
  %sub60 = sub nsw i64 %43, 3
  %44 = inttoptr i64 %sub60 to i8*
  %45 = bitcast i8* %44 to %struct.Lisp_Cons*
  %car61 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %45, i32 0, i32 0
  %46 = load i64, i64* %car61, align 8
  %shr62 = ashr i64 %46, 2
  %cmp63 = icmp slt i64 %conv59, %shr62
  br i1 %cmp63, label %if.then.65, label %if.end.70

if.then.65:                                       ; preds = %if.end.58
  %47 = load i64, i64* %tail, align 8
  %sub66 = sub nsw i64 %47, 3
  %48 = inttoptr i64 %sub66 to i8*
  %49 = bitcast i8* %48 to %struct.Lisp_Cons*
  %car67 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %49, i32 0, i32 0
  %50 = load i64, i64* %car67, align 8
  %shr68 = ashr i64 %50, 2
  %conv69 = trunc i64 %shr68 to i32
  store i32 %conv69, i32* %max_charset_id, align 4
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.65, %if.end.58
  br label %for.inc

for.inc:                                          ; preds = %if.end.70
  %51 = load i64, i64* %tail, align 8
  %sub71 = sub nsw i64 %51, 3
  %52 = inttoptr i64 %sub71 to i8*
  %53 = bitcast i8* %52 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %53, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %54 = load i64, i64* %cdr, align 8
  store i64 %54, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.133

if.else.72:                                       ; preds = %cond.end.25
  %55 = load i64, i64* %charset_list, align 8
  %call73 = call i64 @Fcopy_sequence(i64 %55)
  store i64 %call73, i64* %charset_list, align 8
  %56 = load i64, i64* %charset_list, align 8
  store i64 %56, i64* %tail, align 8
  br label %for.cond.74

for.cond.74:                                      ; preds = %for.inc.128, %if.else.72
  %57 = load i64, i64* %tail, align 8
  %and75 = and i64 %57, 7
  %conv76 = trunc i64 %and75 to i32
  %cmp77 = icmp eq i32 %conv76, 3
  br i1 %cmp77, label %for.body.79, label %for.end.132

for.body.79:                                      ; preds = %for.cond.74
  %58 = load i64, i64* %tail, align 8
  %sub80 = sub nsw i64 %58, 3
  %59 = inttoptr i64 %sub80 to i8*
  %60 = bitcast i8* %59 to %struct.Lisp_Cons*
  %car81 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %60, i32 0, i32 0
  %61 = load i64, i64* %car81, align 8
  store i64 %61, i64* %val, align 8
  br label %do.body

do.body:                                          ; preds = %for.body.79
  br label %do.body.82

do.body.82:                                       ; preds = %do.body
  %62 = load i64, i64* %val, align 8
  %and83 = and i64 %62, 7
  %conv84 = trunc i64 %and83 to i32
  %cmp85 = icmp eq i32 %conv84, 0
  br i1 %cmp85, label %lor.lhs.false, label %if.then.91

lor.lhs.false:                                    ; preds = %do.body.82
  %63 = load i64, i64* @Vcharset_hash_table, align 8
  %call87 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %63)
  %64 = load i64, i64* %val, align 8
  %call88 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call87, i64 %64, i64* null)
  store i64 %call88, i64* %idx, align 8
  %cmp89 = icmp slt i64 %call88, 0
  br i1 %cmp89, label %if.then.91, label %if.end.93

if.then.91:                                       ; preds = %lor.lhs.false, %do.body.82
  %call92 = call i64 @builtin_lisp_symbol(i32 262)
  %65 = load i64, i64* %val, align 8
  %66 = call i64 @wrong_type_argument(i64 %call92, i64 %65) #6
  unreachable

if.end.93:                                        ; preds = %lor.lhs.false
  %67 = load i64, i64* @Vcharset_hash_table, align 8
  %call94 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %67)
  %68 = load i64, i64* %idx, align 8
  %call95 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call94, i64 %68)
  %call96 = call i64 @AREF(i64 %call95, i64 0)
  %shr97 = ashr i64 %call96, 2
  %conv98 = trunc i64 %shr97 to i32
  store i32 %conv98, i32* %csid, align 4
  br label %do.end

do.end:                                           ; preds = %if.end.93
  %69 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %70 = load i32, i32* %csid, align 4
  %idx.ext = sext i32 %70 to i64
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %69, i64 %idx.ext
  store %struct.charset* %add.ptr, %struct.charset** %charset, align 8
  br label %do.end.99

do.end.99:                                        ; preds = %do.end
  %71 = load i64, i64* %coding_type, align 8
  %call100 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp101 = icmp eq i64 %71, %call100
  br i1 %cmp101, label %cond.true.103, label %cond.false.106

cond.true.103:                                    ; preds = %do.end.99
  %72 = load %struct.charset*, %struct.charset** %charset, align 8
  %iso_final = getelementptr inbounds %struct.charset, %struct.charset* %72, i32 0, i32 6
  %73 = load i32, i32* %iso_final, align 4
  %cmp104 = icmp slt i32 %73, 0
  br i1 %cmp104, label %if.then.114, label %if.end.120

cond.false.106:                                   ; preds = %do.end.99
  %74 = load i64, i64* %coding_type, align 8
  %call107 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp108 = icmp eq i64 %74, %call107
  br i1 %cmp108, label %cond.true.110, label %cond.false.113

cond.true.110:                                    ; preds = %cond.false.106
  %75 = load %struct.charset*, %struct.charset** %charset, align 8
  %emacs_mule_id = getelementptr inbounds %struct.charset, %struct.charset* %75, i32 0, i32 8
  %76 = load i32, i32* %emacs_mule_id, align 4
  %cmp111 = icmp slt i32 %76, 0
  br i1 %cmp111, label %if.then.114, label %if.end.120

cond.false.113:                                   ; preds = %cond.false.106
  br i1 false, label %if.then.114, label %if.end.120

if.then.114:                                      ; preds = %cond.false.113, %cond.true.110, %cond.true.103
  %77 = load i64, i64* @Vcharset_hash_table, align 8
  %call115 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %77)
  %78 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %78, i32 0, i32 1
  %79 = load i64, i64* %hash_index, align 8
  %call116 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call115, i64 %79)
  %call117 = call i64 @AREF(i64 %call116, i64 1)
  %call118 = call i64 @SYMBOL_NAME(i64 %call117)
  %call119 = call i8* @SDATA(i64 %call118)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i32 0, i32 0), i8* %call119) #6
  unreachable

if.end.120:                                       ; preds = %cond.false.113, %cond.true.110, %cond.true.103
  %80 = load i64, i64* %tail, align 8
  %81 = load %struct.charset*, %struct.charset** %charset, align 8
  %id = getelementptr inbounds %struct.charset, %struct.charset* %81, i32 0, i32 0
  %82 = load i32, i32* %id, align 4
  %conv121 = sext i32 %82 to i64
  %shl = shl i64 %conv121, 2
  %add = add i64 %shl, 2
  call void @XSETCAR(i64 %80, i64 %add)
  %83 = load i32, i32* %max_charset_id, align 4
  %84 = load %struct.charset*, %struct.charset** %charset, align 8
  %id122 = getelementptr inbounds %struct.charset, %struct.charset* %84, i32 0, i32 0
  %85 = load i32, i32* %id122, align 4
  %cmp123 = icmp slt i32 %83, %85
  br i1 %cmp123, label %if.then.125, label %if.end.127

if.then.125:                                      ; preds = %if.end.120
  %86 = load %struct.charset*, %struct.charset** %charset, align 8
  %id126 = getelementptr inbounds %struct.charset, %struct.charset* %86, i32 0, i32 0
  %87 = load i32, i32* %id126, align 4
  store i32 %87, i32* %max_charset_id, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.125, %if.end.120
  br label %for.inc.128

for.inc.128:                                      ; preds = %if.end.127
  %88 = load i64, i64* %tail, align 8
  %sub129 = sub nsw i64 %88, 3
  %89 = inttoptr i64 %sub129 to i8*
  %90 = bitcast i8* %89 to %struct.Lisp_Cons*
  %u130 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %90, i32 0, i32 1
  %cdr131 = bitcast %union.anon.0* %u130 to i64*
  %91 = load i64, i64* %cdr131, align 8
  store i64 %91, i64* %tail, align 8
  br label %for.cond.74

for.end.132:                                      ; preds = %for.cond.74
  br label %if.end.133

if.end.133:                                       ; preds = %for.end.132, %for.end
  %92 = load i64, i64* %attrs, align 8
  %93 = load i64, i64* %charset_list, align 8
  call void @ASET(i64 %92, i64 4, i64 %93)
  %94 = load i32, i32* %max_charset_id, align 4
  %add134 = add nsw i32 %94, 1
  %conv135 = sext i32 %add134 to i64
  %call136 = call i64 @make_uninit_string(i64 %conv135)
  store i64 %call136, i64* %safe_charsets, align 8
  %95 = load i64, i64* %safe_charsets, align 8
  %call137 = call i8* @SDATA(i64 %95)
  %96 = load i32, i32* %max_charset_id, align 4
  %add138 = add nsw i32 %96, 1
  %conv139 = sext i32 %add138 to i64
  call void @llvm.memset.p0i8.i64(i8* %call137, i8 -1, i64 %conv139, i32 1, i1 false)
  %97 = load i64, i64* %charset_list, align 8
  store i64 %97, i64* %tail, align 8
  br label %for.cond.140

for.cond.140:                                     ; preds = %for.inc.149, %if.end.133
  %98 = load i64, i64* %tail, align 8
  %and141 = and i64 %98, 7
  %conv142 = trunc i64 %and141 to i32
  %cmp143 = icmp eq i32 %conv142, 3
  br i1 %cmp143, label %for.body.145, label %for.end.153

for.body.145:                                     ; preds = %for.cond.140
  %99 = load i64, i64* %safe_charsets, align 8
  %100 = load i64, i64* %tail, align 8
  %sub146 = sub nsw i64 %100, 3
  %101 = inttoptr i64 %sub146 to i8*
  %102 = bitcast i8* %101 to %struct.Lisp_Cons*
  %car147 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %102, i32 0, i32 0
  %103 = load i64, i64* %car147, align 8
  %shr148 = ashr i64 %103, 2
  call void @SSET(i64 %99, i64 %shr148, i8 zeroext 0)
  br label %for.inc.149

for.inc.149:                                      ; preds = %for.body.145
  %104 = load i64, i64* %tail, align 8
  %sub150 = sub nsw i64 %104, 3
  %105 = inttoptr i64 %sub150 to i8*
  %106 = bitcast i8* %105 to %struct.Lisp_Cons*
  %u151 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %106, i32 0, i32 1
  %cdr152 = bitcast %union.anon.0* %u151 to i64*
  %107 = load i64, i64* %cdr152, align 8
  store i64 %107, i64* %tail, align 8
  br label %for.cond.140

for.end.153:                                      ; preds = %for.cond.140
  %108 = load i64, i64* %attrs, align 8
  %109 = load i64, i64* %safe_charsets, align 8
  call void @ASET(i64 %108, i64 15, i64 %109)
  %110 = load i64, i64* %attrs, align 8
  %111 = load i64*, i64** %args.addr, align 8
  %arrayidx154 = getelementptr inbounds i64, i64* %111, i64 4
  %112 = load i64, i64* %arrayidx154, align 8
  call void @ASET(i64 %110, i64 5, i64 %112)
  %113 = load i64*, i64** %args.addr, align 8
  %arrayidx155 = getelementptr inbounds i64, i64* %113, i64 5
  %114 = load i64, i64* %arrayidx155, align 8
  store i64 %114, i64* %val, align 8
  %115 = load i64, i64* %val, align 8
  %call156 = call zeroext i1 @CHAR_TABLE_P(i64 %115)
  br i1 %call156, label %if.end.171, label %land.lhs.true.157

land.lhs.true.157:                                ; preds = %for.end.153
  %116 = load i64, i64* %val, align 8
  %and158 = and i64 %116, 7
  %conv159 = trunc i64 %and158 to i32
  %cmp160 = icmp eq i32 %conv159, 3
  br i1 %cmp160, label %if.end.171, label %if.then.162

if.then.162:                                      ; preds = %land.lhs.true.157
  %117 = load i64, i64* %val, align 8
  %and163 = and i64 %117, 7
  %conv164 = trunc i64 %and163 to i32
  %cmp165 = icmp eq i32 %conv164, 0
  br i1 %cmp165, label %cond.true.167, label %cond.false.168

cond.true.167:                                    ; preds = %if.then.162
  br label %cond.end.170

cond.false.168:                                   ; preds = %if.then.162
  %call169 = call i64 @builtin_lisp_symbol(i32 897)
  %118 = load i64, i64* %val, align 8
  %119 = call i64 @wrong_type_argument(i64 %call169, i64 %118) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.170

cond.end.170:                                     ; preds = %120, %cond.true.167
  br label %if.end.171

if.end.171:                                       ; preds = %cond.end.170, %land.lhs.true.157, %for.end.153
  %121 = load i64, i64* %attrs, align 8
  %122 = load i64, i64* %val, align 8
  call void @ASET(i64 %121, i64 6, i64 %122)
  %123 = load i64*, i64** %args.addr, align 8
  %arrayidx172 = getelementptr inbounds i64, i64* %123, i64 6
  %124 = load i64, i64* %arrayidx172, align 8
  store i64 %124, i64* %val, align 8
  %125 = load i64, i64* %val, align 8
  %call173 = call zeroext i1 @CHAR_TABLE_P(i64 %125)
  br i1 %call173, label %if.end.188, label %land.lhs.true.174

land.lhs.true.174:                                ; preds = %if.end.171
  %126 = load i64, i64* %val, align 8
  %and175 = and i64 %126, 7
  %conv176 = trunc i64 %and175 to i32
  %cmp177 = icmp eq i32 %conv176, 3
  br i1 %cmp177, label %if.end.188, label %if.then.179

if.then.179:                                      ; preds = %land.lhs.true.174
  %127 = load i64, i64* %val, align 8
  %and180 = and i64 %127, 7
  %conv181 = trunc i64 %and180 to i32
  %cmp182 = icmp eq i32 %conv181, 0
  br i1 %cmp182, label %cond.true.184, label %cond.false.185

cond.true.184:                                    ; preds = %if.then.179
  br label %cond.end.187

cond.false.185:                                   ; preds = %if.then.179
  %call186 = call i64 @builtin_lisp_symbol(i32 897)
  %128 = load i64, i64* %val, align 8
  %129 = call i64 @wrong_type_argument(i64 %call186, i64 %128) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.187

cond.end.187:                                     ; preds = %130, %cond.true.184
  br label %if.end.188

if.end.188:                                       ; preds = %cond.end.187, %land.lhs.true.174, %if.end.171
  %131 = load i64, i64* %attrs, align 8
  %132 = load i64, i64* %val, align 8
  call void @ASET(i64 %131, i64 7, i64 %132)
  %133 = load i64*, i64** %args.addr, align 8
  %arrayidx189 = getelementptr inbounds i64, i64* %133, i64 7
  %134 = load i64, i64* %arrayidx189, align 8
  store i64 %134, i64* %val, align 8
  %135 = load i64, i64* %val, align 8
  %and190 = and i64 %135, 7
  %conv191 = trunc i64 %and190 to i32
  %cmp192 = icmp eq i32 %conv191, 0
  br i1 %cmp192, label %cond.true.194, label %cond.false.195

cond.true.194:                                    ; preds = %if.end.188
  br label %cond.end.197

cond.false.195:                                   ; preds = %if.end.188
  %call196 = call i64 @builtin_lisp_symbol(i32 897)
  %136 = load i64, i64* %val, align 8
  %137 = call i64 @wrong_type_argument(i64 %call196, i64 %136) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.197

cond.end.197:                                     ; preds = %138, %cond.true.194
  %139 = load i64, i64* %attrs, align 8
  %140 = load i64, i64* %val, align 8
  call void @ASET(i64 %139, i64 9, i64 %140)
  %141 = load i64*, i64** %args.addr, align 8
  %arrayidx198 = getelementptr inbounds i64, i64* %141, i64 8
  %142 = load i64, i64* %arrayidx198, align 8
  store i64 %142, i64* %val, align 8
  %143 = load i64, i64* %val, align 8
  %and199 = and i64 %143, 7
  %conv200 = trunc i64 %and199 to i32
  %cmp201 = icmp eq i32 %conv200, 0
  br i1 %cmp201, label %cond.true.203, label %cond.false.204

cond.true.203:                                    ; preds = %cond.end.197
  br label %cond.end.206

cond.false.204:                                   ; preds = %cond.end.197
  %call205 = call i64 @builtin_lisp_symbol(i32 897)
  %144 = load i64, i64* %val, align 8
  %145 = call i64 @wrong_type_argument(i64 %call205, i64 %144) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.206

cond.end.206:                                     ; preds = %146, %cond.true.203
  %147 = load i64, i64* %attrs, align 8
  %148 = load i64, i64* %val, align 8
  call void @ASET(i64 %147, i64 10, i64 %148)
  %149 = load i64*, i64** %args.addr, align 8
  %arrayidx207 = getelementptr inbounds i64, i64* %149, i64 9
  %150 = load i64, i64* %arrayidx207, align 8
  store i64 %150, i64* %val, align 8
  %151 = load i64, i64* %val, align 8
  %call208 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp209 = icmp eq i64 %151, %call208
  br i1 %cmp209, label %if.then.211, label %if.else.212

if.then.211:                                      ; preds = %cond.end.206
  %152 = load i64, i64* %attrs, align 8
  call void @ASET(i64 %152, i64 11, i64 130)
  br label %if.end.223

if.else.212:                                      ; preds = %cond.end.206
  %153 = load i64, i64* %val, align 8
  %call213 = call zeroext i1 @NATNUMP(i64 %153)
  br i1 %call213, label %land.lhs.true.215, label %cond.false.220

land.lhs.true.215:                                ; preds = %if.else.212
  %154 = load i64, i64* %val, align 8
  %shr216 = ashr i64 %154, 2
  %cmp217 = icmp sle i64 %shr216, 4194303
  br i1 %cmp217, label %cond.true.219, label %cond.false.220

cond.true.219:                                    ; preds = %land.lhs.true.215
  br label %cond.end.222

cond.false.220:                                   ; preds = %land.lhs.true.215, %if.else.212
  %call221 = call i64 @builtin_lisp_symbol(i32 260)
  %155 = load i64, i64* %val, align 8
  %156 = call i64 @wrong_type_argument(i64 %call221, i64 %155) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.222

cond.end.222:                                     ; preds = %157, %cond.true.219
  %158 = load i64, i64* %attrs, align 8
  %159 = load i64, i64* %val, align 8
  call void @ASET(i64 %158, i64 11, i64 %159)
  br label %if.end.223

if.end.223:                                       ; preds = %cond.end.222, %if.then.211
  %160 = load i64*, i64** %args.addr, align 8
  %arrayidx224 = getelementptr inbounds i64, i64* %160, i64 10
  %161 = load i64, i64* %arrayidx224, align 8
  store i64 %161, i64* %val, align 8
  %162 = load i64, i64* %attrs, align 8
  %163 = load i64, i64* %val, align 8
  %call225 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp226 = icmp eq i64 %163, %call225
  br i1 %cmp226, label %cond.true.228, label %cond.false.230

cond.true.228:                                    ; preds = %if.end.223
  %call229 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.232

cond.false.230:                                   ; preds = %if.end.223
  %call231 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end.232

cond.end.232:                                     ; preds = %cond.false.230, %cond.true.228
  %cond = phi i64 [ %call229, %cond.true.228 ], [ %call231, %cond.false.230 ]
  call void @ASET(i64 %162, i64 12, i64 %cond)
  %164 = load i64*, i64** %args.addr, align 8
  %arrayidx233 = getelementptr inbounds i64, i64* %164, i64 11
  %165 = load i64, i64* %arrayidx233, align 8
  store i64 %165, i64* %val, align 8
  %166 = load i64, i64* %val, align 8
  call void @CHECK_LIST(i64 %166)
  %167 = load i64, i64* %attrs, align 8
  %168 = load i64, i64* %val, align 8
  call void @ASET(i64 %167, i64 13, i64 %168)
  %169 = load i64, i64* %coding_type, align 8
  %call234 = call i64 @builtin_lisp_symbol(i32 261)
  %cmp235 = icmp eq i64 %169, %call234
  br i1 %cmp235, label %if.then.237, label %if.else.341

if.then.237:                                      ; preds = %cond.end.232
  %call238 = call i64 @builtin_lisp_symbol(i32 0)
  %call239 = call i64 @Fmake_vector(i64 1026, i64 %call238)
  store i64 %call239, i64* %val, align 8
  %170 = load i64, i64* %charset_list, align 8
  store i64 %170, i64* %tail, align 8
  br label %for.cond.240

for.cond.240:                                     ; preds = %for.inc.336, %if.then.237
  %171 = load i64, i64* %tail, align 8
  %and241 = and i64 %171, 7
  %conv242 = trunc i64 %and241 to i32
  %cmp243 = icmp eq i32 %conv242, 3
  br i1 %cmp243, label %for.body.245, label %for.end.340

for.body.245:                                     ; preds = %for.cond.240
  %172 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %173 = load i64, i64* %tail, align 8
  %sub247 = sub nsw i64 %173, 3
  %174 = inttoptr i64 %sub247 to i8*
  %175 = bitcast i8* %174 to %struct.Lisp_Cons*
  %car248 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %175, i32 0, i32 0
  %176 = load i64, i64* %car248, align 8
  %shr249 = ashr i64 %176, 2
  %add.ptr250 = getelementptr inbounds %struct.charset, %struct.charset* %172, i64 %shr249
  store %struct.charset* %add.ptr250, %struct.charset** %charset246, align 8
  %177 = load %struct.charset*, %struct.charset** %charset246, align 8
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %177, i32 0, i32 2
  %178 = load i32, i32* %dimension, align 4
  store i32 %178, i32* %dim, align 4
  %179 = load i32, i32* %dim, align 4
  %sub252 = sub nsw i32 %179, 1
  %mul = mul nsw i32 %sub252, 4
  store i32 %mul, i32* %idx251, align 4
  %180 = load %struct.charset*, %struct.charset** %charset246, align 8
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %180, i32 0, i32 5
  %bf.load = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then.253, label %if.end.255

if.then.253:                                      ; preds = %for.body.245
  %181 = load i64, i64* %attrs, align 8
  %call254 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %181, i64 5, i64 %call254)
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.253, %for.body.245
  %182 = load i32, i32* %idx251, align 4
  %idxprom = sext i32 %182 to i64
  %183 = load %struct.charset*, %struct.charset** %charset246, align 8
  %code_space = getelementptr inbounds %struct.charset, %struct.charset* %183, i32 0, i32 3
  %arrayidx256 = getelementptr inbounds [15 x i32], [15 x i32]* %code_space, i32 0, i64 %idxprom
  %184 = load i32, i32* %arrayidx256, align 4
  store i32 %184, i32* %i, align 4
  br label %for.cond.257

for.cond.257:                                     ; preds = %for.inc.334, %if.end.255
  %185 = load i32, i32* %i, align 4
  %186 = load i32, i32* %idx251, align 4
  %add258 = add nsw i32 %186, 1
  %idxprom259 = sext i32 %add258 to i64
  %187 = load %struct.charset*, %struct.charset** %charset246, align 8
  %code_space260 = getelementptr inbounds %struct.charset, %struct.charset* %187, i32 0, i32 3
  %arrayidx261 = getelementptr inbounds [15 x i32], [15 x i32]* %code_space260, i32 0, i64 %idxprom259
  %188 = load i32, i32* %arrayidx261, align 4
  %cmp262 = icmp sle i32 %185, %188
  br i1 %cmp262, label %for.body.264, label %for.end.335

for.body.264:                                     ; preds = %for.cond.257
  %189 = load i64, i64* %val, align 8
  %190 = load i32, i32* %i, align 4
  %conv267 = sext i32 %190 to i64
  %call268 = call i64 @AREF(i64 %189, i64 %conv267)
  store i64 %call268, i64* %tmp, align 8
  %191 = load i64, i64* %tmp, align 8
  %call269 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp270 = icmp eq i64 %191, %call269
  br i1 %cmp270, label %if.then.272, label %if.else.275

if.then.272:                                      ; preds = %for.body.264
  %192 = load i64, i64* %tail, align 8
  %sub273 = sub nsw i64 %192, 3
  %193 = inttoptr i64 %sub273 to i8*
  %194 = bitcast i8* %193 to %struct.Lisp_Cons*
  %car274 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %194, i32 0, i32 0
  %195 = load i64, i64* %car274, align 8
  store i64 %195, i64* %tmp, align 8
  br label %if.end.332

if.else.275:                                      ; preds = %for.body.264
  %196 = load i64, i64* %tmp, align 8
  %call276 = call zeroext i1 @NUMBERP(i64 %196)
  br i1 %call276, label %if.then.277, label %if.else.292

if.then.277:                                      ; preds = %if.else.275
  %197 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %198 = load i64, i64* %tmp, align 8
  %shr278 = ashr i64 %198, 2
  %add.ptr279 = getelementptr inbounds %struct.charset, %struct.charset* %197, i64 %shr278
  %dimension280 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr279, i32 0, i32 2
  %199 = load i32, i32* %dimension280, align 4
  store i32 %199, i32* %dim2, align 4
  %200 = load i32, i32* %dim, align 4
  %201 = load i32, i32* %dim2, align 4
  %cmp281 = icmp slt i32 %200, %201
  br i1 %cmp281, label %if.then.283, label %if.else.287

if.then.283:                                      ; preds = %if.then.277
  %202 = load i64, i64* %tail, align 8
  %sub284 = sub nsw i64 %202, 3
  %203 = inttoptr i64 %sub284 to i8*
  %204 = bitcast i8* %203 to %struct.Lisp_Cons*
  %car285 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %204, i32 0, i32 0
  %205 = load i64, i64* %car285, align 8
  %206 = load i64, i64* %tmp, align 8
  %call286 = call i64 @list2(i64 %205, i64 %206)
  store i64 %call286, i64* %tmp, align 8
  br label %if.end.291

if.else.287:                                      ; preds = %if.then.277
  %207 = load i64, i64* %tmp, align 8
  %208 = load i64, i64* %tail, align 8
  %sub288 = sub nsw i64 %208, 3
  %209 = inttoptr i64 %sub288 to i8*
  %210 = bitcast i8* %209 to %struct.Lisp_Cons*
  %car289 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %210, i32 0, i32 0
  %211 = load i64, i64* %car289, align 8
  %call290 = call i64 @list2(i64 %207, i64 %211)
  store i64 %call290, i64* %tmp, align 8
  br label %if.end.291

if.end.291:                                       ; preds = %if.else.287, %if.then.283
  br label %if.end.331

if.else.292:                                      ; preds = %if.else.275
  %212 = load i64, i64* %tmp, align 8
  store i64 %212, i64* %tmp2, align 8
  br label %for.cond.293

for.cond.293:                                     ; preds = %for.inc.308, %if.else.292
  %213 = load i64, i64* %tmp2, align 8
  %and294 = and i64 %213, 7
  %conv295 = trunc i64 %and294 to i32
  %cmp296 = icmp eq i32 %conv295, 3
  br i1 %cmp296, label %for.body.298, label %for.end.312

for.body.298:                                     ; preds = %for.cond.293
  %214 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %215 = load i64, i64* %tmp2, align 8
  %sub299 = sub nsw i64 %215, 3
  %216 = inttoptr i64 %sub299 to i8*
  %217 = bitcast i8* %216 to %struct.Lisp_Cons*
  %car300 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %217, i32 0, i32 0
  %218 = load i64, i64* %car300, align 8
  %shr301 = ashr i64 %218, 2
  %add.ptr302 = getelementptr inbounds %struct.charset, %struct.charset* %214, i64 %shr301
  %dimension303 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr302, i32 0, i32 2
  %219 = load i32, i32* %dimension303, align 4
  store i32 %219, i32* %dim2, align 4
  %220 = load i32, i32* %dim, align 4
  %221 = load i32, i32* %dim2, align 4
  %cmp304 = icmp slt i32 %220, %221
  br i1 %cmp304, label %if.then.306, label %if.end.307

if.then.306:                                      ; preds = %for.body.298
  br label %for.end.312

if.end.307:                                       ; preds = %for.body.298
  br label %for.inc.308

for.inc.308:                                      ; preds = %if.end.307
  %222 = load i64, i64* %tmp2, align 8
  %sub309 = sub nsw i64 %222, 3
  %223 = inttoptr i64 %sub309 to i8*
  %224 = bitcast i8* %223 to %struct.Lisp_Cons*
  %u310 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %224, i32 0, i32 1
  %cdr311 = bitcast %union.anon.0* %u310 to i64*
  %225 = load i64, i64* %cdr311, align 8
  store i64 %225, i64* %tmp2, align 8
  br label %for.cond.293

for.end.312:                                      ; preds = %if.then.306, %for.cond.293
  %226 = load i64, i64* %tmp2, align 8
  %call313 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp314 = icmp eq i64 %226, %call313
  br i1 %cmp314, label %if.then.316, label %if.else.321

if.then.316:                                      ; preds = %for.end.312
  %227 = load i64, i64* %tmp, align 8
  %228 = load i64, i64* %tail, align 8
  %sub317 = sub nsw i64 %228, 3
  %229 = inttoptr i64 %sub317 to i8*
  %230 = bitcast i8* %229 to %struct.Lisp_Cons*
  %car318 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %230, i32 0, i32 0
  %231 = load i64, i64* %car318, align 8
  %call319 = call i64 @list1(i64 %231)
  %call320 = call i64 @nconc2(i64 %227, i64 %call319)
  store i64 %call320, i64* %tmp, align 8
  br label %if.end.330

if.else.321:                                      ; preds = %for.end.312
  %232 = load i64, i64* %tmp2, align 8
  %233 = load i64, i64* %tmp2, align 8
  %sub322 = sub nsw i64 %233, 3
  %234 = inttoptr i64 %sub322 to i8*
  %235 = bitcast i8* %234 to %struct.Lisp_Cons*
  %car323 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %235, i32 0, i32 0
  %236 = load i64, i64* %car323, align 8
  %237 = load i64, i64* %tmp2, align 8
  %sub324 = sub nsw i64 %237, 3
  %238 = inttoptr i64 %sub324 to i8*
  %239 = bitcast i8* %238 to %struct.Lisp_Cons*
  %u325 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %239, i32 0, i32 1
  %cdr326 = bitcast %union.anon.0* %u325 to i64*
  %240 = load i64, i64* %cdr326, align 8
  %call327 = call i64 @Fcons(i64 %236, i64 %240)
  call void @XSETCDR(i64 %232, i64 %call327)
  %241 = load i64, i64* %tmp2, align 8
  %242 = load i64, i64* %tail, align 8
  %sub328 = sub nsw i64 %242, 3
  %243 = inttoptr i64 %sub328 to i8*
  %244 = bitcast i8* %243 to %struct.Lisp_Cons*
  %car329 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %244, i32 0, i32 0
  %245 = load i64, i64* %car329, align 8
  call void @XSETCAR(i64 %241, i64 %245)
  br label %if.end.330

if.end.330:                                       ; preds = %if.else.321, %if.then.316
  br label %if.end.331

if.end.331:                                       ; preds = %if.end.330, %if.end.291
  br label %if.end.332

if.end.332:                                       ; preds = %if.end.331, %if.then.272
  %246 = load i64, i64* %val, align 8
  %247 = load i32, i32* %i, align 4
  %conv333 = sext i32 %247 to i64
  %248 = load i64, i64* %tmp, align 8
  call void @ASET(i64 %246, i64 %conv333, i64 %248)
  br label %for.inc.334

for.inc.334:                                      ; preds = %if.end.332
  %249 = load i32, i32* %i, align 4
  %inc = add nsw i32 %249, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.257

for.end.335:                                      ; preds = %for.cond.257
  br label %for.inc.336

for.inc.336:                                      ; preds = %for.end.335
  %250 = load i64, i64* %tail, align 8
  %sub337 = sub nsw i64 %250, 3
  %251 = inttoptr i64 %sub337 to i8*
  %252 = bitcast i8* %251 to %struct.Lisp_Cons*
  %u338 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %252, i32 0, i32 1
  %cdr339 = bitcast %union.anon.0* %u338 to i64*
  %253 = load i64, i64* %cdr339, align 8
  store i64 %253, i64* %tail, align 8
  br label %for.cond.240

for.end.340:                                      ; preds = %for.cond.240
  %254 = load i64, i64* %attrs, align 8
  %255 = load i64, i64* %val, align 8
  call void @ASET(i64 %254, i64 16, i64 %255)
  store i32 14, i32* %category, align 4
  br label %if.end.1031

if.else.341:                                      ; preds = %cond.end.232
  %256 = load i64, i64* %coding_type, align 8
  %call342 = call i64 @builtin_lisp_symbol(i32 246)
  %cmp343 = icmp eq i64 %256, %call342
  br i1 %cmp343, label %if.then.345, label %if.else.462

if.then.345:                                      ; preds = %if.else.341
  %257 = load i64, i64* %nargs.addr, align 8
  %cmp347 = icmp slt i64 %257, 16
  br i1 %cmp347, label %if.then.349, label %if.end.350

if.then.349:                                      ; preds = %if.then.345
  br label %short_args

if.end.350:                                       ; preds = %if.then.345
  %258 = load i64*, i64** %args.addr, align 8
  %arrayidx351 = getelementptr inbounds i64, i64* %258, i64 13
  %259 = load i64, i64* %arrayidx351, align 8
  store i64 %259, i64* %val, align 8
  br label %do.body.352

do.body.352:                                      ; preds = %if.end.350
  %260 = load i64, i64* %val, align 8
  %call353 = call i64 @Fccl_program_p(i64 %260)
  %call354 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp355 = icmp eq i64 %call353, %call354
  br i1 %cmp355, label %if.then.357, label %if.end.359

if.then.357:                                      ; preds = %do.body.352
  %call358 = call i64 @builtin_lisp_symbol(i32 248)
  %261 = load i64, i64* %val, align 8
  %262 = call i64 @wrong_type_argument(i64 %call358, i64 %261) #6
  unreachable

if.end.359:                                       ; preds = %do.body.352
  br label %do.end.360

do.end.360:                                       ; preds = %if.end.359
  %263 = load i64, i64* %val, align 8
  %call361 = call zeroext i1 @VECTORP(i64 %263)
  br i1 %call361, label %if.then.362, label %if.end.364

if.then.362:                                      ; preds = %do.end.360
  %264 = load i64, i64* %val, align 8
  %call363 = call i64 @Fcopy_sequence(i64 %264)
  store i64 %call363, i64* %val, align 8
  br label %if.end.364

if.end.364:                                       ; preds = %if.then.362, %do.end.360
  %265 = load i64, i64* %attrs, align 8
  %266 = load i64, i64* %val, align 8
  call void @ASET(i64 %265, i64 17, i64 %266)
  %267 = load i64*, i64** %args.addr, align 8
  %arrayidx365 = getelementptr inbounds i64, i64* %267, i64 14
  %268 = load i64, i64* %arrayidx365, align 8
  store i64 %268, i64* %val, align 8
  br label %do.body.366

do.body.366:                                      ; preds = %if.end.364
  %269 = load i64, i64* %val, align 8
  %call367 = call i64 @Fccl_program_p(i64 %269)
  %call368 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp369 = icmp eq i64 %call367, %call368
  br i1 %cmp369, label %if.then.371, label %if.end.373

if.then.371:                                      ; preds = %do.body.366
  %call372 = call i64 @builtin_lisp_symbol(i32 248)
  %270 = load i64, i64* %val, align 8
  %271 = call i64 @wrong_type_argument(i64 %call372, i64 %270) #6
  unreachable

if.end.373:                                       ; preds = %do.body.366
  br label %do.end.374

do.end.374:                                       ; preds = %if.end.373
  %272 = load i64, i64* %val, align 8
  %call375 = call zeroext i1 @VECTORP(i64 %272)
  br i1 %call375, label %if.then.376, label %if.end.378

if.then.376:                                      ; preds = %do.end.374
  %273 = load i64, i64* %val, align 8
  %call377 = call i64 @Fcopy_sequence(i64 %273)
  store i64 %call377, i64* %val, align 8
  br label %if.end.378

if.end.378:                                       ; preds = %if.then.376, %do.end.374
  %274 = load i64, i64* %attrs, align 8
  %275 = load i64, i64* %val, align 8
  call void @ASET(i64 %274, i64 18, i64 %275)
  %276 = load i64*, i64** %args.addr, align 8
  %arrayidx379 = getelementptr inbounds i64, i64* %276, i64 15
  %277 = load i64, i64* %arrayidx379, align 8
  store i64 %277, i64* %val, align 8
  %call380 = call i64 @Fmake_string(i64 1026, i64 2)
  store i64 %call380, i64* %valids, align 8
  %278 = load i64, i64* %val, align 8
  store i64 %278, i64* %tail, align 8
  br label %for.cond.381

for.cond.381:                                     ; preds = %for.inc.457, %if.end.378
  %279 = load i64, i64* %tail, align 8
  %and382 = and i64 %279, 7
  %conv383 = trunc i64 %and382 to i32
  %cmp384 = icmp eq i32 %conv383, 3
  br i1 %cmp384, label %for.body.386, label %for.end.461

for.body.386:                                     ; preds = %for.cond.381
  %280 = load i64, i64* %tail, align 8
  %sub389 = sub nsw i64 %280, 3
  %281 = inttoptr i64 %sub389 to i8*
  %282 = bitcast i8* %281 to %struct.Lisp_Cons*
  %car390 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %282, i32 0, i32 0
  %283 = load i64, i64* %car390, align 8
  store i64 %283, i64* %val, align 8
  %284 = load i64, i64* %val, align 8
  %and391 = and i64 %284, 7
  %conv392 = trunc i64 %and391 to i32
  %and393 = and i32 %conv392, -5
  %cmp394 = icmp eq i32 %and393, 2
  br i1 %cmp394, label %if.then.396, label %if.else.408

if.then.396:                                      ; preds = %for.body.386
  %285 = load i64, i64* %val, align 8
  %shr397 = ashr i64 %285, 2
  %cmp398 = icmp sle i64 0, %shr397
  br i1 %cmp398, label %land.lhs.true.400, label %if.then.404

land.lhs.true.400:                                ; preds = %if.then.396
  %286 = load i64, i64* %val, align 8
  %shr401 = ashr i64 %286, 2
  %cmp402 = icmp sle i64 %shr401, 255
  br i1 %cmp402, label %if.end.405, label %if.then.404

if.then.404:                                      ; preds = %land.lhs.true.400, %if.then.396
  %287 = load i64, i64* %val, align 8
  call void @args_out_of_range_3(i64 %287, i64 2, i64 1022) #6
  unreachable

if.end.405:                                       ; preds = %land.lhs.true.400
  %288 = load i64, i64* %val, align 8
  %shr406 = ashr i64 %288, 2
  %conv407 = trunc i64 %shr406 to i32
  store i32 %conv407, i32* %to, align 4
  store i32 %conv407, i32* %from, align 4
  br label %if.end.448

if.else.408:                                      ; preds = %for.body.386
  %289 = load i64, i64* %val, align 8
  call void @CHECK_CONS(i64 %289)
  %290 = load i64, i64* %val, align 8
  call void @CHECK_NATNUM_CAR(i64 %290)
  %291 = load i64, i64* %val, align 8
  call void @CHECK_NUMBER_CDR(i64 %291)
  %292 = load i64, i64* %val, align 8
  %sub409 = sub nsw i64 %292, 3
  %293 = inttoptr i64 %sub409 to i8*
  %294 = bitcast i8* %293 to %struct.Lisp_Cons*
  %car410 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %294, i32 0, i32 0
  %295 = load i64, i64* %car410, align 8
  %shr411 = ashr i64 %295, 2
  %cmp412 = icmp sgt i64 %shr411, 255
  br i1 %cmp412, label %if.then.414, label %if.end.417

if.then.414:                                      ; preds = %if.else.408
  %296 = load i64, i64* %val, align 8
  %sub415 = sub nsw i64 %296, 3
  %297 = inttoptr i64 %sub415 to i8*
  %298 = bitcast i8* %297 to %struct.Lisp_Cons*
  %car416 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %298, i32 0, i32 0
  %299 = load i64, i64* %car416, align 8
  call void @args_out_of_range_3(i64 %299, i64 2, i64 1022) #6
  unreachable

if.end.417:                                       ; preds = %if.else.408
  %300 = load i64, i64* %val, align 8
  %sub418 = sub nsw i64 %300, 3
  %301 = inttoptr i64 %sub418 to i8*
  %302 = bitcast i8* %301 to %struct.Lisp_Cons*
  %car419 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %302, i32 0, i32 0
  %303 = load i64, i64* %car419, align 8
  %shr420 = ashr i64 %303, 2
  %conv421 = trunc i64 %shr420 to i32
  store i32 %conv421, i32* %from, align 4
  %304 = load i32, i32* %from, align 4
  %conv422 = sext i32 %304 to i64
  %305 = load i64, i64* %val, align 8
  %sub423 = sub nsw i64 %305, 3
  %306 = inttoptr i64 %sub423 to i8*
  %307 = bitcast i8* %306 to %struct.Lisp_Cons*
  %u424 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %307, i32 0, i32 1
  %cdr425 = bitcast %union.anon.0* %u424 to i64*
  %308 = load i64, i64* %cdr425, align 8
  %shr426 = ashr i64 %308, 2
  %cmp427 = icmp sle i64 %conv422, %shr426
  br i1 %cmp427, label %land.lhs.true.429, label %if.then.436

land.lhs.true.429:                                ; preds = %if.end.417
  %309 = load i64, i64* %val, align 8
  %sub430 = sub nsw i64 %309, 3
  %310 = inttoptr i64 %sub430 to i8*
  %311 = bitcast i8* %310 to %struct.Lisp_Cons*
  %u431 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %311, i32 0, i32 1
  %cdr432 = bitcast %union.anon.0* %u431 to i64*
  %312 = load i64, i64* %cdr432, align 8
  %shr433 = ashr i64 %312, 2
  %cmp434 = icmp sle i64 %shr433, 255
  br i1 %cmp434, label %if.end.442, label %if.then.436

if.then.436:                                      ; preds = %land.lhs.true.429, %if.end.417
  %313 = load i64, i64* %val, align 8
  %sub437 = sub nsw i64 %313, 3
  %314 = inttoptr i64 %sub437 to i8*
  %315 = bitcast i8* %314 to %struct.Lisp_Cons*
  %u438 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %315, i32 0, i32 1
  %cdr439 = bitcast %union.anon.0* %u438 to i64*
  %316 = load i64, i64* %cdr439, align 8
  %317 = load i64, i64* %val, align 8
  %sub440 = sub nsw i64 %317, 3
  %318 = inttoptr i64 %sub440 to i8*
  %319 = bitcast i8* %318 to %struct.Lisp_Cons*
  %car441 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %319, i32 0, i32 0
  %320 = load i64, i64* %car441, align 8
  call void @args_out_of_range_3(i64 %316, i64 %320, i64 1022) #6
  unreachable

if.end.442:                                       ; preds = %land.lhs.true.429
  %321 = load i64, i64* %val, align 8
  %sub443 = sub nsw i64 %321, 3
  %322 = inttoptr i64 %sub443 to i8*
  %323 = bitcast i8* %322 to %struct.Lisp_Cons*
  %u444 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %323, i32 0, i32 1
  %cdr445 = bitcast %union.anon.0* %u444 to i64*
  %324 = load i64, i64* %cdr445, align 8
  %shr446 = ashr i64 %324, 2
  %conv447 = trunc i64 %shr446 to i32
  store i32 %conv447, i32* %to, align 4
  br label %if.end.448

if.end.448:                                       ; preds = %if.end.442, %if.end.405
  %325 = load i32, i32* %from, align 4
  store i32 %325, i32* %i, align 4
  br label %for.cond.449

for.cond.449:                                     ; preds = %for.inc.454, %if.end.448
  %326 = load i32, i32* %i, align 4
  %327 = load i32, i32* %to, align 4
  %cmp450 = icmp sle i32 %326, %327
  br i1 %cmp450, label %for.body.452, label %for.end.456

for.body.452:                                     ; preds = %for.cond.449
  %328 = load i64, i64* %valids, align 8
  %329 = load i32, i32* %i, align 4
  %conv453 = sext i32 %329 to i64
  call void @SSET(i64 %328, i64 %conv453, i8 zeroext 1)
  br label %for.inc.454

for.inc.454:                                      ; preds = %for.body.452
  %330 = load i32, i32* %i, align 4
  %inc455 = add nsw i32 %330, 1
  store i32 %inc455, i32* %i, align 4
  br label %for.cond.449

for.end.456:                                      ; preds = %for.cond.449
  br label %for.inc.457

for.inc.457:                                      ; preds = %for.end.456
  %331 = load i64, i64* %tail, align 8
  %sub458 = sub nsw i64 %331, 3
  %332 = inttoptr i64 %sub458 to i8*
  %333 = bitcast i8* %332 to %struct.Lisp_Cons*
  %u459 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %333, i32 0, i32 1
  %cdr460 = bitcast %union.anon.0* %u459 to i64*
  %334 = load i64, i64* %cdr460, align 8
  store i64 %334, i64* %tail, align 8
  br label %for.cond.381

for.end.461:                                      ; preds = %for.cond.381
  %335 = load i64, i64* %attrs, align 8
  %336 = load i64, i64* %valids, align 8
  call void @ASET(i64 %335, i64 19, i64 %336)
  store i32 17, i32* %category, align 4
  br label %if.end.1030

if.else.462:                                      ; preds = %if.else.341
  %337 = load i64, i64* %coding_type, align 8
  %call463 = call i64 @builtin_lisp_symbol(i32 986)
  %cmp464 = icmp eq i64 %337, %call463
  br i1 %cmp464, label %if.then.466, label %if.else.567

if.then.466:                                      ; preds = %if.else.462
  %338 = load i64, i64* %attrs, align 8
  %call469 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %338, i64 5, i64 %call469)
  %339 = load i64, i64* %nargs.addr, align 8
  %cmp470 = icmp slt i64 %339, 15
  br i1 %cmp470, label %if.then.472, label %if.end.473

if.then.472:                                      ; preds = %if.then.466
  br label %short_args

if.end.473:                                       ; preds = %if.then.466
  %340 = load i64*, i64** %args.addr, align 8
  %arrayidx474 = getelementptr inbounds i64, i64* %340, i64 13
  %341 = load i64, i64* %arrayidx474, align 8
  store i64 %341, i64* %bom, align 8
  %342 = load i64, i64* %bom, align 8
  %call475 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp476 = icmp eq i64 %342, %call475
  br i1 %cmp476, label %if.end.516, label %land.lhs.true.478

land.lhs.true.478:                                ; preds = %if.end.473
  %343 = load i64, i64* %bom, align 8
  %call479 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp480 = icmp eq i64 %343, %call479
  br i1 %cmp480, label %if.end.516, label %if.then.482

if.then.482:                                      ; preds = %land.lhs.true.478
  %344 = load i64, i64* %bom, align 8
  call void @CHECK_CONS(i64 %344)
  %345 = load i64, i64* %bom, align 8
  %sub483 = sub nsw i64 %345, 3
  %346 = inttoptr i64 %sub483 to i8*
  %347 = bitcast i8* %346 to %struct.Lisp_Cons*
  %car484 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %347, i32 0, i32 0
  %348 = load i64, i64* %car484, align 8
  store i64 %348, i64* %val, align 8
  br label %do.body.485

do.body.485:                                      ; preds = %if.then.482
  %349 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call486 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %349)
  %350 = load i64, i64* %val, align 8
  %call487 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call486, i64 %350, i64* null)
  %cmp488 = icmp slt i64 %call487, 0
  br i1 %cmp488, label %land.lhs.true.490, label %if.end.497

land.lhs.true.490:                                ; preds = %do.body.485
  %351 = load i64, i64* %val, align 8
  %call491 = call i64 @Fcheck_coding_system(i64 %351)
  %call492 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp493 = icmp eq i64 %call491, %call492
  br i1 %cmp493, label %if.then.495, label %if.end.497

if.then.495:                                      ; preds = %land.lhs.true.490
  %call496 = call i64 @builtin_lisp_symbol(i32 280)
  %352 = load i64, i64* %val, align 8
  %353 = call i64 @wrong_type_argument(i64 %call496, i64 %352) #6
  unreachable

if.end.497:                                       ; preds = %land.lhs.true.490, %do.body.485
  br label %do.end.498

do.end.498:                                       ; preds = %if.end.497
  %354 = load i64, i64* %bom, align 8
  %sub499 = sub nsw i64 %354, 3
  %355 = inttoptr i64 %sub499 to i8*
  %356 = bitcast i8* %355 to %struct.Lisp_Cons*
  %u500 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %356, i32 0, i32 1
  %cdr501 = bitcast %union.anon.0* %u500 to i64*
  %357 = load i64, i64* %cdr501, align 8
  store i64 %357, i64* %val, align 8
  br label %do.body.502

do.body.502:                                      ; preds = %do.end.498
  %358 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call503 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %358)
  %359 = load i64, i64* %val, align 8
  %call504 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call503, i64 %359, i64* null)
  %cmp505 = icmp slt i64 %call504, 0
  br i1 %cmp505, label %land.lhs.true.507, label %if.end.514

land.lhs.true.507:                                ; preds = %do.body.502
  %360 = load i64, i64* %val, align 8
  %call508 = call i64 @Fcheck_coding_system(i64 %360)
  %call509 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp510 = icmp eq i64 %call508, %call509
  br i1 %cmp510, label %if.then.512, label %if.end.514

if.then.512:                                      ; preds = %land.lhs.true.507
  %call513 = call i64 @builtin_lisp_symbol(i32 280)
  %361 = load i64, i64* %val, align 8
  %362 = call i64 @wrong_type_argument(i64 %call513, i64 %361) #6
  unreachable

if.end.514:                                       ; preds = %land.lhs.true.507, %do.body.502
  br label %do.end.515

do.end.515:                                       ; preds = %if.end.514
  br label %if.end.516

if.end.516:                                       ; preds = %do.end.515, %land.lhs.true.478, %if.end.473
  %363 = load i64, i64* %attrs, align 8
  %364 = load i64, i64* %bom, align 8
  call void @ASET(i64 %363, i64 24, i64 %364)
  %365 = load i64*, i64** %args.addr, align 8
  %arrayidx517 = getelementptr inbounds i64, i64* %365, i64 14
  %366 = load i64, i64* %arrayidx517, align 8
  store i64 %366, i64* %endian, align 8
  %367 = load i64, i64* %endian, align 8
  %and518 = and i64 %367, 7
  %conv519 = trunc i64 %and518 to i32
  %cmp520 = icmp eq i32 %conv519, 0
  br i1 %cmp520, label %cond.true.522, label %cond.false.523

cond.true.522:                                    ; preds = %if.end.516
  br label %cond.end.525

cond.false.523:                                   ; preds = %if.end.516
  %call524 = call i64 @builtin_lisp_symbol(i32 897)
  %368 = load i64, i64* %endian, align 8
  %369 = call i64 @wrong_type_argument(i64 %call524, i64 %368) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.525

cond.end.525:                                     ; preds = %370, %cond.true.522
  %371 = load i64, i64* %endian, align 8
  %call526 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp527 = icmp eq i64 %371, %call526
  br i1 %cmp527, label %if.then.529, label %if.else.531

if.then.529:                                      ; preds = %cond.end.525
  %call530 = call i64 @builtin_lisp_symbol(i32 202)
  store i64 %call530, i64* %endian, align 8
  br label %if.end.543

if.else.531:                                      ; preds = %cond.end.525
  %372 = load i64, i64* %endian, align 8
  %call532 = call i64 @builtin_lisp_symbol(i32 202)
  %cmp533 = icmp eq i64 %372, %call532
  br i1 %cmp533, label %if.end.542, label %land.lhs.true.535

land.lhs.true.535:                                ; preds = %if.else.531
  %373 = load i64, i64* %endian, align 8
  %call536 = call i64 @builtin_lisp_symbol(i32 627)
  %cmp537 = icmp eq i64 %373, %call536
  br i1 %cmp537, label %if.end.542, label %if.then.539

if.then.539:                                      ; preds = %land.lhs.true.535
  %374 = load i64, i64* %endian, align 8
  %call540 = call i64 @SYMBOL_NAME(i64 %374)
  %call541 = call i8* @SDATA(i64 %call540)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0), i8* %call541) #6
  unreachable

if.end.542:                                       ; preds = %land.lhs.true.535, %if.else.531
  br label %if.end.543

if.end.543:                                       ; preds = %if.end.542, %if.then.529
  %375 = load i64, i64* %attrs, align 8
  %376 = load i64, i64* %endian, align 8
  call void @ASET(i64 %375, i64 25, i64 %376)
  %377 = load i64, i64* %bom, align 8
  %and544 = and i64 %377, 7
  %conv545 = trunc i64 %and544 to i32
  %cmp546 = icmp eq i32 %conv545, 3
  br i1 %cmp546, label %cond.true.548, label %cond.false.549

cond.true.548:                                    ; preds = %if.end.543
  br label %cond.end.565

cond.false.549:                                   ; preds = %if.end.543
  %378 = load i64, i64* %bom, align 8
  %call550 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp551 = icmp eq i64 %378, %call550
  br i1 %cmp551, label %cond.true.553, label %cond.false.558

cond.true.553:                                    ; preds = %cond.false.549
  %379 = load i64, i64* %endian, align 8
  %call554 = call i64 @builtin_lisp_symbol(i32 202)
  %cmp555 = icmp eq i64 %379, %call554
  %cond557 = select i1 %cmp555, i32 12, i32 13
  br label %cond.end.563

cond.false.558:                                   ; preds = %cond.false.549
  %380 = load i64, i64* %endian, align 8
  %call559 = call i64 @builtin_lisp_symbol(i32 202)
  %cmp560 = icmp eq i64 %380, %call559
  %cond562 = select i1 %cmp560, i32 10, i32 11
  br label %cond.end.563

cond.end.563:                                     ; preds = %cond.false.558, %cond.true.553
  %cond564 = phi i32 [ %cond557, %cond.true.553 ], [ %cond562, %cond.false.558 ]
  br label %cond.end.565

cond.end.565:                                     ; preds = %cond.end.563, %cond.true.548
  %cond566 = phi i32 [ 9, %cond.true.548 ], [ %cond564, %cond.end.563 ]
  store i32 %cond566, i32* %category, align 4
  br label %if.end.1029

if.else.567:                                      ; preds = %if.else.462
  %381 = load i64, i64* %coding_type, align 8
  %call568 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp569 = icmp eq i64 %381, %call568
  br i1 %cmp569, label %if.then.571, label %if.else.762

if.then.571:                                      ; preds = %if.else.567
  %382 = load i64, i64* %nargs.addr, align 8
  %cmp576 = icmp slt i64 %382, 17
  br i1 %cmp576, label %if.then.578, label %if.end.579

if.then.578:                                      ; preds = %if.then.571
  br label %short_args

if.end.579:                                       ; preds = %if.then.571
  %383 = load i64*, i64** %args.addr, align 8
  %arrayidx580 = getelementptr inbounds i64, i64* %383, i64 13
  %384 = load i64, i64* %arrayidx580, align 8
  %call581 = call i64 @Fcopy_sequence(i64 %384)
  store i64 %call581, i64* %initial, align 8
  %385 = load i64, i64* %initial, align 8
  call void @CHECK_VECTOR(i64 %385)
  store i32 0, i32* %i, align 4
  br label %for.cond.582

for.cond.582:                                     ; preds = %for.inc.641, %if.end.579
  %386 = load i32, i32* %i, align 4
  %cmp583 = icmp slt i32 %386, 4
  br i1 %cmp583, label %for.body.585, label %for.end.643

for.body.585:                                     ; preds = %for.cond.582
  %387 = load i64, i64* %initial, align 8
  %388 = load i32, i32* %i, align 4
  %conv586 = sext i32 %388 to i64
  %call587 = call i64 @AREF(i64 %387, i64 %conv586)
  store i64 %call587, i64* %val, align 8
  %389 = load i64, i64* %val, align 8
  %call588 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp589 = icmp eq i64 %389, %call588
  br i1 %cmp589, label %if.else.638, label %if.then.591

if.then.591:                                      ; preds = %for.body.585
  br label %do.body.594

do.body.594:                                      ; preds = %if.then.591
  br label %do.body.597

do.body.597:                                      ; preds = %do.body.594
  %390 = load i64, i64* %val, align 8
  %and600 = and i64 %390, 7
  %conv601 = trunc i64 %and600 to i32
  %cmp602 = icmp eq i32 %conv601, 0
  br i1 %cmp602, label %lor.lhs.false.604, label %if.then.609

lor.lhs.false.604:                                ; preds = %do.body.597
  %391 = load i64, i64* @Vcharset_hash_table, align 8
  %call605 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %391)
  %392 = load i64, i64* %val, align 8
  %call606 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call605, i64 %392, i64* null)
  store i64 %call606, i64* %idx599, align 8
  %cmp607 = icmp slt i64 %call606, 0
  br i1 %cmp607, label %if.then.609, label %if.end.611

if.then.609:                                      ; preds = %lor.lhs.false.604, %do.body.597
  %call610 = call i64 @builtin_lisp_symbol(i32 262)
  %393 = load i64, i64* %val, align 8
  %394 = call i64 @wrong_type_argument(i64 %call610, i64 %393) #6
  unreachable

if.end.611:                                       ; preds = %lor.lhs.false.604
  %395 = load i64, i64* @Vcharset_hash_table, align 8
  %call612 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %395)
  %396 = load i64, i64* %idx599, align 8
  %call613 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call612, i64 %396)
  %call614 = call i64 @AREF(i64 %call613, i64 0)
  %shr615 = ashr i64 %call614, 2
  %conv616 = trunc i64 %shr615 to i32
  store i32 %conv616, i32* %csid596, align 4
  br label %do.end.617

do.end.617:                                       ; preds = %if.end.611
  %397 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %398 = load i32, i32* %csid596, align 4
  %idx.ext618 = sext i32 %398 to i64
  %add.ptr619 = getelementptr inbounds %struct.charset, %struct.charset* %397, i64 %idx.ext618
  store %struct.charset* %add.ptr619, %struct.charset** %charset593, align 8
  br label %do.end.620

do.end.620:                                       ; preds = %do.end.617
  %399 = load i64, i64* %initial, align 8
  %400 = load i32, i32* %i, align 4
  %conv621 = sext i32 %400 to i64
  %401 = load %struct.charset*, %struct.charset** %charset593, align 8
  %id622 = getelementptr inbounds %struct.charset, %struct.charset* %401, i32 0, i32 0
  %402 = load i32, i32* %id622, align 4
  %conv623 = sext i32 %402 to i64
  %shl624 = shl i64 %conv623, 2
  %add625 = add i64 %shl624, 2
  call void @ASET(i64 %399, i64 %conv621, i64 %add625)
  %403 = load i32, i32* %i, align 4
  %cmp626 = icmp eq i32 %403, 0
  br i1 %cmp626, label %land.lhs.true.628, label %if.end.637

land.lhs.true.628:                                ; preds = %do.end.620
  %404 = load %struct.charset*, %struct.charset** %charset593, align 8
  %ascii_compatible_p629 = getelementptr inbounds %struct.charset, %struct.charset* %404, i32 0, i32 5
  %bf.load630 = load i8, i8* %ascii_compatible_p629, align 8
  %bf.lshr631 = lshr i8 %bf.load630, 2
  %bf.clear632 = and i8 %bf.lshr631, 1
  %bf.cast633 = trunc i8 %bf.clear632 to i1
  br i1 %bf.cast633, label %if.then.635, label %if.end.637

if.then.635:                                      ; preds = %land.lhs.true.628
  %405 = load i64, i64* %attrs, align 8
  %call636 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %405, i64 5, i64 %call636)
  br label %if.end.637

if.end.637:                                       ; preds = %if.then.635, %land.lhs.true.628, %do.end.620
  br label %if.end.640

if.else.638:                                      ; preds = %for.body.585
  %406 = load i64, i64* %initial, align 8
  %407 = load i32, i32* %i, align 4
  %conv639 = sext i32 %407 to i64
  call void @ASET(i64 %406, i64 %conv639, i64 -2)
  br label %if.end.640

if.end.640:                                       ; preds = %if.else.638, %if.end.637
  br label %for.inc.641

for.inc.641:                                      ; preds = %if.end.640
  %408 = load i32, i32* %i, align 4
  %inc642 = add nsw i32 %408, 1
  store i32 %inc642, i32* %i, align 4
  br label %for.cond.582

for.end.643:                                      ; preds = %for.cond.582
  %409 = load i64*, i64** %args.addr, align 8
  %arrayidx644 = getelementptr inbounds i64, i64* %409, i64 14
  %410 = load i64, i64* %arrayidx644, align 8
  store i64 %410, i64* %reg_usage, align 8
  %411 = load i64, i64* %reg_usage, align 8
  call void @CHECK_CONS(i64 %411)
  %412 = load i64, i64* %reg_usage, align 8
  call void @CHECK_NUMBER_CAR(i64 %412)
  %413 = load i64, i64* %reg_usage, align 8
  call void @CHECK_NUMBER_CDR(i64 %413)
  %414 = load i64*, i64** %args.addr, align 8
  %arrayidx645 = getelementptr inbounds i64, i64* %414, i64 15
  %415 = load i64, i64* %arrayidx645, align 8
  %call646 = call i64 @Fcopy_sequence(i64 %415)
  store i64 %call646, i64* %request, align 8
  %416 = load i64, i64* %request, align 8
  store i64 %416, i64* %tail, align 8
  br label %for.cond.647

for.cond.647:                                     ; preds = %for.inc.696, %for.end.643
  %417 = load i64, i64* %tail, align 8
  %and648 = and i64 %417, 7
  %conv649 = trunc i64 %and648 to i32
  %cmp650 = icmp eq i32 %conv649, 3
  br i1 %cmp650, label %for.body.652, label %for.end.700

for.body.652:                                     ; preds = %for.cond.647
  %418 = load i64, i64* %tail, align 8
  %sub656 = sub nsw i64 %418, 3
  %419 = inttoptr i64 %sub656 to i8*
  %420 = bitcast i8* %419 to %struct.Lisp_Cons*
  %car657 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %420, i32 0, i32 0
  %421 = load i64, i64* %car657, align 8
  store i64 %421, i64* %val, align 8
  %422 = load i64, i64* %val, align 8
  call void @CHECK_CONS(i64 %422)
  %423 = load i64, i64* %val, align 8
  %sub658 = sub nsw i64 %423, 3
  %424 = inttoptr i64 %sub658 to i8*
  %425 = bitcast i8* %424 to %struct.Lisp_Cons*
  %car659 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %425, i32 0, i32 0
  %426 = load i64, i64* %car659, align 8
  store i64 %426, i64* %tmp1, align 8
  br label %do.body.660

do.body.660:                                      ; preds = %for.body.652
  %427 = load i64, i64* %tmp1, align 8
  %and663 = and i64 %427, 7
  %conv664 = trunc i64 %and663 to i32
  %cmp665 = icmp eq i32 %conv664, 0
  br i1 %cmp665, label %lor.lhs.false.667, label %if.then.672

lor.lhs.false.667:                                ; preds = %do.body.660
  %428 = load i64, i64* @Vcharset_hash_table, align 8
  %call668 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %428)
  %429 = load i64, i64* %tmp1, align 8
  %call669 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call668, i64 %429, i64* null)
  store i64 %call669, i64* %idx662, align 8
  %cmp670 = icmp slt i64 %call669, 0
  br i1 %cmp670, label %if.then.672, label %if.end.674

if.then.672:                                      ; preds = %lor.lhs.false.667, %do.body.660
  %call673 = call i64 @builtin_lisp_symbol(i32 262)
  %430 = load i64, i64* %tmp1, align 8
  %431 = call i64 @wrong_type_argument(i64 %call673, i64 %430) #6
  unreachable

if.end.674:                                       ; preds = %lor.lhs.false.667
  %432 = load i64, i64* @Vcharset_hash_table, align 8
  %call675 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %432)
  %433 = load i64, i64* %idx662, align 8
  %call676 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call675, i64 %433)
  %call677 = call i64 @AREF(i64 %call676, i64 0)
  %shr678 = ashr i64 %call677, 2
  %conv679 = trunc i64 %shr678 to i32
  store i32 %conv679, i32* %id654, align 4
  br label %do.end.680

do.end.680:                                       ; preds = %if.end.674
  %434 = load i64, i64* %val, align 8
  call void @CHECK_NATNUM_CDR(i64 %434)
  %435 = load i64, i64* %val, align 8
  %sub681 = sub nsw i64 %435, 3
  %436 = inttoptr i64 %sub681 to i8*
  %437 = bitcast i8* %436 to %struct.Lisp_Cons*
  %u682 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %437, i32 0, i32 1
  %cdr683 = bitcast %union.anon.0* %u682 to i64*
  %438 = load i64, i64* %cdr683, align 8
  %shr684 = ashr i64 %438, 2
  %cmp685 = icmp sge i64 %shr684, 4
  br i1 %cmp685, label %if.then.687, label %if.end.692

if.then.687:                                      ; preds = %do.end.680
  %439 = load i64, i64* %val, align 8
  %sub688 = sub nsw i64 %439, 3
  %440 = inttoptr i64 %sub688 to i8*
  %441 = bitcast i8* %440 to %struct.Lisp_Cons*
  %u689 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %441, i32 0, i32 1
  %cdr690 = bitcast %union.anon.0* %u689 to i64*
  %442 = load i64, i64* %cdr690, align 8
  %shr691 = ashr i64 %442, 2
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i32 0, i32 0), i64 %shr691) #6
  unreachable

if.end.692:                                       ; preds = %do.end.680
  %443 = load i64, i64* %val, align 8
  %444 = load i32, i32* %id654, align 4
  %conv693 = sext i32 %444 to i64
  %shl694 = shl i64 %conv693, 2
  %add695 = add i64 %shl694, 2
  call void @XSETCAR(i64 %443, i64 %add695)
  br label %for.inc.696

for.inc.696:                                      ; preds = %if.end.692
  %445 = load i64, i64* %tail, align 8
  %sub697 = sub nsw i64 %445, 3
  %446 = inttoptr i64 %sub697 to i8*
  %447 = bitcast i8* %446 to %struct.Lisp_Cons*
  %u698 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %447, i32 0, i32 1
  %cdr699 = bitcast %union.anon.0* %u698 to i64*
  %448 = load i64, i64* %cdr699, align 8
  store i64 %448, i64* %tail, align 8
  br label %for.cond.647

for.end.700:                                      ; preds = %for.cond.647
  %449 = load i64*, i64** %args.addr, align 8
  %arrayidx701 = getelementptr inbounds i64, i64* %449, i64 16
  %450 = load i64, i64* %arrayidx701, align 8
  store i64 %450, i64* %flags, align 8
  %451 = load i64, i64* %flags, align 8
  call void @CHECK_NATNUM(i64 %451)
  %452 = load i64, i64* %flags, align 8
  %shr702 = ashr i64 %452, 2
  %and703 = and i64 %shr702, 2147483647
  %conv704 = trunc i64 %and703 to i32
  store i32 %conv704, i32* %i, align 4
  %453 = load i64*, i64** %args.addr, align 8
  %arrayidx705 = getelementptr inbounds i64, i64* %453, i64 3
  %454 = load i64, i64* %arrayidx705, align 8
  %call706 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp707 = icmp eq i64 %454, %call706
  br i1 %cmp707, label %if.then.709, label %if.end.710

if.then.709:                                      ; preds = %for.end.700
  %455 = load i32, i32* %i, align 4
  %or = or i32 %455, 1048576
  store i32 %or, i32* %i, align 4
  br label %if.end.710

if.end.710:                                       ; preds = %if.then.709, %for.end.700
  %456 = load i32, i32* %i, align 4
  %conv711 = sext i32 %456 to i64
  %shl712 = shl i64 %conv711, 2
  %add713 = add i64 %shl712, 2
  store i64 %add713, i64* %flags, align 8
  %457 = load i64, i64* %attrs, align 8
  %458 = load i64, i64* %initial, align 8
  call void @ASET(i64 %457, i64 20, i64 %458)
  %459 = load i64, i64* %attrs, align 8
  %460 = load i64, i64* %reg_usage, align 8
  call void @ASET(i64 %459, i64 21, i64 %460)
  %461 = load i64, i64* %attrs, align 8
  %462 = load i64, i64* %request, align 8
  call void @ASET(i64 %461, i64 22, i64 %462)
  %463 = load i64, i64* %attrs, align 8
  %464 = load i64, i64* %flags, align 8
  call void @ASET(i64 %463, i64 23, i64 %464)
  %465 = load i64, i64* %attrs, align 8
  call void @setup_iso_safe_charsets(i64 %465)
  %466 = load i32, i32* %i, align 4
  %and714 = and i32 %466, 8
  %tobool = icmp ne i32 %and714, 0
  br i1 %tobool, label %if.then.715, label %if.else.727

if.then.715:                                      ; preds = %if.end.710
  %467 = load i32, i32* %i, align 4
  %and716 = and i32 %467, 48
  %tobool717 = icmp ne i32 %and716, 0
  br i1 %tobool717, label %cond.true.718, label %cond.false.719

cond.true.718:                                    ; preds = %if.then.715
  br label %cond.end.725

cond.false.719:                                   ; preds = %if.then.715
  %468 = load i64*, i64** %args.addr, align 8
  %arrayidx720 = getelementptr inbounds i64, i64* %468, i64 3
  %469 = load i64, i64* %arrayidx720, align 8
  %call721 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp722 = icmp eq i64 %469, %call721
  %cond724 = select i1 %cmp722, i32 0, i32 1
  br label %cond.end.725

cond.end.725:                                     ; preds = %cond.false.719, %cond.true.718
  %cond726 = phi i32 [ 4, %cond.true.718 ], [ %cond724, %cond.false.719 ]
  store i32 %cond726, i32* %category, align 4
  br label %if.end.753

if.else.727:                                      ; preds = %if.end.710
  %470 = load i64, i64* %initial, align 8
  %call730 = call i64 @AREF(i64 %470, i64 1)
  %shr731 = ashr i64 %call730, 2
  %conv732 = trunc i64 %shr731 to i32
  store i32 %conv732, i32* %id729, align 4
  %471 = load i32, i32* %i, align 4
  %and733 = and i32 %471, 16
  %tobool734 = icmp ne i32 %and733, 0
  br i1 %tobool734, label %cond.true.743, label %lor.lhs.false.735

lor.lhs.false.735:                                ; preds = %if.else.727
  %472 = load i64*, i64** %args.addr, align 8
  %arrayidx736 = getelementptr inbounds i64, i64* %472, i64 3
  %473 = load i64, i64* %arrayidx736, align 8
  %call737 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp738 = icmp eq i64 %473, %call737
  br i1 %cmp738, label %cond.true.743, label %lor.lhs.false.740

lor.lhs.false.740:                                ; preds = %lor.lhs.false.735
  %474 = load i32, i32* %id729, align 4
  %cmp741 = icmp slt i32 %474, 0
  br i1 %cmp741, label %cond.true.743, label %cond.false.744

cond.true.743:                                    ; preds = %lor.lhs.false.740, %lor.lhs.false.735, %if.else.727
  br label %cond.end.751

cond.false.744:                                   ; preds = %lor.lhs.false.740
  %475 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %476 = load i32, i32* %id729, align 4
  %idx.ext745 = sext i32 %476 to i64
  %add.ptr746 = getelementptr inbounds %struct.charset, %struct.charset* %475, i64 %idx.ext745
  %dimension747 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr746, i32 0, i32 2
  %477 = load i32, i32* %dimension747, align 4
  %cmp748 = icmp eq i32 %477, 1
  %cond750 = select i1 %cmp748, i32 2, i32 3
  br label %cond.end.751

cond.end.751:                                     ; preds = %cond.false.744, %cond.true.743
  %cond752 = phi i32 [ 5, %cond.true.743 ], [ %cond750, %cond.false.744 ]
  store i32 %cond752, i32* %category, align 4
  br label %if.end.753

if.end.753:                                       ; preds = %cond.end.751, %cond.end.725
  %478 = load i32, i32* %category, align 4
  %cmp754 = icmp ne i32 %478, 2
  br i1 %cmp754, label %land.lhs.true.756, label %if.end.761

land.lhs.true.756:                                ; preds = %if.end.753
  %479 = load i32, i32* %category, align 4
  %cmp757 = icmp ne i32 %479, 3
  br i1 %cmp757, label %if.then.759, label %if.end.761

if.then.759:                                      ; preds = %land.lhs.true.756
  %480 = load i64, i64* %attrs, align 8
  %call760 = call i64 @builtin_lisp_symbol(i32 0)
  call void @ASET(i64 %480, i64 5, i64 %call760)
  br label %if.end.761

if.end.761:                                       ; preds = %if.then.759, %land.lhs.true.756, %if.end.753
  br label %if.end.1028

if.else.762:                                      ; preds = %if.else.567
  %481 = load i64, i64* %coding_type, align 8
  %call763 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp764 = icmp eq i64 %481, %call763
  br i1 %cmp764, label %if.then.766, label %if.else.775

if.then.766:                                      ; preds = %if.else.762
  %482 = load i64*, i64** %args.addr, align 8
  %arrayidx767 = getelementptr inbounds i64, i64* %482, i64 3
  %483 = load i64, i64* %arrayidx767, align 8
  %call768 = call i64 @builtin_lisp_symbol(i32 361)
  %cmp769 = icmp eq i64 %483, %call768
  br i1 %cmp769, label %if.then.771, label %if.end.773

if.then.771:                                      ; preds = %if.then.766
  %484 = load i64, i64* %attrs, align 8
  %call772 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %484, i64 26, i64 %call772)
  br label %if.end.773

if.end.773:                                       ; preds = %if.then.771, %if.then.766
  %485 = load i64, i64* %attrs, align 8
  %call774 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %485, i64 5, i64 %call774)
  store i32 18, i32* %category, align 4
  br label %if.end.1027

if.else.775:                                      ; preds = %if.else.762
  %486 = load i64, i64* %coding_type, align 8
  %call776 = call i64 @builtin_lisp_symbol(i32 861)
  %cmp777 = icmp eq i64 %486, %call776
  br i1 %cmp777, label %if.then.779, label %if.else.875

if.then.779:                                      ; preds = %if.else.775
  %487 = load i64, i64* %charset_list, align 8
  %call782 = call i64 @Flength(i64 %487)
  %shr783 = ashr i64 %call782, 2
  %cmp784 = icmp ne i64 %shr783, 3
  br i1 %cmp784, label %land.lhs.true.786, label %if.end.792

land.lhs.true.786:                                ; preds = %if.then.779
  %488 = load i64, i64* %charset_list, align 8
  %call787 = call i64 @Flength(i64 %488)
  %shr788 = ashr i64 %call787, 2
  %cmp789 = icmp ne i64 %shr788, 4
  br i1 %cmp789, label %if.then.791, label %if.end.792

if.then.791:                                      ; preds = %land.lhs.true.786
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.11, i32 0, i32 0)) #6
  unreachable

if.end.792:                                       ; preds = %land.lhs.true.786, %if.then.779
  %489 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %490 = load i64, i64* %charset_list, align 8
  %sub793 = sub nsw i64 %490, 3
  %491 = inttoptr i64 %sub793 to i8*
  %492 = bitcast i8* %491 to %struct.Lisp_Cons*
  %car794 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %492, i32 0, i32 0
  %493 = load i64, i64* %car794, align 8
  %shr795 = ashr i64 %493, 2
  %add.ptr796 = getelementptr inbounds %struct.charset, %struct.charset* %489, i64 %shr795
  store %struct.charset* %add.ptr796, %struct.charset** %charset781, align 8
  %494 = load %struct.charset*, %struct.charset** %charset781, align 8
  %dimension797 = getelementptr inbounds %struct.charset, %struct.charset* %494, i32 0, i32 2
  %495 = load i32, i32* %dimension797, align 4
  %cmp798 = icmp ne i32 %495, 1
  br i1 %cmp798, label %if.then.800, label %if.end.807

if.then.800:                                      ; preds = %if.end.792
  %496 = load i64, i64* @Vcharset_hash_table, align 8
  %call801 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %496)
  %497 = load %struct.charset*, %struct.charset** %charset781, align 8
  %hash_index802 = getelementptr inbounds %struct.charset, %struct.charset* %497, i32 0, i32 1
  %498 = load i64, i64* %hash_index802, align 8
  %call803 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call801, i64 %498)
  %call804 = call i64 @AREF(i64 %call803, i64 1)
  %call805 = call i64 @SYMBOL_NAME(i64 %call804)
  %call806 = call i8* @SDATA(i64 %call805)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i32 0, i32 0), i8* %call806) #6
  unreachable

if.end.807:                                       ; preds = %if.end.792
  %499 = load %struct.charset*, %struct.charset** %charset781, align 8
  %ascii_compatible_p808 = getelementptr inbounds %struct.charset, %struct.charset* %499, i32 0, i32 5
  %bf.load809 = load i8, i8* %ascii_compatible_p808, align 8
  %bf.lshr810 = lshr i8 %bf.load809, 2
  %bf.clear811 = and i8 %bf.lshr810, 1
  %bf.cast812 = trunc i8 %bf.clear811 to i1
  br i1 %bf.cast812, label %if.then.813, label %if.end.815

if.then.813:                                      ; preds = %if.end.807
  %500 = load i64, i64* %attrs, align 8
  %call814 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %500, i64 5, i64 %call814)
  br label %if.end.815

if.end.815:                                       ; preds = %if.then.813, %if.end.807
  %501 = load i64, i64* %charset_list, align 8
  %sub816 = sub nsw i64 %501, 3
  %502 = inttoptr i64 %sub816 to i8*
  %503 = bitcast i8* %502 to %struct.Lisp_Cons*
  %u817 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %503, i32 0, i32 1
  %cdr818 = bitcast %union.anon.0* %u817 to i64*
  %504 = load i64, i64* %cdr818, align 8
  store i64 %504, i64* %charset_list, align 8
  %505 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %506 = load i64, i64* %charset_list, align 8
  %sub819 = sub nsw i64 %506, 3
  %507 = inttoptr i64 %sub819 to i8*
  %508 = bitcast i8* %507 to %struct.Lisp_Cons*
  %car820 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %508, i32 0, i32 0
  %509 = load i64, i64* %car820, align 8
  %shr821 = ashr i64 %509, 2
  %add.ptr822 = getelementptr inbounds %struct.charset, %struct.charset* %505, i64 %shr821
  store %struct.charset* %add.ptr822, %struct.charset** %charset781, align 8
  %510 = load %struct.charset*, %struct.charset** %charset781, align 8
  %dimension823 = getelementptr inbounds %struct.charset, %struct.charset* %510, i32 0, i32 2
  %511 = load i32, i32* %dimension823, align 4
  %cmp824 = icmp ne i32 %511, 1
  br i1 %cmp824, label %if.then.826, label %if.end.833

if.then.826:                                      ; preds = %if.end.815
  %512 = load i64, i64* @Vcharset_hash_table, align 8
  %call827 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %512)
  %513 = load %struct.charset*, %struct.charset** %charset781, align 8
  %hash_index828 = getelementptr inbounds %struct.charset, %struct.charset* %513, i32 0, i32 1
  %514 = load i64, i64* %hash_index828, align 8
  %call829 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call827, i64 %514)
  %call830 = call i64 @AREF(i64 %call829, i64 1)
  %call831 = call i64 @SYMBOL_NAME(i64 %call830)
  %call832 = call i8* @SDATA(i64 %call831)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i32 0, i32 0), i8* %call832) #6
  unreachable

if.end.833:                                       ; preds = %if.end.815
  %515 = load i64, i64* %charset_list, align 8
  %sub834 = sub nsw i64 %515, 3
  %516 = inttoptr i64 %sub834 to i8*
  %517 = bitcast i8* %516 to %struct.Lisp_Cons*
  %u835 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %517, i32 0, i32 1
  %cdr836 = bitcast %union.anon.0* %u835 to i64*
  %518 = load i64, i64* %cdr836, align 8
  store i64 %518, i64* %charset_list, align 8
  %519 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %520 = load i64, i64* %charset_list, align 8
  %sub837 = sub nsw i64 %520, 3
  %521 = inttoptr i64 %sub837 to i8*
  %522 = bitcast i8* %521 to %struct.Lisp_Cons*
  %car838 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %522, i32 0, i32 0
  %523 = load i64, i64* %car838, align 8
  %shr839 = ashr i64 %523, 2
  %add.ptr840 = getelementptr inbounds %struct.charset, %struct.charset* %519, i64 %shr839
  store %struct.charset* %add.ptr840, %struct.charset** %charset781, align 8
  %524 = load %struct.charset*, %struct.charset** %charset781, align 8
  %dimension841 = getelementptr inbounds %struct.charset, %struct.charset* %524, i32 0, i32 2
  %525 = load i32, i32* %dimension841, align 4
  %cmp842 = icmp ne i32 %525, 2
  br i1 %cmp842, label %if.then.844, label %if.end.851

if.then.844:                                      ; preds = %if.end.833
  %526 = load i64, i64* @Vcharset_hash_table, align 8
  %call845 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %526)
  %527 = load %struct.charset*, %struct.charset** %charset781, align 8
  %hash_index846 = getelementptr inbounds %struct.charset, %struct.charset* %527, i32 0, i32 1
  %528 = load i64, i64* %hash_index846, align 8
  %call847 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call845, i64 %528)
  %call848 = call i64 @AREF(i64 %call847, i64 1)
  %call849 = call i64 @SYMBOL_NAME(i64 %call848)
  %call850 = call i8* @SDATA(i64 %call849)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i32 0, i32 0), i8* %call850) #6
  unreachable

if.end.851:                                       ; preds = %if.end.833
  %529 = load i64, i64* %charset_list, align 8
  %sub852 = sub nsw i64 %529, 3
  %530 = inttoptr i64 %sub852 to i8*
  %531 = bitcast i8* %530 to %struct.Lisp_Cons*
  %u853 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %531, i32 0, i32 1
  %cdr854 = bitcast %union.anon.0* %u853 to i64*
  %532 = load i64, i64* %cdr854, align 8
  store i64 %532, i64* %charset_list, align 8
  %533 = load i64, i64* %charset_list, align 8
  %call855 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp856 = icmp eq i64 %533, %call855
  br i1 %cmp856, label %if.end.874, label %if.then.858

if.then.858:                                      ; preds = %if.end.851
  %534 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %535 = load i64, i64* %charset_list, align 8
  %sub859 = sub nsw i64 %535, 3
  %536 = inttoptr i64 %sub859 to i8*
  %537 = bitcast i8* %536 to %struct.Lisp_Cons*
  %car860 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %537, i32 0, i32 0
  %538 = load i64, i64* %car860, align 8
  %shr861 = ashr i64 %538, 2
  %add.ptr862 = getelementptr inbounds %struct.charset, %struct.charset* %534, i64 %shr861
  store %struct.charset* %add.ptr862, %struct.charset** %charset781, align 8
  %539 = load %struct.charset*, %struct.charset** %charset781, align 8
  %dimension863 = getelementptr inbounds %struct.charset, %struct.charset* %539, i32 0, i32 2
  %540 = load i32, i32* %dimension863, align 4
  %cmp864 = icmp ne i32 %540, 2
  br i1 %cmp864, label %if.then.866, label %if.end.873

if.then.866:                                      ; preds = %if.then.858
  %541 = load i64, i64* @Vcharset_hash_table, align 8
  %call867 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %541)
  %542 = load %struct.charset*, %struct.charset** %charset781, align 8
  %hash_index868 = getelementptr inbounds %struct.charset, %struct.charset* %542, i32 0, i32 1
  %543 = load i64, i64* %hash_index868, align 8
  %call869 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call867, i64 %543)
  %call870 = call i64 @AREF(i64 %call869, i64 1)
  %call871 = call i64 @SYMBOL_NAME(i64 %call870)
  %call872 = call i8* @SDATA(i64 %call871)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i32 0, i32 0), i8* %call872) #6
  unreachable

if.end.873:                                       ; preds = %if.then.858
  br label %if.end.874

if.end.874:                                       ; preds = %if.end.873, %if.end.851
  store i32 15, i32* %category, align 4
  %544 = load i64, i64* %name, align 8
  store i64 %544, i64* @Vsjis_coding_system, align 8
  br label %if.end.1026

if.else.875:                                      ; preds = %if.else.775
  %545 = load i64, i64* %coding_type, align 8
  %call876 = call i64 @builtin_lisp_symbol(i32 203)
  %cmp877 = icmp eq i64 %545, %call876
  br i1 %cmp877, label %if.then.879, label %if.else.929

if.then.879:                                      ; preds = %if.else.875
  %546 = load i64, i64* %charset_list, align 8
  %call882 = call i64 @Flength(i64 %546)
  %shr883 = ashr i64 %call882, 2
  %cmp884 = icmp ne i64 %shr883, 2
  br i1 %cmp884, label %if.then.886, label %if.end.887

if.then.886:                                      ; preds = %if.then.879
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i32 0, i32 0)) #6
  unreachable

if.end.887:                                       ; preds = %if.then.879
  %547 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %548 = load i64, i64* %charset_list, align 8
  %sub888 = sub nsw i64 %548, 3
  %549 = inttoptr i64 %sub888 to i8*
  %550 = bitcast i8* %549 to %struct.Lisp_Cons*
  %car889 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %550, i32 0, i32 0
  %551 = load i64, i64* %car889, align 8
  %shr890 = ashr i64 %551, 2
  %add.ptr891 = getelementptr inbounds %struct.charset, %struct.charset* %547, i64 %shr890
  store %struct.charset* %add.ptr891, %struct.charset** %charset881, align 8
  %552 = load %struct.charset*, %struct.charset** %charset881, align 8
  %dimension892 = getelementptr inbounds %struct.charset, %struct.charset* %552, i32 0, i32 2
  %553 = load i32, i32* %dimension892, align 4
  %cmp893 = icmp ne i32 %553, 1
  br i1 %cmp893, label %if.then.895, label %if.end.902

if.then.895:                                      ; preds = %if.end.887
  %554 = load i64, i64* @Vcharset_hash_table, align 8
  %call896 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %554)
  %555 = load %struct.charset*, %struct.charset** %charset881, align 8
  %hash_index897 = getelementptr inbounds %struct.charset, %struct.charset* %555, i32 0, i32 1
  %556 = load i64, i64* %hash_index897, align 8
  %call898 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call896, i64 %556)
  %call899 = call i64 @AREF(i64 %call898, i64 1)
  %call900 = call i64 @SYMBOL_NAME(i64 %call899)
  %call901 = call i8* @SDATA(i64 %call900)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i32 0, i32 0), i8* %call901) #6
  unreachable

if.end.902:                                       ; preds = %if.end.887
  %557 = load %struct.charset*, %struct.charset** %charset881, align 8
  %ascii_compatible_p903 = getelementptr inbounds %struct.charset, %struct.charset* %557, i32 0, i32 5
  %bf.load904 = load i8, i8* %ascii_compatible_p903, align 8
  %bf.lshr905 = lshr i8 %bf.load904, 2
  %bf.clear906 = and i8 %bf.lshr905, 1
  %bf.cast907 = trunc i8 %bf.clear906 to i1
  br i1 %bf.cast907, label %if.then.908, label %if.end.910

if.then.908:                                      ; preds = %if.end.902
  %558 = load i64, i64* %attrs, align 8
  %call909 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %558, i64 5, i64 %call909)
  br label %if.end.910

if.end.910:                                       ; preds = %if.then.908, %if.end.902
  %559 = load i64, i64* %charset_list, align 8
  %sub911 = sub nsw i64 %559, 3
  %560 = inttoptr i64 %sub911 to i8*
  %561 = bitcast i8* %560 to %struct.Lisp_Cons*
  %u912 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %561, i32 0, i32 1
  %cdr913 = bitcast %union.anon.0* %u912 to i64*
  %562 = load i64, i64* %cdr913, align 8
  store i64 %562, i64* %charset_list, align 8
  %563 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %564 = load i64, i64* %charset_list, align 8
  %sub914 = sub nsw i64 %564, 3
  %565 = inttoptr i64 %sub914 to i8*
  %566 = bitcast i8* %565 to %struct.Lisp_Cons*
  %car915 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %566, i32 0, i32 0
  %567 = load i64, i64* %car915, align 8
  %shr916 = ashr i64 %567, 2
  %add.ptr917 = getelementptr inbounds %struct.charset, %struct.charset* %563, i64 %shr916
  store %struct.charset* %add.ptr917, %struct.charset** %charset881, align 8
  %568 = load %struct.charset*, %struct.charset** %charset881, align 8
  %dimension918 = getelementptr inbounds %struct.charset, %struct.charset* %568, i32 0, i32 2
  %569 = load i32, i32* %dimension918, align 4
  %cmp919 = icmp ne i32 %569, 2
  br i1 %cmp919, label %if.then.921, label %if.end.928

if.then.921:                                      ; preds = %if.end.910
  %570 = load i64, i64* @Vcharset_hash_table, align 8
  %call922 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %570)
  %571 = load %struct.charset*, %struct.charset** %charset881, align 8
  %hash_index923 = getelementptr inbounds %struct.charset, %struct.charset* %571, i32 0, i32 1
  %572 = load i64, i64* %hash_index923, align 8
  %call924 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call922, i64 %572)
  %call925 = call i64 @AREF(i64 %call924, i64 1)
  %call926 = call i64 @SYMBOL_NAME(i64 %call925)
  %call927 = call i8* @SDATA(i64 %call926)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i32 0, i32 0), i8* %call927) #6
  unreachable

if.end.928:                                       ; preds = %if.end.910
  store i32 16, i32* %category, align 4
  %573 = load i64, i64* %name, align 8
  store i64 %573, i64* @Vbig5_coding_system, align 8
  br label %if.end.1025

if.else.929:                                      ; preds = %if.else.875
  %574 = load i64, i64* %coding_type, align 8
  %call930 = call i64 @builtin_lisp_symbol(i32 788)
  %cmp931 = icmp eq i64 %574, %call930
  br i1 %cmp931, label %if.then.933, label %if.else.935

if.then.933:                                      ; preds = %if.else.929
  store i32 19, i32* %category, align 4
  %575 = load i64, i64* %attrs, align 8
  %call934 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %575, i64 5, i64 %call934)
  br label %if.end.1024

if.else.935:                                      ; preds = %if.else.929
  %576 = load i64, i64* %coding_type, align 8
  %call936 = call i64 @builtin_lisp_symbol(i32 988)
  %cmp937 = icmp eq i64 %576, %call936
  br i1 %cmp937, label %if.then.939, label %if.else.1007

if.then.939:                                      ; preds = %if.else.935
  %577 = load i64, i64* %nargs.addr, align 8
  %cmp942 = icmp slt i64 %577, 14
  br i1 %cmp942, label %if.then.944, label %if.end.945

if.then.944:                                      ; preds = %if.then.939
  br label %short_args

if.end.945:                                       ; preds = %if.then.939
  %578 = load i64*, i64** %args.addr, align 8
  %arrayidx946 = getelementptr inbounds i64, i64* %578, i64 13
  %579 = load i64, i64* %arrayidx946, align 8
  store i64 %579, i64* %bom941, align 8
  %580 = load i64, i64* %bom941, align 8
  %call947 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp948 = icmp eq i64 %580, %call947
  br i1 %cmp948, label %if.end.988, label %land.lhs.true.950

land.lhs.true.950:                                ; preds = %if.end.945
  %581 = load i64, i64* %bom941, align 8
  %call951 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp952 = icmp eq i64 %581, %call951
  br i1 %cmp952, label %if.end.988, label %if.then.954

if.then.954:                                      ; preds = %land.lhs.true.950
  %582 = load i64, i64* %bom941, align 8
  call void @CHECK_CONS(i64 %582)
  %583 = load i64, i64* %bom941, align 8
  %sub955 = sub nsw i64 %583, 3
  %584 = inttoptr i64 %sub955 to i8*
  %585 = bitcast i8* %584 to %struct.Lisp_Cons*
  %car956 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %585, i32 0, i32 0
  %586 = load i64, i64* %car956, align 8
  store i64 %586, i64* %val, align 8
  br label %do.body.957

do.body.957:                                      ; preds = %if.then.954
  %587 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call958 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %587)
  %588 = load i64, i64* %val, align 8
  %call959 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call958, i64 %588, i64* null)
  %cmp960 = icmp slt i64 %call959, 0
  br i1 %cmp960, label %land.lhs.true.962, label %if.end.969

land.lhs.true.962:                                ; preds = %do.body.957
  %589 = load i64, i64* %val, align 8
  %call963 = call i64 @Fcheck_coding_system(i64 %589)
  %call964 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp965 = icmp eq i64 %call963, %call964
  br i1 %cmp965, label %if.then.967, label %if.end.969

if.then.967:                                      ; preds = %land.lhs.true.962
  %call968 = call i64 @builtin_lisp_symbol(i32 280)
  %590 = load i64, i64* %val, align 8
  %591 = call i64 @wrong_type_argument(i64 %call968, i64 %590) #6
  unreachable

if.end.969:                                       ; preds = %land.lhs.true.962, %do.body.957
  br label %do.end.970

do.end.970:                                       ; preds = %if.end.969
  %592 = load i64, i64* %bom941, align 8
  %sub971 = sub nsw i64 %592, 3
  %593 = inttoptr i64 %sub971 to i8*
  %594 = bitcast i8* %593 to %struct.Lisp_Cons*
  %u972 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %594, i32 0, i32 1
  %cdr973 = bitcast %union.anon.0* %u972 to i64*
  %595 = load i64, i64* %cdr973, align 8
  store i64 %595, i64* %val, align 8
  br label %do.body.974

do.body.974:                                      ; preds = %do.end.970
  %596 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call975 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %596)
  %597 = load i64, i64* %val, align 8
  %call976 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call975, i64 %597, i64* null)
  %cmp977 = icmp slt i64 %call976, 0
  br i1 %cmp977, label %land.lhs.true.979, label %if.end.986

land.lhs.true.979:                                ; preds = %do.body.974
  %598 = load i64, i64* %val, align 8
  %call980 = call i64 @Fcheck_coding_system(i64 %598)
  %call981 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp982 = icmp eq i64 %call980, %call981
  br i1 %cmp982, label %if.then.984, label %if.end.986

if.then.984:                                      ; preds = %land.lhs.true.979
  %call985 = call i64 @builtin_lisp_symbol(i32 280)
  %599 = load i64, i64* %val, align 8
  %600 = call i64 @wrong_type_argument(i64 %call985, i64 %599) #6
  unreachable

if.end.986:                                       ; preds = %land.lhs.true.979, %do.body.974
  br label %do.end.987

do.end.987:                                       ; preds = %if.end.986
  br label %if.end.988

if.end.988:                                       ; preds = %do.end.987, %land.lhs.true.950, %if.end.945
  %601 = load i64, i64* %attrs, align 8
  %602 = load i64, i64* %bom941, align 8
  call void @ASET(i64 %601, i64 24, i64 %602)
  %603 = load i64, i64* %bom941, align 8
  %call989 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp990 = icmp eq i64 %603, %call989
  br i1 %cmp990, label %if.then.992, label %if.end.994

if.then.992:                                      ; preds = %if.end.988
  %604 = load i64, i64* %attrs, align 8
  %call993 = call i64 @builtin_lisp_symbol(i32 901)
  call void @ASET(i64 %604, i64 5, i64 %call993)
  br label %if.end.994

if.end.994:                                       ; preds = %if.then.992, %if.end.988
  %605 = load i64, i64* %bom941, align 8
  %and995 = and i64 %605, 7
  %conv996 = trunc i64 %and995 to i32
  %cmp997 = icmp eq i32 %conv996, 3
  br i1 %cmp997, label %cond.true.999, label %cond.false.1000

cond.true.999:                                    ; preds = %if.end.994
  br label %cond.end.1005

cond.false.1000:                                  ; preds = %if.end.994
  %606 = load i64, i64* %bom941, align 8
  %call1001 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1002 = icmp eq i64 %606, %call1001
  %cond1004 = select i1 %cmp1002, i32 7, i32 8
  br label %cond.end.1005

cond.end.1005:                                    ; preds = %cond.false.1000, %cond.true.999
  %cond1006 = phi i32 [ 6, %cond.true.999 ], [ %cond1004, %cond.false.1000 ]
  store i32 %cond1006, i32* %category, align 4
  br label %if.end.1023

if.else.1007:                                     ; preds = %if.else.935
  %607 = load i64, i64* %coding_type, align 8
  %call1008 = call i64 @builtin_lisp_symbol(i32 958)
  %cmp1009 = icmp eq i64 %607, %call1008
  br i1 %cmp1009, label %if.then.1011, label %if.else.1019

if.then.1011:                                     ; preds = %if.else.1007
  %608 = load i64, i64* %nargs.addr, align 8
  %cmp1012 = icmp slt i64 %608, 16
  br i1 %cmp1012, label %if.then.1014, label %if.end.1015

if.then.1014:                                     ; preds = %if.then.1011
  br label %short_args

if.end.1015:                                      ; preds = %if.then.1011
  %609 = load i64, i64* %attrs, align 8
  %610 = load i64*, i64** %args.addr, align 8
  %arrayidx1016 = getelementptr inbounds i64, i64* %610, i64 13
  %611 = load i64, i64* %arrayidx1016, align 8
  call void @ASET(i64 %609, i64 27, i64 %611)
  %612 = load i64, i64* %attrs, align 8
  %613 = load i64*, i64** %args.addr, align 8
  %arrayidx1017 = getelementptr inbounds i64, i64* %613, i64 14
  %614 = load i64, i64* %arrayidx1017, align 8
  call void @ASET(i64 %612, i64 28, i64 %614)
  %615 = load i64, i64* %attrs, align 8
  %616 = load i64*, i64** %args.addr, align 8
  %arrayidx1018 = getelementptr inbounds i64, i64* %616, i64 15
  %617 = load i64, i64* %arrayidx1018, align 8
  call void @ASET(i64 %615, i64 29, i64 %617)
  store i32 20, i32* %category, align 4
  br label %if.end.1022

if.else.1019:                                     ; preds = %if.else.1007
  %618 = load i64, i64* %coding_type, align 8
  %call1020 = call i64 @SYMBOL_NAME(i64 %618)
  %call1021 = call i8* @SDATA(i64 %call1020)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.15, i32 0, i32 0), i8* %call1021) #6
  unreachable

if.end.1022:                                      ; preds = %if.end.1015
  br label %if.end.1023

if.end.1023:                                      ; preds = %if.end.1022, %cond.end.1005
  br label %if.end.1024

if.end.1024:                                      ; preds = %if.end.1023, %if.then.933
  br label %if.end.1025

if.end.1025:                                      ; preds = %if.end.1024, %if.end.928
  br label %if.end.1026

if.end.1026:                                      ; preds = %if.end.1025, %if.end.874
  br label %if.end.1027

if.end.1027:                                      ; preds = %if.end.1026, %if.end.773
  br label %if.end.1028

if.end.1028:                                      ; preds = %if.end.1027, %if.end.761
  br label %if.end.1029

if.end.1029:                                      ; preds = %if.end.1028, %cond.end.565
  br label %if.end.1030

if.end.1030:                                      ; preds = %if.end.1029, %for.end.461
  br label %if.end.1031

if.end.1031:                                      ; preds = %if.end.1030, %for.end.340
  %619 = load i64, i64* %attrs, align 8
  %620 = load i32, i32* %category, align 4
  %conv1032 = zext i32 %620 to i64
  %shl1033 = shl i64 %conv1032, 2
  %add1034 = add i64 %shl1033, 2
  call void @ASET(i64 %619, i64 14, i64 %add1034)
  %621 = load i64, i64* %attrs, align 8
  %call1035 = call i64 @builtin_lisp_symbol(i32 19)
  %622 = load i64, i64* @Vcoding_category_table, align 8
  %623 = load i32, i32* %category, align 4
  %conv1036 = zext i32 %623 to i64
  %call1037 = call i64 @AREF(i64 %622, i64 %conv1036)
  %624 = load i64, i64* %attrs, align 8
  %call1038 = call i64 @AREF(i64 %624, i64 13)
  %call1039 = call i64 @Fcons(i64 %call1037, i64 %call1038)
  %call1040 = call i64 @Fcons(i64 %call1035, i64 %call1039)
  call void @ASET(i64 %621, i64 13, i64 %call1040)
  %625 = load i64, i64* %attrs, align 8
  %call1041 = call i64 @builtin_lisp_symbol(i32 10)
  %626 = load i64, i64* %attrs, align 8
  %call1042 = call i64 @AREF(i64 %626, i64 5)
  %627 = load i64, i64* %attrs, align 8
  %call1043 = call i64 @AREF(i64 %627, i64 13)
  %call1044 = call i64 @Fcons(i64 %call1042, i64 %call1043)
  %call1045 = call i64 @Fcons(i64 %call1041, i64 %call1044)
  call void @ASET(i64 %625, i64 13, i64 %call1045)
  %628 = load i64*, i64** %args.addr, align 8
  %arrayidx1046 = getelementptr inbounds i64, i64* %628, i64 12
  %629 = load i64, i64* %arrayidx1046, align 8
  store i64 %629, i64* %eol_type, align 8
  %630 = load i64, i64* %eol_type, align 8
  %call1047 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1048 = icmp eq i64 %630, %call1047
  br i1 %cmp1048, label %if.end.1063, label %land.lhs.true.1050

land.lhs.true.1050:                               ; preds = %if.end.1031
  %631 = load i64, i64* %eol_type, align 8
  %call1051 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp1052 = icmp eq i64 %631, %call1051
  br i1 %cmp1052, label %if.end.1063, label %land.lhs.true.1054

land.lhs.true.1054:                               ; preds = %land.lhs.true.1050
  %632 = load i64, i64* %eol_type, align 8
  %call1055 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp1056 = icmp eq i64 %632, %call1055
  br i1 %cmp1056, label %if.end.1063, label %land.lhs.true.1058

land.lhs.true.1058:                               ; preds = %land.lhs.true.1054
  %633 = load i64, i64* %eol_type, align 8
  %call1059 = call i64 @builtin_lisp_symbol(i32 635)
  %cmp1060 = icmp eq i64 %633, %call1059
  br i1 %cmp1060, label %if.end.1063, label %if.then.1062

if.then.1062:                                     ; preds = %land.lhs.true.1058
  call void (i8*, ...) @error(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0)) #6
  unreachable

if.end.1063:                                      ; preds = %land.lhs.true.1058, %land.lhs.true.1054, %land.lhs.true.1050, %if.end.1031
  %634 = load i64, i64* %name, align 8
  %call1064 = call i64 @list1(i64 %634)
  store i64 %call1064, i64* %aliases, align 8
  %635 = load i64, i64* %eol_type, align 8
  %call1065 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1066 = icmp eq i64 %635, %call1065
  br i1 %cmp1066, label %if.then.1068, label %if.end.1113

if.then.1068:                                     ; preds = %if.end.1063
  %636 = load i64, i64* %name, align 8
  %call1069 = call i64 @make_subsidiaries(i64 %636)
  store i64 %call1069, i64* %eol_type, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.1070

for.cond.1070:                                    ; preds = %for.inc.1110, %if.then.1068
  %637 = load i32, i32* %i, align 4
  %cmp1071 = icmp slt i32 %637, 3
  br i1 %cmp1071, label %for.body.1073, label %for.end.1112

for.body.1073:                                    ; preds = %for.cond.1070
  %638 = load i64, i64* %eol_type, align 8
  %639 = load i32, i32* %i, align 4
  %conv1078 = sext i32 %639 to i64
  %call1079 = call i64 @AREF(i64 %638, i64 %conv1078)
  store i64 %call1079, i64* %this_name, align 8
  %640 = load i64, i64* %this_name, align 8
  %call1080 = call i64 @list1(i64 %640)
  store i64 %call1080, i64* %this_aliases, align 8
  %641 = load i32, i32* %i, align 4
  %cmp1081 = icmp eq i32 %641, 0
  br i1 %cmp1081, label %cond.true.1083, label %cond.false.1085

cond.true.1083:                                   ; preds = %for.body.1073
  %call1084 = call i64 @builtin_lisp_symbol(i32 973)
  br label %cond.end.1094

cond.false.1085:                                  ; preds = %for.body.1073
  %642 = load i32, i32* %i, align 4
  %cmp1086 = icmp eq i32 %642, 1
  br i1 %cmp1086, label %cond.true.1088, label %cond.false.1090

cond.true.1088:                                   ; preds = %cond.false.1085
  %call1089 = call i64 @builtin_lisp_symbol(i32 351)
  br label %cond.end.1092

cond.false.1090:                                  ; preds = %cond.false.1085
  %call1091 = call i64 @builtin_lisp_symbol(i32 635)
  br label %cond.end.1092

cond.end.1092:                                    ; preds = %cond.false.1090, %cond.true.1088
  %cond1093 = phi i64 [ %call1089, %cond.true.1088 ], [ %call1091, %cond.false.1090 ]
  br label %cond.end.1094

cond.end.1094:                                    ; preds = %cond.end.1092, %cond.true.1083
  %cond1095 = phi i64 [ %call1084, %cond.true.1083 ], [ %cond1093, %cond.end.1092 ]
  store i64 %cond1095, i64* %this_eol_type, align 8
  %call1096 = call i64 @make_uninit_vector(i64 3)
  store i64 %call1096, i64* %this_spec, align 8
  %643 = load i64, i64* %this_spec, align 8
  %644 = load i64, i64* %attrs, align 8
  call void @ASET(i64 %643, i64 0, i64 %644)
  %645 = load i64, i64* %this_spec, align 8
  %646 = load i64, i64* %this_aliases, align 8
  call void @ASET(i64 %645, i64 1, i64 %646)
  %647 = load i64, i64* %this_spec, align 8
  %648 = load i64, i64* %this_eol_type, align 8
  call void @ASET(i64 %647, i64 2, i64 %648)
  %649 = load i64, i64* %this_name, align 8
  %650 = load i64, i64* %this_spec, align 8
  %651 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call1097 = call i64 @Fputhash(i64 %649, i64 %650, i64 %651)
  %652 = load i64, i64* %this_name, align 8
  %653 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  %call1098 = call i64 @Fcons(i64 %652, i64 %653)
  store i64 %call1098, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  %654 = load i64, i64* %this_name, align 8
  %call1099 = call i64 @Fsymbol_name(i64 %654)
  %655 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call1100 = call i64 @Fassoc(i64 %call1099, i64 %655)
  store i64 %call1100, i64* %val, align 8
  %656 = load i64, i64* %val, align 8
  %call1101 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1102 = icmp eq i64 %656, %call1101
  br i1 %cmp1102, label %if.then.1104, label %if.end.1109

if.then.1104:                                     ; preds = %cond.end.1094
  %657 = load i64, i64* %this_name, align 8
  %call1105 = call i64 @Fsymbol_name(i64 %657)
  %call1106 = call i64 @builtin_lisp_symbol(i32 0)
  %call1107 = call i64 @Fcons(i64 %call1105, i64 %call1106)
  %658 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call1108 = call i64 @Fcons(i64 %call1107, i64 %658)
  store i64 %call1108, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  br label %if.end.1109

if.end.1109:                                      ; preds = %if.then.1104, %cond.end.1094
  br label %for.inc.1110

for.inc.1110:                                     ; preds = %if.end.1109
  %659 = load i32, i32* %i, align 4
  %inc1111 = add nsw i32 %659, 1
  store i32 %inc1111, i32* %i, align 4
  br label %for.cond.1070

for.end.1112:                                     ; preds = %for.cond.1070
  br label %if.end.1113

if.end.1113:                                      ; preds = %for.end.1112, %if.end.1063
  %call1114 = call i64 @make_uninit_vector(i64 3)
  store i64 %call1114, i64* %spec_vec, align 8
  %660 = load i64, i64* %spec_vec, align 8
  %661 = load i64, i64* %attrs, align 8
  call void @ASET(i64 %660, i64 0, i64 %661)
  %662 = load i64, i64* %spec_vec, align 8
  %663 = load i64, i64* %aliases, align 8
  call void @ASET(i64 %662, i64 1, i64 %663)
  %664 = load i64, i64* %spec_vec, align 8
  %665 = load i64, i64* %eol_type, align 8
  call void @ASET(i64 %664, i64 2, i64 %665)
  %666 = load i64, i64* %name, align 8
  %667 = load i64, i64* %spec_vec, align 8
  %668 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call1115 = call i64 @Fputhash(i64 %666, i64 %667, i64 %668)
  %669 = load i64, i64* %name, align 8
  %670 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  %call1116 = call i64 @Fcons(i64 %669, i64 %670)
  store i64 %call1116, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  %671 = load i64, i64* %name, align 8
  %call1117 = call i64 @Fsymbol_name(i64 %671)
  %672 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call1118 = call i64 @Fassoc(i64 %call1117, i64 %672)
  store i64 %call1118, i64* %val, align 8
  %673 = load i64, i64* %val, align 8
  %call1119 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1120 = icmp eq i64 %673, %call1119
  br i1 %cmp1120, label %if.then.1122, label %if.end.1127

if.then.1122:                                     ; preds = %if.end.1113
  %674 = load i64, i64* %name, align 8
  %call1123 = call i64 @Fsymbol_name(i64 %674)
  %call1124 = call i64 @builtin_lisp_symbol(i32 0)
  %call1125 = call i64 @Fcons(i64 %call1123, i64 %call1124)
  %675 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call1126 = call i64 @Fcons(i64 %call1125, i64 %675)
  store i64 %call1126, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  br label %if.end.1127

if.end.1127:                                      ; preds = %if.then.1122, %if.end.1113
  %676 = load i32, i32* %category, align 4
  %idxprom1130 = zext i32 %676 to i64
  %arrayidx1131 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom1130
  %id1132 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx1131, i32 0, i32 0
  %677 = load i64, i64* %id1132, align 8
  %conv1133 = trunc i64 %677 to i32
  store i32 %conv1133, i32* %id1129, align 4
  %678 = load i32, i32* %id1129, align 4
  %cmp1134 = icmp slt i32 %678, 0
  br i1 %cmp1134, label %if.then.1142, label %lor.lhs.false.1136

lor.lhs.false.1136:                               ; preds = %if.end.1127
  %679 = load i64, i64* %name, align 8
  %680 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call1137 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %680)
  %681 = load i32, i32* %id1129, align 4
  %conv1138 = sext i32 %681 to i64
  %call1139 = call i64 @HASH_KEY(%struct.Lisp_Hash_Table* %call1137, i64 %conv1138)
  %cmp1140 = icmp eq i64 %679, %call1139
  br i1 %cmp1140, label %if.then.1142, label %if.end.1145

if.then.1142:                                     ; preds = %lor.lhs.false.1136, %if.end.1127
  %682 = load i64, i64* %name, align 8
  %683 = load i32, i32* %category, align 4
  %idxprom1143 = zext i32 %683 to i64
  %arrayidx1144 = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom1143
  call void @setup_coding_system(i64 %682, %struct.coding_system* %arrayidx1144)
  br label %if.end.1145

if.end.1145:                                      ; preds = %if.then.1142, %lor.lhs.false.1136
  %call1146 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1146, i64* %retval
  br label %return

short_args:                                       ; preds = %if.then.1014, %if.then.944, %if.then.578, %if.then.472, %if.then.349, %if.then
  %call1147 = call i64 @builtin_lisp_symbol(i32 1043)
  %call1148 = call i64 @intern(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i32 0, i32 0))
  %684 = load i64, i64* %nargs.addr, align 8
  %shl1149 = shl i64 %684, 2
  %add1150 = add i64 %shl1149, 2
  %call1151 = call i64 @Fcons(i64 %call1148, i64 %add1150)
  %call1152 = call i64 @Fsignal(i64 %call1147, i64 %call1151)
  store i64 %call1152, i64* %retval
  br label %return

return:                                           ; preds = %short_args, %if.end.1145
  %685 = load i64, i64* %retval
  ret i64 %685
}

declare i64 @Fmake_vector(i64, i64) #1

declare zeroext i1 @RANGED_INTEGERP(i64, i64, i64) #1

declare zeroext i1 @CHAR_TABLE_P(i64) #1

declare void @CHECK_LIST(i64) #1

declare zeroext i1 @NUMBERP(i64) #1

declare i64 @nconc2(i64, i64) #1

declare i64 @Fccl_program_p(i64) #1

declare i64 @Fmake_string(i64, i64) #1

; Function Attrs: noreturn
declare void @args_out_of_range_3(i64, i64, i64) #2

declare void @CHECK_CONS(i64) #1

; Function Attrs: nounwind uwtable
define internal void @CHECK_NATNUM_CAR(i64 %x) #0 {
entry:
  %x.addr = alloca i64, align 8
  %tmp = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  %0 = load i64, i64* %x.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 0
  %3 = load i64, i64* %car, align 8
  store i64 %3, i64* %tmp, align 8
  %4 = load i64, i64* %tmp, align 8
  call void @CHECK_NATNUM(i64 %4)
  %5 = load i64, i64* %x.addr, align 8
  %6 = load i64, i64* %tmp, align 8
  call void @XSETCAR(i64 %5, i64 %6)
  ret void
}

declare void @CHECK_NUMBER_CDR(i64) #1

declare void @CHECK_VECTOR(i64) #1

declare void @CHECK_NUMBER_CAR(i64) #1

; Function Attrs: nounwind uwtable
define internal void @CHECK_NATNUM_CDR(i64 %x) #0 {
entry:
  %x.addr = alloca i64, align 8
  %tmp = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  %0 = load i64, i64* %x.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %3 = load i64, i64* %cdr, align 8
  store i64 %3, i64* %tmp, align 8
  %4 = load i64, i64* %tmp, align 8
  call void @CHECK_NATNUM(i64 %4)
  %5 = load i64, i64* %x.addr, align 8
  %6 = load i64, i64* %tmp, align 8
  call void @XSETCDR(i64 %5, i64 %6)
  ret void
}

declare i64 @Flength(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @make_subsidiaries(i64 %base) #0 {
entry:
  %base.addr = alloca i64, align 8
  %subsidiaries = alloca i64, align 8
  %base_name_len = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  store i64 %base, i64* %base.addr, align 8
  %0 = load i64, i64* %base.addr, align 8
  %call = call i64 @SYMBOL_NAME(i64 %0)
  %call1 = call i64 @SBYTES(i64 %call)
  store i64 %call1, i64* %base_name_len, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call2 = call i64 @SPECPDL_INDEX()
  store i64 %call2, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %1 = load i64, i64* %base_name_len, align 8
  %add = add nsw i64 %1, 6
  %2 = load i64, i64* %sa_avail, align 8
  %cmp = icmp sle i64 %add, %2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* %base_name_len, align 8
  %add3 = add nsw i64 %3, 6
  %4 = load i64, i64* %sa_avail, align 8
  %sub = sub nsw i64 %4, %add3
  store i64 %sub, i64* %sa_avail, align 8
  %5 = load i64, i64* %base_name_len, align 8
  %add4 = add nsw i64 %5, 6
  %6 = alloca i8, i64 %add4
  br label %cond.end

cond.false:                                       ; preds = %entry
  store i8 1, i8* %sa_must_free, align 1
  %7 = load i64, i64* %base_name_len, align 8
  %add5 = add nsw i64 %7, 6
  %call6 = call i8* @record_xmalloc(i64 %add5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ %call6, %cond.false ]
  store i8* %cond, i8** %buf, align 8
  %8 = load i8*, i8** %buf, align 8
  %9 = load i64, i64* %base.addr, align 8
  %call7 = call i64 @SYMBOL_NAME(i64 %9)
  %call8 = call i8* @SDATA(i64 %call7)
  %10 = load i64, i64* %base_name_len, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %call8, i64 %10, i32 1, i1 false)
  %call9 = call i64 @make_uninit_vector(i64 3)
  store i64 %call9, i64* %subsidiaries, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %11, 3
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i8*, i8** %buf, align 8
  %13 = load i64, i64* %base_name_len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %13
  %14 = load i32, i32* %i, align 4
  %idxprom = sext i32 %14 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @suffixes, i32 0, i64 %idxprom
  %15 = load i8*, i8** %arrayidx, align 8
  %call11 = call i8* @strcpy(i8* %add.ptr, i8* %15) #3
  %16 = load i64, i64* %subsidiaries, align 8
  %17 = load i32, i32* %i, align 4
  %conv = sext i32 %17 to i64
  %18 = load i8*, i8** %buf, align 8
  %call12 = call i64 @intern(i8* %18)
  call void @ASET(i64 %16, i64 %conv, i64 %call12)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.end
  %20 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %20 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  store i8 0, i8* %sa_must_free, align 1
  %21 = load i64, i64* %sa_count, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %call14 = call i64 @unbind_to(i64 %21, i64 %call13)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %22 = load i64, i64* %subsidiaries, align 8
  ret i64 %22
}

declare i64 @make_uninit_vector(i64) #1

declare i64 @Fputhash(i64, i64, i64) #1

declare i64 @Fassoc(i64, i64) #1

declare i64 @Fsymbol_name(i64) #1

declare i64 @Fsignal(i64, i64) #1

declare i64 @intern(i8*) #1

; Function Attrs: nounwind uwtable
define i64 @Fcoding_system_put(i64 %coding_system, i64 %prop, i64 %val) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %prop.addr = alloca i64, align 8
  %val.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  store i64 %prop, i64* %prop.addr, align 8
  store i64 %val, i64* %val.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %coding_system.addr, align 8
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call1 = call i64 @Fgethash(i64 %0, i64 %1, i64 %call)
  store i64 %call1, i64* %spec, align 8
  %2 = load i64, i64* %spec, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %3 = load i64, i64* %coding_system.addr, align 8
  %call3 = call i64 @Fcheck_coding_system(i64 %3)
  %4 = load i64, i64* %coding_system.addr, align 8
  %5 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %call5 = call i64 @Fgethash(i64 %4, i64 %5, i64 %call4)
  store i64 %call5, i64* %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %6 = load i64, i64* %spec, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %6, %call6
  br i1 %cmp7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end
  %call9 = call i64 @builtin_lisp_symbol(i32 280)
  %7 = load i64, i64* %coding_system.addr, align 8
  %8 = call i64 @wrong_type_argument(i64 %call9, i64 %7) #6
  unreachable

if.end.10:                                        ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %9 = load i64, i64* %spec, align 8
  %call11 = call i64 @AREF(i64 %9, i64 0)
  store i64 %call11, i64* %attrs, align 8
  %10 = load i64, i64* %prop.addr, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 85)
  %cmp13 = icmp eq i64 %10, %call12
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.end
  %11 = load i64, i64* %val.addr, align 8
  %call15 = call zeroext i1 @STRINGP(i64 %11)
  br i1 %call15, label %if.end.20, label %if.then.16

if.then.16:                                       ; preds = %if.then.14
  %12 = load i64, i64* %val.addr, align 8
  %call17 = call zeroext i1 @NATNUMP(i64 %12)
  br i1 %call17, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.16
  %13 = load i64, i64* %val.addr, align 8
  %shr = ashr i64 %13, 2
  %cmp18 = icmp sle i64 %shr, 4194303
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.16
  %call19 = call i64 @builtin_lisp_symbol(i32 260)
  %14 = load i64, i64* %val.addr, align 8
  %15 = call i64 @wrong_type_argument(i64 %call19, i64 %14) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %16, %cond.true
  br label %if.end.20

if.end.20:                                        ; preds = %cond.end, %if.then.14
  %17 = load i64, i64* %attrs, align 8
  %18 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %17, i64 2, i64 %18)
  br label %if.end.113

if.else:                                          ; preds = %do.end
  %19 = load i64, i64* %prop.addr, align 8
  %call21 = call i64 @builtin_lisp_symbol(i32 31)
  %cmp22 = icmp eq i64 %19, %call21
  br i1 %cmp22, label %if.then.23, label %if.else.37

if.then.23:                                       ; preds = %if.else
  %20 = load i64, i64* %val.addr, align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp25 = icmp eq i64 %20, %call24
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %if.then.23
  store i64 130, i64* %val.addr, align 8
  br label %if.end.36

if.else.27:                                       ; preds = %if.then.23
  %21 = load i64, i64* %val.addr, align 8
  %call28 = call zeroext i1 @NATNUMP(i64 %21)
  br i1 %call28, label %land.lhs.true.29, label %cond.false.33

land.lhs.true.29:                                 ; preds = %if.else.27
  %22 = load i64, i64* %val.addr, align 8
  %shr30 = ashr i64 %22, 2
  %cmp31 = icmp sle i64 %shr30, 4194303
  br i1 %cmp31, label %cond.true.32, label %cond.false.33

cond.true.32:                                     ; preds = %land.lhs.true.29
  br label %cond.end.35

cond.false.33:                                    ; preds = %land.lhs.true.29, %if.else.27
  %call34 = call i64 @builtin_lisp_symbol(i32 260)
  %23 = load i64, i64* %val.addr, align 8
  %24 = call i64 @wrong_type_argument(i64 %call34, i64 %23) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.35

cond.end.35:                                      ; preds = %25, %cond.true.32
  br label %if.end.36

if.end.36:                                        ; preds = %cond.end.35, %if.then.26
  %26 = load i64, i64* %attrs, align 8
  %27 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %26, i64 11, i64 %27)
  br label %if.end.112

if.else.37:                                       ; preds = %if.else
  %28 = load i64, i64* %prop.addr, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 30)
  %cmp39 = icmp eq i64 %28, %call38
  br i1 %cmp39, label %if.then.40, label %if.else.55

if.then.40:                                       ; preds = %if.else.37
  %29 = load i64, i64* %val.addr, align 8
  %call41 = call zeroext i1 @CHAR_TABLE_P(i64 %29)
  br i1 %call41, label %if.end.54, label %land.lhs.true.42

land.lhs.true.42:                                 ; preds = %if.then.40
  %30 = load i64, i64* %val.addr, align 8
  %and = and i64 %30, 7
  %conv = trunc i64 %and to i32
  %cmp43 = icmp eq i32 %conv, 3
  br i1 %cmp43, label %if.end.54, label %if.then.45

if.then.45:                                       ; preds = %land.lhs.true.42
  %31 = load i64, i64* %val.addr, align 8
  %and46 = and i64 %31, 7
  %conv47 = trunc i64 %and46 to i32
  %cmp48 = icmp eq i32 %conv47, 0
  br i1 %cmp48, label %cond.true.50, label %cond.false.51

cond.true.50:                                     ; preds = %if.then.45
  br label %cond.end.53

cond.false.51:                                    ; preds = %if.then.45
  %call52 = call i64 @builtin_lisp_symbol(i32 897)
  %32 = load i64, i64* %val.addr, align 8
  %33 = call i64 @wrong_type_argument(i64 %call52, i64 %32) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.53

cond.end.53:                                      ; preds = %34, %cond.true.50
  br label %if.end.54

if.end.54:                                        ; preds = %cond.end.53, %land.lhs.true.42, %if.then.40
  %35 = load i64, i64* %attrs, align 8
  %36 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %35, i64 6, i64 %36)
  br label %if.end.111

if.else.55:                                       ; preds = %if.else.37
  %37 = load i64, i64* %prop.addr, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 38)
  %cmp57 = icmp eq i64 %37, %call56
  br i1 %cmp57, label %if.then.59, label %if.else.76

if.then.59:                                       ; preds = %if.else.55
  %38 = load i64, i64* %val.addr, align 8
  %call60 = call zeroext i1 @CHAR_TABLE_P(i64 %38)
  br i1 %call60, label %if.end.75, label %land.lhs.true.61

land.lhs.true.61:                                 ; preds = %if.then.59
  %39 = load i64, i64* %val.addr, align 8
  %and62 = and i64 %39, 7
  %conv63 = trunc i64 %and62 to i32
  %cmp64 = icmp eq i32 %conv63, 3
  br i1 %cmp64, label %if.end.75, label %if.then.66

if.then.66:                                       ; preds = %land.lhs.true.61
  %40 = load i64, i64* %val.addr, align 8
  %and67 = and i64 %40, 7
  %conv68 = trunc i64 %and67 to i32
  %cmp69 = icmp eq i32 %conv68, 0
  br i1 %cmp69, label %cond.true.71, label %cond.false.72

cond.true.71:                                     ; preds = %if.then.66
  br label %cond.end.74

cond.false.72:                                    ; preds = %if.then.66
  %call73 = call i64 @builtin_lisp_symbol(i32 897)
  %41 = load i64, i64* %val.addr, align 8
  %42 = call i64 @wrong_type_argument(i64 %call73, i64 %41) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.74

cond.end.74:                                      ; preds = %43, %cond.true.71
  br label %if.end.75

if.end.75:                                        ; preds = %cond.end.74, %land.lhs.true.61, %if.then.59
  %44 = load i64, i64* %attrs, align 8
  %45 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %44, i64 7, i64 %45)
  br label %if.end.110

if.else.76:                                       ; preds = %if.else.55
  %46 = load i64, i64* %prop.addr, align 8
  %call77 = call i64 @builtin_lisp_symbol(i32 95)
  %cmp78 = icmp eq i64 %46, %call77
  br i1 %cmp78, label %if.then.80, label %if.else.89

if.then.80:                                       ; preds = %if.else.76
  %47 = load i64, i64* %val.addr, align 8
  %and81 = and i64 %47, 7
  %conv82 = trunc i64 %and81 to i32
  %cmp83 = icmp eq i32 %conv82, 0
  br i1 %cmp83, label %cond.true.85, label %cond.false.86

cond.true.85:                                     ; preds = %if.then.80
  br label %cond.end.88

cond.false.86:                                    ; preds = %if.then.80
  %call87 = call i64 @builtin_lisp_symbol(i32 897)
  %48 = load i64, i64* %val.addr, align 8
  %49 = call i64 @wrong_type_argument(i64 %call87, i64 %48) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.88

cond.end.88:                                      ; preds = %50, %cond.true.85
  %51 = load i64, i64* %attrs, align 8
  %52 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %51, i64 9, i64 %52)
  br label %if.end.109

if.else.89:                                       ; preds = %if.else.76
  %53 = load i64, i64* %prop.addr, align 8
  %call90 = call i64 @builtin_lisp_symbol(i32 96)
  %cmp91 = icmp eq i64 %53, %call90
  br i1 %cmp91, label %if.then.93, label %if.else.102

if.then.93:                                       ; preds = %if.else.89
  %54 = load i64, i64* %val.addr, align 8
  %and94 = and i64 %54, 7
  %conv95 = trunc i64 %and94 to i32
  %cmp96 = icmp eq i32 %conv95, 0
  br i1 %cmp96, label %cond.true.98, label %cond.false.99

cond.true.98:                                     ; preds = %if.then.93
  br label %cond.end.101

cond.false.99:                                    ; preds = %if.then.93
  %call100 = call i64 @builtin_lisp_symbol(i32 897)
  %55 = load i64, i64* %val.addr, align 8
  %56 = call i64 @wrong_type_argument(i64 %call100, i64 %55) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end.101

cond.end.101:                                     ; preds = %57, %cond.true.98
  %58 = load i64, i64* %attrs, align 8
  %59 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %58, i64 10, i64 %59)
  br label %if.end.108

if.else.102:                                      ; preds = %if.else.89
  %60 = load i64, i64* %prop.addr, align 8
  %call103 = call i64 @builtin_lisp_symbol(i32 10)
  %cmp104 = icmp eq i64 %60, %call103
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %if.else.102
  %61 = load i64, i64* %attrs, align 8
  %62 = load i64, i64* %val.addr, align 8
  call void @ASET(i64 %61, i64 5, i64 %62)
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.106, %if.else.102
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %cond.end.101
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %cond.end.88
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.end.75
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %if.end.54
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.end.36
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %if.end.20
  %63 = load i64, i64* %attrs, align 8
  %64 = load i64, i64* %attrs, align 8
  %call114 = call i64 @AREF(i64 %64, i64 13)
  %65 = load i64, i64* %prop.addr, align 8
  %66 = load i64, i64* %val.addr, align 8
  %call115 = call i64 @Fplist_put(i64 %call114, i64 %65, i64 %66)
  call void @ASET(i64 %63, i64 13, i64 %call115)
  %67 = load i64, i64* %val.addr, align 8
  ret i64 %67
}

declare i64 @Fplist_put(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i64 @Fdefine_coding_system_alias(i64 %alias, i64 %coding_system) #0 {
entry:
  %alias.addr = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %aliases = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %val = alloca i64, align 8
  %subsidiaries = alloca i64, align 8
  %i = alloca i32, align 4
  store i64 %alias, i64* %alias.addr, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %alias.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 897)
  %1 = load i64, i64* %alias.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #6
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load i64, i64* %coding_system.addr, align 8
  %5 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fgethash(i64 %4, i64 %5, i64 %call2)
  store i64 %call3, i64* %spec, align 8
  %6 = load i64, i64* %spec, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %6, %call4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %7 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcheck_coding_system(i64 %7)
  %8 = load i64, i64* %coding_system.addr, align 8
  %9 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fgethash(i64 %8, i64 %9, i64 %call8)
  store i64 %call9, i64* %spec, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %10 = load i64, i64* %spec, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %10, %call10
  br i1 %cmp11, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %if.end
  %call14 = call i64 @builtin_lisp_symbol(i32 280)
  %11 = load i64, i64* %coding_system.addr, align 8
  %12 = call i64 @wrong_type_argument(i64 %call14, i64 %11) #6
  unreachable

if.end.15:                                        ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %13 = load i64, i64* %spec, align 8
  %call16 = call i64 @AREF(i64 %13, i64 1)
  store i64 %call16, i64* %aliases, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %14 = load i64, i64* %aliases, align 8
  %sub = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %17 = load i64, i64* %cdr, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp18 = icmp eq i64 %17, %call17
  %lnot = xor i1 %cmp18, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i64, i64* %aliases, align 8
  %sub20 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub20 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %u21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 1
  %cdr22 = bitcast %union.anon.0* %u21 to i64*
  %21 = load i64, i64* %cdr22, align 8
  store i64 %21, i64* %aliases, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load i64, i64* %aliases, align 8
  %23 = load i64, i64* %alias.addr, align 8
  %call23 = call i64 @list1(i64 %23)
  call void @XSETCDR(i64 %22, i64 %call23)
  %24 = load i64, i64* %spec, align 8
  %call24 = call i64 @AREF(i64 %24, i64 2)
  store i64 %call24, i64* %eol_type, align 8
  %25 = load i64, i64* %eol_type, align 8
  %call25 = call zeroext i1 @VECTORP(i64 %25)
  br i1 %call25, label %if.then.26, label %if.end.35

if.then.26:                                       ; preds = %while.end
  %26 = load i64, i64* %alias.addr, align 8
  %call27 = call i64 @make_subsidiaries(i64 %26)
  store i64 %call27, i64* %subsidiaries, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.26
  %27 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %27, 3
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %28 = load i64, i64* %subsidiaries, align 8
  %29 = load i32, i32* %i, align 4
  %conv30 = sext i32 %29 to i64
  %call31 = call i64 @AREF(i64 %28, i64 %conv30)
  %30 = load i64, i64* %eol_type, align 8
  %31 = load i32, i32* %i, align 4
  %conv32 = sext i32 %31 to i64
  %call33 = call i64 @AREF(i64 %30, i64 %conv32)
  %call34 = call i64 @Fdefine_coding_system_alias(i64 %call31, i64 %call33)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load i32, i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.35

if.end.35:                                        ; preds = %for.end, %while.end
  %33 = load i64, i64* %alias.addr, align 8
  %34 = load i64, i64* %spec, align 8
  %35 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call36 = call i64 @Fputhash(i64 %33, i64 %34, i64 %35)
  %36 = load i64, i64* %alias.addr, align 8
  %37 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  %call37 = call i64 @Fcons(i64 %36, i64 %37)
  store i64 %call37, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  %38 = load i64, i64* %alias.addr, align 8
  %call38 = call i64 @Fsymbol_name(i64 %38)
  %39 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call39 = call i64 @Fassoc(i64 %call38, i64 %39)
  store i64 %call39, i64* %val, align 8
  %40 = load i64, i64* %val, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp41 = icmp eq i64 %40, %call40
  br i1 %cmp41, label %if.then.43, label %if.end.48

if.then.43:                                       ; preds = %if.end.35
  %41 = load i64, i64* %alias.addr, align 8
  %call44 = call i64 @Fsymbol_name(i64 %41)
  %call45 = call i64 @builtin_lisp_symbol(i32 0)
  %call46 = call i64 @Fcons(i64 %call44, i64 %call45)
  %42 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  %call47 = call i64 @Fcons(i64 %call46, i64 %42)
  store i64 %call47, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.43, %if.end.35
  %call49 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call49
}

; Function Attrs: nounwind uwtable
define i64 @Fcoding_system_base(i64 %coding_system) #0 {
entry:
  %retval = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %1 = load i64, i64* %coding_system.addr, align 8
  %2 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fgethash(i64 %1, i64 %2, i64 %call2)
  store i64 %call3, i64* %spec, align 8
  %3 = load i64, i64* %spec, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %3, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %do.body
  %4 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcheck_coding_system(i64 %4)
  %5 = load i64, i64* %coding_system.addr, align 8
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fgethash(i64 %5, i64 %6, i64 %call8)
  store i64 %call9, i64* %spec, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.6, %do.body
  %7 = load i64, i64* %spec, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %7, %call11
  br i1 %cmp12, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %if.end.10
  %call14 = call i64 @builtin_lisp_symbol(i32 280)
  %8 = load i64, i64* %coding_system.addr, align 8
  %9 = call i64 @wrong_type_argument(i64 %call14, i64 %8) #6
  unreachable

if.end.15:                                        ; preds = %if.end.10
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %10 = load i64, i64* %spec, align 8
  %call16 = call i64 @AREF(i64 %10, i64 0)
  store i64 %call16, i64* %attrs, align 8
  %11 = load i64, i64* %attrs, align 8
  %call17 = call i64 @AREF(i64 %11, i64 0)
  store i64 %call17, i64* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load i64, i64* %retval
  ret i64 %12
}

; Function Attrs: nounwind uwtable
define i64 @Fcoding_system_plist(i64 %coding_system) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %attrs = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call1, i64* %coding_system.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %1 = load i64, i64* %coding_system.addr, align 8
  %2 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fgethash(i64 %1, i64 %2, i64 %call2)
  store i64 %call3, i64* %spec, align 8
  %3 = load i64, i64* %spec, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %3, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %do.body
  %4 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcheck_coding_system(i64 %4)
  %5 = load i64, i64* %coding_system.addr, align 8
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fgethash(i64 %5, i64 %6, i64 %call8)
  store i64 %call9, i64* %spec, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.6, %do.body
  %7 = load i64, i64* %spec, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %7, %call11
  br i1 %cmp12, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %if.end.10
  %call14 = call i64 @builtin_lisp_symbol(i32 280)
  %8 = load i64, i64* %coding_system.addr, align 8
  %9 = call i64 @wrong_type_argument(i64 %call14, i64 %8) #6
  unreachable

if.end.15:                                        ; preds = %if.end.10
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %10 = load i64, i64* %spec, align 8
  %call16 = call i64 @AREF(i64 %10, i64 0)
  store i64 %call16, i64* %attrs, align 8
  %11 = load i64, i64* %attrs, align 8
  %call17 = call i64 @AREF(i64 %11, i64 13)
  ret i64 %call17
}

; Function Attrs: nounwind uwtable
define i64 @Fcoding_system_aliases(i64 %coding_system) #0 {
entry:
  %coding_system.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call1, i64* %coding_system.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %1 = load i64, i64* %coding_system.addr, align 8
  %2 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fgethash(i64 %1, i64 %2, i64 %call2)
  store i64 %call3, i64* %spec, align 8
  %3 = load i64, i64* %spec, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %3, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %do.body
  %4 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcheck_coding_system(i64 %4)
  %5 = load i64, i64* %coding_system.addr, align 8
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fgethash(i64 %5, i64 %6, i64 %call8)
  store i64 %call9, i64* %spec, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.6, %do.body
  %7 = load i64, i64* %spec, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp12 = icmp eq i64 %7, %call11
  br i1 %cmp12, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %if.end.10
  %call14 = call i64 @builtin_lisp_symbol(i32 280)
  %8 = load i64, i64* %coding_system.addr, align 8
  %9 = call i64 @wrong_type_argument(i64 %call14, i64 %8) #6
  unreachable

if.end.15:                                        ; preds = %if.end.10
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %10 = load i64, i64* %spec, align 8
  %call16 = call i64 @AREF(i64 %10, i64 1)
  ret i64 %call16
}

; Function Attrs: nounwind uwtable
define i64 @Fcoding_system_eol_type(i64 %coding_system) #0 {
entry:
  %retval = alloca i64, align 8
  %coding_system.addr = alloca i64, align 8
  %spec = alloca i64, align 8
  %eol_type = alloca i64, align 8
  %n = alloca i32, align 4
  store i64 %coding_system, i64* %coding_system.addr, align 8
  %0 = load i64, i64* %coding_system.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 702)
  store i64 %call1, i64* %coding_system.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call2 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %1)
  %2 = load i64, i64* %coding_system.addr, align 8
  %call3 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call2, i64 %2, i64* null)
  %cmp4 = icmp sge i64 %call3, 0
  br i1 %cmp4, label %if.end.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i64, i64* %coding_system.addr, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %3, %call5
  br i1 %cmp6, label %if.then.10, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load i64, i64* %coding_system.addr, align 8
  %call7 = call i64 @Fcoding_system_p(i64 %4)
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %call7, %call8
  br i1 %cmp9, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call11, i64* %retval
  br label %return

if.end.12:                                        ; preds = %land.lhs.true, %if.end
  %5 = load i64, i64* %coding_system.addr, align 8
  %6 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %call14 = call i64 @Fgethash(i64 %5, i64 %6, i64 %call13)
  store i64 %call14, i64* %spec, align 8
  %7 = load i64, i64* %spec, align 8
  %call15 = call i64 @AREF(i64 %7, i64 2)
  store i64 %call15, i64* %eol_type, align 8
  %8 = load i64, i64* %eol_type, align 8
  %call16 = call zeroext i1 @VECTORP(i64 %8)
  br i1 %call16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %if.end.12
  %9 = load i64, i64* %eol_type, align 8
  %call18 = call i64 @Fcopy_sequence(i64 %9)
  store i64 %call18, i64* %retval
  br label %return

if.end.19:                                        ; preds = %if.end.12
  %10 = load i64, i64* %eol_type, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp21 = icmp eq i64 %10, %call20
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.19
  br label %cond.end

cond.false:                                       ; preds = %if.end.19
  %11 = load i64, i64* %eol_type, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp23 = icmp eq i64 %11, %call22
  %cond = select i1 %cmp23, i32 1, i32 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond24 = phi i32 [ 0, %cond.true ], [ %cond, %cond.false ]
  store i32 %cond24, i32* %n, align 4
  %12 = load i32, i32* %n, align 4
  %conv = sext i32 %12 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  store i64 %add, i64* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then.17, %if.then.10
  %13 = load i64, i64* %retval
  ret i64 %13
}

; Function Attrs: nounwind uwtable
define void @init_coding_once() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 21
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [21 x %struct.coding_system], [21 x %struct.coding_system]* @coding_categories, i32 0, i64 %idxprom
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %arrayidx, i32 0, i32 0
  store i64 -1, i64* %id, align 8
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [21 x i32], [21 x i32]* @coding_priorities, i32 0, i64 %idxprom1
  store i32 %2, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.8, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %5, 32
  br i1 %cmp4, label %for.body.5, label %for.end.10

for.body.5:                                       ; preds = %for.cond.3
  %6 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %6 to i64
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 %idxprom6
  store i32 0, i32* %arrayidx7, align 4
  br label %for.inc.8

for.inc.8:                                        ; preds = %for.body.5
  %7 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %7, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond.3

for.end.10:                                       ; preds = %for.cond.3
  store i32 33, i32* %i, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc.16, %for.end.10
  %8 = load i32, i32* %i, align 4
  %cmp12 = icmp slt i32 %8, 127
  br i1 %cmp12, label %for.body.13, label %for.end.18

for.body.13:                                      ; preds = %for.cond.11
  %9 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %9 to i64
  %arrayidx15 = getelementptr inbounds [256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 %idxprom14
  store i32 10, i32* %arrayidx15, align 4
  br label %for.inc.16

for.inc.16:                                       ; preds = %for.body.13
  %10 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %10, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond.11

for.end.18:                                       ; preds = %for.cond.11
  store i32 128, i32* %i, align 4
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.24, %for.end.18
  %11 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %11, 160
  br i1 %cmp20, label %for.body.21, label %for.end.26

for.body.21:                                      ; preds = %for.cond.19
  %12 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %12 to i64
  %arrayidx23 = getelementptr inbounds [256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 %idxprom22
  store i32 5, i32* %arrayidx23, align 4
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.body.21
  %13 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %13, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond.19

for.end.26:                                       ; preds = %for.cond.19
  store i32 161, i32* %i, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.32, %for.end.26
  %14 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %14, 255
  br i1 %cmp28, label %for.body.29, label %for.end.34

for.body.29:                                      ; preds = %for.cond.27
  %15 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %15 to i64
  %arrayidx31 = getelementptr inbounds [256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 %idxprom30
  store i32 12, i32* %arrayidx31, align 4
  br label %for.inc.32

for.inc.32:                                       ; preds = %for.body.29
  %16 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %16, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond.27

for.end.34:                                       ; preds = %for.cond.27
  store i32 9, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 127), align 4
  store i32 9, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 32), align 4
  store i32 11, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 255), align 4
  store i32 11, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 160), align 4
  store i32 1, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 14), align 4
  store i32 2, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 15), align 4
  store i32 3, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 25), align 4
  store i32 4, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 27), align 4
  store i32 6, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 142), align 4
  store i32 7, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 143), align 4
  store i32 8, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @iso_code_class, i32 0, i64 155), align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.40, %for.end.34
  %17 = load i32, i32* %i, align 4
  %cmp36 = icmp slt i32 %17, 256
  br i1 %cmp36, label %for.body.37, label %for.end.42

for.body.37:                                      ; preds = %for.cond.35
  %18 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %18 to i64
  %arrayidx39 = getelementptr inbounds [256 x i8], [256 x i8]* @emacs_mule_bytes, i32 0, i64 %idxprom38
  store i8 1, i8* %arrayidx39, align 1
  br label %for.inc.40

for.inc.40:                                       ; preds = %for.body.37
  %19 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %19, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond.35

for.end.42:                                       ; preds = %for.cond.35
  store i8 3, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @emacs_mule_bytes, i32 0, i64 154), align 1
  store i8 3, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @emacs_mule_bytes, i32 0, i64 155), align 1
  store i8 4, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @emacs_mule_bytes, i32 0, i64 156), align 1
  store i8 4, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @emacs_mule_bytes, i32 0, i64 157), align 1
  ret void
}

; Function Attrs: nounwind uwtable
define void @syms_of_coding() #0 {
entry:
  %.compoundliteral = alloca [2 x i64], align 8
  %i = alloca i32, align 4
  %args = alloca [16 x i64], align 16
  %plist = alloca [16 x i64], align 16
  %i219 = alloca i32, align 4
  call void @staticpro(i64* @Vcoding_system_hash_table)
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i64 0, i64 0
  %call = call i64 @builtin_lisp_symbol(i32 129)
  store i64 %call, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %call1 = call i64 @builtin_lisp_symbol(i32 369)
  store i64 %call1, i64* %arrayinit.element
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i32 0, i32 0
  %call2 = call i64 @Fmake_hash_table(i64 2, i64* %arraydecay)
  store i64 %call2, i64* @Vcoding_system_hash_table, align 8
  call void @staticpro(i64* @Vsjis_coding_system)
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* @Vsjis_coding_system, align 8
  call void @staticpro(i64* @Vbig5_coding_system)
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4, i64* @Vbig5_coding_system, align 8
  call void @staticpro(i64* @Vcode_conversion_reused_workbuf)
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call5, i64* @Vcode_conversion_reused_workbuf, align 8
  call void @staticpro(i64* @Vcode_conversion_workbuf_name)
  %call6 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i32 0, i32 0))
  store i64 %call6, i64* @Vcode_conversion_workbuf_name, align 8
  store i8 0, i8* @reused_workbuf_in_use, align 1
  %call7 = call i64 @builtin_lisp_symbol(i32 279)
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %call9 = call i64 @Fset(i64 %call7, i64 %call8)
  %call10 = call i64 @builtin_lisp_symbol(i32 553)
  %call11 = call i64 @builtin_lisp_symbol(i32 902)
  %call12 = call i64 @Fput(i64 %call10, i64 %call11, i64 2)
  %call13 = call i64 @builtin_lisp_symbol(i32 1040)
  %call14 = call i64 @builtin_lisp_symbol(i32 902)
  %call15 = call i64 @Fput(i64 %call13, i64 %call14, i64 10)
  %call16 = call i64 @builtin_lisp_symbol(i32 234)
  %call17 = call i64 @builtin_lisp_symbol(i32 902)
  %call18 = call i64 @Fput(i64 %call16, i64 %call17, i64 2)
  %call19 = call i64 @builtin_lisp_symbol(i32 235)
  %call20 = call i64 @builtin_lisp_symbol(i32 902)
  %call21 = call i64 @Fput(i64 %call19, i64 %call20, i64 10)
  %call22 = call i64 @builtin_lisp_symbol(i32 873)
  %call23 = call i64 @builtin_lisp_symbol(i32 902)
  %call24 = call i64 @Fput(i64 %call22, i64 %call23, i64 10)
  %call25 = call i64 @builtin_lisp_symbol(i32 720)
  %call26 = call i64 @builtin_lisp_symbol(i32 902)
  %call27 = call i64 @Fput(i64 %call25, i64 %call26, i64 14)
  %call28 = call i64 @builtin_lisp_symbol(i32 278)
  %call29 = call i64 @builtin_lisp_symbol(i32 373)
  %call30 = call i64 @builtin_lisp_symbol(i32 278)
  %call31 = call i64 @builtin_lisp_symbol(i32 372)
  %call32 = call i64 (i32, i64, i64, ...) @listn(i32 1, i64 2, i64 %call30, i64 %call31)
  %call33 = call i64 @Fput(i64 %call28, i64 %call29, i64 %call32)
  %call34 = call i64 @builtin_lisp_symbol(i32 278)
  %call35 = call i64 @builtin_lisp_symbol(i32 374)
  %call36 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0))
  %call37 = call i64 @Fput(i64 %call34, i64 %call35, i64 %call36)
  %call38 = call i64 @builtin_lisp_symbol(i32 934)
  %call39 = call i64 @builtin_lisp_symbol(i32 258)
  %call40 = call i64 @Fput(i64 %call38, i64 %call39, i64 10)
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  %call42 = call i64 @Fmake_vector(i64 86, i64 %call41)
  store i64 %call42, i64* @Vcoding_category_table, align 8
  call void @staticpro(i64* @Vcoding_category_table)
  %0 = load i64, i64* @Vcoding_category_table, align 8
  %call43 = call i64 @intern_c_string(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.20, i32 0, i32 0))
  call void @ASET(i64 %0, i64 0, i64 %call43)
  %1 = load i64, i64* @Vcoding_category_table, align 8
  %call44 = call i64 @intern_c_string(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.21, i32 0, i32 0))
  call void @ASET(i64 %1, i64 1, i64 %call44)
  %2 = load i64, i64* @Vcoding_category_table, align 8
  %call45 = call i64 @intern_c_string(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.22, i32 0, i32 0))
  call void @ASET(i64 %2, i64 2, i64 %call45)
  %3 = load i64, i64* @Vcoding_category_table, align 8
  %call46 = call i64 @intern_c_string(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.23, i32 0, i32 0))
  call void @ASET(i64 %3, i64 3, i64 %call46)
  %4 = load i64, i64* @Vcoding_category_table, align 8
  %call47 = call i64 @intern_c_string(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i32 0, i32 0))
  call void @ASET(i64 %4, i64 4, i64 %call47)
  %5 = load i64, i64* @Vcoding_category_table, align 8
  %call48 = call i64 @intern_c_string(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25, i32 0, i32 0))
  call void @ASET(i64 %5, i64 5, i64 %call48)
  %6 = load i64, i64* @Vcoding_category_table, align 8
  %call49 = call i64 @intern_c_string(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i32 0, i32 0))
  call void @ASET(i64 %6, i64 6, i64 %call49)
  %7 = load i64, i64* @Vcoding_category_table, align 8
  %call50 = call i64 @intern_c_string(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0))
  call void @ASET(i64 %7, i64 7, i64 %call50)
  %8 = load i64, i64* @Vcoding_category_table, align 8
  %call51 = call i64 @intern_c_string(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.28, i32 0, i32 0))
  call void @ASET(i64 %8, i64 8, i64 %call51)
  %9 = load i64, i64* @Vcoding_category_table, align 8
  %call52 = call i64 @intern_c_string(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0))
  call void @ASET(i64 %9, i64 10, i64 %call52)
  %10 = load i64, i64* @Vcoding_category_table, align 8
  %call53 = call i64 @intern_c_string(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.30, i32 0, i32 0))
  call void @ASET(i64 %10, i64 9, i64 %call53)
  %11 = load i64, i64* @Vcoding_category_table, align 8
  %call54 = call i64 @intern_c_string(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0))
  call void @ASET(i64 %11, i64 11, i64 %call54)
  %12 = load i64, i64* @Vcoding_category_table, align 8
  %call55 = call i64 @intern_c_string(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.32, i32 0, i32 0))
  call void @ASET(i64 %12, i64 12, i64 %call55)
  %13 = load i64, i64* @Vcoding_category_table, align 8
  %call56 = call i64 @intern_c_string(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.33, i32 0, i32 0))
  call void @ASET(i64 %13, i64 13, i64 %call56)
  %14 = load i64, i64* @Vcoding_category_table, align 8
  %call57 = call i64 @intern_c_string(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.34, i32 0, i32 0))
  call void @ASET(i64 %14, i64 14, i64 %call57)
  %15 = load i64, i64* @Vcoding_category_table, align 8
  %call58 = call i64 @intern_c_string(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i32 0, i32 0))
  call void @ASET(i64 %15, i64 15, i64 %call58)
  %16 = load i64, i64* @Vcoding_category_table, align 8
  %call59 = call i64 @intern_c_string(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.36, i32 0, i32 0))
  call void @ASET(i64 %16, i64 16, i64 %call59)
  %17 = load i64, i64* @Vcoding_category_table, align 8
  %call60 = call i64 @intern_c_string(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.37, i32 0, i32 0))
  call void @ASET(i64 %17, i64 17, i64 %call60)
  %18 = load i64, i64* @Vcoding_category_table, align 8
  %call61 = call i64 @intern_c_string(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.38, i32 0, i32 0))
  call void @ASET(i64 %18, i64 18, i64 %call61)
  %19 = load i64, i64* @Vcoding_category_table, align 8
  %call62 = call i64 @intern_c_string(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.39, i32 0, i32 0))
  call void @ASET(i64 %19, i64 19, i64 %call62)
  %20 = load i64, i64* @Vcoding_category_table, align 8
  %call63 = call i64 @intern_c_string(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i32 0, i32 0))
  call void @ASET(i64 %20, i64 20, i64 %call63)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scoding_system_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sread_coding_system to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sread_non_nil_coding_system to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scheck_coding_system to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sdetect_coding_region to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sdetect_coding_string to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sfind_coding_systems_region_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sunencodable_char_position to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Scheck_coding_systems_region to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sdecode_coding_region to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sencode_coding_region to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sdecode_coding_string to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sencode_coding_string to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sdecode_sjis_char to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sencode_sjis_char to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sdecode_big5_char to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sencode_big5_char to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_terminal_coding_system_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_safe_terminal_coding_system_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sterminal_coding_system to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sset_keyboard_coding_system_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Skeyboard_coding_system to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* }* @Sfind_operation_coding_system to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* }* @Sset_coding_system_priority to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* }* @Sdefine_coding_system_internal to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sdefine_coding_system_alias to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Scoding_system_put to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scoding_system_base to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scoding_system_plist to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scoding_system_aliases to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scoding_system_eol_type to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scoding_system_priority_list to %struct.Lisp_Subr*))
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.41, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37))
  br label %do.end

do.end:                                           ; preds = %do.body
  %call64 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 37), align 8
  br label %do.body.65

do.body.65:                                       ; preds = %do.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.42, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34))
  br label %do.end.66

do.end.66:                                        ; preds = %do.body.65
  %call67 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call67, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 34), align 8
  br label %do.body.68

do.body.68:                                       ; preds = %do.end.66
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.44, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 33))
  br label %do.end.69

do.end.69:                                        ; preds = %do.body.68
  %call70 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call70, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 33), align 8
  store i32 20, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end.69
  %21 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %21, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i64, i64* @Vcoding_category_table, align 8
  %23 = load i32, i32* %i, align 4
  %conv = sext i32 %23 to i64
  %call71 = call i64 @AREF(i64 %22, i64 %conv)
  %24 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 33), align 8
  %call72 = call i64 @Fcons(i64 %call71, i64 %24)
  store i64 %call72, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 33), align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4
  %dec = add nsw i32 %25, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body.73

do.body.73:                                       ; preds = %for.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.46, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.47, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 35))
  br label %do.end.74

do.end.74:                                        ; preds = %do.body.73
  %call75 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call75, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 35), align 8
  br label %do.body.76

do.body.76:                                       ; preds = %do.end.74
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.48, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.49, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 36))
  br label %do.end.77

do.end.77:                                        ; preds = %do.body.76
  %call78 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call78, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 36), align 8
  br label %do.body.79

do.body.79:                                       ; preds = %do.end.77
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.50, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.51, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 155))
  br label %do.end.80

do.end.80:                                        ; preds = %do.body.79
  %call81 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call81, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 155), align 8
  br label %do.body.82

do.body.82:                                       ; preds = %do.end.80
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.52, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.53, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 154))
  br label %do.end.83

do.end.83:                                        ; preds = %do.body.82
  %call84 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call84, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 154), align 8
  br label %do.body.85

do.body.85:                                       ; preds = %do.end.83
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_coding.b_fwd, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449))
  br label %do.end.86

do.end.86:                                        ; preds = %do.body.85
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  br label %do.body.87

do.body.87:                                       ; preds = %do.end.86
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_coding.b_fwd.55, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 447))
  br label %do.end.88

do.end.88:                                        ; preds = %do.body.87
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 447), align 1
  br label %do.body.89

do.body.89:                                       ; preds = %do.end.88
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.57, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.58, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 93))
  br label %do.end.90

do.end.90:                                        ; preds = %do.body.89
  %call91 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call91, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 93), align 8
  br label %do.body.92

do.body.92:                                       ; preds = %do.end.90
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.59, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.60, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 237))
  br label %do.end.93

do.end.93:                                        ; preds = %do.body.92
  %call94 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call94, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 237), align 8
  br label %do.body.95

do.body.95:                                       ; preds = %do.end.93
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.61, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.62, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 205))
  br label %do.end.96

do.end.96:                                        ; preds = %do.body.95
  %call97 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call97, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 205), align 8
  br label %do.body.98

do.body.98:                                       ; preds = %do.end.96
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.64, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 168))
  br label %do.end.99

do.end.99:                                        ; preds = %do.body.98
  %call100 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call100, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 168), align 8
  br label %do.body.101

do.body.101:                                      ; preds = %do.end.99
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.65, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.66, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 372))
  br label %do.end.102

do.end.102:                                       ; preds = %do.body.101
  %call103 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.67, i32 0, i32 0))
  store i64 %call103, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 372), align 8
  br label %do.body.104

do.body.104:                                      ; preds = %do.end.102
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.68, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.69, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 369))
  br label %do.end.105

do.end.105:                                       ; preds = %do.body.104
  %call106 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.70, i32 0, i32 0))
  store i64 %call106, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 369), align 8
  br label %do.body.107

do.body.107:                                      ; preds = %do.end.105
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.71, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.72, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 370))
  br label %do.end.108

do.end.108:                                       ; preds = %do.body.107
  %call109 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.73, i32 0, i32 0))
  store i64 %call109, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 370), align 8
  br label %do.body.110

do.body.110:                                      ; preds = %do.end.108
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.74, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.75, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 371))
  br label %do.end.111

do.end.111:                                       ; preds = %do.body.110
  %call112 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.67, i32 0, i32 0))
  store i64 %call112, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 371), align 8
  br label %do.body.113

do.body.113:                                      ; preds = %do.end.111
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.76, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.77, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 80))
  br label %do.end.114

do.end.114:                                       ; preds = %do.body.113
  %call115 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call115, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 80), align 8
  br label %do.body.116

do.body.116:                                      ; preds = %do.end.114
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.78, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.79, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 278))
  br label %do.end.117

do.end.117:                                       ; preds = %do.body.116
  %call118 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call118, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 278), align 8
  br label %do.body.119

do.body.119:                                      ; preds = %do.end.117
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.80, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.81, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 279))
  br label %do.end.120

do.end.120:                                       ; preds = %do.body.119
  %call121 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call121, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 279), align 8
  br label %do.body.122

do.body.122:                                      ; preds = %do.end.120
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.82, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.83, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 31))
  br label %do.end.123

do.end.123:                                       ; preds = %do.body.122
  %call124 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call124, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 31), align 8
  br label %do.body.125

do.body.125:                                      ; preds = %do.end.123
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.84, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.85, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 62))
  br label %do.end.126

do.end.126:                                       ; preds = %do.body.125
  %call127 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call127, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 62), align 8
  br label %do.body.128

do.body.128:                                      ; preds = %do.end.126
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.86, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.87, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 157))
  br label %do.end.129

do.end.129:                                       ; preds = %do.body.128
  %call130 = call i64 @builtin_lisp_symbol(i32 0)
  %call131 = call i64 @Fmake_vector(i64 1026, i64 %call130)
  store i64 %call131, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 157), align 8
  br label %do.body.132

do.body.132:                                      ; preds = %do.end.129
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.88, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.89, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 264))
  br label %do.end.133

do.end.133:                                       ; preds = %do.body.132
  %call134 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call134, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 264), align 8
  br label %do.body.135

do.body.135:                                      ; preds = %do.end.133
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_coding.b_fwd.90, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 427))
  br label %do.end.136

do.end.136:                                       ; preds = %do.body.135
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 427), align 1
  br label %do.body.137

do.body.137:                                      ; preds = %do.end.136
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_coding.b_fwd.92, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 452))
  br label %do.end.138

do.end.138:                                       ; preds = %do.body.137
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 452), align 1
  br label %do.body.139

do.body.139:                                      ; preds = %do.end.138
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_coding.b_fwd.94, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 457))
  br label %do.end.140

do.end.140:                                       ; preds = %do.body.139
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 457), align 1
  br label %do.body.141

do.body.141:                                      ; preds = %do.end.140
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_coding.b_fwd.96, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 437))
  br label %do.end.142

do.end.142:                                       ; preds = %do.body.141
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 437), align 1
  br label %do.body.143

do.body.143:                                      ; preds = %do.end.142
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_coding.o_fwd.98, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.99, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 307))
  br label %do.end.144

do.end.144:                                       ; preds = %do.body.143
  %call145 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call145, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 307), align 8
  %arraydecay146 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i32 0
  %26 = bitcast i64* %arraydecay146 to i8*
  call void @memclear(i8* %26, i64 128)
  %arrayinit.begin147 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i64 0, i64 0
  %call148 = call i64 @builtin_lisp_symbol(i32 86)
  store i64 %call148, i64* %arrayinit.begin147
  %arrayinit.element149 = getelementptr inbounds i64, i64* %arrayinit.begin147, i64 1
  %call150 = call i64 @builtin_lisp_symbol(i32 702)
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 0
  store i64 %call150, i64* %arrayidx, align 8
  store i64 %call150, i64* %arrayinit.element149
  %arrayinit.element151 = getelementptr inbounds i64, i64* %arrayinit.element149, i64 1
  %call152 = call i64 @builtin_lisp_symbol(i32 85)
  store i64 %call152, i64* %arrayinit.element151
  %arrayinit.element153 = getelementptr inbounds i64, i64* %arrayinit.element151, i64 1
  %arrayidx154 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 1
  store i64 246, i64* %arrayidx154, align 8
  store i64 246, i64* %arrayinit.element153
  %arrayinit.element155 = getelementptr inbounds i64, i64* %arrayinit.element153, i64 1
  %call156 = call i64 @intern_c_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0))
  store i64 %call156, i64* %arrayinit.element155
  %arrayinit.element157 = getelementptr inbounds i64, i64* %arrayinit.element155, i64 1
  %call158 = call i64 @builtin_lisp_symbol(i32 788)
  %arrayidx159 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 2
  store i64 %call158, i64* %arrayidx159, align 8
  store i64 %call158, i64* %arrayinit.element157
  %arrayinit.element160 = getelementptr inbounds i64, i64* %arrayinit.element157, i64 1
  %call161 = call i64 @builtin_lisp_symbol(i32 10)
  store i64 %call161, i64* %arrayinit.element160
  %arrayinit.element162 = getelementptr inbounds i64, i64* %arrayinit.element160, i64 1
  %call163 = call i64 @builtin_lisp_symbol(i32 901)
  %arrayidx164 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 4
  store i64 %call163, i64* %arrayidx164, align 8
  store i64 %call163, i64* %arrayinit.element162
  %arrayinit.element165 = getelementptr inbounds i64, i64* %arrayinit.element162, i64 1
  %call166 = call i64 @builtin_lisp_symbol(i32 31)
  store i64 %call166, i64* %arrayinit.element165
  %arrayinit.element167 = getelementptr inbounds i64, i64* %arrayinit.element165, i64 1
  %arrayidx168 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 9
  store i64 2, i64* %arrayidx168, align 8
  store i64 2, i64* %arrayinit.element167
  %arrayinit.element169 = getelementptr inbounds i64, i64* %arrayinit.element167, i64 1
  %call170 = call i64 @intern_c_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i32 0, i32 0))
  store i64 %call170, i64* %arrayinit.element169
  %arrayinit.element171 = getelementptr inbounds i64, i64* %arrayinit.element169, i64 1
  %call172 = call i64 @builtin_lisp_symbol(i32 901)
  %arrayidx173 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 10
  store i64 %call172, i64* %arrayidx173, align 8
  store i64 %call172, i64* %arrayinit.element171
  %arrayinit.element174 = getelementptr inbounds i64, i64* %arrayinit.element171, i64 1
  %call175 = call i64 @intern_c_string(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.102, i32 0, i32 0))
  store i64 %call175, i64* %arrayinit.element174
  %arrayinit.element176 = getelementptr inbounds i64, i64* %arrayinit.element174, i64 1
  %call177 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.103, i32 0, i32 0))
  store i64 %call177, i64* %arrayinit.element176
  %arrayinit.element178 = getelementptr inbounds i64, i64* %arrayinit.element176, i64 1
  %call179 = call i64 @intern_c_string(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.104, i32 0, i32 0))
  store i64 %call179, i64* %arrayinit.element178
  %arrayinit.element180 = getelementptr inbounds i64, i64* %arrayinit.element178, i64 1
  %call181 = call i64 @builtin_lisp_symbol(i32 973)
  %arrayidx182 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 12
  store i64 %call181, i64* %arrayidx182, align 8
  store i64 %call181, i64* %arrayinit.element180
  %arraydecay183 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i32 0
  %call184 = call i64 @Flist(i64 16, i64* %arraydecay183)
  %arrayidx185 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 11
  store i64 %call184, i64* %arrayidx185, align 8
  %arraydecay186 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i32 0
  %call187 = call i64 @Fdefine_coding_system_internal(i64 13, i64* %arraydecay186)
  %call188 = call i64 @builtin_lisp_symbol(i32 958)
  %arrayidx189 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 0
  store i64 %call188, i64* %arrayidx189, align 8
  %arrayidx190 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 1
  store i64 %call188, i64* %arrayidx190, align 8
  %arrayidx191 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 1
  store i64 182, i64* %arrayidx191, align 8
  %arrayidx192 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 3
  store i64 182, i64* %arrayidx192, align 8
  %call193 = call i64 @builtin_lisp_symbol(i32 958)
  %arrayidx194 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 2
  store i64 %call193, i64* %arrayidx194, align 8
  %arrayidx195 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 5
  store i64 %call193, i64* %arrayidx195, align 8
  %call196 = call i64 @intern_c_string(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.105, i32 0, i32 0))
  %arrayidx197 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 8
  store i64 %call196, i64* %arrayidx197, align 8
  %call198 = call i64 @builtin_lisp_symbol(i32 181)
  %call199 = call i64 @builtin_lisp_symbol(i32 0)
  %call200 = call i64 @Fcons(i64 %call198, i64 %call199)
  %arrayidx201 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 3
  store i64 %call200, i64* %arrayidx201, align 8
  %arrayidx202 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 9
  store i64 %call200, i64* %arrayidx202, align 8
  %call203 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx204 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 10
  store i64 %call203, i64* %arrayidx204, align 8
  %arrayidx205 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 11
  store i64 %call203, i64* %arrayidx205, align 8
  %call206 = call i64 @build_pure_c_string(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.106, i32 0, i32 0))
  %arrayidx207 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 13
  store i64 %call206, i64* %arrayidx207, align 8
  %call208 = call i64 @builtin_lisp_symbol(i32 0)
  %arrayidx209 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 12
  store i64 %call208, i64* %arrayidx209, align 8
  %arrayidx210 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i64 15
  store i64 %call208, i64* %arrayidx210, align 8
  %arraydecay211 = getelementptr inbounds [16 x i64], [16 x i64]* %plist, i32 0, i32 0
  %call212 = call i64 @Flist(i64 16, i64* %arraydecay211)
  %arrayidx213 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 11
  store i64 %call212, i64* %arrayidx213, align 8
  %arrayidx214 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 13
  store i64 2, i64* %arrayidx214, align 8
  %arrayidx215 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i64 14
  store i64 2, i64* %arrayidx215, align 8
  %arraydecay216 = getelementptr inbounds [16 x i64], [16 x i64]* %args, i32 0, i32 0
  %call217 = call i64 @Fdefine_coding_system_internal(i64 16, i64* %arraydecay216)
  %call218 = call i64 @builtin_lisp_symbol(i32 702)
  call void @setup_coding_system(i64 %call218, %struct.coding_system* @safe_terminal_coding)
  store i32 0, i32* %i219, align 4
  br label %for.cond.220

for.cond.220:                                     ; preds = %for.inc.228, %do.end.144
  %27 = load i32, i32* %i219, align 4
  %cmp221 = icmp slt i32 %27, 21
  br i1 %cmp221, label %for.body.223, label %for.end.229

for.body.223:                                     ; preds = %for.cond.220
  %28 = load i64, i64* @Vcoding_category_table, align 8
  %29 = load i32, i32* %i219, align 4
  %conv224 = sext i32 %29 to i64
  %call225 = call i64 @AREF(i64 %28, i64 %conv224)
  %call226 = call i64 @builtin_lisp_symbol(i32 702)
  %call227 = call i64 @Fset(i64 %call225, i64 %call226)
  br label %for.inc.228

for.inc.228:                                      ; preds = %for.body.223
  %30 = load i32, i32* %i219, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i219, align 4
  br label %for.cond.220

for.end.229:                                      ; preds = %for.cond.220
  %call230 = call i64 @builtin_lisp_symbol(i32 973)
  store i64 %call230, i64* @system_eol_type, align 8
  call void @staticpro(i64* @system_eol_type)
  ret void
}

declare void @staticpro(i64*) #1

declare i64 @Fmake_hash_table(i64, i64*) #1

declare i64 @build_pure_c_string(i8*) #1

declare i64 @listn(i32, i64, i64, ...) #1

declare i64 @intern_c_string(i8*) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare void @memclear(i8*, i64) #1

; Function Attrs: nounwind uwtable
define i8* @emacs_strerror(i32 %error_number) #0 {
entry:
  %error_number.addr = alloca i32, align 4
  %str = alloca i8*, align 8
  %dec = alloca i64, align 8
  store i32 %error_number, i32* %error_number.addr, align 4
  call void @synchronize_system_messages_locale()
  %0 = load i32, i32* %error_number.addr, align 4
  %call = call i8* @strerror(i32 %0) #3
  store i8* %call, i8** %str, align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 168), align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str, align 8
  %call2 = call i64 @build_string(i8* %2)
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 168), align 8
  %call3 = call i64 @code_convert_string_norecord(i64 %call2, i64 %3, i1 zeroext false)
  store i64 %call3, i64* %dec, align 8
  %4 = load i64, i64* %dec, align 8
  %call4 = call i8* @SSDATA(i64 %4)
  store i8* %call4, i8** %str, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %str, align 8
  ret i8* %5
}

declare void @synchronize_system_messages_locale() #1

; Function Attrs: nounwind
declare i8* @strerror(i32) #4

declare i64 @build_string(i8*) #1

declare i8* @SSDATA(i64) #1

; Function Attrs: nounwind uwtable
define internal void @record_conversion_result(%struct.coding_system* %coding, i32 %result) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %result.addr = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i32 %result, i32* %result.addr, align 4
  %0 = load i32, i32* %result.addr, align 4
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %result1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 1
  %bf.load = load i32, i32* %result1, align 8
  %bf.value = and i32 %0, 7
  %bf.shl = shl i32 %bf.value, 27
  %bf.clear = and i32 %bf.load, -939524097
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %result1, align 8
  %2 = load i32, i32* %result.addr, align 4
  switch i32 %2, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.4
    i32 2, label %sw.bb.6
    i32 0, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 555)
  store i64 %call, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 154), align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  %call3 = call i64 @builtin_lisp_symbol(i32 573)
  store i64 %call3, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 154), align 8
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry
  %call5 = call i64 @builtin_lisp_symbol(i32 568)
  store i64 %call5, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 154), align 8
  br label %sw.epilog

sw.bb.6:                                          ; preds = %entry
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %call8 = call i64 @intern(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0))
  store i64 %call8, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 154), align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.7, %sw.bb.6, %sw.bb.4, %sw.bb.2, %sw.bb
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @alloc_destination(%struct.coding_system* %coding, i64 %nbytes, i8* %dst) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %nbytes.addr = alloca i64, align 8
  %dst.addr = alloca i8*, align 8
  %offset = alloca i64, align 8
  %buf = alloca %struct.buffer*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %nbytes, i64* %nbytes.addr, align 8
  store i8* %dst, i8** %dst.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 22
  %2 = load i8*, i8** %destination, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %offset, align 8
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 21
  %4 = load i64, i64* %dst_object, align 8
  %call = call zeroext i1 @BUFFERP(i64 %4)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 21
  %6 = load i64, i64* %dst_object1, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %6)
  store %struct.buffer* %call2, %struct.buffer** %buf, align 8
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %8 = load i8*, i8** %dst.addr, align 8
  %9 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 73
  %10 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %10, i32 0, i32 0
  %11 = load i8*, i8** %beg, align 8
  %12 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text3 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text3, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 3
  %14 = load i64, i64* %gpt_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %14
  %add.ptr4 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %sub.ptr.lhs.cast5 = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast6 = ptrtoint i8* %add.ptr4 to i64
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast5, %sub.ptr.rhs.cast6
  %15 = load i64, i64* %nbytes.addr, align 8
  call void @coding_alloc_by_making_gap(%struct.coding_system* %7, i64 %sub.ptr.sub7, i64 %15)
  br label %if.end

if.else:                                          ; preds = %entry
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %17 = load i64, i64* %nbytes.addr, align 8
  call void @coding_alloc_by_realloc(%struct.coding_system* %16, i64 %17)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_destination(%struct.coding_system* %18)
  %19 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination8 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %19, i32 0, i32 22
  %20 = load i8*, i8** %destination8, align 8
  %21 = load i64, i64* %offset, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %20, i64 %21
  store i8* %add.ptr9, i8** %dst.addr, align 8
  %22 = load i8*, i8** %dst.addr, align 8
  ret i8* %22
}

declare i32 @char_string(i32, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @coding_alloc_by_making_gap(%struct.coding_system* %coding, i64 %gap_head_used, i64 %bytes) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %gap_head_used.addr = alloca i64, align 8
  %bytes.addr = alloca i64, align 8
  %add = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %gap_head_used, i64* %gap_head_used.addr, align 8
  store i64 %bytes, i64* %bytes.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 16
  %1 = load i64, i64* %src_object, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 21
  %3 = load i64, i64* %dst_object, align 8
  %cmp = icmp eq i64 %1, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 73
  %5 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %5, i32 0, i32 5
  %6 = load i64, i64* %gap_size, align 8
  store i64 %6, i64* %add, align 8
  %7 = load i64, i64* %gap_head_used.addr, align 8
  %8 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text1 = getelementptr inbounds %struct.buffer, %struct.buffer* %8, i32 0, i32 73
  %9 = load %struct.buffer_text*, %struct.buffer_text** %text1, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %9, i32 0, i32 1
  %10 = load i64, i64* %gpt, align 8
  %add2 = add nsw i64 %10, %7
  store i64 %add2, i64* %gpt, align 8
  %11 = load i64, i64* %gap_head_used.addr, align 8
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text3 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text3, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 3
  %14 = load i64, i64* %gpt_byte, align 8
  %add4 = add nsw i64 %14, %11
  store i64 %add4, i64* %gpt_byte, align 8
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text5 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 73
  %16 = load %struct.buffer_text*, %struct.buffer_text** %text5, align 8
  %gap_size6 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %16, i32 0, i32 5
  store i64 0, i64* %gap_size6, align 8
  %17 = load i64, i64* %add, align 8
  %18 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 79
  %19 = load i64, i64* %zv, align 8
  %add7 = add nsw i64 %19, %17
  store i64 %add7, i64* %zv, align 8
  %20 = load i64, i64* %add, align 8
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text8 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 73
  %22 = load %struct.buffer_text*, %struct.buffer_text** %text8, align 8
  %z = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %22, i32 0, i32 2
  %23 = load i64, i64* %z, align 8
  %add9 = add nsw i64 %23, %20
  store i64 %add9, i64* %z, align 8
  %24 = load i64, i64* %add, align 8
  %25 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 80
  %26 = load i64, i64* %zv_byte, align 8
  %add10 = add nsw i64 %26, %24
  store i64 %add10, i64* %zv_byte, align 8
  %27 = load i64, i64* %add, align 8
  %28 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text11 = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 73
  %29 = load %struct.buffer_text*, %struct.buffer_text** %text11, align 8
  %z_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %29, i32 0, i32 4
  %30 = load i64, i64* %z_byte, align 8
  %add12 = add nsw i64 %30, %27
  store i64 %add12, i64* %z_byte, align 8
  %31 = load i64, i64* %bytes.addr, align 8
  call void @make_gap(i64 %31)
  %32 = load i64, i64* %add, align 8
  %33 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text13 = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i32 0, i32 73
  %34 = load %struct.buffer_text*, %struct.buffer_text** %text13, align 8
  %gap_size14 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %34, i32 0, i32 5
  %35 = load i64, i64* %gap_size14, align 8
  %add15 = add nsw i64 %35, %32
  store i64 %add15, i64* %gap_size14, align 8
  %36 = load i64, i64* %add, align 8
  %37 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv16 = getelementptr inbounds %struct.buffer, %struct.buffer* %37, i32 0, i32 79
  %38 = load i64, i64* %zv16, align 8
  %sub = sub nsw i64 %38, %36
  store i64 %sub, i64* %zv16, align 8
  %39 = load i64, i64* %add, align 8
  %40 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text17 = getelementptr inbounds %struct.buffer, %struct.buffer* %40, i32 0, i32 73
  %41 = load %struct.buffer_text*, %struct.buffer_text** %text17, align 8
  %z18 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %41, i32 0, i32 2
  %42 = load i64, i64* %z18, align 8
  %sub19 = sub nsw i64 %42, %39
  store i64 %sub19, i64* %z18, align 8
  %43 = load i64, i64* %add, align 8
  %44 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv_byte20 = getelementptr inbounds %struct.buffer, %struct.buffer* %44, i32 0, i32 80
  %45 = load i64, i64* %zv_byte20, align 8
  %sub21 = sub nsw i64 %45, %43
  store i64 %sub21, i64* %zv_byte20, align 8
  %46 = load i64, i64* %add, align 8
  %47 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text22 = getelementptr inbounds %struct.buffer, %struct.buffer* %47, i32 0, i32 73
  %48 = load %struct.buffer_text*, %struct.buffer_text** %text22, align 8
  %z_byte23 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %48, i32 0, i32 4
  %49 = load i64, i64* %z_byte23, align 8
  %sub24 = sub nsw i64 %49, %46
  store i64 %sub24, i64* %z_byte23, align 8
  %50 = load i64, i64* %gap_head_used.addr, align 8
  %51 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text25 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i32 0, i32 73
  %52 = load %struct.buffer_text*, %struct.buffer_text** %text25, align 8
  %gpt26 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %52, i32 0, i32 1
  %53 = load i64, i64* %gpt26, align 8
  %sub27 = sub nsw i64 %53, %50
  store i64 %sub27, i64* %gpt26, align 8
  %54 = load i64, i64* %gap_head_used.addr, align 8
  %55 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text28 = getelementptr inbounds %struct.buffer, %struct.buffer* %55, i32 0, i32 73
  %56 = load %struct.buffer_text*, %struct.buffer_text** %text28, align 8
  %gpt_byte29 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %56, i32 0, i32 3
  %57 = load i64, i64* %gpt_byte29, align 8
  %sub30 = sub nsw i64 %57, %54
  store i64 %sub30, i64* %gpt_byte29, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %58 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object31 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %58, i32 0, i32 21
  %59 = load i64, i64* %dst_object31, align 8
  %call = call %struct.buffer* @XBUFFER(i64 %59)
  %60 = load i64, i64* %bytes.addr, align 8
  call void @make_gap_1(%struct.buffer* %call, i64 %60)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @coding_alloc_by_realloc(%struct.coding_system* %coding, i64 %bytes) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %bytes.addr = alloca i64, align 8
  %newbytes = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %bytes, i64* %bytes.addr, align 8
  br i1 false, label %cond.true, label %cond.false.508

cond.true:                                        ; preds = %entry
  br i1 false, label %cond.true.1, label %cond.false.291

cond.true.1:                                      ; preds = %cond.true
  %0 = load i64, i64* %bytes.addr, align 8
  %conv = trunc i64 %0 to i8
  %conv2 = sext i8 %conv to i32
  %mul = mul nsw i32 0, %conv2
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 20
  %2 = load i64, i64* %dst_bytes, align 8
  %conv3 = trunc i64 %2 to i8
  %conv4 = sext i8 %conv3 to i32
  %add = add nsw i32 %mul, %conv4
  %mul5 = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul5, 1
  %cmp = icmp slt i32 %sub, 0
  br i1 %cmp, label %cond.true.7, label %cond.false

cond.true.7:                                      ; preds = %cond.true.1
  %3 = load i64, i64* %bytes.addr, align 8
  %conv8 = trunc i64 %3 to i8
  %conv9 = sext i8 %conv8 to i32
  %mul10 = mul nsw i32 0, %conv9
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes11 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 20
  %5 = load i64, i64* %dst_bytes11, align 8
  %conv12 = trunc i64 %5 to i8
  %conv13 = sext i8 %conv12 to i32
  %add14 = add nsw i32 %mul10, %conv13
  %mul15 = mul nsw i32 0, %add14
  %add16 = add nsw i32 %mul15, 0
  %neg = xor i32 %add16, -1
  %cmp17 = icmp eq i32 %neg, -1
  %conv18 = zext i1 %cmp17 to i32
  %sub19 = sub nsw i32 0, %conv18
  %6 = load i64, i64* %bytes.addr, align 8
  %conv20 = trunc i64 %6 to i8
  %conv21 = sext i8 %conv20 to i32
  %mul22 = mul nsw i32 0, %conv21
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes23 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 20
  %8 = load i64, i64* %dst_bytes23, align 8
  %conv24 = trunc i64 %8 to i8
  %conv25 = sext i8 %conv24 to i32
  %add26 = add nsw i32 %mul22, %conv25
  %mul27 = mul nsw i32 0, %add26
  %add28 = add nsw i32 %mul27, 1
  %shl = shl i32 %add28, 30
  %sub29 = sub nsw i32 %shl, 1
  %mul30 = mul nsw i32 %sub29, 2
  %add31 = add nsw i32 %mul30, 1
  %sub32 = sub nsw i32 %sub19, %add31
  br label %cond.end

cond.false:                                       ; preds = %cond.true.1
  %9 = load i64, i64* %bytes.addr, align 8
  %conv33 = trunc i64 %9 to i8
  %conv34 = sext i8 %conv33 to i32
  %mul35 = mul nsw i32 0, %conv34
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes36 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 20
  %11 = load i64, i64* %dst_bytes36, align 8
  %conv37 = trunc i64 %11 to i8
  %conv38 = sext i8 %conv37 to i32
  %add39 = add nsw i32 %mul35, %conv38
  %mul40 = mul nsw i32 0, %add39
  %add41 = add nsw i32 %mul40, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.7
  %cond = phi i32 [ %sub32, %cond.true.7 ], [ %add41, %cond.false ]
  %cmp42 = icmp slt i32 %cond, 0
  br i1 %cmp42, label %cond.true.44, label %cond.false.155

cond.true.44:                                     ; preds = %cond.end
  %12 = load i64, i64* %bytes.addr, align 8
  %conv45 = trunc i64 %12 to i8
  %conv46 = sext i8 %conv45 to i32
  %cmp47 = icmp slt i32 %conv46, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.109

cond.true.49:                                     ; preds = %cond.true.44
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes50 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 20
  %14 = load i64, i64* %dst_bytes50, align 8
  %conv51 = trunc i64 %14 to i8
  %conv52 = sext i8 %conv51 to i32
  %15 = load i64, i64* %bytes.addr, align 8
  %conv53 = trunc i64 %15 to i8
  %conv54 = sext i8 %conv53 to i32
  %mul55 = mul nsw i32 0, %conv54
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes56 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 20
  %17 = load i64, i64* %dst_bytes56, align 8
  %conv57 = trunc i64 %17 to i8
  %conv58 = sext i8 %conv57 to i32
  %add59 = add nsw i32 %mul55, %conv58
  %mul60 = mul nsw i32 0, %add59
  %sub61 = sub nsw i32 %mul60, 1
  %cmp62 = icmp slt i32 %sub61, 0
  br i1 %cmp62, label %cond.true.64, label %cond.false.92

cond.true.64:                                     ; preds = %cond.true.49
  %18 = load i64, i64* %bytes.addr, align 8
  %conv65 = trunc i64 %18 to i8
  %conv66 = sext i8 %conv65 to i32
  %mul67 = mul nsw i32 0, %conv66
  %19 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes68 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %19, i32 0, i32 20
  %20 = load i64, i64* %dst_bytes68, align 8
  %conv69 = trunc i64 %20 to i8
  %conv70 = sext i8 %conv69 to i32
  %add71 = add nsw i32 %mul67, %conv70
  %mul72 = mul nsw i32 0, %add71
  %add73 = add nsw i32 %mul72, 0
  %neg74 = xor i32 %add73, -1
  %cmp75 = icmp eq i32 %neg74, -1
  %conv76 = zext i1 %cmp75 to i32
  %sub77 = sub nsw i32 0, %conv76
  %21 = load i64, i64* %bytes.addr, align 8
  %conv78 = trunc i64 %21 to i8
  %conv79 = sext i8 %conv78 to i32
  %mul80 = mul nsw i32 0, %conv79
  %22 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes81 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %22, i32 0, i32 20
  %23 = load i64, i64* %dst_bytes81, align 8
  %conv82 = trunc i64 %23 to i8
  %conv83 = sext i8 %conv82 to i32
  %add84 = add nsw i32 %mul80, %conv83
  %mul85 = mul nsw i32 0, %add84
  %add86 = add nsw i32 %mul85, 1
  %shl87 = shl i32 %add86, 30
  %sub88 = sub nsw i32 %shl87, 1
  %mul89 = mul nsw i32 %sub88, 2
  %add90 = add nsw i32 %mul89, 1
  %sub91 = sub nsw i32 %sub77, %add90
  br label %cond.end.102

cond.false.92:                                    ; preds = %cond.true.49
  %24 = load i64, i64* %bytes.addr, align 8
  %conv93 = trunc i64 %24 to i8
  %conv94 = sext i8 %conv93 to i32
  %mul95 = mul nsw i32 0, %conv94
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes96 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %25, i32 0, i32 20
  %26 = load i64, i64* %dst_bytes96, align 8
  %conv97 = trunc i64 %26 to i8
  %conv98 = sext i8 %conv97 to i32
  %add99 = add nsw i32 %mul95, %conv98
  %mul100 = mul nsw i32 0, %add99
  %add101 = add nsw i32 %mul100, 0
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.false.92, %cond.true.64
  %cond103 = phi i32 [ %sub91, %cond.true.64 ], [ %add101, %cond.false.92 ]
  %27 = load i64, i64* %bytes.addr, align 8
  %conv104 = trunc i64 %27 to i8
  %conv105 = sext i8 %conv104 to i32
  %sub106 = sub nsw i32 %cond103, %conv105
  %cmp107 = icmp slt i32 %conv52, %sub106
  br i1 %cmp107, label %cond.true.227, label %lor.lhs.false

cond.false.109:                                   ; preds = %cond.true.44
  %28 = load i64, i64* %bytes.addr, align 8
  %conv110 = trunc i64 %28 to i8
  %conv111 = sext i8 %conv110 to i32
  %mul112 = mul nsw i32 0, %conv111
  %29 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes113 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %29, i32 0, i32 20
  %30 = load i64, i64* %dst_bytes113, align 8
  %conv114 = trunc i64 %30 to i8
  %conv115 = sext i8 %conv114 to i32
  %add116 = add nsw i32 %mul112, %conv115
  %mul117 = mul nsw i32 0, %add116
  %sub118 = sub nsw i32 %mul117, 1
  %cmp119 = icmp slt i32 %sub118, 0
  br i1 %cmp119, label %cond.true.121, label %cond.false.135

cond.true.121:                                    ; preds = %cond.false.109
  %31 = load i64, i64* %bytes.addr, align 8
  %conv122 = trunc i64 %31 to i8
  %conv123 = sext i8 %conv122 to i32
  %mul124 = mul nsw i32 0, %conv123
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes125 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %32, i32 0, i32 20
  %33 = load i64, i64* %dst_bytes125, align 8
  %conv126 = trunc i64 %33 to i8
  %conv127 = sext i8 %conv126 to i32
  %add128 = add nsw i32 %mul124, %conv127
  %mul129 = mul nsw i32 0, %add128
  %add130 = add nsw i32 %mul129, 1
  %shl131 = shl i32 %add130, 30
  %sub132 = sub nsw i32 %shl131, 1
  %mul133 = mul nsw i32 %sub132, 2
  %add134 = add nsw i32 %mul133, 1
  br label %cond.end.145

cond.false.135:                                   ; preds = %cond.false.109
  %34 = load i64, i64* %bytes.addr, align 8
  %conv136 = trunc i64 %34 to i8
  %conv137 = sext i8 %conv136 to i32
  %mul138 = mul nsw i32 0, %conv137
  %35 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes139 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %35, i32 0, i32 20
  %36 = load i64, i64* %dst_bytes139, align 8
  %conv140 = trunc i64 %36 to i8
  %conv141 = sext i8 %conv140 to i32
  %add142 = add nsw i32 %mul138, %conv141
  %mul143 = mul nsw i32 0, %add142
  %sub144 = sub nsw i32 %mul143, 1
  br label %cond.end.145

cond.end.145:                                     ; preds = %cond.false.135, %cond.true.121
  %cond146 = phi i32 [ %add134, %cond.true.121 ], [ %sub144, %cond.false.135 ]
  %37 = load i64, i64* %bytes.addr, align 8
  %conv147 = trunc i64 %37 to i8
  %conv148 = sext i8 %conv147 to i32
  %sub149 = sub nsw i32 %cond146, %conv148
  %38 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes150 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %38, i32 0, i32 20
  %39 = load i64, i64* %dst_bytes150, align 8
  %conv151 = trunc i64 %39 to i8
  %conv152 = sext i8 %conv151 to i32
  %cmp153 = icmp slt i32 %sub149, %conv152
  br i1 %cmp153, label %cond.true.227, label %lor.lhs.false

cond.false.155:                                   ; preds = %cond.end
  %40 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes156 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %40, i32 0, i32 20
  %41 = load i64, i64* %dst_bytes156, align 8
  %conv157 = trunc i64 %41 to i8
  %conv158 = sext i8 %conv157 to i32
  %cmp159 = icmp slt i32 %conv158, 0
  br i1 %cmp159, label %cond.true.161, label %cond.false.172

cond.true.161:                                    ; preds = %cond.false.155
  %42 = load i64, i64* %bytes.addr, align 8
  %conv162 = trunc i64 %42 to i8
  %conv163 = sext i8 %conv162 to i32
  %43 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes164 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %43, i32 0, i32 20
  %44 = load i64, i64* %dst_bytes164, align 8
  %conv165 = trunc i64 %44 to i8
  %conv166 = sext i8 %conv165 to i32
  %45 = load i64, i64* %bytes.addr, align 8
  %conv167 = trunc i64 %45 to i8
  %conv168 = sext i8 %conv167 to i32
  %add169 = add nsw i32 %conv166, %conv168
  %cmp170 = icmp sle i32 %conv163, %add169
  br i1 %cmp170, label %cond.true.227, label %lor.lhs.false

cond.false.172:                                   ; preds = %cond.false.155
  %46 = load i64, i64* %bytes.addr, align 8
  %conv173 = trunc i64 %46 to i8
  %conv174 = sext i8 %conv173 to i32
  %cmp175 = icmp slt i32 %conv174, 0
  br i1 %cmp175, label %cond.true.177, label %cond.false.189

cond.true.177:                                    ; preds = %cond.false.172
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes178 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %47, i32 0, i32 20
  %48 = load i64, i64* %dst_bytes178, align 8
  %conv179 = trunc i64 %48 to i8
  %conv180 = sext i8 %conv179 to i32
  %49 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes181 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %49, i32 0, i32 20
  %50 = load i64, i64* %dst_bytes181, align 8
  %conv182 = trunc i64 %50 to i8
  %conv183 = sext i8 %conv182 to i32
  %51 = load i64, i64* %bytes.addr, align 8
  %conv184 = trunc i64 %51 to i8
  %conv185 = sext i8 %conv184 to i32
  %add186 = add nsw i32 %conv183, %conv185
  %cmp187 = icmp sle i32 %conv180, %add186
  br i1 %cmp187, label %cond.true.227, label %lor.lhs.false

cond.false.189:                                   ; preds = %cond.false.172
  %52 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes190 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %52, i32 0, i32 20
  %53 = load i64, i64* %dst_bytes190, align 8
  %conv191 = trunc i64 %53 to i8
  %conv192 = sext i8 %conv191 to i32
  %54 = load i64, i64* %bytes.addr, align 8
  %conv193 = trunc i64 %54 to i8
  %conv194 = sext i8 %conv193 to i32
  %add195 = add nsw i32 %conv192, %conv194
  %55 = load i64, i64* %bytes.addr, align 8
  %conv196 = trunc i64 %55 to i8
  %conv197 = sext i8 %conv196 to i32
  %cmp198 = icmp slt i32 %add195, %conv197
  br i1 %cmp198, label %cond.true.227, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.189, %cond.true.177, %cond.true.161, %cond.end.145, %cond.end.102
  %56 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes200 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %56, i32 0, i32 20
  %57 = load i64, i64* %dst_bytes200, align 8
  %conv201 = trunc i64 %57 to i8
  %conv202 = sext i8 %conv201 to i32
  %58 = load i64, i64* %bytes.addr, align 8
  %conv203 = trunc i64 %58 to i8
  %conv204 = sext i8 %conv203 to i32
  %add205 = add nsw i32 %conv202, %conv204
  %mul206 = mul nsw i32 0, %add205
  %sub207 = sub nsw i32 %mul206, 1
  %cmp208 = icmp slt i32 %sub207, 0
  br i1 %cmp208, label %land.lhs.true, label %lor.lhs.false.218

land.lhs.true:                                    ; preds = %lor.lhs.false
  %59 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes210 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %59, i32 0, i32 20
  %60 = load i64, i64* %dst_bytes210, align 8
  %conv211 = trunc i64 %60 to i8
  %conv212 = sext i8 %conv211 to i32
  %61 = load i64, i64* %bytes.addr, align 8
  %conv213 = trunc i64 %61 to i8
  %conv214 = sext i8 %conv213 to i32
  %add215 = add nsw i32 %conv212, %conv214
  %cmp216 = icmp slt i32 %add215, -128
  br i1 %cmp216, label %cond.true.227, label %lor.lhs.false.218

lor.lhs.false.218:                                ; preds = %land.lhs.true, %lor.lhs.false
  %62 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes219 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %62, i32 0, i32 20
  %63 = load i64, i64* %dst_bytes219, align 8
  %conv220 = trunc i64 %63 to i8
  %conv221 = sext i8 %conv220 to i32
  %64 = load i64, i64* %bytes.addr, align 8
  %conv222 = trunc i64 %64 to i8
  %conv223 = sext i8 %conv222 to i32
  %add224 = add nsw i32 %conv221, %conv223
  %cmp225 = icmp slt i32 127, %add224
  br i1 %cmp225, label %cond.true.227, label %cond.false.259

cond.true.227:                                    ; preds = %lor.lhs.false.218, %land.lhs.true, %cond.false.189, %cond.true.177, %cond.true.161, %cond.end.145, %cond.end.102
  %65 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes228 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %65, i32 0, i32 20
  %66 = load i64, i64* %dst_bytes228, align 8
  %conv229 = trunc i64 %66 to i8
  %conv230 = zext i8 %conv229 to i32
  %67 = load i64, i64* %bytes.addr, align 8
  %conv231 = trunc i64 %67 to i8
  %conv232 = zext i8 %conv231 to i32
  %add233 = add nsw i32 %conv230, %conv232
  %cmp234 = icmp sle i32 %add233, 127
  br i1 %cmp234, label %cond.true.236, label %cond.false.245

cond.true.236:                                    ; preds = %cond.true.227
  %68 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes237 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %68, i32 0, i32 20
  %69 = load i64, i64* %dst_bytes237, align 8
  %conv238 = trunc i64 %69 to i8
  %conv239 = zext i8 %conv238 to i32
  %70 = load i64, i64* %bytes.addr, align 8
  %conv240 = trunc i64 %70 to i8
  %conv241 = zext i8 %conv240 to i32
  %add242 = add nsw i32 %conv239, %conv241
  %conv243 = trunc i32 %add242 to i8
  %conv244 = sext i8 %conv243 to i32
  br label %cond.end.256

cond.false.245:                                   ; preds = %cond.true.227
  %71 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes246 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %71, i32 0, i32 20
  %72 = load i64, i64* %dst_bytes246, align 8
  %conv247 = trunc i64 %72 to i8
  %conv248 = zext i8 %conv247 to i32
  %73 = load i64, i64* %bytes.addr, align 8
  %conv249 = trunc i64 %73 to i8
  %conv250 = zext i8 %conv249 to i32
  %add251 = add nsw i32 %conv248, %conv250
  %sub252 = sub nsw i32 %add251, -128
  %conv253 = trunc i32 %sub252 to i8
  %conv254 = sext i8 %conv253 to i32
  %add255 = add nsw i32 %conv254, -128
  br label %cond.end.256

cond.end.256:                                     ; preds = %cond.false.245, %cond.true.236
  %cond257 = phi i32 [ %conv244, %cond.true.236 ], [ %add255, %cond.false.245 ]
  %conv258 = sext i32 %cond257 to i64
  store i64 %conv258, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.259:                                   ; preds = %lor.lhs.false.218
  %74 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes260 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %74, i32 0, i32 20
  %75 = load i64, i64* %dst_bytes260, align 8
  %conv261 = trunc i64 %75 to i8
  %conv262 = zext i8 %conv261 to i32
  %76 = load i64, i64* %bytes.addr, align 8
  %conv263 = trunc i64 %76 to i8
  %conv264 = zext i8 %conv263 to i32
  %add265 = add nsw i32 %conv262, %conv264
  %cmp266 = icmp sle i32 %add265, 127
  br i1 %cmp266, label %cond.true.268, label %cond.false.277

cond.true.268:                                    ; preds = %cond.false.259
  %77 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes269 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %77, i32 0, i32 20
  %78 = load i64, i64* %dst_bytes269, align 8
  %conv270 = trunc i64 %78 to i8
  %conv271 = zext i8 %conv270 to i32
  %79 = load i64, i64* %bytes.addr, align 8
  %conv272 = trunc i64 %79 to i8
  %conv273 = zext i8 %conv272 to i32
  %add274 = add nsw i32 %conv271, %conv273
  %conv275 = trunc i32 %add274 to i8
  %conv276 = sext i8 %conv275 to i32
  br label %cond.end.288

cond.false.277:                                   ; preds = %cond.false.259
  %80 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes278 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %80, i32 0, i32 20
  %81 = load i64, i64* %dst_bytes278, align 8
  %conv279 = trunc i64 %81 to i8
  %conv280 = zext i8 %conv279 to i32
  %82 = load i64, i64* %bytes.addr, align 8
  %conv281 = trunc i64 %82 to i8
  %conv282 = zext i8 %conv281 to i32
  %add283 = add nsw i32 %conv280, %conv282
  %sub284 = sub nsw i32 %add283, -128
  %conv285 = trunc i32 %sub284 to i8
  %conv286 = sext i8 %conv285 to i32
  %add287 = add nsw i32 %conv286, -128
  br label %cond.end.288

cond.end.288:                                     ; preds = %cond.false.277, %cond.true.268
  %cond289 = phi i32 [ %conv276, %cond.true.268 ], [ %add287, %cond.false.277 ]
  %conv290 = sext i32 %cond289 to i64
  store i64 %conv290, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.291:                                   ; preds = %cond.true
  %83 = load i64, i64* %bytes.addr, align 8
  %mul292 = mul nsw i64 0, %83
  %84 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes293 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %84, i32 0, i32 20
  %85 = load i64, i64* %dst_bytes293, align 8
  %add294 = add nsw i64 %mul292, %85
  %mul295 = mul nsw i64 0, %add294
  %sub296 = sub nsw i64 %mul295, 1
  %cmp297 = icmp slt i64 %sub296, 0
  br i1 %cmp297, label %cond.true.299, label %cond.false.320

cond.true.299:                                    ; preds = %cond.false.291
  %86 = load i64, i64* %bytes.addr, align 8
  %mul300 = mul nsw i64 0, %86
  %87 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes301 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %87, i32 0, i32 20
  %88 = load i64, i64* %dst_bytes301, align 8
  %add302 = add nsw i64 %mul300, %88
  %mul303 = mul nsw i64 0, %add302
  %add304 = add nsw i64 %mul303, 0
  %neg305 = xor i64 %add304, -1
  %cmp306 = icmp eq i64 %neg305, -1
  %conv307 = zext i1 %cmp306 to i32
  %sub308 = sub nsw i32 0, %conv307
  %conv309 = sext i32 %sub308 to i64
  %89 = load i64, i64* %bytes.addr, align 8
  %mul310 = mul nsw i64 0, %89
  %90 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes311 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %90, i32 0, i32 20
  %91 = load i64, i64* %dst_bytes311, align 8
  %add312 = add nsw i64 %mul310, %91
  %mul313 = mul nsw i64 0, %add312
  %add314 = add nsw i64 %mul313, 1
  %shl315 = shl i64 %add314, 62
  %sub316 = sub nsw i64 %shl315, 1
  %mul317 = mul nsw i64 %sub316, 2
  %add318 = add nsw i64 %mul317, 1
  %sub319 = sub nsw i64 %conv309, %add318
  br label %cond.end.326

cond.false.320:                                   ; preds = %cond.false.291
  %92 = load i64, i64* %bytes.addr, align 8
  %mul321 = mul nsw i64 0, %92
  %93 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes322 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %93, i32 0, i32 20
  %94 = load i64, i64* %dst_bytes322, align 8
  %add323 = add nsw i64 %mul321, %94
  %mul324 = mul nsw i64 0, %add323
  %add325 = add nsw i64 %mul324, 0
  br label %cond.end.326

cond.end.326:                                     ; preds = %cond.false.320, %cond.true.299
  %cond327 = phi i64 [ %sub319, %cond.true.299 ], [ %add325, %cond.false.320 ]
  %cmp328 = icmp slt i64 %cond327, 0
  br i1 %cmp328, label %cond.true.330, label %cond.false.404

cond.true.330:                                    ; preds = %cond.end.326
  %95 = load i64, i64* %bytes.addr, align 8
  %cmp331 = icmp slt i64 %95, 0
  br i1 %cmp331, label %cond.true.333, label %cond.false.374

cond.true.333:                                    ; preds = %cond.true.330
  %96 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes334 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %96, i32 0, i32 20
  %97 = load i64, i64* %dst_bytes334, align 8
  %98 = load i64, i64* %bytes.addr, align 8
  %mul335 = mul nsw i64 0, %98
  %99 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes336 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %99, i32 0, i32 20
  %100 = load i64, i64* %dst_bytes336, align 8
  %add337 = add nsw i64 %mul335, %100
  %mul338 = mul nsw i64 0, %add337
  %sub339 = sub nsw i64 %mul338, 1
  %cmp340 = icmp slt i64 %sub339, 0
  br i1 %cmp340, label %cond.true.342, label %cond.false.363

cond.true.342:                                    ; preds = %cond.true.333
  %101 = load i64, i64* %bytes.addr, align 8
  %mul343 = mul nsw i64 0, %101
  %102 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes344 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %102, i32 0, i32 20
  %103 = load i64, i64* %dst_bytes344, align 8
  %add345 = add nsw i64 %mul343, %103
  %mul346 = mul nsw i64 0, %add345
  %add347 = add nsw i64 %mul346, 0
  %neg348 = xor i64 %add347, -1
  %cmp349 = icmp eq i64 %neg348, -1
  %conv350 = zext i1 %cmp349 to i32
  %sub351 = sub nsw i32 0, %conv350
  %conv352 = sext i32 %sub351 to i64
  %104 = load i64, i64* %bytes.addr, align 8
  %mul353 = mul nsw i64 0, %104
  %105 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes354 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %105, i32 0, i32 20
  %106 = load i64, i64* %dst_bytes354, align 8
  %add355 = add nsw i64 %mul353, %106
  %mul356 = mul nsw i64 0, %add355
  %add357 = add nsw i64 %mul356, 1
  %shl358 = shl i64 %add357, 62
  %sub359 = sub nsw i64 %shl358, 1
  %mul360 = mul nsw i64 %sub359, 2
  %add361 = add nsw i64 %mul360, 1
  %sub362 = sub nsw i64 %conv352, %add361
  br label %cond.end.369

cond.false.363:                                   ; preds = %cond.true.333
  %107 = load i64, i64* %bytes.addr, align 8
  %mul364 = mul nsw i64 0, %107
  %108 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes365 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %108, i32 0, i32 20
  %109 = load i64, i64* %dst_bytes365, align 8
  %add366 = add nsw i64 %mul364, %109
  %mul367 = mul nsw i64 0, %add366
  %add368 = add nsw i64 %mul367, 0
  br label %cond.end.369

cond.end.369:                                     ; preds = %cond.false.363, %cond.true.342
  %cond370 = phi i64 [ %sub362, %cond.true.342 ], [ %add368, %cond.false.363 ]
  %110 = load i64, i64* %bytes.addr, align 8
  %sub371 = sub nsw i64 %cond370, %110
  %cmp372 = icmp slt i64 %97, %sub371
  br i1 %cmp372, label %cond.true.444, label %lor.lhs.false.427

cond.false.374:                                   ; preds = %cond.true.330
  %111 = load i64, i64* %bytes.addr, align 8
  %mul375 = mul nsw i64 0, %111
  %112 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes376 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %112, i32 0, i32 20
  %113 = load i64, i64* %dst_bytes376, align 8
  %add377 = add nsw i64 %mul375, %113
  %mul378 = mul nsw i64 0, %add377
  %sub379 = sub nsw i64 %mul378, 1
  %cmp380 = icmp slt i64 %sub379, 0
  br i1 %cmp380, label %cond.true.382, label %cond.false.392

cond.true.382:                                    ; preds = %cond.false.374
  %114 = load i64, i64* %bytes.addr, align 8
  %mul383 = mul nsw i64 0, %114
  %115 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes384 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %115, i32 0, i32 20
  %116 = load i64, i64* %dst_bytes384, align 8
  %add385 = add nsw i64 %mul383, %116
  %mul386 = mul nsw i64 0, %add385
  %add387 = add nsw i64 %mul386, 1
  %shl388 = shl i64 %add387, 62
  %sub389 = sub nsw i64 %shl388, 1
  %mul390 = mul nsw i64 %sub389, 2
  %add391 = add nsw i64 %mul390, 1
  br label %cond.end.398

cond.false.392:                                   ; preds = %cond.false.374
  %117 = load i64, i64* %bytes.addr, align 8
  %mul393 = mul nsw i64 0, %117
  %118 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes394 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %118, i32 0, i32 20
  %119 = load i64, i64* %dst_bytes394, align 8
  %add395 = add nsw i64 %mul393, %119
  %mul396 = mul nsw i64 0, %add395
  %sub397 = sub nsw i64 %mul396, 1
  br label %cond.end.398

cond.end.398:                                     ; preds = %cond.false.392, %cond.true.382
  %cond399 = phi i64 [ %add391, %cond.true.382 ], [ %sub397, %cond.false.392 ]
  %120 = load i64, i64* %bytes.addr, align 8
  %sub400 = sub nsw i64 %cond399, %120
  %121 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes401 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %121, i32 0, i32 20
  %122 = load i64, i64* %dst_bytes401, align 8
  %cmp402 = icmp slt i64 %sub400, %122
  br i1 %cmp402, label %cond.true.444, label %lor.lhs.false.427

cond.false.404:                                   ; preds = %cond.end.326
  %123 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes405 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %123, i32 0, i32 20
  %124 = load i64, i64* %dst_bytes405, align 8
  %cmp406 = icmp slt i64 %124, 0
  br i1 %cmp406, label %cond.true.408, label %cond.false.413

cond.true.408:                                    ; preds = %cond.false.404
  %125 = load i64, i64* %bytes.addr, align 8
  %126 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes409 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %126, i32 0, i32 20
  %127 = load i64, i64* %dst_bytes409, align 8
  %128 = load i64, i64* %bytes.addr, align 8
  %add410 = add nsw i64 %127, %128
  %cmp411 = icmp sle i64 %125, %add410
  br i1 %cmp411, label %cond.true.444, label %lor.lhs.false.427

cond.false.413:                                   ; preds = %cond.false.404
  %129 = load i64, i64* %bytes.addr, align 8
  %cmp414 = icmp slt i64 %129, 0
  br i1 %cmp414, label %cond.true.416, label %cond.false.422

cond.true.416:                                    ; preds = %cond.false.413
  %130 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes417 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %130, i32 0, i32 20
  %131 = load i64, i64* %dst_bytes417, align 8
  %132 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes418 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %132, i32 0, i32 20
  %133 = load i64, i64* %dst_bytes418, align 8
  %134 = load i64, i64* %bytes.addr, align 8
  %add419 = add nsw i64 %133, %134
  %cmp420 = icmp sle i64 %131, %add419
  br i1 %cmp420, label %cond.true.444, label %lor.lhs.false.427

cond.false.422:                                   ; preds = %cond.false.413
  %135 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes423 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %135, i32 0, i32 20
  %136 = load i64, i64* %dst_bytes423, align 8
  %137 = load i64, i64* %bytes.addr, align 8
  %add424 = add nsw i64 %136, %137
  %138 = load i64, i64* %bytes.addr, align 8
  %cmp425 = icmp slt i64 %add424, %138
  br i1 %cmp425, label %cond.true.444, label %lor.lhs.false.427

lor.lhs.false.427:                                ; preds = %cond.false.422, %cond.true.416, %cond.true.408, %cond.end.398, %cond.end.369
  %139 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes428 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %139, i32 0, i32 20
  %140 = load i64, i64* %dst_bytes428, align 8
  %141 = load i64, i64* %bytes.addr, align 8
  %add429 = add nsw i64 %140, %141
  %mul430 = mul nsw i64 0, %add429
  %sub431 = sub nsw i64 %mul430, 1
  %cmp432 = icmp slt i64 %sub431, 0
  br i1 %cmp432, label %land.lhs.true.434, label %lor.lhs.false.439

land.lhs.true.434:                                ; preds = %lor.lhs.false.427
  %142 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes435 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %142, i32 0, i32 20
  %143 = load i64, i64* %dst_bytes435, align 8
  %144 = load i64, i64* %bytes.addr, align 8
  %add436 = add nsw i64 %143, %144
  %cmp437 = icmp slt i64 %add436, -128
  br i1 %cmp437, label %cond.true.444, label %lor.lhs.false.439

lor.lhs.false.439:                                ; preds = %land.lhs.true.434, %lor.lhs.false.427
  %145 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes440 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %145, i32 0, i32 20
  %146 = load i64, i64* %dst_bytes440, align 8
  %147 = load i64, i64* %bytes.addr, align 8
  %add441 = add nsw i64 %146, %147
  %cmp442 = icmp slt i64 127, %add441
  br i1 %cmp442, label %cond.true.444, label %cond.false.476

cond.true.444:                                    ; preds = %lor.lhs.false.439, %land.lhs.true.434, %cond.false.422, %cond.true.416, %cond.true.408, %cond.end.398, %cond.end.369
  %148 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes445 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %148, i32 0, i32 20
  %149 = load i64, i64* %dst_bytes445, align 8
  %conv446 = trunc i64 %149 to i8
  %conv447 = zext i8 %conv446 to i32
  %150 = load i64, i64* %bytes.addr, align 8
  %conv448 = trunc i64 %150 to i8
  %conv449 = zext i8 %conv448 to i32
  %add450 = add nsw i32 %conv447, %conv449
  %cmp451 = icmp sle i32 %add450, 127
  br i1 %cmp451, label %cond.true.453, label %cond.false.462

cond.true.453:                                    ; preds = %cond.true.444
  %151 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes454 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %151, i32 0, i32 20
  %152 = load i64, i64* %dst_bytes454, align 8
  %conv455 = trunc i64 %152 to i8
  %conv456 = zext i8 %conv455 to i32
  %153 = load i64, i64* %bytes.addr, align 8
  %conv457 = trunc i64 %153 to i8
  %conv458 = zext i8 %conv457 to i32
  %add459 = add nsw i32 %conv456, %conv458
  %conv460 = trunc i32 %add459 to i8
  %conv461 = sext i8 %conv460 to i32
  br label %cond.end.473

cond.false.462:                                   ; preds = %cond.true.444
  %154 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes463 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %154, i32 0, i32 20
  %155 = load i64, i64* %dst_bytes463, align 8
  %conv464 = trunc i64 %155 to i8
  %conv465 = zext i8 %conv464 to i32
  %156 = load i64, i64* %bytes.addr, align 8
  %conv466 = trunc i64 %156 to i8
  %conv467 = zext i8 %conv466 to i32
  %add468 = add nsw i32 %conv465, %conv467
  %sub469 = sub nsw i32 %add468, -128
  %conv470 = trunc i32 %sub469 to i8
  %conv471 = sext i8 %conv470 to i32
  %add472 = add nsw i32 %conv471, -128
  br label %cond.end.473

cond.end.473:                                     ; preds = %cond.false.462, %cond.true.453
  %cond474 = phi i32 [ %conv461, %cond.true.453 ], [ %add472, %cond.false.462 ]
  %conv475 = sext i32 %cond474 to i64
  store i64 %conv475, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.476:                                   ; preds = %lor.lhs.false.439
  %157 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes477 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %157, i32 0, i32 20
  %158 = load i64, i64* %dst_bytes477, align 8
  %conv478 = trunc i64 %158 to i8
  %conv479 = zext i8 %conv478 to i32
  %159 = load i64, i64* %bytes.addr, align 8
  %conv480 = trunc i64 %159 to i8
  %conv481 = zext i8 %conv480 to i32
  %add482 = add nsw i32 %conv479, %conv481
  %cmp483 = icmp sle i32 %add482, 127
  br i1 %cmp483, label %cond.true.485, label %cond.false.494

cond.true.485:                                    ; preds = %cond.false.476
  %160 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes486 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %160, i32 0, i32 20
  %161 = load i64, i64* %dst_bytes486, align 8
  %conv487 = trunc i64 %161 to i8
  %conv488 = zext i8 %conv487 to i32
  %162 = load i64, i64* %bytes.addr, align 8
  %conv489 = trunc i64 %162 to i8
  %conv490 = zext i8 %conv489 to i32
  %add491 = add nsw i32 %conv488, %conv490
  %conv492 = trunc i32 %add491 to i8
  %conv493 = sext i8 %conv492 to i32
  br label %cond.end.505

cond.false.494:                                   ; preds = %cond.false.476
  %163 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes495 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %163, i32 0, i32 20
  %164 = load i64, i64* %dst_bytes495, align 8
  %conv496 = trunc i64 %164 to i8
  %conv497 = zext i8 %conv496 to i32
  %165 = load i64, i64* %bytes.addr, align 8
  %conv498 = trunc i64 %165 to i8
  %conv499 = zext i8 %conv498 to i32
  %add500 = add nsw i32 %conv497, %conv499
  %sub501 = sub nsw i32 %add500, -128
  %conv502 = trunc i32 %sub501 to i8
  %conv503 = sext i8 %conv502 to i32
  %add504 = add nsw i32 %conv503, -128
  br label %cond.end.505

cond.end.505:                                     ; preds = %cond.false.494, %cond.true.485
  %cond506 = phi i32 [ %conv493, %cond.true.485 ], [ %add504, %cond.false.494 ]
  %conv507 = sext i32 %cond506 to i64
  store i64 %conv507, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.508:                                   ; preds = %entry
  br i1 false, label %cond.true.509, label %cond.false.1030

cond.true.509:                                    ; preds = %cond.false.508
  br i1 false, label %cond.true.510, label %cond.false.813

cond.true.510:                                    ; preds = %cond.true.509
  %166 = load i64, i64* %bytes.addr, align 8
  %conv511 = trunc i64 %166 to i16
  %conv512 = sext i16 %conv511 to i32
  %mul513 = mul nsw i32 0, %conv512
  %167 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes514 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %167, i32 0, i32 20
  %168 = load i64, i64* %dst_bytes514, align 8
  %conv515 = trunc i64 %168 to i16
  %conv516 = sext i16 %conv515 to i32
  %add517 = add nsw i32 %mul513, %conv516
  %mul518 = mul nsw i32 0, %add517
  %sub519 = sub nsw i32 %mul518, 1
  %cmp520 = icmp slt i32 %sub519, 0
  br i1 %cmp520, label %cond.true.522, label %cond.false.550

cond.true.522:                                    ; preds = %cond.true.510
  %169 = load i64, i64* %bytes.addr, align 8
  %conv523 = trunc i64 %169 to i16
  %conv524 = sext i16 %conv523 to i32
  %mul525 = mul nsw i32 0, %conv524
  %170 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes526 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %170, i32 0, i32 20
  %171 = load i64, i64* %dst_bytes526, align 8
  %conv527 = trunc i64 %171 to i16
  %conv528 = sext i16 %conv527 to i32
  %add529 = add nsw i32 %mul525, %conv528
  %mul530 = mul nsw i32 0, %add529
  %add531 = add nsw i32 %mul530, 0
  %neg532 = xor i32 %add531, -1
  %cmp533 = icmp eq i32 %neg532, -1
  %conv534 = zext i1 %cmp533 to i32
  %sub535 = sub nsw i32 0, %conv534
  %172 = load i64, i64* %bytes.addr, align 8
  %conv536 = trunc i64 %172 to i16
  %conv537 = sext i16 %conv536 to i32
  %mul538 = mul nsw i32 0, %conv537
  %173 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes539 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %173, i32 0, i32 20
  %174 = load i64, i64* %dst_bytes539, align 8
  %conv540 = trunc i64 %174 to i16
  %conv541 = sext i16 %conv540 to i32
  %add542 = add nsw i32 %mul538, %conv541
  %mul543 = mul nsw i32 0, %add542
  %add544 = add nsw i32 %mul543, 1
  %shl545 = shl i32 %add544, 30
  %sub546 = sub nsw i32 %shl545, 1
  %mul547 = mul nsw i32 %sub546, 2
  %add548 = add nsw i32 %mul547, 1
  %sub549 = sub nsw i32 %sub535, %add548
  br label %cond.end.560

cond.false.550:                                   ; preds = %cond.true.510
  %175 = load i64, i64* %bytes.addr, align 8
  %conv551 = trunc i64 %175 to i16
  %conv552 = sext i16 %conv551 to i32
  %mul553 = mul nsw i32 0, %conv552
  %176 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes554 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %176, i32 0, i32 20
  %177 = load i64, i64* %dst_bytes554, align 8
  %conv555 = trunc i64 %177 to i16
  %conv556 = sext i16 %conv555 to i32
  %add557 = add nsw i32 %mul553, %conv556
  %mul558 = mul nsw i32 0, %add557
  %add559 = add nsw i32 %mul558, 0
  br label %cond.end.560

cond.end.560:                                     ; preds = %cond.false.550, %cond.true.522
  %cond561 = phi i32 [ %sub549, %cond.true.522 ], [ %add559, %cond.false.550 ]
  %cmp562 = icmp slt i32 %cond561, 0
  br i1 %cmp562, label %cond.true.564, label %cond.false.675

cond.true.564:                                    ; preds = %cond.end.560
  %178 = load i64, i64* %bytes.addr, align 8
  %conv565 = trunc i64 %178 to i16
  %conv566 = sext i16 %conv565 to i32
  %cmp567 = icmp slt i32 %conv566, 0
  br i1 %cmp567, label %cond.true.569, label %cond.false.629

cond.true.569:                                    ; preds = %cond.true.564
  %179 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes570 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %179, i32 0, i32 20
  %180 = load i64, i64* %dst_bytes570, align 8
  %conv571 = trunc i64 %180 to i16
  %conv572 = sext i16 %conv571 to i32
  %181 = load i64, i64* %bytes.addr, align 8
  %conv573 = trunc i64 %181 to i16
  %conv574 = sext i16 %conv573 to i32
  %mul575 = mul nsw i32 0, %conv574
  %182 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes576 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %182, i32 0, i32 20
  %183 = load i64, i64* %dst_bytes576, align 8
  %conv577 = trunc i64 %183 to i16
  %conv578 = sext i16 %conv577 to i32
  %add579 = add nsw i32 %mul575, %conv578
  %mul580 = mul nsw i32 0, %add579
  %sub581 = sub nsw i32 %mul580, 1
  %cmp582 = icmp slt i32 %sub581, 0
  br i1 %cmp582, label %cond.true.584, label %cond.false.612

cond.true.584:                                    ; preds = %cond.true.569
  %184 = load i64, i64* %bytes.addr, align 8
  %conv585 = trunc i64 %184 to i16
  %conv586 = sext i16 %conv585 to i32
  %mul587 = mul nsw i32 0, %conv586
  %185 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes588 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %185, i32 0, i32 20
  %186 = load i64, i64* %dst_bytes588, align 8
  %conv589 = trunc i64 %186 to i16
  %conv590 = sext i16 %conv589 to i32
  %add591 = add nsw i32 %mul587, %conv590
  %mul592 = mul nsw i32 0, %add591
  %add593 = add nsw i32 %mul592, 0
  %neg594 = xor i32 %add593, -1
  %cmp595 = icmp eq i32 %neg594, -1
  %conv596 = zext i1 %cmp595 to i32
  %sub597 = sub nsw i32 0, %conv596
  %187 = load i64, i64* %bytes.addr, align 8
  %conv598 = trunc i64 %187 to i16
  %conv599 = sext i16 %conv598 to i32
  %mul600 = mul nsw i32 0, %conv599
  %188 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes601 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %188, i32 0, i32 20
  %189 = load i64, i64* %dst_bytes601, align 8
  %conv602 = trunc i64 %189 to i16
  %conv603 = sext i16 %conv602 to i32
  %add604 = add nsw i32 %mul600, %conv603
  %mul605 = mul nsw i32 0, %add604
  %add606 = add nsw i32 %mul605, 1
  %shl607 = shl i32 %add606, 30
  %sub608 = sub nsw i32 %shl607, 1
  %mul609 = mul nsw i32 %sub608, 2
  %add610 = add nsw i32 %mul609, 1
  %sub611 = sub nsw i32 %sub597, %add610
  br label %cond.end.622

cond.false.612:                                   ; preds = %cond.true.569
  %190 = load i64, i64* %bytes.addr, align 8
  %conv613 = trunc i64 %190 to i16
  %conv614 = sext i16 %conv613 to i32
  %mul615 = mul nsw i32 0, %conv614
  %191 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes616 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %191, i32 0, i32 20
  %192 = load i64, i64* %dst_bytes616, align 8
  %conv617 = trunc i64 %192 to i16
  %conv618 = sext i16 %conv617 to i32
  %add619 = add nsw i32 %mul615, %conv618
  %mul620 = mul nsw i32 0, %add619
  %add621 = add nsw i32 %mul620, 0
  br label %cond.end.622

cond.end.622:                                     ; preds = %cond.false.612, %cond.true.584
  %cond623 = phi i32 [ %sub611, %cond.true.584 ], [ %add621, %cond.false.612 ]
  %193 = load i64, i64* %bytes.addr, align 8
  %conv624 = trunc i64 %193 to i16
  %conv625 = sext i16 %conv624 to i32
  %sub626 = sub nsw i32 %cond623, %conv625
  %cmp627 = icmp slt i32 %conv572, %sub626
  br i1 %cmp627, label %cond.true.749, label %lor.lhs.false.720

cond.false.629:                                   ; preds = %cond.true.564
  %194 = load i64, i64* %bytes.addr, align 8
  %conv630 = trunc i64 %194 to i16
  %conv631 = sext i16 %conv630 to i32
  %mul632 = mul nsw i32 0, %conv631
  %195 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes633 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %195, i32 0, i32 20
  %196 = load i64, i64* %dst_bytes633, align 8
  %conv634 = trunc i64 %196 to i16
  %conv635 = sext i16 %conv634 to i32
  %add636 = add nsw i32 %mul632, %conv635
  %mul637 = mul nsw i32 0, %add636
  %sub638 = sub nsw i32 %mul637, 1
  %cmp639 = icmp slt i32 %sub638, 0
  br i1 %cmp639, label %cond.true.641, label %cond.false.655

cond.true.641:                                    ; preds = %cond.false.629
  %197 = load i64, i64* %bytes.addr, align 8
  %conv642 = trunc i64 %197 to i16
  %conv643 = sext i16 %conv642 to i32
  %mul644 = mul nsw i32 0, %conv643
  %198 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes645 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %198, i32 0, i32 20
  %199 = load i64, i64* %dst_bytes645, align 8
  %conv646 = trunc i64 %199 to i16
  %conv647 = sext i16 %conv646 to i32
  %add648 = add nsw i32 %mul644, %conv647
  %mul649 = mul nsw i32 0, %add648
  %add650 = add nsw i32 %mul649, 1
  %shl651 = shl i32 %add650, 30
  %sub652 = sub nsw i32 %shl651, 1
  %mul653 = mul nsw i32 %sub652, 2
  %add654 = add nsw i32 %mul653, 1
  br label %cond.end.665

cond.false.655:                                   ; preds = %cond.false.629
  %200 = load i64, i64* %bytes.addr, align 8
  %conv656 = trunc i64 %200 to i16
  %conv657 = sext i16 %conv656 to i32
  %mul658 = mul nsw i32 0, %conv657
  %201 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes659 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %201, i32 0, i32 20
  %202 = load i64, i64* %dst_bytes659, align 8
  %conv660 = trunc i64 %202 to i16
  %conv661 = sext i16 %conv660 to i32
  %add662 = add nsw i32 %mul658, %conv661
  %mul663 = mul nsw i32 0, %add662
  %sub664 = sub nsw i32 %mul663, 1
  br label %cond.end.665

cond.end.665:                                     ; preds = %cond.false.655, %cond.true.641
  %cond666 = phi i32 [ %add654, %cond.true.641 ], [ %sub664, %cond.false.655 ]
  %203 = load i64, i64* %bytes.addr, align 8
  %conv667 = trunc i64 %203 to i16
  %conv668 = sext i16 %conv667 to i32
  %sub669 = sub nsw i32 %cond666, %conv668
  %204 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes670 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %204, i32 0, i32 20
  %205 = load i64, i64* %dst_bytes670, align 8
  %conv671 = trunc i64 %205 to i16
  %conv672 = sext i16 %conv671 to i32
  %cmp673 = icmp slt i32 %sub669, %conv672
  br i1 %cmp673, label %cond.true.749, label %lor.lhs.false.720

cond.false.675:                                   ; preds = %cond.end.560
  %206 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes676 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %206, i32 0, i32 20
  %207 = load i64, i64* %dst_bytes676, align 8
  %conv677 = trunc i64 %207 to i16
  %conv678 = sext i16 %conv677 to i32
  %cmp679 = icmp slt i32 %conv678, 0
  br i1 %cmp679, label %cond.true.681, label %cond.false.692

cond.true.681:                                    ; preds = %cond.false.675
  %208 = load i64, i64* %bytes.addr, align 8
  %conv682 = trunc i64 %208 to i16
  %conv683 = sext i16 %conv682 to i32
  %209 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes684 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %209, i32 0, i32 20
  %210 = load i64, i64* %dst_bytes684, align 8
  %conv685 = trunc i64 %210 to i16
  %conv686 = sext i16 %conv685 to i32
  %211 = load i64, i64* %bytes.addr, align 8
  %conv687 = trunc i64 %211 to i16
  %conv688 = sext i16 %conv687 to i32
  %add689 = add nsw i32 %conv686, %conv688
  %cmp690 = icmp sle i32 %conv683, %add689
  br i1 %cmp690, label %cond.true.749, label %lor.lhs.false.720

cond.false.692:                                   ; preds = %cond.false.675
  %212 = load i64, i64* %bytes.addr, align 8
  %conv693 = trunc i64 %212 to i16
  %conv694 = sext i16 %conv693 to i32
  %cmp695 = icmp slt i32 %conv694, 0
  br i1 %cmp695, label %cond.true.697, label %cond.false.709

cond.true.697:                                    ; preds = %cond.false.692
  %213 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes698 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %213, i32 0, i32 20
  %214 = load i64, i64* %dst_bytes698, align 8
  %conv699 = trunc i64 %214 to i16
  %conv700 = sext i16 %conv699 to i32
  %215 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes701 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %215, i32 0, i32 20
  %216 = load i64, i64* %dst_bytes701, align 8
  %conv702 = trunc i64 %216 to i16
  %conv703 = sext i16 %conv702 to i32
  %217 = load i64, i64* %bytes.addr, align 8
  %conv704 = trunc i64 %217 to i16
  %conv705 = sext i16 %conv704 to i32
  %add706 = add nsw i32 %conv703, %conv705
  %cmp707 = icmp sle i32 %conv700, %add706
  br i1 %cmp707, label %cond.true.749, label %lor.lhs.false.720

cond.false.709:                                   ; preds = %cond.false.692
  %218 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes710 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %218, i32 0, i32 20
  %219 = load i64, i64* %dst_bytes710, align 8
  %conv711 = trunc i64 %219 to i16
  %conv712 = sext i16 %conv711 to i32
  %220 = load i64, i64* %bytes.addr, align 8
  %conv713 = trunc i64 %220 to i16
  %conv714 = sext i16 %conv713 to i32
  %add715 = add nsw i32 %conv712, %conv714
  %221 = load i64, i64* %bytes.addr, align 8
  %conv716 = trunc i64 %221 to i16
  %conv717 = sext i16 %conv716 to i32
  %cmp718 = icmp slt i32 %add715, %conv717
  br i1 %cmp718, label %cond.true.749, label %lor.lhs.false.720

lor.lhs.false.720:                                ; preds = %cond.false.709, %cond.true.697, %cond.true.681, %cond.end.665, %cond.end.622
  %222 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes721 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %222, i32 0, i32 20
  %223 = load i64, i64* %dst_bytes721, align 8
  %conv722 = trunc i64 %223 to i16
  %conv723 = sext i16 %conv722 to i32
  %224 = load i64, i64* %bytes.addr, align 8
  %conv724 = trunc i64 %224 to i16
  %conv725 = sext i16 %conv724 to i32
  %add726 = add nsw i32 %conv723, %conv725
  %mul727 = mul nsw i32 0, %add726
  %sub728 = sub nsw i32 %mul727, 1
  %cmp729 = icmp slt i32 %sub728, 0
  br i1 %cmp729, label %land.lhs.true.731, label %lor.lhs.false.740

land.lhs.true.731:                                ; preds = %lor.lhs.false.720
  %225 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes732 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %225, i32 0, i32 20
  %226 = load i64, i64* %dst_bytes732, align 8
  %conv733 = trunc i64 %226 to i16
  %conv734 = sext i16 %conv733 to i32
  %227 = load i64, i64* %bytes.addr, align 8
  %conv735 = trunc i64 %227 to i16
  %conv736 = sext i16 %conv735 to i32
  %add737 = add nsw i32 %conv734, %conv736
  %cmp738 = icmp slt i32 %add737, -32768
  br i1 %cmp738, label %cond.true.749, label %lor.lhs.false.740

lor.lhs.false.740:                                ; preds = %land.lhs.true.731, %lor.lhs.false.720
  %228 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes741 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %228, i32 0, i32 20
  %229 = load i64, i64* %dst_bytes741, align 8
  %conv742 = trunc i64 %229 to i16
  %conv743 = sext i16 %conv742 to i32
  %230 = load i64, i64* %bytes.addr, align 8
  %conv744 = trunc i64 %230 to i16
  %conv745 = sext i16 %conv744 to i32
  %add746 = add nsw i32 %conv743, %conv745
  %cmp747 = icmp slt i32 32767, %add746
  br i1 %cmp747, label %cond.true.749, label %cond.false.781

cond.true.749:                                    ; preds = %lor.lhs.false.740, %land.lhs.true.731, %cond.false.709, %cond.true.697, %cond.true.681, %cond.end.665, %cond.end.622
  %231 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes750 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %231, i32 0, i32 20
  %232 = load i64, i64* %dst_bytes750, align 8
  %conv751 = trunc i64 %232 to i16
  %conv752 = zext i16 %conv751 to i32
  %233 = load i64, i64* %bytes.addr, align 8
  %conv753 = trunc i64 %233 to i16
  %conv754 = zext i16 %conv753 to i32
  %add755 = add nsw i32 %conv752, %conv754
  %cmp756 = icmp sle i32 %add755, 32767
  br i1 %cmp756, label %cond.true.758, label %cond.false.767

cond.true.758:                                    ; preds = %cond.true.749
  %234 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes759 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %234, i32 0, i32 20
  %235 = load i64, i64* %dst_bytes759, align 8
  %conv760 = trunc i64 %235 to i16
  %conv761 = zext i16 %conv760 to i32
  %236 = load i64, i64* %bytes.addr, align 8
  %conv762 = trunc i64 %236 to i16
  %conv763 = zext i16 %conv762 to i32
  %add764 = add nsw i32 %conv761, %conv763
  %conv765 = trunc i32 %add764 to i16
  %conv766 = sext i16 %conv765 to i32
  br label %cond.end.778

cond.false.767:                                   ; preds = %cond.true.749
  %237 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes768 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %237, i32 0, i32 20
  %238 = load i64, i64* %dst_bytes768, align 8
  %conv769 = trunc i64 %238 to i16
  %conv770 = zext i16 %conv769 to i32
  %239 = load i64, i64* %bytes.addr, align 8
  %conv771 = trunc i64 %239 to i16
  %conv772 = zext i16 %conv771 to i32
  %add773 = add nsw i32 %conv770, %conv772
  %sub774 = sub nsw i32 %add773, -32768
  %conv775 = trunc i32 %sub774 to i16
  %conv776 = sext i16 %conv775 to i32
  %add777 = add nsw i32 %conv776, -32768
  br label %cond.end.778

cond.end.778:                                     ; preds = %cond.false.767, %cond.true.758
  %cond779 = phi i32 [ %conv766, %cond.true.758 ], [ %add777, %cond.false.767 ]
  %conv780 = sext i32 %cond779 to i64
  store i64 %conv780, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.781:                                   ; preds = %lor.lhs.false.740
  %240 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes782 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %240, i32 0, i32 20
  %241 = load i64, i64* %dst_bytes782, align 8
  %conv783 = trunc i64 %241 to i16
  %conv784 = zext i16 %conv783 to i32
  %242 = load i64, i64* %bytes.addr, align 8
  %conv785 = trunc i64 %242 to i16
  %conv786 = zext i16 %conv785 to i32
  %add787 = add nsw i32 %conv784, %conv786
  %cmp788 = icmp sle i32 %add787, 32767
  br i1 %cmp788, label %cond.true.790, label %cond.false.799

cond.true.790:                                    ; preds = %cond.false.781
  %243 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes791 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %243, i32 0, i32 20
  %244 = load i64, i64* %dst_bytes791, align 8
  %conv792 = trunc i64 %244 to i16
  %conv793 = zext i16 %conv792 to i32
  %245 = load i64, i64* %bytes.addr, align 8
  %conv794 = trunc i64 %245 to i16
  %conv795 = zext i16 %conv794 to i32
  %add796 = add nsw i32 %conv793, %conv795
  %conv797 = trunc i32 %add796 to i16
  %conv798 = sext i16 %conv797 to i32
  br label %cond.end.810

cond.false.799:                                   ; preds = %cond.false.781
  %246 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes800 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %246, i32 0, i32 20
  %247 = load i64, i64* %dst_bytes800, align 8
  %conv801 = trunc i64 %247 to i16
  %conv802 = zext i16 %conv801 to i32
  %248 = load i64, i64* %bytes.addr, align 8
  %conv803 = trunc i64 %248 to i16
  %conv804 = zext i16 %conv803 to i32
  %add805 = add nsw i32 %conv802, %conv804
  %sub806 = sub nsw i32 %add805, -32768
  %conv807 = trunc i32 %sub806 to i16
  %conv808 = sext i16 %conv807 to i32
  %add809 = add nsw i32 %conv808, -32768
  br label %cond.end.810

cond.end.810:                                     ; preds = %cond.false.799, %cond.true.790
  %cond811 = phi i32 [ %conv798, %cond.true.790 ], [ %add809, %cond.false.799 ]
  %conv812 = sext i32 %cond811 to i64
  store i64 %conv812, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.813:                                   ; preds = %cond.true.509
  %249 = load i64, i64* %bytes.addr, align 8
  %mul814 = mul nsw i64 0, %249
  %250 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes815 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %250, i32 0, i32 20
  %251 = load i64, i64* %dst_bytes815, align 8
  %add816 = add nsw i64 %mul814, %251
  %mul817 = mul nsw i64 0, %add816
  %sub818 = sub nsw i64 %mul817, 1
  %cmp819 = icmp slt i64 %sub818, 0
  br i1 %cmp819, label %cond.true.821, label %cond.false.842

cond.true.821:                                    ; preds = %cond.false.813
  %252 = load i64, i64* %bytes.addr, align 8
  %mul822 = mul nsw i64 0, %252
  %253 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes823 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %253, i32 0, i32 20
  %254 = load i64, i64* %dst_bytes823, align 8
  %add824 = add nsw i64 %mul822, %254
  %mul825 = mul nsw i64 0, %add824
  %add826 = add nsw i64 %mul825, 0
  %neg827 = xor i64 %add826, -1
  %cmp828 = icmp eq i64 %neg827, -1
  %conv829 = zext i1 %cmp828 to i32
  %sub830 = sub nsw i32 0, %conv829
  %conv831 = sext i32 %sub830 to i64
  %255 = load i64, i64* %bytes.addr, align 8
  %mul832 = mul nsw i64 0, %255
  %256 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes833 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %256, i32 0, i32 20
  %257 = load i64, i64* %dst_bytes833, align 8
  %add834 = add nsw i64 %mul832, %257
  %mul835 = mul nsw i64 0, %add834
  %add836 = add nsw i64 %mul835, 1
  %shl837 = shl i64 %add836, 62
  %sub838 = sub nsw i64 %shl837, 1
  %mul839 = mul nsw i64 %sub838, 2
  %add840 = add nsw i64 %mul839, 1
  %sub841 = sub nsw i64 %conv831, %add840
  br label %cond.end.848

cond.false.842:                                   ; preds = %cond.false.813
  %258 = load i64, i64* %bytes.addr, align 8
  %mul843 = mul nsw i64 0, %258
  %259 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes844 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %259, i32 0, i32 20
  %260 = load i64, i64* %dst_bytes844, align 8
  %add845 = add nsw i64 %mul843, %260
  %mul846 = mul nsw i64 0, %add845
  %add847 = add nsw i64 %mul846, 0
  br label %cond.end.848

cond.end.848:                                     ; preds = %cond.false.842, %cond.true.821
  %cond849 = phi i64 [ %sub841, %cond.true.821 ], [ %add847, %cond.false.842 ]
  %cmp850 = icmp slt i64 %cond849, 0
  br i1 %cmp850, label %cond.true.852, label %cond.false.926

cond.true.852:                                    ; preds = %cond.end.848
  %261 = load i64, i64* %bytes.addr, align 8
  %cmp853 = icmp slt i64 %261, 0
  br i1 %cmp853, label %cond.true.855, label %cond.false.896

cond.true.855:                                    ; preds = %cond.true.852
  %262 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes856 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %262, i32 0, i32 20
  %263 = load i64, i64* %dst_bytes856, align 8
  %264 = load i64, i64* %bytes.addr, align 8
  %mul857 = mul nsw i64 0, %264
  %265 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes858 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %265, i32 0, i32 20
  %266 = load i64, i64* %dst_bytes858, align 8
  %add859 = add nsw i64 %mul857, %266
  %mul860 = mul nsw i64 0, %add859
  %sub861 = sub nsw i64 %mul860, 1
  %cmp862 = icmp slt i64 %sub861, 0
  br i1 %cmp862, label %cond.true.864, label %cond.false.885

cond.true.864:                                    ; preds = %cond.true.855
  %267 = load i64, i64* %bytes.addr, align 8
  %mul865 = mul nsw i64 0, %267
  %268 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes866 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %268, i32 0, i32 20
  %269 = load i64, i64* %dst_bytes866, align 8
  %add867 = add nsw i64 %mul865, %269
  %mul868 = mul nsw i64 0, %add867
  %add869 = add nsw i64 %mul868, 0
  %neg870 = xor i64 %add869, -1
  %cmp871 = icmp eq i64 %neg870, -1
  %conv872 = zext i1 %cmp871 to i32
  %sub873 = sub nsw i32 0, %conv872
  %conv874 = sext i32 %sub873 to i64
  %270 = load i64, i64* %bytes.addr, align 8
  %mul875 = mul nsw i64 0, %270
  %271 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes876 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %271, i32 0, i32 20
  %272 = load i64, i64* %dst_bytes876, align 8
  %add877 = add nsw i64 %mul875, %272
  %mul878 = mul nsw i64 0, %add877
  %add879 = add nsw i64 %mul878, 1
  %shl880 = shl i64 %add879, 62
  %sub881 = sub nsw i64 %shl880, 1
  %mul882 = mul nsw i64 %sub881, 2
  %add883 = add nsw i64 %mul882, 1
  %sub884 = sub nsw i64 %conv874, %add883
  br label %cond.end.891

cond.false.885:                                   ; preds = %cond.true.855
  %273 = load i64, i64* %bytes.addr, align 8
  %mul886 = mul nsw i64 0, %273
  %274 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes887 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %274, i32 0, i32 20
  %275 = load i64, i64* %dst_bytes887, align 8
  %add888 = add nsw i64 %mul886, %275
  %mul889 = mul nsw i64 0, %add888
  %add890 = add nsw i64 %mul889, 0
  br label %cond.end.891

cond.end.891:                                     ; preds = %cond.false.885, %cond.true.864
  %cond892 = phi i64 [ %sub884, %cond.true.864 ], [ %add890, %cond.false.885 ]
  %276 = load i64, i64* %bytes.addr, align 8
  %sub893 = sub nsw i64 %cond892, %276
  %cmp894 = icmp slt i64 %263, %sub893
  br i1 %cmp894, label %cond.true.966, label %lor.lhs.false.949

cond.false.896:                                   ; preds = %cond.true.852
  %277 = load i64, i64* %bytes.addr, align 8
  %mul897 = mul nsw i64 0, %277
  %278 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes898 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %278, i32 0, i32 20
  %279 = load i64, i64* %dst_bytes898, align 8
  %add899 = add nsw i64 %mul897, %279
  %mul900 = mul nsw i64 0, %add899
  %sub901 = sub nsw i64 %mul900, 1
  %cmp902 = icmp slt i64 %sub901, 0
  br i1 %cmp902, label %cond.true.904, label %cond.false.914

cond.true.904:                                    ; preds = %cond.false.896
  %280 = load i64, i64* %bytes.addr, align 8
  %mul905 = mul nsw i64 0, %280
  %281 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes906 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %281, i32 0, i32 20
  %282 = load i64, i64* %dst_bytes906, align 8
  %add907 = add nsw i64 %mul905, %282
  %mul908 = mul nsw i64 0, %add907
  %add909 = add nsw i64 %mul908, 1
  %shl910 = shl i64 %add909, 62
  %sub911 = sub nsw i64 %shl910, 1
  %mul912 = mul nsw i64 %sub911, 2
  %add913 = add nsw i64 %mul912, 1
  br label %cond.end.920

cond.false.914:                                   ; preds = %cond.false.896
  %283 = load i64, i64* %bytes.addr, align 8
  %mul915 = mul nsw i64 0, %283
  %284 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes916 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %284, i32 0, i32 20
  %285 = load i64, i64* %dst_bytes916, align 8
  %add917 = add nsw i64 %mul915, %285
  %mul918 = mul nsw i64 0, %add917
  %sub919 = sub nsw i64 %mul918, 1
  br label %cond.end.920

cond.end.920:                                     ; preds = %cond.false.914, %cond.true.904
  %cond921 = phi i64 [ %add913, %cond.true.904 ], [ %sub919, %cond.false.914 ]
  %286 = load i64, i64* %bytes.addr, align 8
  %sub922 = sub nsw i64 %cond921, %286
  %287 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes923 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %287, i32 0, i32 20
  %288 = load i64, i64* %dst_bytes923, align 8
  %cmp924 = icmp slt i64 %sub922, %288
  br i1 %cmp924, label %cond.true.966, label %lor.lhs.false.949

cond.false.926:                                   ; preds = %cond.end.848
  %289 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes927 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %289, i32 0, i32 20
  %290 = load i64, i64* %dst_bytes927, align 8
  %cmp928 = icmp slt i64 %290, 0
  br i1 %cmp928, label %cond.true.930, label %cond.false.935

cond.true.930:                                    ; preds = %cond.false.926
  %291 = load i64, i64* %bytes.addr, align 8
  %292 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes931 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %292, i32 0, i32 20
  %293 = load i64, i64* %dst_bytes931, align 8
  %294 = load i64, i64* %bytes.addr, align 8
  %add932 = add nsw i64 %293, %294
  %cmp933 = icmp sle i64 %291, %add932
  br i1 %cmp933, label %cond.true.966, label %lor.lhs.false.949

cond.false.935:                                   ; preds = %cond.false.926
  %295 = load i64, i64* %bytes.addr, align 8
  %cmp936 = icmp slt i64 %295, 0
  br i1 %cmp936, label %cond.true.938, label %cond.false.944

cond.true.938:                                    ; preds = %cond.false.935
  %296 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes939 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %296, i32 0, i32 20
  %297 = load i64, i64* %dst_bytes939, align 8
  %298 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes940 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %298, i32 0, i32 20
  %299 = load i64, i64* %dst_bytes940, align 8
  %300 = load i64, i64* %bytes.addr, align 8
  %add941 = add nsw i64 %299, %300
  %cmp942 = icmp sle i64 %297, %add941
  br i1 %cmp942, label %cond.true.966, label %lor.lhs.false.949

cond.false.944:                                   ; preds = %cond.false.935
  %301 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes945 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %301, i32 0, i32 20
  %302 = load i64, i64* %dst_bytes945, align 8
  %303 = load i64, i64* %bytes.addr, align 8
  %add946 = add nsw i64 %302, %303
  %304 = load i64, i64* %bytes.addr, align 8
  %cmp947 = icmp slt i64 %add946, %304
  br i1 %cmp947, label %cond.true.966, label %lor.lhs.false.949

lor.lhs.false.949:                                ; preds = %cond.false.944, %cond.true.938, %cond.true.930, %cond.end.920, %cond.end.891
  %305 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes950 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %305, i32 0, i32 20
  %306 = load i64, i64* %dst_bytes950, align 8
  %307 = load i64, i64* %bytes.addr, align 8
  %add951 = add nsw i64 %306, %307
  %mul952 = mul nsw i64 0, %add951
  %sub953 = sub nsw i64 %mul952, 1
  %cmp954 = icmp slt i64 %sub953, 0
  br i1 %cmp954, label %land.lhs.true.956, label %lor.lhs.false.961

land.lhs.true.956:                                ; preds = %lor.lhs.false.949
  %308 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes957 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %308, i32 0, i32 20
  %309 = load i64, i64* %dst_bytes957, align 8
  %310 = load i64, i64* %bytes.addr, align 8
  %add958 = add nsw i64 %309, %310
  %cmp959 = icmp slt i64 %add958, -32768
  br i1 %cmp959, label %cond.true.966, label %lor.lhs.false.961

lor.lhs.false.961:                                ; preds = %land.lhs.true.956, %lor.lhs.false.949
  %311 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes962 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %311, i32 0, i32 20
  %312 = load i64, i64* %dst_bytes962, align 8
  %313 = load i64, i64* %bytes.addr, align 8
  %add963 = add nsw i64 %312, %313
  %cmp964 = icmp slt i64 32767, %add963
  br i1 %cmp964, label %cond.true.966, label %cond.false.998

cond.true.966:                                    ; preds = %lor.lhs.false.961, %land.lhs.true.956, %cond.false.944, %cond.true.938, %cond.true.930, %cond.end.920, %cond.end.891
  %314 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes967 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %314, i32 0, i32 20
  %315 = load i64, i64* %dst_bytes967, align 8
  %conv968 = trunc i64 %315 to i16
  %conv969 = zext i16 %conv968 to i32
  %316 = load i64, i64* %bytes.addr, align 8
  %conv970 = trunc i64 %316 to i16
  %conv971 = zext i16 %conv970 to i32
  %add972 = add nsw i32 %conv969, %conv971
  %cmp973 = icmp sle i32 %add972, 32767
  br i1 %cmp973, label %cond.true.975, label %cond.false.984

cond.true.975:                                    ; preds = %cond.true.966
  %317 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes976 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %317, i32 0, i32 20
  %318 = load i64, i64* %dst_bytes976, align 8
  %conv977 = trunc i64 %318 to i16
  %conv978 = zext i16 %conv977 to i32
  %319 = load i64, i64* %bytes.addr, align 8
  %conv979 = trunc i64 %319 to i16
  %conv980 = zext i16 %conv979 to i32
  %add981 = add nsw i32 %conv978, %conv980
  %conv982 = trunc i32 %add981 to i16
  %conv983 = sext i16 %conv982 to i32
  br label %cond.end.995

cond.false.984:                                   ; preds = %cond.true.966
  %320 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes985 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %320, i32 0, i32 20
  %321 = load i64, i64* %dst_bytes985, align 8
  %conv986 = trunc i64 %321 to i16
  %conv987 = zext i16 %conv986 to i32
  %322 = load i64, i64* %bytes.addr, align 8
  %conv988 = trunc i64 %322 to i16
  %conv989 = zext i16 %conv988 to i32
  %add990 = add nsw i32 %conv987, %conv989
  %sub991 = sub nsw i32 %add990, -32768
  %conv992 = trunc i32 %sub991 to i16
  %conv993 = sext i16 %conv992 to i32
  %add994 = add nsw i32 %conv993, -32768
  br label %cond.end.995

cond.end.995:                                     ; preds = %cond.false.984, %cond.true.975
  %cond996 = phi i32 [ %conv983, %cond.true.975 ], [ %add994, %cond.false.984 ]
  %conv997 = sext i32 %cond996 to i64
  store i64 %conv997, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.998:                                   ; preds = %lor.lhs.false.961
  %323 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes999 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %323, i32 0, i32 20
  %324 = load i64, i64* %dst_bytes999, align 8
  %conv1000 = trunc i64 %324 to i16
  %conv1001 = zext i16 %conv1000 to i32
  %325 = load i64, i64* %bytes.addr, align 8
  %conv1002 = trunc i64 %325 to i16
  %conv1003 = zext i16 %conv1002 to i32
  %add1004 = add nsw i32 %conv1001, %conv1003
  %cmp1005 = icmp sle i32 %add1004, 32767
  br i1 %cmp1005, label %cond.true.1007, label %cond.false.1016

cond.true.1007:                                   ; preds = %cond.false.998
  %326 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1008 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %326, i32 0, i32 20
  %327 = load i64, i64* %dst_bytes1008, align 8
  %conv1009 = trunc i64 %327 to i16
  %conv1010 = zext i16 %conv1009 to i32
  %328 = load i64, i64* %bytes.addr, align 8
  %conv1011 = trunc i64 %328 to i16
  %conv1012 = zext i16 %conv1011 to i32
  %add1013 = add nsw i32 %conv1010, %conv1012
  %conv1014 = trunc i32 %add1013 to i16
  %conv1015 = sext i16 %conv1014 to i32
  br label %cond.end.1027

cond.false.1016:                                  ; preds = %cond.false.998
  %329 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1017 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %329, i32 0, i32 20
  %330 = load i64, i64* %dst_bytes1017, align 8
  %conv1018 = trunc i64 %330 to i16
  %conv1019 = zext i16 %conv1018 to i32
  %331 = load i64, i64* %bytes.addr, align 8
  %conv1020 = trunc i64 %331 to i16
  %conv1021 = zext i16 %conv1020 to i32
  %add1022 = add nsw i32 %conv1019, %conv1021
  %sub1023 = sub nsw i32 %add1022, -32768
  %conv1024 = trunc i32 %sub1023 to i16
  %conv1025 = sext i16 %conv1024 to i32
  %add1026 = add nsw i32 %conv1025, -32768
  br label %cond.end.1027

cond.end.1027:                                    ; preds = %cond.false.1016, %cond.true.1007
  %cond1028 = phi i32 [ %conv1015, %cond.true.1007 ], [ %add1026, %cond.false.1016 ]
  %conv1029 = sext i32 %cond1028 to i64
  store i64 %conv1029, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.1030:                                  ; preds = %cond.false.508
  br i1 false, label %cond.true.1031, label %cond.false.1468

cond.true.1031:                                   ; preds = %cond.false.1030
  br i1 false, label %cond.true.1032, label %cond.false.1271

cond.true.1032:                                   ; preds = %cond.true.1031
  %332 = load i64, i64* %bytes.addr, align 8
  %conv1033 = trunc i64 %332 to i32
  %mul1034 = mul nsw i32 0, %conv1033
  %333 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1035 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %333, i32 0, i32 20
  %334 = load i64, i64* %dst_bytes1035, align 8
  %conv1036 = trunc i64 %334 to i32
  %add1037 = add nsw i32 %mul1034, %conv1036
  %mul1038 = mul nsw i32 0, %add1037
  %sub1039 = sub nsw i32 %mul1038, 1
  %cmp1040 = icmp slt i32 %sub1039, 0
  br i1 %cmp1040, label %cond.true.1042, label %cond.false.1066

cond.true.1042:                                   ; preds = %cond.true.1032
  %335 = load i64, i64* %bytes.addr, align 8
  %conv1043 = trunc i64 %335 to i32
  %mul1044 = mul nsw i32 0, %conv1043
  %336 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1045 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %336, i32 0, i32 20
  %337 = load i64, i64* %dst_bytes1045, align 8
  %conv1046 = trunc i64 %337 to i32
  %add1047 = add nsw i32 %mul1044, %conv1046
  %mul1048 = mul nsw i32 0, %add1047
  %add1049 = add nsw i32 %mul1048, 0
  %neg1050 = xor i32 %add1049, -1
  %cmp1051 = icmp eq i32 %neg1050, -1
  %conv1052 = zext i1 %cmp1051 to i32
  %sub1053 = sub nsw i32 0, %conv1052
  %338 = load i64, i64* %bytes.addr, align 8
  %conv1054 = trunc i64 %338 to i32
  %mul1055 = mul nsw i32 0, %conv1054
  %339 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1056 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %339, i32 0, i32 20
  %340 = load i64, i64* %dst_bytes1056, align 8
  %conv1057 = trunc i64 %340 to i32
  %add1058 = add nsw i32 %mul1055, %conv1057
  %mul1059 = mul nsw i32 0, %add1058
  %add1060 = add nsw i32 %mul1059, 1
  %shl1061 = shl i32 %add1060, 30
  %sub1062 = sub nsw i32 %shl1061, 1
  %mul1063 = mul nsw i32 %sub1062, 2
  %add1064 = add nsw i32 %mul1063, 1
  %sub1065 = sub nsw i32 %sub1053, %add1064
  br label %cond.end.1074

cond.false.1066:                                  ; preds = %cond.true.1032
  %341 = load i64, i64* %bytes.addr, align 8
  %conv1067 = trunc i64 %341 to i32
  %mul1068 = mul nsw i32 0, %conv1067
  %342 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1069 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %342, i32 0, i32 20
  %343 = load i64, i64* %dst_bytes1069, align 8
  %conv1070 = trunc i64 %343 to i32
  %add1071 = add nsw i32 %mul1068, %conv1070
  %mul1072 = mul nsw i32 0, %add1071
  %add1073 = add nsw i32 %mul1072, 0
  br label %cond.end.1074

cond.end.1074:                                    ; preds = %cond.false.1066, %cond.true.1042
  %cond1075 = phi i32 [ %sub1065, %cond.true.1042 ], [ %add1073, %cond.false.1066 ]
  %cmp1076 = icmp slt i32 %cond1075, 0
  br i1 %cmp1076, label %cond.true.1078, label %cond.false.1170

cond.true.1078:                                   ; preds = %cond.end.1074
  %344 = load i64, i64* %bytes.addr, align 8
  %conv1079 = trunc i64 %344 to i32
  %cmp1080 = icmp slt i32 %conv1079, 0
  br i1 %cmp1080, label %cond.true.1082, label %cond.false.1132

cond.true.1082:                                   ; preds = %cond.true.1078
  %345 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1083 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %345, i32 0, i32 20
  %346 = load i64, i64* %dst_bytes1083, align 8
  %conv1084 = trunc i64 %346 to i32
  %347 = load i64, i64* %bytes.addr, align 8
  %conv1085 = trunc i64 %347 to i32
  %mul1086 = mul nsw i32 0, %conv1085
  %348 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1087 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %348, i32 0, i32 20
  %349 = load i64, i64* %dst_bytes1087, align 8
  %conv1088 = trunc i64 %349 to i32
  %add1089 = add nsw i32 %mul1086, %conv1088
  %mul1090 = mul nsw i32 0, %add1089
  %sub1091 = sub nsw i32 %mul1090, 1
  %cmp1092 = icmp slt i32 %sub1091, 0
  br i1 %cmp1092, label %cond.true.1094, label %cond.false.1118

cond.true.1094:                                   ; preds = %cond.true.1082
  %350 = load i64, i64* %bytes.addr, align 8
  %conv1095 = trunc i64 %350 to i32
  %mul1096 = mul nsw i32 0, %conv1095
  %351 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1097 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %351, i32 0, i32 20
  %352 = load i64, i64* %dst_bytes1097, align 8
  %conv1098 = trunc i64 %352 to i32
  %add1099 = add nsw i32 %mul1096, %conv1098
  %mul1100 = mul nsw i32 0, %add1099
  %add1101 = add nsw i32 %mul1100, 0
  %neg1102 = xor i32 %add1101, -1
  %cmp1103 = icmp eq i32 %neg1102, -1
  %conv1104 = zext i1 %cmp1103 to i32
  %sub1105 = sub nsw i32 0, %conv1104
  %353 = load i64, i64* %bytes.addr, align 8
  %conv1106 = trunc i64 %353 to i32
  %mul1107 = mul nsw i32 0, %conv1106
  %354 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1108 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %354, i32 0, i32 20
  %355 = load i64, i64* %dst_bytes1108, align 8
  %conv1109 = trunc i64 %355 to i32
  %add1110 = add nsw i32 %mul1107, %conv1109
  %mul1111 = mul nsw i32 0, %add1110
  %add1112 = add nsw i32 %mul1111, 1
  %shl1113 = shl i32 %add1112, 30
  %sub1114 = sub nsw i32 %shl1113, 1
  %mul1115 = mul nsw i32 %sub1114, 2
  %add1116 = add nsw i32 %mul1115, 1
  %sub1117 = sub nsw i32 %sub1105, %add1116
  br label %cond.end.1126

cond.false.1118:                                  ; preds = %cond.true.1082
  %356 = load i64, i64* %bytes.addr, align 8
  %conv1119 = trunc i64 %356 to i32
  %mul1120 = mul nsw i32 0, %conv1119
  %357 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1121 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %357, i32 0, i32 20
  %358 = load i64, i64* %dst_bytes1121, align 8
  %conv1122 = trunc i64 %358 to i32
  %add1123 = add nsw i32 %mul1120, %conv1122
  %mul1124 = mul nsw i32 0, %add1123
  %add1125 = add nsw i32 %mul1124, 0
  br label %cond.end.1126

cond.end.1126:                                    ; preds = %cond.false.1118, %cond.true.1094
  %cond1127 = phi i32 [ %sub1117, %cond.true.1094 ], [ %add1125, %cond.false.1118 ]
  %359 = load i64, i64* %bytes.addr, align 8
  %conv1128 = trunc i64 %359 to i32
  %sub1129 = sub nsw i32 %cond1127, %conv1128
  %cmp1130 = icmp slt i32 %conv1084, %sub1129
  br i1 %cmp1130, label %cond.true.1227, label %lor.lhs.false.1204

cond.false.1132:                                  ; preds = %cond.true.1078
  %360 = load i64, i64* %bytes.addr, align 8
  %conv1133 = trunc i64 %360 to i32
  %mul1134 = mul nsw i32 0, %conv1133
  %361 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1135 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %361, i32 0, i32 20
  %362 = load i64, i64* %dst_bytes1135, align 8
  %conv1136 = trunc i64 %362 to i32
  %add1137 = add nsw i32 %mul1134, %conv1136
  %mul1138 = mul nsw i32 0, %add1137
  %sub1139 = sub nsw i32 %mul1138, 1
  %cmp1140 = icmp slt i32 %sub1139, 0
  br i1 %cmp1140, label %cond.true.1142, label %cond.false.1154

cond.true.1142:                                   ; preds = %cond.false.1132
  %363 = load i64, i64* %bytes.addr, align 8
  %conv1143 = trunc i64 %363 to i32
  %mul1144 = mul nsw i32 0, %conv1143
  %364 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1145 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %364, i32 0, i32 20
  %365 = load i64, i64* %dst_bytes1145, align 8
  %conv1146 = trunc i64 %365 to i32
  %add1147 = add nsw i32 %mul1144, %conv1146
  %mul1148 = mul nsw i32 0, %add1147
  %add1149 = add nsw i32 %mul1148, 1
  %shl1150 = shl i32 %add1149, 30
  %sub1151 = sub nsw i32 %shl1150, 1
  %mul1152 = mul nsw i32 %sub1151, 2
  %add1153 = add nsw i32 %mul1152, 1
  br label %cond.end.1162

cond.false.1154:                                  ; preds = %cond.false.1132
  %366 = load i64, i64* %bytes.addr, align 8
  %conv1155 = trunc i64 %366 to i32
  %mul1156 = mul nsw i32 0, %conv1155
  %367 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1157 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %367, i32 0, i32 20
  %368 = load i64, i64* %dst_bytes1157, align 8
  %conv1158 = trunc i64 %368 to i32
  %add1159 = add nsw i32 %mul1156, %conv1158
  %mul1160 = mul nsw i32 0, %add1159
  %sub1161 = sub nsw i32 %mul1160, 1
  br label %cond.end.1162

cond.end.1162:                                    ; preds = %cond.false.1154, %cond.true.1142
  %cond1163 = phi i32 [ %add1153, %cond.true.1142 ], [ %sub1161, %cond.false.1154 ]
  %369 = load i64, i64* %bytes.addr, align 8
  %conv1164 = trunc i64 %369 to i32
  %sub1165 = sub nsw i32 %cond1163, %conv1164
  %370 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1166 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %370, i32 0, i32 20
  %371 = load i64, i64* %dst_bytes1166, align 8
  %conv1167 = trunc i64 %371 to i32
  %cmp1168 = icmp slt i32 %sub1165, %conv1167
  br i1 %cmp1168, label %cond.true.1227, label %lor.lhs.false.1204

cond.false.1170:                                  ; preds = %cond.end.1074
  %372 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1171 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %372, i32 0, i32 20
  %373 = load i64, i64* %dst_bytes1171, align 8
  %conv1172 = trunc i64 %373 to i32
  %cmp1173 = icmp slt i32 %conv1172, 0
  br i1 %cmp1173, label %cond.true.1175, label %cond.false.1183

cond.true.1175:                                   ; preds = %cond.false.1170
  %374 = load i64, i64* %bytes.addr, align 8
  %conv1176 = trunc i64 %374 to i32
  %375 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1177 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %375, i32 0, i32 20
  %376 = load i64, i64* %dst_bytes1177, align 8
  %conv1178 = trunc i64 %376 to i32
  %377 = load i64, i64* %bytes.addr, align 8
  %conv1179 = trunc i64 %377 to i32
  %add1180 = add nsw i32 %conv1178, %conv1179
  %cmp1181 = icmp sle i32 %conv1176, %add1180
  br i1 %cmp1181, label %cond.true.1227, label %lor.lhs.false.1204

cond.false.1183:                                  ; preds = %cond.false.1170
  %378 = load i64, i64* %bytes.addr, align 8
  %conv1184 = trunc i64 %378 to i32
  %cmp1185 = icmp slt i32 %conv1184, 0
  br i1 %cmp1185, label %cond.true.1187, label %cond.false.1196

cond.true.1187:                                   ; preds = %cond.false.1183
  %379 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1188 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %379, i32 0, i32 20
  %380 = load i64, i64* %dst_bytes1188, align 8
  %conv1189 = trunc i64 %380 to i32
  %381 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1190 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %381, i32 0, i32 20
  %382 = load i64, i64* %dst_bytes1190, align 8
  %conv1191 = trunc i64 %382 to i32
  %383 = load i64, i64* %bytes.addr, align 8
  %conv1192 = trunc i64 %383 to i32
  %add1193 = add nsw i32 %conv1191, %conv1192
  %cmp1194 = icmp sle i32 %conv1189, %add1193
  br i1 %cmp1194, label %cond.true.1227, label %lor.lhs.false.1204

cond.false.1196:                                  ; preds = %cond.false.1183
  %384 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1197 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %384, i32 0, i32 20
  %385 = load i64, i64* %dst_bytes1197, align 8
  %conv1198 = trunc i64 %385 to i32
  %386 = load i64, i64* %bytes.addr, align 8
  %conv1199 = trunc i64 %386 to i32
  %add1200 = add nsw i32 %conv1198, %conv1199
  %387 = load i64, i64* %bytes.addr, align 8
  %conv1201 = trunc i64 %387 to i32
  %cmp1202 = icmp slt i32 %add1200, %conv1201
  br i1 %cmp1202, label %cond.true.1227, label %lor.lhs.false.1204

lor.lhs.false.1204:                               ; preds = %cond.false.1196, %cond.true.1187, %cond.true.1175, %cond.end.1162, %cond.end.1126
  %388 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1205 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %388, i32 0, i32 20
  %389 = load i64, i64* %dst_bytes1205, align 8
  %conv1206 = trunc i64 %389 to i32
  %390 = load i64, i64* %bytes.addr, align 8
  %conv1207 = trunc i64 %390 to i32
  %add1208 = add nsw i32 %conv1206, %conv1207
  %mul1209 = mul nsw i32 0, %add1208
  %sub1210 = sub nsw i32 %mul1209, 1
  %cmp1211 = icmp slt i32 %sub1210, 0
  br i1 %cmp1211, label %land.lhs.true.1213, label %lor.lhs.false.1220

land.lhs.true.1213:                               ; preds = %lor.lhs.false.1204
  %391 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1214 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %391, i32 0, i32 20
  %392 = load i64, i64* %dst_bytes1214, align 8
  %conv1215 = trunc i64 %392 to i32
  %393 = load i64, i64* %bytes.addr, align 8
  %conv1216 = trunc i64 %393 to i32
  %add1217 = add nsw i32 %conv1215, %conv1216
  %cmp1218 = icmp slt i32 %add1217, -2147483648
  br i1 %cmp1218, label %cond.true.1227, label %lor.lhs.false.1220

lor.lhs.false.1220:                               ; preds = %land.lhs.true.1213, %lor.lhs.false.1204
  %394 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1221 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %394, i32 0, i32 20
  %395 = load i64, i64* %dst_bytes1221, align 8
  %conv1222 = trunc i64 %395 to i32
  %396 = load i64, i64* %bytes.addr, align 8
  %conv1223 = trunc i64 %396 to i32
  %add1224 = add nsw i32 %conv1222, %conv1223
  %cmp1225 = icmp slt i32 2147483647, %add1224
  br i1 %cmp1225, label %cond.true.1227, label %cond.false.1249

cond.true.1227:                                   ; preds = %lor.lhs.false.1220, %land.lhs.true.1213, %cond.false.1196, %cond.true.1187, %cond.true.1175, %cond.end.1162, %cond.end.1126
  %397 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1228 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %397, i32 0, i32 20
  %398 = load i64, i64* %dst_bytes1228, align 8
  %conv1229 = trunc i64 %398 to i32
  %399 = load i64, i64* %bytes.addr, align 8
  %conv1230 = trunc i64 %399 to i32
  %add1231 = add i32 %conv1229, %conv1230
  %cmp1232 = icmp ule i32 %add1231, 2147483647
  br i1 %cmp1232, label %cond.true.1234, label %cond.false.1239

cond.true.1234:                                   ; preds = %cond.true.1227
  %400 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1235 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %400, i32 0, i32 20
  %401 = load i64, i64* %dst_bytes1235, align 8
  %conv1236 = trunc i64 %401 to i32
  %402 = load i64, i64* %bytes.addr, align 8
  %conv1237 = trunc i64 %402 to i32
  %add1238 = add i32 %conv1236, %conv1237
  br label %cond.end.1246

cond.false.1239:                                  ; preds = %cond.true.1227
  %403 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1240 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %403, i32 0, i32 20
  %404 = load i64, i64* %dst_bytes1240, align 8
  %conv1241 = trunc i64 %404 to i32
  %405 = load i64, i64* %bytes.addr, align 8
  %conv1242 = trunc i64 %405 to i32
  %add1243 = add i32 %conv1241, %conv1242
  %sub1244 = sub i32 %add1243, -2147483648
  %add1245 = add nsw i32 %sub1244, -2147483648
  br label %cond.end.1246

cond.end.1246:                                    ; preds = %cond.false.1239, %cond.true.1234
  %cond1247 = phi i32 [ %add1238, %cond.true.1234 ], [ %add1245, %cond.false.1239 ]
  %conv1248 = sext i32 %cond1247 to i64
  store i64 %conv1248, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.1249:                                  ; preds = %lor.lhs.false.1220
  %406 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1250 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %406, i32 0, i32 20
  %407 = load i64, i64* %dst_bytes1250, align 8
  %conv1251 = trunc i64 %407 to i32
  %408 = load i64, i64* %bytes.addr, align 8
  %conv1252 = trunc i64 %408 to i32
  %add1253 = add i32 %conv1251, %conv1252
  %cmp1254 = icmp ule i32 %add1253, 2147483647
  br i1 %cmp1254, label %cond.true.1256, label %cond.false.1261

cond.true.1256:                                   ; preds = %cond.false.1249
  %409 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1257 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %409, i32 0, i32 20
  %410 = load i64, i64* %dst_bytes1257, align 8
  %conv1258 = trunc i64 %410 to i32
  %411 = load i64, i64* %bytes.addr, align 8
  %conv1259 = trunc i64 %411 to i32
  %add1260 = add i32 %conv1258, %conv1259
  br label %cond.end.1268

cond.false.1261:                                  ; preds = %cond.false.1249
  %412 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1262 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %412, i32 0, i32 20
  %413 = load i64, i64* %dst_bytes1262, align 8
  %conv1263 = trunc i64 %413 to i32
  %414 = load i64, i64* %bytes.addr, align 8
  %conv1264 = trunc i64 %414 to i32
  %add1265 = add i32 %conv1263, %conv1264
  %sub1266 = sub i32 %add1265, -2147483648
  %add1267 = add nsw i32 %sub1266, -2147483648
  br label %cond.end.1268

cond.end.1268:                                    ; preds = %cond.false.1261, %cond.true.1256
  %cond1269 = phi i32 [ %add1260, %cond.true.1256 ], [ %add1267, %cond.false.1261 ]
  %conv1270 = sext i32 %cond1269 to i64
  store i64 %conv1270, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.1271:                                  ; preds = %cond.true.1031
  %415 = load i64, i64* %bytes.addr, align 8
  %mul1272 = mul nsw i64 0, %415
  %416 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1273 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %416, i32 0, i32 20
  %417 = load i64, i64* %dst_bytes1273, align 8
  %add1274 = add nsw i64 %mul1272, %417
  %mul1275 = mul nsw i64 0, %add1274
  %sub1276 = sub nsw i64 %mul1275, 1
  %cmp1277 = icmp slt i64 %sub1276, 0
  br i1 %cmp1277, label %cond.true.1279, label %cond.false.1300

cond.true.1279:                                   ; preds = %cond.false.1271
  %418 = load i64, i64* %bytes.addr, align 8
  %mul1280 = mul nsw i64 0, %418
  %419 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1281 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %419, i32 0, i32 20
  %420 = load i64, i64* %dst_bytes1281, align 8
  %add1282 = add nsw i64 %mul1280, %420
  %mul1283 = mul nsw i64 0, %add1282
  %add1284 = add nsw i64 %mul1283, 0
  %neg1285 = xor i64 %add1284, -1
  %cmp1286 = icmp eq i64 %neg1285, -1
  %conv1287 = zext i1 %cmp1286 to i32
  %sub1288 = sub nsw i32 0, %conv1287
  %conv1289 = sext i32 %sub1288 to i64
  %421 = load i64, i64* %bytes.addr, align 8
  %mul1290 = mul nsw i64 0, %421
  %422 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1291 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %422, i32 0, i32 20
  %423 = load i64, i64* %dst_bytes1291, align 8
  %add1292 = add nsw i64 %mul1290, %423
  %mul1293 = mul nsw i64 0, %add1292
  %add1294 = add nsw i64 %mul1293, 1
  %shl1295 = shl i64 %add1294, 62
  %sub1296 = sub nsw i64 %shl1295, 1
  %mul1297 = mul nsw i64 %sub1296, 2
  %add1298 = add nsw i64 %mul1297, 1
  %sub1299 = sub nsw i64 %conv1289, %add1298
  br label %cond.end.1306

cond.false.1300:                                  ; preds = %cond.false.1271
  %424 = load i64, i64* %bytes.addr, align 8
  %mul1301 = mul nsw i64 0, %424
  %425 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1302 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %425, i32 0, i32 20
  %426 = load i64, i64* %dst_bytes1302, align 8
  %add1303 = add nsw i64 %mul1301, %426
  %mul1304 = mul nsw i64 0, %add1303
  %add1305 = add nsw i64 %mul1304, 0
  br label %cond.end.1306

cond.end.1306:                                    ; preds = %cond.false.1300, %cond.true.1279
  %cond1307 = phi i64 [ %sub1299, %cond.true.1279 ], [ %add1305, %cond.false.1300 ]
  %cmp1308 = icmp slt i64 %cond1307, 0
  br i1 %cmp1308, label %cond.true.1310, label %cond.false.1384

cond.true.1310:                                   ; preds = %cond.end.1306
  %427 = load i64, i64* %bytes.addr, align 8
  %cmp1311 = icmp slt i64 %427, 0
  br i1 %cmp1311, label %cond.true.1313, label %cond.false.1354

cond.true.1313:                                   ; preds = %cond.true.1310
  %428 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1314 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %428, i32 0, i32 20
  %429 = load i64, i64* %dst_bytes1314, align 8
  %430 = load i64, i64* %bytes.addr, align 8
  %mul1315 = mul nsw i64 0, %430
  %431 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1316 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %431, i32 0, i32 20
  %432 = load i64, i64* %dst_bytes1316, align 8
  %add1317 = add nsw i64 %mul1315, %432
  %mul1318 = mul nsw i64 0, %add1317
  %sub1319 = sub nsw i64 %mul1318, 1
  %cmp1320 = icmp slt i64 %sub1319, 0
  br i1 %cmp1320, label %cond.true.1322, label %cond.false.1343

cond.true.1322:                                   ; preds = %cond.true.1313
  %433 = load i64, i64* %bytes.addr, align 8
  %mul1323 = mul nsw i64 0, %433
  %434 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1324 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %434, i32 0, i32 20
  %435 = load i64, i64* %dst_bytes1324, align 8
  %add1325 = add nsw i64 %mul1323, %435
  %mul1326 = mul nsw i64 0, %add1325
  %add1327 = add nsw i64 %mul1326, 0
  %neg1328 = xor i64 %add1327, -1
  %cmp1329 = icmp eq i64 %neg1328, -1
  %conv1330 = zext i1 %cmp1329 to i32
  %sub1331 = sub nsw i32 0, %conv1330
  %conv1332 = sext i32 %sub1331 to i64
  %436 = load i64, i64* %bytes.addr, align 8
  %mul1333 = mul nsw i64 0, %436
  %437 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1334 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %437, i32 0, i32 20
  %438 = load i64, i64* %dst_bytes1334, align 8
  %add1335 = add nsw i64 %mul1333, %438
  %mul1336 = mul nsw i64 0, %add1335
  %add1337 = add nsw i64 %mul1336, 1
  %shl1338 = shl i64 %add1337, 62
  %sub1339 = sub nsw i64 %shl1338, 1
  %mul1340 = mul nsw i64 %sub1339, 2
  %add1341 = add nsw i64 %mul1340, 1
  %sub1342 = sub nsw i64 %conv1332, %add1341
  br label %cond.end.1349

cond.false.1343:                                  ; preds = %cond.true.1313
  %439 = load i64, i64* %bytes.addr, align 8
  %mul1344 = mul nsw i64 0, %439
  %440 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1345 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %440, i32 0, i32 20
  %441 = load i64, i64* %dst_bytes1345, align 8
  %add1346 = add nsw i64 %mul1344, %441
  %mul1347 = mul nsw i64 0, %add1346
  %add1348 = add nsw i64 %mul1347, 0
  br label %cond.end.1349

cond.end.1349:                                    ; preds = %cond.false.1343, %cond.true.1322
  %cond1350 = phi i64 [ %sub1342, %cond.true.1322 ], [ %add1348, %cond.false.1343 ]
  %442 = load i64, i64* %bytes.addr, align 8
  %sub1351 = sub nsw i64 %cond1350, %442
  %cmp1352 = icmp slt i64 %429, %sub1351
  br i1 %cmp1352, label %cond.true.1424, label %lor.lhs.false.1407

cond.false.1354:                                  ; preds = %cond.true.1310
  %443 = load i64, i64* %bytes.addr, align 8
  %mul1355 = mul nsw i64 0, %443
  %444 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1356 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %444, i32 0, i32 20
  %445 = load i64, i64* %dst_bytes1356, align 8
  %add1357 = add nsw i64 %mul1355, %445
  %mul1358 = mul nsw i64 0, %add1357
  %sub1359 = sub nsw i64 %mul1358, 1
  %cmp1360 = icmp slt i64 %sub1359, 0
  br i1 %cmp1360, label %cond.true.1362, label %cond.false.1372

cond.true.1362:                                   ; preds = %cond.false.1354
  %446 = load i64, i64* %bytes.addr, align 8
  %mul1363 = mul nsw i64 0, %446
  %447 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1364 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %447, i32 0, i32 20
  %448 = load i64, i64* %dst_bytes1364, align 8
  %add1365 = add nsw i64 %mul1363, %448
  %mul1366 = mul nsw i64 0, %add1365
  %add1367 = add nsw i64 %mul1366, 1
  %shl1368 = shl i64 %add1367, 62
  %sub1369 = sub nsw i64 %shl1368, 1
  %mul1370 = mul nsw i64 %sub1369, 2
  %add1371 = add nsw i64 %mul1370, 1
  br label %cond.end.1378

cond.false.1372:                                  ; preds = %cond.false.1354
  %449 = load i64, i64* %bytes.addr, align 8
  %mul1373 = mul nsw i64 0, %449
  %450 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1374 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %450, i32 0, i32 20
  %451 = load i64, i64* %dst_bytes1374, align 8
  %add1375 = add nsw i64 %mul1373, %451
  %mul1376 = mul nsw i64 0, %add1375
  %sub1377 = sub nsw i64 %mul1376, 1
  br label %cond.end.1378

cond.end.1378:                                    ; preds = %cond.false.1372, %cond.true.1362
  %cond1379 = phi i64 [ %add1371, %cond.true.1362 ], [ %sub1377, %cond.false.1372 ]
  %452 = load i64, i64* %bytes.addr, align 8
  %sub1380 = sub nsw i64 %cond1379, %452
  %453 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1381 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %453, i32 0, i32 20
  %454 = load i64, i64* %dst_bytes1381, align 8
  %cmp1382 = icmp slt i64 %sub1380, %454
  br i1 %cmp1382, label %cond.true.1424, label %lor.lhs.false.1407

cond.false.1384:                                  ; preds = %cond.end.1306
  %455 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1385 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %455, i32 0, i32 20
  %456 = load i64, i64* %dst_bytes1385, align 8
  %cmp1386 = icmp slt i64 %456, 0
  br i1 %cmp1386, label %cond.true.1388, label %cond.false.1393

cond.true.1388:                                   ; preds = %cond.false.1384
  %457 = load i64, i64* %bytes.addr, align 8
  %458 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1389 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %458, i32 0, i32 20
  %459 = load i64, i64* %dst_bytes1389, align 8
  %460 = load i64, i64* %bytes.addr, align 8
  %add1390 = add nsw i64 %459, %460
  %cmp1391 = icmp sle i64 %457, %add1390
  br i1 %cmp1391, label %cond.true.1424, label %lor.lhs.false.1407

cond.false.1393:                                  ; preds = %cond.false.1384
  %461 = load i64, i64* %bytes.addr, align 8
  %cmp1394 = icmp slt i64 %461, 0
  br i1 %cmp1394, label %cond.true.1396, label %cond.false.1402

cond.true.1396:                                   ; preds = %cond.false.1393
  %462 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1397 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %462, i32 0, i32 20
  %463 = load i64, i64* %dst_bytes1397, align 8
  %464 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1398 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %464, i32 0, i32 20
  %465 = load i64, i64* %dst_bytes1398, align 8
  %466 = load i64, i64* %bytes.addr, align 8
  %add1399 = add nsw i64 %465, %466
  %cmp1400 = icmp sle i64 %463, %add1399
  br i1 %cmp1400, label %cond.true.1424, label %lor.lhs.false.1407

cond.false.1402:                                  ; preds = %cond.false.1393
  %467 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1403 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %467, i32 0, i32 20
  %468 = load i64, i64* %dst_bytes1403, align 8
  %469 = load i64, i64* %bytes.addr, align 8
  %add1404 = add nsw i64 %468, %469
  %470 = load i64, i64* %bytes.addr, align 8
  %cmp1405 = icmp slt i64 %add1404, %470
  br i1 %cmp1405, label %cond.true.1424, label %lor.lhs.false.1407

lor.lhs.false.1407:                               ; preds = %cond.false.1402, %cond.true.1396, %cond.true.1388, %cond.end.1378, %cond.end.1349
  %471 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1408 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %471, i32 0, i32 20
  %472 = load i64, i64* %dst_bytes1408, align 8
  %473 = load i64, i64* %bytes.addr, align 8
  %add1409 = add nsw i64 %472, %473
  %mul1410 = mul nsw i64 0, %add1409
  %sub1411 = sub nsw i64 %mul1410, 1
  %cmp1412 = icmp slt i64 %sub1411, 0
  br i1 %cmp1412, label %land.lhs.true.1414, label %lor.lhs.false.1419

land.lhs.true.1414:                               ; preds = %lor.lhs.false.1407
  %474 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1415 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %474, i32 0, i32 20
  %475 = load i64, i64* %dst_bytes1415, align 8
  %476 = load i64, i64* %bytes.addr, align 8
  %add1416 = add nsw i64 %475, %476
  %cmp1417 = icmp slt i64 %add1416, -2147483648
  br i1 %cmp1417, label %cond.true.1424, label %lor.lhs.false.1419

lor.lhs.false.1419:                               ; preds = %land.lhs.true.1414, %lor.lhs.false.1407
  %477 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1420 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %477, i32 0, i32 20
  %478 = load i64, i64* %dst_bytes1420, align 8
  %479 = load i64, i64* %bytes.addr, align 8
  %add1421 = add nsw i64 %478, %479
  %cmp1422 = icmp slt i64 2147483647, %add1421
  br i1 %cmp1422, label %cond.true.1424, label %cond.false.1446

cond.true.1424:                                   ; preds = %lor.lhs.false.1419, %land.lhs.true.1414, %cond.false.1402, %cond.true.1396, %cond.true.1388, %cond.end.1378, %cond.end.1349
  %480 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1425 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %480, i32 0, i32 20
  %481 = load i64, i64* %dst_bytes1425, align 8
  %conv1426 = trunc i64 %481 to i32
  %482 = load i64, i64* %bytes.addr, align 8
  %conv1427 = trunc i64 %482 to i32
  %add1428 = add i32 %conv1426, %conv1427
  %cmp1429 = icmp ule i32 %add1428, 2147483647
  br i1 %cmp1429, label %cond.true.1431, label %cond.false.1436

cond.true.1431:                                   ; preds = %cond.true.1424
  %483 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1432 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %483, i32 0, i32 20
  %484 = load i64, i64* %dst_bytes1432, align 8
  %conv1433 = trunc i64 %484 to i32
  %485 = load i64, i64* %bytes.addr, align 8
  %conv1434 = trunc i64 %485 to i32
  %add1435 = add i32 %conv1433, %conv1434
  br label %cond.end.1443

cond.false.1436:                                  ; preds = %cond.true.1424
  %486 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1437 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %486, i32 0, i32 20
  %487 = load i64, i64* %dst_bytes1437, align 8
  %conv1438 = trunc i64 %487 to i32
  %488 = load i64, i64* %bytes.addr, align 8
  %conv1439 = trunc i64 %488 to i32
  %add1440 = add i32 %conv1438, %conv1439
  %sub1441 = sub i32 %add1440, -2147483648
  %add1442 = add nsw i32 %sub1441, -2147483648
  br label %cond.end.1443

cond.end.1443:                                    ; preds = %cond.false.1436, %cond.true.1431
  %cond1444 = phi i32 [ %add1435, %cond.true.1431 ], [ %add1442, %cond.false.1436 ]
  %conv1445 = sext i32 %cond1444 to i64
  store i64 %conv1445, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.1446:                                  ; preds = %lor.lhs.false.1419
  %489 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1447 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %489, i32 0, i32 20
  %490 = load i64, i64* %dst_bytes1447, align 8
  %conv1448 = trunc i64 %490 to i32
  %491 = load i64, i64* %bytes.addr, align 8
  %conv1449 = trunc i64 %491 to i32
  %add1450 = add i32 %conv1448, %conv1449
  %cmp1451 = icmp ule i32 %add1450, 2147483647
  br i1 %cmp1451, label %cond.true.1453, label %cond.false.1458

cond.true.1453:                                   ; preds = %cond.false.1446
  %492 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1454 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %492, i32 0, i32 20
  %493 = load i64, i64* %dst_bytes1454, align 8
  %conv1455 = trunc i64 %493 to i32
  %494 = load i64, i64* %bytes.addr, align 8
  %conv1456 = trunc i64 %494 to i32
  %add1457 = add i32 %conv1455, %conv1456
  br label %cond.end.1465

cond.false.1458:                                  ; preds = %cond.false.1446
  %495 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1459 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %495, i32 0, i32 20
  %496 = load i64, i64* %dst_bytes1459, align 8
  %conv1460 = trunc i64 %496 to i32
  %497 = load i64, i64* %bytes.addr, align 8
  %conv1461 = trunc i64 %497 to i32
  %add1462 = add i32 %conv1460, %conv1461
  %sub1463 = sub i32 %add1462, -2147483648
  %add1464 = add nsw i32 %sub1463, -2147483648
  br label %cond.end.1465

cond.end.1465:                                    ; preds = %cond.false.1458, %cond.true.1453
  %cond1466 = phi i32 [ %add1457, %cond.true.1453 ], [ %add1464, %cond.false.1458 ]
  %conv1467 = sext i32 %cond1466 to i64
  store i64 %conv1467, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.1468:                                  ; preds = %cond.false.1030
  br i1 true, label %cond.true.1469, label %cond.false.1836

cond.true.1469:                                   ; preds = %cond.false.1468
  br i1 false, label %cond.true.1470, label %cond.false.1653

cond.true.1470:                                   ; preds = %cond.true.1469
  %498 = load i64, i64* %bytes.addr, align 8
  %mul1471 = mul nsw i64 0, %498
  %499 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1472 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %499, i32 0, i32 20
  %500 = load i64, i64* %dst_bytes1472, align 8
  %add1473 = add nsw i64 %mul1471, %500
  %mul1474 = mul nsw i64 0, %add1473
  %sub1475 = sub nsw i64 %mul1474, 1
  %cmp1476 = icmp slt i64 %sub1475, 0
  br i1 %cmp1476, label %cond.true.1478, label %cond.false.1499

cond.true.1478:                                   ; preds = %cond.true.1470
  %501 = load i64, i64* %bytes.addr, align 8
  %mul1479 = mul nsw i64 0, %501
  %502 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1480 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %502, i32 0, i32 20
  %503 = load i64, i64* %dst_bytes1480, align 8
  %add1481 = add nsw i64 %mul1479, %503
  %mul1482 = mul nsw i64 0, %add1481
  %add1483 = add nsw i64 %mul1482, 0
  %neg1484 = xor i64 %add1483, -1
  %cmp1485 = icmp eq i64 %neg1484, -1
  %conv1486 = zext i1 %cmp1485 to i32
  %sub1487 = sub nsw i32 0, %conv1486
  %conv1488 = sext i32 %sub1487 to i64
  %504 = load i64, i64* %bytes.addr, align 8
  %mul1489 = mul nsw i64 0, %504
  %505 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1490 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %505, i32 0, i32 20
  %506 = load i64, i64* %dst_bytes1490, align 8
  %add1491 = add nsw i64 %mul1489, %506
  %mul1492 = mul nsw i64 0, %add1491
  %add1493 = add nsw i64 %mul1492, 1
  %shl1494 = shl i64 %add1493, 62
  %sub1495 = sub nsw i64 %shl1494, 1
  %mul1496 = mul nsw i64 %sub1495, 2
  %add1497 = add nsw i64 %mul1496, 1
  %sub1498 = sub nsw i64 %conv1488, %add1497
  br label %cond.end.1505

cond.false.1499:                                  ; preds = %cond.true.1470
  %507 = load i64, i64* %bytes.addr, align 8
  %mul1500 = mul nsw i64 0, %507
  %508 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1501 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %508, i32 0, i32 20
  %509 = load i64, i64* %dst_bytes1501, align 8
  %add1502 = add nsw i64 %mul1500, %509
  %mul1503 = mul nsw i64 0, %add1502
  %add1504 = add nsw i64 %mul1503, 0
  br label %cond.end.1505

cond.end.1505:                                    ; preds = %cond.false.1499, %cond.true.1478
  %cond1506 = phi i64 [ %sub1498, %cond.true.1478 ], [ %add1504, %cond.false.1499 ]
  %cmp1507 = icmp slt i64 %cond1506, 0
  br i1 %cmp1507, label %cond.true.1509, label %cond.false.1583

cond.true.1509:                                   ; preds = %cond.end.1505
  %510 = load i64, i64* %bytes.addr, align 8
  %cmp1510 = icmp slt i64 %510, 0
  br i1 %cmp1510, label %cond.true.1512, label %cond.false.1553

cond.true.1512:                                   ; preds = %cond.true.1509
  %511 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1513 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %511, i32 0, i32 20
  %512 = load i64, i64* %dst_bytes1513, align 8
  %513 = load i64, i64* %bytes.addr, align 8
  %mul1514 = mul nsw i64 0, %513
  %514 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1515 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %514, i32 0, i32 20
  %515 = load i64, i64* %dst_bytes1515, align 8
  %add1516 = add nsw i64 %mul1514, %515
  %mul1517 = mul nsw i64 0, %add1516
  %sub1518 = sub nsw i64 %mul1517, 1
  %cmp1519 = icmp slt i64 %sub1518, 0
  br i1 %cmp1519, label %cond.true.1521, label %cond.false.1542

cond.true.1521:                                   ; preds = %cond.true.1512
  %516 = load i64, i64* %bytes.addr, align 8
  %mul1522 = mul nsw i64 0, %516
  %517 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1523 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %517, i32 0, i32 20
  %518 = load i64, i64* %dst_bytes1523, align 8
  %add1524 = add nsw i64 %mul1522, %518
  %mul1525 = mul nsw i64 0, %add1524
  %add1526 = add nsw i64 %mul1525, 0
  %neg1527 = xor i64 %add1526, -1
  %cmp1528 = icmp eq i64 %neg1527, -1
  %conv1529 = zext i1 %cmp1528 to i32
  %sub1530 = sub nsw i32 0, %conv1529
  %conv1531 = sext i32 %sub1530 to i64
  %519 = load i64, i64* %bytes.addr, align 8
  %mul1532 = mul nsw i64 0, %519
  %520 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1533 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %520, i32 0, i32 20
  %521 = load i64, i64* %dst_bytes1533, align 8
  %add1534 = add nsw i64 %mul1532, %521
  %mul1535 = mul nsw i64 0, %add1534
  %add1536 = add nsw i64 %mul1535, 1
  %shl1537 = shl i64 %add1536, 62
  %sub1538 = sub nsw i64 %shl1537, 1
  %mul1539 = mul nsw i64 %sub1538, 2
  %add1540 = add nsw i64 %mul1539, 1
  %sub1541 = sub nsw i64 %conv1531, %add1540
  br label %cond.end.1548

cond.false.1542:                                  ; preds = %cond.true.1512
  %522 = load i64, i64* %bytes.addr, align 8
  %mul1543 = mul nsw i64 0, %522
  %523 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1544 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %523, i32 0, i32 20
  %524 = load i64, i64* %dst_bytes1544, align 8
  %add1545 = add nsw i64 %mul1543, %524
  %mul1546 = mul nsw i64 0, %add1545
  %add1547 = add nsw i64 %mul1546, 0
  br label %cond.end.1548

cond.end.1548:                                    ; preds = %cond.false.1542, %cond.true.1521
  %cond1549 = phi i64 [ %sub1541, %cond.true.1521 ], [ %add1547, %cond.false.1542 ]
  %525 = load i64, i64* %bytes.addr, align 8
  %sub1550 = sub nsw i64 %cond1549, %525
  %cmp1551 = icmp slt i64 %512, %sub1550
  br i1 %cmp1551, label %cond.true.1623, label %lor.lhs.false.1606

cond.false.1553:                                  ; preds = %cond.true.1509
  %526 = load i64, i64* %bytes.addr, align 8
  %mul1554 = mul nsw i64 0, %526
  %527 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1555 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %527, i32 0, i32 20
  %528 = load i64, i64* %dst_bytes1555, align 8
  %add1556 = add nsw i64 %mul1554, %528
  %mul1557 = mul nsw i64 0, %add1556
  %sub1558 = sub nsw i64 %mul1557, 1
  %cmp1559 = icmp slt i64 %sub1558, 0
  br i1 %cmp1559, label %cond.true.1561, label %cond.false.1571

cond.true.1561:                                   ; preds = %cond.false.1553
  %529 = load i64, i64* %bytes.addr, align 8
  %mul1562 = mul nsw i64 0, %529
  %530 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1563 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %530, i32 0, i32 20
  %531 = load i64, i64* %dst_bytes1563, align 8
  %add1564 = add nsw i64 %mul1562, %531
  %mul1565 = mul nsw i64 0, %add1564
  %add1566 = add nsw i64 %mul1565, 1
  %shl1567 = shl i64 %add1566, 62
  %sub1568 = sub nsw i64 %shl1567, 1
  %mul1569 = mul nsw i64 %sub1568, 2
  %add1570 = add nsw i64 %mul1569, 1
  br label %cond.end.1577

cond.false.1571:                                  ; preds = %cond.false.1553
  %532 = load i64, i64* %bytes.addr, align 8
  %mul1572 = mul nsw i64 0, %532
  %533 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1573 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %533, i32 0, i32 20
  %534 = load i64, i64* %dst_bytes1573, align 8
  %add1574 = add nsw i64 %mul1572, %534
  %mul1575 = mul nsw i64 0, %add1574
  %sub1576 = sub nsw i64 %mul1575, 1
  br label %cond.end.1577

cond.end.1577:                                    ; preds = %cond.false.1571, %cond.true.1561
  %cond1578 = phi i64 [ %add1570, %cond.true.1561 ], [ %sub1576, %cond.false.1571 ]
  %535 = load i64, i64* %bytes.addr, align 8
  %sub1579 = sub nsw i64 %cond1578, %535
  %536 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1580 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %536, i32 0, i32 20
  %537 = load i64, i64* %dst_bytes1580, align 8
  %cmp1581 = icmp slt i64 %sub1579, %537
  br i1 %cmp1581, label %cond.true.1623, label %lor.lhs.false.1606

cond.false.1583:                                  ; preds = %cond.end.1505
  %538 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1584 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %538, i32 0, i32 20
  %539 = load i64, i64* %dst_bytes1584, align 8
  %cmp1585 = icmp slt i64 %539, 0
  br i1 %cmp1585, label %cond.true.1587, label %cond.false.1592

cond.true.1587:                                   ; preds = %cond.false.1583
  %540 = load i64, i64* %bytes.addr, align 8
  %541 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1588 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %541, i32 0, i32 20
  %542 = load i64, i64* %dst_bytes1588, align 8
  %543 = load i64, i64* %bytes.addr, align 8
  %add1589 = add nsw i64 %542, %543
  %cmp1590 = icmp sle i64 %540, %add1589
  br i1 %cmp1590, label %cond.true.1623, label %lor.lhs.false.1606

cond.false.1592:                                  ; preds = %cond.false.1583
  %544 = load i64, i64* %bytes.addr, align 8
  %cmp1593 = icmp slt i64 %544, 0
  br i1 %cmp1593, label %cond.true.1595, label %cond.false.1601

cond.true.1595:                                   ; preds = %cond.false.1592
  %545 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1596 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %545, i32 0, i32 20
  %546 = load i64, i64* %dst_bytes1596, align 8
  %547 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1597 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %547, i32 0, i32 20
  %548 = load i64, i64* %dst_bytes1597, align 8
  %549 = load i64, i64* %bytes.addr, align 8
  %add1598 = add nsw i64 %548, %549
  %cmp1599 = icmp sle i64 %546, %add1598
  br i1 %cmp1599, label %cond.true.1623, label %lor.lhs.false.1606

cond.false.1601:                                  ; preds = %cond.false.1592
  %550 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1602 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %550, i32 0, i32 20
  %551 = load i64, i64* %dst_bytes1602, align 8
  %552 = load i64, i64* %bytes.addr, align 8
  %add1603 = add nsw i64 %551, %552
  %553 = load i64, i64* %bytes.addr, align 8
  %cmp1604 = icmp slt i64 %add1603, %553
  br i1 %cmp1604, label %cond.true.1623, label %lor.lhs.false.1606

lor.lhs.false.1606:                               ; preds = %cond.false.1601, %cond.true.1595, %cond.true.1587, %cond.end.1577, %cond.end.1548
  %554 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1607 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %554, i32 0, i32 20
  %555 = load i64, i64* %dst_bytes1607, align 8
  %556 = load i64, i64* %bytes.addr, align 8
  %add1608 = add nsw i64 %555, %556
  %mul1609 = mul nsw i64 0, %add1608
  %sub1610 = sub nsw i64 %mul1609, 1
  %cmp1611 = icmp slt i64 %sub1610, 0
  br i1 %cmp1611, label %land.lhs.true.1613, label %lor.lhs.false.1618

land.lhs.true.1613:                               ; preds = %lor.lhs.false.1606
  %557 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1614 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %557, i32 0, i32 20
  %558 = load i64, i64* %dst_bytes1614, align 8
  %559 = load i64, i64* %bytes.addr, align 8
  %add1615 = add nsw i64 %558, %559
  %cmp1616 = icmp slt i64 %add1615, -9223372036854775808
  br i1 %cmp1616, label %cond.true.1623, label %lor.lhs.false.1618

lor.lhs.false.1618:                               ; preds = %land.lhs.true.1613, %lor.lhs.false.1606
  %560 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1619 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %560, i32 0, i32 20
  %561 = load i64, i64* %dst_bytes1619, align 8
  %562 = load i64, i64* %bytes.addr, align 8
  %add1620 = add nsw i64 %561, %562
  %cmp1621 = icmp slt i64 9223372036854775807, %add1620
  br i1 %cmp1621, label %cond.true.1623, label %cond.false.1638

cond.true.1623:                                   ; preds = %lor.lhs.false.1618, %land.lhs.true.1613, %cond.false.1601, %cond.true.1595, %cond.true.1587, %cond.end.1577, %cond.end.1548
  %563 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1624 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %563, i32 0, i32 20
  %564 = load i64, i64* %dst_bytes1624, align 8
  %565 = load i64, i64* %bytes.addr, align 8
  %add1625 = add i64 %564, %565
  %cmp1626 = icmp ule i64 %add1625, 9223372036854775807
  br i1 %cmp1626, label %cond.true.1628, label %cond.false.1631

cond.true.1628:                                   ; preds = %cond.true.1623
  %566 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1629 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %566, i32 0, i32 20
  %567 = load i64, i64* %dst_bytes1629, align 8
  %568 = load i64, i64* %bytes.addr, align 8
  %add1630 = add i64 %567, %568
  br label %cond.end.1636

cond.false.1631:                                  ; preds = %cond.true.1623
  %569 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1632 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %569, i32 0, i32 20
  %570 = load i64, i64* %dst_bytes1632, align 8
  %571 = load i64, i64* %bytes.addr, align 8
  %add1633 = add i64 %570, %571
  %sub1634 = sub i64 %add1633, -9223372036854775808
  %add1635 = add nsw i64 %sub1634, -9223372036854775808
  br label %cond.end.1636

cond.end.1636:                                    ; preds = %cond.false.1631, %cond.true.1628
  %cond1637 = phi i64 [ %add1630, %cond.true.1628 ], [ %add1635, %cond.false.1631 ]
  store i64 %cond1637, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.1638:                                  ; preds = %lor.lhs.false.1618
  %572 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1639 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %572, i32 0, i32 20
  %573 = load i64, i64* %dst_bytes1639, align 8
  %574 = load i64, i64* %bytes.addr, align 8
  %add1640 = add i64 %573, %574
  %cmp1641 = icmp ule i64 %add1640, 9223372036854775807
  br i1 %cmp1641, label %cond.true.1643, label %cond.false.1646

cond.true.1643:                                   ; preds = %cond.false.1638
  %575 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1644 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %575, i32 0, i32 20
  %576 = load i64, i64* %dst_bytes1644, align 8
  %577 = load i64, i64* %bytes.addr, align 8
  %add1645 = add i64 %576, %577
  br label %cond.end.1651

cond.false.1646:                                  ; preds = %cond.false.1638
  %578 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1647 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %578, i32 0, i32 20
  %579 = load i64, i64* %dst_bytes1647, align 8
  %580 = load i64, i64* %bytes.addr, align 8
  %add1648 = add i64 %579, %580
  %sub1649 = sub i64 %add1648, -9223372036854775808
  %add1650 = add nsw i64 %sub1649, -9223372036854775808
  br label %cond.end.1651

cond.end.1651:                                    ; preds = %cond.false.1646, %cond.true.1643
  %cond1652 = phi i64 [ %add1645, %cond.true.1643 ], [ %add1650, %cond.false.1646 ]
  store i64 %cond1652, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.1653:                                  ; preds = %cond.true.1469
  %581 = load i64, i64* %bytes.addr, align 8
  %mul1654 = mul nsw i64 0, %581
  %582 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1655 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %582, i32 0, i32 20
  %583 = load i64, i64* %dst_bytes1655, align 8
  %add1656 = add nsw i64 %mul1654, %583
  %mul1657 = mul nsw i64 0, %add1656
  %sub1658 = sub nsw i64 %mul1657, 1
  %cmp1659 = icmp slt i64 %sub1658, 0
  br i1 %cmp1659, label %cond.true.1661, label %cond.false.1682

cond.true.1661:                                   ; preds = %cond.false.1653
  %584 = load i64, i64* %bytes.addr, align 8
  %mul1662 = mul nsw i64 0, %584
  %585 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1663 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %585, i32 0, i32 20
  %586 = load i64, i64* %dst_bytes1663, align 8
  %add1664 = add nsw i64 %mul1662, %586
  %mul1665 = mul nsw i64 0, %add1664
  %add1666 = add nsw i64 %mul1665, 0
  %neg1667 = xor i64 %add1666, -1
  %cmp1668 = icmp eq i64 %neg1667, -1
  %conv1669 = zext i1 %cmp1668 to i32
  %sub1670 = sub nsw i32 0, %conv1669
  %conv1671 = sext i32 %sub1670 to i64
  %587 = load i64, i64* %bytes.addr, align 8
  %mul1672 = mul nsw i64 0, %587
  %588 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1673 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %588, i32 0, i32 20
  %589 = load i64, i64* %dst_bytes1673, align 8
  %add1674 = add nsw i64 %mul1672, %589
  %mul1675 = mul nsw i64 0, %add1674
  %add1676 = add nsw i64 %mul1675, 1
  %shl1677 = shl i64 %add1676, 62
  %sub1678 = sub nsw i64 %shl1677, 1
  %mul1679 = mul nsw i64 %sub1678, 2
  %add1680 = add nsw i64 %mul1679, 1
  %sub1681 = sub nsw i64 %conv1671, %add1680
  br label %cond.end.1688

cond.false.1682:                                  ; preds = %cond.false.1653
  %590 = load i64, i64* %bytes.addr, align 8
  %mul1683 = mul nsw i64 0, %590
  %591 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1684 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %591, i32 0, i32 20
  %592 = load i64, i64* %dst_bytes1684, align 8
  %add1685 = add nsw i64 %mul1683, %592
  %mul1686 = mul nsw i64 0, %add1685
  %add1687 = add nsw i64 %mul1686, 0
  br label %cond.end.1688

cond.end.1688:                                    ; preds = %cond.false.1682, %cond.true.1661
  %cond1689 = phi i64 [ %sub1681, %cond.true.1661 ], [ %add1687, %cond.false.1682 ]
  %cmp1690 = icmp slt i64 %cond1689, 0
  br i1 %cmp1690, label %cond.true.1692, label %cond.false.1766

cond.true.1692:                                   ; preds = %cond.end.1688
  %593 = load i64, i64* %bytes.addr, align 8
  %cmp1693 = icmp slt i64 %593, 0
  br i1 %cmp1693, label %cond.true.1695, label %cond.false.1736

cond.true.1695:                                   ; preds = %cond.true.1692
  %594 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1696 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %594, i32 0, i32 20
  %595 = load i64, i64* %dst_bytes1696, align 8
  %596 = load i64, i64* %bytes.addr, align 8
  %mul1697 = mul nsw i64 0, %596
  %597 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1698 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %597, i32 0, i32 20
  %598 = load i64, i64* %dst_bytes1698, align 8
  %add1699 = add nsw i64 %mul1697, %598
  %mul1700 = mul nsw i64 0, %add1699
  %sub1701 = sub nsw i64 %mul1700, 1
  %cmp1702 = icmp slt i64 %sub1701, 0
  br i1 %cmp1702, label %cond.true.1704, label %cond.false.1725

cond.true.1704:                                   ; preds = %cond.true.1695
  %599 = load i64, i64* %bytes.addr, align 8
  %mul1705 = mul nsw i64 0, %599
  %600 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1706 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %600, i32 0, i32 20
  %601 = load i64, i64* %dst_bytes1706, align 8
  %add1707 = add nsw i64 %mul1705, %601
  %mul1708 = mul nsw i64 0, %add1707
  %add1709 = add nsw i64 %mul1708, 0
  %neg1710 = xor i64 %add1709, -1
  %cmp1711 = icmp eq i64 %neg1710, -1
  %conv1712 = zext i1 %cmp1711 to i32
  %sub1713 = sub nsw i32 0, %conv1712
  %conv1714 = sext i32 %sub1713 to i64
  %602 = load i64, i64* %bytes.addr, align 8
  %mul1715 = mul nsw i64 0, %602
  %603 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1716 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %603, i32 0, i32 20
  %604 = load i64, i64* %dst_bytes1716, align 8
  %add1717 = add nsw i64 %mul1715, %604
  %mul1718 = mul nsw i64 0, %add1717
  %add1719 = add nsw i64 %mul1718, 1
  %shl1720 = shl i64 %add1719, 62
  %sub1721 = sub nsw i64 %shl1720, 1
  %mul1722 = mul nsw i64 %sub1721, 2
  %add1723 = add nsw i64 %mul1722, 1
  %sub1724 = sub nsw i64 %conv1714, %add1723
  br label %cond.end.1731

cond.false.1725:                                  ; preds = %cond.true.1695
  %605 = load i64, i64* %bytes.addr, align 8
  %mul1726 = mul nsw i64 0, %605
  %606 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1727 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %606, i32 0, i32 20
  %607 = load i64, i64* %dst_bytes1727, align 8
  %add1728 = add nsw i64 %mul1726, %607
  %mul1729 = mul nsw i64 0, %add1728
  %add1730 = add nsw i64 %mul1729, 0
  br label %cond.end.1731

cond.end.1731:                                    ; preds = %cond.false.1725, %cond.true.1704
  %cond1732 = phi i64 [ %sub1724, %cond.true.1704 ], [ %add1730, %cond.false.1725 ]
  %608 = load i64, i64* %bytes.addr, align 8
  %sub1733 = sub nsw i64 %cond1732, %608
  %cmp1734 = icmp slt i64 %595, %sub1733
  br i1 %cmp1734, label %cond.true.1806, label %lor.lhs.false.1789

cond.false.1736:                                  ; preds = %cond.true.1692
  %609 = load i64, i64* %bytes.addr, align 8
  %mul1737 = mul nsw i64 0, %609
  %610 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1738 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %610, i32 0, i32 20
  %611 = load i64, i64* %dst_bytes1738, align 8
  %add1739 = add nsw i64 %mul1737, %611
  %mul1740 = mul nsw i64 0, %add1739
  %sub1741 = sub nsw i64 %mul1740, 1
  %cmp1742 = icmp slt i64 %sub1741, 0
  br i1 %cmp1742, label %cond.true.1744, label %cond.false.1754

cond.true.1744:                                   ; preds = %cond.false.1736
  %612 = load i64, i64* %bytes.addr, align 8
  %mul1745 = mul nsw i64 0, %612
  %613 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1746 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %613, i32 0, i32 20
  %614 = load i64, i64* %dst_bytes1746, align 8
  %add1747 = add nsw i64 %mul1745, %614
  %mul1748 = mul nsw i64 0, %add1747
  %add1749 = add nsw i64 %mul1748, 1
  %shl1750 = shl i64 %add1749, 62
  %sub1751 = sub nsw i64 %shl1750, 1
  %mul1752 = mul nsw i64 %sub1751, 2
  %add1753 = add nsw i64 %mul1752, 1
  br label %cond.end.1760

cond.false.1754:                                  ; preds = %cond.false.1736
  %615 = load i64, i64* %bytes.addr, align 8
  %mul1755 = mul nsw i64 0, %615
  %616 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1756 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %616, i32 0, i32 20
  %617 = load i64, i64* %dst_bytes1756, align 8
  %add1757 = add nsw i64 %mul1755, %617
  %mul1758 = mul nsw i64 0, %add1757
  %sub1759 = sub nsw i64 %mul1758, 1
  br label %cond.end.1760

cond.end.1760:                                    ; preds = %cond.false.1754, %cond.true.1744
  %cond1761 = phi i64 [ %add1753, %cond.true.1744 ], [ %sub1759, %cond.false.1754 ]
  %618 = load i64, i64* %bytes.addr, align 8
  %sub1762 = sub nsw i64 %cond1761, %618
  %619 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1763 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %619, i32 0, i32 20
  %620 = load i64, i64* %dst_bytes1763, align 8
  %cmp1764 = icmp slt i64 %sub1762, %620
  br i1 %cmp1764, label %cond.true.1806, label %lor.lhs.false.1789

cond.false.1766:                                  ; preds = %cond.end.1688
  %621 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1767 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %621, i32 0, i32 20
  %622 = load i64, i64* %dst_bytes1767, align 8
  %cmp1768 = icmp slt i64 %622, 0
  br i1 %cmp1768, label %cond.true.1770, label %cond.false.1775

cond.true.1770:                                   ; preds = %cond.false.1766
  %623 = load i64, i64* %bytes.addr, align 8
  %624 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1771 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %624, i32 0, i32 20
  %625 = load i64, i64* %dst_bytes1771, align 8
  %626 = load i64, i64* %bytes.addr, align 8
  %add1772 = add nsw i64 %625, %626
  %cmp1773 = icmp sle i64 %623, %add1772
  br i1 %cmp1773, label %cond.true.1806, label %lor.lhs.false.1789

cond.false.1775:                                  ; preds = %cond.false.1766
  %627 = load i64, i64* %bytes.addr, align 8
  %cmp1776 = icmp slt i64 %627, 0
  br i1 %cmp1776, label %cond.true.1778, label %cond.false.1784

cond.true.1778:                                   ; preds = %cond.false.1775
  %628 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1779 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %628, i32 0, i32 20
  %629 = load i64, i64* %dst_bytes1779, align 8
  %630 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1780 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %630, i32 0, i32 20
  %631 = load i64, i64* %dst_bytes1780, align 8
  %632 = load i64, i64* %bytes.addr, align 8
  %add1781 = add nsw i64 %631, %632
  %cmp1782 = icmp sle i64 %629, %add1781
  br i1 %cmp1782, label %cond.true.1806, label %lor.lhs.false.1789

cond.false.1784:                                  ; preds = %cond.false.1775
  %633 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1785 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %633, i32 0, i32 20
  %634 = load i64, i64* %dst_bytes1785, align 8
  %635 = load i64, i64* %bytes.addr, align 8
  %add1786 = add nsw i64 %634, %635
  %636 = load i64, i64* %bytes.addr, align 8
  %cmp1787 = icmp slt i64 %add1786, %636
  br i1 %cmp1787, label %cond.true.1806, label %lor.lhs.false.1789

lor.lhs.false.1789:                               ; preds = %cond.false.1784, %cond.true.1778, %cond.true.1770, %cond.end.1760, %cond.end.1731
  %637 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1790 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %637, i32 0, i32 20
  %638 = load i64, i64* %dst_bytes1790, align 8
  %639 = load i64, i64* %bytes.addr, align 8
  %add1791 = add nsw i64 %638, %639
  %mul1792 = mul nsw i64 0, %add1791
  %sub1793 = sub nsw i64 %mul1792, 1
  %cmp1794 = icmp slt i64 %sub1793, 0
  br i1 %cmp1794, label %land.lhs.true.1796, label %lor.lhs.false.1801

land.lhs.true.1796:                               ; preds = %lor.lhs.false.1789
  %640 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1797 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %640, i32 0, i32 20
  %641 = load i64, i64* %dst_bytes1797, align 8
  %642 = load i64, i64* %bytes.addr, align 8
  %add1798 = add nsw i64 %641, %642
  %cmp1799 = icmp slt i64 %add1798, -9223372036854775808
  br i1 %cmp1799, label %cond.true.1806, label %lor.lhs.false.1801

lor.lhs.false.1801:                               ; preds = %land.lhs.true.1796, %lor.lhs.false.1789
  %643 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1802 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %643, i32 0, i32 20
  %644 = load i64, i64* %dst_bytes1802, align 8
  %645 = load i64, i64* %bytes.addr, align 8
  %add1803 = add nsw i64 %644, %645
  %cmp1804 = icmp slt i64 9223372036854775807, %add1803
  br i1 %cmp1804, label %cond.true.1806, label %cond.false.1821

cond.true.1806:                                   ; preds = %lor.lhs.false.1801, %land.lhs.true.1796, %cond.false.1784, %cond.true.1778, %cond.true.1770, %cond.end.1760, %cond.end.1731
  %646 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1807 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %646, i32 0, i32 20
  %647 = load i64, i64* %dst_bytes1807, align 8
  %648 = load i64, i64* %bytes.addr, align 8
  %add1808 = add i64 %647, %648
  %cmp1809 = icmp ule i64 %add1808, 9223372036854775807
  br i1 %cmp1809, label %cond.true.1811, label %cond.false.1814

cond.true.1811:                                   ; preds = %cond.true.1806
  %649 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1812 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %649, i32 0, i32 20
  %650 = load i64, i64* %dst_bytes1812, align 8
  %651 = load i64, i64* %bytes.addr, align 8
  %add1813 = add i64 %650, %651
  br label %cond.end.1819

cond.false.1814:                                  ; preds = %cond.true.1806
  %652 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1815 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %652, i32 0, i32 20
  %653 = load i64, i64* %dst_bytes1815, align 8
  %654 = load i64, i64* %bytes.addr, align 8
  %add1816 = add i64 %653, %654
  %sub1817 = sub i64 %add1816, -9223372036854775808
  %add1818 = add nsw i64 %sub1817, -9223372036854775808
  br label %cond.end.1819

cond.end.1819:                                    ; preds = %cond.false.1814, %cond.true.1811
  %cond1820 = phi i64 [ %add1813, %cond.true.1811 ], [ %add1818, %cond.false.1814 ]
  store i64 %cond1820, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.1821:                                  ; preds = %lor.lhs.false.1801
  %655 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1822 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %655, i32 0, i32 20
  %656 = load i64, i64* %dst_bytes1822, align 8
  %657 = load i64, i64* %bytes.addr, align 8
  %add1823 = add i64 %656, %657
  %cmp1824 = icmp ule i64 %add1823, 9223372036854775807
  br i1 %cmp1824, label %cond.true.1826, label %cond.false.1829

cond.true.1826:                                   ; preds = %cond.false.1821
  %658 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1827 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %658, i32 0, i32 20
  %659 = load i64, i64* %dst_bytes1827, align 8
  %660 = load i64, i64* %bytes.addr, align 8
  %add1828 = add i64 %659, %660
  br label %cond.end.1834

cond.false.1829:                                  ; preds = %cond.false.1821
  %661 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1830 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %661, i32 0, i32 20
  %662 = load i64, i64* %dst_bytes1830, align 8
  %663 = load i64, i64* %bytes.addr, align 8
  %add1831 = add i64 %662, %663
  %sub1832 = sub i64 %add1831, -9223372036854775808
  %add1833 = add nsw i64 %sub1832, -9223372036854775808
  br label %cond.end.1834

cond.end.1834:                                    ; preds = %cond.false.1829, %cond.true.1826
  %cond1835 = phi i64 [ %add1828, %cond.true.1826 ], [ %add1833, %cond.false.1829 ]
  store i64 %cond1835, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.1836:                                  ; preds = %cond.false.1468
  br i1 false, label %cond.true.1837, label %cond.false.2020

cond.true.1837:                                   ; preds = %cond.false.1836
  %664 = load i64, i64* %bytes.addr, align 8
  %mul1838 = mul nsw i64 0, %664
  %665 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1839 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %665, i32 0, i32 20
  %666 = load i64, i64* %dst_bytes1839, align 8
  %add1840 = add nsw i64 %mul1838, %666
  %mul1841 = mul nsw i64 0, %add1840
  %sub1842 = sub nsw i64 %mul1841, 1
  %cmp1843 = icmp slt i64 %sub1842, 0
  br i1 %cmp1843, label %cond.true.1845, label %cond.false.1866

cond.true.1845:                                   ; preds = %cond.true.1837
  %667 = load i64, i64* %bytes.addr, align 8
  %mul1846 = mul nsw i64 0, %667
  %668 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1847 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %668, i32 0, i32 20
  %669 = load i64, i64* %dst_bytes1847, align 8
  %add1848 = add nsw i64 %mul1846, %669
  %mul1849 = mul nsw i64 0, %add1848
  %add1850 = add nsw i64 %mul1849, 0
  %neg1851 = xor i64 %add1850, -1
  %cmp1852 = icmp eq i64 %neg1851, -1
  %conv1853 = zext i1 %cmp1852 to i32
  %sub1854 = sub nsw i32 0, %conv1853
  %conv1855 = sext i32 %sub1854 to i64
  %670 = load i64, i64* %bytes.addr, align 8
  %mul1856 = mul nsw i64 0, %670
  %671 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1857 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %671, i32 0, i32 20
  %672 = load i64, i64* %dst_bytes1857, align 8
  %add1858 = add nsw i64 %mul1856, %672
  %mul1859 = mul nsw i64 0, %add1858
  %add1860 = add nsw i64 %mul1859, 1
  %shl1861 = shl i64 %add1860, 62
  %sub1862 = sub nsw i64 %shl1861, 1
  %mul1863 = mul nsw i64 %sub1862, 2
  %add1864 = add nsw i64 %mul1863, 1
  %sub1865 = sub nsw i64 %conv1855, %add1864
  br label %cond.end.1872

cond.false.1866:                                  ; preds = %cond.true.1837
  %673 = load i64, i64* %bytes.addr, align 8
  %mul1867 = mul nsw i64 0, %673
  %674 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1868 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %674, i32 0, i32 20
  %675 = load i64, i64* %dst_bytes1868, align 8
  %add1869 = add nsw i64 %mul1867, %675
  %mul1870 = mul nsw i64 0, %add1869
  %add1871 = add nsw i64 %mul1870, 0
  br label %cond.end.1872

cond.end.1872:                                    ; preds = %cond.false.1866, %cond.true.1845
  %cond1873 = phi i64 [ %sub1865, %cond.true.1845 ], [ %add1871, %cond.false.1866 ]
  %cmp1874 = icmp slt i64 %cond1873, 0
  br i1 %cmp1874, label %cond.true.1876, label %cond.false.1950

cond.true.1876:                                   ; preds = %cond.end.1872
  %676 = load i64, i64* %bytes.addr, align 8
  %cmp1877 = icmp slt i64 %676, 0
  br i1 %cmp1877, label %cond.true.1879, label %cond.false.1920

cond.true.1879:                                   ; preds = %cond.true.1876
  %677 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1880 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %677, i32 0, i32 20
  %678 = load i64, i64* %dst_bytes1880, align 8
  %679 = load i64, i64* %bytes.addr, align 8
  %mul1881 = mul nsw i64 0, %679
  %680 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1882 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %680, i32 0, i32 20
  %681 = load i64, i64* %dst_bytes1882, align 8
  %add1883 = add nsw i64 %mul1881, %681
  %mul1884 = mul nsw i64 0, %add1883
  %sub1885 = sub nsw i64 %mul1884, 1
  %cmp1886 = icmp slt i64 %sub1885, 0
  br i1 %cmp1886, label %cond.true.1888, label %cond.false.1909

cond.true.1888:                                   ; preds = %cond.true.1879
  %682 = load i64, i64* %bytes.addr, align 8
  %mul1889 = mul nsw i64 0, %682
  %683 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1890 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %683, i32 0, i32 20
  %684 = load i64, i64* %dst_bytes1890, align 8
  %add1891 = add nsw i64 %mul1889, %684
  %mul1892 = mul nsw i64 0, %add1891
  %add1893 = add nsw i64 %mul1892, 0
  %neg1894 = xor i64 %add1893, -1
  %cmp1895 = icmp eq i64 %neg1894, -1
  %conv1896 = zext i1 %cmp1895 to i32
  %sub1897 = sub nsw i32 0, %conv1896
  %conv1898 = sext i32 %sub1897 to i64
  %685 = load i64, i64* %bytes.addr, align 8
  %mul1899 = mul nsw i64 0, %685
  %686 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1900 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %686, i32 0, i32 20
  %687 = load i64, i64* %dst_bytes1900, align 8
  %add1901 = add nsw i64 %mul1899, %687
  %mul1902 = mul nsw i64 0, %add1901
  %add1903 = add nsw i64 %mul1902, 1
  %shl1904 = shl i64 %add1903, 62
  %sub1905 = sub nsw i64 %shl1904, 1
  %mul1906 = mul nsw i64 %sub1905, 2
  %add1907 = add nsw i64 %mul1906, 1
  %sub1908 = sub nsw i64 %conv1898, %add1907
  br label %cond.end.1915

cond.false.1909:                                  ; preds = %cond.true.1879
  %688 = load i64, i64* %bytes.addr, align 8
  %mul1910 = mul nsw i64 0, %688
  %689 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1911 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %689, i32 0, i32 20
  %690 = load i64, i64* %dst_bytes1911, align 8
  %add1912 = add nsw i64 %mul1910, %690
  %mul1913 = mul nsw i64 0, %add1912
  %add1914 = add nsw i64 %mul1913, 0
  br label %cond.end.1915

cond.end.1915:                                    ; preds = %cond.false.1909, %cond.true.1888
  %cond1916 = phi i64 [ %sub1908, %cond.true.1888 ], [ %add1914, %cond.false.1909 ]
  %691 = load i64, i64* %bytes.addr, align 8
  %sub1917 = sub nsw i64 %cond1916, %691
  %cmp1918 = icmp slt i64 %678, %sub1917
  br i1 %cmp1918, label %cond.true.1990, label %lor.lhs.false.1973

cond.false.1920:                                  ; preds = %cond.true.1876
  %692 = load i64, i64* %bytes.addr, align 8
  %mul1921 = mul nsw i64 0, %692
  %693 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1922 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %693, i32 0, i32 20
  %694 = load i64, i64* %dst_bytes1922, align 8
  %add1923 = add nsw i64 %mul1921, %694
  %mul1924 = mul nsw i64 0, %add1923
  %sub1925 = sub nsw i64 %mul1924, 1
  %cmp1926 = icmp slt i64 %sub1925, 0
  br i1 %cmp1926, label %cond.true.1928, label %cond.false.1938

cond.true.1928:                                   ; preds = %cond.false.1920
  %695 = load i64, i64* %bytes.addr, align 8
  %mul1929 = mul nsw i64 0, %695
  %696 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1930 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %696, i32 0, i32 20
  %697 = load i64, i64* %dst_bytes1930, align 8
  %add1931 = add nsw i64 %mul1929, %697
  %mul1932 = mul nsw i64 0, %add1931
  %add1933 = add nsw i64 %mul1932, 1
  %shl1934 = shl i64 %add1933, 62
  %sub1935 = sub nsw i64 %shl1934, 1
  %mul1936 = mul nsw i64 %sub1935, 2
  %add1937 = add nsw i64 %mul1936, 1
  br label %cond.end.1944

cond.false.1938:                                  ; preds = %cond.false.1920
  %698 = load i64, i64* %bytes.addr, align 8
  %mul1939 = mul nsw i64 0, %698
  %699 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1940 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %699, i32 0, i32 20
  %700 = load i64, i64* %dst_bytes1940, align 8
  %add1941 = add nsw i64 %mul1939, %700
  %mul1942 = mul nsw i64 0, %add1941
  %sub1943 = sub nsw i64 %mul1942, 1
  br label %cond.end.1944

cond.end.1944:                                    ; preds = %cond.false.1938, %cond.true.1928
  %cond1945 = phi i64 [ %add1937, %cond.true.1928 ], [ %sub1943, %cond.false.1938 ]
  %701 = load i64, i64* %bytes.addr, align 8
  %sub1946 = sub nsw i64 %cond1945, %701
  %702 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1947 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %702, i32 0, i32 20
  %703 = load i64, i64* %dst_bytes1947, align 8
  %cmp1948 = icmp slt i64 %sub1946, %703
  br i1 %cmp1948, label %cond.true.1990, label %lor.lhs.false.1973

cond.false.1950:                                  ; preds = %cond.end.1872
  %704 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1951 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %704, i32 0, i32 20
  %705 = load i64, i64* %dst_bytes1951, align 8
  %cmp1952 = icmp slt i64 %705, 0
  br i1 %cmp1952, label %cond.true.1954, label %cond.false.1959

cond.true.1954:                                   ; preds = %cond.false.1950
  %706 = load i64, i64* %bytes.addr, align 8
  %707 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1955 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %707, i32 0, i32 20
  %708 = load i64, i64* %dst_bytes1955, align 8
  %709 = load i64, i64* %bytes.addr, align 8
  %add1956 = add nsw i64 %708, %709
  %cmp1957 = icmp sle i64 %706, %add1956
  br i1 %cmp1957, label %cond.true.1990, label %lor.lhs.false.1973

cond.false.1959:                                  ; preds = %cond.false.1950
  %710 = load i64, i64* %bytes.addr, align 8
  %cmp1960 = icmp slt i64 %710, 0
  br i1 %cmp1960, label %cond.true.1962, label %cond.false.1968

cond.true.1962:                                   ; preds = %cond.false.1959
  %711 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1963 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %711, i32 0, i32 20
  %712 = load i64, i64* %dst_bytes1963, align 8
  %713 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1964 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %713, i32 0, i32 20
  %714 = load i64, i64* %dst_bytes1964, align 8
  %715 = load i64, i64* %bytes.addr, align 8
  %add1965 = add nsw i64 %714, %715
  %cmp1966 = icmp sle i64 %712, %add1965
  br i1 %cmp1966, label %cond.true.1990, label %lor.lhs.false.1973

cond.false.1968:                                  ; preds = %cond.false.1959
  %716 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1969 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %716, i32 0, i32 20
  %717 = load i64, i64* %dst_bytes1969, align 8
  %718 = load i64, i64* %bytes.addr, align 8
  %add1970 = add nsw i64 %717, %718
  %719 = load i64, i64* %bytes.addr, align 8
  %cmp1971 = icmp slt i64 %add1970, %719
  br i1 %cmp1971, label %cond.true.1990, label %lor.lhs.false.1973

lor.lhs.false.1973:                               ; preds = %cond.false.1968, %cond.true.1962, %cond.true.1954, %cond.end.1944, %cond.end.1915
  %720 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1974 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %720, i32 0, i32 20
  %721 = load i64, i64* %dst_bytes1974, align 8
  %722 = load i64, i64* %bytes.addr, align 8
  %add1975 = add nsw i64 %721, %722
  %mul1976 = mul nsw i64 0, %add1975
  %sub1977 = sub nsw i64 %mul1976, 1
  %cmp1978 = icmp slt i64 %sub1977, 0
  br i1 %cmp1978, label %land.lhs.true.1980, label %lor.lhs.false.1985

land.lhs.true.1980:                               ; preds = %lor.lhs.false.1973
  %723 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1981 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %723, i32 0, i32 20
  %724 = load i64, i64* %dst_bytes1981, align 8
  %725 = load i64, i64* %bytes.addr, align 8
  %add1982 = add nsw i64 %724, %725
  %cmp1983 = icmp slt i64 %add1982, -9223372036854775808
  br i1 %cmp1983, label %cond.true.1990, label %lor.lhs.false.1985

lor.lhs.false.1985:                               ; preds = %land.lhs.true.1980, %lor.lhs.false.1973
  %726 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1986 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %726, i32 0, i32 20
  %727 = load i64, i64* %dst_bytes1986, align 8
  %728 = load i64, i64* %bytes.addr, align 8
  %add1987 = add nsw i64 %727, %728
  %cmp1988 = icmp slt i64 9223372036854775807, %add1987
  br i1 %cmp1988, label %cond.true.1990, label %cond.false.2005

cond.true.1990:                                   ; preds = %lor.lhs.false.1985, %land.lhs.true.1980, %cond.false.1968, %cond.true.1962, %cond.true.1954, %cond.end.1944, %cond.end.1915
  %729 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1991 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %729, i32 0, i32 20
  %730 = load i64, i64* %dst_bytes1991, align 8
  %731 = load i64, i64* %bytes.addr, align 8
  %add1992 = add i64 %730, %731
  %cmp1993 = icmp ule i64 %add1992, 9223372036854775807
  br i1 %cmp1993, label %cond.true.1995, label %cond.false.1998

cond.true.1995:                                   ; preds = %cond.true.1990
  %732 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1996 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %732, i32 0, i32 20
  %733 = load i64, i64* %dst_bytes1996, align 8
  %734 = load i64, i64* %bytes.addr, align 8
  %add1997 = add i64 %733, %734
  br label %cond.end.2003

cond.false.1998:                                  ; preds = %cond.true.1990
  %735 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes1999 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %735, i32 0, i32 20
  %736 = load i64, i64* %dst_bytes1999, align 8
  %737 = load i64, i64* %bytes.addr, align 8
  %add2000 = add i64 %736, %737
  %sub2001 = sub i64 %add2000, -9223372036854775808
  %add2002 = add nsw i64 %sub2001, -9223372036854775808
  br label %cond.end.2003

cond.end.2003:                                    ; preds = %cond.false.1998, %cond.true.1995
  %cond2004 = phi i64 [ %add1997, %cond.true.1995 ], [ %add2002, %cond.false.1998 ]
  store i64 %cond2004, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.2005:                                  ; preds = %lor.lhs.false.1985
  %738 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2006 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %738, i32 0, i32 20
  %739 = load i64, i64* %dst_bytes2006, align 8
  %740 = load i64, i64* %bytes.addr, align 8
  %add2007 = add i64 %739, %740
  %cmp2008 = icmp ule i64 %add2007, 9223372036854775807
  br i1 %cmp2008, label %cond.true.2010, label %cond.false.2013

cond.true.2010:                                   ; preds = %cond.false.2005
  %741 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2011 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %741, i32 0, i32 20
  %742 = load i64, i64* %dst_bytes2011, align 8
  %743 = load i64, i64* %bytes.addr, align 8
  %add2012 = add i64 %742, %743
  br label %cond.end.2018

cond.false.2013:                                  ; preds = %cond.false.2005
  %744 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2014 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %744, i32 0, i32 20
  %745 = load i64, i64* %dst_bytes2014, align 8
  %746 = load i64, i64* %bytes.addr, align 8
  %add2015 = add i64 %745, %746
  %sub2016 = sub i64 %add2015, -9223372036854775808
  %add2017 = add nsw i64 %sub2016, -9223372036854775808
  br label %cond.end.2018

cond.end.2018:                                    ; preds = %cond.false.2013, %cond.true.2010
  %cond2019 = phi i64 [ %add2012, %cond.true.2010 ], [ %add2017, %cond.false.2013 ]
  store i64 %cond2019, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

cond.false.2020:                                  ; preds = %cond.false.1836
  %747 = load i64, i64* %bytes.addr, align 8
  %mul2021 = mul nsw i64 0, %747
  %748 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2022 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %748, i32 0, i32 20
  %749 = load i64, i64* %dst_bytes2022, align 8
  %add2023 = add nsw i64 %mul2021, %749
  %mul2024 = mul nsw i64 0, %add2023
  %sub2025 = sub nsw i64 %mul2024, 1
  %cmp2026 = icmp slt i64 %sub2025, 0
  br i1 %cmp2026, label %cond.true.2028, label %cond.false.2049

cond.true.2028:                                   ; preds = %cond.false.2020
  %750 = load i64, i64* %bytes.addr, align 8
  %mul2029 = mul nsw i64 0, %750
  %751 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2030 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %751, i32 0, i32 20
  %752 = load i64, i64* %dst_bytes2030, align 8
  %add2031 = add nsw i64 %mul2029, %752
  %mul2032 = mul nsw i64 0, %add2031
  %add2033 = add nsw i64 %mul2032, 0
  %neg2034 = xor i64 %add2033, -1
  %cmp2035 = icmp eq i64 %neg2034, -1
  %conv2036 = zext i1 %cmp2035 to i32
  %sub2037 = sub nsw i32 0, %conv2036
  %conv2038 = sext i32 %sub2037 to i64
  %753 = load i64, i64* %bytes.addr, align 8
  %mul2039 = mul nsw i64 0, %753
  %754 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2040 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %754, i32 0, i32 20
  %755 = load i64, i64* %dst_bytes2040, align 8
  %add2041 = add nsw i64 %mul2039, %755
  %mul2042 = mul nsw i64 0, %add2041
  %add2043 = add nsw i64 %mul2042, 1
  %shl2044 = shl i64 %add2043, 62
  %sub2045 = sub nsw i64 %shl2044, 1
  %mul2046 = mul nsw i64 %sub2045, 2
  %add2047 = add nsw i64 %mul2046, 1
  %sub2048 = sub nsw i64 %conv2038, %add2047
  br label %cond.end.2055

cond.false.2049:                                  ; preds = %cond.false.2020
  %756 = load i64, i64* %bytes.addr, align 8
  %mul2050 = mul nsw i64 0, %756
  %757 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2051 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %757, i32 0, i32 20
  %758 = load i64, i64* %dst_bytes2051, align 8
  %add2052 = add nsw i64 %mul2050, %758
  %mul2053 = mul nsw i64 0, %add2052
  %add2054 = add nsw i64 %mul2053, 0
  br label %cond.end.2055

cond.end.2055:                                    ; preds = %cond.false.2049, %cond.true.2028
  %cond2056 = phi i64 [ %sub2048, %cond.true.2028 ], [ %add2054, %cond.false.2049 ]
  %cmp2057 = icmp slt i64 %cond2056, 0
  br i1 %cmp2057, label %cond.true.2059, label %cond.false.2133

cond.true.2059:                                   ; preds = %cond.end.2055
  %759 = load i64, i64* %bytes.addr, align 8
  %cmp2060 = icmp slt i64 %759, 0
  br i1 %cmp2060, label %cond.true.2062, label %cond.false.2103

cond.true.2062:                                   ; preds = %cond.true.2059
  %760 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2063 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %760, i32 0, i32 20
  %761 = load i64, i64* %dst_bytes2063, align 8
  %762 = load i64, i64* %bytes.addr, align 8
  %mul2064 = mul nsw i64 0, %762
  %763 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2065 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %763, i32 0, i32 20
  %764 = load i64, i64* %dst_bytes2065, align 8
  %add2066 = add nsw i64 %mul2064, %764
  %mul2067 = mul nsw i64 0, %add2066
  %sub2068 = sub nsw i64 %mul2067, 1
  %cmp2069 = icmp slt i64 %sub2068, 0
  br i1 %cmp2069, label %cond.true.2071, label %cond.false.2092

cond.true.2071:                                   ; preds = %cond.true.2062
  %765 = load i64, i64* %bytes.addr, align 8
  %mul2072 = mul nsw i64 0, %765
  %766 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2073 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %766, i32 0, i32 20
  %767 = load i64, i64* %dst_bytes2073, align 8
  %add2074 = add nsw i64 %mul2072, %767
  %mul2075 = mul nsw i64 0, %add2074
  %add2076 = add nsw i64 %mul2075, 0
  %neg2077 = xor i64 %add2076, -1
  %cmp2078 = icmp eq i64 %neg2077, -1
  %conv2079 = zext i1 %cmp2078 to i32
  %sub2080 = sub nsw i32 0, %conv2079
  %conv2081 = sext i32 %sub2080 to i64
  %768 = load i64, i64* %bytes.addr, align 8
  %mul2082 = mul nsw i64 0, %768
  %769 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2083 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %769, i32 0, i32 20
  %770 = load i64, i64* %dst_bytes2083, align 8
  %add2084 = add nsw i64 %mul2082, %770
  %mul2085 = mul nsw i64 0, %add2084
  %add2086 = add nsw i64 %mul2085, 1
  %shl2087 = shl i64 %add2086, 62
  %sub2088 = sub nsw i64 %shl2087, 1
  %mul2089 = mul nsw i64 %sub2088, 2
  %add2090 = add nsw i64 %mul2089, 1
  %sub2091 = sub nsw i64 %conv2081, %add2090
  br label %cond.end.2098

cond.false.2092:                                  ; preds = %cond.true.2062
  %771 = load i64, i64* %bytes.addr, align 8
  %mul2093 = mul nsw i64 0, %771
  %772 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2094 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %772, i32 0, i32 20
  %773 = load i64, i64* %dst_bytes2094, align 8
  %add2095 = add nsw i64 %mul2093, %773
  %mul2096 = mul nsw i64 0, %add2095
  %add2097 = add nsw i64 %mul2096, 0
  br label %cond.end.2098

cond.end.2098:                                    ; preds = %cond.false.2092, %cond.true.2071
  %cond2099 = phi i64 [ %sub2091, %cond.true.2071 ], [ %add2097, %cond.false.2092 ]
  %774 = load i64, i64* %bytes.addr, align 8
  %sub2100 = sub nsw i64 %cond2099, %774
  %cmp2101 = icmp slt i64 %761, %sub2100
  br i1 %cmp2101, label %cond.true.2173, label %lor.lhs.false.2156

cond.false.2103:                                  ; preds = %cond.true.2059
  %775 = load i64, i64* %bytes.addr, align 8
  %mul2104 = mul nsw i64 0, %775
  %776 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2105 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %776, i32 0, i32 20
  %777 = load i64, i64* %dst_bytes2105, align 8
  %add2106 = add nsw i64 %mul2104, %777
  %mul2107 = mul nsw i64 0, %add2106
  %sub2108 = sub nsw i64 %mul2107, 1
  %cmp2109 = icmp slt i64 %sub2108, 0
  br i1 %cmp2109, label %cond.true.2111, label %cond.false.2121

cond.true.2111:                                   ; preds = %cond.false.2103
  %778 = load i64, i64* %bytes.addr, align 8
  %mul2112 = mul nsw i64 0, %778
  %779 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2113 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %779, i32 0, i32 20
  %780 = load i64, i64* %dst_bytes2113, align 8
  %add2114 = add nsw i64 %mul2112, %780
  %mul2115 = mul nsw i64 0, %add2114
  %add2116 = add nsw i64 %mul2115, 1
  %shl2117 = shl i64 %add2116, 62
  %sub2118 = sub nsw i64 %shl2117, 1
  %mul2119 = mul nsw i64 %sub2118, 2
  %add2120 = add nsw i64 %mul2119, 1
  br label %cond.end.2127

cond.false.2121:                                  ; preds = %cond.false.2103
  %781 = load i64, i64* %bytes.addr, align 8
  %mul2122 = mul nsw i64 0, %781
  %782 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2123 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %782, i32 0, i32 20
  %783 = load i64, i64* %dst_bytes2123, align 8
  %add2124 = add nsw i64 %mul2122, %783
  %mul2125 = mul nsw i64 0, %add2124
  %sub2126 = sub nsw i64 %mul2125, 1
  br label %cond.end.2127

cond.end.2127:                                    ; preds = %cond.false.2121, %cond.true.2111
  %cond2128 = phi i64 [ %add2120, %cond.true.2111 ], [ %sub2126, %cond.false.2121 ]
  %784 = load i64, i64* %bytes.addr, align 8
  %sub2129 = sub nsw i64 %cond2128, %784
  %785 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2130 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %785, i32 0, i32 20
  %786 = load i64, i64* %dst_bytes2130, align 8
  %cmp2131 = icmp slt i64 %sub2129, %786
  br i1 %cmp2131, label %cond.true.2173, label %lor.lhs.false.2156

cond.false.2133:                                  ; preds = %cond.end.2055
  %787 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2134 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %787, i32 0, i32 20
  %788 = load i64, i64* %dst_bytes2134, align 8
  %cmp2135 = icmp slt i64 %788, 0
  br i1 %cmp2135, label %cond.true.2137, label %cond.false.2142

cond.true.2137:                                   ; preds = %cond.false.2133
  %789 = load i64, i64* %bytes.addr, align 8
  %790 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2138 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %790, i32 0, i32 20
  %791 = load i64, i64* %dst_bytes2138, align 8
  %792 = load i64, i64* %bytes.addr, align 8
  %add2139 = add nsw i64 %791, %792
  %cmp2140 = icmp sle i64 %789, %add2139
  br i1 %cmp2140, label %cond.true.2173, label %lor.lhs.false.2156

cond.false.2142:                                  ; preds = %cond.false.2133
  %793 = load i64, i64* %bytes.addr, align 8
  %cmp2143 = icmp slt i64 %793, 0
  br i1 %cmp2143, label %cond.true.2145, label %cond.false.2151

cond.true.2145:                                   ; preds = %cond.false.2142
  %794 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2146 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %794, i32 0, i32 20
  %795 = load i64, i64* %dst_bytes2146, align 8
  %796 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2147 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %796, i32 0, i32 20
  %797 = load i64, i64* %dst_bytes2147, align 8
  %798 = load i64, i64* %bytes.addr, align 8
  %add2148 = add nsw i64 %797, %798
  %cmp2149 = icmp sle i64 %795, %add2148
  br i1 %cmp2149, label %cond.true.2173, label %lor.lhs.false.2156

cond.false.2151:                                  ; preds = %cond.false.2142
  %799 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2152 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %799, i32 0, i32 20
  %800 = load i64, i64* %dst_bytes2152, align 8
  %801 = load i64, i64* %bytes.addr, align 8
  %add2153 = add nsw i64 %800, %801
  %802 = load i64, i64* %bytes.addr, align 8
  %cmp2154 = icmp slt i64 %add2153, %802
  br i1 %cmp2154, label %cond.true.2173, label %lor.lhs.false.2156

lor.lhs.false.2156:                               ; preds = %cond.false.2151, %cond.true.2145, %cond.true.2137, %cond.end.2127, %cond.end.2098
  %803 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2157 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %803, i32 0, i32 20
  %804 = load i64, i64* %dst_bytes2157, align 8
  %805 = load i64, i64* %bytes.addr, align 8
  %add2158 = add nsw i64 %804, %805
  %mul2159 = mul nsw i64 0, %add2158
  %sub2160 = sub nsw i64 %mul2159, 1
  %cmp2161 = icmp slt i64 %sub2160, 0
  br i1 %cmp2161, label %land.lhs.true.2163, label %lor.lhs.false.2168

land.lhs.true.2163:                               ; preds = %lor.lhs.false.2156
  %806 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2164 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %806, i32 0, i32 20
  %807 = load i64, i64* %dst_bytes2164, align 8
  %808 = load i64, i64* %bytes.addr, align 8
  %add2165 = add nsw i64 %807, %808
  %cmp2166 = icmp slt i64 %add2165, -9223372036854775808
  br i1 %cmp2166, label %cond.true.2173, label %lor.lhs.false.2168

lor.lhs.false.2168:                               ; preds = %land.lhs.true.2163, %lor.lhs.false.2156
  %809 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2169 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %809, i32 0, i32 20
  %810 = load i64, i64* %dst_bytes2169, align 8
  %811 = load i64, i64* %bytes.addr, align 8
  %add2170 = add nsw i64 %810, %811
  %cmp2171 = icmp slt i64 9223372036854775807, %add2170
  br i1 %cmp2171, label %cond.true.2173, label %cond.false.2188

cond.true.2173:                                   ; preds = %lor.lhs.false.2168, %land.lhs.true.2163, %cond.false.2151, %cond.true.2145, %cond.true.2137, %cond.end.2127, %cond.end.2098
  %812 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2174 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %812, i32 0, i32 20
  %813 = load i64, i64* %dst_bytes2174, align 8
  %814 = load i64, i64* %bytes.addr, align 8
  %add2175 = add i64 %813, %814
  %cmp2176 = icmp ule i64 %add2175, 9223372036854775807
  br i1 %cmp2176, label %cond.true.2178, label %cond.false.2181

cond.true.2178:                                   ; preds = %cond.true.2173
  %815 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2179 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %815, i32 0, i32 20
  %816 = load i64, i64* %dst_bytes2179, align 8
  %817 = load i64, i64* %bytes.addr, align 8
  %add2180 = add i64 %816, %817
  br label %cond.end.2186

cond.false.2181:                                  ; preds = %cond.true.2173
  %818 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2182 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %818, i32 0, i32 20
  %819 = load i64, i64* %dst_bytes2182, align 8
  %820 = load i64, i64* %bytes.addr, align 8
  %add2183 = add i64 %819, %820
  %sub2184 = sub i64 %add2183, -9223372036854775808
  %add2185 = add nsw i64 %sub2184, -9223372036854775808
  br label %cond.end.2186

cond.end.2186:                                    ; preds = %cond.false.2181, %cond.true.2178
  %cond2187 = phi i64 [ %add2180, %cond.true.2178 ], [ %add2185, %cond.false.2181 ]
  store i64 %cond2187, i64* %newbytes, align 8
  br i1 true, label %if.then, label %lor.lhs.false.2203

cond.false.2188:                                  ; preds = %lor.lhs.false.2168
  %821 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2189 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %821, i32 0, i32 20
  %822 = load i64, i64* %dst_bytes2189, align 8
  %823 = load i64, i64* %bytes.addr, align 8
  %add2190 = add i64 %822, %823
  %cmp2191 = icmp ule i64 %add2190, 9223372036854775807
  br i1 %cmp2191, label %cond.true.2193, label %cond.false.2196

cond.true.2193:                                   ; preds = %cond.false.2188
  %824 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2194 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %824, i32 0, i32 20
  %825 = load i64, i64* %dst_bytes2194, align 8
  %826 = load i64, i64* %bytes.addr, align 8
  %add2195 = add i64 %825, %826
  br label %cond.end.2201

cond.false.2196:                                  ; preds = %cond.false.2188
  %827 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2197 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %827, i32 0, i32 20
  %828 = load i64, i64* %dst_bytes2197, align 8
  %829 = load i64, i64* %bytes.addr, align 8
  %add2198 = add i64 %828, %829
  %sub2199 = sub i64 %add2198, -9223372036854775808
  %add2200 = add nsw i64 %sub2199, -9223372036854775808
  br label %cond.end.2201

cond.end.2201:                                    ; preds = %cond.false.2196, %cond.true.2193
  %cond2202 = phi i64 [ %add2195, %cond.true.2193 ], [ %add2200, %cond.false.2196 ]
  store i64 %cond2202, i64* %newbytes, align 8
  br i1 false, label %if.then, label %lor.lhs.false.2203

lor.lhs.false.2203:                               ; preds = %cond.end.2201, %cond.end.2186, %cond.end.2018, %cond.end.2003, %cond.end.1834, %cond.end.1819, %cond.end.1651, %cond.end.1636, %cond.end.1465, %cond.end.1443, %cond.end.1268, %cond.end.1246, %cond.end.1027, %cond.end.995, %cond.end.810, %cond.end.778, %cond.end.505, %cond.end.473, %cond.end.288, %cond.end.256
  %830 = load i64, i64* %newbytes, align 8
  %cmp2204 = icmp ult i64 -1, %830
  br i1 %cmp2204, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2203, %cond.end.2201, %cond.end.2186, %cond.end.2018, %cond.end.2003, %cond.end.1834, %cond.end.1819, %cond.end.1651, %cond.end.1636, %cond.end.1465, %cond.end.1443, %cond.end.1268, %cond.end.1246, %cond.end.1027, %cond.end.995, %cond.end.810, %cond.end.778, %cond.end.505, %cond.end.473, %cond.end.288, %cond.end.256
  call void @string_overflow() #6
  unreachable

if.end:                                           ; preds = %lor.lhs.false.2203
  %831 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %831, i32 0, i32 22
  %832 = load i8*, i8** %destination, align 8
  %833 = load i64, i64* %newbytes, align 8
  %call = call i8* @xrealloc(i8* %832, i64 %833)
  %834 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination2206 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %834, i32 0, i32 22
  store i8* %call, i8** %destination2206, align 8
  %835 = load i64, i64* %newbytes, align 8
  %836 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2207 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %836, i32 0, i32 20
  store i64 %835, i64* %dst_bytes2207, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @coding_set_destination(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 21
  %1 = load i64, i64* %dst_object, align 8
  %call = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call, label %if.then, label %if.else.41

if.then:                                          ; preds = %entry
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 16
  %3 = load i64, i64* %src_object, align 8
  %call1 = call zeroext i1 @BUFFERP(i64 %3)
  br i1 %call1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 12
  %5 = load i64, i64* %src_pos, align 8
  %cmp = icmp slt i64 %5, 0
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %land.lhs.true
  %6 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 73
  %7 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %7, i32 0, i32 0
  %8 = load i8*, i8** %beg, align 8
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 19
  %10 = load i64, i64* %dst_pos_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %10
  %add.ptr3 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 22
  store i8* %add.ptr3, i8** %destination, align 8
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text4 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text4, align 8
  %beg5 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 0
  %14 = load i8*, i8** %beg5, align 8
  %15 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text6 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 73
  %16 = load %struct.buffer_text*, %struct.buffer_text** %text6, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %16, i32 0, i32 3
  %17 = load i64, i64* %gpt_byte, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %14, i64 %17
  %18 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text8 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 73
  %19 = load %struct.buffer_text*, %struct.buffer_text** %text8, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %19, i32 0, i32 5
  %20 = load i64, i64* %gap_size, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %add.ptr7, i64 %20
  %add.ptr10 = getelementptr inbounds i8, i8* %add.ptr9, i64 -1
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 15
  %22 = load i64, i64* %src_bytes, align 8
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 10
  %24 = load i64, i64* %consumed, align 8
  %sub = sub nsw i64 %22, %24
  %idx.neg = sub i64 0, %sub
  %add.ptr11 = getelementptr inbounds i8, i8* %add.ptr10, i64 %idx.neg
  %25 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination12 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %25, i32 0, i32 22
  %26 = load i8*, i8** %destination12, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %26 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %27 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %27, i32 0, i32 20
  store i64 %sub.ptr.sub, i64* %dst_bytes, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %if.then
  %28 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object13 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %28, i32 0, i32 21
  %29 = load i64, i64* %dst_object13, align 8
  %call14 = call %struct.buffer* @XBUFFER(i64 %29)
  %text15 = getelementptr inbounds %struct.buffer, %struct.buffer* %call14, i32 0, i32 73
  %30 = load %struct.buffer_text*, %struct.buffer_text** %text15, align 8
  %beg16 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %30, i32 0, i32 0
  %31 = load i8*, i8** %beg16, align 8
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte17 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %32, i32 0, i32 19
  %33 = load i64, i64* %dst_pos_byte17, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %31, i64 %33
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i64 -1
  %34 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination20 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %34, i32 0, i32 22
  store i8* %add.ptr19, i8** %destination20, align 8
  %35 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object21 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %35, i32 0, i32 21
  %36 = load i64, i64* %dst_object21, align 8
  %call22 = call %struct.buffer* @XBUFFER(i64 %36)
  %text23 = getelementptr inbounds %struct.buffer, %struct.buffer* %call22, i32 0, i32 73
  %37 = load %struct.buffer_text*, %struct.buffer_text** %text23, align 8
  %beg24 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %37, i32 0, i32 0
  %38 = load i8*, i8** %beg24, align 8
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object25 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %39, i32 0, i32 21
  %40 = load i64, i64* %dst_object25, align 8
  %call26 = call %struct.buffer* @XBUFFER(i64 %40)
  %text27 = getelementptr inbounds %struct.buffer, %struct.buffer* %call26, i32 0, i32 73
  %41 = load %struct.buffer_text*, %struct.buffer_text** %text27, align 8
  %gpt_byte28 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %41, i32 0, i32 3
  %42 = load i64, i64* %gpt_byte28, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %38, i64 %42
  %43 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object30 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %43, i32 0, i32 21
  %44 = load i64, i64* %dst_object30, align 8
  %call31 = call %struct.buffer* @XBUFFER(i64 %44)
  %text32 = getelementptr inbounds %struct.buffer, %struct.buffer* %call31, i32 0, i32 73
  %45 = load %struct.buffer_text*, %struct.buffer_text** %text32, align 8
  %gap_size33 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %45, i32 0, i32 5
  %46 = load i64, i64* %gap_size33, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr29, i64 %46
  %add.ptr35 = getelementptr inbounds i8, i8* %add.ptr34, i64 -1
  %47 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination36 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %47, i32 0, i32 22
  %48 = load i8*, i8** %destination36, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i8* %add.ptr35 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %48 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %49 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes40 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %49, i32 0, i32 20
  store i64 %sub.ptr.sub39, i64* %dst_bytes40, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %if.end.42

if.else.41:                                       ; preds = %entry
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.41, %if.end
  ret void
}

declare void @make_gap(i64) #1

declare void @make_gap_1(%struct.buffer*, i64) #1

; Function Attrs: noreturn
declare void @string_overflow() #2

; Function Attrs: nounwind uwtable
define internal i32 @finish_composition(i32* %charbuf, %struct.composition_status* %cmp_status) #0 {
entry:
  %charbuf.addr = alloca i32*, align 8
  %cmp_status.addr = alloca %struct.composition_status*, align 8
  %idx = alloca i32, align 4
  %new_chars = alloca i32, align 4
  %elt = alloca i32, align 4
  %gref = alloca i32, align 4
  %nref = alloca i32, align 4
  store i32* %charbuf, i32** %charbuf.addr, align 8
  store %struct.composition_status* %cmp_status, %struct.composition_status** %cmp_status.addr, align 8
  %0 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %length = getelementptr inbounds %struct.composition_status, %struct.composition_status* %0, i32 0, i32 3
  %1 = load i32, i32* %length, align 4
  %sub = sub nsw i32 0, %1
  store i32 %sub, i32* %idx, align 4
  %2 = load i32, i32* %idx, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %idx, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  store i32 27, i32* %arrayidx, align 4
  %4 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %method = getelementptr inbounds %struct.composition_status, %struct.composition_status* %4, i32 0, i32 1
  %5 = load i32, i32* %method, align 4
  %cmp = icmp eq i32 %5, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.8

cond.false:                                       ; preds = %entry
  %6 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %method1 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %6, i32 0, i32 1
  %7 = load i32, i32* %method1, align 4
  %cmp2 = icmp eq i32 %7, 1
  br i1 %cmp2, label %cond.true.3, label %cond.false.4

cond.true.3:                                      ; preds = %cond.false
  br label %cond.end

cond.false.4:                                     ; preds = %cond.false
  %8 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %method5 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %8, i32 0, i32 1
  %9 = load i32, i32* %method5, align 4
  %cmp6 = icmp eq i32 %9, 2
  %cond = select i1 %cmp6, i32 51, i32 52
  br label %cond.end

cond.end:                                         ; preds = %cond.false.4, %cond.true.3
  %cond7 = phi i32 [ 50, %cond.true.3 ], [ %cond, %cond.false.4 ]
  br label %cond.end.8

cond.end.8:                                       ; preds = %cond.end, %cond.true
  %cond9 = phi i32 [ 48, %cond.true ], [ %cond7, %cond.end ]
  %10 = load i32, i32* %idx, align 4
  %inc10 = add nsw i32 %10, 1
  store i32 %inc10, i32* %idx, align 4
  %idxprom11 = sext i32 %10 to i64
  %11 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %11, i64 %idxprom11
  store i32 %cond9, i32* %arrayidx12, align 4
  %12 = load i32, i32* %idx, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %idx, align 4
  %idxprom14 = sext i32 %12 to i64
  %13 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx15 = getelementptr inbounds i32, i32* %13, i64 %idxprom14
  store i32 -2, i32* %arrayidx15, align 4
  %14 = load i32, i32* %idx, align 4
  %inc16 = add nsw i32 %14, 1
  store i32 %inc16, i32* %idx, align 4
  %idxprom17 = sext i32 %14 to i64
  %15 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx18 = getelementptr inbounds i32, i32* %15, i64 %idxprom17
  store i32 0, i32* %arrayidx18, align 4
  %16 = load i32, i32* %idx, align 4
  %inc19 = add nsw i32 %16, 1
  store i32 %inc19, i32* %idx, align 4
  %idxprom20 = sext i32 %16 to i64
  %17 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx21 = getelementptr inbounds i32, i32* %17, i64 %idxprom20
  store i32 -1, i32* %arrayidx21, align 4
  %18 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %nchars = getelementptr inbounds %struct.composition_status, %struct.composition_status* %18, i32 0, i32 4
  %19 = load i32, i32* %nchars, align 4
  store i32 %19, i32* %new_chars, align 4
  %20 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %method22 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %20, i32 0, i32 1
  %21 = load i32, i32* %method22, align 4
  %cmp23 = icmp uge i32 %21, 1
  br i1 %cmp23, label %if.then, label %if.end.76

if.then:                                          ; preds = %cond.end.8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %22 = load i32, i32* %idx, align 4
  %cmp24 = icmp slt i32 %22, 0
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %idx, align 4
  %idxprom25 = sext i32 %23 to i64
  %24 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx26 = getelementptr inbounds i32, i32* %24, i64 %idxprom25
  %25 = load i32, i32* %arrayidx26, align 4
  store i32 %25, i32* %elt, align 4
  %26 = load i32, i32* %elt, align 4
  %cmp27 = icmp eq i32 %26, -2
  br i1 %cmp27, label %if.then.28, label %if.else.64

if.then.28:                                       ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %if.then.28
  %27 = load i32, i32* %idx, align 4
  %add = add nsw i32 %27, 1
  %idxprom29 = sext i32 %add to i64
  %28 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx30 = getelementptr inbounds i32, i32* %28, i64 %idxprom29
  %29 = load i32, i32* %arrayidx30, align 4
  %rem = srem i32 %29, 256
  %div = sdiv i32 %rem, 12
  store i32 %div, i32* %gref, align 4
  %30 = load i32, i32* %idx, align 4
  %add31 = add nsw i32 %30, 1
  %idxprom32 = sext i32 %add31 to i64
  %31 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx33 = getelementptr inbounds i32, i32* %31, i64 %idxprom32
  %32 = load i32, i32* %arrayidx33, align 4
  %rem34 = srem i32 %32, 256
  %rem35 = srem i32 %rem34, 12
  store i32 %rem35, i32* %nref, align 4
  %33 = load i32, i32* %idx, align 4
  %add36 = add nsw i32 %33, 1
  %idxprom37 = sext i32 %add36 to i64
  %34 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx38 = getelementptr inbounds i32, i32* %34, i64 %idxprom37
  %35 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp slt i32 %35, 256
  br i1 %cmp39, label %if.then.40, label %if.else

if.then.40:                                       ; preds = %do.body
  %36 = load i32, i32* %gref, align 4
  %cmp41 = icmp eq i32 %36, 10
  br i1 %cmp41, label %if.then.42, label %if.end

if.then.42:                                       ; preds = %if.then.40
  store i32 4, i32* %gref, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.42, %if.then.40
  %37 = load i32, i32* %nref, align 4
  %cmp43 = icmp eq i32 %37, 10
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end
  store i32 4, i32* %nref, align 4
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.44, %if.end
  %38 = load i32, i32* %gref, align 4
  %mul = mul nsw i32 %38, 9
  %add46 = add nsw i32 32, %mul
  %39 = load i32, i32* %nref, align 4
  %add47 = add nsw i32 %add46, %39
  %40 = load i32, i32* %idx, align 4
  %idxprom48 = sext i32 %40 to i64
  %41 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx49 = getelementptr inbounds i32, i32* %41, i64 %idxprom48
  store i32 %add47, i32* %arrayidx49, align 4
  %42 = load i32, i32* %idx, align 4
  %add50 = add nsw i32 %42, 1
  %idxprom51 = sext i32 %add50 to i64
  %43 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx52 = getelementptr inbounds i32, i32* %43, i64 %idxprom51
  store i32 -1, i32* %arrayidx52, align 4
  %44 = load i32, i32* %new_chars, align 4
  %inc53 = add nsw i32 %44, 1
  store i32 %inc53, i32* %new_chars, align 4
  br label %if.end.62

if.else:                                          ; preds = %do.body
  %45 = load i32, i32* %gref, align 4
  %add54 = add nsw i32 113, %45
  %46 = load i32, i32* %idx, align 4
  %idxprom55 = sext i32 %46 to i64
  %47 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx56 = getelementptr inbounds i32, i32* %47, i64 %idxprom55
  store i32 %add54, i32* %arrayidx56, align 4
  %48 = load i32, i32* %nref, align 4
  %add57 = add nsw i32 32, %48
  %49 = load i32, i32* %idx, align 4
  %add58 = add nsw i32 %49, 1
  %idxprom59 = sext i32 %add58 to i64
  %50 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx60 = getelementptr inbounds i32, i32* %50, i64 %idxprom59
  store i32 %add57, i32* %arrayidx60, align 4
  %51 = load i32, i32* %new_chars, align 4
  %add61 = add nsw i32 %51, 2
  store i32 %add61, i32* %new_chars, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.else, %if.end.45
  br label %do.end

do.end:                                           ; preds = %if.end.62
  %52 = load i32, i32* %idx, align 4
  %inc63 = add nsw i32 %52, 1
  store i32 %inc63, i32* %idx, align 4
  br label %if.end.74

if.else.64:                                       ; preds = %for.body
  %53 = load i32, i32* %elt, align 4
  %cmp65 = icmp eq i32 %53, -1
  br i1 %cmp65, label %if.then.66, label %if.end.73

if.then.66:                                       ; preds = %if.else.64
  %54 = load i32, i32* %idx, align 4
  %inc67 = add nsw i32 %54, 1
  store i32 %inc67, i32* %idx, align 4
  %idxprom68 = sext i32 %54 to i64
  %55 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx69 = getelementptr inbounds i32, i32* %55, i64 %idxprom68
  store i32 27, i32* %arrayidx69, align 4
  %56 = load i32, i32* %idx, align 4
  %idxprom70 = sext i32 %56 to i64
  %57 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx71 = getelementptr inbounds i32, i32* %57, i64 %idxprom70
  store i32 48, i32* %arrayidx71, align 4
  %58 = load i32, i32* %new_chars, align 4
  %add72 = add nsw i32 %58, 2
  store i32 %add72, i32* %new_chars, align 4
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.66, %if.else.64
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %do.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.74
  %59 = load i32, i32* %idx, align 4
  %inc75 = add nsw i32 %59, 1
  store i32 %inc75, i32* %idx, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.76

if.end.76:                                        ; preds = %for.end, %cond.end.8
  %60 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %state = getelementptr inbounds %struct.composition_status, %struct.composition_status* %60, i32 0, i32 0
  store i32 0, i32* %state, align 4
  %61 = load i32, i32* %new_chars, align 4
  ret i32 %61
}

; Function Attrs: nounwind uwtable
define internal i64 @coding_change_source(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %orig = alloca i8*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  store i8* %1, i8** %orig, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %2)
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 17
  %4 = load i8*, i8** %source1, align 8
  %5 = load i8*, i8** %orig, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

; Function Attrs: nounwind uwtable
define internal void @coding_set_source(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %buf = alloca %struct.buffer*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 16
  %1 = load i64, i64* %src_object, align 8
  %call = call zeroext i1 @BUFFERP(i64 %1)
  br i1 %call, label %if.then, label %if.else.22

if.then:                                          ; preds = %entry
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 16
  %3 = load i64, i64* %src_object1, align 8
  %call2 = call %struct.buffer* @XBUFFER(i64 %3)
  store %struct.buffer* %call2, %struct.buffer** %buf, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 12
  %5 = load i64, i64* %src_pos, align 8
  %cmp = icmp slt i64 %5, 0
  br i1 %cmp, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %6 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %6, i32 0, i32 73
  %7 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %7, i32 0, i32 0
  %8 = load i8*, i8** %beg, align 8
  %9 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text4 = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 73
  %10 = load %struct.buffer_text*, %struct.buffer_text** %text4, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %10, i32 0, i32 3
  %11 = load i64, i64* %gpt_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %11
  %12 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text5 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text5, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 5
  %14 = load i64, i64* %gap_size, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %add.ptr, i64 %14
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr6, i64 -1
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 13
  %16 = load i64, i64* %src_pos_byte, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr7, i64 %16
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 17
  store i8* %add.ptr8, i8** %source, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %18 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text9 = getelementptr inbounds %struct.buffer, %struct.buffer* %18, i32 0, i32 73
  %19 = load %struct.buffer_text*, %struct.buffer_text** %text9, align 8
  %beg10 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %19, i32 0, i32 0
  %20 = load i8*, i8** %beg10, align 8
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte11 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 13
  %22 = load i64, i64* %src_pos_byte11, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %20, i64 %22
  %add.ptr13 = getelementptr inbounds i8, i8* %add.ptr12, i64 -1
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte14 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 13
  %24 = load i64, i64* %src_pos_byte14, align 8
  %25 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text15 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 73
  %26 = load %struct.buffer_text*, %struct.buffer_text** %text15, align 8
  %gpt_byte16 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %26, i32 0, i32 3
  %27 = load i64, i64* %gpt_byte16, align 8
  %cmp17 = icmp sge i64 %24, %27
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %28 = load %struct.buffer*, %struct.buffer** %buf, align 8
  %text18 = getelementptr inbounds %struct.buffer, %struct.buffer* %28, i32 0, i32 73
  %29 = load %struct.buffer_text*, %struct.buffer_text** %text18, align 8
  %gap_size19 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %29, i32 0, i32 5
  %30 = load i64, i64* %gap_size19, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %30, %cond.true ], [ 0, %cond.false ]
  %add.ptr20 = getelementptr inbounds i8, i8* %add.ptr13, i64 %cond
  %31 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source21 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %31, i32 0, i32 17
  store i8* %add.ptr20, i8** %source21, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then.3
  br label %if.end.33

if.else.22:                                       ; preds = %entry
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object23 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %32, i32 0, i32 16
  %33 = load i64, i64* %src_object23, align 8
  %call24 = call zeroext i1 @STRINGP(i64 %33)
  br i1 %call24, label %if.then.25, label %if.else.31

if.then.25:                                       ; preds = %if.else.22
  %34 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object26 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %34, i32 0, i32 16
  %35 = load i64, i64* %src_object26, align 8
  %call27 = call i8* @SDATA(i64 %35)
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos_byte28 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %36, i32 0, i32 13
  %37 = load i64, i64* %src_pos_byte28, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %call27, i64 %37
  %38 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source30 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %38, i32 0, i32 17
  store i8* %add.ptr29, i8** %source30, align 8
  br label %if.end.32

if.else.31:                                       ; preds = %if.else.22
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.31, %if.then.25
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @encode_designation_at_bol(%struct.coding_system* %coding, i32* %charbuf, i32* %charbuf_end, i8* %dst) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %charbuf.addr = alloca i32*, align 8
  %charbuf_end.addr = alloca i32*, align 8
  %dst.addr = alloca i8*, align 8
  %orig = alloca i8*, align 8
  %charset = alloca %struct.charset*, align 8
  %r = alloca [4 x i32], align 16
  %c = alloca i32, align 4
  %found = alloca i32, align 4
  %reg = alloca i32, align 4
  %produced_chars = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %attrs = alloca i64, align 8
  %charset_list = alloca i64, align 8
  %id8 = alloca i32, align 4
  %final_char = alloca i8, align 1
  %intermediate_char_94 = alloca i8*, align 8
  %intermediate_char_96 = alloca i8*, align 8
  %revision = alloca i32, align 4
  %ch = alloca i32, align 4
  %b = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i32* %charbuf, i32** %charbuf.addr, align 8
  store i32* %charbuf_end, i32** %charbuf_end.addr, align 8
  store i8* %dst, i8** %dst.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  store i8* %0, i8** %orig, align 8
  store i32 0, i32* %found, align 4
  store i64 0, i64* %produced_chars, align 8
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %2 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %2)
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 0
  %4 = load i64, i64* %id, align 8
  %call1 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %4)
  %call2 = call i64 @AREF(i64 %call1, i64 0)
  store i64 %call2, i64* %attrs, align 8
  %5 = load i64, i64* %attrs, align 8
  %call3 = call i64 @AREF(i64 %5, i64 4)
  store i64 %call3, i64* %charset_list, align 8
  %6 = load i64, i64* %charset_list, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 580)
  %cmp = icmp eq i64 %6, %call4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i64, i64* @Viso_2022_charset_list, align 8
  store i64 %7, i64* %charset_list, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %reg, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %reg, align 4
  %cmp5 = icmp slt i32 %8, 4
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %reg, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %reg, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %reg, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end.37, %for.end
  %11 = load i32*, i32** %charbuf.addr, align 8
  %12 = load i32*, i32** %charbuf_end.addr, align 8
  %cmp6 = icmp ult i32* %11, %12
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %13 = load i32, i32* %found, align 4
  %cmp7 = icmp slt i32 %13, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %14 = phi i1 [ false, %while.cond ], [ %cmp7, %land.rhs ]
  br i1 %14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %15 = load i32*, i32** %charbuf.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %15, i32 1
  store i32* %incdec.ptr, i32** %charbuf.addr, align 8
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %c, align 4
  %17 = load i32, i32* %c, align 4
  %cmp9 = icmp eq i32 %17, 10
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %while.body
  br label %while.end

if.end.11:                                        ; preds = %while.body
  %18 = load i32, i32* %c, align 4
  %19 = load i64, i64* %charset_list, align 8
  %call12 = call %struct.charset* @char_charset(i32 %18, i64 %19, i32* null)
  store %struct.charset* %call12, %struct.charset** %charset, align 8
  %20 = load %struct.charset*, %struct.charset** %charset, align 8
  %id13 = getelementptr inbounds %struct.charset, %struct.charset* %20, i32 0, i32 0
  %21 = load i32, i32* %id13, align 4
  store i32 %21, i32* %id8, align 4
  %22 = load i32, i32* %id8, align 4
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %max_charset_id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 2
  %24 = load i32, i32* %max_charset_id, align 4
  %cmp14 = icmp sle i32 %22, %24
  br i1 %cmp14, label %cond.true, label %cond.false.24

cond.true:                                        ; preds = %if.end.11
  %25 = load i32, i32* %id8, align 4
  %idxprom15 = sext i32 %25 to i64
  %26 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 4
  %27 = load i8*, i8** %safe_charsets, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %27, i64 %idxprom15
  %28 = load i8, i8* %arrayidx16, align 1
  %conv = zext i8 %28 to i32
  %cmp17 = icmp ne i32 %conv, 255
  br i1 %cmp17, label %cond.true.19, label %cond.false

cond.true.19:                                     ; preds = %cond.true
  %29 = load i32, i32* %id8, align 4
  %idxprom20 = sext i32 %29 to i64
  %30 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets21 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %30, i32 0, i32 4
  %31 = load i8*, i8** %safe_charsets21, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %31, i64 %idxprom20
  %32 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %32 to i32
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.19
  %cond = phi i32 [ %conv23, %cond.true.19 ], [ -1, %cond.false ]
  br label %cond.end.25

cond.false.24:                                    ; preds = %if.end.11
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.false.24, %cond.end
  %cond26 = phi i32 [ %cond, %cond.end ], [ -1, %cond.false.24 ]
  store i32 %cond26, i32* %reg, align 4
  %33 = load i32, i32* %reg, align 4
  %cmp27 = icmp sge i32 %33, 0
  br i1 %cmp27, label %land.lhs.true, label %if.end.37

land.lhs.true:                                    ; preds = %cond.end.25
  %34 = load i32, i32* %reg, align 4
  %idxprom29 = sext i32 %34 to i64
  %arrayidx30 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom29
  %35 = load i32, i32* %arrayidx30, align 4
  %cmp31 = icmp slt i32 %35, 0
  br i1 %cmp31, label %if.then.33, label %if.end.37

if.then.33:                                       ; preds = %land.lhs.true
  %36 = load i32, i32* %found, align 4
  %inc34 = add nsw i32 %36, 1
  store i32 %inc34, i32* %found, align 4
  %37 = load i32, i32* %id8, align 4
  %38 = load i32, i32* %reg, align 4
  %idxprom35 = sext i32 %38 to i64
  %arrayidx36 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom35
  store i32 %37, i32* %arrayidx36, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.33, %land.lhs.true, %cond.end.25
  br label %while.cond

while.end:                                        ; preds = %if.then.10, %land.end
  %39 = load i32, i32* %found, align 4
  %tobool = icmp ne i32 %39, 0
  br i1 %tobool, label %if.then.38, label %if.end.229

if.then.38:                                       ; preds = %while.end
  store i32 0, i32* %reg, align 4
  br label %for.cond.39

for.cond.39:                                      ; preds = %for.inc.226, %if.then.38
  %40 = load i32, i32* %reg, align 4
  %cmp40 = icmp slt i32 %40, 4
  br i1 %cmp40, label %for.body.42, label %for.end.228

for.body.42:                                      ; preds = %for.cond.39
  %41 = load i32, i32* %reg, align 4
  %idxprom43 = sext i32 %41 to i64
  %arrayidx44 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom43
  %42 = load i32, i32* %arrayidx44, align 4
  %cmp45 = icmp sge i32 %42, 0
  br i1 %cmp45, label %land.lhs.true.47, label %if.end.225

land.lhs.true.47:                                 ; preds = %for.body.42
  %43 = load i32, i32* %reg, align 4
  %idxprom48 = sext i32 %43 to i64
  %44 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %44, i32 0, i32 3
  %iso_2022 = bitcast %union.anon* %spec to %struct.iso_2022_spec*
  %current_designation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022, i32 0, i32 2
  %arrayidx49 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation, i32 0, i64 %idxprom48
  %45 = load i32, i32* %arrayidx49, align 4
  %46 = load i32, i32* %reg, align 4
  %idxprom50 = sext i32 %46 to i64
  %arrayidx51 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom50
  %47 = load i32, i32* %arrayidx51, align 4
  %cmp52 = icmp ne i32 %45, %47
  br i1 %cmp52, label %if.then.54, label %if.end.225

if.then.54:                                       ; preds = %land.lhs.true.47
  br label %do.body

do.body:                                          ; preds = %if.then.54
  %48 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %49 = load i32, i32* %reg, align 4
  %idxprom55 = sext i32 %49 to i64
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom55
  %50 = load i32, i32* %arrayidx56, align 4
  %idx.ext = sext i32 %50 to i64
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %48, i64 %idx.ext
  %iso_final = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr, i32 0, i32 6
  %51 = load i32, i32* %iso_final, align 4
  %conv57 = trunc i32 %51 to i8
  store i8 %conv57, i8* %final_char, align 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i8** %intermediate_char_94, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8** %intermediate_char_96, align 8
  store i32 -1, i32* %revision, align 4
  %52 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec58 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %52, i32 0, i32 3
  %iso_202259 = bitcast %union.anon* %spec58 to %struct.iso_2022_spec*
  %flags = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202259, i32 0, i32 0
  %53 = load i32, i32* %flags, align 4
  %and = and i32 %53, 128
  %tobool60 = icmp ne i32 %and, 0
  br i1 %tobool60, label %if.then.61, label %if.end.66

if.then.61:                                       ; preds = %do.body
  %54 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %55 = load i32, i32* %reg, align 4
  %idxprom62 = sext i32 %55 to i64
  %arrayidx63 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom62
  %56 = load i32, i32* %arrayidx63, align 4
  %idx.ext64 = sext i32 %56 to i64
  %add.ptr65 = getelementptr inbounds %struct.charset, %struct.charset* %54, i64 %idx.ext64
  %iso_revision = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr65, i32 0, i32 7
  %57 = load i32, i32* %iso_revision, align 4
  store i32 %57, i32* %revision, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.61, %do.body
  %58 = load i32, i32* %revision, align 4
  %cmp67 = icmp sge i32 %58, 0
  br i1 %cmp67, label %if.then.69, label %if.end.129

if.then.69:                                       ; preds = %if.end.66
  br label %do.body.70

do.body.70:                                       ; preds = %if.then.69
  %59 = load i64, i64* %produced_chars, align 8
  %add = add nsw i64 %59, 2
  store i64 %add, i64* %produced_chars, align 8
  %60 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr71 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr71, i8** %dst.addr, align 8
  store i8 27, i8* %60, align 1
  %61 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr72 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr72, i8** %dst.addr, align 8
  store i8 38, i8* %61, align 1
  br label %do.end

do.end:                                           ; preds = %do.body.70
  br label %do.body.73

do.body.73:                                       ; preds = %do.end
  %62 = load i64, i64* %produced_chars, align 8
  %inc74 = add nsw i64 %62, 1
  store i64 %inc74, i64* %produced_chars, align 8
  %63 = load i8, i8* %multibytep, align 1
  %tobool75 = trunc i8 %63 to i1
  br i1 %tobool75, label %if.then.76, label %if.else.123

if.then.76:                                       ; preds = %do.body.73
  %64 = load i32, i32* %revision, align 4
  %add77 = add nsw i32 64, %64
  store i32 %add77, i32* %ch, align 4
  %65 = load i32, i32* %ch, align 4
  %cmp78 = icmp uge i32 %65, 128
  br i1 %cmp78, label %if.then.80, label %if.end.82

if.then.80:                                       ; preds = %if.then.76
  %66 = load i32, i32* %ch, align 4
  %add81 = add i32 %66, 4194048
  store i32 %add81, i32* %ch, align 4
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.80, %if.then.76
  br label %do.body.83

do.body.83:                                       ; preds = %if.end.82
  %67 = load i32, i32* %ch, align 4
  %cmp84 = icmp ule i32 %67, 127
  br i1 %cmp84, label %if.then.86, label %if.else

if.then.86:                                       ; preds = %do.body.83
  %68 = load i32, i32* %ch, align 4
  %conv87 = trunc i32 %68 to i8
  %69 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr88 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr88, i8** %dst.addr, align 8
  store i8 %conv87, i8* %69, align 1
  br label %if.end.121

if.else:                                          ; preds = %do.body.83
  %70 = load i32, i32* %ch, align 4
  %cmp89 = icmp ule i32 %70, 2047
  br i1 %cmp89, label %if.then.91, label %if.else.98

if.then.91:                                       ; preds = %if.else
  %71 = load i32, i32* %ch, align 4
  %shr = lshr i32 %71, 6
  %or = or i32 192, %shr
  %conv92 = trunc i32 %or to i8
  %72 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr93 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %incdec.ptr93, i8** %dst.addr, align 8
  store i8 %conv92, i8* %72, align 1
  %73 = load i32, i32* %ch, align 4
  %and94 = and i32 %73, 63
  %or95 = or i32 128, %and94
  %conv96 = trunc i32 %or95 to i8
  %74 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr97, i8** %dst.addr, align 8
  store i8 %conv96, i8* %74, align 1
  br label %if.end.120

if.else.98:                                       ; preds = %if.else
  %75 = load i32, i32* %ch, align 4
  %cmp99 = icmp ule i32 %75, 65535
  br i1 %cmp99, label %if.then.101, label %if.else.115

if.then.101:                                      ; preds = %if.else.98
  %76 = load i32, i32* %ch, align 4
  %shr102 = lshr i32 %76, 12
  %or103 = or i32 224, %shr102
  %conv104 = trunc i32 %or103 to i8
  %77 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr105 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %incdec.ptr105, i8** %dst.addr, align 8
  store i8 %conv104, i8* %77, align 1
  %78 = load i32, i32* %ch, align 4
  %shr106 = lshr i32 %78, 6
  %and107 = and i32 %shr106, 63
  %or108 = or i32 128, %and107
  %conv109 = trunc i32 %or108 to i8
  %79 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr110 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr110, i8** %dst.addr, align 8
  store i8 %conv109, i8* %79, align 1
  %80 = load i32, i32* %ch, align 4
  %and111 = and i32 %80, 63
  %or112 = or i32 128, %and111
  %conv113 = trunc i32 %or112 to i8
  %81 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr114 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr114, i8** %dst.addr, align 8
  store i8 %conv113, i8* %81, align 1
  br label %if.end.119

if.else.115:                                      ; preds = %if.else.98
  %82 = load i32, i32* %ch, align 4
  %83 = load i8*, i8** %dst.addr, align 8
  %call116 = call i32 @char_string(i32 %82, i8* %83)
  %84 = load i8*, i8** %dst.addr, align 8
  %idx.ext117 = sext i32 %call116 to i64
  %add.ptr118 = getelementptr inbounds i8, i8* %84, i64 %idx.ext117
  store i8* %add.ptr118, i8** %dst.addr, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.115, %if.then.101
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %if.then.91
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.then.86
  br label %do.end.122

do.end.122:                                       ; preds = %if.end.121
  br label %if.end.127

if.else.123:                                      ; preds = %do.body.73
  %85 = load i32, i32* %revision, align 4
  %add124 = add nsw i32 64, %85
  %conv125 = trunc i32 %add124 to i8
  %86 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr126 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %incdec.ptr126, i8** %dst.addr, align 8
  store i8 %conv125, i8* %86, align 1
  br label %if.end.127

if.end.127:                                       ; preds = %if.else.123, %do.end.122
  br label %do.end.128

do.end.128:                                       ; preds = %if.end.127
  br label %if.end.129

if.end.129:                                       ; preds = %do.end.128, %if.end.66
  br label %do.body.130

do.body.130:                                      ; preds = %if.end.129
  %87 = load i64, i64* %produced_chars, align 8
  %inc131 = add nsw i64 %87, 1
  store i64 %inc131, i64* %produced_chars, align 8
  %88 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr132 = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %incdec.ptr132, i8** %dst.addr, align 8
  store i8 27, i8* %88, align 1
  br label %do.end.133

do.end.133:                                       ; preds = %do.body.130
  %89 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %90 = load i32, i32* %reg, align 4
  %idxprom134 = sext i32 %90 to i64
  %arrayidx135 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom134
  %91 = load i32, i32* %arrayidx135, align 4
  %idx.ext136 = sext i32 %91 to i64
  %add.ptr137 = getelementptr inbounds %struct.charset, %struct.charset* %89, i64 %idx.ext136
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr137, i32 0, i32 2
  %92 = load i32, i32* %dimension, align 4
  %cmp138 = icmp eq i32 %92, 1
  br i1 %cmp138, label %if.then.140, label %if.else.163

if.then.140:                                      ; preds = %do.end.133
  %93 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %94 = load i32, i32* %reg, align 4
  %idxprom141 = sext i32 %94 to i64
  %arrayidx142 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom141
  %95 = load i32, i32* %arrayidx142, align 4
  %idx.ext143 = sext i32 %95 to i64
  %add.ptr144 = getelementptr inbounds %struct.charset, %struct.charset* %93, i64 %idx.ext143
  %iso_chars_96 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr144, i32 0, i32 5
  %bf.load145 = load i8, i8* %iso_chars_96, align 8
  %bf.lshr146 = lshr i8 %bf.load145, 1
  %bf.clear147 = and i8 %bf.lshr146, 1
  %bf.cast148 = trunc i8 %bf.clear147 to i1
  br i1 %bf.cast148, label %if.else.153, label %if.then.149

if.then.149:                                      ; preds = %if.then.140
  %96 = load i32, i32* %reg, align 4
  %idxprom150 = sext i32 %96 to i64
  %97 = load i8*, i8** %intermediate_char_94, align 8
  %arrayidx151 = getelementptr inbounds i8, i8* %97, i64 %idxprom150
  %98 = load i8, i8* %arrayidx151, align 1
  %conv152 = sext i8 %98 to i32
  store i32 %conv152, i32* %b, align 4
  br label %if.end.157

if.else.153:                                      ; preds = %if.then.140
  %99 = load i32, i32* %reg, align 4
  %idxprom154 = sext i32 %99 to i64
  %100 = load i8*, i8** %intermediate_char_96, align 8
  %arrayidx155 = getelementptr inbounds i8, i8* %100, i64 %idxprom154
  %101 = load i8, i8* %arrayidx155, align 1
  %conv156 = sext i8 %101 to i32
  store i32 %conv156, i32* %b, align 4
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.153, %if.then.149
  br label %do.body.158

do.body.158:                                      ; preds = %if.end.157
  %102 = load i64, i64* %produced_chars, align 8
  %inc159 = add nsw i64 %102, 1
  store i64 %inc159, i64* %produced_chars, align 8
  %103 = load i32, i32* %b, align 4
  %conv160 = trunc i32 %103 to i8
  %104 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr161 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %incdec.ptr161, i8** %dst.addr, align 8
  store i8 %conv160, i8* %104, align 1
  br label %do.end.162

do.end.162:                                       ; preds = %do.body.158
  br label %if.end.209

if.else.163:                                      ; preds = %do.end.133
  br label %do.body.164

do.body.164:                                      ; preds = %if.else.163
  %105 = load i64, i64* %produced_chars, align 8
  %inc165 = add nsw i64 %105, 1
  store i64 %inc165, i64* %produced_chars, align 8
  %106 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr166 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr166, i8** %dst.addr, align 8
  store i8 36, i8* %106, align 1
  br label %do.end.167

do.end.167:                                       ; preds = %do.body.164
  %107 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %108 = load i32, i32* %reg, align 4
  %idxprom168 = sext i32 %108 to i64
  %arrayidx169 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom168
  %109 = load i32, i32* %arrayidx169, align 4
  %idx.ext170 = sext i32 %109 to i64
  %add.ptr171 = getelementptr inbounds %struct.charset, %struct.charset* %107, i64 %idx.ext170
  %iso_chars_96172 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr171, i32 0, i32 5
  %bf.load173 = load i8, i8* %iso_chars_96172, align 8
  %bf.lshr174 = lshr i8 %bf.load173, 1
  %bf.clear175 = and i8 %bf.lshr174, 1
  %bf.cast176 = trunc i8 %bf.clear175 to i1
  br i1 %bf.cast176, label %if.else.201, label %if.then.177

if.then.177:                                      ; preds = %do.end.167
  %110 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec178 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %110, i32 0, i32 3
  %iso_2022179 = bitcast %union.anon* %spec178 to %struct.iso_2022_spec*
  %flags180 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022179, i32 0, i32 0
  %111 = load i32, i32* %flags180, align 4
  %and181 = and i32 %111, 1
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %if.then.193, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.177
  %112 = load i32, i32* %reg, align 4
  %cmp183 = icmp ne i32 %112, 0
  br i1 %cmp183, label %if.then.193, label %lor.lhs.false.185

lor.lhs.false.185:                                ; preds = %lor.lhs.false
  %113 = load i8, i8* %final_char, align 1
  %conv186 = zext i8 %113 to i32
  %cmp187 = icmp slt i32 %conv186, 64
  br i1 %cmp187, label %if.then.193, label %lor.lhs.false.189

lor.lhs.false.189:                                ; preds = %lor.lhs.false.185
  %114 = load i8, i8* %final_char, align 1
  %conv190 = zext i8 %114 to i32
  %cmp191 = icmp sgt i32 %conv190, 66
  br i1 %cmp191, label %if.then.193, label %if.end.200

if.then.193:                                      ; preds = %lor.lhs.false.189, %lor.lhs.false.185, %lor.lhs.false, %if.then.177
  br label %do.body.194

do.body.194:                                      ; preds = %if.then.193
  %115 = load i64, i64* %produced_chars, align 8
  %inc195 = add nsw i64 %115, 1
  store i64 %inc195, i64* %produced_chars, align 8
  %116 = load i32, i32* %reg, align 4
  %idxprom196 = sext i32 %116 to i64
  %117 = load i8*, i8** %intermediate_char_94, align 8
  %arrayidx197 = getelementptr inbounds i8, i8* %117, i64 %idxprom196
  %118 = load i8, i8* %arrayidx197, align 1
  %119 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr198 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %incdec.ptr198, i8** %dst.addr, align 8
  store i8 %118, i8* %119, align 1
  br label %do.end.199

do.end.199:                                       ; preds = %do.body.194
  br label %if.end.200

if.end.200:                                       ; preds = %do.end.199, %lor.lhs.false.189
  br label %if.end.208

if.else.201:                                      ; preds = %do.end.167
  br label %do.body.202

do.body.202:                                      ; preds = %if.else.201
  %120 = load i64, i64* %produced_chars, align 8
  %inc203 = add nsw i64 %120, 1
  store i64 %inc203, i64* %produced_chars, align 8
  %121 = load i32, i32* %reg, align 4
  %idxprom204 = sext i32 %121 to i64
  %122 = load i8*, i8** %intermediate_char_96, align 8
  %arrayidx205 = getelementptr inbounds i8, i8* %122, i64 %idxprom204
  %123 = load i8, i8* %arrayidx205, align 1
  %124 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr206 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr206, i8** %dst.addr, align 8
  store i8 %123, i8* %124, align 1
  br label %do.end.207

do.end.207:                                       ; preds = %do.body.202
  br label %if.end.208

if.end.208:                                       ; preds = %do.end.207, %if.end.200
  br label %if.end.209

if.end.209:                                       ; preds = %if.end.208, %do.end.162
  br label %do.body.210

do.body.210:                                      ; preds = %if.end.209
  %125 = load i64, i64* %produced_chars, align 8
  %inc211 = add nsw i64 %125, 1
  store i64 %inc211, i64* %produced_chars, align 8
  %126 = load i8, i8* %final_char, align 1
  %127 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr212 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %incdec.ptr212, i8** %dst.addr, align 8
  store i8 %126, i8* %127, align 1
  br label %do.end.213

do.end.213:                                       ; preds = %do.body.210
  %128 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %129 = load i32, i32* %reg, align 4
  %idxprom214 = sext i32 %129 to i64
  %arrayidx215 = getelementptr inbounds [4 x i32], [4 x i32]* %r, i32 0, i64 %idxprom214
  %130 = load i32, i32* %arrayidx215, align 4
  %idx.ext216 = sext i32 %130 to i64
  %add.ptr217 = getelementptr inbounds %struct.charset, %struct.charset* %128, i64 %idx.ext216
  %id218 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr217, i32 0, i32 0
  %131 = load i32, i32* %id218, align 4
  %132 = load i32, i32* %reg, align 4
  %idxprom219 = sext i32 %132 to i64
  %133 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec220 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %133, i32 0, i32 3
  %iso_2022221 = bitcast %union.anon* %spec220 to %struct.iso_2022_spec*
  %current_designation222 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022221, i32 0, i32 2
  %arrayidx223 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation222, i32 0, i64 %idxprom219
  store i32 %131, i32* %arrayidx223, align 4
  br label %do.end.224

do.end.224:                                       ; preds = %do.end.213
  br label %if.end.225

if.end.225:                                       ; preds = %do.end.224, %land.lhs.true.47, %for.body.42
  br label %for.inc.226

for.inc.226:                                      ; preds = %if.end.225
  %134 = load i32, i32* %reg, align 4
  %inc227 = add nsw i32 %134, 1
  store i32 %inc227, i32* %reg, align 4
  br label %for.cond.39

for.end.228:                                      ; preds = %for.cond.39
  br label %if.end.229

if.end.229:                                       ; preds = %for.end.228, %while.end
  %135 = load i8*, i8** %dst.addr, align 8
  %136 = load i8*, i8** %orig, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %135 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %136 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

; Function Attrs: nounwind uwtable
define internal i64 @coding_change_destination(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %orig = alloca i8*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 22
  %1 = load i8*, i8** %destination, align 8
  store i8* %1, i8** %orig, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_destination(%struct.coding_system* %2)
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 22
  %4 = load i8*, i8** %destination1, align 8
  %5 = load i8*, i8** %orig, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

declare i32 @encode_char(%struct.charset*, i32) #1

declare i64 @CHAR_TABLE_REF(i64, i32) #1

; Function Attrs: nounwind uwtable
define internal i8* @encode_invocation_designation(%struct.charset* %charset, %struct.coding_system* %coding, i8* %dst, i64* %p_nchars) #0 {
entry:
  %charset.addr = alloca %struct.charset*, align 8
  %coding.addr = alloca %struct.coding_system*, align 8
  %dst.addr = alloca i8*, align 8
  %p_nchars.addr = alloca i64*, align 8
  %multibytep = alloca i8, align 1
  %produced_chars = alloca i64, align 8
  %reg = alloca i32, align 4
  %id = alloca i32, align 4
  %final_char = alloca i8, align 1
  %intermediate_char_94 = alloca i8*, align 8
  %intermediate_char_96 = alloca i8*, align 8
  %revision = alloca i32, align 4
  %ch = alloca i32, align 4
  %b = alloca i32, align 4
  %ch223 = alloca i32, align 4
  %ch319 = alloca i32, align 4
  store %struct.charset* %charset, %struct.charset** %charset.addr, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64* %p_nchars, i64** %p_nchars.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  %1 = load i64*, i64** %p_nchars.addr, align 8
  %2 = load i64, i64* %1, align 8
  store i64 %2, i64* %produced_chars, align 8
  %3 = load %struct.charset*, %struct.charset** %charset.addr, align 8
  %id1 = getelementptr inbounds %struct.charset, %struct.charset* %3, i32 0, i32 0
  %4 = load i32, i32* %id1, align 4
  store i32 %4, i32* %id, align 4
  store i32 0, i32* %reg, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %reg, align 4
  %cmp = icmp slt i32 %5, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %id, align 4
  %7 = load i32, i32* %reg, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 3
  %iso_2022 = bitcast %union.anon* %spec to %struct.iso_2022_spec*
  %current_designation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022, i32 0, i32 2
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation, i32 0, i64 %idxprom
  %9 = load i32, i32* %arrayidx, align 4
  %cmp2 = icmp eq i32 %6, %9
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %reg, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %reg, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i32, i32* %reg, align 4
  %cmp3 = icmp sge i32 %11, 4
  br i1 %cmp3, label %if.then.4, label %if.end.165

if.then.4:                                        ; preds = %for.end
  %12 = load i32, i32* %id, align 4
  %13 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %max_charset_id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %13, i32 0, i32 2
  %14 = load i32, i32* %max_charset_id, align 4
  %cmp5 = icmp sle i32 %12, %14
  br i1 %cmp5, label %cond.true, label %cond.false.15

cond.true:                                        ; preds = %if.then.4
  %15 = load i32, i32* %id, align 4
  %idxprom6 = sext i32 %15 to i64
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 4
  %17 = load i8*, i8** %safe_charsets, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %17, i64 %idxprom6
  %18 = load i8, i8* %arrayidx7, align 1
  %conv = zext i8 %18 to i32
  %cmp8 = icmp ne i32 %conv, 255
  br i1 %cmp8, label %cond.true.10, label %cond.false

cond.true.10:                                     ; preds = %cond.true
  %19 = load i32, i32* %id, align 4
  %idxprom11 = sext i32 %19 to i64
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %safe_charsets12 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 4
  %21 = load i8*, i8** %safe_charsets12, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %21, i64 %idxprom11
  %22 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %22 to i32
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.10
  %cond = phi i32 [ %conv14, %cond.true.10 ], [ -1, %cond.false ]
  br label %cond.end.16

cond.false.15:                                    ; preds = %if.then.4
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.end
  %cond17 = phi i32 [ %cond, %cond.end ], [ -1, %cond.false.15 ]
  store i32 %cond17, i32* %reg, align 4
  %23 = load i32, i32* %reg, align 4
  %cmp18 = icmp slt i32 %23, 0
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %cond.end.16
  store i32 0, i32* %reg, align 4
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %cond.end.16
  br label %do.body

do.body:                                          ; preds = %if.end.21
  %24 = load %struct.charset*, %struct.charset** %charset.addr, align 8
  %iso_final = getelementptr inbounds %struct.charset, %struct.charset* %24, i32 0, i32 6
  %25 = load i32, i32* %iso_final, align 4
  %conv22 = trunc i32 %25 to i8
  store i8 %conv22, i8* %final_char, align 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i8** %intermediate_char_94, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8** %intermediate_char_96, align 8
  store i32 -1, i32* %revision, align 4
  %26 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec23 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %26, i32 0, i32 3
  %iso_202224 = bitcast %union.anon* %spec23 to %struct.iso_2022_spec*
  %flags = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_202224, i32 0, i32 0
  %27 = load i32, i32* %flags, align 4
  %and = and i32 %27, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %do.body
  %28 = load %struct.charset*, %struct.charset** %charset.addr, align 8
  %iso_revision = getelementptr inbounds %struct.charset, %struct.charset* %28, i32 0, i32 7
  %29 = load i32, i32* %iso_revision, align 4
  store i32 %29, i32* %revision, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %do.body
  %30 = load i32, i32* %revision, align 4
  %cmp27 = icmp sge i32 %30, 0
  br i1 %cmp27, label %if.then.29, label %if.end.85

if.then.29:                                       ; preds = %if.end.26
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.29
  %31 = load i64, i64* %produced_chars, align 8
  %add = add nsw i64 %31, 2
  store i64 %add, i64* %produced_chars, align 8
  %32 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr, i8** %dst.addr, align 8
  store i8 27, i8* %32, align 1
  %33 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr31 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr31, i8** %dst.addr, align 8
  store i8 38, i8* %33, align 1
  br label %do.end

do.end:                                           ; preds = %do.body.30
  br label %do.body.32

do.body.32:                                       ; preds = %do.end
  %34 = load i64, i64* %produced_chars, align 8
  %inc33 = add nsw i64 %34, 1
  store i64 %inc33, i64* %produced_chars, align 8
  %35 = load i8, i8* %multibytep, align 1
  %tobool34 = trunc i8 %35 to i1
  br i1 %tobool34, label %if.then.35, label %if.else.79

if.then.35:                                       ; preds = %do.body.32
  %36 = load i32, i32* %revision, align 4
  %add36 = add nsw i32 64, %36
  store i32 %add36, i32* %ch, align 4
  %37 = load i32, i32* %ch, align 4
  %cmp37 = icmp uge i32 %37, 128
  br i1 %cmp37, label %if.then.39, label %if.end.41

if.then.39:                                       ; preds = %if.then.35
  %38 = load i32, i32* %ch, align 4
  %add40 = add i32 %38, 4194048
  store i32 %add40, i32* %ch, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.39, %if.then.35
  br label %do.body.42

do.body.42:                                       ; preds = %if.end.41
  %39 = load i32, i32* %ch, align 4
  %cmp43 = icmp ule i32 %39, 127
  br i1 %cmp43, label %if.then.45, label %if.else

if.then.45:                                       ; preds = %do.body.42
  %40 = load i32, i32* %ch, align 4
  %conv46 = trunc i32 %40 to i8
  %41 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr47 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr47, i8** %dst.addr, align 8
  store i8 %conv46, i8* %41, align 1
  br label %if.end.77

if.else:                                          ; preds = %do.body.42
  %42 = load i32, i32* %ch, align 4
  %cmp48 = icmp ule i32 %42, 2047
  br i1 %cmp48, label %if.then.50, label %if.else.57

if.then.50:                                       ; preds = %if.else
  %43 = load i32, i32* %ch, align 4
  %shr = lshr i32 %43, 6
  %or = or i32 192, %shr
  %conv51 = trunc i32 %or to i8
  %44 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr52 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr52, i8** %dst.addr, align 8
  store i8 %conv51, i8* %44, align 1
  %45 = load i32, i32* %ch, align 4
  %and53 = and i32 %45, 63
  %or54 = or i32 128, %and53
  %conv55 = trunc i32 %or54 to i8
  %46 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr56 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %incdec.ptr56, i8** %dst.addr, align 8
  store i8 %conv55, i8* %46, align 1
  br label %if.end.76

if.else.57:                                       ; preds = %if.else
  %47 = load i32, i32* %ch, align 4
  %cmp58 = icmp ule i32 %47, 65535
  br i1 %cmp58, label %if.then.60, label %if.else.74

if.then.60:                                       ; preds = %if.else.57
  %48 = load i32, i32* %ch, align 4
  %shr61 = lshr i32 %48, 12
  %or62 = or i32 224, %shr61
  %conv63 = trunc i32 %or62 to i8
  %49 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr64, i8** %dst.addr, align 8
  store i8 %conv63, i8* %49, align 1
  %50 = load i32, i32* %ch, align 4
  %shr65 = lshr i32 %50, 6
  %and66 = and i32 %shr65, 63
  %or67 = or i32 128, %and66
  %conv68 = trunc i32 %or67 to i8
  %51 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr69 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr69, i8** %dst.addr, align 8
  store i8 %conv68, i8* %51, align 1
  %52 = load i32, i32* %ch, align 4
  %and70 = and i32 %52, 63
  %or71 = or i32 128, %and70
  %conv72 = trunc i32 %or71 to i8
  %53 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr73 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %incdec.ptr73, i8** %dst.addr, align 8
  store i8 %conv72, i8* %53, align 1
  br label %if.end.75

if.else.74:                                       ; preds = %if.else.57
  %54 = load i32, i32* %ch, align 4
  %55 = load i8*, i8** %dst.addr, align 8
  %call = call i32 @char_string(i32 %54, i8* %55)
  %56 = load i8*, i8** %dst.addr, align 8
  %idx.ext = sext i32 %call to i64
  %add.ptr = getelementptr inbounds i8, i8* %56, i64 %idx.ext
  store i8* %add.ptr, i8** %dst.addr, align 8
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.74, %if.then.60
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.then.50
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.then.45
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  br label %if.end.83

if.else.79:                                       ; preds = %do.body.32
  %57 = load i32, i32* %revision, align 4
  %add80 = add nsw i32 64, %57
  %conv81 = trunc i32 %add80 to i8
  %58 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr82 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr82, i8** %dst.addr, align 8
  store i8 %conv81, i8* %58, align 1
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.79, %do.end.78
  br label %do.end.84

do.end.84:                                        ; preds = %if.end.83
  br label %if.end.85

if.end.85:                                        ; preds = %do.end.84, %if.end.26
  br label %do.body.86

do.body.86:                                       ; preds = %if.end.85
  %59 = load i64, i64* %produced_chars, align 8
  %inc87 = add nsw i64 %59, 1
  store i64 %inc87, i64* %produced_chars, align 8
  %60 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr88 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr88, i8** %dst.addr, align 8
  store i8 27, i8* %60, align 1
  br label %do.end.89

do.end.89:                                        ; preds = %do.body.86
  %61 = load %struct.charset*, %struct.charset** %charset.addr, align 8
  %dimension = getelementptr inbounds %struct.charset, %struct.charset* %61, i32 0, i32 2
  %62 = load i32, i32* %dimension, align 4
  %cmp90 = icmp eq i32 %62, 1
  br i1 %cmp90, label %if.then.92, label %if.else.111

if.then.92:                                       ; preds = %do.end.89
  %63 = load %struct.charset*, %struct.charset** %charset.addr, align 8
  %iso_chars_96 = getelementptr inbounds %struct.charset, %struct.charset* %63, i32 0, i32 5
  %bf.load93 = load i8, i8* %iso_chars_96, align 8
  %bf.lshr94 = lshr i8 %bf.load93, 1
  %bf.clear95 = and i8 %bf.lshr94, 1
  %bf.cast96 = trunc i8 %bf.clear95 to i1
  br i1 %bf.cast96, label %if.else.101, label %if.then.97

if.then.97:                                       ; preds = %if.then.92
  %64 = load i32, i32* %reg, align 4
  %idxprom98 = sext i32 %64 to i64
  %65 = load i8*, i8** %intermediate_char_94, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %65, i64 %idxprom98
  %66 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %66 to i32
  store i32 %conv100, i32* %b, align 4
  br label %if.end.105

if.else.101:                                      ; preds = %if.then.92
  %67 = load i32, i32* %reg, align 4
  %idxprom102 = sext i32 %67 to i64
  %68 = load i8*, i8** %intermediate_char_96, align 8
  %arrayidx103 = getelementptr inbounds i8, i8* %68, i64 %idxprom102
  %69 = load i8, i8* %arrayidx103, align 1
  %conv104 = sext i8 %69 to i32
  store i32 %conv104, i32* %b, align 4
  br label %if.end.105

if.end.105:                                       ; preds = %if.else.101, %if.then.97
  br label %do.body.106

do.body.106:                                      ; preds = %if.end.105
  %70 = load i64, i64* %produced_chars, align 8
  %inc107 = add nsw i64 %70, 1
  store i64 %inc107, i64* %produced_chars, align 8
  %71 = load i32, i32* %b, align 4
  %conv108 = trunc i32 %71 to i8
  %72 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr109 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %incdec.ptr109, i8** %dst.addr, align 8
  store i8 %conv108, i8* %72, align 1
  br label %do.end.110

do.end.110:                                       ; preds = %do.body.106
  br label %if.end.153

if.else.111:                                      ; preds = %do.end.89
  br label %do.body.112

do.body.112:                                      ; preds = %if.else.111
  %73 = load i64, i64* %produced_chars, align 8
  %inc113 = add nsw i64 %73, 1
  store i64 %inc113, i64* %produced_chars, align 8
  %74 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr114 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr114, i8** %dst.addr, align 8
  store i8 36, i8* %74, align 1
  br label %do.end.115

do.end.115:                                       ; preds = %do.body.112
  %75 = load %struct.charset*, %struct.charset** %charset.addr, align 8
  %iso_chars_96116 = getelementptr inbounds %struct.charset, %struct.charset* %75, i32 0, i32 5
  %bf.load117 = load i8, i8* %iso_chars_96116, align 8
  %bf.lshr118 = lshr i8 %bf.load117, 1
  %bf.clear119 = and i8 %bf.lshr118, 1
  %bf.cast120 = trunc i8 %bf.clear119 to i1
  br i1 %bf.cast120, label %if.else.145, label %if.then.121

if.then.121:                                      ; preds = %do.end.115
  %76 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec122 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %76, i32 0, i32 3
  %iso_2022123 = bitcast %union.anon* %spec122 to %struct.iso_2022_spec*
  %flags124 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022123, i32 0, i32 0
  %77 = load i32, i32* %flags124, align 4
  %and125 = and i32 %77, 1
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %if.then.137, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.121
  %78 = load i32, i32* %reg, align 4
  %cmp127 = icmp ne i32 %78, 0
  br i1 %cmp127, label %if.then.137, label %lor.lhs.false.129

lor.lhs.false.129:                                ; preds = %lor.lhs.false
  %79 = load i8, i8* %final_char, align 1
  %conv130 = zext i8 %79 to i32
  %cmp131 = icmp slt i32 %conv130, 64
  br i1 %cmp131, label %if.then.137, label %lor.lhs.false.133

lor.lhs.false.133:                                ; preds = %lor.lhs.false.129
  %80 = load i8, i8* %final_char, align 1
  %conv134 = zext i8 %80 to i32
  %cmp135 = icmp sgt i32 %conv134, 66
  br i1 %cmp135, label %if.then.137, label %if.end.144

if.then.137:                                      ; preds = %lor.lhs.false.133, %lor.lhs.false.129, %lor.lhs.false, %if.then.121
  br label %do.body.138

do.body.138:                                      ; preds = %if.then.137
  %81 = load i64, i64* %produced_chars, align 8
  %inc139 = add nsw i64 %81, 1
  store i64 %inc139, i64* %produced_chars, align 8
  %82 = load i32, i32* %reg, align 4
  %idxprom140 = sext i32 %82 to i64
  %83 = load i8*, i8** %intermediate_char_94, align 8
  %arrayidx141 = getelementptr inbounds i8, i8* %83, i64 %idxprom140
  %84 = load i8, i8* %arrayidx141, align 1
  %85 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr142 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %incdec.ptr142, i8** %dst.addr, align 8
  store i8 %84, i8* %85, align 1
  br label %do.end.143

do.end.143:                                       ; preds = %do.body.138
  br label %if.end.144

if.end.144:                                       ; preds = %do.end.143, %lor.lhs.false.133
  br label %if.end.152

if.else.145:                                      ; preds = %do.end.115
  br label %do.body.146

do.body.146:                                      ; preds = %if.else.145
  %86 = load i64, i64* %produced_chars, align 8
  %inc147 = add nsw i64 %86, 1
  store i64 %inc147, i64* %produced_chars, align 8
  %87 = load i32, i32* %reg, align 4
  %idxprom148 = sext i32 %87 to i64
  %88 = load i8*, i8** %intermediate_char_96, align 8
  %arrayidx149 = getelementptr inbounds i8, i8* %88, i64 %idxprom148
  %89 = load i8, i8* %arrayidx149, align 1
  %90 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr150 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %incdec.ptr150, i8** %dst.addr, align 8
  store i8 %89, i8* %90, align 1
  br label %do.end.151

do.end.151:                                       ; preds = %do.body.146
  br label %if.end.152

if.end.152:                                       ; preds = %do.end.151, %if.end.144
  br label %if.end.153

if.end.153:                                       ; preds = %if.end.152, %do.end.110
  br label %do.body.154

do.body.154:                                      ; preds = %if.end.153
  %91 = load i64, i64* %produced_chars, align 8
  %inc155 = add nsw i64 %91, 1
  store i64 %inc155, i64* %produced_chars, align 8
  %92 = load i8, i8* %final_char, align 1
  %93 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr156 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %incdec.ptr156, i8** %dst.addr, align 8
  store i8 %92, i8* %93, align 1
  br label %do.end.157

do.end.157:                                       ; preds = %do.body.154
  %94 = load %struct.charset*, %struct.charset** %charset.addr, align 8
  %id158 = getelementptr inbounds %struct.charset, %struct.charset* %94, i32 0, i32 0
  %95 = load i32, i32* %id158, align 4
  %96 = load i32, i32* %reg, align 4
  %idxprom159 = sext i32 %96 to i64
  %97 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec160 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %97, i32 0, i32 3
  %iso_2022161 = bitcast %union.anon* %spec160 to %struct.iso_2022_spec*
  %current_designation162 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022161, i32 0, i32 2
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* %current_designation162, i32 0, i64 %idxprom159
  store i32 %95, i32* %arrayidx163, align 4
  br label %do.end.164

do.end.164:                                       ; preds = %do.end.157
  br label %if.end.165

if.end.165:                                       ; preds = %do.end.164, %for.end
  %98 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec166 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %98, i32 0, i32 3
  %iso_2022167 = bitcast %union.anon* %spec166 to %struct.iso_2022_spec*
  %current_invocation = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022167, i32 0, i32 1
  %arrayidx168 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation, i32 0, i64 0
  %99 = load i32, i32* %arrayidx168, align 4
  %100 = load i32, i32* %reg, align 4
  %cmp169 = icmp ne i32 %99, %100
  br i1 %cmp169, label %land.lhs.true, label %if.end.393

land.lhs.true:                                    ; preds = %if.end.165
  %101 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec171 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %101, i32 0, i32 3
  %iso_2022172 = bitcast %union.anon* %spec171 to %struct.iso_2022_spec*
  %current_invocation173 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022172, i32 0, i32 1
  %arrayidx174 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation173, i32 0, i64 1
  %102 = load i32, i32* %arrayidx174, align 4
  %103 = load i32, i32* %reg, align 4
  %cmp175 = icmp ne i32 %102, %103
  br i1 %cmp175, label %if.then.177, label %if.end.393

if.then.177:                                      ; preds = %land.lhs.true
  %104 = load i32, i32* %reg, align 4
  switch i32 %104, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.188
    i32 2, label %sw.bb.199
    i32 3, label %sw.bb.295
  ]

sw.bb:                                            ; preds = %if.then.177
  br label %do.body.178

do.body.178:                                      ; preds = %sw.bb
  br label %do.body.179

do.body.179:                                      ; preds = %do.body.178
  %105 = load i64, i64* %produced_chars, align 8
  %inc180 = add nsw i64 %105, 1
  store i64 %inc180, i64* %produced_chars, align 8
  %106 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr181 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr181, i8** %dst.addr, align 8
  store i8 15, i8* %106, align 1
  br label %do.end.182

do.end.182:                                       ; preds = %do.body.179
  %107 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec183 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %107, i32 0, i32 3
  %iso_2022184 = bitcast %union.anon* %spec183 to %struct.iso_2022_spec*
  %current_invocation185 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022184, i32 0, i32 1
  %arrayidx186 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation185, i32 0, i64 0
  store i32 0, i32* %arrayidx186, align 4
  br label %do.end.187

do.end.187:                                       ; preds = %do.end.182
  br label %sw.epilog

sw.bb.188:                                        ; preds = %if.then.177
  br label %do.body.189

do.body.189:                                      ; preds = %sw.bb.188
  br label %do.body.190

do.body.190:                                      ; preds = %do.body.189
  %108 = load i64, i64* %produced_chars, align 8
  %inc191 = add nsw i64 %108, 1
  store i64 %inc191, i64* %produced_chars, align 8
  %109 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr192 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %incdec.ptr192, i8** %dst.addr, align 8
  store i8 14, i8* %109, align 1
  br label %do.end.193

do.end.193:                                       ; preds = %do.body.190
  %110 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec194 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %110, i32 0, i32 3
  %iso_2022195 = bitcast %union.anon* %spec194 to %struct.iso_2022_spec*
  %current_invocation196 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022195, i32 0, i32 1
  %arrayidx197 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation196, i32 0, i64 0
  store i32 1, i32* %arrayidx197, align 4
  br label %do.end.198

do.end.198:                                       ; preds = %do.end.193
  br label %sw.epilog

sw.bb.199:                                        ; preds = %if.then.177
  %111 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec200 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %111, i32 0, i32 3
  %iso_2022201 = bitcast %union.anon* %spec200 to %struct.iso_2022_spec*
  %flags202 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022201, i32 0, i32 0
  %112 = load i32, i32* %flags202, align 4
  %and203 = and i32 %112, 32
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %if.then.205, label %if.else.282

if.then.205:                                      ; preds = %sw.bb.199
  br label %do.body.206

do.body.206:                                      ; preds = %if.then.205
  %113 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec207 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %113, i32 0, i32 3
  %iso_2022208 = bitcast %union.anon* %spec207 to %struct.iso_2022_spec*
  %flags209 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022208, i32 0, i32 0
  %114 = load i32, i32* %flags209, align 4
  %and210 = and i32 %114, 8
  %tobool211 = icmp ne i32 %and210, 0
  br i1 %tobool211, label %if.then.212, label %if.else.218

if.then.212:                                      ; preds = %do.body.206
  br label %do.body.213

do.body.213:                                      ; preds = %if.then.212
  %115 = load i64, i64* %produced_chars, align 8
  %add214 = add nsw i64 %115, 2
  store i64 %add214, i64* %produced_chars, align 8
  %116 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr215 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr215, i8** %dst.addr, align 8
  store i8 27, i8* %116, align 1
  %117 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr216 = getelementptr inbounds i8, i8* %117, i32 1
  store i8* %incdec.ptr216, i8** %dst.addr, align 8
  store i8 78, i8* %117, align 1
  br label %do.end.217

do.end.217:                                       ; preds = %do.body.213
  br label %if.end.276

if.else.218:                                      ; preds = %do.body.206
  br label %do.body.219

do.body.219:                                      ; preds = %if.else.218
  %118 = load i64, i64* %produced_chars, align 8
  %inc220 = add nsw i64 %118, 1
  store i64 %inc220, i64* %produced_chars, align 8
  %119 = load i8, i8* %multibytep, align 1
  %tobool221 = trunc i8 %119 to i1
  br i1 %tobool221, label %if.then.222, label %if.else.272

if.then.222:                                      ; preds = %do.body.219
  store i32 142, i32* %ch223, align 4
  %120 = load i32, i32* %ch223, align 4
  %cmp224 = icmp uge i32 %120, 128
  br i1 %cmp224, label %if.then.226, label %if.end.228

if.then.226:                                      ; preds = %if.then.222
  %121 = load i32, i32* %ch223, align 4
  %add227 = add i32 %121, 4194048
  store i32 %add227, i32* %ch223, align 4
  br label %if.end.228

if.end.228:                                       ; preds = %if.then.226, %if.then.222
  br label %do.body.229

do.body.229:                                      ; preds = %if.end.228
  %122 = load i32, i32* %ch223, align 4
  %cmp230 = icmp ule i32 %122, 127
  br i1 %cmp230, label %if.then.232, label %if.else.235

if.then.232:                                      ; preds = %do.body.229
  %123 = load i32, i32* %ch223, align 4
  %conv233 = trunc i32 %123 to i8
  %124 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr234 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr234, i8** %dst.addr, align 8
  store i8 %conv233, i8* %124, align 1
  br label %if.end.270

if.else.235:                                      ; preds = %do.body.229
  %125 = load i32, i32* %ch223, align 4
  %cmp236 = icmp ule i32 %125, 2047
  br i1 %cmp236, label %if.then.238, label %if.else.247

if.then.238:                                      ; preds = %if.else.235
  %126 = load i32, i32* %ch223, align 4
  %shr239 = lshr i32 %126, 6
  %or240 = or i32 192, %shr239
  %conv241 = trunc i32 %or240 to i8
  %127 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr242 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %incdec.ptr242, i8** %dst.addr, align 8
  store i8 %conv241, i8* %127, align 1
  %128 = load i32, i32* %ch223, align 4
  %and243 = and i32 %128, 63
  %or244 = or i32 128, %and243
  %conv245 = trunc i32 %or244 to i8
  %129 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr246 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %incdec.ptr246, i8** %dst.addr, align 8
  store i8 %conv245, i8* %129, align 1
  br label %if.end.269

if.else.247:                                      ; preds = %if.else.235
  %130 = load i32, i32* %ch223, align 4
  %cmp248 = icmp ule i32 %130, 65535
  br i1 %cmp248, label %if.then.250, label %if.else.264

if.then.250:                                      ; preds = %if.else.247
  %131 = load i32, i32* %ch223, align 4
  %shr251 = lshr i32 %131, 12
  %or252 = or i32 224, %shr251
  %conv253 = trunc i32 %or252 to i8
  %132 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr254 = getelementptr inbounds i8, i8* %132, i32 1
  store i8* %incdec.ptr254, i8** %dst.addr, align 8
  store i8 %conv253, i8* %132, align 1
  %133 = load i32, i32* %ch223, align 4
  %shr255 = lshr i32 %133, 6
  %and256 = and i32 %shr255, 63
  %or257 = or i32 128, %and256
  %conv258 = trunc i32 %or257 to i8
  %134 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr259 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr259, i8** %dst.addr, align 8
  store i8 %conv258, i8* %134, align 1
  %135 = load i32, i32* %ch223, align 4
  %and260 = and i32 %135, 63
  %or261 = or i32 128, %and260
  %conv262 = trunc i32 %or261 to i8
  %136 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr263 = getelementptr inbounds i8, i8* %136, i32 1
  store i8* %incdec.ptr263, i8** %dst.addr, align 8
  store i8 %conv262, i8* %136, align 1
  br label %if.end.268

if.else.264:                                      ; preds = %if.else.247
  %137 = load i32, i32* %ch223, align 4
  %138 = load i8*, i8** %dst.addr, align 8
  %call265 = call i32 @char_string(i32 %137, i8* %138)
  %139 = load i8*, i8** %dst.addr, align 8
  %idx.ext266 = sext i32 %call265 to i64
  %add.ptr267 = getelementptr inbounds i8, i8* %139, i64 %idx.ext266
  store i8* %add.ptr267, i8** %dst.addr, align 8
  br label %if.end.268

if.end.268:                                       ; preds = %if.else.264, %if.then.250
  br label %if.end.269

if.end.269:                                       ; preds = %if.end.268, %if.then.238
  br label %if.end.270

if.end.270:                                       ; preds = %if.end.269, %if.then.232
  br label %do.end.271

do.end.271:                                       ; preds = %if.end.270
  br label %if.end.274

if.else.272:                                      ; preds = %do.body.219
  %140 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr273 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %incdec.ptr273, i8** %dst.addr, align 8
  store i8 -114, i8* %140, align 1
  br label %if.end.274

if.end.274:                                       ; preds = %if.else.272, %do.end.271
  br label %do.end.275

do.end.275:                                       ; preds = %if.end.274
  br label %if.end.276

if.end.276:                                       ; preds = %do.end.275, %do.end.217
  %141 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec277 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %141, i32 0, i32 3
  %iso_2022278 = bitcast %union.anon* %spec277 to %struct.iso_2022_spec*
  %single_shifting = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022278, i32 0, i32 4
  %bf.load279 = load i8, i8* %single_shifting, align 4
  %bf.clear280 = and i8 %bf.load279, -2
  %bf.set = or i8 %bf.clear280, 1
  store i8 %bf.set, i8* %single_shifting, align 4
  br label %do.end.281

do.end.281:                                       ; preds = %if.end.276
  br label %if.end.294

if.else.282:                                      ; preds = %sw.bb.199
  br label %do.body.283

do.body.283:                                      ; preds = %if.else.282
  br label %do.body.284

do.body.284:                                      ; preds = %do.body.283
  %142 = load i64, i64* %produced_chars, align 8
  %add285 = add nsw i64 %142, 2
  store i64 %add285, i64* %produced_chars, align 8
  %143 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr286 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr286, i8** %dst.addr, align 8
  store i8 27, i8* %143, align 1
  %144 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr287 = getelementptr inbounds i8, i8* %144, i32 1
  store i8* %incdec.ptr287, i8** %dst.addr, align 8
  store i8 110, i8* %144, align 1
  br label %do.end.288

do.end.288:                                       ; preds = %do.body.284
  %145 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec289 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %145, i32 0, i32 3
  %iso_2022290 = bitcast %union.anon* %spec289 to %struct.iso_2022_spec*
  %current_invocation291 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022290, i32 0, i32 1
  %arrayidx292 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation291, i32 0, i64 0
  store i32 2, i32* %arrayidx292, align 4
  br label %do.end.293

do.end.293:                                       ; preds = %do.end.288
  br label %if.end.294

if.end.294:                                       ; preds = %do.end.293, %do.end.281
  br label %sw.epilog

sw.bb.295:                                        ; preds = %if.then.177
  %146 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec296 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %146, i32 0, i32 3
  %iso_2022297 = bitcast %union.anon* %spec296 to %struct.iso_2022_spec*
  %flags298 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022297, i32 0, i32 0
  %147 = load i32, i32* %flags298, align 4
  %and299 = and i32 %147, 32
  %tobool300 = icmp ne i32 %and299, 0
  br i1 %tobool300, label %if.then.301, label %if.else.380

if.then.301:                                      ; preds = %sw.bb.295
  br label %do.body.302

do.body.302:                                      ; preds = %if.then.301
  %148 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec303 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %148, i32 0, i32 3
  %iso_2022304 = bitcast %union.anon* %spec303 to %struct.iso_2022_spec*
  %flags305 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022304, i32 0, i32 0
  %149 = load i32, i32* %flags305, align 4
  %and306 = and i32 %149, 8
  %tobool307 = icmp ne i32 %and306, 0
  br i1 %tobool307, label %if.then.308, label %if.else.314

if.then.308:                                      ; preds = %do.body.302
  br label %do.body.309

do.body.309:                                      ; preds = %if.then.308
  %150 = load i64, i64* %produced_chars, align 8
  %add310 = add nsw i64 %150, 2
  store i64 %add310, i64* %produced_chars, align 8
  %151 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr311 = getelementptr inbounds i8, i8* %151, i32 1
  store i8* %incdec.ptr311, i8** %dst.addr, align 8
  store i8 27, i8* %151, align 1
  %152 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr312 = getelementptr inbounds i8, i8* %152, i32 1
  store i8* %incdec.ptr312, i8** %dst.addr, align 8
  store i8 79, i8* %152, align 1
  br label %do.end.313

do.end.313:                                       ; preds = %do.body.309
  br label %if.end.372

if.else.314:                                      ; preds = %do.body.302
  br label %do.body.315

do.body.315:                                      ; preds = %if.else.314
  %153 = load i64, i64* %produced_chars, align 8
  %inc316 = add nsw i64 %153, 1
  store i64 %inc316, i64* %produced_chars, align 8
  %154 = load i8, i8* %multibytep, align 1
  %tobool317 = trunc i8 %154 to i1
  br i1 %tobool317, label %if.then.318, label %if.else.368

if.then.318:                                      ; preds = %do.body.315
  store i32 143, i32* %ch319, align 4
  %155 = load i32, i32* %ch319, align 4
  %cmp320 = icmp uge i32 %155, 128
  br i1 %cmp320, label %if.then.322, label %if.end.324

if.then.322:                                      ; preds = %if.then.318
  %156 = load i32, i32* %ch319, align 4
  %add323 = add i32 %156, 4194048
  store i32 %add323, i32* %ch319, align 4
  br label %if.end.324

if.end.324:                                       ; preds = %if.then.322, %if.then.318
  br label %do.body.325

do.body.325:                                      ; preds = %if.end.324
  %157 = load i32, i32* %ch319, align 4
  %cmp326 = icmp ule i32 %157, 127
  br i1 %cmp326, label %if.then.328, label %if.else.331

if.then.328:                                      ; preds = %do.body.325
  %158 = load i32, i32* %ch319, align 4
  %conv329 = trunc i32 %158 to i8
  %159 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr330 = getelementptr inbounds i8, i8* %159, i32 1
  store i8* %incdec.ptr330, i8** %dst.addr, align 8
  store i8 %conv329, i8* %159, align 1
  br label %if.end.366

if.else.331:                                      ; preds = %do.body.325
  %160 = load i32, i32* %ch319, align 4
  %cmp332 = icmp ule i32 %160, 2047
  br i1 %cmp332, label %if.then.334, label %if.else.343

if.then.334:                                      ; preds = %if.else.331
  %161 = load i32, i32* %ch319, align 4
  %shr335 = lshr i32 %161, 6
  %or336 = or i32 192, %shr335
  %conv337 = trunc i32 %or336 to i8
  %162 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr338 = getelementptr inbounds i8, i8* %162, i32 1
  store i8* %incdec.ptr338, i8** %dst.addr, align 8
  store i8 %conv337, i8* %162, align 1
  %163 = load i32, i32* %ch319, align 4
  %and339 = and i32 %163, 63
  %or340 = or i32 128, %and339
  %conv341 = trunc i32 %or340 to i8
  %164 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr342 = getelementptr inbounds i8, i8* %164, i32 1
  store i8* %incdec.ptr342, i8** %dst.addr, align 8
  store i8 %conv341, i8* %164, align 1
  br label %if.end.365

if.else.343:                                      ; preds = %if.else.331
  %165 = load i32, i32* %ch319, align 4
  %cmp344 = icmp ule i32 %165, 65535
  br i1 %cmp344, label %if.then.346, label %if.else.360

if.then.346:                                      ; preds = %if.else.343
  %166 = load i32, i32* %ch319, align 4
  %shr347 = lshr i32 %166, 12
  %or348 = or i32 224, %shr347
  %conv349 = trunc i32 %or348 to i8
  %167 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr350 = getelementptr inbounds i8, i8* %167, i32 1
  store i8* %incdec.ptr350, i8** %dst.addr, align 8
  store i8 %conv349, i8* %167, align 1
  %168 = load i32, i32* %ch319, align 4
  %shr351 = lshr i32 %168, 6
  %and352 = and i32 %shr351, 63
  %or353 = or i32 128, %and352
  %conv354 = trunc i32 %or353 to i8
  %169 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr355 = getelementptr inbounds i8, i8* %169, i32 1
  store i8* %incdec.ptr355, i8** %dst.addr, align 8
  store i8 %conv354, i8* %169, align 1
  %170 = load i32, i32* %ch319, align 4
  %and356 = and i32 %170, 63
  %or357 = or i32 128, %and356
  %conv358 = trunc i32 %or357 to i8
  %171 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr359 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %incdec.ptr359, i8** %dst.addr, align 8
  store i8 %conv358, i8* %171, align 1
  br label %if.end.364

if.else.360:                                      ; preds = %if.else.343
  %172 = load i32, i32* %ch319, align 4
  %173 = load i8*, i8** %dst.addr, align 8
  %call361 = call i32 @char_string(i32 %172, i8* %173)
  %174 = load i8*, i8** %dst.addr, align 8
  %idx.ext362 = sext i32 %call361 to i64
  %add.ptr363 = getelementptr inbounds i8, i8* %174, i64 %idx.ext362
  store i8* %add.ptr363, i8** %dst.addr, align 8
  br label %if.end.364

if.end.364:                                       ; preds = %if.else.360, %if.then.346
  br label %if.end.365

if.end.365:                                       ; preds = %if.end.364, %if.then.334
  br label %if.end.366

if.end.366:                                       ; preds = %if.end.365, %if.then.328
  br label %do.end.367

do.end.367:                                       ; preds = %if.end.366
  br label %if.end.370

if.else.368:                                      ; preds = %do.body.315
  %175 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr369 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr369, i8** %dst.addr, align 8
  store i8 -113, i8* %175, align 1
  br label %if.end.370

if.end.370:                                       ; preds = %if.else.368, %do.end.367
  br label %do.end.371

do.end.371:                                       ; preds = %if.end.370
  br label %if.end.372

if.end.372:                                       ; preds = %do.end.371, %do.end.313
  %176 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec373 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %176, i32 0, i32 3
  %iso_2022374 = bitcast %union.anon* %spec373 to %struct.iso_2022_spec*
  %single_shifting375 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022374, i32 0, i32 4
  %bf.load376 = load i8, i8* %single_shifting375, align 4
  %bf.clear377 = and i8 %bf.load376, -2
  %bf.set378 = or i8 %bf.clear377, 1
  store i8 %bf.set378, i8* %single_shifting375, align 4
  br label %do.end.379

do.end.379:                                       ; preds = %if.end.372
  br label %if.end.392

if.else.380:                                      ; preds = %sw.bb.295
  br label %do.body.381

do.body.381:                                      ; preds = %if.else.380
  br label %do.body.382

do.body.382:                                      ; preds = %do.body.381
  %177 = load i64, i64* %produced_chars, align 8
  %add383 = add nsw i64 %177, 2
  store i64 %add383, i64* %produced_chars, align 8
  %178 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr384 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %incdec.ptr384, i8** %dst.addr, align 8
  store i8 27, i8* %178, align 1
  %179 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr385 = getelementptr inbounds i8, i8* %179, i32 1
  store i8* %incdec.ptr385, i8** %dst.addr, align 8
  store i8 110, i8* %179, align 1
  br label %do.end.386

do.end.386:                                       ; preds = %do.body.382
  %180 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %spec387 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %180, i32 0, i32 3
  %iso_2022388 = bitcast %union.anon* %spec387 to %struct.iso_2022_spec*
  %current_invocation389 = getelementptr inbounds %struct.iso_2022_spec, %struct.iso_2022_spec* %iso_2022388, i32 0, i32 1
  %arrayidx390 = getelementptr inbounds [2 x i32], [2 x i32]* %current_invocation389, i32 0, i64 0
  store i32 3, i32* %arrayidx390, align 4
  br label %do.end.391

do.end.391:                                       ; preds = %do.end.386
  br label %if.end.392

if.end.392:                                       ; preds = %do.end.391, %do.end.379
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.177
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.392, %if.end.294, %do.end.198, %do.end.187
  br label %if.end.393

if.end.393:                                       ; preds = %sw.epilog, %land.lhs.true, %if.end.165
  %181 = load i64, i64* %produced_chars, align 8
  %182 = load i64*, i64** %p_nchars.addr, align 8
  store i64 %181, i64* %182, align 8
  %183 = load i8*, i8** %dst.addr, align 8
  ret i8* %183
}

declare i64 @Fcdr(i64) #1

declare i64 @Fassq(i64, i64) #1

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #5

declare void @ccl_driver(%struct.ccl_program*, i32*, i32*, i32, i32, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @emacs_mule_finish_composition(i32* %charbuf, %struct.composition_status* %cmp_status) #0 {
entry:
  %charbuf.addr = alloca i32*, align 8
  %cmp_status.addr = alloca %struct.composition_status*, align 8
  %idx = alloca i32, align 4
  %new_chars = alloca i32, align 4
  %rule = alloca i32, align 4
  %nchars26 = alloca i32, align 4
  %nbytes = alloca i32, align 4
  store i32* %charbuf, i32** %charbuf.addr, align 8
  store %struct.composition_status* %cmp_status, %struct.composition_status** %cmp_status.addr, align 8
  %0 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %length = getelementptr inbounds %struct.composition_status, %struct.composition_status* %0, i32 0, i32 3
  %1 = load i32, i32* %length, align 4
  %sub = sub nsw i32 0, %1
  store i32 %sub, i32* %idx, align 4
  %2 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %old_form = getelementptr inbounds %struct.composition_status, %struct.composition_status* %2, i32 0, i32 2
  %3 = load i8, i8* %old_form, align 1
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %nchars = getelementptr inbounds %struct.composition_status, %struct.composition_status* %4, i32 0, i32 4
  %5 = load i32, i32* %nchars, align 4
  %cmp = icmp sgt i32 %5, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %nchars1 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %6, i32 0, i32 4
  %7 = load i32, i32* %nchars1, align 4
  %8 = load i32, i32* %idx, align 4
  %add = add nsw i32 %8, 2
  %idxprom = sext i32 %add to i64
  %9 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom
  store i32 %7, i32* %arrayidx, align 4
  store i32 0, i32* %new_chars, align 4
  %10 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %method = getelementptr inbounds %struct.composition_status, %struct.composition_status* %10, i32 0, i32 1
  %11 = load i32, i32* %method, align 4
  %cmp2 = icmp eq i32 %11, 1
  br i1 %cmp2, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %if.then
  %12 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %state = getelementptr inbounds %struct.composition_status, %struct.composition_status* %12, i32 0, i32 0
  %13 = load i32, i32* %state, align 4
  %cmp4 = icmp eq i32 %13, 1
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %land.lhs.true.3
  %14 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i64 -1
  %15 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %15, 160
  store i32 %add7, i32* %rule, align 4
  %16 = load i32, i32* %rule, align 4
  %add8 = add nsw i32 %16, 4194048
  %17 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i64 -2
  store i32 %add8, i32* %arrayidx9, align 4
  %18 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx10 = getelementptr inbounds i32, i32* %18, i64 -1
  store i32 -1, i32* %arrayidx10, align 4
  store i32 1, i32* %new_chars, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.5, %land.lhs.true.3, %if.then
  br label %if.end.53

if.else:                                          ; preds = %land.lhs.true, %entry
  %19 = load i32, i32* %idx, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %idx, align 4
  %idxprom11 = sext i32 %19 to i64
  %20 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %20, i64 %idxprom11
  store i32 4194176, i32* %arrayidx12, align 4
  %21 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %method13 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %21, i32 0, i32 1
  %22 = load i32, i32* %method13, align 4
  %cmp14 = icmp eq i32 %22, 1
  br i1 %cmp14, label %if.then.15, label %if.else.25

if.then.15:                                       ; preds = %if.else
  %23 = load i32, i32* %idx, align 4
  %inc16 = add nsw i32 %23, 1
  store i32 %inc16, i32* %idx, align 4
  %idxprom17 = sext i32 %23 to i64
  %24 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx18 = getelementptr inbounds i32, i32* %24, i64 %idxprom17
  store i32 4194303, i32* %arrayidx18, align 4
  %25 = load i32, i32* %idx, align 4
  %inc19 = add nsw i32 %25, 1
  store i32 %inc19, i32* %idx, align 4
  %idxprom20 = sext i32 %25 to i64
  %26 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx21 = getelementptr inbounds i32, i32* %26, i64 %idxprom20
  store i32 -3, i32* %arrayidx21, align 4
  %27 = load i32, i32* %idx, align 4
  %inc22 = add nsw i32 %27, 1
  store i32 %inc22, i32* %idx, align 4
  %idxprom23 = sext i32 %27 to i64
  %28 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx24 = getelementptr inbounds i32, i32* %28, i64 %idxprom23
  store i32 0, i32* %arrayidx24, align 4
  store i32 1, i32* %new_chars, align 4
  br label %if.end.52

if.else.25:                                       ; preds = %if.else
  %29 = load i32, i32* %idx, align 4
  %add27 = add nsw i32 %29, 1
  %idxprom28 = sext i32 %add27 to i64
  %30 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx29 = getelementptr inbounds i32, i32* %30, i64 %idxprom28
  %31 = load i32, i32* %arrayidx29, align 4
  %add30 = add nsw i32 %31, 160
  store i32 %add30, i32* %nchars26, align 4
  %32 = load i32, i32* %idx, align 4
  %add31 = add nsw i32 %32, 2
  %idxprom32 = sext i32 %add31 to i64
  %33 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx33 = getelementptr inbounds i32, i32* %33, i64 %idxprom32
  %34 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %34, 160
  store i32 %add34, i32* %nbytes, align 4
  %35 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %method35 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %35, i32 0, i32 1
  %36 = load i32, i32* %method35, align 4
  %add36 = add i32 242, %36
  %add37 = add i32 %add36, 4194048
  %37 = load i32, i32* %idx, align 4
  %inc38 = add nsw i32 %37, 1
  store i32 %inc38, i32* %idx, align 4
  %idxprom39 = sext i32 %37 to i64
  %38 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx40 = getelementptr inbounds i32, i32* %38, i64 %idxprom39
  store i32 %add37, i32* %arrayidx40, align 4
  %39 = load i32, i32* %nbytes, align 4
  %add41 = add nsw i32 %39, 4194048
  %40 = load i32, i32* %idx, align 4
  %inc42 = add nsw i32 %40, 1
  store i32 %inc42, i32* %idx, align 4
  %idxprom43 = sext i32 %40 to i64
  %41 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx44 = getelementptr inbounds i32, i32* %41, i64 %idxprom43
  store i32 %add41, i32* %arrayidx44, align 4
  %42 = load i32, i32* %nchars26, align 4
  %add45 = add nsw i32 %42, 4194048
  %43 = load i32, i32* %idx, align 4
  %inc46 = add nsw i32 %43, 1
  store i32 %inc46, i32* %idx, align 4
  %idxprom47 = sext i32 %43 to i64
  %44 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx48 = getelementptr inbounds i32, i32* %44, i64 %idxprom47
  store i32 %add45, i32* %arrayidx48, align 4
  %45 = load i32, i32* %idx, align 4
  %inc49 = add nsw i32 %45, 1
  store i32 %inc49, i32* %idx, align 4
  %idxprom50 = sext i32 %45 to i64
  %46 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx51 = getelementptr inbounds i32, i32* %46, i64 %idxprom50
  store i32 -1, i32* %arrayidx51, align 4
  store i32 4, i32* %new_chars, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.25, %if.then.15
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.end
  %47 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %state54 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %47, i32 0, i32 0
  store i32 0, i32* %state54, align 4
  %48 = load i32, i32* %new_chars, align 4
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal i32 @emacs_mule_char(%struct.coding_system* %coding, i8* %src, i32* %nbytes, i32* %nchars, i32* %id, %struct.composition_status* %cmp_status) #0 {
entry:
  %retval = alloca i32, align 4
  %coding.addr = alloca %struct.coding_system*, align 8
  %src.addr = alloca i8*, align 8
  %nbytes.addr = alloca i32*, align 8
  %nchars.addr = alloca i32*, align 8
  %id.addr = alloca i32*, align 8
  %cmp_status.addr = alloca %struct.composition_status*, align 8
  %src_end = alloca i8*, align 8
  %src_base = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %charset_ID = alloca i32, align 4
  %code = alloca i32, align 4
  %c = alloca i32, align 4
  %consumed_chars = alloca i64, align 8
  %mseq_found = alloca i8, align 1
  %offset = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i32* %nbytes, i32** %nbytes.addr, align 8
  store i32* %nchars, i32** %nchars.addr, align 8
  store i32* %id, i32** %id.addr, align 8
  store %struct.composition_status* %cmp_status, %struct.composition_status** %cmp_status.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 17
  %1 = load i8*, i8** %source, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 15
  %3 = load i64, i64* %src_bytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %src_end, align 8
  %4 = load i8*, i8** %src.addr, align 8
  store i8* %4, i8** %src_base, align 8
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  store i8 0, i8* %mseq_found, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %6 = load i8*, i8** %src.addr, align 8
  %7 = load i8*, i8** %src_end, align 8
  %cmp = icmp eq i8* %6, %7
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %do.body
  %8 = load i8*, i8** %src_base, align 8
  %9 = load i8*, i8** %src.addr, align 8
  %cmp1 = icmp ult i8* %8, %9
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %10, i32 1)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %no_more_source

if.end.3:                                         ; preds = %do.body
  %11 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv = zext i8 %12 to i32
  store i32 %conv, i32* %c, align 4
  %13 = load i8, i8* %multibytep, align 1
  %tobool = trunc i8 %13 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end.3
  %14 = load i32, i32* %c, align 4
  %and = and i32 %14, 128
  %tobool5 = icmp ne i32 %and, 0
  br i1 %tobool5, label %if.then.6, label %if.end.16

if.then.6:                                        ; preds = %land.lhs.true
  %15 = load i32, i32* %c, align 4
  %and7 = and i32 %15, 254
  %cmp8 = icmp eq i32 %and7, 192
  br i1 %cmp8, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.then.6
  %16 = load i32, i32* %c, align 4
  %and11 = and i32 %16, 1
  %shl = shl i32 %and11, 6
  %17 = load i8*, i8** %src.addr, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr12, i8** %src.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv13 = zext i8 %18 to i32
  %or = or i32 %shl, %conv13
  store i32 %or, i32* %c, align 4
  br label %if.end.15

if.else:                                          ; preds = %if.then.6
  %19 = load i8*, i8** %src.addr, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %19, i32 -1
  store i8* %incdec.ptr14, i8** %src.addr, align 8
  %20 = load i8*, i8** %src.addr, align 8
  %call = call i32 @string_char(i8* %20, i8** %src.addr, i32* null)
  %sub = sub nsw i32 0, %call
  store i32 %sub, i32* %c, align 4
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %21, i32 3)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.10
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %land.lhs.true, %if.end.3
  %22 = load i64, i64* %consumed_chars, align 8
  %inc = add nsw i64 %22, 1
  store i64 %inc, i64* %consumed_chars, align 8
  br label %do.end

do.end:                                           ; preds = %if.end.16
  %23 = load i32, i32* %c, align 4
  %cmp17 = icmp slt i32 %23, 0
  br i1 %cmp17, label %if.then.19, label %if.else.21

if.then.19:                                       ; preds = %do.end
  %24 = load i32, i32* %c, align 4
  %sub20 = sub nsw i32 0, %24
  store i32 %sub20, i32* %c, align 4
  %25 = load i32, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @emacs_mule_charset, i32 0, i64 0), align 4
  store i32 %25, i32* %charset_ID, align 4
  br label %if.end.586

if.else.21:                                       ; preds = %do.end
  %26 = load i32, i32* %c, align 4
  %cmp22 = icmp sge i32 %26, 160
  br i1 %cmp22, label %if.then.24, label %if.end.87

if.then.24:                                       ; preds = %if.else.21
  %27 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %state = getelementptr inbounds %struct.composition_status, %struct.composition_status* %27, i32 0, i32 0
  %28 = load i32, i32* %state, align 4
  %cmp25 = icmp ne i32 %28, 0
  br i1 %cmp25, label %land.lhs.true.27, label %if.else.85

land.lhs.true.27:                                 ; preds = %if.then.24
  %29 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %old_form = getelementptr inbounds %struct.composition_status, %struct.composition_status* %29, i32 0, i32 2
  %30 = load i8, i8* %old_form, align 1
  %tobool28 = trunc i8 %30 to i1
  br i1 %tobool28, label %if.then.30, label %if.else.85

if.then.30:                                       ; preds = %land.lhs.true.27
  %31 = load %struct.composition_status*, %struct.composition_status** %cmp_status.addr, align 8
  %state31 = getelementptr inbounds %struct.composition_status, %struct.composition_status* %31, i32 0, i32 0
  %32 = load i32, i32* %state31, align 4
  %cmp32 = icmp eq i32 %32, 1
  br i1 %cmp32, label %if.then.34, label %if.else.80

if.then.34:                                       ; preds = %if.then.30
  %33 = load i32, i32* %c, align 4
  %cmp35 = icmp eq i32 %33, 160
  br i1 %cmp35, label %if.then.37, label %if.else.77

if.then.37:                                       ; preds = %if.then.34
  br label %do.body.38

do.body.38:                                       ; preds = %if.then.37
  %34 = load i8*, i8** %src.addr, align 8
  %35 = load i8*, i8** %src_end, align 8
  %cmp39 = icmp eq i8* %34, %35
  br i1 %cmp39, label %if.then.41, label %if.end.46

if.then.41:                                       ; preds = %do.body.38
  %36 = load i8*, i8** %src_base, align 8
  %37 = load i8*, i8** %src.addr, align 8
  %cmp42 = icmp ult i8* %36, %37
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.then.41
  %38 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %38, i32 1)
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.44, %if.then.41
  br label %no_more_source

if.end.46:                                        ; preds = %do.body.38
  %39 = load i8*, i8** %src.addr, align 8
  %incdec.ptr47 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr47, i8** %src.addr, align 8
  %40 = load i8, i8* %39, align 1
  %conv48 = zext i8 %40 to i32
  store i32 %conv48, i32* %c, align 4
  %41 = load i8, i8* %multibytep, align 1
  %tobool49 = trunc i8 %41 to i1
  br i1 %tobool49, label %land.lhs.true.51, label %if.end.69

land.lhs.true.51:                                 ; preds = %if.end.46
  %42 = load i32, i32* %c, align 4
  %and52 = and i32 %42, 128
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then.54, label %if.end.69

if.then.54:                                       ; preds = %land.lhs.true.51
  %43 = load i32, i32* %c, align 4
  %and55 = and i32 %43, 254
  %cmp56 = icmp eq i32 %and55, 192
  br i1 %cmp56, label %if.then.58, label %if.else.64

if.then.58:                                       ; preds = %if.then.54
  %44 = load i32, i32* %c, align 4
  %and59 = and i32 %44, 1
  %shl60 = shl i32 %and59, 6
  %45 = load i8*, i8** %src.addr, align 8
  %incdec.ptr61 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr61, i8** %src.addr, align 8
  %46 = load i8, i8* %45, align 1
  %conv62 = zext i8 %46 to i32
  %or63 = or i32 %shl60, %conv62
  store i32 %or63, i32* %c, align 4
  br label %if.end.68

if.else.64:                                       ; preds = %if.then.54
  %47 = load i8*, i8** %src.addr, align 8
  %incdec.ptr65 = getelementptr inbounds i8, i8* %47, i32 -1
  store i8* %incdec.ptr65, i8** %src.addr, align 8
  %48 = load i8*, i8** %src.addr, align 8
  %call66 = call i32 @string_char(i8* %48, i8** %src.addr, i32* null)
  %sub67 = sub nsw i32 0, %call66
  store i32 %sub67, i32* %c, align 4
  %49 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %49, i32 3)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.64, %if.then.58
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %land.lhs.true.51, %if.end.46
  %50 = load i64, i64* %consumed_chars, align 8
  %inc70 = add nsw i64 %50, 1
  store i64 %inc70, i64* %consumed_chars, align 8
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.69
  %51 = load i32, i32* %c, align 4
  %sub72 = sub nsw i32 %51, 128
  store i32 %sub72, i32* %c, align 4
  %52 = load i32, i32* %c, align 4
  %cmp73 = icmp slt i32 %52, 0
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %do.end.71
  br label %invalid_code

if.end.76:                                        ; preds = %do.end.71
  br label %if.end.79

if.else.77:                                       ; preds = %if.then.34
  %53 = load i32, i32* %c, align 4
  %sub78 = sub nsw i32 %53, 32
  store i32 %sub78, i32* %c, align 4
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.77, %if.end.76
  store i8 1, i8* %mseq_found, align 1
  br label %if.end.84

if.else.80:                                       ; preds = %if.then.30
  %54 = load i8*, i8** %src.addr, align 8
  %55 = load i8*, i8** %src_base, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %54 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv81 = trunc i64 %sub.ptr.sub to i32
  %56 = load i32*, i32** %nbytes.addr, align 8
  store i32 %conv81, i32* %56, align 4
  %57 = load i64, i64* %consumed_chars, align 8
  %conv82 = trunc i64 %57 to i32
  %58 = load i32*, i32** %nchars.addr, align 8
  store i32 %conv82, i32* %58, align 4
  %59 = load i32, i32* %c, align 4
  %sub83 = sub nsw i32 0, %59
  store i32 %sub83, i32* %retval
  br label %return

if.end.84:                                        ; preds = %if.end.79
  br label %if.end.86

if.else.85:                                       ; preds = %land.lhs.true.27, %if.then.24
  br label %invalid_code

if.end.86:                                        ; preds = %if.end.84
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86, %if.else.21
  %60 = load i32, i32* %c, align 4
  %idxprom = sext i32 %60 to i64
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @emacs_mule_bytes, i32 0, i64 %idxprom
  %61 = load i8, i8* %arrayidx, align 1
  %conv88 = sext i8 %61 to i32
  switch i32 %conv88, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.134
    i32 4, label %sw.bb.310
    i32 1, label %sw.bb.434
  ]

sw.bb:                                            ; preds = %if.end.87
  %62 = load i32, i32* %c, align 4
  %idxprom89 = sext i32 %62 to i64
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @emacs_mule_charset, i32 0, i64 %idxprom89
  %63 = load i32, i32* %arrayidx90, align 4
  store i32 %63, i32* %charset_ID, align 4
  %cmp91 = icmp slt i32 %63, 0
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %sw.bb
  br label %invalid_code

if.end.94:                                        ; preds = %sw.bb
  br label %do.body.95

do.body.95:                                       ; preds = %if.end.94
  %64 = load i8*, i8** %src.addr, align 8
  %65 = load i8*, i8** %src_end, align 8
  %cmp96 = icmp eq i8* %64, %65
  br i1 %cmp96, label %if.then.98, label %if.end.103

if.then.98:                                       ; preds = %do.body.95
  %66 = load i8*, i8** %src_base, align 8
  %67 = load i8*, i8** %src.addr, align 8
  %cmp99 = icmp ult i8* %66, %67
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %if.then.98
  %68 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %68, i32 1)
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.101, %if.then.98
  br label %no_more_source

if.end.103:                                       ; preds = %do.body.95
  %69 = load i8*, i8** %src.addr, align 8
  %incdec.ptr104 = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr104, i8** %src.addr, align 8
  %70 = load i8, i8* %69, align 1
  %conv105 = zext i8 %70 to i32
  store i32 %conv105, i32* %c, align 4
  %71 = load i8, i8* %multibytep, align 1
  %tobool106 = trunc i8 %71 to i1
  br i1 %tobool106, label %land.lhs.true.108, label %if.end.126

land.lhs.true.108:                                ; preds = %if.end.103
  %72 = load i32, i32* %c, align 4
  %and109 = and i32 %72, 128
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.then.111, label %if.end.126

if.then.111:                                      ; preds = %land.lhs.true.108
  %73 = load i32, i32* %c, align 4
  %and112 = and i32 %73, 254
  %cmp113 = icmp eq i32 %and112, 192
  br i1 %cmp113, label %if.then.115, label %if.else.121

if.then.115:                                      ; preds = %if.then.111
  %74 = load i32, i32* %c, align 4
  %and116 = and i32 %74, 1
  %shl117 = shl i32 %and116, 6
  %75 = load i8*, i8** %src.addr, align 8
  %incdec.ptr118 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr118, i8** %src.addr, align 8
  %76 = load i8, i8* %75, align 1
  %conv119 = zext i8 %76 to i32
  %or120 = or i32 %shl117, %conv119
  store i32 %or120, i32* %c, align 4
  br label %if.end.125

if.else.121:                                      ; preds = %if.then.111
  %77 = load i8*, i8** %src.addr, align 8
  %incdec.ptr122 = getelementptr inbounds i8, i8* %77, i32 -1
  store i8* %incdec.ptr122, i8** %src.addr, align 8
  %78 = load i8*, i8** %src.addr, align 8
  %call123 = call i32 @string_char(i8* %78, i8** %src.addr, i32* null)
  %sub124 = sub nsw i32 0, %call123
  store i32 %sub124, i32* %c, align 4
  %79 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %79, i32 3)
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.121, %if.then.115
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %land.lhs.true.108, %if.end.103
  %80 = load i64, i64* %consumed_chars, align 8
  %inc127 = add nsw i64 %80, 1
  store i64 %inc127, i64* %consumed_chars, align 8
  br label %do.end.128

do.end.128:                                       ; preds = %if.end.126
  %81 = load i32, i32* %c, align 4
  %cmp129 = icmp slt i32 %81, 160
  br i1 %cmp129, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %do.end.128
  br label %invalid_code

if.end.132:                                       ; preds = %do.end.128
  %82 = load i32, i32* %c, align 4
  %and133 = and i32 %82, 127
  store i32 %and133, i32* %code, align 4
  br label %sw.epilog

sw.bb.134:                                        ; preds = %if.end.87
  %83 = load i32, i32* %c, align 4
  %cmp135 = icmp eq i32 %83, 154
  br i1 %cmp135, label %if.then.139, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.134
  %84 = load i32, i32* %c, align 4
  %cmp137 = icmp eq i32 %84, 155
  br i1 %cmp137, label %if.then.139, label %if.else.222

if.then.139:                                      ; preds = %lor.lhs.false, %sw.bb.134
  br label %do.body.140

do.body.140:                                      ; preds = %if.then.139
  %85 = load i8*, i8** %src.addr, align 8
  %86 = load i8*, i8** %src_end, align 8
  %cmp141 = icmp eq i8* %85, %86
  br i1 %cmp141, label %if.then.143, label %if.end.148

if.then.143:                                      ; preds = %do.body.140
  %87 = load i8*, i8** %src_base, align 8
  %88 = load i8*, i8** %src.addr, align 8
  %cmp144 = icmp ult i8* %87, %88
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %if.then.143
  %89 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %89, i32 1)
  br label %if.end.147

if.end.147:                                       ; preds = %if.then.146, %if.then.143
  br label %no_more_source

if.end.148:                                       ; preds = %do.body.140
  %90 = load i8*, i8** %src.addr, align 8
  %incdec.ptr149 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %incdec.ptr149, i8** %src.addr, align 8
  %91 = load i8, i8* %90, align 1
  %conv150 = zext i8 %91 to i32
  store i32 %conv150, i32* %c, align 4
  %92 = load i8, i8* %multibytep, align 1
  %tobool151 = trunc i8 %92 to i1
  br i1 %tobool151, label %land.lhs.true.153, label %if.end.171

land.lhs.true.153:                                ; preds = %if.end.148
  %93 = load i32, i32* %c, align 4
  %and154 = and i32 %93, 128
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %if.then.156, label %if.end.171

if.then.156:                                      ; preds = %land.lhs.true.153
  %94 = load i32, i32* %c, align 4
  %and157 = and i32 %94, 254
  %cmp158 = icmp eq i32 %and157, 192
  br i1 %cmp158, label %if.then.160, label %if.else.166

if.then.160:                                      ; preds = %if.then.156
  %95 = load i32, i32* %c, align 4
  %and161 = and i32 %95, 1
  %shl162 = shl i32 %and161, 6
  %96 = load i8*, i8** %src.addr, align 8
  %incdec.ptr163 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr163, i8** %src.addr, align 8
  %97 = load i8, i8* %96, align 1
  %conv164 = zext i8 %97 to i32
  %or165 = or i32 %shl162, %conv164
  store i32 %or165, i32* %c, align 4
  br label %if.end.170

if.else.166:                                      ; preds = %if.then.156
  %98 = load i8*, i8** %src.addr, align 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %98, i32 -1
  store i8* %incdec.ptr167, i8** %src.addr, align 8
  %99 = load i8*, i8** %src.addr, align 8
  %call168 = call i32 @string_char(i8* %99, i8** %src.addr, i32* null)
  %sub169 = sub nsw i32 0, %call168
  store i32 %sub169, i32* %c, align 4
  %100 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %100, i32 3)
  br label %if.end.170

if.end.170:                                       ; preds = %if.else.166, %if.then.160
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %land.lhs.true.153, %if.end.148
  %101 = load i64, i64* %consumed_chars, align 8
  %inc172 = add nsw i64 %101, 1
  store i64 %inc172, i64* %consumed_chars, align 8
  br label %do.end.173

do.end.173:                                       ; preds = %if.end.171
  %102 = load i32, i32* %c, align 4
  %cmp174 = icmp slt i32 %102, 160
  br i1 %cmp174, label %if.then.181, label %lor.lhs.false.176

lor.lhs.false.176:                                ; preds = %do.end.173
  %103 = load i32, i32* %c, align 4
  %idxprom177 = sext i32 %103 to i64
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @emacs_mule_charset, i32 0, i64 %idxprom177
  %104 = load i32, i32* %arrayidx178, align 4
  store i32 %104, i32* %charset_ID, align 4
  %cmp179 = icmp slt i32 %104, 0
  br i1 %cmp179, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %lor.lhs.false.176, %do.end.173
  br label %invalid_code

if.end.182:                                       ; preds = %lor.lhs.false.176
  br label %do.body.183

do.body.183:                                      ; preds = %if.end.182
  %105 = load i8*, i8** %src.addr, align 8
  %106 = load i8*, i8** %src_end, align 8
  %cmp184 = icmp eq i8* %105, %106
  br i1 %cmp184, label %if.then.186, label %if.end.191

if.then.186:                                      ; preds = %do.body.183
  %107 = load i8*, i8** %src_base, align 8
  %108 = load i8*, i8** %src.addr, align 8
  %cmp187 = icmp ult i8* %107, %108
  br i1 %cmp187, label %if.then.189, label %if.end.190

if.then.189:                                      ; preds = %if.then.186
  %109 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %109, i32 1)
  br label %if.end.190

if.end.190:                                       ; preds = %if.then.189, %if.then.186
  br label %no_more_source

if.end.191:                                       ; preds = %do.body.183
  %110 = load i8*, i8** %src.addr, align 8
  %incdec.ptr192 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %incdec.ptr192, i8** %src.addr, align 8
  %111 = load i8, i8* %110, align 1
  %conv193 = zext i8 %111 to i32
  store i32 %conv193, i32* %c, align 4
  %112 = load i8, i8* %multibytep, align 1
  %tobool194 = trunc i8 %112 to i1
  br i1 %tobool194, label %land.lhs.true.196, label %if.end.214

land.lhs.true.196:                                ; preds = %if.end.191
  %113 = load i32, i32* %c, align 4
  %and197 = and i32 %113, 128
  %tobool198 = icmp ne i32 %and197, 0
  br i1 %tobool198, label %if.then.199, label %if.end.214

if.then.199:                                      ; preds = %land.lhs.true.196
  %114 = load i32, i32* %c, align 4
  %and200 = and i32 %114, 254
  %cmp201 = icmp eq i32 %and200, 192
  br i1 %cmp201, label %if.then.203, label %if.else.209

if.then.203:                                      ; preds = %if.then.199
  %115 = load i32, i32* %c, align 4
  %and204 = and i32 %115, 1
  %shl205 = shl i32 %and204, 6
  %116 = load i8*, i8** %src.addr, align 8
  %incdec.ptr206 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %incdec.ptr206, i8** %src.addr, align 8
  %117 = load i8, i8* %116, align 1
  %conv207 = zext i8 %117 to i32
  %or208 = or i32 %shl205, %conv207
  store i32 %or208, i32* %c, align 4
  br label %if.end.213

if.else.209:                                      ; preds = %if.then.199
  %118 = load i8*, i8** %src.addr, align 8
  %incdec.ptr210 = getelementptr inbounds i8, i8* %118, i32 -1
  store i8* %incdec.ptr210, i8** %src.addr, align 8
  %119 = load i8*, i8** %src.addr, align 8
  %call211 = call i32 @string_char(i8* %119, i8** %src.addr, i32* null)
  %sub212 = sub nsw i32 0, %call211
  store i32 %sub212, i32* %c, align 4
  %120 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %120, i32 3)
  br label %if.end.213

if.end.213:                                       ; preds = %if.else.209, %if.then.203
  br label %if.end.214

if.end.214:                                       ; preds = %if.end.213, %land.lhs.true.196, %if.end.191
  %121 = load i64, i64* %consumed_chars, align 8
  %inc215 = add nsw i64 %121, 1
  store i64 %inc215, i64* %consumed_chars, align 8
  br label %do.end.216

do.end.216:                                       ; preds = %if.end.214
  %122 = load i32, i32* %c, align 4
  %cmp217 = icmp slt i32 %122, 160
  br i1 %cmp217, label %if.then.219, label %if.end.220

if.then.219:                                      ; preds = %do.end.216
  br label %invalid_code

if.end.220:                                       ; preds = %do.end.216
  %123 = load i32, i32* %c, align 4
  %and221 = and i32 %123, 127
  store i32 %and221, i32* %code, align 4
  br label %if.end.309

if.else.222:                                      ; preds = %lor.lhs.false
  %124 = load i32, i32* %c, align 4
  %idxprom223 = sext i32 %124 to i64
  %arrayidx224 = getelementptr inbounds [256 x i32], [256 x i32]* @emacs_mule_charset, i32 0, i64 %idxprom223
  %125 = load i32, i32* %arrayidx224, align 4
  store i32 %125, i32* %charset_ID, align 4
  %cmp225 = icmp slt i32 %125, 0
  br i1 %cmp225, label %if.then.227, label %if.end.228

if.then.227:                                      ; preds = %if.else.222
  br label %invalid_code

if.end.228:                                       ; preds = %if.else.222
  br label %do.body.229

do.body.229:                                      ; preds = %if.end.228
  %126 = load i8*, i8** %src.addr, align 8
  %127 = load i8*, i8** %src_end, align 8
  %cmp230 = icmp eq i8* %126, %127
  br i1 %cmp230, label %if.then.232, label %if.end.237

if.then.232:                                      ; preds = %do.body.229
  %128 = load i8*, i8** %src_base, align 8
  %129 = load i8*, i8** %src.addr, align 8
  %cmp233 = icmp ult i8* %128, %129
  br i1 %cmp233, label %if.then.235, label %if.end.236

if.then.235:                                      ; preds = %if.then.232
  %130 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %130, i32 1)
  br label %if.end.236

if.end.236:                                       ; preds = %if.then.235, %if.then.232
  br label %no_more_source

if.end.237:                                       ; preds = %do.body.229
  %131 = load i8*, i8** %src.addr, align 8
  %incdec.ptr238 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %incdec.ptr238, i8** %src.addr, align 8
  %132 = load i8, i8* %131, align 1
  %conv239 = zext i8 %132 to i32
  store i32 %conv239, i32* %c, align 4
  %133 = load i8, i8* %multibytep, align 1
  %tobool240 = trunc i8 %133 to i1
  br i1 %tobool240, label %land.lhs.true.242, label %if.end.260

land.lhs.true.242:                                ; preds = %if.end.237
  %134 = load i32, i32* %c, align 4
  %and243 = and i32 %134, 128
  %tobool244 = icmp ne i32 %and243, 0
  br i1 %tobool244, label %if.then.245, label %if.end.260

if.then.245:                                      ; preds = %land.lhs.true.242
  %135 = load i32, i32* %c, align 4
  %and246 = and i32 %135, 254
  %cmp247 = icmp eq i32 %and246, 192
  br i1 %cmp247, label %if.then.249, label %if.else.255

if.then.249:                                      ; preds = %if.then.245
  %136 = load i32, i32* %c, align 4
  %and250 = and i32 %136, 1
  %shl251 = shl i32 %and250, 6
  %137 = load i8*, i8** %src.addr, align 8
  %incdec.ptr252 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr252, i8** %src.addr, align 8
  %138 = load i8, i8* %137, align 1
  %conv253 = zext i8 %138 to i32
  %or254 = or i32 %shl251, %conv253
  store i32 %or254, i32* %c, align 4
  br label %if.end.259

if.else.255:                                      ; preds = %if.then.245
  %139 = load i8*, i8** %src.addr, align 8
  %incdec.ptr256 = getelementptr inbounds i8, i8* %139, i32 -1
  store i8* %incdec.ptr256, i8** %src.addr, align 8
  %140 = load i8*, i8** %src.addr, align 8
  %call257 = call i32 @string_char(i8* %140, i8** %src.addr, i32* null)
  %sub258 = sub nsw i32 0, %call257
  store i32 %sub258, i32* %c, align 4
  %141 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %141, i32 3)
  br label %if.end.259

if.end.259:                                       ; preds = %if.else.255, %if.then.249
  br label %if.end.260

if.end.260:                                       ; preds = %if.end.259, %land.lhs.true.242, %if.end.237
  %142 = load i64, i64* %consumed_chars, align 8
  %inc261 = add nsw i64 %142, 1
  store i64 %inc261, i64* %consumed_chars, align 8
  br label %do.end.262

do.end.262:                                       ; preds = %if.end.260
  %143 = load i32, i32* %c, align 4
  %cmp263 = icmp slt i32 %143, 160
  br i1 %cmp263, label %if.then.265, label %if.end.266

if.then.265:                                      ; preds = %do.end.262
  br label %invalid_code

if.end.266:                                       ; preds = %do.end.262
  %144 = load i32, i32* %c, align 4
  %and267 = and i32 %144, 127
  %shl268 = shl i32 %and267, 8
  store i32 %shl268, i32* %code, align 4
  br label %do.body.269

do.body.269:                                      ; preds = %if.end.266
  %145 = load i8*, i8** %src.addr, align 8
  %146 = load i8*, i8** %src_end, align 8
  %cmp270 = icmp eq i8* %145, %146
  br i1 %cmp270, label %if.then.272, label %if.end.277

if.then.272:                                      ; preds = %do.body.269
  %147 = load i8*, i8** %src_base, align 8
  %148 = load i8*, i8** %src.addr, align 8
  %cmp273 = icmp ult i8* %147, %148
  br i1 %cmp273, label %if.then.275, label %if.end.276

if.then.275:                                      ; preds = %if.then.272
  %149 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %149, i32 1)
  br label %if.end.276

if.end.276:                                       ; preds = %if.then.275, %if.then.272
  br label %no_more_source

if.end.277:                                       ; preds = %do.body.269
  %150 = load i8*, i8** %src.addr, align 8
  %incdec.ptr278 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %incdec.ptr278, i8** %src.addr, align 8
  %151 = load i8, i8* %150, align 1
  %conv279 = zext i8 %151 to i32
  store i32 %conv279, i32* %c, align 4
  %152 = load i8, i8* %multibytep, align 1
  %tobool280 = trunc i8 %152 to i1
  br i1 %tobool280, label %land.lhs.true.282, label %if.end.300

land.lhs.true.282:                                ; preds = %if.end.277
  %153 = load i32, i32* %c, align 4
  %and283 = and i32 %153, 128
  %tobool284 = icmp ne i32 %and283, 0
  br i1 %tobool284, label %if.then.285, label %if.end.300

if.then.285:                                      ; preds = %land.lhs.true.282
  %154 = load i32, i32* %c, align 4
  %and286 = and i32 %154, 254
  %cmp287 = icmp eq i32 %and286, 192
  br i1 %cmp287, label %if.then.289, label %if.else.295

if.then.289:                                      ; preds = %if.then.285
  %155 = load i32, i32* %c, align 4
  %and290 = and i32 %155, 1
  %shl291 = shl i32 %and290, 6
  %156 = load i8*, i8** %src.addr, align 8
  %incdec.ptr292 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %incdec.ptr292, i8** %src.addr, align 8
  %157 = load i8, i8* %156, align 1
  %conv293 = zext i8 %157 to i32
  %or294 = or i32 %shl291, %conv293
  store i32 %or294, i32* %c, align 4
  br label %if.end.299

if.else.295:                                      ; preds = %if.then.285
  %158 = load i8*, i8** %src.addr, align 8
  %incdec.ptr296 = getelementptr inbounds i8, i8* %158, i32 -1
  store i8* %incdec.ptr296, i8** %src.addr, align 8
  %159 = load i8*, i8** %src.addr, align 8
  %call297 = call i32 @string_char(i8* %159, i8** %src.addr, i32* null)
  %sub298 = sub nsw i32 0, %call297
  store i32 %sub298, i32* %c, align 4
  %160 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %160, i32 3)
  br label %if.end.299

if.end.299:                                       ; preds = %if.else.295, %if.then.289
  br label %if.end.300

if.end.300:                                       ; preds = %if.end.299, %land.lhs.true.282, %if.end.277
  %161 = load i64, i64* %consumed_chars, align 8
  %inc301 = add nsw i64 %161, 1
  store i64 %inc301, i64* %consumed_chars, align 8
  br label %do.end.302

do.end.302:                                       ; preds = %if.end.300
  %162 = load i32, i32* %c, align 4
  %cmp303 = icmp slt i32 %162, 160
  br i1 %cmp303, label %if.then.305, label %if.end.306

if.then.305:                                      ; preds = %do.end.302
  br label %invalid_code

if.end.306:                                       ; preds = %do.end.302
  %163 = load i32, i32* %c, align 4
  %and307 = and i32 %163, 127
  %164 = load i32, i32* %code, align 4
  %or308 = or i32 %164, %and307
  store i32 %or308, i32* %code, align 4
  br label %if.end.309

if.end.309:                                       ; preds = %if.end.306, %if.end.220
  br label %sw.epilog

sw.bb.310:                                        ; preds = %if.end.87
  br label %do.body.311

do.body.311:                                      ; preds = %sw.bb.310
  %165 = load i8*, i8** %src.addr, align 8
  %166 = load i8*, i8** %src_end, align 8
  %cmp312 = icmp eq i8* %165, %166
  br i1 %cmp312, label %if.then.314, label %if.end.319

if.then.314:                                      ; preds = %do.body.311
  %167 = load i8*, i8** %src_base, align 8
  %168 = load i8*, i8** %src.addr, align 8
  %cmp315 = icmp ult i8* %167, %168
  br i1 %cmp315, label %if.then.317, label %if.end.318

if.then.317:                                      ; preds = %if.then.314
  %169 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %169, i32 1)
  br label %if.end.318

if.end.318:                                       ; preds = %if.then.317, %if.then.314
  br label %no_more_source

if.end.319:                                       ; preds = %do.body.311
  %170 = load i8*, i8** %src.addr, align 8
  %incdec.ptr320 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %incdec.ptr320, i8** %src.addr, align 8
  %171 = load i8, i8* %170, align 1
  %conv321 = zext i8 %171 to i32
  store i32 %conv321, i32* %c, align 4
  %172 = load i8, i8* %multibytep, align 1
  %tobool322 = trunc i8 %172 to i1
  br i1 %tobool322, label %land.lhs.true.324, label %if.end.342

land.lhs.true.324:                                ; preds = %if.end.319
  %173 = load i32, i32* %c, align 4
  %and325 = and i32 %173, 128
  %tobool326 = icmp ne i32 %and325, 0
  br i1 %tobool326, label %if.then.327, label %if.end.342

if.then.327:                                      ; preds = %land.lhs.true.324
  %174 = load i32, i32* %c, align 4
  %and328 = and i32 %174, 254
  %cmp329 = icmp eq i32 %and328, 192
  br i1 %cmp329, label %if.then.331, label %if.else.337

if.then.331:                                      ; preds = %if.then.327
  %175 = load i32, i32* %c, align 4
  %and332 = and i32 %175, 1
  %shl333 = shl i32 %and332, 6
  %176 = load i8*, i8** %src.addr, align 8
  %incdec.ptr334 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr334, i8** %src.addr, align 8
  %177 = load i8, i8* %176, align 1
  %conv335 = zext i8 %177 to i32
  %or336 = or i32 %shl333, %conv335
  store i32 %or336, i32* %c, align 4
  br label %if.end.341

if.else.337:                                      ; preds = %if.then.327
  %178 = load i8*, i8** %src.addr, align 8
  %incdec.ptr338 = getelementptr inbounds i8, i8* %178, i32 -1
  store i8* %incdec.ptr338, i8** %src.addr, align 8
  %179 = load i8*, i8** %src.addr, align 8
  %call339 = call i32 @string_char(i8* %179, i8** %src.addr, i32* null)
  %sub340 = sub nsw i32 0, %call339
  store i32 %sub340, i32* %c, align 4
  %180 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %180, i32 3)
  br label %if.end.341

if.end.341:                                       ; preds = %if.else.337, %if.then.331
  br label %if.end.342

if.end.342:                                       ; preds = %if.end.341, %land.lhs.true.324, %if.end.319
  %181 = load i64, i64* %consumed_chars, align 8
  %inc343 = add nsw i64 %181, 1
  store i64 %inc343, i64* %consumed_chars, align 8
  br label %do.end.344

do.end.344:                                       ; preds = %if.end.342
  %182 = load i32, i32* %c, align 4
  %cmp345 = icmp slt i32 %182, 0
  br i1 %cmp345, label %if.then.352, label %lor.lhs.false.347

lor.lhs.false.347:                                ; preds = %do.end.344
  %183 = load i32, i32* %c, align 4
  %idxprom348 = sext i32 %183 to i64
  %arrayidx349 = getelementptr inbounds [256 x i32], [256 x i32]* @emacs_mule_charset, i32 0, i64 %idxprom348
  %184 = load i32, i32* %arrayidx349, align 4
  store i32 %184, i32* %charset_ID, align 4
  %cmp350 = icmp slt i32 %184, 0
  br i1 %cmp350, label %if.then.352, label %if.end.353

if.then.352:                                      ; preds = %lor.lhs.false.347, %do.end.344
  br label %invalid_code

if.end.353:                                       ; preds = %lor.lhs.false.347
  br label %do.body.354

do.body.354:                                      ; preds = %if.end.353
  %185 = load i8*, i8** %src.addr, align 8
  %186 = load i8*, i8** %src_end, align 8
  %cmp355 = icmp eq i8* %185, %186
  br i1 %cmp355, label %if.then.357, label %if.end.362

if.then.357:                                      ; preds = %do.body.354
  %187 = load i8*, i8** %src_base, align 8
  %188 = load i8*, i8** %src.addr, align 8
  %cmp358 = icmp ult i8* %187, %188
  br i1 %cmp358, label %if.then.360, label %if.end.361

if.then.360:                                      ; preds = %if.then.357
  %189 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %189, i32 1)
  br label %if.end.361

if.end.361:                                       ; preds = %if.then.360, %if.then.357
  br label %no_more_source

if.end.362:                                       ; preds = %do.body.354
  %190 = load i8*, i8** %src.addr, align 8
  %incdec.ptr363 = getelementptr inbounds i8, i8* %190, i32 1
  store i8* %incdec.ptr363, i8** %src.addr, align 8
  %191 = load i8, i8* %190, align 1
  %conv364 = zext i8 %191 to i32
  store i32 %conv364, i32* %c, align 4
  %192 = load i8, i8* %multibytep, align 1
  %tobool365 = trunc i8 %192 to i1
  br i1 %tobool365, label %land.lhs.true.367, label %if.end.385

land.lhs.true.367:                                ; preds = %if.end.362
  %193 = load i32, i32* %c, align 4
  %and368 = and i32 %193, 128
  %tobool369 = icmp ne i32 %and368, 0
  br i1 %tobool369, label %if.then.370, label %if.end.385

if.then.370:                                      ; preds = %land.lhs.true.367
  %194 = load i32, i32* %c, align 4
  %and371 = and i32 %194, 254
  %cmp372 = icmp eq i32 %and371, 192
  br i1 %cmp372, label %if.then.374, label %if.else.380

if.then.374:                                      ; preds = %if.then.370
  %195 = load i32, i32* %c, align 4
  %and375 = and i32 %195, 1
  %shl376 = shl i32 %and375, 6
  %196 = load i8*, i8** %src.addr, align 8
  %incdec.ptr377 = getelementptr inbounds i8, i8* %196, i32 1
  store i8* %incdec.ptr377, i8** %src.addr, align 8
  %197 = load i8, i8* %196, align 1
  %conv378 = zext i8 %197 to i32
  %or379 = or i32 %shl376, %conv378
  store i32 %or379, i32* %c, align 4
  br label %if.end.384

if.else.380:                                      ; preds = %if.then.370
  %198 = load i8*, i8** %src.addr, align 8
  %incdec.ptr381 = getelementptr inbounds i8, i8* %198, i32 -1
  store i8* %incdec.ptr381, i8** %src.addr, align 8
  %199 = load i8*, i8** %src.addr, align 8
  %call382 = call i32 @string_char(i8* %199, i8** %src.addr, i32* null)
  %sub383 = sub nsw i32 0, %call382
  store i32 %sub383, i32* %c, align 4
  %200 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %200, i32 3)
  br label %if.end.384

if.end.384:                                       ; preds = %if.else.380, %if.then.374
  br label %if.end.385

if.end.385:                                       ; preds = %if.end.384, %land.lhs.true.367, %if.end.362
  %201 = load i64, i64* %consumed_chars, align 8
  %inc386 = add nsw i64 %201, 1
  store i64 %inc386, i64* %consumed_chars, align 8
  br label %do.end.387

do.end.387:                                       ; preds = %if.end.385
  %202 = load i32, i32* %c, align 4
  %cmp388 = icmp slt i32 %202, 160
  br i1 %cmp388, label %if.then.390, label %if.end.391

if.then.390:                                      ; preds = %do.end.387
  br label %invalid_code

if.end.391:                                       ; preds = %do.end.387
  %203 = load i32, i32* %c, align 4
  %and392 = and i32 %203, 127
  %shl393 = shl i32 %and392, 8
  store i32 %shl393, i32* %code, align 4
  br label %do.body.394

do.body.394:                                      ; preds = %if.end.391
  %204 = load i8*, i8** %src.addr, align 8
  %205 = load i8*, i8** %src_end, align 8
  %cmp395 = icmp eq i8* %204, %205
  br i1 %cmp395, label %if.then.397, label %if.end.402

if.then.397:                                      ; preds = %do.body.394
  %206 = load i8*, i8** %src_base, align 8
  %207 = load i8*, i8** %src.addr, align 8
  %cmp398 = icmp ult i8* %206, %207
  br i1 %cmp398, label %if.then.400, label %if.end.401

if.then.400:                                      ; preds = %if.then.397
  %208 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %208, i32 1)
  br label %if.end.401

if.end.401:                                       ; preds = %if.then.400, %if.then.397
  br label %no_more_source

if.end.402:                                       ; preds = %do.body.394
  %209 = load i8*, i8** %src.addr, align 8
  %incdec.ptr403 = getelementptr inbounds i8, i8* %209, i32 1
  store i8* %incdec.ptr403, i8** %src.addr, align 8
  %210 = load i8, i8* %209, align 1
  %conv404 = zext i8 %210 to i32
  store i32 %conv404, i32* %c, align 4
  %211 = load i8, i8* %multibytep, align 1
  %tobool405 = trunc i8 %211 to i1
  br i1 %tobool405, label %land.lhs.true.407, label %if.end.425

land.lhs.true.407:                                ; preds = %if.end.402
  %212 = load i32, i32* %c, align 4
  %and408 = and i32 %212, 128
  %tobool409 = icmp ne i32 %and408, 0
  br i1 %tobool409, label %if.then.410, label %if.end.425

if.then.410:                                      ; preds = %land.lhs.true.407
  %213 = load i32, i32* %c, align 4
  %and411 = and i32 %213, 254
  %cmp412 = icmp eq i32 %and411, 192
  br i1 %cmp412, label %if.then.414, label %if.else.420

if.then.414:                                      ; preds = %if.then.410
  %214 = load i32, i32* %c, align 4
  %and415 = and i32 %214, 1
  %shl416 = shl i32 %and415, 6
  %215 = load i8*, i8** %src.addr, align 8
  %incdec.ptr417 = getelementptr inbounds i8, i8* %215, i32 1
  store i8* %incdec.ptr417, i8** %src.addr, align 8
  %216 = load i8, i8* %215, align 1
  %conv418 = zext i8 %216 to i32
  %or419 = or i32 %shl416, %conv418
  store i32 %or419, i32* %c, align 4
  br label %if.end.424

if.else.420:                                      ; preds = %if.then.410
  %217 = load i8*, i8** %src.addr, align 8
  %incdec.ptr421 = getelementptr inbounds i8, i8* %217, i32 -1
  store i8* %incdec.ptr421, i8** %src.addr, align 8
  %218 = load i8*, i8** %src.addr, align 8
  %call422 = call i32 @string_char(i8* %218, i8** %src.addr, i32* null)
  %sub423 = sub nsw i32 0, %call422
  store i32 %sub423, i32* %c, align 4
  %219 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %219, i32 3)
  br label %if.end.424

if.end.424:                                       ; preds = %if.else.420, %if.then.414
  br label %if.end.425

if.end.425:                                       ; preds = %if.end.424, %land.lhs.true.407, %if.end.402
  %220 = load i64, i64* %consumed_chars, align 8
  %inc426 = add nsw i64 %220, 1
  store i64 %inc426, i64* %consumed_chars, align 8
  br label %do.end.427

do.end.427:                                       ; preds = %if.end.425
  %221 = load i32, i32* %c, align 4
  %cmp428 = icmp slt i32 %221, 160
  br i1 %cmp428, label %if.then.430, label %if.end.431

if.then.430:                                      ; preds = %do.end.427
  br label %invalid_code

if.end.431:                                       ; preds = %do.end.427
  %222 = load i32, i32* %c, align 4
  %and432 = and i32 %222, 127
  %223 = load i32, i32* %code, align 4
  %or433 = or i32 %223, %and432
  store i32 %or433, i32* %code, align 4
  br label %sw.epilog

sw.bb.434:                                        ; preds = %if.end.87
  %224 = load i32, i32* %c, align 4
  store i32 %224, i32* %code, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.434
  %225 = load i32, i32* %code, align 4
  %add = add i32 %225, 0
  %cmp435 = icmp ult i32 %add, 128
  br i1 %cmp435, label %cond.true.441, label %cond.false.442

cond.false:                                       ; preds = %sw.bb.434
  %226 = load i32, i32* %code, align 4
  %conv437 = zext i32 %226 to i64
  %add438 = add i64 %conv437, 0
  %cmp439 = icmp ult i64 %add438, 128
  br i1 %cmp439, label %cond.true.441, label %cond.false.442

cond.true.441:                                    ; preds = %cond.false, %cond.true
  %227 = load i32, i32* @charset_ascii, align 4
  br label %cond.end

cond.false.442:                                   ; preds = %cond.false, %cond.true
  %228 = load i32, i32* @charset_eight_bit, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.442, %cond.true.441
  %cond = phi i32 [ %227, %cond.true.441 ], [ %228, %cond.false.442 ]
  store i32 %cond, i32* %charset_ID, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.87
  call void @emacs_abort() #6
  unreachable

sw.epilog:                                        ; preds = %cond.end, %if.end.431, %if.end.309, %if.end.132
  br label %do.body.443

do.body.443:                                      ; preds = %sw.epilog
  store i8 0, i8* @charset_map_loaded, align 1
  br i1 true, label %cond.true.444, label %cond.false.448

cond.true.444:                                    ; preds = %do.body.443
  %229 = load i32, i32* %code, align 4
  %add445 = add i32 %229, 0
  %cmp446 = icmp ult i32 %add445, 128
  br i1 %cmp446, label %land.lhs.true.453, label %cond.false.462

cond.false.448:                                   ; preds = %do.body.443
  %230 = load i32, i32* %code, align 4
  %conv449 = zext i32 %230 to i64
  %add450 = add i64 %conv449, 0
  %cmp451 = icmp ult i64 %add450, 128
  br i1 %cmp451, label %land.lhs.true.453, label %cond.false.462

land.lhs.true.453:                                ; preds = %cond.false.448, %cond.true.444
  %231 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %232 = load i32, i32* %charset_ID, align 4
  %idx.ext = sext i32 %232 to i64
  %add.ptr454 = getelementptr inbounds %struct.charset, %struct.charset* %231, i64 %idx.ext
  %ascii_compatible_p = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr454, i32 0, i32 5
  %bf.load455 = load i8, i8* %ascii_compatible_p, align 8
  %bf.lshr456 = lshr i8 %bf.load455, 2
  %bf.clear457 = and i8 %bf.lshr456, 1
  %bf.cast458 = trunc i8 %bf.clear457 to i1
  br i1 %bf.cast458, label %cond.true.460, label %cond.false.462

cond.true.460:                                    ; preds = %land.lhs.true.453
  %233 = load i32, i32* %code, align 4
  %conv461 = zext i32 %233 to i64
  br label %cond.end.568

cond.false.462:                                   ; preds = %land.lhs.true.453, %cond.false.448, %cond.true.444
  %234 = load i32, i32* %code, align 4
  %235 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %236 = load i32, i32* %charset_ID, align 4
  %idx.ext463 = sext i32 %236 to i64
  %add.ptr464 = getelementptr inbounds %struct.charset, %struct.charset* %235, i64 %idx.ext463
  %min_code = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr464, i32 0, i32 10
  %237 = load i32, i32* %min_code, align 4
  %cmp465 = icmp ult i32 %234, %237
  br i1 %cmp465, label %cond.true.472, label %lor.lhs.false.467

lor.lhs.false.467:                                ; preds = %cond.false.462
  %238 = load i32, i32* %code, align 4
  %239 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %240 = load i32, i32* %charset_ID, align 4
  %idx.ext468 = sext i32 %240 to i64
  %add.ptr469 = getelementptr inbounds %struct.charset, %struct.charset* %239, i64 %idx.ext468
  %max_code = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr469, i32 0, i32 11
  %241 = load i32, i32* %max_code, align 4
  %cmp470 = icmp ugt i32 %238, %241
  br i1 %cmp470, label %cond.true.472, label %cond.false.473

cond.true.472:                                    ; preds = %lor.lhs.false.467, %cond.false.462
  br label %cond.end.566

cond.false.473:                                   ; preds = %lor.lhs.false.467
  %242 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %243 = load i32, i32* %charset_ID, align 4
  %idx.ext474 = sext i32 %243 to i64
  %add.ptr475 = getelementptr inbounds %struct.charset, %struct.charset* %242, i64 %idx.ext474
  %unified_p = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr475, i32 0, i32 5
  %bf.load476 = load i8, i8* %unified_p, align 8
  %bf.lshr477 = lshr i8 %bf.load476, 5
  %bf.clear478 = and i8 %bf.lshr477, 1
  %bf.cast479 = trunc i8 %bf.clear478 to i1
  br i1 %bf.cast479, label %cond.true.481, label %cond.false.486

cond.true.481:                                    ; preds = %cond.false.473
  %244 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %245 = load i32, i32* %charset_ID, align 4
  %idx.ext482 = sext i32 %245 to i64
  %add.ptr483 = getelementptr inbounds %struct.charset, %struct.charset* %244, i64 %idx.ext482
  %246 = load i32, i32* %code, align 4
  %call484 = call i32 @decode_char(%struct.charset* %add.ptr483, i32 %246)
  %conv485 = sext i32 %call484 to i64
  br label %cond.end.564

cond.false.486:                                   ; preds = %cond.false.473
  %247 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %248 = load i32, i32* %charset_ID, align 4
  %idx.ext487 = sext i32 %248 to i64
  %add.ptr488 = getelementptr inbounds %struct.charset, %struct.charset* %247, i64 %idx.ext487
  %method = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr488, i32 0, i32 9
  %249 = load i32, i32* %method, align 4
  %cmp489 = icmp eq i32 %249, 0
  br i1 %cmp489, label %cond.true.491, label %cond.false.513

cond.true.491:                                    ; preds = %cond.false.486
  %250 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %251 = load i32, i32* %charset_ID, align 4
  %idx.ext492 = sext i32 %251 to i64
  %add.ptr493 = getelementptr inbounds %struct.charset, %struct.charset* %250, i64 %idx.ext492
  %code_linear_p = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr493, i32 0, i32 5
  %bf.load494 = load i8, i8* %code_linear_p, align 8
  %bf.clear495 = and i8 %bf.load494, 1
  %bf.cast496 = trunc i8 %bf.clear495 to i1
  br i1 %bf.cast496, label %cond.true.498, label %cond.false.506

cond.true.498:                                    ; preds = %cond.true.491
  %252 = load i32, i32* %code, align 4
  %253 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %254 = load i32, i32* %charset_ID, align 4
  %idx.ext499 = sext i32 %254 to i64
  %add.ptr500 = getelementptr inbounds %struct.charset, %struct.charset* %253, i64 %idx.ext499
  %min_code501 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr500, i32 0, i32 10
  %255 = load i32, i32* %min_code501, align 4
  %sub502 = sub i32 %252, %255
  %256 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %257 = load i32, i32* %charset_ID, align 4
  %idx.ext503 = sext i32 %257 to i64
  %add.ptr504 = getelementptr inbounds %struct.charset, %struct.charset* %256, i64 %idx.ext503
  %code_offset = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr504, i32 0, i32 17
  %258 = load i32, i32* %code_offset, align 4
  %add505 = add nsw i32 %sub502, %258
  br label %cond.end.510

cond.false.506:                                   ; preds = %cond.true.491
  %259 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %260 = load i32, i32* %charset_ID, align 4
  %idx.ext507 = sext i32 %260 to i64
  %add.ptr508 = getelementptr inbounds %struct.charset, %struct.charset* %259, i64 %idx.ext507
  %261 = load i32, i32* %code, align 4
  %call509 = call i32 @decode_char(%struct.charset* %add.ptr508, i32 %261)
  br label %cond.end.510

cond.end.510:                                     ; preds = %cond.false.506, %cond.true.498
  %cond511 = phi i32 [ %add505, %cond.true.498 ], [ %call509, %cond.false.506 ]
  %conv512 = sext i32 %cond511 to i64
  br label %cond.end.562

cond.false.513:                                   ; preds = %cond.false.486
  %262 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %263 = load i32, i32* %charset_ID, align 4
  %idx.ext514 = sext i32 %263 to i64
  %add.ptr515 = getelementptr inbounds %struct.charset, %struct.charset* %262, i64 %idx.ext514
  %method516 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr515, i32 0, i32 9
  %264 = load i32, i32* %method516, align 4
  %cmp517 = icmp eq i32 %264, 1
  br i1 %cmp517, label %cond.true.519, label %cond.false.555

cond.true.519:                                    ; preds = %cond.false.513
  %265 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %266 = load i32, i32* %charset_ID, align 4
  %idx.ext520 = sext i32 %266 to i64
  %add.ptr521 = getelementptr inbounds %struct.charset, %struct.charset* %265, i64 %idx.ext520
  %code_linear_p522 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr521, i32 0, i32 5
  %bf.load523 = load i8, i8* %code_linear_p522, align 8
  %bf.clear524 = and i8 %bf.load523, 1
  %bf.cast525 = trunc i8 %bf.clear524 to i1
  br i1 %bf.cast525, label %land.lhs.true.527, label %cond.false.548

land.lhs.true.527:                                ; preds = %cond.true.519
  %267 = load i64, i64* @Vcharset_hash_table, align 8
  %call528 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %267)
  %268 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %269 = load i32, i32* %charset_ID, align 4
  %idx.ext529 = sext i32 %269 to i64
  %add.ptr530 = getelementptr inbounds %struct.charset, %struct.charset* %268, i64 %idx.ext529
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr530, i32 0, i32 1
  %270 = load i64, i64* %hash_index, align 8
  %call531 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call528, i64 %270)
  %call532 = call i64 @AREF(i64 %call531, i64 4)
  %call533 = call zeroext i1 @VECTORP(i64 %call532)
  br i1 %call533, label %cond.true.535, label %cond.false.548

cond.true.535:                                    ; preds = %land.lhs.true.527
  %271 = load i64, i64* @Vcharset_hash_table, align 8
  %call536 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %271)
  %272 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %273 = load i32, i32* %charset_ID, align 4
  %idx.ext537 = sext i32 %273 to i64
  %add.ptr538 = getelementptr inbounds %struct.charset, %struct.charset* %272, i64 %idx.ext537
  %hash_index539 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr538, i32 0, i32 1
  %274 = load i64, i64* %hash_index539, align 8
  %call540 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call536, i64 %274)
  %call541 = call i64 @AREF(i64 %call540, i64 4)
  %275 = load i32, i32* %code, align 4
  %276 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %277 = load i32, i32* %charset_ID, align 4
  %idx.ext542 = sext i32 %277 to i64
  %add.ptr543 = getelementptr inbounds %struct.charset, %struct.charset* %276, i64 %idx.ext542
  %min_code544 = getelementptr inbounds %struct.charset, %struct.charset* %add.ptr543, i32 0, i32 10
  %278 = load i32, i32* %min_code544, align 4
  %sub545 = sub i32 %275, %278
  %conv546 = zext i32 %sub545 to i64
  %call547 = call i64 @AREF(i64 %call541, i64 %conv546)
  %shr = ashr i64 %call547, 2
  br label %cond.end.553

cond.false.548:                                   ; preds = %land.lhs.true.527, %cond.true.519
  %279 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %280 = load i32, i32* %charset_ID, align 4
  %idx.ext549 = sext i32 %280 to i64
  %add.ptr550 = getelementptr inbounds %struct.charset, %struct.charset* %279, i64 %idx.ext549
  %281 = load i32, i32* %code, align 4
  %call551 = call i32 @decode_char(%struct.charset* %add.ptr550, i32 %281)
  %conv552 = sext i32 %call551 to i64
  br label %cond.end.553

cond.end.553:                                     ; preds = %cond.false.548, %cond.true.535
  %cond554 = phi i64 [ %shr, %cond.true.535 ], [ %conv552, %cond.false.548 ]
  br label %cond.end.560

cond.false.555:                                   ; preds = %cond.false.513
  %282 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %283 = load i32, i32* %charset_ID, align 4
  %idx.ext556 = sext i32 %283 to i64
  %add.ptr557 = getelementptr inbounds %struct.charset, %struct.charset* %282, i64 %idx.ext556
  %284 = load i32, i32* %code, align 4
  %call558 = call i32 @decode_char(%struct.charset* %add.ptr557, i32 %284)
  %conv559 = sext i32 %call558 to i64
  br label %cond.end.560

cond.end.560:                                     ; preds = %cond.false.555, %cond.end.553
  %cond561 = phi i64 [ %cond554, %cond.end.553 ], [ %conv559, %cond.false.555 ]
  br label %cond.end.562

cond.end.562:                                     ; preds = %cond.end.560, %cond.end.510
  %cond563 = phi i64 [ %conv512, %cond.end.510 ], [ %cond561, %cond.end.560 ]
  br label %cond.end.564

cond.end.564:                                     ; preds = %cond.end.562, %cond.true.481
  %cond565 = phi i64 [ %conv485, %cond.true.481 ], [ %cond563, %cond.end.562 ]
  br label %cond.end.566

cond.end.566:                                     ; preds = %cond.end.564, %cond.true.472
  %cond567 = phi i64 [ -1, %cond.true.472 ], [ %cond565, %cond.end.564 ]
  br label %cond.end.568

cond.end.568:                                     ; preds = %cond.end.566, %cond.true.460
  %cond569 = phi i64 [ %conv461, %cond.true.460 ], [ %cond567, %cond.end.566 ]
  %conv570 = trunc i64 %cond569 to i32
  store i32 %conv570, i32* %c, align 4
  %285 = load i8, i8* @charset_map_loaded, align 1
  %tobool571 = trunc i8 %285 to i1
  br i1 %tobool571, label %land.lhs.true.573, label %if.end.580

land.lhs.true.573:                                ; preds = %cond.end.568
  %286 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call574 = call i64 @coding_change_source(%struct.coding_system* %286)
  store i64 %call574, i64* %offset, align 8
  %tobool575 = icmp ne i64 %call574, 0
  br i1 %tobool575, label %if.then.576, label %if.end.580

if.then.576:                                      ; preds = %land.lhs.true.573
  %287 = load i64, i64* %offset, align 8
  %288 = load i8*, i8** %src.addr, align 8
  %add.ptr577 = getelementptr inbounds i8, i8* %288, i64 %287
  store i8* %add.ptr577, i8** %src.addr, align 8
  %289 = load i64, i64* %offset, align 8
  %290 = load i8*, i8** %src_base, align 8
  %add.ptr578 = getelementptr inbounds i8, i8* %290, i64 %289
  store i8* %add.ptr578, i8** %src_base, align 8
  %291 = load i64, i64* %offset, align 8
  %292 = load i8*, i8** %src_end, align 8
  %add.ptr579 = getelementptr inbounds i8, i8* %292, i64 %291
  store i8* %add.ptr579, i8** %src_end, align 8
  br label %if.end.580

if.end.580:                                       ; preds = %if.then.576, %land.lhs.true.573, %cond.end.568
  br label %do.end.581

do.end.581:                                       ; preds = %if.end.580
  %293 = load i32, i32* %c, align 4
  %cmp582 = icmp slt i32 %293, 0
  br i1 %cmp582, label %if.then.584, label %if.end.585

if.then.584:                                      ; preds = %do.end.581
  br label %invalid_code

if.end.585:                                       ; preds = %do.end.581
  br label %if.end.586

if.end.586:                                       ; preds = %if.end.585, %if.then.19
  %294 = load i8*, i8** %src.addr, align 8
  %295 = load i8*, i8** %src_base, align 8
  %sub.ptr.lhs.cast587 = ptrtoint i8* %294 to i64
  %sub.ptr.rhs.cast588 = ptrtoint i8* %295 to i64
  %sub.ptr.sub589 = sub i64 %sub.ptr.lhs.cast587, %sub.ptr.rhs.cast588
  %conv590 = trunc i64 %sub.ptr.sub589 to i32
  %296 = load i32*, i32** %nbytes.addr, align 8
  store i32 %conv590, i32* %296, align 4
  %297 = load i64, i64* %consumed_chars, align 8
  %conv591 = trunc i64 %297 to i32
  %298 = load i32*, i32** %nchars.addr, align 8
  store i32 %conv591, i32* %298, align 4
  %299 = load i32*, i32** %id.addr, align 8
  %tobool592 = icmp ne i32* %299, null
  br i1 %tobool592, label %if.then.593, label %if.end.594

if.then.593:                                      ; preds = %if.end.586
  %300 = load i32, i32* %charset_ID, align 4
  %301 = load i32*, i32** %id.addr, align 8
  store i32 %300, i32* %301, align 4
  br label %if.end.594

if.end.594:                                       ; preds = %if.then.593, %if.end.586
  %302 = load i8, i8* %mseq_found, align 1
  %tobool595 = trunc i8 %302 to i1
  br i1 %tobool595, label %cond.true.597, label %cond.false.599

cond.true.597:                                    ; preds = %if.end.594
  %303 = load i32, i32* %c, align 4
  %sub598 = sub nsw i32 0, %303
  br label %cond.end.600

cond.false.599:                                   ; preds = %if.end.594
  %304 = load i32, i32* %c, align 4
  br label %cond.end.600

cond.end.600:                                     ; preds = %cond.false.599, %cond.true.597
  %cond601 = phi i32 [ %sub598, %cond.true.597 ], [ %304, %cond.false.599 ]
  store i32 %cond601, i32* %retval
  br label %return

no_more_source:                                   ; preds = %if.end.401, %if.end.361, %if.end.318, %if.end.276, %if.end.236, %if.end.190, %if.end.147, %if.end.102, %if.end.45, %if.end
  store i32 -2, i32* %retval
  br label %return

invalid_code:                                     ; preds = %if.then.584, %if.then.430, %if.then.390, %if.then.352, %if.then.305, %if.then.265, %if.then.227, %if.then.219, %if.then.181, %if.then.131, %if.then.93, %if.else.85, %if.then.75
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %invalid_code, %no_more_source, %cond.end.600, %if.else.80
  %305 = load i32, i32* %retval
  ret i32 %305
}

declare i64 @Fgenerate_new_buffer_name(i64, i64) #1

declare i64 @Fget_buffer_create(i64) #1

declare i64 @Fbuffer_live_p(i64) #1

declare i64 @Fmake_local_variable(i64) #1

declare i64 @Ferase_buffer() #1

declare void @bset_undo_list(%struct.buffer*, i64) #1

declare void @bset_enable_multibyte_characters(%struct.buffer*, i64) #1

declare i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table*) #1

declare %struct.Lisp_Char_Table* @XCHAR_TABLE(i64) #1

declare void @record_first_change() #1

declare i8* @record_xmalloc(i64) #1

declare zeroext i1 @setup_ccl_program(%struct.ccl_program*, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @produce_chars(%struct.coding_system* %coding, i64 %translation_table, i1 zeroext %last_block) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %translation_table.addr = alloca i64, align 8
  %last_block.addr = alloca i8, align 1
  %dst = alloca i8*, align 8
  %dst_end = alloca i8*, align 8
  %produced3 = alloca i64, align 8
  %produced_chars = alloca i64, align 8
  %carryover = alloca i32, align 4
  %buf = alloca i32*, align 8
  %buf_end = alloca i32*, align 8
  %c = alloca i32, align 4
  %i = alloca i64, align 8
  %from_nchars = alloca i64, align 8
  %to_nchars = alloca i64, align 8
  %trans = alloca i64, align 8
  %tail = alloca i64, align 8
  %dst_size = alloca i64, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %multibytep = alloca i8, align 1
  %consumed_chars = alloca i64, align 8
  %src_base = alloca i8*, align 8
  %c5436 = alloca i32, align 4
  %offset = alloca i64, align 8
  %multibytep5516 = alloca i8, align 1
  %c5517 = alloca i32, align 4
  %offset5534 = alloca i64, align 8
  %more_bytes = alloca i64, align 8
  %ch = alloca i32, align 4
  %require = alloca i64, align 8
  %offset5642 = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %translation_table, i64* %translation_table.addr, align 8
  %frombool = zext i1 %last_block to i8
  store i8 %frombool, i8* %last_block.addr, align 1
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 22
  %1 = load i8*, i8** %destination, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 8
  %3 = load i64, i64* %produced, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %dst, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 22
  %5 = load i8*, i8** %destination1, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 20
  %7 = load i64, i64* %dst_bytes, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr2, i8** %dst_end, align 8
  store i64 0, i64* %produced_chars, align 8
  store i32 0, i32* %carryover, align 4
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %chars_at_source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 1
  %bf.load = load i32, i32* %chars_at_source, align 8
  %bf.lshr = lshr i32 %bf.load, 21
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  br i1 %bf.cast, label %if.else.5404, label %if.then

if.then:                                          ; preds = %entry
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 23
  %10 = load i32*, i32** %charbuf, align 8
  store i32* %10, i32** %buf, align 8
  %11 = load i32*, i32** %buf, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 25
  %13 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %13 to i64
  %add.ptr4 = getelementptr inbounds i32, i32* %11, i64 %idx.ext
  store i32* %add.ptr4, i32** %buf_end, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 16
  %15 = load i64, i64* %src_object, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 21
  %17 = load i64, i64* %dst_object, align 8
  %cmp = icmp eq i64 %15, %17
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %18, i32 0, i32 21
  %19 = load i64, i64* %dst_object5, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp6 = icmp eq i64 %19, %call
  br i1 %cmp6, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %land.lhs.true
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %20)
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %21, i32 0, i32 17
  %22 = load i8*, i8** %source, align 8
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 10
  %24 = load i64, i64* %consumed, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %22, i64 %24
  store i8* %add.ptr8, i8** %dst_end, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %land.lhs.true, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end.5398, %if.end
  %25 = load i32*, i32** %buf, align 8
  %26 = load i32*, i32** %buf_end, align 8
  %cmp9 = icmp ult i32* %25, %26
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %27 = load i32*, i32** %buf, align 8
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %c, align 4
  %29 = load i32, i32* %c, align 4
  %cmp10 = icmp sge i32 %29, 0
  br i1 %cmp10, label %if.then.11, label %if.else.5394

if.then.11:                                       ; preds = %while.body
  store i64 1, i64* %from_nchars, align 8
  store i64 1, i64* %to_nchars, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call12, i64* %trans, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call13, i64* %trans, align 8
  %30 = load i64, i64* %translation_table.addr, align 8
  %call14 = call zeroext i1 @CHAR_TABLE_P(i64 %30)
  br i1 %call14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %do.body
  %31 = load i64, i64* %translation_table.addr, align 8
  %32 = load i32, i32* %c, align 4
  %call16 = call i64 @CHAR_TABLE_REF(i64 %31, i32 %32)
  store i64 %call16, i64* %trans, align 8
  %33 = load i64, i64* %trans, align 8
  %call17 = call zeroext i1 @NATNUMP(i64 %33)
  br i1 %call17, label %land.lhs.true.18, label %if.end.23

land.lhs.true.18:                                 ; preds = %if.then.15
  %34 = load i64, i64* %trans, align 8
  %shr = ashr i64 %34, 2
  %cmp19 = icmp sle i64 %shr, 4194303
  br i1 %cmp19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %land.lhs.true.18
  %35 = load i64, i64* %trans, align 8
  %shr21 = ashr i64 %35, 2
  %conv = trunc i64 %shr21 to i32
  store i32 %conv, i32* %c, align 4
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call22, i64* %trans, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %land.lhs.true.18, %if.then.15
  br label %if.end.57

if.else:                                          ; preds = %do.body
  %36 = load i64, i64* %translation_table.addr, align 8
  %and = and i64 %36, 7
  %conv24 = trunc i64 %and to i32
  %cmp25 = icmp eq i32 %conv24, 3
  br i1 %cmp25, label %if.then.27, label %if.end.56

if.then.27:                                       ; preds = %if.else
  %37 = load i64, i64* %translation_table.addr, align 8
  store i64 %37, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.27
  %38 = load i64, i64* %tail, align 8
  %and28 = and i64 %38, 7
  %conv29 = trunc i64 %and28 to i32
  %cmp30 = icmp eq i32 %conv29, 3
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %39, 3
  %40 = inttoptr i64 %sub to i8*
  %41 = bitcast i8* %40 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %41, i32 0, i32 0
  %42 = load i64, i64* %car, align 8
  %call32 = call zeroext i1 @CHAR_TABLE_P(i64 %42)
  br i1 %call32, label %if.then.33, label %if.end.54

if.then.33:                                       ; preds = %for.body
  %43 = load i64, i64* %tail, align 8
  %sub34 = sub nsw i64 %43, 3
  %44 = inttoptr i64 %sub34 to i8*
  %45 = bitcast i8* %44 to %struct.Lisp_Cons*
  %car35 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %45, i32 0, i32 0
  %46 = load i64, i64* %car35, align 8
  %47 = load i32, i32* %c, align 4
  %call36 = call i64 @CHAR_TABLE_REF(i64 %46, i32 %47)
  store i64 %call36, i64* %trans, align 8
  %48 = load i64, i64* %trans, align 8
  %call37 = call zeroext i1 @NATNUMP(i64 %48)
  br i1 %call37, label %land.lhs.true.39, label %if.else.47

land.lhs.true.39:                                 ; preds = %if.then.33
  %49 = load i64, i64* %trans, align 8
  %shr40 = ashr i64 %49, 2
  %cmp41 = icmp sle i64 %shr40, 4194303
  br i1 %cmp41, label %if.then.43, label %if.else.47

if.then.43:                                       ; preds = %land.lhs.true.39
  %50 = load i64, i64* %trans, align 8
  %shr44 = ashr i64 %50, 2
  %conv45 = trunc i64 %shr44 to i32
  store i32 %conv45, i32* %c, align 4
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call46, i64* %trans, align 8
  br label %if.end.53

if.else.47:                                       ; preds = %land.lhs.true.39, %if.then.33
  %51 = load i64, i64* %trans, align 8
  %call48 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp49 = icmp eq i64 %51, %call48
  br i1 %cmp49, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %if.else.47
  br label %for.end

if.end.52:                                        ; preds = %if.else.47
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.43
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.54
  %52 = load i64, i64* %tail, align 8
  %sub55 = sub nsw i64 %52, 3
  %53 = inttoptr i64 %sub55 to i8*
  %54 = bitcast i8* %53 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %54, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %55 = load i64, i64* %cdr, align 8
  store i64 %55, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.51, %for.cond
  br label %if.end.56

if.end.56:                                        ; preds = %for.end, %if.else
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.end.23
  br label %do.end

do.end:                                           ; preds = %if.end.57
  %56 = load i64, i64* %trans, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %56, %call58
  br i1 %cmp59, label %if.end.106, label %if.then.61

if.then.61:                                       ; preds = %do.end
  %57 = load i64, i64* %trans, align 8
  %58 = load i32*, i32** %buf, align 8
  %59 = load i32*, i32** %buf_end, align 8
  %call62 = call i64 @get_translation(i64 %57, i32* %58, i32* %59)
  store i64 %call62, i64* %trans, align 8
  %60 = load i64, i64* %trans, align 8
  %and63 = and i64 %60, 7
  %conv64 = trunc i64 %and63 to i32
  %and65 = and i32 %conv64, -5
  %cmp66 = icmp eq i32 %and65, 2
  br i1 %cmp66, label %if.then.68, label %if.else.71

if.then.68:                                       ; preds = %if.then.61
  %61 = load i64, i64* %trans, align 8
  %shr69 = ashr i64 %61, 2
  %conv70 = trunc i64 %shr69 to i32
  store i32 %conv70, i32* %c, align 4
  br label %if.end.105

if.else.71:                                       ; preds = %if.then.61
  %62 = load i64, i64* %trans, align 8
  %and72 = and i64 %62, 7
  %conv73 = trunc i64 %and72 to i32
  %cmp74 = icmp eq i32 %conv73, 3
  br i1 %cmp74, label %if.then.76, label %if.else.97

if.then.76:                                       ; preds = %if.else.71
  %63 = load i64, i64* %trans, align 8
  %sub77 = sub nsw i64 %63, 3
  %64 = inttoptr i64 %sub77 to i8*
  %65 = bitcast i8* %64 to %struct.Lisp_Cons*
  %car78 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %65, i32 0, i32 0
  %66 = load i64, i64* %car78, align 8
  %call79 = call i64 @ASIZE(i64 %66)
  store i64 %call79, i64* %from_nchars, align 8
  %67 = load i64, i64* %trans, align 8
  %sub80 = sub nsw i64 %67, 3
  %68 = inttoptr i64 %sub80 to i8*
  %69 = bitcast i8* %68 to %struct.Lisp_Cons*
  %u81 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %69, i32 0, i32 1
  %cdr82 = bitcast %union.anon.0* %u81 to i64*
  %70 = load i64, i64* %cdr82, align 8
  store i64 %70, i64* %trans, align 8
  %71 = load i64, i64* %trans, align 8
  %and83 = and i64 %71, 7
  %conv84 = trunc i64 %and83 to i32
  %and85 = and i32 %conv84, -5
  %cmp86 = icmp eq i32 %and85, 2
  br i1 %cmp86, label %if.then.88, label %if.else.91

if.then.88:                                       ; preds = %if.then.76
  %72 = load i64, i64* %trans, align 8
  %shr89 = ashr i64 %72, 2
  %conv90 = trunc i64 %shr89 to i32
  store i32 %conv90, i32* %c, align 4
  br label %if.end.96

if.else.91:                                       ; preds = %if.then.76
  %73 = load i64, i64* %trans, align 8
  %call92 = call i64 @ASIZE(i64 %73)
  store i64 %call92, i64* %to_nchars, align 8
  %74 = load i64, i64* %trans, align 8
  %call93 = call i64 @AREF(i64 %74, i64 0)
  %shr94 = ashr i64 %call93, 2
  %conv95 = trunc i64 %shr94 to i32
  store i32 %conv95, i32* %c, align 4
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.91, %if.then.88
  br label %if.end.104

if.else.97:                                       ; preds = %if.else.71
  %75 = load i64, i64* %trans, align 8
  %call98 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp99 = icmp eq i64 %75, %call98
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.103

land.lhs.true.101:                                ; preds = %if.else.97
  %76 = load i8, i8* %last_block.addr, align 1
  %tobool = trunc i8 %76 to i1
  br i1 %tobool, label %if.end.103, label %if.then.102

if.then.102:                                      ; preds = %land.lhs.true.101
  br label %while.end

if.end.103:                                       ; preds = %land.lhs.true.101, %if.else.97
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %if.end.96
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.then.68
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %do.end
  %77 = load i8*, i8** %dst_end, align 8
  %78 = load i8*, i8** %dst, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %77 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %78 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %div = sdiv i64 %sub.ptr.sub, 5
  %79 = load i64, i64* %to_nchars, align 8
  %cmp107 = icmp slt i64 %div, %79
  br i1 %cmp107, label %if.then.109, label %if.end.5316

if.then.109:                                      ; preds = %if.end.106
  br i1 false, label %cond.true, label %cond.false.585

cond.true:                                        ; preds = %if.then.109
  br i1 false, label %cond.true.110, label %cond.false.370

cond.true.110:                                    ; preds = %cond.true
  %80 = load i64, i64* %to_nchars, align 8
  %conv111 = trunc i64 %80 to i8
  %conv112 = sext i8 %conv111 to i32
  %add = add nsw i32 0, %conv112
  %mul = mul nsw i32 0, %add
  %sub113 = sub nsw i32 %mul, 1
  %cmp114 = icmp slt i32 %sub113, 0
  br i1 %cmp114, label %cond.true.116, label %cond.false

cond.true.116:                                    ; preds = %cond.true.110
  %81 = load i64, i64* %to_nchars, align 8
  %conv117 = trunc i64 %81 to i8
  %conv118 = sext i8 %conv117 to i32
  %add119 = add nsw i32 0, %conv118
  %mul120 = mul nsw i32 0, %add119
  %add121 = add nsw i32 %mul120, 0
  %neg = xor i32 %add121, -1
  %cmp122 = icmp eq i32 %neg, -1
  %conv123 = zext i1 %cmp122 to i32
  %sub124 = sub nsw i32 0, %conv123
  %82 = load i64, i64* %to_nchars, align 8
  %conv125 = trunc i64 %82 to i8
  %conv126 = sext i8 %conv125 to i32
  %add127 = add nsw i32 0, %conv126
  %mul128 = mul nsw i32 0, %add127
  %add129 = add nsw i32 %mul128, 1
  %shl = shl i32 %add129, 30
  %sub130 = sub nsw i32 %shl, 1
  %mul131 = mul nsw i32 %sub130, 2
  %add132 = add nsw i32 %mul131, 1
  %sub133 = sub nsw i32 %sub124, %add132
  br label %cond.end

cond.false:                                       ; preds = %cond.true.110
  %83 = load i64, i64* %to_nchars, align 8
  %conv134 = trunc i64 %83 to i8
  %conv135 = sext i8 %conv134 to i32
  %add136 = add nsw i32 0, %conv135
  %mul137 = mul nsw i32 0, %add136
  %add138 = add nsw i32 %mul137, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.116
  %cond = phi i32 [ %sub133, %cond.true.116 ], [ %add138, %cond.false ]
  %cmp139 = icmp eq i32 %cond, 0
  br i1 %cmp139, label %land.lhs.true.141, label %lor.lhs.false

land.lhs.true.141:                                ; preds = %cond.end
  %84 = load i64, i64* %to_nchars, align 8
  %conv142 = trunc i64 %84 to i8
  %conv143 = sext i8 %conv142 to i32
  %cmp144 = icmp slt i32 %conv143, 0
  br i1 %cmp144, label %cond.true.324, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.141, %cond.end
  br i1 false, label %cond.true.146, label %cond.false.225

cond.true.146:                                    ; preds = %lor.lhs.false
  %85 = load i64, i64* %to_nchars, align 8
  %conv147 = trunc i64 %85 to i8
  %conv148 = sext i8 %conv147 to i32
  %cmp149 = icmp slt i32 %conv148, 0
  br i1 %cmp149, label %cond.true.151, label %cond.false.182

cond.true.151:                                    ; preds = %cond.true.146
  %86 = load i64, i64* %to_nchars, align 8
  %conv152 = trunc i64 %86 to i8
  %conv153 = sext i8 %conv152 to i32
  %87 = load i64, i64* %to_nchars, align 8
  %conv154 = trunc i64 %87 to i8
  %conv155 = sext i8 %conv154 to i32
  %add156 = add nsw i32 0, %conv155
  %mul157 = mul nsw i32 0, %add156
  %sub158 = sub nsw i32 %mul157, 1
  %cmp159 = icmp slt i32 %sub158, 0
  br i1 %cmp159, label %cond.true.161, label %cond.false.171

cond.true.161:                                    ; preds = %cond.true.151
  %88 = load i64, i64* %to_nchars, align 8
  %conv162 = trunc i64 %88 to i8
  %conv163 = sext i8 %conv162 to i32
  %add164 = add nsw i32 0, %conv163
  %mul165 = mul nsw i32 0, %add164
  %add166 = add nsw i32 %mul165, 1
  %shl167 = shl i32 %add166, 30
  %sub168 = sub nsw i32 %shl167, 1
  %mul169 = mul nsw i32 %sub168, 2
  %add170 = add nsw i32 %mul169, 1
  br label %cond.end.177

cond.false.171:                                   ; preds = %cond.true.151
  %89 = load i64, i64* %to_nchars, align 8
  %conv172 = trunc i64 %89 to i8
  %conv173 = sext i8 %conv172 to i32
  %add174 = add nsw i32 0, %conv173
  %mul175 = mul nsw i32 0, %add174
  %sub176 = sub nsw i32 %mul175, 1
  br label %cond.end.177

cond.end.177:                                     ; preds = %cond.false.171, %cond.true.161
  %cond178 = phi i32 [ %add170, %cond.true.161 ], [ %sub176, %cond.false.171 ]
  %div179 = sdiv i32 %cond178, 5
  %cmp180 = icmp slt i32 %conv153, %div179
  br i1 %cmp180, label %cond.true.324, label %lor.lhs.false.304

cond.false.182:                                   ; preds = %cond.true.146
  br i1 false, label %cond.true.183, label %cond.false.184

cond.true.183:                                    ; preds = %cond.false.182
  br i1 false, label %cond.true.324, label %lor.lhs.false.304

cond.false.184:                                   ; preds = %cond.false.182
  %90 = load i64, i64* %to_nchars, align 8
  %conv185 = trunc i64 %90 to i8
  %conv186 = sext i8 %conv185 to i32
  %add187 = add nsw i32 0, %conv186
  %mul188 = mul nsw i32 0, %add187
  %sub189 = sub nsw i32 %mul188, 1
  %cmp190 = icmp slt i32 %sub189, 0
  br i1 %cmp190, label %cond.true.192, label %cond.false.212

cond.true.192:                                    ; preds = %cond.false.184
  %91 = load i64, i64* %to_nchars, align 8
  %conv193 = trunc i64 %91 to i8
  %conv194 = sext i8 %conv193 to i32
  %add195 = add nsw i32 0, %conv194
  %mul196 = mul nsw i32 0, %add195
  %add197 = add nsw i32 %mul196, 0
  %neg198 = xor i32 %add197, -1
  %cmp199 = icmp eq i32 %neg198, -1
  %conv200 = zext i1 %cmp199 to i32
  %sub201 = sub nsw i32 0, %conv200
  %92 = load i64, i64* %to_nchars, align 8
  %conv202 = trunc i64 %92 to i8
  %conv203 = sext i8 %conv202 to i32
  %add204 = add nsw i32 0, %conv203
  %mul205 = mul nsw i32 0, %add204
  %add206 = add nsw i32 %mul205, 1
  %shl207 = shl i32 %add206, 30
  %sub208 = sub nsw i32 %shl207, 1
  %mul209 = mul nsw i32 %sub208, 2
  %add210 = add nsw i32 %mul209, 1
  %sub211 = sub nsw i32 %sub201, %add210
  br label %cond.end.218

cond.false.212:                                   ; preds = %cond.false.184
  %93 = load i64, i64* %to_nchars, align 8
  %conv213 = trunc i64 %93 to i8
  %conv214 = sext i8 %conv213 to i32
  %add215 = add nsw i32 0, %conv214
  %mul216 = mul nsw i32 0, %add215
  %add217 = add nsw i32 %mul216, 0
  br label %cond.end.218

cond.end.218:                                     ; preds = %cond.false.212, %cond.true.192
  %cond219 = phi i32 [ %sub211, %cond.true.192 ], [ %add217, %cond.false.212 ]
  %div220 = sdiv i32 %cond219, 5
  %94 = load i64, i64* %to_nchars, align 8
  %conv221 = trunc i64 %94 to i8
  %conv222 = sext i8 %conv221 to i32
  %cmp223 = icmp slt i32 %div220, %conv222
  br i1 %cmp223, label %cond.true.324, label %lor.lhs.false.304

cond.false.225:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.226, label %cond.false.227

cond.true.226:                                    ; preds = %cond.false.225
  br i1 false, label %cond.true.324, label %lor.lhs.false.304

cond.false.227:                                   ; preds = %cond.false.225
  %95 = load i64, i64* %to_nchars, align 8
  %conv228 = trunc i64 %95 to i8
  %conv229 = sext i8 %conv228 to i32
  %cmp230 = icmp slt i32 %conv229, 0
  br i1 %cmp230, label %cond.true.232, label %cond.false.273

cond.true.232:                                    ; preds = %cond.false.227
  %96 = load i64, i64* %to_nchars, align 8
  %conv233 = trunc i64 %96 to i8
  %conv234 = sext i8 %conv233 to i32
  %97 = load i64, i64* %to_nchars, align 8
  %conv235 = trunc i64 %97 to i8
  %conv236 = sext i8 %conv235 to i32
  %add237 = add nsw i32 0, %conv236
  %mul238 = mul nsw i32 0, %add237
  %sub239 = sub nsw i32 %mul238, 1
  %cmp240 = icmp slt i32 %sub239, 0
  br i1 %cmp240, label %cond.true.242, label %cond.false.262

cond.true.242:                                    ; preds = %cond.true.232
  %98 = load i64, i64* %to_nchars, align 8
  %conv243 = trunc i64 %98 to i8
  %conv244 = sext i8 %conv243 to i32
  %add245 = add nsw i32 0, %conv244
  %mul246 = mul nsw i32 0, %add245
  %add247 = add nsw i32 %mul246, 0
  %neg248 = xor i32 %add247, -1
  %cmp249 = icmp eq i32 %neg248, -1
  %conv250 = zext i1 %cmp249 to i32
  %sub251 = sub nsw i32 0, %conv250
  %99 = load i64, i64* %to_nchars, align 8
  %conv252 = trunc i64 %99 to i8
  %conv253 = sext i8 %conv252 to i32
  %add254 = add nsw i32 0, %conv253
  %mul255 = mul nsw i32 0, %add254
  %add256 = add nsw i32 %mul255, 1
  %shl257 = shl i32 %add256, 30
  %sub258 = sub nsw i32 %shl257, 1
  %mul259 = mul nsw i32 %sub258, 2
  %add260 = add nsw i32 %mul259, 1
  %sub261 = sub nsw i32 %sub251, %add260
  br label %cond.end.268

cond.false.262:                                   ; preds = %cond.true.232
  %100 = load i64, i64* %to_nchars, align 8
  %conv263 = trunc i64 %100 to i8
  %conv264 = sext i8 %conv263 to i32
  %add265 = add nsw i32 0, %conv264
  %mul266 = mul nsw i32 0, %add265
  %add267 = add nsw i32 %mul266, 0
  br label %cond.end.268

cond.end.268:                                     ; preds = %cond.false.262, %cond.true.242
  %cond269 = phi i32 [ %sub261, %cond.true.242 ], [ %add267, %cond.false.262 ]
  %div270 = sdiv i32 %cond269, 5
  %cmp271 = icmp slt i32 %conv234, %div270
  br i1 %cmp271, label %cond.true.324, label %lor.lhs.false.304

cond.false.273:                                   ; preds = %cond.false.227
  %101 = load i64, i64* %to_nchars, align 8
  %conv274 = trunc i64 %101 to i8
  %conv275 = sext i8 %conv274 to i32
  %add276 = add nsw i32 0, %conv275
  %mul277 = mul nsw i32 0, %add276
  %sub278 = sub nsw i32 %mul277, 1
  %cmp279 = icmp slt i32 %sub278, 0
  br i1 %cmp279, label %cond.true.281, label %cond.false.291

cond.true.281:                                    ; preds = %cond.false.273
  %102 = load i64, i64* %to_nchars, align 8
  %conv282 = trunc i64 %102 to i8
  %conv283 = sext i8 %conv282 to i32
  %add284 = add nsw i32 0, %conv283
  %mul285 = mul nsw i32 0, %add284
  %add286 = add nsw i32 %mul285, 1
  %shl287 = shl i32 %add286, 30
  %sub288 = sub nsw i32 %shl287, 1
  %mul289 = mul nsw i32 %sub288, 2
  %add290 = add nsw i32 %mul289, 1
  br label %cond.end.297

cond.false.291:                                   ; preds = %cond.false.273
  %103 = load i64, i64* %to_nchars, align 8
  %conv292 = trunc i64 %103 to i8
  %conv293 = sext i8 %conv292 to i32
  %add294 = add nsw i32 0, %conv293
  %mul295 = mul nsw i32 0, %add294
  %sub296 = sub nsw i32 %mul295, 1
  br label %cond.end.297

cond.end.297:                                     ; preds = %cond.false.291, %cond.true.281
  %cond298 = phi i32 [ %add290, %cond.true.281 ], [ %sub296, %cond.false.291 ]
  %div299 = sdiv i32 %cond298, 5
  %104 = load i64, i64* %to_nchars, align 8
  %conv300 = trunc i64 %104 to i8
  %conv301 = sext i8 %conv300 to i32
  %cmp302 = icmp slt i32 %div299, %conv301
  br i1 %cmp302, label %cond.true.324, label %lor.lhs.false.304

lor.lhs.false.304:                                ; preds = %cond.end.297, %cond.end.268, %cond.true.226, %cond.end.218, %cond.true.183, %cond.end.177
  %105 = load i64, i64* %to_nchars, align 8
  %conv305 = trunc i64 %105 to i8
  %conv306 = sext i8 %conv305 to i32
  %mul307 = mul nsw i32 %conv306, 5
  %mul308 = mul nsw i32 0, %mul307
  %sub309 = sub nsw i32 %mul308, 1
  %cmp310 = icmp slt i32 %sub309, 0
  br i1 %cmp310, label %land.lhs.true.312, label %lor.lhs.false.318

land.lhs.true.312:                                ; preds = %lor.lhs.false.304
  %106 = load i64, i64* %to_nchars, align 8
  %conv313 = trunc i64 %106 to i8
  %conv314 = sext i8 %conv313 to i32
  %mul315 = mul nsw i32 %conv314, 5
  %cmp316 = icmp slt i32 %mul315, -128
  br i1 %cmp316, label %cond.true.324, label %lor.lhs.false.318

lor.lhs.false.318:                                ; preds = %land.lhs.true.312, %lor.lhs.false.304
  %107 = load i64, i64* %to_nchars, align 8
  %conv319 = trunc i64 %107 to i8
  %conv320 = sext i8 %conv319 to i32
  %mul321 = mul nsw i32 %conv320, 5
  %cmp322 = icmp slt i32 127, %mul321
  br i1 %cmp322, label %cond.true.324, label %cond.false.347

cond.true.324:                                    ; preds = %lor.lhs.false.318, %land.lhs.true.312, %cond.end.297, %cond.end.268, %cond.true.226, %cond.end.218, %cond.true.183, %cond.end.177, %land.lhs.true.141
  %108 = load i64, i64* %to_nchars, align 8
  %conv325 = trunc i64 %108 to i8
  %conv326 = zext i8 %conv325 to i32
  %mul327 = mul nsw i32 %conv326, 5
  %cmp328 = icmp sle i32 %mul327, 127
  br i1 %cmp328, label %cond.true.330, label %cond.false.336

cond.true.330:                                    ; preds = %cond.true.324
  %109 = load i64, i64* %to_nchars, align 8
  %conv331 = trunc i64 %109 to i8
  %conv332 = zext i8 %conv331 to i32
  %mul333 = mul nsw i32 %conv332, 5
  %conv334 = trunc i32 %mul333 to i8
  %conv335 = sext i8 %conv334 to i32
  br label %cond.end.344

cond.false.336:                                   ; preds = %cond.true.324
  %110 = load i64, i64* %to_nchars, align 8
  %conv337 = trunc i64 %110 to i8
  %conv338 = zext i8 %conv337 to i32
  %mul339 = mul nsw i32 %conv338, 5
  %sub340 = sub nsw i32 %mul339, -128
  %conv341 = trunc i32 %sub340 to i8
  %conv342 = sext i8 %conv341 to i32
  %add343 = add nsw i32 %conv342, -128
  br label %cond.end.344

cond.end.344:                                     ; preds = %cond.false.336, %cond.true.330
  %cond345 = phi i32 [ %conv335, %cond.true.330 ], [ %add343, %cond.false.336 ]
  %conv346 = sext i32 %cond345 to i64
  store i64 %conv346, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.347:                                   ; preds = %lor.lhs.false.318
  %111 = load i64, i64* %to_nchars, align 8
  %conv348 = trunc i64 %111 to i8
  %conv349 = zext i8 %conv348 to i32
  %mul350 = mul nsw i32 %conv349, 5
  %cmp351 = icmp sle i32 %mul350, 127
  br i1 %cmp351, label %cond.true.353, label %cond.false.359

cond.true.353:                                    ; preds = %cond.false.347
  %112 = load i64, i64* %to_nchars, align 8
  %conv354 = trunc i64 %112 to i8
  %conv355 = zext i8 %conv354 to i32
  %mul356 = mul nsw i32 %conv355, 5
  %conv357 = trunc i32 %mul356 to i8
  %conv358 = sext i8 %conv357 to i32
  br label %cond.end.367

cond.false.359:                                   ; preds = %cond.false.347
  %113 = load i64, i64* %to_nchars, align 8
  %conv360 = trunc i64 %113 to i8
  %conv361 = zext i8 %conv360 to i32
  %mul362 = mul nsw i32 %conv361, 5
  %sub363 = sub nsw i32 %mul362, -128
  %conv364 = trunc i32 %sub363 to i8
  %conv365 = sext i8 %conv364 to i32
  %add366 = add nsw i32 %conv365, -128
  br label %cond.end.367

cond.end.367:                                     ; preds = %cond.false.359, %cond.true.353
  %cond368 = phi i32 [ %conv358, %cond.true.353 ], [ %add366, %cond.false.359 ]
  %conv369 = sext i32 %cond368 to i64
  store i64 %conv369, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.370:                                   ; preds = %cond.true
  %114 = load i64, i64* %to_nchars, align 8
  %add371 = add nsw i64 0, %114
  %mul372 = mul nsw i64 0, %add371
  %sub373 = sub nsw i64 %mul372, 1
  %cmp374 = icmp slt i64 %sub373, 0
  br i1 %cmp374, label %cond.true.376, label %cond.false.393

cond.true.376:                                    ; preds = %cond.false.370
  %115 = load i64, i64* %to_nchars, align 8
  %add377 = add nsw i64 0, %115
  %mul378 = mul nsw i64 0, %add377
  %add379 = add nsw i64 %mul378, 0
  %neg380 = xor i64 %add379, -1
  %cmp381 = icmp eq i64 %neg380, -1
  %conv382 = zext i1 %cmp381 to i32
  %sub383 = sub nsw i32 0, %conv382
  %conv384 = sext i32 %sub383 to i64
  %116 = load i64, i64* %to_nchars, align 8
  %add385 = add nsw i64 0, %116
  %mul386 = mul nsw i64 0, %add385
  %add387 = add nsw i64 %mul386, 1
  %shl388 = shl i64 %add387, 62
  %sub389 = sub nsw i64 %shl388, 1
  %mul390 = mul nsw i64 %sub389, 2
  %add391 = add nsw i64 %mul390, 1
  %sub392 = sub nsw i64 %conv384, %add391
  br label %cond.end.397

cond.false.393:                                   ; preds = %cond.false.370
  %117 = load i64, i64* %to_nchars, align 8
  %add394 = add nsw i64 0, %117
  %mul395 = mul nsw i64 0, %add394
  %add396 = add nsw i64 %mul395, 0
  br label %cond.end.397

cond.end.397:                                     ; preds = %cond.false.393, %cond.true.376
  %cond398 = phi i64 [ %sub392, %cond.true.376 ], [ %add396, %cond.false.393 ]
  %cmp399 = icmp eq i64 %cond398, 0
  br i1 %cmp399, label %land.lhs.true.401, label %lor.lhs.false.404

land.lhs.true.401:                                ; preds = %cond.end.397
  %118 = load i64, i64* %to_nchars, align 8
  %cmp402 = icmp slt i64 %118, 0
  br i1 %cmp402, label %cond.true.539, label %lor.lhs.false.404

lor.lhs.false.404:                                ; preds = %land.lhs.true.401, %cond.end.397
  br i1 false, label %cond.true.405, label %cond.false.465

cond.true.405:                                    ; preds = %lor.lhs.false.404
  %119 = load i64, i64* %to_nchars, align 8
  %cmp406 = icmp slt i64 %119, 0
  br i1 %cmp406, label %cond.true.408, label %cond.false.431

cond.true.408:                                    ; preds = %cond.true.405
  %120 = load i64, i64* %to_nchars, align 8
  %121 = load i64, i64* %to_nchars, align 8
  %add409 = add nsw i64 0, %121
  %mul410 = mul nsw i64 0, %add409
  %sub411 = sub nsw i64 %mul410, 1
  %cmp412 = icmp slt i64 %sub411, 0
  br i1 %cmp412, label %cond.true.414, label %cond.false.422

cond.true.414:                                    ; preds = %cond.true.408
  %122 = load i64, i64* %to_nchars, align 8
  %add415 = add nsw i64 0, %122
  %mul416 = mul nsw i64 0, %add415
  %add417 = add nsw i64 %mul416, 1
  %shl418 = shl i64 %add417, 62
  %sub419 = sub nsw i64 %shl418, 1
  %mul420 = mul nsw i64 %sub419, 2
  %add421 = add nsw i64 %mul420, 1
  br label %cond.end.426

cond.false.422:                                   ; preds = %cond.true.408
  %123 = load i64, i64* %to_nchars, align 8
  %add423 = add nsw i64 0, %123
  %mul424 = mul nsw i64 0, %add423
  %sub425 = sub nsw i64 %mul424, 1
  br label %cond.end.426

cond.end.426:                                     ; preds = %cond.false.422, %cond.true.414
  %cond427 = phi i64 [ %add421, %cond.true.414 ], [ %sub425, %cond.false.422 ]
  %div428 = sdiv i64 %cond427, 5
  %cmp429 = icmp slt i64 %120, %div428
  br i1 %cmp429, label %cond.true.539, label %lor.lhs.false.525

cond.false.431:                                   ; preds = %cond.true.405
  br i1 false, label %cond.true.432, label %cond.false.433

cond.true.432:                                    ; preds = %cond.false.431
  br i1 false, label %cond.true.539, label %lor.lhs.false.525

cond.false.433:                                   ; preds = %cond.false.431
  %124 = load i64, i64* %to_nchars, align 8
  %add434 = add nsw i64 0, %124
  %mul435 = mul nsw i64 0, %add434
  %sub436 = sub nsw i64 %mul435, 1
  %cmp437 = icmp slt i64 %sub436, 0
  br i1 %cmp437, label %cond.true.439, label %cond.false.456

cond.true.439:                                    ; preds = %cond.false.433
  %125 = load i64, i64* %to_nchars, align 8
  %add440 = add nsw i64 0, %125
  %mul441 = mul nsw i64 0, %add440
  %add442 = add nsw i64 %mul441, 0
  %neg443 = xor i64 %add442, -1
  %cmp444 = icmp eq i64 %neg443, -1
  %conv445 = zext i1 %cmp444 to i32
  %sub446 = sub nsw i32 0, %conv445
  %conv447 = sext i32 %sub446 to i64
  %126 = load i64, i64* %to_nchars, align 8
  %add448 = add nsw i64 0, %126
  %mul449 = mul nsw i64 0, %add448
  %add450 = add nsw i64 %mul449, 1
  %shl451 = shl i64 %add450, 62
  %sub452 = sub nsw i64 %shl451, 1
  %mul453 = mul nsw i64 %sub452, 2
  %add454 = add nsw i64 %mul453, 1
  %sub455 = sub nsw i64 %conv447, %add454
  br label %cond.end.460

cond.false.456:                                   ; preds = %cond.false.433
  %127 = load i64, i64* %to_nchars, align 8
  %add457 = add nsw i64 0, %127
  %mul458 = mul nsw i64 0, %add457
  %add459 = add nsw i64 %mul458, 0
  br label %cond.end.460

cond.end.460:                                     ; preds = %cond.false.456, %cond.true.439
  %cond461 = phi i64 [ %sub455, %cond.true.439 ], [ %add459, %cond.false.456 ]
  %div462 = sdiv i64 %cond461, 5
  %128 = load i64, i64* %to_nchars, align 8
  %cmp463 = icmp slt i64 %div462, %128
  br i1 %cmp463, label %cond.true.539, label %lor.lhs.false.525

cond.false.465:                                   ; preds = %lor.lhs.false.404
  br i1 false, label %cond.true.466, label %cond.false.467

cond.true.466:                                    ; preds = %cond.false.465
  br i1 false, label %cond.true.539, label %lor.lhs.false.525

cond.false.467:                                   ; preds = %cond.false.465
  %129 = load i64, i64* %to_nchars, align 8
  %cmp468 = icmp slt i64 %129, 0
  br i1 %cmp468, label %cond.true.470, label %cond.false.502

cond.true.470:                                    ; preds = %cond.false.467
  %130 = load i64, i64* %to_nchars, align 8
  %131 = load i64, i64* %to_nchars, align 8
  %add471 = add nsw i64 0, %131
  %mul472 = mul nsw i64 0, %add471
  %sub473 = sub nsw i64 %mul472, 1
  %cmp474 = icmp slt i64 %sub473, 0
  br i1 %cmp474, label %cond.true.476, label %cond.false.493

cond.true.476:                                    ; preds = %cond.true.470
  %132 = load i64, i64* %to_nchars, align 8
  %add477 = add nsw i64 0, %132
  %mul478 = mul nsw i64 0, %add477
  %add479 = add nsw i64 %mul478, 0
  %neg480 = xor i64 %add479, -1
  %cmp481 = icmp eq i64 %neg480, -1
  %conv482 = zext i1 %cmp481 to i32
  %sub483 = sub nsw i32 0, %conv482
  %conv484 = sext i32 %sub483 to i64
  %133 = load i64, i64* %to_nchars, align 8
  %add485 = add nsw i64 0, %133
  %mul486 = mul nsw i64 0, %add485
  %add487 = add nsw i64 %mul486, 1
  %shl488 = shl i64 %add487, 62
  %sub489 = sub nsw i64 %shl488, 1
  %mul490 = mul nsw i64 %sub489, 2
  %add491 = add nsw i64 %mul490, 1
  %sub492 = sub nsw i64 %conv484, %add491
  br label %cond.end.497

cond.false.493:                                   ; preds = %cond.true.470
  %134 = load i64, i64* %to_nchars, align 8
  %add494 = add nsw i64 0, %134
  %mul495 = mul nsw i64 0, %add494
  %add496 = add nsw i64 %mul495, 0
  br label %cond.end.497

cond.end.497:                                     ; preds = %cond.false.493, %cond.true.476
  %cond498 = phi i64 [ %sub492, %cond.true.476 ], [ %add496, %cond.false.493 ]
  %div499 = sdiv i64 %cond498, 5
  %cmp500 = icmp slt i64 %130, %div499
  br i1 %cmp500, label %cond.true.539, label %lor.lhs.false.525

cond.false.502:                                   ; preds = %cond.false.467
  %135 = load i64, i64* %to_nchars, align 8
  %add503 = add nsw i64 0, %135
  %mul504 = mul nsw i64 0, %add503
  %sub505 = sub nsw i64 %mul504, 1
  %cmp506 = icmp slt i64 %sub505, 0
  br i1 %cmp506, label %cond.true.508, label %cond.false.516

cond.true.508:                                    ; preds = %cond.false.502
  %136 = load i64, i64* %to_nchars, align 8
  %add509 = add nsw i64 0, %136
  %mul510 = mul nsw i64 0, %add509
  %add511 = add nsw i64 %mul510, 1
  %shl512 = shl i64 %add511, 62
  %sub513 = sub nsw i64 %shl512, 1
  %mul514 = mul nsw i64 %sub513, 2
  %add515 = add nsw i64 %mul514, 1
  br label %cond.end.520

cond.false.516:                                   ; preds = %cond.false.502
  %137 = load i64, i64* %to_nchars, align 8
  %add517 = add nsw i64 0, %137
  %mul518 = mul nsw i64 0, %add517
  %sub519 = sub nsw i64 %mul518, 1
  br label %cond.end.520

cond.end.520:                                     ; preds = %cond.false.516, %cond.true.508
  %cond521 = phi i64 [ %add515, %cond.true.508 ], [ %sub519, %cond.false.516 ]
  %div522 = sdiv i64 %cond521, 5
  %138 = load i64, i64* %to_nchars, align 8
  %cmp523 = icmp slt i64 %div522, %138
  br i1 %cmp523, label %cond.true.539, label %lor.lhs.false.525

lor.lhs.false.525:                                ; preds = %cond.end.520, %cond.end.497, %cond.true.466, %cond.end.460, %cond.true.432, %cond.end.426
  %139 = load i64, i64* %to_nchars, align 8
  %mul526 = mul nsw i64 %139, 5
  %mul527 = mul nsw i64 0, %mul526
  %sub528 = sub nsw i64 %mul527, 1
  %cmp529 = icmp slt i64 %sub528, 0
  br i1 %cmp529, label %land.lhs.true.531, label %lor.lhs.false.535

land.lhs.true.531:                                ; preds = %lor.lhs.false.525
  %140 = load i64, i64* %to_nchars, align 8
  %mul532 = mul nsw i64 %140, 5
  %cmp533 = icmp slt i64 %mul532, -128
  br i1 %cmp533, label %cond.true.539, label %lor.lhs.false.535

lor.lhs.false.535:                                ; preds = %land.lhs.true.531, %lor.lhs.false.525
  %141 = load i64, i64* %to_nchars, align 8
  %mul536 = mul nsw i64 %141, 5
  %cmp537 = icmp slt i64 127, %mul536
  br i1 %cmp537, label %cond.true.539, label %cond.false.562

cond.true.539:                                    ; preds = %lor.lhs.false.535, %land.lhs.true.531, %cond.end.520, %cond.end.497, %cond.true.466, %cond.end.460, %cond.true.432, %cond.end.426, %land.lhs.true.401
  %142 = load i64, i64* %to_nchars, align 8
  %conv540 = trunc i64 %142 to i8
  %conv541 = zext i8 %conv540 to i32
  %mul542 = mul nsw i32 %conv541, 5
  %cmp543 = icmp sle i32 %mul542, 127
  br i1 %cmp543, label %cond.true.545, label %cond.false.551

cond.true.545:                                    ; preds = %cond.true.539
  %143 = load i64, i64* %to_nchars, align 8
  %conv546 = trunc i64 %143 to i8
  %conv547 = zext i8 %conv546 to i32
  %mul548 = mul nsw i32 %conv547, 5
  %conv549 = trunc i32 %mul548 to i8
  %conv550 = sext i8 %conv549 to i32
  br label %cond.end.559

cond.false.551:                                   ; preds = %cond.true.539
  %144 = load i64, i64* %to_nchars, align 8
  %conv552 = trunc i64 %144 to i8
  %conv553 = zext i8 %conv552 to i32
  %mul554 = mul nsw i32 %conv553, 5
  %sub555 = sub nsw i32 %mul554, -128
  %conv556 = trunc i32 %sub555 to i8
  %conv557 = sext i8 %conv556 to i32
  %add558 = add nsw i32 %conv557, -128
  br label %cond.end.559

cond.end.559:                                     ; preds = %cond.false.551, %cond.true.545
  %cond560 = phi i32 [ %conv550, %cond.true.545 ], [ %add558, %cond.false.551 ]
  %conv561 = sext i32 %cond560 to i64
  store i64 %conv561, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.562:                                   ; preds = %lor.lhs.false.535
  %145 = load i64, i64* %to_nchars, align 8
  %conv563 = trunc i64 %145 to i8
  %conv564 = zext i8 %conv563 to i32
  %mul565 = mul nsw i32 %conv564, 5
  %cmp566 = icmp sle i32 %mul565, 127
  br i1 %cmp566, label %cond.true.568, label %cond.false.574

cond.true.568:                                    ; preds = %cond.false.562
  %146 = load i64, i64* %to_nchars, align 8
  %conv569 = trunc i64 %146 to i8
  %conv570 = zext i8 %conv569 to i32
  %mul571 = mul nsw i32 %conv570, 5
  %conv572 = trunc i32 %mul571 to i8
  %conv573 = sext i8 %conv572 to i32
  br label %cond.end.582

cond.false.574:                                   ; preds = %cond.false.562
  %147 = load i64, i64* %to_nchars, align 8
  %conv575 = trunc i64 %147 to i8
  %conv576 = zext i8 %conv575 to i32
  %mul577 = mul nsw i32 %conv576, 5
  %sub578 = sub nsw i32 %mul577, -128
  %conv579 = trunc i32 %sub578 to i8
  %conv580 = sext i8 %conv579 to i32
  %add581 = add nsw i32 %conv580, -128
  br label %cond.end.582

cond.end.582:                                     ; preds = %cond.false.574, %cond.true.568
  %cond583 = phi i32 [ %conv573, %cond.true.568 ], [ %add581, %cond.false.574 ]
  %conv584 = sext i32 %cond583 to i64
  store i64 %conv584, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.585:                                   ; preds = %if.then.109
  br i1 false, label %cond.true.586, label %cond.false.1070

cond.true.586:                                    ; preds = %cond.false.585
  br i1 false, label %cond.true.587, label %cond.false.855

cond.true.587:                                    ; preds = %cond.true.586
  %148 = load i64, i64* %to_nchars, align 8
  %conv588 = trunc i64 %148 to i16
  %conv589 = sext i16 %conv588 to i32
  %add590 = add nsw i32 0, %conv589
  %mul591 = mul nsw i32 0, %add590
  %sub592 = sub nsw i32 %mul591, 1
  %cmp593 = icmp slt i32 %sub592, 0
  br i1 %cmp593, label %cond.true.595, label %cond.false.615

cond.true.595:                                    ; preds = %cond.true.587
  %149 = load i64, i64* %to_nchars, align 8
  %conv596 = trunc i64 %149 to i16
  %conv597 = sext i16 %conv596 to i32
  %add598 = add nsw i32 0, %conv597
  %mul599 = mul nsw i32 0, %add598
  %add600 = add nsw i32 %mul599, 0
  %neg601 = xor i32 %add600, -1
  %cmp602 = icmp eq i32 %neg601, -1
  %conv603 = zext i1 %cmp602 to i32
  %sub604 = sub nsw i32 0, %conv603
  %150 = load i64, i64* %to_nchars, align 8
  %conv605 = trunc i64 %150 to i16
  %conv606 = sext i16 %conv605 to i32
  %add607 = add nsw i32 0, %conv606
  %mul608 = mul nsw i32 0, %add607
  %add609 = add nsw i32 %mul608, 1
  %shl610 = shl i32 %add609, 30
  %sub611 = sub nsw i32 %shl610, 1
  %mul612 = mul nsw i32 %sub611, 2
  %add613 = add nsw i32 %mul612, 1
  %sub614 = sub nsw i32 %sub604, %add613
  br label %cond.end.621

cond.false.615:                                   ; preds = %cond.true.587
  %151 = load i64, i64* %to_nchars, align 8
  %conv616 = trunc i64 %151 to i16
  %conv617 = sext i16 %conv616 to i32
  %add618 = add nsw i32 0, %conv617
  %mul619 = mul nsw i32 0, %add618
  %add620 = add nsw i32 %mul619, 0
  br label %cond.end.621

cond.end.621:                                     ; preds = %cond.false.615, %cond.true.595
  %cond622 = phi i32 [ %sub614, %cond.true.595 ], [ %add620, %cond.false.615 ]
  %cmp623 = icmp eq i32 %cond622, 0
  br i1 %cmp623, label %land.lhs.true.625, label %lor.lhs.false.630

land.lhs.true.625:                                ; preds = %cond.end.621
  %152 = load i64, i64* %to_nchars, align 8
  %conv626 = trunc i64 %152 to i16
  %conv627 = sext i16 %conv626 to i32
  %cmp628 = icmp slt i32 %conv627, 0
  br i1 %cmp628, label %cond.true.809, label %lor.lhs.false.630

lor.lhs.false.630:                                ; preds = %land.lhs.true.625, %cond.end.621
  br i1 false, label %cond.true.631, label %cond.false.710

cond.true.631:                                    ; preds = %lor.lhs.false.630
  %153 = load i64, i64* %to_nchars, align 8
  %conv632 = trunc i64 %153 to i16
  %conv633 = sext i16 %conv632 to i32
  %cmp634 = icmp slt i32 %conv633, 0
  br i1 %cmp634, label %cond.true.636, label %cond.false.667

cond.true.636:                                    ; preds = %cond.true.631
  %154 = load i64, i64* %to_nchars, align 8
  %conv637 = trunc i64 %154 to i16
  %conv638 = sext i16 %conv637 to i32
  %155 = load i64, i64* %to_nchars, align 8
  %conv639 = trunc i64 %155 to i16
  %conv640 = sext i16 %conv639 to i32
  %add641 = add nsw i32 0, %conv640
  %mul642 = mul nsw i32 0, %add641
  %sub643 = sub nsw i32 %mul642, 1
  %cmp644 = icmp slt i32 %sub643, 0
  br i1 %cmp644, label %cond.true.646, label %cond.false.656

cond.true.646:                                    ; preds = %cond.true.636
  %156 = load i64, i64* %to_nchars, align 8
  %conv647 = trunc i64 %156 to i16
  %conv648 = sext i16 %conv647 to i32
  %add649 = add nsw i32 0, %conv648
  %mul650 = mul nsw i32 0, %add649
  %add651 = add nsw i32 %mul650, 1
  %shl652 = shl i32 %add651, 30
  %sub653 = sub nsw i32 %shl652, 1
  %mul654 = mul nsw i32 %sub653, 2
  %add655 = add nsw i32 %mul654, 1
  br label %cond.end.662

cond.false.656:                                   ; preds = %cond.true.636
  %157 = load i64, i64* %to_nchars, align 8
  %conv657 = trunc i64 %157 to i16
  %conv658 = sext i16 %conv657 to i32
  %add659 = add nsw i32 0, %conv658
  %mul660 = mul nsw i32 0, %add659
  %sub661 = sub nsw i32 %mul660, 1
  br label %cond.end.662

cond.end.662:                                     ; preds = %cond.false.656, %cond.true.646
  %cond663 = phi i32 [ %add655, %cond.true.646 ], [ %sub661, %cond.false.656 ]
  %div664 = sdiv i32 %cond663, 5
  %cmp665 = icmp slt i32 %conv638, %div664
  br i1 %cmp665, label %cond.true.809, label %lor.lhs.false.789

cond.false.667:                                   ; preds = %cond.true.631
  br i1 false, label %cond.true.668, label %cond.false.669

cond.true.668:                                    ; preds = %cond.false.667
  br i1 false, label %cond.true.809, label %lor.lhs.false.789

cond.false.669:                                   ; preds = %cond.false.667
  %158 = load i64, i64* %to_nchars, align 8
  %conv670 = trunc i64 %158 to i16
  %conv671 = sext i16 %conv670 to i32
  %add672 = add nsw i32 0, %conv671
  %mul673 = mul nsw i32 0, %add672
  %sub674 = sub nsw i32 %mul673, 1
  %cmp675 = icmp slt i32 %sub674, 0
  br i1 %cmp675, label %cond.true.677, label %cond.false.697

cond.true.677:                                    ; preds = %cond.false.669
  %159 = load i64, i64* %to_nchars, align 8
  %conv678 = trunc i64 %159 to i16
  %conv679 = sext i16 %conv678 to i32
  %add680 = add nsw i32 0, %conv679
  %mul681 = mul nsw i32 0, %add680
  %add682 = add nsw i32 %mul681, 0
  %neg683 = xor i32 %add682, -1
  %cmp684 = icmp eq i32 %neg683, -1
  %conv685 = zext i1 %cmp684 to i32
  %sub686 = sub nsw i32 0, %conv685
  %160 = load i64, i64* %to_nchars, align 8
  %conv687 = trunc i64 %160 to i16
  %conv688 = sext i16 %conv687 to i32
  %add689 = add nsw i32 0, %conv688
  %mul690 = mul nsw i32 0, %add689
  %add691 = add nsw i32 %mul690, 1
  %shl692 = shl i32 %add691, 30
  %sub693 = sub nsw i32 %shl692, 1
  %mul694 = mul nsw i32 %sub693, 2
  %add695 = add nsw i32 %mul694, 1
  %sub696 = sub nsw i32 %sub686, %add695
  br label %cond.end.703

cond.false.697:                                   ; preds = %cond.false.669
  %161 = load i64, i64* %to_nchars, align 8
  %conv698 = trunc i64 %161 to i16
  %conv699 = sext i16 %conv698 to i32
  %add700 = add nsw i32 0, %conv699
  %mul701 = mul nsw i32 0, %add700
  %add702 = add nsw i32 %mul701, 0
  br label %cond.end.703

cond.end.703:                                     ; preds = %cond.false.697, %cond.true.677
  %cond704 = phi i32 [ %sub696, %cond.true.677 ], [ %add702, %cond.false.697 ]
  %div705 = sdiv i32 %cond704, 5
  %162 = load i64, i64* %to_nchars, align 8
  %conv706 = trunc i64 %162 to i16
  %conv707 = sext i16 %conv706 to i32
  %cmp708 = icmp slt i32 %div705, %conv707
  br i1 %cmp708, label %cond.true.809, label %lor.lhs.false.789

cond.false.710:                                   ; preds = %lor.lhs.false.630
  br i1 false, label %cond.true.711, label %cond.false.712

cond.true.711:                                    ; preds = %cond.false.710
  br i1 false, label %cond.true.809, label %lor.lhs.false.789

cond.false.712:                                   ; preds = %cond.false.710
  %163 = load i64, i64* %to_nchars, align 8
  %conv713 = trunc i64 %163 to i16
  %conv714 = sext i16 %conv713 to i32
  %cmp715 = icmp slt i32 %conv714, 0
  br i1 %cmp715, label %cond.true.717, label %cond.false.758

cond.true.717:                                    ; preds = %cond.false.712
  %164 = load i64, i64* %to_nchars, align 8
  %conv718 = trunc i64 %164 to i16
  %conv719 = sext i16 %conv718 to i32
  %165 = load i64, i64* %to_nchars, align 8
  %conv720 = trunc i64 %165 to i16
  %conv721 = sext i16 %conv720 to i32
  %add722 = add nsw i32 0, %conv721
  %mul723 = mul nsw i32 0, %add722
  %sub724 = sub nsw i32 %mul723, 1
  %cmp725 = icmp slt i32 %sub724, 0
  br i1 %cmp725, label %cond.true.727, label %cond.false.747

cond.true.727:                                    ; preds = %cond.true.717
  %166 = load i64, i64* %to_nchars, align 8
  %conv728 = trunc i64 %166 to i16
  %conv729 = sext i16 %conv728 to i32
  %add730 = add nsw i32 0, %conv729
  %mul731 = mul nsw i32 0, %add730
  %add732 = add nsw i32 %mul731, 0
  %neg733 = xor i32 %add732, -1
  %cmp734 = icmp eq i32 %neg733, -1
  %conv735 = zext i1 %cmp734 to i32
  %sub736 = sub nsw i32 0, %conv735
  %167 = load i64, i64* %to_nchars, align 8
  %conv737 = trunc i64 %167 to i16
  %conv738 = sext i16 %conv737 to i32
  %add739 = add nsw i32 0, %conv738
  %mul740 = mul nsw i32 0, %add739
  %add741 = add nsw i32 %mul740, 1
  %shl742 = shl i32 %add741, 30
  %sub743 = sub nsw i32 %shl742, 1
  %mul744 = mul nsw i32 %sub743, 2
  %add745 = add nsw i32 %mul744, 1
  %sub746 = sub nsw i32 %sub736, %add745
  br label %cond.end.753

cond.false.747:                                   ; preds = %cond.true.717
  %168 = load i64, i64* %to_nchars, align 8
  %conv748 = trunc i64 %168 to i16
  %conv749 = sext i16 %conv748 to i32
  %add750 = add nsw i32 0, %conv749
  %mul751 = mul nsw i32 0, %add750
  %add752 = add nsw i32 %mul751, 0
  br label %cond.end.753

cond.end.753:                                     ; preds = %cond.false.747, %cond.true.727
  %cond754 = phi i32 [ %sub746, %cond.true.727 ], [ %add752, %cond.false.747 ]
  %div755 = sdiv i32 %cond754, 5
  %cmp756 = icmp slt i32 %conv719, %div755
  br i1 %cmp756, label %cond.true.809, label %lor.lhs.false.789

cond.false.758:                                   ; preds = %cond.false.712
  %169 = load i64, i64* %to_nchars, align 8
  %conv759 = trunc i64 %169 to i16
  %conv760 = sext i16 %conv759 to i32
  %add761 = add nsw i32 0, %conv760
  %mul762 = mul nsw i32 0, %add761
  %sub763 = sub nsw i32 %mul762, 1
  %cmp764 = icmp slt i32 %sub763, 0
  br i1 %cmp764, label %cond.true.766, label %cond.false.776

cond.true.766:                                    ; preds = %cond.false.758
  %170 = load i64, i64* %to_nchars, align 8
  %conv767 = trunc i64 %170 to i16
  %conv768 = sext i16 %conv767 to i32
  %add769 = add nsw i32 0, %conv768
  %mul770 = mul nsw i32 0, %add769
  %add771 = add nsw i32 %mul770, 1
  %shl772 = shl i32 %add771, 30
  %sub773 = sub nsw i32 %shl772, 1
  %mul774 = mul nsw i32 %sub773, 2
  %add775 = add nsw i32 %mul774, 1
  br label %cond.end.782

cond.false.776:                                   ; preds = %cond.false.758
  %171 = load i64, i64* %to_nchars, align 8
  %conv777 = trunc i64 %171 to i16
  %conv778 = sext i16 %conv777 to i32
  %add779 = add nsw i32 0, %conv778
  %mul780 = mul nsw i32 0, %add779
  %sub781 = sub nsw i32 %mul780, 1
  br label %cond.end.782

cond.end.782:                                     ; preds = %cond.false.776, %cond.true.766
  %cond783 = phi i32 [ %add775, %cond.true.766 ], [ %sub781, %cond.false.776 ]
  %div784 = sdiv i32 %cond783, 5
  %172 = load i64, i64* %to_nchars, align 8
  %conv785 = trunc i64 %172 to i16
  %conv786 = sext i16 %conv785 to i32
  %cmp787 = icmp slt i32 %div784, %conv786
  br i1 %cmp787, label %cond.true.809, label %lor.lhs.false.789

lor.lhs.false.789:                                ; preds = %cond.end.782, %cond.end.753, %cond.true.711, %cond.end.703, %cond.true.668, %cond.end.662
  %173 = load i64, i64* %to_nchars, align 8
  %conv790 = trunc i64 %173 to i16
  %conv791 = sext i16 %conv790 to i32
  %mul792 = mul nsw i32 %conv791, 5
  %mul793 = mul nsw i32 0, %mul792
  %sub794 = sub nsw i32 %mul793, 1
  %cmp795 = icmp slt i32 %sub794, 0
  br i1 %cmp795, label %land.lhs.true.797, label %lor.lhs.false.803

land.lhs.true.797:                                ; preds = %lor.lhs.false.789
  %174 = load i64, i64* %to_nchars, align 8
  %conv798 = trunc i64 %174 to i16
  %conv799 = sext i16 %conv798 to i32
  %mul800 = mul nsw i32 %conv799, 5
  %cmp801 = icmp slt i32 %mul800, -32768
  br i1 %cmp801, label %cond.true.809, label %lor.lhs.false.803

lor.lhs.false.803:                                ; preds = %land.lhs.true.797, %lor.lhs.false.789
  %175 = load i64, i64* %to_nchars, align 8
  %conv804 = trunc i64 %175 to i16
  %conv805 = sext i16 %conv804 to i32
  %mul806 = mul nsw i32 %conv805, 5
  %cmp807 = icmp slt i32 32767, %mul806
  br i1 %cmp807, label %cond.true.809, label %cond.false.832

cond.true.809:                                    ; preds = %lor.lhs.false.803, %land.lhs.true.797, %cond.end.782, %cond.end.753, %cond.true.711, %cond.end.703, %cond.true.668, %cond.end.662, %land.lhs.true.625
  %176 = load i64, i64* %to_nchars, align 8
  %conv810 = trunc i64 %176 to i16
  %conv811 = zext i16 %conv810 to i32
  %mul812 = mul nsw i32 %conv811, 5
  %cmp813 = icmp sle i32 %mul812, 32767
  br i1 %cmp813, label %cond.true.815, label %cond.false.821

cond.true.815:                                    ; preds = %cond.true.809
  %177 = load i64, i64* %to_nchars, align 8
  %conv816 = trunc i64 %177 to i16
  %conv817 = zext i16 %conv816 to i32
  %mul818 = mul nsw i32 %conv817, 5
  %conv819 = trunc i32 %mul818 to i16
  %conv820 = sext i16 %conv819 to i32
  br label %cond.end.829

cond.false.821:                                   ; preds = %cond.true.809
  %178 = load i64, i64* %to_nchars, align 8
  %conv822 = trunc i64 %178 to i16
  %conv823 = zext i16 %conv822 to i32
  %mul824 = mul nsw i32 %conv823, 5
  %sub825 = sub nsw i32 %mul824, -32768
  %conv826 = trunc i32 %sub825 to i16
  %conv827 = sext i16 %conv826 to i32
  %add828 = add nsw i32 %conv827, -32768
  br label %cond.end.829

cond.end.829:                                     ; preds = %cond.false.821, %cond.true.815
  %cond830 = phi i32 [ %conv820, %cond.true.815 ], [ %add828, %cond.false.821 ]
  %conv831 = sext i32 %cond830 to i64
  store i64 %conv831, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.832:                                   ; preds = %lor.lhs.false.803
  %179 = load i64, i64* %to_nchars, align 8
  %conv833 = trunc i64 %179 to i16
  %conv834 = zext i16 %conv833 to i32
  %mul835 = mul nsw i32 %conv834, 5
  %cmp836 = icmp sle i32 %mul835, 32767
  br i1 %cmp836, label %cond.true.838, label %cond.false.844

cond.true.838:                                    ; preds = %cond.false.832
  %180 = load i64, i64* %to_nchars, align 8
  %conv839 = trunc i64 %180 to i16
  %conv840 = zext i16 %conv839 to i32
  %mul841 = mul nsw i32 %conv840, 5
  %conv842 = trunc i32 %mul841 to i16
  %conv843 = sext i16 %conv842 to i32
  br label %cond.end.852

cond.false.844:                                   ; preds = %cond.false.832
  %181 = load i64, i64* %to_nchars, align 8
  %conv845 = trunc i64 %181 to i16
  %conv846 = zext i16 %conv845 to i32
  %mul847 = mul nsw i32 %conv846, 5
  %sub848 = sub nsw i32 %mul847, -32768
  %conv849 = trunc i32 %sub848 to i16
  %conv850 = sext i16 %conv849 to i32
  %add851 = add nsw i32 %conv850, -32768
  br label %cond.end.852

cond.end.852:                                     ; preds = %cond.false.844, %cond.true.838
  %cond853 = phi i32 [ %conv843, %cond.true.838 ], [ %add851, %cond.false.844 ]
  %conv854 = sext i32 %cond853 to i64
  store i64 %conv854, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.855:                                   ; preds = %cond.true.586
  %182 = load i64, i64* %to_nchars, align 8
  %add856 = add nsw i64 0, %182
  %mul857 = mul nsw i64 0, %add856
  %sub858 = sub nsw i64 %mul857, 1
  %cmp859 = icmp slt i64 %sub858, 0
  br i1 %cmp859, label %cond.true.861, label %cond.false.878

cond.true.861:                                    ; preds = %cond.false.855
  %183 = load i64, i64* %to_nchars, align 8
  %add862 = add nsw i64 0, %183
  %mul863 = mul nsw i64 0, %add862
  %add864 = add nsw i64 %mul863, 0
  %neg865 = xor i64 %add864, -1
  %cmp866 = icmp eq i64 %neg865, -1
  %conv867 = zext i1 %cmp866 to i32
  %sub868 = sub nsw i32 0, %conv867
  %conv869 = sext i32 %sub868 to i64
  %184 = load i64, i64* %to_nchars, align 8
  %add870 = add nsw i64 0, %184
  %mul871 = mul nsw i64 0, %add870
  %add872 = add nsw i64 %mul871, 1
  %shl873 = shl i64 %add872, 62
  %sub874 = sub nsw i64 %shl873, 1
  %mul875 = mul nsw i64 %sub874, 2
  %add876 = add nsw i64 %mul875, 1
  %sub877 = sub nsw i64 %conv869, %add876
  br label %cond.end.882

cond.false.878:                                   ; preds = %cond.false.855
  %185 = load i64, i64* %to_nchars, align 8
  %add879 = add nsw i64 0, %185
  %mul880 = mul nsw i64 0, %add879
  %add881 = add nsw i64 %mul880, 0
  br label %cond.end.882

cond.end.882:                                     ; preds = %cond.false.878, %cond.true.861
  %cond883 = phi i64 [ %sub877, %cond.true.861 ], [ %add881, %cond.false.878 ]
  %cmp884 = icmp eq i64 %cond883, 0
  br i1 %cmp884, label %land.lhs.true.886, label %lor.lhs.false.889

land.lhs.true.886:                                ; preds = %cond.end.882
  %186 = load i64, i64* %to_nchars, align 8
  %cmp887 = icmp slt i64 %186, 0
  br i1 %cmp887, label %cond.true.1024, label %lor.lhs.false.889

lor.lhs.false.889:                                ; preds = %land.lhs.true.886, %cond.end.882
  br i1 false, label %cond.true.890, label %cond.false.950

cond.true.890:                                    ; preds = %lor.lhs.false.889
  %187 = load i64, i64* %to_nchars, align 8
  %cmp891 = icmp slt i64 %187, 0
  br i1 %cmp891, label %cond.true.893, label %cond.false.916

cond.true.893:                                    ; preds = %cond.true.890
  %188 = load i64, i64* %to_nchars, align 8
  %189 = load i64, i64* %to_nchars, align 8
  %add894 = add nsw i64 0, %189
  %mul895 = mul nsw i64 0, %add894
  %sub896 = sub nsw i64 %mul895, 1
  %cmp897 = icmp slt i64 %sub896, 0
  br i1 %cmp897, label %cond.true.899, label %cond.false.907

cond.true.899:                                    ; preds = %cond.true.893
  %190 = load i64, i64* %to_nchars, align 8
  %add900 = add nsw i64 0, %190
  %mul901 = mul nsw i64 0, %add900
  %add902 = add nsw i64 %mul901, 1
  %shl903 = shl i64 %add902, 62
  %sub904 = sub nsw i64 %shl903, 1
  %mul905 = mul nsw i64 %sub904, 2
  %add906 = add nsw i64 %mul905, 1
  br label %cond.end.911

cond.false.907:                                   ; preds = %cond.true.893
  %191 = load i64, i64* %to_nchars, align 8
  %add908 = add nsw i64 0, %191
  %mul909 = mul nsw i64 0, %add908
  %sub910 = sub nsw i64 %mul909, 1
  br label %cond.end.911

cond.end.911:                                     ; preds = %cond.false.907, %cond.true.899
  %cond912 = phi i64 [ %add906, %cond.true.899 ], [ %sub910, %cond.false.907 ]
  %div913 = sdiv i64 %cond912, 5
  %cmp914 = icmp slt i64 %188, %div913
  br i1 %cmp914, label %cond.true.1024, label %lor.lhs.false.1010

cond.false.916:                                   ; preds = %cond.true.890
  br i1 false, label %cond.true.917, label %cond.false.918

cond.true.917:                                    ; preds = %cond.false.916
  br i1 false, label %cond.true.1024, label %lor.lhs.false.1010

cond.false.918:                                   ; preds = %cond.false.916
  %192 = load i64, i64* %to_nchars, align 8
  %add919 = add nsw i64 0, %192
  %mul920 = mul nsw i64 0, %add919
  %sub921 = sub nsw i64 %mul920, 1
  %cmp922 = icmp slt i64 %sub921, 0
  br i1 %cmp922, label %cond.true.924, label %cond.false.941

cond.true.924:                                    ; preds = %cond.false.918
  %193 = load i64, i64* %to_nchars, align 8
  %add925 = add nsw i64 0, %193
  %mul926 = mul nsw i64 0, %add925
  %add927 = add nsw i64 %mul926, 0
  %neg928 = xor i64 %add927, -1
  %cmp929 = icmp eq i64 %neg928, -1
  %conv930 = zext i1 %cmp929 to i32
  %sub931 = sub nsw i32 0, %conv930
  %conv932 = sext i32 %sub931 to i64
  %194 = load i64, i64* %to_nchars, align 8
  %add933 = add nsw i64 0, %194
  %mul934 = mul nsw i64 0, %add933
  %add935 = add nsw i64 %mul934, 1
  %shl936 = shl i64 %add935, 62
  %sub937 = sub nsw i64 %shl936, 1
  %mul938 = mul nsw i64 %sub937, 2
  %add939 = add nsw i64 %mul938, 1
  %sub940 = sub nsw i64 %conv932, %add939
  br label %cond.end.945

cond.false.941:                                   ; preds = %cond.false.918
  %195 = load i64, i64* %to_nchars, align 8
  %add942 = add nsw i64 0, %195
  %mul943 = mul nsw i64 0, %add942
  %add944 = add nsw i64 %mul943, 0
  br label %cond.end.945

cond.end.945:                                     ; preds = %cond.false.941, %cond.true.924
  %cond946 = phi i64 [ %sub940, %cond.true.924 ], [ %add944, %cond.false.941 ]
  %div947 = sdiv i64 %cond946, 5
  %196 = load i64, i64* %to_nchars, align 8
  %cmp948 = icmp slt i64 %div947, %196
  br i1 %cmp948, label %cond.true.1024, label %lor.lhs.false.1010

cond.false.950:                                   ; preds = %lor.lhs.false.889
  br i1 false, label %cond.true.951, label %cond.false.952

cond.true.951:                                    ; preds = %cond.false.950
  br i1 false, label %cond.true.1024, label %lor.lhs.false.1010

cond.false.952:                                   ; preds = %cond.false.950
  %197 = load i64, i64* %to_nchars, align 8
  %cmp953 = icmp slt i64 %197, 0
  br i1 %cmp953, label %cond.true.955, label %cond.false.987

cond.true.955:                                    ; preds = %cond.false.952
  %198 = load i64, i64* %to_nchars, align 8
  %199 = load i64, i64* %to_nchars, align 8
  %add956 = add nsw i64 0, %199
  %mul957 = mul nsw i64 0, %add956
  %sub958 = sub nsw i64 %mul957, 1
  %cmp959 = icmp slt i64 %sub958, 0
  br i1 %cmp959, label %cond.true.961, label %cond.false.978

cond.true.961:                                    ; preds = %cond.true.955
  %200 = load i64, i64* %to_nchars, align 8
  %add962 = add nsw i64 0, %200
  %mul963 = mul nsw i64 0, %add962
  %add964 = add nsw i64 %mul963, 0
  %neg965 = xor i64 %add964, -1
  %cmp966 = icmp eq i64 %neg965, -1
  %conv967 = zext i1 %cmp966 to i32
  %sub968 = sub nsw i32 0, %conv967
  %conv969 = sext i32 %sub968 to i64
  %201 = load i64, i64* %to_nchars, align 8
  %add970 = add nsw i64 0, %201
  %mul971 = mul nsw i64 0, %add970
  %add972 = add nsw i64 %mul971, 1
  %shl973 = shl i64 %add972, 62
  %sub974 = sub nsw i64 %shl973, 1
  %mul975 = mul nsw i64 %sub974, 2
  %add976 = add nsw i64 %mul975, 1
  %sub977 = sub nsw i64 %conv969, %add976
  br label %cond.end.982

cond.false.978:                                   ; preds = %cond.true.955
  %202 = load i64, i64* %to_nchars, align 8
  %add979 = add nsw i64 0, %202
  %mul980 = mul nsw i64 0, %add979
  %add981 = add nsw i64 %mul980, 0
  br label %cond.end.982

cond.end.982:                                     ; preds = %cond.false.978, %cond.true.961
  %cond983 = phi i64 [ %sub977, %cond.true.961 ], [ %add981, %cond.false.978 ]
  %div984 = sdiv i64 %cond983, 5
  %cmp985 = icmp slt i64 %198, %div984
  br i1 %cmp985, label %cond.true.1024, label %lor.lhs.false.1010

cond.false.987:                                   ; preds = %cond.false.952
  %203 = load i64, i64* %to_nchars, align 8
  %add988 = add nsw i64 0, %203
  %mul989 = mul nsw i64 0, %add988
  %sub990 = sub nsw i64 %mul989, 1
  %cmp991 = icmp slt i64 %sub990, 0
  br i1 %cmp991, label %cond.true.993, label %cond.false.1001

cond.true.993:                                    ; preds = %cond.false.987
  %204 = load i64, i64* %to_nchars, align 8
  %add994 = add nsw i64 0, %204
  %mul995 = mul nsw i64 0, %add994
  %add996 = add nsw i64 %mul995, 1
  %shl997 = shl i64 %add996, 62
  %sub998 = sub nsw i64 %shl997, 1
  %mul999 = mul nsw i64 %sub998, 2
  %add1000 = add nsw i64 %mul999, 1
  br label %cond.end.1005

cond.false.1001:                                  ; preds = %cond.false.987
  %205 = load i64, i64* %to_nchars, align 8
  %add1002 = add nsw i64 0, %205
  %mul1003 = mul nsw i64 0, %add1002
  %sub1004 = sub nsw i64 %mul1003, 1
  br label %cond.end.1005

cond.end.1005:                                    ; preds = %cond.false.1001, %cond.true.993
  %cond1006 = phi i64 [ %add1000, %cond.true.993 ], [ %sub1004, %cond.false.1001 ]
  %div1007 = sdiv i64 %cond1006, 5
  %206 = load i64, i64* %to_nchars, align 8
  %cmp1008 = icmp slt i64 %div1007, %206
  br i1 %cmp1008, label %cond.true.1024, label %lor.lhs.false.1010

lor.lhs.false.1010:                               ; preds = %cond.end.1005, %cond.end.982, %cond.true.951, %cond.end.945, %cond.true.917, %cond.end.911
  %207 = load i64, i64* %to_nchars, align 8
  %mul1011 = mul nsw i64 %207, 5
  %mul1012 = mul nsw i64 0, %mul1011
  %sub1013 = sub nsw i64 %mul1012, 1
  %cmp1014 = icmp slt i64 %sub1013, 0
  br i1 %cmp1014, label %land.lhs.true.1016, label %lor.lhs.false.1020

land.lhs.true.1016:                               ; preds = %lor.lhs.false.1010
  %208 = load i64, i64* %to_nchars, align 8
  %mul1017 = mul nsw i64 %208, 5
  %cmp1018 = icmp slt i64 %mul1017, -32768
  br i1 %cmp1018, label %cond.true.1024, label %lor.lhs.false.1020

lor.lhs.false.1020:                               ; preds = %land.lhs.true.1016, %lor.lhs.false.1010
  %209 = load i64, i64* %to_nchars, align 8
  %mul1021 = mul nsw i64 %209, 5
  %cmp1022 = icmp slt i64 32767, %mul1021
  br i1 %cmp1022, label %cond.true.1024, label %cond.false.1047

cond.true.1024:                                   ; preds = %lor.lhs.false.1020, %land.lhs.true.1016, %cond.end.1005, %cond.end.982, %cond.true.951, %cond.end.945, %cond.true.917, %cond.end.911, %land.lhs.true.886
  %210 = load i64, i64* %to_nchars, align 8
  %conv1025 = trunc i64 %210 to i16
  %conv1026 = zext i16 %conv1025 to i32
  %mul1027 = mul nsw i32 %conv1026, 5
  %cmp1028 = icmp sle i32 %mul1027, 32767
  br i1 %cmp1028, label %cond.true.1030, label %cond.false.1036

cond.true.1030:                                   ; preds = %cond.true.1024
  %211 = load i64, i64* %to_nchars, align 8
  %conv1031 = trunc i64 %211 to i16
  %conv1032 = zext i16 %conv1031 to i32
  %mul1033 = mul nsw i32 %conv1032, 5
  %conv1034 = trunc i32 %mul1033 to i16
  %conv1035 = sext i16 %conv1034 to i32
  br label %cond.end.1044

cond.false.1036:                                  ; preds = %cond.true.1024
  %212 = load i64, i64* %to_nchars, align 8
  %conv1037 = trunc i64 %212 to i16
  %conv1038 = zext i16 %conv1037 to i32
  %mul1039 = mul nsw i32 %conv1038, 5
  %sub1040 = sub nsw i32 %mul1039, -32768
  %conv1041 = trunc i32 %sub1040 to i16
  %conv1042 = sext i16 %conv1041 to i32
  %add1043 = add nsw i32 %conv1042, -32768
  br label %cond.end.1044

cond.end.1044:                                    ; preds = %cond.false.1036, %cond.true.1030
  %cond1045 = phi i32 [ %conv1035, %cond.true.1030 ], [ %add1043, %cond.false.1036 ]
  %conv1046 = sext i32 %cond1045 to i64
  store i64 %conv1046, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1047:                                  ; preds = %lor.lhs.false.1020
  %213 = load i64, i64* %to_nchars, align 8
  %conv1048 = trunc i64 %213 to i16
  %conv1049 = zext i16 %conv1048 to i32
  %mul1050 = mul nsw i32 %conv1049, 5
  %cmp1051 = icmp sle i32 %mul1050, 32767
  br i1 %cmp1051, label %cond.true.1053, label %cond.false.1059

cond.true.1053:                                   ; preds = %cond.false.1047
  %214 = load i64, i64* %to_nchars, align 8
  %conv1054 = trunc i64 %214 to i16
  %conv1055 = zext i16 %conv1054 to i32
  %mul1056 = mul nsw i32 %conv1055, 5
  %conv1057 = trunc i32 %mul1056 to i16
  %conv1058 = sext i16 %conv1057 to i32
  br label %cond.end.1067

cond.false.1059:                                  ; preds = %cond.false.1047
  %215 = load i64, i64* %to_nchars, align 8
  %conv1060 = trunc i64 %215 to i16
  %conv1061 = zext i16 %conv1060 to i32
  %mul1062 = mul nsw i32 %conv1061, 5
  %sub1063 = sub nsw i32 %mul1062, -32768
  %conv1064 = trunc i32 %sub1063 to i16
  %conv1065 = sext i16 %conv1064 to i32
  %add1066 = add nsw i32 %conv1065, -32768
  br label %cond.end.1067

cond.end.1067:                                    ; preds = %cond.false.1059, %cond.true.1053
  %cond1068 = phi i32 [ %conv1058, %cond.true.1053 ], [ %add1066, %cond.false.1059 ]
  %conv1069 = sext i32 %cond1068 to i64
  store i64 %conv1069, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1070:                                  ; preds = %cond.false.585
  br i1 false, label %cond.true.1071, label %cond.false.1499

cond.true.1071:                                   ; preds = %cond.false.1070
  br i1 false, label %cond.true.1072, label %cond.false.1298

cond.true.1072:                                   ; preds = %cond.true.1071
  %216 = load i64, i64* %to_nchars, align 8
  %conv1073 = trunc i64 %216 to i32
  %add1074 = add nsw i32 0, %conv1073
  %mul1075 = mul nsw i32 0, %add1074
  %sub1076 = sub nsw i32 %mul1075, 1
  %cmp1077 = icmp slt i32 %sub1076, 0
  br i1 %cmp1077, label %cond.true.1079, label %cond.false.1097

cond.true.1079:                                   ; preds = %cond.true.1072
  %217 = load i64, i64* %to_nchars, align 8
  %conv1080 = trunc i64 %217 to i32
  %add1081 = add nsw i32 0, %conv1080
  %mul1082 = mul nsw i32 0, %add1081
  %add1083 = add nsw i32 %mul1082, 0
  %neg1084 = xor i32 %add1083, -1
  %cmp1085 = icmp eq i32 %neg1084, -1
  %conv1086 = zext i1 %cmp1085 to i32
  %sub1087 = sub nsw i32 0, %conv1086
  %218 = load i64, i64* %to_nchars, align 8
  %conv1088 = trunc i64 %218 to i32
  %add1089 = add nsw i32 0, %conv1088
  %mul1090 = mul nsw i32 0, %add1089
  %add1091 = add nsw i32 %mul1090, 1
  %shl1092 = shl i32 %add1091, 30
  %sub1093 = sub nsw i32 %shl1092, 1
  %mul1094 = mul nsw i32 %sub1093, 2
  %add1095 = add nsw i32 %mul1094, 1
  %sub1096 = sub nsw i32 %sub1087, %add1095
  br label %cond.end.1102

cond.false.1097:                                  ; preds = %cond.true.1072
  %219 = load i64, i64* %to_nchars, align 8
  %conv1098 = trunc i64 %219 to i32
  %add1099 = add nsw i32 0, %conv1098
  %mul1100 = mul nsw i32 0, %add1099
  %add1101 = add nsw i32 %mul1100, 0
  br label %cond.end.1102

cond.end.1102:                                    ; preds = %cond.false.1097, %cond.true.1079
  %cond1103 = phi i32 [ %sub1096, %cond.true.1079 ], [ %add1101, %cond.false.1097 ]
  %cmp1104 = icmp eq i32 %cond1103, 0
  br i1 %cmp1104, label %land.lhs.true.1106, label %lor.lhs.false.1110

land.lhs.true.1106:                               ; preds = %cond.end.1102
  %220 = load i64, i64* %to_nchars, align 8
  %conv1107 = trunc i64 %220 to i32
  %cmp1108 = icmp slt i32 %conv1107, 0
  br i1 %cmp1108, label %cond.true.1266, label %lor.lhs.false.1110

lor.lhs.false.1110:                               ; preds = %land.lhs.true.1106, %cond.end.1102
  br i1 false, label %cond.true.1111, label %cond.false.1180

cond.true.1111:                                   ; preds = %lor.lhs.false.1110
  %221 = load i64, i64* %to_nchars, align 8
  %conv1112 = trunc i64 %221 to i32
  %cmp1113 = icmp slt i32 %conv1112, 0
  br i1 %cmp1113, label %cond.true.1115, label %cond.false.1142

cond.true.1115:                                   ; preds = %cond.true.1111
  %222 = load i64, i64* %to_nchars, align 8
  %conv1116 = trunc i64 %222 to i32
  %223 = load i64, i64* %to_nchars, align 8
  %conv1117 = trunc i64 %223 to i32
  %add1118 = add nsw i32 0, %conv1117
  %mul1119 = mul nsw i32 0, %add1118
  %sub1120 = sub nsw i32 %mul1119, 1
  %cmp1121 = icmp slt i32 %sub1120, 0
  br i1 %cmp1121, label %cond.true.1123, label %cond.false.1132

cond.true.1123:                                   ; preds = %cond.true.1115
  %224 = load i64, i64* %to_nchars, align 8
  %conv1124 = trunc i64 %224 to i32
  %add1125 = add nsw i32 0, %conv1124
  %mul1126 = mul nsw i32 0, %add1125
  %add1127 = add nsw i32 %mul1126, 1
  %shl1128 = shl i32 %add1127, 30
  %sub1129 = sub nsw i32 %shl1128, 1
  %mul1130 = mul nsw i32 %sub1129, 2
  %add1131 = add nsw i32 %mul1130, 1
  br label %cond.end.1137

cond.false.1132:                                  ; preds = %cond.true.1115
  %225 = load i64, i64* %to_nchars, align 8
  %conv1133 = trunc i64 %225 to i32
  %add1134 = add nsw i32 0, %conv1133
  %mul1135 = mul nsw i32 0, %add1134
  %sub1136 = sub nsw i32 %mul1135, 1
  br label %cond.end.1137

cond.end.1137:                                    ; preds = %cond.false.1132, %cond.true.1123
  %cond1138 = phi i32 [ %add1131, %cond.true.1123 ], [ %sub1136, %cond.false.1132 ]
  %div1139 = sdiv i32 %cond1138, 5
  %cmp1140 = icmp slt i32 %conv1116, %div1139
  br i1 %cmp1140, label %cond.true.1266, label %lor.lhs.false.1249

cond.false.1142:                                  ; preds = %cond.true.1111
  br i1 false, label %cond.true.1143, label %cond.false.1144

cond.true.1143:                                   ; preds = %cond.false.1142
  br i1 false, label %cond.true.1266, label %lor.lhs.false.1249

cond.false.1144:                                  ; preds = %cond.false.1142
  %226 = load i64, i64* %to_nchars, align 8
  %conv1145 = trunc i64 %226 to i32
  %add1146 = add nsw i32 0, %conv1145
  %mul1147 = mul nsw i32 0, %add1146
  %sub1148 = sub nsw i32 %mul1147, 1
  %cmp1149 = icmp slt i32 %sub1148, 0
  br i1 %cmp1149, label %cond.true.1151, label %cond.false.1169

cond.true.1151:                                   ; preds = %cond.false.1144
  %227 = load i64, i64* %to_nchars, align 8
  %conv1152 = trunc i64 %227 to i32
  %add1153 = add nsw i32 0, %conv1152
  %mul1154 = mul nsw i32 0, %add1153
  %add1155 = add nsw i32 %mul1154, 0
  %neg1156 = xor i32 %add1155, -1
  %cmp1157 = icmp eq i32 %neg1156, -1
  %conv1158 = zext i1 %cmp1157 to i32
  %sub1159 = sub nsw i32 0, %conv1158
  %228 = load i64, i64* %to_nchars, align 8
  %conv1160 = trunc i64 %228 to i32
  %add1161 = add nsw i32 0, %conv1160
  %mul1162 = mul nsw i32 0, %add1161
  %add1163 = add nsw i32 %mul1162, 1
  %shl1164 = shl i32 %add1163, 30
  %sub1165 = sub nsw i32 %shl1164, 1
  %mul1166 = mul nsw i32 %sub1165, 2
  %add1167 = add nsw i32 %mul1166, 1
  %sub1168 = sub nsw i32 %sub1159, %add1167
  br label %cond.end.1174

cond.false.1169:                                  ; preds = %cond.false.1144
  %229 = load i64, i64* %to_nchars, align 8
  %conv1170 = trunc i64 %229 to i32
  %add1171 = add nsw i32 0, %conv1170
  %mul1172 = mul nsw i32 0, %add1171
  %add1173 = add nsw i32 %mul1172, 0
  br label %cond.end.1174

cond.end.1174:                                    ; preds = %cond.false.1169, %cond.true.1151
  %cond1175 = phi i32 [ %sub1168, %cond.true.1151 ], [ %add1173, %cond.false.1169 ]
  %div1176 = sdiv i32 %cond1175, 5
  %230 = load i64, i64* %to_nchars, align 8
  %conv1177 = trunc i64 %230 to i32
  %cmp1178 = icmp slt i32 %div1176, %conv1177
  br i1 %cmp1178, label %cond.true.1266, label %lor.lhs.false.1249

cond.false.1180:                                  ; preds = %lor.lhs.false.1110
  br i1 false, label %cond.true.1181, label %cond.false.1182

cond.true.1181:                                   ; preds = %cond.false.1180
  br i1 false, label %cond.true.1266, label %lor.lhs.false.1249

cond.false.1182:                                  ; preds = %cond.false.1180
  %231 = load i64, i64* %to_nchars, align 8
  %conv1183 = trunc i64 %231 to i32
  %cmp1184 = icmp slt i32 %conv1183, 0
  br i1 %cmp1184, label %cond.true.1186, label %cond.false.1222

cond.true.1186:                                   ; preds = %cond.false.1182
  %232 = load i64, i64* %to_nchars, align 8
  %conv1187 = trunc i64 %232 to i32
  %233 = load i64, i64* %to_nchars, align 8
  %conv1188 = trunc i64 %233 to i32
  %add1189 = add nsw i32 0, %conv1188
  %mul1190 = mul nsw i32 0, %add1189
  %sub1191 = sub nsw i32 %mul1190, 1
  %cmp1192 = icmp slt i32 %sub1191, 0
  br i1 %cmp1192, label %cond.true.1194, label %cond.false.1212

cond.true.1194:                                   ; preds = %cond.true.1186
  %234 = load i64, i64* %to_nchars, align 8
  %conv1195 = trunc i64 %234 to i32
  %add1196 = add nsw i32 0, %conv1195
  %mul1197 = mul nsw i32 0, %add1196
  %add1198 = add nsw i32 %mul1197, 0
  %neg1199 = xor i32 %add1198, -1
  %cmp1200 = icmp eq i32 %neg1199, -1
  %conv1201 = zext i1 %cmp1200 to i32
  %sub1202 = sub nsw i32 0, %conv1201
  %235 = load i64, i64* %to_nchars, align 8
  %conv1203 = trunc i64 %235 to i32
  %add1204 = add nsw i32 0, %conv1203
  %mul1205 = mul nsw i32 0, %add1204
  %add1206 = add nsw i32 %mul1205, 1
  %shl1207 = shl i32 %add1206, 30
  %sub1208 = sub nsw i32 %shl1207, 1
  %mul1209 = mul nsw i32 %sub1208, 2
  %add1210 = add nsw i32 %mul1209, 1
  %sub1211 = sub nsw i32 %sub1202, %add1210
  br label %cond.end.1217

cond.false.1212:                                  ; preds = %cond.true.1186
  %236 = load i64, i64* %to_nchars, align 8
  %conv1213 = trunc i64 %236 to i32
  %add1214 = add nsw i32 0, %conv1213
  %mul1215 = mul nsw i32 0, %add1214
  %add1216 = add nsw i32 %mul1215, 0
  br label %cond.end.1217

cond.end.1217:                                    ; preds = %cond.false.1212, %cond.true.1194
  %cond1218 = phi i32 [ %sub1211, %cond.true.1194 ], [ %add1216, %cond.false.1212 ]
  %div1219 = sdiv i32 %cond1218, 5
  %cmp1220 = icmp slt i32 %conv1187, %div1219
  br i1 %cmp1220, label %cond.true.1266, label %lor.lhs.false.1249

cond.false.1222:                                  ; preds = %cond.false.1182
  %237 = load i64, i64* %to_nchars, align 8
  %conv1223 = trunc i64 %237 to i32
  %add1224 = add nsw i32 0, %conv1223
  %mul1225 = mul nsw i32 0, %add1224
  %sub1226 = sub nsw i32 %mul1225, 1
  %cmp1227 = icmp slt i32 %sub1226, 0
  br i1 %cmp1227, label %cond.true.1229, label %cond.false.1238

cond.true.1229:                                   ; preds = %cond.false.1222
  %238 = load i64, i64* %to_nchars, align 8
  %conv1230 = trunc i64 %238 to i32
  %add1231 = add nsw i32 0, %conv1230
  %mul1232 = mul nsw i32 0, %add1231
  %add1233 = add nsw i32 %mul1232, 1
  %shl1234 = shl i32 %add1233, 30
  %sub1235 = sub nsw i32 %shl1234, 1
  %mul1236 = mul nsw i32 %sub1235, 2
  %add1237 = add nsw i32 %mul1236, 1
  br label %cond.end.1243

cond.false.1238:                                  ; preds = %cond.false.1222
  %239 = load i64, i64* %to_nchars, align 8
  %conv1239 = trunc i64 %239 to i32
  %add1240 = add nsw i32 0, %conv1239
  %mul1241 = mul nsw i32 0, %add1240
  %sub1242 = sub nsw i32 %mul1241, 1
  br label %cond.end.1243

cond.end.1243:                                    ; preds = %cond.false.1238, %cond.true.1229
  %cond1244 = phi i32 [ %add1237, %cond.true.1229 ], [ %sub1242, %cond.false.1238 ]
  %div1245 = sdiv i32 %cond1244, 5
  %240 = load i64, i64* %to_nchars, align 8
  %conv1246 = trunc i64 %240 to i32
  %cmp1247 = icmp slt i32 %div1245, %conv1246
  br i1 %cmp1247, label %cond.true.1266, label %lor.lhs.false.1249

lor.lhs.false.1249:                               ; preds = %cond.end.1243, %cond.end.1217, %cond.true.1181, %cond.end.1174, %cond.true.1143, %cond.end.1137
  %241 = load i64, i64* %to_nchars, align 8
  %conv1250 = trunc i64 %241 to i32
  %mul1251 = mul nsw i32 %conv1250, 5
  %mul1252 = mul nsw i32 0, %mul1251
  %sub1253 = sub nsw i32 %mul1252, 1
  %cmp1254 = icmp slt i32 %sub1253, 0
  br i1 %cmp1254, label %land.lhs.true.1256, label %lor.lhs.false.1261

land.lhs.true.1256:                               ; preds = %lor.lhs.false.1249
  %242 = load i64, i64* %to_nchars, align 8
  %conv1257 = trunc i64 %242 to i32
  %mul1258 = mul nsw i32 %conv1257, 5
  %cmp1259 = icmp slt i32 %mul1258, -2147483648
  br i1 %cmp1259, label %cond.true.1266, label %lor.lhs.false.1261

lor.lhs.false.1261:                               ; preds = %land.lhs.true.1256, %lor.lhs.false.1249
  %243 = load i64, i64* %to_nchars, align 8
  %conv1262 = trunc i64 %243 to i32
  %mul1263 = mul nsw i32 %conv1262, 5
  %cmp1264 = icmp slt i32 2147483647, %mul1263
  br i1 %cmp1264, label %cond.true.1266, label %cond.false.1282

cond.true.1266:                                   ; preds = %lor.lhs.false.1261, %land.lhs.true.1256, %cond.end.1243, %cond.end.1217, %cond.true.1181, %cond.end.1174, %cond.true.1143, %cond.end.1137, %land.lhs.true.1106
  %244 = load i64, i64* %to_nchars, align 8
  %conv1267 = trunc i64 %244 to i32
  %mul1268 = mul i32 %conv1267, 5
  %cmp1269 = icmp ule i32 %mul1268, 2147483647
  br i1 %cmp1269, label %cond.true.1271, label %cond.false.1274

cond.true.1271:                                   ; preds = %cond.true.1266
  %245 = load i64, i64* %to_nchars, align 8
  %conv1272 = trunc i64 %245 to i32
  %mul1273 = mul i32 %conv1272, 5
  br label %cond.end.1279

cond.false.1274:                                  ; preds = %cond.true.1266
  %246 = load i64, i64* %to_nchars, align 8
  %conv1275 = trunc i64 %246 to i32
  %mul1276 = mul i32 %conv1275, 5
  %sub1277 = sub i32 %mul1276, -2147483648
  %add1278 = add nsw i32 %sub1277, -2147483648
  br label %cond.end.1279

cond.end.1279:                                    ; preds = %cond.false.1274, %cond.true.1271
  %cond1280 = phi i32 [ %mul1273, %cond.true.1271 ], [ %add1278, %cond.false.1274 ]
  %conv1281 = sext i32 %cond1280 to i64
  store i64 %conv1281, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1282:                                  ; preds = %lor.lhs.false.1261
  %247 = load i64, i64* %to_nchars, align 8
  %conv1283 = trunc i64 %247 to i32
  %mul1284 = mul i32 %conv1283, 5
  %cmp1285 = icmp ule i32 %mul1284, 2147483647
  br i1 %cmp1285, label %cond.true.1287, label %cond.false.1290

cond.true.1287:                                   ; preds = %cond.false.1282
  %248 = load i64, i64* %to_nchars, align 8
  %conv1288 = trunc i64 %248 to i32
  %mul1289 = mul i32 %conv1288, 5
  br label %cond.end.1295

cond.false.1290:                                  ; preds = %cond.false.1282
  %249 = load i64, i64* %to_nchars, align 8
  %conv1291 = trunc i64 %249 to i32
  %mul1292 = mul i32 %conv1291, 5
  %sub1293 = sub i32 %mul1292, -2147483648
  %add1294 = add nsw i32 %sub1293, -2147483648
  br label %cond.end.1295

cond.end.1295:                                    ; preds = %cond.false.1290, %cond.true.1287
  %cond1296 = phi i32 [ %mul1289, %cond.true.1287 ], [ %add1294, %cond.false.1290 ]
  %conv1297 = sext i32 %cond1296 to i64
  store i64 %conv1297, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1298:                                  ; preds = %cond.true.1071
  %250 = load i64, i64* %to_nchars, align 8
  %add1299 = add nsw i64 0, %250
  %mul1300 = mul nsw i64 0, %add1299
  %sub1301 = sub nsw i64 %mul1300, 1
  %cmp1302 = icmp slt i64 %sub1301, 0
  br i1 %cmp1302, label %cond.true.1304, label %cond.false.1321

cond.true.1304:                                   ; preds = %cond.false.1298
  %251 = load i64, i64* %to_nchars, align 8
  %add1305 = add nsw i64 0, %251
  %mul1306 = mul nsw i64 0, %add1305
  %add1307 = add nsw i64 %mul1306, 0
  %neg1308 = xor i64 %add1307, -1
  %cmp1309 = icmp eq i64 %neg1308, -1
  %conv1310 = zext i1 %cmp1309 to i32
  %sub1311 = sub nsw i32 0, %conv1310
  %conv1312 = sext i32 %sub1311 to i64
  %252 = load i64, i64* %to_nchars, align 8
  %add1313 = add nsw i64 0, %252
  %mul1314 = mul nsw i64 0, %add1313
  %add1315 = add nsw i64 %mul1314, 1
  %shl1316 = shl i64 %add1315, 62
  %sub1317 = sub nsw i64 %shl1316, 1
  %mul1318 = mul nsw i64 %sub1317, 2
  %add1319 = add nsw i64 %mul1318, 1
  %sub1320 = sub nsw i64 %conv1312, %add1319
  br label %cond.end.1325

cond.false.1321:                                  ; preds = %cond.false.1298
  %253 = load i64, i64* %to_nchars, align 8
  %add1322 = add nsw i64 0, %253
  %mul1323 = mul nsw i64 0, %add1322
  %add1324 = add nsw i64 %mul1323, 0
  br label %cond.end.1325

cond.end.1325:                                    ; preds = %cond.false.1321, %cond.true.1304
  %cond1326 = phi i64 [ %sub1320, %cond.true.1304 ], [ %add1324, %cond.false.1321 ]
  %cmp1327 = icmp eq i64 %cond1326, 0
  br i1 %cmp1327, label %land.lhs.true.1329, label %lor.lhs.false.1332

land.lhs.true.1329:                               ; preds = %cond.end.1325
  %254 = load i64, i64* %to_nchars, align 8
  %cmp1330 = icmp slt i64 %254, 0
  br i1 %cmp1330, label %cond.true.1467, label %lor.lhs.false.1332

lor.lhs.false.1332:                               ; preds = %land.lhs.true.1329, %cond.end.1325
  br i1 false, label %cond.true.1333, label %cond.false.1393

cond.true.1333:                                   ; preds = %lor.lhs.false.1332
  %255 = load i64, i64* %to_nchars, align 8
  %cmp1334 = icmp slt i64 %255, 0
  br i1 %cmp1334, label %cond.true.1336, label %cond.false.1359

cond.true.1336:                                   ; preds = %cond.true.1333
  %256 = load i64, i64* %to_nchars, align 8
  %257 = load i64, i64* %to_nchars, align 8
  %add1337 = add nsw i64 0, %257
  %mul1338 = mul nsw i64 0, %add1337
  %sub1339 = sub nsw i64 %mul1338, 1
  %cmp1340 = icmp slt i64 %sub1339, 0
  br i1 %cmp1340, label %cond.true.1342, label %cond.false.1350

cond.true.1342:                                   ; preds = %cond.true.1336
  %258 = load i64, i64* %to_nchars, align 8
  %add1343 = add nsw i64 0, %258
  %mul1344 = mul nsw i64 0, %add1343
  %add1345 = add nsw i64 %mul1344, 1
  %shl1346 = shl i64 %add1345, 62
  %sub1347 = sub nsw i64 %shl1346, 1
  %mul1348 = mul nsw i64 %sub1347, 2
  %add1349 = add nsw i64 %mul1348, 1
  br label %cond.end.1354

cond.false.1350:                                  ; preds = %cond.true.1336
  %259 = load i64, i64* %to_nchars, align 8
  %add1351 = add nsw i64 0, %259
  %mul1352 = mul nsw i64 0, %add1351
  %sub1353 = sub nsw i64 %mul1352, 1
  br label %cond.end.1354

cond.end.1354:                                    ; preds = %cond.false.1350, %cond.true.1342
  %cond1355 = phi i64 [ %add1349, %cond.true.1342 ], [ %sub1353, %cond.false.1350 ]
  %div1356 = sdiv i64 %cond1355, 5
  %cmp1357 = icmp slt i64 %256, %div1356
  br i1 %cmp1357, label %cond.true.1467, label %lor.lhs.false.1453

cond.false.1359:                                  ; preds = %cond.true.1333
  br i1 false, label %cond.true.1360, label %cond.false.1361

cond.true.1360:                                   ; preds = %cond.false.1359
  br i1 false, label %cond.true.1467, label %lor.lhs.false.1453

cond.false.1361:                                  ; preds = %cond.false.1359
  %260 = load i64, i64* %to_nchars, align 8
  %add1362 = add nsw i64 0, %260
  %mul1363 = mul nsw i64 0, %add1362
  %sub1364 = sub nsw i64 %mul1363, 1
  %cmp1365 = icmp slt i64 %sub1364, 0
  br i1 %cmp1365, label %cond.true.1367, label %cond.false.1384

cond.true.1367:                                   ; preds = %cond.false.1361
  %261 = load i64, i64* %to_nchars, align 8
  %add1368 = add nsw i64 0, %261
  %mul1369 = mul nsw i64 0, %add1368
  %add1370 = add nsw i64 %mul1369, 0
  %neg1371 = xor i64 %add1370, -1
  %cmp1372 = icmp eq i64 %neg1371, -1
  %conv1373 = zext i1 %cmp1372 to i32
  %sub1374 = sub nsw i32 0, %conv1373
  %conv1375 = sext i32 %sub1374 to i64
  %262 = load i64, i64* %to_nchars, align 8
  %add1376 = add nsw i64 0, %262
  %mul1377 = mul nsw i64 0, %add1376
  %add1378 = add nsw i64 %mul1377, 1
  %shl1379 = shl i64 %add1378, 62
  %sub1380 = sub nsw i64 %shl1379, 1
  %mul1381 = mul nsw i64 %sub1380, 2
  %add1382 = add nsw i64 %mul1381, 1
  %sub1383 = sub nsw i64 %conv1375, %add1382
  br label %cond.end.1388

cond.false.1384:                                  ; preds = %cond.false.1361
  %263 = load i64, i64* %to_nchars, align 8
  %add1385 = add nsw i64 0, %263
  %mul1386 = mul nsw i64 0, %add1385
  %add1387 = add nsw i64 %mul1386, 0
  br label %cond.end.1388

cond.end.1388:                                    ; preds = %cond.false.1384, %cond.true.1367
  %cond1389 = phi i64 [ %sub1383, %cond.true.1367 ], [ %add1387, %cond.false.1384 ]
  %div1390 = sdiv i64 %cond1389, 5
  %264 = load i64, i64* %to_nchars, align 8
  %cmp1391 = icmp slt i64 %div1390, %264
  br i1 %cmp1391, label %cond.true.1467, label %lor.lhs.false.1453

cond.false.1393:                                  ; preds = %lor.lhs.false.1332
  br i1 false, label %cond.true.1394, label %cond.false.1395

cond.true.1394:                                   ; preds = %cond.false.1393
  br i1 false, label %cond.true.1467, label %lor.lhs.false.1453

cond.false.1395:                                  ; preds = %cond.false.1393
  %265 = load i64, i64* %to_nchars, align 8
  %cmp1396 = icmp slt i64 %265, 0
  br i1 %cmp1396, label %cond.true.1398, label %cond.false.1430

cond.true.1398:                                   ; preds = %cond.false.1395
  %266 = load i64, i64* %to_nchars, align 8
  %267 = load i64, i64* %to_nchars, align 8
  %add1399 = add nsw i64 0, %267
  %mul1400 = mul nsw i64 0, %add1399
  %sub1401 = sub nsw i64 %mul1400, 1
  %cmp1402 = icmp slt i64 %sub1401, 0
  br i1 %cmp1402, label %cond.true.1404, label %cond.false.1421

cond.true.1404:                                   ; preds = %cond.true.1398
  %268 = load i64, i64* %to_nchars, align 8
  %add1405 = add nsw i64 0, %268
  %mul1406 = mul nsw i64 0, %add1405
  %add1407 = add nsw i64 %mul1406, 0
  %neg1408 = xor i64 %add1407, -1
  %cmp1409 = icmp eq i64 %neg1408, -1
  %conv1410 = zext i1 %cmp1409 to i32
  %sub1411 = sub nsw i32 0, %conv1410
  %conv1412 = sext i32 %sub1411 to i64
  %269 = load i64, i64* %to_nchars, align 8
  %add1413 = add nsw i64 0, %269
  %mul1414 = mul nsw i64 0, %add1413
  %add1415 = add nsw i64 %mul1414, 1
  %shl1416 = shl i64 %add1415, 62
  %sub1417 = sub nsw i64 %shl1416, 1
  %mul1418 = mul nsw i64 %sub1417, 2
  %add1419 = add nsw i64 %mul1418, 1
  %sub1420 = sub nsw i64 %conv1412, %add1419
  br label %cond.end.1425

cond.false.1421:                                  ; preds = %cond.true.1398
  %270 = load i64, i64* %to_nchars, align 8
  %add1422 = add nsw i64 0, %270
  %mul1423 = mul nsw i64 0, %add1422
  %add1424 = add nsw i64 %mul1423, 0
  br label %cond.end.1425

cond.end.1425:                                    ; preds = %cond.false.1421, %cond.true.1404
  %cond1426 = phi i64 [ %sub1420, %cond.true.1404 ], [ %add1424, %cond.false.1421 ]
  %div1427 = sdiv i64 %cond1426, 5
  %cmp1428 = icmp slt i64 %266, %div1427
  br i1 %cmp1428, label %cond.true.1467, label %lor.lhs.false.1453

cond.false.1430:                                  ; preds = %cond.false.1395
  %271 = load i64, i64* %to_nchars, align 8
  %add1431 = add nsw i64 0, %271
  %mul1432 = mul nsw i64 0, %add1431
  %sub1433 = sub nsw i64 %mul1432, 1
  %cmp1434 = icmp slt i64 %sub1433, 0
  br i1 %cmp1434, label %cond.true.1436, label %cond.false.1444

cond.true.1436:                                   ; preds = %cond.false.1430
  %272 = load i64, i64* %to_nchars, align 8
  %add1437 = add nsw i64 0, %272
  %mul1438 = mul nsw i64 0, %add1437
  %add1439 = add nsw i64 %mul1438, 1
  %shl1440 = shl i64 %add1439, 62
  %sub1441 = sub nsw i64 %shl1440, 1
  %mul1442 = mul nsw i64 %sub1441, 2
  %add1443 = add nsw i64 %mul1442, 1
  br label %cond.end.1448

cond.false.1444:                                  ; preds = %cond.false.1430
  %273 = load i64, i64* %to_nchars, align 8
  %add1445 = add nsw i64 0, %273
  %mul1446 = mul nsw i64 0, %add1445
  %sub1447 = sub nsw i64 %mul1446, 1
  br label %cond.end.1448

cond.end.1448:                                    ; preds = %cond.false.1444, %cond.true.1436
  %cond1449 = phi i64 [ %add1443, %cond.true.1436 ], [ %sub1447, %cond.false.1444 ]
  %div1450 = sdiv i64 %cond1449, 5
  %274 = load i64, i64* %to_nchars, align 8
  %cmp1451 = icmp slt i64 %div1450, %274
  br i1 %cmp1451, label %cond.true.1467, label %lor.lhs.false.1453

lor.lhs.false.1453:                               ; preds = %cond.end.1448, %cond.end.1425, %cond.true.1394, %cond.end.1388, %cond.true.1360, %cond.end.1354
  %275 = load i64, i64* %to_nchars, align 8
  %mul1454 = mul nsw i64 %275, 5
  %mul1455 = mul nsw i64 0, %mul1454
  %sub1456 = sub nsw i64 %mul1455, 1
  %cmp1457 = icmp slt i64 %sub1456, 0
  br i1 %cmp1457, label %land.lhs.true.1459, label %lor.lhs.false.1463

land.lhs.true.1459:                               ; preds = %lor.lhs.false.1453
  %276 = load i64, i64* %to_nchars, align 8
  %mul1460 = mul nsw i64 %276, 5
  %cmp1461 = icmp slt i64 %mul1460, -2147483648
  br i1 %cmp1461, label %cond.true.1467, label %lor.lhs.false.1463

lor.lhs.false.1463:                               ; preds = %land.lhs.true.1459, %lor.lhs.false.1453
  %277 = load i64, i64* %to_nchars, align 8
  %mul1464 = mul nsw i64 %277, 5
  %cmp1465 = icmp slt i64 2147483647, %mul1464
  br i1 %cmp1465, label %cond.true.1467, label %cond.false.1483

cond.true.1467:                                   ; preds = %lor.lhs.false.1463, %land.lhs.true.1459, %cond.end.1448, %cond.end.1425, %cond.true.1394, %cond.end.1388, %cond.true.1360, %cond.end.1354, %land.lhs.true.1329
  %278 = load i64, i64* %to_nchars, align 8
  %conv1468 = trunc i64 %278 to i32
  %mul1469 = mul i32 %conv1468, 5
  %cmp1470 = icmp ule i32 %mul1469, 2147483647
  br i1 %cmp1470, label %cond.true.1472, label %cond.false.1475

cond.true.1472:                                   ; preds = %cond.true.1467
  %279 = load i64, i64* %to_nchars, align 8
  %conv1473 = trunc i64 %279 to i32
  %mul1474 = mul i32 %conv1473, 5
  br label %cond.end.1480

cond.false.1475:                                  ; preds = %cond.true.1467
  %280 = load i64, i64* %to_nchars, align 8
  %conv1476 = trunc i64 %280 to i32
  %mul1477 = mul i32 %conv1476, 5
  %sub1478 = sub i32 %mul1477, -2147483648
  %add1479 = add nsw i32 %sub1478, -2147483648
  br label %cond.end.1480

cond.end.1480:                                    ; preds = %cond.false.1475, %cond.true.1472
  %cond1481 = phi i32 [ %mul1474, %cond.true.1472 ], [ %add1479, %cond.false.1475 ]
  %conv1482 = sext i32 %cond1481 to i64
  store i64 %conv1482, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1483:                                  ; preds = %lor.lhs.false.1463
  %281 = load i64, i64* %to_nchars, align 8
  %conv1484 = trunc i64 %281 to i32
  %mul1485 = mul i32 %conv1484, 5
  %cmp1486 = icmp ule i32 %mul1485, 2147483647
  br i1 %cmp1486, label %cond.true.1488, label %cond.false.1491

cond.true.1488:                                   ; preds = %cond.false.1483
  %282 = load i64, i64* %to_nchars, align 8
  %conv1489 = trunc i64 %282 to i32
  %mul1490 = mul i32 %conv1489, 5
  br label %cond.end.1496

cond.false.1491:                                  ; preds = %cond.false.1483
  %283 = load i64, i64* %to_nchars, align 8
  %conv1492 = trunc i64 %283 to i32
  %mul1493 = mul i32 %conv1492, 5
  %sub1494 = sub i32 %mul1493, -2147483648
  %add1495 = add nsw i32 %sub1494, -2147483648
  br label %cond.end.1496

cond.end.1496:                                    ; preds = %cond.false.1491, %cond.true.1488
  %cond1497 = phi i32 [ %mul1490, %cond.true.1488 ], [ %add1495, %cond.false.1491 ]
  %conv1498 = sext i32 %cond1497 to i64
  store i64 %conv1498, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1499:                                  ; preds = %cond.false.1070
  br i1 true, label %cond.true.1500, label %cond.false.1887

cond.true.1500:                                   ; preds = %cond.false.1499
  br i1 false, label %cond.true.1501, label %cond.false.1694

cond.true.1501:                                   ; preds = %cond.true.1500
  %284 = load i64, i64* %to_nchars, align 8
  %add1502 = add nsw i64 0, %284
  %mul1503 = mul nsw i64 0, %add1502
  %sub1504 = sub nsw i64 %mul1503, 1
  %cmp1505 = icmp slt i64 %sub1504, 0
  br i1 %cmp1505, label %cond.true.1507, label %cond.false.1524

cond.true.1507:                                   ; preds = %cond.true.1501
  %285 = load i64, i64* %to_nchars, align 8
  %add1508 = add nsw i64 0, %285
  %mul1509 = mul nsw i64 0, %add1508
  %add1510 = add nsw i64 %mul1509, 0
  %neg1511 = xor i64 %add1510, -1
  %cmp1512 = icmp eq i64 %neg1511, -1
  %conv1513 = zext i1 %cmp1512 to i32
  %sub1514 = sub nsw i32 0, %conv1513
  %conv1515 = sext i32 %sub1514 to i64
  %286 = load i64, i64* %to_nchars, align 8
  %add1516 = add nsw i64 0, %286
  %mul1517 = mul nsw i64 0, %add1516
  %add1518 = add nsw i64 %mul1517, 1
  %shl1519 = shl i64 %add1518, 62
  %sub1520 = sub nsw i64 %shl1519, 1
  %mul1521 = mul nsw i64 %sub1520, 2
  %add1522 = add nsw i64 %mul1521, 1
  %sub1523 = sub nsw i64 %conv1515, %add1522
  br label %cond.end.1528

cond.false.1524:                                  ; preds = %cond.true.1501
  %287 = load i64, i64* %to_nchars, align 8
  %add1525 = add nsw i64 0, %287
  %mul1526 = mul nsw i64 0, %add1525
  %add1527 = add nsw i64 %mul1526, 0
  br label %cond.end.1528

cond.end.1528:                                    ; preds = %cond.false.1524, %cond.true.1507
  %cond1529 = phi i64 [ %sub1523, %cond.true.1507 ], [ %add1527, %cond.false.1524 ]
  %cmp1530 = icmp eq i64 %cond1529, 0
  br i1 %cmp1530, label %land.lhs.true.1532, label %lor.lhs.false.1535

land.lhs.true.1532:                               ; preds = %cond.end.1528
  %288 = load i64, i64* %to_nchars, align 8
  %cmp1533 = icmp slt i64 %288, 0
  br i1 %cmp1533, label %cond.true.1670, label %lor.lhs.false.1535

lor.lhs.false.1535:                               ; preds = %land.lhs.true.1532, %cond.end.1528
  br i1 false, label %cond.true.1536, label %cond.false.1596

cond.true.1536:                                   ; preds = %lor.lhs.false.1535
  %289 = load i64, i64* %to_nchars, align 8
  %cmp1537 = icmp slt i64 %289, 0
  br i1 %cmp1537, label %cond.true.1539, label %cond.false.1562

cond.true.1539:                                   ; preds = %cond.true.1536
  %290 = load i64, i64* %to_nchars, align 8
  %291 = load i64, i64* %to_nchars, align 8
  %add1540 = add nsw i64 0, %291
  %mul1541 = mul nsw i64 0, %add1540
  %sub1542 = sub nsw i64 %mul1541, 1
  %cmp1543 = icmp slt i64 %sub1542, 0
  br i1 %cmp1543, label %cond.true.1545, label %cond.false.1553

cond.true.1545:                                   ; preds = %cond.true.1539
  %292 = load i64, i64* %to_nchars, align 8
  %add1546 = add nsw i64 0, %292
  %mul1547 = mul nsw i64 0, %add1546
  %add1548 = add nsw i64 %mul1547, 1
  %shl1549 = shl i64 %add1548, 62
  %sub1550 = sub nsw i64 %shl1549, 1
  %mul1551 = mul nsw i64 %sub1550, 2
  %add1552 = add nsw i64 %mul1551, 1
  br label %cond.end.1557

cond.false.1553:                                  ; preds = %cond.true.1539
  %293 = load i64, i64* %to_nchars, align 8
  %add1554 = add nsw i64 0, %293
  %mul1555 = mul nsw i64 0, %add1554
  %sub1556 = sub nsw i64 %mul1555, 1
  br label %cond.end.1557

cond.end.1557:                                    ; preds = %cond.false.1553, %cond.true.1545
  %cond1558 = phi i64 [ %add1552, %cond.true.1545 ], [ %sub1556, %cond.false.1553 ]
  %div1559 = sdiv i64 %cond1558, 5
  %cmp1560 = icmp slt i64 %290, %div1559
  br i1 %cmp1560, label %cond.true.1670, label %lor.lhs.false.1656

cond.false.1562:                                  ; preds = %cond.true.1536
  br i1 false, label %cond.true.1563, label %cond.false.1564

cond.true.1563:                                   ; preds = %cond.false.1562
  br i1 false, label %cond.true.1670, label %lor.lhs.false.1656

cond.false.1564:                                  ; preds = %cond.false.1562
  %294 = load i64, i64* %to_nchars, align 8
  %add1565 = add nsw i64 0, %294
  %mul1566 = mul nsw i64 0, %add1565
  %sub1567 = sub nsw i64 %mul1566, 1
  %cmp1568 = icmp slt i64 %sub1567, 0
  br i1 %cmp1568, label %cond.true.1570, label %cond.false.1587

cond.true.1570:                                   ; preds = %cond.false.1564
  %295 = load i64, i64* %to_nchars, align 8
  %add1571 = add nsw i64 0, %295
  %mul1572 = mul nsw i64 0, %add1571
  %add1573 = add nsw i64 %mul1572, 0
  %neg1574 = xor i64 %add1573, -1
  %cmp1575 = icmp eq i64 %neg1574, -1
  %conv1576 = zext i1 %cmp1575 to i32
  %sub1577 = sub nsw i32 0, %conv1576
  %conv1578 = sext i32 %sub1577 to i64
  %296 = load i64, i64* %to_nchars, align 8
  %add1579 = add nsw i64 0, %296
  %mul1580 = mul nsw i64 0, %add1579
  %add1581 = add nsw i64 %mul1580, 1
  %shl1582 = shl i64 %add1581, 62
  %sub1583 = sub nsw i64 %shl1582, 1
  %mul1584 = mul nsw i64 %sub1583, 2
  %add1585 = add nsw i64 %mul1584, 1
  %sub1586 = sub nsw i64 %conv1578, %add1585
  br label %cond.end.1591

cond.false.1587:                                  ; preds = %cond.false.1564
  %297 = load i64, i64* %to_nchars, align 8
  %add1588 = add nsw i64 0, %297
  %mul1589 = mul nsw i64 0, %add1588
  %add1590 = add nsw i64 %mul1589, 0
  br label %cond.end.1591

cond.end.1591:                                    ; preds = %cond.false.1587, %cond.true.1570
  %cond1592 = phi i64 [ %sub1586, %cond.true.1570 ], [ %add1590, %cond.false.1587 ]
  %div1593 = sdiv i64 %cond1592, 5
  %298 = load i64, i64* %to_nchars, align 8
  %cmp1594 = icmp slt i64 %div1593, %298
  br i1 %cmp1594, label %cond.true.1670, label %lor.lhs.false.1656

cond.false.1596:                                  ; preds = %lor.lhs.false.1535
  br i1 false, label %cond.true.1597, label %cond.false.1598

cond.true.1597:                                   ; preds = %cond.false.1596
  br i1 false, label %cond.true.1670, label %lor.lhs.false.1656

cond.false.1598:                                  ; preds = %cond.false.1596
  %299 = load i64, i64* %to_nchars, align 8
  %cmp1599 = icmp slt i64 %299, 0
  br i1 %cmp1599, label %cond.true.1601, label %cond.false.1633

cond.true.1601:                                   ; preds = %cond.false.1598
  %300 = load i64, i64* %to_nchars, align 8
  %301 = load i64, i64* %to_nchars, align 8
  %add1602 = add nsw i64 0, %301
  %mul1603 = mul nsw i64 0, %add1602
  %sub1604 = sub nsw i64 %mul1603, 1
  %cmp1605 = icmp slt i64 %sub1604, 0
  br i1 %cmp1605, label %cond.true.1607, label %cond.false.1624

cond.true.1607:                                   ; preds = %cond.true.1601
  %302 = load i64, i64* %to_nchars, align 8
  %add1608 = add nsw i64 0, %302
  %mul1609 = mul nsw i64 0, %add1608
  %add1610 = add nsw i64 %mul1609, 0
  %neg1611 = xor i64 %add1610, -1
  %cmp1612 = icmp eq i64 %neg1611, -1
  %conv1613 = zext i1 %cmp1612 to i32
  %sub1614 = sub nsw i32 0, %conv1613
  %conv1615 = sext i32 %sub1614 to i64
  %303 = load i64, i64* %to_nchars, align 8
  %add1616 = add nsw i64 0, %303
  %mul1617 = mul nsw i64 0, %add1616
  %add1618 = add nsw i64 %mul1617, 1
  %shl1619 = shl i64 %add1618, 62
  %sub1620 = sub nsw i64 %shl1619, 1
  %mul1621 = mul nsw i64 %sub1620, 2
  %add1622 = add nsw i64 %mul1621, 1
  %sub1623 = sub nsw i64 %conv1615, %add1622
  br label %cond.end.1628

cond.false.1624:                                  ; preds = %cond.true.1601
  %304 = load i64, i64* %to_nchars, align 8
  %add1625 = add nsw i64 0, %304
  %mul1626 = mul nsw i64 0, %add1625
  %add1627 = add nsw i64 %mul1626, 0
  br label %cond.end.1628

cond.end.1628:                                    ; preds = %cond.false.1624, %cond.true.1607
  %cond1629 = phi i64 [ %sub1623, %cond.true.1607 ], [ %add1627, %cond.false.1624 ]
  %div1630 = sdiv i64 %cond1629, 5
  %cmp1631 = icmp slt i64 %300, %div1630
  br i1 %cmp1631, label %cond.true.1670, label %lor.lhs.false.1656

cond.false.1633:                                  ; preds = %cond.false.1598
  %305 = load i64, i64* %to_nchars, align 8
  %add1634 = add nsw i64 0, %305
  %mul1635 = mul nsw i64 0, %add1634
  %sub1636 = sub nsw i64 %mul1635, 1
  %cmp1637 = icmp slt i64 %sub1636, 0
  br i1 %cmp1637, label %cond.true.1639, label %cond.false.1647

cond.true.1639:                                   ; preds = %cond.false.1633
  %306 = load i64, i64* %to_nchars, align 8
  %add1640 = add nsw i64 0, %306
  %mul1641 = mul nsw i64 0, %add1640
  %add1642 = add nsw i64 %mul1641, 1
  %shl1643 = shl i64 %add1642, 62
  %sub1644 = sub nsw i64 %shl1643, 1
  %mul1645 = mul nsw i64 %sub1644, 2
  %add1646 = add nsw i64 %mul1645, 1
  br label %cond.end.1651

cond.false.1647:                                  ; preds = %cond.false.1633
  %307 = load i64, i64* %to_nchars, align 8
  %add1648 = add nsw i64 0, %307
  %mul1649 = mul nsw i64 0, %add1648
  %sub1650 = sub nsw i64 %mul1649, 1
  br label %cond.end.1651

cond.end.1651:                                    ; preds = %cond.false.1647, %cond.true.1639
  %cond1652 = phi i64 [ %add1646, %cond.true.1639 ], [ %sub1650, %cond.false.1647 ]
  %div1653 = sdiv i64 %cond1652, 5
  %308 = load i64, i64* %to_nchars, align 8
  %cmp1654 = icmp slt i64 %div1653, %308
  br i1 %cmp1654, label %cond.true.1670, label %lor.lhs.false.1656

lor.lhs.false.1656:                               ; preds = %cond.end.1651, %cond.end.1628, %cond.true.1597, %cond.end.1591, %cond.true.1563, %cond.end.1557
  %309 = load i64, i64* %to_nchars, align 8
  %mul1657 = mul nsw i64 %309, 5
  %mul1658 = mul nsw i64 0, %mul1657
  %sub1659 = sub nsw i64 %mul1658, 1
  %cmp1660 = icmp slt i64 %sub1659, 0
  br i1 %cmp1660, label %land.lhs.true.1662, label %lor.lhs.false.1666

land.lhs.true.1662:                               ; preds = %lor.lhs.false.1656
  %310 = load i64, i64* %to_nchars, align 8
  %mul1663 = mul nsw i64 %310, 5
  %cmp1664 = icmp slt i64 %mul1663, -9223372036854775808
  br i1 %cmp1664, label %cond.true.1670, label %lor.lhs.false.1666

lor.lhs.false.1666:                               ; preds = %land.lhs.true.1662, %lor.lhs.false.1656
  %311 = load i64, i64* %to_nchars, align 8
  %mul1667 = mul nsw i64 %311, 5
  %cmp1668 = icmp slt i64 9223372036854775807, %mul1667
  br i1 %cmp1668, label %cond.true.1670, label %cond.false.1682

cond.true.1670:                                   ; preds = %lor.lhs.false.1666, %land.lhs.true.1662, %cond.end.1651, %cond.end.1628, %cond.true.1597, %cond.end.1591, %cond.true.1563, %cond.end.1557, %land.lhs.true.1532
  %312 = load i64, i64* %to_nchars, align 8
  %mul1671 = mul i64 %312, 5
  %cmp1672 = icmp ule i64 %mul1671, 9223372036854775807
  br i1 %cmp1672, label %cond.true.1674, label %cond.false.1676

cond.true.1674:                                   ; preds = %cond.true.1670
  %313 = load i64, i64* %to_nchars, align 8
  %mul1675 = mul i64 %313, 5
  br label %cond.end.1680

cond.false.1676:                                  ; preds = %cond.true.1670
  %314 = load i64, i64* %to_nchars, align 8
  %mul1677 = mul i64 %314, 5
  %sub1678 = sub i64 %mul1677, -9223372036854775808
  %add1679 = add nsw i64 %sub1678, -9223372036854775808
  br label %cond.end.1680

cond.end.1680:                                    ; preds = %cond.false.1676, %cond.true.1674
  %cond1681 = phi i64 [ %mul1675, %cond.true.1674 ], [ %add1679, %cond.false.1676 ]
  store i64 %cond1681, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1682:                                  ; preds = %lor.lhs.false.1666
  %315 = load i64, i64* %to_nchars, align 8
  %mul1683 = mul i64 %315, 5
  %cmp1684 = icmp ule i64 %mul1683, 9223372036854775807
  br i1 %cmp1684, label %cond.true.1686, label %cond.false.1688

cond.true.1686:                                   ; preds = %cond.false.1682
  %316 = load i64, i64* %to_nchars, align 8
  %mul1687 = mul i64 %316, 5
  br label %cond.end.1692

cond.false.1688:                                  ; preds = %cond.false.1682
  %317 = load i64, i64* %to_nchars, align 8
  %mul1689 = mul i64 %317, 5
  %sub1690 = sub i64 %mul1689, -9223372036854775808
  %add1691 = add nsw i64 %sub1690, -9223372036854775808
  br label %cond.end.1692

cond.end.1692:                                    ; preds = %cond.false.1688, %cond.true.1686
  %cond1693 = phi i64 [ %mul1687, %cond.true.1686 ], [ %add1691, %cond.false.1688 ]
  store i64 %cond1693, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1694:                                  ; preds = %cond.true.1500
  %318 = load i64, i64* %to_nchars, align 8
  %add1695 = add nsw i64 0, %318
  %mul1696 = mul nsw i64 0, %add1695
  %sub1697 = sub nsw i64 %mul1696, 1
  %cmp1698 = icmp slt i64 %sub1697, 0
  br i1 %cmp1698, label %cond.true.1700, label %cond.false.1717

cond.true.1700:                                   ; preds = %cond.false.1694
  %319 = load i64, i64* %to_nchars, align 8
  %add1701 = add nsw i64 0, %319
  %mul1702 = mul nsw i64 0, %add1701
  %add1703 = add nsw i64 %mul1702, 0
  %neg1704 = xor i64 %add1703, -1
  %cmp1705 = icmp eq i64 %neg1704, -1
  %conv1706 = zext i1 %cmp1705 to i32
  %sub1707 = sub nsw i32 0, %conv1706
  %conv1708 = sext i32 %sub1707 to i64
  %320 = load i64, i64* %to_nchars, align 8
  %add1709 = add nsw i64 0, %320
  %mul1710 = mul nsw i64 0, %add1709
  %add1711 = add nsw i64 %mul1710, 1
  %shl1712 = shl i64 %add1711, 62
  %sub1713 = sub nsw i64 %shl1712, 1
  %mul1714 = mul nsw i64 %sub1713, 2
  %add1715 = add nsw i64 %mul1714, 1
  %sub1716 = sub nsw i64 %conv1708, %add1715
  br label %cond.end.1721

cond.false.1717:                                  ; preds = %cond.false.1694
  %321 = load i64, i64* %to_nchars, align 8
  %add1718 = add nsw i64 0, %321
  %mul1719 = mul nsw i64 0, %add1718
  %add1720 = add nsw i64 %mul1719, 0
  br label %cond.end.1721

cond.end.1721:                                    ; preds = %cond.false.1717, %cond.true.1700
  %cond1722 = phi i64 [ %sub1716, %cond.true.1700 ], [ %add1720, %cond.false.1717 ]
  %cmp1723 = icmp eq i64 %cond1722, 0
  br i1 %cmp1723, label %land.lhs.true.1725, label %lor.lhs.false.1728

land.lhs.true.1725:                               ; preds = %cond.end.1721
  %322 = load i64, i64* %to_nchars, align 8
  %cmp1726 = icmp slt i64 %322, 0
  br i1 %cmp1726, label %cond.true.1863, label %lor.lhs.false.1728

lor.lhs.false.1728:                               ; preds = %land.lhs.true.1725, %cond.end.1721
  br i1 false, label %cond.true.1729, label %cond.false.1789

cond.true.1729:                                   ; preds = %lor.lhs.false.1728
  %323 = load i64, i64* %to_nchars, align 8
  %cmp1730 = icmp slt i64 %323, 0
  br i1 %cmp1730, label %cond.true.1732, label %cond.false.1755

cond.true.1732:                                   ; preds = %cond.true.1729
  %324 = load i64, i64* %to_nchars, align 8
  %325 = load i64, i64* %to_nchars, align 8
  %add1733 = add nsw i64 0, %325
  %mul1734 = mul nsw i64 0, %add1733
  %sub1735 = sub nsw i64 %mul1734, 1
  %cmp1736 = icmp slt i64 %sub1735, 0
  br i1 %cmp1736, label %cond.true.1738, label %cond.false.1746

cond.true.1738:                                   ; preds = %cond.true.1732
  %326 = load i64, i64* %to_nchars, align 8
  %add1739 = add nsw i64 0, %326
  %mul1740 = mul nsw i64 0, %add1739
  %add1741 = add nsw i64 %mul1740, 1
  %shl1742 = shl i64 %add1741, 62
  %sub1743 = sub nsw i64 %shl1742, 1
  %mul1744 = mul nsw i64 %sub1743, 2
  %add1745 = add nsw i64 %mul1744, 1
  br label %cond.end.1750

cond.false.1746:                                  ; preds = %cond.true.1732
  %327 = load i64, i64* %to_nchars, align 8
  %add1747 = add nsw i64 0, %327
  %mul1748 = mul nsw i64 0, %add1747
  %sub1749 = sub nsw i64 %mul1748, 1
  br label %cond.end.1750

cond.end.1750:                                    ; preds = %cond.false.1746, %cond.true.1738
  %cond1751 = phi i64 [ %add1745, %cond.true.1738 ], [ %sub1749, %cond.false.1746 ]
  %div1752 = sdiv i64 %cond1751, 5
  %cmp1753 = icmp slt i64 %324, %div1752
  br i1 %cmp1753, label %cond.true.1863, label %lor.lhs.false.1849

cond.false.1755:                                  ; preds = %cond.true.1729
  br i1 false, label %cond.true.1756, label %cond.false.1757

cond.true.1756:                                   ; preds = %cond.false.1755
  br i1 false, label %cond.true.1863, label %lor.lhs.false.1849

cond.false.1757:                                  ; preds = %cond.false.1755
  %328 = load i64, i64* %to_nchars, align 8
  %add1758 = add nsw i64 0, %328
  %mul1759 = mul nsw i64 0, %add1758
  %sub1760 = sub nsw i64 %mul1759, 1
  %cmp1761 = icmp slt i64 %sub1760, 0
  br i1 %cmp1761, label %cond.true.1763, label %cond.false.1780

cond.true.1763:                                   ; preds = %cond.false.1757
  %329 = load i64, i64* %to_nchars, align 8
  %add1764 = add nsw i64 0, %329
  %mul1765 = mul nsw i64 0, %add1764
  %add1766 = add nsw i64 %mul1765, 0
  %neg1767 = xor i64 %add1766, -1
  %cmp1768 = icmp eq i64 %neg1767, -1
  %conv1769 = zext i1 %cmp1768 to i32
  %sub1770 = sub nsw i32 0, %conv1769
  %conv1771 = sext i32 %sub1770 to i64
  %330 = load i64, i64* %to_nchars, align 8
  %add1772 = add nsw i64 0, %330
  %mul1773 = mul nsw i64 0, %add1772
  %add1774 = add nsw i64 %mul1773, 1
  %shl1775 = shl i64 %add1774, 62
  %sub1776 = sub nsw i64 %shl1775, 1
  %mul1777 = mul nsw i64 %sub1776, 2
  %add1778 = add nsw i64 %mul1777, 1
  %sub1779 = sub nsw i64 %conv1771, %add1778
  br label %cond.end.1784

cond.false.1780:                                  ; preds = %cond.false.1757
  %331 = load i64, i64* %to_nchars, align 8
  %add1781 = add nsw i64 0, %331
  %mul1782 = mul nsw i64 0, %add1781
  %add1783 = add nsw i64 %mul1782, 0
  br label %cond.end.1784

cond.end.1784:                                    ; preds = %cond.false.1780, %cond.true.1763
  %cond1785 = phi i64 [ %sub1779, %cond.true.1763 ], [ %add1783, %cond.false.1780 ]
  %div1786 = sdiv i64 %cond1785, 5
  %332 = load i64, i64* %to_nchars, align 8
  %cmp1787 = icmp slt i64 %div1786, %332
  br i1 %cmp1787, label %cond.true.1863, label %lor.lhs.false.1849

cond.false.1789:                                  ; preds = %lor.lhs.false.1728
  br i1 false, label %cond.true.1790, label %cond.false.1791

cond.true.1790:                                   ; preds = %cond.false.1789
  br i1 false, label %cond.true.1863, label %lor.lhs.false.1849

cond.false.1791:                                  ; preds = %cond.false.1789
  %333 = load i64, i64* %to_nchars, align 8
  %cmp1792 = icmp slt i64 %333, 0
  br i1 %cmp1792, label %cond.true.1794, label %cond.false.1826

cond.true.1794:                                   ; preds = %cond.false.1791
  %334 = load i64, i64* %to_nchars, align 8
  %335 = load i64, i64* %to_nchars, align 8
  %add1795 = add nsw i64 0, %335
  %mul1796 = mul nsw i64 0, %add1795
  %sub1797 = sub nsw i64 %mul1796, 1
  %cmp1798 = icmp slt i64 %sub1797, 0
  br i1 %cmp1798, label %cond.true.1800, label %cond.false.1817

cond.true.1800:                                   ; preds = %cond.true.1794
  %336 = load i64, i64* %to_nchars, align 8
  %add1801 = add nsw i64 0, %336
  %mul1802 = mul nsw i64 0, %add1801
  %add1803 = add nsw i64 %mul1802, 0
  %neg1804 = xor i64 %add1803, -1
  %cmp1805 = icmp eq i64 %neg1804, -1
  %conv1806 = zext i1 %cmp1805 to i32
  %sub1807 = sub nsw i32 0, %conv1806
  %conv1808 = sext i32 %sub1807 to i64
  %337 = load i64, i64* %to_nchars, align 8
  %add1809 = add nsw i64 0, %337
  %mul1810 = mul nsw i64 0, %add1809
  %add1811 = add nsw i64 %mul1810, 1
  %shl1812 = shl i64 %add1811, 62
  %sub1813 = sub nsw i64 %shl1812, 1
  %mul1814 = mul nsw i64 %sub1813, 2
  %add1815 = add nsw i64 %mul1814, 1
  %sub1816 = sub nsw i64 %conv1808, %add1815
  br label %cond.end.1821

cond.false.1817:                                  ; preds = %cond.true.1794
  %338 = load i64, i64* %to_nchars, align 8
  %add1818 = add nsw i64 0, %338
  %mul1819 = mul nsw i64 0, %add1818
  %add1820 = add nsw i64 %mul1819, 0
  br label %cond.end.1821

cond.end.1821:                                    ; preds = %cond.false.1817, %cond.true.1800
  %cond1822 = phi i64 [ %sub1816, %cond.true.1800 ], [ %add1820, %cond.false.1817 ]
  %div1823 = sdiv i64 %cond1822, 5
  %cmp1824 = icmp slt i64 %334, %div1823
  br i1 %cmp1824, label %cond.true.1863, label %lor.lhs.false.1849

cond.false.1826:                                  ; preds = %cond.false.1791
  %339 = load i64, i64* %to_nchars, align 8
  %add1827 = add nsw i64 0, %339
  %mul1828 = mul nsw i64 0, %add1827
  %sub1829 = sub nsw i64 %mul1828, 1
  %cmp1830 = icmp slt i64 %sub1829, 0
  br i1 %cmp1830, label %cond.true.1832, label %cond.false.1840

cond.true.1832:                                   ; preds = %cond.false.1826
  %340 = load i64, i64* %to_nchars, align 8
  %add1833 = add nsw i64 0, %340
  %mul1834 = mul nsw i64 0, %add1833
  %add1835 = add nsw i64 %mul1834, 1
  %shl1836 = shl i64 %add1835, 62
  %sub1837 = sub nsw i64 %shl1836, 1
  %mul1838 = mul nsw i64 %sub1837, 2
  %add1839 = add nsw i64 %mul1838, 1
  br label %cond.end.1844

cond.false.1840:                                  ; preds = %cond.false.1826
  %341 = load i64, i64* %to_nchars, align 8
  %add1841 = add nsw i64 0, %341
  %mul1842 = mul nsw i64 0, %add1841
  %sub1843 = sub nsw i64 %mul1842, 1
  br label %cond.end.1844

cond.end.1844:                                    ; preds = %cond.false.1840, %cond.true.1832
  %cond1845 = phi i64 [ %add1839, %cond.true.1832 ], [ %sub1843, %cond.false.1840 ]
  %div1846 = sdiv i64 %cond1845, 5
  %342 = load i64, i64* %to_nchars, align 8
  %cmp1847 = icmp slt i64 %div1846, %342
  br i1 %cmp1847, label %cond.true.1863, label %lor.lhs.false.1849

lor.lhs.false.1849:                               ; preds = %cond.end.1844, %cond.end.1821, %cond.true.1790, %cond.end.1784, %cond.true.1756, %cond.end.1750
  %343 = load i64, i64* %to_nchars, align 8
  %mul1850 = mul nsw i64 %343, 5
  %mul1851 = mul nsw i64 0, %mul1850
  %sub1852 = sub nsw i64 %mul1851, 1
  %cmp1853 = icmp slt i64 %sub1852, 0
  br i1 %cmp1853, label %land.lhs.true.1855, label %lor.lhs.false.1859

land.lhs.true.1855:                               ; preds = %lor.lhs.false.1849
  %344 = load i64, i64* %to_nchars, align 8
  %mul1856 = mul nsw i64 %344, 5
  %cmp1857 = icmp slt i64 %mul1856, -9223372036854775808
  br i1 %cmp1857, label %cond.true.1863, label %lor.lhs.false.1859

lor.lhs.false.1859:                               ; preds = %land.lhs.true.1855, %lor.lhs.false.1849
  %345 = load i64, i64* %to_nchars, align 8
  %mul1860 = mul nsw i64 %345, 5
  %cmp1861 = icmp slt i64 9223372036854775807, %mul1860
  br i1 %cmp1861, label %cond.true.1863, label %cond.false.1875

cond.true.1863:                                   ; preds = %lor.lhs.false.1859, %land.lhs.true.1855, %cond.end.1844, %cond.end.1821, %cond.true.1790, %cond.end.1784, %cond.true.1756, %cond.end.1750, %land.lhs.true.1725
  %346 = load i64, i64* %to_nchars, align 8
  %mul1864 = mul i64 %346, 5
  %cmp1865 = icmp ule i64 %mul1864, 9223372036854775807
  br i1 %cmp1865, label %cond.true.1867, label %cond.false.1869

cond.true.1867:                                   ; preds = %cond.true.1863
  %347 = load i64, i64* %to_nchars, align 8
  %mul1868 = mul i64 %347, 5
  br label %cond.end.1873

cond.false.1869:                                  ; preds = %cond.true.1863
  %348 = load i64, i64* %to_nchars, align 8
  %mul1870 = mul i64 %348, 5
  %sub1871 = sub i64 %mul1870, -9223372036854775808
  %add1872 = add nsw i64 %sub1871, -9223372036854775808
  br label %cond.end.1873

cond.end.1873:                                    ; preds = %cond.false.1869, %cond.true.1867
  %cond1874 = phi i64 [ %mul1868, %cond.true.1867 ], [ %add1872, %cond.false.1869 ]
  store i64 %cond1874, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1875:                                  ; preds = %lor.lhs.false.1859
  %349 = load i64, i64* %to_nchars, align 8
  %mul1876 = mul i64 %349, 5
  %cmp1877 = icmp ule i64 %mul1876, 9223372036854775807
  br i1 %cmp1877, label %cond.true.1879, label %cond.false.1881

cond.true.1879:                                   ; preds = %cond.false.1875
  %350 = load i64, i64* %to_nchars, align 8
  %mul1880 = mul i64 %350, 5
  br label %cond.end.1885

cond.false.1881:                                  ; preds = %cond.false.1875
  %351 = load i64, i64* %to_nchars, align 8
  %mul1882 = mul i64 %351, 5
  %sub1883 = sub i64 %mul1882, -9223372036854775808
  %add1884 = add nsw i64 %sub1883, -9223372036854775808
  br label %cond.end.1885

cond.end.1885:                                    ; preds = %cond.false.1881, %cond.true.1879
  %cond1886 = phi i64 [ %mul1880, %cond.true.1879 ], [ %add1884, %cond.false.1881 ]
  store i64 %cond1886, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.1887:                                  ; preds = %cond.false.1499
  br i1 false, label %cond.true.1888, label %cond.false.2081

cond.true.1888:                                   ; preds = %cond.false.1887
  %352 = load i64, i64* %to_nchars, align 8
  %add1889 = add nsw i64 0, %352
  %mul1890 = mul nsw i64 0, %add1889
  %sub1891 = sub nsw i64 %mul1890, 1
  %cmp1892 = icmp slt i64 %sub1891, 0
  br i1 %cmp1892, label %cond.true.1894, label %cond.false.1911

cond.true.1894:                                   ; preds = %cond.true.1888
  %353 = load i64, i64* %to_nchars, align 8
  %add1895 = add nsw i64 0, %353
  %mul1896 = mul nsw i64 0, %add1895
  %add1897 = add nsw i64 %mul1896, 0
  %neg1898 = xor i64 %add1897, -1
  %cmp1899 = icmp eq i64 %neg1898, -1
  %conv1900 = zext i1 %cmp1899 to i32
  %sub1901 = sub nsw i32 0, %conv1900
  %conv1902 = sext i32 %sub1901 to i64
  %354 = load i64, i64* %to_nchars, align 8
  %add1903 = add nsw i64 0, %354
  %mul1904 = mul nsw i64 0, %add1903
  %add1905 = add nsw i64 %mul1904, 1
  %shl1906 = shl i64 %add1905, 62
  %sub1907 = sub nsw i64 %shl1906, 1
  %mul1908 = mul nsw i64 %sub1907, 2
  %add1909 = add nsw i64 %mul1908, 1
  %sub1910 = sub nsw i64 %conv1902, %add1909
  br label %cond.end.1915

cond.false.1911:                                  ; preds = %cond.true.1888
  %355 = load i64, i64* %to_nchars, align 8
  %add1912 = add nsw i64 0, %355
  %mul1913 = mul nsw i64 0, %add1912
  %add1914 = add nsw i64 %mul1913, 0
  br label %cond.end.1915

cond.end.1915:                                    ; preds = %cond.false.1911, %cond.true.1894
  %cond1916 = phi i64 [ %sub1910, %cond.true.1894 ], [ %add1914, %cond.false.1911 ]
  %cmp1917 = icmp eq i64 %cond1916, 0
  br i1 %cmp1917, label %land.lhs.true.1919, label %lor.lhs.false.1922

land.lhs.true.1919:                               ; preds = %cond.end.1915
  %356 = load i64, i64* %to_nchars, align 8
  %cmp1920 = icmp slt i64 %356, 0
  br i1 %cmp1920, label %cond.true.2057, label %lor.lhs.false.1922

lor.lhs.false.1922:                               ; preds = %land.lhs.true.1919, %cond.end.1915
  br i1 false, label %cond.true.1923, label %cond.false.1983

cond.true.1923:                                   ; preds = %lor.lhs.false.1922
  %357 = load i64, i64* %to_nchars, align 8
  %cmp1924 = icmp slt i64 %357, 0
  br i1 %cmp1924, label %cond.true.1926, label %cond.false.1949

cond.true.1926:                                   ; preds = %cond.true.1923
  %358 = load i64, i64* %to_nchars, align 8
  %359 = load i64, i64* %to_nchars, align 8
  %add1927 = add nsw i64 0, %359
  %mul1928 = mul nsw i64 0, %add1927
  %sub1929 = sub nsw i64 %mul1928, 1
  %cmp1930 = icmp slt i64 %sub1929, 0
  br i1 %cmp1930, label %cond.true.1932, label %cond.false.1940

cond.true.1932:                                   ; preds = %cond.true.1926
  %360 = load i64, i64* %to_nchars, align 8
  %add1933 = add nsw i64 0, %360
  %mul1934 = mul nsw i64 0, %add1933
  %add1935 = add nsw i64 %mul1934, 1
  %shl1936 = shl i64 %add1935, 62
  %sub1937 = sub nsw i64 %shl1936, 1
  %mul1938 = mul nsw i64 %sub1937, 2
  %add1939 = add nsw i64 %mul1938, 1
  br label %cond.end.1944

cond.false.1940:                                  ; preds = %cond.true.1926
  %361 = load i64, i64* %to_nchars, align 8
  %add1941 = add nsw i64 0, %361
  %mul1942 = mul nsw i64 0, %add1941
  %sub1943 = sub nsw i64 %mul1942, 1
  br label %cond.end.1944

cond.end.1944:                                    ; preds = %cond.false.1940, %cond.true.1932
  %cond1945 = phi i64 [ %add1939, %cond.true.1932 ], [ %sub1943, %cond.false.1940 ]
  %div1946 = sdiv i64 %cond1945, 5
  %cmp1947 = icmp slt i64 %358, %div1946
  br i1 %cmp1947, label %cond.true.2057, label %lor.lhs.false.2043

cond.false.1949:                                  ; preds = %cond.true.1923
  br i1 false, label %cond.true.1950, label %cond.false.1951

cond.true.1950:                                   ; preds = %cond.false.1949
  br i1 false, label %cond.true.2057, label %lor.lhs.false.2043

cond.false.1951:                                  ; preds = %cond.false.1949
  %362 = load i64, i64* %to_nchars, align 8
  %add1952 = add nsw i64 0, %362
  %mul1953 = mul nsw i64 0, %add1952
  %sub1954 = sub nsw i64 %mul1953, 1
  %cmp1955 = icmp slt i64 %sub1954, 0
  br i1 %cmp1955, label %cond.true.1957, label %cond.false.1974

cond.true.1957:                                   ; preds = %cond.false.1951
  %363 = load i64, i64* %to_nchars, align 8
  %add1958 = add nsw i64 0, %363
  %mul1959 = mul nsw i64 0, %add1958
  %add1960 = add nsw i64 %mul1959, 0
  %neg1961 = xor i64 %add1960, -1
  %cmp1962 = icmp eq i64 %neg1961, -1
  %conv1963 = zext i1 %cmp1962 to i32
  %sub1964 = sub nsw i32 0, %conv1963
  %conv1965 = sext i32 %sub1964 to i64
  %364 = load i64, i64* %to_nchars, align 8
  %add1966 = add nsw i64 0, %364
  %mul1967 = mul nsw i64 0, %add1966
  %add1968 = add nsw i64 %mul1967, 1
  %shl1969 = shl i64 %add1968, 62
  %sub1970 = sub nsw i64 %shl1969, 1
  %mul1971 = mul nsw i64 %sub1970, 2
  %add1972 = add nsw i64 %mul1971, 1
  %sub1973 = sub nsw i64 %conv1965, %add1972
  br label %cond.end.1978

cond.false.1974:                                  ; preds = %cond.false.1951
  %365 = load i64, i64* %to_nchars, align 8
  %add1975 = add nsw i64 0, %365
  %mul1976 = mul nsw i64 0, %add1975
  %add1977 = add nsw i64 %mul1976, 0
  br label %cond.end.1978

cond.end.1978:                                    ; preds = %cond.false.1974, %cond.true.1957
  %cond1979 = phi i64 [ %sub1973, %cond.true.1957 ], [ %add1977, %cond.false.1974 ]
  %div1980 = sdiv i64 %cond1979, 5
  %366 = load i64, i64* %to_nchars, align 8
  %cmp1981 = icmp slt i64 %div1980, %366
  br i1 %cmp1981, label %cond.true.2057, label %lor.lhs.false.2043

cond.false.1983:                                  ; preds = %lor.lhs.false.1922
  br i1 false, label %cond.true.1984, label %cond.false.1985

cond.true.1984:                                   ; preds = %cond.false.1983
  br i1 false, label %cond.true.2057, label %lor.lhs.false.2043

cond.false.1985:                                  ; preds = %cond.false.1983
  %367 = load i64, i64* %to_nchars, align 8
  %cmp1986 = icmp slt i64 %367, 0
  br i1 %cmp1986, label %cond.true.1988, label %cond.false.2020

cond.true.1988:                                   ; preds = %cond.false.1985
  %368 = load i64, i64* %to_nchars, align 8
  %369 = load i64, i64* %to_nchars, align 8
  %add1989 = add nsw i64 0, %369
  %mul1990 = mul nsw i64 0, %add1989
  %sub1991 = sub nsw i64 %mul1990, 1
  %cmp1992 = icmp slt i64 %sub1991, 0
  br i1 %cmp1992, label %cond.true.1994, label %cond.false.2011

cond.true.1994:                                   ; preds = %cond.true.1988
  %370 = load i64, i64* %to_nchars, align 8
  %add1995 = add nsw i64 0, %370
  %mul1996 = mul nsw i64 0, %add1995
  %add1997 = add nsw i64 %mul1996, 0
  %neg1998 = xor i64 %add1997, -1
  %cmp1999 = icmp eq i64 %neg1998, -1
  %conv2000 = zext i1 %cmp1999 to i32
  %sub2001 = sub nsw i32 0, %conv2000
  %conv2002 = sext i32 %sub2001 to i64
  %371 = load i64, i64* %to_nchars, align 8
  %add2003 = add nsw i64 0, %371
  %mul2004 = mul nsw i64 0, %add2003
  %add2005 = add nsw i64 %mul2004, 1
  %shl2006 = shl i64 %add2005, 62
  %sub2007 = sub nsw i64 %shl2006, 1
  %mul2008 = mul nsw i64 %sub2007, 2
  %add2009 = add nsw i64 %mul2008, 1
  %sub2010 = sub nsw i64 %conv2002, %add2009
  br label %cond.end.2015

cond.false.2011:                                  ; preds = %cond.true.1988
  %372 = load i64, i64* %to_nchars, align 8
  %add2012 = add nsw i64 0, %372
  %mul2013 = mul nsw i64 0, %add2012
  %add2014 = add nsw i64 %mul2013, 0
  br label %cond.end.2015

cond.end.2015:                                    ; preds = %cond.false.2011, %cond.true.1994
  %cond2016 = phi i64 [ %sub2010, %cond.true.1994 ], [ %add2014, %cond.false.2011 ]
  %div2017 = sdiv i64 %cond2016, 5
  %cmp2018 = icmp slt i64 %368, %div2017
  br i1 %cmp2018, label %cond.true.2057, label %lor.lhs.false.2043

cond.false.2020:                                  ; preds = %cond.false.1985
  %373 = load i64, i64* %to_nchars, align 8
  %add2021 = add nsw i64 0, %373
  %mul2022 = mul nsw i64 0, %add2021
  %sub2023 = sub nsw i64 %mul2022, 1
  %cmp2024 = icmp slt i64 %sub2023, 0
  br i1 %cmp2024, label %cond.true.2026, label %cond.false.2034

cond.true.2026:                                   ; preds = %cond.false.2020
  %374 = load i64, i64* %to_nchars, align 8
  %add2027 = add nsw i64 0, %374
  %mul2028 = mul nsw i64 0, %add2027
  %add2029 = add nsw i64 %mul2028, 1
  %shl2030 = shl i64 %add2029, 62
  %sub2031 = sub nsw i64 %shl2030, 1
  %mul2032 = mul nsw i64 %sub2031, 2
  %add2033 = add nsw i64 %mul2032, 1
  br label %cond.end.2038

cond.false.2034:                                  ; preds = %cond.false.2020
  %375 = load i64, i64* %to_nchars, align 8
  %add2035 = add nsw i64 0, %375
  %mul2036 = mul nsw i64 0, %add2035
  %sub2037 = sub nsw i64 %mul2036, 1
  br label %cond.end.2038

cond.end.2038:                                    ; preds = %cond.false.2034, %cond.true.2026
  %cond2039 = phi i64 [ %add2033, %cond.true.2026 ], [ %sub2037, %cond.false.2034 ]
  %div2040 = sdiv i64 %cond2039, 5
  %376 = load i64, i64* %to_nchars, align 8
  %cmp2041 = icmp slt i64 %div2040, %376
  br i1 %cmp2041, label %cond.true.2057, label %lor.lhs.false.2043

lor.lhs.false.2043:                               ; preds = %cond.end.2038, %cond.end.2015, %cond.true.1984, %cond.end.1978, %cond.true.1950, %cond.end.1944
  %377 = load i64, i64* %to_nchars, align 8
  %mul2044 = mul nsw i64 %377, 5
  %mul2045 = mul nsw i64 0, %mul2044
  %sub2046 = sub nsw i64 %mul2045, 1
  %cmp2047 = icmp slt i64 %sub2046, 0
  br i1 %cmp2047, label %land.lhs.true.2049, label %lor.lhs.false.2053

land.lhs.true.2049:                               ; preds = %lor.lhs.false.2043
  %378 = load i64, i64* %to_nchars, align 8
  %mul2050 = mul nsw i64 %378, 5
  %cmp2051 = icmp slt i64 %mul2050, -9223372036854775808
  br i1 %cmp2051, label %cond.true.2057, label %lor.lhs.false.2053

lor.lhs.false.2053:                               ; preds = %land.lhs.true.2049, %lor.lhs.false.2043
  %379 = load i64, i64* %to_nchars, align 8
  %mul2054 = mul nsw i64 %379, 5
  %cmp2055 = icmp slt i64 9223372036854775807, %mul2054
  br i1 %cmp2055, label %cond.true.2057, label %cond.false.2069

cond.true.2057:                                   ; preds = %lor.lhs.false.2053, %land.lhs.true.2049, %cond.end.2038, %cond.end.2015, %cond.true.1984, %cond.end.1978, %cond.true.1950, %cond.end.1944, %land.lhs.true.1919
  %380 = load i64, i64* %to_nchars, align 8
  %mul2058 = mul i64 %380, 5
  %cmp2059 = icmp ule i64 %mul2058, 9223372036854775807
  br i1 %cmp2059, label %cond.true.2061, label %cond.false.2063

cond.true.2061:                                   ; preds = %cond.true.2057
  %381 = load i64, i64* %to_nchars, align 8
  %mul2062 = mul i64 %381, 5
  br label %cond.end.2067

cond.false.2063:                                  ; preds = %cond.true.2057
  %382 = load i64, i64* %to_nchars, align 8
  %mul2064 = mul i64 %382, 5
  %sub2065 = sub i64 %mul2064, -9223372036854775808
  %add2066 = add nsw i64 %sub2065, -9223372036854775808
  br label %cond.end.2067

cond.end.2067:                                    ; preds = %cond.false.2063, %cond.true.2061
  %cond2068 = phi i64 [ %mul2062, %cond.true.2061 ], [ %add2066, %cond.false.2063 ]
  store i64 %cond2068, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.2069:                                  ; preds = %lor.lhs.false.2053
  %383 = load i64, i64* %to_nchars, align 8
  %mul2070 = mul i64 %383, 5
  %cmp2071 = icmp ule i64 %mul2070, 9223372036854775807
  br i1 %cmp2071, label %cond.true.2073, label %cond.false.2075

cond.true.2073:                                   ; preds = %cond.false.2069
  %384 = load i64, i64* %to_nchars, align 8
  %mul2074 = mul i64 %384, 5
  br label %cond.end.2079

cond.false.2075:                                  ; preds = %cond.false.2069
  %385 = load i64, i64* %to_nchars, align 8
  %mul2076 = mul i64 %385, 5
  %sub2077 = sub i64 %mul2076, -9223372036854775808
  %add2078 = add nsw i64 %sub2077, -9223372036854775808
  br label %cond.end.2079

cond.end.2079:                                    ; preds = %cond.false.2075, %cond.true.2073
  %cond2080 = phi i64 [ %mul2074, %cond.true.2073 ], [ %add2078, %cond.false.2075 ]
  store i64 %cond2080, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

cond.false.2081:                                  ; preds = %cond.false.1887
  %386 = load i64, i64* %to_nchars, align 8
  %add2082 = add nsw i64 0, %386
  %mul2083 = mul nsw i64 0, %add2082
  %sub2084 = sub nsw i64 %mul2083, 1
  %cmp2085 = icmp slt i64 %sub2084, 0
  br i1 %cmp2085, label %cond.true.2087, label %cond.false.2104

cond.true.2087:                                   ; preds = %cond.false.2081
  %387 = load i64, i64* %to_nchars, align 8
  %add2088 = add nsw i64 0, %387
  %mul2089 = mul nsw i64 0, %add2088
  %add2090 = add nsw i64 %mul2089, 0
  %neg2091 = xor i64 %add2090, -1
  %cmp2092 = icmp eq i64 %neg2091, -1
  %conv2093 = zext i1 %cmp2092 to i32
  %sub2094 = sub nsw i32 0, %conv2093
  %conv2095 = sext i32 %sub2094 to i64
  %388 = load i64, i64* %to_nchars, align 8
  %add2096 = add nsw i64 0, %388
  %mul2097 = mul nsw i64 0, %add2096
  %add2098 = add nsw i64 %mul2097, 1
  %shl2099 = shl i64 %add2098, 62
  %sub2100 = sub nsw i64 %shl2099, 1
  %mul2101 = mul nsw i64 %sub2100, 2
  %add2102 = add nsw i64 %mul2101, 1
  %sub2103 = sub nsw i64 %conv2095, %add2102
  br label %cond.end.2108

cond.false.2104:                                  ; preds = %cond.false.2081
  %389 = load i64, i64* %to_nchars, align 8
  %add2105 = add nsw i64 0, %389
  %mul2106 = mul nsw i64 0, %add2105
  %add2107 = add nsw i64 %mul2106, 0
  br label %cond.end.2108

cond.end.2108:                                    ; preds = %cond.false.2104, %cond.true.2087
  %cond2109 = phi i64 [ %sub2103, %cond.true.2087 ], [ %add2107, %cond.false.2104 ]
  %cmp2110 = icmp eq i64 %cond2109, 0
  br i1 %cmp2110, label %land.lhs.true.2112, label %lor.lhs.false.2115

land.lhs.true.2112:                               ; preds = %cond.end.2108
  %390 = load i64, i64* %to_nchars, align 8
  %cmp2113 = icmp slt i64 %390, 0
  br i1 %cmp2113, label %cond.true.2250, label %lor.lhs.false.2115

lor.lhs.false.2115:                               ; preds = %land.lhs.true.2112, %cond.end.2108
  br i1 false, label %cond.true.2116, label %cond.false.2176

cond.true.2116:                                   ; preds = %lor.lhs.false.2115
  %391 = load i64, i64* %to_nchars, align 8
  %cmp2117 = icmp slt i64 %391, 0
  br i1 %cmp2117, label %cond.true.2119, label %cond.false.2142

cond.true.2119:                                   ; preds = %cond.true.2116
  %392 = load i64, i64* %to_nchars, align 8
  %393 = load i64, i64* %to_nchars, align 8
  %add2120 = add nsw i64 0, %393
  %mul2121 = mul nsw i64 0, %add2120
  %sub2122 = sub nsw i64 %mul2121, 1
  %cmp2123 = icmp slt i64 %sub2122, 0
  br i1 %cmp2123, label %cond.true.2125, label %cond.false.2133

cond.true.2125:                                   ; preds = %cond.true.2119
  %394 = load i64, i64* %to_nchars, align 8
  %add2126 = add nsw i64 0, %394
  %mul2127 = mul nsw i64 0, %add2126
  %add2128 = add nsw i64 %mul2127, 1
  %shl2129 = shl i64 %add2128, 62
  %sub2130 = sub nsw i64 %shl2129, 1
  %mul2131 = mul nsw i64 %sub2130, 2
  %add2132 = add nsw i64 %mul2131, 1
  br label %cond.end.2137

cond.false.2133:                                  ; preds = %cond.true.2119
  %395 = load i64, i64* %to_nchars, align 8
  %add2134 = add nsw i64 0, %395
  %mul2135 = mul nsw i64 0, %add2134
  %sub2136 = sub nsw i64 %mul2135, 1
  br label %cond.end.2137

cond.end.2137:                                    ; preds = %cond.false.2133, %cond.true.2125
  %cond2138 = phi i64 [ %add2132, %cond.true.2125 ], [ %sub2136, %cond.false.2133 ]
  %div2139 = sdiv i64 %cond2138, 5
  %cmp2140 = icmp slt i64 %392, %div2139
  br i1 %cmp2140, label %cond.true.2250, label %lor.lhs.false.2236

cond.false.2142:                                  ; preds = %cond.true.2116
  br i1 false, label %cond.true.2143, label %cond.false.2144

cond.true.2143:                                   ; preds = %cond.false.2142
  br i1 false, label %cond.true.2250, label %lor.lhs.false.2236

cond.false.2144:                                  ; preds = %cond.false.2142
  %396 = load i64, i64* %to_nchars, align 8
  %add2145 = add nsw i64 0, %396
  %mul2146 = mul nsw i64 0, %add2145
  %sub2147 = sub nsw i64 %mul2146, 1
  %cmp2148 = icmp slt i64 %sub2147, 0
  br i1 %cmp2148, label %cond.true.2150, label %cond.false.2167

cond.true.2150:                                   ; preds = %cond.false.2144
  %397 = load i64, i64* %to_nchars, align 8
  %add2151 = add nsw i64 0, %397
  %mul2152 = mul nsw i64 0, %add2151
  %add2153 = add nsw i64 %mul2152, 0
  %neg2154 = xor i64 %add2153, -1
  %cmp2155 = icmp eq i64 %neg2154, -1
  %conv2156 = zext i1 %cmp2155 to i32
  %sub2157 = sub nsw i32 0, %conv2156
  %conv2158 = sext i32 %sub2157 to i64
  %398 = load i64, i64* %to_nchars, align 8
  %add2159 = add nsw i64 0, %398
  %mul2160 = mul nsw i64 0, %add2159
  %add2161 = add nsw i64 %mul2160, 1
  %shl2162 = shl i64 %add2161, 62
  %sub2163 = sub nsw i64 %shl2162, 1
  %mul2164 = mul nsw i64 %sub2163, 2
  %add2165 = add nsw i64 %mul2164, 1
  %sub2166 = sub nsw i64 %conv2158, %add2165
  br label %cond.end.2171

cond.false.2167:                                  ; preds = %cond.false.2144
  %399 = load i64, i64* %to_nchars, align 8
  %add2168 = add nsw i64 0, %399
  %mul2169 = mul nsw i64 0, %add2168
  %add2170 = add nsw i64 %mul2169, 0
  br label %cond.end.2171

cond.end.2171:                                    ; preds = %cond.false.2167, %cond.true.2150
  %cond2172 = phi i64 [ %sub2166, %cond.true.2150 ], [ %add2170, %cond.false.2167 ]
  %div2173 = sdiv i64 %cond2172, 5
  %400 = load i64, i64* %to_nchars, align 8
  %cmp2174 = icmp slt i64 %div2173, %400
  br i1 %cmp2174, label %cond.true.2250, label %lor.lhs.false.2236

cond.false.2176:                                  ; preds = %lor.lhs.false.2115
  br i1 false, label %cond.true.2177, label %cond.false.2178

cond.true.2177:                                   ; preds = %cond.false.2176
  br i1 false, label %cond.true.2250, label %lor.lhs.false.2236

cond.false.2178:                                  ; preds = %cond.false.2176
  %401 = load i64, i64* %to_nchars, align 8
  %cmp2179 = icmp slt i64 %401, 0
  br i1 %cmp2179, label %cond.true.2181, label %cond.false.2213

cond.true.2181:                                   ; preds = %cond.false.2178
  %402 = load i64, i64* %to_nchars, align 8
  %403 = load i64, i64* %to_nchars, align 8
  %add2182 = add nsw i64 0, %403
  %mul2183 = mul nsw i64 0, %add2182
  %sub2184 = sub nsw i64 %mul2183, 1
  %cmp2185 = icmp slt i64 %sub2184, 0
  br i1 %cmp2185, label %cond.true.2187, label %cond.false.2204

cond.true.2187:                                   ; preds = %cond.true.2181
  %404 = load i64, i64* %to_nchars, align 8
  %add2188 = add nsw i64 0, %404
  %mul2189 = mul nsw i64 0, %add2188
  %add2190 = add nsw i64 %mul2189, 0
  %neg2191 = xor i64 %add2190, -1
  %cmp2192 = icmp eq i64 %neg2191, -1
  %conv2193 = zext i1 %cmp2192 to i32
  %sub2194 = sub nsw i32 0, %conv2193
  %conv2195 = sext i32 %sub2194 to i64
  %405 = load i64, i64* %to_nchars, align 8
  %add2196 = add nsw i64 0, %405
  %mul2197 = mul nsw i64 0, %add2196
  %add2198 = add nsw i64 %mul2197, 1
  %shl2199 = shl i64 %add2198, 62
  %sub2200 = sub nsw i64 %shl2199, 1
  %mul2201 = mul nsw i64 %sub2200, 2
  %add2202 = add nsw i64 %mul2201, 1
  %sub2203 = sub nsw i64 %conv2195, %add2202
  br label %cond.end.2208

cond.false.2204:                                  ; preds = %cond.true.2181
  %406 = load i64, i64* %to_nchars, align 8
  %add2205 = add nsw i64 0, %406
  %mul2206 = mul nsw i64 0, %add2205
  %add2207 = add nsw i64 %mul2206, 0
  br label %cond.end.2208

cond.end.2208:                                    ; preds = %cond.false.2204, %cond.true.2187
  %cond2209 = phi i64 [ %sub2203, %cond.true.2187 ], [ %add2207, %cond.false.2204 ]
  %div2210 = sdiv i64 %cond2209, 5
  %cmp2211 = icmp slt i64 %402, %div2210
  br i1 %cmp2211, label %cond.true.2250, label %lor.lhs.false.2236

cond.false.2213:                                  ; preds = %cond.false.2178
  %407 = load i64, i64* %to_nchars, align 8
  %add2214 = add nsw i64 0, %407
  %mul2215 = mul nsw i64 0, %add2214
  %sub2216 = sub nsw i64 %mul2215, 1
  %cmp2217 = icmp slt i64 %sub2216, 0
  br i1 %cmp2217, label %cond.true.2219, label %cond.false.2227

cond.true.2219:                                   ; preds = %cond.false.2213
  %408 = load i64, i64* %to_nchars, align 8
  %add2220 = add nsw i64 0, %408
  %mul2221 = mul nsw i64 0, %add2220
  %add2222 = add nsw i64 %mul2221, 1
  %shl2223 = shl i64 %add2222, 62
  %sub2224 = sub nsw i64 %shl2223, 1
  %mul2225 = mul nsw i64 %sub2224, 2
  %add2226 = add nsw i64 %mul2225, 1
  br label %cond.end.2231

cond.false.2227:                                  ; preds = %cond.false.2213
  %409 = load i64, i64* %to_nchars, align 8
  %add2228 = add nsw i64 0, %409
  %mul2229 = mul nsw i64 0, %add2228
  %sub2230 = sub nsw i64 %mul2229, 1
  br label %cond.end.2231

cond.end.2231:                                    ; preds = %cond.false.2227, %cond.true.2219
  %cond2232 = phi i64 [ %add2226, %cond.true.2219 ], [ %sub2230, %cond.false.2227 ]
  %div2233 = sdiv i64 %cond2232, 5
  %410 = load i64, i64* %to_nchars, align 8
  %cmp2234 = icmp slt i64 %div2233, %410
  br i1 %cmp2234, label %cond.true.2250, label %lor.lhs.false.2236

lor.lhs.false.2236:                               ; preds = %cond.end.2231, %cond.end.2208, %cond.true.2177, %cond.end.2171, %cond.true.2143, %cond.end.2137
  %411 = load i64, i64* %to_nchars, align 8
  %mul2237 = mul nsw i64 %411, 5
  %mul2238 = mul nsw i64 0, %mul2237
  %sub2239 = sub nsw i64 %mul2238, 1
  %cmp2240 = icmp slt i64 %sub2239, 0
  br i1 %cmp2240, label %land.lhs.true.2242, label %lor.lhs.false.2246

land.lhs.true.2242:                               ; preds = %lor.lhs.false.2236
  %412 = load i64, i64* %to_nchars, align 8
  %mul2243 = mul nsw i64 %412, 5
  %cmp2244 = icmp slt i64 %mul2243, -9223372036854775808
  br i1 %cmp2244, label %cond.true.2250, label %lor.lhs.false.2246

lor.lhs.false.2246:                               ; preds = %land.lhs.true.2242, %lor.lhs.false.2236
  %413 = load i64, i64* %to_nchars, align 8
  %mul2247 = mul nsw i64 %413, 5
  %cmp2248 = icmp slt i64 9223372036854775807, %mul2247
  br i1 %cmp2248, label %cond.true.2250, label %cond.false.2262

cond.true.2250:                                   ; preds = %lor.lhs.false.2246, %land.lhs.true.2242, %cond.end.2231, %cond.end.2208, %cond.true.2177, %cond.end.2171, %cond.true.2143, %cond.end.2137, %land.lhs.true.2112
  %414 = load i64, i64* %to_nchars, align 8
  %mul2251 = mul i64 %414, 5
  %cmp2252 = icmp ule i64 %mul2251, 9223372036854775807
  br i1 %cmp2252, label %cond.true.2254, label %cond.false.2256

cond.true.2254:                                   ; preds = %cond.true.2250
  %415 = load i64, i64* %to_nchars, align 8
  %mul2255 = mul i64 %415, 5
  br label %cond.end.2260

cond.false.2256:                                  ; preds = %cond.true.2250
  %416 = load i64, i64* %to_nchars, align 8
  %mul2257 = mul i64 %416, 5
  %sub2258 = sub i64 %mul2257, -9223372036854775808
  %add2259 = add nsw i64 %sub2258, -9223372036854775808
  br label %cond.end.2260

cond.end.2260:                                    ; preds = %cond.false.2256, %cond.true.2254
  %cond2261 = phi i64 [ %mul2255, %cond.true.2254 ], [ %add2259, %cond.false.2256 ]
  store i64 %cond2261, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %lor.lhs.false.2274

cond.false.2262:                                  ; preds = %lor.lhs.false.2246
  %417 = load i64, i64* %to_nchars, align 8
  %mul2263 = mul i64 %417, 5
  %cmp2264 = icmp ule i64 %mul2263, 9223372036854775807
  br i1 %cmp2264, label %cond.true.2266, label %cond.false.2268

cond.true.2266:                                   ; preds = %cond.false.2262
  %418 = load i64, i64* %to_nchars, align 8
  %mul2267 = mul i64 %418, 5
  br label %cond.end.2272

cond.false.2268:                                  ; preds = %cond.false.2262
  %419 = load i64, i64* %to_nchars, align 8
  %mul2269 = mul i64 %419, 5
  %sub2270 = sub i64 %mul2269, -9223372036854775808
  %add2271 = add nsw i64 %sub2270, -9223372036854775808
  br label %cond.end.2272

cond.end.2272:                                    ; preds = %cond.false.2268, %cond.true.2266
  %cond2273 = phi i64 [ %mul2267, %cond.true.2266 ], [ %add2271, %cond.false.2268 ]
  store i64 %cond2273, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %lor.lhs.false.2274

lor.lhs.false.2274:                               ; preds = %cond.end.2272, %cond.end.2260, %cond.end.2079, %cond.end.2067, %cond.end.1885, %cond.end.1873, %cond.end.1692, %cond.end.1680, %cond.end.1496, %cond.end.1480, %cond.end.1295, %cond.end.1279, %cond.end.1067, %cond.end.1044, %cond.end.852, %cond.end.829, %cond.end.582, %cond.end.559, %cond.end.367, %cond.end.344
  br i1 false, label %cond.true.2275, label %cond.false.2957

cond.true.2275:                                   ; preds = %lor.lhs.false.2274
  br i1 false, label %cond.true.2276, label %cond.false.2659

cond.true.2276:                                   ; preds = %cond.true.2275
  %420 = load i64, i64* %dst_size, align 8
  %conv2277 = trunc i64 %420 to i8
  %conv2278 = sext i8 %conv2277 to i32
  %mul2279 = mul nsw i32 0, %conv2278
  %421 = load i32*, i32** %buf_end, align 8
  %422 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2280 = ptrtoint i32* %421 to i64
  %sub.ptr.rhs.cast2281 = ptrtoint i32* %422 to i64
  %sub.ptr.sub2282 = sub i64 %sub.ptr.lhs.cast2280, %sub.ptr.rhs.cast2281
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub2282, 4
  %conv2283 = trunc i64 %sub.ptr.div to i8
  %conv2284 = sext i8 %conv2283 to i32
  %add2285 = add nsw i32 %mul2279, %conv2284
  %mul2286 = mul nsw i32 0, %add2285
  %sub2287 = sub nsw i32 %mul2286, 1
  %cmp2288 = icmp slt i32 %sub2287, 0
  br i1 %cmp2288, label %cond.true.2290, label %cond.false.2324

cond.true.2290:                                   ; preds = %cond.true.2276
  %423 = load i64, i64* %dst_size, align 8
  %conv2291 = trunc i64 %423 to i8
  %conv2292 = sext i8 %conv2291 to i32
  %mul2293 = mul nsw i32 0, %conv2292
  %424 = load i32*, i32** %buf_end, align 8
  %425 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2294 = ptrtoint i32* %424 to i64
  %sub.ptr.rhs.cast2295 = ptrtoint i32* %425 to i64
  %sub.ptr.sub2296 = sub i64 %sub.ptr.lhs.cast2294, %sub.ptr.rhs.cast2295
  %sub.ptr.div2297 = sdiv exact i64 %sub.ptr.sub2296, 4
  %conv2298 = trunc i64 %sub.ptr.div2297 to i8
  %conv2299 = sext i8 %conv2298 to i32
  %add2300 = add nsw i32 %mul2293, %conv2299
  %mul2301 = mul nsw i32 0, %add2300
  %add2302 = add nsw i32 %mul2301, 0
  %neg2303 = xor i32 %add2302, -1
  %cmp2304 = icmp eq i32 %neg2303, -1
  %conv2305 = zext i1 %cmp2304 to i32
  %sub2306 = sub nsw i32 0, %conv2305
  %426 = load i64, i64* %dst_size, align 8
  %conv2307 = trunc i64 %426 to i8
  %conv2308 = sext i8 %conv2307 to i32
  %mul2309 = mul nsw i32 0, %conv2308
  %427 = load i32*, i32** %buf_end, align 8
  %428 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2310 = ptrtoint i32* %427 to i64
  %sub.ptr.rhs.cast2311 = ptrtoint i32* %428 to i64
  %sub.ptr.sub2312 = sub i64 %sub.ptr.lhs.cast2310, %sub.ptr.rhs.cast2311
  %sub.ptr.div2313 = sdiv exact i64 %sub.ptr.sub2312, 4
  %conv2314 = trunc i64 %sub.ptr.div2313 to i8
  %conv2315 = sext i8 %conv2314 to i32
  %add2316 = add nsw i32 %mul2309, %conv2315
  %mul2317 = mul nsw i32 0, %add2316
  %add2318 = add nsw i32 %mul2317, 1
  %shl2319 = shl i32 %add2318, 30
  %sub2320 = sub nsw i32 %shl2319, 1
  %mul2321 = mul nsw i32 %sub2320, 2
  %add2322 = add nsw i32 %mul2321, 1
  %sub2323 = sub nsw i32 %sub2306, %add2322
  br label %cond.end.2337

cond.false.2324:                                  ; preds = %cond.true.2276
  %429 = load i64, i64* %dst_size, align 8
  %conv2325 = trunc i64 %429 to i8
  %conv2326 = sext i8 %conv2325 to i32
  %mul2327 = mul nsw i32 0, %conv2326
  %430 = load i32*, i32** %buf_end, align 8
  %431 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2328 = ptrtoint i32* %430 to i64
  %sub.ptr.rhs.cast2329 = ptrtoint i32* %431 to i64
  %sub.ptr.sub2330 = sub i64 %sub.ptr.lhs.cast2328, %sub.ptr.rhs.cast2329
  %sub.ptr.div2331 = sdiv exact i64 %sub.ptr.sub2330, 4
  %conv2332 = trunc i64 %sub.ptr.div2331 to i8
  %conv2333 = sext i8 %conv2332 to i32
  %add2334 = add nsw i32 %mul2327, %conv2333
  %mul2335 = mul nsw i32 0, %add2334
  %add2336 = add nsw i32 %mul2335, 0
  br label %cond.end.2337

cond.end.2337:                                    ; preds = %cond.false.2324, %cond.true.2290
  %cond2338 = phi i32 [ %sub2323, %cond.true.2290 ], [ %add2336, %cond.false.2324 ]
  %cmp2339 = icmp slt i32 %cond2338, 0
  br i1 %cmp2339, label %cond.true.2341, label %cond.false.2479

cond.true.2341:                                   ; preds = %cond.end.2337
  %432 = load i64, i64* %dst_size, align 8
  %conv2342 = trunc i64 %432 to i8
  %conv2343 = sext i8 %conv2342 to i32
  %cmp2344 = icmp slt i32 %conv2343, 0
  br i1 %cmp2344, label %cond.true.2346, label %cond.false.2421

cond.true.2346:                                   ; preds = %cond.true.2341
  %433 = load i32*, i32** %buf_end, align 8
  %434 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2347 = ptrtoint i32* %433 to i64
  %sub.ptr.rhs.cast2348 = ptrtoint i32* %434 to i64
  %sub.ptr.sub2349 = sub i64 %sub.ptr.lhs.cast2347, %sub.ptr.rhs.cast2348
  %sub.ptr.div2350 = sdiv exact i64 %sub.ptr.sub2349, 4
  %conv2351 = trunc i64 %sub.ptr.div2350 to i8
  %conv2352 = sext i8 %conv2351 to i32
  %435 = load i64, i64* %dst_size, align 8
  %conv2353 = trunc i64 %435 to i8
  %conv2354 = sext i8 %conv2353 to i32
  %mul2355 = mul nsw i32 0, %conv2354
  %436 = load i32*, i32** %buf_end, align 8
  %437 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2356 = ptrtoint i32* %436 to i64
  %sub.ptr.rhs.cast2357 = ptrtoint i32* %437 to i64
  %sub.ptr.sub2358 = sub i64 %sub.ptr.lhs.cast2356, %sub.ptr.rhs.cast2357
  %sub.ptr.div2359 = sdiv exact i64 %sub.ptr.sub2358, 4
  %conv2360 = trunc i64 %sub.ptr.div2359 to i8
  %conv2361 = sext i8 %conv2360 to i32
  %add2362 = add nsw i32 %mul2355, %conv2361
  %mul2363 = mul nsw i32 0, %add2362
  %sub2364 = sub nsw i32 %mul2363, 1
  %cmp2365 = icmp slt i32 %sub2364, 0
  br i1 %cmp2365, label %cond.true.2367, label %cond.false.2401

cond.true.2367:                                   ; preds = %cond.true.2346
  %438 = load i64, i64* %dst_size, align 8
  %conv2368 = trunc i64 %438 to i8
  %conv2369 = sext i8 %conv2368 to i32
  %mul2370 = mul nsw i32 0, %conv2369
  %439 = load i32*, i32** %buf_end, align 8
  %440 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2371 = ptrtoint i32* %439 to i64
  %sub.ptr.rhs.cast2372 = ptrtoint i32* %440 to i64
  %sub.ptr.sub2373 = sub i64 %sub.ptr.lhs.cast2371, %sub.ptr.rhs.cast2372
  %sub.ptr.div2374 = sdiv exact i64 %sub.ptr.sub2373, 4
  %conv2375 = trunc i64 %sub.ptr.div2374 to i8
  %conv2376 = sext i8 %conv2375 to i32
  %add2377 = add nsw i32 %mul2370, %conv2376
  %mul2378 = mul nsw i32 0, %add2377
  %add2379 = add nsw i32 %mul2378, 0
  %neg2380 = xor i32 %add2379, -1
  %cmp2381 = icmp eq i32 %neg2380, -1
  %conv2382 = zext i1 %cmp2381 to i32
  %sub2383 = sub nsw i32 0, %conv2382
  %441 = load i64, i64* %dst_size, align 8
  %conv2384 = trunc i64 %441 to i8
  %conv2385 = sext i8 %conv2384 to i32
  %mul2386 = mul nsw i32 0, %conv2385
  %442 = load i32*, i32** %buf_end, align 8
  %443 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2387 = ptrtoint i32* %442 to i64
  %sub.ptr.rhs.cast2388 = ptrtoint i32* %443 to i64
  %sub.ptr.sub2389 = sub i64 %sub.ptr.lhs.cast2387, %sub.ptr.rhs.cast2388
  %sub.ptr.div2390 = sdiv exact i64 %sub.ptr.sub2389, 4
  %conv2391 = trunc i64 %sub.ptr.div2390 to i8
  %conv2392 = sext i8 %conv2391 to i32
  %add2393 = add nsw i32 %mul2386, %conv2392
  %mul2394 = mul nsw i32 0, %add2393
  %add2395 = add nsw i32 %mul2394, 1
  %shl2396 = shl i32 %add2395, 30
  %sub2397 = sub nsw i32 %shl2396, 1
  %mul2398 = mul nsw i32 %sub2397, 2
  %add2399 = add nsw i32 %mul2398, 1
  %sub2400 = sub nsw i32 %sub2383, %add2399
  br label %cond.end.2414

cond.false.2401:                                  ; preds = %cond.true.2346
  %444 = load i64, i64* %dst_size, align 8
  %conv2402 = trunc i64 %444 to i8
  %conv2403 = sext i8 %conv2402 to i32
  %mul2404 = mul nsw i32 0, %conv2403
  %445 = load i32*, i32** %buf_end, align 8
  %446 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2405 = ptrtoint i32* %445 to i64
  %sub.ptr.rhs.cast2406 = ptrtoint i32* %446 to i64
  %sub.ptr.sub2407 = sub i64 %sub.ptr.lhs.cast2405, %sub.ptr.rhs.cast2406
  %sub.ptr.div2408 = sdiv exact i64 %sub.ptr.sub2407, 4
  %conv2409 = trunc i64 %sub.ptr.div2408 to i8
  %conv2410 = sext i8 %conv2409 to i32
  %add2411 = add nsw i32 %mul2404, %conv2410
  %mul2412 = mul nsw i32 0, %add2411
  %add2413 = add nsw i32 %mul2412, 0
  br label %cond.end.2414

cond.end.2414:                                    ; preds = %cond.false.2401, %cond.true.2367
  %cond2415 = phi i32 [ %sub2400, %cond.true.2367 ], [ %add2413, %cond.false.2401 ]
  %447 = load i64, i64* %dst_size, align 8
  %conv2416 = trunc i64 %447 to i8
  %conv2417 = sext i8 %conv2416 to i32
  %sub2418 = sub nsw i32 %cond2415, %conv2417
  %cmp2419 = icmp slt i32 %conv2352, %sub2418
  br i1 %cmp2419, label %cond.true.2577, label %lor.lhs.false.2539

cond.false.2421:                                  ; preds = %cond.true.2341
  %448 = load i64, i64* %dst_size, align 8
  %conv2422 = trunc i64 %448 to i8
  %conv2423 = sext i8 %conv2422 to i32
  %mul2424 = mul nsw i32 0, %conv2423
  %449 = load i32*, i32** %buf_end, align 8
  %450 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2425 = ptrtoint i32* %449 to i64
  %sub.ptr.rhs.cast2426 = ptrtoint i32* %450 to i64
  %sub.ptr.sub2427 = sub i64 %sub.ptr.lhs.cast2425, %sub.ptr.rhs.cast2426
  %sub.ptr.div2428 = sdiv exact i64 %sub.ptr.sub2427, 4
  %conv2429 = trunc i64 %sub.ptr.div2428 to i8
  %conv2430 = sext i8 %conv2429 to i32
  %add2431 = add nsw i32 %mul2424, %conv2430
  %mul2432 = mul nsw i32 0, %add2431
  %sub2433 = sub nsw i32 %mul2432, 1
  %cmp2434 = icmp slt i32 %sub2433, 0
  br i1 %cmp2434, label %cond.true.2436, label %cond.false.2453

cond.true.2436:                                   ; preds = %cond.false.2421
  %451 = load i64, i64* %dst_size, align 8
  %conv2437 = trunc i64 %451 to i8
  %conv2438 = sext i8 %conv2437 to i32
  %mul2439 = mul nsw i32 0, %conv2438
  %452 = load i32*, i32** %buf_end, align 8
  %453 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2440 = ptrtoint i32* %452 to i64
  %sub.ptr.rhs.cast2441 = ptrtoint i32* %453 to i64
  %sub.ptr.sub2442 = sub i64 %sub.ptr.lhs.cast2440, %sub.ptr.rhs.cast2441
  %sub.ptr.div2443 = sdiv exact i64 %sub.ptr.sub2442, 4
  %conv2444 = trunc i64 %sub.ptr.div2443 to i8
  %conv2445 = sext i8 %conv2444 to i32
  %add2446 = add nsw i32 %mul2439, %conv2445
  %mul2447 = mul nsw i32 0, %add2446
  %add2448 = add nsw i32 %mul2447, 1
  %shl2449 = shl i32 %add2448, 30
  %sub2450 = sub nsw i32 %shl2449, 1
  %mul2451 = mul nsw i32 %sub2450, 2
  %add2452 = add nsw i32 %mul2451, 1
  br label %cond.end.2466

cond.false.2453:                                  ; preds = %cond.false.2421
  %454 = load i64, i64* %dst_size, align 8
  %conv2454 = trunc i64 %454 to i8
  %conv2455 = sext i8 %conv2454 to i32
  %mul2456 = mul nsw i32 0, %conv2455
  %455 = load i32*, i32** %buf_end, align 8
  %456 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2457 = ptrtoint i32* %455 to i64
  %sub.ptr.rhs.cast2458 = ptrtoint i32* %456 to i64
  %sub.ptr.sub2459 = sub i64 %sub.ptr.lhs.cast2457, %sub.ptr.rhs.cast2458
  %sub.ptr.div2460 = sdiv exact i64 %sub.ptr.sub2459, 4
  %conv2461 = trunc i64 %sub.ptr.div2460 to i8
  %conv2462 = sext i8 %conv2461 to i32
  %add2463 = add nsw i32 %mul2456, %conv2462
  %mul2464 = mul nsw i32 0, %add2463
  %sub2465 = sub nsw i32 %mul2464, 1
  br label %cond.end.2466

cond.end.2466:                                    ; preds = %cond.false.2453, %cond.true.2436
  %cond2467 = phi i32 [ %add2452, %cond.true.2436 ], [ %sub2465, %cond.false.2453 ]
  %457 = load i64, i64* %dst_size, align 8
  %conv2468 = trunc i64 %457 to i8
  %conv2469 = sext i8 %conv2468 to i32
  %sub2470 = sub nsw i32 %cond2467, %conv2469
  %458 = load i32*, i32** %buf_end, align 8
  %459 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2471 = ptrtoint i32* %458 to i64
  %sub.ptr.rhs.cast2472 = ptrtoint i32* %459 to i64
  %sub.ptr.sub2473 = sub i64 %sub.ptr.lhs.cast2471, %sub.ptr.rhs.cast2472
  %sub.ptr.div2474 = sdiv exact i64 %sub.ptr.sub2473, 4
  %conv2475 = trunc i64 %sub.ptr.div2474 to i8
  %conv2476 = sext i8 %conv2475 to i32
  %cmp2477 = icmp slt i32 %sub2470, %conv2476
  br i1 %cmp2477, label %cond.true.2577, label %lor.lhs.false.2539

cond.false.2479:                                  ; preds = %cond.end.2337
  %460 = load i32*, i32** %buf_end, align 8
  %461 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2480 = ptrtoint i32* %460 to i64
  %sub.ptr.rhs.cast2481 = ptrtoint i32* %461 to i64
  %sub.ptr.sub2482 = sub i64 %sub.ptr.lhs.cast2480, %sub.ptr.rhs.cast2481
  %sub.ptr.div2483 = sdiv exact i64 %sub.ptr.sub2482, 4
  %conv2484 = trunc i64 %sub.ptr.div2483 to i8
  %conv2485 = sext i8 %conv2484 to i32
  %cmp2486 = icmp slt i32 %conv2485, 0
  br i1 %cmp2486, label %cond.true.2488, label %cond.false.2502

cond.true.2488:                                   ; preds = %cond.false.2479
  %462 = load i64, i64* %dst_size, align 8
  %conv2489 = trunc i64 %462 to i8
  %conv2490 = sext i8 %conv2489 to i32
  %463 = load i32*, i32** %buf_end, align 8
  %464 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2491 = ptrtoint i32* %463 to i64
  %sub.ptr.rhs.cast2492 = ptrtoint i32* %464 to i64
  %sub.ptr.sub2493 = sub i64 %sub.ptr.lhs.cast2491, %sub.ptr.rhs.cast2492
  %sub.ptr.div2494 = sdiv exact i64 %sub.ptr.sub2493, 4
  %conv2495 = trunc i64 %sub.ptr.div2494 to i8
  %conv2496 = sext i8 %conv2495 to i32
  %465 = load i64, i64* %dst_size, align 8
  %conv2497 = trunc i64 %465 to i8
  %conv2498 = sext i8 %conv2497 to i32
  %add2499 = add nsw i32 %conv2496, %conv2498
  %cmp2500 = icmp sle i32 %conv2490, %add2499
  br i1 %cmp2500, label %cond.true.2577, label %lor.lhs.false.2539

cond.false.2502:                                  ; preds = %cond.false.2479
  %466 = load i64, i64* %dst_size, align 8
  %conv2503 = trunc i64 %466 to i8
  %conv2504 = sext i8 %conv2503 to i32
  %cmp2505 = icmp slt i32 %conv2504, 0
  br i1 %cmp2505, label %cond.true.2507, label %cond.false.2525

cond.true.2507:                                   ; preds = %cond.false.2502
  %467 = load i32*, i32** %buf_end, align 8
  %468 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2508 = ptrtoint i32* %467 to i64
  %sub.ptr.rhs.cast2509 = ptrtoint i32* %468 to i64
  %sub.ptr.sub2510 = sub i64 %sub.ptr.lhs.cast2508, %sub.ptr.rhs.cast2509
  %sub.ptr.div2511 = sdiv exact i64 %sub.ptr.sub2510, 4
  %conv2512 = trunc i64 %sub.ptr.div2511 to i8
  %conv2513 = sext i8 %conv2512 to i32
  %469 = load i32*, i32** %buf_end, align 8
  %470 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2514 = ptrtoint i32* %469 to i64
  %sub.ptr.rhs.cast2515 = ptrtoint i32* %470 to i64
  %sub.ptr.sub2516 = sub i64 %sub.ptr.lhs.cast2514, %sub.ptr.rhs.cast2515
  %sub.ptr.div2517 = sdiv exact i64 %sub.ptr.sub2516, 4
  %conv2518 = trunc i64 %sub.ptr.div2517 to i8
  %conv2519 = sext i8 %conv2518 to i32
  %471 = load i64, i64* %dst_size, align 8
  %conv2520 = trunc i64 %471 to i8
  %conv2521 = sext i8 %conv2520 to i32
  %add2522 = add nsw i32 %conv2519, %conv2521
  %cmp2523 = icmp sle i32 %conv2513, %add2522
  br i1 %cmp2523, label %cond.true.2577, label %lor.lhs.false.2539

cond.false.2525:                                  ; preds = %cond.false.2502
  %472 = load i32*, i32** %buf_end, align 8
  %473 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2526 = ptrtoint i32* %472 to i64
  %sub.ptr.rhs.cast2527 = ptrtoint i32* %473 to i64
  %sub.ptr.sub2528 = sub i64 %sub.ptr.lhs.cast2526, %sub.ptr.rhs.cast2527
  %sub.ptr.div2529 = sdiv exact i64 %sub.ptr.sub2528, 4
  %conv2530 = trunc i64 %sub.ptr.div2529 to i8
  %conv2531 = sext i8 %conv2530 to i32
  %474 = load i64, i64* %dst_size, align 8
  %conv2532 = trunc i64 %474 to i8
  %conv2533 = sext i8 %conv2532 to i32
  %add2534 = add nsw i32 %conv2531, %conv2533
  %475 = load i64, i64* %dst_size, align 8
  %conv2535 = trunc i64 %475 to i8
  %conv2536 = sext i8 %conv2535 to i32
  %cmp2537 = icmp slt i32 %add2534, %conv2536
  br i1 %cmp2537, label %cond.true.2577, label %lor.lhs.false.2539

lor.lhs.false.2539:                               ; preds = %cond.false.2525, %cond.true.2507, %cond.true.2488, %cond.end.2466, %cond.end.2414
  %476 = load i32*, i32** %buf_end, align 8
  %477 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2540 = ptrtoint i32* %476 to i64
  %sub.ptr.rhs.cast2541 = ptrtoint i32* %477 to i64
  %sub.ptr.sub2542 = sub i64 %sub.ptr.lhs.cast2540, %sub.ptr.rhs.cast2541
  %sub.ptr.div2543 = sdiv exact i64 %sub.ptr.sub2542, 4
  %conv2544 = trunc i64 %sub.ptr.div2543 to i8
  %conv2545 = sext i8 %conv2544 to i32
  %478 = load i64, i64* %dst_size, align 8
  %conv2546 = trunc i64 %478 to i8
  %conv2547 = sext i8 %conv2546 to i32
  %add2548 = add nsw i32 %conv2545, %conv2547
  %mul2549 = mul nsw i32 0, %add2548
  %sub2550 = sub nsw i32 %mul2549, 1
  %cmp2551 = icmp slt i32 %sub2550, 0
  br i1 %cmp2551, label %land.lhs.true.2553, label %lor.lhs.false.2565

land.lhs.true.2553:                               ; preds = %lor.lhs.false.2539
  %479 = load i32*, i32** %buf_end, align 8
  %480 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2554 = ptrtoint i32* %479 to i64
  %sub.ptr.rhs.cast2555 = ptrtoint i32* %480 to i64
  %sub.ptr.sub2556 = sub i64 %sub.ptr.lhs.cast2554, %sub.ptr.rhs.cast2555
  %sub.ptr.div2557 = sdiv exact i64 %sub.ptr.sub2556, 4
  %conv2558 = trunc i64 %sub.ptr.div2557 to i8
  %conv2559 = sext i8 %conv2558 to i32
  %481 = load i64, i64* %dst_size, align 8
  %conv2560 = trunc i64 %481 to i8
  %conv2561 = sext i8 %conv2560 to i32
  %add2562 = add nsw i32 %conv2559, %conv2561
  %cmp2563 = icmp slt i32 %add2562, -128
  br i1 %cmp2563, label %cond.true.2577, label %lor.lhs.false.2565

lor.lhs.false.2565:                               ; preds = %land.lhs.true.2553, %lor.lhs.false.2539
  %482 = load i32*, i32** %buf_end, align 8
  %483 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2566 = ptrtoint i32* %482 to i64
  %sub.ptr.rhs.cast2567 = ptrtoint i32* %483 to i64
  %sub.ptr.sub2568 = sub i64 %sub.ptr.lhs.cast2566, %sub.ptr.rhs.cast2567
  %sub.ptr.div2569 = sdiv exact i64 %sub.ptr.sub2568, 4
  %conv2570 = trunc i64 %sub.ptr.div2569 to i8
  %conv2571 = sext i8 %conv2570 to i32
  %484 = load i64, i64* %dst_size, align 8
  %conv2572 = trunc i64 %484 to i8
  %conv2573 = sext i8 %conv2572 to i32
  %add2574 = add nsw i32 %conv2571, %conv2573
  %cmp2575 = icmp slt i32 127, %add2574
  br i1 %cmp2575, label %cond.true.2577, label %cond.false.2618

cond.true.2577:                                   ; preds = %lor.lhs.false.2565, %land.lhs.true.2553, %cond.false.2525, %cond.true.2507, %cond.true.2488, %cond.end.2466, %cond.end.2414
  %485 = load i32*, i32** %buf_end, align 8
  %486 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2578 = ptrtoint i32* %485 to i64
  %sub.ptr.rhs.cast2579 = ptrtoint i32* %486 to i64
  %sub.ptr.sub2580 = sub i64 %sub.ptr.lhs.cast2578, %sub.ptr.rhs.cast2579
  %sub.ptr.div2581 = sdiv exact i64 %sub.ptr.sub2580, 4
  %conv2582 = trunc i64 %sub.ptr.div2581 to i8
  %conv2583 = zext i8 %conv2582 to i32
  %487 = load i64, i64* %dst_size, align 8
  %conv2584 = trunc i64 %487 to i8
  %conv2585 = zext i8 %conv2584 to i32
  %add2586 = add nsw i32 %conv2583, %conv2585
  %cmp2587 = icmp sle i32 %add2586, 127
  br i1 %cmp2587, label %cond.true.2589, label %cond.false.2601

cond.true.2589:                                   ; preds = %cond.true.2577
  %488 = load i32*, i32** %buf_end, align 8
  %489 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2590 = ptrtoint i32* %488 to i64
  %sub.ptr.rhs.cast2591 = ptrtoint i32* %489 to i64
  %sub.ptr.sub2592 = sub i64 %sub.ptr.lhs.cast2590, %sub.ptr.rhs.cast2591
  %sub.ptr.div2593 = sdiv exact i64 %sub.ptr.sub2592, 4
  %conv2594 = trunc i64 %sub.ptr.div2593 to i8
  %conv2595 = zext i8 %conv2594 to i32
  %490 = load i64, i64* %dst_size, align 8
  %conv2596 = trunc i64 %490 to i8
  %conv2597 = zext i8 %conv2596 to i32
  %add2598 = add nsw i32 %conv2595, %conv2597
  %conv2599 = trunc i32 %add2598 to i8
  %conv2600 = sext i8 %conv2599 to i32
  br label %cond.end.2615

cond.false.2601:                                  ; preds = %cond.true.2577
  %491 = load i32*, i32** %buf_end, align 8
  %492 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2602 = ptrtoint i32* %491 to i64
  %sub.ptr.rhs.cast2603 = ptrtoint i32* %492 to i64
  %sub.ptr.sub2604 = sub i64 %sub.ptr.lhs.cast2602, %sub.ptr.rhs.cast2603
  %sub.ptr.div2605 = sdiv exact i64 %sub.ptr.sub2604, 4
  %conv2606 = trunc i64 %sub.ptr.div2605 to i8
  %conv2607 = zext i8 %conv2606 to i32
  %493 = load i64, i64* %dst_size, align 8
  %conv2608 = trunc i64 %493 to i8
  %conv2609 = zext i8 %conv2608 to i32
  %add2610 = add nsw i32 %conv2607, %conv2609
  %sub2611 = sub nsw i32 %add2610, -128
  %conv2612 = trunc i32 %sub2611 to i8
  %conv2613 = sext i8 %conv2612 to i32
  %add2614 = add nsw i32 %conv2613, -128
  br label %cond.end.2615

cond.end.2615:                                    ; preds = %cond.false.2601, %cond.true.2589
  %cond2616 = phi i32 [ %conv2600, %cond.true.2589 ], [ %add2614, %cond.false.2601 ]
  %conv2617 = sext i32 %cond2616 to i64
  store i64 %conv2617, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.2618:                                  ; preds = %lor.lhs.false.2565
  %494 = load i32*, i32** %buf_end, align 8
  %495 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2619 = ptrtoint i32* %494 to i64
  %sub.ptr.rhs.cast2620 = ptrtoint i32* %495 to i64
  %sub.ptr.sub2621 = sub i64 %sub.ptr.lhs.cast2619, %sub.ptr.rhs.cast2620
  %sub.ptr.div2622 = sdiv exact i64 %sub.ptr.sub2621, 4
  %conv2623 = trunc i64 %sub.ptr.div2622 to i8
  %conv2624 = zext i8 %conv2623 to i32
  %496 = load i64, i64* %dst_size, align 8
  %conv2625 = trunc i64 %496 to i8
  %conv2626 = zext i8 %conv2625 to i32
  %add2627 = add nsw i32 %conv2624, %conv2626
  %cmp2628 = icmp sle i32 %add2627, 127
  br i1 %cmp2628, label %cond.true.2630, label %cond.false.2642

cond.true.2630:                                   ; preds = %cond.false.2618
  %497 = load i32*, i32** %buf_end, align 8
  %498 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2631 = ptrtoint i32* %497 to i64
  %sub.ptr.rhs.cast2632 = ptrtoint i32* %498 to i64
  %sub.ptr.sub2633 = sub i64 %sub.ptr.lhs.cast2631, %sub.ptr.rhs.cast2632
  %sub.ptr.div2634 = sdiv exact i64 %sub.ptr.sub2633, 4
  %conv2635 = trunc i64 %sub.ptr.div2634 to i8
  %conv2636 = zext i8 %conv2635 to i32
  %499 = load i64, i64* %dst_size, align 8
  %conv2637 = trunc i64 %499 to i8
  %conv2638 = zext i8 %conv2637 to i32
  %add2639 = add nsw i32 %conv2636, %conv2638
  %conv2640 = trunc i32 %add2639 to i8
  %conv2641 = sext i8 %conv2640 to i32
  br label %cond.end.2656

cond.false.2642:                                  ; preds = %cond.false.2618
  %500 = load i32*, i32** %buf_end, align 8
  %501 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2643 = ptrtoint i32* %500 to i64
  %sub.ptr.rhs.cast2644 = ptrtoint i32* %501 to i64
  %sub.ptr.sub2645 = sub i64 %sub.ptr.lhs.cast2643, %sub.ptr.rhs.cast2644
  %sub.ptr.div2646 = sdiv exact i64 %sub.ptr.sub2645, 4
  %conv2647 = trunc i64 %sub.ptr.div2646 to i8
  %conv2648 = zext i8 %conv2647 to i32
  %502 = load i64, i64* %dst_size, align 8
  %conv2649 = trunc i64 %502 to i8
  %conv2650 = zext i8 %conv2649 to i32
  %add2651 = add nsw i32 %conv2648, %conv2650
  %sub2652 = sub nsw i32 %add2651, -128
  %conv2653 = trunc i32 %sub2652 to i8
  %conv2654 = sext i8 %conv2653 to i32
  %add2655 = add nsw i32 %conv2654, -128
  br label %cond.end.2656

cond.end.2656:                                    ; preds = %cond.false.2642, %cond.true.2630
  %cond2657 = phi i32 [ %conv2641, %cond.true.2630 ], [ %add2655, %cond.false.2642 ]
  %conv2658 = sext i32 %cond2657 to i64
  store i64 %conv2658, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.2659:                                  ; preds = %cond.true.2275
  %503 = load i64, i64* %dst_size, align 8
  %mul2660 = mul nsw i64 0, %503
  %504 = load i32*, i32** %buf_end, align 8
  %505 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2661 = ptrtoint i32* %504 to i64
  %sub.ptr.rhs.cast2662 = ptrtoint i32* %505 to i64
  %sub.ptr.sub2663 = sub i64 %sub.ptr.lhs.cast2661, %sub.ptr.rhs.cast2662
  %sub.ptr.div2664 = sdiv exact i64 %sub.ptr.sub2663, 4
  %add2665 = add nsw i64 %mul2660, %sub.ptr.div2664
  %mul2666 = mul nsw i64 0, %add2665
  %sub2667 = sub nsw i64 %mul2666, 1
  %cmp2668 = icmp slt i64 %sub2667, 0
  br i1 %cmp2668, label %cond.true.2670, label %cond.false.2697

cond.true.2670:                                   ; preds = %cond.false.2659
  %506 = load i64, i64* %dst_size, align 8
  %mul2671 = mul nsw i64 0, %506
  %507 = load i32*, i32** %buf_end, align 8
  %508 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2672 = ptrtoint i32* %507 to i64
  %sub.ptr.rhs.cast2673 = ptrtoint i32* %508 to i64
  %sub.ptr.sub2674 = sub i64 %sub.ptr.lhs.cast2672, %sub.ptr.rhs.cast2673
  %sub.ptr.div2675 = sdiv exact i64 %sub.ptr.sub2674, 4
  %add2676 = add nsw i64 %mul2671, %sub.ptr.div2675
  %mul2677 = mul nsw i64 0, %add2676
  %add2678 = add nsw i64 %mul2677, 0
  %neg2679 = xor i64 %add2678, -1
  %cmp2680 = icmp eq i64 %neg2679, -1
  %conv2681 = zext i1 %cmp2680 to i32
  %sub2682 = sub nsw i32 0, %conv2681
  %conv2683 = sext i32 %sub2682 to i64
  %509 = load i64, i64* %dst_size, align 8
  %mul2684 = mul nsw i64 0, %509
  %510 = load i32*, i32** %buf_end, align 8
  %511 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2685 = ptrtoint i32* %510 to i64
  %sub.ptr.rhs.cast2686 = ptrtoint i32* %511 to i64
  %sub.ptr.sub2687 = sub i64 %sub.ptr.lhs.cast2685, %sub.ptr.rhs.cast2686
  %sub.ptr.div2688 = sdiv exact i64 %sub.ptr.sub2687, 4
  %add2689 = add nsw i64 %mul2684, %sub.ptr.div2688
  %mul2690 = mul nsw i64 0, %add2689
  %add2691 = add nsw i64 %mul2690, 1
  %shl2692 = shl i64 %add2691, 62
  %sub2693 = sub nsw i64 %shl2692, 1
  %mul2694 = mul nsw i64 %sub2693, 2
  %add2695 = add nsw i64 %mul2694, 1
  %sub2696 = sub nsw i64 %conv2683, %add2695
  br label %cond.end.2706

cond.false.2697:                                  ; preds = %cond.false.2659
  %512 = load i64, i64* %dst_size, align 8
  %mul2698 = mul nsw i64 0, %512
  %513 = load i32*, i32** %buf_end, align 8
  %514 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2699 = ptrtoint i32* %513 to i64
  %sub.ptr.rhs.cast2700 = ptrtoint i32* %514 to i64
  %sub.ptr.sub2701 = sub i64 %sub.ptr.lhs.cast2699, %sub.ptr.rhs.cast2700
  %sub.ptr.div2702 = sdiv exact i64 %sub.ptr.sub2701, 4
  %add2703 = add nsw i64 %mul2698, %sub.ptr.div2702
  %mul2704 = mul nsw i64 0, %add2703
  %add2705 = add nsw i64 %mul2704, 0
  br label %cond.end.2706

cond.end.2706:                                    ; preds = %cond.false.2697, %cond.true.2670
  %cond2707 = phi i64 [ %sub2696, %cond.true.2670 ], [ %add2705, %cond.false.2697 ]
  %cmp2708 = icmp slt i64 %cond2707, 0
  br i1 %cmp2708, label %cond.true.2710, label %cond.false.2811

cond.true.2710:                                   ; preds = %cond.end.2706
  %515 = load i64, i64* %dst_size, align 8
  %cmp2711 = icmp slt i64 %515, 0
  br i1 %cmp2711, label %cond.true.2713, label %cond.false.2769

cond.true.2713:                                   ; preds = %cond.true.2710
  %516 = load i32*, i32** %buf_end, align 8
  %517 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2714 = ptrtoint i32* %516 to i64
  %sub.ptr.rhs.cast2715 = ptrtoint i32* %517 to i64
  %sub.ptr.sub2716 = sub i64 %sub.ptr.lhs.cast2714, %sub.ptr.rhs.cast2715
  %sub.ptr.div2717 = sdiv exact i64 %sub.ptr.sub2716, 4
  %518 = load i64, i64* %dst_size, align 8
  %mul2718 = mul nsw i64 0, %518
  %519 = load i32*, i32** %buf_end, align 8
  %520 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2719 = ptrtoint i32* %519 to i64
  %sub.ptr.rhs.cast2720 = ptrtoint i32* %520 to i64
  %sub.ptr.sub2721 = sub i64 %sub.ptr.lhs.cast2719, %sub.ptr.rhs.cast2720
  %sub.ptr.div2722 = sdiv exact i64 %sub.ptr.sub2721, 4
  %add2723 = add nsw i64 %mul2718, %sub.ptr.div2722
  %mul2724 = mul nsw i64 0, %add2723
  %sub2725 = sub nsw i64 %mul2724, 1
  %cmp2726 = icmp slt i64 %sub2725, 0
  br i1 %cmp2726, label %cond.true.2728, label %cond.false.2755

cond.true.2728:                                   ; preds = %cond.true.2713
  %521 = load i64, i64* %dst_size, align 8
  %mul2729 = mul nsw i64 0, %521
  %522 = load i32*, i32** %buf_end, align 8
  %523 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2730 = ptrtoint i32* %522 to i64
  %sub.ptr.rhs.cast2731 = ptrtoint i32* %523 to i64
  %sub.ptr.sub2732 = sub i64 %sub.ptr.lhs.cast2730, %sub.ptr.rhs.cast2731
  %sub.ptr.div2733 = sdiv exact i64 %sub.ptr.sub2732, 4
  %add2734 = add nsw i64 %mul2729, %sub.ptr.div2733
  %mul2735 = mul nsw i64 0, %add2734
  %add2736 = add nsw i64 %mul2735, 0
  %neg2737 = xor i64 %add2736, -1
  %cmp2738 = icmp eq i64 %neg2737, -1
  %conv2739 = zext i1 %cmp2738 to i32
  %sub2740 = sub nsw i32 0, %conv2739
  %conv2741 = sext i32 %sub2740 to i64
  %524 = load i64, i64* %dst_size, align 8
  %mul2742 = mul nsw i64 0, %524
  %525 = load i32*, i32** %buf_end, align 8
  %526 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2743 = ptrtoint i32* %525 to i64
  %sub.ptr.rhs.cast2744 = ptrtoint i32* %526 to i64
  %sub.ptr.sub2745 = sub i64 %sub.ptr.lhs.cast2743, %sub.ptr.rhs.cast2744
  %sub.ptr.div2746 = sdiv exact i64 %sub.ptr.sub2745, 4
  %add2747 = add nsw i64 %mul2742, %sub.ptr.div2746
  %mul2748 = mul nsw i64 0, %add2747
  %add2749 = add nsw i64 %mul2748, 1
  %shl2750 = shl i64 %add2749, 62
  %sub2751 = sub nsw i64 %shl2750, 1
  %mul2752 = mul nsw i64 %sub2751, 2
  %add2753 = add nsw i64 %mul2752, 1
  %sub2754 = sub nsw i64 %conv2741, %add2753
  br label %cond.end.2764

cond.false.2755:                                  ; preds = %cond.true.2713
  %527 = load i64, i64* %dst_size, align 8
  %mul2756 = mul nsw i64 0, %527
  %528 = load i32*, i32** %buf_end, align 8
  %529 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2757 = ptrtoint i32* %528 to i64
  %sub.ptr.rhs.cast2758 = ptrtoint i32* %529 to i64
  %sub.ptr.sub2759 = sub i64 %sub.ptr.lhs.cast2757, %sub.ptr.rhs.cast2758
  %sub.ptr.div2760 = sdiv exact i64 %sub.ptr.sub2759, 4
  %add2761 = add nsw i64 %mul2756, %sub.ptr.div2760
  %mul2762 = mul nsw i64 0, %add2761
  %add2763 = add nsw i64 %mul2762, 0
  br label %cond.end.2764

cond.end.2764:                                    ; preds = %cond.false.2755, %cond.true.2728
  %cond2765 = phi i64 [ %sub2754, %cond.true.2728 ], [ %add2763, %cond.false.2755 ]
  %530 = load i64, i64* %dst_size, align 8
  %sub2766 = sub nsw i64 %cond2765, %530
  %cmp2767 = icmp slt i64 %sub.ptr.div2717, %sub2766
  br i1 %cmp2767, label %cond.true.2875, label %lor.lhs.false.2849

cond.false.2769:                                  ; preds = %cond.true.2710
  %531 = load i64, i64* %dst_size, align 8
  %mul2770 = mul nsw i64 0, %531
  %532 = load i32*, i32** %buf_end, align 8
  %533 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2771 = ptrtoint i32* %532 to i64
  %sub.ptr.rhs.cast2772 = ptrtoint i32* %533 to i64
  %sub.ptr.sub2773 = sub i64 %sub.ptr.lhs.cast2771, %sub.ptr.rhs.cast2772
  %sub.ptr.div2774 = sdiv exact i64 %sub.ptr.sub2773, 4
  %add2775 = add nsw i64 %mul2770, %sub.ptr.div2774
  %mul2776 = mul nsw i64 0, %add2775
  %sub2777 = sub nsw i64 %mul2776, 1
  %cmp2778 = icmp slt i64 %sub2777, 0
  br i1 %cmp2778, label %cond.true.2780, label %cond.false.2793

cond.true.2780:                                   ; preds = %cond.false.2769
  %534 = load i64, i64* %dst_size, align 8
  %mul2781 = mul nsw i64 0, %534
  %535 = load i32*, i32** %buf_end, align 8
  %536 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2782 = ptrtoint i32* %535 to i64
  %sub.ptr.rhs.cast2783 = ptrtoint i32* %536 to i64
  %sub.ptr.sub2784 = sub i64 %sub.ptr.lhs.cast2782, %sub.ptr.rhs.cast2783
  %sub.ptr.div2785 = sdiv exact i64 %sub.ptr.sub2784, 4
  %add2786 = add nsw i64 %mul2781, %sub.ptr.div2785
  %mul2787 = mul nsw i64 0, %add2786
  %add2788 = add nsw i64 %mul2787, 1
  %shl2789 = shl i64 %add2788, 62
  %sub2790 = sub nsw i64 %shl2789, 1
  %mul2791 = mul nsw i64 %sub2790, 2
  %add2792 = add nsw i64 %mul2791, 1
  br label %cond.end.2802

cond.false.2793:                                  ; preds = %cond.false.2769
  %537 = load i64, i64* %dst_size, align 8
  %mul2794 = mul nsw i64 0, %537
  %538 = load i32*, i32** %buf_end, align 8
  %539 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2795 = ptrtoint i32* %538 to i64
  %sub.ptr.rhs.cast2796 = ptrtoint i32* %539 to i64
  %sub.ptr.sub2797 = sub i64 %sub.ptr.lhs.cast2795, %sub.ptr.rhs.cast2796
  %sub.ptr.div2798 = sdiv exact i64 %sub.ptr.sub2797, 4
  %add2799 = add nsw i64 %mul2794, %sub.ptr.div2798
  %mul2800 = mul nsw i64 0, %add2799
  %sub2801 = sub nsw i64 %mul2800, 1
  br label %cond.end.2802

cond.end.2802:                                    ; preds = %cond.false.2793, %cond.true.2780
  %cond2803 = phi i64 [ %add2792, %cond.true.2780 ], [ %sub2801, %cond.false.2793 ]
  %540 = load i64, i64* %dst_size, align 8
  %sub2804 = sub nsw i64 %cond2803, %540
  %541 = load i32*, i32** %buf_end, align 8
  %542 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2805 = ptrtoint i32* %541 to i64
  %sub.ptr.rhs.cast2806 = ptrtoint i32* %542 to i64
  %sub.ptr.sub2807 = sub i64 %sub.ptr.lhs.cast2805, %sub.ptr.rhs.cast2806
  %sub.ptr.div2808 = sdiv exact i64 %sub.ptr.sub2807, 4
  %cmp2809 = icmp slt i64 %sub2804, %sub.ptr.div2808
  br i1 %cmp2809, label %cond.true.2875, label %lor.lhs.false.2849

cond.false.2811:                                  ; preds = %cond.end.2706
  %543 = load i32*, i32** %buf_end, align 8
  %544 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2812 = ptrtoint i32* %543 to i64
  %sub.ptr.rhs.cast2813 = ptrtoint i32* %544 to i64
  %sub.ptr.sub2814 = sub i64 %sub.ptr.lhs.cast2812, %sub.ptr.rhs.cast2813
  %sub.ptr.div2815 = sdiv exact i64 %sub.ptr.sub2814, 4
  %cmp2816 = icmp slt i64 %sub.ptr.div2815, 0
  br i1 %cmp2816, label %cond.true.2818, label %cond.false.2826

cond.true.2818:                                   ; preds = %cond.false.2811
  %545 = load i64, i64* %dst_size, align 8
  %546 = load i32*, i32** %buf_end, align 8
  %547 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2819 = ptrtoint i32* %546 to i64
  %sub.ptr.rhs.cast2820 = ptrtoint i32* %547 to i64
  %sub.ptr.sub2821 = sub i64 %sub.ptr.lhs.cast2819, %sub.ptr.rhs.cast2820
  %sub.ptr.div2822 = sdiv exact i64 %sub.ptr.sub2821, 4
  %548 = load i64, i64* %dst_size, align 8
  %add2823 = add nsw i64 %sub.ptr.div2822, %548
  %cmp2824 = icmp sle i64 %545, %add2823
  br i1 %cmp2824, label %cond.true.2875, label %lor.lhs.false.2849

cond.false.2826:                                  ; preds = %cond.false.2811
  %549 = load i64, i64* %dst_size, align 8
  %cmp2827 = icmp slt i64 %549, 0
  br i1 %cmp2827, label %cond.true.2829, label %cond.false.2841

cond.true.2829:                                   ; preds = %cond.false.2826
  %550 = load i32*, i32** %buf_end, align 8
  %551 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2830 = ptrtoint i32* %550 to i64
  %sub.ptr.rhs.cast2831 = ptrtoint i32* %551 to i64
  %sub.ptr.sub2832 = sub i64 %sub.ptr.lhs.cast2830, %sub.ptr.rhs.cast2831
  %sub.ptr.div2833 = sdiv exact i64 %sub.ptr.sub2832, 4
  %552 = load i32*, i32** %buf_end, align 8
  %553 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2834 = ptrtoint i32* %552 to i64
  %sub.ptr.rhs.cast2835 = ptrtoint i32* %553 to i64
  %sub.ptr.sub2836 = sub i64 %sub.ptr.lhs.cast2834, %sub.ptr.rhs.cast2835
  %sub.ptr.div2837 = sdiv exact i64 %sub.ptr.sub2836, 4
  %554 = load i64, i64* %dst_size, align 8
  %add2838 = add nsw i64 %sub.ptr.div2837, %554
  %cmp2839 = icmp sle i64 %sub.ptr.div2833, %add2838
  br i1 %cmp2839, label %cond.true.2875, label %lor.lhs.false.2849

cond.false.2841:                                  ; preds = %cond.false.2826
  %555 = load i32*, i32** %buf_end, align 8
  %556 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2842 = ptrtoint i32* %555 to i64
  %sub.ptr.rhs.cast2843 = ptrtoint i32* %556 to i64
  %sub.ptr.sub2844 = sub i64 %sub.ptr.lhs.cast2842, %sub.ptr.rhs.cast2843
  %sub.ptr.div2845 = sdiv exact i64 %sub.ptr.sub2844, 4
  %557 = load i64, i64* %dst_size, align 8
  %add2846 = add nsw i64 %sub.ptr.div2845, %557
  %558 = load i64, i64* %dst_size, align 8
  %cmp2847 = icmp slt i64 %add2846, %558
  br i1 %cmp2847, label %cond.true.2875, label %lor.lhs.false.2849

lor.lhs.false.2849:                               ; preds = %cond.false.2841, %cond.true.2829, %cond.true.2818, %cond.end.2802, %cond.end.2764
  %559 = load i32*, i32** %buf_end, align 8
  %560 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2850 = ptrtoint i32* %559 to i64
  %sub.ptr.rhs.cast2851 = ptrtoint i32* %560 to i64
  %sub.ptr.sub2852 = sub i64 %sub.ptr.lhs.cast2850, %sub.ptr.rhs.cast2851
  %sub.ptr.div2853 = sdiv exact i64 %sub.ptr.sub2852, 4
  %561 = load i64, i64* %dst_size, align 8
  %add2854 = add nsw i64 %sub.ptr.div2853, %561
  %mul2855 = mul nsw i64 0, %add2854
  %sub2856 = sub nsw i64 %mul2855, 1
  %cmp2857 = icmp slt i64 %sub2856, 0
  br i1 %cmp2857, label %land.lhs.true.2859, label %lor.lhs.false.2867

land.lhs.true.2859:                               ; preds = %lor.lhs.false.2849
  %562 = load i32*, i32** %buf_end, align 8
  %563 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2860 = ptrtoint i32* %562 to i64
  %sub.ptr.rhs.cast2861 = ptrtoint i32* %563 to i64
  %sub.ptr.sub2862 = sub i64 %sub.ptr.lhs.cast2860, %sub.ptr.rhs.cast2861
  %sub.ptr.div2863 = sdiv exact i64 %sub.ptr.sub2862, 4
  %564 = load i64, i64* %dst_size, align 8
  %add2864 = add nsw i64 %sub.ptr.div2863, %564
  %cmp2865 = icmp slt i64 %add2864, -128
  br i1 %cmp2865, label %cond.true.2875, label %lor.lhs.false.2867

lor.lhs.false.2867:                               ; preds = %land.lhs.true.2859, %lor.lhs.false.2849
  %565 = load i32*, i32** %buf_end, align 8
  %566 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2868 = ptrtoint i32* %565 to i64
  %sub.ptr.rhs.cast2869 = ptrtoint i32* %566 to i64
  %sub.ptr.sub2870 = sub i64 %sub.ptr.lhs.cast2868, %sub.ptr.rhs.cast2869
  %sub.ptr.div2871 = sdiv exact i64 %sub.ptr.sub2870, 4
  %567 = load i64, i64* %dst_size, align 8
  %add2872 = add nsw i64 %sub.ptr.div2871, %567
  %cmp2873 = icmp slt i64 127, %add2872
  br i1 %cmp2873, label %cond.true.2875, label %cond.false.2916

cond.true.2875:                                   ; preds = %lor.lhs.false.2867, %land.lhs.true.2859, %cond.false.2841, %cond.true.2829, %cond.true.2818, %cond.end.2802, %cond.end.2764
  %568 = load i32*, i32** %buf_end, align 8
  %569 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2876 = ptrtoint i32* %568 to i64
  %sub.ptr.rhs.cast2877 = ptrtoint i32* %569 to i64
  %sub.ptr.sub2878 = sub i64 %sub.ptr.lhs.cast2876, %sub.ptr.rhs.cast2877
  %sub.ptr.div2879 = sdiv exact i64 %sub.ptr.sub2878, 4
  %conv2880 = trunc i64 %sub.ptr.div2879 to i8
  %conv2881 = zext i8 %conv2880 to i32
  %570 = load i64, i64* %dst_size, align 8
  %conv2882 = trunc i64 %570 to i8
  %conv2883 = zext i8 %conv2882 to i32
  %add2884 = add nsw i32 %conv2881, %conv2883
  %cmp2885 = icmp sle i32 %add2884, 127
  br i1 %cmp2885, label %cond.true.2887, label %cond.false.2899

cond.true.2887:                                   ; preds = %cond.true.2875
  %571 = load i32*, i32** %buf_end, align 8
  %572 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2888 = ptrtoint i32* %571 to i64
  %sub.ptr.rhs.cast2889 = ptrtoint i32* %572 to i64
  %sub.ptr.sub2890 = sub i64 %sub.ptr.lhs.cast2888, %sub.ptr.rhs.cast2889
  %sub.ptr.div2891 = sdiv exact i64 %sub.ptr.sub2890, 4
  %conv2892 = trunc i64 %sub.ptr.div2891 to i8
  %conv2893 = zext i8 %conv2892 to i32
  %573 = load i64, i64* %dst_size, align 8
  %conv2894 = trunc i64 %573 to i8
  %conv2895 = zext i8 %conv2894 to i32
  %add2896 = add nsw i32 %conv2893, %conv2895
  %conv2897 = trunc i32 %add2896 to i8
  %conv2898 = sext i8 %conv2897 to i32
  br label %cond.end.2913

cond.false.2899:                                  ; preds = %cond.true.2875
  %574 = load i32*, i32** %buf_end, align 8
  %575 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2900 = ptrtoint i32* %574 to i64
  %sub.ptr.rhs.cast2901 = ptrtoint i32* %575 to i64
  %sub.ptr.sub2902 = sub i64 %sub.ptr.lhs.cast2900, %sub.ptr.rhs.cast2901
  %sub.ptr.div2903 = sdiv exact i64 %sub.ptr.sub2902, 4
  %conv2904 = trunc i64 %sub.ptr.div2903 to i8
  %conv2905 = zext i8 %conv2904 to i32
  %576 = load i64, i64* %dst_size, align 8
  %conv2906 = trunc i64 %576 to i8
  %conv2907 = zext i8 %conv2906 to i32
  %add2908 = add nsw i32 %conv2905, %conv2907
  %sub2909 = sub nsw i32 %add2908, -128
  %conv2910 = trunc i32 %sub2909 to i8
  %conv2911 = sext i8 %conv2910 to i32
  %add2912 = add nsw i32 %conv2911, -128
  br label %cond.end.2913

cond.end.2913:                                    ; preds = %cond.false.2899, %cond.true.2887
  %cond2914 = phi i32 [ %conv2898, %cond.true.2887 ], [ %add2912, %cond.false.2899 ]
  %conv2915 = sext i32 %cond2914 to i64
  store i64 %conv2915, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.2916:                                  ; preds = %lor.lhs.false.2867
  %577 = load i32*, i32** %buf_end, align 8
  %578 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2917 = ptrtoint i32* %577 to i64
  %sub.ptr.rhs.cast2918 = ptrtoint i32* %578 to i64
  %sub.ptr.sub2919 = sub i64 %sub.ptr.lhs.cast2917, %sub.ptr.rhs.cast2918
  %sub.ptr.div2920 = sdiv exact i64 %sub.ptr.sub2919, 4
  %conv2921 = trunc i64 %sub.ptr.div2920 to i8
  %conv2922 = zext i8 %conv2921 to i32
  %579 = load i64, i64* %dst_size, align 8
  %conv2923 = trunc i64 %579 to i8
  %conv2924 = zext i8 %conv2923 to i32
  %add2925 = add nsw i32 %conv2922, %conv2924
  %cmp2926 = icmp sle i32 %add2925, 127
  br i1 %cmp2926, label %cond.true.2928, label %cond.false.2940

cond.true.2928:                                   ; preds = %cond.false.2916
  %580 = load i32*, i32** %buf_end, align 8
  %581 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2929 = ptrtoint i32* %580 to i64
  %sub.ptr.rhs.cast2930 = ptrtoint i32* %581 to i64
  %sub.ptr.sub2931 = sub i64 %sub.ptr.lhs.cast2929, %sub.ptr.rhs.cast2930
  %sub.ptr.div2932 = sdiv exact i64 %sub.ptr.sub2931, 4
  %conv2933 = trunc i64 %sub.ptr.div2932 to i8
  %conv2934 = zext i8 %conv2933 to i32
  %582 = load i64, i64* %dst_size, align 8
  %conv2935 = trunc i64 %582 to i8
  %conv2936 = zext i8 %conv2935 to i32
  %add2937 = add nsw i32 %conv2934, %conv2936
  %conv2938 = trunc i32 %add2937 to i8
  %conv2939 = sext i8 %conv2938 to i32
  br label %cond.end.2954

cond.false.2940:                                  ; preds = %cond.false.2916
  %583 = load i32*, i32** %buf_end, align 8
  %584 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2941 = ptrtoint i32* %583 to i64
  %sub.ptr.rhs.cast2942 = ptrtoint i32* %584 to i64
  %sub.ptr.sub2943 = sub i64 %sub.ptr.lhs.cast2941, %sub.ptr.rhs.cast2942
  %sub.ptr.div2944 = sdiv exact i64 %sub.ptr.sub2943, 4
  %conv2945 = trunc i64 %sub.ptr.div2944 to i8
  %conv2946 = zext i8 %conv2945 to i32
  %585 = load i64, i64* %dst_size, align 8
  %conv2947 = trunc i64 %585 to i8
  %conv2948 = zext i8 %conv2947 to i32
  %add2949 = add nsw i32 %conv2946, %conv2948
  %sub2950 = sub nsw i32 %add2949, -128
  %conv2951 = trunc i32 %sub2950 to i8
  %conv2952 = sext i8 %conv2951 to i32
  %add2953 = add nsw i32 %conv2952, -128
  br label %cond.end.2954

cond.end.2954:                                    ; preds = %cond.false.2940, %cond.true.2928
  %cond2955 = phi i32 [ %conv2939, %cond.true.2928 ], [ %add2953, %cond.false.2940 ]
  %conv2956 = sext i32 %cond2955 to i64
  store i64 %conv2956, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.2957:                                  ; preds = %lor.lhs.false.2274
  br i1 false, label %cond.true.2958, label %cond.false.3641

cond.true.2958:                                   ; preds = %cond.false.2957
  br i1 false, label %cond.true.2959, label %cond.false.3343

cond.true.2959:                                   ; preds = %cond.true.2958
  %586 = load i64, i64* %dst_size, align 8
  %conv2960 = trunc i64 %586 to i16
  %conv2961 = sext i16 %conv2960 to i32
  %mul2962 = mul nsw i32 0, %conv2961
  %587 = load i32*, i32** %buf_end, align 8
  %588 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2963 = ptrtoint i32* %587 to i64
  %sub.ptr.rhs.cast2964 = ptrtoint i32* %588 to i64
  %sub.ptr.sub2965 = sub i64 %sub.ptr.lhs.cast2963, %sub.ptr.rhs.cast2964
  %sub.ptr.div2966 = sdiv exact i64 %sub.ptr.sub2965, 4
  %conv2967 = trunc i64 %sub.ptr.div2966 to i16
  %conv2968 = sext i16 %conv2967 to i32
  %add2969 = add nsw i32 %mul2962, %conv2968
  %mul2970 = mul nsw i32 0, %add2969
  %sub2971 = sub nsw i32 %mul2970, 1
  %cmp2972 = icmp slt i32 %sub2971, 0
  br i1 %cmp2972, label %cond.true.2974, label %cond.false.3008

cond.true.2974:                                   ; preds = %cond.true.2959
  %589 = load i64, i64* %dst_size, align 8
  %conv2975 = trunc i64 %589 to i16
  %conv2976 = sext i16 %conv2975 to i32
  %mul2977 = mul nsw i32 0, %conv2976
  %590 = load i32*, i32** %buf_end, align 8
  %591 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2978 = ptrtoint i32* %590 to i64
  %sub.ptr.rhs.cast2979 = ptrtoint i32* %591 to i64
  %sub.ptr.sub2980 = sub i64 %sub.ptr.lhs.cast2978, %sub.ptr.rhs.cast2979
  %sub.ptr.div2981 = sdiv exact i64 %sub.ptr.sub2980, 4
  %conv2982 = trunc i64 %sub.ptr.div2981 to i16
  %conv2983 = sext i16 %conv2982 to i32
  %add2984 = add nsw i32 %mul2977, %conv2983
  %mul2985 = mul nsw i32 0, %add2984
  %add2986 = add nsw i32 %mul2985, 0
  %neg2987 = xor i32 %add2986, -1
  %cmp2988 = icmp eq i32 %neg2987, -1
  %conv2989 = zext i1 %cmp2988 to i32
  %sub2990 = sub nsw i32 0, %conv2989
  %592 = load i64, i64* %dst_size, align 8
  %conv2991 = trunc i64 %592 to i16
  %conv2992 = sext i16 %conv2991 to i32
  %mul2993 = mul nsw i32 0, %conv2992
  %593 = load i32*, i32** %buf_end, align 8
  %594 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast2994 = ptrtoint i32* %593 to i64
  %sub.ptr.rhs.cast2995 = ptrtoint i32* %594 to i64
  %sub.ptr.sub2996 = sub i64 %sub.ptr.lhs.cast2994, %sub.ptr.rhs.cast2995
  %sub.ptr.div2997 = sdiv exact i64 %sub.ptr.sub2996, 4
  %conv2998 = trunc i64 %sub.ptr.div2997 to i16
  %conv2999 = sext i16 %conv2998 to i32
  %add3000 = add nsw i32 %mul2993, %conv2999
  %mul3001 = mul nsw i32 0, %add3000
  %add3002 = add nsw i32 %mul3001, 1
  %shl3003 = shl i32 %add3002, 30
  %sub3004 = sub nsw i32 %shl3003, 1
  %mul3005 = mul nsw i32 %sub3004, 2
  %add3006 = add nsw i32 %mul3005, 1
  %sub3007 = sub nsw i32 %sub2990, %add3006
  br label %cond.end.3021

cond.false.3008:                                  ; preds = %cond.true.2959
  %595 = load i64, i64* %dst_size, align 8
  %conv3009 = trunc i64 %595 to i16
  %conv3010 = sext i16 %conv3009 to i32
  %mul3011 = mul nsw i32 0, %conv3010
  %596 = load i32*, i32** %buf_end, align 8
  %597 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3012 = ptrtoint i32* %596 to i64
  %sub.ptr.rhs.cast3013 = ptrtoint i32* %597 to i64
  %sub.ptr.sub3014 = sub i64 %sub.ptr.lhs.cast3012, %sub.ptr.rhs.cast3013
  %sub.ptr.div3015 = sdiv exact i64 %sub.ptr.sub3014, 4
  %conv3016 = trunc i64 %sub.ptr.div3015 to i16
  %conv3017 = sext i16 %conv3016 to i32
  %add3018 = add nsw i32 %mul3011, %conv3017
  %mul3019 = mul nsw i32 0, %add3018
  %add3020 = add nsw i32 %mul3019, 0
  br label %cond.end.3021

cond.end.3021:                                    ; preds = %cond.false.3008, %cond.true.2974
  %cond3022 = phi i32 [ %sub3007, %cond.true.2974 ], [ %add3020, %cond.false.3008 ]
  %cmp3023 = icmp slt i32 %cond3022, 0
  br i1 %cmp3023, label %cond.true.3025, label %cond.false.3163

cond.true.3025:                                   ; preds = %cond.end.3021
  %598 = load i64, i64* %dst_size, align 8
  %conv3026 = trunc i64 %598 to i16
  %conv3027 = sext i16 %conv3026 to i32
  %cmp3028 = icmp slt i32 %conv3027, 0
  br i1 %cmp3028, label %cond.true.3030, label %cond.false.3105

cond.true.3030:                                   ; preds = %cond.true.3025
  %599 = load i32*, i32** %buf_end, align 8
  %600 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3031 = ptrtoint i32* %599 to i64
  %sub.ptr.rhs.cast3032 = ptrtoint i32* %600 to i64
  %sub.ptr.sub3033 = sub i64 %sub.ptr.lhs.cast3031, %sub.ptr.rhs.cast3032
  %sub.ptr.div3034 = sdiv exact i64 %sub.ptr.sub3033, 4
  %conv3035 = trunc i64 %sub.ptr.div3034 to i16
  %conv3036 = sext i16 %conv3035 to i32
  %601 = load i64, i64* %dst_size, align 8
  %conv3037 = trunc i64 %601 to i16
  %conv3038 = sext i16 %conv3037 to i32
  %mul3039 = mul nsw i32 0, %conv3038
  %602 = load i32*, i32** %buf_end, align 8
  %603 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3040 = ptrtoint i32* %602 to i64
  %sub.ptr.rhs.cast3041 = ptrtoint i32* %603 to i64
  %sub.ptr.sub3042 = sub i64 %sub.ptr.lhs.cast3040, %sub.ptr.rhs.cast3041
  %sub.ptr.div3043 = sdiv exact i64 %sub.ptr.sub3042, 4
  %conv3044 = trunc i64 %sub.ptr.div3043 to i16
  %conv3045 = sext i16 %conv3044 to i32
  %add3046 = add nsw i32 %mul3039, %conv3045
  %mul3047 = mul nsw i32 0, %add3046
  %sub3048 = sub nsw i32 %mul3047, 1
  %cmp3049 = icmp slt i32 %sub3048, 0
  br i1 %cmp3049, label %cond.true.3051, label %cond.false.3085

cond.true.3051:                                   ; preds = %cond.true.3030
  %604 = load i64, i64* %dst_size, align 8
  %conv3052 = trunc i64 %604 to i16
  %conv3053 = sext i16 %conv3052 to i32
  %mul3054 = mul nsw i32 0, %conv3053
  %605 = load i32*, i32** %buf_end, align 8
  %606 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3055 = ptrtoint i32* %605 to i64
  %sub.ptr.rhs.cast3056 = ptrtoint i32* %606 to i64
  %sub.ptr.sub3057 = sub i64 %sub.ptr.lhs.cast3055, %sub.ptr.rhs.cast3056
  %sub.ptr.div3058 = sdiv exact i64 %sub.ptr.sub3057, 4
  %conv3059 = trunc i64 %sub.ptr.div3058 to i16
  %conv3060 = sext i16 %conv3059 to i32
  %add3061 = add nsw i32 %mul3054, %conv3060
  %mul3062 = mul nsw i32 0, %add3061
  %add3063 = add nsw i32 %mul3062, 0
  %neg3064 = xor i32 %add3063, -1
  %cmp3065 = icmp eq i32 %neg3064, -1
  %conv3066 = zext i1 %cmp3065 to i32
  %sub3067 = sub nsw i32 0, %conv3066
  %607 = load i64, i64* %dst_size, align 8
  %conv3068 = trunc i64 %607 to i16
  %conv3069 = sext i16 %conv3068 to i32
  %mul3070 = mul nsw i32 0, %conv3069
  %608 = load i32*, i32** %buf_end, align 8
  %609 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3071 = ptrtoint i32* %608 to i64
  %sub.ptr.rhs.cast3072 = ptrtoint i32* %609 to i64
  %sub.ptr.sub3073 = sub i64 %sub.ptr.lhs.cast3071, %sub.ptr.rhs.cast3072
  %sub.ptr.div3074 = sdiv exact i64 %sub.ptr.sub3073, 4
  %conv3075 = trunc i64 %sub.ptr.div3074 to i16
  %conv3076 = sext i16 %conv3075 to i32
  %add3077 = add nsw i32 %mul3070, %conv3076
  %mul3078 = mul nsw i32 0, %add3077
  %add3079 = add nsw i32 %mul3078, 1
  %shl3080 = shl i32 %add3079, 30
  %sub3081 = sub nsw i32 %shl3080, 1
  %mul3082 = mul nsw i32 %sub3081, 2
  %add3083 = add nsw i32 %mul3082, 1
  %sub3084 = sub nsw i32 %sub3067, %add3083
  br label %cond.end.3098

cond.false.3085:                                  ; preds = %cond.true.3030
  %610 = load i64, i64* %dst_size, align 8
  %conv3086 = trunc i64 %610 to i16
  %conv3087 = sext i16 %conv3086 to i32
  %mul3088 = mul nsw i32 0, %conv3087
  %611 = load i32*, i32** %buf_end, align 8
  %612 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3089 = ptrtoint i32* %611 to i64
  %sub.ptr.rhs.cast3090 = ptrtoint i32* %612 to i64
  %sub.ptr.sub3091 = sub i64 %sub.ptr.lhs.cast3089, %sub.ptr.rhs.cast3090
  %sub.ptr.div3092 = sdiv exact i64 %sub.ptr.sub3091, 4
  %conv3093 = trunc i64 %sub.ptr.div3092 to i16
  %conv3094 = sext i16 %conv3093 to i32
  %add3095 = add nsw i32 %mul3088, %conv3094
  %mul3096 = mul nsw i32 0, %add3095
  %add3097 = add nsw i32 %mul3096, 0
  br label %cond.end.3098

cond.end.3098:                                    ; preds = %cond.false.3085, %cond.true.3051
  %cond3099 = phi i32 [ %sub3084, %cond.true.3051 ], [ %add3097, %cond.false.3085 ]
  %613 = load i64, i64* %dst_size, align 8
  %conv3100 = trunc i64 %613 to i16
  %conv3101 = sext i16 %conv3100 to i32
  %sub3102 = sub nsw i32 %cond3099, %conv3101
  %cmp3103 = icmp slt i32 %conv3036, %sub3102
  br i1 %cmp3103, label %cond.true.3261, label %lor.lhs.false.3223

cond.false.3105:                                  ; preds = %cond.true.3025
  %614 = load i64, i64* %dst_size, align 8
  %conv3106 = trunc i64 %614 to i16
  %conv3107 = sext i16 %conv3106 to i32
  %mul3108 = mul nsw i32 0, %conv3107
  %615 = load i32*, i32** %buf_end, align 8
  %616 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3109 = ptrtoint i32* %615 to i64
  %sub.ptr.rhs.cast3110 = ptrtoint i32* %616 to i64
  %sub.ptr.sub3111 = sub i64 %sub.ptr.lhs.cast3109, %sub.ptr.rhs.cast3110
  %sub.ptr.div3112 = sdiv exact i64 %sub.ptr.sub3111, 4
  %conv3113 = trunc i64 %sub.ptr.div3112 to i16
  %conv3114 = sext i16 %conv3113 to i32
  %add3115 = add nsw i32 %mul3108, %conv3114
  %mul3116 = mul nsw i32 0, %add3115
  %sub3117 = sub nsw i32 %mul3116, 1
  %cmp3118 = icmp slt i32 %sub3117, 0
  br i1 %cmp3118, label %cond.true.3120, label %cond.false.3137

cond.true.3120:                                   ; preds = %cond.false.3105
  %617 = load i64, i64* %dst_size, align 8
  %conv3121 = trunc i64 %617 to i16
  %conv3122 = sext i16 %conv3121 to i32
  %mul3123 = mul nsw i32 0, %conv3122
  %618 = load i32*, i32** %buf_end, align 8
  %619 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3124 = ptrtoint i32* %618 to i64
  %sub.ptr.rhs.cast3125 = ptrtoint i32* %619 to i64
  %sub.ptr.sub3126 = sub i64 %sub.ptr.lhs.cast3124, %sub.ptr.rhs.cast3125
  %sub.ptr.div3127 = sdiv exact i64 %sub.ptr.sub3126, 4
  %conv3128 = trunc i64 %sub.ptr.div3127 to i16
  %conv3129 = sext i16 %conv3128 to i32
  %add3130 = add nsw i32 %mul3123, %conv3129
  %mul3131 = mul nsw i32 0, %add3130
  %add3132 = add nsw i32 %mul3131, 1
  %shl3133 = shl i32 %add3132, 30
  %sub3134 = sub nsw i32 %shl3133, 1
  %mul3135 = mul nsw i32 %sub3134, 2
  %add3136 = add nsw i32 %mul3135, 1
  br label %cond.end.3150

cond.false.3137:                                  ; preds = %cond.false.3105
  %620 = load i64, i64* %dst_size, align 8
  %conv3138 = trunc i64 %620 to i16
  %conv3139 = sext i16 %conv3138 to i32
  %mul3140 = mul nsw i32 0, %conv3139
  %621 = load i32*, i32** %buf_end, align 8
  %622 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3141 = ptrtoint i32* %621 to i64
  %sub.ptr.rhs.cast3142 = ptrtoint i32* %622 to i64
  %sub.ptr.sub3143 = sub i64 %sub.ptr.lhs.cast3141, %sub.ptr.rhs.cast3142
  %sub.ptr.div3144 = sdiv exact i64 %sub.ptr.sub3143, 4
  %conv3145 = trunc i64 %sub.ptr.div3144 to i16
  %conv3146 = sext i16 %conv3145 to i32
  %add3147 = add nsw i32 %mul3140, %conv3146
  %mul3148 = mul nsw i32 0, %add3147
  %sub3149 = sub nsw i32 %mul3148, 1
  br label %cond.end.3150

cond.end.3150:                                    ; preds = %cond.false.3137, %cond.true.3120
  %cond3151 = phi i32 [ %add3136, %cond.true.3120 ], [ %sub3149, %cond.false.3137 ]
  %623 = load i64, i64* %dst_size, align 8
  %conv3152 = trunc i64 %623 to i16
  %conv3153 = sext i16 %conv3152 to i32
  %sub3154 = sub nsw i32 %cond3151, %conv3153
  %624 = load i32*, i32** %buf_end, align 8
  %625 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3155 = ptrtoint i32* %624 to i64
  %sub.ptr.rhs.cast3156 = ptrtoint i32* %625 to i64
  %sub.ptr.sub3157 = sub i64 %sub.ptr.lhs.cast3155, %sub.ptr.rhs.cast3156
  %sub.ptr.div3158 = sdiv exact i64 %sub.ptr.sub3157, 4
  %conv3159 = trunc i64 %sub.ptr.div3158 to i16
  %conv3160 = sext i16 %conv3159 to i32
  %cmp3161 = icmp slt i32 %sub3154, %conv3160
  br i1 %cmp3161, label %cond.true.3261, label %lor.lhs.false.3223

cond.false.3163:                                  ; preds = %cond.end.3021
  %626 = load i32*, i32** %buf_end, align 8
  %627 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3164 = ptrtoint i32* %626 to i64
  %sub.ptr.rhs.cast3165 = ptrtoint i32* %627 to i64
  %sub.ptr.sub3166 = sub i64 %sub.ptr.lhs.cast3164, %sub.ptr.rhs.cast3165
  %sub.ptr.div3167 = sdiv exact i64 %sub.ptr.sub3166, 4
  %conv3168 = trunc i64 %sub.ptr.div3167 to i16
  %conv3169 = sext i16 %conv3168 to i32
  %cmp3170 = icmp slt i32 %conv3169, 0
  br i1 %cmp3170, label %cond.true.3172, label %cond.false.3186

cond.true.3172:                                   ; preds = %cond.false.3163
  %628 = load i64, i64* %dst_size, align 8
  %conv3173 = trunc i64 %628 to i16
  %conv3174 = sext i16 %conv3173 to i32
  %629 = load i32*, i32** %buf_end, align 8
  %630 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3175 = ptrtoint i32* %629 to i64
  %sub.ptr.rhs.cast3176 = ptrtoint i32* %630 to i64
  %sub.ptr.sub3177 = sub i64 %sub.ptr.lhs.cast3175, %sub.ptr.rhs.cast3176
  %sub.ptr.div3178 = sdiv exact i64 %sub.ptr.sub3177, 4
  %conv3179 = trunc i64 %sub.ptr.div3178 to i16
  %conv3180 = sext i16 %conv3179 to i32
  %631 = load i64, i64* %dst_size, align 8
  %conv3181 = trunc i64 %631 to i16
  %conv3182 = sext i16 %conv3181 to i32
  %add3183 = add nsw i32 %conv3180, %conv3182
  %cmp3184 = icmp sle i32 %conv3174, %add3183
  br i1 %cmp3184, label %cond.true.3261, label %lor.lhs.false.3223

cond.false.3186:                                  ; preds = %cond.false.3163
  %632 = load i64, i64* %dst_size, align 8
  %conv3187 = trunc i64 %632 to i16
  %conv3188 = sext i16 %conv3187 to i32
  %cmp3189 = icmp slt i32 %conv3188, 0
  br i1 %cmp3189, label %cond.true.3191, label %cond.false.3209

cond.true.3191:                                   ; preds = %cond.false.3186
  %633 = load i32*, i32** %buf_end, align 8
  %634 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3192 = ptrtoint i32* %633 to i64
  %sub.ptr.rhs.cast3193 = ptrtoint i32* %634 to i64
  %sub.ptr.sub3194 = sub i64 %sub.ptr.lhs.cast3192, %sub.ptr.rhs.cast3193
  %sub.ptr.div3195 = sdiv exact i64 %sub.ptr.sub3194, 4
  %conv3196 = trunc i64 %sub.ptr.div3195 to i16
  %conv3197 = sext i16 %conv3196 to i32
  %635 = load i32*, i32** %buf_end, align 8
  %636 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3198 = ptrtoint i32* %635 to i64
  %sub.ptr.rhs.cast3199 = ptrtoint i32* %636 to i64
  %sub.ptr.sub3200 = sub i64 %sub.ptr.lhs.cast3198, %sub.ptr.rhs.cast3199
  %sub.ptr.div3201 = sdiv exact i64 %sub.ptr.sub3200, 4
  %conv3202 = trunc i64 %sub.ptr.div3201 to i16
  %conv3203 = sext i16 %conv3202 to i32
  %637 = load i64, i64* %dst_size, align 8
  %conv3204 = trunc i64 %637 to i16
  %conv3205 = sext i16 %conv3204 to i32
  %add3206 = add nsw i32 %conv3203, %conv3205
  %cmp3207 = icmp sle i32 %conv3197, %add3206
  br i1 %cmp3207, label %cond.true.3261, label %lor.lhs.false.3223

cond.false.3209:                                  ; preds = %cond.false.3186
  %638 = load i32*, i32** %buf_end, align 8
  %639 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3210 = ptrtoint i32* %638 to i64
  %sub.ptr.rhs.cast3211 = ptrtoint i32* %639 to i64
  %sub.ptr.sub3212 = sub i64 %sub.ptr.lhs.cast3210, %sub.ptr.rhs.cast3211
  %sub.ptr.div3213 = sdiv exact i64 %sub.ptr.sub3212, 4
  %conv3214 = trunc i64 %sub.ptr.div3213 to i16
  %conv3215 = sext i16 %conv3214 to i32
  %640 = load i64, i64* %dst_size, align 8
  %conv3216 = trunc i64 %640 to i16
  %conv3217 = sext i16 %conv3216 to i32
  %add3218 = add nsw i32 %conv3215, %conv3217
  %641 = load i64, i64* %dst_size, align 8
  %conv3219 = trunc i64 %641 to i16
  %conv3220 = sext i16 %conv3219 to i32
  %cmp3221 = icmp slt i32 %add3218, %conv3220
  br i1 %cmp3221, label %cond.true.3261, label %lor.lhs.false.3223

lor.lhs.false.3223:                               ; preds = %cond.false.3209, %cond.true.3191, %cond.true.3172, %cond.end.3150, %cond.end.3098
  %642 = load i32*, i32** %buf_end, align 8
  %643 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3224 = ptrtoint i32* %642 to i64
  %sub.ptr.rhs.cast3225 = ptrtoint i32* %643 to i64
  %sub.ptr.sub3226 = sub i64 %sub.ptr.lhs.cast3224, %sub.ptr.rhs.cast3225
  %sub.ptr.div3227 = sdiv exact i64 %sub.ptr.sub3226, 4
  %conv3228 = trunc i64 %sub.ptr.div3227 to i16
  %conv3229 = sext i16 %conv3228 to i32
  %644 = load i64, i64* %dst_size, align 8
  %conv3230 = trunc i64 %644 to i16
  %conv3231 = sext i16 %conv3230 to i32
  %add3232 = add nsw i32 %conv3229, %conv3231
  %mul3233 = mul nsw i32 0, %add3232
  %sub3234 = sub nsw i32 %mul3233, 1
  %cmp3235 = icmp slt i32 %sub3234, 0
  br i1 %cmp3235, label %land.lhs.true.3237, label %lor.lhs.false.3249

land.lhs.true.3237:                               ; preds = %lor.lhs.false.3223
  %645 = load i32*, i32** %buf_end, align 8
  %646 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3238 = ptrtoint i32* %645 to i64
  %sub.ptr.rhs.cast3239 = ptrtoint i32* %646 to i64
  %sub.ptr.sub3240 = sub i64 %sub.ptr.lhs.cast3238, %sub.ptr.rhs.cast3239
  %sub.ptr.div3241 = sdiv exact i64 %sub.ptr.sub3240, 4
  %conv3242 = trunc i64 %sub.ptr.div3241 to i16
  %conv3243 = sext i16 %conv3242 to i32
  %647 = load i64, i64* %dst_size, align 8
  %conv3244 = trunc i64 %647 to i16
  %conv3245 = sext i16 %conv3244 to i32
  %add3246 = add nsw i32 %conv3243, %conv3245
  %cmp3247 = icmp slt i32 %add3246, -32768
  br i1 %cmp3247, label %cond.true.3261, label %lor.lhs.false.3249

lor.lhs.false.3249:                               ; preds = %land.lhs.true.3237, %lor.lhs.false.3223
  %648 = load i32*, i32** %buf_end, align 8
  %649 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3250 = ptrtoint i32* %648 to i64
  %sub.ptr.rhs.cast3251 = ptrtoint i32* %649 to i64
  %sub.ptr.sub3252 = sub i64 %sub.ptr.lhs.cast3250, %sub.ptr.rhs.cast3251
  %sub.ptr.div3253 = sdiv exact i64 %sub.ptr.sub3252, 4
  %conv3254 = trunc i64 %sub.ptr.div3253 to i16
  %conv3255 = sext i16 %conv3254 to i32
  %650 = load i64, i64* %dst_size, align 8
  %conv3256 = trunc i64 %650 to i16
  %conv3257 = sext i16 %conv3256 to i32
  %add3258 = add nsw i32 %conv3255, %conv3257
  %cmp3259 = icmp slt i32 32767, %add3258
  br i1 %cmp3259, label %cond.true.3261, label %cond.false.3302

cond.true.3261:                                   ; preds = %lor.lhs.false.3249, %land.lhs.true.3237, %cond.false.3209, %cond.true.3191, %cond.true.3172, %cond.end.3150, %cond.end.3098
  %651 = load i32*, i32** %buf_end, align 8
  %652 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3262 = ptrtoint i32* %651 to i64
  %sub.ptr.rhs.cast3263 = ptrtoint i32* %652 to i64
  %sub.ptr.sub3264 = sub i64 %sub.ptr.lhs.cast3262, %sub.ptr.rhs.cast3263
  %sub.ptr.div3265 = sdiv exact i64 %sub.ptr.sub3264, 4
  %conv3266 = trunc i64 %sub.ptr.div3265 to i16
  %conv3267 = zext i16 %conv3266 to i32
  %653 = load i64, i64* %dst_size, align 8
  %conv3268 = trunc i64 %653 to i16
  %conv3269 = zext i16 %conv3268 to i32
  %add3270 = add nsw i32 %conv3267, %conv3269
  %cmp3271 = icmp sle i32 %add3270, 32767
  br i1 %cmp3271, label %cond.true.3273, label %cond.false.3285

cond.true.3273:                                   ; preds = %cond.true.3261
  %654 = load i32*, i32** %buf_end, align 8
  %655 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3274 = ptrtoint i32* %654 to i64
  %sub.ptr.rhs.cast3275 = ptrtoint i32* %655 to i64
  %sub.ptr.sub3276 = sub i64 %sub.ptr.lhs.cast3274, %sub.ptr.rhs.cast3275
  %sub.ptr.div3277 = sdiv exact i64 %sub.ptr.sub3276, 4
  %conv3278 = trunc i64 %sub.ptr.div3277 to i16
  %conv3279 = zext i16 %conv3278 to i32
  %656 = load i64, i64* %dst_size, align 8
  %conv3280 = trunc i64 %656 to i16
  %conv3281 = zext i16 %conv3280 to i32
  %add3282 = add nsw i32 %conv3279, %conv3281
  %conv3283 = trunc i32 %add3282 to i16
  %conv3284 = sext i16 %conv3283 to i32
  br label %cond.end.3299

cond.false.3285:                                  ; preds = %cond.true.3261
  %657 = load i32*, i32** %buf_end, align 8
  %658 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3286 = ptrtoint i32* %657 to i64
  %sub.ptr.rhs.cast3287 = ptrtoint i32* %658 to i64
  %sub.ptr.sub3288 = sub i64 %sub.ptr.lhs.cast3286, %sub.ptr.rhs.cast3287
  %sub.ptr.div3289 = sdiv exact i64 %sub.ptr.sub3288, 4
  %conv3290 = trunc i64 %sub.ptr.div3289 to i16
  %conv3291 = zext i16 %conv3290 to i32
  %659 = load i64, i64* %dst_size, align 8
  %conv3292 = trunc i64 %659 to i16
  %conv3293 = zext i16 %conv3292 to i32
  %add3294 = add nsw i32 %conv3291, %conv3293
  %sub3295 = sub nsw i32 %add3294, -32768
  %conv3296 = trunc i32 %sub3295 to i16
  %conv3297 = sext i16 %conv3296 to i32
  %add3298 = add nsw i32 %conv3297, -32768
  br label %cond.end.3299

cond.end.3299:                                    ; preds = %cond.false.3285, %cond.true.3273
  %cond3300 = phi i32 [ %conv3284, %cond.true.3273 ], [ %add3298, %cond.false.3285 ]
  %conv3301 = sext i32 %cond3300 to i64
  store i64 %conv3301, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.3302:                                  ; preds = %lor.lhs.false.3249
  %660 = load i32*, i32** %buf_end, align 8
  %661 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3303 = ptrtoint i32* %660 to i64
  %sub.ptr.rhs.cast3304 = ptrtoint i32* %661 to i64
  %sub.ptr.sub3305 = sub i64 %sub.ptr.lhs.cast3303, %sub.ptr.rhs.cast3304
  %sub.ptr.div3306 = sdiv exact i64 %sub.ptr.sub3305, 4
  %conv3307 = trunc i64 %sub.ptr.div3306 to i16
  %conv3308 = zext i16 %conv3307 to i32
  %662 = load i64, i64* %dst_size, align 8
  %conv3309 = trunc i64 %662 to i16
  %conv3310 = zext i16 %conv3309 to i32
  %add3311 = add nsw i32 %conv3308, %conv3310
  %cmp3312 = icmp sle i32 %add3311, 32767
  br i1 %cmp3312, label %cond.true.3314, label %cond.false.3326

cond.true.3314:                                   ; preds = %cond.false.3302
  %663 = load i32*, i32** %buf_end, align 8
  %664 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3315 = ptrtoint i32* %663 to i64
  %sub.ptr.rhs.cast3316 = ptrtoint i32* %664 to i64
  %sub.ptr.sub3317 = sub i64 %sub.ptr.lhs.cast3315, %sub.ptr.rhs.cast3316
  %sub.ptr.div3318 = sdiv exact i64 %sub.ptr.sub3317, 4
  %conv3319 = trunc i64 %sub.ptr.div3318 to i16
  %conv3320 = zext i16 %conv3319 to i32
  %665 = load i64, i64* %dst_size, align 8
  %conv3321 = trunc i64 %665 to i16
  %conv3322 = zext i16 %conv3321 to i32
  %add3323 = add nsw i32 %conv3320, %conv3322
  %conv3324 = trunc i32 %add3323 to i16
  %conv3325 = sext i16 %conv3324 to i32
  br label %cond.end.3340

cond.false.3326:                                  ; preds = %cond.false.3302
  %666 = load i32*, i32** %buf_end, align 8
  %667 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3327 = ptrtoint i32* %666 to i64
  %sub.ptr.rhs.cast3328 = ptrtoint i32* %667 to i64
  %sub.ptr.sub3329 = sub i64 %sub.ptr.lhs.cast3327, %sub.ptr.rhs.cast3328
  %sub.ptr.div3330 = sdiv exact i64 %sub.ptr.sub3329, 4
  %conv3331 = trunc i64 %sub.ptr.div3330 to i16
  %conv3332 = zext i16 %conv3331 to i32
  %668 = load i64, i64* %dst_size, align 8
  %conv3333 = trunc i64 %668 to i16
  %conv3334 = zext i16 %conv3333 to i32
  %add3335 = add nsw i32 %conv3332, %conv3334
  %sub3336 = sub nsw i32 %add3335, -32768
  %conv3337 = trunc i32 %sub3336 to i16
  %conv3338 = sext i16 %conv3337 to i32
  %add3339 = add nsw i32 %conv3338, -32768
  br label %cond.end.3340

cond.end.3340:                                    ; preds = %cond.false.3326, %cond.true.3314
  %cond3341 = phi i32 [ %conv3325, %cond.true.3314 ], [ %add3339, %cond.false.3326 ]
  %conv3342 = sext i32 %cond3341 to i64
  store i64 %conv3342, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.3343:                                  ; preds = %cond.true.2958
  %669 = load i64, i64* %dst_size, align 8
  %mul3344 = mul nsw i64 0, %669
  %670 = load i32*, i32** %buf_end, align 8
  %671 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3345 = ptrtoint i32* %670 to i64
  %sub.ptr.rhs.cast3346 = ptrtoint i32* %671 to i64
  %sub.ptr.sub3347 = sub i64 %sub.ptr.lhs.cast3345, %sub.ptr.rhs.cast3346
  %sub.ptr.div3348 = sdiv exact i64 %sub.ptr.sub3347, 4
  %add3349 = add nsw i64 %mul3344, %sub.ptr.div3348
  %mul3350 = mul nsw i64 0, %add3349
  %sub3351 = sub nsw i64 %mul3350, 1
  %cmp3352 = icmp slt i64 %sub3351, 0
  br i1 %cmp3352, label %cond.true.3354, label %cond.false.3381

cond.true.3354:                                   ; preds = %cond.false.3343
  %672 = load i64, i64* %dst_size, align 8
  %mul3355 = mul nsw i64 0, %672
  %673 = load i32*, i32** %buf_end, align 8
  %674 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3356 = ptrtoint i32* %673 to i64
  %sub.ptr.rhs.cast3357 = ptrtoint i32* %674 to i64
  %sub.ptr.sub3358 = sub i64 %sub.ptr.lhs.cast3356, %sub.ptr.rhs.cast3357
  %sub.ptr.div3359 = sdiv exact i64 %sub.ptr.sub3358, 4
  %add3360 = add nsw i64 %mul3355, %sub.ptr.div3359
  %mul3361 = mul nsw i64 0, %add3360
  %add3362 = add nsw i64 %mul3361, 0
  %neg3363 = xor i64 %add3362, -1
  %cmp3364 = icmp eq i64 %neg3363, -1
  %conv3365 = zext i1 %cmp3364 to i32
  %sub3366 = sub nsw i32 0, %conv3365
  %conv3367 = sext i32 %sub3366 to i64
  %675 = load i64, i64* %dst_size, align 8
  %mul3368 = mul nsw i64 0, %675
  %676 = load i32*, i32** %buf_end, align 8
  %677 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3369 = ptrtoint i32* %676 to i64
  %sub.ptr.rhs.cast3370 = ptrtoint i32* %677 to i64
  %sub.ptr.sub3371 = sub i64 %sub.ptr.lhs.cast3369, %sub.ptr.rhs.cast3370
  %sub.ptr.div3372 = sdiv exact i64 %sub.ptr.sub3371, 4
  %add3373 = add nsw i64 %mul3368, %sub.ptr.div3372
  %mul3374 = mul nsw i64 0, %add3373
  %add3375 = add nsw i64 %mul3374, 1
  %shl3376 = shl i64 %add3375, 62
  %sub3377 = sub nsw i64 %shl3376, 1
  %mul3378 = mul nsw i64 %sub3377, 2
  %add3379 = add nsw i64 %mul3378, 1
  %sub3380 = sub nsw i64 %conv3367, %add3379
  br label %cond.end.3390

cond.false.3381:                                  ; preds = %cond.false.3343
  %678 = load i64, i64* %dst_size, align 8
  %mul3382 = mul nsw i64 0, %678
  %679 = load i32*, i32** %buf_end, align 8
  %680 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3383 = ptrtoint i32* %679 to i64
  %sub.ptr.rhs.cast3384 = ptrtoint i32* %680 to i64
  %sub.ptr.sub3385 = sub i64 %sub.ptr.lhs.cast3383, %sub.ptr.rhs.cast3384
  %sub.ptr.div3386 = sdiv exact i64 %sub.ptr.sub3385, 4
  %add3387 = add nsw i64 %mul3382, %sub.ptr.div3386
  %mul3388 = mul nsw i64 0, %add3387
  %add3389 = add nsw i64 %mul3388, 0
  br label %cond.end.3390

cond.end.3390:                                    ; preds = %cond.false.3381, %cond.true.3354
  %cond3391 = phi i64 [ %sub3380, %cond.true.3354 ], [ %add3389, %cond.false.3381 ]
  %cmp3392 = icmp slt i64 %cond3391, 0
  br i1 %cmp3392, label %cond.true.3394, label %cond.false.3495

cond.true.3394:                                   ; preds = %cond.end.3390
  %681 = load i64, i64* %dst_size, align 8
  %cmp3395 = icmp slt i64 %681, 0
  br i1 %cmp3395, label %cond.true.3397, label %cond.false.3453

cond.true.3397:                                   ; preds = %cond.true.3394
  %682 = load i32*, i32** %buf_end, align 8
  %683 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3398 = ptrtoint i32* %682 to i64
  %sub.ptr.rhs.cast3399 = ptrtoint i32* %683 to i64
  %sub.ptr.sub3400 = sub i64 %sub.ptr.lhs.cast3398, %sub.ptr.rhs.cast3399
  %sub.ptr.div3401 = sdiv exact i64 %sub.ptr.sub3400, 4
  %684 = load i64, i64* %dst_size, align 8
  %mul3402 = mul nsw i64 0, %684
  %685 = load i32*, i32** %buf_end, align 8
  %686 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3403 = ptrtoint i32* %685 to i64
  %sub.ptr.rhs.cast3404 = ptrtoint i32* %686 to i64
  %sub.ptr.sub3405 = sub i64 %sub.ptr.lhs.cast3403, %sub.ptr.rhs.cast3404
  %sub.ptr.div3406 = sdiv exact i64 %sub.ptr.sub3405, 4
  %add3407 = add nsw i64 %mul3402, %sub.ptr.div3406
  %mul3408 = mul nsw i64 0, %add3407
  %sub3409 = sub nsw i64 %mul3408, 1
  %cmp3410 = icmp slt i64 %sub3409, 0
  br i1 %cmp3410, label %cond.true.3412, label %cond.false.3439

cond.true.3412:                                   ; preds = %cond.true.3397
  %687 = load i64, i64* %dst_size, align 8
  %mul3413 = mul nsw i64 0, %687
  %688 = load i32*, i32** %buf_end, align 8
  %689 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3414 = ptrtoint i32* %688 to i64
  %sub.ptr.rhs.cast3415 = ptrtoint i32* %689 to i64
  %sub.ptr.sub3416 = sub i64 %sub.ptr.lhs.cast3414, %sub.ptr.rhs.cast3415
  %sub.ptr.div3417 = sdiv exact i64 %sub.ptr.sub3416, 4
  %add3418 = add nsw i64 %mul3413, %sub.ptr.div3417
  %mul3419 = mul nsw i64 0, %add3418
  %add3420 = add nsw i64 %mul3419, 0
  %neg3421 = xor i64 %add3420, -1
  %cmp3422 = icmp eq i64 %neg3421, -1
  %conv3423 = zext i1 %cmp3422 to i32
  %sub3424 = sub nsw i32 0, %conv3423
  %conv3425 = sext i32 %sub3424 to i64
  %690 = load i64, i64* %dst_size, align 8
  %mul3426 = mul nsw i64 0, %690
  %691 = load i32*, i32** %buf_end, align 8
  %692 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3427 = ptrtoint i32* %691 to i64
  %sub.ptr.rhs.cast3428 = ptrtoint i32* %692 to i64
  %sub.ptr.sub3429 = sub i64 %sub.ptr.lhs.cast3427, %sub.ptr.rhs.cast3428
  %sub.ptr.div3430 = sdiv exact i64 %sub.ptr.sub3429, 4
  %add3431 = add nsw i64 %mul3426, %sub.ptr.div3430
  %mul3432 = mul nsw i64 0, %add3431
  %add3433 = add nsw i64 %mul3432, 1
  %shl3434 = shl i64 %add3433, 62
  %sub3435 = sub nsw i64 %shl3434, 1
  %mul3436 = mul nsw i64 %sub3435, 2
  %add3437 = add nsw i64 %mul3436, 1
  %sub3438 = sub nsw i64 %conv3425, %add3437
  br label %cond.end.3448

cond.false.3439:                                  ; preds = %cond.true.3397
  %693 = load i64, i64* %dst_size, align 8
  %mul3440 = mul nsw i64 0, %693
  %694 = load i32*, i32** %buf_end, align 8
  %695 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3441 = ptrtoint i32* %694 to i64
  %sub.ptr.rhs.cast3442 = ptrtoint i32* %695 to i64
  %sub.ptr.sub3443 = sub i64 %sub.ptr.lhs.cast3441, %sub.ptr.rhs.cast3442
  %sub.ptr.div3444 = sdiv exact i64 %sub.ptr.sub3443, 4
  %add3445 = add nsw i64 %mul3440, %sub.ptr.div3444
  %mul3446 = mul nsw i64 0, %add3445
  %add3447 = add nsw i64 %mul3446, 0
  br label %cond.end.3448

cond.end.3448:                                    ; preds = %cond.false.3439, %cond.true.3412
  %cond3449 = phi i64 [ %sub3438, %cond.true.3412 ], [ %add3447, %cond.false.3439 ]
  %696 = load i64, i64* %dst_size, align 8
  %sub3450 = sub nsw i64 %cond3449, %696
  %cmp3451 = icmp slt i64 %sub.ptr.div3401, %sub3450
  br i1 %cmp3451, label %cond.true.3559, label %lor.lhs.false.3533

cond.false.3453:                                  ; preds = %cond.true.3394
  %697 = load i64, i64* %dst_size, align 8
  %mul3454 = mul nsw i64 0, %697
  %698 = load i32*, i32** %buf_end, align 8
  %699 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3455 = ptrtoint i32* %698 to i64
  %sub.ptr.rhs.cast3456 = ptrtoint i32* %699 to i64
  %sub.ptr.sub3457 = sub i64 %sub.ptr.lhs.cast3455, %sub.ptr.rhs.cast3456
  %sub.ptr.div3458 = sdiv exact i64 %sub.ptr.sub3457, 4
  %add3459 = add nsw i64 %mul3454, %sub.ptr.div3458
  %mul3460 = mul nsw i64 0, %add3459
  %sub3461 = sub nsw i64 %mul3460, 1
  %cmp3462 = icmp slt i64 %sub3461, 0
  br i1 %cmp3462, label %cond.true.3464, label %cond.false.3477

cond.true.3464:                                   ; preds = %cond.false.3453
  %700 = load i64, i64* %dst_size, align 8
  %mul3465 = mul nsw i64 0, %700
  %701 = load i32*, i32** %buf_end, align 8
  %702 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3466 = ptrtoint i32* %701 to i64
  %sub.ptr.rhs.cast3467 = ptrtoint i32* %702 to i64
  %sub.ptr.sub3468 = sub i64 %sub.ptr.lhs.cast3466, %sub.ptr.rhs.cast3467
  %sub.ptr.div3469 = sdiv exact i64 %sub.ptr.sub3468, 4
  %add3470 = add nsw i64 %mul3465, %sub.ptr.div3469
  %mul3471 = mul nsw i64 0, %add3470
  %add3472 = add nsw i64 %mul3471, 1
  %shl3473 = shl i64 %add3472, 62
  %sub3474 = sub nsw i64 %shl3473, 1
  %mul3475 = mul nsw i64 %sub3474, 2
  %add3476 = add nsw i64 %mul3475, 1
  br label %cond.end.3486

cond.false.3477:                                  ; preds = %cond.false.3453
  %703 = load i64, i64* %dst_size, align 8
  %mul3478 = mul nsw i64 0, %703
  %704 = load i32*, i32** %buf_end, align 8
  %705 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3479 = ptrtoint i32* %704 to i64
  %sub.ptr.rhs.cast3480 = ptrtoint i32* %705 to i64
  %sub.ptr.sub3481 = sub i64 %sub.ptr.lhs.cast3479, %sub.ptr.rhs.cast3480
  %sub.ptr.div3482 = sdiv exact i64 %sub.ptr.sub3481, 4
  %add3483 = add nsw i64 %mul3478, %sub.ptr.div3482
  %mul3484 = mul nsw i64 0, %add3483
  %sub3485 = sub nsw i64 %mul3484, 1
  br label %cond.end.3486

cond.end.3486:                                    ; preds = %cond.false.3477, %cond.true.3464
  %cond3487 = phi i64 [ %add3476, %cond.true.3464 ], [ %sub3485, %cond.false.3477 ]
  %706 = load i64, i64* %dst_size, align 8
  %sub3488 = sub nsw i64 %cond3487, %706
  %707 = load i32*, i32** %buf_end, align 8
  %708 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3489 = ptrtoint i32* %707 to i64
  %sub.ptr.rhs.cast3490 = ptrtoint i32* %708 to i64
  %sub.ptr.sub3491 = sub i64 %sub.ptr.lhs.cast3489, %sub.ptr.rhs.cast3490
  %sub.ptr.div3492 = sdiv exact i64 %sub.ptr.sub3491, 4
  %cmp3493 = icmp slt i64 %sub3488, %sub.ptr.div3492
  br i1 %cmp3493, label %cond.true.3559, label %lor.lhs.false.3533

cond.false.3495:                                  ; preds = %cond.end.3390
  %709 = load i32*, i32** %buf_end, align 8
  %710 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3496 = ptrtoint i32* %709 to i64
  %sub.ptr.rhs.cast3497 = ptrtoint i32* %710 to i64
  %sub.ptr.sub3498 = sub i64 %sub.ptr.lhs.cast3496, %sub.ptr.rhs.cast3497
  %sub.ptr.div3499 = sdiv exact i64 %sub.ptr.sub3498, 4
  %cmp3500 = icmp slt i64 %sub.ptr.div3499, 0
  br i1 %cmp3500, label %cond.true.3502, label %cond.false.3510

cond.true.3502:                                   ; preds = %cond.false.3495
  %711 = load i64, i64* %dst_size, align 8
  %712 = load i32*, i32** %buf_end, align 8
  %713 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3503 = ptrtoint i32* %712 to i64
  %sub.ptr.rhs.cast3504 = ptrtoint i32* %713 to i64
  %sub.ptr.sub3505 = sub i64 %sub.ptr.lhs.cast3503, %sub.ptr.rhs.cast3504
  %sub.ptr.div3506 = sdiv exact i64 %sub.ptr.sub3505, 4
  %714 = load i64, i64* %dst_size, align 8
  %add3507 = add nsw i64 %sub.ptr.div3506, %714
  %cmp3508 = icmp sle i64 %711, %add3507
  br i1 %cmp3508, label %cond.true.3559, label %lor.lhs.false.3533

cond.false.3510:                                  ; preds = %cond.false.3495
  %715 = load i64, i64* %dst_size, align 8
  %cmp3511 = icmp slt i64 %715, 0
  br i1 %cmp3511, label %cond.true.3513, label %cond.false.3525

cond.true.3513:                                   ; preds = %cond.false.3510
  %716 = load i32*, i32** %buf_end, align 8
  %717 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3514 = ptrtoint i32* %716 to i64
  %sub.ptr.rhs.cast3515 = ptrtoint i32* %717 to i64
  %sub.ptr.sub3516 = sub i64 %sub.ptr.lhs.cast3514, %sub.ptr.rhs.cast3515
  %sub.ptr.div3517 = sdiv exact i64 %sub.ptr.sub3516, 4
  %718 = load i32*, i32** %buf_end, align 8
  %719 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3518 = ptrtoint i32* %718 to i64
  %sub.ptr.rhs.cast3519 = ptrtoint i32* %719 to i64
  %sub.ptr.sub3520 = sub i64 %sub.ptr.lhs.cast3518, %sub.ptr.rhs.cast3519
  %sub.ptr.div3521 = sdiv exact i64 %sub.ptr.sub3520, 4
  %720 = load i64, i64* %dst_size, align 8
  %add3522 = add nsw i64 %sub.ptr.div3521, %720
  %cmp3523 = icmp sle i64 %sub.ptr.div3517, %add3522
  br i1 %cmp3523, label %cond.true.3559, label %lor.lhs.false.3533

cond.false.3525:                                  ; preds = %cond.false.3510
  %721 = load i32*, i32** %buf_end, align 8
  %722 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3526 = ptrtoint i32* %721 to i64
  %sub.ptr.rhs.cast3527 = ptrtoint i32* %722 to i64
  %sub.ptr.sub3528 = sub i64 %sub.ptr.lhs.cast3526, %sub.ptr.rhs.cast3527
  %sub.ptr.div3529 = sdiv exact i64 %sub.ptr.sub3528, 4
  %723 = load i64, i64* %dst_size, align 8
  %add3530 = add nsw i64 %sub.ptr.div3529, %723
  %724 = load i64, i64* %dst_size, align 8
  %cmp3531 = icmp slt i64 %add3530, %724
  br i1 %cmp3531, label %cond.true.3559, label %lor.lhs.false.3533

lor.lhs.false.3533:                               ; preds = %cond.false.3525, %cond.true.3513, %cond.true.3502, %cond.end.3486, %cond.end.3448
  %725 = load i32*, i32** %buf_end, align 8
  %726 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3534 = ptrtoint i32* %725 to i64
  %sub.ptr.rhs.cast3535 = ptrtoint i32* %726 to i64
  %sub.ptr.sub3536 = sub i64 %sub.ptr.lhs.cast3534, %sub.ptr.rhs.cast3535
  %sub.ptr.div3537 = sdiv exact i64 %sub.ptr.sub3536, 4
  %727 = load i64, i64* %dst_size, align 8
  %add3538 = add nsw i64 %sub.ptr.div3537, %727
  %mul3539 = mul nsw i64 0, %add3538
  %sub3540 = sub nsw i64 %mul3539, 1
  %cmp3541 = icmp slt i64 %sub3540, 0
  br i1 %cmp3541, label %land.lhs.true.3543, label %lor.lhs.false.3551

land.lhs.true.3543:                               ; preds = %lor.lhs.false.3533
  %728 = load i32*, i32** %buf_end, align 8
  %729 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3544 = ptrtoint i32* %728 to i64
  %sub.ptr.rhs.cast3545 = ptrtoint i32* %729 to i64
  %sub.ptr.sub3546 = sub i64 %sub.ptr.lhs.cast3544, %sub.ptr.rhs.cast3545
  %sub.ptr.div3547 = sdiv exact i64 %sub.ptr.sub3546, 4
  %730 = load i64, i64* %dst_size, align 8
  %add3548 = add nsw i64 %sub.ptr.div3547, %730
  %cmp3549 = icmp slt i64 %add3548, -32768
  br i1 %cmp3549, label %cond.true.3559, label %lor.lhs.false.3551

lor.lhs.false.3551:                               ; preds = %land.lhs.true.3543, %lor.lhs.false.3533
  %731 = load i32*, i32** %buf_end, align 8
  %732 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3552 = ptrtoint i32* %731 to i64
  %sub.ptr.rhs.cast3553 = ptrtoint i32* %732 to i64
  %sub.ptr.sub3554 = sub i64 %sub.ptr.lhs.cast3552, %sub.ptr.rhs.cast3553
  %sub.ptr.div3555 = sdiv exact i64 %sub.ptr.sub3554, 4
  %733 = load i64, i64* %dst_size, align 8
  %add3556 = add nsw i64 %sub.ptr.div3555, %733
  %cmp3557 = icmp slt i64 32767, %add3556
  br i1 %cmp3557, label %cond.true.3559, label %cond.false.3600

cond.true.3559:                                   ; preds = %lor.lhs.false.3551, %land.lhs.true.3543, %cond.false.3525, %cond.true.3513, %cond.true.3502, %cond.end.3486, %cond.end.3448
  %734 = load i32*, i32** %buf_end, align 8
  %735 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3560 = ptrtoint i32* %734 to i64
  %sub.ptr.rhs.cast3561 = ptrtoint i32* %735 to i64
  %sub.ptr.sub3562 = sub i64 %sub.ptr.lhs.cast3560, %sub.ptr.rhs.cast3561
  %sub.ptr.div3563 = sdiv exact i64 %sub.ptr.sub3562, 4
  %conv3564 = trunc i64 %sub.ptr.div3563 to i16
  %conv3565 = zext i16 %conv3564 to i32
  %736 = load i64, i64* %dst_size, align 8
  %conv3566 = trunc i64 %736 to i16
  %conv3567 = zext i16 %conv3566 to i32
  %add3568 = add nsw i32 %conv3565, %conv3567
  %cmp3569 = icmp sle i32 %add3568, 32767
  br i1 %cmp3569, label %cond.true.3571, label %cond.false.3583

cond.true.3571:                                   ; preds = %cond.true.3559
  %737 = load i32*, i32** %buf_end, align 8
  %738 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3572 = ptrtoint i32* %737 to i64
  %sub.ptr.rhs.cast3573 = ptrtoint i32* %738 to i64
  %sub.ptr.sub3574 = sub i64 %sub.ptr.lhs.cast3572, %sub.ptr.rhs.cast3573
  %sub.ptr.div3575 = sdiv exact i64 %sub.ptr.sub3574, 4
  %conv3576 = trunc i64 %sub.ptr.div3575 to i16
  %conv3577 = zext i16 %conv3576 to i32
  %739 = load i64, i64* %dst_size, align 8
  %conv3578 = trunc i64 %739 to i16
  %conv3579 = zext i16 %conv3578 to i32
  %add3580 = add nsw i32 %conv3577, %conv3579
  %conv3581 = trunc i32 %add3580 to i16
  %conv3582 = sext i16 %conv3581 to i32
  br label %cond.end.3597

cond.false.3583:                                  ; preds = %cond.true.3559
  %740 = load i32*, i32** %buf_end, align 8
  %741 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3584 = ptrtoint i32* %740 to i64
  %sub.ptr.rhs.cast3585 = ptrtoint i32* %741 to i64
  %sub.ptr.sub3586 = sub i64 %sub.ptr.lhs.cast3584, %sub.ptr.rhs.cast3585
  %sub.ptr.div3587 = sdiv exact i64 %sub.ptr.sub3586, 4
  %conv3588 = trunc i64 %sub.ptr.div3587 to i16
  %conv3589 = zext i16 %conv3588 to i32
  %742 = load i64, i64* %dst_size, align 8
  %conv3590 = trunc i64 %742 to i16
  %conv3591 = zext i16 %conv3590 to i32
  %add3592 = add nsw i32 %conv3589, %conv3591
  %sub3593 = sub nsw i32 %add3592, -32768
  %conv3594 = trunc i32 %sub3593 to i16
  %conv3595 = sext i16 %conv3594 to i32
  %add3596 = add nsw i32 %conv3595, -32768
  br label %cond.end.3597

cond.end.3597:                                    ; preds = %cond.false.3583, %cond.true.3571
  %cond3598 = phi i32 [ %conv3582, %cond.true.3571 ], [ %add3596, %cond.false.3583 ]
  %conv3599 = sext i32 %cond3598 to i64
  store i64 %conv3599, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.3600:                                  ; preds = %lor.lhs.false.3551
  %743 = load i32*, i32** %buf_end, align 8
  %744 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3601 = ptrtoint i32* %743 to i64
  %sub.ptr.rhs.cast3602 = ptrtoint i32* %744 to i64
  %sub.ptr.sub3603 = sub i64 %sub.ptr.lhs.cast3601, %sub.ptr.rhs.cast3602
  %sub.ptr.div3604 = sdiv exact i64 %sub.ptr.sub3603, 4
  %conv3605 = trunc i64 %sub.ptr.div3604 to i16
  %conv3606 = zext i16 %conv3605 to i32
  %745 = load i64, i64* %dst_size, align 8
  %conv3607 = trunc i64 %745 to i16
  %conv3608 = zext i16 %conv3607 to i32
  %add3609 = add nsw i32 %conv3606, %conv3608
  %cmp3610 = icmp sle i32 %add3609, 32767
  br i1 %cmp3610, label %cond.true.3612, label %cond.false.3624

cond.true.3612:                                   ; preds = %cond.false.3600
  %746 = load i32*, i32** %buf_end, align 8
  %747 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3613 = ptrtoint i32* %746 to i64
  %sub.ptr.rhs.cast3614 = ptrtoint i32* %747 to i64
  %sub.ptr.sub3615 = sub i64 %sub.ptr.lhs.cast3613, %sub.ptr.rhs.cast3614
  %sub.ptr.div3616 = sdiv exact i64 %sub.ptr.sub3615, 4
  %conv3617 = trunc i64 %sub.ptr.div3616 to i16
  %conv3618 = zext i16 %conv3617 to i32
  %748 = load i64, i64* %dst_size, align 8
  %conv3619 = trunc i64 %748 to i16
  %conv3620 = zext i16 %conv3619 to i32
  %add3621 = add nsw i32 %conv3618, %conv3620
  %conv3622 = trunc i32 %add3621 to i16
  %conv3623 = sext i16 %conv3622 to i32
  br label %cond.end.3638

cond.false.3624:                                  ; preds = %cond.false.3600
  %749 = load i32*, i32** %buf_end, align 8
  %750 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3625 = ptrtoint i32* %749 to i64
  %sub.ptr.rhs.cast3626 = ptrtoint i32* %750 to i64
  %sub.ptr.sub3627 = sub i64 %sub.ptr.lhs.cast3625, %sub.ptr.rhs.cast3626
  %sub.ptr.div3628 = sdiv exact i64 %sub.ptr.sub3627, 4
  %conv3629 = trunc i64 %sub.ptr.div3628 to i16
  %conv3630 = zext i16 %conv3629 to i32
  %751 = load i64, i64* %dst_size, align 8
  %conv3631 = trunc i64 %751 to i16
  %conv3632 = zext i16 %conv3631 to i32
  %add3633 = add nsw i32 %conv3630, %conv3632
  %sub3634 = sub nsw i32 %add3633, -32768
  %conv3635 = trunc i32 %sub3634 to i16
  %conv3636 = sext i16 %conv3635 to i32
  %add3637 = add nsw i32 %conv3636, -32768
  br label %cond.end.3638

cond.end.3638:                                    ; preds = %cond.false.3624, %cond.true.3612
  %cond3639 = phi i32 [ %conv3623, %cond.true.3612 ], [ %add3637, %cond.false.3624 ]
  %conv3640 = sext i32 %cond3639 to i64
  store i64 %conv3640, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.3641:                                  ; preds = %cond.false.2957
  br i1 false, label %cond.true.3642, label %cond.false.4241

cond.true.3642:                                   ; preds = %cond.false.3641
  br i1 false, label %cond.true.3643, label %cond.false.3963

cond.true.3643:                                   ; preds = %cond.true.3642
  %752 = load i64, i64* %dst_size, align 8
  %conv3644 = trunc i64 %752 to i32
  %mul3645 = mul nsw i32 0, %conv3644
  %753 = load i32*, i32** %buf_end, align 8
  %754 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3646 = ptrtoint i32* %753 to i64
  %sub.ptr.rhs.cast3647 = ptrtoint i32* %754 to i64
  %sub.ptr.sub3648 = sub i64 %sub.ptr.lhs.cast3646, %sub.ptr.rhs.cast3647
  %sub.ptr.div3649 = sdiv exact i64 %sub.ptr.sub3648, 4
  %conv3650 = trunc i64 %sub.ptr.div3649 to i32
  %add3651 = add nsw i32 %mul3645, %conv3650
  %mul3652 = mul nsw i32 0, %add3651
  %sub3653 = sub nsw i32 %mul3652, 1
  %cmp3654 = icmp slt i32 %sub3653, 0
  br i1 %cmp3654, label %cond.true.3656, label %cond.false.3686

cond.true.3656:                                   ; preds = %cond.true.3643
  %755 = load i64, i64* %dst_size, align 8
  %conv3657 = trunc i64 %755 to i32
  %mul3658 = mul nsw i32 0, %conv3657
  %756 = load i32*, i32** %buf_end, align 8
  %757 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3659 = ptrtoint i32* %756 to i64
  %sub.ptr.rhs.cast3660 = ptrtoint i32* %757 to i64
  %sub.ptr.sub3661 = sub i64 %sub.ptr.lhs.cast3659, %sub.ptr.rhs.cast3660
  %sub.ptr.div3662 = sdiv exact i64 %sub.ptr.sub3661, 4
  %conv3663 = trunc i64 %sub.ptr.div3662 to i32
  %add3664 = add nsw i32 %mul3658, %conv3663
  %mul3665 = mul nsw i32 0, %add3664
  %add3666 = add nsw i32 %mul3665, 0
  %neg3667 = xor i32 %add3666, -1
  %cmp3668 = icmp eq i32 %neg3667, -1
  %conv3669 = zext i1 %cmp3668 to i32
  %sub3670 = sub nsw i32 0, %conv3669
  %758 = load i64, i64* %dst_size, align 8
  %conv3671 = trunc i64 %758 to i32
  %mul3672 = mul nsw i32 0, %conv3671
  %759 = load i32*, i32** %buf_end, align 8
  %760 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3673 = ptrtoint i32* %759 to i64
  %sub.ptr.rhs.cast3674 = ptrtoint i32* %760 to i64
  %sub.ptr.sub3675 = sub i64 %sub.ptr.lhs.cast3673, %sub.ptr.rhs.cast3674
  %sub.ptr.div3676 = sdiv exact i64 %sub.ptr.sub3675, 4
  %conv3677 = trunc i64 %sub.ptr.div3676 to i32
  %add3678 = add nsw i32 %mul3672, %conv3677
  %mul3679 = mul nsw i32 0, %add3678
  %add3680 = add nsw i32 %mul3679, 1
  %shl3681 = shl i32 %add3680, 30
  %sub3682 = sub nsw i32 %shl3681, 1
  %mul3683 = mul nsw i32 %sub3682, 2
  %add3684 = add nsw i32 %mul3683, 1
  %sub3685 = sub nsw i32 %sub3670, %add3684
  br label %cond.end.3697

cond.false.3686:                                  ; preds = %cond.true.3643
  %761 = load i64, i64* %dst_size, align 8
  %conv3687 = trunc i64 %761 to i32
  %mul3688 = mul nsw i32 0, %conv3687
  %762 = load i32*, i32** %buf_end, align 8
  %763 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3689 = ptrtoint i32* %762 to i64
  %sub.ptr.rhs.cast3690 = ptrtoint i32* %763 to i64
  %sub.ptr.sub3691 = sub i64 %sub.ptr.lhs.cast3689, %sub.ptr.rhs.cast3690
  %sub.ptr.div3692 = sdiv exact i64 %sub.ptr.sub3691, 4
  %conv3693 = trunc i64 %sub.ptr.div3692 to i32
  %add3694 = add nsw i32 %mul3688, %conv3693
  %mul3695 = mul nsw i32 0, %add3694
  %add3696 = add nsw i32 %mul3695, 0
  br label %cond.end.3697

cond.end.3697:                                    ; preds = %cond.false.3686, %cond.true.3656
  %cond3698 = phi i32 [ %sub3685, %cond.true.3656 ], [ %add3696, %cond.false.3686 ]
  %cmp3699 = icmp slt i32 %cond3698, 0
  br i1 %cmp3699, label %cond.true.3701, label %cond.false.3820

cond.true.3701:                                   ; preds = %cond.end.3697
  %764 = load i64, i64* %dst_size, align 8
  %conv3702 = trunc i64 %764 to i32
  %cmp3703 = icmp slt i32 %conv3702, 0
  br i1 %cmp3703, label %cond.true.3705, label %cond.false.3770

cond.true.3705:                                   ; preds = %cond.true.3701
  %765 = load i32*, i32** %buf_end, align 8
  %766 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3706 = ptrtoint i32* %765 to i64
  %sub.ptr.rhs.cast3707 = ptrtoint i32* %766 to i64
  %sub.ptr.sub3708 = sub i64 %sub.ptr.lhs.cast3706, %sub.ptr.rhs.cast3707
  %sub.ptr.div3709 = sdiv exact i64 %sub.ptr.sub3708, 4
  %conv3710 = trunc i64 %sub.ptr.div3709 to i32
  %767 = load i64, i64* %dst_size, align 8
  %conv3711 = trunc i64 %767 to i32
  %mul3712 = mul nsw i32 0, %conv3711
  %768 = load i32*, i32** %buf_end, align 8
  %769 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3713 = ptrtoint i32* %768 to i64
  %sub.ptr.rhs.cast3714 = ptrtoint i32* %769 to i64
  %sub.ptr.sub3715 = sub i64 %sub.ptr.lhs.cast3713, %sub.ptr.rhs.cast3714
  %sub.ptr.div3716 = sdiv exact i64 %sub.ptr.sub3715, 4
  %conv3717 = trunc i64 %sub.ptr.div3716 to i32
  %add3718 = add nsw i32 %mul3712, %conv3717
  %mul3719 = mul nsw i32 0, %add3718
  %sub3720 = sub nsw i32 %mul3719, 1
  %cmp3721 = icmp slt i32 %sub3720, 0
  br i1 %cmp3721, label %cond.true.3723, label %cond.false.3753

cond.true.3723:                                   ; preds = %cond.true.3705
  %770 = load i64, i64* %dst_size, align 8
  %conv3724 = trunc i64 %770 to i32
  %mul3725 = mul nsw i32 0, %conv3724
  %771 = load i32*, i32** %buf_end, align 8
  %772 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3726 = ptrtoint i32* %771 to i64
  %sub.ptr.rhs.cast3727 = ptrtoint i32* %772 to i64
  %sub.ptr.sub3728 = sub i64 %sub.ptr.lhs.cast3726, %sub.ptr.rhs.cast3727
  %sub.ptr.div3729 = sdiv exact i64 %sub.ptr.sub3728, 4
  %conv3730 = trunc i64 %sub.ptr.div3729 to i32
  %add3731 = add nsw i32 %mul3725, %conv3730
  %mul3732 = mul nsw i32 0, %add3731
  %add3733 = add nsw i32 %mul3732, 0
  %neg3734 = xor i32 %add3733, -1
  %cmp3735 = icmp eq i32 %neg3734, -1
  %conv3736 = zext i1 %cmp3735 to i32
  %sub3737 = sub nsw i32 0, %conv3736
  %773 = load i64, i64* %dst_size, align 8
  %conv3738 = trunc i64 %773 to i32
  %mul3739 = mul nsw i32 0, %conv3738
  %774 = load i32*, i32** %buf_end, align 8
  %775 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3740 = ptrtoint i32* %774 to i64
  %sub.ptr.rhs.cast3741 = ptrtoint i32* %775 to i64
  %sub.ptr.sub3742 = sub i64 %sub.ptr.lhs.cast3740, %sub.ptr.rhs.cast3741
  %sub.ptr.div3743 = sdiv exact i64 %sub.ptr.sub3742, 4
  %conv3744 = trunc i64 %sub.ptr.div3743 to i32
  %add3745 = add nsw i32 %mul3739, %conv3744
  %mul3746 = mul nsw i32 0, %add3745
  %add3747 = add nsw i32 %mul3746, 1
  %shl3748 = shl i32 %add3747, 30
  %sub3749 = sub nsw i32 %shl3748, 1
  %mul3750 = mul nsw i32 %sub3749, 2
  %add3751 = add nsw i32 %mul3750, 1
  %sub3752 = sub nsw i32 %sub3737, %add3751
  br label %cond.end.3764

cond.false.3753:                                  ; preds = %cond.true.3705
  %776 = load i64, i64* %dst_size, align 8
  %conv3754 = trunc i64 %776 to i32
  %mul3755 = mul nsw i32 0, %conv3754
  %777 = load i32*, i32** %buf_end, align 8
  %778 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3756 = ptrtoint i32* %777 to i64
  %sub.ptr.rhs.cast3757 = ptrtoint i32* %778 to i64
  %sub.ptr.sub3758 = sub i64 %sub.ptr.lhs.cast3756, %sub.ptr.rhs.cast3757
  %sub.ptr.div3759 = sdiv exact i64 %sub.ptr.sub3758, 4
  %conv3760 = trunc i64 %sub.ptr.div3759 to i32
  %add3761 = add nsw i32 %mul3755, %conv3760
  %mul3762 = mul nsw i32 0, %add3761
  %add3763 = add nsw i32 %mul3762, 0
  br label %cond.end.3764

cond.end.3764:                                    ; preds = %cond.false.3753, %cond.true.3723
  %cond3765 = phi i32 [ %sub3752, %cond.true.3723 ], [ %add3763, %cond.false.3753 ]
  %779 = load i64, i64* %dst_size, align 8
  %conv3766 = trunc i64 %779 to i32
  %sub3767 = sub nsw i32 %cond3765, %conv3766
  %cmp3768 = icmp slt i32 %conv3710, %sub3767
  br i1 %cmp3768, label %cond.true.3901, label %lor.lhs.false.3869

cond.false.3770:                                  ; preds = %cond.true.3701
  %780 = load i64, i64* %dst_size, align 8
  %conv3771 = trunc i64 %780 to i32
  %mul3772 = mul nsw i32 0, %conv3771
  %781 = load i32*, i32** %buf_end, align 8
  %782 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3773 = ptrtoint i32* %781 to i64
  %sub.ptr.rhs.cast3774 = ptrtoint i32* %782 to i64
  %sub.ptr.sub3775 = sub i64 %sub.ptr.lhs.cast3773, %sub.ptr.rhs.cast3774
  %sub.ptr.div3776 = sdiv exact i64 %sub.ptr.sub3775, 4
  %conv3777 = trunc i64 %sub.ptr.div3776 to i32
  %add3778 = add nsw i32 %mul3772, %conv3777
  %mul3779 = mul nsw i32 0, %add3778
  %sub3780 = sub nsw i32 %mul3779, 1
  %cmp3781 = icmp slt i32 %sub3780, 0
  br i1 %cmp3781, label %cond.true.3783, label %cond.false.3798

cond.true.3783:                                   ; preds = %cond.false.3770
  %783 = load i64, i64* %dst_size, align 8
  %conv3784 = trunc i64 %783 to i32
  %mul3785 = mul nsw i32 0, %conv3784
  %784 = load i32*, i32** %buf_end, align 8
  %785 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3786 = ptrtoint i32* %784 to i64
  %sub.ptr.rhs.cast3787 = ptrtoint i32* %785 to i64
  %sub.ptr.sub3788 = sub i64 %sub.ptr.lhs.cast3786, %sub.ptr.rhs.cast3787
  %sub.ptr.div3789 = sdiv exact i64 %sub.ptr.sub3788, 4
  %conv3790 = trunc i64 %sub.ptr.div3789 to i32
  %add3791 = add nsw i32 %mul3785, %conv3790
  %mul3792 = mul nsw i32 0, %add3791
  %add3793 = add nsw i32 %mul3792, 1
  %shl3794 = shl i32 %add3793, 30
  %sub3795 = sub nsw i32 %shl3794, 1
  %mul3796 = mul nsw i32 %sub3795, 2
  %add3797 = add nsw i32 %mul3796, 1
  br label %cond.end.3809

cond.false.3798:                                  ; preds = %cond.false.3770
  %786 = load i64, i64* %dst_size, align 8
  %conv3799 = trunc i64 %786 to i32
  %mul3800 = mul nsw i32 0, %conv3799
  %787 = load i32*, i32** %buf_end, align 8
  %788 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3801 = ptrtoint i32* %787 to i64
  %sub.ptr.rhs.cast3802 = ptrtoint i32* %788 to i64
  %sub.ptr.sub3803 = sub i64 %sub.ptr.lhs.cast3801, %sub.ptr.rhs.cast3802
  %sub.ptr.div3804 = sdiv exact i64 %sub.ptr.sub3803, 4
  %conv3805 = trunc i64 %sub.ptr.div3804 to i32
  %add3806 = add nsw i32 %mul3800, %conv3805
  %mul3807 = mul nsw i32 0, %add3806
  %sub3808 = sub nsw i32 %mul3807, 1
  br label %cond.end.3809

cond.end.3809:                                    ; preds = %cond.false.3798, %cond.true.3783
  %cond3810 = phi i32 [ %add3797, %cond.true.3783 ], [ %sub3808, %cond.false.3798 ]
  %789 = load i64, i64* %dst_size, align 8
  %conv3811 = trunc i64 %789 to i32
  %sub3812 = sub nsw i32 %cond3810, %conv3811
  %790 = load i32*, i32** %buf_end, align 8
  %791 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3813 = ptrtoint i32* %790 to i64
  %sub.ptr.rhs.cast3814 = ptrtoint i32* %791 to i64
  %sub.ptr.sub3815 = sub i64 %sub.ptr.lhs.cast3813, %sub.ptr.rhs.cast3814
  %sub.ptr.div3816 = sdiv exact i64 %sub.ptr.sub3815, 4
  %conv3817 = trunc i64 %sub.ptr.div3816 to i32
  %cmp3818 = icmp slt i32 %sub3812, %conv3817
  br i1 %cmp3818, label %cond.true.3901, label %lor.lhs.false.3869

cond.false.3820:                                  ; preds = %cond.end.3697
  %792 = load i32*, i32** %buf_end, align 8
  %793 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3821 = ptrtoint i32* %792 to i64
  %sub.ptr.rhs.cast3822 = ptrtoint i32* %793 to i64
  %sub.ptr.sub3823 = sub i64 %sub.ptr.lhs.cast3821, %sub.ptr.rhs.cast3822
  %sub.ptr.div3824 = sdiv exact i64 %sub.ptr.sub3823, 4
  %conv3825 = trunc i64 %sub.ptr.div3824 to i32
  %cmp3826 = icmp slt i32 %conv3825, 0
  br i1 %cmp3826, label %cond.true.3828, label %cond.false.3839

cond.true.3828:                                   ; preds = %cond.false.3820
  %794 = load i64, i64* %dst_size, align 8
  %conv3829 = trunc i64 %794 to i32
  %795 = load i32*, i32** %buf_end, align 8
  %796 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3830 = ptrtoint i32* %795 to i64
  %sub.ptr.rhs.cast3831 = ptrtoint i32* %796 to i64
  %sub.ptr.sub3832 = sub i64 %sub.ptr.lhs.cast3830, %sub.ptr.rhs.cast3831
  %sub.ptr.div3833 = sdiv exact i64 %sub.ptr.sub3832, 4
  %conv3834 = trunc i64 %sub.ptr.div3833 to i32
  %797 = load i64, i64* %dst_size, align 8
  %conv3835 = trunc i64 %797 to i32
  %add3836 = add nsw i32 %conv3834, %conv3835
  %cmp3837 = icmp sle i32 %conv3829, %add3836
  br i1 %cmp3837, label %cond.true.3901, label %lor.lhs.false.3869

cond.false.3839:                                  ; preds = %cond.false.3820
  %798 = load i64, i64* %dst_size, align 8
  %conv3840 = trunc i64 %798 to i32
  %cmp3841 = icmp slt i32 %conv3840, 0
  br i1 %cmp3841, label %cond.true.3843, label %cond.false.3858

cond.true.3843:                                   ; preds = %cond.false.3839
  %799 = load i32*, i32** %buf_end, align 8
  %800 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3844 = ptrtoint i32* %799 to i64
  %sub.ptr.rhs.cast3845 = ptrtoint i32* %800 to i64
  %sub.ptr.sub3846 = sub i64 %sub.ptr.lhs.cast3844, %sub.ptr.rhs.cast3845
  %sub.ptr.div3847 = sdiv exact i64 %sub.ptr.sub3846, 4
  %conv3848 = trunc i64 %sub.ptr.div3847 to i32
  %801 = load i32*, i32** %buf_end, align 8
  %802 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3849 = ptrtoint i32* %801 to i64
  %sub.ptr.rhs.cast3850 = ptrtoint i32* %802 to i64
  %sub.ptr.sub3851 = sub i64 %sub.ptr.lhs.cast3849, %sub.ptr.rhs.cast3850
  %sub.ptr.div3852 = sdiv exact i64 %sub.ptr.sub3851, 4
  %conv3853 = trunc i64 %sub.ptr.div3852 to i32
  %803 = load i64, i64* %dst_size, align 8
  %conv3854 = trunc i64 %803 to i32
  %add3855 = add nsw i32 %conv3853, %conv3854
  %cmp3856 = icmp sle i32 %conv3848, %add3855
  br i1 %cmp3856, label %cond.true.3901, label %lor.lhs.false.3869

cond.false.3858:                                  ; preds = %cond.false.3839
  %804 = load i32*, i32** %buf_end, align 8
  %805 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3859 = ptrtoint i32* %804 to i64
  %sub.ptr.rhs.cast3860 = ptrtoint i32* %805 to i64
  %sub.ptr.sub3861 = sub i64 %sub.ptr.lhs.cast3859, %sub.ptr.rhs.cast3860
  %sub.ptr.div3862 = sdiv exact i64 %sub.ptr.sub3861, 4
  %conv3863 = trunc i64 %sub.ptr.div3862 to i32
  %806 = load i64, i64* %dst_size, align 8
  %conv3864 = trunc i64 %806 to i32
  %add3865 = add nsw i32 %conv3863, %conv3864
  %807 = load i64, i64* %dst_size, align 8
  %conv3866 = trunc i64 %807 to i32
  %cmp3867 = icmp slt i32 %add3865, %conv3866
  br i1 %cmp3867, label %cond.true.3901, label %lor.lhs.false.3869

lor.lhs.false.3869:                               ; preds = %cond.false.3858, %cond.true.3843, %cond.true.3828, %cond.end.3809, %cond.end.3764
  %808 = load i32*, i32** %buf_end, align 8
  %809 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3870 = ptrtoint i32* %808 to i64
  %sub.ptr.rhs.cast3871 = ptrtoint i32* %809 to i64
  %sub.ptr.sub3872 = sub i64 %sub.ptr.lhs.cast3870, %sub.ptr.rhs.cast3871
  %sub.ptr.div3873 = sdiv exact i64 %sub.ptr.sub3872, 4
  %conv3874 = trunc i64 %sub.ptr.div3873 to i32
  %810 = load i64, i64* %dst_size, align 8
  %conv3875 = trunc i64 %810 to i32
  %add3876 = add nsw i32 %conv3874, %conv3875
  %mul3877 = mul nsw i32 0, %add3876
  %sub3878 = sub nsw i32 %mul3877, 1
  %cmp3879 = icmp slt i32 %sub3878, 0
  br i1 %cmp3879, label %land.lhs.true.3881, label %lor.lhs.false.3891

land.lhs.true.3881:                               ; preds = %lor.lhs.false.3869
  %811 = load i32*, i32** %buf_end, align 8
  %812 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3882 = ptrtoint i32* %811 to i64
  %sub.ptr.rhs.cast3883 = ptrtoint i32* %812 to i64
  %sub.ptr.sub3884 = sub i64 %sub.ptr.lhs.cast3882, %sub.ptr.rhs.cast3883
  %sub.ptr.div3885 = sdiv exact i64 %sub.ptr.sub3884, 4
  %conv3886 = trunc i64 %sub.ptr.div3885 to i32
  %813 = load i64, i64* %dst_size, align 8
  %conv3887 = trunc i64 %813 to i32
  %add3888 = add nsw i32 %conv3886, %conv3887
  %cmp3889 = icmp slt i32 %add3888, -2147483648
  br i1 %cmp3889, label %cond.true.3901, label %lor.lhs.false.3891

lor.lhs.false.3891:                               ; preds = %land.lhs.true.3881, %lor.lhs.false.3869
  %814 = load i32*, i32** %buf_end, align 8
  %815 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3892 = ptrtoint i32* %814 to i64
  %sub.ptr.rhs.cast3893 = ptrtoint i32* %815 to i64
  %sub.ptr.sub3894 = sub i64 %sub.ptr.lhs.cast3892, %sub.ptr.rhs.cast3893
  %sub.ptr.div3895 = sdiv exact i64 %sub.ptr.sub3894, 4
  %conv3896 = trunc i64 %sub.ptr.div3895 to i32
  %816 = load i64, i64* %dst_size, align 8
  %conv3897 = trunc i64 %816 to i32
  %add3898 = add nsw i32 %conv3896, %conv3897
  %cmp3899 = icmp slt i32 2147483647, %add3898
  br i1 %cmp3899, label %cond.true.3901, label %cond.false.3932

cond.true.3901:                                   ; preds = %lor.lhs.false.3891, %land.lhs.true.3881, %cond.false.3858, %cond.true.3843, %cond.true.3828, %cond.end.3809, %cond.end.3764
  %817 = load i32*, i32** %buf_end, align 8
  %818 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3902 = ptrtoint i32* %817 to i64
  %sub.ptr.rhs.cast3903 = ptrtoint i32* %818 to i64
  %sub.ptr.sub3904 = sub i64 %sub.ptr.lhs.cast3902, %sub.ptr.rhs.cast3903
  %sub.ptr.div3905 = sdiv exact i64 %sub.ptr.sub3904, 4
  %conv3906 = trunc i64 %sub.ptr.div3905 to i32
  %819 = load i64, i64* %dst_size, align 8
  %conv3907 = trunc i64 %819 to i32
  %add3908 = add i32 %conv3906, %conv3907
  %cmp3909 = icmp ule i32 %add3908, 2147483647
  br i1 %cmp3909, label %cond.true.3911, label %cond.false.3919

cond.true.3911:                                   ; preds = %cond.true.3901
  %820 = load i32*, i32** %buf_end, align 8
  %821 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3912 = ptrtoint i32* %820 to i64
  %sub.ptr.rhs.cast3913 = ptrtoint i32* %821 to i64
  %sub.ptr.sub3914 = sub i64 %sub.ptr.lhs.cast3912, %sub.ptr.rhs.cast3913
  %sub.ptr.div3915 = sdiv exact i64 %sub.ptr.sub3914, 4
  %conv3916 = trunc i64 %sub.ptr.div3915 to i32
  %822 = load i64, i64* %dst_size, align 8
  %conv3917 = trunc i64 %822 to i32
  %add3918 = add i32 %conv3916, %conv3917
  br label %cond.end.3929

cond.false.3919:                                  ; preds = %cond.true.3901
  %823 = load i32*, i32** %buf_end, align 8
  %824 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3920 = ptrtoint i32* %823 to i64
  %sub.ptr.rhs.cast3921 = ptrtoint i32* %824 to i64
  %sub.ptr.sub3922 = sub i64 %sub.ptr.lhs.cast3920, %sub.ptr.rhs.cast3921
  %sub.ptr.div3923 = sdiv exact i64 %sub.ptr.sub3922, 4
  %conv3924 = trunc i64 %sub.ptr.div3923 to i32
  %825 = load i64, i64* %dst_size, align 8
  %conv3925 = trunc i64 %825 to i32
  %add3926 = add i32 %conv3924, %conv3925
  %sub3927 = sub i32 %add3926, -2147483648
  %add3928 = add nsw i32 %sub3927, -2147483648
  br label %cond.end.3929

cond.end.3929:                                    ; preds = %cond.false.3919, %cond.true.3911
  %cond3930 = phi i32 [ %add3918, %cond.true.3911 ], [ %add3928, %cond.false.3919 ]
  %conv3931 = sext i32 %cond3930 to i64
  store i64 %conv3931, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.3932:                                  ; preds = %lor.lhs.false.3891
  %826 = load i32*, i32** %buf_end, align 8
  %827 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3933 = ptrtoint i32* %826 to i64
  %sub.ptr.rhs.cast3934 = ptrtoint i32* %827 to i64
  %sub.ptr.sub3935 = sub i64 %sub.ptr.lhs.cast3933, %sub.ptr.rhs.cast3934
  %sub.ptr.div3936 = sdiv exact i64 %sub.ptr.sub3935, 4
  %conv3937 = trunc i64 %sub.ptr.div3936 to i32
  %828 = load i64, i64* %dst_size, align 8
  %conv3938 = trunc i64 %828 to i32
  %add3939 = add i32 %conv3937, %conv3938
  %cmp3940 = icmp ule i32 %add3939, 2147483647
  br i1 %cmp3940, label %cond.true.3942, label %cond.false.3950

cond.true.3942:                                   ; preds = %cond.false.3932
  %829 = load i32*, i32** %buf_end, align 8
  %830 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3943 = ptrtoint i32* %829 to i64
  %sub.ptr.rhs.cast3944 = ptrtoint i32* %830 to i64
  %sub.ptr.sub3945 = sub i64 %sub.ptr.lhs.cast3943, %sub.ptr.rhs.cast3944
  %sub.ptr.div3946 = sdiv exact i64 %sub.ptr.sub3945, 4
  %conv3947 = trunc i64 %sub.ptr.div3946 to i32
  %831 = load i64, i64* %dst_size, align 8
  %conv3948 = trunc i64 %831 to i32
  %add3949 = add i32 %conv3947, %conv3948
  br label %cond.end.3960

cond.false.3950:                                  ; preds = %cond.false.3932
  %832 = load i32*, i32** %buf_end, align 8
  %833 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3951 = ptrtoint i32* %832 to i64
  %sub.ptr.rhs.cast3952 = ptrtoint i32* %833 to i64
  %sub.ptr.sub3953 = sub i64 %sub.ptr.lhs.cast3951, %sub.ptr.rhs.cast3952
  %sub.ptr.div3954 = sdiv exact i64 %sub.ptr.sub3953, 4
  %conv3955 = trunc i64 %sub.ptr.div3954 to i32
  %834 = load i64, i64* %dst_size, align 8
  %conv3956 = trunc i64 %834 to i32
  %add3957 = add i32 %conv3955, %conv3956
  %sub3958 = sub i32 %add3957, -2147483648
  %add3959 = add nsw i32 %sub3958, -2147483648
  br label %cond.end.3960

cond.end.3960:                                    ; preds = %cond.false.3950, %cond.true.3942
  %cond3961 = phi i32 [ %add3949, %cond.true.3942 ], [ %add3959, %cond.false.3950 ]
  %conv3962 = sext i32 %cond3961 to i64
  store i64 %conv3962, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.3963:                                  ; preds = %cond.true.3642
  %835 = load i64, i64* %dst_size, align 8
  %mul3964 = mul nsw i64 0, %835
  %836 = load i32*, i32** %buf_end, align 8
  %837 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3965 = ptrtoint i32* %836 to i64
  %sub.ptr.rhs.cast3966 = ptrtoint i32* %837 to i64
  %sub.ptr.sub3967 = sub i64 %sub.ptr.lhs.cast3965, %sub.ptr.rhs.cast3966
  %sub.ptr.div3968 = sdiv exact i64 %sub.ptr.sub3967, 4
  %add3969 = add nsw i64 %mul3964, %sub.ptr.div3968
  %mul3970 = mul nsw i64 0, %add3969
  %sub3971 = sub nsw i64 %mul3970, 1
  %cmp3972 = icmp slt i64 %sub3971, 0
  br i1 %cmp3972, label %cond.true.3974, label %cond.false.4001

cond.true.3974:                                   ; preds = %cond.false.3963
  %838 = load i64, i64* %dst_size, align 8
  %mul3975 = mul nsw i64 0, %838
  %839 = load i32*, i32** %buf_end, align 8
  %840 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3976 = ptrtoint i32* %839 to i64
  %sub.ptr.rhs.cast3977 = ptrtoint i32* %840 to i64
  %sub.ptr.sub3978 = sub i64 %sub.ptr.lhs.cast3976, %sub.ptr.rhs.cast3977
  %sub.ptr.div3979 = sdiv exact i64 %sub.ptr.sub3978, 4
  %add3980 = add nsw i64 %mul3975, %sub.ptr.div3979
  %mul3981 = mul nsw i64 0, %add3980
  %add3982 = add nsw i64 %mul3981, 0
  %neg3983 = xor i64 %add3982, -1
  %cmp3984 = icmp eq i64 %neg3983, -1
  %conv3985 = zext i1 %cmp3984 to i32
  %sub3986 = sub nsw i32 0, %conv3985
  %conv3987 = sext i32 %sub3986 to i64
  %841 = load i64, i64* %dst_size, align 8
  %mul3988 = mul nsw i64 0, %841
  %842 = load i32*, i32** %buf_end, align 8
  %843 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast3989 = ptrtoint i32* %842 to i64
  %sub.ptr.rhs.cast3990 = ptrtoint i32* %843 to i64
  %sub.ptr.sub3991 = sub i64 %sub.ptr.lhs.cast3989, %sub.ptr.rhs.cast3990
  %sub.ptr.div3992 = sdiv exact i64 %sub.ptr.sub3991, 4
  %add3993 = add nsw i64 %mul3988, %sub.ptr.div3992
  %mul3994 = mul nsw i64 0, %add3993
  %add3995 = add nsw i64 %mul3994, 1
  %shl3996 = shl i64 %add3995, 62
  %sub3997 = sub nsw i64 %shl3996, 1
  %mul3998 = mul nsw i64 %sub3997, 2
  %add3999 = add nsw i64 %mul3998, 1
  %sub4000 = sub nsw i64 %conv3987, %add3999
  br label %cond.end.4010

cond.false.4001:                                  ; preds = %cond.false.3963
  %844 = load i64, i64* %dst_size, align 8
  %mul4002 = mul nsw i64 0, %844
  %845 = load i32*, i32** %buf_end, align 8
  %846 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4003 = ptrtoint i32* %845 to i64
  %sub.ptr.rhs.cast4004 = ptrtoint i32* %846 to i64
  %sub.ptr.sub4005 = sub i64 %sub.ptr.lhs.cast4003, %sub.ptr.rhs.cast4004
  %sub.ptr.div4006 = sdiv exact i64 %sub.ptr.sub4005, 4
  %add4007 = add nsw i64 %mul4002, %sub.ptr.div4006
  %mul4008 = mul nsw i64 0, %add4007
  %add4009 = add nsw i64 %mul4008, 0
  br label %cond.end.4010

cond.end.4010:                                    ; preds = %cond.false.4001, %cond.true.3974
  %cond4011 = phi i64 [ %sub4000, %cond.true.3974 ], [ %add4009, %cond.false.4001 ]
  %cmp4012 = icmp slt i64 %cond4011, 0
  br i1 %cmp4012, label %cond.true.4014, label %cond.false.4115

cond.true.4014:                                   ; preds = %cond.end.4010
  %847 = load i64, i64* %dst_size, align 8
  %cmp4015 = icmp slt i64 %847, 0
  br i1 %cmp4015, label %cond.true.4017, label %cond.false.4073

cond.true.4017:                                   ; preds = %cond.true.4014
  %848 = load i32*, i32** %buf_end, align 8
  %849 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4018 = ptrtoint i32* %848 to i64
  %sub.ptr.rhs.cast4019 = ptrtoint i32* %849 to i64
  %sub.ptr.sub4020 = sub i64 %sub.ptr.lhs.cast4018, %sub.ptr.rhs.cast4019
  %sub.ptr.div4021 = sdiv exact i64 %sub.ptr.sub4020, 4
  %850 = load i64, i64* %dst_size, align 8
  %mul4022 = mul nsw i64 0, %850
  %851 = load i32*, i32** %buf_end, align 8
  %852 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4023 = ptrtoint i32* %851 to i64
  %sub.ptr.rhs.cast4024 = ptrtoint i32* %852 to i64
  %sub.ptr.sub4025 = sub i64 %sub.ptr.lhs.cast4023, %sub.ptr.rhs.cast4024
  %sub.ptr.div4026 = sdiv exact i64 %sub.ptr.sub4025, 4
  %add4027 = add nsw i64 %mul4022, %sub.ptr.div4026
  %mul4028 = mul nsw i64 0, %add4027
  %sub4029 = sub nsw i64 %mul4028, 1
  %cmp4030 = icmp slt i64 %sub4029, 0
  br i1 %cmp4030, label %cond.true.4032, label %cond.false.4059

cond.true.4032:                                   ; preds = %cond.true.4017
  %853 = load i64, i64* %dst_size, align 8
  %mul4033 = mul nsw i64 0, %853
  %854 = load i32*, i32** %buf_end, align 8
  %855 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4034 = ptrtoint i32* %854 to i64
  %sub.ptr.rhs.cast4035 = ptrtoint i32* %855 to i64
  %sub.ptr.sub4036 = sub i64 %sub.ptr.lhs.cast4034, %sub.ptr.rhs.cast4035
  %sub.ptr.div4037 = sdiv exact i64 %sub.ptr.sub4036, 4
  %add4038 = add nsw i64 %mul4033, %sub.ptr.div4037
  %mul4039 = mul nsw i64 0, %add4038
  %add4040 = add nsw i64 %mul4039, 0
  %neg4041 = xor i64 %add4040, -1
  %cmp4042 = icmp eq i64 %neg4041, -1
  %conv4043 = zext i1 %cmp4042 to i32
  %sub4044 = sub nsw i32 0, %conv4043
  %conv4045 = sext i32 %sub4044 to i64
  %856 = load i64, i64* %dst_size, align 8
  %mul4046 = mul nsw i64 0, %856
  %857 = load i32*, i32** %buf_end, align 8
  %858 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4047 = ptrtoint i32* %857 to i64
  %sub.ptr.rhs.cast4048 = ptrtoint i32* %858 to i64
  %sub.ptr.sub4049 = sub i64 %sub.ptr.lhs.cast4047, %sub.ptr.rhs.cast4048
  %sub.ptr.div4050 = sdiv exact i64 %sub.ptr.sub4049, 4
  %add4051 = add nsw i64 %mul4046, %sub.ptr.div4050
  %mul4052 = mul nsw i64 0, %add4051
  %add4053 = add nsw i64 %mul4052, 1
  %shl4054 = shl i64 %add4053, 62
  %sub4055 = sub nsw i64 %shl4054, 1
  %mul4056 = mul nsw i64 %sub4055, 2
  %add4057 = add nsw i64 %mul4056, 1
  %sub4058 = sub nsw i64 %conv4045, %add4057
  br label %cond.end.4068

cond.false.4059:                                  ; preds = %cond.true.4017
  %859 = load i64, i64* %dst_size, align 8
  %mul4060 = mul nsw i64 0, %859
  %860 = load i32*, i32** %buf_end, align 8
  %861 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4061 = ptrtoint i32* %860 to i64
  %sub.ptr.rhs.cast4062 = ptrtoint i32* %861 to i64
  %sub.ptr.sub4063 = sub i64 %sub.ptr.lhs.cast4061, %sub.ptr.rhs.cast4062
  %sub.ptr.div4064 = sdiv exact i64 %sub.ptr.sub4063, 4
  %add4065 = add nsw i64 %mul4060, %sub.ptr.div4064
  %mul4066 = mul nsw i64 0, %add4065
  %add4067 = add nsw i64 %mul4066, 0
  br label %cond.end.4068

cond.end.4068:                                    ; preds = %cond.false.4059, %cond.true.4032
  %cond4069 = phi i64 [ %sub4058, %cond.true.4032 ], [ %add4067, %cond.false.4059 ]
  %862 = load i64, i64* %dst_size, align 8
  %sub4070 = sub nsw i64 %cond4069, %862
  %cmp4071 = icmp slt i64 %sub.ptr.div4021, %sub4070
  br i1 %cmp4071, label %cond.true.4179, label %lor.lhs.false.4153

cond.false.4073:                                  ; preds = %cond.true.4014
  %863 = load i64, i64* %dst_size, align 8
  %mul4074 = mul nsw i64 0, %863
  %864 = load i32*, i32** %buf_end, align 8
  %865 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4075 = ptrtoint i32* %864 to i64
  %sub.ptr.rhs.cast4076 = ptrtoint i32* %865 to i64
  %sub.ptr.sub4077 = sub i64 %sub.ptr.lhs.cast4075, %sub.ptr.rhs.cast4076
  %sub.ptr.div4078 = sdiv exact i64 %sub.ptr.sub4077, 4
  %add4079 = add nsw i64 %mul4074, %sub.ptr.div4078
  %mul4080 = mul nsw i64 0, %add4079
  %sub4081 = sub nsw i64 %mul4080, 1
  %cmp4082 = icmp slt i64 %sub4081, 0
  br i1 %cmp4082, label %cond.true.4084, label %cond.false.4097

cond.true.4084:                                   ; preds = %cond.false.4073
  %866 = load i64, i64* %dst_size, align 8
  %mul4085 = mul nsw i64 0, %866
  %867 = load i32*, i32** %buf_end, align 8
  %868 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4086 = ptrtoint i32* %867 to i64
  %sub.ptr.rhs.cast4087 = ptrtoint i32* %868 to i64
  %sub.ptr.sub4088 = sub i64 %sub.ptr.lhs.cast4086, %sub.ptr.rhs.cast4087
  %sub.ptr.div4089 = sdiv exact i64 %sub.ptr.sub4088, 4
  %add4090 = add nsw i64 %mul4085, %sub.ptr.div4089
  %mul4091 = mul nsw i64 0, %add4090
  %add4092 = add nsw i64 %mul4091, 1
  %shl4093 = shl i64 %add4092, 62
  %sub4094 = sub nsw i64 %shl4093, 1
  %mul4095 = mul nsw i64 %sub4094, 2
  %add4096 = add nsw i64 %mul4095, 1
  br label %cond.end.4106

cond.false.4097:                                  ; preds = %cond.false.4073
  %869 = load i64, i64* %dst_size, align 8
  %mul4098 = mul nsw i64 0, %869
  %870 = load i32*, i32** %buf_end, align 8
  %871 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4099 = ptrtoint i32* %870 to i64
  %sub.ptr.rhs.cast4100 = ptrtoint i32* %871 to i64
  %sub.ptr.sub4101 = sub i64 %sub.ptr.lhs.cast4099, %sub.ptr.rhs.cast4100
  %sub.ptr.div4102 = sdiv exact i64 %sub.ptr.sub4101, 4
  %add4103 = add nsw i64 %mul4098, %sub.ptr.div4102
  %mul4104 = mul nsw i64 0, %add4103
  %sub4105 = sub nsw i64 %mul4104, 1
  br label %cond.end.4106

cond.end.4106:                                    ; preds = %cond.false.4097, %cond.true.4084
  %cond4107 = phi i64 [ %add4096, %cond.true.4084 ], [ %sub4105, %cond.false.4097 ]
  %872 = load i64, i64* %dst_size, align 8
  %sub4108 = sub nsw i64 %cond4107, %872
  %873 = load i32*, i32** %buf_end, align 8
  %874 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4109 = ptrtoint i32* %873 to i64
  %sub.ptr.rhs.cast4110 = ptrtoint i32* %874 to i64
  %sub.ptr.sub4111 = sub i64 %sub.ptr.lhs.cast4109, %sub.ptr.rhs.cast4110
  %sub.ptr.div4112 = sdiv exact i64 %sub.ptr.sub4111, 4
  %cmp4113 = icmp slt i64 %sub4108, %sub.ptr.div4112
  br i1 %cmp4113, label %cond.true.4179, label %lor.lhs.false.4153

cond.false.4115:                                  ; preds = %cond.end.4010
  %875 = load i32*, i32** %buf_end, align 8
  %876 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4116 = ptrtoint i32* %875 to i64
  %sub.ptr.rhs.cast4117 = ptrtoint i32* %876 to i64
  %sub.ptr.sub4118 = sub i64 %sub.ptr.lhs.cast4116, %sub.ptr.rhs.cast4117
  %sub.ptr.div4119 = sdiv exact i64 %sub.ptr.sub4118, 4
  %cmp4120 = icmp slt i64 %sub.ptr.div4119, 0
  br i1 %cmp4120, label %cond.true.4122, label %cond.false.4130

cond.true.4122:                                   ; preds = %cond.false.4115
  %877 = load i64, i64* %dst_size, align 8
  %878 = load i32*, i32** %buf_end, align 8
  %879 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4123 = ptrtoint i32* %878 to i64
  %sub.ptr.rhs.cast4124 = ptrtoint i32* %879 to i64
  %sub.ptr.sub4125 = sub i64 %sub.ptr.lhs.cast4123, %sub.ptr.rhs.cast4124
  %sub.ptr.div4126 = sdiv exact i64 %sub.ptr.sub4125, 4
  %880 = load i64, i64* %dst_size, align 8
  %add4127 = add nsw i64 %sub.ptr.div4126, %880
  %cmp4128 = icmp sle i64 %877, %add4127
  br i1 %cmp4128, label %cond.true.4179, label %lor.lhs.false.4153

cond.false.4130:                                  ; preds = %cond.false.4115
  %881 = load i64, i64* %dst_size, align 8
  %cmp4131 = icmp slt i64 %881, 0
  br i1 %cmp4131, label %cond.true.4133, label %cond.false.4145

cond.true.4133:                                   ; preds = %cond.false.4130
  %882 = load i32*, i32** %buf_end, align 8
  %883 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4134 = ptrtoint i32* %882 to i64
  %sub.ptr.rhs.cast4135 = ptrtoint i32* %883 to i64
  %sub.ptr.sub4136 = sub i64 %sub.ptr.lhs.cast4134, %sub.ptr.rhs.cast4135
  %sub.ptr.div4137 = sdiv exact i64 %sub.ptr.sub4136, 4
  %884 = load i32*, i32** %buf_end, align 8
  %885 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4138 = ptrtoint i32* %884 to i64
  %sub.ptr.rhs.cast4139 = ptrtoint i32* %885 to i64
  %sub.ptr.sub4140 = sub i64 %sub.ptr.lhs.cast4138, %sub.ptr.rhs.cast4139
  %sub.ptr.div4141 = sdiv exact i64 %sub.ptr.sub4140, 4
  %886 = load i64, i64* %dst_size, align 8
  %add4142 = add nsw i64 %sub.ptr.div4141, %886
  %cmp4143 = icmp sle i64 %sub.ptr.div4137, %add4142
  br i1 %cmp4143, label %cond.true.4179, label %lor.lhs.false.4153

cond.false.4145:                                  ; preds = %cond.false.4130
  %887 = load i32*, i32** %buf_end, align 8
  %888 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4146 = ptrtoint i32* %887 to i64
  %sub.ptr.rhs.cast4147 = ptrtoint i32* %888 to i64
  %sub.ptr.sub4148 = sub i64 %sub.ptr.lhs.cast4146, %sub.ptr.rhs.cast4147
  %sub.ptr.div4149 = sdiv exact i64 %sub.ptr.sub4148, 4
  %889 = load i64, i64* %dst_size, align 8
  %add4150 = add nsw i64 %sub.ptr.div4149, %889
  %890 = load i64, i64* %dst_size, align 8
  %cmp4151 = icmp slt i64 %add4150, %890
  br i1 %cmp4151, label %cond.true.4179, label %lor.lhs.false.4153

lor.lhs.false.4153:                               ; preds = %cond.false.4145, %cond.true.4133, %cond.true.4122, %cond.end.4106, %cond.end.4068
  %891 = load i32*, i32** %buf_end, align 8
  %892 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4154 = ptrtoint i32* %891 to i64
  %sub.ptr.rhs.cast4155 = ptrtoint i32* %892 to i64
  %sub.ptr.sub4156 = sub i64 %sub.ptr.lhs.cast4154, %sub.ptr.rhs.cast4155
  %sub.ptr.div4157 = sdiv exact i64 %sub.ptr.sub4156, 4
  %893 = load i64, i64* %dst_size, align 8
  %add4158 = add nsw i64 %sub.ptr.div4157, %893
  %mul4159 = mul nsw i64 0, %add4158
  %sub4160 = sub nsw i64 %mul4159, 1
  %cmp4161 = icmp slt i64 %sub4160, 0
  br i1 %cmp4161, label %land.lhs.true.4163, label %lor.lhs.false.4171

land.lhs.true.4163:                               ; preds = %lor.lhs.false.4153
  %894 = load i32*, i32** %buf_end, align 8
  %895 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4164 = ptrtoint i32* %894 to i64
  %sub.ptr.rhs.cast4165 = ptrtoint i32* %895 to i64
  %sub.ptr.sub4166 = sub i64 %sub.ptr.lhs.cast4164, %sub.ptr.rhs.cast4165
  %sub.ptr.div4167 = sdiv exact i64 %sub.ptr.sub4166, 4
  %896 = load i64, i64* %dst_size, align 8
  %add4168 = add nsw i64 %sub.ptr.div4167, %896
  %cmp4169 = icmp slt i64 %add4168, -2147483648
  br i1 %cmp4169, label %cond.true.4179, label %lor.lhs.false.4171

lor.lhs.false.4171:                               ; preds = %land.lhs.true.4163, %lor.lhs.false.4153
  %897 = load i32*, i32** %buf_end, align 8
  %898 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4172 = ptrtoint i32* %897 to i64
  %sub.ptr.rhs.cast4173 = ptrtoint i32* %898 to i64
  %sub.ptr.sub4174 = sub i64 %sub.ptr.lhs.cast4172, %sub.ptr.rhs.cast4173
  %sub.ptr.div4175 = sdiv exact i64 %sub.ptr.sub4174, 4
  %899 = load i64, i64* %dst_size, align 8
  %add4176 = add nsw i64 %sub.ptr.div4175, %899
  %cmp4177 = icmp slt i64 2147483647, %add4176
  br i1 %cmp4177, label %cond.true.4179, label %cond.false.4210

cond.true.4179:                                   ; preds = %lor.lhs.false.4171, %land.lhs.true.4163, %cond.false.4145, %cond.true.4133, %cond.true.4122, %cond.end.4106, %cond.end.4068
  %900 = load i32*, i32** %buf_end, align 8
  %901 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4180 = ptrtoint i32* %900 to i64
  %sub.ptr.rhs.cast4181 = ptrtoint i32* %901 to i64
  %sub.ptr.sub4182 = sub i64 %sub.ptr.lhs.cast4180, %sub.ptr.rhs.cast4181
  %sub.ptr.div4183 = sdiv exact i64 %sub.ptr.sub4182, 4
  %conv4184 = trunc i64 %sub.ptr.div4183 to i32
  %902 = load i64, i64* %dst_size, align 8
  %conv4185 = trunc i64 %902 to i32
  %add4186 = add i32 %conv4184, %conv4185
  %cmp4187 = icmp ule i32 %add4186, 2147483647
  br i1 %cmp4187, label %cond.true.4189, label %cond.false.4197

cond.true.4189:                                   ; preds = %cond.true.4179
  %903 = load i32*, i32** %buf_end, align 8
  %904 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4190 = ptrtoint i32* %903 to i64
  %sub.ptr.rhs.cast4191 = ptrtoint i32* %904 to i64
  %sub.ptr.sub4192 = sub i64 %sub.ptr.lhs.cast4190, %sub.ptr.rhs.cast4191
  %sub.ptr.div4193 = sdiv exact i64 %sub.ptr.sub4192, 4
  %conv4194 = trunc i64 %sub.ptr.div4193 to i32
  %905 = load i64, i64* %dst_size, align 8
  %conv4195 = trunc i64 %905 to i32
  %add4196 = add i32 %conv4194, %conv4195
  br label %cond.end.4207

cond.false.4197:                                  ; preds = %cond.true.4179
  %906 = load i32*, i32** %buf_end, align 8
  %907 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4198 = ptrtoint i32* %906 to i64
  %sub.ptr.rhs.cast4199 = ptrtoint i32* %907 to i64
  %sub.ptr.sub4200 = sub i64 %sub.ptr.lhs.cast4198, %sub.ptr.rhs.cast4199
  %sub.ptr.div4201 = sdiv exact i64 %sub.ptr.sub4200, 4
  %conv4202 = trunc i64 %sub.ptr.div4201 to i32
  %908 = load i64, i64* %dst_size, align 8
  %conv4203 = trunc i64 %908 to i32
  %add4204 = add i32 %conv4202, %conv4203
  %sub4205 = sub i32 %add4204, -2147483648
  %add4206 = add nsw i32 %sub4205, -2147483648
  br label %cond.end.4207

cond.end.4207:                                    ; preds = %cond.false.4197, %cond.true.4189
  %cond4208 = phi i32 [ %add4196, %cond.true.4189 ], [ %add4206, %cond.false.4197 ]
  %conv4209 = sext i32 %cond4208 to i64
  store i64 %conv4209, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.4210:                                  ; preds = %lor.lhs.false.4171
  %909 = load i32*, i32** %buf_end, align 8
  %910 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4211 = ptrtoint i32* %909 to i64
  %sub.ptr.rhs.cast4212 = ptrtoint i32* %910 to i64
  %sub.ptr.sub4213 = sub i64 %sub.ptr.lhs.cast4211, %sub.ptr.rhs.cast4212
  %sub.ptr.div4214 = sdiv exact i64 %sub.ptr.sub4213, 4
  %conv4215 = trunc i64 %sub.ptr.div4214 to i32
  %911 = load i64, i64* %dst_size, align 8
  %conv4216 = trunc i64 %911 to i32
  %add4217 = add i32 %conv4215, %conv4216
  %cmp4218 = icmp ule i32 %add4217, 2147483647
  br i1 %cmp4218, label %cond.true.4220, label %cond.false.4228

cond.true.4220:                                   ; preds = %cond.false.4210
  %912 = load i32*, i32** %buf_end, align 8
  %913 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4221 = ptrtoint i32* %912 to i64
  %sub.ptr.rhs.cast4222 = ptrtoint i32* %913 to i64
  %sub.ptr.sub4223 = sub i64 %sub.ptr.lhs.cast4221, %sub.ptr.rhs.cast4222
  %sub.ptr.div4224 = sdiv exact i64 %sub.ptr.sub4223, 4
  %conv4225 = trunc i64 %sub.ptr.div4224 to i32
  %914 = load i64, i64* %dst_size, align 8
  %conv4226 = trunc i64 %914 to i32
  %add4227 = add i32 %conv4225, %conv4226
  br label %cond.end.4238

cond.false.4228:                                  ; preds = %cond.false.4210
  %915 = load i32*, i32** %buf_end, align 8
  %916 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4229 = ptrtoint i32* %915 to i64
  %sub.ptr.rhs.cast4230 = ptrtoint i32* %916 to i64
  %sub.ptr.sub4231 = sub i64 %sub.ptr.lhs.cast4229, %sub.ptr.rhs.cast4230
  %sub.ptr.div4232 = sdiv exact i64 %sub.ptr.sub4231, 4
  %conv4233 = trunc i64 %sub.ptr.div4232 to i32
  %917 = load i64, i64* %dst_size, align 8
  %conv4234 = trunc i64 %917 to i32
  %add4235 = add i32 %conv4233, %conv4234
  %sub4236 = sub i32 %add4235, -2147483648
  %add4237 = add nsw i32 %sub4236, -2147483648
  br label %cond.end.4238

cond.end.4238:                                    ; preds = %cond.false.4228, %cond.true.4220
  %cond4239 = phi i32 [ %add4227, %cond.true.4220 ], [ %add4237, %cond.false.4228 ]
  %conv4240 = sext i32 %cond4239 to i64
  store i64 %conv4240, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.4241:                                  ; preds = %cond.false.3641
  br i1 true, label %cond.true.4242, label %cond.false.4771

cond.true.4242:                                   ; preds = %cond.false.4241
  br i1 false, label %cond.true.4243, label %cond.false.4507

cond.true.4243:                                   ; preds = %cond.true.4242
  %918 = load i64, i64* %dst_size, align 8
  %mul4244 = mul nsw i64 0, %918
  %919 = load i32*, i32** %buf_end, align 8
  %920 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4245 = ptrtoint i32* %919 to i64
  %sub.ptr.rhs.cast4246 = ptrtoint i32* %920 to i64
  %sub.ptr.sub4247 = sub i64 %sub.ptr.lhs.cast4245, %sub.ptr.rhs.cast4246
  %sub.ptr.div4248 = sdiv exact i64 %sub.ptr.sub4247, 4
  %add4249 = add nsw i64 %mul4244, %sub.ptr.div4248
  %mul4250 = mul nsw i64 0, %add4249
  %sub4251 = sub nsw i64 %mul4250, 1
  %cmp4252 = icmp slt i64 %sub4251, 0
  br i1 %cmp4252, label %cond.true.4254, label %cond.false.4281

cond.true.4254:                                   ; preds = %cond.true.4243
  %921 = load i64, i64* %dst_size, align 8
  %mul4255 = mul nsw i64 0, %921
  %922 = load i32*, i32** %buf_end, align 8
  %923 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4256 = ptrtoint i32* %922 to i64
  %sub.ptr.rhs.cast4257 = ptrtoint i32* %923 to i64
  %sub.ptr.sub4258 = sub i64 %sub.ptr.lhs.cast4256, %sub.ptr.rhs.cast4257
  %sub.ptr.div4259 = sdiv exact i64 %sub.ptr.sub4258, 4
  %add4260 = add nsw i64 %mul4255, %sub.ptr.div4259
  %mul4261 = mul nsw i64 0, %add4260
  %add4262 = add nsw i64 %mul4261, 0
  %neg4263 = xor i64 %add4262, -1
  %cmp4264 = icmp eq i64 %neg4263, -1
  %conv4265 = zext i1 %cmp4264 to i32
  %sub4266 = sub nsw i32 0, %conv4265
  %conv4267 = sext i32 %sub4266 to i64
  %924 = load i64, i64* %dst_size, align 8
  %mul4268 = mul nsw i64 0, %924
  %925 = load i32*, i32** %buf_end, align 8
  %926 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4269 = ptrtoint i32* %925 to i64
  %sub.ptr.rhs.cast4270 = ptrtoint i32* %926 to i64
  %sub.ptr.sub4271 = sub i64 %sub.ptr.lhs.cast4269, %sub.ptr.rhs.cast4270
  %sub.ptr.div4272 = sdiv exact i64 %sub.ptr.sub4271, 4
  %add4273 = add nsw i64 %mul4268, %sub.ptr.div4272
  %mul4274 = mul nsw i64 0, %add4273
  %add4275 = add nsw i64 %mul4274, 1
  %shl4276 = shl i64 %add4275, 62
  %sub4277 = sub nsw i64 %shl4276, 1
  %mul4278 = mul nsw i64 %sub4277, 2
  %add4279 = add nsw i64 %mul4278, 1
  %sub4280 = sub nsw i64 %conv4267, %add4279
  br label %cond.end.4290

cond.false.4281:                                  ; preds = %cond.true.4243
  %927 = load i64, i64* %dst_size, align 8
  %mul4282 = mul nsw i64 0, %927
  %928 = load i32*, i32** %buf_end, align 8
  %929 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4283 = ptrtoint i32* %928 to i64
  %sub.ptr.rhs.cast4284 = ptrtoint i32* %929 to i64
  %sub.ptr.sub4285 = sub i64 %sub.ptr.lhs.cast4283, %sub.ptr.rhs.cast4284
  %sub.ptr.div4286 = sdiv exact i64 %sub.ptr.sub4285, 4
  %add4287 = add nsw i64 %mul4282, %sub.ptr.div4286
  %mul4288 = mul nsw i64 0, %add4287
  %add4289 = add nsw i64 %mul4288, 0
  br label %cond.end.4290

cond.end.4290:                                    ; preds = %cond.false.4281, %cond.true.4254
  %cond4291 = phi i64 [ %sub4280, %cond.true.4254 ], [ %add4289, %cond.false.4281 ]
  %cmp4292 = icmp slt i64 %cond4291, 0
  br i1 %cmp4292, label %cond.true.4294, label %cond.false.4395

cond.true.4294:                                   ; preds = %cond.end.4290
  %930 = load i64, i64* %dst_size, align 8
  %cmp4295 = icmp slt i64 %930, 0
  br i1 %cmp4295, label %cond.true.4297, label %cond.false.4353

cond.true.4297:                                   ; preds = %cond.true.4294
  %931 = load i32*, i32** %buf_end, align 8
  %932 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4298 = ptrtoint i32* %931 to i64
  %sub.ptr.rhs.cast4299 = ptrtoint i32* %932 to i64
  %sub.ptr.sub4300 = sub i64 %sub.ptr.lhs.cast4298, %sub.ptr.rhs.cast4299
  %sub.ptr.div4301 = sdiv exact i64 %sub.ptr.sub4300, 4
  %933 = load i64, i64* %dst_size, align 8
  %mul4302 = mul nsw i64 0, %933
  %934 = load i32*, i32** %buf_end, align 8
  %935 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4303 = ptrtoint i32* %934 to i64
  %sub.ptr.rhs.cast4304 = ptrtoint i32* %935 to i64
  %sub.ptr.sub4305 = sub i64 %sub.ptr.lhs.cast4303, %sub.ptr.rhs.cast4304
  %sub.ptr.div4306 = sdiv exact i64 %sub.ptr.sub4305, 4
  %add4307 = add nsw i64 %mul4302, %sub.ptr.div4306
  %mul4308 = mul nsw i64 0, %add4307
  %sub4309 = sub nsw i64 %mul4308, 1
  %cmp4310 = icmp slt i64 %sub4309, 0
  br i1 %cmp4310, label %cond.true.4312, label %cond.false.4339

cond.true.4312:                                   ; preds = %cond.true.4297
  %936 = load i64, i64* %dst_size, align 8
  %mul4313 = mul nsw i64 0, %936
  %937 = load i32*, i32** %buf_end, align 8
  %938 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4314 = ptrtoint i32* %937 to i64
  %sub.ptr.rhs.cast4315 = ptrtoint i32* %938 to i64
  %sub.ptr.sub4316 = sub i64 %sub.ptr.lhs.cast4314, %sub.ptr.rhs.cast4315
  %sub.ptr.div4317 = sdiv exact i64 %sub.ptr.sub4316, 4
  %add4318 = add nsw i64 %mul4313, %sub.ptr.div4317
  %mul4319 = mul nsw i64 0, %add4318
  %add4320 = add nsw i64 %mul4319, 0
  %neg4321 = xor i64 %add4320, -1
  %cmp4322 = icmp eq i64 %neg4321, -1
  %conv4323 = zext i1 %cmp4322 to i32
  %sub4324 = sub nsw i32 0, %conv4323
  %conv4325 = sext i32 %sub4324 to i64
  %939 = load i64, i64* %dst_size, align 8
  %mul4326 = mul nsw i64 0, %939
  %940 = load i32*, i32** %buf_end, align 8
  %941 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4327 = ptrtoint i32* %940 to i64
  %sub.ptr.rhs.cast4328 = ptrtoint i32* %941 to i64
  %sub.ptr.sub4329 = sub i64 %sub.ptr.lhs.cast4327, %sub.ptr.rhs.cast4328
  %sub.ptr.div4330 = sdiv exact i64 %sub.ptr.sub4329, 4
  %add4331 = add nsw i64 %mul4326, %sub.ptr.div4330
  %mul4332 = mul nsw i64 0, %add4331
  %add4333 = add nsw i64 %mul4332, 1
  %shl4334 = shl i64 %add4333, 62
  %sub4335 = sub nsw i64 %shl4334, 1
  %mul4336 = mul nsw i64 %sub4335, 2
  %add4337 = add nsw i64 %mul4336, 1
  %sub4338 = sub nsw i64 %conv4325, %add4337
  br label %cond.end.4348

cond.false.4339:                                  ; preds = %cond.true.4297
  %942 = load i64, i64* %dst_size, align 8
  %mul4340 = mul nsw i64 0, %942
  %943 = load i32*, i32** %buf_end, align 8
  %944 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4341 = ptrtoint i32* %943 to i64
  %sub.ptr.rhs.cast4342 = ptrtoint i32* %944 to i64
  %sub.ptr.sub4343 = sub i64 %sub.ptr.lhs.cast4341, %sub.ptr.rhs.cast4342
  %sub.ptr.div4344 = sdiv exact i64 %sub.ptr.sub4343, 4
  %add4345 = add nsw i64 %mul4340, %sub.ptr.div4344
  %mul4346 = mul nsw i64 0, %add4345
  %add4347 = add nsw i64 %mul4346, 0
  br label %cond.end.4348

cond.end.4348:                                    ; preds = %cond.false.4339, %cond.true.4312
  %cond4349 = phi i64 [ %sub4338, %cond.true.4312 ], [ %add4347, %cond.false.4339 ]
  %945 = load i64, i64* %dst_size, align 8
  %sub4350 = sub nsw i64 %cond4349, %945
  %cmp4351 = icmp slt i64 %sub.ptr.div4301, %sub4350
  br i1 %cmp4351, label %cond.true.4459, label %lor.lhs.false.4433

cond.false.4353:                                  ; preds = %cond.true.4294
  %946 = load i64, i64* %dst_size, align 8
  %mul4354 = mul nsw i64 0, %946
  %947 = load i32*, i32** %buf_end, align 8
  %948 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4355 = ptrtoint i32* %947 to i64
  %sub.ptr.rhs.cast4356 = ptrtoint i32* %948 to i64
  %sub.ptr.sub4357 = sub i64 %sub.ptr.lhs.cast4355, %sub.ptr.rhs.cast4356
  %sub.ptr.div4358 = sdiv exact i64 %sub.ptr.sub4357, 4
  %add4359 = add nsw i64 %mul4354, %sub.ptr.div4358
  %mul4360 = mul nsw i64 0, %add4359
  %sub4361 = sub nsw i64 %mul4360, 1
  %cmp4362 = icmp slt i64 %sub4361, 0
  br i1 %cmp4362, label %cond.true.4364, label %cond.false.4377

cond.true.4364:                                   ; preds = %cond.false.4353
  %949 = load i64, i64* %dst_size, align 8
  %mul4365 = mul nsw i64 0, %949
  %950 = load i32*, i32** %buf_end, align 8
  %951 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4366 = ptrtoint i32* %950 to i64
  %sub.ptr.rhs.cast4367 = ptrtoint i32* %951 to i64
  %sub.ptr.sub4368 = sub i64 %sub.ptr.lhs.cast4366, %sub.ptr.rhs.cast4367
  %sub.ptr.div4369 = sdiv exact i64 %sub.ptr.sub4368, 4
  %add4370 = add nsw i64 %mul4365, %sub.ptr.div4369
  %mul4371 = mul nsw i64 0, %add4370
  %add4372 = add nsw i64 %mul4371, 1
  %shl4373 = shl i64 %add4372, 62
  %sub4374 = sub nsw i64 %shl4373, 1
  %mul4375 = mul nsw i64 %sub4374, 2
  %add4376 = add nsw i64 %mul4375, 1
  br label %cond.end.4386

cond.false.4377:                                  ; preds = %cond.false.4353
  %952 = load i64, i64* %dst_size, align 8
  %mul4378 = mul nsw i64 0, %952
  %953 = load i32*, i32** %buf_end, align 8
  %954 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4379 = ptrtoint i32* %953 to i64
  %sub.ptr.rhs.cast4380 = ptrtoint i32* %954 to i64
  %sub.ptr.sub4381 = sub i64 %sub.ptr.lhs.cast4379, %sub.ptr.rhs.cast4380
  %sub.ptr.div4382 = sdiv exact i64 %sub.ptr.sub4381, 4
  %add4383 = add nsw i64 %mul4378, %sub.ptr.div4382
  %mul4384 = mul nsw i64 0, %add4383
  %sub4385 = sub nsw i64 %mul4384, 1
  br label %cond.end.4386

cond.end.4386:                                    ; preds = %cond.false.4377, %cond.true.4364
  %cond4387 = phi i64 [ %add4376, %cond.true.4364 ], [ %sub4385, %cond.false.4377 ]
  %955 = load i64, i64* %dst_size, align 8
  %sub4388 = sub nsw i64 %cond4387, %955
  %956 = load i32*, i32** %buf_end, align 8
  %957 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4389 = ptrtoint i32* %956 to i64
  %sub.ptr.rhs.cast4390 = ptrtoint i32* %957 to i64
  %sub.ptr.sub4391 = sub i64 %sub.ptr.lhs.cast4389, %sub.ptr.rhs.cast4390
  %sub.ptr.div4392 = sdiv exact i64 %sub.ptr.sub4391, 4
  %cmp4393 = icmp slt i64 %sub4388, %sub.ptr.div4392
  br i1 %cmp4393, label %cond.true.4459, label %lor.lhs.false.4433

cond.false.4395:                                  ; preds = %cond.end.4290
  %958 = load i32*, i32** %buf_end, align 8
  %959 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4396 = ptrtoint i32* %958 to i64
  %sub.ptr.rhs.cast4397 = ptrtoint i32* %959 to i64
  %sub.ptr.sub4398 = sub i64 %sub.ptr.lhs.cast4396, %sub.ptr.rhs.cast4397
  %sub.ptr.div4399 = sdiv exact i64 %sub.ptr.sub4398, 4
  %cmp4400 = icmp slt i64 %sub.ptr.div4399, 0
  br i1 %cmp4400, label %cond.true.4402, label %cond.false.4410

cond.true.4402:                                   ; preds = %cond.false.4395
  %960 = load i64, i64* %dst_size, align 8
  %961 = load i32*, i32** %buf_end, align 8
  %962 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4403 = ptrtoint i32* %961 to i64
  %sub.ptr.rhs.cast4404 = ptrtoint i32* %962 to i64
  %sub.ptr.sub4405 = sub i64 %sub.ptr.lhs.cast4403, %sub.ptr.rhs.cast4404
  %sub.ptr.div4406 = sdiv exact i64 %sub.ptr.sub4405, 4
  %963 = load i64, i64* %dst_size, align 8
  %add4407 = add nsw i64 %sub.ptr.div4406, %963
  %cmp4408 = icmp sle i64 %960, %add4407
  br i1 %cmp4408, label %cond.true.4459, label %lor.lhs.false.4433

cond.false.4410:                                  ; preds = %cond.false.4395
  %964 = load i64, i64* %dst_size, align 8
  %cmp4411 = icmp slt i64 %964, 0
  br i1 %cmp4411, label %cond.true.4413, label %cond.false.4425

cond.true.4413:                                   ; preds = %cond.false.4410
  %965 = load i32*, i32** %buf_end, align 8
  %966 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4414 = ptrtoint i32* %965 to i64
  %sub.ptr.rhs.cast4415 = ptrtoint i32* %966 to i64
  %sub.ptr.sub4416 = sub i64 %sub.ptr.lhs.cast4414, %sub.ptr.rhs.cast4415
  %sub.ptr.div4417 = sdiv exact i64 %sub.ptr.sub4416, 4
  %967 = load i32*, i32** %buf_end, align 8
  %968 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4418 = ptrtoint i32* %967 to i64
  %sub.ptr.rhs.cast4419 = ptrtoint i32* %968 to i64
  %sub.ptr.sub4420 = sub i64 %sub.ptr.lhs.cast4418, %sub.ptr.rhs.cast4419
  %sub.ptr.div4421 = sdiv exact i64 %sub.ptr.sub4420, 4
  %969 = load i64, i64* %dst_size, align 8
  %add4422 = add nsw i64 %sub.ptr.div4421, %969
  %cmp4423 = icmp sle i64 %sub.ptr.div4417, %add4422
  br i1 %cmp4423, label %cond.true.4459, label %lor.lhs.false.4433

cond.false.4425:                                  ; preds = %cond.false.4410
  %970 = load i32*, i32** %buf_end, align 8
  %971 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4426 = ptrtoint i32* %970 to i64
  %sub.ptr.rhs.cast4427 = ptrtoint i32* %971 to i64
  %sub.ptr.sub4428 = sub i64 %sub.ptr.lhs.cast4426, %sub.ptr.rhs.cast4427
  %sub.ptr.div4429 = sdiv exact i64 %sub.ptr.sub4428, 4
  %972 = load i64, i64* %dst_size, align 8
  %add4430 = add nsw i64 %sub.ptr.div4429, %972
  %973 = load i64, i64* %dst_size, align 8
  %cmp4431 = icmp slt i64 %add4430, %973
  br i1 %cmp4431, label %cond.true.4459, label %lor.lhs.false.4433

lor.lhs.false.4433:                               ; preds = %cond.false.4425, %cond.true.4413, %cond.true.4402, %cond.end.4386, %cond.end.4348
  %974 = load i32*, i32** %buf_end, align 8
  %975 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4434 = ptrtoint i32* %974 to i64
  %sub.ptr.rhs.cast4435 = ptrtoint i32* %975 to i64
  %sub.ptr.sub4436 = sub i64 %sub.ptr.lhs.cast4434, %sub.ptr.rhs.cast4435
  %sub.ptr.div4437 = sdiv exact i64 %sub.ptr.sub4436, 4
  %976 = load i64, i64* %dst_size, align 8
  %add4438 = add nsw i64 %sub.ptr.div4437, %976
  %mul4439 = mul nsw i64 0, %add4438
  %sub4440 = sub nsw i64 %mul4439, 1
  %cmp4441 = icmp slt i64 %sub4440, 0
  br i1 %cmp4441, label %land.lhs.true.4443, label %lor.lhs.false.4451

land.lhs.true.4443:                               ; preds = %lor.lhs.false.4433
  %977 = load i32*, i32** %buf_end, align 8
  %978 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4444 = ptrtoint i32* %977 to i64
  %sub.ptr.rhs.cast4445 = ptrtoint i32* %978 to i64
  %sub.ptr.sub4446 = sub i64 %sub.ptr.lhs.cast4444, %sub.ptr.rhs.cast4445
  %sub.ptr.div4447 = sdiv exact i64 %sub.ptr.sub4446, 4
  %979 = load i64, i64* %dst_size, align 8
  %add4448 = add nsw i64 %sub.ptr.div4447, %979
  %cmp4449 = icmp slt i64 %add4448, -9223372036854775808
  br i1 %cmp4449, label %cond.true.4459, label %lor.lhs.false.4451

lor.lhs.false.4451:                               ; preds = %land.lhs.true.4443, %lor.lhs.false.4433
  %980 = load i32*, i32** %buf_end, align 8
  %981 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4452 = ptrtoint i32* %980 to i64
  %sub.ptr.rhs.cast4453 = ptrtoint i32* %981 to i64
  %sub.ptr.sub4454 = sub i64 %sub.ptr.lhs.cast4452, %sub.ptr.rhs.cast4453
  %sub.ptr.div4455 = sdiv exact i64 %sub.ptr.sub4454, 4
  %982 = load i64, i64* %dst_size, align 8
  %add4456 = add nsw i64 %sub.ptr.div4455, %982
  %cmp4457 = icmp slt i64 9223372036854775807, %add4456
  br i1 %cmp4457, label %cond.true.4459, label %cond.false.4483

cond.true.4459:                                   ; preds = %lor.lhs.false.4451, %land.lhs.true.4443, %cond.false.4425, %cond.true.4413, %cond.true.4402, %cond.end.4386, %cond.end.4348
  %983 = load i32*, i32** %buf_end, align 8
  %984 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4460 = ptrtoint i32* %983 to i64
  %sub.ptr.rhs.cast4461 = ptrtoint i32* %984 to i64
  %sub.ptr.sub4462 = sub i64 %sub.ptr.lhs.cast4460, %sub.ptr.rhs.cast4461
  %sub.ptr.div4463 = sdiv exact i64 %sub.ptr.sub4462, 4
  %985 = load i64, i64* %dst_size, align 8
  %add4464 = add i64 %sub.ptr.div4463, %985
  %cmp4465 = icmp ule i64 %add4464, 9223372036854775807
  br i1 %cmp4465, label %cond.true.4467, label %cond.false.4473

cond.true.4467:                                   ; preds = %cond.true.4459
  %986 = load i32*, i32** %buf_end, align 8
  %987 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4468 = ptrtoint i32* %986 to i64
  %sub.ptr.rhs.cast4469 = ptrtoint i32* %987 to i64
  %sub.ptr.sub4470 = sub i64 %sub.ptr.lhs.cast4468, %sub.ptr.rhs.cast4469
  %sub.ptr.div4471 = sdiv exact i64 %sub.ptr.sub4470, 4
  %988 = load i64, i64* %dst_size, align 8
  %add4472 = add i64 %sub.ptr.div4471, %988
  br label %cond.end.4481

cond.false.4473:                                  ; preds = %cond.true.4459
  %989 = load i32*, i32** %buf_end, align 8
  %990 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4474 = ptrtoint i32* %989 to i64
  %sub.ptr.rhs.cast4475 = ptrtoint i32* %990 to i64
  %sub.ptr.sub4476 = sub i64 %sub.ptr.lhs.cast4474, %sub.ptr.rhs.cast4475
  %sub.ptr.div4477 = sdiv exact i64 %sub.ptr.sub4476, 4
  %991 = load i64, i64* %dst_size, align 8
  %add4478 = add i64 %sub.ptr.div4477, %991
  %sub4479 = sub i64 %add4478, -9223372036854775808
  %add4480 = add nsw i64 %sub4479, -9223372036854775808
  br label %cond.end.4481

cond.end.4481:                                    ; preds = %cond.false.4473, %cond.true.4467
  %cond4482 = phi i64 [ %add4472, %cond.true.4467 ], [ %add4480, %cond.false.4473 ]
  store i64 %cond4482, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.4483:                                  ; preds = %lor.lhs.false.4451
  %992 = load i32*, i32** %buf_end, align 8
  %993 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4484 = ptrtoint i32* %992 to i64
  %sub.ptr.rhs.cast4485 = ptrtoint i32* %993 to i64
  %sub.ptr.sub4486 = sub i64 %sub.ptr.lhs.cast4484, %sub.ptr.rhs.cast4485
  %sub.ptr.div4487 = sdiv exact i64 %sub.ptr.sub4486, 4
  %994 = load i64, i64* %dst_size, align 8
  %add4488 = add i64 %sub.ptr.div4487, %994
  %cmp4489 = icmp ule i64 %add4488, 9223372036854775807
  br i1 %cmp4489, label %cond.true.4491, label %cond.false.4497

cond.true.4491:                                   ; preds = %cond.false.4483
  %995 = load i32*, i32** %buf_end, align 8
  %996 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4492 = ptrtoint i32* %995 to i64
  %sub.ptr.rhs.cast4493 = ptrtoint i32* %996 to i64
  %sub.ptr.sub4494 = sub i64 %sub.ptr.lhs.cast4492, %sub.ptr.rhs.cast4493
  %sub.ptr.div4495 = sdiv exact i64 %sub.ptr.sub4494, 4
  %997 = load i64, i64* %dst_size, align 8
  %add4496 = add i64 %sub.ptr.div4495, %997
  br label %cond.end.4505

cond.false.4497:                                  ; preds = %cond.false.4483
  %998 = load i32*, i32** %buf_end, align 8
  %999 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4498 = ptrtoint i32* %998 to i64
  %sub.ptr.rhs.cast4499 = ptrtoint i32* %999 to i64
  %sub.ptr.sub4500 = sub i64 %sub.ptr.lhs.cast4498, %sub.ptr.rhs.cast4499
  %sub.ptr.div4501 = sdiv exact i64 %sub.ptr.sub4500, 4
  %1000 = load i64, i64* %dst_size, align 8
  %add4502 = add i64 %sub.ptr.div4501, %1000
  %sub4503 = sub i64 %add4502, -9223372036854775808
  %add4504 = add nsw i64 %sub4503, -9223372036854775808
  br label %cond.end.4505

cond.end.4505:                                    ; preds = %cond.false.4497, %cond.true.4491
  %cond4506 = phi i64 [ %add4496, %cond.true.4491 ], [ %add4504, %cond.false.4497 ]
  store i64 %cond4506, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.4507:                                  ; preds = %cond.true.4242
  %1001 = load i64, i64* %dst_size, align 8
  %mul4508 = mul nsw i64 0, %1001
  %1002 = load i32*, i32** %buf_end, align 8
  %1003 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4509 = ptrtoint i32* %1002 to i64
  %sub.ptr.rhs.cast4510 = ptrtoint i32* %1003 to i64
  %sub.ptr.sub4511 = sub i64 %sub.ptr.lhs.cast4509, %sub.ptr.rhs.cast4510
  %sub.ptr.div4512 = sdiv exact i64 %sub.ptr.sub4511, 4
  %add4513 = add nsw i64 %mul4508, %sub.ptr.div4512
  %mul4514 = mul nsw i64 0, %add4513
  %sub4515 = sub nsw i64 %mul4514, 1
  %cmp4516 = icmp slt i64 %sub4515, 0
  br i1 %cmp4516, label %cond.true.4518, label %cond.false.4545

cond.true.4518:                                   ; preds = %cond.false.4507
  %1004 = load i64, i64* %dst_size, align 8
  %mul4519 = mul nsw i64 0, %1004
  %1005 = load i32*, i32** %buf_end, align 8
  %1006 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4520 = ptrtoint i32* %1005 to i64
  %sub.ptr.rhs.cast4521 = ptrtoint i32* %1006 to i64
  %sub.ptr.sub4522 = sub i64 %sub.ptr.lhs.cast4520, %sub.ptr.rhs.cast4521
  %sub.ptr.div4523 = sdiv exact i64 %sub.ptr.sub4522, 4
  %add4524 = add nsw i64 %mul4519, %sub.ptr.div4523
  %mul4525 = mul nsw i64 0, %add4524
  %add4526 = add nsw i64 %mul4525, 0
  %neg4527 = xor i64 %add4526, -1
  %cmp4528 = icmp eq i64 %neg4527, -1
  %conv4529 = zext i1 %cmp4528 to i32
  %sub4530 = sub nsw i32 0, %conv4529
  %conv4531 = sext i32 %sub4530 to i64
  %1007 = load i64, i64* %dst_size, align 8
  %mul4532 = mul nsw i64 0, %1007
  %1008 = load i32*, i32** %buf_end, align 8
  %1009 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4533 = ptrtoint i32* %1008 to i64
  %sub.ptr.rhs.cast4534 = ptrtoint i32* %1009 to i64
  %sub.ptr.sub4535 = sub i64 %sub.ptr.lhs.cast4533, %sub.ptr.rhs.cast4534
  %sub.ptr.div4536 = sdiv exact i64 %sub.ptr.sub4535, 4
  %add4537 = add nsw i64 %mul4532, %sub.ptr.div4536
  %mul4538 = mul nsw i64 0, %add4537
  %add4539 = add nsw i64 %mul4538, 1
  %shl4540 = shl i64 %add4539, 62
  %sub4541 = sub nsw i64 %shl4540, 1
  %mul4542 = mul nsw i64 %sub4541, 2
  %add4543 = add nsw i64 %mul4542, 1
  %sub4544 = sub nsw i64 %conv4531, %add4543
  br label %cond.end.4554

cond.false.4545:                                  ; preds = %cond.false.4507
  %1010 = load i64, i64* %dst_size, align 8
  %mul4546 = mul nsw i64 0, %1010
  %1011 = load i32*, i32** %buf_end, align 8
  %1012 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4547 = ptrtoint i32* %1011 to i64
  %sub.ptr.rhs.cast4548 = ptrtoint i32* %1012 to i64
  %sub.ptr.sub4549 = sub i64 %sub.ptr.lhs.cast4547, %sub.ptr.rhs.cast4548
  %sub.ptr.div4550 = sdiv exact i64 %sub.ptr.sub4549, 4
  %add4551 = add nsw i64 %mul4546, %sub.ptr.div4550
  %mul4552 = mul nsw i64 0, %add4551
  %add4553 = add nsw i64 %mul4552, 0
  br label %cond.end.4554

cond.end.4554:                                    ; preds = %cond.false.4545, %cond.true.4518
  %cond4555 = phi i64 [ %sub4544, %cond.true.4518 ], [ %add4553, %cond.false.4545 ]
  %cmp4556 = icmp slt i64 %cond4555, 0
  br i1 %cmp4556, label %cond.true.4558, label %cond.false.4659

cond.true.4558:                                   ; preds = %cond.end.4554
  %1013 = load i64, i64* %dst_size, align 8
  %cmp4559 = icmp slt i64 %1013, 0
  br i1 %cmp4559, label %cond.true.4561, label %cond.false.4617

cond.true.4561:                                   ; preds = %cond.true.4558
  %1014 = load i32*, i32** %buf_end, align 8
  %1015 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4562 = ptrtoint i32* %1014 to i64
  %sub.ptr.rhs.cast4563 = ptrtoint i32* %1015 to i64
  %sub.ptr.sub4564 = sub i64 %sub.ptr.lhs.cast4562, %sub.ptr.rhs.cast4563
  %sub.ptr.div4565 = sdiv exact i64 %sub.ptr.sub4564, 4
  %1016 = load i64, i64* %dst_size, align 8
  %mul4566 = mul nsw i64 0, %1016
  %1017 = load i32*, i32** %buf_end, align 8
  %1018 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4567 = ptrtoint i32* %1017 to i64
  %sub.ptr.rhs.cast4568 = ptrtoint i32* %1018 to i64
  %sub.ptr.sub4569 = sub i64 %sub.ptr.lhs.cast4567, %sub.ptr.rhs.cast4568
  %sub.ptr.div4570 = sdiv exact i64 %sub.ptr.sub4569, 4
  %add4571 = add nsw i64 %mul4566, %sub.ptr.div4570
  %mul4572 = mul nsw i64 0, %add4571
  %sub4573 = sub nsw i64 %mul4572, 1
  %cmp4574 = icmp slt i64 %sub4573, 0
  br i1 %cmp4574, label %cond.true.4576, label %cond.false.4603

cond.true.4576:                                   ; preds = %cond.true.4561
  %1019 = load i64, i64* %dst_size, align 8
  %mul4577 = mul nsw i64 0, %1019
  %1020 = load i32*, i32** %buf_end, align 8
  %1021 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4578 = ptrtoint i32* %1020 to i64
  %sub.ptr.rhs.cast4579 = ptrtoint i32* %1021 to i64
  %sub.ptr.sub4580 = sub i64 %sub.ptr.lhs.cast4578, %sub.ptr.rhs.cast4579
  %sub.ptr.div4581 = sdiv exact i64 %sub.ptr.sub4580, 4
  %add4582 = add nsw i64 %mul4577, %sub.ptr.div4581
  %mul4583 = mul nsw i64 0, %add4582
  %add4584 = add nsw i64 %mul4583, 0
  %neg4585 = xor i64 %add4584, -1
  %cmp4586 = icmp eq i64 %neg4585, -1
  %conv4587 = zext i1 %cmp4586 to i32
  %sub4588 = sub nsw i32 0, %conv4587
  %conv4589 = sext i32 %sub4588 to i64
  %1022 = load i64, i64* %dst_size, align 8
  %mul4590 = mul nsw i64 0, %1022
  %1023 = load i32*, i32** %buf_end, align 8
  %1024 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4591 = ptrtoint i32* %1023 to i64
  %sub.ptr.rhs.cast4592 = ptrtoint i32* %1024 to i64
  %sub.ptr.sub4593 = sub i64 %sub.ptr.lhs.cast4591, %sub.ptr.rhs.cast4592
  %sub.ptr.div4594 = sdiv exact i64 %sub.ptr.sub4593, 4
  %add4595 = add nsw i64 %mul4590, %sub.ptr.div4594
  %mul4596 = mul nsw i64 0, %add4595
  %add4597 = add nsw i64 %mul4596, 1
  %shl4598 = shl i64 %add4597, 62
  %sub4599 = sub nsw i64 %shl4598, 1
  %mul4600 = mul nsw i64 %sub4599, 2
  %add4601 = add nsw i64 %mul4600, 1
  %sub4602 = sub nsw i64 %conv4589, %add4601
  br label %cond.end.4612

cond.false.4603:                                  ; preds = %cond.true.4561
  %1025 = load i64, i64* %dst_size, align 8
  %mul4604 = mul nsw i64 0, %1025
  %1026 = load i32*, i32** %buf_end, align 8
  %1027 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4605 = ptrtoint i32* %1026 to i64
  %sub.ptr.rhs.cast4606 = ptrtoint i32* %1027 to i64
  %sub.ptr.sub4607 = sub i64 %sub.ptr.lhs.cast4605, %sub.ptr.rhs.cast4606
  %sub.ptr.div4608 = sdiv exact i64 %sub.ptr.sub4607, 4
  %add4609 = add nsw i64 %mul4604, %sub.ptr.div4608
  %mul4610 = mul nsw i64 0, %add4609
  %add4611 = add nsw i64 %mul4610, 0
  br label %cond.end.4612

cond.end.4612:                                    ; preds = %cond.false.4603, %cond.true.4576
  %cond4613 = phi i64 [ %sub4602, %cond.true.4576 ], [ %add4611, %cond.false.4603 ]
  %1028 = load i64, i64* %dst_size, align 8
  %sub4614 = sub nsw i64 %cond4613, %1028
  %cmp4615 = icmp slt i64 %sub.ptr.div4565, %sub4614
  br i1 %cmp4615, label %cond.true.4723, label %lor.lhs.false.4697

cond.false.4617:                                  ; preds = %cond.true.4558
  %1029 = load i64, i64* %dst_size, align 8
  %mul4618 = mul nsw i64 0, %1029
  %1030 = load i32*, i32** %buf_end, align 8
  %1031 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4619 = ptrtoint i32* %1030 to i64
  %sub.ptr.rhs.cast4620 = ptrtoint i32* %1031 to i64
  %sub.ptr.sub4621 = sub i64 %sub.ptr.lhs.cast4619, %sub.ptr.rhs.cast4620
  %sub.ptr.div4622 = sdiv exact i64 %sub.ptr.sub4621, 4
  %add4623 = add nsw i64 %mul4618, %sub.ptr.div4622
  %mul4624 = mul nsw i64 0, %add4623
  %sub4625 = sub nsw i64 %mul4624, 1
  %cmp4626 = icmp slt i64 %sub4625, 0
  br i1 %cmp4626, label %cond.true.4628, label %cond.false.4641

cond.true.4628:                                   ; preds = %cond.false.4617
  %1032 = load i64, i64* %dst_size, align 8
  %mul4629 = mul nsw i64 0, %1032
  %1033 = load i32*, i32** %buf_end, align 8
  %1034 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4630 = ptrtoint i32* %1033 to i64
  %sub.ptr.rhs.cast4631 = ptrtoint i32* %1034 to i64
  %sub.ptr.sub4632 = sub i64 %sub.ptr.lhs.cast4630, %sub.ptr.rhs.cast4631
  %sub.ptr.div4633 = sdiv exact i64 %sub.ptr.sub4632, 4
  %add4634 = add nsw i64 %mul4629, %sub.ptr.div4633
  %mul4635 = mul nsw i64 0, %add4634
  %add4636 = add nsw i64 %mul4635, 1
  %shl4637 = shl i64 %add4636, 62
  %sub4638 = sub nsw i64 %shl4637, 1
  %mul4639 = mul nsw i64 %sub4638, 2
  %add4640 = add nsw i64 %mul4639, 1
  br label %cond.end.4650

cond.false.4641:                                  ; preds = %cond.false.4617
  %1035 = load i64, i64* %dst_size, align 8
  %mul4642 = mul nsw i64 0, %1035
  %1036 = load i32*, i32** %buf_end, align 8
  %1037 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4643 = ptrtoint i32* %1036 to i64
  %sub.ptr.rhs.cast4644 = ptrtoint i32* %1037 to i64
  %sub.ptr.sub4645 = sub i64 %sub.ptr.lhs.cast4643, %sub.ptr.rhs.cast4644
  %sub.ptr.div4646 = sdiv exact i64 %sub.ptr.sub4645, 4
  %add4647 = add nsw i64 %mul4642, %sub.ptr.div4646
  %mul4648 = mul nsw i64 0, %add4647
  %sub4649 = sub nsw i64 %mul4648, 1
  br label %cond.end.4650

cond.end.4650:                                    ; preds = %cond.false.4641, %cond.true.4628
  %cond4651 = phi i64 [ %add4640, %cond.true.4628 ], [ %sub4649, %cond.false.4641 ]
  %1038 = load i64, i64* %dst_size, align 8
  %sub4652 = sub nsw i64 %cond4651, %1038
  %1039 = load i32*, i32** %buf_end, align 8
  %1040 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4653 = ptrtoint i32* %1039 to i64
  %sub.ptr.rhs.cast4654 = ptrtoint i32* %1040 to i64
  %sub.ptr.sub4655 = sub i64 %sub.ptr.lhs.cast4653, %sub.ptr.rhs.cast4654
  %sub.ptr.div4656 = sdiv exact i64 %sub.ptr.sub4655, 4
  %cmp4657 = icmp slt i64 %sub4652, %sub.ptr.div4656
  br i1 %cmp4657, label %cond.true.4723, label %lor.lhs.false.4697

cond.false.4659:                                  ; preds = %cond.end.4554
  %1041 = load i32*, i32** %buf_end, align 8
  %1042 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4660 = ptrtoint i32* %1041 to i64
  %sub.ptr.rhs.cast4661 = ptrtoint i32* %1042 to i64
  %sub.ptr.sub4662 = sub i64 %sub.ptr.lhs.cast4660, %sub.ptr.rhs.cast4661
  %sub.ptr.div4663 = sdiv exact i64 %sub.ptr.sub4662, 4
  %cmp4664 = icmp slt i64 %sub.ptr.div4663, 0
  br i1 %cmp4664, label %cond.true.4666, label %cond.false.4674

cond.true.4666:                                   ; preds = %cond.false.4659
  %1043 = load i64, i64* %dst_size, align 8
  %1044 = load i32*, i32** %buf_end, align 8
  %1045 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4667 = ptrtoint i32* %1044 to i64
  %sub.ptr.rhs.cast4668 = ptrtoint i32* %1045 to i64
  %sub.ptr.sub4669 = sub i64 %sub.ptr.lhs.cast4667, %sub.ptr.rhs.cast4668
  %sub.ptr.div4670 = sdiv exact i64 %sub.ptr.sub4669, 4
  %1046 = load i64, i64* %dst_size, align 8
  %add4671 = add nsw i64 %sub.ptr.div4670, %1046
  %cmp4672 = icmp sle i64 %1043, %add4671
  br i1 %cmp4672, label %cond.true.4723, label %lor.lhs.false.4697

cond.false.4674:                                  ; preds = %cond.false.4659
  %1047 = load i64, i64* %dst_size, align 8
  %cmp4675 = icmp slt i64 %1047, 0
  br i1 %cmp4675, label %cond.true.4677, label %cond.false.4689

cond.true.4677:                                   ; preds = %cond.false.4674
  %1048 = load i32*, i32** %buf_end, align 8
  %1049 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4678 = ptrtoint i32* %1048 to i64
  %sub.ptr.rhs.cast4679 = ptrtoint i32* %1049 to i64
  %sub.ptr.sub4680 = sub i64 %sub.ptr.lhs.cast4678, %sub.ptr.rhs.cast4679
  %sub.ptr.div4681 = sdiv exact i64 %sub.ptr.sub4680, 4
  %1050 = load i32*, i32** %buf_end, align 8
  %1051 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4682 = ptrtoint i32* %1050 to i64
  %sub.ptr.rhs.cast4683 = ptrtoint i32* %1051 to i64
  %sub.ptr.sub4684 = sub i64 %sub.ptr.lhs.cast4682, %sub.ptr.rhs.cast4683
  %sub.ptr.div4685 = sdiv exact i64 %sub.ptr.sub4684, 4
  %1052 = load i64, i64* %dst_size, align 8
  %add4686 = add nsw i64 %sub.ptr.div4685, %1052
  %cmp4687 = icmp sle i64 %sub.ptr.div4681, %add4686
  br i1 %cmp4687, label %cond.true.4723, label %lor.lhs.false.4697

cond.false.4689:                                  ; preds = %cond.false.4674
  %1053 = load i32*, i32** %buf_end, align 8
  %1054 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4690 = ptrtoint i32* %1053 to i64
  %sub.ptr.rhs.cast4691 = ptrtoint i32* %1054 to i64
  %sub.ptr.sub4692 = sub i64 %sub.ptr.lhs.cast4690, %sub.ptr.rhs.cast4691
  %sub.ptr.div4693 = sdiv exact i64 %sub.ptr.sub4692, 4
  %1055 = load i64, i64* %dst_size, align 8
  %add4694 = add nsw i64 %sub.ptr.div4693, %1055
  %1056 = load i64, i64* %dst_size, align 8
  %cmp4695 = icmp slt i64 %add4694, %1056
  br i1 %cmp4695, label %cond.true.4723, label %lor.lhs.false.4697

lor.lhs.false.4697:                               ; preds = %cond.false.4689, %cond.true.4677, %cond.true.4666, %cond.end.4650, %cond.end.4612
  %1057 = load i32*, i32** %buf_end, align 8
  %1058 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4698 = ptrtoint i32* %1057 to i64
  %sub.ptr.rhs.cast4699 = ptrtoint i32* %1058 to i64
  %sub.ptr.sub4700 = sub i64 %sub.ptr.lhs.cast4698, %sub.ptr.rhs.cast4699
  %sub.ptr.div4701 = sdiv exact i64 %sub.ptr.sub4700, 4
  %1059 = load i64, i64* %dst_size, align 8
  %add4702 = add nsw i64 %sub.ptr.div4701, %1059
  %mul4703 = mul nsw i64 0, %add4702
  %sub4704 = sub nsw i64 %mul4703, 1
  %cmp4705 = icmp slt i64 %sub4704, 0
  br i1 %cmp4705, label %land.lhs.true.4707, label %lor.lhs.false.4715

land.lhs.true.4707:                               ; preds = %lor.lhs.false.4697
  %1060 = load i32*, i32** %buf_end, align 8
  %1061 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4708 = ptrtoint i32* %1060 to i64
  %sub.ptr.rhs.cast4709 = ptrtoint i32* %1061 to i64
  %sub.ptr.sub4710 = sub i64 %sub.ptr.lhs.cast4708, %sub.ptr.rhs.cast4709
  %sub.ptr.div4711 = sdiv exact i64 %sub.ptr.sub4710, 4
  %1062 = load i64, i64* %dst_size, align 8
  %add4712 = add nsw i64 %sub.ptr.div4711, %1062
  %cmp4713 = icmp slt i64 %add4712, -9223372036854775808
  br i1 %cmp4713, label %cond.true.4723, label %lor.lhs.false.4715

lor.lhs.false.4715:                               ; preds = %land.lhs.true.4707, %lor.lhs.false.4697
  %1063 = load i32*, i32** %buf_end, align 8
  %1064 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4716 = ptrtoint i32* %1063 to i64
  %sub.ptr.rhs.cast4717 = ptrtoint i32* %1064 to i64
  %sub.ptr.sub4718 = sub i64 %sub.ptr.lhs.cast4716, %sub.ptr.rhs.cast4717
  %sub.ptr.div4719 = sdiv exact i64 %sub.ptr.sub4718, 4
  %1065 = load i64, i64* %dst_size, align 8
  %add4720 = add nsw i64 %sub.ptr.div4719, %1065
  %cmp4721 = icmp slt i64 9223372036854775807, %add4720
  br i1 %cmp4721, label %cond.true.4723, label %cond.false.4747

cond.true.4723:                                   ; preds = %lor.lhs.false.4715, %land.lhs.true.4707, %cond.false.4689, %cond.true.4677, %cond.true.4666, %cond.end.4650, %cond.end.4612
  %1066 = load i32*, i32** %buf_end, align 8
  %1067 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4724 = ptrtoint i32* %1066 to i64
  %sub.ptr.rhs.cast4725 = ptrtoint i32* %1067 to i64
  %sub.ptr.sub4726 = sub i64 %sub.ptr.lhs.cast4724, %sub.ptr.rhs.cast4725
  %sub.ptr.div4727 = sdiv exact i64 %sub.ptr.sub4726, 4
  %1068 = load i64, i64* %dst_size, align 8
  %add4728 = add i64 %sub.ptr.div4727, %1068
  %cmp4729 = icmp ule i64 %add4728, 9223372036854775807
  br i1 %cmp4729, label %cond.true.4731, label %cond.false.4737

cond.true.4731:                                   ; preds = %cond.true.4723
  %1069 = load i32*, i32** %buf_end, align 8
  %1070 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4732 = ptrtoint i32* %1069 to i64
  %sub.ptr.rhs.cast4733 = ptrtoint i32* %1070 to i64
  %sub.ptr.sub4734 = sub i64 %sub.ptr.lhs.cast4732, %sub.ptr.rhs.cast4733
  %sub.ptr.div4735 = sdiv exact i64 %sub.ptr.sub4734, 4
  %1071 = load i64, i64* %dst_size, align 8
  %add4736 = add i64 %sub.ptr.div4735, %1071
  br label %cond.end.4745

cond.false.4737:                                  ; preds = %cond.true.4723
  %1072 = load i32*, i32** %buf_end, align 8
  %1073 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4738 = ptrtoint i32* %1072 to i64
  %sub.ptr.rhs.cast4739 = ptrtoint i32* %1073 to i64
  %sub.ptr.sub4740 = sub i64 %sub.ptr.lhs.cast4738, %sub.ptr.rhs.cast4739
  %sub.ptr.div4741 = sdiv exact i64 %sub.ptr.sub4740, 4
  %1074 = load i64, i64* %dst_size, align 8
  %add4742 = add i64 %sub.ptr.div4741, %1074
  %sub4743 = sub i64 %add4742, -9223372036854775808
  %add4744 = add nsw i64 %sub4743, -9223372036854775808
  br label %cond.end.4745

cond.end.4745:                                    ; preds = %cond.false.4737, %cond.true.4731
  %cond4746 = phi i64 [ %add4736, %cond.true.4731 ], [ %add4744, %cond.false.4737 ]
  store i64 %cond4746, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.4747:                                  ; preds = %lor.lhs.false.4715
  %1075 = load i32*, i32** %buf_end, align 8
  %1076 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4748 = ptrtoint i32* %1075 to i64
  %sub.ptr.rhs.cast4749 = ptrtoint i32* %1076 to i64
  %sub.ptr.sub4750 = sub i64 %sub.ptr.lhs.cast4748, %sub.ptr.rhs.cast4749
  %sub.ptr.div4751 = sdiv exact i64 %sub.ptr.sub4750, 4
  %1077 = load i64, i64* %dst_size, align 8
  %add4752 = add i64 %sub.ptr.div4751, %1077
  %cmp4753 = icmp ule i64 %add4752, 9223372036854775807
  br i1 %cmp4753, label %cond.true.4755, label %cond.false.4761

cond.true.4755:                                   ; preds = %cond.false.4747
  %1078 = load i32*, i32** %buf_end, align 8
  %1079 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4756 = ptrtoint i32* %1078 to i64
  %sub.ptr.rhs.cast4757 = ptrtoint i32* %1079 to i64
  %sub.ptr.sub4758 = sub i64 %sub.ptr.lhs.cast4756, %sub.ptr.rhs.cast4757
  %sub.ptr.div4759 = sdiv exact i64 %sub.ptr.sub4758, 4
  %1080 = load i64, i64* %dst_size, align 8
  %add4760 = add i64 %sub.ptr.div4759, %1080
  br label %cond.end.4769

cond.false.4761:                                  ; preds = %cond.false.4747
  %1081 = load i32*, i32** %buf_end, align 8
  %1082 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4762 = ptrtoint i32* %1081 to i64
  %sub.ptr.rhs.cast4763 = ptrtoint i32* %1082 to i64
  %sub.ptr.sub4764 = sub i64 %sub.ptr.lhs.cast4762, %sub.ptr.rhs.cast4763
  %sub.ptr.div4765 = sdiv exact i64 %sub.ptr.sub4764, 4
  %1083 = load i64, i64* %dst_size, align 8
  %add4766 = add i64 %sub.ptr.div4765, %1083
  %sub4767 = sub i64 %add4766, -9223372036854775808
  %add4768 = add nsw i64 %sub4767, -9223372036854775808
  br label %cond.end.4769

cond.end.4769:                                    ; preds = %cond.false.4761, %cond.true.4755
  %cond4770 = phi i64 [ %add4760, %cond.true.4755 ], [ %add4768, %cond.false.4761 ]
  store i64 %cond4770, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.4771:                                  ; preds = %cond.false.4241
  br i1 false, label %cond.true.4772, label %cond.false.5036

cond.true.4772:                                   ; preds = %cond.false.4771
  %1084 = load i64, i64* %dst_size, align 8
  %mul4773 = mul nsw i64 0, %1084
  %1085 = load i32*, i32** %buf_end, align 8
  %1086 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4774 = ptrtoint i32* %1085 to i64
  %sub.ptr.rhs.cast4775 = ptrtoint i32* %1086 to i64
  %sub.ptr.sub4776 = sub i64 %sub.ptr.lhs.cast4774, %sub.ptr.rhs.cast4775
  %sub.ptr.div4777 = sdiv exact i64 %sub.ptr.sub4776, 4
  %add4778 = add nsw i64 %mul4773, %sub.ptr.div4777
  %mul4779 = mul nsw i64 0, %add4778
  %sub4780 = sub nsw i64 %mul4779, 1
  %cmp4781 = icmp slt i64 %sub4780, 0
  br i1 %cmp4781, label %cond.true.4783, label %cond.false.4810

cond.true.4783:                                   ; preds = %cond.true.4772
  %1087 = load i64, i64* %dst_size, align 8
  %mul4784 = mul nsw i64 0, %1087
  %1088 = load i32*, i32** %buf_end, align 8
  %1089 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4785 = ptrtoint i32* %1088 to i64
  %sub.ptr.rhs.cast4786 = ptrtoint i32* %1089 to i64
  %sub.ptr.sub4787 = sub i64 %sub.ptr.lhs.cast4785, %sub.ptr.rhs.cast4786
  %sub.ptr.div4788 = sdiv exact i64 %sub.ptr.sub4787, 4
  %add4789 = add nsw i64 %mul4784, %sub.ptr.div4788
  %mul4790 = mul nsw i64 0, %add4789
  %add4791 = add nsw i64 %mul4790, 0
  %neg4792 = xor i64 %add4791, -1
  %cmp4793 = icmp eq i64 %neg4792, -1
  %conv4794 = zext i1 %cmp4793 to i32
  %sub4795 = sub nsw i32 0, %conv4794
  %conv4796 = sext i32 %sub4795 to i64
  %1090 = load i64, i64* %dst_size, align 8
  %mul4797 = mul nsw i64 0, %1090
  %1091 = load i32*, i32** %buf_end, align 8
  %1092 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4798 = ptrtoint i32* %1091 to i64
  %sub.ptr.rhs.cast4799 = ptrtoint i32* %1092 to i64
  %sub.ptr.sub4800 = sub i64 %sub.ptr.lhs.cast4798, %sub.ptr.rhs.cast4799
  %sub.ptr.div4801 = sdiv exact i64 %sub.ptr.sub4800, 4
  %add4802 = add nsw i64 %mul4797, %sub.ptr.div4801
  %mul4803 = mul nsw i64 0, %add4802
  %add4804 = add nsw i64 %mul4803, 1
  %shl4805 = shl i64 %add4804, 62
  %sub4806 = sub nsw i64 %shl4805, 1
  %mul4807 = mul nsw i64 %sub4806, 2
  %add4808 = add nsw i64 %mul4807, 1
  %sub4809 = sub nsw i64 %conv4796, %add4808
  br label %cond.end.4819

cond.false.4810:                                  ; preds = %cond.true.4772
  %1093 = load i64, i64* %dst_size, align 8
  %mul4811 = mul nsw i64 0, %1093
  %1094 = load i32*, i32** %buf_end, align 8
  %1095 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4812 = ptrtoint i32* %1094 to i64
  %sub.ptr.rhs.cast4813 = ptrtoint i32* %1095 to i64
  %sub.ptr.sub4814 = sub i64 %sub.ptr.lhs.cast4812, %sub.ptr.rhs.cast4813
  %sub.ptr.div4815 = sdiv exact i64 %sub.ptr.sub4814, 4
  %add4816 = add nsw i64 %mul4811, %sub.ptr.div4815
  %mul4817 = mul nsw i64 0, %add4816
  %add4818 = add nsw i64 %mul4817, 0
  br label %cond.end.4819

cond.end.4819:                                    ; preds = %cond.false.4810, %cond.true.4783
  %cond4820 = phi i64 [ %sub4809, %cond.true.4783 ], [ %add4818, %cond.false.4810 ]
  %cmp4821 = icmp slt i64 %cond4820, 0
  br i1 %cmp4821, label %cond.true.4823, label %cond.false.4924

cond.true.4823:                                   ; preds = %cond.end.4819
  %1096 = load i64, i64* %dst_size, align 8
  %cmp4824 = icmp slt i64 %1096, 0
  br i1 %cmp4824, label %cond.true.4826, label %cond.false.4882

cond.true.4826:                                   ; preds = %cond.true.4823
  %1097 = load i32*, i32** %buf_end, align 8
  %1098 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4827 = ptrtoint i32* %1097 to i64
  %sub.ptr.rhs.cast4828 = ptrtoint i32* %1098 to i64
  %sub.ptr.sub4829 = sub i64 %sub.ptr.lhs.cast4827, %sub.ptr.rhs.cast4828
  %sub.ptr.div4830 = sdiv exact i64 %sub.ptr.sub4829, 4
  %1099 = load i64, i64* %dst_size, align 8
  %mul4831 = mul nsw i64 0, %1099
  %1100 = load i32*, i32** %buf_end, align 8
  %1101 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4832 = ptrtoint i32* %1100 to i64
  %sub.ptr.rhs.cast4833 = ptrtoint i32* %1101 to i64
  %sub.ptr.sub4834 = sub i64 %sub.ptr.lhs.cast4832, %sub.ptr.rhs.cast4833
  %sub.ptr.div4835 = sdiv exact i64 %sub.ptr.sub4834, 4
  %add4836 = add nsw i64 %mul4831, %sub.ptr.div4835
  %mul4837 = mul nsw i64 0, %add4836
  %sub4838 = sub nsw i64 %mul4837, 1
  %cmp4839 = icmp slt i64 %sub4838, 0
  br i1 %cmp4839, label %cond.true.4841, label %cond.false.4868

cond.true.4841:                                   ; preds = %cond.true.4826
  %1102 = load i64, i64* %dst_size, align 8
  %mul4842 = mul nsw i64 0, %1102
  %1103 = load i32*, i32** %buf_end, align 8
  %1104 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4843 = ptrtoint i32* %1103 to i64
  %sub.ptr.rhs.cast4844 = ptrtoint i32* %1104 to i64
  %sub.ptr.sub4845 = sub i64 %sub.ptr.lhs.cast4843, %sub.ptr.rhs.cast4844
  %sub.ptr.div4846 = sdiv exact i64 %sub.ptr.sub4845, 4
  %add4847 = add nsw i64 %mul4842, %sub.ptr.div4846
  %mul4848 = mul nsw i64 0, %add4847
  %add4849 = add nsw i64 %mul4848, 0
  %neg4850 = xor i64 %add4849, -1
  %cmp4851 = icmp eq i64 %neg4850, -1
  %conv4852 = zext i1 %cmp4851 to i32
  %sub4853 = sub nsw i32 0, %conv4852
  %conv4854 = sext i32 %sub4853 to i64
  %1105 = load i64, i64* %dst_size, align 8
  %mul4855 = mul nsw i64 0, %1105
  %1106 = load i32*, i32** %buf_end, align 8
  %1107 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4856 = ptrtoint i32* %1106 to i64
  %sub.ptr.rhs.cast4857 = ptrtoint i32* %1107 to i64
  %sub.ptr.sub4858 = sub i64 %sub.ptr.lhs.cast4856, %sub.ptr.rhs.cast4857
  %sub.ptr.div4859 = sdiv exact i64 %sub.ptr.sub4858, 4
  %add4860 = add nsw i64 %mul4855, %sub.ptr.div4859
  %mul4861 = mul nsw i64 0, %add4860
  %add4862 = add nsw i64 %mul4861, 1
  %shl4863 = shl i64 %add4862, 62
  %sub4864 = sub nsw i64 %shl4863, 1
  %mul4865 = mul nsw i64 %sub4864, 2
  %add4866 = add nsw i64 %mul4865, 1
  %sub4867 = sub nsw i64 %conv4854, %add4866
  br label %cond.end.4877

cond.false.4868:                                  ; preds = %cond.true.4826
  %1108 = load i64, i64* %dst_size, align 8
  %mul4869 = mul nsw i64 0, %1108
  %1109 = load i32*, i32** %buf_end, align 8
  %1110 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4870 = ptrtoint i32* %1109 to i64
  %sub.ptr.rhs.cast4871 = ptrtoint i32* %1110 to i64
  %sub.ptr.sub4872 = sub i64 %sub.ptr.lhs.cast4870, %sub.ptr.rhs.cast4871
  %sub.ptr.div4873 = sdiv exact i64 %sub.ptr.sub4872, 4
  %add4874 = add nsw i64 %mul4869, %sub.ptr.div4873
  %mul4875 = mul nsw i64 0, %add4874
  %add4876 = add nsw i64 %mul4875, 0
  br label %cond.end.4877

cond.end.4877:                                    ; preds = %cond.false.4868, %cond.true.4841
  %cond4878 = phi i64 [ %sub4867, %cond.true.4841 ], [ %add4876, %cond.false.4868 ]
  %1111 = load i64, i64* %dst_size, align 8
  %sub4879 = sub nsw i64 %cond4878, %1111
  %cmp4880 = icmp slt i64 %sub.ptr.div4830, %sub4879
  br i1 %cmp4880, label %cond.true.4988, label %lor.lhs.false.4962

cond.false.4882:                                  ; preds = %cond.true.4823
  %1112 = load i64, i64* %dst_size, align 8
  %mul4883 = mul nsw i64 0, %1112
  %1113 = load i32*, i32** %buf_end, align 8
  %1114 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4884 = ptrtoint i32* %1113 to i64
  %sub.ptr.rhs.cast4885 = ptrtoint i32* %1114 to i64
  %sub.ptr.sub4886 = sub i64 %sub.ptr.lhs.cast4884, %sub.ptr.rhs.cast4885
  %sub.ptr.div4887 = sdiv exact i64 %sub.ptr.sub4886, 4
  %add4888 = add nsw i64 %mul4883, %sub.ptr.div4887
  %mul4889 = mul nsw i64 0, %add4888
  %sub4890 = sub nsw i64 %mul4889, 1
  %cmp4891 = icmp slt i64 %sub4890, 0
  br i1 %cmp4891, label %cond.true.4893, label %cond.false.4906

cond.true.4893:                                   ; preds = %cond.false.4882
  %1115 = load i64, i64* %dst_size, align 8
  %mul4894 = mul nsw i64 0, %1115
  %1116 = load i32*, i32** %buf_end, align 8
  %1117 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4895 = ptrtoint i32* %1116 to i64
  %sub.ptr.rhs.cast4896 = ptrtoint i32* %1117 to i64
  %sub.ptr.sub4897 = sub i64 %sub.ptr.lhs.cast4895, %sub.ptr.rhs.cast4896
  %sub.ptr.div4898 = sdiv exact i64 %sub.ptr.sub4897, 4
  %add4899 = add nsw i64 %mul4894, %sub.ptr.div4898
  %mul4900 = mul nsw i64 0, %add4899
  %add4901 = add nsw i64 %mul4900, 1
  %shl4902 = shl i64 %add4901, 62
  %sub4903 = sub nsw i64 %shl4902, 1
  %mul4904 = mul nsw i64 %sub4903, 2
  %add4905 = add nsw i64 %mul4904, 1
  br label %cond.end.4915

cond.false.4906:                                  ; preds = %cond.false.4882
  %1118 = load i64, i64* %dst_size, align 8
  %mul4907 = mul nsw i64 0, %1118
  %1119 = load i32*, i32** %buf_end, align 8
  %1120 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4908 = ptrtoint i32* %1119 to i64
  %sub.ptr.rhs.cast4909 = ptrtoint i32* %1120 to i64
  %sub.ptr.sub4910 = sub i64 %sub.ptr.lhs.cast4908, %sub.ptr.rhs.cast4909
  %sub.ptr.div4911 = sdiv exact i64 %sub.ptr.sub4910, 4
  %add4912 = add nsw i64 %mul4907, %sub.ptr.div4911
  %mul4913 = mul nsw i64 0, %add4912
  %sub4914 = sub nsw i64 %mul4913, 1
  br label %cond.end.4915

cond.end.4915:                                    ; preds = %cond.false.4906, %cond.true.4893
  %cond4916 = phi i64 [ %add4905, %cond.true.4893 ], [ %sub4914, %cond.false.4906 ]
  %1121 = load i64, i64* %dst_size, align 8
  %sub4917 = sub nsw i64 %cond4916, %1121
  %1122 = load i32*, i32** %buf_end, align 8
  %1123 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4918 = ptrtoint i32* %1122 to i64
  %sub.ptr.rhs.cast4919 = ptrtoint i32* %1123 to i64
  %sub.ptr.sub4920 = sub i64 %sub.ptr.lhs.cast4918, %sub.ptr.rhs.cast4919
  %sub.ptr.div4921 = sdiv exact i64 %sub.ptr.sub4920, 4
  %cmp4922 = icmp slt i64 %sub4917, %sub.ptr.div4921
  br i1 %cmp4922, label %cond.true.4988, label %lor.lhs.false.4962

cond.false.4924:                                  ; preds = %cond.end.4819
  %1124 = load i32*, i32** %buf_end, align 8
  %1125 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4925 = ptrtoint i32* %1124 to i64
  %sub.ptr.rhs.cast4926 = ptrtoint i32* %1125 to i64
  %sub.ptr.sub4927 = sub i64 %sub.ptr.lhs.cast4925, %sub.ptr.rhs.cast4926
  %sub.ptr.div4928 = sdiv exact i64 %sub.ptr.sub4927, 4
  %cmp4929 = icmp slt i64 %sub.ptr.div4928, 0
  br i1 %cmp4929, label %cond.true.4931, label %cond.false.4939

cond.true.4931:                                   ; preds = %cond.false.4924
  %1126 = load i64, i64* %dst_size, align 8
  %1127 = load i32*, i32** %buf_end, align 8
  %1128 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4932 = ptrtoint i32* %1127 to i64
  %sub.ptr.rhs.cast4933 = ptrtoint i32* %1128 to i64
  %sub.ptr.sub4934 = sub i64 %sub.ptr.lhs.cast4932, %sub.ptr.rhs.cast4933
  %sub.ptr.div4935 = sdiv exact i64 %sub.ptr.sub4934, 4
  %1129 = load i64, i64* %dst_size, align 8
  %add4936 = add nsw i64 %sub.ptr.div4935, %1129
  %cmp4937 = icmp sle i64 %1126, %add4936
  br i1 %cmp4937, label %cond.true.4988, label %lor.lhs.false.4962

cond.false.4939:                                  ; preds = %cond.false.4924
  %1130 = load i64, i64* %dst_size, align 8
  %cmp4940 = icmp slt i64 %1130, 0
  br i1 %cmp4940, label %cond.true.4942, label %cond.false.4954

cond.true.4942:                                   ; preds = %cond.false.4939
  %1131 = load i32*, i32** %buf_end, align 8
  %1132 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4943 = ptrtoint i32* %1131 to i64
  %sub.ptr.rhs.cast4944 = ptrtoint i32* %1132 to i64
  %sub.ptr.sub4945 = sub i64 %sub.ptr.lhs.cast4943, %sub.ptr.rhs.cast4944
  %sub.ptr.div4946 = sdiv exact i64 %sub.ptr.sub4945, 4
  %1133 = load i32*, i32** %buf_end, align 8
  %1134 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4947 = ptrtoint i32* %1133 to i64
  %sub.ptr.rhs.cast4948 = ptrtoint i32* %1134 to i64
  %sub.ptr.sub4949 = sub i64 %sub.ptr.lhs.cast4947, %sub.ptr.rhs.cast4948
  %sub.ptr.div4950 = sdiv exact i64 %sub.ptr.sub4949, 4
  %1135 = load i64, i64* %dst_size, align 8
  %add4951 = add nsw i64 %sub.ptr.div4950, %1135
  %cmp4952 = icmp sle i64 %sub.ptr.div4946, %add4951
  br i1 %cmp4952, label %cond.true.4988, label %lor.lhs.false.4962

cond.false.4954:                                  ; preds = %cond.false.4939
  %1136 = load i32*, i32** %buf_end, align 8
  %1137 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4955 = ptrtoint i32* %1136 to i64
  %sub.ptr.rhs.cast4956 = ptrtoint i32* %1137 to i64
  %sub.ptr.sub4957 = sub i64 %sub.ptr.lhs.cast4955, %sub.ptr.rhs.cast4956
  %sub.ptr.div4958 = sdiv exact i64 %sub.ptr.sub4957, 4
  %1138 = load i64, i64* %dst_size, align 8
  %add4959 = add nsw i64 %sub.ptr.div4958, %1138
  %1139 = load i64, i64* %dst_size, align 8
  %cmp4960 = icmp slt i64 %add4959, %1139
  br i1 %cmp4960, label %cond.true.4988, label %lor.lhs.false.4962

lor.lhs.false.4962:                               ; preds = %cond.false.4954, %cond.true.4942, %cond.true.4931, %cond.end.4915, %cond.end.4877
  %1140 = load i32*, i32** %buf_end, align 8
  %1141 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4963 = ptrtoint i32* %1140 to i64
  %sub.ptr.rhs.cast4964 = ptrtoint i32* %1141 to i64
  %sub.ptr.sub4965 = sub i64 %sub.ptr.lhs.cast4963, %sub.ptr.rhs.cast4964
  %sub.ptr.div4966 = sdiv exact i64 %sub.ptr.sub4965, 4
  %1142 = load i64, i64* %dst_size, align 8
  %add4967 = add nsw i64 %sub.ptr.div4966, %1142
  %mul4968 = mul nsw i64 0, %add4967
  %sub4969 = sub nsw i64 %mul4968, 1
  %cmp4970 = icmp slt i64 %sub4969, 0
  br i1 %cmp4970, label %land.lhs.true.4972, label %lor.lhs.false.4980

land.lhs.true.4972:                               ; preds = %lor.lhs.false.4962
  %1143 = load i32*, i32** %buf_end, align 8
  %1144 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4973 = ptrtoint i32* %1143 to i64
  %sub.ptr.rhs.cast4974 = ptrtoint i32* %1144 to i64
  %sub.ptr.sub4975 = sub i64 %sub.ptr.lhs.cast4973, %sub.ptr.rhs.cast4974
  %sub.ptr.div4976 = sdiv exact i64 %sub.ptr.sub4975, 4
  %1145 = load i64, i64* %dst_size, align 8
  %add4977 = add nsw i64 %sub.ptr.div4976, %1145
  %cmp4978 = icmp slt i64 %add4977, -9223372036854775808
  br i1 %cmp4978, label %cond.true.4988, label %lor.lhs.false.4980

lor.lhs.false.4980:                               ; preds = %land.lhs.true.4972, %lor.lhs.false.4962
  %1146 = load i32*, i32** %buf_end, align 8
  %1147 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4981 = ptrtoint i32* %1146 to i64
  %sub.ptr.rhs.cast4982 = ptrtoint i32* %1147 to i64
  %sub.ptr.sub4983 = sub i64 %sub.ptr.lhs.cast4981, %sub.ptr.rhs.cast4982
  %sub.ptr.div4984 = sdiv exact i64 %sub.ptr.sub4983, 4
  %1148 = load i64, i64* %dst_size, align 8
  %add4985 = add nsw i64 %sub.ptr.div4984, %1148
  %cmp4986 = icmp slt i64 9223372036854775807, %add4985
  br i1 %cmp4986, label %cond.true.4988, label %cond.false.5012

cond.true.4988:                                   ; preds = %lor.lhs.false.4980, %land.lhs.true.4972, %cond.false.4954, %cond.true.4942, %cond.true.4931, %cond.end.4915, %cond.end.4877
  %1149 = load i32*, i32** %buf_end, align 8
  %1150 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4989 = ptrtoint i32* %1149 to i64
  %sub.ptr.rhs.cast4990 = ptrtoint i32* %1150 to i64
  %sub.ptr.sub4991 = sub i64 %sub.ptr.lhs.cast4989, %sub.ptr.rhs.cast4990
  %sub.ptr.div4992 = sdiv exact i64 %sub.ptr.sub4991, 4
  %1151 = load i64, i64* %dst_size, align 8
  %add4993 = add i64 %sub.ptr.div4992, %1151
  %cmp4994 = icmp ule i64 %add4993, 9223372036854775807
  br i1 %cmp4994, label %cond.true.4996, label %cond.false.5002

cond.true.4996:                                   ; preds = %cond.true.4988
  %1152 = load i32*, i32** %buf_end, align 8
  %1153 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast4997 = ptrtoint i32* %1152 to i64
  %sub.ptr.rhs.cast4998 = ptrtoint i32* %1153 to i64
  %sub.ptr.sub4999 = sub i64 %sub.ptr.lhs.cast4997, %sub.ptr.rhs.cast4998
  %sub.ptr.div5000 = sdiv exact i64 %sub.ptr.sub4999, 4
  %1154 = load i64, i64* %dst_size, align 8
  %add5001 = add i64 %sub.ptr.div5000, %1154
  br label %cond.end.5010

cond.false.5002:                                  ; preds = %cond.true.4988
  %1155 = load i32*, i32** %buf_end, align 8
  %1156 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5003 = ptrtoint i32* %1155 to i64
  %sub.ptr.rhs.cast5004 = ptrtoint i32* %1156 to i64
  %sub.ptr.sub5005 = sub i64 %sub.ptr.lhs.cast5003, %sub.ptr.rhs.cast5004
  %sub.ptr.div5006 = sdiv exact i64 %sub.ptr.sub5005, 4
  %1157 = load i64, i64* %dst_size, align 8
  %add5007 = add i64 %sub.ptr.div5006, %1157
  %sub5008 = sub i64 %add5007, -9223372036854775808
  %add5009 = add nsw i64 %sub5008, -9223372036854775808
  br label %cond.end.5010

cond.end.5010:                                    ; preds = %cond.false.5002, %cond.true.4996
  %cond5011 = phi i64 [ %add5001, %cond.true.4996 ], [ %add5009, %cond.false.5002 ]
  store i64 %cond5011, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.5012:                                  ; preds = %lor.lhs.false.4980
  %1158 = load i32*, i32** %buf_end, align 8
  %1159 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5013 = ptrtoint i32* %1158 to i64
  %sub.ptr.rhs.cast5014 = ptrtoint i32* %1159 to i64
  %sub.ptr.sub5015 = sub i64 %sub.ptr.lhs.cast5013, %sub.ptr.rhs.cast5014
  %sub.ptr.div5016 = sdiv exact i64 %sub.ptr.sub5015, 4
  %1160 = load i64, i64* %dst_size, align 8
  %add5017 = add i64 %sub.ptr.div5016, %1160
  %cmp5018 = icmp ule i64 %add5017, 9223372036854775807
  br i1 %cmp5018, label %cond.true.5020, label %cond.false.5026

cond.true.5020:                                   ; preds = %cond.false.5012
  %1161 = load i32*, i32** %buf_end, align 8
  %1162 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5021 = ptrtoint i32* %1161 to i64
  %sub.ptr.rhs.cast5022 = ptrtoint i32* %1162 to i64
  %sub.ptr.sub5023 = sub i64 %sub.ptr.lhs.cast5021, %sub.ptr.rhs.cast5022
  %sub.ptr.div5024 = sdiv exact i64 %sub.ptr.sub5023, 4
  %1163 = load i64, i64* %dst_size, align 8
  %add5025 = add i64 %sub.ptr.div5024, %1163
  br label %cond.end.5034

cond.false.5026:                                  ; preds = %cond.false.5012
  %1164 = load i32*, i32** %buf_end, align 8
  %1165 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5027 = ptrtoint i32* %1164 to i64
  %sub.ptr.rhs.cast5028 = ptrtoint i32* %1165 to i64
  %sub.ptr.sub5029 = sub i64 %sub.ptr.lhs.cast5027, %sub.ptr.rhs.cast5028
  %sub.ptr.div5030 = sdiv exact i64 %sub.ptr.sub5029, 4
  %1166 = load i64, i64* %dst_size, align 8
  %add5031 = add i64 %sub.ptr.div5030, %1166
  %sub5032 = sub i64 %add5031, -9223372036854775808
  %add5033 = add nsw i64 %sub5032, -9223372036854775808
  br label %cond.end.5034

cond.end.5034:                                    ; preds = %cond.false.5026, %cond.true.5020
  %cond5035 = phi i64 [ %add5025, %cond.true.5020 ], [ %add5033, %cond.false.5026 ]
  store i64 %cond5035, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

cond.false.5036:                                  ; preds = %cond.false.4771
  %1167 = load i64, i64* %dst_size, align 8
  %mul5037 = mul nsw i64 0, %1167
  %1168 = load i32*, i32** %buf_end, align 8
  %1169 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5038 = ptrtoint i32* %1168 to i64
  %sub.ptr.rhs.cast5039 = ptrtoint i32* %1169 to i64
  %sub.ptr.sub5040 = sub i64 %sub.ptr.lhs.cast5038, %sub.ptr.rhs.cast5039
  %sub.ptr.div5041 = sdiv exact i64 %sub.ptr.sub5040, 4
  %add5042 = add nsw i64 %mul5037, %sub.ptr.div5041
  %mul5043 = mul nsw i64 0, %add5042
  %sub5044 = sub nsw i64 %mul5043, 1
  %cmp5045 = icmp slt i64 %sub5044, 0
  br i1 %cmp5045, label %cond.true.5047, label %cond.false.5074

cond.true.5047:                                   ; preds = %cond.false.5036
  %1170 = load i64, i64* %dst_size, align 8
  %mul5048 = mul nsw i64 0, %1170
  %1171 = load i32*, i32** %buf_end, align 8
  %1172 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5049 = ptrtoint i32* %1171 to i64
  %sub.ptr.rhs.cast5050 = ptrtoint i32* %1172 to i64
  %sub.ptr.sub5051 = sub i64 %sub.ptr.lhs.cast5049, %sub.ptr.rhs.cast5050
  %sub.ptr.div5052 = sdiv exact i64 %sub.ptr.sub5051, 4
  %add5053 = add nsw i64 %mul5048, %sub.ptr.div5052
  %mul5054 = mul nsw i64 0, %add5053
  %add5055 = add nsw i64 %mul5054, 0
  %neg5056 = xor i64 %add5055, -1
  %cmp5057 = icmp eq i64 %neg5056, -1
  %conv5058 = zext i1 %cmp5057 to i32
  %sub5059 = sub nsw i32 0, %conv5058
  %conv5060 = sext i32 %sub5059 to i64
  %1173 = load i64, i64* %dst_size, align 8
  %mul5061 = mul nsw i64 0, %1173
  %1174 = load i32*, i32** %buf_end, align 8
  %1175 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5062 = ptrtoint i32* %1174 to i64
  %sub.ptr.rhs.cast5063 = ptrtoint i32* %1175 to i64
  %sub.ptr.sub5064 = sub i64 %sub.ptr.lhs.cast5062, %sub.ptr.rhs.cast5063
  %sub.ptr.div5065 = sdiv exact i64 %sub.ptr.sub5064, 4
  %add5066 = add nsw i64 %mul5061, %sub.ptr.div5065
  %mul5067 = mul nsw i64 0, %add5066
  %add5068 = add nsw i64 %mul5067, 1
  %shl5069 = shl i64 %add5068, 62
  %sub5070 = sub nsw i64 %shl5069, 1
  %mul5071 = mul nsw i64 %sub5070, 2
  %add5072 = add nsw i64 %mul5071, 1
  %sub5073 = sub nsw i64 %conv5060, %add5072
  br label %cond.end.5083

cond.false.5074:                                  ; preds = %cond.false.5036
  %1176 = load i64, i64* %dst_size, align 8
  %mul5075 = mul nsw i64 0, %1176
  %1177 = load i32*, i32** %buf_end, align 8
  %1178 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5076 = ptrtoint i32* %1177 to i64
  %sub.ptr.rhs.cast5077 = ptrtoint i32* %1178 to i64
  %sub.ptr.sub5078 = sub i64 %sub.ptr.lhs.cast5076, %sub.ptr.rhs.cast5077
  %sub.ptr.div5079 = sdiv exact i64 %sub.ptr.sub5078, 4
  %add5080 = add nsw i64 %mul5075, %sub.ptr.div5079
  %mul5081 = mul nsw i64 0, %add5080
  %add5082 = add nsw i64 %mul5081, 0
  br label %cond.end.5083

cond.end.5083:                                    ; preds = %cond.false.5074, %cond.true.5047
  %cond5084 = phi i64 [ %sub5073, %cond.true.5047 ], [ %add5082, %cond.false.5074 ]
  %cmp5085 = icmp slt i64 %cond5084, 0
  br i1 %cmp5085, label %cond.true.5087, label %cond.false.5188

cond.true.5087:                                   ; preds = %cond.end.5083
  %1179 = load i64, i64* %dst_size, align 8
  %cmp5088 = icmp slt i64 %1179, 0
  br i1 %cmp5088, label %cond.true.5090, label %cond.false.5146

cond.true.5090:                                   ; preds = %cond.true.5087
  %1180 = load i32*, i32** %buf_end, align 8
  %1181 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5091 = ptrtoint i32* %1180 to i64
  %sub.ptr.rhs.cast5092 = ptrtoint i32* %1181 to i64
  %sub.ptr.sub5093 = sub i64 %sub.ptr.lhs.cast5091, %sub.ptr.rhs.cast5092
  %sub.ptr.div5094 = sdiv exact i64 %sub.ptr.sub5093, 4
  %1182 = load i64, i64* %dst_size, align 8
  %mul5095 = mul nsw i64 0, %1182
  %1183 = load i32*, i32** %buf_end, align 8
  %1184 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5096 = ptrtoint i32* %1183 to i64
  %sub.ptr.rhs.cast5097 = ptrtoint i32* %1184 to i64
  %sub.ptr.sub5098 = sub i64 %sub.ptr.lhs.cast5096, %sub.ptr.rhs.cast5097
  %sub.ptr.div5099 = sdiv exact i64 %sub.ptr.sub5098, 4
  %add5100 = add nsw i64 %mul5095, %sub.ptr.div5099
  %mul5101 = mul nsw i64 0, %add5100
  %sub5102 = sub nsw i64 %mul5101, 1
  %cmp5103 = icmp slt i64 %sub5102, 0
  br i1 %cmp5103, label %cond.true.5105, label %cond.false.5132

cond.true.5105:                                   ; preds = %cond.true.5090
  %1185 = load i64, i64* %dst_size, align 8
  %mul5106 = mul nsw i64 0, %1185
  %1186 = load i32*, i32** %buf_end, align 8
  %1187 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5107 = ptrtoint i32* %1186 to i64
  %sub.ptr.rhs.cast5108 = ptrtoint i32* %1187 to i64
  %sub.ptr.sub5109 = sub i64 %sub.ptr.lhs.cast5107, %sub.ptr.rhs.cast5108
  %sub.ptr.div5110 = sdiv exact i64 %sub.ptr.sub5109, 4
  %add5111 = add nsw i64 %mul5106, %sub.ptr.div5110
  %mul5112 = mul nsw i64 0, %add5111
  %add5113 = add nsw i64 %mul5112, 0
  %neg5114 = xor i64 %add5113, -1
  %cmp5115 = icmp eq i64 %neg5114, -1
  %conv5116 = zext i1 %cmp5115 to i32
  %sub5117 = sub nsw i32 0, %conv5116
  %conv5118 = sext i32 %sub5117 to i64
  %1188 = load i64, i64* %dst_size, align 8
  %mul5119 = mul nsw i64 0, %1188
  %1189 = load i32*, i32** %buf_end, align 8
  %1190 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5120 = ptrtoint i32* %1189 to i64
  %sub.ptr.rhs.cast5121 = ptrtoint i32* %1190 to i64
  %sub.ptr.sub5122 = sub i64 %sub.ptr.lhs.cast5120, %sub.ptr.rhs.cast5121
  %sub.ptr.div5123 = sdiv exact i64 %sub.ptr.sub5122, 4
  %add5124 = add nsw i64 %mul5119, %sub.ptr.div5123
  %mul5125 = mul nsw i64 0, %add5124
  %add5126 = add nsw i64 %mul5125, 1
  %shl5127 = shl i64 %add5126, 62
  %sub5128 = sub nsw i64 %shl5127, 1
  %mul5129 = mul nsw i64 %sub5128, 2
  %add5130 = add nsw i64 %mul5129, 1
  %sub5131 = sub nsw i64 %conv5118, %add5130
  br label %cond.end.5141

cond.false.5132:                                  ; preds = %cond.true.5090
  %1191 = load i64, i64* %dst_size, align 8
  %mul5133 = mul nsw i64 0, %1191
  %1192 = load i32*, i32** %buf_end, align 8
  %1193 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5134 = ptrtoint i32* %1192 to i64
  %sub.ptr.rhs.cast5135 = ptrtoint i32* %1193 to i64
  %sub.ptr.sub5136 = sub i64 %sub.ptr.lhs.cast5134, %sub.ptr.rhs.cast5135
  %sub.ptr.div5137 = sdiv exact i64 %sub.ptr.sub5136, 4
  %add5138 = add nsw i64 %mul5133, %sub.ptr.div5137
  %mul5139 = mul nsw i64 0, %add5138
  %add5140 = add nsw i64 %mul5139, 0
  br label %cond.end.5141

cond.end.5141:                                    ; preds = %cond.false.5132, %cond.true.5105
  %cond5142 = phi i64 [ %sub5131, %cond.true.5105 ], [ %add5140, %cond.false.5132 ]
  %1194 = load i64, i64* %dst_size, align 8
  %sub5143 = sub nsw i64 %cond5142, %1194
  %cmp5144 = icmp slt i64 %sub.ptr.div5094, %sub5143
  br i1 %cmp5144, label %cond.true.5252, label %lor.lhs.false.5226

cond.false.5146:                                  ; preds = %cond.true.5087
  %1195 = load i64, i64* %dst_size, align 8
  %mul5147 = mul nsw i64 0, %1195
  %1196 = load i32*, i32** %buf_end, align 8
  %1197 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5148 = ptrtoint i32* %1196 to i64
  %sub.ptr.rhs.cast5149 = ptrtoint i32* %1197 to i64
  %sub.ptr.sub5150 = sub i64 %sub.ptr.lhs.cast5148, %sub.ptr.rhs.cast5149
  %sub.ptr.div5151 = sdiv exact i64 %sub.ptr.sub5150, 4
  %add5152 = add nsw i64 %mul5147, %sub.ptr.div5151
  %mul5153 = mul nsw i64 0, %add5152
  %sub5154 = sub nsw i64 %mul5153, 1
  %cmp5155 = icmp slt i64 %sub5154, 0
  br i1 %cmp5155, label %cond.true.5157, label %cond.false.5170

cond.true.5157:                                   ; preds = %cond.false.5146
  %1198 = load i64, i64* %dst_size, align 8
  %mul5158 = mul nsw i64 0, %1198
  %1199 = load i32*, i32** %buf_end, align 8
  %1200 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5159 = ptrtoint i32* %1199 to i64
  %sub.ptr.rhs.cast5160 = ptrtoint i32* %1200 to i64
  %sub.ptr.sub5161 = sub i64 %sub.ptr.lhs.cast5159, %sub.ptr.rhs.cast5160
  %sub.ptr.div5162 = sdiv exact i64 %sub.ptr.sub5161, 4
  %add5163 = add nsw i64 %mul5158, %sub.ptr.div5162
  %mul5164 = mul nsw i64 0, %add5163
  %add5165 = add nsw i64 %mul5164, 1
  %shl5166 = shl i64 %add5165, 62
  %sub5167 = sub nsw i64 %shl5166, 1
  %mul5168 = mul nsw i64 %sub5167, 2
  %add5169 = add nsw i64 %mul5168, 1
  br label %cond.end.5179

cond.false.5170:                                  ; preds = %cond.false.5146
  %1201 = load i64, i64* %dst_size, align 8
  %mul5171 = mul nsw i64 0, %1201
  %1202 = load i32*, i32** %buf_end, align 8
  %1203 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5172 = ptrtoint i32* %1202 to i64
  %sub.ptr.rhs.cast5173 = ptrtoint i32* %1203 to i64
  %sub.ptr.sub5174 = sub i64 %sub.ptr.lhs.cast5172, %sub.ptr.rhs.cast5173
  %sub.ptr.div5175 = sdiv exact i64 %sub.ptr.sub5174, 4
  %add5176 = add nsw i64 %mul5171, %sub.ptr.div5175
  %mul5177 = mul nsw i64 0, %add5176
  %sub5178 = sub nsw i64 %mul5177, 1
  br label %cond.end.5179

cond.end.5179:                                    ; preds = %cond.false.5170, %cond.true.5157
  %cond5180 = phi i64 [ %add5169, %cond.true.5157 ], [ %sub5178, %cond.false.5170 ]
  %1204 = load i64, i64* %dst_size, align 8
  %sub5181 = sub nsw i64 %cond5180, %1204
  %1205 = load i32*, i32** %buf_end, align 8
  %1206 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5182 = ptrtoint i32* %1205 to i64
  %sub.ptr.rhs.cast5183 = ptrtoint i32* %1206 to i64
  %sub.ptr.sub5184 = sub i64 %sub.ptr.lhs.cast5182, %sub.ptr.rhs.cast5183
  %sub.ptr.div5185 = sdiv exact i64 %sub.ptr.sub5184, 4
  %cmp5186 = icmp slt i64 %sub5181, %sub.ptr.div5185
  br i1 %cmp5186, label %cond.true.5252, label %lor.lhs.false.5226

cond.false.5188:                                  ; preds = %cond.end.5083
  %1207 = load i32*, i32** %buf_end, align 8
  %1208 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5189 = ptrtoint i32* %1207 to i64
  %sub.ptr.rhs.cast5190 = ptrtoint i32* %1208 to i64
  %sub.ptr.sub5191 = sub i64 %sub.ptr.lhs.cast5189, %sub.ptr.rhs.cast5190
  %sub.ptr.div5192 = sdiv exact i64 %sub.ptr.sub5191, 4
  %cmp5193 = icmp slt i64 %sub.ptr.div5192, 0
  br i1 %cmp5193, label %cond.true.5195, label %cond.false.5203

cond.true.5195:                                   ; preds = %cond.false.5188
  %1209 = load i64, i64* %dst_size, align 8
  %1210 = load i32*, i32** %buf_end, align 8
  %1211 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5196 = ptrtoint i32* %1210 to i64
  %sub.ptr.rhs.cast5197 = ptrtoint i32* %1211 to i64
  %sub.ptr.sub5198 = sub i64 %sub.ptr.lhs.cast5196, %sub.ptr.rhs.cast5197
  %sub.ptr.div5199 = sdiv exact i64 %sub.ptr.sub5198, 4
  %1212 = load i64, i64* %dst_size, align 8
  %add5200 = add nsw i64 %sub.ptr.div5199, %1212
  %cmp5201 = icmp sle i64 %1209, %add5200
  br i1 %cmp5201, label %cond.true.5252, label %lor.lhs.false.5226

cond.false.5203:                                  ; preds = %cond.false.5188
  %1213 = load i64, i64* %dst_size, align 8
  %cmp5204 = icmp slt i64 %1213, 0
  br i1 %cmp5204, label %cond.true.5206, label %cond.false.5218

cond.true.5206:                                   ; preds = %cond.false.5203
  %1214 = load i32*, i32** %buf_end, align 8
  %1215 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5207 = ptrtoint i32* %1214 to i64
  %sub.ptr.rhs.cast5208 = ptrtoint i32* %1215 to i64
  %sub.ptr.sub5209 = sub i64 %sub.ptr.lhs.cast5207, %sub.ptr.rhs.cast5208
  %sub.ptr.div5210 = sdiv exact i64 %sub.ptr.sub5209, 4
  %1216 = load i32*, i32** %buf_end, align 8
  %1217 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5211 = ptrtoint i32* %1216 to i64
  %sub.ptr.rhs.cast5212 = ptrtoint i32* %1217 to i64
  %sub.ptr.sub5213 = sub i64 %sub.ptr.lhs.cast5211, %sub.ptr.rhs.cast5212
  %sub.ptr.div5214 = sdiv exact i64 %sub.ptr.sub5213, 4
  %1218 = load i64, i64* %dst_size, align 8
  %add5215 = add nsw i64 %sub.ptr.div5214, %1218
  %cmp5216 = icmp sle i64 %sub.ptr.div5210, %add5215
  br i1 %cmp5216, label %cond.true.5252, label %lor.lhs.false.5226

cond.false.5218:                                  ; preds = %cond.false.5203
  %1219 = load i32*, i32** %buf_end, align 8
  %1220 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5219 = ptrtoint i32* %1219 to i64
  %sub.ptr.rhs.cast5220 = ptrtoint i32* %1220 to i64
  %sub.ptr.sub5221 = sub i64 %sub.ptr.lhs.cast5219, %sub.ptr.rhs.cast5220
  %sub.ptr.div5222 = sdiv exact i64 %sub.ptr.sub5221, 4
  %1221 = load i64, i64* %dst_size, align 8
  %add5223 = add nsw i64 %sub.ptr.div5222, %1221
  %1222 = load i64, i64* %dst_size, align 8
  %cmp5224 = icmp slt i64 %add5223, %1222
  br i1 %cmp5224, label %cond.true.5252, label %lor.lhs.false.5226

lor.lhs.false.5226:                               ; preds = %cond.false.5218, %cond.true.5206, %cond.true.5195, %cond.end.5179, %cond.end.5141
  %1223 = load i32*, i32** %buf_end, align 8
  %1224 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5227 = ptrtoint i32* %1223 to i64
  %sub.ptr.rhs.cast5228 = ptrtoint i32* %1224 to i64
  %sub.ptr.sub5229 = sub i64 %sub.ptr.lhs.cast5227, %sub.ptr.rhs.cast5228
  %sub.ptr.div5230 = sdiv exact i64 %sub.ptr.sub5229, 4
  %1225 = load i64, i64* %dst_size, align 8
  %add5231 = add nsw i64 %sub.ptr.div5230, %1225
  %mul5232 = mul nsw i64 0, %add5231
  %sub5233 = sub nsw i64 %mul5232, 1
  %cmp5234 = icmp slt i64 %sub5233, 0
  br i1 %cmp5234, label %land.lhs.true.5236, label %lor.lhs.false.5244

land.lhs.true.5236:                               ; preds = %lor.lhs.false.5226
  %1226 = load i32*, i32** %buf_end, align 8
  %1227 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5237 = ptrtoint i32* %1226 to i64
  %sub.ptr.rhs.cast5238 = ptrtoint i32* %1227 to i64
  %sub.ptr.sub5239 = sub i64 %sub.ptr.lhs.cast5237, %sub.ptr.rhs.cast5238
  %sub.ptr.div5240 = sdiv exact i64 %sub.ptr.sub5239, 4
  %1228 = load i64, i64* %dst_size, align 8
  %add5241 = add nsw i64 %sub.ptr.div5240, %1228
  %cmp5242 = icmp slt i64 %add5241, -9223372036854775808
  br i1 %cmp5242, label %cond.true.5252, label %lor.lhs.false.5244

lor.lhs.false.5244:                               ; preds = %land.lhs.true.5236, %lor.lhs.false.5226
  %1229 = load i32*, i32** %buf_end, align 8
  %1230 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5245 = ptrtoint i32* %1229 to i64
  %sub.ptr.rhs.cast5246 = ptrtoint i32* %1230 to i64
  %sub.ptr.sub5247 = sub i64 %sub.ptr.lhs.cast5245, %sub.ptr.rhs.cast5246
  %sub.ptr.div5248 = sdiv exact i64 %sub.ptr.sub5247, 4
  %1231 = load i64, i64* %dst_size, align 8
  %add5249 = add nsw i64 %sub.ptr.div5248, %1231
  %cmp5250 = icmp slt i64 9223372036854775807, %add5249
  br i1 %cmp5250, label %cond.true.5252, label %cond.false.5276

cond.true.5252:                                   ; preds = %lor.lhs.false.5244, %land.lhs.true.5236, %cond.false.5218, %cond.true.5206, %cond.true.5195, %cond.end.5179, %cond.end.5141
  %1232 = load i32*, i32** %buf_end, align 8
  %1233 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5253 = ptrtoint i32* %1232 to i64
  %sub.ptr.rhs.cast5254 = ptrtoint i32* %1233 to i64
  %sub.ptr.sub5255 = sub i64 %sub.ptr.lhs.cast5253, %sub.ptr.rhs.cast5254
  %sub.ptr.div5256 = sdiv exact i64 %sub.ptr.sub5255, 4
  %1234 = load i64, i64* %dst_size, align 8
  %add5257 = add i64 %sub.ptr.div5256, %1234
  %cmp5258 = icmp ule i64 %add5257, 9223372036854775807
  br i1 %cmp5258, label %cond.true.5260, label %cond.false.5266

cond.true.5260:                                   ; preds = %cond.true.5252
  %1235 = load i32*, i32** %buf_end, align 8
  %1236 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5261 = ptrtoint i32* %1235 to i64
  %sub.ptr.rhs.cast5262 = ptrtoint i32* %1236 to i64
  %sub.ptr.sub5263 = sub i64 %sub.ptr.lhs.cast5261, %sub.ptr.rhs.cast5262
  %sub.ptr.div5264 = sdiv exact i64 %sub.ptr.sub5263, 4
  %1237 = load i64, i64* %dst_size, align 8
  %add5265 = add i64 %sub.ptr.div5264, %1237
  br label %cond.end.5274

cond.false.5266:                                  ; preds = %cond.true.5252
  %1238 = load i32*, i32** %buf_end, align 8
  %1239 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5267 = ptrtoint i32* %1238 to i64
  %sub.ptr.rhs.cast5268 = ptrtoint i32* %1239 to i64
  %sub.ptr.sub5269 = sub i64 %sub.ptr.lhs.cast5267, %sub.ptr.rhs.cast5268
  %sub.ptr.div5270 = sdiv exact i64 %sub.ptr.sub5269, 4
  %1240 = load i64, i64* %dst_size, align 8
  %add5271 = add i64 %sub.ptr.div5270, %1240
  %sub5272 = sub i64 %add5271, -9223372036854775808
  %add5273 = add nsw i64 %sub5272, -9223372036854775808
  br label %cond.end.5274

cond.end.5274:                                    ; preds = %cond.false.5266, %cond.true.5260
  %cond5275 = phi i64 [ %add5265, %cond.true.5260 ], [ %add5273, %cond.false.5266 ]
  store i64 %cond5275, i64* %dst_size, align 8
  br i1 true, label %if.then.5300, label %if.end.5301

cond.false.5276:                                  ; preds = %lor.lhs.false.5244
  %1241 = load i32*, i32** %buf_end, align 8
  %1242 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5277 = ptrtoint i32* %1241 to i64
  %sub.ptr.rhs.cast5278 = ptrtoint i32* %1242 to i64
  %sub.ptr.sub5279 = sub i64 %sub.ptr.lhs.cast5277, %sub.ptr.rhs.cast5278
  %sub.ptr.div5280 = sdiv exact i64 %sub.ptr.sub5279, 4
  %1243 = load i64, i64* %dst_size, align 8
  %add5281 = add i64 %sub.ptr.div5280, %1243
  %cmp5282 = icmp ule i64 %add5281, 9223372036854775807
  br i1 %cmp5282, label %cond.true.5284, label %cond.false.5290

cond.true.5284:                                   ; preds = %cond.false.5276
  %1244 = load i32*, i32** %buf_end, align 8
  %1245 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5285 = ptrtoint i32* %1244 to i64
  %sub.ptr.rhs.cast5286 = ptrtoint i32* %1245 to i64
  %sub.ptr.sub5287 = sub i64 %sub.ptr.lhs.cast5285, %sub.ptr.rhs.cast5286
  %sub.ptr.div5288 = sdiv exact i64 %sub.ptr.sub5287, 4
  %1246 = load i64, i64* %dst_size, align 8
  %add5289 = add i64 %sub.ptr.div5288, %1246
  br label %cond.end.5298

cond.false.5290:                                  ; preds = %cond.false.5276
  %1247 = load i32*, i32** %buf_end, align 8
  %1248 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5291 = ptrtoint i32* %1247 to i64
  %sub.ptr.rhs.cast5292 = ptrtoint i32* %1248 to i64
  %sub.ptr.sub5293 = sub i64 %sub.ptr.lhs.cast5291, %sub.ptr.rhs.cast5292
  %sub.ptr.div5294 = sdiv exact i64 %sub.ptr.sub5293, 4
  %1249 = load i64, i64* %dst_size, align 8
  %add5295 = add i64 %sub.ptr.div5294, %1249
  %sub5296 = sub i64 %add5295, -9223372036854775808
  %add5297 = add nsw i64 %sub5296, -9223372036854775808
  br label %cond.end.5298

cond.end.5298:                                    ; preds = %cond.false.5290, %cond.true.5284
  %cond5299 = phi i64 [ %add5289, %cond.true.5284 ], [ %add5297, %cond.false.5290 ]
  store i64 %cond5299, i64* %dst_size, align 8
  br i1 false, label %if.then.5300, label %if.end.5301

if.then.5300:                                     ; preds = %cond.end.5298, %cond.end.5274, %cond.end.5034, %cond.end.5010, %cond.end.4769, %cond.end.4745, %cond.end.4505, %cond.end.4481, %cond.end.4238, %cond.end.4207, %cond.end.3960, %cond.end.3929, %cond.end.3638, %cond.end.3597, %cond.end.3340, %cond.end.3299, %cond.end.2954, %cond.end.2913, %cond.end.2656, %cond.end.2615, %cond.end.2272, %cond.end.2260, %cond.end.2079, %cond.end.2067, %cond.end.1885, %cond.end.1873, %cond.end.1692, %cond.end.1680, %cond.end.1496, %cond.end.1480, %cond.end.1295, %cond.end.1279, %cond.end.1067, %cond.end.1044, %cond.end.852, %cond.end.829, %cond.end.582, %cond.end.559, %cond.end.367, %cond.end.344
  call void @memory_full(i64 -1) #6
  unreachable

if.end.5301:                                      ; preds = %cond.end.5298, %cond.end.5274, %cond.end.5034, %cond.end.5010, %cond.end.4769, %cond.end.4745, %cond.end.4505, %cond.end.4481, %cond.end.4238, %cond.end.4207, %cond.end.3960, %cond.end.3929, %cond.end.3638, %cond.end.3597, %cond.end.3340, %cond.end.3299, %cond.end.2954, %cond.end.2913, %cond.end.2656, %cond.end.2615
  %1250 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %1251 = load i64, i64* %dst_size, align 8
  %1252 = load i8*, i8** %dst, align 8
  %call5302 = call i8* @alloc_destination(%struct.coding_system* %1250, i64 %1251, i8* %1252)
  store i8* %call5302, i8** %dst, align 8
  %1253 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5303 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1253, i32 0, i32 16
  %1254 = load i64, i64* %src_object5303, align 8
  %1255 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5304 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1255, i32 0, i32 21
  %1256 = load i64, i64* %dst_object5304, align 8
  %cmp5305 = icmp eq i64 %1254, %1256
  br i1 %cmp5305, label %if.then.5307, label %if.else.5311

if.then.5307:                                     ; preds = %if.end.5301
  %1257 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %1257)
  %1258 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5308 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1258, i32 0, i32 17
  %1259 = load i8*, i8** %source5308, align 8
  %1260 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed5309 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1260, i32 0, i32 10
  %1261 = load i64, i64* %consumed5309, align 8
  %add.ptr5310 = getelementptr inbounds i8, i8* %1259, i64 %1261
  store i8* %add.ptr5310, i8** %dst_end, align 8
  br label %if.end.5315

if.else.5311:                                     ; preds = %if.end.5301
  %1262 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination5312 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1262, i32 0, i32 22
  %1263 = load i8*, i8** %destination5312, align 8
  %1264 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes5313 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1264, i32 0, i32 20
  %1265 = load i64, i64* %dst_bytes5313, align 8
  %add.ptr5314 = getelementptr inbounds i8, i8* %1263, i64 %1265
  store i8* %add.ptr5314, i8** %dst_end, align 8
  br label %if.end.5315

if.end.5315:                                      ; preds = %if.else.5311, %if.then.5307
  br label %if.end.5316

if.end.5316:                                      ; preds = %if.end.5315, %if.end.106
  store i64 0, i64* %i, align 8
  br label %for.cond.5317

for.cond.5317:                                    ; preds = %for.inc.5390, %if.end.5316
  %1266 = load i64, i64* %i, align 8
  %1267 = load i64, i64* %to_nchars, align 8
  %cmp5318 = icmp slt i64 %1266, %1267
  br i1 %cmp5318, label %for.body.5320, label %for.end.5391

for.body.5320:                                    ; preds = %for.cond.5317
  %1268 = load i64, i64* %i, align 8
  %cmp5321 = icmp sgt i64 %1268, 0
  br i1 %cmp5321, label %if.then.5323, label %if.end.5327

if.then.5323:                                     ; preds = %for.body.5320
  %1269 = load i64, i64* %trans, align 8
  %1270 = load i64, i64* %i, align 8
  %call5324 = call i64 @AREF(i64 %1269, i64 %1270)
  %shr5325 = ashr i64 %call5324, 2
  %conv5326 = trunc i64 %shr5325 to i32
  store i32 %conv5326, i32* %c, align 4
  br label %if.end.5327

if.end.5327:                                      ; preds = %if.then.5323, %for.body.5320
  %1271 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1271, i32 0, i32 1
  %bf.load5328 = load i32, i32* %dst_multibyte, align 8
  %bf.lshr5329 = lshr i32 %bf.load5328, 20
  %bf.clear5330 = and i32 %bf.lshr5329, 1
  %bf.cast5331 = trunc i32 %bf.clear5330 to i1
  br i1 %bf.cast5331, label %if.then.5336, label %lor.lhs.false.5333

lor.lhs.false.5333:                               ; preds = %if.end.5327
  %1272 = load i32, i32* %c, align 4
  %cmp5334 = icmp sgt i32 %1272, 4194175
  br i1 %cmp5334, label %if.else.5378, label %if.then.5336

if.then.5336:                                     ; preds = %lor.lhs.false.5333, %if.end.5327
  br label %do.body.5337

do.body.5337:                                     ; preds = %if.then.5336
  %1273 = load i32, i32* %c, align 4
  %cmp5338 = icmp sle i32 %1273, 127
  br i1 %cmp5338, label %if.then.5340, label %if.else.5342

if.then.5340:                                     ; preds = %do.body.5337
  %1274 = load i32, i32* %c, align 4
  %conv5341 = trunc i32 %1274 to i8
  %1275 = load i8*, i8** %dst, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1275, i32 1
  store i8* %incdec.ptr, i8** %dst, align 8
  store i8 %conv5341, i8* %1275, align 1
  br label %if.end.5376

if.else.5342:                                     ; preds = %do.body.5337
  %1276 = load i32, i32* %c, align 4
  %cmp5343 = icmp sle i32 %1276, 2047
  br i1 %cmp5343, label %if.then.5345, label %if.else.5353

if.then.5345:                                     ; preds = %if.else.5342
  %1277 = load i32, i32* %c, align 4
  %shr5346 = ashr i32 %1277, 6
  %or = or i32 192, %shr5346
  %conv5347 = trunc i32 %or to i8
  %1278 = load i8*, i8** %dst, align 8
  %incdec.ptr5348 = getelementptr inbounds i8, i8* %1278, i32 1
  store i8* %incdec.ptr5348, i8** %dst, align 8
  store i8 %conv5347, i8* %1278, align 1
  %1279 = load i32, i32* %c, align 4
  %and5349 = and i32 %1279, 63
  %or5350 = or i32 128, %and5349
  %conv5351 = trunc i32 %or5350 to i8
  %1280 = load i8*, i8** %dst, align 8
  %incdec.ptr5352 = getelementptr inbounds i8, i8* %1280, i32 1
  store i8* %incdec.ptr5352, i8** %dst, align 8
  store i8 %conv5351, i8* %1280, align 1
  br label %if.end.5375

if.else.5353:                                     ; preds = %if.else.5342
  %1281 = load i32, i32* %c, align 4
  %cmp5354 = icmp sle i32 %1281, 65535
  br i1 %cmp5354, label %if.then.5356, label %if.else.5370

if.then.5356:                                     ; preds = %if.else.5353
  %1282 = load i32, i32* %c, align 4
  %shr5357 = ashr i32 %1282, 12
  %or5358 = or i32 224, %shr5357
  %conv5359 = trunc i32 %or5358 to i8
  %1283 = load i8*, i8** %dst, align 8
  %incdec.ptr5360 = getelementptr inbounds i8, i8* %1283, i32 1
  store i8* %incdec.ptr5360, i8** %dst, align 8
  store i8 %conv5359, i8* %1283, align 1
  %1284 = load i32, i32* %c, align 4
  %shr5361 = ashr i32 %1284, 6
  %and5362 = and i32 %shr5361, 63
  %or5363 = or i32 128, %and5362
  %conv5364 = trunc i32 %or5363 to i8
  %1285 = load i8*, i8** %dst, align 8
  %incdec.ptr5365 = getelementptr inbounds i8, i8* %1285, i32 1
  store i8* %incdec.ptr5365, i8** %dst, align 8
  store i8 %conv5364, i8* %1285, align 1
  %1286 = load i32, i32* %c, align 4
  %and5366 = and i32 %1286, 63
  %or5367 = or i32 128, %and5366
  %conv5368 = trunc i32 %or5367 to i8
  %1287 = load i8*, i8** %dst, align 8
  %incdec.ptr5369 = getelementptr inbounds i8, i8* %1287, i32 1
  store i8* %incdec.ptr5369, i8** %dst, align 8
  store i8 %conv5368, i8* %1287, align 1
  br label %if.end.5374

if.else.5370:                                     ; preds = %if.else.5353
  %1288 = load i32, i32* %c, align 4
  %1289 = load i8*, i8** %dst, align 8
  %call5371 = call i32 @char_string(i32 %1288, i8* %1289)
  %1290 = load i8*, i8** %dst, align 8
  %idx.ext5372 = sext i32 %call5371 to i64
  %add.ptr5373 = getelementptr inbounds i8, i8* %1290, i64 %idx.ext5372
  store i8* %add.ptr5373, i8** %dst, align 8
  br label %if.end.5374

if.end.5374:                                      ; preds = %if.else.5370, %if.then.5356
  br label %if.end.5375

if.end.5375:                                      ; preds = %if.end.5374, %if.then.5345
  br label %if.end.5376

if.end.5376:                                      ; preds = %if.end.5375, %if.then.5340
  br label %do.end.5377

do.end.5377:                                      ; preds = %if.end.5376
  br label %if.end.5389

if.else.5378:                                     ; preds = %lor.lhs.false.5333
  %1291 = load i32, i32* %c, align 4
  %cmp5379 = icmp sgt i32 %1291, 4194175
  br i1 %cmp5379, label %cond.true.5381, label %cond.false.5383

cond.true.5381:                                   ; preds = %if.else.5378
  %1292 = load i32, i32* %c, align 4
  %sub5382 = sub nsw i32 %1292, 4194048
  br label %cond.end.5385

cond.false.5383:                                  ; preds = %if.else.5378
  %1293 = load i32, i32* %c, align 4
  %and5384 = and i32 %1293, 255
  br label %cond.end.5385

cond.end.5385:                                    ; preds = %cond.false.5383, %cond.true.5381
  %cond5386 = phi i32 [ %sub5382, %cond.true.5381 ], [ %and5384, %cond.false.5383 ]
  %conv5387 = trunc i32 %cond5386 to i8
  %1294 = load i8*, i8** %dst, align 8
  %incdec.ptr5388 = getelementptr inbounds i8, i8* %1294, i32 1
  store i8* %incdec.ptr5388, i8** %dst, align 8
  store i8 %conv5387, i8* %1294, align 1
  br label %if.end.5389

if.end.5389:                                      ; preds = %cond.end.5385, %do.end.5377
  br label %for.inc.5390

for.inc.5390:                                     ; preds = %if.end.5389
  %1295 = load i64, i64* %i, align 8
  %inc = add nsw i64 %1295, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond.5317

for.end.5391:                                     ; preds = %for.cond.5317
  %1296 = load i64, i64* %to_nchars, align 8
  %1297 = load i64, i64* %produced_chars, align 8
  %add5392 = add nsw i64 %1297, %1296
  store i64 %add5392, i64* %produced_chars, align 8
  %1298 = load i64, i64* %from_nchars, align 8
  %1299 = load i32*, i32** %buf, align 8
  %add.ptr5393 = getelementptr inbounds i32, i32* %1299, i64 %1298
  store i32* %add.ptr5393, i32** %buf, align 8
  br label %if.end.5398

if.else.5394:                                     ; preds = %while.body
  %1300 = load i32, i32* %c, align 4
  %sub5395 = sub nsw i32 0, %1300
  %1301 = load i32*, i32** %buf, align 8
  %idx.ext5396 = sext i32 %sub5395 to i64
  %add.ptr5397 = getelementptr inbounds i32, i32* %1301, i64 %idx.ext5396
  store i32* %add.ptr5397, i32** %buf, align 8
  br label %if.end.5398

if.end.5398:                                      ; preds = %if.else.5394, %for.end.5391
  br label %while.cond

while.end:                                        ; preds = %if.then.102, %while.cond
  %1302 = load i32*, i32** %buf_end, align 8
  %1303 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast5399 = ptrtoint i32* %1302 to i64
  %sub.ptr.rhs.cast5400 = ptrtoint i32* %1303 to i64
  %sub.ptr.sub5401 = sub i64 %sub.ptr.lhs.cast5399, %sub.ptr.rhs.cast5400
  %sub.ptr.div5402 = sdiv exact i64 %sub.ptr.sub5401, 4
  %conv5403 = trunc i64 %sub.ptr.div5402 to i32
  store i32 %conv5403, i32* %carryover, align 4
  br label %if.end.5663

if.else.5404:                                     ; preds = %entry
  %1304 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5405 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1304, i32 0, i32 17
  %1305 = load i8*, i8** %source5405, align 8
  store i8* %1305, i8** %src, align 8
  %1306 = load i8*, i8** %src, align 8
  %1307 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed5406 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1307, i32 0, i32 10
  %1308 = load i64, i64* %consumed5406, align 8
  %add.ptr5407 = getelementptr inbounds i8, i8* %1306, i64 %1308
  store i8* %add.ptr5407, i8** %src_end, align 8
  %1309 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5408 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1309, i32 0, i32 21
  %1310 = load i64, i64* %dst_object5408, align 8
  %1311 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5409 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1311, i32 0, i32 16
  %1312 = load i64, i64* %src_object5409, align 8
  %cmp5410 = icmp eq i64 %1310, %1312
  br i1 %cmp5410, label %if.then.5412, label %if.end.5413

if.then.5412:                                     ; preds = %if.else.5404
  %1313 = load i8*, i8** %src, align 8
  store i8* %1313, i8** %dst_end, align 8
  br label %if.end.5413

if.end.5413:                                      ; preds = %if.then.5412, %if.else.5404
  %1314 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1314, i32 0, i32 1
  %bf.load5414 = load i32, i32* %src_multibyte, align 8
  %bf.lshr5415 = lshr i32 %bf.load5414, 19
  %bf.clear5416 = and i32 %bf.lshr5415, 1
  %bf.cast5417 = trunc i32 %bf.clear5416 to i1
  %conv5418 = zext i1 %bf.cast5417 to i32
  %1315 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte5419 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1315, i32 0, i32 1
  %bf.load5420 = load i32, i32* %dst_multibyte5419, align 8
  %bf.lshr5421 = lshr i32 %bf.load5420, 20
  %bf.clear5422 = and i32 %bf.lshr5421, 1
  %bf.cast5423 = trunc i32 %bf.clear5422 to i1
  %conv5424 = zext i1 %bf.cast5423 to i32
  %cmp5425 = icmp ne i32 %conv5418, %conv5424
  br i1 %cmp5425, label %if.then.5427, label %if.else.5631

if.then.5427:                                     ; preds = %if.end.5413
  %1316 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte5428 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1316, i32 0, i32 1
  %bf.load5429 = load i32, i32* %src_multibyte5428, align 8
  %bf.lshr5430 = lshr i32 %bf.load5429, 19
  %bf.clear5431 = and i32 %bf.lshr5430, 1
  %bf.cast5432 = trunc i32 %bf.clear5431 to i1
  br i1 %bf.cast5432, label %if.then.5433, label %if.else.5511

if.then.5433:                                     ; preds = %if.then.5427
  store i8 1, i8* %multibytep, align 1
  store i64 0, i64* %consumed_chars, align 8
  br label %while.body.5435

while.body.5435:                                  ; preds = %if.then.5433, %if.end.5507
  %1317 = load i8*, i8** %src, align 8
  store i8* %1317, i8** %src_base, align 8
  br label %do.body.5437

do.body.5437:                                     ; preds = %while.body.5435
  %1318 = load i8*, i8** %src, align 8
  %1319 = load i8*, i8** %src_end, align 8
  %cmp5438 = icmp eq i8* %1318, %1319
  br i1 %cmp5438, label %if.then.5440, label %if.end.5445

if.then.5440:                                     ; preds = %do.body.5437
  %1320 = load i8*, i8** %src_base, align 8
  %1321 = load i8*, i8** %src, align 8
  %cmp5441 = icmp ult i8* %1320, %1321
  br i1 %cmp5441, label %if.then.5443, label %if.end.5444

if.then.5443:                                     ; preds = %if.then.5440
  %1322 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %1322, i32 1)
  br label %if.end.5444

if.end.5444:                                      ; preds = %if.then.5443, %if.then.5440
  br label %no_more_source

if.end.5445:                                      ; preds = %do.body.5437
  %1323 = load i8*, i8** %src, align 8
  %incdec.ptr5446 = getelementptr inbounds i8, i8* %1323, i32 1
  store i8* %incdec.ptr5446, i8** %src, align 8
  %1324 = load i8, i8* %1323, align 1
  %conv5447 = zext i8 %1324 to i32
  store i32 %conv5447, i32* %c5436, align 4
  %1325 = load i8, i8* %multibytep, align 1
  %tobool5448 = trunc i8 %1325 to i1
  br i1 %tobool5448, label %land.lhs.true.5450, label %if.end.5468

land.lhs.true.5450:                               ; preds = %if.end.5445
  %1326 = load i32, i32* %c5436, align 4
  %and5451 = and i32 %1326, 128
  %tobool5452 = icmp ne i32 %and5451, 0
  br i1 %tobool5452, label %if.then.5453, label %if.end.5468

if.then.5453:                                     ; preds = %land.lhs.true.5450
  %1327 = load i32, i32* %c5436, align 4
  %and5454 = and i32 %1327, 254
  %cmp5455 = icmp eq i32 %and5454, 192
  br i1 %cmp5455, label %if.then.5457, label %if.else.5463

if.then.5457:                                     ; preds = %if.then.5453
  %1328 = load i32, i32* %c5436, align 4
  %and5458 = and i32 %1328, 1
  %shl5459 = shl i32 %and5458, 6
  %1329 = load i8*, i8** %src, align 8
  %incdec.ptr5460 = getelementptr inbounds i8, i8* %1329, i32 1
  store i8* %incdec.ptr5460, i8** %src, align 8
  %1330 = load i8, i8* %1329, align 1
  %conv5461 = zext i8 %1330 to i32
  %or5462 = or i32 %shl5459, %conv5461
  store i32 %or5462, i32* %c5436, align 4
  br label %if.end.5467

if.else.5463:                                     ; preds = %if.then.5453
  %1331 = load i8*, i8** %src, align 8
  %incdec.ptr5464 = getelementptr inbounds i8, i8* %1331, i32 -1
  store i8* %incdec.ptr5464, i8** %src, align 8
  %1332 = load i8*, i8** %src, align 8
  %call5465 = call i32 @string_char(i8* %1332, i8** %src, i32* null)
  %sub5466 = sub nsw i32 0, %call5465
  store i32 %sub5466, i32* %c5436, align 4
  %1333 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @record_conversion_result(%struct.coding_system* %1333, i32 3)
  br label %if.end.5467

if.end.5467:                                      ; preds = %if.else.5463, %if.then.5457
  br label %if.end.5468

if.end.5468:                                      ; preds = %if.end.5467, %land.lhs.true.5450, %if.end.5445
  %1334 = load i64, i64* %consumed_chars, align 8
  %inc5469 = add nsw i64 %1334, 1
  store i64 %inc5469, i64* %consumed_chars, align 8
  br label %do.end.5470

do.end.5470:                                      ; preds = %if.end.5468
  %1335 = load i8*, i8** %dst, align 8
  %1336 = load i8*, i8** %dst_end, align 8
  %cmp5471 = icmp eq i8* %1335, %1336
  br i1 %cmp5471, label %if.then.5473, label %if.end.5507

if.then.5473:                                     ; preds = %do.end.5470
  %1337 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5474 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1337, i32 0, i32 16
  %1338 = load i64, i64* %src_object5474, align 8
  %1339 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5475 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1339, i32 0, i32 21
  %1340 = load i64, i64* %dst_object5475, align 8
  %cmp5476 = icmp eq i64 %1338, %1340
  br i1 %cmp5476, label %if.then.5478, label %if.end.5479

if.then.5478:                                     ; preds = %if.then.5473
  %1341 = load i8*, i8** %src, align 8
  store i8* %1341, i8** %dst_end, align 8
  br label %if.end.5479

if.end.5479:                                      ; preds = %if.then.5478, %if.then.5473
  %1342 = load i8*, i8** %dst, align 8
  %1343 = load i8*, i8** %dst_end, align 8
  %cmp5480 = icmp eq i8* %1342, %1343
  br i1 %cmp5480, label %if.then.5482, label %if.end.5506

if.then.5482:                                     ; preds = %if.end.5479
  %1344 = load i8*, i8** %src, align 8
  %1345 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5483 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1345, i32 0, i32 17
  %1346 = load i8*, i8** %source5483, align 8
  %sub.ptr.lhs.cast5484 = ptrtoint i8* %1344 to i64
  %sub.ptr.rhs.cast5485 = ptrtoint i8* %1346 to i64
  %sub.ptr.sub5486 = sub i64 %sub.ptr.lhs.cast5484, %sub.ptr.rhs.cast5485
  store i64 %sub.ptr.sub5486, i64* %offset, align 8
  %1347 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %1348 = load i8*, i8** %src_end, align 8
  %1349 = load i8*, i8** %src, align 8
  %sub.ptr.lhs.cast5487 = ptrtoint i8* %1348 to i64
  %sub.ptr.rhs.cast5488 = ptrtoint i8* %1349 to i64
  %sub.ptr.sub5489 = sub i64 %sub.ptr.lhs.cast5487, %sub.ptr.rhs.cast5488
  %add5490 = add nsw i64 %sub.ptr.sub5489, 1
  %1350 = load i8*, i8** %dst, align 8
  %call5491 = call i8* @alloc_destination(%struct.coding_system* %1347, i64 %add5490, i8* %1350)
  store i8* %call5491, i8** %dst, align 8
  %1351 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination5492 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1351, i32 0, i32 22
  %1352 = load i8*, i8** %destination5492, align 8
  %1353 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes5493 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1353, i32 0, i32 20
  %1354 = load i64, i64* %dst_bytes5493, align 8
  %add.ptr5494 = getelementptr inbounds i8, i8* %1352, i64 %1354
  store i8* %add.ptr5494, i8** %dst_end, align 8
  %1355 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %1355)
  %1356 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5495 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1356, i32 0, i32 17
  %1357 = load i8*, i8** %source5495, align 8
  %1358 = load i64, i64* %offset, align 8
  %add.ptr5496 = getelementptr inbounds i8, i8* %1357, i64 %1358
  store i8* %add.ptr5496, i8** %src, align 8
  %1359 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5497 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1359, i32 0, i32 17
  %1360 = load i8*, i8** %source5497, align 8
  %1361 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed5498 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1361, i32 0, i32 10
  %1362 = load i64, i64* %consumed5498, align 8
  %add.ptr5499 = getelementptr inbounds i8, i8* %1360, i64 %1362
  store i8* %add.ptr5499, i8** %src_end, align 8
  %1363 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5500 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1363, i32 0, i32 16
  %1364 = load i64, i64* %src_object5500, align 8
  %1365 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5501 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1365, i32 0, i32 21
  %1366 = load i64, i64* %dst_object5501, align 8
  %cmp5502 = icmp eq i64 %1364, %1366
  br i1 %cmp5502, label %if.then.5504, label %if.end.5505

if.then.5504:                                     ; preds = %if.then.5482
  %1367 = load i8*, i8** %src, align 8
  store i8* %1367, i8** %dst_end, align 8
  br label %if.end.5505

if.end.5505:                                      ; preds = %if.then.5504, %if.then.5482
  br label %if.end.5506

if.end.5506:                                      ; preds = %if.end.5505, %if.end.5479
  br label %if.end.5507

if.end.5507:                                      ; preds = %if.end.5506, %do.end.5470
  %1368 = load i32, i32* %c5436, align 4
  %conv5508 = trunc i32 %1368 to i8
  %1369 = load i8*, i8** %dst, align 8
  %incdec.ptr5509 = getelementptr inbounds i8, i8* %1369, i32 1
  store i8* %incdec.ptr5509, i8** %dst, align 8
  store i8 %conv5508, i8* %1369, align 1
  %1370 = load i64, i64* %produced_chars, align 8
  %inc5510 = add nsw i64 %1370, 1
  store i64 %inc5510, i64* %produced_chars, align 8
  br label %while.body.5435

no_more_source:                                   ; preds = %if.end.5444
  br label %if.end.5630

if.else.5511:                                     ; preds = %if.then.5427
  br label %while.cond.5512

while.cond.5512:                                  ; preds = %do.end.5628, %if.else.5511
  %1371 = load i8*, i8** %src, align 8
  %1372 = load i8*, i8** %src_end, align 8
  %cmp5513 = icmp ult i8* %1371, %1372
  br i1 %cmp5513, label %while.body.5515, label %while.end.5629

while.body.5515:                                  ; preds = %while.cond.5512
  store i8 1, i8* %multibytep5516, align 1
  %1373 = load i8*, i8** %src, align 8
  %incdec.ptr5518 = getelementptr inbounds i8, i8* %1373, i32 1
  store i8* %incdec.ptr5518, i8** %src, align 8
  %1374 = load i8, i8* %1373, align 1
  %conv5519 = zext i8 %1374 to i32
  store i32 %conv5519, i32* %c5517, align 4
  %1375 = load i8*, i8** %dst, align 8
  %1376 = load i8*, i8** %dst_end, align 8
  %add.ptr5520 = getelementptr inbounds i8, i8* %1376, i64 -1
  %cmp5521 = icmp uge i8* %1375, %add.ptr5520
  br i1 %cmp5521, label %if.then.5523, label %if.end.5571

if.then.5523:                                     ; preds = %while.body.5515
  %1377 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5524 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1377, i32 0, i32 16
  %1378 = load i64, i64* %src_object5524, align 8
  %1379 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5525 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1379, i32 0, i32 21
  %1380 = load i64, i64* %dst_object5525, align 8
  %cmp5526 = icmp eq i64 %1378, %1380
  br i1 %cmp5526, label %if.then.5528, label %if.end.5529

if.then.5528:                                     ; preds = %if.then.5523
  %1381 = load i8*, i8** %src, align 8
  store i8* %1381, i8** %dst_end, align 8
  br label %if.end.5529

if.end.5529:                                      ; preds = %if.then.5528, %if.then.5523
  %1382 = load i8*, i8** %dst, align 8
  %1383 = load i8*, i8** %dst_end, align 8
  %add.ptr5530 = getelementptr inbounds i8, i8* %1383, i64 -1
  %cmp5531 = icmp uge i8* %1382, %add.ptr5530
  br i1 %cmp5531, label %if.then.5533, label %if.end.5570

if.then.5533:                                     ; preds = %if.end.5529
  %1384 = load i8*, i8** %src, align 8
  %1385 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5535 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1385, i32 0, i32 17
  %1386 = load i8*, i8** %source5535, align 8
  %sub.ptr.lhs.cast5536 = ptrtoint i8* %1384 to i64
  %sub.ptr.rhs.cast5537 = ptrtoint i8* %1386 to i64
  %sub.ptr.sub5538 = sub i64 %sub.ptr.lhs.cast5536, %sub.ptr.rhs.cast5537
  store i64 %sub.ptr.sub5538, i64* %offset5534, align 8
  %1387 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5539 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1387, i32 0, i32 16
  %1388 = load i64, i64* %src_object5539, align 8
  %1389 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5540 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1389, i32 0, i32 21
  %1390 = load i64, i64* %dst_object5540, align 8
  %cmp5541 = icmp eq i64 %1388, %1390
  br i1 %cmp5541, label %if.then.5543, label %if.else.5549

if.then.5543:                                     ; preds = %if.then.5533
  %1391 = load i8*, i8** %src_end, align 8
  %1392 = load i8*, i8** %src, align 8
  %sub.ptr.lhs.cast5544 = ptrtoint i8* %1391 to i64
  %sub.ptr.rhs.cast5545 = ptrtoint i8* %1392 to i64
  %sub.ptr.sub5546 = sub i64 %sub.ptr.lhs.cast5544, %sub.ptr.rhs.cast5545
  %div5547 = sdiv i64 %sub.ptr.sub5546, 2
  %add5548 = add nsw i64 %div5547, 2
  store i64 %add5548, i64* %more_bytes, align 8
  br label %if.end.5554

if.else.5549:                                     ; preds = %if.then.5533
  %1393 = load i8*, i8** %src_end, align 8
  %1394 = load i8*, i8** %src, align 8
  %sub.ptr.lhs.cast5550 = ptrtoint i8* %1393 to i64
  %sub.ptr.rhs.cast5551 = ptrtoint i8* %1394 to i64
  %sub.ptr.sub5552 = sub i64 %sub.ptr.lhs.cast5550, %sub.ptr.rhs.cast5551
  %add5553 = add nsw i64 %sub.ptr.sub5552, 2
  store i64 %add5553, i64* %more_bytes, align 8
  br label %if.end.5554

if.end.5554:                                      ; preds = %if.else.5549, %if.then.5543
  %1395 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %1396 = load i64, i64* %more_bytes, align 8
  %1397 = load i8*, i8** %dst, align 8
  %call5555 = call i8* @alloc_destination(%struct.coding_system* %1395, i64 %1396, i8* %1397)
  store i8* %call5555, i8** %dst, align 8
  %1398 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination5556 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1398, i32 0, i32 22
  %1399 = load i8*, i8** %destination5556, align 8
  %1400 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes5557 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1400, i32 0, i32 20
  %1401 = load i64, i64* %dst_bytes5557, align 8
  %add.ptr5558 = getelementptr inbounds i8, i8* %1399, i64 %1401
  store i8* %add.ptr5558, i8** %dst_end, align 8
  %1402 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %1402)
  %1403 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5559 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1403, i32 0, i32 17
  %1404 = load i8*, i8** %source5559, align 8
  %1405 = load i64, i64* %offset5534, align 8
  %add.ptr5560 = getelementptr inbounds i8, i8* %1404, i64 %1405
  store i8* %add.ptr5560, i8** %src, align 8
  %1406 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5561 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1406, i32 0, i32 17
  %1407 = load i8*, i8** %source5561, align 8
  %1408 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed5562 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1408, i32 0, i32 10
  %1409 = load i64, i64* %consumed5562, align 8
  %add.ptr5563 = getelementptr inbounds i8, i8* %1407, i64 %1409
  store i8* %add.ptr5563, i8** %src_end, align 8
  %1410 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5564 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1410, i32 0, i32 16
  %1411 = load i64, i64* %src_object5564, align 8
  %1412 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5565 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1412, i32 0, i32 21
  %1413 = load i64, i64* %dst_object5565, align 8
  %cmp5566 = icmp eq i64 %1411, %1413
  br i1 %cmp5566, label %if.then.5568, label %if.end.5569

if.then.5568:                                     ; preds = %if.end.5554
  %1414 = load i8*, i8** %src, align 8
  store i8* %1414, i8** %dst_end, align 8
  br label %if.end.5569

if.end.5569:                                      ; preds = %if.then.5568, %if.end.5554
  br label %if.end.5570

if.end.5570:                                      ; preds = %if.end.5569, %if.end.5529
  br label %if.end.5571

if.end.5571:                                      ; preds = %if.end.5570, %while.body.5515
  br label %do.body.5572

do.body.5572:                                     ; preds = %if.end.5571
  %1415 = load i64, i64* %produced_chars, align 8
  %inc5573 = add nsw i64 %1415, 1
  store i64 %inc5573, i64* %produced_chars, align 8
  %1416 = load i8, i8* %multibytep5516, align 1
  %tobool5574 = trunc i8 %1416 to i1
  br i1 %tobool5574, label %if.then.5575, label %if.else.5624

if.then.5575:                                     ; preds = %do.body.5572
  %1417 = load i32, i32* %c5517, align 4
  store i32 %1417, i32* %ch, align 4
  %1418 = load i32, i32* %ch, align 4
  %cmp5576 = icmp uge i32 %1418, 128
  br i1 %cmp5576, label %if.then.5578, label %if.end.5580

if.then.5578:                                     ; preds = %if.then.5575
  %1419 = load i32, i32* %ch, align 4
  %add5579 = add i32 %1419, 4194048
  store i32 %add5579, i32* %ch, align 4
  br label %if.end.5580

if.end.5580:                                      ; preds = %if.then.5578, %if.then.5575
  br label %do.body.5581

do.body.5581:                                     ; preds = %if.end.5580
  %1420 = load i32, i32* %ch, align 4
  %cmp5582 = icmp ule i32 %1420, 127
  br i1 %cmp5582, label %if.then.5584, label %if.else.5587

if.then.5584:                                     ; preds = %do.body.5581
  %1421 = load i32, i32* %ch, align 4
  %conv5585 = trunc i32 %1421 to i8
  %1422 = load i8*, i8** %dst, align 8
  %incdec.ptr5586 = getelementptr inbounds i8, i8* %1422, i32 1
  store i8* %incdec.ptr5586, i8** %dst, align 8
  store i8 %conv5585, i8* %1422, align 1
  br label %if.end.5622

if.else.5587:                                     ; preds = %do.body.5581
  %1423 = load i32, i32* %ch, align 4
  %cmp5588 = icmp ule i32 %1423, 2047
  br i1 %cmp5588, label %if.then.5590, label %if.else.5599

if.then.5590:                                     ; preds = %if.else.5587
  %1424 = load i32, i32* %ch, align 4
  %shr5591 = lshr i32 %1424, 6
  %or5592 = or i32 192, %shr5591
  %conv5593 = trunc i32 %or5592 to i8
  %1425 = load i8*, i8** %dst, align 8
  %incdec.ptr5594 = getelementptr inbounds i8, i8* %1425, i32 1
  store i8* %incdec.ptr5594, i8** %dst, align 8
  store i8 %conv5593, i8* %1425, align 1
  %1426 = load i32, i32* %ch, align 4
  %and5595 = and i32 %1426, 63
  %or5596 = or i32 128, %and5595
  %conv5597 = trunc i32 %or5596 to i8
  %1427 = load i8*, i8** %dst, align 8
  %incdec.ptr5598 = getelementptr inbounds i8, i8* %1427, i32 1
  store i8* %incdec.ptr5598, i8** %dst, align 8
  store i8 %conv5597, i8* %1427, align 1
  br label %if.end.5621

if.else.5599:                                     ; preds = %if.else.5587
  %1428 = load i32, i32* %ch, align 4
  %cmp5600 = icmp ule i32 %1428, 65535
  br i1 %cmp5600, label %if.then.5602, label %if.else.5616

if.then.5602:                                     ; preds = %if.else.5599
  %1429 = load i32, i32* %ch, align 4
  %shr5603 = lshr i32 %1429, 12
  %or5604 = or i32 224, %shr5603
  %conv5605 = trunc i32 %or5604 to i8
  %1430 = load i8*, i8** %dst, align 8
  %incdec.ptr5606 = getelementptr inbounds i8, i8* %1430, i32 1
  store i8* %incdec.ptr5606, i8** %dst, align 8
  store i8 %conv5605, i8* %1430, align 1
  %1431 = load i32, i32* %ch, align 4
  %shr5607 = lshr i32 %1431, 6
  %and5608 = and i32 %shr5607, 63
  %or5609 = or i32 128, %and5608
  %conv5610 = trunc i32 %or5609 to i8
  %1432 = load i8*, i8** %dst, align 8
  %incdec.ptr5611 = getelementptr inbounds i8, i8* %1432, i32 1
  store i8* %incdec.ptr5611, i8** %dst, align 8
  store i8 %conv5610, i8* %1432, align 1
  %1433 = load i32, i32* %ch, align 4
  %and5612 = and i32 %1433, 63
  %or5613 = or i32 128, %and5612
  %conv5614 = trunc i32 %or5613 to i8
  %1434 = load i8*, i8** %dst, align 8
  %incdec.ptr5615 = getelementptr inbounds i8, i8* %1434, i32 1
  store i8* %incdec.ptr5615, i8** %dst, align 8
  store i8 %conv5614, i8* %1434, align 1
  br label %if.end.5620

if.else.5616:                                     ; preds = %if.else.5599
  %1435 = load i32, i32* %ch, align 4
  %1436 = load i8*, i8** %dst, align 8
  %call5617 = call i32 @char_string(i32 %1435, i8* %1436)
  %1437 = load i8*, i8** %dst, align 8
  %idx.ext5618 = sext i32 %call5617 to i64
  %add.ptr5619 = getelementptr inbounds i8, i8* %1437, i64 %idx.ext5618
  store i8* %add.ptr5619, i8** %dst, align 8
  br label %if.end.5620

if.end.5620:                                      ; preds = %if.else.5616, %if.then.5602
  br label %if.end.5621

if.end.5621:                                      ; preds = %if.end.5620, %if.then.5590
  br label %if.end.5622

if.end.5622:                                      ; preds = %if.end.5621, %if.then.5584
  br label %do.end.5623

do.end.5623:                                      ; preds = %if.end.5622
  br label %if.end.5627

if.else.5624:                                     ; preds = %do.body.5572
  %1438 = load i32, i32* %c5517, align 4
  %conv5625 = trunc i32 %1438 to i8
  %1439 = load i8*, i8** %dst, align 8
  %incdec.ptr5626 = getelementptr inbounds i8, i8* %1439, i32 1
  store i8* %incdec.ptr5626, i8** %dst, align 8
  store i8 %conv5625, i8* %1439, align 1
  br label %if.end.5627

if.end.5627:                                      ; preds = %if.else.5624, %do.end.5623
  br label %do.end.5628

do.end.5628:                                      ; preds = %if.end.5627
  br label %while.cond.5512

while.end.5629:                                   ; preds = %while.cond.5512
  br label %if.end.5630

if.end.5630:                                      ; preds = %while.end.5629, %no_more_source
  br label %if.end.5662

if.else.5631:                                     ; preds = %if.end.5413
  %1440 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object5632 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1440, i32 0, i32 16
  %1441 = load i64, i64* %src_object5632, align 8
  %1442 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5633 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1442, i32 0, i32 21
  %1443 = load i64, i64* %dst_object5633, align 8
  %cmp5634 = icmp eq i64 %1441, %1443
  br i1 %cmp5634, label %if.end.5654, label %if.then.5636

if.then.5636:                                     ; preds = %if.else.5631
  %1444 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1444, i32 0, i32 15
  %1445 = load i64, i64* %src_bytes, align 8
  %1446 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes5637 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1446, i32 0, i32 20
  %1447 = load i64, i64* %dst_bytes5637, align 8
  %sub5638 = sub nsw i64 %1445, %1447
  store i64 %sub5638, i64* %require, align 8
  %1448 = load i64, i64* %require, align 8
  %cmp5639 = icmp sgt i64 %1448, 0
  br i1 %cmp5639, label %if.then.5641, label %if.end.5653

if.then.5641:                                     ; preds = %if.then.5636
  %1449 = load i8*, i8** %src, align 8
  %1450 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5643 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1450, i32 0, i32 17
  %1451 = load i8*, i8** %source5643, align 8
  %sub.ptr.lhs.cast5644 = ptrtoint i8* %1449 to i64
  %sub.ptr.rhs.cast5645 = ptrtoint i8* %1451 to i64
  %sub.ptr.sub5646 = sub i64 %sub.ptr.lhs.cast5644, %sub.ptr.rhs.cast5645
  store i64 %sub.ptr.sub5646, i64* %offset5642, align 8
  %1452 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %1453 = load i64, i64* %require, align 8
  %1454 = load i8*, i8** %dst, align 8
  %call5647 = call i8* @alloc_destination(%struct.coding_system* %1452, i64 %1453, i8* %1454)
  store i8* %call5647, i8** %dst, align 8
  %1455 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  call void @coding_set_source(%struct.coding_system* %1455)
  %1456 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5648 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1456, i32 0, i32 17
  %1457 = load i8*, i8** %source5648, align 8
  %1458 = load i64, i64* %offset5642, align 8
  %add.ptr5649 = getelementptr inbounds i8, i8* %1457, i64 %1458
  store i8* %add.ptr5649, i8** %src, align 8
  %1459 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source5650 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1459, i32 0, i32 17
  %1460 = load i8*, i8** %source5650, align 8
  %1461 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed5651 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1461, i32 0, i32 10
  %1462 = load i64, i64* %consumed5651, align 8
  %add.ptr5652 = getelementptr inbounds i8, i8* %1460, i64 %1462
  store i8* %add.ptr5652, i8** %src_end, align 8
  br label %if.end.5653

if.end.5653:                                      ; preds = %if.then.5641, %if.then.5636
  br label %if.end.5654

if.end.5654:                                      ; preds = %if.end.5653, %if.else.5631
  %1463 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1463, i32 0, i32 11
  %1464 = load i64, i64* %consumed_char, align 8
  store i64 %1464, i64* %produced_chars, align 8
  br label %while.cond.5655

while.cond.5655:                                  ; preds = %while.body.5658, %if.end.5654
  %1465 = load i8*, i8** %src, align 8
  %1466 = load i8*, i8** %src_end, align 8
  %cmp5656 = icmp ult i8* %1465, %1466
  br i1 %cmp5656, label %while.body.5658, label %while.end.5661

while.body.5658:                                  ; preds = %while.cond.5655
  %1467 = load i8*, i8** %src, align 8
  %incdec.ptr5659 = getelementptr inbounds i8, i8* %1467, i32 1
  store i8* %incdec.ptr5659, i8** %src, align 8
  %1468 = load i8, i8* %1467, align 1
  %1469 = load i8*, i8** %dst, align 8
  %incdec.ptr5660 = getelementptr inbounds i8, i8* %1469, i32 1
  store i8* %incdec.ptr5660, i8** %dst, align 8
  store i8 %1468, i8* %1469, align 1
  br label %while.cond.5655

while.end.5661:                                   ; preds = %while.cond.5655
  br label %if.end.5662

if.end.5662:                                      ; preds = %while.end.5661, %if.end.5630
  br label %if.end.5663

if.end.5663:                                      ; preds = %if.end.5662, %while.end
  %1470 = load i8*, i8** %dst, align 8
  %1471 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination5664 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1471, i32 0, i32 22
  %1472 = load i8*, i8** %destination5664, align 8
  %1473 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced5665 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1473, i32 0, i32 8
  %1474 = load i64, i64* %produced5665, align 8
  %add.ptr5666 = getelementptr inbounds i8, i8* %1472, i64 %1474
  %sub.ptr.lhs.cast5667 = ptrtoint i8* %1470 to i64
  %sub.ptr.rhs.cast5668 = ptrtoint i8* %add.ptr5666 to i64
  %sub.ptr.sub5669 = sub i64 %sub.ptr.lhs.cast5667, %sub.ptr.rhs.cast5668
  store i64 %sub.ptr.sub5669, i64* %produced3, align 8
  %1475 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object5670 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1475, i32 0, i32 21
  %1476 = load i64, i64* %dst_object5670, align 8
  %call5671 = call zeroext i1 @BUFFERP(i64 %1476)
  br i1 %call5671, label %land.lhs.true.5673, label %if.end.5677

land.lhs.true.5673:                               ; preds = %if.end.5663
  %1477 = load i64, i64* %produced_chars, align 8
  %cmp5674 = icmp sgt i64 %1477, 0
  br i1 %cmp5674, label %if.then.5676, label %if.end.5677

if.then.5676:                                     ; preds = %land.lhs.true.5673
  %1478 = load i64, i64* %produced_chars, align 8
  %1479 = load i64, i64* %produced3, align 8
  call void @insert_from_gap(i64 %1478, i64 %1479, i1 zeroext false)
  br label %if.end.5677

if.end.5677:                                      ; preds = %if.then.5676, %land.lhs.true.5673, %if.end.5663
  %1480 = load i64, i64* %produced3, align 8
  %1481 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced5678 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1481, i32 0, i32 8
  %1482 = load i64, i64* %produced5678, align 8
  %add5679 = add nsw i64 %1482, %1480
  store i64 %add5679, i64* %produced5678, align 8
  %1483 = load i64, i64* %produced_chars, align 8
  %1484 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1484, i32 0, i32 9
  %1485 = load i64, i64* %produced_char, align 8
  %add5680 = add nsw i64 %1485, %1483
  store i64 %add5680, i64* %produced_char, align 8
  %1486 = load i32, i32* %carryover, align 4
  ret i32 %1486
}

; Function Attrs: nounwind uwtable
define internal void @produce_annotation(%struct.coding_system* %coding, i64 %pos) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %pos.addr = alloca i64, align 8
  %charbuf = alloca i32*, align 8
  %charbuf_end = alloca i32*, align 8
  %len = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 23
  %1 = load i32*, i32** %charbuf1, align 8
  store i32* %1, i32** %charbuf, align 8
  %2 = load i32*, i32** %charbuf, align 8
  %3 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %3, i32 0, i32 25
  %4 = load i32, i32* %charbuf_used, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds i32, i32* %2, i64 %idx.ext
  store i32* %add.ptr, i32** %charbuf_end, align 8
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 21
  %6 = load i64, i64* %dst_object, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %6, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.end

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end.11, %if.end
  %7 = load i32*, i32** %charbuf, align 8
  %8 = load i32*, i32** %charbuf_end, align 8
  %cmp2 = icmp ult i32* %7, %8
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i32*, i32** %charbuf, align 8
  %10 = load i32, i32* %9, align 4
  %cmp3 = icmp sge i32 %10, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %while.body
  %11 = load i64, i64* %pos.addr, align 8
  %inc = add nsw i64 %11, 1
  store i64 %inc, i64* %pos.addr, align 8
  %12 = load i32*, i32** %charbuf, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %12, i32 1
  store i32* %incdec.ptr, i32** %charbuf, align 8
  br label %if.end.11

if.else:                                          ; preds = %while.body
  %13 = load i32*, i32** %charbuf, align 8
  %14 = load i32, i32* %13, align 4
  %sub = sub nsw i32 0, %14
  store i32 %sub, i32* %len, align 4
  %15 = load i32, i32* %len, align 4
  %cmp5 = icmp sgt i32 %15, 2
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.else
  %16 = load i32*, i32** %charbuf, align 8
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 1
  %17 = load i32, i32* %arrayidx, align 4
  switch i32 %17, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %if.then.6
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %19 = load i32*, i32** %charbuf, align 8
  %20 = load i64, i64* %pos.addr, align 8
  call void @produce_composition(%struct.coding_system* %18, i32* %19, i64 %20)
  br label %sw.epilog

sw.bb.7:                                          ; preds = %if.then.6
  %21 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %22 = load i32*, i32** %charbuf, align 8
  %23 = load i64, i64* %pos.addr, align 8
  call void @produce_charset(%struct.coding_system* %21, i32* %22, i64 %23)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.6
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.7, %sw.bb
  br label %if.end.8

if.end.8:                                         ; preds = %sw.epilog, %if.else
  %24 = load i32, i32* %len, align 4
  %25 = load i32*, i32** %charbuf, align 8
  %idx.ext9 = sext i32 %24 to i64
  %add.ptr10 = getelementptr inbounds i32, i32* %25, i64 %idx.ext9
  store i32* %add.ptr10, i32** %charbuf, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.8, %if.then.4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @decode_eol(%struct.coding_system* %coding) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %eol_type = alloca i64, align 8
  %p = alloca i8*, align 8
  %pbeg = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %eol_seen = alloca i32, align 4
  %n = alloca i64, align 8
  %pos = alloca i64, align 8
  %pos_byte = alloca i64, align 8
  %pos_end = alloca i64, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %0)
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 0
  %2 = load i64, i64* %id, align 8
  %call1 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call, i64 %2)
  %call2 = call i64 @AREF(i64 %call1, i64 2)
  store i64 %call2, i64* %eol_type, align 8
  %3 = load i64, i64* %eol_type, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp = icmp eq i64 %3, %call3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end.185

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %5, i32 0, i32 21
  %6 = load i64, i64* %dst_object, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %6, %call4
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end
  %7 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %7, i32 0, i32 22
  %8 = load i8*, i8** %destination, align 8
  store i8* %8, i8** %pbeg, align 8
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %9 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %9, i32 0, i32 19
  %10 = load i64, i64* %dst_pos_byte, align 8
  %11 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 73
  %12 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %12, i32 0, i32 3
  %13 = load i64, i64* %gpt_byte, align 8
  %cmp7 = icmp sge i64 %10, %13
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %14 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text8 = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 73
  %15 = load %struct.buffer_text*, %struct.buffer_text** %text8, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %15, i32 0, i32 5
  %16 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %16, %cond.true ], [ 0, %cond.false ]
  %17 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte9 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %17, i32 0, i32 19
  %18 = load i64, i64* %dst_pos_byte9, align 8
  %add = add nsw i64 %cond, %18
  %19 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text10 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 73
  %20 = load %struct.buffer_text*, %struct.buffer_text** %text10, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %20, i32 0, i32 0
  %21 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %add
  %add.ptr11 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr11, i8** %pbeg, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %cond.end, %if.then.6
  %22 = load i8*, i8** %pbeg, align 8
  %23 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %23, i32 0, i32 8
  %24 = load i64, i64* %produced, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %22, i64 %24
  store i8* %add.ptr13, i8** %pend, align 8
  %25 = load i64, i64* %eol_type, align 8
  %call14 = call zeroext i1 @VECTORP(i64 %25)
  br i1 %call14, label %if.then.15, label %if.end.71

if.then.15:                                       ; preds = %if.end.12
  store i32 0, i32* %eol_seen, align 4
  %26 = load i8*, i8** %pbeg, align 8
  store i8* %26, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.15
  %27 = load i8*, i8** %p, align 8
  %28 = load i8*, i8** %pend, align 8
  %cmp16 = icmp ult i8* %27, %28
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i8*, i8** %p, align 8
  %30 = load i8, i8* %29, align 1
  %conv = zext i8 %30 to i32
  %cmp17 = icmp eq i32 %conv, 10
  br i1 %cmp17, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %for.body
  %31 = load i32, i32* %eol_seen, align 4
  %or = or i32 %31, 1
  store i32 %or, i32* %eol_seen, align 4
  br label %if.end.38

if.else.20:                                       ; preds = %for.body
  %32 = load i8*, i8** %p, align 8
  %33 = load i8, i8* %32, align 1
  %conv21 = zext i8 %33 to i32
  %cmp22 = icmp eq i32 %conv21, 13
  br i1 %cmp22, label %if.then.24, label %if.end.37

if.then.24:                                       ; preds = %if.else.20
  %34 = load i8*, i8** %p, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %34, i64 1
  %35 = load i8*, i8** %pend, align 8
  %cmp26 = icmp ult i8* %add.ptr25, %35
  br i1 %cmp26, label %land.lhs.true, label %if.else.34

land.lhs.true:                                    ; preds = %if.then.24
  %36 = load i8*, i8** %p, align 8
  %add.ptr28 = getelementptr inbounds i8, i8* %36, i64 1
  %37 = load i8, i8* %add.ptr28, align 1
  %conv29 = zext i8 %37 to i32
  %cmp30 = icmp eq i32 %conv29, 10
  br i1 %cmp30, label %if.then.32, label %if.else.34

if.then.32:                                       ; preds = %land.lhs.true
  %38 = load i32, i32* %eol_seen, align 4
  %or33 = or i32 %38, 4
  store i32 %or33, i32* %eol_seen, align 4
  %39 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %if.end.36

if.else.34:                                       ; preds = %land.lhs.true, %if.then.24
  %40 = load i32, i32* %eol_seen, align 4
  %or35 = or i32 %40, 2
  store i32 %or35, i32* %eol_seen, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.34, %if.then.32
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.else.20
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.then.19
  br label %for.inc

for.inc:                                          ; preds = %if.end.38
  %41 = load i8*, i8** %p, align 8
  %incdec.ptr39 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr39, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %42 = load i32, i32* %eol_seen, align 4
  %and = and i32 %42, 4
  %cmp40 = icmp ne i32 %and, 0
  br i1 %cmp40, label %land.lhs.true.42, label %if.else.51

land.lhs.true.42:                                 ; preds = %for.end
  %43 = load i32, i32* %eol_seen, align 4
  %and43 = and i32 %43, 2
  %cmp44 = icmp ne i32 %and43, 0
  br i1 %cmp44, label %land.lhs.true.46, label %if.else.51

land.lhs.true.46:                                 ; preds = %land.lhs.true.42
  %44 = load i32, i32* %eol_seen, align 4
  %and47 = and i32 %44, 1
  %cmp48 = icmp eq i32 %and47, 0
  br i1 %cmp48, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %land.lhs.true.46
  store i32 4, i32* %eol_seen, align 4
  br label %if.end.65

if.else.51:                                       ; preds = %land.lhs.true.46, %land.lhs.true.42, %for.end
  %45 = load i32, i32* %eol_seen, align 4
  %cmp52 = icmp ne i32 %45, 0
  br i1 %cmp52, label %land.lhs.true.54, label %if.end.64

land.lhs.true.54:                                 ; preds = %if.else.51
  %46 = load i32, i32* %eol_seen, align 4
  %cmp55 = icmp ne i32 %46, 1
  br i1 %cmp55, label %land.lhs.true.57, label %if.end.64

land.lhs.true.57:                                 ; preds = %land.lhs.true.54
  %47 = load i32, i32* %eol_seen, align 4
  %cmp58 = icmp ne i32 %47, 4
  br i1 %cmp58, label %land.lhs.true.60, label %if.end.64

land.lhs.true.60:                                 ; preds = %land.lhs.true.57
  %48 = load i32, i32* %eol_seen, align 4
  %cmp61 = icmp ne i32 %48, 2
  br i1 %cmp61, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %land.lhs.true.60
  store i32 1, i32* %eol_seen, align 4
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.63, %land.lhs.true.60, %land.lhs.true.57, %land.lhs.true.54, %if.else.51
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.then.50
  %49 = load i32, i32* %eol_seen, align 4
  %cmp66 = icmp ne i32 %49, 0
  br i1 %cmp66, label %if.then.68, label %if.end.70

if.then.68:                                       ; preds = %if.end.65
  %50 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %51 = load i32, i32* %eol_seen, align 4
  %call69 = call i64 @adjust_coding_eol_type(%struct.coding_system* %50, i32 %51)
  store i64 %call69, i64* %eol_type, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.68, %if.end.65
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.12
  %52 = load i64, i64* %eol_type, align 8
  %call72 = call i64 @builtin_lisp_symbol(i32 635)
  %cmp73 = icmp eq i64 %52, %call72
  br i1 %cmp73, label %if.then.75, label %if.else.88

if.then.75:                                       ; preds = %if.end.71
  %53 = load i8*, i8** %pbeg, align 8
  store i8* %53, i8** %p, align 8
  br label %for.cond.76

for.cond.76:                                      ; preds = %for.inc.85, %if.then.75
  %54 = load i8*, i8** %p, align 8
  %55 = load i8*, i8** %pend, align 8
  %cmp77 = icmp ult i8* %54, %55
  br i1 %cmp77, label %for.body.79, label %for.end.87

for.body.79:                                      ; preds = %for.cond.76
  %56 = load i8*, i8** %p, align 8
  %57 = load i8, i8* %56, align 1
  %conv80 = zext i8 %57 to i32
  %cmp81 = icmp eq i32 %conv80, 13
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %for.body.79
  %58 = load i8*, i8** %p, align 8
  store i8 10, i8* %58, align 1
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.83, %for.body.79
  br label %for.inc.85

for.inc.85:                                       ; preds = %if.end.84
  %59 = load i8*, i8** %p, align 8
  %incdec.ptr86 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr86, i8** %p, align 8
  br label %for.cond.76

for.end.87:                                       ; preds = %for.cond.76
  br label %if.end.185

if.else.88:                                       ; preds = %if.end.71
  %60 = load i64, i64* %eol_type, align 8
  %call89 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp90 = icmp eq i64 %60, %call89
  br i1 %cmp90, label %if.then.92, label %if.end.184

if.then.92:                                       ; preds = %if.else.88
  store i64 0, i64* %n, align 8
  %61 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object93 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %61, i32 0, i32 21
  %62 = load i64, i64* %dst_object93, align 8
  %call94 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp95 = icmp eq i64 %62, %call94
  br i1 %cmp95, label %if.then.97, label %if.else.113

if.then.97:                                       ; preds = %if.then.92
  %63 = load i8*, i8** %pend, align 8
  %add.ptr98 = getelementptr inbounds i8, i8* %63, i64 -2
  store i8* %add.ptr98, i8** %p, align 8
  br label %for.cond.99

for.cond.99:                                      ; preds = %for.inc.110, %if.then.97
  %64 = load i8*, i8** %p, align 8
  %65 = load i8*, i8** %pbeg, align 8
  %cmp100 = icmp uge i8* %64, %65
  br i1 %cmp100, label %for.body.102, label %for.end.112

for.body.102:                                     ; preds = %for.cond.99
  %66 = load i8*, i8** %p, align 8
  %67 = load i8, i8* %66, align 1
  %conv103 = zext i8 %67 to i32
  %cmp104 = icmp eq i32 %conv103, 13
  br i1 %cmp104, label %if.then.106, label %if.end.109

if.then.106:                                      ; preds = %for.body.102
  %68 = load i8*, i8** %p, align 8
  %69 = load i8*, i8** %p, align 8
  %add.ptr107 = getelementptr inbounds i8, i8* %69, i64 1
  %70 = load i8*, i8** %pend, align 8
  %incdec.ptr108 = getelementptr inbounds i8, i8* %70, i32 -1
  store i8* %incdec.ptr108, i8** %pend, align 8
  %71 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %71 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %68, i8* %add.ptr107, i64 %sub, i32 1, i1 false)
  %72 = load i64, i64* %n, align 8
  %inc = add nsw i64 %72, 1
  store i64 %inc, i64* %n, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.106, %for.body.102
  br label %for.inc.110

for.inc.110:                                      ; preds = %if.end.109
  %73 = load i8*, i8** %p, align 8
  %incdec.ptr111 = getelementptr inbounds i8, i8* %73, i32 -1
  store i8* %incdec.ptr111, i8** %p, align 8
  br label %for.cond.99

for.end.112:                                      ; preds = %for.cond.99
  br label %if.end.180

if.else.113:                                      ; preds = %if.then.92
  %74 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %74, i32 0, i32 18
  %75 = load i64, i64* %dst_pos, align 8
  store i64 %75, i64* %pos, align 8
  %76 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_pos_byte114 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %76, i32 0, i32 19
  %77 = load i64, i64* %dst_pos_byte114, align 8
  store i64 %77, i64* %pos_byte, align 8
  %78 = load i64, i64* %pos_byte, align 8
  %79 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced115 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %79, i32 0, i32 8
  %80 = load i64, i64* %produced115, align 8
  %add116 = add nsw i64 %78, %80
  %sub117 = sub nsw i64 %add116, 1
  store i64 %sub117, i64* %pos_end, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.179, %if.else.113
  %81 = load i64, i64* %pos_byte, align 8
  %82 = load i64, i64* %pos_end, align 8
  %cmp118 = icmp slt i64 %81, %82
  br i1 %cmp118, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %83 = load i64, i64* %pos_byte, align 8
  %84 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text120 = getelementptr inbounds %struct.buffer, %struct.buffer* %84, i32 0, i32 73
  %85 = load %struct.buffer_text*, %struct.buffer_text** %text120, align 8
  %gpt_byte121 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %85, i32 0, i32 3
  %86 = load i64, i64* %gpt_byte121, align 8
  %cmp122 = icmp sge i64 %83, %86
  br i1 %cmp122, label %cond.true.124, label %cond.false.127

cond.true.124:                                    ; preds = %while.body
  %87 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text125 = getelementptr inbounds %struct.buffer, %struct.buffer* %87, i32 0, i32 73
  %88 = load %struct.buffer_text*, %struct.buffer_text** %text125, align 8
  %gap_size126 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %88, i32 0, i32 5
  %89 = load i64, i64* %gap_size126, align 8
  br label %cond.end.128

cond.false.127:                                   ; preds = %while.body
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.127, %cond.true.124
  %cond129 = phi i64 [ %89, %cond.true.124 ], [ 0, %cond.false.127 ]
  %90 = load i64, i64* %pos_byte, align 8
  %add130 = add nsw i64 %cond129, %90
  %91 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text131 = getelementptr inbounds %struct.buffer, %struct.buffer* %91, i32 0, i32 73
  %92 = load %struct.buffer_text*, %struct.buffer_text** %text131, align 8
  %beg132 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %92, i32 0, i32 0
  %93 = load i8*, i8** %beg132, align 8
  %add.ptr133 = getelementptr inbounds i8, i8* %93, i64 %add130
  %add.ptr134 = getelementptr inbounds i8, i8* %add.ptr133, i64 -1
  store i8* %add.ptr134, i8** %p, align 8
  %94 = load i8*, i8** %p, align 8
  %95 = load i8, i8* %94, align 1
  %conv135 = zext i8 %95 to i32
  %cmp136 = icmp eq i32 %conv135, 13
  br i1 %cmp136, label %land.lhs.true.138, label %if.end.147

land.lhs.true.138:                                ; preds = %cond.end.128
  %96 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %96, i64 1
  %97 = load i8, i8* %arrayidx, align 1
  %conv139 = zext i8 %97 to i32
  %cmp140 = icmp eq i32 %conv139, 10
  br i1 %cmp140, label %if.then.142, label %if.end.147

if.then.142:                                      ; preds = %land.lhs.true.138
  %98 = load i64, i64* %pos, align 8
  %99 = load i64, i64* %pos_byte, align 8
  %100 = load i64, i64* %pos, align 8
  %add143 = add nsw i64 %100, 1
  %101 = load i64, i64* %pos_byte, align 8
  %add144 = add nsw i64 %101, 1
  %call145 = call i64 @del_range_2(i64 %98, i64 %99, i64 %add143, i64 %add144, i1 zeroext false)
  %102 = load i64, i64* %n, align 8
  %inc146 = add nsw i64 %102, 1
  store i64 %inc146, i64* %n, align 8
  %103 = load i64, i64* %pos_end, align 8
  %dec = add nsw i64 %103, -1
  store i64 %dec, i64* %pos_end, align 8
  br label %if.end.147

if.end.147:                                       ; preds = %if.then.142, %land.lhs.true.138, %cond.end.128
  %104 = load i64, i64* %pos, align 8
  %inc148 = add nsw i64 %104, 1
  store i64 %inc148, i64* %pos, align 8
  %105 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %105, i32 0, i32 1
  %bf.load = load i32, i32* %dst_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 20
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  br i1 %bf.cast, label %if.then.149, label %if.else.177

if.then.149:                                      ; preds = %if.end.147
  %106 = load i8*, i8** %p, align 8
  %107 = load i8, i8* %106, align 1
  %conv150 = zext i8 %107 to i32
  %and151 = and i32 %conv150, 128
  %tobool152 = icmp ne i32 %and151, 0
  br i1 %tobool152, label %cond.false.154, label %cond.true.153

cond.true.153:                                    ; preds = %if.then.149
  br label %cond.end.173

cond.false.154:                                   ; preds = %if.then.149
  %108 = load i8*, i8** %p, align 8
  %109 = load i8, i8* %108, align 1
  %conv155 = zext i8 %109 to i32
  %and156 = and i32 %conv155, 32
  %tobool157 = icmp ne i32 %and156, 0
  br i1 %tobool157, label %cond.false.159, label %cond.true.158

cond.true.158:                                    ; preds = %cond.false.154
  br label %cond.end.171

cond.false.159:                                   ; preds = %cond.false.154
  %110 = load i8*, i8** %p, align 8
  %111 = load i8, i8* %110, align 1
  %conv160 = zext i8 %111 to i32
  %and161 = and i32 %conv160, 16
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %cond.false.164, label %cond.true.163

cond.true.163:                                    ; preds = %cond.false.159
  br label %cond.end.169

cond.false.164:                                   ; preds = %cond.false.159
  %112 = load i8*, i8** %p, align 8
  %113 = load i8, i8* %112, align 1
  %conv165 = zext i8 %113 to i32
  %and166 = and i32 %conv165, 8
  %tobool167 = icmp ne i32 %and166, 0
  %lnot = xor i1 %tobool167, true
  %cond168 = select i1 %lnot, i32 4, i32 5
  br label %cond.end.169

cond.end.169:                                     ; preds = %cond.false.164, %cond.true.163
  %cond170 = phi i32 [ 3, %cond.true.163 ], [ %cond168, %cond.false.164 ]
  br label %cond.end.171

cond.end.171:                                     ; preds = %cond.end.169, %cond.true.158
  %cond172 = phi i32 [ 2, %cond.true.158 ], [ %cond170, %cond.end.169 ]
  br label %cond.end.173

cond.end.173:                                     ; preds = %cond.end.171, %cond.true.153
  %cond174 = phi i32 [ 1, %cond.true.153 ], [ %cond172, %cond.end.171 ]
  %conv175 = sext i32 %cond174 to i64
  %114 = load i64, i64* %pos_byte, align 8
  %add176 = add nsw i64 %114, %conv175
  store i64 %add176, i64* %pos_byte, align 8
  br label %if.end.179

if.else.177:                                      ; preds = %if.end.147
  %115 = load i64, i64* %pos_byte, align 8
  %inc178 = add nsw i64 %115, 1
  store i64 %inc178, i64* %pos_byte, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.else.177, %cond.end.173
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.180

if.end.180:                                       ; preds = %while.end, %for.end.112
  %116 = load i64, i64* %n, align 8
  %117 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced181 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %117, i32 0, i32 8
  %118 = load i64, i64* %produced181, align 8
  %sub182 = sub nsw i64 %118, %116
  store i64 %sub182, i64* %produced181, align 8
  %119 = load i64, i64* %n, align 8
  %120 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %120, i32 0, i32 9
  %121 = load i64, i64* %produced_char, align 8
  %sub183 = sub nsw i64 %121, %119
  store i64 %sub183, i64* %produced_char, align 8
  br label %if.end.184

if.end.184:                                       ; preds = %if.end.180, %if.else.88
  br label %if.end.185

if.end.185:                                       ; preds = %if.then, %if.end.184, %for.end.87
  ret void
}

declare void @record_insert(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @get_translation(i64 %trans, i32* %buf, i32* %buf_end) #0 {
entry:
  %retval = alloca i64, align 8
  %trans.addr = alloca i64, align 8
  %buf.addr = alloca i32*, align 8
  %buf_end.addr = alloca i32*, align 8
  %val = alloca i64, align 8
  %from = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  store i64 %trans, i64* %trans.addr, align 8
  store i32* %buf, i32** %buf.addr, align 8
  store i32* %buf_end, i32** %buf_end.addr, align 8
  %0 = load i64, i64* %trans.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %trans.addr, align 8
  store i64 %1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc.28, %if.end
  %2 = load i64, i64* %trans.addr, align 8
  %and3 = and i64 %2, 7
  %conv4 = trunc i64 %and3 to i32
  %cmp5 = icmp eq i32 %conv4, 3
  br i1 %cmp5, label %for.body, label %for.end.30

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %trans.addr, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %val, align 8
  %7 = load i64, i64* %val, align 8
  %sub7 = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub7 to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car8 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car8, align 8
  store i64 %10, i64* %from, align 8
  %11 = load i64, i64* %from, align 8
  %call = call i64 @ASIZE(i64 %11)
  store i64 %call, i64* %len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body
  %12 = load i64, i64* %i, align 8
  %13 = load i64, i64* %len, align 8
  %cmp10 = icmp slt i64 %12, %13
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %14 = load i32*, i32** %buf.addr, align 8
  %15 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds i32, i32* %14, i64 %15
  %16 = load i32*, i32** %buf_end.addr, align 8
  %cmp13 = icmp eq i32* %add.ptr, %16
  br i1 %cmp13, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %for.body.12
  %call16 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call16, i64* %retval
  br label %return

if.end.17:                                        ; preds = %for.body.12
  %17 = load i64, i64* %from, align 8
  %18 = load i64, i64* %i, align 8
  %call18 = call i64 @AREF(i64 %17, i64 %18)
  %shr = ashr i64 %call18, 2
  %19 = load i64, i64* %i, align 8
  %20 = load i32*, i32** %buf.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %20, i64 %19
  %21 = load i32, i32* %arrayidx, align 4
  %conv19 = sext i32 %21 to i64
  %cmp20 = icmp ne i64 %shr, %conv19
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.17
  br label %for.end

if.end.23:                                        ; preds = %if.end.17
  br label %for.inc

for.inc:                                          ; preds = %if.end.23
  %22 = load i64, i64* %i, align 8
  %inc = add nsw i64 %22, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond.9

for.end:                                          ; preds = %if.then.22, %for.cond.9
  %23 = load i64, i64* %i, align 8
  %24 = load i64, i64* %len, align 8
  %cmp24 = icmp eq i64 %23, %24
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %for.end
  %25 = load i64, i64* %val, align 8
  store i64 %25, i64* %retval
  br label %return

if.end.27:                                        ; preds = %for.end
  br label %for.inc.28

for.inc.28:                                       ; preds = %if.end.27
  %26 = load i64, i64* %trans.addr, align 8
  %sub29 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub29 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %29 = load i64, i64* %cdr, align 8
  store i64 %29, i64* %trans.addr, align 8
  br label %for.cond

for.end.30:                                       ; preds = %for.cond
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call31, i64* %retval
  br label %return

return:                                           ; preds = %for.end.30, %if.then.26, %if.then.15, %if.then
  %30 = load i64, i64* %retval
  ret i64 %30
}

declare i64 @ASIZE(i64) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #2

; Function Attrs: nounwind uwtable
define internal void @produce_composition(%struct.coding_system* %coding, i32* %charbuf, i64 %pos) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %charbuf.addr = alloca i32*, align 8
  %pos.addr = alloca i64, align 8
  %len = alloca i32, align 4
  %to = alloca i64, align 8
  %method = alloca i32, align 4
  %components = alloca i64, align 8
  %args = alloca [31 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i32* %charbuf, i32** %charbuf.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 0
  %1 = load i32, i32* %arrayidx, align 4
  %sub = sub nsw i32 0, %1
  %sub1 = sub nsw i32 %sub, 5
  store i32 %sub1, i32* %len, align 4
  %2 = load i64, i64* %pos.addr, align 8
  %3 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %3, i64 2
  %4 = load i32, i32* %arrayidx2, align 4
  %conv = sext i32 %4 to i64
  %add = add nsw i64 %2, %conv
  store i64 %add, i64* %to, align 8
  %5 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 4
  %6 = load i32, i32* %arrayidx3, align 4
  store i32 %6, i32* %method, align 4
  %7 = load i32, i32* %method, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %components, align 8
  br label %if.end.44

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %method, align 4
  %cmp5 = icmp eq i32 %8, 1
  br i1 %cmp5, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.else
  %9 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 2
  %10 = load i32, i32* %arrayidx8, align 4
  %mul = mul nsw i32 %10, 3
  %sub9 = sub nsw i32 %mul, 2
  store i32 %sub9, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.else
  %11 = load i32*, i32** %charbuf.addr, align 8
  %add.ptr = getelementptr inbounds i32, i32* %11, i64 5
  store i32* %add.ptr, i32** %charbuf.addr, align 8
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %len, align 4
  %cmp10 = icmp slt i32 %12, %13
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %14 = load i32, i32* %i, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %15, i64 %idxprom
  %16 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp ne i32 %16, -1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %17 = phi i1 [ false, %for.cond ], [ %cmp13, %land.rhs ]
  br i1 %17, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %18 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %18 to i64
  %19 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx16 = getelementptr inbounds i32, i32* %19, i64 %idxprom15
  %20 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sge i32 %20, 0
  br i1 %cmp17, label %if.then.19, label %if.else.26

if.then.19:                                       ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %21 to i64
  %22 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx21 = getelementptr inbounds i32, i32* %22, i64 %idxprom20
  %23 = load i32, i32* %arrayidx21, align 4
  %conv22 = sext i32 %23 to i64
  %shl = shl i64 %conv22, 2
  %add23 = add i64 %shl, 2
  %24 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [31 x i64], [31 x i64]* %args, i32 0, i64 %idxprom24
  store i64 %add23, i64* %arrayidx25, align 8
  br label %if.end.34

if.else.26:                                       ; preds = %for.body
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  %26 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %26 to i64
  %27 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx28 = getelementptr inbounds i32, i32* %27, i64 %idxprom27
  %28 = load i32, i32* %arrayidx28, align 4
  %rem = srem i32 %28, 256
  %conv29 = sext i32 %rem to i64
  %shl30 = shl i64 %conv29, 2
  %add31 = add i64 %shl30, 2
  %29 = load i32, i32* %j, align 4
  %idxprom32 = sext i32 %29 to i64
  %arrayidx33 = getelementptr inbounds [31 x i64], [31 x i64]* %args, i32 0, i64 %idxprom32
  store i64 %add31, i64* %arrayidx33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.26, %if.then.19
  br label %for.inc

for.inc:                                          ; preds = %if.end.34
  %30 = load i32, i32* %i, align 4
  %inc35 = add nsw i32 %30, 1
  store i32 %inc35, i32* %i, align 4
  %31 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %31, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %32 = load i32, i32* %i, align 4
  %33 = load i32, i32* %j, align 4
  %cmp37 = icmp eq i32 %32, %33
  br i1 %cmp37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %34 = load i32, i32* %j, align 4
  %conv39 = sext i32 %34 to i64
  %arraydecay = getelementptr inbounds [31 x i64], [31 x i64]* %args, i32 0, i32 0
  %call40 = call i64 @Fstring(i64 %conv39, i64* %arraydecay)
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %35 = load i32, i32* %j, align 4
  %conv41 = sext i32 %35 to i64
  %arraydecay42 = getelementptr inbounds [31 x i64], [31 x i64]* %args, i32 0, i32 0
  %call43 = call i64 @Fvector(i64 %conv41, i64* %arraydecay42)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call40, %cond.true ], [ %call43, %cond.false ]
  store i64 %cond, i64* %components, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %cond.end, %if.then
  %36 = load i64, i64* %pos.addr, align 8
  %37 = load i64, i64* %to, align 8
  %38 = load i64, i64* %components, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 0)
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %39, i32 0, i32 21
  %40 = load i64, i64* %dst_object, align 8
  call void @compose_text(i64 %36, i64 %37, i64 %38, i64 %call45, i64 %40)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @produce_charset(%struct.coding_system* %coding, i32* %charbuf, i64 %pos) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %charbuf.addr = alloca i32*, align 8
  %pos.addr = alloca i64, align 8
  %from = alloca i64, align 8
  %charset = alloca %struct.charset*, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i32* %charbuf, i32** %charbuf.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load i64, i64* %pos.addr, align 8
  %1 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 2
  %2 = load i32, i32* %arrayidx, align 4
  %conv = sext i32 %2 to i64
  %sub = sub nsw i64 %0, %conv
  store i64 %sub, i64* %from, align 8
  %3 = load %struct.charset*, %struct.charset** @charset_table, align 8
  %4 = load i32*, i32** %charbuf.addr, align 8
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i64 3
  %5 = load i32, i32* %arrayidx1, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds %struct.charset, %struct.charset* %3, i64 %idx.ext
  store %struct.charset* %add.ptr, %struct.charset** %charset, align 8
  %6 = load i64, i64* %from, align 8
  %shl = shl i64 %6, 2
  %add = add i64 %shl, 2
  %7 = load i64, i64* %pos.addr, align 8
  %shl2 = shl i64 %7, 2
  %add3 = add i64 %shl2, 2
  %call = call i64 @builtin_lisp_symbol(i32 261)
  %8 = load i64, i64* @Vcharset_hash_table, align 8
  %call4 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %8)
  %9 = load %struct.charset*, %struct.charset** %charset, align 8
  %hash_index = getelementptr inbounds %struct.charset, %struct.charset* %9, i32 0, i32 1
  %10 = load i64, i64* %hash_index, align 8
  %call5 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call4, i64 %10)
  %call6 = call i64 @AREF(i64 %call5, i64 1)
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 21
  %12 = load i64, i64* %dst_object, align 8
  %call7 = call i64 @Fput_text_property(i64 %add, i64 %add3, i64 %call, i64 %call6, i64 %12)
  ret void
}

declare i64 @Fstring(i64, i64*) #1

declare i64 @Fvector(i64, i64*) #1

declare void @compose_text(i64, i64, i64, i64, i64) #1

declare i64 @Fput_text_property(i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

declare i64 @del_range_2(i64, i64, i64, i64, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define internal void @consume_chars(%struct.coding_system* %coding, i64 %translation_table, i32 %max_lookup) #0 {
entry:
  %coding.addr = alloca %struct.coding_system*, align 8
  %translation_table.addr = alloca i64, align 8
  %max_lookup.addr = alloca i32, align 4
  %buf = alloca i32*, align 8
  %buf_end = alloca i32*, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %pos = alloca i64, align 8
  %end_pos = alloca i64, align 8
  %multibytep = alloca i8, align 1
  %eol_type = alloca i64, align 8
  %c = alloca i32, align 4
  %stop = alloca i64, align 8
  %stop_composition = alloca i64, align 8
  %stop_charset = alloca i64, align 8
  %lookup_buf = alloca i32*, align 8
  %trans = alloca i64, align 8
  %bytes = alloca i32, align 4
  %tail = alloca i64, align 8
  %from_nchars = alloca i64, align 8
  %to_nchars = alloca i64, align 8
  %lookup_buf_end = alloca i32*, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i64 %translation_table, i64* %translation_table.addr, align 8
  store i32 %max_lookup, i32* %max_lookup.addr, align 4
  %0 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf = getelementptr inbounds %struct.coding_system, %struct.coding_system* %0, i32 0, i32 23
  %1 = load i32*, i32** %charbuf, align 8
  store i32* %1, i32** %buf, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf1 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 23
  %3 = load i32*, i32** %charbuf1, align 8
  %4 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_size = getelementptr inbounds %struct.coding_system, %struct.coding_system* %4, i32 0, i32 24
  %5 = load i32, i32* %charbuf_size, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %idx.ext
  store i32* %add.ptr, i32** %buf_end, align 8
  %6 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %6, i32 0, i32 17
  %7 = load i8*, i8** %source, align 8
  %8 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed = getelementptr inbounds %struct.coding_system, %struct.coding_system* %8, i32 0, i32 10
  %9 = load i64, i64* %consumed, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 %9
  store i8* %add.ptr2, i8** %src, align 8
  %10 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source3 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %10, i32 0, i32 17
  %11 = load i8*, i8** %source3, align 8
  %12 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %12, i32 0, i32 15
  %13 = load i64, i64* %src_bytes, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8* %add.ptr4, i8** %src_end, align 8
  %14 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos = getelementptr inbounds %struct.coding_system, %struct.coding_system* %14, i32 0, i32 12
  %15 = load i64, i64* %src_pos, align 8
  %16 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %16, i32 0, i32 11
  %17 = load i64, i64* %consumed_char, align 8
  %add = add nsw i64 %15, %17
  store i64 %add, i64* %pos, align 8
  %18 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos5 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %18, i32 0, i32 12
  %19 = load i64, i64* %src_pos5, align 8
  %20 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %20, i32 0, i32 14
  %21 = load i64, i64* %src_chars, align 8
  %add6 = add nsw i64 %19, %21
  store i64 %add6, i64* %end_pos, align 8
  %22 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %22, i32 0, i32 1
  %bf.load = load i32, i32* %src_multibyte, align 8
  %bf.lshr = lshr i32 %bf.load, 19
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %multibytep, align 1
  store i32* null, i32** %lookup_buf, align 8
  %23 = load i64, i64* %translation_table.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %23, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %24 = load i32, i32* %max_lookup.addr, align 4
  %conv = sext i32 %24 to i64
  %mul = mul i64 4, %conv
  %25 = alloca i8, i64 %mul
  %26 = bitcast i8* %25 to i32*
  store i32* %26, i32** %lookup_buf, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %27 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 449), align 1
  %tobool = trunc i8 %27 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call8 = call i64 @builtin_lisp_symbol(i32 973)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %28 = load i64, i64* @Vcoding_system_hash_table, align 8
  %call9 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %28)
  %29 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %id = getelementptr inbounds %struct.coding_system, %struct.coding_system* %29, i32 0, i32 0
  %30 = load i64, i64* %id, align 8
  %call10 = call i64 @HASH_VALUE(%struct.Lisp_Hash_Table* %call9, i64 %30)
  %call11 = call i64 @AREF(i64 %call10, i64 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call8, %cond.true ], [ %call11, %cond.false ]
  store i64 %cond, i64* %eol_type, align 8
  %31 = load i64, i64* %eol_type, align 8
  %call12 = call zeroext i1 @VECTORP(i64 %31)
  br i1 %call12, label %if.then.13, label %if.end.15

if.then.13:                                       ; preds = %cond.end
  %call14 = call i64 @builtin_lisp_symbol(i32 973)
  store i64 %call14, i64* %eol_type, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.13, %cond.end
  %32 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %32, i32 0, i32 1
  %bf.load16 = load i32, i32* %common_flags, align 8
  %bf.clear17 = and i32 %bf.load16, 16383
  %and = and i32 %bf.clear17, -2
  %bf.load18 = load i32, i32* %common_flags, align 8
  %bf.value = and i32 %and, 16383
  %bf.clear19 = and i32 %bf.load18, -16384
  %bf.set = or i32 %bf.clear19, %bf.value
  store i32 %bf.set, i32* %common_flags, align 8
  %33 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %33, i32 0, i32 16
  %34 = load i64, i64* %src_object, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp21 = icmp eq i64 %34, %call20
  br i1 %cmp21, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %if.end.15
  %35 = load i64, i64* %end_pos, align 8
  store i64 %35, i64* %stop_charset, align 8
  store i64 %35, i64* %stop_composition, align 8
  store i64 %35, i64* %stop, align 8
  br label %if.end.40

if.else:                                          ; preds = %if.end.15
  %36 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags24 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %36, i32 0, i32 1
  %bf.load25 = load i32, i32* %common_flags24, align 8
  %bf.clear26 = and i32 %bf.load25, 16383
  %and27 = and i32 %bf.clear26, 1
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %if.else
  %37 = load i64, i64* %pos, align 8
  store i64 %37, i64* %stop_composition, align 8
  store i64 %37, i64* %stop, align 8
  br label %if.end.31

if.else.30:                                       ; preds = %if.else
  %38 = load i64, i64* %end_pos, align 8
  store i64 %38, i64* %stop_composition, align 8
  store i64 %38, i64* %stop, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.30, %if.then.29
  %39 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %common_flags32 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %39, i32 0, i32 1
  %bf.load33 = load i32, i32* %common_flags32, align 8
  %bf.clear34 = and i32 %bf.load33, 16383
  %and35 = and i32 %bf.clear34, 3
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %if.end.31
  %40 = load i64, i64* %pos, align 8
  store i64 %40, i64* %stop_charset, align 8
  store i64 %40, i64* %stop, align 8
  br label %if.end.39

if.else.38:                                       ; preds = %if.end.31
  %41 = load i64, i64* %end_pos, align 8
  store i64 %41, i64* %stop_charset, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.38, %if.then.37
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.then.23
  %42 = load i32*, i32** %buf_end, align 8
  %add.ptr41 = getelementptr inbounds i32, i32* %42, i64 -6
  store i32* %add.ptr41, i32** %buf_end, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.608, %if.end.40
  %43 = load i32*, i32** %buf, align 8
  %44 = load i32*, i32** %buf_end, align 8
  %cmp42 = icmp ult i32* %43, %44
  br i1 %cmp42, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %45 = load i64, i64* %pos, align 8
  %46 = load i64, i64* %stop, align 8
  %cmp44 = icmp eq i64 %45, %46
  br i1 %cmp44, label %if.then.46, label %if.end.67

if.then.46:                                       ; preds = %while.body
  %47 = load i64, i64* %pos, align 8
  %48 = load i64, i64* %end_pos, align 8
  %cmp47 = icmp eq i64 %47, %48
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.then.46
  br label %while.end

if.end.50:                                        ; preds = %if.then.46
  %49 = load i64, i64* %pos, align 8
  %50 = load i64, i64* %stop_composition, align 8
  %cmp51 = icmp eq i64 %49, %50
  br i1 %cmp51, label %if.then.53, label %if.end.55

if.then.53:                                       ; preds = %if.end.50
  %51 = load i64, i64* %pos, align 8
  %52 = load i64, i64* %end_pos, align 8
  %53 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %54 = load i32*, i32** %buf, align 8
  %call54 = call i32* @handle_composition_annotation(i64 %51, i64 %52, %struct.coding_system* %53, i32* %54, i64* %stop_composition)
  store i32* %call54, i32** %buf, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.53, %if.end.50
  %55 = load i64, i64* %pos, align 8
  %56 = load i64, i64* %stop_charset, align 8
  %cmp56 = icmp eq i64 %55, %56
  br i1 %cmp56, label %if.then.58, label %if.end.60

if.then.58:                                       ; preds = %if.end.55
  %57 = load i64, i64* %pos, align 8
  %58 = load i64, i64* %end_pos, align 8
  %59 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %60 = load i32*, i32** %buf, align 8
  %call59 = call i32* @handle_charset_annotation(i64 %57, i64 %58, %struct.coding_system* %59, i32* %60, i64* %stop_charset)
  store i32* %call59, i32** %buf, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %if.end.55
  %61 = load i64, i64* %stop_composition, align 8
  %62 = load i64, i64* %stop_charset, align 8
  %cmp61 = icmp slt i64 %61, %62
  br i1 %cmp61, label %cond.true.63, label %cond.false.64

cond.true.63:                                     ; preds = %if.end.60
  %63 = load i64, i64* %stop_composition, align 8
  br label %cond.end.65

cond.false.64:                                    ; preds = %if.end.60
  %64 = load i64, i64* %stop_charset, align 8
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.63
  %cond66 = phi i64 [ %63, %cond.true.63 ], [ %64, %cond.false.64 ]
  store i64 %cond66, i64* %stop, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %cond.end.65, %while.body
  %65 = load i8, i8* %multibytep, align 1
  %tobool68 = trunc i8 %65 to i1
  br i1 %tobool68, label %if.else.246, label %if.then.69

if.then.69:                                       ; preds = %if.end.67
  %66 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder = getelementptr inbounds %struct.coding_system, %struct.coding_system* %66, i32 0, i32 31
  %67 = load i1 (%struct.coding_system*)*, i1 (%struct.coding_system*)** %encoder, align 8
  %cmp70 = icmp eq i1 (%struct.coding_system*)* %67, @encode_coding_raw_text
  br i1 %cmp70, label %if.then.75, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.69
  %68 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %encoder72 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %68, i32 0, i32 31
  %69 = load i1 (%struct.coding_system*)*, i1 (%struct.coding_system*)** %encoder72, align 8
  %cmp73 = icmp eq i1 (%struct.coding_system*)* %69, @encode_coding_ccl
  br i1 %cmp73, label %if.then.75, label %if.else.77

if.then.75:                                       ; preds = %lor.lhs.false, %if.then.69
  %70 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %71 = load i8, i8* %70, align 1
  %conv76 = zext i8 %71 to i32
  store i32 %conv76, i32* %c, align 4
  %72 = load i64, i64* %pos, align 8
  %inc = add nsw i64 %72, 1
  store i64 %inc, i64* %pos, align 8
  br label %if.end.245

if.else.77:                                       ; preds = %lor.lhs.false
  %73 = load i8*, i8** %src, align 8
  %74 = load i8*, i8** %src_end, align 8
  %cmp78 = icmp uge i8* %73, %74
  br i1 %cmp78, label %cond.true.80, label %cond.false.81

cond.true.80:                                     ; preds = %if.else.77
  br label %cond.end.178

cond.false.81:                                    ; preds = %if.else.77
  %75 = load i8*, i8** %src, align 8
  %arrayidx = getelementptr inbounds i8, i8* %75, i64 0
  %76 = load i8, i8* %arrayidx, align 1
  %conv82 = zext i8 %76 to i32
  %and83 = and i32 %conv82, 128
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %cond.false.86, label %cond.true.85

cond.true.85:                                     ; preds = %cond.false.81
  br label %cond.end.176

cond.false.86:                                    ; preds = %cond.false.81
  %77 = load i8*, i8** %src, align 8
  %add.ptr87 = getelementptr inbounds i8, i8* %77, i64 1
  %78 = load i8*, i8** %src_end, align 8
  %cmp88 = icmp uge i8* %add.ptr87, %78
  br i1 %cmp88, label %cond.true.96, label %lor.lhs.false.90

lor.lhs.false.90:                                 ; preds = %cond.false.86
  %79 = load i8*, i8** %src, align 8
  %arrayidx91 = getelementptr inbounds i8, i8* %79, i64 1
  %80 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %80 to i32
  %and93 = and i32 %conv92, 192
  %cmp94 = icmp ne i32 %and93, 128
  br i1 %cmp94, label %cond.true.96, label %cond.false.97

cond.true.96:                                     ; preds = %lor.lhs.false.90, %cond.false.86
  br label %cond.end.174

cond.false.97:                                    ; preds = %lor.lhs.false.90
  %81 = load i8*, i8** %src, align 8
  %arrayidx98 = getelementptr inbounds i8, i8* %81, i64 0
  %82 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %82 to i32
  %and100 = and i32 %conv99, 224
  %cmp101 = icmp eq i32 %and100, 192
  br i1 %cmp101, label %cond.true.103, label %cond.false.104

cond.true.103:                                    ; preds = %cond.false.97
  br label %cond.end.172

cond.false.104:                                   ; preds = %cond.false.97
  %83 = load i8*, i8** %src, align 8
  %add.ptr105 = getelementptr inbounds i8, i8* %83, i64 2
  %84 = load i8*, i8** %src_end, align 8
  %cmp106 = icmp uge i8* %add.ptr105, %84
  br i1 %cmp106, label %cond.true.114, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %cond.false.104
  %85 = load i8*, i8** %src, align 8
  %arrayidx109 = getelementptr inbounds i8, i8* %85, i64 2
  %86 = load i8, i8* %arrayidx109, align 1
  %conv110 = zext i8 %86 to i32
  %and111 = and i32 %conv110, 192
  %cmp112 = icmp ne i32 %and111, 128
  br i1 %cmp112, label %cond.true.114, label %cond.false.115

cond.true.114:                                    ; preds = %lor.lhs.false.108, %cond.false.104
  br label %cond.end.170

cond.false.115:                                   ; preds = %lor.lhs.false.108
  %87 = load i8*, i8** %src, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %87, i64 0
  %88 = load i8, i8* %arrayidx116, align 1
  %conv117 = zext i8 %88 to i32
  %and118 = and i32 %conv117, 240
  %cmp119 = icmp eq i32 %and118, 224
  br i1 %cmp119, label %cond.true.121, label %cond.false.122

cond.true.121:                                    ; preds = %cond.false.115
  br label %cond.end.168

cond.false.122:                                   ; preds = %cond.false.115
  %89 = load i8*, i8** %src, align 8
  %add.ptr123 = getelementptr inbounds i8, i8* %89, i64 3
  %90 = load i8*, i8** %src_end, align 8
  %cmp124 = icmp uge i8* %add.ptr123, %90
  br i1 %cmp124, label %cond.true.132, label %lor.lhs.false.126

lor.lhs.false.126:                                ; preds = %cond.false.122
  %91 = load i8*, i8** %src, align 8
  %arrayidx127 = getelementptr inbounds i8, i8* %91, i64 3
  %92 = load i8, i8* %arrayidx127, align 1
  %conv128 = zext i8 %92 to i32
  %and129 = and i32 %conv128, 192
  %cmp130 = icmp ne i32 %and129, 128
  br i1 %cmp130, label %cond.true.132, label %cond.false.133

cond.true.132:                                    ; preds = %lor.lhs.false.126, %cond.false.122
  br label %cond.end.166

cond.false.133:                                   ; preds = %lor.lhs.false.126
  %93 = load i8*, i8** %src, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %93, i64 0
  %94 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %94 to i32
  %and136 = and i32 %conv135, 248
  %cmp137 = icmp eq i32 %and136, 240
  br i1 %cmp137, label %cond.true.139, label %cond.false.140

cond.true.139:                                    ; preds = %cond.false.133
  br label %cond.end.164

cond.false.140:                                   ; preds = %cond.false.133
  %95 = load i8*, i8** %src, align 8
  %add.ptr141 = getelementptr inbounds i8, i8* %95, i64 4
  %96 = load i8*, i8** %src_end, align 8
  %cmp142 = icmp uge i8* %add.ptr141, %96
  br i1 %cmp142, label %cond.true.150, label %lor.lhs.false.144

lor.lhs.false.144:                                ; preds = %cond.false.140
  %97 = load i8*, i8** %src, align 8
  %arrayidx145 = getelementptr inbounds i8, i8* %97, i64 4
  %98 = load i8, i8* %arrayidx145, align 1
  %conv146 = zext i8 %98 to i32
  %and147 = and i32 %conv146, 192
  %cmp148 = icmp ne i32 %and147, 128
  br i1 %cmp148, label %cond.true.150, label %cond.false.151

cond.true.150:                                    ; preds = %lor.lhs.false.144, %cond.false.140
  br label %cond.end.162

cond.false.151:                                   ; preds = %lor.lhs.false.144
  %99 = load i8*, i8** %src, align 8
  %arrayidx152 = getelementptr inbounds i8, i8* %99, i64 0
  %100 = load i8, i8* %arrayidx152, align 1
  %conv153 = zext i8 %100 to i32
  %cmp154 = icmp eq i32 %conv153, 248
  br i1 %cmp154, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false.151
  %101 = load i8*, i8** %src, align 8
  %arrayidx156 = getelementptr inbounds i8, i8* %101, i64 1
  %102 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %102 to i32
  %and158 = and i32 %conv157, 240
  %cmp159 = icmp eq i32 %and158, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false.151
  %103 = phi i1 [ false, %cond.false.151 ], [ %cmp159, %land.rhs ]
  %cond161 = select i1 %103, i32 5, i32 0
  br label %cond.end.162

cond.end.162:                                     ; preds = %land.end, %cond.true.150
  %cond163 = phi i32 [ 0, %cond.true.150 ], [ %cond161, %land.end ]
  br label %cond.end.164

cond.end.164:                                     ; preds = %cond.end.162, %cond.true.139
  %cond165 = phi i32 [ 4, %cond.true.139 ], [ %cond163, %cond.end.162 ]
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.end.164, %cond.true.132
  %cond167 = phi i32 [ 0, %cond.true.132 ], [ %cond165, %cond.end.164 ]
  br label %cond.end.168

cond.end.168:                                     ; preds = %cond.end.166, %cond.true.121
  %cond169 = phi i32 [ 3, %cond.true.121 ], [ %cond167, %cond.end.166 ]
  br label %cond.end.170

cond.end.170:                                     ; preds = %cond.end.168, %cond.true.114
  %cond171 = phi i32 [ 0, %cond.true.114 ], [ %cond169, %cond.end.168 ]
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.end.170, %cond.true.103
  %cond173 = phi i32 [ 2, %cond.true.103 ], [ %cond171, %cond.end.170 ]
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.end.172, %cond.true.96
  %cond175 = phi i32 [ 0, %cond.true.96 ], [ %cond173, %cond.end.172 ]
  br label %cond.end.176

cond.end.176:                                     ; preds = %cond.end.174, %cond.true.85
  %cond177 = phi i32 [ 1, %cond.true.85 ], [ %cond175, %cond.end.174 ]
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.end.176, %cond.true.80
  %cond179 = phi i32 [ 0, %cond.true.80 ], [ %cond177, %cond.end.176 ]
  store i32 %cond179, i32* %bytes, align 4
  %cmp180 = icmp sgt i32 %cond179, 0
  br i1 %cmp180, label %if.then.182, label %if.else.239

if.then.182:                                      ; preds = %cond.end.178
  %104 = load i8*, i8** %src, align 8
  %arrayidx183 = getelementptr inbounds i8, i8* %104, i64 0
  %105 = load i8, i8* %arrayidx183, align 1
  %conv184 = zext i8 %105 to i32
  %and185 = and i32 %conv184, 128
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %cond.false.190, label %cond.true.187

cond.true.187:                                    ; preds = %if.then.182
  %106 = load i8*, i8** %src, align 8
  %incdec.ptr188 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr188, i8** %src, align 8
  %107 = load i8, i8* %106, align 1
  %conv189 = zext i8 %107 to i32
  br label %cond.end.235

cond.false.190:                                   ; preds = %if.then.182
  %108 = load i8*, i8** %src, align 8
  %arrayidx191 = getelementptr inbounds i8, i8* %108, i64 0
  %109 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %109 to i32
  %and193 = and i32 %conv192, 32
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %cond.false.209, label %cond.true.195

cond.true.195:                                    ; preds = %cond.false.190
  %110 = load i8*, i8** %src, align 8
  %add.ptr196 = getelementptr inbounds i8, i8* %110, i64 2
  store i8* %add.ptr196, i8** %src, align 8
  %111 = load i8*, i8** %src, align 8
  %arrayidx197 = getelementptr inbounds i8, i8* %111, i64 -2
  %112 = load i8, i8* %arrayidx197, align 1
  %conv198 = zext i8 %112 to i32
  %and199 = and i32 %conv198, 31
  %shl = shl i32 %and199, 6
  %113 = load i8*, i8** %src, align 8
  %arrayidx200 = getelementptr inbounds i8, i8* %113, i64 -1
  %114 = load i8, i8* %arrayidx200, align 1
  %conv201 = zext i8 %114 to i32
  %and202 = and i32 %conv201, 63
  %or = or i32 %shl, %and202
  %115 = load i8*, i8** %src, align 8
  %arrayidx203 = getelementptr inbounds i8, i8* %115, i64 -2
  %116 = load i8, i8* %arrayidx203, align 1
  %conv204 = zext i8 %116 to i32
  %cmp205 = icmp slt i32 %conv204, 194
  %cond207 = select i1 %cmp205, i32 4194176, i32 0
  %or208 = or i32 %or, %cond207
  br label %cond.end.233

cond.false.209:                                   ; preds = %cond.false.190
  %117 = load i8*, i8** %src, align 8
  %arrayidx210 = getelementptr inbounds i8, i8* %117, i64 0
  %118 = load i8, i8* %arrayidx210, align 1
  %conv211 = zext i8 %118 to i32
  %and212 = and i32 %conv211, 16
  %tobool213 = icmp ne i32 %and212, 0
  br i1 %tobool213, label %cond.false.229, label %cond.true.214

cond.true.214:                                    ; preds = %cond.false.209
  %119 = load i8*, i8** %src, align 8
  %add.ptr215 = getelementptr inbounds i8, i8* %119, i64 3
  store i8* %add.ptr215, i8** %src, align 8
  %120 = load i8*, i8** %src, align 8
  %arrayidx216 = getelementptr inbounds i8, i8* %120, i64 -3
  %121 = load i8, i8* %arrayidx216, align 1
  %conv217 = zext i8 %121 to i32
  %and218 = and i32 %conv217, 15
  %shl219 = shl i32 %and218, 12
  %122 = load i8*, i8** %src, align 8
  %arrayidx220 = getelementptr inbounds i8, i8* %122, i64 -2
  %123 = load i8, i8* %arrayidx220, align 1
  %conv221 = zext i8 %123 to i32
  %and222 = and i32 %conv221, 63
  %shl223 = shl i32 %and222, 6
  %or224 = or i32 %shl219, %shl223
  %124 = load i8*, i8** %src, align 8
  %arrayidx225 = getelementptr inbounds i8, i8* %124, i64 -1
  %125 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %125 to i32
  %and227 = and i32 %conv226, 63
  %or228 = or i32 %or224, %and227
  br label %cond.end.231

cond.false.229:                                   ; preds = %cond.false.209
  %126 = load i8*, i8** %src, align 8
  %call230 = call i32 @string_char(i8* %126, i8** %src, i32* null)
  br label %cond.end.231

cond.end.231:                                     ; preds = %cond.false.229, %cond.true.214
  %cond232 = phi i32 [ %or228, %cond.true.214 ], [ %call230, %cond.false.229 ]
  br label %cond.end.233

cond.end.233:                                     ; preds = %cond.end.231, %cond.true.195
  %cond234 = phi i32 [ %or208, %cond.true.195 ], [ %cond232, %cond.end.231 ]
  br label %cond.end.235

cond.end.235:                                     ; preds = %cond.end.233, %cond.true.187
  %cond236 = phi i32 [ %conv189, %cond.true.187 ], [ %cond234, %cond.end.233 ]
  store i32 %cond236, i32* %c, align 4
  %127 = load i32, i32* %bytes, align 4
  %conv237 = sext i32 %127 to i64
  %128 = load i64, i64* %pos, align 8
  %add238 = add nsw i64 %128, %conv237
  store i64 %add238, i64* %pos, align 8
  br label %if.end.244

if.else.239:                                      ; preds = %cond.end.178
  %129 = load i8*, i8** %src, align 8
  %130 = load i8, i8* %129, align 1
  %conv240 = zext i8 %130 to i32
  %add241 = add nsw i32 %conv240, 4194048
  store i32 %add241, i32* %c, align 4
  %131 = load i8*, i8** %src, align 8
  %incdec.ptr242 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %incdec.ptr242, i8** %src, align 8
  %132 = load i64, i64* %pos, align 8
  %inc243 = add nsw i64 %132, 1
  store i64 %inc243, i64* %pos, align 8
  br label %if.end.244

if.end.244:                                       ; preds = %if.else.239, %cond.end.235
  br label %if.end.245

if.end.245:                                       ; preds = %if.end.244, %if.then.75
  br label %if.end.304

if.else.246:                                      ; preds = %if.end.67
  %133 = load i8*, i8** %src, align 8
  %arrayidx247 = getelementptr inbounds i8, i8* %133, i64 0
  %134 = load i8, i8* %arrayidx247, align 1
  %conv248 = zext i8 %134 to i32
  %and249 = and i32 %conv248, 128
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %cond.false.254, label %cond.true.251

cond.true.251:                                    ; preds = %if.else.246
  %135 = load i8*, i8** %src, align 8
  %incdec.ptr252 = getelementptr inbounds i8, i8* %135, i32 1
  store i8* %incdec.ptr252, i8** %src, align 8
  %136 = load i8, i8* %135, align 1
  %conv253 = zext i8 %136 to i32
  br label %cond.end.301

cond.false.254:                                   ; preds = %if.else.246
  %137 = load i8*, i8** %src, align 8
  %arrayidx255 = getelementptr inbounds i8, i8* %137, i64 0
  %138 = load i8, i8* %arrayidx255, align 1
  %conv256 = zext i8 %138 to i32
  %and257 = and i32 %conv256, 32
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %cond.false.275, label %cond.true.259

cond.true.259:                                    ; preds = %cond.false.254
  %139 = load i8*, i8** %src, align 8
  %add.ptr260 = getelementptr inbounds i8, i8* %139, i64 2
  store i8* %add.ptr260, i8** %src, align 8
  %140 = load i8*, i8** %src, align 8
  %arrayidx261 = getelementptr inbounds i8, i8* %140, i64 -2
  %141 = load i8, i8* %arrayidx261, align 1
  %conv262 = zext i8 %141 to i32
  %and263 = and i32 %conv262, 31
  %shl264 = shl i32 %and263, 6
  %142 = load i8*, i8** %src, align 8
  %arrayidx265 = getelementptr inbounds i8, i8* %142, i64 -1
  %143 = load i8, i8* %arrayidx265, align 1
  %conv266 = zext i8 %143 to i32
  %and267 = and i32 %conv266, 63
  %or268 = or i32 %shl264, %and267
  %144 = load i8*, i8** %src, align 8
  %arrayidx269 = getelementptr inbounds i8, i8* %144, i64 -2
  %145 = load i8, i8* %arrayidx269, align 1
  %conv270 = zext i8 %145 to i32
  %cmp271 = icmp slt i32 %conv270, 194
  %cond273 = select i1 %cmp271, i32 4194176, i32 0
  %or274 = or i32 %or268, %cond273
  br label %cond.end.299

cond.false.275:                                   ; preds = %cond.false.254
  %146 = load i8*, i8** %src, align 8
  %arrayidx276 = getelementptr inbounds i8, i8* %146, i64 0
  %147 = load i8, i8* %arrayidx276, align 1
  %conv277 = zext i8 %147 to i32
  %and278 = and i32 %conv277, 16
  %tobool279 = icmp ne i32 %and278, 0
  br i1 %tobool279, label %cond.false.295, label %cond.true.280

cond.true.280:                                    ; preds = %cond.false.275
  %148 = load i8*, i8** %src, align 8
  %add.ptr281 = getelementptr inbounds i8, i8* %148, i64 3
  store i8* %add.ptr281, i8** %src, align 8
  %149 = load i8*, i8** %src, align 8
  %arrayidx282 = getelementptr inbounds i8, i8* %149, i64 -3
  %150 = load i8, i8* %arrayidx282, align 1
  %conv283 = zext i8 %150 to i32
  %and284 = and i32 %conv283, 15
  %shl285 = shl i32 %and284, 12
  %151 = load i8*, i8** %src, align 8
  %arrayidx286 = getelementptr inbounds i8, i8* %151, i64 -2
  %152 = load i8, i8* %arrayidx286, align 1
  %conv287 = zext i8 %152 to i32
  %and288 = and i32 %conv287, 63
  %shl289 = shl i32 %and288, 6
  %or290 = or i32 %shl285, %shl289
  %153 = load i8*, i8** %src, align 8
  %arrayidx291 = getelementptr inbounds i8, i8* %153, i64 -1
  %154 = load i8, i8* %arrayidx291, align 1
  %conv292 = zext i8 %154 to i32
  %and293 = and i32 %conv292, 63
  %or294 = or i32 %or290, %and293
  br label %cond.end.297

cond.false.295:                                   ; preds = %cond.false.275
  %155 = load i8*, i8** %src, align 8
  %call296 = call i32 @string_char(i8* %155, i8** %src, i32* null)
  br label %cond.end.297

cond.end.297:                                     ; preds = %cond.false.295, %cond.true.280
  %cond298 = phi i32 [ %or294, %cond.true.280 ], [ %call296, %cond.false.295 ]
  br label %cond.end.299

cond.end.299:                                     ; preds = %cond.end.297, %cond.true.259
  %cond300 = phi i32 [ %or274, %cond.true.259 ], [ %cond298, %cond.end.297 ]
  br label %cond.end.301

cond.end.301:                                     ; preds = %cond.end.299, %cond.true.251
  %cond302 = phi i32 [ %conv253, %cond.true.251 ], [ %cond300, %cond.end.299 ]
  store i32 %cond302, i32* %c, align 4
  %156 = load i64, i64* %pos, align 8
  %inc303 = add nsw i64 %156, 1
  store i64 %inc303, i64* %pos, align 8
  br label %if.end.304

if.end.304:                                       ; preds = %cond.end.301, %if.end.245
  %157 = load i32, i32* %c, align 4
  %cmp305 = icmp eq i32 %157, 13
  br i1 %cmp305, label %land.lhs.true, label %if.end.313

land.lhs.true:                                    ; preds = %if.end.304
  %158 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %158, i32 0, i32 1
  %bf.load307 = load i32, i32* %mode, align 8
  %bf.lshr308 = lshr i32 %bf.load307, 14
  %bf.clear309 = and i32 %bf.lshr308, 31
  %and310 = and i32 %bf.clear309, 2
  %tobool311 = icmp ne i32 %and310, 0
  br i1 %tobool311, label %if.then.312, label %if.end.313

if.then.312:                                      ; preds = %land.lhs.true
  store i32 10, i32* %c, align 4
  br label %if.end.313

if.end.313:                                       ; preds = %if.then.312, %land.lhs.true, %if.end.304
  %159 = load i64, i64* %eol_type, align 8
  %call314 = call i64 @builtin_lisp_symbol(i32 973)
  %cmp315 = icmp eq i64 %159, %call314
  br i1 %cmp315, label %if.end.329, label %if.then.317

if.then.317:                                      ; preds = %if.end.313
  %160 = load i32, i32* %c, align 4
  %cmp318 = icmp eq i32 %160, 10
  br i1 %cmp318, label %if.then.320, label %if.end.328

if.then.320:                                      ; preds = %if.then.317
  %161 = load i64, i64* %eol_type, align 8
  %call321 = call i64 @builtin_lisp_symbol(i32 351)
  %cmp322 = icmp eq i64 %161, %call321
  br i1 %cmp322, label %if.then.324, label %if.else.326

if.then.324:                                      ; preds = %if.then.320
  %162 = load i32*, i32** %buf, align 8
  %incdec.ptr325 = getelementptr inbounds i32, i32* %162, i32 1
  store i32* %incdec.ptr325, i32** %buf, align 8
  store i32 13, i32* %162, align 4
  br label %if.end.327

if.else.326:                                      ; preds = %if.then.320
  store i32 13, i32* %c, align 4
  br label %if.end.327

if.end.327:                                       ; preds = %if.else.326, %if.then.324
  br label %if.end.328

if.end.328:                                       ; preds = %if.end.327, %if.then.317
  br label %if.end.329

if.end.329:                                       ; preds = %if.end.328, %if.end.313
  %call330 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call330, i64* %trans, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.329
  %call331 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call331, i64* %trans, align 8
  %163 = load i64, i64* %translation_table.addr, align 8
  %call332 = call zeroext i1 @CHAR_TABLE_P(i64 %163)
  br i1 %call332, label %if.then.333, label %if.else.345

if.then.333:                                      ; preds = %do.body
  %164 = load i64, i64* %translation_table.addr, align 8
  %165 = load i32, i32* %c, align 4
  %call334 = call i64 @CHAR_TABLE_REF(i64 %164, i32 %165)
  store i64 %call334, i64* %trans, align 8
  %166 = load i64, i64* %trans, align 8
  %call335 = call zeroext i1 @NATNUMP(i64 %166)
  br i1 %call335, label %land.lhs.true.337, label %if.end.344

land.lhs.true.337:                                ; preds = %if.then.333
  %167 = load i64, i64* %trans, align 8
  %shr = ashr i64 %167, 2
  %cmp338 = icmp sle i64 %shr, 4194303
  br i1 %cmp338, label %if.then.340, label %if.end.344

if.then.340:                                      ; preds = %land.lhs.true.337
  %168 = load i64, i64* %trans, align 8
  %shr341 = ashr i64 %168, 2
  %conv342 = trunc i64 %shr341 to i32
  store i32 %conv342, i32* %c, align 4
  %call343 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call343, i64* %trans, align 8
  br label %if.end.344

if.end.344:                                       ; preds = %if.then.340, %land.lhs.true.337, %if.then.333
  br label %if.end.380

if.else.345:                                      ; preds = %do.body
  %169 = load i64, i64* %translation_table.addr, align 8
  %and346 = and i64 %169, 7
  %conv347 = trunc i64 %and346 to i32
  %cmp348 = icmp eq i32 %conv347, 3
  br i1 %cmp348, label %if.then.350, label %if.end.379

if.then.350:                                      ; preds = %if.else.345
  %170 = load i64, i64* %translation_table.addr, align 8
  store i64 %170, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.350
  %171 = load i64, i64* %tail, align 8
  %and351 = and i64 %171, 7
  %conv352 = trunc i64 %and351 to i32
  %cmp353 = icmp eq i32 %conv352, 3
  br i1 %cmp353, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %172 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %172, 3
  %173 = inttoptr i64 %sub to i8*
  %174 = bitcast i8* %173 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %174, i32 0, i32 0
  %175 = load i64, i64* %car, align 8
  %call355 = call zeroext i1 @CHAR_TABLE_P(i64 %175)
  br i1 %call355, label %if.then.356, label %if.end.377

if.then.356:                                      ; preds = %for.body
  %176 = load i64, i64* %tail, align 8
  %sub357 = sub nsw i64 %176, 3
  %177 = inttoptr i64 %sub357 to i8*
  %178 = bitcast i8* %177 to %struct.Lisp_Cons*
  %car358 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %178, i32 0, i32 0
  %179 = load i64, i64* %car358, align 8
  %180 = load i32, i32* %c, align 4
  %call359 = call i64 @CHAR_TABLE_REF(i64 %179, i32 %180)
  store i64 %call359, i64* %trans, align 8
  %181 = load i64, i64* %trans, align 8
  %call360 = call zeroext i1 @NATNUMP(i64 %181)
  br i1 %call360, label %land.lhs.true.362, label %if.else.370

land.lhs.true.362:                                ; preds = %if.then.356
  %182 = load i64, i64* %trans, align 8
  %shr363 = ashr i64 %182, 2
  %cmp364 = icmp sle i64 %shr363, 4194303
  br i1 %cmp364, label %if.then.366, label %if.else.370

if.then.366:                                      ; preds = %land.lhs.true.362
  %183 = load i64, i64* %trans, align 8
  %shr367 = ashr i64 %183, 2
  %conv368 = trunc i64 %shr367 to i32
  store i32 %conv368, i32* %c, align 4
  %call369 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call369, i64* %trans, align 8
  br label %if.end.376

if.else.370:                                      ; preds = %land.lhs.true.362, %if.then.356
  %184 = load i64, i64* %trans, align 8
  %call371 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp372 = icmp eq i64 %184, %call371
  br i1 %cmp372, label %if.end.375, label %if.then.374

if.then.374:                                      ; preds = %if.else.370
  br label %for.end

if.end.375:                                       ; preds = %if.else.370
  br label %if.end.376

if.end.376:                                       ; preds = %if.end.375, %if.then.366
  br label %if.end.377

if.end.377:                                       ; preds = %if.end.376, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.377
  %185 = load i64, i64* %tail, align 8
  %sub378 = sub nsw i64 %185, 3
  %186 = inttoptr i64 %sub378 to i8*
  %187 = bitcast i8* %186 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %187, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %188 = load i64, i64* %cdr, align 8
  store i64 %188, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.374, %for.cond
  br label %if.end.379

if.end.379:                                       ; preds = %for.end, %if.else.345
  br label %if.end.380

if.end.380:                                       ; preds = %if.end.379, %if.end.344
  br label %do.end

do.end:                                           ; preds = %if.end.380
  %189 = load i64, i64* %trans, align 8
  %call381 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp382 = icmp eq i64 %189, %call381
  br i1 %cmp382, label %if.then.384, label %if.else.386

if.then.384:                                      ; preds = %do.end
  %190 = load i32, i32* %c, align 4
  %191 = load i32*, i32** %buf, align 8
  %incdec.ptr385 = getelementptr inbounds i32, i32* %191, i32 1
  store i32* %incdec.ptr385, i32** %buf, align 8
  store i32 %190, i32* %191, align 4
  br label %if.end.608

if.else.386:                                      ; preds = %do.end
  store i64 1, i64* %from_nchars, align 8
  store i64 1, i64* %to_nchars, align 8
  %192 = load i8*, i8** %src, align 8
  store i8* %192, i8** %p, align 8
  %193 = load i32, i32* %c, align 4
  %194 = load i32*, i32** %lookup_buf, align 8
  %arrayidx387 = getelementptr inbounds i32, i32* %194, i64 0
  store i32 %193, i32* %arrayidx387, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond.388

for.cond.388:                                     ; preds = %for.inc.453, %if.else.386
  %195 = load i32, i32* %i, align 4
  %196 = load i32, i32* %max_lookup.addr, align 4
  %cmp389 = icmp slt i32 %195, %196
  br i1 %cmp389, label %land.rhs.391, label %land.end.394

land.rhs.391:                                     ; preds = %for.cond.388
  %197 = load i8*, i8** %p, align 8
  %198 = load i8*, i8** %src_end, align 8
  %cmp392 = icmp ult i8* %197, %198
  br label %land.end.394

land.end.394:                                     ; preds = %land.rhs.391, %for.cond.388
  %199 = phi i1 [ false, %for.cond.388 ], [ %cmp392, %land.rhs.391 ]
  br i1 %199, label %for.body.395, label %for.end.455

for.body.395:                                     ; preds = %land.end.394
  %200 = load i8*, i8** %p, align 8
  %arrayidx396 = getelementptr inbounds i8, i8* %200, i64 0
  %201 = load i8, i8* %arrayidx396, align 1
  %conv397 = zext i8 %201 to i32
  %and398 = and i32 %conv397, 128
  %tobool399 = icmp ne i32 %and398, 0
  br i1 %tobool399, label %cond.false.403, label %cond.true.400

cond.true.400:                                    ; preds = %for.body.395
  %202 = load i8*, i8** %p, align 8
  %incdec.ptr401 = getelementptr inbounds i8, i8* %202, i32 1
  store i8* %incdec.ptr401, i8** %p, align 8
  %203 = load i8, i8* %202, align 1
  %conv402 = zext i8 %203 to i32
  br label %cond.end.450

cond.false.403:                                   ; preds = %for.body.395
  %204 = load i8*, i8** %p, align 8
  %arrayidx404 = getelementptr inbounds i8, i8* %204, i64 0
  %205 = load i8, i8* %arrayidx404, align 1
  %conv405 = zext i8 %205 to i32
  %and406 = and i32 %conv405, 32
  %tobool407 = icmp ne i32 %and406, 0
  br i1 %tobool407, label %cond.false.424, label %cond.true.408

cond.true.408:                                    ; preds = %cond.false.403
  %206 = load i8*, i8** %p, align 8
  %add.ptr409 = getelementptr inbounds i8, i8* %206, i64 2
  store i8* %add.ptr409, i8** %p, align 8
  %207 = load i8*, i8** %p, align 8
  %arrayidx410 = getelementptr inbounds i8, i8* %207, i64 -2
  %208 = load i8, i8* %arrayidx410, align 1
  %conv411 = zext i8 %208 to i32
  %and412 = and i32 %conv411, 31
  %shl413 = shl i32 %and412, 6
  %209 = load i8*, i8** %p, align 8
  %arrayidx414 = getelementptr inbounds i8, i8* %209, i64 -1
  %210 = load i8, i8* %arrayidx414, align 1
  %conv415 = zext i8 %210 to i32
  %and416 = and i32 %conv415, 63
  %or417 = or i32 %shl413, %and416
  %211 = load i8*, i8** %p, align 8
  %arrayidx418 = getelementptr inbounds i8, i8* %211, i64 -2
  %212 = load i8, i8* %arrayidx418, align 1
  %conv419 = zext i8 %212 to i32
  %cmp420 = icmp slt i32 %conv419, 194
  %cond422 = select i1 %cmp420, i32 4194176, i32 0
  %or423 = or i32 %or417, %cond422
  br label %cond.end.448

cond.false.424:                                   ; preds = %cond.false.403
  %213 = load i8*, i8** %p, align 8
  %arrayidx425 = getelementptr inbounds i8, i8* %213, i64 0
  %214 = load i8, i8* %arrayidx425, align 1
  %conv426 = zext i8 %214 to i32
  %and427 = and i32 %conv426, 16
  %tobool428 = icmp ne i32 %and427, 0
  br i1 %tobool428, label %cond.false.444, label %cond.true.429

cond.true.429:                                    ; preds = %cond.false.424
  %215 = load i8*, i8** %p, align 8
  %add.ptr430 = getelementptr inbounds i8, i8* %215, i64 3
  store i8* %add.ptr430, i8** %p, align 8
  %216 = load i8*, i8** %p, align 8
  %arrayidx431 = getelementptr inbounds i8, i8* %216, i64 -3
  %217 = load i8, i8* %arrayidx431, align 1
  %conv432 = zext i8 %217 to i32
  %and433 = and i32 %conv432, 15
  %shl434 = shl i32 %and433, 12
  %218 = load i8*, i8** %p, align 8
  %arrayidx435 = getelementptr inbounds i8, i8* %218, i64 -2
  %219 = load i8, i8* %arrayidx435, align 1
  %conv436 = zext i8 %219 to i32
  %and437 = and i32 %conv436, 63
  %shl438 = shl i32 %and437, 6
  %or439 = or i32 %shl434, %shl438
  %220 = load i8*, i8** %p, align 8
  %arrayidx440 = getelementptr inbounds i8, i8* %220, i64 -1
  %221 = load i8, i8* %arrayidx440, align 1
  %conv441 = zext i8 %221 to i32
  %and442 = and i32 %conv441, 63
  %or443 = or i32 %or439, %and442
  br label %cond.end.446

cond.false.444:                                   ; preds = %cond.false.424
  %222 = load i8*, i8** %p, align 8
  %call445 = call i32 @string_char(i8* %222, i8** %p, i32* null)
  br label %cond.end.446

cond.end.446:                                     ; preds = %cond.false.444, %cond.true.429
  %cond447 = phi i32 [ %or443, %cond.true.429 ], [ %call445, %cond.false.444 ]
  br label %cond.end.448

cond.end.448:                                     ; preds = %cond.end.446, %cond.true.408
  %cond449 = phi i32 [ %or423, %cond.true.408 ], [ %cond447, %cond.end.446 ]
  br label %cond.end.450

cond.end.450:                                     ; preds = %cond.end.448, %cond.true.400
  %cond451 = phi i32 [ %conv402, %cond.true.400 ], [ %cond449, %cond.end.448 ]
  %223 = load i32, i32* %i, align 4
  %idxprom = sext i32 %223 to i64
  %224 = load i32*, i32** %lookup_buf, align 8
  %arrayidx452 = getelementptr inbounds i32, i32* %224, i64 %idxprom
  store i32 %cond451, i32* %arrayidx452, align 4
  br label %for.inc.453

for.inc.453:                                      ; preds = %cond.end.450
  %225 = load i32, i32* %i, align 4
  %inc454 = add nsw i32 %225, 1
  store i32 %inc454, i32* %i, align 4
  br label %for.cond.388

for.end.455:                                      ; preds = %land.end.394
  %226 = load i32*, i32** %lookup_buf, align 8
  %227 = load i32, i32* %i, align 4
  %idx.ext456 = sext i32 %227 to i64
  %add.ptr457 = getelementptr inbounds i32, i32* %226, i64 %idx.ext456
  store i32* %add.ptr457, i32** %lookup_buf_end, align 8
  %228 = load i64, i64* %trans, align 8
  %229 = load i32*, i32** %lookup_buf, align 8
  %230 = load i32*, i32** %lookup_buf_end, align 8
  %call458 = call i64 @get_translation(i64 %228, i32* %229, i32* %230)
  store i64 %call458, i64* %trans, align 8
  %231 = load i64, i64* %trans, align 8
  %and459 = and i64 %231, 7
  %conv460 = trunc i64 %and459 to i32
  %and461 = and i32 %conv460, -5
  %cmp462 = icmp eq i32 %and461, 2
  br i1 %cmp462, label %if.then.464, label %if.else.467

if.then.464:                                      ; preds = %for.end.455
  %232 = load i64, i64* %trans, align 8
  %shr465 = ashr i64 %232, 2
  %conv466 = trunc i64 %shr465 to i32
  store i32 %conv466, i32* %c, align 4
  br label %if.end.499

if.else.467:                                      ; preds = %for.end.455
  %233 = load i64, i64* %trans, align 8
  %and468 = and i64 %233, 7
  %conv469 = trunc i64 %and468 to i32
  %cmp470 = icmp eq i32 %conv469, 3
  br i1 %cmp470, label %if.then.472, label %if.else.497

if.then.472:                                      ; preds = %if.else.467
  %234 = load i64, i64* %trans, align 8
  %sub473 = sub nsw i64 %234, 3
  %235 = inttoptr i64 %sub473 to i8*
  %236 = bitcast i8* %235 to %struct.Lisp_Cons*
  %car474 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %236, i32 0, i32 0
  %237 = load i64, i64* %car474, align 8
  %call475 = call i64 @ASIZE(i64 %237)
  store i64 %call475, i64* %from_nchars, align 8
  %238 = load i64, i64* %trans, align 8
  %sub476 = sub nsw i64 %238, 3
  %239 = inttoptr i64 %sub476 to i8*
  %240 = bitcast i8* %239 to %struct.Lisp_Cons*
  %u477 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %240, i32 0, i32 1
  %cdr478 = bitcast %union.anon.0* %u477 to i64*
  %241 = load i64, i64* %cdr478, align 8
  store i64 %241, i64* %trans, align 8
  %242 = load i64, i64* %trans, align 8
  %and479 = and i64 %242, 7
  %conv480 = trunc i64 %and479 to i32
  %and481 = and i32 %conv480, -5
  %cmp482 = icmp eq i32 %and481, 2
  br i1 %cmp482, label %if.then.484, label %if.else.487

if.then.484:                                      ; preds = %if.then.472
  %243 = load i64, i64* %trans, align 8
  %shr485 = ashr i64 %243, 2
  %conv486 = trunc i64 %shr485 to i32
  store i32 %conv486, i32* %c, align 4
  br label %if.end.496

if.else.487:                                      ; preds = %if.then.472
  %244 = load i64, i64* %trans, align 8
  %call488 = call i64 @ASIZE(i64 %244)
  store i64 %call488, i64* %to_nchars, align 8
  %245 = load i32*, i32** %buf_end, align 8
  %246 = load i32*, i32** %buf, align 8
  %sub.ptr.lhs.cast = ptrtoint i32* %245 to i64
  %sub.ptr.rhs.cast = ptrtoint i32* %246 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 4
  %247 = load i64, i64* %to_nchars, align 8
  %cmp489 = icmp slt i64 %sub.ptr.div, %247
  br i1 %cmp489, label %if.then.491, label %if.end.492

if.then.491:                                      ; preds = %if.else.487
  br label %while.end

if.end.492:                                       ; preds = %if.else.487
  %248 = load i64, i64* %trans, align 8
  %call493 = call i64 @AREF(i64 %248, i64 0)
  %shr494 = ashr i64 %call493, 2
  %conv495 = trunc i64 %shr494 to i32
  store i32 %conv495, i32* %c, align 4
  br label %if.end.496

if.end.496:                                       ; preds = %if.end.492, %if.then.484
  br label %if.end.498

if.else.497:                                      ; preds = %if.else.467
  br label %while.end

if.end.498:                                       ; preds = %if.end.496
  br label %if.end.499

if.end.499:                                       ; preds = %if.end.498, %if.then.464
  %249 = load i32, i32* %c, align 4
  %250 = load i32*, i32** %buf, align 8
  %incdec.ptr500 = getelementptr inbounds i32, i32* %250, i32 1
  store i32* %incdec.ptr500, i32** %buf, align 8
  store i32 %249, i32* %250, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond.501

for.cond.501:                                     ; preds = %for.inc.511, %if.end.499
  %251 = load i32, i32* %i, align 4
  %conv502 = sext i32 %251 to i64
  %252 = load i64, i64* %to_nchars, align 8
  %cmp503 = icmp slt i64 %conv502, %252
  br i1 %cmp503, label %for.body.505, label %for.end.513

for.body.505:                                     ; preds = %for.cond.501
  %253 = load i64, i64* %trans, align 8
  %254 = load i32, i32* %i, align 4
  %conv506 = sext i32 %254 to i64
  %call507 = call i64 @AREF(i64 %253, i64 %conv506)
  %shr508 = ashr i64 %call507, 2
  %conv509 = trunc i64 %shr508 to i32
  %255 = load i32*, i32** %buf, align 8
  %incdec.ptr510 = getelementptr inbounds i32, i32* %255, i32 1
  store i32* %incdec.ptr510, i32** %buf, align 8
  store i32 %conv509, i32* %255, align 4
  br label %for.inc.511

for.inc.511:                                      ; preds = %for.body.505
  %256 = load i32, i32* %i, align 4
  %inc512 = add nsw i32 %256, 1
  store i32 %inc512, i32* %i, align 4
  br label %for.cond.501

for.end.513:                                      ; preds = %for.cond.501
  store i32 1, i32* %i, align 4
  br label %for.cond.514

for.cond.514:                                     ; preds = %for.inc.604, %for.end.513
  %257 = load i32, i32* %i, align 4
  %conv515 = sext i32 %257 to i64
  %258 = load i64, i64* %from_nchars, align 8
  %cmp516 = icmp slt i64 %conv515, %258
  br i1 %cmp516, label %for.body.518, label %for.end.607

for.body.518:                                     ; preds = %for.cond.514
  %259 = load i8*, i8** %src, align 8
  %arrayidx519 = getelementptr inbounds i8, i8* %259, i64 0
  %260 = load i8, i8* %arrayidx519, align 1
  %conv520 = zext i8 %260 to i32
  %and521 = and i32 %conv520, 128
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %cond.false.524, label %cond.true.523

cond.true.523:                                    ; preds = %for.body.518
  br label %cond.end.600

cond.false.524:                                   ; preds = %for.body.518
  %261 = load i8*, i8** %src, align 8
  %arrayidx525 = getelementptr inbounds i8, i8* %261, i64 1
  %262 = load i8, i8* %arrayidx525, align 1
  %conv526 = zext i8 %262 to i32
  %and527 = and i32 %conv526, 192
  %cmp528 = icmp ne i32 %and527, 128
  br i1 %cmp528, label %cond.true.530, label %cond.false.531

cond.true.530:                                    ; preds = %cond.false.524
  br label %cond.end.598

cond.false.531:                                   ; preds = %cond.false.524
  %263 = load i8*, i8** %src, align 8
  %arrayidx532 = getelementptr inbounds i8, i8* %263, i64 0
  %264 = load i8, i8* %arrayidx532, align 1
  %conv533 = zext i8 %264 to i32
  %and534 = and i32 %conv533, 224
  %cmp535 = icmp eq i32 %and534, 192
  br i1 %cmp535, label %cond.true.537, label %cond.false.538

cond.true.537:                                    ; preds = %cond.false.531
  br label %cond.end.596

cond.false.538:                                   ; preds = %cond.false.531
  %265 = load i8*, i8** %src, align 8
  %arrayidx539 = getelementptr inbounds i8, i8* %265, i64 2
  %266 = load i8, i8* %arrayidx539, align 1
  %conv540 = zext i8 %266 to i32
  %and541 = and i32 %conv540, 192
  %cmp542 = icmp ne i32 %and541, 128
  br i1 %cmp542, label %cond.true.544, label %cond.false.545

cond.true.544:                                    ; preds = %cond.false.538
  br label %cond.end.594

cond.false.545:                                   ; preds = %cond.false.538
  %267 = load i8*, i8** %src, align 8
  %arrayidx546 = getelementptr inbounds i8, i8* %267, i64 0
  %268 = load i8, i8* %arrayidx546, align 1
  %conv547 = zext i8 %268 to i32
  %and548 = and i32 %conv547, 240
  %cmp549 = icmp eq i32 %and548, 224
  br i1 %cmp549, label %cond.true.551, label %cond.false.552

cond.true.551:                                    ; preds = %cond.false.545
  br label %cond.end.592

cond.false.552:                                   ; preds = %cond.false.545
  %269 = load i8*, i8** %src, align 8
  %arrayidx553 = getelementptr inbounds i8, i8* %269, i64 3
  %270 = load i8, i8* %arrayidx553, align 1
  %conv554 = zext i8 %270 to i32
  %and555 = and i32 %conv554, 192
  %cmp556 = icmp ne i32 %and555, 128
  br i1 %cmp556, label %cond.true.558, label %cond.false.559

cond.true.558:                                    ; preds = %cond.false.552
  br label %cond.end.590

cond.false.559:                                   ; preds = %cond.false.552
  %271 = load i8*, i8** %src, align 8
  %arrayidx560 = getelementptr inbounds i8, i8* %271, i64 0
  %272 = load i8, i8* %arrayidx560, align 1
  %conv561 = zext i8 %272 to i32
  %and562 = and i32 %conv561, 248
  %cmp563 = icmp eq i32 %and562, 240
  br i1 %cmp563, label %cond.true.565, label %cond.false.566

cond.true.565:                                    ; preds = %cond.false.559
  br label %cond.end.588

cond.false.566:                                   ; preds = %cond.false.559
  %273 = load i8*, i8** %src, align 8
  %arrayidx567 = getelementptr inbounds i8, i8* %273, i64 4
  %274 = load i8, i8* %arrayidx567, align 1
  %conv568 = zext i8 %274 to i32
  %and569 = and i32 %conv568, 192
  %cmp570 = icmp ne i32 %and569, 128
  br i1 %cmp570, label %cond.true.572, label %cond.false.573

cond.true.572:                                    ; preds = %cond.false.566
  br label %cond.end.586

cond.false.573:                                   ; preds = %cond.false.566
  %275 = load i8*, i8** %src, align 8
  %arrayidx574 = getelementptr inbounds i8, i8* %275, i64 0
  %276 = load i8, i8* %arrayidx574, align 1
  %conv575 = zext i8 %276 to i32
  %cmp576 = icmp eq i32 %conv575, 248
  br i1 %cmp576, label %land.rhs.578, label %land.end.584

land.rhs.578:                                     ; preds = %cond.false.573
  %277 = load i8*, i8** %src, align 8
  %arrayidx579 = getelementptr inbounds i8, i8* %277, i64 1
  %278 = load i8, i8* %arrayidx579, align 1
  %conv580 = zext i8 %278 to i32
  %and581 = and i32 %conv580, 240
  %cmp582 = icmp eq i32 %and581, 128
  br label %land.end.584

land.end.584:                                     ; preds = %land.rhs.578, %cond.false.573
  %279 = phi i1 [ false, %cond.false.573 ], [ %cmp582, %land.rhs.578 ]
  %cond585 = select i1 %279, i32 5, i32 0
  br label %cond.end.586

cond.end.586:                                     ; preds = %land.end.584, %cond.true.572
  %cond587 = phi i32 [ 0, %cond.true.572 ], [ %cond585, %land.end.584 ]
  br label %cond.end.588

cond.end.588:                                     ; preds = %cond.end.586, %cond.true.565
  %cond589 = phi i32 [ 4, %cond.true.565 ], [ %cond587, %cond.end.586 ]
  br label %cond.end.590

cond.end.590:                                     ; preds = %cond.end.588, %cond.true.558
  %cond591 = phi i32 [ 0, %cond.true.558 ], [ %cond589, %cond.end.588 ]
  br label %cond.end.592

cond.end.592:                                     ; preds = %cond.end.590, %cond.true.551
  %cond593 = phi i32 [ 3, %cond.true.551 ], [ %cond591, %cond.end.590 ]
  br label %cond.end.594

cond.end.594:                                     ; preds = %cond.end.592, %cond.true.544
  %cond595 = phi i32 [ 0, %cond.true.544 ], [ %cond593, %cond.end.592 ]
  br label %cond.end.596

cond.end.596:                                     ; preds = %cond.end.594, %cond.true.537
  %cond597 = phi i32 [ 2, %cond.true.537 ], [ %cond595, %cond.end.594 ]
  br label %cond.end.598

cond.end.598:                                     ; preds = %cond.end.596, %cond.true.530
  %cond599 = phi i32 [ 0, %cond.true.530 ], [ %cond597, %cond.end.596 ]
  br label %cond.end.600

cond.end.600:                                     ; preds = %cond.end.598, %cond.true.523
  %cond601 = phi i32 [ 1, %cond.true.523 ], [ %cond599, %cond.end.598 ]
  %280 = load i8*, i8** %src, align 8
  %idx.ext602 = sext i32 %cond601 to i64
  %add.ptr603 = getelementptr inbounds i8, i8* %280, i64 %idx.ext602
  store i8* %add.ptr603, i8** %src, align 8
  br label %for.inc.604

for.inc.604:                                      ; preds = %cond.end.600
  %281 = load i32, i32* %i, align 4
  %inc605 = add nsw i32 %281, 1
  store i32 %inc605, i32* %i, align 4
  %282 = load i64, i64* %pos, align 8
  %inc606 = add nsw i64 %282, 1
  store i64 %inc606, i64* %pos, align 8
  br label %for.cond.514

for.end.607:                                      ; preds = %for.cond.514
  br label %if.end.608

if.end.608:                                       ; preds = %for.end.607, %if.then.384
  br label %while.cond

while.end:                                        ; preds = %if.else.497, %if.then.491, %if.then.49, %while.cond
  %283 = load i8*, i8** %src, align 8
  %284 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source609 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %284, i32 0, i32 17
  %285 = load i8*, i8** %source609, align 8
  %sub.ptr.lhs.cast610 = ptrtoint i8* %283 to i64
  %sub.ptr.rhs.cast611 = ptrtoint i8* %285 to i64
  %sub.ptr.sub612 = sub i64 %sub.ptr.lhs.cast610, %sub.ptr.rhs.cast611
  %286 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed613 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %286, i32 0, i32 10
  store i64 %sub.ptr.sub612, i64* %consumed613, align 8
  %287 = load i64, i64* %pos, align 8
  %288 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_pos614 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %288, i32 0, i32 12
  %289 = load i64, i64* %src_pos614, align 8
  %sub615 = sub nsw i64 %287, %289
  %290 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %consumed_char616 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %290, i32 0, i32 11
  store i64 %sub615, i64* %consumed_char616, align 8
  %291 = load i32*, i32** %buf, align 8
  %292 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf617 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %292, i32 0, i32 23
  %293 = load i32*, i32** %charbuf617, align 8
  %sub.ptr.lhs.cast618 = ptrtoint i32* %291 to i64
  %sub.ptr.rhs.cast619 = ptrtoint i32* %293 to i64
  %sub.ptr.sub620 = sub i64 %sub.ptr.lhs.cast618, %sub.ptr.rhs.cast619
  %sub.ptr.div621 = sdiv exact i64 %sub.ptr.sub620, 4
  %conv622 = trunc i64 %sub.ptr.div621 to i32
  %294 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %charbuf_used = getelementptr inbounds %struct.coding_system, %struct.coding_system* %294, i32 0, i32 25
  store i32 %conv622, i32* %charbuf_used, align 4
  %295 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %chars_at_source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %295, i32 0, i32 1
  %bf.load623 = load i32, i32* %chars_at_source, align 8
  %bf.clear624 = and i32 %bf.load623, -2097153
  store i32 %bf.clear624, i32* %chars_at_source, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32* @handle_composition_annotation(i64 %pos, i64 %limit, %struct.coding_system* %coding, i32* %buf, i64* %stop) #0 {
entry:
  %pos.addr = alloca i64, align 8
  %limit.addr = alloca i64, align 8
  %coding.addr = alloca %struct.coding_system*, align 8
  %buf.addr = alloca i32*, align 8
  %stop.addr = alloca i64*, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %prop = alloca i64, align 8
  %head = alloca i32*, align 8
  %method = alloca i32, align 4
  %nchars = alloca i32, align 4
  %components = alloca i64, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %i_byte = alloca i64, align 8
  %chp = alloca i8*, align 8
  %chlen = alloca i32, align 4
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %limit, i64* %limit.addr, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i32* %buf, i32** %buf.addr, align 8
  store i64* %stop, i64** %stop.addr, align 8
  %0 = load i64, i64* %pos.addr, align 8
  %1 = load i64, i64* %limit.addr, align 8
  %2 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %2, i32 0, i32 16
  %3 = load i64, i64* %src_object, align 8
  %call = call zeroext i1 @find_composition(i64 %0, i64 %1, i64* %start, i64* %end, i64* %prop, i64 %3)
  br i1 %call, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load i64, i64* %end, align 8
  %5 = load i64, i64* %limit.addr, align 8
  %cmp = icmp sgt i64 %4, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i64, i64* %limit.addr, align 8
  %7 = load i64*, i64** %stop.addr, align 8
  store i64 %6, i64* %7, align 8
  br label %if.end.171

if.else:                                          ; preds = %lor.lhs.false
  %8 = load i64, i64* %start, align 8
  %9 = load i64, i64* %pos.addr, align 8
  %cmp1 = icmp sgt i64 %8, %9
  br i1 %cmp1, label %if.then.2, label %if.else.3

if.then.2:                                        ; preds = %if.else
  %10 = load i64, i64* %start, align 8
  %11 = load i64*, i64** %stop.addr, align 8
  store i64 %10, i64* %11, align 8
  br label %if.end.170

if.else.3:                                        ; preds = %if.else
  %12 = load i64, i64* %start, align 8
  %13 = load i64, i64* %pos.addr, align 8
  %cmp4 = icmp eq i64 %12, %13
  br i1 %cmp4, label %if.then.5, label %if.end.161

if.then.5:                                        ; preds = %if.else.3
  %14 = load i32*, i32** %buf.addr, align 8
  store i32* %14, i32** %head, align 8
  %15 = load i64, i64* %prop, align 8
  %call6 = call i32 @composition_method(i64 %15)
  store i32 %call6, i32* %method, align 4
  %16 = load i64, i64* %prop, align 8
  %call7 = call zeroext i1 @composition_registered_p(i64 %16)
  br i1 %call7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.5
  %17 = load i64, i64* %prop, align 8
  %sub = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr = bitcast %union.anon.0* %u to i64*
  %20 = load i64, i64* %cdr, align 8
  %sub8 = sub nsw i64 %20, 3
  %21 = inttoptr i64 %sub8 to i8*
  %22 = bitcast i8* %21 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %22, i32 0, i32 0
  %23 = load i64, i64* %car, align 8
  %shr = ashr i64 %23, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then.5
  %24 = load i64, i64* %prop, align 8
  %sub9 = sub nsw i64 %24, 3
  %25 = inttoptr i64 %sub9 to i8*
  %26 = bitcast i8* %25 to %struct.Lisp_Cons*
  %car10 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %26, i32 0, i32 0
  %27 = load i64, i64* %car10, align 8
  %sub11 = sub nsw i64 %27, 3
  %28 = inttoptr i64 %sub11 to i8*
  %29 = bitcast i8* %28 to %struct.Lisp_Cons*
  %car12 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %29, i32 0, i32 0
  %30 = load i64, i64* %car12, align 8
  %shr13 = ashr i64 %30, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr, %cond.true ], [ %shr13, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %nchars, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end
  br label %do.body.14

do.body.14:                                       ; preds = %do.body
  %31 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %31, i32 1
  store i32* %incdec.ptr, i32** %buf.addr, align 8
  store i32 -5, i32* %31, align 4
  %32 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr15 = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %incdec.ptr15, i32** %buf.addr, align 8
  store i32 1, i32* %32, align 4
  %33 = load i32, i32* %nchars, align 4
  %34 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr16 = getelementptr inbounds i32, i32* %34, i32 1
  store i32* %incdec.ptr16, i32** %buf.addr, align 8
  store i32 %33, i32* %34, align 4
  %35 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %35, i32 0, i32 1
  %bf.load = load i32, i32* %annotated, align 8
  %bf.clear = and i32 %bf.load, -8388609
  %bf.set = or i32 %bf.clear, 8388608
  store i32 %bf.set, i32* %annotated, align 8
  br label %do.end

do.end:                                           ; preds = %do.body.14
  %36 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr17 = getelementptr inbounds i32, i32* %36, i32 1
  store i32* %incdec.ptr17, i32** %buf.addr, align 8
  store i32 0, i32* %36, align 4
  %37 = load i32, i32* %method, align 4
  %38 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr18 = getelementptr inbounds i32, i32* %38, i32 1
  store i32* %incdec.ptr18, i32** %buf.addr, align 8
  store i32 %37, i32* %38, align 4
  br label %do.end.19

do.end.19:                                        ; preds = %do.end
  %39 = load i32, i32* %method, align 4
  %cmp20 = icmp ne i32 %39, 0
  br i1 %cmp20, label %if.then.22, label %if.end.160

if.then.22:                                       ; preds = %do.end.19
  %40 = load i64, i64* %prop, align 8
  %call23 = call zeroext i1 @composition_registered_p(i64 %40)
  br i1 %call23, label %cond.true.25, label %cond.false.34

cond.true.25:                                     ; preds = %if.then.22
  %41 = load i64, i64* %prop, align 8
  %sub26 = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub26 to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %u27 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 1
  %cdr28 = bitcast %union.anon.0* %u27 to i64*
  %44 = load i64, i64* %cdr28, align 8
  %sub29 = sub nsw i64 %44, 3
  %45 = inttoptr i64 %sub29 to i8*
  %46 = bitcast i8* %45 to %struct.Lisp_Cons*
  %u30 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %46, i32 0, i32 1
  %cdr31 = bitcast %union.anon.0* %u30 to i64*
  %47 = load i64, i64* %cdr31, align 8
  %sub32 = sub nsw i64 %47, 3
  %48 = inttoptr i64 %sub32 to i8*
  %49 = bitcast i8* %48 to %struct.Lisp_Cons*
  %car33 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %49, i32 0, i32 0
  %50 = load i64, i64* %car33, align 8
  br label %cond.end.40

cond.false.34:                                    ; preds = %if.then.22
  %51 = load i64, i64* %prop, align 8
  %sub35 = sub nsw i64 %51, 3
  %52 = inttoptr i64 %sub35 to i8*
  %53 = bitcast i8* %52 to %struct.Lisp_Cons*
  %car36 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %53, i32 0, i32 0
  %54 = load i64, i64* %car36, align 8
  %sub37 = sub nsw i64 %54, 3
  %55 = inttoptr i64 %sub37 to i8*
  %56 = bitcast i8* %55 to %struct.Lisp_Cons*
  %u38 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %56, i32 0, i32 1
  %cdr39 = bitcast %union.anon.0* %u38 to i64*
  %57 = load i64, i64* %cdr39, align 8
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.34, %cond.true.25
  %cond41 = phi i64 [ %50, %cond.true.25 ], [ %57, %cond.false.34 ]
  store i64 %cond41, i64* %components, align 8
  %58 = load i64, i64* %components, align 8
  %call42 = call zeroext i1 @VECTORP(i64 %58)
  br i1 %call42, label %if.then.43, label %if.else.51

if.then.43:                                       ; preds = %cond.end.40
  %59 = load i64, i64* %components, align 8
  %call44 = call i64 @ASIZE(i64 %59)
  store i64 %call44, i64* %len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.43
  %60 = load i64, i64* %i, align 8
  %61 = load i64, i64* %len, align 8
  %cmp45 = icmp slt i64 %60, %61
  br i1 %cmp45, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %62 = load i64, i64* %components, align 8
  %63 = load i64, i64* %i, align 8
  %call47 = call i64 @AREF(i64 %62, i64 %63)
  %shr48 = ashr i64 %call47, 2
  %conv49 = trunc i64 %shr48 to i32
  %64 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr50 = getelementptr inbounds i32, i32* %64, i32 1
  store i32* %incdec.ptr50, i32** %buf.addr, align 8
  store i32 %conv49, i32* %64, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %65 = load i64, i64* %i, align 8
  %inc = add nsw i64 %65, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.156

if.else.51:                                       ; preds = %cond.end.40
  %66 = load i64, i64* %components, align 8
  %call52 = call zeroext i1 @STRINGP(i64 %66)
  br i1 %call52, label %if.then.53, label %if.else.119

if.then.53:                                       ; preds = %if.else.51
  %67 = load i64, i64* %components, align 8
  %call54 = call i64 @SCHARS(i64 %67)
  store i64 %call54, i64* %len, align 8
  store i64 0, i64* %i_byte, align 8
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.117, %if.then.53
  %68 = load i64, i64* %i, align 8
  %69 = load i64, i64* %len, align 8
  %cmp55 = icmp slt i64 %68, %69
  br i1 %cmp55, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body.57

do.body.57:                                       ; preds = %while.body
  %70 = load i64, i64* %i, align 8
  %inc58 = add nsw i64 %70, 1
  store i64 %inc58, i64* %i, align 8
  %71 = load i64, i64* %components, align 8
  %call59 = call zeroext i1 @STRING_MULTIBYTE(i64 %71)
  br i1 %call59, label %if.then.60, label %if.else.113

if.then.60:                                       ; preds = %do.body.57
  %72 = load i64, i64* %i_byte, align 8
  %73 = load i64, i64* %components, align 8
  %call61 = call i8* @SDATA(i64 %73)
  %arrayidx = getelementptr inbounds i8, i8* %call61, i64 %72
  store i8* %arrayidx, i8** %chp, align 8
  %74 = load i8*, i8** %chp, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %74, i64 0
  %75 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %75 to i32
  %and = and i32 %conv63, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false.67, label %cond.true.64

cond.true.64:                                     ; preds = %if.then.60
  store i32 1, i32* %chlen, align 4
  %76 = load i8*, i8** %chp, align 8
  %arrayidx65 = getelementptr inbounds i8, i8* %76, i64 0
  %77 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %77 to i32
  br label %cond.end.109

cond.false.67:                                    ; preds = %if.then.60
  %78 = load i8*, i8** %chp, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %78, i64 0
  %79 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %79 to i32
  %and70 = and i32 %conv69, 32
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %cond.false.84, label %cond.true.72

cond.true.72:                                     ; preds = %cond.false.67
  store i32 2, i32* %chlen, align 4
  %80 = load i8*, i8** %chp, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %80, i64 0
  %81 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %81 to i32
  %and75 = and i32 %conv74, 31
  %shl = shl i32 %and75, 6
  %82 = load i8*, i8** %chp, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %82, i64 1
  %83 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %83 to i32
  %and78 = and i32 %conv77, 63
  %or = or i32 %shl, %and78
  %84 = load i8*, i8** %chp, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %84, i64 0
  %85 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %85 to i32
  %cmp81 = icmp slt i32 %conv80, 194
  %cond83 = select i1 %cmp81, i32 4194176, i32 0
  %add = add nsw i32 %or, %cond83
  br label %cond.end.107

cond.false.84:                                    ; preds = %cond.false.67
  %86 = load i8*, i8** %chp, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %86, i64 0
  %87 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %87 to i32
  %and87 = and i32 %conv86, 16
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %cond.false.103, label %cond.true.89

cond.true.89:                                     ; preds = %cond.false.84
  store i32 3, i32* %chlen, align 4
  %88 = load i8*, i8** %chp, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %88, i64 0
  %89 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %89 to i32
  %and92 = and i32 %conv91, 15
  %shl93 = shl i32 %and92, 12
  %90 = load i8*, i8** %chp, align 8
  %arrayidx94 = getelementptr inbounds i8, i8* %90, i64 1
  %91 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %91 to i32
  %and96 = and i32 %conv95, 63
  %shl97 = shl i32 %and96, 6
  %or98 = or i32 %shl93, %shl97
  %92 = load i8*, i8** %chp, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %92, i64 2
  %93 = load i8, i8* %arrayidx99, align 1
  %conv100 = zext i8 %93 to i32
  %and101 = and i32 %conv100, 63
  %or102 = or i32 %or98, %and101
  br label %cond.end.105

cond.false.103:                                   ; preds = %cond.false.84
  %94 = load i8*, i8** %chp, align 8
  %call104 = call i32 @string_char(i8* %94, i8** null, i32* %chlen)
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.false.103, %cond.true.89
  %cond106 = phi i32 [ %or102, %cond.true.89 ], [ %call104, %cond.false.103 ]
  br label %cond.end.107

cond.end.107:                                     ; preds = %cond.end.105, %cond.true.72
  %cond108 = phi i32 [ %add, %cond.true.72 ], [ %cond106, %cond.end.105 ]
  br label %cond.end.109

cond.end.109:                                     ; preds = %cond.end.107, %cond.true.64
  %cond110 = phi i32 [ %conv66, %cond.true.64 ], [ %cond108, %cond.end.107 ]
  %95 = load i32*, i32** %buf.addr, align 8
  store i32 %cond110, i32* %95, align 4
  %96 = load i32, i32* %chlen, align 4
  %conv111 = sext i32 %96 to i64
  %97 = load i64, i64* %i_byte, align 8
  %add112 = add nsw i64 %97, %conv111
  store i64 %add112, i64* %i_byte, align 8
  br label %if.end

if.else.113:                                      ; preds = %do.body.57
  %98 = load i64, i64* %components, align 8
  %99 = load i64, i64* %i_byte, align 8
  %call114 = call zeroext i8 @SREF(i64 %98, i64 %99)
  %conv115 = zext i8 %call114 to i32
  %100 = load i32*, i32** %buf.addr, align 8
  store i32 %conv115, i32* %100, align 4
  %101 = load i64, i64* %i_byte, align 8
  %inc116 = add nsw i64 %101, 1
  store i64 %inc116, i64* %i_byte, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.113, %cond.end.109
  br label %do.end.117

do.end.117:                                       ; preds = %if.end
  %102 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr118 = getelementptr inbounds i32, i32* %102, i32 1
  store i32* %incdec.ptr118, i32** %buf.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.155

if.else.119:                                      ; preds = %if.else.51
  %103 = load i64, i64* %components, align 8
  %and120 = and i64 %103, 7
  %conv121 = trunc i64 %and120 to i32
  %and122 = and i32 %conv121, -5
  %cmp123 = icmp eq i32 %and122, 2
  br i1 %cmp123, label %if.then.125, label %if.else.129

if.then.125:                                      ; preds = %if.else.119
  store i64 1, i64* %len, align 8
  %104 = load i64, i64* %components, align 8
  %shr126 = ashr i64 %104, 2
  %conv127 = trunc i64 %shr126 to i32
  %105 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr128 = getelementptr inbounds i32, i32* %105, i32 1
  store i32* %incdec.ptr128, i32** %buf.addr, align 8
  store i32 %conv127, i32* %105, align 4
  br label %if.end.154

if.else.129:                                      ; preds = %if.else.119
  %106 = load i64, i64* %components, align 8
  %and130 = and i64 %106, 7
  %conv131 = trunc i64 %and130 to i32
  %cmp132 = icmp eq i32 %conv131, 3
  br i1 %cmp132, label %if.then.134, label %if.else.152

if.then.134:                                      ; preds = %if.else.129
  store i64 0, i64* %len, align 8
  br label %for.cond.135

for.cond.135:                                     ; preds = %for.inc.146, %if.then.134
  %107 = load i64, i64* %components, align 8
  %and136 = and i64 %107, 7
  %conv137 = trunc i64 %and136 to i32
  %cmp138 = icmp eq i32 %conv137, 3
  br i1 %cmp138, label %for.body.140, label %for.end.151

for.body.140:                                     ; preds = %for.cond.135
  %108 = load i64, i64* %components, align 8
  %sub141 = sub nsw i64 %108, 3
  %109 = inttoptr i64 %sub141 to i8*
  %110 = bitcast i8* %109 to %struct.Lisp_Cons*
  %car142 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %110, i32 0, i32 0
  %111 = load i64, i64* %car142, align 8
  %shr143 = ashr i64 %111, 2
  %conv144 = trunc i64 %shr143 to i32
  %112 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr145 = getelementptr inbounds i32, i32* %112, i32 1
  store i32* %incdec.ptr145, i32** %buf.addr, align 8
  store i32 %conv144, i32* %112, align 4
  br label %for.inc.146

for.inc.146:                                      ; preds = %for.body.140
  %113 = load i64, i64* %len, align 8
  %inc147 = add nsw i64 %113, 1
  store i64 %inc147, i64* %len, align 8
  %114 = load i64, i64* %components, align 8
  %sub148 = sub nsw i64 %114, 3
  %115 = inttoptr i64 %sub148 to i8*
  %116 = bitcast i8* %115 to %struct.Lisp_Cons*
  %u149 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %116, i32 0, i32 1
  %cdr150 = bitcast %union.anon.0* %u149 to i64*
  %117 = load i64, i64* %cdr150, align 8
  store i64 %117, i64* %components, align 8
  br label %for.cond.135

for.end.151:                                      ; preds = %for.cond.135
  br label %if.end.153

if.else.152:                                      ; preds = %if.else.129
  call void @emacs_abort() #6
  unreachable

if.end.153:                                       ; preds = %for.end.151
  br label %if.end.154

if.end.154:                                       ; preds = %if.end.153, %if.then.125
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %while.end
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155, %for.end
  %118 = load i64, i64* %len, align 8
  %119 = load i32*, i32** %head, align 8
  %120 = load i32, i32* %119, align 4
  %conv157 = sext i32 %120 to i64
  %sub158 = sub nsw i64 %conv157, %118
  %conv159 = trunc i64 %sub158 to i32
  store i32 %conv159, i32* %119, align 4
  br label %if.end.160

if.end.160:                                       ; preds = %if.end.156, %do.end.19
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.160, %if.else.3
  %121 = load i64, i64* %end, align 8
  %122 = load i64, i64* %limit.addr, align 8
  %123 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object162 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %123, i32 0, i32 16
  %124 = load i64, i64* %src_object162, align 8
  %call163 = call zeroext i1 @find_composition(i64 %121, i64 %122, i64* %start, i64* %end, i64* %prop, i64 %124)
  br i1 %call163, label %land.lhs.true, label %if.else.168

land.lhs.true:                                    ; preds = %if.end.161
  %125 = load i64, i64* %end, align 8
  %126 = load i64, i64* %limit.addr, align 8
  %cmp165 = icmp sle i64 %125, %126
  br i1 %cmp165, label %if.then.167, label %if.else.168

if.then.167:                                      ; preds = %land.lhs.true
  %127 = load i64, i64* %start, align 8
  %128 = load i64*, i64** %stop.addr, align 8
  store i64 %127, i64* %128, align 8
  br label %if.end.169

if.else.168:                                      ; preds = %land.lhs.true, %if.end.161
  %129 = load i64, i64* %limit.addr, align 8
  %130 = load i64*, i64** %stop.addr, align 8
  store i64 %129, i64* %130, align 8
  br label %if.end.169

if.end.169:                                       ; preds = %if.else.168, %if.then.167
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %if.then.2
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %if.then
  %131 = load i32*, i32** %buf.addr, align 8
  ret i32* %131
}

; Function Attrs: nounwind uwtable
define internal i32* @handle_charset_annotation(i64 %pos, i64 %limit, %struct.coding_system* %coding, i32* %buf, i64* %stop) #0 {
entry:
  %pos.addr = alloca i64, align 8
  %limit.addr = alloca i64, align 8
  %coding.addr = alloca %struct.coding_system*, align 8
  %buf.addr = alloca i32*, align 8
  %stop.addr = alloca i64*, align 8
  %val = alloca i64, align 8
  %next = alloca i64, align 8
  %id = alloca i32, align 4
  store i64 %pos, i64* %pos.addr, align 8
  store i64 %limit, i64* %limit.addr, align 8
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  store i32* %buf, i32** %buf.addr, align 8
  store i64* %stop, i64** %stop.addr, align 8
  %0 = load i64, i64* %pos.addr, align 8
  %shl = shl i64 %0, 2
  %add = add i64 %shl, 2
  %call = call i64 @builtin_lisp_symbol(i32 261)
  %1 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object = getelementptr inbounds %struct.coding_system, %struct.coding_system* %1, i32 0, i32 16
  %2 = load i64, i64* %src_object, align 8
  %call1 = call i64 @Fget_text_property(i64 %add, i64 %call, i64 %2)
  store i64 %call1, i64* %val, align 8
  %3 = load i64, i64* %val, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call2
  br i1 %cmp, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* @Vcharset_hash_table, align 8
  %call3 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %4)
  %5 = load i64, i64* %val, align 8
  %call4 = call i64 @hash_lookup(%struct.Lisp_Hash_Table* %call3, i64 %5, i64* null)
  %cmp5 = icmp sge i64 %call4, 0
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load i64, i64* %val, align 8
  %7 = load i64, i64* @Vcharset_hash_table, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %call7 = call i64 @Fgethash(i64 %6, i64 %7, i64 %call6)
  %call8 = call i64 @AREF(i64 %call7, i64 0)
  %shr = ashr i64 %call8, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %id, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 -1, i32* %id, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body.9

do.body.9:                                        ; preds = %do.body
  %8 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %8, i32 1
  store i32* %incdec.ptr, i32** %buf.addr, align 8
  store i32 -4, i32* %8, align 4
  %9 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr10 = getelementptr inbounds i32, i32* %9, i32 1
  store i32* %incdec.ptr10, i32** %buf.addr, align 8
  store i32 3, i32* %9, align 4
  %10 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr11 = getelementptr inbounds i32, i32* %10, i32 1
  store i32* %incdec.ptr11, i32** %buf.addr, align 8
  store i32 0, i32* %10, align 4
  %11 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %annotated = getelementptr inbounds %struct.coding_system, %struct.coding_system* %11, i32 0, i32 1
  %bf.load = load i32, i32* %annotated, align 8
  %bf.clear = and i32 %bf.load, -8388609
  %bf.set = or i32 %bf.clear, 8388608
  store i32 %bf.set, i32* %annotated, align 8
  br label %do.end

do.end:                                           ; preds = %do.body.9
  %12 = load i32, i32* %id, align 4
  %13 = load i32*, i32** %buf.addr, align 8
  %incdec.ptr12 = getelementptr inbounds i32, i32* %13, i32 1
  store i32* %incdec.ptr12, i32** %buf.addr, align 8
  store i32 %12, i32* %13, align 4
  br label %do.end.13

do.end.13:                                        ; preds = %do.end
  %14 = load i64, i64* %pos.addr, align 8
  %shl14 = shl i64 %14, 2
  %add15 = add i64 %shl14, 2
  %call16 = call i64 @builtin_lisp_symbol(i32 261)
  %15 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %src_object17 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %15, i32 0, i32 16
  %16 = load i64, i64* %src_object17, align 8
  %17 = load i64, i64* %limit.addr, align 8
  %shl18 = shl i64 %17, 2
  %add19 = add i64 %shl18, 2
  %call20 = call i64 @Fnext_single_property_change(i64 %add15, i64 %call16, i64 %16, i64 %add19)
  store i64 %call20, i64* %next, align 8
  %18 = load i64, i64* %next, align 8
  %shr21 = ashr i64 %18, 2
  %19 = load i64*, i64** %stop.addr, align 8
  store i64 %shr21, i64* %19, align 8
  %20 = load i32*, i32** %buf.addr, align 8
  ret i32* %20
}

declare zeroext i1 @find_composition(i64, i64, i64*, i64*, i64*, i64) #1

declare i32 @composition_method(i64) #1

declare zeroext i1 @composition_registered_p(i64) #1

declare zeroext i8 @SREF(i64, i64) #1

declare i64 @Fget_text_property(i64, i64, i64) #1

declare i64 @Fnext_single_property_change(i64, i64, i64, i64) #1

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #4

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn }
attributes #7 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
