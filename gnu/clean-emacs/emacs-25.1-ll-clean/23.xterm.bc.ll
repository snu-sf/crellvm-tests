; ModuleID = './src/xterm.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.x_display_info = type { %struct.x_display_info*, %struct.terminal*, %struct._XDisplay*, i32, i64, i32, %struct.Screen*, double, double, %struct.Visual*, i64, i32, i32, i64, i64, i64, i64, i64, i64, void (%struct.frame*, i1)*, %struct._GdkCursor*, %struct._XrmHashBucketRec*, i32, i32, %struct._XGC*, %struct.Mouse_HLInfo, i32, i8*, i32, %struct.x_bitmap_record*, i64, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.scroll_bar*, i64, i32, i32, %struct.XRectangle, i64, i64, %struct._XIM*, %struct.XIMStyles*, %struct.xim_inst_t*, %struct.color_name_cache_entry*, %struct.XColor*, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i64, i64, i64, i64, i64*, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.xcb_connection_t* }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.vectorlike_header = type { i64 }
%struct.kboard = type { %struct.kboard*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, i64, i32, i64, i8, i8, i64 }
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct.timespec = type { i64, i64 }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type { %struct.tty_display_info*, i8*, i8*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct.emacs_tty*, i8, i32, %struct.terminal*, %struct.cm*, i64, %struct.frame*, i32, %struct.Mouse_HLInfo, [4096 x i8], [4096 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.emacs_tty = type opaque
%struct.cm = type opaque
%struct.coding_system = type { i64, i32, i32, %union.anon.6, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.6 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%struct.glyph_slice = type { i64 }
%union.anon.1 = type { i32 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.7, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.xwidget = type opaque
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.text_pos = type { i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%struct._XDisplay = type opaque
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._GdkCursor = type { i32, i32 }
%struct._XrmHashBucketRec = type opaque
%struct._XGC = type opaque
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.x_bitmap_record = type { i64, i8, i64, i8*, i32, i32, i32, i32 }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type { %struct.tty_display_info* }
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.scroll_bar = type { %struct.vectorlike_header, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct._XIM = type opaque
%struct.XIMStyles = type { i16, i64* }
%struct.xim_inst_t = type { %struct.x_display_info*, i8* }
%struct.color_name_cache_entry = type { %struct.color_name_cache_entry*, %struct.XColor, i8* }
%struct.XColor = type { i64, i16, i16, i16, i8, i8 }
%struct.xcb_connection_t = type opaque
%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.x_error_message_stack = type { [200 x i8], %struct._XDisplay*, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)*, i8*, %struct.x_error_message_stack* }
%struct.XErrorEvent = type { i32, %struct._XDisplay*, i64, i64, i8, i8, i8 }
%struct.Lisp_Symbol = type { i16, i64, %union.anon.14, i64, i64, %struct.Lisp_Symbol* }
%union.anon.14 = type { i64 }
%struct.anon.15 = type { i8*, i32 }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.hash_table_test = type { i64, i64, i64, i1 (%struct.hash_table_test*, i64, i64)*, i64 (%struct.hash_table_test*, i64)* }
%struct._XComposeStatus = type { i8*, i32 }
%struct.x_output = type { i32, i32, i32, i32, i32, i64, %struct._XGC*, %struct._XGC*, %struct._XGC*, i64, i64, i64, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i8, %struct._GdkGeometry, i64, %struct._GtkTooltip*, %struct._GtkWidget*, %struct._GtkWindow*, i64, %struct.font*, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.XWMHints, %struct.x_display_info*, %union._XEvent*, i8, %struct._XIC*, i64, %struct._XOC*, %struct.relief, %struct.relief, i64, i32, i32, i32 }
%struct._GdkGeometry = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32 }
%struct._GtkTooltip = type opaque
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GdkFont = type { i32, i32, i32 }
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDrawable = type { %struct._GObject }
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._cairo_font_options = type opaque
%struct.XWMHints = type { i64, i32, i32, i64, i64, i32, i32, i64, i64 }
%union._XEvent = type { [24 x i64] }
%struct._XIC = type opaque
%struct._XOC = type opaque
%struct.relief = type { %struct._XGC*, i64 }
%struct.Lisp_Cons = type { i64, %union.anon.11 }
%union.anon.11 = type { i64 }
%struct.XTextProperty = type { i8*, i64, i32, i64 }
%struct.Lisp_Process = type opaque
%struct.fd_set = type { [16 x i64] }
%struct.anon.12 = type { %struct._XExtData*, %struct._XPrivate*, i32, i32, i32, i32, i8*, i64, i64, i64, i32, i64 (%struct._XDisplay*)*, i32, i32, i32, i32, i32, %struct.ScreenFormat*, i32, i32, %struct._XPrivate*, %struct._XPrivate*, i32, i64, i64, i8*, i8*, i8*, i8*, i32, %struct._XrmHashBucketRec*, i32 (%struct._XDisplay*)*, i8*, i32, i32, %struct.Screen*, i64, i64, i32, i32, i8*, i8*, i32, i8* }
%struct.ScreenFormat = type { %struct._XExtData*, i32, i32, i32 }
%struct._XPrivate = type opaque
%struct.__sigset_t = type { [16 x i64] }
%struct.XClientMessageEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i32, %union.anon.5 }
%union.anon.5 = type { [5 x i64] }
%union.Aligned_String = type { %struct.Lisp_String }
%struct.Lisp_String = type { i64, i64, %struct.interval*, i8* }
%union._GdkEvent = type { %struct._GdkEventCrossing }
%struct._GdkEventCrossing = type { i32, %struct._GdkDrawable*, i8, %struct._GdkDrawable*, i32, double, double, double, double, i32, i32, i32, i32 }
%struct.XAnyEvent = type { i32, i64, i32, %struct._XDisplay*, i64 }
%struct.XModifierKeymap = type { i32, i8* }
%union.buffered_input_event = type { %struct.input_event }
%struct.XSelectionClearEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64 }
%struct.XSelectionRequestEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i64, i64, i64 }
%struct.XKeyEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.XSelectionEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i64, i64 }
%struct.selection_input_event = type { i16, %struct.x_display_info*, i64, i64, i64, i64, i64 }
%struct.XPropertyEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i32 }
%struct.XReparentEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i32, i32, i32 }
%struct.XExposeEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i32, i32, i32, i32, i32 }
%struct.XGraphicsExposeEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.XUnmapEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i32 }
%struct.XMapEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i32 }
%struct.XCrossingEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.XMotionEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i8, i32 }
%struct.XConfigureEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i32, i32, i32, i32, i32, i64, i32 }
%struct.XButtonEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.XMappingEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i32, i32, i32 }
%struct.XFocusChangeEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i32, i32 }
%struct.Lisp_Vector = type { %struct.vectorlike_header, [0 x i64] }
%struct.xcb_get_property_cookie_t = type { i32 }
%struct.xcb_get_property_reply_t = type { i8, i8, i16, i32, i32, i32, i32, [12 x i8] }
%struct.xcb_generic_error_t = type { i8, i8, i16, i32, i16, i8, i8, [5 x i32], i32 }
%struct.XIMCallback = type { i8*, void (%struct._XIM*, i8*, i8*)* }
%struct.XGCValues = type { i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i64, i32, i32, i32, i32, i64, i32, i8 }
%struct.anon.2 = type { i32 }
%struct.XSetWindowAttributes = type { i64, i64, i64, i64, i32, i32, i32, i64, i64, i32, i64, i64, i32, i64, i64 }
%struct.Lisp_Hash_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.hash_table_test, %struct.Lisp_Hash_Table* }
%struct.anon.4 = type { i32 }
%struct.anon.0 = type { i16, i16, i16, i16 }
%struct._GdkGCValues = type { %struct._GdkColor, %struct._GdkColor, %struct._GdkFont*, i32, i32, %struct._GdkDrawable*, %struct._GdkDrawable*, %struct._GdkDrawable*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._GtkRange = type { %struct._GtkWidget, %struct._GtkAdjustment*, i32, i8, i32, i32, %struct._GdkRectangle, i32, i32, i32, i8, %struct._GtkRangeLayout*, %struct._GtkRangeStepTimer*, i32, i32, i32, %struct._GdkDrawable* }
%struct._GtkAdjustment = type { %struct._GtkObject, double, double, double, double, double, double }
%struct._GtkRangeLayout = type opaque
%struct._GtkRangeStepTimer = type opaque
%struct._GdkEventButton = type { i32, %struct._GdkDrawable*, i8, i32, double, double, double*, i32, i32, %struct._GdkDevice*, double, double }
%struct._GdkDevice = type { %struct._GObject, i8*, i32, i32, i32, i32, %struct._GdkDeviceAxis*, i32, %struct._GdkDeviceKey* }
%struct._GdkDeviceAxis = type { i32, double, double }
%struct._GdkDeviceKey = type { i32, i32 }

@use_xim = global i8 1, align 1
@x_display_list = common global %struct.x_display_info* null, align 8
@globals = external global %struct.emacs_globals, align 8
@Vframe_list = external global i64, align 8
@xg_default_icon_file = internal global i64 0, align 8
@gnu_xpm_bits = internal global [288 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.171, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.175, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.202, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.203, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.204, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.205, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.206, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.208, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.209, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.210, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.211, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.213, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.214, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.215, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.216, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.217, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.218, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.219, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.220, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.221, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.223, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.225, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.227, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.228, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.229, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.230, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.231, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.232, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.233, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.234, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.235, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.236, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.237, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.240, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.242, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.243, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.244, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.245, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.246, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.247, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.248, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.249, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.250, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.251, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.252, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.253, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.254, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.255, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.256, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.257, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.258, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.259, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.260, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.261, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.262, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.263, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.264, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.265, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.266, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.267, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.268, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.269, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.271, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.272, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.273, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.274, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.275, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.277, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.278, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.279, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.280, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.281, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.282, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.284, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.285, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.286, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.287, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.288, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.289, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.290, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.291, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.292, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.293, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.294, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.295, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.296, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.297, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.298, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.299, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.300, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.301, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.302, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.303, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.304, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.305, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.306, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.307, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.308, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.309, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.310, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.311, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.312, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.313, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.314, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.315, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.316, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.317, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.318, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.319, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.320, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.321, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.322, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.323, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.324, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.325, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.326, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.327, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.328, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.329, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.330, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.331, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.332, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.333, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.334, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.335, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.336, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.337, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.338, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.339, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.340, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.341, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.342, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.343, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.344, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.345, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.346, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.347, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.348, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.349, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.350, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.351, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.352, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.353, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.354, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.355, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.356, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.357, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.358, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.359, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.360, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.361, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.362, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.363, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.364, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.365, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.366, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.367, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.368, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.369, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.370, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.371, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.372, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.373, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.374, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.375, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.376, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.377, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.378, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.379, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.380, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.381, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.382, i32 0, i32 0)], align 16
@gnu_xbm_bits = internal global [350 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00`\00\00\00\00\00\00\E0\01\00\00\00\00\00\80\03\00\00\08\00\00\00\0E\00\00\0C\00p\00\1E\00\00\06\C0\DD\014\00\00\07<\07\034\00\80\03\1F\06\06$\00\80\03\0F\04\0C&\00\C0\81\07\00\083\00`\C1\E3\80\BB1\000\E13\FE\FF\18\00\10\F11\C7\E3\1F\00\10\F1\D8\01\05<\00\10\83l\00\1A@\00\10f6T\D5\FF\000<\DB\AB:*\00`\80\E9T5\00\00\E0\E0l\B9j\00\00\807\B6fu\00\00\00\0F\B6\B4j\00\00\00\06\B3wu\00\00\00\E1\19\A7j\00\00\C0\FF\19H\F5\00\00@u\15\AF\EA\00\00\00p5f\D5\00\00\00Xj\80\EA\00\00\00\DC\AA\80\D5\01\00\00\9C'\03\EB\01\00\00\BCe\04\D4\01\00\00<U\EDk\03\00\00>\CD*>\02\00\00~\B9*\B8\03\00\00|\93=\91\03\00\00|vw\96\01\00\00\F8m\F6\C4\01\00\00\F8\DD\FE\C3\01\00\00\F0\B1\FD\FC\01\00\00\D0/\E7\C1\00\00\00\C0O\E6a\00\00\00\80\FF\F6\7F\00\00\00\80\FE\1C>\00\00\00\00\FA\1F\00\00\00\00\00\F8\0F\00\00\00\00\00\A0\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@x_error_message = internal global %struct.x_error_message_stack* null, align 8
@tip_frame = external global i64, align 8
@interrupt_input_blocked = external global i32, align 4
@pending_signals = external global i8, align 1
@poll_suppress_count = external global i32, align 4
@.str = private unnamed_addr constant [49 x i8] c"Can't notify window manager of window withdrawal\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"Can't notify window manager of iconification\00", align 1
@x_initialized = internal global i32 0, align 4
@.str.2 = private unnamed_addr constant [27 x i8] c"Display %s can't be opened\00", align 1
@x_term_init.display_opt = internal global [10 x i8] c"--display\00", align 1
@x_term_init.name_opt = internal global [7 x i8] c"--name\00", align 1
@initial_argv = external global i8**, align 8
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"GLib\00", align 1
@gdk_display = external global %struct._XDisplay*, align 8
@.str.5 = private unnamed_addr constant [17 x i8] c"~/.emacs.d/gtkrc\00", align 1
@lispsym = external global [1074 x %struct.Lisp_Symbol], align 8
@terminal_list = external global %struct.terminal*, align 8
@empty_unibyte_string = external global i64, align 8
@current_kboard = external global %struct.kboard*, align 8
@initial_kboard = external global %struct.kboard*, align 8
@x_display_id = internal global i32 0, align 4
@.str.6 = private unnamed_addr constant [6 x i8] c"Emacs\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"privateColormap\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"PrivateColormap\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"on\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Xft\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"dpi\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@x_term_init.atom_refs = internal constant [54 x %struct.anon.15] [%struct.anon.15 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i32 0, i32 0), i32 328 }, %struct.anon.15 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 336 }, %struct.anon.15 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i32 0, i32 0), i32 344 }, %struct.anon.15 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17, i32 0, i32 0), i32 352 }, %struct.anon.15 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0), i32 360 }, %struct.anon.15 { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.19, i32 0, i32 0), i32 368 }, %struct.anon.15 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i32 376 }, %struct.anon.15 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i32 0, i32 0), i32 384 }, %struct.anon.15 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i32 392 }, %struct.anon.15 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i32 400 }, %struct.anon.15 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i32 408 }, %struct.anon.15 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i32 416 }, %struct.anon.15 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0), i32 432 }, %struct.anon.15 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i32 440 }, %struct.anon.15 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 424 }, %struct.anon.15 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29, i32 0, i32 0), i32 448 }, %struct.anon.15 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i32 456 }, %struct.anon.15 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i32 0, i32 0), i32 464 }, %struct.anon.15 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 472 }, %struct.anon.15 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i32 480 }, %struct.anon.15 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 488 }, %struct.anon.15 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i32 496 }, %struct.anon.15 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.36, i32 0, i32 0), i32 504 }, %struct.anon.15 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i32 592 }, %struct.anon.15 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.38, i32 0, i32 0), i32 512 }, %struct.anon.15 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.39, i32 0, i32 0), i32 520 }, %struct.anon.15 { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.40, i32 0, i32 0), i32 528 }, %struct.anon.15 { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.41, i32 0, i32 0), i32 536 }, %struct.anon.15 { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.42, i32 0, i32 0), i32 544 }, %struct.anon.15 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i32 552 }, %struct.anon.15 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0), i32 560 }, %struct.anon.15 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i32 568 }, %struct.anon.15 { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.46, i32 0, i32 0), i32 576 }, %struct.anon.15 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i32 584 }, %struct.anon.15 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.48, i32 0, i32 0), i32 864 }, %struct.anon.15 { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.49, i32 0, i32 0), i32 872 }, %struct.anon.15 { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.50, i32 0, i32 0), i32 880 }, %struct.anon.15 { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.51, i32 0, i32 0), i32 888 }, %struct.anon.15 { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.52, i32 0, i32 0), i32 896 }, %struct.anon.15 { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.53, i32 0, i32 0), i32 904 }, %struct.anon.15 { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0), i32 840 }, %struct.anon.15 { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.55, i32 0, i32 0), i32 848 }, %struct.anon.15 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.56, i32 0, i32 0), i32 976 }, %struct.anon.15 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57, i32 0, i32 0), i32 968 }, %struct.anon.15 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.58, i32 0, i32 0), i32 800 }, %struct.anon.15 { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.59, i32 0, i32 0), i32 808 }, %struct.anon.15 { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.60, i32 0, i32 0), i32 984 }, %struct.anon.15 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 856 }, %struct.anon.15 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.62, i32 0, i32 0), i32 912 }, %struct.anon.15 { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.63, i32 0, i32 0), i32 920 }, %struct.anon.15 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i32 928 }, %struct.anon.15 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i32 0, i32 0), i32 992 }, %struct.anon.15 { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.66, i32 0, i32 0), i32 944 }, %struct.anon.15 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i32 0, i32 0), i32 952 }], align 16
@.str.14 = private unnamed_addr constant [13 x i8] c"WM_PROTOCOLS\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"WM_TAKE_FOCUS\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"WM_SAVE_YOURSELF\00", align 1
@.str.17 = private unnamed_addr constant [17 x i8] c"WM_DELETE_WINDOW\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"WM_CHANGE_STATE\00", align 1
@.str.19 = private unnamed_addr constant [20 x i8] c"WM_CONFIGURE_DENIED\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"WM_MOVED\00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"WM_CLIENT_LEADER\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"Editres\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"CLIPBOARD\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"TIMESTAMP\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"TEXT\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"COMPOUND_TEXT\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"UTF8_STRING\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"DELETE\00", align 1
@.str.29 = private unnamed_addr constant [9 x i8] c"MULTIPLE\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"INCR\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"_EMACS_TMP_\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"TARGETS\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"ATOM\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"ATOM_PAIR\00", align 1
@.str.36 = private unnamed_addr constant [18 x i8] c"CLIPBOARD_MANAGER\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"_XEMBED_INFO\00", align 1
@.str.38 = private unnamed_addr constant [11 x i8] c"PIXEL_SIZE\00", align 1
@.str.39 = private unnamed_addr constant [14 x i8] c"AVERAGE_WIDTH\00", align 1
@.str.40 = private unnamed_addr constant [22 x i8] c"_MULE_BASELINE_OFFSET\00", align 1
@.str.41 = private unnamed_addr constant [23 x i8] c"_MULE_RELATIVE_COMPOSE\00", align 1
@.str.42 = private unnamed_addr constant [21 x i8] c"_MULE_DEFAULT_ASCENT\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"DONE\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"PAGE\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"SCROLLBAR\00", align 1
@.str.46 = private unnamed_addr constant [21 x i8] c"HORIZONTAL_SCROLLBAR\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"_XEMBED\00", align 1
@.str.48 = private unnamed_addr constant [14 x i8] c"_NET_WM_STATE\00", align 1
@.str.49 = private unnamed_addr constant [25 x i8] c"_NET_WM_STATE_FULLSCREEN\00", align 1
@.str.50 = private unnamed_addr constant [29 x i8] c"_NET_WM_STATE_MAXIMIZED_HORZ\00", align 1
@.str.51 = private unnamed_addr constant [29 x i8] c"_NET_WM_STATE_MAXIMIZED_VERT\00", align 1
@.str.52 = private unnamed_addr constant [21 x i8] c"_NET_WM_STATE_STICKY\00", align 1
@.str.53 = private unnamed_addr constant [21 x i8] c"_NET_WM_STATE_HIDDEN\00", align 1
@.str.54 = private unnamed_addr constant [20 x i8] c"_NET_WM_WINDOW_TYPE\00", align 1
@.str.55 = private unnamed_addr constant [28 x i8] c"_NET_WM_WINDOW_TYPE_TOOLTIP\00", align 1
@.str.56 = private unnamed_addr constant [18 x i8] c"_NET_WM_ICON_NAME\00", align 1
@.str.57 = private unnamed_addr constant [13 x i8] c"_NET_WM_NAME\00", align 1
@.str.58 = private unnamed_addr constant [15 x i8] c"_NET_SUPPORTED\00", align 1
@.str.59 = private unnamed_addr constant [25 x i8] c"_NET_SUPPORTING_WM_CHECK\00", align 1
@.str.60 = private unnamed_addr constant [23 x i8] c"_NET_WM_WINDOW_OPACITY\00", align 1
@.str.61 = private unnamed_addr constant [19 x i8] c"_NET_ACTIVE_WINDOW\00", align 1
@.str.62 = private unnamed_addr constant [19 x i8] c"_NET_FRAME_EXTENTS\00", align 1
@.str.63 = private unnamed_addr constant [21 x i8] c"_NET_CURRENT_DESKTOP\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"_NET_WORKAREA\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"SM_CLIENT_ID\00", align 1
@.str.66 = private unnamed_addr constant [20 x i8] c"_XSETTINGS_SETTINGS\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"MANAGER\00", align 1
@x_term_init.xsettings_fmt = internal constant [15 x i8] c"_XSETTINGS_S%d\00", align 1
@gray_bits = internal global [2 x i8] c"\01\02", align 1
@interrupt_input = external global i8, align 1
@.str.68 = private unnamed_addr constant [12 x i8] c"synchronous\00", align 1
@.str.69 = private unnamed_addr constant [12 x i8] c"Synchronous\00", align 1
@.str.70 = private unnamed_addr constant [7 x i8] c"useXIM\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"UseXIM\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"off\00", align 1
@daemon_pipe = external global [2 x i32], align 4
@.str.74 = private unnamed_addr constant [25 x i8] c"GDK_CORE_DEVICE_EVENTS=1\00", align 1
@.str.75 = private unnamed_addr constant [38 x i8] c"icons/hicolor/scalable/apps/emacs.svg\00", align 1
@syms_of_xterm.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.76 = private unnamed_addr constant [36 x i8] c"x-use-underline-position-properties\00", align 1
@syms_of_xterm.b_fwd.77 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.78 = private unnamed_addr constant [28 x i8] c"x-underline-at-descent-line\00", align 1
@syms_of_xterm.b_fwd.79 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.80 = private unnamed_addr constant [36 x i8] c"x-mouse-click-focus-ignore-position\00", align 1
@syms_of_xterm.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.81 = private unnamed_addr constant [22 x i8] c"x-toolkit-scroll-bars\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"gtk\00", align 1
@syms_of_xterm.o_fwd.83 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.84 = private unnamed_addr constant [13 x i8] c"x-alt-keysym\00", align 1
@syms_of_xterm.o_fwd.85 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.86 = private unnamed_addr constant [15 x i8] c"x-hyper-keysym\00", align 1
@syms_of_xterm.o_fwd.87 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.88 = private unnamed_addr constant [14 x i8] c"x-meta-keysym\00", align 1
@syms_of_xterm.o_fwd.89 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.90 = private unnamed_addr constant [15 x i8] c"x-super-keysym\00", align 1
@syms_of_xterm.o_fwd.91 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.92 = private unnamed_addr constant [15 x i8] c"x-keysym-table\00", align 1
@hashtest_eql = external global %struct.hash_table_test, align 8
@syms_of_xterm.b_fwd.93 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.94 = private unnamed_addr constant [34 x i8] c"x-frame-normalize-before-maximize\00", align 1
@.str.95 = private unnamed_addr constant [12 x i8] c"32 32 255 2\00", align 1
@.str.96 = private unnamed_addr constant [19 x i8] c"AA c #FFFFFFFFFFFF\00", align 1
@.str.97 = private unnamed_addr constant [19 x i8] c"BA c #58585454A9A9\00", align 1
@.str.98 = private unnamed_addr constant [19 x i8] c"CA c #181817175757\00", align 1
@.str.99 = private unnamed_addr constant [19 x i8] c"DA c #393937377777\00", align 1
@.str.100 = private unnamed_addr constant [19 x i8] c"EA c #5E5E5A5AACAC\00", align 1
@.str.101 = private unnamed_addr constant [19 x i8] c"FA c #7E7E7E7E8C8C\00", align 1
@.str.102 = private unnamed_addr constant [19 x i8] c"GA c #73737171B7B7\00", align 1
@.str.103 = private unnamed_addr constant [19 x i8] c"HA c #393936368787\00", align 1
@.str.104 = private unnamed_addr constant [19 x i8] c"IA c #EEEEEEEEF7F7\00", align 1
@.str.105 = private unnamed_addr constant [19 x i8] c"JA c #010101013939\00", align 1
@.str.106 = private unnamed_addr constant [19 x i8] c"KA c #7E7E7C7CBCBC\00", align 1
@.str.107 = private unnamed_addr constant [19 x i8] c"LA c #78787575B9B9\00", align 1
@.str.108 = private unnamed_addr constant [19 x i8] c"MA c #57575252ABAB\00", align 1
@.str.109 = private unnamed_addr constant [19 x i8] c"NA c #9E9E9D9DCDCD\00", align 1
@.str.110 = private unnamed_addr constant [19 x i8] c"OA c #76767474B8B8\00", align 1
@.str.111 = private unnamed_addr constant [19 x i8] c"PA c #86868484C1C1\00", align 1
@.str.112 = private unnamed_addr constant [19 x i8] c"AB c #EDEDECECF6F6\00", align 1
@.str.113 = private unnamed_addr constant [19 x i8] c"BB c #54545151A5A5\00", align 1
@.str.114 = private unnamed_addr constant [19 x i8] c"CB c #4D4D4A4A9A9A\00", align 1
@.str.115 = private unnamed_addr constant [19 x i8] c"DB c #F4F4F4F4FAFA\00", align 1
@.str.116 = private unnamed_addr constant [19 x i8] c"EB c #96969494C9C9\00", align 1
@.str.117 = private unnamed_addr constant [19 x i8] c"FB c #222222225353\00", align 1
@.str.118 = private unnamed_addr constant [19 x i8] c"GB c #8C8C8C8C9595\00", align 1
@.str.119 = private unnamed_addr constant [19 x i8] c"HB c #6A6A6868B2B2\00", align 1
@.str.120 = private unnamed_addr constant [19 x i8] c"IB c #D2D2D1D1E8E8\00", align 1
@.str.121 = private unnamed_addr constant [19 x i8] c"JB c #F0F0F0F0F7F7\00", align 1
@.str.122 = private unnamed_addr constant [19 x i8] c"KB c #3E3E3D3D6C6C\00", align 1
@.str.123 = private unnamed_addr constant [19 x i8] c"LB c #CECECECEE6E6\00", align 1
@.str.124 = private unnamed_addr constant [19 x i8] c"MB c #ADADABABD6D6\00", align 1
@.str.125 = private unnamed_addr constant [19 x i8] c"NB c #91918F8FC6C6\00", align 1
@.str.126 = private unnamed_addr constant [19 x i8] c"OB c #5D5D5A5AACAC\00", align 1
@.str.127 = private unnamed_addr constant [19 x i8] c"PB c #E8E8E8E8F4F4\00", align 1
@.str.128 = private unnamed_addr constant [19 x i8] c"AC c #959595959999\00", align 1
@.str.129 = private unnamed_addr constant [19 x i8] c"BC c #252526266868\00", align 1
@.str.130 = private unnamed_addr constant [19 x i8] c"CC c #555555557D7D\00", align 1
@.str.131 = private unnamed_addr constant [19 x i8] c"DC c #5B5B5858ABAB\00", align 1
@.str.132 = private unnamed_addr constant [19 x i8] c"EC c #7B7B7878BBBB\00", align 1
@.str.133 = private unnamed_addr constant [19 x i8] c"FC c #DDDDDDDDEEEE\00", align 1
@.str.134 = private unnamed_addr constant [19 x i8] c"GC c #55555151ACAC\00", align 1
@.str.135 = private unnamed_addr constant [19 x i8] c"HC c #F0F0F1F1F8F8\00", align 1
@.str.136 = private unnamed_addr constant [19 x i8] c"IC c #111111115252\00", align 1
@.str.137 = private unnamed_addr constant [19 x i8] c"JC c #88888686C2C2\00", align 1
@.str.138 = private unnamed_addr constant [19 x i8] c"KC c #5A5A5858AAAA\00", align 1
@.str.139 = private unnamed_addr constant [19 x i8] c"LC c #60605D5DB1B1\00", align 1
@.str.140 = private unnamed_addr constant [19 x i8] c"MC c #8D8D8A8AC4C4\00", align 1
@.str.141 = private unnamed_addr constant [19 x i8] c"NC c #7C7C7A7ABBBB\00", align 1
@.str.142 = private unnamed_addr constant [19 x i8] c"OC c #E4E4E4E4F5F5\00", align 1
@.str.143 = private unnamed_addr constant [19 x i8] c"PC c #9A9A9898CBCB\00", align 1
@.str.144 = private unnamed_addr constant [19 x i8] c"AD c #F7F7F6F6FAFA\00", align 1
@.str.145 = private unnamed_addr constant [19 x i8] c"BD c #98989696C9C9\00", align 1
@.str.146 = private unnamed_addr constant [19 x i8] c"CD c #F3F3F2F2F9F9\00", align 1
@.str.147 = private unnamed_addr constant [19 x i8] c"DD c #ECECECECF5F5\00", align 1
@.str.148 = private unnamed_addr constant [19 x i8] c"ED c #CACAC9C9E3E3\00", align 1
@.str.149 = private unnamed_addr constant [19 x i8] c"FD c #53534E4EA9A9\00", align 1
@.str.150 = private unnamed_addr constant [19 x i8] c"GD c #8E8E8C8CC5C5\00", align 1
@.str.151 = private unnamed_addr constant [19 x i8] c"HD c #A2A2A1A1CFCF\00", align 1
@.str.152 = private unnamed_addr constant [19 x i8] c"ID c #67676464B0B0\00", align 1
@.str.153 = private unnamed_addr constant [19 x i8] c"JD c #64646161AEAE\00", align 1
@.str.154 = private unnamed_addr constant [19 x i8] c"KD c #9D9D9B9BCCCC\00", align 1
@.str.155 = private unnamed_addr constant [19 x i8] c"LD c #58585454ABAB\00", align 1
@.str.156 = private unnamed_addr constant [19 x i8] c"MD c #6B6B6969B2B2\00", align 1
@.str.157 = private unnamed_addr constant [19 x i8] c"ND c #92929090C7C7\00", align 1
@.str.158 = private unnamed_addr constant [19 x i8] c"OD c #6E6E6C6CB4B4\00", align 1
@.str.159 = private unnamed_addr constant [19 x i8] c"PD c #6C6C6C6C8383\00", align 1
@.str.160 = private unnamed_addr constant [19 x i8] c"AE c #ECECEAEAF5F5\00", align 1
@.str.161 = private unnamed_addr constant [19 x i8] c"BE c #E8E8E8E8F3F3\00", align 1
@.str.162 = private unnamed_addr constant [19 x i8] c"CE c #2C2C2C2C5050\00", align 1
@.str.163 = private unnamed_addr constant [19 x i8] c"DE c #63636060AFAF\00", align 1
@.str.164 = private unnamed_addr constant [19 x i8] c"EE c #7A7A7979BABA\00", align 1
@.str.165 = private unnamed_addr constant [19 x i8] c"FE c #A7A7A5A5D1D1\00", align 1
@.str.166 = private unnamed_addr constant [19 x i8] c"GE c #60605E5EADAD\00", align 1
@.str.167 = private unnamed_addr constant [19 x i8] c"HE c #8A8A8989C3C3\00", align 1
@.str.168 = private unnamed_addr constant [19 x i8] c"IE c #B2B2B1B1D7D7\00", align 1
@.str.169 = private unnamed_addr constant [19 x i8] c"JE c #69696666B5B5\00", align 1
@.str.170 = private unnamed_addr constant [19 x i8] c"KE c #E8E8E7E7F3F3\00", align 1
@.str.171 = private unnamed_addr constant [19 x i8] c"LE c #BCBCBBBBDCDC\00", align 1
@.str.172 = private unnamed_addr constant [19 x i8] c"ME c #DBDBDADAEDED\00", align 1
@.str.173 = private unnamed_addr constant [19 x i8] c"NE c #C0C0BFBFDFDF\00", align 1
@.str.174 = private unnamed_addr constant [19 x i8] c"OE c #2C2C29297777\00", align 1
@.str.175 = private unnamed_addr constant [19 x i8] c"PE c #B4B4B3B3D8D8\00", align 1
@.str.176 = private unnamed_addr constant [19 x i8] c"AF c #66666363B0B0\00", align 1
@.str.177 = private unnamed_addr constant [19 x i8] c"BF c #73737171BABA\00", align 1
@.str.178 = private unnamed_addr constant [19 x i8] c"CF c #83838181BFBF\00", align 1
@.str.179 = private unnamed_addr constant [19 x i8] c"DF c #3E3E3C3C8585\00", align 1
@.str.180 = private unnamed_addr constant [19 x i8] c"EF c #80807E7EBDBD\00", align 1
@.str.181 = private unnamed_addr constant [19 x i8] c"FF c #616161618383\00", align 1
@.str.182 = private unnamed_addr constant [19 x i8] c"GF c #70706F6FB5B5\00", align 1
@.str.183 = private unnamed_addr constant [19 x i8] c"HF c #88888787C6C6\00", align 1
@.str.184 = private unnamed_addr constant [19 x i8] c"IF c #DCDCDBDBEDED\00", align 1
@.str.185 = private unnamed_addr constant [19 x i8] c"JF c #62625F5FAEAE\00", align 1
@.str.186 = private unnamed_addr constant [19 x i8] c"KF c #72726F6FB6B6\00", align 1
@.str.187 = private unnamed_addr constant [19 x i8] c"LF c #D1D1D0D0E8E8\00", align 1
@.str.188 = private unnamed_addr constant [19 x i8] c"MF c #8B8B8888C4C4\00", align 1
@.str.189 = private unnamed_addr constant [19 x i8] c"NF c #6C6C6A6AB3B3\00", align 1
@.str.190 = private unnamed_addr constant [19 x i8] c"OF c #5A5A5656ACAC\00", align 1
@.str.191 = private unnamed_addr constant [19 x i8] c"PF c #C5C5C4C4E1E1\00", align 1
@.str.192 = private unnamed_addr constant [19 x i8] c"AG c #A1A19F9FCFCF\00", align 1
@.str.193 = private unnamed_addr constant [19 x i8] c"BG c #85858383C0C0\00", align 1
@.str.194 = private unnamed_addr constant [19 x i8] c"CG c #80807E7EBEBE\00", align 1
@.str.195 = private unnamed_addr constant [19 x i8] c"DG c #BEBEBDBDDEDE\00", align 1
@.str.196 = private unnamed_addr constant [19 x i8] c"EG c #61615E5EAFAF\00", align 1
@.str.197 = private unnamed_addr constant [19 x i8] c"FG c #57575353A9A9\00", align 1
@.str.198 = private unnamed_addr constant [19 x i8] c"GG c #313131315C5C\00", align 1
@.str.199 = private unnamed_addr constant [19 x i8] c"HG c #292928285959\00", align 1
@.str.200 = private unnamed_addr constant [19 x i8] c"IG c #6E6E6B6BB5B5\00", align 1
@.str.201 = private unnamed_addr constant [19 x i8] c"JG c #55555050ABAB\00", align 1
@.str.202 = private unnamed_addr constant [19 x i8] c"KG c #E9E9E9E9F4F4\00", align 1
@.str.203 = private unnamed_addr constant [19 x i8] c"LG c #404040406D6D\00", align 1
@.str.204 = private unnamed_addr constant [19 x i8] c"MG c #68686464B1B1\00", align 1
@.str.205 = private unnamed_addr constant [19 x i8] c"NG c #E4E4E4E4F2F2\00", align 1
@.str.206 = private unnamed_addr constant [19 x i8] c"OG c #94949292C8C8\00", align 1
@.str.207 = private unnamed_addr constant [19 x i8] c"PG c #D6D6D4D4E9E9\00", align 1
@.str.208 = private unnamed_addr constant [19 x i8] c"AH c #1D1D1D1D5D5D\00", align 1
@.str.209 = private unnamed_addr constant [19 x i8] c"BH c #D5D5D4D4E9E9\00", align 1
@.str.210 = private unnamed_addr constant [19 x i8] c"CH c #50504C4CA6A6\00", align 1
@.str.211 = private unnamed_addr constant [19 x i8] c"DH c #57575353AAAA\00", align 1
@.str.212 = private unnamed_addr constant [19 x i8] c"EH c #71716E6EB6B6\00", align 1
@.str.213 = private unnamed_addr constant [19 x i8] c"FH c #090909093F3F\00", align 1
@.str.214 = private unnamed_addr constant [19 x i8] c"GH c #61615D5DAFAF\00", align 1
@.str.215 = private unnamed_addr constant [19 x i8] c"HH c #8A8A8787C3C3\00", align 1
@.str.216 = private unnamed_addr constant [19 x i8] c"IH c #7F7F7D7DBDBD\00", align 1
@.str.217 = private unnamed_addr constant [19 x i8] c"JH c #6C6C6868B4B4\00", align 1
@.str.218 = private unnamed_addr constant [19 x i8] c"KH c #6A6A6767B2B2\00", align 1
@.str.219 = private unnamed_addr constant [19 x i8] c"LH c #69696666B2B2\00", align 1
@.str.220 = private unnamed_addr constant [19 x i8] c"MH c #5A5A5656A9A9\00", align 1
@.str.221 = private unnamed_addr constant [19 x i8] c"NH c #56565151ABAB\00", align 1
@.str.222 = private unnamed_addr constant [19 x i8] c"OH c #5B5B5757AAAA\00", align 1
@.str.223 = private unnamed_addr constant [19 x i8] c"PH c #5A5A5656AAAA\00", align 1
@.str.224 = private unnamed_addr constant [19 x i8] c"AI c #5D5D5A5AABAB\00", align 1
@.str.225 = private unnamed_addr constant [19 x i8] c"BI c #5E5E5C5CACAC\00", align 1
@.str.226 = private unnamed_addr constant [19 x i8] c"CI c #5A5A5757AAAA\00", align 1
@.str.227 = private unnamed_addr constant [19 x i8] c"DI c #5F5F5C5CACAC\00", align 1
@.str.228 = private unnamed_addr constant [19 x i8] c"EI c #5F5F5C5CADAD\00", align 1
@.str.229 = private unnamed_addr constant [19 x i8] c"FI c #5F5F5D5DADAD\00", align 1
@.str.230 = private unnamed_addr constant [19 x i8] c"GI c #EBEBEBEBF6F6\00", align 1
@.str.231 = private unnamed_addr constant [19 x i8] c"HI c #59595555A9A9\00", align 1
@.str.232 = private unnamed_addr constant [19 x i8] c"II c #B3B3B2B2D8D8\00", align 1
@.str.233 = private unnamed_addr constant [19 x i8] c"JI c #EAEAEAEAF4F4\00", align 1
@.str.234 = private unnamed_addr constant [19 x i8] c"KI c #E6E6E6E6F4F4\00", align 1
@.str.235 = private unnamed_addr constant [19 x i8] c"LI c #F1F1F1F1F8F8\00", align 1
@.str.236 = private unnamed_addr constant [19 x i8] c"MI c #5F5F5D5DAEAE\00", align 1
@.str.237 = private unnamed_addr constant [19 x i8] c"NI c #E7E7E7E7F3F3\00", align 1
@.str.238 = private unnamed_addr constant [19 x i8] c"OI c #57575454A9A9\00", align 1
@.str.239 = private unnamed_addr constant [19 x i8] c"PI c #F4F4F4F4F9F9\00", align 1
@.str.240 = private unnamed_addr constant [19 x i8] c"AJ c #5C5C5757ADAD\00", align 1
@.str.241 = private unnamed_addr constant [19 x i8] c"BJ c #75757373B8B8\00", align 1
@.str.242 = private unnamed_addr constant [19 x i8] c"CJ c #70706C6CB5B5\00", align 1
@.str.243 = private unnamed_addr constant [19 x i8] c"DJ c #9B9B9A9ACBCB\00", align 1
@.str.244 = private unnamed_addr constant [19 x i8] c"EJ c #FAFAFAFAFCFC\00", align 1
@.str.245 = private unnamed_addr constant [19 x i8] c"FJ c #E7E7E6E6F3F3\00", align 1
@.str.246 = private unnamed_addr constant [19 x i8] c"GJ c #81817F7FBEBE\00", align 1
@.str.247 = private unnamed_addr constant [19 x i8] c"HJ c #EBEBEAEAF4F4\00", align 1
@.str.248 = private unnamed_addr constant [19 x i8] c"IJ c #EBEBEAEAF5F5\00", align 1
@.str.249 = private unnamed_addr constant [19 x i8] c"JJ c #E6E6E6E6F2F2\00", align 1
@.str.250 = private unnamed_addr constant [19 x i8] c"KJ c #EEEEEDEDF6F6\00", align 1
@.str.251 = private unnamed_addr constant [19 x i8] c"LJ c #E2E2E2E2F1F1\00", align 1
@.str.252 = private unnamed_addr constant [19 x i8] c"MJ c #EEEEEEEEF4F4\00", align 1
@.str.253 = private unnamed_addr constant [19 x i8] c"NJ c #E2E2E2E2EFEF\00", align 1
@.str.254 = private unnamed_addr constant [19 x i8] c"OJ c #4C4C4B4B8989\00", align 1
@.str.255 = private unnamed_addr constant [19 x i8] c"PJ c #E5E5E4E4F2F2\00", align 1
@.str.256 = private unnamed_addr constant [19 x i8] c"AK c #484848487474\00", align 1
@.str.257 = private unnamed_addr constant [19 x i8] c"BK c #C2C2C1C1DFDF\00", align 1
@.str.258 = private unnamed_addr constant [19 x i8] c"CK c #7A7A7777BBBB\00", align 1
@.str.259 = private unnamed_addr constant [19 x i8] c"DK c #3F3F3E3E7D7D\00", align 1
@.str.260 = private unnamed_addr constant [19 x i8] c"EK c #EDEDEEEEF6F6\00", align 1
@.str.261 = private unnamed_addr constant [19 x i8] c"FK c #68686666B1B1\00", align 1
@.str.262 = private unnamed_addr constant [19 x i8] c"GK c #65656262AFAF\00", align 1
@.str.263 = private unnamed_addr constant [19 x i8] c"HK c #69696565B3B3\00", align 1
@.str.264 = private unnamed_addr constant [19 x i8] c"IK c #E3E3E2E2F1F1\00", align 1
@.str.265 = private unnamed_addr constant [19 x i8] c"JK c #E3E3E3E3F1F1\00", align 1
@.str.266 = private unnamed_addr constant [19 x i8] c"KK c #D4D4D2D2E8E8\00", align 1
@.str.267 = private unnamed_addr constant [19 x i8] c"LK c #9B9B9A9AB7B7\00", align 1
@.str.268 = private unnamed_addr constant [19 x i8] c"MK c #404040407878\00", align 1
@.str.269 = private unnamed_addr constant [19 x i8] c"NK c #D8D8D8D8EBEB\00", align 1
@.str.270 = private unnamed_addr constant [19 x i8] c"OK c #DFDFDEDEEFEF\00", align 1
@.str.271 = private unnamed_addr constant [19 x i8] c"PK c #63636060B2B2\00", align 1
@.str.272 = private unnamed_addr constant [19 x i8] c"AL c #F4F4F3F3FAFA\00", align 1
@.str.273 = private unnamed_addr constant [19 x i8] c"BL c #5A5A5858A5A5\00", align 1
@.str.274 = private unnamed_addr constant [19 x i8] c"CL c #66666464B5B5\00", align 1
@.str.275 = private unnamed_addr constant [19 x i8] c"DL c #8F8F8D8DC8C8\00", align 1
@.str.276 = private unnamed_addr constant [19 x i8] c"EL c #F7F7F5F5FAFA\00", align 1
@.str.277 = private unnamed_addr constant [19 x i8] c"FL c #5C5C5959ACAC\00", align 1
@.str.278 = private unnamed_addr constant [19 x i8] c"GL c #5C5C5757B1B1\00", align 1
@.str.279 = private unnamed_addr constant [19 x i8] c"HL c #B8B8B7B7DADA\00", align 1
@.str.280 = private unnamed_addr constant [19 x i8] c"IL c #5E5E5B5BACAC\00", align 1
@.str.281 = private unnamed_addr constant [19 x i8] c"JL c #41413F3F8C8C\00", align 1
@.str.282 = private unnamed_addr constant [19 x i8] c"KL c #8B8B8A8AC3C3\00", align 1
@.str.283 = private unnamed_addr constant [19 x i8] c"LL c #7F7F7E7EB9B9\00", align 1
@.str.284 = private unnamed_addr constant [19 x i8] c"ML c #A0A0A0A0A1A1\00", align 1
@.str.285 = private unnamed_addr constant [19 x i8] c"NL c #6B6B6A6A8C8C\00", align 1
@.str.286 = private unnamed_addr constant [19 x i8] c"OL c #626261619C9C\00", align 1
@.str.287 = private unnamed_addr constant [19 x i8] c"PL c #71716F6FB5B5\00", align 1
@.str.288 = private unnamed_addr constant [19 x i8] c"AM c #55555252A7A7\00", align 1
@.str.289 = private unnamed_addr constant [19 x i8] c"BM c #C8C8C7C7E3E3\00", align 1
@.str.290 = private unnamed_addr constant [19 x i8] c"CM c #3E3E3E3E5A5A\00", align 1
@.str.291 = private unnamed_addr constant [19 x i8] c"DM c #81817F7FC2C2\00", align 1
@.str.292 = private unnamed_addr constant [19 x i8] c"EM c #52524F4F9797\00", align 1
@.str.293 = private unnamed_addr constant [19 x i8] c"FM c #93939191C8C8\00", align 1
@.str.294 = private unnamed_addr constant [19 x i8] c"GM c #5B5B58589F9F\00", align 1
@.str.295 = private unnamed_addr constant [19 x i8] c"HM c #85858484BCBC\00", align 1
@.str.296 = private unnamed_addr constant [19 x i8] c"IM c #D1D1CFCFE7E7\00", align 1
@.str.297 = private unnamed_addr constant [19 x i8] c"JM c #515150508484\00", align 1
@.str.298 = private unnamed_addr constant [19 x i8] c"KM c #F8F8F7F7FBFB\00", align 1
@.str.299 = private unnamed_addr constant [19 x i8] c"LM c #70706D6DB6B6\00", align 1
@.str.300 = private unnamed_addr constant [19 x i8] c"MM c #50504F4F7878\00", align 1
@.str.301 = private unnamed_addr constant [19 x i8] c"NM c #9B9B9999CCCC\00", align 1
@.str.302 = private unnamed_addr constant [19 x i8] c"OM c #5E5E5B5BB0B0\00", align 1
@.str.303 = private unnamed_addr constant [19 x i8] c"PM c #62625F5FADAD\00", align 1
@.str.304 = private unnamed_addr constant [19 x i8] c"AN c #B7B7B7B7DADA\00", align 1
@.str.305 = private unnamed_addr constant [19 x i8] c"BN c #31312F2F7A7A\00", align 1
@.str.306 = private unnamed_addr constant [19 x i8] c"CN c #484848487A7A\00", align 1
@.str.307 = private unnamed_addr constant [19 x i8] c"DN c #67676565B1B1\00", align 1
@.str.308 = private unnamed_addr constant [19 x i8] c"EN c #FCFCFCFCFDFD\00", align 1
@.str.309 = private unnamed_addr constant [19 x i8] c"FN c #FDFDFCFCFFFF\00", align 1
@.str.310 = private unnamed_addr constant [19 x i8] c"GN c #BBBBBABADCDC\00", align 1
@.str.311 = private unnamed_addr constant [19 x i8] c"HN c #656566667F7F\00", align 1
@.str.312 = private unnamed_addr constant [19 x i8] c"IN c #5A5A5656ABAB\00", align 1
@.str.313 = private unnamed_addr constant [19 x i8] c"JN c #A8A8A7A7D4D4\00", align 1
@.str.314 = private unnamed_addr constant [19 x i8] c"KN c #F8F8F8F8FBFB\00", align 1
@.str.315 = private unnamed_addr constant [19 x i8] c"LN c #95959292C8C8\00", align 1
@.str.316 = private unnamed_addr constant [19 x i8] c"MN c #D9D9D7D7EBEB\00", align 1
@.str.317 = private unnamed_addr constant [19 x i8] c"NN c #303030305454\00", align 1
@.str.318 = private unnamed_addr constant [19 x i8] c"ON c #CBCBCACADADA\00", align 1
@.str.319 = private unnamed_addr constant [19 x i8] c"PN c #363637376363\00", align 1
@.str.320 = private unnamed_addr constant [19 x i8] c"AO c #3B3B3B3B6868\00", align 1
@.str.321 = private unnamed_addr constant [19 x i8] c"BO c #444442428181\00", align 1
@.str.322 = private unnamed_addr constant [19 x i8] c"CO c #434340408D8D\00", align 1
@.str.323 = private unnamed_addr constant [19 x i8] c"DO c #ABABA9A9D4D4\00", align 1
@.str.324 = private unnamed_addr constant [19 x i8] c"EO c #AEAEADADD5D5\00", align 1
@.str.325 = private unnamed_addr constant [19 x i8] c"FO c #5E5E5E5E8484\00", align 1
@.str.326 = private unnamed_addr constant [19 x i8] c"GO c #7E7E7B7BC1C1\00", align 1
@.str.327 = private unnamed_addr constant [19 x i8] c"HO c #9C9C9A9ACCCC\00", align 1
@.str.328 = private unnamed_addr constant [19 x i8] c"IO c #D6D6D5D5EAEA\00", align 1
@.str.329 = private unnamed_addr constant [19 x i8] c"JO c #87878484C1C1\00", align 1
@.str.330 = private unnamed_addr constant [19 x i8] c"KO c #5C5C5858AEAE\00", align 1
@.str.331 = private unnamed_addr constant [19 x i8] c"LO c #89898787C2C2\00", align 1
@.str.332 = private unnamed_addr constant [19 x i8] c"MO c #EAEAEAEAF5F5\00", align 1
@.str.333 = private unnamed_addr constant [19 x i8] c"NO c #C2C2C1C1E0E0\00", align 1
@.str.334 = private unnamed_addr constant [19 x i8] c"OO c #A3A3A3A3D0D0\00", align 1
@.str.335 = private unnamed_addr constant [19 x i8] c"PO c #A5A5A3A3D0D0\00", align 1
@.str.336 = private unnamed_addr constant [19 x i8] c"AP c #70706E6EB9B9\00", align 1
@.str.337 = private unnamed_addr constant [19 x i8] c"BP c #64646161B1B1\00", align 1
@.str.338 = private unnamed_addr constant [19 x i8] c"CP c #6F6F6C6CB8B8\00", align 1
@.str.339 = private unnamed_addr constant [19 x i8] c"DP c #64646161B4B4\00", align 1
@.str.340 = private unnamed_addr constant [19 x i8] c"EP c #D7D7D6D6EBEB\00", align 1
@.str.341 = private unnamed_addr constant [19 x i8] c"FP c #4D4D4848A7A7\00", align 1
@.str.342 = private unnamed_addr constant [19 x i8] c"GP c #ECECEBEBF5F5\00", align 1
@.str.343 = private unnamed_addr constant [19 x i8] c"HP c #E6E6E5E5F2F2\00", align 1
@.str.344 = private unnamed_addr constant [19 x i8] c"IP c #F8F8F8F8FDFD\00", align 1
@.str.345 = private unnamed_addr constant [19 x i8] c"JP c #F9F9FAFAFCFC\00", align 1
@.str.346 = private unnamed_addr constant [19 x i8] c"KP c #FAFAF9F9FCFC\00", align 1
@.str.347 = private unnamed_addr constant [19 x i8] c"LP c #99999898CBCB\00", align 1
@.str.348 = private unnamed_addr constant [19 x i8] c"MP c #EAEAE9E9F6F6\00", align 1
@.str.349 = private unnamed_addr constant [19 x i8] c"NP c #5C5C5959ABAB\00", align 1
@.str.350 = private unnamed_addr constant [15 x i8] c"OP s bg c None\00", align 1
@.str.351 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPOPOPOPOPOPOPNHNHGCGCGCJGGCGCOPOPOPOPOPOPOPOPOPOPOPOP\00", align 1
@.str.352 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPOPOPOPMAMANHMADHOFAJKOAJOFDHJGJGGCOPOPOPOPOPOPOPOPOP\00", align 1
@.str.353 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPOPMAMAMAMAHIILAFJHCJEHLMIGHKGHLDFDFDNHOPOPOPOPOPOPOP\00", align 1
@.str.354 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPDHFGOIHIILIDCJOAECKAGJHHMCMCMFJOCKGHFPFDOPOPOPOPOPOP\00", align 1
@.str.355 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPDHFGBAOHJFMDKFLAIHBGJCGDFELELFJKPIELFJMBAJFDOPOPOPOPOP\00", align 1
@.str.356 = private unnamed_addr constant [65 x i8] c"OPOPOPOPBAHIHIDCDEJHLANDHOPCLNNBGDMFLOHHGDAGMNKMAADGFDNHOPOPOPOP\00", align 1
@.str.357 = private unnamed_addr constant [65 x i8] c"OPOPOPBABAHIDCJFKHKAIMKJKJDDKEFCKKBMDGPEDOHDEDCDLIDBCKCHMAOPOPOP\00", align 1
@.str.358 = private unnamed_addr constant [65 x i8] c"OPOPBAHIHIOHEILHCJNBGPIJMOABJBADEJEJKPJPKMADDBIAJBDBKACHDHMAOPOP\00", align 1
@.str.359 = private unnamed_addr constant [65 x i8] c"OPOPHIHIPHDCJFCJCKCFIBIAMPDDKGNKIBIBPGMELJJILIDBDBNEEIFGFGMAOPOP\00", align 1
@.str.360 = private unnamed_addr constant [65 x i8] c"OPHIHIPHPHAIAFKFKAGJAGKGKJIALEBDHOPCBDEBLNEBNAPONDAFDCMHBAGLCBOP\00", align 1
@.str.361 = private unnamed_addr constant [65 x i8] c"OPHIPHCICIILDNGAKAJOJCEOJIJBIONALPKDBDNDKLCFCKIGJDDIOBINOMHAMMAC\00", align 1
@.str.362 = private unnamed_addr constant [65 x i8] c"HIPHCIOHDCILAFKFNCBGKLMCMBNIPIIFFENBNDGDJCEFOANFGKGEILLCOEGGMLKB\00", align 1
@.str.363 = private unnamed_addr constant [65 x i8] c"PHCIOHDCDCOBDEIGLAIHBGLOJCKDEPALKGIIPACFIHBJNFMGJDEGPKOEHGACAOHA\00", align 1
@.str.364 = private unnamed_addr constant [65 x i8] c"PHOHDCNPNPOBOBMIMDNCMCBDDJEBLNGNLJGINENCIGODHBIDGKCLBNHGGBGGOEOM\00", align 1
@.str.365 = private unnamed_addr constant [65 x i8] c"PHOHDCNPNPAMMDKDPFIFPJKIKIHPOKLBLBOKKGLBCFGKKHDNJEHAGGFANNAHOMHI\00", align 1
@.str.366 = private unnamed_addr constant [65 x i8] c"CIDCNPNPFGFMNGDBLIGIPBFJKGDDABIAGIKEJJAEIKPCDNJEJLGGFACEICINAJBA\00", align 1
@.str.367 = private unnamed_addr constant [65 x i8] c"OHDCNPAMJCALDBEKGPJIDDLIPJEDIIFEHDNALPNDNBKLCPGMAOPDCEFHBBOMHIHI\00", align 1
@.str.368 = private unnamed_addr constant [65 x i8] c"OHNPAIBBPELIBEABIAJBIAIIIHODNFNFNFNFHBKHAFJEBLCNFACMJACBLCCIPHHI\00", align 1
@.str.369 = private unnamed_addr constant [65 x i8] c"DCDCAIAMPCDDJKKIDDLIDJGEHBPLBJOALALABJKFKFJDMKPDNNFBEMLCDCOHPHHI\00", align 1
@.str.370 = private unnamed_addr constant [65 x i8] c"DCNPNPDCPMPFIJLJJJHJCGJDKFLAECEENCNCEEECBFDKNLPNJACODPNPDCOHPHOP\00", align 1
@.str.371 = private unnamed_addr constant [65 x i8] c"OPNPAIILPHDNNENIIKPBIOHEKFGANCGJGJGJGJDMBOFFAKJADFCLOBNPDCOHPHOP\00", align 1
@.str.372 = private unnamed_addr constant [65 x i8] c"OPNPAIEADIKCEINMMEBEGIKEEDOOLOKAKAIHHFOJCCCCJADKAPJFAINPDCOHPHOP\00", align 1
@.str.373 = private unnamed_addr constant [65 x i8] c"OPOPNPILILFIILOIKFIIOKKJHCLIKELFHLMBOLLGFOJADAGOEHIDILNPDCOHOPOP\00", align 1
@.str.374 = private unnamed_addr constant [65 x i8] c"OPOPNPOBILDIFIGEJFMDGDLEIFHJCDKNAAONLGCCFHAKJCGAPLLHEANPDCOHOPOP\00", align 1
@.str.375 = private unnamed_addr constant [65 x i8] c"OPOPOPOBILDIEIGEMDLAKABGNBHDIENOPGCCAOFHMMIPMPPELAGENPNPDCOPOPOP\00", align 1
@.str.376 = private unnamed_addr constant [65 x i8] c"OPOPOPAIOBBIDIGEEHBGNBBDNANAHDJNJMHNFBLGMJFNENAANMAMNPDCOPOPOPOP\00", align 1
@.str.377 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOBILBIILNFLOHDANPFLBOCLKFBFHFFNJKIBHBKOGJFDCNPOPOPOPOPOP\00", align 1
@.str.378 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPILILBIILGEHBOAGJMCHMHGFHAHLLDLKAPLBIAMNPNPOPOPOPOPOPOP\00", align 1
@.str.379 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPOPILBIBIFIDEFKBFDAJAAHGFBFIDJFOBFLOBAIOPOPOPOPOPOPOP\00", align 1
@.str.380 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPOPOPILILBIILPKCBJAAHJFBPILILOBOBAIOPOPOPOPOPOPOPOPOP\00", align 1
@.str.381 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPOPOPOPOPILMIGECABCPKGHAIILOBOBOPOPOPOPOPOPOPOPOPOPOP\00", align 1
@.str.382 = private unnamed_addr constant [65 x i8] c"OPOPOPOPOPOPOPOPOPOPOPOPOPCAOPOPOPOPOPOPOPOPOPOPOPOPOPOPOPOPOPOP\00", align 1
@frame_garbaged = external global i8, align 1
@handle_one_xevent.compose_status = internal global %struct._XComposeStatus zeroinitializer, align 8
@selected_frame = external global i64, align 8
@initial_argc = external global i32, align 4
@tip_window = external global i64, align 8
@ignore_next_mouse_click_timeout = internal global i64 0, align 8
@any_help_event_p = internal global i8 0, align 1
@help_echo_string = external global i64, align 8
@previous_help_echo_string = external global i64, align 8
@handle_one_xevent.last_mouse_window = internal global i64 0, align 8
@selected_window = external global i64, align 8
@help_echo_window = external global i64, align 8
@help_echo_object = external global i64, align 8
@help_echo_pos = external global i64, align 8
@.str.383 = private unnamed_addr constant [14 x i8] c"g_set_prgname\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.384 = private unnamed_addr constant [19 x i8] c"%s-WARNING **: %s\0A\00", align 1
@current_count = internal global i32 0, align 4
@current_finish = internal global i32 0, align 4
@current_hold_quit = internal global %struct.input_event* null, align 8
@.str.385 = private unnamed_addr constant [44 x i8] c"X protocol error: %s on protocol request %d\00", align 1
@error_msg = internal global i8* null, align 8
@.str.386 = private unnamed_addr constant [168 x i8] c"%s\0AWhen compiled with GTK, Emacs cannot recover from X disconnects.\0AThis is a GTK bug: https://bugzilla.gnome.org/show_bug.cgi?id=85715\0AFor details, see etc/PROBLEMS.\0A\00", align 1
@.str.387 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.388 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.389 = private unnamed_addr constant [33 x i8] c"Connection lost to X server '%s'\00", align 1
@.str.390 = private unnamed_addr constant [6 x i8] c"unix:\00", align 1
@.str.391 = private unnamed_addr constant [13 x i8] c"EMACS_XFIXES\00", align 1
@make_invisible_cursor.no_data = internal constant [1 x i8] zeroinitializer, align 1
@emacs_class = internal global [6 x i8] c"Emacs\00", align 1
@.str.392 = private unnamed_addr constant [16 x i8] c"queryInputStyle\00", align 1
@.str.393 = private unnamed_addr constant [16 x i8] c"destroyCallback\00", align 1
@next_noop_dpyinfo = internal global %struct.x_display_info* null, align 8
@x_redisplay_interface = internal global %struct.redisplay_interface { void (%struct.frame*, i64, i64)** getelementptr inbounds ([0 x void (%struct.frame*, i64, i64)*], [0 x void (%struct.frame*, i64, i64)*]* @x_frame_parm_handlers, i32 0, i32 0), void (%struct.it*)* @x_produce_glyphs, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)* @x_write_glyphs, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)* @x_insert_glyphs, void (%struct.window*, %struct.glyph_row*, i32, i32)* @x_clear_end_of_line, void (%struct.window*, %struct.run*)* @x_scroll_run, void (%struct.window*, %struct.glyph_row*)* @x_after_update_window_line, void (%struct.window*)* @x_update_window_begin, void (%struct.window*, i1, i1)* @x_update_window_end, void (%struct.frame*)* @x_flush, void (%struct.window*)* @x_clear_window_mouse_face, void (%struct.glyph*, %struct.frame*, i32*, i32*)* @x_get_glyph_overhangs, void (%struct.window*, %struct.glyph_row*, i32, i32)* @x_fix_overlapping_area, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)* @x_draw_fringe_bitmap, void (i32, i16*, i32, i32)* null, void (i32)* null, void (%struct.glyph_string*)* @x_compute_glyph_string_overhangs, void (%struct.glyph_string*)* @x_draw_glyph_string, void (%struct.frame*, i64)* @x_define_frame_cursor, void (%struct.frame*, i32, i32, i32, i32)* @x_clear_frame_area, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)* @x_draw_window_cursor, void (%struct.window*, i32, i32, i32)* @x_draw_vertical_window_border, void (%struct.window*, i32, i32, i32, i32)* @x_draw_window_divider, void (%struct.frame*, i32, i32, i32, i32, i32)* @x_shift_glyphs_for_insert, void (%struct.frame*)* @x_show_hourglass, void (%struct.frame*)* @x_hide_hourglass }, align 8
@x_frame_parm_handlers = external global [0 x void (%struct.frame*, i64, i64)*], align 8
@composition_hash_table = external global i64, align 8
@.str.394 = private unnamed_addr constant [5 x i8] c"%0*X\00", align 1
@XTread_socket_fake_io_error = internal global %struct.x_display_info* null, align 8
@x_noop_count = internal global i32 0, align 4
@.str.395 = private unnamed_addr constant [20 x i8] c"horizontalScrollBar\00", align 1
@.str.396 = private unnamed_addr constant [12 x i8] c"emacs_frame\00", align 1
@xg_ignore_gtk_scrollbar = external global i8, align 1
@window_being_scrolled = internal global i64 0, align 8
@.str.397 = private unnamed_addr constant [18 x i8] c"verticalScrollBar\00", align 1
@minibuf_level = external global i64, align 8
@minibuf_selected_window = external global i64, align 8
@minibuf_window = external global i64, align 8

; Function Attrs: nounwind uwtable
define %struct.x_display_info* @x_display_info_for_display(%struct._XDisplay* %dpy) #0 {
entry:
  %retval = alloca %struct.x_display_info*, align 8
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  store %struct.x_display_info* %0, %struct.x_display_info** %dpyinfo, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %tobool = icmp ne %struct.x_display_info* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %cmp = icmp eq %struct._XDisplay* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  store %struct.x_display_info* %5, %struct.x_display_info** %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %next = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 0
  %7 = load %struct.x_display_info*, %struct.x_display_info** %next, align 8
  store %struct.x_display_info* %7, %struct.x_display_info** %dpyinfo, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.x_display_info* null, %struct.x_display_info** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %8 = load %struct.x_display_info*, %struct.x_display_info** %retval
  ret %struct.x_display_info* %8
}

; Function Attrs: nounwind uwtable
define void @x_set_frame_alpha(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %win = alloca i64, align 8
  %alpha = alloca double, align 8
  %alpha_min = alloca double, align 8
  %opac = alloca i64, align 8
  %parent = alloca i64, align 8
  %data = alloca i8*, align 8
  %actual = alloca i64, align 8
  %rc = alloca i32, align 4
  %format = alloca i32, align 4
  %n = alloca i64, align 8
  %left = alloca i64, align 8
  %value = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 44
  %5 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 2
  %6 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %6, %struct._XDisplay** %dpy, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 12
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %9, null
  br i1 %tobool, label %cond.true, label %cond.false.20

cond.true:                                        ; preds = %entry
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data6 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x7 = bitcast %union.output_data* %output_data6 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x7, align 8
  %widget8 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 12
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %widget8, align 8
  %tobool9 = icmp ne %struct._GtkWidget* %12, null
  br i1 %tobool9, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %widget12 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 12
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %widget12, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %15)
  %tobool13 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool13, label %cond.true.14, label %cond.false

cond.true.14:                                     ; preds = %land.lhs.true
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data15 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x16 = bitcast %union.output_data* %output_data15 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x16, align 8
  %widget17 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 12
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %widget17, align 8
  %call18 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %18)
  %call19 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call18)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.14
  %cond = phi i64 [ %call19, %cond.true.14 ], [ 0, %cond.false ]
  br label %cond.end.23

cond.false.20:                                    ; preds = %entry
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data21 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x22 = bitcast %union.output_data* %output_data21 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x22, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 9
  %21 = load i64, i64* %window_desc, align 8
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.20, %cond.end
  %cond24 = phi i64 [ %cond, %cond.end ], [ %21, %cond.false.20 ]
  store i64 %cond24, i64* %win, align 8
  store double 1.000000e+00, double* %alpha, align 8
  store double 1.000000e+00, double* %alpha_min, align 8
  %22 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_highlight_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 73
  %23 = load %struct.frame*, %struct.frame** %x_highlight_frame, align 8
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp = icmp eq %struct.frame* %23, %24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.23
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %alpha25 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 74
  %arrayidx = getelementptr inbounds [2 x double], [2 x double]* %alpha25, i32 0, i64 0
  %26 = load double, double* %arrayidx, align 8
  store double %26, double* %alpha, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end.23
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %alpha26 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 74
  %arrayidx27 = getelementptr inbounds [2 x double], [2 x double]* %alpha26, i32 0, i64 1
  %28 = load double, double* %arrayidx27, align 8
  store double %28, double* %alpha, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %29 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 110), align 8
  %and = and i64 %29, 7
  %conv = trunc i64 %and to i32
  %cmp28 = icmp eq i32 %conv, 7
  br i1 %cmp28, label %if.then.30, label %if.else.32

if.then.30:                                       ; preds = %if.end
  %30 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 110), align 8
  %call31 = call double @XFLOAT_DATA(i64 %30)
  store double %call31, double* %alpha_min, align 8
  br label %if.end.41

if.else.32:                                       ; preds = %if.end
  %31 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 110), align 8
  %and33 = and i64 %31, 7
  %conv34 = trunc i64 %and33 to i32
  %and35 = and i32 %conv34, -5
  %cmp36 = icmp eq i32 %and35, 2
  br i1 %cmp36, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %if.else.32
  %32 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 110), align 8
  %shr = ashr i64 %32, 2
  %conv39 = sitofp i64 %shr to double
  %div = fdiv double %conv39, 1.000000e+02
  store double %div, double* %alpha_min, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.38, %if.else.32
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.30
  %33 = load double, double* %alpha, align 8
  %cmp42 = fcmp olt double %33, 0.000000e+00
  br i1 %cmp42, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %if.end.41
  br label %return

if.else.45:                                       ; preds = %if.end.41
  %34 = load double, double* %alpha, align 8
  %cmp46 = fcmp ogt double %34, 1.000000e+00
  br i1 %cmp46, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %if.else.45
  store double 1.000000e+00, double* %alpha, align 8
  br label %if.end.60

if.else.49:                                       ; preds = %if.else.45
  %35 = load double, double* %alpha, align 8
  %cmp50 = fcmp ole double 0.000000e+00, %35
  br i1 %cmp50, label %land.lhs.true.52, label %if.end.59

land.lhs.true.52:                                 ; preds = %if.else.49
  %36 = load double, double* %alpha, align 8
  %37 = load double, double* %alpha_min, align 8
  %cmp53 = fcmp olt double %36, %37
  br i1 %cmp53, label %land.lhs.true.55, label %if.end.59

land.lhs.true.55:                                 ; preds = %land.lhs.true.52
  %38 = load double, double* %alpha_min, align 8
  %cmp56 = fcmp ole double %38, 1.000000e+00
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %land.lhs.true.55
  %39 = load double, double* %alpha_min, align 8
  store double %39, double* %alpha, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.58, %land.lhs.true.55, %land.lhs.true.52, %if.else.49
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.then.48
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60
  %40 = load double, double* %alpha, align 8
  %mul = fmul double %40, 0x41EFFFFFFFE00000
  %conv62 = fptoui double %mul to i64
  store i64 %conv62, i64* %opac, align 8
  %41 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  call void @x_catch_errors(%struct._XDisplay* %41)
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call63 = call i64 @x_find_topmost_parent(%struct.frame* %42)
  store i64 %call63, i64* %parent, align 8
  %43 = load i64, i64* %parent, align 8
  %cmp64 = icmp ne i64 %43, 0
  br i1 %cmp64, label %if.then.66, label %if.end.68

if.then.66:                                       ; preds = %if.end.61
  %44 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %45 = load i64, i64* %parent, align 8
  %46 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_window_opacity = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %46, i32 0, i32 124
  %47 = load i64, i64* %Xatom_net_wm_window_opacity, align 8
  %48 = bitcast i64* %opac to i8*
  %call67 = call i32 @XChangeProperty(%struct._XDisplay* %44, i64 %45, i64 %47, i64 6, i32 32, i32 0, i8* %48, i32 1)
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.66, %if.end.61
  %49 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %50 = load i64, i64* %win, align 8
  %51 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_window_opacity69 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %51, i32 0, i32 124
  %52 = load i64, i64* %Xatom_net_wm_window_opacity69, align 8
  %call70 = call i32 @XGetWindowProperty(%struct._XDisplay* %49, i64 %50, i64 %52, i64 0, i64 1, i32 0, i64 6, i64* %actual, i32* %format, i64* %n, i64* %left, i8** %data)
  store i32 %call70, i32* %rc, align 4
  %53 = load i32, i32* %rc, align 4
  %cmp71 = icmp eq i32 %53, 0
  br i1 %cmp71, label %land.lhs.true.73, label %if.end.82

land.lhs.true.73:                                 ; preds = %if.end.68
  %54 = load i64, i64* %actual, align 8
  %cmp74 = icmp ne i64 %54, 0
  br i1 %cmp74, label %if.then.76, label %if.end.82

if.then.76:                                       ; preds = %land.lhs.true.73
  %55 = load i8*, i8** %data, align 8
  %56 = bitcast i8* %55 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %value, align 8
  %58 = load i8*, i8** %data, align 8
  %call77 = call i32 @XFree(i8* %58)
  %59 = load i64, i64* %value, align 8
  %60 = load i64, i64* %opac, align 8
  %cmp78 = icmp eq i64 %59, %60
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.then.76
  call void @x_uncatch_errors()
  br label %return

if.end.81:                                        ; preds = %if.then.76
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %land.lhs.true.73, %if.end.68
  %61 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %62 = load i64, i64* %win, align 8
  %63 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_window_opacity83 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %63, i32 0, i32 124
  %64 = load i64, i64* %Xatom_net_wm_window_opacity83, align 8
  %65 = bitcast i64* %opac to i8*
  %call84 = call i32 @XChangeProperty(%struct._XDisplay* %61, i64 %62, i64 %64, i64 6, i32 32, i32 0, i8* %65, i32 1)
  call void @x_uncatch_errors()
  br label %return

return:                                           ; preds = %if.end.82, %if.then.80, %if.then.44
  ret void
}

declare %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget*) #1

declare i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable*) #1

declare double @XFLOAT_DATA(i64) #1

; Function Attrs: nounwind uwtable
define void @x_catch_errors(%struct._XDisplay* %dpy) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  call void @x_catch_errors_with_handler(%struct._XDisplay* %0, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)* null, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @x_find_topmost_parent(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %win = alloca i64, align 8
  %wi = alloca i64, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %root = alloca i64, align 8
  %children = alloca i64*, align 8
  %nchildren = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  store i64 0, i64* %win, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %parent_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 11
  %3 = load i64, i64* %parent_desc, align 8
  store i64 %3, i64* %wi, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %7, %struct._XDisplay** %dpy, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %8 = load i64, i64* %wi, align 8
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %display_info6 = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 44
  %11 = load %struct.x_display_info*, %struct.x_display_info** %display_info6, align 8
  %root_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 14
  %12 = load i64, i64* %root_window, align 8
  %cmp = icmp ne i64 %8, %12
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %wi, align 8
  store i64 %13, i64* %win, align 8
  %14 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %15 = load i64, i64* %win, align 8
  %call = call i32 @XQueryTree(%struct._XDisplay* %14, i64 %15, i64* %root, i64* %wi, i64** %children, i32* %nchildren)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %16 = load i64*, i64** %children, align 8
  %17 = bitcast i64* %16 to i8*
  %call7 = call i32 @XFree(i8* %17)
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %if.then
  br label %while.cond

while.end:                                        ; preds = %if.else, %while.cond
  %18 = load i64, i64* %win, align 8
  ret i64 %18
}

declare i32 @XChangeProperty(%struct._XDisplay*, i64, i64, i64, i32, i32, i8*, i32) #1

declare i32 @XGetWindowProperty(%struct._XDisplay*, i64, i64, i64, i64, i32, i64, i64*, i32*, i64*, i64*, i8**) #1

declare i32 @XFree(i8*) #1

; Function Attrs: nounwind uwtable
define void @x_uncatch_errors() #0 {
entry:
  %tmp = alloca %struct.x_error_message_stack*, align 8
  call void @block_input()
  %0 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %dpy = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %0, i32 0, i32 1
  %1 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call = call %struct.x_display_info* @x_display_info_for_display(%struct._XDisplay* %1)
  %cmp = icmp ne %struct.x_display_info* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @gdk_window_process_all_updates()
  %2 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %dpy1 = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %2, i32 0, i32 1
  %3 = load %struct._XDisplay*, %struct._XDisplay** %dpy1, align 8
  %call2 = call i32 @XSync(%struct._XDisplay* %3, i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %4 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  store %struct.x_error_message_stack* %4, %struct.x_error_message_stack** %tmp, align 8
  %5 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %prev = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %5, i32 0, i32 4
  %6 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %prev, align 8
  store %struct.x_error_message_stack* %6, %struct.x_error_message_stack** @x_error_message, align 8
  %7 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %tmp, align 8
  %8 = bitcast %struct.x_error_message_stack* %7 to i8*
  call void @xfree(i8* %8)
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_query_colors(%struct.frame* %f, %struct.XColor* %colors, i32 %ncolors) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %colors.addr = alloca %struct.XColor*, align 8
  %ncolors.addr = alloca i32, align 4
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %i = alloca i32, align 4
  %rmult = alloca i32, align 4
  %gmult = alloca i32, align 4
  %bmult = alloca i32, align 4
  %rmask = alloca i32, align 4
  %gmask = alloca i32, align 4
  %bmask = alloca i32, align 4
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %pixel = alloca i64, align 8
  %i36 = alloca i32, align 4
  %pixel41 = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.XColor* %colors, %struct.XColor** %colors.addr, align 8
  store i32 %ncolors, i32* %ncolors.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %red_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 91
  %4 = load i32, i32* %red_bits, align 4
  %cmp = icmp sgt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %red_bits1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 91
  %6 = load i32, i32* %red_bits1, align 4
  %shl = shl i32 1, %6
  %sub = sub nsw i32 %shl, 1
  store i32 %sub, i32* %rmask, align 4
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %green_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 93
  %8 = load i32, i32* %green_bits, align 4
  %shl2 = shl i32 1, %8
  %sub3 = sub nsw i32 %shl2, 1
  store i32 %sub3, i32* %gmask, align 4
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %blue_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 92
  %10 = load i32, i32* %blue_bits, align 4
  %shl4 = shl i32 1, %10
  %sub5 = sub nsw i32 %shl4, 1
  store i32 %sub5, i32* %bmask, align 4
  %11 = load i32, i32* %rmask, align 4
  %div = udiv i32 -1, %11
  store i32 %div, i32* %rmult, align 4
  %12 = load i32, i32* %gmask, align 4
  %div6 = udiv i32 -1, %12
  store i32 %div6, i32* %gmult, align 4
  %13 = load i32, i32* %bmask, align 4
  %div7 = udiv i32 -1, %13
  store i32 %div7, i32* %bmult, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %ncolors.addr, align 4
  %cmp8 = icmp slt i32 %14, %15
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %arrayidx = getelementptr inbounds %struct.XColor, %struct.XColor* %17, i64 %idxprom
  %pixel9 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx, i32 0, i32 0
  %18 = load i64, i64* %pixel9, align 8
  store i64 %18, i64* %pixel, align 8
  %19 = load i64, i64* %pixel, align 8
  %20 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %red_offset = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %20, i32 0, i32 94
  %21 = load i32, i32* %red_offset, align 4
  %sh_prom = zext i32 %21 to i64
  %shr = lshr i64 %19, %sh_prom
  %22 = load i32, i32* %rmask, align 4
  %conv = zext i32 %22 to i64
  %and = and i64 %shr, %conv
  %conv10 = trunc i64 %and to i32
  store i32 %conv10, i32* %r, align 4
  %23 = load i64, i64* %pixel, align 8
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %green_offset = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 96
  %25 = load i32, i32* %green_offset, align 4
  %sh_prom11 = zext i32 %25 to i64
  %shr12 = lshr i64 %23, %sh_prom11
  %26 = load i32, i32* %gmask, align 4
  %conv13 = zext i32 %26 to i64
  %and14 = and i64 %shr12, %conv13
  %conv15 = trunc i64 %and14 to i32
  store i32 %conv15, i32* %g, align 4
  %27 = load i64, i64* %pixel, align 8
  %28 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %blue_offset = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 95
  %29 = load i32, i32* %blue_offset, align 4
  %sh_prom16 = zext i32 %29 to i64
  %shr17 = lshr i64 %27, %sh_prom16
  %30 = load i32, i32* %bmask, align 4
  %conv18 = zext i32 %30 to i64
  %and19 = and i64 %shr17, %conv18
  %conv20 = trunc i64 %and19 to i32
  store i32 %conv20, i32* %b, align 4
  %31 = load i32, i32* %r, align 4
  %32 = load i32, i32* %rmult, align 4
  %mul = mul i32 %31, %32
  %shr21 = lshr i32 %mul, 16
  %conv22 = trunc i32 %shr21 to i16
  %33 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %33 to i64
  %34 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct.XColor, %struct.XColor* %34, i64 %idxprom23
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx24, i32 0, i32 1
  store i16 %conv22, i16* %red, align 2
  %35 = load i32, i32* %g, align 4
  %36 = load i32, i32* %gmult, align 4
  %mul25 = mul i32 %35, %36
  %shr26 = lshr i32 %mul25, 16
  %conv27 = trunc i32 %shr26 to i16
  %37 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %37 to i64
  %38 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %arrayidx29 = getelementptr inbounds %struct.XColor, %struct.XColor* %38, i64 %idxprom28
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx29, i32 0, i32 2
  store i16 %conv27, i16* %green, align 2
  %39 = load i32, i32* %b, align 4
  %40 = load i32, i32* %bmult, align 4
  %mul30 = mul i32 %39, %40
  %shr31 = lshr i32 %mul30, 16
  %conv32 = trunc i32 %shr31 to i16
  %41 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %41 to i64
  %42 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %arrayidx34 = getelementptr inbounds %struct.XColor, %struct.XColor* %42, i64 %idxprom33
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx34, i32 0, i32 3
  store i16 %conv32, i16* %blue, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %43 = load i32, i32* %i, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %return

if.end:                                           ; preds = %entry
  %44 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %44, i32 0, i32 89
  %45 = load %struct.XColor*, %struct.XColor** %color_cells, align 8
  %tobool = icmp ne %struct.XColor* %45, null
  br i1 %tobool, label %if.then.35, label %if.end.52

if.then.35:                                       ; preds = %if.end
  store i32 0, i32* %i36, align 4
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.49, %if.then.35
  %46 = load i32, i32* %i36, align 4
  %47 = load i32, i32* %ncolors.addr, align 4
  %cmp38 = icmp slt i32 %46, %47
  br i1 %cmp38, label %for.body.40, label %for.end.51

for.body.40:                                      ; preds = %for.cond.37
  %48 = load i32, i32* %i36, align 4
  %idxprom42 = sext i32 %48 to i64
  %49 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %arrayidx43 = getelementptr inbounds %struct.XColor, %struct.XColor* %49, i64 %idxprom42
  %pixel44 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx43, i32 0, i32 0
  %50 = load i64, i64* %pixel44, align 8
  store i64 %50, i64* %pixel41, align 8
  %51 = load i32, i32* %i36, align 4
  %idxprom45 = sext i32 %51 to i64
  %52 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %arrayidx46 = getelementptr inbounds %struct.XColor, %struct.XColor* %52, i64 %idxprom45
  %53 = load i64, i64* %pixel41, align 8
  %54 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells47 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %54, i32 0, i32 89
  %55 = load %struct.XColor*, %struct.XColor** %color_cells47, align 8
  %arrayidx48 = getelementptr inbounds %struct.XColor, %struct.XColor* %55, i64 %53
  %56 = bitcast %struct.XColor* %arrayidx46 to i8*
  %57 = bitcast %struct.XColor* %arrayidx48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 16, i32 8, i1 false)
  br label %for.inc.49

for.inc.49:                                       ; preds = %for.body.40
  %58 = load i32, i32* %i36, align 4
  %inc50 = add nsw i32 %58, 1
  store i32 %inc50, i32* %i36, align 4
  br label %for.cond.37

for.end.51:                                       ; preds = %for.cond.37
  br label %return

if.end.52:                                        ; preds = %if.end
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data53 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 62
  %x54 = bitcast %union.output_data* %output_data53 to %struct.x_output**
  %60 = load %struct.x_output*, %struct.x_output** %x54, align 8
  %display_info55 = getelementptr inbounds %struct.x_output, %struct.x_output* %60, i32 0, i32 44
  %61 = load %struct.x_display_info*, %struct.x_display_info** %display_info55, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %61, i32 0, i32 2
  %62 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data56 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 62
  %x57 = bitcast %union.output_data* %output_data56 to %struct.x_output**
  %64 = load %struct.x_output*, %struct.x_output** %x57, align 8
  %display_info58 = getelementptr inbounds %struct.x_output, %struct.x_output* %64, i32 0, i32 44
  %65 = load %struct.x_display_info*, %struct.x_display_info** %display_info58, align 8
  %cmap = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %65, i32 0, i32 10
  %66 = load i64, i64* %cmap, align 8
  %67 = load %struct.XColor*, %struct.XColor** %colors.addr, align 8
  %68 = load i32, i32* %ncolors.addr, align 4
  %call = call i32 @XQueryColors(%struct._XDisplay* %62, i64 %66, %struct.XColor* %67, i32 %68)
  br label %return

return:                                           ; preds = %if.end.52, %for.end.51, %for.end
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare i32 @XQueryColors(%struct._XDisplay*, i64, %struct.XColor*, i32) #1

; Function Attrs: nounwind uwtable
define void @x_query_color(%struct.frame* %f, %struct.XColor* %color) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %color.addr = alloca %struct.XColor*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.XColor* %color, %struct.XColor** %color.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  call void @x_query_colors(%struct.frame* %0, %struct.XColor* %1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @x_parse_color(%struct.frame* %f, i8* %color_name, %struct.XColor* %color) #0 {
entry:
  %retval = alloca i32, align 4
  %f.addr = alloca %struct.frame*, align 8
  %color_name.addr = alloca i8*, align 8
  %color.addr = alloca %struct.XColor*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %cmap = alloca i64, align 8
  %cache_entry = alloca %struct.color_name_cache_entry*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %color_name, i8** %color_name.addr, align 8
  store %struct.XColor* %color, %struct.XColor** %color.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %3, %struct._XDisplay** %dpy, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %cmap4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 10
  %7 = load i64, i64* %cmap4, align 8
  store i64 %7, i64* %cmap, align 8
  %8 = load i8*, i8** %color_name.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %9 to i32
  %cmp = icmp eq i32 %conv, 35
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %11 = load i64, i64* %cmap, align 8
  %12 = load i8*, i8** %color_name.addr, align 8
  %13 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %call = call i32 @XParseColor(%struct._XDisplay* %10, i64 %11, i8* %12, %struct.XColor* %13)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data6 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x7 = bitcast %union.output_data* %output_data6 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x7, align 8
  %display_info8 = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 44
  %16 = load %struct.x_display_info*, %struct.x_display_info** %display_info8, align 8
  %color_names = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %16, i32 0, i32 88
  %17 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %color_names, align 8
  store %struct.color_name_cache_entry* %17, %struct.color_name_cache_entry** %cache_entry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %18 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %tobool = icmp ne %struct.color_name_cache_entry* %18, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %name = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %19, i32 0, i32 2
  %20 = load i8*, i8** %name, align 8
  %21 = load i8*, i8** %color_name.addr, align 8
  %call9 = call i32 @xstrcasecmp(i8* %20, i8* %21)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %for.body
  %22 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %23 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %rgb = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %23, i32 0, i32 1
  %24 = bitcast %struct.XColor* %22 to i8*
  %25 = bitcast %struct.XColor* %rgb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  store i32 1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.12
  %26 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %next = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %26, i32 0, i32 0
  %27 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %next, align 8
  store %struct.color_name_cache_entry* %27, %struct.color_name_cache_entry** %cache_entry, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %29 = load i64, i64* %cmap, align 8
  %30 = load i8*, i8** %color_name.addr, align 8
  %31 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %call13 = call i32 @XParseColor(%struct._XDisplay* %28, i64 %29, i8* %30, %struct.XColor* %31)
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %for.end
  %call18 = call noalias i8* @xzalloc(i64 32)
  %32 = bitcast i8* %call18 to %struct.color_name_cache_entry*
  store %struct.color_name_cache_entry* %32, %struct.color_name_cache_entry** %cache_entry, align 8
  %33 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %rgb19 = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %33, i32 0, i32 1
  %34 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %35 = bitcast %struct.XColor* %rgb19 to i8*
  %36 = bitcast %struct.XColor* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  %37 = load i8*, i8** %color_name.addr, align 8
  %call20 = call noalias i8* @xstrdup(i8* %37)
  %38 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %name21 = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %38, i32 0, i32 2
  store i8* %call20, i8** %name21, align 8
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %40 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %display_info24 = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 44
  %41 = load %struct.x_display_info*, %struct.x_display_info** %display_info24, align 8
  %color_names25 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %41, i32 0, i32 88
  %42 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %color_names25, align 8
  %43 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %next26 = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %43, i32 0, i32 0
  store %struct.color_name_cache_entry* %42, %struct.color_name_cache_entry** %next26, align 8
  %44 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %cache_entry, align 8
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data27 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x28 = bitcast %union.output_data* %output_data27 to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x28, align 8
  %display_info29 = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 44
  %47 = load %struct.x_display_info*, %struct.x_display_info** %display_info29, align 8
  %color_names30 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %47, i32 0, i32 88
  store %struct.color_name_cache_entry* %44, %struct.color_name_cache_entry** %color_names30, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.16, %if.then.11, %if.then
  %48 = load i32, i32* %retval
  ret i32 %48
}

declare i32 @XParseColor(%struct._XDisplay*, i64, i8*, %struct.XColor*) #1

declare i32 @xstrcasecmp(i8*, i8*) #1

declare noalias i8* @xzalloc(i64) #1

declare noalias i8* @xstrdup(i8*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @x_alloc_nearest_color(%struct.frame* %f, i64 %cmap, %struct.XColor* %color) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %cmap.addr = alloca i64, align 8
  %color.addr = alloca %struct.XColor*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %cmap, i64* %cmap.addr, align 8
  store %struct.XColor* %color, %struct.XColor** %color.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %4 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  call void @gamma_correct(%struct.frame* %3, %struct.XColor* %4)
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %red_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 91
  %6 = load i32, i32* %red_bits, align 4
  %cmp = icmp sgt i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %8 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %8, i32 0, i32 1
  %9 = load i16, i16* %red, align 2
  %conv = zext i16 %9 to i32
  %10 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %10, i32 0, i32 2
  %11 = load i16, i16* %green, align 2
  %conv1 = zext i16 %11 to i32
  %12 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %12, i32 0, i32 3
  %13 = load i16, i16* %blue, align 2
  %conv2 = zext i16 %13 to i32
  %call = call i64 @x_make_truecolor_pixel(%struct.x_display_info* %7, i32 %conv, i32 %conv1, i32 %conv2)
  %14 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %14, i32 0, i32 0
  store i64 %call, i64* %pixel, align 8
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %display_info5 = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 44
  %17 = load %struct.x_display_info*, %struct.x_display_info** %display_info5, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 2
  %18 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %19 = load i64, i64* %cmap.addr, align 8
  %20 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %call6 = call zeroext i1 @x_alloc_nearest_color_1(%struct._XDisplay* %18, i64 %19, %struct.XColor* %20)
  store i1 %call6, i1* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %21 = load i1, i1* %retval
  ret i1 %21
}

declare void @gamma_correct(%struct.frame*, %struct.XColor*) #1

declare i64 @x_make_truecolor_pixel(%struct.x_display_info*, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @x_alloc_nearest_color_1(%struct._XDisplay* %dpy, i64 %cmap, %struct.XColor* %color) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %cmap.addr = alloca i64, align 8
  %color.addr = alloca %struct.XColor*, align 8
  %rc = alloca i8, align 1
  %nearest = alloca i32, align 4
  %i = alloca i32, align 4
  %max_color_delta = alloca i32, align 4
  %max_delta = alloca i32, align 4
  %nearest_delta = alloca i32, align 4
  %ncells = alloca i32, align 4
  %cells = alloca %struct.XColor*, align 8
  %dred = alloca i32, align 4
  %dgreen = alloca i32, align 4
  %dblue = alloca i32, align 4
  %delta = alloca i32, align 4
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %cached_color = alloca %struct.XColor*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store i64 %cmap, i64* %cmap.addr, align 8
  store %struct.XColor* %color, %struct.XColor** %color.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %1 = load i64, i64* %cmap.addr, align 8
  %2 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %call = call i32 @XAllocColor(%struct._XDisplay* %0, i64 %1, %struct.XColor* %2)
  %cmp = icmp ne i32 %call, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %rc, align 1
  %3 = load i8, i8* %rc, align 1
  %tobool = trunc i8 %3 to i1
  %conv = zext i1 %tobool to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 255, i32* %max_color_delta, align 4
  %4 = load i32, i32* %max_color_delta, align 4
  %mul = mul nsw i32 3, %4
  store i32 %mul, i32* %max_delta, align 4
  %5 = load i32, i32* %max_delta, align 4
  %add = add nsw i32 %5, 1
  store i32 %add, i32* %nearest_delta, align 4
  %6 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call3 = call %struct.XColor* @x_color_cells(%struct._XDisplay* %6, i32* %ncells)
  store %struct.XColor* %call3, %struct.XColor** %cells, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %nearest, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %ncells, align 4
  %cmp4 = icmp slt i32 %7, %8
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %9, i32 0, i32 1
  %10 = load i16, i16* %red, align 2
  %conv6 = zext i16 %10 to i32
  %shr = ashr i32 %conv6, 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.XColor*, %struct.XColor** %cells, align 8
  %arrayidx = getelementptr inbounds %struct.XColor, %struct.XColor* %12, i64 %idxprom
  %red7 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx, i32 0, i32 1
  %13 = load i16, i16* %red7, align 2
  %conv8 = zext i16 %13 to i32
  %shr9 = ashr i32 %conv8, 8
  %sub = sub nsw i32 %shr, %shr9
  store i32 %sub, i32* %dred, align 4
  %14 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %14, i32 0, i32 2
  %15 = load i16, i16* %green, align 2
  %conv10 = zext i16 %15 to i32
  %shr11 = ashr i32 %conv10, 8
  %16 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %16 to i64
  %17 = load %struct.XColor*, %struct.XColor** %cells, align 8
  %arrayidx13 = getelementptr inbounds %struct.XColor, %struct.XColor* %17, i64 %idxprom12
  %green14 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx13, i32 0, i32 2
  %18 = load i16, i16* %green14, align 2
  %conv15 = zext i16 %18 to i32
  %shr16 = ashr i32 %conv15, 8
  %sub17 = sub nsw i32 %shr11, %shr16
  store i32 %sub17, i32* %dgreen, align 4
  %19 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %19, i32 0, i32 3
  %20 = load i16, i16* %blue, align 2
  %conv18 = zext i16 %20 to i32
  %shr19 = ashr i32 %conv18, 8
  %21 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %21 to i64
  %22 = load %struct.XColor*, %struct.XColor** %cells, align 8
  %arrayidx21 = getelementptr inbounds %struct.XColor, %struct.XColor* %22, i64 %idxprom20
  %blue22 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx21, i32 0, i32 3
  %23 = load i16, i16* %blue22, align 2
  %conv23 = zext i16 %23 to i32
  %shr24 = ashr i32 %conv23, 8
  %sub25 = sub nsw i32 %shr19, %shr24
  store i32 %sub25, i32* %dblue, align 4
  %24 = load i32, i32* %dred, align 4
  %25 = load i32, i32* %dred, align 4
  %mul26 = mul nsw i32 %24, %25
  %26 = load i32, i32* %dgreen, align 4
  %27 = load i32, i32* %dgreen, align 4
  %mul27 = mul nsw i32 %26, %27
  %add28 = add nsw i32 %mul26, %mul27
  %28 = load i32, i32* %dblue, align 4
  %29 = load i32, i32* %dblue, align 4
  %mul29 = mul nsw i32 %28, %29
  %add30 = add nsw i32 %add28, %mul29
  store i32 %add30, i32* %delta, align 4
  %30 = load i32, i32* %delta, align 4
  %31 = load i32, i32* %nearest_delta, align 4
  %cmp31 = icmp slt i32 %30, %31
  br i1 %cmp31, label %if.then.33, label %if.end

if.then.33:                                       ; preds = %for.body
  %32 = load i32, i32* %i, align 4
  store i32 %32, i32* %nearest, align 4
  %33 = load i32, i32* %delta, align 4
  store i32 %33, i32* %nearest_delta, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.33, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load i32, i32* %nearest, align 4
  %idxprom34 = sext i32 %35 to i64
  %36 = load %struct.XColor*, %struct.XColor** %cells, align 8
  %arrayidx35 = getelementptr inbounds %struct.XColor, %struct.XColor* %36, i64 %idxprom34
  %red36 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx35, i32 0, i32 1
  %37 = load i16, i16* %red36, align 2
  %38 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %red37 = getelementptr inbounds %struct.XColor, %struct.XColor* %38, i32 0, i32 1
  store i16 %37, i16* %red37, align 2
  %39 = load i32, i32* %nearest, align 4
  %idxprom38 = sext i32 %39 to i64
  %40 = load %struct.XColor*, %struct.XColor** %cells, align 8
  %arrayidx39 = getelementptr inbounds %struct.XColor, %struct.XColor* %40, i64 %idxprom38
  %green40 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx39, i32 0, i32 2
  %41 = load i16, i16* %green40, align 2
  %42 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %green41 = getelementptr inbounds %struct.XColor, %struct.XColor* %42, i32 0, i32 2
  store i16 %41, i16* %green41, align 2
  %43 = load i32, i32* %nearest, align 4
  %idxprom42 = sext i32 %43 to i64
  %44 = load %struct.XColor*, %struct.XColor** %cells, align 8
  %arrayidx43 = getelementptr inbounds %struct.XColor, %struct.XColor* %44, i64 %idxprom42
  %blue44 = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx43, i32 0, i32 3
  %45 = load i16, i16* %blue44, align 2
  %46 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %blue45 = getelementptr inbounds %struct.XColor, %struct.XColor* %46, i32 0, i32 3
  store i16 %45, i16* %blue45, align 2
  %47 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %48 = load i64, i64* %cmap.addr, align 8
  %49 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %call46 = call i32 @XAllocColor(%struct._XDisplay* %47, i64 %48, %struct.XColor* %49)
  %cmp47 = icmp ne i32 %call46, 0
  %frombool49 = zext i1 %cmp47 to i8
  store i8 %frombool49, i8* %rc, align 1
  br label %if.end.76

if.else:                                          ; preds = %entry
  %50 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call50 = call %struct.x_display_info* @x_display_info_for_display(%struct._XDisplay* %50)
  store %struct.x_display_info* %call50, %struct.x_display_info** %dpyinfo, align 8
  %51 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %51, i32 0, i32 89
  %52 = load %struct.XColor*, %struct.XColor** %color_cells, align 8
  %tobool51 = icmp ne %struct.XColor* %52, null
  br i1 %tobool51, label %land.lhs.true, label %if.end.75

land.lhs.true:                                    ; preds = %if.else
  %53 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %53, i32 0, i32 0
  %54 = load i64, i64* %pixel, align 8
  %55 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells52 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %55, i32 0, i32 89
  %56 = load %struct.XColor*, %struct.XColor** %color_cells52, align 8
  %arrayidx53 = getelementptr inbounds %struct.XColor, %struct.XColor* %56, i64 %54
  store %struct.XColor* %arrayidx53, %struct.XColor** %cached_color, align 8
  %57 = load %struct.XColor*, %struct.XColor** %cached_color, align 8
  %red54 = getelementptr inbounds %struct.XColor, %struct.XColor* %57, i32 0, i32 1
  %58 = load i16, i16* %red54, align 2
  %conv55 = zext i16 %58 to i32
  %59 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %red56 = getelementptr inbounds %struct.XColor, %struct.XColor* %59, i32 0, i32 1
  %60 = load i16, i16* %red56, align 2
  %conv57 = zext i16 %60 to i32
  %cmp58 = icmp ne i32 %conv55, %conv57
  br i1 %cmp58, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %61 = load %struct.XColor*, %struct.XColor** %cached_color, align 8
  %blue60 = getelementptr inbounds %struct.XColor, %struct.XColor* %61, i32 0, i32 3
  %62 = load i16, i16* %blue60, align 2
  %conv61 = zext i16 %62 to i32
  %63 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %blue62 = getelementptr inbounds %struct.XColor, %struct.XColor* %63, i32 0, i32 3
  %64 = load i16, i16* %blue62, align 2
  %conv63 = zext i16 %64 to i32
  %cmp64 = icmp ne i32 %conv61, %conv63
  br i1 %cmp64, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %65 = load %struct.XColor*, %struct.XColor** %cached_color, align 8
  %green66 = getelementptr inbounds %struct.XColor, %struct.XColor* %65, i32 0, i32 2
  %66 = load i16, i16* %green66, align 2
  %conv67 = zext i16 %66 to i32
  %67 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %green68 = getelementptr inbounds %struct.XColor, %struct.XColor* %67, i32 0, i32 2
  %68 = load i16, i16* %green68, align 2
  %conv69 = zext i16 %68 to i32
  %cmp70 = icmp ne i32 %conv67, %conv69
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %land.lhs.true
  %69 = phi i1 [ true, %lor.lhs.false ], [ true, %land.lhs.true ], [ %cmp70, %lor.rhs ]
  br i1 %69, label %if.then.72, label %if.end.75

if.then.72:                                       ; preds = %lor.end
  %70 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells73 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %70, i32 0, i32 89
  %71 = load %struct.XColor*, %struct.XColor** %color_cells73, align 8
  %72 = bitcast %struct.XColor* %71 to i8*
  call void @xfree(i8* %72)
  %73 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells74 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %73, i32 0, i32 89
  store %struct.XColor* null, %struct.XColor** %color_cells74, align 8
  %74 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %ncolor_cells = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %74, i32 0, i32 90
  store i32 0, i32* %ncolor_cells, align 4
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.72, %lor.end, %if.else
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %for.end
  %75 = load i8, i8* %rc, align 1
  %tobool77 = trunc i8 %75 to i1
  ret i1 %tobool77
}

; Function Attrs: nounwind uwtable
define i64 @x_copy_color(%struct.frame* %f, i64 %pixel) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %pixel.addr = alloca i64, align 8
  %color = alloca %struct.XColor, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %pixel, i64* %pixel.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %visual = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 9
  %3 = load %struct.Visual*, %struct.Visual** %visual, align 8
  %call = call zeroext i1 @x_mutable_colormap(%struct.Visual* %3)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %pixel.addr, align 8
  store i64 %4, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %pixel.addr, align 8
  %pixel1 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 0
  store i64 %5, i64* %pixel1, align 8
  call void @block_input()
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_query_color(%struct.frame* %6, %struct.XColor* %color)
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info4 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 44
  %9 = load %struct.x_display_info*, %struct.x_display_info** %display_info4, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 2
  %10 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %display_info7 = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 44
  %13 = load %struct.x_display_info*, %struct.x_display_info** %display_info7, align 8
  %cmap = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %13, i32 0, i32 10
  %14 = load i64, i64* %cmap, align 8
  %call8 = call i32 @XAllocColor(%struct._XDisplay* %10, i64 %14, %struct.XColor* %color)
  call void @unblock_input()
  %pixel9 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 0
  %15 = load i64, i64* %pixel9, align 8
  store i64 %15, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load i64, i64* %retval
  ret i64 %16
}

declare zeroext i1 @x_mutable_colormap(%struct.Visual*) #1

declare void @block_input() #1

declare i32 @XAllocColor(%struct._XDisplay*, i64, %struct.XColor*) #1

declare void @unblock_input() #1

; Function Attrs: nounwind uwtable
define void @x_clear_area(%struct.frame* %f, i32 %x, i32 %y, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %7 = load i32, i32* %x.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %width.addr, align 4
  %10 = load i32, i32* %height.addr, align 4
  call void @x_clear_area1(%struct._XDisplay* %3, i64 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_clear_area1(%struct._XDisplay* %dpy, i64 %window, i32 %x, i32 %y, i32 %width, i32 %height, i32 %exposures) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %window.addr = alloca i64, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %exposures.addr = alloca i32, align 4
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %exposures, i32* %exposures.addr, align 4
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %1 = load i64, i64* %window.addr, align 8
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %4 = load i32, i32* %width.addr, align 4
  %5 = load i32, i32* %height.addr, align 4
  %6 = load i32, i32* %exposures.addr, align 4
  %call = call i32 @XClearArea(%struct._XDisplay* %0, i64 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6)
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %dpyinfo, i32 %wdesc) #0 {
entry:
  %retval = alloca %struct.frame*, align 8
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %wdesc.addr = alloca i32, align 4
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %gwdesc = alloca %struct._GtkWidget*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i32 %wdesc, i32* %wdesc.addr, align 4
  %0 = load i32, i32* %wdesc.addr, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp eq i64 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.frame* null, %struct.frame** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* @Vframe_list, align 8
  store i64 %1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, i64* %tail, align 8
  %and = and i64 %2, 7
  %conv2 = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv2, 3
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i64, i64* %frame, align 8
  %sub5 = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub5 to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  store %struct.frame* %10, %struct.frame** %f, align 8
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %12, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp6 = icmp eq i32 %bf.cast, 2
  br i1 %cmp6, label %lor.lhs.false, label %if.then.11

lor.lhs.false:                                    ; preds = %for.body
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 44
  %15 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %16 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp9 = icmp ne %struct.x_display_info* %15, %16
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %lor.lhs.false, %for.body
  br label %for.inc

if.end.12:                                        ; preds = %lor.lhs.false
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %18 = load %struct.x_output*, %struct.x_output** %x14, align 8
  store %struct.x_output* %18, %struct.x_output** %x, align 8
  %19 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 12
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %20, null
  br i1 %tobool, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.end.12
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 2
  %22 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %23 = load i32, i32* %wdesc.addr, align 4
  %conv16 = sext i32 %23 to i64
  %call = call %struct._GtkWidget* @xg_win_to_widget(%struct._XDisplay* %22, i64 %conv16)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %gwdesc, align 8
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %25 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget17 = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 12
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %widget17, align 8
  %cmp18 = icmp eq %struct._GtkWidget* %24, %26
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.then.15
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %27, %struct.frame** %retval
  br label %return

if.end.21:                                        ; preds = %if.then.15
  br label %if.end.29

if.else:                                          ; preds = %if.end.12
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 9
  %30 = load i64, i64* %window_desc, align 8
  %31 = load i32, i32* %wdesc.addr, align 4
  %conv24 = sext i32 %31 to i64
  %cmp25 = icmp eq i64 %30, %conv24
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.else
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %32, %struct.frame** %retval
  br label %return

if.end.28:                                        ; preds = %if.else
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.end.21
  br label %for.inc

for.inc:                                          ; preds = %if.end.29, %if.then.11
  %33 = load i64, i64* %tail, align 8
  %sub30 = sub nsw i64 %33, 3
  %34 = inttoptr i64 %sub30 to i8*
  %35 = bitcast i8* %34 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %35, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %36 = load i64, i64* %cdr, align 8
  store i64 %36, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  store %struct.frame* null, %struct.frame** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.27, %if.then.20, %if.then
  %37 = load %struct.frame*, %struct.frame** %retval
  ret %struct.frame* %37
}

declare %struct._GtkWidget* @xg_win_to_widget(%struct._XDisplay*, i64) #1

; Function Attrs: nounwind uwtable
define i32 @x_x_to_emacs_modifiers(%struct.x_display_info* %dpyinfo, i32 %state) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %state.addr = alloca i32, align 4
  %mod_meta = alloca i32, align 4
  %mod_alt = alloca i32, align 4
  %mod_hyper = alloca i32, align 4
  %mod_super = alloca i32, align 4
  %tem = alloca i64, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i32 %state, i32* %state.addr, align 4
  store i32 134217728, i32* %mod_meta, align 4
  store i32 4194304, i32* %mod_alt, align 4
  store i32 16777216, i32* %mod_hyper, align 4
  store i32 8388608, i32* %mod_super, align 4
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 342), align 8
  %call = call i64 @builtin_lisp_symbol(i32 678)
  %call1 = call i64 @Fget(i64 %0, i64 %call)
  store i64 %call1, i64* %tem, align 8
  %1 = load i64, i64* %tem, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %tem, align 8
  %shr = ashr i64 %2, 2
  %and4 = and i64 %shr, 2147483647
  %conv5 = trunc i64 %and4 to i32
  store i32 %conv5, i32* %mod_alt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 350), align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 678)
  %call7 = call i64 @Fget(i64 %3, i64 %call6)
  store i64 %call7, i64* %tem, align 8
  %4 = load i64, i64* %tem, align 8
  %and8 = and i64 %4, 7
  %conv9 = trunc i64 %and8 to i32
  %and10 = and i32 %conv9, -5
  %cmp11 = icmp eq i32 %and10, 2
  br i1 %cmp11, label %if.then.13, label %if.end.17

if.then.13:                                       ; preds = %if.end
  %5 = load i64, i64* %tem, align 8
  %shr14 = ashr i64 %5, 2
  %and15 = and i64 %shr14, 2147483647
  %conv16 = trunc i64 %and15 to i32
  store i32 %conv16, i32* %mod_meta, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.13, %if.end
  %6 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 346), align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 678)
  %call19 = call i64 @Fget(i64 %6, i64 %call18)
  store i64 %call19, i64* %tem, align 8
  %7 = load i64, i64* %tem, align 8
  %and20 = and i64 %7, 7
  %conv21 = trunc i64 %and20 to i32
  %and22 = and i32 %conv21, -5
  %cmp23 = icmp eq i32 %and22, 2
  br i1 %cmp23, label %if.then.25, label %if.end.29

if.then.25:                                       ; preds = %if.end.17
  %8 = load i64, i64* %tem, align 8
  %shr26 = ashr i64 %8, 2
  %and27 = and i64 %shr26, 2147483647
  %conv28 = trunc i64 %and27 to i32
  store i32 %conv28, i32* %mod_hyper, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.25, %if.end.17
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 363), align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 678)
  %call31 = call i64 @Fget(i64 %9, i64 %call30)
  store i64 %call31, i64* %tem, align 8
  %10 = load i64, i64* %tem, align 8
  %and32 = and i64 %10, 7
  %conv33 = trunc i64 %and32 to i32
  %and34 = and i32 %conv33, -5
  %cmp35 = icmp eq i32 %and34, 2
  br i1 %cmp35, label %if.then.37, label %if.end.41

if.then.37:                                       ; preds = %if.end.29
  %11 = load i64, i64* %tem, align 8
  %shr38 = ashr i64 %11, 2
  %and39 = and i64 %shr38, 2147483647
  %conv40 = trunc i64 %and39 to i32
  store i32 %conv40, i32* %mod_super, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.37, %if.end.29
  %12 = load i32, i32* %state.addr, align 4
  %13 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %shift_lock_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %13, i32 0, i32 33
  %14 = load i32, i32* %shift_lock_mask, align 4
  %or = or i32 1, %14
  %and42 = and i32 %12, %or
  %tobool = icmp ne i32 %and42, 0
  %cond = select i1 %tobool, i32 33554432, i32 0
  %15 = load i32, i32* %state.addr, align 4
  %and43 = and i32 %15, 4
  %tobool44 = icmp ne i32 %and43, 0
  %cond45 = select i1 %tobool44, i32 67108864, i32 0
  %or46 = or i32 %cond, %cond45
  %16 = load i32, i32* %state.addr, align 4
  %17 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 32
  %18 = load i32, i32* %meta_mod_mask, align 4
  %and47 = and i32 %16, %18
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.41
  %19 = load i32, i32* %mod_meta, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.41
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond49 = phi i32 [ %19, %cond.true ], [ 0, %cond.false ]
  %or50 = or i32 %or46, %cond49
  %20 = load i32, i32* %state.addr, align 4
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 34
  %22 = load i32, i32* %alt_mod_mask, align 4
  %and51 = and i32 %20, %22
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %cond.true.53, label %cond.false.54

cond.true.53:                                     ; preds = %cond.end
  %23 = load i32, i32* %mod_alt, align 4
  br label %cond.end.55

cond.false.54:                                    ; preds = %cond.end
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.54, %cond.true.53
  %cond56 = phi i32 [ %23, %cond.true.53 ], [ 0, %cond.false.54 ]
  %or57 = or i32 %or50, %cond56
  %24 = load i32, i32* %state.addr, align 4
  %25 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %super_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %25, i32 0, i32 35
  %26 = load i32, i32* %super_mod_mask, align 4
  %and58 = and i32 %24, %26
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %cond.true.60, label %cond.false.61

cond.true.60:                                     ; preds = %cond.end.55
  %27 = load i32, i32* %mod_super, align 4
  br label %cond.end.62

cond.false.61:                                    ; preds = %cond.end.55
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.61, %cond.true.60
  %cond63 = phi i32 [ %27, %cond.true.60 ], [ 0, %cond.false.61 ]
  %or64 = or i32 %or57, %cond63
  %28 = load i32, i32* %state.addr, align 4
  %29 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %hyper_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %29, i32 0, i32 36
  %30 = load i32, i32* %hyper_mod_mask, align 4
  %and65 = and i32 %28, %30
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %cond.true.67, label %cond.false.68

cond.true.67:                                     ; preds = %cond.end.62
  %31 = load i32, i32* %mod_hyper, align 4
  br label %cond.end.69

cond.false.68:                                    ; preds = %cond.end.62
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.false.68, %cond.true.67
  %cond70 = phi i32 [ %31, %cond.true.67 ], [ 0, %cond.false.68 ]
  %or71 = or i32 %or64, %cond70
  ret i32 %or71
}

declare i64 @Fget(i64, i64) #1

declare i64 @builtin_lisp_symbol(i32) #1

; Function Attrs: nounwind uwtable
define i8* @x_get_keysym_name(i32 %keysym) #0 {
entry:
  %keysym.addr = alloca i32, align 4
  %value = alloca i8*, align 8
  store i32 %keysym, i32* %keysym.addr, align 4
  call void @block_input()
  %0 = load i32, i32* %keysym.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call i8* @XKeysymToString(i64 %conv)
  store i8* %call, i8** %value, align 8
  call void @unblock_input()
  %1 = load i8*, i8** %value, align 8
  ret i8* %1
}

declare i8* @XKeysymToString(i64) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @x_bitmap_icon(%struct.frame* %f, i64 %file) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %file.addr = alloca i64, align 8
  %bitmap_id = alloca i64, align 8
  %rc = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %file, i64* %file.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 9
  %2 = load i64, i64* %window_desc, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %icon_bitmap = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 24
  %5 = load i64, i64* %icon_bitmap, align 8
  %cmp3 = icmp sgt i64 %5, 0
  br i1 %cmp3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %icon_bitmap7 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 24
  %9 = load i64, i64* %icon_bitmap7, align 8
  call void @x_destroy_bitmap(%struct.frame* %6, i64 %9)
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.4, %if.end
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data9 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x10 = bitcast %union.output_data* %output_data9 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x10, align 8
  %icon_bitmap11 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 24
  store i64 0, i64* %icon_bitmap11, align 8
  %12 = load i64, i64* %file.addr, align 8
  %call = call zeroext i1 @STRINGP(i64 %12)
  br i1 %call, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.end.8
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %14 = load i64, i64* %file.addr, align 8
  %call13 = call zeroext i1 @xg_set_icon(%struct.frame* %13, i64 %14)
  br i1 %call13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.12
  store i1 false, i1* %retval
  br label %return

if.end.15:                                        ; preds = %if.then.12
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %16 = load i64, i64* %file.addr, align 8
  %call16 = call i64 @x_create_bitmap_from_file(%struct.frame* %15, i64 %16)
  store i64 %call16, i64* %bitmap_id, align 8
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %18 = load i64, i64* %bitmap_id, align 8
  call void @x_create_bitmap_mask(%struct.frame* %17, i64 %18)
  br label %if.end.53

if.else:                                          ; preds = %if.end.8
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data17 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x18 = bitcast %union.output_data* %output_data17 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x18, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 44
  %21 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %icon_bitmap_id = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 13
  %22 = load i64, i64* %icon_bitmap_id, align 8
  %cmp19 = icmp slt i64 %22, 0
  br i1 %cmp19, label %if.then.20, label %if.end.44

if.then.20:                                       ; preds = %if.else
  store i64 -1, i64* %rc, align 8
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %24 = load i64, i64* @xg_default_icon_file, align 8
  %call21 = call zeroext i1 @xg_set_icon(%struct.frame* %23, i64 %24)
  br i1 %call21, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.20
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call22 = call zeroext i1 @xg_set_icon_from_xpm_data(%struct.frame* %25, i8** getelementptr inbounds ([288 x i8*], [288 x i8*]* @gnu_xpm_bits, i32 0, i32 0))
  br i1 %call22, label %if.then.23, label %if.end.28

if.then.23:                                       ; preds = %lor.lhs.false, %if.then.20
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data24 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 62
  %x25 = bitcast %union.output_data* %output_data24 to %struct.x_output**
  %27 = load %struct.x_output*, %struct.x_output** %x25, align 8
  %display_info26 = getelementptr inbounds %struct.x_output, %struct.x_output* %27, i32 0, i32 44
  %28 = load %struct.x_display_info*, %struct.x_display_info** %display_info26, align 8
  %icon_bitmap_id27 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 13
  store i64 -2, i64* %icon_bitmap_id27, align 8
  store i1 false, i1* %retval
  br label %return

if.end.28:                                        ; preds = %lor.lhs.false
  %29 = load i64, i64* %rc, align 8
  %cmp29 = icmp eq i64 %29, -1
  br i1 %cmp29, label %if.then.30, label %if.end.43

if.then.30:                                       ; preds = %if.end.28
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call31 = call i64 @x_create_bitmap_from_data(%struct.frame* %30, i8* getelementptr inbounds ([350 x i8], [350 x i8]* @gnu_xbm_bits, i32 0, i32 0), i32 50, i32 50)
  store i64 %call31, i64* %rc, align 8
  %31 = load i64, i64* %rc, align 8
  %cmp32 = icmp eq i64 %31, -1
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.then.30
  store i1 true, i1* %retval
  br label %return

if.end.34:                                        ; preds = %if.then.30
  %32 = load i64, i64* %rc, align 8
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data35 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 62
  %x36 = bitcast %union.output_data* %output_data35 to %struct.x_output**
  %34 = load %struct.x_output*, %struct.x_output** %x36, align 8
  %display_info37 = getelementptr inbounds %struct.x_output, %struct.x_output* %34, i32 0, i32 44
  %35 = load %struct.x_display_info*, %struct.x_display_info** %display_info37, align 8
  %icon_bitmap_id38 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %35, i32 0, i32 13
  store i64 %32, i64* %icon_bitmap_id38, align 8
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data39 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x40 = bitcast %union.output_data* %output_data39 to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x40, align 8
  %display_info41 = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 44
  %39 = load %struct.x_display_info*, %struct.x_display_info** %display_info41, align 8
  %icon_bitmap_id42 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %39, i32 0, i32 13
  %40 = load i64, i64* %icon_bitmap_id42, align 8
  call void @x_create_bitmap_mask(%struct.frame* %36, i64 %40)
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.34, %if.end.28
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.else
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data45 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 62
  %x46 = bitcast %union.output_data* %output_data45 to %struct.x_output**
  %43 = load %struct.x_output*, %struct.x_output** %x46, align 8
  %display_info47 = getelementptr inbounds %struct.x_output, %struct.x_output* %43, i32 0, i32 44
  %44 = load %struct.x_display_info*, %struct.x_display_info** %display_info47, align 8
  %icon_bitmap_id48 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %44, i32 0, i32 13
  %45 = load i64, i64* %icon_bitmap_id48, align 8
  call void @x_reference_bitmap(%struct.frame* %41, i64 %45)
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data49 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 62
  %x50 = bitcast %union.output_data* %output_data49 to %struct.x_output**
  %47 = load %struct.x_output*, %struct.x_output** %x50, align 8
  %display_info51 = getelementptr inbounds %struct.x_output, %struct.x_output* %47, i32 0, i32 44
  %48 = load %struct.x_display_info*, %struct.x_display_info** %display_info51, align 8
  %icon_bitmap_id52 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %48, i32 0, i32 13
  %49 = load i64, i64* %icon_bitmap_id52, align 8
  store i64 %49, i64* %bitmap_id, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.44, %if.end.15
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %51 = load i64, i64* %bitmap_id, align 8
  call void @x_wm_set_icon_pixmap(%struct.frame* %50, i64 %51)
  %52 = load i64, i64* %bitmap_id, align 8
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data54 = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 62
  %x55 = bitcast %union.output_data* %output_data54 to %struct.x_output**
  %54 = load %struct.x_output*, %struct.x_output** %x55, align 8
  %icon_bitmap56 = getelementptr inbounds %struct.x_output, %struct.x_output* %54, i32 0, i32 24
  store i64 %52, i64* %icon_bitmap56, align 8
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.33, %if.then.23, %if.then.14, %if.then
  %55 = load i1, i1* %retval
  ret i1 %55
}

declare void @x_destroy_bitmap(%struct.frame*, i64) #1

declare zeroext i1 @STRINGP(i64) #1

declare zeroext i1 @xg_set_icon(%struct.frame*, i64) #1

declare i64 @x_create_bitmap_from_file(%struct.frame*, i64) #1

declare void @x_create_bitmap_mask(%struct.frame*, i64) #1

declare zeroext i1 @xg_set_icon_from_xpm_data(%struct.frame*, i8**) #1

declare i64 @x_create_bitmap_from_data(%struct.frame*, i8*, i32, i32) #1

declare void @x_reference_bitmap(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_wm_set_icon_pixmap(%struct.frame* %f, i64 %pixmap_id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %pixmap_id.addr = alloca i64, align 8
  %icon_pixmap = alloca i64, align 8
  %icon_mask = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %pixmap_id, i64* %pixmap_id.addr, align 8
  %0 = load i64, i64* %pixmap_id.addr, align 8
  %cmp = icmp sgt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %2 = load i64, i64* %pixmap_id.addr, align 8
  %call = call i64 @x_bitmap_pixmap(%struct.frame* %1, i64 %2)
  store i64 %call, i64* %icon_pixmap, align 8
  %3 = load i64, i64* %icon_pixmap, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %wm_hints = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 43
  %icon_pixmap1 = getelementptr inbounds %struct.XWMHints, %struct.XWMHints* %wm_hints, i32 0, i32 3
  store i64 %3, i64* %icon_pixmap1, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load i64, i64* %pixmap_id.addr, align 8
  %call2 = call i32 @x_bitmap_mask(%struct.frame* %6, i64 %7)
  %conv = sext i32 %call2 to i64
  store i64 %conv, i64* %icon_mask, align 8
  %8 = load i64, i64* %icon_mask, align 8
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %wm_hints5 = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 43
  %icon_mask6 = getelementptr inbounds %struct.XWMHints, %struct.XWMHints* %wm_hints5, i32 0, i32 7
  store i64 %8, i64* %icon_mask6, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %if.then
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = load i64, i64* %icon_pixmap, align 8
  %13 = load i64, i64* %icon_mask, align 8
  call void @xg_set_frame_icon(%struct.frame* %11, i64 %12, i64 %13)
  br label %return

return:                                           ; preds = %if.end, %if.else
  ret void
}

; Function Attrs: nounwind uwtable
define zeroext i1 @x_text_icon(%struct.frame* %f, i8* %icon_name) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %icon_name.addr = alloca i8*, align 8
  %text = alloca %struct.XTextProperty, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %icon_name, i8** %icon_name.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 9
  %2 = load i64, i64* %window_desc, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %icon_name.addr, align 8
  %value = getelementptr inbounds %struct.XTextProperty, %struct.XTextProperty* %text, i32 0, i32 0
  store i8* %3, i8** %value, align 8
  %encoding = getelementptr inbounds %struct.XTextProperty, %struct.XTextProperty* %text, i32 0, i32 1
  store i64 31, i64* %encoding, align 8
  %format = getelementptr inbounds %struct.XTextProperty, %struct.XTextProperty* %text, i32 0, i32 2
  store i32 8, i32* %format, align 4
  %4 = load i8*, i8** %icon_name.addr, align 8
  %call = call i64 @strlen(i8* %4) #9
  %nitems = getelementptr inbounds %struct.XTextProperty, %struct.XTextProperty* %text, i32 0, i32 3
  store i64 %call, i64* %nitems, align 8
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 12
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %11, null
  br i1 %tobool, label %cond.true, label %cond.false.20

cond.true:                                        ; preds = %if.end
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %widget7 = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 12
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %widget7, align 8
  %tobool8 = icmp ne %struct._GtkWidget* %14, null
  br i1 %tobool8, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data9 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x10 = bitcast %union.output_data* %output_data9 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x10, align 8
  %widget11 = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 12
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %widget11, align 8
  %call12 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %17)
  %tobool13 = icmp ne %struct._GdkDrawable* %call12, null
  br i1 %tobool13, label %cond.true.14, label %cond.false

cond.true.14:                                     ; preds = %land.lhs.true
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data15 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x16 = bitcast %union.output_data* %output_data15 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x16, align 8
  %widget17 = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 12
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %widget17, align 8
  %call18 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %20)
  %call19 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call18)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.14
  %cond = phi i64 [ %call19, %cond.true.14 ], [ 0, %cond.false ]
  br label %cond.end.24

cond.false.20:                                    ; preds = %if.end
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data21 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x22 = bitcast %union.output_data* %output_data21 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x22, align 8
  %window_desc23 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 9
  %23 = load i64, i64* %window_desc23, align 8
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.20, %cond.end
  %cond25 = phi i64 [ %cond, %cond.end ], [ %23, %cond.false.20 ]
  call void @XSetWMIconName(%struct._XDisplay* %8, i64 %cond25, %struct.XTextProperty* %text)
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %icon_bitmap = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 24
  %26 = load i64, i64* %icon_bitmap, align 8
  %cmp28 = icmp sgt i64 %26, 0
  br i1 %cmp28, label %if.then.29, label %if.end.33

if.then.29:                                       ; preds = %cond.end.24
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data30 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x31 = bitcast %union.output_data* %output_data30 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x31, align 8
  %icon_bitmap32 = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 24
  %30 = load i64, i64* %icon_bitmap32, align 8
  call void @x_destroy_bitmap(%struct.frame* %27, i64 %30)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.29, %cond.end.24
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data34 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x35 = bitcast %union.output_data* %output_data34 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x35, align 8
  %icon_bitmap36 = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 24
  store i64 0, i64* %icon_bitmap36, align 8
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_icon_pixmap(%struct.frame* %33, i64 0)
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %if.end.33, %if.then
  %34 = load i1, i1* %retval
  ret i1 %34
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #3

declare void @XSetWMIconName(%struct._XDisplay*, i64, %struct.XTextProperty*) #1

; Function Attrs: nounwind uwtable
define void @x_catch_errors_with_handler(%struct._XDisplay* %dpy, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)* %handler, i8* %handler_data) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %handler.addr = alloca void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)*, align 8
  %handler_data.addr = alloca i8*, align 8
  %data = alloca %struct.x_error_message_stack*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)* %handler, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)** %handler.addr, align 8
  store i8* %handler_data, i8** %handler_data.addr, align 8
  %call = call noalias i8* @xmalloc(i64 232)
  %0 = bitcast i8* %call to %struct.x_error_message_stack*
  store %struct.x_error_message_stack* %0, %struct.x_error_message_stack** %data, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  call void @gdk_window_process_all_updates()
  %1 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call1 = call i32 @XSync(%struct._XDisplay* %1, i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %3 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %data, align 8
  %dpy2 = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %3, i32 0, i32 1
  store %struct._XDisplay* %2, %struct._XDisplay** %dpy2, align 8
  %4 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %data, align 8
  %string = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [200 x i8], [200 x i8]* %string, i32 0, i64 0
  store i8 0, i8* %arrayidx, align 1
  %5 = load void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)*, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)** %handler.addr, align 8
  %6 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %data, align 8
  %handler3 = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %6, i32 0, i32 2
  store void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)* %5, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)** %handler3, align 8
  %7 = load i8*, i8** %handler_data.addr, align 8
  %8 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %data, align 8
  %handler_data4 = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %8, i32 0, i32 3
  store i8* %7, i8** %handler_data4, align 8
  %9 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %10 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %data, align 8
  %prev = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %10, i32 0, i32 4
  store %struct.x_error_message_stack* %9, %struct.x_error_message_stack** %prev, align 8
  %11 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %data, align 8
  store %struct.x_error_message_stack* %11, %struct.x_error_message_stack** @x_error_message, align 8
  ret void
}

declare noalias i8* @xmalloc(i64) #1

declare void @gdk_window_process_all_updates() #1

declare i32 @XSync(%struct._XDisplay*, i32) #1

; Function Attrs: nounwind uwtable
define void @x_uncatch_errors_after_check() #0 {
entry:
  %tmp = alloca %struct.x_error_message_stack*, align 8
  call void @block_input()
  %0 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  store %struct.x_error_message_stack* %0, %struct.x_error_message_stack** %tmp, align 8
  %1 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %prev = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %1, i32 0, i32 4
  %2 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %prev, align 8
  store %struct.x_error_message_stack* %2, %struct.x_error_message_stack** @x_error_message, align 8
  %3 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** %tmp, align 8
  %4 = bitcast %struct.x_error_message_stack* %3 to i8*
  call void @xfree(i8* %4)
  call void @unblock_input()
  ret void
}

declare void @xfree(i8*) #1

; Function Attrs: nounwind uwtable
define void @x_check_errors(%struct._XDisplay* %dpy, i8* %format) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %format.addr = alloca i8*, align 8
  %string1 = alloca [200 x i8], align 16
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store i8* %format, i8** %format.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  call void @gdk_window_process_all_updates()
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call i32 @XSync(%struct._XDisplay* %0, i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %string = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [200 x i8], [200 x i8]* %string, i32 0, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %3 = bitcast [200 x i8]* %string1 to i8*
  %4 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %string2 = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %4, i32 0, i32 0
  %5 = bitcast [200 x i8]* %string2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %5, i64 200, i32 8, i1 false)
  call void @x_uncatch_errors()
  %6 = load i8*, i8** %format.addr, align 8
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %string1, i32 0, i32 0
  call void (i8*, ...) @error(i8* %6, i8* %arraydecay) #10
  unreachable

if.end:                                           ; preds = %do.end
  ret void
}

; Function Attrs: noreturn
declare void @error(i8*, ...) #4

; Function Attrs: nounwind uwtable
define zeroext i1 @x_had_errors_p(%struct._XDisplay* %dpy) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  call void @gdk_window_process_all_updates()
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call i32 @XSync(%struct._XDisplay* %0, i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %string = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [200 x i8], [200 x i8]* %string, i32 0, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  ret i1 %cmp
}

; Function Attrs: nounwind uwtable
define void @x_clear_errors(%struct._XDisplay* %dpy) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  %0 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %string = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [200 x i8], [200 x i8]* %string, i32 0, i64 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @x_new_font(%struct.frame* %f, i64 %font_object, i32 %fontset) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %font_object.addr = alloca i64, align 8
  %fontset.addr = alloca i32, align 4
  %font = alloca %struct.font*, align 8
  %unit = alloca i32, align 4
  %font_ascent = alloca i32, align 4
  %font_descent = alloca i32, align 4
  %old_menu_bar_height = alloca i32, align 4
  %fullscreen = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %font_object, i64* %font_object.addr, align 8
  store i32 %fontset, i32* %fontset.addr, align 4
  %0 = load i64, i64* %font_object.addr, align 8
  %call = call %struct.font* @XFONT_OBJECT(i64 %0)
  store %struct.font* %call, %struct.font** %font, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 58
  %2 = load i32, i32* %menu_bar_height, align 4
  store i32 %2, i32* %old_menu_bar_height, align 4
  %3 = load i32, i32* %fontset.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %font_object.addr, align 8
  %call1 = call i32 @fontset_from_font(i64 %4)
  store i32 %call1, i32* %fontset.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %fontset.addr, align 4
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %fontset2 = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 27
  store i32 %5, i32* %fontset2, align 4
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %font5 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 25
  %10 = load %struct.font*, %struct.font** %font5, align 8
  %11 = load %struct.font*, %struct.font** %font, align 8
  %cmp6 = icmp eq %struct.font* %10, %11
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %12 = load i64, i64* %font_object.addr, align 8
  store i64 %12, i64* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %13 = load %struct.font*, %struct.font** %font, align 8
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data9 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x10 = bitcast %union.output_data* %output_data9 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x10, align 8
  %font11 = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 25
  store %struct.font* %13, %struct.font** %font11, align 8
  %16 = load %struct.font*, %struct.font** %font, align 8
  %baseline_offset = getelementptr inbounds %struct.font, %struct.font* %16, i32 0, i32 13
  %17 = load i32, i32* %baseline_offset, align 4
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data12 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x13 = bitcast %union.output_data* %output_data12 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x13, align 8
  %baseline_offset14 = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 26
  store i32 %17, i32* %baseline_offset14, align 4
  %20 = load %struct.font*, %struct.font** %font, align 8
  %average_width = getelementptr inbounds %struct.font, %struct.font* %20, i32 0, i32 7
  %21 = load i32, i32* %average_width, align 4
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 59
  store i32 %21, i32* %column_width, align 4
  %23 = load %struct.font*, %struct.font** %font, align 8
  call void @get_font_ascent_descent(%struct.font* %23, i32* %font_ascent, i32* %font_descent)
  %24 = load i32, i32* %font_ascent, align 4
  %25 = load i32, i32* %font_descent, align 4
  %add = add nsw i32 %24, %25
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 60
  store i32 %add, i32* %line_height, align 4
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 57
  %28 = load i32, i32* %menu_bar_lines, align 4
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height15 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 60
  %30 = load i32, i32* %line_height15, align 4
  %mul = mul nsw i32 %28, %30
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height16 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 58
  store i32 %mul, i32* %menu_bar_height16, align 4
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width17 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 59
  %33 = load i32, i32* %column_width17, align 4
  store i32 %33, i32* %unit, align 4
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 69
  %35 = load i32, i32* %config_scroll_bar_width, align 4
  %cmp18 = icmp sgt i32 %35, 0
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.end.8
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width20 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 69
  %37 = load i32, i32* %config_scroll_bar_width20, align 4
  %38 = load i32, i32* %unit, align 4
  %add21 = add nsw i32 %37, %38
  %sub = sub nsw i32 %add21, 1
  %39 = load i32, i32* %unit, align 4
  %div = sdiv i32 %sub, %39
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 70
  store i32 %div, i32* %config_scroll_bar_cols, align 4
  br label %if.end.26

if.else:                                          ; preds = %if.end.8
  %41 = load i32, i32* %unit, align 4
  %add22 = add nsw i32 14, %41
  %sub23 = sub nsw i32 %add22, 1
  %42 = load i32, i32* %unit, align 4
  %div24 = sdiv i32 %sub23, %42
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_cols25 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 70
  store i32 %div24, i32* %config_scroll_bar_cols25, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.else, %if.then.19
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data27 = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 62
  %x28 = bitcast %union.output_data* %output_data27 to %struct.x_output**
  %45 = load %struct.x_output*, %struct.x_output** %x28, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %45, i32 0, i32 9
  %46 = load i64, i64* %window_desc, align 8
  %cmp29 = icmp ne i64 %46, 0
  br i1 %cmp29, label %if.then.30, label %if.end.72

if.then.30:                                       ; preds = %if.end.26
  %47 = load i64, i64* @tip_frame, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp32 = icmp eq i64 %47, %call31
  br i1 %cmp32, label %if.then.35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.30
  %48 = load i64, i64* @tip_frame, align 8
  %sub33 = sub nsw i64 %48, 5
  %49 = inttoptr i64 %sub33 to i8*
  %50 = bitcast i8* %49 to %struct.frame*
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp34 = icmp ne %struct.frame* %50, %51
  br i1 %cmp34, label %if.then.35, label %if.end.71

if.then.35:                                       ; preds = %lor.lhs.false, %if.then.30
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 36
  %54 = load i32, i32* %text_cols, align 4
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width36 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 59
  %56 = load i32, i32* %column_width36, align 4
  %mul37 = mul nsw i32 %54, %56
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 37
  %58 = load i32, i32* %text_lines, align 4
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height38 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 60
  %60 = load i32, i32* %line_height38, align 4
  %mul39 = mul nsw i32 %58, %60
  %call40 = call i64 @builtin_lisp_symbol(i32 439)
  call void @adjust_frame_size(%struct.frame* %52, i32 %mul37, i32 %mul39, i32 3, i1 zeroext false, i64 %call40)
  %61 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height41 = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 58
  %62 = load i32, i32* %menu_bar_height41, align 4
  %63 = load i32, i32* %old_menu_bar_height, align 4
  %cmp42 = icmp ne i32 %62, %63
  br i1 %cmp42, label %land.lhs.true, label %if.end.70

land.lhs.true:                                    ; preds = %if.then.35
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 26
  %65 = bitcast i48* %after_make_frame to i64*
  %bf.load = load i64, i64* %65, align 8
  %bf.lshr = lshr i64 %bf.load, 35
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end.70, label %land.lhs.true.43

land.lhs.true.43:                                 ; preds = %land.lhs.true
  %66 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp45 = icmp eq i64 %66, %call44
  br i1 %cmp45, label %land.lhs.true.55, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %land.lhs.true.43
  %67 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %and = and i64 %67, 7
  %conv = trunc i64 %and to i32
  %cmp47 = icmp eq i32 %conv, 3
  br i1 %cmp47, label %land.lhs.true.49, label %if.end.70

land.lhs.true.49:                                 ; preds = %lor.lhs.false.46
  %call50 = call i64 @builtin_lisp_symbol(i32 439)
  %68 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %call51 = call i64 @Fmemq(i64 %call50, i64 %68)
  %call52 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp53 = icmp eq i64 %call51, %call52
  br i1 %cmp53, label %land.lhs.true.55, label %if.end.70

land.lhs.true.55:                                 ; preds = %land.lhs.true.49, %land.lhs.true.43
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 472)
  %call57 = call i64 @get_frame_param(%struct.frame* %69, i64 %call56)
  store i64 %call57, i64* %fullscreen, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %call57, %call58
  br i1 %cmp59, label %if.then.65, label %lor.lhs.false.61

lor.lhs.false.61:                                 ; preds = %land.lhs.true.55
  %70 = load i64, i64* %fullscreen, align 8
  %call62 = call i64 @builtin_lisp_symbol(i32 473)
  %cmp63 = icmp eq i64 %70, %call62
  br i1 %cmp63, label %if.then.65, label %if.end.70

if.then.65:                                       ; preds = %lor.lhs.false.61, %land.lhs.true.55
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %72 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 41
  %73 = load i32, i32* %text_height, align 4
  %74 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height66 = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 58
  %75 = load i32, i32* %menu_bar_height66, align 4
  %add67 = add nsw i32 %73, %75
  %76 = load i32, i32* %old_menu_bar_height, align 4
  %sub68 = sub nsw i32 %add67, %76
  %call69 = call i64 @builtin_lisp_symbol(i32 439)
  call void @adjust_frame_size(%struct.frame* %71, i32 -1, i32 %sub68, i32 1, i1 zeroext false, i64 %call69)
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.65, %lor.lhs.false.61, %land.lhs.true.49, %lor.lhs.false.46, %land.lhs.true, %if.then.35
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %lor.lhs.false
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.end.26
  %77 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data73 = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 62
  %x74 = bitcast %union.output_data* %output_data73 to %struct.x_output**
  %78 = load %struct.x_output*, %struct.x_output** %x74, align 8
  %xic = getelementptr inbounds %struct.x_output, %struct.x_output* %78, i32 0, i32 47
  %79 = load %struct._XIC*, %struct._XIC** %xic, align 8
  %tobool = icmp ne %struct._XIC* %79, null
  br i1 %tobool, label %land.lhs.true.75, label %if.end.83

land.lhs.true.75:                                 ; preds = %if.end.72
  %80 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data76 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 62
  %x77 = bitcast %union.output_data* %output_data76 to %struct.x_output**
  %81 = load %struct.x_output*, %struct.x_output** %x77, align 8
  %xic_style = getelementptr inbounds %struct.x_output, %struct.x_output* %81, i32 0, i32 48
  %82 = load i64, i64* %xic_style, align 8
  %and78 = and i64 %82, 260
  %tobool79 = icmp ne i64 %and78, 0
  br i1 %tobool79, label %if.then.80, label %if.end.83

if.then.80:                                       ; preds = %land.lhs.true.75
  call void @block_input()
  %83 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %84 = load i32, i32* %fontset.addr, align 4
  %call81 = call i64 @fontset_ascii(i32 %84)
  %call82 = call i8* @SSDATA(i64 %call81)
  call void @xic_set_xfontset(%struct.frame* %83, i8* %call82)
  call void @unblock_input()
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.80, %land.lhs.true.75, %if.end.72
  %85 = load i64, i64* %font_object.addr, align 8
  store i64 %85, i64* %retval
  br label %return

return:                                           ; preds = %if.end.83, %if.then.7
  %86 = load i64, i64* %retval
  ret i64 %86
}

declare %struct.font* @XFONT_OBJECT(i64) #1

declare i32 @fontset_from_font(i64) #1

declare void @get_font_ascent_descent(%struct.font*, i32*, i32*) #1

declare void @adjust_frame_size(%struct.frame*, i32, i32, i32, i1 zeroext, i64) #1

declare i64 @Fmemq(i64, i64) #1

declare i64 @get_frame_param(%struct.frame*, i64) #1

declare void @xic_set_xfontset(%struct.frame*, i8*) #1

declare i8* @SSDATA(i64) #1

declare i64 @fontset_ascii(i32) #1

; Function Attrs: nounwind uwtable
define void @x_set_offset(%struct.frame* %f, i32 %xoff, i32 %yoff, i32 %change_gravity) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %xoff.addr = alloca i32, align 4
  %yoff.addr = alloca i32, align 4
  %change_gravity.addr = alloca i32, align 4
  %modified_top = alloca i32, align 4
  %modified_left = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %xoff, i32* %xoff.addr, align 4
  store i32 %yoff, i32* %yoff.addr, align 4
  store i32 %change_gravity, i32* %change_gravity.addr, align 4
  %0 = load i32, i32* %change_gravity.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %yoff.addr, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 45
  store i32 %1, i32* %top_pos, align 4
  %3 = load i32, i32* %xoff.addr, align 4
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 44
  store i32 %3, i32* %left_pos, align 4
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 49
  %6 = load i32, i32* %size_hint_flags, align 4
  %and = and i32 %6, -49
  store i32 %and, i32* %size_hint_flags, align 4
  %7 = load i32, i32* %xoff.addr, align 4
  %cmp1 = icmp slt i32 %7, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 49
  %9 = load i32, i32* %size_hint_flags3, align 4
  %or = or i32 %9, 16
  store i32 %or, i32* %size_hint_flags3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %10 = load i32, i32* %yoff.addr, align 4
  %cmp4 = icmp slt i32 %10, 0
  br i1 %cmp4, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags6 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 49
  %12 = load i32, i32* %size_hint_flags6, align 4
  %or7 = or i32 %12, 32
  store i32 %or7, i32* %size_hint_flags6, align 4
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.5, %if.end
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 48
  store i32 1, i32* %win_gravity, align 4
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %entry
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_calc_absolute_position(%struct.frame* %14)
  call void @block_input()
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_size_hint(%struct.frame* %15, i64 0, i1 zeroext false)
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos10 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 44
  %17 = load i32, i32* %left_pos10, align 4
  store i32 %17, i32* %modified_left, align 4
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos11 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 45
  %19 = load i32, i32* %top_pos11, align 4
  store i32 %19, i32* %modified_top, align 4
  %20 = load i32, i32* %change_gravity.addr, align 4
  %cmp12 = icmp ne i32 %20, 0
  br i1 %cmp12, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end.9
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 44
  %23 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %wm_type = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %23, i32 0, i32 97
  %24 = load i32, i32* %wm_type, align 4
  %cmp13 = icmp eq i32 %24, 1
  br i1 %cmp13, label %if.then.14, label %if.end.20

if.then.14:                                       ; preds = %land.lhs.true
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data15 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 62
  %x16 = bitcast %union.output_data* %output_data15 to %struct.x_output**
  %26 = load %struct.x_output*, %struct.x_output** %x16, align 8
  %move_offset_left = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 55
  %27 = load i32, i32* %move_offset_left, align 4
  %28 = load i32, i32* %modified_left, align 4
  %add = add nsw i32 %28, %27
  store i32 %add, i32* %modified_left, align 4
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data17 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 62
  %x18 = bitcast %union.output_data* %output_data17 to %struct.x_output**
  %30 = load %struct.x_output*, %struct.x_output** %x18, align 8
  %move_offset_top = getelementptr inbounds %struct.x_output, %struct.x_output* %30, i32 0, i32 54
  %31 = load i32, i32* %move_offset_top, align 4
  %32 = load i32, i32* %modified_top, align 4
  %add19 = add nsw i32 %32, %31
  store i32 %add19, i32* %modified_top, align 4
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.14, %land.lhs.true, %if.end.9
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data21 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 62
  %x22 = bitcast %union.output_data* %output_data21 to %struct.x_output**
  %34 = load %struct.x_output*, %struct.x_output** %x22, align 8
  %display_info23 = getelementptr inbounds %struct.x_output, %struct.x_output* %34, i32 0, i32 44
  %35 = load %struct.x_display_info*, %struct.x_display_info** %display_info23, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %35, i32 0, i32 2
  %36 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data24 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x25 = bitcast %union.output_data* %output_data24 to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x25, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 12
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %39, null
  br i1 %tobool, label %cond.true, label %cond.false.41

cond.true:                                        ; preds = %if.end.20
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %41 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %widget28 = getelementptr inbounds %struct.x_output, %struct.x_output* %41, i32 0, i32 12
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %widget28, align 8
  %tobool29 = icmp ne %struct._GtkWidget* %42, null
  br i1 %tobool29, label %land.lhs.true.30, label %cond.false

land.lhs.true.30:                                 ; preds = %cond.true
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data31 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 62
  %x32 = bitcast %union.output_data* %output_data31 to %struct.x_output**
  %44 = load %struct.x_output*, %struct.x_output** %x32, align 8
  %widget33 = getelementptr inbounds %struct.x_output, %struct.x_output* %44, i32 0, i32 12
  %45 = load %struct._GtkWidget*, %struct._GtkWidget** %widget33, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %45)
  %tobool34 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool34, label %cond.true.35, label %cond.false

cond.true.35:                                     ; preds = %land.lhs.true.30
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data36 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 62
  %x37 = bitcast %union.output_data* %output_data36 to %struct.x_output**
  %47 = load %struct.x_output*, %struct.x_output** %x37, align 8
  %widget38 = getelementptr inbounds %struct.x_output, %struct.x_output* %47, i32 0, i32 12
  %48 = load %struct._GtkWidget*, %struct._GtkWidget** %widget38, align 8
  %call39 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %48)
  %call40 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call39)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.30, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.35
  %cond = phi i64 [ %call40, %cond.true.35 ], [ 0, %cond.false ]
  br label %cond.end.44

cond.false.41:                                    ; preds = %if.end.20
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data42 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x43 = bitcast %union.output_data* %output_data42 to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x43, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 9
  %51 = load i64, i64* %window_desc, align 8
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.41, %cond.end
  %cond45 = phi i64 [ %cond, %cond.end ], [ %51, %cond.false.41 ]
  %52 = load i32, i32* %modified_left, align 4
  %53 = load i32, i32* %modified_top, align 4
  %call46 = call i32 @XMoveWindow(%struct._XDisplay* %36, i64 %cond45, i32 %52, i32 %53)
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos47 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 44
  %56 = load i32, i32* %left_pos47, align 4
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos48 = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 45
  %58 = load i32, i32* %top_pos48, align 4
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data49 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 62
  %x50 = bitcast %union.output_data* %output_data49 to %struct.x_output**
  %60 = load %struct.x_output*, %struct.x_output** %x50, align 8
  %display_info51 = getelementptr inbounds %struct.x_output, %struct.x_output* %60, i32 0, i32 44
  %61 = load %struct.x_display_info*, %struct.x_display_info** %display_info51, align 8
  %wm_type52 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %61, i32 0, i32 97
  %62 = load i32, i32* %wm_type52, align 4
  %cmp53 = icmp eq i32 %62, 0
  call void @x_sync_with_move(%struct.frame* %54, i32 %56, i32 %58, i1 zeroext %cmp53)
  %63 = load i32, i32* %change_gravity.addr, align 4
  %cmp54 = icmp ne i32 %63, 0
  br i1 %cmp54, label %land.lhs.true.55, label %if.end.77

land.lhs.true.55:                                 ; preds = %cond.end.44
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data56 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 62
  %x57 = bitcast %union.output_data* %output_data56 to %struct.x_output**
  %65 = load %struct.x_output*, %struct.x_output** %x57, align 8
  %display_info58 = getelementptr inbounds %struct.x_output, %struct.x_output* %65, i32 0, i32 44
  %66 = load %struct.x_display_info*, %struct.x_display_info** %display_info58, align 8
  %wm_type59 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %66, i32 0, i32 97
  %67 = load i32, i32* %wm_type59, align 4
  %cmp60 = icmp eq i32 %67, 0
  br i1 %cmp60, label %if.then.76, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.55
  %68 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data61 = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 62
  %x62 = bitcast %union.output_data* %output_data61 to %struct.x_output**
  %69 = load %struct.x_output*, %struct.x_output** %x62, align 8
  %display_info63 = getelementptr inbounds %struct.x_output, %struct.x_output* %69, i32 0, i32 44
  %70 = load %struct.x_display_info*, %struct.x_display_info** %display_info63, align 8
  %wm_type64 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %70, i32 0, i32 97
  %71 = load i32, i32* %wm_type64, align 4
  %cmp65 = icmp eq i32 %71, 1
  br i1 %cmp65, label %land.lhs.true.66, label %if.end.77

land.lhs.true.66:                                 ; preds = %lor.lhs.false
  %72 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data67 = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 62
  %x68 = bitcast %union.output_data* %output_data67 to %struct.x_output**
  %73 = load %struct.x_output*, %struct.x_output** %x68, align 8
  %move_offset_left69 = getelementptr inbounds %struct.x_output, %struct.x_output* %73, i32 0, i32 55
  %74 = load i32, i32* %move_offset_left69, align 4
  %cmp70 = icmp eq i32 %74, 0
  br i1 %cmp70, label %land.lhs.true.71, label %if.end.77

land.lhs.true.71:                                 ; preds = %land.lhs.true.66
  %75 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data72 = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 62
  %x73 = bitcast %union.output_data* %output_data72 to %struct.x_output**
  %76 = load %struct.x_output*, %struct.x_output** %x73, align 8
  %move_offset_top74 = getelementptr inbounds %struct.x_output, %struct.x_output* %76, i32 0, i32 54
  %77 = load i32, i32* %move_offset_top74, align 4
  %cmp75 = icmp eq i32 %77, 0
  br i1 %cmp75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %land.lhs.true.71, %land.lhs.true.55
  %78 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %79 = load i32, i32* %modified_left, align 4
  %80 = load i32, i32* %modified_top, align 4
  call void @x_check_expected_move(%struct.frame* %78, i32 %79, i32 %80)
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %land.lhs.true.71, %land.lhs.true.66, %lor.lhs.false, %cond.end.44
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_calc_absolute_position(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %flags = alloca i32, align 4
  %height = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 49
  %1 = load i32, i32* %size_hint_flags, align 4
  store i32 %1, i32* %flags, align 4
  %2 = load i32, i32* %flags, align 4
  %and = and i32 %2, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %flags, align 4
  %and1 = and i32 %3, 32
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %4 = load i32, i32* %flags, align 4
  %and3 = and i32 %4, 16
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %call = call i32 @x_display_pixel_width(%struct.x_display_info* %7)
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 46
  %9 = load i32, i32* %pixel_width, align 4
  %sub = sub nsw i32 %call, %9
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 44
  %11 = load i32, i32* %left_pos, align 4
  %add = add nsw i32 %sub, %11
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos6 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 44
  store i32 %add, i32* %left_pos6, align 4
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.5, %if.end
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 47
  %14 = load i32, i32* %pixel_height, align 4
  store i32 %14, i32* %height, align 4
  %15 = load i32, i32* %flags, align 4
  %and8 = and i32 %15, 32
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then.10, label %if.end.18

if.then.10:                                       ; preds = %if.end.7
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x12, align 8
  %display_info13 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 44
  %18 = load %struct.x_display_info*, %struct.x_display_info** %display_info13, align 8
  %call14 = call i32 @x_display_pixel_height(%struct.x_display_info* %18)
  %19 = load i32, i32* %height, align 4
  %sub15 = sub nsw i32 %call14, %19
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 45
  %21 = load i32, i32* %top_pos, align 4
  %add16 = add nsw i32 %sub15, %21
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos17 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 45
  store i32 %add16, i32* %top_pos17, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.10, %if.end.7
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags19 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 49
  %24 = load i32, i32* %size_hint_flags19, align 4
  %and20 = and i32 %24, -49
  store i32 %and20, i32* %size_hint_flags19, align 4
  br label %return

return:                                           ; preds = %if.end.18, %if.then
  ret void
}

declare void @x_wm_set_size_hint(%struct.frame*, i64, i1 zeroext) #1

declare i32 @XMoveWindow(%struct._XDisplay*, i64, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_sync_with_move(%struct.frame* %f, i32 %left, i32 %top, i1 zeroext %fuzzy) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %left.addr = alloca i32, align 4
  %top.addr = alloca i32, align 4
  %fuzzy.addr = alloca i8, align 1
  %count = alloca i32, align 4
  %current_left = alloca i32, align 4
  %current_top = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %left, i32* %left.addr, align 4
  store i32 %top, i32* %top.addr, align 4
  %frombool = zext i1 %fuzzy to i8
  store i8 %frombool, i8* %fuzzy.addr, align 1
  store i32 0, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.22, %entry
  %0 = load i32, i32* %count, align 4
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* %count, align 4
  %cmp = icmp slt i32 %0, 50
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %current_left, align 4
  store i32 0, i32* %current_top, align 4
  br label %do.body

do.body:                                          ; preds = %while.body
  call void @gdk_window_process_all_updates()
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 2
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call = call i32 @XSync(%struct._XDisplay* %4, i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_real_positions(%struct.frame* %5, i32* %current_left, i32* %current_top)
  %6 = load i8, i8* %fuzzy.addr, align 1
  %tobool = trunc i8 %6 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %7 = load i32, i32* %current_left, align 4
  %8 = load i32, i32* %left.addr, align 4
  %sub = sub nsw i32 %7, %8
  %cmp1 = icmp slt i32 %sub, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %9 = load i32, i32* %current_left, align 4
  %10 = load i32, i32* %left.addr, align 4
  %sub2 = sub nsw i32 %9, %10
  %sub3 = sub nsw i32 0, %sub2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %11 = load i32, i32* %current_left, align 4
  %12 = load i32, i32* %left.addr, align 4
  %sub4 = sub nsw i32 %11, %12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub3, %cond.true ], [ %sub4, %cond.false ]
  %cmp5 = icmp sle i32 %cond, 10
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %13 = load i32, i32* %current_top, align 4
  %14 = load i32, i32* %top.addr, align 4
  %sub6 = sub nsw i32 %13, %14
  %cmp7 = icmp slt i32 %sub6, 0
  br i1 %cmp7, label %cond.true.8, label %cond.false.11

cond.true.8:                                      ; preds = %land.lhs.true
  %15 = load i32, i32* %current_top, align 4
  %16 = load i32, i32* %top.addr, align 4
  %sub9 = sub nsw i32 %15, %16
  %sub10 = sub nsw i32 0, %sub9
  br label %cond.end.13

cond.false.11:                                    ; preds = %land.lhs.true
  %17 = load i32, i32* %current_top, align 4
  %18 = load i32, i32* %top.addr, align 4
  %sub12 = sub nsw i32 %17, %18
  br label %cond.end.13

cond.end.13:                                      ; preds = %cond.false.11, %cond.true.8
  %cond14 = phi i32 [ %sub10, %cond.true.8 ], [ %sub12, %cond.false.11 ]
  %cmp15 = icmp sle i32 %cond14, 40
  br i1 %cmp15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %cond.end.13
  br label %return

if.end:                                           ; preds = %cond.end.13, %cond.end
  br label %if.end.22

if.else:                                          ; preds = %do.end
  %19 = load i32, i32* %current_left, align 4
  %20 = load i32, i32* %left.addr, align 4
  %cmp17 = icmp eq i32 %19, %20
  br i1 %cmp17, label %land.lhs.true.18, label %if.end.21

land.lhs.true.18:                                 ; preds = %if.else
  %21 = load i32, i32* %current_top, align 4
  %22 = load i32, i32* %top.addr, align 4
  %cmp19 = icmp eq i32 %21, %22
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %land.lhs.true.18
  br label %return

if.end.21:                                        ; preds = %land.lhs.true.18, %if.else
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call23 = call i64 @builtin_lisp_symbol(i32 0)
  %call24 = call i32 @wait_reading_process_output(i64 0, i32 500000000, i32 0, i1 zeroext false, i64 %call23, %struct.Lisp_Process* null, i32 0)
  br label %return

return:                                           ; preds = %while.end, %if.then.20, %if.then.16
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_check_expected_move(%struct.frame* %f, i32 %expected_left, i32 %expected_top) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %expected_left.addr = alloca i32, align 4
  %expected_top.addr = alloca i32, align 4
  %current_left = alloca i32, align 4
  %current_top = alloca i32, align 4
  %adjusted_left = alloca i32, align 4
  %adjusted_top = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %expected_left, i32* %expected_left.addr, align 4
  store i32 %expected_top, i32* %expected_top.addr, align 4
  store i32 0, i32* %current_left, align 4
  store i32 0, i32* %current_top, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_real_positions(%struct.frame* %0, i32* %current_left, i32* %current_top)
  %1 = load i32, i32* %current_left, align 4
  %2 = load i32, i32* %expected_left.addr, align 4
  %cmp = icmp ne i32 %1, %2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %current_top, align 4
  %4 = load i32, i32* %expected_top.addr, align 4
  %cmp1 = icmp ne i32 %3, %4
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %wm_type = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 97
  store i32 1, i32* %wm_type, align 4
  %8 = load i32, i32* %expected_left.addr, align 4
  %9 = load i32, i32* %current_left, align 4
  %sub = sub nsw i32 %8, %9
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %move_offset_left = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 55
  store i32 %sub, i32* %move_offset_left, align 4
  %12 = load i32, i32* %expected_top.addr, align 4
  %13 = load i32, i32* %current_top, align 4
  %sub4 = sub nsw i32 %12, %13
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %move_offset_top = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 54
  store i32 %sub4, i32* %move_offset_top, align 4
  %16 = load i32, i32* %expected_left.addr, align 4
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %18 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %move_offset_left9 = getelementptr inbounds %struct.x_output, %struct.x_output* %18, i32 0, i32 55
  %19 = load i32, i32* %move_offset_left9, align 4
  %add = add nsw i32 %16, %19
  store i32 %add, i32* %adjusted_left, align 4
  %20 = load i32, i32* %expected_top.addr, align 4
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %move_offset_top12 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 54
  %23 = load i32, i32* %move_offset_top12, align 4
  %add13 = add nsw i32 %20, %23
  store i32 %add13, i32* %adjusted_top, align 4
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data14 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x15 = bitcast %union.output_data* %output_data14 to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x15, align 8
  %display_info16 = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 44
  %26 = load %struct.x_display_info*, %struct.x_display_info** %display_info16, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 2
  %27 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data17 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x18 = bitcast %union.output_data* %output_data17 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x18, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 12
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %30, null
  br i1 %tobool, label %cond.true, label %cond.false.33

cond.true:                                        ; preds = %if.then
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %widget21 = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 12
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %widget21, align 8
  %tobool22 = icmp ne %struct._GtkWidget* %33, null
  br i1 %tobool22, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %35 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %widget25 = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 12
  %36 = load %struct._GtkWidget*, %struct._GtkWidget** %widget25, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %36)
  %tobool26 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool26, label %cond.true.27, label %cond.false

cond.true.27:                                     ; preds = %land.lhs.true
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data28 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x29 = bitcast %union.output_data* %output_data28 to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x29, align 8
  %widget30 = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 12
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %widget30, align 8
  %call31 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %39)
  %call32 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call31)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.27
  %cond = phi i64 [ %call32, %cond.true.27 ], [ 0, %cond.false ]
  br label %cond.end.36

cond.false.33:                                    ; preds = %if.then
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data34 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 62
  %x35 = bitcast %union.output_data* %output_data34 to %struct.x_output**
  %41 = load %struct.x_output*, %struct.x_output** %x35, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %41, i32 0, i32 9
  %42 = load i64, i64* %window_desc, align 8
  br label %cond.end.36

cond.end.36:                                      ; preds = %cond.false.33, %cond.end
  %cond37 = phi i64 [ %cond, %cond.end ], [ %42, %cond.false.33 ]
  %43 = load i32, i32* %adjusted_left, align 4
  %44 = load i32, i32* %adjusted_top, align 4
  %call38 = call i32 @XMoveWindow(%struct._XDisplay* %27, i64 %cond37, i32 %43, i32 %44)
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %46 = load i32, i32* %expected_left.addr, align 4
  %47 = load i32, i32* %expected_top.addr, align 4
  call void @x_sync_with_move(%struct.frame* %45, i32 %46, i32 %47, i1 zeroext false)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data39 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 62
  %x40 = bitcast %union.output_data* %output_data39 to %struct.x_output**
  %49 = load %struct.x_output*, %struct.x_output** %x40, align 8
  %display_info41 = getelementptr inbounds %struct.x_output, %struct.x_output* %49, i32 0, i32 44
  %50 = load %struct.x_display_info*, %struct.x_display_info** %display_info41, align 8
  %wm_type42 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %50, i32 0, i32 97
  store i32 2, i32* %wm_type42, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end.36
  ret void
}

; Function Attrs: nounwind uwtable
define zeroext i1 @x_wm_supports(%struct.frame* %f, i64 %want_atom) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %want_atom.addr = alloca i64, align 8
  %actual_type = alloca i64, align 8
  %actual_size = alloca i64, align 8
  %bytes_remaining = alloca i64, align 8
  %i = alloca i32, align 4
  %rc = alloca i32, align 4
  %actual_format = alloca i32, align 4
  %ret = alloca i8, align 1
  %wmcheck_window = alloca i64, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %target_window = alloca i64, align 8
  %max_len = alloca i32, align 4
  %dpy = alloca %struct._XDisplay*, align 8
  %tmp_data = alloca i8*, align 8
  %target_type = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %want_atom, i64* %want_atom.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %root_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 14
  %4 = load i64, i64* %root_window, align 8
  store i64 %4, i64* %target_window, align 8
  store i32 65536, i32* %max_len, align 4
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %8, %struct._XDisplay** %dpy, align 8
  store i8* null, i8** %tmp_data, align 8
  store i64 33, i64* %target_type, align 8
  call void @block_input()
  %9 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  call void @x_catch_errors(%struct._XDisplay* %9)
  %10 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %11 = load i64, i64* %target_window, align 8
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_supporting_wm_check = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 102
  %13 = load i64, i64* %Xatom_net_supporting_wm_check, align 8
  %14 = load i32, i32* %max_len, align 4
  %conv = sext i32 %14 to i64
  %15 = load i64, i64* %target_type, align 8
  %call = call i32 @XGetWindowProperty(%struct._XDisplay* %10, i64 %11, i64 %13, i64 0, i64 %conv, i32 0, i64 %15, i64* %actual_type, i32* %actual_format, i64* %actual_size, i64* %bytes_remaining, i8** %tmp_data)
  store i32 %call, i32* %rc, align 4
  %16 = load i32, i32* %rc, align 4
  %cmp = icmp ne i32 %16, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %17 = load i64, i64* %actual_type, align 8
  %cmp5 = icmp ne i64 %17, 33
  br i1 %cmp5, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %18 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call8 = call zeroext i1 @x_had_errors_p(%struct._XDisplay* %18)
  br i1 %call8, label %if.then, label %if.end.12

if.then:                                          ; preds = %lor.lhs.false.7, %lor.lhs.false, %entry
  %19 = load i8*, i8** %tmp_data, align 8
  %tobool = icmp ne i8* %19, null
  br i1 %tobool, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %20 = load i8*, i8** %tmp_data, align 8
  %call11 = call i32 @XFree(i8* %20)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  call void @x_uncatch_errors()
  call void @unblock_input()
  store i1 false, i1* %retval
  br label %return

if.end.12:                                        ; preds = %lor.lhs.false.7
  %21 = load i8*, i8** %tmp_data, align 8
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %wmcheck_window, align 8
  %24 = load i8*, i8** %tmp_data, align 8
  %call13 = call i32 @XFree(i8* %24)
  %25 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %26 = load i64, i64* %wmcheck_window, align 8
  %call14 = call i32 @XSelectInput(%struct._XDisplay* %25, i64 %26, i64 131072)
  %27 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call15 = call zeroext i1 @x_had_errors_p(%struct._XDisplay* %27)
  br i1 %call15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.12
  call void @x_uncatch_errors_after_check()
  call void @unblock_input()
  store i1 false, i1* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.12
  %28 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 105
  %29 = load i64, i64* %net_supported_window, align 8
  %30 = load i64, i64* %wmcheck_window, align 8
  %cmp18 = icmp ne i64 %29, %30
  br i1 %cmp18, label %if.then.20, label %if.end.49

if.then.20:                                       ; preds = %if.end.17
  %31 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_atoms = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %31, i32 0, i32 103
  %32 = load i64*, i64** %net_supported_atoms, align 8
  %cmp21 = icmp ne i64* %32, null
  br i1 %cmp21, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.then.20
  %33 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_atoms24 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %33, i32 0, i32 103
  %34 = load i64*, i64** %net_supported_atoms24, align 8
  %35 = bitcast i64* %34 to i8*
  %call25 = call i32 @XFree(i8* %35)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.23, %if.then.20
  %36 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_atoms27 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %36, i32 0, i32 103
  store i64* null, i64** %net_supported_atoms27, align 8
  %37 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %nr_net_supported_atoms = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %37, i32 0, i32 104
  store i32 0, i32* %nr_net_supported_atoms, align 4
  %38 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_window28 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %38, i32 0, i32 105
  store i64 0, i64* %net_supported_window28, align 8
  store i64 4, i64* %target_type, align 8
  store i8* null, i8** %tmp_data, align 8
  %39 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %40 = load i64, i64* %target_window, align 8
  %41 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_supported = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %41, i32 0, i32 101
  %42 = load i64, i64* %Xatom_net_supported, align 8
  %43 = load i32, i32* %max_len, align 4
  %conv29 = sext i32 %43 to i64
  %44 = load i64, i64* %target_type, align 8
  %call30 = call i32 @XGetWindowProperty(%struct._XDisplay* %39, i64 %40, i64 %42, i64 0, i64 %conv29, i32 0, i64 %44, i64* %actual_type, i32* %actual_format, i64* %actual_size, i64* %bytes_remaining, i8** %tmp_data)
  store i32 %call30, i32* %rc, align 4
  %45 = load i32, i32* %rc, align 4
  %cmp31 = icmp ne i32 %45, 0
  br i1 %cmp31, label %if.then.39, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %if.end.26
  %46 = load i64, i64* %actual_type, align 8
  %cmp34 = icmp ne i64 %46, 4
  br i1 %cmp34, label %if.then.39, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %lor.lhs.false.33
  %47 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call37 = call zeroext i1 @x_had_errors_p(%struct._XDisplay* %47)
  br i1 %call37, label %if.then.39, label %if.end.44

if.then.39:                                       ; preds = %lor.lhs.false.36, %lor.lhs.false.33, %if.end.26
  %48 = load i8*, i8** %tmp_data, align 8
  %tobool40 = icmp ne i8* %48, null
  br i1 %tobool40, label %if.then.41, label %if.end.43

if.then.41:                                       ; preds = %if.then.39
  %49 = load i8*, i8** %tmp_data, align 8
  %call42 = call i32 @XFree(i8* %49)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.41, %if.then.39
  call void @x_uncatch_errors()
  call void @unblock_input()
  store i1 false, i1* %retval
  br label %return

if.end.44:                                        ; preds = %lor.lhs.false.36
  %50 = load i8*, i8** %tmp_data, align 8
  %51 = bitcast i8* %50 to i64*
  %52 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_atoms45 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %52, i32 0, i32 103
  store i64* %51, i64** %net_supported_atoms45, align 8
  %53 = load i64, i64* %actual_size, align 8
  %conv46 = trunc i64 %53 to i32
  %54 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %nr_net_supported_atoms47 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %54, i32 0, i32 104
  store i32 %conv46, i32* %nr_net_supported_atoms47, align 4
  %55 = load i64, i64* %wmcheck_window, align 8
  %56 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_window48 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %56, i32 0, i32 105
  store i64 %55, i64* %net_supported_window48, align 8
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.44, %if.end.17
  store i8 0, i8* %ret, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.49
  %57 = load i8, i8* %ret, align 1
  %tobool50 = trunc i8 %57 to i1
  br i1 %tobool50, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %for.cond
  %58 = load i32, i32* %i, align 4
  %59 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %nr_net_supported_atoms51 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %59, i32 0, i32 104
  %60 = load i32, i32* %nr_net_supported_atoms51, align 4
  %cmp52 = icmp slt i32 %58, %60
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %61 = phi i1 [ false, %for.cond ], [ %cmp52, %land.rhs ]
  br i1 %61, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %62 = load i32, i32* %i, align 4
  %idxprom = sext i32 %62 to i64
  %63 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %net_supported_atoms54 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %63, i32 0, i32 103
  %64 = load i64*, i64** %net_supported_atoms54, align 8
  %arrayidx = getelementptr inbounds i64, i64* %64, i64 %idxprom
  %65 = load i64, i64* %arrayidx, align 8
  %66 = load i64, i64* %want_atom.addr, align 8
  %cmp55 = icmp eq i64 %65, %66
  %frombool = zext i1 %cmp55 to i8
  store i8 %frombool, i8* %ret, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %67 = load i32, i32* %i, align 4
  %inc = add nsw i32 %67, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  call void @x_uncatch_errors()
  call void @unblock_input()
  %68 = load i8, i8* %ret, align 1
  %tobool57 = trunc i8 %68 to i1
  store i1 %tobool57, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.end.43, %if.then.16, %if.end
  %69 = load i1, i1* %retval
  ret i1 %69
}

declare i32 @XSelectInput(%struct._XDisplay*, i64, i64) #1

; Function Attrs: nounwind uwtable
define void @x_set_sticky(%struct.frame* %f, i64 %new_value, i64 %old_value) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %new_value.addr = alloca i64, align 8
  %old_value.addr = alloca i64, align 8
  %frame = alloca i64, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %new_value, i64* %new_value.addr, align 8
  store i64 %old_value, i64* %old_value.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %4 = bitcast %struct.frame* %3 to i8*
  %call = call i64 @make_lisp_ptr(i8* %4, i32 5)
  store i64 %call, i64* %frame, align 8
  %5 = load i64, i64* %frame, align 8
  %6 = load i64, i64* %new_value.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %6, %call1
  %lnot = xor i1 %cmp, true
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_sticky = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 113
  %8 = load i64, i64* %Xatom_net_wm_state_sticky, align 8
  call void @set_wm_state(i64 %5, i1 zeroext %lnot, i64 %8, i64 0)
  ret void
}

declare i64 @make_lisp_ptr(i8*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @set_wm_state(i64 %frame, i1 zeroext %add, i64 %atom, i64 %value) #0 {
entry:
  %frame.addr = alloca i64, align 8
  %add.addr = alloca i8, align 1
  %atom.addr = alloca i64, align 8
  %value.addr = alloca i64, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store i64 %frame, i64* %frame.addr, align 8
  %frombool = zext i1 %add to i8
  store i8 %frombool, i8* %add.addr, align 1
  store i64 %atom, i64* %atom.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  %0 = load i64, i64* %frame.addr, align 8
  %sub = sub nsw i64 %0, 5
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.frame*
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 44
  %4 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %4, %struct.x_display_info** %dpyinfo, align 8
  %5 = load i64, i64* %frame.addr, align 8
  %6 = load i64, i64* %frame.addr, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 109
  %8 = load i64, i64* %Xatom_net_wm_state, align 8
  %9 = load i8, i8* %add.addr, align 1
  %tobool = trunc i8 %9 to i1
  %conv = zext i1 %tobool to i64
  %shl = shl i64 %conv, 2
  %add1 = add i64 %shl, 2
  %10 = load i64, i64* %atom.addr, align 8
  %cmp = icmp ule i64 0, %10
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %11 = load i64, i64* %atom.addr, align 8
  %cmp3 = icmp ule i64 -2305843009213693952, %11
  br i1 %cmp3, label %land.lhs.true, label %cond.true

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %12 = load i64, i64* %atom.addr, align 8
  %cmp5 = icmp ule i64 %12, 2305843009213693951
  br i1 %cmp5, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true, %lor.lhs.false
  %13 = load i64, i64* %atom.addr, align 8
  %conv7 = uitofp i64 %13 to double
  %call = call i64 @make_float(double %conv7)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %14 = load i64, i64* %atom.addr, align 8
  %shl8 = shl i64 %14, 2
  %add9 = add i64 %shl8, 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %add9, %cond.false ]
  %15 = load i64, i64* %value.addr, align 8
  %cmp10 = icmp ne i64 %15, 0
  br i1 %cmp10, label %cond.true.12, label %cond.false.30

cond.true.12:                                     ; preds = %cond.end
  %16 = load i64, i64* %value.addr, align 8
  %cmp13 = icmp ule i64 0, %16
  br i1 %cmp13, label %land.lhs.true.18, label %lor.lhs.false.15

lor.lhs.false.15:                                 ; preds = %cond.true.12
  %17 = load i64, i64* %value.addr, align 8
  %cmp16 = icmp ule i64 -2305843009213693952, %17
  br i1 %cmp16, label %land.lhs.true.18, label %cond.true.21

land.lhs.true.18:                                 ; preds = %lor.lhs.false.15, %cond.true.12
  %18 = load i64, i64* %value.addr, align 8
  %cmp19 = icmp ule i64 %18, 2305843009213693951
  br i1 %cmp19, label %cond.false.24, label %cond.true.21

cond.true.21:                                     ; preds = %land.lhs.true.18, %lor.lhs.false.15
  %19 = load i64, i64* %value.addr, align 8
  %conv22 = uitofp i64 %19 to double
  %call23 = call i64 @make_float(double %conv22)
  br label %cond.end.27

cond.false.24:                                    ; preds = %land.lhs.true.18
  %20 = load i64, i64* %value.addr, align 8
  %shl25 = shl i64 %20, 2
  %add26 = add i64 %shl25, 2
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.24, %cond.true.21
  %cond28 = phi i64 [ %call23, %cond.true.21 ], [ %add26, %cond.false.24 ]
  %call29 = call i64 @list1(i64 %cond28)
  br label %cond.end.32

cond.false.30:                                    ; preds = %cond.end
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.30, %cond.end.27
  %cond33 = phi i64 [ %call29, %cond.end.27 ], [ %call31, %cond.false.30 ]
  %call34 = call i64 @Fcons(i64 %cond, i64 %cond33)
  %call35 = call i64 @Fcons(i64 %add1, i64 %call34)
  call void @x_send_client_event(i64 %5, i64 2, i64 %6, i64 %8, i64 130, i64 %call35)
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_wait_for_event(%struct.frame* %f, i32 %eventtype) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %eventtype.addr = alloca i32, align 4
  %level = alloca i32, align 4
  %fds = alloca %struct.fd_set, align 8
  %tmo = alloca %struct.timespec, align 8
  %tmo_at = alloca %struct.timespec, align 8
  %time_now = alloca %struct.timespec, align 8
  %fd = alloca i32, align 4
  %coerce = alloca %struct.timespec, align 8
  %agg.tmp = alloca %struct.timespec, align 8
  %coerce4 = alloca %struct.timespec, align 8
  %__d0 = alloca i32, align 4
  %__d1 = alloca i32, align 4
  %coerce8 = alloca %struct.timespec, align 8
  %coerce11 = alloca %struct.timespec, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %eventtype, i32* %eventtype.addr, align 4
  %0 = load volatile i32, i32* @interrupt_input_blocked, align 4
  store i32 %0, i32* %level, align 4
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 2
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %5 = bitcast %struct._XDisplay* %4 to %struct.anon.12*
  %fd1 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %5, i32 0, i32 2
  %6 = load i32, i32* %fd1, align 4
  store i32 %6, i32* %fd, align 4
  %7 = load i32, i32* %eventtype.addr, align 4
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %wait_event_type = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 64
  store i32 %7, i32* %wait_event_type, align 4
  %call = call { i64, i64 } @make_timespec(i64 0, i64 100000000)
  %9 = bitcast %struct.timespec* %coerce to { i64, i64 }*
  %10 = getelementptr { i64, i64 }, { i64, i64 }* %9, i32 0, i32 0
  %11 = extractvalue { i64, i64 } %call, 0
  store i64 %11, i64* %10, align 8
  %12 = getelementptr { i64, i64 }, { i64, i64 }* %9, i32 0, i32 1
  %13 = extractvalue { i64, i64 } %call, 1
  store i64 %13, i64* %12, align 8
  %14 = bitcast %struct.timespec* %tmo to i8*
  %15 = bitcast %struct.timespec* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 16, i32 8, i1 false)
  %call2 = call { i64, i64 } @current_timespec()
  %16 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %17 = getelementptr { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0
  %18 = extractvalue { i64, i64 } %call2, 0
  store i64 %18, i64* %17, align 8
  %19 = getelementptr { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1
  %20 = extractvalue { i64, i64 } %call2, 1
  store i64 %20, i64* %19, align 8
  %21 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %22 = getelementptr { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 1
  %24 = getelementptr { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1
  %25 = load i64, i64* %24, align 1
  %26 = bitcast %struct.timespec* %tmo to { i64, i64 }*
  %27 = getelementptr { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 1
  %29 = getelementptr { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 1
  %call3 = call { i64, i64 } @timespec_add(i64 %23, i64 %25, i64 %28, i64 %30) #11
  %31 = bitcast %struct.timespec* %coerce4 to { i64, i64 }*
  %32 = getelementptr { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0
  %33 = extractvalue { i64, i64 } %call3, 0
  store i64 %33, i64* %32, align 8
  %34 = getelementptr { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1
  %35 = extractvalue { i64, i64 } %call3, 1
  store i64 %35, i64* %34, align 8
  %36 = bitcast %struct.timespec* %tmo_at to i8*
  %37 = bitcast %struct.timespec* %coerce4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 16, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %if.end.15, %entry
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %wait_event_type5 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 64
  %39 = load i32, i32* %wait_event_type5, align 4
  %tobool = icmp ne i32 %39, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store volatile i8 1, i8* @pending_signals, align 1
  call void @totally_unblock_input()
  call void @block_input()
  %40 = load i32, i32* %level, align 4
  store volatile i32 %40, i32* @interrupt_input_blocked, align 4
  br label %do.body

do.body:                                          ; preds = %while.body
  %fds_bits = getelementptr inbounds %struct.fd_set, %struct.fd_set* %fds, i32 0, i32 0
  %arrayidx = getelementptr inbounds [16 x i64], [16 x i64]* %fds_bits, i32 0, i64 0
  %41 = call { i64, i64* } asm sideeffect "cld; rep; stosq", "={cx},={di},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}"(i32 0, i64 16, i64* %arrayidx) #2, !srcloc !1
  %asmresult = extractvalue { i64, i64* } %41, 0
  %asmresult6 = extractvalue { i64, i64* } %41, 1
  %42 = trunc i64 %asmresult to i32
  store i32 %42, i32* %__d0, align 4
  %43 = ptrtoint i64* %asmresult6 to i64
  %44 = trunc i64 %43 to i32
  store i32 %44, i32* %__d1, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %45 = load i32, i32* %fd, align 4
  call void @fd_SET(i32 %45, %struct.fd_set* %fds)
  %call7 = call { i64, i64 } @current_timespec()
  %46 = bitcast %struct.timespec* %coerce8 to { i64, i64 }*
  %47 = getelementptr { i64, i64 }, { i64, i64 }* %46, i32 0, i32 0
  %48 = extractvalue { i64, i64 } %call7, 0
  store i64 %48, i64* %47, align 8
  %49 = getelementptr { i64, i64 }, { i64, i64 }* %46, i32 0, i32 1
  %50 = extractvalue { i64, i64 } %call7, 1
  store i64 %50, i64* %49, align 8
  %51 = bitcast %struct.timespec* %time_now to i8*
  %52 = bitcast %struct.timespec* %coerce8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 16, i32 8, i1 false)
  %53 = bitcast %struct.timespec* %tmo_at to { i64, i64 }*
  %54 = getelementptr { i64, i64 }, { i64, i64 }* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 1
  %56 = getelementptr { i64, i64 }, { i64, i64 }* %53, i32 0, i32 1
  %57 = load i64, i64* %56, align 1
  %58 = bitcast %struct.timespec* %time_now to { i64, i64 }*
  %59 = getelementptr { i64, i64 }, { i64, i64 }* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 1
  %61 = getelementptr { i64, i64 }, { i64, i64 }* %58, i32 0, i32 1
  %62 = load i64, i64* %61, align 1
  %call9 = call i32 @timespec_cmp(i64 %55, i64 %57, i64 %60, i64 %62) #9
  %cmp = icmp slt i32 %call9, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  br label %while.end

if.end:                                           ; preds = %do.end
  %63 = bitcast %struct.timespec* %tmo_at to { i64, i64 }*
  %64 = getelementptr { i64, i64 }, { i64, i64 }* %63, i32 0, i32 0
  %65 = load i64, i64* %64, align 1
  %66 = getelementptr { i64, i64 }, { i64, i64 }* %63, i32 0, i32 1
  %67 = load i64, i64* %66, align 1
  %68 = bitcast %struct.timespec* %time_now to { i64, i64 }*
  %69 = getelementptr { i64, i64 }, { i64, i64 }* %68, i32 0, i32 0
  %70 = load i64, i64* %69, align 1
  %71 = getelementptr { i64, i64 }, { i64, i64 }* %68, i32 0, i32 1
  %72 = load i64, i64* %71, align 1
  %call10 = call { i64, i64 } @timespec_sub(i64 %65, i64 %67, i64 %70, i64 %72) #11
  %73 = bitcast %struct.timespec* %coerce11 to { i64, i64 }*
  %74 = getelementptr { i64, i64 }, { i64, i64 }* %73, i32 0, i32 0
  %75 = extractvalue { i64, i64 } %call10, 0
  store i64 %75, i64* %74, align 8
  %76 = getelementptr { i64, i64 }, { i64, i64 }* %73, i32 0, i32 1
  %77 = extractvalue { i64, i64 } %call10, 1
  store i64 %77, i64* %76, align 8
  %78 = bitcast %struct.timespec* %tmo to i8*
  %79 = bitcast %struct.timespec* %coerce11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 16, i32 8, i1 false)
  %80 = load i32, i32* %fd, align 4
  %add = add nsw i32 %80, 1
  %call12 = call i32 @pselect(i32 %add, %struct.fd_set* %fds, %struct.fd_set* null, %struct.fd_set* null, %struct.timespec* %tmo, %struct.__sigset_t* null)
  %cmp13 = icmp eq i32 %call12, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end
  br label %while.end

if.end.15:                                        ; preds = %if.end
  br label %while.cond

while.end:                                        ; preds = %if.then.14, %if.then, %while.cond
  %81 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %wait_event_type16 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 64
  store i32 0, i32* %wait_event_type16, align 4
  ret void
}

declare { i64, i64 } @make_timespec(i64, i64) #1

; Function Attrs: nounwind readnone
declare { i64, i64 } @timespec_add(i64, i64, i64, i64) #5

declare { i64, i64 } @current_timespec() #1

declare void @totally_unblock_input() #1

declare void @fd_SET(i32, %struct.fd_set*) #1

; Function Attrs: nounwind readonly
declare i32 @timespec_cmp(i64, i64, i64, i64) #3

; Function Attrs: nounwind readnone
declare { i64, i64 } @timespec_sub(i64, i64, i64, i64) #5

declare i32 @pselect(i32, %struct.fd_set*, %struct.fd_set*, %struct.fd_set*, %struct.timespec*, %struct.__sigset_t*) #1

; Function Attrs: nounwind uwtable
define void @x_set_window_size(%struct.frame* %f, i1 zeroext %change_gravity, i32 %width, i32 %height, i1 zeroext %pixelwise) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %change_gravity.addr = alloca i8, align 1
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %pixelwise.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %change_gravity to i8
  store i8 %frombool, i8* %change_gravity.addr, align 1
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %frombool1 = zext i1 %pixelwise to i8
  store i8 %frombool1, i8* %pixelwise.addr, align 1
  call void @block_input()
  %0 = load i8, i8* %pixelwise.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %width.addr, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 59
  %3 = load i32, i32* %column_width, align 4
  %mul = mul nsw i32 %1, %3
  store i32 %mul, i32* %width.addr, align 4
  %4 = load i32, i32* %height.addr, align 4
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 60
  %6 = load i32, i32* %line_height, align 4
  %mul2 = mul nsw i32 %4, %6
  store i32 %mul2, i32* %height.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 13
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool3 = icmp ne %struct._GtkWidget* %9, null
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %11 = load i32, i32* %width.addr, align 4
  %12 = load i32, i32* %height.addr, align 4
  call void @xg_frame_set_char_size(%struct.frame* %10, i32 %11, i32 %12)
  br label %if.end.6

if.else:                                          ; preds = %if.end
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %14 = load i8, i8* %change_gravity.addr, align 1
  %tobool5 = trunc i8 %14 to i1
  %15 = load i32, i32* %width.addr, align 4
  %16 = load i32, i32* %height.addr, align 4
  call void @x_set_window_size_1(%struct.frame* %13, i1 zeroext %tobool5, i32 %15, i32 %16)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.4
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 5
  %18 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %18)
  call void @mark_window_cursors_off(%struct.window* %call)
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @cancel_mouse_face(%struct.frame* %19)
  call void @unblock_input()
  call void @do_pending_window_change(i1 zeroext false)
  ret void
}

declare void @xg_frame_set_char_size(%struct.frame*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_set_window_size_1(%struct.frame* %f, i1 zeroext %change_gravity, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %change_gravity.addr = alloca i8, align 1
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %pixelwidth = alloca i32, align 4
  %pixelheight = alloca i32, align 4
  %old_width = alloca i32, align 4
  %old_height = alloca i32, align 4
  %fullscreen = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %change_gravity to i8
  store i8 %frombool, i8* %change_gravity.addr, align 1
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load i32, i32* %width.addr, align 4
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 69
  %4 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i32 %0, %cond
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 54
  %6 = load i32, i32* %left_fringe_width, align 4
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 55
  %8 = load i32, i32* %right_fringe_width, align 4
  %add1 = add nsw i32 %6, %8
  %add2 = add nsw i32 %add, %add1
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 51
  %10 = load i32, i32* %internal_border_width, align 4
  %mul = mul nsw i32 2, %10
  %add3 = add nsw i32 %add2, %mul
  store i32 %add3, i32* %pixelwidth, align 4
  %11 = load i32, i32* %height.addr, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 58
  %13 = load i32, i32* %menu_bar_height, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 28
  %15 = load i32, i32* %tool_bar_height, align 4
  %add4 = add nsw i32 %13, %15
  %add5 = add nsw i32 %11, %add4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 26
  %17 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load6 = load i64, i64* %17, align 8
  %bf.lshr7 = lshr i64 %bf.load6, 32
  %bf.clear8 = and i64 %bf.lshr7, 1
  %bf.cast9 = trunc i64 %bf.clear8 to i1
  br i1 %bf.cast9, label %cond.true.10, label %cond.false.11

cond.true.10:                                     ; preds = %cond.end
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 71
  %19 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.12

cond.false.11:                                    ; preds = %cond.end
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.10
  %cond13 = phi i32 [ %19, %cond.true.10 ], [ 0, %cond.false.11 ]
  %add14 = add nsw i32 %add5, %cond13
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width15 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 51
  %21 = load i32, i32* %internal_border_width15, align 4
  %mul16 = mul nsw i32 2, %21
  %add17 = add nsw i32 %add14, %mul16
  store i32 %add17, i32* %pixelheight, align 4
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 46
  %23 = load i32, i32* %pixel_width, align 4
  store i32 %23, i32* %old_width, align 4
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 47
  %25 = load i32, i32* %pixel_height, align 4
  store i32 %25, i32* %old_height, align 4
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 472)
  %call18 = call i64 @get_frame_param(%struct.frame* %26, i64 %call)
  store i64 %call18, i64* %fullscreen, align 8
  %27 = load i8, i8* %change_gravity.addr, align 1
  %tobool = trunc i8 %27 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.12
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 48
  store i32 1, i32* %win_gravity, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.12
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_size_hint(%struct.frame* %29, i64 0, i1 zeroext false)
  %30 = load i64, i64* %fullscreen, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 473)
  %cmp20 = icmp eq i64 %30, %call19
  br i1 %cmp20, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %31 = load i32, i32* %width.addr, align 4
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 40
  %33 = load i32, i32* %text_width, align 4
  %cmp21 = icmp eq i32 %31, %33
  br i1 %cmp21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %land.lhs.true
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call23 = call i64 @builtin_lisp_symbol(i32 1059)
  %35 = load i32, i32* %width.addr, align 4
  %36 = load i32, i32* %height.addr, align 4
  %37 = load i32, i32* %old_height, align 4
  %conv = sext i32 %37 to i64
  %shl = shl i64 %conv, 2
  %add24 = add i64 %shl, 2
  %38 = load i32, i32* %pixelheight, align 4
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %40 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 0
  %41 = load i32, i32* %menubar_height, align 4
  %add25 = add nsw i32 %38, %41
  %conv26 = sext i32 %add25 to i64
  %shl27 = shl i64 %conv26, 2
  %add28 = add i64 %shl27, 2
  %call29 = call i64 @list2(i64 %add24, i64 %add28)
  call void @frame_size_history_add(%struct.frame* %34, i64 %call23, i32 %35, i32 %36, i64 %call29)
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data30 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 62
  %x31 = bitcast %union.output_data* %output_data30 to %struct.x_output**
  %43 = load %struct.x_output*, %struct.x_output** %x31, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %43, i32 0, i32 44
  %44 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %44, i32 0, i32 2
  %45 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data32 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 62
  %x33 = bitcast %union.output_data* %output_data32 to %struct.x_output**
  %47 = load %struct.x_output*, %struct.x_output** %x33, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %47, i32 0, i32 12
  %48 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool34 = icmp ne %struct._GtkWidget* %48, null
  br i1 %tobool34, label %cond.true.35, label %cond.false.55

cond.true.35:                                     ; preds = %if.then.22
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data36 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x37 = bitcast %union.output_data* %output_data36 to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x37, align 8
  %widget38 = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 12
  %51 = load %struct._GtkWidget*, %struct._GtkWidget** %widget38, align 8
  %tobool39 = icmp ne %struct._GtkWidget* %51, null
  br i1 %tobool39, label %land.lhs.true.40, label %cond.false.52

land.lhs.true.40:                                 ; preds = %cond.true.35
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data41 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 62
  %x42 = bitcast %union.output_data* %output_data41 to %struct.x_output**
  %53 = load %struct.x_output*, %struct.x_output** %x42, align 8
  %widget43 = getelementptr inbounds %struct.x_output, %struct.x_output* %53, i32 0, i32 12
  %54 = load %struct._GtkWidget*, %struct._GtkWidget** %widget43, align 8
  %call44 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %54)
  %tobool45 = icmp ne %struct._GdkDrawable* %call44, null
  br i1 %tobool45, label %cond.true.46, label %cond.false.52

cond.true.46:                                     ; preds = %land.lhs.true.40
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data47 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 62
  %x48 = bitcast %union.output_data* %output_data47 to %struct.x_output**
  %56 = load %struct.x_output*, %struct.x_output** %x48, align 8
  %widget49 = getelementptr inbounds %struct.x_output, %struct.x_output* %56, i32 0, i32 12
  %57 = load %struct._GtkWidget*, %struct._GtkWidget** %widget49, align 8
  %call50 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %57)
  %call51 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call50)
  br label %cond.end.53

cond.false.52:                                    ; preds = %land.lhs.true.40, %cond.true.35
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.52, %cond.true.46
  %cond54 = phi i64 [ %call51, %cond.true.46 ], [ 0, %cond.false.52 ]
  br label %cond.end.58

cond.false.55:                                    ; preds = %if.then.22
  %58 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data56 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 62
  %x57 = bitcast %union.output_data* %output_data56 to %struct.x_output**
  %59 = load %struct.x_output*, %struct.x_output** %x57, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %59, i32 0, i32 9
  %60 = load i64, i64* %window_desc, align 8
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.55, %cond.end.53
  %cond59 = phi i64 [ %cond54, %cond.end.53 ], [ %60, %cond.false.55 ]
  %61 = load i32, i32* %old_width, align 4
  %62 = load i32, i32* %pixelheight, align 4
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data60 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 62
  %x61 = bitcast %union.output_data* %output_data60 to %struct.x_output**
  %64 = load %struct.x_output*, %struct.x_output** %x61, align 8
  %menubar_height62 = getelementptr inbounds %struct.x_output, %struct.x_output* %64, i32 0, i32 0
  %65 = load i32, i32* %menubar_height62, align 4
  %add63 = add nsw i32 %62, %65
  %call64 = call i32 @XResizeWindow(%struct._XDisplay* %45, i64 %cond59, i32 %61, i32 %add63)
  br label %if.end.187

if.else:                                          ; preds = %land.lhs.true, %if.end
  %66 = load i64, i64* %fullscreen, align 8
  %call65 = call i64 @builtin_lisp_symbol(i32 471)
  %cmp66 = icmp eq i64 %66, %call65
  br i1 %cmp66, label %land.lhs.true.68, label %if.else.115

land.lhs.true.68:                                 ; preds = %if.else
  %67 = load i32, i32* %height.addr, align 4
  %68 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 41
  %69 = load i32, i32* %text_height, align 4
  %cmp69 = icmp eq i32 %67, %69
  br i1 %cmp69, label %if.then.71, label %if.else.115

if.then.71:                                       ; preds = %land.lhs.true.68
  %70 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call72 = call i64 @builtin_lisp_symbol(i32 1060)
  %71 = load i32, i32* %width.addr, align 4
  %72 = load i32, i32* %height.addr, align 4
  %73 = load i32, i32* %old_width, align 4
  %conv73 = sext i32 %73 to i64
  %shl74 = shl i64 %conv73, 2
  %add75 = add i64 %shl74, 2
  %74 = load i32, i32* %pixelwidth, align 4
  %conv76 = sext i32 %74 to i64
  %shl77 = shl i64 %conv76, 2
  %add78 = add i64 %shl77, 2
  %call79 = call i64 @list2(i64 %add75, i64 %add78)
  call void @frame_size_history_add(%struct.frame* %70, i64 %call72, i32 %71, i32 %72, i64 %call79)
  %75 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data80 = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 62
  %x81 = bitcast %union.output_data* %output_data80 to %struct.x_output**
  %76 = load %struct.x_output*, %struct.x_output** %x81, align 8
  %display_info82 = getelementptr inbounds %struct.x_output, %struct.x_output* %76, i32 0, i32 44
  %77 = load %struct.x_display_info*, %struct.x_display_info** %display_info82, align 8
  %display83 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %77, i32 0, i32 2
  %78 = load %struct._XDisplay*, %struct._XDisplay** %display83, align 8
  %79 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data84 = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 62
  %x85 = bitcast %union.output_data* %output_data84 to %struct.x_output**
  %80 = load %struct.x_output*, %struct.x_output** %x85, align 8
  %widget86 = getelementptr inbounds %struct.x_output, %struct.x_output* %80, i32 0, i32 12
  %81 = load %struct._GtkWidget*, %struct._GtkWidget** %widget86, align 8
  %tobool87 = icmp ne %struct._GtkWidget* %81, null
  br i1 %tobool87, label %cond.true.88, label %cond.false.108

cond.true.88:                                     ; preds = %if.then.71
  %82 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data89 = getelementptr inbounds %struct.frame, %struct.frame* %82, i32 0, i32 62
  %x90 = bitcast %union.output_data* %output_data89 to %struct.x_output**
  %83 = load %struct.x_output*, %struct.x_output** %x90, align 8
  %widget91 = getelementptr inbounds %struct.x_output, %struct.x_output* %83, i32 0, i32 12
  %84 = load %struct._GtkWidget*, %struct._GtkWidget** %widget91, align 8
  %tobool92 = icmp ne %struct._GtkWidget* %84, null
  br i1 %tobool92, label %land.lhs.true.93, label %cond.false.105

land.lhs.true.93:                                 ; preds = %cond.true.88
  %85 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data94 = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 62
  %x95 = bitcast %union.output_data* %output_data94 to %struct.x_output**
  %86 = load %struct.x_output*, %struct.x_output** %x95, align 8
  %widget96 = getelementptr inbounds %struct.x_output, %struct.x_output* %86, i32 0, i32 12
  %87 = load %struct._GtkWidget*, %struct._GtkWidget** %widget96, align 8
  %call97 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %87)
  %tobool98 = icmp ne %struct._GdkDrawable* %call97, null
  br i1 %tobool98, label %cond.true.99, label %cond.false.105

cond.true.99:                                     ; preds = %land.lhs.true.93
  %88 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data100 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 62
  %x101 = bitcast %union.output_data* %output_data100 to %struct.x_output**
  %89 = load %struct.x_output*, %struct.x_output** %x101, align 8
  %widget102 = getelementptr inbounds %struct.x_output, %struct.x_output* %89, i32 0, i32 12
  %90 = load %struct._GtkWidget*, %struct._GtkWidget** %widget102, align 8
  %call103 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %90)
  %call104 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call103)
  br label %cond.end.106

cond.false.105:                                   ; preds = %land.lhs.true.93, %cond.true.88
  br label %cond.end.106

cond.end.106:                                     ; preds = %cond.false.105, %cond.true.99
  %cond107 = phi i64 [ %call104, %cond.true.99 ], [ 0, %cond.false.105 ]
  br label %cond.end.112

cond.false.108:                                   ; preds = %if.then.71
  %91 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data109 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 62
  %x110 = bitcast %union.output_data* %output_data109 to %struct.x_output**
  %92 = load %struct.x_output*, %struct.x_output** %x110, align 8
  %window_desc111 = getelementptr inbounds %struct.x_output, %struct.x_output* %92, i32 0, i32 9
  %93 = load i64, i64* %window_desc111, align 8
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.108, %cond.end.106
  %cond113 = phi i64 [ %cond107, %cond.end.106 ], [ %93, %cond.false.108 ]
  %94 = load i32, i32* %pixelwidth, align 4
  %95 = load i32, i32* %old_height, align 4
  %call114 = call i32 @XResizeWindow(%struct._XDisplay* %78, i64 %cond113, i32 %94, i32 %95)
  br label %if.end.186

if.else.115:                                      ; preds = %land.lhs.true.68, %if.else
  %96 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call116 = call i64 @builtin_lisp_symbol(i32 1061)
  %97 = load i32, i32* %width.addr, align 4
  %98 = load i32, i32* %height.addr, align 4
  %99 = load i32, i32* %pixelwidth, align 4
  %100 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data117 = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 62
  %x118 = bitcast %union.output_data* %output_data117 to %struct.x_output**
  %101 = load %struct.x_output*, %struct.x_output** %x118, align 8
  %toolbar_left_width = getelementptr inbounds %struct.x_output, %struct.x_output* %101, i32 0, i32 3
  %102 = load i32, i32* %toolbar_left_width, align 4
  %103 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data119 = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 62
  %x120 = bitcast %union.output_data* %output_data119 to %struct.x_output**
  %104 = load %struct.x_output*, %struct.x_output** %x120, align 8
  %toolbar_right_width = getelementptr inbounds %struct.x_output, %struct.x_output* %104, i32 0, i32 4
  %105 = load i32, i32* %toolbar_right_width, align 4
  %add121 = add nsw i32 %102, %105
  %add122 = add nsw i32 %99, %add121
  %conv123 = sext i32 %add122 to i64
  %shl124 = shl i64 %conv123, 2
  %add125 = add i64 %shl124, 2
  %106 = load i32, i32* %pixelheight, align 4
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data126 = getelementptr inbounds %struct.frame, %struct.frame* %107, i32 0, i32 62
  %x127 = bitcast %union.output_data* %output_data126 to %struct.x_output**
  %108 = load %struct.x_output*, %struct.x_output** %x127, align 8
  %toolbar_top_height = getelementptr inbounds %struct.x_output, %struct.x_output* %108, i32 0, i32 1
  %109 = load i32, i32* %toolbar_top_height, align 4
  %110 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data128 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 62
  %x129 = bitcast %union.output_data* %output_data128 to %struct.x_output**
  %111 = load %struct.x_output*, %struct.x_output** %x129, align 8
  %toolbar_bottom_height = getelementptr inbounds %struct.x_output, %struct.x_output* %111, i32 0, i32 2
  %112 = load i32, i32* %toolbar_bottom_height, align 4
  %add130 = add nsw i32 %109, %112
  %add131 = add nsw i32 %106, %add130
  %113 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data132 = getelementptr inbounds %struct.frame, %struct.frame* %113, i32 0, i32 62
  %x133 = bitcast %union.output_data* %output_data132 to %struct.x_output**
  %114 = load %struct.x_output*, %struct.x_output** %x133, align 8
  %menubar_height134 = getelementptr inbounds %struct.x_output, %struct.x_output* %114, i32 0, i32 0
  %115 = load i32, i32* %menubar_height134, align 4
  %add135 = add nsw i32 %add131, %115
  %conv136 = sext i32 %add135 to i64
  %shl137 = shl i64 %conv136, 2
  %add138 = add i64 %shl137, 2
  %116 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data139 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 62
  %x140 = bitcast %union.output_data* %output_data139 to %struct.x_output**
  %117 = load %struct.x_output*, %struct.x_output** %x140, align 8
  %menubar_height141 = getelementptr inbounds %struct.x_output, %struct.x_output* %117, i32 0, i32 0
  %118 = load i32, i32* %menubar_height141, align 4
  %conv142 = sext i32 %118 to i64
  %shl143 = shl i64 %conv142, 2
  %add144 = add i64 %shl143, 2
  %call145 = call i64 @list3(i64 %add125, i64 %add138, i64 %add144)
  call void @frame_size_history_add(%struct.frame* %96, i64 %call116, i32 %97, i32 %98, i64 %call145)
  %119 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data146 = getelementptr inbounds %struct.frame, %struct.frame* %119, i32 0, i32 62
  %x147 = bitcast %union.output_data* %output_data146 to %struct.x_output**
  %120 = load %struct.x_output*, %struct.x_output** %x147, align 8
  %display_info148 = getelementptr inbounds %struct.x_output, %struct.x_output* %120, i32 0, i32 44
  %121 = load %struct.x_display_info*, %struct.x_display_info** %display_info148, align 8
  %display149 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %121, i32 0, i32 2
  %122 = load %struct._XDisplay*, %struct._XDisplay** %display149, align 8
  %123 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data150 = getelementptr inbounds %struct.frame, %struct.frame* %123, i32 0, i32 62
  %x151 = bitcast %union.output_data* %output_data150 to %struct.x_output**
  %124 = load %struct.x_output*, %struct.x_output** %x151, align 8
  %widget152 = getelementptr inbounds %struct.x_output, %struct.x_output* %124, i32 0, i32 12
  %125 = load %struct._GtkWidget*, %struct._GtkWidget** %widget152, align 8
  %tobool153 = icmp ne %struct._GtkWidget* %125, null
  br i1 %tobool153, label %cond.true.154, label %cond.false.174

cond.true.154:                                    ; preds = %if.else.115
  %126 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data155 = getelementptr inbounds %struct.frame, %struct.frame* %126, i32 0, i32 62
  %x156 = bitcast %union.output_data* %output_data155 to %struct.x_output**
  %127 = load %struct.x_output*, %struct.x_output** %x156, align 8
  %widget157 = getelementptr inbounds %struct.x_output, %struct.x_output* %127, i32 0, i32 12
  %128 = load %struct._GtkWidget*, %struct._GtkWidget** %widget157, align 8
  %tobool158 = icmp ne %struct._GtkWidget* %128, null
  br i1 %tobool158, label %land.lhs.true.159, label %cond.false.171

land.lhs.true.159:                                ; preds = %cond.true.154
  %129 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data160 = getelementptr inbounds %struct.frame, %struct.frame* %129, i32 0, i32 62
  %x161 = bitcast %union.output_data* %output_data160 to %struct.x_output**
  %130 = load %struct.x_output*, %struct.x_output** %x161, align 8
  %widget162 = getelementptr inbounds %struct.x_output, %struct.x_output* %130, i32 0, i32 12
  %131 = load %struct._GtkWidget*, %struct._GtkWidget** %widget162, align 8
  %call163 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %131)
  %tobool164 = icmp ne %struct._GdkDrawable* %call163, null
  br i1 %tobool164, label %cond.true.165, label %cond.false.171

cond.true.165:                                    ; preds = %land.lhs.true.159
  %132 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data166 = getelementptr inbounds %struct.frame, %struct.frame* %132, i32 0, i32 62
  %x167 = bitcast %union.output_data* %output_data166 to %struct.x_output**
  %133 = load %struct.x_output*, %struct.x_output** %x167, align 8
  %widget168 = getelementptr inbounds %struct.x_output, %struct.x_output* %133, i32 0, i32 12
  %134 = load %struct._GtkWidget*, %struct._GtkWidget** %widget168, align 8
  %call169 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %134)
  %call170 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call169)
  br label %cond.end.172

cond.false.171:                                   ; preds = %land.lhs.true.159, %cond.true.154
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.171, %cond.true.165
  %cond173 = phi i64 [ %call170, %cond.true.165 ], [ 0, %cond.false.171 ]
  br label %cond.end.178

cond.false.174:                                   ; preds = %if.else.115
  %135 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data175 = getelementptr inbounds %struct.frame, %struct.frame* %135, i32 0, i32 62
  %x176 = bitcast %union.output_data* %output_data175 to %struct.x_output**
  %136 = load %struct.x_output*, %struct.x_output** %x176, align 8
  %window_desc177 = getelementptr inbounds %struct.x_output, %struct.x_output* %136, i32 0, i32 9
  %137 = load i64, i64* %window_desc177, align 8
  br label %cond.end.178

cond.end.178:                                     ; preds = %cond.false.174, %cond.end.172
  %cond179 = phi i64 [ %cond173, %cond.end.172 ], [ %137, %cond.false.174 ]
  %138 = load i32, i32* %pixelwidth, align 4
  %139 = load i32, i32* %pixelheight, align 4
  %140 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data180 = getelementptr inbounds %struct.frame, %struct.frame* %140, i32 0, i32 62
  %x181 = bitcast %union.output_data* %output_data180 to %struct.x_output**
  %141 = load %struct.x_output*, %struct.x_output** %x181, align 8
  %menubar_height182 = getelementptr inbounds %struct.x_output, %struct.x_output* %141, i32 0, i32 0
  %142 = load i32, i32* %menubar_height182, align 4
  %add183 = add nsw i32 %139, %142
  %call184 = call i32 @XResizeWindow(%struct._XDisplay* %122, i64 %cond179, i32 %138, i32 %add183)
  %call185 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call185, i64* %fullscreen, align 8
  br label %if.end.186

if.end.186:                                       ; preds = %cond.end.178, %cond.end.112
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %cond.end.58
  store i8 1, i8* @frame_garbaged, align 1
  %143 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %143)
  %144 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %144, i32 0, i32 26
  %145 = bitcast i48* %garbaged to i64*
  %bf.load188 = load i64, i64* %145, align 8
  %bf.clear189 = and i64 %bf.load188, -8193
  %bf.set = or i64 %bf.clear189, 8192
  store i64 %bf.set, i64* %145, align 8
  %146 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %146, i32 0, i32 26
  %147 = bitcast i48* %visible to i64*
  %bf.load190 = load i64, i64* %147, align 8
  %bf.lshr191 = lshr i64 %bf.load190, 10
  %bf.clear192 = and i64 %bf.lshr191, 3
  %bf.cast193 = trunc i64 %bf.clear192 to i32
  %tobool194 = icmp ne i32 %bf.cast193, 0
  br i1 %tobool194, label %if.then.195, label %if.else.202

if.then.195:                                      ; preds = %if.end.187
  %148 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wait_for_event(%struct.frame* %148, i32 22)
  %149 = load i64, i64* %fullscreen, align 8
  %call196 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp197 = icmp eq i64 %149, %call196
  br i1 %cmp197, label %if.end.201, label %if.then.199

if.then.199:                                      ; preds = %if.then.195
  %150 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call200 = call i64 @builtin_lisp_symbol(i32 472)
  %151 = load i64, i64* %fullscreen, align 8
  call void @store_frame_param(%struct.frame* %150, i64 %call200, i64 %151)
  %152 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %153 = load i64, i64* %fullscreen, align 8
  %154 = load i64, i64* %fullscreen, align 8
  call void @x_set_fullscreen(%struct.frame* %152, i64 %153, i64 %154)
  br label %if.end.201

if.end.201:                                       ; preds = %if.then.199, %if.then.195
  br label %if.end.203

if.else.202:                                      ; preds = %if.end.187
  %155 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %156 = load i32, i32* %width.addr, align 4
  %157 = load i32, i32* %height.addr, align 4
  call void @change_frame_size(%struct.frame* %155, i32 %156, i32 %157, i1 zeroext false, i1 zeroext true, i1 zeroext false, i1 zeroext true)
  %158 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_sync(%struct.frame* %158)
  br label %if.end.203

if.end.203:                                       ; preds = %if.else.202, %if.end.201
  ret void
}

declare void @mark_window_cursors_off(%struct.window*) #1

declare %struct.window* @XWINDOW(i64) #1

declare void @cancel_mouse_face(%struct.frame*) #1

declare void @do_pending_window_change(i1 zeroext) #1

; Function Attrs: nounwind uwtable
define void @frame_set_mouse_pixel_position(%struct.frame* %f, i32 %pix_x, i32 %pix_y) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %pix_x.addr = alloca i32, align 4
  %pix_y.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %pix_x, i32* %pix_x.addr, align 4
  store i32 %pix_y, i32* %pix_y.addr, align 4
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %7 = load i32, i32* %pix_x.addr, align 4
  %8 = load i32, i32* %pix_y.addr, align 4
  %call = call i32 @XWarpPointer(%struct._XDisplay* %3, i64 0, i64 %6, i32 0, i32 0, i32 0, i32 0, i32 %7, i32 %8)
  call void @unblock_input()
  ret void
}

declare i32 @XWarpPointer(%struct._XDisplay*, i64, i64, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @xembed_request_focus(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xembed_send_message(%struct.frame* %2, i64 0, i32 3, i64 0, i64 0, i64 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xembed_send_message(%struct.frame* %f, i64 %t, i32 %msg, i64 %detail, i64 %data1, i64 %data2) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %t.addr = alloca i64, align 8
  %msg.addr = alloca i32, align 4
  %detail.addr = alloca i64, align 8
  %data1.addr = alloca i64, align 8
  %data2.addr = alloca i64, align 8
  %event = alloca %union._XEvent, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %t, i64* %t.addr, align 8
  store i32 %msg, i32* %msg.addr, align 4
  store i64 %detail, i64* %detail.addr, align 8
  store i64 %data1, i64* %data1.addr, align 8
  store i64 %data2, i64* %data2.addr, align 8
  %xclient = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient, i32 0, i32 0
  store i32 33, i32* %type, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %parent_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 11
  %2 = load i64, i64* %parent_desc, align 8
  %xclient1 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %window = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient1, i32 0, i32 4
  store i64 %2, i64* %window, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 44
  %5 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %Xatom_XEMBED = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 69
  %6 = load i64, i64* %Xatom_XEMBED, align 8
  %xclient4 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %message_type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient4, i32 0, i32 5
  store i64 %6, i64* %message_type, align 8
  %xclient5 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %format = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient5, i32 0, i32 6
  store i32 32, i32* %format, align 4
  %7 = load i64, i64* %t.addr, align 8
  %xclient6 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %data = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient6, i32 0, i32 7
  %l = bitcast %union.anon.5* %data to [5 x i64]*
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %l, i32 0, i64 0
  store i64 %7, i64* %arrayidx, align 8
  %8 = load i32, i32* %msg.addr, align 4
  %conv = zext i32 %8 to i64
  %xclient7 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %data8 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient7, i32 0, i32 7
  %l9 = bitcast %union.anon.5* %data8 to [5 x i64]*
  %arrayidx10 = getelementptr inbounds [5 x i64], [5 x i64]* %l9, i32 0, i64 1
  store i64 %conv, i64* %arrayidx10, align 8
  %9 = load i64, i64* %detail.addr, align 8
  %xclient11 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %data12 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient11, i32 0, i32 7
  %l13 = bitcast %union.anon.5* %data12 to [5 x i64]*
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %l13, i32 0, i64 2
  store i64 %9, i64* %arrayidx14, align 8
  %10 = load i64, i64* %data1.addr, align 8
  %xclient15 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %data16 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient15, i32 0, i32 7
  %l17 = bitcast %union.anon.5* %data16 to [5 x i64]*
  %arrayidx18 = getelementptr inbounds [5 x i64], [5 x i64]* %l17, i32 0, i64 3
  store i64 %10, i64* %arrayidx18, align 8
  %11 = load i64, i64* %data2.addr, align 8
  %xclient19 = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  %data20 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient19, i32 0, i32 7
  %l21 = bitcast %union.anon.5* %data20 to [5 x i64]*
  %arrayidx22 = getelementptr inbounds [5 x i64], [5 x i64]* %l21, i32 0, i64 4
  store i64 %11, i64* %arrayidx22, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %display_info25 = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 44
  %14 = load %struct.x_display_info*, %struct.x_display_info** %display_info25, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 2
  %15 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %parent_desc28 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 11
  %18 = load i64, i64* %parent_desc28, align 8
  %call = call i32 @XSendEvent(%struct._XDisplay* %15, i64 %18, i32 0, i64 0, %union._XEvent* %event)
  br label %do.body

do.body:                                          ; preds = %entry
  call void @gdk_window_process_all_updates()
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data29 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x30 = bitcast %union.output_data* %output_data29 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x30, align 8
  %display_info31 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 44
  %21 = load %struct.x_display_info*, %struct.x_display_info** %display_info31, align 8
  %display32 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 2
  %22 = load %struct._XDisplay*, %struct._XDisplay** %display32, align 8
  %call33 = call i32 @XSync(%struct._XDisplay* %22, i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  ret void
}

; Function Attrs: nounwind uwtable
define void @x_ewmh_activate_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %frame = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_active_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 108
  %7 = load i64, i64* %Xatom_net_active_window, align 8
  %call = call zeroext i1 @x_wm_supports(%struct.frame* %5, i64 %7)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %9 = bitcast %struct.frame* %8 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %9, i32 5)
  store i64 %call1, i64* %frame, align 8
  %10 = load i64, i64* %frame, align 8
  %11 = load i64, i64* %frame, align 8
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_active_window2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 108
  %13 = load i64, i64* %Xatom_net_active_window2, align 8
  %14 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_user_time = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 79
  %15 = load i64, i64* %last_user_time, align 8
  %call3 = call i64 @list2i(i64 1, i64 %15)
  call void @x_send_client_event(i64 %10, i64 2, i64 %11, i64 %13, i64 130, i64 %call3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

declare void @x_send_client_event(i64, i64, i64, i64, i64, i64) #1

declare i64 @list2i(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @x_make_frame_visible(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %original_top = alloca i32, align 4
  %original_left = alloca i32, align 4
  %tries = alloca i32, align 4
  %frame = alloca i64, align 8
  %previously_visible = alloca i8, align 1
  %rootw = alloca i64, align 8
  %x73 = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %border = alloca i32, align 4
  %depth = alloca i32, align 4
  %old_poll_suppress_count = alloca i32, align 4
  %xev = alloca %union._XEvent, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 0, i32* %tries, align 4
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_set_bitmap_icon(%struct.frame* %0)
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end.34, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %iconified to i64*
  %bf.load1 = load i64, i64* %4, align 8
  %bf.lshr2 = lshr i64 %bf.load1, 12
  %bf.clear3 = and i64 %bf.lshr2, 1
  %bf.cast4 = trunc i64 %bf.clear3 to i1
  br i1 %bf.cast4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %explicit_parent = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 46
  %bf.load5 = load i8, i8* %explicit_parent, align 8
  %bf.lshr6 = lshr i8 %bf.load5, 1
  %bf.clear7 = and i8 %bf.lshr6, 1
  %bf.cast8 = trunc i8 %bf.clear7 to i1
  %conv = zext i1 %bf.cast8 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.end, label %land.lhs.true.10

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x12, align 8
  %asked_for_visible = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 46
  %bf.load13 = load i8, i8* %asked_for_visible, align 8
  %bf.lshr14 = lshr i8 %bf.load13, 2
  %bf.clear15 = and i8 %bf.lshr14, 1
  %bf.cast16 = trunc i8 %bf.clear15 to i1
  br i1 %bf.cast16, label %if.end, label %if.then.17

if.then.17:                                       ; preds = %land.lhs.true.10
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 44
  %11 = load i32, i32* %left_pos, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 45
  %13 = load i32, i32* %top_pos, align 4
  call void @x_set_offset(%struct.frame* %9, i32 %11, i32 %13, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then.17, %land.lhs.true.10, %land.lhs.true, %if.then
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data18 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x19 = bitcast %union.output_data* %output_data18 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x19, align 8
  %asked_for_visible20 = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 46
  %bf.load21 = load i8, i8* %asked_for_visible20, align 8
  %bf.clear22 = and i8 %bf.load21, -5
  %bf.set = or i8 %bf.clear22, 4
  store i8 %bf.set, i8* %asked_for_visible20, align 8
  %16 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 352), align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp23 = icmp eq i64 %16, %call
  br i1 %cmp23, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.end
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_window_state(%struct.frame* %17, i32 1)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.end
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data27 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x28 = bitcast %union.output_data* %output_data27 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x28, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 12
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  call void @gtk_widget_show_all(%struct._GtkWidget* %20)
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data29 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x30 = bitcast %union.output_data* %output_data29 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x30, align 8
  %widget31 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 12
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %widget31, align 8
  %24 = bitcast %struct._GtkWidget* %23 to %struct._GTypeInstance*
  %call32 = call i64 @gtk_window_get_type() #11
  %call33 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %24, i64 %call32)
  %25 = bitcast %struct._GTypeInstance* %call33 to %struct._GtkWindow*
  call void @gtk_window_deiconify(%struct._GtkWindow* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.26, %entry
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data35 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 62
  %x36 = bitcast %union.output_data* %output_data35 to %struct.x_output**
  %27 = load %struct.x_output*, %struct.x_output** %x36, align 8
  %has_been_visible = getelementptr inbounds %struct.x_output, %struct.x_output* %27, i32 0, i32 46
  %bf.load37 = load i8, i8* %has_been_visible, align 8
  %bf.lshr38 = lshr i8 %bf.load37, 3
  %bf.clear39 = and i8 %bf.lshr38, 1
  %bf.cast40 = trunc i8 %bf.clear39 to i1
  %frombool = zext i1 %bf.cast40 to i8
  store i8 %frombool, i8* %previously_visible, align 1
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos41 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 44
  %29 = load i32, i32* %left_pos41, align 4
  store i32 %29, i32* %original_left, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos42 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 45
  %31 = load i32, i32* %top_pos42, align 4
  store i32 %31, i32* %original_top, align 4
  call void @unblock_input()
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible43 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 26
  %33 = bitcast i48* %visible43 to i64*
  %bf.load44 = load i64, i64* %33, align 8
  %bf.lshr45 = lshr i64 %bf.load44, 10
  %bf.clear46 = and i64 %bf.lshr45, 3
  %bf.cast47 = trunc i64 %bf.clear46 to i32
  %tobool48 = icmp ne i32 %bf.cast47, 0
  br i1 %tobool48, label %if.end.143, label %land.lhs.true.49

land.lhs.true.49:                                 ; preds = %if.end.34
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified50 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 26
  %35 = bitcast i48* %iconified50 to i64*
  %bf.load51 = load i64, i64* %35, align 8
  %bf.lshr52 = lshr i64 %bf.load51, 12
  %bf.clear53 = and i64 %bf.lshr52, 1
  %bf.cast54 = trunc i64 %bf.clear53 to i1
  br i1 %bf.cast54, label %if.end.143, label %land.lhs.true.55

land.lhs.true.55:                                 ; preds = %land.lhs.true.49
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data56 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 62
  %x57 = bitcast %union.output_data* %output_data56 to %struct.x_output**
  %37 = load %struct.x_output*, %struct.x_output** %x57, align 8
  %explicit_parent58 = getelementptr inbounds %struct.x_output, %struct.x_output* %37, i32 0, i32 46
  %bf.load59 = load i8, i8* %explicit_parent58, align 8
  %bf.lshr60 = lshr i8 %bf.load59, 1
  %bf.clear61 = and i8 %bf.lshr60, 1
  %bf.cast62 = trunc i8 %bf.clear61 to i1
  %conv63 = zext i1 %bf.cast62 to i32
  %cmp64 = icmp ne i32 %conv63, 0
  br i1 %cmp64, label %if.end.143, label %land.lhs.true.66

land.lhs.true.66:                                 ; preds = %land.lhs.true.55
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 48
  %39 = load i32, i32* %win_gravity, align 4
  %cmp67 = icmp eq i32 %39, 1
  br i1 %cmp67, label %land.lhs.true.69, label %if.end.143

land.lhs.true.69:                                 ; preds = %land.lhs.true.66
  %40 = load i8, i8* %previously_visible, align 1
  %tobool70 = trunc i8 %40 to i1
  br i1 %tobool70, label %if.then.72, label %if.end.143

if.then.72:                                       ; preds = %land.lhs.true.69
  call void @block_input()
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data74 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 62
  %x75 = bitcast %union.output_data* %output_data74 to %struct.x_output**
  %42 = load %struct.x_output*, %struct.x_output** %x75, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %42, i32 0, i32 44
  %43 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 2
  %44 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data76 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x77 = bitcast %union.output_data* %output_data76 to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x77, align 8
  %widget78 = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 12
  %47 = load %struct._GtkWidget*, %struct._GtkWidget** %widget78, align 8
  %tobool79 = icmp ne %struct._GtkWidget* %47, null
  br i1 %tobool79, label %cond.true, label %cond.false.96

cond.true:                                        ; preds = %if.then.72
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data80 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 62
  %x81 = bitcast %union.output_data* %output_data80 to %struct.x_output**
  %49 = load %struct.x_output*, %struct.x_output** %x81, align 8
  %widget82 = getelementptr inbounds %struct.x_output, %struct.x_output* %49, i32 0, i32 12
  %50 = load %struct._GtkWidget*, %struct._GtkWidget** %widget82, align 8
  %tobool83 = icmp ne %struct._GtkWidget* %50, null
  br i1 %tobool83, label %land.lhs.true.84, label %cond.false

land.lhs.true.84:                                 ; preds = %cond.true
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data85 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 62
  %x86 = bitcast %union.output_data* %output_data85 to %struct.x_output**
  %52 = load %struct.x_output*, %struct.x_output** %x86, align 8
  %widget87 = getelementptr inbounds %struct.x_output, %struct.x_output* %52, i32 0, i32 12
  %53 = load %struct._GtkWidget*, %struct._GtkWidget** %widget87, align 8
  %call88 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %53)
  %tobool89 = icmp ne %struct._GdkDrawable* %call88, null
  br i1 %tobool89, label %cond.true.90, label %cond.false

cond.true.90:                                     ; preds = %land.lhs.true.84
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data91 = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 62
  %x92 = bitcast %union.output_data* %output_data91 to %struct.x_output**
  %55 = load %struct.x_output*, %struct.x_output** %x92, align 8
  %widget93 = getelementptr inbounds %struct.x_output, %struct.x_output* %55, i32 0, i32 12
  %56 = load %struct._GtkWidget*, %struct._GtkWidget** %widget93, align 8
  %call94 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %56)
  %call95 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call94)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.84, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.90
  %cond = phi i64 [ %call95, %cond.true.90 ], [ 0, %cond.false ]
  br label %cond.end.99

cond.false.96:                                    ; preds = %if.then.72
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data97 = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 62
  %x98 = bitcast %union.output_data* %output_data97 to %struct.x_output**
  %58 = load %struct.x_output*, %struct.x_output** %x98, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %58, i32 0, i32 9
  %59 = load i64, i64* %window_desc, align 8
  br label %cond.end.99

cond.end.99:                                      ; preds = %cond.false.96, %cond.end
  %cond100 = phi i64 [ %cond, %cond.end ], [ %59, %cond.false.96 ]
  %call101 = call i32 @XGetGeometry(%struct._XDisplay* %44, i64 %cond100, i64* %rootw, i32* %x73, i32* %y, i32* %width, i32* %height, i32* %border, i32* %depth)
  %60 = load i32, i32* %original_left, align 4
  %61 = load i32, i32* %x73, align 4
  %cmp102 = icmp ne i32 %60, %61
  br i1 %cmp102, label %if.then.106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.99
  %62 = load i32, i32* %original_top, align 4
  %63 = load i32, i32* %y, align 4
  %cmp104 = icmp ne i32 %62, %63
  br i1 %cmp104, label %if.then.106, label %if.end.142

if.then.106:                                      ; preds = %lor.lhs.false, %cond.end.99
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data107 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 62
  %x108 = bitcast %union.output_data* %output_data107 to %struct.x_output**
  %65 = load %struct.x_output*, %struct.x_output** %x108, align 8
  %display_info109 = getelementptr inbounds %struct.x_output, %struct.x_output* %65, i32 0, i32 44
  %66 = load %struct.x_display_info*, %struct.x_display_info** %display_info109, align 8
  %display110 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %66, i32 0, i32 2
  %67 = load %struct._XDisplay*, %struct._XDisplay** %display110, align 8
  %68 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data111 = getelementptr inbounds %struct.frame, %struct.frame* %68, i32 0, i32 62
  %x112 = bitcast %union.output_data* %output_data111 to %struct.x_output**
  %69 = load %struct.x_output*, %struct.x_output** %x112, align 8
  %widget113 = getelementptr inbounds %struct.x_output, %struct.x_output* %69, i32 0, i32 12
  %70 = load %struct._GtkWidget*, %struct._GtkWidget** %widget113, align 8
  %tobool114 = icmp ne %struct._GtkWidget* %70, null
  br i1 %tobool114, label %cond.true.115, label %cond.false.135

cond.true.115:                                    ; preds = %if.then.106
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data116 = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 62
  %x117 = bitcast %union.output_data* %output_data116 to %struct.x_output**
  %72 = load %struct.x_output*, %struct.x_output** %x117, align 8
  %widget118 = getelementptr inbounds %struct.x_output, %struct.x_output* %72, i32 0, i32 12
  %73 = load %struct._GtkWidget*, %struct._GtkWidget** %widget118, align 8
  %tobool119 = icmp ne %struct._GtkWidget* %73, null
  br i1 %tobool119, label %land.lhs.true.120, label %cond.false.132

land.lhs.true.120:                                ; preds = %cond.true.115
  %74 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data121 = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 62
  %x122 = bitcast %union.output_data* %output_data121 to %struct.x_output**
  %75 = load %struct.x_output*, %struct.x_output** %x122, align 8
  %widget123 = getelementptr inbounds %struct.x_output, %struct.x_output* %75, i32 0, i32 12
  %76 = load %struct._GtkWidget*, %struct._GtkWidget** %widget123, align 8
  %call124 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %76)
  %tobool125 = icmp ne %struct._GdkDrawable* %call124, null
  br i1 %tobool125, label %cond.true.126, label %cond.false.132

cond.true.126:                                    ; preds = %land.lhs.true.120
  %77 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data127 = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 62
  %x128 = bitcast %union.output_data* %output_data127 to %struct.x_output**
  %78 = load %struct.x_output*, %struct.x_output** %x128, align 8
  %widget129 = getelementptr inbounds %struct.x_output, %struct.x_output* %78, i32 0, i32 12
  %79 = load %struct._GtkWidget*, %struct._GtkWidget** %widget129, align 8
  %call130 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %79)
  %call131 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call130)
  br label %cond.end.133

cond.false.132:                                   ; preds = %land.lhs.true.120, %cond.true.115
  br label %cond.end.133

cond.end.133:                                     ; preds = %cond.false.132, %cond.true.126
  %cond134 = phi i64 [ %call131, %cond.true.126 ], [ 0, %cond.false.132 ]
  br label %cond.end.139

cond.false.135:                                   ; preds = %if.then.106
  %80 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data136 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 62
  %x137 = bitcast %union.output_data* %output_data136 to %struct.x_output**
  %81 = load %struct.x_output*, %struct.x_output** %x137, align 8
  %window_desc138 = getelementptr inbounds %struct.x_output, %struct.x_output* %81, i32 0, i32 9
  %82 = load i64, i64* %window_desc138, align 8
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.135, %cond.end.133
  %cond140 = phi i64 [ %cond134, %cond.end.133 ], [ %82, %cond.false.135 ]
  %83 = load i32, i32* %original_left, align 4
  %84 = load i32, i32* %original_top, align 4
  %call141 = call i32 @XMoveWindow(%struct._XDisplay* %67, i64 %cond140, i32 %83, i32 %84)
  br label %if.end.142

if.end.142:                                       ; preds = %cond.end.139, %lor.lhs.false
  call void @unblock_input()
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %land.lhs.true.69, %land.lhs.true.66, %land.lhs.true.55, %land.lhs.true.49, %if.end.34
  %85 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %86 = bitcast %struct.frame* %85 to i8*
  %call144 = call i64 @make_lisp_ptr(i8* %86, i32 5)
  store i64 %call144, i64* %frame, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.182, %if.end.143
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible145 = getelementptr inbounds %struct.frame, %struct.frame* %87, i32 0, i32 26
  %88 = bitcast i48* %visible145 to i64*
  %bf.load146 = load i64, i64* %88, align 8
  %bf.lshr147 = lshr i64 %bf.load146, 10
  %bf.clear148 = and i64 %bf.lshr147, 3
  %bf.cast149 = trunc i64 %bf.clear148 to i32
  %tobool150 = icmp ne i32 %bf.cast149, 0
  %lnot = xor i1 %tobool150, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %89 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_sync(%struct.frame* %89)
  %90 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified151 = getelementptr inbounds %struct.frame, %struct.frame* %90, i32 0, i32 26
  %91 = bitcast i48* %iconified151 to i64*
  %bf.load152 = load i64, i64* %91, align 8
  %bf.lshr153 = lshr i64 %bf.load152, 12
  %bf.clear154 = and i64 %bf.lshr153, 1
  %bf.cast155 = trunc i64 %bf.clear154 to i1
  br i1 %bf.cast155, label %land.lhs.true.157, label %if.end.161

land.lhs.true.157:                                ; preds = %while.body
  %92 = load i32, i32* %tries, align 4
  %inc = add nsw i32 %92, 1
  store i32 %inc, i32* %tries, align 4
  %cmp158 = icmp sgt i32 %inc, 100
  br i1 %cmp158, label %if.then.160, label %if.end.161

if.then.160:                                      ; preds = %land.lhs.true.157
  br label %while.end

if.end.161:                                       ; preds = %land.lhs.true.157, %while.body
  %call162 = call zeroext i1 @input_polling_used()
  br i1 %call162, label %if.then.163, label %if.end.164

if.then.163:                                      ; preds = %if.end.161
  %93 = load i32, i32* @poll_suppress_count, align 4
  store i32 %93, i32* %old_poll_suppress_count, align 4
  store i32 1, i32* @poll_suppress_count, align 4
  call void @poll_for_input_1()
  %94 = load i32, i32* %old_poll_suppress_count, align 4
  store i32 %94, i32* @poll_suppress_count, align 4
  br label %if.end.164

if.end.164:                                       ; preds = %if.then.163, %if.end.161
  %95 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data165 = getelementptr inbounds %struct.frame, %struct.frame* %95, i32 0, i32 62
  %x166 = bitcast %union.output_data* %output_data165 to %struct.x_output**
  %96 = load %struct.x_output*, %struct.x_output** %x166, align 8
  %display_info167 = getelementptr inbounds %struct.x_output, %struct.x_output* %96, i32 0, i32 44
  %97 = load %struct.x_display_info*, %struct.x_display_info** %display_info167, align 8
  %display168 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %97, i32 0, i32 2
  %98 = load %struct._XDisplay*, %struct._XDisplay** %display168, align 8
  %call169 = call i32 @XPending(%struct._XDisplay* %98)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.then.171, label %if.end.182

if.then.171:                                      ; preds = %if.end.164
  %99 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data172 = getelementptr inbounds %struct.frame, %struct.frame* %99, i32 0, i32 62
  %x173 = bitcast %union.output_data* %output_data172 to %struct.x_output**
  %100 = load %struct.x_output*, %struct.x_output** %x173, align 8
  %display_info174 = getelementptr inbounds %struct.x_output, %struct.x_output* %100, i32 0, i32 44
  %101 = load %struct.x_display_info*, %struct.x_display_info** %display_info174, align 8
  %display175 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %101, i32 0, i32 2
  %102 = load %struct._XDisplay*, %struct._XDisplay** %display175, align 8
  %call176 = call i32 @XNextEvent(%struct._XDisplay* %102, %union._XEvent* %xev)
  %103 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data177 = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 62
  %x178 = bitcast %union.output_data* %output_data177 to %struct.x_output**
  %104 = load %struct.x_output*, %struct.x_output** %x178, align 8
  %display_info179 = getelementptr inbounds %struct.x_output, %struct.x_output* %104, i32 0, i32 44
  %105 = load %struct.x_display_info*, %struct.x_display_info** %display_info179, align 8
  %display180 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %105, i32 0, i32 2
  %106 = load %struct._XDisplay*, %struct._XDisplay** %display180, align 8
  %call181 = call i32 @x_dispatch_event(%union._XEvent* %xev, %struct._XDisplay* %106)
  br label %if.end.182

if.end.182:                                       ; preds = %if.then.171, %if.end.164
  br label %while.cond

while.end:                                        ; preds = %if.then.160, %while.cond
  ret void
}

declare void @x_set_bitmap_icon(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define internal void @x_wm_set_window_state(%struct.frame* %f, i32 %state) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %state.addr = alloca i32, align 4
  %window = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %state, i32* %state.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 9
  %2 = load i64, i64* %window_desc, align 8
  store i64 %2, i64* %window, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %wm_hints = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 43
  %flags = getelementptr inbounds %struct.XWMHints, %struct.XWMHints* %wm_hints, i32 0, i32 0
  %5 = load i64, i64* %flags, align 8
  %or = or i64 %5, 2
  store i64 %or, i64* %flags, align 8
  %6 = load i32, i32* %state.addr, align 4
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %wm_hints5 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 43
  %initial_state = getelementptr inbounds %struct.XWMHints, %struct.XWMHints* %wm_hints5, i32 0, i32 2
  store i32 %6, i32* %initial_state, align 4
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data6 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x7 = bitcast %union.output_data* %output_data6 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x7, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 44
  %11 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 2
  %12 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %13 = load i64, i64* %window, align 8
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data8 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data8 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %wm_hints10 = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 43
  %call = call i32 @XSetWMHints(%struct._XDisplay* %12, i64 %13, %struct.XWMHints* %wm_hints10)
  ret void
}

declare void @gtk_widget_show_all(%struct._GtkWidget*) #1

declare void @gtk_window_deiconify(%struct._GtkWindow*) #1

declare %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_window_get_type() #5

declare i32 @XGetGeometry(%struct._XDisplay*, i64, i64*, i32*, i32*, i32*, i32*, i32*, i32*) #1

declare void @x_sync(%struct.frame*) #1

declare zeroext i1 @input_polling_used() #1

declare void @poll_for_input_1() #1

declare i32 @XPending(%struct._XDisplay*) #1

declare i32 @XNextEvent(%struct._XDisplay*, %union._XEvent*) #1

; Function Attrs: nounwind uwtable
define internal i32 @x_dispatch_event(%union._XEvent* %event, %struct._XDisplay* %display) #0 {
entry:
  %event.addr = alloca %union._XEvent*, align 8
  %display.addr = alloca %struct._XDisplay*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %finish = alloca i32, align 4
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  store i32 0, i32* %finish, align 4
  %0 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %call = call %struct.x_display_info* @x_display_info_for_display(%struct._XDisplay* %0)
  store %struct.x_display_info* %call, %struct.x_display_info** %dpyinfo, align 8
  %1 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %tobool = icmp ne %struct.x_display_info* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %call1 = call i32 @handle_one_xevent(%struct.x_display_info* %2, %union._XEvent* %3, i32* %finish, %struct.input_event* null)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %finish, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define void @x_make_frame_invisible(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %window = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 12
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %2, null
  br i1 %tobool, label %cond.true, label %cond.false.15

cond.true:                                        ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %widget3 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 12
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %widget3, align 8
  %tobool4 = icmp ne %struct._GtkWidget* %5, null
  br i1 %tobool4, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %widget7 = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 12
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %widget7, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %8)
  %tobool8 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool8, label %cond.true.9, label %cond.false

cond.true.9:                                      ; preds = %land.lhs.true
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %widget12 = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 12
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %widget12, align 8
  %call13 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %11)
  %call14 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call13)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.9
  %cond = phi i64 [ %call14, %cond.true.9 ], [ 0, %cond.false ]
  br label %cond.end.18

cond.false.15:                                    ; preds = %entry
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data16 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x17 = bitcast %union.output_data* %output_data16 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x17, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 9
  %14 = load i64, i64* %window_desc, align 8
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.false.15, %cond.end
  %cond19 = phi i64 [ %cond, %cond.end ], [ %14, %cond.false.15 ]
  store i64 %cond19, i64* %window, align 8
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data20 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x21 = bitcast %union.output_data* %output_data20 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x21, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 44
  %17 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %x_highlight_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 73
  %18 = load %struct.frame*, %struct.frame** %x_highlight_frame, align 8
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp = icmp eq %struct.frame* %18, %19
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.18
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %21 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %display_info24 = getelementptr inbounds %struct.x_output, %struct.x_output* %21, i32 0, i32 44
  %22 = load %struct.x_display_info*, %struct.x_display_info** %display_info24, align 8
  %x_highlight_frame25 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 73
  store %struct.frame* null, %struct.frame** %x_highlight_frame25, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.18
  call void @block_input()
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_size_hint(%struct.frame* %23, i64 0, i1 zeroext true)
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %widget28 = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 12
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %widget28, align 8
  %tobool29 = icmp ne %struct._GtkWidget* %26, null
  br i1 %tobool29, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %if.end
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data31 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 62
  %x32 = bitcast %union.output_data* %output_data31 to %struct.x_output**
  %28 = load %struct.x_output*, %struct.x_output** %x32, align 8
  %widget33 = getelementptr inbounds %struct.x_output, %struct.x_output* %28, i32 0, i32 12
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %widget33, align 8
  call void @gtk_widget_hide(%struct._GtkWidget* %29)
  br label %if.end.45

if.else:                                          ; preds = %if.end
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data34 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 62
  %x35 = bitcast %union.output_data* %output_data34 to %struct.x_output**
  %31 = load %struct.x_output*, %struct.x_output** %x35, align 8
  %display_info36 = getelementptr inbounds %struct.x_output, %struct.x_output* %31, i32 0, i32 44
  %32 = load %struct.x_display_info*, %struct.x_display_info** %display_info36, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %32, i32 0, i32 2
  %33 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %34 = load i64, i64* %window, align 8
  %35 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data37 = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 62
  %x38 = bitcast %union.output_data* %output_data37 to %struct.x_output**
  %36 = load %struct.x_output*, %struct.x_output** %x38, align 8
  %display_info39 = getelementptr inbounds %struct.x_output, %struct.x_output* %36, i32 0, i32 44
  %37 = load %struct.x_display_info*, %struct.x_display_info** %display_info39, align 8
  %display40 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %37, i32 0, i32 2
  %38 = load %struct._XDisplay*, %struct._XDisplay** %display40, align 8
  %39 = bitcast %struct._XDisplay* %38 to %struct.anon.12*
  %default_screen = getelementptr inbounds %struct.anon.12, %struct.anon.12* %39, i32 0, i32 33
  %40 = load i32, i32* %default_screen, align 4
  %call41 = call i32 @XWithdrawWindow(%struct._XDisplay* %33, i64 %34, i32 %40)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end.44, label %if.then.43

if.then.43:                                       ; preds = %if.else
  call void @unblock_input()
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i32 0, i32 0)) #10
  unreachable

if.end.44:                                        ; preds = %if.else
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.then.30
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %41, i32 0)
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 26
  %43 = bitcast i48* %iconified to i64*
  %bf.load = load i64, i64* %43, align 8
  %bf.clear = and i64 %bf.load, -4097
  store i64 %bf.clear, i64* %43, align 8
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_sync(%struct.frame* %44)
  call void @unblock_input()
  ret void
}

declare void @gtk_widget_hide(%struct._GtkWidget*) #1

declare i32 @XWithdrawWindow(%struct._XDisplay*, i64, i32) #1

declare void @SET_FRAME_VISIBLE(%struct.frame*, i32) #1

; Function Attrs: nounwind uwtable
define void @x_iconify_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %msg = alloca %union._XEvent, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %x_highlight_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 73
  %3 = load %struct.frame*, %struct.frame** %x_highlight_frame, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp = icmp eq %struct.frame* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %x_highlight_frame4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 73
  store %struct.frame* null, %struct.frame** %x_highlight_frame4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %iconified to i64*
  %bf.load = load i64, i64* %9, align 8
  %bf.lshr = lshr i64 %bf.load, 12
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  br label %return

if.end.6:                                         ; preds = %if.end
  call void @block_input()
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_set_bitmap_icon(%struct.frame* %10)
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 12
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %13, null
  br i1 %tobool, label %if.then.9, label %if.end.27

if.then.9:                                        ; preds = %if.end.6
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %visible to i64*
  %bf.load10 = load i64, i64* %15, align 8
  %bf.lshr11 = lshr i64 %bf.load10, 10
  %bf.clear12 = and i64 %bf.lshr11, 3
  %bf.cast13 = trunc i64 %bf.clear12 to i32
  %tobool14 = icmp ne i32 %bf.cast13, 0
  br i1 %tobool14, label %if.end.19, label %if.then.15

if.then.15:                                       ; preds = %if.then.9
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data16 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x17 = bitcast %union.output_data* %output_data16 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x17, align 8
  %widget18 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 12
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %widget18, align 8
  call void @gtk_widget_show_all(%struct._GtkWidget* %18)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.15, %if.then.9
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data20 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x21 = bitcast %union.output_data* %output_data20 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x21, align 8
  %widget22 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 12
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %widget22, align 8
  %22 = bitcast %struct._GtkWidget* %21 to %struct._GTypeInstance*
  %call = call i64 @gtk_window_get_type() #11
  %call23 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 %call)
  %23 = bitcast %struct._GTypeInstance* %call23 to %struct._GtkWindow*
  call void @gtk_window_iconify(%struct._GtkWindow* %23)
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %24, i32 0)
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified24 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 26
  %26 = bitcast i48* %iconified24 to i64*
  %bf.load25 = load i64, i64* %26, align 8
  %bf.clear26 = and i64 %bf.load25, -4097
  %bf.set = or i64 %bf.clear26, 4096
  store i64 %bf.set, i64* %26, align 8
  call void @unblock_input()
  br label %return

if.end.27:                                        ; preds = %if.end.6
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible28 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 26
  %28 = bitcast i48* %visible28 to i64*
  %bf.load29 = load i64, i64* %28, align 8
  %bf.lshr30 = lshr i64 %bf.load29, 10
  %bf.clear31 = and i64 %bf.lshr30, 3
  %bf.cast32 = trunc i64 %bf.clear31 to i32
  %tobool33 = icmp ne i32 %bf.cast32, 0
  br i1 %tobool33, label %if.end.49, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.27
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified34 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 26
  %30 = bitcast i48* %iconified34 to i64*
  %bf.load35 = load i64, i64* %30, align 8
  %bf.lshr36 = lshr i64 %bf.load35, 12
  %bf.clear37 = and i64 %bf.lshr36, 1
  %bf.cast38 = trunc i64 %bf.clear37 to i1
  br i1 %bf.cast38, label %if.end.49, label %land.lhs.true.39

land.lhs.true.39:                                 ; preds = %land.lhs.true
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data40 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x41 = bitcast %union.output_data* %output_data40 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x41, align 8
  %explicit_parent = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 46
  %bf.load42 = load i8, i8* %explicit_parent, align 8
  %bf.lshr43 = lshr i8 %bf.load42, 1
  %bf.clear44 = and i8 %bf.lshr43, 1
  %bf.cast45 = trunc i8 %bf.clear44 to i1
  %conv = zext i1 %bf.cast45 to i32
  %cmp46 = icmp ne i32 %conv, 0
  br i1 %cmp46, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %land.lhs.true.39
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 44
  %35 = load i32, i32* %left_pos, align 4
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 45
  %37 = load i32, i32* %top_pos, align 4
  call void @x_set_offset(%struct.frame* %33, i32 %35, i32 %37, i32 0)
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.48, %land.lhs.true.39, %land.lhs.true, %if.end.27
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data50 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 62
  %x51 = bitcast %union.output_data* %output_data50 to %struct.x_output**
  %39 = load %struct.x_output*, %struct.x_output** %x51, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %39, i32 0, i32 9
  %40 = load i64, i64* %window_desc, align 8
  %xclient = bitcast %union._XEvent* %msg to %struct.XClientMessageEvent*
  %window = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient, i32 0, i32 4
  store i64 %40, i64* %window, align 8
  %xclient52 = bitcast %union._XEvent* %msg to %struct.XClientMessageEvent*
  %type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient52, i32 0, i32 0
  store i32 33, i32* %type, align 4
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data53 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 62
  %x54 = bitcast %union.output_data* %output_data53 to %struct.x_output**
  %42 = load %struct.x_output*, %struct.x_output** %x54, align 8
  %display_info55 = getelementptr inbounds %struct.x_output, %struct.x_output* %42, i32 0, i32 44
  %43 = load %struct.x_display_info*, %struct.x_display_info** %display_info55, align 8
  %Xatom_wm_change_state = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 41
  %44 = load i64, i64* %Xatom_wm_change_state, align 8
  %xclient56 = bitcast %union._XEvent* %msg to %struct.XClientMessageEvent*
  %message_type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient56, i32 0, i32 5
  store i64 %44, i64* %message_type, align 8
  %xclient57 = bitcast %union._XEvent* %msg to %struct.XClientMessageEvent*
  %format = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient57, i32 0, i32 6
  store i32 32, i32* %format, align 4
  %xclient58 = bitcast %union._XEvent* %msg to %struct.XClientMessageEvent*
  %data = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient58, i32 0, i32 7
  %l = bitcast %union.anon.5* %data to [5 x i64]*
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %l, i32 0, i64 0
  store i64 3, i64* %arrayidx, align 8
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data59 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x60 = bitcast %union.output_data* %output_data59 to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x60, align 8
  %display_info61 = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 44
  %47 = load %struct.x_display_info*, %struct.x_display_info** %display_info61, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %47, i32 0, i32 2
  %48 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data62 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x63 = bitcast %union.output_data* %output_data62 to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x63, align 8
  %display_info64 = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 44
  %51 = load %struct.x_display_info*, %struct.x_display_info** %display_info64, align 8
  %display65 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %51, i32 0, i32 2
  %52 = load %struct._XDisplay*, %struct._XDisplay** %display65, align 8
  %53 = bitcast %struct._XDisplay* %52 to %struct.anon.12*
  %default_screen = getelementptr inbounds %struct.anon.12, %struct.anon.12* %53, i32 0, i32 33
  %54 = load i32, i32* %default_screen, align 4
  %idxprom = sext i32 %54 to i64
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data66 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 62
  %x67 = bitcast %union.output_data* %output_data66 to %struct.x_output**
  %56 = load %struct.x_output*, %struct.x_output** %x67, align 8
  %display_info68 = getelementptr inbounds %struct.x_output, %struct.x_output* %56, i32 0, i32 44
  %57 = load %struct.x_display_info*, %struct.x_display_info** %display_info68, align 8
  %display69 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %57, i32 0, i32 2
  %58 = load %struct._XDisplay*, %struct._XDisplay** %display69, align 8
  %59 = bitcast %struct._XDisplay* %58 to %struct.anon.12*
  %screens = getelementptr inbounds %struct.anon.12, %struct.anon.12* %59, i32 0, i32 35
  %60 = load %struct.Screen*, %struct.Screen** %screens, align 8
  %arrayidx70 = getelementptr inbounds %struct.Screen, %struct.Screen* %60, i64 %idxprom
  %root = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx70, i32 0, i32 2
  %61 = load i64, i64* %root, align 8
  %call71 = call i32 @XSendEvent(%struct._XDisplay* %48, i64 %61, i32 0, i64 1572864, %union._XEvent* %msg)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %if.end.49
  call void @unblock_input()
  call void (i8*, ...) @error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i32 0, i32 0)) #10
  unreachable

if.end.74:                                        ; preds = %if.end.49
  %62 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_window_state(%struct.frame* %62, i32 3)
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible75 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 26
  %64 = bitcast i48* %visible75 to i64*
  %bf.load76 = load i64, i64* %64, align 8
  %bf.lshr77 = lshr i64 %bf.load76, 10
  %bf.clear78 = and i64 %bf.lshr77, 3
  %bf.cast79 = trunc i64 %bf.clear78 to i32
  %tobool80 = icmp ne i32 %bf.cast79, 0
  br i1 %tobool80, label %if.end.90, label %if.then.81

if.then.81:                                       ; preds = %if.end.74
  %65 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data82 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 62
  %x83 = bitcast %union.output_data* %output_data82 to %struct.x_output**
  %66 = load %struct.x_output*, %struct.x_output** %x83, align 8
  %display_info84 = getelementptr inbounds %struct.x_output, %struct.x_output* %66, i32 0, i32 44
  %67 = load %struct.x_display_info*, %struct.x_display_info** %display_info84, align 8
  %display85 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %67, i32 0, i32 2
  %68 = load %struct._XDisplay*, %struct._XDisplay** %display85, align 8
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data86 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 62
  %x87 = bitcast %union.output_data* %output_data86 to %struct.x_output**
  %70 = load %struct.x_output*, %struct.x_output** %x87, align 8
  %window_desc88 = getelementptr inbounds %struct.x_output, %struct.x_output* %70, i32 0, i32 9
  %71 = load i64, i64* %window_desc88, align 8
  %call89 = call i32 @XMapRaised(%struct._XDisplay* %68, i64 %71)
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.81, %if.end.74
  %72 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified91 = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 26
  %73 = bitcast i48* %iconified91 to i64*
  %bf.load92 = load i64, i64* %73, align 8
  %bf.clear93 = and i64 %bf.load92, -4097
  %bf.set94 = or i64 %bf.clear93, 4096
  store i64 %bf.set94, i64* %73, align 8
  %74 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %74, i32 0)
  call void @unblock_input()
  br label %return

return:                                           ; preds = %if.end.90, %if.end.19, %if.then.5
  ret void
}

declare void @gtk_window_iconify(%struct._GtkWindow*) #1

declare i32 @XSendEvent(%struct._XDisplay*, i64, i32, i64, %union._XEvent*) #1

declare i32 @XMapRaised(%struct._XDisplay*, i64) #1

; Function Attrs: nounwind uwtable
define void @x_free_frame_resources(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %hlinfo = alloca %struct.Mouse_HLInfo*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 25
  store %struct.Mouse_HLInfo* %mouse_highlight, %struct.Mouse_HLInfo** %hlinfo, align 8
  call void @block_input()
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 2
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %tobool = icmp ne %struct._XDisplay* %5, null
  br i1 %tobool, label %if.then, label %if.end.201

if.then:                                          ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %pointer_invisible to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.lshr = lshr i64 %bf.load, 21
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info4 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 44
  %10 = load %struct.x_display_info*, %struct.x_display_info** %display_info4, align 8
  %toggle_visible_pointer = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 19
  %11 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %toggle_visible_pointer, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void %11(%struct.frame* %12, i1 zeroext false)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @free_frame_faces(%struct.frame* %13)
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %icon_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 10
  %16 = load i64, i64* %icon_desc, align 8
  %tobool7 = icmp ne i64 %16, 0
  br i1 %tobool7, label %if.then.8, label %if.end.16

if.then.8:                                        ; preds = %if.end
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data9 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 62
  %x10 = bitcast %union.output_data* %output_data9 to %struct.x_output**
  %18 = load %struct.x_output*, %struct.x_output** %x10, align 8
  %display_info11 = getelementptr inbounds %struct.x_output, %struct.x_output* %18, i32 0, i32 44
  %19 = load %struct.x_display_info*, %struct.x_display_info** %display_info11, align 8
  %display12 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %19, i32 0, i32 2
  %20 = load %struct._XDisplay*, %struct._XDisplay** %display12, align 8
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x14, align 8
  %icon_desc15 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 10
  %23 = load i64, i64* %icon_desc15, align 8
  %call = call i32 @XDestroyWindow(%struct._XDisplay* %20, i64 %23)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.8, %if.end
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data17 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x18 = bitcast %union.output_data* %output_data17 to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x18, align 8
  %xic = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 47
  %26 = load %struct._XIC*, %struct._XIC** %xic, align 8
  %tobool19 = icmp ne %struct._XIC* %26, null
  br i1 %tobool19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.16
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @free_frame_xic(%struct.frame* %27)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %if.end.16
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_free_cr_resources(%struct.frame* %28)
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_free_frame_widgets(%struct.frame* %29)
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %31 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %31, i32 0, i32 9
  %32 = load i64, i64* %window_desc, align 8
  %tobool24 = icmp ne i64 %32, 0
  br i1 %tobool24, label %if.then.25, label %if.end.34

if.then.25:                                       ; preds = %if.end.21
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %34 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %display_info28 = getelementptr inbounds %struct.x_output, %struct.x_output* %34, i32 0, i32 44
  %35 = load %struct.x_display_info*, %struct.x_display_info** %display_info28, align 8
  %display29 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %35, i32 0, i32 2
  %36 = load %struct._XDisplay*, %struct._XDisplay** %display29, align 8
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data30 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x31 = bitcast %union.output_data* %output_data30 to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x31, align 8
  %window_desc32 = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 9
  %39 = load i64, i64* %window_desc32, align 8
  %call33 = call i32 @XDestroyWindow(%struct._XDisplay* %36, i64 %39)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.25, %if.end.21
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 78
  %42 = load i64, i64* %foreground_pixel, align 8
  call void @unload_color(%struct.frame* %40, i64 %42)
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 77
  %45 = load i64, i64* %background_pixel, align 8
  call void @unload_color(%struct.frame* %43, i64 %45)
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data35 = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 62
  %x36 = bitcast %union.output_data* %output_data35 to %struct.x_output**
  %48 = load %struct.x_output*, %struct.x_output** %x36, align 8
  %cursor_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %48, i32 0, i32 28
  %49 = load i64, i64* %cursor_pixel, align 8
  call void @unload_color(%struct.frame* %46, i64 %49)
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data37 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 62
  %x38 = bitcast %union.output_data* %output_data37 to %struct.x_output**
  %52 = load %struct.x_output*, %struct.x_output** %x38, align 8
  %cursor_foreground_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %52, i32 0, i32 31
  %53 = load i64, i64* %cursor_foreground_pixel, align 8
  call void @unload_color(%struct.frame* %50, i64 %53)
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data39 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 62
  %x40 = bitcast %union.output_data* %output_data39 to %struct.x_output**
  %56 = load %struct.x_output*, %struct.x_output** %x40, align 8
  %border_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %56, i32 0, i32 29
  %57 = load i64, i64* %border_pixel, align 8
  call void @unload_color(%struct.frame* %54, i64 %57)
  %58 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data41 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 62
  %x42 = bitcast %union.output_data* %output_data41 to %struct.x_output**
  %60 = load %struct.x_output*, %struct.x_output** %x42, align 8
  %mouse_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %60, i32 0, i32 30
  %61 = load i64, i64* %mouse_pixel, align 8
  call void @unload_color(%struct.frame* %58, i64 %61)
  %62 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data43 = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 62
  %x44 = bitcast %union.output_data* %output_data43 to %struct.x_output**
  %63 = load %struct.x_output*, %struct.x_output** %x44, align 8
  %scroll_bar_background_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %63, i32 0, i32 33
  %64 = load i64, i64* %scroll_bar_background_pixel, align 8
  %cmp = icmp ne i64 %64, -1
  br i1 %cmp, label %if.then.45, label %if.end.49

if.then.45:                                       ; preds = %if.end.34
  %65 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %66 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data46 = getelementptr inbounds %struct.frame, %struct.frame* %66, i32 0, i32 62
  %x47 = bitcast %union.output_data* %output_data46 to %struct.x_output**
  %67 = load %struct.x_output*, %struct.x_output** %x47, align 8
  %scroll_bar_background_pixel48 = getelementptr inbounds %struct.x_output, %struct.x_output* %67, i32 0, i32 33
  %68 = load i64, i64* %scroll_bar_background_pixel48, align 8
  call void @unload_color(%struct.frame* %65, i64 %68)
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.45, %if.end.34
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data50 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 62
  %x51 = bitcast %union.output_data* %output_data50 to %struct.x_output**
  %70 = load %struct.x_output*, %struct.x_output** %x51, align 8
  %scroll_bar_foreground_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %70, i32 0, i32 32
  %71 = load i64, i64* %scroll_bar_foreground_pixel, align 8
  %cmp52 = icmp ne i64 %71, -1
  br i1 %cmp52, label %if.then.53, label %if.end.57

if.then.53:                                       ; preds = %if.end.49
  %72 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %73 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data54 = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 62
  %x55 = bitcast %union.output_data* %output_data54 to %struct.x_output**
  %74 = load %struct.x_output*, %struct.x_output** %x55, align 8
  %scroll_bar_foreground_pixel56 = getelementptr inbounds %struct.x_output, %struct.x_output* %74, i32 0, i32 32
  %75 = load i64, i64* %scroll_bar_foreground_pixel56, align 8
  call void @unload_color(%struct.frame* %72, i64 %75)
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.53, %if.end.49
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data58 = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 62
  %x59 = bitcast %union.output_data* %output_data58 to %struct.x_output**
  %77 = load %struct.x_output*, %struct.x_output** %x59, align 8
  %white_relief = getelementptr inbounds %struct.x_output, %struct.x_output* %77, i32 0, i32 51
  %pixel = getelementptr inbounds %struct.relief, %struct.relief* %white_relief, i32 0, i32 1
  %78 = load i64, i64* %pixel, align 8
  %cmp60 = icmp ne i64 %78, -1
  br i1 %cmp60, label %if.then.61, label %if.end.66

if.then.61:                                       ; preds = %if.end.57
  %79 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %80 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data62 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 62
  %x63 = bitcast %union.output_data* %output_data62 to %struct.x_output**
  %81 = load %struct.x_output*, %struct.x_output** %x63, align 8
  %white_relief64 = getelementptr inbounds %struct.x_output, %struct.x_output* %81, i32 0, i32 51
  %pixel65 = getelementptr inbounds %struct.relief, %struct.relief* %white_relief64, i32 0, i32 1
  %82 = load i64, i64* %pixel65, align 8
  call void @unload_color(%struct.frame* %79, i64 %82)
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.61, %if.end.57
  %83 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data67 = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 62
  %x68 = bitcast %union.output_data* %output_data67 to %struct.x_output**
  %84 = load %struct.x_output*, %struct.x_output** %x68, align 8
  %black_relief = getelementptr inbounds %struct.x_output, %struct.x_output* %84, i32 0, i32 50
  %pixel69 = getelementptr inbounds %struct.relief, %struct.relief* %black_relief, i32 0, i32 1
  %85 = load i64, i64* %pixel69, align 8
  %cmp70 = icmp ne i64 %85, -1
  br i1 %cmp70, label %if.then.71, label %if.end.76

if.then.71:                                       ; preds = %if.end.66
  %86 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data72 = getelementptr inbounds %struct.frame, %struct.frame* %87, i32 0, i32 62
  %x73 = bitcast %union.output_data* %output_data72 to %struct.x_output**
  %88 = load %struct.x_output*, %struct.x_output** %x73, align 8
  %black_relief74 = getelementptr inbounds %struct.x_output, %struct.x_output* %88, i32 0, i32 50
  %pixel75 = getelementptr inbounds %struct.relief, %struct.relief* %black_relief74, i32 0, i32 1
  %89 = load i64, i64* %pixel75, align 8
  call void @unload_color(%struct.frame* %86, i64 %89)
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.71, %if.end.66
  %90 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_free_gcs(%struct.frame* %90)
  %91 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data77 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 62
  %x78 = bitcast %union.output_data* %output_data77 to %struct.x_output**
  %92 = load %struct.x_output*, %struct.x_output** %x78, align 8
  %white_relief79 = getelementptr inbounds %struct.x_output, %struct.x_output* %92, i32 0, i32 51
  %gc = getelementptr inbounds %struct.relief, %struct.relief* %white_relief79, i32 0, i32 0
  %93 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %tobool80 = icmp ne %struct._XGC* %93, null
  br i1 %tobool80, label %if.then.81, label %if.end.92

if.then.81:                                       ; preds = %if.end.76
  %94 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display82 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %94, i32 0, i32 2
  %95 = load %struct._XDisplay*, %struct._XDisplay** %display82, align 8
  %96 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data83 = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 62
  %x84 = bitcast %union.output_data* %output_data83 to %struct.x_output**
  %97 = load %struct.x_output*, %struct.x_output** %x84, align 8
  %white_relief85 = getelementptr inbounds %struct.x_output, %struct.x_output* %97, i32 0, i32 51
  %gc86 = getelementptr inbounds %struct.relief, %struct.relief* %white_relief85, i32 0, i32 0
  %98 = load %struct._XGC*, %struct._XGC** %gc86, align 8
  %call87 = call i32 @XFreeGC(%struct._XDisplay* %95, %struct._XGC* %98)
  %99 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data88 = getelementptr inbounds %struct.frame, %struct.frame* %99, i32 0, i32 62
  %x89 = bitcast %union.output_data* %output_data88 to %struct.x_output**
  %100 = load %struct.x_output*, %struct.x_output** %x89, align 8
  %white_relief90 = getelementptr inbounds %struct.x_output, %struct.x_output* %100, i32 0, i32 51
  %gc91 = getelementptr inbounds %struct.relief, %struct.relief* %white_relief90, i32 0, i32 0
  store %struct._XGC* null, %struct._XGC** %gc91, align 8
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.81, %if.end.76
  %101 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data93 = getelementptr inbounds %struct.frame, %struct.frame* %101, i32 0, i32 62
  %x94 = bitcast %union.output_data* %output_data93 to %struct.x_output**
  %102 = load %struct.x_output*, %struct.x_output** %x94, align 8
  %black_relief95 = getelementptr inbounds %struct.x_output, %struct.x_output* %102, i32 0, i32 50
  %gc96 = getelementptr inbounds %struct.relief, %struct.relief* %black_relief95, i32 0, i32 0
  %103 = load %struct._XGC*, %struct._XGC** %gc96, align 8
  %tobool97 = icmp ne %struct._XGC* %103, null
  br i1 %tobool97, label %if.then.98, label %if.end.109

if.then.98:                                       ; preds = %if.end.92
  %104 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display99 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %104, i32 0, i32 2
  %105 = load %struct._XDisplay*, %struct._XDisplay** %display99, align 8
  %106 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data100 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 62
  %x101 = bitcast %union.output_data* %output_data100 to %struct.x_output**
  %107 = load %struct.x_output*, %struct.x_output** %x101, align 8
  %black_relief102 = getelementptr inbounds %struct.x_output, %struct.x_output* %107, i32 0, i32 50
  %gc103 = getelementptr inbounds %struct.relief, %struct.relief* %black_relief102, i32 0, i32 0
  %108 = load %struct._XGC*, %struct._XGC** %gc103, align 8
  %call104 = call i32 @XFreeGC(%struct._XDisplay* %105, %struct._XGC* %108)
  %109 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data105 = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 62
  %x106 = bitcast %union.output_data* %output_data105 to %struct.x_output**
  %110 = load %struct.x_output*, %struct.x_output** %x106, align 8
  %black_relief107 = getelementptr inbounds %struct.x_output, %struct.x_output* %110, i32 0, i32 50
  %gc108 = getelementptr inbounds %struct.relief, %struct.relief* %black_relief107, i32 0, i32 0
  store %struct._XGC* null, %struct._XGC** %gc108, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.98, %if.end.92
  %111 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data110 = getelementptr inbounds %struct.frame, %struct.frame* %111, i32 0, i32 62
  %x111 = bitcast %union.output_data* %output_data110 to %struct.x_output**
  %112 = load %struct.x_output*, %struct.x_output** %x111, align 8
  %text_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %112, i32 0, i32 34
  %113 = load i64, i64* %text_cursor, align 8
  %cmp112 = icmp ne i64 %113, 0
  br i1 %cmp112, label %if.then.113, label %if.end.122

if.then.113:                                      ; preds = %if.end.109
  %114 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data114 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 62
  %x115 = bitcast %union.output_data* %output_data114 to %struct.x_output**
  %115 = load %struct.x_output*, %struct.x_output** %x115, align 8
  %display_info116 = getelementptr inbounds %struct.x_output, %struct.x_output* %115, i32 0, i32 44
  %116 = load %struct.x_display_info*, %struct.x_display_info** %display_info116, align 8
  %display117 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %116, i32 0, i32 2
  %117 = load %struct._XDisplay*, %struct._XDisplay** %display117, align 8
  %118 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data118 = getelementptr inbounds %struct.frame, %struct.frame* %118, i32 0, i32 62
  %x119 = bitcast %union.output_data* %output_data118 to %struct.x_output**
  %119 = load %struct.x_output*, %struct.x_output** %x119, align 8
  %text_cursor120 = getelementptr inbounds %struct.x_output, %struct.x_output* %119, i32 0, i32 34
  %120 = load i64, i64* %text_cursor120, align 8
  %call121 = call i32 @XFreeCursor(%struct._XDisplay* %117, i64 %120)
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.113, %if.end.109
  %121 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data123 = getelementptr inbounds %struct.frame, %struct.frame* %121, i32 0, i32 62
  %x124 = bitcast %union.output_data* %output_data123 to %struct.x_output**
  %122 = load %struct.x_output*, %struct.x_output** %x124, align 8
  %nontext_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %122, i32 0, i32 35
  %123 = load i64, i64* %nontext_cursor, align 8
  %cmp125 = icmp ne i64 %123, 0
  br i1 %cmp125, label %if.then.126, label %if.end.135

if.then.126:                                      ; preds = %if.end.122
  %124 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data127 = getelementptr inbounds %struct.frame, %struct.frame* %124, i32 0, i32 62
  %x128 = bitcast %union.output_data* %output_data127 to %struct.x_output**
  %125 = load %struct.x_output*, %struct.x_output** %x128, align 8
  %display_info129 = getelementptr inbounds %struct.x_output, %struct.x_output* %125, i32 0, i32 44
  %126 = load %struct.x_display_info*, %struct.x_display_info** %display_info129, align 8
  %display130 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %126, i32 0, i32 2
  %127 = load %struct._XDisplay*, %struct._XDisplay** %display130, align 8
  %128 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data131 = getelementptr inbounds %struct.frame, %struct.frame* %128, i32 0, i32 62
  %x132 = bitcast %union.output_data* %output_data131 to %struct.x_output**
  %129 = load %struct.x_output*, %struct.x_output** %x132, align 8
  %nontext_cursor133 = getelementptr inbounds %struct.x_output, %struct.x_output* %129, i32 0, i32 35
  %130 = load i64, i64* %nontext_cursor133, align 8
  %call134 = call i32 @XFreeCursor(%struct._XDisplay* %127, i64 %130)
  br label %if.end.135

if.end.135:                                       ; preds = %if.then.126, %if.end.122
  %131 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data136 = getelementptr inbounds %struct.frame, %struct.frame* %131, i32 0, i32 62
  %x137 = bitcast %union.output_data* %output_data136 to %struct.x_output**
  %132 = load %struct.x_output*, %struct.x_output** %x137, align 8
  %modeline_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %132, i32 0, i32 36
  %133 = load i64, i64* %modeline_cursor, align 8
  %cmp138 = icmp ne i64 %133, 0
  br i1 %cmp138, label %if.then.139, label %if.end.148

if.then.139:                                      ; preds = %if.end.135
  %134 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data140 = getelementptr inbounds %struct.frame, %struct.frame* %134, i32 0, i32 62
  %x141 = bitcast %union.output_data* %output_data140 to %struct.x_output**
  %135 = load %struct.x_output*, %struct.x_output** %x141, align 8
  %display_info142 = getelementptr inbounds %struct.x_output, %struct.x_output* %135, i32 0, i32 44
  %136 = load %struct.x_display_info*, %struct.x_display_info** %display_info142, align 8
  %display143 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %136, i32 0, i32 2
  %137 = load %struct._XDisplay*, %struct._XDisplay** %display143, align 8
  %138 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data144 = getelementptr inbounds %struct.frame, %struct.frame* %138, i32 0, i32 62
  %x145 = bitcast %union.output_data* %output_data144 to %struct.x_output**
  %139 = load %struct.x_output*, %struct.x_output** %x145, align 8
  %modeline_cursor146 = getelementptr inbounds %struct.x_output, %struct.x_output* %139, i32 0, i32 36
  %140 = load i64, i64* %modeline_cursor146, align 8
  %call147 = call i32 @XFreeCursor(%struct._XDisplay* %137, i64 %140)
  br label %if.end.148

if.end.148:                                       ; preds = %if.then.139, %if.end.135
  %141 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data149 = getelementptr inbounds %struct.frame, %struct.frame* %141, i32 0, i32 62
  %x150 = bitcast %union.output_data* %output_data149 to %struct.x_output**
  %142 = load %struct.x_output*, %struct.x_output** %x150, align 8
  %hand_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %142, i32 0, i32 37
  %143 = load i64, i64* %hand_cursor, align 8
  %cmp151 = icmp ne i64 %143, 0
  br i1 %cmp151, label %if.then.152, label %if.end.161

if.then.152:                                      ; preds = %if.end.148
  %144 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data153 = getelementptr inbounds %struct.frame, %struct.frame* %144, i32 0, i32 62
  %x154 = bitcast %union.output_data* %output_data153 to %struct.x_output**
  %145 = load %struct.x_output*, %struct.x_output** %x154, align 8
  %display_info155 = getelementptr inbounds %struct.x_output, %struct.x_output* %145, i32 0, i32 44
  %146 = load %struct.x_display_info*, %struct.x_display_info** %display_info155, align 8
  %display156 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %146, i32 0, i32 2
  %147 = load %struct._XDisplay*, %struct._XDisplay** %display156, align 8
  %148 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data157 = getelementptr inbounds %struct.frame, %struct.frame* %148, i32 0, i32 62
  %x158 = bitcast %union.output_data* %output_data157 to %struct.x_output**
  %149 = load %struct.x_output*, %struct.x_output** %x158, align 8
  %hand_cursor159 = getelementptr inbounds %struct.x_output, %struct.x_output* %149, i32 0, i32 37
  %150 = load i64, i64* %hand_cursor159, align 8
  %call160 = call i32 @XFreeCursor(%struct._XDisplay* %147, i64 %150)
  br label %if.end.161

if.end.161:                                       ; preds = %if.then.152, %if.end.148
  %151 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data162 = getelementptr inbounds %struct.frame, %struct.frame* %151, i32 0, i32 62
  %x163 = bitcast %union.output_data* %output_data162 to %struct.x_output**
  %152 = load %struct.x_output*, %struct.x_output** %x163, align 8
  %hourglass_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %152, i32 0, i32 38
  %153 = load i64, i64* %hourglass_cursor, align 8
  %cmp164 = icmp ne i64 %153, 0
  br i1 %cmp164, label %if.then.165, label %if.end.174

if.then.165:                                      ; preds = %if.end.161
  %154 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data166 = getelementptr inbounds %struct.frame, %struct.frame* %154, i32 0, i32 62
  %x167 = bitcast %union.output_data* %output_data166 to %struct.x_output**
  %155 = load %struct.x_output*, %struct.x_output** %x167, align 8
  %display_info168 = getelementptr inbounds %struct.x_output, %struct.x_output* %155, i32 0, i32 44
  %156 = load %struct.x_display_info*, %struct.x_display_info** %display_info168, align 8
  %display169 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %156, i32 0, i32 2
  %157 = load %struct._XDisplay*, %struct._XDisplay** %display169, align 8
  %158 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data170 = getelementptr inbounds %struct.frame, %struct.frame* %158, i32 0, i32 62
  %x171 = bitcast %union.output_data* %output_data170 to %struct.x_output**
  %159 = load %struct.x_output*, %struct.x_output** %x171, align 8
  %hourglass_cursor172 = getelementptr inbounds %struct.x_output, %struct.x_output* %159, i32 0, i32 38
  %160 = load i64, i64* %hourglass_cursor172, align 8
  %call173 = call i32 @XFreeCursor(%struct._XDisplay* %157, i64 %160)
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.165, %if.end.161
  %161 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data175 = getelementptr inbounds %struct.frame, %struct.frame* %161, i32 0, i32 62
  %x176 = bitcast %union.output_data* %output_data175 to %struct.x_output**
  %162 = load %struct.x_output*, %struct.x_output** %x176, align 8
  %horizontal_drag_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %162, i32 0, i32 39
  %163 = load i64, i64* %horizontal_drag_cursor, align 8
  %cmp177 = icmp ne i64 %163, 0
  br i1 %cmp177, label %if.then.178, label %if.end.187

if.then.178:                                      ; preds = %if.end.174
  %164 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data179 = getelementptr inbounds %struct.frame, %struct.frame* %164, i32 0, i32 62
  %x180 = bitcast %union.output_data* %output_data179 to %struct.x_output**
  %165 = load %struct.x_output*, %struct.x_output** %x180, align 8
  %display_info181 = getelementptr inbounds %struct.x_output, %struct.x_output* %165, i32 0, i32 44
  %166 = load %struct.x_display_info*, %struct.x_display_info** %display_info181, align 8
  %display182 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %166, i32 0, i32 2
  %167 = load %struct._XDisplay*, %struct._XDisplay** %display182, align 8
  %168 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data183 = getelementptr inbounds %struct.frame, %struct.frame* %168, i32 0, i32 62
  %x184 = bitcast %union.output_data* %output_data183 to %struct.x_output**
  %169 = load %struct.x_output*, %struct.x_output** %x184, align 8
  %horizontal_drag_cursor185 = getelementptr inbounds %struct.x_output, %struct.x_output* %169, i32 0, i32 39
  %170 = load i64, i64* %horizontal_drag_cursor185, align 8
  %call186 = call i32 @XFreeCursor(%struct._XDisplay* %167, i64 %170)
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.178, %if.end.174
  %171 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data188 = getelementptr inbounds %struct.frame, %struct.frame* %171, i32 0, i32 62
  %x189 = bitcast %union.output_data* %output_data188 to %struct.x_output**
  %172 = load %struct.x_output*, %struct.x_output** %x189, align 8
  %vertical_drag_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %172, i32 0, i32 40
  %173 = load i64, i64* %vertical_drag_cursor, align 8
  %cmp190 = icmp ne i64 %173, 0
  br i1 %cmp190, label %if.then.191, label %if.end.200

if.then.191:                                      ; preds = %if.end.187
  %174 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data192 = getelementptr inbounds %struct.frame, %struct.frame* %174, i32 0, i32 62
  %x193 = bitcast %union.output_data* %output_data192 to %struct.x_output**
  %175 = load %struct.x_output*, %struct.x_output** %x193, align 8
  %display_info194 = getelementptr inbounds %struct.x_output, %struct.x_output* %175, i32 0, i32 44
  %176 = load %struct.x_display_info*, %struct.x_display_info** %display_info194, align 8
  %display195 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %176, i32 0, i32 2
  %177 = load %struct._XDisplay*, %struct._XDisplay** %display195, align 8
  %178 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data196 = getelementptr inbounds %struct.frame, %struct.frame* %178, i32 0, i32 62
  %x197 = bitcast %union.output_data* %output_data196 to %struct.x_output**
  %179 = load %struct.x_output*, %struct.x_output** %x197, align 8
  %vertical_drag_cursor198 = getelementptr inbounds %struct.x_output, %struct.x_output* %179, i32 0, i32 40
  %180 = load i64, i64* %vertical_drag_cursor198, align 8
  %call199 = call i32 @XFreeCursor(%struct._XDisplay* %177, i64 %180)
  br label %if.end.200

if.end.200:                                       ; preds = %if.then.191, %if.end.187
  br label %if.end.201

if.end.201:                                       ; preds = %if.end.200, %entry
  %181 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data202 = getelementptr inbounds %struct.frame, %struct.frame* %181, i32 0, i32 62
  %x203 = bitcast %union.output_data* %output_data202 to %struct.x_output**
  %182 = load %struct.x_output*, %struct.x_output** %x203, align 8
  %saved_menu_event = getelementptr inbounds %struct.x_output, %struct.x_output* %182, i32 0, i32 45
  %183 = load %union._XEvent*, %union._XEvent** %saved_menu_event, align 8
  %184 = bitcast %union._XEvent* %183 to i8*
  call void @xfree(i8* %184)
  %185 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data204 = getelementptr inbounds %struct.frame, %struct.frame* %185, i32 0, i32 62
  %x205 = bitcast %union.output_data* %output_data204 to %struct.x_output**
  %186 = load %struct.x_output*, %struct.x_output** %x205, align 8
  %187 = bitcast %struct.x_output* %186 to i8*
  call void @xfree(i8* %187)
  %188 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data206 = getelementptr inbounds %struct.frame, %struct.frame* %188, i32 0, i32 62
  %x207 = bitcast %union.output_data* %output_data206 to %struct.x_output**
  store %struct.x_output* null, %struct.x_output** %x207, align 8
  %189 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %190 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_focus_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %190, i32 0, i32 71
  %191 = load %struct.frame*, %struct.frame** %x_focus_frame, align 8
  %cmp208 = icmp eq %struct.frame* %189, %191
  br i1 %cmp208, label %if.then.209, label %if.end.211

if.then.209:                                      ; preds = %if.end.201
  %192 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_focus_frame210 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %192, i32 0, i32 71
  store %struct.frame* null, %struct.frame** %x_focus_frame210, align 8
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.209, %if.end.201
  %193 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %194 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_focus_event_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %194, i32 0, i32 72
  %195 = load %struct.frame*, %struct.frame** %x_focus_event_frame, align 8
  %cmp212 = icmp eq %struct.frame* %193, %195
  br i1 %cmp212, label %if.then.213, label %if.end.215

if.then.213:                                      ; preds = %if.end.211
  %196 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_focus_event_frame214 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %196, i32 0, i32 72
  store %struct.frame* null, %struct.frame** %x_focus_event_frame214, align 8
  br label %if.end.215

if.end.215:                                       ; preds = %if.then.213, %if.end.211
  %197 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %198 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_highlight_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %198, i32 0, i32 73
  %199 = load %struct.frame*, %struct.frame** %x_highlight_frame, align 8
  %cmp216 = icmp eq %struct.frame* %197, %199
  br i1 %cmp216, label %if.then.217, label %if.end.219

if.then.217:                                      ; preds = %if.end.215
  %200 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_highlight_frame218 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %200, i32 0, i32 73
  store %struct.frame* null, %struct.frame** %x_highlight_frame218, align 8
  br label %if.end.219

if.end.219:                                       ; preds = %if.then.217, %if.end.215
  %201 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %202 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_frame = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %202, i32 0, i32 9
  %203 = load %struct.frame*, %struct.frame** %mouse_face_mouse_frame, align 8
  %cmp220 = icmp eq %struct.frame* %201, %203
  br i1 %cmp220, label %if.then.221, label %if.end.222

if.then.221:                                      ; preds = %if.end.219
  %204 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  call void @reset_mouse_highlight(%struct.Mouse_HLInfo* %204)
  br label %if.end.222

if.end.222:                                       ; preds = %if.then.221, %if.end.219
  call void @unblock_input()
  ret void
}

declare void @free_frame_faces(%struct.frame*) #1

declare i32 @XDestroyWindow(%struct._XDisplay*, i64) #1

declare void @free_frame_xic(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define internal void @x_free_cr_resources(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  ret void
}

declare void @xg_free_frame_widgets(%struct.frame*) #1

declare void @unload_color(%struct.frame*, i64) #1

declare void @x_free_gcs(%struct.frame*) #1

declare i32 @XFreeGC(%struct._XDisplay*, %struct._XGC*) #1

declare i32 @XFreeCursor(%struct._XDisplay*, i64) #1

declare void @reset_mouse_highlight(%struct.Mouse_HLInfo*) #1

; Function Attrs: nounwind uwtable
define void @x_wm_set_icon_position(%struct.frame* %f, i32 %icon_x, i32 %icon_y) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %icon_x.addr = alloca i32, align 4
  %icon_y.addr = alloca i32, align 4
  %window = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %icon_x, i32* %icon_x.addr, align 4
  store i32 %icon_y, i32* %icon_y.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 12
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %2, null
  br i1 %tobool, label %cond.true, label %cond.false.15

cond.true:                                        ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %widget3 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 12
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %widget3, align 8
  %tobool4 = icmp ne %struct._GtkWidget* %5, null
  br i1 %tobool4, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %widget7 = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 12
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %widget7, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %8)
  %tobool8 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool8, label %cond.true.9, label %cond.false

cond.true.9:                                      ; preds = %land.lhs.true
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %widget12 = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 12
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %widget12, align 8
  %call13 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %11)
  %call14 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call13)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.9
  %cond = phi i64 [ %call14, %cond.true.9 ], [ 0, %cond.false ]
  br label %cond.end.18

cond.false.15:                                    ; preds = %entry
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data16 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x17 = bitcast %union.output_data* %output_data16 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x17, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 9
  %14 = load i64, i64* %window_desc, align 8
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.false.15, %cond.end
  %cond19 = phi i64 [ %cond, %cond.end ], [ %14, %cond.false.15 ]
  store i64 %cond19, i64* %window, align 8
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data20 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x21 = bitcast %union.output_data* %output_data20 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x21, align 8
  %wm_hints = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 43
  %flags = getelementptr inbounds %struct.XWMHints, %struct.XWMHints* %wm_hints, i32 0, i32 0
  %17 = load i64, i64* %flags, align 8
  %or = or i64 %17, 16
  store i64 %or, i64* %flags, align 8
  %18 = load i32, i32* %icon_x.addr, align 4
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %wm_hints24 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 43
  %icon_x25 = getelementptr inbounds %struct.XWMHints, %struct.XWMHints* %wm_hints24, i32 0, i32 5
  store i32 %18, i32* %icon_x25, align 4
  %21 = load i32, i32* %icon_y.addr, align 4
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %23 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %wm_hints28 = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 43
  %icon_y29 = getelementptr inbounds %struct.XWMHints, %struct.XWMHints* %wm_hints28, i32 0, i32 6
  store i32 %21, i32* %icon_y29, align 4
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data30 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x31 = bitcast %union.output_data* %output_data30 to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x31, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 44
  %26 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 2
  %27 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %28 = load i64, i64* %window, align 8
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data32 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 62
  %x33 = bitcast %union.output_data* %output_data32 to %struct.x_output**
  %30 = load %struct.x_output*, %struct.x_output** %x33, align 8
  %wm_hints34 = getelementptr inbounds %struct.x_output, %struct.x_output* %30, i32 0, i32 43
  %call35 = call i32 @XSetWMHints(%struct._XDisplay* %27, i64 %28, %struct.XWMHints* %wm_hints34)
  ret void
}

declare i32 @XSetWMHints(%struct._XDisplay*, i64, %struct.XWMHints*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @x_display_ok(i8* %display) #0 {
entry:
  %retval = alloca i1, align 1
  %display.addr = alloca i8*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  store i8* %display, i8** %display.addr, align 8
  call void @unrequest_sigio()
  %0 = load i8*, i8** %display.addr, align 8
  %call = call %struct._XDisplay* @XOpenDisplay(i8* %0)
  store %struct._XDisplay* %call, %struct._XDisplay** %dpy, align 8
  call void @request_sigio()
  %1 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %tobool = icmp ne %struct._XDisplay* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call1 = call i32 @XCloseDisplay(%struct._XDisplay* %2)
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i1, i1* %retval
  ret i1 %3
}

declare void @unrequest_sigio() #1

declare %struct._XDisplay* @XOpenDisplay(i8*) #1

declare void @request_sigio() #1

declare i32 @XCloseDisplay(%struct._XDisplay*) #1

; Function Attrs: nounwind uwtable
define %struct.x_display_info* @x_term_init(i64 %display_name, i8* %xrm_option, i8* %resource_name) #0 {
entry:
  %retval = alloca %struct.x_display_info*, align 8
  %display_name.addr = alloca i64, align 8
  %xrm_option.addr = alloca i8*, align 8
  %resource_name.addr = alloca i8*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %terminal = alloca %struct.terminal*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %xrdb = alloca %struct._XrmHashBucketRec*, align 8
  %xcb_conn = alloca %struct.xcb_connection_t*, align 8
  %argc = alloca i32, align 4
  %argv = alloca [10 x i8*], align 16
  %argv2 = alloca i8**, align 8
  %id = alloca i32, align 4
  %file = alloca i8*, align 8
  %s = alloca i64, align 8
  %abs_file = alloca i64, align 8
  %share = alloca %struct.x_display_info*, align 8
  %vendor = alloca i8*, align 8
  %system_name = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %nametail = alloca i8*, align 8
  %privateColormap = alloca i64, align 8
  %.compoundliteral = alloca %union.Aligned_String, align 8
  %PrivateColormap = alloca i64, align 8
  %.compoundliteral2935 = alloca %union.Aligned_String, align 8
  %value = alloca i64, align 8
  %event_base = alloca i32, align 4
  %error_base = alloca i32, align 4
  %v = alloca i8*, align 8
  %d = alloca double, align 8
  %screen_number = alloca i32, align 4
  %pixels = alloca double, align 8
  %mm = alloca double, align 8
  %i = alloca i32, align 4
  %atoms_return = alloca [55 x i64], align 16
  %atom_names = alloca [55 x i8*], align 16
  %xsettings_atom_name = alloca [24 x i8], align 16
  %synchronous = alloca i64, align 8
  %.compoundliteral3082 = alloca %union.Aligned_String, align 8
  %Synchronous = alloca i64, align 8
  %.compoundliteral3090 = alloca %union.Aligned_String, align 8
  %value3098 = alloca i64, align 8
  %useXIM = alloca i64, align 8
  %.compoundliteral3116 = alloca %union.Aligned_String, align 8
  %UseXIM = alloca i64, align 8
  %.compoundliteral3124 = alloca %union.Aligned_String, align 8
  %value3132 = alloca i64, align 8
  store i64 %display_name, i64* %display_name.addr, align 8
  store i8* %xrm_option, i8** %xrm_option.addr, align 8
  store i8* %resource_name, i8** %resource_name.addr, align 8
  call void @block_input()
  %0 = load i32, i32* @x_initialized, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @x_initialize()
  %1 = load i32, i32* @x_initialized, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* @x_initialized, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %display_name.addr, align 8
  %call = call i8* @SSDATA(i64 %2)
  %call1 = call zeroext i1 @x_display_ok(i8* %call)
  br i1 %call1, label %if.end.4, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load i64, i64* %display_name.addr, align 8
  %call3 = call i8* @SSDATA(i64 %3)
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i8* %call3) #10
  unreachable

if.end.4:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [10 x i8*], [10 x i8*]* %argv, i32 0, i32 0
  store i8** %arraydecay, i8*** %argv2, align 8
  %4 = load i32, i32* @x_initialized, align 4
  %inc5 = add nsw i32 %4, 1
  store i32 %inc5, i32* @x_initialized, align 4
  %cmp = icmp sgt i32 %4, 1
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end.4
  %5 = load i64, i64* %display_name.addr, align 8
  %call7 = call i8* @SSDATA(i64 %5)
  call void @xg_display_open(i8* %call7, %struct._XDisplay** %dpy)
  br label %if.end.46

if.else:                                          ; preds = %if.end.4
  store i32 0, i32* %argc, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i32, i32* %argc, align 4
  %cmp8 = icmp slt i32 %6, 10
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %argc, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %argv, i32 0, i64 %idxprom
  store i8* null, i8** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %argc, align 4
  %inc9 = add nsw i32 %8, 1
  store i32 %inc9, i32* %argc, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %argc, align 4
  %9 = load i8**, i8*** @initial_argv, align 8
  %arrayidx10 = getelementptr inbounds i8*, i8** %9, i64 0
  %10 = load i8*, i8** %arrayidx10, align 8
  %11 = load i32, i32* %argc, align 4
  %inc11 = add nsw i32 %11, 1
  store i32 %inc11, i32* %argc, align 4
  %idxprom12 = sext i32 %11 to i64
  %arrayidx13 = getelementptr inbounds [10 x i8*], [10 x i8*]* %argv, i32 0, i64 %idxprom12
  store i8* %10, i8** %arrayidx13, align 8
  %12 = load i64, i64* %display_name.addr, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %12, %call14
  br i1 %cmp15, label %if.end.24, label %if.then.16

if.then.16:                                       ; preds = %for.end
  %13 = load i32, i32* %argc, align 4
  %inc17 = add nsw i32 %13, 1
  store i32 %inc17, i32* %argc, align 4
  %idxprom18 = sext i32 %13 to i64
  %arrayidx19 = getelementptr inbounds [10 x i8*], [10 x i8*]* %argv, i32 0, i64 %idxprom18
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @x_term_init.display_opt, i32 0, i32 0), i8** %arrayidx19, align 8
  %14 = load i64, i64* %display_name.addr, align 8
  %call20 = call i8* @SSDATA(i64 %14)
  %15 = load i32, i32* %argc, align 4
  %inc21 = add nsw i32 %15, 1
  store i32 %inc21, i32* %argc, align 4
  %idxprom22 = sext i32 %15 to i64
  %arrayidx23 = getelementptr inbounds [10 x i8*], [10 x i8*]* %argv, i32 0, i64 %idxprom22
  store i8* %call20, i8** %arrayidx23, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.16, %for.end
  %16 = load i32, i32* %argc, align 4
  %inc25 = add nsw i32 %16, 1
  store i32 %inc25, i32* %argc, align 4
  %idxprom26 = sext i32 %16 to i64
  %arrayidx27 = getelementptr inbounds [10 x i8*], [10 x i8*]* %argv, i32 0, i64 %idxprom26
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @x_term_init.name_opt, i32 0, i32 0), i8** %arrayidx27, align 8
  %17 = load i8*, i8** %resource_name.addr, align 8
  %18 = load i32, i32* %argc, align 4
  %inc28 = add nsw i32 %18, 1
  store i32 %inc28, i32* %argc, align 4
  %idxprom29 = sext i32 %18 to i64
  %arrayidx30 = getelementptr inbounds [10 x i8*], [10 x i8*]* %argv, i32 0, i64 %idxprom29
  store i8* %17, i8** %arrayidx30, align 8
  %call31 = call i8* @XSetLocaleModifiers(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i32 0, i32 0))
  %call32 = call i32 @g_log_set_handler(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 19, void (i8*, i32, i8*, i8*)* @my_log_handler, i8* null)
  store i32 %call32, i32* %id, align 4
  call void @gdk_window_add_filter(%struct._GdkDrawable* null, i32 (i8*, %union._GdkEvent*, i8*)* @event_handler_gdk, i8* null)
  call void @fixup_locale()
  call void @unrequest_sigio()
  call void @gtk_init(i32* %argc, i8*** %argv2)
  call void @request_sigio()
  call void @fixup_locale()
  %19 = load i32, i32* %id, align 4
  call void @g_log_remove_handler(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %19)
  call void @xg_initialize()
  %20 = load %struct._XDisplay*, %struct._XDisplay** @gdk_display, align 8
  store %struct._XDisplay* %20, %struct._XDisplay** %dpy, align 8
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i32 0, i32 0), i8** %file, align 8
  %21 = load i8*, i8** %file, align 8
  %call33 = call i64 @build_string(i8* %21)
  store i64 %call33, i64* %s, align 8
  %22 = load i64, i64* %s, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  %call35 = call i64 @Fexpand_file_name(i64 %22, i64 %call34)
  store i64 %call35, i64* %abs_file, align 8
  %23 = load i64, i64* %abs_file, align 8
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp37 = icmp eq i64 %23, %call36
  br i1 %cmp37, label %if.end.43, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.24
  %24 = load i64, i64* %abs_file, align 8
  %call38 = call i64 @Ffile_readable_p(i64 %24)
  %call39 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp40 = icmp eq i64 %call38, %call39
  br i1 %cmp40, label %if.end.43, label %if.then.41

if.then.41:                                       ; preds = %land.lhs.true
  %25 = load i64, i64* %abs_file, align 8
  %call42 = call i8* @SSDATA(i64 %25)
  call void @gtk_rc_parse(i8* %call42)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.41, %land.lhs.true, %if.end.24
  %call44 = call i32 (%struct._XDisplay*, %struct.XErrorEvent*)* @XSetErrorHandler(i32 (%struct._XDisplay*, %struct.XErrorEvent*)* @x_error_handler)
  %call45 = call i32 (%struct._XDisplay*)* @XSetIOErrorHandler(i32 (%struct._XDisplay*)* @x_io_error_quitter)
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.43, %if.then.6
  %26 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %cmp47 = icmp eq %struct._XDisplay* %26, null
  br i1 %cmp47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.end.46
  call void @unblock_input()
  store %struct.x_display_info* null, %struct.x_display_info** %retval
  br label %return

if.end.49:                                        ; preds = %if.end.46
  %27 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call50 = call %struct.xcb_connection_t* @XGetXCBConnection(%struct._XDisplay* %27)
  store %struct.xcb_connection_t* %call50, %struct.xcb_connection_t** %xcb_conn, align 8
  %28 = load %struct.xcb_connection_t*, %struct.xcb_connection_t** %xcb_conn, align 8
  %cmp51 = icmp eq %struct.xcb_connection_t* %28, null
  br i1 %cmp51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.49
  %29 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  call void @xg_display_close(%struct._XDisplay* %29)
  call void @unblock_input()
  store %struct.x_display_info* null, %struct.x_display_info** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %call54 = call noalias i8* @xzalloc(i64 1016)
  %30 = bitcast i8* %call54 to %struct.x_display_info*
  store %struct.x_display_info* %30, %struct.x_display_info** %dpyinfo, align 8
  %31 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call55 = call %struct.terminal* @x_create_terminal(%struct.x_display_info* %31)
  store %struct.terminal* %call55, %struct.terminal** %terminal, align 8
  %32 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  store %struct.x_display_info* %32, %struct.x_display_info** %share, align 8
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.64, %if.end.53
  %33 = load %struct.x_display_info*, %struct.x_display_info** %share, align 8
  %tobool57 = icmp ne %struct.x_display_info* %33, null
  br i1 %tobool57, label %for.body.58, label %for.end.65

for.body.58:                                      ; preds = %for.cond.56
  %34 = load %struct.x_display_info*, %struct.x_display_info** %share, align 8
  %name_list_element = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %34, i32 0, i32 4
  %35 = load i64, i64* %name_list_element, align 8
  %sub = sub nsw i64 %35, 3
  %36 = inttoptr i64 %sub to i8*
  %37 = bitcast i8* %36 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %37, i32 0, i32 0
  %38 = load i64, i64* %car, align 8
  %call59 = call i8* @SSDATA(i64 %38)
  %39 = load i64, i64* %display_name.addr, align 8
  %call60 = call i8* @SSDATA(i64 %39)
  %call61 = call zeroext i1 @same_x_server(i8* %call59, i8* %call60)
  br i1 %call61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %for.body.58
  br label %for.end.65

if.end.63:                                        ; preds = %for.body.58
  br label %for.inc.64

for.inc.64:                                       ; preds = %if.end.63
  %40 = load %struct.x_display_info*, %struct.x_display_info** %share, align 8
  %next = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %40, i32 0, i32 0
  %41 = load %struct.x_display_info*, %struct.x_display_info** %next, align 8
  store %struct.x_display_info* %41, %struct.x_display_info** %share, align 8
  br label %for.cond.56

for.end.65:                                       ; preds = %if.then.62, %for.cond.56
  %42 = load %struct.x_display_info*, %struct.x_display_info** %share, align 8
  %tobool66 = icmp ne %struct.x_display_info* %42, null
  br i1 %tobool66, label %if.then.67, label %if.else.70

if.then.67:                                       ; preds = %for.end.65
  %43 = load %struct.x_display_info*, %struct.x_display_info** %share, align 8
  %terminal68 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 1
  %44 = load %struct.terminal*, %struct.terminal** %terminal68, align 8
  %kboard = getelementptr inbounds %struct.terminal, %struct.terminal* %44, i32 0, i32 10
  %45 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %46 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard69 = getelementptr inbounds %struct.terminal, %struct.terminal* %46, i32 0, i32 10
  store %struct.kboard* %45, %struct.kboard** %kboard69, align 8
  br label %if.end.91

if.else.70:                                       ; preds = %for.end.65
  %call71 = call i64 @builtin_lisp_symbol(i32 1045)
  %call72 = call %struct.kboard* @allocate_kboard(i64 %call71)
  %47 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard73 = getelementptr inbounds %struct.terminal, %struct.terminal* %47, i32 0, i32 10
  store %struct.kboard* %call72, %struct.kboard** %kboard73, align 8
  %call74 = call i64 @builtin_lisp_symbol(i32 998)
  %sub75 = sub nsw i64 %call74, 0
  %add.ptr = getelementptr inbounds i8, i8* bitcast ([1074 x %struct.Lisp_Symbol]* @lispsym to i8*), i64 %sub75
  %48 = bitcast i8* %add.ptr to %struct.Lisp_Symbol*
  %function = getelementptr inbounds %struct.Lisp_Symbol, %struct.Lisp_Symbol* %48, i32 0, i32 3
  %49 = load i64, i64* %function, align 8
  %call76 = call i64 @builtin_lisp_symbol(i32 957)
  %cmp77 = icmp eq i64 %49, %call76
  br i1 %cmp77, label %if.end.86, label %if.then.78

if.then.78:                                       ; preds = %if.else.70
  %50 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %51 = bitcast %struct._XDisplay* %50 to %struct.anon.12*
  %vendor79 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %51, i32 0, i32 6
  %52 = load i8*, i8** %vendor79, align 8
  store i8* %52, i8** %vendor, align 8
  %53 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %next_terminal = getelementptr inbounds %struct.terminal, %struct.terminal* %53, i32 0, i32 5
  %54 = load %struct.terminal*, %struct.terminal** %next_terminal, align 8
  store %struct.terminal* %54, %struct.terminal** @terminal_list, align 8
  call void @unblock_input()
  %55 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard80 = getelementptr inbounds %struct.terminal, %struct.terminal* %55, i32 0, i32 10
  %56 = load %struct.kboard*, %struct.kboard** %kboard80, align 8
  %call81 = call i64 @builtin_lisp_symbol(i32 998)
  %57 = load i8*, i8** %vendor, align 8
  %tobool82 = icmp ne i8* %57, null
  br i1 %tobool82, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.78
  %58 = load i8*, i8** %vendor, align 8
  %call83 = call i64 @build_string(i8* %58)
  br label %cond.end

cond.false:                                       ; preds = %if.then.78
  %59 = load i64, i64* @empty_unibyte_string, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call83, %cond.true ], [ %59, %cond.false ]
  %call84 = call i64 @call1(i64 %call81, i64 %cond)
  call void @kset_system_key_alist(%struct.kboard* %56, i64 %call84)
  call void @block_input()
  %60 = load %struct.terminal*, %struct.terminal** @terminal_list, align 8
  %61 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %next_terminal85 = getelementptr inbounds %struct.terminal, %struct.terminal* %61, i32 0, i32 5
  store %struct.terminal* %60, %struct.terminal** %next_terminal85, align 8
  %62 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  store %struct.terminal* %62, %struct.terminal** @terminal_list, align 8
  br label %if.end.86

if.end.86:                                        ; preds = %cond.end, %if.else.70
  %63 = load %struct.kboard*, %struct.kboard** @current_kboard, align 8
  %64 = load %struct.kboard*, %struct.kboard** @initial_kboard, align 8
  %cmp87 = icmp eq %struct.kboard* %63, %64
  br i1 %cmp87, label %if.then.88, label %if.end.90

if.then.88:                                       ; preds = %if.end.86
  %65 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard89 = getelementptr inbounds %struct.terminal, %struct.terminal* %65, i32 0, i32 10
  %66 = load %struct.kboard*, %struct.kboard** %kboard89, align 8
  store %struct.kboard* %66, %struct.kboard** @current_kboard, align 8
  br label %if.end.90

if.end.90:                                        ; preds = %if.then.88, %if.end.86
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.then.67
  %67 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard92 = getelementptr inbounds %struct.terminal, %struct.terminal* %67, i32 0, i32 10
  %68 = load %struct.kboard*, %struct.kboard** %kboard92, align 8
  %reference_count = getelementptr inbounds %struct.kboard, %struct.kboard* %68, i32 0, i32 21
  %69 = load i32, i32* %reference_count, align 4
  %inc93 = add nsw i32 %69, 1
  store i32 %inc93, i32* %reference_count, align 4
  %70 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  %71 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %next94 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %71, i32 0, i32 0
  store %struct.x_display_info* %70, %struct.x_display_info** %next94, align 8
  %72 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  store %struct.x_display_info* %72, %struct.x_display_info** @x_display_list, align 8
  %73 = load i64, i64* %display_name.addr, align 8
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  %call96 = call i64 @Fcons(i64 %73, i64 %call95)
  %74 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %name_list_element97 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %74, i32 0, i32 4
  store i64 %call96, i64* %name_list_element97, align 8
  %75 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %76 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %76, i32 0, i32 2
  store %struct._XDisplay* %75, %struct._XDisplay** %display, align 8
  %77 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display98 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %77, i32 0, i32 2
  %78 = load %struct._XDisplay*, %struct._XDisplay** %display98, align 8
  %79 = bitcast %struct._XDisplay* %78 to %struct.anon.12*
  %fd = getelementptr inbounds %struct.anon.12, %struct.anon.12* %79, i32 0, i32 2
  %80 = load i32, i32* %fd, align 4
  %81 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %81, i32 0, i32 3
  store i32 %80, i32* %connection, align 4
  %82 = load %struct.xcb_connection_t*, %struct.xcb_connection_t** %xcb_conn, align 8
  %83 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xcb_connection = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %83, i32 0, i32 128
  store %struct.xcb_connection_t* %82, %struct.xcb_connection_t** %xcb_connection, align 8
  %84 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %smallest_font_height = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %84, i32 0, i32 23
  store i32 1, i32* %smallest_font_height, align 4
  %85 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %smallest_char_width = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %85, i32 0, i32 22
  store i32 1, i32* %smallest_char_width, align 4
  %86 = load i64, i64* %display_name.addr, align 8
  %call99 = call noalias i8* @xlispstrdup(i64 %86)
  %87 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %name = getelementptr inbounds %struct.terminal, %struct.terminal* %87, i32 0, i32 9
  store i8* %call99, i8** %name, align 8
  %call100 = call i64 @Fsystem_name()
  store i64 %call100, i64* %system_name, align 8
  br i1 false, label %cond.true.101, label %cond.false.732

cond.true.101:                                    ; preds = %if.end.91
  br i1 false, label %cond.true.102, label %cond.false.457

cond.true.102:                                    ; preds = %cond.true.101
  %88 = load i64, i64* %system_name, align 8
  %call103 = call i64 @SBYTES(i64 %88)
  %add = add nsw i64 %call103, 2
  %conv = trunc i64 %add to i8
  %conv104 = sext i8 %conv to i32
  %mul = mul nsw i32 0, %conv104
  %89 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call105 = call i64 @SBYTES(i64 %89)
  %conv106 = trunc i64 %call105 to i8
  %conv107 = sext i8 %conv106 to i32
  %add108 = add nsw i32 %mul, %conv107
  %mul109 = mul nsw i32 0, %add108
  %sub110 = sub nsw i32 %mul109, 1
  %cmp111 = icmp slt i32 %sub110, 0
  br i1 %cmp111, label %cond.true.113, label %cond.false.143

cond.true.113:                                    ; preds = %cond.true.102
  %90 = load i64, i64* %system_name, align 8
  %call114 = call i64 @SBYTES(i64 %90)
  %add115 = add nsw i64 %call114, 2
  %conv116 = trunc i64 %add115 to i8
  %conv117 = sext i8 %conv116 to i32
  %mul118 = mul nsw i32 0, %conv117
  %91 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call119 = call i64 @SBYTES(i64 %91)
  %conv120 = trunc i64 %call119 to i8
  %conv121 = sext i8 %conv120 to i32
  %add122 = add nsw i32 %mul118, %conv121
  %mul123 = mul nsw i32 0, %add122
  %add124 = add nsw i32 %mul123, 0
  %neg = xor i32 %add124, -1
  %cmp125 = icmp eq i32 %neg, -1
  %conv126 = zext i1 %cmp125 to i32
  %sub127 = sub nsw i32 0, %conv126
  %92 = load i64, i64* %system_name, align 8
  %call128 = call i64 @SBYTES(i64 %92)
  %add129 = add nsw i64 %call128, 2
  %conv130 = trunc i64 %add129 to i8
  %conv131 = sext i8 %conv130 to i32
  %mul132 = mul nsw i32 0, %conv131
  %93 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call133 = call i64 @SBYTES(i64 %93)
  %conv134 = trunc i64 %call133 to i8
  %conv135 = sext i8 %conv134 to i32
  %add136 = add nsw i32 %mul132, %conv135
  %mul137 = mul nsw i32 0, %add136
  %add138 = add nsw i32 %mul137, 1
  %shl = shl i32 %add138, 30
  %sub139 = sub nsw i32 %shl, 1
  %mul140 = mul nsw i32 %sub139, 2
  %add141 = add nsw i32 %mul140, 1
  %sub142 = sub nsw i32 %sub127, %add141
  br label %cond.end.155

cond.false.143:                                   ; preds = %cond.true.102
  %94 = load i64, i64* %system_name, align 8
  %call144 = call i64 @SBYTES(i64 %94)
  %add145 = add nsw i64 %call144, 2
  %conv146 = trunc i64 %add145 to i8
  %conv147 = sext i8 %conv146 to i32
  %mul148 = mul nsw i32 0, %conv147
  %95 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call149 = call i64 @SBYTES(i64 %95)
  %conv150 = trunc i64 %call149 to i8
  %conv151 = sext i8 %conv150 to i32
  %add152 = add nsw i32 %mul148, %conv151
  %mul153 = mul nsw i32 0, %add152
  %add154 = add nsw i32 %mul153, 0
  br label %cond.end.155

cond.end.155:                                     ; preds = %cond.false.143, %cond.true.113
  %cond156 = phi i32 [ %sub142, %cond.true.113 ], [ %add154, %cond.false.143 ]
  %cmp157 = icmp slt i32 %cond156, 0
  br i1 %cmp157, label %cond.true.159, label %cond.false.290

cond.true.159:                                    ; preds = %cond.end.155
  %96 = load i64, i64* %system_name, align 8
  %call160 = call i64 @SBYTES(i64 %96)
  %add161 = add nsw i64 %call160, 2
  %conv162 = trunc i64 %add161 to i8
  %conv163 = sext i8 %conv162 to i32
  %cmp164 = icmp slt i32 %conv163, 0
  br i1 %cmp164, label %cond.true.166, label %cond.false.236

cond.true.166:                                    ; preds = %cond.true.159
  %97 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call167 = call i64 @SBYTES(i64 %97)
  %conv168 = trunc i64 %call167 to i8
  %conv169 = sext i8 %conv168 to i32
  %98 = load i64, i64* %system_name, align 8
  %call170 = call i64 @SBYTES(i64 %98)
  %add171 = add nsw i64 %call170, 2
  %conv172 = trunc i64 %add171 to i8
  %conv173 = sext i8 %conv172 to i32
  %mul174 = mul nsw i32 0, %conv173
  %99 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call175 = call i64 @SBYTES(i64 %99)
  %conv176 = trunc i64 %call175 to i8
  %conv177 = sext i8 %conv176 to i32
  %add178 = add nsw i32 %mul174, %conv177
  %mul179 = mul nsw i32 0, %add178
  %sub180 = sub nsw i32 %mul179, 1
  %cmp181 = icmp slt i32 %sub180, 0
  br i1 %cmp181, label %cond.true.183, label %cond.false.215

cond.true.183:                                    ; preds = %cond.true.166
  %100 = load i64, i64* %system_name, align 8
  %call184 = call i64 @SBYTES(i64 %100)
  %add185 = add nsw i64 %call184, 2
  %conv186 = trunc i64 %add185 to i8
  %conv187 = sext i8 %conv186 to i32
  %mul188 = mul nsw i32 0, %conv187
  %101 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call189 = call i64 @SBYTES(i64 %101)
  %conv190 = trunc i64 %call189 to i8
  %conv191 = sext i8 %conv190 to i32
  %add192 = add nsw i32 %mul188, %conv191
  %mul193 = mul nsw i32 0, %add192
  %add194 = add nsw i32 %mul193, 0
  %neg195 = xor i32 %add194, -1
  %cmp196 = icmp eq i32 %neg195, -1
  %conv197 = zext i1 %cmp196 to i32
  %sub198 = sub nsw i32 0, %conv197
  %102 = load i64, i64* %system_name, align 8
  %call199 = call i64 @SBYTES(i64 %102)
  %add200 = add nsw i64 %call199, 2
  %conv201 = trunc i64 %add200 to i8
  %conv202 = sext i8 %conv201 to i32
  %mul203 = mul nsw i32 0, %conv202
  %103 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call204 = call i64 @SBYTES(i64 %103)
  %conv205 = trunc i64 %call204 to i8
  %conv206 = sext i8 %conv205 to i32
  %add207 = add nsw i32 %mul203, %conv206
  %mul208 = mul nsw i32 0, %add207
  %add209 = add nsw i32 %mul208, 1
  %shl210 = shl i32 %add209, 30
  %sub211 = sub nsw i32 %shl210, 1
  %mul212 = mul nsw i32 %sub211, 2
  %add213 = add nsw i32 %mul212, 1
  %sub214 = sub nsw i32 %sub198, %add213
  br label %cond.end.227

cond.false.215:                                   ; preds = %cond.true.166
  %104 = load i64, i64* %system_name, align 8
  %call216 = call i64 @SBYTES(i64 %104)
  %add217 = add nsw i64 %call216, 2
  %conv218 = trunc i64 %add217 to i8
  %conv219 = sext i8 %conv218 to i32
  %mul220 = mul nsw i32 0, %conv219
  %105 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call221 = call i64 @SBYTES(i64 %105)
  %conv222 = trunc i64 %call221 to i8
  %conv223 = sext i8 %conv222 to i32
  %add224 = add nsw i32 %mul220, %conv223
  %mul225 = mul nsw i32 0, %add224
  %add226 = add nsw i32 %mul225, 0
  br label %cond.end.227

cond.end.227:                                     ; preds = %cond.false.215, %cond.true.183
  %cond228 = phi i32 [ %sub214, %cond.true.183 ], [ %add226, %cond.false.215 ]
  %106 = load i64, i64* %system_name, align 8
  %call229 = call i64 @SBYTES(i64 %106)
  %add230 = add nsw i64 %call229, 2
  %conv231 = trunc i64 %add230 to i8
  %conv232 = sext i8 %conv231 to i32
  %sub233 = sub nsw i32 %cond228, %conv232
  %cmp234 = icmp slt i32 %conv169, %sub233
  br i1 %cmp234, label %cond.true.381, label %lor.lhs.false

cond.false.236:                                   ; preds = %cond.true.159
  %107 = load i64, i64* %system_name, align 8
  %call237 = call i64 @SBYTES(i64 %107)
  %add238 = add nsw i64 %call237, 2
  %conv239 = trunc i64 %add238 to i8
  %conv240 = sext i8 %conv239 to i32
  %mul241 = mul nsw i32 0, %conv240
  %108 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call242 = call i64 @SBYTES(i64 %108)
  %conv243 = trunc i64 %call242 to i8
  %conv244 = sext i8 %conv243 to i32
  %add245 = add nsw i32 %mul241, %conv244
  %mul246 = mul nsw i32 0, %add245
  %sub247 = sub nsw i32 %mul246, 1
  %cmp248 = icmp slt i32 %sub247, 0
  br i1 %cmp248, label %cond.true.250, label %cond.false.266

cond.true.250:                                    ; preds = %cond.false.236
  %109 = load i64, i64* %system_name, align 8
  %call251 = call i64 @SBYTES(i64 %109)
  %add252 = add nsw i64 %call251, 2
  %conv253 = trunc i64 %add252 to i8
  %conv254 = sext i8 %conv253 to i32
  %mul255 = mul nsw i32 0, %conv254
  %110 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call256 = call i64 @SBYTES(i64 %110)
  %conv257 = trunc i64 %call256 to i8
  %conv258 = sext i8 %conv257 to i32
  %add259 = add nsw i32 %mul255, %conv258
  %mul260 = mul nsw i32 0, %add259
  %add261 = add nsw i32 %mul260, 1
  %shl262 = shl i32 %add261, 30
  %sub263 = sub nsw i32 %shl262, 1
  %mul264 = mul nsw i32 %sub263, 2
  %add265 = add nsw i32 %mul264, 1
  br label %cond.end.278

cond.false.266:                                   ; preds = %cond.false.236
  %111 = load i64, i64* %system_name, align 8
  %call267 = call i64 @SBYTES(i64 %111)
  %add268 = add nsw i64 %call267, 2
  %conv269 = trunc i64 %add268 to i8
  %conv270 = sext i8 %conv269 to i32
  %mul271 = mul nsw i32 0, %conv270
  %112 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call272 = call i64 @SBYTES(i64 %112)
  %conv273 = trunc i64 %call272 to i8
  %conv274 = sext i8 %conv273 to i32
  %add275 = add nsw i32 %mul271, %conv274
  %mul276 = mul nsw i32 0, %add275
  %sub277 = sub nsw i32 %mul276, 1
  br label %cond.end.278

cond.end.278:                                     ; preds = %cond.false.266, %cond.true.250
  %cond279 = phi i32 [ %add265, %cond.true.250 ], [ %sub277, %cond.false.266 ]
  %113 = load i64, i64* %system_name, align 8
  %call280 = call i64 @SBYTES(i64 %113)
  %add281 = add nsw i64 %call280, 2
  %conv282 = trunc i64 %add281 to i8
  %conv283 = sext i8 %conv282 to i32
  %sub284 = sub nsw i32 %cond279, %conv283
  %114 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call285 = call i64 @SBYTES(i64 %114)
  %conv286 = trunc i64 %call285 to i8
  %conv287 = sext i8 %conv286 to i32
  %cmp288 = icmp slt i32 %sub284, %conv287
  br i1 %cmp288, label %cond.true.381, label %lor.lhs.false

cond.false.290:                                   ; preds = %cond.end.155
  %115 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call291 = call i64 @SBYTES(i64 %115)
  %conv292 = trunc i64 %call291 to i8
  %conv293 = sext i8 %conv292 to i32
  %cmp294 = icmp slt i32 %conv293, 0
  br i1 %cmp294, label %cond.true.296, label %cond.false.311

cond.true.296:                                    ; preds = %cond.false.290
  %116 = load i64, i64* %system_name, align 8
  %call297 = call i64 @SBYTES(i64 %116)
  %add298 = add nsw i64 %call297, 2
  %conv299 = trunc i64 %add298 to i8
  %conv300 = sext i8 %conv299 to i32
  %117 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call301 = call i64 @SBYTES(i64 %117)
  %conv302 = trunc i64 %call301 to i8
  %conv303 = sext i8 %conv302 to i32
  %118 = load i64, i64* %system_name, align 8
  %call304 = call i64 @SBYTES(i64 %118)
  %add305 = add nsw i64 %call304, 2
  %conv306 = trunc i64 %add305 to i8
  %conv307 = sext i8 %conv306 to i32
  %add308 = add nsw i32 %conv303, %conv307
  %cmp309 = icmp sle i32 %conv300, %add308
  br i1 %cmp309, label %cond.true.381, label %lor.lhs.false

cond.false.311:                                   ; preds = %cond.false.290
  %119 = load i64, i64* %system_name, align 8
  %call312 = call i64 @SBYTES(i64 %119)
  %add313 = add nsw i64 %call312, 2
  %conv314 = trunc i64 %add313 to i8
  %conv315 = sext i8 %conv314 to i32
  %cmp316 = icmp slt i32 %conv315, 0
  br i1 %cmp316, label %cond.true.318, label %cond.false.332

cond.true.318:                                    ; preds = %cond.false.311
  %120 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call319 = call i64 @SBYTES(i64 %120)
  %conv320 = trunc i64 %call319 to i8
  %conv321 = sext i8 %conv320 to i32
  %121 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call322 = call i64 @SBYTES(i64 %121)
  %conv323 = trunc i64 %call322 to i8
  %conv324 = sext i8 %conv323 to i32
  %122 = load i64, i64* %system_name, align 8
  %call325 = call i64 @SBYTES(i64 %122)
  %add326 = add nsw i64 %call325, 2
  %conv327 = trunc i64 %add326 to i8
  %conv328 = sext i8 %conv327 to i32
  %add329 = add nsw i32 %conv324, %conv328
  %cmp330 = icmp sle i32 %conv321, %add329
  br i1 %cmp330, label %cond.true.381, label %lor.lhs.false

cond.false.332:                                   ; preds = %cond.false.311
  %123 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call333 = call i64 @SBYTES(i64 %123)
  %conv334 = trunc i64 %call333 to i8
  %conv335 = sext i8 %conv334 to i32
  %124 = load i64, i64* %system_name, align 8
  %call336 = call i64 @SBYTES(i64 %124)
  %add337 = add nsw i64 %call336, 2
  %conv338 = trunc i64 %add337 to i8
  %conv339 = sext i8 %conv338 to i32
  %add340 = add nsw i32 %conv335, %conv339
  %125 = load i64, i64* %system_name, align 8
  %call341 = call i64 @SBYTES(i64 %125)
  %add342 = add nsw i64 %call341, 2
  %conv343 = trunc i64 %add342 to i8
  %conv344 = sext i8 %conv343 to i32
  %cmp345 = icmp slt i32 %add340, %conv344
  br i1 %cmp345, label %cond.true.381, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.332, %cond.true.318, %cond.true.296, %cond.end.278, %cond.end.227
  %126 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call347 = call i64 @SBYTES(i64 %126)
  %conv348 = trunc i64 %call347 to i8
  %conv349 = sext i8 %conv348 to i32
  %127 = load i64, i64* %system_name, align 8
  %call350 = call i64 @SBYTES(i64 %127)
  %add351 = add nsw i64 %call350, 2
  %conv352 = trunc i64 %add351 to i8
  %conv353 = sext i8 %conv352 to i32
  %add354 = add nsw i32 %conv349, %conv353
  %mul355 = mul nsw i32 0, %add354
  %sub356 = sub nsw i32 %mul355, 1
  %cmp357 = icmp slt i32 %sub356, 0
  br i1 %cmp357, label %land.lhs.true.359, label %lor.lhs.false.370

land.lhs.true.359:                                ; preds = %lor.lhs.false
  %128 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call360 = call i64 @SBYTES(i64 %128)
  %conv361 = trunc i64 %call360 to i8
  %conv362 = sext i8 %conv361 to i32
  %129 = load i64, i64* %system_name, align 8
  %call363 = call i64 @SBYTES(i64 %129)
  %add364 = add nsw i64 %call363, 2
  %conv365 = trunc i64 %add364 to i8
  %conv366 = sext i8 %conv365 to i32
  %add367 = add nsw i32 %conv362, %conv366
  %cmp368 = icmp slt i32 %add367, -128
  br i1 %cmp368, label %cond.true.381, label %lor.lhs.false.370

lor.lhs.false.370:                                ; preds = %land.lhs.true.359, %lor.lhs.false
  %130 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call371 = call i64 @SBYTES(i64 %130)
  %conv372 = trunc i64 %call371 to i8
  %conv373 = sext i8 %conv372 to i32
  %131 = load i64, i64* %system_name, align 8
  %call374 = call i64 @SBYTES(i64 %131)
  %add375 = add nsw i64 %call374, 2
  %conv376 = trunc i64 %add375 to i8
  %conv377 = sext i8 %conv376 to i32
  %add378 = add nsw i32 %conv373, %conv377
  %cmp379 = icmp slt i32 127, %add378
  br i1 %cmp379, label %cond.true.381, label %cond.false.419

cond.true.381:                                    ; preds = %lor.lhs.false.370, %land.lhs.true.359, %cond.false.332, %cond.true.318, %cond.true.296, %cond.end.278, %cond.end.227
  %132 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call382 = call i64 @SBYTES(i64 %132)
  %conv383 = trunc i64 %call382 to i8
  %conv384 = zext i8 %conv383 to i32
  %133 = load i64, i64* %system_name, align 8
  %call385 = call i64 @SBYTES(i64 %133)
  %add386 = add nsw i64 %call385, 2
  %conv387 = trunc i64 %add386 to i8
  %conv388 = zext i8 %conv387 to i32
  %add389 = add nsw i32 %conv384, %conv388
  %cmp390 = icmp sle i32 %add389, 127
  br i1 %cmp390, label %cond.true.392, label %cond.false.403

cond.true.392:                                    ; preds = %cond.true.381
  %134 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call393 = call i64 @SBYTES(i64 %134)
  %conv394 = trunc i64 %call393 to i8
  %conv395 = zext i8 %conv394 to i32
  %135 = load i64, i64* %system_name, align 8
  %call396 = call i64 @SBYTES(i64 %135)
  %add397 = add nsw i64 %call396, 2
  %conv398 = trunc i64 %add397 to i8
  %conv399 = zext i8 %conv398 to i32
  %add400 = add nsw i32 %conv395, %conv399
  %conv401 = trunc i32 %add400 to i8
  %conv402 = sext i8 %conv401 to i32
  br label %cond.end.416

cond.false.403:                                   ; preds = %cond.true.381
  %136 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call404 = call i64 @SBYTES(i64 %136)
  %conv405 = trunc i64 %call404 to i8
  %conv406 = zext i8 %conv405 to i32
  %137 = load i64, i64* %system_name, align 8
  %call407 = call i64 @SBYTES(i64 %137)
  %add408 = add nsw i64 %call407, 2
  %conv409 = trunc i64 %add408 to i8
  %conv410 = zext i8 %conv409 to i32
  %add411 = add nsw i32 %conv406, %conv410
  %sub412 = sub nsw i32 %add411, -128
  %conv413 = trunc i32 %sub412 to i8
  %conv414 = sext i8 %conv413 to i32
  %add415 = add nsw i32 %conv414, -128
  br label %cond.end.416

cond.end.416:                                     ; preds = %cond.false.403, %cond.true.392
  %cond417 = phi i32 [ %conv402, %cond.true.392 ], [ %add415, %cond.false.403 ]
  %conv418 = sext i32 %cond417 to i64
  store i64 %conv418, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.419:                                   ; preds = %lor.lhs.false.370
  %138 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call420 = call i64 @SBYTES(i64 %138)
  %conv421 = trunc i64 %call420 to i8
  %conv422 = zext i8 %conv421 to i32
  %139 = load i64, i64* %system_name, align 8
  %call423 = call i64 @SBYTES(i64 %139)
  %add424 = add nsw i64 %call423, 2
  %conv425 = trunc i64 %add424 to i8
  %conv426 = zext i8 %conv425 to i32
  %add427 = add nsw i32 %conv422, %conv426
  %cmp428 = icmp sle i32 %add427, 127
  br i1 %cmp428, label %cond.true.430, label %cond.false.441

cond.true.430:                                    ; preds = %cond.false.419
  %140 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call431 = call i64 @SBYTES(i64 %140)
  %conv432 = trunc i64 %call431 to i8
  %conv433 = zext i8 %conv432 to i32
  %141 = load i64, i64* %system_name, align 8
  %call434 = call i64 @SBYTES(i64 %141)
  %add435 = add nsw i64 %call434, 2
  %conv436 = trunc i64 %add435 to i8
  %conv437 = zext i8 %conv436 to i32
  %add438 = add nsw i32 %conv433, %conv437
  %conv439 = trunc i32 %add438 to i8
  %conv440 = sext i8 %conv439 to i32
  br label %cond.end.454

cond.false.441:                                   ; preds = %cond.false.419
  %142 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call442 = call i64 @SBYTES(i64 %142)
  %conv443 = trunc i64 %call442 to i8
  %conv444 = zext i8 %conv443 to i32
  %143 = load i64, i64* %system_name, align 8
  %call445 = call i64 @SBYTES(i64 %143)
  %add446 = add nsw i64 %call445, 2
  %conv447 = trunc i64 %add446 to i8
  %conv448 = zext i8 %conv447 to i32
  %add449 = add nsw i32 %conv444, %conv448
  %sub450 = sub nsw i32 %add449, -128
  %conv451 = trunc i32 %sub450 to i8
  %conv452 = sext i8 %conv451 to i32
  %add453 = add nsw i32 %conv452, -128
  br label %cond.end.454

cond.end.454:                                     ; preds = %cond.false.441, %cond.true.430
  %cond455 = phi i32 [ %conv440, %cond.true.430 ], [ %add453, %cond.false.441 ]
  %conv456 = sext i32 %cond455 to i64
  store i64 %conv456, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.457:                                   ; preds = %cond.true.101
  %144 = load i64, i64* %system_name, align 8
  %call458 = call i64 @SBYTES(i64 %144)
  %add459 = add nsw i64 %call458, 2
  %mul460 = mul nsw i64 0, %add459
  %145 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call461 = call i64 @SBYTES(i64 %145)
  %add462 = add nsw i64 %mul460, %call461
  %mul463 = mul nsw i64 0, %add462
  %sub464 = sub nsw i64 %mul463, 1
  %cmp465 = icmp slt i64 %sub464, 0
  br i1 %cmp465, label %cond.true.467, label %cond.false.492

cond.true.467:                                    ; preds = %cond.false.457
  %146 = load i64, i64* %system_name, align 8
  %call468 = call i64 @SBYTES(i64 %146)
  %add469 = add nsw i64 %call468, 2
  %mul470 = mul nsw i64 0, %add469
  %147 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call471 = call i64 @SBYTES(i64 %147)
  %add472 = add nsw i64 %mul470, %call471
  %mul473 = mul nsw i64 0, %add472
  %add474 = add nsw i64 %mul473, 0
  %neg475 = xor i64 %add474, -1
  %cmp476 = icmp eq i64 %neg475, -1
  %conv477 = zext i1 %cmp476 to i32
  %sub478 = sub nsw i32 0, %conv477
  %conv479 = sext i32 %sub478 to i64
  %148 = load i64, i64* %system_name, align 8
  %call480 = call i64 @SBYTES(i64 %148)
  %add481 = add nsw i64 %call480, 2
  %mul482 = mul nsw i64 0, %add481
  %149 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call483 = call i64 @SBYTES(i64 %149)
  %add484 = add nsw i64 %mul482, %call483
  %mul485 = mul nsw i64 0, %add484
  %add486 = add nsw i64 %mul485, 1
  %shl487 = shl i64 %add486, 62
  %sub488 = sub nsw i64 %shl487, 1
  %mul489 = mul nsw i64 %sub488, 2
  %add490 = add nsw i64 %mul489, 1
  %sub491 = sub nsw i64 %conv479, %add490
  br label %cond.end.500

cond.false.492:                                   ; preds = %cond.false.457
  %150 = load i64, i64* %system_name, align 8
  %call493 = call i64 @SBYTES(i64 %150)
  %add494 = add nsw i64 %call493, 2
  %mul495 = mul nsw i64 0, %add494
  %151 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call496 = call i64 @SBYTES(i64 %151)
  %add497 = add nsw i64 %mul495, %call496
  %mul498 = mul nsw i64 0, %add497
  %add499 = add nsw i64 %mul498, 0
  br label %cond.end.500

cond.end.500:                                     ; preds = %cond.false.492, %cond.true.467
  %cond501 = phi i64 [ %sub491, %cond.true.467 ], [ %add499, %cond.false.492 ]
  %cmp502 = icmp slt i64 %cond501, 0
  br i1 %cmp502, label %cond.true.504, label %cond.false.598

cond.true.504:                                    ; preds = %cond.end.500
  %152 = load i64, i64* %system_name, align 8
  %call505 = call i64 @SBYTES(i64 %152)
  %add506 = add nsw i64 %call505, 2
  %cmp507 = icmp slt i64 %add506, 0
  br i1 %cmp507, label %cond.true.509, label %cond.false.560

cond.true.509:                                    ; preds = %cond.true.504
  %153 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call510 = call i64 @SBYTES(i64 %153)
  %154 = load i64, i64* %system_name, align 8
  %call511 = call i64 @SBYTES(i64 %154)
  %add512 = add nsw i64 %call511, 2
  %mul513 = mul nsw i64 0, %add512
  %155 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call514 = call i64 @SBYTES(i64 %155)
  %add515 = add nsw i64 %mul513, %call514
  %mul516 = mul nsw i64 0, %add515
  %sub517 = sub nsw i64 %mul516, 1
  %cmp518 = icmp slt i64 %sub517, 0
  br i1 %cmp518, label %cond.true.520, label %cond.false.545

cond.true.520:                                    ; preds = %cond.true.509
  %156 = load i64, i64* %system_name, align 8
  %call521 = call i64 @SBYTES(i64 %156)
  %add522 = add nsw i64 %call521, 2
  %mul523 = mul nsw i64 0, %add522
  %157 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call524 = call i64 @SBYTES(i64 %157)
  %add525 = add nsw i64 %mul523, %call524
  %mul526 = mul nsw i64 0, %add525
  %add527 = add nsw i64 %mul526, 0
  %neg528 = xor i64 %add527, -1
  %cmp529 = icmp eq i64 %neg528, -1
  %conv530 = zext i1 %cmp529 to i32
  %sub531 = sub nsw i32 0, %conv530
  %conv532 = sext i32 %sub531 to i64
  %158 = load i64, i64* %system_name, align 8
  %call533 = call i64 @SBYTES(i64 %158)
  %add534 = add nsw i64 %call533, 2
  %mul535 = mul nsw i64 0, %add534
  %159 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call536 = call i64 @SBYTES(i64 %159)
  %add537 = add nsw i64 %mul535, %call536
  %mul538 = mul nsw i64 0, %add537
  %add539 = add nsw i64 %mul538, 1
  %shl540 = shl i64 %add539, 62
  %sub541 = sub nsw i64 %shl540, 1
  %mul542 = mul nsw i64 %sub541, 2
  %add543 = add nsw i64 %mul542, 1
  %sub544 = sub nsw i64 %conv532, %add543
  br label %cond.end.553

cond.false.545:                                   ; preds = %cond.true.509
  %160 = load i64, i64* %system_name, align 8
  %call546 = call i64 @SBYTES(i64 %160)
  %add547 = add nsw i64 %call546, 2
  %mul548 = mul nsw i64 0, %add547
  %161 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call549 = call i64 @SBYTES(i64 %161)
  %add550 = add nsw i64 %mul548, %call549
  %mul551 = mul nsw i64 0, %add550
  %add552 = add nsw i64 %mul551, 0
  br label %cond.end.553

cond.end.553:                                     ; preds = %cond.false.545, %cond.true.520
  %cond554 = phi i64 [ %sub544, %cond.true.520 ], [ %add552, %cond.false.545 ]
  %162 = load i64, i64* %system_name, align 8
  %call555 = call i64 @SBYTES(i64 %162)
  %add556 = add nsw i64 %call555, 2
  %sub557 = sub nsw i64 %cond554, %add556
  %cmp558 = icmp slt i64 %call510, %sub557
  br i1 %cmp558, label %cond.true.656, label %lor.lhs.false.633

cond.false.560:                                   ; preds = %cond.true.504
  %163 = load i64, i64* %system_name, align 8
  %call561 = call i64 @SBYTES(i64 %163)
  %add562 = add nsw i64 %call561, 2
  %mul563 = mul nsw i64 0, %add562
  %164 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call564 = call i64 @SBYTES(i64 %164)
  %add565 = add nsw i64 %mul563, %call564
  %mul566 = mul nsw i64 0, %add565
  %sub567 = sub nsw i64 %mul566, 1
  %cmp568 = icmp slt i64 %sub567, 0
  br i1 %cmp568, label %cond.true.570, label %cond.false.582

cond.true.570:                                    ; preds = %cond.false.560
  %165 = load i64, i64* %system_name, align 8
  %call571 = call i64 @SBYTES(i64 %165)
  %add572 = add nsw i64 %call571, 2
  %mul573 = mul nsw i64 0, %add572
  %166 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call574 = call i64 @SBYTES(i64 %166)
  %add575 = add nsw i64 %mul573, %call574
  %mul576 = mul nsw i64 0, %add575
  %add577 = add nsw i64 %mul576, 1
  %shl578 = shl i64 %add577, 62
  %sub579 = sub nsw i64 %shl578, 1
  %mul580 = mul nsw i64 %sub579, 2
  %add581 = add nsw i64 %mul580, 1
  br label %cond.end.590

cond.false.582:                                   ; preds = %cond.false.560
  %167 = load i64, i64* %system_name, align 8
  %call583 = call i64 @SBYTES(i64 %167)
  %add584 = add nsw i64 %call583, 2
  %mul585 = mul nsw i64 0, %add584
  %168 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call586 = call i64 @SBYTES(i64 %168)
  %add587 = add nsw i64 %mul585, %call586
  %mul588 = mul nsw i64 0, %add587
  %sub589 = sub nsw i64 %mul588, 1
  br label %cond.end.590

cond.end.590:                                     ; preds = %cond.false.582, %cond.true.570
  %cond591 = phi i64 [ %add581, %cond.true.570 ], [ %sub589, %cond.false.582 ]
  %169 = load i64, i64* %system_name, align 8
  %call592 = call i64 @SBYTES(i64 %169)
  %add593 = add nsw i64 %call592, 2
  %sub594 = sub nsw i64 %cond591, %add593
  %170 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call595 = call i64 @SBYTES(i64 %170)
  %cmp596 = icmp slt i64 %sub594, %call595
  br i1 %cmp596, label %cond.true.656, label %lor.lhs.false.633

cond.false.598:                                   ; preds = %cond.end.500
  %171 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call599 = call i64 @SBYTES(i64 %171)
  %cmp600 = icmp slt i64 %call599, 0
  br i1 %cmp600, label %cond.true.602, label %cond.false.611

cond.true.602:                                    ; preds = %cond.false.598
  %172 = load i64, i64* %system_name, align 8
  %call603 = call i64 @SBYTES(i64 %172)
  %add604 = add nsw i64 %call603, 2
  %173 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call605 = call i64 @SBYTES(i64 %173)
  %174 = load i64, i64* %system_name, align 8
  %call606 = call i64 @SBYTES(i64 %174)
  %add607 = add nsw i64 %call606, 2
  %add608 = add nsw i64 %call605, %add607
  %cmp609 = icmp sle i64 %add604, %add608
  br i1 %cmp609, label %cond.true.656, label %lor.lhs.false.633

cond.false.611:                                   ; preds = %cond.false.598
  %175 = load i64, i64* %system_name, align 8
  %call612 = call i64 @SBYTES(i64 %175)
  %add613 = add nsw i64 %call612, 2
  %cmp614 = icmp slt i64 %add613, 0
  br i1 %cmp614, label %cond.true.616, label %cond.false.624

cond.true.616:                                    ; preds = %cond.false.611
  %176 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call617 = call i64 @SBYTES(i64 %176)
  %177 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call618 = call i64 @SBYTES(i64 %177)
  %178 = load i64, i64* %system_name, align 8
  %call619 = call i64 @SBYTES(i64 %178)
  %add620 = add nsw i64 %call619, 2
  %add621 = add nsw i64 %call618, %add620
  %cmp622 = icmp sle i64 %call617, %add621
  br i1 %cmp622, label %cond.true.656, label %lor.lhs.false.633

cond.false.624:                                   ; preds = %cond.false.611
  %179 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call625 = call i64 @SBYTES(i64 %179)
  %180 = load i64, i64* %system_name, align 8
  %call626 = call i64 @SBYTES(i64 %180)
  %add627 = add nsw i64 %call626, 2
  %add628 = add nsw i64 %call625, %add627
  %181 = load i64, i64* %system_name, align 8
  %call629 = call i64 @SBYTES(i64 %181)
  %add630 = add nsw i64 %call629, 2
  %cmp631 = icmp slt i64 %add628, %add630
  br i1 %cmp631, label %cond.true.656, label %lor.lhs.false.633

lor.lhs.false.633:                                ; preds = %cond.false.624, %cond.true.616, %cond.true.602, %cond.end.590, %cond.end.553
  %182 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call634 = call i64 @SBYTES(i64 %182)
  %183 = load i64, i64* %system_name, align 8
  %call635 = call i64 @SBYTES(i64 %183)
  %add636 = add nsw i64 %call635, 2
  %add637 = add nsw i64 %call634, %add636
  %mul638 = mul nsw i64 0, %add637
  %sub639 = sub nsw i64 %mul638, 1
  %cmp640 = icmp slt i64 %sub639, 0
  br i1 %cmp640, label %land.lhs.true.642, label %lor.lhs.false.649

land.lhs.true.642:                                ; preds = %lor.lhs.false.633
  %184 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call643 = call i64 @SBYTES(i64 %184)
  %185 = load i64, i64* %system_name, align 8
  %call644 = call i64 @SBYTES(i64 %185)
  %add645 = add nsw i64 %call644, 2
  %add646 = add nsw i64 %call643, %add645
  %cmp647 = icmp slt i64 %add646, -128
  br i1 %cmp647, label %cond.true.656, label %lor.lhs.false.649

lor.lhs.false.649:                                ; preds = %land.lhs.true.642, %lor.lhs.false.633
  %186 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call650 = call i64 @SBYTES(i64 %186)
  %187 = load i64, i64* %system_name, align 8
  %call651 = call i64 @SBYTES(i64 %187)
  %add652 = add nsw i64 %call651, 2
  %add653 = add nsw i64 %call650, %add652
  %cmp654 = icmp slt i64 127, %add653
  br i1 %cmp654, label %cond.true.656, label %cond.false.694

cond.true.656:                                    ; preds = %lor.lhs.false.649, %land.lhs.true.642, %cond.false.624, %cond.true.616, %cond.true.602, %cond.end.590, %cond.end.553
  %188 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call657 = call i64 @SBYTES(i64 %188)
  %conv658 = trunc i64 %call657 to i8
  %conv659 = zext i8 %conv658 to i32
  %189 = load i64, i64* %system_name, align 8
  %call660 = call i64 @SBYTES(i64 %189)
  %add661 = add nsw i64 %call660, 2
  %conv662 = trunc i64 %add661 to i8
  %conv663 = zext i8 %conv662 to i32
  %add664 = add nsw i32 %conv659, %conv663
  %cmp665 = icmp sle i32 %add664, 127
  br i1 %cmp665, label %cond.true.667, label %cond.false.678

cond.true.667:                                    ; preds = %cond.true.656
  %190 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call668 = call i64 @SBYTES(i64 %190)
  %conv669 = trunc i64 %call668 to i8
  %conv670 = zext i8 %conv669 to i32
  %191 = load i64, i64* %system_name, align 8
  %call671 = call i64 @SBYTES(i64 %191)
  %add672 = add nsw i64 %call671, 2
  %conv673 = trunc i64 %add672 to i8
  %conv674 = zext i8 %conv673 to i32
  %add675 = add nsw i32 %conv670, %conv674
  %conv676 = trunc i32 %add675 to i8
  %conv677 = sext i8 %conv676 to i32
  br label %cond.end.691

cond.false.678:                                   ; preds = %cond.true.656
  %192 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call679 = call i64 @SBYTES(i64 %192)
  %conv680 = trunc i64 %call679 to i8
  %conv681 = zext i8 %conv680 to i32
  %193 = load i64, i64* %system_name, align 8
  %call682 = call i64 @SBYTES(i64 %193)
  %add683 = add nsw i64 %call682, 2
  %conv684 = trunc i64 %add683 to i8
  %conv685 = zext i8 %conv684 to i32
  %add686 = add nsw i32 %conv681, %conv685
  %sub687 = sub nsw i32 %add686, -128
  %conv688 = trunc i32 %sub687 to i8
  %conv689 = sext i8 %conv688 to i32
  %add690 = add nsw i32 %conv689, -128
  br label %cond.end.691

cond.end.691:                                     ; preds = %cond.false.678, %cond.true.667
  %cond692 = phi i32 [ %conv677, %cond.true.667 ], [ %add690, %cond.false.678 ]
  %conv693 = sext i32 %cond692 to i64
  store i64 %conv693, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.694:                                   ; preds = %lor.lhs.false.649
  %194 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call695 = call i64 @SBYTES(i64 %194)
  %conv696 = trunc i64 %call695 to i8
  %conv697 = zext i8 %conv696 to i32
  %195 = load i64, i64* %system_name, align 8
  %call698 = call i64 @SBYTES(i64 %195)
  %add699 = add nsw i64 %call698, 2
  %conv700 = trunc i64 %add699 to i8
  %conv701 = zext i8 %conv700 to i32
  %add702 = add nsw i32 %conv697, %conv701
  %cmp703 = icmp sle i32 %add702, 127
  br i1 %cmp703, label %cond.true.705, label %cond.false.716

cond.true.705:                                    ; preds = %cond.false.694
  %196 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call706 = call i64 @SBYTES(i64 %196)
  %conv707 = trunc i64 %call706 to i8
  %conv708 = zext i8 %conv707 to i32
  %197 = load i64, i64* %system_name, align 8
  %call709 = call i64 @SBYTES(i64 %197)
  %add710 = add nsw i64 %call709, 2
  %conv711 = trunc i64 %add710 to i8
  %conv712 = zext i8 %conv711 to i32
  %add713 = add nsw i32 %conv708, %conv712
  %conv714 = trunc i32 %add713 to i8
  %conv715 = sext i8 %conv714 to i32
  br label %cond.end.729

cond.false.716:                                   ; preds = %cond.false.694
  %198 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call717 = call i64 @SBYTES(i64 %198)
  %conv718 = trunc i64 %call717 to i8
  %conv719 = zext i8 %conv718 to i32
  %199 = load i64, i64* %system_name, align 8
  %call720 = call i64 @SBYTES(i64 %199)
  %add721 = add nsw i64 %call720, 2
  %conv722 = trunc i64 %add721 to i8
  %conv723 = zext i8 %conv722 to i32
  %add724 = add nsw i32 %conv719, %conv723
  %sub725 = sub nsw i32 %add724, -128
  %conv726 = trunc i32 %sub725 to i8
  %conv727 = sext i8 %conv726 to i32
  %add728 = add nsw i32 %conv727, -128
  br label %cond.end.729

cond.end.729:                                     ; preds = %cond.false.716, %cond.true.705
  %cond730 = phi i32 [ %conv715, %cond.true.705 ], [ %add728, %cond.false.716 ]
  %conv731 = sext i32 %cond730 to i64
  store i64 %conv731, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.732:                                   ; preds = %if.end.91
  br i1 false, label %cond.true.733, label %cond.false.1370

cond.true.733:                                    ; preds = %cond.false.732
  br i1 false, label %cond.true.734, label %cond.false.1095

cond.true.734:                                    ; preds = %cond.true.733
  %200 = load i64, i64* %system_name, align 8
  %call735 = call i64 @SBYTES(i64 %200)
  %add736 = add nsw i64 %call735, 2
  %conv737 = trunc i64 %add736 to i16
  %conv738 = sext i16 %conv737 to i32
  %mul739 = mul nsw i32 0, %conv738
  %201 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call740 = call i64 @SBYTES(i64 %201)
  %conv741 = trunc i64 %call740 to i16
  %conv742 = sext i16 %conv741 to i32
  %add743 = add nsw i32 %mul739, %conv742
  %mul744 = mul nsw i32 0, %add743
  %sub745 = sub nsw i32 %mul744, 1
  %cmp746 = icmp slt i32 %sub745, 0
  br i1 %cmp746, label %cond.true.748, label %cond.false.780

cond.true.748:                                    ; preds = %cond.true.734
  %202 = load i64, i64* %system_name, align 8
  %call749 = call i64 @SBYTES(i64 %202)
  %add750 = add nsw i64 %call749, 2
  %conv751 = trunc i64 %add750 to i16
  %conv752 = sext i16 %conv751 to i32
  %mul753 = mul nsw i32 0, %conv752
  %203 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call754 = call i64 @SBYTES(i64 %203)
  %conv755 = trunc i64 %call754 to i16
  %conv756 = sext i16 %conv755 to i32
  %add757 = add nsw i32 %mul753, %conv756
  %mul758 = mul nsw i32 0, %add757
  %add759 = add nsw i32 %mul758, 0
  %neg760 = xor i32 %add759, -1
  %cmp761 = icmp eq i32 %neg760, -1
  %conv762 = zext i1 %cmp761 to i32
  %sub763 = sub nsw i32 0, %conv762
  %204 = load i64, i64* %system_name, align 8
  %call764 = call i64 @SBYTES(i64 %204)
  %add765 = add nsw i64 %call764, 2
  %conv766 = trunc i64 %add765 to i16
  %conv767 = sext i16 %conv766 to i32
  %mul768 = mul nsw i32 0, %conv767
  %205 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call769 = call i64 @SBYTES(i64 %205)
  %conv770 = trunc i64 %call769 to i16
  %conv771 = sext i16 %conv770 to i32
  %add772 = add nsw i32 %mul768, %conv771
  %mul773 = mul nsw i32 0, %add772
  %add774 = add nsw i32 %mul773, 1
  %shl775 = shl i32 %add774, 30
  %sub776 = sub nsw i32 %shl775, 1
  %mul777 = mul nsw i32 %sub776, 2
  %add778 = add nsw i32 %mul777, 1
  %sub779 = sub nsw i32 %sub763, %add778
  br label %cond.end.792

cond.false.780:                                   ; preds = %cond.true.734
  %206 = load i64, i64* %system_name, align 8
  %call781 = call i64 @SBYTES(i64 %206)
  %add782 = add nsw i64 %call781, 2
  %conv783 = trunc i64 %add782 to i16
  %conv784 = sext i16 %conv783 to i32
  %mul785 = mul nsw i32 0, %conv784
  %207 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call786 = call i64 @SBYTES(i64 %207)
  %conv787 = trunc i64 %call786 to i16
  %conv788 = sext i16 %conv787 to i32
  %add789 = add nsw i32 %mul785, %conv788
  %mul790 = mul nsw i32 0, %add789
  %add791 = add nsw i32 %mul790, 0
  br label %cond.end.792

cond.end.792:                                     ; preds = %cond.false.780, %cond.true.748
  %cond793 = phi i32 [ %sub779, %cond.true.748 ], [ %add791, %cond.false.780 ]
  %cmp794 = icmp slt i32 %cond793, 0
  br i1 %cmp794, label %cond.true.796, label %cond.false.927

cond.true.796:                                    ; preds = %cond.end.792
  %208 = load i64, i64* %system_name, align 8
  %call797 = call i64 @SBYTES(i64 %208)
  %add798 = add nsw i64 %call797, 2
  %conv799 = trunc i64 %add798 to i16
  %conv800 = sext i16 %conv799 to i32
  %cmp801 = icmp slt i32 %conv800, 0
  br i1 %cmp801, label %cond.true.803, label %cond.false.873

cond.true.803:                                    ; preds = %cond.true.796
  %209 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call804 = call i64 @SBYTES(i64 %209)
  %conv805 = trunc i64 %call804 to i16
  %conv806 = sext i16 %conv805 to i32
  %210 = load i64, i64* %system_name, align 8
  %call807 = call i64 @SBYTES(i64 %210)
  %add808 = add nsw i64 %call807, 2
  %conv809 = trunc i64 %add808 to i16
  %conv810 = sext i16 %conv809 to i32
  %mul811 = mul nsw i32 0, %conv810
  %211 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call812 = call i64 @SBYTES(i64 %211)
  %conv813 = trunc i64 %call812 to i16
  %conv814 = sext i16 %conv813 to i32
  %add815 = add nsw i32 %mul811, %conv814
  %mul816 = mul nsw i32 0, %add815
  %sub817 = sub nsw i32 %mul816, 1
  %cmp818 = icmp slt i32 %sub817, 0
  br i1 %cmp818, label %cond.true.820, label %cond.false.852

cond.true.820:                                    ; preds = %cond.true.803
  %212 = load i64, i64* %system_name, align 8
  %call821 = call i64 @SBYTES(i64 %212)
  %add822 = add nsw i64 %call821, 2
  %conv823 = trunc i64 %add822 to i16
  %conv824 = sext i16 %conv823 to i32
  %mul825 = mul nsw i32 0, %conv824
  %213 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call826 = call i64 @SBYTES(i64 %213)
  %conv827 = trunc i64 %call826 to i16
  %conv828 = sext i16 %conv827 to i32
  %add829 = add nsw i32 %mul825, %conv828
  %mul830 = mul nsw i32 0, %add829
  %add831 = add nsw i32 %mul830, 0
  %neg832 = xor i32 %add831, -1
  %cmp833 = icmp eq i32 %neg832, -1
  %conv834 = zext i1 %cmp833 to i32
  %sub835 = sub nsw i32 0, %conv834
  %214 = load i64, i64* %system_name, align 8
  %call836 = call i64 @SBYTES(i64 %214)
  %add837 = add nsw i64 %call836, 2
  %conv838 = trunc i64 %add837 to i16
  %conv839 = sext i16 %conv838 to i32
  %mul840 = mul nsw i32 0, %conv839
  %215 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call841 = call i64 @SBYTES(i64 %215)
  %conv842 = trunc i64 %call841 to i16
  %conv843 = sext i16 %conv842 to i32
  %add844 = add nsw i32 %mul840, %conv843
  %mul845 = mul nsw i32 0, %add844
  %add846 = add nsw i32 %mul845, 1
  %shl847 = shl i32 %add846, 30
  %sub848 = sub nsw i32 %shl847, 1
  %mul849 = mul nsw i32 %sub848, 2
  %add850 = add nsw i32 %mul849, 1
  %sub851 = sub nsw i32 %sub835, %add850
  br label %cond.end.864

cond.false.852:                                   ; preds = %cond.true.803
  %216 = load i64, i64* %system_name, align 8
  %call853 = call i64 @SBYTES(i64 %216)
  %add854 = add nsw i64 %call853, 2
  %conv855 = trunc i64 %add854 to i16
  %conv856 = sext i16 %conv855 to i32
  %mul857 = mul nsw i32 0, %conv856
  %217 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call858 = call i64 @SBYTES(i64 %217)
  %conv859 = trunc i64 %call858 to i16
  %conv860 = sext i16 %conv859 to i32
  %add861 = add nsw i32 %mul857, %conv860
  %mul862 = mul nsw i32 0, %add861
  %add863 = add nsw i32 %mul862, 0
  br label %cond.end.864

cond.end.864:                                     ; preds = %cond.false.852, %cond.true.820
  %cond865 = phi i32 [ %sub851, %cond.true.820 ], [ %add863, %cond.false.852 ]
  %218 = load i64, i64* %system_name, align 8
  %call866 = call i64 @SBYTES(i64 %218)
  %add867 = add nsw i64 %call866, 2
  %conv868 = trunc i64 %add867 to i16
  %conv869 = sext i16 %conv868 to i32
  %sub870 = sub nsw i32 %cond865, %conv869
  %cmp871 = icmp slt i32 %conv806, %sub870
  br i1 %cmp871, label %cond.true.1019, label %lor.lhs.false.984

cond.false.873:                                   ; preds = %cond.true.796
  %219 = load i64, i64* %system_name, align 8
  %call874 = call i64 @SBYTES(i64 %219)
  %add875 = add nsw i64 %call874, 2
  %conv876 = trunc i64 %add875 to i16
  %conv877 = sext i16 %conv876 to i32
  %mul878 = mul nsw i32 0, %conv877
  %220 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call879 = call i64 @SBYTES(i64 %220)
  %conv880 = trunc i64 %call879 to i16
  %conv881 = sext i16 %conv880 to i32
  %add882 = add nsw i32 %mul878, %conv881
  %mul883 = mul nsw i32 0, %add882
  %sub884 = sub nsw i32 %mul883, 1
  %cmp885 = icmp slt i32 %sub884, 0
  br i1 %cmp885, label %cond.true.887, label %cond.false.903

cond.true.887:                                    ; preds = %cond.false.873
  %221 = load i64, i64* %system_name, align 8
  %call888 = call i64 @SBYTES(i64 %221)
  %add889 = add nsw i64 %call888, 2
  %conv890 = trunc i64 %add889 to i16
  %conv891 = sext i16 %conv890 to i32
  %mul892 = mul nsw i32 0, %conv891
  %222 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call893 = call i64 @SBYTES(i64 %222)
  %conv894 = trunc i64 %call893 to i16
  %conv895 = sext i16 %conv894 to i32
  %add896 = add nsw i32 %mul892, %conv895
  %mul897 = mul nsw i32 0, %add896
  %add898 = add nsw i32 %mul897, 1
  %shl899 = shl i32 %add898, 30
  %sub900 = sub nsw i32 %shl899, 1
  %mul901 = mul nsw i32 %sub900, 2
  %add902 = add nsw i32 %mul901, 1
  br label %cond.end.915

cond.false.903:                                   ; preds = %cond.false.873
  %223 = load i64, i64* %system_name, align 8
  %call904 = call i64 @SBYTES(i64 %223)
  %add905 = add nsw i64 %call904, 2
  %conv906 = trunc i64 %add905 to i16
  %conv907 = sext i16 %conv906 to i32
  %mul908 = mul nsw i32 0, %conv907
  %224 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call909 = call i64 @SBYTES(i64 %224)
  %conv910 = trunc i64 %call909 to i16
  %conv911 = sext i16 %conv910 to i32
  %add912 = add nsw i32 %mul908, %conv911
  %mul913 = mul nsw i32 0, %add912
  %sub914 = sub nsw i32 %mul913, 1
  br label %cond.end.915

cond.end.915:                                     ; preds = %cond.false.903, %cond.true.887
  %cond916 = phi i32 [ %add902, %cond.true.887 ], [ %sub914, %cond.false.903 ]
  %225 = load i64, i64* %system_name, align 8
  %call917 = call i64 @SBYTES(i64 %225)
  %add918 = add nsw i64 %call917, 2
  %conv919 = trunc i64 %add918 to i16
  %conv920 = sext i16 %conv919 to i32
  %sub921 = sub nsw i32 %cond916, %conv920
  %226 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call922 = call i64 @SBYTES(i64 %226)
  %conv923 = trunc i64 %call922 to i16
  %conv924 = sext i16 %conv923 to i32
  %cmp925 = icmp slt i32 %sub921, %conv924
  br i1 %cmp925, label %cond.true.1019, label %lor.lhs.false.984

cond.false.927:                                   ; preds = %cond.end.792
  %227 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call928 = call i64 @SBYTES(i64 %227)
  %conv929 = trunc i64 %call928 to i16
  %conv930 = sext i16 %conv929 to i32
  %cmp931 = icmp slt i32 %conv930, 0
  br i1 %cmp931, label %cond.true.933, label %cond.false.948

cond.true.933:                                    ; preds = %cond.false.927
  %228 = load i64, i64* %system_name, align 8
  %call934 = call i64 @SBYTES(i64 %228)
  %add935 = add nsw i64 %call934, 2
  %conv936 = trunc i64 %add935 to i16
  %conv937 = sext i16 %conv936 to i32
  %229 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call938 = call i64 @SBYTES(i64 %229)
  %conv939 = trunc i64 %call938 to i16
  %conv940 = sext i16 %conv939 to i32
  %230 = load i64, i64* %system_name, align 8
  %call941 = call i64 @SBYTES(i64 %230)
  %add942 = add nsw i64 %call941, 2
  %conv943 = trunc i64 %add942 to i16
  %conv944 = sext i16 %conv943 to i32
  %add945 = add nsw i32 %conv940, %conv944
  %cmp946 = icmp sle i32 %conv937, %add945
  br i1 %cmp946, label %cond.true.1019, label %lor.lhs.false.984

cond.false.948:                                   ; preds = %cond.false.927
  %231 = load i64, i64* %system_name, align 8
  %call949 = call i64 @SBYTES(i64 %231)
  %add950 = add nsw i64 %call949, 2
  %conv951 = trunc i64 %add950 to i16
  %conv952 = sext i16 %conv951 to i32
  %cmp953 = icmp slt i32 %conv952, 0
  br i1 %cmp953, label %cond.true.955, label %cond.false.969

cond.true.955:                                    ; preds = %cond.false.948
  %232 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call956 = call i64 @SBYTES(i64 %232)
  %conv957 = trunc i64 %call956 to i16
  %conv958 = sext i16 %conv957 to i32
  %233 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call959 = call i64 @SBYTES(i64 %233)
  %conv960 = trunc i64 %call959 to i16
  %conv961 = sext i16 %conv960 to i32
  %234 = load i64, i64* %system_name, align 8
  %call962 = call i64 @SBYTES(i64 %234)
  %add963 = add nsw i64 %call962, 2
  %conv964 = trunc i64 %add963 to i16
  %conv965 = sext i16 %conv964 to i32
  %add966 = add nsw i32 %conv961, %conv965
  %cmp967 = icmp sle i32 %conv958, %add966
  br i1 %cmp967, label %cond.true.1019, label %lor.lhs.false.984

cond.false.969:                                   ; preds = %cond.false.948
  %235 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call970 = call i64 @SBYTES(i64 %235)
  %conv971 = trunc i64 %call970 to i16
  %conv972 = sext i16 %conv971 to i32
  %236 = load i64, i64* %system_name, align 8
  %call973 = call i64 @SBYTES(i64 %236)
  %add974 = add nsw i64 %call973, 2
  %conv975 = trunc i64 %add974 to i16
  %conv976 = sext i16 %conv975 to i32
  %add977 = add nsw i32 %conv972, %conv976
  %237 = load i64, i64* %system_name, align 8
  %call978 = call i64 @SBYTES(i64 %237)
  %add979 = add nsw i64 %call978, 2
  %conv980 = trunc i64 %add979 to i16
  %conv981 = sext i16 %conv980 to i32
  %cmp982 = icmp slt i32 %add977, %conv981
  br i1 %cmp982, label %cond.true.1019, label %lor.lhs.false.984

lor.lhs.false.984:                                ; preds = %cond.false.969, %cond.true.955, %cond.true.933, %cond.end.915, %cond.end.864
  %238 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call985 = call i64 @SBYTES(i64 %238)
  %conv986 = trunc i64 %call985 to i16
  %conv987 = sext i16 %conv986 to i32
  %239 = load i64, i64* %system_name, align 8
  %call988 = call i64 @SBYTES(i64 %239)
  %add989 = add nsw i64 %call988, 2
  %conv990 = trunc i64 %add989 to i16
  %conv991 = sext i16 %conv990 to i32
  %add992 = add nsw i32 %conv987, %conv991
  %mul993 = mul nsw i32 0, %add992
  %sub994 = sub nsw i32 %mul993, 1
  %cmp995 = icmp slt i32 %sub994, 0
  br i1 %cmp995, label %land.lhs.true.997, label %lor.lhs.false.1008

land.lhs.true.997:                                ; preds = %lor.lhs.false.984
  %240 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call998 = call i64 @SBYTES(i64 %240)
  %conv999 = trunc i64 %call998 to i16
  %conv1000 = sext i16 %conv999 to i32
  %241 = load i64, i64* %system_name, align 8
  %call1001 = call i64 @SBYTES(i64 %241)
  %add1002 = add nsw i64 %call1001, 2
  %conv1003 = trunc i64 %add1002 to i16
  %conv1004 = sext i16 %conv1003 to i32
  %add1005 = add nsw i32 %conv1000, %conv1004
  %cmp1006 = icmp slt i32 %add1005, -32768
  br i1 %cmp1006, label %cond.true.1019, label %lor.lhs.false.1008

lor.lhs.false.1008:                               ; preds = %land.lhs.true.997, %lor.lhs.false.984
  %242 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1009 = call i64 @SBYTES(i64 %242)
  %conv1010 = trunc i64 %call1009 to i16
  %conv1011 = sext i16 %conv1010 to i32
  %243 = load i64, i64* %system_name, align 8
  %call1012 = call i64 @SBYTES(i64 %243)
  %add1013 = add nsw i64 %call1012, 2
  %conv1014 = trunc i64 %add1013 to i16
  %conv1015 = sext i16 %conv1014 to i32
  %add1016 = add nsw i32 %conv1011, %conv1015
  %cmp1017 = icmp slt i32 32767, %add1016
  br i1 %cmp1017, label %cond.true.1019, label %cond.false.1057

cond.true.1019:                                   ; preds = %lor.lhs.false.1008, %land.lhs.true.997, %cond.false.969, %cond.true.955, %cond.true.933, %cond.end.915, %cond.end.864
  %244 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1020 = call i64 @SBYTES(i64 %244)
  %conv1021 = trunc i64 %call1020 to i16
  %conv1022 = zext i16 %conv1021 to i32
  %245 = load i64, i64* %system_name, align 8
  %call1023 = call i64 @SBYTES(i64 %245)
  %add1024 = add nsw i64 %call1023, 2
  %conv1025 = trunc i64 %add1024 to i16
  %conv1026 = zext i16 %conv1025 to i32
  %add1027 = add nsw i32 %conv1022, %conv1026
  %cmp1028 = icmp sle i32 %add1027, 32767
  br i1 %cmp1028, label %cond.true.1030, label %cond.false.1041

cond.true.1030:                                   ; preds = %cond.true.1019
  %246 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1031 = call i64 @SBYTES(i64 %246)
  %conv1032 = trunc i64 %call1031 to i16
  %conv1033 = zext i16 %conv1032 to i32
  %247 = load i64, i64* %system_name, align 8
  %call1034 = call i64 @SBYTES(i64 %247)
  %add1035 = add nsw i64 %call1034, 2
  %conv1036 = trunc i64 %add1035 to i16
  %conv1037 = zext i16 %conv1036 to i32
  %add1038 = add nsw i32 %conv1033, %conv1037
  %conv1039 = trunc i32 %add1038 to i16
  %conv1040 = sext i16 %conv1039 to i32
  br label %cond.end.1054

cond.false.1041:                                  ; preds = %cond.true.1019
  %248 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1042 = call i64 @SBYTES(i64 %248)
  %conv1043 = trunc i64 %call1042 to i16
  %conv1044 = zext i16 %conv1043 to i32
  %249 = load i64, i64* %system_name, align 8
  %call1045 = call i64 @SBYTES(i64 %249)
  %add1046 = add nsw i64 %call1045, 2
  %conv1047 = trunc i64 %add1046 to i16
  %conv1048 = zext i16 %conv1047 to i32
  %add1049 = add nsw i32 %conv1044, %conv1048
  %sub1050 = sub nsw i32 %add1049, -32768
  %conv1051 = trunc i32 %sub1050 to i16
  %conv1052 = sext i16 %conv1051 to i32
  %add1053 = add nsw i32 %conv1052, -32768
  br label %cond.end.1054

cond.end.1054:                                    ; preds = %cond.false.1041, %cond.true.1030
  %cond1055 = phi i32 [ %conv1040, %cond.true.1030 ], [ %add1053, %cond.false.1041 ]
  %conv1056 = sext i32 %cond1055 to i64
  store i64 %conv1056, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.1057:                                  ; preds = %lor.lhs.false.1008
  %250 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1058 = call i64 @SBYTES(i64 %250)
  %conv1059 = trunc i64 %call1058 to i16
  %conv1060 = zext i16 %conv1059 to i32
  %251 = load i64, i64* %system_name, align 8
  %call1061 = call i64 @SBYTES(i64 %251)
  %add1062 = add nsw i64 %call1061, 2
  %conv1063 = trunc i64 %add1062 to i16
  %conv1064 = zext i16 %conv1063 to i32
  %add1065 = add nsw i32 %conv1060, %conv1064
  %cmp1066 = icmp sle i32 %add1065, 32767
  br i1 %cmp1066, label %cond.true.1068, label %cond.false.1079

cond.true.1068:                                   ; preds = %cond.false.1057
  %252 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1069 = call i64 @SBYTES(i64 %252)
  %conv1070 = trunc i64 %call1069 to i16
  %conv1071 = zext i16 %conv1070 to i32
  %253 = load i64, i64* %system_name, align 8
  %call1072 = call i64 @SBYTES(i64 %253)
  %add1073 = add nsw i64 %call1072, 2
  %conv1074 = trunc i64 %add1073 to i16
  %conv1075 = zext i16 %conv1074 to i32
  %add1076 = add nsw i32 %conv1071, %conv1075
  %conv1077 = trunc i32 %add1076 to i16
  %conv1078 = sext i16 %conv1077 to i32
  br label %cond.end.1092

cond.false.1079:                                  ; preds = %cond.false.1057
  %254 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1080 = call i64 @SBYTES(i64 %254)
  %conv1081 = trunc i64 %call1080 to i16
  %conv1082 = zext i16 %conv1081 to i32
  %255 = load i64, i64* %system_name, align 8
  %call1083 = call i64 @SBYTES(i64 %255)
  %add1084 = add nsw i64 %call1083, 2
  %conv1085 = trunc i64 %add1084 to i16
  %conv1086 = zext i16 %conv1085 to i32
  %add1087 = add nsw i32 %conv1082, %conv1086
  %sub1088 = sub nsw i32 %add1087, -32768
  %conv1089 = trunc i32 %sub1088 to i16
  %conv1090 = sext i16 %conv1089 to i32
  %add1091 = add nsw i32 %conv1090, -32768
  br label %cond.end.1092

cond.end.1092:                                    ; preds = %cond.false.1079, %cond.true.1068
  %cond1093 = phi i32 [ %conv1078, %cond.true.1068 ], [ %add1091, %cond.false.1079 ]
  %conv1094 = sext i32 %cond1093 to i64
  store i64 %conv1094, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.1095:                                  ; preds = %cond.true.733
  %256 = load i64, i64* %system_name, align 8
  %call1096 = call i64 @SBYTES(i64 %256)
  %add1097 = add nsw i64 %call1096, 2
  %mul1098 = mul nsw i64 0, %add1097
  %257 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1099 = call i64 @SBYTES(i64 %257)
  %add1100 = add nsw i64 %mul1098, %call1099
  %mul1101 = mul nsw i64 0, %add1100
  %sub1102 = sub nsw i64 %mul1101, 1
  %cmp1103 = icmp slt i64 %sub1102, 0
  br i1 %cmp1103, label %cond.true.1105, label %cond.false.1130

cond.true.1105:                                   ; preds = %cond.false.1095
  %258 = load i64, i64* %system_name, align 8
  %call1106 = call i64 @SBYTES(i64 %258)
  %add1107 = add nsw i64 %call1106, 2
  %mul1108 = mul nsw i64 0, %add1107
  %259 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1109 = call i64 @SBYTES(i64 %259)
  %add1110 = add nsw i64 %mul1108, %call1109
  %mul1111 = mul nsw i64 0, %add1110
  %add1112 = add nsw i64 %mul1111, 0
  %neg1113 = xor i64 %add1112, -1
  %cmp1114 = icmp eq i64 %neg1113, -1
  %conv1115 = zext i1 %cmp1114 to i32
  %sub1116 = sub nsw i32 0, %conv1115
  %conv1117 = sext i32 %sub1116 to i64
  %260 = load i64, i64* %system_name, align 8
  %call1118 = call i64 @SBYTES(i64 %260)
  %add1119 = add nsw i64 %call1118, 2
  %mul1120 = mul nsw i64 0, %add1119
  %261 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1121 = call i64 @SBYTES(i64 %261)
  %add1122 = add nsw i64 %mul1120, %call1121
  %mul1123 = mul nsw i64 0, %add1122
  %add1124 = add nsw i64 %mul1123, 1
  %shl1125 = shl i64 %add1124, 62
  %sub1126 = sub nsw i64 %shl1125, 1
  %mul1127 = mul nsw i64 %sub1126, 2
  %add1128 = add nsw i64 %mul1127, 1
  %sub1129 = sub nsw i64 %conv1117, %add1128
  br label %cond.end.1138

cond.false.1130:                                  ; preds = %cond.false.1095
  %262 = load i64, i64* %system_name, align 8
  %call1131 = call i64 @SBYTES(i64 %262)
  %add1132 = add nsw i64 %call1131, 2
  %mul1133 = mul nsw i64 0, %add1132
  %263 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1134 = call i64 @SBYTES(i64 %263)
  %add1135 = add nsw i64 %mul1133, %call1134
  %mul1136 = mul nsw i64 0, %add1135
  %add1137 = add nsw i64 %mul1136, 0
  br label %cond.end.1138

cond.end.1138:                                    ; preds = %cond.false.1130, %cond.true.1105
  %cond1139 = phi i64 [ %sub1129, %cond.true.1105 ], [ %add1137, %cond.false.1130 ]
  %cmp1140 = icmp slt i64 %cond1139, 0
  br i1 %cmp1140, label %cond.true.1142, label %cond.false.1236

cond.true.1142:                                   ; preds = %cond.end.1138
  %264 = load i64, i64* %system_name, align 8
  %call1143 = call i64 @SBYTES(i64 %264)
  %add1144 = add nsw i64 %call1143, 2
  %cmp1145 = icmp slt i64 %add1144, 0
  br i1 %cmp1145, label %cond.true.1147, label %cond.false.1198

cond.true.1147:                                   ; preds = %cond.true.1142
  %265 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1148 = call i64 @SBYTES(i64 %265)
  %266 = load i64, i64* %system_name, align 8
  %call1149 = call i64 @SBYTES(i64 %266)
  %add1150 = add nsw i64 %call1149, 2
  %mul1151 = mul nsw i64 0, %add1150
  %267 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1152 = call i64 @SBYTES(i64 %267)
  %add1153 = add nsw i64 %mul1151, %call1152
  %mul1154 = mul nsw i64 0, %add1153
  %sub1155 = sub nsw i64 %mul1154, 1
  %cmp1156 = icmp slt i64 %sub1155, 0
  br i1 %cmp1156, label %cond.true.1158, label %cond.false.1183

cond.true.1158:                                   ; preds = %cond.true.1147
  %268 = load i64, i64* %system_name, align 8
  %call1159 = call i64 @SBYTES(i64 %268)
  %add1160 = add nsw i64 %call1159, 2
  %mul1161 = mul nsw i64 0, %add1160
  %269 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1162 = call i64 @SBYTES(i64 %269)
  %add1163 = add nsw i64 %mul1161, %call1162
  %mul1164 = mul nsw i64 0, %add1163
  %add1165 = add nsw i64 %mul1164, 0
  %neg1166 = xor i64 %add1165, -1
  %cmp1167 = icmp eq i64 %neg1166, -1
  %conv1168 = zext i1 %cmp1167 to i32
  %sub1169 = sub nsw i32 0, %conv1168
  %conv1170 = sext i32 %sub1169 to i64
  %270 = load i64, i64* %system_name, align 8
  %call1171 = call i64 @SBYTES(i64 %270)
  %add1172 = add nsw i64 %call1171, 2
  %mul1173 = mul nsw i64 0, %add1172
  %271 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1174 = call i64 @SBYTES(i64 %271)
  %add1175 = add nsw i64 %mul1173, %call1174
  %mul1176 = mul nsw i64 0, %add1175
  %add1177 = add nsw i64 %mul1176, 1
  %shl1178 = shl i64 %add1177, 62
  %sub1179 = sub nsw i64 %shl1178, 1
  %mul1180 = mul nsw i64 %sub1179, 2
  %add1181 = add nsw i64 %mul1180, 1
  %sub1182 = sub nsw i64 %conv1170, %add1181
  br label %cond.end.1191

cond.false.1183:                                  ; preds = %cond.true.1147
  %272 = load i64, i64* %system_name, align 8
  %call1184 = call i64 @SBYTES(i64 %272)
  %add1185 = add nsw i64 %call1184, 2
  %mul1186 = mul nsw i64 0, %add1185
  %273 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1187 = call i64 @SBYTES(i64 %273)
  %add1188 = add nsw i64 %mul1186, %call1187
  %mul1189 = mul nsw i64 0, %add1188
  %add1190 = add nsw i64 %mul1189, 0
  br label %cond.end.1191

cond.end.1191:                                    ; preds = %cond.false.1183, %cond.true.1158
  %cond1192 = phi i64 [ %sub1182, %cond.true.1158 ], [ %add1190, %cond.false.1183 ]
  %274 = load i64, i64* %system_name, align 8
  %call1193 = call i64 @SBYTES(i64 %274)
  %add1194 = add nsw i64 %call1193, 2
  %sub1195 = sub nsw i64 %cond1192, %add1194
  %cmp1196 = icmp slt i64 %call1148, %sub1195
  br i1 %cmp1196, label %cond.true.1294, label %lor.lhs.false.1271

cond.false.1198:                                  ; preds = %cond.true.1142
  %275 = load i64, i64* %system_name, align 8
  %call1199 = call i64 @SBYTES(i64 %275)
  %add1200 = add nsw i64 %call1199, 2
  %mul1201 = mul nsw i64 0, %add1200
  %276 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1202 = call i64 @SBYTES(i64 %276)
  %add1203 = add nsw i64 %mul1201, %call1202
  %mul1204 = mul nsw i64 0, %add1203
  %sub1205 = sub nsw i64 %mul1204, 1
  %cmp1206 = icmp slt i64 %sub1205, 0
  br i1 %cmp1206, label %cond.true.1208, label %cond.false.1220

cond.true.1208:                                   ; preds = %cond.false.1198
  %277 = load i64, i64* %system_name, align 8
  %call1209 = call i64 @SBYTES(i64 %277)
  %add1210 = add nsw i64 %call1209, 2
  %mul1211 = mul nsw i64 0, %add1210
  %278 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1212 = call i64 @SBYTES(i64 %278)
  %add1213 = add nsw i64 %mul1211, %call1212
  %mul1214 = mul nsw i64 0, %add1213
  %add1215 = add nsw i64 %mul1214, 1
  %shl1216 = shl i64 %add1215, 62
  %sub1217 = sub nsw i64 %shl1216, 1
  %mul1218 = mul nsw i64 %sub1217, 2
  %add1219 = add nsw i64 %mul1218, 1
  br label %cond.end.1228

cond.false.1220:                                  ; preds = %cond.false.1198
  %279 = load i64, i64* %system_name, align 8
  %call1221 = call i64 @SBYTES(i64 %279)
  %add1222 = add nsw i64 %call1221, 2
  %mul1223 = mul nsw i64 0, %add1222
  %280 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1224 = call i64 @SBYTES(i64 %280)
  %add1225 = add nsw i64 %mul1223, %call1224
  %mul1226 = mul nsw i64 0, %add1225
  %sub1227 = sub nsw i64 %mul1226, 1
  br label %cond.end.1228

cond.end.1228:                                    ; preds = %cond.false.1220, %cond.true.1208
  %cond1229 = phi i64 [ %add1219, %cond.true.1208 ], [ %sub1227, %cond.false.1220 ]
  %281 = load i64, i64* %system_name, align 8
  %call1230 = call i64 @SBYTES(i64 %281)
  %add1231 = add nsw i64 %call1230, 2
  %sub1232 = sub nsw i64 %cond1229, %add1231
  %282 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1233 = call i64 @SBYTES(i64 %282)
  %cmp1234 = icmp slt i64 %sub1232, %call1233
  br i1 %cmp1234, label %cond.true.1294, label %lor.lhs.false.1271

cond.false.1236:                                  ; preds = %cond.end.1138
  %283 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1237 = call i64 @SBYTES(i64 %283)
  %cmp1238 = icmp slt i64 %call1237, 0
  br i1 %cmp1238, label %cond.true.1240, label %cond.false.1249

cond.true.1240:                                   ; preds = %cond.false.1236
  %284 = load i64, i64* %system_name, align 8
  %call1241 = call i64 @SBYTES(i64 %284)
  %add1242 = add nsw i64 %call1241, 2
  %285 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1243 = call i64 @SBYTES(i64 %285)
  %286 = load i64, i64* %system_name, align 8
  %call1244 = call i64 @SBYTES(i64 %286)
  %add1245 = add nsw i64 %call1244, 2
  %add1246 = add nsw i64 %call1243, %add1245
  %cmp1247 = icmp sle i64 %add1242, %add1246
  br i1 %cmp1247, label %cond.true.1294, label %lor.lhs.false.1271

cond.false.1249:                                  ; preds = %cond.false.1236
  %287 = load i64, i64* %system_name, align 8
  %call1250 = call i64 @SBYTES(i64 %287)
  %add1251 = add nsw i64 %call1250, 2
  %cmp1252 = icmp slt i64 %add1251, 0
  br i1 %cmp1252, label %cond.true.1254, label %cond.false.1262

cond.true.1254:                                   ; preds = %cond.false.1249
  %288 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1255 = call i64 @SBYTES(i64 %288)
  %289 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1256 = call i64 @SBYTES(i64 %289)
  %290 = load i64, i64* %system_name, align 8
  %call1257 = call i64 @SBYTES(i64 %290)
  %add1258 = add nsw i64 %call1257, 2
  %add1259 = add nsw i64 %call1256, %add1258
  %cmp1260 = icmp sle i64 %call1255, %add1259
  br i1 %cmp1260, label %cond.true.1294, label %lor.lhs.false.1271

cond.false.1262:                                  ; preds = %cond.false.1249
  %291 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1263 = call i64 @SBYTES(i64 %291)
  %292 = load i64, i64* %system_name, align 8
  %call1264 = call i64 @SBYTES(i64 %292)
  %add1265 = add nsw i64 %call1264, 2
  %add1266 = add nsw i64 %call1263, %add1265
  %293 = load i64, i64* %system_name, align 8
  %call1267 = call i64 @SBYTES(i64 %293)
  %add1268 = add nsw i64 %call1267, 2
  %cmp1269 = icmp slt i64 %add1266, %add1268
  br i1 %cmp1269, label %cond.true.1294, label %lor.lhs.false.1271

lor.lhs.false.1271:                               ; preds = %cond.false.1262, %cond.true.1254, %cond.true.1240, %cond.end.1228, %cond.end.1191
  %294 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1272 = call i64 @SBYTES(i64 %294)
  %295 = load i64, i64* %system_name, align 8
  %call1273 = call i64 @SBYTES(i64 %295)
  %add1274 = add nsw i64 %call1273, 2
  %add1275 = add nsw i64 %call1272, %add1274
  %mul1276 = mul nsw i64 0, %add1275
  %sub1277 = sub nsw i64 %mul1276, 1
  %cmp1278 = icmp slt i64 %sub1277, 0
  br i1 %cmp1278, label %land.lhs.true.1280, label %lor.lhs.false.1287

land.lhs.true.1280:                               ; preds = %lor.lhs.false.1271
  %296 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1281 = call i64 @SBYTES(i64 %296)
  %297 = load i64, i64* %system_name, align 8
  %call1282 = call i64 @SBYTES(i64 %297)
  %add1283 = add nsw i64 %call1282, 2
  %add1284 = add nsw i64 %call1281, %add1283
  %cmp1285 = icmp slt i64 %add1284, -32768
  br i1 %cmp1285, label %cond.true.1294, label %lor.lhs.false.1287

lor.lhs.false.1287:                               ; preds = %land.lhs.true.1280, %lor.lhs.false.1271
  %298 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1288 = call i64 @SBYTES(i64 %298)
  %299 = load i64, i64* %system_name, align 8
  %call1289 = call i64 @SBYTES(i64 %299)
  %add1290 = add nsw i64 %call1289, 2
  %add1291 = add nsw i64 %call1288, %add1290
  %cmp1292 = icmp slt i64 32767, %add1291
  br i1 %cmp1292, label %cond.true.1294, label %cond.false.1332

cond.true.1294:                                   ; preds = %lor.lhs.false.1287, %land.lhs.true.1280, %cond.false.1262, %cond.true.1254, %cond.true.1240, %cond.end.1228, %cond.end.1191
  %300 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1295 = call i64 @SBYTES(i64 %300)
  %conv1296 = trunc i64 %call1295 to i16
  %conv1297 = zext i16 %conv1296 to i32
  %301 = load i64, i64* %system_name, align 8
  %call1298 = call i64 @SBYTES(i64 %301)
  %add1299 = add nsw i64 %call1298, 2
  %conv1300 = trunc i64 %add1299 to i16
  %conv1301 = zext i16 %conv1300 to i32
  %add1302 = add nsw i32 %conv1297, %conv1301
  %cmp1303 = icmp sle i32 %add1302, 32767
  br i1 %cmp1303, label %cond.true.1305, label %cond.false.1316

cond.true.1305:                                   ; preds = %cond.true.1294
  %302 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1306 = call i64 @SBYTES(i64 %302)
  %conv1307 = trunc i64 %call1306 to i16
  %conv1308 = zext i16 %conv1307 to i32
  %303 = load i64, i64* %system_name, align 8
  %call1309 = call i64 @SBYTES(i64 %303)
  %add1310 = add nsw i64 %call1309, 2
  %conv1311 = trunc i64 %add1310 to i16
  %conv1312 = zext i16 %conv1311 to i32
  %add1313 = add nsw i32 %conv1308, %conv1312
  %conv1314 = trunc i32 %add1313 to i16
  %conv1315 = sext i16 %conv1314 to i32
  br label %cond.end.1329

cond.false.1316:                                  ; preds = %cond.true.1294
  %304 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1317 = call i64 @SBYTES(i64 %304)
  %conv1318 = trunc i64 %call1317 to i16
  %conv1319 = zext i16 %conv1318 to i32
  %305 = load i64, i64* %system_name, align 8
  %call1320 = call i64 @SBYTES(i64 %305)
  %add1321 = add nsw i64 %call1320, 2
  %conv1322 = trunc i64 %add1321 to i16
  %conv1323 = zext i16 %conv1322 to i32
  %add1324 = add nsw i32 %conv1319, %conv1323
  %sub1325 = sub nsw i32 %add1324, -32768
  %conv1326 = trunc i32 %sub1325 to i16
  %conv1327 = sext i16 %conv1326 to i32
  %add1328 = add nsw i32 %conv1327, -32768
  br label %cond.end.1329

cond.end.1329:                                    ; preds = %cond.false.1316, %cond.true.1305
  %cond1330 = phi i32 [ %conv1315, %cond.true.1305 ], [ %add1328, %cond.false.1316 ]
  %conv1331 = sext i32 %cond1330 to i64
  store i64 %conv1331, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.1332:                                  ; preds = %lor.lhs.false.1287
  %306 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1333 = call i64 @SBYTES(i64 %306)
  %conv1334 = trunc i64 %call1333 to i16
  %conv1335 = zext i16 %conv1334 to i32
  %307 = load i64, i64* %system_name, align 8
  %call1336 = call i64 @SBYTES(i64 %307)
  %add1337 = add nsw i64 %call1336, 2
  %conv1338 = trunc i64 %add1337 to i16
  %conv1339 = zext i16 %conv1338 to i32
  %add1340 = add nsw i32 %conv1335, %conv1339
  %cmp1341 = icmp sle i32 %add1340, 32767
  br i1 %cmp1341, label %cond.true.1343, label %cond.false.1354

cond.true.1343:                                   ; preds = %cond.false.1332
  %308 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1344 = call i64 @SBYTES(i64 %308)
  %conv1345 = trunc i64 %call1344 to i16
  %conv1346 = zext i16 %conv1345 to i32
  %309 = load i64, i64* %system_name, align 8
  %call1347 = call i64 @SBYTES(i64 %309)
  %add1348 = add nsw i64 %call1347, 2
  %conv1349 = trunc i64 %add1348 to i16
  %conv1350 = zext i16 %conv1349 to i32
  %add1351 = add nsw i32 %conv1346, %conv1350
  %conv1352 = trunc i32 %add1351 to i16
  %conv1353 = sext i16 %conv1352 to i32
  br label %cond.end.1367

cond.false.1354:                                  ; preds = %cond.false.1332
  %310 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1355 = call i64 @SBYTES(i64 %310)
  %conv1356 = trunc i64 %call1355 to i16
  %conv1357 = zext i16 %conv1356 to i32
  %311 = load i64, i64* %system_name, align 8
  %call1358 = call i64 @SBYTES(i64 %311)
  %add1359 = add nsw i64 %call1358, 2
  %conv1360 = trunc i64 %add1359 to i16
  %conv1361 = zext i16 %conv1360 to i32
  %add1362 = add nsw i32 %conv1357, %conv1361
  %sub1363 = sub nsw i32 %add1362, -32768
  %conv1364 = trunc i32 %sub1363 to i16
  %conv1365 = sext i16 %conv1364 to i32
  %add1366 = add nsw i32 %conv1365, -32768
  br label %cond.end.1367

cond.end.1367:                                    ; preds = %cond.false.1354, %cond.true.1343
  %cond1368 = phi i32 [ %conv1353, %cond.true.1343 ], [ %add1366, %cond.false.1354 ]
  %conv1369 = sext i32 %cond1368 to i64
  store i64 %conv1369, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.1370:                                  ; preds = %cond.false.732
  br i1 false, label %cond.true.1371, label %cond.false.1924

cond.true.1371:                                   ; preds = %cond.false.1370
  br i1 false, label %cond.true.1372, label %cond.false.1669

cond.true.1372:                                   ; preds = %cond.true.1371
  %312 = load i64, i64* %system_name, align 8
  %call1373 = call i64 @SBYTES(i64 %312)
  %add1374 = add nsw i64 %call1373, 2
  %conv1375 = trunc i64 %add1374 to i32
  %mul1376 = mul nsw i32 0, %conv1375
  %313 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1377 = call i64 @SBYTES(i64 %313)
  %conv1378 = trunc i64 %call1377 to i32
  %add1379 = add nsw i32 %mul1376, %conv1378
  %mul1380 = mul nsw i32 0, %add1379
  %sub1381 = sub nsw i32 %mul1380, 1
  %cmp1382 = icmp slt i32 %sub1381, 0
  br i1 %cmp1382, label %cond.true.1384, label %cond.false.1412

cond.true.1384:                                   ; preds = %cond.true.1372
  %314 = load i64, i64* %system_name, align 8
  %call1385 = call i64 @SBYTES(i64 %314)
  %add1386 = add nsw i64 %call1385, 2
  %conv1387 = trunc i64 %add1386 to i32
  %mul1388 = mul nsw i32 0, %conv1387
  %315 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1389 = call i64 @SBYTES(i64 %315)
  %conv1390 = trunc i64 %call1389 to i32
  %add1391 = add nsw i32 %mul1388, %conv1390
  %mul1392 = mul nsw i32 0, %add1391
  %add1393 = add nsw i32 %mul1392, 0
  %neg1394 = xor i32 %add1393, -1
  %cmp1395 = icmp eq i32 %neg1394, -1
  %conv1396 = zext i1 %cmp1395 to i32
  %sub1397 = sub nsw i32 0, %conv1396
  %316 = load i64, i64* %system_name, align 8
  %call1398 = call i64 @SBYTES(i64 %316)
  %add1399 = add nsw i64 %call1398, 2
  %conv1400 = trunc i64 %add1399 to i32
  %mul1401 = mul nsw i32 0, %conv1400
  %317 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1402 = call i64 @SBYTES(i64 %317)
  %conv1403 = trunc i64 %call1402 to i32
  %add1404 = add nsw i32 %mul1401, %conv1403
  %mul1405 = mul nsw i32 0, %add1404
  %add1406 = add nsw i32 %mul1405, 1
  %shl1407 = shl i32 %add1406, 30
  %sub1408 = sub nsw i32 %shl1407, 1
  %mul1409 = mul nsw i32 %sub1408, 2
  %add1410 = add nsw i32 %mul1409, 1
  %sub1411 = sub nsw i32 %sub1397, %add1410
  br label %cond.end.1422

cond.false.1412:                                  ; preds = %cond.true.1372
  %318 = load i64, i64* %system_name, align 8
  %call1413 = call i64 @SBYTES(i64 %318)
  %add1414 = add nsw i64 %call1413, 2
  %conv1415 = trunc i64 %add1414 to i32
  %mul1416 = mul nsw i32 0, %conv1415
  %319 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1417 = call i64 @SBYTES(i64 %319)
  %conv1418 = trunc i64 %call1417 to i32
  %add1419 = add nsw i32 %mul1416, %conv1418
  %mul1420 = mul nsw i32 0, %add1419
  %add1421 = add nsw i32 %mul1420, 0
  br label %cond.end.1422

cond.end.1422:                                    ; preds = %cond.false.1412, %cond.true.1384
  %cond1423 = phi i32 [ %sub1411, %cond.true.1384 ], [ %add1421, %cond.false.1412 ]
  %cmp1424 = icmp slt i32 %cond1423, 0
  br i1 %cmp1424, label %cond.true.1426, label %cond.false.1538

cond.true.1426:                                   ; preds = %cond.end.1422
  %320 = load i64, i64* %system_name, align 8
  %call1427 = call i64 @SBYTES(i64 %320)
  %add1428 = add nsw i64 %call1427, 2
  %conv1429 = trunc i64 %add1428 to i32
  %cmp1430 = icmp slt i32 %conv1429, 0
  br i1 %cmp1430, label %cond.true.1432, label %cond.false.1492

cond.true.1432:                                   ; preds = %cond.true.1426
  %321 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1433 = call i64 @SBYTES(i64 %321)
  %conv1434 = trunc i64 %call1433 to i32
  %322 = load i64, i64* %system_name, align 8
  %call1435 = call i64 @SBYTES(i64 %322)
  %add1436 = add nsw i64 %call1435, 2
  %conv1437 = trunc i64 %add1436 to i32
  %mul1438 = mul nsw i32 0, %conv1437
  %323 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1439 = call i64 @SBYTES(i64 %323)
  %conv1440 = trunc i64 %call1439 to i32
  %add1441 = add nsw i32 %mul1438, %conv1440
  %mul1442 = mul nsw i32 0, %add1441
  %sub1443 = sub nsw i32 %mul1442, 1
  %cmp1444 = icmp slt i32 %sub1443, 0
  br i1 %cmp1444, label %cond.true.1446, label %cond.false.1474

cond.true.1446:                                   ; preds = %cond.true.1432
  %324 = load i64, i64* %system_name, align 8
  %call1447 = call i64 @SBYTES(i64 %324)
  %add1448 = add nsw i64 %call1447, 2
  %conv1449 = trunc i64 %add1448 to i32
  %mul1450 = mul nsw i32 0, %conv1449
  %325 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1451 = call i64 @SBYTES(i64 %325)
  %conv1452 = trunc i64 %call1451 to i32
  %add1453 = add nsw i32 %mul1450, %conv1452
  %mul1454 = mul nsw i32 0, %add1453
  %add1455 = add nsw i32 %mul1454, 0
  %neg1456 = xor i32 %add1455, -1
  %cmp1457 = icmp eq i32 %neg1456, -1
  %conv1458 = zext i1 %cmp1457 to i32
  %sub1459 = sub nsw i32 0, %conv1458
  %326 = load i64, i64* %system_name, align 8
  %call1460 = call i64 @SBYTES(i64 %326)
  %add1461 = add nsw i64 %call1460, 2
  %conv1462 = trunc i64 %add1461 to i32
  %mul1463 = mul nsw i32 0, %conv1462
  %327 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1464 = call i64 @SBYTES(i64 %327)
  %conv1465 = trunc i64 %call1464 to i32
  %add1466 = add nsw i32 %mul1463, %conv1465
  %mul1467 = mul nsw i32 0, %add1466
  %add1468 = add nsw i32 %mul1467, 1
  %shl1469 = shl i32 %add1468, 30
  %sub1470 = sub nsw i32 %shl1469, 1
  %mul1471 = mul nsw i32 %sub1470, 2
  %add1472 = add nsw i32 %mul1471, 1
  %sub1473 = sub nsw i32 %sub1459, %add1472
  br label %cond.end.1484

cond.false.1474:                                  ; preds = %cond.true.1432
  %328 = load i64, i64* %system_name, align 8
  %call1475 = call i64 @SBYTES(i64 %328)
  %add1476 = add nsw i64 %call1475, 2
  %conv1477 = trunc i64 %add1476 to i32
  %mul1478 = mul nsw i32 0, %conv1477
  %329 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1479 = call i64 @SBYTES(i64 %329)
  %conv1480 = trunc i64 %call1479 to i32
  %add1481 = add nsw i32 %mul1478, %conv1480
  %mul1482 = mul nsw i32 0, %add1481
  %add1483 = add nsw i32 %mul1482, 0
  br label %cond.end.1484

cond.end.1484:                                    ; preds = %cond.false.1474, %cond.true.1446
  %cond1485 = phi i32 [ %sub1473, %cond.true.1446 ], [ %add1483, %cond.false.1474 ]
  %330 = load i64, i64* %system_name, align 8
  %call1486 = call i64 @SBYTES(i64 %330)
  %add1487 = add nsw i64 %call1486, 2
  %conv1488 = trunc i64 %add1487 to i32
  %sub1489 = sub nsw i32 %cond1485, %conv1488
  %cmp1490 = icmp slt i32 %conv1434, %sub1489
  br i1 %cmp1490, label %cond.true.1613, label %lor.lhs.false.1584

cond.false.1492:                                  ; preds = %cond.true.1426
  %331 = load i64, i64* %system_name, align 8
  %call1493 = call i64 @SBYTES(i64 %331)
  %add1494 = add nsw i64 %call1493, 2
  %conv1495 = trunc i64 %add1494 to i32
  %mul1496 = mul nsw i32 0, %conv1495
  %332 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1497 = call i64 @SBYTES(i64 %332)
  %conv1498 = trunc i64 %call1497 to i32
  %add1499 = add nsw i32 %mul1496, %conv1498
  %mul1500 = mul nsw i32 0, %add1499
  %sub1501 = sub nsw i32 %mul1500, 1
  %cmp1502 = icmp slt i32 %sub1501, 0
  br i1 %cmp1502, label %cond.true.1504, label %cond.false.1518

cond.true.1504:                                   ; preds = %cond.false.1492
  %333 = load i64, i64* %system_name, align 8
  %call1505 = call i64 @SBYTES(i64 %333)
  %add1506 = add nsw i64 %call1505, 2
  %conv1507 = trunc i64 %add1506 to i32
  %mul1508 = mul nsw i32 0, %conv1507
  %334 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1509 = call i64 @SBYTES(i64 %334)
  %conv1510 = trunc i64 %call1509 to i32
  %add1511 = add nsw i32 %mul1508, %conv1510
  %mul1512 = mul nsw i32 0, %add1511
  %add1513 = add nsw i32 %mul1512, 1
  %shl1514 = shl i32 %add1513, 30
  %sub1515 = sub nsw i32 %shl1514, 1
  %mul1516 = mul nsw i32 %sub1515, 2
  %add1517 = add nsw i32 %mul1516, 1
  br label %cond.end.1528

cond.false.1518:                                  ; preds = %cond.false.1492
  %335 = load i64, i64* %system_name, align 8
  %call1519 = call i64 @SBYTES(i64 %335)
  %add1520 = add nsw i64 %call1519, 2
  %conv1521 = trunc i64 %add1520 to i32
  %mul1522 = mul nsw i32 0, %conv1521
  %336 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1523 = call i64 @SBYTES(i64 %336)
  %conv1524 = trunc i64 %call1523 to i32
  %add1525 = add nsw i32 %mul1522, %conv1524
  %mul1526 = mul nsw i32 0, %add1525
  %sub1527 = sub nsw i32 %mul1526, 1
  br label %cond.end.1528

cond.end.1528:                                    ; preds = %cond.false.1518, %cond.true.1504
  %cond1529 = phi i32 [ %add1517, %cond.true.1504 ], [ %sub1527, %cond.false.1518 ]
  %337 = load i64, i64* %system_name, align 8
  %call1530 = call i64 @SBYTES(i64 %337)
  %add1531 = add nsw i64 %call1530, 2
  %conv1532 = trunc i64 %add1531 to i32
  %sub1533 = sub nsw i32 %cond1529, %conv1532
  %338 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1534 = call i64 @SBYTES(i64 %338)
  %conv1535 = trunc i64 %call1534 to i32
  %cmp1536 = icmp slt i32 %sub1533, %conv1535
  br i1 %cmp1536, label %cond.true.1613, label %lor.lhs.false.1584

cond.false.1538:                                  ; preds = %cond.end.1422
  %339 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1539 = call i64 @SBYTES(i64 %339)
  %conv1540 = trunc i64 %call1539 to i32
  %cmp1541 = icmp slt i32 %conv1540, 0
  br i1 %cmp1541, label %cond.true.1543, label %cond.false.1555

cond.true.1543:                                   ; preds = %cond.false.1538
  %340 = load i64, i64* %system_name, align 8
  %call1544 = call i64 @SBYTES(i64 %340)
  %add1545 = add nsw i64 %call1544, 2
  %conv1546 = trunc i64 %add1545 to i32
  %341 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1547 = call i64 @SBYTES(i64 %341)
  %conv1548 = trunc i64 %call1547 to i32
  %342 = load i64, i64* %system_name, align 8
  %call1549 = call i64 @SBYTES(i64 %342)
  %add1550 = add nsw i64 %call1549, 2
  %conv1551 = trunc i64 %add1550 to i32
  %add1552 = add nsw i32 %conv1548, %conv1551
  %cmp1553 = icmp sle i32 %conv1546, %add1552
  br i1 %cmp1553, label %cond.true.1613, label %lor.lhs.false.1584

cond.false.1555:                                  ; preds = %cond.false.1538
  %343 = load i64, i64* %system_name, align 8
  %call1556 = call i64 @SBYTES(i64 %343)
  %add1557 = add nsw i64 %call1556, 2
  %conv1558 = trunc i64 %add1557 to i32
  %cmp1559 = icmp slt i32 %conv1558, 0
  br i1 %cmp1559, label %cond.true.1561, label %cond.false.1572

cond.true.1561:                                   ; preds = %cond.false.1555
  %344 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1562 = call i64 @SBYTES(i64 %344)
  %conv1563 = trunc i64 %call1562 to i32
  %345 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1564 = call i64 @SBYTES(i64 %345)
  %conv1565 = trunc i64 %call1564 to i32
  %346 = load i64, i64* %system_name, align 8
  %call1566 = call i64 @SBYTES(i64 %346)
  %add1567 = add nsw i64 %call1566, 2
  %conv1568 = trunc i64 %add1567 to i32
  %add1569 = add nsw i32 %conv1565, %conv1568
  %cmp1570 = icmp sle i32 %conv1563, %add1569
  br i1 %cmp1570, label %cond.true.1613, label %lor.lhs.false.1584

cond.false.1572:                                  ; preds = %cond.false.1555
  %347 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1573 = call i64 @SBYTES(i64 %347)
  %conv1574 = trunc i64 %call1573 to i32
  %348 = load i64, i64* %system_name, align 8
  %call1575 = call i64 @SBYTES(i64 %348)
  %add1576 = add nsw i64 %call1575, 2
  %conv1577 = trunc i64 %add1576 to i32
  %add1578 = add nsw i32 %conv1574, %conv1577
  %349 = load i64, i64* %system_name, align 8
  %call1579 = call i64 @SBYTES(i64 %349)
  %add1580 = add nsw i64 %call1579, 2
  %conv1581 = trunc i64 %add1580 to i32
  %cmp1582 = icmp slt i32 %add1578, %conv1581
  br i1 %cmp1582, label %cond.true.1613, label %lor.lhs.false.1584

lor.lhs.false.1584:                               ; preds = %cond.false.1572, %cond.true.1561, %cond.true.1543, %cond.end.1528, %cond.end.1484
  %350 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1585 = call i64 @SBYTES(i64 %350)
  %conv1586 = trunc i64 %call1585 to i32
  %351 = load i64, i64* %system_name, align 8
  %call1587 = call i64 @SBYTES(i64 %351)
  %add1588 = add nsw i64 %call1587, 2
  %conv1589 = trunc i64 %add1588 to i32
  %add1590 = add nsw i32 %conv1586, %conv1589
  %mul1591 = mul nsw i32 0, %add1590
  %sub1592 = sub nsw i32 %mul1591, 1
  %cmp1593 = icmp slt i32 %sub1592, 0
  br i1 %cmp1593, label %land.lhs.true.1595, label %lor.lhs.false.1604

land.lhs.true.1595:                               ; preds = %lor.lhs.false.1584
  %352 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1596 = call i64 @SBYTES(i64 %352)
  %conv1597 = trunc i64 %call1596 to i32
  %353 = load i64, i64* %system_name, align 8
  %call1598 = call i64 @SBYTES(i64 %353)
  %add1599 = add nsw i64 %call1598, 2
  %conv1600 = trunc i64 %add1599 to i32
  %add1601 = add nsw i32 %conv1597, %conv1600
  %cmp1602 = icmp slt i32 %add1601, -2147483648
  br i1 %cmp1602, label %cond.true.1613, label %lor.lhs.false.1604

lor.lhs.false.1604:                               ; preds = %land.lhs.true.1595, %lor.lhs.false.1584
  %354 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1605 = call i64 @SBYTES(i64 %354)
  %conv1606 = trunc i64 %call1605 to i32
  %355 = load i64, i64* %system_name, align 8
  %call1607 = call i64 @SBYTES(i64 %355)
  %add1608 = add nsw i64 %call1607, 2
  %conv1609 = trunc i64 %add1608 to i32
  %add1610 = add nsw i32 %conv1606, %conv1609
  %cmp1611 = icmp slt i32 2147483647, %add1610
  br i1 %cmp1611, label %cond.true.1613, label %cond.false.1641

cond.true.1613:                                   ; preds = %lor.lhs.false.1604, %land.lhs.true.1595, %cond.false.1572, %cond.true.1561, %cond.true.1543, %cond.end.1528, %cond.end.1484
  %356 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1614 = call i64 @SBYTES(i64 %356)
  %conv1615 = trunc i64 %call1614 to i32
  %357 = load i64, i64* %system_name, align 8
  %call1616 = call i64 @SBYTES(i64 %357)
  %add1617 = add nsw i64 %call1616, 2
  %conv1618 = trunc i64 %add1617 to i32
  %add1619 = add i32 %conv1615, %conv1618
  %cmp1620 = icmp ule i32 %add1619, 2147483647
  br i1 %cmp1620, label %cond.true.1622, label %cond.false.1629

cond.true.1622:                                   ; preds = %cond.true.1613
  %358 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1623 = call i64 @SBYTES(i64 %358)
  %conv1624 = trunc i64 %call1623 to i32
  %359 = load i64, i64* %system_name, align 8
  %call1625 = call i64 @SBYTES(i64 %359)
  %add1626 = add nsw i64 %call1625, 2
  %conv1627 = trunc i64 %add1626 to i32
  %add1628 = add i32 %conv1624, %conv1627
  br label %cond.end.1638

cond.false.1629:                                  ; preds = %cond.true.1613
  %360 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1630 = call i64 @SBYTES(i64 %360)
  %conv1631 = trunc i64 %call1630 to i32
  %361 = load i64, i64* %system_name, align 8
  %call1632 = call i64 @SBYTES(i64 %361)
  %add1633 = add nsw i64 %call1632, 2
  %conv1634 = trunc i64 %add1633 to i32
  %add1635 = add i32 %conv1631, %conv1634
  %sub1636 = sub i32 %add1635, -2147483648
  %add1637 = add nsw i32 %sub1636, -2147483648
  br label %cond.end.1638

cond.end.1638:                                    ; preds = %cond.false.1629, %cond.true.1622
  %cond1639 = phi i32 [ %add1628, %cond.true.1622 ], [ %add1637, %cond.false.1629 ]
  %conv1640 = sext i32 %cond1639 to i64
  store i64 %conv1640, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.1641:                                  ; preds = %lor.lhs.false.1604
  %362 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1642 = call i64 @SBYTES(i64 %362)
  %conv1643 = trunc i64 %call1642 to i32
  %363 = load i64, i64* %system_name, align 8
  %call1644 = call i64 @SBYTES(i64 %363)
  %add1645 = add nsw i64 %call1644, 2
  %conv1646 = trunc i64 %add1645 to i32
  %add1647 = add i32 %conv1643, %conv1646
  %cmp1648 = icmp ule i32 %add1647, 2147483647
  br i1 %cmp1648, label %cond.true.1650, label %cond.false.1657

cond.true.1650:                                   ; preds = %cond.false.1641
  %364 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1651 = call i64 @SBYTES(i64 %364)
  %conv1652 = trunc i64 %call1651 to i32
  %365 = load i64, i64* %system_name, align 8
  %call1653 = call i64 @SBYTES(i64 %365)
  %add1654 = add nsw i64 %call1653, 2
  %conv1655 = trunc i64 %add1654 to i32
  %add1656 = add i32 %conv1652, %conv1655
  br label %cond.end.1666

cond.false.1657:                                  ; preds = %cond.false.1641
  %366 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1658 = call i64 @SBYTES(i64 %366)
  %conv1659 = trunc i64 %call1658 to i32
  %367 = load i64, i64* %system_name, align 8
  %call1660 = call i64 @SBYTES(i64 %367)
  %add1661 = add nsw i64 %call1660, 2
  %conv1662 = trunc i64 %add1661 to i32
  %add1663 = add i32 %conv1659, %conv1662
  %sub1664 = sub i32 %add1663, -2147483648
  %add1665 = add nsw i32 %sub1664, -2147483648
  br label %cond.end.1666

cond.end.1666:                                    ; preds = %cond.false.1657, %cond.true.1650
  %cond1667 = phi i32 [ %add1656, %cond.true.1650 ], [ %add1665, %cond.false.1657 ]
  %conv1668 = sext i32 %cond1667 to i64
  store i64 %conv1668, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.1669:                                  ; preds = %cond.true.1371
  %368 = load i64, i64* %system_name, align 8
  %call1670 = call i64 @SBYTES(i64 %368)
  %add1671 = add nsw i64 %call1670, 2
  %mul1672 = mul nsw i64 0, %add1671
  %369 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1673 = call i64 @SBYTES(i64 %369)
  %add1674 = add nsw i64 %mul1672, %call1673
  %mul1675 = mul nsw i64 0, %add1674
  %sub1676 = sub nsw i64 %mul1675, 1
  %cmp1677 = icmp slt i64 %sub1676, 0
  br i1 %cmp1677, label %cond.true.1679, label %cond.false.1704

cond.true.1679:                                   ; preds = %cond.false.1669
  %370 = load i64, i64* %system_name, align 8
  %call1680 = call i64 @SBYTES(i64 %370)
  %add1681 = add nsw i64 %call1680, 2
  %mul1682 = mul nsw i64 0, %add1681
  %371 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1683 = call i64 @SBYTES(i64 %371)
  %add1684 = add nsw i64 %mul1682, %call1683
  %mul1685 = mul nsw i64 0, %add1684
  %add1686 = add nsw i64 %mul1685, 0
  %neg1687 = xor i64 %add1686, -1
  %cmp1688 = icmp eq i64 %neg1687, -1
  %conv1689 = zext i1 %cmp1688 to i32
  %sub1690 = sub nsw i32 0, %conv1689
  %conv1691 = sext i32 %sub1690 to i64
  %372 = load i64, i64* %system_name, align 8
  %call1692 = call i64 @SBYTES(i64 %372)
  %add1693 = add nsw i64 %call1692, 2
  %mul1694 = mul nsw i64 0, %add1693
  %373 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1695 = call i64 @SBYTES(i64 %373)
  %add1696 = add nsw i64 %mul1694, %call1695
  %mul1697 = mul nsw i64 0, %add1696
  %add1698 = add nsw i64 %mul1697, 1
  %shl1699 = shl i64 %add1698, 62
  %sub1700 = sub nsw i64 %shl1699, 1
  %mul1701 = mul nsw i64 %sub1700, 2
  %add1702 = add nsw i64 %mul1701, 1
  %sub1703 = sub nsw i64 %conv1691, %add1702
  br label %cond.end.1712

cond.false.1704:                                  ; preds = %cond.false.1669
  %374 = load i64, i64* %system_name, align 8
  %call1705 = call i64 @SBYTES(i64 %374)
  %add1706 = add nsw i64 %call1705, 2
  %mul1707 = mul nsw i64 0, %add1706
  %375 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1708 = call i64 @SBYTES(i64 %375)
  %add1709 = add nsw i64 %mul1707, %call1708
  %mul1710 = mul nsw i64 0, %add1709
  %add1711 = add nsw i64 %mul1710, 0
  br label %cond.end.1712

cond.end.1712:                                    ; preds = %cond.false.1704, %cond.true.1679
  %cond1713 = phi i64 [ %sub1703, %cond.true.1679 ], [ %add1711, %cond.false.1704 ]
  %cmp1714 = icmp slt i64 %cond1713, 0
  br i1 %cmp1714, label %cond.true.1716, label %cond.false.1810

cond.true.1716:                                   ; preds = %cond.end.1712
  %376 = load i64, i64* %system_name, align 8
  %call1717 = call i64 @SBYTES(i64 %376)
  %add1718 = add nsw i64 %call1717, 2
  %cmp1719 = icmp slt i64 %add1718, 0
  br i1 %cmp1719, label %cond.true.1721, label %cond.false.1772

cond.true.1721:                                   ; preds = %cond.true.1716
  %377 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1722 = call i64 @SBYTES(i64 %377)
  %378 = load i64, i64* %system_name, align 8
  %call1723 = call i64 @SBYTES(i64 %378)
  %add1724 = add nsw i64 %call1723, 2
  %mul1725 = mul nsw i64 0, %add1724
  %379 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1726 = call i64 @SBYTES(i64 %379)
  %add1727 = add nsw i64 %mul1725, %call1726
  %mul1728 = mul nsw i64 0, %add1727
  %sub1729 = sub nsw i64 %mul1728, 1
  %cmp1730 = icmp slt i64 %sub1729, 0
  br i1 %cmp1730, label %cond.true.1732, label %cond.false.1757

cond.true.1732:                                   ; preds = %cond.true.1721
  %380 = load i64, i64* %system_name, align 8
  %call1733 = call i64 @SBYTES(i64 %380)
  %add1734 = add nsw i64 %call1733, 2
  %mul1735 = mul nsw i64 0, %add1734
  %381 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1736 = call i64 @SBYTES(i64 %381)
  %add1737 = add nsw i64 %mul1735, %call1736
  %mul1738 = mul nsw i64 0, %add1737
  %add1739 = add nsw i64 %mul1738, 0
  %neg1740 = xor i64 %add1739, -1
  %cmp1741 = icmp eq i64 %neg1740, -1
  %conv1742 = zext i1 %cmp1741 to i32
  %sub1743 = sub nsw i32 0, %conv1742
  %conv1744 = sext i32 %sub1743 to i64
  %382 = load i64, i64* %system_name, align 8
  %call1745 = call i64 @SBYTES(i64 %382)
  %add1746 = add nsw i64 %call1745, 2
  %mul1747 = mul nsw i64 0, %add1746
  %383 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1748 = call i64 @SBYTES(i64 %383)
  %add1749 = add nsw i64 %mul1747, %call1748
  %mul1750 = mul nsw i64 0, %add1749
  %add1751 = add nsw i64 %mul1750, 1
  %shl1752 = shl i64 %add1751, 62
  %sub1753 = sub nsw i64 %shl1752, 1
  %mul1754 = mul nsw i64 %sub1753, 2
  %add1755 = add nsw i64 %mul1754, 1
  %sub1756 = sub nsw i64 %conv1744, %add1755
  br label %cond.end.1765

cond.false.1757:                                  ; preds = %cond.true.1721
  %384 = load i64, i64* %system_name, align 8
  %call1758 = call i64 @SBYTES(i64 %384)
  %add1759 = add nsw i64 %call1758, 2
  %mul1760 = mul nsw i64 0, %add1759
  %385 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1761 = call i64 @SBYTES(i64 %385)
  %add1762 = add nsw i64 %mul1760, %call1761
  %mul1763 = mul nsw i64 0, %add1762
  %add1764 = add nsw i64 %mul1763, 0
  br label %cond.end.1765

cond.end.1765:                                    ; preds = %cond.false.1757, %cond.true.1732
  %cond1766 = phi i64 [ %sub1756, %cond.true.1732 ], [ %add1764, %cond.false.1757 ]
  %386 = load i64, i64* %system_name, align 8
  %call1767 = call i64 @SBYTES(i64 %386)
  %add1768 = add nsw i64 %call1767, 2
  %sub1769 = sub nsw i64 %cond1766, %add1768
  %cmp1770 = icmp slt i64 %call1722, %sub1769
  br i1 %cmp1770, label %cond.true.1868, label %lor.lhs.false.1845

cond.false.1772:                                  ; preds = %cond.true.1716
  %387 = load i64, i64* %system_name, align 8
  %call1773 = call i64 @SBYTES(i64 %387)
  %add1774 = add nsw i64 %call1773, 2
  %mul1775 = mul nsw i64 0, %add1774
  %388 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1776 = call i64 @SBYTES(i64 %388)
  %add1777 = add nsw i64 %mul1775, %call1776
  %mul1778 = mul nsw i64 0, %add1777
  %sub1779 = sub nsw i64 %mul1778, 1
  %cmp1780 = icmp slt i64 %sub1779, 0
  br i1 %cmp1780, label %cond.true.1782, label %cond.false.1794

cond.true.1782:                                   ; preds = %cond.false.1772
  %389 = load i64, i64* %system_name, align 8
  %call1783 = call i64 @SBYTES(i64 %389)
  %add1784 = add nsw i64 %call1783, 2
  %mul1785 = mul nsw i64 0, %add1784
  %390 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1786 = call i64 @SBYTES(i64 %390)
  %add1787 = add nsw i64 %mul1785, %call1786
  %mul1788 = mul nsw i64 0, %add1787
  %add1789 = add nsw i64 %mul1788, 1
  %shl1790 = shl i64 %add1789, 62
  %sub1791 = sub nsw i64 %shl1790, 1
  %mul1792 = mul nsw i64 %sub1791, 2
  %add1793 = add nsw i64 %mul1792, 1
  br label %cond.end.1802

cond.false.1794:                                  ; preds = %cond.false.1772
  %391 = load i64, i64* %system_name, align 8
  %call1795 = call i64 @SBYTES(i64 %391)
  %add1796 = add nsw i64 %call1795, 2
  %mul1797 = mul nsw i64 0, %add1796
  %392 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1798 = call i64 @SBYTES(i64 %392)
  %add1799 = add nsw i64 %mul1797, %call1798
  %mul1800 = mul nsw i64 0, %add1799
  %sub1801 = sub nsw i64 %mul1800, 1
  br label %cond.end.1802

cond.end.1802:                                    ; preds = %cond.false.1794, %cond.true.1782
  %cond1803 = phi i64 [ %add1793, %cond.true.1782 ], [ %sub1801, %cond.false.1794 ]
  %393 = load i64, i64* %system_name, align 8
  %call1804 = call i64 @SBYTES(i64 %393)
  %add1805 = add nsw i64 %call1804, 2
  %sub1806 = sub nsw i64 %cond1803, %add1805
  %394 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1807 = call i64 @SBYTES(i64 %394)
  %cmp1808 = icmp slt i64 %sub1806, %call1807
  br i1 %cmp1808, label %cond.true.1868, label %lor.lhs.false.1845

cond.false.1810:                                  ; preds = %cond.end.1712
  %395 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1811 = call i64 @SBYTES(i64 %395)
  %cmp1812 = icmp slt i64 %call1811, 0
  br i1 %cmp1812, label %cond.true.1814, label %cond.false.1823

cond.true.1814:                                   ; preds = %cond.false.1810
  %396 = load i64, i64* %system_name, align 8
  %call1815 = call i64 @SBYTES(i64 %396)
  %add1816 = add nsw i64 %call1815, 2
  %397 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1817 = call i64 @SBYTES(i64 %397)
  %398 = load i64, i64* %system_name, align 8
  %call1818 = call i64 @SBYTES(i64 %398)
  %add1819 = add nsw i64 %call1818, 2
  %add1820 = add nsw i64 %call1817, %add1819
  %cmp1821 = icmp sle i64 %add1816, %add1820
  br i1 %cmp1821, label %cond.true.1868, label %lor.lhs.false.1845

cond.false.1823:                                  ; preds = %cond.false.1810
  %399 = load i64, i64* %system_name, align 8
  %call1824 = call i64 @SBYTES(i64 %399)
  %add1825 = add nsw i64 %call1824, 2
  %cmp1826 = icmp slt i64 %add1825, 0
  br i1 %cmp1826, label %cond.true.1828, label %cond.false.1836

cond.true.1828:                                   ; preds = %cond.false.1823
  %400 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1829 = call i64 @SBYTES(i64 %400)
  %401 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1830 = call i64 @SBYTES(i64 %401)
  %402 = load i64, i64* %system_name, align 8
  %call1831 = call i64 @SBYTES(i64 %402)
  %add1832 = add nsw i64 %call1831, 2
  %add1833 = add nsw i64 %call1830, %add1832
  %cmp1834 = icmp sle i64 %call1829, %add1833
  br i1 %cmp1834, label %cond.true.1868, label %lor.lhs.false.1845

cond.false.1836:                                  ; preds = %cond.false.1823
  %403 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1837 = call i64 @SBYTES(i64 %403)
  %404 = load i64, i64* %system_name, align 8
  %call1838 = call i64 @SBYTES(i64 %404)
  %add1839 = add nsw i64 %call1838, 2
  %add1840 = add nsw i64 %call1837, %add1839
  %405 = load i64, i64* %system_name, align 8
  %call1841 = call i64 @SBYTES(i64 %405)
  %add1842 = add nsw i64 %call1841, 2
  %cmp1843 = icmp slt i64 %add1840, %add1842
  br i1 %cmp1843, label %cond.true.1868, label %lor.lhs.false.1845

lor.lhs.false.1845:                               ; preds = %cond.false.1836, %cond.true.1828, %cond.true.1814, %cond.end.1802, %cond.end.1765
  %406 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1846 = call i64 @SBYTES(i64 %406)
  %407 = load i64, i64* %system_name, align 8
  %call1847 = call i64 @SBYTES(i64 %407)
  %add1848 = add nsw i64 %call1847, 2
  %add1849 = add nsw i64 %call1846, %add1848
  %mul1850 = mul nsw i64 0, %add1849
  %sub1851 = sub nsw i64 %mul1850, 1
  %cmp1852 = icmp slt i64 %sub1851, 0
  br i1 %cmp1852, label %land.lhs.true.1854, label %lor.lhs.false.1861

land.lhs.true.1854:                               ; preds = %lor.lhs.false.1845
  %408 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1855 = call i64 @SBYTES(i64 %408)
  %409 = load i64, i64* %system_name, align 8
  %call1856 = call i64 @SBYTES(i64 %409)
  %add1857 = add nsw i64 %call1856, 2
  %add1858 = add nsw i64 %call1855, %add1857
  %cmp1859 = icmp slt i64 %add1858, -2147483648
  br i1 %cmp1859, label %cond.true.1868, label %lor.lhs.false.1861

lor.lhs.false.1861:                               ; preds = %land.lhs.true.1854, %lor.lhs.false.1845
  %410 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1862 = call i64 @SBYTES(i64 %410)
  %411 = load i64, i64* %system_name, align 8
  %call1863 = call i64 @SBYTES(i64 %411)
  %add1864 = add nsw i64 %call1863, 2
  %add1865 = add nsw i64 %call1862, %add1864
  %cmp1866 = icmp slt i64 2147483647, %add1865
  br i1 %cmp1866, label %cond.true.1868, label %cond.false.1896

cond.true.1868:                                   ; preds = %lor.lhs.false.1861, %land.lhs.true.1854, %cond.false.1836, %cond.true.1828, %cond.true.1814, %cond.end.1802, %cond.end.1765
  %412 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1869 = call i64 @SBYTES(i64 %412)
  %conv1870 = trunc i64 %call1869 to i32
  %413 = load i64, i64* %system_name, align 8
  %call1871 = call i64 @SBYTES(i64 %413)
  %add1872 = add nsw i64 %call1871, 2
  %conv1873 = trunc i64 %add1872 to i32
  %add1874 = add i32 %conv1870, %conv1873
  %cmp1875 = icmp ule i32 %add1874, 2147483647
  br i1 %cmp1875, label %cond.true.1877, label %cond.false.1884

cond.true.1877:                                   ; preds = %cond.true.1868
  %414 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1878 = call i64 @SBYTES(i64 %414)
  %conv1879 = trunc i64 %call1878 to i32
  %415 = load i64, i64* %system_name, align 8
  %call1880 = call i64 @SBYTES(i64 %415)
  %add1881 = add nsw i64 %call1880, 2
  %conv1882 = trunc i64 %add1881 to i32
  %add1883 = add i32 %conv1879, %conv1882
  br label %cond.end.1893

cond.false.1884:                                  ; preds = %cond.true.1868
  %416 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1885 = call i64 @SBYTES(i64 %416)
  %conv1886 = trunc i64 %call1885 to i32
  %417 = load i64, i64* %system_name, align 8
  %call1887 = call i64 @SBYTES(i64 %417)
  %add1888 = add nsw i64 %call1887, 2
  %conv1889 = trunc i64 %add1888 to i32
  %add1890 = add i32 %conv1886, %conv1889
  %sub1891 = sub i32 %add1890, -2147483648
  %add1892 = add nsw i32 %sub1891, -2147483648
  br label %cond.end.1893

cond.end.1893:                                    ; preds = %cond.false.1884, %cond.true.1877
  %cond1894 = phi i32 [ %add1883, %cond.true.1877 ], [ %add1892, %cond.false.1884 ]
  %conv1895 = sext i32 %cond1894 to i64
  store i64 %conv1895, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.1896:                                  ; preds = %lor.lhs.false.1861
  %418 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1897 = call i64 @SBYTES(i64 %418)
  %conv1898 = trunc i64 %call1897 to i32
  %419 = load i64, i64* %system_name, align 8
  %call1899 = call i64 @SBYTES(i64 %419)
  %add1900 = add nsw i64 %call1899, 2
  %conv1901 = trunc i64 %add1900 to i32
  %add1902 = add i32 %conv1898, %conv1901
  %cmp1903 = icmp ule i32 %add1902, 2147483647
  br i1 %cmp1903, label %cond.true.1905, label %cond.false.1912

cond.true.1905:                                   ; preds = %cond.false.1896
  %420 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1906 = call i64 @SBYTES(i64 %420)
  %conv1907 = trunc i64 %call1906 to i32
  %421 = load i64, i64* %system_name, align 8
  %call1908 = call i64 @SBYTES(i64 %421)
  %add1909 = add nsw i64 %call1908, 2
  %conv1910 = trunc i64 %add1909 to i32
  %add1911 = add i32 %conv1907, %conv1910
  br label %cond.end.1921

cond.false.1912:                                  ; preds = %cond.false.1896
  %422 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1913 = call i64 @SBYTES(i64 %422)
  %conv1914 = trunc i64 %call1913 to i32
  %423 = load i64, i64* %system_name, align 8
  %call1915 = call i64 @SBYTES(i64 %423)
  %add1916 = add nsw i64 %call1915, 2
  %conv1917 = trunc i64 %add1916 to i32
  %add1918 = add i32 %conv1914, %conv1917
  %sub1919 = sub i32 %add1918, -2147483648
  %add1920 = add nsw i32 %sub1919, -2147483648
  br label %cond.end.1921

cond.end.1921:                                    ; preds = %cond.false.1912, %cond.true.1905
  %cond1922 = phi i32 [ %add1911, %cond.true.1905 ], [ %add1920, %cond.false.1912 ]
  %conv1923 = sext i32 %cond1922 to i64
  store i64 %conv1923, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.1924:                                  ; preds = %cond.false.1370
  br i1 true, label %cond.true.1925, label %cond.false.2408

cond.true.1925:                                   ; preds = %cond.false.1924
  br i1 false, label %cond.true.1926, label %cond.false.2167

cond.true.1926:                                   ; preds = %cond.true.1925
  %424 = load i64, i64* %system_name, align 8
  %call1927 = call i64 @SBYTES(i64 %424)
  %add1928 = add nsw i64 %call1927, 2
  %mul1929 = mul nsw i64 0, %add1928
  %425 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1930 = call i64 @SBYTES(i64 %425)
  %add1931 = add nsw i64 %mul1929, %call1930
  %mul1932 = mul nsw i64 0, %add1931
  %sub1933 = sub nsw i64 %mul1932, 1
  %cmp1934 = icmp slt i64 %sub1933, 0
  br i1 %cmp1934, label %cond.true.1936, label %cond.false.1961

cond.true.1936:                                   ; preds = %cond.true.1926
  %426 = load i64, i64* %system_name, align 8
  %call1937 = call i64 @SBYTES(i64 %426)
  %add1938 = add nsw i64 %call1937, 2
  %mul1939 = mul nsw i64 0, %add1938
  %427 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1940 = call i64 @SBYTES(i64 %427)
  %add1941 = add nsw i64 %mul1939, %call1940
  %mul1942 = mul nsw i64 0, %add1941
  %add1943 = add nsw i64 %mul1942, 0
  %neg1944 = xor i64 %add1943, -1
  %cmp1945 = icmp eq i64 %neg1944, -1
  %conv1946 = zext i1 %cmp1945 to i32
  %sub1947 = sub nsw i32 0, %conv1946
  %conv1948 = sext i32 %sub1947 to i64
  %428 = load i64, i64* %system_name, align 8
  %call1949 = call i64 @SBYTES(i64 %428)
  %add1950 = add nsw i64 %call1949, 2
  %mul1951 = mul nsw i64 0, %add1950
  %429 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1952 = call i64 @SBYTES(i64 %429)
  %add1953 = add nsw i64 %mul1951, %call1952
  %mul1954 = mul nsw i64 0, %add1953
  %add1955 = add nsw i64 %mul1954, 1
  %shl1956 = shl i64 %add1955, 62
  %sub1957 = sub nsw i64 %shl1956, 1
  %mul1958 = mul nsw i64 %sub1957, 2
  %add1959 = add nsw i64 %mul1958, 1
  %sub1960 = sub nsw i64 %conv1948, %add1959
  br label %cond.end.1969

cond.false.1961:                                  ; preds = %cond.true.1926
  %430 = load i64, i64* %system_name, align 8
  %call1962 = call i64 @SBYTES(i64 %430)
  %add1963 = add nsw i64 %call1962, 2
  %mul1964 = mul nsw i64 0, %add1963
  %431 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1965 = call i64 @SBYTES(i64 %431)
  %add1966 = add nsw i64 %mul1964, %call1965
  %mul1967 = mul nsw i64 0, %add1966
  %add1968 = add nsw i64 %mul1967, 0
  br label %cond.end.1969

cond.end.1969:                                    ; preds = %cond.false.1961, %cond.true.1936
  %cond1970 = phi i64 [ %sub1960, %cond.true.1936 ], [ %add1968, %cond.false.1961 ]
  %cmp1971 = icmp slt i64 %cond1970, 0
  br i1 %cmp1971, label %cond.true.1973, label %cond.false.2067

cond.true.1973:                                   ; preds = %cond.end.1969
  %432 = load i64, i64* %system_name, align 8
  %call1974 = call i64 @SBYTES(i64 %432)
  %add1975 = add nsw i64 %call1974, 2
  %cmp1976 = icmp slt i64 %add1975, 0
  br i1 %cmp1976, label %cond.true.1978, label %cond.false.2029

cond.true.1978:                                   ; preds = %cond.true.1973
  %433 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1979 = call i64 @SBYTES(i64 %433)
  %434 = load i64, i64* %system_name, align 8
  %call1980 = call i64 @SBYTES(i64 %434)
  %add1981 = add nsw i64 %call1980, 2
  %mul1982 = mul nsw i64 0, %add1981
  %435 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1983 = call i64 @SBYTES(i64 %435)
  %add1984 = add nsw i64 %mul1982, %call1983
  %mul1985 = mul nsw i64 0, %add1984
  %sub1986 = sub nsw i64 %mul1985, 1
  %cmp1987 = icmp slt i64 %sub1986, 0
  br i1 %cmp1987, label %cond.true.1989, label %cond.false.2014

cond.true.1989:                                   ; preds = %cond.true.1978
  %436 = load i64, i64* %system_name, align 8
  %call1990 = call i64 @SBYTES(i64 %436)
  %add1991 = add nsw i64 %call1990, 2
  %mul1992 = mul nsw i64 0, %add1991
  %437 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call1993 = call i64 @SBYTES(i64 %437)
  %add1994 = add nsw i64 %mul1992, %call1993
  %mul1995 = mul nsw i64 0, %add1994
  %add1996 = add nsw i64 %mul1995, 0
  %neg1997 = xor i64 %add1996, -1
  %cmp1998 = icmp eq i64 %neg1997, -1
  %conv1999 = zext i1 %cmp1998 to i32
  %sub2000 = sub nsw i32 0, %conv1999
  %conv2001 = sext i32 %sub2000 to i64
  %438 = load i64, i64* %system_name, align 8
  %call2002 = call i64 @SBYTES(i64 %438)
  %add2003 = add nsw i64 %call2002, 2
  %mul2004 = mul nsw i64 0, %add2003
  %439 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2005 = call i64 @SBYTES(i64 %439)
  %add2006 = add nsw i64 %mul2004, %call2005
  %mul2007 = mul nsw i64 0, %add2006
  %add2008 = add nsw i64 %mul2007, 1
  %shl2009 = shl i64 %add2008, 62
  %sub2010 = sub nsw i64 %shl2009, 1
  %mul2011 = mul nsw i64 %sub2010, 2
  %add2012 = add nsw i64 %mul2011, 1
  %sub2013 = sub nsw i64 %conv2001, %add2012
  br label %cond.end.2022

cond.false.2014:                                  ; preds = %cond.true.1978
  %440 = load i64, i64* %system_name, align 8
  %call2015 = call i64 @SBYTES(i64 %440)
  %add2016 = add nsw i64 %call2015, 2
  %mul2017 = mul nsw i64 0, %add2016
  %441 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2018 = call i64 @SBYTES(i64 %441)
  %add2019 = add nsw i64 %mul2017, %call2018
  %mul2020 = mul nsw i64 0, %add2019
  %add2021 = add nsw i64 %mul2020, 0
  br label %cond.end.2022

cond.end.2022:                                    ; preds = %cond.false.2014, %cond.true.1989
  %cond2023 = phi i64 [ %sub2013, %cond.true.1989 ], [ %add2021, %cond.false.2014 ]
  %442 = load i64, i64* %system_name, align 8
  %call2024 = call i64 @SBYTES(i64 %442)
  %add2025 = add nsw i64 %call2024, 2
  %sub2026 = sub nsw i64 %cond2023, %add2025
  %cmp2027 = icmp slt i64 %call1979, %sub2026
  br i1 %cmp2027, label %cond.true.2125, label %lor.lhs.false.2102

cond.false.2029:                                  ; preds = %cond.true.1973
  %443 = load i64, i64* %system_name, align 8
  %call2030 = call i64 @SBYTES(i64 %443)
  %add2031 = add nsw i64 %call2030, 2
  %mul2032 = mul nsw i64 0, %add2031
  %444 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2033 = call i64 @SBYTES(i64 %444)
  %add2034 = add nsw i64 %mul2032, %call2033
  %mul2035 = mul nsw i64 0, %add2034
  %sub2036 = sub nsw i64 %mul2035, 1
  %cmp2037 = icmp slt i64 %sub2036, 0
  br i1 %cmp2037, label %cond.true.2039, label %cond.false.2051

cond.true.2039:                                   ; preds = %cond.false.2029
  %445 = load i64, i64* %system_name, align 8
  %call2040 = call i64 @SBYTES(i64 %445)
  %add2041 = add nsw i64 %call2040, 2
  %mul2042 = mul nsw i64 0, %add2041
  %446 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2043 = call i64 @SBYTES(i64 %446)
  %add2044 = add nsw i64 %mul2042, %call2043
  %mul2045 = mul nsw i64 0, %add2044
  %add2046 = add nsw i64 %mul2045, 1
  %shl2047 = shl i64 %add2046, 62
  %sub2048 = sub nsw i64 %shl2047, 1
  %mul2049 = mul nsw i64 %sub2048, 2
  %add2050 = add nsw i64 %mul2049, 1
  br label %cond.end.2059

cond.false.2051:                                  ; preds = %cond.false.2029
  %447 = load i64, i64* %system_name, align 8
  %call2052 = call i64 @SBYTES(i64 %447)
  %add2053 = add nsw i64 %call2052, 2
  %mul2054 = mul nsw i64 0, %add2053
  %448 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2055 = call i64 @SBYTES(i64 %448)
  %add2056 = add nsw i64 %mul2054, %call2055
  %mul2057 = mul nsw i64 0, %add2056
  %sub2058 = sub nsw i64 %mul2057, 1
  br label %cond.end.2059

cond.end.2059:                                    ; preds = %cond.false.2051, %cond.true.2039
  %cond2060 = phi i64 [ %add2050, %cond.true.2039 ], [ %sub2058, %cond.false.2051 ]
  %449 = load i64, i64* %system_name, align 8
  %call2061 = call i64 @SBYTES(i64 %449)
  %add2062 = add nsw i64 %call2061, 2
  %sub2063 = sub nsw i64 %cond2060, %add2062
  %450 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2064 = call i64 @SBYTES(i64 %450)
  %cmp2065 = icmp slt i64 %sub2063, %call2064
  br i1 %cmp2065, label %cond.true.2125, label %lor.lhs.false.2102

cond.false.2067:                                  ; preds = %cond.end.1969
  %451 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2068 = call i64 @SBYTES(i64 %451)
  %cmp2069 = icmp slt i64 %call2068, 0
  br i1 %cmp2069, label %cond.true.2071, label %cond.false.2080

cond.true.2071:                                   ; preds = %cond.false.2067
  %452 = load i64, i64* %system_name, align 8
  %call2072 = call i64 @SBYTES(i64 %452)
  %add2073 = add nsw i64 %call2072, 2
  %453 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2074 = call i64 @SBYTES(i64 %453)
  %454 = load i64, i64* %system_name, align 8
  %call2075 = call i64 @SBYTES(i64 %454)
  %add2076 = add nsw i64 %call2075, 2
  %add2077 = add nsw i64 %call2074, %add2076
  %cmp2078 = icmp sle i64 %add2073, %add2077
  br i1 %cmp2078, label %cond.true.2125, label %lor.lhs.false.2102

cond.false.2080:                                  ; preds = %cond.false.2067
  %455 = load i64, i64* %system_name, align 8
  %call2081 = call i64 @SBYTES(i64 %455)
  %add2082 = add nsw i64 %call2081, 2
  %cmp2083 = icmp slt i64 %add2082, 0
  br i1 %cmp2083, label %cond.true.2085, label %cond.false.2093

cond.true.2085:                                   ; preds = %cond.false.2080
  %456 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2086 = call i64 @SBYTES(i64 %456)
  %457 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2087 = call i64 @SBYTES(i64 %457)
  %458 = load i64, i64* %system_name, align 8
  %call2088 = call i64 @SBYTES(i64 %458)
  %add2089 = add nsw i64 %call2088, 2
  %add2090 = add nsw i64 %call2087, %add2089
  %cmp2091 = icmp sle i64 %call2086, %add2090
  br i1 %cmp2091, label %cond.true.2125, label %lor.lhs.false.2102

cond.false.2093:                                  ; preds = %cond.false.2080
  %459 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2094 = call i64 @SBYTES(i64 %459)
  %460 = load i64, i64* %system_name, align 8
  %call2095 = call i64 @SBYTES(i64 %460)
  %add2096 = add nsw i64 %call2095, 2
  %add2097 = add nsw i64 %call2094, %add2096
  %461 = load i64, i64* %system_name, align 8
  %call2098 = call i64 @SBYTES(i64 %461)
  %add2099 = add nsw i64 %call2098, 2
  %cmp2100 = icmp slt i64 %add2097, %add2099
  br i1 %cmp2100, label %cond.true.2125, label %lor.lhs.false.2102

lor.lhs.false.2102:                               ; preds = %cond.false.2093, %cond.true.2085, %cond.true.2071, %cond.end.2059, %cond.end.2022
  %462 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2103 = call i64 @SBYTES(i64 %462)
  %463 = load i64, i64* %system_name, align 8
  %call2104 = call i64 @SBYTES(i64 %463)
  %add2105 = add nsw i64 %call2104, 2
  %add2106 = add nsw i64 %call2103, %add2105
  %mul2107 = mul nsw i64 0, %add2106
  %sub2108 = sub nsw i64 %mul2107, 1
  %cmp2109 = icmp slt i64 %sub2108, 0
  br i1 %cmp2109, label %land.lhs.true.2111, label %lor.lhs.false.2118

land.lhs.true.2111:                               ; preds = %lor.lhs.false.2102
  %464 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2112 = call i64 @SBYTES(i64 %464)
  %465 = load i64, i64* %system_name, align 8
  %call2113 = call i64 @SBYTES(i64 %465)
  %add2114 = add nsw i64 %call2113, 2
  %add2115 = add nsw i64 %call2112, %add2114
  %cmp2116 = icmp slt i64 %add2115, -9223372036854775808
  br i1 %cmp2116, label %cond.true.2125, label %lor.lhs.false.2118

lor.lhs.false.2118:                               ; preds = %land.lhs.true.2111, %lor.lhs.false.2102
  %466 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2119 = call i64 @SBYTES(i64 %466)
  %467 = load i64, i64* %system_name, align 8
  %call2120 = call i64 @SBYTES(i64 %467)
  %add2121 = add nsw i64 %call2120, 2
  %add2122 = add nsw i64 %call2119, %add2121
  %cmp2123 = icmp slt i64 9223372036854775807, %add2122
  br i1 %cmp2123, label %cond.true.2125, label %cond.false.2146

cond.true.2125:                                   ; preds = %lor.lhs.false.2118, %land.lhs.true.2111, %cond.false.2093, %cond.true.2085, %cond.true.2071, %cond.end.2059, %cond.end.2022
  %468 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2126 = call i64 @SBYTES(i64 %468)
  %469 = load i64, i64* %system_name, align 8
  %call2127 = call i64 @SBYTES(i64 %469)
  %add2128 = add nsw i64 %call2127, 2
  %add2129 = add i64 %call2126, %add2128
  %cmp2130 = icmp ule i64 %add2129, 9223372036854775807
  br i1 %cmp2130, label %cond.true.2132, label %cond.false.2137

cond.true.2132:                                   ; preds = %cond.true.2125
  %470 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2133 = call i64 @SBYTES(i64 %470)
  %471 = load i64, i64* %system_name, align 8
  %call2134 = call i64 @SBYTES(i64 %471)
  %add2135 = add nsw i64 %call2134, 2
  %add2136 = add i64 %call2133, %add2135
  br label %cond.end.2144

cond.false.2137:                                  ; preds = %cond.true.2125
  %472 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2138 = call i64 @SBYTES(i64 %472)
  %473 = load i64, i64* %system_name, align 8
  %call2139 = call i64 @SBYTES(i64 %473)
  %add2140 = add nsw i64 %call2139, 2
  %add2141 = add i64 %call2138, %add2140
  %sub2142 = sub i64 %add2141, -9223372036854775808
  %add2143 = add nsw i64 %sub2142, -9223372036854775808
  br label %cond.end.2144

cond.end.2144:                                    ; preds = %cond.false.2137, %cond.true.2132
  %cond2145 = phi i64 [ %add2136, %cond.true.2132 ], [ %add2143, %cond.false.2137 ]
  store i64 %cond2145, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.2146:                                  ; preds = %lor.lhs.false.2118
  %474 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2147 = call i64 @SBYTES(i64 %474)
  %475 = load i64, i64* %system_name, align 8
  %call2148 = call i64 @SBYTES(i64 %475)
  %add2149 = add nsw i64 %call2148, 2
  %add2150 = add i64 %call2147, %add2149
  %cmp2151 = icmp ule i64 %add2150, 9223372036854775807
  br i1 %cmp2151, label %cond.true.2153, label %cond.false.2158

cond.true.2153:                                   ; preds = %cond.false.2146
  %476 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2154 = call i64 @SBYTES(i64 %476)
  %477 = load i64, i64* %system_name, align 8
  %call2155 = call i64 @SBYTES(i64 %477)
  %add2156 = add nsw i64 %call2155, 2
  %add2157 = add i64 %call2154, %add2156
  br label %cond.end.2165

cond.false.2158:                                  ; preds = %cond.false.2146
  %478 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2159 = call i64 @SBYTES(i64 %478)
  %479 = load i64, i64* %system_name, align 8
  %call2160 = call i64 @SBYTES(i64 %479)
  %add2161 = add nsw i64 %call2160, 2
  %add2162 = add i64 %call2159, %add2161
  %sub2163 = sub i64 %add2162, -9223372036854775808
  %add2164 = add nsw i64 %sub2163, -9223372036854775808
  br label %cond.end.2165

cond.end.2165:                                    ; preds = %cond.false.2158, %cond.true.2153
  %cond2166 = phi i64 [ %add2157, %cond.true.2153 ], [ %add2164, %cond.false.2158 ]
  store i64 %cond2166, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.2167:                                  ; preds = %cond.true.1925
  %480 = load i64, i64* %system_name, align 8
  %call2168 = call i64 @SBYTES(i64 %480)
  %add2169 = add nsw i64 %call2168, 2
  %mul2170 = mul nsw i64 0, %add2169
  %481 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2171 = call i64 @SBYTES(i64 %481)
  %add2172 = add nsw i64 %mul2170, %call2171
  %mul2173 = mul nsw i64 0, %add2172
  %sub2174 = sub nsw i64 %mul2173, 1
  %cmp2175 = icmp slt i64 %sub2174, 0
  br i1 %cmp2175, label %cond.true.2177, label %cond.false.2202

cond.true.2177:                                   ; preds = %cond.false.2167
  %482 = load i64, i64* %system_name, align 8
  %call2178 = call i64 @SBYTES(i64 %482)
  %add2179 = add nsw i64 %call2178, 2
  %mul2180 = mul nsw i64 0, %add2179
  %483 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2181 = call i64 @SBYTES(i64 %483)
  %add2182 = add nsw i64 %mul2180, %call2181
  %mul2183 = mul nsw i64 0, %add2182
  %add2184 = add nsw i64 %mul2183, 0
  %neg2185 = xor i64 %add2184, -1
  %cmp2186 = icmp eq i64 %neg2185, -1
  %conv2187 = zext i1 %cmp2186 to i32
  %sub2188 = sub nsw i32 0, %conv2187
  %conv2189 = sext i32 %sub2188 to i64
  %484 = load i64, i64* %system_name, align 8
  %call2190 = call i64 @SBYTES(i64 %484)
  %add2191 = add nsw i64 %call2190, 2
  %mul2192 = mul nsw i64 0, %add2191
  %485 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2193 = call i64 @SBYTES(i64 %485)
  %add2194 = add nsw i64 %mul2192, %call2193
  %mul2195 = mul nsw i64 0, %add2194
  %add2196 = add nsw i64 %mul2195, 1
  %shl2197 = shl i64 %add2196, 62
  %sub2198 = sub nsw i64 %shl2197, 1
  %mul2199 = mul nsw i64 %sub2198, 2
  %add2200 = add nsw i64 %mul2199, 1
  %sub2201 = sub nsw i64 %conv2189, %add2200
  br label %cond.end.2210

cond.false.2202:                                  ; preds = %cond.false.2167
  %486 = load i64, i64* %system_name, align 8
  %call2203 = call i64 @SBYTES(i64 %486)
  %add2204 = add nsw i64 %call2203, 2
  %mul2205 = mul nsw i64 0, %add2204
  %487 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2206 = call i64 @SBYTES(i64 %487)
  %add2207 = add nsw i64 %mul2205, %call2206
  %mul2208 = mul nsw i64 0, %add2207
  %add2209 = add nsw i64 %mul2208, 0
  br label %cond.end.2210

cond.end.2210:                                    ; preds = %cond.false.2202, %cond.true.2177
  %cond2211 = phi i64 [ %sub2201, %cond.true.2177 ], [ %add2209, %cond.false.2202 ]
  %cmp2212 = icmp slt i64 %cond2211, 0
  br i1 %cmp2212, label %cond.true.2214, label %cond.false.2308

cond.true.2214:                                   ; preds = %cond.end.2210
  %488 = load i64, i64* %system_name, align 8
  %call2215 = call i64 @SBYTES(i64 %488)
  %add2216 = add nsw i64 %call2215, 2
  %cmp2217 = icmp slt i64 %add2216, 0
  br i1 %cmp2217, label %cond.true.2219, label %cond.false.2270

cond.true.2219:                                   ; preds = %cond.true.2214
  %489 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2220 = call i64 @SBYTES(i64 %489)
  %490 = load i64, i64* %system_name, align 8
  %call2221 = call i64 @SBYTES(i64 %490)
  %add2222 = add nsw i64 %call2221, 2
  %mul2223 = mul nsw i64 0, %add2222
  %491 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2224 = call i64 @SBYTES(i64 %491)
  %add2225 = add nsw i64 %mul2223, %call2224
  %mul2226 = mul nsw i64 0, %add2225
  %sub2227 = sub nsw i64 %mul2226, 1
  %cmp2228 = icmp slt i64 %sub2227, 0
  br i1 %cmp2228, label %cond.true.2230, label %cond.false.2255

cond.true.2230:                                   ; preds = %cond.true.2219
  %492 = load i64, i64* %system_name, align 8
  %call2231 = call i64 @SBYTES(i64 %492)
  %add2232 = add nsw i64 %call2231, 2
  %mul2233 = mul nsw i64 0, %add2232
  %493 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2234 = call i64 @SBYTES(i64 %493)
  %add2235 = add nsw i64 %mul2233, %call2234
  %mul2236 = mul nsw i64 0, %add2235
  %add2237 = add nsw i64 %mul2236, 0
  %neg2238 = xor i64 %add2237, -1
  %cmp2239 = icmp eq i64 %neg2238, -1
  %conv2240 = zext i1 %cmp2239 to i32
  %sub2241 = sub nsw i32 0, %conv2240
  %conv2242 = sext i32 %sub2241 to i64
  %494 = load i64, i64* %system_name, align 8
  %call2243 = call i64 @SBYTES(i64 %494)
  %add2244 = add nsw i64 %call2243, 2
  %mul2245 = mul nsw i64 0, %add2244
  %495 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2246 = call i64 @SBYTES(i64 %495)
  %add2247 = add nsw i64 %mul2245, %call2246
  %mul2248 = mul nsw i64 0, %add2247
  %add2249 = add nsw i64 %mul2248, 1
  %shl2250 = shl i64 %add2249, 62
  %sub2251 = sub nsw i64 %shl2250, 1
  %mul2252 = mul nsw i64 %sub2251, 2
  %add2253 = add nsw i64 %mul2252, 1
  %sub2254 = sub nsw i64 %conv2242, %add2253
  br label %cond.end.2263

cond.false.2255:                                  ; preds = %cond.true.2219
  %496 = load i64, i64* %system_name, align 8
  %call2256 = call i64 @SBYTES(i64 %496)
  %add2257 = add nsw i64 %call2256, 2
  %mul2258 = mul nsw i64 0, %add2257
  %497 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2259 = call i64 @SBYTES(i64 %497)
  %add2260 = add nsw i64 %mul2258, %call2259
  %mul2261 = mul nsw i64 0, %add2260
  %add2262 = add nsw i64 %mul2261, 0
  br label %cond.end.2263

cond.end.2263:                                    ; preds = %cond.false.2255, %cond.true.2230
  %cond2264 = phi i64 [ %sub2254, %cond.true.2230 ], [ %add2262, %cond.false.2255 ]
  %498 = load i64, i64* %system_name, align 8
  %call2265 = call i64 @SBYTES(i64 %498)
  %add2266 = add nsw i64 %call2265, 2
  %sub2267 = sub nsw i64 %cond2264, %add2266
  %cmp2268 = icmp slt i64 %call2220, %sub2267
  br i1 %cmp2268, label %cond.true.2366, label %lor.lhs.false.2343

cond.false.2270:                                  ; preds = %cond.true.2214
  %499 = load i64, i64* %system_name, align 8
  %call2271 = call i64 @SBYTES(i64 %499)
  %add2272 = add nsw i64 %call2271, 2
  %mul2273 = mul nsw i64 0, %add2272
  %500 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2274 = call i64 @SBYTES(i64 %500)
  %add2275 = add nsw i64 %mul2273, %call2274
  %mul2276 = mul nsw i64 0, %add2275
  %sub2277 = sub nsw i64 %mul2276, 1
  %cmp2278 = icmp slt i64 %sub2277, 0
  br i1 %cmp2278, label %cond.true.2280, label %cond.false.2292

cond.true.2280:                                   ; preds = %cond.false.2270
  %501 = load i64, i64* %system_name, align 8
  %call2281 = call i64 @SBYTES(i64 %501)
  %add2282 = add nsw i64 %call2281, 2
  %mul2283 = mul nsw i64 0, %add2282
  %502 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2284 = call i64 @SBYTES(i64 %502)
  %add2285 = add nsw i64 %mul2283, %call2284
  %mul2286 = mul nsw i64 0, %add2285
  %add2287 = add nsw i64 %mul2286, 1
  %shl2288 = shl i64 %add2287, 62
  %sub2289 = sub nsw i64 %shl2288, 1
  %mul2290 = mul nsw i64 %sub2289, 2
  %add2291 = add nsw i64 %mul2290, 1
  br label %cond.end.2300

cond.false.2292:                                  ; preds = %cond.false.2270
  %503 = load i64, i64* %system_name, align 8
  %call2293 = call i64 @SBYTES(i64 %503)
  %add2294 = add nsw i64 %call2293, 2
  %mul2295 = mul nsw i64 0, %add2294
  %504 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2296 = call i64 @SBYTES(i64 %504)
  %add2297 = add nsw i64 %mul2295, %call2296
  %mul2298 = mul nsw i64 0, %add2297
  %sub2299 = sub nsw i64 %mul2298, 1
  br label %cond.end.2300

cond.end.2300:                                    ; preds = %cond.false.2292, %cond.true.2280
  %cond2301 = phi i64 [ %add2291, %cond.true.2280 ], [ %sub2299, %cond.false.2292 ]
  %505 = load i64, i64* %system_name, align 8
  %call2302 = call i64 @SBYTES(i64 %505)
  %add2303 = add nsw i64 %call2302, 2
  %sub2304 = sub nsw i64 %cond2301, %add2303
  %506 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2305 = call i64 @SBYTES(i64 %506)
  %cmp2306 = icmp slt i64 %sub2304, %call2305
  br i1 %cmp2306, label %cond.true.2366, label %lor.lhs.false.2343

cond.false.2308:                                  ; preds = %cond.end.2210
  %507 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2309 = call i64 @SBYTES(i64 %507)
  %cmp2310 = icmp slt i64 %call2309, 0
  br i1 %cmp2310, label %cond.true.2312, label %cond.false.2321

cond.true.2312:                                   ; preds = %cond.false.2308
  %508 = load i64, i64* %system_name, align 8
  %call2313 = call i64 @SBYTES(i64 %508)
  %add2314 = add nsw i64 %call2313, 2
  %509 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2315 = call i64 @SBYTES(i64 %509)
  %510 = load i64, i64* %system_name, align 8
  %call2316 = call i64 @SBYTES(i64 %510)
  %add2317 = add nsw i64 %call2316, 2
  %add2318 = add nsw i64 %call2315, %add2317
  %cmp2319 = icmp sle i64 %add2314, %add2318
  br i1 %cmp2319, label %cond.true.2366, label %lor.lhs.false.2343

cond.false.2321:                                  ; preds = %cond.false.2308
  %511 = load i64, i64* %system_name, align 8
  %call2322 = call i64 @SBYTES(i64 %511)
  %add2323 = add nsw i64 %call2322, 2
  %cmp2324 = icmp slt i64 %add2323, 0
  br i1 %cmp2324, label %cond.true.2326, label %cond.false.2334

cond.true.2326:                                   ; preds = %cond.false.2321
  %512 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2327 = call i64 @SBYTES(i64 %512)
  %513 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2328 = call i64 @SBYTES(i64 %513)
  %514 = load i64, i64* %system_name, align 8
  %call2329 = call i64 @SBYTES(i64 %514)
  %add2330 = add nsw i64 %call2329, 2
  %add2331 = add nsw i64 %call2328, %add2330
  %cmp2332 = icmp sle i64 %call2327, %add2331
  br i1 %cmp2332, label %cond.true.2366, label %lor.lhs.false.2343

cond.false.2334:                                  ; preds = %cond.false.2321
  %515 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2335 = call i64 @SBYTES(i64 %515)
  %516 = load i64, i64* %system_name, align 8
  %call2336 = call i64 @SBYTES(i64 %516)
  %add2337 = add nsw i64 %call2336, 2
  %add2338 = add nsw i64 %call2335, %add2337
  %517 = load i64, i64* %system_name, align 8
  %call2339 = call i64 @SBYTES(i64 %517)
  %add2340 = add nsw i64 %call2339, 2
  %cmp2341 = icmp slt i64 %add2338, %add2340
  br i1 %cmp2341, label %cond.true.2366, label %lor.lhs.false.2343

lor.lhs.false.2343:                               ; preds = %cond.false.2334, %cond.true.2326, %cond.true.2312, %cond.end.2300, %cond.end.2263
  %518 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2344 = call i64 @SBYTES(i64 %518)
  %519 = load i64, i64* %system_name, align 8
  %call2345 = call i64 @SBYTES(i64 %519)
  %add2346 = add nsw i64 %call2345, 2
  %add2347 = add nsw i64 %call2344, %add2346
  %mul2348 = mul nsw i64 0, %add2347
  %sub2349 = sub nsw i64 %mul2348, 1
  %cmp2350 = icmp slt i64 %sub2349, 0
  br i1 %cmp2350, label %land.lhs.true.2352, label %lor.lhs.false.2359

land.lhs.true.2352:                               ; preds = %lor.lhs.false.2343
  %520 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2353 = call i64 @SBYTES(i64 %520)
  %521 = load i64, i64* %system_name, align 8
  %call2354 = call i64 @SBYTES(i64 %521)
  %add2355 = add nsw i64 %call2354, 2
  %add2356 = add nsw i64 %call2353, %add2355
  %cmp2357 = icmp slt i64 %add2356, -9223372036854775808
  br i1 %cmp2357, label %cond.true.2366, label %lor.lhs.false.2359

lor.lhs.false.2359:                               ; preds = %land.lhs.true.2352, %lor.lhs.false.2343
  %522 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2360 = call i64 @SBYTES(i64 %522)
  %523 = load i64, i64* %system_name, align 8
  %call2361 = call i64 @SBYTES(i64 %523)
  %add2362 = add nsw i64 %call2361, 2
  %add2363 = add nsw i64 %call2360, %add2362
  %cmp2364 = icmp slt i64 9223372036854775807, %add2363
  br i1 %cmp2364, label %cond.true.2366, label %cond.false.2387

cond.true.2366:                                   ; preds = %lor.lhs.false.2359, %land.lhs.true.2352, %cond.false.2334, %cond.true.2326, %cond.true.2312, %cond.end.2300, %cond.end.2263
  %524 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2367 = call i64 @SBYTES(i64 %524)
  %525 = load i64, i64* %system_name, align 8
  %call2368 = call i64 @SBYTES(i64 %525)
  %add2369 = add nsw i64 %call2368, 2
  %add2370 = add i64 %call2367, %add2369
  %cmp2371 = icmp ule i64 %add2370, 9223372036854775807
  br i1 %cmp2371, label %cond.true.2373, label %cond.false.2378

cond.true.2373:                                   ; preds = %cond.true.2366
  %526 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2374 = call i64 @SBYTES(i64 %526)
  %527 = load i64, i64* %system_name, align 8
  %call2375 = call i64 @SBYTES(i64 %527)
  %add2376 = add nsw i64 %call2375, 2
  %add2377 = add i64 %call2374, %add2376
  br label %cond.end.2385

cond.false.2378:                                  ; preds = %cond.true.2366
  %528 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2379 = call i64 @SBYTES(i64 %528)
  %529 = load i64, i64* %system_name, align 8
  %call2380 = call i64 @SBYTES(i64 %529)
  %add2381 = add nsw i64 %call2380, 2
  %add2382 = add i64 %call2379, %add2381
  %sub2383 = sub i64 %add2382, -9223372036854775808
  %add2384 = add nsw i64 %sub2383, -9223372036854775808
  br label %cond.end.2385

cond.end.2385:                                    ; preds = %cond.false.2378, %cond.true.2373
  %cond2386 = phi i64 [ %add2377, %cond.true.2373 ], [ %add2384, %cond.false.2378 ]
  store i64 %cond2386, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.2387:                                  ; preds = %lor.lhs.false.2359
  %530 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2388 = call i64 @SBYTES(i64 %530)
  %531 = load i64, i64* %system_name, align 8
  %call2389 = call i64 @SBYTES(i64 %531)
  %add2390 = add nsw i64 %call2389, 2
  %add2391 = add i64 %call2388, %add2390
  %cmp2392 = icmp ule i64 %add2391, 9223372036854775807
  br i1 %cmp2392, label %cond.true.2394, label %cond.false.2399

cond.true.2394:                                   ; preds = %cond.false.2387
  %532 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2395 = call i64 @SBYTES(i64 %532)
  %533 = load i64, i64* %system_name, align 8
  %call2396 = call i64 @SBYTES(i64 %533)
  %add2397 = add nsw i64 %call2396, 2
  %add2398 = add i64 %call2395, %add2397
  br label %cond.end.2406

cond.false.2399:                                  ; preds = %cond.false.2387
  %534 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2400 = call i64 @SBYTES(i64 %534)
  %535 = load i64, i64* %system_name, align 8
  %call2401 = call i64 @SBYTES(i64 %535)
  %add2402 = add nsw i64 %call2401, 2
  %add2403 = add i64 %call2400, %add2402
  %sub2404 = sub i64 %add2403, -9223372036854775808
  %add2405 = add nsw i64 %sub2404, -9223372036854775808
  br label %cond.end.2406

cond.end.2406:                                    ; preds = %cond.false.2399, %cond.true.2394
  %cond2407 = phi i64 [ %add2398, %cond.true.2394 ], [ %add2405, %cond.false.2399 ]
  store i64 %cond2407, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.2408:                                  ; preds = %cond.false.1924
  br i1 false, label %cond.true.2409, label %cond.false.2650

cond.true.2409:                                   ; preds = %cond.false.2408
  %536 = load i64, i64* %system_name, align 8
  %call2410 = call i64 @SBYTES(i64 %536)
  %add2411 = add nsw i64 %call2410, 2
  %mul2412 = mul nsw i64 0, %add2411
  %537 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2413 = call i64 @SBYTES(i64 %537)
  %add2414 = add nsw i64 %mul2412, %call2413
  %mul2415 = mul nsw i64 0, %add2414
  %sub2416 = sub nsw i64 %mul2415, 1
  %cmp2417 = icmp slt i64 %sub2416, 0
  br i1 %cmp2417, label %cond.true.2419, label %cond.false.2444

cond.true.2419:                                   ; preds = %cond.true.2409
  %538 = load i64, i64* %system_name, align 8
  %call2420 = call i64 @SBYTES(i64 %538)
  %add2421 = add nsw i64 %call2420, 2
  %mul2422 = mul nsw i64 0, %add2421
  %539 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2423 = call i64 @SBYTES(i64 %539)
  %add2424 = add nsw i64 %mul2422, %call2423
  %mul2425 = mul nsw i64 0, %add2424
  %add2426 = add nsw i64 %mul2425, 0
  %neg2427 = xor i64 %add2426, -1
  %cmp2428 = icmp eq i64 %neg2427, -1
  %conv2429 = zext i1 %cmp2428 to i32
  %sub2430 = sub nsw i32 0, %conv2429
  %conv2431 = sext i32 %sub2430 to i64
  %540 = load i64, i64* %system_name, align 8
  %call2432 = call i64 @SBYTES(i64 %540)
  %add2433 = add nsw i64 %call2432, 2
  %mul2434 = mul nsw i64 0, %add2433
  %541 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2435 = call i64 @SBYTES(i64 %541)
  %add2436 = add nsw i64 %mul2434, %call2435
  %mul2437 = mul nsw i64 0, %add2436
  %add2438 = add nsw i64 %mul2437, 1
  %shl2439 = shl i64 %add2438, 62
  %sub2440 = sub nsw i64 %shl2439, 1
  %mul2441 = mul nsw i64 %sub2440, 2
  %add2442 = add nsw i64 %mul2441, 1
  %sub2443 = sub nsw i64 %conv2431, %add2442
  br label %cond.end.2452

cond.false.2444:                                  ; preds = %cond.true.2409
  %542 = load i64, i64* %system_name, align 8
  %call2445 = call i64 @SBYTES(i64 %542)
  %add2446 = add nsw i64 %call2445, 2
  %mul2447 = mul nsw i64 0, %add2446
  %543 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2448 = call i64 @SBYTES(i64 %543)
  %add2449 = add nsw i64 %mul2447, %call2448
  %mul2450 = mul nsw i64 0, %add2449
  %add2451 = add nsw i64 %mul2450, 0
  br label %cond.end.2452

cond.end.2452:                                    ; preds = %cond.false.2444, %cond.true.2419
  %cond2453 = phi i64 [ %sub2443, %cond.true.2419 ], [ %add2451, %cond.false.2444 ]
  %cmp2454 = icmp slt i64 %cond2453, 0
  br i1 %cmp2454, label %cond.true.2456, label %cond.false.2550

cond.true.2456:                                   ; preds = %cond.end.2452
  %544 = load i64, i64* %system_name, align 8
  %call2457 = call i64 @SBYTES(i64 %544)
  %add2458 = add nsw i64 %call2457, 2
  %cmp2459 = icmp slt i64 %add2458, 0
  br i1 %cmp2459, label %cond.true.2461, label %cond.false.2512

cond.true.2461:                                   ; preds = %cond.true.2456
  %545 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2462 = call i64 @SBYTES(i64 %545)
  %546 = load i64, i64* %system_name, align 8
  %call2463 = call i64 @SBYTES(i64 %546)
  %add2464 = add nsw i64 %call2463, 2
  %mul2465 = mul nsw i64 0, %add2464
  %547 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2466 = call i64 @SBYTES(i64 %547)
  %add2467 = add nsw i64 %mul2465, %call2466
  %mul2468 = mul nsw i64 0, %add2467
  %sub2469 = sub nsw i64 %mul2468, 1
  %cmp2470 = icmp slt i64 %sub2469, 0
  br i1 %cmp2470, label %cond.true.2472, label %cond.false.2497

cond.true.2472:                                   ; preds = %cond.true.2461
  %548 = load i64, i64* %system_name, align 8
  %call2473 = call i64 @SBYTES(i64 %548)
  %add2474 = add nsw i64 %call2473, 2
  %mul2475 = mul nsw i64 0, %add2474
  %549 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2476 = call i64 @SBYTES(i64 %549)
  %add2477 = add nsw i64 %mul2475, %call2476
  %mul2478 = mul nsw i64 0, %add2477
  %add2479 = add nsw i64 %mul2478, 0
  %neg2480 = xor i64 %add2479, -1
  %cmp2481 = icmp eq i64 %neg2480, -1
  %conv2482 = zext i1 %cmp2481 to i32
  %sub2483 = sub nsw i32 0, %conv2482
  %conv2484 = sext i32 %sub2483 to i64
  %550 = load i64, i64* %system_name, align 8
  %call2485 = call i64 @SBYTES(i64 %550)
  %add2486 = add nsw i64 %call2485, 2
  %mul2487 = mul nsw i64 0, %add2486
  %551 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2488 = call i64 @SBYTES(i64 %551)
  %add2489 = add nsw i64 %mul2487, %call2488
  %mul2490 = mul nsw i64 0, %add2489
  %add2491 = add nsw i64 %mul2490, 1
  %shl2492 = shl i64 %add2491, 62
  %sub2493 = sub nsw i64 %shl2492, 1
  %mul2494 = mul nsw i64 %sub2493, 2
  %add2495 = add nsw i64 %mul2494, 1
  %sub2496 = sub nsw i64 %conv2484, %add2495
  br label %cond.end.2505

cond.false.2497:                                  ; preds = %cond.true.2461
  %552 = load i64, i64* %system_name, align 8
  %call2498 = call i64 @SBYTES(i64 %552)
  %add2499 = add nsw i64 %call2498, 2
  %mul2500 = mul nsw i64 0, %add2499
  %553 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2501 = call i64 @SBYTES(i64 %553)
  %add2502 = add nsw i64 %mul2500, %call2501
  %mul2503 = mul nsw i64 0, %add2502
  %add2504 = add nsw i64 %mul2503, 0
  br label %cond.end.2505

cond.end.2505:                                    ; preds = %cond.false.2497, %cond.true.2472
  %cond2506 = phi i64 [ %sub2496, %cond.true.2472 ], [ %add2504, %cond.false.2497 ]
  %554 = load i64, i64* %system_name, align 8
  %call2507 = call i64 @SBYTES(i64 %554)
  %add2508 = add nsw i64 %call2507, 2
  %sub2509 = sub nsw i64 %cond2506, %add2508
  %cmp2510 = icmp slt i64 %call2462, %sub2509
  br i1 %cmp2510, label %cond.true.2608, label %lor.lhs.false.2585

cond.false.2512:                                  ; preds = %cond.true.2456
  %555 = load i64, i64* %system_name, align 8
  %call2513 = call i64 @SBYTES(i64 %555)
  %add2514 = add nsw i64 %call2513, 2
  %mul2515 = mul nsw i64 0, %add2514
  %556 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2516 = call i64 @SBYTES(i64 %556)
  %add2517 = add nsw i64 %mul2515, %call2516
  %mul2518 = mul nsw i64 0, %add2517
  %sub2519 = sub nsw i64 %mul2518, 1
  %cmp2520 = icmp slt i64 %sub2519, 0
  br i1 %cmp2520, label %cond.true.2522, label %cond.false.2534

cond.true.2522:                                   ; preds = %cond.false.2512
  %557 = load i64, i64* %system_name, align 8
  %call2523 = call i64 @SBYTES(i64 %557)
  %add2524 = add nsw i64 %call2523, 2
  %mul2525 = mul nsw i64 0, %add2524
  %558 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2526 = call i64 @SBYTES(i64 %558)
  %add2527 = add nsw i64 %mul2525, %call2526
  %mul2528 = mul nsw i64 0, %add2527
  %add2529 = add nsw i64 %mul2528, 1
  %shl2530 = shl i64 %add2529, 62
  %sub2531 = sub nsw i64 %shl2530, 1
  %mul2532 = mul nsw i64 %sub2531, 2
  %add2533 = add nsw i64 %mul2532, 1
  br label %cond.end.2542

cond.false.2534:                                  ; preds = %cond.false.2512
  %559 = load i64, i64* %system_name, align 8
  %call2535 = call i64 @SBYTES(i64 %559)
  %add2536 = add nsw i64 %call2535, 2
  %mul2537 = mul nsw i64 0, %add2536
  %560 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2538 = call i64 @SBYTES(i64 %560)
  %add2539 = add nsw i64 %mul2537, %call2538
  %mul2540 = mul nsw i64 0, %add2539
  %sub2541 = sub nsw i64 %mul2540, 1
  br label %cond.end.2542

cond.end.2542:                                    ; preds = %cond.false.2534, %cond.true.2522
  %cond2543 = phi i64 [ %add2533, %cond.true.2522 ], [ %sub2541, %cond.false.2534 ]
  %561 = load i64, i64* %system_name, align 8
  %call2544 = call i64 @SBYTES(i64 %561)
  %add2545 = add nsw i64 %call2544, 2
  %sub2546 = sub nsw i64 %cond2543, %add2545
  %562 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2547 = call i64 @SBYTES(i64 %562)
  %cmp2548 = icmp slt i64 %sub2546, %call2547
  br i1 %cmp2548, label %cond.true.2608, label %lor.lhs.false.2585

cond.false.2550:                                  ; preds = %cond.end.2452
  %563 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2551 = call i64 @SBYTES(i64 %563)
  %cmp2552 = icmp slt i64 %call2551, 0
  br i1 %cmp2552, label %cond.true.2554, label %cond.false.2563

cond.true.2554:                                   ; preds = %cond.false.2550
  %564 = load i64, i64* %system_name, align 8
  %call2555 = call i64 @SBYTES(i64 %564)
  %add2556 = add nsw i64 %call2555, 2
  %565 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2557 = call i64 @SBYTES(i64 %565)
  %566 = load i64, i64* %system_name, align 8
  %call2558 = call i64 @SBYTES(i64 %566)
  %add2559 = add nsw i64 %call2558, 2
  %add2560 = add nsw i64 %call2557, %add2559
  %cmp2561 = icmp sle i64 %add2556, %add2560
  br i1 %cmp2561, label %cond.true.2608, label %lor.lhs.false.2585

cond.false.2563:                                  ; preds = %cond.false.2550
  %567 = load i64, i64* %system_name, align 8
  %call2564 = call i64 @SBYTES(i64 %567)
  %add2565 = add nsw i64 %call2564, 2
  %cmp2566 = icmp slt i64 %add2565, 0
  br i1 %cmp2566, label %cond.true.2568, label %cond.false.2576

cond.true.2568:                                   ; preds = %cond.false.2563
  %568 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2569 = call i64 @SBYTES(i64 %568)
  %569 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2570 = call i64 @SBYTES(i64 %569)
  %570 = load i64, i64* %system_name, align 8
  %call2571 = call i64 @SBYTES(i64 %570)
  %add2572 = add nsw i64 %call2571, 2
  %add2573 = add nsw i64 %call2570, %add2572
  %cmp2574 = icmp sle i64 %call2569, %add2573
  br i1 %cmp2574, label %cond.true.2608, label %lor.lhs.false.2585

cond.false.2576:                                  ; preds = %cond.false.2563
  %571 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2577 = call i64 @SBYTES(i64 %571)
  %572 = load i64, i64* %system_name, align 8
  %call2578 = call i64 @SBYTES(i64 %572)
  %add2579 = add nsw i64 %call2578, 2
  %add2580 = add nsw i64 %call2577, %add2579
  %573 = load i64, i64* %system_name, align 8
  %call2581 = call i64 @SBYTES(i64 %573)
  %add2582 = add nsw i64 %call2581, 2
  %cmp2583 = icmp slt i64 %add2580, %add2582
  br i1 %cmp2583, label %cond.true.2608, label %lor.lhs.false.2585

lor.lhs.false.2585:                               ; preds = %cond.false.2576, %cond.true.2568, %cond.true.2554, %cond.end.2542, %cond.end.2505
  %574 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2586 = call i64 @SBYTES(i64 %574)
  %575 = load i64, i64* %system_name, align 8
  %call2587 = call i64 @SBYTES(i64 %575)
  %add2588 = add nsw i64 %call2587, 2
  %add2589 = add nsw i64 %call2586, %add2588
  %mul2590 = mul nsw i64 0, %add2589
  %sub2591 = sub nsw i64 %mul2590, 1
  %cmp2592 = icmp slt i64 %sub2591, 0
  br i1 %cmp2592, label %land.lhs.true.2594, label %lor.lhs.false.2601

land.lhs.true.2594:                               ; preds = %lor.lhs.false.2585
  %576 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2595 = call i64 @SBYTES(i64 %576)
  %577 = load i64, i64* %system_name, align 8
  %call2596 = call i64 @SBYTES(i64 %577)
  %add2597 = add nsw i64 %call2596, 2
  %add2598 = add nsw i64 %call2595, %add2597
  %cmp2599 = icmp slt i64 %add2598, -9223372036854775808
  br i1 %cmp2599, label %cond.true.2608, label %lor.lhs.false.2601

lor.lhs.false.2601:                               ; preds = %land.lhs.true.2594, %lor.lhs.false.2585
  %578 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2602 = call i64 @SBYTES(i64 %578)
  %579 = load i64, i64* %system_name, align 8
  %call2603 = call i64 @SBYTES(i64 %579)
  %add2604 = add nsw i64 %call2603, 2
  %add2605 = add nsw i64 %call2602, %add2604
  %cmp2606 = icmp slt i64 9223372036854775807, %add2605
  br i1 %cmp2606, label %cond.true.2608, label %cond.false.2629

cond.true.2608:                                   ; preds = %lor.lhs.false.2601, %land.lhs.true.2594, %cond.false.2576, %cond.true.2568, %cond.true.2554, %cond.end.2542, %cond.end.2505
  %580 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2609 = call i64 @SBYTES(i64 %580)
  %581 = load i64, i64* %system_name, align 8
  %call2610 = call i64 @SBYTES(i64 %581)
  %add2611 = add nsw i64 %call2610, 2
  %add2612 = add i64 %call2609, %add2611
  %cmp2613 = icmp ule i64 %add2612, 9223372036854775807
  br i1 %cmp2613, label %cond.true.2615, label %cond.false.2620

cond.true.2615:                                   ; preds = %cond.true.2608
  %582 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2616 = call i64 @SBYTES(i64 %582)
  %583 = load i64, i64* %system_name, align 8
  %call2617 = call i64 @SBYTES(i64 %583)
  %add2618 = add nsw i64 %call2617, 2
  %add2619 = add i64 %call2616, %add2618
  br label %cond.end.2627

cond.false.2620:                                  ; preds = %cond.true.2608
  %584 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2621 = call i64 @SBYTES(i64 %584)
  %585 = load i64, i64* %system_name, align 8
  %call2622 = call i64 @SBYTES(i64 %585)
  %add2623 = add nsw i64 %call2622, 2
  %add2624 = add i64 %call2621, %add2623
  %sub2625 = sub i64 %add2624, -9223372036854775808
  %add2626 = add nsw i64 %sub2625, -9223372036854775808
  br label %cond.end.2627

cond.end.2627:                                    ; preds = %cond.false.2620, %cond.true.2615
  %cond2628 = phi i64 [ %add2619, %cond.true.2615 ], [ %add2626, %cond.false.2620 ]
  store i64 %cond2628, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.2629:                                  ; preds = %lor.lhs.false.2601
  %586 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2630 = call i64 @SBYTES(i64 %586)
  %587 = load i64, i64* %system_name, align 8
  %call2631 = call i64 @SBYTES(i64 %587)
  %add2632 = add nsw i64 %call2631, 2
  %add2633 = add i64 %call2630, %add2632
  %cmp2634 = icmp ule i64 %add2633, 9223372036854775807
  br i1 %cmp2634, label %cond.true.2636, label %cond.false.2641

cond.true.2636:                                   ; preds = %cond.false.2629
  %588 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2637 = call i64 @SBYTES(i64 %588)
  %589 = load i64, i64* %system_name, align 8
  %call2638 = call i64 @SBYTES(i64 %589)
  %add2639 = add nsw i64 %call2638, 2
  %add2640 = add i64 %call2637, %add2639
  br label %cond.end.2648

cond.false.2641:                                  ; preds = %cond.false.2629
  %590 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2642 = call i64 @SBYTES(i64 %590)
  %591 = load i64, i64* %system_name, align 8
  %call2643 = call i64 @SBYTES(i64 %591)
  %add2644 = add nsw i64 %call2643, 2
  %add2645 = add i64 %call2642, %add2644
  %sub2646 = sub i64 %add2645, -9223372036854775808
  %add2647 = add nsw i64 %sub2646, -9223372036854775808
  br label %cond.end.2648

cond.end.2648:                                    ; preds = %cond.false.2641, %cond.true.2636
  %cond2649 = phi i64 [ %add2640, %cond.true.2636 ], [ %add2647, %cond.false.2641 ]
  store i64 %cond2649, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

cond.false.2650:                                  ; preds = %cond.false.2408
  %592 = load i64, i64* %system_name, align 8
  %call2651 = call i64 @SBYTES(i64 %592)
  %add2652 = add nsw i64 %call2651, 2
  %mul2653 = mul nsw i64 0, %add2652
  %593 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2654 = call i64 @SBYTES(i64 %593)
  %add2655 = add nsw i64 %mul2653, %call2654
  %mul2656 = mul nsw i64 0, %add2655
  %sub2657 = sub nsw i64 %mul2656, 1
  %cmp2658 = icmp slt i64 %sub2657, 0
  br i1 %cmp2658, label %cond.true.2660, label %cond.false.2685

cond.true.2660:                                   ; preds = %cond.false.2650
  %594 = load i64, i64* %system_name, align 8
  %call2661 = call i64 @SBYTES(i64 %594)
  %add2662 = add nsw i64 %call2661, 2
  %mul2663 = mul nsw i64 0, %add2662
  %595 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2664 = call i64 @SBYTES(i64 %595)
  %add2665 = add nsw i64 %mul2663, %call2664
  %mul2666 = mul nsw i64 0, %add2665
  %add2667 = add nsw i64 %mul2666, 0
  %neg2668 = xor i64 %add2667, -1
  %cmp2669 = icmp eq i64 %neg2668, -1
  %conv2670 = zext i1 %cmp2669 to i32
  %sub2671 = sub nsw i32 0, %conv2670
  %conv2672 = sext i32 %sub2671 to i64
  %596 = load i64, i64* %system_name, align 8
  %call2673 = call i64 @SBYTES(i64 %596)
  %add2674 = add nsw i64 %call2673, 2
  %mul2675 = mul nsw i64 0, %add2674
  %597 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2676 = call i64 @SBYTES(i64 %597)
  %add2677 = add nsw i64 %mul2675, %call2676
  %mul2678 = mul nsw i64 0, %add2677
  %add2679 = add nsw i64 %mul2678, 1
  %shl2680 = shl i64 %add2679, 62
  %sub2681 = sub nsw i64 %shl2680, 1
  %mul2682 = mul nsw i64 %sub2681, 2
  %add2683 = add nsw i64 %mul2682, 1
  %sub2684 = sub nsw i64 %conv2672, %add2683
  br label %cond.end.2693

cond.false.2685:                                  ; preds = %cond.false.2650
  %598 = load i64, i64* %system_name, align 8
  %call2686 = call i64 @SBYTES(i64 %598)
  %add2687 = add nsw i64 %call2686, 2
  %mul2688 = mul nsw i64 0, %add2687
  %599 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2689 = call i64 @SBYTES(i64 %599)
  %add2690 = add nsw i64 %mul2688, %call2689
  %mul2691 = mul nsw i64 0, %add2690
  %add2692 = add nsw i64 %mul2691, 0
  br label %cond.end.2693

cond.end.2693:                                    ; preds = %cond.false.2685, %cond.true.2660
  %cond2694 = phi i64 [ %sub2684, %cond.true.2660 ], [ %add2692, %cond.false.2685 ]
  %cmp2695 = icmp slt i64 %cond2694, 0
  br i1 %cmp2695, label %cond.true.2697, label %cond.false.2791

cond.true.2697:                                   ; preds = %cond.end.2693
  %600 = load i64, i64* %system_name, align 8
  %call2698 = call i64 @SBYTES(i64 %600)
  %add2699 = add nsw i64 %call2698, 2
  %cmp2700 = icmp slt i64 %add2699, 0
  br i1 %cmp2700, label %cond.true.2702, label %cond.false.2753

cond.true.2702:                                   ; preds = %cond.true.2697
  %601 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2703 = call i64 @SBYTES(i64 %601)
  %602 = load i64, i64* %system_name, align 8
  %call2704 = call i64 @SBYTES(i64 %602)
  %add2705 = add nsw i64 %call2704, 2
  %mul2706 = mul nsw i64 0, %add2705
  %603 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2707 = call i64 @SBYTES(i64 %603)
  %add2708 = add nsw i64 %mul2706, %call2707
  %mul2709 = mul nsw i64 0, %add2708
  %sub2710 = sub nsw i64 %mul2709, 1
  %cmp2711 = icmp slt i64 %sub2710, 0
  br i1 %cmp2711, label %cond.true.2713, label %cond.false.2738

cond.true.2713:                                   ; preds = %cond.true.2702
  %604 = load i64, i64* %system_name, align 8
  %call2714 = call i64 @SBYTES(i64 %604)
  %add2715 = add nsw i64 %call2714, 2
  %mul2716 = mul nsw i64 0, %add2715
  %605 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2717 = call i64 @SBYTES(i64 %605)
  %add2718 = add nsw i64 %mul2716, %call2717
  %mul2719 = mul nsw i64 0, %add2718
  %add2720 = add nsw i64 %mul2719, 0
  %neg2721 = xor i64 %add2720, -1
  %cmp2722 = icmp eq i64 %neg2721, -1
  %conv2723 = zext i1 %cmp2722 to i32
  %sub2724 = sub nsw i32 0, %conv2723
  %conv2725 = sext i32 %sub2724 to i64
  %606 = load i64, i64* %system_name, align 8
  %call2726 = call i64 @SBYTES(i64 %606)
  %add2727 = add nsw i64 %call2726, 2
  %mul2728 = mul nsw i64 0, %add2727
  %607 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2729 = call i64 @SBYTES(i64 %607)
  %add2730 = add nsw i64 %mul2728, %call2729
  %mul2731 = mul nsw i64 0, %add2730
  %add2732 = add nsw i64 %mul2731, 1
  %shl2733 = shl i64 %add2732, 62
  %sub2734 = sub nsw i64 %shl2733, 1
  %mul2735 = mul nsw i64 %sub2734, 2
  %add2736 = add nsw i64 %mul2735, 1
  %sub2737 = sub nsw i64 %conv2725, %add2736
  br label %cond.end.2746

cond.false.2738:                                  ; preds = %cond.true.2702
  %608 = load i64, i64* %system_name, align 8
  %call2739 = call i64 @SBYTES(i64 %608)
  %add2740 = add nsw i64 %call2739, 2
  %mul2741 = mul nsw i64 0, %add2740
  %609 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2742 = call i64 @SBYTES(i64 %609)
  %add2743 = add nsw i64 %mul2741, %call2742
  %mul2744 = mul nsw i64 0, %add2743
  %add2745 = add nsw i64 %mul2744, 0
  br label %cond.end.2746

cond.end.2746:                                    ; preds = %cond.false.2738, %cond.true.2713
  %cond2747 = phi i64 [ %sub2737, %cond.true.2713 ], [ %add2745, %cond.false.2738 ]
  %610 = load i64, i64* %system_name, align 8
  %call2748 = call i64 @SBYTES(i64 %610)
  %add2749 = add nsw i64 %call2748, 2
  %sub2750 = sub nsw i64 %cond2747, %add2749
  %cmp2751 = icmp slt i64 %call2703, %sub2750
  br i1 %cmp2751, label %cond.true.2849, label %lor.lhs.false.2826

cond.false.2753:                                  ; preds = %cond.true.2697
  %611 = load i64, i64* %system_name, align 8
  %call2754 = call i64 @SBYTES(i64 %611)
  %add2755 = add nsw i64 %call2754, 2
  %mul2756 = mul nsw i64 0, %add2755
  %612 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2757 = call i64 @SBYTES(i64 %612)
  %add2758 = add nsw i64 %mul2756, %call2757
  %mul2759 = mul nsw i64 0, %add2758
  %sub2760 = sub nsw i64 %mul2759, 1
  %cmp2761 = icmp slt i64 %sub2760, 0
  br i1 %cmp2761, label %cond.true.2763, label %cond.false.2775

cond.true.2763:                                   ; preds = %cond.false.2753
  %613 = load i64, i64* %system_name, align 8
  %call2764 = call i64 @SBYTES(i64 %613)
  %add2765 = add nsw i64 %call2764, 2
  %mul2766 = mul nsw i64 0, %add2765
  %614 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2767 = call i64 @SBYTES(i64 %614)
  %add2768 = add nsw i64 %mul2766, %call2767
  %mul2769 = mul nsw i64 0, %add2768
  %add2770 = add nsw i64 %mul2769, 1
  %shl2771 = shl i64 %add2770, 62
  %sub2772 = sub nsw i64 %shl2771, 1
  %mul2773 = mul nsw i64 %sub2772, 2
  %add2774 = add nsw i64 %mul2773, 1
  br label %cond.end.2783

cond.false.2775:                                  ; preds = %cond.false.2753
  %615 = load i64, i64* %system_name, align 8
  %call2776 = call i64 @SBYTES(i64 %615)
  %add2777 = add nsw i64 %call2776, 2
  %mul2778 = mul nsw i64 0, %add2777
  %616 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2779 = call i64 @SBYTES(i64 %616)
  %add2780 = add nsw i64 %mul2778, %call2779
  %mul2781 = mul nsw i64 0, %add2780
  %sub2782 = sub nsw i64 %mul2781, 1
  br label %cond.end.2783

cond.end.2783:                                    ; preds = %cond.false.2775, %cond.true.2763
  %cond2784 = phi i64 [ %add2774, %cond.true.2763 ], [ %sub2782, %cond.false.2775 ]
  %617 = load i64, i64* %system_name, align 8
  %call2785 = call i64 @SBYTES(i64 %617)
  %add2786 = add nsw i64 %call2785, 2
  %sub2787 = sub nsw i64 %cond2784, %add2786
  %618 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2788 = call i64 @SBYTES(i64 %618)
  %cmp2789 = icmp slt i64 %sub2787, %call2788
  br i1 %cmp2789, label %cond.true.2849, label %lor.lhs.false.2826

cond.false.2791:                                  ; preds = %cond.end.2693
  %619 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2792 = call i64 @SBYTES(i64 %619)
  %cmp2793 = icmp slt i64 %call2792, 0
  br i1 %cmp2793, label %cond.true.2795, label %cond.false.2804

cond.true.2795:                                   ; preds = %cond.false.2791
  %620 = load i64, i64* %system_name, align 8
  %call2796 = call i64 @SBYTES(i64 %620)
  %add2797 = add nsw i64 %call2796, 2
  %621 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2798 = call i64 @SBYTES(i64 %621)
  %622 = load i64, i64* %system_name, align 8
  %call2799 = call i64 @SBYTES(i64 %622)
  %add2800 = add nsw i64 %call2799, 2
  %add2801 = add nsw i64 %call2798, %add2800
  %cmp2802 = icmp sle i64 %add2797, %add2801
  br i1 %cmp2802, label %cond.true.2849, label %lor.lhs.false.2826

cond.false.2804:                                  ; preds = %cond.false.2791
  %623 = load i64, i64* %system_name, align 8
  %call2805 = call i64 @SBYTES(i64 %623)
  %add2806 = add nsw i64 %call2805, 2
  %cmp2807 = icmp slt i64 %add2806, 0
  br i1 %cmp2807, label %cond.true.2809, label %cond.false.2817

cond.true.2809:                                   ; preds = %cond.false.2804
  %624 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2810 = call i64 @SBYTES(i64 %624)
  %625 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2811 = call i64 @SBYTES(i64 %625)
  %626 = load i64, i64* %system_name, align 8
  %call2812 = call i64 @SBYTES(i64 %626)
  %add2813 = add nsw i64 %call2812, 2
  %add2814 = add nsw i64 %call2811, %add2813
  %cmp2815 = icmp sle i64 %call2810, %add2814
  br i1 %cmp2815, label %cond.true.2849, label %lor.lhs.false.2826

cond.false.2817:                                  ; preds = %cond.false.2804
  %627 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2818 = call i64 @SBYTES(i64 %627)
  %628 = load i64, i64* %system_name, align 8
  %call2819 = call i64 @SBYTES(i64 %628)
  %add2820 = add nsw i64 %call2819, 2
  %add2821 = add nsw i64 %call2818, %add2820
  %629 = load i64, i64* %system_name, align 8
  %call2822 = call i64 @SBYTES(i64 %629)
  %add2823 = add nsw i64 %call2822, 2
  %cmp2824 = icmp slt i64 %add2821, %add2823
  br i1 %cmp2824, label %cond.true.2849, label %lor.lhs.false.2826

lor.lhs.false.2826:                               ; preds = %cond.false.2817, %cond.true.2809, %cond.true.2795, %cond.end.2783, %cond.end.2746
  %630 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2827 = call i64 @SBYTES(i64 %630)
  %631 = load i64, i64* %system_name, align 8
  %call2828 = call i64 @SBYTES(i64 %631)
  %add2829 = add nsw i64 %call2828, 2
  %add2830 = add nsw i64 %call2827, %add2829
  %mul2831 = mul nsw i64 0, %add2830
  %sub2832 = sub nsw i64 %mul2831, 1
  %cmp2833 = icmp slt i64 %sub2832, 0
  br i1 %cmp2833, label %land.lhs.true.2835, label %lor.lhs.false.2842

land.lhs.true.2835:                               ; preds = %lor.lhs.false.2826
  %632 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2836 = call i64 @SBYTES(i64 %632)
  %633 = load i64, i64* %system_name, align 8
  %call2837 = call i64 @SBYTES(i64 %633)
  %add2838 = add nsw i64 %call2837, 2
  %add2839 = add nsw i64 %call2836, %add2838
  %cmp2840 = icmp slt i64 %add2839, -9223372036854775808
  br i1 %cmp2840, label %cond.true.2849, label %lor.lhs.false.2842

lor.lhs.false.2842:                               ; preds = %land.lhs.true.2835, %lor.lhs.false.2826
  %634 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2843 = call i64 @SBYTES(i64 %634)
  %635 = load i64, i64* %system_name, align 8
  %call2844 = call i64 @SBYTES(i64 %635)
  %add2845 = add nsw i64 %call2844, 2
  %add2846 = add nsw i64 %call2843, %add2845
  %cmp2847 = icmp slt i64 9223372036854775807, %add2846
  br i1 %cmp2847, label %cond.true.2849, label %cond.false.2870

cond.true.2849:                                   ; preds = %lor.lhs.false.2842, %land.lhs.true.2835, %cond.false.2817, %cond.true.2809, %cond.true.2795, %cond.end.2783, %cond.end.2746
  %636 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2850 = call i64 @SBYTES(i64 %636)
  %637 = load i64, i64* %system_name, align 8
  %call2851 = call i64 @SBYTES(i64 %637)
  %add2852 = add nsw i64 %call2851, 2
  %add2853 = add i64 %call2850, %add2852
  %cmp2854 = icmp ule i64 %add2853, 9223372036854775807
  br i1 %cmp2854, label %cond.true.2856, label %cond.false.2861

cond.true.2856:                                   ; preds = %cond.true.2849
  %638 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2857 = call i64 @SBYTES(i64 %638)
  %639 = load i64, i64* %system_name, align 8
  %call2858 = call i64 @SBYTES(i64 %639)
  %add2859 = add nsw i64 %call2858, 2
  %add2860 = add i64 %call2857, %add2859
  br label %cond.end.2868

cond.false.2861:                                  ; preds = %cond.true.2849
  %640 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2862 = call i64 @SBYTES(i64 %640)
  %641 = load i64, i64* %system_name, align 8
  %call2863 = call i64 @SBYTES(i64 %641)
  %add2864 = add nsw i64 %call2863, 2
  %add2865 = add i64 %call2862, %add2864
  %sub2866 = sub i64 %add2865, -9223372036854775808
  %add2867 = add nsw i64 %sub2866, -9223372036854775808
  br label %cond.end.2868

cond.end.2868:                                    ; preds = %cond.false.2861, %cond.true.2856
  %cond2869 = phi i64 [ %add2860, %cond.true.2856 ], [ %add2867, %cond.false.2861 ]
  store i64 %cond2869, i64* %nbytes, align 8
  br i1 true, label %if.then.2891, label %if.end.2892

cond.false.2870:                                  ; preds = %lor.lhs.false.2842
  %642 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2871 = call i64 @SBYTES(i64 %642)
  %643 = load i64, i64* %system_name, align 8
  %call2872 = call i64 @SBYTES(i64 %643)
  %add2873 = add nsw i64 %call2872, 2
  %add2874 = add i64 %call2871, %add2873
  %cmp2875 = icmp ule i64 %add2874, 9223372036854775807
  br i1 %cmp2875, label %cond.true.2877, label %cond.false.2882

cond.true.2877:                                   ; preds = %cond.false.2870
  %644 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2878 = call i64 @SBYTES(i64 %644)
  %645 = load i64, i64* %system_name, align 8
  %call2879 = call i64 @SBYTES(i64 %645)
  %add2880 = add nsw i64 %call2879, 2
  %add2881 = add i64 %call2878, %add2880
  br label %cond.end.2889

cond.false.2882:                                  ; preds = %cond.false.2870
  %646 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2883 = call i64 @SBYTES(i64 %646)
  %647 = load i64, i64* %system_name, align 8
  %call2884 = call i64 @SBYTES(i64 %647)
  %add2885 = add nsw i64 %call2884, 2
  %add2886 = add i64 %call2883, %add2885
  %sub2887 = sub i64 %add2886, -9223372036854775808
  %add2888 = add nsw i64 %sub2887, -9223372036854775808
  br label %cond.end.2889

cond.end.2889:                                    ; preds = %cond.false.2882, %cond.true.2877
  %cond2890 = phi i64 [ %add2881, %cond.true.2877 ], [ %add2888, %cond.false.2882 ]
  store i64 %cond2890, i64* %nbytes, align 8
  br i1 false, label %if.then.2891, label %if.end.2892

if.then.2891:                                     ; preds = %cond.end.2889, %cond.end.2868, %cond.end.2648, %cond.end.2627, %cond.end.2406, %cond.end.2385, %cond.end.2165, %cond.end.2144, %cond.end.1921, %cond.end.1893, %cond.end.1666, %cond.end.1638, %cond.end.1367, %cond.end.1329, %cond.end.1092, %cond.end.1054, %cond.end.729, %cond.end.691, %cond.end.454, %cond.end.416
  call void @memory_full(i64 -1) #10
  unreachable

if.end.2892:                                      ; preds = %cond.end.2889, %cond.end.2868, %cond.end.2648, %cond.end.2627, %cond.end.2406, %cond.end.2385, %cond.end.2165, %cond.end.2144, %cond.end.1921, %cond.end.1893, %cond.end.1666, %cond.end.1638, %cond.end.1367, %cond.end.1329, %cond.end.1092, %cond.end.1054, %cond.end.729, %cond.end.691, %cond.end.454, %cond.end.416
  %648 = load i32, i32* @x_display_id, align 4
  %inc2893 = add i32 %648, 1
  store i32 %inc2893, i32* @x_display_id, align 4
  %649 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_id = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %649, i32 0, i32 26
  store i32 %inc2893, i32* %x_id, align 4
  %650 = load i64, i64* %nbytes, align 8
  %call2894 = call noalias i8* @xmalloc(i64 %650)
  %651 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_id_name = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %651, i32 0, i32 27
  store i8* %call2894, i8** %x_id_name, align 8
  %652 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_id_name2895 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %652, i32 0, i32 27
  %653 = load i8*, i8** %x_id_name2895, align 8
  %654 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 149), align 8
  %call2896 = call i8* @lispstpcpy(i8* %653, i64 %654)
  store i8* %call2896, i8** %nametail, align 8
  %655 = load i8*, i8** %nametail, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %655, i32 1
  store i8* %incdec.ptr, i8** %nametail, align 8
  store i8 64, i8* %655, align 1
  %656 = load i8*, i8** %nametail, align 8
  %657 = load i64, i64* %system_name, align 8
  %call2897 = call i8* @lispstpcpy(i8* %656, i64 %657)
  %658 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @x_find_modifier_meanings(%struct.x_display_info* %658)
  %659 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2898 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %659, i32 0, i32 2
  %660 = load %struct._XDisplay*, %struct._XDisplay** %display2898, align 8
  %call2899 = call %struct._GdkCursor* @xg_create_default_cursor(%struct._XDisplay* %660)
  %661 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xg_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %661, i32 0, i32 20
  store %struct._GdkCursor* %call2899, %struct._GdkCursor** %xg_cursor, align 8
  %662 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2900 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %662, i32 0, i32 2
  %663 = load %struct._XDisplay*, %struct._XDisplay** %display2900, align 8
  %call2901 = call i64 @XCreateFontCursor(%struct._XDisplay* %663, i32 116)
  %664 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %vertical_scroll_bar_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %664, i32 0, i32 16
  store i64 %call2901, i64* %vertical_scroll_bar_cursor, align 8
  %665 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2902 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %665, i32 0, i32 2
  %666 = load %struct._XDisplay*, %struct._XDisplay** %display2902, align 8
  %call2903 = call i64 @XCreateFontCursor(%struct._XDisplay* %666, i32 108)
  %667 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %horizontal_scroll_bar_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %667, i32 0, i32 17
  store i64 %call2903, i64* %horizontal_scroll_bar_cursor, align 8
  %668 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2904 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %668, i32 0, i32 2
  %669 = load %struct._XDisplay*, %struct._XDisplay** %display2904, align 8
  %670 = load i8*, i8** %xrm_option.addr, align 8
  %671 = load i8*, i8** %resource_name.addr, align 8
  %call2905 = call %struct._XrmHashBucketRec* @x_load_resources(%struct._XDisplay* %669, i8* %670, i8* %671, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0))
  store %struct._XrmHashBucketRec* %call2905, %struct._XrmHashBucketRec** %xrdb, align 8
  %672 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2906 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %672, i32 0, i32 2
  %673 = load %struct._XDisplay*, %struct._XDisplay** %display2906, align 8
  %674 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %xrdb, align 8
  call void @XrmSetDatabase(%struct._XDisplay* %673, %struct._XrmHashBucketRec* %674)
  %675 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %xrdb, align 8
  %676 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xrdb2907 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %676, i32 0, i32 21
  store %struct._XrmHashBucketRec* %675, %struct._XrmHashBucketRec** %xrdb2907, align 8
  %677 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2908 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %677, i32 0, i32 2
  %678 = load %struct._XDisplay*, %struct._XDisplay** %display2908, align 8
  %679 = bitcast %struct._XDisplay* %678 to %struct.anon.12*
  %default_screen = getelementptr inbounds %struct.anon.12, %struct.anon.12* %679, i32 0, i32 33
  %680 = load i32, i32* %default_screen, align 4
  %idxprom2909 = sext i32 %680 to i64
  %681 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2910 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %681, i32 0, i32 2
  %682 = load %struct._XDisplay*, %struct._XDisplay** %display2910, align 8
  %683 = bitcast %struct._XDisplay* %682 to %struct.anon.12*
  %screens = getelementptr inbounds %struct.anon.12, %struct.anon.12* %683, i32 0, i32 35
  %684 = load %struct.Screen*, %struct.Screen** %screens, align 8
  %arrayidx2911 = getelementptr inbounds %struct.Screen, %struct.Screen* %684, i64 %idxprom2909
  %685 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %screen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %685, i32 0, i32 6
  store %struct.Screen* %arrayidx2911, %struct.Screen** %screen, align 8
  %686 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @select_visual(%struct.x_display_info* %686)
  %687 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %screen2912 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %687, i32 0, i32 6
  %688 = load %struct.Screen*, %struct.Screen** %screen2912, align 8
  %cmap = getelementptr inbounds %struct.Screen, %struct.Screen* %688, i32 0, i32 12
  %689 = load i64, i64* %cmap, align 8
  %690 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmap2913 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %690, i32 0, i32 10
  store i64 %689, i64* %cmap2913, align 8
  %691 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %screen2914 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %691, i32 0, i32 6
  %692 = load %struct.Screen*, %struct.Screen** %screen2914, align 8
  %root = getelementptr inbounds %struct.Screen, %struct.Screen* %692, i32 0, i32 2
  %693 = load i64, i64* %root, align 8
  %694 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %root_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %694, i32 0, i32 14
  store i64 %693, i64* %root_window, align 8
  %695 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %icon_bitmap_id = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %695, i32 0, i32 13
  store i64 -1, i64* %icon_bitmap_id, align 8
  %696 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %wm_type = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %696, i32 0, i32 97
  store i32 0, i32* %wm_type, align 4
  %697 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %697, i32 0, i32 25
  call void @reset_mouse_highlight(%struct.Mouse_HLInfo* %mouse_highlight)
  %698 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %visual = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %698, i32 0, i32 9
  %699 = load %struct.Visual*, %struct.Visual** %visual, align 8
  %class = getelementptr inbounds %struct.Visual, %struct.Visual* %699, i32 0, i32 2
  %700 = load i32, i32* %class, align 4
  %cmp2915 = icmp eq i32 %700, 4
  br i1 %cmp2915, label %if.then.2917, label %if.end.2921

if.then.2917:                                     ; preds = %if.end.2892
  %701 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %visual2918 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %701, i32 0, i32 9
  %702 = load %struct.Visual*, %struct.Visual** %visual2918, align 8
  %red_mask = getelementptr inbounds %struct.Visual, %struct.Visual* %702, i32 0, i32 3
  %703 = load i64, i64* %red_mask, align 8
  %704 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %red_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %704, i32 0, i32 91
  %705 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %red_offset = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %705, i32 0, i32 94
  call void @get_bits_and_offset(i64 %703, i32* %red_bits, i32* %red_offset)
  %706 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %visual2919 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %706, i32 0, i32 9
  %707 = load %struct.Visual*, %struct.Visual** %visual2919, align 8
  %blue_mask = getelementptr inbounds %struct.Visual, %struct.Visual* %707, i32 0, i32 5
  %708 = load i64, i64* %blue_mask, align 8
  %709 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %blue_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %709, i32 0, i32 92
  %710 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %blue_offset = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %710, i32 0, i32 95
  call void @get_bits_and_offset(i64 %708, i32* %blue_bits, i32* %blue_offset)
  %711 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %visual2920 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %711, i32 0, i32 9
  %712 = load %struct.Visual*, %struct.Visual** %visual2920, align 8
  %green_mask = getelementptr inbounds %struct.Visual, %struct.Visual* %712, i32 0, i32 4
  %713 = load i64, i64* %green_mask, align 8
  %714 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %green_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %714, i32 0, i32 93
  %715 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %green_offset = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %715, i32 0, i32 96
  call void @get_bits_and_offset(i64 %713, i32* %green_bits, i32* %green_offset)
  br label %if.end.2921

if.end.2921:                                      ; preds = %if.then.2917, %if.end.2892
  %716 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %visual2922 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %716, i32 0, i32 9
  %717 = load %struct.Visual*, %struct.Visual** %visual2922, align 8
  %718 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %screen2923 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %718, i32 0, i32 6
  %719 = load %struct.Screen*, %struct.Screen** %screen2923, align 8
  %root_visual = getelementptr inbounds %struct.Screen, %struct.Screen* %719, i32 0, i32 10
  %720 = load %struct.Visual*, %struct.Visual** %root_visual, align 8
  %cmp2924 = icmp eq %struct.Visual* %717, %720
  br i1 %cmp2924, label %if.then.2926, label %if.else.2963

if.then.2926:                                     ; preds = %if.end.2921
  %721 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %visual2927 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %721, i32 0, i32 9
  %722 = load %struct.Visual*, %struct.Visual** %visual2927, align 8
  %class2928 = getelementptr inbounds %struct.Visual, %struct.Visual* %722, i32 0, i32 2
  %723 = load i32, i32* %class2928, align 4
  %cmp2929 = icmp eq i32 %723, 3
  br i1 %cmp2929, label %if.then.2931, label %if.end.2962

if.then.2931:                                     ; preds = %if.then.2926
  %s2932 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %size = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2932, i32 0, i32 0
  store i64 15, i64* %size, align 8
  %size_byte = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2932, i32 0, i32 1
  store i64 -1, i64* %size_byte, align 8
  %intervals = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2932, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals, align 8
  %data = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2932, i32 0, i32 3
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0), i8** %data, align 8
  %s2933 = bitcast %union.Aligned_String* %.compoundliteral to %struct.Lisp_String*
  %724 = bitcast %struct.Lisp_String* %s2933 to i8*
  %call2934 = call i64 @make_lisp_ptr(i8* %724, i32 4)
  store i64 %call2934, i64* %privateColormap, align 8
  %s2936 = bitcast %union.Aligned_String* %.compoundliteral2935 to %struct.Lisp_String*
  %size2937 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2936, i32 0, i32 0
  store i64 15, i64* %size2937, align 8
  %size_byte2938 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2936, i32 0, i32 1
  store i64 -1, i64* %size_byte2938, align 8
  %intervals2939 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2936, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals2939, align 8
  %data2940 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s2936, i32 0, i32 3
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0), i8** %data2940, align 8
  %s2941 = bitcast %union.Aligned_String* %.compoundliteral2935 to %struct.Lisp_String*
  %725 = bitcast %struct.Lisp_String* %s2941 to i8*
  %call2942 = call i64 @make_lisp_ptr(i8* %725, i32 4)
  store i64 %call2942, i64* %PrivateColormap, align 8
  %726 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %727 = load i64, i64* %privateColormap, align 8
  %728 = load i64, i64* %PrivateColormap, align 8
  %call2943 = call i64 @builtin_lisp_symbol(i32 0)
  %call2944 = call i64 @builtin_lisp_symbol(i32 0)
  %call2945 = call i64 @display_x_get_resource(%struct.x_display_info* %726, i64 %727, i64 %728, i64 %call2943, i64 %call2944)
  store i64 %call2945, i64* %value, align 8
  %729 = load i64, i64* %value, align 8
  %call2946 = call zeroext i1 @STRINGP(i64 %729)
  br i1 %call2946, label %land.lhs.true.2948, label %if.end.2961

land.lhs.true.2948:                               ; preds = %if.then.2931
  %730 = load i64, i64* %value, align 8
  %call2949 = call i8* @SSDATA(i64 %730)
  %call2950 = call i32 @strcmp(i8* %call2949, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)) #9
  %tobool2951 = icmp ne i32 %call2950, 0
  br i1 %tobool2951, label %lor.lhs.false.2952, label %if.then.2956

lor.lhs.false.2952:                               ; preds = %land.lhs.true.2948
  %731 = load i64, i64* %value, align 8
  %call2953 = call i8* @SSDATA(i64 %731)
  %call2954 = call i32 @strcmp(i8* %call2953, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0)) #9
  %tobool2955 = icmp ne i32 %call2954, 0
  br i1 %tobool2955, label %if.end.2961, label %if.then.2956

if.then.2956:                                     ; preds = %lor.lhs.false.2952, %land.lhs.true.2948
  %732 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2957 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %732, i32 0, i32 2
  %733 = load %struct._XDisplay*, %struct._XDisplay** %display2957, align 8
  %734 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmap2958 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %734, i32 0, i32 10
  %735 = load i64, i64* %cmap2958, align 8
  %call2959 = call i64 @XCopyColormapAndFree(%struct._XDisplay* %733, i64 %735)
  %736 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmap2960 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %736, i32 0, i32 10
  store i64 %call2959, i64* %cmap2960, align 8
  br label %if.end.2961

if.end.2961:                                      ; preds = %if.then.2956, %lor.lhs.false.2952, %if.then.2931
  br label %if.end.2962

if.end.2962:                                      ; preds = %if.end.2961, %if.then.2926
  br label %if.end.2969

if.else.2963:                                     ; preds = %if.end.2921
  %737 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2964 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %737, i32 0, i32 2
  %738 = load %struct._XDisplay*, %struct._XDisplay** %display2964, align 8
  %739 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %root_window2965 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %739, i32 0, i32 14
  %740 = load i64, i64* %root_window2965, align 8
  %741 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %visual2966 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %741, i32 0, i32 9
  %742 = load %struct.Visual*, %struct.Visual** %visual2966, align 8
  %call2967 = call i64 @XCreateColormap(%struct._XDisplay* %738, i64 %740, %struct.Visual* %742, i32 0)
  %743 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmap2968 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %743, i32 0, i32 10
  store i64 %call2967, i64* %cmap2968, align 8
  br label %if.end.2969

if.end.2969:                                      ; preds = %if.else.2963, %if.end.2962
  %744 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2970 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %744, i32 0, i32 2
  %745 = load %struct._XDisplay*, %struct._XDisplay** %display2970, align 8
  %call2971 = call i32 @XRenderQueryExtension(%struct._XDisplay* %745, i32* %event_base, i32* %error_base)
  %746 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2972 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %746, i32 0, i32 2
  %747 = load %struct._XDisplay*, %struct._XDisplay** %display2972, align 8
  %call2973 = call i8* @XGetDefault(%struct._XDisplay* %747, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  store i8* %call2973, i8** %v, align 8
  %748 = load i8*, i8** %v, align 8
  %cmp2974 = icmp ne i8* %748, null
  br i1 %cmp2974, label %land.lhs.true.2976, label %if.end.2981

land.lhs.true.2976:                               ; preds = %if.end.2969
  %749 = load i8*, i8** %v, align 8
  %call2977 = call i32 (i8*, i8*, ...) @sscanf(i8* %749, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), double* %d) #2
  %cmp2978 = icmp eq i32 %call2977, 1
  br i1 %cmp2978, label %if.then.2980, label %if.end.2981

if.then.2980:                                     ; preds = %land.lhs.true.2976
  %750 = load double, double* %d, align 8
  %751 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %resx = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %751, i32 0, i32 7
  store double %750, double* %resx, align 8
  %752 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %resy = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %752, i32 0, i32 8
  store double %750, double* %resy, align 8
  br label %if.end.2981

if.end.2981:                                      ; preds = %if.then.2980, %land.lhs.true.2976, %if.end.2969
  %753 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %resy2982 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %753, i32 0, i32 8
  %754 = load double, double* %resy2982, align 8
  %cmp2983 = fcmp olt double %754, 1.000000e+00
  br i1 %cmp2983, label %if.then.2985, label %if.end.3025

if.then.2985:                                     ; preds = %if.end.2981
  %755 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %screen2986 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %755, i32 0, i32 6
  %756 = load %struct.Screen*, %struct.Screen** %screen2986, align 8
  %call2987 = call i32 @XScreenNumberOfScreen(%struct.Screen* %756)
  store i32 %call2987, i32* %screen_number, align 4
  %757 = load i32, i32* %screen_number, align 4
  %idxprom2988 = sext i32 %757 to i64
  %758 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2989 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %758, i32 0, i32 2
  %759 = load %struct._XDisplay*, %struct._XDisplay** %display2989, align 8
  %760 = bitcast %struct._XDisplay* %759 to %struct.anon.12*
  %screens2990 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %760, i32 0, i32 35
  %761 = load %struct.Screen*, %struct.Screen** %screens2990, align 8
  %arrayidx2991 = getelementptr inbounds %struct.Screen, %struct.Screen* %761, i64 %idxprom2988
  %height = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx2991, i32 0, i32 4
  %762 = load i32, i32* %height, align 4
  %conv2992 = sitofp i32 %762 to double
  store double %conv2992, double* %pixels, align 8
  %763 = load i32, i32* %screen_number, align 4
  %idxprom2993 = sext i32 %763 to i64
  %764 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display2994 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %764, i32 0, i32 2
  %765 = load %struct._XDisplay*, %struct._XDisplay** %display2994, align 8
  %766 = bitcast %struct._XDisplay* %765 to %struct.anon.12*
  %screens2995 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %766, i32 0, i32 35
  %767 = load %struct.Screen*, %struct.Screen** %screens2995, align 8
  %arrayidx2996 = getelementptr inbounds %struct.Screen, %struct.Screen* %767, i64 %idxprom2993
  %mheight = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx2996, i32 0, i32 6
  %768 = load i32, i32* %mheight, align 4
  %conv2997 = sitofp i32 %768 to double
  store double %conv2997, double* %mm, align 8
  %769 = load double, double* %mm, align 8
  %cmp2998 = fcmp olt double %769, 1.000000e+00
  br i1 %cmp2998, label %cond.true.3000, label %cond.false.3001

cond.true.3000:                                   ; preds = %if.then.2985
  br label %cond.end.3003

cond.false.3001:                                  ; preds = %if.then.2985
  %770 = load double, double* %pixels, align 8
  %mul3002 = fmul double %770, 2.540000e+01
  %771 = load double, double* %mm, align 8
  %div = fdiv double %mul3002, %771
  br label %cond.end.3003

cond.end.3003:                                    ; preds = %cond.false.3001, %cond.true.3000
  %cond3004 = phi double [ 1.000000e+02, %cond.true.3000 ], [ %div, %cond.false.3001 ]
  %772 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %resy3005 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %772, i32 0, i32 8
  store double %cond3004, double* %resy3005, align 8
  %773 = load i32, i32* %screen_number, align 4
  %idxprom3006 = sext i32 %773 to i64
  %774 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display3007 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %774, i32 0, i32 2
  %775 = load %struct._XDisplay*, %struct._XDisplay** %display3007, align 8
  %776 = bitcast %struct._XDisplay* %775 to %struct.anon.12*
  %screens3008 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %776, i32 0, i32 35
  %777 = load %struct.Screen*, %struct.Screen** %screens3008, align 8
  %arrayidx3009 = getelementptr inbounds %struct.Screen, %struct.Screen* %777, i64 %idxprom3006
  %width = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx3009, i32 0, i32 3
  %778 = load i32, i32* %width, align 4
  %conv3010 = sitofp i32 %778 to double
  store double %conv3010, double* %pixels, align 8
  %779 = load i32, i32* %screen_number, align 4
  %idxprom3011 = sext i32 %779 to i64
  %780 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display3012 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %780, i32 0, i32 2
  %781 = load %struct._XDisplay*, %struct._XDisplay** %display3012, align 8
  %782 = bitcast %struct._XDisplay* %781 to %struct.anon.12*
  %screens3013 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %782, i32 0, i32 35
  %783 = load %struct.Screen*, %struct.Screen** %screens3013, align 8
  %arrayidx3014 = getelementptr inbounds %struct.Screen, %struct.Screen* %783, i64 %idxprom3011
  %mwidth = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx3014, i32 0, i32 5
  %784 = load i32, i32* %mwidth, align 4
  %conv3015 = sitofp i32 %784 to double
  store double %conv3015, double* %mm, align 8
  %785 = load double, double* %mm, align 8
  %cmp3016 = fcmp olt double %785, 1.000000e+00
  br i1 %cmp3016, label %cond.true.3018, label %cond.false.3019

cond.true.3018:                                   ; preds = %cond.end.3003
  br label %cond.end.3022

cond.false.3019:                                  ; preds = %cond.end.3003
  %786 = load double, double* %pixels, align 8
  %mul3020 = fmul double %786, 2.540000e+01
  %787 = load double, double* %mm, align 8
  %div3021 = fdiv double %mul3020, %787
  br label %cond.end.3022

cond.end.3022:                                    ; preds = %cond.false.3019, %cond.true.3018
  %cond3023 = phi double [ 1.000000e+02, %cond.true.3018 ], [ %div3021, %cond.false.3019 ]
  %788 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %resx3024 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %788, i32 0, i32 7
  store double %cond3023, double* %resx3024, align 8
  br label %if.end.3025

if.end.3025:                                      ; preds = %cond.end.3022, %if.end.2981
  store i32 0, i32* %i, align 4
  br label %for.cond.3026

for.cond.3026:                                    ; preds = %for.inc.3035, %if.end.3025
  %789 = load i32, i32* %i, align 4
  %cmp3027 = icmp slt i32 %789, 54
  br i1 %cmp3027, label %for.body.3029, label %for.end.3037

for.body.3029:                                    ; preds = %for.cond.3026
  %790 = load i32, i32* %i, align 4
  %idxprom3030 = sext i32 %790 to i64
  %arrayidx3031 = getelementptr inbounds [54 x %struct.anon.15], [54 x %struct.anon.15]* @x_term_init.atom_refs, i32 0, i64 %idxprom3030
  %name3032 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx3031, i32 0, i32 0
  %791 = load i8*, i8** %name3032, align 8
  %792 = load i32, i32* %i, align 4
  %idxprom3033 = sext i32 %792 to i64
  %arrayidx3034 = getelementptr inbounds [55 x i8*], [55 x i8*]* %atom_names, i32 0, i64 %idxprom3033
  store i8* %791, i8** %arrayidx3034, align 8
  br label %for.inc.3035

for.inc.3035:                                     ; preds = %for.body.3029
  %793 = load i32, i32* %i, align 4
  %inc3036 = add nsw i32 %793, 1
  store i32 %inc3036, i32* %i, align 4
  br label %for.cond.3026

for.end.3037:                                     ; preds = %for.cond.3026
  %arraydecay3038 = getelementptr inbounds [24 x i8], [24 x i8]* %xsettings_atom_name, i32 0, i32 0
  %794 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %screen3039 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %794, i32 0, i32 6
  %795 = load %struct.Screen*, %struct.Screen** %screen3039, align 8
  %call3040 = call i32 @XScreenNumberOfScreen(%struct.Screen* %795)
  %call3041 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay3038, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @x_term_init.xsettings_fmt, i32 0, i32 0), i32 %call3040) #2
  %arraydecay3042 = getelementptr inbounds [24 x i8], [24 x i8]* %xsettings_atom_name, i32 0, i32 0
  %796 = load i32, i32* %i, align 4
  %idxprom3043 = sext i32 %796 to i64
  %arrayidx3044 = getelementptr inbounds [55 x i8*], [55 x i8*]* %atom_names, i32 0, i64 %idxprom3043
  store i8* %arraydecay3042, i8** %arrayidx3044, align 8
  %797 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display3045 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %797, i32 0, i32 2
  %798 = load %struct._XDisplay*, %struct._XDisplay** %display3045, align 8
  %arraydecay3046 = getelementptr inbounds [55 x i8*], [55 x i8*]* %atom_names, i32 0, i32 0
  %arraydecay3047 = getelementptr inbounds [55 x i64], [55 x i64]* %atoms_return, i32 0, i32 0
  %call3048 = call i32 @XInternAtoms(%struct._XDisplay* %798, i8** %arraydecay3046, i32 55, i32 0, i64* %arraydecay3047)
  store i32 0, i32* %i, align 4
  br label %for.cond.3049

for.cond.3049:                                    ; preds = %for.inc.3058, %for.end.3037
  %799 = load i32, i32* %i, align 4
  %cmp3050 = icmp slt i32 %799, 54
  br i1 %cmp3050, label %for.body.3052, label %for.end.3060

for.body.3052:                                    ; preds = %for.cond.3049
  %800 = load i32, i32* %i, align 4
  %idxprom3053 = sext i32 %800 to i64
  %arrayidx3054 = getelementptr inbounds [55 x i64], [55 x i64]* %atoms_return, i32 0, i64 %idxprom3053
  %801 = load i64, i64* %arrayidx3054, align 8
  %802 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %803 = bitcast %struct.x_display_info* %802 to i8*
  %804 = load i32, i32* %i, align 4
  %idxprom3055 = sext i32 %804 to i64
  %arrayidx3056 = getelementptr inbounds [54 x %struct.anon.15], [54 x %struct.anon.15]* @x_term_init.atom_refs, i32 0, i64 %idxprom3055
  %offset = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx3056, i32 0, i32 1
  %805 = load i32, i32* %offset, align 4
  %idx.ext = sext i32 %805 to i64
  %add.ptr3057 = getelementptr inbounds i8, i8* %803, i64 %idx.ext
  %806 = bitcast i8* %add.ptr3057 to i64*
  store i64 %801, i64* %806, align 8
  br label %for.inc.3058

for.inc.3058:                                     ; preds = %for.body.3052
  %807 = load i32, i32* %i, align 4
  %inc3059 = add nsw i32 %807, 1
  store i32 %inc3059, i32* %i, align 4
  br label %for.cond.3049

for.end.3060:                                     ; preds = %for.cond.3049
  %808 = load i32, i32* %i, align 4
  %idxprom3061 = sext i32 %808 to i64
  %arrayidx3062 = getelementptr inbounds [55 x i64], [55 x i64]* %atoms_return, i32 0, i64 %idxprom3061
  %809 = load i64, i64* %arrayidx3062, align 8
  %810 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_xsettings_sel = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %810, i32 0, i32 118
  store i64 %809, i64* %Xatom_xsettings_sel, align 8
  %811 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_dnd_atoms_size = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %811, i32 0, i32 99
  store i64 8, i64* %x_dnd_atoms_size, align 8
  %812 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_dnd_atoms_size3063 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %812, i32 0, i32 99
  %813 = load i64, i64* %x_dnd_atoms_size3063, align 8
  %mul3064 = mul i64 8, %813
  %call3065 = call noalias i8* @xmalloc(i64 %mul3064)
  %814 = bitcast i8* %call3065 to i64*
  %815 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_dnd_atoms = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %815, i32 0, i32 98
  store i64* %814, i64** %x_dnd_atoms, align 8
  %816 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display3066 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %816, i32 0, i32 2
  %817 = load %struct._XDisplay*, %struct._XDisplay** %display3066, align 8
  %818 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %root_window3067 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %818, i32 0, i32 14
  %819 = load i64, i64* %root_window3067, align 8
  %call3068 = call i64 @XCreatePixmapFromBitmapData(%struct._XDisplay* %817, i64 %819, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @gray_bits, i32 0, i32 0), i32 2, i32 2, i64 1, i64 0, i32 1)
  %820 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %gray = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %820, i32 0, i32 84
  store i64 %call3068, i64* %gray, align 8
  %821 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @x_setup_pointer_blanking(%struct.x_display_info* %821)
  %822 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %823 = load i8*, i8** %resource_name.addr, align 8
  call void @xim_initialize(%struct.x_display_info* %822, i8* %823)
  %824 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @xsettings_initialize(%struct.x_display_info* %824)
  %825 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection3069 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %825, i32 0, i32 3
  %826 = load i32, i32* %connection3069, align 4
  %cmp3070 = icmp ne i32 %826, 0
  br i1 %cmp3070, label %if.then.3072, label %if.end.3074

if.then.3072:                                     ; preds = %for.end.3060
  %827 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection3073 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %827, i32 0, i32 3
  %828 = load i32, i32* %connection3073, align 4
  call void @add_keyboard_wait_descriptor(i32 %828)
  br label %if.end.3074

if.end.3074:                                      ; preds = %if.then.3072, %for.end.3060
  %829 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection3075 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %829, i32 0, i32 3
  %830 = load i32, i32* %connection3075, align 4
  %call3076 = call i32 @getpid() #2
  %call3077 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %830, i32 8, i32 %call3076)
  %831 = load i8, i8* @interrupt_input, align 1
  %tobool3078 = trunc i8 %831 to i1
  br i1 %tobool3078, label %if.then.3079, label %if.end.3081

if.then.3079:                                     ; preds = %if.end.3074
  %832 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection3080 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %832, i32 0, i32 3
  %833 = load i32, i32* %connection3080, align 4
  call void @init_sigio(i32 %833)
  br label %if.end.3081

if.end.3081:                                      ; preds = %if.then.3079, %if.end.3074
  %s3083 = bitcast %union.Aligned_String* %.compoundliteral3082 to %struct.Lisp_String*
  %size3084 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3083, i32 0, i32 0
  store i64 11, i64* %size3084, align 8
  %size_byte3085 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3083, i32 0, i32 1
  store i64 -1, i64* %size_byte3085, align 8
  %intervals3086 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3083, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals3086, align 8
  %data3087 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3083, i32 0, i32 3
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.68, i32 0, i32 0), i8** %data3087, align 8
  %s3088 = bitcast %union.Aligned_String* %.compoundliteral3082 to %struct.Lisp_String*
  %834 = bitcast %struct.Lisp_String* %s3088 to i8*
  %call3089 = call i64 @make_lisp_ptr(i8* %834, i32 4)
  store i64 %call3089, i64* %synchronous, align 8
  %s3091 = bitcast %union.Aligned_String* %.compoundliteral3090 to %struct.Lisp_String*
  %size3092 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3091, i32 0, i32 0
  store i64 11, i64* %size3092, align 8
  %size_byte3093 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3091, i32 0, i32 1
  store i64 -1, i64* %size_byte3093, align 8
  %intervals3094 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3091, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals3094, align 8
  %data3095 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3091, i32 0, i32 3
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.69, i32 0, i32 0), i8** %data3095, align 8
  %s3096 = bitcast %union.Aligned_String* %.compoundliteral3090 to %struct.Lisp_String*
  %835 = bitcast %struct.Lisp_String* %s3096 to i8*
  %call3097 = call i64 @make_lisp_ptr(i8* %835, i32 4)
  store i64 %call3097, i64* %Synchronous, align 8
  %836 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %837 = load i64, i64* %synchronous, align 8
  %838 = load i64, i64* %Synchronous, align 8
  %call3099 = call i64 @builtin_lisp_symbol(i32 0)
  %call3100 = call i64 @builtin_lisp_symbol(i32 0)
  %call3101 = call i64 @display_x_get_resource(%struct.x_display_info* %836, i64 %837, i64 %838, i64 %call3099, i64 %call3100)
  store i64 %call3101, i64* %value3098, align 8
  %839 = load i64, i64* %value3098, align 8
  %call3102 = call zeroext i1 @STRINGP(i64 %839)
  br i1 %call3102, label %land.lhs.true.3104, label %if.end.3115

land.lhs.true.3104:                               ; preds = %if.end.3081
  %840 = load i64, i64* %value3098, align 8
  %call3105 = call i8* @SSDATA(i64 %840)
  %call3106 = call i32 @strcmp(i8* %call3105, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)) #9
  %tobool3107 = icmp ne i32 %call3106, 0
  br i1 %tobool3107, label %lor.lhs.false.3108, label %if.then.3112

lor.lhs.false.3108:                               ; preds = %land.lhs.true.3104
  %841 = load i64, i64* %value3098, align 8
  %call3109 = call i8* @SSDATA(i64 %841)
  %call3110 = call i32 @strcmp(i8* %call3109, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0)) #9
  %tobool3111 = icmp ne i32 %call3110, 0
  br i1 %tobool3111, label %if.end.3115, label %if.then.3112

if.then.3112:                                     ; preds = %lor.lhs.false.3108, %land.lhs.true.3104
  %842 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display3113 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %842, i32 0, i32 2
  %843 = load %struct._XDisplay*, %struct._XDisplay** %display3113, align 8
  %call3114 = call i32 (%struct._XDisplay*)* @XSynchronize(%struct._XDisplay* %843, i32 1)
  br label %if.end.3115

if.end.3115:                                      ; preds = %if.then.3112, %lor.lhs.false.3108, %if.end.3081
  %s3117 = bitcast %union.Aligned_String* %.compoundliteral3116 to %struct.Lisp_String*
  %size3118 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3117, i32 0, i32 0
  store i64 6, i64* %size3118, align 8
  %size_byte3119 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3117, i32 0, i32 1
  store i64 -1, i64* %size_byte3119, align 8
  %intervals3120 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3117, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals3120, align 8
  %data3121 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3117, i32 0, i32 3
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.70, i32 0, i32 0), i8** %data3121, align 8
  %s3122 = bitcast %union.Aligned_String* %.compoundliteral3116 to %struct.Lisp_String*
  %844 = bitcast %struct.Lisp_String* %s3122 to i8*
  %call3123 = call i64 @make_lisp_ptr(i8* %844, i32 4)
  store i64 %call3123, i64* %useXIM, align 8
  %s3125 = bitcast %union.Aligned_String* %.compoundliteral3124 to %struct.Lisp_String*
  %size3126 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3125, i32 0, i32 0
  store i64 6, i64* %size3126, align 8
  %size_byte3127 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3125, i32 0, i32 1
  store i64 -1, i64* %size_byte3127, align 8
  %intervals3128 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3125, i32 0, i32 2
  store %struct.interval* null, %struct.interval** %intervals3128, align 8
  %data3129 = getelementptr inbounds %struct.Lisp_String, %struct.Lisp_String* %s3125, i32 0, i32 3
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i32 0, i32 0), i8** %data3129, align 8
  %s3130 = bitcast %union.Aligned_String* %.compoundliteral3124 to %struct.Lisp_String*
  %845 = bitcast %struct.Lisp_String* %s3130 to i8*
  %call3131 = call i64 @make_lisp_ptr(i8* %845, i32 4)
  store i64 %call3131, i64* %UseXIM, align 8
  %846 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %847 = load i64, i64* %useXIM, align 8
  %848 = load i64, i64* %UseXIM, align 8
  %call3133 = call i64 @builtin_lisp_symbol(i32 0)
  %call3134 = call i64 @builtin_lisp_symbol(i32 0)
  %call3135 = call i64 @display_x_get_resource(%struct.x_display_info* %846, i64 %847, i64 %848, i64 %call3133, i64 %call3134)
  store i64 %call3135, i64* %value3132, align 8
  %849 = load i64, i64* %value3132, align 8
  %call3136 = call zeroext i1 @STRINGP(i64 %849)
  br i1 %call3136, label %land.lhs.true.3138, label %if.end.3147

land.lhs.true.3138:                               ; preds = %if.end.3115
  %850 = load i64, i64* %value3132, align 8
  %call3139 = call i8* @SSDATA(i64 %850)
  %call3140 = call i32 @strcmp(i8* %call3139, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0)) #9
  %tobool3141 = icmp ne i32 %call3140, 0
  br i1 %tobool3141, label %lor.lhs.false.3142, label %if.then.3146

lor.lhs.false.3142:                               ; preds = %land.lhs.true.3138
  %851 = load i64, i64* %value3132, align 8
  %call3143 = call i8* @SSDATA(i64 %851)
  %call3144 = call i32 @strcmp(i8* %call3143, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i32 0, i32 0)) #9
  %tobool3145 = icmp ne i32 %call3144, 0
  br i1 %tobool3145, label %if.end.3147, label %if.then.3146

if.then.3146:                                     ; preds = %lor.lhs.false.3142, %land.lhs.true.3138
  store i8 0, i8* @use_xim, align 1
  br label %if.end.3147

if.end.3147:                                      ; preds = %if.then.3146, %lor.lhs.false.3142, %if.end.3115
  %852 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %id3148 = getelementptr inbounds %struct.terminal, %struct.terminal* %852, i32 0, i32 6
  %853 = load i32, i32* %id3148, align 4
  %cmp3149 = icmp eq i32 %853, 1
  br i1 %cmp3149, label %land.lhs.true.3151, label %if.end.3155

land.lhs.true.3151:                               ; preds = %if.end.3147
  %854 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @daemon_pipe, i32 0, i64 1), align 4
  %cmp3152 = icmp ne i32 %854, 0
  br i1 %cmp3152, label %if.end.3155, label %if.then.3154

if.then.3154:                                     ; preds = %land.lhs.true.3151
  %855 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @x_session_initialize(%struct.x_display_info* %855)
  br label %if.end.3155

if.end.3155:                                      ; preds = %if.then.3154, %land.lhs.true.3151, %if.end.3147
  call void @unblock_input()
  %856 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  store %struct.x_display_info* %856, %struct.x_display_info** %retval
  br label %return

return:                                           ; preds = %if.end.3155, %if.then.52, %if.then.48
  %857 = load %struct.x_display_info*, %struct.x_display_info** %retval
  ret %struct.x_display_info* %857
}

; Function Attrs: nounwind uwtable
define internal void @x_initialize() #0 {
entry:
  store i64 19200, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  store i32 0, i32* @x_noop_count, align 4
  store i8 0, i8* @any_help_event_p, align 1
  store i64 0, i64* @ignore_next_mouse_click_timeout, align 8
  store i32 -1, i32* @current_count, align 4
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %call1 = call i64 @Fset_input_interrupt_mode(i64 %call)
  %call2 = call i32 (%struct._XDisplay*, %struct.XErrorEvent*)* @XSetErrorHandler(i32 (%struct._XDisplay*, %struct.XErrorEvent*)* @x_error_handler)
  %call3 = call i32 (%struct._XDisplay*)* @XSetIOErrorHandler(i32 (%struct._XDisplay*)* @x_io_error_quitter)
  ret void
}

declare void @xg_display_open(i8*, %struct._XDisplay**) #1

declare i8* @XSetLocaleModifiers(i8*) #1

declare i32 @g_log_set_handler(i8*, i32, void (i8*, i32, i8*, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @my_log_handler(i8* %log_domain, i32 %log_level, i8* %msg, i8* %user_data) #0 {
entry:
  %log_domain.addr = alloca i8*, align 8
  %log_level.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 8
  %user_data.addr = alloca i8*, align 8
  store i8* %log_domain, i8** %log_domain.addr, align 8
  store i32 %log_level, i32* %log_level.addr, align 4
  store i8* %msg, i8** %msg.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %msg.addr, align 8
  %call = call i8* @strstr(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.383, i32 0, i32 0)) #9
  %tobool = icmp ne i8* %call, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** %log_domain.addr, align 8
  %3 = load i8*, i8** %msg.addr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.384, i32 0, i32 0), i8* %2, i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @gdk_window_add_filter(%struct._GdkDrawable*, i32 (i8*, %union._GdkEvent*, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @event_handler_gdk(i8* %gxev, %union._GdkEvent* %ev, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %gxev.addr = alloca i8*, align 8
  %ev.addr = alloca %union._GdkEvent*, align 8
  %data.addr = alloca i8*, align 8
  %xev = alloca %union._XEvent*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store i8* %gxev, i8** %gxev.addr, align 8
  store %union._GdkEvent* %ev, %union._GdkEvent** %ev.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %gxev.addr, align 8
  %1 = bitcast i8* %0 to %union._XEvent*
  store %union._XEvent* %1, %union._XEvent** %xev, align 8
  call void @block_input()
  %2 = load i32, i32* @current_count, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else.12

if.then:                                          ; preds = %entry
  %3 = load %union._XEvent*, %union._XEvent** %xev, align 8
  %xany = bitcast %union._XEvent* %3 to %struct.XAnyEvent*
  %display = getelementptr inbounds %struct.XAnyEvent, %struct.XAnyEvent* %xany, i32 0, i32 3
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call = call %struct.x_display_info* @x_display_info_for_display(%struct._XDisplay* %4)
  store %struct.x_display_info* %call, %struct.x_display_info** %dpyinfo, align 8
  %5 = load %union._XEvent*, %union._XEvent** %xev, align 8
  %type = bitcast %union._XEvent* %5 to i32*
  %6 = load i32, i32* %type, align 4
  %cmp1 = icmp eq i32 %6, 2
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load %union._XEvent*, %union._XEvent** %xev, align 8
  %type2 = bitcast %union._XEvent* %7 to i32*
  %8 = load i32, i32* %type2, align 4
  %cmp3 = icmp eq i32 %8, 3
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %tobool = icmp ne %struct.x_display_info* %9, null
  br i1 %tobool, label %land.lhs.true.4, label %if.end

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %10 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %11 = load %union._XEvent*, %union._XEvent** %xev, align 8
  %call5 = call i32 @x_filter_event(%struct.x_display_info* %10, %union._XEvent* %11)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true.4
  call void @unblock_input()
  store i32 2, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.4, %land.lhs.true, %lor.lhs.false
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %tobool8 = icmp ne %struct.x_display_info* %12, null
  br i1 %tobool8, label %if.else, label %if.then.9

if.then.9:                                        ; preds = %if.end
  store i32 0, i32* @current_finish, align 4
  br label %if.end.11

if.else:                                          ; preds = %if.end
  %13 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %14 = load %union._XEvent*, %union._XEvent** %xev, align 8
  %15 = load %struct.input_event*, %struct.input_event** @current_hold_quit, align 8
  %call10 = call i32 @handle_one_xevent(%struct.x_display_info* %13, %union._XEvent* %14, i32* @current_finish, %struct.input_event* %15)
  %16 = load i32, i32* @current_count, align 4
  %add = add nsw i32 %16, %call10
  store i32 %add, i32* @current_count, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.9
  br label %if.end.16

if.else.12:                                       ; preds = %entry
  %17 = load %union._XEvent*, %union._XEvent** %xev, align 8
  %18 = load %union._XEvent*, %union._XEvent** %xev, align 8
  %xany13 = bitcast %union._XEvent* %18 to %struct.XAnyEvent*
  %display14 = getelementptr inbounds %struct.XAnyEvent, %struct.XAnyEvent* %xany13, i32 0, i32 3
  %19 = load %struct._XDisplay*, %struct._XDisplay** %display14, align 8
  %call15 = call i32 @x_dispatch_event(%union._XEvent* %17, %struct._XDisplay* %19)
  store i32 %call15, i32* @current_finish, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.12, %if.end.11
  call void @unblock_input()
  %20 = load i32, i32* @current_finish, align 4
  %cmp17 = icmp eq i32 %20, 1
  br i1 %cmp17, label %if.then.20, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %if.end.16
  %21 = load i32, i32* @current_finish, align 4
  %cmp19 = icmp eq i32 %21, 2
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %lor.lhs.false.18, %if.end.16
  store i32 2, i32* %retval
  br label %return

if.end.21:                                        ; preds = %lor.lhs.false.18
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.21, %if.then.20, %if.then.7
  %22 = load i32, i32* %retval
  ret i32 %22
}

declare void @fixup_locale() #1

declare void @gtk_init(i32*, i8***) #1

declare void @g_log_remove_handler(i8*, i32) #1

declare void @xg_initialize() #1

declare i64 @build_string(i8*) #1

declare i64 @Fexpand_file_name(i64, i64) #1

declare i64 @Ffile_readable_p(i64) #1

declare void @gtk_rc_parse(i8*) #1

declare i32 (%struct._XDisplay*, %struct.XErrorEvent*)* @XSetErrorHandler(i32 (%struct._XDisplay*, %struct.XErrorEvent*)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @x_error_handler(%struct._XDisplay* %display, %struct.XErrorEvent* %event) #0 {
entry:
  %display.addr = alloca %struct._XDisplay*, align 8
  %event.addr = alloca %struct.XErrorEvent*, align 8
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  store %struct.XErrorEvent* %event, %struct.XErrorEvent** %event.addr, align 8
  %0 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %tobool = icmp ne %struct.x_error_message_stack* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %2 = load %struct.XErrorEvent*, %struct.XErrorEvent** %event.addr, align 8
  call void @x_error_catcher(%struct._XDisplay* %1, %struct.XErrorEvent* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %4 = load %struct.XErrorEvent*, %struct.XErrorEvent** %event.addr, align 8
  call void @x_error_quitter(%struct._XDisplay* %3, %struct.XErrorEvent* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 (%struct._XDisplay*)* @XSetIOErrorHandler(i32 (%struct._XDisplay*)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @x_io_error_quitter(%struct._XDisplay* %display) #0 {
entry:
  %display.addr = alloca %struct._XDisplay*, align 8
  %buf = alloca [256 x i8], align 16
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %0 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %1 = bitcast %struct._XDisplay* %0 to %struct.anon.12*
  %display_name = getelementptr inbounds %struct.anon.12, %struct.anon.12* %1, i32 0, i32 32
  %2 = load i8*, i8** %display_name, align 8
  %call = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay, i64 256, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.389, i32 0, i32 0), i8* %2) #2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  call void @x_connection_closed(%struct._XDisplay* %3, i8* %arraydecay1, i1 zeroext true)
  ret i32 0
}

declare %struct.xcb_connection_t* @XGetXCBConnection(%struct._XDisplay*) #1

declare void @xg_display_close(%struct._XDisplay*) #1

; Function Attrs: nounwind uwtable
define internal %struct.terminal* @x_create_terminal(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %terminal = alloca %struct.terminal*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %call = call %struct.terminal* @create_terminal(i32 2, %struct.redisplay_interface* @x_redisplay_interface)
  store %struct.terminal* %call, %struct.terminal** %terminal, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %1 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 12
  %x = bitcast %union.display_info* %display_info to %struct.x_display_info**
  store %struct.x_display_info* %0, %struct.x_display_info** %x, align 8
  %2 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %terminal1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 1
  store %struct.terminal* %2, %struct.terminal** %terminal1, align 8
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %clear_frame_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %4, i32 0, i32 19
  store void (%struct.frame*)* @x_clear_frame, void (%struct.frame*)** %clear_frame_hook, align 8
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %ins_del_lines_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 21
  store void (%struct.frame*, i32, i32)* @x_ins_del_lines, void (%struct.frame*, i32, i32)** %ins_del_lines_hook, align 8
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %delete_glyphs_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %6, i32 0, i32 24
  store void (%struct.frame*, i32)* @x_delete_glyphs, void (%struct.frame*, i32)** %delete_glyphs_hook, align 8
  %7 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %ring_bell_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 25
  store void (%struct.frame*)* @XTring_bell, void (%struct.frame*)** %ring_bell_hook, align 8
  %8 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %toggle_invisible_pointer_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 26
  store void (%struct.frame*, i1)* @XTtoggle_invisible_pointer, void (%struct.frame*, i1)** %toggle_invisible_pointer_hook, align 8
  %9 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %update_begin_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 29
  store void (%struct.frame*)* @x_update_begin, void (%struct.frame*)** %update_begin_hook, align 8
  %10 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %update_end_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 30
  store void (%struct.frame*)* @x_update_end, void (%struct.frame*)** %update_end_hook, align 8
  %11 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %read_socket_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %11, i32 0, i32 43
  store i32 (%struct.terminal*, %struct.input_event*)* @XTread_socket, i32 (%struct.terminal*, %struct.input_event*)** %read_socket_hook, align 8
  %12 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %frame_up_to_date_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 44
  store void (%struct.frame*)* @XTframe_up_to_date, void (%struct.frame*)** %frame_up_to_date_hook, align 8
  %13 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %mouse_position_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 32
  store void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)* @XTmouse_position, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook, align 8
  %14 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %frame_rehighlight_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %14, i32 0, i32 33
  store void (%struct.frame*)* @XTframe_rehighlight, void (%struct.frame*)** %frame_rehighlight_hook, align 8
  %15 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %frame_raise_lower_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %15, i32 0, i32 34
  store void (%struct.frame*, i1)* @XTframe_raise_lower, void (%struct.frame*, i1)** %frame_raise_lower_hook, align 8
  %16 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %fullscreen_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %16, i32 0, i32 35
  store void (%struct.frame*)* @XTfullscreen_hook, void (%struct.frame*)** %fullscreen_hook, align 8
  %17 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %menu_show_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %17, i32 0, i32 36
  store i64 (%struct.frame*, i32, i32, i32, i64, i8**)* @x_menu_show, i64 (%struct.frame*, i32, i32, i32, i64, i8**)** %menu_show_hook, align 8
  %18 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %popup_dialog_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %18, i32 0, i32 37
  store i64 (%struct.frame*, i64, i64)* @xw_popup_dialog, i64 (%struct.frame*, i64, i64)** %popup_dialog_hook, align 8
  %19 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %set_vertical_scroll_bar_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %19, i32 0, i32 38
  store void (%struct.window*, i32, i32, i32)* @XTset_vertical_scroll_bar, void (%struct.window*, i32, i32, i32)** %set_vertical_scroll_bar_hook, align 8
  %20 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %set_horizontal_scroll_bar_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %20, i32 0, i32 39
  store void (%struct.window*, i32, i32, i32)* @XTset_horizontal_scroll_bar, void (%struct.window*, i32, i32, i32)** %set_horizontal_scroll_bar_hook, align 8
  %21 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %condemn_scroll_bars_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %21, i32 0, i32 40
  store void (%struct.frame*)* @XTcondemn_scroll_bars, void (%struct.frame*)** %condemn_scroll_bars_hook, align 8
  %22 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %redeem_scroll_bar_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %22, i32 0, i32 41
  store void (%struct.window*)* @XTredeem_scroll_bar, void (%struct.window*)** %redeem_scroll_bar_hook, align 8
  %23 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %judge_scroll_bars_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %23, i32 0, i32 42
  store void (%struct.frame*)* @XTjudge_scroll_bars, void (%struct.frame*)** %judge_scroll_bars_hook, align 8
  %24 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %delete_frame_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %24, i32 0, i32 45
  store void (%struct.frame*)* @x_destroy_window, void (%struct.frame*)** %delete_frame_hook, align 8
  %25 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %delete_terminal_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %25, i32 0, i32 46
  store void (%struct.terminal*)* @x_delete_terminal, void (%struct.terminal*)** %delete_terminal_hook, align 8
  %26 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  ret %struct.terminal* %26
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @same_x_server(i8* %name1, i8* %name2) #0 {
entry:
  %retval = alloca i1, align 1
  %name1.addr = alloca i8*, align 8
  %name2.addr = alloca i8*, align 8
  %seen_colon = alloca i8, align 1
  %sysname = alloca i64, align 8
  %system_name = alloca i8*, align 8
  %system_name_length = alloca i64, align 8
  %length_until_period = alloca i64, align 8
  store i8* %name1, i8** %name1.addr, align 8
  store i8* %name2, i8** %name2.addr, align 8
  store i8 0, i8* %seen_colon, align 1
  %call = call i64 @Fsystem_name()
  store i64 %call, i64* %sysname, align 8
  %0 = load i64, i64* %sysname, align 8
  %call1 = call i8* @SSDATA(i64 %0)
  store i8* %call1, i8** %system_name, align 8
  %1 = load i64, i64* %sysname, align 8
  %call2 = call i64 @SBYTES(i64 %1)
  store i64 %call2, i64* %system_name_length, align 8
  store i64 0, i64* %length_until_period, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %length_until_period, align 8
  %3 = load i8*, i8** %system_name, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %2
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i64, i64* %length_until_period, align 8
  %6 = load i8*, i8** %system_name, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 %5
  %7 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %7 to i32
  %cmp6 = icmp ne i32 %conv5, 46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %cmp6, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i64, i64* %length_until_period, align 8
  %inc = add nsw i64 %9, 1
  store i64 %inc, i64* %length_until_period, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %10 = load i8*, i8** %name1.addr, align 8
  %call8 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.390, i32 0, i32 0), i64 5) #9
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %while.end
  %11 = load i8*, i8** %name1.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %add.ptr, i8** %name1.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %12 = load i8*, i8** %name2.addr, align 8
  %call9 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.390, i32 0, i32 0), i64 5) #9
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end.13, label %if.then.11

if.then.11:                                       ; preds = %if.end
  %13 = load i8*, i8** %name2.addr, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %13, i64 4
  store i8* %add.ptr12, i8** %name2.addr, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.11, %if.end
  %14 = load i8*, i8** %name1.addr, align 8
  %15 = load i8*, i8** %system_name, align 8
  %16 = load i64, i64* %system_name_length, align 8
  %call14 = call i32 @strncmp(i8* %14, i8* %15, i64 %16) #9
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.22, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.13
  %17 = load i64, i64* %system_name_length, align 8
  %18 = load i8*, i8** %name1.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %18, i64 %17
  %19 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %19 to i32
  %cmp18 = icmp eq i32 %conv17, 58
  br i1 %cmp18, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %land.lhs.true
  %20 = load i64, i64* %system_name_length, align 8
  %21 = load i8*, i8** %name1.addr, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %21, i64 %20
  store i8* %add.ptr21, i8** %name1.addr, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.20, %land.lhs.true, %if.end.13
  %22 = load i8*, i8** %name2.addr, align 8
  %23 = load i8*, i8** %system_name, align 8
  %24 = load i64, i64* %system_name_length, align 8
  %call23 = call i32 @strncmp(i8* %22, i8* %23, i64 %24) #9
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end.32, label %land.lhs.true.25

land.lhs.true.25:                                 ; preds = %if.end.22
  %25 = load i64, i64* %system_name_length, align 8
  %26 = load i8*, i8** %name2.addr, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %26, i64 %25
  %27 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %27 to i32
  %cmp28 = icmp eq i32 %conv27, 58
  br i1 %cmp28, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %land.lhs.true.25
  %28 = load i64, i64* %system_name_length, align 8
  %29 = load i8*, i8** %name2.addr, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %29, i64 %28
  store i8* %add.ptr31, i8** %name2.addr, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %land.lhs.true.25, %if.end.22
  %30 = load i8*, i8** %name1.addr, align 8
  %31 = load i8*, i8** %system_name, align 8
  %32 = load i64, i64* %length_until_period, align 8
  %call33 = call i32 @strncmp(i8* %30, i8* %31, i64 %32) #9
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end.42, label %land.lhs.true.35

land.lhs.true.35:                                 ; preds = %if.end.32
  %33 = load i64, i64* %length_until_period, align 8
  %34 = load i8*, i8** %name1.addr, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %34, i64 %33
  %35 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %35 to i32
  %cmp38 = icmp eq i32 %conv37, 58
  br i1 %cmp38, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %land.lhs.true.35
  %36 = load i64, i64* %length_until_period, align 8
  %37 = load i8*, i8** %name1.addr, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %37, i64 %36
  store i8* %add.ptr41, i8** %name1.addr, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.40, %land.lhs.true.35, %if.end.32
  %38 = load i8*, i8** %name2.addr, align 8
  %39 = load i8*, i8** %system_name, align 8
  %40 = load i64, i64* %length_until_period, align 8
  %call43 = call i32 @strncmp(i8* %38, i8* %39, i64 %40) #9
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end.52, label %land.lhs.true.45

land.lhs.true.45:                                 ; preds = %if.end.42
  %41 = load i64, i64* %length_until_period, align 8
  %42 = load i8*, i8** %name2.addr, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %42, i64 %41
  %43 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %43 to i32
  %cmp48 = icmp eq i32 %conv47, 58
  br i1 %cmp48, label %if.then.50, label %if.end.52

if.then.50:                                       ; preds = %land.lhs.true.45
  %44 = load i64, i64* %length_until_period, align 8
  %45 = load i8*, i8** %name2.addr, align 8
  %add.ptr51 = getelementptr inbounds i8, i8* %45, i64 %44
  store i8* %add.ptr51, i8** %name2.addr, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.50, %land.lhs.true.45, %if.end.42
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.52
  %46 = load i8*, i8** %name1.addr, align 8
  %47 = load i8, i8* %46, align 1
  %conv53 = sext i8 %47 to i32
  %cmp54 = icmp ne i32 %conv53, 0
  br i1 %cmp54, label %land.rhs.56, label %land.end.61

land.rhs.56:                                      ; preds = %for.cond
  %48 = load i8*, i8** %name1.addr, align 8
  %49 = load i8, i8* %48, align 1
  %conv57 = sext i8 %49 to i32
  %50 = load i8*, i8** %name2.addr, align 8
  %51 = load i8, i8* %50, align 1
  %conv58 = sext i8 %51 to i32
  %cmp59 = icmp eq i32 %conv57, %conv58
  br label %land.end.61

land.end.61:                                      ; preds = %land.rhs.56, %for.cond
  %52 = phi i1 [ false, %for.cond ], [ %cmp59, %land.rhs.56 ]
  br i1 %52, label %for.body, label %for.end

for.body:                                         ; preds = %land.end.61
  %53 = load i8*, i8** %name1.addr, align 8
  %54 = load i8, i8* %53, align 1
  %conv62 = sext i8 %54 to i32
  %cmp63 = icmp eq i32 %conv62, 58
  br i1 %cmp63, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %for.body
  store i8 1, i8* %seen_colon, align 1
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.65, %for.body
  %55 = load i8, i8* %seen_colon, align 1
  %tobool67 = trunc i8 %55 to i1
  br i1 %tobool67, label %land.lhs.true.69, label %if.end.74

land.lhs.true.69:                                 ; preds = %if.end.66
  %56 = load i8*, i8** %name1.addr, align 8
  %57 = load i8, i8* %56, align 1
  %conv70 = sext i8 %57 to i32
  %cmp71 = icmp eq i32 %conv70, 46
  br i1 %cmp71, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %land.lhs.true.69
  store i1 true, i1* %retval
  br label %return

if.end.74:                                        ; preds = %land.lhs.true.69, %if.end.66
  br label %for.inc

for.inc:                                          ; preds = %if.end.74
  %58 = load i8*, i8** %name1.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr, i8** %name1.addr, align 8
  %59 = load i8*, i8** %name2.addr, align 8
  %incdec.ptr75 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr75, i8** %name2.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end.61
  %60 = load i8, i8* %seen_colon, align 1
  %tobool76 = trunc i8 %60 to i1
  br i1 %tobool76, label %land.lhs.true.78, label %land.end.92

land.lhs.true.78:                                 ; preds = %for.end
  %61 = load i8*, i8** %name1.addr, align 8
  %62 = load i8, i8* %61, align 1
  %conv79 = sext i8 %62 to i32
  %cmp80 = icmp eq i32 %conv79, 46
  br i1 %cmp80, label %land.rhs.85, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.78
  %63 = load i8*, i8** %name1.addr, align 8
  %64 = load i8, i8* %63, align 1
  %conv82 = sext i8 %64 to i32
  %cmp83 = icmp eq i32 %conv82, 0
  br i1 %cmp83, label %land.rhs.85, label %land.end.92

land.rhs.85:                                      ; preds = %lor.lhs.false, %land.lhs.true.78
  %65 = load i8*, i8** %name2.addr, align 8
  %66 = load i8, i8* %65, align 1
  %conv86 = sext i8 %66 to i32
  %cmp87 = icmp eq i32 %conv86, 46
  br i1 %cmp87, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs.85
  %67 = load i8*, i8** %name2.addr, align 8
  %68 = load i8, i8* %67, align 1
  %conv89 = sext i8 %68 to i32
  %cmp90 = icmp eq i32 %conv89, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs.85
  %69 = phi i1 [ true, %land.rhs.85 ], [ %cmp90, %lor.rhs ]
  br label %land.end.92

land.end.92:                                      ; preds = %lor.end, %lor.lhs.false, %for.end
  %70 = phi i1 [ false, %lor.lhs.false ], [ false, %for.end ], [ %69, %lor.end ]
  store i1 %70, i1* %retval
  br label %return

return:                                           ; preds = %land.end.92, %if.then.73
  %71 = load i1, i1* %retval
  ret i1 %71
}

declare %struct.kboard* @allocate_kboard(i64) #1

declare void @kset_system_key_alist(%struct.kboard*, i64) #1

declare i64 @call1(i64, i64) #1

declare i64 @Fcons(i64, i64) #1

declare noalias i8* @xlispstrdup(i64) #1

declare i64 @Fsystem_name() #1

declare i64 @SBYTES(i64) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #4

declare i8* @lispstpcpy(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_find_modifier_meanings(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %min_code = alloca i32, align 4
  %max_code = alloca i32, align 4
  %syms = alloca i64*, align 8
  %syms_per_code = alloca i32, align 4
  %mods = alloca %struct.XModifierKeymap*, align 8
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %found_alt_or_meta = alloca i8, align 1
  %code = alloca i8, align 1
  %code_col = alloca i32, align 4
  %sym = alloca i32, align 4
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 32
  store i32 0, i32* %meta_mod_mask, align 4
  %1 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %shift_lock_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %1, i32 0, i32 33
  store i32 0, i32* %shift_lock_mask, align 4
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 34
  store i32 0, i32* %alt_mod_mask, align 4
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %super_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 35
  store i32 0, i32* %super_mod_mask, align 4
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %hyper_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 36
  store i32 0, i32* %hyper_mod_mask, align 4
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 2
  %6 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call = call i32 @XDisplayKeycodes(%struct._XDisplay* %6, i32* %min_code, i32* %max_code)
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display1, align 8
  %9 = load i32, i32* %min_code, align 4
  %conv = trunc i32 %9 to i8
  %10 = load i32, i32* %max_code, align 4
  %11 = load i32, i32* %min_code, align 4
  %sub = sub nsw i32 %10, %11
  %add = add nsw i32 %sub, 1
  %call2 = call i64* @XGetKeyboardMapping(%struct._XDisplay* %8, i8 zeroext %conv, i32 %add, i32* %syms_per_code)
  store i64* %call2, i64** %syms, align 8
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display3 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 2
  %13 = load %struct._XDisplay*, %struct._XDisplay** %display3, align 8
  %call4 = call %struct.XModifierKeymap* @XGetModifierMapping(%struct._XDisplay* %13)
  store %struct.XModifierKeymap* %call4, %struct.XModifierKeymap** %mods, align 8
  store i32 3, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.58, %entry
  %14 = load i32, i32* %row, align 4
  %cmp = icmp slt i32 %14, 8
  br i1 %cmp, label %for.body, label %for.end.60

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %found_alt_or_meta, align 1
  store i32 0, i32* %col, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.55, %for.body
  %15 = load i32, i32* %col, align 4
  %16 = load %struct.XModifierKeymap*, %struct.XModifierKeymap** %mods, align 8
  %max_keypermod = getelementptr inbounds %struct.XModifierKeymap, %struct.XModifierKeymap* %16, i32 0, i32 0
  %17 = load i32, i32* %max_keypermod, align 4
  %cmp7 = icmp slt i32 %15, %17
  br i1 %cmp7, label %for.body.9, label %for.end.57

for.body.9:                                       ; preds = %for.cond.6
  %18 = load i32, i32* %row, align 4
  %19 = load %struct.XModifierKeymap*, %struct.XModifierKeymap** %mods, align 8
  %max_keypermod10 = getelementptr inbounds %struct.XModifierKeymap, %struct.XModifierKeymap* %19, i32 0, i32 0
  %20 = load i32, i32* %max_keypermod10, align 4
  %mul = mul nsw i32 %18, %20
  %21 = load i32, i32* %col, align 4
  %add11 = add nsw i32 %mul, %21
  %idxprom = sext i32 %add11 to i64
  %22 = load %struct.XModifierKeymap*, %struct.XModifierKeymap** %mods, align 8
  %modifiermap = getelementptr inbounds %struct.XModifierKeymap, %struct.XModifierKeymap* %22, i32 0, i32 1
  %23 = load i8*, i8** %modifiermap, align 8
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 %idxprom
  %24 = load i8, i8* %arrayidx, align 1
  store i8 %24, i8* %code, align 1
  %25 = load i8, i8* %code, align 1
  %conv12 = zext i8 %25 to i32
  %cmp13 = icmp eq i32 %conv12, 0
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.9
  br label %for.inc.55

if.end:                                           ; preds = %for.body.9
  store i32 0, i32* %code_col, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc, %if.end
  %26 = load i32, i32* %code_col, align 4
  %27 = load i32, i32* %syms_per_code, align 4
  %cmp16 = icmp slt i32 %26, %27
  br i1 %cmp16, label %for.body.18, label %for.end

for.body.18:                                      ; preds = %for.cond.15
  %28 = load i8, i8* %code, align 1
  %conv19 = zext i8 %28 to i32
  %29 = load i32, i32* %min_code, align 4
  %sub20 = sub nsw i32 %conv19, %29
  %30 = load i32, i32* %syms_per_code, align 4
  %mul21 = mul nsw i32 %sub20, %30
  %31 = load i32, i32* %code_col, align 4
  %add22 = add nsw i32 %mul21, %31
  %idxprom23 = sext i32 %add22 to i64
  %32 = load i64*, i64** %syms, align 8
  %arrayidx24 = getelementptr inbounds i64, i64* %32, i64 %idxprom23
  %33 = load i64, i64* %arrayidx24, align 8
  %conv25 = trunc i64 %33 to i32
  store i32 %conv25, i32* %sym, align 4
  %34 = load i32, i32* %sym, align 4
  switch i32 %34, label %sw.epilog [
    i32 65511, label %sw.bb
    i32 65512, label %sw.bb
    i32 65513, label %sw.bb.27
    i32 65514, label %sw.bb.27
    i32 65517, label %sw.bb.31
    i32 65518, label %sw.bb.31
    i32 65515, label %sw.bb.38
    i32 65516, label %sw.bb.38
    i32 65510, label %sw.bb.46
  ]

sw.bb:                                            ; preds = %for.body.18, %for.body.18
  store i8 1, i8* %found_alt_or_meta, align 1
  %35 = load i32, i32* %row, align 4
  %shl = shl i32 1, %35
  %36 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask26 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %36, i32 0, i32 32
  %37 = load i32, i32* %meta_mod_mask26, align 4
  %or = or i32 %37, %shl
  store i32 %or, i32* %meta_mod_mask26, align 4
  br label %sw.epilog

sw.bb.27:                                         ; preds = %for.body.18, %for.body.18
  store i8 1, i8* %found_alt_or_meta, align 1
  %38 = load i32, i32* %row, align 4
  %shl28 = shl i32 1, %38
  %39 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask29 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %39, i32 0, i32 34
  %40 = load i32, i32* %alt_mod_mask29, align 4
  %or30 = or i32 %40, %shl28
  store i32 %or30, i32* %alt_mod_mask29, align 4
  br label %sw.epilog

sw.bb.31:                                         ; preds = %for.body.18, %for.body.18
  %41 = load i8, i8* %found_alt_or_meta, align 1
  %tobool = trunc i8 %41 to i1
  br i1 %tobool, label %if.end.36, label %if.then.32

if.then.32:                                       ; preds = %sw.bb.31
  %42 = load i32, i32* %row, align 4
  %shl33 = shl i32 1, %42
  %43 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %hyper_mod_mask34 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 36
  %44 = load i32, i32* %hyper_mod_mask34, align 4
  %or35 = or i32 %44, %shl33
  store i32 %or35, i32* %hyper_mod_mask34, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.32, %sw.bb.31
  %45 = load i32, i32* %syms_per_code, align 4
  store i32 %45, i32* %code_col, align 4
  %46 = load %struct.XModifierKeymap*, %struct.XModifierKeymap** %mods, align 8
  %max_keypermod37 = getelementptr inbounds %struct.XModifierKeymap, %struct.XModifierKeymap* %46, i32 0, i32 0
  %47 = load i32, i32* %max_keypermod37, align 4
  store i32 %47, i32* %col, align 4
  br label %sw.epilog

sw.bb.38:                                         ; preds = %for.body.18, %for.body.18
  %48 = load i8, i8* %found_alt_or_meta, align 1
  %tobool39 = trunc i8 %48 to i1
  br i1 %tobool39, label %if.end.44, label %if.then.40

if.then.40:                                       ; preds = %sw.bb.38
  %49 = load i32, i32* %row, align 4
  %shl41 = shl i32 1, %49
  %50 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %super_mod_mask42 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %50, i32 0, i32 35
  %51 = load i32, i32* %super_mod_mask42, align 4
  %or43 = or i32 %51, %shl41
  store i32 %or43, i32* %super_mod_mask42, align 4
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.40, %sw.bb.38
  %52 = load i32, i32* %syms_per_code, align 4
  store i32 %52, i32* %code_col, align 4
  %53 = load %struct.XModifierKeymap*, %struct.XModifierKeymap** %mods, align 8
  %max_keypermod45 = getelementptr inbounds %struct.XModifierKeymap, %struct.XModifierKeymap* %53, i32 0, i32 0
  %54 = load i32, i32* %max_keypermod45, align 4
  store i32 %54, i32* %col, align 4
  br label %sw.epilog

sw.bb.46:                                         ; preds = %for.body.18
  %55 = load i8, i8* %found_alt_or_meta, align 1
  %tobool47 = trunc i8 %55 to i1
  br i1 %tobool47, label %if.end.53, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.bb.46
  %56 = load i32, i32* %row, align 4
  %shl48 = shl i32 1, %56
  %cmp49 = icmp eq i32 %shl48, 2
  br i1 %cmp49, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %land.lhs.true
  %57 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %shift_lock_mask52 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %57, i32 0, i32 33
  store i32 2, i32* %shift_lock_mask52, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.51, %land.lhs.true, %sw.bb.46
  %58 = load i32, i32* %syms_per_code, align 4
  store i32 %58, i32* %code_col, align 4
  %59 = load %struct.XModifierKeymap*, %struct.XModifierKeymap** %mods, align 8
  %max_keypermod54 = getelementptr inbounds %struct.XModifierKeymap, %struct.XModifierKeymap* %59, i32 0, i32 0
  %60 = load i32, i32* %max_keypermod54, align 4
  store i32 %60, i32* %col, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body.18, %if.end.53, %if.end.44, %if.end.36, %sw.bb.27, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %61 = load i32, i32* %code_col, align 4
  %inc = add nsw i32 %61, 1
  store i32 %inc, i32* %code_col, align 4
  br label %for.cond.15

for.end:                                          ; preds = %for.cond.15
  br label %for.inc.55

for.inc.55:                                       ; preds = %for.end, %if.then
  %62 = load i32, i32* %col, align 4
  %inc56 = add nsw i32 %62, 1
  store i32 %inc56, i32* %col, align 4
  br label %for.cond.6

for.end.57:                                       ; preds = %for.cond.6
  br label %for.inc.58

for.inc.58:                                       ; preds = %for.end.57
  %63 = load i32, i32* %row, align 4
  %inc59 = add nsw i32 %63, 1
  store i32 %inc59, i32* %row, align 4
  br label %for.cond

for.end.60:                                       ; preds = %for.cond
  %64 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask61 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %64, i32 0, i32 32
  %65 = load i32, i32* %meta_mod_mask61, align 4
  %tobool62 = icmp ne i32 %65, 0
  br i1 %tobool62, label %if.end.67, label %if.then.63

if.then.63:                                       ; preds = %for.end.60
  %66 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask64 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %66, i32 0, i32 34
  %67 = load i32, i32* %alt_mod_mask64, align 4
  %68 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask65 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %68, i32 0, i32 32
  store i32 %67, i32* %meta_mod_mask65, align 4
  %69 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask66 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %69, i32 0, i32 34
  store i32 0, i32* %alt_mod_mask66, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.63, %for.end.60
  %70 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask68 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %70, i32 0, i32 34
  %71 = load i32, i32* %alt_mod_mask68, align 4
  %72 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask69 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %72, i32 0, i32 32
  %73 = load i32, i32* %meta_mod_mask69, align 4
  %and = and i32 %71, %73
  %tobool70 = icmp ne i32 %and, 0
  br i1 %tobool70, label %if.then.71, label %if.end.75

if.then.71:                                       ; preds = %if.end.67
  %74 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask72 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %74, i32 0, i32 32
  %75 = load i32, i32* %meta_mod_mask72, align 4
  %neg = xor i32 %75, -1
  %76 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask73 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %76, i32 0, i32 34
  %77 = load i32, i32* %alt_mod_mask73, align 4
  %and74 = and i32 %77, %neg
  store i32 %and74, i32* %alt_mod_mask73, align 4
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.71, %if.end.67
  %78 = load i64*, i64** %syms, align 8
  %79 = bitcast i64* %78 to i8*
  %call76 = call i32 @XFree(i8* %79)
  %80 = load %struct.XModifierKeymap*, %struct.XModifierKeymap** %mods, align 8
  %call77 = call i32 @XFreeModifiermap(%struct.XModifierKeymap* %80)
  ret void
}

declare %struct._GdkCursor* @xg_create_default_cursor(%struct._XDisplay*) #1

declare i64 @XCreateFontCursor(%struct._XDisplay*, i32) #1

declare %struct._XrmHashBucketRec* @x_load_resources(%struct._XDisplay*, i8*, i8*, i8*) #1

declare void @XrmSetDatabase(%struct._XDisplay*, %struct._XrmHashBucketRec*) #1

declare void @select_visual(%struct.x_display_info*) #1

; Function Attrs: nounwind uwtable
define internal void @get_bits_and_offset(i64 %mask, i32* %bits, i32* %offset) #0 {
entry:
  %mask.addr = alloca i64, align 8
  %bits.addr = alloca i32*, align 8
  %offset.addr = alloca i32*, align 8
  %nr = alloca i32, align 4
  %off = alloca i32, align 4
  store i64 %mask, i64* %mask.addr, align 8
  store i32* %bits, i32** %bits.addr, align 8
  store i32* %offset, i32** %offset.addr, align 8
  store i32 0, i32* %nr, align 4
  store i32 0, i32* %off, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %mask.addr, align 8
  %and = and i64 %0, 1
  %tobool = icmp ne i64 %and, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %off, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %off, align 4
  %2 = load i64, i64* %mask.addr, align 8
  %shr = lshr i64 %2, 1
  store i64 %shr, i64* %mask.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond.1

while.cond.1:                                     ; preds = %while.body.4, %while.end
  %3 = load i64, i64* %mask.addr, align 8
  %and2 = and i64 %3, 1
  %tobool3 = icmp ne i64 %and2, 0
  br i1 %tobool3, label %while.body.4, label %while.end.7

while.body.4:                                     ; preds = %while.cond.1
  %4 = load i32, i32* %nr, align 4
  %inc5 = add nsw i32 %4, 1
  store i32 %inc5, i32* %nr, align 4
  %5 = load i64, i64* %mask.addr, align 8
  %shr6 = lshr i64 %5, 1
  store i64 %shr6, i64* %mask.addr, align 8
  br label %while.cond.1

while.end.7:                                      ; preds = %while.cond.1
  %6 = load i32, i32* %off, align 4
  %7 = load i32*, i32** %offset.addr, align 8
  store i32 %6, i32* %7, align 4
  %8 = load i32, i32* %nr, align 4
  %9 = load i32*, i32** %bits.addr, align 8
  store i32 %8, i32* %9, align 4
  ret void
}

declare i64 @display_x_get_resource(%struct.x_display_info*, i64, i64, i64, i64) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

declare i64 @XCopyColormapAndFree(%struct._XDisplay*, i64) #1

declare i64 @XCreateColormap(%struct._XDisplay*, i64, %struct.Visual*, i32) #1

declare i32 @XRenderQueryExtension(%struct._XDisplay*, i32*, i32*) #1

declare i8* @XGetDefault(%struct._XDisplay*, i8*, i8*) #1

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #6

declare i32 @XScreenNumberOfScreen(%struct.Screen*) #1

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #6

declare i32 @XInternAtoms(%struct._XDisplay*, i8**, i32, i32, i64*) #1

declare i64 @XCreatePixmapFromBitmapData(%struct._XDisplay*, i64, i8*, i32, i32, i64, i64, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_setup_pointer_blanking(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %call = call i8* @egetenv(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.391, i32 0, i32 0))
  %tobool = icmp ne i8* %call, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 2
  %1 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call1 = call zeroext i1 @x_probe_xfixes_extension(%struct._XDisplay* %1)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %toggle_visible_pointer = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 19
  store void (%struct.frame*, i1)* @xfixes_toggle_visible_pointer, void (%struct.frame*, i1)** %toggle_visible_pointer, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %toggle_visible_pointer2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 19
  store void (%struct.frame*, i1)* @x_toggle_visible_pointer, void (%struct.frame*, i1)** %toggle_visible_pointer2, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %call3 = call i64 @make_invisible_cursor(%struct.x_display_info* %4)
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %invisible_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 18
  store i64 %call3, i64* %invisible_cursor, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xim_initialize(%struct.x_display_info* %dpyinfo, i8* %resource_name) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %resource_name.addr = alloca i8*, align 8
  %xim_inst = alloca %struct.xim_inst_t*, align 8
  %ret = alloca i32, align 4
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i8* %resource_name, i8** %resource_name.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 85
  store %struct._XIM* null, %struct._XIM** %xim, align 8
  %1 = load i8, i8* @use_xim, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @xmalloc(i64 16)
  %2 = bitcast i8* %call to %struct.xim_inst_t*
  store %struct.xim_inst_t* %2, %struct.xim_inst_t** %xim_inst, align 8
  %3 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim_callback_data = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 87
  store %struct.xim_inst_t* %3, %struct.xim_inst_t** %xim_callback_data, align 8
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %6 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %dpyinfo1 = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %6, i32 0, i32 0
  store %struct.x_display_info* %5, %struct.x_display_info** %dpyinfo1, align 8
  %7 = load i8*, i8** %resource_name.addr, align 8
  %call2 = call noalias i8* @xstrdup(i8* %7)
  %8 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %resource_name3 = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %8, i32 0, i32 1
  store i8* %call2, i8** %resource_name3, align 8
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 2
  %10 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %11 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xrdb = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 21
  %12 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %xrdb, align 8
  %13 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %resource_name4 = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %13, i32 0, i32 1
  %14 = load i8*, i8** %resource_name4, align 8
  %15 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %16 = bitcast %struct.xim_inst_t* %15 to i8*
  %call5 = call i32 @XRegisterIMInstantiateCallback(%struct._XDisplay* %10, %struct._XrmHashBucketRec* %12, i8* %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @emacs_class, i32 0, i32 0), void (%struct._XDisplay*, i8*, i8*)* @xim_instantiate_callback, i8* %16)
  store i32 %call5, i32* %ret, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @xsettings_initialize(%struct.x_display_info*) #1

declare void @add_keyboard_wait_descriptor(i32) #1

declare i32 @rpl_fcntl(i32, i32, ...) #1

; Function Attrs: nounwind
declare i32 @getpid() #6

declare void @init_sigio(i32) #1

declare i32 (%struct._XDisplay*)* @XSynchronize(%struct._XDisplay*, i32) #1

declare void @x_session_initialize(%struct.x_display_info*) #1

; Function Attrs: nounwind uwtable
define void @x_delete_terminal(%struct.terminal* %terminal) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 12
  %x = bitcast %union.display_info* %display_info to %struct.x_display_info**
  %1 = load %struct.x_display_info*, %struct.x_display_info** %x, align 8
  store %struct.x_display_info* %1, %struct.x_display_info** %dpyinfo, align 8
  %2 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %name = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 9
  %3 = load i8*, i8** %name, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  call void @block_input()
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xim = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 85
  %5 = load %struct._XIM*, %struct._XIM** %xim, align 8
  %tobool1 = icmp ne %struct._XIM* %5, null
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @xim_close_dpy(%struct.x_display_info* %6)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %tobool4 = icmp ne %struct._XDisplay* %8, null
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end.3
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @x_destroy_all_bitmaps(%struct.x_display_info* %9)
  %10 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display6 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 2
  %11 = load %struct._XDisplay*, %struct._XDisplay** %display6, align 8
  %call = call i32 @XSetCloseDownMode(%struct._XDisplay* %11, i32 0)
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display7 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 2
  %13 = load %struct._XDisplay*, %struct._XDisplay** %display7, align 8
  call void @xg_display_close(%struct._XDisplay* %13)
  %14 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display8 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 2
  store %struct._XDisplay* null, %struct._XDisplay** %display8, align 8
  br label %if.end.13

if.else:                                          ; preds = %if.end.3
  %15 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 3
  %16 = load i32, i32* %connection, align 4
  %cmp = icmp sge i32 %16, 0
  br i1 %cmp, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.else
  %17 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 3
  %18 = load i32, i32* %connection10, align 4
  %call11 = call i32 @emacs_close(i32 %18)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %if.else
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.then.5
  %19 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection14 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %19, i32 0, i32 3
  %20 = load i32, i32* %connection14, align 4
  call void @delete_keyboard_wait_descriptor(i32 %20)
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %connection15 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 3
  store i32 -1, i32* %connection15, align 4
  %22 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  call void @x_delete_display(%struct.x_display_info* %22)
  call void @unblock_input()
  br label %return

return:                                           ; preds = %if.end.13, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xim_close_dpy(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %xim_inst = alloca %struct.xim_inst_t*, align 8
  %ret = alloca i32, align 4
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load i8, i8* @use_xim, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end.12

if.then:                                          ; preds = %entry
  %1 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim_callback_data = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %1, i32 0, i32 87
  %2 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_callback_data, align 8
  store %struct.xim_inst_t* %2, %struct.xim_inst_t** %xim_inst, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 2
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %tobool1 = icmp ne %struct._XDisplay* %4, null
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display3 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 2
  %6 = load %struct._XDisplay*, %struct._XDisplay** %display3, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xrdb = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 21
  %8 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %xrdb, align 8
  %9 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %resource_name = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %9, i32 0, i32 1
  %10 = load i8*, i8** %resource_name, align 8
  %11 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %12 = bitcast %struct.xim_inst_t* %11 to i8*
  %call = call i32 @XUnregisterIMInstantiateCallback(%struct._XDisplay* %6, %struct._XrmHashBucketRec* %8, i8* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @emacs_class, i32 0, i32 0), void (%struct._XDisplay*, i8*, i8*)* @xim_instantiate_callback, i8* %12)
  store i32 %call, i32* %ret, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %13 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %resource_name4 = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %13, i32 0, i32 1
  %14 = load i8*, i8** %resource_name4, align 8
  call void @xfree(i8* %14)
  %15 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %16 = bitcast %struct.xim_inst_t* %15 to i8*
  call void @xfree(i8* %16)
  %17 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display5 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 2
  %18 = load %struct._XDisplay*, %struct._XDisplay** %display5, align 8
  %tobool6 = icmp ne %struct._XDisplay* %18, null
  br i1 %tobool6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %if.end
  %19 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %19, i32 0, i32 85
  %20 = load %struct._XIM*, %struct._XIM** %xim, align 8
  %call8 = call i32 @XCloseIM(%struct._XIM* %20)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.7, %if.end
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 85
  store %struct._XIM* null, %struct._XIM** %xim10, align 8
  %22 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim_styles = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 86
  %23 = load %struct.XIMStyles*, %struct.XIMStyles** %xim_styles, align 8
  %24 = bitcast %struct.XIMStyles* %23 to i8*
  %call11 = call i32 @XFree(i8* %24)
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.9, %entry
  ret void
}

declare void @x_destroy_all_bitmaps(%struct.x_display_info*) #1

declare i32 @XSetCloseDownMode(%struct._XDisplay*, i32) #1

declare i32 @emacs_close(i32) #1

declare void @delete_keyboard_wait_descriptor(i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_delete_display(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %t = alloca %struct.terminal*, align 8
  %color_entry = alloca %struct.color_name_cache_entry*, align 8
  %next_color_entry = alloca %struct.color_name_cache_entry*, align 8
  %tail = alloca %struct.x_display_info*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** @terminal_list, align 8
  store %struct.terminal* %0, %struct.terminal** %t, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %type = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 8
  %3 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %3, 2
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %4, i32 0, i32 12
  %x = bitcast %union.display_info* %display_info to %struct.x_display_info**
  %5 = load %struct.x_display_info*, %struct.x_display_info** %x, align 8
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp1 = icmp eq %struct.x_display_info* %5, %6
  br i1 %cmp1, label %if.then, label %if.end.5

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.terminal*, %struct.terminal** %t, align 8
  %id = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 6
  %8 = load i32, i32* %id, align 4
  %cmp2 = icmp eq i32 %8, 1
  br i1 %cmp2, label %land.lhs.true.3, label %if.end

land.lhs.true.3:                                  ; preds = %if.then
  %call = call zeroext i1 @x_session_have_connection()
  br i1 %call, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %land.lhs.true.3
  call void @x_session_close()
  br label %if.end

if.end:                                           ; preds = %if.then.4, %land.lhs.true.3, %if.then
  %9 = load %struct.terminal*, %struct.terminal** %t, align 8
  call void @delete_terminal(%struct.terminal* %9)
  br label %for.end

if.end.5:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.5
  %10 = load %struct.terminal*, %struct.terminal** %t, align 8
  %next_terminal = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 5
  %11 = load %struct.terminal*, %struct.terminal** %next_terminal, align 8
  store %struct.terminal* %11, %struct.terminal** %t, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end, %for.cond
  %12 = load %struct.x_display_info*, %struct.x_display_info** @next_noop_dpyinfo, align 8
  %13 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp6 = icmp eq %struct.x_display_info* %12, %13
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %for.end
  %14 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %next = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 0
  %15 = load %struct.x_display_info*, %struct.x_display_info** %next, align 8
  store %struct.x_display_info* %15, %struct.x_display_info** @next_noop_dpyinfo, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %for.end
  %16 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  %17 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp9 = icmp eq %struct.x_display_info* %16, %17
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end.8
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %next11 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %18, i32 0, i32 0
  %19 = load %struct.x_display_info*, %struct.x_display_info** %next11, align 8
  store %struct.x_display_info* %19, %struct.x_display_info** @x_display_list, align 8
  br label %if.end.25

if.else:                                          ; preds = %if.end.8
  %20 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  store %struct.x_display_info* %20, %struct.x_display_info** %tail, align 8
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc.22, %if.else
  %21 = load %struct.x_display_info*, %struct.x_display_info** %tail, align 8
  %tobool13 = icmp ne %struct.x_display_info* %21, null
  br i1 %tobool13, label %for.body.14, label %for.end.24

for.body.14:                                      ; preds = %for.cond.12
  %22 = load %struct.x_display_info*, %struct.x_display_info** %tail, align 8
  %next15 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 0
  %23 = load %struct.x_display_info*, %struct.x_display_info** %next15, align 8
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp16 = icmp eq %struct.x_display_info* %23, %24
  br i1 %cmp16, label %if.then.17, label %if.end.21

if.then.17:                                       ; preds = %for.body.14
  %25 = load %struct.x_display_info*, %struct.x_display_info** %tail, align 8
  %next18 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %25, i32 0, i32 0
  %26 = load %struct.x_display_info*, %struct.x_display_info** %next18, align 8
  %next19 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 0
  %27 = load %struct.x_display_info*, %struct.x_display_info** %next19, align 8
  %28 = load %struct.x_display_info*, %struct.x_display_info** %tail, align 8
  %next20 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 0
  store %struct.x_display_info* %27, %struct.x_display_info** %next20, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.17, %for.body.14
  br label %for.inc.22

for.inc.22:                                       ; preds = %if.end.21
  %29 = load %struct.x_display_info*, %struct.x_display_info** %tail, align 8
  %next23 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %29, i32 0, i32 0
  %30 = load %struct.x_display_info*, %struct.x_display_info** %next23, align 8
  store %struct.x_display_info* %30, %struct.x_display_info** %tail, align 8
  br label %for.cond.12

for.end.24:                                       ; preds = %for.cond.12
  br label %if.end.25

if.end.25:                                        ; preds = %for.end.24, %if.then.10
  %31 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %color_names = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %31, i32 0, i32 88
  %32 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %color_names, align 8
  store %struct.color_name_cache_entry* %32, %struct.color_name_cache_entry** %color_entry, align 8
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc.30, %if.end.25
  %33 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %color_entry, align 8
  %tobool27 = icmp ne %struct.color_name_cache_entry* %33, null
  br i1 %tobool27, label %for.body.28, label %for.end.31

for.body.28:                                      ; preds = %for.cond.26
  %34 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %color_entry, align 8
  %next29 = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %34, i32 0, i32 0
  %35 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %next29, align 8
  store %struct.color_name_cache_entry* %35, %struct.color_name_cache_entry** %next_color_entry, align 8
  %36 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %color_entry, align 8
  %name = getelementptr inbounds %struct.color_name_cache_entry, %struct.color_name_cache_entry* %36, i32 0, i32 2
  %37 = load i8*, i8** %name, align 8
  call void @xfree(i8* %37)
  %38 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %color_entry, align 8
  %39 = bitcast %struct.color_name_cache_entry* %38 to i8*
  call void @xfree(i8* %39)
  br label %for.inc.30

for.inc.30:                                       ; preds = %for.body.28
  %40 = load %struct.color_name_cache_entry*, %struct.color_name_cache_entry** %next_color_entry, align 8
  store %struct.color_name_cache_entry* %40, %struct.color_name_cache_entry** %color_entry, align 8
  br label %for.cond.26

for.end.31:                                       ; preds = %for.cond.26
  %41 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_id_name = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %41, i32 0, i32 27
  %42 = load i8*, i8** %x_id_name, align 8
  call void @xfree(i8* %42)
  %43 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_dnd_atoms = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 98
  %44 = load i64*, i64** %x_dnd_atoms, align 8
  %45 = bitcast i64* %44 to i8*
  call void @xfree(i8* %45)
  %46 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %color_cells = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %46, i32 0, i32 89
  %47 = load %struct.XColor*, %struct.XColor** %color_cells, align 8
  %48 = bitcast %struct.XColor* %47 to i8*
  call void @xfree(i8* %48)
  %49 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %50 = bitcast %struct.x_display_info* %49 to i8*
  call void @xfree(i8* %50)
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_xterm() #0 {
entry:
  call void @xputenv(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.74, i32 0, i32 0))
  ret void
}

declare void @xputenv(i8*) #1

; Function Attrs: nounwind uwtable
define void @syms_of_xterm() #0 {
entry:
  store %struct.x_error_message_stack* null, %struct.x_error_message_stack** @x_error_message, align 8
  %call = call i64 @build_pure_c_string(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.75, i32 0, i32 0))
  store i64 %call, i64* @xg_default_icon_file, align 8
  call void @staticpro(i64* @xg_default_icon_file)
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_xterm.b_fwd, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 509))
  br label %do.end

do.end:                                           ; preds = %do.body
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 509), align 1
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_xterm.b_fwd.77, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 508))
  br label %do.end.2

do.end.2:                                         ; preds = %do.body.1
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 508), align 1
  br label %do.body.3

do.body.3:                                        ; preds = %do.end.2
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_xterm.b_fwd.79, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 506))
  br label %do.end.4

do.end.4:                                         ; preds = %do.body.3
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 506), align 1
  br label %do.body.5

do.body.5:                                        ; preds = %do.end.4
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_xterm.o_fwd, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.81, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 364))
  br label %do.end.6

do.end.6:                                         ; preds = %do.body.5
  %call7 = call i64 @intern_c_string(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i32 0, i32 0))
  store i64 %call7, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 364), align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 171)
  %call9 = call i64 @builtin_lisp_symbol(i32 678)
  %call10 = call i64 @Fput(i64 %call8, i64 %call9, i64 16777218)
  %call11 = call i64 @builtin_lisp_symbol(i32 527)
  %call12 = call i64 @builtin_lisp_symbol(i32 678)
  %call13 = call i64 @Fput(i64 %call11, i64 %call12, i64 67108866)
  %call14 = call i64 @builtin_lisp_symbol(i32 658)
  %call15 = call i64 @builtin_lisp_symbol(i32 678)
  %call16 = call i64 @Fput(i64 %call14, i64 %call15, i64 536870914)
  %call17 = call i64 @builtin_lisp_symbol(i32 892)
  %call18 = call i64 @builtin_lisp_symbol(i32 678)
  %call19 = call i64 @Fput(i64 %call17, i64 %call18, i64 33554434)
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.6
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_xterm.o_fwd.83, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.84, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 342))
  br label %do.end.21

do.end.21:                                        ; preds = %do.body.20
  %call22 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call22, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 342), align 8
  br label %do.body.23

do.body.23:                                       ; preds = %do.end.21
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_xterm.o_fwd.85, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.86, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 346))
  br label %do.end.24

do.end.24:                                        ; preds = %do.body.23
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call25, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 346), align 8
  br label %do.body.26

do.body.26:                                       ; preds = %do.end.24
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_xterm.o_fwd.87, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.88, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 350))
  br label %do.end.27

do.end.27:                                        ; preds = %do.body.26
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call28, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 350), align 8
  br label %do.body.29

do.body.29:                                       ; preds = %do.end.27
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_xterm.o_fwd.89, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.90, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 363))
  br label %do.end.30

do.end.30:                                        ; preds = %do.body.29
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call31, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 363), align 8
  br label %do.body.32

do.body.32:                                       ; preds = %do.end.30
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_xterm.o_fwd.91, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.92, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 347))
  br label %do.end.33

do.end.33:                                        ; preds = %do.body.32
  %call34 = call i64 @make_float(double 1.500000e+00)
  %call35 = call i64 @make_float(double 8.000000e-01)
  %call36 = call i64 @builtin_lisp_symbol(i32 0)
  %call37 = call i64 @make_hash_table(%struct.hash_table_test* byval align 8 @hashtest_eql, i64 3602, i64 %call34, i64 %call35, i64 %call36)
  store i64 %call37, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 347), align 8
  br label %do.body.38

do.body.38:                                       ; preds = %do.end.33
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_xterm.b_fwd.93, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501))
  br label %do.end.39

do.end.39:                                        ; preds = %do.body.38
  store i8 0, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  ret void
}

declare i64 @build_pure_c_string(i8*) #1

declare void @staticpro(i64*) #1

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare i64 @intern_c_string(i8*) #1

declare i64 @Fput(i64, i64, i64) #1

declare i64 @make_hash_table(%struct.hash_table_test* byval align 8, i64, i64, i64, i64) #1

declare i64 @make_float(double) #1

declare i32 @XQueryTree(%struct._XDisplay*, i64, i64*, i64*, i64**, i32*) #1

; Function Attrs: nounwind uwtable
define internal %struct.XColor* @x_color_cells(%struct._XDisplay* %dpy, i32* %ncells) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %ncells.addr = alloca i32*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %screen = alloca %struct.Screen*, align 8
  %ncolor_cells = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store i32* %ncells, i32** %ncells.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call %struct.x_display_info* @x_display_info_for_display(%struct._XDisplay* %0)
  store %struct.x_display_info* %call, %struct.x_display_info** %dpyinfo, align 8
  %1 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %1, i32 0, i32 89
  %2 = load %struct.XColor*, %struct.XColor** %color_cells, align 8
  %cmp = icmp eq %struct.XColor* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %screen1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 6
  %4 = load %struct.Screen*, %struct.Screen** %screen1, align 8
  store %struct.Screen* %4, %struct.Screen** %screen, align 8
  %5 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %6 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %call2 = call i32 @XScreenNumberOfScreen(%struct.Screen* %6)
  %call3 = call i32 @XDisplayCells(%struct._XDisplay* %5, i32 %call2)
  store i32 %call3, i32* %ncolor_cells, align 4
  %7 = load i32, i32* %ncolor_cells, align 4
  %conv = sext i32 %7 to i64
  %call4 = call noalias i8* @xnmalloc(i64 %conv, i64 16)
  %8 = bitcast i8* %call4 to %struct.XColor*
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells5 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 89
  store %struct.XColor* %8, %struct.XColor** %color_cells5, align 8
  %10 = load i32, i32* %ncolor_cells, align 4
  %11 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %ncolor_cells6 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 90
  store i32 %10, i32* %ncolor_cells6, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %ncolor_cells, align 4
  %cmp7 = icmp slt i32 %12, %13
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %i, align 4
  %conv9 = sext i32 %14 to i64
  %15 = load i32, i32* %i, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %16, i32 0, i32 89
  %17 = load %struct.XColor*, %struct.XColor** %color_cells10, align 8
  %arrayidx = getelementptr inbounds %struct.XColor, %struct.XColor* %17, i64 %idxprom
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %arrayidx, i32 0, i32 0
  store i64 %conv9, i64* %pixel, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %20 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmap = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %20, i32 0, i32 10
  %21 = load i64, i64* %cmap, align 8
  %22 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells11 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 89
  %23 = load %struct.XColor*, %struct.XColor** %color_cells11, align 8
  %24 = load i32, i32* %ncolor_cells, align 4
  %call12 = call i32 @XQueryColors(%struct._XDisplay* %19, i64 %21, %struct.XColor* %23, i32 %24)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %ncolor_cells13 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %25, i32 0, i32 90
  %26 = load i32, i32* %ncolor_cells13, align 4
  %27 = load i32*, i32** %ncells.addr, align 8
  store i32 %26, i32* %27, align 4
  %28 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %color_cells14 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 89
  %29 = load %struct.XColor*, %struct.XColor** %color_cells14, align 8
  ret %struct.XColor* %29
}

declare i32 @XDisplayCells(%struct._XDisplay*, i32) #1

declare noalias i8* @xnmalloc(i64, i64) #1

declare i32 @XClearArea(%struct._XDisplay*, i64, i32, i32, i32, i32, i32) #1

declare i32 @x_display_pixel_width(%struct.x_display_info*) #1

declare i32 @x_display_pixel_height(%struct.x_display_info*) #1

declare i64 @list1(i64) #1

declare void @x_real_positions(%struct.frame*, i32*, i32*) #1

declare i32 @wait_reading_process_output(i64, i32, i32, i1 zeroext, i64, %struct.Lisp_Process*, i32) #1

declare void @frame_size_history_add(%struct.frame*, i64, i32, i32, i64) #1

declare i64 @list2(i64, i64) #1

declare i32 @XResizeWindow(%struct._XDisplay*, i64, i32, i32) #1

declare i64 @list3(i64, i64, i64) #1

declare void @fset_redisplay(%struct.frame*) #1

declare void @store_frame_param(%struct.frame*, i64, i64) #1

declare void @x_set_fullscreen(%struct.frame*, i64, i64) #1

declare void @change_frame_size(%struct.frame*, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define internal i32 @handle_one_xevent(%struct.x_display_info* %dpyinfo, %union._XEvent* %event, i32* %finish, %struct.input_event* %hold_quit) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %event.addr = alloca %union._XEvent*, align 8
  %finish.addr = alloca i32*, align 8
  %hold_quit.addr = alloca %struct.input_event*, align 8
  %inev = alloca %union.buffered_input_event, align 8
  %count = alloca i32, align 4
  %do_help = alloca i32, align 4
  %nbytes = alloca i64, align 8
  %any = alloca %struct.frame*, align 8
  %f = alloca %struct.frame*, align 8
  %coding = alloca %struct.coding_system, align 8
  %hlinfo = alloca %struct.Mouse_HLInfo*, align 8
  %configureEvent = alloca %union._XEvent, align 8
  %next_event = alloca %union._XEvent, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %new_x = alloca i32, align 4
  %new_y = alloca i32, align 4
  %pixmap = alloca i64, align 8
  %msg = alloca i32, align 4
  %eventp = alloca %struct.XSelectionClearEvent*, align 8
  %eventp190 = alloca %struct.XSelectionRequestEvent*, align 8
  %not_hidden = alloca i8, align 1
  %visible353 = alloca i8, align 1
  %iconified390 = alloca i8, align 1
  %keysym = alloca i64, align 8
  %orig_keysym = alloca i64, align 8
  %copy_buffer = alloca [513 x i8], align 16
  %copy_bufptr = alloca i8*, align 8
  %copy_bufsiz = alloca i32, align 4
  %modifiers = alloca i32, align 4
  %coding_system = alloca i64, align 8
  %c = alloca i64, align 8
  %xkey463 = alloca %struct.XKeyEvent, align 8
  %status_return = alloca i32, align 4
  %i = alloca i64, align 8
  %nchars = alloca i32, align 4
  %len = alloca i32, align 4
  %ch = alloca i32, align 4
  %window983 = alloca i64, align 8
  %tool_bar_p = alloca i8, align 1
  %bar = alloca %struct.scroll_bar*, align 8
  %frame1307 = alloca i64, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  store i32* %finish, i32** %finish.addr, align 8
  store %struct.input_event* %hold_quit, %struct.input_event** %hold_quit.addr, align 8
  store i32 0, i32* %count, align 4
  store i32 0, i32* %do_help, align 4
  store i64 0, i64* %nbytes, align 8
  store %struct.frame* null, %struct.frame** %f, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 25
  store %struct.Mouse_HLInfo* %mouse_highlight, %struct.Mouse_HLInfo** %hlinfo, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %1 = load i32*, i32** %finish.addr, align 8
  store i32 0, i32* %1, align 4
  %ie = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %2 = bitcast %struct.input_event* %ie to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 56, i32 8, i1 false)
  %ie1 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %3 = bitcast %struct.input_event* %ie1 to i32*
  %bf.load = load i32, i32* %3, align 8
  %bf.clear = and i32 %bf.load, -65536
  store i32 %bf.clear, i32* %3, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %ie3 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %ie3, i32 0, i32 7
  store i64 %call2, i64* %arg, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %5 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xany = bitcast %union._XEvent* %5 to %struct.XAnyEvent*
  %window = getelementptr inbounds %struct.XAnyEvent, %struct.XAnyEvent* %xany, i32 0, i32 4
  %6 = load i64, i64* %window, align 8
  %conv = trunc i64 %6 to i32
  %call4 = call %struct.frame* @x_any_window_to_frame(%struct.x_display_info* %4, i32 %conv)
  store %struct.frame* %call4, %struct.frame** %any, align 8
  %7 = load %struct.frame*, %struct.frame** %any, align 8
  %tobool = icmp ne %struct.frame* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %any, align 8
  %wait_event_type = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 64
  %9 = load i32, i32* %wait_event_type, align 4
  %10 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type = bitcast %union._XEvent* %10 to i32*
  %11 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %9, %11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.frame*, %struct.frame** %any, align 8
  %wait_event_type6 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 64
  store i32 0, i32* %wait_event_type6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type7 = bitcast %union._XEvent* %13 to i32*
  %14 = load i32, i32* %type7, align 4
  switch i32 %14, label %sw.default [
    i32 33, label %sw.bb
    i32 31, label %sw.bb.176
    i32 29, label %sw.bb.178
    i32 30, label %sw.bb.188
    i32 28, label %sw.bb.207
    i32 21, label %sw.bb.267
    i32 12, label %sw.bb.285
    i32 13, label %sw.bb.326
    i32 14, label %sw.bb.340
    i32 18, label %sw.bb.341
    i32 19, label %sw.bb.384
    i32 2, label %sw.bb.437
    i32 3, label %sw.bb.878
    i32 7, label %sw.bb.881
    i32 9, label %sw.bb.911
    i32 8, label %sw.bb.913
    i32 10, label %sw.bb.941
    i32 6, label %sw.bb.943
    i32 22, label %sw.bb.1031
    i32 5, label %sw.bb.1114
    i32 4, label %sw.bb.1114
    i32 26, label %sw.bb.1280
    i32 27, label %sw.bb.1281
    i32 15, label %sw.bb.1282
    i32 34, label %sw.bb.1283
    i32 17, label %sw.bb.1288
  ]

sw.bb:                                            ; preds = %if.end
  %15 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient = bitcast %union._XEvent* %15 to %struct.XClientMessageEvent*
  %message_type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient, i32 0, i32 5
  %16 = load i64, i64* %message_type, align 8
  %17 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_wm_protocols = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 37
  %18 = load i64, i64* %Xatom_wm_protocols, align 8
  %cmp8 = icmp eq i64 %16, %18
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.84

land.lhs.true.10:                                 ; preds = %sw.bb
  %19 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient11 = bitcast %union._XEvent* %19 to %struct.XClientMessageEvent*
  %format = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient11, i32 0, i32 6
  %20 = load i32, i32* %format, align 4
  %cmp12 = icmp eq i32 %20, 32
  br i1 %cmp12, label %if.then.14, label %if.end.84

if.then.14:                                       ; preds = %land.lhs.true.10
  %21 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient15 = bitcast %union._XEvent* %21 to %struct.XClientMessageEvent*
  %data = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient15, i32 0, i32 7
  %l = bitcast %union.anon.5* %data to [5 x i64]*
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %l, i32 0, i64 0
  %22 = load i64, i64* %arrayidx, align 8
  %23 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_wm_take_focus = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %23, i32 0, i32 38
  %24 = load i64, i64* %Xatom_wm_take_focus, align 8
  %cmp16 = icmp eq i64 %22, %24
  br i1 %cmp16, label %if.then.18, label %if.end.27

if.then.18:                                       ; preds = %if.then.14
  %25 = load %struct.frame*, %struct.frame** %any, align 8
  store %struct.frame* %25, %struct.frame** %f, align 8
  %26 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool19 = icmp ne %struct.frame* %26, null
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.26

land.lhs.true.20:                                 ; preds = %if.then.18
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %28 = load %struct.x_output*, %struct.x_output** %x, align 8
  %xic = getelementptr inbounds %struct.x_output, %struct.x_output* %28, i32 0, i32 47
  %29 = load %struct._XIC*, %struct._XIC** %xic, align 8
  %tobool21 = icmp ne %struct._XIC* %29, null
  br i1 %tobool21, label %if.then.22, label %if.end.26

if.then.22:                                       ; preds = %land.lhs.true.20
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %31 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %xic25 = getelementptr inbounds %struct.x_output, %struct.x_output* %31, i32 0, i32 47
  %32 = load %struct._XIC*, %struct._XIC** %xic25, align 8
  call void @XSetICFocus(%struct._XIC* %32)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.22, %land.lhs.true.20, %if.then.18
  br label %done

if.end.27:                                        ; preds = %if.then.14
  %33 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient28 = bitcast %union._XEvent* %33 to %struct.XClientMessageEvent*
  %data29 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient28, i32 0, i32 7
  %l30 = bitcast %union.anon.5* %data29 to [5 x i64]*
  %arrayidx31 = getelementptr inbounds [5 x i64], [5 x i64]* %l30, i32 0, i64 0
  %34 = load i64, i64* %arrayidx31, align 8
  %35 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_wm_save_yourself = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %35, i32 0, i32 39
  %36 = load i64, i64* %Xatom_wm_save_yourself, align 8
  %cmp32 = icmp eq i64 %34, %36
  br i1 %cmp32, label %if.then.34, label %if.end.67

if.then.34:                                       ; preds = %if.end.27
  %call35 = call zeroext i1 @x_session_have_connection()
  br i1 %call35, label %if.end.66, label %if.then.36

if.then.36:                                       ; preds = %if.then.34
  %37 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %38 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient37 = bitcast %union._XEvent* %38 to %struct.XClientMessageEvent*
  %window38 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient37, i32 0, i32 4
  %39 = load i64, i64* %window38, align 8
  %conv39 = trunc i64 %39 to i32
  %call40 = call %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %37, i32 %conv39)
  store %struct.frame* %call40, %struct.frame** %f, align 8
  %40 = load %struct.frame*, %struct.frame** %f, align 8
  %41 = load i64, i64* @selected_frame, align 8
  %call41 = call zeroext i1 @FRAMEP(i64 %41)
  br i1 %call41, label %land.lhs.true.43, label %cond.false

land.lhs.true.43:                                 ; preds = %if.then.36
  %42 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %42, 5
  %43 = inttoptr i64 %sub to i8*
  %44 = bitcast i8* %43 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 61
  %45 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp44 = icmp ne %struct.terminal* %45, null
  br i1 %cmp44, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.43
  %46 = load i64, i64* @selected_frame, align 8
  %sub46 = sub nsw i64 %46, 5
  %47 = inttoptr i64 %sub46 to i8*
  %48 = bitcast i8* %47 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.43, %if.then.36
  call void @emacs_abort() #10
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %49, %cond.true
  %cond = phi %struct.frame* [ %48, %cond.true ], [ null, %49 ]
  %cmp47 = icmp eq %struct.frame* %40, %cond
  br i1 %cmp47, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %cond.end
  %50 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data50 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 62
  %x51 = bitcast %union.output_data* %output_data50 to %struct.x_output**
  %51 = load %struct.x_output*, %struct.x_output** %x51, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %51, i32 0, i32 44
  %52 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %52, i32 0, i32 2
  %53 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %54 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient52 = bitcast %union._XEvent* %54 to %struct.XClientMessageEvent*
  %window53 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient52, i32 0, i32 4
  %55 = load i64, i64* %window53, align 8
  %56 = load i8**, i8*** @initial_argv, align 8
  %57 = load i32, i32* @initial_argc, align 4
  %call54 = call i32 @XSetCommand(%struct._XDisplay* %53, i64 %55, i8** %56, i32 %57)
  br label %if.end.65

if.else:                                          ; preds = %cond.end
  %58 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool55 = icmp ne %struct.frame* %58, null
  br i1 %tobool55, label %if.then.56, label %if.end.64

if.then.56:                                       ; preds = %if.else
  %59 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data57 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 62
  %x58 = bitcast %union.output_data* %output_data57 to %struct.x_output**
  %60 = load %struct.x_output*, %struct.x_output** %x58, align 8
  %display_info59 = getelementptr inbounds %struct.x_output, %struct.x_output* %60, i32 0, i32 44
  %61 = load %struct.x_display_info*, %struct.x_display_info** %display_info59, align 8
  %display60 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %61, i32 0, i32 2
  %62 = load %struct._XDisplay*, %struct._XDisplay** %display60, align 8
  %63 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient61 = bitcast %union._XEvent* %63 to %struct.XClientMessageEvent*
  %window62 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient61, i32 0, i32 4
  %64 = load i64, i64* %window62, align 8
  %call63 = call i32 @XSetCommand(%struct._XDisplay* %62, i64 %64, i8** null, i32 0)
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.56, %if.else
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.then.49
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.then.34
  br label %done

if.end.67:                                        ; preds = %if.end.27
  %65 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient68 = bitcast %union._XEvent* %65 to %struct.XClientMessageEvent*
  %data69 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient68, i32 0, i32 7
  %l70 = bitcast %union.anon.5* %data69 to [5 x i64]*
  %arrayidx71 = getelementptr inbounds [5 x i64], [5 x i64]* %l70, i32 0, i64 0
  %66 = load i64, i64* %arrayidx71, align 8
  %67 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_wm_delete_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %67, i32 0, i32 40
  %68 = load i64, i64* %Xatom_wm_delete_window, align 8
  %cmp72 = icmp eq i64 %66, %68
  br i1 %cmp72, label %if.then.74, label %if.end.83

if.then.74:                                       ; preds = %if.end.67
  %69 = load %struct.frame*, %struct.frame** %any, align 8
  store %struct.frame* %69, %struct.frame** %f, align 8
  %70 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool75 = icmp ne %struct.frame* %70, null
  br i1 %tobool75, label %if.end.77, label %if.then.76

if.then.76:                                       ; preds = %if.then.74
  br label %OTHER

if.end.77:                                        ; preds = %if.then.74
  %ie78 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %71 = bitcast %struct.input_event* %ie78 to i32*
  %bf.load79 = load i32, i32* %71, align 8
  %bf.clear80 = and i32 %bf.load79, -65536
  %bf.set = or i32 %bf.clear80, 13
  store i32 %bf.set, i32* %71, align 8
  %72 = load %struct.frame*, %struct.frame** %f, align 8
  %73 = bitcast %struct.frame* %72 to i8*
  %call81 = call i64 @make_lisp_ptr(i8* %73, i32 5)
  %ie82 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %ie82, i32 0, i32 6
  store i64 %call81, i64* %frame_or_window, align 8
  br label %done

if.end.83:                                        ; preds = %if.end.67
  br label %done

if.end.84:                                        ; preds = %land.lhs.true.10, %sw.bb
  %74 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient85 = bitcast %union._XEvent* %74 to %struct.XClientMessageEvent*
  %message_type86 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient85, i32 0, i32 5
  %75 = load i64, i64* %message_type86, align 8
  %76 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_wm_configure_denied = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %76, i32 0, i32 42
  %77 = load i64, i64* %Xatom_wm_configure_denied, align 8
  %cmp87 = icmp eq i64 %75, %77
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %if.end.84
  br label %done

if.end.90:                                        ; preds = %if.end.84
  %78 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient91 = bitcast %union._XEvent* %78 to %struct.XClientMessageEvent*
  %message_type92 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient91, i32 0, i32 5
  %79 = load i64, i64* %message_type92, align 8
  %80 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_wm_window_moved = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %80, i32 0, i32 43
  %81 = load i64, i64* %Xatom_wm_window_moved, align 8
  %cmp93 = icmp eq i64 %79, %81
  br i1 %cmp93, label %if.then.95, label %if.end.112

if.then.95:                                       ; preds = %if.end.90
  %82 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %83 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient96 = bitcast %union._XEvent* %83 to %struct.XClientMessageEvent*
  %window97 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient96, i32 0, i32 4
  %84 = load i64, i64* %window97, align 8
  %conv98 = trunc i64 %84 to i32
  %call99 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %82, i32 %conv98)
  store %struct.frame* %call99, %struct.frame** %f, align 8
  %85 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient100 = bitcast %union._XEvent* %85 to %struct.XClientMessageEvent*
  %data101 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient100, i32 0, i32 7
  %s = bitcast %union.anon.5* %data101 to [10 x i16]*
  %arrayidx102 = getelementptr inbounds [10 x i16], [10 x i16]* %s, i32 0, i64 0
  %86 = load i16, i16* %arrayidx102, align 2
  %conv103 = sext i16 %86 to i32
  store i32 %conv103, i32* %new_x, align 4
  %87 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient104 = bitcast %union._XEvent* %87 to %struct.XClientMessageEvent*
  %data105 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient104, i32 0, i32 7
  %s106 = bitcast %union.anon.5* %data105 to [10 x i16]*
  %arrayidx107 = getelementptr inbounds [10 x i16], [10 x i16]* %s106, i32 0, i64 1
  %88 = load i16, i16* %arrayidx107, align 2
  %conv108 = sext i16 %88 to i32
  store i32 %conv108, i32* %new_y, align 4
  %89 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool109 = icmp ne %struct.frame* %89, null
  br i1 %tobool109, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %if.then.95
  %90 = load i32, i32* %new_x, align 4
  %91 = load %struct.frame*, %struct.frame** %f, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 44
  store i32 %90, i32* %left_pos, align 4
  %92 = load i32, i32* %new_y, align 4
  %93 = load %struct.frame*, %struct.frame** %f, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %93, i32 0, i32 45
  store i32 %92, i32* %top_pos, align 4
  br label %if.end.111

if.end.111:                                       ; preds = %if.then.110, %if.then.95
  br label %done

if.end.112:                                       ; preds = %if.end.90
  %94 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient113 = bitcast %union._XEvent* %94 to %struct.XClientMessageEvent*
  %message_type114 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient113, i32 0, i32 5
  %95 = load i64, i64* %message_type114, align 8
  %96 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_DONE = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %96, i32 0, i32 65
  %97 = load i64, i64* %Xatom_DONE, align 8
  %cmp115 = icmp eq i64 %95, %97
  br i1 %cmp115, label %if.then.121, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.112
  %98 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient117 = bitcast %union._XEvent* %98 to %struct.XClientMessageEvent*
  %message_type118 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient117, i32 0, i32 5
  %99 = load i64, i64* %message_type118, align 8
  %100 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_PAGE = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %100, i32 0, i32 66
  %101 = load i64, i64* %Xatom_PAGE, align 8
  %cmp119 = icmp eq i64 %99, %101
  br i1 %cmp119, label %if.then.121, label %if.end.133

if.then.121:                                      ; preds = %lor.lhs.false, %if.end.112
  %102 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient122 = bitcast %union._XEvent* %102 to %struct.XClientMessageEvent*
  %data123 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient122, i32 0, i32 7
  %l124 = bitcast %union.anon.5* %data123 to [5 x i64]*
  %arrayidx125 = getelementptr inbounds [5 x i64], [5 x i64]* %l124, i32 0, i64 1
  %103 = load i64, i64* %arrayidx125, align 8
  store i64 %103, i64* %pixmap, align 8
  %104 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %105 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient126 = bitcast %union._XEvent* %105 to %struct.XClientMessageEvent*
  %window127 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient126, i32 0, i32 4
  %106 = load i64, i64* %window127, align 8
  %conv128 = trunc i64 %106 to i32
  %call129 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %104, i32 %conv128)
  store %struct.frame* %call129, %struct.frame** %f, align 8
  %107 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool130 = icmp ne %struct.frame* %107, null
  br i1 %tobool130, label %if.end.132, label %if.then.131

if.then.131:                                      ; preds = %if.then.121
  br label %OTHER

if.end.132:                                       ; preds = %if.then.121
  %108 = load i64, i64* %pixmap, align 8
  %109 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_kill_gs_process(i64 %108, %struct.frame* %109)
  %110 = load %struct.frame*, %struct.frame** %f, align 8
  call void @expose_frame(%struct.frame* %110, i32 0, i32 0, i32 0, i32 0)
  br label %done

if.end.133:                                       ; preds = %lor.lhs.false
  %111 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient134 = bitcast %union._XEvent* %111 to %struct.XClientMessageEvent*
  %message_type135 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient134, i32 0, i32 5
  %112 = load i64, i64* %message_type135, align 8
  %113 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_Scrollbar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %113, i32 0, i32 67
  %114 = load i64, i64* %Xatom_Scrollbar, align 8
  %cmp136 = icmp eq i64 %112, %114
  br i1 %cmp136, label %if.then.138, label %if.else.140

if.then.138:                                      ; preds = %if.end.133
  %115 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie139 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_scroll_bar_to_input_event(%union._XEvent* %115, %struct.input_event* %ie139)
  %116 = load i32*, i32** %finish.addr, align 8
  store i32 1, i32* %116, align 4
  br label %done

if.else.140:                                      ; preds = %if.end.133
  %117 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient141 = bitcast %union._XEvent* %117 to %struct.XClientMessageEvent*
  %message_type142 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient141, i32 0, i32 5
  %118 = load i64, i64* %message_type142, align 8
  %119 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_Horizontal_Scrollbar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %119, i32 0, i32 68
  %120 = load i64, i64* %Xatom_Horizontal_Scrollbar, align 8
  %cmp143 = icmp eq i64 %118, %120
  br i1 %cmp143, label %if.then.145, label %if.end.147

if.then.145:                                      ; preds = %if.else.140
  %121 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie146 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_horizontal_scroll_bar_to_input_event(%union._XEvent* %121, %struct.input_event* %ie146)
  %122 = load i32*, i32** %finish.addr, align 8
  store i32 1, i32* %122, align 4
  br label %done

if.end.147:                                       ; preds = %if.else.140
  br label %if.end.148

if.end.148:                                       ; preds = %if.end.147
  %123 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient149 = bitcast %union._XEvent* %123 to %struct.XClientMessageEvent*
  %message_type150 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient149, i32 0, i32 5
  %124 = load i64, i64* %message_type150, align 8
  %125 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_XEMBED = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %125, i32 0, i32 69
  %126 = load i64, i64* %Xatom_XEMBED, align 8
  %cmp151 = icmp eq i64 %124, %126
  br i1 %cmp151, label %if.then.153, label %if.end.167

if.then.153:                                      ; preds = %if.end.148
  %127 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient154 = bitcast %union._XEvent* %127 to %struct.XClientMessageEvent*
  %data155 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient154, i32 0, i32 7
  %l156 = bitcast %union.anon.5* %data155 to [5 x i64]*
  %arrayidx157 = getelementptr inbounds [5 x i64], [5 x i64]* %l156, i32 0, i64 1
  %128 = load i64, i64* %arrayidx157, align 8
  %conv158 = trunc i64 %128 to i32
  store i32 %conv158, i32* %msg, align 4
  %129 = load i32, i32* %msg, align 4
  %cmp159 = icmp eq i32 %129, 4
  br i1 %cmp159, label %if.then.164, label %lor.lhs.false.161

lor.lhs.false.161:                                ; preds = %if.then.153
  %130 = load i32, i32* %msg, align 4
  %cmp162 = icmp eq i32 %130, 5
  br i1 %cmp162, label %if.then.164, label %if.end.166

if.then.164:                                      ; preds = %lor.lhs.false.161, %if.then.153
  %131 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %132 = load %struct.frame*, %struct.frame** %any, align 8
  %133 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie165 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_detect_focus_change(%struct.x_display_info* %131, %struct.frame* %132, %union._XEvent* %133, %struct.input_event* %ie165)
  br label %if.end.166

if.end.166:                                       ; preds = %if.then.164, %lor.lhs.false.161
  %134 = load i32*, i32** %finish.addr, align 8
  store i32 1, i32* %134, align 4
  br label %done

if.end.167:                                       ; preds = %if.end.148
  %135 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %136 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  call void @xft_settings_event(%struct.x_display_info* %135, %union._XEvent* %136)
  %137 = load %struct.frame*, %struct.frame** %any, align 8
  store %struct.frame* %137, %struct.frame** %f, align 8
  %138 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool168 = icmp ne %struct.frame* %138, null
  br i1 %tobool168, label %if.end.170, label %if.then.169

if.then.169:                                      ; preds = %if.end.167
  br label %OTHER

if.end.170:                                       ; preds = %if.end.167
  %139 = load %struct.frame*, %struct.frame** %f, align 8
  %140 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient171 = bitcast %union._XEvent* %140 to %struct.XClientMessageEvent*
  %141 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %ie172 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %call173 = call zeroext i1 @x_handle_dnd_message(%struct.frame* %139, %struct.XClientMessageEvent* %xclient171, %struct.x_display_info* %141, %struct.input_event* %ie172)
  br i1 %call173, label %if.then.174, label %if.end.175

if.then.174:                                      ; preds = %if.end.170
  %142 = load i32*, i32** %finish.addr, align 8
  store i32 2, i32* %142, align 4
  br label %if.end.175

if.end.175:                                       ; preds = %if.then.174, %if.end.170
  br label %sw.epilog.1289

sw.bb.176:                                        ; preds = %if.end
  %143 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %144 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xselection = bitcast %union._XEvent* %144 to %struct.XSelectionEvent*
  %time = getelementptr inbounds %struct.XSelectionEvent, %struct.XSelectionEvent* %xselection, i32 0, i32 8
  %145 = load i64, i64* %time, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %143, i64 %145)
  %146 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xselection177 = bitcast %union._XEvent* %146 to %struct.XSelectionEvent*
  call void @x_handle_selection_notify(%struct.XSelectionEvent* %xselection177)
  br label %sw.epilog.1289

sw.bb.178:                                        ; preds = %if.end
  %147 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %148 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xselectionclear = bitcast %union._XEvent* %148 to %struct.XSelectionClearEvent*
  %time179 = getelementptr inbounds %struct.XSelectionClearEvent, %struct.XSelectionClearEvent* %xselectionclear, i32 0, i32 6
  %149 = load i64, i64* %time179, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %147, i64 %149)
  %150 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xselectionclear180 = bitcast %union._XEvent* %150 to %struct.XSelectionClearEvent*
  store %struct.XSelectionClearEvent* %xselectionclear180, %struct.XSelectionClearEvent** %eventp, align 8
  %sie = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %151 = bitcast %struct.selection_input_event* %sie to i16*
  store i16 11, i16* %151, align 8
  %152 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %sie181 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %dpyinfo182 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie181, i32 0, i32 1
  store %struct.x_display_info* %152, %struct.x_display_info** %dpyinfo182, align 8
  %153 = load %struct.XSelectionClearEvent*, %struct.XSelectionClearEvent** %eventp, align 8
  %selection = getelementptr inbounds %struct.XSelectionClearEvent, %struct.XSelectionClearEvent* %153, i32 0, i32 5
  %154 = load i64, i64* %selection, align 8
  %sie183 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %selection184 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie183, i32 0, i32 3
  store i64 %154, i64* %selection184, align 8
  %155 = load %struct.XSelectionClearEvent*, %struct.XSelectionClearEvent** %eventp, align 8
  %time185 = getelementptr inbounds %struct.XSelectionClearEvent, %struct.XSelectionClearEvent* %155, i32 0, i32 6
  %156 = load i64, i64* %time185, align 8
  %sie186 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %time187 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie186, i32 0, i32 6
  store i64 %156, i64* %time187, align 8
  br label %sw.epilog.1289

sw.bb.188:                                        ; preds = %if.end
  %157 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %158 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xselectionrequest = bitcast %union._XEvent* %158 to %struct.XSelectionRequestEvent*
  %time189 = getelementptr inbounds %struct.XSelectionRequestEvent, %struct.XSelectionRequestEvent* %xselectionrequest, i32 0, i32 9
  %159 = load i64, i64* %time189, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %157, i64 %159)
  %160 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xselectionrequest191 = bitcast %union._XEvent* %160 to %struct.XSelectionRequestEvent*
  store %struct.XSelectionRequestEvent* %xselectionrequest191, %struct.XSelectionRequestEvent** %eventp190, align 8
  %sie192 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %161 = bitcast %struct.selection_input_event* %sie192 to i16*
  store i16 10, i16* %161, align 8
  %162 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %sie193 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %dpyinfo194 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie193, i32 0, i32 1
  store %struct.x_display_info* %162, %struct.x_display_info** %dpyinfo194, align 8
  %163 = load %struct.XSelectionRequestEvent*, %struct.XSelectionRequestEvent** %eventp190, align 8
  %requestor = getelementptr inbounds %struct.XSelectionRequestEvent, %struct.XSelectionRequestEvent* %163, i32 0, i32 5
  %164 = load i64, i64* %requestor, align 8
  %sie195 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %requestor196 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie195, i32 0, i32 2
  store i64 %164, i64* %requestor196, align 8
  %165 = load %struct.XSelectionRequestEvent*, %struct.XSelectionRequestEvent** %eventp190, align 8
  %selection197 = getelementptr inbounds %struct.XSelectionRequestEvent, %struct.XSelectionRequestEvent* %165, i32 0, i32 6
  %166 = load i64, i64* %selection197, align 8
  %sie198 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %selection199 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie198, i32 0, i32 3
  store i64 %166, i64* %selection199, align 8
  %167 = load %struct.XSelectionRequestEvent*, %struct.XSelectionRequestEvent** %eventp190, align 8
  %target = getelementptr inbounds %struct.XSelectionRequestEvent, %struct.XSelectionRequestEvent* %167, i32 0, i32 7
  %168 = load i64, i64* %target, align 8
  %sie200 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %target201 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie200, i32 0, i32 4
  store i64 %168, i64* %target201, align 8
  %169 = load %struct.XSelectionRequestEvent*, %struct.XSelectionRequestEvent** %eventp190, align 8
  %property = getelementptr inbounds %struct.XSelectionRequestEvent, %struct.XSelectionRequestEvent* %169, i32 0, i32 8
  %170 = load i64, i64* %property, align 8
  %sie202 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %property203 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie202, i32 0, i32 5
  store i64 %170, i64* %property203, align 8
  %171 = load %struct.XSelectionRequestEvent*, %struct.XSelectionRequestEvent** %eventp190, align 8
  %time204 = getelementptr inbounds %struct.XSelectionRequestEvent, %struct.XSelectionRequestEvent* %171, i32 0, i32 9
  %172 = load i64, i64* %time204, align 8
  %sie205 = bitcast %union.buffered_input_event* %inev to %struct.selection_input_event*
  %time206 = getelementptr inbounds %struct.selection_input_event, %struct.selection_input_event* %sie205, i32 0, i32 6
  store i64 %172, i64* %time206, align 8
  br label %sw.epilog.1289

sw.bb.207:                                        ; preds = %if.end
  %173 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %174 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xproperty = bitcast %union._XEvent* %174 to %struct.XPropertyEvent*
  %time208 = getelementptr inbounds %struct.XPropertyEvent, %struct.XPropertyEvent* %xproperty, i32 0, i32 6
  %175 = load i64, i64* %time208, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %173, i64 %175)
  %176 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %177 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xproperty209 = bitcast %union._XEvent* %177 to %struct.XPropertyEvent*
  %window210 = getelementptr inbounds %struct.XPropertyEvent, %struct.XPropertyEvent* %xproperty209, i32 0, i32 4
  %178 = load i64, i64* %window210, align 8
  %conv211 = trunc i64 %178 to i32
  %call212 = call %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %176, i32 %conv211)
  store %struct.frame* %call212, %struct.frame** %f, align 8
  %179 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool213 = icmp ne %struct.frame* %179, null
  br i1 %tobool213, label %land.lhs.true.214, label %if.end.265

land.lhs.true.214:                                ; preds = %sw.bb.207
  %180 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xproperty215 = bitcast %union._XEvent* %180 to %struct.XPropertyEvent*
  %atom = getelementptr inbounds %struct.XPropertyEvent, %struct.XPropertyEvent* %xproperty215, i32 0, i32 5
  %181 = load i64, i64* %atom, align 8
  %182 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_net_wm_state = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %182, i32 0, i32 109
  %183 = load i64, i64* %Xatom_net_wm_state, align 8
  %cmp216 = icmp eq i64 %181, %183
  br i1 %cmp216, label %if.then.218, label %if.end.265

if.then.218:                                      ; preds = %land.lhs.true.214
  %184 = load %struct.frame*, %struct.frame** %f, align 8
  %185 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xproperty219 = bitcast %union._XEvent* %185 to %struct.XPropertyEvent*
  %call220 = call zeroext i1 @x_handle_net_wm_state(%struct.frame* %184, %struct.XPropertyEvent* %xproperty219)
  %frombool = zext i1 %call220 to i8
  store i8 %frombool, i8* %not_hidden, align 1
  %186 = load i8, i8* %not_hidden, align 1
  %tobool221 = trunc i8 %186 to i1
  br i1 %tobool221, label %land.lhs.true.223, label %if.else.243

land.lhs.true.223:                                ; preds = %if.then.218
  %187 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %187, i32 0, i32 26
  %188 = bitcast i48* %iconified to i64*
  %bf.load224 = load i64, i64* %188, align 8
  %bf.lshr = lshr i64 %bf.load224, 12
  %bf.clear225 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear225 to i1
  br i1 %bf.cast, label %if.then.227, label %if.else.243

if.then.227:                                      ; preds = %land.lhs.true.223
  %189 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %189, i32 1)
  %190 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified228 = getelementptr inbounds %struct.frame, %struct.frame* %190, i32 0, i32 26
  %191 = bitcast i48* %iconified228 to i64*
  %bf.load229 = load i64, i64* %191, align 8
  %bf.clear230 = and i64 %bf.load229, -4097
  store i64 %bf.clear230, i64* %191, align 8
  %192 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data231 = getelementptr inbounds %struct.frame, %struct.frame* %192, i32 0, i32 62
  %x232 = bitcast %union.output_data* %output_data231 to %struct.x_output**
  %193 = load %struct.x_output*, %struct.x_output** %x232, align 8
  %has_been_visible = getelementptr inbounds %struct.x_output, %struct.x_output* %193, i32 0, i32 46
  %bf.load233 = load i8, i8* %has_been_visible, align 8
  %bf.clear234 = and i8 %bf.load233, -9
  %bf.set235 = or i8 %bf.clear234, 8
  store i8 %bf.set235, i8* %has_been_visible, align 8
  %ie236 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %194 = bitcast %struct.input_event* %ie236 to i32*
  %bf.load237 = load i32, i32* %194, align 8
  %bf.clear238 = and i32 %bf.load237, -65536
  %bf.set239 = or i32 %bf.clear238, 16
  store i32 %bf.set239, i32* %194, align 8
  %195 = load %struct.frame*, %struct.frame** %f, align 8
  %196 = bitcast %struct.frame* %195 to i8*
  %call240 = call i64 @make_lisp_ptr(i8* %196, i32 5)
  %ie241 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window242 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie241, i32 0, i32 6
  store i64 %call240, i64* %frame_or_window242, align 8
  br label %if.end.264

if.else.243:                                      ; preds = %land.lhs.true.223, %if.then.218
  %197 = load i8, i8* %not_hidden, align 1
  %tobool244 = trunc i8 %197 to i1
  br i1 %tobool244, label %if.end.263, label %land.lhs.true.245

land.lhs.true.245:                                ; preds = %if.else.243
  %198 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified246 = getelementptr inbounds %struct.frame, %struct.frame* %198, i32 0, i32 26
  %199 = bitcast i48* %iconified246 to i64*
  %bf.load247 = load i64, i64* %199, align 8
  %bf.lshr248 = lshr i64 %bf.load247, 12
  %bf.clear249 = and i64 %bf.lshr248, 1
  %bf.cast250 = trunc i64 %bf.clear249 to i1
  br i1 %bf.cast250, label %if.end.263, label %if.then.251

if.then.251:                                      ; preds = %land.lhs.true.245
  %200 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %200, i32 0)
  %201 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified252 = getelementptr inbounds %struct.frame, %struct.frame* %201, i32 0, i32 26
  %202 = bitcast i48* %iconified252 to i64*
  %bf.load253 = load i64, i64* %202, align 8
  %bf.clear254 = and i64 %bf.load253, -4097
  %bf.set255 = or i64 %bf.clear254, 4096
  store i64 %bf.set255, i64* %202, align 8
  %ie256 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %203 = bitcast %struct.input_event* %ie256 to i32*
  %bf.load257 = load i32, i32* %203, align 8
  %bf.clear258 = and i32 %bf.load257, -65536
  %bf.set259 = or i32 %bf.clear258, 15
  store i32 %bf.set259, i32* %203, align 8
  %204 = load %struct.frame*, %struct.frame** %f, align 8
  %205 = bitcast %struct.frame* %204 to i8*
  %call260 = call i64 @make_lisp_ptr(i8* %205, i32 5)
  %ie261 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window262 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie261, i32 0, i32 6
  store i64 %call260, i64* %frame_or_window262, align 8
  br label %if.end.263

if.end.263:                                       ; preds = %if.then.251, %land.lhs.true.245, %if.else.243
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.263, %if.then.227
  br label %if.end.265

if.end.265:                                       ; preds = %if.end.264, %land.lhs.true.214, %sw.bb.207
  %206 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xproperty266 = bitcast %union._XEvent* %206 to %struct.XPropertyEvent*
  call void @x_handle_property_notify(%struct.XPropertyEvent* %xproperty266)
  %207 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %208 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  call void @xft_settings_event(%struct.x_display_info* %207, %union._XEvent* %208)
  br label %OTHER

sw.bb.267:                                        ; preds = %if.end
  %209 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %210 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xreparent = bitcast %union._XEvent* %210 to %struct.XReparentEvent*
  %window268 = getelementptr inbounds %struct.XReparentEvent, %struct.XReparentEvent* %xreparent, i32 0, i32 5
  %211 = load i64, i64* %window268, align 8
  %conv269 = trunc i64 %211 to i32
  %call270 = call %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %209, i32 %conv269)
  store %struct.frame* %call270, %struct.frame** %f, align 8
  %212 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool271 = icmp ne %struct.frame* %212, null
  br i1 %tobool271, label %if.then.272, label %if.end.284

if.then.272:                                      ; preds = %sw.bb.267
  %213 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xreparent273 = bitcast %union._XEvent* %213 to %struct.XReparentEvent*
  %parent = getelementptr inbounds %struct.XReparentEvent, %struct.XReparentEvent* %xreparent273, i32 0, i32 6
  %214 = load i64, i64* %parent, align 8
  %215 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data274 = getelementptr inbounds %struct.frame, %struct.frame* %215, i32 0, i32 62
  %x275 = bitcast %union.output_data* %output_data274 to %struct.x_output**
  %216 = load %struct.x_output*, %struct.x_output** %x275, align 8
  %parent_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %216, i32 0, i32 11
  store i64 %214, i64* %parent_desc, align 8
  %217 = load %struct.frame*, %struct.frame** %f, align 8
  %218 = load %struct.frame*, %struct.frame** %f, align 8
  %left_pos276 = getelementptr inbounds %struct.frame, %struct.frame* %218, i32 0, i32 44
  %219 = load %struct.frame*, %struct.frame** %f, align 8
  %top_pos277 = getelementptr inbounds %struct.frame, %struct.frame* %219, i32 0, i32 45
  call void @x_real_positions(%struct.frame* %217, i32* %left_pos276, i32* %top_pos277)
  %220 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data278 = getelementptr inbounds %struct.frame, %struct.frame* %220, i32 0, i32 62
  %x279 = bitcast %union.output_data* %output_data278 to %struct.x_output**
  %221 = load %struct.x_output*, %struct.x_output** %x279, align 8
  %display_info280 = getelementptr inbounds %struct.x_output, %struct.x_output* %221, i32 0, i32 44
  %222 = load %struct.x_display_info*, %struct.x_display_info** %display_info280, align 8
  %wm_type = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %222, i32 0, i32 97
  store i32 0, i32* %wm_type, align 4
  %223 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data281 = getelementptr inbounds %struct.frame, %struct.frame* %223, i32 0, i32 62
  %x282 = bitcast %union.output_data* %output_data281 to %struct.x_output**
  %224 = load %struct.x_output*, %struct.x_output** %x282, align 8
  %display_info283 = getelementptr inbounds %struct.x_output, %struct.x_output* %224, i32 0, i32 44
  %225 = load %struct.x_display_info*, %struct.x_display_info** %display_info283, align 8
  %net_supported_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %225, i32 0, i32 105
  store i64 0, i64* %net_supported_window, align 8
  %226 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_set_frame_alpha(%struct.frame* %226)
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.272, %sw.bb.267
  br label %OTHER

sw.bb.285:                                        ; preds = %if.end
  %227 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %228 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose = bitcast %union._XEvent* %228 to %struct.XExposeEvent*
  %window286 = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose, i32 0, i32 4
  %229 = load i64, i64* %window286, align 8
  %conv287 = trunc i64 %229 to i32
  %call288 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %227, i32 %conv287)
  store %struct.frame* %call288, %struct.frame** %f, align 8
  %230 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool289 = icmp ne %struct.frame* %230, null
  br i1 %tobool289, label %if.then.290, label %if.else.324

if.then.290:                                      ; preds = %sw.bb.285
  %231 = load %struct.frame*, %struct.frame** %f, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %231, i32 0, i32 26
  %232 = bitcast i48* %visible to i64*
  %bf.load291 = load i64, i64* %232, align 8
  %bf.lshr292 = lshr i64 %bf.load291, 10
  %bf.clear293 = and i64 %bf.lshr292, 3
  %bf.cast294 = trunc i64 %bf.clear293 to i32
  %tobool295 = icmp ne i32 %bf.cast294, 0
  br i1 %tobool295, label %if.else.309, label %if.then.296

if.then.296:                                      ; preds = %if.then.290
  %233 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %233, i32 1)
  %234 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified297 = getelementptr inbounds %struct.frame, %struct.frame* %234, i32 0, i32 26
  %235 = bitcast i48* %iconified297 to i64*
  %bf.load298 = load i64, i64* %235, align 8
  %bf.clear299 = and i64 %bf.load298, -4097
  store i64 %bf.clear299, i64* %235, align 8
  %236 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data300 = getelementptr inbounds %struct.frame, %struct.frame* %236, i32 0, i32 62
  %x301 = bitcast %union.output_data* %output_data300 to %struct.x_output**
  %237 = load %struct.x_output*, %struct.x_output** %x301, align 8
  %has_been_visible302 = getelementptr inbounds %struct.x_output, %struct.x_output* %237, i32 0, i32 46
  %bf.load303 = load i8, i8* %has_been_visible302, align 8
  %bf.clear304 = and i8 %bf.load303, -9
  %bf.set305 = or i8 %bf.clear304, 8
  store i8 %bf.set305, i8* %has_been_visible302, align 8
  store i8 1, i8* @frame_garbaged, align 1
  %238 = load %struct.frame*, %struct.frame** %f, align 8
  call void @fset_redisplay(%struct.frame* %238)
  %239 = load %struct.frame*, %struct.frame** %f, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %239, i32 0, i32 26
  %240 = bitcast i48* %garbaged to i64*
  %bf.load306 = load i64, i64* %240, align 8
  %bf.clear307 = and i64 %bf.load306, -8193
  %bf.set308 = or i64 %bf.clear307, 8192
  store i64 %bf.set308, i64* %240, align 8
  br label %if.end.323

if.else.309:                                      ; preds = %if.then.290
  %241 = load %struct.frame*, %struct.frame** %f, align 8
  %242 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose310 = bitcast %union._XEvent* %242 to %struct.XExposeEvent*
  %x311 = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose310, i32 0, i32 5
  %243 = load i32, i32* %x311, align 4
  %244 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose312 = bitcast %union._XEvent* %244 to %struct.XExposeEvent*
  %y = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose312, i32 0, i32 6
  %245 = load i32, i32* %y, align 4
  %246 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose313 = bitcast %union._XEvent* %246 to %struct.XExposeEvent*
  %width = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose313, i32 0, i32 7
  %247 = load i32, i32* %width, align 4
  %248 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose314 = bitcast %union._XEvent* %248 to %struct.XExposeEvent*
  %height = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose314, i32 0, i32 8
  %249 = load i32, i32* %height, align 4
  call void @x_clear_area(%struct.frame* %241, i32 %243, i32 %245, i32 %247, i32 %249)
  %250 = load %struct.frame*, %struct.frame** %f, align 8
  %251 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose315 = bitcast %union._XEvent* %251 to %struct.XExposeEvent*
  %x316 = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose315, i32 0, i32 5
  %252 = load i32, i32* %x316, align 4
  %253 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose317 = bitcast %union._XEvent* %253 to %struct.XExposeEvent*
  %y318 = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose317, i32 0, i32 6
  %254 = load i32, i32* %y318, align 4
  %255 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose319 = bitcast %union._XEvent* %255 to %struct.XExposeEvent*
  %width320 = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose319, i32 0, i32 7
  %256 = load i32, i32* %width320, align 4
  %257 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xexpose321 = bitcast %union._XEvent* %257 to %struct.XExposeEvent*
  %height322 = getelementptr inbounds %struct.XExposeEvent, %struct.XExposeEvent* %xexpose321, i32 0, i32 8
  %258 = load i32, i32* %height322, align 4
  call void @expose_frame(%struct.frame* %250, i32 %252, i32 %254, i32 %256, i32 %258)
  br label %if.end.323

if.end.323:                                       ; preds = %if.else.309, %if.then.296
  br label %if.end.325

if.else.324:                                      ; preds = %sw.bb.285
  br label %OTHER

if.end.325:                                       ; preds = %if.end.323
  br label %sw.epilog.1289

sw.bb.326:                                        ; preds = %if.end
  %259 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %260 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xgraphicsexpose = bitcast %union._XEvent* %260 to %struct.XGraphicsExposeEvent*
  %drawable = getelementptr inbounds %struct.XGraphicsExposeEvent, %struct.XGraphicsExposeEvent* %xgraphicsexpose, i32 0, i32 4
  %261 = load i64, i64* %drawable, align 8
  %conv327 = trunc i64 %261 to i32
  %call328 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %259, i32 %conv327)
  store %struct.frame* %call328, %struct.frame** %f, align 8
  %262 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool329 = icmp ne %struct.frame* %262, null
  br i1 %tobool329, label %if.then.330, label %if.end.339

if.then.330:                                      ; preds = %sw.bb.326
  %263 = load %struct.frame*, %struct.frame** %f, align 8
  %264 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xgraphicsexpose331 = bitcast %union._XEvent* %264 to %struct.XGraphicsExposeEvent*
  %x332 = getelementptr inbounds %struct.XGraphicsExposeEvent, %struct.XGraphicsExposeEvent* %xgraphicsexpose331, i32 0, i32 5
  %265 = load i32, i32* %x332, align 4
  %266 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xgraphicsexpose333 = bitcast %union._XEvent* %266 to %struct.XGraphicsExposeEvent*
  %y334 = getelementptr inbounds %struct.XGraphicsExposeEvent, %struct.XGraphicsExposeEvent* %xgraphicsexpose333, i32 0, i32 6
  %267 = load i32, i32* %y334, align 4
  %268 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xgraphicsexpose335 = bitcast %union._XEvent* %268 to %struct.XGraphicsExposeEvent*
  %width336 = getelementptr inbounds %struct.XGraphicsExposeEvent, %struct.XGraphicsExposeEvent* %xgraphicsexpose335, i32 0, i32 7
  %269 = load i32, i32* %width336, align 4
  %270 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xgraphicsexpose337 = bitcast %union._XEvent* %270 to %struct.XGraphicsExposeEvent*
  %height338 = getelementptr inbounds %struct.XGraphicsExposeEvent, %struct.XGraphicsExposeEvent* %xgraphicsexpose337, i32 0, i32 8
  %271 = load i32, i32* %height338, align 4
  call void @expose_frame(%struct.frame* %263, i32 %265, i32 %267, i32 %269, i32 %271)
  br label %if.end.339

if.end.339:                                       ; preds = %if.then.330, %sw.bb.326
  br label %sw.epilog.1289

sw.bb.340:                                        ; preds = %if.end
  br label %sw.epilog.1289

sw.bb.341:                                        ; preds = %if.end
  %272 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xunmap = bitcast %union._XEvent* %272 to %struct.XUnmapEvent*
  %window342 = getelementptr inbounds %struct.XUnmapEvent, %struct.XUnmapEvent* %xunmap, i32 0, i32 5
  %273 = load i64, i64* %window342, align 8
  %274 = load i64, i64* @tip_window, align 8
  %cmp343 = icmp eq i64 %273, %274
  br i1 %cmp343, label %if.then.345, label %if.end.346

if.then.345:                                      ; preds = %sw.bb.341
  store i64 0, i64* @tip_window, align 8
  %275 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  call void @x_redo_mouse_highlight(%struct.x_display_info* %275)
  br label %if.end.346

if.end.346:                                       ; preds = %if.then.345, %sw.bb.341
  %276 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %277 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xunmap347 = bitcast %union._XEvent* %277 to %struct.XUnmapEvent*
  %window348 = getelementptr inbounds %struct.XUnmapEvent, %struct.XUnmapEvent* %xunmap347, i32 0, i32 5
  %278 = load i64, i64* %window348, align 8
  %conv349 = trunc i64 %278 to i32
  %call350 = call %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %276, i32 %conv349)
  store %struct.frame* %call350, %struct.frame** %f, align 8
  %279 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool351 = icmp ne %struct.frame* %279, null
  br i1 %tobool351, label %if.then.352, label %if.end.383

if.then.352:                                      ; preds = %if.end.346
  %280 = load %struct.frame*, %struct.frame** %f, align 8
  %visible354 = getelementptr inbounds %struct.frame, %struct.frame* %280, i32 0, i32 26
  %281 = bitcast i48* %visible354 to i64*
  %bf.load355 = load i64, i64* %281, align 8
  %bf.lshr356 = lshr i64 %bf.load355, 10
  %bf.clear357 = and i64 %bf.lshr356, 3
  %bf.cast358 = trunc i64 %bf.clear357 to i32
  %tobool359 = icmp ne i32 %bf.cast358, 0
  %frombool360 = zext i1 %tobool359 to i8
  store i8 %frombool360, i8* %visible353, align 1
  %282 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %282, i32 0)
  %283 = load i8, i8* %visible353, align 1
  %tobool361 = trunc i8 %283 to i1
  br i1 %tobool361, label %if.then.370, label %lor.lhs.false.363

lor.lhs.false.363:                                ; preds = %if.then.352
  %284 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified364 = getelementptr inbounds %struct.frame, %struct.frame* %284, i32 0, i32 26
  %285 = bitcast i48* %iconified364 to i64*
  %bf.load365 = load i64, i64* %285, align 8
  %bf.lshr366 = lshr i64 %bf.load365, 12
  %bf.clear367 = and i64 %bf.lshr366, 1
  %bf.cast368 = trunc i64 %bf.clear367 to i1
  br i1 %bf.cast368, label %if.then.370, label %if.end.382

if.then.370:                                      ; preds = %lor.lhs.false.363, %if.then.352
  %286 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified371 = getelementptr inbounds %struct.frame, %struct.frame* %286, i32 0, i32 26
  %287 = bitcast i48* %iconified371 to i64*
  %bf.load372 = load i64, i64* %287, align 8
  %bf.clear373 = and i64 %bf.load372, -4097
  %bf.set374 = or i64 %bf.clear373, 4096
  store i64 %bf.set374, i64* %287, align 8
  %ie375 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %288 = bitcast %struct.input_event* %ie375 to i32*
  %bf.load376 = load i32, i32* %288, align 8
  %bf.clear377 = and i32 %bf.load376, -65536
  %bf.set378 = or i32 %bf.clear377, 15
  store i32 %bf.set378, i32* %288, align 8
  %289 = load %struct.frame*, %struct.frame** %f, align 8
  %290 = bitcast %struct.frame* %289 to i8*
  %call379 = call i64 @make_lisp_ptr(i8* %290, i32 5)
  %ie380 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window381 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie380, i32 0, i32 6
  store i64 %call379, i64* %frame_or_window381, align 8
  br label %if.end.382

if.end.382:                                       ; preds = %if.then.370, %lor.lhs.false.363
  br label %if.end.383

if.end.383:                                       ; preds = %if.end.382, %if.end.346
  br label %OTHER

sw.bb.384:                                        ; preds = %if.end
  %291 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %292 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmap = bitcast %union._XEvent* %292 to %struct.XMapEvent*
  %window385 = getelementptr inbounds %struct.XMapEvent, %struct.XMapEvent* %xmap, i32 0, i32 5
  %293 = load i64, i64* %window385, align 8
  %conv386 = trunc i64 %293 to i32
  %call387 = call %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %291, i32 %conv386)
  store %struct.frame* %call387, %struct.frame** %f, align 8
  %294 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool388 = icmp ne %struct.frame* %294, null
  br i1 %tobool388, label %if.then.389, label %if.end.436

if.then.389:                                      ; preds = %sw.bb.384
  %295 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified391 = getelementptr inbounds %struct.frame, %struct.frame* %295, i32 0, i32 26
  %296 = bitcast i48* %iconified391 to i64*
  %bf.load392 = load i64, i64* %296, align 8
  %bf.lshr393 = lshr i64 %bf.load392, 12
  %bf.clear394 = and i64 %bf.lshr393, 1
  %bf.cast395 = trunc i64 %bf.clear394 to i1
  %frombool396 = zext i1 %bf.cast395 to i8
  store i8 %frombool396, i8* %iconified390, align 1
  %297 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data397 = getelementptr inbounds %struct.frame, %struct.frame* %297, i32 0, i32 62
  %x398 = bitcast %union.output_data* %output_data397 to %struct.x_output**
  %298 = load %struct.x_output*, %struct.x_output** %x398, align 8
  %has_been_visible399 = getelementptr inbounds %struct.x_output, %struct.x_output* %298, i32 0, i32 46
  %bf.load400 = load i8, i8* %has_been_visible399, align 8
  %bf.lshr401 = lshr i8 %bf.load400, 3
  %bf.clear402 = and i8 %bf.lshr401, 1
  %bf.cast403 = trunc i8 %bf.clear402 to i1
  br i1 %bf.cast403, label %if.end.405, label %if.then.404

if.then.404:                                      ; preds = %if.then.389
  %299 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_check_fullscreen(%struct.frame* %299)
  br label %if.end.405

if.end.405:                                       ; preds = %if.then.404, %if.then.389
  %300 = load %struct.frame*, %struct.frame** %f, align 8
  call void @SET_FRAME_VISIBLE(%struct.frame* %300, i32 1)
  %301 = load %struct.frame*, %struct.frame** %f, align 8
  %iconified406 = getelementptr inbounds %struct.frame, %struct.frame* %301, i32 0, i32 26
  %302 = bitcast i48* %iconified406 to i64*
  %bf.load407 = load i64, i64* %302, align 8
  %bf.clear408 = and i64 %bf.load407, -4097
  store i64 %bf.clear408, i64* %302, align 8
  %303 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data409 = getelementptr inbounds %struct.frame, %struct.frame* %303, i32 0, i32 62
  %x410 = bitcast %union.output_data* %output_data409 to %struct.x_output**
  %304 = load %struct.x_output*, %struct.x_output** %x410, align 8
  %has_been_visible411 = getelementptr inbounds %struct.x_output, %struct.x_output* %304, i32 0, i32 46
  %bf.load412 = load i8, i8* %has_been_visible411, align 8
  %bf.clear413 = and i8 %bf.load412, -9
  %bf.set414 = or i8 %bf.clear413, 8
  store i8 %bf.set414, i8* %has_been_visible411, align 8
  %305 = load i8, i8* %iconified390, align 1
  %tobool415 = trunc i8 %305 to i1
  br i1 %tobool415, label %if.then.416, label %if.else.424

if.then.416:                                      ; preds = %if.end.405
  %ie417 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %306 = bitcast %struct.input_event* %ie417 to i32*
  %bf.load418 = load i32, i32* %306, align 8
  %bf.clear419 = and i32 %bf.load418, -65536
  %bf.set420 = or i32 %bf.clear419, 16
  store i32 %bf.set420, i32* %306, align 8
  %307 = load %struct.frame*, %struct.frame** %f, align 8
  %308 = bitcast %struct.frame* %307 to i8*
  %call421 = call i64 @make_lisp_ptr(i8* %308, i32 5)
  %ie422 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window423 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie422, i32 0, i32 6
  store i64 %call421, i64* %frame_or_window423, align 8
  br label %if.end.435

if.else.424:                                      ; preds = %if.end.405
  %309 = load i64, i64* @Vframe_list, align 8
  %call425 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp426 = icmp eq i64 %309, %call425
  br i1 %cmp426, label %if.end.434, label %land.lhs.true.428

land.lhs.true.428:                                ; preds = %if.else.424
  %310 = load i64, i64* @Vframe_list, align 8
  %sub429 = sub nsw i64 %310, 3
  %311 = inttoptr i64 %sub429 to i8*
  %312 = bitcast i8* %311 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %312, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %313 = load i64, i64* %cdr, align 8
  %call430 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp431 = icmp eq i64 %313, %call430
  br i1 %cmp431, label %if.end.434, label %if.then.433

if.then.433:                                      ; preds = %land.lhs.true.428
  call void @record_asynch_buffer_change()
  br label %if.end.434

if.end.434:                                       ; preds = %if.then.433, %land.lhs.true.428, %if.else.424
  br label %if.end.435

if.end.435:                                       ; preds = %if.end.434, %if.then.416
  %314 = load %struct.frame*, %struct.frame** %f, align 8
  call void @xg_frame_resized(%struct.frame* %314, i32 -1, i32 -1)
  br label %if.end.436

if.end.436:                                       ; preds = %if.end.435, %sw.bb.384
  br label %OTHER

sw.bb.437:                                        ; preds = %if.end
  %315 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %316 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xkey = bitcast %union._XEvent* %316 to %struct.XKeyEvent*
  %time438 = getelementptr inbounds %struct.XKeyEvent, %struct.XKeyEvent* %xkey, i32 0, i32 7
  %317 = load i64, i64* %time438, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %315, i64 %317)
  store i64 0, i64* @ignore_next_mouse_click_timeout, align 8
  %call439 = call i32 @popup_activated()
  %tobool440 = icmp ne i32 %call439, 0
  br i1 %tobool440, label %if.then.441, label %if.end.442

if.then.441:                                      ; preds = %sw.bb.437
  br label %OTHER

if.end.442:                                       ; preds = %sw.bb.437
  %318 = load %struct.frame*, %struct.frame** %any, align 8
  store %struct.frame* %318, %struct.frame** %f, align 8
  %319 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_hidden = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %319, i32 0, i32 12
  %bf.load443 = load i8, i8* %mouse_face_hidden, align 8
  %bf.lshr444 = lshr i8 %bf.load443, 2
  %bf.clear445 = and i8 %bf.lshr444, 1
  %bf.cast446 = trunc i8 %bf.clear445 to i1
  br i1 %bf.cast446, label %if.end.458, label %land.lhs.true.447

land.lhs.true.447:                                ; preds = %if.end.442
  %320 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 202), align 8
  %and = and i64 %320, 7
  %conv448 = trunc i64 %and to i32
  %and449 = and i32 %conv448, -5
  %cmp450 = icmp eq i32 %and449, 2
  br i1 %cmp450, label %if.then.452, label %if.end.458

if.then.452:                                      ; preds = %land.lhs.true.447
  %321 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %call453 = call zeroext i1 @clear_mouse_face(%struct.Mouse_HLInfo* %321)
  %322 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_hidden454 = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %322, i32 0, i32 12
  %bf.load455 = load i8, i8* %mouse_face_hidden454, align 8
  %bf.clear456 = and i8 %bf.load455, -5
  %bf.set457 = or i8 %bf.clear456, 4
  store i8 %bf.set457, i8* %mouse_face_hidden454, align 8
  br label %if.end.458

if.end.458:                                       ; preds = %if.then.452, %land.lhs.true.447, %if.end.442
  %323 = load %struct.frame*, %struct.frame** %f, align 8
  %cmp459 = icmp ne %struct.frame* %323, null
  br i1 %cmp459, label %if.then.461, label %if.end.877

if.then.461:                                      ; preds = %if.end.458
  %arraydecay = getelementptr inbounds [513 x i8], [513 x i8]* %copy_buffer, i32 0, i32 0
  store i8* %arraydecay, i8** %copy_bufptr, align 8
  store i32 513, i32* %copy_bufsiz, align 4
  %call462 = call i64 @builtin_lisp_symbol(i32 606)
  store i64 %call462, i64* %coding_system, align 8
  %324 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xkey464 = bitcast %union._XEvent* %324 to %struct.XKeyEvent*
  %325 = bitcast %struct.XKeyEvent* %xkey463 to i8*
  %326 = bitcast %struct.XKeyEvent* %xkey464 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %325, i8* %326, i64 96, i32 8, i1 false)
  %327 = load i32*, i32** %finish.addr, align 8
  store i32 2, i32* %327, align 4
  %328 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data465 = getelementptr inbounds %struct.frame, %struct.frame* %328, i32 0, i32 62
  %x466 = bitcast %union.output_data* %output_data465 to %struct.x_output**
  %329 = load %struct.x_output*, %struct.x_output** %x466, align 8
  %display_info467 = getelementptr inbounds %struct.x_output, %struct.x_output* %329, i32 0, i32 44
  %330 = load %struct.x_display_info*, %struct.x_display_info** %display_info467, align 8
  %331 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 387), align 8
  %call468 = call i32 @x_emacs_to_x_modifiers(%struct.x_display_info* %330, i64 %331)
  %state = getelementptr inbounds %struct.XKeyEvent, %struct.XKeyEvent* %xkey463, i32 0, i32 12
  %332 = load i32, i32* %state, align 4
  %or = or i32 %332, %call468
  store i32 %or, i32* %state, align 4
  %state469 = getelementptr inbounds %struct.XKeyEvent, %struct.XKeyEvent* %xkey463, i32 0, i32 12
  %333 = load i32, i32* %state469, align 4
  store i32 %333, i32* %modifiers, align 4
  %state470 = getelementptr inbounds %struct.XKeyEvent, %struct.XKeyEvent* %xkey463, i32 0, i32 12
  %334 = load i32, i32* %state470, align 4
  %and471 = and i32 %334, -5
  store i32 %and471, i32* %state470, align 4
  %335 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %335, i32 0, i32 32
  %336 = load i32, i32* %meta_mod_mask, align 4
  %337 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %super_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %337, i32 0, i32 35
  %338 = load i32, i32* %super_mod_mask, align 4
  %or472 = or i32 %336, %338
  %339 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %hyper_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %339, i32 0, i32 36
  %340 = load i32, i32* %hyper_mod_mask, align 4
  %or473 = or i32 %or472, %340
  %341 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %341, i32 0, i32 34
  %342 = load i32, i32* %alt_mod_mask, align 4
  %or474 = or i32 %or473, %342
  %neg = xor i32 %or474, -1
  %state475 = getelementptr inbounds %struct.XKeyEvent, %struct.XKeyEvent* %xkey463, i32 0, i32 12
  %343 = load i32, i32* %state475, align 4
  %and476 = and i32 %343, %neg
  store i32 %and476, i32* %state475, align 4
  %344 = load i32, i32* %modifiers, align 4
  %345 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask477 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %345, i32 0, i32 32
  %346 = load i32, i32* %meta_mod_mask477, align 4
  %and478 = and i32 %344, %346
  %tobool479 = icmp ne i32 %and478, 0
  br i1 %tobool479, label %if.then.480, label %if.end.481

if.then.480:                                      ; preds = %if.then.461
  call void @llvm.memset.p0i8.i64(i8* bitcast (%struct._XComposeStatus* @handle_one_xevent.compose_status to i8*), i8 0, i64 16, i32 8, i1 false)
  br label %if.end.481

if.end.481:                                       ; preds = %if.then.480, %if.then.461
  %347 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data482 = getelementptr inbounds %struct.frame, %struct.frame* %347, i32 0, i32 62
  %x483 = bitcast %union.output_data* %output_data482 to %struct.x_output**
  %348 = load %struct.x_output*, %struct.x_output** %x483, align 8
  %xic484 = getelementptr inbounds %struct.x_output, %struct.x_output* %348, i32 0, i32 47
  %349 = load %struct._XIC*, %struct._XIC** %xic484, align 8
  %tobool485 = icmp ne %struct._XIC* %349, null
  br i1 %tobool485, label %if.then.486, label %if.else.520

if.then.486:                                      ; preds = %if.end.481
  %350 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 168), align 8
  store i64 %350, i64* %coding_system, align 8
  %351 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data487 = getelementptr inbounds %struct.frame, %struct.frame* %351, i32 0, i32 62
  %x488 = bitcast %union.output_data* %output_data487 to %struct.x_output**
  %352 = load %struct.x_output*, %struct.x_output** %x488, align 8
  %xic489 = getelementptr inbounds %struct.x_output, %struct.x_output* %352, i32 0, i32 47
  %353 = load %struct._XIC*, %struct._XIC** %xic489, align 8
  %354 = load i8*, i8** %copy_bufptr, align 8
  %355 = load i32, i32* %copy_bufsiz, align 4
  %call490 = call i32 @XmbLookupString(%struct._XIC* %353, %struct.XKeyEvent* %xkey463, i8* %354, i32 %355, i64* %keysym, i32* %status_return)
  %conv491 = sext i32 %call490 to i64
  store i64 %conv491, i64* %nbytes, align 8
  %356 = load i32, i32* %status_return, align 4
  %cmp492 = icmp eq i32 %356, -1
  br i1 %cmp492, label %if.then.494, label %if.end.502

if.then.494:                                      ; preds = %if.then.486
  %357 = load i64, i64* %nbytes, align 8
  %add = add nsw i64 %357, 1
  %conv495 = trunc i64 %add to i32
  store i32 %conv495, i32* %copy_bufsiz, align 4
  %358 = load i32, i32* %copy_bufsiz, align 4
  %conv496 = sext i32 %358 to i64
  %359 = alloca i8, i64 %conv496
  store i8* %359, i8** %copy_bufptr, align 8
  %360 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data497 = getelementptr inbounds %struct.frame, %struct.frame* %360, i32 0, i32 62
  %x498 = bitcast %union.output_data* %output_data497 to %struct.x_output**
  %361 = load %struct.x_output*, %struct.x_output** %x498, align 8
  %xic499 = getelementptr inbounds %struct.x_output, %struct.x_output* %361, i32 0, i32 47
  %362 = load %struct._XIC*, %struct._XIC** %xic499, align 8
  %363 = load i8*, i8** %copy_bufptr, align 8
  %364 = load i32, i32* %copy_bufsiz, align 4
  %call500 = call i32 @XmbLookupString(%struct._XIC* %362, %struct.XKeyEvent* %xkey463, i8* %363, i32 %364, i64* %keysym, i32* %status_return)
  %conv501 = sext i32 %call500 to i64
  store i64 %conv501, i64* %nbytes, align 8
  br label %if.end.502

if.end.502:                                       ; preds = %if.then.494, %if.then.486
  %365 = load i32, i32* %status_return, align 4
  %cmp503 = icmp eq i32 %365, 1
  br i1 %cmp503, label %if.then.505, label %if.else.506

if.then.505:                                      ; preds = %if.end.502
  br label %sw.epilog.1289

if.else.506:                                      ; preds = %if.end.502
  %366 = load i32, i32* %status_return, align 4
  %cmp507 = icmp eq i32 %366, 2
  br i1 %cmp507, label %if.then.509, label %if.else.510

if.then.509:                                      ; preds = %if.else.506
  store i64 0, i64* %keysym, align 8
  store i32 0, i32* %modifiers, align 4
  br label %if.end.518

if.else.510:                                      ; preds = %if.else.506
  %367 = load i32, i32* %status_return, align 4
  %cmp511 = icmp ne i32 %367, 3
  br i1 %cmp511, label %land.lhs.true.513, label %if.end.517

land.lhs.true.513:                                ; preds = %if.else.510
  %368 = load i32, i32* %status_return, align 4
  %cmp514 = icmp ne i32 %368, 4
  br i1 %cmp514, label %if.then.516, label %if.end.517

if.then.516:                                      ; preds = %land.lhs.true.513
  call void @emacs_abort() #10
  unreachable

if.end.517:                                       ; preds = %land.lhs.true.513, %if.else.510
  br label %if.end.518

if.end.518:                                       ; preds = %if.end.517, %if.then.509
  br label %if.end.519

if.end.519:                                       ; preds = %if.end.518
  br label %if.end.523

if.else.520:                                      ; preds = %if.end.481
  %369 = load i8*, i8** %copy_bufptr, align 8
  %370 = load i32, i32* %copy_bufsiz, align 4
  %call521 = call i32 @XLookupString(%struct.XKeyEvent* %xkey463, i8* %369, i32 %370, i64* %keysym, %struct._XComposeStatus* @handle_one_xevent.compose_status)
  %conv522 = sext i32 %call521 to i64
  store i64 %conv522, i64* %nbytes, align 8
  br label %if.end.523

if.end.523:                                       ; preds = %if.else.520, %if.end.519
  %371 = load i32, i32* getelementptr inbounds (%struct._XComposeStatus, %struct._XComposeStatus* @handle_one_xevent.compose_status, i32 0, i32 1), align 4
  %cmp524 = icmp sgt i32 %371, 0
  br i1 %cmp524, label %land.lhs.true.526, label %if.end.530

land.lhs.true.526:                                ; preds = %if.end.523
  %372 = load i64, i64* %nbytes, align 8
  %cmp527 = icmp eq i64 %372, 0
  br i1 %cmp527, label %if.then.529, label %if.end.530

if.then.529:                                      ; preds = %land.lhs.true.526
  br label %sw.epilog.1289

if.end.530:                                       ; preds = %land.lhs.true.526, %if.end.523
  call void @llvm.memset.p0i8.i64(i8* bitcast (%struct._XComposeStatus* @handle_one_xevent.compose_status to i8*), i8 0, i64 16, i32 8, i1 false)
  %373 = load i64, i64* %keysym, align 8
  store i64 %373, i64* %orig_keysym, align 8
  %374 = load %struct.frame*, %struct.frame** %f, align 8
  %375 = bitcast %struct.frame* %374 to i8*
  %call531 = call i64 @make_lisp_ptr(i8* %375, i32 5)
  %ie532 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window533 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie532, i32 0, i32 6
  store i64 %call531, i64* %frame_or_window533, align 8
  %376 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data534 = getelementptr inbounds %struct.frame, %struct.frame* %376, i32 0, i32 62
  %x535 = bitcast %union.output_data* %output_data534 to %struct.x_output**
  %377 = load %struct.x_output*, %struct.x_output** %x535, align 8
  %display_info536 = getelementptr inbounds %struct.x_output, %struct.x_output* %377, i32 0, i32 44
  %378 = load %struct.x_display_info*, %struct.x_display_info** %display_info536, align 8
  %379 = load i32, i32* %modifiers, align 4
  %call537 = call i32 @x_x_to_emacs_modifiers(%struct.x_display_info* %378, i32 %379)
  %ie538 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %modifiers539 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie538, i32 0, i32 2
  store i32 %call537, i32* %modifiers539, align 4
  %time540 = getelementptr inbounds %struct.XKeyEvent, %struct.XKeyEvent* %xkey463, i32 0, i32 7
  %380 = load i64, i64* %time540, align 8
  %ie541 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %timestamp = getelementptr inbounds %struct.input_event, %struct.input_event* %ie541, i32 0, i32 5
  store i64 %380, i64* %timestamp, align 8
  %381 = load i64, i64* %keysym, align 8
  %cmp542 = icmp uge i64 %381, 32
  br i1 %cmp542, label %land.lhs.true.544, label %if.end.554

land.lhs.true.544:                                ; preds = %if.end.530
  %382 = load i64, i64* %keysym, align 8
  %cmp545 = icmp ult i64 %382, 128
  br i1 %cmp545, label %if.then.547, label %if.end.554

if.then.547:                                      ; preds = %land.lhs.true.544
  %ie548 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %383 = bitcast %struct.input_event* %ie548 to i32*
  %bf.load549 = load i32, i32* %383, align 8
  %bf.clear550 = and i32 %bf.load549, -65536
  %bf.set551 = or i32 %bf.clear550, 1
  store i32 %bf.set551, i32* %383, align 8
  %384 = load i64, i64* %keysym, align 8
  %conv552 = trunc i64 %384 to i32
  %ie553 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %code = getelementptr inbounds %struct.input_event, %struct.input_event* %ie553, i32 0, i32 1
  store i32 %conv552, i32* %code, align 4
  br label %done_keysym

if.end.554:                                       ; preds = %land.lhs.true.544, %if.end.530
  %385 = load i64, i64* %keysym, align 8
  %cmp555 = icmp uge i64 %385, 16777216
  br i1 %cmp555, label %land.lhs.true.557, label %if.end.578

land.lhs.true.557:                                ; preds = %if.end.554
  %386 = load i64, i64* %keysym, align 8
  %cmp558 = icmp ule i64 %386, 17891327
  br i1 %cmp558, label %if.then.560, label %if.end.578

if.then.560:                                      ; preds = %land.lhs.true.557
  %387 = load i64, i64* %keysym, align 8
  %cmp561 = icmp ult i64 %387, 16777344
  br i1 %cmp561, label %if.then.563, label %if.else.568

if.then.563:                                      ; preds = %if.then.560
  %ie564 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %388 = bitcast %struct.input_event* %ie564 to i32*
  %bf.load565 = load i32, i32* %388, align 8
  %bf.clear566 = and i32 %bf.load565, -65536
  %bf.set567 = or i32 %bf.clear566, 1
  store i32 %bf.set567, i32* %388, align 8
  br label %if.end.573

if.else.568:                                      ; preds = %if.then.560
  %ie569 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %389 = bitcast %struct.input_event* %ie569 to i32*
  %bf.load570 = load i32, i32* %389, align 8
  %bf.clear571 = and i32 %bf.load570, -65536
  %bf.set572 = or i32 %bf.clear571, 2
  store i32 %bf.set572, i32* %389, align 8
  br label %if.end.573

if.end.573:                                       ; preds = %if.else.568, %if.then.563
  %390 = load i64, i64* %keysym, align 8
  %and574 = and i64 %390, 16777215
  %conv575 = trunc i64 %and574 to i32
  %ie576 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %code577 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie576, i32 0, i32 1
  store i32 %conv575, i32* %code577, align 4
  br label %done_keysym

if.end.578:                                       ; preds = %land.lhs.true.557, %if.end.554
  %391 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 347), align 8
  %call579 = call zeroext i1 @HASH_TABLE_P(i64 %391)
  br i1 %call579, label %land.lhs.true.581, label %if.end.600

land.lhs.true.581:                                ; preds = %if.end.578
  %392 = load i64, i64* %keysym, align 8
  %shl = shl i64 %392, 2
  %add582 = add i64 %shl, 2
  %393 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 347), align 8
  %call583 = call i64 @builtin_lisp_symbol(i32 0)
  %call584 = call i64 @Fgethash(i64 %add582, i64 %393, i64 %call583)
  store i64 %call584, i64* %c, align 8
  %394 = load i64, i64* %c, align 8
  %call585 = call zeroext i1 @NATNUMP(i64 %394)
  br i1 %call585, label %if.then.587, label %if.end.600

if.then.587:                                      ; preds = %land.lhs.true.581
  %395 = load i64, i64* %c, align 8
  %shr = ashr i64 %395, 2
  %add588 = add i64 %shr, 0
  %cmp589 = icmp ult i64 %add588, 256
  %cond591 = select i1 %cmp589, i32 1, i32 2
  %ie592 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %396 = bitcast %struct.input_event* %ie592 to i32*
  %bf.load593 = load i32, i32* %396, align 8
  %bf.value = and i32 %cond591, 65535
  %bf.clear594 = and i32 %bf.load593, -65536
  %bf.set595 = or i32 %bf.clear594, %bf.value
  store i32 %bf.set595, i32* %396, align 8
  %397 = load i64, i64* %c, align 8
  %shr596 = ashr i64 %397, 2
  %conv597 = trunc i64 %shr596 to i32
  %ie598 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %code599 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie598, i32 0, i32 1
  store i32 %conv597, i32* %code599, align 4
  br label %done_keysym

if.end.600:                                       ; preds = %land.lhs.true.581, %if.end.578
  %398 = load i64, i64* %keysym, align 8
  %cmp601 = icmp uge i64 %398, 65288
  br i1 %cmp601, label %land.lhs.true.603, label %lor.lhs.false.606

land.lhs.true.603:                                ; preds = %if.end.600
  %399 = load i64, i64* %keysym, align 8
  %cmp604 = icmp ule i64 %399, 65307
  br i1 %cmp604, label %land.lhs.true.684, label %lor.lhs.false.606

lor.lhs.false.606:                                ; preds = %land.lhs.true.603, %if.end.600
  %400 = load i64, i64* %keysym, align 8
  %cmp607 = icmp eq i64 %400, 65535
  br i1 %cmp607, label %land.lhs.true.684, label %lor.lhs.false.609

lor.lhs.false.609:                                ; preds = %lor.lhs.false.606
  %401 = load i64, i64* %keysym, align 8
  %cmp610 = icmp uge i64 %401, 65056
  br i1 %cmp610, label %land.lhs.true.612, label %lor.lhs.false.615

land.lhs.true.612:                                ; preds = %lor.lhs.false.609
  %402 = load i64, i64* %keysym, align 8
  %cmp613 = icmp ule i64 %402, 65076
  br i1 %cmp613, label %land.lhs.true.684, label %lor.lhs.false.615

lor.lhs.false.615:                                ; preds = %land.lhs.true.612, %lor.lhs.false.609
  %403 = load i64, i64* %keysym, align 8
  %cmp616 = icmp uge i64 %403, 65360
  br i1 %cmp616, label %land.lhs.true.618, label %lor.lhs.false.621

land.lhs.true.618:                                ; preds = %lor.lhs.false.615
  %404 = load i64, i64* %keysym, align 8
  %cmp619 = icmp ult i64 %404, 65376
  br i1 %cmp619, label %land.lhs.true.684, label %lor.lhs.false.621

lor.lhs.false.621:                                ; preds = %land.lhs.true.618, %lor.lhs.false.615
  %405 = load i64, i64* %keysym, align 8
  %cmp622 = icmp uge i64 %405, 65376
  br i1 %cmp622, label %land.lhs.true.624, label %lor.lhs.false.627

land.lhs.true.624:                                ; preds = %lor.lhs.false.621
  %406 = load i64, i64* %keysym, align 8
  %cmp625 = icmp ule i64 %406, 65387
  br i1 %cmp625, label %land.lhs.true.684, label %lor.lhs.false.627

lor.lhs.false.627:                                ; preds = %land.lhs.true.624, %lor.lhs.false.621
  %407 = load i64, i64* %orig_keysym, align 8
  %cmp628 = icmp eq i64 %407, 65106
  br i1 %cmp628, label %land.lhs.true.684, label %lor.lhs.false.630

lor.lhs.false.630:                                ; preds = %lor.lhs.false.627
  %408 = load i64, i64* %orig_keysym, align 8
  %cmp631 = icmp eq i64 %408, 65104
  br i1 %cmp631, label %land.lhs.true.684, label %lor.lhs.false.633

lor.lhs.false.633:                                ; preds = %lor.lhs.false.630
  %409 = load i64, i64* %orig_keysym, align 8
  %cmp634 = icmp eq i64 %409, 65107
  br i1 %cmp634, label %land.lhs.true.684, label %lor.lhs.false.636

lor.lhs.false.636:                                ; preds = %lor.lhs.false.633
  %410 = load i64, i64* %orig_keysym, align 8
  %cmp637 = icmp eq i64 %410, 65111
  br i1 %cmp637, label %land.lhs.true.684, label %lor.lhs.false.639

lor.lhs.false.639:                                ; preds = %lor.lhs.false.636
  %411 = load i64, i64* %orig_keysym, align 8
  %cmp640 = icmp eq i64 %411, 65108
  br i1 %cmp640, label %land.lhs.true.684, label %lor.lhs.false.642

lor.lhs.false.642:                                ; preds = %lor.lhs.false.639
  %412 = load i64, i64* %orig_keysym, align 8
  %cmp643 = icmp eq i64 %412, 65105
  br i1 %cmp643, label %land.lhs.true.684, label %lor.lhs.false.645

lor.lhs.false.645:                                ; preds = %lor.lhs.false.642
  %413 = load i64, i64* %orig_keysym, align 8
  %cmp646 = icmp eq i64 %413, 65115
  br i1 %cmp646, label %land.lhs.true.684, label %lor.lhs.false.648

lor.lhs.false.648:                                ; preds = %lor.lhs.false.645
  %414 = load i64, i64* %orig_keysym, align 8
  %cmp649 = icmp eq i64 %414, 65109
  br i1 %cmp649, label %land.lhs.true.684, label %lor.lhs.false.651

lor.lhs.false.651:                                ; preds = %lor.lhs.false.648
  %415 = load i64, i64* %orig_keysym, align 8
  %cmp652 = icmp eq i64 %415, 65116
  br i1 %cmp652, label %land.lhs.true.684, label %lor.lhs.false.654

lor.lhs.false.654:                                ; preds = %lor.lhs.false.651
  %416 = load i64, i64* %orig_keysym, align 8
  %cmp655 = icmp eq i64 %416, 65114
  br i1 %cmp655, label %land.lhs.true.684, label %lor.lhs.false.657

lor.lhs.false.657:                                ; preds = %lor.lhs.false.654
  %417 = load i64, i64* %orig_keysym, align 8
  %cmp658 = icmp eq i64 %417, 65113
  br i1 %cmp658, label %land.lhs.true.684, label %lor.lhs.false.660

lor.lhs.false.660:                                ; preds = %lor.lhs.false.657
  %418 = load i64, i64* %orig_keysym, align 8
  %cmp661 = icmp eq i64 %418, 65110
  br i1 %cmp661, label %land.lhs.true.684, label %lor.lhs.false.663

lor.lhs.false.663:                                ; preds = %lor.lhs.false.660
  %419 = load i64, i64* %keysym, align 8
  %cmp664 = icmp uge i64 %419, 65408
  br i1 %cmp664, label %land.lhs.true.666, label %lor.lhs.false.669

land.lhs.true.666:                                ; preds = %lor.lhs.false.663
  %420 = load i64, i64* %keysym, align 8
  %cmp667 = icmp ule i64 %420, 65469
  br i1 %cmp667, label %land.lhs.true.684, label %lor.lhs.false.669

lor.lhs.false.669:                                ; preds = %land.lhs.true.666, %lor.lhs.false.663
  %421 = load i64, i64* %keysym, align 8
  %cmp670 = icmp uge i64 %421, 65470
  br i1 %cmp670, label %land.lhs.true.672, label %lor.lhs.false.675

land.lhs.true.672:                                ; preds = %lor.lhs.false.669
  %422 = load i64, i64* %keysym, align 8
  %cmp673 = icmp ule i64 %422, 65504
  br i1 %cmp673, label %land.lhs.true.684, label %lor.lhs.false.675

lor.lhs.false.675:                                ; preds = %land.lhs.true.672, %lor.lhs.false.669
  %423 = load i64, i64* %orig_keysym, align 8
  %and676 = and i64 %423, 268435456
  %tobool677 = icmp ne i64 %and676, 0
  br i1 %tobool677, label %land.lhs.true.684, label %lor.lhs.false.678

lor.lhs.false.678:                                ; preds = %lor.lhs.false.675
  %424 = load i64, i64* %keysym, align 8
  %cmp679 = icmp ne i64 %424, 0
  br i1 %cmp679, label %land.lhs.true.681, label %if.end.716

land.lhs.true.681:                                ; preds = %lor.lhs.false.678
  %425 = load i64, i64* %nbytes, align 8
  %cmp682 = icmp eq i64 %425, 0
  br i1 %cmp682, label %land.lhs.true.684, label %if.end.716

land.lhs.true.684:                                ; preds = %land.lhs.true.681, %lor.lhs.false.675, %land.lhs.true.672, %land.lhs.true.666, %lor.lhs.false.660, %lor.lhs.false.657, %lor.lhs.false.654, %lor.lhs.false.651, %lor.lhs.false.648, %lor.lhs.false.645, %lor.lhs.false.642, %lor.lhs.false.639, %lor.lhs.false.636, %lor.lhs.false.633, %lor.lhs.false.630, %lor.lhs.false.627, %land.lhs.true.624, %land.lhs.true.618, %land.lhs.true.612, %lor.lhs.false.606, %land.lhs.true.603
  %426 = load i64, i64* %orig_keysym, align 8
  %cmp685 = icmp uge i64 %426, 65505
  br i1 %cmp685, label %land.lhs.true.687, label %lor.lhs.false.690

land.lhs.true.687:                                ; preds = %land.lhs.true.684
  %427 = load i64, i64* %orig_keysym, align 8
  %cmp688 = icmp ule i64 %427, 65518
  br i1 %cmp688, label %if.end.716, label %lor.lhs.false.690

lor.lhs.false.690:                                ; preds = %land.lhs.true.687, %land.lhs.true.684
  %428 = load i64, i64* %orig_keysym, align 8
  %cmp691 = icmp uge i64 %428, 65025
  br i1 %cmp691, label %land.lhs.true.693, label %lor.lhs.false.696

land.lhs.true.693:                                ; preds = %lor.lhs.false.690
  %429 = load i64, i64* %orig_keysym, align 8
  %cmp694 = icmp ule i64 %429, 65043
  br i1 %cmp694, label %if.end.716, label %lor.lhs.false.696

lor.lhs.false.696:                                ; preds = %land.lhs.true.693, %lor.lhs.false.690
  %430 = load i64, i64* %orig_keysym, align 8
  %cmp697 = icmp eq i64 %430, 65406
  br i1 %cmp697, label %if.end.716, label %lor.lhs.false.699

lor.lhs.false.699:                                ; preds = %lor.lhs.false.696
  %431 = load i64, i64* %orig_keysym, align 8
  %cmp700 = icmp eq i64 %431, 65407
  br i1 %cmp700, label %if.end.716, label %lor.lhs.false.702

lor.lhs.false.702:                                ; preds = %lor.lhs.false.699
  %432 = load i64, i64* %orig_keysym, align 8
  %cmp703 = icmp ule i64 65025, %432
  br i1 %cmp703, label %land.lhs.true.705, label %if.then.708

land.lhs.true.705:                                ; preds = %lor.lhs.false.702
  %433 = load i64, i64* %orig_keysym, align 8
  %cmp706 = icmp ule i64 %433, 65039
  br i1 %cmp706, label %if.end.716, label %if.then.708

if.then.708:                                      ; preds = %land.lhs.true.705, %lor.lhs.false.702
  %ie709 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %434 = bitcast %struct.input_event* %ie709 to i32*
  %bf.load710 = load i32, i32* %434, align 8
  %bf.clear711 = and i32 %bf.load710, -65536
  %bf.set712 = or i32 %bf.clear711, 3
  store i32 %bf.set712, i32* %434, align 8
  %435 = load i64, i64* %keysym, align 8
  %conv713 = trunc i64 %435 to i32
  %ie714 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %code715 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie714, i32 0, i32 1
  store i32 %conv713, i32* %code715, align 4
  br label %done_keysym

if.end.716:                                       ; preds = %land.lhs.true.705, %lor.lhs.false.699, %lor.lhs.false.696, %land.lhs.true.693, %land.lhs.true.687, %land.lhs.true.681, %lor.lhs.false.678
  store i64 0, i64* %i, align 8
  store i32 0, i32* %nchars, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.716
  %436 = load i64, i64* %i, align 8
  %437 = load i64, i64* %nbytes, align 8
  %cmp717 = icmp slt i64 %436, %437
  br i1 %cmp717, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 true, label %cond.true.719, label %cond.false.725

cond.true.719:                                    ; preds = %for.body
  %438 = load i64, i64* %i, align 8
  %439 = load i8*, i8** %copy_bufptr, align 8
  %arrayidx720 = getelementptr inbounds i8, i8* %439, i64 %438
  %440 = load i8, i8* %arrayidx720, align 1
  %conv721 = zext i8 %440 to i32
  %add722 = add i32 %conv721, 0
  %cmp723 = icmp ult i32 %add722, 128
  br i1 %cmp723, label %if.then.731, label %if.end.732

cond.false.725:                                   ; preds = %for.body
  %441 = load i64, i64* %i, align 8
  %442 = load i8*, i8** %copy_bufptr, align 8
  %arrayidx726 = getelementptr inbounds i8, i8* %442, i64 %441
  %443 = load i8, i8* %arrayidx726, align 1
  %conv727 = zext i8 %443 to i64
  %add728 = add i64 %conv727, 0
  %cmp729 = icmp ult i64 %add728, 128
  br i1 %cmp729, label %if.then.731, label %if.end.732

if.then.731:                                      ; preds = %cond.false.725, %cond.true.719
  %444 = load i32, i32* %nchars, align 4
  %inc = add nsw i32 %444, 1
  store i32 %inc, i32* %nchars, align 4
  br label %if.end.732

if.end.732:                                       ; preds = %if.then.731, %cond.false.725, %cond.true.719
  br label %for.inc

for.inc:                                          ; preds = %if.end.732
  %445 = load i64, i64* %i, align 8
  %inc733 = add nsw i64 %445, 1
  store i64 %inc733, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %446 = load i32, i32* %nchars, align 4
  %conv734 = sext i32 %446 to i64
  %447 = load i64, i64* %nbytes, align 8
  %cmp735 = icmp slt i64 %conv734, %447
  br i1 %cmp735, label %if.then.737, label %if.end.776

if.then.737:                                      ; preds = %for.end
  %448 = load i64, i64* %coding_system, align 8
  call void @setup_coding_system(i64 %448, %struct.coding_system* %coding)
  %src_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %bf.load738 = load i32, i32* %src_multibyte, align 8
  %bf.clear739 = and i32 %bf.load738, -524289
  store i32 %bf.clear739, i32* %src_multibyte, align 8
  %dst_multibyte = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %bf.load740 = load i32, i32* %dst_multibyte, align 8
  %bf.clear741 = and i32 %bf.load740, -1048577
  %bf.set742 = or i32 %bf.clear741, 1048576
  store i32 %bf.set742, i32* %dst_multibyte, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %bf.load743 = load i32, i32* %common_flags, align 8
  %bf.clear744 = and i32 %bf.load743, 16383
  %and745 = and i32 %bf.clear744, -256
  %bf.load746 = load i32, i32* %common_flags, align 8
  %bf.value747 = and i32 %and745, 16383
  %bf.clear748 = and i32 %bf.load746, -16384
  %bf.set749 = or i32 %bf.clear748, %bf.value747
  store i32 %bf.set749, i32* %common_flags, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.737
  %449 = load i64, i64* %nbytes, align 8
  %450 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %450, 1
  %div750 = udiv i64 %div, 5
  %cmp751 = icmp ule i64 %449, %div750
  br i1 %cmp751, label %if.then.753, label %if.else.756

if.then.753:                                      ; preds = %do.body
  %451 = load i64, i64* %nbytes, align 8
  %mul = mul i64 5, %451
  %452 = load i64, i64* %sa_avail, align 8
  %sub754 = sub i64 %452, %mul
  store i64 %sub754, i64* %sa_avail, align 8
  %453 = load i64, i64* %nbytes, align 8
  %mul755 = mul i64 5, %453
  %454 = alloca i8, i64 %mul755
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 22
  store i8* %454, i8** %destination, align 8
  br label %if.end.760

if.else.756:                                      ; preds = %do.body
  %455 = load i64, i64* %nbytes, align 8
  %call757 = call noalias i8* @xnmalloc(i64 %455, i64 5)
  %destination758 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 22
  store i8* %call757, i8** %destination758, align 8
  store i8 1, i8* %sa_must_free, align 1
  %destination759 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 22
  %456 = load i8*, i8** %destination759, align 8
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %456)
  br label %if.end.760

if.end.760:                                       ; preds = %if.else.756, %if.then.753
  br label %do.end

do.end:                                           ; preds = %if.end.760
  %457 = load i64, i64* %nbytes, align 8
  %mul761 = mul nsw i64 5, %457
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 20
  store i64 %mul761, i64* %dst_bytes, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 1
  %bf.load762 = load i32, i32* %mode, align 8
  %bf.lshr763 = lshr i32 %bf.load762, 14
  %bf.clear764 = and i32 %bf.lshr763, 31
  %or765 = or i32 %bf.clear764, 1
  %bf.load766 = load i32, i32* %mode, align 8
  %bf.value767 = and i32 %or765, 31
  %bf.shl = shl i32 %bf.value767, 14
  %bf.clear768 = and i32 %bf.load766, -507905
  %bf.set769 = or i32 %bf.clear768, %bf.shl
  store i32 %bf.set769, i32* %mode, align 8
  br label %do.body.770

do.body.770:                                      ; preds = %do.end
  %458 = load i8*, i8** %copy_bufptr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 17
  store i8* %458, i8** %source, align 8
  %459 = load i64, i64* %nbytes, align 8
  %src_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 15
  store i64 %459, i64* %src_bytes, align 8
  %src_chars = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 14
  store i64 %459, i64* %src_chars, align 8
  %call771 = call i64 @builtin_lisp_symbol(i32 0)
  %460 = load i64, i64* %nbytes, align 8
  %461 = load i64, i64* %nbytes, align 8
  %call772 = call i64 @builtin_lisp_symbol(i32 0)
  call void @decode_coding_object(%struct.coding_system* %coding, i64 %call771, i64 0, i64 0, i64 %460, i64 %461, i64 %call772)
  br label %do.end.773

do.end.773:                                       ; preds = %do.body.770
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 8
  %462 = load i64, i64* %produced, align 8
  store i64 %462, i64* %nbytes, align 8
  %produced_char = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 9
  %463 = load i64, i64* %produced_char, align 8
  %conv774 = trunc i64 %463 to i32
  store i32 %conv774, i32* %nchars, align 4
  %destination775 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %coding, i32 0, i32 22
  %464 = load i8*, i8** %destination775, align 8
  store i8* %464, i8** %copy_bufptr, align 8
  br label %if.end.776

if.end.776:                                       ; preds = %do.end.773, %for.end
  store i64 0, i64* %i, align 8
  br label %for.cond.777

for.cond.777:                                     ; preds = %for.inc.864, %if.end.776
  %465 = load i64, i64* %i, align 8
  %466 = load i64, i64* %nbytes, align 8
  %cmp778 = icmp slt i64 %465, %466
  br i1 %cmp778, label %for.body.780, label %for.end.867

for.body.780:                                     ; preds = %for.cond.777
  %467 = load i32, i32* %nchars, align 4
  %conv781 = sext i32 %467 to i64
  %468 = load i64, i64* %nbytes, align 8
  %cmp782 = icmp eq i64 %conv781, %468
  br i1 %cmp782, label %if.then.784, label %if.else.787

if.then.784:                                      ; preds = %for.body.780
  %469 = load i64, i64* %i, align 8
  %470 = load i8*, i8** %copy_bufptr, align 8
  %arrayidx785 = getelementptr inbounds i8, i8* %470, i64 %469
  %471 = load i8, i8* %arrayidx785, align 1
  %conv786 = zext i8 %471 to i32
  store i32 %conv786, i32* %ch, align 4
  store i32 1, i32* %len, align 4
  br label %if.end.852

if.else.787:                                      ; preds = %for.body.780
  %472 = load i8*, i8** %copy_bufptr, align 8
  %473 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds i8, i8* %472, i64 %473
  %arrayidx788 = getelementptr inbounds i8, i8* %add.ptr, i64 0
  %474 = load i8, i8* %arrayidx788, align 1
  %conv789 = zext i8 %474 to i32
  %and790 = and i32 %conv789, 128
  %tobool791 = icmp ne i32 %and790, 0
  br i1 %tobool791, label %cond.false.796, label %cond.true.792

cond.true.792:                                    ; preds = %if.else.787
  store i32 1, i32* %len, align 4
  %475 = load i8*, i8** %copy_bufptr, align 8
  %476 = load i64, i64* %i, align 8
  %add.ptr793 = getelementptr inbounds i8, i8* %475, i64 %476
  %arrayidx794 = getelementptr inbounds i8, i8* %add.ptr793, i64 0
  %477 = load i8, i8* %arrayidx794, align 1
  %conv795 = zext i8 %477 to i32
  br label %cond.end.850

cond.false.796:                                   ; preds = %if.else.787
  %478 = load i8*, i8** %copy_bufptr, align 8
  %479 = load i64, i64* %i, align 8
  %add.ptr797 = getelementptr inbounds i8, i8* %478, i64 %479
  %arrayidx798 = getelementptr inbounds i8, i8* %add.ptr797, i64 0
  %480 = load i8, i8* %arrayidx798, align 1
  %conv799 = zext i8 %480 to i32
  %and800 = and i32 %conv799, 32
  %tobool801 = icmp ne i32 %and800, 0
  br i1 %tobool801, label %cond.false.820, label %cond.true.802

cond.true.802:                                    ; preds = %cond.false.796
  store i32 2, i32* %len, align 4
  %481 = load i8*, i8** %copy_bufptr, align 8
  %482 = load i64, i64* %i, align 8
  %add.ptr803 = getelementptr inbounds i8, i8* %481, i64 %482
  %arrayidx804 = getelementptr inbounds i8, i8* %add.ptr803, i64 0
  %483 = load i8, i8* %arrayidx804, align 1
  %conv805 = zext i8 %483 to i32
  %and806 = and i32 %conv805, 31
  %shl807 = shl i32 %and806, 6
  %484 = load i8*, i8** %copy_bufptr, align 8
  %485 = load i64, i64* %i, align 8
  %add.ptr808 = getelementptr inbounds i8, i8* %484, i64 %485
  %arrayidx809 = getelementptr inbounds i8, i8* %add.ptr808, i64 1
  %486 = load i8, i8* %arrayidx809, align 1
  %conv810 = zext i8 %486 to i32
  %and811 = and i32 %conv810, 63
  %or812 = or i32 %shl807, %and811
  %487 = load i8*, i8** %copy_bufptr, align 8
  %488 = load i64, i64* %i, align 8
  %add.ptr813 = getelementptr inbounds i8, i8* %487, i64 %488
  %arrayidx814 = getelementptr inbounds i8, i8* %add.ptr813, i64 0
  %489 = load i8, i8* %arrayidx814, align 1
  %conv815 = zext i8 %489 to i32
  %cmp816 = icmp slt i32 %conv815, 194
  %cond818 = select i1 %cmp816, i32 4194176, i32 0
  %add819 = add nsw i32 %or812, %cond818
  br label %cond.end.848

cond.false.820:                                   ; preds = %cond.false.796
  %490 = load i8*, i8** %copy_bufptr, align 8
  %491 = load i64, i64* %i, align 8
  %add.ptr821 = getelementptr inbounds i8, i8* %490, i64 %491
  %arrayidx822 = getelementptr inbounds i8, i8* %add.ptr821, i64 0
  %492 = load i8, i8* %arrayidx822, align 1
  %conv823 = zext i8 %492 to i32
  %and824 = and i32 %conv823, 16
  %tobool825 = icmp ne i32 %and824, 0
  br i1 %tobool825, label %cond.false.843, label %cond.true.826

cond.true.826:                                    ; preds = %cond.false.820
  store i32 3, i32* %len, align 4
  %493 = load i8*, i8** %copy_bufptr, align 8
  %494 = load i64, i64* %i, align 8
  %add.ptr827 = getelementptr inbounds i8, i8* %493, i64 %494
  %arrayidx828 = getelementptr inbounds i8, i8* %add.ptr827, i64 0
  %495 = load i8, i8* %arrayidx828, align 1
  %conv829 = zext i8 %495 to i32
  %and830 = and i32 %conv829, 15
  %shl831 = shl i32 %and830, 12
  %496 = load i8*, i8** %copy_bufptr, align 8
  %497 = load i64, i64* %i, align 8
  %add.ptr832 = getelementptr inbounds i8, i8* %496, i64 %497
  %arrayidx833 = getelementptr inbounds i8, i8* %add.ptr832, i64 1
  %498 = load i8, i8* %arrayidx833, align 1
  %conv834 = zext i8 %498 to i32
  %and835 = and i32 %conv834, 63
  %shl836 = shl i32 %and835, 6
  %or837 = or i32 %shl831, %shl836
  %499 = load i8*, i8** %copy_bufptr, align 8
  %500 = load i64, i64* %i, align 8
  %add.ptr838 = getelementptr inbounds i8, i8* %499, i64 %500
  %arrayidx839 = getelementptr inbounds i8, i8* %add.ptr838, i64 2
  %501 = load i8, i8* %arrayidx839, align 1
  %conv840 = zext i8 %501 to i32
  %and841 = and i32 %conv840, 63
  %or842 = or i32 %or837, %and841
  br label %cond.end.846

cond.false.843:                                   ; preds = %cond.false.820
  %502 = load i8*, i8** %copy_bufptr, align 8
  %503 = load i64, i64* %i, align 8
  %add.ptr844 = getelementptr inbounds i8, i8* %502, i64 %503
  %call845 = call i32 @string_char(i8* %add.ptr844, i8** null, i32* %len)
  br label %cond.end.846

cond.end.846:                                     ; preds = %cond.false.843, %cond.true.826
  %cond847 = phi i32 [ %or842, %cond.true.826 ], [ %call845, %cond.false.843 ]
  br label %cond.end.848

cond.end.848:                                     ; preds = %cond.end.846, %cond.true.802
  %cond849 = phi i32 [ %add819, %cond.true.802 ], [ %cond847, %cond.end.846 ]
  br label %cond.end.850

cond.end.850:                                     ; preds = %cond.end.848, %cond.true.792
  %cond851 = phi i32 [ %conv795, %cond.true.792 ], [ %cond849, %cond.end.848 ]
  store i32 %cond851, i32* %ch, align 4
  br label %if.end.852

if.end.852:                                       ; preds = %cond.end.850, %if.then.784
  %504 = load i32, i32* %ch, align 4
  %add853 = add i32 %504, 0
  %cmp854 = icmp ult i32 %add853, 256
  %cond856 = select i1 %cmp854, i32 1, i32 2
  %ie857 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %505 = bitcast %struct.input_event* %ie857 to i32*
  %bf.load858 = load i32, i32* %505, align 8
  %bf.value859 = and i32 %cond856, 65535
  %bf.clear860 = and i32 %bf.load858, -65536
  %bf.set861 = or i32 %bf.clear860, %bf.value859
  store i32 %bf.set861, i32* %505, align 8
  %506 = load i32, i32* %ch, align 4
  %ie862 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %code863 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie862, i32 0, i32 1
  store i32 %506, i32* %code863, align 4
  %507 = load %struct.input_event*, %struct.input_event** %hold_quit.addr, align 8
  call void @kbd_buffer_store_buffered_event(%union.buffered_input_event* %inev, %struct.input_event* %507)
  br label %for.inc.864

for.inc.864:                                      ; preds = %if.end.852
  %508 = load i32, i32* %len, align 4
  %conv865 = sext i32 %508 to i64
  %509 = load i64, i64* %i, align 8
  %add866 = add nsw i64 %509, %conv865
  store i64 %add866, i64* %i, align 8
  br label %for.cond.777

for.end.867:                                      ; preds = %for.cond.777
  %510 = load i32, i32* %nchars, align 4
  %511 = load i32, i32* %count, align 4
  %add868 = add nsw i32 %511, %510
  store i32 %add868, i32* %count, align 4
  %ie869 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %512 = bitcast %struct.input_event* %ie869 to i32*
  %bf.load870 = load i32, i32* %512, align 8
  %bf.clear871 = and i32 %bf.load870, -65536
  store i32 %bf.clear871, i32* %512, align 8
  %513 = load i64, i64* %keysym, align 8
  %cmp872 = icmp eq i64 %513, 0
  br i1 %cmp872, label %if.then.874, label %if.end.875

if.then.874:                                      ; preds = %for.end.867
  br label %sw.epilog.1289

if.end.875:                                       ; preds = %for.end.867
  %514 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xkey876 = bitcast %union._XEvent* %514 to %struct.XKeyEvent*
  %515 = bitcast %struct.XKeyEvent* %xkey876 to i8*
  %516 = bitcast %struct.XKeyEvent* %xkey463 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %515, i8* %516, i64 96, i32 8, i1 false)
  br label %if.end.877

if.end.877:                                       ; preds = %if.end.875, %if.end.458
  br label %done_keysym

done_keysym:                                      ; preds = %if.end.877, %if.then.708, %if.then.587, %if.end.573, %if.then.547
  br label %sw.epilog.1289

sw.bb.878:                                        ; preds = %if.end
  %517 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %518 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xkey879 = bitcast %union._XEvent* %518 to %struct.XKeyEvent*
  %time880 = getelementptr inbounds %struct.XKeyEvent, %struct.XKeyEvent* %xkey879, i32 0, i32 7
  %519 = load i64, i64* %time880, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %517, i64 %519)
  br label %sw.epilog.1289

sw.bb.881:                                        ; preds = %if.end
  %520 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %521 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xcrossing = bitcast %union._XEvent* %521 to %struct.XCrossingEvent*
  %time882 = getelementptr inbounds %struct.XCrossingEvent, %struct.XCrossingEvent* %xcrossing, i32 0, i32 7
  %522 = load i64, i64* %time882, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %520, i64 %522)
  %523 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %524 = load %struct.frame*, %struct.frame** %any, align 8
  %525 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie883 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_detect_focus_change(%struct.x_display_info* %523, %struct.frame* %524, %union._XEvent* %525, %struct.input_event* %ie883)
  %526 = load %struct.frame*, %struct.frame** %any, align 8
  store %struct.frame* %526, %struct.frame** %f, align 8
  %527 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool884 = icmp ne %struct.frame* %527, null
  br i1 %tobool884, label %land.lhs.true.885, label %if.end.891

land.lhs.true.885:                                ; preds = %sw.bb.881
  %528 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 506), align 1
  %tobool886 = trunc i8 %528 to i1
  br i1 %tobool886, label %if.then.888, label %if.end.891

if.then.888:                                      ; preds = %land.lhs.true.885
  %529 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion = bitcast %union._XEvent* %529 to %struct.XMotionEvent*
  %time889 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %xmotion, i32 0, i32 7
  %530 = load i64, i64* %time889, align 8
  %add890 = add i64 %530, 200
  store i64 %add890, i64* @ignore_next_mouse_click_timeout, align 8
  br label %if.end.891

if.end.891:                                       ; preds = %if.then.888, %land.lhs.true.885, %sw.bb.881
  %531 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool892 = icmp ne %struct.frame* %531, null
  br i1 %tobool892, label %land.lhs.true.893, label %if.end.902

land.lhs.true.893:                                ; preds = %if.end.891
  %532 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data894 = getelementptr inbounds %struct.frame, %struct.frame* %532, i32 0, i32 62
  %x895 = bitcast %union.output_data* %output_data894 to %struct.x_output**
  %533 = load %struct.x_output*, %struct.x_output** %x895, align 8
  %hourglass_p = getelementptr inbounds %struct.x_output, %struct.x_output* %533, i32 0, i32 46
  %bf.load896 = load i8, i8* %hourglass_p, align 8
  %bf.clear897 = and i8 %bf.load896, 1
  %bf.cast898 = trunc i8 %bf.clear897 to i1
  br i1 %bf.cast898, label %if.end.902, label %if.then.899

if.then.899:                                      ; preds = %land.lhs.true.893
  %534 = load %struct.frame*, %struct.frame** %f, align 8
  %535 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion900 = bitcast %union._XEvent* %535 to %struct.XMotionEvent*
  %call901 = call zeroext i1 @note_mouse_movement(%struct.frame* %534, %struct.XMotionEvent* %xmotion900)
  br label %if.end.902

if.end.902:                                       ; preds = %if.then.899, %land.lhs.true.893, %if.end.891
  %536 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool903 = icmp ne %struct.frame* %536, null
  br i1 %tobool903, label %if.end.910, label %land.lhs.true.904

land.lhs.true.904:                                ; preds = %if.end.902
  %537 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_glyph_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %537, i32 0, i32 76
  %538 = load %struct.frame*, %struct.frame** %last_mouse_glyph_frame, align 8
  %tobool905 = icmp ne %struct.frame* %538, null
  br i1 %tobool905, label %if.then.906, label %if.end.910

if.then.906:                                      ; preds = %land.lhs.true.904
  %539 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_glyph_frame907 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %539, i32 0, i32 76
  %540 = load %struct.frame*, %struct.frame** %last_mouse_glyph_frame907, align 8
  %541 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion908 = bitcast %union._XEvent* %541 to %struct.XMotionEvent*
  %call909 = call zeroext i1 @note_mouse_movement(%struct.frame* %540, %struct.XMotionEvent* %xmotion908)
  br label %if.end.910

if.end.910:                                       ; preds = %if.then.906, %land.lhs.true.904, %if.end.902
  br label %OTHER

sw.bb.911:                                        ; preds = %if.end
  %542 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %543 = load %struct.frame*, %struct.frame** %any, align 8
  %544 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie912 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_detect_focus_change(%struct.x_display_info* %542, %struct.frame* %543, %union._XEvent* %544, %struct.input_event* %ie912)
  br label %OTHER

sw.bb.913:                                        ; preds = %if.end
  %545 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %546 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xcrossing914 = bitcast %union._XEvent* %546 to %struct.XCrossingEvent*
  %time915 = getelementptr inbounds %struct.XCrossingEvent, %struct.XCrossingEvent* %xcrossing914, i32 0, i32 7
  %547 = load i64, i64* %time915, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %545, i64 %547)
  %548 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %549 = load %struct.frame*, %struct.frame** %any, align 8
  %550 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie916 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_detect_focus_change(%struct.x_display_info* %548, %struct.frame* %549, %union._XEvent* %550, %struct.input_event* %ie916)
  %551 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %552 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xcrossing917 = bitcast %union._XEvent* %552 to %struct.XCrossingEvent*
  %window918 = getelementptr inbounds %struct.XCrossingEvent, %struct.XCrossingEvent* %xcrossing917, i32 0, i32 4
  %553 = load i64, i64* %window918, align 8
  %conv919 = trunc i64 %553 to i32
  %call920 = call %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %551, i32 %conv919)
  store %struct.frame* %call920, %struct.frame** %f, align 8
  %554 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool921 = icmp ne %struct.frame* %554, null
  br i1 %tobool921, label %if.then.922, label %if.else.932

if.then.922:                                      ; preds = %sw.bb.913
  %555 = load %struct.frame*, %struct.frame** %f, align 8
  %556 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_frame = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %556, i32 0, i32 9
  %557 = load %struct.frame*, %struct.frame** %mouse_face_mouse_frame, align 8
  %cmp923 = icmp eq %struct.frame* %555, %557
  br i1 %cmp923, label %if.then.925, label %if.end.928

if.then.925:                                      ; preds = %if.then.922
  %558 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %call926 = call zeroext i1 @clear_mouse_face(%struct.Mouse_HLInfo* %558)
  %559 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_frame927 = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %559, i32 0, i32 9
  store %struct.frame* null, %struct.frame** %mouse_face_mouse_frame927, align 8
  br label %if.end.928

if.end.928:                                       ; preds = %if.then.925, %if.then.922
  %560 = load i8, i8* @any_help_event_p, align 1
  %tobool929 = trunc i8 %560 to i1
  br i1 %tobool929, label %if.then.930, label %if.end.931

if.then.930:                                      ; preds = %if.end.928
  store i32 -1, i32* %do_help, align 4
  br label %if.end.931

if.end.931:                                       ; preds = %if.then.930, %if.end.928
  br label %if.end.940

if.else.932:                                      ; preds = %sw.bb.913
  %561 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_glyph_frame933 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %561, i32 0, i32 76
  %562 = load %struct.frame*, %struct.frame** %last_mouse_glyph_frame933, align 8
  %tobool934 = icmp ne %struct.frame* %562, null
  br i1 %tobool934, label %if.then.935, label %if.end.939

if.then.935:                                      ; preds = %if.else.932
  %563 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_glyph_frame936 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %563, i32 0, i32 76
  %564 = load %struct.frame*, %struct.frame** %last_mouse_glyph_frame936, align 8
  %565 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion937 = bitcast %union._XEvent* %565 to %struct.XMotionEvent*
  %call938 = call zeroext i1 @note_mouse_movement(%struct.frame* %564, %struct.XMotionEvent* %xmotion937)
  br label %if.end.939

if.end.939:                                       ; preds = %if.then.935, %if.else.932
  br label %if.end.940

if.end.940:                                       ; preds = %if.end.939, %if.end.931
  br label %OTHER

sw.bb.941:                                        ; preds = %if.end
  %566 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %567 = load %struct.frame*, %struct.frame** %any, align 8
  %568 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie942 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_detect_focus_change(%struct.x_display_info* %566, %struct.frame* %567, %union._XEvent* %568, %struct.input_event* %ie942)
  br label %OTHER

sw.bb.943:                                        ; preds = %if.end
  %569 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %570 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion944 = bitcast %union._XEvent* %570 to %struct.XMotionEvent*
  %time945 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %xmotion944, i32 0, i32 7
  %571 = load i64, i64* %time945, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %569, i64 %571)
  %572 = load i64, i64* @help_echo_string, align 8
  store i64 %572, i64* @previous_help_echo_string, align 8
  %call946 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call946, i64* @help_echo_string, align 8
  %573 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %call947 = call zeroext i1 @x_mouse_grabbed(%struct.x_display_info* %573)
  br i1 %call947, label %cond.true.949, label %cond.false.950

cond.true.949:                                    ; preds = %sw.bb.943
  %574 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %574, i32 0, i32 75
  %575 = load %struct.frame*, %struct.frame** %last_mouse_frame, align 8
  br label %cond.end.955

cond.false.950:                                   ; preds = %sw.bb.943
  %576 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %577 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion951 = bitcast %union._XEvent* %577 to %struct.XMotionEvent*
  %window952 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %xmotion951, i32 0, i32 4
  %578 = load i64, i64* %window952, align 8
  %conv953 = trunc i64 %578 to i32
  %call954 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %576, i32 %conv953)
  br label %cond.end.955

cond.end.955:                                     ; preds = %cond.false.950, %cond.true.949
  %cond956 = phi %struct.frame* [ %575, %cond.true.949 ], [ %call954, %cond.false.950 ]
  store %struct.frame* %cond956, %struct.frame** %f, align 8
  %579 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_hidden957 = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %579, i32 0, i32 12
  %bf.load958 = load i8, i8* %mouse_face_hidden957, align 8
  %bf.lshr959 = lshr i8 %bf.load958, 2
  %bf.clear960 = and i8 %bf.lshr959, 1
  %bf.cast961 = trunc i8 %bf.clear960 to i1
  br i1 %bf.cast961, label %if.then.962, label %if.end.967

if.then.962:                                      ; preds = %cond.end.955
  %580 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_hidden963 = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %580, i32 0, i32 12
  %bf.load964 = load i8, i8* %mouse_face_hidden963, align 8
  %bf.clear965 = and i8 %bf.load964, -5
  store i8 %bf.clear965, i8* %mouse_face_hidden963, align 8
  %581 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %call966 = call zeroext i1 @clear_mouse_face(%struct.Mouse_HLInfo* %581)
  br label %if.end.967

if.end.967:                                       ; preds = %if.then.962, %cond.end.955
  %582 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool968 = icmp ne %struct.frame* %582, null
  br i1 %tobool968, label %land.lhs.true.969, label %if.end.973

land.lhs.true.969:                                ; preds = %if.end.967
  %583 = load %struct.frame*, %struct.frame** %f, align 8
  %584 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %call970 = call zeroext i1 @xg_event_is_for_scrollbar(%struct.frame* %583, %union._XEvent* %584)
  br i1 %call970, label %if.then.972, label %if.end.973

if.then.972:                                      ; preds = %land.lhs.true.969
  store %struct.frame* null, %struct.frame** %f, align 8
  br label %if.end.973

if.end.973:                                       ; preds = %if.then.972, %land.lhs.true.969, %if.end.967
  %585 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool974 = icmp ne %struct.frame* %585, null
  br i1 %tobool974, label %if.then.975, label %if.else.1019

if.then.975:                                      ; preds = %if.end.973
  %586 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 201), align 8
  %call976 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp977 = icmp eq i64 %586, %call976
  br i1 %cmp977, label %if.end.1014, label %land.lhs.true.979

land.lhs.true.979:                                ; preds = %if.then.975
  %call980 = call i32 @popup_activated()
  %tobool981 = icmp ne i32 %call980, 0
  br i1 %tobool981, label %if.end.1014, label %if.then.982

if.then.982:                                      ; preds = %land.lhs.true.979
  %587 = load %struct.frame*, %struct.frame** %f, align 8
  %588 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion984 = bitcast %union._XEvent* %588 to %struct.XMotionEvent*
  %x985 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %xmotion984, i32 0, i32 8
  %589 = load i32, i32* %x985, align 4
  %590 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion986 = bitcast %union._XEvent* %590 to %struct.XMotionEvent*
  %y987 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %xmotion986, i32 0, i32 9
  %591 = load i32, i32* %y987, align 4
  %call988 = call i64 @window_from_coordinates(%struct.frame* %587, i32 %589, i32 %591, i32* null, i1 zeroext false)
  store i64 %call988, i64* %window983, align 8
  %592 = load i64, i64* %window983, align 8
  %call989 = call zeroext i1 @WINDOWP(i64 %592)
  br i1 %call989, label %land.lhs.true.991, label %if.end.1013

land.lhs.true.991:                                ; preds = %if.then.982
  %593 = load i64, i64* %window983, align 8
  %594 = load i64, i64* @handle_one_xevent.last_mouse_window, align 8
  %cmp992 = icmp eq i64 %593, %594
  br i1 %cmp992, label %if.end.1013, label %land.lhs.true.994

land.lhs.true.994:                                ; preds = %land.lhs.true.991
  %595 = load i64, i64* %window983, align 8
  %596 = load i64, i64* @selected_window, align 8
  %cmp995 = icmp eq i64 %595, %596
  br i1 %cmp995, label %if.end.1013, label %land.lhs.true.997

land.lhs.true.997:                                ; preds = %land.lhs.true.994
  %597 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 440), align 1
  %tobool998 = trunc i8 %597 to i1
  br i1 %tobool998, label %if.then.1006, label %lor.lhs.false.1000

lor.lhs.false.1000:                               ; preds = %land.lhs.true.997
  %598 = load i64, i64* %window983, align 8
  %call1001 = call %struct.window* @XWINDOW(i64 %598)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call1001, i32 0, i32 1
  %599 = load i64, i64* %frame, align 8
  %600 = load i64, i64* @selected_window, align 8
  %call1002 = call %struct.window* @XWINDOW(i64 %600)
  %frame1003 = getelementptr inbounds %struct.window, %struct.window* %call1002, i32 0, i32 1
  %601 = load i64, i64* %frame1003, align 8
  %cmp1004 = icmp eq i64 %599, %601
  br i1 %cmp1004, label %if.then.1006, label %if.end.1013

if.then.1006:                                     ; preds = %lor.lhs.false.1000, %land.lhs.true.997
  %ie1007 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %602 = bitcast %struct.input_event* %ie1007 to i32*
  %bf.load1008 = load i32, i32* %602, align 8
  %bf.clear1009 = and i32 %bf.load1008, -65536
  %bf.set1010 = or i32 %bf.clear1009, 24
  store i32 %bf.set1010, i32* %602, align 8
  %603 = load i64, i64* %window983, align 8
  %ie1011 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window1012 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie1011, i32 0, i32 6
  store i64 %603, i64* %frame_or_window1012, align 8
  br label %if.end.1013

if.end.1013:                                      ; preds = %if.then.1006, %lor.lhs.false.1000, %land.lhs.true.994, %land.lhs.true.991, %if.then.982
  %604 = load i64, i64* %window983, align 8
  store i64 %604, i64* @handle_one_xevent.last_mouse_window, align 8
  br label %if.end.1014

if.end.1014:                                      ; preds = %if.end.1013, %land.lhs.true.979, %if.then.975
  %605 = load %struct.frame*, %struct.frame** %f, align 8
  %606 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmotion1015 = bitcast %union._XEvent* %606 to %struct.XMotionEvent*
  %call1016 = call zeroext i1 @note_mouse_movement(%struct.frame* %605, %struct.XMotionEvent* %xmotion1015)
  br i1 %call1016, label %if.end.1018, label %if.then.1017

if.then.1017:                                     ; preds = %if.end.1014
  %607 = load i64, i64* @previous_help_echo_string, align 8
  store i64 %607, i64* @help_echo_string, align 8
  br label %if.end.1018

if.end.1018:                                      ; preds = %if.then.1017, %if.end.1014
  br label %if.end.1021

if.else.1019:                                     ; preds = %if.end.973
  %608 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %call1020 = call zeroext i1 @clear_mouse_face(%struct.Mouse_HLInfo* %608)
  br label %if.end.1021

if.end.1021:                                      ; preds = %if.else.1019, %if.end.1018
  %609 = load i64, i64* @help_echo_string, align 8
  %call1022 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1023 = icmp eq i64 %609, %call1022
  br i1 %cmp1023, label %lor.lhs.false.1025, label %if.then.1029

lor.lhs.false.1025:                               ; preds = %if.end.1021
  %610 = load i64, i64* @previous_help_echo_string, align 8
  %call1026 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1027 = icmp eq i64 %610, %call1026
  br i1 %cmp1027, label %if.end.1030, label %if.then.1029

if.then.1029:                                     ; preds = %lor.lhs.false.1025, %if.end.1021
  store i32 1, i32* %do_help, align 4
  br label %if.end.1030

if.end.1030:                                      ; preds = %if.then.1029, %lor.lhs.false.1025
  br label %OTHER

sw.bb.1031:                                       ; preds = %if.end
  %611 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %612 = bitcast %union._XEvent* %configureEvent to i8*
  %613 = bitcast %union._XEvent* %611 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %612, i8* %613, i64 192, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %if.end.1064, %sw.bb.1031
  %614 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display1032 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %614, i32 0, i32 2
  %615 = load %struct._XDisplay*, %struct._XDisplay** %display1032, align 8
  %call1033 = call i32 @XPending(%struct._XDisplay* %615)
  %tobool1034 = icmp ne i32 %call1033, 0
  br i1 %tobool1034, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %616 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display1035 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %616, i32 0, i32 2
  %617 = load %struct._XDisplay*, %struct._XDisplay** %display1035, align 8
  %call1036 = call i32 @XNextEvent(%struct._XDisplay* %617, %union._XEvent* %next_event)
  %type1037 = bitcast %union._XEvent* %next_event to i32*
  %618 = load i32, i32* %type1037, align 4
  %cmp1038 = icmp ne i32 %618, 22
  br i1 %cmp1038, label %if.then.1060, label %lor.lhs.false.1040

lor.lhs.false.1040:                               ; preds = %while.body
  %xconfigure = bitcast %union._XEvent* %next_event to %struct.XConfigureEvent*
  %window1041 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure, i32 0, i32 5
  %619 = load i64, i64* %window1041, align 8
  %620 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xconfigure1042 = bitcast %union._XEvent* %620 to %struct.XConfigureEvent*
  %window1043 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1042, i32 0, i32 5
  %621 = load i64, i64* %window1043, align 8
  %cmp1044 = icmp ne i64 %619, %621
  br i1 %cmp1044, label %if.then.1060, label %lor.lhs.false.1046

lor.lhs.false.1046:                               ; preds = %lor.lhs.false.1040
  %xconfigure1047 = bitcast %union._XEvent* %next_event to %struct.XConfigureEvent*
  %width1048 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1047, i32 0, i32 8
  %622 = load i32, i32* %width1048, align 4
  %623 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xconfigure1049 = bitcast %union._XEvent* %623 to %struct.XConfigureEvent*
  %width1050 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1049, i32 0, i32 8
  %624 = load i32, i32* %width1050, align 4
  %cmp1051 = icmp ne i32 %622, %624
  br i1 %cmp1051, label %if.then.1060, label %lor.lhs.false.1053

lor.lhs.false.1053:                               ; preds = %lor.lhs.false.1046
  %xconfigure1054 = bitcast %union._XEvent* %next_event to %struct.XConfigureEvent*
  %height1055 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1054, i32 0, i32 9
  %625 = load i32, i32* %height1055, align 4
  %626 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xconfigure1056 = bitcast %union._XEvent* %626 to %struct.XConfigureEvent*
  %height1057 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1056, i32 0, i32 9
  %627 = load i32, i32* %height1057, align 4
  %cmp1058 = icmp ne i32 %625, %627
  br i1 %cmp1058, label %if.then.1060, label %if.else.1063

if.then.1060:                                     ; preds = %lor.lhs.false.1053, %lor.lhs.false.1046, %lor.lhs.false.1040, %while.body
  %628 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display1061 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %628, i32 0, i32 2
  %629 = load %struct._XDisplay*, %struct._XDisplay** %display1061, align 8
  %call1062 = call i32 @XPutBackEvent(%struct._XDisplay* %629, %union._XEvent* %next_event)
  br label %while.end

if.else.1063:                                     ; preds = %lor.lhs.false.1053
  %630 = bitcast %union._XEvent* %configureEvent to i8*
  %631 = bitcast %union._XEvent* %next_event to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %630, i8* %631, i64 192, i32 8, i1 false)
  br label %if.end.1064

if.end.1064:                                      ; preds = %if.else.1063
  br label %while.cond

while.end:                                        ; preds = %if.then.1060, %while.cond
  %632 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xconfigure1065 = bitcast %union._XEvent* %configureEvent to %struct.XConfigureEvent*
  %window1066 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1065, i32 0, i32 5
  %633 = load i64, i64* %window1066, align 8
  %conv1067 = trunc i64 %633 to i32
  %call1068 = call %struct.frame* @x_top_window_to_frame(%struct.x_display_info* %632, i32 %conv1067)
  store %struct.frame* %call1068, %struct.frame** %f, align 8
  %634 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool1069 = icmp ne %struct.frame* %634, null
  br i1 %tobool1069, label %if.end.1084, label %land.lhs.true.1070

land.lhs.true.1070:                               ; preds = %while.end
  %635 = load %struct.frame*, %struct.frame** %any, align 8
  store %struct.frame* %635, %struct.frame** %f, align 8
  %tobool1071 = icmp ne %struct.frame* %635, null
  br i1 %tobool1071, label %land.lhs.true.1072, label %if.end.1084

land.lhs.true.1072:                               ; preds = %land.lhs.true.1070
  %xconfigure1073 = bitcast %union._XEvent* %configureEvent to %struct.XConfigureEvent*
  %window1074 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1073, i32 0, i32 5
  %636 = load i64, i64* %window1074, align 8
  %637 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1075 = getelementptr inbounds %struct.frame, %struct.frame* %637, i32 0, i32 62
  %x1076 = bitcast %union.output_data* %output_data1075 to %struct.x_output**
  %638 = load %struct.x_output*, %struct.x_output** %x1076, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %638, i32 0, i32 9
  %639 = load i64, i64* %window_desc, align 8
  %cmp1077 = icmp eq i64 %636, %639
  br i1 %cmp1077, label %if.then.1079, label %if.end.1084

if.then.1079:                                     ; preds = %land.lhs.true.1072
  %640 = load %struct.frame*, %struct.frame** %f, align 8
  %xconfigure1080 = bitcast %union._XEvent* %configureEvent to %struct.XConfigureEvent*
  %width1081 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1080, i32 0, i32 8
  %641 = load i32, i32* %width1081, align 4
  %xconfigure1082 = bitcast %union._XEvent* %configureEvent to %struct.XConfigureEvent*
  %height1083 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1082, i32 0, i32 9
  %642 = load i32, i32* %height1083, align 4
  call void @xg_frame_resized(%struct.frame* %640, i32 %641, i32 %642)
  store %struct.frame* null, %struct.frame** %f, align 8
  br label %if.end.1084

if.end.1084:                                      ; preds = %if.then.1079, %land.lhs.true.1072, %land.lhs.true.1070, %while.end
  %643 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool1085 = icmp ne %struct.frame* %643, null
  br i1 %tobool1085, label %if.then.1086, label %if.end.1113

if.then.1086:                                     ; preds = %if.end.1084
  %644 = load %struct.frame*, %struct.frame** %f, align 8
  %xconfigure1087 = bitcast %union._XEvent* %configureEvent to %struct.XConfigureEvent*
  %window1088 = getelementptr inbounds %struct.XConfigureEvent, %struct.XConfigureEvent* %xconfigure1087, i32 0, i32 5
  %645 = load i64, i64* %window1088, align 8
  call void @x_net_wm_state(%struct.frame* %644, i64 %645)
  %646 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1089 = getelementptr inbounds %struct.frame, %struct.frame* %646, i32 0, i32 62
  %x1090 = bitcast %union.output_data* %output_data1089 to %struct.x_output**
  %647 = load %struct.x_output*, %struct.x_output** %x1090, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %647, i32 0, i32 12
  %648 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool1091 = icmp ne %struct._GtkWidget* %648, null
  br i1 %tobool1091, label %land.lhs.true.1092, label %if.end.1101

land.lhs.true.1092:                               ; preds = %if.then.1086
  %649 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1093 = getelementptr inbounds %struct.frame, %struct.frame* %649, i32 0, i32 62
  %x1094 = bitcast %union.output_data* %output_data1093 to %struct.x_output**
  %650 = load %struct.x_output*, %struct.x_output** %x1094, align 8
  %widget1095 = getelementptr inbounds %struct.x_output, %struct.x_output* %650, i32 0, i32 12
  %651 = load %struct._GtkWidget*, %struct._GtkWidget** %widget1095, align 8
  %call1096 = call i32 @gtk_widget_get_mapped(%struct._GtkWidget* %651)
  %tobool1097 = icmp ne i32 %call1096, 0
  br i1 %tobool1097, label %if.then.1098, label %if.end.1101

if.then.1098:                                     ; preds = %land.lhs.true.1092
  %652 = load %struct.frame*, %struct.frame** %f, align 8
  %653 = load %struct.frame*, %struct.frame** %f, align 8
  %left_pos1099 = getelementptr inbounds %struct.frame, %struct.frame* %653, i32 0, i32 44
  %654 = load %struct.frame*, %struct.frame** %f, align 8
  %top_pos1100 = getelementptr inbounds %struct.frame, %struct.frame* %654, i32 0, i32 45
  call void @x_real_positions(%struct.frame* %652, i32* %left_pos1099, i32* %top_pos1100)
  br label %if.end.1101

if.end.1101:                                      ; preds = %if.then.1098, %land.lhs.true.1092, %if.then.1086
  %655 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1102 = getelementptr inbounds %struct.frame, %struct.frame* %655, i32 0, i32 62
  %x1103 = bitcast %union.output_data* %output_data1102 to %struct.x_output**
  %656 = load %struct.x_output*, %struct.x_output** %x1103, align 8
  %xic1104 = getelementptr inbounds %struct.x_output, %struct.x_output* %656, i32 0, i32 47
  %657 = load %struct._XIC*, %struct._XIC** %xic1104, align 8
  %tobool1105 = icmp ne %struct._XIC* %657, null
  br i1 %tobool1105, label %land.lhs.true.1106, label %if.end.1112

land.lhs.true.1106:                               ; preds = %if.end.1101
  %658 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1107 = getelementptr inbounds %struct.frame, %struct.frame* %658, i32 0, i32 62
  %x1108 = bitcast %union.output_data* %output_data1107 to %struct.x_output**
  %659 = load %struct.x_output*, %struct.x_output** %x1108, align 8
  %xic_style = getelementptr inbounds %struct.x_output, %struct.x_output* %659, i32 0, i32 48
  %660 = load i64, i64* %xic_style, align 8
  %and1109 = and i64 %660, 256
  %tobool1110 = icmp ne i64 %and1109, 0
  br i1 %tobool1110, label %if.then.1111, label %if.end.1112

if.then.1111:                                     ; preds = %land.lhs.true.1106
  %661 = load %struct.frame*, %struct.frame** %f, align 8
  call void @xic_set_statusarea(%struct.frame* %661)
  br label %if.end.1112

if.end.1112:                                      ; preds = %if.then.1111, %land.lhs.true.1106, %if.end.1101
  br label %if.end.1113

if.end.1113:                                      ; preds = %if.end.1112, %if.end.1084
  br label %OTHER

sw.bb.1114:                                       ; preds = %if.end, %if.end
  store i8 0, i8* %tool_bar_p, align 1
  call void @llvm.memset.p0i8.i64(i8* bitcast (%struct._XComposeStatus* @handle_one_xevent.compose_status to i8*), i8 0, i64 16, i32 8, i1 false)
  %662 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_glyph_frame1115 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %662, i32 0, i32 76
  store %struct.frame* null, %struct.frame** %last_mouse_glyph_frame1115, align 8
  %663 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %664 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton = bitcast %union._XEvent* %664 to %struct.XButtonEvent*
  %time1116 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton, i32 0, i32 7
  %665 = load i64, i64* %time1116, align 8
  call void @x_display_set_last_user_time(%struct.x_display_info* %663, i64 %665)
  %666 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %call1117 = call zeroext i1 @x_mouse_grabbed(%struct.x_display_info* %666)
  br i1 %call1117, label %cond.true.1119, label %cond.false.1121

cond.true.1119:                                   ; preds = %sw.bb.1114
  %667 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_frame1120 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %667, i32 0, i32 75
  %668 = load %struct.frame*, %struct.frame** %last_mouse_frame1120, align 8
  br label %cond.end.1126

cond.false.1121:                                  ; preds = %sw.bb.1114
  %669 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %670 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1122 = bitcast %union._XEvent* %670 to %struct.XButtonEvent*
  %window1123 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1122, i32 0, i32 4
  %671 = load i64, i64* %window1123, align 8
  %conv1124 = trunc i64 %671 to i32
  %call1125 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %669, i32 %conv1124)
  br label %cond.end.1126

cond.end.1126:                                    ; preds = %cond.false.1121, %cond.true.1119
  %cond1127 = phi %struct.frame* [ %668, %cond.true.1119 ], [ %call1125, %cond.false.1121 ]
  store %struct.frame* %cond1127, %struct.frame** %f, align 8
  %672 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool1128 = icmp ne %struct.frame* %672, null
  br i1 %tobool1128, label %land.lhs.true.1129, label %if.end.1133

land.lhs.true.1129:                               ; preds = %cond.end.1126
  %673 = load %struct.frame*, %struct.frame** %f, align 8
  %674 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %call1130 = call zeroext i1 @xg_event_is_for_scrollbar(%struct.frame* %673, %union._XEvent* %674)
  br i1 %call1130, label %if.then.1132, label %if.end.1133

if.then.1132:                                     ; preds = %land.lhs.true.1129
  store %struct.frame* null, %struct.frame** %f, align 8
  br label %if.end.1133

if.end.1133:                                      ; preds = %if.then.1132, %land.lhs.true.1129, %cond.end.1126
  %675 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool1134 = icmp ne %struct.frame* %675, null
  br i1 %tobool1134, label %if.then.1135, label %if.else.1181

if.then.1135:                                     ; preds = %if.end.1133
  %676 = load i8, i8* %tool_bar_p, align 1
  %tobool1136 = trunc i8 %676 to i1
  br i1 %tobool1136, label %if.end.1167, label %if.then.1137

if.then.1137:                                     ; preds = %if.then.1135
  %call1138 = call i32 @popup_activated()
  %tobool1139 = icmp ne i32 %call1138, 0
  br i1 %tobool1139, label %if.end.1166, label %if.then.1140

if.then.1140:                                     ; preds = %if.then.1137
  %677 = load i64, i64* @ignore_next_mouse_click_timeout, align 8
  %tobool1141 = icmp ne i64 %677, 0
  br i1 %tobool1141, label %if.then.1142, label %if.else.1161

if.then.1142:                                     ; preds = %if.then.1140
  %678 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type1143 = bitcast %union._XEvent* %678 to i32*
  %679 = load i32, i32* %type1143, align 4
  %cmp1144 = icmp eq i32 %679, 4
  br i1 %cmp1144, label %land.lhs.true.1146, label %if.end.1155

land.lhs.true.1146:                               ; preds = %if.then.1142
  %680 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1147 = bitcast %union._XEvent* %680 to %struct.XButtonEvent*
  %time1148 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1147, i32 0, i32 7
  %681 = load i64, i64* %time1148, align 8
  %682 = load i64, i64* @ignore_next_mouse_click_timeout, align 8
  %cmp1149 = icmp ugt i64 %681, %682
  br i1 %cmp1149, label %if.then.1151, label %if.end.1155

if.then.1151:                                     ; preds = %land.lhs.true.1146
  store i64 0, i64* @ignore_next_mouse_click_timeout, align 8
  %ie1152 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %683 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1153 = bitcast %union._XEvent* %683 to %struct.XButtonEvent*
  %684 = load %struct.frame*, %struct.frame** %f, align 8
  %call1154 = call i64 @construct_mouse_click(%struct.input_event* %ie1152, %struct.XButtonEvent* %xbutton1153, %struct.frame* %684)
  br label %if.end.1155

if.end.1155:                                      ; preds = %if.then.1151, %land.lhs.true.1146, %if.then.1142
  %685 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type1156 = bitcast %union._XEvent* %685 to i32*
  %686 = load i32, i32* %type1156, align 4
  %cmp1157 = icmp eq i32 %686, 5
  br i1 %cmp1157, label %if.then.1159, label %if.end.1160

if.then.1159:                                     ; preds = %if.end.1155
  store i64 0, i64* @ignore_next_mouse_click_timeout, align 8
  br label %if.end.1160

if.end.1160:                                      ; preds = %if.then.1159, %if.end.1155
  br label %if.end.1165

if.else.1161:                                     ; preds = %if.then.1140
  %ie1162 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %687 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1163 = bitcast %union._XEvent* %687 to %struct.XButtonEvent*
  %688 = load %struct.frame*, %struct.frame** %f, align 8
  %call1164 = call i64 @construct_mouse_click(%struct.input_event* %ie1162, %struct.XButtonEvent* %xbutton1163, %struct.frame* %688)
  br label %if.end.1165

if.end.1165:                                      ; preds = %if.else.1161, %if.end.1160
  br label %if.end.1166

if.end.1166:                                      ; preds = %if.end.1165, %if.then.1137
  br label %if.end.1167

if.end.1167:                                      ; preds = %if.end.1166, %if.then.1135
  %689 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1168 = getelementptr inbounds %struct.frame, %struct.frame* %689, i32 0, i32 62
  %x1169 = bitcast %union.output_data* %output_data1168 to %struct.x_output**
  %690 = load %struct.x_output*, %struct.x_output** %x1169, align 8
  %explicit_parent = getelementptr inbounds %struct.x_output, %struct.x_output* %690, i32 0, i32 46
  %bf.load1170 = load i8, i8* %explicit_parent, align 8
  %bf.lshr1171 = lshr i8 %bf.load1170, 1
  %bf.clear1172 = and i8 %bf.lshr1171, 1
  %bf.cast1173 = trunc i8 %bf.clear1172 to i1
  %conv1174 = zext i1 %bf.cast1173 to i32
  %cmp1175 = icmp ne i32 %conv1174, 0
  br i1 %cmp1175, label %if.then.1177, label %if.end.1180

if.then.1177:                                     ; preds = %if.end.1167
  %691 = load %struct.frame*, %struct.frame** %f, align 8
  %692 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1178 = bitcast %union._XEvent* %692 to %struct.XButtonEvent*
  %time1179 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1178, i32 0, i32 7
  %693 = load i64, i64* %time1179, align 8
  call void @xembed_send_message(%struct.frame* %691, i64 %693, i32 3, i64 0, i64 0, i64 0)
  br label %if.end.1180

if.end.1180:                                      ; preds = %if.then.1177, %if.end.1167
  br label %if.end.1196

if.else.1181:                                     ; preds = %if.end.1133
  %694 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1182 = bitcast %union._XEvent* %694 to %struct.XButtonEvent*
  %display1183 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1182, i32 0, i32 3
  %695 = load %struct._XDisplay*, %struct._XDisplay** %display1183, align 8
  %696 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1184 = bitcast %union._XEvent* %696 to %struct.XButtonEvent*
  %window1185 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1184, i32 0, i32 4
  %697 = load i64, i64* %window1185, align 8
  %call1186 = call %struct.scroll_bar* @x_window_to_scroll_bar(%struct._XDisplay* %695, i64 %697, i32 2)
  store %struct.scroll_bar* %call1186, %struct.scroll_bar** %bar, align 8
  %698 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %tobool1187 = icmp ne %struct.scroll_bar* %698, null
  br i1 %tobool1187, label %land.lhs.true.1188, label %if.end.1195

land.lhs.true.1188:                               ; preds = %if.else.1181
  %699 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1189 = bitcast %union._XEvent* %699 to %struct.XButtonEvent*
  %state1190 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1189, i32 0, i32 12
  %700 = load i32, i32* %state1190, align 4
  %and1191 = and i32 %700, 4
  %tobool1192 = icmp ne i32 %and1191, 0
  br i1 %tobool1192, label %if.then.1193, label %if.end.1195

if.then.1193:                                     ; preds = %land.lhs.true.1188
  %701 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %702 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %ie1194 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  call void @x_scroll_bar_handle_click(%struct.scroll_bar* %701, %union._XEvent* %702, %struct.input_event* %ie1194)
  %703 = load i32*, i32** %finish.addr, align 8
  store i32 2, i32* %703, align 4
  br label %if.end.1195

if.end.1195:                                      ; preds = %if.then.1193, %land.lhs.true.1188, %if.else.1181
  br label %if.end.1196

if.end.1196:                                      ; preds = %if.end.1195, %if.end.1180
  %704 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type1197 = bitcast %union._XEvent* %704 to i32*
  %705 = load i32, i32* %type1197, align 4
  %cmp1198 = icmp eq i32 %705, 4
  br i1 %cmp1198, label %if.then.1200, label %if.else.1205

if.then.1200:                                     ; preds = %if.end.1196
  %706 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1201 = bitcast %union._XEvent* %706 to %struct.XButtonEvent*
  %button = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1201, i32 0, i32 13
  %707 = load i32, i32* %button, align 4
  %shl1202 = shl i32 1, %707
  %708 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %grabbed = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %708, i32 0, i32 12
  %709 = load i32, i32* %grabbed, align 4
  %or1203 = or i32 %709, %shl1202
  store i32 %or1203, i32* %grabbed, align 4
  %710 = load %struct.frame*, %struct.frame** %f, align 8
  %711 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %last_mouse_frame1204 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %711, i32 0, i32 75
  store %struct.frame* %710, %struct.frame** %last_mouse_frame1204, align 8
  br label %if.end.1212

if.else.1205:                                     ; preds = %if.end.1196
  %712 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1206 = bitcast %union._XEvent* %712 to %struct.XButtonEvent*
  %button1207 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1206, i32 0, i32 13
  %713 = load i32, i32* %button1207, align 4
  %shl1208 = shl i32 1, %713
  %neg1209 = xor i32 %shl1208, -1
  %714 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %grabbed1210 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %714, i32 0, i32 12
  %715 = load i32, i32* %grabbed1210, align 4
  %and1211 = and i32 %715, %neg1209
  store i32 %and1211, i32* %grabbed1210, align 4
  br label %if.end.1212

if.end.1212:                                      ; preds = %if.else.1205, %if.then.1200
  %716 = load %struct.frame*, %struct.frame** %f, align 8
  %cmp1213 = icmp ne %struct.frame* %716, null
  br i1 %cmp1213, label %if.then.1215, label %if.end.1218

if.then.1215:                                     ; preds = %if.end.1212
  %717 = load %struct.frame*, %struct.frame** %f, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %717, i32 0, i32 26
  %718 = bitcast i48* %mouse_moved to i64*
  %bf.load1216 = load i64, i64* %718, align 8
  %bf.clear1217 = and i64 %bf.load1216, -1048577
  store i64 %bf.clear1217, i64* %718, align 8
  br label %if.end.1218

if.end.1218:                                      ; preds = %if.then.1215, %if.end.1212
  %719 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %720 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %call1219 = call %struct.frame* @x_menubar_window_to_frame(%struct.x_display_info* %719, %union._XEvent* %720)
  store %struct.frame* %call1219, %struct.frame** %f, align 8
  %call1220 = call i32 @popup_activated()
  %tobool1221 = icmp ne i32 %call1220, 0
  br i1 %tobool1221, label %if.else.1278, label %land.lhs.true.1222

land.lhs.true.1222:                               ; preds = %if.end.1218
  %721 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1223 = bitcast %union._XEvent* %721 to %struct.XButtonEvent*
  %button1224 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1223, i32 0, i32 13
  %722 = load i32, i32* %button1224, align 4
  %cmp1225 = icmp ult i32 %722, 3
  br i1 %cmp1225, label %land.lhs.true.1227, label %if.else.1278

land.lhs.true.1227:                               ; preds = %land.lhs.true.1222
  %723 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool1228 = icmp ne %struct.frame* %723, null
  br i1 %tobool1228, label %land.lhs.true.1229, label %if.else.1278

land.lhs.true.1229:                               ; preds = %land.lhs.true.1227
  %724 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type1230 = bitcast %union._XEvent* %724 to i32*
  %725 = load i32, i32* %type1230, align 4
  %cmp1231 = icmp eq i32 %725, 4
  br i1 %cmp1231, label %land.lhs.true.1233, label %if.else.1278

land.lhs.true.1233:                               ; preds = %land.lhs.true.1229
  %726 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1234 = bitcast %union._XEvent* %726 to %struct.XButtonEvent*
  %x1235 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1234, i32 0, i32 8
  %727 = load i32, i32* %x1235, align 4
  %cmp1236 = icmp sge i32 %727, 0
  br i1 %cmp1236, label %land.lhs.true.1238, label %if.else.1278

land.lhs.true.1238:                               ; preds = %land.lhs.true.1233
  %728 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1239 = bitcast %union._XEvent* %728 to %struct.XButtonEvent*
  %x1240 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1239, i32 0, i32 8
  %729 = load i32, i32* %x1240, align 4
  %730 = load %struct.frame*, %struct.frame** %f, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %730, i32 0, i32 46
  %731 = load i32, i32* %pixel_width, align 4
  %cmp1241 = icmp slt i32 %729, %731
  br i1 %cmp1241, label %land.lhs.true.1243, label %if.else.1278

land.lhs.true.1243:                               ; preds = %land.lhs.true.1238
  %732 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1244 = bitcast %union._XEvent* %732 to %struct.XButtonEvent*
  %y1245 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1244, i32 0, i32 9
  %733 = load i32, i32* %y1245, align 4
  %cmp1246 = icmp sge i32 %733, 0
  br i1 %cmp1246, label %land.lhs.true.1248, label %if.else.1278

land.lhs.true.1248:                               ; preds = %land.lhs.true.1243
  %734 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1249 = bitcast %union._XEvent* %734 to %struct.XButtonEvent*
  %y1250 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1249, i32 0, i32 9
  %735 = load i32, i32* %y1250, align 4
  %736 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1251 = getelementptr inbounds %struct.frame, %struct.frame* %736, i32 0, i32 62
  %x1252 = bitcast %union.output_data* %output_data1251 to %struct.x_output**
  %737 = load %struct.x_output*, %struct.x_output** %x1252, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %737, i32 0, i32 0
  %738 = load i32, i32* %menubar_height, align 4
  %cmp1253 = icmp slt i32 %735, %738
  br i1 %cmp1253, label %land.lhs.true.1255, label %if.else.1278

land.lhs.true.1255:                               ; preds = %land.lhs.true.1248
  %739 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton1256 = bitcast %union._XEvent* %739 to %struct.XButtonEvent*
  %same_screen = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton1256, i32 0, i32 14
  %740 = load i32, i32* %same_screen, align 4
  %tobool1257 = icmp ne i32 %740, 0
  br i1 %tobool1257, label %if.then.1258, label %if.else.1278

if.then.1258:                                     ; preds = %land.lhs.true.1255
  %741 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1259 = getelementptr inbounds %struct.frame, %struct.frame* %741, i32 0, i32 62
  %x1260 = bitcast %union.output_data* %output_data1259 to %struct.x_output**
  %742 = load %struct.x_output*, %struct.x_output** %x1260, align 8
  %saved_menu_event = getelementptr inbounds %struct.x_output, %struct.x_output* %742, i32 0, i32 45
  %743 = load %union._XEvent*, %union._XEvent** %saved_menu_event, align 8
  %tobool1261 = icmp ne %union._XEvent* %743, null
  br i1 %tobool1261, label %if.end.1267, label %if.then.1262

if.then.1262:                                     ; preds = %if.then.1258
  %call1263 = call noalias i8* @xmalloc(i64 192)
  %744 = bitcast i8* %call1263 to %union._XEvent*
  %745 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1264 = getelementptr inbounds %struct.frame, %struct.frame* %745, i32 0, i32 62
  %x1265 = bitcast %union.output_data* %output_data1264 to %struct.x_output**
  %746 = load %struct.x_output*, %struct.x_output** %x1265, align 8
  %saved_menu_event1266 = getelementptr inbounds %struct.x_output, %struct.x_output* %746, i32 0, i32 45
  store %union._XEvent* %744, %union._XEvent** %saved_menu_event1266, align 8
  br label %if.end.1267

if.end.1267:                                      ; preds = %if.then.1262, %if.then.1258
  %747 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1268 = getelementptr inbounds %struct.frame, %struct.frame* %747, i32 0, i32 62
  %x1269 = bitcast %union.output_data* %output_data1268 to %struct.x_output**
  %748 = load %struct.x_output*, %struct.x_output** %x1269, align 8
  %saved_menu_event1270 = getelementptr inbounds %struct.x_output, %struct.x_output* %748, i32 0, i32 45
  %749 = load %union._XEvent*, %union._XEvent** %saved_menu_event1270, align 8
  %750 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %751 = bitcast %union._XEvent* %749 to i8*
  %752 = bitcast %union._XEvent* %750 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %751, i8* %752, i64 192, i32 8, i1 false)
  %ie1271 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %753 = bitcast %struct.input_event* %ie1271 to i32*
  %bf.load1272 = load i32, i32* %753, align 8
  %bf.clear1273 = and i32 %bf.load1272, -65536
  %bf.set1274 = or i32 %bf.clear1273, 17
  store i32 %bf.set1274, i32* %753, align 8
  %754 = load %struct.frame*, %struct.frame** %f, align 8
  %755 = bitcast %struct.frame* %754 to i8*
  %call1275 = call i64 @make_lisp_ptr(i8* %755, i32 5)
  %ie1276 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %frame_or_window1277 = getelementptr inbounds %struct.input_event, %struct.input_event* %ie1276, i32 0, i32 6
  store i64 %call1275, i64* %frame_or_window1277, align 8
  %756 = load i32*, i32** %finish.addr, align 8
  store i32 2, i32* %756, align 4
  br label %if.end.1279

if.else.1278:                                     ; preds = %land.lhs.true.1255, %land.lhs.true.1248, %land.lhs.true.1243, %land.lhs.true.1238, %land.lhs.true.1233, %land.lhs.true.1229, %land.lhs.true.1227, %land.lhs.true.1222, %if.end.1218
  br label %OTHER

if.end.1279:                                      ; preds = %if.end.1267
  br label %sw.epilog.1289

sw.bb.1280:                                       ; preds = %if.end
  br label %OTHER

sw.bb.1281:                                       ; preds = %if.end
  br label %OTHER

sw.bb.1282:                                       ; preds = %if.end
  br label %OTHER

sw.bb.1283:                                       ; preds = %if.end
  %757 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmapping = bitcast %union._XEvent* %757 to %struct.XMappingEvent*
  %request = getelementptr inbounds %struct.XMappingEvent, %struct.XMappingEvent* %xmapping, i32 0, i32 5
  %758 = load i32, i32* %request, align 4
  switch i32 %758, label %sw.epilog [
    i32 0, label %sw.bb.1284
    i32 1, label %sw.bb.1285
  ]

sw.bb.1284:                                       ; preds = %sw.bb.1283
  %759 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  call void @x_find_modifier_meanings(%struct.x_display_info* %759)
  br label %sw.bb.1285

sw.bb.1285:                                       ; preds = %sw.bb.1283, %sw.bb.1284
  %760 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xmapping1286 = bitcast %union._XEvent* %760 to %struct.XMappingEvent*
  %call1287 = call i32 @XRefreshKeyboardMapping(%struct.XMappingEvent* %xmapping1286)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.1285, %sw.bb.1283
  br label %OTHER

sw.bb.1288:                                       ; preds = %if.end
  %761 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %762 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  call void @xft_settings_event(%struct.x_display_info* %761, %union._XEvent* %762)
  br label %sw.epilog.1289

sw.default:                                       ; preds = %if.end
  br label %OTHER

OTHER:                                            ; preds = %sw.default, %sw.epilog, %sw.bb.1282, %sw.bb.1281, %sw.bb.1280, %if.else.1278, %if.end.1113, %if.end.1030, %sw.bb.941, %if.end.940, %sw.bb.911, %if.end.910, %if.then.441, %if.end.436, %if.end.383, %if.else.324, %if.end.284, %if.end.265, %if.then.169, %if.then.131, %if.then.76
  br label %sw.epilog.1289

sw.epilog.1289:                                   ; preds = %OTHER, %sw.bb.1288, %if.end.1279, %sw.bb.878, %done_keysym, %if.then.874, %if.then.529, %if.then.505, %sw.bb.340, %if.end.339, %if.end.325, %sw.bb.188, %sw.bb.178, %sw.bb.176, %if.end.175
  br label %done

done:                                             ; preds = %sw.epilog.1289, %if.end.166, %if.then.145, %if.then.138, %if.end.132, %if.end.111, %if.then.89, %if.end.83, %if.end.77, %if.end.66, %if.end.26
  %ie1290 = bitcast %union.buffered_input_event* %inev to %struct.input_event*
  %763 = bitcast %struct.input_event* %ie1290 to i32*
  %bf.load1291 = load i32, i32* %763, align 8
  %bf.clear1292 = and i32 %bf.load1291, 65535
  %cmp1293 = icmp ne i32 %bf.clear1292, 0
  br i1 %cmp1293, label %if.then.1295, label %if.end.1297

if.then.1295:                                     ; preds = %done
  %764 = load %struct.input_event*, %struct.input_event** %hold_quit.addr, align 8
  call void @kbd_buffer_store_buffered_event(%union.buffered_input_event* %inev, %struct.input_event* %764)
  %765 = load i32, i32* %count, align 4
  %inc1296 = add nsw i32 %765, 1
  store i32 %inc1296, i32* %count, align 4
  br label %if.end.1297

if.end.1297:                                      ; preds = %if.then.1295, %done
  %766 = load i32, i32* %do_help, align 4
  %tobool1298 = icmp ne i32 %766, 0
  br i1 %tobool1298, label %land.lhs.true.1299, label %if.end.1324

land.lhs.true.1299:                               ; preds = %if.end.1297
  %767 = load %struct.input_event*, %struct.input_event** %hold_quit.addr, align 8
  %tobool1300 = icmp ne %struct.input_event* %767, null
  br i1 %tobool1300, label %land.lhs.true.1301, label %if.then.1306

land.lhs.true.1301:                               ; preds = %land.lhs.true.1299
  %768 = load %struct.input_event*, %struct.input_event** %hold_quit.addr, align 8
  %769 = bitcast %struct.input_event* %768 to i32*
  %bf.load1302 = load i32, i32* %769, align 8
  %bf.clear1303 = and i32 %bf.load1302, 65535
  %cmp1304 = icmp ne i32 %bf.clear1303, 0
  br i1 %cmp1304, label %if.end.1324, label %if.then.1306

if.then.1306:                                     ; preds = %land.lhs.true.1301, %land.lhs.true.1299
  %770 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool1308 = icmp ne %struct.frame* %770, null
  br i1 %tobool1308, label %if.then.1309, label %if.else.1311

if.then.1309:                                     ; preds = %if.then.1306
  %771 = load %struct.frame*, %struct.frame** %f, align 8
  %772 = bitcast %struct.frame* %771 to i8*
  %call1310 = call i64 @make_lisp_ptr(i8* %772, i32 5)
  store i64 %call1310, i64* %frame1307, align 8
  br label %if.end.1313

if.else.1311:                                     ; preds = %if.then.1306
  %call1312 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1312, i64* %frame1307, align 8
  br label %if.end.1313

if.end.1313:                                      ; preds = %if.else.1311, %if.then.1309
  %773 = load i32, i32* %do_help, align 4
  %cmp1314 = icmp sgt i32 %773, 0
  br i1 %cmp1314, label %if.then.1316, label %if.else.1317

if.then.1316:                                     ; preds = %if.end.1313
  store i8 1, i8* @any_help_event_p, align 1
  %774 = load i64, i64* @help_echo_string, align 8
  %775 = load i64, i64* %frame1307, align 8
  %776 = load i64, i64* @help_echo_window, align 8
  %777 = load i64, i64* @help_echo_object, align 8
  %778 = load i64, i64* @help_echo_pos, align 8
  call void @gen_help_event(i64 %774, i64 %775, i64 %776, i64 %777, i64 %778)
  br label %if.end.1322

if.else.1317:                                     ; preds = %if.end.1313
  %call1318 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1318, i64* @help_echo_string, align 8
  %call1319 = call i64 @builtin_lisp_symbol(i32 0)
  %779 = load i64, i64* %frame1307, align 8
  %call1320 = call i64 @builtin_lisp_symbol(i32 0)
  %call1321 = call i64 @builtin_lisp_symbol(i32 0)
  call void @gen_help_event(i64 %call1319, i64 %779, i64 %call1320, i64 %call1321, i64 0)
  br label %if.end.1322

if.end.1322:                                      ; preds = %if.else.1317, %if.then.1316
  %780 = load i32, i32* %count, align 4
  %inc1323 = add nsw i32 %780, 1
  store i32 %inc1323, i32* %count, align 4
  br label %if.end.1324

if.end.1324:                                      ; preds = %if.end.1322, %land.lhs.true.1301, %if.end.1297
  br label %do.body.1325

do.body.1325:                                     ; preds = %if.end.1324
  %781 = load i8, i8* %sa_must_free, align 1
  %tobool1326 = trunc i8 %781 to i1
  br i1 %tobool1326, label %if.then.1327, label %if.end.1330

if.then.1327:                                     ; preds = %do.body.1325
  store i8 0, i8* %sa_must_free, align 1
  %782 = load i64, i64* %sa_count, align 8
  %call1328 = call i64 @builtin_lisp_symbol(i32 0)
  %call1329 = call i64 @unbind_to(i64 %782, i64 %call1328)
  br label %if.end.1330

if.end.1330:                                      ; preds = %if.then.1327, %do.body.1325
  br label %do.end.1331

do.end.1331:                                      ; preds = %if.end.1330
  %783 = load i32, i32* %count, align 4
  ret i32 %783
}

declare i64 @SPECPDL_INDEX() #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal %struct.frame* @x_any_window_to_frame(%struct.x_display_info* %dpyinfo, i32 %wdesc) #0 {
entry:
  %retval = alloca %struct.frame*, align 8
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %wdesc.addr = alloca i32, align 4
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %found = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %gwdesc = alloca %struct._GtkWidget*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i32 %wdesc, i32* %wdesc.addr, align 4
  store %struct.frame* null, %struct.frame** %found, align 8
  %0 = load i32, i32* %wdesc.addr, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp eq i64 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.frame* null, %struct.frame** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* @Vframe_list, align 8
  store i64 %1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, i64* %tail, align 8
  %and = and i64 %2, 7
  %conv2 = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv2, 3
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load %struct.frame*, %struct.frame** %found, align 8
  %tobool = icmp ne %struct.frame* %8, null
  br i1 %tobool, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %for.body
  br label %for.end

if.end.6:                                         ; preds = %for.body
  %9 = load i64, i64* %frame, align 8
  %sub7 = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub7 to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  store %struct.frame* %11, %struct.frame** %f, align 8
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 26
  %13 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %13, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp8 = icmp eq i32 %bf.cast, 2
  br i1 %cmp8, label %land.lhs.true, label %if.end.42

land.lhs.true:                                    ; preds = %if.end.6
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x10 = bitcast %union.output_data* %output_data to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x10, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 44
  %16 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %17 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp11 = icmp eq %struct.x_display_info* %16, %17
  br i1 %cmp11, label %if.then.13, label %if.end.42

if.then.13:                                       ; preds = %land.lhs.true
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data14 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x15 = bitcast %union.output_data* %output_data14 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x15, align 8
  store %struct.x_output* %19, %struct.x_output** %x, align 8
  %20 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hourglass_window = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 42
  %21 = load i64, i64* %hourglass_window, align 8
  %22 = load i32, i32* %wdesc.addr, align 4
  %conv16 = sext i32 %22 to i64
  %cmp17 = icmp eq i64 %21, %conv16
  br i1 %cmp17, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.then.13
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %23, %struct.frame** %found, align 8
  br label %if.end.41

if.else:                                          ; preds = %if.then.13
  %24 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %24, i32 0, i32 12
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool20 = icmp ne %struct._GtkWidget* %25, null
  br i1 %tobool20, label %if.then.21, label %if.else.32

if.then.21:                                       ; preds = %if.else
  %26 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 2
  %27 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %28 = load i32, i32* %wdesc.addr, align 4
  %conv22 = sext i32 %28 to i64
  %call = call %struct._GtkWidget* @xg_win_to_widget(%struct._XDisplay* %27, i64 %conv22)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %gwdesc, align 8
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %cmp23 = icmp ne %struct._GtkWidget* %29, null
  br i1 %cmp23, label %land.lhs.true.25, label %if.end.31

land.lhs.true.25:                                 ; preds = %if.then.21
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %call26 = call %struct._GtkWidget* @gtk_widget_get_toplevel(%struct._GtkWidget* %30)
  %31 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget27 = getelementptr inbounds %struct.x_output, %struct.x_output* %31, i32 0, i32 12
  %32 = load %struct._GtkWidget*, %struct._GtkWidget** %widget27, align 8
  %cmp28 = icmp eq %struct._GtkWidget* %call26, %32
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %land.lhs.true.25
  %33 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %33, %struct.frame** %found, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %land.lhs.true.25, %if.then.21
  br label %if.end.40

if.else.32:                                       ; preds = %if.else
  %34 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data33 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 62
  %x34 = bitcast %union.output_data* %output_data33 to %struct.x_output**
  %35 = load %struct.x_output*, %struct.x_output** %x34, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 9
  %36 = load i64, i64* %window_desc, align 8
  %37 = load i32, i32* %wdesc.addr, align 4
  %conv35 = sext i32 %37 to i64
  %cmp36 = icmp eq i64 %36, %conv35
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.else.32
  %38 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %38, %struct.frame** %found, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.38, %if.else.32
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.end.31
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.19
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %land.lhs.true, %if.end.6
  br label %for.inc

for.inc:                                          ; preds = %if.end.42
  %39 = load i64, i64* %tail, align 8
  %sub43 = sub nsw i64 %39, 3
  %40 = inttoptr i64 %sub43 to i8*
  %41 = bitcast i8* %40 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %41, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %42 = load i64, i64* %cdr, align 8
  store i64 %42, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.5, %land.end
  %43 = load %struct.frame*, %struct.frame** %found, align 8
  store %struct.frame* %43, %struct.frame** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %44 = load %struct.frame*, %struct.frame** %retval
  ret %struct.frame* %44
}

declare void @XSetICFocus(%struct._XIC*) #1

declare zeroext i1 @x_session_have_connection() #1

declare zeroext i1 @FRAMEP(i64) #1

; Function Attrs: noreturn
declare void @emacs_abort() #4

declare i32 @XSetCommand(%struct._XDisplay*, i64, i8**, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.frame* @x_window_to_frame(%struct.x_display_info* %dpyinfo, i32 %wdesc) #0 {
entry:
  %retval = alloca %struct.frame*, align 8
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %wdesc.addr = alloca i32, align 4
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %gwdesc = alloca %struct._GtkWidget*, align 8
  %x23 = alloca %struct.x_output*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i32 %wdesc, i32* %wdesc.addr, align 4
  %0 = load i32, i32* %wdesc.addr, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp eq i64 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.frame* null, %struct.frame** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* @Vframe_list, align 8
  store i64 %1, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, i64* %tail, align 8
  %and = and i64 %2, 7
  %conv2 = trunc i64 %and to i32
  %cmp3 = icmp eq i32 %conv2, 3
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 0
  %6 = load i64, i64* %car, align 8
  store i64 %6, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %8 = load i64, i64* %frame, align 8
  %sub5 = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub5 to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  store %struct.frame* %10, %struct.frame** %f, align 8
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %12, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp6 = icmp eq i32 %bf.cast, 2
  br i1 %cmp6, label %lor.lhs.false, label %if.then.10

lor.lhs.false:                                    ; preds = %for.body
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 44
  %15 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %16 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp8 = icmp ne %struct.x_display_info* %15, %16
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %lor.lhs.false, %for.body
  br label %for.inc

if.end.11:                                        ; preds = %lor.lhs.false
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data12 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 62
  %x13 = bitcast %union.output_data* %output_data12 to %struct.x_output**
  %18 = load %struct.x_output*, %struct.x_output** %x13, align 8
  %hourglass_window = getelementptr inbounds %struct.x_output, %struct.x_output* %18, i32 0, i32 42
  %19 = load i64, i64* %hourglass_window, align 8
  %20 = load i32, i32* %wdesc.addr, align 4
  %conv14 = sext i32 %20 to i64
  %cmp15 = icmp eq i64 %19, %conv14
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.11
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %21, %struct.frame** %retval
  br label %return

if.end.18:                                        ; preds = %if.end.11
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %23 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 13
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %24, null
  br i1 %tobool, label %if.then.21, label %if.end.33

if.then.21:                                       ; preds = %if.end.18
  %25 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %25, i32 0, i32 2
  %26 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %27 = load i32, i32* %wdesc.addr, align 4
  %conv22 = sext i32 %27 to i64
  %call = call %struct._GtkWidget* @xg_win_to_widget(%struct._XDisplay* %26, i64 %conv22)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %gwdesc, align 8
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data24 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x25 = bitcast %union.output_data* %output_data24 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x25, align 8
  store %struct.x_output* %29, %struct.x_output** %x23, align 8
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %cmp26 = icmp ne %struct._GtkWidget* %30, null
  br i1 %cmp26, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %if.then.21
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %32 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %edit_widget28 = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 13
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget28, align 8
  %cmp29 = icmp eq %struct._GtkWidget* %31, %33
  br i1 %cmp29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %land.lhs.true
  %34 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %34, %struct.frame** %retval
  br label %return

if.end.32:                                        ; preds = %land.lhs.true, %if.then.21
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end.18
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data34 = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 62
  %x35 = bitcast %union.output_data* %output_data34 to %struct.x_output**
  %36 = load %struct.x_output*, %struct.x_output** %x35, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %36, i32 0, i32 9
  %37 = load i64, i64* %window_desc, align 8
  %38 = load i32, i32* %wdesc.addr, align 4
  %conv36 = sext i32 %38 to i64
  %cmp37 = icmp eq i64 %37, %conv36
  br i1 %cmp37, label %if.then.45, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %if.end.33
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data40 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 62
  %x41 = bitcast %union.output_data* %output_data40 to %struct.x_output**
  %40 = load %struct.x_output*, %struct.x_output** %x41, align 8
  %icon_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 10
  %41 = load i64, i64* %icon_desc, align 8
  %42 = load i32, i32* %wdesc.addr, align 4
  %conv42 = sext i32 %42 to i64
  %cmp43 = icmp eq i64 %41, %conv42
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %lor.lhs.false.39, %if.end.33
  %43 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %43, %struct.frame** %retval
  br label %return

if.end.46:                                        ; preds = %lor.lhs.false.39
  br label %for.inc

for.inc:                                          ; preds = %if.end.46, %if.then.10
  %44 = load i64, i64* %tail, align 8
  %sub47 = sub nsw i64 %44, 3
  %45 = inttoptr i64 %sub47 to i8*
  %46 = bitcast i8* %45 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %46, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %47 = load i64, i64* %cdr, align 8
  store i64 %47, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  store %struct.frame* null, %struct.frame** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.45, %if.then.31, %if.then.17, %if.then
  %48 = load %struct.frame*, %struct.frame** %retval
  ret %struct.frame* %48
}

declare void @x_kill_gs_process(i64, %struct.frame*) #1

declare void @expose_frame(%struct.frame*, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_scroll_bar_to_input_event(%union._XEvent* %event, %struct.input_event* %ievent) #0 {
entry:
  %event.addr = alloca %union._XEvent*, align 8
  %ievent.addr = alloca %struct.input_event*, align 8
  %ev = alloca %struct.XClientMessageEvent*, align 8
  %window = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %iw0 = alloca i64, align 8
  %iw1 = alloca i64, align 8
  %iw = alloca i64, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  store %struct.input_event* %ievent, %struct.input_event** %ievent.addr, align 8
  %0 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient = bitcast %union._XEvent* %0 to %struct.XClientMessageEvent*
  store %struct.XClientMessageEvent* %xclient, %struct.XClientMessageEvent** %ev, align 8
  %1 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %1, i32 0, i32 7
  %l = bitcast %union.anon.5* %data to [5 x i64]*
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %l, i32 0, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  store i64 %2, i64* %iw0, align 8
  %3 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data1 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %3, i32 0, i32 7
  %l2 = bitcast %union.anon.5* %data1 to [5 x i64]*
  %arrayidx3 = getelementptr inbounds [5 x i64], [5 x i64]* %l2, i32 0, i64 1
  %4 = load i64, i64* %arrayidx3, align 8
  store i64 %4, i64* %iw1, align 8
  %5 = load i64, i64* %iw0, align 8
  %shl = shl i64 %5, 31
  %shl4 = shl i64 %shl, 1
  %6 = load i64, i64* %iw1, align 8
  %and = and i64 %6, 4294967295
  %add = add nsw i64 %shl4, %and
  store i64 %add, i64* %iw, align 8
  %7 = load i64, i64* %iw, align 8
  %8 = inttoptr i64 %7 to %struct.window*
  store %struct.window* %8, %struct.window** %w, align 8
  %9 = load %struct.window*, %struct.window** %w, align 8
  %10 = bitcast %struct.window* %9 to i8*
  %call = call i64 @make_lisp_ptr(i8* %10, i32 5)
  store i64 %call, i64* %window, align 8
  %11 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %12 = bitcast %struct.input_event* %11 to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, -65536
  %bf.set = or i32 %bf.clear, 8
  store i32 %bf.set, i32* %12, align 8
  %13 = load i64, i64* %window, align 8
  %14 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %14, i32 0, i32 6
  store i64 %13, i64* %frame_or_window, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %15 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %15, i32 0, i32 7
  store i64 %call5, i64* %arg, align 8
  %16 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %timestamp = getelementptr inbounds %struct.input_event, %struct.input_event* %16, i32 0, i32 5
  store i64 0, i64* %timestamp, align 8
  %17 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %code = getelementptr inbounds %struct.input_event, %struct.input_event* %17, i32 0, i32 1
  store i32 0, i32* %code, align 4
  %18 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data6 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %18, i32 0, i32 7
  %l7 = bitcast %union.anon.5* %data6 to [5 x i64]*
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %l7, i32 0, i64 2
  %19 = load i64, i64* %arrayidx8, align 8
  %conv = trunc i64 %19 to i32
  %20 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %21 = bitcast %struct.input_event* %20 to i32*
  %bf.load9 = load i32, i32* %21, align 8
  %bf.value = and i32 %conv, 65535
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear10 = and i32 %bf.load9, 65535
  %bf.set11 = or i32 %bf.clear10, %bf.shl
  store i32 %bf.set11, i32* %21, align 8
  %22 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data12 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %22, i32 0, i32 7
  %l13 = bitcast %union.anon.5* %data12 to [5 x i64]*
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %l13, i32 0, i64 3
  %23 = load i64, i64* %arrayidx14, align 8
  %shl15 = shl i64 %23, 2
  %add16 = add i64 %shl15, 2
  %24 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %x = getelementptr inbounds %struct.input_event, %struct.input_event* %24, i32 0, i32 3
  store i64 %add16, i64* %x, align 8
  %25 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data17 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %25, i32 0, i32 7
  %l18 = bitcast %union.anon.5* %data17 to [5 x i64]*
  %arrayidx19 = getelementptr inbounds [5 x i64], [5 x i64]* %l18, i32 0, i64 4
  %26 = load i64, i64* %arrayidx19, align 8
  %shl20 = shl i64 %26, 2
  %add21 = add i64 %shl20, 2
  %27 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %y = getelementptr inbounds %struct.input_event, %struct.input_event* %27, i32 0, i32 4
  store i64 %add21, i64* %y, align 8
  %28 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %modifiers = getelementptr inbounds %struct.input_event, %struct.input_event* %28, i32 0, i32 2
  store i32 0, i32* %modifiers, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_horizontal_scroll_bar_to_input_event(%union._XEvent* %event, %struct.input_event* %ievent) #0 {
entry:
  %event.addr = alloca %union._XEvent*, align 8
  %ievent.addr = alloca %struct.input_event*, align 8
  %ev = alloca %struct.XClientMessageEvent*, align 8
  %window = alloca i64, align 8
  %w = alloca %struct.window*, align 8
  %iw0 = alloca i64, align 8
  %iw1 = alloca i64, align 8
  %iw = alloca i64, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  store %struct.input_event* %ievent, %struct.input_event** %ievent.addr, align 8
  %0 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient = bitcast %union._XEvent* %0 to %struct.XClientMessageEvent*
  store %struct.XClientMessageEvent* %xclient, %struct.XClientMessageEvent** %ev, align 8
  %1 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %1, i32 0, i32 7
  %l = bitcast %union.anon.5* %data to [5 x i64]*
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %l, i32 0, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  store i64 %2, i64* %iw0, align 8
  %3 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data1 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %3, i32 0, i32 7
  %l2 = bitcast %union.anon.5* %data1 to [5 x i64]*
  %arrayidx3 = getelementptr inbounds [5 x i64], [5 x i64]* %l2, i32 0, i64 1
  %4 = load i64, i64* %arrayidx3, align 8
  store i64 %4, i64* %iw1, align 8
  %5 = load i64, i64* %iw0, align 8
  %shl = shl i64 %5, 31
  %shl4 = shl i64 %shl, 1
  %6 = load i64, i64* %iw1, align 8
  %and = and i64 %6, 4294967295
  %add = add nsw i64 %shl4, %and
  store i64 %add, i64* %iw, align 8
  %7 = load i64, i64* %iw, align 8
  %8 = inttoptr i64 %7 to %struct.window*
  store %struct.window* %8, %struct.window** %w, align 8
  %9 = load %struct.window*, %struct.window** %w, align 8
  %10 = bitcast %struct.window* %9 to i8*
  %call = call i64 @make_lisp_ptr(i8* %10, i32 5)
  store i64 %call, i64* %window, align 8
  %11 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %12 = bitcast %struct.input_event* %11 to i32*
  %bf.load = load i32, i32* %12, align 8
  %bf.clear = and i32 %bf.load, -65536
  %bf.set = or i32 %bf.clear, 9
  store i32 %bf.set, i32* %12, align 8
  %13 = load i64, i64* %window, align 8
  %14 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %14, i32 0, i32 6
  store i64 %13, i64* %frame_or_window, align 8
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  %15 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %15, i32 0, i32 7
  store i64 %call5, i64* %arg, align 8
  %16 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %timestamp = getelementptr inbounds %struct.input_event, %struct.input_event* %16, i32 0, i32 5
  store i64 0, i64* %timestamp, align 8
  %17 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %code = getelementptr inbounds %struct.input_event, %struct.input_event* %17, i32 0, i32 1
  store i32 0, i32* %code, align 4
  %18 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data6 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %18, i32 0, i32 7
  %l7 = bitcast %union.anon.5* %data6 to [5 x i64]*
  %arrayidx8 = getelementptr inbounds [5 x i64], [5 x i64]* %l7, i32 0, i64 2
  %19 = load i64, i64* %arrayidx8, align 8
  %conv = trunc i64 %19 to i32
  %20 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %21 = bitcast %struct.input_event* %20 to i32*
  %bf.load9 = load i32, i32* %21, align 8
  %bf.value = and i32 %conv, 65535
  %bf.shl = shl i32 %bf.value, 16
  %bf.clear10 = and i32 %bf.load9, 65535
  %bf.set11 = or i32 %bf.clear10, %bf.shl
  store i32 %bf.set11, i32* %21, align 8
  %22 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data12 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %22, i32 0, i32 7
  %l13 = bitcast %union.anon.5* %data12 to [5 x i64]*
  %arrayidx14 = getelementptr inbounds [5 x i64], [5 x i64]* %l13, i32 0, i64 3
  %23 = load i64, i64* %arrayidx14, align 8
  %shl15 = shl i64 %23, 2
  %add16 = add i64 %shl15, 2
  %24 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %x = getelementptr inbounds %struct.input_event, %struct.input_event* %24, i32 0, i32 3
  store i64 %add16, i64* %x, align 8
  %25 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data17 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %25, i32 0, i32 7
  %l18 = bitcast %union.anon.5* %data17 to [5 x i64]*
  %arrayidx19 = getelementptr inbounds [5 x i64], [5 x i64]* %l18, i32 0, i64 4
  %26 = load i64, i64* %arrayidx19, align 8
  %shl20 = shl i64 %26, 2
  %add21 = add i64 %shl20, 2
  %27 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %y = getelementptr inbounds %struct.input_event, %struct.input_event* %27, i32 0, i32 4
  store i64 %add21, i64* %y, align 8
  %28 = load %struct.input_event*, %struct.input_event** %ievent.addr, align 8
  %modifiers = getelementptr inbounds %struct.input_event, %struct.input_event* %28, i32 0, i32 2
  store i32 0, i32* %modifiers, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_detect_focus_change(%struct.x_display_info* %dpyinfo, %struct.frame* %frame, %union._XEvent* %event, %struct.input_event* %bufp) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %frame.addr = alloca %struct.frame*, align 8
  %event.addr = alloca %union._XEvent*, align 8
  %bufp.addr = alloca %struct.input_event*, align 8
  %focus_frame = alloca %struct.frame*, align 8
  %focus_state = alloca i32, align 4
  %msg = alloca i32, align 4
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  store %struct.input_event* %bufp, %struct.input_event** %bufp.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %tobool = icmp ne %struct.frame* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog

if.end:                                           ; preds = %entry
  %1 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type = bitcast %union._XEvent* %1 to i32*
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb.12
    i32 10, label %sw.bb.12
    i32 33, label %sw.bb.17
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_event_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 72
  %4 = load %struct.frame*, %struct.frame** %x_focus_event_frame, align 8
  store %struct.frame* %4, %struct.frame** %focus_frame, align 8
  %5 = load %struct.frame*, %struct.frame** %focus_frame, align 8
  %tobool1 = icmp ne %struct.frame* %5, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  %6 = load %struct.frame*, %struct.frame** %focus_frame, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %focus_state2 = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 53
  %8 = load i32, i32* %focus_state2, align 4
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %focus_state, align 4
  %9 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xcrossing = bitcast %union._XEvent* %9 to %struct.XCrossingEvent*
  %detail = getelementptr inbounds %struct.XCrossingEvent, %struct.XCrossingEvent* %xcrossing, i32 0, i32 13
  %10 = load i32, i32* %detail, align 4
  %cmp = icmp ne i32 %10, 2
  br i1 %cmp, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %cond.end
  %11 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xcrossing3 = bitcast %union._XEvent* %11 to %struct.XCrossingEvent*
  %focus = getelementptr inbounds %struct.XCrossingEvent, %struct.XCrossingEvent* %xcrossing3, i32 0, i32 15
  %12 = load i32, i32* %focus, align 4
  %tobool4 = icmp ne i32 %12, 0
  br i1 %tobool4, label %land.lhs.true.5, label %if.end.11

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %13 = load i32, i32* %focus_state, align 4
  %and = and i32 %13, 2
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.end.11, label %if.then.7

if.then.7:                                        ; preds = %land.lhs.true.5
  %14 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type8 = bitcast %union._XEvent* %14 to i32*
  %15 = load i32, i32* %type8, align 4
  %cmp9 = icmp eq i32 %15, 7
  %cond10 = select i1 %cmp9, i32 9, i32 10
  %16 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %17 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %18 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  call void @x_focus_changed(i32 %cond10, i32 1, %struct.x_display_info* %16, %struct.frame* %17, %struct.input_event* %18)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.7, %land.lhs.true.5, %land.lhs.true, %cond.end
  br label %sw.epilog

sw.bb.12:                                         ; preds = %if.end, %if.end
  %19 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type13 = bitcast %union._XEvent* %19 to i32*
  %20 = load i32, i32* %type13, align 4
  %21 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xfocus = bitcast %union._XEvent* %21 to %struct.XFocusChangeEvent*
  %detail14 = getelementptr inbounds %struct.XFocusChangeEvent, %struct.XFocusChangeEvent* %xfocus, i32 0, i32 6
  %22 = load i32, i32* %detail14, align 4
  %cmp15 = icmp eq i32 %22, 5
  %cond16 = select i1 %cmp15, i32 1, i32 2
  %23 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %24 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %25 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  call void @x_focus_changed(i32 %20, i32 %cond16, %struct.x_display_info* %23, %struct.frame* %24, %struct.input_event* %25)
  br label %sw.epilog

sw.bb.17:                                         ; preds = %if.end
  %26 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient = bitcast %union._XEvent* %26 to %struct.XClientMessageEvent*
  %message_type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient, i32 0, i32 5
  %27 = load i64, i64* %message_type, align 8
  %28 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %Xatom_XEMBED = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 69
  %29 = load i64, i64* %Xatom_XEMBED, align 8
  %cmp18 = icmp eq i64 %27, %29
  br i1 %cmp18, label %if.then.19, label %if.end.24

if.then.19:                                       ; preds = %sw.bb.17
  %30 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient20 = bitcast %union._XEvent* %30 to %struct.XClientMessageEvent*
  %data = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient20, i32 0, i32 7
  %l = bitcast %union.anon.5* %data to [5 x i64]*
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %l, i32 0, i64 1
  %31 = load i64, i64* %arrayidx, align 8
  %conv = trunc i64 %31 to i32
  store i32 %conv, i32* %msg, align 4
  %32 = load i32, i32* %msg, align 4
  %cmp21 = icmp eq i32 %32, 4
  %cond23 = select i1 %cmp21, i32 9, i32 10
  %33 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %34 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %35 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  call void @x_focus_changed(i32 %cond23, i32 2, %struct.x_display_info* %33, %struct.frame* %34, %struct.input_event* %35)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.19, %sw.bb.17
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then, %if.end, %if.end.24, %sw.bb.12, %if.end.11
  ret void
}

declare void @xft_settings_event(%struct.x_display_info*, %union._XEvent*) #1

declare zeroext i1 @x_handle_dnd_message(%struct.frame*, %struct.XClientMessageEvent*, %struct.x_display_info*, %struct.input_event*) #1

declare void @x_display_set_last_user_time(%struct.x_display_info*, i64) #1

declare void @x_handle_selection_notify(%struct.XSelectionEvent*) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @x_handle_net_wm_state(%struct.frame* %f, %struct.XPropertyEvent* %event) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %event.addr = alloca %struct.XPropertyEvent*, align 8
  %value = alloca i32, align 4
  %lval = alloca i64, align 8
  %sticky = alloca i8, align 1
  %not_hidden = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.XPropertyEvent* %event, %struct.XPropertyEvent** %event.addr, align 8
  store i32 0, i32* %value, align 4
  store i8 0, i8* %sticky, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.XPropertyEvent*, %struct.XPropertyEvent** %event.addr, align 8
  %window = getelementptr inbounds %struct.XPropertyEvent, %struct.XPropertyEvent* %1, i32 0, i32 4
  %2 = load i64, i64* %window, align 8
  %call = call zeroext i1 @get_current_wm_state(%struct.frame* %0, i64 %2, i32* %value, i8* %sticky)
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %not_hidden, align 1
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %lval, align 8
  %3 = load i32, i32* %value, align 4
  switch i32 %3, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.3
    i32 3, label %sw.bb.5
    i32 4, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 473)
  store i64 %call2, i64* %lval, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 471)
  store i64 %call4, i64* %lval, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %entry
  %call6 = call i64 @builtin_lisp_symbol(i32 470)
  store i64 %call6, i64* %lval, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  %call8 = call i64 @builtin_lisp_symbol(i32 648)
  store i64 %call8, i64* %lval, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.7, %sw.bb.5, %sw.bb.3, %sw.bb
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 1051)
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 472)
  %call11 = call i64 @get_frame_param(%struct.frame* %5, i64 %call10)
  %6 = load i64, i64* %lval, align 8
  %call12 = call i64 @list2(i64 %call11, i64 %6)
  call void @frame_size_history_add(%struct.frame* %4, i64 %call9, i32 0, i32 0, i64 %call12)
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 472)
  %8 = load i64, i64* %lval, align 8
  call void @store_frame_param(%struct.frame* %7, i64 %call13, i64 %8)
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 878)
  %10 = load i8, i8* %sticky, align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.epilog
  %call15 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %sw.epilog
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call15, %cond.true ], [ %call16, %cond.false ]
  call void @store_frame_param(%struct.frame* %9, i64 %call14, i64 %cond)
  %11 = load i8, i8* %not_hidden, align 1
  %tobool17 = trunc i8 %11 to i1
  ret i1 %tobool17
}

declare void @x_handle_property_notify(%struct.XPropertyEvent*) #1

declare void @x_redo_mouse_highlight(%struct.x_display_info*) #1

; Function Attrs: nounwind uwtable
define internal void @x_check_fullscreen(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %lval = alloca i64, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %lval, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call1 = call zeroext i1 @do_ewmh_fullscreen(%struct.frame* %0)
  br i1 %call1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %parent_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 11
  %3 = load i64, i64* %parent_desc, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %root_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 14
  %7 = load i64, i64* %root_window, align 8
  %cmp = icmp ne i64 %3, %7
  br i1 %cmp, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  br label %return

if.end.5:                                         ; preds = %if.end
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %want_fullscreen to i64*
  %bf.load = load i64, i64* %9, align 8
  %bf.lshr = lshr i64 %bf.load, 26
  %bf.clear = and i64 %bf.lshr, 15
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp6 = icmp ne i32 %bf.cast, 0
  br i1 %cmp6, label %if.then.7, label %if.end.69

if.then.7:                                        ; preds = %if.end.5
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 46
  %11 = load i32, i32* %pixel_width, align 4
  store i32 %11, i32* %width, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 47
  %13 = load i32, i32* %pixel_height, align 4
  store i32 %13, i32* %height, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data8 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data8 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %display_info10 = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 44
  %16 = load %struct.x_display_info*, %struct.x_display_info** %display_info10, align 8
  store %struct.x_display_info* %16, %struct.x_display_info** %dpyinfo, align 8
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen11 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 26
  %18 = bitcast i48* %want_fullscreen11 to i64*
  %bf.load12 = load i64, i64* %18, align 8
  %bf.lshr13 = lshr i64 %bf.load12, 26
  %bf.clear14 = and i64 %bf.lshr13, 15
  %bf.cast15 = trunc i64 %bf.clear14 to i32
  switch i32 %bf.cast15, label %sw.default [
    i32 4, label %sw.bb
    i32 3, label %sw.bb.19
    i32 1, label %sw.bb.23
    i32 2, label %sw.bb.28
  ]

sw.bb:                                            ; preds = %if.then.7
  %call16 = call i64 @builtin_lisp_symbol(i32 648)
  store i64 %call16, i64* %lval, align 8
  %19 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call17 = call i32 @x_display_pixel_width(%struct.x_display_info* %19)
  store i32 %call17, i32* %width, align 4
  %20 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call18 = call i32 @x_display_pixel_height(%struct.x_display_info* %20)
  store i32 %call18, i32* %height, align 4
  br label %sw.epilog

sw.bb.19:                                         ; preds = %if.then.7
  %call20 = call i64 @builtin_lisp_symbol(i32 470)
  store i64 %call20, i64* %lval, align 8
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call21 = call i32 @x_display_pixel_width(%struct.x_display_info* %21)
  store i32 %call21, i32* %width, align 4
  %22 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call22 = call i32 @x_display_pixel_height(%struct.x_display_info* %22)
  store i32 %call22, i32* %height, align 4
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.then.7
  %call24 = call i64 @builtin_lisp_symbol(i32 473)
  store i64 %call24, i64* %lval, align 8
  %23 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call25 = call i32 @x_display_pixel_width(%struct.x_display_info* %23)
  store i32 %call25, i32* %width, align 4
  %24 = load i32, i32* %height, align 4
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %26 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 0
  %27 = load i32, i32* %menubar_height, align 4
  %add = add nsw i32 %24, %27
  store i32 %add, i32* %height, align 4
  br label %sw.epilog

sw.bb.28:                                         ; preds = %if.then.7
  %call29 = call i64 @builtin_lisp_symbol(i32 471)
  store i64 %call29, i64* %lval, align 8
  %28 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call30 = call i32 @x_display_pixel_height(%struct.x_display_info* %28)
  store i32 %call30, i32* %height, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.7
  call void @emacs_abort() #10
  unreachable

sw.epilog:                                        ; preds = %sw.bb.28, %sw.bb.23, %sw.bb.19, %sw.bb
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call31 = call i64 @builtin_lisp_symbol(i32 1046)
  %30 = load i32, i32* %width, align 4
  %31 = load i32, i32* %height, align 4
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  call void @frame_size_history_add(%struct.frame* %29, i64 %call31, i32 %30, i32 %31, i64 %call32)
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_size_hint(%struct.frame* %32, i64 0, i1 zeroext false)
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data33 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 62
  %x34 = bitcast %union.output_data* %output_data33 to %struct.x_output**
  %34 = load %struct.x_output*, %struct.x_output** %x34, align 8
  %display_info35 = getelementptr inbounds %struct.x_output, %struct.x_output* %34, i32 0, i32 44
  %35 = load %struct.x_display_info*, %struct.x_display_info** %display_info35, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %35, i32 0, i32 2
  %36 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data36 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x37 = bitcast %union.output_data* %output_data36 to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x37, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 12
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %39, null
  br i1 %tobool, label %cond.true, label %cond.false.53

cond.true:                                        ; preds = %sw.epilog
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data38 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 62
  %x39 = bitcast %union.output_data* %output_data38 to %struct.x_output**
  %41 = load %struct.x_output*, %struct.x_output** %x39, align 8
  %widget40 = getelementptr inbounds %struct.x_output, %struct.x_output* %41, i32 0, i32 12
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %widget40, align 8
  %tobool41 = icmp ne %struct._GtkWidget* %42, null
  br i1 %tobool41, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data42 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 62
  %x43 = bitcast %union.output_data* %output_data42 to %struct.x_output**
  %44 = load %struct.x_output*, %struct.x_output** %x43, align 8
  %widget44 = getelementptr inbounds %struct.x_output, %struct.x_output* %44, i32 0, i32 12
  %45 = load %struct._GtkWidget*, %struct._GtkWidget** %widget44, align 8
  %call45 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %45)
  %tobool46 = icmp ne %struct._GdkDrawable* %call45, null
  br i1 %tobool46, label %cond.true.47, label %cond.false

cond.true.47:                                     ; preds = %land.lhs.true
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data48 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 62
  %x49 = bitcast %union.output_data* %output_data48 to %struct.x_output**
  %47 = load %struct.x_output*, %struct.x_output** %x49, align 8
  %widget50 = getelementptr inbounds %struct.x_output, %struct.x_output* %47, i32 0, i32 12
  %48 = load %struct._GtkWidget*, %struct._GtkWidget** %widget50, align 8
  %call51 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %48)
  %call52 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call51)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.47
  %cond = phi i64 [ %call52, %cond.true.47 ], [ 0, %cond.false ]
  br label %cond.end.56

cond.false.53:                                    ; preds = %sw.epilog
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data54 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x55 = bitcast %union.output_data* %output_data54 to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x55, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 9
  %51 = load i64, i64* %window_desc, align 8
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.53, %cond.end
  %cond57 = phi i64 [ %cond, %cond.end ], [ %51, %cond.false.53 ]
  %52 = load i32, i32* %width, align 4
  %53 = load i32, i32* %height, align 4
  %call58 = call i32 @XResizeWindow(%struct._XDisplay* %36, i64 %cond57, i32 %52, i32 %53)
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 26
  %55 = bitcast i48* %visible to i64*
  %bf.load59 = load i64, i64* %55, align 8
  %bf.lshr60 = lshr i64 %bf.load59, 10
  %bf.clear61 = and i64 %bf.lshr60, 3
  %bf.cast62 = trunc i64 %bf.clear61 to i32
  %tobool63 = icmp ne i32 %bf.cast62, 0
  br i1 %tobool63, label %if.then.64, label %if.else

if.then.64:                                       ; preds = %cond.end.56
  %56 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wait_for_event(%struct.frame* %56, i32 22)
  br label %if.end.68

if.else:                                          ; preds = %cond.end.56
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %58 = load i32, i32* %width, align 4
  %59 = load i32, i32* %height, align 4
  %60 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data65 = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 62
  %x66 = bitcast %union.output_data* %output_data65 to %struct.x_output**
  %61 = load %struct.x_output*, %struct.x_output** %x66, align 8
  %menubar_height67 = getelementptr inbounds %struct.x_output, %struct.x_output* %61, i32 0, i32 0
  %62 = load i32, i32* %menubar_height67, align 4
  %sub = sub nsw i32 %59, %62
  call void @change_frame_size(%struct.frame* %57, i32 %58, i32 %sub, i1 zeroext false, i1 zeroext true, i1 zeroext false, i1 zeroext true)
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_sync(%struct.frame* %63)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else, %if.then.64
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.end.5
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call70 = call i64 @builtin_lisp_symbol(i32 472)
  %65 = load i64, i64* %lval, align 8
  call void @store_frame_param(%struct.frame* %64, i64 %call70, i64 %65)
  br label %return

return:                                           ; preds = %if.end.69, %if.then.4, %if.then
  ret void
}

declare void @record_asynch_buffer_change() #1

declare void @xg_frame_resized(%struct.frame*, i32, i32) #1

declare i32 @popup_activated() #1

declare zeroext i1 @clear_mouse_face(%struct.Mouse_HLInfo*) #1

; Function Attrs: nounwind uwtable
define internal i32 @x_emacs_to_x_modifiers(%struct.x_display_info* %dpyinfo, i64 %state) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %state.addr = alloca i64, align 8
  %mod_meta = alloca i64, align 8
  %mod_alt = alloca i64, align 8
  %mod_hyper = alloca i64, align 8
  %mod_super = alloca i64, align 8
  %tem = alloca i64, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i64 %state, i64* %state.addr, align 8
  store i64 134217728, i64* %mod_meta, align 8
  store i64 4194304, i64* %mod_alt, align 8
  store i64 16777216, i64* %mod_hyper, align 8
  store i64 8388608, i64* %mod_super, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 342), align 8
  %call = call i64 @builtin_lisp_symbol(i32 678)
  %call1 = call i64 @Fget(i64 %0, i64 %call)
  store i64 %call1, i64* %tem, align 8
  %1 = load i64, i64* %tem, align 8
  %and = and i64 %1, 7
  %conv = trunc i64 %and to i32
  %and2 = and i32 %conv, -5
  %cmp = icmp eq i32 %and2, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %tem, align 8
  %shr = ashr i64 %2, 2
  store i64 %shr, i64* %mod_alt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 350), align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 678)
  %call5 = call i64 @Fget(i64 %3, i64 %call4)
  store i64 %call5, i64* %tem, align 8
  %4 = load i64, i64* %tem, align 8
  %and6 = and i64 %4, 7
  %conv7 = trunc i64 %and6 to i32
  %and8 = and i32 %conv7, -5
  %cmp9 = icmp eq i32 %and8, 2
  br i1 %cmp9, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %if.end
  %5 = load i64, i64* %tem, align 8
  %shr12 = ashr i64 %5, 2
  store i64 %shr12, i64* %mod_meta, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.11, %if.end
  %6 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 346), align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 678)
  %call15 = call i64 @Fget(i64 %6, i64 %call14)
  store i64 %call15, i64* %tem, align 8
  %7 = load i64, i64* %tem, align 8
  %and16 = and i64 %7, 7
  %conv17 = trunc i64 %and16 to i32
  %and18 = and i32 %conv17, -5
  %cmp19 = icmp eq i32 %and18, 2
  br i1 %cmp19, label %if.then.21, label %if.end.23

if.then.21:                                       ; preds = %if.end.13
  %8 = load i64, i64* %tem, align 8
  %shr22 = ashr i64 %8, 2
  store i64 %shr22, i64* %mod_hyper, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.21, %if.end.13
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 363), align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 678)
  %call25 = call i64 @Fget(i64 %9, i64 %call24)
  store i64 %call25, i64* %tem, align 8
  %10 = load i64, i64* %tem, align 8
  %and26 = and i64 %10, 7
  %conv27 = trunc i64 %and26 to i32
  %and28 = and i32 %conv27, -5
  %cmp29 = icmp eq i32 %and28, 2
  br i1 %cmp29, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.end.23
  %11 = load i64, i64* %tem, align 8
  %shr32 = ashr i64 %11, 2
  store i64 %shr32, i64* %mod_super, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %if.end.23
  %12 = load i64, i64* %state.addr, align 8
  %13 = load i64, i64* %mod_alt, align 8
  %and34 = and i64 %12, %13
  %tobool = icmp ne i64 %and34, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.33
  %14 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %alt_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 34
  %15 = load i32, i32* %alt_mod_mask, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.33
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %15, %cond.true ], [ 0, %cond.false ]
  %16 = load i64, i64* %state.addr, align 8
  %17 = load i64, i64* %mod_super, align 8
  %and35 = and i64 %16, %17
  %tobool36 = icmp ne i64 %and35, 0
  br i1 %tobool36, label %cond.true.37, label %cond.false.38

cond.true.37:                                     ; preds = %cond.end
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %super_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %18, i32 0, i32 35
  %19 = load i32, i32* %super_mod_mask, align 4
  br label %cond.end.39

cond.false.38:                                    ; preds = %cond.end
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.38, %cond.true.37
  %cond40 = phi i32 [ %19, %cond.true.37 ], [ 0, %cond.false.38 ]
  %or = or i32 %cond, %cond40
  %20 = load i64, i64* %state.addr, align 8
  %21 = load i64, i64* %mod_hyper, align 8
  %and41 = and i64 %20, %21
  %tobool42 = icmp ne i64 %and41, 0
  br i1 %tobool42, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %cond.end.39
  %22 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %hyper_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 36
  %23 = load i32, i32* %hyper_mod_mask, align 4
  br label %cond.end.45

cond.false.44:                                    ; preds = %cond.end.39
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.44, %cond.true.43
  %cond46 = phi i32 [ %23, %cond.true.43 ], [ 0, %cond.false.44 ]
  %or47 = or i32 %or, %cond46
  %24 = load i64, i64* %state.addr, align 8
  %and48 = and i64 %24, 33554432
  %tobool49 = icmp ne i64 %and48, 0
  %cond50 = select i1 %tobool49, i32 1, i32 0
  %or51 = or i32 %or47, %cond50
  %25 = load i64, i64* %state.addr, align 8
  %and52 = and i64 %25, 67108864
  %tobool53 = icmp ne i64 %and52, 0
  %cond54 = select i1 %tobool53, i32 4, i32 0
  %or55 = or i32 %or51, %cond54
  %26 = load i64, i64* %state.addr, align 8
  %27 = load i64, i64* %mod_meta, align 8
  %and56 = and i64 %26, %27
  %tobool57 = icmp ne i64 %and56, 0
  br i1 %tobool57, label %cond.true.58, label %cond.false.59

cond.true.58:                                     ; preds = %cond.end.45
  %28 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %meta_mod_mask = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 32
  %29 = load i32, i32* %meta_mod_mask, align 4
  br label %cond.end.60

cond.false.59:                                    ; preds = %cond.end.45
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.59, %cond.true.58
  %cond61 = phi i32 [ %29, %cond.true.58 ], [ 0, %cond.false.59 ]
  %or62 = or i32 %or55, %cond61
  ret i32 %or62
}

declare i32 @XmbLookupString(%struct._XIC*, %struct.XKeyEvent*, i8*, i32, i64*, i32*) #1

declare i32 @XLookupString(%struct.XKeyEvent*, i8*, i32, i64*, %struct._XComposeStatus*) #1

declare zeroext i1 @HASH_TABLE_P(i64) #1

declare i64 @Fgethash(i64, i64, i64) #1

declare zeroext i1 @NATNUMP(i64) #1

declare void @setup_coding_system(i64, %struct.coding_system*) #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

declare void @decode_coding_object(%struct.coding_system*, i64, i64, i64, i64, i64, i64) #1

declare i32 @string_char(i8*, i8**, i32*) #1

declare void @kbd_buffer_store_buffered_event(%union.buffered_input_event*, %struct.input_event*) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @note_mouse_movement(%struct.frame* %frame, %struct.XMotionEvent* %event) #0 {
entry:
  %retval = alloca i1, align 1
  %frame.addr = alloca %struct.frame*, align 8
  %event.addr = alloca %struct.XMotionEvent*, align 8
  %r = alloca %struct.XRectangle*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  store %struct.XMotionEvent* %event, %struct.XMotionEvent** %event.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %tobool = icmp ne %struct.x_output* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 44
  %4 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %4, %struct.x_display_info** %dpyinfo, align 8
  %5 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %time = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %5, i32 0, i32 7
  %6 = load i64, i64* %time, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_movement_time = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 83
  store i64 %6, i64* %last_mouse_movement_time, align 8
  %8 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_motion_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 77
  store %struct.frame* %8, %struct.frame** %last_mouse_motion_frame, align 8
  %10 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %x3 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %10, i32 0, i32 8
  %11 = load i32, i32* %x3, align 4
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_motion_x = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 80
  store i32 %11, i32* %last_mouse_motion_x, align 4
  %13 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %y = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %13, i32 0, i32 9
  %14 = load i32, i32* %y, align 4
  %15 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_motion_y = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 81
  store i32 %14, i32* %last_mouse_motion_y, align 4
  %16 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %window = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %16, i32 0, i32 4
  %17 = load i64, i64* %window, align 8
  %18 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 9
  %20 = load i64, i64* %window_desc, align 8
  %cmp = icmp ne i64 %17, %20
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %21 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %mouse_moved to i64*
  %bf.load = load i64, i64* %22, align 8
  %bf.clear = and i64 %bf.load, -1048577
  %bf.set = or i64 %bf.clear, 1048576
  store i64 %bf.set, i64* %22, align 8
  %23 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %23, i32 0, i32 78
  store %struct.scroll_bar* null, %struct.scroll_bar** %last_mouse_scroll_bar, align 8
  %24 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  call void @note_mouse_highlight(%struct.frame* %24, i32 -1, i32 -1)
  %25 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_glyph_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %25, i32 0, i32 76
  store %struct.frame* null, %struct.frame** %last_mouse_glyph_frame, align 8
  store i1 true, i1* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %26 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_glyph = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 82
  store %struct.XRectangle* %last_mouse_glyph, %struct.XRectangle** %r, align 8
  %27 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %28 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_glyph_frame8 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %28, i32 0, i32 76
  %29 = load %struct.frame*, %struct.frame** %last_mouse_glyph_frame8, align 8
  %cmp9 = icmp ne %struct.frame* %27, %29
  br i1 %cmp9, label %if.then.35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.7
  %30 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %x10 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %30, i32 0, i32 8
  %31 = load i32, i32* %x10, align 4
  %32 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %x11 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %32, i32 0, i32 0
  %33 = load i16, i16* %x11, align 2
  %conv = sext i16 %33 to i32
  %cmp12 = icmp slt i32 %31, %conv
  br i1 %cmp12, label %if.then.35, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %lor.lhs.false
  %34 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %x15 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %34, i32 0, i32 8
  %35 = load i32, i32* %x15, align 4
  %36 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %x16 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %36, i32 0, i32 0
  %37 = load i16, i16* %x16, align 2
  %conv17 = sext i16 %37 to i32
  %38 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %width = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %38, i32 0, i32 2
  %39 = load i16, i16* %width, align 2
  %conv18 = zext i16 %39 to i32
  %add = add nsw i32 %conv17, %conv18
  %cmp19 = icmp sge i32 %35, %add
  br i1 %cmp19, label %if.then.35, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %lor.lhs.false.14
  %40 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %y22 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %40, i32 0, i32 9
  %41 = load i32, i32* %y22, align 4
  %42 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %y23 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %42, i32 0, i32 1
  %43 = load i16, i16* %y23, align 2
  %conv24 = sext i16 %43 to i32
  %cmp25 = icmp slt i32 %41, %conv24
  br i1 %cmp25, label %if.then.35, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %lor.lhs.false.21
  %44 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %y28 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %44, i32 0, i32 9
  %45 = load i32, i32* %y28, align 4
  %46 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %y29 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %46, i32 0, i32 1
  %47 = load i16, i16* %y29, align 2
  %conv30 = sext i16 %47 to i32
  %48 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %height = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %48, i32 0, i32 3
  %49 = load i16, i16* %height, align 2
  %conv31 = zext i16 %49 to i32
  %add32 = add nsw i32 %conv30, %conv31
  %cmp33 = icmp sge i32 %45, %add32
  br i1 %cmp33, label %if.then.35, label %if.end.46

if.then.35:                                       ; preds = %lor.lhs.false.27, %lor.lhs.false.21, %lor.lhs.false.14, %lor.lhs.false, %if.end.7
  %50 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %mouse_moved36 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 26
  %51 = bitcast i48* %mouse_moved36 to i64*
  %bf.load37 = load i64, i64* %51, align 8
  %bf.clear38 = and i64 %bf.load37, -1048577
  %bf.set39 = or i64 %bf.clear38, 1048576
  store i64 %bf.set39, i64* %51, align 8
  %52 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar40 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %52, i32 0, i32 78
  store %struct.scroll_bar* null, %struct.scroll_bar** %last_mouse_scroll_bar40, align 8
  %53 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %54 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %x41 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %54, i32 0, i32 8
  %55 = load i32, i32* %x41, align 4
  %56 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %y42 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %56, i32 0, i32 9
  %57 = load i32, i32* %y42, align 4
  call void @note_mouse_highlight(%struct.frame* %53, i32 %55, i32 %57)
  %58 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %59 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %x43 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %59, i32 0, i32 8
  %60 = load i32, i32* %x43, align 4
  %61 = load %struct.XMotionEvent*, %struct.XMotionEvent** %event.addr, align 8
  %y44 = getelementptr inbounds %struct.XMotionEvent, %struct.XMotionEvent* %61, i32 0, i32 9
  %62 = load i32, i32* %y44, align 4
  %63 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  call void @remember_mouse_glyph(%struct.frame* %58, i32 %60, i32 %62, %struct.XRectangle* %63)
  %64 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %65 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_glyph_frame45 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %65, i32 0, i32 76
  store %struct.frame* %64, %struct.frame** %last_mouse_glyph_frame45, align 8
  store i1 true, i1* %retval
  br label %return

if.end.46:                                        ; preds = %lor.lhs.false.27
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %if.end.46, %if.then.35, %if.then.6, %if.then
  %66 = load i1, i1* %retval
  ret i1 %66
}

declare zeroext i1 @x_mouse_grabbed(%struct.x_display_info*) #1

declare zeroext i1 @xg_event_is_for_scrollbar(%struct.frame*, %union._XEvent*) #1

declare i64 @window_from_coordinates(%struct.frame*, i32, i32, i32*, i1 zeroext) #1

declare zeroext i1 @WINDOWP(i64) #1

declare i32 @XPutBackEvent(%struct._XDisplay*, %union._XEvent*) #1

; Function Attrs: nounwind uwtable
define internal void @x_net_wm_state(%struct.frame* %f, i64 %window) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %window.addr = alloca i64, align 8
  %value = alloca i32, align 4
  %lval = alloca i64, align 8
  %sticky = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  store i32 0, i32* %value, align 4
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %lval, align 8
  store i8 0, i8* %sticky, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i64, i64* %window.addr, align 8
  %call1 = call zeroext i1 @get_current_wm_state(%struct.frame* %0, i64 %1, i32* %value, i8* %sticky)
  %2 = load i32, i32* %value, align 4
  switch i32 %2, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.3
    i32 3, label %sw.bb.5
    i32 4, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 473)
  store i64 %call2, i64* %lval, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 471)
  store i64 %call4, i64* %lval, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %entry
  %call6 = call i64 @builtin_lisp_symbol(i32 470)
  store i64 %call6, i64* %lval, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  %call8 = call i64 @builtin_lisp_symbol(i32 648)
  store i64 %call8, i64* %lval, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.7, %sw.bb.5, %sw.bb.3, %sw.bb
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 1053)
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 472)
  %call11 = call i64 @get_frame_param(%struct.frame* %4, i64 %call10)
  %5 = load i64, i64* %lval, align 8
  %call12 = call i64 @list2(i64 %call11, i64 %5)
  call void @frame_size_history_add(%struct.frame* %3, i64 %call9, i32 0, i32 0, i64 %call12)
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 472)
  %7 = load i64, i64* %lval, align 8
  call void @store_frame_param(%struct.frame* %6, i64 %call13, i64 %7)
  ret void
}

declare i32 @gtk_widget_get_mapped(%struct._GtkWidget*) #1

declare void @xic_set_statusarea(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define internal i64 @construct_mouse_click(%struct.input_event* %result, %struct.XButtonEvent* %event, %struct.frame* %f) #0 {
entry:
  %result.addr = alloca %struct.input_event*, align 8
  %event.addr = alloca %struct.XButtonEvent*, align 8
  %f.addr = alloca %struct.frame*, align 8
  store %struct.input_event* %result, %struct.input_event** %result.addr, align 8
  store %struct.XButtonEvent* %event, %struct.XButtonEvent** %event.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %1 = bitcast %struct.input_event* %0 to i32*
  %bf.load = load i32, i32* %1, align 8
  %bf.clear = and i32 %bf.load, -65536
  %bf.set = or i32 %bf.clear, 5
  store i32 %bf.set, i32* %1, align 8
  %2 = load %struct.XButtonEvent*, %struct.XButtonEvent** %event.addr, align 8
  %button = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %2, i32 0, i32 13
  %3 = load i32, i32* %button, align 4
  %sub = sub i32 %3, 1
  %4 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %code = getelementptr inbounds %struct.input_event, %struct.input_event* %4, i32 0, i32 1
  store i32 %sub, i32* %code, align 4
  %5 = load %struct.XButtonEvent*, %struct.XButtonEvent** %event.addr, align 8
  %time = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %5, i32 0, i32 7
  %6 = load i64, i64* %time, align 8
  %7 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %timestamp = getelementptr inbounds %struct.input_event, %struct.input_event* %7, i32 0, i32 5
  store i64 %6, i64* %timestamp, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 44
  %10 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %11 = load %struct.XButtonEvent*, %struct.XButtonEvent** %event.addr, align 8
  %state = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %11, i32 0, i32 12
  %12 = load i32, i32* %state, align 4
  %call = call i32 @x_x_to_emacs_modifiers(%struct.x_display_info* %10, i32 %12)
  %13 = load %struct.XButtonEvent*, %struct.XButtonEvent** %event.addr, align 8
  %type = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %13, i32 0, i32 0
  %14 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %14, 5
  %cond = select i1 %cmp, i32 1, i32 2
  %or = or i32 %call, %cond
  %15 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %modifiers = getelementptr inbounds %struct.input_event, %struct.input_event* %15, i32 0, i32 2
  store i32 %or, i32* %modifiers, align 4
  %16 = load %struct.XButtonEvent*, %struct.XButtonEvent** %event.addr, align 8
  %x1 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %16, i32 0, i32 8
  %17 = load i32, i32* %x1, align 4
  %conv = sext i32 %17 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %18 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %x2 = getelementptr inbounds %struct.input_event, %struct.input_event* %18, i32 0, i32 3
  store i64 %add, i64* %x2, align 8
  %19 = load %struct.XButtonEvent*, %struct.XButtonEvent** %event.addr, align 8
  %y = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %19, i32 0, i32 9
  %20 = load i32, i32* %y, align 4
  %conv3 = sext i32 %20 to i64
  %shl4 = shl i64 %conv3, 2
  %add5 = add i64 %shl4, 2
  %21 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %y6 = getelementptr inbounds %struct.input_event, %struct.input_event* %21, i32 0, i32 4
  store i64 %add5, i64* %y6, align 8
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %23 = bitcast %struct.frame* %22 to i8*
  %call7 = call i64 @make_lisp_ptr(i8* %23, i32 5)
  %24 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %24, i32 0, i32 6
  store i64 %call7, i64* %frame_or_window, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %25 = load %struct.input_event*, %struct.input_event** %result.addr, align 8
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %25, i32 0, i32 7
  store i64 %call8, i64* %arg, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call9
}

; Function Attrs: nounwind uwtable
define internal %struct.scroll_bar* @x_window_to_scroll_bar(%struct._XDisplay* %display, i64 %window_id, i32 %type) #0 {
entry:
  %retval = alloca %struct.scroll_bar*, align 8
  %display.addr = alloca %struct._XDisplay*, align 8
  %window_id.addr = alloca i64, align 8
  %type.addr = alloca i32, align 4
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %bar = alloca i64, align 8
  %condemned = alloca i64, align 8
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  store i64 %window_id, i64* %window_id.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %1 = load i64, i64* %window_id.addr, align 8
  %call = call i64 @xg_get_scroll_id_for_window(%struct._XDisplay* %0, i64 %1)
  store i64 %call, i64* %window_id.addr, align 8
  %2 = load i64, i64* @Vframe_list, align 8
  store i64 %2, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.28, %entry
  %3 = load i64, i64* %tail, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %4 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %4, 3
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %6, i32 0, i32 0
  %7 = load i64, i64* %car, align 8
  store i64 %7, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %8, label %for.body, label %for.end.30

for.body:                                         ; preds = %land.end
  %9 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub2 to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %12, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp3 = icmp eq i32 %bf.cast, 2
  br i1 %cmp3, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc.28

if.end:                                           ; preds = %for.body
  %13 = load i64, i64* %frame, align 8
  %sub5 = sub nsw i64 %13, 5
  %14 = inttoptr i64 %sub5 to i8*
  %15 = bitcast i8* %14 to %struct.frame*
  %condemned_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 10
  %16 = load i64, i64* %condemned_scroll_bars, align 8
  store i64 %16, i64* %condemned, align 8
  %17 = load i64, i64* %frame, align 8
  %sub6 = sub nsw i64 %17, 5
  %18 = inttoptr i64 %sub6 to i8*
  %19 = bitcast i8* %18 to %struct.frame*
  %scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 9
  %20 = load i64, i64* %scroll_bars, align 8
  store i64 %20, i64* %bar, align 8
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc, %if.end
  %21 = load i64, i64* %bar, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp9 = icmp eq i64 %21, %call8
  br i1 %cmp9, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %for.cond.7
  %22 = load i64, i64* %condemned, align 8
  store i64 %22, i64* %bar, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call11, i64* %condemned, align 8
  %23 = load i64, i64* %bar, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp13 = icmp eq i64 %23, %call12
  %lnot = xor i1 %cmp13, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %for.cond.7
  %24 = phi i1 [ true, %for.cond.7 ], [ %lnot, %lor.rhs ]
  br i1 %24, label %for.body.15, label %for.end

for.body.15:                                      ; preds = %lor.end
  %25 = load i64, i64* %bar, align 8
  %call16 = call %struct.Lisp_Vector* @XVECTOR(i64 %25)
  %26 = bitcast %struct.Lisp_Vector* %call16 to %struct.scroll_bar*
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %26, i32 0, i32 4
  %27 = load i64, i64* %x_window, align 8
  %28 = load i64, i64* %window_id.addr, align 8
  %cmp17 = icmp eq i64 %27, %28
  br i1 %cmp17, label %land.lhs.true, label %if.end.26

land.lhs.true:                                    ; preds = %for.body.15
  %29 = load i64, i64* %frame, align 8
  %sub19 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub19 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 44
  %33 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display20 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %33, i32 0, i32 2
  %34 = load %struct._XDisplay*, %struct._XDisplay** %display20, align 8
  %35 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %cmp21 = icmp eq %struct._XDisplay* %34, %35
  br i1 %cmp21, label %land.lhs.true.23, label %if.end.26

land.lhs.true.23:                                 ; preds = %land.lhs.true
  store i32 1, i32* %type.addr, align 4
  br i1 true, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %land.lhs.true.23
  %36 = load i64, i64* %bar, align 8
  %call25 = call %struct.Lisp_Vector* @XVECTOR(i64 %36)
  %37 = bitcast %struct.Lisp_Vector* %call25 to %struct.scroll_bar*
  store %struct.scroll_bar* %37, %struct.scroll_bar** %retval
  br label %return

if.end.26:                                        ; preds = %land.lhs.true.23, %land.lhs.true, %for.body.15
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %38 = load i64, i64* %bar, align 8
  %call27 = call %struct.Lisp_Vector* @XVECTOR(i64 %38)
  %39 = bitcast %struct.Lisp_Vector* %call27 to %struct.scroll_bar*
  %next = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %39, i32 0, i32 2
  %40 = load i64, i64* %next, align 8
  store i64 %40, i64* %bar, align 8
  br label %for.cond.7

for.end:                                          ; preds = %lor.end
  br label %for.inc.28

for.inc.28:                                       ; preds = %for.end, %if.then
  %41 = load i64, i64* %tail, align 8
  %sub29 = sub nsw i64 %41, 3
  %42 = inttoptr i64 %sub29 to i8*
  %43 = bitcast i8* %42 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %43, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %44 = load i64, i64* %cdr, align 8
  store i64 %44, i64* %tail, align 8
  br label %for.cond

for.end.30:                                       ; preds = %land.end
  store %struct.scroll_bar* null, %struct.scroll_bar** %retval
  br label %return

return:                                           ; preds = %for.end.30, %if.then.24
  %45 = load %struct.scroll_bar*, %struct.scroll_bar** %retval
  ret %struct.scroll_bar* %45
}

; Function Attrs: nounwind uwtable
define internal void @x_scroll_bar_handle_click(%struct.scroll_bar* %bar, %union._XEvent* %event, %struct.input_event* %emacs_event) #0 {
entry:
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %event.addr = alloca %union._XEvent*, align 8
  %emacs_event.addr = alloca %struct.input_event*, align 8
  %left_range = alloca i32, align 4
  %x16 = alloca i32, align 4
  %top_range = alloca i32, align 4
  %y51 = alloca i32, align 4
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  store %struct.input_event* %emacs_event, %struct.input_event** %emacs_event.addr, align 8
  %0 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %0, i32 0, i32 1
  %1 = load i64, i64* %window, align 8
  %call = call zeroext i1 @WINDOWP(i64 %1)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @emacs_abort() #10
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %horizontal = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %2, i32 0, i32 12
  %3 = load i8, i8* %horizontal, align 1
  %tobool = trunc i8 %3 to i1
  %cond = select i1 %tobool, i32 9, i32 8
  %4 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %5 = bitcast %struct.input_event* %4 to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.value = and i32 %cond, 65535
  %bf.clear = and i32 %bf.load, -65536
  %bf.set = or i32 %bf.clear, %bf.value
  store i32 %bf.set, i32* %5, align 8
  %6 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton = bitcast %union._XEvent* %6 to %struct.XButtonEvent*
  %button = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton, i32 0, i32 13
  %7 = load i32, i32* %button, align 4
  %sub = sub i32 %7, 1
  %8 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %code = getelementptr inbounds %struct.input_event, %struct.input_event* %8, i32 0, i32 1
  store i32 %sub, i32* %code, align 4
  %9 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window1 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %9, i32 0, i32 1
  %10 = load i64, i64* %window1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %10)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call2, i32 0, i32 1
  %11 = load i64, i64* %frame, align 8
  %sub3 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub3 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 44
  %15 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %16 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton4 = bitcast %union._XEvent* %16 to %struct.XButtonEvent*
  %state = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton4, i32 0, i32 12
  %17 = load i32, i32* %state, align 4
  %call5 = call i32 @x_x_to_emacs_modifiers(%struct.x_display_info* %15, i32 %17)
  %18 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type = bitcast %union._XEvent* %18 to i32*
  %19 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %19, 5
  %cond6 = select i1 %cmp, i32 1, i32 2
  %or = or i32 %call5, %cond6
  %20 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %modifiers = getelementptr inbounds %struct.input_event, %struct.input_event* %20, i32 0, i32 2
  store i32 %or, i32* %modifiers, align 4
  %21 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window7 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %21, i32 0, i32 1
  %22 = load i64, i64* %window7, align 8
  %23 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %23, i32 0, i32 6
  store i64 %22, i64* %frame_or_window, align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 0)
  %24 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %24, i32 0, i32 7
  store i64 %call8, i64* %arg, align 8
  %25 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton9 = bitcast %union._XEvent* %25 to %struct.XButtonEvent*
  %time = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton9, i32 0, i32 7
  %26 = load i64, i64* %time, align 8
  %27 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %timestamp = getelementptr inbounds %struct.input_event, %struct.input_event* %27, i32 0, i32 5
  store i64 %26, i64* %timestamp, align 8
  %28 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %horizontal10 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %28, i32 0, i32 12
  %29 = load i8, i8* %horizontal10, align 1
  %tobool11 = trunc i8 %29 to i1
  br i1 %tobool11, label %if.then.12, label %if.else.47

if.then.12:                                       ; preds = %if.end
  %30 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %width = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %30, i32 0, i32 7
  %31 = load i32, i32* %width, align 4
  %sub13 = sub nsw i32 %31, 2
  %sub14 = sub nsw i32 %sub13, 2
  %sub15 = sub nsw i32 %sub14, 5
  store i32 %sub15, i32* %left_range, align 4
  %32 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton17 = bitcast %union._XEvent* %32 to %struct.XButtonEvent*
  %x18 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton17, i32 0, i32 8
  %33 = load i32, i32* %x18, align 4
  %sub19 = sub nsw i32 %33, 2
  store i32 %sub19, i32* %x16, align 4
  %34 = load i32, i32* %x16, align 4
  %cmp20 = icmp slt i32 %34, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.then.12
  store i32 0, i32* %x16, align 4
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %if.then.12
  %35 = load i32, i32* %x16, align 4
  %36 = load i32, i32* %left_range, align 4
  %cmp23 = icmp sgt i32 %35, %36
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.22
  %37 = load i32, i32* %left_range, align 4
  store i32 %37, i32* %x16, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %if.end.22
  %38 = load i32, i32* %x16, align 4
  %39 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %start = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %39, i32 0, i32 9
  %40 = load i32, i32* %start, align 4
  %cmp26 = icmp slt i32 %38, %40
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %if.end.25
  %41 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %42 = bitcast %struct.input_event* %41 to i32*
  %bf.load28 = load i32, i32* %42, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %bf.set30 = or i32 %bf.clear29, 655360
  store i32 %bf.set30, i32* %42, align 8
  br label %if.end.41

if.else:                                          ; preds = %if.end.25
  %43 = load i32, i32* %x16, align 4
  %44 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %end = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %44, i32 0, i32 10
  %45 = load i32, i32* %end, align 4
  %add = add nsw i32 %45, 5
  %cmp31 = icmp slt i32 %43, %add
  br i1 %cmp31, label %if.then.32, label %if.else.36

if.then.32:                                       ; preds = %if.else
  %46 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %47 = bitcast %struct.input_event* %46 to i32*
  %bf.load33 = load i32, i32* %47, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %bf.set35 = or i32 %bf.clear34, 720896
  store i32 %bf.set35, i32* %47, align 8
  br label %if.end.40

if.else.36:                                       ; preds = %if.else
  %48 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %49 = bitcast %struct.input_event* %48 to i32*
  %bf.load37 = load i32, i32* %49, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %bf.set39 = or i32 %bf.clear38, 786432
  store i32 %bf.set39, i32* %49, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.36, %if.then.32
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.27
  %50 = load i32, i32* %left_range, align 4
  %conv = sext i32 %50 to i64
  %shl = shl i64 %conv, 2
  %add42 = add i64 %shl, 2
  %51 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %x43 = getelementptr inbounds %struct.input_event, %struct.input_event* %51, i32 0, i32 3
  store i64 %add42, i64* %x43, align 8
  %52 = load i32, i32* %x16, align 4
  %conv44 = sext i32 %52 to i64
  %shl45 = shl i64 %conv44, 2
  %add46 = add i64 %shl45, 2
  %53 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %y = getelementptr inbounds %struct.input_event, %struct.input_event* %53, i32 0, i32 4
  store i64 %add46, i64* %y, align 8
  br label %if.end.93

if.else.47:                                       ; preds = %if.end
  %54 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %height = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %54, i32 0, i32 8
  %55 = load i32, i32* %height, align 4
  %sub48 = sub nsw i32 %55, 2
  %sub49 = sub nsw i32 %sub48, 2
  %sub50 = sub nsw i32 %sub49, 5
  store i32 %sub50, i32* %top_range, align 4
  %56 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton52 = bitcast %union._XEvent* %56 to %struct.XButtonEvent*
  %y53 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton52, i32 0, i32 9
  %57 = load i32, i32* %y53, align 4
  %sub54 = sub nsw i32 %57, 2
  store i32 %sub54, i32* %y51, align 4
  %58 = load i32, i32* %y51, align 4
  %cmp55 = icmp slt i32 %58, 0
  br i1 %cmp55, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.else.47
  store i32 0, i32* %y51, align 4
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.57, %if.else.47
  %59 = load i32, i32* %y51, align 4
  %60 = load i32, i32* %top_range, align 4
  %cmp59 = icmp sgt i32 %59, %60
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.end.58
  %61 = load i32, i32* %top_range, align 4
  store i32 %61, i32* %y51, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.61, %if.end.58
  %62 = load i32, i32* %y51, align 4
  %63 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %start63 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %63, i32 0, i32 9
  %64 = load i32, i32* %start63, align 4
  %cmp64 = icmp slt i32 %62, %64
  br i1 %cmp64, label %if.then.66, label %if.else.70

if.then.66:                                       ; preds = %if.end.62
  %65 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %66 = bitcast %struct.input_event* %65 to i32*
  %bf.load67 = load i32, i32* %66, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %bf.set69 = or i32 %bf.clear68, 65536
  store i32 %bf.set69, i32* %66, align 8
  br label %if.end.84

if.else.70:                                       ; preds = %if.end.62
  %67 = load i32, i32* %y51, align 4
  %68 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %end71 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %68, i32 0, i32 10
  %69 = load i32, i32* %end71, align 4
  %add72 = add nsw i32 %69, 5
  %cmp73 = icmp slt i32 %67, %add72
  br i1 %cmp73, label %if.then.75, label %if.else.79

if.then.75:                                       ; preds = %if.else.70
  %70 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %71 = bitcast %struct.input_event* %70 to i32*
  %bf.load76 = load i32, i32* %71, align 8
  %bf.clear77 = and i32 %bf.load76, 65535
  %bf.set78 = or i32 %bf.clear77, 131072
  store i32 %bf.set78, i32* %71, align 8
  br label %if.end.83

if.else.79:                                       ; preds = %if.else.70
  %72 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %73 = bitcast %struct.input_event* %72 to i32*
  %bf.load80 = load i32, i32* %73, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %bf.set82 = or i32 %bf.clear81, 196608
  store i32 %bf.set82, i32* %73, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.79, %if.then.75
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.then.66
  %74 = load i32, i32* %y51, align 4
  %conv85 = sext i32 %74 to i64
  %shl86 = shl i64 %conv85, 2
  %add87 = add i64 %shl86, 2
  %75 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %x88 = getelementptr inbounds %struct.input_event, %struct.input_event* %75, i32 0, i32 3
  store i64 %add87, i64* %x88, align 8
  %76 = load i32, i32* %top_range, align 4
  %conv89 = sext i32 %76 to i64
  %shl90 = shl i64 %conv89, 2
  %add91 = add i64 %shl90, 2
  %77 = load %struct.input_event*, %struct.input_event** %emacs_event.addr, align 8
  %y92 = getelementptr inbounds %struct.input_event, %struct.input_event* %77, i32 0, i32 4
  store i64 %add91, i64* %y92, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.84, %if.end.41
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct.frame* @x_menubar_window_to_frame(%struct.x_display_info* %dpyinfo, %union._XEvent* %event) #0 {
entry:
  %retval = alloca %struct.frame*, align 8
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %event.addr = alloca %union._XEvent*, align 8
  %wdesc = alloca i64, align 8
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  %0 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xany = bitcast %union._XEvent* %0 to %struct.XAnyEvent*
  %window = getelementptr inbounds %struct.XAnyEvent, %struct.XAnyEvent* %xany, i32 0, i32 4
  %1 = load i64, i64* %window, align 8
  store i64 %1, i64* %wdesc, align 8
  %2 = load i64, i64* %wdesc, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.frame* null, %struct.frame** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* @Vframe_list, align 8
  store i64 %3, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i64, i64* %tail, align 8
  %and = and i64 %4, 7
  %conv = trunc i64 %and to i32
  %cmp1 = icmp eq i32 %conv, 3
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %5, 3
  %6 = inttoptr i64 %sub to i8*
  %7 = bitcast i8* %6 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %7, i32 0, i32 0
  %8 = load i64, i64* %car, align 8
  store i64 %8, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load i64, i64* %frame, align 8
  %sub3 = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub3 to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  store %struct.frame* %12, %struct.frame** %f, align 8
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %14, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp4 = icmp eq i32 %bf.cast, 2
  br i1 %cmp4, label %lor.lhs.false, label %if.then.9

lor.lhs.false:                                    ; preds = %for.body
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 44
  %17 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %cmp7 = icmp ne %struct.x_display_info* %17, %18
  br i1 %cmp7, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %lor.lhs.false, %for.body
  br label %for.inc

if.end.10:                                        ; preds = %lor.lhs.false
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x12, align 8
  store %struct.x_output* %20, %struct.x_output** %x, align 8
  %21 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %21, i32 0, i32 16
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %22, null
  br i1 %tobool, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.end.10
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %24 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %call = call zeroext i1 @xg_event_is_for_menubar(%struct.frame* %23, %union._XEvent* %24)
  br i1 %call, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %land.lhs.true
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  store %struct.frame* %25, %struct.frame** %retval
  br label %return

if.end.15:                                        ; preds = %land.lhs.true, %if.end.10
  br label %for.inc

for.inc:                                          ; preds = %if.end.15, %if.then.9
  %26 = load i64, i64* %tail, align 8
  %sub16 = sub nsw i64 %26, 3
  %27 = inttoptr i64 %sub16 to i8*
  %28 = bitcast i8* %27 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %28, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %29 = load i64, i64* %cdr, align 8
  store i64 %29, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  store %struct.frame* null, %struct.frame** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.14, %if.then
  %30 = load %struct.frame*, %struct.frame** %retval
  ret %struct.frame* %30
}

declare i32 @XRefreshKeyboardMapping(%struct.XMappingEvent*) #1

declare void @gen_help_event(i64, i64, i64, i64, i64) #1

declare i64 @unbind_to(i64, i64) #1

declare %struct._GtkWidget* @gtk_widget_get_toplevel(%struct._GtkWidget*) #1

; Function Attrs: nounwind uwtable
define internal void @x_focus_changed(i32 %type, i32 %state, %struct.x_display_info* %dpyinfo, %struct.frame* %frame, %struct.input_event* %bufp) #0 {
entry:
  %type.addr = alloca i32, align 4
  %state.addr = alloca i32, align 4
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %frame.addr = alloca %struct.frame*, align 8
  %bufp.addr = alloca %struct.input_event*, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %state, i32* %state.addr, align 4
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  store %struct.input_event* %bufp, %struct.input_event** %bufp.addr, align 8
  %0 = load i32, i32* %type.addr, align 4
  %cmp = icmp eq i32 %0, 9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_event_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %1, i32 0, i32 72
  %2 = load %struct.frame*, %struct.frame** %x_focus_event_frame, align 8
  %3 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %cmp1 = icmp ne %struct.frame* %2, %3
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %5 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  call void @x_new_focus_frame(%struct.x_display_info* %4, %struct.frame* %5)
  %6 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_event_frame3 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 72
  store %struct.frame* %6, %struct.frame** %x_focus_event_frame3, align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 290), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %8, %call
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.2
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 290), align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %12, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp5 = icmp eq i32 %bf.cast, 2
  br i1 %cmp5, label %lor.lhs.false.6, label %land.lhs.true

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %call7 = call i64 @Fdaemonp()
  %call8 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp9 = icmp eq i64 %call7, %call8
  br i1 %cmp9, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false.6, %lor.lhs.false, %if.then.2
  %13 = load i64, i64* @Vframe_list, align 8
  %and = and i64 %13, 7
  %conv = trunc i64 %and to i32
  %cmp10 = icmp eq i32 %conv, 3
  br i1 %cmp10, label %land.lhs.true.12, label %cond.false

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %14 = load i64, i64* @Vframe_list, align 8
  %sub13 = sub nsw i64 %14, 3
  %15 = inttoptr i64 %sub13 to i8*
  %16 = bitcast i8* %15 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %16, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %17 = load i64, i64* %cdr, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %17, %call14
  br i1 %cmp15, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true.12
  %call17 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.12, %land.lhs.true, %lor.lhs.false.6
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call17, %cond.true ], [ %call18, %cond.false ]
  %18 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %18, i32 0, i32 7
  store i64 %cond, i64* %arg, align 8
  %19 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  %20 = bitcast %struct.input_event* %19 to i32*
  %bf.load19 = load i32, i32* %20, align 8
  %bf.clear20 = and i32 %bf.load19, -65536
  %bf.set = or i32 %bf.clear20, 22
  store i32 %bf.set, i32* %20, align 8
  %21 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %22 = bitcast %struct.frame* %21 to i8*
  %call21 = call i64 @make_lisp_ptr(i8* %22, i32 5)
  %23 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %23, i32 0, i32 6
  store i64 %call21, i64* %frame_or_window, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %24 = load i32, i32* %state.addr, align 4
  %25 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %26 = load %struct.x_output*, %struct.x_output** %x, align 8
  %focus_state = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 53
  %27 = load i32, i32* %focus_state, align 4
  %or = or i32 %27, %24
  store i32 %or, i32* %focus_state, align 4
  %28 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %xic = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 47
  %30 = load %struct._XIC*, %struct._XIC** %xic, align 8
  %tobool = icmp ne %struct._XIC* %30, null
  br i1 %tobool, label %if.then.24, label %if.end.28

if.then.24:                                       ; preds = %if.end
  %31 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data25 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x26 = bitcast %union.output_data* %output_data25 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x26, align 8
  %xic27 = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 47
  %33 = load %struct._XIC*, %struct._XIC** %xic27, align 8
  call void @XSetICFocus(%struct._XIC* %33)
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.24, %if.end
  br label %if.end.63

if.else:                                          ; preds = %entry
  %34 = load i32, i32* %type.addr, align 4
  %cmp29 = icmp eq i32 %34, 10
  br i1 %cmp29, label %if.then.31, label %if.end.62

if.then.31:                                       ; preds = %if.else
  %35 = load i32, i32* %state.addr, align 4
  %neg = xor i32 %35, -1
  %36 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data32 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 62
  %x33 = bitcast %union.output_data* %output_data32 to %struct.x_output**
  %37 = load %struct.x_output*, %struct.x_output** %x33, align 8
  %focus_state34 = getelementptr inbounds %struct.x_output, %struct.x_output* %37, i32 0, i32 53
  %38 = load i32, i32* %focus_state34, align 4
  %and35 = and i32 %38, %neg
  store i32 %and35, i32* %focus_state34, align 4
  %39 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_event_frame36 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %39, i32 0, i32 72
  %40 = load %struct.frame*, %struct.frame** %x_focus_event_frame36, align 8
  %41 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %cmp37 = icmp eq %struct.frame* %40, %41
  br i1 %cmp37, label %if.then.39, label %if.end.46

if.then.39:                                       ; preds = %if.then.31
  %42 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_event_frame40 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %42, i32 0, i32 72
  store %struct.frame* null, %struct.frame** %x_focus_event_frame40, align 8
  %43 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  call void @x_new_focus_frame(%struct.x_display_info* %43, %struct.frame* null)
  %44 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  %45 = bitcast %struct.input_event* %44 to i32*
  %bf.load41 = load i32, i32* %45, align 8
  %bf.clear42 = and i32 %bf.load41, -65536
  %bf.set43 = or i32 %bf.clear42, 23
  store i32 %bf.set43, i32* %45, align 8
  %46 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %47 = bitcast %struct.frame* %46 to i8*
  %call44 = call i64 @make_lisp_ptr(i8* %47, i32 5)
  %48 = load %struct.input_event*, %struct.input_event** %bufp.addr, align 8
  %frame_or_window45 = getelementptr inbounds %struct.input_event, %struct.input_event* %48, i32 0, i32 6
  store i64 %call44, i64* %frame_or_window45, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.39, %if.then.31
  %49 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data47 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x48 = bitcast %union.output_data* %output_data47 to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x48, align 8
  %xic49 = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 47
  %51 = load %struct._XIC*, %struct._XIC** %xic49, align 8
  %tobool50 = icmp ne %struct._XIC* %51, null
  br i1 %tobool50, label %if.then.51, label %if.end.55

if.then.51:                                       ; preds = %if.end.46
  %52 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data52 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 62
  %x53 = bitcast %union.output_data* %output_data52 to %struct.x_output**
  %53 = load %struct.x_output*, %struct.x_output** %x53, align 8
  %xic54 = getelementptr inbounds %struct.x_output, %struct.x_output* %53, i32 0, i32 47
  %54 = load %struct._XIC*, %struct._XIC** %xic54, align 8
  call void @XUnsetICFocus(%struct._XIC* %54)
  br label %if.end.55

if.end.55:                                        ; preds = %if.then.51, %if.end.46
  %55 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 26
  %56 = bitcast i48* %pointer_invisible to i64*
  %bf.load56 = load i64, i64* %56, align 8
  %bf.lshr57 = lshr i64 %bf.load56, 21
  %bf.clear58 = and i64 %bf.lshr57, 1
  %bf.cast59 = trunc i64 %bf.clear58 to i1
  br i1 %bf.cast59, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %if.end.55
  %57 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  call void @XTtoggle_invisible_pointer(%struct.frame* %57, i1 zeroext false)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %if.end.55
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.else
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.end.28
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_new_focus_frame(%struct.x_display_info* %dpyinfo, %struct.frame* %frame) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %frame.addr = alloca %struct.frame*, align 8
  %old_focus = alloca %struct.frame*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 71
  %1 = load %struct.frame*, %struct.frame** %x_focus_frame, align 8
  store %struct.frame* %1, %struct.frame** %old_focus, align 8
  %2 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 71
  %4 = load %struct.frame*, %struct.frame** %x_focus_frame1, align 8
  %cmp = icmp ne %struct.frame* %2, %4
  br i1 %cmp, label %if.then, label %if.end.16

if.then:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 71
  store %struct.frame* %5, %struct.frame** %x_focus_frame2, align 8
  %7 = load %struct.frame*, %struct.frame** %old_focus, align 8
  %tobool = icmp ne %struct.frame* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %8 = load %struct.frame*, %struct.frame** %old_focus, align 8
  %auto_lower = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 26
  %9 = bitcast i48* %auto_lower to i64*
  %bf.load = load i64, i64* %9, align 8
  %bf.lshr = lshr i64 %bf.load, 16
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %land.lhs.true
  %10 = load %struct.frame*, %struct.frame** %old_focus, align 8
  call void @x_lower_frame(%struct.frame* %10)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %land.lhs.true, %if.then
  %11 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 71
  %12 = load %struct.frame*, %struct.frame** %x_focus_frame4, align 8
  %tobool5 = icmp ne %struct.frame* %12, null
  br i1 %tobool5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %if.end
  %13 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame7 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %13, i32 0, i32 71
  %14 = load %struct.frame*, %struct.frame** %x_focus_frame7, align 8
  %auto_raise = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 26
  %15 = bitcast i48* %auto_raise to i64*
  %bf.load8 = load i64, i64* %15, align 8
  %bf.lshr9 = lshr i64 %bf.load8, 15
  %bf.clear10 = and i64 %bf.lshr9, 1
  %bf.cast11 = trunc i64 %bf.clear10 to i1
  br i1 %bf.cast11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %land.lhs.true.6
  %16 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame13 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %16, i32 0, i32 71
  %17 = load %struct.frame*, %struct.frame** %x_focus_frame13, align 8
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_pending_autoraise_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %18, i32 0, i32 74
  store %struct.frame* %17, %struct.frame** %x_pending_autoraise_frame, align 8
  br label %if.end.15

if.else:                                          ; preds = %land.lhs.true.6, %if.end
  %19 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_pending_autoraise_frame14 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %19, i32 0, i32 74
  store %struct.frame* null, %struct.frame** %x_pending_autoraise_frame14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.12
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %entry
  %20 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  call void @x_frame_rehighlight(%struct.x_display_info* %20)
  ret void
}

declare i64 @Fdaemonp() #1

declare void @XUnsetICFocus(%struct._XIC*) #1

; Function Attrs: nounwind uwtable
define internal void @XTtoggle_invisible_pointer(%struct.frame* %f, i1 zeroext %invisible) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %invisible.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %invisible to i8
  store i8 %frombool, i8* %invisible.addr, align 1
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %toggle_visible_pointer = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 19
  %3 = load void (%struct.frame*, i1)*, void (%struct.frame*, i1)** %toggle_visible_pointer, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %5 = load i8, i8* %invisible.addr, align 1
  %tobool = trunc i8 %5 to i1
  call void %3(%struct.frame* %4, i1 zeroext %tobool)
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_lower_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @block_input()
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 44
  %4 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 2
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 12
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool3 = icmp ne %struct._GtkWidget* %8, null
  br i1 %tobool3, label %cond.true, label %cond.false.18

cond.true:                                        ; preds = %if.then
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %widget6 = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 12
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %widget6, align 8
  %tobool7 = icmp ne %struct._GtkWidget* %11, null
  br i1 %tobool7, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data8 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data8 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %widget10 = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 12
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %widget10, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %14)
  %tobool11 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool11, label %cond.true.12, label %cond.false

cond.true.12:                                     ; preds = %land.lhs.true
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x14, align 8
  %widget15 = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 12
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %widget15, align 8
  %call16 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %17)
  %call17 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call16)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.12
  %cond = phi i64 [ %call17, %cond.true.12 ], [ 0, %cond.false ]
  br label %cond.end.21

cond.false.18:                                    ; preds = %if.then
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 9
  %20 = load i64, i64* %window_desc, align 8
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.18, %cond.end
  %cond22 = phi i64 [ %cond, %cond.end ], [ %20, %cond.false.18 ]
  %call23 = call i32 @XLowerWindow(%struct._XDisplay* %5, i64 %cond22)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %cond.end.21, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_frame_rehighlight(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %old_highlight = alloca %struct.frame*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 73
  %1 = load %struct.frame*, %struct.frame** %x_highlight_frame, align 8
  store %struct.frame* %1, %struct.frame** %old_highlight, align 8
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 71
  %3 = load %struct.frame*, %struct.frame** %x_focus_frame, align 8
  %tobool = icmp ne %struct.frame* %3, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 71
  %5 = load %struct.frame*, %struct.frame** %x_focus_frame1, align 8
  %focus_frame = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 4
  %6 = load i64, i64* %focus_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %6)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 71
  %8 = load %struct.frame*, %struct.frame** %x_focus_frame2, align 8
  %focus_frame3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 4
  %9 = load i64, i64* %focus_frame3, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 71
  %13 = load %struct.frame*, %struct.frame** %x_focus_frame4, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.frame* [ %11, %cond.true ], [ %13, %cond.false ]
  %14 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame5 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 73
  store %struct.frame* %cond, %struct.frame** %x_highlight_frame5, align 8
  %15 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame6 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 73
  %16 = load %struct.frame*, %struct.frame** %x_highlight_frame6, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 61
  %17 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %17, null
  br i1 %cmp, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %cond.end
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame8 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %18, i32 0, i32 71
  %19 = load %struct.frame*, %struct.frame** %x_focus_frame8, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_focus_frame(%struct.frame* %19, i64 %call9)
  %20 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_focus_frame10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %20, i32 0, i32 71
  %21 = load %struct.frame*, %struct.frame** %x_focus_frame10, align 8
  %22 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame11 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %22, i32 0, i32 73
  store %struct.frame* %21, %struct.frame** %x_highlight_frame11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.7, %cond.end
  br label %if.end.13

if.else:                                          ; preds = %entry
  %23 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame12 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %23, i32 0, i32 73
  store %struct.frame* null, %struct.frame** %x_highlight_frame12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.end
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame14 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 73
  %25 = load %struct.frame*, %struct.frame** %x_highlight_frame14, align 8
  %26 = load %struct.frame*, %struct.frame** %old_highlight, align 8
  %cmp15 = icmp ne %struct.frame* %25, %26
  br i1 %cmp15, label %if.then.16, label %if.end.25

if.then.16:                                       ; preds = %if.end.13
  %27 = load %struct.frame*, %struct.frame** %old_highlight, align 8
  %tobool17 = icmp ne %struct.frame* %27, null
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.then.16
  %28 = load %struct.frame*, %struct.frame** %old_highlight, align 8
  call void @frame_unhighlight(%struct.frame* %28)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.then.16
  %29 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame20 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %29, i32 0, i32 73
  %30 = load %struct.frame*, %struct.frame** %x_highlight_frame20, align 8
  %tobool21 = icmp ne %struct.frame* %30, null
  br i1 %tobool21, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %if.end.19
  %31 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %x_highlight_frame23 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %31, i32 0, i32 73
  %32 = load %struct.frame*, %struct.frame** %x_highlight_frame23, align 8
  call void @frame_highlight(%struct.frame* %32)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %if.end.19
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end.13
  ret void
}

declare i32 @XLowerWindow(%struct._XDisplay*, i64) #1

declare void @fset_focus_frame(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @frame_unhighlight(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  call void @x_catch_errors(%struct._XDisplay* %3)
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display4, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 9
  %10 = load i64, i64* %window_desc, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %border_tile = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 5
  %13 = load i64, i64* %border_tile, align 8
  %call = call i32 @XSetWindowBorderPixmap(%struct._XDisplay* %7, i64 %10, i64 %13)
  call void @x_uncatch_errors()
  call void @unblock_input()
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_update_cursor(%struct.frame* %14, i1 zeroext true)
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_set_frame_alpha(%struct.frame* %15)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @frame_highlight(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  call void @x_catch_errors(%struct._XDisplay* %3)
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display4, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 9
  %10 = load i64, i64* %window_desc, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %border_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 29
  %13 = load i64, i64* %border_pixel, align 8
  %call = call i32 @XSetWindowBorder(%struct._XDisplay* %7, i64 %10, i64 %13)
  call void @x_uncatch_errors()
  call void @unblock_input()
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_update_cursor(%struct.frame* %14, i1 zeroext true)
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_set_frame_alpha(%struct.frame* %15)
  ret void
}

declare i32 @XSetWindowBorderPixmap(%struct._XDisplay*, i64, i64) #1

declare void @x_update_cursor(%struct.frame*, i1 zeroext) #1

declare i32 @XSetWindowBorder(%struct._XDisplay*, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @get_current_wm_state(%struct.frame* %f, i64 %window, i32* %size_state, i8* %sticky) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %window.addr = alloca i64, align 8
  %size_state.addr = alloca i32*, align 8
  %sticky.addr = alloca i8*, align 8
  %actual_size = alloca i64, align 8
  %i = alloca i32, align 4
  %is_hidden = alloca i8, align 1
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %max_len = alloca i64, align 8
  %target_type = alloca i64, align 8
  %prop_cookie = alloca %struct.xcb_get_property_cookie_t, align 4
  %prop = alloca %struct.xcb_get_property_reply_t*, align 8
  %reply_data = alloca i32*, align 8
  %coerce = alloca %struct.xcb_get_property_cookie_t, align 4
  %actual_bytes = alloca i32, align 4
  %a = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %window, i64* %window.addr, align 8
  store i32* %size_state, i32** %size_state.addr, align 8
  store i8* %sticky, i8** %sticky.addr, align 8
  store i8 0, i8* %is_hidden, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  store i64 65536, i64* %max_len, align 8
  store i64 4, i64* %target_type, align 8
  %3 = load i8*, i8** %sticky.addr, align 8
  store i8 0, i8* %3, align 1
  %4 = load i32*, i32** %size_state.addr, align 8
  store i32 0, i32* %4, align 4
  call void @block_input()
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xcb_connection = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 128
  %6 = load %struct.xcb_connection_t*, %struct.xcb_connection_t** %xcb_connection, align 8
  %7 = load i64, i64* %window.addr, align 8
  %conv = trunc i64 %7 to i32
  %8 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %8, i32 0, i32 109
  %9 = load i64, i64* %Xatom_net_wm_state, align 8
  %conv1 = trunc i64 %9 to i32
  %10 = load i64, i64* %target_type, align 8
  %conv2 = trunc i64 %10 to i32
  %11 = load i64, i64* %max_len, align 8
  %conv3 = trunc i64 %11 to i32
  %call = call i32 @xcb_get_property(%struct.xcb_connection_t* %6, i8 zeroext 0, i32 %conv, i32 %conv1, i32 %conv2, i32 0, i32 %conv3)
  %coerce.dive = getelementptr %struct.xcb_get_property_cookie_t, %struct.xcb_get_property_cookie_t* %coerce, i32 0, i32 0
  store i32 %call, i32* %coerce.dive, align 4
  %12 = bitcast %struct.xcb_get_property_cookie_t* %prop_cookie to i8*
  %13 = bitcast %struct.xcb_get_property_cookie_t* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 4, i32 4, i1 false)
  %14 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xcb_connection4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 128
  %15 = load %struct.xcb_connection_t*, %struct.xcb_connection_t** %xcb_connection4, align 8
  %coerce.dive5 = getelementptr %struct.xcb_get_property_cookie_t, %struct.xcb_get_property_cookie_t* %prop_cookie, i32 0, i32 0
  %16 = load i32, i32* %coerce.dive5, align 4
  %call6 = call %struct.xcb_get_property_reply_t* @xcb_get_property_reply(%struct.xcb_connection_t* %15, i32 %16, %struct.xcb_generic_error_t** null)
  store %struct.xcb_get_property_reply_t* %call6, %struct.xcb_get_property_reply_t** %prop, align 8
  %17 = load %struct.xcb_get_property_reply_t*, %struct.xcb_get_property_reply_t** %prop, align 8
  %tobool = icmp ne %struct.xcb_get_property_reply_t* %17, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %18 = load %struct.xcb_get_property_reply_t*, %struct.xcb_get_property_reply_t** %prop, align 8
  %type = getelementptr inbounds %struct.xcb_get_property_reply_t, %struct.xcb_get_property_reply_t* %18, i32 0, i32 4
  %19 = load i32, i32* %type, align 4
  %conv7 = zext i32 %19 to i64
  %20 = load i64, i64* %target_type, align 8
  %cmp = icmp eq i64 %conv7, %20
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %21 = load %struct.xcb_get_property_reply_t*, %struct.xcb_get_property_reply_t** %prop, align 8
  %call9 = call i32 @xcb_get_property_value_length(%struct.xcb_get_property_reply_t* %21)
  store i32 %call9, i32* %actual_bytes, align 4
  %22 = load i32, i32* %actual_bytes, align 4
  %cmp10 = icmp sle i32 0, %22
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  unreachable

unreachable.cont:                                 ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %unreachable.cont, %cond.true
  %23 = load i32, i32* %actual_bytes, align 4
  %conv12 = sext i32 %23 to i64
  %div = udiv i64 %conv12, 4
  store i64 %div, i64* %actual_size, align 8
  %24 = load %struct.xcb_get_property_reply_t*, %struct.xcb_get_property_reply_t** %prop, align 8
  %call13 = call i8* @xcb_get_property_value(%struct.xcb_get_property_reply_t* %24)
  %25 = bitcast i8* %call13 to i32*
  store i32* %25, i32** %reply_data, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  store i64 0, i64* %actual_size, align 8
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %iconified = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 26
  %27 = bitcast i48* %iconified to i64*
  %bf.load = load i64, i64* %27, align 8
  %bf.lshr = lshr i64 %bf.load, 12
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %frombool = zext i1 %bf.cast to i8
  store i8 %frombool, i8* %is_hidden, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %28 = load i32, i32* %i, align 4
  %conv14 = sext i32 %28 to i64
  %29 = load i64, i64* %actual_size, align 8
  %cmp15 = icmp ult i64 %conv14, %29
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %idxprom = sext i32 %30 to i64
  %31 = load i32*, i32** %reply_data, align 8
  %arrayidx = getelementptr inbounds i32, i32* %31, i64 %idxprom
  %32 = load i32, i32* %arrayidx, align 4
  %conv17 = zext i32 %32 to i64
  store i64 %conv17, i64* %a, align 8
  %33 = load i64, i64* %a, align 8
  %34 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_hidden = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %34, i32 0, i32 114
  %35 = load i64, i64* %Xatom_net_wm_state_hidden, align 8
  %cmp18 = icmp eq i64 %33, %35
  br i1 %cmp18, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %for.body
  store i8 1, i8* %is_hidden, align 1
  br label %if.end.51

if.else.21:                                       ; preds = %for.body
  %36 = load i64, i64* %a, align 8
  %37 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %37, i32 0, i32 111
  %38 = load i64, i64* %Xatom_net_wm_state_maximized_horz, align 8
  %cmp22 = icmp eq i64 %36, %38
  br i1 %cmp22, label %if.then.24, label %if.else.30

if.then.24:                                       ; preds = %if.else.21
  %39 = load i32*, i32** %size_state.addr, align 8
  %40 = load i32, i32* %39, align 4
  %cmp25 = icmp eq i32 %40, 2
  br i1 %cmp25, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %if.then.24
  %41 = load i32*, i32** %size_state.addr, align 8
  store i32 4, i32* %41, align 4
  br label %if.end.29

if.else.28:                                       ; preds = %if.then.24
  %42 = load i32*, i32** %size_state.addr, align 8
  store i32 1, i32* %42, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.28, %if.then.27
  br label %if.end.50

if.else.30:                                       ; preds = %if.else.21
  %43 = load i64, i64* %a, align 8
  %44 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %44, i32 0, i32 112
  %45 = load i64, i64* %Xatom_net_wm_state_maximized_vert, align 8
  %cmp31 = icmp eq i64 %43, %45
  br i1 %cmp31, label %if.then.33, label %if.else.39

if.then.33:                                       ; preds = %if.else.30
  %46 = load i32*, i32** %size_state.addr, align 8
  %47 = load i32, i32* %46, align 4
  %cmp34 = icmp eq i32 %47, 1
  br i1 %cmp34, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %if.then.33
  %48 = load i32*, i32** %size_state.addr, align 8
  store i32 4, i32* %48, align 4
  br label %if.end.38

if.else.37:                                       ; preds = %if.then.33
  %49 = load i32*, i32** %size_state.addr, align 8
  store i32 2, i32* %49, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.37, %if.then.36
  br label %if.end.49

if.else.39:                                       ; preds = %if.else.30
  %50 = load i64, i64* %a, align 8
  %51 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %51, i32 0, i32 110
  %52 = load i64, i64* %Xatom_net_wm_state_fullscreen, align 8
  %cmp40 = icmp eq i64 %50, %52
  br i1 %cmp40, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %if.else.39
  %53 = load i32*, i32** %size_state.addr, align 8
  store i32 3, i32* %53, align 4
  br label %if.end.48

if.else.43:                                       ; preds = %if.else.39
  %54 = load i64, i64* %a, align 8
  %55 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_sticky = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %55, i32 0, i32 113
  %56 = load i64, i64* %Xatom_net_wm_state_sticky, align 8
  %cmp44 = icmp eq i64 %54, %56
  br i1 %cmp44, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.else.43
  %57 = load i8*, i8** %sticky.addr, align 8
  store i8 1, i8* %57, align 1
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.46, %if.else.43
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.then.42
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.end.38
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.end.29
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.20
  br label %for.inc

for.inc:                                          ; preds = %if.end.51
  %58 = load i32, i32* %i, align 4
  %inc = add nsw i32 %58, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %59 = load %struct.xcb_get_property_reply_t*, %struct.xcb_get_property_reply_t** %prop, align 8
  %60 = bitcast %struct.xcb_get_property_reply_t* %59 to i8*
  call void @free(i8* %60) #2
  call void @unblock_input()
  %61 = load i8, i8* %is_hidden, align 1
  %tobool52 = trunc i8 %61 to i1
  %lnot = xor i1 %tobool52, true
  ret i1 %lnot
}

declare i32 @xcb_get_property(%struct.xcb_connection_t*, i8 zeroext, i32, i32, i32, i32, i32) #1

declare %struct.xcb_get_property_reply_t* @xcb_get_property_reply(%struct.xcb_connection_t*, i32, %struct.xcb_generic_error_t**) #1

declare i32 @xcb_get_property_value_length(%struct.xcb_get_property_reply_t*) #1

declare i8* @xcb_get_property_value(%struct.xcb_get_property_reply_t*) #1

; Function Attrs: nounwind
declare void @free(i8*) #6

; Function Attrs: nounwind uwtable
define internal zeroext i1 @do_ewmh_fullscreen(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %have_net_atom = alloca i8, align 1
  %cur = alloca i32, align 4
  %dummy = alloca i8, align 1
  %frame = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 109
  %5 = load i64, i64* %Xatom_net_wm_state, align 8
  %call = call zeroext i1 @x_wm_supports(%struct.frame* %3, i64 %5)
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %have_net_atom, align 1
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 12
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %9, null
  br i1 %tobool, label %cond.true, label %cond.false.18

cond.true:                                        ; preds = %entry
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %widget5 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 12
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %widget5, align 8
  %tobool6 = icmp ne %struct._GtkWidget* %12, null
  br i1 %tobool6, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %widget9 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 12
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %widget9, align 8
  %call10 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %15)
  %tobool11 = icmp ne %struct._GdkDrawable* %call10, null
  br i1 %tobool11, label %cond.true.12, label %cond.false

cond.true.12:                                     ; preds = %land.lhs.true
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x14, align 8
  %widget15 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 12
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %widget15, align 8
  %call16 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %18)
  %call17 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call16)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.12
  %cond = phi i64 [ %call17, %cond.true.12 ], [ 0, %cond.false ]
  br label %cond.end.21

cond.false.18:                                    ; preds = %entry
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 9
  %21 = load i64, i64* %window_desc, align 8
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.18, %cond.end
  %cond22 = phi i64 [ %cond, %cond.end ], [ %21, %cond.false.18 ]
  %call23 = call zeroext i1 @get_current_wm_state(%struct.frame* %6, i64 %cond22, i32* %cur, i8* %dummy)
  %22 = load i8, i8* %have_net_atom, align 1
  %tobool24 = trunc i8 %22 to i1
  br i1 %tobool24, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end.21
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 110
  %25 = load i64, i64* %Xatom_net_wm_state_fullscreen, align 8
  %call25 = call zeroext i1 @x_wm_supports(%struct.frame* %23, i64 %25)
  %frombool26 = zext i1 %call25 to i8
  store i8 %frombool26, i8* %have_net_atom, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.21
  %26 = load i8, i8* %have_net_atom, align 1
  %tobool27 = trunc i8 %26 to i1
  br i1 %tobool27, label %land.lhs.true.28, label %if.end.142

land.lhs.true.28:                                 ; preds = %if.end
  %27 = load i32, i32* %cur, align 4
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 26
  %29 = bitcast i48* %want_fullscreen to i64*
  %bf.load = load i64, i64* %29, align 8
  %bf.lshr = lshr i64 %bf.load, 26
  %bf.clear = and i64 %bf.lshr, 15
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp ne i32 %27, %bf.cast
  br i1 %cmp, label %if.then.29, label %if.end.142

if.then.29:                                       ; preds = %land.lhs.true.28
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %31 = bitcast %struct.frame* %30 to i8*
  %call30 = call i64 @make_lisp_ptr(i8* %31, i32 5)
  store i64 %call30, i64* %frame, align 8
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen31 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 26
  %33 = bitcast i48* %want_fullscreen31 to i64*
  %bf.load32 = load i64, i64* %33, align 8
  %bf.lshr33 = lshr i64 %bf.load32, 26
  %bf.clear34 = and i64 %bf.lshr33, 15
  %bf.cast35 = trunc i64 %bf.clear34 to i32
  switch i32 %bf.cast35, label %sw.epilog [
    i32 3, label %sw.bb
    i32 1, label %sw.bb.40
    i32 2, label %sw.bb.61
    i32 4, label %sw.bb.86
    i32 0, label %sw.bb.131
  ]

sw.bb:                                            ; preds = %if.then.29
  %34 = load i32, i32* %cur, align 4
  %cmp36 = icmp ne i32 %34, 3
  br i1 %cmp36, label %if.then.37, label %if.end.39

if.then.37:                                       ; preds = %sw.bb
  %35 = load i64, i64* %frame, align 8
  %36 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen38 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %36, i32 0, i32 110
  %37 = load i64, i64* %Xatom_net_wm_state_fullscreen38, align 8
  call void @set_wm_state(i64 %35, i1 zeroext true, i64 %37, i64 0)
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.37, %sw.bb
  br label %sw.epilog

sw.bb.40:                                         ; preds = %if.then.29
  %38 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  %tobool41 = trunc i8 %38 to i1
  br i1 %tobool41, label %land.lhs.true.42, label %if.else

land.lhs.true.42:                                 ; preds = %sw.bb.40
  %39 = load i32, i32* %cur, align 4
  %cmp43 = icmp eq i32 %39, 4
  br i1 %cmp43, label %if.then.44, label %if.else

if.then.44:                                       ; preds = %land.lhs.true.42
  %40 = load i64, i64* %frame, align 8
  %41 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %41, i32 0, i32 111
  %42 = load i64, i64* %Xatom_net_wm_state_maximized_horz, align 8
  %43 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 112
  %44 = load i64, i64* %Xatom_net_wm_state_maximized_vert, align 8
  call void @set_wm_state(i64 %40, i1 zeroext false, i64 %42, i64 %44)
  %45 = load i64, i64* %frame, align 8
  %46 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz45 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %46, i32 0, i32 111
  %47 = load i64, i64* %Xatom_net_wm_state_maximized_horz45, align 8
  call void @set_wm_state(i64 %45, i1 zeroext true, i64 %47, i64 0)
  br label %if.end.60

if.else:                                          ; preds = %land.lhs.true.42, %sw.bb.40
  %48 = load i32, i32* %cur, align 4
  %cmp46 = icmp eq i32 %48, 3
  br i1 %cmp46, label %if.then.50, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %49 = load i32, i32* %cur, align 4
  %cmp47 = icmp eq i32 %49, 2
  br i1 %cmp47, label %if.then.50, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %lor.lhs.false
  %50 = load i32, i32* %cur, align 4
  %cmp49 = icmp eq i32 %50, 4
  br i1 %cmp49, label %if.then.50, label %if.end.53

if.then.50:                                       ; preds = %lor.lhs.false.48, %lor.lhs.false, %if.else
  %51 = load i64, i64* %frame, align 8
  %52 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen51 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %52, i32 0, i32 110
  %53 = load i64, i64* %Xatom_net_wm_state_fullscreen51, align 8
  %54 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert52 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %54, i32 0, i32 112
  %55 = load i64, i64* %Xatom_net_wm_state_maximized_vert52, align 8
  call void @set_wm_state(i64 %51, i1 zeroext false, i64 %53, i64 %55)
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.50, %lor.lhs.false.48
  %56 = load i32, i32* %cur, align 4
  %cmp54 = icmp ne i32 %56, 4
  br i1 %cmp54, label %if.then.57, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %if.end.53
  %57 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  %tobool56 = trunc i8 %57 to i1
  br i1 %tobool56, label %if.then.57, label %if.end.59

if.then.57:                                       ; preds = %lor.lhs.false.55, %if.end.53
  %58 = load i64, i64* %frame, align 8
  %59 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz58 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %59, i32 0, i32 111
  %60 = load i64, i64* %Xatom_net_wm_state_maximized_horz58, align 8
  call void @set_wm_state(i64 %58, i1 zeroext true, i64 %60, i64 0)
  br label %if.end.59

if.end.59:                                        ; preds = %if.then.57, %lor.lhs.false.55
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.then.44
  br label %sw.epilog

sw.bb.61:                                         ; preds = %if.then.29
  %61 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  %tobool62 = trunc i8 %61 to i1
  br i1 %tobool62, label %land.lhs.true.63, label %if.else.69

land.lhs.true.63:                                 ; preds = %sw.bb.61
  %62 = load i32, i32* %cur, align 4
  %cmp64 = icmp eq i32 %62, 4
  br i1 %cmp64, label %if.then.65, label %if.else.69

if.then.65:                                       ; preds = %land.lhs.true.63
  %63 = load i64, i64* %frame, align 8
  %64 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz66 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %64, i32 0, i32 111
  %65 = load i64, i64* %Xatom_net_wm_state_maximized_horz66, align 8
  %66 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert67 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %66, i32 0, i32 112
  %67 = load i64, i64* %Xatom_net_wm_state_maximized_vert67, align 8
  call void @set_wm_state(i64 %63, i1 zeroext false, i64 %65, i64 %67)
  %68 = load i64, i64* %frame, align 8
  %69 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert68 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %69, i32 0, i32 112
  %70 = load i64, i64* %Xatom_net_wm_state_maximized_vert68, align 8
  call void @set_wm_state(i64 %68, i1 zeroext true, i64 %70, i64 0)
  br label %if.end.85

if.else.69:                                       ; preds = %land.lhs.true.63, %sw.bb.61
  %71 = load i32, i32* %cur, align 4
  %cmp70 = icmp eq i32 %71, 3
  br i1 %cmp70, label %if.then.75, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %if.else.69
  %72 = load i32, i32* %cur, align 4
  %cmp72 = icmp eq i32 %72, 1
  br i1 %cmp72, label %if.then.75, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %lor.lhs.false.71
  %73 = load i32, i32* %cur, align 4
  %cmp74 = icmp eq i32 %73, 4
  br i1 %cmp74, label %if.then.75, label %if.end.78

if.then.75:                                       ; preds = %lor.lhs.false.73, %lor.lhs.false.71, %if.else.69
  %74 = load i64, i64* %frame, align 8
  %75 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen76 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %75, i32 0, i32 110
  %76 = load i64, i64* %Xatom_net_wm_state_fullscreen76, align 8
  %77 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz77 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %77, i32 0, i32 111
  %78 = load i64, i64* %Xatom_net_wm_state_maximized_horz77, align 8
  call void @set_wm_state(i64 %74, i1 zeroext false, i64 %76, i64 %78)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.75, %lor.lhs.false.73
  %79 = load i32, i32* %cur, align 4
  %cmp79 = icmp ne i32 %79, 4
  br i1 %cmp79, label %if.then.82, label %lor.lhs.false.80

lor.lhs.false.80:                                 ; preds = %if.end.78
  %80 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  %tobool81 = trunc i8 %80 to i1
  br i1 %tobool81, label %if.then.82, label %if.end.84

if.then.82:                                       ; preds = %lor.lhs.false.80, %if.end.78
  %81 = load i64, i64* %frame, align 8
  %82 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert83 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %82, i32 0, i32 112
  %83 = load i64, i64* %Xatom_net_wm_state_maximized_vert83, align 8
  call void @set_wm_state(i64 %81, i1 zeroext true, i64 %83, i64 0)
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.82, %lor.lhs.false.80
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.then.65
  br label %sw.epilog

sw.bb.86:                                         ; preds = %if.then.29
  %84 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  %tobool87 = trunc i8 %84 to i1
  br i1 %tobool87, label %land.lhs.true.88, label %if.else.94

land.lhs.true.88:                                 ; preds = %sw.bb.86
  %85 = load i32, i32* %cur, align 4
  %cmp89 = icmp eq i32 %85, 3
  br i1 %cmp89, label %if.then.90, label %if.else.94

if.then.90:                                       ; preds = %land.lhs.true.88
  %86 = load i64, i64* %frame, align 8
  %87 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen91 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %87, i32 0, i32 110
  %88 = load i64, i64* %Xatom_net_wm_state_fullscreen91, align 8
  call void @set_wm_state(i64 %86, i1 zeroext false, i64 %88, i64 0)
  %89 = load i64, i64* %frame, align 8
  %90 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz92 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %90, i32 0, i32 111
  %91 = load i64, i64* %Xatom_net_wm_state_maximized_horz92, align 8
  %92 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert93 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %92, i32 0, i32 112
  %93 = load i64, i64* %Xatom_net_wm_state_maximized_vert93, align 8
  call void @set_wm_state(i64 %89, i1 zeroext true, i64 %91, i64 %93)
  br label %if.end.130

if.else.94:                                       ; preds = %land.lhs.true.88, %sw.bb.86
  %94 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  %tobool95 = trunc i8 %94 to i1
  br i1 %tobool95, label %land.lhs.true.96, label %if.else.102

land.lhs.true.96:                                 ; preds = %if.else.94
  %95 = load i32, i32* %cur, align 4
  %cmp97 = icmp eq i32 %95, 1
  br i1 %cmp97, label %if.then.98, label %if.else.102

if.then.98:                                       ; preds = %land.lhs.true.96
  %96 = load i64, i64* %frame, align 8
  %97 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz99 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %97, i32 0, i32 111
  %98 = load i64, i64* %Xatom_net_wm_state_maximized_horz99, align 8
  call void @set_wm_state(i64 %96, i1 zeroext false, i64 %98, i64 0)
  %99 = load i64, i64* %frame, align 8
  %100 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz100 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %100, i32 0, i32 111
  %101 = load i64, i64* %Xatom_net_wm_state_maximized_horz100, align 8
  %102 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert101 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %102, i32 0, i32 112
  %103 = load i64, i64* %Xatom_net_wm_state_maximized_vert101, align 8
  call void @set_wm_state(i64 %99, i1 zeroext true, i64 %101, i64 %103)
  br label %if.end.129

if.else.102:                                      ; preds = %land.lhs.true.96, %if.else.94
  %104 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 501), align 1
  %tobool103 = trunc i8 %104 to i1
  br i1 %tobool103, label %land.lhs.true.104, label %if.else.110

land.lhs.true.104:                                ; preds = %if.else.102
  %105 = load i32, i32* %cur, align 4
  %cmp105 = icmp eq i32 %105, 2
  br i1 %cmp105, label %if.then.106, label %if.else.110

if.then.106:                                      ; preds = %land.lhs.true.104
  %106 = load i64, i64* %frame, align 8
  %107 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert107 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %107, i32 0, i32 112
  %108 = load i64, i64* %Xatom_net_wm_state_maximized_vert107, align 8
  call void @set_wm_state(i64 %106, i1 zeroext false, i64 %108, i64 0)
  %109 = load i64, i64* %frame, align 8
  %110 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz108 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %110, i32 0, i32 111
  %111 = load i64, i64* %Xatom_net_wm_state_maximized_horz108, align 8
  %112 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert109 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %112, i32 0, i32 112
  %113 = load i64, i64* %Xatom_net_wm_state_maximized_vert109, align 8
  call void @set_wm_state(i64 %109, i1 zeroext true, i64 %111, i64 %113)
  br label %if.end.128

if.else.110:                                      ; preds = %land.lhs.true.104, %if.else.102
  %114 = load i32, i32* %cur, align 4
  %cmp111 = icmp eq i32 %114, 3
  br i1 %cmp111, label %if.then.112, label %if.else.114

if.then.112:                                      ; preds = %if.else.110
  %115 = load i64, i64* %frame, align 8
  %116 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen113 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %116, i32 0, i32 110
  %117 = load i64, i64* %Xatom_net_wm_state_fullscreen113, align 8
  call void @set_wm_state(i64 %115, i1 zeroext false, i64 %117, i64 0)
  br label %if.end.127

if.else.114:                                      ; preds = %if.else.110
  %118 = load i32, i32* %cur, align 4
  %cmp115 = icmp eq i32 %118, 2
  br i1 %cmp115, label %if.then.116, label %if.else.118

if.then.116:                                      ; preds = %if.else.114
  %119 = load i64, i64* %frame, align 8
  %120 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz117 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %120, i32 0, i32 111
  %121 = load i64, i64* %Xatom_net_wm_state_maximized_horz117, align 8
  call void @set_wm_state(i64 %119, i1 zeroext true, i64 %121, i64 0)
  br label %if.end.126

if.else.118:                                      ; preds = %if.else.114
  %122 = load i32, i32* %cur, align 4
  %cmp119 = icmp eq i32 %122, 1
  br i1 %cmp119, label %if.then.120, label %if.else.122

if.then.120:                                      ; preds = %if.else.118
  %123 = load i64, i64* %frame, align 8
  %124 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert121 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %124, i32 0, i32 112
  %125 = load i64, i64* %Xatom_net_wm_state_maximized_vert121, align 8
  call void @set_wm_state(i64 %123, i1 zeroext true, i64 0, i64 %125)
  br label %if.end.125

if.else.122:                                      ; preds = %if.else.118
  %126 = load i64, i64* %frame, align 8
  %127 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz123 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %127, i32 0, i32 111
  %128 = load i64, i64* %Xatom_net_wm_state_maximized_horz123, align 8
  %129 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert124 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %129, i32 0, i32 112
  %130 = load i64, i64* %Xatom_net_wm_state_maximized_vert124, align 8
  call void @set_wm_state(i64 %126, i1 zeroext true, i64 %128, i64 %130)
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.122, %if.then.120
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %if.then.116
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.then.112
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.then.106
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.then.98
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.then.90
  br label %sw.epilog

sw.bb.131:                                        ; preds = %if.then.29
  %131 = load i32, i32* %cur, align 4
  %cmp132 = icmp eq i32 %131, 3
  br i1 %cmp132, label %if.then.133, label %if.else.135

if.then.133:                                      ; preds = %sw.bb.131
  %132 = load i64, i64* %frame, align 8
  %133 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_fullscreen134 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %133, i32 0, i32 110
  %134 = load i64, i64* %Xatom_net_wm_state_fullscreen134, align 8
  call void @set_wm_state(i64 %132, i1 zeroext false, i64 %134, i64 0)
  br label %if.end.138

if.else.135:                                      ; preds = %sw.bb.131
  %135 = load i64, i64* %frame, align 8
  %136 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_horz136 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %136, i32 0, i32 111
  %137 = load i64, i64* %Xatom_net_wm_state_maximized_horz136, align 8
  %138 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %Xatom_net_wm_state_maximized_vert137 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %138, i32 0, i32 112
  %139 = load i64, i64* %Xatom_net_wm_state_maximized_vert137, align 8
  call void @set_wm_state(i64 %135, i1 zeroext false, i64 %137, i64 %139)
  br label %if.end.138

if.end.138:                                       ; preds = %if.else.135, %if.then.133
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.138, %if.then.29, %if.end.130, %if.end.85, %if.end.60, %if.end.39
  %140 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %want_fullscreen139 = getelementptr inbounds %struct.frame, %struct.frame* %140, i32 0, i32 26
  %141 = bitcast i48* %want_fullscreen139 to i64*
  %bf.load140 = load i64, i64* %141, align 8
  %bf.clear141 = and i64 %bf.load140, -1006632961
  store i64 %bf.clear141, i64* %141, align 8
  br label %if.end.142

if.end.142:                                       ; preds = %sw.epilog, %land.lhs.true.28, %if.end
  %142 = load i8, i8* %have_net_atom, align 1
  %tobool143 = trunc i8 %142 to i1
  ret i1 %tobool143
}

declare void @note_mouse_highlight(%struct.frame*, i32, i32) #1

declare void @remember_mouse_glyph(%struct.frame*, i32, i32, %struct.XRectangle*) #1

declare i64 @xg_get_scroll_id_for_window(%struct._XDisplay*, i64) #1

declare %struct.Lisp_Vector* @XVECTOR(i64) #1

declare zeroext i1 @xg_event_is_for_menubar(%struct.frame*, %union._XEvent*) #1

declare i64 @x_bitmap_pixmap(%struct.frame*, i64) #1

declare i32 @x_bitmap_mask(%struct.frame*, i64) #1

declare void @xg_set_frame_icon(%struct.frame*, i64, i64) #1

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #3

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @x_filter_event(%struct.x_display_info* %dpyinfo, %union._XEvent* %event) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %event.addr = alloca %union._XEvent*, align 8
  %f1 = alloca %struct.frame*, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %1 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xclient = bitcast %union._XEvent* %1 to %struct.XClientMessageEvent*
  %window = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %xclient, i32 0, i32 4
  %2 = load i64, i64* %window, align 8
  %conv = trunc i64 %2 to i32
  %call = call %struct.frame* @x_any_window_to_frame(%struct.x_display_info* %0, i32 %conv)
  store %struct.frame* %call, %struct.frame** %f1, align 8
  %3 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %4 = load %struct.frame*, %struct.frame** %f1, align 8
  %tobool = icmp ne %struct.frame* %4, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f1, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 9
  %7 = load i64, i64* %window_desc, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %7, %cond.true ], [ 0, %cond.false ]
  %call1 = call i32 @XFilterEvent(%union._XEvent* %3, i64 %cond)
  ret i32 %call1
}

declare i32 @XFilterEvent(%union._XEvent*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_error_catcher(%struct._XDisplay* %display, %struct.XErrorEvent* %event) #0 {
entry:
  %display.addr = alloca %struct._XDisplay*, align 8
  %event.addr = alloca %struct.XErrorEvent*, align 8
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  store %struct.XErrorEvent* %event, %struct.XErrorEvent** %event.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %1 = load %struct.XErrorEvent*, %struct.XErrorEvent** %event.addr, align 8
  %error_code = getelementptr inbounds %struct.XErrorEvent, %struct.XErrorEvent* %1, i32 0, i32 4
  %2 = load i8, i8* %error_code, align 1
  %conv = zext i8 %2 to i32
  %3 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %string = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %3, i32 0, i32 0
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %string, i32 0, i32 0
  %call = call i32 @XGetErrorText(%struct._XDisplay* %0, i32 %conv, i8* %arraydecay, i32 200)
  %4 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %handler = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %4, i32 0, i32 2
  %5 = load void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)*, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)** %handler, align 8
  %tobool = icmp ne void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %handler1 = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %6, i32 0, i32 2
  %7 = load void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)*, void (%struct._XDisplay*, %struct.XErrorEvent*, i8*, i8*)** %handler1, align 8
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %9 = load %struct.XErrorEvent*, %struct.XErrorEvent** %event.addr, align 8
  %10 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %string2 = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %10, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [200 x i8], [200 x i8]* %string2, i32 0, i32 0
  %11 = load %struct.x_error_message_stack*, %struct.x_error_message_stack** @x_error_message, align 8
  %handler_data = getelementptr inbounds %struct.x_error_message_stack, %struct.x_error_message_stack* %11, i32 0, i32 3
  %12 = load i8*, i8** %handler_data, align 8
  call void %7(%struct._XDisplay* %8, %struct.XErrorEvent* %9, i8* %arraydecay3, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @x_error_quitter(%struct._XDisplay* %display, %struct.XErrorEvent* %event) #7 {
entry:
  %display.addr = alloca %struct._XDisplay*, align 8
  %event.addr = alloca %struct.XErrorEvent*, align 8
  %buf = alloca [256 x i8], align 16
  %buf1 = alloca [356 x i8], align 16
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  store %struct.XErrorEvent* %event, %struct.XErrorEvent** %event.addr, align 8
  %0 = load %struct.XErrorEvent*, %struct.XErrorEvent** %event.addr, align 8
  %error_code = getelementptr inbounds %struct.XErrorEvent, %struct.XErrorEvent* %0, i32 0, i32 4
  %1 = load i8, i8* %error_code, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 15
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %3 = load %struct.XErrorEvent*, %struct.XErrorEvent** %event.addr, align 8
  %error_code2 = getelementptr inbounds %struct.XErrorEvent, %struct.XErrorEvent* %3, i32 0, i32 4
  %4 = load i8, i8* %error_code2, align 1
  %conv3 = zext i8 %4 to i32
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call = call i32 @XGetErrorText(%struct._XDisplay* %2, i32 %conv3, i8* %arraydecay, i32 256)
  %arraydecay4 = getelementptr inbounds [356 x i8], [356 x i8]* %buf1, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %5 = load %struct.XErrorEvent*, %struct.XErrorEvent** %event.addr, align 8
  %request_code = getelementptr inbounds %struct.XErrorEvent, %struct.XErrorEvent* %5, i32 0, i32 5
  %6 = load i8, i8* %request_code, align 1
  %conv6 = zext i8 %6 to i32
  %call7 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.385, i32 0, i32 0), i8* %arraydecay5, i32 %conv6) #2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display.addr, align 8
  %arraydecay8 = getelementptr inbounds [356 x i8], [356 x i8]* %buf1, i32 0, i32 0
  call void @x_connection_closed(%struct._XDisplay* %7, i8* %arraydecay8, i1 zeroext false)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare i32 @XGetErrorText(%struct._XDisplay*, i32, i8*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_connection_closed(%struct._XDisplay* %dpy, i8* %error_message, i1 zeroext %ioerror) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %error_message.addr = alloca i8*, align 8
  %ioerror.addr = alloca i8, align 1
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %frame = alloca i64, align 8
  %tail = alloca i64, align 8
  %idx = alloca i64, align 8
  %minibuf_frame = alloca i64, align 8
  %tmp = alloca i64, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store i8* %error_message, i8** %error_message.addr, align 8
  %frombool = zext i1 %ioerror to i8
  store i8 %frombool, i8* %ioerror.addr, align 1
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call %struct.x_display_info* @x_display_info_for_display(%struct._XDisplay* %0)
  store %struct.x_display_info* %call, %struct.x_display_info** %dpyinfo, align 8
  %call1 = call i64 @SPECPDL_INDEX()
  store i64 %call1, i64* %idx, align 8
  %1 = load i8*, i8** %error_message.addr, align 8
  %call2 = call i64 @strlen(i8* %1) #9
  %add = add i64 %call2, 1
  %2 = alloca i8, i64 %add
  store i8* %2, i8** @error_msg, align 8
  %3 = load i8*, i8** @error_msg, align 8
  %4 = load i8*, i8** %error_message.addr, align 8
  %call3 = call i8* @strcpy(i8* %3, i8* %4) #2
  %call4 = call i64 @builtin_lisp_symbol(i32 548)
  %call5 = call i64 @builtin_lisp_symbol(i32 901)
  call void @specbind(i64 %call4, i64 %call5)
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %tobool = icmp ne %struct.x_display_info* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %reference_count = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 5
  %7 = load i32, i32* %reference_count, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %reference_count, align 4
  %8 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %terminal = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %8, i32 0, i32 1
  %9 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %reference_count6 = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 7
  %10 = load i32, i32* %reference_count6, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %reference_count6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load i8, i8* %ioerror.addr, align 1
  %tobool8 = trunc i8 %11 to i1
  br i1 %tobool8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  %12 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 2
  store %struct._XDisplay* null, %struct._XDisplay** %display, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end
  %13 = load i64, i64* @Vframe_list, align 8
  store i64 %13, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %14 = load i64, i64* %tail, align 8
  %and = and i64 %14, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %15 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 0
  %18 = load i64, i64* %car, align 8
  store i64 %18, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %19 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %20 = load i64, i64* %frame, align 8
  %sub12 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub12 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 7
  %23 = load i64, i64* %minibuffer_window, align 8
  %call13 = call %struct.window* @XWINDOW(i64 %23)
  %frame14 = getelementptr inbounds %struct.window, %struct.window* %call13, i32 0, i32 1
  %24 = load i64, i64* %frame14, align 8
  store i64 %24, i64* %minibuf_frame, align 8
  %25 = load i64, i64* %frame, align 8
  %sub15 = sub nsw i64 %25, 5
  %26 = inttoptr i64 %sub15 to i8*
  %27 = bitcast i8* %26 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 26
  %28 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %28, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp16 = icmp eq i32 %bf.cast, 2
  br i1 %cmp16, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %for.body
  %29 = load i64, i64* %minibuf_frame, align 8
  %sub18 = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub18 to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  %output_method19 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 26
  %32 = bitcast i48* %output_method19 to i64*
  %bf.load20 = load i64, i64* %32, align 8
  %bf.lshr21 = lshr i64 %bf.load20, 23
  %bf.clear22 = and i64 %bf.lshr21, 7
  %bf.cast23 = trunc i64 %bf.clear22 to i32
  %cmp24 = icmp eq i32 %bf.cast23, 2
  br i1 %cmp24, label %land.lhs.true.26, label %if.end.36

land.lhs.true.26:                                 ; preds = %land.lhs.true
  %33 = load i64, i64* %frame, align 8
  %34 = load i64, i64* %minibuf_frame, align 8
  %cmp27 = icmp eq i64 %33, %34
  br i1 %cmp27, label %if.end.36, label %land.lhs.true.29

land.lhs.true.29:                                 ; preds = %land.lhs.true.26
  %35 = load i64, i64* %minibuf_frame, align 8
  %sub30 = sub nsw i64 %35, 5
  %36 = inttoptr i64 %sub30 to i8*
  %37 = bitcast i8* %36 to %struct.frame*
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 44
  %39 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %40 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmp31 = icmp eq %struct.x_display_info* %39, %40
  br i1 %cmp31, label %if.then.33, label %if.end.36

if.then.33:                                       ; preds = %land.lhs.true.29
  %41 = load i64, i64* %frame, align 8
  %call34 = call i64 @builtin_lisp_symbol(i32 704)
  %call35 = call i64 @delete_frame(i64 %41, i64 %call34)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.33, %land.lhs.true.29, %land.lhs.true.26, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.36
  %42 = load i64, i64* %tail, align 8
  %sub37 = sub nsw i64 %42, 3
  %43 = inttoptr i64 %sub37 to i8*
  %44 = bitcast i8* %43 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %44, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %45 = load i64, i64* %cdr, align 8
  store i64 %45, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %46 = load i64, i64* @Vframe_list, align 8
  store i64 %46, i64* %tail, align 8
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.70, %for.end
  %47 = load i64, i64* %tail, align 8
  %and39 = and i64 %47, 7
  %conv40 = trunc i64 %and39 to i32
  %cmp41 = icmp eq i32 %conv40, 3
  br i1 %cmp41, label %land.rhs.43, label %land.end.46

land.rhs.43:                                      ; preds = %for.cond.38
  %48 = load i64, i64* %tail, align 8
  %sub44 = sub nsw i64 %48, 3
  %49 = inttoptr i64 %sub44 to i8*
  %50 = bitcast i8* %49 to %struct.Lisp_Cons*
  %car45 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %50, i32 0, i32 0
  %51 = load i64, i64* %car45, align 8
  store i64 %51, i64* %frame, align 8
  br label %land.end.46

land.end.46:                                      ; preds = %land.rhs.43, %for.cond.38
  %52 = phi i1 [ false, %for.cond.38 ], [ true, %land.rhs.43 ]
  br i1 %52, label %for.body.47, label %for.end.74

for.body.47:                                      ; preds = %land.end.46
  %53 = load i64, i64* %frame, align 8
  %sub48 = sub nsw i64 %53, 5
  %54 = inttoptr i64 %sub48 to i8*
  %55 = bitcast i8* %54 to %struct.frame*
  %output_method49 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 26
  %56 = bitcast i48* %output_method49 to i64*
  %bf.load50 = load i64, i64* %56, align 8
  %bf.lshr51 = lshr i64 %bf.load50, 23
  %bf.clear52 = and i64 %bf.lshr51, 7
  %bf.cast53 = trunc i64 %bf.clear52 to i32
  %cmp54 = icmp eq i32 %bf.cast53, 2
  br i1 %cmp54, label %land.lhs.true.56, label %if.end.69

land.lhs.true.56:                                 ; preds = %for.body.47
  %57 = load i64, i64* %frame, align 8
  %sub57 = sub nsw i64 %57, 5
  %58 = inttoptr i64 %sub57 to i8*
  %59 = bitcast i8* %58 to %struct.frame*
  %output_data58 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 62
  %x59 = bitcast %union.output_data* %output_data58 to %struct.x_output**
  %60 = load %struct.x_output*, %struct.x_output** %x59, align 8
  %display_info60 = getelementptr inbounds %struct.x_output, %struct.x_output* %60, i32 0, i32 44
  %61 = load %struct.x_display_info*, %struct.x_display_info** %display_info60, align 8
  %62 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmp61 = icmp eq %struct.x_display_info* %61, %62
  br i1 %cmp61, label %if.then.63, label %if.end.69

if.then.63:                                       ; preds = %land.lhs.true.56
  %63 = load i64, i64* %frame, align 8
  %sub64 = sub nsw i64 %63, 5
  %64 = inttoptr i64 %sub64 to i8*
  %65 = bitcast i8* %64 to %struct.frame*
  %terminal65 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 61
  %66 = load %struct.terminal*, %struct.terminal** %terminal65, align 8
  %kboard = getelementptr inbounds %struct.terminal, %struct.terminal* %66, i32 0, i32 10
  %67 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %call66 = call i64 @builtin_lisp_symbol(i32 901)
  call void @kset_default_minibuffer_frame(%struct.kboard* %67, i64 %call66)
  %68 = load i64, i64* %frame, align 8
  %call67 = call i64 @builtin_lisp_symbol(i32 704)
  %call68 = call i64 @delete_frame(i64 %68, i64 %call67)
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.63, %land.lhs.true.56, %for.body.47
  br label %for.inc.70

for.inc.70:                                       ; preds = %if.end.69
  %69 = load i64, i64* %tail, align 8
  %sub71 = sub nsw i64 %69, 3
  %70 = inttoptr i64 %sub71 to i8*
  %71 = bitcast i8* %70 to %struct.Lisp_Cons*
  %u72 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %71, i32 0, i32 1
  %cdr73 = bitcast %union.anon.11* %u72 to i64*
  %72 = load i64, i64* %cdr73, align 8
  store i64 %72, i64* %tail, align 8
  br label %for.cond.38

for.end.74:                                       ; preds = %land.end.46
  %73 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %tobool75 = icmp ne %struct.x_display_info* %73, null
  br i1 %tobool75, label %if.then.76, label %if.end.79

if.then.76:                                       ; preds = %for.end.74
  %call77 = call i64 @builtin_lisp_symbol(i32 0)
  call void @shut_down_emacs(i32 0, i64 %call77)
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %75 = load i8*, i8** @error_msg, align 8
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([168 x i8], [168 x i8]* @.str.386, i32 0, i32 0), i8* %75)
  call void @emacs_abort() #10
  unreachable

if.end.79:                                        ; preds = %for.end.74
  %76 = load %struct.terminal*, %struct.terminal** @terminal_list, align 8
  %cmp80 = icmp eq %struct.terminal* %76, null
  br i1 %cmp80, label %if.then.82, label %if.end.84

if.then.82:                                       ; preds = %if.end.79
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %78 = load i8*, i8** @error_msg, align 8
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.387, i32 0, i32 0), i8* %78)
  %79 = call i64 @Fkill_emacs(i64 282) #10
  unreachable

if.end.84:                                        ; preds = %if.end.79
  call void @totally_unblock_input()
  %80 = load i64, i64* %idx, align 8
  %call85 = call i64 @builtin_lisp_symbol(i32 0)
  %call86 = call i64 @unbind_to(i64 %80, i64 %call85)
  call void @clear_waiting_for_input()
  %81 = load i8*, i8** @error_msg, align 8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.388, i32 0, i32 0), i8* %81) #10
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #6

declare void @specbind(i64, i64) #1

declare i64 @delete_frame(i64, i64) #1

declare void @kset_default_minibuffer_frame(%struct.kboard*, i64) #1

declare void @shut_down_emacs(i32, i64) #1

; Function Attrs: noreturn
declare i64 @Fkill_emacs(i64) #4

declare void @clear_waiting_for_input() #1

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #6

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #3

declare i32 @XDisplayKeycodes(%struct._XDisplay*, i32*, i32*) #1

declare i64* @XGetKeyboardMapping(%struct._XDisplay*, i8 zeroext, i32, i32*) #1

declare %struct.XModifierKeymap* @XGetModifierMapping(%struct._XDisplay*) #1

declare i32 @XFreeModifiermap(%struct.XModifierKeymap*) #1

declare i8* @egetenv(i8*) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @x_probe_xfixes_extension(%struct._XDisplay* %dpy) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %major = alloca i32, align 4
  %minor = alloca i32, align 4
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call i32 @XFixesQueryVersion(%struct._XDisplay* %0, i32* %major, i32* %minor)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %major, align 4
  %cmp = icmp sge i32 %1, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  ret i1 %2
}

; Function Attrs: nounwind uwtable
define internal void @xfixes_toggle_visible_pointer(%struct.frame* %f, i1 zeroext %invisible) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %invisible.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %invisible to i8
  store i8 %frombool, i8* %invisible.addr, align 1
  %0 = load i8, i8* %invisible.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 2
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 9
  %7 = load i64, i64* %window_desc, align 8
  call void @XFixesHideCursor(%struct._XDisplay* %4, i64 %7)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %display_info5 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 44
  %10 = load %struct.x_display_info*, %struct.x_display_info** %display_info5, align 8
  %display6 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 2
  %11 = load %struct._XDisplay*, %struct._XDisplay** %display6, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %window_desc9 = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 9
  %14 = load i64, i64* %window_desc9, align 8
  call void @XFixesShowCursor(%struct._XDisplay* %11, i64 %14)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %invisible.addr, align 1
  %tobool10 = trunc i8 %15 to i1
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 26
  %17 = bitcast i48* %pointer_invisible to i64*
  %18 = zext i1 %tobool10 to i64
  %bf.load = load i64, i64* %17, align 8
  %bf.shl = shl i64 %18, 21
  %bf.clear = and i64 %bf.load, -2097153
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %17, align 8
  %bf.result.cast = trunc i64 %18 to i8
  %tobool11 = trunc i8 %bf.result.cast to i1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_toggle_visible_pointer(%struct.frame* %f, i1 zeroext %invisible) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %invisible.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %invisible to i8
  store i8 %frombool, i8* %invisible.addr, align 1
  %0 = load i8, i8* %invisible.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 2
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 9
  %7 = load i64, i64* %window_desc, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %display_info5 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 44
  %10 = load %struct.x_display_info*, %struct.x_display_info** %display_info5, align 8
  %invisible_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 18
  %11 = load i64, i64* %invisible_cursor, align 8
  %call = call i32 @XDefineCursor(%struct._XDisplay* %4, i64 %7, i64 %11)
  br label %if.end

if.else:                                          ; preds = %entry
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data6 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x7 = bitcast %union.output_data* %output_data6 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x7, align 8
  %display_info8 = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 44
  %14 = load %struct.x_display_info*, %struct.x_display_info** %display_info8, align 8
  %display9 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 2
  %15 = load %struct._XDisplay*, %struct._XDisplay** %display9, align 8
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %window_desc12 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 9
  %18 = load i64, i64* %window_desc12, align 8
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x14, align 8
  %current_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 41
  %21 = load i64, i64* %current_cursor, align 8
  %call15 = call i32 @XDefineCursor(%struct._XDisplay* %15, i64 %18, i64 %21)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = load i8, i8* %invisible.addr, align 1
  %tobool16 = trunc i8 %22 to i1
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %pointer_invisible to i64*
  %25 = zext i1 %tobool16 to i64
  %bf.load = load i64, i64* %24, align 8
  %bf.shl = shl i64 %25, 21
  %bf.clear = and i64 %bf.load, -2097153
  %bf.set = or i64 %bf.clear, %bf.shl
  store i64 %bf.set, i64* %24, align 8
  %bf.result.cast = trunc i64 %25 to i8
  %tobool17 = trunc i8 %bf.result.cast to i1
  ret void
}

; Function Attrs: nounwind uwtable
define internal i64 @make_invisible_cursor(%struct.x_display_info* %dpyinfo) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %pix = alloca i64, align 8
  %col = alloca %struct.XColor, align 8
  %c = alloca i64, align 8
  %pixc = alloca i64, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  %0 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %0, i32 0, i32 2
  %1 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %1, %struct._XDisplay** %dpy, align 8
  store i64 0, i64* %c, align 8
  %2 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  call void @x_catch_errors(%struct._XDisplay* %2)
  %3 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %root_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 14
  %5 = load i64, i64* %root_window, align 8
  %call = call i64 @XCreateBitmapFromData(%struct._XDisplay* %3, i64 %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @make_invisible_cursor.no_data, i32 0, i32 0), i32 1, i32 1)
  store i64 %call, i64* %pix, align 8
  %6 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call1 = call zeroext i1 @x_had_errors_p(%struct._XDisplay* %6)
  br i1 %call1, label %if.end.8, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %7 = load i64, i64* %pix, align 8
  %cmp = icmp ne i64 %7, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %land.lhs.true
  %pixel = getelementptr inbounds %struct.XColor, %struct.XColor* %col, i32 0, i32 0
  store i64 0, i64* %pixel, align 8
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %col, i32 0, i32 3
  store i16 0, i16* %blue, align 2
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %col, i32 0, i32 2
  store i16 0, i16* %green, align 2
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %col, i32 0, i32 1
  store i16 0, i16* %red, align 2
  %flags = getelementptr inbounds %struct.XColor, %struct.XColor* %col, i32 0, i32 4
  store i8 7, i8* %flags, align 1
  %8 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %9 = load i64, i64* %pix, align 8
  %10 = load i64, i64* %pix, align 8
  %call2 = call i64 @XCreatePixmapCursor(%struct._XDisplay* %8, i64 %9, i64 %10, %struct.XColor* %col, %struct.XColor* %col, i32 0, i32 0)
  store i64 %call2, i64* %pixc, align 8
  %11 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %call3 = call zeroext i1 @x_had_errors_p(%struct._XDisplay* %11)
  br i1 %call3, label %if.end, label %land.lhs.true.4

land.lhs.true.4:                                  ; preds = %if.then
  %12 = load i64, i64* %pixc, align 8
  %cmp5 = icmp ne i64 %12, 0
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %land.lhs.true.4
  %13 = load i64, i64* %pixc, align 8
  store i64 %13, i64* %c, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.6, %land.lhs.true.4, %if.then
  %14 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %15 = load i64, i64* %pix, align 8
  %call7 = call i32 @XFreePixmap(%struct._XDisplay* %14, i64 %15)
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %land.lhs.true, %entry
  call void @x_uncatch_errors()
  %16 = load i64, i64* %c, align 8
  ret i64 %16
}

declare i32 @XFixesQueryVersion(%struct._XDisplay*, i32*, i32*) #1

declare void @XFixesHideCursor(%struct._XDisplay*, i64) #1

declare void @XFixesShowCursor(%struct._XDisplay*, i64) #1

declare i32 @XDefineCursor(%struct._XDisplay*, i64, i64) #1

declare i64 @XCreateBitmapFromData(%struct._XDisplay*, i64, i8*, i32, i32) #1

declare i64 @XCreatePixmapCursor(%struct._XDisplay*, i64, i64, %struct.XColor*, %struct.XColor*, i32, i32) #1

declare i32 @XFreePixmap(%struct._XDisplay*, i64) #1

declare i32 @XRegisterIMInstantiateCallback(%struct._XDisplay*, %struct._XrmHashBucketRec*, i8*, i8*, void (%struct._XDisplay*, i8*, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @xim_instantiate_callback(%struct._XDisplay* %display, i8* %client_data, i8* %call_data) #0 {
entry:
  %display.addr = alloca %struct._XDisplay*, align 8
  %client_data.addr = alloca i8*, align 8
  %call_data.addr = alloca i8*, align 8
  %xim_inst = alloca %struct.xim_inst_t*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %tail = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %w = alloca %struct.window*, align 8
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  store i8* %call_data, i8** %call_data.addr, align 8
  %0 = load i8*, i8** %client_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.xim_inst_t*
  store %struct.xim_inst_t* %1, %struct.xim_inst_t** %xim_inst, align 8
  %2 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %dpyinfo1 = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %2, i32 0, i32 0
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo1, align 8
  store %struct.x_display_info* %3, %struct.x_display_info** %dpyinfo, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xim = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 85
  %5 = load %struct._XIM*, %struct._XIM** %xim, align 8
  %tobool = icmp ne %struct._XIM* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.38

if.end:                                           ; preds = %entry
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %7 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %resource_name = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %7, i32 0, i32 1
  %8 = load i8*, i8** %resource_name, align 8
  call void @xim_open_dpy(%struct.x_display_info* %6, i8* %8)
  %9 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xim2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 85
  %10 = load %struct._XIM*, %struct._XIM** %xim2, align 8
  %tobool3 = icmp ne %struct._XIM* %10, null
  br i1 %tobool3, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %if.end
  %11 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %reference_count = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 5
  %12 = load i32, i32* %reference_count, align 4
  %cmp = icmp sgt i32 %12, 0
  br i1 %cmp, label %if.then.4, label %if.end.38

if.then.4:                                        ; preds = %land.lhs.true
  call void @block_input()
  %13 = load i64, i64* @Vframe_list, align 8
  store i64 %13, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.4
  %14 = load i64, i64* %tail, align 8
  %and = and i64 %14, 7
  %conv = trunc i64 %and to i32
  %cmp5 = icmp eq i32 %conv, 3
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %15 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 0
  %18 = load i64, i64* %car, align 8
  store i64 %18, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %19 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %19, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %20 = load i64, i64* %frame, align 8
  %sub7 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub7 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  store %struct.frame* %22, %struct.frame** %f, align 8
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 26
  %24 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %24, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp8 = icmp eq i32 %bf.cast, 2
  br i1 %cmp8, label %land.lhs.true.10, label %if.end.36

land.lhs.true.10:                                 ; preds = %for.body
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %26 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 44
  %27 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %28 = load %struct.xim_inst_t*, %struct.xim_inst_t** %xim_inst, align 8
  %dpyinfo11 = getelementptr inbounds %struct.xim_inst_t, %struct.xim_inst_t* %28, i32 0, i32 0
  %29 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo11, align 8
  %cmp12 = icmp eq %struct.x_display_info* %27, %29
  br i1 %cmp12, label %if.then.14, label %if.end.36

if.then.14:                                       ; preds = %land.lhs.true.10
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data15 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 62
  %x16 = bitcast %union.output_data* %output_data15 to %struct.x_output**
  %31 = load %struct.x_output*, %struct.x_output** %x16, align 8
  %xic = getelementptr inbounds %struct.x_output, %struct.x_output* %31, i32 0, i32 47
  %32 = load %struct._XIC*, %struct._XIC** %xic, align 8
  %cmp17 = icmp eq %struct._XIC* %32, null
  br i1 %cmp17, label %if.then.19, label %if.end.35

if.then.19:                                       ; preds = %if.then.14
  %33 = load %struct.frame*, %struct.frame** %f, align 8
  call void @create_frame_xic(%struct.frame* %33)
  %34 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data20 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 62
  %x21 = bitcast %union.output_data* %output_data20 to %struct.x_output**
  %35 = load %struct.x_output*, %struct.x_output** %x21, align 8
  %xic_style = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 48
  %36 = load i64, i64* %xic_style, align 8
  %and22 = and i64 %36, 256
  %tobool23 = icmp ne i64 %and22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.then.19
  %37 = load %struct.frame*, %struct.frame** %f, align 8
  call void @xic_set_statusarea(%struct.frame* %37)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %if.then.19
  %38 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %39 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %xic_style28 = getelementptr inbounds %struct.x_output, %struct.x_output* %39, i32 0, i32 48
  %40 = load i64, i64* %xic_style28, align 8
  %and29 = and i64 %40, 4
  %tobool30 = icmp ne i64 %and29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.34

if.then.31:                                       ; preds = %if.end.25
  %41 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 6
  %42 = load i64, i64* %selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %42)
  store %struct.window* %call, %struct.window** %w, align 8
  %43 = load %struct.window*, %struct.window** %w, align 8
  %44 = load %struct.window*, %struct.window** %w, align 8
  %cursor = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 49
  %x32 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor, i32 0, i32 0
  %45 = load i32, i32* %x32, align 4
  %46 = load %struct.window*, %struct.window** %w, align 8
  %cursor33 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 49
  %y = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %cursor33, i32 0, i32 1
  %47 = load i32, i32* %y, align 4
  call void @xic_set_preeditarea(%struct.window* %43, i32 %45, i32 %47)
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.31, %if.end.25
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.14
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %land.lhs.true.10, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.36
  %48 = load i64, i64* %tail, align 8
  %sub37 = sub nsw i64 %48, 3
  %49 = inttoptr i64 %sub37 to i8*
  %50 = bitcast i8* %49 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %50, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %51 = load i64, i64* %cdr, align 8
  store i64 %51, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  call void @unblock_input()
  br label %if.end.38

if.end.38:                                        ; preds = %if.then, %for.end, %land.lhs.true, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xim_open_dpy(%struct.x_display_info* %dpyinfo, i8* %resource_name) #0 {
entry:
  %dpyinfo.addr = alloca %struct.x_display_info*, align 8
  %resource_name.addr = alloca i8*, align 8
  %xim = alloca %struct._XIM*, align 8
  %destroy = alloca %struct.XIMCallback, align 8
  store %struct.x_display_info* %dpyinfo, %struct.x_display_info** %dpyinfo.addr, align 8
  store i8* %resource_name, i8** %resource_name.addr, align 8
  %0 = load i8, i8* @use_xim, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %1, i32 0, i32 85
  %2 = load %struct._XIM*, %struct._XIM** %xim1, align 8
  %tobool2 = icmp ne %struct._XIM* %2, null
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 85
  %4 = load %struct._XIM*, %struct._XIM** %xim4, align 8
  %call = call i32 @XCloseIM(%struct._XIM* %4)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %5 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %5, i32 0, i32 2
  %6 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xrdb = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 21
  %8 = load %struct._XrmHashBucketRec*, %struct._XrmHashBucketRec** %xrdb, align 8
  %9 = load i8*, i8** %resource_name.addr, align 8
  %call5 = call %struct._XIM* @XOpenIM(%struct._XDisplay* %6, %struct._XrmHashBucketRec* %8, i8* %9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @emacs_class, i32 0, i32 0))
  store %struct._XIM* %call5, %struct._XIM** %xim, align 8
  %10 = load %struct._XIM*, %struct._XIM** %xim, align 8
  %11 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim6 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 85
  store %struct._XIM* %10, %struct._XIM** %xim6, align 8
  %12 = load %struct._XIM*, %struct._XIM** %xim, align 8
  %tobool7 = icmp ne %struct._XIM* %12, null
  br i1 %tobool7, label %if.then.8, label %if.end.11

if.then.8:                                        ; preds = %if.end
  %13 = load %struct._XIM*, %struct._XIM** %xim, align 8
  %14 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim_styles = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 86
  %call9 = call i8* (%struct._XIM*, ...) @XGetIMValues(%struct._XIM* %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.392, i32 0, i32 0), %struct.XIMStyles** %xim_styles, i8* null)
  %callback = getelementptr inbounds %struct.XIMCallback, %struct.XIMCallback* %destroy, i32 0, i32 1
  store void (%struct._XIM*, i8*, i8*)* @xim_destroy_callback, void (%struct._XIM*, i8*, i8*)** %callback, align 8
  %15 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %16 = bitcast %struct.x_display_info* %15 to i8*
  %client_data = getelementptr inbounds %struct.XIMCallback, %struct.XIMCallback* %destroy, i32 0, i32 0
  store i8* %16, i8** %client_data, align 8
  %17 = load %struct._XIM*, %struct._XIM** %xim, align 8
  %call10 = call i8* (%struct._XIM*, ...) @XSetIMValues(%struct._XIM* %17, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.393, i32 0, i32 0), %struct.XIMCallback* %destroy, i8* null)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.8, %if.end
  br label %if.end.13

if.else:                                          ; preds = %entry
  %18 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo.addr, align 8
  %xim12 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %18, i32 0, i32 85
  store %struct._XIM* null, %struct._XIM** %xim12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.end.11
  ret void
}

declare void @create_frame_xic(%struct.frame*) #1

declare void @xic_set_preeditarea(%struct.window*, i32, i32) #1

declare i32 @XCloseIM(%struct._XIM*) #1

declare %struct._XIM* @XOpenIM(%struct._XDisplay*, %struct._XrmHashBucketRec*, i8*, i8*) #1

declare i8* @XGetIMValues(%struct._XIM*, ...) #1

; Function Attrs: nounwind uwtable
define internal void @xim_destroy_callback(%struct._XIM* %xim, i8* %client_data, i8* %call_data) #0 {
entry:
  %xim.addr = alloca %struct._XIM*, align 8
  %client_data.addr = alloca i8*, align 8
  %call_data.addr = alloca i8*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %frame = alloca i64, align 8
  %tail = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store %struct._XIM* %xim, %struct._XIM** %xim.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  store i8* %call_data, i8** %call_data.addr, align 8
  %0 = load i8*, i8** %client_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.x_display_info*
  store %struct.x_display_info* %1, %struct.x_display_info** %dpyinfo, align 8
  call void @block_input()
  %2 = load i64, i64* @Vframe_list, align 8
  store i64 %2, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %tail, align 8
  %and = and i64 %3, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %4 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %4, 3
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %6, i32 0, i32 0
  %7 = load i64, i64* %car, align 8
  store i64 %7, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load i64, i64* %frame, align 8
  %sub2 = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub2 to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  store %struct.frame* %11, %struct.frame** %f, align 8
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 26
  %13 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %13, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp3 = icmp eq i32 %bf.cast, 2
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 44
  %16 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %17 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %cmp5 = icmp eq %struct.x_display_info* %16, %17
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %xic = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 47
  store %struct._XIC* null, %struct._XIC** %xic, align 8
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  call void @xic_free_xfontset(%struct.frame* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %21 = load i64, i64* %tail, align 8
  %sub9 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub9 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %24 = load i64, i64* %cdr, align 8
  store i64 %24, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %25 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xim10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %25, i32 0, i32 85
  store %struct._XIM* null, %struct._XIM** %xim10, align 8
  %26 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %xim_styles = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 86
  %27 = load %struct.XIMStyles*, %struct.XIMStyles** %xim_styles, align 8
  %28 = bitcast %struct.XIMStyles* %27 to i8*
  %call = call i32 @XFree(i8* %28)
  call void @unblock_input()
  ret void
}

declare i8* @XSetIMValues(%struct._XIM*, ...) #1

declare void @xic_free_xfontset(%struct.frame*) #1

declare i32 @XUnregisterIMInstantiateCallback(%struct._XDisplay*, %struct._XrmHashBucketRec*, i8*, i8*, void (%struct._XDisplay*, i8*, i8*)*, i8*) #1

declare void @x_session_close() #1

declare void @delete_terminal(%struct.terminal*) #1

declare %struct.terminal* @create_terminal(i32, %struct.redisplay_interface*) #1

; Function Attrs: nounwind uwtable
define internal void @x_clear_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 5
  %1 = load i64, i64* %root_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %1)
  call void @mark_window_cursors_off(%struct.window* %call)
  call void @block_input()
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_clear_window(%struct.frame* %2)
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_scroll_bar_clear(%struct.frame* %3)
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 13
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %6, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %edit_widget3 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 13
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget3, align 8
  call void @gtk_widget_queue_draw(%struct._GtkWidget* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_ins_del_lines(%struct.frame* %f, i32 %vpos, i32 %n) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %vpos.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %vpos, i32* %vpos.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @emacs_abort() #10
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: noreturn nounwind uwtable
define internal void @x_delete_glyphs(%struct.frame* %f, i32 %n) #8 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %n.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @emacs_abort() #10
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTring_bell(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %tobool = icmp ne %struct._XDisplay* %3, null
  br i1 %tobool, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  %4 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 496), align 1
  %tobool1 = trunc i8 %4 to i1
  br i1 %tobool1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @XTflash(%struct.frame* %5)
  br label %if.end

if.else:                                          ; preds = %if.then
  call void @block_input()
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %display_info5 = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 44
  %8 = load %struct.x_display_info*, %struct.x_display_info** %display_info5, align 8
  %display6 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %8, i32 0, i32 2
  %9 = load %struct._XDisplay*, %struct._XDisplay** %display6, align 8
  %call = call i32 @XkbBell(%struct._XDisplay* %9, i64 0, i32 0, i64 0)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_update_begin(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_update_end(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 44
  %4 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 25
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data1 to %struct.tty_output**
  %6 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %display_info2 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %6, i32 0, i32 0
  %7 = load %struct.tty_display_info*, %struct.tty_display_info** %display_info2, align 8
  %mouse_highlight3 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %7, i32 0, i32 14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.Mouse_HLInfo* [ %mouse_highlight, %cond.true ], [ %mouse_highlight3, %cond.false ]
  %mouse_face_defer = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %cond, i32 0, i32 12
  %bf.load4 = load i8, i8* %mouse_face_defer, align 8
  %bf.clear5 = and i8 %bf.load4, -3
  store i8 %bf.clear5, i8* %mouse_face_defer, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @XTread_socket(%struct.terminal* %terminal, %struct.input_event* %hold_quit) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  %hold_quit.addr = alloca %struct.input_event*, align 8
  %count = alloca i32, align 4
  %event_found = alloca i8, align 1
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  store %struct.input_event* %hold_quit, %struct.input_event** %hold_quit.addr, align 8
  store i32 0, i32* %count, align 4
  store i8 0, i8* %event_found, align 1
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 12
  %x = bitcast %union.display_info* %display_info to %struct.x_display_info**
  %1 = load %struct.x_display_info*, %struct.x_display_info** %x, align 8
  store %struct.x_display_info* %1, %struct.x_display_info** %dpyinfo, align 8
  call void @block_input()
  %2 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** @XTread_socket_fake_io_error, align 8
  %cmp = icmp eq %struct.x_display_info* %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.x_display_info* null, %struct.x_display_info** @XTread_socket_fake_io_error, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 2
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call = call i32 @x_io_error_quitter(%struct._XDisplay* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end.5, %if.end
  %call1 = call i32 @gtk_events_pending()
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %count, align 4
  store i32 %6, i32* @current_count, align 4
  %7 = load %struct.input_event*, %struct.input_event** %hold_quit.addr, align 8
  store %struct.input_event* %7, %struct.input_event** @current_hold_quit, align 8
  %call2 = call i32 @gtk_main_iteration()
  %8 = load i32, i32* @current_count, align 4
  store i32 %8, i32* %count, align 4
  store i32 -1, i32* @current_count, align 4
  store %struct.input_event* null, %struct.input_event** @current_hold_quit, align 8
  %9 = load i32, i32* @current_finish, align 4
  %cmp3 = icmp eq i32 %9, 1
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %while.body
  br label %while.end

if.end.5:                                         ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then.4, %while.cond
  %10 = load i8, i8* %event_found, align 1
  %tobool6 = trunc i8 %10 to i1
  br i1 %tobool6, label %if.end.16, label %if.then.7

if.then.7:                                        ; preds = %while.end
  %11 = load i32, i32* @x_noop_count, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* @x_noop_count, align 4
  %12 = load i32, i32* @x_noop_count, align 4
  %cmp8 = icmp sge i32 %12, 100
  br i1 %cmp8, label %if.then.9, label %if.end.15

if.then.9:                                        ; preds = %if.then.7
  store i32 0, i32* @x_noop_count, align 4
  %13 = load %struct.x_display_info*, %struct.x_display_info** @next_noop_dpyinfo, align 8
  %cmp10 = icmp eq %struct.x_display_info* %13, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.9
  %14 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  store %struct.x_display_info* %14, %struct.x_display_info** @next_noop_dpyinfo, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.then.9
  %15 = load %struct.x_display_info*, %struct.x_display_info** @next_noop_dpyinfo, align 8
  %display13 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 2
  %16 = load %struct._XDisplay*, %struct._XDisplay** %display13, align 8
  %call14 = call i32 @XNoOp(%struct._XDisplay* %16)
  %17 = load %struct.x_display_info*, %struct.x_display_info** @next_noop_dpyinfo, align 8
  %next = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 0
  %18 = load %struct.x_display_info*, %struct.x_display_info** %next, align 8
  store %struct.x_display_info* %18, %struct.x_display_info** @next_noop_dpyinfo, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.12, %if.then.7
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %while.end
  %19 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_pending_autoraise_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %19, i32 0, i32 74
  %20 = load %struct.frame*, %struct.frame** %x_pending_autoraise_frame, align 8
  %tobool17 = icmp ne %struct.frame* %20, null
  br i1 %tobool17, label %if.then.18, label %if.end.21

if.then.18:                                       ; preds = %if.end.16
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_pending_autoraise_frame19 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 74
  %22 = load %struct.frame*, %struct.frame** %x_pending_autoraise_frame19, align 8
  call void @x_raise_frame(%struct.frame* %22)
  %23 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %x_pending_autoraise_frame20 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %23, i32 0, i32 74
  store %struct.frame* null, %struct.frame** %x_pending_autoraise_frame20, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.18, %if.end.16
  call void @unblock_input()
  %24 = load i32, i32* %count, align 4
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal void @XTframe_up_to_date(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %hlinfo = alloca %struct.Mouse_HLInfo*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 2
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 25
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data7 to %struct.tty_output**
  %8 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %display_info8 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %8, i32 0, i32 0
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %display_info8, align 8
  %mouse_highlight9 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %9, i32 0, i32 14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.Mouse_HLInfo* [ %mouse_highlight, %cond.true ], [ %mouse_highlight9, %cond.false ]
  store %struct.Mouse_HLInfo* %cond, %struct.Mouse_HLInfo** %hlinfo, align 8
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %11 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_frame = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %11, i32 0, i32 9
  %12 = load %struct.frame*, %struct.frame** %mouse_face_mouse_frame, align 8
  %cmp10 = icmp eq %struct.frame* %10, %12
  br i1 %cmp10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %cond.end
  call void @block_input()
  %13 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_frame12 = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %13, i32 0, i32 9
  %14 = load %struct.frame*, %struct.frame** %mouse_face_mouse_frame12, align 8
  %15 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_x = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %15, i32 0, i32 10
  %16 = load i32, i32* %mouse_face_mouse_x, align 4
  %17 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_y = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %17, i32 0, i32 11
  %18 = load i32, i32* %mouse_face_mouse_y, align 4
  call void @note_mouse_highlight(%struct.frame* %14, i32 %16, i32 %18)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then.11, %cond.end
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTmouse_position(%struct.frame** %fp, i32 %insist, i64* %bar_window, i32* %part, i64* %x, i64* %y, i64* %timestamp) #0 {
entry:
  %fp.addr = alloca %struct.frame**, align 8
  %insist.addr = alloca i32, align 4
  %bar_window.addr = alloca i64*, align 8
  %part.addr = alloca i32*, align 8
  %x.addr = alloca i64*, align 8
  %y.addr = alloca i64*, align 8
  %timestamp.addr = alloca i64*, align 8
  %f1 = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  %root = alloca i64, align 8
  %root_x = alloca i32, align 4
  %root_y = alloca i32, align 4
  %dummy_window = alloca i64, align 8
  %dummy = alloca i32, align 4
  %frame = alloca i64, align 8
  %tail = alloca i64, align 8
  %win = alloca i64, align 8
  %child = alloca i64, align 8
  %win_x = alloca i32, align 4
  %win_y = alloca i32, align 4
  %parent_x = alloca i32, align 4
  %parent_y = alloca i32, align 4
  %bar85 = alloca %struct.scroll_bar*, align 8
  store %struct.frame** %fp, %struct.frame*** %fp.addr, align 8
  store i32 %insist, i32* %insist.addr, align 4
  store i64* %bar_window, i64** %bar_window.addr, align 8
  store i32* %part, i32** %part.addr, align 8
  store i64* %x, i64** %x.addr, align 8
  store i64* %y, i64** %y.addr, align 8
  store i64* %timestamp, i64** %timestamp.addr, align 8
  %0 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %0, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %3, %struct.x_display_info** %dpyinfo, align 8
  call void @block_input()
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 78
  %5 = load %struct.scroll_bar*, %struct.scroll_bar** %last_mouse_scroll_bar, align 8
  %tobool = icmp ne %struct.scroll_bar* %5, null
  br i1 %tobool, label %land.lhs.true, label %if.else.5

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %insist.addr, align 4
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.else.5

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar2 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 78
  %8 = load %struct.scroll_bar*, %struct.scroll_bar** %last_mouse_scroll_bar2, align 8
  store %struct.scroll_bar* %8, %struct.scroll_bar** %bar, align 8
  %9 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %9, i32 0, i32 12
  %10 = load i8, i8* %horizontal, align 1
  %tobool3 = trunc i8 %10 to i1
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %11 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %12 = load i64*, i64** %bar_window.addr, align 8
  %13 = load i32*, i32** %part.addr, align 8
  %14 = load i64*, i64** %x.addr, align 8
  %15 = load i64*, i64** %y.addr, align 8
  %16 = load i64*, i64** %timestamp.addr, align 8
  call void @x_horizontal_scroll_bar_report_motion(%struct.frame** %11, i64* %12, i32* %13, i64* %14, i64* %15, i64* %16)
  br label %if.end

if.else:                                          ; preds = %if.then
  %17 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %18 = load i64*, i64** %bar_window.addr, align 8
  %19 = load i32*, i32** %part.addr, align 8
  %20 = load i64*, i64** %x.addr, align 8
  %21 = load i64*, i64** %y.addr, align 8
  %22 = load i64*, i64** %timestamp.addr, align 8
  call void @x_scroll_bar_report_motion(%struct.frame** %17, i64* %18, i32* %19, i64* %20, i64* %21, i64* %22)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %if.end.123

if.else.5:                                        ; preds = %land.lhs.true, %entry
  %23 = load i64, i64* @Vframe_list, align 8
  store i64 %23, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.5
  %24 = load i64, i64* %tail, align 8
  %and = and i64 %24, 7
  %conv = trunc i64 %and to i32
  %cmp6 = icmp eq i32 %conv, 3
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %25 = load i64, i64* %tail, align 8
  %sub = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 0
  %28 = load i64, i64* %car, align 8
  store i64 %28, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %29 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %29, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %30 = load i64, i64* %frame, align 8
  %sub8 = sub nsw i64 %30, 5
  %31 = inttoptr i64 %sub8 to i8*
  %32 = bitcast i8* %31 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 26
  %33 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %33, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp9 = icmp eq i32 %bf.cast, 2
  br i1 %cmp9, label %land.lhs.true.11, label %if.end.26

land.lhs.true.11:                                 ; preds = %for.body
  %34 = load i64, i64* %frame, align 8
  %sub12 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub12 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %37 = load %struct.x_output*, %struct.x_output** %x14, align 8
  %display_info15 = getelementptr inbounds %struct.x_output, %struct.x_output* %37, i32 0, i32 44
  %38 = load %struct.x_display_info*, %struct.x_display_info** %display_info15, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %38, i32 0, i32 2
  %39 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %40 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %41 = load %struct.frame*, %struct.frame** %40, align 8
  %output_data16 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 62
  %x17 = bitcast %union.output_data* %output_data16 to %struct.x_output**
  %42 = load %struct.x_output*, %struct.x_output** %x17, align 8
  %display_info18 = getelementptr inbounds %struct.x_output, %struct.x_output* %42, i32 0, i32 44
  %43 = load %struct.x_display_info*, %struct.x_display_info** %display_info18, align 8
  %display19 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %43, i32 0, i32 2
  %44 = load %struct._XDisplay*, %struct._XDisplay** %display19, align 8
  %cmp20 = icmp eq %struct._XDisplay* %39, %44
  br i1 %cmp20, label %if.then.22, label %if.end.26

if.then.22:                                       ; preds = %land.lhs.true.11
  %45 = load i64, i64* %frame, align 8
  %sub23 = sub nsw i64 %45, 5
  %46 = inttoptr i64 %sub23 to i8*
  %47 = bitcast i8* %46 to %struct.frame*
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 26
  %48 = bitcast i48* %mouse_moved to i64*
  %bf.load24 = load i64, i64* %48, align 8
  %bf.clear25 = and i64 %bf.load24, -1048577
  store i64 %bf.clear25, i64* %48, align 8
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.22, %land.lhs.true.11, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %49 = load i64, i64* %tail, align 8
  %sub27 = sub nsw i64 %49, 3
  %50 = inttoptr i64 %sub27 to i8*
  %51 = bitcast i8* %50 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %51, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %52 = load i64, i64* %cdr, align 8
  store i64 %52, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %53 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar28 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %53, i32 0, i32 78
  store %struct.scroll_bar* null, %struct.scroll_bar** %last_mouse_scroll_bar28, align 8
  %54 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %55 = load %struct.frame*, %struct.frame** %54, align 8
  %output_data29 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 62
  %x30 = bitcast %union.output_data* %output_data29 to %struct.x_output**
  %56 = load %struct.x_output*, %struct.x_output** %x30, align 8
  %display_info31 = getelementptr inbounds %struct.x_output, %struct.x_output* %56, i32 0, i32 44
  %57 = load %struct.x_display_info*, %struct.x_display_info** %display_info31, align 8
  %display32 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %57, i32 0, i32 2
  %58 = load %struct._XDisplay*, %struct._XDisplay** %display32, align 8
  %59 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %60 = load %struct.frame*, %struct.frame** %59, align 8
  %output_data33 = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 62
  %x34 = bitcast %union.output_data* %output_data33 to %struct.x_output**
  %61 = load %struct.x_output*, %struct.x_output** %x34, align 8
  %display_info35 = getelementptr inbounds %struct.x_output, %struct.x_output* %61, i32 0, i32 44
  %62 = load %struct.x_display_info*, %struct.x_display_info** %display_info35, align 8
  %display36 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %62, i32 0, i32 2
  %63 = load %struct._XDisplay*, %struct._XDisplay** %display36, align 8
  %64 = bitcast %struct._XDisplay* %63 to %struct.anon.12*
  %default_screen = getelementptr inbounds %struct.anon.12, %struct.anon.12* %64, i32 0, i32 33
  %65 = load i32, i32* %default_screen, align 4
  %idxprom = sext i32 %65 to i64
  %66 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %67 = load %struct.frame*, %struct.frame** %66, align 8
  %output_data37 = getelementptr inbounds %struct.frame, %struct.frame* %67, i32 0, i32 62
  %x38 = bitcast %union.output_data* %output_data37 to %struct.x_output**
  %68 = load %struct.x_output*, %struct.x_output** %x38, align 8
  %display_info39 = getelementptr inbounds %struct.x_output, %struct.x_output* %68, i32 0, i32 44
  %69 = load %struct.x_display_info*, %struct.x_display_info** %display_info39, align 8
  %display40 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %69, i32 0, i32 2
  %70 = load %struct._XDisplay*, %struct._XDisplay** %display40, align 8
  %71 = bitcast %struct._XDisplay* %70 to %struct.anon.12*
  %screens = getelementptr inbounds %struct.anon.12, %struct.anon.12* %71, i32 0, i32 35
  %72 = load %struct.Screen*, %struct.Screen** %screens, align 8
  %arrayidx = getelementptr inbounds %struct.Screen, %struct.Screen* %72, i64 %idxprom
  %root41 = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx, i32 0, i32 2
  %73 = load i64, i64* %root41, align 8
  %call = call i32 @XQueryPointer(%struct._XDisplay* %58, i64 %73, i64* %root, i64* %dummy_window, i32* %root_x, i32* %root_y, i32* %dummy, i32* %dummy, i32* %dummy)
  store i32 0, i32* %parent_x, align 4
  store i32 0, i32* %parent_y, align 4
  %74 = load i64, i64* %root, align 8
  store i64 %74, i64* %win, align 8
  %75 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %76 = load %struct.frame*, %struct.frame** %75, align 8
  %output_data42 = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 62
  %x43 = bitcast %union.output_data* %output_data42 to %struct.x_output**
  %77 = load %struct.x_output*, %struct.x_output** %x43, align 8
  %display_info44 = getelementptr inbounds %struct.x_output, %struct.x_output* %77, i32 0, i32 44
  %78 = load %struct.x_display_info*, %struct.x_display_info** %display_info44, align 8
  %display45 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %78, i32 0, i32 2
  %79 = load %struct._XDisplay*, %struct._XDisplay** %display45, align 8
  call void @x_catch_errors(%struct._XDisplay* %79)
  %80 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %call46 = call zeroext i1 @x_mouse_grabbed(%struct.x_display_info* %80)
  br i1 %call46, label %if.then.47, label %if.else.56

if.then.47:                                       ; preds = %for.end
  %81 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %82 = load %struct.frame*, %struct.frame** %81, align 8
  %output_data48 = getelementptr inbounds %struct.frame, %struct.frame* %82, i32 0, i32 62
  %x49 = bitcast %union.output_data* %output_data48 to %struct.x_output**
  %83 = load %struct.x_output*, %struct.x_output** %x49, align 8
  %display_info50 = getelementptr inbounds %struct.x_output, %struct.x_output* %83, i32 0, i32 44
  %84 = load %struct.x_display_info*, %struct.x_display_info** %display_info50, align 8
  %display51 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %84, i32 0, i32 2
  %85 = load %struct._XDisplay*, %struct._XDisplay** %display51, align 8
  %86 = load i64, i64* %root, align 8
  %87 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %87, i32 0, i32 75
  %88 = load %struct.frame*, %struct.frame** %last_mouse_frame, align 8
  %output_data52 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 62
  %x53 = bitcast %union.output_data* %output_data52 to %struct.x_output**
  %89 = load %struct.x_output*, %struct.x_output** %x53, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %89, i32 0, i32 9
  %90 = load i64, i64* %window_desc, align 8
  %91 = load i32, i32* %root_x, align 4
  %92 = load i32, i32* %root_y, align 4
  %call54 = call i32 @XTranslateCoordinates(%struct._XDisplay* %85, i64 %86, i64 %90, i32 %91, i32 %92, i32* %win_x, i32* %win_y, i64* %child)
  %93 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_frame55 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %93, i32 0, i32 75
  %94 = load %struct.frame*, %struct.frame** %last_mouse_frame55, align 8
  store %struct.frame* %94, %struct.frame** %f1, align 8
  br label %if.end.75

if.else.56:                                       ; preds = %for.end
  br label %while.body

while.body:                                       ; preds = %if.else.56, %if.end.72
  %95 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %96 = load %struct.frame*, %struct.frame** %95, align 8
  %output_data57 = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 62
  %x58 = bitcast %union.output_data* %output_data57 to %struct.x_output**
  %97 = load %struct.x_output*, %struct.x_output** %x58, align 8
  %display_info59 = getelementptr inbounds %struct.x_output, %struct.x_output* %97, i32 0, i32 44
  %98 = load %struct.x_display_info*, %struct.x_display_info** %display_info59, align 8
  %display60 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %98, i32 0, i32 2
  %99 = load %struct._XDisplay*, %struct._XDisplay** %display60, align 8
  %100 = load i64, i64* %root, align 8
  %101 = load i64, i64* %win, align 8
  %102 = load i32, i32* %root_x, align 4
  %103 = load i32, i32* %root_y, align 4
  %call61 = call i32 @XTranslateCoordinates(%struct._XDisplay* %99, i64 %100, i64 %101, i32 %102, i32 %103, i32* %win_x, i32* %win_y, i64* %child)
  %104 = load i64, i64* %child, align 8
  %cmp62 = icmp eq i64 %104, 0
  br i1 %cmp62, label %if.then.66, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %105 = load i64, i64* %child, align 8
  %106 = load i64, i64* %win, align 8
  %cmp64 = icmp eq i64 %105, %106
  br i1 %cmp64, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %lor.lhs.false, %while.body
  br label %while.end

if.end.67:                                        ; preds = %lor.lhs.false
  %107 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %108 = load i64, i64* %win, align 8
  %conv68 = trunc i64 %108 to i32
  %call69 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %107, i32 %conv68)
  %tobool70 = icmp ne %struct.frame* %call69, null
  br i1 %tobool70, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.67
  br label %while.end

if.end.72:                                        ; preds = %if.end.67
  %109 = load i64, i64* %child, align 8
  store i64 %109, i64* %win, align 8
  %110 = load i32, i32* %win_x, align 4
  store i32 %110, i32* %parent_x, align 4
  %111 = load i32, i32* %win_y, align 4
  store i32 %111, i32* %parent_y, align 4
  br label %while.body

while.end:                                        ; preds = %if.then.71, %if.then.66
  %112 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %113 = load i64, i64* %win, align 8
  %conv73 = trunc i64 %113 to i32
  %call74 = call %struct.frame* @x_window_to_frame(%struct.x_display_info* %112, i32 %conv73)
  store %struct.frame* %call74, %struct.frame** %f1, align 8
  br label %if.end.75

if.end.75:                                        ; preds = %while.end, %if.then.47
  %114 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %115 = load %struct.frame*, %struct.frame** %114, align 8
  %output_data76 = getelementptr inbounds %struct.frame, %struct.frame* %115, i32 0, i32 62
  %x77 = bitcast %union.output_data* %output_data76 to %struct.x_output**
  %116 = load %struct.x_output*, %struct.x_output** %x77, align 8
  %display_info78 = getelementptr inbounds %struct.x_output, %struct.x_output* %116, i32 0, i32 44
  %117 = load %struct.x_display_info*, %struct.x_display_info** %display_info78, align 8
  %display79 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %117, i32 0, i32 2
  %118 = load %struct._XDisplay*, %struct._XDisplay** %display79, align 8
  %call80 = call zeroext i1 @x_had_errors_p(%struct._XDisplay* %118)
  br i1 %call80, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %if.end.75
  store %struct.frame* null, %struct.frame** %f1, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.81, %if.end.75
  call void @x_uncatch_errors_after_check()
  %119 = load %struct.frame*, %struct.frame** %f1, align 8
  %tobool83 = icmp ne %struct.frame* %119, null
  br i1 %tobool83, label %if.end.97, label %if.then.84

if.then.84:                                       ; preds = %if.end.82
  %120 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %121 = load %struct.frame*, %struct.frame** %120, align 8
  %output_data86 = getelementptr inbounds %struct.frame, %struct.frame* %121, i32 0, i32 62
  %x87 = bitcast %union.output_data* %output_data86 to %struct.x_output**
  %122 = load %struct.x_output*, %struct.x_output** %x87, align 8
  %display_info88 = getelementptr inbounds %struct.x_output, %struct.x_output* %122, i32 0, i32 44
  %123 = load %struct.x_display_info*, %struct.x_display_info** %display_info88, align 8
  %display89 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %123, i32 0, i32 2
  %124 = load %struct._XDisplay*, %struct._XDisplay** %display89, align 8
  %125 = load i64, i64* %win, align 8
  %call90 = call %struct.scroll_bar* @x_window_to_scroll_bar(%struct._XDisplay* %124, i64 %125, i32 2)
  store %struct.scroll_bar* %call90, %struct.scroll_bar** %bar85, align 8
  %126 = load %struct.scroll_bar*, %struct.scroll_bar** %bar85, align 8
  %tobool91 = icmp ne %struct.scroll_bar* %126, null
  br i1 %tobool91, label %if.then.92, label %if.end.96

if.then.92:                                       ; preds = %if.then.84
  %127 = load %struct.scroll_bar*, %struct.scroll_bar** %bar85, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %127, i32 0, i32 1
  %128 = load i64, i64* %window, align 8
  %call93 = call %struct.window* @XWINDOW(i64 %128)
  %frame94 = getelementptr inbounds %struct.window, %struct.window* %call93, i32 0, i32 1
  %129 = load i64, i64* %frame94, align 8
  %sub95 = sub nsw i64 %129, 5
  %130 = inttoptr i64 %sub95 to i8*
  %131 = bitcast i8* %130 to %struct.frame*
  store %struct.frame* %131, %struct.frame** %f1, align 8
  %132 = load i32, i32* %parent_x, align 4
  store i32 %132, i32* %win_x, align 4
  %133 = load i32, i32* %parent_y, align 4
  store i32 %133, i32* %win_y, align 4
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.92, %if.then.84
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.end.82
  %134 = load %struct.frame*, %struct.frame** %f1, align 8
  %cmp98 = icmp eq %struct.frame* %134, null
  br i1 %cmp98, label %land.lhs.true.100, label %if.end.111

land.lhs.true.100:                                ; preds = %if.end.97
  %135 = load i32, i32* %insist.addr, align 4
  %cmp101 = icmp sgt i32 %135, 0
  br i1 %cmp101, label %if.then.103, label %if.end.111

if.then.103:                                      ; preds = %land.lhs.true.100
  %136 = load i64, i64* @selected_frame, align 8
  %call104 = call zeroext i1 @FRAMEP(i64 %136)
  br i1 %call104, label %land.lhs.true.106, label %cond.false

land.lhs.true.106:                                ; preds = %if.then.103
  %137 = load i64, i64* @selected_frame, align 8
  %sub107 = sub nsw i64 %137, 5
  %138 = inttoptr i64 %sub107 to i8*
  %139 = bitcast i8* %138 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %139, i32 0, i32 61
  %140 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp108 = icmp ne %struct.terminal* %140, null
  br i1 %cmp108, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.106
  %141 = load i64, i64* @selected_frame, align 8
  %sub110 = sub nsw i64 %141, 5
  %142 = inttoptr i64 %sub110 to i8*
  %143 = bitcast i8* %142 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.106, %if.then.103
  call void @emacs_abort() #10
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %144, %cond.true
  %cond = phi %struct.frame* [ %143, %cond.true ], [ null, %144 ]
  store %struct.frame* %cond, %struct.frame** %f1, align 8
  br label %if.end.111

if.end.111:                                       ; preds = %cond.end, %land.lhs.true.100, %if.end.97
  %145 = load %struct.frame*, %struct.frame** %f1, align 8
  %tobool112 = icmp ne %struct.frame* %145, null
  br i1 %tobool112, label %if.then.113, label %if.end.122

if.then.113:                                      ; preds = %if.end.111
  %146 = load %struct.frame*, %struct.frame** %f1, align 8
  %output_data114 = getelementptr inbounds %struct.frame, %struct.frame* %146, i32 0, i32 62
  %x115 = bitcast %union.output_data* %output_data114 to %struct.x_output**
  %147 = load %struct.x_output*, %struct.x_output** %x115, align 8
  %display_info116 = getelementptr inbounds %struct.x_output, %struct.x_output* %147, i32 0, i32 44
  %148 = load %struct.x_display_info*, %struct.x_display_info** %display_info116, align 8
  store %struct.x_display_info* %148, %struct.x_display_info** %dpyinfo, align 8
  %149 = load %struct.frame*, %struct.frame** %f1, align 8
  %150 = load i32, i32* %win_x, align 4
  %151 = load i32, i32* %win_y, align 4
  %152 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_glyph = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %152, i32 0, i32 82
  call void @remember_mouse_glyph(%struct.frame* %149, i32 %150, i32 %151, %struct.XRectangle* %last_mouse_glyph)
  %153 = load %struct.frame*, %struct.frame** %f1, align 8
  %154 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_glyph_frame = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %154, i32 0, i32 76
  store %struct.frame* %153, %struct.frame** %last_mouse_glyph_frame, align 8
  %call117 = call i64 @builtin_lisp_symbol(i32 0)
  %155 = load i64*, i64** %bar_window.addr, align 8
  store i64 %call117, i64* %155, align 8
  %156 = load i32*, i32** %part.addr, align 8
  store i32 0, i32* %156, align 4
  %157 = load %struct.frame*, %struct.frame** %f1, align 8
  %158 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  store %struct.frame* %157, %struct.frame** %158, align 8
  %159 = load i32, i32* %win_x, align 4
  %conv118 = sext i32 %159 to i64
  %shl = shl i64 %conv118, 2
  %add = add i64 %shl, 2
  %160 = load i64*, i64** %x.addr, align 8
  store i64 %add, i64* %160, align 8
  %161 = load i32, i32* %win_y, align 4
  %conv119 = sext i32 %161 to i64
  %shl120 = shl i64 %conv119, 2
  %add121 = add i64 %shl120, 2
  %162 = load i64*, i64** %y.addr, align 8
  store i64 %add121, i64* %162, align 8
  %163 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_movement_time = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %163, i32 0, i32 83
  %164 = load i64, i64* %last_mouse_movement_time, align 8
  %165 = load i64*, i64** %timestamp.addr, align 8
  store i64 %164, i64* %165, align 8
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.113, %if.end.111
  br label %if.end.123

if.end.123:                                       ; preds = %if.end.122, %if.end
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTframe_rehighlight(%struct.frame* %frame) #0 {
entry:
  %frame.addr = alloca %struct.frame*, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  call void @x_frame_rehighlight(%struct.x_display_info* %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTframe_raise_lower(%struct.frame* %f, i1 zeroext %raise_flag) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %raise_flag.addr = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %frombool = zext i1 %raise_flag to i8
  store i8 %frombool, i8* %raise_flag.addr, align 1
  %0 = load i8, i8* %raise_flag.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_raise_frame(%struct.frame* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_lower_frame(%struct.frame* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTfullscreen_hook(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @block_input()
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_check_fullscreen(%struct.frame* %2)
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_sync(%struct.frame* %3)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @x_menu_show(%struct.frame*, i32, i32, i32, i64, i8**) #1

declare i64 @xw_popup_dialog(%struct.frame*, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @XTset_vertical_scroll_bar(%struct.window* %w, i32 %portion, i32 %whole, i32 %position) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %portion.addr = alloca i32, align 4
  %whole.addr = alloca i32, align 4
  %position.addr = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %barobj = alloca i64, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  %top = alloca i32, align 4
  %height = alloca i32, align 4
  %left = alloca i32, align 4
  %width = alloca i32, align 4
  %window_y = alloca i32, align 4
  %window_height = alloca i32, align 4
  %mask = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %portion, i32* %portion.addr, align 4
  store i32 %whole, i32* %whole.addr, align 4
  store i32 %position, i32* %position.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @window_box(%struct.window* %4, i32 -1, i32* null, i32* %window_y, i32* null, i32* %window_height)
  %5 = load i32, i32* %window_y, align 4
  store i32 %5, i32* %top, align 4
  %6 = load i32, i32* %window_height, align 4
  store i32 %6, i32* %height, align 4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end.21

cond.false:                                       ; preds = %entry
  %8 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %8, i32 0, i32 16
  %9 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %9, %call
  br i1 %cmp, label %cond.true.1, label %cond.false.9

cond.true.1:                                      ; preds = %cond.false
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame2 = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 1
  %11 = load i64, i64* %frame2, align 8
  %sub3 = sub nsw i64 %11, 5
  %12 = inttoptr i64 %sub3 to i8*
  %13 = bitcast i8* %12 to %struct.frame*
  %vertical_scroll_bar_type4 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %vertical_scroll_bar_type4 to i64*
  %bf.load5 = load i64, i64* %14, align 8
  %bf.lshr6 = lshr i64 %bf.load5, 30
  %bf.clear7 = and i64 %bf.lshr6, 3
  %bf.cast8 = trunc i64 %bf.clear7 to i32
  br label %cond.end.19

cond.false.9:                                     ; preds = %cond.false
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type10 = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 16
  %16 = load i64, i64* %vertical_scroll_bar_type10, align 8
  %call11 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp12 = icmp eq i64 %16, %call11
  br i1 %cmp12, label %cond.true.13, label %cond.false.14

cond.true.13:                                     ; preds = %cond.false.9
  br label %cond.end

cond.false.14:                                    ; preds = %cond.false.9
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type15 = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 16
  %18 = load i64, i64* %vertical_scroll_bar_type15, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp17 = icmp eq i64 %18, %call16
  %cond = select i1 %cmp17, i32 2, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.14, %cond.true.13
  %cond18 = phi i32 [ 1, %cond.true.13 ], [ %cond, %cond.false.14 ]
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.end, %cond.true.1
  %cond20 = phi i32 [ %bf.cast8, %cond.true.1 ], [ %cond18, %cond.end ]
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.end.19, %cond.true
  %cond22 = phi i32 [ 0, %cond.true ], [ %cond20, %cond.end.19 ]
  %cmp23 = icmp eq i32 %cond22, 2
  br i1 %cmp23, label %cond.true.24, label %cond.false.100

cond.true.24:                                     ; preds = %cond.end.21
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame25 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 1
  %20 = load i64, i64* %frame25, align 8
  %sub26 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub26 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 51
  %23 = load i32, i32* %internal_border_width, align 4
  %24 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %24, i32 0, i32 30
  %25 = load i32, i32* %pixel_left, align 4
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 34
  %27 = load i32, i32* %pixel_width, align 4
  %add = add nsw i32 %25, %27
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left27 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 30
  %29 = load i32, i32* %pixel_left27, align 4
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width28 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 34
  %31 = load i32, i32* %pixel_width28, align 4
  %add29 = add nsw i32 %29, %31
  %32 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame30 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 1
  %33 = load i64, i64* %frame30, align 8
  %sub31 = sub nsw i64 %33, 5
  %34 = inttoptr i64 %sub31 to i8*
  %35 = bitcast i8* %34 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 5
  %36 = load i64, i64* %root_window, align 8
  %call32 = call %struct.window* @XWINDOW(i64 %36)
  %pixel_left33 = getelementptr inbounds %struct.window, %struct.window* %call32, i32 0, i32 30
  %37 = load i32, i32* %pixel_left33, align 4
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame34 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 1
  %39 = load i64, i64* %frame34, align 8
  %sub35 = sub nsw i64 %39, 5
  %40 = inttoptr i64 %sub35 to i8*
  %41 = bitcast i8* %40 to %struct.frame*
  %root_window36 = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 5
  %42 = load i64, i64* %root_window36, align 8
  %call37 = call %struct.window* @XWINDOW(i64 %42)
  %pixel_width38 = getelementptr inbounds %struct.window, %struct.window* %call37, i32 0, i32 34
  %43 = load i32, i32* %pixel_width38, align 4
  %add39 = add nsw i32 %37, %43
  %cmp40 = icmp eq i32 %add29, %add39
  br i1 %cmp40, label %cond.true.44, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true.24
  %44 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %44, i32 0, i32 67
  %bf.load41 = load i16, i16* %mini, align 4
  %bf.clear42 = and i16 %bf.load41, 1
  %bf.cast43 = trunc i16 %bf.clear42 to i1
  br i1 %bf.cast43, label %cond.true.44, label %cond.false.45

cond.true.44:                                     ; preds = %lor.lhs.false, %cond.true.24
  br label %cond.end.48

cond.false.45:                                    ; preds = %lor.lhs.false
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame46 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 1
  %46 = load i64, i64* %frame46, align 8
  %sub47 = sub nsw i64 %46, 5
  %47 = inttoptr i64 %sub47 to i8*
  %48 = bitcast i8* %47 to %struct.frame*
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 52
  %49 = load i32, i32* %right_divider_width, align 4
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.45, %cond.true.44
  %cond49 = phi i32 [ 0, %cond.true.44 ], [ %49, %cond.false.45 ]
  %sub50 = sub nsw i32 %add, %cond49
  %50 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p51 = getelementptr inbounds %struct.window, %struct.window* %50, i32 0, i32 67
  %bf.load52 = load i16, i16* %pseudo_window_p51, align 4
  %bf.lshr53 = lshr i16 %bf.load52, 11
  %bf.clear54 = and i16 %bf.lshr53, 1
  %bf.cast55 = trunc i16 %bf.clear54 to i1
  br i1 %bf.cast55, label %cond.true.56, label %cond.false.57

cond.true.56:                                     ; preds = %cond.end.48
  br label %cond.end.83

cond.false.57:                                    ; preds = %cond.end.48
  %51 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type58 = getelementptr inbounds %struct.window, %struct.window* %51, i32 0, i32 16
  %52 = load i64, i64* %vertical_scroll_bar_type58, align 8
  %call59 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp60 = icmp eq i64 %52, %call59
  br i1 %cmp60, label %cond.true.61, label %cond.false.69

cond.true.61:                                     ; preds = %cond.false.57
  %53 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame62 = getelementptr inbounds %struct.window, %struct.window* %53, i32 0, i32 1
  %54 = load i64, i64* %frame62, align 8
  %sub63 = sub nsw i64 %54, 5
  %55 = inttoptr i64 %sub63 to i8*
  %56 = bitcast i8* %55 to %struct.frame*
  %vertical_scroll_bar_type64 = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 26
  %57 = bitcast i48* %vertical_scroll_bar_type64 to i64*
  %bf.load65 = load i64, i64* %57, align 8
  %bf.lshr66 = lshr i64 %bf.load65, 30
  %bf.clear67 = and i64 %bf.lshr66, 3
  %bf.cast68 = trunc i64 %bf.clear67 to i32
  br label %cond.end.81

cond.false.69:                                    ; preds = %cond.false.57
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type70 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 16
  %59 = load i64, i64* %vertical_scroll_bar_type70, align 8
  %call71 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp72 = icmp eq i64 %59, %call71
  br i1 %cmp72, label %cond.true.73, label %cond.false.74

cond.true.73:                                     ; preds = %cond.false.69
  br label %cond.end.79

cond.false.74:                                    ; preds = %cond.false.69
  %60 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type75 = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 16
  %61 = load i64, i64* %vertical_scroll_bar_type75, align 8
  %call76 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp77 = icmp eq i64 %61, %call76
  %cond78 = select i1 %cmp77, i32 2, i32 0
  br label %cond.end.79

cond.end.79:                                      ; preds = %cond.false.74, %cond.true.73
  %cond80 = phi i32 [ 1, %cond.true.73 ], [ %cond78, %cond.false.74 ]
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.end.79, %cond.true.61
  %cond82 = phi i32 [ %bf.cast68, %cond.true.61 ], [ %cond80, %cond.end.79 ]
  br label %cond.end.83

cond.end.83:                                      ; preds = %cond.end.81, %cond.true.56
  %cond84 = phi i32 [ 0, %cond.true.56 ], [ %cond82, %cond.end.81 ]
  %cmp85 = icmp eq i32 %cond84, 2
  br i1 %cmp85, label %cond.true.86, label %cond.false.95

cond.true.86:                                     ; preds = %cond.end.83
  %62 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width = getelementptr inbounds %struct.window, %struct.window* %62, i32 0, i32 61
  %63 = load i32, i32* %scroll_bar_width, align 4
  %cmp87 = icmp sge i32 %63, 0
  br i1 %cmp87, label %cond.true.88, label %cond.false.90

cond.true.88:                                     ; preds = %cond.true.86
  %64 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width89 = getelementptr inbounds %struct.window, %struct.window* %64, i32 0, i32 61
  %65 = load i32, i32* %scroll_bar_width89, align 4
  br label %cond.end.93

cond.false.90:                                    ; preds = %cond.true.86
  %66 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame91 = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 1
  %67 = load i64, i64* %frame91, align 8
  %sub92 = sub nsw i64 %67, 5
  %68 = inttoptr i64 %sub92 to i8*
  %69 = bitcast i8* %68 to %struct.frame*
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 69
  %70 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.93

cond.end.93:                                      ; preds = %cond.false.90, %cond.true.88
  %cond94 = phi i32 [ %65, %cond.true.88 ], [ %70, %cond.false.90 ]
  br label %cond.end.96

cond.false.95:                                    ; preds = %cond.end.83
  br label %cond.end.96

cond.end.96:                                      ; preds = %cond.false.95, %cond.end.93
  %cond97 = phi i32 [ %cond94, %cond.end.93 ], [ 0, %cond.false.95 ]
  %sub98 = sub nsw i32 %sub50, %cond97
  %add99 = add nsw i32 %23, %sub98
  br label %cond.end.106

cond.false.100:                                   ; preds = %cond.end.21
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame101 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 1
  %72 = load i64, i64* %frame101, align 8
  %sub102 = sub nsw i64 %72, 5
  %73 = inttoptr i64 %sub102 to i8*
  %74 = bitcast i8* %73 to %struct.frame*
  %internal_border_width103 = getelementptr inbounds %struct.frame, %struct.frame* %74, i32 0, i32 51
  %75 = load i32, i32* %internal_border_width103, align 4
  %76 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left104 = getelementptr inbounds %struct.window, %struct.window* %76, i32 0, i32 30
  %77 = load i32, i32* %pixel_left104, align 4
  %add105 = add nsw i32 %75, %77
  br label %cond.end.106

cond.end.106:                                     ; preds = %cond.false.100, %cond.end.96
  %cond107 = phi i32 [ %add99, %cond.end.96 ], [ %add105, %cond.false.100 ]
  store i32 %cond107, i32* %left, align 4
  %78 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p108 = getelementptr inbounds %struct.window, %struct.window* %78, i32 0, i32 67
  %bf.load109 = load i16, i16* %pseudo_window_p108, align 4
  %bf.lshr110 = lshr i16 %bf.load109, 11
  %bf.clear111 = and i16 %bf.lshr110, 1
  %bf.cast112 = trunc i16 %bf.clear111 to i1
  br i1 %bf.cast112, label %cond.true.113, label %cond.false.114

cond.true.113:                                    ; preds = %cond.end.106
  br label %cond.end.140

cond.false.114:                                   ; preds = %cond.end.106
  %79 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type115 = getelementptr inbounds %struct.window, %struct.window* %79, i32 0, i32 16
  %80 = load i64, i64* %vertical_scroll_bar_type115, align 8
  %call116 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp117 = icmp eq i64 %80, %call116
  br i1 %cmp117, label %cond.true.118, label %cond.false.126

cond.true.118:                                    ; preds = %cond.false.114
  %81 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame119 = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 1
  %82 = load i64, i64* %frame119, align 8
  %sub120 = sub nsw i64 %82, 5
  %83 = inttoptr i64 %sub120 to i8*
  %84 = bitcast i8* %83 to %struct.frame*
  %vertical_scroll_bar_type121 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 26
  %85 = bitcast i48* %vertical_scroll_bar_type121 to i64*
  %bf.load122 = load i64, i64* %85, align 8
  %bf.lshr123 = lshr i64 %bf.load122, 30
  %bf.clear124 = and i64 %bf.lshr123, 3
  %bf.cast125 = trunc i64 %bf.clear124 to i32
  br label %cond.end.138

cond.false.126:                                   ; preds = %cond.false.114
  %86 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type127 = getelementptr inbounds %struct.window, %struct.window* %86, i32 0, i32 16
  %87 = load i64, i64* %vertical_scroll_bar_type127, align 8
  %call128 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp129 = icmp eq i64 %87, %call128
  br i1 %cmp129, label %cond.true.130, label %cond.false.131

cond.true.130:                                    ; preds = %cond.false.126
  br label %cond.end.136

cond.false.131:                                   ; preds = %cond.false.126
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type132 = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 16
  %89 = load i64, i64* %vertical_scroll_bar_type132, align 8
  %call133 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp134 = icmp eq i64 %89, %call133
  %cond135 = select i1 %cmp134, i32 2, i32 0
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.131, %cond.true.130
  %cond137 = phi i32 [ 1, %cond.true.130 ], [ %cond135, %cond.false.131 ]
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.end.136, %cond.true.118
  %cond139 = phi i32 [ %bf.cast125, %cond.true.118 ], [ %cond137, %cond.end.136 ]
  br label %cond.end.140

cond.end.140:                                     ; preds = %cond.end.138, %cond.true.113
  %cond141 = phi i32 [ 0, %cond.true.113 ], [ %cond139, %cond.end.138 ]
  %cmp142 = icmp eq i32 %cond141, 1
  br i1 %cmp142, label %cond.true.179, label %lor.lhs.false.143

lor.lhs.false.143:                                ; preds = %cond.end.140
  %90 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p144 = getelementptr inbounds %struct.window, %struct.window* %90, i32 0, i32 67
  %bf.load145 = load i16, i16* %pseudo_window_p144, align 4
  %bf.lshr146 = lshr i16 %bf.load145, 11
  %bf.clear147 = and i16 %bf.lshr146, 1
  %bf.cast148 = trunc i16 %bf.clear147 to i1
  br i1 %bf.cast148, label %cond.true.149, label %cond.false.150

cond.true.149:                                    ; preds = %lor.lhs.false.143
  br label %cond.end.176

cond.false.150:                                   ; preds = %lor.lhs.false.143
  %91 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type151 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 16
  %92 = load i64, i64* %vertical_scroll_bar_type151, align 8
  %call152 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp153 = icmp eq i64 %92, %call152
  br i1 %cmp153, label %cond.true.154, label %cond.false.162

cond.true.154:                                    ; preds = %cond.false.150
  %93 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame155 = getelementptr inbounds %struct.window, %struct.window* %93, i32 0, i32 1
  %94 = load i64, i64* %frame155, align 8
  %sub156 = sub nsw i64 %94, 5
  %95 = inttoptr i64 %sub156 to i8*
  %96 = bitcast i8* %95 to %struct.frame*
  %vertical_scroll_bar_type157 = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 26
  %97 = bitcast i48* %vertical_scroll_bar_type157 to i64*
  %bf.load158 = load i64, i64* %97, align 8
  %bf.lshr159 = lshr i64 %bf.load158, 30
  %bf.clear160 = and i64 %bf.lshr159, 3
  %bf.cast161 = trunc i64 %bf.clear160 to i32
  br label %cond.end.174

cond.false.162:                                   ; preds = %cond.false.150
  %98 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type163 = getelementptr inbounds %struct.window, %struct.window* %98, i32 0, i32 16
  %99 = load i64, i64* %vertical_scroll_bar_type163, align 8
  %call164 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp165 = icmp eq i64 %99, %call164
  br i1 %cmp165, label %cond.true.166, label %cond.false.167

cond.true.166:                                    ; preds = %cond.false.162
  br label %cond.end.172

cond.false.167:                                   ; preds = %cond.false.162
  %100 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type168 = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 16
  %101 = load i64, i64* %vertical_scroll_bar_type168, align 8
  %call169 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp170 = icmp eq i64 %101, %call169
  %cond171 = select i1 %cmp170, i32 2, i32 0
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.167, %cond.true.166
  %cond173 = phi i32 [ 1, %cond.true.166 ], [ %cond171, %cond.false.167 ]
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.end.172, %cond.true.154
  %cond175 = phi i32 [ %bf.cast161, %cond.true.154 ], [ %cond173, %cond.end.172 ]
  br label %cond.end.176

cond.end.176:                                     ; preds = %cond.end.174, %cond.true.149
  %cond177 = phi i32 [ 0, %cond.true.149 ], [ %cond175, %cond.end.174 ]
  %cmp178 = icmp eq i32 %cond177, 2
  br i1 %cmp178, label %cond.true.179, label %cond.false.190

cond.true.179:                                    ; preds = %cond.end.176, %cond.end.140
  %102 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width180 = getelementptr inbounds %struct.window, %struct.window* %102, i32 0, i32 61
  %103 = load i32, i32* %scroll_bar_width180, align 4
  %cmp181 = icmp sge i32 %103, 0
  br i1 %cmp181, label %cond.true.182, label %cond.false.184

cond.true.182:                                    ; preds = %cond.true.179
  %104 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_width183 = getelementptr inbounds %struct.window, %struct.window* %104, i32 0, i32 61
  %105 = load i32, i32* %scroll_bar_width183, align 4
  br label %cond.end.188

cond.false.184:                                   ; preds = %cond.true.179
  %106 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame185 = getelementptr inbounds %struct.window, %struct.window* %106, i32 0, i32 1
  %107 = load i64, i64* %frame185, align 8
  %sub186 = sub nsw i64 %107, 5
  %108 = inttoptr i64 %sub186 to i8*
  %109 = bitcast i8* %108 to %struct.frame*
  %config_scroll_bar_width187 = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 69
  %110 = load i32, i32* %config_scroll_bar_width187, align 4
  br label %cond.end.188

cond.end.188:                                     ; preds = %cond.false.184, %cond.true.182
  %cond189 = phi i32 [ %105, %cond.true.182 ], [ %110, %cond.false.184 ]
  br label %cond.end.191

cond.false.190:                                   ; preds = %cond.end.176
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.190, %cond.end.188
  %cond192 = phi i32 [ %cond189, %cond.end.188 ], [ 0, %cond.false.190 ]
  store i32 %cond192, i32* %width, align 4
  %111 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar = getelementptr inbounds %struct.window, %struct.window* %111, i32 0, i32 15
  %112 = load i64, i64* %vertical_scroll_bar, align 8
  %call193 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp194 = icmp eq i64 %112, %call193
  br i1 %cmp194, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.191
  %113 = load i32, i32* %width, align 4
  %cmp195 = icmp sgt i32 %113, 0
  br i1 %cmp195, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %114 = load i32, i32* %height, align 4
  %cmp196 = icmp sgt i32 %114, 0
  br i1 %cmp196, label %if.then.197, label %if.end

if.then.197:                                      ; preds = %land.lhs.true
  call void @block_input()
  %115 = load %struct.frame*, %struct.frame** %f, align 8
  %116 = load i32, i32* %left, align 4
  %117 = load i32, i32* %top, align 4
  %118 = load i32, i32* %width, align 4
  %119 = load i32, i32* %height, align 4
  call void @x_clear_area(%struct.frame* %115, i32 %116, i32 %117, i32 %118, i32 %119)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then.197, %land.lhs.true, %if.then
  %120 = load %struct.window*, %struct.window** %w.addr, align 8
  %121 = load i32, i32* %top, align 4
  %122 = load i32, i32* %left, align 4
  %123 = load i32, i32* %width, align 4
  %124 = load i32, i32* %height, align 4
  %cmp198 = icmp sgt i32 %124, 1
  br i1 %cmp198, label %cond.true.199, label %cond.false.200

cond.true.199:                                    ; preds = %if.end
  %125 = load i32, i32* %height, align 4
  br label %cond.end.201

cond.false.200:                                   ; preds = %if.end
  br label %cond.end.201

cond.end.201:                                     ; preds = %cond.false.200, %cond.true.199
  %cond202 = phi i32 [ %125, %cond.true.199 ], [ 1, %cond.false.200 ]
  %call203 = call %struct.scroll_bar* @x_scroll_bar_create(%struct.window* %120, i32 %121, i32 %122, i32 %123, i32 %cond202, i1 zeroext false)
  store %struct.scroll_bar* %call203, %struct.scroll_bar** %bar, align 8
  br label %if.end.241

if.else:                                          ; preds = %cond.end.191
  store i32 0, i32* %mask, align 4
  %126 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar204 = getelementptr inbounds %struct.window, %struct.window* %126, i32 0, i32 15
  %127 = load i64, i64* %vertical_scroll_bar204, align 8
  %call205 = call %struct.Lisp_Vector* @XVECTOR(i64 %127)
  %128 = bitcast %struct.Lisp_Vector* %call205 to %struct.scroll_bar*
  store %struct.scroll_bar* %128, %struct.scroll_bar** %bar, align 8
  call void @block_input()
  %129 = load i32, i32* %left, align 4
  %130 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %left206 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %130, i32 0, i32 6
  %131 = load i32, i32* %left206, align 4
  %cmp207 = icmp ne i32 %129, %131
  br i1 %cmp207, label %if.then.208, label %if.end.209

if.then.208:                                      ; preds = %if.else
  %132 = load i32, i32* %mask, align 4
  %or = or i32 %132, 1
  store i32 %or, i32* %mask, align 4
  br label %if.end.209

if.end.209:                                       ; preds = %if.then.208, %if.else
  %133 = load i32, i32* %top, align 4
  %134 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %top210 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %134, i32 0, i32 5
  %135 = load i32, i32* %top210, align 4
  %cmp211 = icmp ne i32 %133, %135
  br i1 %cmp211, label %if.then.212, label %if.end.214

if.then.212:                                      ; preds = %if.end.209
  %136 = load i32, i32* %mask, align 4
  %or213 = or i32 %136, 2
  store i32 %or213, i32* %mask, align 4
  br label %if.end.214

if.end.214:                                       ; preds = %if.then.212, %if.end.209
  %137 = load i32, i32* %width, align 4
  %138 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %width215 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %138, i32 0, i32 7
  %139 = load i32, i32* %width215, align 4
  %cmp216 = icmp ne i32 %137, %139
  br i1 %cmp216, label %if.then.217, label %if.end.219

if.then.217:                                      ; preds = %if.end.214
  %140 = load i32, i32* %mask, align 4
  %or218 = or i32 %140, 4
  store i32 %or218, i32* %mask, align 4
  br label %if.end.219

if.end.219:                                       ; preds = %if.then.217, %if.end.214
  %141 = load i32, i32* %height, align 4
  %142 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %height220 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %142, i32 0, i32 8
  %143 = load i32, i32* %height220, align 4
  %cmp221 = icmp ne i32 %141, %143
  br i1 %cmp221, label %if.then.222, label %if.end.224

if.then.222:                                      ; preds = %if.end.219
  %144 = load i32, i32* %mask, align 4
  %or223 = or i32 %144, 8
  store i32 %or223, i32* %mask, align 4
  br label %if.end.224

if.end.224:                                       ; preds = %if.then.222, %if.end.219
  %145 = load i32, i32* %mask, align 4
  %tobool = icmp ne i32 %145, 0
  br i1 %tobool, label %if.then.225, label %if.end.236

if.then.225:                                      ; preds = %if.end.224
  %146 = load i32, i32* %width, align 4
  %cmp226 = icmp sgt i32 %146, 0
  br i1 %cmp226, label %land.lhs.true.227, label %if.end.230

land.lhs.true.227:                                ; preds = %if.then.225
  %147 = load i32, i32* %height, align 4
  %cmp228 = icmp sgt i32 %147, 0
  br i1 %cmp228, label %if.then.229, label %if.end.230

if.then.229:                                      ; preds = %land.lhs.true.227
  %148 = load %struct.frame*, %struct.frame** %f, align 8
  %149 = load i32, i32* %left, align 4
  %150 = load i32, i32* %top, align 4
  %151 = load i32, i32* %width, align 4
  %152 = load i32, i32* %height, align 4
  call void @x_clear_area(%struct.frame* %148, i32 %149, i32 %150, i32 %151, i32 %152)
  br label %if.end.230

if.end.230:                                       ; preds = %if.then.229, %land.lhs.true.227, %if.then.225
  %153 = load %struct.frame*, %struct.frame** %f, align 8
  %154 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %154, i32 0, i32 4
  %155 = load i64, i64* %x_window, align 8
  %156 = load i32, i32* %top, align 4
  %157 = load i32, i32* %left, align 4
  %158 = load i32, i32* %width, align 4
  %159 = load i32, i32* %height, align 4
  %cmp231 = icmp sgt i32 %159, 1
  br i1 %cmp231, label %cond.true.232, label %cond.false.233

cond.true.232:                                    ; preds = %if.end.230
  %160 = load i32, i32* %height, align 4
  br label %cond.end.234

cond.false.233:                                   ; preds = %if.end.230
  br label %cond.end.234

cond.end.234:                                     ; preds = %cond.false.233, %cond.true.232
  %cond235 = phi i32 [ %160, %cond.true.232 ], [ 1, %cond.false.233 ]
  call void @xg_update_scrollbar_pos(%struct.frame* %153, i64 %155, i32 %156, i32 %157, i32 %158, i32 %cond235)
  br label %if.end.236

if.end.236:                                       ; preds = %cond.end.234, %if.end.224
  %161 = load i32, i32* %left, align 4
  %162 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %left237 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %162, i32 0, i32 6
  store i32 %161, i32* %left237, align 4
  %163 = load i32, i32* %top, align 4
  %164 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %top238 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %164, i32 0, i32 5
  store i32 %163, i32* %top238, align 4
  %165 = load i32, i32* %width, align 4
  %166 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %width239 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %166, i32 0, i32 7
  store i32 %165, i32* %width239, align 4
  %167 = load i32, i32* %height, align 4
  %168 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %height240 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %168, i32 0, i32 8
  store i32 %167, i32* %height240, align 4
  call void @unblock_input()
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.236, %cond.end.201
  %169 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %170 = load i32, i32* %portion.addr, align 4
  %171 = load i32, i32* %position.addr, align 4
  %172 = load i32, i32* %whole.addr, align 4
  call void @x_set_toolkit_scroll_bar_thumb(%struct.scroll_bar* %169, i32 %170, i32 %171, i32 %172)
  %173 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %174 = bitcast %struct.scroll_bar* %173 to i8*
  %call242 = call i64 @make_lisp_ptr(i8* %174, i32 5)
  store i64 %call242, i64* %barobj, align 8
  %175 = load %struct.window*, %struct.window** %w.addr, align 8
  %176 = load i64, i64* %barobj, align 8
  call void @wset_vertical_scroll_bar(%struct.window* %175, i64 %176)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTset_horizontal_scroll_bar(%struct.window* %w, i32 %portion, i32 %whole, i32 %position) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %portion.addr = alloca i32, align 4
  %whole.addr = alloca i32, align 4
  %position.addr = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %barobj = alloca i64, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  %top = alloca i32, align 4
  %height = alloca i32, align 4
  %left = alloca i32, align 4
  %width = alloca i32, align 4
  %window_x = alloca i32, align 4
  %window_width = alloca i32, align 4
  %pixel_width = alloca i32, align 4
  %mask = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %portion, i32* %portion.addr, align 4
  store i32 %whole, i32* %whole.addr, align 4
  store i32 %position, i32* %position.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width1 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 34
  %5 = load i32, i32* %pixel_width1, align 4
  store i32 %5, i32* %pixel_width, align 4
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @window_box(%struct.window* %6, i32 -1, i32* %window_x, i32* null, i32* %window_width, i32* null)
  %7 = load i32, i32* %window_x, align 4
  store i32 %7, i32* %left, align 4
  %8 = load i32, i32* %window_width, align 4
  store i32 %8, i32* %width, align 4
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame2 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 1
  %10 = load i64, i64* %frame2, align 8
  %sub3 = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub3 to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 51
  %13 = load i32, i32* %internal_border_width, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 31
  %15 = load i32, i32* %pixel_top, align 4
  %add = add nsw i32 %13, %15
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %17 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %17, i32 0, i32 67
  %bf.load4 = load i16, i16* %mini, align 4
  %bf.clear5 = and i16 %bf.load4, 1
  %bf.cast6 = trunc i16 %bf.clear5 to i1
  br i1 %bf.cast6, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 3
  %19 = load i64, i64* %prev, align 8
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame7 = getelementptr inbounds %struct.window, %struct.window* %20, i32 0, i32 1
  %21 = load i64, i64* %frame7, align 8
  %sub8 = sub nsw i64 %21, 5
  %22 = inttoptr i64 %sub8 to i8*
  %23 = bitcast i8* %22 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 5
  %24 = load i64, i64* %root_window, align 8
  %cmp = icmp eq i64 %19, %24
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true, %entry
  br i1 false, label %cond.true.23, label %cond.false.204

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %25 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %25, i32 0, i32 18
  %26 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call = call i64 @builtin_lisp_symbol(i32 901)
  %cmp9 = icmp eq i64 %26, %call
  br i1 %cmp9, label %cond.true.10, label %cond.false.17

cond.true.10:                                     ; preds = %cond.false
  %27 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame11 = getelementptr inbounds %struct.window, %struct.window* %27, i32 0, i32 1
  %28 = load i64, i64* %frame11, align 8
  %sub12 = sub nsw i64 %28, 5
  %29 = inttoptr i64 %sub12 to i8*
  %30 = bitcast i8* %29 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 26
  %31 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load13 = load i64, i64* %31, align 8
  %bf.lshr14 = lshr i64 %bf.load13, 32
  %bf.clear15 = and i64 %bf.lshr14, 1
  %bf.cast16 = trunc i64 %bf.clear15 to i1
  br i1 %bf.cast16, label %cond.true.23, label %cond.false.204

cond.false.17:                                    ; preds = %cond.false
  %32 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type18 = getelementptr inbounds %struct.window, %struct.window* %32, i32 0, i32 18
  %33 = load i64, i64* %horizontal_scroll_bar_type18, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp20 = icmp eq i64 %33, %call19
  br i1 %cmp20, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %cond.false.17
  br i1 true, label %cond.true.23, label %cond.false.204

cond.false.22:                                    ; preds = %cond.false.17
  br i1 false, label %cond.true.23, label %cond.false.204

cond.true.23:                                     ; preds = %cond.false.22, %cond.true.21, %cond.true.10, %cond.true
  %34 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height = getelementptr inbounds %struct.window, %struct.window* %34, i32 0, i32 35
  %35 = load i32, i32* %pixel_height, align 4
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top24 = getelementptr inbounds %struct.window, %struct.window* %36, i32 0, i32 31
  %37 = load i32, i32* %pixel_top24, align 4
  %38 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height25 = getelementptr inbounds %struct.window, %struct.window* %38, i32 0, i32 35
  %39 = load i32, i32* %pixel_height25, align 4
  %add26 = add nsw i32 %37, %39
  %40 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame27 = getelementptr inbounds %struct.window, %struct.window* %40, i32 0, i32 1
  %41 = load i64, i64* %frame27, align 8
  %sub28 = sub nsw i64 %41, 5
  %42 = inttoptr i64 %sub28 to i8*
  %43 = bitcast i8* %42 to %struct.frame*
  %root_window29 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 5
  %44 = load i64, i64* %root_window29, align 8
  %call30 = call %struct.window* @XWINDOW(i64 %44)
  %pixel_top31 = getelementptr inbounds %struct.window, %struct.window* %call30, i32 0, i32 31
  %45 = load i32, i32* %pixel_top31, align 4
  %46 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame32 = getelementptr inbounds %struct.window, %struct.window* %46, i32 0, i32 1
  %47 = load i64, i64* %frame32, align 8
  %sub33 = sub nsw i64 %47, 5
  %48 = inttoptr i64 %sub33 to i8*
  %49 = bitcast i8* %48 to %struct.frame*
  %root_window34 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 5
  %50 = load i64, i64* %root_window34, align 8
  %call35 = call %struct.window* @XWINDOW(i64 %50)
  %pixel_height36 = getelementptr inbounds %struct.window, %struct.window* %call35, i32 0, i32 35
  %51 = load i32, i32* %pixel_height36, align 4
  %add37 = add nsw i32 %45, %51
  %cmp38 = icmp eq i32 %add26, %add37
  br i1 %cmp38, label %land.lhs.true.39, label %lor.lhs.false.46

land.lhs.true.39:                                 ; preds = %cond.true.23
  %52 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame40 = getelementptr inbounds %struct.window, %struct.window* %52, i32 0, i32 1
  %53 = load i64, i64* %frame40, align 8
  %sub41 = sub nsw i64 %53, 5
  %54 = inttoptr i64 %sub41 to i8*
  %55 = bitcast i8* %54 to %struct.frame*
  %root_window42 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 5
  %56 = load i64, i64* %root_window42, align 8
  %call43 = call %struct.window* @XWINDOW(i64 %56)
  %next = getelementptr inbounds %struct.window, %struct.window* %call43, i32 0, i32 2
  %57 = load i64, i64* %next, align 8
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp45 = icmp eq i64 %57, %call44
  br i1 %cmp45, label %cond.true.58, label %lor.lhs.false.46

lor.lhs.false.46:                                 ; preds = %land.lhs.true.39, %cond.true.23
  %58 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev47 = getelementptr inbounds %struct.window, %struct.window* %58, i32 0, i32 3
  %59 = load i64, i64* %prev47, align 8
  %60 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame48 = getelementptr inbounds %struct.window, %struct.window* %60, i32 0, i32 1
  %61 = load i64, i64* %frame48, align 8
  %sub49 = sub nsw i64 %61, 5
  %62 = inttoptr i64 %sub49 to i8*
  %63 = bitcast i8* %62 to %struct.frame*
  %root_window50 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 5
  %64 = load i64, i64* %root_window50, align 8
  %cmp51 = icmp eq i64 %59, %64
  br i1 %cmp51, label %cond.true.58, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.46
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p53 = getelementptr inbounds %struct.window, %struct.window* %65, i32 0, i32 67
  %bf.load54 = load i16, i16* %pseudo_window_p53, align 4
  %bf.lshr55 = lshr i16 %bf.load54, 11
  %bf.clear56 = and i16 %bf.lshr55, 1
  %bf.cast57 = trunc i16 %bf.clear56 to i1
  br i1 %bf.cast57, label %cond.true.58, label %cond.false.59

cond.true.58:                                     ; preds = %lor.lhs.false.52, %lor.lhs.false.46, %land.lhs.true.39
  br label %cond.end

cond.false.59:                                    ; preds = %lor.lhs.false.52
  %66 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame60 = getelementptr inbounds %struct.window, %struct.window* %66, i32 0, i32 1
  %67 = load i64, i64* %frame60, align 8
  %sub61 = sub nsw i64 %67, 5
  %68 = inttoptr i64 %sub61 to i8*
  %69 = bitcast i8* %68 to %struct.frame*
  %bottom_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 53
  %70 = load i32, i32* %bottom_divider_width, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.59, %cond.true.58
  %cond = phi i32 [ 0, %cond.true.58 ], [ %70, %cond.false.59 ]
  %sub62 = sub nsw i32 %35, %cond
  %71 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p63 = getelementptr inbounds %struct.window, %struct.window* %71, i32 0, i32 67
  %bf.load64 = load i16, i16* %pseudo_window_p63, align 4
  %bf.lshr65 = lshr i16 %bf.load64, 11
  %bf.clear66 = and i16 %bf.lshr65, 1
  %bf.cast67 = trunc i16 %bf.clear66 to i1
  br i1 %bf.cast67, label %cond.true.79, label %lor.lhs.false.68

lor.lhs.false.68:                                 ; preds = %cond.end
  %72 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini69 = getelementptr inbounds %struct.window, %struct.window* %72, i32 0, i32 67
  %bf.load70 = load i16, i16* %mini69, align 4
  %bf.clear71 = and i16 %bf.load70, 1
  %bf.cast72 = trunc i16 %bf.clear71 to i1
  br i1 %bf.cast72, label %land.lhs.true.73, label %cond.false.80

land.lhs.true.73:                                 ; preds = %lor.lhs.false.68
  %73 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev74 = getelementptr inbounds %struct.window, %struct.window* %73, i32 0, i32 3
  %74 = load i64, i64* %prev74, align 8
  %75 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame75 = getelementptr inbounds %struct.window, %struct.window* %75, i32 0, i32 1
  %76 = load i64, i64* %frame75, align 8
  %sub76 = sub nsw i64 %76, 5
  %77 = inttoptr i64 %sub76 to i8*
  %78 = bitcast i8* %77 to %struct.frame*
  %root_window77 = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 5
  %79 = load i64, i64* %root_window77, align 8
  %cmp78 = icmp eq i64 %74, %79
  br i1 %cmp78, label %cond.true.79, label %cond.false.80

cond.true.79:                                     ; preds = %land.lhs.true.73, %cond.end
  br i1 false, label %cond.true.98, label %cond.false.107

cond.false.80:                                    ; preds = %land.lhs.true.73, %lor.lhs.false.68
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type81 = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 18
  %81 = load i64, i64* %horizontal_scroll_bar_type81, align 8
  %call82 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp83 = icmp eq i64 %81, %call82
  br i1 %cmp83, label %cond.true.84, label %cond.false.92

cond.true.84:                                     ; preds = %cond.false.80
  %82 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame85 = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 1
  %83 = load i64, i64* %frame85, align 8
  %sub86 = sub nsw i64 %83, 5
  %84 = inttoptr i64 %sub86 to i8*
  %85 = bitcast i8* %84 to %struct.frame*
  %horizontal_scroll_bars87 = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 26
  %86 = bitcast i48* %horizontal_scroll_bars87 to i64*
  %bf.load88 = load i64, i64* %86, align 8
  %bf.lshr89 = lshr i64 %bf.load88, 32
  %bf.clear90 = and i64 %bf.lshr89, 1
  %bf.cast91 = trunc i64 %bf.clear90 to i1
  br i1 %bf.cast91, label %cond.true.98, label %cond.false.107

cond.false.92:                                    ; preds = %cond.false.80
  %87 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type93 = getelementptr inbounds %struct.window, %struct.window* %87, i32 0, i32 18
  %88 = load i64, i64* %horizontal_scroll_bar_type93, align 8
  %call94 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp95 = icmp eq i64 %88, %call94
  br i1 %cmp95, label %cond.true.96, label %cond.false.97

cond.true.96:                                     ; preds = %cond.false.92
  br i1 true, label %cond.true.98, label %cond.false.107

cond.false.97:                                    ; preds = %cond.false.92
  br i1 false, label %cond.true.98, label %cond.false.107

cond.true.98:                                     ; preds = %cond.false.97, %cond.true.96, %cond.true.84, %cond.true.79
  %89 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height = getelementptr inbounds %struct.window, %struct.window* %89, i32 0, i32 62
  %90 = load i32, i32* %scroll_bar_height, align 4
  %cmp99 = icmp sge i32 %90, 0
  br i1 %cmp99, label %cond.true.100, label %cond.false.102

cond.true.100:                                    ; preds = %cond.true.98
  %91 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height101 = getelementptr inbounds %struct.window, %struct.window* %91, i32 0, i32 62
  %92 = load i32, i32* %scroll_bar_height101, align 4
  br label %cond.end.105

cond.false.102:                                   ; preds = %cond.true.98
  %93 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame103 = getelementptr inbounds %struct.window, %struct.window* %93, i32 0, i32 1
  %94 = load i64, i64* %frame103, align 8
  %sub104 = sub nsw i64 %94, 5
  %95 = inttoptr i64 %sub104 to i8*
  %96 = bitcast i8* %95 to %struct.frame*
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %96, i32 0, i32 71
  %97 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.false.102, %cond.true.100
  %cond106 = phi i32 [ %92, %cond.true.100 ], [ %97, %cond.false.102 ]
  br label %cond.end.108

cond.false.107:                                   ; preds = %cond.false.97, %cond.true.96, %cond.true.84, %cond.true.79
  br label %cond.end.108

cond.end.108:                                     ; preds = %cond.false.107, %cond.end.105
  %cond109 = phi i32 [ %cond106, %cond.end.105 ], [ 0, %cond.false.107 ]
  %sub110 = sub nsw i32 %sub62, %cond109
  %98 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents = getelementptr inbounds %struct.window, %struct.window* %98, i32 0, i32 10
  %99 = load i64, i64* %contents, align 8
  %call111 = call zeroext i1 @BUFFERP(i64 %99)
  br i1 %call111, label %cond.true.112, label %cond.false.140

cond.true.112:                                    ; preds = %cond.end.108
  %100 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini113 = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 67
  %bf.load114 = load i16, i16* %mini113, align 4
  %bf.clear115 = and i16 %bf.load114, 1
  %bf.cast116 = trunc i16 %bf.clear115 to i1
  br i1 %bf.cast116, label %cond.false.200, label %land.lhs.true.117

land.lhs.true.117:                                ; preds = %cond.true.112
  %101 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p118 = getelementptr inbounds %struct.window, %struct.window* %101, i32 0, i32 67
  %bf.load119 = load i16, i16* %pseudo_window_p118, align 4
  %bf.lshr120 = lshr i16 %bf.load119, 11
  %bf.clear121 = and i16 %bf.lshr120, 1
  %bf.cast122 = trunc i16 %bf.clear121 to i1
  br i1 %bf.cast122, label %cond.false.200, label %land.lhs.true.123

land.lhs.true.123:                                ; preds = %land.lhs.true.117
  %102 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame124 = getelementptr inbounds %struct.window, %struct.window* %102, i32 0, i32 1
  %103 = load i64, i64* %frame124, align 8
  %sub125 = sub nsw i64 %103, 5
  %104 = inttoptr i64 %sub125 to i8*
  %105 = bitcast i8* %104 to %struct.frame*
  %wants_modeline = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 26
  %106 = bitcast i48* %wants_modeline to i64*
  %bf.load126 = load i64, i64* %106, align 8
  %bf.lshr127 = lshr i64 %bf.load126, 14
  %bf.clear128 = and i64 %bf.lshr127, 1
  %bf.cast129 = trunc i64 %bf.clear128 to i1
  br i1 %bf.cast129, label %land.lhs.true.130, label %cond.false.200

land.lhs.true.130:                                ; preds = %land.lhs.true.123
  %107 = load %struct.window*, %struct.window** %w.addr, align 8
  %contents131 = getelementptr inbounds %struct.window, %struct.window* %107, i32 0, i32 10
  %108 = load i64, i64* %contents131, align 8
  %call132 = call %struct.buffer* @XBUFFER(i64 %108)
  %mode_line_format_ = getelementptr inbounds %struct.buffer, %struct.buffer* %call132, i32 0, i32 12
  %109 = load i64, i64* %mode_line_format_, align 8
  %call133 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp134 = icmp eq i64 %109, %call133
  br i1 %cmp134, label %cond.false.200, label %land.lhs.true.135

land.lhs.true.135:                                ; preds = %land.lhs.true.130
  %110 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_height136 = getelementptr inbounds %struct.window, %struct.window* %110, i32 0, i32 35
  %111 = load i32, i32* %pixel_height136, align 4
  %112 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame137 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 1
  %113 = load i64, i64* %frame137, align 8
  %sub138 = sub nsw i64 %113, 5
  %114 = inttoptr i64 %sub138 to i8*
  %115 = bitcast i8* %114 to %struct.frame*
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %115, i32 0, i32 60
  %116 = load i32, i32* %line_height, align 4
  %cmp139 = icmp sgt i32 %111, %116
  br i1 %cmp139, label %cond.true.141, label %cond.false.200

cond.false.140:                                   ; preds = %cond.end.108
  br i1 false, label %cond.true.141, label %cond.false.200

cond.true.141:                                    ; preds = %cond.false.140, %land.lhs.true.135
  %117 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height = getelementptr inbounds %struct.window, %struct.window* %117, i32 0, i32 63
  %118 = load i32, i32* %mode_line_height, align 4
  %cmp142 = icmp sge i32 %118, 0
  br i1 %cmp142, label %cond.true.143, label %cond.false.145

cond.true.143:                                    ; preds = %cond.true.141
  %119 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height144 = getelementptr inbounds %struct.window, %struct.window* %119, i32 0, i32 63
  %120 = load i32, i32* %mode_line_height144, align 4
  br label %cond.end.198

cond.false.145:                                   ; preds = %cond.true.141
  %121 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %121, i32 0, i32 24
  %122 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %tobool = icmp ne %struct.glyph_matrix* %122, null
  br i1 %tobool, label %land.lhs.true.146, label %cond.false.156

land.lhs.true.146:                                ; preds = %cond.false.145
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix147 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 24
  %124 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix147, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %124, i32 0, i32 1
  %125 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %tobool148 = icmp ne %struct.glyph_row* %125, null
  br i1 %tobool148, label %cond.true.149, label %cond.false.156

cond.true.149:                                    ; preds = %land.lhs.true.146
  %126 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix150 = getelementptr inbounds %struct.window, %struct.window* %126, i32 0, i32 24
  %127 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix150, align 8
  %rows151 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %127, i32 0, i32 1
  %128 = load %struct.glyph_row*, %struct.glyph_row** %rows151, align 8
  %129 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix152 = getelementptr inbounds %struct.window, %struct.window* %129, i32 0, i32 24
  %130 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix152, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %130, i32 0, i32 3
  %131 = load i32, i32* %nrows, align 4
  %idx.ext = sext i32 %131 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %128, i64 %idx.ext
  %add.ptr153 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr, i64 -1
  %height154 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr153, i32 0, i32 7
  %132 = load i32, i32* %height154, align 4
  %tobool155 = icmp ne i32 %132, 0
  br i1 %tobool155, label %cond.true.157, label %cond.false.176

cond.false.156:                                   ; preds = %land.lhs.true.146, %cond.false.145
  br i1 false, label %cond.true.157, label %cond.false.176

cond.true.157:                                    ; preds = %cond.false.156, %cond.true.149
  %133 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix158 = getelementptr inbounds %struct.window, %struct.window* %133, i32 0, i32 24
  %134 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix158, align 8
  %tobool159 = icmp ne %struct.glyph_matrix* %134, null
  br i1 %tobool159, label %land.lhs.true.160, label %cond.false.173

land.lhs.true.160:                                ; preds = %cond.true.157
  %135 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix161 = getelementptr inbounds %struct.window, %struct.window* %135, i32 0, i32 24
  %136 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix161, align 8
  %rows162 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %136, i32 0, i32 1
  %137 = load %struct.glyph_row*, %struct.glyph_row** %rows162, align 8
  %tobool163 = icmp ne %struct.glyph_row* %137, null
  br i1 %tobool163, label %cond.true.164, label %cond.false.173

cond.true.164:                                    ; preds = %land.lhs.true.160
  %138 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix165 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 24
  %139 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix165, align 8
  %rows166 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %139, i32 0, i32 1
  %140 = load %struct.glyph_row*, %struct.glyph_row** %rows166, align 8
  %141 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix167 = getelementptr inbounds %struct.window, %struct.window* %141, i32 0, i32 24
  %142 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix167, align 8
  %nrows168 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %142, i32 0, i32 3
  %143 = load i32, i32* %nrows168, align 4
  %idx.ext169 = sext i32 %143 to i64
  %add.ptr170 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %140, i64 %idx.ext169
  %add.ptr171 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr170, i64 -1
  %height172 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %add.ptr171, i32 0, i32 7
  %144 = load i32, i32* %height172, align 4
  br label %cond.end.174

cond.false.173:                                   ; preds = %land.lhs.true.160, %cond.true.157
  br label %cond.end.174

cond.end.174:                                     ; preds = %cond.false.173, %cond.true.164
  %cond175 = phi i32 [ %144, %cond.true.164 ], [ 0, %cond.false.173 ]
  br label %cond.end.195

cond.false.176:                                   ; preds = %cond.false.156, %cond.true.149
  %145 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame177 = getelementptr inbounds %struct.window, %struct.window* %145, i32 0, i32 1
  %146 = load i64, i64* %frame177, align 8
  %sub178 = sub nsw i64 %146, 5
  %147 = inttoptr i64 %sub178 to i8*
  %148 = bitcast i8* %147 to %struct.frame*
  %149 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 473), align 1
  %tobool179 = trunc i8 %149 to i1
  br i1 %tobool179, label %lor.lhs.false.180, label %lor.end

lor.lhs.false.180:                                ; preds = %cond.false.176
  %150 = load %struct.window*, %struct.window** %w.addr, align 8
  %151 = load i64, i64* @selected_window, align 8
  %call181 = call %struct.window* @XWINDOW(i64 %151)
  %cmp182 = icmp eq %struct.window* %150, %call181
  br i1 %cmp182, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.180
  %152 = load i64, i64* @minibuf_level, align 8
  %cmp183 = icmp sgt i64 %152, 0
  br i1 %cmp183, label %land.lhs.true.184, label %land.end

land.lhs.true.184:                                ; preds = %lor.rhs
  %153 = load i64, i64* @minibuf_selected_window, align 8
  %call185 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp186 = icmp eq i64 %153, %call185
  br i1 %cmp186, label %land.end, label %land.lhs.true.187

land.lhs.true.187:                                ; preds = %land.lhs.true.184
  %154 = load i64, i64* @selected_window, align 8
  %call188 = call %struct.window* @XWINDOW(i64 %154)
  %155 = load i64, i64* @minibuf_window, align 8
  %call189 = call %struct.window* @XWINDOW(i64 %155)
  %cmp190 = icmp eq %struct.window* %call188, %call189
  br i1 %cmp190, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.187
  %156 = load %struct.window*, %struct.window** %w.addr, align 8
  %157 = load i64, i64* @minibuf_selected_window, align 8
  %call191 = call %struct.window* @XWINDOW(i64 %157)
  %cmp192 = icmp eq %struct.window* %156, %call191
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.187, %land.lhs.true.184, %lor.rhs
  %158 = phi i1 [ false, %land.lhs.true.187 ], [ false, %land.lhs.true.184 ], [ false, %lor.rhs ], [ %cmp192, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false.180, %cond.false.176
  %159 = phi i1 [ true, %lor.lhs.false.180 ], [ true, %cond.false.176 ], [ %158, %land.end ]
  %cond193 = select i1 %159, i32 1, i32 2
  %call194 = call i32 @estimate_mode_line_height(%struct.frame* %148, i32 %cond193)
  br label %cond.end.195

cond.end.195:                                     ; preds = %lor.end, %cond.end.174
  %cond196 = phi i32 [ %cond175, %cond.end.174 ], [ %call194, %lor.end ]
  %160 = load %struct.window*, %struct.window** %w.addr, align 8
  %mode_line_height197 = getelementptr inbounds %struct.window, %struct.window* %160, i32 0, i32 63
  store i32 %cond196, i32* %mode_line_height197, align 4
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.end.195, %cond.true.143
  %cond199 = phi i32 [ %120, %cond.true.143 ], [ %cond196, %cond.end.195 ]
  br label %cond.end.201

cond.false.200:                                   ; preds = %cond.false.140, %land.lhs.true.135, %land.lhs.true.130, %land.lhs.true.123, %land.lhs.true.117, %cond.true.112
  br label %cond.end.201

cond.end.201:                                     ; preds = %cond.false.200, %cond.end.198
  %cond202 = phi i32 [ %cond199, %cond.end.198 ], [ 0, %cond.false.200 ]
  %sub203 = sub nsw i32 %sub110, %cond202
  br label %cond.end.205

cond.false.204:                                   ; preds = %cond.false.22, %cond.true.21, %cond.true.10, %cond.true
  br label %cond.end.205

cond.end.205:                                     ; preds = %cond.false.204, %cond.end.201
  %cond206 = phi i32 [ %sub203, %cond.end.201 ], [ 0, %cond.false.204 ]
  %add207 = add nsw i32 %add, %cond206
  store i32 %add207, i32* %top, align 4
  %161 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p208 = getelementptr inbounds %struct.window, %struct.window* %161, i32 0, i32 67
  %bf.load209 = load i16, i16* %pseudo_window_p208, align 4
  %bf.lshr210 = lshr i16 %bf.load209, 11
  %bf.clear211 = and i16 %bf.lshr210, 1
  %bf.cast212 = trunc i16 %bf.clear211 to i1
  br i1 %bf.cast212, label %cond.true.224, label %lor.lhs.false.213

lor.lhs.false.213:                                ; preds = %cond.end.205
  %162 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini214 = getelementptr inbounds %struct.window, %struct.window* %162, i32 0, i32 67
  %bf.load215 = load i16, i16* %mini214, align 4
  %bf.clear216 = and i16 %bf.load215, 1
  %bf.cast217 = trunc i16 %bf.clear216 to i1
  br i1 %bf.cast217, label %land.lhs.true.218, label %cond.false.225

land.lhs.true.218:                                ; preds = %lor.lhs.false.213
  %163 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev219 = getelementptr inbounds %struct.window, %struct.window* %163, i32 0, i32 3
  %164 = load i64, i64* %prev219, align 8
  %165 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame220 = getelementptr inbounds %struct.window, %struct.window* %165, i32 0, i32 1
  %166 = load i64, i64* %frame220, align 8
  %sub221 = sub nsw i64 %166, 5
  %167 = inttoptr i64 %sub221 to i8*
  %168 = bitcast i8* %167 to %struct.frame*
  %root_window222 = getelementptr inbounds %struct.frame, %struct.frame* %168, i32 0, i32 5
  %169 = load i64, i64* %root_window222, align 8
  %cmp223 = icmp eq i64 %164, %169
  br i1 %cmp223, label %cond.true.224, label %cond.false.225

cond.true.224:                                    ; preds = %land.lhs.true.218, %cond.end.205
  br i1 false, label %cond.true.243, label %cond.false.254

cond.false.225:                                   ; preds = %land.lhs.true.218, %lor.lhs.false.213
  %170 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type226 = getelementptr inbounds %struct.window, %struct.window* %170, i32 0, i32 18
  %171 = load i64, i64* %horizontal_scroll_bar_type226, align 8
  %call227 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp228 = icmp eq i64 %171, %call227
  br i1 %cmp228, label %cond.true.229, label %cond.false.237

cond.true.229:                                    ; preds = %cond.false.225
  %172 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame230 = getelementptr inbounds %struct.window, %struct.window* %172, i32 0, i32 1
  %173 = load i64, i64* %frame230, align 8
  %sub231 = sub nsw i64 %173, 5
  %174 = inttoptr i64 %sub231 to i8*
  %175 = bitcast i8* %174 to %struct.frame*
  %horizontal_scroll_bars232 = getelementptr inbounds %struct.frame, %struct.frame* %175, i32 0, i32 26
  %176 = bitcast i48* %horizontal_scroll_bars232 to i64*
  %bf.load233 = load i64, i64* %176, align 8
  %bf.lshr234 = lshr i64 %bf.load233, 32
  %bf.clear235 = and i64 %bf.lshr234, 1
  %bf.cast236 = trunc i64 %bf.clear235 to i1
  br i1 %bf.cast236, label %cond.true.243, label %cond.false.254

cond.false.237:                                   ; preds = %cond.false.225
  %177 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type238 = getelementptr inbounds %struct.window, %struct.window* %177, i32 0, i32 18
  %178 = load i64, i64* %horizontal_scroll_bar_type238, align 8
  %call239 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp240 = icmp eq i64 %178, %call239
  br i1 %cmp240, label %cond.true.241, label %cond.false.242

cond.true.241:                                    ; preds = %cond.false.237
  br i1 true, label %cond.true.243, label %cond.false.254

cond.false.242:                                   ; preds = %cond.false.237
  br i1 false, label %cond.true.243, label %cond.false.254

cond.true.243:                                    ; preds = %cond.false.242, %cond.true.241, %cond.true.229, %cond.true.224
  %179 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height244 = getelementptr inbounds %struct.window, %struct.window* %179, i32 0, i32 62
  %180 = load i32, i32* %scroll_bar_height244, align 4
  %cmp245 = icmp sge i32 %180, 0
  br i1 %cmp245, label %cond.true.246, label %cond.false.248

cond.true.246:                                    ; preds = %cond.true.243
  %181 = load %struct.window*, %struct.window** %w.addr, align 8
  %scroll_bar_height247 = getelementptr inbounds %struct.window, %struct.window* %181, i32 0, i32 62
  %182 = load i32, i32* %scroll_bar_height247, align 4
  br label %cond.end.252

cond.false.248:                                   ; preds = %cond.true.243
  %183 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame249 = getelementptr inbounds %struct.window, %struct.window* %183, i32 0, i32 1
  %184 = load i64, i64* %frame249, align 8
  %sub250 = sub nsw i64 %184, 5
  %185 = inttoptr i64 %sub250 to i8*
  %186 = bitcast i8* %185 to %struct.frame*
  %config_scroll_bar_height251 = getelementptr inbounds %struct.frame, %struct.frame* %186, i32 0, i32 71
  %187 = load i32, i32* %config_scroll_bar_height251, align 4
  br label %cond.end.252

cond.end.252:                                     ; preds = %cond.false.248, %cond.true.246
  %cond253 = phi i32 [ %182, %cond.true.246 ], [ %187, %cond.false.248 ]
  br label %cond.end.255

cond.false.254:                                   ; preds = %cond.false.242, %cond.true.241, %cond.true.229, %cond.true.224
  br label %cond.end.255

cond.end.255:                                     ; preds = %cond.false.254, %cond.end.252
  %cond256 = phi i32 [ %cond253, %cond.end.252 ], [ 0, %cond.false.254 ]
  store i32 %cond256, i32* %height, align 4
  %188 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar = getelementptr inbounds %struct.window, %struct.window* %188, i32 0, i32 17
  %189 = load i64, i64* %horizontal_scroll_bar, align 8
  %call257 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp258 = icmp eq i64 %189, %call257
  br i1 %cmp258, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.255
  %190 = load i32, i32* %width, align 4
  %cmp259 = icmp sgt i32 %190, 0
  br i1 %cmp259, label %land.lhs.true.260, label %if.end

land.lhs.true.260:                                ; preds = %if.then
  %191 = load i32, i32* %height, align 4
  %cmp261 = icmp sgt i32 %191, 0
  br i1 %cmp261, label %if.then.262, label %if.end

if.then.262:                                      ; preds = %land.lhs.true.260
  call void @block_input()
  %192 = load %struct.frame*, %struct.frame** %f, align 8
  %193 = load i32, i32* %left, align 4
  %194 = load i32, i32* %top, align 4
  %195 = load i32, i32* %pixel_width, align 4
  %196 = load i32, i32* %height, align 4
  call void @x_clear_area(%struct.frame* %192, i32 %193, i32 %194, i32 %195, i32 %196)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then.262, %land.lhs.true.260, %if.then
  %197 = load %struct.window*, %struct.window** %w.addr, align 8
  %198 = load i32, i32* %top, align 4
  %199 = load i32, i32* %left, align 4
  %200 = load i32, i32* %width, align 4
  %201 = load i32, i32* %height, align 4
  %call263 = call %struct.scroll_bar* @x_scroll_bar_create(%struct.window* %197, i32 %198, i32 %199, i32 %200, i32 %201, i1 zeroext true)
  store %struct.scroll_bar* %call263, %struct.scroll_bar** %bar, align 8
  br label %if.end.328

if.else:                                          ; preds = %cond.end.255
  store i32 0, i32* %mask, align 4
  %202 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar264 = getelementptr inbounds %struct.window, %struct.window* %202, i32 0, i32 17
  %203 = load i64, i64* %horizontal_scroll_bar264, align 8
  %call265 = call %struct.Lisp_Vector* @XVECTOR(i64 %203)
  %204 = bitcast %struct.Lisp_Vector* %call265 to %struct.scroll_bar*
  store %struct.scroll_bar* %204, %struct.scroll_bar** %bar, align 8
  call void @block_input()
  %205 = load i32, i32* %left, align 4
  %206 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %left266 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %206, i32 0, i32 6
  %207 = load i32, i32* %left266, align 4
  %cmp267 = icmp ne i32 %205, %207
  br i1 %cmp267, label %if.then.268, label %if.end.269

if.then.268:                                      ; preds = %if.else
  %208 = load i32, i32* %mask, align 4
  %or = or i32 %208, 1
  store i32 %or, i32* %mask, align 4
  br label %if.end.269

if.end.269:                                       ; preds = %if.then.268, %if.else
  %209 = load i32, i32* %top, align 4
  %210 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %top270 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %210, i32 0, i32 5
  %211 = load i32, i32* %top270, align 4
  %cmp271 = icmp ne i32 %209, %211
  br i1 %cmp271, label %if.then.272, label %if.end.274

if.then.272:                                      ; preds = %if.end.269
  %212 = load i32, i32* %mask, align 4
  %or273 = or i32 %212, 2
  store i32 %or273, i32* %mask, align 4
  br label %if.end.274

if.end.274:                                       ; preds = %if.then.272, %if.end.269
  %213 = load i32, i32* %width, align 4
  %214 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %width275 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %214, i32 0, i32 7
  %215 = load i32, i32* %width275, align 4
  %cmp276 = icmp ne i32 %213, %215
  br i1 %cmp276, label %if.then.277, label %if.end.279

if.then.277:                                      ; preds = %if.end.274
  %216 = load i32, i32* %mask, align 4
  %or278 = or i32 %216, 4
  store i32 %or278, i32* %mask, align 4
  br label %if.end.279

if.end.279:                                       ; preds = %if.then.277, %if.end.274
  %217 = load i32, i32* %height, align 4
  %218 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %height280 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %218, i32 0, i32 8
  %219 = load i32, i32* %height280, align 4
  %cmp281 = icmp ne i32 %217, %219
  br i1 %cmp281, label %if.then.282, label %if.end.284

if.then.282:                                      ; preds = %if.end.279
  %220 = load i32, i32* %mask, align 4
  %or283 = or i32 %220, 8
  store i32 %or283, i32* %mask, align 4
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.282, %if.end.279
  %221 = load i32, i32* %mask, align 4
  %tobool285 = icmp ne i32 %221, 0
  br i1 %tobool285, label %if.then.286, label %if.end.323

if.then.286:                                      ; preds = %if.end.284
  %222 = load i32, i32* %width, align 4
  %cmp287 = icmp sgt i32 %222, 0
  br i1 %cmp287, label %land.lhs.true.288, label %if.end.322

land.lhs.true.288:                                ; preds = %if.then.286
  %223 = load i32, i32* %height, align 4
  %cmp289 = icmp sgt i32 %223, 0
  br i1 %cmp289, label %if.then.290, label %if.end.322

if.then.290:                                      ; preds = %land.lhs.true.288
  %224 = load %struct.frame*, %struct.frame** %f, align 8
  %225 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame291 = getelementptr inbounds %struct.window, %struct.window* %225, i32 0, i32 1
  %226 = load i64, i64* %frame291, align 8
  %sub292 = sub nsw i64 %226, 5
  %227 = inttoptr i64 %sub292 to i8*
  %228 = bitcast i8* %227 to %struct.frame*
  %internal_border_width293 = getelementptr inbounds %struct.frame, %struct.frame* %228, i32 0, i32 51
  %229 = load i32, i32* %internal_border_width293, align 4
  %230 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %230, i32 0, i32 30
  %231 = load i32, i32* %pixel_left, align 4
  %add294 = add nsw i32 %229, %231
  %232 = load i32, i32* %top, align 4
  %233 = load i32, i32* %pixel_width, align 4
  %234 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left295 = getelementptr inbounds %struct.window, %struct.window* %234, i32 0, i32 30
  %235 = load i32, i32* %pixel_left295, align 4
  %236 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width296 = getelementptr inbounds %struct.window, %struct.window* %236, i32 0, i32 34
  %237 = load i32, i32* %pixel_width296, align 4
  %add297 = add nsw i32 %235, %237
  %238 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame298 = getelementptr inbounds %struct.window, %struct.window* %238, i32 0, i32 1
  %239 = load i64, i64* %frame298, align 8
  %sub299 = sub nsw i64 %239, 5
  %240 = inttoptr i64 %sub299 to i8*
  %241 = bitcast i8* %240 to %struct.frame*
  %root_window300 = getelementptr inbounds %struct.frame, %struct.frame* %241, i32 0, i32 5
  %242 = load i64, i64* %root_window300, align 8
  %call301 = call %struct.window* @XWINDOW(i64 %242)
  %pixel_left302 = getelementptr inbounds %struct.window, %struct.window* %call301, i32 0, i32 30
  %243 = load i32, i32* %pixel_left302, align 4
  %244 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame303 = getelementptr inbounds %struct.window, %struct.window* %244, i32 0, i32 1
  %245 = load i64, i64* %frame303, align 8
  %sub304 = sub nsw i64 %245, 5
  %246 = inttoptr i64 %sub304 to i8*
  %247 = bitcast i8* %246 to %struct.frame*
  %root_window305 = getelementptr inbounds %struct.frame, %struct.frame* %247, i32 0, i32 5
  %248 = load i64, i64* %root_window305, align 8
  %call306 = call %struct.window* @XWINDOW(i64 %248)
  %pixel_width307 = getelementptr inbounds %struct.window, %struct.window* %call306, i32 0, i32 34
  %249 = load i32, i32* %pixel_width307, align 4
  %add308 = add nsw i32 %243, %249
  %cmp309 = icmp eq i32 %add297, %add308
  br i1 %cmp309, label %cond.true.315, label %lor.lhs.false.310

lor.lhs.false.310:                                ; preds = %if.then.290
  %250 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini311 = getelementptr inbounds %struct.window, %struct.window* %250, i32 0, i32 67
  %bf.load312 = load i16, i16* %mini311, align 4
  %bf.clear313 = and i16 %bf.load312, 1
  %bf.cast314 = trunc i16 %bf.clear313 to i1
  br i1 %bf.cast314, label %cond.true.315, label %cond.false.316

cond.true.315:                                    ; preds = %lor.lhs.false.310, %if.then.290
  br label %cond.end.319

cond.false.316:                                   ; preds = %lor.lhs.false.310
  %251 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame317 = getelementptr inbounds %struct.window, %struct.window* %251, i32 0, i32 1
  %252 = load i64, i64* %frame317, align 8
  %sub318 = sub nsw i64 %252, 5
  %253 = inttoptr i64 %sub318 to i8*
  %254 = bitcast i8* %253 to %struct.frame*
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %254, i32 0, i32 52
  %255 = load i32, i32* %right_divider_width, align 4
  br label %cond.end.319

cond.end.319:                                     ; preds = %cond.false.316, %cond.true.315
  %cond320 = phi i32 [ 0, %cond.true.315 ], [ %255, %cond.false.316 ]
  %sub321 = sub nsw i32 %233, %cond320
  %256 = load i32, i32* %height, align 4
  call void @x_clear_area(%struct.frame* %224, i32 %add294, i32 %232, i32 %sub321, i32 %256)
  br label %if.end.322

if.end.322:                                       ; preds = %cond.end.319, %land.lhs.true.288, %if.then.286
  %257 = load %struct.frame*, %struct.frame** %f, align 8
  %258 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %258, i32 0, i32 4
  %259 = load i64, i64* %x_window, align 8
  %260 = load i32, i32* %top, align 4
  %261 = load i32, i32* %left, align 4
  %262 = load i32, i32* %width, align 4
  %263 = load i32, i32* %height, align 4
  call void @xg_update_horizontal_scrollbar_pos(%struct.frame* %257, i64 %259, i32 %260, i32 %261, i32 %262, i32 %263)
  br label %if.end.323

if.end.323:                                       ; preds = %if.end.322, %if.end.284
  %264 = load i32, i32* %left, align 4
  %265 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %left324 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %265, i32 0, i32 6
  store i32 %264, i32* %left324, align 4
  %266 = load i32, i32* %top, align 4
  %267 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %top325 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %267, i32 0, i32 5
  store i32 %266, i32* %top325, align 4
  %268 = load i32, i32* %width, align 4
  %269 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %width326 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %269, i32 0, i32 7
  store i32 %268, i32* %width326, align 4
  %270 = load i32, i32* %height, align 4
  %271 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %height327 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %271, i32 0, i32 8
  store i32 %270, i32* %height327, align 4
  call void @unblock_input()
  br label %if.end.328

if.end.328:                                       ; preds = %if.end.323, %if.end
  %272 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %273 = load i32, i32* %portion.addr, align 4
  %274 = load i32, i32* %position.addr, align 4
  %275 = load i32, i32* %whole.addr, align 4
  call void @x_set_toolkit_horizontal_scroll_bar_thumb(%struct.scroll_bar* %272, i32 %273, i32 %274, i32 %275)
  %276 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %277 = bitcast %struct.scroll_bar* %276 to i8*
  %call329 = call i64 @make_lisp_ptr(i8* %277, i32 5)
  store i64 %call329, i64* %barobj, align 8
  %278 = load %struct.window*, %struct.window** %w.addr, align 8
  %279 = load i64, i64* %barobj, align 8
  call void @wset_horizontal_scroll_bar(%struct.window* %278, i64 %279)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTcondemn_scroll_bars(%struct.frame* %frame) #0 {
entry:
  %frame.addr = alloca %struct.frame*, align 8
  %last = alloca i64, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 9
  %1 = load i64, i64* %scroll_bars, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %if.end.17, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %condemned_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 10
  %3 = load i64, i64* %condemned_scroll_bars, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %3, %call1
  br i1 %cmp2, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %4 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %scroll_bars4 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 9
  %5 = load i64, i64* %scroll_bars4, align 8
  store i64 %5, i64* %last, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.3
  %6 = load i64, i64* %last, align 8
  %call5 = call %struct.Lisp_Vector* @XVECTOR(i64 %6)
  %7 = bitcast %struct.Lisp_Vector* %call5 to %struct.scroll_bar*
  %next = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %7, i32 0, i32 2
  %8 = load i64, i64* %next, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %8, %call6
  %lnot = xor i1 %cmp7, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i64, i64* %last, align 8
  %call8 = call %struct.Lisp_Vector* @XVECTOR(i64 %9)
  %10 = bitcast %struct.Lisp_Vector* %call8 to %struct.scroll_bar*
  %next9 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %10, i32 0, i32 2
  %11 = load i64, i64* %next9, align 8
  store i64 %11, i64* %last, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %condemned_scroll_bars10 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 10
  %13 = load i64, i64* %condemned_scroll_bars10, align 8
  %14 = load i64, i64* %last, align 8
  %call11 = call %struct.Lisp_Vector* @XVECTOR(i64 %14)
  %15 = bitcast %struct.Lisp_Vector* %call11 to %struct.scroll_bar*
  %next12 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %15, i32 0, i32 2
  store i64 %13, i64* %next12, align 8
  %16 = load i64, i64* %last, align 8
  %17 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %condemned_scroll_bars13 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 10
  %18 = load i64, i64* %condemned_scroll_bars13, align 8
  %call14 = call %struct.Lisp_Vector* @XVECTOR(i64 %18)
  %19 = bitcast %struct.Lisp_Vector* %call14 to %struct.scroll_bar*
  %prev = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %19, i32 0, i32 3
  store i64 %16, i64* %prev, align 8
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  %20 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %21 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %scroll_bars15 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 9
  %22 = load i64, i64* %scroll_bars15, align 8
  call void @fset_condemned_scroll_bars(%struct.frame* %20, i64 %22)
  %23 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_scroll_bars(%struct.frame* %23, i64 %call16)
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTredeem_scroll_bar(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  %barobj = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 15
  %1 = load i64, i64* %vertical_scroll_bar, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %1, %call
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 17
  %3 = load i64, i64* %horizontal_scroll_bar, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %3, %call1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  call void @emacs_abort() #10
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar3 = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 15
  %5 = load i64, i64* %vertical_scroll_bar3, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp5 = icmp eq i64 %5, %call4
  br i1 %cmp5, label %if.end.111, label %land.lhs.true.6

land.lhs.true.6:                                  ; preds = %if.end
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.6
  br label %cond.end.27

cond.false:                                       ; preds = %land.lhs.true.6
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 16
  %8 = load i64, i64* %vertical_scroll_bar_type, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp8 = icmp eq i64 %8, %call7
  br i1 %cmp8, label %cond.true.9, label %cond.false.15

cond.true.9:                                      ; preds = %cond.false
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 1
  %10 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  %vertical_scroll_bar_type10 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 26
  %13 = bitcast i48* %vertical_scroll_bar_type10 to i64*
  %bf.load11 = load i64, i64* %13, align 8
  %bf.lshr12 = lshr i64 %bf.load11, 30
  %bf.clear13 = and i64 %bf.lshr12, 3
  %bf.cast14 = trunc i64 %bf.clear13 to i32
  br label %cond.end.25

cond.false.15:                                    ; preds = %cond.false
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type16 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 16
  %15 = load i64, i64* %vertical_scroll_bar_type16, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp18 = icmp eq i64 %15, %call17
  br i1 %cmp18, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %cond.false.15
  br label %cond.end

cond.false.20:                                    ; preds = %cond.false.15
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type21 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 16
  %17 = load i64, i64* %vertical_scroll_bar_type21, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp23 = icmp eq i64 %17, %call22
  %cond = select i1 %cmp23, i32 2, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false.20, %cond.true.19
  %cond24 = phi i32 [ 1, %cond.true.19 ], [ %cond, %cond.false.20 ]
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.end, %cond.true.9
  %cond26 = phi i32 [ %bf.cast14, %cond.true.9 ], [ %cond24, %cond.end ]
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.end.25, %cond.true
  %cond28 = phi i32 [ 0, %cond.true ], [ %cond26, %cond.end.25 ]
  %cmp29 = icmp eq i32 %cond28, 1
  br i1 %cmp29, label %if.then.65, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.27
  %18 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p30 = getelementptr inbounds %struct.window, %struct.window* %18, i32 0, i32 67
  %bf.load31 = load i16, i16* %pseudo_window_p30, align 4
  %bf.lshr32 = lshr i16 %bf.load31, 11
  %bf.clear33 = and i16 %bf.lshr32, 1
  %bf.cast34 = trunc i16 %bf.clear33 to i1
  br i1 %bf.cast34, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %lor.lhs.false
  br label %cond.end.62

cond.false.36:                                    ; preds = %lor.lhs.false
  %19 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type37 = getelementptr inbounds %struct.window, %struct.window* %19, i32 0, i32 16
  %20 = load i64, i64* %vertical_scroll_bar_type37, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp39 = icmp eq i64 %20, %call38
  br i1 %cmp39, label %cond.true.40, label %cond.false.48

cond.true.40:                                     ; preds = %cond.false.36
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame41 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 1
  %22 = load i64, i64* %frame41, align 8
  %sub42 = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub42 to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %vertical_scroll_bar_type43 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 26
  %25 = bitcast i48* %vertical_scroll_bar_type43 to i64*
  %bf.load44 = load i64, i64* %25, align 8
  %bf.lshr45 = lshr i64 %bf.load44, 30
  %bf.clear46 = and i64 %bf.lshr45, 3
  %bf.cast47 = trunc i64 %bf.clear46 to i32
  br label %cond.end.60

cond.false.48:                                    ; preds = %cond.false.36
  %26 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type49 = getelementptr inbounds %struct.window, %struct.window* %26, i32 0, i32 16
  %27 = load i64, i64* %vertical_scroll_bar_type49, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp51 = icmp eq i64 %27, %call50
  br i1 %cmp51, label %cond.true.52, label %cond.false.53

cond.true.52:                                     ; preds = %cond.false.48
  br label %cond.end.58

cond.false.53:                                    ; preds = %cond.false.48
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar_type54 = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 16
  %29 = load i64, i64* %vertical_scroll_bar_type54, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp56 = icmp eq i64 %29, %call55
  %cond57 = select i1 %cmp56, i32 2, i32 0
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.53, %cond.true.52
  %cond59 = phi i32 [ 1, %cond.true.52 ], [ %cond57, %cond.false.53 ]
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.end.58, %cond.true.40
  %cond61 = phi i32 [ %bf.cast47, %cond.true.40 ], [ %cond59, %cond.end.58 ]
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.end.60, %cond.true.35
  %cond63 = phi i32 [ 0, %cond.true.35 ], [ %cond61, %cond.end.60 ]
  %cmp64 = icmp eq i32 %cond63, 2
  br i1 %cmp64, label %if.then.65, label %if.end.111

if.then.65:                                       ; preds = %cond.end.62, %cond.end.27
  %30 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar66 = getelementptr inbounds %struct.window, %struct.window* %30, i32 0, i32 15
  %31 = load i64, i64* %vertical_scroll_bar66, align 8
  %call67 = call %struct.Lisp_Vector* @XVECTOR(i64 %31)
  %32 = bitcast %struct.Lisp_Vector* %call67 to %struct.scroll_bar*
  store %struct.scroll_bar* %32, %struct.scroll_bar** %bar, align 8
  %33 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame68 = getelementptr inbounds %struct.window, %struct.window* %33, i32 0, i32 1
  %34 = load i64, i64* %frame68, align 8
  %sub69 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub69 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  store %struct.frame* %36, %struct.frame** %f, align 8
  %37 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %37, i32 0, i32 3
  %38 = load i64, i64* %prev, align 8
  %call70 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp71 = icmp eq i64 %38, %call70
  br i1 %cmp71, label %if.then.72, label %if.else.82

if.then.72:                                       ; preds = %if.then.65
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 9
  %40 = load i64, i64* %scroll_bars, align 8
  %41 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar73 = getelementptr inbounds %struct.window, %struct.window* %41, i32 0, i32 15
  %42 = load i64, i64* %vertical_scroll_bar73, align 8
  %cmp74 = icmp eq i64 %40, %42
  br i1 %cmp74, label %if.then.75, label %if.else

if.then.75:                                       ; preds = %if.then.72
  br label %horizontal

if.else:                                          ; preds = %if.then.72
  %43 = load %struct.frame*, %struct.frame** %f, align 8
  %condemned_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 10
  %44 = load i64, i64* %condemned_scroll_bars, align 8
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %vertical_scroll_bar76 = getelementptr inbounds %struct.window, %struct.window* %45, i32 0, i32 15
  %46 = load i64, i64* %vertical_scroll_bar76, align 8
  %cmp77 = icmp eq i64 %44, %46
  br i1 %cmp77, label %if.then.78, label %if.else.79

if.then.78:                                       ; preds = %if.else
  %47 = load %struct.frame*, %struct.frame** %f, align 8
  %48 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %48, i32 0, i32 2
  %49 = load i64, i64* %next, align 8
  call void @fset_condemned_scroll_bars(%struct.frame* %47, i64 %49)
  br label %if.end.80

if.else.79:                                       ; preds = %if.else
  call void @emacs_abort() #10
  unreachable

if.end.80:                                        ; preds = %if.then.78
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80
  br label %if.end.87

if.else.82:                                       ; preds = %if.then.65
  %50 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next83 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %50, i32 0, i32 2
  %51 = load i64, i64* %next83, align 8
  %52 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev84 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %52, i32 0, i32 3
  %53 = load i64, i64* %prev84, align 8
  %call85 = call %struct.Lisp_Vector* @XVECTOR(i64 %53)
  %54 = bitcast %struct.Lisp_Vector* %call85 to %struct.scroll_bar*
  %next86 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %54, i32 0, i32 2
  store i64 %51, i64* %next86, align 8
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.82, %if.end.81
  %55 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next88 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %55, i32 0, i32 2
  %56 = load i64, i64* %next88, align 8
  %call89 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp90 = icmp eq i64 %56, %call89
  br i1 %cmp90, label %if.end.96, label %if.then.91

if.then.91:                                       ; preds = %if.end.87
  %57 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev92 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %57, i32 0, i32 3
  %58 = load i64, i64* %prev92, align 8
  %59 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next93 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %59, i32 0, i32 2
  %60 = load i64, i64* %next93, align 8
  %call94 = call %struct.Lisp_Vector* @XVECTOR(i64 %60)
  %61 = bitcast %struct.Lisp_Vector* %call94 to %struct.scroll_bar*
  %prev95 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %61, i32 0, i32 3
  store i64 %58, i64* %prev95, align 8
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.91, %if.end.87
  %62 = load %struct.frame*, %struct.frame** %f, align 8
  %scroll_bars97 = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 9
  %63 = load i64, i64* %scroll_bars97, align 8
  %64 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next98 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %64, i32 0, i32 2
  store i64 %63, i64* %next98, align 8
  %call99 = call i64 @builtin_lisp_symbol(i32 0)
  %65 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev100 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %65, i32 0, i32 3
  store i64 %call99, i64* %prev100, align 8
  %66 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %67 = bitcast %struct.scroll_bar* %66 to i8*
  %call101 = call i64 @make_lisp_ptr(i8* %67, i32 5)
  store i64 %call101, i64* %barobj, align 8
  %68 = load %struct.frame*, %struct.frame** %f, align 8
  %69 = load i64, i64* %barobj, align 8
  call void @fset_scroll_bars(%struct.frame* %68, i64 %69)
  %70 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next102 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %70, i32 0, i32 2
  %71 = load i64, i64* %next102, align 8
  %call103 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp104 = icmp eq i64 %71, %call103
  br i1 %cmp104, label %if.end.110, label %if.then.105

if.then.105:                                      ; preds = %if.end.96
  %72 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %73 = bitcast %struct.scroll_bar* %72 to i8*
  %call106 = call i64 @make_lisp_ptr(i8* %73, i32 5)
  %74 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next107 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %74, i32 0, i32 2
  %75 = load i64, i64* %next107, align 8
  %call108 = call %struct.Lisp_Vector* @XVECTOR(i64 %75)
  %76 = bitcast %struct.Lisp_Vector* %call108 to %struct.scroll_bar*
  %prev109 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %76, i32 0, i32 3
  store i64 %call106, i64* %prev109, align 8
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.105, %if.end.96
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %cond.end.62, %if.end
  br label %horizontal

horizontal:                                       ; preds = %if.end.111, %if.then.75
  %77 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar112 = getelementptr inbounds %struct.window, %struct.window* %77, i32 0, i32 17
  %78 = load i64, i64* %horizontal_scroll_bar112, align 8
  %call113 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp114 = icmp eq i64 %78, %call113
  br i1 %cmp114, label %if.end.198, label %land.lhs.true.115

land.lhs.true.115:                                ; preds = %horizontal
  %79 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p116 = getelementptr inbounds %struct.window, %struct.window* %79, i32 0, i32 67
  %bf.load117 = load i16, i16* %pseudo_window_p116, align 4
  %bf.lshr118 = lshr i16 %bf.load117, 11
  %bf.clear119 = and i16 %bf.lshr118, 1
  %bf.cast120 = trunc i16 %bf.clear119 to i1
  br i1 %bf.cast120, label %cond.true.130, label %lor.lhs.false.121

lor.lhs.false.121:                                ; preds = %land.lhs.true.115
  %80 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %80, i32 0, i32 67
  %bf.load122 = load i16, i16* %mini, align 4
  %bf.clear123 = and i16 %bf.load122, 1
  %bf.cast124 = trunc i16 %bf.clear123 to i1
  br i1 %bf.cast124, label %land.lhs.true.125, label %cond.false.131

land.lhs.true.125:                                ; preds = %lor.lhs.false.121
  %81 = load %struct.window*, %struct.window** %w.addr, align 8
  %prev126 = getelementptr inbounds %struct.window, %struct.window* %81, i32 0, i32 3
  %82 = load i64, i64* %prev126, align 8
  %83 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame127 = getelementptr inbounds %struct.window, %struct.window* %83, i32 0, i32 1
  %84 = load i64, i64* %frame127, align 8
  %sub128 = sub nsw i64 %84, 5
  %85 = inttoptr i64 %sub128 to i8*
  %86 = bitcast i8* %85 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 5
  %87 = load i64, i64* %root_window, align 8
  %cmp129 = icmp eq i64 %82, %87
  br i1 %cmp129, label %cond.true.130, label %cond.false.131

cond.true.130:                                    ; preds = %land.lhs.true.125, %land.lhs.true.115
  br i1 false, label %if.then.147, label %if.end.198

cond.false.131:                                   ; preds = %land.lhs.true.125, %lor.lhs.false.121
  %88 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type = getelementptr inbounds %struct.window, %struct.window* %88, i32 0, i32 18
  %89 = load i64, i64* %horizontal_scroll_bar_type, align 8
  %call132 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp133 = icmp eq i64 %89, %call132
  br i1 %cmp133, label %cond.true.134, label %cond.false.141

cond.true.134:                                    ; preds = %cond.false.131
  %90 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame135 = getelementptr inbounds %struct.window, %struct.window* %90, i32 0, i32 1
  %91 = load i64, i64* %frame135, align 8
  %sub136 = sub nsw i64 %91, 5
  %92 = inttoptr i64 %sub136 to i8*
  %93 = bitcast i8* %92 to %struct.frame*
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %93, i32 0, i32 26
  %94 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load137 = load i64, i64* %94, align 8
  %bf.lshr138 = lshr i64 %bf.load137, 32
  %bf.clear139 = and i64 %bf.lshr138, 1
  %bf.cast140 = trunc i64 %bf.clear139 to i1
  br i1 %bf.cast140, label %if.then.147, label %if.end.198

cond.false.141:                                   ; preds = %cond.false.131
  %95 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar_type142 = getelementptr inbounds %struct.window, %struct.window* %95, i32 0, i32 18
  %96 = load i64, i64* %horizontal_scroll_bar_type142, align 8
  %call143 = call i64 @builtin_lisp_symbol(i32 213)
  %cmp144 = icmp eq i64 %96, %call143
  br i1 %cmp144, label %cond.true.145, label %cond.false.146

cond.true.145:                                    ; preds = %cond.false.141
  br i1 true, label %if.then.147, label %if.end.198

cond.false.146:                                   ; preds = %cond.false.141
  br i1 false, label %if.then.147, label %if.end.198

if.then.147:                                      ; preds = %cond.false.146, %cond.true.145, %cond.true.134, %cond.true.130
  %97 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar148 = getelementptr inbounds %struct.window, %struct.window* %97, i32 0, i32 17
  %98 = load i64, i64* %horizontal_scroll_bar148, align 8
  %call149 = call %struct.Lisp_Vector* @XVECTOR(i64 %98)
  %99 = bitcast %struct.Lisp_Vector* %call149 to %struct.scroll_bar*
  store %struct.scroll_bar* %99, %struct.scroll_bar** %bar, align 8
  %100 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame150 = getelementptr inbounds %struct.window, %struct.window* %100, i32 0, i32 1
  %101 = load i64, i64* %frame150, align 8
  %sub151 = sub nsw i64 %101, 5
  %102 = inttoptr i64 %sub151 to i8*
  %103 = bitcast i8* %102 to %struct.frame*
  store %struct.frame* %103, %struct.frame** %f, align 8
  %104 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev152 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %104, i32 0, i32 3
  %105 = load i64, i64* %prev152, align 8
  %call153 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp154 = icmp eq i64 %105, %call153
  br i1 %cmp154, label %if.then.155, label %if.else.169

if.then.155:                                      ; preds = %if.then.147
  %106 = load %struct.frame*, %struct.frame** %f, align 8
  %scroll_bars156 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 9
  %107 = load i64, i64* %scroll_bars156, align 8
  %108 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar157 = getelementptr inbounds %struct.window, %struct.window* %108, i32 0, i32 17
  %109 = load i64, i64* %horizontal_scroll_bar157, align 8
  %cmp158 = icmp eq i64 %107, %109
  br i1 %cmp158, label %if.then.159, label %if.else.160

if.then.159:                                      ; preds = %if.then.155
  br label %if.end.198

if.else.160:                                      ; preds = %if.then.155
  %110 = load %struct.frame*, %struct.frame** %f, align 8
  %condemned_scroll_bars161 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 10
  %111 = load i64, i64* %condemned_scroll_bars161, align 8
  %112 = load %struct.window*, %struct.window** %w.addr, align 8
  %horizontal_scroll_bar162 = getelementptr inbounds %struct.window, %struct.window* %112, i32 0, i32 17
  %113 = load i64, i64* %horizontal_scroll_bar162, align 8
  %cmp163 = icmp eq i64 %111, %113
  br i1 %cmp163, label %if.then.164, label %if.else.166

if.then.164:                                      ; preds = %if.else.160
  %114 = load %struct.frame*, %struct.frame** %f, align 8
  %115 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next165 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %115, i32 0, i32 2
  %116 = load i64, i64* %next165, align 8
  call void @fset_condemned_scroll_bars(%struct.frame* %114, i64 %116)
  br label %if.end.167

if.else.166:                                      ; preds = %if.else.160
  call void @emacs_abort() #10
  unreachable

if.end.167:                                       ; preds = %if.then.164
  br label %if.end.168

if.end.168:                                       ; preds = %if.end.167
  br label %if.end.174

if.else.169:                                      ; preds = %if.then.147
  %117 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next170 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %117, i32 0, i32 2
  %118 = load i64, i64* %next170, align 8
  %119 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev171 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %119, i32 0, i32 3
  %120 = load i64, i64* %prev171, align 8
  %call172 = call %struct.Lisp_Vector* @XVECTOR(i64 %120)
  %121 = bitcast %struct.Lisp_Vector* %call172 to %struct.scroll_bar*
  %next173 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %121, i32 0, i32 2
  store i64 %118, i64* %next173, align 8
  br label %if.end.174

if.end.174:                                       ; preds = %if.else.169, %if.end.168
  %122 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next175 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %122, i32 0, i32 2
  %123 = load i64, i64* %next175, align 8
  %call176 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp177 = icmp eq i64 %123, %call176
  br i1 %cmp177, label %if.end.183, label %if.then.178

if.then.178:                                      ; preds = %if.end.174
  %124 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev179 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %124, i32 0, i32 3
  %125 = load i64, i64* %prev179, align 8
  %126 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next180 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %126, i32 0, i32 2
  %127 = load i64, i64* %next180, align 8
  %call181 = call %struct.Lisp_Vector* @XVECTOR(i64 %127)
  %128 = bitcast %struct.Lisp_Vector* %call181 to %struct.scroll_bar*
  %prev182 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %128, i32 0, i32 3
  store i64 %125, i64* %prev182, align 8
  br label %if.end.183

if.end.183:                                       ; preds = %if.then.178, %if.end.174
  %129 = load %struct.frame*, %struct.frame** %f, align 8
  %scroll_bars184 = getelementptr inbounds %struct.frame, %struct.frame* %129, i32 0, i32 9
  %130 = load i64, i64* %scroll_bars184, align 8
  %131 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next185 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %131, i32 0, i32 2
  store i64 %130, i64* %next185, align 8
  %call186 = call i64 @builtin_lisp_symbol(i32 0)
  %132 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev187 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %132, i32 0, i32 3
  store i64 %call186, i64* %prev187, align 8
  %133 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %134 = bitcast %struct.scroll_bar* %133 to i8*
  %call188 = call i64 @make_lisp_ptr(i8* %134, i32 5)
  store i64 %call188, i64* %barobj, align 8
  %135 = load %struct.frame*, %struct.frame** %f, align 8
  %136 = load i64, i64* %barobj, align 8
  call void @fset_scroll_bars(%struct.frame* %135, i64 %136)
  %137 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next189 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %137, i32 0, i32 2
  %138 = load i64, i64* %next189, align 8
  %call190 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp191 = icmp eq i64 %138, %call190
  br i1 %cmp191, label %if.end.197, label %if.then.192

if.then.192:                                      ; preds = %if.end.183
  %139 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %140 = bitcast %struct.scroll_bar* %139 to i8*
  %call193 = call i64 @make_lisp_ptr(i8* %140, i32 5)
  %141 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next194 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %141, i32 0, i32 2
  %142 = load i64, i64* %next194, align 8
  %call195 = call %struct.Lisp_Vector* @XVECTOR(i64 %142)
  %143 = bitcast %struct.Lisp_Vector* %call195 to %struct.scroll_bar*
  %prev196 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %143, i32 0, i32 3
  store i64 %call193, i64* %prev196, align 8
  br label %if.end.197

if.end.197:                                       ; preds = %if.then.192, %if.end.183
  br label %if.end.198

if.end.198:                                       ; preds = %if.then.159, %if.end.197, %cond.false.146, %cond.true.145, %cond.true.134, %cond.true.130, %horizontal
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @XTjudge_scroll_bars(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %bar = alloca i64, align 8
  %next = alloca i64, align 8
  %b = alloca %struct.scroll_bar*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %condemned_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 10
  %1 = load i64, i64* %condemned_scroll_bars, align 8
  store i64 %1, i64* %bar, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  call void @fset_condemned_scroll_bars(%struct.frame* %2, i64 %call)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %bar, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %3, %call1
  %lnot = xor i1 %cmp, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %bar, align 8
  %call2 = call %struct.Lisp_Vector* @XVECTOR(i64 %4)
  %5 = bitcast %struct.Lisp_Vector* %call2 to %struct.scroll_bar*
  store %struct.scroll_bar* %5, %struct.scroll_bar** %b, align 8
  %6 = load %struct.scroll_bar*, %struct.scroll_bar** %b, align 8
  call void @x_scroll_bar_remove(%struct.scroll_bar* %6)
  %7 = load %struct.scroll_bar*, %struct.scroll_bar** %b, align 8
  %next3 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %7, i32 0, i32 2
  %8 = load i64, i64* %next3, align 8
  store i64 %8, i64* %next, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %9 = load %struct.scroll_bar*, %struct.scroll_bar** %b, align 8
  %prev = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %9, i32 0, i32 3
  store i64 %call4, i64* %prev, align 8
  %10 = load %struct.scroll_bar*, %struct.scroll_bar** %b, align 8
  %next5 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %10, i32 0, i32 2
  store i64 %call4, i64* %next5, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64, i64* %next, align 8
  store i64 %11, i64* %bar, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_destroy_window(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 2
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %cmp = icmp ne %struct._XDisplay* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_free_frame_resources(%struct.frame* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %reference_count = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 5
  %7 = load i32, i32* %reference_count, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %reference_count, align 4
  ret void
}

declare void @x_produce_glyphs(%struct.it*) #1

declare void @x_write_glyphs(%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32) #1

declare void @x_insert_glyphs(%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32) #1

declare void @x_clear_end_of_line(%struct.window*, %struct.glyph_row*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_scroll_run(%struct.window* %w, %struct.run* %run) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %run.addr = alloca %struct.run*, align 8
  %f = alloca %struct.frame*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %from_y = alloca i32, align 4
  %to_y = alloca i32, align 4
  %bottom_y = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.run* %run, %struct.run** %run.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @window_box(%struct.window* %4, i32 -1, i32* %x, i32* %y, i32* %width, i32* %height)
  %5 = load %struct.run*, %struct.run** %run.addr, align 8
  %current_y = getelementptr inbounds %struct.run, %struct.run* %5, i32 0, i32 1
  %6 = load i32, i32* %current_y, align 4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame1 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 1
  %8 = load i64, i64* %frame1, align 8
  %sub2 = sub nsw i64 %8, 5
  %9 = inttoptr i64 %sub2 to i8*
  %10 = bitcast i8* %9 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 51
  %11 = load i32, i32* %internal_border_width, align 4
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 31
  %13 = load i32, i32* %pixel_top, align 4
  %add = add nsw i32 %11, %13
  %add3 = add nsw i32 %6, %add
  store i32 %add3, i32* %from_y, align 4
  %14 = load %struct.run*, %struct.run** %run.addr, align 8
  %desired_y = getelementptr inbounds %struct.run, %struct.run* %14, i32 0, i32 0
  %15 = load i32, i32* %desired_y, align 4
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame4 = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 1
  %17 = load i64, i64* %frame4, align 8
  %sub5 = sub nsw i64 %17, 5
  %18 = inttoptr i64 %sub5 to i8*
  %19 = bitcast i8* %18 to %struct.frame*
  %internal_border_width6 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 51
  %20 = load i32, i32* %internal_border_width6, align 4
  %21 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top7 = getelementptr inbounds %struct.window, %struct.window* %21, i32 0, i32 31
  %22 = load i32, i32* %pixel_top7, align 4
  %add8 = add nsw i32 %20, %22
  %add9 = add nsw i32 %15, %add8
  store i32 %add9, i32* %to_y, align 4
  %23 = load i32, i32* %y, align 4
  %24 = load i32, i32* %height, align 4
  %add10 = add nsw i32 %23, %24
  store i32 %add10, i32* %bottom_y, align 4
  %25 = load i32, i32* %to_y, align 4
  %26 = load i32, i32* %from_y, align 4
  %cmp = icmp slt i32 %25, %26
  br i1 %cmp, label %if.then, label %if.else.17

if.then:                                          ; preds = %entry
  %27 = load i32, i32* %from_y, align 4
  %28 = load %struct.run*, %struct.run** %run.addr, align 8
  %height11 = getelementptr inbounds %struct.run, %struct.run* %28, i32 0, i32 4
  %29 = load i32, i32* %height11, align 4
  %add12 = add nsw i32 %27, %29
  %30 = load i32, i32* %bottom_y, align 4
  %cmp13 = icmp sgt i32 %add12, %30
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.then
  %31 = load i32, i32* %bottom_y, align 4
  %32 = load i32, i32* %from_y, align 4
  %sub15 = sub nsw i32 %31, %32
  store i32 %sub15, i32* %height, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %33 = load %struct.run*, %struct.run** %run.addr, align 8
  %height16 = getelementptr inbounds %struct.run, %struct.run* %33, i32 0, i32 4
  %34 = load i32, i32* %height16, align 4
  store i32 %34, i32* %height, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.14
  br label %if.end.26

if.else.17:                                       ; preds = %entry
  %35 = load i32, i32* %to_y, align 4
  %36 = load %struct.run*, %struct.run** %run.addr, align 8
  %height18 = getelementptr inbounds %struct.run, %struct.run* %36, i32 0, i32 4
  %37 = load i32, i32* %height18, align 4
  %add19 = add nsw i32 %35, %37
  %38 = load i32, i32* %bottom_y, align 4
  %cmp20 = icmp sgt i32 %add19, %38
  br i1 %cmp20, label %if.then.21, label %if.else.23

if.then.21:                                       ; preds = %if.else.17
  %39 = load i32, i32* %bottom_y, align 4
  %40 = load i32, i32* %to_y, align 4
  %sub22 = sub nsw i32 %39, %40
  store i32 %sub22, i32* %height, align 4
  br label %if.end.25

if.else.23:                                       ; preds = %if.else.17
  %41 = load %struct.run*, %struct.run** %run.addr, align 8
  %height24 = getelementptr inbounds %struct.run, %struct.run* %41, i32 0, i32 4
  %42 = load i32, i32* %height24, align 4
  store i32 %42, i32* %height, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.23, %if.then.21
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end
  call void @block_input()
  %43 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @x_clear_cursor(%struct.window* %43)
  %44 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data to %struct.x_output**
  %45 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %45, i32 0, i32 44
  %46 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %46, i32 0, i32 2
  %47 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %48 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data28 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 62
  %x29 = bitcast %union.output_data* %output_data28 to %struct.x_output**
  %49 = load %struct.x_output*, %struct.x_output** %x29, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %49, i32 0, i32 9
  %50 = load i64, i64* %window_desc, align 8
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data30 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 62
  %x31 = bitcast %union.output_data* %output_data30 to %struct.x_output**
  %52 = load %struct.x_output*, %struct.x_output** %x31, align 8
  %window_desc32 = getelementptr inbounds %struct.x_output, %struct.x_output* %52, i32 0, i32 9
  %53 = load i64, i64* %window_desc32, align 8
  %54 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data33 = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 62
  %x34 = bitcast %union.output_data* %output_data33 to %struct.x_output**
  %55 = load %struct.x_output*, %struct.x_output** %x34, align 8
  %normal_gc = getelementptr inbounds %struct.x_output, %struct.x_output* %55, i32 0, i32 6
  %56 = load %struct._XGC*, %struct._XGC** %normal_gc, align 8
  %57 = load i32, i32* %x, align 4
  %58 = load i32, i32* %from_y, align 4
  %59 = load i32, i32* %width, align 4
  %60 = load i32, i32* %height, align 4
  %61 = load i32, i32* %x, align 4
  %62 = load i32, i32* %to_y, align 4
  %call = call i32 @XCopyArea(%struct._XDisplay* %47, i64 %50, i64 %53, %struct._XGC* %56, i32 %57, i32 %58, i32 %59, i32 %60, i32 %61, i32 %62)
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_after_update_window_line(%struct.window* %w, %struct.glyph_row* %desired_row) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %desired_row.addr = alloca %struct.glyph_row*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %desired_row, %struct.glyph_row** %desired_row.addr, align 8
  %0 = load %struct.glyph_row*, %struct.glyph_row** %desired_row.addr, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %0, i32 0, i32 22
  %1 = bitcast i40* %mode_line_p to i64*
  %bf.load = load i64, i64* %1, align 4
  %bf.lshr = lshr i64 %bf.load, 20
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %2, i32 0, i32 67
  %bf.load1 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr2 = lshr i16 %bf.load1, 11
  %bf.clear3 = and i16 %bf.lshr2, 1
  %bf.cast4 = trunc i16 %bf.clear3 to i1
  br i1 %bf.cast4, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.glyph_row*, %struct.glyph_row** %desired_row.addr, align 8
  %redraw_fringe_bitmaps_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %3, i32 0, i32 22
  %4 = bitcast i40* %redraw_fringe_bitmaps_p to i64*
  %bf.load5 = load i64, i64* %4, align 4
  %bf.clear6 = and i64 %bf.load5, -513
  %bf.set = or i64 %bf.clear6, 512
  store i64 %bf.set, i64* %4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_update_window_begin(%struct.window* %w) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %hlinfo = alloca %struct.Mouse_HLInfo*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %5, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 44
  %8 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %8, i32 0, i32 25
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data1 to %struct.tty_output**
  %10 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %display_info2 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %10, i32 0, i32 0
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %display_info2, align 8
  %mouse_highlight3 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.Mouse_HLInfo* [ %mouse_highlight, %cond.true ], [ %mouse_highlight3, %cond.false ]
  store %struct.Mouse_HLInfo* %cond, %struct.Mouse_HLInfo** %hlinfo, align 8
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %output_cursor = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 51
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %cursor = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 49
  %14 = bitcast %struct.cursor_pos* %output_cursor to i8*
  %15 = bitcast %struct.cursor_pos* %cursor to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 16, i32 4, i1 false)
  call void @block_input()
  %16 = load %struct.frame*, %struct.frame** %f, align 8
  %17 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_mouse_frame = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %17, i32 0, i32 9
  %18 = load %struct.frame*, %struct.frame** %mouse_face_mouse_frame, align 8
  %cmp4 = icmp eq %struct.frame* %16, %18
  br i1 %cmp4, label %if.then, label %if.end.12

if.then:                                          ; preds = %cond.end
  %19 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_defer = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %19, i32 0, i32 12
  %bf.load5 = load i8, i8* %mouse_face_defer, align 8
  %bf.clear6 = and i8 %bf.load5, -3
  %bf.set = or i8 %bf.clear6, 2
  store i8 %bf.set, i8* %mouse_face_defer, align 8
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %garbaged to i64*
  %bf.load7 = load i64, i64* %21, align 8
  %bf.lshr8 = lshr i64 %bf.load7, 13
  %bf.clear9 = and i64 %bf.lshr8, 1
  %bf.cast10 = trunc i64 %bf.clear9 to i1
  br i1 %bf.cast10, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %22 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_window = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %22, i32 0, i32 6
  store i64 %call, i64* %mouse_face_window, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.11, %if.then
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %cond.end
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_update_window_end(%struct.window* %w, i1 zeroext %cursor_on_p, i1 zeroext %mouse_face_overwritten_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %cursor_on_p.addr = alloca i8, align 1
  %mouse_face_overwritten_p.addr = alloca i8, align 1
  %hlinfo = alloca %struct.Mouse_HLInfo*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  %frombool = zext i1 %cursor_on_p to i8
  store i8 %frombool, i8* %cursor_on_p.addr, align 1
  %frombool1 = zext i1 %mouse_face_overwritten_p to i8
  store i8 %frombool1, i8* %mouse_face_overwritten_p.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 67
  %bf.load = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr = lshr i16 %bf.load, 11
  %bf.clear = and i16 %bf.lshr, 1
  %bf.cast = trunc i16 %bf.clear to i1
  br i1 %bf.cast, label %if.end.24, label %if.then

if.then:                                          ; preds = %entry
  call void @block_input()
  %1 = load i8, i8* %cursor_on_p.addr, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %2 = load %struct.window*, %struct.window** %w.addr, align 8
  %3 = load %struct.window*, %struct.window** %w.addr, align 8
  %output_cursor = getelementptr inbounds %struct.window, %struct.window* %3, i32 0, i32 51
  %hpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %output_cursor, i32 0, i32 2
  %4 = load i32, i32* %hpos, align 4
  %5 = load %struct.window*, %struct.window** %w.addr, align 8
  %output_cursor3 = getelementptr inbounds %struct.window, %struct.window* %5, i32 0, i32 51
  %vpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %output_cursor3, i32 0, i32 3
  %6 = load i32, i32* %vpos, align 4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %output_cursor4 = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 51
  %x = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %output_cursor4, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %9 = load %struct.window*, %struct.window** %w.addr, align 8
  %output_cursor5 = getelementptr inbounds %struct.window, %struct.window* %9, i32 0, i32 51
  %y = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %output_cursor5, i32 0, i32 1
  %10 = load i32, i32* %y, align 4
  call void @display_and_set_cursor(%struct.window* %2, i1 zeroext true, i32 %4, i32 %6, i32 %8, i32 %10)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %call = call zeroext i1 @draw_window_fringes(%struct.window* %11, i1 zeroext true)
  br i1 %call, label %if.then.6, label %if.end.23

if.then.6:                                        ; preds = %if.end
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 30
  %13 = load i32, i32* %pixel_left, align 4
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 34
  %15 = load i32, i32* %pixel_width, align 4
  %add = add nsw i32 %13, %15
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 1
  %17 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %17, 5
  %18 = inttoptr i64 %sub to i8*
  %19 = bitcast i8* %18 to %struct.frame*
  %root_window = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 5
  %20 = load i64, i64* %root_window, align 8
  %call7 = call %struct.window* @XWINDOW(i64 %20)
  %pixel_left8 = getelementptr inbounds %struct.window, %struct.window* %call7, i32 0, i32 30
  %21 = load i32, i32* %pixel_left8, align 4
  %22 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame9 = getelementptr inbounds %struct.window, %struct.window* %22, i32 0, i32 1
  %23 = load i64, i64* %frame9, align 8
  %sub10 = sub nsw i64 %23, 5
  %24 = inttoptr i64 %sub10 to i8*
  %25 = bitcast i8* %24 to %struct.frame*
  %root_window11 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 5
  %26 = load i64, i64* %root_window11, align 8
  %call12 = call %struct.window* @XWINDOW(i64 %26)
  %pixel_width13 = getelementptr inbounds %struct.window, %struct.window* %call12, i32 0, i32 34
  %27 = load i32, i32* %pixel_width13, align 4
  %add14 = add nsw i32 %21, %27
  %cmp = icmp eq i32 %add, %add14
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.6
  %28 = load %struct.window*, %struct.window** %w.addr, align 8
  %mini = getelementptr inbounds %struct.window, %struct.window* %28, i32 0, i32 67
  %bf.load15 = load i16, i16* %mini, align 4
  %bf.clear16 = and i16 %bf.load15, 1
  %bf.cast17 = trunc i16 %bf.clear16 to i1
  br i1 %bf.cast17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.then.6
  br i1 false, label %if.then.21, label %if.else

cond.false:                                       ; preds = %lor.lhs.false
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame18 = getelementptr inbounds %struct.window, %struct.window* %29, i32 0, i32 1
  %30 = load i64, i64* %frame18, align 8
  %sub19 = sub nsw i64 %30, 5
  %31 = inttoptr i64 %sub19 to i8*
  %32 = bitcast i8* %31 to %struct.frame*
  %right_divider_width = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 52
  %33 = load i32, i32* %right_divider_width, align 4
  %tobool20 = icmp ne i32 %33, 0
  br i1 %tobool20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %cond.false, %cond.true
  %34 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @x_draw_right_divider(%struct.window* %34)
  br label %if.end.22

if.else:                                          ; preds = %cond.false, %cond.true
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  call void @x_draw_vertical_border(%struct.window* %35)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.21
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.end
  call void @unblock_input()
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %entry
  %36 = load i8, i8* %mouse_face_overwritten_p.addr, align 1
  %tobool25 = trunc i8 %36 to i1
  br i1 %tobool25, label %if.then.26, label %if.end.45

if.then.26:                                       ; preds = %if.end.24
  %37 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame27 = getelementptr inbounds %struct.window, %struct.window* %37, i32 0, i32 1
  %38 = load i64, i64* %frame27, align 8
  %sub28 = sub nsw i64 %38, 5
  %39 = inttoptr i64 %sub28 to i8*
  %40 = bitcast i8* %39 to %struct.frame*
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 26
  %41 = bitcast i48* %output_method to i64*
  %bf.load29 = load i64, i64* %41, align 8
  %bf.lshr30 = lshr i64 %bf.load29, 23
  %bf.clear31 = and i64 %bf.lshr30, 7
  %bf.cast32 = trunc i64 %bf.clear31 to i32
  %cmp33 = icmp eq i32 %bf.cast32, 2
  br i1 %cmp33, label %cond.true.34, label %cond.false.38

cond.true.34:                                     ; preds = %if.then.26
  %42 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame35 = getelementptr inbounds %struct.window, %struct.window* %42, i32 0, i32 1
  %43 = load i64, i64* %frame35, align 8
  %sub36 = sub nsw i64 %43, 5
  %44 = inttoptr i64 %sub36 to i8*
  %45 = bitcast i8* %44 to %struct.frame*
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x37 = bitcast %union.output_data* %output_data to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x37, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 44
  %47 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %47, i32 0, i32 25
  br label %cond.end

cond.false.38:                                    ; preds = %if.then.26
  %48 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame39 = getelementptr inbounds %struct.window, %struct.window* %48, i32 0, i32 1
  %49 = load i64, i64* %frame39, align 8
  %sub40 = sub nsw i64 %49, 5
  %50 = inttoptr i64 %sub40 to i8*
  %51 = bitcast i8* %50 to %struct.frame*
  %output_data41 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data41 to %struct.tty_output**
  %52 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %display_info42 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %52, i32 0, i32 0
  %53 = load %struct.tty_display_info*, %struct.tty_display_info** %display_info42, align 8
  %mouse_highlight43 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %53, i32 0, i32 14
  br label %cond.end

cond.end:                                         ; preds = %cond.false.38, %cond.true.34
  %cond = phi %struct.Mouse_HLInfo* [ %mouse_highlight, %cond.true.34 ], [ %mouse_highlight43, %cond.false.38 ]
  store %struct.Mouse_HLInfo* %cond, %struct.Mouse_HLInfo** %hlinfo, align 8
  %54 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_beg_col = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %54, i32 0, i32 1
  store i32 -1, i32* %mouse_face_beg_col, align 4
  %55 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_beg_row = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %55, i32 0, i32 0
  store i32 -1, i32* %mouse_face_beg_row, align 4
  %56 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_end_col = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %56, i32 0, i32 4
  store i32 -1, i32* %mouse_face_end_col, align 4
  %57 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_end_row = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %57, i32 0, i32 3
  store i32 -1, i32* %mouse_face_end_row, align 4
  %call44 = call i64 @builtin_lisp_symbol(i32 0)
  %58 = load %struct.Mouse_HLInfo*, %struct.Mouse_HLInfo** %hlinfo, align 8
  %mouse_face_window = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %58, i32 0, i32 6
  store i64 %call44, i64* %mouse_face_window, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %cond.end, %if.end.24
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_flush(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 140), align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  call void @block_input()
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %3, i32 0, i32 2
  %4 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call1 = call i32 @XFlush(%struct._XDisplay* %4)
  call void @unblock_input()
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @x_clear_window_mouse_face(%struct.window*) #1

declare void @x_get_glyph_overhangs(%struct.glyph*, %struct.frame*, i32*, i32*) #1

declare void @x_fix_overlapping_area(%struct.window*, %struct.glyph_row*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_draw_fringe_bitmap(%struct.window* %w, %struct.glyph_row* %row, %struct.draw_fringe_bitmap_params* %p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %row.addr = alloca %struct.glyph_row*, align 8
  %p.addr = alloca %struct.draw_fringe_bitmap_params*, align 8
  %f = alloca %struct.frame*, align 8
  %display = alloca %struct._XDisplay*, align 8
  %gc = alloca %struct._XGC*, align 8
  %face = alloca %struct.face*, align 8
  %window = alloca i64, align 8
  %bits = alloca i8*, align 8
  %pixmap = alloca i64, align 8
  %clipmask = alloca i64, align 8
  %depth = alloca i32, align 4
  %gcv = alloca %struct.XGCValues, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store %struct.draw_fringe_bitmap_params* %p, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display1 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display1, align 8
  store %struct._XDisplay* %7, %struct._XDisplay** %display, align 8
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %normal_gc = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 6
  %10 = load %struct._XGC*, %struct._XGC** %normal_gc, align 8
  store %struct._XGC* %10, %struct._XGC** %gc, align 8
  %11 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %face4 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %11, i32 0, i32 12
  %12 = load %struct.face*, %struct.face** %face4, align 8
  store %struct.face* %12, %struct.face** %face, align 8
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %14 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %15 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_clip_to_row(%struct.window* %13, %struct.glyph_row* %14, i32 -1, %struct._XGC* %15)
  %16 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %bx = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %16, i32 0, i32 7
  %17 = load i32, i32* %bx, align 4
  %cmp = icmp sge i32 %17, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %entry
  %18 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %overlay_p = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %18, i32 0, i32 11
  %bf.load = load i8, i8* %overlay_p, align 4
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.17, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.face*, %struct.face** %face, align 8
  %stipple = getelementptr inbounds %struct.face, %struct.face* %19, i32 0, i32 3
  %20 = load i64, i64* %stipple, align 8
  %tobool = icmp ne i64 %20, 0
  br i1 %tobool, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then
  %21 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %22 = load %struct.face*, %struct.face** %face, align 8
  %gc6 = getelementptr inbounds %struct.face, %struct.face* %22, i32 0, i32 2
  %23 = load %struct._XGC*, %struct._XGC** %gc6, align 8
  %call = call i32 @XSetFillStyle(%struct._XDisplay* %21, %struct._XGC* %23, i32 3)
  br label %if.end

if.else:                                          ; preds = %if.then
  %24 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %25 = load %struct.face*, %struct.face** %face, align 8
  %gc7 = getelementptr inbounds %struct.face, %struct.face* %25, i32 0, i32 2
  %26 = load %struct._XGC*, %struct._XGC** %gc7, align 8
  %27 = load %struct.face*, %struct.face** %face, align 8
  %background = getelementptr inbounds %struct.face, %struct.face* %27, i32 0, i32 5
  %28 = load i64, i64* %background, align 8
  %call8 = call i32 @XSetForeground(%struct._XDisplay* %24, %struct._XGC* %26, i64 %28)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %30 = load %struct.face*, %struct.face** %face, align 8
  %gc9 = getelementptr inbounds %struct.face, %struct.face* %30, i32 0, i32 2
  %31 = load %struct._XGC*, %struct._XGC** %gc9, align 8
  %32 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %bx10 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %32, i32 0, i32 7
  %33 = load i32, i32* %bx10, align 4
  %34 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %by = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %34, i32 0, i32 9
  %35 = load i32, i32* %by, align 4
  %36 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %nx = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %36, i32 0, i32 8
  %37 = load i32, i32* %nx, align 4
  %38 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %ny = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %38, i32 0, i32 10
  %39 = load i32, i32* %ny, align 4
  call void @x_fill_rectangle(%struct.frame* %29, %struct._XGC* %31, i32 %33, i32 %35, i32 %37, i32 %39)
  %40 = load %struct.face*, %struct.face** %face, align 8
  %stipple11 = getelementptr inbounds %struct.face, %struct.face* %40, i32 0, i32 3
  %41 = load i64, i64* %stipple11, align 8
  %tobool12 = icmp ne i64 %41, 0
  br i1 %tobool12, label %if.end.16, label %if.then.13

if.then.13:                                       ; preds = %if.end
  %42 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %43 = load %struct.face*, %struct.face** %face, align 8
  %gc14 = getelementptr inbounds %struct.face, %struct.face* %43, i32 0, i32 2
  %44 = load %struct._XGC*, %struct._XGC** %gc14, align 8
  %45 = load %struct.face*, %struct.face** %face, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %45, i32 0, i32 4
  %46 = load i64, i64* %foreground, align 8
  %call15 = call i32 @XSetForeground(%struct._XDisplay* %42, %struct._XGC* %44, i64 %46)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.13, %if.end
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %land.lhs.true, %entry
  %47 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %which = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %47, i32 0, i32 0
  %48 = load i32, i32* %which, align 4
  %tobool18 = icmp ne i32 %48, 0
  br i1 %tobool18, label %if.then.19, label %if.end.84

if.then.19:                                       ; preds = %if.end.17
  %49 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data20 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x21 = bitcast %union.output_data* %output_data20 to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x21, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 9
  %51 = load i64, i64* %window_desc, align 8
  store i64 %51, i64* %window, align 8
  store i64 0, i64* %clipmask, align 8
  %52 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %53 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %display_info24 = getelementptr inbounds %struct.x_output, %struct.x_output* %53, i32 0, i32 44
  %54 = load %struct.x_display_info*, %struct.x_display_info** %display_info24, align 8
  %screen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %54, i32 0, i32 6
  %55 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %root_depth = getelementptr inbounds %struct.Screen, %struct.Screen* %55, i32 0, i32 9
  %56 = load i32, i32* %root_depth, align 4
  store i32 %56, i32* %depth, align 4
  %57 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %wd = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %57, i32 0, i32 2
  %58 = load i32, i32* %wd, align 4
  %cmp25 = icmp sgt i32 %58, 8
  br i1 %cmp25, label %if.then.26, label %if.else.28

if.then.26:                                       ; preds = %if.then.19
  %59 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %bits27 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %59, i32 0, i32 1
  %60 = load i16*, i16** %bits27, align 8
  %61 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %dh = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %61, i32 0, i32 4
  %62 = load i32, i32* %dh, align 4
  %idx.ext = sext i32 %62 to i64
  %add.ptr = getelementptr inbounds i16, i16* %60, i64 %idx.ext
  %63 = bitcast i16* %add.ptr to i8*
  store i8* %63, i8** %bits, align 8
  br label %if.end.33

if.else.28:                                       ; preds = %if.then.19
  %64 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %bits29 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %64, i32 0, i32 1
  %65 = load i16*, i16** %bits29, align 8
  %66 = bitcast i16* %65 to i8*
  %67 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %dh30 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %67, i32 0, i32 4
  %68 = load i32, i32* %dh30, align 4
  %idx.ext31 = sext i32 %68 to i64
  %add.ptr32 = getelementptr inbounds i8, i8* %66, i64 %idx.ext31
  store i8* %add.ptr32, i8** %bits, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.28, %if.then.26
  %69 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %70 = load i64, i64* %window, align 8
  %71 = load i8*, i8** %bits, align 8
  %72 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %wd34 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %72, i32 0, i32 2
  %73 = load i32, i32* %wd34, align 4
  %74 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %h = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %74, i32 0, i32 3
  %75 = load i32, i32* %h, align 4
  %76 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %cursor_p = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %76, i32 0, i32 11
  %bf.load35 = load i8, i8* %cursor_p, align 4
  %bf.clear36 = and i8 %bf.load35, 1
  %bf.cast37 = trunc i8 %bf.clear36 to i1
  br i1 %bf.cast37, label %cond.true, label %cond.false.47

cond.true:                                        ; preds = %if.end.33
  %77 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %overlay_p38 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %77, i32 0, i32 11
  %bf.load39 = load i8, i8* %overlay_p38, align 4
  %bf.lshr40 = lshr i8 %bf.load39, 1
  %bf.clear41 = and i8 %bf.lshr40, 1
  %bf.cast42 = trunc i8 %bf.clear41 to i1
  br i1 %bf.cast42, label %cond.true.43, label %cond.false

cond.true.43:                                     ; preds = %cond.true
  %78 = load %struct.face*, %struct.face** %face, align 8
  %background44 = getelementptr inbounds %struct.face, %struct.face* %78, i32 0, i32 5
  %79 = load i64, i64* %background44, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %80 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data45 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 62
  %x46 = bitcast %union.output_data* %output_data45 to %struct.x_output**
  %81 = load %struct.x_output*, %struct.x_output** %x46, align 8
  %cursor_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %81, i32 0, i32 28
  %82 = load i64, i64* %cursor_pixel, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.43
  %cond = phi i64 [ %79, %cond.true.43 ], [ %82, %cond.false ]
  br label %cond.end.49

cond.false.47:                                    ; preds = %if.end.33
  %83 = load %struct.face*, %struct.face** %face, align 8
  %foreground48 = getelementptr inbounds %struct.face, %struct.face* %83, i32 0, i32 4
  %84 = load i64, i64* %foreground48, align 8
  br label %cond.end.49

cond.end.49:                                      ; preds = %cond.false.47, %cond.end
  %cond50 = phi i64 [ %cond, %cond.end ], [ %84, %cond.false.47 ]
  %85 = load %struct.face*, %struct.face** %face, align 8
  %background51 = getelementptr inbounds %struct.face, %struct.face* %85, i32 0, i32 5
  %86 = load i64, i64* %background51, align 8
  %87 = load i32, i32* %depth, align 4
  %call52 = call i64 @XCreatePixmapFromBitmapData(%struct._XDisplay* %69, i64 %70, i8* %71, i32 %73, i32 %75, i64 %cond50, i64 %86, i32 %87)
  store i64 %call52, i64* %pixmap, align 8
  %88 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %overlay_p53 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %88, i32 0, i32 11
  %bf.load54 = load i8, i8* %overlay_p53, align 4
  %bf.lshr55 = lshr i8 %bf.load54, 1
  %bf.clear56 = and i8 %bf.lshr55, 1
  %bf.cast57 = trunc i8 %bf.clear56 to i1
  br i1 %bf.cast57, label %if.then.58, label %if.end.67

if.then.58:                                       ; preds = %cond.end.49
  %89 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %90 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data59 = getelementptr inbounds %struct.frame, %struct.frame* %90, i32 0, i32 62
  %x60 = bitcast %union.output_data* %output_data59 to %struct.x_output**
  %91 = load %struct.x_output*, %struct.x_output** %x60, align 8
  %display_info61 = getelementptr inbounds %struct.x_output, %struct.x_output* %91, i32 0, i32 44
  %92 = load %struct.x_display_info*, %struct.x_display_info** %display_info61, align 8
  %root_window = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %92, i32 0, i32 14
  %93 = load i64, i64* %root_window, align 8
  %94 = load i8*, i8** %bits, align 8
  %95 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %wd62 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %95, i32 0, i32 2
  %96 = load i32, i32* %wd62, align 4
  %97 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %h63 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %97, i32 0, i32 3
  %98 = load i32, i32* %h63, align 4
  %call64 = call i64 @XCreatePixmapFromBitmapData(%struct._XDisplay* %89, i64 %93, i8* %94, i32 %96, i32 %98, i64 1, i64 0, i32 1)
  store i64 %call64, i64* %clipmask, align 8
  %99 = load i64, i64* %clipmask, align 8
  %clip_mask = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %gcv, i32 0, i32 20
  store i64 %99, i64* %clip_mask, align 8
  %100 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %x65 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %100, i32 0, i32 5
  %101 = load i32, i32* %x65, align 4
  %clip_x_origin = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %gcv, i32 0, i32 18
  store i32 %101, i32* %clip_x_origin, align 4
  %102 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %y = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %102, i32 0, i32 6
  %103 = load i32, i32* %y, align 4
  %clip_y_origin = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %gcv, i32 0, i32 19
  store i32 %103, i32* %clip_y_origin, align 4
  %104 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %105 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call66 = call i32 @XChangeGC(%struct._XDisplay* %104, %struct._XGC* %105, i64 917504, %struct.XGCValues* %gcv)
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.58, %cond.end.49
  %106 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %107 = load i64, i64* %pixmap, align 8
  %108 = load i64, i64* %window, align 8
  %109 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %110 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %wd68 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %110, i32 0, i32 2
  %111 = load i32, i32* %wd68, align 4
  %112 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %h69 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %112, i32 0, i32 3
  %113 = load i32, i32* %h69, align 4
  %114 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %x70 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %114, i32 0, i32 5
  %115 = load i32, i32* %x70, align 4
  %116 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %y71 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %116, i32 0, i32 6
  %117 = load i32, i32* %y71, align 4
  %call72 = call i32 @XCopyArea(%struct._XDisplay* %106, i64 %107, i64 %108, %struct._XGC* %109, i32 0, i32 0, i32 %111, i32 %113, i32 %115, i32 %117)
  %118 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %119 = load i64, i64* %pixmap, align 8
  %call73 = call i32 @XFreePixmap(%struct._XDisplay* %118, i64 %119)
  %120 = load %struct.draw_fringe_bitmap_params*, %struct.draw_fringe_bitmap_params** %p.addr, align 8
  %overlay_p74 = getelementptr inbounds %struct.draw_fringe_bitmap_params, %struct.draw_fringe_bitmap_params* %120, i32 0, i32 11
  %bf.load75 = load i8, i8* %overlay_p74, align 4
  %bf.lshr76 = lshr i8 %bf.load75, 1
  %bf.clear77 = and i8 %bf.lshr76, 1
  %bf.cast78 = trunc i8 %bf.clear77 to i1
  br i1 %bf.cast78, label %if.then.79, label %if.end.83

if.then.79:                                       ; preds = %if.end.67
  %clip_mask80 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %gcv, i32 0, i32 20
  store i64 0, i64* %clip_mask80, align 8
  %121 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %122 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call81 = call i32 @XChangeGC(%struct._XDisplay* %121, %struct._XGC* %122, i64 524288, %struct.XGCValues* %gcv)
  %123 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %124 = load i64, i64* %clipmask, align 8
  %call82 = call i32 @XFreePixmap(%struct._XDisplay* %123, i64 %124)
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.79, %if.end.67
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.end.17
  %125 = load %struct.frame*, %struct.frame** %f, align 8
  %126 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %125, %struct._XGC* %126)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_compute_glyph_string_overhangs(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %metrics = alloca %struct.font_metrics, align 2
  %code = alloca i32*, align 8
  %font = alloca %struct.font*, align 8
  %i = alloca i32, align 4
  %gstring = alloca i64, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 19
  %1 = load %struct.composition*, %struct.composition** %cmp, align 8
  %cmp1 = icmp eq %struct.composition* %1, null
  br i1 %cmp1, label %land.lhs.true, label %if.else.47

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 25
  %3 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %3, i32 0, i32 6
  %4 = bitcast i24* %type to i32*
  %bf.load = load i32, i32* %4, align 8
  %bf.clear = and i32 %bf.load, 7
  %cmp2 = icmp eq i32 %bf.clear, 0
  br i1 %cmp2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %5, i32 0, i32 25
  %6 = load %struct.glyph*, %struct.glyph** %first_glyph3, align 8
  %type4 = getelementptr inbounds %struct.glyph, %struct.glyph* %6, i32 0, i32 6
  %7 = bitcast i24* %type4 to i32*
  %bf.load5 = load i32, i32* %7, align 8
  %bf.clear6 = and i32 %bf.load5, 7
  %cmp7 = icmp eq i32 %bf.clear6, 1
  br i1 %cmp7, label %if.then, label %if.else.47

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %8 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph8 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 25
  %9 = load %struct.glyph*, %struct.glyph** %first_glyph8, align 8
  %type9 = getelementptr inbounds %struct.glyph, %struct.glyph* %9, i32 0, i32 6
  %10 = bitcast i24* %type9 to i32*
  %bf.load10 = load i32, i32* %10, align 8
  %bf.clear11 = and i32 %bf.load10, 7
  %cmp12 = icmp eq i32 %bf.clear11, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.then
  %11 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %11, i32 0, i32 15
  %12 = load i32, i32* %nchars, align 4
  %conv = sext i32 %12 to i64
  %mul = mul i64 4, %conv
  %13 = alloca i8, i64 %mul
  %14 = bitcast i8* %13 to i32*
  store i32* %14, i32** %code, align 8
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font14 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 18
  %16 = load %struct.font*, %struct.font** %font14, align 8
  store %struct.font* %16, %struct.font** %font, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.13
  %17 = load i32, i32* %i, align 4
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars15 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 15
  %19 = load i32, i32* %nchars15, align 4
  %cmp16 = icmp slt i32 %17, %19
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i32, i32* %i, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %char2b = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 14
  %22 = load %struct.XChar2b*, %struct.XChar2b** %char2b, align 8
  %arrayidx = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %22, i64 %idxprom
  %byte1 = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %arrayidx, i32 0, i32 0
  %23 = load i8, i8* %byte1, align 1
  %conv18 = zext i8 %23 to i32
  %shl = shl i32 %conv18, 8
  %24 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %24 to i64
  %25 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %char2b20 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %25, i32 0, i32 14
  %26 = load %struct.XChar2b*, %struct.XChar2b** %char2b20, align 8
  %arrayidx21 = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %26, i64 %idxprom19
  %byte2 = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %arrayidx21, i32 0, i32 1
  %27 = load i8, i8* %byte2, align 1
  %conv22 = zext i8 %27 to i32
  %or = or i32 %shl, %conv22
  %28 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %28 to i64
  %29 = load i32*, i32** %code, align 8
  %arrayidx24 = getelementptr inbounds i32, i32* %29, i64 %idxprom23
  store i32 %or, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %31, i32 0, i32 18
  %32 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %text_extents = getelementptr inbounds %struct.font_driver, %struct.font_driver* %32, i32 0, i32 13
  %33 = load void (%struct.font*, i32*, i32, %struct.font_metrics*)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)** %text_extents, align 8
  %34 = load %struct.font*, %struct.font** %font, align 8
  %35 = load i32*, i32** %code, align 8
  %36 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars25 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %36, i32 0, i32 15
  %37 = load i32, i32* %nchars25, align 4
  call void %33(%struct.font* %34, i32* %35, i32 %37, %struct.font_metrics* %metrics)
  br label %if.end

if.else:                                          ; preds = %if.then
  %38 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_id = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %38, i32 0, i32 20
  %39 = load i64, i64* %cmp_id, align 8
  %call = call i64 @composition_gstring_from_id(i64 %39)
  store i64 %call, i64* %gstring, align 8
  %40 = load i64, i64* %gstring, align 8
  %41 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_from = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %41, i32 0, i32 21
  %42 = load i32, i32* %cmp_from, align 4
  %conv26 = sext i32 %42 to i64
  %43 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_to = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %43, i32 0, i32 22
  %44 = load i32, i32* %cmp_to, align 4
  %conv27 = sext i32 %44 to i64
  %call28 = call i32 @composition_gstring_width(i64 %40, i64 %conv26, i64 %conv27, %struct.font_metrics* %metrics)
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  %rbearing = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 1
  %45 = load i16, i16* %rbearing, align 2
  %conv29 = sext i16 %45 to i32
  %width = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 2
  %46 = load i16, i16* %width, align 2
  %conv30 = sext i16 %46 to i32
  %cmp31 = icmp sgt i32 %conv29, %conv30
  br i1 %cmp31, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %rbearing33 = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 1
  %47 = load i16, i16* %rbearing33, align 2
  %conv34 = sext i16 %47 to i32
  %width35 = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 2
  %48 = load i16, i16* %width35, align 2
  %conv36 = sext i16 %48 to i32
  %sub = sub nsw i32 %conv34, %conv36
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %49 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %right_overhang = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %49, i32 0, i32 7
  store i32 %cond, i32* %right_overhang, align 4
  %lbearing = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 0
  %50 = load i16, i16* %lbearing, align 2
  %conv37 = sext i16 %50 to i32
  %cmp38 = icmp slt i32 %conv37, 0
  br i1 %cmp38, label %cond.true.40, label %cond.false.44

cond.true.40:                                     ; preds = %cond.end
  %lbearing41 = getelementptr inbounds %struct.font_metrics, %struct.font_metrics* %metrics, i32 0, i32 0
  %51 = load i16, i16* %lbearing41, align 2
  %conv42 = sext i16 %51 to i32
  %sub43 = sub nsw i32 0, %conv42
  br label %cond.end.45

cond.false.44:                                    ; preds = %cond.end
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.44, %cond.true.40
  %cond46 = phi i32 [ %sub43, %cond.true.40 ], [ 0, %cond.false.44 ]
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %left_overhang = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %52, i32 0, i32 6
  store i32 %cond46, i32* %left_overhang, align 4
  br label %if.end.63

if.else.47:                                       ; preds = %lor.lhs.false, %entry
  %53 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp48 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %53, i32 0, i32 19
  %54 = load %struct.composition*, %struct.composition** %cmp48, align 8
  %tobool = icmp ne %struct.composition* %54, null
  br i1 %tobool, label %if.then.49, label %if.end.62

if.then.49:                                       ; preds = %if.else.47
  %55 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp50 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %55, i32 0, i32 19
  %56 = load %struct.composition*, %struct.composition** %cmp50, align 8
  %rbearing51 = getelementptr inbounds %struct.composition, %struct.composition* %56, i32 0, i32 5
  %57 = load i16, i16* %rbearing51, align 2
  %conv52 = sext i16 %57 to i32
  %58 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp53 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %58, i32 0, i32 19
  %59 = load %struct.composition*, %struct.composition** %cmp53, align 8
  %pixel_width = getelementptr inbounds %struct.composition, %struct.composition* %59, i32 0, i32 1
  %60 = load i16, i16* %pixel_width, align 2
  %conv54 = sext i16 %60 to i32
  %sub55 = sub nsw i32 %conv52, %conv54
  %61 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %right_overhang56 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %61, i32 0, i32 7
  store i32 %sub55, i32* %right_overhang56, align 4
  %62 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp57 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %62, i32 0, i32 19
  %63 = load %struct.composition*, %struct.composition** %cmp57, align 8
  %lbearing58 = getelementptr inbounds %struct.composition, %struct.composition* %63, i32 0, i32 4
  %64 = load i16, i16* %lbearing58, align 2
  %conv59 = sext i16 %64 to i32
  %sub60 = sub nsw i32 0, %conv59
  %65 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %left_overhang61 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %65, i32 0, i32 6
  store i32 %sub60, i32* %left_overhang61, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.49, %if.else.47
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %cond.end.45
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_glyph_string(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %relief_drawn_p = alloca i8, align 1
  %width = alloca i32, align 4
  %next4 = alloca %struct.glyph_string*, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %thickness = alloca i64, align 8
  %position = alloca i64, align 8
  %y = alloca i32, align 4
  %xgcv295 = alloca %struct.XGCValues, align 8
  %dy = alloca i64, align 8
  %h = alloca i64, align 8
  %xgcv339 = alloca %struct.XGCValues, align 8
  %h368 = alloca i64, align 8
  %dy369 = alloca i64, align 8
  %xgcv390 = alloca %struct.XGCValues, align 8
  %prev426 = alloca %struct.glyph_string*, align 8
  %save = alloca i32, align 4
  %next469 = alloca %struct.glyph_string*, align 8
  %save488 = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  store i8 0, i8* %relief_drawn_p, align 1
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 35
  %1 = load %struct.glyph_string*, %struct.glyph_string** %next, align 8
  %tobool = icmp ne %struct.glyph_string* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.end.21

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %right_overhang = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 7
  %3 = load i32, i32* %right_overhang, align 4
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %land.lhs.true.2, label %if.end.21

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %for_overlaps = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 23
  %bf.load = load i8, i8* %for_overlaps, align 8
  %bf.lshr = lshr i8 %bf.load, 4
  %bf.clear = and i8 %bf.lshr, 7
  %bf.cast = zext i8 %bf.clear to i32
  %tobool3 = icmp ne i32 %bf.cast, 0
  br i1 %tobool3, label %if.end.21, label %if.then

if.then:                                          ; preds = %land.lhs.true.2
  store i32 0, i32* %width, align 4
  %5 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %5, i32 0, i32 35
  %6 = load %struct.glyph_string*, %struct.glyph_string** %next5, align 8
  store %struct.glyph_string* %6, %struct.glyph_string** %next4, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  %tobool6 = icmp ne %struct.glyph_string* %7, null
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %8 = load i32, i32* %width, align 4
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %right_overhang7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 7
  %10 = load i32, i32* %right_overhang7, align 4
  %cmp = icmp slt i32 %8, %10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %11, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %12 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 25
  %13 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %13, i32 0, i32 6
  %14 = bitcast i24* %type to i32*
  %bf.load8 = load i32, i32* %14, align 8
  %bf.clear9 = and i32 %bf.load8, 7
  %cmp10 = icmp ne i32 %bf.clear9, 3
  br i1 %cmp10, label %if.then.11, label %if.end.18

if.then.11:                                       ; preds = %for.body
  %15 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  call void @x_set_glyph_string_gc(%struct.glyph_string* %15)
  %16 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  call void @x_set_glyph_string_clipping(%struct.glyph_string* %16)
  %17 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  %first_glyph12 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 25
  %18 = load %struct.glyph*, %struct.glyph** %first_glyph12, align 8
  %type13 = getelementptr inbounds %struct.glyph, %struct.glyph* %18, i32 0, i32 6
  %19 = bitcast i24* %type13 to i32*
  %bf.load14 = load i32, i32* %19, align 8
  %bf.clear15 = and i32 %bf.load14, 7
  %cmp16 = icmp eq i32 %bf.clear15, 4
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then.11
  %20 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  call void @x_draw_stretch_glyph_string(%struct.glyph_string* %20)
  br label %if.end

if.else:                                          ; preds = %if.then.11
  %21 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  call void @x_draw_glyph_string_background(%struct.glyph_string* %21, i1 zeroext true)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.17
  %22 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  %num_clips = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %22, i32 0, i32 32
  store i32 0, i32* %num_clips, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.18
  %23 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  %width19 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 3
  %24 = load i32, i32* %width19, align 4
  %25 = load i32, i32* %width, align 4
  %add = add nsw i32 %25, %24
  store i32 %add, i32* %width, align 4
  %26 = load %struct.glyph_string*, %struct.glyph_string** %next4, align 8
  %next20 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %26, i32 0, i32 35
  %27 = load %struct.glyph_string*, %struct.glyph_string** %next20, align 8
  store %struct.glyph_string* %27, %struct.glyph_string** %next4, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.21

if.end.21:                                        ; preds = %for.end, %land.lhs.true.2, %land.lhs.true, %entry
  %28 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_glyph_string_gc(%struct.glyph_string* %28)
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %for_overlaps22 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %29, i32 0, i32 23
  %bf.load23 = load i8, i8* %for_overlaps22, align 8
  %bf.lshr24 = lshr i8 %bf.load23, 4
  %bf.clear25 = and i8 %bf.lshr24, 7
  %bf.cast26 = zext i8 %bf.clear25 to i32
  %tobool27 = icmp ne i32 %bf.cast26, 0
  br i1 %tobool27, label %if.else.44, label %land.lhs.true.28

land.lhs.true.28:                                 ; preds = %if.end.21
  %30 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %30, i32 0, i32 17
  %31 = load %struct.face*, %struct.face** %face, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %31, i32 0, i32 13
  %32 = bitcast i24* %box to i32*
  %bf.load29 = load i32, i32* %32, align 8
  %bf.clear30 = and i32 %bf.load29, 3
  %cmp31 = icmp ne i32 %bf.clear30, 0
  br i1 %cmp31, label %land.lhs.true.32, label %if.else.44

land.lhs.true.32:                                 ; preds = %land.lhs.true.28
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph33 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 25
  %34 = load %struct.glyph*, %struct.glyph** %first_glyph33, align 8
  %type34 = getelementptr inbounds %struct.glyph, %struct.glyph* %34, i32 0, i32 6
  %35 = bitcast i24* %type34 to i32*
  %bf.load35 = load i32, i32* %35, align 8
  %bf.clear36 = and i32 %bf.load35, 7
  %cmp37 = icmp eq i32 %bf.clear36, 0
  br i1 %cmp37, label %if.then.43, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.32
  %36 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph38 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %36, i32 0, i32 25
  %37 = load %struct.glyph*, %struct.glyph** %first_glyph38, align 8
  %type39 = getelementptr inbounds %struct.glyph, %struct.glyph* %37, i32 0, i32 6
  %38 = bitcast i24* %type39 to i32*
  %bf.load40 = load i32, i32* %38, align 8
  %bf.clear41 = and i32 %bf.load40, 7
  %cmp42 = icmp eq i32 %bf.clear41, 1
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %lor.lhs.false, %land.lhs.true.32
  %39 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_glyph_string_clipping(%struct.glyph_string* %39)
  %40 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyph_string_background(%struct.glyph_string* %40, i1 zeroext true)
  %41 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyph_string_box(%struct.glyph_string* %41)
  %42 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_glyph_string_clipping(%struct.glyph_string* %42)
  store i8 1, i8* %relief_drawn_p, align 1
  br label %if.end.70

if.else.44:                                       ; preds = %lor.lhs.false, %land.lhs.true.28, %if.end.21
  %43 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %clip_head = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %43, i32 0, i32 29
  %44 = load %struct.glyph_string*, %struct.glyph_string** %clip_head, align 8
  %tobool45 = icmp ne %struct.glyph_string* %44, null
  br i1 %tobool45, label %if.else.68, label %land.lhs.true.46

land.lhs.true.46:                                 ; preds = %if.else.44
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %clip_tail = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 30
  %46 = load %struct.glyph_string*, %struct.glyph_string** %clip_tail, align 8
  %tobool47 = icmp ne %struct.glyph_string* %46, null
  br i1 %tobool47, label %if.else.68, label %land.lhs.true.48

land.lhs.true.48:                                 ; preds = %land.lhs.true.46
  %47 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %47, i32 0, i32 36
  %48 = load %struct.glyph_string*, %struct.glyph_string** %prev, align 8
  %tobool49 = icmp ne %struct.glyph_string* %48, null
  br i1 %tobool49, label %land.lhs.true.50, label %lor.lhs.false.56

land.lhs.true.50:                                 ; preds = %land.lhs.true.48
  %49 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev51 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %49, i32 0, i32 36
  %50 = load %struct.glyph_string*, %struct.glyph_string** %prev51, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %50, i32 0, i32 16
  %51 = load i32, i32* %hl, align 4
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl52 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %52, i32 0, i32 16
  %53 = load i32, i32* %hl52, align 4
  %cmp53 = icmp ne i32 %51, %53
  br i1 %cmp53, label %land.lhs.true.54, label %lor.lhs.false.56

land.lhs.true.54:                                 ; preds = %land.lhs.true.50
  %54 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %left_overhang = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %54, i32 0, i32 6
  %55 = load i32, i32* %left_overhang, align 4
  %tobool55 = icmp ne i32 %55, 0
  br i1 %tobool55, label %if.then.67, label %lor.lhs.false.56

lor.lhs.false.56:                                 ; preds = %land.lhs.true.54, %land.lhs.true.50, %land.lhs.true.48
  %56 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next57 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %56, i32 0, i32 35
  %57 = load %struct.glyph_string*, %struct.glyph_string** %next57, align 8
  %tobool58 = icmp ne %struct.glyph_string* %57, null
  br i1 %tobool58, label %land.lhs.true.59, label %if.else.68

land.lhs.true.59:                                 ; preds = %lor.lhs.false.56
  %58 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next60 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %58, i32 0, i32 35
  %59 = load %struct.glyph_string*, %struct.glyph_string** %next60, align 8
  %hl61 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %59, i32 0, i32 16
  %60 = load i32, i32* %hl61, align 4
  %61 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl62 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %61, i32 0, i32 16
  %62 = load i32, i32* %hl62, align 4
  %cmp63 = icmp ne i32 %60, %62
  br i1 %cmp63, label %land.lhs.true.64, label %if.else.68

land.lhs.true.64:                                 ; preds = %land.lhs.true.59
  %63 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %right_overhang65 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %63, i32 0, i32 7
  %64 = load i32, i32* %right_overhang65, align 4
  %tobool66 = icmp ne i32 %64, 0
  br i1 %tobool66, label %if.then.67, label %if.else.68

if.then.67:                                       ; preds = %land.lhs.true.64, %land.lhs.true.54
  %65 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %66 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_glyph_string_clipping_exactly(%struct.glyph_string* %65, %struct.glyph_string* %66)
  br label %if.end.69

if.else.68:                                       ; preds = %land.lhs.true.64, %land.lhs.true.59, %lor.lhs.false.56, %land.lhs.true.46, %if.else.44
  %67 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_glyph_string_clipping(%struct.glyph_string* %67)
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.68, %if.then.67
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.then.43
  %68 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph71 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %68, i32 0, i32 25
  %69 = load %struct.glyph*, %struct.glyph** %first_glyph71, align 8
  %type72 = getelementptr inbounds %struct.glyph, %struct.glyph* %69, i32 0, i32 6
  %70 = bitcast i24* %type72 to i32*
  %bf.load73 = load i32, i32* %70, align 8
  %bf.clear74 = and i32 %bf.load73, 7
  switch i32 %bf.clear74, label %sw.default [
    i32 3, label %sw.bb
    i32 5, label %sw.bb.75
    i32 4, label %sw.bb.76
    i32 0, label %sw.bb.77
    i32 1, label %sw.bb.89
    i32 2, label %sw.bb.111
  ]

sw.bb:                                            ; preds = %if.end.70
  %71 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_image_glyph_string(%struct.glyph_string* %71)
  br label %sw.epilog

sw.bb.75:                                         ; preds = %if.end.70
  %72 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_xwidget_glyph_string(%struct.glyph_string* %72)
  br label %sw.epilog

sw.bb.76:                                         ; preds = %if.end.70
  %73 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_stretch_glyph_string(%struct.glyph_string* %73)
  br label %sw.epilog

sw.bb.77:                                         ; preds = %if.end.70
  %74 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %for_overlaps78 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %74, i32 0, i32 23
  %bf.load79 = load i8, i8* %for_overlaps78, align 8
  %bf.lshr80 = lshr i8 %bf.load79, 4
  %bf.clear81 = and i8 %bf.lshr80, 7
  %bf.cast82 = zext i8 %bf.clear81 to i32
  %tobool83 = icmp ne i32 %bf.cast82, 0
  br i1 %tobool83, label %if.then.84, label %if.else.87

if.then.84:                                       ; preds = %sw.bb.77
  %75 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %75, i32 0, i32 23
  %bf.load85 = load i8, i8* %background_filled_p, align 8
  %bf.clear86 = and i8 %bf.load85, -3
  %bf.set = or i8 %bf.clear86, 2
  store i8 %bf.set, i8* %background_filled_p, align 8
  br label %if.end.88

if.else.87:                                       ; preds = %sw.bb.77
  %76 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyph_string_background(%struct.glyph_string* %76, i1 zeroext false)
  br label %if.end.88

if.end.88:                                        ; preds = %if.else.87, %if.then.84
  %77 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyph_string_foreground(%struct.glyph_string* %77)
  br label %sw.epilog

sw.bb.89:                                         ; preds = %if.end.70
  %78 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %for_overlaps90 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %78, i32 0, i32 23
  %bf.load91 = load i8, i8* %for_overlaps90, align 8
  %bf.lshr92 = lshr i8 %bf.load91, 4
  %bf.clear93 = and i8 %bf.lshr92, 7
  %bf.cast94 = zext i8 %bf.clear93 to i32
  %tobool95 = icmp ne i32 %bf.cast94, 0
  br i1 %tobool95, label %if.then.104, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %sw.bb.89
  %79 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_from = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %79, i32 0, i32 21
  %80 = load i32, i32* %cmp_from, align 4
  %cmp97 = icmp sgt i32 %80, 0
  br i1 %cmp97, label %land.lhs.true.98, label %if.else.109

land.lhs.true.98:                                 ; preds = %lor.lhs.false.96
  %81 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph99 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %81, i32 0, i32 25
  %82 = load %struct.glyph*, %struct.glyph** %first_glyph99, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %82, i32 0, i32 9
  %cmp100 = bitcast %union.anon.1* %u to %struct.anon.2*
  %83 = bitcast %struct.anon.2* %cmp100 to i32*
  %bf.load101 = load i32, i32* %83, align 4
  %bf.clear102 = and i32 %bf.load101, 1
  %bf.cast103 = trunc i32 %bf.clear102 to i1
  br i1 %bf.cast103, label %if.else.109, label %if.then.104

if.then.104:                                      ; preds = %land.lhs.true.98, %sw.bb.89
  %84 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p105 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %84, i32 0, i32 23
  %bf.load106 = load i8, i8* %background_filled_p105, align 8
  %bf.clear107 = and i8 %bf.load106, -3
  %bf.set108 = or i8 %bf.clear107, 2
  store i8 %bf.set108, i8* %background_filled_p105, align 8
  br label %if.end.110

if.else.109:                                      ; preds = %land.lhs.true.98, %lor.lhs.false.96
  %85 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyph_string_background(%struct.glyph_string* %85, i1 zeroext true)
  br label %if.end.110

if.end.110:                                       ; preds = %if.else.109, %if.then.104
  %86 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_composite_glyph_string_foreground(%struct.glyph_string* %86)
  br label %sw.epilog

sw.bb.111:                                        ; preds = %if.end.70
  %87 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %for_overlaps112 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %87, i32 0, i32 23
  %bf.load113 = load i8, i8* %for_overlaps112, align 8
  %bf.lshr114 = lshr i8 %bf.load113, 4
  %bf.clear115 = and i8 %bf.lshr114, 7
  %bf.cast116 = zext i8 %bf.clear115 to i32
  %tobool117 = icmp ne i32 %bf.cast116, 0
  br i1 %tobool117, label %if.then.118, label %if.else.123

if.then.118:                                      ; preds = %sw.bb.111
  %88 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p119 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %88, i32 0, i32 23
  %bf.load120 = load i8, i8* %background_filled_p119, align 8
  %bf.clear121 = and i8 %bf.load120, -3
  %bf.set122 = or i8 %bf.clear121, 2
  store i8 %bf.set122, i8* %background_filled_p119, align 8
  br label %if.end.124

if.else.123:                                      ; preds = %sw.bb.111
  %89 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyph_string_background(%struct.glyph_string* %89, i1 zeroext true)
  br label %if.end.124

if.end.124:                                       ; preds = %if.else.123, %if.then.118
  %90 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyphless_glyph_string_foreground(%struct.glyph_string* %90)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.70
  call void @emacs_abort() #10
  unreachable

sw.epilog:                                        ; preds = %if.end.124, %if.end.110, %if.end.88, %sw.bb.76, %sw.bb.75, %sw.bb
  %91 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %for_overlaps125 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %91, i32 0, i32 23
  %bf.load126 = load i8, i8* %for_overlaps125, align 8
  %bf.lshr127 = lshr i8 %bf.load126, 4
  %bf.clear128 = and i8 %bf.lshr127, 7
  %bf.cast129 = zext i8 %bf.clear128 to i32
  %tobool130 = icmp ne i32 %bf.cast129, 0
  br i1 %tobool130, label %if.end.512, label %if.then.131

if.then.131:                                      ; preds = %sw.epilog
  %92 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face132 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %92, i32 0, i32 17
  %93 = load %struct.face*, %struct.face** %face132, align 8
  %underline_p = getelementptr inbounds %struct.face, %struct.face* %93, i32 0, i32 13
  %94 = bitcast i24* %underline_p to i32*
  %bf.load133 = load i32, i32* %94, align 8
  %bf.lshr134 = lshr i32 %bf.load133, 4
  %bf.clear135 = and i32 %bf.lshr134, 1
  %bf.cast136 = trunc i32 %bf.clear135 to i1
  br i1 %bf.cast136, label %if.then.137, label %if.end.316

if.then.137:                                      ; preds = %if.then.131
  %95 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face138 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %95, i32 0, i32 17
  %96 = load %struct.face*, %struct.face** %face138, align 8
  %underline_type = getelementptr inbounds %struct.face, %struct.face* %96, i32 0, i32 13
  %97 = bitcast i24* %underline_type to i32*
  %bf.load139 = load i32, i32* %97, align 8
  %bf.lshr140 = lshr i32 %bf.load139, 2
  %bf.clear141 = and i32 %bf.lshr140, 1
  %cmp142 = icmp eq i32 %bf.clear141, 1
  br i1 %cmp142, label %if.then.143, label %if.else.159

if.then.143:                                      ; preds = %if.then.137
  %98 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face144 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %98, i32 0, i32 17
  %99 = load %struct.face*, %struct.face** %face144, align 8
  %underline_defaulted_p = getelementptr inbounds %struct.face, %struct.face* %99, i32 0, i32 13
  %100 = bitcast i24* %underline_defaulted_p to i32*
  %bf.load145 = load i32, i32* %100, align 8
  %bf.lshr146 = lshr i32 %bf.load145, 9
  %bf.clear147 = and i32 %bf.lshr146, 1
  %bf.cast148 = trunc i32 %bf.clear147 to i1
  br i1 %bf.cast148, label %if.then.149, label %if.else.150

if.then.149:                                      ; preds = %if.then.143
  %101 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_underwave(%struct.glyph_string* %101)
  br label %if.end.158

if.else.150:                                      ; preds = %if.then.143
  %102 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %102, i32 0, i32 10
  %103 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %104 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %104, i32 0, i32 24
  %105 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call = call i32 @XGetGCValues(%struct._XDisplay* %103, %struct._XGC* %105, i64 4, %struct.XGCValues* %xgcv)
  %106 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display151 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %106, i32 0, i32 10
  %107 = load %struct._XDisplay*, %struct._XDisplay** %display151, align 8
  %108 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc152 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %108, i32 0, i32 24
  %109 = load %struct._XGC*, %struct._XGC** %gc152, align 8
  %110 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face153 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %110, i32 0, i32 17
  %111 = load %struct.face*, %struct.face** %face153, align 8
  %underline_color = getelementptr inbounds %struct.face, %struct.face* %111, i32 0, i32 6
  %112 = load i64, i64* %underline_color, align 8
  %call154 = call i32 @XSetForeground(%struct._XDisplay* %107, %struct._XGC* %109, i64 %112)
  %113 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_underwave(%struct.glyph_string* %113)
  %114 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display155 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %114, i32 0, i32 10
  %115 = load %struct._XDisplay*, %struct._XDisplay** %display155, align 8
  %116 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc156 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %116, i32 0, i32 24
  %117 = load %struct._XGC*, %struct._XGC** %gc156, align 8
  %foreground = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %118 = load i64, i64* %foreground, align 8
  %call157 = call i32 @XSetForeground(%struct._XDisplay* %115, %struct._XGC* %117, i64 %118)
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.150, %if.then.149
  br label %if.end.315

if.else.159:                                      ; preds = %if.then.137
  %119 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face160 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %119, i32 0, i32 17
  %120 = load %struct.face*, %struct.face** %face160, align 8
  %underline_type161 = getelementptr inbounds %struct.face, %struct.face* %120, i32 0, i32 13
  %121 = bitcast i24* %underline_type161 to i32*
  %bf.load162 = load i32, i32* %121, align 8
  %bf.lshr163 = lshr i32 %bf.load162, 2
  %bf.clear164 = and i32 %bf.lshr163, 1
  %cmp165 = icmp eq i32 %bf.clear164, 0
  br i1 %cmp165, label %if.then.166, label %if.end.314

if.then.166:                                      ; preds = %if.else.159
  %122 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev167 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %122, i32 0, i32 36
  %123 = load %struct.glyph_string*, %struct.glyph_string** %prev167, align 8
  %tobool168 = icmp ne %struct.glyph_string* %123, null
  br i1 %tobool168, label %land.lhs.true.169, label %if.else.189

land.lhs.true.169:                                ; preds = %if.then.166
  %124 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev170 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %124, i32 0, i32 36
  %125 = load %struct.glyph_string*, %struct.glyph_string** %prev170, align 8
  %face171 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %125, i32 0, i32 17
  %126 = load %struct.face*, %struct.face** %face171, align 8
  %underline_p172 = getelementptr inbounds %struct.face, %struct.face* %126, i32 0, i32 13
  %127 = bitcast i24* %underline_p172 to i32*
  %bf.load173 = load i32, i32* %127, align 8
  %bf.lshr174 = lshr i32 %bf.load173, 4
  %bf.clear175 = and i32 %bf.lshr174, 1
  %bf.cast176 = trunc i32 %bf.clear175 to i1
  br i1 %bf.cast176, label %land.lhs.true.177, label %if.else.189

land.lhs.true.177:                                ; preds = %land.lhs.true.169
  %128 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev178 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %128, i32 0, i32 36
  %129 = load %struct.glyph_string*, %struct.glyph_string** %prev178, align 8
  %face179 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %129, i32 0, i32 17
  %130 = load %struct.face*, %struct.face** %face179, align 8
  %underline_type180 = getelementptr inbounds %struct.face, %struct.face* %130, i32 0, i32 13
  %131 = bitcast i24* %underline_type180 to i32*
  %bf.load181 = load i32, i32* %131, align 8
  %bf.lshr182 = lshr i32 %bf.load181, 2
  %bf.clear183 = and i32 %bf.lshr182, 1
  %cmp184 = icmp eq i32 %bf.clear183, 0
  br i1 %cmp184, label %if.then.185, label %if.else.189

if.then.185:                                      ; preds = %land.lhs.true.177
  %132 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev186 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %132, i32 0, i32 36
  %133 = load %struct.glyph_string*, %struct.glyph_string** %prev186, align 8
  %underline_thickness = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %133, i32 0, i32 34
  %134 = load i32, i32* %underline_thickness, align 4
  %conv = sext i32 %134 to i64
  store i64 %conv, i64* %thickness, align 8
  %135 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev187 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %135, i32 0, i32 36
  %136 = load %struct.glyph_string*, %struct.glyph_string** %prev187, align 8
  %underline_position = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %136, i32 0, i32 33
  %137 = load i32, i32* %underline_position, align 4
  %conv188 = sext i32 %137 to i64
  store i64 %conv188, i64* %position, align 8
  br label %if.end.237

if.else.189:                                      ; preds = %land.lhs.true.177, %land.lhs.true.169, %if.then.166
  %138 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %138, i32 0, i32 18
  %139 = load %struct.font*, %struct.font** %font, align 8
  %tobool190 = icmp ne %struct.font* %139, null
  br i1 %tobool190, label %land.lhs.true.191, label %if.else.200

land.lhs.true.191:                                ; preds = %if.else.189
  %140 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font192 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %140, i32 0, i32 18
  %141 = load %struct.font*, %struct.font** %font192, align 8
  %underline_thickness193 = getelementptr inbounds %struct.font, %struct.font* %141, i32 0, i32 10
  %142 = load i32, i32* %underline_thickness193, align 4
  %cmp194 = icmp sgt i32 %142, 0
  br i1 %cmp194, label %if.then.196, label %if.else.200

if.then.196:                                      ; preds = %land.lhs.true.191
  %143 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font197 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %143, i32 0, i32 18
  %144 = load %struct.font*, %struct.font** %font197, align 8
  %underline_thickness198 = getelementptr inbounds %struct.font, %struct.font* %144, i32 0, i32 10
  %145 = load i32, i32* %underline_thickness198, align 4
  %conv199 = sext i32 %145 to i64
  store i64 %conv199, i64* %thickness, align 8
  br label %if.end.201

if.else.200:                                      ; preds = %land.lhs.true.191, %if.else.189
  store i64 1, i64* %thickness, align 8
  br label %if.end.201

if.end.201:                                       ; preds = %if.else.200, %if.then.196
  %146 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 508), align 1
  %tobool202 = trunc i8 %146 to i1
  br i1 %tobool202, label %if.then.203, label %if.else.209

if.then.203:                                      ; preds = %if.end.201
  %147 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %147, i32 0, i32 5
  %148 = load i32, i32* %height, align 4
  %conv204 = sext i32 %148 to i64
  %149 = load i64, i64* %thickness, align 8
  %sub = sub i64 %conv204, %149
  %150 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %150, i32 0, i32 2
  %151 = load i32, i32* %ybase, align 4
  %152 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y205 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %152, i32 0, i32 1
  %153 = load i32, i32* %y205, align 4
  %sub206 = sub nsw i32 %151, %153
  %conv207 = sext i32 %sub206 to i64
  %sub208 = sub i64 %sub, %conv207
  store i64 %sub208, i64* %position, align 8
  br label %if.end.234

if.else.209:                                      ; preds = %if.end.201
  %154 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 509), align 1
  %tobool210 = trunc i8 %154 to i1
  br i1 %tobool210, label %land.lhs.true.212, label %if.else.224

land.lhs.true.212:                                ; preds = %if.else.209
  %155 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font213 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %155, i32 0, i32 18
  %156 = load %struct.font*, %struct.font** %font213, align 8
  %tobool214 = icmp ne %struct.font* %156, null
  br i1 %tobool214, label %land.lhs.true.215, label %if.else.224

land.lhs.true.215:                                ; preds = %land.lhs.true.212
  %157 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font216 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %157, i32 0, i32 18
  %158 = load %struct.font*, %struct.font** %font216, align 8
  %underline_position217 = getelementptr inbounds %struct.font, %struct.font* %158, i32 0, i32 11
  %159 = load i32, i32* %underline_position217, align 4
  %cmp218 = icmp sge i32 %159, 0
  br i1 %cmp218, label %if.then.220, label %if.else.224

if.then.220:                                      ; preds = %land.lhs.true.215
  %160 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font221 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %160, i32 0, i32 18
  %161 = load %struct.font*, %struct.font** %font221, align 8
  %underline_position222 = getelementptr inbounds %struct.font, %struct.font* %161, i32 0, i32 11
  %162 = load i32, i32* %underline_position222, align 4
  %conv223 = sext i32 %162 to i64
  store i64 %conv223, i64* %position, align 8
  br label %if.end.233

if.else.224:                                      ; preds = %land.lhs.true.215, %land.lhs.true.212, %if.else.209
  %163 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font225 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %163, i32 0, i32 18
  %164 = load %struct.font*, %struct.font** %font225, align 8
  %tobool226 = icmp ne %struct.font* %164, null
  br i1 %tobool226, label %if.then.227, label %if.else.231

if.then.227:                                      ; preds = %if.else.224
  %165 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font228 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %165, i32 0, i32 18
  %166 = load %struct.font*, %struct.font** %font228, align 8
  %descent = getelementptr inbounds %struct.font, %struct.font* %166, i32 0, i32 9
  %167 = load i32, i32* %descent, align 4
  %add229 = add nsw i32 %167, 1
  %div = sdiv i32 %add229, 2
  %conv230 = sext i32 %div to i64
  store i64 %conv230, i64* %position, align 8
  br label %if.end.232

if.else.231:                                      ; preds = %if.else.224
  %168 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 415), align 8
  store i64 %168, i64* %position, align 8
  br label %if.end.232

if.end.232:                                       ; preds = %if.else.231, %if.then.227
  br label %if.end.233

if.end.233:                                       ; preds = %if.end.232, %if.then.220
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.233, %if.then.203
  %169 = load i64, i64* %position, align 8
  %170 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 415), align 8
  %cmp235 = icmp ugt i64 %169, %170
  br i1 %cmp235, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.234
  %171 = load i64, i64* %position, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.234
  %172 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 415), align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %171, %cond.true ], [ %172, %cond.false ]
  store i64 %cond, i64* %position, align 8
  br label %if.end.237

if.end.237:                                       ; preds = %cond.end, %if.then.185
  %173 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y238 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %173, i32 0, i32 1
  %174 = load i32, i32* %y238, align 4
  %175 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height239 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %175, i32 0, i32 5
  %176 = load i32, i32* %height239, align 4
  %add240 = add nsw i32 %174, %176
  %conv241 = sext i32 %add240 to i64
  %177 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase242 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %177, i32 0, i32 2
  %178 = load i32, i32* %ybase242, align 4
  %conv243 = sext i32 %178 to i64
  %179 = load i64, i64* %position, align 8
  %add244 = add i64 %conv243, %179
  %cmp245 = icmp ule i64 %conv241, %add244
  br i1 %cmp245, label %if.then.247, label %if.end.255

if.then.247:                                      ; preds = %if.end.237
  %180 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height248 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %180, i32 0, i32 5
  %181 = load i32, i32* %height248, align 4
  %sub249 = sub nsw i32 %181, 1
  %182 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase250 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %182, i32 0, i32 2
  %183 = load i32, i32* %ybase250, align 4
  %184 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y251 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %184, i32 0, i32 1
  %185 = load i32, i32* %y251, align 4
  %sub252 = sub nsw i32 %183, %185
  %sub253 = sub nsw i32 %sub249, %sub252
  %conv254 = sext i32 %sub253 to i64
  store i64 %conv254, i64* %position, align 8
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.247, %if.end.237
  %186 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y256 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %186, i32 0, i32 1
  %187 = load i32, i32* %y256, align 4
  %188 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height257 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %188, i32 0, i32 5
  %189 = load i32, i32* %height257, align 4
  %add258 = add nsw i32 %187, %189
  %conv259 = sext i32 %add258 to i64
  %190 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase260 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %190, i32 0, i32 2
  %191 = load i32, i32* %ybase260, align 4
  %conv261 = sext i32 %191 to i64
  %192 = load i64, i64* %position, align 8
  %add262 = add i64 %conv261, %192
  %193 = load i64, i64* %thickness, align 8
  %add263 = add i64 %add262, %193
  %cmp264 = icmp ult i64 %conv259, %add263
  br i1 %cmp264, label %if.then.266, label %if.end.275

if.then.266:                                      ; preds = %if.end.255
  %194 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y267 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %194, i32 0, i32 1
  %195 = load i32, i32* %y267, align 4
  %196 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height268 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %196, i32 0, i32 5
  %197 = load i32, i32* %height268, align 4
  %add269 = add nsw i32 %195, %197
  %conv270 = sext i32 %add269 to i64
  %198 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase271 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %198, i32 0, i32 2
  %199 = load i32, i32* %ybase271, align 4
  %conv272 = sext i32 %199 to i64
  %200 = load i64, i64* %position, align 8
  %add273 = add i64 %conv272, %200
  %sub274 = sub i64 %conv270, %add273
  store i64 %sub274, i64* %thickness, align 8
  br label %if.end.275

if.end.275:                                       ; preds = %if.then.266, %if.end.255
  %201 = load i64, i64* %thickness, align 8
  %conv276 = trunc i64 %201 to i32
  %202 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %underline_thickness277 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %202, i32 0, i32 34
  store i32 %conv276, i32* %underline_thickness277, align 4
  %203 = load i64, i64* %position, align 8
  %conv278 = trunc i64 %203 to i32
  %204 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %underline_position279 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %204, i32 0, i32 33
  store i32 %conv278, i32* %underline_position279, align 4
  %205 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase280 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %205, i32 0, i32 2
  %206 = load i32, i32* %ybase280, align 4
  %conv281 = sext i32 %206 to i64
  %207 = load i64, i64* %position, align 8
  %add282 = add i64 %conv281, %207
  %conv283 = trunc i64 %add282 to i32
  store i32 %conv283, i32* %y, align 4
  %208 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face284 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %208, i32 0, i32 17
  %209 = load %struct.face*, %struct.face** %face284, align 8
  %underline_defaulted_p285 = getelementptr inbounds %struct.face, %struct.face* %209, i32 0, i32 13
  %210 = bitcast i24* %underline_defaulted_p285 to i32*
  %bf.load286 = load i32, i32* %210, align 8
  %bf.lshr287 = lshr i32 %bf.load286, 9
  %bf.clear288 = and i32 %bf.lshr287, 1
  %bf.cast289 = trunc i32 %bf.clear288 to i1
  br i1 %bf.cast289, label %if.then.290, label %if.else.294

if.then.290:                                      ; preds = %if.end.275
  %211 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %211, i32 0, i32 8
  %212 = load %struct.frame*, %struct.frame** %f, align 8
  %213 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc291 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %213, i32 0, i32 24
  %214 = load %struct._XGC*, %struct._XGC** %gc291, align 8
  %215 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %215, i32 0, i32 0
  %216 = load i32, i32* %x, align 4
  %217 = load i32, i32* %y, align 4
  %218 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width292 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %218, i32 0, i32 3
  %219 = load i32, i32* %width292, align 4
  %220 = load i64, i64* %thickness, align 8
  %conv293 = trunc i64 %220 to i32
  call void @x_fill_rectangle(%struct.frame* %212, %struct._XGC* %214, i32 %216, i32 %217, i32 %219, i32 %conv293)
  br label %if.end.313

if.else.294:                                      ; preds = %if.end.275
  %221 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display296 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %221, i32 0, i32 10
  %222 = load %struct._XDisplay*, %struct._XDisplay** %display296, align 8
  %223 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc297 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %223, i32 0, i32 24
  %224 = load %struct._XGC*, %struct._XGC** %gc297, align 8
  %call298 = call i32 @XGetGCValues(%struct._XDisplay* %222, %struct._XGC* %224, i64 4, %struct.XGCValues* %xgcv295)
  %225 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display299 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %225, i32 0, i32 10
  %226 = load %struct._XDisplay*, %struct._XDisplay** %display299, align 8
  %227 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc300 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %227, i32 0, i32 24
  %228 = load %struct._XGC*, %struct._XGC** %gc300, align 8
  %229 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face301 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %229, i32 0, i32 17
  %230 = load %struct.face*, %struct.face** %face301, align 8
  %underline_color302 = getelementptr inbounds %struct.face, %struct.face* %230, i32 0, i32 6
  %231 = load i64, i64* %underline_color302, align 8
  %call303 = call i32 @XSetForeground(%struct._XDisplay* %226, %struct._XGC* %228, i64 %231)
  %232 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f304 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %232, i32 0, i32 8
  %233 = load %struct.frame*, %struct.frame** %f304, align 8
  %234 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc305 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %234, i32 0, i32 24
  %235 = load %struct._XGC*, %struct._XGC** %gc305, align 8
  %236 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x306 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %236, i32 0, i32 0
  %237 = load i32, i32* %x306, align 4
  %238 = load i32, i32* %y, align 4
  %239 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width307 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %239, i32 0, i32 3
  %240 = load i32, i32* %width307, align 4
  %241 = load i64, i64* %thickness, align 8
  %conv308 = trunc i64 %241 to i32
  call void @x_fill_rectangle(%struct.frame* %233, %struct._XGC* %235, i32 %237, i32 %238, i32 %240, i32 %conv308)
  %242 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display309 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %242, i32 0, i32 10
  %243 = load %struct._XDisplay*, %struct._XDisplay** %display309, align 8
  %244 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc310 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %244, i32 0, i32 24
  %245 = load %struct._XGC*, %struct._XGC** %gc310, align 8
  %foreground311 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv295, i32 0, i32 2
  %246 = load i64, i64* %foreground311, align 8
  %call312 = call i32 @XSetForeground(%struct._XDisplay* %243, %struct._XGC* %245, i64 %246)
  br label %if.end.313

if.end.313:                                       ; preds = %if.else.294, %if.then.290
  br label %if.end.314

if.end.314:                                       ; preds = %if.end.313, %if.else.159
  br label %if.end.315

if.end.315:                                       ; preds = %if.end.314, %if.end.158
  br label %if.end.316

if.end.316:                                       ; preds = %if.end.315, %if.then.131
  %247 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face317 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %247, i32 0, i32 17
  %248 = load %struct.face*, %struct.face** %face317, align 8
  %overline_p = getelementptr inbounds %struct.face, %struct.face* %248, i32 0, i32 13
  %249 = bitcast i24* %overline_p to i32*
  %bf.load318 = load i32, i32* %249, align 8
  %bf.lshr319 = lshr i32 %bf.load318, 5
  %bf.clear320 = and i32 %bf.lshr319, 1
  %bf.cast321 = trunc i32 %bf.clear320 to i1
  br i1 %bf.cast321, label %if.then.322, label %if.end.361

if.then.322:                                      ; preds = %if.end.316
  store i64 0, i64* %dy, align 8
  store i64 1, i64* %h, align 8
  %250 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face323 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %250, i32 0, i32 17
  %251 = load %struct.face*, %struct.face** %face323, align 8
  %overline_color_defaulted_p = getelementptr inbounds %struct.face, %struct.face* %251, i32 0, i32 13
  %252 = bitcast i24* %overline_color_defaulted_p to i32*
  %bf.load324 = load i32, i32* %252, align 8
  %bf.lshr325 = lshr i32 %bf.load324, 10
  %bf.clear326 = and i32 %bf.lshr325, 1
  %bf.cast327 = trunc i32 %bf.clear326 to i1
  br i1 %bf.cast327, label %if.then.328, label %if.else.338

if.then.328:                                      ; preds = %if.then.322
  %253 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f329 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %253, i32 0, i32 8
  %254 = load %struct.frame*, %struct.frame** %f329, align 8
  %255 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc330 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %255, i32 0, i32 24
  %256 = load %struct._XGC*, %struct._XGC** %gc330, align 8
  %257 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x331 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %257, i32 0, i32 0
  %258 = load i32, i32* %x331, align 4
  %259 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y332 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %259, i32 0, i32 1
  %260 = load i32, i32* %y332, align 4
  %conv333 = sext i32 %260 to i64
  %261 = load i64, i64* %dy, align 8
  %add334 = add i64 %conv333, %261
  %conv335 = trunc i64 %add334 to i32
  %262 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width336 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %262, i32 0, i32 3
  %263 = load i32, i32* %width336, align 4
  %264 = load i64, i64* %h, align 8
  %conv337 = trunc i64 %264 to i32
  call void @x_fill_rectangle(%struct.frame* %254, %struct._XGC* %256, i32 %258, i32 %conv335, i32 %263, i32 %conv337)
  br label %if.end.360

if.else.338:                                      ; preds = %if.then.322
  %265 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display340 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %265, i32 0, i32 10
  %266 = load %struct._XDisplay*, %struct._XDisplay** %display340, align 8
  %267 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc341 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %267, i32 0, i32 24
  %268 = load %struct._XGC*, %struct._XGC** %gc341, align 8
  %call342 = call i32 @XGetGCValues(%struct._XDisplay* %266, %struct._XGC* %268, i64 4, %struct.XGCValues* %xgcv339)
  %269 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display343 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %269, i32 0, i32 10
  %270 = load %struct._XDisplay*, %struct._XDisplay** %display343, align 8
  %271 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc344 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %271, i32 0, i32 24
  %272 = load %struct._XGC*, %struct._XGC** %gc344, align 8
  %273 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face345 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %273, i32 0, i32 17
  %274 = load %struct.face*, %struct.face** %face345, align 8
  %overline_color = getelementptr inbounds %struct.face, %struct.face* %274, i32 0, i32 7
  %275 = load i64, i64* %overline_color, align 8
  %call346 = call i32 @XSetForeground(%struct._XDisplay* %270, %struct._XGC* %272, i64 %275)
  %276 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f347 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %276, i32 0, i32 8
  %277 = load %struct.frame*, %struct.frame** %f347, align 8
  %278 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc348 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %278, i32 0, i32 24
  %279 = load %struct._XGC*, %struct._XGC** %gc348, align 8
  %280 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x349 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %280, i32 0, i32 0
  %281 = load i32, i32* %x349, align 4
  %282 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y350 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %282, i32 0, i32 1
  %283 = load i32, i32* %y350, align 4
  %conv351 = sext i32 %283 to i64
  %284 = load i64, i64* %dy, align 8
  %add352 = add i64 %conv351, %284
  %conv353 = trunc i64 %add352 to i32
  %285 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width354 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %285, i32 0, i32 3
  %286 = load i32, i32* %width354, align 4
  %287 = load i64, i64* %h, align 8
  %conv355 = trunc i64 %287 to i32
  call void @x_fill_rectangle(%struct.frame* %277, %struct._XGC* %279, i32 %281, i32 %conv353, i32 %286, i32 %conv355)
  %288 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display356 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %288, i32 0, i32 10
  %289 = load %struct._XDisplay*, %struct._XDisplay** %display356, align 8
  %290 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc357 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %290, i32 0, i32 24
  %291 = load %struct._XGC*, %struct._XGC** %gc357, align 8
  %foreground358 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv339, i32 0, i32 2
  %292 = load i64, i64* %foreground358, align 8
  %call359 = call i32 @XSetForeground(%struct._XDisplay* %289, %struct._XGC* %291, i64 %292)
  br label %if.end.360

if.end.360:                                       ; preds = %if.else.338, %if.then.328
  br label %if.end.361

if.end.361:                                       ; preds = %if.end.360, %if.end.316
  %293 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face362 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %293, i32 0, i32 17
  %294 = load %struct.face*, %struct.face** %face362, align 8
  %strike_through_p = getelementptr inbounds %struct.face, %struct.face* %294, i32 0, i32 13
  %295 = bitcast i24* %strike_through_p to i32*
  %bf.load363 = load i32, i32* %295, align 8
  %bf.lshr364 = lshr i32 %bf.load363, 6
  %bf.clear365 = and i32 %bf.lshr364, 1
  %bf.cast366 = trunc i32 %bf.clear365 to i1
  br i1 %bf.cast366, label %if.then.367, label %if.end.412

if.then.367:                                      ; preds = %if.end.361
  store i64 1, i64* %h368, align 8
  %296 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height370 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %296, i32 0, i32 5
  %297 = load i32, i32* %height370, align 4
  %conv371 = sext i32 %297 to i64
  %298 = load i64, i64* %h368, align 8
  %sub372 = sub i64 %conv371, %298
  %div373 = udiv i64 %sub372, 2
  store i64 %div373, i64* %dy369, align 8
  %299 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face374 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %299, i32 0, i32 17
  %300 = load %struct.face*, %struct.face** %face374, align 8
  %strike_through_color_defaulted_p = getelementptr inbounds %struct.face, %struct.face* %300, i32 0, i32 13
  %301 = bitcast i24* %strike_through_color_defaulted_p to i32*
  %bf.load375 = load i32, i32* %301, align 8
  %bf.lshr376 = lshr i32 %bf.load375, 11
  %bf.clear377 = and i32 %bf.lshr376, 1
  %bf.cast378 = trunc i32 %bf.clear377 to i1
  br i1 %bf.cast378, label %if.then.379, label %if.else.389

if.then.379:                                      ; preds = %if.then.367
  %302 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f380 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %302, i32 0, i32 8
  %303 = load %struct.frame*, %struct.frame** %f380, align 8
  %304 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc381 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %304, i32 0, i32 24
  %305 = load %struct._XGC*, %struct._XGC** %gc381, align 8
  %306 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x382 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %306, i32 0, i32 0
  %307 = load i32, i32* %x382, align 4
  %308 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y383 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %308, i32 0, i32 1
  %309 = load i32, i32* %y383, align 4
  %conv384 = sext i32 %309 to i64
  %310 = load i64, i64* %dy369, align 8
  %add385 = add i64 %conv384, %310
  %conv386 = trunc i64 %add385 to i32
  %311 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width387 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %311, i32 0, i32 3
  %312 = load i32, i32* %width387, align 4
  %313 = load i64, i64* %h368, align 8
  %conv388 = trunc i64 %313 to i32
  call void @x_fill_rectangle(%struct.frame* %303, %struct._XGC* %305, i32 %307, i32 %conv386, i32 %312, i32 %conv388)
  br label %if.end.411

if.else.389:                                      ; preds = %if.then.367
  %314 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display391 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %314, i32 0, i32 10
  %315 = load %struct._XDisplay*, %struct._XDisplay** %display391, align 8
  %316 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc392 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %316, i32 0, i32 24
  %317 = load %struct._XGC*, %struct._XGC** %gc392, align 8
  %call393 = call i32 @XGetGCValues(%struct._XDisplay* %315, %struct._XGC* %317, i64 4, %struct.XGCValues* %xgcv390)
  %318 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display394 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %318, i32 0, i32 10
  %319 = load %struct._XDisplay*, %struct._XDisplay** %display394, align 8
  %320 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc395 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %320, i32 0, i32 24
  %321 = load %struct._XGC*, %struct._XGC** %gc395, align 8
  %322 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face396 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %322, i32 0, i32 17
  %323 = load %struct.face*, %struct.face** %face396, align 8
  %strike_through_color = getelementptr inbounds %struct.face, %struct.face* %323, i32 0, i32 8
  %324 = load i64, i64* %strike_through_color, align 8
  %call397 = call i32 @XSetForeground(%struct._XDisplay* %319, %struct._XGC* %321, i64 %324)
  %325 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f398 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %325, i32 0, i32 8
  %326 = load %struct.frame*, %struct.frame** %f398, align 8
  %327 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc399 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %327, i32 0, i32 24
  %328 = load %struct._XGC*, %struct._XGC** %gc399, align 8
  %329 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x400 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %329, i32 0, i32 0
  %330 = load i32, i32* %x400, align 4
  %331 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y401 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %331, i32 0, i32 1
  %332 = load i32, i32* %y401, align 4
  %conv402 = sext i32 %332 to i64
  %333 = load i64, i64* %dy369, align 8
  %add403 = add i64 %conv402, %333
  %conv404 = trunc i64 %add403 to i32
  %334 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width405 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %334, i32 0, i32 3
  %335 = load i32, i32* %width405, align 4
  %336 = load i64, i64* %h368, align 8
  %conv406 = trunc i64 %336 to i32
  call void @x_fill_rectangle(%struct.frame* %326, %struct._XGC* %328, i32 %330, i32 %conv404, i32 %335, i32 %conv406)
  %337 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display407 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %337, i32 0, i32 10
  %338 = load %struct._XDisplay*, %struct._XDisplay** %display407, align 8
  %339 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc408 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %339, i32 0, i32 24
  %340 = load %struct._XGC*, %struct._XGC** %gc408, align 8
  %foreground409 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv390, i32 0, i32 2
  %341 = load i64, i64* %foreground409, align 8
  %call410 = call i32 @XSetForeground(%struct._XDisplay* %338, %struct._XGC* %340, i64 %341)
  br label %if.end.411

if.end.411:                                       ; preds = %if.else.389, %if.then.379
  br label %if.end.412

if.end.412:                                       ; preds = %if.end.411, %if.end.361
  %342 = load i8, i8* %relief_drawn_p, align 1
  %tobool413 = trunc i8 %342 to i1
  br i1 %tobool413, label %if.end.422, label %land.lhs.true.414

land.lhs.true.414:                                ; preds = %if.end.412
  %343 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face415 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %343, i32 0, i32 17
  %344 = load %struct.face*, %struct.face** %face415, align 8
  %box416 = getelementptr inbounds %struct.face, %struct.face* %344, i32 0, i32 13
  %345 = bitcast i24* %box416 to i32*
  %bf.load417 = load i32, i32* %345, align 8
  %bf.clear418 = and i32 %bf.load417, 3
  %cmp419 = icmp ne i32 %bf.clear418, 0
  br i1 %cmp419, label %if.then.421, label %if.end.422

if.then.421:                                      ; preds = %land.lhs.true.414
  %346 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_glyph_string_box(%struct.glyph_string* %346)
  br label %if.end.422

if.end.422:                                       ; preds = %if.then.421, %land.lhs.true.414, %if.end.412
  %347 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev423 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %347, i32 0, i32 36
  %348 = load %struct.glyph_string*, %struct.glyph_string** %prev423, align 8
  %tobool424 = icmp ne %struct.glyph_string* %348, null
  br i1 %tobool424, label %if.then.425, label %if.end.465

if.then.425:                                      ; preds = %if.end.422
  %349 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev427 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %349, i32 0, i32 36
  %350 = load %struct.glyph_string*, %struct.glyph_string** %prev427, align 8
  store %struct.glyph_string* %350, %struct.glyph_string** %prev426, align 8
  br label %for.cond.428

for.cond.428:                                     ; preds = %for.inc.462, %if.then.425
  %351 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %tobool429 = icmp ne %struct.glyph_string* %351, null
  br i1 %tobool429, label %for.body.430, label %for.end.464

for.body.430:                                     ; preds = %for.cond.428
  %352 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %hl431 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %352, i32 0, i32 16
  %353 = load i32, i32* %hl431, align 4
  %354 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl432 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %354, i32 0, i32 16
  %355 = load i32, i32* %hl432, align 4
  %cmp433 = icmp ne i32 %353, %355
  br i1 %cmp433, label %land.lhs.true.435, label %if.end.461

land.lhs.true.435:                                ; preds = %for.body.430
  %356 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %x436 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %356, i32 0, i32 0
  %357 = load i32, i32* %x436, align 4
  %358 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %width437 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %358, i32 0, i32 3
  %359 = load i32, i32* %width437, align 4
  %add438 = add nsw i32 %357, %359
  %360 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %right_overhang439 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %360, i32 0, i32 7
  %361 = load i32, i32* %right_overhang439, align 4
  %add440 = add nsw i32 %add438, %361
  %362 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x441 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %362, i32 0, i32 0
  %363 = load i32, i32* %x441, align 4
  %cmp442 = icmp sgt i32 %add440, %363
  br i1 %cmp442, label %if.then.444, label %if.end.461

if.then.444:                                      ; preds = %land.lhs.true.435
  %364 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %hl445 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %364, i32 0, i32 16
  %365 = load i32, i32* %hl445, align 4
  store i32 %365, i32* %save, align 4
  %366 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl446 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %366, i32 0, i32 16
  %367 = load i32, i32* %hl446, align 4
  %368 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %hl447 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %368, i32 0, i32 16
  store i32 %367, i32* %hl447, align 4
  %369 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  call void @x_set_glyph_string_gc(%struct.glyph_string* %369)
  %370 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %371 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  call void @x_set_glyph_string_clipping_exactly(%struct.glyph_string* %370, %struct.glyph_string* %371)
  %372 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %first_glyph448 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %372, i32 0, i32 25
  %373 = load %struct.glyph*, %struct.glyph** %first_glyph448, align 8
  %type449 = getelementptr inbounds %struct.glyph, %struct.glyph* %373, i32 0, i32 6
  %374 = bitcast i24* %type449 to i32*
  %bf.load450 = load i32, i32* %374, align 8
  %bf.clear451 = and i32 %bf.load450, 7
  %cmp452 = icmp eq i32 %bf.clear451, 0
  br i1 %cmp452, label %if.then.454, label %if.else.455

if.then.454:                                      ; preds = %if.then.444
  %375 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  call void @x_draw_glyph_string_foreground(%struct.glyph_string* %375)
  br label %if.end.456

if.else.455:                                      ; preds = %if.then.444
  %376 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  call void @x_draw_composite_glyph_string_foreground(%struct.glyph_string* %376)
  br label %if.end.456

if.end.456:                                       ; preds = %if.else.455, %if.then.454
  %377 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %f457 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %377, i32 0, i32 8
  %378 = load %struct.frame*, %struct.frame** %f457, align 8
  %379 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %gc458 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %379, i32 0, i32 24
  %380 = load %struct._XGC*, %struct._XGC** %gc458, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %378, %struct._XGC* %380)
  %381 = load i32, i32* %save, align 4
  %382 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %hl459 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %382, i32 0, i32 16
  store i32 %381, i32* %hl459, align 4
  %383 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %num_clips460 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %383, i32 0, i32 32
  store i32 0, i32* %num_clips460, align 4
  br label %if.end.461

if.end.461:                                       ; preds = %if.end.456, %land.lhs.true.435, %for.body.430
  br label %for.inc.462

for.inc.462:                                      ; preds = %if.end.461
  %384 = load %struct.glyph_string*, %struct.glyph_string** %prev426, align 8
  %prev463 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %384, i32 0, i32 36
  %385 = load %struct.glyph_string*, %struct.glyph_string** %prev463, align 8
  store %struct.glyph_string* %385, %struct.glyph_string** %prev426, align 8
  br label %for.cond.428

for.end.464:                                      ; preds = %for.cond.428
  br label %if.end.465

if.end.465:                                       ; preds = %for.end.464, %if.end.422
  %386 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next466 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %386, i32 0, i32 35
  %387 = load %struct.glyph_string*, %struct.glyph_string** %next466, align 8
  %tobool467 = icmp ne %struct.glyph_string* %387, null
  br i1 %tobool467, label %if.then.468, label %if.end.511

if.then.468:                                      ; preds = %if.end.465
  %388 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next470 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %388, i32 0, i32 35
  %389 = load %struct.glyph_string*, %struct.glyph_string** %next470, align 8
  store %struct.glyph_string* %389, %struct.glyph_string** %next469, align 8
  br label %for.cond.471

for.cond.471:                                     ; preds = %for.inc.508, %if.then.468
  %390 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %tobool472 = icmp ne %struct.glyph_string* %390, null
  br i1 %tobool472, label %for.body.473, label %for.end.510

for.body.473:                                     ; preds = %for.cond.471
  %391 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %hl474 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %391, i32 0, i32 16
  %392 = load i32, i32* %hl474, align 4
  %393 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl475 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %393, i32 0, i32 16
  %394 = load i32, i32* %hl475, align 4
  %cmp476 = icmp ne i32 %392, %394
  br i1 %cmp476, label %land.lhs.true.478, label %if.end.507

land.lhs.true.478:                                ; preds = %for.body.473
  %395 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %x479 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %395, i32 0, i32 0
  %396 = load i32, i32* %x479, align 4
  %397 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %left_overhang480 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %397, i32 0, i32 6
  %398 = load i32, i32* %left_overhang480, align 4
  %sub481 = sub nsw i32 %396, %398
  %399 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x482 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %399, i32 0, i32 0
  %400 = load i32, i32* %x482, align 4
  %401 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width483 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %401, i32 0, i32 3
  %402 = load i32, i32* %width483, align 4
  %add484 = add nsw i32 %400, %402
  %cmp485 = icmp slt i32 %sub481, %add484
  br i1 %cmp485, label %if.then.487, label %if.end.507

if.then.487:                                      ; preds = %land.lhs.true.478
  %403 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %hl489 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %403, i32 0, i32 16
  %404 = load i32, i32* %hl489, align 4
  store i32 %404, i32* %save488, align 4
  %405 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl490 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %405, i32 0, i32 16
  %406 = load i32, i32* %hl490, align 4
  %407 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %hl491 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %407, i32 0, i32 16
  store i32 %406, i32* %hl491, align 4
  %408 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  call void @x_set_glyph_string_gc(%struct.glyph_string* %408)
  %409 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %410 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  call void @x_set_glyph_string_clipping_exactly(%struct.glyph_string* %409, %struct.glyph_string* %410)
  %411 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %first_glyph492 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %411, i32 0, i32 25
  %412 = load %struct.glyph*, %struct.glyph** %first_glyph492, align 8
  %type493 = getelementptr inbounds %struct.glyph, %struct.glyph* %412, i32 0, i32 6
  %413 = bitcast i24* %type493 to i32*
  %bf.load494 = load i32, i32* %413, align 8
  %bf.clear495 = and i32 %bf.load494, 7
  %cmp496 = icmp eq i32 %bf.clear495, 0
  br i1 %cmp496, label %if.then.498, label %if.else.499

if.then.498:                                      ; preds = %if.then.487
  %414 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  call void @x_draw_glyph_string_foreground(%struct.glyph_string* %414)
  br label %if.end.500

if.else.499:                                      ; preds = %if.then.487
  %415 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  call void @x_draw_composite_glyph_string_foreground(%struct.glyph_string* %415)
  br label %if.end.500

if.end.500:                                       ; preds = %if.else.499, %if.then.498
  %416 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %f501 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %416, i32 0, i32 8
  %417 = load %struct.frame*, %struct.frame** %f501, align 8
  %418 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %gc502 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %418, i32 0, i32 24
  %419 = load %struct._XGC*, %struct._XGC** %gc502, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %417, %struct._XGC* %419)
  %420 = load i32, i32* %save488, align 4
  %421 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %hl503 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %421, i32 0, i32 16
  store i32 %420, i32* %hl503, align 4
  %422 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %num_clips504 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %422, i32 0, i32 32
  store i32 0, i32* %num_clips504, align 4
  %423 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next505 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %423, i32 0, i32 35
  %424 = load %struct.glyph_string*, %struct.glyph_string** %next505, align 8
  %425 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %clip_head506 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %425, i32 0, i32 29
  store %struct.glyph_string* %424, %struct.glyph_string** %clip_head506, align 8
  br label %if.end.507

if.end.507:                                       ; preds = %if.end.500, %land.lhs.true.478, %for.body.473
  br label %for.inc.508

for.inc.508:                                      ; preds = %if.end.507
  %426 = load %struct.glyph_string*, %struct.glyph_string** %next469, align 8
  %next509 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %426, i32 0, i32 35
  %427 = load %struct.glyph_string*, %struct.glyph_string** %next509, align 8
  store %struct.glyph_string* %427, %struct.glyph_string** %next469, align 8
  br label %for.cond.471

for.end.510:                                      ; preds = %for.cond.471
  br label %if.end.511

if.end.511:                                       ; preds = %for.end.510, %if.end.465
  br label %if.end.512

if.end.512:                                       ; preds = %if.end.511, %sw.epilog
  %428 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f513 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %428, i32 0, i32 8
  %429 = load %struct.frame*, %struct.frame** %f513, align 8
  %430 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc514 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %430, i32 0, i32 24
  %431 = load %struct._XGC*, %struct._XGC** %gc514, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %429, %struct._XGC* %431)
  %432 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %num_clips515 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %432, i32 0, i32 32
  store i32 0, i32* %num_clips515, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_define_frame_cursor(%struct.frame* %f, i64 %cursor) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %cursor.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %cursor, i64* %cursor.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pointer_invisible = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %pointer_invisible to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 21
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %current_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 41
  %4 = load i64, i64* %current_cursor, align 8
  %5 = load i64, i64* %cursor.addr, align 8
  %cmp = icmp ne i64 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 44
  %8 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %8, i32 0, i32 2
  %9 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 9
  %12 = load i64, i64* %window_desc, align 8
  %13 = load i64, i64* %cursor.addr, align 8
  %call = call i32 @XDefineCursor(%struct._XDisplay* %9, i64 %12, i64 %13)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %14 = load i64, i64* %cursor.addr, align 8
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %current_cursor7 = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 41
  store i64 %14, i64* %current_cursor7, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_clear_frame_area(%struct.frame* %f, i32 %x, i32 %y, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %y.addr, align 4
  %3 = load i32, i32* %width.addr, align 4
  %4 = load i32, i32* %height.addr, align 4
  call void @x_clear_area(%struct.frame* %0, i32 %1, i32 %2, i32 %3, i32 %4)
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 13
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %7, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %edit_widget4 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 13
  %10 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget4, align 8
  call void @gtk_widget_queue_draw(%struct._GtkWidget* %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_window_cursor(%struct.window* %w, %struct.glyph_row* %glyph_row, i32 %x, i32 %y, i32 %cursor_type, i32 %cursor_width, i1 zeroext %on_p, i1 zeroext %active_p) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %glyph_row.addr = alloca %struct.glyph_row*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %cursor_type.addr = alloca i32, align 4
  %cursor_width.addr = alloca i32, align 4
  %on_p.addr = alloca i8, align 1
  %active_p.addr = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %glyph_row, %struct.glyph_row** %glyph_row.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %cursor_type, i32* %cursor_type.addr, align 4
  store i32 %cursor_width, i32* %cursor_width.addr, align 4
  %frombool = zext i1 %on_p to i8
  store i8 %frombool, i8* %on_p.addr, align 1
  %frombool1 = zext i1 %active_p to i8
  store i8 %frombool1, i8* %active_p.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load i8, i8* %on_p.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then, label %if.end.38

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %cursor_type.addr, align 4
  %6 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_type = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 53
  store i32 %5, i32* %phys_cursor_type, align 4
  %7 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_on_p = getelementptr inbounds %struct.window, %struct.window* %7, i32 0, i32 67
  %bf.load = load i16, i16* %phys_cursor_on_p, align 4
  %bf.clear = and i16 %bf.load, -129
  %bf.set = or i16 %bf.clear, 128
  store i16 %bf.set, i16* %phys_cursor_on_p, align 4
  %8 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %exact_window_width_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i32 0, i32 22
  %9 = bitcast i40* %exact_window_width_line_p to i64*
  %bf.load2 = load i64, i64* %9, align 4
  %bf.lshr = lshr i64 %bf.load2, 27
  %bf.clear3 = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear3 to i1
  br i1 %bf.cast, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 22
  %11 = bitcast i40* %reversed_p to i64*
  %bf.load4 = load i64, i64* %11, align 4
  %bf.lshr5 = lshr i64 %bf.load4, 34
  %bf.clear6 = and i64 %bf.lshr5, 1
  %bf.cast7 = trunc i64 %bf.clear6 to i1
  br i1 %bf.cast7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 50
  %hpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor, i32 0, i32 2
  %13 = load i32, i32* %hpos, align 4
  %cmp = icmp slt i32 %13, 0
  br i1 %cmp, label %if.then.12, label %if.else

cond.false:                                       ; preds = %land.lhs.true
  %14 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor8 = getelementptr inbounds %struct.window, %struct.window* %14, i32 0, i32 50
  %hpos9 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor8, i32 0, i32 2
  %15 = load i32, i32* %hpos9, align 4
  %16 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %17 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %17 to i32
  %cmp10 = icmp sge i32 %15, %conv
  br i1 %cmp10, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %cond.false, %cond.true
  %18 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %cursor_in_fringe_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %18, i32 0, i32 22
  %19 = bitcast i40* %cursor_in_fringe_p to i64*
  %bf.load13 = load i64, i64* %19, align 4
  %bf.clear14 = and i64 %bf.load13, -268435457
  %bf.set15 = or i64 %bf.clear14, 268435456
  store i64 %bf.set15, i64* %19, align 4
  %20 = load %struct.window*, %struct.window** %w.addr, align 8
  %21 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %22 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %reversed_p16 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 22
  %23 = bitcast i40* %reversed_p16 to i64*
  %bf.load17 = load i64, i64* %23, align 4
  %bf.lshr18 = lshr i64 %bf.load17, 34
  %bf.clear19 = and i64 %bf.lshr18, 1
  %bf.cast20 = trunc i64 %bf.clear19 to i1
  %conv21 = zext i1 %bf.cast20 to i32
  call void @draw_fringe_bitmap(%struct.window* %20, %struct.glyph_row* %21, i32 %conv21)
  br label %if.end

if.else:                                          ; preds = %cond.false, %cond.true, %if.then
  %24 = load i32, i32* %cursor_type.addr, align 4
  switch i32 %24, label %sw.default [
    i32 1, label %sw.bb
    i32 0, label %sw.bb.22
    i32 2, label %sw.bb.23
    i32 3, label %sw.bb.24
    i32 -1, label %sw.bb.25
  ]

sw.bb:                                            ; preds = %if.else
  %25 = load %struct.window*, %struct.window** %w.addr, align 8
  %26 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  call void @x_draw_hollow_cursor(%struct.window* %25, %struct.glyph_row* %26)
  br label %sw.epilog

sw.bb.22:                                         ; preds = %if.else
  %27 = load %struct.window*, %struct.window** %w.addr, align 8
  %28 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  call void @draw_phys_cursor_glyph(%struct.window* %27, %struct.glyph_row* %28, i32 2)
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.else
  %29 = load %struct.window*, %struct.window** %w.addr, align 8
  %30 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %31 = load i32, i32* %cursor_width.addr, align 4
  call void @x_draw_bar_cursor(%struct.window* %29, %struct.glyph_row* %30, i32 %31, i32 2)
  br label %sw.epilog

sw.bb.24:                                         ; preds = %if.else
  %32 = load %struct.window*, %struct.window** %w.addr, align 8
  %33 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row.addr, align 8
  %34 = load i32, i32* %cursor_width.addr, align 4
  call void @x_draw_bar_cursor(%struct.window* %32, %struct.glyph_row* %33, i32 %34, i32 3)
  br label %sw.epilog

sw.bb.25:                                         ; preds = %if.else
  %35 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_width = getelementptr inbounds %struct.window, %struct.window* %35, i32 0, i32 54
  store i32 0, i32* %phys_cursor_width, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.else
  call void @emacs_abort() #10
  unreachable

sw.epilog:                                        ; preds = %sw.bb.25, %sw.bb.24, %sw.bb.23, %sw.bb.22, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then.12
  %36 = load %struct.window*, %struct.window** %w.addr, align 8
  %37 = load %struct.frame*, %struct.frame** %f, align 8
  %selected_window = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 6
  %38 = load i64, i64* %selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %38)
  %cmp26 = icmp eq %struct.window* %36, %call
  br i1 %cmp26, label %if.then.28, label %if.end.37

if.then.28:                                       ; preds = %if.end
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 62
  %x29 = bitcast %union.output_data* %output_data to %struct.x_output**
  %40 = load %struct.x_output*, %struct.x_output** %x29, align 8
  %xic = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 47
  %41 = load %struct._XIC*, %struct._XIC** %xic, align 8
  %tobool30 = icmp ne %struct._XIC* %41, null
  br i1 %tobool30, label %land.lhs.true.31, label %if.end.36

land.lhs.true.31:                                 ; preds = %if.then.28
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data32 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 62
  %x33 = bitcast %union.output_data* %output_data32 to %struct.x_output**
  %43 = load %struct.x_output*, %struct.x_output** %x33, align 8
  %xic_style = getelementptr inbounds %struct.x_output, %struct.x_output* %43, i32 0, i32 48
  %44 = load i64, i64* %xic_style, align 8
  %and = and i64 %44, 4
  %tobool34 = icmp ne i64 %and, 0
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %land.lhs.true.31
  %45 = load %struct.window*, %struct.window** %w.addr, align 8
  %46 = load i32, i32* %x.addr, align 4
  %47 = load i32, i32* %y.addr, align 4
  call void @xic_set_preeditarea(%struct.window* %45, i32 %46, i32 %47)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %land.lhs.true.31, %if.then.28
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_vertical_window_border(%struct.window* %w, i32 %x, i32 %y0, i32 %y1) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %x.addr = alloca i32, align 4
  %y0.addr = alloca i32, align 4
  %y1.addr = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %face = alloca %struct.face*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y0, i32* %y0.addr, align 4
  store i32 %y1, i32* %y1.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 20
  %5 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %5, i32 0, i32 4
  %6 = load i32, i32* %used, align 4
  %add = add i32 %6, 0
  %cmp = icmp ult i32 11, %add
  br i1 %cmp, label %cond.true.6, label %cond.false.8

cond.false:                                       ; preds = %entry
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache1 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 20
  %8 = load %struct.face_cache*, %struct.face_cache** %face_cache1, align 8
  %used2 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %8, i32 0, i32 4
  %9 = load i32, i32* %used2, align 4
  %conv = sext i32 %9 to i64
  %add3 = add i64 %conv, 0
  %cmp4 = icmp ult i64 11, %add3
  br i1 %cmp4, label %cond.true.6, label %cond.false.8

cond.true.6:                                      ; preds = %cond.false, %cond.true
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache7 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 20
  %11 = load %struct.face_cache*, %struct.face_cache** %face_cache7, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %11, i32 0, i32 2
  %12 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %12, i64 11
  %13 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end

cond.false.8:                                     ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.8, %cond.true.6
  %cond = phi %struct.face* [ %13, %cond.true.6 ], [ null, %cond.false.8 ]
  store %struct.face* %cond, %struct.face** %face, align 8
  %14 = load %struct.face*, %struct.face** %face, align 8
  %tobool = icmp ne %struct.face* %14, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 44
  %17 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 2
  %18 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %19 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %normal_gc = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 6
  %21 = load %struct._XGC*, %struct._XGC** %normal_gc, align 8
  %22 = load %struct.face*, %struct.face** %face, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %22, i32 0, i32 4
  %23 = load i64, i64* %foreground, align 8
  %call = call i32 @XSetForeground(%struct._XDisplay* %18, %struct._XGC* %21, i64 %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %24 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data12 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x13 = bitcast %union.output_data* %output_data12 to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x13, align 8
  %display_info14 = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 44
  %26 = load %struct.x_display_info*, %struct.x_display_info** %display_info14, align 8
  %display15 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 2
  %27 = load %struct._XDisplay*, %struct._XDisplay** %display15, align 8
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data16 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x17 = bitcast %union.output_data* %output_data16 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x17, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 9
  %30 = load i64, i64* %window_desc, align 8
  %31 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data18 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x19 = bitcast %union.output_data* %output_data18 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x19, align 8
  %normal_gc20 = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 6
  %33 = load %struct._XGC*, %struct._XGC** %normal_gc20, align 8
  %34 = load i32, i32* %x.addr, align 4
  %35 = load i32, i32* %y0.addr, align 4
  %36 = load i32, i32* %x.addr, align 4
  %37 = load i32, i32* %y1.addr, align 4
  %call21 = call i32 @XDrawLine(%struct._XDisplay* %27, i64 %30, %struct._XGC* %33, i32 %34, i32 %35, i32 %36, i32 %37)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_window_divider(%struct.window* %w, i32 %x0, i32 %x1, i32 %y0, i32 %y1) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %x0.addr = alloca i32, align 4
  %x1.addr = alloca i32, align 4
  %y0.addr = alloca i32, align 4
  %y1.addr = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %face = alloca %struct.face*, align 8
  %face_first = alloca %struct.face*, align 8
  %face_last = alloca %struct.face*, align 8
  %color = alloca i64, align 8
  %color_first = alloca i64, align 8
  %color_last = alloca i64, align 8
  %display = alloca %struct._XDisplay*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %x0, i32* %x0.addr, align 4
  store i32 %x1, i32* %x1.addr, align 4
  store i32 %y0, i32* %y0.addr, align 4
  store i32 %y1, i32* %y1.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 20
  %5 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %5, i32 0, i32 4
  %6 = load i32, i32* %used, align 4
  %add = add i32 %6, 0
  %cmp = icmp ult i32 12, %add
  br i1 %cmp, label %cond.true.6, label %cond.false.8

cond.false:                                       ; preds = %entry
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache1 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 20
  %8 = load %struct.face_cache*, %struct.face_cache** %face_cache1, align 8
  %used2 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %8, i32 0, i32 4
  %9 = load i32, i32* %used2, align 4
  %conv = sext i32 %9 to i64
  %add3 = add i64 %conv, 0
  %cmp4 = icmp ult i64 12, %add3
  br i1 %cmp4, label %cond.true.6, label %cond.false.8

cond.true.6:                                      ; preds = %cond.false, %cond.true
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache7 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 20
  %11 = load %struct.face_cache*, %struct.face_cache** %face_cache7, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %11, i32 0, i32 2
  %12 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %12, i64 12
  %13 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end

cond.false.8:                                     ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.8, %cond.true.6
  %cond = phi %struct.face* [ %13, %cond.true.6 ], [ null, %cond.false.8 ]
  store %struct.face* %cond, %struct.face** %face, align 8
  br i1 true, label %cond.true.9, label %cond.false.15

cond.true.9:                                      ; preds = %cond.end
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache10 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 20
  %15 = load %struct.face_cache*, %struct.face_cache** %face_cache10, align 8
  %used11 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %15, i32 0, i32 4
  %16 = load i32, i32* %used11, align 4
  %add12 = add i32 %16, 0
  %cmp13 = icmp ult i32 13, %add12
  br i1 %cmp13, label %cond.true.22, label %cond.false.26

cond.false.15:                                    ; preds = %cond.end
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache16 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 20
  %18 = load %struct.face_cache*, %struct.face_cache** %face_cache16, align 8
  %used17 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %18, i32 0, i32 4
  %19 = load i32, i32* %used17, align 4
  %conv18 = sext i32 %19 to i64
  %add19 = add i64 %conv18, 0
  %cmp20 = icmp ult i64 13, %add19
  br i1 %cmp20, label %cond.true.22, label %cond.false.26

cond.true.22:                                     ; preds = %cond.false.15, %cond.true.9
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache23 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 20
  %21 = load %struct.face_cache*, %struct.face_cache** %face_cache23, align 8
  %faces_by_id24 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %21, i32 0, i32 2
  %22 = load %struct.face**, %struct.face*** %faces_by_id24, align 8
  %arrayidx25 = getelementptr inbounds %struct.face*, %struct.face** %22, i64 13
  %23 = load %struct.face*, %struct.face** %arrayidx25, align 8
  br label %cond.end.27

cond.false.26:                                    ; preds = %cond.false.15, %cond.true.9
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.26, %cond.true.22
  %cond28 = phi %struct.face* [ %23, %cond.true.22 ], [ null, %cond.false.26 ]
  store %struct.face* %cond28, %struct.face** %face_first, align 8
  br i1 true, label %cond.true.29, label %cond.false.35

cond.true.29:                                     ; preds = %cond.end.27
  %24 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache30 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 20
  %25 = load %struct.face_cache*, %struct.face_cache** %face_cache30, align 8
  %used31 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %25, i32 0, i32 4
  %26 = load i32, i32* %used31, align 4
  %add32 = add i32 %26, 0
  %cmp33 = icmp ult i32 14, %add32
  br i1 %cmp33, label %cond.true.42, label %cond.false.46

cond.false.35:                                    ; preds = %cond.end.27
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache36 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 20
  %28 = load %struct.face_cache*, %struct.face_cache** %face_cache36, align 8
  %used37 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %28, i32 0, i32 4
  %29 = load i32, i32* %used37, align 4
  %conv38 = sext i32 %29 to i64
  %add39 = add i64 %conv38, 0
  %cmp40 = icmp ult i64 14, %add39
  br i1 %cmp40, label %cond.true.42, label %cond.false.46

cond.true.42:                                     ; preds = %cond.false.35, %cond.true.29
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache43 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 20
  %31 = load %struct.face_cache*, %struct.face_cache** %face_cache43, align 8
  %faces_by_id44 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %31, i32 0, i32 2
  %32 = load %struct.face**, %struct.face*** %faces_by_id44, align 8
  %arrayidx45 = getelementptr inbounds %struct.face*, %struct.face** %32, i64 14
  %33 = load %struct.face*, %struct.face** %arrayidx45, align 8
  br label %cond.end.47

cond.false.46:                                    ; preds = %cond.false.35, %cond.true.29
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.46, %cond.true.42
  %cond48 = phi %struct.face* [ %33, %cond.true.42 ], [ null, %cond.false.46 ]
  store %struct.face* %cond48, %struct.face** %face_last, align 8
  %34 = load %struct.face*, %struct.face** %face, align 8
  %tobool = icmp ne %struct.face* %34, null
  br i1 %tobool, label %cond.true.49, label %cond.false.50

cond.true.49:                                     ; preds = %cond.end.47
  %35 = load %struct.face*, %struct.face** %face, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %35, i32 0, i32 4
  %36 = load i64, i64* %foreground, align 8
  br label %cond.end.51

cond.false.50:                                    ; preds = %cond.end.47
  %37 = load %struct.frame*, %struct.frame** %f, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 78
  %38 = load i64, i64* %foreground_pixel, align 8
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.50, %cond.true.49
  %cond52 = phi i64 [ %36, %cond.true.49 ], [ %38, %cond.false.50 ]
  store i64 %cond52, i64* %color, align 8
  %39 = load %struct.face*, %struct.face** %face_first, align 8
  %tobool53 = icmp ne %struct.face* %39, null
  br i1 %tobool53, label %cond.true.54, label %cond.false.56

cond.true.54:                                     ; preds = %cond.end.51
  %40 = load %struct.face*, %struct.face** %face_first, align 8
  %foreground55 = getelementptr inbounds %struct.face, %struct.face* %40, i32 0, i32 4
  %41 = load i64, i64* %foreground55, align 8
  br label %cond.end.58

cond.false.56:                                    ; preds = %cond.end.51
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %foreground_pixel57 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 78
  %43 = load i64, i64* %foreground_pixel57, align 8
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.56, %cond.true.54
  %cond59 = phi i64 [ %41, %cond.true.54 ], [ %43, %cond.false.56 ]
  store i64 %cond59, i64* %color_first, align 8
  %44 = load %struct.face*, %struct.face** %face_last, align 8
  %tobool60 = icmp ne %struct.face* %44, null
  br i1 %tobool60, label %cond.true.61, label %cond.false.63

cond.true.61:                                     ; preds = %cond.end.58
  %45 = load %struct.face*, %struct.face** %face_last, align 8
  %foreground62 = getelementptr inbounds %struct.face, %struct.face* %45, i32 0, i32 4
  %46 = load i64, i64* %foreground62, align 8
  br label %cond.end.65

cond.false.63:                                    ; preds = %cond.end.58
  %47 = load %struct.frame*, %struct.frame** %f, align 8
  %foreground_pixel64 = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 78
  %48 = load i64, i64* %foreground_pixel64, align 8
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.63, %cond.true.61
  %cond66 = phi i64 [ %46, %cond.true.61 ], [ %48, %cond.false.63 ]
  store i64 %cond66, i64* %color_last, align 8
  %49 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 44
  %51 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display67 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %51, i32 0, i32 2
  %52 = load %struct._XDisplay*, %struct._XDisplay** %display67, align 8
  store %struct._XDisplay* %52, %struct._XDisplay** %display, align 8
  %53 = load i32, i32* %y1.addr, align 4
  %54 = load i32, i32* %y0.addr, align 4
  %sub68 = sub nsw i32 %53, %54
  %55 = load i32, i32* %x1.addr, align 4
  %56 = load i32, i32* %x0.addr, align 4
  %sub69 = sub nsw i32 %55, %56
  %cmp70 = icmp sgt i32 %sub68, %sub69
  br i1 %cmp70, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end.65
  %57 = load i32, i32* %x1.addr, align 4
  %58 = load i32, i32* %x0.addr, align 4
  %sub72 = sub nsw i32 %57, %58
  %cmp73 = icmp sgt i32 %sub72, 2
  br i1 %cmp73, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %59 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %60 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data75 = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 62
  %x76 = bitcast %union.output_data* %output_data75 to %struct.x_output**
  %61 = load %struct.x_output*, %struct.x_output** %x76, align 8
  %normal_gc = getelementptr inbounds %struct.x_output, %struct.x_output* %61, i32 0, i32 6
  %62 = load %struct._XGC*, %struct._XGC** %normal_gc, align 8
  %63 = load i64, i64* %color_first, align 8
  %call = call i32 @XSetForeground(%struct._XDisplay* %59, %struct._XGC* %62, i64 %63)
  %64 = load %struct.frame*, %struct.frame** %f, align 8
  %65 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data77 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 62
  %x78 = bitcast %union.output_data* %output_data77 to %struct.x_output**
  %66 = load %struct.x_output*, %struct.x_output** %x78, align 8
  %normal_gc79 = getelementptr inbounds %struct.x_output, %struct.x_output* %66, i32 0, i32 6
  %67 = load %struct._XGC*, %struct._XGC** %normal_gc79, align 8
  %68 = load i32, i32* %x0.addr, align 4
  %69 = load i32, i32* %y0.addr, align 4
  %70 = load i32, i32* %y1.addr, align 4
  %71 = load i32, i32* %y0.addr, align 4
  %sub80 = sub nsw i32 %70, %71
  call void @x_fill_rectangle(%struct.frame* %64, %struct._XGC* %67, i32 %68, i32 %69, i32 1, i32 %sub80)
  %72 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %73 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data81 = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 62
  %x82 = bitcast %union.output_data* %output_data81 to %struct.x_output**
  %74 = load %struct.x_output*, %struct.x_output** %x82, align 8
  %normal_gc83 = getelementptr inbounds %struct.x_output, %struct.x_output* %74, i32 0, i32 6
  %75 = load %struct._XGC*, %struct._XGC** %normal_gc83, align 8
  %76 = load i64, i64* %color, align 8
  %call84 = call i32 @XSetForeground(%struct._XDisplay* %72, %struct._XGC* %75, i64 %76)
  %77 = load %struct.frame*, %struct.frame** %f, align 8
  %78 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data85 = getelementptr inbounds %struct.frame, %struct.frame* %78, i32 0, i32 62
  %x86 = bitcast %union.output_data* %output_data85 to %struct.x_output**
  %79 = load %struct.x_output*, %struct.x_output** %x86, align 8
  %normal_gc87 = getelementptr inbounds %struct.x_output, %struct.x_output* %79, i32 0, i32 6
  %80 = load %struct._XGC*, %struct._XGC** %normal_gc87, align 8
  %81 = load i32, i32* %x0.addr, align 4
  %add88 = add nsw i32 %81, 1
  %82 = load i32, i32* %y0.addr, align 4
  %83 = load i32, i32* %x1.addr, align 4
  %84 = load i32, i32* %x0.addr, align 4
  %sub89 = sub nsw i32 %83, %84
  %sub90 = sub nsw i32 %sub89, 2
  %85 = load i32, i32* %y1.addr, align 4
  %86 = load i32, i32* %y0.addr, align 4
  %sub91 = sub nsw i32 %85, %86
  call void @x_fill_rectangle(%struct.frame* %77, %struct._XGC* %80, i32 %add88, i32 %82, i32 %sub90, i32 %sub91)
  %87 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %88 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data92 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 62
  %x93 = bitcast %union.output_data* %output_data92 to %struct.x_output**
  %89 = load %struct.x_output*, %struct.x_output** %x93, align 8
  %normal_gc94 = getelementptr inbounds %struct.x_output, %struct.x_output* %89, i32 0, i32 6
  %90 = load %struct._XGC*, %struct._XGC** %normal_gc94, align 8
  %91 = load i64, i64* %color_last, align 8
  %call95 = call i32 @XSetForeground(%struct._XDisplay* %87, %struct._XGC* %90, i64 %91)
  %92 = load %struct.frame*, %struct.frame** %f, align 8
  %93 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data96 = getelementptr inbounds %struct.frame, %struct.frame* %93, i32 0, i32 62
  %x97 = bitcast %union.output_data* %output_data96 to %struct.x_output**
  %94 = load %struct.x_output*, %struct.x_output** %x97, align 8
  %normal_gc98 = getelementptr inbounds %struct.x_output, %struct.x_output* %94, i32 0, i32 6
  %95 = load %struct._XGC*, %struct._XGC** %normal_gc98, align 8
  %96 = load i32, i32* %x1.addr, align 4
  %sub99 = sub nsw i32 %96, 1
  %97 = load i32, i32* %y0.addr, align 4
  %98 = load i32, i32* %y1.addr, align 4
  %99 = load i32, i32* %y0.addr, align 4
  %sub100 = sub nsw i32 %98, %99
  call void @x_fill_rectangle(%struct.frame* %92, %struct._XGC* %95, i32 %sub99, i32 %97, i32 1, i32 %sub100)
  br label %if.end.148

if.else:                                          ; preds = %land.lhs.true, %cond.end.65
  %100 = load i32, i32* %x1.addr, align 4
  %101 = load i32, i32* %x0.addr, align 4
  %sub101 = sub nsw i32 %100, %101
  %102 = load i32, i32* %y1.addr, align 4
  %103 = load i32, i32* %y0.addr, align 4
  %sub102 = sub nsw i32 %102, %103
  %cmp103 = icmp sgt i32 %sub101, %sub102
  br i1 %cmp103, label %land.lhs.true.105, label %if.else.138

land.lhs.true.105:                                ; preds = %if.else
  %104 = load i32, i32* %y1.addr, align 4
  %105 = load i32, i32* %y0.addr, align 4
  %sub106 = sub nsw i32 %104, %105
  %cmp107 = icmp sgt i32 %sub106, 3
  br i1 %cmp107, label %if.then.109, label %if.else.138

if.then.109:                                      ; preds = %land.lhs.true.105
  %106 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %107 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data110 = getelementptr inbounds %struct.frame, %struct.frame* %107, i32 0, i32 62
  %x111 = bitcast %union.output_data* %output_data110 to %struct.x_output**
  %108 = load %struct.x_output*, %struct.x_output** %x111, align 8
  %normal_gc112 = getelementptr inbounds %struct.x_output, %struct.x_output* %108, i32 0, i32 6
  %109 = load %struct._XGC*, %struct._XGC** %normal_gc112, align 8
  %110 = load i64, i64* %color_first, align 8
  %call113 = call i32 @XSetForeground(%struct._XDisplay* %106, %struct._XGC* %109, i64 %110)
  %111 = load %struct.frame*, %struct.frame** %f, align 8
  %112 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data114 = getelementptr inbounds %struct.frame, %struct.frame* %112, i32 0, i32 62
  %x115 = bitcast %union.output_data* %output_data114 to %struct.x_output**
  %113 = load %struct.x_output*, %struct.x_output** %x115, align 8
  %normal_gc116 = getelementptr inbounds %struct.x_output, %struct.x_output* %113, i32 0, i32 6
  %114 = load %struct._XGC*, %struct._XGC** %normal_gc116, align 8
  %115 = load i32, i32* %x0.addr, align 4
  %116 = load i32, i32* %y0.addr, align 4
  %117 = load i32, i32* %x1.addr, align 4
  %118 = load i32, i32* %x0.addr, align 4
  %sub117 = sub nsw i32 %117, %118
  call void @x_fill_rectangle(%struct.frame* %111, %struct._XGC* %114, i32 %115, i32 %116, i32 %sub117, i32 1)
  %119 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %120 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data118 = getelementptr inbounds %struct.frame, %struct.frame* %120, i32 0, i32 62
  %x119 = bitcast %union.output_data* %output_data118 to %struct.x_output**
  %121 = load %struct.x_output*, %struct.x_output** %x119, align 8
  %normal_gc120 = getelementptr inbounds %struct.x_output, %struct.x_output* %121, i32 0, i32 6
  %122 = load %struct._XGC*, %struct._XGC** %normal_gc120, align 8
  %123 = load i64, i64* %color, align 8
  %call121 = call i32 @XSetForeground(%struct._XDisplay* %119, %struct._XGC* %122, i64 %123)
  %124 = load %struct.frame*, %struct.frame** %f, align 8
  %125 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data122 = getelementptr inbounds %struct.frame, %struct.frame* %125, i32 0, i32 62
  %x123 = bitcast %union.output_data* %output_data122 to %struct.x_output**
  %126 = load %struct.x_output*, %struct.x_output** %x123, align 8
  %normal_gc124 = getelementptr inbounds %struct.x_output, %struct.x_output* %126, i32 0, i32 6
  %127 = load %struct._XGC*, %struct._XGC** %normal_gc124, align 8
  %128 = load i32, i32* %x0.addr, align 4
  %129 = load i32, i32* %y0.addr, align 4
  %add125 = add nsw i32 %129, 1
  %130 = load i32, i32* %x1.addr, align 4
  %131 = load i32, i32* %x0.addr, align 4
  %sub126 = sub nsw i32 %130, %131
  %132 = load i32, i32* %y1.addr, align 4
  %133 = load i32, i32* %y0.addr, align 4
  %sub127 = sub nsw i32 %132, %133
  %sub128 = sub nsw i32 %sub127, 2
  call void @x_fill_rectangle(%struct.frame* %124, %struct._XGC* %127, i32 %128, i32 %add125, i32 %sub126, i32 %sub128)
  %134 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %135 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data129 = getelementptr inbounds %struct.frame, %struct.frame* %135, i32 0, i32 62
  %x130 = bitcast %union.output_data* %output_data129 to %struct.x_output**
  %136 = load %struct.x_output*, %struct.x_output** %x130, align 8
  %normal_gc131 = getelementptr inbounds %struct.x_output, %struct.x_output* %136, i32 0, i32 6
  %137 = load %struct._XGC*, %struct._XGC** %normal_gc131, align 8
  %138 = load i64, i64* %color_last, align 8
  %call132 = call i32 @XSetForeground(%struct._XDisplay* %134, %struct._XGC* %137, i64 %138)
  %139 = load %struct.frame*, %struct.frame** %f, align 8
  %140 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data133 = getelementptr inbounds %struct.frame, %struct.frame* %140, i32 0, i32 62
  %x134 = bitcast %union.output_data* %output_data133 to %struct.x_output**
  %141 = load %struct.x_output*, %struct.x_output** %x134, align 8
  %normal_gc135 = getelementptr inbounds %struct.x_output, %struct.x_output* %141, i32 0, i32 6
  %142 = load %struct._XGC*, %struct._XGC** %normal_gc135, align 8
  %143 = load i32, i32* %x0.addr, align 4
  %144 = load i32, i32* %y1.addr, align 4
  %sub136 = sub nsw i32 %144, 1
  %145 = load i32, i32* %x1.addr, align 4
  %146 = load i32, i32* %x0.addr, align 4
  %sub137 = sub nsw i32 %145, %146
  call void @x_fill_rectangle(%struct.frame* %139, %struct._XGC* %142, i32 %143, i32 %sub136, i32 %sub137, i32 1)
  br label %if.end

if.else.138:                                      ; preds = %land.lhs.true.105, %if.else
  %147 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %148 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data139 = getelementptr inbounds %struct.frame, %struct.frame* %148, i32 0, i32 62
  %x140 = bitcast %union.output_data* %output_data139 to %struct.x_output**
  %149 = load %struct.x_output*, %struct.x_output** %x140, align 8
  %normal_gc141 = getelementptr inbounds %struct.x_output, %struct.x_output* %149, i32 0, i32 6
  %150 = load %struct._XGC*, %struct._XGC** %normal_gc141, align 8
  %151 = load i64, i64* %color, align 8
  %call142 = call i32 @XSetForeground(%struct._XDisplay* %147, %struct._XGC* %150, i64 %151)
  %152 = load %struct.frame*, %struct.frame** %f, align 8
  %153 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data143 = getelementptr inbounds %struct.frame, %struct.frame* %153, i32 0, i32 62
  %x144 = bitcast %union.output_data* %output_data143 to %struct.x_output**
  %154 = load %struct.x_output*, %struct.x_output** %x144, align 8
  %normal_gc145 = getelementptr inbounds %struct.x_output, %struct.x_output* %154, i32 0, i32 6
  %155 = load %struct._XGC*, %struct._XGC** %normal_gc145, align 8
  %156 = load i32, i32* %x0.addr, align 4
  %157 = load i32, i32* %y0.addr, align 4
  %158 = load i32, i32* %x1.addr, align 4
  %159 = load i32, i32* %x0.addr, align 4
  %sub146 = sub nsw i32 %158, %159
  %160 = load i32, i32* %y1.addr, align 4
  %161 = load i32, i32* %y0.addr, align 4
  %sub147 = sub nsw i32 %160, %161
  call void @x_fill_rectangle(%struct.frame* %152, %struct._XGC* %155, i32 %156, i32 %157, i32 %sub146, i32 %sub147)
  br label %if.end

if.end:                                           ; preds = %if.else.138, %if.then.109
  br label %if.end.148

if.end.148:                                       ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_shift_glyphs_for_insert(%struct.frame* %f, i32 %x, i32 %y, i32 %width, i32 %height, i32 %shift_by) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %shift_by.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  store i32 %shift_by, i32* %shift_by.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %window_desc6 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 9
  %9 = load i64, i64* %window_desc6, align 8
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %normal_gc = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 6
  %12 = load %struct._XGC*, %struct._XGC** %normal_gc, align 8
  %13 = load i32, i32* %x.addr, align 4
  %14 = load i32, i32* %y.addr, align 4
  %15 = load i32, i32* %width.addr, align 4
  %16 = load i32, i32* %height.addr, align 4
  %17 = load i32, i32* %x.addr, align 4
  %18 = load i32, i32* %shift_by.addr, align 4
  %add = add nsw i32 %17, %18
  %19 = load i32, i32* %y.addr, align 4
  %call = call i32 @XCopyArea(%struct._XDisplay* %3, i64 %6, i64 %9, %struct._XGC* %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %add, i32 %19)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_show_hourglass(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %x1 = alloca %struct.x_output*, align 8
  %mask = alloca i64, align 8
  %attrs = alloca %struct.XSetWindowAttributes, align 8
  %parent = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %3, %struct._XDisplay** %dpy, align 8
  %4 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %tobool = icmp ne %struct._XDisplay* %4, null
  br i1 %tobool, label %if.then, label %if.end.37

if.then:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x3, align 8
  store %struct.x_output* %6, %struct.x_output** %x1, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 12
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool6 = icmp ne %struct._GtkWidget* %9, null
  br i1 %tobool6, label %cond.true, label %cond.false.22

cond.true:                                        ; preds = %if.then
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %widget9 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 12
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %widget9, align 8
  %tobool10 = icmp ne %struct._GtkWidget* %12, null
  br i1 %tobool10, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x12, align 8
  %widget13 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 12
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %widget13, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %15)
  %tobool14 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool14, label %cond.true.15, label %cond.false

cond.true.15:                                     ; preds = %land.lhs.true
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data16 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x17 = bitcast %union.output_data* %output_data16 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x17, align 8
  %widget18 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 12
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %widget18, align 8
  %call19 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %18)
  %call20 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call19)
  %tobool21 = icmp ne i64 %call20, 0
  br i1 %tobool21, label %if.then.26, label %if.end.36

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br i1 false, label %if.then.26, label %if.end.36

cond.false.22:                                    ; preds = %if.then
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 9
  %21 = load i64, i64* %window_desc, align 8
  %tobool25 = icmp ne i64 %21, 0
  br i1 %tobool25, label %if.then.26, label %if.end.36

if.then.26:                                       ; preds = %cond.false.22, %cond.false, %cond.true.15
  %22 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %hourglass_p = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 46
  %bf.load = load i8, i8* %hourglass_p, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %hourglass_p, align 8
  %23 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %hourglass_window = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 42
  %24 = load i64, i64* %hourglass_window, align 8
  %tobool27 = icmp ne i64 %24, 0
  br i1 %tobool27, label %if.end, label %if.then.28

if.then.28:                                       ; preds = %if.then.26
  store i64 16384, i64* %mask, align 8
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data29 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 62
  %x30 = bitcast %union.output_data* %output_data29 to %struct.x_output**
  %26 = load %struct.x_output*, %struct.x_output** %x30, align 8
  %window_desc31 = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 9
  %27 = load i64, i64* %window_desc31, align 8
  store i64 %27, i64* %parent, align 8
  %28 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %hourglass_cursor = getelementptr inbounds %struct.x_output, %struct.x_output* %28, i32 0, i32 38
  %29 = load i64, i64* %hourglass_cursor, align 8
  %cursor = getelementptr inbounds %struct.XSetWindowAttributes, %struct.XSetWindowAttributes* %attrs, i32 0, i32 14
  store i64 %29, i64* %cursor, align 8
  %30 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %31 = load i64, i64* %parent, align 8
  %32 = load i64, i64* %mask, align 8
  %call32 = call i64 @XCreateWindow(%struct._XDisplay* %30, i64 %31, i32 0, i32 0, i32 32000, i32 32000, i32 0, i32 0, i32 2, %struct.Visual* null, i64 %32, %struct.XSetWindowAttributes* %attrs)
  %33 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %hourglass_window33 = getelementptr inbounds %struct.x_output, %struct.x_output* %33, i32 0, i32 42
  store i64 %call32, i64* %hourglass_window33, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.28, %if.then.26
  %34 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %35 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %hourglass_window34 = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 42
  %36 = load i64, i64* %hourglass_window34, align 8
  %call35 = call i32 @XMapRaised(%struct._XDisplay* %34, i64 %36)
  br label %if.end.36

if.end.36:                                        ; preds = %if.end, %cond.false.22, %cond.false, %cond.true.15
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_hide_hourglass(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hourglass_window = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 42
  %3 = load i64, i64* %hourglass_window, align 8
  %tobool = icmp ne i64 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hourglass_window4 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 42
  %9 = load i64, i64* %hourglass_window4, align 8
  %call = call i32 @XUnmapWindow(%struct._XDisplay* %7, i64 %9)
  br label %do.body

do.body:                                          ; preds = %if.then
  call void @gdk_window_process_all_updates()
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %display_info7 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 44
  %12 = load %struct.x_display_info*, %struct.x_display_info** %display_info7, align 8
  %display8 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 2
  %13 = load %struct._XDisplay*, %struct._XDisplay** %display8, align 8
  %call9 = call i32 @XSync(%struct._XDisplay* %13, i32 0)
  br label %do.end

do.end:                                           ; preds = %do.body
  %14 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hourglass_p = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 46
  %bf.load = load i8, i8* %hourglass_p, align 8
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %hourglass_p, align 8
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  ret void
}

declare void @window_box(%struct.window*, i32, i32*, i32*, i32*, i32*) #1

declare void @x_clear_cursor(%struct.window*) #1

declare i32 @XCopyArea(%struct._XDisplay*, i64, i64, %struct._XGC*, i32, i32, i32, i32, i32, i32) #1

declare void @display_and_set_cursor(%struct.window*, i1 zeroext, i32, i32, i32, i32) #1

declare zeroext i1 @draw_window_fringes(%struct.window*, i1 zeroext) #1

declare void @x_draw_right_divider(%struct.window*) #1

declare void @x_draw_vertical_border(%struct.window*) #1

declare i32 @XFlush(%struct._XDisplay*) #1

; Function Attrs: nounwind uwtable
define internal void @x_clip_to_row(%struct.window* %w, %struct.glyph_row* %row, i32 %area, %struct._XGC* %gc) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %row.addr = alloca %struct.glyph_row*, align 8
  %area.addr = alloca i32, align 4
  %gc.addr = alloca %struct._XGC*, align 8
  %f = alloca %struct.frame*, align 8
  %clip_rect = alloca %struct.XRectangle, align 2
  %window_x = alloca i32, align 4
  %window_y = alloca i32, align 4
  %window_width = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store i32 %area, i32* %area.addr, align 4
  store %struct._XGC* %gc, %struct._XGC** %gc.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %5 = load i32, i32* %area.addr, align 4
  call void @window_box(%struct.window* %4, i32 %5, i32* %window_x, i32* %window_y, i32* %window_width, i32* null)
  %6 = load i32, i32* %window_x, align 4
  %conv = trunc i32 %6 to i16
  %x = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %clip_rect, i32 0, i32 0
  store i16 %conv, i16* %x, align 2
  %7 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %y = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %7, i32 0, i32 4
  %8 = load i32, i32* %y, align 4
  %cmp = icmp sgt i32 0, %8
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %y2 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %9, i32 0, i32 4
  %10 = load i32, i32* %y2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %10, %cond.false ]
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame3 = getelementptr inbounds %struct.window, %struct.window* %11, i32 0, i32 1
  %12 = load i64, i64* %frame3, align 8
  %sub4 = sub nsw i64 %12, 5
  %13 = inttoptr i64 %sub4 to i8*
  %14 = bitcast i8* %13 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 51
  %15 = load i32, i32* %internal_border_width, align 4
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 31
  %17 = load i32, i32* %pixel_top, align 4
  %add = add nsw i32 %15, %17
  %add5 = add nsw i32 %cond, %add
  %conv6 = trunc i32 %add5 to i16
  %y7 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %clip_rect, i32 0, i32 1
  store i16 %conv6, i16* %y7, align 2
  %y8 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %clip_rect, i32 0, i32 1
  %18 = load i16, i16* %y8, align 2
  %conv9 = sext i16 %18 to i32
  %19 = load i32, i32* %window_y, align 4
  %cmp10 = icmp sgt i32 %conv9, %19
  br i1 %cmp10, label %cond.true.12, label %cond.false.15

cond.true.12:                                     ; preds = %cond.end
  %y13 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %clip_rect, i32 0, i32 1
  %20 = load i16, i16* %y13, align 2
  %conv14 = sext i16 %20 to i32
  br label %cond.end.16

cond.false.15:                                    ; preds = %cond.end
  %21 = load i32, i32* %window_y, align 4
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.12
  %cond17 = phi i32 [ %conv14, %cond.true.12 ], [ %21, %cond.false.15 ]
  %conv18 = trunc i32 %cond17 to i16
  %y19 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %clip_rect, i32 0, i32 1
  store i16 %conv18, i16* %y19, align 2
  %22 = load i32, i32* %window_width, align 4
  %conv20 = trunc i32 %22 to i16
  %width = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %clip_rect, i32 0, i32 2
  store i16 %conv20, i16* %width, align 2
  %23 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %visible_height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 0, i32 10
  %24 = load i32, i32* %visible_height, align 4
  %conv21 = trunc i32 %24 to i16
  %height = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %clip_rect, i32 0, i32 3
  store i16 %conv21, i16* %height, align 2
  %25 = load %struct.frame*, %struct.frame** %f, align 8
  %26 = load %struct._XGC*, %struct._XGC** %gc.addr, align 8
  call void @x_set_clip_rectangles(%struct.frame* %25, %struct._XGC* %26, %struct.XRectangle* %clip_rect, i32 1)
  ret void
}

declare i32 @XSetFillStyle(%struct._XDisplay*, %struct._XGC*, i32) #1

declare i32 @XSetForeground(%struct._XDisplay*, %struct._XGC*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_fill_rectangle(%struct.frame* %f, %struct._XGC* %gc, i32 %x, i32 %y, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %gc.addr = alloca %struct._XGC*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XGC* %gc, %struct._XGC** %gc.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %7 = load %struct._XGC*, %struct._XGC** %gc.addr, align 8
  %8 = load i32, i32* %x.addr, align 4
  %9 = load i32, i32* %y.addr, align 4
  %10 = load i32, i32* %width.addr, align 4
  %11 = load i32, i32* %height.addr, align 4
  %call = call i32 @XFillRectangle(%struct._XDisplay* %3, i64 %6, %struct._XGC* %7, i32 %8, i32 %9, i32 %10, i32 %11)
  ret void
}

declare i32 @XChangeGC(%struct._XDisplay*, %struct._XGC*, i64, %struct.XGCValues*) #1

; Function Attrs: nounwind uwtable
define internal void @x_reset_clip_rectangles(%struct.frame* %f, %struct._XGC* %gc) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %gc.addr = alloca %struct._XGC*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XGC* %gc, %struct._XGC** %gc.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct._XGC*, %struct._XGC** %gc.addr, align 8
  %call = call i32 @XSetClipMask(%struct._XDisplay* %3, %struct._XGC* %4, i64 0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_set_clip_rectangles(%struct.frame* %f, %struct._XGC* %gc, %struct.XRectangle* %rectangles, i32 %n) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %gc.addr = alloca %struct._XGC*, align 8
  %rectangles.addr = alloca %struct.XRectangle*, align 8
  %n.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XGC* %gc, %struct._XGC** %gc.addr, align 8
  store %struct.XRectangle* %rectangles, %struct.XRectangle** %rectangles.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct._XGC*, %struct._XGC** %gc.addr, align 8
  %5 = load %struct.XRectangle*, %struct.XRectangle** %rectangles.addr, align 8
  %6 = load i32, i32* %n.addr, align 4
  %call = call i32 @XSetClipRectangles(%struct._XDisplay* %3, %struct._XGC* %4, i32 0, i32 0, %struct.XRectangle* %5, i32 %6, i32 0)
  ret void
}

declare i32 @XSetClipRectangles(%struct._XDisplay*, %struct._XGC*, i32, i32, %struct.XRectangle*, i32, i32) #1

declare i32 @XFillRectangle(%struct._XDisplay*, i64, %struct._XGC*, i32, i32, i32, i32) #1

declare i32 @XSetClipMask(%struct._XDisplay*, %struct._XGC*, i64) #1

declare i64 @composition_gstring_from_id(i64) #1

declare i32 @composition_gstring_width(i64, i64, i64, %struct.font_metrics*) #1

; Function Attrs: nounwind uwtable
define internal void @x_set_glyph_string_gc(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 17
  %3 = load %struct.face*, %struct.face** %face, align 8
  call void @prepare_face_for_display(%struct.frame* %1, %struct.face* %3)
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 16
  %5 = load i32, i32* %hl, align 4
  %cmp = icmp eq i32 %5, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 17
  %7 = load %struct.face*, %struct.face** %face1, align 8
  %gc = getelementptr inbounds %struct.face, %struct.face* %7, i32 0, i32 2
  %8 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 24
  store %struct._XGC* %8, %struct._XGC** %gc2, align 8
  %10 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %10, i32 0, i32 17
  %11 = load %struct.face*, %struct.face** %face3, align 8
  %stipple = getelementptr inbounds %struct.face, %struct.face* %11, i32 0, i32 3
  %12 = load i64, i64* %stipple, align 8
  %cmp4 = icmp ne i64 %12, 0
  %13 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %13, i32 0, i32 23
  %14 = zext i1 %cmp4 to i8
  %bf.load = load i8, i8* %stippled_p, align 8
  %bf.shl = shl i8 %14, 3
  %bf.clear = and i8 %bf.load, -9
  %bf.set = or i8 %bf.clear, %bf.shl
  store i8 %bf.set, i8* %stippled_p, align 8
  %tobool = trunc i8 %14 to i1
  br label %if.end.59

if.else:                                          ; preds = %entry
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 16
  %16 = load i32, i32* %hl5, align 4
  %cmp6 = icmp eq i32 %16, 1
  br i1 %cmp6, label %if.then.7, label %if.else.17

if.then.7:                                        ; preds = %if.else
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_mode_line_face_gc(%struct.glyph_string* %17)
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face8 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 17
  %19 = load %struct.face*, %struct.face** %face8, align 8
  %stipple9 = getelementptr inbounds %struct.face, %struct.face* %19, i32 0, i32 3
  %20 = load i64, i64* %stipple9, align 8
  %cmp10 = icmp ne i64 %20, 0
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p11 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 23
  %22 = zext i1 %cmp10 to i8
  %bf.load12 = load i8, i8* %stippled_p11, align 8
  %bf.shl13 = shl i8 %22, 3
  %bf.clear14 = and i8 %bf.load12, -9
  %bf.set15 = or i8 %bf.clear14, %bf.shl13
  store i8 %bf.set15, i8* %stippled_p11, align 8
  %tobool16 = trunc i8 %22 to i1
  br label %if.end.58

if.else.17:                                       ; preds = %if.else
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl18 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 16
  %24 = load i32, i32* %hl18, align 4
  %cmp19 = icmp eq i32 %24, 2
  br i1 %cmp19, label %if.then.20, label %if.else.24

if.then.20:                                       ; preds = %if.else.17
  %25 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_cursor_gc(%struct.glyph_string* %25)
  %26 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p21 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %26, i32 0, i32 23
  %bf.load22 = load i8, i8* %stippled_p21, align 8
  %bf.clear23 = and i8 %bf.load22, -9
  store i8 %bf.clear23, i8* %stippled_p21, align 8
  br label %if.end.57

if.else.24:                                       ; preds = %if.else.17
  %27 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl25 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %27, i32 0, i32 16
  %28 = load i32, i32* %hl25, align 4
  %cmp26 = icmp eq i32 %28, 3
  br i1 %cmp26, label %if.then.27, label %if.else.37

if.then.27:                                       ; preds = %if.else.24
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_mouse_face_gc(%struct.glyph_string* %29)
  %30 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face28 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %30, i32 0, i32 17
  %31 = load %struct.face*, %struct.face** %face28, align 8
  %stipple29 = getelementptr inbounds %struct.face, %struct.face* %31, i32 0, i32 3
  %32 = load i64, i64* %stipple29, align 8
  %cmp30 = icmp ne i64 %32, 0
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p31 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 23
  %34 = zext i1 %cmp30 to i8
  %bf.load32 = load i8, i8* %stippled_p31, align 8
  %bf.shl33 = shl i8 %34, 3
  %bf.clear34 = and i8 %bf.load32, -9
  %bf.set35 = or i8 %bf.clear34, %bf.shl33
  store i8 %bf.set35, i8* %stippled_p31, align 8
  %tobool36 = trunc i8 %34 to i1
  br label %if.end.56

if.else.37:                                       ; preds = %if.else.24
  %35 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl38 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %35, i32 0, i32 16
  %36 = load i32, i32* %hl38, align 4
  %cmp39 = icmp eq i32 %36, 4
  br i1 %cmp39, label %if.then.42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.37
  %37 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl40 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %37, i32 0, i32 16
  %38 = load i32, i32* %hl40, align 4
  %cmp41 = icmp eq i32 %38, 5
  br i1 %cmp41, label %if.then.42, label %if.else.55

if.then.42:                                       ; preds = %lor.lhs.false, %if.else.37
  %39 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face43 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %39, i32 0, i32 17
  %40 = load %struct.face*, %struct.face** %face43, align 8
  %gc44 = getelementptr inbounds %struct.face, %struct.face* %40, i32 0, i32 2
  %41 = load %struct._XGC*, %struct._XGC** %gc44, align 8
  %42 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc45 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %42, i32 0, i32 24
  store %struct._XGC* %41, %struct._XGC** %gc45, align 8
  %43 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face46 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %43, i32 0, i32 17
  %44 = load %struct.face*, %struct.face** %face46, align 8
  %stipple47 = getelementptr inbounds %struct.face, %struct.face* %44, i32 0, i32 3
  %45 = load i64, i64* %stipple47, align 8
  %cmp48 = icmp ne i64 %45, 0
  %46 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p49 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %46, i32 0, i32 23
  %47 = zext i1 %cmp48 to i8
  %bf.load50 = load i8, i8* %stippled_p49, align 8
  %bf.shl51 = shl i8 %47, 3
  %bf.clear52 = and i8 %bf.load50, -9
  %bf.set53 = or i8 %bf.clear52, %bf.shl51
  store i8 %bf.set53, i8* %stippled_p49, align 8
  %tobool54 = trunc i8 %47 to i1
  br label %if.end

if.else.55:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #10
  unreachable

if.end:                                           ; preds = %if.then.42
  br label %if.end.56

if.end.56:                                        ; preds = %if.end, %if.then.27
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.then.20
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.then.7
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_set_glyph_string_clipping(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %r = alloca %struct.XRectangle*, align 8
  %n = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %clip = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 31
  %arraydecay = getelementptr inbounds [2 x %struct.XRectangle], [2 x %struct.XRectangle]* %clip, i32 0, i32 0
  store %struct.XRectangle* %arraydecay, %struct.XRectangle** %r, align 8
  %1 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %2 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %call = call i32 @get_glyph_string_clip_rects(%struct.glyph_string* %1, %struct.XRectangle* %2, i32 2)
  store i32 %call, i32* %n, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 8
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 24
  %7 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %8 = load %struct.XRectangle*, %struct.XRectangle** %r, align 8
  %9 = load i32, i32* %n, align 4
  call void @x_set_clip_rectangles(%struct.frame* %5, %struct._XGC* %7, %struct.XRectangle* %8, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* %n, align 4
  %11 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %num_clips = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %11, i32 0, i32 32
  store i32 %10, i32* %num_clips, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_stretch_glyph_string(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %width = alloca i32, align 4
  %background_width = alloca i32, align 4
  %x = alloca i32, align 4
  %left_x = alloca i32, align 4
  %right_x = alloca i32, align 4
  %y30 = alloca i32, align 4
  %w32 = alloca i32, align 4
  %h = alloca i32, align 4
  %r = alloca %struct.XRectangle, align 2
  %gc = alloca %struct._XGC*, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %background_width84 = alloca i32, align 4
  %x86 = alloca i32, align 4
  %left_x88 = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 16
  %1 = load i32, i32* %hl, align 4
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %land.lhs.true, label %if.else.78

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 507), align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.else.78, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 4
  %4 = load i32, i32* %background_width1, align 4
  store i32 %4, i32* %background_width, align 4
  %5 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %5, i32 0, i32 0
  %6 = load i32, i32* %x2, align 4
  store i32 %6, i32* %x, align 4
  %7 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %row = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %7, i32 0, i32 12
  %8 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i32 0, i32 22
  %9 = bitcast i40* %reversed_p to i64*
  %bf.load = load i64, i64* %9, align 4
  %bf.lshr = lshr i64 %bf.load, 34
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %if.else, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %10 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %10, i32 0, i32 9
  %11 = load %struct.window*, %struct.window** %w, align 8
  %call = call i32 @window_box_left_offset(%struct.window* %11, i32 1)
  store i32 %call, i32* %left_x, align 4
  %12 = load i32, i32* %x, align 4
  %13 = load i32, i32* %left_x, align 4
  %cmp4 = icmp slt i32 %12, %13
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then.3
  %14 = load i32, i32* %left_x, align 4
  %15 = load i32, i32* %x, align 4
  %sub = sub nsw i32 %14, %15
  %16 = load i32, i32* %background_width, align 4
  %sub6 = sub nsw i32 %16, %sub
  store i32 %sub6, i32* %background_width, align 4
  %17 = load i32, i32* %left_x, align 4
  store i32 %17, i32* %x, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then.3
  br label %if.end.15

if.else:                                          ; preds = %if.then
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 9
  %19 = load %struct.window*, %struct.window** %w7, align 8
  %call8 = call i32 @window_box_right(%struct.window* %19, i32 1)
  store i32 %call8, i32* %right_x, align 4
  %20 = load i32, i32* %x, align 4
  %21 = load i32, i32* %background_width, align 4
  %add = add nsw i32 %20, %21
  %22 = load i32, i32* %right_x, align 4
  %cmp9 = icmp sgt i32 %add, %22
  br i1 %cmp9, label %if.then.10, label %if.end.13

if.then.10:                                       ; preds = %if.else
  %23 = load i32, i32* %x, align 4
  %24 = load i32, i32* %right_x, align 4
  %sub11 = sub nsw i32 %23, %24
  %25 = load i32, i32* %background_width, align 4
  %sub12 = sub nsw i32 %25, %sub11
  store i32 %sub12, i32* %background_width, align 4
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.10, %if.else
  %26 = load i32, i32* %background_width, align 4
  %27 = load i32, i32* %x, align 4
  %add14 = add nsw i32 %27, %26
  store i32 %add14, i32* %x, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.13, %if.end
  %28 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %28, i32 0, i32 8
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 59
  %30 = load i32, i32* %column_width, align 4
  %31 = load i32, i32* %background_width, align 4
  %cmp16 = icmp slt i32 %30, %31
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.15
  %32 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f17 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %32, i32 0, i32 8
  %33 = load %struct.frame*, %struct.frame** %f17, align 8
  %column_width18 = getelementptr inbounds %struct.frame, %struct.frame* %33, i32 0, i32 59
  %34 = load i32, i32* %column_width18, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.15
  %35 = load i32, i32* %background_width, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %34, %cond.true ], [ %35, %cond.false ]
  store i32 %cond, i32* %width, align 4
  %36 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %row19 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %36, i32 0, i32 12
  %37 = load %struct.glyph_row*, %struct.glyph_row** %row19, align 8
  %reversed_p20 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %37, i32 0, i32 22
  %38 = bitcast i40* %reversed_p20 to i64*
  %bf.load21 = load i64, i64* %38, align 4
  %bf.lshr22 = lshr i64 %bf.load21, 34
  %bf.clear23 = and i64 %bf.lshr22, 1
  %bf.cast24 = trunc i64 %bf.clear23 to i1
  br i1 %bf.cast24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %cond.end
  %39 = load i32, i32* %width, align 4
  %40 = load i32, i32* %x, align 4
  %sub26 = sub nsw i32 %40, %39
  store i32 %sub26, i32* %x, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.25, %cond.end
  %41 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %42 = load i32, i32* %x, align 4
  %43 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %43, i32 0, i32 1
  %44 = load i32, i32* %y, align 4
  %45 = load i32, i32* %width, align 4
  %46 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %46, i32 0, i32 5
  %47 = load i32, i32* %height, align 4
  call void @x_draw_glyph_string_bg_rect(%struct.glyph_string* %41, i32 %42, i32 %44, i32 %45, i32 %47)
  %48 = load i32, i32* %width, align 4
  %49 = load i32, i32* %background_width, align 4
  %cmp28 = icmp slt i32 %48, %49
  br i1 %cmp28, label %if.then.29, label %if.end.77

if.then.29:                                       ; preds = %if.end.27
  %50 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y31 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %50, i32 0, i32 1
  %51 = load i32, i32* %y31, align 4
  store i32 %51, i32* %y30, align 4
  %52 = load i32, i32* %background_width, align 4
  %53 = load i32, i32* %width, align 4
  %sub33 = sub nsw i32 %52, %53
  store i32 %sub33, i32* %w32, align 4
  %54 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height34 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %54, i32 0, i32 5
  %55 = load i32, i32* %height34, align 4
  store i32 %55, i32* %h, align 4
  %56 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %row35 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %56, i32 0, i32 12
  %57 = load %struct.glyph_row*, %struct.glyph_row** %row35, align 8
  %reversed_p36 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %57, i32 0, i32 22
  %58 = bitcast i40* %reversed_p36 to i64*
  %bf.load37 = load i64, i64* %58, align 4
  %bf.lshr38 = lshr i64 %bf.load37, 34
  %bf.clear39 = and i64 %bf.lshr38, 1
  %bf.cast40 = trunc i64 %bf.clear39 to i1
  br i1 %bf.cast40, label %if.else.43, label %if.then.41

if.then.41:                                       ; preds = %if.then.29
  %59 = load i32, i32* %width, align 4
  %60 = load i32, i32* %x, align 4
  %add42 = add nsw i32 %60, %59
  store i32 %add42, i32* %x, align 4
  br label %if.end.45

if.else.43:                                       ; preds = %if.then.29
  %61 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x44 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %61, i32 0, i32 0
  %62 = load i32, i32* %x44, align 4
  store i32 %62, i32* %x, align 4
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.43, %if.then.41
  %63 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %row46 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %63, i32 0, i32 12
  %64 = load %struct.glyph_row*, %struct.glyph_row** %row46, align 8
  %mouse_face_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %64, i32 0, i32 22
  %65 = bitcast i40* %mouse_face_p to i64*
  %bf.load47 = load i64, i64* %65, align 4
  %bf.lshr48 = lshr i64 %bf.load47, 25
  %bf.clear49 = and i64 %bf.lshr48, 1
  %bf.cast50 = trunc i64 %bf.clear49 to i1
  br i1 %bf.cast50, label %land.lhs.true.51, label %if.else.56

land.lhs.true.51:                                 ; preds = %if.end.45
  %66 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w52 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %66, i32 0, i32 9
  %67 = load %struct.window*, %struct.window** %w52, align 8
  %call53 = call zeroext i1 @cursor_in_mouse_face_p(%struct.window* %67)
  br i1 %call53, label %if.then.54, label %if.else.56

if.then.54:                                       ; preds = %land.lhs.true.51
  %68 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_mouse_face_gc(%struct.glyph_string* %68)
  %69 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc55 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %69, i32 0, i32 24
  %70 = load %struct._XGC*, %struct._XGC** %gc55, align 8
  store %struct._XGC* %70, %struct._XGC** %gc, align 8
  br label %if.end.58

if.else.56:                                       ; preds = %land.lhs.true.51, %if.end.45
  %71 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %71, i32 0, i32 17
  %72 = load %struct.face*, %struct.face** %face, align 8
  %gc57 = getelementptr inbounds %struct.face, %struct.face* %72, i32 0, i32 2
  %73 = load %struct._XGC*, %struct._XGC** %gc57, align 8
  store %struct._XGC* %73, %struct._XGC** %gc, align 8
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.56, %if.then.54
  %74 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @get_glyph_string_clip_rect(%struct.glyph_string* %74, %struct.XRectangle* %r)
  %75 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f59 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %75, i32 0, i32 8
  %76 = load %struct.frame*, %struct.frame** %f59, align 8
  %77 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_set_clip_rectangles(%struct.frame* %76, %struct._XGC* %77, %struct.XRectangle* %r, i32 1)
  %78 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face60 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %78, i32 0, i32 17
  %79 = load %struct.face*, %struct.face** %face60, align 8
  %stipple = getelementptr inbounds %struct.face, %struct.face* %79, i32 0, i32 3
  %80 = load i64, i64* %stipple, align 8
  %tobool61 = icmp ne i64 %80, 0
  br i1 %tobool61, label %if.then.62, label %if.else.67

if.then.62:                                       ; preds = %if.end.58
  %81 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %81, i32 0, i32 10
  %82 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %83 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call63 = call i32 @XSetFillStyle(%struct._XDisplay* %82, %struct._XGC* %83, i32 3)
  %84 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f64 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %84, i32 0, i32 8
  %85 = load %struct.frame*, %struct.frame** %f64, align 8
  %86 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %87 = load i32, i32* %x, align 4
  %88 = load i32, i32* %y30, align 4
  %89 = load i32, i32* %w32, align 4
  %90 = load i32, i32* %h, align 4
  call void @x_fill_rectangle(%struct.frame* %85, %struct._XGC* %86, i32 %87, i32 %88, i32 %89, i32 %90)
  %91 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display65 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %91, i32 0, i32 10
  %92 = load %struct._XDisplay*, %struct._XDisplay** %display65, align 8
  %93 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call66 = call i32 @XSetFillStyle(%struct._XDisplay* %92, %struct._XGC* %93, i32 0)
  br label %if.end.75

if.else.67:                                       ; preds = %if.end.58
  %94 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display68 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %94, i32 0, i32 10
  %95 = load %struct._XDisplay*, %struct._XDisplay** %display68, align 8
  %96 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call69 = call i32 @XGetGCValues(%struct._XDisplay* %95, %struct._XGC* %96, i64 12, %struct.XGCValues* %xgcv)
  %97 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display70 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %97, i32 0, i32 10
  %98 = load %struct._XDisplay*, %struct._XDisplay** %display70, align 8
  %99 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %background = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %100 = load i64, i64* %background, align 8
  %call71 = call i32 @XSetForeground(%struct._XDisplay* %98, %struct._XGC* %99, i64 %100)
  %101 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f72 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %101, i32 0, i32 8
  %102 = load %struct.frame*, %struct.frame** %f72, align 8
  %103 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %104 = load i32, i32* %x, align 4
  %105 = load i32, i32* %y30, align 4
  %106 = load i32, i32* %w32, align 4
  %107 = load i32, i32* %h, align 4
  call void @x_fill_rectangle(%struct.frame* %102, %struct._XGC* %103, i32 %104, i32 %105, i32 %106, i32 %107)
  %108 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display73 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %108, i32 0, i32 10
  %109 = load %struct._XDisplay*, %struct._XDisplay** %display73, align 8
  %110 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %foreground = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %111 = load i64, i64* %foreground, align 8
  %call74 = call i32 @XSetForeground(%struct._XDisplay* %109, %struct._XGC* %110, i64 %111)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.67, %if.then.62
  %112 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f76 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %112, i32 0, i32 8
  %113 = load %struct.frame*, %struct.frame** %f76, align 8
  %114 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %113, %struct._XGC* %114)
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.75, %if.end.27
  br label %if.end.108

if.else.78:                                       ; preds = %land.lhs.true, %entry
  %115 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %115, i32 0, i32 23
  %bf.load79 = load i8, i8* %background_filled_p, align 8
  %bf.lshr80 = lshr i8 %bf.load79, 1
  %bf.clear81 = and i8 %bf.lshr80, 1
  %bf.cast82 = trunc i8 %bf.clear81 to i1
  br i1 %bf.cast82, label %if.end.107, label %if.then.83

if.then.83:                                       ; preds = %if.else.78
  %116 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width85 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %116, i32 0, i32 4
  %117 = load i32, i32* %background_width85, align 4
  store i32 %117, i32* %background_width84, align 4
  %118 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x87 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %118, i32 0, i32 0
  %119 = load i32, i32* %x87, align 4
  store i32 %119, i32* %x86, align 4
  %120 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w89 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %120, i32 0, i32 9
  %121 = load %struct.window*, %struct.window** %w89, align 8
  %call90 = call i32 @window_box_left_offset(%struct.window* %121, i32 1)
  store i32 %call90, i32* %left_x88, align 4
  %122 = load i32, i32* %x86, align 4
  %123 = load i32, i32* %left_x88, align 4
  %cmp91 = icmp slt i32 %122, %123
  br i1 %cmp91, label %land.lhs.true.92, label %if.end.101

land.lhs.true.92:                                 ; preds = %if.then.83
  %124 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %row93 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %124, i32 0, i32 12
  %125 = load %struct.glyph_row*, %struct.glyph_row** %row93, align 8
  %mode_line_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %125, i32 0, i32 22
  %126 = bitcast i40* %mode_line_p to i64*
  %bf.load94 = load i64, i64* %126, align 4
  %bf.lshr95 = lshr i64 %bf.load94, 20
  %bf.clear96 = and i64 %bf.lshr95, 1
  %bf.cast97 = trunc i64 %bf.clear96 to i1
  br i1 %bf.cast97, label %if.end.101, label %if.then.98

if.then.98:                                       ; preds = %land.lhs.true.92
  %127 = load i32, i32* %left_x88, align 4
  %128 = load i32, i32* %x86, align 4
  %sub99 = sub nsw i32 %127, %128
  %129 = load i32, i32* %background_width84, align 4
  %sub100 = sub nsw i32 %129, %sub99
  store i32 %sub100, i32* %background_width84, align 4
  %130 = load i32, i32* %left_x88, align 4
  store i32 %130, i32* %x86, align 4
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.98, %land.lhs.true.92, %if.then.83
  %131 = load i32, i32* %background_width84, align 4
  %cmp102 = icmp sgt i32 %131, 0
  br i1 %cmp102, label %if.then.103, label %if.end.106

if.then.103:                                      ; preds = %if.end.101
  %132 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %133 = load i32, i32* %x86, align 4
  %134 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y104 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %134, i32 0, i32 1
  %135 = load i32, i32* %y104, align 4
  %136 = load i32, i32* %background_width84, align 4
  %137 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height105 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %137, i32 0, i32 5
  %138 = load i32, i32* %height105, align 4
  call void @x_draw_glyph_string_bg_rect(%struct.glyph_string* %132, i32 %133, i32 %135, i32 %136, i32 %138)
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.103, %if.end.101
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %if.else.78
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.end.77
  %139 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p109 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %139, i32 0, i32 23
  %bf.load110 = load i8, i8* %background_filled_p109, align 8
  %bf.clear111 = and i8 %bf.load110, -3
  %bf.set = or i8 %bf.clear111, 2
  store i8 %bf.set, i8* %background_filled_p109, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_glyph_string_background(%struct.glyph_string* %s, i1 zeroext %force_p) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %force_p.addr = alloca i8, align 1
  %box_line_width = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %frombool = zext i1 %force_p to i8
  store i8 %frombool, i8* %force_p.addr, align 1
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 23
  %bf.load = load i8, i8* %background_filled_p, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.53, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %1, i32 0, i32 17
  %2 = load %struct.face*, %struct.face** %face, align 8
  %box_line_width1 = getelementptr inbounds %struct.face, %struct.face* %2, i32 0, i32 12
  %3 = load i32, i32* %box_line_width1, align 4
  %cmp = icmp sgt i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 17
  %5 = load %struct.face*, %struct.face** %face2, align 8
  %box_line_width3 = getelementptr inbounds %struct.face, %struct.face* %5, i32 0, i32 12
  %6 = load i32, i32* %box_line_width3, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %box_line_width, align 4
  %7 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %7, i32 0, i32 23
  %bf.load4 = load i8, i8* %stippled_p, align 8
  %bf.lshr5 = lshr i8 %bf.load4, 3
  %bf.clear6 = and i8 %bf.lshr5, 1
  %bf.cast7 = trunc i8 %bf.clear6 to i1
  br i1 %bf.cast7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %cond.end
  %8 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 10
  %9 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %10 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %10, i32 0, i32 24
  %11 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call = call i32 @XSetFillStyle(%struct._XDisplay* %9, %struct._XGC* %11, i32 3)
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 8
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %14 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc9 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %14, i32 0, i32 24
  %15 = load %struct._XGC*, %struct._XGC** %gc9, align 8
  %16 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %16, i32 0, i32 0
  %17 = load i32, i32* %x, align 4
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 1
  %19 = load i32, i32* %y, align 4
  %20 = load i32, i32* %box_line_width, align 4
  %add = add nsw i32 %19, %20
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 4
  %22 = load i32, i32* %background_width, align 4
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 5
  %24 = load i32, i32* %height, align 4
  %25 = load i32, i32* %box_line_width, align 4
  %mul = mul nsw i32 2, %25
  %sub = sub nsw i32 %24, %mul
  call void @x_fill_rectangle(%struct.frame* %13, %struct._XGC* %15, i32 %17, i32 %add, i32 %22, i32 %sub)
  %26 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display10 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %26, i32 0, i32 10
  %27 = load %struct._XDisplay*, %struct._XDisplay** %display10, align 8
  %28 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc11 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %28, i32 0, i32 24
  %29 = load %struct._XGC*, %struct._XGC** %gc11, align 8
  %call12 = call i32 @XSetFillStyle(%struct._XDisplay* %27, %struct._XGC* %29, i32 0)
  %30 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p13 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %30, i32 0, i32 23
  %bf.load14 = load i8, i8* %background_filled_p13, align 8
  %bf.clear15 = and i8 %bf.load14, -3
  %bf.set = or i8 %bf.clear15, 2
  store i8 %bf.set, i8* %background_filled_p13, align 8
  br label %if.end.52

if.else:                                          ; preds = %cond.end
  %31 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %31, i32 0, i32 18
  %32 = load %struct.font*, %struct.font** %font, align 8
  %height16 = getelementptr inbounds %struct.font, %struct.font* %32, i32 0, i32 5
  %33 = load i32, i32* %height16, align 4
  %34 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height17 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %34, i32 0, i32 5
  %35 = load i32, i32* %height17, align 4
  %36 = load i32, i32* %box_line_width, align 4
  %mul18 = mul nsw i32 2, %36
  %sub19 = sub nsw i32 %35, %mul18
  %cmp20 = icmp slt i32 %33, %sub19
  br i1 %cmp20, label %if.then.40, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %37 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font21 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %37, i32 0, i32 18
  %38 = load %struct.font*, %struct.font** %font21, align 8
  %pixel_size = getelementptr inbounds %struct.font, %struct.font* %38, i32 0, i32 4
  %39 = load i32, i32* %pixel_size, align 4
  %cmp22 = icmp sgt i32 %39, 0
  br i1 %cmp22, label %land.lhs.true, label %lor.lhs.false.30

land.lhs.true:                                    ; preds = %lor.lhs.false
  %40 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font23 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %40, i32 0, i32 18
  %41 = load %struct.font*, %struct.font** %font23, align 8
  %ascent = getelementptr inbounds %struct.font, %struct.font* %41, i32 0, i32 8
  %42 = load i32, i32* %ascent, align 4
  %43 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font24 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %43, i32 0, i32 18
  %44 = load %struct.font*, %struct.font** %font24, align 8
  %descent = getelementptr inbounds %struct.font, %struct.font* %44, i32 0, i32 9
  %45 = load i32, i32* %descent, align 4
  %add25 = add nsw i32 %42, %45
  %46 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font26 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %46, i32 0, i32 18
  %47 = load %struct.font*, %struct.font** %font26, align 8
  %pixel_size27 = getelementptr inbounds %struct.font, %struct.font* %47, i32 0, i32 4
  %48 = load i32, i32* %pixel_size27, align 4
  %mul28 = mul nsw i32 3, %48
  %cmp29 = icmp sgt i32 %add25, %mul28
  br i1 %cmp29, label %if.then.40, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %land.lhs.true, %lor.lhs.false
  %49 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font_not_found_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %49, i32 0, i32 23
  %bf.load31 = load i8, i8* %font_not_found_p, align 8
  %bf.lshr32 = lshr i8 %bf.load31, 2
  %bf.clear33 = and i8 %bf.lshr32, 1
  %bf.cast34 = trunc i8 %bf.clear33 to i1
  br i1 %bf.cast34, label %if.then.40, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %lor.lhs.false.30
  %50 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %extends_to_end_of_line_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %50, i32 0, i32 23
  %bf.load36 = load i8, i8* %extends_to_end_of_line_p, align 8
  %bf.clear37 = and i8 %bf.load36, 1
  %bf.cast38 = trunc i8 %bf.clear37 to i1
  br i1 %bf.cast38, label %if.then.40, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.35
  %51 = load i8, i8* %force_p.addr, align 1
  %tobool = trunc i8 %51 to i1
  br i1 %tobool, label %if.then.40, label %if.end

if.then.40:                                       ; preds = %lor.lhs.false.39, %lor.lhs.false.35, %lor.lhs.false.30, %land.lhs.true, %if.else
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %53 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x41 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %53, i32 0, i32 0
  %54 = load i32, i32* %x41, align 4
  %55 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y42 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %55, i32 0, i32 1
  %56 = load i32, i32* %y42, align 4
  %57 = load i32, i32* %box_line_width, align 4
  %add43 = add nsw i32 %56, %57
  %58 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width44 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %58, i32 0, i32 4
  %59 = load i32, i32* %background_width44, align 4
  %60 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height45 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %60, i32 0, i32 5
  %61 = load i32, i32* %height45, align 4
  %62 = load i32, i32* %box_line_width, align 4
  %mul46 = mul nsw i32 2, %62
  %sub47 = sub nsw i32 %61, %mul46
  call void @x_clear_glyph_string_rect(%struct.glyph_string* %52, i32 %54, i32 %add43, i32 %59, i32 %sub47)
  %63 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p48 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %63, i32 0, i32 23
  %bf.load49 = load i8, i8* %background_filled_p48, align 8
  %bf.clear50 = and i8 %bf.load49, -3
  %bf.set51 = or i8 %bf.clear50, 2
  store i8 %bf.set51, i8* %background_filled_p48, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.40, %lor.lhs.false.39
  br label %if.end.52

if.end.52:                                        ; preds = %if.end, %if.then.8
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_glyph_string_box(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %width = alloca i32, align 4
  %left_x = alloca i32, align 4
  %right_x = alloca i32, align 4
  %top_y = alloca i32, align 4
  %bottom_y = alloca i32, align 4
  %last_x = alloca i32, align 4
  %raised_p = alloca i8, align 1
  %left_p = alloca i8, align 1
  %right_p = alloca i8, align 1
  %last_glyph = alloca %struct.glyph*, align 8
  %clip_rect = alloca %struct.XRectangle, align 2
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %row = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 12
  %1 = load %struct.glyph_row*, %struct.glyph_row** %row, align 8
  %full_width_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %1, i32 0, i32 22
  %2 = bitcast i40* %full_width_p to i64*
  %bf.load = load i64, i64* %2, align 4
  %bf.lshr = lshr i64 %bf.load, 19
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 9
  %4 = load %struct.window*, %struct.window** %w, align 8
  %pseudo_window_p = getelementptr inbounds %struct.window, %struct.window* %4, i32 0, i32 67
  %bf.load1 = load i16, i16* %pseudo_window_p, align 4
  %bf.lshr2 = lshr i16 %bf.load1, 11
  %bf.clear3 = and i16 %bf.lshr2, 1
  %bf.cast4 = trunc i16 %bf.clear3 to i1
  br i1 %bf.cast4, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  %5 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %5, i32 0, i32 9
  %6 = load %struct.window*, %struct.window** %w5, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %6, i32 0, i32 1
  %7 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 51
  %10 = load i32, i32* %internal_border_width, align 4
  %11 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %11, i32 0, i32 9
  %12 = load %struct.window*, %struct.window** %w6, align 8
  %pixel_left = getelementptr inbounds %struct.window, %struct.window* %12, i32 0, i32 30
  %13 = load i32, i32* %pixel_left, align 4
  %14 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %14, i32 0, i32 9
  %15 = load %struct.window*, %struct.window** %w7, align 8
  %pixel_width = getelementptr inbounds %struct.window, %struct.window* %15, i32 0, i32 34
  %16 = load i32, i32* %pixel_width, align 4
  %add = add nsw i32 %13, %16
  %add8 = add nsw i32 %10, %add
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %w9 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 9
  %18 = load %struct.window*, %struct.window** %w9, align 8
  %19 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %area = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %19, i32 0, i32 13
  %20 = load i32, i32* %area, align 4
  %call = call i32 @window_box_right(%struct.window* %18, i32 %20)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add8, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %last_x, align 4
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 19
  %22 = load %struct.composition*, %struct.composition** %cmp, align 8
  %tobool = icmp ne %struct.composition* %22, null
  br i1 %tobool, label %cond.true.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 26
  %24 = load %struct.image*, %struct.image** %img, align 8
  %tobool10 = icmp ne %struct.image* %24, null
  br i1 %tobool10, label %cond.true.11, label %cond.false.12

cond.true.11:                                     ; preds = %lor.lhs.false, %cond.end
  %25 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %25, i32 0, i32 25
  %26 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  br label %cond.end.15

cond.false.12:                                    ; preds = %lor.lhs.false
  %27 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph13 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %27, i32 0, i32 25
  %28 = load %struct.glyph*, %struct.glyph** %first_glyph13, align 8
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %29, i32 0, i32 15
  %30 = load i32, i32* %nchars, align 4
  %idx.ext = sext i32 %30 to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %28, i64 %idx.ext
  %add.ptr14 = getelementptr inbounds %struct.glyph, %struct.glyph* %add.ptr, i64 -1
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.false.12, %cond.true.11
  %cond16 = phi %struct.glyph* [ %26, %cond.true.11 ], [ %add.ptr14, %cond.false.12 ]
  store %struct.glyph* %cond16, %struct.glyph** %last_glyph, align 8
  %31 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %31, i32 0, i32 17
  %32 = load %struct.face*, %struct.face** %face, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %32, i32 0, i32 12
  %33 = load i32, i32* %box_line_width, align 4
  %cmp17 = icmp slt i32 %33, 0
  br i1 %cmp17, label %cond.true.18, label %cond.false.22

cond.true.18:                                     ; preds = %cond.end.15
  %34 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face19 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %34, i32 0, i32 17
  %35 = load %struct.face*, %struct.face** %face19, align 8
  %box_line_width20 = getelementptr inbounds %struct.face, %struct.face* %35, i32 0, i32 12
  %36 = load i32, i32* %box_line_width20, align 4
  %sub21 = sub nsw i32 0, %36
  br label %cond.end.25

cond.false.22:                                    ; preds = %cond.end.15
  %37 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face23 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %37, i32 0, i32 17
  %38 = load %struct.face*, %struct.face** %face23, align 8
  %box_line_width24 = getelementptr inbounds %struct.face, %struct.face* %38, i32 0, i32 12
  %39 = load i32, i32* %box_line_width24, align 4
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.false.22, %cond.true.18
  %cond26 = phi i32 [ %sub21, %cond.true.18 ], [ %39, %cond.false.22 ]
  store i32 %cond26, i32* %width, align 4
  %40 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face27 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %40, i32 0, i32 17
  %41 = load %struct.face*, %struct.face** %face27, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %41, i32 0, i32 13
  %42 = bitcast i24* %box to i32*
  %bf.load28 = load i32, i32* %42, align 8
  %bf.clear29 = and i32 %bf.load28, 3
  %cmp30 = icmp eq i32 %bf.clear29, 2
  %frombool = zext i1 %cmp30 to i8
  store i8 %frombool, i8* %raised_p, align 1
  %43 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %43, i32 0, i32 0
  %44 = load i32, i32* %x, align 4
  store i32 %44, i32* %left_x, align 4
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %row31 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 12
  %46 = load %struct.glyph_row*, %struct.glyph_row** %row31, align 8
  %full_width_p32 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %46, i32 0, i32 22
  %47 = bitcast i40* %full_width_p32 to i64*
  %bf.load33 = load i64, i64* %47, align 4
  %bf.lshr34 = lshr i64 %bf.load33, 19
  %bf.clear35 = and i64 %bf.lshr34, 1
  %bf.cast36 = trunc i64 %bf.clear35 to i1
  br i1 %bf.cast36, label %land.lhs.true.37, label %cond.false.43

land.lhs.true.37:                                 ; preds = %cond.end.25
  %48 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %extends_to_end_of_line_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %48, i32 0, i32 23
  %bf.load38 = load i8, i8* %extends_to_end_of_line_p, align 8
  %bf.clear39 = and i8 %bf.load38, 1
  %bf.cast40 = trunc i8 %bf.clear39 to i1
  br i1 %bf.cast40, label %cond.true.41, label %cond.false.43

cond.true.41:                                     ; preds = %land.lhs.true.37
  %49 = load i32, i32* %last_x, align 4
  %sub42 = sub nsw i32 %49, 1
  br label %cond.end.55

cond.false.43:                                    ; preds = %land.lhs.true.37, %cond.end.25
  %50 = load i32, i32* %last_x, align 4
  %51 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x44 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %51, i32 0, i32 0
  %52 = load i32, i32* %x44, align 4
  %53 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %53, i32 0, i32 4
  %54 = load i32, i32* %background_width, align 4
  %add45 = add nsw i32 %52, %54
  %cmp46 = icmp slt i32 %50, %add45
  br i1 %cmp46, label %cond.true.47, label %cond.false.48

cond.true.47:                                     ; preds = %cond.false.43
  %55 = load i32, i32* %last_x, align 4
  br label %cond.end.52

cond.false.48:                                    ; preds = %cond.false.43
  %56 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x49 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %56, i32 0, i32 0
  %57 = load i32, i32* %x49, align 4
  %58 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width50 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %58, i32 0, i32 4
  %59 = load i32, i32* %background_width50, align 4
  %add51 = add nsw i32 %57, %59
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.false.48, %cond.true.47
  %cond53 = phi i32 [ %55, %cond.true.47 ], [ %add51, %cond.false.48 ]
  %sub54 = sub nsw i32 %cond53, 1
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.end.52, %cond.true.41
  %cond56 = phi i32 [ %sub42, %cond.true.41 ], [ %sub54, %cond.end.52 ]
  store i32 %cond56, i32* %right_x, align 4
  %60 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %60, i32 0, i32 1
  %61 = load i32, i32* %y, align 4
  store i32 %61, i32* %top_y, align 4
  %62 = load i32, i32* %top_y, align 4
  %63 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %63, i32 0, i32 5
  %64 = load i32, i32* %height, align 4
  %add57 = add nsw i32 %62, %64
  %sub58 = sub nsw i32 %add57, 1
  store i32 %sub58, i32* %bottom_y, align 4
  %65 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph59 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %65, i32 0, i32 25
  %66 = load %struct.glyph*, %struct.glyph** %first_glyph59, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %66, i32 0, i32 6
  %67 = bitcast i24* %left_box_line_p to i32*
  %bf.load60 = load i32, i32* %67, align 8
  %bf.lshr61 = lshr i32 %bf.load60, 4
  %bf.clear62 = and i32 %bf.lshr61, 1
  %bf.cast63 = trunc i32 %bf.clear62 to i1
  br i1 %bf.cast63, label %lor.end.71, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end.55
  %68 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %68, i32 0, i32 16
  %69 = load i32, i32* %hl, align 4
  %cmp64 = icmp eq i32 %69, 3
  br i1 %cmp64, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %70 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %70, i32 0, i32 36
  %71 = load %struct.glyph_string*, %struct.glyph_string** %prev, align 8
  %cmp65 = icmp eq %struct.glyph_string* %71, null
  br i1 %cmp65, label %lor.end, label %lor.rhs.66

lor.rhs.66:                                       ; preds = %land.rhs
  %72 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %prev67 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %72, i32 0, i32 36
  %73 = load %struct.glyph_string*, %struct.glyph_string** %prev67, align 8
  %hl68 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %73, i32 0, i32 16
  %74 = load i32, i32* %hl68, align 4
  %75 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl69 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %75, i32 0, i32 16
  %76 = load i32, i32* %hl69, align 4
  %cmp70 = icmp ne i32 %74, %76
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs.66, %land.rhs
  %77 = phi i1 [ true, %land.rhs ], [ %cmp70, %lor.rhs.66 ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.rhs
  %78 = phi i1 [ false, %lor.rhs ], [ %77, %lor.end ]
  br label %lor.end.71

lor.end.71:                                       ; preds = %land.end, %cond.end.55
  %79 = phi i1 [ true, %cond.end.55 ], [ %78, %land.end ]
  %frombool72 = zext i1 %79 to i8
  store i8 %frombool72, i8* %left_p, align 1
  %80 = load %struct.glyph*, %struct.glyph** %last_glyph, align 8
  %right_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %80, i32 0, i32 6
  %81 = bitcast i24* %right_box_line_p to i32*
  %bf.load73 = load i32, i32* %81, align 8
  %bf.lshr74 = lshr i32 %bf.load73, 5
  %bf.clear75 = and i32 %bf.lshr74, 1
  %bf.cast76 = trunc i32 %bf.clear75 to i1
  br i1 %bf.cast76, label %lor.end.89, label %lor.rhs.77

lor.rhs.77:                                       ; preds = %lor.end.71
  %82 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl78 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %82, i32 0, i32 16
  %83 = load i32, i32* %hl78, align 4
  %cmp79 = icmp eq i32 %83, 3
  br i1 %cmp79, label %land.rhs.80, label %land.end.88

land.rhs.80:                                      ; preds = %lor.rhs.77
  %84 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %84, i32 0, i32 35
  %85 = load %struct.glyph_string*, %struct.glyph_string** %next, align 8
  %cmp81 = icmp eq %struct.glyph_string* %85, null
  br i1 %cmp81, label %lor.end.87, label %lor.rhs.82

lor.rhs.82:                                       ; preds = %land.rhs.80
  %86 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %next83 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %86, i32 0, i32 35
  %87 = load %struct.glyph_string*, %struct.glyph_string** %next83, align 8
  %hl84 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %87, i32 0, i32 16
  %88 = load i32, i32* %hl84, align 4
  %89 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl85 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %89, i32 0, i32 16
  %90 = load i32, i32* %hl85, align 4
  %cmp86 = icmp ne i32 %88, %90
  br label %lor.end.87

lor.end.87:                                       ; preds = %lor.rhs.82, %land.rhs.80
  %91 = phi i1 [ true, %land.rhs.80 ], [ %cmp86, %lor.rhs.82 ]
  br label %land.end.88

land.end.88:                                      ; preds = %lor.end.87, %lor.rhs.77
  %92 = phi i1 [ false, %lor.rhs.77 ], [ %91, %lor.end.87 ]
  br label %lor.end.89

lor.end.89:                                       ; preds = %land.end.88, %lor.end.71
  %93 = phi i1 [ true, %lor.end.71 ], [ %92, %land.end.88 ]
  %frombool90 = zext i1 %93 to i8
  store i8 %frombool90, i8* %right_p, align 1
  %94 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @get_glyph_string_clip_rect(%struct.glyph_string* %94, %struct.XRectangle* %clip_rect)
  %95 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face91 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %95, i32 0, i32 17
  %96 = load %struct.face*, %struct.face** %face91, align 8
  %box92 = getelementptr inbounds %struct.face, %struct.face* %96, i32 0, i32 13
  %97 = bitcast i24* %box92 to i32*
  %bf.load93 = load i32, i32* %97, align 8
  %bf.clear94 = and i32 %bf.load93, 3
  %cmp95 = icmp eq i32 %bf.clear94, 1
  br i1 %cmp95, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end.89
  %98 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %99 = load i32, i32* %left_x, align 4
  %100 = load i32, i32* %top_y, align 4
  %101 = load i32, i32* %right_x, align 4
  %102 = load i32, i32* %bottom_y, align 4
  %103 = load i32, i32* %width, align 4
  %104 = load i8, i8* %left_p, align 1
  %tobool96 = trunc i8 %104 to i1
  %105 = load i8, i8* %right_p, align 1
  %tobool97 = trunc i8 %105 to i1
  call void @x_draw_box_rect(%struct.glyph_string* %98, i32 %99, i32 %100, i32 %101, i32 %102, i32 %103, i1 zeroext %tobool96, i1 zeroext %tobool97, %struct.XRectangle* %clip_rect)
  br label %if.end

if.else:                                          ; preds = %lor.end.89
  %106 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_setup_relief_colors(%struct.glyph_string* %106)
  %107 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %107, i32 0, i32 8
  %108 = load %struct.frame*, %struct.frame** %f, align 8
  %109 = load i32, i32* %left_x, align 4
  %110 = load i32, i32* %top_y, align 4
  %111 = load i32, i32* %right_x, align 4
  %112 = load i32, i32* %bottom_y, align 4
  %113 = load i32, i32* %width, align 4
  %114 = load i8, i8* %raised_p, align 1
  %tobool98 = trunc i8 %114 to i1
  %115 = load i8, i8* %left_p, align 1
  %tobool99 = trunc i8 %115 to i1
  %116 = load i8, i8* %right_p, align 1
  %tobool100 = trunc i8 %116 to i1
  call void @x_draw_relief_rect(%struct.frame* %108, i32 %109, i32 %110, i32 %111, i32 %112, i32 %113, i1 zeroext %tobool98, i1 zeroext true, i1 zeroext true, i1 zeroext %tobool99, i1 zeroext %tobool100, %struct.XRectangle* %clip_rect)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_set_glyph_string_clipping_exactly(%struct.glyph_string* %src, %struct.glyph_string* %dst) #0 {
entry:
  %src.addr = alloca %struct.glyph_string*, align 8
  %dst.addr = alloca %struct.glyph_string*, align 8
  %r = alloca %struct.XRectangle, align 2
  store %struct.glyph_string* %src, %struct.glyph_string** %src.addr, align 8
  store %struct.glyph_string* %dst, %struct.glyph_string** %dst.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %src.addr, align 8
  %x = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %conv = trunc i32 %1 to i16
  %x1 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 0
  store i16 %conv, i16* %x1, align 2
  %2 = load %struct.glyph_string*, %struct.glyph_string** %src.addr, align 8
  %width = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 3
  %3 = load i32, i32* %width, align 4
  %conv2 = trunc i32 %3 to i16
  %width3 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 2
  store i16 %conv2, i16* %width3, align 2
  %4 = load %struct.glyph_string*, %struct.glyph_string** %src.addr, align 8
  %y = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %conv4 = trunc i32 %5 to i16
  %y5 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 1
  store i16 %conv4, i16* %y5, align 2
  %6 = load %struct.glyph_string*, %struct.glyph_string** %src.addr, align 8
  %height = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 5
  %7 = load i32, i32* %height, align 4
  %conv6 = trunc i32 %7 to i16
  %height7 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 3
  store i16 %conv6, i16* %height7, align 2
  %8 = load %struct.glyph_string*, %struct.glyph_string** %dst.addr, align 8
  %clip = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 31
  %arrayidx = getelementptr inbounds [2 x %struct.XRectangle], [2 x %struct.XRectangle]* %clip, i32 0, i64 0
  %9 = bitcast %struct.XRectangle* %arrayidx to i8*
  %10 = bitcast %struct.XRectangle* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 2, i1 false)
  %11 = load %struct.glyph_string*, %struct.glyph_string** %dst.addr, align 8
  %num_clips = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %11, i32 0, i32 32
  store i32 1, i32* %num_clips, align 4
  %12 = load %struct.glyph_string*, %struct.glyph_string** %dst.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 8
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %14 = load %struct.glyph_string*, %struct.glyph_string** %dst.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %14, i32 0, i32 24
  %15 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_set_clip_rectangles(%struct.frame* %13, %struct._XGC* %15, %struct.XRectangle* %r, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_image_glyph_string(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %box_line_hwidth = alloca i32, align 4
  %box_line_vwidth = alloca i32, align 4
  %height = alloca i32, align 4
  %pixmap = alloca i64, align 8
  %screen = alloca %struct.Screen*, align 8
  %depth = alloca i32, align 4
  %xgcv = alloca %struct.XGCValues, align 8
  %x106 = alloca i32, align 4
  %y108 = alloca i32, align 4
  %width110 = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 17
  %1 = load %struct.face*, %struct.face** %face, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %1, i32 0, i32 12
  %2 = load i32, i32* %box_line_width, align 4
  %cmp = icmp slt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 17
  %4 = load %struct.face*, %struct.face** %face1, align 8
  %box_line_width2 = getelementptr inbounds %struct.face, %struct.face* %4, i32 0, i32 12
  %5 = load i32, i32* %box_line_width2, align 4
  %sub = sub nsw i32 0, %5
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 17
  %7 = load %struct.face*, %struct.face** %face3, align 8
  %box_line_width4 = getelementptr inbounds %struct.face, %struct.face* %7, i32 0, i32 12
  %8 = load i32, i32* %box_line_width4, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %8, %cond.false ]
  store i32 %cond, i32* %box_line_hwidth, align 4
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 17
  %10 = load %struct.face*, %struct.face** %face5, align 8
  %box_line_width6 = getelementptr inbounds %struct.face, %struct.face* %10, i32 0, i32 12
  %11 = load i32, i32* %box_line_width6, align 4
  %cmp7 = icmp sgt i32 %11, 0
  br i1 %cmp7, label %cond.true.8, label %cond.false.11

cond.true.8:                                      ; preds = %cond.end
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face9 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 17
  %13 = load %struct.face*, %struct.face** %face9, align 8
  %box_line_width10 = getelementptr inbounds %struct.face, %struct.face* %13, i32 0, i32 12
  %14 = load i32, i32* %box_line_width10, align 4
  br label %cond.end.12

cond.false.11:                                    ; preds = %cond.end
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.8
  %cond13 = phi i32 [ %14, %cond.true.8 ], [ 0, %cond.false.11 ]
  store i32 %cond13, i32* %box_line_vwidth, align 4
  store i64 0, i64* %pixmap, align 8
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height14 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 5
  %16 = load i32, i32* %height14, align 4
  store i32 %16, i32* %height, align 4
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 28
  %18 = bitcast %struct.glyph_slice* %slice to i64*
  %bf.load = load i64, i64* %18, align 4
  %bf.lshr = lshr i64 %bf.load, 16
  %bf.clear = and i64 %bf.lshr, 65535
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp15 = icmp eq i32 %bf.cast, 0
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.12
  %19 = load i32, i32* %box_line_vwidth, align 4
  %20 = load i32, i32* %height, align 4
  %sub16 = sub nsw i32 %20, %19
  store i32 %sub16, i32* %height, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.12
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice17 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 28
  %22 = bitcast %struct.glyph_slice* %slice17 to i64*
  %bf.load18 = load i64, i64* %22, align 4
  %bf.lshr19 = lshr i64 %bf.load18, 16
  %bf.clear20 = and i64 %bf.lshr19, 65535
  %bf.cast21 = trunc i64 %bf.clear20 to i32
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice22 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 28
  %24 = bitcast %struct.glyph_slice* %slice22 to i64*
  %bf.load23 = load i64, i64* %24, align 4
  %bf.lshr24 = lshr i64 %bf.load23, 48
  %bf.cast25 = trunc i64 %bf.lshr24 to i32
  %add = add nsw i32 %bf.cast21, %bf.cast25
  %25 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %25, i32 0, i32 26
  %26 = load %struct.image*, %struct.image** %img, align 8
  %height26 = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 12
  %27 = load i32, i32* %height26, align 4
  %cmp27 = icmp sge i32 %add, %27
  br i1 %cmp27, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %if.end
  %28 = load i32, i32* %box_line_vwidth, align 4
  %29 = load i32, i32* %height, align 4
  %sub29 = sub nsw i32 %29, %28
  store i32 %sub29, i32* %height, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %if.end
  %30 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face31 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %30, i32 0, i32 17
  %31 = load %struct.face*, %struct.face** %face31, align 8
  %stipple = getelementptr inbounds %struct.face, %struct.face* %31, i32 0, i32 3
  %32 = load i64, i64* %stipple, align 8
  %cmp32 = icmp ne i64 %32, 0
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 23
  %34 = zext i1 %cmp32 to i8
  %bf.load33 = load i8, i8* %stippled_p, align 8
  %bf.shl = shl i8 %34, 3
  %bf.clear34 = and i8 %bf.load33, -9
  %bf.set = or i8 %bf.clear34, %bf.shl
  store i8 %bf.set, i8* %stippled_p, align 8
  %tobool = trunc i8 %34 to i1
  %35 = load i32, i32* %height, align 4
  %36 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice35 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %36, i32 0, i32 28
  %37 = bitcast %struct.glyph_slice* %slice35 to i64*
  %bf.load36 = load i64, i64* %37, align 4
  %bf.lshr37 = lshr i64 %bf.load36, 48
  %bf.cast38 = trunc i64 %bf.lshr37 to i32
  %cmp39 = icmp sgt i32 %35, %bf.cast38
  br i1 %cmp39, label %if.then.54, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %38 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img40 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %38, i32 0, i32 26
  %39 = load %struct.image*, %struct.image** %img40, align 8
  %hmargin = getelementptr inbounds %struct.image, %struct.image* %39, i32 0, i32 18
  %40 = load i32, i32* %hmargin, align 4
  %tobool41 = icmp ne i32 %40, 0
  br i1 %tobool41, label %if.then.54, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %lor.lhs.false
  %41 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img43 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %41, i32 0, i32 26
  %42 = load %struct.image*, %struct.image** %img43, align 8
  %vmargin = getelementptr inbounds %struct.image, %struct.image* %42, i32 0, i32 19
  %43 = load i32, i32* %vmargin, align 4
  %tobool44 = icmp ne i32 %43, 0
  br i1 %tobool44, label %if.then.54, label %lor.lhs.false.45

lor.lhs.false.45:                                 ; preds = %lor.lhs.false.42
  %44 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img46 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %44, i32 0, i32 26
  %45 = load %struct.image*, %struct.image** %img46, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %45, i32 0, i32 2
  %46 = load i64, i64* %mask, align 8
  %tobool47 = icmp ne i64 %46, 0
  br i1 %tobool47, label %if.then.54, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %lor.lhs.false.45
  %47 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img49 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %47, i32 0, i32 26
  %48 = load %struct.image*, %struct.image** %img49, align 8
  %pixmap50 = getelementptr inbounds %struct.image, %struct.image* %48, i32 0, i32 1
  %49 = load i64, i64* %pixmap50, align 8
  %cmp51 = icmp eq i64 %49, 0
  br i1 %cmp51, label %if.then.54, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.48
  %50 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %50, i32 0, i32 3
  %51 = load i32, i32* %width, align 4
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %52, i32 0, i32 4
  %53 = load i32, i32* %background_width, align 4
  %cmp53 = icmp ne i32 %51, %53
  br i1 %cmp53, label %if.then.54, label %if.end.138

if.then.54:                                       ; preds = %lor.lhs.false.52, %lor.lhs.false.48, %lor.lhs.false.45, %lor.lhs.false.42, %lor.lhs.false, %if.end.30
  %54 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img55 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %54, i32 0, i32 26
  %55 = load %struct.image*, %struct.image** %img55, align 8
  %mask56 = getelementptr inbounds %struct.image, %struct.image* %55, i32 0, i32 2
  %56 = load i64, i64* %mask56, align 8
  %tobool57 = icmp ne i64 %56, 0
  br i1 %tobool57, label %if.then.58, label %if.else.105

if.then.58:                                       ; preds = %if.then.54
  %57 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %57, i32 0, i32 8
  %58 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %59 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %59, i32 0, i32 44
  %60 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %screen59 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %60, i32 0, i32 6
  %61 = load %struct.Screen*, %struct.Screen** %screen59, align 8
  store %struct.Screen* %61, %struct.Screen** %screen, align 8
  %62 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %root_depth = getelementptr inbounds %struct.Screen, %struct.Screen* %62, i32 0, i32 9
  %63 = load i32, i32* %root_depth, align 4
  store i32 %63, i32* %depth, align 4
  %64 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %64, i32 0, i32 10
  %65 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %66 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %window = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %66, i32 0, i32 11
  %67 = load i64, i64* %window, align 8
  %68 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width60 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %68, i32 0, i32 4
  %69 = load i32, i32* %background_width60, align 4
  %70 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height61 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %70, i32 0, i32 5
  %71 = load i32, i32* %height61, align 4
  %72 = load i32, i32* %depth, align 4
  %call = call i64 @XCreatePixmap(%struct._XDisplay* %65, i64 %67, i32 %69, i32 %71, i32 %72)
  store i64 %call, i64* %pixmap, align 8
  %73 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display62 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %73, i32 0, i32 10
  %74 = load %struct._XDisplay*, %struct._XDisplay** %display62, align 8
  %75 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %75, i32 0, i32 24
  %76 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call63 = call i32 @XSetClipMask(%struct._XDisplay* %74, %struct._XGC* %76, i64 0)
  %77 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p64 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %77, i32 0, i32 23
  %bf.load65 = load i8, i8* %stippled_p64, align 8
  %bf.lshr66 = lshr i8 %bf.load65, 3
  %bf.clear67 = and i8 %bf.lshr66, 1
  %bf.cast68 = trunc i8 %bf.clear67 to i1
  br i1 %bf.cast68, label %if.then.69, label %if.else

if.then.69:                                       ; preds = %if.then.58
  %78 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display70 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %78, i32 0, i32 10
  %79 = load %struct._XDisplay*, %struct._XDisplay** %display70, align 8
  %80 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc71 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %80, i32 0, i32 24
  %81 = load %struct._XGC*, %struct._XGC** %gc71, align 8
  %call72 = call i32 @XSetFillStyle(%struct._XDisplay* %79, %struct._XGC* %81, i32 3)
  %82 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display73 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %82, i32 0, i32 10
  %83 = load %struct._XDisplay*, %struct._XDisplay** %display73, align 8
  %84 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc74 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %84, i32 0, i32 24
  %85 = load %struct._XGC*, %struct._XGC** %gc74, align 8
  %86 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x75 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %86, i32 0, i32 0
  %87 = load i32, i32* %x75, align 4
  %sub76 = sub nsw i32 0, %87
  %88 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %88, i32 0, i32 1
  %89 = load i32, i32* %y, align 4
  %sub77 = sub nsw i32 0, %89
  %call78 = call i32 @XSetTSOrigin(%struct._XDisplay* %83, %struct._XGC* %85, i32 %sub76, i32 %sub77)
  %90 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display79 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %90, i32 0, i32 10
  %91 = load %struct._XDisplay*, %struct._XDisplay** %display79, align 8
  %92 = load i64, i64* %pixmap, align 8
  %93 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc80 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %93, i32 0, i32 24
  %94 = load %struct._XGC*, %struct._XGC** %gc80, align 8
  %95 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width81 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %95, i32 0, i32 4
  %96 = load i32, i32* %background_width81, align 4
  %97 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height82 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %97, i32 0, i32 5
  %98 = load i32, i32* %height82, align 4
  %call83 = call i32 @XFillRectangle(%struct._XDisplay* %91, i64 %92, %struct._XGC* %94, i32 0, i32 0, i32 %96, i32 %98)
  %99 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display84 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %99, i32 0, i32 10
  %100 = load %struct._XDisplay*, %struct._XDisplay** %display84, align 8
  %101 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc85 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %101, i32 0, i32 24
  %102 = load %struct._XGC*, %struct._XGC** %gc85, align 8
  %call86 = call i32 @XSetFillStyle(%struct._XDisplay* %100, %struct._XGC* %102, i32 0)
  %103 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display87 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %103, i32 0, i32 10
  %104 = load %struct._XDisplay*, %struct._XDisplay** %display87, align 8
  %105 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc88 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %105, i32 0, i32 24
  %106 = load %struct._XGC*, %struct._XGC** %gc88, align 8
  %call89 = call i32 @XSetTSOrigin(%struct._XDisplay* %104, %struct._XGC* %106, i32 0, i32 0)
  br label %if.end.104

if.else:                                          ; preds = %if.then.58
  %107 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display90 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %107, i32 0, i32 10
  %108 = load %struct._XDisplay*, %struct._XDisplay** %display90, align 8
  %109 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc91 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %109, i32 0, i32 24
  %110 = load %struct._XGC*, %struct._XGC** %gc91, align 8
  %call92 = call i32 @XGetGCValues(%struct._XDisplay* %108, %struct._XGC* %110, i64 12, %struct.XGCValues* %xgcv)
  %111 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display93 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %111, i32 0, i32 10
  %112 = load %struct._XDisplay*, %struct._XDisplay** %display93, align 8
  %113 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc94 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %113, i32 0, i32 24
  %114 = load %struct._XGC*, %struct._XGC** %gc94, align 8
  %background = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %115 = load i64, i64* %background, align 8
  %call95 = call i32 @XSetForeground(%struct._XDisplay* %112, %struct._XGC* %114, i64 %115)
  %116 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display96 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %116, i32 0, i32 10
  %117 = load %struct._XDisplay*, %struct._XDisplay** %display96, align 8
  %118 = load i64, i64* %pixmap, align 8
  %119 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc97 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %119, i32 0, i32 24
  %120 = load %struct._XGC*, %struct._XGC** %gc97, align 8
  %121 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width98 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %121, i32 0, i32 4
  %122 = load i32, i32* %background_width98, align 4
  %123 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height99 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %123, i32 0, i32 5
  %124 = load i32, i32* %height99, align 4
  %call100 = call i32 @XFillRectangle(%struct._XDisplay* %117, i64 %118, %struct._XGC* %120, i32 0, i32 0, i32 %122, i32 %124)
  %125 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display101 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %125, i32 0, i32 10
  %126 = load %struct._XDisplay*, %struct._XDisplay** %display101, align 8
  %127 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc102 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %127, i32 0, i32 24
  %128 = load %struct._XGC*, %struct._XGC** %gc102, align 8
  %foreground = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %129 = load i64, i64* %foreground, align 8
  %call103 = call i32 @XSetForeground(%struct._XDisplay* %126, %struct._XGC* %128, i64 %129)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else, %if.then.69
  br label %if.end.134

if.else.105:                                      ; preds = %if.then.54
  %130 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x107 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %130, i32 0, i32 0
  %131 = load i32, i32* %x107, align 4
  store i32 %131, i32* %x106, align 4
  %132 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y109 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %132, i32 0, i32 1
  %133 = load i32, i32* %y109, align 4
  store i32 %133, i32* %y108, align 4
  %134 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width111 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %134, i32 0, i32 4
  %135 = load i32, i32* %background_width111, align 4
  store i32 %135, i32* %width110, align 4
  %136 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %136, i32 0, i32 25
  %137 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %137, i32 0, i32 6
  %138 = bitcast i24* %left_box_line_p to i32*
  %bf.load112 = load i32, i32* %138, align 8
  %bf.lshr113 = lshr i32 %bf.load112, 4
  %bf.clear114 = and i32 %bf.lshr113, 1
  %bf.cast115 = trunc i32 %bf.clear114 to i1
  br i1 %bf.cast115, label %land.lhs.true, label %if.end.124

land.lhs.true:                                    ; preds = %if.else.105
  %139 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice116 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %139, i32 0, i32 28
  %140 = bitcast %struct.glyph_slice* %slice116 to i64*
  %bf.load117 = load i64, i64* %140, align 4
  %bf.clear118 = and i64 %bf.load117, 65535
  %bf.cast119 = trunc i64 %bf.clear118 to i32
  %cmp120 = icmp eq i32 %bf.cast119, 0
  br i1 %cmp120, label %if.then.121, label %if.end.124

if.then.121:                                      ; preds = %land.lhs.true
  %141 = load i32, i32* %box_line_hwidth, align 4
  %142 = load i32, i32* %x106, align 4
  %add122 = add nsw i32 %142, %141
  store i32 %add122, i32* %x106, align 4
  %143 = load i32, i32* %box_line_hwidth, align 4
  %144 = load i32, i32* %width110, align 4
  %sub123 = sub nsw i32 %144, %143
  store i32 %sub123, i32* %width110, align 4
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.121, %land.lhs.true, %if.else.105
  %145 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice125 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %145, i32 0, i32 28
  %146 = bitcast %struct.glyph_slice* %slice125 to i64*
  %bf.load126 = load i64, i64* %146, align 4
  %bf.lshr127 = lshr i64 %bf.load126, 16
  %bf.clear128 = and i64 %bf.lshr127, 65535
  %bf.cast129 = trunc i64 %bf.clear128 to i32
  %cmp130 = icmp eq i32 %bf.cast129, 0
  br i1 %cmp130, label %if.then.131, label %if.end.133

if.then.131:                                      ; preds = %if.end.124
  %147 = load i32, i32* %box_line_vwidth, align 4
  %148 = load i32, i32* %y108, align 4
  %add132 = add nsw i32 %148, %147
  store i32 %add132, i32* %y108, align 4
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.131, %if.end.124
  %149 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %150 = load i32, i32* %x106, align 4
  %151 = load i32, i32* %y108, align 4
  %152 = load i32, i32* %width110, align 4
  %153 = load i32, i32* %height, align 4
  call void @x_draw_glyph_string_bg_rect(%struct.glyph_string* %149, i32 %150, i32 %151, i32 %152, i32 %153)
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.end.104
  %154 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %154, i32 0, i32 23
  %bf.load135 = load i8, i8* %background_filled_p, align 8
  %bf.clear136 = and i8 %bf.load135, -3
  %bf.set137 = or i8 %bf.clear136, 2
  store i8 %bf.set137, i8* %background_filled_p, align 8
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.134, %lor.lhs.false.52
  %155 = load i64, i64* %pixmap, align 8
  %cmp139 = icmp ne i64 %155, 0
  br i1 %cmp139, label %if.then.140, label %if.else.151

if.then.140:                                      ; preds = %if.end.138
  %156 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %157 = load i64, i64* %pixmap, align 8
  call void @x_draw_image_foreground_1(%struct.glyph_string* %156, i64 %157)
  %158 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_set_glyph_string_clipping(%struct.glyph_string* %158)
  %159 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display141 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %159, i32 0, i32 10
  %160 = load %struct._XDisplay*, %struct._XDisplay** %display141, align 8
  %161 = load i64, i64* %pixmap, align 8
  %162 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %window142 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %162, i32 0, i32 11
  %163 = load i64, i64* %window142, align 8
  %164 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc143 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %164, i32 0, i32 24
  %165 = load %struct._XGC*, %struct._XGC** %gc143, align 8
  %166 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_width144 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %166, i32 0, i32 4
  %167 = load i32, i32* %background_width144, align 4
  %168 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height145 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %168, i32 0, i32 5
  %169 = load i32, i32* %height145, align 4
  %170 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x146 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %170, i32 0, i32 0
  %171 = load i32, i32* %x146, align 4
  %172 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y147 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %172, i32 0, i32 1
  %173 = load i32, i32* %y147, align 4
  %call148 = call i32 @XCopyArea(%struct._XDisplay* %160, i64 %161, i64 %163, %struct._XGC* %165, i32 0, i32 0, i32 %167, i32 %169, i32 %171, i32 %173)
  %174 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display149 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %174, i32 0, i32 10
  %175 = load %struct._XDisplay*, %struct._XDisplay** %display149, align 8
  %176 = load i64, i64* %pixmap, align 8
  %call150 = call i32 @XFreePixmap(%struct._XDisplay* %175, i64 %176)
  br label %if.end.152

if.else.151:                                      ; preds = %if.end.138
  %177 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_image_foreground(%struct.glyph_string* %177)
  br label %if.end.152

if.end.152:                                       ; preds = %if.else.151, %if.then.140
  %178 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img153 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %178, i32 0, i32 26
  %179 = load %struct.image*, %struct.image** %img153, align 8
  %relief = getelementptr inbounds %struct.image, %struct.image* %179, i32 0, i32 17
  %180 = load i32, i32* %relief, align 4
  %tobool154 = icmp ne i32 %180, 0
  br i1 %tobool154, label %if.then.160, label %lor.lhs.false.155

lor.lhs.false.155:                                ; preds = %if.end.152
  %181 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %181, i32 0, i32 16
  %182 = load i32, i32* %hl, align 4
  %cmp156 = icmp eq i32 %182, 4
  br i1 %cmp156, label %if.then.160, label %lor.lhs.false.157

lor.lhs.false.157:                                ; preds = %lor.lhs.false.155
  %183 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl158 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %183, i32 0, i32 16
  %184 = load i32, i32* %hl158, align 4
  %cmp159 = icmp eq i32 %184, 5
  br i1 %cmp159, label %if.then.160, label %if.end.161

if.then.160:                                      ; preds = %lor.lhs.false.157, %lor.lhs.false.155, %if.end.152
  %185 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_draw_image_relief(%struct.glyph_string* %185)
  br label %if.end.161

if.end.161:                                       ; preds = %if.then.160, %lor.lhs.false.157
  ret void
}

declare void @x_draw_xwidget_glyph_string(%struct.glyph_string*) #1

; Function Attrs: nounwind uwtable
define internal void @x_draw_glyph_string_foreground(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %g = alloca %struct.glyph*, align 8
  %font = alloca %struct.font*, align 8
  %boff = alloca i32, align 4
  %y25 = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 17
  %1 = load %struct.face*, %struct.face** %face, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %1, i32 0, i32 13
  %2 = bitcast i24* %box to i32*
  %bf.load = load i32, i32* %2, align 8
  %bf.clear = and i32 %bf.load, 3
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 25
  %4 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %4, i32 0, i32 6
  %5 = bitcast i24* %left_box_line_p to i32*
  %bf.load1 = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load1, 4
  %bf.clear2 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear2 to i1
  br i1 %bf.cast, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 0
  %7 = load i32, i32* %x3, align 4
  %8 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face4 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 17
  %9 = load %struct.face*, %struct.face** %face4, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %9, i32 0, i32 12
  %10 = load i32, i32* %box_line_width, align 4
  %cmp5 = icmp slt i32 %10, 0
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %11 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %11, i32 0, i32 17
  %12 = load %struct.face*, %struct.face** %face6, align 8
  %box_line_width7 = getelementptr inbounds %struct.face, %struct.face* %12, i32 0, i32 12
  %13 = load i32, i32* %box_line_width7, align 4
  %sub = sub nsw i32 0, %13
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %14 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face8 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %14, i32 0, i32 17
  %15 = load %struct.face*, %struct.face** %face8, align 8
  %box_line_width9 = getelementptr inbounds %struct.face, %struct.face* %15, i32 0, i32 12
  %16 = load i32, i32* %box_line_width9, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %16, %cond.false ]
  %add = add nsw i32 %7, %cond
  store i32 %add, i32* %x, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x10 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 0
  %18 = load i32, i32* %x10, align 4
  store i32 %18, i32* %x, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %19 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font_not_found_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %19, i32 0, i32 23
  %bf.load11 = load i8, i8* %font_not_found_p, align 8
  %bf.lshr12 = lshr i8 %bf.load11, 2
  %bf.clear13 = and i8 %bf.lshr12, 1
  %bf.cast14 = trunc i8 %bf.clear13 to i1
  br i1 %bf.cast14, label %if.then.15, label %if.else.23

if.then.15:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.15
  %20 = load i32, i32* %i, align 4
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 15
  %22 = load i32, i32* %nchars, align 4
  %cmp16 = icmp slt i32 %20, %22
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph17 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 25
  %24 = load %struct.glyph*, %struct.glyph** %first_glyph17, align 8
  %25 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %25 to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %24, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %g, align 8
  %26 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %26, i32 0, i32 8
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %28 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %28, i32 0, i32 24
  %29 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %30 = load i32, i32* %x, align 4
  %31 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %31, i32 0, i32 1
  %32 = load i32, i32* %y, align 4
  %33 = load %struct.glyph*, %struct.glyph** %g, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %33, i32 0, i32 2
  %34 = load i16, i16* %pixel_width, align 2
  %conv = sext i16 %34 to i32
  %sub18 = sub nsw i32 %conv, 1
  %35 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %35, i32 0, i32 5
  %36 = load i32, i32* %height, align 4
  %sub19 = sub nsw i32 %36, 1
  call void @x_draw_rectangle(%struct.frame* %27, %struct._XGC* %29, i32 %30, i32 %32, i32 %sub18, i32 %sub19)
  %37 = load %struct.glyph*, %struct.glyph** %g, align 8
  %pixel_width20 = getelementptr inbounds %struct.glyph, %struct.glyph* %37, i32 0, i32 2
  %38 = load i16, i16* %pixel_width20, align 2
  %conv21 = sext i16 %38 to i32
  %39 = load i32, i32* %x, align 4
  %add22 = add nsw i32 %39, %conv21
  store i32 %add22, i32* %x, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.83

if.else.23:                                       ; preds = %if.end
  %41 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font24 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %41, i32 0, i32 18
  %42 = load %struct.font*, %struct.font** %font24, align 8
  store %struct.font* %42, %struct.font** %font, align 8
  %43 = load %struct.font*, %struct.font** %font, align 8
  %baseline_offset = getelementptr inbounds %struct.font, %struct.font* %43, i32 0, i32 13
  %44 = load i32, i32* %baseline_offset, align 4
  store i32 %44, i32* %boff, align 4
  %45 = load %struct.font*, %struct.font** %font, align 8
  %vertical_centering = getelementptr inbounds %struct.font, %struct.font* %45, i32 0, i32 12
  %46 = load i8, i8* %vertical_centering, align 1
  %tobool = trunc i8 %46 to i1
  br i1 %tobool, label %if.then.26, label %if.end.48

if.then.26:                                       ; preds = %if.else.23
  %47 = load %struct.font*, %struct.font** %font, align 8
  %descent = getelementptr inbounds %struct.font, %struct.font* %47, i32 0, i32 9
  %48 = load i32, i32* %descent, align 4
  %49 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f27 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %49, i32 0, i32 8
  %50 = load %struct.frame*, %struct.frame** %f27, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 60
  %51 = load i32, i32* %line_height, align 4
  %52 = load %struct.font*, %struct.font** %font, align 8
  %height28 = getelementptr inbounds %struct.font, %struct.font* %52, i32 0, i32 5
  %53 = load i32, i32* %height28, align 4
  %sub29 = sub nsw i32 %51, %53
  %54 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f30 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %54, i32 0, i32 8
  %55 = load %struct.frame*, %struct.frame** %f30, align 8
  %line_height31 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 60
  %56 = load i32, i32* %line_height31, align 4
  %57 = load %struct.font*, %struct.font** %font, align 8
  %height32 = getelementptr inbounds %struct.font, %struct.font* %57, i32 0, i32 5
  %58 = load i32, i32* %height32, align 4
  %cmp33 = icmp sgt i32 %56, %58
  %conv34 = zext i1 %cmp33 to i32
  %add35 = add nsw i32 %sub29, %conv34
  %div = sdiv i32 %add35, 2
  %add36 = add nsw i32 %48, %div
  %59 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f37 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %59, i32 0, i32 8
  %60 = load %struct.frame*, %struct.frame** %f37, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 62
  %x38 = bitcast %union.output_data* %output_data to %struct.x_output**
  %61 = load %struct.x_output*, %struct.x_output** %x38, align 8
  %font39 = getelementptr inbounds %struct.x_output, %struct.x_output* %61, i32 0, i32 25
  %62 = load %struct.font*, %struct.font** %font39, align 8
  %descent40 = getelementptr inbounds %struct.font, %struct.font* %62, i32 0, i32 9
  %63 = load i32, i32* %descent40, align 4
  %64 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f41 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %64, i32 0, i32 8
  %65 = load %struct.frame*, %struct.frame** %f41, align 8
  %output_data42 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 62
  %x43 = bitcast %union.output_data* %output_data42 to %struct.x_output**
  %66 = load %struct.x_output*, %struct.x_output** %x43, align 8
  %baseline_offset44 = getelementptr inbounds %struct.x_output, %struct.x_output* %66, i32 0, i32 26
  %67 = load i32, i32* %baseline_offset44, align 4
  %sub45 = sub nsw i32 %63, %67
  %sub46 = sub nsw i32 %add36, %sub45
  %68 = load i32, i32* %boff, align 4
  %sub47 = sub nsw i32 %sub46, %68
  store i32 %sub47, i32* %boff, align 4
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.26, %if.else.23
  %69 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %69, i32 0, i32 2
  %70 = load i32, i32* %ybase, align 4
  %71 = load i32, i32* %boff, align 4
  %sub49 = sub nsw i32 %70, %71
  store i32 %sub49, i32* %y25, align 4
  %72 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %for_overlaps = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %72, i32 0, i32 23
  %bf.load50 = load i8, i8* %for_overlaps, align 8
  %bf.lshr51 = lshr i8 %bf.load50, 4
  %bf.clear52 = and i8 %bf.lshr51, 7
  %bf.cast53 = zext i8 %bf.clear52 to i32
  %tobool54 = icmp ne i32 %bf.cast53, 0
  br i1 %tobool54, label %if.then.63, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.48
  %73 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %background_filled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %73, i32 0, i32 23
  %bf.load55 = load i8, i8* %background_filled_p, align 8
  %bf.lshr56 = lshr i8 %bf.load55, 1
  %bf.clear57 = and i8 %bf.lshr56, 1
  %bf.cast58 = trunc i8 %bf.clear57 to i1
  br i1 %bf.cast58, label %land.lhs.true.60, label %if.else.65

land.lhs.true.60:                                 ; preds = %lor.lhs.false
  %74 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %74, i32 0, i32 16
  %75 = load i32, i32* %hl, align 4
  %cmp61 = icmp ne i32 %75, 2
  br i1 %cmp61, label %if.then.63, label %if.else.65

if.then.63:                                       ; preds = %land.lhs.true.60, %if.end.48
  %76 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %76, i32 0, i32 18
  %77 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %draw = getelementptr inbounds %struct.font_driver, %struct.font_driver* %77, i32 0, i32 14
  %78 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw, align 8
  %79 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %80 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars64 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %80, i32 0, i32 15
  %81 = load i32, i32* %nchars64, align 4
  %82 = load i32, i32* %x, align 4
  %83 = load i32, i32* %y25, align 4
  %call = call i32 %78(%struct.glyph_string* %79, i32 0, i32 %81, i32 %82, i32 %83, i1 zeroext false)
  br label %if.end.70

if.else.65:                                       ; preds = %land.lhs.true.60, %lor.lhs.false
  %84 = load %struct.font*, %struct.font** %font, align 8
  %driver66 = getelementptr inbounds %struct.font, %struct.font* %84, i32 0, i32 18
  %85 = load %struct.font_driver*, %struct.font_driver** %driver66, align 8
  %draw67 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %85, i32 0, i32 14
  %86 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw67, align 8
  %87 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %88 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars68 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %88, i32 0, i32 15
  %89 = load i32, i32* %nchars68, align 4
  %90 = load i32, i32* %x, align 4
  %91 = load i32, i32* %y25, align 4
  %call69 = call i32 %86(%struct.glyph_string* %87, i32 0, i32 %89, i32 %90, i32 %91, i1 zeroext true)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.65, %if.then.63
  %92 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face71 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %92, i32 0, i32 17
  %93 = load %struct.face*, %struct.face** %face71, align 8
  %overstrike = getelementptr inbounds %struct.face, %struct.face* %93, i32 0, i32 13
  %94 = bitcast i24* %overstrike to i32*
  %bf.load72 = load i32, i32* %94, align 8
  %bf.lshr73 = lshr i32 %bf.load72, 18
  %bf.clear74 = and i32 %bf.lshr73, 1
  %bf.cast75 = trunc i32 %bf.clear74 to i1
  br i1 %bf.cast75, label %if.then.76, label %if.end.82

if.then.76:                                       ; preds = %if.end.70
  %95 = load %struct.font*, %struct.font** %font, align 8
  %driver77 = getelementptr inbounds %struct.font, %struct.font* %95, i32 0, i32 18
  %96 = load %struct.font_driver*, %struct.font_driver** %driver77, align 8
  %draw78 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %96, i32 0, i32 14
  %97 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw78, align 8
  %98 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %99 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars79 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %99, i32 0, i32 15
  %100 = load i32, i32* %nchars79, align 4
  %101 = load i32, i32* %x, align 4
  %add80 = add nsw i32 %101, 1
  %102 = load i32, i32* %y25, align 4
  %call81 = call i32 %97(%struct.glyph_string* %98, i32 0, i32 %100, i32 %add80, i32 %102, i1 zeroext false)
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.76, %if.end.70
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_composite_glyph_string_foreground(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca i32, align 4
  %font = alloca %struct.font*, align 8
  %y31 = alloca i32, align 4
  %xx = alloca i32, align 4
  %yy = alloca i32, align 4
  %gstring = alloca i64, align 8
  %glyph = alloca i64, align 8
  %y79 = alloca i32, align 4
  %width81 = alloca i32, align 4
  %xoff = alloca i32, align 4
  %yoff = alloca i32, align 4
  %wadjust = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 18
  %1 = load %struct.font*, %struct.font** %font1, align 8
  store %struct.font* %1, %struct.font** %font, align 8
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 17
  %3 = load %struct.face*, %struct.face** %face, align 8
  %tobool = icmp ne %struct.face* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 17
  %5 = load %struct.face*, %struct.face** %face2, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %5, i32 0, i32 13
  %6 = bitcast i24* %box to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 3
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %land.lhs.true.3, label %if.else

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %7 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %7, i32 0, i32 25
  %8 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %8, i32 0, i32 6
  %9 = bitcast i24* %left_box_line_p to i32*
  %bf.load4 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load4, 4
  %bf.clear5 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear5 to i1
  br i1 %bf.cast, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.3
  %10 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %10, i32 0, i32 0
  %11 = load i32, i32* %x6, align 4
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 17
  %13 = load %struct.face*, %struct.face** %face7, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %13, i32 0, i32 12
  %14 = load i32, i32* %box_line_width, align 4
  %cmp8 = icmp slt i32 %14, 0
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face9 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 17
  %16 = load %struct.face*, %struct.face** %face9, align 8
  %box_line_width10 = getelementptr inbounds %struct.face, %struct.face* %16, i32 0, i32 12
  %17 = load i32, i32* %box_line_width10, align 4
  %sub = sub nsw i32 0, %17
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face11 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 17
  %19 = load %struct.face*, %struct.face** %face11, align 8
  %box_line_width12 = getelementptr inbounds %struct.face, %struct.face* %19, i32 0, i32 12
  %20 = load i32, i32* %box_line_width12, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %20, %cond.false ]
  %add = add nsw i32 %11, %cond
  store i32 %add, i32* %x, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.3, %land.lhs.true, %entry
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x13 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  store i32 %22, i32* %x, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font_not_found_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 23
  %bf.load14 = load i8, i8* %font_not_found_p, align 8
  %bf.lshr15 = lshr i8 %bf.load14, 2
  %bf.clear16 = and i8 %bf.lshr15, 1
  %bf.cast17 = trunc i8 %bf.clear16 to i1
  br i1 %bf.cast17, label %if.then.18, label %if.else.24

if.then.18:                                       ; preds = %if.end
  %24 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_from = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %24, i32 0, i32 21
  %25 = load i32, i32* %cmp_from, align 4
  %cmp19 = icmp eq i32 %25, 0
  br i1 %cmp19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %if.then.18
  %26 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %26, i32 0, i32 8
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %28 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %28, i32 0, i32 24
  %29 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %30 = load i32, i32* %x, align 4
  %31 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %31, i32 0, i32 1
  %32 = load i32, i32* %y, align 4
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 3
  %34 = load i32, i32* %width, align 4
  %sub21 = sub nsw i32 %34, 1
  %35 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %height = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %35, i32 0, i32 5
  %36 = load i32, i32* %height, align 4
  %sub22 = sub nsw i32 %36, 1
  call void @x_draw_rectangle(%struct.frame* %27, %struct._XGC* %29, i32 %30, i32 %32, i32 %sub21, i32 %sub22)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %if.then.18
  br label %if.end.201

if.else.24:                                       ; preds = %if.end
  %37 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph25 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %37, i32 0, i32 25
  %38 = load %struct.glyph*, %struct.glyph** %first_glyph25, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %38, i32 0, i32 9
  %cmp26 = bitcast %union.anon.1* %u to %struct.anon.2*
  %39 = bitcast %struct.anon.2* %cmp26 to i32*
  %bf.load27 = load i32, i32* %39, align 4
  %bf.clear28 = and i32 %bf.load27, 1
  %bf.cast29 = trunc i32 %bf.clear28 to i1
  br i1 %bf.cast29, label %if.else.77, label %if.then.30

if.then.30:                                       ; preds = %if.else.24
  %40 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %40, i32 0, i32 2
  %41 = load i32, i32* %ybase, align 4
  store i32 %41, i32* %y31, align 4
  store i32 0, i32* %i, align 4
  %42 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_from32 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %42, i32 0, i32 21
  %43 = load i32, i32* %cmp_from32, align 4
  store i32 %43, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.30
  %44 = load i32, i32* %i, align 4
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 15
  %46 = load i32, i32* %nchars, align 4
  %cmp33 = icmp slt i32 %44, %46
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %47 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp34 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %47, i32 0, i32 19
  %48 = load %struct.composition*, %struct.composition** %cmp34, align 8
  %method = getelementptr inbounds %struct.composition, %struct.composition* %48, i32 0, i32 7
  %49 = load i32, i32* %method, align 4
  %cmp35 = icmp eq i32 %49, 3
  br i1 %cmp35, label %cond.true.36, label %cond.false.37

cond.true.36:                                     ; preds = %for.body
  %50 = load i32, i32* %j, align 4
  %mul = mul nsw i32 %50, 2
  br label %cond.end.38

cond.false.37:                                    ; preds = %for.body
  %51 = load i32, i32* %j, align 4
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.37, %cond.true.36
  %cond39 = phi i32 [ %mul, %cond.true.36 ], [ %51, %cond.false.37 ]
  %idxprom = sext i32 %cond39 to i64
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp40 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %52, i32 0, i32 19
  %53 = load %struct.composition*, %struct.composition** %cmp40, align 8
  %hash_index = getelementptr inbounds %struct.composition, %struct.composition* %53, i32 0, i32 8
  %54 = load i64, i64* %hash_index, align 8
  %mul41 = mul nsw i64 %54, 2
  %55 = load i64, i64* @composition_hash_table, align 8
  %call = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %55)
  %key_and_value = getelementptr inbounds %struct.Lisp_Hash_Table, %struct.Lisp_Hash_Table* %call, i32 0, i32 9
  %56 = load i64, i64* %key_and_value, align 8
  %call42 = call %struct.Lisp_Vector* @XVECTOR(i64 %56)
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call42, i32 0, i32 1
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i64 %mul41
  %57 = load i64, i64* %arrayidx, align 8
  %call43 = call %struct.Lisp_Vector* @XVECTOR(i64 %57)
  %contents44 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call43, i32 0, i32 1
  %arrayidx45 = getelementptr inbounds [0 x i64], [0 x i64]* %contents44, i32 0, i64 %idxprom
  %58 = load i64, i64* %arrayidx45, align 8
  %shr = ashr i64 %58, 2
  %cmp46 = icmp ne i64 %shr, 9
  br i1 %cmp46, label %if.then.47, label %if.end.75

if.then.47:                                       ; preds = %cond.end.38
  %59 = load i32, i32* %x, align 4
  %60 = load i32, i32* %j, align 4
  %mul48 = mul nsw i32 %60, 2
  %idxprom49 = sext i32 %mul48 to i64
  %61 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp50 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %61, i32 0, i32 19
  %62 = load %struct.composition*, %struct.composition** %cmp50, align 8
  %offsets = getelementptr inbounds %struct.composition, %struct.composition* %62, i32 0, i32 10
  %63 = load i16*, i16** %offsets, align 8
  %arrayidx51 = getelementptr inbounds i16, i16* %63, i64 %idxprom49
  %64 = load i16, i16* %arrayidx51, align 2
  %conv = sext i16 %64 to i32
  %add52 = add nsw i32 %59, %conv
  store i32 %add52, i32* %xx, align 4
  %65 = load i32, i32* %y31, align 4
  %66 = load i32, i32* %j, align 4
  %mul53 = mul nsw i32 %66, 2
  %add54 = add nsw i32 %mul53, 1
  %idxprom55 = sext i32 %add54 to i64
  %67 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp56 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %67, i32 0, i32 19
  %68 = load %struct.composition*, %struct.composition** %cmp56, align 8
  %offsets57 = getelementptr inbounds %struct.composition, %struct.composition* %68, i32 0, i32 10
  %69 = load i16*, i16** %offsets57, align 8
  %arrayidx58 = getelementptr inbounds i16, i16* %69, i64 %idxprom55
  %70 = load i16, i16* %arrayidx58, align 2
  %conv59 = sext i16 %70 to i32
  %sub60 = sub nsw i32 %65, %conv59
  store i32 %sub60, i32* %yy, align 4
  %71 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %71, i32 0, i32 18
  %72 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %draw = getelementptr inbounds %struct.font_driver, %struct.font_driver* %72, i32 0, i32 14
  %73 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw, align 8
  %74 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %75 = load i32, i32* %j, align 4
  %76 = load i32, i32* %j, align 4
  %add61 = add nsw i32 %76, 1
  %77 = load i32, i32* %xx, align 4
  %78 = load i32, i32* %yy, align 4
  %call62 = call i32 %73(%struct.glyph_string* %74, i32 %75, i32 %add61, i32 %77, i32 %78, i1 zeroext false)
  %79 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face63 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %79, i32 0, i32 17
  %80 = load %struct.face*, %struct.face** %face63, align 8
  %overstrike = getelementptr inbounds %struct.face, %struct.face* %80, i32 0, i32 13
  %81 = bitcast i24* %overstrike to i32*
  %bf.load64 = load i32, i32* %81, align 8
  %bf.lshr65 = lshr i32 %bf.load64, 18
  %bf.clear66 = and i32 %bf.lshr65, 1
  %bf.cast67 = trunc i32 %bf.clear66 to i1
  br i1 %bf.cast67, label %if.then.68, label %if.end.74

if.then.68:                                       ; preds = %if.then.47
  %82 = load %struct.font*, %struct.font** %font, align 8
  %driver69 = getelementptr inbounds %struct.font, %struct.font* %82, i32 0, i32 18
  %83 = load %struct.font_driver*, %struct.font_driver** %driver69, align 8
  %draw70 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %83, i32 0, i32 14
  %84 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw70, align 8
  %85 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %86 = load i32, i32* %j, align 4
  %87 = load i32, i32* %j, align 4
  %add71 = add nsw i32 %87, 1
  %88 = load i32, i32* %xx, align 4
  %add72 = add nsw i32 %88, 1
  %89 = load i32, i32* %yy, align 4
  %call73 = call i32 %84(%struct.glyph_string* %85, i32 %86, i32 %add71, i32 %add72, i32 %89, i1 zeroext false)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.68, %if.then.47
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %cond.end.38
  br label %for.inc

for.inc:                                          ; preds = %if.end.75
  %90 = load i32, i32* %i, align 4
  %inc = add nsw i32 %90, 1
  store i32 %inc, i32* %i, align 4
  %91 = load i32, i32* %j, align 4
  %inc76 = add nsw i32 %91, 1
  store i32 %inc76, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.200

if.else.77:                                       ; preds = %if.else.24
  %92 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_id = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %92, i32 0, i32 20
  %93 = load i64, i64* %cmp_id, align 8
  %call78 = call i64 @composition_gstring_from_id(i64 %93)
  store i64 %call78, i64* %gstring, align 8
  %94 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase80 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %94, i32 0, i32 2
  %95 = load i32, i32* %ybase80, align 4
  store i32 %95, i32* %y79, align 4
  store i32 0, i32* %width81, align 4
  %96 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_from82 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %96, i32 0, i32 21
  %97 = load i32, i32* %cmp_from82, align 4
  store i32 %97, i32* %j, align 4
  store i32 %97, i32* %i, align 4
  br label %for.cond.83

for.cond.83:                                      ; preds = %for.inc.178, %if.else.77
  %98 = load i32, i32* %i, align 4
  %99 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp_to = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %99, i32 0, i32 22
  %100 = load i32, i32* %cmp_to, align 4
  %cmp84 = icmp slt i32 %98, %100
  br i1 %cmp84, label %for.body.86, label %for.end.180

for.body.86:                                      ; preds = %for.cond.83
  %101 = load i64, i64* %gstring, align 8
  %102 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %102, 2
  %conv88 = sext i32 %add87 to i64
  %call89 = call i64 @AREF(i64 %101, i64 %conv88)
  store i64 %call89, i64* %glyph, align 8
  %103 = load i64, i64* %glyph, align 8
  %call90 = call i64 @AREF(i64 %103, i64 9)
  %call91 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp92 = icmp eq i64 %call90, %call91
  br i1 %cmp92, label %if.then.94, label %if.else.100

if.then.94:                                       ; preds = %for.body.86
  %104 = load i64, i64* %glyph, align 8
  %call95 = call i64 @AREF(i64 %104, i64 4)
  %shr96 = ashr i64 %call95, 2
  %105 = load i32, i32* %width81, align 4
  %conv97 = sext i32 %105 to i64
  %add98 = add nsw i64 %conv97, %shr96
  %conv99 = trunc i64 %add98 to i32
  store i32 %conv99, i32* %width81, align 4
  br label %if.end.177

if.else.100:                                      ; preds = %for.body.86
  %106 = load i32, i32* %j, align 4
  %107 = load i32, i32* %i, align 4
  %cmp101 = icmp slt i32 %106, %107
  br i1 %cmp101, label %if.then.103, label %if.end.120

if.then.103:                                      ; preds = %if.else.100
  %108 = load %struct.font*, %struct.font** %font, align 8
  %driver104 = getelementptr inbounds %struct.font, %struct.font* %108, i32 0, i32 18
  %109 = load %struct.font_driver*, %struct.font_driver** %driver104, align 8
  %draw105 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %109, i32 0, i32 14
  %110 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw105, align 8
  %111 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %112 = load i32, i32* %j, align 4
  %113 = load i32, i32* %i, align 4
  %114 = load i32, i32* %x, align 4
  %115 = load i32, i32* %y79, align 4
  %call106 = call i32 %110(%struct.glyph_string* %111, i32 %112, i32 %113, i32 %114, i32 %115, i1 zeroext false)
  %116 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face107 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %116, i32 0, i32 17
  %117 = load %struct.face*, %struct.face** %face107, align 8
  %overstrike108 = getelementptr inbounds %struct.face, %struct.face* %117, i32 0, i32 13
  %118 = bitcast i24* %overstrike108 to i32*
  %bf.load109 = load i32, i32* %118, align 8
  %bf.lshr110 = lshr i32 %bf.load109, 18
  %bf.clear111 = and i32 %bf.lshr110, 1
  %bf.cast112 = trunc i32 %bf.clear111 to i1
  br i1 %bf.cast112, label %if.then.113, label %if.end.118

if.then.113:                                      ; preds = %if.then.103
  %119 = load %struct.font*, %struct.font** %font, align 8
  %driver114 = getelementptr inbounds %struct.font, %struct.font* %119, i32 0, i32 18
  %120 = load %struct.font_driver*, %struct.font_driver** %driver114, align 8
  %draw115 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %120, i32 0, i32 14
  %121 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw115, align 8
  %122 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %123 = load i32, i32* %j, align 4
  %124 = load i32, i32* %i, align 4
  %125 = load i32, i32* %x, align 4
  %add116 = add nsw i32 %125, 1
  %126 = load i32, i32* %y79, align 4
  %call117 = call i32 %121(%struct.glyph_string* %122, i32 %123, i32 %124, i32 %add116, i32 %126, i1 zeroext false)
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.113, %if.then.103
  %127 = load i32, i32* %width81, align 4
  %128 = load i32, i32* %x, align 4
  %add119 = add nsw i32 %128, %127
  store i32 %add119, i32* %x, align 4
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.118, %if.else.100
  %129 = load i64, i64* %glyph, align 8
  %call121 = call i64 @AREF(i64 %129, i64 9)
  %call122 = call zeroext i1 @VECTORP(i64 %call121)
  br i1 %call122, label %cond.true.124, label %cond.false.128

cond.true.124:                                    ; preds = %if.end.120
  %130 = load i64, i64* %glyph, align 8
  %call125 = call i64 @AREF(i64 %130, i64 9)
  %call126 = call i64 @AREF(i64 %call125, i64 0)
  %shr127 = ashr i64 %call126, 2
  br label %cond.end.129

cond.false.128:                                   ; preds = %if.end.120
  br label %cond.end.129

cond.end.129:                                     ; preds = %cond.false.128, %cond.true.124
  %cond130 = phi i64 [ %shr127, %cond.true.124 ], [ 0, %cond.false.128 ]
  %conv131 = trunc i64 %cond130 to i32
  store i32 %conv131, i32* %xoff, align 4
  %131 = load i64, i64* %glyph, align 8
  %call132 = call i64 @AREF(i64 %131, i64 9)
  %call133 = call zeroext i1 @VECTORP(i64 %call132)
  br i1 %call133, label %cond.true.135, label %cond.false.139

cond.true.135:                                    ; preds = %cond.end.129
  %132 = load i64, i64* %glyph, align 8
  %call136 = call i64 @AREF(i64 %132, i64 9)
  %call137 = call i64 @AREF(i64 %call136, i64 1)
  %shr138 = ashr i64 %call137, 2
  br label %cond.end.140

cond.false.139:                                   ; preds = %cond.end.129
  br label %cond.end.140

cond.end.140:                                     ; preds = %cond.false.139, %cond.true.135
  %cond141 = phi i64 [ %shr138, %cond.true.135 ], [ 0, %cond.false.139 ]
  %conv142 = trunc i64 %cond141 to i32
  store i32 %conv142, i32* %yoff, align 4
  %133 = load i64, i64* %glyph, align 8
  %call143 = call i64 @AREF(i64 %133, i64 9)
  %call144 = call zeroext i1 @VECTORP(i64 %call143)
  br i1 %call144, label %cond.true.146, label %cond.false.150

cond.true.146:                                    ; preds = %cond.end.140
  %134 = load i64, i64* %glyph, align 8
  %call147 = call i64 @AREF(i64 %134, i64 9)
  %call148 = call i64 @AREF(i64 %call147, i64 2)
  %shr149 = ashr i64 %call148, 2
  br label %cond.end.151

cond.false.150:                                   ; preds = %cond.end.140
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.false.150, %cond.true.146
  %cond152 = phi i64 [ %shr149, %cond.true.146 ], [ 0, %cond.false.150 ]
  %conv153 = trunc i64 %cond152 to i32
  store i32 %conv153, i32* %wadjust, align 4
  %135 = load %struct.font*, %struct.font** %font, align 8
  %driver154 = getelementptr inbounds %struct.font, %struct.font* %135, i32 0, i32 18
  %136 = load %struct.font_driver*, %struct.font_driver** %driver154, align 8
  %draw155 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %136, i32 0, i32 14
  %137 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw155, align 8
  %138 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %139 = load i32, i32* %i, align 4
  %140 = load i32, i32* %i, align 4
  %add156 = add nsw i32 %140, 1
  %141 = load i32, i32* %x, align 4
  %142 = load i32, i32* %xoff, align 4
  %add157 = add nsw i32 %141, %142
  %143 = load i32, i32* %y79, align 4
  %144 = load i32, i32* %yoff, align 4
  %add158 = add nsw i32 %143, %144
  %call159 = call i32 %137(%struct.glyph_string* %138, i32 %139, i32 %add156, i32 %add157, i32 %add158, i1 zeroext false)
  %145 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face160 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %145, i32 0, i32 17
  %146 = load %struct.face*, %struct.face** %face160, align 8
  %overstrike161 = getelementptr inbounds %struct.face, %struct.face* %146, i32 0, i32 13
  %147 = bitcast i24* %overstrike161 to i32*
  %bf.load162 = load i32, i32* %147, align 8
  %bf.lshr163 = lshr i32 %bf.load162, 18
  %bf.clear164 = and i32 %bf.lshr163, 1
  %bf.cast165 = trunc i32 %bf.clear164 to i1
  br i1 %bf.cast165, label %if.then.166, label %if.end.174

if.then.166:                                      ; preds = %cond.end.151
  %148 = load %struct.font*, %struct.font** %font, align 8
  %driver167 = getelementptr inbounds %struct.font, %struct.font* %148, i32 0, i32 18
  %149 = load %struct.font_driver*, %struct.font_driver** %driver167, align 8
  %draw168 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %149, i32 0, i32 14
  %150 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw168, align 8
  %151 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %152 = load i32, i32* %i, align 4
  %153 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %153, 1
  %154 = load i32, i32* %x, align 4
  %155 = load i32, i32* %xoff, align 4
  %add170 = add nsw i32 %154, %155
  %add171 = add nsw i32 %add170, 1
  %156 = load i32, i32* %y79, align 4
  %157 = load i32, i32* %yoff, align 4
  %add172 = add nsw i32 %156, %157
  %call173 = call i32 %150(%struct.glyph_string* %151, i32 %152, i32 %add169, i32 %add171, i32 %add172, i1 zeroext false)
  br label %if.end.174

if.end.174:                                       ; preds = %if.then.166, %cond.end.151
  %158 = load i32, i32* %wadjust, align 4
  %159 = load i32, i32* %x, align 4
  %add175 = add nsw i32 %159, %158
  store i32 %add175, i32* %x, align 4
  %160 = load i32, i32* %i, align 4
  %add176 = add nsw i32 %160, 1
  store i32 %add176, i32* %j, align 4
  store i32 0, i32* %width81, align 4
  br label %if.end.177

if.end.177:                                       ; preds = %if.end.174, %if.then.94
  br label %for.inc.178

for.inc.178:                                      ; preds = %if.end.177
  %161 = load i32, i32* %i, align 4
  %inc179 = add nsw i32 %161, 1
  store i32 %inc179, i32* %i, align 4
  br label %for.cond.83

for.end.180:                                      ; preds = %for.cond.83
  %162 = load i32, i32* %j, align 4
  %163 = load i32, i32* %i, align 4
  %cmp181 = icmp slt i32 %162, %163
  br i1 %cmp181, label %if.then.183, label %if.end.199

if.then.183:                                      ; preds = %for.end.180
  %164 = load %struct.font*, %struct.font** %font, align 8
  %driver184 = getelementptr inbounds %struct.font, %struct.font* %164, i32 0, i32 18
  %165 = load %struct.font_driver*, %struct.font_driver** %driver184, align 8
  %draw185 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %165, i32 0, i32 14
  %166 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw185, align 8
  %167 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %168 = load i32, i32* %j, align 4
  %169 = load i32, i32* %i, align 4
  %170 = load i32, i32* %x, align 4
  %171 = load i32, i32* %y79, align 4
  %call186 = call i32 %166(%struct.glyph_string* %167, i32 %168, i32 %169, i32 %170, i32 %171, i1 zeroext false)
  %172 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face187 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %172, i32 0, i32 17
  %173 = load %struct.face*, %struct.face** %face187, align 8
  %overstrike188 = getelementptr inbounds %struct.face, %struct.face* %173, i32 0, i32 13
  %174 = bitcast i24* %overstrike188 to i32*
  %bf.load189 = load i32, i32* %174, align 8
  %bf.lshr190 = lshr i32 %bf.load189, 18
  %bf.clear191 = and i32 %bf.lshr190, 1
  %bf.cast192 = trunc i32 %bf.clear191 to i1
  br i1 %bf.cast192, label %if.then.193, label %if.end.198

if.then.193:                                      ; preds = %if.then.183
  %175 = load %struct.font*, %struct.font** %font, align 8
  %driver194 = getelementptr inbounds %struct.font, %struct.font* %175, i32 0, i32 18
  %176 = load %struct.font_driver*, %struct.font_driver** %driver194, align 8
  %draw195 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %176, i32 0, i32 14
  %177 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw195, align 8
  %178 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %179 = load i32, i32* %j, align 4
  %180 = load i32, i32* %i, align 4
  %181 = load i32, i32* %x, align 4
  %add196 = add nsw i32 %181, 1
  %182 = load i32, i32* %y79, align 4
  %call197 = call i32 %177(%struct.glyph_string* %178, i32 %179, i32 %180, i32 %add196, i32 %182, i1 zeroext false)
  br label %if.end.198

if.end.198:                                       ; preds = %if.then.193, %if.then.183
  br label %if.end.199

if.end.199:                                       ; preds = %if.end.198, %for.end.180
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.199, %for.end
  br label %if.end.201

if.end.201:                                       ; preds = %if.end.200, %if.end.23
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_glyphless_glyph_string_foreground(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %char2b = alloca [8 x %struct.XChar2b], align 16
  %x = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %buf = alloca [7 x i8], align 1
  %str = alloca i8*, align 8
  %len = alloca i32, align 4
  %acronym = alloca i64, align 8
  %upper_len = alloca i32, align 4
  %code = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 25
  %1 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  store %struct.glyph* %1, %struct.glyph** %glyph, align 8
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 17
  %3 = load %struct.face*, %struct.face** %face, align 8
  %tobool = icmp ne %struct.face* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 17
  %5 = load %struct.face*, %struct.face** %face1, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %5, i32 0, i32 13
  %6 = bitcast i24* %box to i32*
  %bf.load = load i32, i32* %6, align 8
  %bf.clear = and i32 %bf.load, 3
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %land.lhs.true.2, label %if.else

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %7 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %7, i32 0, i32 25
  %8 = load %struct.glyph*, %struct.glyph** %first_glyph3, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %8, i32 0, i32 6
  %9 = bitcast i24* %left_box_line_p to i32*
  %bf.load4 = load i32, i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load4, 4
  %bf.clear5 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear5 to i1
  br i1 %bf.cast, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.2
  %10 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %10, i32 0, i32 0
  %11 = load i32, i32* %x6, align 4
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 17
  %13 = load %struct.face*, %struct.face** %face7, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %13, i32 0, i32 12
  %14 = load i32, i32* %box_line_width, align 4
  %cmp8 = icmp slt i32 %14, 0
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face9 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 17
  %16 = load %struct.face*, %struct.face** %face9, align 8
  %box_line_width10 = getelementptr inbounds %struct.face, %struct.face* %16, i32 0, i32 12
  %17 = load i32, i32* %box_line_width10, align 4
  %sub = sub nsw i32 0, %17
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face11 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 17
  %19 = load %struct.face*, %struct.face** %face11, align 8
  %box_line_width12 = getelementptr inbounds %struct.face, %struct.face* %19, i32 0, i32 12
  %20 = load i32, i32* %box_line_width12, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %20, %cond.false ]
  %add = add nsw i32 %11, %cond
  store i32 %add, i32* %x, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.2, %land.lhs.true, %entry
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x13 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  store i32 %22, i32* %x, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %arraydecay = getelementptr inbounds [8 x %struct.XChar2b], [8 x %struct.XChar2b]* %char2b, i32 0, i32 0
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %char2b14 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 14
  store %struct.XChar2b* %arraydecay, %struct.XChar2b** %char2b14, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.136, %if.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %nchars = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %25, i32 0, i32 15
  %26 = load i32, i32* %nchars, align 4
  %cmp15 = icmp slt i32 %24, %26
  br i1 %cmp15, label %for.body, label %for.end.138

for.body:                                         ; preds = %for.cond
  store i8* null, i8** %str, align 8
  %27 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %27, i32 0, i32 9
  %glyphless = bitcast %union.anon.1* %u to %struct.anon.4*
  %28 = bitcast %struct.anon.4* %glyphless to i32*
  %bf.load16 = load i32, i32* %28, align 4
  %bf.lshr17 = lshr i32 %bf.load16, 3
  %bf.clear18 = and i32 %bf.lshr17, 15
  store i32 %bf.clear18, i32* %len, align 4
  %29 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u19 = getelementptr inbounds %struct.glyph, %struct.glyph* %29, i32 0, i32 9
  %glyphless20 = bitcast %union.anon.1* %u19 to %struct.anon.4*
  %30 = bitcast %struct.anon.4* %glyphless20 to i32*
  %bf.load21 = load i32, i32* %30, align 4
  %bf.clear22 = and i32 %bf.load21, 3
  %cmp23 = icmp eq i32 %bf.clear22, 2
  br i1 %cmp23, label %if.then.24, label %if.else.53

if.then.24:                                       ; preds = %for.body
  %31 = load i32, i32* %len, align 4
  %cmp25 = icmp sgt i32 %31, 0
  br i1 %cmp25, label %land.lhs.true.26, label %if.end.52

land.lhs.true.26:                                 ; preds = %if.then.24
  %32 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 119), align 8
  %call = call zeroext i1 @CHAR_TABLE_P(i64 %32)
  br i1 %call, label %land.lhs.true.27, label %if.end.52

land.lhs.true.27:                                 ; preds = %land.lhs.true.26
  %33 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 119), align 8
  %call28 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %33)
  %call29 = call i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table* %call28)
  %cmp30 = icmp sge i32 %call29, 1
  br i1 %cmp30, label %if.then.31, label %if.end.52

if.then.31:                                       ; preds = %land.lhs.true.27
  %34 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u32 = getelementptr inbounds %struct.glyph, %struct.glyph* %34, i32 0, i32 9
  %glyphless33 = bitcast %union.anon.1* %u32 to %struct.anon.4*
  %35 = bitcast %struct.anon.4* %glyphless33 to i32*
  %bf.load34 = load i32, i32* %35, align 4
  %bf.lshr35 = lshr i32 %bf.load34, 2
  %bf.clear36 = and i32 %bf.lshr35, 1
  %bf.cast37 = trunc i32 %bf.clear36 to i1
  br i1 %bf.cast37, label %cond.false.44, label %cond.true.38

cond.true.38:                                     ; preds = %if.then.31
  %36 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 119), align 8
  %37 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u39 = getelementptr inbounds %struct.glyph, %struct.glyph* %37, i32 0, i32 9
  %glyphless40 = bitcast %union.anon.1* %u39 to %struct.anon.4*
  %38 = bitcast %struct.anon.4* %glyphless40 to i32*
  %bf.load41 = load i32, i32* %38, align 4
  %bf.lshr42 = lshr i32 %bf.load41, 7
  %call43 = call i64 @CHAR_TABLE_REF(i64 %36, i32 %bf.lshr42)
  br label %cond.end.46

cond.false.44:                                    ; preds = %if.then.31
  %39 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 119), align 8
  %call45 = call %struct.Lisp_Char_Table* @XCHAR_TABLE(i64 %39)
  %extras = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %call45, i32 0, i32 6
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %extras, i32 0, i64 0
  %40 = load i64, i64* %arrayidx, align 8
  br label %cond.end.46

cond.end.46:                                      ; preds = %cond.false.44, %cond.true.38
  %cond47 = phi i64 [ %call43, %cond.true.38 ], [ %40, %cond.false.44 ]
  store i64 %cond47, i64* %acronym, align 8
  %41 = load i64, i64* %acronym, align 8
  %call48 = call zeroext i1 @STRINGP(i64 %41)
  br i1 %call48, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %cond.end.46
  %42 = load i64, i64* %acronym, align 8
  %call50 = call i8* @SSDATA(i64 %42)
  store i8* %call50, i8** %str, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.49, %cond.end.46
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %land.lhs.true.27, %land.lhs.true.26, %if.then.24
  br label %if.end.75

if.else.53:                                       ; preds = %for.body
  %43 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u54 = getelementptr inbounds %struct.glyph, %struct.glyph* %43, i32 0, i32 9
  %glyphless55 = bitcast %union.anon.1* %u54 to %struct.anon.4*
  %44 = bitcast %struct.anon.4* %glyphless55 to i32*
  %bf.load56 = load i32, i32* %44, align 4
  %bf.clear57 = and i32 %bf.load56, 3
  %cmp58 = icmp eq i32 %bf.clear57, 3
  br i1 %cmp58, label %if.then.59, label %if.end.74

if.then.59:                                       ; preds = %if.else.53
  %arraydecay60 = getelementptr inbounds [7 x i8], [7 x i8]* %buf, i32 0, i32 0
  %45 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u61 = getelementptr inbounds %struct.glyph, %struct.glyph* %45, i32 0, i32 9
  %glyphless62 = bitcast %union.anon.1* %u61 to %struct.anon.4*
  %46 = bitcast %struct.anon.4* %glyphless62 to i32*
  %bf.load63 = load i32, i32* %46, align 4
  %bf.lshr64 = lshr i32 %bf.load63, 7
  %cmp65 = icmp slt i32 %bf.lshr64, 65536
  %cond66 = select i1 %cmp65, i32 4, i32 6
  %47 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u67 = getelementptr inbounds %struct.glyph, %struct.glyph* %47, i32 0, i32 9
  %glyphless68 = bitcast %union.anon.1* %u67 to %struct.anon.4*
  %48 = bitcast %struct.anon.4* %glyphless68 to i32*
  %bf.load69 = load i32, i32* %48, align 4
  %bf.lshr70 = lshr i32 %bf.load69, 7
  %add71 = add i32 %bf.lshr70, 0
  %call72 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay60, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.394, i32 0, i32 0), i32 %cond66, i32 %add71) #2
  %arraydecay73 = getelementptr inbounds [7 x i8], [7 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay73, i8** %str, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.59, %if.else.53
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.end.52
  %49 = load i8*, i8** %str, align 8
  %tobool76 = icmp ne i8* %49, null
  br i1 %tobool76, label %if.then.77, label %if.end.114

if.then.77:                                       ; preds = %if.end.75
  %50 = load i32, i32* %len, align 4
  %add78 = add nsw i32 %50, 1
  %div = sdiv i32 %add78, 2
  store i32 %div, i32* %upper_len, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc, %if.then.77
  %51 = load i32, i32* %j, align 4
  %52 = load i32, i32* %len, align 4
  %cmp80 = icmp slt i32 %51, %52
  br i1 %cmp80, label %for.body.81, label %for.end

for.body.81:                                      ; preds = %for.cond.79
  %53 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %53, i32 0, i32 18
  %54 = load %struct.font*, %struct.font** %font, align 8
  %driver = getelementptr inbounds %struct.font, %struct.font* %54, i32 0, i32 18
  %55 = load %struct.font_driver*, %struct.font_driver** %driver, align 8
  %encode_char = getelementptr inbounds %struct.font_driver, %struct.font_driver* %55, i32 0, i32 12
  %56 = load i32 (%struct.font*, i32)*, i32 (%struct.font*, i32)** %encode_char, align 8
  %57 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font82 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %57, i32 0, i32 18
  %58 = load %struct.font*, %struct.font** %font82, align 8
  %59 = load i32, i32* %j, align 4
  %idxprom = sext i32 %59 to i64
  %60 = load i8*, i8** %str, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %60, i64 %idxprom
  %61 = load i8, i8* %arrayidx83, align 1
  %conv = sext i8 %61 to i32
  %call84 = call i32 %56(%struct.font* %58, i32 %conv)
  store i32 %call84, i32* %code, align 4
  %62 = load i32, i32* %code, align 4
  %shr = lshr i32 %62, 8
  %conv85 = trunc i32 %shr to i8
  %arraydecay86 = getelementptr inbounds [8 x %struct.XChar2b], [8 x %struct.XChar2b]* %char2b, i32 0, i32 0
  %63 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %63 to i64
  %add.ptr = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %arraydecay86, i64 %idx.ext
  %byte1 = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %add.ptr, i32 0, i32 0
  store i8 %conv85, i8* %byte1, align 1
  %64 = load i32, i32* %code, align 4
  %and = and i32 %64, 255
  %conv87 = trunc i32 %and to i8
  %arraydecay88 = getelementptr inbounds [8 x %struct.XChar2b], [8 x %struct.XChar2b]* %char2b, i32 0, i32 0
  %65 = load i32, i32* %j, align 4
  %idx.ext89 = sext i32 %65 to i64
  %add.ptr90 = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %arraydecay88, i64 %idx.ext89
  %byte2 = getelementptr inbounds %struct.XChar2b, %struct.XChar2b* %add.ptr90, i32 0, i32 1
  store i8 %conv87, i8* %byte2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body.81
  %66 = load i32, i32* %j, align 4
  %inc = add nsw i32 %66, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.79

for.end:                                          ; preds = %for.cond.79
  %67 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font91 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %67, i32 0, i32 18
  %68 = load %struct.font*, %struct.font** %font91, align 8
  %driver92 = getelementptr inbounds %struct.font, %struct.font* %68, i32 0, i32 18
  %69 = load %struct.font_driver*, %struct.font_driver** %driver92, align 8
  %draw = getelementptr inbounds %struct.font_driver, %struct.font_driver* %69, i32 0, i32 14
  %70 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw, align 8
  %71 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %72 = load i32, i32* %upper_len, align 4
  %73 = load i32, i32* %x, align 4
  %74 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %74, i32 0, i32 8
  %glyphless93 = bitcast %union.anon* %slice to %struct.anon.0*
  %upper_xoff = getelementptr inbounds %struct.anon.0, %struct.anon.0* %glyphless93, i32 0, i32 0
  %75 = load i16, i16* %upper_xoff, align 2
  %conv94 = sext i16 %75 to i32
  %add95 = add nsw i32 %73, %conv94
  %76 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %76, i32 0, i32 2
  %77 = load i32, i32* %ybase, align 4
  %78 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice96 = getelementptr inbounds %struct.glyph, %struct.glyph* %78, i32 0, i32 8
  %glyphless97 = bitcast %union.anon* %slice96 to %struct.anon.0*
  %upper_yoff = getelementptr inbounds %struct.anon.0, %struct.anon.0* %glyphless97, i32 0, i32 1
  %79 = load i16, i16* %upper_yoff, align 2
  %conv98 = sext i16 %79 to i32
  %add99 = add nsw i32 %77, %conv98
  %call100 = call i32 %70(%struct.glyph_string* %71, i32 0, i32 %72, i32 %add95, i32 %add99, i1 zeroext false)
  %80 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font101 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %80, i32 0, i32 18
  %81 = load %struct.font*, %struct.font** %font101, align 8
  %driver102 = getelementptr inbounds %struct.font, %struct.font* %81, i32 0, i32 18
  %82 = load %struct.font_driver*, %struct.font_driver** %driver102, align 8
  %draw103 = getelementptr inbounds %struct.font_driver, %struct.font_driver* %82, i32 0, i32 14
  %83 = load i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)** %draw103, align 8
  %84 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %85 = load i32, i32* %upper_len, align 4
  %86 = load i32, i32* %len, align 4
  %87 = load i32, i32* %x, align 4
  %88 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice104 = getelementptr inbounds %struct.glyph, %struct.glyph* %88, i32 0, i32 8
  %glyphless105 = bitcast %union.anon* %slice104 to %struct.anon.0*
  %lower_xoff = getelementptr inbounds %struct.anon.0, %struct.anon.0* %glyphless105, i32 0, i32 2
  %89 = load i16, i16* %lower_xoff, align 2
  %conv106 = sext i16 %89 to i32
  %add107 = add nsw i32 %87, %conv106
  %90 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase108 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %90, i32 0, i32 2
  %91 = load i32, i32* %ybase108, align 4
  %92 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice109 = getelementptr inbounds %struct.glyph, %struct.glyph* %92, i32 0, i32 8
  %glyphless110 = bitcast %union.anon* %slice109 to %struct.anon.0*
  %lower_yoff = getelementptr inbounds %struct.anon.0, %struct.anon.0* %glyphless110, i32 0, i32 3
  %93 = load i16, i16* %lower_yoff, align 2
  %conv111 = sext i16 %93 to i32
  %add112 = add nsw i32 %91, %conv111
  %call113 = call i32 %83(%struct.glyph_string* %84, i32 %85, i32 %86, i32 %add107, i32 %add112, i1 zeroext false)
  br label %if.end.114

if.end.114:                                       ; preds = %for.end, %if.end.75
  %94 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u115 = getelementptr inbounds %struct.glyph, %struct.glyph* %94, i32 0, i32 9
  %glyphless116 = bitcast %union.anon.1* %u115 to %struct.anon.4*
  %95 = bitcast %struct.anon.4* %glyphless116 to i32*
  %bf.load117 = load i32, i32* %95, align 4
  %bf.clear118 = and i32 %bf.load117, 3
  %cmp119 = icmp ne i32 %bf.clear118, 0
  br i1 %cmp119, label %if.then.121, label %if.end.132

if.then.121:                                      ; preds = %if.end.114
  %96 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %96, i32 0, i32 8
  %97 = load %struct.frame*, %struct.frame** %f, align 8
  %98 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %98, i32 0, i32 24
  %99 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %100 = load i32, i32* %x, align 4
  %101 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase122 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %101, i32 0, i32 2
  %102 = load i32, i32* %ybase122, align 4
  %103 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent = getelementptr inbounds %struct.glyph, %struct.glyph* %103, i32 0, i32 3
  %104 = load i16, i16* %ascent, align 2
  %conv123 = sext i16 %104 to i32
  %sub124 = sub nsw i32 %102, %conv123
  %105 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %105, i32 0, i32 2
  %106 = load i16, i16* %pixel_width, align 2
  %conv125 = sext i16 %106 to i32
  %sub126 = sub nsw i32 %conv125, 1
  %107 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %ascent127 = getelementptr inbounds %struct.glyph, %struct.glyph* %107, i32 0, i32 3
  %108 = load i16, i16* %ascent127, align 2
  %conv128 = sext i16 %108 to i32
  %109 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %descent = getelementptr inbounds %struct.glyph, %struct.glyph* %109, i32 0, i32 4
  %110 = load i16, i16* %descent, align 2
  %conv129 = sext i16 %110 to i32
  %add130 = add nsw i32 %conv128, %conv129
  %sub131 = sub nsw i32 %add130, 1
  call void @x_draw_rectangle(%struct.frame* %97, %struct._XGC* %99, i32 %100, i32 %sub124, i32 %sub126, i32 %sub131)
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.121, %if.end.114
  %111 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width133 = getelementptr inbounds %struct.glyph, %struct.glyph* %111, i32 0, i32 2
  %112 = load i16, i16* %pixel_width133, align 2
  %conv134 = sext i16 %112 to i32
  %113 = load i32, i32* %x, align 4
  %add135 = add nsw i32 %113, %conv134
  store i32 %add135, i32* %x, align 4
  br label %for.inc.136

for.inc.136:                                      ; preds = %if.end.132
  %114 = load i32, i32* %i, align 4
  %inc137 = add nsw i32 %114, 1
  store i32 %inc137, i32* %i, align 4
  %115 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %115, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %glyph, align 8
  br label %for.cond

for.end.138:                                      ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_underwave(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %wave_height = alloca i32, align 4
  %wave_length = alloca i32, align 4
  %dx = alloca i32, align 4
  %dy = alloca i32, align 4
  %x0 = alloca i32, align 4
  %y0 = alloca i32, align 4
  %width = alloca i32, align 4
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %x2 = alloca i32, align 4
  %y2 = alloca i32, align 4
  %xmax = alloca i32, align 4
  %odd = alloca i8, align 1
  %wave_clip = alloca %struct.XRectangle, align 2
  %string_clip = alloca %struct.XRectangle, align 2
  %final_clip = alloca %struct.XRectangle, align 2
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  store i32 3, i32* %wave_height, align 4
  store i32 2, i32* %wave_length, align 4
  %0 = load i32, i32* %wave_length, align 4
  store i32 %0, i32* %dx, align 4
  %1 = load i32, i32* %wave_height, align 4
  %sub = sub nsw i32 %1, 1
  store i32 %sub, i32* %dy, align 4
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 0
  %3 = load i32, i32* %x, align 4
  store i32 %3, i32* %x0, align 4
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 2
  %5 = load i32, i32* %ybase, align 4
  %6 = load i32, i32* %wave_height, align 4
  %sub1 = sub nsw i32 %5, %6
  %add = add nsw i32 %sub1, 3
  store i32 %add, i32* %y0, align 4
  %7 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %width2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %7, i32 0, i32 3
  %8 = load i32, i32* %width2, align 4
  store i32 %8, i32* %width, align 4
  %9 = load i32, i32* %x0, align 4
  %10 = load i32, i32* %width, align 4
  %add3 = add nsw i32 %9, %10
  store i32 %add3, i32* %xmax, align 4
  %11 = load i32, i32* %x0, align 4
  %conv = trunc i32 %11 to i16
  %x4 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %wave_clip, i32 0, i32 0
  store i16 %conv, i16* %x4, align 2
  %12 = load i32, i32* %y0, align 4
  %conv5 = trunc i32 %12 to i16
  %y = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %wave_clip, i32 0, i32 1
  store i16 %conv5, i16* %y, align 2
  %13 = load i32, i32* %width, align 4
  %conv6 = trunc i32 %13 to i16
  %width7 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %wave_clip, i32 0, i32 2
  store i16 %conv6, i16* %width7, align 2
  %14 = load i32, i32* %wave_height, align 4
  %conv8 = trunc i32 %14 to i16
  %height = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %wave_clip, i32 0, i32 3
  store i16 %conv8, i16* %height, align 2
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @get_glyph_string_clip_rect(%struct.glyph_string* %15, %struct.XRectangle* %string_clip)
  %call = call zeroext i1 @x_intersect_rectangles(%struct.XRectangle* %wave_clip, %struct.XRectangle* %string_clip, %struct.XRectangle* %final_clip)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %16 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %16, i32 0, i32 10
  %17 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 24
  %19 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call9 = call i32 @XSetClipRectangles(%struct._XDisplay* %17, %struct._XGC* %19, i32 0, i32 0, %struct.XRectangle* %final_clip, i32 1, i32 0)
  %20 = load i32, i32* %x0, align 4
  %21 = load i32, i32* %x0, align 4
  %22 = load i32, i32* %dx, align 4
  %rem = srem i32 %21, %22
  %sub10 = sub nsw i32 %20, %rem
  store i32 %sub10, i32* %x1, align 4
  %23 = load i32, i32* %x1, align 4
  %24 = load i32, i32* %dx, align 4
  %add11 = add nsw i32 %23, %24
  store i32 %add11, i32* %x2, align 4
  %25 = load i32, i32* %x1, align 4
  %26 = load i32, i32* %dx, align 4
  %div = sdiv i32 %25, %26
  %and = and i32 %div, 1
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %odd, align 1
  %27 = load i32, i32* %y0, align 4
  store i32 %27, i32* %y2, align 4
  store i32 %27, i32* %y1, align 4
  %28 = load i8, i8* %odd, align 1
  %tobool12 = trunc i8 %28 to i1
  br i1 %tobool12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.end
  %29 = load i32, i32* %dy, align 4
  %30 = load i32, i32* %y1, align 4
  %add14 = add nsw i32 %30, %29
  store i32 %add14, i32* %y1, align 4
  br label %if.end.16

if.else:                                          ; preds = %if.end
  %31 = load i32, i32* %dy, align 4
  %32 = load i32, i32* %y2, align 4
  %add15 = add nsw i32 %32, %31
  store i32 %add15, i32* %y2, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.13
  %33 = load i32, i32* %dx, align 4
  %sub17 = sub nsw i32 2147483647, %33
  %34 = load i32, i32* %xmax, align 4
  %cmp = icmp slt i32 %sub17, %34
  br i1 %cmp, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  call void @emacs_abort() #10
  unreachable

if.end.20:                                        ; preds = %if.end.16
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.20
  %35 = load i32, i32* %x1, align 4
  %36 = load i32, i32* %xmax, align 4
  %cmp21 = icmp sle i32 %35, %36
  br i1 %cmp21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %37 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display23 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %37, i32 0, i32 10
  %38 = load %struct._XDisplay*, %struct._XDisplay** %display23, align 8
  %39 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %window = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %39, i32 0, i32 11
  %40 = load i64, i64* %window, align 8
  %41 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc24 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %41, i32 0, i32 24
  %42 = load %struct._XGC*, %struct._XGC** %gc24, align 8
  %43 = load i32, i32* %x1, align 4
  %44 = load i32, i32* %y1, align 4
  %45 = load i32, i32* %x2, align 4
  %46 = load i32, i32* %y2, align 4
  %call25 = call i32 @XDrawLine(%struct._XDisplay* %38, i64 %40, %struct._XGC* %42, i32 %43, i32 %44, i32 %45, i32 %46)
  %47 = load i32, i32* %x2, align 4
  store i32 %47, i32* %x1, align 4
  %48 = load i32, i32* %y2, align 4
  store i32 %48, i32* %y1, align 4
  %49 = load i32, i32* %dx, align 4
  %50 = load i32, i32* %x2, align 4
  %add26 = add nsw i32 %50, %49
  store i32 %add26, i32* %x2, align 4
  %51 = load i32, i32* %y0, align 4
  %52 = load i8, i8* %odd, align 1
  %tobool27 = trunc i8 %52 to i1
  %conv28 = zext i1 %tobool27 to i32
  %53 = load i32, i32* %dy, align 4
  %mul = mul nsw i32 %conv28, %53
  %add29 = add nsw i32 %51, %mul
  store i32 %add29, i32* %y2, align 4
  %54 = load i8, i8* %odd, align 1
  %tobool30 = trunc i8 %54 to i1
  %lnot = xor i1 %tobool30, true
  %frombool31 = zext i1 %lnot to i8
  store i8 %frombool31, i8* %odd, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %55 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display32 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %55, i32 0, i32 10
  %56 = load %struct._XDisplay*, %struct._XDisplay** %display32, align 8
  %57 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc33 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %57, i32 0, i32 24
  %58 = load %struct._XGC*, %struct._XGC** %gc33, align 8
  %59 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %clip = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %59, i32 0, i32 31
  %arraydecay = getelementptr inbounds [2 x %struct.XRectangle], [2 x %struct.XRectangle]* %clip, i32 0, i32 0
  %60 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %num_clips = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %60, i32 0, i32 32
  %61 = load i32, i32* %num_clips, align 4
  %call34 = call i32 @XSetClipRectangles(%struct._XDisplay* %56, %struct._XGC* %58, i32 0, i32 0, %struct.XRectangle* %arraydecay, i32 %61, i32 0)
  br label %return

return:                                           ; preds = %while.end, %if.then
  ret void
}

declare i32 @XGetGCValues(%struct._XDisplay*, %struct._XGC*, i64, %struct.XGCValues*) #1

declare void @prepare_face_for_display(%struct.frame*, %struct.face*) #1

; Function Attrs: nounwind uwtable
define internal void @x_set_mode_line_face_gc(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 17
  %1 = load %struct.face*, %struct.face** %face, align 8
  %gc = getelementptr inbounds %struct.face, %struct.face* %1, i32 0, i32 2
  %2 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 24
  store %struct._XGC* %2, %struct._XGC** %gc1, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_set_cursor_gc(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %mask = alloca i64, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 18
  %1 = load %struct.font*, %struct.font** %font, align 8
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 8
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %font1 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 25
  %5 = load %struct.font*, %struct.font** %font1, align 8
  %cmp = icmp eq %struct.font* %1, %5
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 17
  %7 = load %struct.face*, %struct.face** %face, align 8
  %background = getelementptr inbounds %struct.face, %struct.face* %7, i32 0, i32 5
  %8 = load i64, i64* %background, align 8
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 8
  %10 = load %struct.frame*, %struct.frame** %f2, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 77
  %11 = load i64, i64* %background_pixel, align 8
  %cmp3 = icmp eq i64 %8, %11
  br i1 %cmp3, label %land.lhs.true.4, label %if.else

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 17
  %13 = load %struct.face*, %struct.face** %face5, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %13, i32 0, i32 4
  %14 = load i64, i64* %foreground, align 8
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 8
  %16 = load %struct.frame*, %struct.frame** %f6, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 78
  %17 = load i64, i64* %foreground_pixel, align 8
  %cmp7 = icmp eq i64 %14, %17
  br i1 %cmp7, label %land.lhs.true.8, label %if.else

land.lhs.true.8:                                  ; preds = %land.lhs.true.4
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %cmp9 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 19
  %19 = load %struct.composition*, %struct.composition** %cmp9, align 8
  %tobool = icmp ne %struct.composition* %19, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true.8
  %20 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f10 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %20, i32 0, i32 8
  %21 = load %struct.frame*, %struct.frame** %f10, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x12, align 8
  %cursor_gc = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 8
  %23 = load %struct._XGC*, %struct._XGC** %cursor_gc, align 8
  %24 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %24, i32 0, i32 24
  store %struct._XGC* %23, %struct._XGC** %gc, align 8
  br label %if.end.86

if.else:                                          ; preds = %land.lhs.true.8, %land.lhs.true.4, %land.lhs.true, %entry
  %25 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f13 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %25, i32 0, i32 8
  %26 = load %struct.frame*, %struct.frame** %f13, align 8
  %output_data14 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 62
  %x15 = bitcast %union.output_data* %output_data14 to %struct.x_output**
  %27 = load %struct.x_output*, %struct.x_output** %x15, align 8
  %cursor_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %27, i32 0, i32 28
  %28 = load i64, i64* %cursor_pixel, align 8
  %background16 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  store i64 %28, i64* %background16, align 8
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face17 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %29, i32 0, i32 17
  %30 = load %struct.face*, %struct.face** %face17, align 8
  %background18 = getelementptr inbounds %struct.face, %struct.face* %30, i32 0, i32 5
  %31 = load i64, i64* %background18, align 8
  %foreground19 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %31, i64* %foreground19, align 8
  %foreground20 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %32 = load i64, i64* %foreground20, align 8
  %background21 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %33 = load i64, i64* %background21, align 8
  %cmp22 = icmp eq i64 %32, %33
  br i1 %cmp22, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %if.else
  %34 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face24 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %34, i32 0, i32 17
  %35 = load %struct.face*, %struct.face** %face24, align 8
  %foreground25 = getelementptr inbounds %struct.face, %struct.face* %35, i32 0, i32 4
  %36 = load i64, i64* %foreground25, align 8
  %foreground26 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %36, i64* %foreground26, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.23, %if.else
  %foreground27 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %37 = load i64, i64* %foreground27, align 8
  %background28 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %38 = load i64, i64* %background28, align 8
  %cmp29 = icmp eq i64 %37, %38
  br i1 %cmp29, label %if.then.30, label %if.end.35

if.then.30:                                       ; preds = %if.end
  %39 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f31 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %39, i32 0, i32 8
  %40 = load %struct.frame*, %struct.frame** %f31, align 8
  %output_data32 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 62
  %x33 = bitcast %union.output_data* %output_data32 to %struct.x_output**
  %41 = load %struct.x_output*, %struct.x_output** %x33, align 8
  %cursor_foreground_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %41, i32 0, i32 31
  %42 = load i64, i64* %cursor_foreground_pixel, align 8
  %foreground34 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %42, i64* %foreground34, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.30, %if.end
  %foreground36 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %43 = load i64, i64* %foreground36, align 8
  %background37 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %44 = load i64, i64* %background37, align 8
  %cmp38 = icmp eq i64 %43, %44
  br i1 %cmp38, label %if.then.39, label %if.end.43

if.then.39:                                       ; preds = %if.end.35
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face40 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 17
  %46 = load %struct.face*, %struct.face** %face40, align 8
  %foreground41 = getelementptr inbounds %struct.face, %struct.face* %46, i32 0, i32 4
  %47 = load i64, i64* %foreground41, align 8
  %foreground42 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %47, i64* %foreground42, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.39, %if.end.35
  %background44 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %48 = load i64, i64* %background44, align 8
  %49 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face45 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %49, i32 0, i32 17
  %50 = load %struct.face*, %struct.face** %face45, align 8
  %background46 = getelementptr inbounds %struct.face, %struct.face* %50, i32 0, i32 5
  %51 = load i64, i64* %background46, align 8
  %cmp47 = icmp eq i64 %48, %51
  br i1 %cmp47, label %land.lhs.true.48, label %if.end.60

land.lhs.true.48:                                 ; preds = %if.end.43
  %foreground49 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %52 = load i64, i64* %foreground49, align 8
  %53 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face50 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %53, i32 0, i32 17
  %54 = load %struct.face*, %struct.face** %face50, align 8
  %foreground51 = getelementptr inbounds %struct.face, %struct.face* %54, i32 0, i32 4
  %55 = load i64, i64* %foreground51, align 8
  %cmp52 = icmp eq i64 %52, %55
  br i1 %cmp52, label %if.then.53, label %if.end.60

if.then.53:                                       ; preds = %land.lhs.true.48
  %56 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face54 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %56, i32 0, i32 17
  %57 = load %struct.face*, %struct.face** %face54, align 8
  %foreground55 = getelementptr inbounds %struct.face, %struct.face* %57, i32 0, i32 4
  %58 = load i64, i64* %foreground55, align 8
  %background56 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  store i64 %58, i64* %background56, align 8
  %59 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face57 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %59, i32 0, i32 17
  %60 = load %struct.face*, %struct.face** %face57, align 8
  %background58 = getelementptr inbounds %struct.face, %struct.face* %60, i32 0, i32 5
  %61 = load i64, i64* %background58, align 8
  %foreground59 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %61, i64* %foreground59, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.53, %land.lhs.true.48, %if.end.43
  %graphics_exposures = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 17
  store i32 0, i32* %graphics_exposures, align 4
  store i64 65548, i64* %mask, align 8
  %62 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f61 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %62, i32 0, i32 8
  %63 = load %struct.frame*, %struct.frame** %f61, align 8
  %output_data62 = getelementptr inbounds %struct.frame, %struct.frame* %63, i32 0, i32 62
  %x63 = bitcast %union.output_data* %output_data62 to %struct.x_output**
  %64 = load %struct.x_output*, %struct.x_output** %x63, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %64, i32 0, i32 44
  %65 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %scratch_cursor_gc = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %65, i32 0, i32 24
  %66 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc, align 8
  %tobool64 = icmp ne %struct._XGC* %66, null
  br i1 %tobool64, label %if.then.65, label %if.else.71

if.then.65:                                       ; preds = %if.end.60
  %67 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %67, i32 0, i32 10
  %68 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %69 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f66 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %69, i32 0, i32 8
  %70 = load %struct.frame*, %struct.frame** %f66, align 8
  %output_data67 = getelementptr inbounds %struct.frame, %struct.frame* %70, i32 0, i32 62
  %x68 = bitcast %union.output_data* %output_data67 to %struct.x_output**
  %71 = load %struct.x_output*, %struct.x_output** %x68, align 8
  %display_info69 = getelementptr inbounds %struct.x_output, %struct.x_output* %71, i32 0, i32 44
  %72 = load %struct.x_display_info*, %struct.x_display_info** %display_info69, align 8
  %scratch_cursor_gc70 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %72, i32 0, i32 24
  %73 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc70, align 8
  %74 = load i64, i64* %mask, align 8
  %call = call i32 @XChangeGC(%struct._XDisplay* %68, %struct._XGC* %73, i64 %74, %struct.XGCValues* %xgcv)
  br label %if.end.79

if.else.71:                                       ; preds = %if.end.60
  %75 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display72 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %75, i32 0, i32 10
  %76 = load %struct._XDisplay*, %struct._XDisplay** %display72, align 8
  %77 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %window = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %77, i32 0, i32 11
  %78 = load i64, i64* %window, align 8
  %79 = load i64, i64* %mask, align 8
  %call73 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %76, i64 %78, i64 %79, %struct.XGCValues* %xgcv)
  %80 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f74 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %80, i32 0, i32 8
  %81 = load %struct.frame*, %struct.frame** %f74, align 8
  %output_data75 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 62
  %x76 = bitcast %union.output_data* %output_data75 to %struct.x_output**
  %82 = load %struct.x_output*, %struct.x_output** %x76, align 8
  %display_info77 = getelementptr inbounds %struct.x_output, %struct.x_output* %82, i32 0, i32 44
  %83 = load %struct.x_display_info*, %struct.x_display_info** %display_info77, align 8
  %scratch_cursor_gc78 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %83, i32 0, i32 24
  store %struct._XGC* %call73, %struct._XGC** %scratch_cursor_gc78, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.71, %if.then.65
  %84 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f80 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %84, i32 0, i32 8
  %85 = load %struct.frame*, %struct.frame** %f80, align 8
  %output_data81 = getelementptr inbounds %struct.frame, %struct.frame* %85, i32 0, i32 62
  %x82 = bitcast %union.output_data* %output_data81 to %struct.x_output**
  %86 = load %struct.x_output*, %struct.x_output** %x82, align 8
  %display_info83 = getelementptr inbounds %struct.x_output, %struct.x_output* %86, i32 0, i32 44
  %87 = load %struct.x_display_info*, %struct.x_display_info** %display_info83, align 8
  %scratch_cursor_gc84 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %87, i32 0, i32 24
  %88 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc84, align 8
  %89 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc85 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %89, i32 0, i32 24
  store %struct._XGC* %88, %struct._XGC** %gc85, align 8
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.79, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_set_mouse_face_gc(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %face_id = alloca i32, align 4
  %face = alloca %struct.face*, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %mask = alloca i64, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 8
  %4 = load %struct.frame*, %struct.frame** %f1, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %mouse_highlight = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 25
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %7, i32 0, i32 8
  %8 = load %struct.frame*, %struct.frame** %f2, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data3 to %struct.tty_output**
  %9 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %display_info4 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %9, i32 0, i32 0
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %display_info4, align 8
  %mouse_highlight5 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 14
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.Mouse_HLInfo* [ %mouse_highlight, %cond.true ], [ %mouse_highlight5, %cond.false ]
  %mouse_face_face_id = getelementptr inbounds %struct.Mouse_HLInfo, %struct.Mouse_HLInfo* %cond, i32 0, i32 7
  %11 = load i32, i32* %mouse_face_face_id, align 4
  store i32 %11, i32* %face_id, align 4
  br i1 true, label %cond.true.6, label %cond.false.10

cond.true.6:                                      ; preds = %cond.end
  %12 = load i32, i32* %face_id, align 4
  %add = add i32 %12, 0
  %13 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %13, i32 0, i32 8
  %14 = load %struct.frame*, %struct.frame** %f7, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 20
  %15 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %15, i32 0, i32 4
  %16 = load i32, i32* %used, align 4
  %add8 = add i32 %16, 0
  %cmp9 = icmp ult i32 %add, %add8
  br i1 %cmp9, label %cond.true.19, label %cond.false.22

cond.false.10:                                    ; preds = %cond.end
  %17 = load i32, i32* %face_id, align 4
  %conv = sext i32 %17 to i64
  %add11 = add i64 %conv, 0
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f12 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 8
  %19 = load %struct.frame*, %struct.frame** %f12, align 8
  %face_cache13 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 20
  %20 = load %struct.face_cache*, %struct.face_cache** %face_cache13, align 8
  %used14 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %20, i32 0, i32 4
  %21 = load i32, i32* %used14, align 4
  %conv15 = sext i32 %21 to i64
  %add16 = add i64 %conv15, 0
  %cmp17 = icmp ult i64 %add11, %add16
  br i1 %cmp17, label %cond.true.19, label %cond.false.22

cond.true.19:                                     ; preds = %cond.false.10, %cond.true.6
  %22 = load i32, i32* %face_id, align 4
  %idxprom = sext i32 %22 to i64
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f20 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 8
  %24 = load %struct.frame*, %struct.frame** %f20, align 8
  %face_cache21 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 20
  %25 = load %struct.face_cache*, %struct.face_cache** %face_cache21, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %25, i32 0, i32 2
  %26 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %26, i64 %idxprom
  %27 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end.23

cond.false.22:                                    ; preds = %cond.false.10, %cond.true.6
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.22, %cond.true.19
  %cond24 = phi %struct.face* [ %27, %cond.true.19 ], [ null, %cond.false.22 ]
  store %struct.face* %cond24, %struct.face** %face, align 8
  %28 = load %struct.face*, %struct.face** %face, align 8
  %cmp25 = icmp eq %struct.face* %28, null
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.23
  br i1 true, label %cond.true.27, label %cond.false.34

cond.true.27:                                     ; preds = %if.then
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f28 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %29, i32 0, i32 8
  %30 = load %struct.frame*, %struct.frame** %f28, align 8
  %face_cache29 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 20
  %31 = load %struct.face_cache*, %struct.face_cache** %face_cache29, align 8
  %used30 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %31, i32 0, i32 4
  %32 = load i32, i32* %used30, align 4
  %add31 = add i32 %32, 0
  %cmp32 = icmp ult i32 9, %add31
  br i1 %cmp32, label %cond.true.42, label %cond.false.47

cond.false.34:                                    ; preds = %if.then
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f35 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 8
  %34 = load %struct.frame*, %struct.frame** %f35, align 8
  %face_cache36 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 20
  %35 = load %struct.face_cache*, %struct.face_cache** %face_cache36, align 8
  %used37 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %35, i32 0, i32 4
  %36 = load i32, i32* %used37, align 4
  %conv38 = sext i32 %36 to i64
  %add39 = add i64 %conv38, 0
  %cmp40 = icmp ult i64 9, %add39
  br i1 %cmp40, label %cond.true.42, label %cond.false.47

cond.true.42:                                     ; preds = %cond.false.34, %cond.true.27
  %37 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f43 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %37, i32 0, i32 8
  %38 = load %struct.frame*, %struct.frame** %f43, align 8
  %face_cache44 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 20
  %39 = load %struct.face_cache*, %struct.face_cache** %face_cache44, align 8
  %faces_by_id45 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %39, i32 0, i32 2
  %40 = load %struct.face**, %struct.face*** %faces_by_id45, align 8
  %arrayidx46 = getelementptr inbounds %struct.face*, %struct.face** %40, i64 9
  %41 = load %struct.face*, %struct.face** %arrayidx46, align 8
  br label %cond.end.48

cond.false.47:                                    ; preds = %cond.false.34, %cond.true.27
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.47, %cond.true.42
  %cond49 = phi %struct.face* [ %41, %cond.true.42 ], [ null, %cond.false.47 ]
  store %struct.face* %cond49, %struct.face** %face, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end.48, %cond.end.23
  %42 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %42, i32 0, i32 25
  %43 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %43, i32 0, i32 6
  %44 = bitcast i24* %type to i32*
  %bf.load50 = load i32, i32* %44, align 8
  %bf.clear51 = and i32 %bf.load50, 7
  %cmp52 = icmp eq i32 %bf.clear51, 0
  br i1 %cmp52, label %if.then.54, label %if.else

if.then.54:                                       ; preds = %if.end
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f55 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 8
  %46 = load %struct.frame*, %struct.frame** %f55, align 8
  %47 = load %struct.face*, %struct.face** %face, align 8
  %48 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph56 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %48, i32 0, i32 25
  %49 = load %struct.glyph*, %struct.glyph** %first_glyph56, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %49, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  %50 = load i32, i32* %ch, align 4
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %call57 = call i32 @face_for_char(%struct.frame* %46, %struct.face* %47, i32 %50, i64 -1, i64 %call)
  store i32 %call57, i32* %face_id, align 4
  br label %if.end.61

if.else:                                          ; preds = %if.end
  %51 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f58 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %51, i32 0, i32 8
  %52 = load %struct.frame*, %struct.frame** %f58, align 8
  %53 = load %struct.face*, %struct.face** %face, align 8
  %call59 = call i64 @builtin_lisp_symbol(i32 0)
  %call60 = call i32 @face_for_char(%struct.frame* %52, %struct.face* %53, i32 0, i64 -1, i64 %call59)
  store i32 %call60, i32* %face_id, align 4
  br label %if.end.61

if.end.61:                                        ; preds = %if.else, %if.then.54
  br i1 true, label %cond.true.62, label %cond.false.70

cond.true.62:                                     ; preds = %if.end.61
  %54 = load i32, i32* %face_id, align 4
  %add63 = add i32 %54, 0
  %55 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f64 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %55, i32 0, i32 8
  %56 = load %struct.frame*, %struct.frame** %f64, align 8
  %face_cache65 = getelementptr inbounds %struct.frame, %struct.frame* %56, i32 0, i32 20
  %57 = load %struct.face_cache*, %struct.face_cache** %face_cache65, align 8
  %used66 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %57, i32 0, i32 4
  %58 = load i32, i32* %used66, align 4
  %add67 = add i32 %58, 0
  %cmp68 = icmp ult i32 %add63, %add67
  br i1 %cmp68, label %cond.true.80, label %cond.false.86

cond.false.70:                                    ; preds = %if.end.61
  %59 = load i32, i32* %face_id, align 4
  %conv71 = sext i32 %59 to i64
  %add72 = add i64 %conv71, 0
  %60 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f73 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %60, i32 0, i32 8
  %61 = load %struct.frame*, %struct.frame** %f73, align 8
  %face_cache74 = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 20
  %62 = load %struct.face_cache*, %struct.face_cache** %face_cache74, align 8
  %used75 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %62, i32 0, i32 4
  %63 = load i32, i32* %used75, align 4
  %conv76 = sext i32 %63 to i64
  %add77 = add i64 %conv76, 0
  %cmp78 = icmp ult i64 %add72, %add77
  br i1 %cmp78, label %cond.true.80, label %cond.false.86

cond.true.80:                                     ; preds = %cond.false.70, %cond.true.62
  %64 = load i32, i32* %face_id, align 4
  %idxprom81 = sext i32 %64 to i64
  %65 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f82 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %65, i32 0, i32 8
  %66 = load %struct.frame*, %struct.frame** %f82, align 8
  %face_cache83 = getelementptr inbounds %struct.frame, %struct.frame* %66, i32 0, i32 20
  %67 = load %struct.face_cache*, %struct.face_cache** %face_cache83, align 8
  %faces_by_id84 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %67, i32 0, i32 2
  %68 = load %struct.face**, %struct.face*** %faces_by_id84, align 8
  %arrayidx85 = getelementptr inbounds %struct.face*, %struct.face** %68, i64 %idxprom81
  %69 = load %struct.face*, %struct.face** %arrayidx85, align 8
  br label %cond.end.87

cond.false.86:                                    ; preds = %cond.false.70, %cond.true.62
  br label %cond.end.87

cond.end.87:                                      ; preds = %cond.false.86, %cond.true.80
  %cond88 = phi %struct.face* [ %69, %cond.true.80 ], [ null, %cond.false.86 ]
  %70 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face89 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %70, i32 0, i32 17
  store %struct.face* %cond88, %struct.face** %face89, align 8
  %71 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f90 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %71, i32 0, i32 8
  %72 = load %struct.frame*, %struct.frame** %f90, align 8
  %73 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face91 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %73, i32 0, i32 17
  %74 = load %struct.face*, %struct.face** %face91, align 8
  call void @prepare_face_for_display(%struct.frame* %72, %struct.face* %74)
  %75 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %font = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %75, i32 0, i32 18
  %76 = load %struct.font*, %struct.font** %font, align 8
  %77 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face92 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %77, i32 0, i32 17
  %78 = load %struct.face*, %struct.face** %face92, align 8
  %font93 = getelementptr inbounds %struct.face, %struct.face* %78, i32 0, i32 10
  %79 = load %struct.font*, %struct.font** %font93, align 8
  %cmp94 = icmp eq %struct.font* %76, %79
  br i1 %cmp94, label %if.then.96, label %if.else.99

if.then.96:                                       ; preds = %cond.end.87
  %80 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face97 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %80, i32 0, i32 17
  %81 = load %struct.face*, %struct.face** %face97, align 8
  %gc = getelementptr inbounds %struct.face, %struct.face* %81, i32 0, i32 2
  %82 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %83 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc98 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %83, i32 0, i32 24
  store %struct._XGC* %82, %struct._XGC** %gc98, align 8
  br label %if.end.130

if.else.99:                                       ; preds = %cond.end.87
  %84 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face100 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %84, i32 0, i32 17
  %85 = load %struct.face*, %struct.face** %face100, align 8
  %background = getelementptr inbounds %struct.face, %struct.face* %85, i32 0, i32 5
  %86 = load i64, i64* %background, align 8
  %background101 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  store i64 %86, i64* %background101, align 8
  %87 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face102 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %87, i32 0, i32 17
  %88 = load %struct.face*, %struct.face** %face102, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %88, i32 0, i32 4
  %89 = load i64, i64* %foreground, align 8
  %foreground103 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %89, i64* %foreground103, align 8
  %graphics_exposures = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 17
  store i32 0, i32* %graphics_exposures, align 4
  store i64 65548, i64* %mask, align 8
  %90 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f104 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %90, i32 0, i32 8
  %91 = load %struct.frame*, %struct.frame** %f104, align 8
  %output_data105 = getelementptr inbounds %struct.frame, %struct.frame* %91, i32 0, i32 62
  %x106 = bitcast %union.output_data* %output_data105 to %struct.x_output**
  %92 = load %struct.x_output*, %struct.x_output** %x106, align 8
  %display_info107 = getelementptr inbounds %struct.x_output, %struct.x_output* %92, i32 0, i32 44
  %93 = load %struct.x_display_info*, %struct.x_display_info** %display_info107, align 8
  %scratch_cursor_gc = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %93, i32 0, i32 24
  %94 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc, align 8
  %tobool = icmp ne %struct._XGC* %94, null
  br i1 %tobool, label %if.then.108, label %if.else.115

if.then.108:                                      ; preds = %if.else.99
  %95 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %95, i32 0, i32 10
  %96 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %97 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f109 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %97, i32 0, i32 8
  %98 = load %struct.frame*, %struct.frame** %f109, align 8
  %output_data110 = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 62
  %x111 = bitcast %union.output_data* %output_data110 to %struct.x_output**
  %99 = load %struct.x_output*, %struct.x_output** %x111, align 8
  %display_info112 = getelementptr inbounds %struct.x_output, %struct.x_output* %99, i32 0, i32 44
  %100 = load %struct.x_display_info*, %struct.x_display_info** %display_info112, align 8
  %scratch_cursor_gc113 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %100, i32 0, i32 24
  %101 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc113, align 8
  %102 = load i64, i64* %mask, align 8
  %call114 = call i32 @XChangeGC(%struct._XDisplay* %96, %struct._XGC* %101, i64 %102, %struct.XGCValues* %xgcv)
  br label %if.end.123

if.else.115:                                      ; preds = %if.else.99
  %103 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display116 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %103, i32 0, i32 10
  %104 = load %struct._XDisplay*, %struct._XDisplay** %display116, align 8
  %105 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %window = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %105, i32 0, i32 11
  %106 = load i64, i64* %window, align 8
  %107 = load i64, i64* %mask, align 8
  %call117 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %104, i64 %106, i64 %107, %struct.XGCValues* %xgcv)
  %108 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f118 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %108, i32 0, i32 8
  %109 = load %struct.frame*, %struct.frame** %f118, align 8
  %output_data119 = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 62
  %x120 = bitcast %union.output_data* %output_data119 to %struct.x_output**
  %110 = load %struct.x_output*, %struct.x_output** %x120, align 8
  %display_info121 = getelementptr inbounds %struct.x_output, %struct.x_output* %110, i32 0, i32 44
  %111 = load %struct.x_display_info*, %struct.x_display_info** %display_info121, align 8
  %scratch_cursor_gc122 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %111, i32 0, i32 24
  store %struct._XGC* %call117, %struct._XGC** %scratch_cursor_gc122, align 8
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.115, %if.then.108
  %112 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f124 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %112, i32 0, i32 8
  %113 = load %struct.frame*, %struct.frame** %f124, align 8
  %output_data125 = getelementptr inbounds %struct.frame, %struct.frame* %113, i32 0, i32 62
  %x126 = bitcast %union.output_data* %output_data125 to %struct.x_output**
  %114 = load %struct.x_output*, %struct.x_output** %x126, align 8
  %display_info127 = getelementptr inbounds %struct.x_output, %struct.x_output* %114, i32 0, i32 44
  %115 = load %struct.x_display_info*, %struct.x_display_info** %display_info127, align 8
  %scratch_cursor_gc128 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %115, i32 0, i32 24
  %116 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc128, align 8
  %117 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc129 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %117, i32 0, i32 24
  store %struct._XGC* %116, %struct._XGC** %gc129, align 8
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.123, %if.then.96
  ret void
}

declare %struct._XGC* @XCreateGC(%struct._XDisplay*, i64, i64, %struct.XGCValues*) #1

declare i32 @face_for_char(%struct.frame*, %struct.face*, i32, i64, i64) #1

declare i32 @get_glyph_string_clip_rects(%struct.glyph_string*, %struct.XRectangle*, i32) #1

declare i32 @window_box_left_offset(%struct.window*, i32) #1

declare i32 @window_box_right(%struct.window*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_draw_glyph_string_bg_rect(%struct.glyph_string* %s, i32 %x, i32 %y, i32 %w, i32 %h) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %stippled_p = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 23
  %bf.load = load i8, i8* %stippled_p, align 8
  %bf.lshr = lshr i8 %bf.load, 3
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %1, i32 0, i32 10
  %2 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 24
  %4 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call = call i32 @XSetFillStyle(%struct._XDisplay* %2, %struct._XGC* %4, i32 3)
  %5 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %5, i32 0, i32 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %7 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %7, i32 0, i32 24
  %8 = load %struct._XGC*, %struct._XGC** %gc1, align 8
  %9 = load i32, i32* %x.addr, align 4
  %10 = load i32, i32* %y.addr, align 4
  %11 = load i32, i32* %w.addr, align 4
  %12 = load i32, i32* %h.addr, align 4
  call void @x_fill_rectangle(%struct.frame* %6, %struct._XGC* %8, i32 %9, i32 %10, i32 %11, i32 %12)
  %13 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %13, i32 0, i32 10
  %14 = load %struct._XDisplay*, %struct._XDisplay** %display2, align 8
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 24
  %16 = load %struct._XGC*, %struct._XGC** %gc3, align 8
  %call4 = call i32 @XSetFillStyle(%struct._XDisplay* %14, %struct._XGC* %16, i32 0)
  br label %if.end

if.else:                                          ; preds = %entry
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %18 = load i32, i32* %x.addr, align 4
  %19 = load i32, i32* %y.addr, align 4
  %20 = load i32, i32* %w.addr, align 4
  %21 = load i32, i32* %h.addr, align 4
  call void @x_clear_glyph_string_rect(%struct.glyph_string* %17, i32 %18, i32 %19, i32 %20, i32 %21)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare zeroext i1 @cursor_in_mouse_face_p(%struct.window*) #1

declare void @get_glyph_string_clip_rect(%struct.glyph_string*, %struct.XRectangle*) #1

; Function Attrs: nounwind uwtable
define internal void @x_clear_glyph_string_rect(%struct.glyph_string* %s, i32 %x, i32 %y, i32 %w, i32 %h) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %xgcv = alloca %struct.XGCValues, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 10
  %1 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 24
  %3 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call = call i32 @XGetGCValues(%struct._XDisplay* %1, %struct._XGC* %3, i64 12, %struct.XGCValues* %xgcv)
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 10
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display1, align 8
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 24
  %7 = load %struct._XGC*, %struct._XGC** %gc2, align 8
  %background = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %8 = load i64, i64* %background, align 8
  %call3 = call i32 @XSetForeground(%struct._XDisplay* %5, %struct._XGC* %7, i64 %8)
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 8
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %11 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc4 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %11, i32 0, i32 24
  %12 = load %struct._XGC*, %struct._XGC** %gc4, align 8
  %13 = load i32, i32* %x.addr, align 4
  %14 = load i32, i32* %y.addr, align 4
  %15 = load i32, i32* %w.addr, align 4
  %16 = load i32, i32* %h.addr, align 4
  call void @x_fill_rectangle(%struct.frame* %10, %struct._XGC* %12, i32 %13, i32 %14, i32 %15, i32 %16)
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 10
  %18 = load %struct._XDisplay*, %struct._XDisplay** %display5, align 8
  %19 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %19, i32 0, i32 24
  %20 = load %struct._XGC*, %struct._XGC** %gc6, align 8
  %foreground = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %21 = load i64, i64* %foreground, align 8
  %call7 = call i32 @XSetForeground(%struct._XDisplay* %18, %struct._XGC* %20, i64 %21)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_box_rect(%struct.glyph_string* %s, i32 %left_x, i32 %top_y, i32 %right_x, i32 %bottom_y, i32 %width, i1 zeroext %left_p, i1 zeroext %right_p, %struct.XRectangle* %clip_rect) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %left_x.addr = alloca i32, align 4
  %top_y.addr = alloca i32, align 4
  %right_x.addr = alloca i32, align 4
  %bottom_y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %left_p.addr = alloca i8, align 1
  %right_p.addr = alloca i8, align 1
  %clip_rect.addr = alloca %struct.XRectangle*, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  store i32 %left_x, i32* %left_x.addr, align 4
  store i32 %top_y, i32* %top_y.addr, align 4
  store i32 %right_x, i32* %right_x.addr, align 4
  store i32 %bottom_y, i32* %bottom_y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %frombool = zext i1 %left_p to i8
  store i8 %frombool, i8* %left_p.addr, align 1
  %frombool1 = zext i1 %right_p to i8
  store i8 %frombool1, i8* %right_p.addr, align 1
  store %struct.XRectangle* %clip_rect, %struct.XRectangle** %clip_rect.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 10
  %1 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 24
  %3 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call = call i32 @XGetGCValues(%struct._XDisplay* %1, %struct._XGC* %3, i64 4, %struct.XGCValues* %xgcv)
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 10
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display2, align 8
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 24
  %7 = load %struct._XGC*, %struct._XGC** %gc3, align 8
  %8 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 17
  %9 = load %struct.face*, %struct.face** %face, align 8
  %box_color = getelementptr inbounds %struct.face, %struct.face* %9, i32 0, i32 9
  %10 = load i64, i64* %box_color, align 8
  %call4 = call i32 @XSetForeground(%struct._XDisplay* %5, %struct._XGC* %7, i64 %10)
  %11 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %11, i32 0, i32 8
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %13 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %13, i32 0, i32 24
  %14 = load %struct._XGC*, %struct._XGC** %gc5, align 8
  %15 = load %struct.XRectangle*, %struct.XRectangle** %clip_rect.addr, align 8
  call void @x_set_clip_rectangles(%struct.frame* %12, %struct._XGC* %14, %struct.XRectangle* %15, i32 1)
  %16 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %16, i32 0, i32 8
  %17 = load %struct.frame*, %struct.frame** %f6, align 8
  %18 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %18, i32 0, i32 24
  %19 = load %struct._XGC*, %struct._XGC** %gc7, align 8
  %20 = load i32, i32* %left_x.addr, align 4
  %21 = load i32, i32* %top_y.addr, align 4
  %22 = load i32, i32* %right_x.addr, align 4
  %23 = load i32, i32* %left_x.addr, align 4
  %sub = sub nsw i32 %22, %23
  %add = add nsw i32 %sub, 1
  %24 = load i32, i32* %width.addr, align 4
  call void @x_fill_rectangle(%struct.frame* %17, %struct._XGC* %19, i32 %20, i32 %21, i32 %add, i32 %24)
  %25 = load i8, i8* %left_p.addr, align 1
  %tobool = trunc i8 %25 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %26 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f8 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %26, i32 0, i32 8
  %27 = load %struct.frame*, %struct.frame** %f8, align 8
  %28 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc9 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %28, i32 0, i32 24
  %29 = load %struct._XGC*, %struct._XGC** %gc9, align 8
  %30 = load i32, i32* %left_x.addr, align 4
  %31 = load i32, i32* %top_y.addr, align 4
  %32 = load i32, i32* %width.addr, align 4
  %33 = load i32, i32* %bottom_y.addr, align 4
  %34 = load i32, i32* %top_y.addr, align 4
  %sub10 = sub nsw i32 %33, %34
  %add11 = add nsw i32 %sub10, 1
  call void @x_fill_rectangle(%struct.frame* %27, %struct._XGC* %29, i32 %30, i32 %31, i32 %32, i32 %add11)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %35 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f12 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %35, i32 0, i32 8
  %36 = load %struct.frame*, %struct.frame** %f12, align 8
  %37 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc13 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %37, i32 0, i32 24
  %38 = load %struct._XGC*, %struct._XGC** %gc13, align 8
  %39 = load i32, i32* %left_x.addr, align 4
  %40 = load i32, i32* %bottom_y.addr, align 4
  %41 = load i32, i32* %width.addr, align 4
  %sub14 = sub nsw i32 %40, %41
  %add15 = add nsw i32 %sub14, 1
  %42 = load i32, i32* %right_x.addr, align 4
  %43 = load i32, i32* %left_x.addr, align 4
  %sub16 = sub nsw i32 %42, %43
  %add17 = add nsw i32 %sub16, 1
  %44 = load i32, i32* %width.addr, align 4
  call void @x_fill_rectangle(%struct.frame* %36, %struct._XGC* %38, i32 %39, i32 %add15, i32 %add17, i32 %44)
  %45 = load i8, i8* %right_p.addr, align 1
  %tobool18 = trunc i8 %45 to i1
  br i1 %tobool18, label %if.then.19, label %if.end.26

if.then.19:                                       ; preds = %if.end
  %46 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f20 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %46, i32 0, i32 8
  %47 = load %struct.frame*, %struct.frame** %f20, align 8
  %48 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc21 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %48, i32 0, i32 24
  %49 = load %struct._XGC*, %struct._XGC** %gc21, align 8
  %50 = load i32, i32* %right_x.addr, align 4
  %51 = load i32, i32* %width.addr, align 4
  %sub22 = sub nsw i32 %50, %51
  %add23 = add nsw i32 %sub22, 1
  %52 = load i32, i32* %top_y.addr, align 4
  %53 = load i32, i32* %width.addr, align 4
  %54 = load i32, i32* %bottom_y.addr, align 4
  %55 = load i32, i32* %top_y.addr, align 4
  %sub24 = sub nsw i32 %54, %55
  %add25 = add nsw i32 %sub24, 1
  call void @x_fill_rectangle(%struct.frame* %47, %struct._XGC* %49, i32 %add23, i32 %52, i32 %53, i32 %add25)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.19, %if.end
  %56 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display27 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %56, i32 0, i32 10
  %57 = load %struct._XDisplay*, %struct._XDisplay** %display27, align 8
  %58 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc28 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %58, i32 0, i32 24
  %59 = load %struct._XGC*, %struct._XGC** %gc28, align 8
  %foreground = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  %60 = load i64, i64* %foreground, align 8
  %call29 = call i32 @XSetForeground(%struct._XDisplay* %57, %struct._XGC* %59, i64 %60)
  %61 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f30 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %61, i32 0, i32 8
  %62 = load %struct.frame*, %struct.frame** %f30, align 8
  %63 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc31 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %63, i32 0, i32 24
  %64 = load %struct._XGC*, %struct._XGC** %gc31, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %62, %struct._XGC* %64)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_setup_relief_colors(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %di = alloca %struct.x_output*, align 8
  %color = alloca i64, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 8
  %1 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  store %struct.x_output* %2, %struct.x_output** %di, align 8
  %3 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %3, i32 0, i32 17
  %4 = load %struct.face*, %struct.face** %face, align 8
  %use_box_color_for_shadows_p = getelementptr inbounds %struct.face, %struct.face* %4, i32 0, i32 13
  %5 = bitcast i24* %use_box_color_for_shadows_p to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 3
  %bf.clear = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 17
  %7 = load %struct.face*, %struct.face** %face1, align 8
  %box_color = getelementptr inbounds %struct.face, %struct.face* %7, i32 0, i32 9
  %8 = load i64, i64* %box_color, align 8
  store i64 %8, i64* %color, align 8
  br label %if.end.32

if.else:                                          ; preds = %entry
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 25
  %10 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %10, i32 0, i32 6
  %11 = bitcast i24* %type to i32*
  %bf.load2 = load i32, i32* %11, align 8
  %bf.clear3 = and i32 %bf.load2, 7
  %cmp = icmp eq i32 %bf.clear3, 3
  br i1 %cmp, label %land.lhs.true, label %if.else.29

land.lhs.true:                                    ; preds = %if.else
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 26
  %13 = load %struct.image*, %struct.image** %img, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %13, i32 0, i32 1
  %14 = load i64, i64* %pixmap, align 8
  %tobool = icmp ne i64 %14, 0
  br i1 %tobool, label %land.lhs.true.4, label %if.else.29

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img5 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 26
  %16 = load %struct.image*, %struct.image** %img5, align 8
  %background_transparent_valid = getelementptr inbounds %struct.image, %struct.image* %16, i32 0, i32 10
  %bf.load6 = load i8, i8* %background_transparent_valid, align 8
  %bf.lshr7 = lshr i8 %bf.load6, 2
  %bf.clear8 = and i8 %bf.lshr7, 1
  %bf.cast9 = trunc i8 %bf.clear8 to i1
  br i1 %bf.cast9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.4
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img10 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 26
  %18 = load %struct.image*, %struct.image** %img10, align 8
  %background_transparent = getelementptr inbounds %struct.image, %struct.image* %18, i32 0, i32 10
  %bf.load11 = load i8, i8* %background_transparent, align 8
  %bf.clear12 = and i8 %bf.load11, 1
  %bf.cast13 = trunc i8 %bf.clear12 to i1
  br i1 %bf.cast13, label %if.else.29, label %if.then.17

cond.false:                                       ; preds = %land.lhs.true.4
  %19 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img14 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %19, i32 0, i32 26
  %20 = load %struct.image*, %struct.image** %img14, align 8
  %21 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f15 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %21, i32 0, i32 8
  %22 = load %struct.frame*, %struct.frame** %f15, align 8
  %call = call i32 @image_background_transparent(%struct.image* %20, %struct.frame* %22, %struct._XImage* null)
  %tobool16 = icmp ne i32 %call, 0
  br i1 %tobool16, label %if.else.29, label %if.then.17

if.then.17:                                       ; preds = %cond.false, %cond.true
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img18 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 26
  %24 = load %struct.image*, %struct.image** %img18, align 8
  %background_valid = getelementptr inbounds %struct.image, %struct.image* %24, i32 0, i32 10
  %bf.load19 = load i8, i8* %background_valid, align 8
  %bf.lshr20 = lshr i8 %bf.load19, 1
  %bf.clear21 = and i8 %bf.lshr20, 1
  %bf.cast22 = trunc i8 %bf.clear21 to i1
  br i1 %bf.cast22, label %cond.true.23, label %cond.false.25

cond.true.23:                                     ; preds = %if.then.17
  %25 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img24 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %25, i32 0, i32 26
  %26 = load %struct.image*, %struct.image** %img24, align 8
  %background = getelementptr inbounds %struct.image, %struct.image* %26, i32 0, i32 7
  %27 = load i64, i64* %background, align 8
  br label %cond.end

cond.false.25:                                    ; preds = %if.then.17
  %28 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img26 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %28, i32 0, i32 26
  %29 = load %struct.image*, %struct.image** %img26, align 8
  %30 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f27 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %30, i32 0, i32 8
  %31 = load %struct.frame*, %struct.frame** %f27, align 8
  %call28 = call i64 @image_background(%struct.image* %29, %struct.frame* %31, %struct._XImage* null)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.25, %cond.true.23
  %cond = phi i64 [ %27, %cond.true.23 ], [ %call28, %cond.false.25 ]
  store i64 %cond, i64* %color, align 8
  br label %if.end

if.else.29:                                       ; preds = %cond.false, %cond.true, %land.lhs.true, %if.else
  %32 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %32, i32 0, i32 10
  %33 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %34 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %34, i32 0, i32 24
  %35 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call30 = call i32 @XGetGCValues(%struct._XDisplay* %33, %struct._XGC* %35, i64 8, %struct.XGCValues* %xgcv)
  %background31 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  %36 = load i64, i64* %background31, align 8
  store i64 %36, i64* %color, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.29, %cond.end
  br label %if.end.32

if.end.32:                                        ; preds = %if.end, %if.then
  %37 = load %struct.x_output*, %struct.x_output** %di, align 8
  %white_relief = getelementptr inbounds %struct.x_output, %struct.x_output* %37, i32 0, i32 51
  %gc33 = getelementptr inbounds %struct.relief, %struct.relief* %white_relief, i32 0, i32 0
  %38 = load %struct._XGC*, %struct._XGC** %gc33, align 8
  %cmp34 = icmp eq %struct._XGC* %38, null
  br i1 %cmp34, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.32
  %39 = load i64, i64* %color, align 8
  %40 = load %struct.x_output*, %struct.x_output** %di, align 8
  %relief_background = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 52
  %41 = load i64, i64* %relief_background, align 8
  %cmp35 = icmp ne i64 %39, %41
  br i1 %cmp35, label %if.then.36, label %if.end.64

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.32
  %42 = load i64, i64* %color, align 8
  %43 = load %struct.x_output*, %struct.x_output** %di, align 8
  %relief_background37 = getelementptr inbounds %struct.x_output, %struct.x_output* %43, i32 0, i32 52
  store i64 %42, i64* %relief_background37, align 8
  %44 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f38 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %44, i32 0, i32 8
  %45 = load %struct.frame*, %struct.frame** %f38, align 8
  %46 = load %struct.x_output*, %struct.x_output** %di, align 8
  %white_relief39 = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 51
  %47 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f40 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %47, i32 0, i32 8
  %48 = load %struct.frame*, %struct.frame** %f40, align 8
  %output_data41 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 62
  %x42 = bitcast %union.output_data* %output_data41 to %struct.x_output**
  %49 = load %struct.x_output*, %struct.x_output** %x42, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %49, i32 0, i32 44
  %50 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %screen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %50, i32 0, i32 6
  %51 = load %struct.Screen*, %struct.Screen** %screen, align 8
  %call43 = call i32 @XScreenNumberOfScreen(%struct.Screen* %51)
  %idxprom = sext i32 %call43 to i64
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f44 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %52, i32 0, i32 8
  %53 = load %struct.frame*, %struct.frame** %f44, align 8
  %output_data45 = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 62
  %x46 = bitcast %union.output_data* %output_data45 to %struct.x_output**
  %54 = load %struct.x_output*, %struct.x_output** %x46, align 8
  %display_info47 = getelementptr inbounds %struct.x_output, %struct.x_output* %54, i32 0, i32 44
  %55 = load %struct.x_display_info*, %struct.x_display_info** %display_info47, align 8
  %display48 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %55, i32 0, i32 2
  %56 = load %struct._XDisplay*, %struct._XDisplay** %display48, align 8
  %57 = bitcast %struct._XDisplay* %56 to %struct.anon.12*
  %screens = getelementptr inbounds %struct.anon.12, %struct.anon.12* %57, i32 0, i32 35
  %58 = load %struct.Screen*, %struct.Screen** %screens, align 8
  %arrayidx = getelementptr inbounds %struct.Screen, %struct.Screen* %58, i64 %idxprom
  %white_pixel = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx, i32 0, i32 13
  %59 = load i64, i64* %white_pixel, align 8
  call void @x_setup_relief_color(%struct.frame* %45, %struct.relief* %white_relief39, double 1.200000e+00, i32 32768, i64 %59)
  %60 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f49 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %60, i32 0, i32 8
  %61 = load %struct.frame*, %struct.frame** %f49, align 8
  %62 = load %struct.x_output*, %struct.x_output** %di, align 8
  %black_relief = getelementptr inbounds %struct.x_output, %struct.x_output* %62, i32 0, i32 50
  %63 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f50 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %63, i32 0, i32 8
  %64 = load %struct.frame*, %struct.frame** %f50, align 8
  %output_data51 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 62
  %x52 = bitcast %union.output_data* %output_data51 to %struct.x_output**
  %65 = load %struct.x_output*, %struct.x_output** %x52, align 8
  %display_info53 = getelementptr inbounds %struct.x_output, %struct.x_output* %65, i32 0, i32 44
  %66 = load %struct.x_display_info*, %struct.x_display_info** %display_info53, align 8
  %screen54 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %66, i32 0, i32 6
  %67 = load %struct.Screen*, %struct.Screen** %screen54, align 8
  %call55 = call i32 @XScreenNumberOfScreen(%struct.Screen* %67)
  %idxprom56 = sext i32 %call55 to i64
  %68 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f57 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %68, i32 0, i32 8
  %69 = load %struct.frame*, %struct.frame** %f57, align 8
  %output_data58 = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 62
  %x59 = bitcast %union.output_data* %output_data58 to %struct.x_output**
  %70 = load %struct.x_output*, %struct.x_output** %x59, align 8
  %display_info60 = getelementptr inbounds %struct.x_output, %struct.x_output* %70, i32 0, i32 44
  %71 = load %struct.x_display_info*, %struct.x_display_info** %display_info60, align 8
  %display61 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %71, i32 0, i32 2
  %72 = load %struct._XDisplay*, %struct._XDisplay** %display61, align 8
  %73 = bitcast %struct._XDisplay* %72 to %struct.anon.12*
  %screens62 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %73, i32 0, i32 35
  %74 = load %struct.Screen*, %struct.Screen** %screens62, align 8
  %arrayidx63 = getelementptr inbounds %struct.Screen, %struct.Screen* %74, i64 %idxprom56
  %black_pixel = getelementptr inbounds %struct.Screen, %struct.Screen* %arrayidx63, i32 0, i32 14
  %75 = load i64, i64* %black_pixel, align 8
  call void @x_setup_relief_color(%struct.frame* %61, %struct.relief* %black_relief, double 6.000000e-01, i32 16384, i64 %75)
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.36, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_relief_rect(%struct.frame* %f, i32 %left_x, i32 %top_y, i32 %right_x, i32 %bottom_y, i32 %width, i1 zeroext %raised_p, i1 zeroext %top_p, i1 zeroext %bot_p, i1 zeroext %left_p, i1 zeroext %right_p, %struct.XRectangle* %clip_rect) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %left_x.addr = alloca i32, align 4
  %top_y.addr = alloca i32, align 4
  %right_x.addr = alloca i32, align 4
  %bottom_y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %raised_p.addr = alloca i8, align 1
  %top_p.addr = alloca i8, align 1
  %bot_p.addr = alloca i8, align 1
  %left_p.addr = alloca i8, align 1
  %right_p.addr = alloca i8, align 1
  %clip_rect.addr = alloca %struct.XRectangle*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %window = alloca i64, align 8
  %i = alloca i32, align 4
  %gc = alloca %struct._XGC*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %left_x, i32* %left_x.addr, align 4
  store i32 %top_y, i32* %top_y.addr, align 4
  store i32 %right_x, i32* %right_x.addr, align 4
  store i32 %bottom_y, i32* %bottom_y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  %frombool = zext i1 %raised_p to i8
  store i8 %frombool, i8* %raised_p.addr, align 1
  %frombool1 = zext i1 %top_p to i8
  store i8 %frombool1, i8* %top_p.addr, align 1
  %frombool2 = zext i1 %bot_p to i8
  store i8 %frombool2, i8* %bot_p.addr, align 1
  %frombool3 = zext i1 %left_p to i8
  store i8 %frombool3, i8* %left_p.addr, align 1
  %frombool4 = zext i1 %right_p to i8
  store i8 %frombool4, i8* %right_p.addr, align 1
  store %struct.XRectangle* %clip_rect, %struct.XRectangle** %clip_rect.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %3, %struct._XDisplay** %dpy, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  store i64 %6, i64* %window, align 8
  %7 = load i8, i8* %raised_p.addr, align 1
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %white_relief = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 51
  %gc9 = getelementptr inbounds %struct.relief, %struct.relief* %white_relief, i32 0, i32 0
  %10 = load %struct._XGC*, %struct._XGC** %gc9, align 8
  store %struct._XGC* %10, %struct._XGC** %gc, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %black_relief = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 50
  %gc12 = getelementptr inbounds %struct.relief, %struct.relief* %black_relief, i32 0, i32 0
  %13 = load %struct._XGC*, %struct._XGC** %gc12, align 8
  store %struct._XGC* %13, %struct._XGC** %gc, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %15 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %16 = load %struct.XRectangle*, %struct.XRectangle** %clip_rect.addr, align 8
  %call = call i32 @XSetClipRectangles(%struct._XDisplay* %14, %struct._XGC* %15, i32 0, i32 0, %struct.XRectangle* %16, i32 1, i32 0)
  %17 = load i8, i8* %top_p.addr, align 1
  %tobool13 = trunc i8 %17 to i1
  br i1 %tobool13, label %if.then.14, label %if.end.33

if.then.14:                                       ; preds = %if.end
  %18 = load i32, i32* %width.addr, align 4
  %cmp = icmp eq i32 %18, 1
  br i1 %cmp, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %if.then.14
  %19 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %20 = load i64, i64* %window, align 8
  %21 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %22 = load i32, i32* %left_x.addr, align 4
  %23 = load i8, i8* %left_p.addr, align 1
  %tobool16 = trunc i8 %23 to i1
  %conv = zext i1 %tobool16 to i32
  %add = add nsw i32 %22, %conv
  %24 = load i32, i32* %top_y.addr, align 4
  %25 = load i32, i32* %right_x.addr, align 4
  %26 = load i8, i8* %right_p.addr, align 1
  %tobool17 = trunc i8 %26 to i1
  %lnot = xor i1 %tobool17, true
  %lnot.ext = zext i1 %lnot to i32
  %add18 = add nsw i32 %25, %lnot.ext
  %27 = load i32, i32* %top_y.addr, align 4
  %call19 = call i32 @XDrawLine(%struct._XDisplay* %19, i64 %20, %struct._XGC* %21, i32 %add, i32 %24, i32 %add18, i32 %27)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.15, %if.then.14
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %width.addr, align 4
  %cmp21 = icmp slt i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %31 = load i64, i64* %window, align 8
  %32 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %33 = load i32, i32* %left_x.addr, align 4
  %34 = load i32, i32* %i, align 4
  %35 = load i8, i8* %left_p.addr, align 1
  %tobool23 = trunc i8 %35 to i1
  %conv24 = zext i1 %tobool23 to i32
  %mul = mul nsw i32 %34, %conv24
  %add25 = add nsw i32 %33, %mul
  %36 = load i32, i32* %top_y.addr, align 4
  %37 = load i32, i32* %i, align 4
  %add26 = add nsw i32 %36, %37
  %38 = load i32, i32* %right_x.addr, align 4
  %add27 = add nsw i32 %38, 1
  %39 = load i32, i32* %i, align 4
  %40 = load i8, i8* %right_p.addr, align 1
  %tobool28 = trunc i8 %40 to i1
  %conv29 = zext i1 %tobool28 to i32
  %mul30 = mul nsw i32 %39, %conv29
  %sub = sub nsw i32 %add27, %mul30
  %41 = load i32, i32* %top_y.addr, align 4
  %42 = load i32, i32* %i, align 4
  %add31 = add nsw i32 %41, %42
  %call32 = call i32 @XDrawLine(%struct._XDisplay* %30, i64 %31, %struct._XGC* %32, i32 %add25, i32 %add26, i32 %sub, i32 %add31)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %43 = load i32, i32* %i, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.33

if.end.33:                                        ; preds = %for.end, %if.end
  %44 = load i8, i8* %left_p.addr, align 1
  %tobool34 = trunc i8 %44 to i1
  br i1 %tobool34, label %if.then.35, label %if.end.67

if.then.35:                                       ; preds = %if.end.33
  %45 = load i32, i32* %width.addr, align 4
  %cmp36 = icmp eq i32 %45, 1
  br i1 %cmp36, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.then.35
  %46 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %47 = load i64, i64* %window, align 8
  %48 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %49 = load i32, i32* %left_x.addr, align 4
  %50 = load i32, i32* %top_y.addr, align 4
  %add39 = add nsw i32 %50, 1
  %51 = load i32, i32* %left_x.addr, align 4
  %52 = load i32, i32* %bottom_y.addr, align 4
  %call40 = call i32 @XDrawLine(%struct._XDisplay* %46, i64 %47, %struct._XGC* %48, i32 %49, i32 %add39, i32 %51, i32 %52)
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.then.35
  %53 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %54 = load i64, i64* %window, align 8
  %55 = load i32, i32* %left_x.addr, align 4
  %56 = load i32, i32* %top_y.addr, align 4
  %call42 = call i32 @XClearArea(%struct._XDisplay* %53, i64 %54, i32 %55, i32 %56, i32 1, i32 1, i32 0)
  %57 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %58 = load i64, i64* %window, align 8
  %59 = load i32, i32* %left_x.addr, align 4
  %60 = load i32, i32* %bottom_y.addr, align 4
  %call43 = call i32 @XClearArea(%struct._XDisplay* %57, i64 %58, i32 %59, i32 %60, i32 1, i32 1, i32 0)
  %61 = load i32, i32* %width.addr, align 4
  %cmp44 = icmp sgt i32 %61, 1
  %cond = select i1 %cmp44, i32 1, i32 0
  store i32 %cond, i32* %i, align 4
  br label %for.cond.46

for.cond.46:                                      ; preds = %for.inc.64, %if.end.41
  %62 = load i32, i32* %i, align 4
  %63 = load i32, i32* %width.addr, align 4
  %cmp47 = icmp slt i32 %62, %63
  br i1 %cmp47, label %for.body.49, label %for.end.66

for.body.49:                                      ; preds = %for.cond.46
  %64 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %65 = load i64, i64* %window, align 8
  %66 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %67 = load i32, i32* %left_x.addr, align 4
  %68 = load i32, i32* %i, align 4
  %add50 = add nsw i32 %67, %68
  %69 = load i32, i32* %top_y.addr, align 4
  %70 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %70, 1
  %71 = load i8, i8* %top_p.addr, align 1
  %tobool52 = trunc i8 %71 to i1
  %conv53 = zext i1 %tobool52 to i32
  %mul54 = mul nsw i32 %add51, %conv53
  %add55 = add nsw i32 %69, %mul54
  %72 = load i32, i32* %left_x.addr, align 4
  %73 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %72, %73
  %74 = load i32, i32* %bottom_y.addr, align 4
  %add57 = add nsw i32 %74, 1
  %75 = load i32, i32* %i, align 4
  %add58 = add nsw i32 %75, 1
  %76 = load i8, i8* %bot_p.addr, align 1
  %tobool59 = trunc i8 %76 to i1
  %conv60 = zext i1 %tobool59 to i32
  %mul61 = mul nsw i32 %add58, %conv60
  %sub62 = sub nsw i32 %add57, %mul61
  %call63 = call i32 @XDrawLine(%struct._XDisplay* %64, i64 %65, %struct._XGC* %66, i32 %add50, i32 %add55, i32 %add56, i32 %sub62)
  br label %for.inc.64

for.inc.64:                                       ; preds = %for.body.49
  %77 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %77, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond.46

for.end.66:                                       ; preds = %for.cond.46
  br label %if.end.67

if.end.67:                                        ; preds = %for.end.66, %if.end.33
  %78 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %79 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %call68 = call i32 @XSetClipMask(%struct._XDisplay* %78, %struct._XGC* %79, i64 0)
  %80 = load i8, i8* %raised_p.addr, align 1
  %tobool69 = trunc i8 %80 to i1
  br i1 %tobool69, label %if.then.70, label %if.else.75

if.then.70:                                       ; preds = %if.end.67
  %81 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data71 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 62
  %x72 = bitcast %union.output_data* %output_data71 to %struct.x_output**
  %82 = load %struct.x_output*, %struct.x_output** %x72, align 8
  %black_relief73 = getelementptr inbounds %struct.x_output, %struct.x_output* %82, i32 0, i32 50
  %gc74 = getelementptr inbounds %struct.relief, %struct.relief* %black_relief73, i32 0, i32 0
  %83 = load %struct._XGC*, %struct._XGC** %gc74, align 8
  store %struct._XGC* %83, %struct._XGC** %gc, align 8
  br label %if.end.80

if.else.75:                                       ; preds = %if.end.67
  %84 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data76 = getelementptr inbounds %struct.frame, %struct.frame* %84, i32 0, i32 62
  %x77 = bitcast %union.output_data* %output_data76 to %struct.x_output**
  %85 = load %struct.x_output*, %struct.x_output** %x77, align 8
  %white_relief78 = getelementptr inbounds %struct.x_output, %struct.x_output* %85, i32 0, i32 51
  %gc79 = getelementptr inbounds %struct.relief, %struct.relief* %white_relief78, i32 0, i32 0
  %86 = load %struct._XGC*, %struct._XGC** %gc79, align 8
  store %struct._XGC* %86, %struct._XGC** %gc, align 8
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.75, %if.then.70
  %87 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %88 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %89 = load %struct.XRectangle*, %struct.XRectangle** %clip_rect.addr, align 8
  %call81 = call i32 @XSetClipRectangles(%struct._XDisplay* %87, %struct._XGC* %88, i32 0, i32 0, %struct.XRectangle* %89, i32 1, i32 0)
  %90 = load i32, i32* %width.addr, align 4
  %cmp82 = icmp sgt i32 %90, 1
  br i1 %cmp82, label %if.then.84, label %if.end.101

if.then.84:                                       ; preds = %if.end.80
  %91 = load i8, i8* %top_p.addr, align 1
  %tobool85 = trunc i8 %91 to i1
  br i1 %tobool85, label %if.then.86, label %if.end.95

if.then.86:                                       ; preds = %if.then.84
  %92 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %93 = load i64, i64* %window, align 8
  %94 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %95 = load i32, i32* %left_x.addr, align 4
  %96 = load i8, i8* %left_p.addr, align 1
  %tobool87 = trunc i8 %96 to i1
  %conv88 = zext i1 %tobool87 to i32
  %add89 = add nsw i32 %95, %conv88
  %97 = load i32, i32* %top_y.addr, align 4
  %98 = load i32, i32* %right_x.addr, align 4
  %99 = load i8, i8* %right_p.addr, align 1
  %tobool90 = trunc i8 %99 to i1
  %lnot91 = xor i1 %tobool90, true
  %lnot.ext92 = zext i1 %lnot91 to i32
  %add93 = add nsw i32 %98, %lnot.ext92
  %100 = load i32, i32* %top_y.addr, align 4
  %call94 = call i32 @XDrawLine(%struct._XDisplay* %92, i64 %93, %struct._XGC* %94, i32 %add89, i32 %97, i32 %add93, i32 %100)
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.86, %if.then.84
  %101 = load i8, i8* %left_p.addr, align 1
  %tobool96 = trunc i8 %101 to i1
  br i1 %tobool96, label %if.then.97, label %if.end.100

if.then.97:                                       ; preds = %if.end.95
  %102 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %103 = load i64, i64* %window, align 8
  %104 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %105 = load i32, i32* %left_x.addr, align 4
  %106 = load i32, i32* %top_y.addr, align 4
  %add98 = add nsw i32 %106, 1
  %107 = load i32, i32* %left_x.addr, align 4
  %108 = load i32, i32* %bottom_y.addr, align 4
  %call99 = call i32 @XDrawLine(%struct._XDisplay* %102, i64 %103, %struct._XGC* %104, i32 %105, i32 %add98, i32 %107, i32 %108)
  br label %if.end.100

if.end.100:                                       ; preds = %if.then.97, %if.end.95
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %if.end.80
  %109 = load i8, i8* %bot_p.addr, align 1
  %tobool102 = trunc i8 %109 to i1
  br i1 %tobool102, label %if.then.103, label %if.end.131

if.then.103:                                      ; preds = %if.end.101
  %110 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %111 = load i64, i64* %window, align 8
  %112 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %113 = load i32, i32* %left_x.addr, align 4
  %114 = load i8, i8* %left_p.addr, align 1
  %tobool104 = trunc i8 %114 to i1
  %conv105 = zext i1 %tobool104 to i32
  %add106 = add nsw i32 %113, %conv105
  %115 = load i32, i32* %bottom_y.addr, align 4
  %116 = load i32, i32* %right_x.addr, align 4
  %117 = load i8, i8* %right_p.addr, align 1
  %tobool107 = trunc i8 %117 to i1
  %lnot108 = xor i1 %tobool107, true
  %lnot.ext109 = zext i1 %lnot108 to i32
  %add110 = add nsw i32 %116, %lnot.ext109
  %118 = load i32, i32* %bottom_y.addr, align 4
  %call111 = call i32 @XDrawLine(%struct._XDisplay* %110, i64 %111, %struct._XGC* %112, i32 %add106, i32 %115, i32 %add110, i32 %118)
  store i32 1, i32* %i, align 4
  br label %for.cond.112

for.cond.112:                                     ; preds = %for.inc.128, %if.then.103
  %119 = load i32, i32* %i, align 4
  %120 = load i32, i32* %width.addr, align 4
  %cmp113 = icmp slt i32 %119, %120
  br i1 %cmp113, label %for.body.115, label %for.end.130

for.body.115:                                     ; preds = %for.cond.112
  %121 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %122 = load i64, i64* %window, align 8
  %123 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %124 = load i32, i32* %left_x.addr, align 4
  %125 = load i32, i32* %i, align 4
  %126 = load i8, i8* %left_p.addr, align 1
  %tobool116 = trunc i8 %126 to i1
  %conv117 = zext i1 %tobool116 to i32
  %mul118 = mul nsw i32 %125, %conv117
  %add119 = add nsw i32 %124, %mul118
  %127 = load i32, i32* %bottom_y.addr, align 4
  %128 = load i32, i32* %i, align 4
  %sub120 = sub nsw i32 %127, %128
  %129 = load i32, i32* %right_x.addr, align 4
  %add121 = add nsw i32 %129, 1
  %130 = load i32, i32* %i, align 4
  %131 = load i8, i8* %right_p.addr, align 1
  %tobool122 = trunc i8 %131 to i1
  %conv123 = zext i1 %tobool122 to i32
  %mul124 = mul nsw i32 %130, %conv123
  %sub125 = sub nsw i32 %add121, %mul124
  %132 = load i32, i32* %bottom_y.addr, align 4
  %133 = load i32, i32* %i, align 4
  %sub126 = sub nsw i32 %132, %133
  %call127 = call i32 @XDrawLine(%struct._XDisplay* %121, i64 %122, %struct._XGC* %123, i32 %add119, i32 %sub120, i32 %sub125, i32 %sub126)
  br label %for.inc.128

for.inc.128:                                      ; preds = %for.body.115
  %134 = load i32, i32* %i, align 4
  %inc129 = add nsw i32 %134, 1
  store i32 %inc129, i32* %i, align 4
  br label %for.cond.112

for.end.130:                                      ; preds = %for.cond.112
  br label %if.end.131

if.end.131:                                       ; preds = %for.end.130, %if.end.101
  %135 = load i8, i8* %right_p.addr, align 1
  %tobool132 = trunc i8 %135 to i1
  br i1 %tobool132, label %if.then.133, label %if.end.157

if.then.133:                                      ; preds = %if.end.131
  %136 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %137 = load i64, i64* %window, align 8
  %138 = load i32, i32* %right_x.addr, align 4
  %139 = load i32, i32* %top_y.addr, align 4
  %call134 = call i32 @XClearArea(%struct._XDisplay* %136, i64 %137, i32 %138, i32 %139, i32 1, i32 1, i32 0)
  %140 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %141 = load i64, i64* %window, align 8
  %142 = load i32, i32* %right_x.addr, align 4
  %143 = load i32, i32* %bottom_y.addr, align 4
  %call135 = call i32 @XClearArea(%struct._XDisplay* %140, i64 %141, i32 %142, i32 %143, i32 1, i32 1, i32 0)
  store i32 0, i32* %i, align 4
  br label %for.cond.136

for.cond.136:                                     ; preds = %for.inc.154, %if.then.133
  %144 = load i32, i32* %i, align 4
  %145 = load i32, i32* %width.addr, align 4
  %cmp137 = icmp slt i32 %144, %145
  br i1 %cmp137, label %for.body.139, label %for.end.156

for.body.139:                                     ; preds = %for.cond.136
  %146 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %147 = load i64, i64* %window, align 8
  %148 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %149 = load i32, i32* %right_x.addr, align 4
  %150 = load i32, i32* %i, align 4
  %sub140 = sub nsw i32 %149, %150
  %151 = load i32, i32* %top_y.addr, align 4
  %152 = load i32, i32* %i, align 4
  %add141 = add nsw i32 %152, 1
  %153 = load i8, i8* %top_p.addr, align 1
  %tobool142 = trunc i8 %153 to i1
  %conv143 = zext i1 %tobool142 to i32
  %mul144 = mul nsw i32 %add141, %conv143
  %add145 = add nsw i32 %151, %mul144
  %154 = load i32, i32* %right_x.addr, align 4
  %155 = load i32, i32* %i, align 4
  %sub146 = sub nsw i32 %154, %155
  %156 = load i32, i32* %bottom_y.addr, align 4
  %add147 = add nsw i32 %156, 1
  %157 = load i32, i32* %i, align 4
  %add148 = add nsw i32 %157, 1
  %158 = load i8, i8* %bot_p.addr, align 1
  %tobool149 = trunc i8 %158 to i1
  %conv150 = zext i1 %tobool149 to i32
  %mul151 = mul nsw i32 %add148, %conv150
  %sub152 = sub nsw i32 %add147, %mul151
  %call153 = call i32 @XDrawLine(%struct._XDisplay* %146, i64 %147, %struct._XGC* %148, i32 %sub140, i32 %add145, i32 %sub146, i32 %sub152)
  br label %for.inc.154

for.inc.154:                                      ; preds = %for.body.139
  %159 = load i32, i32* %i, align 4
  %inc155 = add nsw i32 %159, 1
  store i32 %inc155, i32* %i, align 4
  br label %for.cond.136

for.end.156:                                      ; preds = %for.cond.136
  br label %if.end.157

if.end.157:                                       ; preds = %for.end.156, %if.end.131
  %160 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %161 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %160, %struct._XGC* %161)
  ret void
}

declare i32 @image_background_transparent(%struct.image*, %struct.frame*, %struct._XImage*) #1

declare i64 @image_background(%struct.image*, %struct.frame*, %struct._XImage*) #1

; Function Attrs: nounwind uwtable
define internal void @x_setup_relief_color(%struct.frame* %f, %struct.relief* %relief, double %factor, i32 %delta, i64 %default_pixel) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %relief.addr = alloca %struct.relief*, align 8
  %factor.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %default_pixel.addr = alloca i64, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %di = alloca %struct.x_output*, align 8
  %mask = alloca i64, align 8
  %pixel = alloca i64, align 8
  %background = alloca i64, align 8
  %cmap = alloca i64, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.relief* %relief, %struct.relief** %relief.addr, align 8
  store double %factor, double* %factor.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  store i64 %default_pixel, i64* %default_pixel.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  store %struct.x_output* %1, %struct.x_output** %di, align 8
  store i64 65556, i64* %mask, align 8
  %2 = load %struct.x_output*, %struct.x_output** %di, align 8
  %relief_background = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 52
  %3 = load i64, i64* %relief_background, align 8
  store i64 %3, i64* %background, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %cmap3 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 10
  %7 = load i64, i64* %cmap3, align 8
  store i64 %7, i64* %cmap, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %display_info6 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 44
  %10 = load %struct.x_display_info*, %struct.x_display_info** %display_info6, align 8
  store %struct.x_display_info* %10, %struct.x_display_info** %dpyinfo, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %display_info9 = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 44
  %13 = load %struct.x_display_info*, %struct.x_display_info** %display_info9, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %13, i32 0, i32 2
  %14 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %14, %struct._XDisplay** %dpy, align 8
  %graphics_exposures = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 17
  store i32 0, i32* %graphics_exposures, align 4
  %line_width = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 4
  store i32 1, i32* %line_width, align 4
  %15 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %gc = getelementptr inbounds %struct.relief, %struct.relief* %15, i32 0, i32 0
  %16 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %tobool = icmp ne %struct._XGC* %16, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %17 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %pixel10 = getelementptr inbounds %struct.relief, %struct.relief* %17, i32 0, i32 1
  %18 = load i64, i64* %pixel10, align 8
  %cmp = icmp ne i64 %18, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %20 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %pixel11 = getelementptr inbounds %struct.relief, %struct.relief* %20, i32 0, i32 1
  call void @x_free_colors(%struct.frame* %19, i64* %pixel11, i32 1)
  %21 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %pixel12 = getelementptr inbounds %struct.relief, %struct.relief* %21, i32 0, i32 1
  store i64 -1, i64* %pixel12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %22 = load i64, i64* %default_pixel.addr, align 8
  %foreground = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %22, i64* %foreground, align 8
  %23 = load i64, i64* %background, align 8
  store i64 %23, i64* %pixel, align 8
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %n_planes = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 11
  %25 = load i32, i32* %n_planes, align 4
  %cmp13 = icmp ne i32 %25, 1
  br i1 %cmp13, label %land.lhs.true.14, label %if.end.18

land.lhs.true.14:                                 ; preds = %if.end
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %27 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %28 = load i64, i64* %cmap, align 8
  %29 = load double, double* %factor.addr, align 8
  %30 = load i32, i32* %delta.addr, align 4
  %call = call zeroext i1 @x_alloc_lighter_color(%struct.frame* %26, %struct._XDisplay* %27, i64 %28, i64* %pixel, double %29, i32 %30)
  br i1 %call, label %if.then.15, label %if.end.18

if.then.15:                                       ; preds = %land.lhs.true.14
  %31 = load i64, i64* %pixel, align 8
  %32 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %pixel16 = getelementptr inbounds %struct.relief, %struct.relief* %32, i32 0, i32 1
  store i64 %31, i64* %pixel16, align 8
  %foreground17 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %31, i64* %foreground17, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.15, %land.lhs.true.14, %if.end
  %33 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %gc19 = getelementptr inbounds %struct.relief, %struct.relief* %33, i32 0, i32 0
  %34 = load %struct._XGC*, %struct._XGC** %gc19, align 8
  %cmp20 = icmp eq %struct._XGC* %34, null
  br i1 %cmp20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %if.end.18
  %35 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %gray = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %35, i32 0, i32 84
  %36 = load i64, i64* %gray, align 8
  %stipple = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 12
  store i64 %36, i64* %stipple, align 8
  %37 = load i64, i64* %mask, align 8
  %or = or i64 %37, 2048
  store i64 %or, i64* %mask, align 8
  %38 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %40 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 9
  %41 = load i64, i64* %window_desc, align 8
  %42 = load i64, i64* %mask, align 8
  %call24 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %38, i64 %41, i64 %42, %struct.XGCValues* %xgcv)
  %43 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %gc25 = getelementptr inbounds %struct.relief, %struct.relief* %43, i32 0, i32 0
  store %struct._XGC* %call24, %struct._XGC** %gc25, align 8
  br label %if.end.28

if.else:                                          ; preds = %if.end.18
  %44 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %45 = load %struct.relief*, %struct.relief** %relief.addr, align 8
  %gc26 = getelementptr inbounds %struct.relief, %struct.relief* %45, i32 0, i32 0
  %46 = load %struct._XGC*, %struct._XGC** %gc26, align 8
  %47 = load i64, i64* %mask, align 8
  %call27 = call i32 @XChangeGC(%struct._XDisplay* %44, %struct._XGC* %46, i64 %47, %struct.XGCValues* %xgcv)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else, %if.then.21
  ret void
}

declare void @x_free_colors(%struct.frame*, i64*, i32) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @x_alloc_lighter_color(%struct.frame* %f, %struct._XDisplay* %display, i64 %cmap, i64* %pixel, double %factor, i32 %delta) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %display.addr = alloca %struct._XDisplay*, align 8
  %cmap.addr = alloca i64, align 8
  %pixel.addr = alloca i64*, align 8
  %factor.addr = alloca double, align 8
  %delta.addr = alloca i32, align 4
  %color = alloca %struct.XColor, align 8
  %new = alloca %struct.XColor, align 8
  %bright = alloca i64, align 8
  %success_p = alloca i8, align 1
  %dimness = alloca double, align 8
  %min_delta = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XDisplay* %display, %struct._XDisplay** %display.addr, align 8
  store i64 %cmap, i64* %cmap.addr, align 8
  store i64* %pixel, i64** %pixel.addr, align 8
  store double %factor, double* %factor.addr, align 8
  store i32 %delta, i32* %delta.addr, align 4
  %0 = load i64*, i64** %pixel.addr, align 8
  %1 = load i64, i64* %0, align 8
  %pixel1 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 0
  store i64 %1, i64* %pixel1, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_query_color(%struct.frame* %2, %struct.XColor* %color)
  %3 = load double, double* %factor.addr, align 8
  %red = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %4 = load i16, i16* %red, align 2
  %conv = zext i16 %4 to i32
  %conv2 = sitofp i32 %conv to double
  %mul = fmul double %3, %conv2
  %cmp = fcmp olt double 6.553500e+04, %mul
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load double, double* %factor.addr, align 8
  %red4 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %6 = load i16, i16* %red4, align 2
  %conv5 = zext i16 %6 to i32
  %conv6 = sitofp i32 %conv5 to double
  %mul7 = fmul double %5, %conv6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 6.553500e+04, %cond.true ], [ %mul7, %cond.false ]
  %conv8 = fptoui double %cond to i16
  %red9 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  store i16 %conv8, i16* %red9, align 2
  %7 = load double, double* %factor.addr, align 8
  %green = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %8 = load i16, i16* %green, align 2
  %conv10 = zext i16 %8 to i32
  %conv11 = sitofp i32 %conv10 to double
  %mul12 = fmul double %7, %conv11
  %cmp13 = fcmp olt double 6.553500e+04, %mul12
  br i1 %cmp13, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %cond.end
  br label %cond.end.21

cond.false.16:                                    ; preds = %cond.end
  %9 = load double, double* %factor.addr, align 8
  %green17 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %10 = load i16, i16* %green17, align 2
  %conv18 = zext i16 %10 to i32
  %conv19 = sitofp i32 %conv18 to double
  %mul20 = fmul double %9, %conv19
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.16, %cond.true.15
  %cond22 = phi double [ 6.553500e+04, %cond.true.15 ], [ %mul20, %cond.false.16 ]
  %conv23 = fptoui double %cond22 to i16
  %green24 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  store i16 %conv23, i16* %green24, align 2
  %11 = load double, double* %factor.addr, align 8
  %blue = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %12 = load i16, i16* %blue, align 2
  %conv25 = zext i16 %12 to i32
  %conv26 = sitofp i32 %conv25 to double
  %mul27 = fmul double %11, %conv26
  %cmp28 = fcmp olt double 6.553500e+04, %mul27
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %cond.end.21
  br label %cond.end.36

cond.false.31:                                    ; preds = %cond.end.21
  %13 = load double, double* %factor.addr, align 8
  %blue32 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %14 = load i16, i16* %blue32, align 2
  %conv33 = zext i16 %14 to i32
  %conv34 = sitofp i32 %conv33 to double
  %mul35 = fmul double %13, %conv34
  br label %cond.end.36

cond.end.36:                                      ; preds = %cond.false.31, %cond.true.30
  %cond37 = phi double [ 6.553500e+04, %cond.true.30 ], [ %mul35, %cond.false.31 ]
  %conv38 = fptoui double %cond37 to i16
  %blue39 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  store i16 %conv38, i16* %blue39, align 2
  %red40 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %15 = load i16, i16* %red40, align 2
  %conv41 = zext i16 %15 to i32
  %mul42 = mul nsw i32 2, %conv41
  %green43 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %16 = load i16, i16* %green43, align 2
  %conv44 = zext i16 %16 to i32
  %mul45 = mul nsw i32 3, %conv44
  %add = add nsw i32 %mul42, %mul45
  %blue46 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %17 = load i16, i16* %blue46, align 2
  %conv47 = zext i16 %17 to i32
  %add48 = add nsw i32 %add, %conv47
  %div = sdiv i32 %add48, 6
  %conv49 = sext i32 %div to i64
  store i64 %conv49, i64* %bright, align 8
  %18 = load i64, i64* %bright, align 8
  %cmp50 = icmp slt i64 %18, 48000
  br i1 %cmp50, label %if.then, label %if.end.146

if.then:                                          ; preds = %cond.end.36
  %19 = load i64, i64* %bright, align 8
  %conv52 = sitofp i64 %19 to double
  %div53 = fdiv double %conv52, 4.800000e+04
  %sub = fsub double 1.000000e+00, %div53
  store double %sub, double* %dimness, align 8
  %20 = load i32, i32* %delta.addr, align 4
  %conv54 = sitofp i32 %20 to double
  %21 = load double, double* %dimness, align 8
  %mul55 = fmul double %conv54, %21
  %22 = load double, double* %factor.addr, align 8
  %mul56 = fmul double %mul55, %22
  %div57 = fdiv double %mul56, 2.000000e+00
  %conv58 = fptosi double %div57 to i32
  store i32 %conv58, i32* %min_delta, align 4
  %23 = load double, double* %factor.addr, align 8
  %cmp59 = fcmp olt double %23, 1.000000e+00
  br i1 %cmp59, label %if.then.61, label %if.else

if.then.61:                                       ; preds = %if.then
  %red62 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  %24 = load i16, i16* %red62, align 2
  %conv63 = zext i16 %24 to i32
  %25 = load i32, i32* %min_delta, align 4
  %sub64 = sub nsw i32 %conv63, %25
  %cmp65 = icmp sgt i32 0, %sub64
  br i1 %cmp65, label %cond.true.67, label %cond.false.68

cond.true.67:                                     ; preds = %if.then.61
  br label %cond.end.72

cond.false.68:                                    ; preds = %if.then.61
  %red69 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  %26 = load i16, i16* %red69, align 2
  %conv70 = zext i16 %26 to i32
  %27 = load i32, i32* %min_delta, align 4
  %sub71 = sub nsw i32 %conv70, %27
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.68, %cond.true.67
  %cond73 = phi i32 [ 0, %cond.true.67 ], [ %sub71, %cond.false.68 ]
  %conv74 = trunc i32 %cond73 to i16
  %red75 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  store i16 %conv74, i16* %red75, align 2
  %green76 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  %28 = load i16, i16* %green76, align 2
  %conv77 = zext i16 %28 to i32
  %29 = load i32, i32* %min_delta, align 4
  %sub78 = sub nsw i32 %conv77, %29
  %cmp79 = icmp sgt i32 0, %sub78
  br i1 %cmp79, label %cond.true.81, label %cond.false.82

cond.true.81:                                     ; preds = %cond.end.72
  br label %cond.end.86

cond.false.82:                                    ; preds = %cond.end.72
  %green83 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  %30 = load i16, i16* %green83, align 2
  %conv84 = zext i16 %30 to i32
  %31 = load i32, i32* %min_delta, align 4
  %sub85 = sub nsw i32 %conv84, %31
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.false.82, %cond.true.81
  %cond87 = phi i32 [ 0, %cond.true.81 ], [ %sub85, %cond.false.82 ]
  %conv88 = trunc i32 %cond87 to i16
  %green89 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  store i16 %conv88, i16* %green89, align 2
  %blue90 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  %32 = load i16, i16* %blue90, align 2
  %conv91 = zext i16 %32 to i32
  %33 = load i32, i32* %min_delta, align 4
  %sub92 = sub nsw i32 %conv91, %33
  %cmp93 = icmp sgt i32 0, %sub92
  br i1 %cmp93, label %cond.true.95, label %cond.false.96

cond.true.95:                                     ; preds = %cond.end.86
  br label %cond.end.100

cond.false.96:                                    ; preds = %cond.end.86
  %blue97 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  %34 = load i16, i16* %blue97, align 2
  %conv98 = zext i16 %34 to i32
  %35 = load i32, i32* %min_delta, align 4
  %sub99 = sub nsw i32 %conv98, %35
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.false.96, %cond.true.95
  %cond101 = phi i32 [ 0, %cond.true.95 ], [ %sub99, %cond.false.96 ]
  %conv102 = trunc i32 %cond101 to i16
  %blue103 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  store i16 %conv102, i16* %blue103, align 2
  br label %if.end

if.else:                                          ; preds = %if.then
  %36 = load i32, i32* %min_delta, align 4
  %red104 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  %37 = load i16, i16* %red104, align 2
  %conv105 = zext i16 %37 to i32
  %add106 = add nsw i32 %36, %conv105
  %cmp107 = icmp slt i32 65535, %add106
  br i1 %cmp107, label %cond.true.109, label %cond.false.110

cond.true.109:                                    ; preds = %if.else
  br label %cond.end.114

cond.false.110:                                   ; preds = %if.else
  %38 = load i32, i32* %min_delta, align 4
  %red111 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  %39 = load i16, i16* %red111, align 2
  %conv112 = zext i16 %39 to i32
  %add113 = add nsw i32 %38, %conv112
  br label %cond.end.114

cond.end.114:                                     ; preds = %cond.false.110, %cond.true.109
  %cond115 = phi i32 [ 65535, %cond.true.109 ], [ %add113, %cond.false.110 ]
  %conv116 = trunc i32 %cond115 to i16
  %red117 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  store i16 %conv116, i16* %red117, align 2
  %40 = load i32, i32* %min_delta, align 4
  %green118 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  %41 = load i16, i16* %green118, align 2
  %conv119 = zext i16 %41 to i32
  %add120 = add nsw i32 %40, %conv119
  %cmp121 = icmp slt i32 65535, %add120
  br i1 %cmp121, label %cond.true.123, label %cond.false.124

cond.true.123:                                    ; preds = %cond.end.114
  br label %cond.end.128

cond.false.124:                                   ; preds = %cond.end.114
  %42 = load i32, i32* %min_delta, align 4
  %green125 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  %43 = load i16, i16* %green125, align 2
  %conv126 = zext i16 %43 to i32
  %add127 = add nsw i32 %42, %conv126
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.124, %cond.true.123
  %cond129 = phi i32 [ 65535, %cond.true.123 ], [ %add127, %cond.false.124 ]
  %conv130 = trunc i32 %cond129 to i16
  %green131 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  store i16 %conv130, i16* %green131, align 2
  %44 = load i32, i32* %min_delta, align 4
  %blue132 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  %45 = load i16, i16* %blue132, align 2
  %conv133 = zext i16 %45 to i32
  %add134 = add nsw i32 %44, %conv133
  %cmp135 = icmp slt i32 65535, %add134
  br i1 %cmp135, label %cond.true.137, label %cond.false.138

cond.true.137:                                    ; preds = %cond.end.128
  br label %cond.end.142

cond.false.138:                                   ; preds = %cond.end.128
  %46 = load i32, i32* %min_delta, align 4
  %blue139 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  %47 = load i16, i16* %blue139, align 2
  %conv140 = zext i16 %47 to i32
  %add141 = add nsw i32 %46, %conv140
  br label %cond.end.142

cond.end.142:                                     ; preds = %cond.false.138, %cond.true.137
  %cond143 = phi i32 [ 65535, %cond.true.137 ], [ %add141, %cond.false.138 ]
  %conv144 = trunc i32 %cond143 to i16
  %blue145 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  store i16 %conv144, i16* %blue145, align 2
  br label %if.end

if.end:                                           ; preds = %cond.end.142, %cond.end.100
  br label %if.end.146

if.end.146:                                       ; preds = %if.end, %cond.end.36
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %49 = load i64, i64* %cmap.addr, align 8
  %call = call zeroext i1 @x_alloc_nearest_color(%struct.frame* %48, i64 %49, %struct.XColor* %new)
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %success_p, align 1
  %50 = load i8, i8* %success_p, align 1
  %tobool = trunc i8 %50 to i1
  br i1 %tobool, label %if.then.147, label %if.end.200

if.then.147:                                      ; preds = %if.end.146
  %pixel148 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 0
  %51 = load i64, i64* %pixel148, align 8
  %52 = load i64*, i64** %pixel.addr, align 8
  %53 = load i64, i64* %52, align 8
  %cmp149 = icmp eq i64 %51, %53
  br i1 %cmp149, label %if.then.151, label %if.else.197

if.then.151:                                      ; preds = %if.then.147
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel152 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 0
  call void @x_free_colors(%struct.frame* %54, i64* %pixel152, i32 1)
  %55 = load i32, i32* %delta.addr, align 4
  %red153 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %56 = load i16, i16* %red153, align 2
  %conv154 = zext i16 %56 to i32
  %add155 = add nsw i32 %55, %conv154
  %cmp156 = icmp slt i32 65535, %add155
  br i1 %cmp156, label %cond.true.158, label %cond.false.159

cond.true.158:                                    ; preds = %if.then.151
  br label %cond.end.163

cond.false.159:                                   ; preds = %if.then.151
  %57 = load i32, i32* %delta.addr, align 4
  %red160 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 1
  %58 = load i16, i16* %red160, align 2
  %conv161 = zext i16 %58 to i32
  %add162 = add nsw i32 %57, %conv161
  br label %cond.end.163

cond.end.163:                                     ; preds = %cond.false.159, %cond.true.158
  %cond164 = phi i32 [ 65535, %cond.true.158 ], [ %add162, %cond.false.159 ]
  %conv165 = trunc i32 %cond164 to i16
  %red166 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 1
  store i16 %conv165, i16* %red166, align 2
  %59 = load i32, i32* %delta.addr, align 4
  %green167 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %60 = load i16, i16* %green167, align 2
  %conv168 = zext i16 %60 to i32
  %add169 = add nsw i32 %59, %conv168
  %cmp170 = icmp slt i32 65535, %add169
  br i1 %cmp170, label %cond.true.172, label %cond.false.173

cond.true.172:                                    ; preds = %cond.end.163
  br label %cond.end.177

cond.false.173:                                   ; preds = %cond.end.163
  %61 = load i32, i32* %delta.addr, align 4
  %green174 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 2
  %62 = load i16, i16* %green174, align 2
  %conv175 = zext i16 %62 to i32
  %add176 = add nsw i32 %61, %conv175
  br label %cond.end.177

cond.end.177:                                     ; preds = %cond.false.173, %cond.true.172
  %cond178 = phi i32 [ 65535, %cond.true.172 ], [ %add176, %cond.false.173 ]
  %conv179 = trunc i32 %cond178 to i16
  %green180 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 2
  store i16 %conv179, i16* %green180, align 2
  %63 = load i32, i32* %delta.addr, align 4
  %blue181 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %64 = load i16, i16* %blue181, align 2
  %conv182 = zext i16 %64 to i32
  %add183 = add nsw i32 %63, %conv182
  %cmp184 = icmp slt i32 65535, %add183
  br i1 %cmp184, label %cond.true.186, label %cond.false.187

cond.true.186:                                    ; preds = %cond.end.177
  br label %cond.end.191

cond.false.187:                                   ; preds = %cond.end.177
  %65 = load i32, i32* %delta.addr, align 4
  %blue188 = getelementptr inbounds %struct.XColor, %struct.XColor* %color, i32 0, i32 3
  %66 = load i16, i16* %blue188, align 2
  %conv189 = zext i16 %66 to i32
  %add190 = add nsw i32 %65, %conv189
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.187, %cond.true.186
  %cond192 = phi i32 [ 65535, %cond.true.186 ], [ %add190, %cond.false.187 ]
  %conv193 = trunc i32 %cond192 to i16
  %blue194 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 3
  store i16 %conv193, i16* %blue194, align 2
  %67 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %68 = load i64, i64* %cmap.addr, align 8
  %call195 = call zeroext i1 @x_alloc_nearest_color(%struct.frame* %67, i64 %68, %struct.XColor* %new)
  %frombool196 = zext i1 %call195 to i8
  store i8 %frombool196, i8* %success_p, align 1
  br label %if.end.198

if.else.197:                                      ; preds = %if.then.147
  store i8 1, i8* %success_p, align 1
  br label %if.end.198

if.end.198:                                       ; preds = %if.else.197, %cond.end.191
  %pixel199 = getelementptr inbounds %struct.XColor, %struct.XColor* %new, i32 0, i32 0
  %69 = load i64, i64* %pixel199, align 8
  %70 = load i64*, i64** %pixel.addr, align 8
  store i64 %69, i64* %70, align 8
  br label %if.end.200

if.end.200:                                       ; preds = %if.end.198, %if.end.146
  %71 = load i8, i8* %success_p, align 1
  %tobool201 = trunc i8 %71 to i1
  ret i1 %tobool201
}

declare i32 @XDrawLine(%struct._XDisplay*, i64, %struct._XGC*, i32, i32, i32, i32) #1

declare i64 @XCreatePixmap(%struct._XDisplay*, i64, i32, i32, i32) #1

declare i32 @XSetTSOrigin(%struct._XDisplay*, %struct._XGC*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_draw_image_foreground_1(%struct.glyph_string* %s, i64 %pixmap) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %pixmap.addr = alloca i64, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %mask44 = alloca i64, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %r = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  store i64 %pixmap, i64* %pixmap.addr, align 8
  store i32 0, i32* %x, align 4
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 2
  %1 = load i32, i32* %ybase, align 4
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %y1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 1
  %3 = load i32, i32* %y1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 26
  %5 = load %struct.image*, %struct.image** %img, align 8
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 17
  %7 = load %struct.face*, %struct.face** %face, align 8
  %8 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 28
  %call = call i32 @image_ascent(%struct.image* %5, %struct.face* %7, %struct.glyph_slice* %slice)
  %sub2 = sub nsw i32 %sub, %call
  store i32 %sub2, i32* %y, align 4
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 17
  %10 = load %struct.face*, %struct.face** %face3, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %10, i32 0, i32 13
  %11 = bitcast i24* %box to i32*
  %bf.load = load i32, i32* %11, align 8
  %bf.clear = and i32 %bf.load, 3
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 25
  %13 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %13, i32 0, i32 6
  %14 = bitcast i24* %left_box_line_p to i32*
  %bf.load4 = load i32, i32* %14, align 8
  %bf.lshr = lshr i32 %bf.load4, 4
  %bf.clear5 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear5 to i1
  br i1 %bf.cast, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 28
  %16 = bitcast %struct.glyph_slice* %slice7 to i64*
  %bf.load8 = load i64, i64* %16, align 4
  %bf.clear9 = and i64 %bf.load8, 65535
  %bf.cast10 = trunc i64 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 0
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.6
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face12 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 17
  %18 = load %struct.face*, %struct.face** %face12, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %18, i32 0, i32 12
  %19 = load i32, i32* %box_line_width, align 4
  %cmp13 = icmp slt i32 %19, 0
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %20 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face14 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %20, i32 0, i32 17
  %21 = load %struct.face*, %struct.face** %face14, align 8
  %box_line_width15 = getelementptr inbounds %struct.face, %struct.face* %21, i32 0, i32 12
  %22 = load i32, i32* %box_line_width15, align 4
  %sub16 = sub nsw i32 0, %22
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face17 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 17
  %24 = load %struct.face*, %struct.face** %face17, align 8
  %box_line_width18 = getelementptr inbounds %struct.face, %struct.face* %24, i32 0, i32 12
  %25 = load i32, i32* %box_line_width18, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub16, %cond.true ], [ %25, %cond.false ]
  %26 = load i32, i32* %x, align 4
  %add = add nsw i32 %26, %cond
  store i32 %add, i32* %x, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true.6, %land.lhs.true, %entry
  %27 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice19 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %27, i32 0, i32 28
  %28 = bitcast %struct.glyph_slice* %slice19 to i64*
  %bf.load20 = load i64, i64* %28, align 4
  %bf.clear21 = and i64 %bf.load20, 65535
  %bf.cast22 = trunc i64 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 0
  br i1 %cmp23, label %if.then.24, label %if.end.27

if.then.24:                                       ; preds = %if.end
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img25 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %29, i32 0, i32 26
  %30 = load %struct.image*, %struct.image** %img25, align 8
  %hmargin = getelementptr inbounds %struct.image, %struct.image* %30, i32 0, i32 18
  %31 = load i32, i32* %hmargin, align 4
  %32 = load i32, i32* %x, align 4
  %add26 = add nsw i32 %32, %31
  store i32 %add26, i32* %x, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.24, %if.end
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice28 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 28
  %34 = bitcast %struct.glyph_slice* %slice28 to i64*
  %bf.load29 = load i64, i64* %34, align 4
  %bf.lshr30 = lshr i64 %bf.load29, 16
  %bf.clear31 = and i64 %bf.lshr30, 65535
  %bf.cast32 = trunc i64 %bf.clear31 to i32
  %cmp33 = icmp eq i32 %bf.cast32, 0
  br i1 %cmp33, label %if.then.34, label %if.end.37

if.then.34:                                       ; preds = %if.end.27
  %35 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img35 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %35, i32 0, i32 26
  %36 = load %struct.image*, %struct.image** %img35, align 8
  %vmargin = getelementptr inbounds %struct.image, %struct.image* %36, i32 0, i32 19
  %37 = load i32, i32* %vmargin, align 4
  %38 = load i32, i32* %y, align 4
  %add36 = add nsw i32 %38, %37
  store i32 %add36, i32* %y, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %if.end.27
  %39 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img38 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %39, i32 0, i32 26
  %40 = load %struct.image*, %struct.image** %img38, align 8
  %pixmap39 = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 1
  %41 = load i64, i64* %pixmap39, align 8
  %tobool = icmp ne i64 %41, 0
  br i1 %tobool, label %if.then.40, label %if.else.140

if.then.40:                                       ; preds = %if.end.37
  %42 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img41 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %42, i32 0, i32 26
  %43 = load %struct.image*, %struct.image** %img41, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %43, i32 0, i32 2
  %44 = load i64, i64* %mask, align 8
  %tobool42 = icmp ne i64 %44, 0
  br i1 %tobool42, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %if.then.40
  store i64 917505, i64* %mask44, align 8
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img45 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 26
  %46 = load %struct.image*, %struct.image** %img45, align 8
  %mask46 = getelementptr inbounds %struct.image, %struct.image* %46, i32 0, i32 2
  %47 = load i64, i64* %mask46, align 8
  %clip_mask = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 20
  store i64 %47, i64* %clip_mask, align 8
  %48 = load i32, i32* %x, align 4
  %49 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice47 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %49, i32 0, i32 28
  %50 = bitcast %struct.glyph_slice* %slice47 to i64*
  %bf.load48 = load i64, i64* %50, align 4
  %bf.clear49 = and i64 %bf.load48, 65535
  %bf.cast50 = trunc i64 %bf.clear49 to i32
  %sub51 = sub nsw i32 %48, %bf.cast50
  %clip_x_origin = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 18
  store i32 %sub51, i32* %clip_x_origin, align 4
  %51 = load i32, i32* %y, align 4
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice52 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %52, i32 0, i32 28
  %53 = bitcast %struct.glyph_slice* %slice52 to i64*
  %bf.load53 = load i64, i64* %53, align 4
  %bf.lshr54 = lshr i64 %bf.load53, 16
  %bf.clear55 = and i64 %bf.lshr54, 65535
  %bf.cast56 = trunc i64 %bf.clear55 to i32
  %sub57 = sub nsw i32 %51, %bf.cast56
  %clip_y_origin = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 19
  store i32 %sub57, i32* %clip_y_origin, align 4
  %function = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 0
  store i32 3, i32* %function, align 4
  %54 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %54, i32 0, i32 10
  %55 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %56 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %56, i32 0, i32 24
  %57 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %58 = load i64, i64* %mask44, align 8
  %call58 = call i32 @XChangeGC(%struct._XDisplay* %55, %struct._XGC* %57, i64 %58, %struct.XGCValues* %xgcv)
  %59 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display59 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %59, i32 0, i32 10
  %60 = load %struct._XDisplay*, %struct._XDisplay** %display59, align 8
  %61 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img60 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %61, i32 0, i32 26
  %62 = load %struct.image*, %struct.image** %img60, align 8
  %pixmap61 = getelementptr inbounds %struct.image, %struct.image* %62, i32 0, i32 1
  %63 = load i64, i64* %pixmap61, align 8
  %64 = load i64, i64* %pixmap.addr, align 8
  %65 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc62 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %65, i32 0, i32 24
  %66 = load %struct._XGC*, %struct._XGC** %gc62, align 8
  %67 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice63 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %67, i32 0, i32 28
  %68 = bitcast %struct.glyph_slice* %slice63 to i64*
  %bf.load64 = load i64, i64* %68, align 4
  %bf.clear65 = and i64 %bf.load64, 65535
  %bf.cast66 = trunc i64 %bf.clear65 to i32
  %69 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice67 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %69, i32 0, i32 28
  %70 = bitcast %struct.glyph_slice* %slice67 to i64*
  %bf.load68 = load i64, i64* %70, align 4
  %bf.lshr69 = lshr i64 %bf.load68, 16
  %bf.clear70 = and i64 %bf.lshr69, 65535
  %bf.cast71 = trunc i64 %bf.clear70 to i32
  %71 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice72 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %71, i32 0, i32 28
  %72 = bitcast %struct.glyph_slice* %slice72 to i64*
  %bf.load73 = load i64, i64* %72, align 4
  %bf.lshr74 = lshr i64 %bf.load73, 32
  %bf.clear75 = and i64 %bf.lshr74, 65535
  %bf.cast76 = trunc i64 %bf.clear75 to i32
  %73 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice77 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %73, i32 0, i32 28
  %74 = bitcast %struct.glyph_slice* %slice77 to i64*
  %bf.load78 = load i64, i64* %74, align 4
  %bf.lshr79 = lshr i64 %bf.load78, 48
  %bf.cast80 = trunc i64 %bf.lshr79 to i32
  %75 = load i32, i32* %x, align 4
  %76 = load i32, i32* %y, align 4
  %call81 = call i32 @XCopyArea(%struct._XDisplay* %60, i64 %63, i64 %64, %struct._XGC* %66, i32 %bf.cast66, i32 %bf.cast71, i32 %bf.cast76, i32 %bf.cast80, i32 %75, i32 %76)
  %77 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display82 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %77, i32 0, i32 10
  %78 = load %struct._XDisplay*, %struct._XDisplay** %display82, align 8
  %79 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc83 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %79, i32 0, i32 24
  %80 = load %struct._XGC*, %struct._XGC** %gc83, align 8
  %call84 = call i32 @XSetClipMask(%struct._XDisplay* %78, %struct._XGC* %80, i64 0)
  br label %if.end.139

if.else:                                          ; preds = %if.then.40
  %81 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display85 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %81, i32 0, i32 10
  %82 = load %struct._XDisplay*, %struct._XDisplay** %display85, align 8
  %83 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img86 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %83, i32 0, i32 26
  %84 = load %struct.image*, %struct.image** %img86, align 8
  %pixmap87 = getelementptr inbounds %struct.image, %struct.image* %84, i32 0, i32 1
  %85 = load i64, i64* %pixmap87, align 8
  %86 = load i64, i64* %pixmap.addr, align 8
  %87 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc88 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %87, i32 0, i32 24
  %88 = load %struct._XGC*, %struct._XGC** %gc88, align 8
  %89 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice89 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %89, i32 0, i32 28
  %90 = bitcast %struct.glyph_slice* %slice89 to i64*
  %bf.load90 = load i64, i64* %90, align 4
  %bf.clear91 = and i64 %bf.load90, 65535
  %bf.cast92 = trunc i64 %bf.clear91 to i32
  %91 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice93 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %91, i32 0, i32 28
  %92 = bitcast %struct.glyph_slice* %slice93 to i64*
  %bf.load94 = load i64, i64* %92, align 4
  %bf.lshr95 = lshr i64 %bf.load94, 16
  %bf.clear96 = and i64 %bf.lshr95, 65535
  %bf.cast97 = trunc i64 %bf.clear96 to i32
  %93 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice98 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %93, i32 0, i32 28
  %94 = bitcast %struct.glyph_slice* %slice98 to i64*
  %bf.load99 = load i64, i64* %94, align 4
  %bf.lshr100 = lshr i64 %bf.load99, 32
  %bf.clear101 = and i64 %bf.lshr100, 65535
  %bf.cast102 = trunc i64 %bf.clear101 to i32
  %95 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice103 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %95, i32 0, i32 28
  %96 = bitcast %struct.glyph_slice* %slice103 to i64*
  %bf.load104 = load i64, i64* %96, align 4
  %bf.lshr105 = lshr i64 %bf.load104, 48
  %bf.cast106 = trunc i64 %bf.lshr105 to i32
  %97 = load i32, i32* %x, align 4
  %98 = load i32, i32* %y, align 4
  %call107 = call i32 @XCopyArea(%struct._XDisplay* %82, i64 %85, i64 %86, %struct._XGC* %88, i32 %bf.cast92, i32 %bf.cast97, i32 %bf.cast102, i32 %bf.cast106, i32 %97, i32 %98)
  %99 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %99, i32 0, i32 16
  %100 = load i32, i32* %hl, align 4
  %cmp108 = icmp eq i32 %100, 2
  br i1 %cmp108, label %if.then.109, label %if.end.138

if.then.109:                                      ; preds = %if.else
  %101 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img110 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %101, i32 0, i32 26
  %102 = load %struct.image*, %struct.image** %img110, align 8
  %relief = getelementptr inbounds %struct.image, %struct.image* %102, i32 0, i32 17
  %103 = load i32, i32* %relief, align 4
  %cmp111 = icmp slt i32 %103, 0
  br i1 %cmp111, label %cond.true.112, label %cond.false.116

cond.true.112:                                    ; preds = %if.then.109
  %104 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img113 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %104, i32 0, i32 26
  %105 = load %struct.image*, %struct.image** %img113, align 8
  %relief114 = getelementptr inbounds %struct.image, %struct.image* %105, i32 0, i32 17
  %106 = load i32, i32* %relief114, align 4
  %sub115 = sub nsw i32 0, %106
  br label %cond.end.119

cond.false.116:                                   ; preds = %if.then.109
  %107 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img117 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %107, i32 0, i32 26
  %108 = load %struct.image*, %struct.image** %img117, align 8
  %relief118 = getelementptr inbounds %struct.image, %struct.image* %108, i32 0, i32 17
  %109 = load i32, i32* %relief118, align 4
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.116, %cond.true.112
  %cond120 = phi i32 [ %sub115, %cond.true.112 ], [ %109, %cond.false.116 ]
  store i32 %cond120, i32* %r, align 4
  %110 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %110, i32 0, i32 8
  %111 = load %struct.frame*, %struct.frame** %f, align 8
  %112 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc121 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %112, i32 0, i32 24
  %113 = load %struct._XGC*, %struct._XGC** %gc121, align 8
  %114 = load i32, i32* %x, align 4
  %115 = load i32, i32* %r, align 4
  %sub122 = sub nsw i32 %114, %115
  %116 = load i32, i32* %y, align 4
  %117 = load i32, i32* %r, align 4
  %sub123 = sub nsw i32 %116, %117
  %118 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice124 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %118, i32 0, i32 28
  %119 = bitcast %struct.glyph_slice* %slice124 to i64*
  %bf.load125 = load i64, i64* %119, align 4
  %bf.lshr126 = lshr i64 %bf.load125, 32
  %bf.clear127 = and i64 %bf.lshr126, 65535
  %bf.cast128 = trunc i64 %bf.clear127 to i32
  %120 = load i32, i32* %r, align 4
  %mul = mul nsw i32 %120, 2
  %add129 = add nsw i32 %bf.cast128, %mul
  %sub130 = sub nsw i32 %add129, 1
  %121 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice131 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %121, i32 0, i32 28
  %122 = bitcast %struct.glyph_slice* %slice131 to i64*
  %bf.load132 = load i64, i64* %122, align 4
  %bf.lshr133 = lshr i64 %bf.load132, 48
  %bf.cast134 = trunc i64 %bf.lshr133 to i32
  %123 = load i32, i32* %r, align 4
  %mul135 = mul nsw i32 %123, 2
  %add136 = add nsw i32 %bf.cast134, %mul135
  %sub137 = sub nsw i32 %add136, 1
  call void @x_draw_rectangle(%struct.frame* %111, %struct._XGC* %113, i32 %sub122, i32 %sub123, i32 %sub130, i32 %sub137)
  br label %if.end.138

if.end.138:                                       ; preds = %cond.end.119, %if.else
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.138, %if.then.43
  br label %if.end.154

if.else.140:                                      ; preds = %if.end.37
  %124 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f141 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %124, i32 0, i32 8
  %125 = load %struct.frame*, %struct.frame** %f141, align 8
  %126 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc142 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %126, i32 0, i32 24
  %127 = load %struct._XGC*, %struct._XGC** %gc142, align 8
  %128 = load i32, i32* %x, align 4
  %129 = load i32, i32* %y, align 4
  %130 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice143 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %130, i32 0, i32 28
  %131 = bitcast %struct.glyph_slice* %slice143 to i64*
  %bf.load144 = load i64, i64* %131, align 4
  %bf.lshr145 = lshr i64 %bf.load144, 32
  %bf.clear146 = and i64 %bf.lshr145, 65535
  %bf.cast147 = trunc i64 %bf.clear146 to i32
  %sub148 = sub nsw i32 %bf.cast147, 1
  %132 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice149 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %132, i32 0, i32 28
  %133 = bitcast %struct.glyph_slice* %slice149 to i64*
  %bf.load150 = load i64, i64* %133, align 4
  %bf.lshr151 = lshr i64 %bf.load150, 48
  %bf.cast152 = trunc i64 %bf.lshr151 to i32
  %sub153 = sub nsw i32 %bf.cast152, 1
  call void @x_draw_rectangle(%struct.frame* %125, %struct._XGC* %127, i32 %128, i32 %129, i32 %sub148, i32 %sub153)
  br label %if.end.154

if.end.154:                                       ; preds = %if.else.140, %if.end.139
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_image_foreground(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %mask42 = alloca i64, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %clip_rect = alloca %struct.XRectangle, align 2
  %image_rect = alloca %struct.XRectangle, align 2
  %r = alloca %struct.XRectangle, align 2
  %clip_rect93 = alloca %struct.XRectangle, align 2
  %image_rect94 = alloca %struct.XRectangle, align 2
  %r95 = alloca %struct.XRectangle, align 2
  %relief = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x1 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  store i32 %1, i32* %x, align 4
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 2
  %3 = load i32, i32* %ybase, align 4
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 26
  %5 = load %struct.image*, %struct.image** %img, align 8
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 17
  %7 = load %struct.face*, %struct.face** %face, align 8
  %8 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 28
  %call = call i32 @image_ascent(%struct.image* %5, %struct.face* %7, %struct.glyph_slice* %slice)
  %sub = sub nsw i32 %3, %call
  store i32 %sub, i32* %y, align 4
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 17
  %10 = load %struct.face*, %struct.face** %face2, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %10, i32 0, i32 13
  %11 = bitcast i24* %box to i32*
  %bf.load = load i32, i32* %11, align 8
  %bf.clear = and i32 %bf.load, 3
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 25
  %13 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %13, i32 0, i32 6
  %14 = bitcast i24* %left_box_line_p to i32*
  %bf.load3 = load i32, i32* %14, align 8
  %bf.lshr = lshr i32 %bf.load3, 4
  %bf.clear4 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear4 to i1
  br i1 %bf.cast, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice6 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 28
  %16 = bitcast %struct.glyph_slice* %slice6 to i64*
  %bf.load7 = load i64, i64* %16, align 4
  %bf.clear8 = and i64 %bf.load7, 65535
  %bf.cast9 = trunc i64 %bf.clear8 to i32
  %cmp10 = icmp eq i32 %bf.cast9, 0
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.5
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face11 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 17
  %18 = load %struct.face*, %struct.face** %face11, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %18, i32 0, i32 12
  %19 = load i32, i32* %box_line_width, align 4
  %cmp12 = icmp slt i32 %19, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %20 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face13 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %20, i32 0, i32 17
  %21 = load %struct.face*, %struct.face** %face13, align 8
  %box_line_width14 = getelementptr inbounds %struct.face, %struct.face* %21, i32 0, i32 12
  %22 = load i32, i32* %box_line_width14, align 4
  %sub15 = sub nsw i32 0, %22
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face16 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 17
  %24 = load %struct.face*, %struct.face** %face16, align 8
  %box_line_width17 = getelementptr inbounds %struct.face, %struct.face* %24, i32 0, i32 12
  %25 = load i32, i32* %box_line_width17, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub15, %cond.true ], [ %25, %cond.false ]
  %26 = load i32, i32* %x, align 4
  %add = add nsw i32 %26, %cond
  store i32 %add, i32* %x, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true.5, %land.lhs.true, %entry
  %27 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice18 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %27, i32 0, i32 28
  %28 = bitcast %struct.glyph_slice* %slice18 to i64*
  %bf.load19 = load i64, i64* %28, align 4
  %bf.clear20 = and i64 %bf.load19, 65535
  %bf.cast21 = trunc i64 %bf.clear20 to i32
  %cmp22 = icmp eq i32 %bf.cast21, 0
  br i1 %cmp22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.end
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img24 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %29, i32 0, i32 26
  %30 = load %struct.image*, %struct.image** %img24, align 8
  %hmargin = getelementptr inbounds %struct.image, %struct.image* %30, i32 0, i32 18
  %31 = load i32, i32* %hmargin, align 4
  %32 = load i32, i32* %x, align 4
  %add25 = add nsw i32 %32, %31
  store i32 %add25, i32* %x, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.23, %if.end
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice27 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 28
  %34 = bitcast %struct.glyph_slice* %slice27 to i64*
  %bf.load28 = load i64, i64* %34, align 4
  %bf.lshr29 = lshr i64 %bf.load28, 16
  %bf.clear30 = and i64 %bf.lshr29, 65535
  %bf.cast31 = trunc i64 %bf.clear30 to i32
  %cmp32 = icmp eq i32 %bf.cast31, 0
  br i1 %cmp32, label %if.then.33, label %if.end.36

if.then.33:                                       ; preds = %if.end.26
  %35 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img34 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %35, i32 0, i32 26
  %36 = load %struct.image*, %struct.image** %img34, align 8
  %vmargin = getelementptr inbounds %struct.image, %struct.image* %36, i32 0, i32 19
  %37 = load i32, i32* %vmargin, align 4
  %38 = load i32, i32* %y, align 4
  %add35 = add nsw i32 %38, %37
  store i32 %add35, i32* %y, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.33, %if.end.26
  %39 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img37 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %39, i32 0, i32 26
  %40 = load %struct.image*, %struct.image** %img37, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %40, i32 0, i32 1
  %41 = load i64, i64* %pixmap, align 8
  %tobool = icmp ne i64 %41, 0
  br i1 %tobool, label %if.then.38, label %if.else.182

if.then.38:                                       ; preds = %if.end.36
  %42 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img39 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %42, i32 0, i32 26
  %43 = load %struct.image*, %struct.image** %img39, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %43, i32 0, i32 2
  %44 = load i64, i64* %mask, align 8
  %tobool40 = icmp ne i64 %44, 0
  br i1 %tobool40, label %if.then.41, label %if.else

if.then.41:                                       ; preds = %if.then.38
  store i64 917505, i64* %mask42, align 8
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img43 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 26
  %46 = load %struct.image*, %struct.image** %img43, align 8
  %mask44 = getelementptr inbounds %struct.image, %struct.image* %46, i32 0, i32 2
  %47 = load i64, i64* %mask44, align 8
  %clip_mask = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 20
  store i64 %47, i64* %clip_mask, align 8
  %48 = load i32, i32* %x, align 4
  %clip_x_origin = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 18
  store i32 %48, i32* %clip_x_origin, align 4
  %49 = load i32, i32* %y, align 4
  %clip_y_origin = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 19
  store i32 %49, i32* %clip_y_origin, align 4
  %function = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 0
  store i32 3, i32* %function, align 4
  %50 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %50, i32 0, i32 10
  %51 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %52 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %52, i32 0, i32 24
  %53 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %54 = load i64, i64* %mask42, align 8
  %call45 = call i32 @XChangeGC(%struct._XDisplay* %51, %struct._XGC* %53, i64 %54, %struct.XGCValues* %xgcv)
  %55 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @get_glyph_string_clip_rect(%struct.glyph_string* %55, %struct.XRectangle* %clip_rect)
  %56 = load i32, i32* %x, align 4
  %conv = trunc i32 %56 to i16
  %x46 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect, i32 0, i32 0
  store i16 %conv, i16* %x46, align 2
  %57 = load i32, i32* %y, align 4
  %conv47 = trunc i32 %57 to i16
  %y48 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect, i32 0, i32 1
  store i16 %conv47, i16* %y48, align 2
  %58 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice49 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %58, i32 0, i32 28
  %59 = bitcast %struct.glyph_slice* %slice49 to i64*
  %bf.load50 = load i64, i64* %59, align 4
  %bf.lshr51 = lshr i64 %bf.load50, 32
  %bf.clear52 = and i64 %bf.lshr51, 65535
  %bf.cast53 = trunc i64 %bf.clear52 to i32
  %conv54 = trunc i32 %bf.cast53 to i16
  %width = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect, i32 0, i32 2
  store i16 %conv54, i16* %width, align 2
  %60 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice55 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %60, i32 0, i32 28
  %61 = bitcast %struct.glyph_slice* %slice55 to i64*
  %bf.load56 = load i64, i64* %61, align 4
  %bf.lshr57 = lshr i64 %bf.load56, 48
  %bf.cast58 = trunc i64 %bf.lshr57 to i32
  %conv59 = trunc i32 %bf.cast58 to i16
  %height = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect, i32 0, i32 3
  store i16 %conv59, i16* %height, align 2
  %call60 = call zeroext i1 @x_intersect_rectangles(%struct.XRectangle* %clip_rect, %struct.XRectangle* %image_rect, %struct.XRectangle* %r)
  br i1 %call60, label %if.then.61, label %if.end.92

if.then.61:                                       ; preds = %if.then.41
  %62 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display62 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %62, i32 0, i32 10
  %63 = load %struct._XDisplay*, %struct._XDisplay** %display62, align 8
  %64 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img63 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %64, i32 0, i32 26
  %65 = load %struct.image*, %struct.image** %img63, align 8
  %pixmap64 = getelementptr inbounds %struct.image, %struct.image* %65, i32 0, i32 1
  %66 = load i64, i64* %pixmap64, align 8
  %67 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %window = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %67, i32 0, i32 11
  %68 = load i64, i64* %window, align 8
  %69 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc65 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %69, i32 0, i32 24
  %70 = load %struct._XGC*, %struct._XGC** %gc65, align 8
  %71 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice66 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %71, i32 0, i32 28
  %72 = bitcast %struct.glyph_slice* %slice66 to i64*
  %bf.load67 = load i64, i64* %72, align 4
  %bf.clear68 = and i64 %bf.load67, 65535
  %bf.cast69 = trunc i64 %bf.clear68 to i32
  %x70 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 0
  %73 = load i16, i16* %x70, align 2
  %conv71 = sext i16 %73 to i32
  %add72 = add nsw i32 %bf.cast69, %conv71
  %74 = load i32, i32* %x, align 4
  %sub73 = sub nsw i32 %add72, %74
  %75 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice74 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %75, i32 0, i32 28
  %76 = bitcast %struct.glyph_slice* %slice74 to i64*
  %bf.load75 = load i64, i64* %76, align 4
  %bf.lshr76 = lshr i64 %bf.load75, 16
  %bf.clear77 = and i64 %bf.lshr76, 65535
  %bf.cast78 = trunc i64 %bf.clear77 to i32
  %y79 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 1
  %77 = load i16, i16* %y79, align 2
  %conv80 = sext i16 %77 to i32
  %add81 = add nsw i32 %bf.cast78, %conv80
  %78 = load i32, i32* %y, align 4
  %sub82 = sub nsw i32 %add81, %78
  %width83 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 2
  %79 = load i16, i16* %width83, align 2
  %conv84 = zext i16 %79 to i32
  %height85 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 3
  %80 = load i16, i16* %height85, align 2
  %conv86 = zext i16 %80 to i32
  %x87 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 0
  %81 = load i16, i16* %x87, align 2
  %conv88 = sext i16 %81 to i32
  %y89 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r, i32 0, i32 1
  %82 = load i16, i16* %y89, align 2
  %conv90 = sext i16 %82 to i32
  %call91 = call i32 @XCopyArea(%struct._XDisplay* %63, i64 %66, i64 %68, %struct._XGC* %70, i32 %sub73, i32 %sub82, i32 %conv84, i32 %conv86, i32 %conv88, i32 %conv90)
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.61, %if.then.41
  br label %if.end.181

if.else:                                          ; preds = %if.then.38
  %83 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @get_glyph_string_clip_rect(%struct.glyph_string* %83, %struct.XRectangle* %clip_rect93)
  %84 = load i32, i32* %x, align 4
  %conv96 = trunc i32 %84 to i16
  %x97 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect94, i32 0, i32 0
  store i16 %conv96, i16* %x97, align 2
  %85 = load i32, i32* %y, align 4
  %conv98 = trunc i32 %85 to i16
  %y99 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect94, i32 0, i32 1
  store i16 %conv98, i16* %y99, align 2
  %86 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice100 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %86, i32 0, i32 28
  %87 = bitcast %struct.glyph_slice* %slice100 to i64*
  %bf.load101 = load i64, i64* %87, align 4
  %bf.lshr102 = lshr i64 %bf.load101, 32
  %bf.clear103 = and i64 %bf.lshr102, 65535
  %bf.cast104 = trunc i64 %bf.clear103 to i32
  %conv105 = trunc i32 %bf.cast104 to i16
  %width106 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect94, i32 0, i32 2
  store i16 %conv105, i16* %width106, align 2
  %88 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice107 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %88, i32 0, i32 28
  %89 = bitcast %struct.glyph_slice* %slice107 to i64*
  %bf.load108 = load i64, i64* %89, align 4
  %bf.lshr109 = lshr i64 %bf.load108, 48
  %bf.cast110 = trunc i64 %bf.lshr109 to i32
  %conv111 = trunc i32 %bf.cast110 to i16
  %height112 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %image_rect94, i32 0, i32 3
  store i16 %conv111, i16* %height112, align 2
  %call113 = call zeroext i1 @x_intersect_rectangles(%struct.XRectangle* %clip_rect93, %struct.XRectangle* %image_rect94, %struct.XRectangle* %r95)
  br i1 %call113, label %if.then.114, label %if.end.146

if.then.114:                                      ; preds = %if.else
  %90 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %display115 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %90, i32 0, i32 10
  %91 = load %struct._XDisplay*, %struct._XDisplay** %display115, align 8
  %92 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img116 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %92, i32 0, i32 26
  %93 = load %struct.image*, %struct.image** %img116, align 8
  %pixmap117 = getelementptr inbounds %struct.image, %struct.image* %93, i32 0, i32 1
  %94 = load i64, i64* %pixmap117, align 8
  %95 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %window118 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %95, i32 0, i32 11
  %96 = load i64, i64* %window118, align 8
  %97 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc119 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %97, i32 0, i32 24
  %98 = load %struct._XGC*, %struct._XGC** %gc119, align 8
  %99 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice120 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %99, i32 0, i32 28
  %100 = bitcast %struct.glyph_slice* %slice120 to i64*
  %bf.load121 = load i64, i64* %100, align 4
  %bf.clear122 = and i64 %bf.load121, 65535
  %bf.cast123 = trunc i64 %bf.clear122 to i32
  %x124 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r95, i32 0, i32 0
  %101 = load i16, i16* %x124, align 2
  %conv125 = sext i16 %101 to i32
  %add126 = add nsw i32 %bf.cast123, %conv125
  %102 = load i32, i32* %x, align 4
  %sub127 = sub nsw i32 %add126, %102
  %103 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice128 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %103, i32 0, i32 28
  %104 = bitcast %struct.glyph_slice* %slice128 to i64*
  %bf.load129 = load i64, i64* %104, align 4
  %bf.lshr130 = lshr i64 %bf.load129, 16
  %bf.clear131 = and i64 %bf.lshr130, 65535
  %bf.cast132 = trunc i64 %bf.clear131 to i32
  %y133 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r95, i32 0, i32 1
  %105 = load i16, i16* %y133, align 2
  %conv134 = sext i16 %105 to i32
  %add135 = add nsw i32 %bf.cast132, %conv134
  %106 = load i32, i32* %y, align 4
  %sub136 = sub nsw i32 %add135, %106
  %width137 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r95, i32 0, i32 2
  %107 = load i16, i16* %width137, align 2
  %conv138 = zext i16 %107 to i32
  %height139 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r95, i32 0, i32 3
  %108 = load i16, i16* %height139, align 2
  %conv140 = zext i16 %108 to i32
  %x141 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r95, i32 0, i32 0
  %109 = load i16, i16* %x141, align 2
  %conv142 = sext i16 %109 to i32
  %y143 = getelementptr inbounds %struct.XRectangle, %struct.XRectangle* %r95, i32 0, i32 1
  %110 = load i16, i16* %y143, align 2
  %conv144 = sext i16 %110 to i32
  %call145 = call i32 @XCopyArea(%struct._XDisplay* %91, i64 %94, i64 %96, %struct._XGC* %98, i32 %sub127, i32 %sub136, i32 %conv138, i32 %conv140, i32 %conv142, i32 %conv144)
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.114, %if.else
  %111 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %111, i32 0, i32 16
  %112 = load i32, i32* %hl, align 4
  %cmp147 = icmp eq i32 %112, 2
  br i1 %cmp147, label %if.then.149, label %if.end.180

if.then.149:                                      ; preds = %if.end.146
  %113 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img150 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %113, i32 0, i32 26
  %114 = load %struct.image*, %struct.image** %img150, align 8
  %relief151 = getelementptr inbounds %struct.image, %struct.image* %114, i32 0, i32 17
  %115 = load i32, i32* %relief151, align 4
  %cmp152 = icmp slt i32 %115, 0
  br i1 %cmp152, label %cond.true.154, label %cond.false.158

cond.true.154:                                    ; preds = %if.then.149
  %116 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img155 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %116, i32 0, i32 26
  %117 = load %struct.image*, %struct.image** %img155, align 8
  %relief156 = getelementptr inbounds %struct.image, %struct.image* %117, i32 0, i32 17
  %118 = load i32, i32* %relief156, align 4
  %sub157 = sub nsw i32 0, %118
  br label %cond.end.161

cond.false.158:                                   ; preds = %if.then.149
  %119 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img159 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %119, i32 0, i32 26
  %120 = load %struct.image*, %struct.image** %img159, align 8
  %relief160 = getelementptr inbounds %struct.image, %struct.image* %120, i32 0, i32 17
  %121 = load i32, i32* %relief160, align 4
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.158, %cond.true.154
  %cond162 = phi i32 [ %sub157, %cond.true.154 ], [ %121, %cond.false.158 ]
  store i32 %cond162, i32* %relief, align 4
  %122 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %122, i32 0, i32 8
  %123 = load %struct.frame*, %struct.frame** %f, align 8
  %124 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc163 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %124, i32 0, i32 24
  %125 = load %struct._XGC*, %struct._XGC** %gc163, align 8
  %126 = load i32, i32* %x, align 4
  %127 = load i32, i32* %relief, align 4
  %sub164 = sub nsw i32 %126, %127
  %128 = load i32, i32* %y, align 4
  %129 = load i32, i32* %relief, align 4
  %sub165 = sub nsw i32 %128, %129
  %130 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice166 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %130, i32 0, i32 28
  %131 = bitcast %struct.glyph_slice* %slice166 to i64*
  %bf.load167 = load i64, i64* %131, align 4
  %bf.lshr168 = lshr i64 %bf.load167, 32
  %bf.clear169 = and i64 %bf.lshr168, 65535
  %bf.cast170 = trunc i64 %bf.clear169 to i32
  %132 = load i32, i32* %relief, align 4
  %mul = mul nsw i32 %132, 2
  %add171 = add nsw i32 %bf.cast170, %mul
  %sub172 = sub nsw i32 %add171, 1
  %133 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice173 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %133, i32 0, i32 28
  %134 = bitcast %struct.glyph_slice* %slice173 to i64*
  %bf.load174 = load i64, i64* %134, align 4
  %bf.lshr175 = lshr i64 %bf.load174, 48
  %bf.cast176 = trunc i64 %bf.lshr175 to i32
  %135 = load i32, i32* %relief, align 4
  %mul177 = mul nsw i32 %135, 2
  %add178 = add nsw i32 %bf.cast176, %mul177
  %sub179 = sub nsw i32 %add178, 1
  call void @x_draw_rectangle(%struct.frame* %123, %struct._XGC* %125, i32 %sub164, i32 %sub165, i32 %sub172, i32 %sub179)
  br label %if.end.180

if.end.180:                                       ; preds = %cond.end.161, %if.end.146
  br label %if.end.181

if.end.181:                                       ; preds = %if.end.180, %if.end.92
  br label %if.end.196

if.else.182:                                      ; preds = %if.end.36
  %136 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f183 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %136, i32 0, i32 8
  %137 = load %struct.frame*, %struct.frame** %f183, align 8
  %138 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %gc184 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %138, i32 0, i32 24
  %139 = load %struct._XGC*, %struct._XGC** %gc184, align 8
  %140 = load i32, i32* %x, align 4
  %141 = load i32, i32* %y, align 4
  %142 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice185 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %142, i32 0, i32 28
  %143 = bitcast %struct.glyph_slice* %slice185 to i64*
  %bf.load186 = load i64, i64* %143, align 4
  %bf.lshr187 = lshr i64 %bf.load186, 32
  %bf.clear188 = and i64 %bf.lshr187, 65535
  %bf.cast189 = trunc i64 %bf.clear188 to i32
  %sub190 = sub nsw i32 %bf.cast189, 1
  %144 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice191 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %144, i32 0, i32 28
  %145 = bitcast %struct.glyph_slice* %slice191 to i64*
  %bf.load192 = load i64, i64* %145, align 4
  %bf.lshr193 = lshr i64 %bf.load192, 48
  %bf.cast194 = trunc i64 %bf.lshr193 to i32
  %sub195 = sub nsw i32 %bf.cast194, 1
  call void @x_draw_rectangle(%struct.frame* %137, %struct._XGC* %139, i32 %140, i32 %141, i32 %sub190, i32 %sub195)
  br label %if.end.196

if.end.196:                                       ; preds = %if.else.182, %if.end.181
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_draw_image_relief(%struct.glyph_string* %s) #0 {
entry:
  %s.addr = alloca %struct.glyph_string*, align 8
  %x1 = alloca i32, align 4
  %y1 = alloca i32, align 4
  %thick = alloca i32, align 4
  %raised_p = alloca i8, align 1
  %top_p = alloca i8, align 1
  %bot_p = alloca i8, align 1
  %left_p = alloca i8, align 1
  %right_p = alloca i8, align 1
  %extra_x = alloca i32, align 4
  %extra_y = alloca i32, align 4
  %r = alloca %struct.XRectangle, align 2
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  store %struct.glyph_string* %s, %struct.glyph_string** %s.addr, align 8
  %0 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %x2 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %0, i32 0, i32 0
  %1 = load i32, i32* %x2, align 4
  store i32 %1, i32* %x, align 4
  %2 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %ybase = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %2, i32 0, i32 2
  %3 = load i32, i32* %ybase, align 4
  %4 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %4, i32 0, i32 26
  %5 = load %struct.image*, %struct.image** %img, align 8
  %6 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %6, i32 0, i32 17
  %7 = load %struct.face*, %struct.face** %face, align 8
  %8 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %8, i32 0, i32 28
  %call = call i32 @image_ascent(%struct.image* %5, %struct.face* %7, %struct.glyph_slice* %slice)
  %sub = sub nsw i32 %3, %call
  store i32 %sub, i32* %y, align 4
  %9 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face3 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %9, i32 0, i32 17
  %10 = load %struct.face*, %struct.face** %face3, align 8
  %box = getelementptr inbounds %struct.face, %struct.face* %10, i32 0, i32 13
  %11 = bitcast i24* %box to i32*
  %bf.load = load i32, i32* %11, align 8
  %bf.clear = and i32 %bf.load, 3
  %cmp = icmp ne i32 %bf.clear, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %12 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %first_glyph = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %12, i32 0, i32 25
  %13 = load %struct.glyph*, %struct.glyph** %first_glyph, align 8
  %left_box_line_p = getelementptr inbounds %struct.glyph, %struct.glyph* %13, i32 0, i32 6
  %14 = bitcast i24* %left_box_line_p to i32*
  %bf.load4 = load i32, i32* %14, align 8
  %bf.lshr = lshr i32 %bf.load4, 4
  %bf.clear5 = and i32 %bf.lshr, 1
  %bf.cast = trunc i32 %bf.clear5 to i1
  br i1 %bf.cast, label %land.lhs.true.6, label %if.end

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %15 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice7 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %15, i32 0, i32 28
  %16 = bitcast %struct.glyph_slice* %slice7 to i64*
  %bf.load8 = load i64, i64* %16, align 4
  %bf.clear9 = and i64 %bf.load8, 65535
  %bf.cast10 = trunc i64 %bf.clear9 to i32
  %cmp11 = icmp eq i32 %bf.cast10, 0
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.6
  %17 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face12 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %17, i32 0, i32 17
  %18 = load %struct.face*, %struct.face** %face12, align 8
  %box_line_width = getelementptr inbounds %struct.face, %struct.face* %18, i32 0, i32 12
  %19 = load i32, i32* %box_line_width, align 4
  %cmp13 = icmp slt i32 %19, 0
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %20 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face14 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %20, i32 0, i32 17
  %21 = load %struct.face*, %struct.face** %face14, align 8
  %box_line_width15 = getelementptr inbounds %struct.face, %struct.face* %21, i32 0, i32 12
  %22 = load i32, i32* %box_line_width15, align 4
  %sub16 = sub nsw i32 0, %22
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %23 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face17 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %23, i32 0, i32 17
  %24 = load %struct.face*, %struct.face** %face17, align 8
  %box_line_width18 = getelementptr inbounds %struct.face, %struct.face* %24, i32 0, i32 12
  %25 = load i32, i32* %box_line_width18, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub16, %cond.true ], [ %25, %cond.false ]
  %26 = load i32, i32* %x, align 4
  %add = add nsw i32 %26, %cond
  store i32 %add, i32* %x, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true.6, %land.lhs.true, %entry
  %27 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice19 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %27, i32 0, i32 28
  %28 = bitcast %struct.glyph_slice* %slice19 to i64*
  %bf.load20 = load i64, i64* %28, align 4
  %bf.clear21 = and i64 %bf.load20, 65535
  %bf.cast22 = trunc i64 %bf.clear21 to i32
  %cmp23 = icmp eq i32 %bf.cast22, 0
  br i1 %cmp23, label %if.then.24, label %if.end.27

if.then.24:                                       ; preds = %if.end
  %29 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img25 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %29, i32 0, i32 26
  %30 = load %struct.image*, %struct.image** %img25, align 8
  %hmargin = getelementptr inbounds %struct.image, %struct.image* %30, i32 0, i32 18
  %31 = load i32, i32* %hmargin, align 4
  %32 = load i32, i32* %x, align 4
  %add26 = add nsw i32 %32, %31
  store i32 %add26, i32* %x, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.24, %if.end
  %33 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice28 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %33, i32 0, i32 28
  %34 = bitcast %struct.glyph_slice* %slice28 to i64*
  %bf.load29 = load i64, i64* %34, align 4
  %bf.lshr30 = lshr i64 %bf.load29, 16
  %bf.clear31 = and i64 %bf.lshr30, 65535
  %bf.cast32 = trunc i64 %bf.clear31 to i32
  %cmp33 = icmp eq i32 %bf.cast32, 0
  br i1 %cmp33, label %if.then.34, label %if.end.37

if.then.34:                                       ; preds = %if.end.27
  %35 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img35 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %35, i32 0, i32 26
  %36 = load %struct.image*, %struct.image** %img35, align 8
  %vmargin = getelementptr inbounds %struct.image, %struct.image* %36, i32 0, i32 19
  %37 = load i32, i32* %vmargin, align 4
  %38 = load i32, i32* %y, align 4
  %add36 = add nsw i32 %38, %37
  store i32 %add36, i32* %y, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.34, %if.end.27
  %39 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %39, i32 0, i32 16
  %40 = load i32, i32* %hl, align 4
  %cmp38 = icmp eq i32 %40, 5
  br i1 %cmp38, label %if.then.41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.37
  %41 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl39 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %41, i32 0, i32 16
  %42 = load i32, i32* %hl39, align 4
  %cmp40 = icmp eq i32 %42, 4
  br i1 %cmp40, label %if.then.41, label %if.else

if.then.41:                                       ; preds = %lor.lhs.false, %if.end.37
  %43 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 413), align 8
  %cmp42 = icmp sge i64 %43, 0
  br i1 %cmp42, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %if.then.41
  %44 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 413), align 8
  br label %cond.end.45

cond.false.44:                                    ; preds = %if.then.41
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.false.44, %cond.true.43
  %cond46 = phi i64 [ %44, %cond.true.43 ], [ 1, %cond.false.44 ]
  %conv = trunc i64 %cond46 to i32
  store i32 %conv, i32* %thick, align 4
  %45 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %hl47 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %45, i32 0, i32 16
  %46 = load i32, i32* %hl47, align 4
  %cmp48 = icmp eq i32 %46, 4
  %frombool = zext i1 %cmp48 to i8
  store i8 %frombool, i8* %raised_p, align 1
  br label %if.end.67

if.else:                                          ; preds = %lor.lhs.false
  %47 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img50 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %47, i32 0, i32 26
  %48 = load %struct.image*, %struct.image** %img50, align 8
  %relief = getelementptr inbounds %struct.image, %struct.image* %48, i32 0, i32 17
  %49 = load i32, i32* %relief, align 4
  %cmp51 = icmp slt i32 %49, 0
  br i1 %cmp51, label %cond.true.53, label %cond.false.57

cond.true.53:                                     ; preds = %if.else
  %50 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img54 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %50, i32 0, i32 26
  %51 = load %struct.image*, %struct.image** %img54, align 8
  %relief55 = getelementptr inbounds %struct.image, %struct.image* %51, i32 0, i32 17
  %52 = load i32, i32* %relief55, align 4
  %sub56 = sub nsw i32 0, %52
  br label %cond.end.60

cond.false.57:                                    ; preds = %if.else
  %53 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img58 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %53, i32 0, i32 26
  %54 = load %struct.image*, %struct.image** %img58, align 8
  %relief59 = getelementptr inbounds %struct.image, %struct.image* %54, i32 0, i32 17
  %55 = load i32, i32* %relief59, align 4
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.57, %cond.true.53
  %cond61 = phi i32 [ %sub56, %cond.true.53 ], [ %55, %cond.false.57 ]
  store i32 %cond61, i32* %thick, align 4
  %56 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img62 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %56, i32 0, i32 26
  %57 = load %struct.image*, %struct.image** %img62, align 8
  %relief63 = getelementptr inbounds %struct.image, %struct.image* %57, i32 0, i32 17
  %58 = load i32, i32* %relief63, align 4
  %cmp64 = icmp sgt i32 %58, 0
  %frombool66 = zext i1 %cmp64 to i8
  store i8 %frombool66, i8* %raised_p, align 1
  br label %if.end.67

if.end.67:                                        ; preds = %cond.end.60, %cond.end.45
  %59 = load i32, i32* %x, align 4
  %60 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice68 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %60, i32 0, i32 28
  %61 = bitcast %struct.glyph_slice* %slice68 to i64*
  %bf.load69 = load i64, i64* %61, align 4
  %bf.lshr70 = lshr i64 %bf.load69, 32
  %bf.clear71 = and i64 %bf.lshr70, 65535
  %bf.cast72 = trunc i64 %bf.clear71 to i32
  %add73 = add nsw i32 %59, %bf.cast72
  %sub74 = sub nsw i32 %add73, 1
  store i32 %sub74, i32* %x1, align 4
  %62 = load i32, i32* %y, align 4
  %63 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice75 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %63, i32 0, i32 28
  %64 = bitcast %struct.glyph_slice* %slice75 to i64*
  %bf.load76 = load i64, i64* %64, align 4
  %bf.lshr77 = lshr i64 %bf.load76, 48
  %bf.cast78 = trunc i64 %bf.lshr77 to i32
  %add79 = add nsw i32 %62, %bf.cast78
  %sub80 = sub nsw i32 %add79, 1
  store i32 %sub80, i32* %y1, align 4
  store i32 0, i32* %extra_y, align 4
  store i32 0, i32* %extra_x, align 4
  %65 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %face81 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %65, i32 0, i32 17
  %66 = load %struct.face*, %struct.face** %face81, align 8
  %id = getelementptr inbounds %struct.face, %struct.face* %66, i32 0, i32 1
  %67 = load i32, i32* %id, align 4
  %cmp82 = icmp eq i32 %67, 3
  br i1 %cmp82, label %if.then.84, label %if.end.122

if.then.84:                                       ; preds = %if.end.67
  %68 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %and = and i64 %68, 7
  %conv85 = trunc i64 %and to i32
  %cmp86 = icmp eq i32 %conv85, 3
  br i1 %cmp86, label %land.lhs.true.88, label %if.else.111

land.lhs.true.88:                                 ; preds = %if.then.84
  %69 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub89 = sub nsw i64 %69, 3
  %70 = inttoptr i64 %sub89 to i8*
  %71 = bitcast i8* %70 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %71, i32 0, i32 0
  %72 = load i64, i64* %car, align 8
  %and90 = and i64 %72, 7
  %conv91 = trunc i64 %and90 to i32
  %and92 = and i32 %conv91, -5
  %cmp93 = icmp eq i32 %and92, 2
  br i1 %cmp93, label %land.lhs.true.95, label %if.else.111

land.lhs.true.95:                                 ; preds = %land.lhs.true.88
  %73 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub96 = sub nsw i64 %73, 3
  %74 = inttoptr i64 %sub96 to i8*
  %75 = bitcast i8* %74 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %75, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %76 = load i64, i64* %cdr, align 8
  %and97 = and i64 %76, 7
  %conv98 = trunc i64 %and97 to i32
  %and99 = and i32 %conv98, -5
  %cmp100 = icmp eq i32 %and99, 2
  br i1 %cmp100, label %if.then.102, label %if.else.111

if.then.102:                                      ; preds = %land.lhs.true.95
  %77 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub103 = sub nsw i64 %77, 3
  %78 = inttoptr i64 %sub103 to i8*
  %79 = bitcast i8* %78 to %struct.Lisp_Cons*
  %car104 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %79, i32 0, i32 0
  %80 = load i64, i64* %car104, align 8
  %shr = ashr i64 %80, 2
  %conv105 = trunc i64 %shr to i32
  store i32 %conv105, i32* %extra_x, align 4
  %81 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub106 = sub nsw i64 %81, 3
  %82 = inttoptr i64 %sub106 to i8*
  %83 = bitcast i8* %82 to %struct.Lisp_Cons*
  %u107 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %83, i32 0, i32 1
  %cdr108 = bitcast %union.anon.11* %u107 to i64*
  %84 = load i64, i64* %cdr108, align 8
  %shr109 = ashr i64 %84, 2
  %conv110 = trunc i64 %shr109 to i32
  store i32 %conv110, i32* %extra_y, align 4
  br label %if.end.121

if.else.111:                                      ; preds = %land.lhs.true.95, %land.lhs.true.88, %if.then.84
  %85 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %and112 = and i64 %85, 7
  %conv113 = trunc i64 %and112 to i32
  %and114 = and i32 %conv113, -5
  %cmp115 = icmp eq i32 %and114, 2
  br i1 %cmp115, label %if.then.117, label %if.end.120

if.then.117:                                      ; preds = %if.else.111
  %86 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %shr118 = ashr i64 %86, 2
  %conv119 = trunc i64 %shr118 to i32
  store i32 %conv119, i32* %extra_y, align 4
  store i32 %conv119, i32* %extra_x, align 4
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.117, %if.else.111
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.then.102
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %if.end.67
  store i8 0, i8* %right_p, align 1
  store i8 0, i8* %left_p, align 1
  store i8 0, i8* %bot_p, align 1
  store i8 0, i8* %top_p, align 1
  %87 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice123 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %87, i32 0, i32 28
  %88 = bitcast %struct.glyph_slice* %slice123 to i64*
  %bf.load124 = load i64, i64* %88, align 4
  %bf.clear125 = and i64 %bf.load124, 65535
  %bf.cast126 = trunc i64 %bf.clear125 to i32
  %cmp127 = icmp eq i32 %bf.cast126, 0
  br i1 %cmp127, label %if.then.129, label %if.end.132

if.then.129:                                      ; preds = %if.end.122
  %89 = load i32, i32* %thick, align 4
  %90 = load i32, i32* %extra_x, align 4
  %add130 = add nsw i32 %89, %90
  %91 = load i32, i32* %x, align 4
  %sub131 = sub nsw i32 %91, %add130
  store i32 %sub131, i32* %x, align 4
  store i8 1, i8* %left_p, align 1
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.129, %if.end.122
  %92 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice133 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %92, i32 0, i32 28
  %93 = bitcast %struct.glyph_slice* %slice133 to i64*
  %bf.load134 = load i64, i64* %93, align 4
  %bf.lshr135 = lshr i64 %bf.load134, 16
  %bf.clear136 = and i64 %bf.lshr135, 65535
  %bf.cast137 = trunc i64 %bf.clear136 to i32
  %cmp138 = icmp eq i32 %bf.cast137, 0
  br i1 %cmp138, label %if.then.140, label %if.end.143

if.then.140:                                      ; preds = %if.end.132
  %94 = load i32, i32* %thick, align 4
  %95 = load i32, i32* %extra_y, align 4
  %add141 = add nsw i32 %94, %95
  %96 = load i32, i32* %y, align 4
  %sub142 = sub nsw i32 %96, %add141
  store i32 %sub142, i32* %y, align 4
  store i8 1, i8* %top_p, align 1
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.140, %if.end.132
  %97 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice144 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %97, i32 0, i32 28
  %98 = bitcast %struct.glyph_slice* %slice144 to i64*
  %bf.load145 = load i64, i64* %98, align 4
  %bf.clear146 = and i64 %bf.load145, 65535
  %bf.cast147 = trunc i64 %bf.clear146 to i32
  %99 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice148 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %99, i32 0, i32 28
  %100 = bitcast %struct.glyph_slice* %slice148 to i64*
  %bf.load149 = load i64, i64* %100, align 4
  %bf.lshr150 = lshr i64 %bf.load149, 32
  %bf.clear151 = and i64 %bf.lshr150, 65535
  %bf.cast152 = trunc i64 %bf.clear151 to i32
  %add153 = add nsw i32 %bf.cast147, %bf.cast152
  %101 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img154 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %101, i32 0, i32 26
  %102 = load %struct.image*, %struct.image** %img154, align 8
  %width = getelementptr inbounds %struct.image, %struct.image* %102, i32 0, i32 11
  %103 = load i32, i32* %width, align 4
  %cmp155 = icmp eq i32 %add153, %103
  br i1 %cmp155, label %if.then.157, label %if.end.160

if.then.157:                                      ; preds = %if.end.143
  %104 = load i32, i32* %thick, align 4
  %105 = load i32, i32* %extra_x, align 4
  %add158 = add nsw i32 %104, %105
  %106 = load i32, i32* %x1, align 4
  %add159 = add nsw i32 %106, %add158
  store i32 %add159, i32* %x1, align 4
  store i8 1, i8* %right_p, align 1
  br label %if.end.160

if.end.160:                                       ; preds = %if.then.157, %if.end.143
  %107 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice161 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %107, i32 0, i32 28
  %108 = bitcast %struct.glyph_slice* %slice161 to i64*
  %bf.load162 = load i64, i64* %108, align 4
  %bf.lshr163 = lshr i64 %bf.load162, 16
  %bf.clear164 = and i64 %bf.lshr163, 65535
  %bf.cast165 = trunc i64 %bf.clear164 to i32
  %109 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %slice166 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %109, i32 0, i32 28
  %110 = bitcast %struct.glyph_slice* %slice166 to i64*
  %bf.load167 = load i64, i64* %110, align 4
  %bf.lshr168 = lshr i64 %bf.load167, 48
  %bf.cast169 = trunc i64 %bf.lshr168 to i32
  %add170 = add nsw i32 %bf.cast165, %bf.cast169
  %111 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %img171 = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %111, i32 0, i32 26
  %112 = load %struct.image*, %struct.image** %img171, align 8
  %height = getelementptr inbounds %struct.image, %struct.image* %112, i32 0, i32 12
  %113 = load i32, i32* %height, align 4
  %cmp172 = icmp eq i32 %add170, %113
  br i1 %cmp172, label %if.then.174, label %if.end.177

if.then.174:                                      ; preds = %if.end.160
  %114 = load i32, i32* %thick, align 4
  %115 = load i32, i32* %extra_y, align 4
  %add175 = add nsw i32 %114, %115
  %116 = load i32, i32* %y1, align 4
  %add176 = add nsw i32 %116, %add175
  store i32 %add176, i32* %y1, align 4
  store i8 1, i8* %bot_p, align 1
  br label %if.end.177

if.end.177:                                       ; preds = %if.then.174, %if.end.160
  %117 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @x_setup_relief_colors(%struct.glyph_string* %117)
  %118 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  call void @get_glyph_string_clip_rect(%struct.glyph_string* %118, %struct.XRectangle* %r)
  %119 = load %struct.glyph_string*, %struct.glyph_string** %s.addr, align 8
  %f = getelementptr inbounds %struct.glyph_string, %struct.glyph_string* %119, i32 0, i32 8
  %120 = load %struct.frame*, %struct.frame** %f, align 8
  %121 = load i32, i32* %x, align 4
  %122 = load i32, i32* %y, align 4
  %123 = load i32, i32* %x1, align 4
  %124 = load i32, i32* %y1, align 4
  %125 = load i32, i32* %thick, align 4
  %126 = load i8, i8* %raised_p, align 1
  %tobool = trunc i8 %126 to i1
  %127 = load i8, i8* %top_p, align 1
  %tobool178 = trunc i8 %127 to i1
  %128 = load i8, i8* %bot_p, align 1
  %tobool179 = trunc i8 %128 to i1
  %129 = load i8, i8* %left_p, align 1
  %tobool180 = trunc i8 %129 to i1
  %130 = load i8, i8* %right_p, align 1
  %tobool181 = trunc i8 %130 to i1
  call void @x_draw_relief_rect(%struct.frame* %120, i32 %121, i32 %122, i32 %123, i32 %124, i32 %125, i1 zeroext %tobool, i1 zeroext %tobool178, i1 zeroext %tobool179, i1 zeroext %tobool180, i1 zeroext %tobool181, %struct.XRectangle* %r)
  ret void
}

declare i32 @image_ascent(%struct.image*, %struct.face*, %struct.glyph_slice*) #1

; Function Attrs: nounwind uwtable
define internal void @x_draw_rectangle(%struct.frame* %f, %struct._XGC* %gc, i32 %x, i32 %y, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %gc.addr = alloca %struct._XGC*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._XGC* %gc, %struct._XGC** %gc.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %7 = load %struct._XGC*, %struct._XGC** %gc.addr, align 8
  %8 = load i32, i32* %x.addr, align 4
  %9 = load i32, i32* %y.addr, align 4
  %10 = load i32, i32* %width.addr, align 4
  %11 = load i32, i32* %height.addr, align 4
  %call = call i32 @XDrawRectangle(%struct._XDisplay* %3, i64 %6, %struct._XGC* %7, i32 %8, i32 %9, i32 %10, i32 %11)
  ret void
}

declare i32 @XDrawRectangle(%struct._XDisplay*, i64, %struct._XGC*, i32, i32, i32, i32) #1

declare zeroext i1 @x_intersect_rectangles(%struct.XRectangle*, %struct.XRectangle*, %struct.XRectangle*) #1

declare %struct.Lisp_Hash_Table* @XHASH_TABLE(i64) #1

declare i64 @AREF(i64, i64) #1

declare zeroext i1 @VECTORP(i64) #1

declare zeroext i1 @CHAR_TABLE_P(i64) #1

declare i32 @CHAR_TABLE_EXTRA_SLOTS(%struct.Lisp_Char_Table*) #1

declare %struct.Lisp_Char_Table* @XCHAR_TABLE(i64) #1

declare i64 @CHAR_TABLE_REF(i64, i32) #1

declare void @gtk_widget_queue_draw(%struct._GtkWidget*) #1

declare void @draw_fringe_bitmap(%struct.window*, %struct.glyph_row*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_draw_hollow_cursor(%struct.window* %w, %struct.glyph_row* %row) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %row.addr = alloca %struct.glyph_row*, align 8
  %f = alloca %struct.frame*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %x4 = alloca i32, align 4
  %y = alloca i32, align 4
  %wd = alloca i32, align 4
  %h = alloca i32, align 4
  %xgcv = alloca %struct.XGCValues, align 8
  %cursor_glyph = alloca %struct.glyph*, align 8
  %gc = alloca %struct._XGC*, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %6, %struct.x_display_info** %dpyinfo, align 8
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 44
  %9 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %9, i32 0, i32 2
  %10 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %10, %struct._XDisplay** %dpy, align 8
  %11 = load %struct.window*, %struct.window** %w.addr, align 8
  %call = call %struct.glyph* @get_phys_cursor_glyph(%struct.window* %11)
  store %struct.glyph* %call, %struct.glyph** %cursor_glyph, align 8
  %12 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %cmp = icmp eq %struct.glyph* %12, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %14 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %15 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  call void @get_phys_cursor_geometry(%struct.window* %13, %struct.glyph_row* %14, %struct.glyph* %15, i32* %x4, i32* %y, i32* %h)
  %16 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_width = getelementptr inbounds %struct.window, %struct.window* %16, i32 0, i32 54
  %17 = load i32, i32* %phys_cursor_width, align 4
  %sub5 = sub nsw i32 %17, 1
  store i32 %sub5, i32* %wd, align 4
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data6 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x7 = bitcast %union.output_data* %output_data6 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x7, align 8
  %cursor_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 28
  %20 = load i64, i64* %cursor_pixel, align 8
  %foreground = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %20, i64* %foreground, align 8
  %21 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %scratch_cursor_gc = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 24
  %22 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc, align 8
  %tobool = icmp ne %struct._XGC* %22, null
  br i1 %tobool, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end
  %23 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %24 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %scratch_cursor_gc9 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 24
  %25 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc9, align 8
  %call10 = call i32 @XChangeGC(%struct._XDisplay* %23, %struct._XGC* %25, i64 4, %struct.XGCValues* %xgcv)
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %26 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %28 = load %struct.x_output*, %struct.x_output** %x12, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %28, i32 0, i32 9
  %29 = load i64, i64* %window_desc, align 8
  %call13 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %26, i64 %29, i64 4, %struct.XGCValues* %xgcv)
  %30 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %scratch_cursor_gc14 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %30, i32 0, i32 24
  store %struct._XGC* %call13, %struct._XGC** %scratch_cursor_gc14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.8
  %31 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %scratch_cursor_gc16 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %31, i32 0, i32 24
  %32 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc16, align 8
  store %struct._XGC* %32, %struct._XGC** %gc, align 8
  %33 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %resolved_level = getelementptr inbounds %struct.glyph, %struct.glyph* %33, i32 0, i32 6
  %34 = bitcast i24* %resolved_level to i32*
  %bf.load = load i32, i32* %34, align 8
  %bf.lshr = lshr i32 %bf.load, 10
  %bf.clear = and i32 %bf.lshr, 127
  %and = and i32 %bf.clear, 1
  %cmp17 = icmp ne i32 %and, 0
  br i1 %cmp17, label %land.lhs.true, label %if.end.29

land.lhs.true:                                    ; preds = %if.end.15
  %35 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %35, i32 0, i32 2
  %36 = load i16, i16* %pixel_width, align 2
  %conv = sext i16 %36 to i32
  %37 = load i32, i32* %wd, align 4
  %cmp18 = icmp sgt i32 %conv, %37
  br i1 %cmp18, label %if.then.20, label %if.end.29

if.then.20:                                       ; preds = %land.lhs.true
  %38 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %pixel_width21 = getelementptr inbounds %struct.glyph, %struct.glyph* %38, i32 0, i32 2
  %39 = load i16, i16* %pixel_width21, align 2
  %conv22 = sext i16 %39 to i32
  %40 = load i32, i32* %wd, align 4
  %sub23 = sub nsw i32 %conv22, %40
  %41 = load i32, i32* %x4, align 4
  %add = add nsw i32 %41, %sub23
  store i32 %add, i32* %x4, align 4
  %42 = load i32, i32* %wd, align 4
  %cmp24 = icmp sgt i32 %42, 0
  br i1 %cmp24, label %if.then.26, label %if.end.28

if.then.26:                                       ; preds = %if.then.20
  %43 = load i32, i32* %wd, align 4
  %sub27 = sub nsw i32 %43, 1
  store i32 %sub27, i32* %wd, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.26, %if.then.20
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %land.lhs.true, %if.end.15
  %44 = load %struct.window*, %struct.window** %w.addr, align 8
  %45 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %46 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_clip_to_row(%struct.window* %44, %struct.glyph_row* %45, i32 1, %struct._XGC* %46)
  %47 = load %struct.frame*, %struct.frame** %f, align 8
  %48 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %49 = load i32, i32* %x4, align 4
  %50 = load i32, i32* %y, align 4
  %51 = load i32, i32* %wd, align 4
  %52 = load i32, i32* %h, align 4
  %sub30 = sub nsw i32 %52, 1
  call void @x_draw_rectangle(%struct.frame* %47, %struct._XGC* %48, i32 %49, i32 %50, i32 %51, i32 %sub30)
  %53 = load %struct.frame*, %struct.frame** %f, align 8
  %54 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %53, %struct._XGC* %54)
  br label %return

return:                                           ; preds = %if.end.29, %if.then
  ret void
}

declare void @draw_phys_cursor_glyph(%struct.window*, %struct.glyph_row*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_draw_bar_cursor(%struct.window* %w, %struct.glyph_row* %row, i32 %width, i32 %kind) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %row.addr = alloca %struct.glyph_row*, align 8
  %width.addr = alloca i32, align 4
  %kind.addr = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %cursor_glyph = alloca %struct.glyph*, align 8
  %r = alloca %struct.glyph_row*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %window = alloca i64, align 8
  %gc = alloca %struct._XGC*, align 8
  %mask = alloca i64, align 8
  %face = alloca %struct.face*, align 8
  %xgcv = alloca %struct.XGCValues, align 8
  %x60 = alloca i32, align 4
  %dummy_x = alloca i32, align 4
  %dummy_y = alloca i32, align 4
  %dummy_h = alloca i32, align 4
  %x94 = alloca i32, align 4
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store %struct.glyph_row* %row, %struct.glyph_row** %row.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %kind, i32* %kind.addr, align 4
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %4 = load %struct.window*, %struct.window** %w.addr, align 8
  %call = call %struct.glyph* @get_phys_cursor_glyph(%struct.window* %4)
  store %struct.glyph* %call, %struct.glyph** %cursor_glyph, align 8
  %5 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %cmp = icmp eq %struct.glyph* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.147

if.end:                                           ; preds = %entry
  %6 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %6, i32 0, i32 6
  %7 = bitcast i24* %type to i32*
  %bf.load = load i32, i32* %7, align 8
  %bf.clear = and i32 %bf.load, 7
  %cmp1 = icmp eq i32 %bf.clear, 5
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  br label %if.end.147

if.end.3:                                         ; preds = %if.end
  %8 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %type4 = getelementptr inbounds %struct.glyph, %struct.glyph* %8, i32 0, i32 6
  %9 = bitcast i24* %type4 to i32*
  %bf.load5 = load i32, i32* %9, align 8
  %bf.clear6 = and i32 %bf.load5, 7
  %cmp7 = icmp eq i32 %bf.clear6, 3
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end.3
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %current_matrix = getelementptr inbounds %struct.window, %struct.window* %10, i32 0, i32 24
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %11, i32 0, i32 1
  %12 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %13 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor = getelementptr inbounds %struct.window, %struct.window* %13, i32 0, i32 50
  %vpos = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor, i32 0, i32 3
  %14 = load i32, i32* %vpos, align 4
  %idx.ext = sext i32 %14 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %12, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %r, align 8
  %15 = load %struct.window*, %struct.window** %w.addr, align 8
  %16 = load %struct.glyph_row*, %struct.glyph_row** %r, align 8
  call void @draw_phys_cursor_glyph(%struct.window* %15, %struct.glyph_row* %16, i32 2)
  br label %if.end.147

if.else:                                          ; preds = %if.end.3
  %17 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %18 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %18, i32 0, i32 44
  %19 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %19, i32 0, i32 2
  %20 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  store %struct._XDisplay* %20, %struct._XDisplay** %dpy, align 8
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data9 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 62
  %x10 = bitcast %union.output_data* %output_data9 to %struct.x_output**
  %22 = load %struct.x_output*, %struct.x_output** %x10, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 9
  %23 = load i64, i64* %window_desc, align 8
  store i64 %23, i64* %window, align 8
  %24 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x12, align 8
  %display_info13 = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 44
  %26 = load %struct.x_display_info*, %struct.x_display_info** %display_info13, align 8
  %scratch_cursor_gc = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %26, i32 0, i32 24
  %27 = load %struct._XGC*, %struct._XGC** %scratch_cursor_gc, align 8
  store %struct._XGC* %27, %struct._XGC** %gc, align 8
  store i64 65548, i64* %mask, align 8
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %28 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %28, i32 0, i32 7
  %29 = bitcast i24* %face_id to i32*
  %bf.load14 = load i32, i32* %29, align 4
  %bf.clear15 = and i32 %bf.load14, 1048575
  %add = add i32 %bf.clear15, 0
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 20
  %31 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %31, i32 0, i32 4
  %32 = load i32, i32* %used, align 4
  %add16 = add i32 %32, 0
  %cmp17 = icmp ult i32 %add, %add16
  br i1 %cmp17, label %cond.true.28, label %cond.false.33

cond.false:                                       ; preds = %if.else
  %33 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %face_id18 = getelementptr inbounds %struct.glyph, %struct.glyph* %33, i32 0, i32 7
  %34 = bitcast i24* %face_id18 to i32*
  %bf.load19 = load i32, i32* %34, align 4
  %bf.clear20 = and i32 %bf.load19, 1048575
  %conv = zext i32 %bf.clear20 to i64
  %add21 = add i64 %conv, 0
  %35 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache22 = getelementptr inbounds %struct.frame, %struct.frame* %35, i32 0, i32 20
  %36 = load %struct.face_cache*, %struct.face_cache** %face_cache22, align 8
  %used23 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %36, i32 0, i32 4
  %37 = load i32, i32* %used23, align 4
  %conv24 = sext i32 %37 to i64
  %add25 = add i64 %conv24, 0
  %cmp26 = icmp ult i64 %add21, %add25
  br i1 %cmp26, label %cond.true.28, label %cond.false.33

cond.true.28:                                     ; preds = %cond.false, %cond.true
  %38 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %face_id29 = getelementptr inbounds %struct.glyph, %struct.glyph* %38, i32 0, i32 7
  %39 = bitcast i24* %face_id29 to i32*
  %bf.load30 = load i32, i32* %39, align 4
  %bf.clear31 = and i32 %bf.load30, 1048575
  %idxprom = zext i32 %bf.clear31 to i64
  %40 = load %struct.frame*, %struct.frame** %f, align 8
  %face_cache32 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 20
  %41 = load %struct.face_cache*, %struct.face_cache** %face_cache32, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %41, i32 0, i32 2
  %42 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %42, i64 %idxprom
  %43 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end

cond.false.33:                                    ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.33, %cond.true.28
  %cond = phi %struct.face* [ %43, %cond.true.28 ], [ null, %cond.false.33 ]
  store %struct.face* %cond, %struct.face** %face, align 8
  %44 = load %struct.face*, %struct.face** %face, align 8
  %background = getelementptr inbounds %struct.face, %struct.face* %44, i32 0, i32 5
  %45 = load i64, i64* %background, align 8
  %46 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data34 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 62
  %x35 = bitcast %union.output_data* %output_data34 to %struct.x_output**
  %47 = load %struct.x_output*, %struct.x_output** %x35, align 8
  %cursor_pixel = getelementptr inbounds %struct.x_output, %struct.x_output* %47, i32 0, i32 28
  %48 = load i64, i64* %cursor_pixel, align 8
  %cmp36 = icmp eq i64 %45, %48
  br i1 %cmp36, label %if.then.38, label %if.else.41

if.then.38:                                       ; preds = %cond.end
  %49 = load %struct.face*, %struct.face** %face, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %49, i32 0, i32 4
  %50 = load i64, i64* %foreground, align 8
  %foreground39 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %50, i64* %foreground39, align 8
  %background40 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  store i64 %50, i64* %background40, align 8
  br label %if.end.47

if.else.41:                                       ; preds = %cond.end
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data42 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 62
  %x43 = bitcast %union.output_data* %output_data42 to %struct.x_output**
  %52 = load %struct.x_output*, %struct.x_output** %x43, align 8
  %cursor_pixel44 = getelementptr inbounds %struct.x_output, %struct.x_output* %52, i32 0, i32 28
  %53 = load i64, i64* %cursor_pixel44, align 8
  %foreground45 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 2
  store i64 %53, i64* %foreground45, align 8
  %background46 = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 3
  store i64 %53, i64* %background46, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.41, %if.then.38
  %graphics_exposures = getelementptr inbounds %struct.XGCValues, %struct.XGCValues* %xgcv, i32 0, i32 17
  store i32 0, i32* %graphics_exposures, align 4
  %54 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %tobool = icmp ne %struct._XGC* %54, null
  br i1 %tobool, label %if.then.48, label %if.else.50

if.then.48:                                       ; preds = %if.end.47
  %55 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %56 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %57 = load i64, i64* %mask, align 8
  %call49 = call i32 @XChangeGC(%struct._XDisplay* %55, %struct._XGC* %56, i64 %57, %struct.XGCValues* %xgcv)
  br label %if.end.56

if.else.50:                                       ; preds = %if.end.47
  %58 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %59 = load i64, i64* %window, align 8
  %60 = load i64, i64* %mask, align 8
  %call51 = call %struct._XGC* @XCreateGC(%struct._XDisplay* %58, i64 %59, i64 %60, %struct.XGCValues* %xgcv)
  store %struct._XGC* %call51, %struct._XGC** %gc, align 8
  %61 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %62 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data52 = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 62
  %x53 = bitcast %union.output_data* %output_data52 to %struct.x_output**
  %63 = load %struct.x_output*, %struct.x_output** %x53, align 8
  %display_info54 = getelementptr inbounds %struct.x_output, %struct.x_output* %63, i32 0, i32 44
  %64 = load %struct.x_display_info*, %struct.x_display_info** %display_info54, align 8
  %scratch_cursor_gc55 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %64, i32 0, i32 24
  store %struct._XGC* %61, %struct._XGC** %scratch_cursor_gc55, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.50, %if.then.48
  %65 = load %struct.window*, %struct.window** %w.addr, align 8
  %66 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %67 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_clip_to_row(%struct.window* %65, %struct.glyph_row* %66, i32 1, %struct._XGC* %67)
  %68 = load i32, i32* %kind.addr, align 4
  %cmp57 = icmp eq i32 %68, 2
  br i1 %cmp57, label %if.then.59, label %if.else.93

if.then.59:                                       ; preds = %if.end.56
  %69 = load %struct.window*, %struct.window** %w.addr, align 8
  %call61 = call i32 @window_box_left(%struct.window* %69, i32 1)
  %70 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor62 = getelementptr inbounds %struct.window, %struct.window* %70, i32 0, i32 50
  %x63 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor62, i32 0, i32 0
  %71 = load i32, i32* %x63, align 4
  %add64 = add nsw i32 %call61, %71
  store i32 %add64, i32* %x60, align 4
  %72 = load i32, i32* %width.addr, align 4
  %cmp65 = icmp slt i32 %72, 0
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.then.59
  %73 = load %struct.frame*, %struct.frame** %f, align 8
  %cursor_width = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 66
  %74 = load i32, i32* %cursor_width, align 4
  store i32 %74, i32* %width.addr, align 4
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.67, %if.then.59
  %75 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %pixel_width = getelementptr inbounds %struct.glyph, %struct.glyph* %75, i32 0, i32 2
  %76 = load i16, i16* %pixel_width, align 2
  %conv69 = sext i16 %76 to i32
  %77 = load i32, i32* %width.addr, align 4
  %cmp70 = icmp slt i32 %conv69, %77
  br i1 %cmp70, label %cond.true.72, label %cond.false.75

cond.true.72:                                     ; preds = %if.end.68
  %78 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %pixel_width73 = getelementptr inbounds %struct.glyph, %struct.glyph* %78, i32 0, i32 2
  %79 = load i16, i16* %pixel_width73, align 2
  %conv74 = sext i16 %79 to i32
  br label %cond.end.76

cond.false.75:                                    ; preds = %if.end.68
  %80 = load i32, i32* %width.addr, align 4
  br label %cond.end.76

cond.end.76:                                      ; preds = %cond.false.75, %cond.true.72
  %cond77 = phi i32 [ %conv74, %cond.true.72 ], [ %80, %cond.false.75 ]
  store i32 %cond77, i32* %width.addr, align 4
  %81 = load i32, i32* %width.addr, align 4
  %82 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_width = getelementptr inbounds %struct.window, %struct.window* %82, i32 0, i32 54
  store i32 %81, i32* %phys_cursor_width, align 4
  %83 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %resolved_level = getelementptr inbounds %struct.glyph, %struct.glyph* %83, i32 0, i32 6
  %84 = bitcast i24* %resolved_level to i32*
  %bf.load78 = load i32, i32* %84, align 8
  %bf.lshr = lshr i32 %bf.load78, 10
  %bf.clear79 = and i32 %bf.lshr, 127
  %and = and i32 %bf.clear79, 1
  %cmp80 = icmp ne i32 %and, 0
  br i1 %cmp80, label %if.then.82, label %if.end.87

if.then.82:                                       ; preds = %cond.end.76
  %85 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %pixel_width83 = getelementptr inbounds %struct.glyph, %struct.glyph* %85, i32 0, i32 2
  %86 = load i16, i16* %pixel_width83, align 2
  %conv84 = sext i16 %86 to i32
  %87 = load i32, i32* %width.addr, align 4
  %sub85 = sub nsw i32 %conv84, %87
  %88 = load i32, i32* %x60, align 4
  %add86 = add nsw i32 %88, %sub85
  store i32 %add86, i32* %x60, align 4
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.82, %cond.end.76
  %89 = load %struct.frame*, %struct.frame** %f, align 8
  %90 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %91 = load i32, i32* %x60, align 4
  %92 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor88 = getelementptr inbounds %struct.window, %struct.window* %92, i32 0, i32 50
  %y = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor88, i32 0, i32 1
  %93 = load i32, i32* %y, align 4
  %94 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame89 = getelementptr inbounds %struct.window, %struct.window* %94, i32 0, i32 1
  %95 = load i64, i64* %frame89, align 8
  %sub90 = sub nsw i64 %95, 5
  %96 = inttoptr i64 %sub90 to i8*
  %97 = bitcast i8* %96 to %struct.frame*
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %97, i32 0, i32 51
  %98 = load i32, i32* %internal_border_width, align 4
  %99 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top = getelementptr inbounds %struct.window, %struct.window* %99, i32 0, i32 31
  %100 = load i32, i32* %pixel_top, align 4
  %add91 = add nsw i32 %98, %100
  %add92 = add nsw i32 %93, %add91
  %101 = load i32, i32* %width.addr, align 4
  %102 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %102, i32 0, i32 7
  %103 = load i32, i32* %height, align 4
  call void @x_fill_rectangle(%struct.frame* %89, %struct._XGC* %90, i32 %91, i32 %add92, i32 %101, i32 %103)
  br label %if.end.146

if.else.93:                                       ; preds = %if.end.56
  %104 = load %struct.window*, %struct.window** %w.addr, align 8
  %call95 = call i32 @window_box_left(%struct.window* %104, i32 1)
  %105 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor96 = getelementptr inbounds %struct.window, %struct.window* %105, i32 0, i32 50
  %x97 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor96, i32 0, i32 0
  %106 = load i32, i32* %x97, align 4
  %add98 = add nsw i32 %call95, %106
  store i32 %add98, i32* %x94, align 4
  %107 = load i32, i32* %width.addr, align 4
  %cmp99 = icmp slt i32 %107, 0
  br i1 %cmp99, label %if.then.101, label %if.end.103

if.then.101:                                      ; preds = %if.else.93
  %108 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height102 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %108, i32 0, i32 7
  %109 = load i32, i32* %height102, align 4
  store i32 %109, i32* %width.addr, align 4
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.101, %if.else.93
  %110 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height104 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %110, i32 0, i32 7
  %111 = load i32, i32* %height104, align 4
  %112 = load i32, i32* %width.addr, align 4
  %cmp105 = icmp slt i32 %111, %112
  br i1 %cmp105, label %cond.true.107, label %cond.false.109

cond.true.107:                                    ; preds = %if.end.103
  %113 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height108 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %113, i32 0, i32 7
  %114 = load i32, i32* %height108, align 4
  br label %cond.end.110

cond.false.109:                                   ; preds = %if.end.103
  %115 = load i32, i32* %width.addr, align 4
  br label %cond.end.110

cond.end.110:                                     ; preds = %cond.false.109, %cond.true.107
  %cond111 = phi i32 [ %114, %cond.true.107 ], [ %115, %cond.false.109 ]
  store i32 %cond111, i32* %width.addr, align 4
  %116 = load %struct.window*, %struct.window** %w.addr, align 8
  %117 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %118 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  call void @get_phys_cursor_geometry(%struct.window* %116, %struct.glyph_row* %117, %struct.glyph* %118, i32* %dummy_x, i32* %dummy_y, i32* %dummy_h)
  %119 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %resolved_level112 = getelementptr inbounds %struct.glyph, %struct.glyph* %119, i32 0, i32 6
  %120 = bitcast i24* %resolved_level112 to i32*
  %bf.load113 = load i32, i32* %120, align 8
  %bf.lshr114 = lshr i32 %bf.load113, 10
  %bf.clear115 = and i32 %bf.lshr114, 127
  %and116 = and i32 %bf.clear115, 1
  %cmp117 = icmp ne i32 %and116, 0
  br i1 %cmp117, label %land.lhs.true, label %if.end.132

land.lhs.true:                                    ; preds = %cond.end.110
  %121 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %pixel_width119 = getelementptr inbounds %struct.glyph, %struct.glyph* %121, i32 0, i32 2
  %122 = load i16, i16* %pixel_width119, align 2
  %conv120 = sext i16 %122 to i32
  %123 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_width121 = getelementptr inbounds %struct.window, %struct.window* %123, i32 0, i32 54
  %124 = load i32, i32* %phys_cursor_width121, align 4
  %sub122 = sub nsw i32 %124, 1
  %cmp123 = icmp sgt i32 %conv120, %sub122
  br i1 %cmp123, label %if.then.125, label %if.end.132

if.then.125:                                      ; preds = %land.lhs.true
  %125 = load %struct.glyph*, %struct.glyph** %cursor_glyph, align 8
  %pixel_width126 = getelementptr inbounds %struct.glyph, %struct.glyph* %125, i32 0, i32 2
  %126 = load i16, i16* %pixel_width126, align 2
  %conv127 = sext i16 %126 to i32
  %127 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_width128 = getelementptr inbounds %struct.window, %struct.window* %127, i32 0, i32 54
  %128 = load i32, i32* %phys_cursor_width128, align 4
  %sub129 = sub nsw i32 %conv127, %128
  %add130 = add nsw i32 %sub129, 1
  %129 = load i32, i32* %x94, align 4
  %add131 = add nsw i32 %129, %add130
  store i32 %add131, i32* %x94, align 4
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.125, %land.lhs.true, %cond.end.110
  %130 = load %struct.frame*, %struct.frame** %f, align 8
  %131 = load %struct._XGC*, %struct._XGC** %gc, align 8
  %132 = load i32, i32* %x94, align 4
  %133 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor133 = getelementptr inbounds %struct.window, %struct.window* %133, i32 0, i32 50
  %y134 = getelementptr inbounds %struct.cursor_pos, %struct.cursor_pos* %phys_cursor133, i32 0, i32 1
  %134 = load i32, i32* %y134, align 4
  %135 = load %struct.glyph_row*, %struct.glyph_row** %row.addr, align 8
  %height135 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %135, i32 0, i32 7
  %136 = load i32, i32* %height135, align 4
  %add136 = add nsw i32 %134, %136
  %137 = load i32, i32* %width.addr, align 4
  %sub137 = sub nsw i32 %add136, %137
  %138 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame138 = getelementptr inbounds %struct.window, %struct.window* %138, i32 0, i32 1
  %139 = load i64, i64* %frame138, align 8
  %sub139 = sub nsw i64 %139, 5
  %140 = inttoptr i64 %sub139 to i8*
  %141 = bitcast i8* %140 to %struct.frame*
  %internal_border_width140 = getelementptr inbounds %struct.frame, %struct.frame* %141, i32 0, i32 51
  %142 = load i32, i32* %internal_border_width140, align 4
  %143 = load %struct.window*, %struct.window** %w.addr, align 8
  %pixel_top141 = getelementptr inbounds %struct.window, %struct.window* %143, i32 0, i32 31
  %144 = load i32, i32* %pixel_top141, align 4
  %add142 = add nsw i32 %142, %144
  %add143 = add nsw i32 %sub137, %add142
  %145 = load %struct.window*, %struct.window** %w.addr, align 8
  %phys_cursor_width144 = getelementptr inbounds %struct.window, %struct.window* %145, i32 0, i32 54
  %146 = load i32, i32* %phys_cursor_width144, align 4
  %sub145 = sub nsw i32 %146, 1
  %147 = load i32, i32* %width.addr, align 4
  call void @x_fill_rectangle(%struct.frame* %130, %struct._XGC* %131, i32 %132, i32 %add143, i32 %sub145, i32 %147)
  br label %if.end.146

if.end.146:                                       ; preds = %if.end.132, %if.end.87
  %148 = load %struct.frame*, %struct.frame** %f, align 8
  %149 = load %struct._XGC*, %struct._XGC** %gc, align 8
  call void @x_reset_clip_rectangles(%struct.frame* %148, %struct._XGC* %149)
  br label %if.end.147

if.end.147:                                       ; preds = %if.then, %if.then.2, %if.end.146, %if.then.8
  ret void
}

declare %struct.glyph* @get_phys_cursor_glyph(%struct.window*) #1

declare void @get_phys_cursor_geometry(%struct.window*, %struct.glyph_row*, %struct.glyph*, i32*, i32*, i32*) #1

declare i32 @window_box_left(%struct.window*, i32) #1

declare i64 @XCreateWindow(%struct._XDisplay*, i64, i32, i32, i32, i32, i32, i32, i32, %struct.Visual*, i64, %struct.XSetWindowAttributes*) #1

declare i32 @XUnmapWindow(%struct._XDisplay*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_clear_window(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 9
  %6 = load i64, i64* %window_desc, align 8
  %call = call i32 @XClearWindow(%struct._XDisplay* %3, i64 %6)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_scroll_bar_clear(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  ret void
}

declare i32 @XClearWindow(%struct._XDisplay*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @XTflash(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %window = alloca %struct._GdkDrawable*, align 8
  %vals = alloca %struct._GdkGCValues, align 8
  %gc = alloca %struct._GdkGC*, align 8
  %height = alloca i32, align 4
  %flash_height = alloca i32, align 4
  %flash_left = alloca i32, align 4
  %flash_right = alloca i32, align 4
  %width = alloca i32, align 4
  %delay = alloca %struct.timespec, align 8
  %wakeup = alloca %struct.timespec, align 8
  %agg.tmp = alloca %struct.timespec, align 8
  %current = alloca %struct.timespec, align 8
  %timeout = alloca %struct.timespec, align 8
  %coerce = alloca %struct.timespec, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 13
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %2)
  store %struct._GdkDrawable* %call, %struct._GdkDrawable** %window, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %foreground_pixel = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 78
  %4 = load i64, i64* %foreground_pixel, align 8
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 77
  %6 = load i64, i64* %background_pixel, align 8
  %xor = xor i64 %4, %6
  %conv = trunc i64 %xor to i32
  %foreground = getelementptr inbounds %struct._GdkGCValues, %struct._GdkGCValues* %vals, i32 0, i32 0
  %pixel = getelementptr inbounds %struct._GdkColor, %struct._GdkColor* %foreground, i32 0, i32 0
  store i32 %conv, i32* %pixel, align 4
  %function = getelementptr inbounds %struct._GdkGCValues, %struct._GdkGCValues* %vals, i32 0, i32 3
  store i32 2, i32* %function, align 4
  %7 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %call1 = call %struct._GdkGC* @gdk_gc_new_with_values(%struct._GdkDrawable* %7, %struct._GdkGCValues* %vals, i32 9)
  store %struct._GdkGC* %call1, %struct._GdkGC** %gc, align 8
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 47
  %9 = load i32, i32* %pixel_height, align 4
  store i32 %9, i32* %height, align 4
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 60
  %11 = load i32, i32* %line_height, align 4
  store i32 %11, i32* %flash_height, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 51
  %13 = load i32, i32* %internal_border_width, align 4
  store i32 %13, i32* %flash_left, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 46
  %15 = load i32, i32* %pixel_width, align 4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width2 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 51
  %17 = load i32, i32* %internal_border_width2, align 4
  %sub = sub nsw i32 %15, %17
  store i32 %sub, i32* %flash_right, align 4
  %18 = load i32, i32* %flash_right, align 4
  %19 = load i32, i32* %flash_left, align 4
  %sub3 = sub nsw i32 %18, %19
  store i32 %sub3, i32* %width, align 4
  %20 = load i32, i32* %height, align 4
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height4 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 60
  %22 = load i32, i32* %line_height4, align 4
  %mul = mul nsw i32 3, %22
  %cmp = icmp sgt i32 %20, %mul
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %23 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %24 = load %struct._GdkGC*, %struct._GdkGC** %gc, align 8
  %25 = load i32, i32* %flash_left, align 4
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width6 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 51
  %27 = load i32, i32* %internal_border_width6, align 4
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 58
  %29 = load i32, i32* %menu_bar_height, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 28
  %31 = load i32, i32* %tool_bar_height, align 4
  %add = add nsw i32 %29, %31
  %add7 = add nsw i32 %27, %add
  %32 = load i32, i32* %width, align 4
  %33 = load i32, i32* %flash_height, align 4
  call void @gdk_draw_rectangle(%struct._GdkDrawable* %23, %struct._GdkGC* %24, i32 1, i32 %25, i32 %add7, i32 %32, i32 %33)
  %34 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %35 = load %struct._GdkGC*, %struct._GdkGC** %gc, align 8
  %36 = load i32, i32* %flash_left, align 4
  %37 = load i32, i32* %height, align 4
  %38 = load i32, i32* %flash_height, align 4
  %sub8 = sub nsw i32 %37, %38
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width9 = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 51
  %40 = load i32, i32* %internal_border_width9, align 4
  %sub10 = sub nsw i32 %sub8, %40
  %41 = load i32, i32* %width, align 4
  %42 = load i32, i32* %flash_height, align 4
  call void @gdk_draw_rectangle(%struct._GdkDrawable* %34, %struct._GdkGC* %35, i32 1, i32 %36, i32 %sub10, i32 %41, i32 %42)
  br label %if.end

if.else:                                          ; preds = %entry
  %43 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %44 = load %struct._GdkGC*, %struct._GdkGC** %gc, align 8
  %45 = load i32, i32* %flash_left, align 4
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width11 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 51
  %47 = load i32, i32* %internal_border_width11, align 4
  %48 = load i32, i32* %width, align 4
  %49 = load i32, i32* %height, align 4
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width12 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 51
  %51 = load i32, i32* %internal_border_width12, align 4
  %mul13 = mul nsw i32 2, %51
  %sub14 = sub nsw i32 %49, %mul13
  call void @gdk_draw_rectangle(%struct._GdkDrawable* %43, %struct._GdkGC* %44, i32 1, i32 %45, i32 %47, i32 %48, i32 %sub14)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_flush(%struct.frame* %52)
  %call15 = call { i64, i64 } @make_timespec(i64 0, i64 150000000)
  %53 = bitcast %struct.timespec* %delay to { i64, i64 }*
  %54 = getelementptr { i64, i64 }, { i64, i64 }* %53, i32 0, i32 0
  %55 = extractvalue { i64, i64 } %call15, 0
  store i64 %55, i64* %54, align 8
  %56 = getelementptr { i64, i64 }, { i64, i64 }* %53, i32 0, i32 1
  %57 = extractvalue { i64, i64 } %call15, 1
  store i64 %57, i64* %56, align 8
  %call16 = call { i64, i64 } @current_timespec()
  %58 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %59 = getelementptr { i64, i64 }, { i64, i64 }* %58, i32 0, i32 0
  %60 = extractvalue { i64, i64 } %call16, 0
  store i64 %60, i64* %59, align 8
  %61 = getelementptr { i64, i64 }, { i64, i64 }* %58, i32 0, i32 1
  %62 = extractvalue { i64, i64 } %call16, 1
  store i64 %62, i64* %61, align 8
  %63 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*
  %64 = getelementptr { i64, i64 }, { i64, i64 }* %63, i32 0, i32 0
  %65 = load i64, i64* %64, align 1
  %66 = getelementptr { i64, i64 }, { i64, i64 }* %63, i32 0, i32 1
  %67 = load i64, i64* %66, align 1
  %68 = bitcast %struct.timespec* %delay to { i64, i64 }*
  %69 = getelementptr { i64, i64 }, { i64, i64 }* %68, i32 0, i32 0
  %70 = load i64, i64* %69, align 1
  %71 = getelementptr { i64, i64 }, { i64, i64 }* %68, i32 0, i32 1
  %72 = load i64, i64* %71, align 1
  %call17 = call { i64, i64 } @timespec_add(i64 %65, i64 %67, i64 %70, i64 %72) #11
  %73 = bitcast %struct.timespec* %wakeup to { i64, i64 }*
  %74 = getelementptr { i64, i64 }, { i64, i64 }* %73, i32 0, i32 0
  %75 = extractvalue { i64, i64 } %call17, 0
  store i64 %75, i64* %74, align 8
  %76 = getelementptr { i64, i64 }, { i64, i64 }* %73, i32 0, i32 1
  %77 = extractvalue { i64, i64 } %call17, 1
  store i64 %77, i64* %76, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.24, %if.end
  %call18 = call zeroext i1 @detect_input_pending()
  %lnot = xor i1 %call18, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call19 = call { i64, i64 } @current_timespec()
  %78 = bitcast %struct.timespec* %current to { i64, i64 }*
  %79 = getelementptr { i64, i64 }, { i64, i64 }* %78, i32 0, i32 0
  %80 = extractvalue { i64, i64 } %call19, 0
  store i64 %80, i64* %79, align 8
  %81 = getelementptr { i64, i64 }, { i64, i64 }* %78, i32 0, i32 1
  %82 = extractvalue { i64, i64 } %call19, 1
  store i64 %82, i64* %81, align 8
  %83 = bitcast %struct.timespec* %wakeup to { i64, i64 }*
  %84 = getelementptr { i64, i64 }, { i64, i64 }* %83, i32 0, i32 0
  %85 = load i64, i64* %84, align 1
  %86 = getelementptr { i64, i64 }, { i64, i64 }* %83, i32 0, i32 1
  %87 = load i64, i64* %86, align 1
  %88 = bitcast %struct.timespec* %current to { i64, i64 }*
  %89 = getelementptr { i64, i64 }, { i64, i64 }* %88, i32 0, i32 0
  %90 = load i64, i64* %89, align 1
  %91 = getelementptr { i64, i64 }, { i64, i64 }* %88, i32 0, i32 1
  %92 = load i64, i64* %91, align 1
  %call20 = call i32 @timespec_cmp(i64 %85, i64 %87, i64 %90, i64 %92) #9
  %cmp21 = icmp sle i32 %call20, 0
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %while.body
  br label %while.end

if.end.24:                                        ; preds = %while.body
  %call25 = call { i64, i64 } @make_timespec(i64 0, i64 10000000)
  %93 = bitcast %struct.timespec* %coerce to { i64, i64 }*
  %94 = getelementptr { i64, i64 }, { i64, i64 }* %93, i32 0, i32 0
  %95 = extractvalue { i64, i64 } %call25, 0
  store i64 %95, i64* %94, align 8
  %96 = getelementptr { i64, i64 }, { i64, i64 }* %93, i32 0, i32 1
  %97 = extractvalue { i64, i64 } %call25, 1
  store i64 %97, i64* %96, align 8
  %98 = bitcast %struct.timespec* %timeout to i8*
  %99 = bitcast %struct.timespec* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %98, i8* %99, i64 16, i32 8, i1 false)
  %call26 = call i32 @pselect(i32 0, %struct.fd_set* null, %struct.fd_set* null, %struct.fd_set* null, %struct.timespec* %timeout, %struct.__sigset_t* null)
  br label %while.cond

while.end:                                        ; preds = %if.then.23, %while.cond
  %100 = load i32, i32* %height, align 4
  %101 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height27 = getelementptr inbounds %struct.frame, %struct.frame* %101, i32 0, i32 60
  %102 = load i32, i32* %line_height27, align 4
  %mul28 = mul nsw i32 3, %102
  %cmp29 = icmp sgt i32 %100, %mul28
  br i1 %cmp29, label %if.then.31, label %if.else.40

if.then.31:                                       ; preds = %while.end
  %103 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %104 = load %struct._GdkGC*, %struct._GdkGC** %gc, align 8
  %105 = load i32, i32* %flash_left, align 4
  %106 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width32 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 51
  %107 = load i32, i32* %internal_border_width32, align 4
  %108 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height33 = getelementptr inbounds %struct.frame, %struct.frame* %108, i32 0, i32 58
  %109 = load i32, i32* %menu_bar_height33, align 4
  %110 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height34 = getelementptr inbounds %struct.frame, %struct.frame* %110, i32 0, i32 28
  %111 = load i32, i32* %tool_bar_height34, align 4
  %add35 = add nsw i32 %109, %111
  %add36 = add nsw i32 %107, %add35
  %112 = load i32, i32* %width, align 4
  %113 = load i32, i32* %flash_height, align 4
  call void @gdk_draw_rectangle(%struct._GdkDrawable* %103, %struct._GdkGC* %104, i32 1, i32 %105, i32 %add36, i32 %112, i32 %113)
  %114 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %115 = load %struct._GdkGC*, %struct._GdkGC** %gc, align 8
  %116 = load i32, i32* %flash_left, align 4
  %117 = load i32, i32* %height, align 4
  %118 = load i32, i32* %flash_height, align 4
  %sub37 = sub nsw i32 %117, %118
  %119 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width38 = getelementptr inbounds %struct.frame, %struct.frame* %119, i32 0, i32 51
  %120 = load i32, i32* %internal_border_width38, align 4
  %sub39 = sub nsw i32 %sub37, %120
  %121 = load i32, i32* %width, align 4
  %122 = load i32, i32* %flash_height, align 4
  call void @gdk_draw_rectangle(%struct._GdkDrawable* %114, %struct._GdkGC* %115, i32 1, i32 %116, i32 %sub39, i32 %121, i32 %122)
  br label %if.end.45

if.else.40:                                       ; preds = %while.end
  %123 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %124 = load %struct._GdkGC*, %struct._GdkGC** %gc, align 8
  %125 = load i32, i32* %flash_left, align 4
  %126 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width41 = getelementptr inbounds %struct.frame, %struct.frame* %126, i32 0, i32 51
  %127 = load i32, i32* %internal_border_width41, align 4
  %128 = load i32, i32* %width, align 4
  %129 = load i32, i32* %height, align 4
  %130 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width42 = getelementptr inbounds %struct.frame, %struct.frame* %130, i32 0, i32 51
  %131 = load i32, i32* %internal_border_width42, align 4
  %mul43 = mul nsw i32 2, %131
  %sub44 = sub nsw i32 %129, %mul43
  call void @gdk_draw_rectangle(%struct._GdkDrawable* %123, %struct._GdkGC* %124, i32 1, i32 %125, i32 %127, i32 %128, i32 %sub44)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.40, %if.then.31
  %132 = load %struct._GdkGC*, %struct._GdkGC** %gc, align 8
  %133 = bitcast %struct._GdkGC* %132 to %struct._GTypeInstance*
  %call46 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %133, i64 80)
  %134 = bitcast %struct._GTypeInstance* %call46 to %struct._GObject*
  %135 = bitcast %struct._GObject* %134 to i8*
  call void @g_object_unref(i8* %135)
  %136 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_flush(%struct.frame* %136)
  call void @unblock_input()
  ret void
}

declare i32 @XkbBell(%struct._XDisplay*, i64, i32, i64) #1

declare %struct._GdkGC* @gdk_gc_new_with_values(%struct._GdkDrawable*, %struct._GdkGCValues*, i32) #1

declare void @gdk_draw_rectangle(%struct._GdkDrawable*, %struct._GdkGC*, i32, i32, i32, i32, i32) #1

declare zeroext i1 @detect_input_pending() #1

declare void @g_object_unref(i8*) #1

declare i32 @gtk_events_pending() #1

declare i32 @gtk_main_iteration() #1

declare i32 @XNoOp(%struct._XDisplay*) #1

; Function Attrs: nounwind uwtable
define internal void @x_raise_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %visible to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 44
  %4 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 2
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %7 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 12
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool3 = icmp ne %struct._GtkWidget* %8, null
  br i1 %tobool3, label %cond.true, label %cond.false.18

cond.true:                                        ; preds = %if.then
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %widget6 = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 12
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %widget6, align 8
  %tobool7 = icmp ne %struct._GtkWidget* %11, null
  br i1 %tobool7, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %cond.true
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data8 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data8 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %widget10 = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 12
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %widget10, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %14)
  %tobool11 = icmp ne %struct._GdkDrawable* %call, null
  br i1 %tobool11, label %cond.true.12, label %cond.false

cond.true.12:                                     ; preds = %land.lhs.true
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x14, align 8
  %widget15 = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 12
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %widget15, align 8
  %call16 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %17)
  %call17 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call16)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.12
  %cond = phi i64 [ %call17, %cond.true.12 ], [ 0, %cond.false ]
  br label %cond.end.21

cond.false.18:                                    ; preds = %if.then
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 9
  %20 = load i64, i64* %window_desc, align 8
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.18, %cond.end
  %cond22 = phi i64 [ %cond, %cond.end ], [ %20, %cond.false.18 ]
  %call23 = call i32 @XRaiseWindow(%struct._XDisplay* %5, i64 %cond22)
  br label %if.end

if.end:                                           ; preds = %cond.end.21, %entry
  call void @unblock_input()
  ret void
}

declare i32 @XRaiseWindow(%struct._XDisplay*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_horizontal_scroll_bar_report_motion(%struct.frame** %fp, i64* %bar_window, i32* %part, i64* %x, i64* %y, i64* %timestamp) #0 {
entry:
  %fp.addr = alloca %struct.frame**, align 8
  %bar_window.addr = alloca i64*, align 8
  %part.addr = alloca i32*, align 8
  %x.addr = alloca i64*, align 8
  %y.addr = alloca i64*, align 8
  %timestamp.addr = alloca i64*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  %w = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %win_x = alloca i32, align 4
  %win_y = alloca i32, align 4
  %dummy_window = alloca i64, align 8
  %dummy_coord = alloca i32, align 4
  %dummy_mask = alloca i32, align 4
  %left_range = alloca i32, align 4
  store %struct.frame** %fp, %struct.frame*** %fp.addr, align 8
  store i64* %bar_window, i64** %bar_window.addr, align 8
  store i32* %part, i32** %part.addr, align 8
  store i64* %x, i64** %x.addr, align 8
  store i64* %y, i64** %y.addr, align 8
  store i64* %timestamp, i64** %timestamp.addr, align 8
  %0 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %0, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %3, %struct.x_display_info** %dpyinfo, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 78
  %5 = load %struct.scroll_bar*, %struct.scroll_bar** %last_mouse_scroll_bar, align 8
  store %struct.scroll_bar* %5, %struct.scroll_bar** %bar, align 8
  %6 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %6, i32 0, i32 4
  %7 = load i64, i64* %x_window, align 8
  store i64 %7, i64* %w, align 8
  %8 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %8, i32 0, i32 1
  %9 = load i64, i64* %window, align 8
  %call = call %struct.window* @XWINDOW(i64 %9)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 1
  %10 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  store %struct.frame* %12, %struct.frame** %f, align 8
  call void @block_input()
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info4 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 44
  %15 = load %struct.x_display_info*, %struct.x_display_info** %display_info4, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 2
  %16 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %17 = load i64, i64* %w, align 8
  %call5 = call i32 @XQueryPointer(%struct._XDisplay* %16, i64 %17, i64* %dummy_window, i64* %dummy_window, i32* %dummy_coord, i32* %dummy_coord, i32* %win_x, i32* %win_y, i32* %dummy_mask)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then, label %if.end.37

if.then:                                          ; preds = %entry
  %18 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %width = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %18, i32 0, i32 7
  %19 = load i32, i32* %width, align 4
  %sub6 = sub nsw i32 %19, 2
  %sub7 = sub nsw i32 %sub6, 2
  %sub8 = sub nsw i32 %sub7, 5
  store i32 %sub8, i32* %left_range, align 4
  %20 = load i32, i32* %win_x, align 4
  %sub9 = sub nsw i32 %20, 2
  store i32 %sub9, i32* %win_x, align 4
  %21 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %21, i32 0, i32 11
  %22 = load i32, i32* %dragging, align 4
  %cmp = icmp ne i32 %22, -1
  br i1 %cmp, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %23 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging11 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %23, i32 0, i32 11
  %24 = load i32, i32* %dragging11, align 4
  %25 = load i32, i32* %win_x, align 4
  %sub12 = sub nsw i32 %25, %24
  store i32 %sub12, i32* %win_x, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  %26 = load i32, i32* %win_x, align 4
  %cmp13 = icmp slt i32 %26, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end
  store i32 0, i32* %win_x, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.end
  %27 = load i32, i32* %win_x, align 4
  %28 = load i32, i32* %left_range, align 4
  %cmp16 = icmp sgt i32 %27, %28
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.15
  %29 = load i32, i32* %left_range, align 4
  store i32 %29, i32* %win_x, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end.15
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %31 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  store %struct.frame* %30, %struct.frame** %31, align 8
  %32 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %window19 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %32, i32 0, i32 1
  %33 = load i64, i64* %window19, align 8
  %34 = load i64*, i64** %bar_window.addr, align 8
  store i64 %33, i64* %34, align 8
  %35 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging20 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %35, i32 0, i32 11
  %36 = load i32, i32* %dragging20, align 4
  %cmp21 = icmp ne i32 %36, -1
  br i1 %cmp21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %if.end.18
  %37 = load i32*, i32** %part.addr, align 8
  store i32 11, i32* %37, align 4
  br label %if.end.31

if.else:                                          ; preds = %if.end.18
  %38 = load i32, i32* %win_x, align 4
  %39 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %start = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %39, i32 0, i32 9
  %40 = load i32, i32* %start, align 4
  %cmp23 = icmp slt i32 %38, %40
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %if.else
  %41 = load i32*, i32** %part.addr, align 8
  store i32 10, i32* %41, align 4
  br label %if.end.30

if.else.25:                                       ; preds = %if.else
  %42 = load i32, i32* %win_x, align 4
  %43 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %end = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %43, i32 0, i32 10
  %44 = load i32, i32* %end, align 4
  %add = add nsw i32 %44, 5
  %cmp26 = icmp slt i32 %42, %add
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %if.else.25
  %45 = load i32*, i32** %part.addr, align 8
  store i32 2, i32* %45, align 4
  br label %if.end.29

if.else.28:                                       ; preds = %if.else.25
  %46 = load i32*, i32** %part.addr, align 8
  store i32 12, i32* %46, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.28, %if.then.27
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.24
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.22
  %47 = load i32, i32* %win_x, align 4
  %conv = sext i32 %47 to i64
  %shl = shl i64 %conv, 2
  %add32 = add i64 %shl, 2
  %48 = load i64*, i64** %y.addr, align 8
  store i64 %add32, i64* %48, align 8
  %49 = load i32, i32* %left_range, align 4
  %conv33 = sext i32 %49 to i64
  %shl34 = shl i64 %conv33, 2
  %add35 = add i64 %shl34, 2
  %50 = load i64*, i64** %x.addr, align 8
  store i64 %add35, i64* %50, align 8
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 26
  %52 = bitcast i48* %mouse_moved to i64*
  %bf.load = load i64, i64* %52, align 8
  %bf.clear = and i64 %bf.load, -1048577
  store i64 %bf.clear, i64* %52, align 8
  %53 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar36 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %53, i32 0, i32 78
  store %struct.scroll_bar* null, %struct.scroll_bar** %last_mouse_scroll_bar36, align 8
  %54 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_movement_time = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %54, i32 0, i32 83
  %55 = load i64, i64* %last_mouse_movement_time, align 8
  %56 = load i64*, i64** %timestamp.addr, align 8
  store i64 %55, i64* %56, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.31, %entry
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_scroll_bar_report_motion(%struct.frame** %fp, i64* %bar_window, i32* %part, i64* %x, i64* %y, i64* %timestamp) #0 {
entry:
  %fp.addr = alloca %struct.frame**, align 8
  %bar_window.addr = alloca i64*, align 8
  %part.addr = alloca i32*, align 8
  %x.addr = alloca i64*, align 8
  %y.addr = alloca i64*, align 8
  %timestamp.addr = alloca i64*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  %w = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %win_x = alloca i32, align 4
  %win_y = alloca i32, align 4
  %dummy_window = alloca i64, align 8
  %dummy_coord = alloca i32, align 4
  %dummy_mask = alloca i32, align 4
  %top_range = alloca i32, align 4
  store %struct.frame** %fp, %struct.frame*** %fp.addr, align 8
  store i64* %bar_window, i64** %bar_window.addr, align 8
  store i32* %part, i32** %part.addr, align 8
  store i64* %x, i64** %x.addr, align 8
  store i64* %y, i64** %y.addr, align 8
  store i64* %timestamp, i64** %timestamp.addr, align 8
  %0 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %0, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %2 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 44
  %3 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  store %struct.x_display_info* %3, %struct.x_display_info** %dpyinfo, align 8
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 78
  %5 = load %struct.scroll_bar*, %struct.scroll_bar** %last_mouse_scroll_bar, align 8
  store %struct.scroll_bar* %5, %struct.scroll_bar** %bar, align 8
  %6 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %6, i32 0, i32 4
  %7 = load i64, i64* %x_window, align 8
  store i64 %7, i64* %w, align 8
  %8 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %8, i32 0, i32 1
  %9 = load i64, i64* %window, align 8
  %call = call %struct.window* @XWINDOW(i64 %9)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 1
  %10 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %10, 5
  %11 = inttoptr i64 %sub to i8*
  %12 = bitcast i8* %11 to %struct.frame*
  store %struct.frame* %12, %struct.frame** %f, align 8
  call void @block_input()
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info4 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 44
  %15 = load %struct.x_display_info*, %struct.x_display_info** %display_info4, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 2
  %16 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %17 = load i64, i64* %w, align 8
  %call5 = call i32 @XQueryPointer(%struct._XDisplay* %16, i64 %17, i64* %dummy_window, i64* %dummy_window, i32* %dummy_coord, i32* %dummy_coord, i32* %win_x, i32* %win_y, i32* %dummy_mask)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then, label %if.end.37

if.then:                                          ; preds = %entry
  %18 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %height = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %18, i32 0, i32 8
  %19 = load i32, i32* %height, align 4
  %sub6 = sub nsw i32 %19, 2
  %sub7 = sub nsw i32 %sub6, 2
  %sub8 = sub nsw i32 %sub7, 5
  store i32 %sub8, i32* %top_range, align 4
  %20 = load i32, i32* %win_y, align 4
  %sub9 = sub nsw i32 %20, 2
  store i32 %sub9, i32* %win_y, align 4
  %21 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %21, i32 0, i32 11
  %22 = load i32, i32* %dragging, align 4
  %cmp = icmp ne i32 %22, -1
  br i1 %cmp, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %23 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging11 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %23, i32 0, i32 11
  %24 = load i32, i32* %dragging11, align 4
  %25 = load i32, i32* %win_y, align 4
  %sub12 = sub nsw i32 %25, %24
  store i32 %sub12, i32* %win_y, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  %26 = load i32, i32* %win_y, align 4
  %cmp13 = icmp slt i32 %26, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end
  store i32 0, i32* %win_y, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.end
  %27 = load i32, i32* %win_y, align 4
  %28 = load i32, i32* %top_range, align 4
  %cmp16 = icmp sgt i32 %27, %28
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.15
  %29 = load i32, i32* %top_range, align 4
  store i32 %29, i32* %win_y, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end.15
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %31 = load %struct.frame**, %struct.frame*** %fp.addr, align 8
  store %struct.frame* %30, %struct.frame** %31, align 8
  %32 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %window19 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %32, i32 0, i32 1
  %33 = load i64, i64* %window19, align 8
  %34 = load i64*, i64** %bar_window.addr, align 8
  store i64 %33, i64* %34, align 8
  %35 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging20 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %35, i32 0, i32 11
  %36 = load i32, i32* %dragging20, align 4
  %cmp21 = icmp ne i32 %36, -1
  br i1 %cmp21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %if.end.18
  %37 = load i32*, i32** %part.addr, align 8
  store i32 2, i32* %37, align 4
  br label %if.end.31

if.else:                                          ; preds = %if.end.18
  %38 = load i32, i32* %win_y, align 4
  %39 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %start = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %39, i32 0, i32 9
  %40 = load i32, i32* %start, align 4
  %cmp23 = icmp slt i32 %38, %40
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %if.else
  %41 = load i32*, i32** %part.addr, align 8
  store i32 1, i32* %41, align 4
  br label %if.end.30

if.else.25:                                       ; preds = %if.else
  %42 = load i32, i32* %win_y, align 4
  %43 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %end = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %43, i32 0, i32 10
  %44 = load i32, i32* %end, align 4
  %add = add nsw i32 %44, 5
  %cmp26 = icmp slt i32 %42, %add
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %if.else.25
  %45 = load i32*, i32** %part.addr, align 8
  store i32 2, i32* %45, align 4
  br label %if.end.29

if.else.28:                                       ; preds = %if.else.25
  %46 = load i32*, i32** %part.addr, align 8
  store i32 3, i32* %46, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.28, %if.then.27
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.24
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.22
  %47 = load i32, i32* %win_y, align 4
  %conv = sext i32 %47 to i64
  %shl = shl i64 %conv, 2
  %add32 = add i64 %shl, 2
  %48 = load i64*, i64** %x.addr, align 8
  store i64 %add32, i64* %48, align 8
  %49 = load i32, i32* %top_range, align 4
  %conv33 = sext i32 %49 to i64
  %shl34 = shl i64 %conv33, 2
  %add35 = add i64 %shl34, 2
  %50 = load i64*, i64** %y.addr, align 8
  store i64 %add35, i64* %50, align 8
  %51 = load %struct.frame*, %struct.frame** %f, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 26
  %52 = bitcast i48* %mouse_moved to i64*
  %bf.load = load i64, i64* %52, align 8
  %bf.clear = and i64 %bf.load, -1048577
  store i64 %bf.clear, i64* %52, align 8
  %53 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_scroll_bar36 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %53, i32 0, i32 78
  store %struct.scroll_bar* null, %struct.scroll_bar** %last_mouse_scroll_bar36, align 8
  %54 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %last_mouse_movement_time = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %54, i32 0, i32 83
  %55 = load i64, i64* %last_mouse_movement_time, align 8
  %56 = load i64*, i64** %timestamp.addr, align 8
  store i64 %55, i64* %56, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.31, %entry
  call void @unblock_input()
  ret void
}

declare i32 @XQueryPointer(%struct._XDisplay*, i64, i64*, i64*, i32*, i32*, i32*, i32*, i32*) #1

declare i32 @XTranslateCoordinates(%struct._XDisplay*, i64, i64, i32, i32, i32*, i32*, i64*) #1

; Function Attrs: nounwind uwtable
define internal %struct.scroll_bar* @x_scroll_bar_create(%struct.window* %w, i32 %top, i32 %left, i32 %width, i32 %height, i1 zeroext %horizontal) #0 {
entry:
  %w.addr = alloca %struct.window*, align 8
  %top.addr = alloca i32, align 4
  %left.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %horizontal.addr = alloca i8, align 1
  %f = alloca %struct.frame*, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  %barobj = alloca i64, align 8
  store %struct.window* %w, %struct.window** %w.addr, align 8
  store i32 %top, i32* %top.addr, align 4
  store i32 %left, i32* %left.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %frombool = zext i1 %horizontal to i8
  store i8 %frombool, i8* %horizontal.addr, align 1
  %0 = load %struct.window*, %struct.window** %w.addr, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %0, i32 0, i32 1
  %1 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  store %struct.frame* %3, %struct.frame** %f, align 8
  %call = call %struct.Lisp_Vector* @allocate_pseudovector(i32 8, i32 3, i32 3, i32 11)
  %4 = bitcast %struct.Lisp_Vector* %call to %struct.scroll_bar*
  store %struct.scroll_bar* %4, %struct.scroll_bar** %bar, align 8
  call void @block_input()
  %5 = load i8, i8* %horizontal.addr, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %7 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  call void @x_create_horizontal_toolkit_scroll_bar(%struct.frame* %6, %struct.scroll_bar* %7)
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  %9 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  call void @x_create_toolkit_scroll_bar(%struct.frame* %8, %struct.scroll_bar* %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.window*, %struct.window** %w.addr, align 8
  %11 = bitcast %struct.window* %10 to i8*
  %call1 = call i64 @make_lisp_ptr(i8* %11, i32 5)
  %12 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %12, i32 0, i32 1
  store i64 %call1, i64* %window, align 8
  %13 = load i32, i32* %top.addr, align 4
  %14 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %top2 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %14, i32 0, i32 5
  store i32 %13, i32* %top2, align 4
  %15 = load i32, i32* %left.addr, align 4
  %16 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %left3 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %16, i32 0, i32 6
  store i32 %15, i32* %left3, align 4
  %17 = load i32, i32* %width.addr, align 4
  %18 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %width4 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %18, i32 0, i32 7
  store i32 %17, i32* %width4, align 4
  %19 = load i32, i32* %height.addr, align 4
  %20 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %height5 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %20, i32 0, i32 8
  store i32 %19, i32* %height5, align 4
  %21 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %start = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %21, i32 0, i32 9
  store i32 0, i32* %start, align 4
  %22 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %end = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %22, i32 0, i32 10
  store i32 0, i32* %end, align 4
  %23 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %23, i32 0, i32 11
  store i32 -1, i32* %dragging, align 4
  %24 = load i8, i8* %horizontal.addr, align 1
  %tobool6 = trunc i8 %24 to i1
  %25 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal7 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %25, i32 0, i32 12
  %frombool8 = zext i1 %tobool6 to i8
  store i8 %frombool8, i8* %horizontal7, align 1
  %26 = load %struct.frame*, %struct.frame** %f, align 8
  %scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 9
  %27 = load i64, i64* %scroll_bars, align 8
  %28 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %28, i32 0, i32 2
  store i64 %27, i64* %next, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %29 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %prev = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %29, i32 0, i32 3
  store i64 %call9, i64* %prev, align 8
  %30 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %31 = bitcast %struct.scroll_bar* %30 to i8*
  %call10 = call i64 @make_lisp_ptr(i8* %31, i32 5)
  store i64 %call10, i64* %barobj, align 8
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %33 = load i64, i64* %barobj, align 8
  call void @fset_scroll_bars(%struct.frame* %32, i64 %33)
  %34 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next11 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %34, i32 0, i32 2
  %35 = load i64, i64* %next11, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %35, %call12
  br i1 %cmp, label %if.end.18, label %if.then.13

if.then.13:                                       ; preds = %if.end
  %36 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %37 = bitcast %struct.scroll_bar* %36 to i8*
  %call14 = call i64 @make_lisp_ptr(i8* %37, i32 5)
  %38 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %next15 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %38, i32 0, i32 2
  %39 = load i64, i64* %next15, align 8
  %call16 = call %struct.Lisp_Vector* @XVECTOR(i64 %39)
  %40 = bitcast %struct.Lisp_Vector* %call16 to %struct.scroll_bar*
  %prev17 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %40, i32 0, i32 3
  store i64 %call14, i64* %prev17, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.13, %if.end
  %41 = load i8, i8* %horizontal.addr, align 1
  %tobool19 = trunc i8 %41 to i1
  br i1 %tobool19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.end.18
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %43 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %43, i32 0, i32 4
  %44 = load i64, i64* %x_window, align 8
  %45 = load i32, i32* %top.addr, align 4
  %46 = load i32, i32* %left.addr, align 4
  %47 = load i32, i32* %width.addr, align 4
  %48 = load i32, i32* %height.addr, align 4
  %cmp21 = icmp sgt i32 %48, 1
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.20
  %49 = load i32, i32* %height.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.20
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %49, %cond.true ], [ 1, %cond.false ]
  call void @xg_update_horizontal_scrollbar_pos(%struct.frame* %42, i64 %44, i32 %45, i32 %46, i32 %47, i32 %cond)
  br label %if.end.29

if.else.22:                                       ; preds = %if.end.18
  %50 = load %struct.frame*, %struct.frame** %f, align 8
  %51 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %x_window23 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %51, i32 0, i32 4
  %52 = load i64, i64* %x_window23, align 8
  %53 = load i32, i32* %top.addr, align 4
  %54 = load i32, i32* %left.addr, align 4
  %55 = load i32, i32* %width.addr, align 4
  %56 = load i32, i32* %height.addr, align 4
  %cmp24 = icmp sgt i32 %56, 1
  br i1 %cmp24, label %cond.true.25, label %cond.false.26

cond.true.25:                                     ; preds = %if.else.22
  %57 = load i32, i32* %height.addr, align 4
  br label %cond.end.27

cond.false.26:                                    ; preds = %if.else.22
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.26, %cond.true.25
  %cond28 = phi i32 [ %57, %cond.true.25 ], [ 1, %cond.false.26 ]
  call void @xg_update_scrollbar_pos(%struct.frame* %50, i64 %52, i32 %53, i32 %54, i32 %55, i32 %cond28)
  br label %if.end.29

if.end.29:                                        ; preds = %cond.end.27, %cond.end
  call void @unblock_input()
  %58 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  ret %struct.scroll_bar* %58
}

declare void @xg_update_scrollbar_pos(%struct.frame*, i64, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_set_toolkit_scroll_bar_thumb(%struct.scroll_bar* %bar, i32 %portion, i32 %position, i32 %whole) #0 {
entry:
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %portion.addr = alloca i32, align 4
  %position.addr = alloca i32, align 4
  %whole.addr = alloca i32, align 4
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store i32 %portion, i32* %portion.addr, align 4
  store i32 %position, i32* %position.addr, align 4
  store i32 %whole, i32* %whole.addr, align 4
  %0 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %1 = load i32, i32* %portion.addr, align 4
  %2 = load i32, i32* %position.addr, align 4
  %3 = load i32, i32* %whole.addr, align 4
  call void @xg_set_toolkit_scroll_bar_thumb(%struct.scroll_bar* %0, i32 %1, i32 %2, i32 %3)
  ret void
}

declare void @wset_vertical_scroll_bar(%struct.window*, i64) #1

declare %struct.Lisp_Vector* @allocate_pseudovector(i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_create_horizontal_toolkit_scroll_bar(%struct.frame* %f, %struct.scroll_bar* %bar) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %scroll_bar_name = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.395, i32 0, i32 0), i8** %scroll_bar_name, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %2 = load i8*, i8** %scroll_bar_name, align 8
  call void @xg_create_horizontal_scroll_bar(%struct.frame* %0, %struct.scroll_bar* %1, void ()* bitcast (i32 (%struct._GtkRange*, i32, double, i8*)* @xg_scroll_callback to void ()*), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventButton*, i8*)* @xg_end_scroll_callback to void ()*), i8* %2)
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @x_create_toolkit_scroll_bar(%struct.frame* %f, %struct.scroll_bar* %bar) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %scroll_bar_name = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.397, i32 0, i32 0), i8** %scroll_bar_name, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %2 = load i8*, i8** %scroll_bar_name, align 8
  call void @xg_create_scroll_bar(%struct.frame* %0, %struct.scroll_bar* %1, void ()* bitcast (i32 (%struct._GtkRange*, i32, double, i8*)* @xg_scroll_callback to void ()*), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventButton*, i8*)* @xg_end_scroll_callback to void ()*), i8* %2)
  call void @unblock_input()
  ret void
}

declare void @fset_scroll_bars(%struct.frame*, i64) #1

declare void @xg_update_horizontal_scrollbar_pos(%struct.frame*, i64, i32, i32, i32, i32) #1

declare void @xg_create_horizontal_scroll_bar(%struct.frame*, %struct.scroll_bar*, void ()*, void ()*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @xg_scroll_callback(%struct._GtkRange* %range, i32 %scroll, double %value, i8* %user_data) #0 {
entry:
  %retval = alloca i32, align 4
  %range.addr = alloca %struct._GtkRange*, align 8
  %scroll.addr = alloca i32, align 4
  %value.addr = alloca double, align 8
  %user_data.addr = alloca i8*, align 8
  %whole = alloca i32, align 4
  %portion = alloca i32, align 4
  %bar = alloca %struct.scroll_bar*, align 8
  %part = alloca i32, align 4
  %adj = alloca %struct._GtkAdjustment*, align 8
  %f = alloca %struct.frame*, align 8
  store %struct._GtkRange* %range, %struct._GtkRange** %range.addr, align 8
  store i32 %scroll, i32* %scroll.addr, align 4
  store double %value, double* %value.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  store i32 0, i32* %whole, align 4
  store i32 0, i32* %portion, align 4
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.scroll_bar*
  store %struct.scroll_bar* %1, %struct.scroll_bar** %bar, align 8
  store i32 0, i32* %part, align 4
  %2 = load %struct._GtkRange*, %struct._GtkRange** %range.addr, align 8
  %call = call %struct._GtkAdjustment* @gtk_range_get_adjustment(%struct._GtkRange* %2)
  %3 = bitcast %struct._GtkAdjustment* %call to %struct._GTypeInstance*
  %call1 = call i64 @gtk_adjustment_get_type() #11
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 %call1)
  %4 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkAdjustment*
  store %struct._GtkAdjustment* %4, %struct._GtkAdjustment** %adj, align 8
  %5 = load %struct._GtkRange*, %struct._GtkRange** %range.addr, align 8
  %6 = bitcast %struct._GtkRange* %5 to %struct._GTypeInstance*
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 80)
  %7 = bitcast %struct._GTypeInstance* %call3 to %struct._GObject*
  %call4 = call i8* @g_object_get_data(%struct._GObject* %7, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.396, i32 0, i32 0))
  %8 = bitcast i8* %call4 to %struct.frame*
  store %struct.frame* %8, %struct.frame** %f, align 8
  %9 = load i8, i8* @xg_ignore_gtk_scrollbar, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %10 = load i32, i32* %scroll.addr, align 4
  switch i32 %10, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.34
    i32 3, label %sw.bb.40
    i32 4, label %sw.bb.46
    i32 5, label %sw.bb.52
  ]

sw.bb:                                            ; preds = %if.end
  %11 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 44
  %13 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %grabbed = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %13, i32 0, i32 12
  %14 = load i32, i32* %grabbed, align 4
  %cmp = icmp ne i32 %14, 0
  br i1 %cmp, label %land.lhs.true, label %if.end.33

land.lhs.true:                                    ; preds = %sw.bb
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %16 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %display_info7 = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 44
  %17 = load %struct.x_display_info*, %struct.x_display_info** %display_info7, align 8
  %grabbed8 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %17, i32 0, i32 12
  %18 = load i32, i32* %grabbed8, align 4
  %cmp9 = icmp slt i32 %18, 16
  br i1 %cmp9, label %if.then.10, label %if.end.33

if.then.10:                                       ; preds = %land.lhs.true
  %19 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %19, i32 0, i32 12
  %20 = load i8, i8* %horizontal, align 1
  %tobool11 = trunc i8 %20 to i1
  br i1 %tobool11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.then.10
  store i32 11, i32* %part, align 4
  %21 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %call13 = call double @gtk_adjustment_get_upper(%struct._GtkAdjustment* %21)
  %22 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %call14 = call double @gtk_adjustment_get_page_size(%struct._GtkAdjustment* %22)
  %sub = fsub double %call13, %call14
  %conv = fptosi double %sub to i32
  store i32 %conv, i32* %whole, align 4
  %23 = load double, double* %value.addr, align 8
  %conv15 = fptosi double %23 to i32
  %24 = load i32, i32* %whole, align 4
  %cmp16 = icmp slt i32 %conv15, %24
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.12
  %25 = load double, double* %value.addr, align 8
  %conv18 = fptosi double %25 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then.12
  %26 = load i32, i32* %whole, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv18, %cond.true ], [ %26, %cond.false ]
  store i32 %cond, i32* %portion, align 4
  %27 = load i32, i32* %portion, align 4
  %28 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %28, i32 0, i32 11
  store i32 %27, i32* %dragging, align 4
  br label %if.end.32

if.else:                                          ; preds = %if.then.10
  store i32 2, i32* %part, align 4
  %29 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %call19 = call double @gtk_adjustment_get_upper(%struct._GtkAdjustment* %29)
  %30 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %call20 = call double @gtk_adjustment_get_page_size(%struct._GtkAdjustment* %30)
  %sub21 = fsub double %call19, %call20
  %conv22 = fptosi double %sub21 to i32
  store i32 %conv22, i32* %whole, align 4
  %31 = load double, double* %value.addr, align 8
  %conv23 = fptosi double %31 to i32
  %32 = load i32, i32* %whole, align 4
  %cmp24 = icmp slt i32 %conv23, %32
  br i1 %cmp24, label %cond.true.26, label %cond.false.28

cond.true.26:                                     ; preds = %if.else
  %33 = load double, double* %value.addr, align 8
  %conv27 = fptosi double %33 to i32
  br label %cond.end.29

cond.false.28:                                    ; preds = %if.else
  %34 = load i32, i32* %whole, align 4
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.28, %cond.true.26
  %cond30 = phi i32 [ %conv27, %cond.true.26 ], [ %34, %cond.false.28 ]
  store i32 %cond30, i32* %portion, align 4
  %35 = load i32, i32* %portion, align 4
  %36 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging31 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %36, i32 0, i32 11
  store i32 %35, i32* %dragging31, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %cond.end.29, %cond.end
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %land.lhs.true, %sw.bb
  br label %sw.epilog

sw.bb.34:                                         ; preds = %if.end
  %37 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal35 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %37, i32 0, i32 12
  %38 = load i8, i8* %horizontal35, align 1
  %tobool36 = trunc i8 %38 to i1
  %cond38 = select i1 %tobool36, i32 13, i32 4
  store i32 %cond38, i32* %part, align 4
  %39 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging39 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %39, i32 0, i32 11
  store i32 -1, i32* %dragging39, align 4
  br label %sw.epilog

sw.bb.40:                                         ; preds = %if.end
  %40 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal41 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %40, i32 0, i32 12
  %41 = load i8, i8* %horizontal41, align 1
  %tobool42 = trunc i8 %41 to i1
  %cond44 = select i1 %tobool42, i32 14, i32 5
  store i32 %cond44, i32* %part, align 4
  %42 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging45 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %42, i32 0, i32 11
  store i32 -1, i32* %dragging45, align 4
  br label %sw.epilog

sw.bb.46:                                         ; preds = %if.end
  %43 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal47 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %43, i32 0, i32 12
  %44 = load i8, i8* %horizontal47, align 1
  %tobool48 = trunc i8 %44 to i1
  %cond50 = select i1 %tobool48, i32 10, i32 1
  store i32 %cond50, i32* %part, align 4
  %45 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging51 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %45, i32 0, i32 11
  store i32 -1, i32* %dragging51, align 4
  br label %sw.epilog

sw.bb.52:                                         ; preds = %if.end
  %46 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal53 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %46, i32 0, i32 12
  %47 = load i8, i8* %horizontal53, align 1
  %tobool54 = trunc i8 %47 to i1
  %cond56 = select i1 %tobool54, i32 12, i32 3
  store i32 %cond56, i32* %part, align 4
  %48 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging57 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %48, i32 0, i32 11
  store i32 -1, i32* %dragging57, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.52, %sw.bb.46, %sw.bb.40, %sw.bb.34, %if.end.33
  %49 = load i32, i32* %part, align 4
  %cmp58 = icmp ne i32 %49, 0
  br i1 %cmp58, label %if.then.60, label %if.end.64

if.then.60:                                       ; preds = %sw.epilog
  %50 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %50, i32 0, i32 1
  %51 = load i64, i64* %window, align 8
  store i64 %51, i64* @window_being_scrolled, align 8
  %52 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %window61 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %52, i32 0, i32 1
  %53 = load i64, i64* %window61, align 8
  %54 = load i32, i32* %part, align 4
  %55 = load i32, i32* %portion, align 4
  %56 = load i32, i32* %whole, align 4
  %57 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal62 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %57, i32 0, i32 12
  %58 = load i8, i8* %horizontal62, align 1
  %tobool63 = trunc i8 %58 to i1
  call void @x_send_scroll_bar_event(i64 %53, i32 %54, i32 %55, i32 %56, i1 zeroext %tobool63)
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.60, %sw.epilog
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.64, %if.then
  %59 = load i32, i32* %retval
  ret i32 %59
}

; Function Attrs: nounwind uwtable
define internal i32 @xg_end_scroll_callback(%struct._GtkWidget* %widget, %struct._GdkEventButton* %event, i8* %user_data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %event.addr = alloca %struct._GdkEventButton*, align 8
  %user_data.addr = alloca i8*, align 8
  %bar = alloca %struct.scroll_bar*, align 8
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store %struct._GdkEventButton* %event, %struct._GdkEventButton** %event.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.scroll_bar*
  store %struct.scroll_bar* %1, %struct.scroll_bar** %bar, align 8
  %2 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %dragging = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %2, i32 0, i32 11
  store i32 -1, i32* %dragging, align 4
  %3 = load i64, i64* @window_being_scrolled, align 8
  %call = call zeroext i1 @WINDOWP(i64 %3)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* @window_being_scrolled, align 8
  %5 = load %struct.scroll_bar*, %struct.scroll_bar** %bar, align 8
  %horizontal = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %5, i32 0, i32 12
  %6 = load i8, i8* %horizontal, align 1
  %tobool = trunc i8 %6 to i1
  call void @x_send_scroll_bar_event(i64 %4, i32 8, i32 0, i32 0, i1 zeroext %tobool)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* @window_being_scrolled, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare %struct._GtkAdjustment* @gtk_range_get_adjustment(%struct._GtkRange*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_adjustment_get_type() #5

declare i8* @g_object_get_data(%struct._GObject*, i8*) #1

declare double @gtk_adjustment_get_upper(%struct._GtkAdjustment*) #1

declare double @gtk_adjustment_get_page_size(%struct._GtkAdjustment*) #1

; Function Attrs: nounwind uwtable
define internal void @x_send_scroll_bar_event(i64 %window, i32 %part, i32 %portion, i32 %whole, i1 zeroext %horizontal) #0 {
entry:
  %window.addr = alloca i64, align 8
  %part.addr = alloca i32, align 4
  %portion.addr = alloca i32, align 4
  %whole.addr = alloca i32, align 4
  %horizontal.addr = alloca i8, align 1
  %event = alloca %union._XEvent, align 8
  %ev = alloca %struct.XClientMessageEvent*, align 8
  %w = alloca %struct.window*, align 8
  %f = alloca %struct.frame*, align 8
  %iw = alloca i64, align 8
  %sign_shift = alloca i32, align 4
  store i64 %window, i64* %window.addr, align 8
  store i32 %part, i32* %part.addr, align 4
  store i32 %portion, i32* %portion.addr, align 4
  store i32 %whole, i32* %whole.addr, align 4
  %frombool = zext i1 %horizontal to i8
  store i8 %frombool, i8* %horizontal.addr, align 1
  %xclient = bitcast %union._XEvent* %event to %struct.XClientMessageEvent*
  store %struct.XClientMessageEvent* %xclient, %struct.XClientMessageEvent** %ev, align 8
  %0 = load i64, i64* %window.addr, align 8
  %call = call %struct.window* @XWINDOW(i64 %0)
  store %struct.window* %call, %struct.window** %w, align 8
  %1 = load %struct.window*, %struct.window** %w, align 8
  %frame = getelementptr inbounds %struct.window, %struct.window* %1, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  store %struct.frame* %4, %struct.frame** %f, align 8
  %5 = load %struct.window*, %struct.window** %w, align 8
  %6 = ptrtoint %struct.window* %5 to i64
  store i64 %6, i64* %iw, align 8
  store i32 32, i32* %sign_shift, align 4
  call void @block_input()
  %7 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %7, i32 0, i32 0
  store i32 33, i32* %type, align 4
  %8 = load i8, i8* %horizontal.addr, align 1
  %tobool = trunc i8 %8 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %10 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 44
  %11 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %Xatom_Horizontal_Scrollbar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %11, i32 0, i32 68
  %12 = load i64, i64* %Xatom_Horizontal_Scrollbar, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %14 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 44
  %15 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %Xatom_Scrollbar = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %15, i32 0, i32 67
  %16 = load i64, i64* %Xatom_Scrollbar, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %12, %cond.true ], [ %16, %cond.false ]
  %17 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %message_type = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %17, i32 0, i32 5
  store i64 %cond, i64* %message_type, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %19 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %display_info6 = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 44
  %20 = load %struct.x_display_info*, %struct.x_display_info** %display_info6, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %20, i32 0, i32 2
  %21 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %22 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %display7 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %22, i32 0, i32 3
  store %struct._XDisplay* %21, %struct._XDisplay** %display7, align 8
  %23 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data8 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data8 to %struct.x_output**
  %24 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %24, i32 0, i32 9
  %25 = load i64, i64* %window_desc, align 8
  %26 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %window10 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %26, i32 0, i32 4
  store i64 %25, i64* %window10, align 8
  %27 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %format = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %27, i32 0, i32 6
  store i32 32, i32* %format, align 4
  %28 = load i64, i64* %iw, align 8
  %shr = ashr i64 %28, 31
  %shr11 = ashr i64 %shr, 1
  %29 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %29, i32 0, i32 7
  %l = bitcast %union.anon.5* %data to [5 x i64]*
  %arrayidx = getelementptr inbounds [5 x i64], [5 x i64]* %l, i32 0, i64 0
  store i64 %shr11, i64* %arrayidx, align 8
  %30 = load i32, i32* %sign_shift, align 4
  %cmp = icmp sle i32 %30, 0
  br i1 %cmp, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %cond.end
  %31 = load i64, i64* %iw, align 8
  br label %cond.end.16

cond.false.13:                                    ; preds = %cond.end
  %32 = load i64, i64* %iw, align 8
  %33 = load i32, i32* %sign_shift, align 4
  %sh_prom = zext i32 %33 to i64
  %shl = shl i64 %32, %sh_prom
  %34 = load i32, i32* %sign_shift, align 4
  %sh_prom14 = zext i32 %34 to i64
  %shr15 = ashr i64 %shl, %sh_prom14
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.13, %cond.true.12
  %cond17 = phi i64 [ %31, %cond.true.12 ], [ %shr15, %cond.false.13 ]
  %35 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data18 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %35, i32 0, i32 7
  %l19 = bitcast %union.anon.5* %data18 to [5 x i64]*
  %arrayidx20 = getelementptr inbounds [5 x i64], [5 x i64]* %l19, i32 0, i64 1
  store i64 %cond17, i64* %arrayidx20, align 8
  %36 = load i32, i32* %part.addr, align 4
  %conv = zext i32 %36 to i64
  %37 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data21 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %37, i32 0, i32 7
  %l22 = bitcast %union.anon.5* %data21 to [5 x i64]*
  %arrayidx23 = getelementptr inbounds [5 x i64], [5 x i64]* %l22, i32 0, i64 2
  store i64 %conv, i64* %arrayidx23, align 8
  %38 = load i32, i32* %portion.addr, align 4
  %conv24 = sext i32 %38 to i64
  %39 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data25 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %39, i32 0, i32 7
  %l26 = bitcast %union.anon.5* %data25 to [5 x i64]*
  %arrayidx27 = getelementptr inbounds [5 x i64], [5 x i64]* %l26, i32 0, i64 3
  store i64 %conv24, i64* %arrayidx27, align 8
  %40 = load i32, i32* %whole.addr, align 4
  %conv28 = sext i32 %40 to i64
  %41 = load %struct.XClientMessageEvent*, %struct.XClientMessageEvent** %ev, align 8
  %data29 = getelementptr inbounds %struct.XClientMessageEvent, %struct.XClientMessageEvent* %41, i32 0, i32 7
  %l30 = bitcast %union.anon.5* %data29 to [5 x i64]*
  %arrayidx31 = getelementptr inbounds [5 x i64], [5 x i64]* %l30, i32 0, i64 4
  store i64 %conv28, i64* %arrayidx31, align 8
  %42 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data32 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 62
  %x33 = bitcast %union.output_data* %output_data32 to %struct.x_output**
  %43 = load %struct.x_output*, %struct.x_output** %x33, align 8
  %display_info34 = getelementptr inbounds %struct.x_output, %struct.x_output* %43, i32 0, i32 44
  %44 = load %struct.x_display_info*, %struct.x_display_info** %display_info34, align 8
  %display35 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %44, i32 0, i32 2
  %45 = load %struct._XDisplay*, %struct._XDisplay** %display35, align 8
  %46 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data36 = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 62
  %x37 = bitcast %union.output_data* %output_data36 to %struct.x_output**
  %47 = load %struct.x_output*, %struct.x_output** %x37, align 8
  %window_desc38 = getelementptr inbounds %struct.x_output, %struct.x_output* %47, i32 0, i32 9
  %48 = load i64, i64* %window_desc38, align 8
  %call39 = call i32 @XSendEvent(%struct._XDisplay* %45, i64 %48, i32 0, i64 0, %union._XEvent* %event)
  call void @unblock_input()
  ret void
}

declare void @xg_create_scroll_bar(%struct.frame*, %struct.scroll_bar*, void ()*, void ()*, i8*) #1

declare void @xg_set_toolkit_scroll_bar_thumb(%struct.scroll_bar*, i32, i32, i32) #1

declare zeroext i1 @BUFFERP(i64) #1

declare %struct.buffer* @XBUFFER(i64) #1

declare i32 @estimate_mode_line_height(%struct.frame*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @x_set_toolkit_horizontal_scroll_bar_thumb(%struct.scroll_bar* %bar, i32 %portion, i32 %position, i32 %whole) #0 {
entry:
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %portion.addr = alloca i32, align 4
  %position.addr = alloca i32, align 4
  %whole.addr = alloca i32, align 4
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store i32 %portion, i32* %portion.addr, align 4
  store i32 %position, i32* %position.addr, align 4
  store i32 %whole, i32* %whole.addr, align 4
  %0 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %1 = load i32, i32* %portion.addr, align 4
  %2 = load i32, i32* %position.addr, align 4
  %3 = load i32, i32* %whole.addr, align 4
  call void @xg_set_toolkit_horizontal_scroll_bar_thumb(%struct.scroll_bar* %0, i32 %1, i32 %2, i32 %3)
  ret void
}

declare void @wset_horizontal_scroll_bar(%struct.window*, i64) #1

declare void @xg_set_toolkit_horizontal_scroll_bar_thumb(%struct.scroll_bar*, i32, i32, i32) #1

declare void @fset_condemned_scroll_bars(%struct.frame*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @x_scroll_bar_remove(%struct.scroll_bar* %bar) #0 {
entry:
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %f = alloca %struct.frame*, align 8
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  %0 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %0, i32 0, i32 1
  %1 = load i64, i64* %window, align 8
  %call = call %struct.window* @XWINDOW(i64 %1)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 1
  %2 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %2, 5
  %3 = inttoptr i64 %sub to i8*
  %4 = bitcast i8* %3 to %struct.frame*
  store %struct.frame* %4, %struct.frame** %f, align 8
  call void @block_input()
  %5 = load %struct.frame*, %struct.frame** %f, align 8
  %6 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %6, i32 0, i32 4
  %7 = load i64, i64* %x_window, align 8
  call void @xg_remove_scroll_bar(%struct.frame* %5, i64 %7)
  %8 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %horizontal = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %8, i32 0, i32 12
  %9 = load i8, i8* %horizontal, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window1 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %10, i32 0, i32 1
  %11 = load i64, i64* %window1, align 8
  %call2 = call %struct.window* @XWINDOW(i64 %11)
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_horizontal_scroll_bar(%struct.window* %call2, i64 %call3)
  br label %if.end

if.else:                                          ; preds = %entry
  %12 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window4 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %12, i32 0, i32 1
  %13 = load i64, i64* %window4, align 8
  %call5 = call %struct.window* @XWINDOW(i64 %13)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  call void @wset_vertical_scroll_bar(%struct.window* %call5, i64 %call6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @unblock_input()
  ret void
}

declare void @xg_remove_scroll_bar(%struct.frame*, i64) #1

declare i64 @Fset_input_interrupt_mode(i64) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly }
attributes #10 = { noreturn }
attributes #11 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 2730888}
