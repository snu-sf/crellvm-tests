; ModuleID = './src/term.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tty_display_info = type { %struct.tty_display_info*, i8*, i8*, %struct._IO_FILE*, %struct._IO_FILE*, %struct._IO_FILE*, %struct.emacs_tty*, i8, i32, %struct.terminal*, %struct.cm*, i64, %struct.frame*, i32, %struct.Mouse_HLInfo, [4096 x i8], [4096 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.emacs_tty = type opaque
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.vectorlike_header = type { i64 }
%struct.kboard = type { %struct.kboard*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, i64, i32, i64, i8, i8, i64 }
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct.timespec = type { i64, i64 }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct._XDisplay = type opaque
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%union.display_info = type { %struct.tty_display_info* }
%struct.coding_system = type { i64, i32, i32, %union.anon.6, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.6 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%struct.glyph_slice = type { i64 }
%union.anon.1 = type { i32 }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.7, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.xwidget = type opaque
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct.text_pos = type { i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct._XGC = type opaque
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%struct.cm = type { i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type { %struct.tty_display_info* }
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Lisp_Boolfwd = type { i32, i8* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.fkey_table = type { i8*, i8* }
%struct.GLYPH = type { i32, i32 }
%struct.Lisp_Vector = type { %struct.vectorlike_header, [0 x i64] }
%struct.anon.2 = type { i32 }
%struct.anon = type { i32, i32 }
%struct.charset = type { i32, i64, i32, [15 x i32], i8*, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [190 x i8], i32 }
%struct.Lisp_Hash_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.hash_table_test, %struct.Lisp_Hash_Table* }
%struct.hash_table_test = type { i64, i64, i64, i1 (%struct.hash_table_test*, i64, i64)*, i64 (%struct.hash_table_test*, i64)* }
%struct.Lisp_Cons = type { i64, %union.anon.11 }
%union.anon.11 = type { i64 }
%struct.tty_menu_struct = type { i32, i8**, %struct.tty_menu_struct**, i32*, i64, i32, i32, i8** }
%struct.tty_menu_state = type { %struct.glyph_matrix*, %struct.tty_menu_struct*, i32, i32, i32 }
%struct.__sigset_t = type { [16 x i64] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.12, i16, i16, i8*, i8*, i8* }
%union.anon.12 = type { i64 ()* }

@current_tty = external global %struct.tty_display_info*, align 8
@selected_frame = external global i64, align 8
@globals = external global %struct.emacs_globals, align 8
@encode_terminal_src_size = internal global i64 0, align 8
@encode_terminal_src = internal global i8* null, align 8
@composition_table = external global %struct.composition**, align 8
@composition_hash_table = external global i64, align 8
@current_buffer = external global %struct.buffer*, align 8
@encode_terminal_dst_size = internal global i64 0, align 8
@encode_terminal_dst = internal global i8* null, align 8
@cost = external global i32, align 4
@max_frame_cols = internal global i32 0, align 4
@char_ins_del_vector = common global i32* null, align 8
@.str = private unnamed_addr constant [21 x i8] c"tty-color-mode-alist\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"tty-set-up-initial-frame-faces\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"/dev/tty\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"Attempt to suspend a non-text terminal device\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"suspend-tty-functions\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"Attempt to resume a non-text terminal device\00", align 1
@.str.6 = private unnamed_addr constant [73 x i8] c"Cannot resume display while another display is active on the same device\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Cannot reopen tty device\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"resume-tty-functions\00", align 1
@menu_items_n_panes = external global i32, align 4
@menu_items_used = external global i32, align 4
@.str.10 = private unnamed_addr constant [11 x i8] c"Empty menu\00", align 1
@menu_items = external global i64, align 8
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"Can't create pane\00", align 1
@.str.13 = private unnamed_addr constant [28 x i8] c"Can't add selection to menu\00", align 1
@echo_area_buffer = external global [2 x i64], align 16
@echo_area_window = external global i64, align 8
@.str.14 = private unnamed_addr constant [20 x i8] c"Can't activate menu\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c"Unknown terminal type\00", align 1
@tty_list = common global %struct.tty_display_info* null, align 8
@.str.16 = private unnamed_addr constant [24 x i8] c"Could not open file: %s\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"Not a tty device: %s\00", align 1
@.str.18 = private unnamed_addr constant [35 x i8] c"Cannot open terminfo database file\00", align 1
@.str.19 = private unnamed_addr constant [32 x i8] c"Terminal type %s is not defined\00", align 1
@.str.20 = private unnamed_addr constant [281 x i8] c"Terminal type %s is not defined.\0AIf that is not the actual type of terminal you have,\0Ause the Bourne shell command 'TERM=...; export TERM' (C-shell:\0A'setenv TERM ...') to specify the correct type.  It may be necessary\0Ato do 'unset TERMINFO' (C-shell: 'unsetenv TERMINFO') as well.\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"al\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"bl\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"bt\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"cd\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"ce\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"cm\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"cr\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"cs\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"cS\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"cv\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"dc\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"DC\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"DL\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"dm\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"ed\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"ei\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"ho\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"ic\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"IC\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"im\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"ip\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"ke\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"ks\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"ll\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"nd\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"do\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"nl\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"bs\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"\08\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"le\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"bc\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"pc\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"rp\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"se\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"sf\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"so\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"sr\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"ta\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"te\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"ti\00", align 1
@.str.64 = private unnamed_addr constant [3 x i8] c"up\00", align 1
@.str.65 = private unnamed_addr constant [3 x i8] c"vb\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"ve\00", align 1
@.str.67 = private unnamed_addr constant [3 x i8] c"vs\00", align 1
@.str.68 = private unnamed_addr constant [3 x i8] c"vi\00", align 1
@.str.69 = private unnamed_addr constant [3 x i8] c"wi\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"us\00", align 1
@.str.71 = private unnamed_addr constant [3 x i8] c"ue\00", align 1
@.str.72 = private unnamed_addr constant [3 x i8] c"md\00", align 1
@.str.73 = private unnamed_addr constant [3 x i8] c"ZH\00", align 1
@.str.74 = private unnamed_addr constant [3 x i8] c"mh\00", align 1
@.str.75 = private unnamed_addr constant [3 x i8] c"mr\00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c"as\00", align 1
@.str.77 = private unnamed_addr constant [3 x i8] c"ae\00", align 1
@.str.78 = private unnamed_addr constant [3 x i8] c"me\00", align 1
@.str.79 = private unnamed_addr constant [3 x i8] c"UP\00", align 1
@.str.80 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.81 = private unnamed_addr constant [3 x i8] c"LE\00", align 1
@.str.82 = private unnamed_addr constant [3 x i8] c"RI\00", align 1
@.str.83 = private unnamed_addr constant [3 x i8] c"op\00", align 1
@.str.84 = private unnamed_addr constant [3 x i8] c"AF\00", align 1
@.str.85 = private unnamed_addr constant [3 x i8] c"AB\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c"Sf\00", align 1
@.str.87 = private unnamed_addr constant [3 x i8] c"Sb\00", align 1
@.str.88 = private unnamed_addr constant [3 x i8] c"Co\00", align 1
@.str.89 = private unnamed_addr constant [3 x i8] c"pa\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"NC\00", align 1
@.str.91 = private unnamed_addr constant [3 x i8] c"xn\00", align 1
@.str.92 = private unnamed_addr constant [3 x i8] c"am\00", align 1
@.str.93 = private unnamed_addr constant [3 x i8] c"db\00", align 1
@.str.94 = private unnamed_addr constant [3 x i8] c"hz\00", align 1
@.str.95 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.96 = private unnamed_addr constant [3 x i8] c"km\00", align 1
@.str.97 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.98 = private unnamed_addr constant [3 x i8] c"mi\00", align 1
@.str.99 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.100 = private unnamed_addr constant [3 x i8] c"ul\00", align 1
@.str.101 = private unnamed_addr constant [3 x i8] c"xt\00", align 1
@current_kboard = external global %struct.kboard*, align 8
@initial_kboard = external global %struct.kboard*, align 8
@.str.102 = private unnamed_addr constant [3 x i8] c"co\00", align 1
@.str.103 = private unnamed_addr constant [3 x i8] c"li\00", align 1
@.str.104 = private unnamed_addr constant [31 x i8] c"Screen size %dx%d is too small\00", align 1
@.str.105 = private unnamed_addr constant [3 x i8] c"tw\00", align 1
@.str.106 = private unnamed_addr constant [2 x i8] c"\07\00", align 1
@PC = external global i8, align 1
@.str.107 = private unnamed_addr constant [3 x i8] c"sg\00", align 1
@.str.108 = private unnamed_addr constant [3 x i8] c"ug\00", align 1
@.str.109 = private unnamed_addr constant [55 x i8] c"Terminal type \22%s\22 is not powerful enough to run Emacs\00", align 1
@.str.110 = private unnamed_addr constant [349 x i8] c"Terminal type \22%s\22 is not powerful enough to run Emacs.\0AIt lacks the ability to position the cursor.\0AIf that is not the actual type of terminal you have,\0Ause the Bourne shell command 'TERM=...; export TERM' (C-shell:\0A'setenv TERM ...') to specify the correct type.  It may be necessary\0Ato do 'unset TERMINFO' (C-shell: 'unsetenv TERMINFO') as well.\00", align 1
@.str.111 = private unnamed_addr constant [35 x i8] c"Could not determine the frame size\00", align 1
@syms_of_term.b_fwd = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.112 = private unnamed_addr constant [21 x i8] c"system-uses-terminfo\00", align 1
@syms_of_term.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@syms_of_term.o_fwd.113 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@syms_of_term.b_fwd.114 = internal global %struct.Lisp_Boolfwd zeroinitializer, align 8
@.str.115 = private unnamed_addr constant [15 x i8] c"visible-cursor\00", align 1
@default_orig_pair = internal global i8* null, align 8
@default_set_foreground = internal global i8* null, align 8
@default_set_background = internal global i8* null, align 8
@.str.116 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.117 = private unnamed_addr constant [7 x i8] c"[%.*s]\00", align 1
@.str.118 = private unnamed_addr constant [7 x i8] c"\5Cu%04X\00", align 1
@.str.119 = private unnamed_addr constant [7 x i8] c"\5CU%06X\00", align 1
@.str.120 = private unnamed_addr constant [7 x i8] c"\5Cx%06X\00", align 1
@.str.121 = private unnamed_addr constant [5 x i8] c"\1B[0m\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"\1B[3%p1%dm\00", align 1
@.str.123 = private unnamed_addr constant [10 x i8] c"\1B[4%p1%dm\00", align 1
@prev_menu_help_message = internal global i8* null, align 8
@menu_help_message = internal global i8* null, align 8
@.str.124 = private unnamed_addr constant [23 x i8] c"tty-menu-disabled-face\00", align 1
@.str.125 = private unnamed_addr constant [22 x i8] c"tty-menu-enabled-face\00", align 1
@.str.126 = private unnamed_addr constant [23 x i8] c"tty-menu-selected-face\00", align 1
@.str.127 = private unnamed_addr constant [10 x i8] c"Buffers 1\00", align 1
@menu_help_paneno = internal global i32 0, align 4
@menu_help_itemno = internal global i32 0, align 4
@empty_unibyte_string = external global i64, align 8
@stdin = external global %struct._IO_FILE*, align 8
@stdout = external global %struct._IO_FILE*, align 8
@safe_terminal_coding = external global %struct.coding_system, align 8
@selected_window = external global i64, align 8
@default_max_colors = internal global i32 0, align 4
@default_max_pairs = internal global i32 0, align 4
@default_no_color_video = internal global i32 0, align 4
@term_get_fkeys_address = internal global i8** null, align 8
@term_get_fkeys_kboard = internal global %struct.kboard* null, align 8
@keys = internal constant [58 x %struct.fkey_table] [%struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.146, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.148, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.151, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.153, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.138, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.144, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.155, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.157, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.159, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.161, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.163, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.165, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.167, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.171, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.173, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.175, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.177, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.179, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.181, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.182, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.183, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.185, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.187, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.189, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.191, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.193, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.195, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.197, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.201, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.202, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.203, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.204, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.205, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.207, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.208, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.209, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.210, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.211, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.213, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.214, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.215, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.216, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.217, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.218, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.219, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.220, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.221, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.223, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.225, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.227, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.228, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.229, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.230, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.231, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.232, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.233, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.234, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.235, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.236, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.237, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.239, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.240, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.241, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.242, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.243, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.244, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.245, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.246, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.247, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.248, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.249, i32 0, i32 0) }, %struct.fkey_table { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.250, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.251, i32 0, i32 0) }], align 16
@.str.128 = private unnamed_addr constant [3 x i8] c"k;\00", align 1
@.str.129 = private unnamed_addr constant [3 x i8] c"k0\00", align 1
@.str.130 = private unnamed_addr constant [4 x i8] c"f10\00", align 1
@.str.131 = private unnamed_addr constant [3 x i8] c"f0\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"f%d\00", align 1
@.str.133 = private unnamed_addr constant [3 x i8] c"%5\00", align 1
@.str.134 = private unnamed_addr constant [3 x i8] c"kN\00", align 1
@.str.135 = private unnamed_addr constant [5 x i8] c"next\00", align 1
@.str.136 = private unnamed_addr constant [3 x i8] c"%8\00", align 1
@.str.137 = private unnamed_addr constant [3 x i8] c"kP\00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c"prior\00", align 1
@.str.139 = private unnamed_addr constant [3 x i8] c"kD\00", align 1
@.str.140 = private unnamed_addr constant [3 x i8] c"kI\00", align 1
@.str.141 = private unnamed_addr constant [7 x i8] c"insert\00", align 1
@.str.142 = private unnamed_addr constant [3 x i8] c"@7\00", align 1
@.str.143 = private unnamed_addr constant [3 x i8] c"kH\00", align 1
@.str.144 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@.str.145 = private unnamed_addr constant [3 x i8] c"kh\00", align 1
@.str.146 = private unnamed_addr constant [5 x i8] c"home\00", align 1
@.str.147 = private unnamed_addr constant [3 x i8] c"kl\00", align 1
@.str.148 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@.str.149 = private unnamed_addr constant [3 x i8] c"ku\00", align 1
@.str.150 = private unnamed_addr constant [3 x i8] c"kr\00", align 1
@.str.151 = private unnamed_addr constant [6 x i8] c"right\00", align 1
@.str.152 = private unnamed_addr constant [3 x i8] c"kd\00", align 1
@.str.153 = private unnamed_addr constant [5 x i8] c"down\00", align 1
@.str.154 = private unnamed_addr constant [3 x i8] c"@1\00", align 1
@.str.155 = private unnamed_addr constant [6 x i8] c"begin\00", align 1
@.str.156 = private unnamed_addr constant [3 x i8] c"*6\00", align 1
@.str.157 = private unnamed_addr constant [7 x i8] c"select\00", align 1
@.str.158 = private unnamed_addr constant [3 x i8] c"%9\00", align 1
@.str.159 = private unnamed_addr constant [6 x i8] c"print\00", align 1
@.str.160 = private unnamed_addr constant [3 x i8] c"@4\00", align 1
@.str.161 = private unnamed_addr constant [8 x i8] c"execute\00", align 1
@.str.162 = private unnamed_addr constant [3 x i8] c"&8\00", align 1
@.str.163 = private unnamed_addr constant [5 x i8] c"undo\00", align 1
@.str.164 = private unnamed_addr constant [3 x i8] c"%0\00", align 1
@.str.165 = private unnamed_addr constant [5 x i8] c"redo\00", align 1
@.str.166 = private unnamed_addr constant [3 x i8] c"%7\00", align 1
@.str.167 = private unnamed_addr constant [5 x i8] c"menu\00", align 1
@.str.168 = private unnamed_addr constant [3 x i8] c"@0\00", align 1
@.str.169 = private unnamed_addr constant [5 x i8] c"find\00", align 1
@.str.170 = private unnamed_addr constant [3 x i8] c"@2\00", align 1
@.str.171 = private unnamed_addr constant [7 x i8] c"cancel\00", align 1
@.str.172 = private unnamed_addr constant [3 x i8] c"%1\00", align 1
@.str.173 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.174 = private unnamed_addr constant [3 x i8] c"&4\00", align 1
@.str.175 = private unnamed_addr constant [6 x i8] c"reset\00", align 1
@.str.176 = private unnamed_addr constant [3 x i8] c"kE\00", align 1
@.str.177 = private unnamed_addr constant [10 x i8] c"clearline\00", align 1
@.str.178 = private unnamed_addr constant [3 x i8] c"kA\00", align 1
@.str.179 = private unnamed_addr constant [11 x i8] c"insertline\00", align 1
@.str.180 = private unnamed_addr constant [3 x i8] c"kL\00", align 1
@.str.181 = private unnamed_addr constant [11 x i8] c"deleteline\00", align 1
@.str.182 = private unnamed_addr constant [11 x i8] c"insertchar\00", align 1
@.str.183 = private unnamed_addr constant [11 x i8] c"deletechar\00", align 1
@.str.184 = private unnamed_addr constant [3 x i8] c"kB\00", align 1
@.str.185 = private unnamed_addr constant [8 x i8] c"backtab\00", align 1
@.str.186 = private unnamed_addr constant [3 x i8] c"@8\00", align 1
@.str.187 = private unnamed_addr constant [9 x i8] c"kp-enter\00", align 1
@.str.188 = private unnamed_addr constant [3 x i8] c"K4\00", align 1
@.str.189 = private unnamed_addr constant [5 x i8] c"kp-1\00", align 1
@.str.190 = private unnamed_addr constant [3 x i8] c"K5\00", align 1
@.str.191 = private unnamed_addr constant [5 x i8] c"kp-3\00", align 1
@.str.192 = private unnamed_addr constant [3 x i8] c"K2\00", align 1
@.str.193 = private unnamed_addr constant [5 x i8] c"kp-5\00", align 1
@.str.194 = private unnamed_addr constant [3 x i8] c"K1\00", align 1
@.str.195 = private unnamed_addr constant [5 x i8] c"kp-7\00", align 1
@.str.196 = private unnamed_addr constant [3 x i8] c"K3\00", align 1
@.str.197 = private unnamed_addr constant [5 x i8] c"kp-9\00", align 1
@.str.198 = private unnamed_addr constant [3 x i8] c"k1\00", align 1
@.str.199 = private unnamed_addr constant [3 x i8] c"f1\00", align 1
@.str.200 = private unnamed_addr constant [3 x i8] c"k2\00", align 1
@.str.201 = private unnamed_addr constant [3 x i8] c"f2\00", align 1
@.str.202 = private unnamed_addr constant [3 x i8] c"k3\00", align 1
@.str.203 = private unnamed_addr constant [3 x i8] c"f3\00", align 1
@.str.204 = private unnamed_addr constant [3 x i8] c"k4\00", align 1
@.str.205 = private unnamed_addr constant [3 x i8] c"f4\00", align 1
@.str.206 = private unnamed_addr constant [3 x i8] c"k5\00", align 1
@.str.207 = private unnamed_addr constant [3 x i8] c"f5\00", align 1
@.str.208 = private unnamed_addr constant [3 x i8] c"k6\00", align 1
@.str.209 = private unnamed_addr constant [3 x i8] c"f6\00", align 1
@.str.210 = private unnamed_addr constant [3 x i8] c"k7\00", align 1
@.str.211 = private unnamed_addr constant [3 x i8] c"f7\00", align 1
@.str.212 = private unnamed_addr constant [3 x i8] c"k8\00", align 1
@.str.213 = private unnamed_addr constant [3 x i8] c"f8\00", align 1
@.str.214 = private unnamed_addr constant [3 x i8] c"k9\00", align 1
@.str.215 = private unnamed_addr constant [3 x i8] c"f9\00", align 1
@.str.216 = private unnamed_addr constant [3 x i8] c"&0\00", align 1
@.str.217 = private unnamed_addr constant [9 x i8] c"S-cancel\00", align 1
@.str.218 = private unnamed_addr constant [3 x i8] c"&9\00", align 1
@.str.219 = private unnamed_addr constant [8 x i8] c"S-begin\00", align 1
@.str.220 = private unnamed_addr constant [3 x i8] c"*0\00", align 1
@.str.221 = private unnamed_addr constant [7 x i8] c"S-find\00", align 1
@.str.222 = private unnamed_addr constant [3 x i8] c"*1\00", align 1
@.str.223 = private unnamed_addr constant [10 x i8] c"S-execute\00", align 1
@.str.224 = private unnamed_addr constant [3 x i8] c"*4\00", align 1
@.str.225 = private unnamed_addr constant [9 x i8] c"S-delete\00", align 1
@.str.226 = private unnamed_addr constant [3 x i8] c"*7\00", align 1
@.str.227 = private unnamed_addr constant [6 x i8] c"S-end\00", align 1
@.str.228 = private unnamed_addr constant [3 x i8] c"*8\00", align 1
@.str.229 = private unnamed_addr constant [12 x i8] c"S-clearline\00", align 1
@.str.230 = private unnamed_addr constant [3 x i8] c"#1\00", align 1
@.str.231 = private unnamed_addr constant [7 x i8] c"S-help\00", align 1
@.str.232 = private unnamed_addr constant [3 x i8] c"#2\00", align 1
@.str.233 = private unnamed_addr constant [7 x i8] c"S-home\00", align 1
@.str.234 = private unnamed_addr constant [3 x i8] c"#3\00", align 1
@.str.235 = private unnamed_addr constant [9 x i8] c"S-insert\00", align 1
@.str.236 = private unnamed_addr constant [3 x i8] c"#4\00", align 1
@.str.237 = private unnamed_addr constant [7 x i8] c"S-left\00", align 1
@.str.238 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.239 = private unnamed_addr constant [7 x i8] c"S-menu\00", align 1
@.str.240 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.241 = private unnamed_addr constant [7 x i8] c"S-next\00", align 1
@.str.242 = private unnamed_addr constant [3 x i8] c"%e\00", align 1
@.str.243 = private unnamed_addr constant [8 x i8] c"S-prior\00", align 1
@.str.244 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.245 = private unnamed_addr constant [8 x i8] c"S-print\00", align 1
@.str.246 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.str.247 = private unnamed_addr constant [7 x i8] c"S-redo\00", align 1
@.str.248 = private unnamed_addr constant [3 x i8] c"%i\00", align 1
@.str.249 = private unnamed_addr constant [8 x i8] c"S-right\00", align 1
@.str.250 = private unnamed_addr constant [3 x i8] c"!3\00", align 1
@.str.251 = private unnamed_addr constant [7 x i8] c"S-undo\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.252 = private unnamed_addr constant [8 x i8] c"emacs: \00", align 1
@.str.253 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.254 = private unnamed_addr constant [20 x i8] c"tty-display-color-p\00", align 1
@Stty_display_color_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ftty_display_color_p }, i16 0, i16 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.254, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.255 = private unnamed_addr constant [24 x i8] c"tty-display-color-cells\00", align 1
@Stty_display_color_cells = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ftty_display_color_cells }, i16 0, i16 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.255, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.256 = private unnamed_addr constant [17 x i8] c"tty-no-underline\00", align 1
@Stty_no_underline = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ftty_no_underline }, i16 0, i16 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.256, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.257 = private unnamed_addr constant [9 x i8] c"tty-type\00", align 1
@Stty_type = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ftty_type }, i16 0, i16 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.257, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.258 = private unnamed_addr constant [18 x i8] c"controlling-tty-p\00", align 1
@Scontrolling_tty_p = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fcontrolling_tty_p }, i16 0, i16 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.258, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.259 = private unnamed_addr constant [14 x i8] c"tty-top-frame\00", align 1
@Stty_top_frame = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Ftty_top_frame }, i16 0, i16 1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.259, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.260 = private unnamed_addr constant [12 x i8] c"suspend-tty\00", align 1
@Ssuspend_tty = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fsuspend_tty }, i16 0, i16 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.260, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.261 = private unnamed_addr constant [11 x i8] c"resume-tty\00", align 1
@Sresume_tty = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fresume_tty }, i16 0, i16 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.261, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind uwtable
define void @tty_turn_off_insert(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %0, i32 0, i32 72
  %bf.load = load i8, i8* %insert_mode, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  store %struct.tty_display_info* %1, %struct.tty_display_info** @current_tty, align 8
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_end_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 31
  %3 = load i8*, i8** %TS_end_insert_mode, align 8
  %4 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 39
  %7 = load i32, i32* %total_lines, align 4
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 10
  %9 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %9, i32 0, i32 0
  %10 = load i32, i32* %cm_curY, align 4
  %sub1 = sub nsw i32 %7, %10
  call void @tputs(i8* %3, i32 %sub1, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %insert_mode2 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 72
  %bf.load3 = load i8, i8* %insert_mode2, align 8
  %bf.clear4 = and i8 %bf.load3, -5
  store i8 %bf.clear4, i8* %insert_mode2, align 8
  ret void
}

declare void @tputs(i8*, i32, i32 (i32)*) #1

declare i32 @cmputc(i32) #1

; Function Attrs: nounwind uwtable
define i8* @encode_terminal_code(%struct.glyph* %src, i32 %src_len, %struct.coding_system* %coding) #0 {
entry:
  %retval = alloca i8*, align 8
  %src.addr = alloca %struct.glyph*, align 8
  %src_len.addr = alloca i32, align 4
  %coding.addr = alloca %struct.coding_system*, align 8
  %src_end = alloca %struct.glyph*, align 8
  %buf = alloca i8*, align 8
  %nchars = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %required = alloca i64, align 8
  %tlen = alloca i64, align 8
  %tbase = alloca i64*, align 8
  %charset_list = alloca i64, align 8
  %cmp2212 = alloca %struct.composition*, align 8
  %gstring = alloca i64, align 8
  %i = alloca i32, align 4
  %g = alloca i64, align 8
  %c = alloca i32, align 4
  %c2336 = alloca i32, align 4
  %g2526 = alloca %struct.GLYPH, align 4
  %c2527 = alloca i32, align 4
  %string = alloca i64, align 8
  store %struct.glyph* %src, %struct.glyph** %src.addr, align 8
  store i32 %src_len, i32* %src_len.addr, align 4
  store %struct.coding_system* %coding, %struct.coding_system** %coding.addr, align 8
  %0 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %1 = load i32, i32* %src_len.addr, align 4
  %idx.ext = sext i32 %1 to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %0, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %src_end, align 8
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call = call zeroext i1 @VECTORP(i64 %2)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call1 = call i64 @ASIZE(i64 %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %tlen, align 8
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call2 = call zeroext i1 @VECTORP(i64 %4)
  br i1 %call2, label %cond.true.3, label %cond.false.5

cond.true.3:                                      ; preds = %cond.end
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 118), align 8
  %call4 = call %struct.Lisp_Vector* @XVECTOR(i64 %5)
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call4, i32 0, i32 1
  %arraydecay = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i32 0
  br label %cond.end.6

cond.false.5:                                     ; preds = %cond.end
  br label %cond.end.6

cond.end.6:                                       ; preds = %cond.false.5, %cond.true.3
  %cond7 = phi i64* [ %arraydecay, %cond.true.3 ], [ null, %cond.false.5 ]
  store i64* %cond7, i64** %tbase, align 8
  br i1 false, label %cond.true.8, label %cond.false.479

cond.true.8:                                      ; preds = %cond.end.6
  br i1 false, label %cond.true.9, label %cond.false.267

cond.true.9:                                      ; preds = %cond.true.8
  %6 = load i32, i32* %src_len.addr, align 4
  %conv = trunc i32 %6 to i8
  %conv10 = sext i8 %conv to i32
  %add = add nsw i32 0, %conv10
  %mul = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul, 1
  %cmp = icmp slt i32 %sub, 0
  br i1 %cmp, label %cond.true.12, label %cond.false.30

cond.true.12:                                     ; preds = %cond.true.9
  %7 = load i32, i32* %src_len.addr, align 4
  %conv13 = trunc i32 %7 to i8
  %conv14 = sext i8 %conv13 to i32
  %add15 = add nsw i32 0, %conv14
  %mul16 = mul nsw i32 0, %add15
  %add17 = add nsw i32 %mul16, 0
  %neg = xor i32 %add17, -1
  %cmp18 = icmp eq i32 %neg, -1
  %conv19 = zext i1 %cmp18 to i32
  %sub20 = sub nsw i32 0, %conv19
  %8 = load i32, i32* %src_len.addr, align 4
  %conv21 = trunc i32 %8 to i8
  %conv22 = sext i8 %conv21 to i32
  %add23 = add nsw i32 0, %conv22
  %mul24 = mul nsw i32 0, %add23
  %add25 = add nsw i32 %mul24, 1
  %shl = shl i32 %add25, 30
  %sub26 = sub nsw i32 %shl, 1
  %mul27 = mul nsw i32 %sub26, 2
  %add28 = add nsw i32 %mul27, 1
  %sub29 = sub nsw i32 %sub20, %add28
  br label %cond.end.36

cond.false.30:                                    ; preds = %cond.true.9
  %9 = load i32, i32* %src_len.addr, align 4
  %conv31 = trunc i32 %9 to i8
  %conv32 = sext i8 %conv31 to i32
  %add33 = add nsw i32 0, %conv32
  %mul34 = mul nsw i32 0, %add33
  %add35 = add nsw i32 %mul34, 0
  br label %cond.end.36

cond.end.36:                                      ; preds = %cond.false.30, %cond.true.12
  %cond37 = phi i32 [ %sub29, %cond.true.12 ], [ %add35, %cond.false.30 ]
  %cmp38 = icmp eq i32 %cond37, 0
  br i1 %cmp38, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end.36
  %10 = load i32, i32* %src_len.addr, align 4
  %conv40 = trunc i32 %10 to i8
  %conv41 = sext i8 %conv40 to i32
  %cmp42 = icmp slt i32 %conv41, 0
  br i1 %cmp42, label %cond.true.221, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end.36
  br i1 false, label %cond.true.44, label %cond.false.122

cond.true.44:                                     ; preds = %lor.lhs.false
  %11 = load i32, i32* %src_len.addr, align 4
  %conv45 = trunc i32 %11 to i8
  %conv46 = sext i8 %conv45 to i32
  %cmp47 = icmp slt i32 %conv46, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.79

cond.true.49:                                     ; preds = %cond.true.44
  %12 = load i32, i32* %src_len.addr, align 4
  %conv50 = trunc i32 %12 to i8
  %conv51 = sext i8 %conv50 to i32
  %13 = load i32, i32* %src_len.addr, align 4
  %conv52 = trunc i32 %13 to i8
  %conv53 = sext i8 %conv52 to i32
  %add54 = add nsw i32 0, %conv53
  %mul55 = mul nsw i32 0, %add54
  %sub56 = sub nsw i32 %mul55, 1
  %cmp57 = icmp slt i32 %sub56, 0
  br i1 %cmp57, label %cond.true.59, label %cond.false.69

cond.true.59:                                     ; preds = %cond.true.49
  %14 = load i32, i32* %src_len.addr, align 4
  %conv60 = trunc i32 %14 to i8
  %conv61 = sext i8 %conv60 to i32
  %add62 = add nsw i32 0, %conv61
  %mul63 = mul nsw i32 0, %add62
  %add64 = add nsw i32 %mul63, 1
  %shl65 = shl i32 %add64, 30
  %sub66 = sub nsw i32 %shl65, 1
  %mul67 = mul nsw i32 %sub66, 2
  %add68 = add nsw i32 %mul67, 1
  br label %cond.end.75

cond.false.69:                                    ; preds = %cond.true.49
  %15 = load i32, i32* %src_len.addr, align 4
  %conv70 = trunc i32 %15 to i8
  %conv71 = sext i8 %conv70 to i32
  %add72 = add nsw i32 0, %conv71
  %mul73 = mul nsw i32 0, %add72
  %sub74 = sub nsw i32 %mul73, 1
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.69, %cond.true.59
  %cond76 = phi i32 [ %add68, %cond.true.59 ], [ %sub74, %cond.false.69 ]
  %div = sdiv i32 %cond76, 5
  %cmp77 = icmp slt i32 %conv51, %div
  br i1 %cmp77, label %cond.true.221, label %lor.lhs.false.201

cond.false.79:                                    ; preds = %cond.true.44
  br i1 false, label %cond.true.80, label %cond.false.81

cond.true.80:                                     ; preds = %cond.false.79
  br i1 false, label %cond.true.221, label %lor.lhs.false.201

cond.false.81:                                    ; preds = %cond.false.79
  %16 = load i32, i32* %src_len.addr, align 4
  %conv82 = trunc i32 %16 to i8
  %conv83 = sext i8 %conv82 to i32
  %add84 = add nsw i32 0, %conv83
  %mul85 = mul nsw i32 0, %add84
  %sub86 = sub nsw i32 %mul85, 1
  %cmp87 = icmp slt i32 %sub86, 0
  br i1 %cmp87, label %cond.true.89, label %cond.false.109

cond.true.89:                                     ; preds = %cond.false.81
  %17 = load i32, i32* %src_len.addr, align 4
  %conv90 = trunc i32 %17 to i8
  %conv91 = sext i8 %conv90 to i32
  %add92 = add nsw i32 0, %conv91
  %mul93 = mul nsw i32 0, %add92
  %add94 = add nsw i32 %mul93, 0
  %neg95 = xor i32 %add94, -1
  %cmp96 = icmp eq i32 %neg95, -1
  %conv97 = zext i1 %cmp96 to i32
  %sub98 = sub nsw i32 0, %conv97
  %18 = load i32, i32* %src_len.addr, align 4
  %conv99 = trunc i32 %18 to i8
  %conv100 = sext i8 %conv99 to i32
  %add101 = add nsw i32 0, %conv100
  %mul102 = mul nsw i32 0, %add101
  %add103 = add nsw i32 %mul102, 1
  %shl104 = shl i32 %add103, 30
  %sub105 = sub nsw i32 %shl104, 1
  %mul106 = mul nsw i32 %sub105, 2
  %add107 = add nsw i32 %mul106, 1
  %sub108 = sub nsw i32 %sub98, %add107
  br label %cond.end.115

cond.false.109:                                   ; preds = %cond.false.81
  %19 = load i32, i32* %src_len.addr, align 4
  %conv110 = trunc i32 %19 to i8
  %conv111 = sext i8 %conv110 to i32
  %add112 = add nsw i32 0, %conv111
  %mul113 = mul nsw i32 0, %add112
  %add114 = add nsw i32 %mul113, 0
  br label %cond.end.115

cond.end.115:                                     ; preds = %cond.false.109, %cond.true.89
  %cond116 = phi i32 [ %sub108, %cond.true.89 ], [ %add114, %cond.false.109 ]
  %div117 = sdiv i32 %cond116, 5
  %20 = load i32, i32* %src_len.addr, align 4
  %conv118 = trunc i32 %20 to i8
  %conv119 = sext i8 %conv118 to i32
  %cmp120 = icmp slt i32 %div117, %conv119
  br i1 %cmp120, label %cond.true.221, label %lor.lhs.false.201

cond.false.122:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.123, label %cond.false.124

cond.true.123:                                    ; preds = %cond.false.122
  br i1 false, label %cond.true.221, label %lor.lhs.false.201

cond.false.124:                                   ; preds = %cond.false.122
  %21 = load i32, i32* %src_len.addr, align 4
  %conv125 = trunc i32 %21 to i8
  %conv126 = sext i8 %conv125 to i32
  %cmp127 = icmp slt i32 %conv126, 0
  br i1 %cmp127, label %cond.true.129, label %cond.false.170

cond.true.129:                                    ; preds = %cond.false.124
  %22 = load i32, i32* %src_len.addr, align 4
  %conv130 = trunc i32 %22 to i8
  %conv131 = sext i8 %conv130 to i32
  %23 = load i32, i32* %src_len.addr, align 4
  %conv132 = trunc i32 %23 to i8
  %conv133 = sext i8 %conv132 to i32
  %add134 = add nsw i32 0, %conv133
  %mul135 = mul nsw i32 0, %add134
  %sub136 = sub nsw i32 %mul135, 1
  %cmp137 = icmp slt i32 %sub136, 0
  br i1 %cmp137, label %cond.true.139, label %cond.false.159

cond.true.139:                                    ; preds = %cond.true.129
  %24 = load i32, i32* %src_len.addr, align 4
  %conv140 = trunc i32 %24 to i8
  %conv141 = sext i8 %conv140 to i32
  %add142 = add nsw i32 0, %conv141
  %mul143 = mul nsw i32 0, %add142
  %add144 = add nsw i32 %mul143, 0
  %neg145 = xor i32 %add144, -1
  %cmp146 = icmp eq i32 %neg145, -1
  %conv147 = zext i1 %cmp146 to i32
  %sub148 = sub nsw i32 0, %conv147
  %25 = load i32, i32* %src_len.addr, align 4
  %conv149 = trunc i32 %25 to i8
  %conv150 = sext i8 %conv149 to i32
  %add151 = add nsw i32 0, %conv150
  %mul152 = mul nsw i32 0, %add151
  %add153 = add nsw i32 %mul152, 1
  %shl154 = shl i32 %add153, 30
  %sub155 = sub nsw i32 %shl154, 1
  %mul156 = mul nsw i32 %sub155, 2
  %add157 = add nsw i32 %mul156, 1
  %sub158 = sub nsw i32 %sub148, %add157
  br label %cond.end.165

cond.false.159:                                   ; preds = %cond.true.129
  %26 = load i32, i32* %src_len.addr, align 4
  %conv160 = trunc i32 %26 to i8
  %conv161 = sext i8 %conv160 to i32
  %add162 = add nsw i32 0, %conv161
  %mul163 = mul nsw i32 0, %add162
  %add164 = add nsw i32 %mul163, 0
  br label %cond.end.165

cond.end.165:                                     ; preds = %cond.false.159, %cond.true.139
  %cond166 = phi i32 [ %sub158, %cond.true.139 ], [ %add164, %cond.false.159 ]
  %div167 = sdiv i32 %cond166, 5
  %cmp168 = icmp slt i32 %conv131, %div167
  br i1 %cmp168, label %cond.true.221, label %lor.lhs.false.201

cond.false.170:                                   ; preds = %cond.false.124
  %27 = load i32, i32* %src_len.addr, align 4
  %conv171 = trunc i32 %27 to i8
  %conv172 = sext i8 %conv171 to i32
  %add173 = add nsw i32 0, %conv172
  %mul174 = mul nsw i32 0, %add173
  %sub175 = sub nsw i32 %mul174, 1
  %cmp176 = icmp slt i32 %sub175, 0
  br i1 %cmp176, label %cond.true.178, label %cond.false.188

cond.true.178:                                    ; preds = %cond.false.170
  %28 = load i32, i32* %src_len.addr, align 4
  %conv179 = trunc i32 %28 to i8
  %conv180 = sext i8 %conv179 to i32
  %add181 = add nsw i32 0, %conv180
  %mul182 = mul nsw i32 0, %add181
  %add183 = add nsw i32 %mul182, 1
  %shl184 = shl i32 %add183, 30
  %sub185 = sub nsw i32 %shl184, 1
  %mul186 = mul nsw i32 %sub185, 2
  %add187 = add nsw i32 %mul186, 1
  br label %cond.end.194

cond.false.188:                                   ; preds = %cond.false.170
  %29 = load i32, i32* %src_len.addr, align 4
  %conv189 = trunc i32 %29 to i8
  %conv190 = sext i8 %conv189 to i32
  %add191 = add nsw i32 0, %conv190
  %mul192 = mul nsw i32 0, %add191
  %sub193 = sub nsw i32 %mul192, 1
  br label %cond.end.194

cond.end.194:                                     ; preds = %cond.false.188, %cond.true.178
  %cond195 = phi i32 [ %add187, %cond.true.178 ], [ %sub193, %cond.false.188 ]
  %div196 = sdiv i32 %cond195, 5
  %30 = load i32, i32* %src_len.addr, align 4
  %conv197 = trunc i32 %30 to i8
  %conv198 = sext i8 %conv197 to i32
  %cmp199 = icmp slt i32 %div196, %conv198
  br i1 %cmp199, label %cond.true.221, label %lor.lhs.false.201

lor.lhs.false.201:                                ; preds = %cond.end.194, %cond.end.165, %cond.true.123, %cond.end.115, %cond.true.80, %cond.end.75
  %31 = load i32, i32* %src_len.addr, align 4
  %conv202 = trunc i32 %31 to i8
  %conv203 = sext i8 %conv202 to i32
  %mul204 = mul nsw i32 %conv203, 5
  %mul205 = mul nsw i32 0, %mul204
  %sub206 = sub nsw i32 %mul205, 1
  %cmp207 = icmp slt i32 %sub206, 0
  br i1 %cmp207, label %land.lhs.true.209, label %lor.lhs.false.215

land.lhs.true.209:                                ; preds = %lor.lhs.false.201
  %32 = load i32, i32* %src_len.addr, align 4
  %conv210 = trunc i32 %32 to i8
  %conv211 = sext i8 %conv210 to i32
  %mul212 = mul nsw i32 %conv211, 5
  %cmp213 = icmp slt i32 %mul212, -128
  br i1 %cmp213, label %cond.true.221, label %lor.lhs.false.215

lor.lhs.false.215:                                ; preds = %land.lhs.true.209, %lor.lhs.false.201
  %33 = load i32, i32* %src_len.addr, align 4
  %conv216 = trunc i32 %33 to i8
  %conv217 = sext i8 %conv216 to i32
  %mul218 = mul nsw i32 %conv217, 5
  %cmp219 = icmp slt i32 127, %mul218
  br i1 %cmp219, label %cond.true.221, label %cond.false.244

cond.true.221:                                    ; preds = %lor.lhs.false.215, %land.lhs.true.209, %cond.end.194, %cond.end.165, %cond.true.123, %cond.end.115, %cond.true.80, %cond.end.75, %land.lhs.true
  %34 = load i32, i32* %src_len.addr, align 4
  %conv222 = trunc i32 %34 to i8
  %conv223 = zext i8 %conv222 to i32
  %mul224 = mul nsw i32 %conv223, 5
  %cmp225 = icmp sle i32 %mul224, 127
  br i1 %cmp225, label %cond.true.227, label %cond.false.233

cond.true.227:                                    ; preds = %cond.true.221
  %35 = load i32, i32* %src_len.addr, align 4
  %conv228 = trunc i32 %35 to i8
  %conv229 = zext i8 %conv228 to i32
  %mul230 = mul nsw i32 %conv229, 5
  %conv231 = trunc i32 %mul230 to i8
  %conv232 = sext i8 %conv231 to i32
  br label %cond.end.241

cond.false.233:                                   ; preds = %cond.true.221
  %36 = load i32, i32* %src_len.addr, align 4
  %conv234 = trunc i32 %36 to i8
  %conv235 = zext i8 %conv234 to i32
  %mul236 = mul nsw i32 %conv235, 5
  %sub237 = sub nsw i32 %mul236, -128
  %conv238 = trunc i32 %sub237 to i8
  %conv239 = sext i8 %conv238 to i32
  %add240 = add nsw i32 %conv239, -128
  br label %cond.end.241

cond.end.241:                                     ; preds = %cond.false.233, %cond.true.227
  %cond242 = phi i32 [ %conv232, %cond.true.227 ], [ %add240, %cond.false.233 ]
  %conv243 = sext i32 %cond242 to i64
  store i64 %conv243, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.244:                                   ; preds = %lor.lhs.false.215
  %37 = load i32, i32* %src_len.addr, align 4
  %conv245 = trunc i32 %37 to i8
  %conv246 = zext i8 %conv245 to i32
  %mul247 = mul nsw i32 %conv246, 5
  %cmp248 = icmp sle i32 %mul247, 127
  br i1 %cmp248, label %cond.true.250, label %cond.false.256

cond.true.250:                                    ; preds = %cond.false.244
  %38 = load i32, i32* %src_len.addr, align 4
  %conv251 = trunc i32 %38 to i8
  %conv252 = zext i8 %conv251 to i32
  %mul253 = mul nsw i32 %conv252, 5
  %conv254 = trunc i32 %mul253 to i8
  %conv255 = sext i8 %conv254 to i32
  br label %cond.end.264

cond.false.256:                                   ; preds = %cond.false.244
  %39 = load i32, i32* %src_len.addr, align 4
  %conv257 = trunc i32 %39 to i8
  %conv258 = zext i8 %conv257 to i32
  %mul259 = mul nsw i32 %conv258, 5
  %sub260 = sub nsw i32 %mul259, -128
  %conv261 = trunc i32 %sub260 to i8
  %conv262 = sext i8 %conv261 to i32
  %add263 = add nsw i32 %conv262, -128
  br label %cond.end.264

cond.end.264:                                     ; preds = %cond.false.256, %cond.true.250
  %cond265 = phi i32 [ %conv255, %cond.true.250 ], [ %add263, %cond.false.256 ]
  %conv266 = sext i32 %cond265 to i64
  store i64 %conv266, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.267:                                   ; preds = %cond.true.8
  %40 = load i32, i32* %src_len.addr, align 4
  %add268 = add nsw i32 0, %40
  %mul269 = mul nsw i32 0, %add268
  %sub270 = sub nsw i32 %mul269, 1
  %cmp271 = icmp slt i32 %sub270, 0
  br i1 %cmp271, label %cond.true.273, label %cond.false.289

cond.true.273:                                    ; preds = %cond.false.267
  %41 = load i32, i32* %src_len.addr, align 4
  %add274 = add nsw i32 0, %41
  %mul275 = mul nsw i32 0, %add274
  %add276 = add nsw i32 %mul275, 0
  %neg277 = xor i32 %add276, -1
  %cmp278 = icmp eq i32 %neg277, -1
  %conv279 = zext i1 %cmp278 to i32
  %sub280 = sub nsw i32 0, %conv279
  %42 = load i32, i32* %src_len.addr, align 4
  %add281 = add nsw i32 0, %42
  %mul282 = mul nsw i32 0, %add281
  %add283 = add nsw i32 %mul282, 1
  %shl284 = shl i32 %add283, 30
  %sub285 = sub nsw i32 %shl284, 1
  %mul286 = mul nsw i32 %sub285, 2
  %add287 = add nsw i32 %mul286, 1
  %sub288 = sub nsw i32 %sub280, %add287
  br label %cond.end.293

cond.false.289:                                   ; preds = %cond.false.267
  %43 = load i32, i32* %src_len.addr, align 4
  %add290 = add nsw i32 0, %43
  %mul291 = mul nsw i32 0, %add290
  %add292 = add nsw i32 %mul291, 0
  br label %cond.end.293

cond.end.293:                                     ; preds = %cond.false.289, %cond.true.273
  %cond294 = phi i32 [ %sub288, %cond.true.273 ], [ %add292, %cond.false.289 ]
  %cmp295 = icmp eq i32 %cond294, 0
  br i1 %cmp295, label %land.lhs.true.297, label %lor.lhs.false.300

land.lhs.true.297:                                ; preds = %cond.end.293
  %44 = load i32, i32* %src_len.addr, align 4
  %cmp298 = icmp slt i32 %44, 0
  br i1 %cmp298, label %cond.true.433, label %lor.lhs.false.300

lor.lhs.false.300:                                ; preds = %land.lhs.true.297, %cond.end.293
  br i1 false, label %cond.true.301, label %cond.false.360

cond.true.301:                                    ; preds = %lor.lhs.false.300
  %45 = load i32, i32* %src_len.addr, align 4
  %cmp302 = icmp slt i32 %45, 0
  br i1 %cmp302, label %cond.true.304, label %cond.false.327

cond.true.304:                                    ; preds = %cond.true.301
  %46 = load i32, i32* %src_len.addr, align 4
  %47 = load i32, i32* %src_len.addr, align 4
  %add305 = add nsw i32 0, %47
  %mul306 = mul nsw i32 0, %add305
  %sub307 = sub nsw i32 %mul306, 1
  %cmp308 = icmp slt i32 %sub307, 0
  br i1 %cmp308, label %cond.true.310, label %cond.false.318

cond.true.310:                                    ; preds = %cond.true.304
  %48 = load i32, i32* %src_len.addr, align 4
  %add311 = add nsw i32 0, %48
  %mul312 = mul nsw i32 0, %add311
  %add313 = add nsw i32 %mul312, 1
  %shl314 = shl i32 %add313, 30
  %sub315 = sub nsw i32 %shl314, 1
  %mul316 = mul nsw i32 %sub315, 2
  %add317 = add nsw i32 %mul316, 1
  br label %cond.end.322

cond.false.318:                                   ; preds = %cond.true.304
  %49 = load i32, i32* %src_len.addr, align 4
  %add319 = add nsw i32 0, %49
  %mul320 = mul nsw i32 0, %add319
  %sub321 = sub nsw i32 %mul320, 1
  br label %cond.end.322

cond.end.322:                                     ; preds = %cond.false.318, %cond.true.310
  %cond323 = phi i32 [ %add317, %cond.true.310 ], [ %sub321, %cond.false.318 ]
  %div324 = sdiv i32 %cond323, 5
  %cmp325 = icmp slt i32 %46, %div324
  br i1 %cmp325, label %cond.true.433, label %lor.lhs.false.419

cond.false.327:                                   ; preds = %cond.true.301
  br i1 false, label %cond.true.328, label %cond.false.329

cond.true.328:                                    ; preds = %cond.false.327
  br i1 false, label %cond.true.433, label %lor.lhs.false.419

cond.false.329:                                   ; preds = %cond.false.327
  %50 = load i32, i32* %src_len.addr, align 4
  %add330 = add nsw i32 0, %50
  %mul331 = mul nsw i32 0, %add330
  %sub332 = sub nsw i32 %mul331, 1
  %cmp333 = icmp slt i32 %sub332, 0
  br i1 %cmp333, label %cond.true.335, label %cond.false.351

cond.true.335:                                    ; preds = %cond.false.329
  %51 = load i32, i32* %src_len.addr, align 4
  %add336 = add nsw i32 0, %51
  %mul337 = mul nsw i32 0, %add336
  %add338 = add nsw i32 %mul337, 0
  %neg339 = xor i32 %add338, -1
  %cmp340 = icmp eq i32 %neg339, -1
  %conv341 = zext i1 %cmp340 to i32
  %sub342 = sub nsw i32 0, %conv341
  %52 = load i32, i32* %src_len.addr, align 4
  %add343 = add nsw i32 0, %52
  %mul344 = mul nsw i32 0, %add343
  %add345 = add nsw i32 %mul344, 1
  %shl346 = shl i32 %add345, 30
  %sub347 = sub nsw i32 %shl346, 1
  %mul348 = mul nsw i32 %sub347, 2
  %add349 = add nsw i32 %mul348, 1
  %sub350 = sub nsw i32 %sub342, %add349
  br label %cond.end.355

cond.false.351:                                   ; preds = %cond.false.329
  %53 = load i32, i32* %src_len.addr, align 4
  %add352 = add nsw i32 0, %53
  %mul353 = mul nsw i32 0, %add352
  %add354 = add nsw i32 %mul353, 0
  br label %cond.end.355

cond.end.355:                                     ; preds = %cond.false.351, %cond.true.335
  %cond356 = phi i32 [ %sub350, %cond.true.335 ], [ %add354, %cond.false.351 ]
  %div357 = sdiv i32 %cond356, 5
  %54 = load i32, i32* %src_len.addr, align 4
  %cmp358 = icmp slt i32 %div357, %54
  br i1 %cmp358, label %cond.true.433, label %lor.lhs.false.419

cond.false.360:                                   ; preds = %lor.lhs.false.300
  br i1 false, label %cond.true.361, label %cond.false.362

cond.true.361:                                    ; preds = %cond.false.360
  br i1 false, label %cond.true.433, label %lor.lhs.false.419

cond.false.362:                                   ; preds = %cond.false.360
  %55 = load i32, i32* %src_len.addr, align 4
  %cmp363 = icmp slt i32 %55, 0
  br i1 %cmp363, label %cond.true.365, label %cond.false.396

cond.true.365:                                    ; preds = %cond.false.362
  %56 = load i32, i32* %src_len.addr, align 4
  %57 = load i32, i32* %src_len.addr, align 4
  %add366 = add nsw i32 0, %57
  %mul367 = mul nsw i32 0, %add366
  %sub368 = sub nsw i32 %mul367, 1
  %cmp369 = icmp slt i32 %sub368, 0
  br i1 %cmp369, label %cond.true.371, label %cond.false.387

cond.true.371:                                    ; preds = %cond.true.365
  %58 = load i32, i32* %src_len.addr, align 4
  %add372 = add nsw i32 0, %58
  %mul373 = mul nsw i32 0, %add372
  %add374 = add nsw i32 %mul373, 0
  %neg375 = xor i32 %add374, -1
  %cmp376 = icmp eq i32 %neg375, -1
  %conv377 = zext i1 %cmp376 to i32
  %sub378 = sub nsw i32 0, %conv377
  %59 = load i32, i32* %src_len.addr, align 4
  %add379 = add nsw i32 0, %59
  %mul380 = mul nsw i32 0, %add379
  %add381 = add nsw i32 %mul380, 1
  %shl382 = shl i32 %add381, 30
  %sub383 = sub nsw i32 %shl382, 1
  %mul384 = mul nsw i32 %sub383, 2
  %add385 = add nsw i32 %mul384, 1
  %sub386 = sub nsw i32 %sub378, %add385
  br label %cond.end.391

cond.false.387:                                   ; preds = %cond.true.365
  %60 = load i32, i32* %src_len.addr, align 4
  %add388 = add nsw i32 0, %60
  %mul389 = mul nsw i32 0, %add388
  %add390 = add nsw i32 %mul389, 0
  br label %cond.end.391

cond.end.391:                                     ; preds = %cond.false.387, %cond.true.371
  %cond392 = phi i32 [ %sub386, %cond.true.371 ], [ %add390, %cond.false.387 ]
  %div393 = sdiv i32 %cond392, 5
  %cmp394 = icmp slt i32 %56, %div393
  br i1 %cmp394, label %cond.true.433, label %lor.lhs.false.419

cond.false.396:                                   ; preds = %cond.false.362
  %61 = load i32, i32* %src_len.addr, align 4
  %add397 = add nsw i32 0, %61
  %mul398 = mul nsw i32 0, %add397
  %sub399 = sub nsw i32 %mul398, 1
  %cmp400 = icmp slt i32 %sub399, 0
  br i1 %cmp400, label %cond.true.402, label %cond.false.410

cond.true.402:                                    ; preds = %cond.false.396
  %62 = load i32, i32* %src_len.addr, align 4
  %add403 = add nsw i32 0, %62
  %mul404 = mul nsw i32 0, %add403
  %add405 = add nsw i32 %mul404, 1
  %shl406 = shl i32 %add405, 30
  %sub407 = sub nsw i32 %shl406, 1
  %mul408 = mul nsw i32 %sub407, 2
  %add409 = add nsw i32 %mul408, 1
  br label %cond.end.414

cond.false.410:                                   ; preds = %cond.false.396
  %63 = load i32, i32* %src_len.addr, align 4
  %add411 = add nsw i32 0, %63
  %mul412 = mul nsw i32 0, %add411
  %sub413 = sub nsw i32 %mul412, 1
  br label %cond.end.414

cond.end.414:                                     ; preds = %cond.false.410, %cond.true.402
  %cond415 = phi i32 [ %add409, %cond.true.402 ], [ %sub413, %cond.false.410 ]
  %div416 = sdiv i32 %cond415, 5
  %64 = load i32, i32* %src_len.addr, align 4
  %cmp417 = icmp slt i32 %div416, %64
  br i1 %cmp417, label %cond.true.433, label %lor.lhs.false.419

lor.lhs.false.419:                                ; preds = %cond.end.414, %cond.end.391, %cond.true.361, %cond.end.355, %cond.true.328, %cond.end.322
  %65 = load i32, i32* %src_len.addr, align 4
  %mul420 = mul nsw i32 %65, 5
  %mul421 = mul nsw i32 0, %mul420
  %sub422 = sub nsw i32 %mul421, 1
  %cmp423 = icmp slt i32 %sub422, 0
  br i1 %cmp423, label %land.lhs.true.425, label %lor.lhs.false.429

land.lhs.true.425:                                ; preds = %lor.lhs.false.419
  %66 = load i32, i32* %src_len.addr, align 4
  %mul426 = mul nsw i32 %66, 5
  %cmp427 = icmp slt i32 %mul426, -128
  br i1 %cmp427, label %cond.true.433, label %lor.lhs.false.429

lor.lhs.false.429:                                ; preds = %land.lhs.true.425, %lor.lhs.false.419
  %67 = load i32, i32* %src_len.addr, align 4
  %mul430 = mul nsw i32 %67, 5
  %cmp431 = icmp slt i32 127, %mul430
  br i1 %cmp431, label %cond.true.433, label %cond.false.456

cond.true.433:                                    ; preds = %lor.lhs.false.429, %land.lhs.true.425, %cond.end.414, %cond.end.391, %cond.true.361, %cond.end.355, %cond.true.328, %cond.end.322, %land.lhs.true.297
  %68 = load i32, i32* %src_len.addr, align 4
  %conv434 = trunc i32 %68 to i8
  %conv435 = zext i8 %conv434 to i32
  %mul436 = mul nsw i32 %conv435, 5
  %cmp437 = icmp sle i32 %mul436, 127
  br i1 %cmp437, label %cond.true.439, label %cond.false.445

cond.true.439:                                    ; preds = %cond.true.433
  %69 = load i32, i32* %src_len.addr, align 4
  %conv440 = trunc i32 %69 to i8
  %conv441 = zext i8 %conv440 to i32
  %mul442 = mul nsw i32 %conv441, 5
  %conv443 = trunc i32 %mul442 to i8
  %conv444 = sext i8 %conv443 to i32
  br label %cond.end.453

cond.false.445:                                   ; preds = %cond.true.433
  %70 = load i32, i32* %src_len.addr, align 4
  %conv446 = trunc i32 %70 to i8
  %conv447 = zext i8 %conv446 to i32
  %mul448 = mul nsw i32 %conv447, 5
  %sub449 = sub nsw i32 %mul448, -128
  %conv450 = trunc i32 %sub449 to i8
  %conv451 = sext i8 %conv450 to i32
  %add452 = add nsw i32 %conv451, -128
  br label %cond.end.453

cond.end.453:                                     ; preds = %cond.false.445, %cond.true.439
  %cond454 = phi i32 [ %conv444, %cond.true.439 ], [ %add452, %cond.false.445 ]
  %conv455 = sext i32 %cond454 to i64
  store i64 %conv455, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.456:                                   ; preds = %lor.lhs.false.429
  %71 = load i32, i32* %src_len.addr, align 4
  %conv457 = trunc i32 %71 to i8
  %conv458 = zext i8 %conv457 to i32
  %mul459 = mul nsw i32 %conv458, 5
  %cmp460 = icmp sle i32 %mul459, 127
  br i1 %cmp460, label %cond.true.462, label %cond.false.468

cond.true.462:                                    ; preds = %cond.false.456
  %72 = load i32, i32* %src_len.addr, align 4
  %conv463 = trunc i32 %72 to i8
  %conv464 = zext i8 %conv463 to i32
  %mul465 = mul nsw i32 %conv464, 5
  %conv466 = trunc i32 %mul465 to i8
  %conv467 = sext i8 %conv466 to i32
  br label %cond.end.476

cond.false.468:                                   ; preds = %cond.false.456
  %73 = load i32, i32* %src_len.addr, align 4
  %conv469 = trunc i32 %73 to i8
  %conv470 = zext i8 %conv469 to i32
  %mul471 = mul nsw i32 %conv470, 5
  %sub472 = sub nsw i32 %mul471, -128
  %conv473 = trunc i32 %sub472 to i8
  %conv474 = sext i8 %conv473 to i32
  %add475 = add nsw i32 %conv474, -128
  br label %cond.end.476

cond.end.476:                                     ; preds = %cond.false.468, %cond.true.462
  %cond477 = phi i32 [ %conv467, %cond.true.462 ], [ %add475, %cond.false.468 ]
  %conv478 = sext i32 %cond477 to i64
  store i64 %conv478, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.479:                                   ; preds = %cond.end.6
  br i1 false, label %cond.true.480, label %cond.false.961

cond.true.480:                                    ; preds = %cond.false.479
  br i1 false, label %cond.true.481, label %cond.false.749

cond.true.481:                                    ; preds = %cond.true.480
  %74 = load i32, i32* %src_len.addr, align 4
  %conv482 = trunc i32 %74 to i16
  %conv483 = sext i16 %conv482 to i32
  %add484 = add nsw i32 0, %conv483
  %mul485 = mul nsw i32 0, %add484
  %sub486 = sub nsw i32 %mul485, 1
  %cmp487 = icmp slt i32 %sub486, 0
  br i1 %cmp487, label %cond.true.489, label %cond.false.509

cond.true.489:                                    ; preds = %cond.true.481
  %75 = load i32, i32* %src_len.addr, align 4
  %conv490 = trunc i32 %75 to i16
  %conv491 = sext i16 %conv490 to i32
  %add492 = add nsw i32 0, %conv491
  %mul493 = mul nsw i32 0, %add492
  %add494 = add nsw i32 %mul493, 0
  %neg495 = xor i32 %add494, -1
  %cmp496 = icmp eq i32 %neg495, -1
  %conv497 = zext i1 %cmp496 to i32
  %sub498 = sub nsw i32 0, %conv497
  %76 = load i32, i32* %src_len.addr, align 4
  %conv499 = trunc i32 %76 to i16
  %conv500 = sext i16 %conv499 to i32
  %add501 = add nsw i32 0, %conv500
  %mul502 = mul nsw i32 0, %add501
  %add503 = add nsw i32 %mul502, 1
  %shl504 = shl i32 %add503, 30
  %sub505 = sub nsw i32 %shl504, 1
  %mul506 = mul nsw i32 %sub505, 2
  %add507 = add nsw i32 %mul506, 1
  %sub508 = sub nsw i32 %sub498, %add507
  br label %cond.end.515

cond.false.509:                                   ; preds = %cond.true.481
  %77 = load i32, i32* %src_len.addr, align 4
  %conv510 = trunc i32 %77 to i16
  %conv511 = sext i16 %conv510 to i32
  %add512 = add nsw i32 0, %conv511
  %mul513 = mul nsw i32 0, %add512
  %add514 = add nsw i32 %mul513, 0
  br label %cond.end.515

cond.end.515:                                     ; preds = %cond.false.509, %cond.true.489
  %cond516 = phi i32 [ %sub508, %cond.true.489 ], [ %add514, %cond.false.509 ]
  %cmp517 = icmp eq i32 %cond516, 0
  br i1 %cmp517, label %land.lhs.true.519, label %lor.lhs.false.524

land.lhs.true.519:                                ; preds = %cond.end.515
  %78 = load i32, i32* %src_len.addr, align 4
  %conv520 = trunc i32 %78 to i16
  %conv521 = sext i16 %conv520 to i32
  %cmp522 = icmp slt i32 %conv521, 0
  br i1 %cmp522, label %cond.true.703, label %lor.lhs.false.524

lor.lhs.false.524:                                ; preds = %land.lhs.true.519, %cond.end.515
  br i1 false, label %cond.true.525, label %cond.false.604

cond.true.525:                                    ; preds = %lor.lhs.false.524
  %79 = load i32, i32* %src_len.addr, align 4
  %conv526 = trunc i32 %79 to i16
  %conv527 = sext i16 %conv526 to i32
  %cmp528 = icmp slt i32 %conv527, 0
  br i1 %cmp528, label %cond.true.530, label %cond.false.561

cond.true.530:                                    ; preds = %cond.true.525
  %80 = load i32, i32* %src_len.addr, align 4
  %conv531 = trunc i32 %80 to i16
  %conv532 = sext i16 %conv531 to i32
  %81 = load i32, i32* %src_len.addr, align 4
  %conv533 = trunc i32 %81 to i16
  %conv534 = sext i16 %conv533 to i32
  %add535 = add nsw i32 0, %conv534
  %mul536 = mul nsw i32 0, %add535
  %sub537 = sub nsw i32 %mul536, 1
  %cmp538 = icmp slt i32 %sub537, 0
  br i1 %cmp538, label %cond.true.540, label %cond.false.550

cond.true.540:                                    ; preds = %cond.true.530
  %82 = load i32, i32* %src_len.addr, align 4
  %conv541 = trunc i32 %82 to i16
  %conv542 = sext i16 %conv541 to i32
  %add543 = add nsw i32 0, %conv542
  %mul544 = mul nsw i32 0, %add543
  %add545 = add nsw i32 %mul544, 1
  %shl546 = shl i32 %add545, 30
  %sub547 = sub nsw i32 %shl546, 1
  %mul548 = mul nsw i32 %sub547, 2
  %add549 = add nsw i32 %mul548, 1
  br label %cond.end.556

cond.false.550:                                   ; preds = %cond.true.530
  %83 = load i32, i32* %src_len.addr, align 4
  %conv551 = trunc i32 %83 to i16
  %conv552 = sext i16 %conv551 to i32
  %add553 = add nsw i32 0, %conv552
  %mul554 = mul nsw i32 0, %add553
  %sub555 = sub nsw i32 %mul554, 1
  br label %cond.end.556

cond.end.556:                                     ; preds = %cond.false.550, %cond.true.540
  %cond557 = phi i32 [ %add549, %cond.true.540 ], [ %sub555, %cond.false.550 ]
  %div558 = sdiv i32 %cond557, 5
  %cmp559 = icmp slt i32 %conv532, %div558
  br i1 %cmp559, label %cond.true.703, label %lor.lhs.false.683

cond.false.561:                                   ; preds = %cond.true.525
  br i1 false, label %cond.true.562, label %cond.false.563

cond.true.562:                                    ; preds = %cond.false.561
  br i1 false, label %cond.true.703, label %lor.lhs.false.683

cond.false.563:                                   ; preds = %cond.false.561
  %84 = load i32, i32* %src_len.addr, align 4
  %conv564 = trunc i32 %84 to i16
  %conv565 = sext i16 %conv564 to i32
  %add566 = add nsw i32 0, %conv565
  %mul567 = mul nsw i32 0, %add566
  %sub568 = sub nsw i32 %mul567, 1
  %cmp569 = icmp slt i32 %sub568, 0
  br i1 %cmp569, label %cond.true.571, label %cond.false.591

cond.true.571:                                    ; preds = %cond.false.563
  %85 = load i32, i32* %src_len.addr, align 4
  %conv572 = trunc i32 %85 to i16
  %conv573 = sext i16 %conv572 to i32
  %add574 = add nsw i32 0, %conv573
  %mul575 = mul nsw i32 0, %add574
  %add576 = add nsw i32 %mul575, 0
  %neg577 = xor i32 %add576, -1
  %cmp578 = icmp eq i32 %neg577, -1
  %conv579 = zext i1 %cmp578 to i32
  %sub580 = sub nsw i32 0, %conv579
  %86 = load i32, i32* %src_len.addr, align 4
  %conv581 = trunc i32 %86 to i16
  %conv582 = sext i16 %conv581 to i32
  %add583 = add nsw i32 0, %conv582
  %mul584 = mul nsw i32 0, %add583
  %add585 = add nsw i32 %mul584, 1
  %shl586 = shl i32 %add585, 30
  %sub587 = sub nsw i32 %shl586, 1
  %mul588 = mul nsw i32 %sub587, 2
  %add589 = add nsw i32 %mul588, 1
  %sub590 = sub nsw i32 %sub580, %add589
  br label %cond.end.597

cond.false.591:                                   ; preds = %cond.false.563
  %87 = load i32, i32* %src_len.addr, align 4
  %conv592 = trunc i32 %87 to i16
  %conv593 = sext i16 %conv592 to i32
  %add594 = add nsw i32 0, %conv593
  %mul595 = mul nsw i32 0, %add594
  %add596 = add nsw i32 %mul595, 0
  br label %cond.end.597

cond.end.597:                                     ; preds = %cond.false.591, %cond.true.571
  %cond598 = phi i32 [ %sub590, %cond.true.571 ], [ %add596, %cond.false.591 ]
  %div599 = sdiv i32 %cond598, 5
  %88 = load i32, i32* %src_len.addr, align 4
  %conv600 = trunc i32 %88 to i16
  %conv601 = sext i16 %conv600 to i32
  %cmp602 = icmp slt i32 %div599, %conv601
  br i1 %cmp602, label %cond.true.703, label %lor.lhs.false.683

cond.false.604:                                   ; preds = %lor.lhs.false.524
  br i1 false, label %cond.true.605, label %cond.false.606

cond.true.605:                                    ; preds = %cond.false.604
  br i1 false, label %cond.true.703, label %lor.lhs.false.683

cond.false.606:                                   ; preds = %cond.false.604
  %89 = load i32, i32* %src_len.addr, align 4
  %conv607 = trunc i32 %89 to i16
  %conv608 = sext i16 %conv607 to i32
  %cmp609 = icmp slt i32 %conv608, 0
  br i1 %cmp609, label %cond.true.611, label %cond.false.652

cond.true.611:                                    ; preds = %cond.false.606
  %90 = load i32, i32* %src_len.addr, align 4
  %conv612 = trunc i32 %90 to i16
  %conv613 = sext i16 %conv612 to i32
  %91 = load i32, i32* %src_len.addr, align 4
  %conv614 = trunc i32 %91 to i16
  %conv615 = sext i16 %conv614 to i32
  %add616 = add nsw i32 0, %conv615
  %mul617 = mul nsw i32 0, %add616
  %sub618 = sub nsw i32 %mul617, 1
  %cmp619 = icmp slt i32 %sub618, 0
  br i1 %cmp619, label %cond.true.621, label %cond.false.641

cond.true.621:                                    ; preds = %cond.true.611
  %92 = load i32, i32* %src_len.addr, align 4
  %conv622 = trunc i32 %92 to i16
  %conv623 = sext i16 %conv622 to i32
  %add624 = add nsw i32 0, %conv623
  %mul625 = mul nsw i32 0, %add624
  %add626 = add nsw i32 %mul625, 0
  %neg627 = xor i32 %add626, -1
  %cmp628 = icmp eq i32 %neg627, -1
  %conv629 = zext i1 %cmp628 to i32
  %sub630 = sub nsw i32 0, %conv629
  %93 = load i32, i32* %src_len.addr, align 4
  %conv631 = trunc i32 %93 to i16
  %conv632 = sext i16 %conv631 to i32
  %add633 = add nsw i32 0, %conv632
  %mul634 = mul nsw i32 0, %add633
  %add635 = add nsw i32 %mul634, 1
  %shl636 = shl i32 %add635, 30
  %sub637 = sub nsw i32 %shl636, 1
  %mul638 = mul nsw i32 %sub637, 2
  %add639 = add nsw i32 %mul638, 1
  %sub640 = sub nsw i32 %sub630, %add639
  br label %cond.end.647

cond.false.641:                                   ; preds = %cond.true.611
  %94 = load i32, i32* %src_len.addr, align 4
  %conv642 = trunc i32 %94 to i16
  %conv643 = sext i16 %conv642 to i32
  %add644 = add nsw i32 0, %conv643
  %mul645 = mul nsw i32 0, %add644
  %add646 = add nsw i32 %mul645, 0
  br label %cond.end.647

cond.end.647:                                     ; preds = %cond.false.641, %cond.true.621
  %cond648 = phi i32 [ %sub640, %cond.true.621 ], [ %add646, %cond.false.641 ]
  %div649 = sdiv i32 %cond648, 5
  %cmp650 = icmp slt i32 %conv613, %div649
  br i1 %cmp650, label %cond.true.703, label %lor.lhs.false.683

cond.false.652:                                   ; preds = %cond.false.606
  %95 = load i32, i32* %src_len.addr, align 4
  %conv653 = trunc i32 %95 to i16
  %conv654 = sext i16 %conv653 to i32
  %add655 = add nsw i32 0, %conv654
  %mul656 = mul nsw i32 0, %add655
  %sub657 = sub nsw i32 %mul656, 1
  %cmp658 = icmp slt i32 %sub657, 0
  br i1 %cmp658, label %cond.true.660, label %cond.false.670

cond.true.660:                                    ; preds = %cond.false.652
  %96 = load i32, i32* %src_len.addr, align 4
  %conv661 = trunc i32 %96 to i16
  %conv662 = sext i16 %conv661 to i32
  %add663 = add nsw i32 0, %conv662
  %mul664 = mul nsw i32 0, %add663
  %add665 = add nsw i32 %mul664, 1
  %shl666 = shl i32 %add665, 30
  %sub667 = sub nsw i32 %shl666, 1
  %mul668 = mul nsw i32 %sub667, 2
  %add669 = add nsw i32 %mul668, 1
  br label %cond.end.676

cond.false.670:                                   ; preds = %cond.false.652
  %97 = load i32, i32* %src_len.addr, align 4
  %conv671 = trunc i32 %97 to i16
  %conv672 = sext i16 %conv671 to i32
  %add673 = add nsw i32 0, %conv672
  %mul674 = mul nsw i32 0, %add673
  %sub675 = sub nsw i32 %mul674, 1
  br label %cond.end.676

cond.end.676:                                     ; preds = %cond.false.670, %cond.true.660
  %cond677 = phi i32 [ %add669, %cond.true.660 ], [ %sub675, %cond.false.670 ]
  %div678 = sdiv i32 %cond677, 5
  %98 = load i32, i32* %src_len.addr, align 4
  %conv679 = trunc i32 %98 to i16
  %conv680 = sext i16 %conv679 to i32
  %cmp681 = icmp slt i32 %div678, %conv680
  br i1 %cmp681, label %cond.true.703, label %lor.lhs.false.683

lor.lhs.false.683:                                ; preds = %cond.end.676, %cond.end.647, %cond.true.605, %cond.end.597, %cond.true.562, %cond.end.556
  %99 = load i32, i32* %src_len.addr, align 4
  %conv684 = trunc i32 %99 to i16
  %conv685 = sext i16 %conv684 to i32
  %mul686 = mul nsw i32 %conv685, 5
  %mul687 = mul nsw i32 0, %mul686
  %sub688 = sub nsw i32 %mul687, 1
  %cmp689 = icmp slt i32 %sub688, 0
  br i1 %cmp689, label %land.lhs.true.691, label %lor.lhs.false.697

land.lhs.true.691:                                ; preds = %lor.lhs.false.683
  %100 = load i32, i32* %src_len.addr, align 4
  %conv692 = trunc i32 %100 to i16
  %conv693 = sext i16 %conv692 to i32
  %mul694 = mul nsw i32 %conv693, 5
  %cmp695 = icmp slt i32 %mul694, -32768
  br i1 %cmp695, label %cond.true.703, label %lor.lhs.false.697

lor.lhs.false.697:                                ; preds = %land.lhs.true.691, %lor.lhs.false.683
  %101 = load i32, i32* %src_len.addr, align 4
  %conv698 = trunc i32 %101 to i16
  %conv699 = sext i16 %conv698 to i32
  %mul700 = mul nsw i32 %conv699, 5
  %cmp701 = icmp slt i32 32767, %mul700
  br i1 %cmp701, label %cond.true.703, label %cond.false.726

cond.true.703:                                    ; preds = %lor.lhs.false.697, %land.lhs.true.691, %cond.end.676, %cond.end.647, %cond.true.605, %cond.end.597, %cond.true.562, %cond.end.556, %land.lhs.true.519
  %102 = load i32, i32* %src_len.addr, align 4
  %conv704 = trunc i32 %102 to i16
  %conv705 = zext i16 %conv704 to i32
  %mul706 = mul nsw i32 %conv705, 5
  %cmp707 = icmp sle i32 %mul706, 32767
  br i1 %cmp707, label %cond.true.709, label %cond.false.715

cond.true.709:                                    ; preds = %cond.true.703
  %103 = load i32, i32* %src_len.addr, align 4
  %conv710 = trunc i32 %103 to i16
  %conv711 = zext i16 %conv710 to i32
  %mul712 = mul nsw i32 %conv711, 5
  %conv713 = trunc i32 %mul712 to i16
  %conv714 = sext i16 %conv713 to i32
  br label %cond.end.723

cond.false.715:                                   ; preds = %cond.true.703
  %104 = load i32, i32* %src_len.addr, align 4
  %conv716 = trunc i32 %104 to i16
  %conv717 = zext i16 %conv716 to i32
  %mul718 = mul nsw i32 %conv717, 5
  %sub719 = sub nsw i32 %mul718, -32768
  %conv720 = trunc i32 %sub719 to i16
  %conv721 = sext i16 %conv720 to i32
  %add722 = add nsw i32 %conv721, -32768
  br label %cond.end.723

cond.end.723:                                     ; preds = %cond.false.715, %cond.true.709
  %cond724 = phi i32 [ %conv714, %cond.true.709 ], [ %add722, %cond.false.715 ]
  %conv725 = sext i32 %cond724 to i64
  store i64 %conv725, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.726:                                   ; preds = %lor.lhs.false.697
  %105 = load i32, i32* %src_len.addr, align 4
  %conv727 = trunc i32 %105 to i16
  %conv728 = zext i16 %conv727 to i32
  %mul729 = mul nsw i32 %conv728, 5
  %cmp730 = icmp sle i32 %mul729, 32767
  br i1 %cmp730, label %cond.true.732, label %cond.false.738

cond.true.732:                                    ; preds = %cond.false.726
  %106 = load i32, i32* %src_len.addr, align 4
  %conv733 = trunc i32 %106 to i16
  %conv734 = zext i16 %conv733 to i32
  %mul735 = mul nsw i32 %conv734, 5
  %conv736 = trunc i32 %mul735 to i16
  %conv737 = sext i16 %conv736 to i32
  br label %cond.end.746

cond.false.738:                                   ; preds = %cond.false.726
  %107 = load i32, i32* %src_len.addr, align 4
  %conv739 = trunc i32 %107 to i16
  %conv740 = zext i16 %conv739 to i32
  %mul741 = mul nsw i32 %conv740, 5
  %sub742 = sub nsw i32 %mul741, -32768
  %conv743 = trunc i32 %sub742 to i16
  %conv744 = sext i16 %conv743 to i32
  %add745 = add nsw i32 %conv744, -32768
  br label %cond.end.746

cond.end.746:                                     ; preds = %cond.false.738, %cond.true.732
  %cond747 = phi i32 [ %conv737, %cond.true.732 ], [ %add745, %cond.false.738 ]
  %conv748 = sext i32 %cond747 to i64
  store i64 %conv748, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.749:                                   ; preds = %cond.true.480
  %108 = load i32, i32* %src_len.addr, align 4
  %add750 = add nsw i32 0, %108
  %mul751 = mul nsw i32 0, %add750
  %sub752 = sub nsw i32 %mul751, 1
  %cmp753 = icmp slt i32 %sub752, 0
  br i1 %cmp753, label %cond.true.755, label %cond.false.771

cond.true.755:                                    ; preds = %cond.false.749
  %109 = load i32, i32* %src_len.addr, align 4
  %add756 = add nsw i32 0, %109
  %mul757 = mul nsw i32 0, %add756
  %add758 = add nsw i32 %mul757, 0
  %neg759 = xor i32 %add758, -1
  %cmp760 = icmp eq i32 %neg759, -1
  %conv761 = zext i1 %cmp760 to i32
  %sub762 = sub nsw i32 0, %conv761
  %110 = load i32, i32* %src_len.addr, align 4
  %add763 = add nsw i32 0, %110
  %mul764 = mul nsw i32 0, %add763
  %add765 = add nsw i32 %mul764, 1
  %shl766 = shl i32 %add765, 30
  %sub767 = sub nsw i32 %shl766, 1
  %mul768 = mul nsw i32 %sub767, 2
  %add769 = add nsw i32 %mul768, 1
  %sub770 = sub nsw i32 %sub762, %add769
  br label %cond.end.775

cond.false.771:                                   ; preds = %cond.false.749
  %111 = load i32, i32* %src_len.addr, align 4
  %add772 = add nsw i32 0, %111
  %mul773 = mul nsw i32 0, %add772
  %add774 = add nsw i32 %mul773, 0
  br label %cond.end.775

cond.end.775:                                     ; preds = %cond.false.771, %cond.true.755
  %cond776 = phi i32 [ %sub770, %cond.true.755 ], [ %add774, %cond.false.771 ]
  %cmp777 = icmp eq i32 %cond776, 0
  br i1 %cmp777, label %land.lhs.true.779, label %lor.lhs.false.782

land.lhs.true.779:                                ; preds = %cond.end.775
  %112 = load i32, i32* %src_len.addr, align 4
  %cmp780 = icmp slt i32 %112, 0
  br i1 %cmp780, label %cond.true.915, label %lor.lhs.false.782

lor.lhs.false.782:                                ; preds = %land.lhs.true.779, %cond.end.775
  br i1 false, label %cond.true.783, label %cond.false.842

cond.true.783:                                    ; preds = %lor.lhs.false.782
  %113 = load i32, i32* %src_len.addr, align 4
  %cmp784 = icmp slt i32 %113, 0
  br i1 %cmp784, label %cond.true.786, label %cond.false.809

cond.true.786:                                    ; preds = %cond.true.783
  %114 = load i32, i32* %src_len.addr, align 4
  %115 = load i32, i32* %src_len.addr, align 4
  %add787 = add nsw i32 0, %115
  %mul788 = mul nsw i32 0, %add787
  %sub789 = sub nsw i32 %mul788, 1
  %cmp790 = icmp slt i32 %sub789, 0
  br i1 %cmp790, label %cond.true.792, label %cond.false.800

cond.true.792:                                    ; preds = %cond.true.786
  %116 = load i32, i32* %src_len.addr, align 4
  %add793 = add nsw i32 0, %116
  %mul794 = mul nsw i32 0, %add793
  %add795 = add nsw i32 %mul794, 1
  %shl796 = shl i32 %add795, 30
  %sub797 = sub nsw i32 %shl796, 1
  %mul798 = mul nsw i32 %sub797, 2
  %add799 = add nsw i32 %mul798, 1
  br label %cond.end.804

cond.false.800:                                   ; preds = %cond.true.786
  %117 = load i32, i32* %src_len.addr, align 4
  %add801 = add nsw i32 0, %117
  %mul802 = mul nsw i32 0, %add801
  %sub803 = sub nsw i32 %mul802, 1
  br label %cond.end.804

cond.end.804:                                     ; preds = %cond.false.800, %cond.true.792
  %cond805 = phi i32 [ %add799, %cond.true.792 ], [ %sub803, %cond.false.800 ]
  %div806 = sdiv i32 %cond805, 5
  %cmp807 = icmp slt i32 %114, %div806
  br i1 %cmp807, label %cond.true.915, label %lor.lhs.false.901

cond.false.809:                                   ; preds = %cond.true.783
  br i1 false, label %cond.true.810, label %cond.false.811

cond.true.810:                                    ; preds = %cond.false.809
  br i1 false, label %cond.true.915, label %lor.lhs.false.901

cond.false.811:                                   ; preds = %cond.false.809
  %118 = load i32, i32* %src_len.addr, align 4
  %add812 = add nsw i32 0, %118
  %mul813 = mul nsw i32 0, %add812
  %sub814 = sub nsw i32 %mul813, 1
  %cmp815 = icmp slt i32 %sub814, 0
  br i1 %cmp815, label %cond.true.817, label %cond.false.833

cond.true.817:                                    ; preds = %cond.false.811
  %119 = load i32, i32* %src_len.addr, align 4
  %add818 = add nsw i32 0, %119
  %mul819 = mul nsw i32 0, %add818
  %add820 = add nsw i32 %mul819, 0
  %neg821 = xor i32 %add820, -1
  %cmp822 = icmp eq i32 %neg821, -1
  %conv823 = zext i1 %cmp822 to i32
  %sub824 = sub nsw i32 0, %conv823
  %120 = load i32, i32* %src_len.addr, align 4
  %add825 = add nsw i32 0, %120
  %mul826 = mul nsw i32 0, %add825
  %add827 = add nsw i32 %mul826, 1
  %shl828 = shl i32 %add827, 30
  %sub829 = sub nsw i32 %shl828, 1
  %mul830 = mul nsw i32 %sub829, 2
  %add831 = add nsw i32 %mul830, 1
  %sub832 = sub nsw i32 %sub824, %add831
  br label %cond.end.837

cond.false.833:                                   ; preds = %cond.false.811
  %121 = load i32, i32* %src_len.addr, align 4
  %add834 = add nsw i32 0, %121
  %mul835 = mul nsw i32 0, %add834
  %add836 = add nsw i32 %mul835, 0
  br label %cond.end.837

cond.end.837:                                     ; preds = %cond.false.833, %cond.true.817
  %cond838 = phi i32 [ %sub832, %cond.true.817 ], [ %add836, %cond.false.833 ]
  %div839 = sdiv i32 %cond838, 5
  %122 = load i32, i32* %src_len.addr, align 4
  %cmp840 = icmp slt i32 %div839, %122
  br i1 %cmp840, label %cond.true.915, label %lor.lhs.false.901

cond.false.842:                                   ; preds = %lor.lhs.false.782
  br i1 false, label %cond.true.843, label %cond.false.844

cond.true.843:                                    ; preds = %cond.false.842
  br i1 false, label %cond.true.915, label %lor.lhs.false.901

cond.false.844:                                   ; preds = %cond.false.842
  %123 = load i32, i32* %src_len.addr, align 4
  %cmp845 = icmp slt i32 %123, 0
  br i1 %cmp845, label %cond.true.847, label %cond.false.878

cond.true.847:                                    ; preds = %cond.false.844
  %124 = load i32, i32* %src_len.addr, align 4
  %125 = load i32, i32* %src_len.addr, align 4
  %add848 = add nsw i32 0, %125
  %mul849 = mul nsw i32 0, %add848
  %sub850 = sub nsw i32 %mul849, 1
  %cmp851 = icmp slt i32 %sub850, 0
  br i1 %cmp851, label %cond.true.853, label %cond.false.869

cond.true.853:                                    ; preds = %cond.true.847
  %126 = load i32, i32* %src_len.addr, align 4
  %add854 = add nsw i32 0, %126
  %mul855 = mul nsw i32 0, %add854
  %add856 = add nsw i32 %mul855, 0
  %neg857 = xor i32 %add856, -1
  %cmp858 = icmp eq i32 %neg857, -1
  %conv859 = zext i1 %cmp858 to i32
  %sub860 = sub nsw i32 0, %conv859
  %127 = load i32, i32* %src_len.addr, align 4
  %add861 = add nsw i32 0, %127
  %mul862 = mul nsw i32 0, %add861
  %add863 = add nsw i32 %mul862, 1
  %shl864 = shl i32 %add863, 30
  %sub865 = sub nsw i32 %shl864, 1
  %mul866 = mul nsw i32 %sub865, 2
  %add867 = add nsw i32 %mul866, 1
  %sub868 = sub nsw i32 %sub860, %add867
  br label %cond.end.873

cond.false.869:                                   ; preds = %cond.true.847
  %128 = load i32, i32* %src_len.addr, align 4
  %add870 = add nsw i32 0, %128
  %mul871 = mul nsw i32 0, %add870
  %add872 = add nsw i32 %mul871, 0
  br label %cond.end.873

cond.end.873:                                     ; preds = %cond.false.869, %cond.true.853
  %cond874 = phi i32 [ %sub868, %cond.true.853 ], [ %add872, %cond.false.869 ]
  %div875 = sdiv i32 %cond874, 5
  %cmp876 = icmp slt i32 %124, %div875
  br i1 %cmp876, label %cond.true.915, label %lor.lhs.false.901

cond.false.878:                                   ; preds = %cond.false.844
  %129 = load i32, i32* %src_len.addr, align 4
  %add879 = add nsw i32 0, %129
  %mul880 = mul nsw i32 0, %add879
  %sub881 = sub nsw i32 %mul880, 1
  %cmp882 = icmp slt i32 %sub881, 0
  br i1 %cmp882, label %cond.true.884, label %cond.false.892

cond.true.884:                                    ; preds = %cond.false.878
  %130 = load i32, i32* %src_len.addr, align 4
  %add885 = add nsw i32 0, %130
  %mul886 = mul nsw i32 0, %add885
  %add887 = add nsw i32 %mul886, 1
  %shl888 = shl i32 %add887, 30
  %sub889 = sub nsw i32 %shl888, 1
  %mul890 = mul nsw i32 %sub889, 2
  %add891 = add nsw i32 %mul890, 1
  br label %cond.end.896

cond.false.892:                                   ; preds = %cond.false.878
  %131 = load i32, i32* %src_len.addr, align 4
  %add893 = add nsw i32 0, %131
  %mul894 = mul nsw i32 0, %add893
  %sub895 = sub nsw i32 %mul894, 1
  br label %cond.end.896

cond.end.896:                                     ; preds = %cond.false.892, %cond.true.884
  %cond897 = phi i32 [ %add891, %cond.true.884 ], [ %sub895, %cond.false.892 ]
  %div898 = sdiv i32 %cond897, 5
  %132 = load i32, i32* %src_len.addr, align 4
  %cmp899 = icmp slt i32 %div898, %132
  br i1 %cmp899, label %cond.true.915, label %lor.lhs.false.901

lor.lhs.false.901:                                ; preds = %cond.end.896, %cond.end.873, %cond.true.843, %cond.end.837, %cond.true.810, %cond.end.804
  %133 = load i32, i32* %src_len.addr, align 4
  %mul902 = mul nsw i32 %133, 5
  %mul903 = mul nsw i32 0, %mul902
  %sub904 = sub nsw i32 %mul903, 1
  %cmp905 = icmp slt i32 %sub904, 0
  br i1 %cmp905, label %land.lhs.true.907, label %lor.lhs.false.911

land.lhs.true.907:                                ; preds = %lor.lhs.false.901
  %134 = load i32, i32* %src_len.addr, align 4
  %mul908 = mul nsw i32 %134, 5
  %cmp909 = icmp slt i32 %mul908, -32768
  br i1 %cmp909, label %cond.true.915, label %lor.lhs.false.911

lor.lhs.false.911:                                ; preds = %land.lhs.true.907, %lor.lhs.false.901
  %135 = load i32, i32* %src_len.addr, align 4
  %mul912 = mul nsw i32 %135, 5
  %cmp913 = icmp slt i32 32767, %mul912
  br i1 %cmp913, label %cond.true.915, label %cond.false.938

cond.true.915:                                    ; preds = %lor.lhs.false.911, %land.lhs.true.907, %cond.end.896, %cond.end.873, %cond.true.843, %cond.end.837, %cond.true.810, %cond.end.804, %land.lhs.true.779
  %136 = load i32, i32* %src_len.addr, align 4
  %conv916 = trunc i32 %136 to i16
  %conv917 = zext i16 %conv916 to i32
  %mul918 = mul nsw i32 %conv917, 5
  %cmp919 = icmp sle i32 %mul918, 32767
  br i1 %cmp919, label %cond.true.921, label %cond.false.927

cond.true.921:                                    ; preds = %cond.true.915
  %137 = load i32, i32* %src_len.addr, align 4
  %conv922 = trunc i32 %137 to i16
  %conv923 = zext i16 %conv922 to i32
  %mul924 = mul nsw i32 %conv923, 5
  %conv925 = trunc i32 %mul924 to i16
  %conv926 = sext i16 %conv925 to i32
  br label %cond.end.935

cond.false.927:                                   ; preds = %cond.true.915
  %138 = load i32, i32* %src_len.addr, align 4
  %conv928 = trunc i32 %138 to i16
  %conv929 = zext i16 %conv928 to i32
  %mul930 = mul nsw i32 %conv929, 5
  %sub931 = sub nsw i32 %mul930, -32768
  %conv932 = trunc i32 %sub931 to i16
  %conv933 = sext i16 %conv932 to i32
  %add934 = add nsw i32 %conv933, -32768
  br label %cond.end.935

cond.end.935:                                     ; preds = %cond.false.927, %cond.true.921
  %cond936 = phi i32 [ %conv926, %cond.true.921 ], [ %add934, %cond.false.927 ]
  %conv937 = sext i32 %cond936 to i64
  store i64 %conv937, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.938:                                   ; preds = %lor.lhs.false.911
  %139 = load i32, i32* %src_len.addr, align 4
  %conv939 = trunc i32 %139 to i16
  %conv940 = zext i16 %conv939 to i32
  %mul941 = mul nsw i32 %conv940, 5
  %cmp942 = icmp sle i32 %mul941, 32767
  br i1 %cmp942, label %cond.true.944, label %cond.false.950

cond.true.944:                                    ; preds = %cond.false.938
  %140 = load i32, i32* %src_len.addr, align 4
  %conv945 = trunc i32 %140 to i16
  %conv946 = zext i16 %conv945 to i32
  %mul947 = mul nsw i32 %conv946, 5
  %conv948 = trunc i32 %mul947 to i16
  %conv949 = sext i16 %conv948 to i32
  br label %cond.end.958

cond.false.950:                                   ; preds = %cond.false.938
  %141 = load i32, i32* %src_len.addr, align 4
  %conv951 = trunc i32 %141 to i16
  %conv952 = zext i16 %conv951 to i32
  %mul953 = mul nsw i32 %conv952, 5
  %sub954 = sub nsw i32 %mul953, -32768
  %conv955 = trunc i32 %sub954 to i16
  %conv956 = sext i16 %conv955 to i32
  %add957 = add nsw i32 %conv956, -32768
  br label %cond.end.958

cond.end.958:                                     ; preds = %cond.false.950, %cond.true.944
  %cond959 = phi i32 [ %conv949, %cond.true.944 ], [ %add957, %cond.false.950 ]
  %conv960 = sext i32 %cond959 to i64
  store i64 %conv960, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.961:                                   ; preds = %cond.false.479
  br i1 false, label %cond.true.962, label %cond.false.1347

cond.true.962:                                    ; preds = %cond.false.961
  br i1 false, label %cond.true.963, label %cond.false.1155

cond.true.963:                                    ; preds = %cond.true.962
  %142 = load i32, i32* %src_len.addr, align 4
  %add964 = add nsw i32 0, %142
  %mul965 = mul nsw i32 0, %add964
  %sub966 = sub nsw i32 %mul965, 1
  %cmp967 = icmp slt i32 %sub966, 0
  br i1 %cmp967, label %cond.true.969, label %cond.false.985

cond.true.969:                                    ; preds = %cond.true.963
  %143 = load i32, i32* %src_len.addr, align 4
  %add970 = add nsw i32 0, %143
  %mul971 = mul nsw i32 0, %add970
  %add972 = add nsw i32 %mul971, 0
  %neg973 = xor i32 %add972, -1
  %cmp974 = icmp eq i32 %neg973, -1
  %conv975 = zext i1 %cmp974 to i32
  %sub976 = sub nsw i32 0, %conv975
  %144 = load i32, i32* %src_len.addr, align 4
  %add977 = add nsw i32 0, %144
  %mul978 = mul nsw i32 0, %add977
  %add979 = add nsw i32 %mul978, 1
  %shl980 = shl i32 %add979, 30
  %sub981 = sub nsw i32 %shl980, 1
  %mul982 = mul nsw i32 %sub981, 2
  %add983 = add nsw i32 %mul982, 1
  %sub984 = sub nsw i32 %sub976, %add983
  br label %cond.end.989

cond.false.985:                                   ; preds = %cond.true.963
  %145 = load i32, i32* %src_len.addr, align 4
  %add986 = add nsw i32 0, %145
  %mul987 = mul nsw i32 0, %add986
  %add988 = add nsw i32 %mul987, 0
  br label %cond.end.989

cond.end.989:                                     ; preds = %cond.false.985, %cond.true.969
  %cond990 = phi i32 [ %sub984, %cond.true.969 ], [ %add988, %cond.false.985 ]
  %cmp991 = icmp eq i32 %cond990, 0
  br i1 %cmp991, label %land.lhs.true.993, label %lor.lhs.false.996

land.lhs.true.993:                                ; preds = %cond.end.989
  %146 = load i32, i32* %src_len.addr, align 4
  %cmp994 = icmp slt i32 %146, 0
  br i1 %cmp994, label %cond.true.1129, label %lor.lhs.false.996

lor.lhs.false.996:                                ; preds = %land.lhs.true.993, %cond.end.989
  br i1 false, label %cond.true.997, label %cond.false.1056

cond.true.997:                                    ; preds = %lor.lhs.false.996
  %147 = load i32, i32* %src_len.addr, align 4
  %cmp998 = icmp slt i32 %147, 0
  br i1 %cmp998, label %cond.true.1000, label %cond.false.1023

cond.true.1000:                                   ; preds = %cond.true.997
  %148 = load i32, i32* %src_len.addr, align 4
  %149 = load i32, i32* %src_len.addr, align 4
  %add1001 = add nsw i32 0, %149
  %mul1002 = mul nsw i32 0, %add1001
  %sub1003 = sub nsw i32 %mul1002, 1
  %cmp1004 = icmp slt i32 %sub1003, 0
  br i1 %cmp1004, label %cond.true.1006, label %cond.false.1014

cond.true.1006:                                   ; preds = %cond.true.1000
  %150 = load i32, i32* %src_len.addr, align 4
  %add1007 = add nsw i32 0, %150
  %mul1008 = mul nsw i32 0, %add1007
  %add1009 = add nsw i32 %mul1008, 1
  %shl1010 = shl i32 %add1009, 30
  %sub1011 = sub nsw i32 %shl1010, 1
  %mul1012 = mul nsw i32 %sub1011, 2
  %add1013 = add nsw i32 %mul1012, 1
  br label %cond.end.1018

cond.false.1014:                                  ; preds = %cond.true.1000
  %151 = load i32, i32* %src_len.addr, align 4
  %add1015 = add nsw i32 0, %151
  %mul1016 = mul nsw i32 0, %add1015
  %sub1017 = sub nsw i32 %mul1016, 1
  br label %cond.end.1018

cond.end.1018:                                    ; preds = %cond.false.1014, %cond.true.1006
  %cond1019 = phi i32 [ %add1013, %cond.true.1006 ], [ %sub1017, %cond.false.1014 ]
  %div1020 = sdiv i32 %cond1019, 5
  %cmp1021 = icmp slt i32 %148, %div1020
  br i1 %cmp1021, label %cond.true.1129, label %lor.lhs.false.1115

cond.false.1023:                                  ; preds = %cond.true.997
  br i1 false, label %cond.true.1024, label %cond.false.1025

cond.true.1024:                                   ; preds = %cond.false.1023
  br i1 false, label %cond.true.1129, label %lor.lhs.false.1115

cond.false.1025:                                  ; preds = %cond.false.1023
  %152 = load i32, i32* %src_len.addr, align 4
  %add1026 = add nsw i32 0, %152
  %mul1027 = mul nsw i32 0, %add1026
  %sub1028 = sub nsw i32 %mul1027, 1
  %cmp1029 = icmp slt i32 %sub1028, 0
  br i1 %cmp1029, label %cond.true.1031, label %cond.false.1047

cond.true.1031:                                   ; preds = %cond.false.1025
  %153 = load i32, i32* %src_len.addr, align 4
  %add1032 = add nsw i32 0, %153
  %mul1033 = mul nsw i32 0, %add1032
  %add1034 = add nsw i32 %mul1033, 0
  %neg1035 = xor i32 %add1034, -1
  %cmp1036 = icmp eq i32 %neg1035, -1
  %conv1037 = zext i1 %cmp1036 to i32
  %sub1038 = sub nsw i32 0, %conv1037
  %154 = load i32, i32* %src_len.addr, align 4
  %add1039 = add nsw i32 0, %154
  %mul1040 = mul nsw i32 0, %add1039
  %add1041 = add nsw i32 %mul1040, 1
  %shl1042 = shl i32 %add1041, 30
  %sub1043 = sub nsw i32 %shl1042, 1
  %mul1044 = mul nsw i32 %sub1043, 2
  %add1045 = add nsw i32 %mul1044, 1
  %sub1046 = sub nsw i32 %sub1038, %add1045
  br label %cond.end.1051

cond.false.1047:                                  ; preds = %cond.false.1025
  %155 = load i32, i32* %src_len.addr, align 4
  %add1048 = add nsw i32 0, %155
  %mul1049 = mul nsw i32 0, %add1048
  %add1050 = add nsw i32 %mul1049, 0
  br label %cond.end.1051

cond.end.1051:                                    ; preds = %cond.false.1047, %cond.true.1031
  %cond1052 = phi i32 [ %sub1046, %cond.true.1031 ], [ %add1050, %cond.false.1047 ]
  %div1053 = sdiv i32 %cond1052, 5
  %156 = load i32, i32* %src_len.addr, align 4
  %cmp1054 = icmp slt i32 %div1053, %156
  br i1 %cmp1054, label %cond.true.1129, label %lor.lhs.false.1115

cond.false.1056:                                  ; preds = %lor.lhs.false.996
  br i1 false, label %cond.true.1057, label %cond.false.1058

cond.true.1057:                                   ; preds = %cond.false.1056
  br i1 false, label %cond.true.1129, label %lor.lhs.false.1115

cond.false.1058:                                  ; preds = %cond.false.1056
  %157 = load i32, i32* %src_len.addr, align 4
  %cmp1059 = icmp slt i32 %157, 0
  br i1 %cmp1059, label %cond.true.1061, label %cond.false.1092

cond.true.1061:                                   ; preds = %cond.false.1058
  %158 = load i32, i32* %src_len.addr, align 4
  %159 = load i32, i32* %src_len.addr, align 4
  %add1062 = add nsw i32 0, %159
  %mul1063 = mul nsw i32 0, %add1062
  %sub1064 = sub nsw i32 %mul1063, 1
  %cmp1065 = icmp slt i32 %sub1064, 0
  br i1 %cmp1065, label %cond.true.1067, label %cond.false.1083

cond.true.1067:                                   ; preds = %cond.true.1061
  %160 = load i32, i32* %src_len.addr, align 4
  %add1068 = add nsw i32 0, %160
  %mul1069 = mul nsw i32 0, %add1068
  %add1070 = add nsw i32 %mul1069, 0
  %neg1071 = xor i32 %add1070, -1
  %cmp1072 = icmp eq i32 %neg1071, -1
  %conv1073 = zext i1 %cmp1072 to i32
  %sub1074 = sub nsw i32 0, %conv1073
  %161 = load i32, i32* %src_len.addr, align 4
  %add1075 = add nsw i32 0, %161
  %mul1076 = mul nsw i32 0, %add1075
  %add1077 = add nsw i32 %mul1076, 1
  %shl1078 = shl i32 %add1077, 30
  %sub1079 = sub nsw i32 %shl1078, 1
  %mul1080 = mul nsw i32 %sub1079, 2
  %add1081 = add nsw i32 %mul1080, 1
  %sub1082 = sub nsw i32 %sub1074, %add1081
  br label %cond.end.1087

cond.false.1083:                                  ; preds = %cond.true.1061
  %162 = load i32, i32* %src_len.addr, align 4
  %add1084 = add nsw i32 0, %162
  %mul1085 = mul nsw i32 0, %add1084
  %add1086 = add nsw i32 %mul1085, 0
  br label %cond.end.1087

cond.end.1087:                                    ; preds = %cond.false.1083, %cond.true.1067
  %cond1088 = phi i32 [ %sub1082, %cond.true.1067 ], [ %add1086, %cond.false.1083 ]
  %div1089 = sdiv i32 %cond1088, 5
  %cmp1090 = icmp slt i32 %158, %div1089
  br i1 %cmp1090, label %cond.true.1129, label %lor.lhs.false.1115

cond.false.1092:                                  ; preds = %cond.false.1058
  %163 = load i32, i32* %src_len.addr, align 4
  %add1093 = add nsw i32 0, %163
  %mul1094 = mul nsw i32 0, %add1093
  %sub1095 = sub nsw i32 %mul1094, 1
  %cmp1096 = icmp slt i32 %sub1095, 0
  br i1 %cmp1096, label %cond.true.1098, label %cond.false.1106

cond.true.1098:                                   ; preds = %cond.false.1092
  %164 = load i32, i32* %src_len.addr, align 4
  %add1099 = add nsw i32 0, %164
  %mul1100 = mul nsw i32 0, %add1099
  %add1101 = add nsw i32 %mul1100, 1
  %shl1102 = shl i32 %add1101, 30
  %sub1103 = sub nsw i32 %shl1102, 1
  %mul1104 = mul nsw i32 %sub1103, 2
  %add1105 = add nsw i32 %mul1104, 1
  br label %cond.end.1110

cond.false.1106:                                  ; preds = %cond.false.1092
  %165 = load i32, i32* %src_len.addr, align 4
  %add1107 = add nsw i32 0, %165
  %mul1108 = mul nsw i32 0, %add1107
  %sub1109 = sub nsw i32 %mul1108, 1
  br label %cond.end.1110

cond.end.1110:                                    ; preds = %cond.false.1106, %cond.true.1098
  %cond1111 = phi i32 [ %add1105, %cond.true.1098 ], [ %sub1109, %cond.false.1106 ]
  %div1112 = sdiv i32 %cond1111, 5
  %166 = load i32, i32* %src_len.addr, align 4
  %cmp1113 = icmp slt i32 %div1112, %166
  br i1 %cmp1113, label %cond.true.1129, label %lor.lhs.false.1115

lor.lhs.false.1115:                               ; preds = %cond.end.1110, %cond.end.1087, %cond.true.1057, %cond.end.1051, %cond.true.1024, %cond.end.1018
  %167 = load i32, i32* %src_len.addr, align 4
  %mul1116 = mul nsw i32 %167, 5
  %mul1117 = mul nsw i32 0, %mul1116
  %sub1118 = sub nsw i32 %mul1117, 1
  %cmp1119 = icmp slt i32 %sub1118, 0
  br i1 %cmp1119, label %land.lhs.true.1121, label %lor.lhs.false.1125

land.lhs.true.1121:                               ; preds = %lor.lhs.false.1115
  %168 = load i32, i32* %src_len.addr, align 4
  %mul1122 = mul nsw i32 %168, 5
  %cmp1123 = icmp slt i32 %mul1122, -2147483648
  br i1 %cmp1123, label %cond.true.1129, label %lor.lhs.false.1125

lor.lhs.false.1125:                               ; preds = %land.lhs.true.1121, %lor.lhs.false.1115
  %169 = load i32, i32* %src_len.addr, align 4
  %mul1126 = mul nsw i32 %169, 5
  %cmp1127 = icmp slt i32 2147483647, %mul1126
  br i1 %cmp1127, label %cond.true.1129, label %cond.false.1142

cond.true.1129:                                   ; preds = %lor.lhs.false.1125, %land.lhs.true.1121, %cond.end.1110, %cond.end.1087, %cond.true.1057, %cond.end.1051, %cond.true.1024, %cond.end.1018, %land.lhs.true.993
  %170 = load i32, i32* %src_len.addr, align 4
  %mul1130 = mul i32 %170, 5
  %cmp1131 = icmp ule i32 %mul1130, 2147483647
  br i1 %cmp1131, label %cond.true.1133, label %cond.false.1135

cond.true.1133:                                   ; preds = %cond.true.1129
  %171 = load i32, i32* %src_len.addr, align 4
  %mul1134 = mul i32 %171, 5
  br label %cond.end.1139

cond.false.1135:                                  ; preds = %cond.true.1129
  %172 = load i32, i32* %src_len.addr, align 4
  %mul1136 = mul i32 %172, 5
  %sub1137 = sub i32 %mul1136, -2147483648
  %add1138 = add nsw i32 %sub1137, -2147483648
  br label %cond.end.1139

cond.end.1139:                                    ; preds = %cond.false.1135, %cond.true.1133
  %cond1140 = phi i32 [ %mul1134, %cond.true.1133 ], [ %add1138, %cond.false.1135 ]
  %conv1141 = sext i32 %cond1140 to i64
  store i64 %conv1141, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1142:                                  ; preds = %lor.lhs.false.1125
  %173 = load i32, i32* %src_len.addr, align 4
  %mul1143 = mul i32 %173, 5
  %cmp1144 = icmp ule i32 %mul1143, 2147483647
  br i1 %cmp1144, label %cond.true.1146, label %cond.false.1148

cond.true.1146:                                   ; preds = %cond.false.1142
  %174 = load i32, i32* %src_len.addr, align 4
  %mul1147 = mul i32 %174, 5
  br label %cond.end.1152

cond.false.1148:                                  ; preds = %cond.false.1142
  %175 = load i32, i32* %src_len.addr, align 4
  %mul1149 = mul i32 %175, 5
  %sub1150 = sub i32 %mul1149, -2147483648
  %add1151 = add nsw i32 %sub1150, -2147483648
  br label %cond.end.1152

cond.end.1152:                                    ; preds = %cond.false.1148, %cond.true.1146
  %cond1153 = phi i32 [ %mul1147, %cond.true.1146 ], [ %add1151, %cond.false.1148 ]
  %conv1154 = sext i32 %cond1153 to i64
  store i64 %conv1154, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1155:                                  ; preds = %cond.true.962
  %176 = load i32, i32* %src_len.addr, align 4
  %add1156 = add nsw i32 0, %176
  %mul1157 = mul nsw i32 0, %add1156
  %sub1158 = sub nsw i32 %mul1157, 1
  %cmp1159 = icmp slt i32 %sub1158, 0
  br i1 %cmp1159, label %cond.true.1161, label %cond.false.1177

cond.true.1161:                                   ; preds = %cond.false.1155
  %177 = load i32, i32* %src_len.addr, align 4
  %add1162 = add nsw i32 0, %177
  %mul1163 = mul nsw i32 0, %add1162
  %add1164 = add nsw i32 %mul1163, 0
  %neg1165 = xor i32 %add1164, -1
  %cmp1166 = icmp eq i32 %neg1165, -1
  %conv1167 = zext i1 %cmp1166 to i32
  %sub1168 = sub nsw i32 0, %conv1167
  %178 = load i32, i32* %src_len.addr, align 4
  %add1169 = add nsw i32 0, %178
  %mul1170 = mul nsw i32 0, %add1169
  %add1171 = add nsw i32 %mul1170, 1
  %shl1172 = shl i32 %add1171, 30
  %sub1173 = sub nsw i32 %shl1172, 1
  %mul1174 = mul nsw i32 %sub1173, 2
  %add1175 = add nsw i32 %mul1174, 1
  %sub1176 = sub nsw i32 %sub1168, %add1175
  br label %cond.end.1181

cond.false.1177:                                  ; preds = %cond.false.1155
  %179 = load i32, i32* %src_len.addr, align 4
  %add1178 = add nsw i32 0, %179
  %mul1179 = mul nsw i32 0, %add1178
  %add1180 = add nsw i32 %mul1179, 0
  br label %cond.end.1181

cond.end.1181:                                    ; preds = %cond.false.1177, %cond.true.1161
  %cond1182 = phi i32 [ %sub1176, %cond.true.1161 ], [ %add1180, %cond.false.1177 ]
  %cmp1183 = icmp eq i32 %cond1182, 0
  br i1 %cmp1183, label %land.lhs.true.1185, label %lor.lhs.false.1188

land.lhs.true.1185:                               ; preds = %cond.end.1181
  %180 = load i32, i32* %src_len.addr, align 4
  %cmp1186 = icmp slt i32 %180, 0
  br i1 %cmp1186, label %cond.true.1321, label %lor.lhs.false.1188

lor.lhs.false.1188:                               ; preds = %land.lhs.true.1185, %cond.end.1181
  br i1 false, label %cond.true.1189, label %cond.false.1248

cond.true.1189:                                   ; preds = %lor.lhs.false.1188
  %181 = load i32, i32* %src_len.addr, align 4
  %cmp1190 = icmp slt i32 %181, 0
  br i1 %cmp1190, label %cond.true.1192, label %cond.false.1215

cond.true.1192:                                   ; preds = %cond.true.1189
  %182 = load i32, i32* %src_len.addr, align 4
  %183 = load i32, i32* %src_len.addr, align 4
  %add1193 = add nsw i32 0, %183
  %mul1194 = mul nsw i32 0, %add1193
  %sub1195 = sub nsw i32 %mul1194, 1
  %cmp1196 = icmp slt i32 %sub1195, 0
  br i1 %cmp1196, label %cond.true.1198, label %cond.false.1206

cond.true.1198:                                   ; preds = %cond.true.1192
  %184 = load i32, i32* %src_len.addr, align 4
  %add1199 = add nsw i32 0, %184
  %mul1200 = mul nsw i32 0, %add1199
  %add1201 = add nsw i32 %mul1200, 1
  %shl1202 = shl i32 %add1201, 30
  %sub1203 = sub nsw i32 %shl1202, 1
  %mul1204 = mul nsw i32 %sub1203, 2
  %add1205 = add nsw i32 %mul1204, 1
  br label %cond.end.1210

cond.false.1206:                                  ; preds = %cond.true.1192
  %185 = load i32, i32* %src_len.addr, align 4
  %add1207 = add nsw i32 0, %185
  %mul1208 = mul nsw i32 0, %add1207
  %sub1209 = sub nsw i32 %mul1208, 1
  br label %cond.end.1210

cond.end.1210:                                    ; preds = %cond.false.1206, %cond.true.1198
  %cond1211 = phi i32 [ %add1205, %cond.true.1198 ], [ %sub1209, %cond.false.1206 ]
  %div1212 = sdiv i32 %cond1211, 5
  %cmp1213 = icmp slt i32 %182, %div1212
  br i1 %cmp1213, label %cond.true.1321, label %lor.lhs.false.1307

cond.false.1215:                                  ; preds = %cond.true.1189
  br i1 false, label %cond.true.1216, label %cond.false.1217

cond.true.1216:                                   ; preds = %cond.false.1215
  br i1 false, label %cond.true.1321, label %lor.lhs.false.1307

cond.false.1217:                                  ; preds = %cond.false.1215
  %186 = load i32, i32* %src_len.addr, align 4
  %add1218 = add nsw i32 0, %186
  %mul1219 = mul nsw i32 0, %add1218
  %sub1220 = sub nsw i32 %mul1219, 1
  %cmp1221 = icmp slt i32 %sub1220, 0
  br i1 %cmp1221, label %cond.true.1223, label %cond.false.1239

cond.true.1223:                                   ; preds = %cond.false.1217
  %187 = load i32, i32* %src_len.addr, align 4
  %add1224 = add nsw i32 0, %187
  %mul1225 = mul nsw i32 0, %add1224
  %add1226 = add nsw i32 %mul1225, 0
  %neg1227 = xor i32 %add1226, -1
  %cmp1228 = icmp eq i32 %neg1227, -1
  %conv1229 = zext i1 %cmp1228 to i32
  %sub1230 = sub nsw i32 0, %conv1229
  %188 = load i32, i32* %src_len.addr, align 4
  %add1231 = add nsw i32 0, %188
  %mul1232 = mul nsw i32 0, %add1231
  %add1233 = add nsw i32 %mul1232, 1
  %shl1234 = shl i32 %add1233, 30
  %sub1235 = sub nsw i32 %shl1234, 1
  %mul1236 = mul nsw i32 %sub1235, 2
  %add1237 = add nsw i32 %mul1236, 1
  %sub1238 = sub nsw i32 %sub1230, %add1237
  br label %cond.end.1243

cond.false.1239:                                  ; preds = %cond.false.1217
  %189 = load i32, i32* %src_len.addr, align 4
  %add1240 = add nsw i32 0, %189
  %mul1241 = mul nsw i32 0, %add1240
  %add1242 = add nsw i32 %mul1241, 0
  br label %cond.end.1243

cond.end.1243:                                    ; preds = %cond.false.1239, %cond.true.1223
  %cond1244 = phi i32 [ %sub1238, %cond.true.1223 ], [ %add1242, %cond.false.1239 ]
  %div1245 = sdiv i32 %cond1244, 5
  %190 = load i32, i32* %src_len.addr, align 4
  %cmp1246 = icmp slt i32 %div1245, %190
  br i1 %cmp1246, label %cond.true.1321, label %lor.lhs.false.1307

cond.false.1248:                                  ; preds = %lor.lhs.false.1188
  br i1 false, label %cond.true.1249, label %cond.false.1250

cond.true.1249:                                   ; preds = %cond.false.1248
  br i1 false, label %cond.true.1321, label %lor.lhs.false.1307

cond.false.1250:                                  ; preds = %cond.false.1248
  %191 = load i32, i32* %src_len.addr, align 4
  %cmp1251 = icmp slt i32 %191, 0
  br i1 %cmp1251, label %cond.true.1253, label %cond.false.1284

cond.true.1253:                                   ; preds = %cond.false.1250
  %192 = load i32, i32* %src_len.addr, align 4
  %193 = load i32, i32* %src_len.addr, align 4
  %add1254 = add nsw i32 0, %193
  %mul1255 = mul nsw i32 0, %add1254
  %sub1256 = sub nsw i32 %mul1255, 1
  %cmp1257 = icmp slt i32 %sub1256, 0
  br i1 %cmp1257, label %cond.true.1259, label %cond.false.1275

cond.true.1259:                                   ; preds = %cond.true.1253
  %194 = load i32, i32* %src_len.addr, align 4
  %add1260 = add nsw i32 0, %194
  %mul1261 = mul nsw i32 0, %add1260
  %add1262 = add nsw i32 %mul1261, 0
  %neg1263 = xor i32 %add1262, -1
  %cmp1264 = icmp eq i32 %neg1263, -1
  %conv1265 = zext i1 %cmp1264 to i32
  %sub1266 = sub nsw i32 0, %conv1265
  %195 = load i32, i32* %src_len.addr, align 4
  %add1267 = add nsw i32 0, %195
  %mul1268 = mul nsw i32 0, %add1267
  %add1269 = add nsw i32 %mul1268, 1
  %shl1270 = shl i32 %add1269, 30
  %sub1271 = sub nsw i32 %shl1270, 1
  %mul1272 = mul nsw i32 %sub1271, 2
  %add1273 = add nsw i32 %mul1272, 1
  %sub1274 = sub nsw i32 %sub1266, %add1273
  br label %cond.end.1279

cond.false.1275:                                  ; preds = %cond.true.1253
  %196 = load i32, i32* %src_len.addr, align 4
  %add1276 = add nsw i32 0, %196
  %mul1277 = mul nsw i32 0, %add1276
  %add1278 = add nsw i32 %mul1277, 0
  br label %cond.end.1279

cond.end.1279:                                    ; preds = %cond.false.1275, %cond.true.1259
  %cond1280 = phi i32 [ %sub1274, %cond.true.1259 ], [ %add1278, %cond.false.1275 ]
  %div1281 = sdiv i32 %cond1280, 5
  %cmp1282 = icmp slt i32 %192, %div1281
  br i1 %cmp1282, label %cond.true.1321, label %lor.lhs.false.1307

cond.false.1284:                                  ; preds = %cond.false.1250
  %197 = load i32, i32* %src_len.addr, align 4
  %add1285 = add nsw i32 0, %197
  %mul1286 = mul nsw i32 0, %add1285
  %sub1287 = sub nsw i32 %mul1286, 1
  %cmp1288 = icmp slt i32 %sub1287, 0
  br i1 %cmp1288, label %cond.true.1290, label %cond.false.1298

cond.true.1290:                                   ; preds = %cond.false.1284
  %198 = load i32, i32* %src_len.addr, align 4
  %add1291 = add nsw i32 0, %198
  %mul1292 = mul nsw i32 0, %add1291
  %add1293 = add nsw i32 %mul1292, 1
  %shl1294 = shl i32 %add1293, 30
  %sub1295 = sub nsw i32 %shl1294, 1
  %mul1296 = mul nsw i32 %sub1295, 2
  %add1297 = add nsw i32 %mul1296, 1
  br label %cond.end.1302

cond.false.1298:                                  ; preds = %cond.false.1284
  %199 = load i32, i32* %src_len.addr, align 4
  %add1299 = add nsw i32 0, %199
  %mul1300 = mul nsw i32 0, %add1299
  %sub1301 = sub nsw i32 %mul1300, 1
  br label %cond.end.1302

cond.end.1302:                                    ; preds = %cond.false.1298, %cond.true.1290
  %cond1303 = phi i32 [ %add1297, %cond.true.1290 ], [ %sub1301, %cond.false.1298 ]
  %div1304 = sdiv i32 %cond1303, 5
  %200 = load i32, i32* %src_len.addr, align 4
  %cmp1305 = icmp slt i32 %div1304, %200
  br i1 %cmp1305, label %cond.true.1321, label %lor.lhs.false.1307

lor.lhs.false.1307:                               ; preds = %cond.end.1302, %cond.end.1279, %cond.true.1249, %cond.end.1243, %cond.true.1216, %cond.end.1210
  %201 = load i32, i32* %src_len.addr, align 4
  %mul1308 = mul nsw i32 %201, 5
  %mul1309 = mul nsw i32 0, %mul1308
  %sub1310 = sub nsw i32 %mul1309, 1
  %cmp1311 = icmp slt i32 %sub1310, 0
  br i1 %cmp1311, label %land.lhs.true.1313, label %lor.lhs.false.1317

land.lhs.true.1313:                               ; preds = %lor.lhs.false.1307
  %202 = load i32, i32* %src_len.addr, align 4
  %mul1314 = mul nsw i32 %202, 5
  %cmp1315 = icmp slt i32 %mul1314, -2147483648
  br i1 %cmp1315, label %cond.true.1321, label %lor.lhs.false.1317

lor.lhs.false.1317:                               ; preds = %land.lhs.true.1313, %lor.lhs.false.1307
  %203 = load i32, i32* %src_len.addr, align 4
  %mul1318 = mul nsw i32 %203, 5
  %cmp1319 = icmp slt i32 2147483647, %mul1318
  br i1 %cmp1319, label %cond.true.1321, label %cond.false.1334

cond.true.1321:                                   ; preds = %lor.lhs.false.1317, %land.lhs.true.1313, %cond.end.1302, %cond.end.1279, %cond.true.1249, %cond.end.1243, %cond.true.1216, %cond.end.1210, %land.lhs.true.1185
  %204 = load i32, i32* %src_len.addr, align 4
  %mul1322 = mul i32 %204, 5
  %cmp1323 = icmp ule i32 %mul1322, 2147483647
  br i1 %cmp1323, label %cond.true.1325, label %cond.false.1327

cond.true.1325:                                   ; preds = %cond.true.1321
  %205 = load i32, i32* %src_len.addr, align 4
  %mul1326 = mul i32 %205, 5
  br label %cond.end.1331

cond.false.1327:                                  ; preds = %cond.true.1321
  %206 = load i32, i32* %src_len.addr, align 4
  %mul1328 = mul i32 %206, 5
  %sub1329 = sub i32 %mul1328, -2147483648
  %add1330 = add nsw i32 %sub1329, -2147483648
  br label %cond.end.1331

cond.end.1331:                                    ; preds = %cond.false.1327, %cond.true.1325
  %cond1332 = phi i32 [ %mul1326, %cond.true.1325 ], [ %add1330, %cond.false.1327 ]
  %conv1333 = sext i32 %cond1332 to i64
  store i64 %conv1333, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1334:                                  ; preds = %lor.lhs.false.1317
  %207 = load i32, i32* %src_len.addr, align 4
  %mul1335 = mul i32 %207, 5
  %cmp1336 = icmp ule i32 %mul1335, 2147483647
  br i1 %cmp1336, label %cond.true.1338, label %cond.false.1340

cond.true.1338:                                   ; preds = %cond.false.1334
  %208 = load i32, i32* %src_len.addr, align 4
  %mul1339 = mul i32 %208, 5
  br label %cond.end.1344

cond.false.1340:                                  ; preds = %cond.false.1334
  %209 = load i32, i32* %src_len.addr, align 4
  %mul1341 = mul i32 %209, 5
  %sub1342 = sub i32 %mul1341, -2147483648
  %add1343 = add nsw i32 %sub1342, -2147483648
  br label %cond.end.1344

cond.end.1344:                                    ; preds = %cond.false.1340, %cond.true.1338
  %cond1345 = phi i32 [ %mul1339, %cond.true.1338 ], [ %add1343, %cond.false.1340 ]
  %conv1346 = sext i32 %cond1345 to i64
  store i64 %conv1346, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1347:                                  ; preds = %cond.false.961
  br i1 true, label %cond.true.1348, label %cond.false.1774

cond.true.1348:                                   ; preds = %cond.false.1347
  br i1 true, label %cond.true.1349, label %cond.false.1576

cond.true.1349:                                   ; preds = %cond.true.1348
  %210 = load i32, i32* %src_len.addr, align 4
  %conv1350 = sext i32 %210 to i64
  %add1351 = add nsw i64 0, %conv1350
  %mul1352 = mul nsw i64 0, %add1351
  %sub1353 = sub nsw i64 %mul1352, 1
  %cmp1354 = icmp slt i64 %sub1353, 0
  br i1 %cmp1354, label %cond.true.1356, label %cond.false.1375

cond.true.1356:                                   ; preds = %cond.true.1349
  %211 = load i32, i32* %src_len.addr, align 4
  %conv1357 = sext i32 %211 to i64
  %add1358 = add nsw i64 0, %conv1357
  %mul1359 = mul nsw i64 0, %add1358
  %add1360 = add nsw i64 %mul1359, 0
  %neg1361 = xor i64 %add1360, -1
  %cmp1362 = icmp eq i64 %neg1361, -1
  %conv1363 = zext i1 %cmp1362 to i32
  %sub1364 = sub nsw i32 0, %conv1363
  %conv1365 = sext i32 %sub1364 to i64
  %212 = load i32, i32* %src_len.addr, align 4
  %conv1366 = sext i32 %212 to i64
  %add1367 = add nsw i64 0, %conv1366
  %mul1368 = mul nsw i64 0, %add1367
  %add1369 = add nsw i64 %mul1368, 1
  %shl1370 = shl i64 %add1369, 62
  %sub1371 = sub nsw i64 %shl1370, 1
  %mul1372 = mul nsw i64 %sub1371, 2
  %add1373 = add nsw i64 %mul1372, 1
  %sub1374 = sub nsw i64 %conv1365, %add1373
  br label %cond.end.1380

cond.false.1375:                                  ; preds = %cond.true.1349
  %213 = load i32, i32* %src_len.addr, align 4
  %conv1376 = sext i32 %213 to i64
  %add1377 = add nsw i64 0, %conv1376
  %mul1378 = mul nsw i64 0, %add1377
  %add1379 = add nsw i64 %mul1378, 0
  br label %cond.end.1380

cond.end.1380:                                    ; preds = %cond.false.1375, %cond.true.1356
  %cond1381 = phi i64 [ %sub1374, %cond.true.1356 ], [ %add1379, %cond.false.1375 ]
  %cmp1382 = icmp eq i64 %cond1381, 0
  br i1 %cmp1382, label %land.lhs.true.1384, label %lor.lhs.false.1388

land.lhs.true.1384:                               ; preds = %cond.end.1380
  %214 = load i32, i32* %src_len.addr, align 4
  %conv1385 = sext i32 %214 to i64
  %cmp1386 = icmp slt i64 %conv1385, 0
  br i1 %cmp1386, label %cond.true.1546, label %lor.lhs.false.1388

lor.lhs.false.1388:                               ; preds = %land.lhs.true.1384, %cond.end.1380
  br i1 false, label %cond.true.1389, label %cond.false.1459

cond.true.1389:                                   ; preds = %lor.lhs.false.1388
  %215 = load i32, i32* %src_len.addr, align 4
  %conv1390 = sext i32 %215 to i64
  %cmp1391 = icmp slt i64 %conv1390, 0
  br i1 %cmp1391, label %cond.true.1393, label %cond.false.1420

cond.true.1393:                                   ; preds = %cond.true.1389
  %216 = load i32, i32* %src_len.addr, align 4
  %conv1394 = sext i32 %216 to i64
  %217 = load i32, i32* %src_len.addr, align 4
  %conv1395 = sext i32 %217 to i64
  %add1396 = add nsw i64 0, %conv1395
  %mul1397 = mul nsw i64 0, %add1396
  %sub1398 = sub nsw i64 %mul1397, 1
  %cmp1399 = icmp slt i64 %sub1398, 0
  br i1 %cmp1399, label %cond.true.1401, label %cond.false.1410

cond.true.1401:                                   ; preds = %cond.true.1393
  %218 = load i32, i32* %src_len.addr, align 4
  %conv1402 = sext i32 %218 to i64
  %add1403 = add nsw i64 0, %conv1402
  %mul1404 = mul nsw i64 0, %add1403
  %add1405 = add nsw i64 %mul1404, 1
  %shl1406 = shl i64 %add1405, 62
  %sub1407 = sub nsw i64 %shl1406, 1
  %mul1408 = mul nsw i64 %sub1407, 2
  %add1409 = add nsw i64 %mul1408, 1
  br label %cond.end.1415

cond.false.1410:                                  ; preds = %cond.true.1393
  %219 = load i32, i32* %src_len.addr, align 4
  %conv1411 = sext i32 %219 to i64
  %add1412 = add nsw i64 0, %conv1411
  %mul1413 = mul nsw i64 0, %add1412
  %sub1414 = sub nsw i64 %mul1413, 1
  br label %cond.end.1415

cond.end.1415:                                    ; preds = %cond.false.1410, %cond.true.1401
  %cond1416 = phi i64 [ %add1409, %cond.true.1401 ], [ %sub1414, %cond.false.1410 ]
  %div1417 = sdiv i64 %cond1416, 5
  %cmp1418 = icmp slt i64 %conv1394, %div1417
  br i1 %cmp1418, label %cond.true.1546, label %lor.lhs.false.1529

cond.false.1420:                                  ; preds = %cond.true.1389
  br i1 false, label %cond.true.1421, label %cond.false.1422

cond.true.1421:                                   ; preds = %cond.false.1420
  br i1 false, label %cond.true.1546, label %lor.lhs.false.1529

cond.false.1422:                                  ; preds = %cond.false.1420
  %220 = load i32, i32* %src_len.addr, align 4
  %conv1423 = sext i32 %220 to i64
  %add1424 = add nsw i64 0, %conv1423
  %mul1425 = mul nsw i64 0, %add1424
  %sub1426 = sub nsw i64 %mul1425, 1
  %cmp1427 = icmp slt i64 %sub1426, 0
  br i1 %cmp1427, label %cond.true.1429, label %cond.false.1448

cond.true.1429:                                   ; preds = %cond.false.1422
  %221 = load i32, i32* %src_len.addr, align 4
  %conv1430 = sext i32 %221 to i64
  %add1431 = add nsw i64 0, %conv1430
  %mul1432 = mul nsw i64 0, %add1431
  %add1433 = add nsw i64 %mul1432, 0
  %neg1434 = xor i64 %add1433, -1
  %cmp1435 = icmp eq i64 %neg1434, -1
  %conv1436 = zext i1 %cmp1435 to i32
  %sub1437 = sub nsw i32 0, %conv1436
  %conv1438 = sext i32 %sub1437 to i64
  %222 = load i32, i32* %src_len.addr, align 4
  %conv1439 = sext i32 %222 to i64
  %add1440 = add nsw i64 0, %conv1439
  %mul1441 = mul nsw i64 0, %add1440
  %add1442 = add nsw i64 %mul1441, 1
  %shl1443 = shl i64 %add1442, 62
  %sub1444 = sub nsw i64 %shl1443, 1
  %mul1445 = mul nsw i64 %sub1444, 2
  %add1446 = add nsw i64 %mul1445, 1
  %sub1447 = sub nsw i64 %conv1438, %add1446
  br label %cond.end.1453

cond.false.1448:                                  ; preds = %cond.false.1422
  %223 = load i32, i32* %src_len.addr, align 4
  %conv1449 = sext i32 %223 to i64
  %add1450 = add nsw i64 0, %conv1449
  %mul1451 = mul nsw i64 0, %add1450
  %add1452 = add nsw i64 %mul1451, 0
  br label %cond.end.1453

cond.end.1453:                                    ; preds = %cond.false.1448, %cond.true.1429
  %cond1454 = phi i64 [ %sub1447, %cond.true.1429 ], [ %add1452, %cond.false.1448 ]
  %div1455 = sdiv i64 %cond1454, 5
  %224 = load i32, i32* %src_len.addr, align 4
  %conv1456 = sext i32 %224 to i64
  %cmp1457 = icmp slt i64 %div1455, %conv1456
  br i1 %cmp1457, label %cond.true.1546, label %lor.lhs.false.1529

cond.false.1459:                                  ; preds = %lor.lhs.false.1388
  br i1 false, label %cond.true.1460, label %cond.false.1461

cond.true.1460:                                   ; preds = %cond.false.1459
  br i1 false, label %cond.true.1546, label %lor.lhs.false.1529

cond.false.1461:                                  ; preds = %cond.false.1459
  %225 = load i32, i32* %src_len.addr, align 4
  %conv1462 = sext i32 %225 to i64
  %cmp1463 = icmp slt i64 %conv1462, 0
  br i1 %cmp1463, label %cond.true.1465, label %cond.false.1502

cond.true.1465:                                   ; preds = %cond.false.1461
  %226 = load i32, i32* %src_len.addr, align 4
  %conv1466 = sext i32 %226 to i64
  %227 = load i32, i32* %src_len.addr, align 4
  %conv1467 = sext i32 %227 to i64
  %add1468 = add nsw i64 0, %conv1467
  %mul1469 = mul nsw i64 0, %add1468
  %sub1470 = sub nsw i64 %mul1469, 1
  %cmp1471 = icmp slt i64 %sub1470, 0
  br i1 %cmp1471, label %cond.true.1473, label %cond.false.1492

cond.true.1473:                                   ; preds = %cond.true.1465
  %228 = load i32, i32* %src_len.addr, align 4
  %conv1474 = sext i32 %228 to i64
  %add1475 = add nsw i64 0, %conv1474
  %mul1476 = mul nsw i64 0, %add1475
  %add1477 = add nsw i64 %mul1476, 0
  %neg1478 = xor i64 %add1477, -1
  %cmp1479 = icmp eq i64 %neg1478, -1
  %conv1480 = zext i1 %cmp1479 to i32
  %sub1481 = sub nsw i32 0, %conv1480
  %conv1482 = sext i32 %sub1481 to i64
  %229 = load i32, i32* %src_len.addr, align 4
  %conv1483 = sext i32 %229 to i64
  %add1484 = add nsw i64 0, %conv1483
  %mul1485 = mul nsw i64 0, %add1484
  %add1486 = add nsw i64 %mul1485, 1
  %shl1487 = shl i64 %add1486, 62
  %sub1488 = sub nsw i64 %shl1487, 1
  %mul1489 = mul nsw i64 %sub1488, 2
  %add1490 = add nsw i64 %mul1489, 1
  %sub1491 = sub nsw i64 %conv1482, %add1490
  br label %cond.end.1497

cond.false.1492:                                  ; preds = %cond.true.1465
  %230 = load i32, i32* %src_len.addr, align 4
  %conv1493 = sext i32 %230 to i64
  %add1494 = add nsw i64 0, %conv1493
  %mul1495 = mul nsw i64 0, %add1494
  %add1496 = add nsw i64 %mul1495, 0
  br label %cond.end.1497

cond.end.1497:                                    ; preds = %cond.false.1492, %cond.true.1473
  %cond1498 = phi i64 [ %sub1491, %cond.true.1473 ], [ %add1496, %cond.false.1492 ]
  %div1499 = sdiv i64 %cond1498, 5
  %cmp1500 = icmp slt i64 %conv1466, %div1499
  br i1 %cmp1500, label %cond.true.1546, label %lor.lhs.false.1529

cond.false.1502:                                  ; preds = %cond.false.1461
  %231 = load i32, i32* %src_len.addr, align 4
  %conv1503 = sext i32 %231 to i64
  %add1504 = add nsw i64 0, %conv1503
  %mul1505 = mul nsw i64 0, %add1504
  %sub1506 = sub nsw i64 %mul1505, 1
  %cmp1507 = icmp slt i64 %sub1506, 0
  br i1 %cmp1507, label %cond.true.1509, label %cond.false.1518

cond.true.1509:                                   ; preds = %cond.false.1502
  %232 = load i32, i32* %src_len.addr, align 4
  %conv1510 = sext i32 %232 to i64
  %add1511 = add nsw i64 0, %conv1510
  %mul1512 = mul nsw i64 0, %add1511
  %add1513 = add nsw i64 %mul1512, 1
  %shl1514 = shl i64 %add1513, 62
  %sub1515 = sub nsw i64 %shl1514, 1
  %mul1516 = mul nsw i64 %sub1515, 2
  %add1517 = add nsw i64 %mul1516, 1
  br label %cond.end.1523

cond.false.1518:                                  ; preds = %cond.false.1502
  %233 = load i32, i32* %src_len.addr, align 4
  %conv1519 = sext i32 %233 to i64
  %add1520 = add nsw i64 0, %conv1519
  %mul1521 = mul nsw i64 0, %add1520
  %sub1522 = sub nsw i64 %mul1521, 1
  br label %cond.end.1523

cond.end.1523:                                    ; preds = %cond.false.1518, %cond.true.1509
  %cond1524 = phi i64 [ %add1517, %cond.true.1509 ], [ %sub1522, %cond.false.1518 ]
  %div1525 = sdiv i64 %cond1524, 5
  %234 = load i32, i32* %src_len.addr, align 4
  %conv1526 = sext i32 %234 to i64
  %cmp1527 = icmp slt i64 %div1525, %conv1526
  br i1 %cmp1527, label %cond.true.1546, label %lor.lhs.false.1529

lor.lhs.false.1529:                               ; preds = %cond.end.1523, %cond.end.1497, %cond.true.1460, %cond.end.1453, %cond.true.1421, %cond.end.1415
  %235 = load i32, i32* %src_len.addr, align 4
  %conv1530 = sext i32 %235 to i64
  %mul1531 = mul nsw i64 %conv1530, 5
  %mul1532 = mul nsw i64 0, %mul1531
  %sub1533 = sub nsw i64 %mul1532, 1
  %cmp1534 = icmp slt i64 %sub1533, 0
  br i1 %cmp1534, label %land.lhs.true.1536, label %lor.lhs.false.1541

land.lhs.true.1536:                               ; preds = %lor.lhs.false.1529
  %236 = load i32, i32* %src_len.addr, align 4
  %conv1537 = sext i32 %236 to i64
  %mul1538 = mul nsw i64 %conv1537, 5
  %cmp1539 = icmp slt i64 %mul1538, -9223372036854775808
  br i1 %cmp1539, label %cond.true.1546, label %lor.lhs.false.1541

lor.lhs.false.1541:                               ; preds = %land.lhs.true.1536, %lor.lhs.false.1529
  %237 = load i32, i32* %src_len.addr, align 4
  %conv1542 = sext i32 %237 to i64
  %mul1543 = mul nsw i64 %conv1542, 5
  %cmp1544 = icmp slt i64 9223372036854775807, %mul1543
  br i1 %cmp1544, label %cond.true.1546, label %cond.false.1561

cond.true.1546:                                   ; preds = %lor.lhs.false.1541, %land.lhs.true.1536, %cond.end.1523, %cond.end.1497, %cond.true.1460, %cond.end.1453, %cond.true.1421, %cond.end.1415, %land.lhs.true.1384
  %238 = load i32, i32* %src_len.addr, align 4
  %conv1547 = sext i32 %238 to i64
  %mul1548 = mul i64 %conv1547, 5
  %cmp1549 = icmp ule i64 %mul1548, 9223372036854775807
  br i1 %cmp1549, label %cond.true.1551, label %cond.false.1554

cond.true.1551:                                   ; preds = %cond.true.1546
  %239 = load i32, i32* %src_len.addr, align 4
  %conv1552 = sext i32 %239 to i64
  %mul1553 = mul i64 %conv1552, 5
  br label %cond.end.1559

cond.false.1554:                                  ; preds = %cond.true.1546
  %240 = load i32, i32* %src_len.addr, align 4
  %conv1555 = sext i32 %240 to i64
  %mul1556 = mul i64 %conv1555, 5
  %sub1557 = sub i64 %mul1556, -9223372036854775808
  %add1558 = add nsw i64 %sub1557, -9223372036854775808
  br label %cond.end.1559

cond.end.1559:                                    ; preds = %cond.false.1554, %cond.true.1551
  %cond1560 = phi i64 [ %mul1553, %cond.true.1551 ], [ %add1558, %cond.false.1554 ]
  store i64 %cond1560, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1561:                                  ; preds = %lor.lhs.false.1541
  %241 = load i32, i32* %src_len.addr, align 4
  %conv1562 = sext i32 %241 to i64
  %mul1563 = mul i64 %conv1562, 5
  %cmp1564 = icmp ule i64 %mul1563, 9223372036854775807
  br i1 %cmp1564, label %cond.true.1566, label %cond.false.1569

cond.true.1566:                                   ; preds = %cond.false.1561
  %242 = load i32, i32* %src_len.addr, align 4
  %conv1567 = sext i32 %242 to i64
  %mul1568 = mul i64 %conv1567, 5
  br label %cond.end.1574

cond.false.1569:                                  ; preds = %cond.false.1561
  %243 = load i32, i32* %src_len.addr, align 4
  %conv1570 = sext i32 %243 to i64
  %mul1571 = mul i64 %conv1570, 5
  %sub1572 = sub i64 %mul1571, -9223372036854775808
  %add1573 = add nsw i64 %sub1572, -9223372036854775808
  br label %cond.end.1574

cond.end.1574:                                    ; preds = %cond.false.1569, %cond.true.1566
  %cond1575 = phi i64 [ %mul1568, %cond.true.1566 ], [ %add1573, %cond.false.1569 ]
  store i64 %cond1575, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1576:                                  ; preds = %cond.true.1348
  %244 = load i32, i32* %src_len.addr, align 4
  %add1577 = add nsw i32 0, %244
  %mul1578 = mul nsw i32 0, %add1577
  %sub1579 = sub nsw i32 %mul1578, 1
  %cmp1580 = icmp slt i32 %sub1579, 0
  br i1 %cmp1580, label %cond.true.1582, label %cond.false.1598

cond.true.1582:                                   ; preds = %cond.false.1576
  %245 = load i32, i32* %src_len.addr, align 4
  %add1583 = add nsw i32 0, %245
  %mul1584 = mul nsw i32 0, %add1583
  %add1585 = add nsw i32 %mul1584, 0
  %neg1586 = xor i32 %add1585, -1
  %cmp1587 = icmp eq i32 %neg1586, -1
  %conv1588 = zext i1 %cmp1587 to i32
  %sub1589 = sub nsw i32 0, %conv1588
  %246 = load i32, i32* %src_len.addr, align 4
  %add1590 = add nsw i32 0, %246
  %mul1591 = mul nsw i32 0, %add1590
  %add1592 = add nsw i32 %mul1591, 1
  %shl1593 = shl i32 %add1592, 30
  %sub1594 = sub nsw i32 %shl1593, 1
  %mul1595 = mul nsw i32 %sub1594, 2
  %add1596 = add nsw i32 %mul1595, 1
  %sub1597 = sub nsw i32 %sub1589, %add1596
  br label %cond.end.1602

cond.false.1598:                                  ; preds = %cond.false.1576
  %247 = load i32, i32* %src_len.addr, align 4
  %add1599 = add nsw i32 0, %247
  %mul1600 = mul nsw i32 0, %add1599
  %add1601 = add nsw i32 %mul1600, 0
  br label %cond.end.1602

cond.end.1602:                                    ; preds = %cond.false.1598, %cond.true.1582
  %cond1603 = phi i32 [ %sub1597, %cond.true.1582 ], [ %add1601, %cond.false.1598 ]
  %cmp1604 = icmp eq i32 %cond1603, 0
  br i1 %cmp1604, label %land.lhs.true.1606, label %lor.lhs.false.1609

land.lhs.true.1606:                               ; preds = %cond.end.1602
  %248 = load i32, i32* %src_len.addr, align 4
  %cmp1607 = icmp slt i32 %248, 0
  br i1 %cmp1607, label %cond.true.1744, label %lor.lhs.false.1609

lor.lhs.false.1609:                               ; preds = %land.lhs.true.1606, %cond.end.1602
  br i1 false, label %cond.true.1610, label %cond.false.1669

cond.true.1610:                                   ; preds = %lor.lhs.false.1609
  %249 = load i32, i32* %src_len.addr, align 4
  %cmp1611 = icmp slt i32 %249, 0
  br i1 %cmp1611, label %cond.true.1613, label %cond.false.1636

cond.true.1613:                                   ; preds = %cond.true.1610
  %250 = load i32, i32* %src_len.addr, align 4
  %251 = load i32, i32* %src_len.addr, align 4
  %add1614 = add nsw i32 0, %251
  %mul1615 = mul nsw i32 0, %add1614
  %sub1616 = sub nsw i32 %mul1615, 1
  %cmp1617 = icmp slt i32 %sub1616, 0
  br i1 %cmp1617, label %cond.true.1619, label %cond.false.1627

cond.true.1619:                                   ; preds = %cond.true.1613
  %252 = load i32, i32* %src_len.addr, align 4
  %add1620 = add nsw i32 0, %252
  %mul1621 = mul nsw i32 0, %add1620
  %add1622 = add nsw i32 %mul1621, 1
  %shl1623 = shl i32 %add1622, 30
  %sub1624 = sub nsw i32 %shl1623, 1
  %mul1625 = mul nsw i32 %sub1624, 2
  %add1626 = add nsw i32 %mul1625, 1
  br label %cond.end.1631

cond.false.1627:                                  ; preds = %cond.true.1613
  %253 = load i32, i32* %src_len.addr, align 4
  %add1628 = add nsw i32 0, %253
  %mul1629 = mul nsw i32 0, %add1628
  %sub1630 = sub nsw i32 %mul1629, 1
  br label %cond.end.1631

cond.end.1631:                                    ; preds = %cond.false.1627, %cond.true.1619
  %cond1632 = phi i32 [ %add1626, %cond.true.1619 ], [ %sub1630, %cond.false.1627 ]
  %div1633 = sdiv i32 %cond1632, 5
  %cmp1634 = icmp slt i32 %250, %div1633
  br i1 %cmp1634, label %cond.true.1744, label %lor.lhs.false.1728

cond.false.1636:                                  ; preds = %cond.true.1610
  br i1 false, label %cond.true.1637, label %cond.false.1638

cond.true.1637:                                   ; preds = %cond.false.1636
  br i1 false, label %cond.true.1744, label %lor.lhs.false.1728

cond.false.1638:                                  ; preds = %cond.false.1636
  %254 = load i32, i32* %src_len.addr, align 4
  %add1639 = add nsw i32 0, %254
  %mul1640 = mul nsw i32 0, %add1639
  %sub1641 = sub nsw i32 %mul1640, 1
  %cmp1642 = icmp slt i32 %sub1641, 0
  br i1 %cmp1642, label %cond.true.1644, label %cond.false.1660

cond.true.1644:                                   ; preds = %cond.false.1638
  %255 = load i32, i32* %src_len.addr, align 4
  %add1645 = add nsw i32 0, %255
  %mul1646 = mul nsw i32 0, %add1645
  %add1647 = add nsw i32 %mul1646, 0
  %neg1648 = xor i32 %add1647, -1
  %cmp1649 = icmp eq i32 %neg1648, -1
  %conv1650 = zext i1 %cmp1649 to i32
  %sub1651 = sub nsw i32 0, %conv1650
  %256 = load i32, i32* %src_len.addr, align 4
  %add1652 = add nsw i32 0, %256
  %mul1653 = mul nsw i32 0, %add1652
  %add1654 = add nsw i32 %mul1653, 1
  %shl1655 = shl i32 %add1654, 30
  %sub1656 = sub nsw i32 %shl1655, 1
  %mul1657 = mul nsw i32 %sub1656, 2
  %add1658 = add nsw i32 %mul1657, 1
  %sub1659 = sub nsw i32 %sub1651, %add1658
  br label %cond.end.1664

cond.false.1660:                                  ; preds = %cond.false.1638
  %257 = load i32, i32* %src_len.addr, align 4
  %add1661 = add nsw i32 0, %257
  %mul1662 = mul nsw i32 0, %add1661
  %add1663 = add nsw i32 %mul1662, 0
  br label %cond.end.1664

cond.end.1664:                                    ; preds = %cond.false.1660, %cond.true.1644
  %cond1665 = phi i32 [ %sub1659, %cond.true.1644 ], [ %add1663, %cond.false.1660 ]
  %div1666 = sdiv i32 %cond1665, 5
  %258 = load i32, i32* %src_len.addr, align 4
  %cmp1667 = icmp slt i32 %div1666, %258
  br i1 %cmp1667, label %cond.true.1744, label %lor.lhs.false.1728

cond.false.1669:                                  ; preds = %lor.lhs.false.1609
  br i1 false, label %cond.true.1670, label %cond.false.1671

cond.true.1670:                                   ; preds = %cond.false.1669
  br i1 false, label %cond.true.1744, label %lor.lhs.false.1728

cond.false.1671:                                  ; preds = %cond.false.1669
  %259 = load i32, i32* %src_len.addr, align 4
  %cmp1672 = icmp slt i32 %259, 0
  br i1 %cmp1672, label %cond.true.1674, label %cond.false.1705

cond.true.1674:                                   ; preds = %cond.false.1671
  %260 = load i32, i32* %src_len.addr, align 4
  %261 = load i32, i32* %src_len.addr, align 4
  %add1675 = add nsw i32 0, %261
  %mul1676 = mul nsw i32 0, %add1675
  %sub1677 = sub nsw i32 %mul1676, 1
  %cmp1678 = icmp slt i32 %sub1677, 0
  br i1 %cmp1678, label %cond.true.1680, label %cond.false.1696

cond.true.1680:                                   ; preds = %cond.true.1674
  %262 = load i32, i32* %src_len.addr, align 4
  %add1681 = add nsw i32 0, %262
  %mul1682 = mul nsw i32 0, %add1681
  %add1683 = add nsw i32 %mul1682, 0
  %neg1684 = xor i32 %add1683, -1
  %cmp1685 = icmp eq i32 %neg1684, -1
  %conv1686 = zext i1 %cmp1685 to i32
  %sub1687 = sub nsw i32 0, %conv1686
  %263 = load i32, i32* %src_len.addr, align 4
  %add1688 = add nsw i32 0, %263
  %mul1689 = mul nsw i32 0, %add1688
  %add1690 = add nsw i32 %mul1689, 1
  %shl1691 = shl i32 %add1690, 30
  %sub1692 = sub nsw i32 %shl1691, 1
  %mul1693 = mul nsw i32 %sub1692, 2
  %add1694 = add nsw i32 %mul1693, 1
  %sub1695 = sub nsw i32 %sub1687, %add1694
  br label %cond.end.1700

cond.false.1696:                                  ; preds = %cond.true.1674
  %264 = load i32, i32* %src_len.addr, align 4
  %add1697 = add nsw i32 0, %264
  %mul1698 = mul nsw i32 0, %add1697
  %add1699 = add nsw i32 %mul1698, 0
  br label %cond.end.1700

cond.end.1700:                                    ; preds = %cond.false.1696, %cond.true.1680
  %cond1701 = phi i32 [ %sub1695, %cond.true.1680 ], [ %add1699, %cond.false.1696 ]
  %div1702 = sdiv i32 %cond1701, 5
  %cmp1703 = icmp slt i32 %260, %div1702
  br i1 %cmp1703, label %cond.true.1744, label %lor.lhs.false.1728

cond.false.1705:                                  ; preds = %cond.false.1671
  %265 = load i32, i32* %src_len.addr, align 4
  %add1706 = add nsw i32 0, %265
  %mul1707 = mul nsw i32 0, %add1706
  %sub1708 = sub nsw i32 %mul1707, 1
  %cmp1709 = icmp slt i32 %sub1708, 0
  br i1 %cmp1709, label %cond.true.1711, label %cond.false.1719

cond.true.1711:                                   ; preds = %cond.false.1705
  %266 = load i32, i32* %src_len.addr, align 4
  %add1712 = add nsw i32 0, %266
  %mul1713 = mul nsw i32 0, %add1712
  %add1714 = add nsw i32 %mul1713, 1
  %shl1715 = shl i32 %add1714, 30
  %sub1716 = sub nsw i32 %shl1715, 1
  %mul1717 = mul nsw i32 %sub1716, 2
  %add1718 = add nsw i32 %mul1717, 1
  br label %cond.end.1723

cond.false.1719:                                  ; preds = %cond.false.1705
  %267 = load i32, i32* %src_len.addr, align 4
  %add1720 = add nsw i32 0, %267
  %mul1721 = mul nsw i32 0, %add1720
  %sub1722 = sub nsw i32 %mul1721, 1
  br label %cond.end.1723

cond.end.1723:                                    ; preds = %cond.false.1719, %cond.true.1711
  %cond1724 = phi i32 [ %add1718, %cond.true.1711 ], [ %sub1722, %cond.false.1719 ]
  %div1725 = sdiv i32 %cond1724, 5
  %268 = load i32, i32* %src_len.addr, align 4
  %cmp1726 = icmp slt i32 %div1725, %268
  br i1 %cmp1726, label %cond.true.1744, label %lor.lhs.false.1728

lor.lhs.false.1728:                               ; preds = %cond.end.1723, %cond.end.1700, %cond.true.1670, %cond.end.1664, %cond.true.1637, %cond.end.1631
  %269 = load i32, i32* %src_len.addr, align 4
  %mul1729 = mul nsw i32 %269, 5
  %mul1730 = mul nsw i32 0, %mul1729
  %sub1731 = sub nsw i32 %mul1730, 1
  %cmp1732 = icmp slt i32 %sub1731, 0
  br i1 %cmp1732, label %land.lhs.true.1734, label %lor.lhs.false.1739

land.lhs.true.1734:                               ; preds = %lor.lhs.false.1728
  %270 = load i32, i32* %src_len.addr, align 4
  %mul1735 = mul nsw i32 %270, 5
  %conv1736 = sext i32 %mul1735 to i64
  %cmp1737 = icmp slt i64 %conv1736, -9223372036854775808
  br i1 %cmp1737, label %cond.true.1744, label %lor.lhs.false.1739

lor.lhs.false.1739:                               ; preds = %land.lhs.true.1734, %lor.lhs.false.1728
  %271 = load i32, i32* %src_len.addr, align 4
  %mul1740 = mul nsw i32 %271, 5
  %conv1741 = sext i32 %mul1740 to i64
  %cmp1742 = icmp slt i64 9223372036854775807, %conv1741
  br i1 %cmp1742, label %cond.true.1744, label %cond.false.1759

cond.true.1744:                                   ; preds = %lor.lhs.false.1739, %land.lhs.true.1734, %cond.end.1723, %cond.end.1700, %cond.true.1670, %cond.end.1664, %cond.true.1637, %cond.end.1631, %land.lhs.true.1606
  %272 = load i32, i32* %src_len.addr, align 4
  %conv1745 = sext i32 %272 to i64
  %mul1746 = mul i64 %conv1745, 5
  %cmp1747 = icmp ule i64 %mul1746, 9223372036854775807
  br i1 %cmp1747, label %cond.true.1749, label %cond.false.1752

cond.true.1749:                                   ; preds = %cond.true.1744
  %273 = load i32, i32* %src_len.addr, align 4
  %conv1750 = sext i32 %273 to i64
  %mul1751 = mul i64 %conv1750, 5
  br label %cond.end.1757

cond.false.1752:                                  ; preds = %cond.true.1744
  %274 = load i32, i32* %src_len.addr, align 4
  %conv1753 = sext i32 %274 to i64
  %mul1754 = mul i64 %conv1753, 5
  %sub1755 = sub i64 %mul1754, -9223372036854775808
  %add1756 = add nsw i64 %sub1755, -9223372036854775808
  br label %cond.end.1757

cond.end.1757:                                    ; preds = %cond.false.1752, %cond.true.1749
  %cond1758 = phi i64 [ %mul1751, %cond.true.1749 ], [ %add1756, %cond.false.1752 ]
  store i64 %cond1758, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1759:                                  ; preds = %lor.lhs.false.1739
  %275 = load i32, i32* %src_len.addr, align 4
  %conv1760 = sext i32 %275 to i64
  %mul1761 = mul i64 %conv1760, 5
  %cmp1762 = icmp ule i64 %mul1761, 9223372036854775807
  br i1 %cmp1762, label %cond.true.1764, label %cond.false.1767

cond.true.1764:                                   ; preds = %cond.false.1759
  %276 = load i32, i32* %src_len.addr, align 4
  %conv1765 = sext i32 %276 to i64
  %mul1766 = mul i64 %conv1765, 5
  br label %cond.end.1772

cond.false.1767:                                  ; preds = %cond.false.1759
  %277 = load i32, i32* %src_len.addr, align 4
  %conv1768 = sext i32 %277 to i64
  %mul1769 = mul i64 %conv1768, 5
  %sub1770 = sub i64 %mul1769, -9223372036854775808
  %add1771 = add nsw i64 %sub1770, -9223372036854775808
  br label %cond.end.1772

cond.end.1772:                                    ; preds = %cond.false.1767, %cond.true.1764
  %cond1773 = phi i64 [ %mul1766, %cond.true.1764 ], [ %add1771, %cond.false.1767 ]
  store i64 %cond1773, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1774:                                  ; preds = %cond.false.1347
  br i1 true, label %cond.true.1775, label %cond.false.2002

cond.true.1775:                                   ; preds = %cond.false.1774
  %278 = load i32, i32* %src_len.addr, align 4
  %conv1776 = sext i32 %278 to i64
  %add1777 = add nsw i64 0, %conv1776
  %mul1778 = mul nsw i64 0, %add1777
  %sub1779 = sub nsw i64 %mul1778, 1
  %cmp1780 = icmp slt i64 %sub1779, 0
  br i1 %cmp1780, label %cond.true.1782, label %cond.false.1801

cond.true.1782:                                   ; preds = %cond.true.1775
  %279 = load i32, i32* %src_len.addr, align 4
  %conv1783 = sext i32 %279 to i64
  %add1784 = add nsw i64 0, %conv1783
  %mul1785 = mul nsw i64 0, %add1784
  %add1786 = add nsw i64 %mul1785, 0
  %neg1787 = xor i64 %add1786, -1
  %cmp1788 = icmp eq i64 %neg1787, -1
  %conv1789 = zext i1 %cmp1788 to i32
  %sub1790 = sub nsw i32 0, %conv1789
  %conv1791 = sext i32 %sub1790 to i64
  %280 = load i32, i32* %src_len.addr, align 4
  %conv1792 = sext i32 %280 to i64
  %add1793 = add nsw i64 0, %conv1792
  %mul1794 = mul nsw i64 0, %add1793
  %add1795 = add nsw i64 %mul1794, 1
  %shl1796 = shl i64 %add1795, 62
  %sub1797 = sub nsw i64 %shl1796, 1
  %mul1798 = mul nsw i64 %sub1797, 2
  %add1799 = add nsw i64 %mul1798, 1
  %sub1800 = sub nsw i64 %conv1791, %add1799
  br label %cond.end.1806

cond.false.1801:                                  ; preds = %cond.true.1775
  %281 = load i32, i32* %src_len.addr, align 4
  %conv1802 = sext i32 %281 to i64
  %add1803 = add nsw i64 0, %conv1802
  %mul1804 = mul nsw i64 0, %add1803
  %add1805 = add nsw i64 %mul1804, 0
  br label %cond.end.1806

cond.end.1806:                                    ; preds = %cond.false.1801, %cond.true.1782
  %cond1807 = phi i64 [ %sub1800, %cond.true.1782 ], [ %add1805, %cond.false.1801 ]
  %cmp1808 = icmp eq i64 %cond1807, 0
  br i1 %cmp1808, label %land.lhs.true.1810, label %lor.lhs.false.1814

land.lhs.true.1810:                               ; preds = %cond.end.1806
  %282 = load i32, i32* %src_len.addr, align 4
  %conv1811 = sext i32 %282 to i64
  %cmp1812 = icmp slt i64 %conv1811, 0
  br i1 %cmp1812, label %cond.true.1972, label %lor.lhs.false.1814

lor.lhs.false.1814:                               ; preds = %land.lhs.true.1810, %cond.end.1806
  br i1 false, label %cond.true.1815, label %cond.false.1885

cond.true.1815:                                   ; preds = %lor.lhs.false.1814
  %283 = load i32, i32* %src_len.addr, align 4
  %conv1816 = sext i32 %283 to i64
  %cmp1817 = icmp slt i64 %conv1816, 0
  br i1 %cmp1817, label %cond.true.1819, label %cond.false.1846

cond.true.1819:                                   ; preds = %cond.true.1815
  %284 = load i32, i32* %src_len.addr, align 4
  %conv1820 = sext i32 %284 to i64
  %285 = load i32, i32* %src_len.addr, align 4
  %conv1821 = sext i32 %285 to i64
  %add1822 = add nsw i64 0, %conv1821
  %mul1823 = mul nsw i64 0, %add1822
  %sub1824 = sub nsw i64 %mul1823, 1
  %cmp1825 = icmp slt i64 %sub1824, 0
  br i1 %cmp1825, label %cond.true.1827, label %cond.false.1836

cond.true.1827:                                   ; preds = %cond.true.1819
  %286 = load i32, i32* %src_len.addr, align 4
  %conv1828 = sext i32 %286 to i64
  %add1829 = add nsw i64 0, %conv1828
  %mul1830 = mul nsw i64 0, %add1829
  %add1831 = add nsw i64 %mul1830, 1
  %shl1832 = shl i64 %add1831, 62
  %sub1833 = sub nsw i64 %shl1832, 1
  %mul1834 = mul nsw i64 %sub1833, 2
  %add1835 = add nsw i64 %mul1834, 1
  br label %cond.end.1841

cond.false.1836:                                  ; preds = %cond.true.1819
  %287 = load i32, i32* %src_len.addr, align 4
  %conv1837 = sext i32 %287 to i64
  %add1838 = add nsw i64 0, %conv1837
  %mul1839 = mul nsw i64 0, %add1838
  %sub1840 = sub nsw i64 %mul1839, 1
  br label %cond.end.1841

cond.end.1841:                                    ; preds = %cond.false.1836, %cond.true.1827
  %cond1842 = phi i64 [ %add1835, %cond.true.1827 ], [ %sub1840, %cond.false.1836 ]
  %div1843 = sdiv i64 %cond1842, 5
  %cmp1844 = icmp slt i64 %conv1820, %div1843
  br i1 %cmp1844, label %cond.true.1972, label %lor.lhs.false.1955

cond.false.1846:                                  ; preds = %cond.true.1815
  br i1 false, label %cond.true.1847, label %cond.false.1848

cond.true.1847:                                   ; preds = %cond.false.1846
  br i1 false, label %cond.true.1972, label %lor.lhs.false.1955

cond.false.1848:                                  ; preds = %cond.false.1846
  %288 = load i32, i32* %src_len.addr, align 4
  %conv1849 = sext i32 %288 to i64
  %add1850 = add nsw i64 0, %conv1849
  %mul1851 = mul nsw i64 0, %add1850
  %sub1852 = sub nsw i64 %mul1851, 1
  %cmp1853 = icmp slt i64 %sub1852, 0
  br i1 %cmp1853, label %cond.true.1855, label %cond.false.1874

cond.true.1855:                                   ; preds = %cond.false.1848
  %289 = load i32, i32* %src_len.addr, align 4
  %conv1856 = sext i32 %289 to i64
  %add1857 = add nsw i64 0, %conv1856
  %mul1858 = mul nsw i64 0, %add1857
  %add1859 = add nsw i64 %mul1858, 0
  %neg1860 = xor i64 %add1859, -1
  %cmp1861 = icmp eq i64 %neg1860, -1
  %conv1862 = zext i1 %cmp1861 to i32
  %sub1863 = sub nsw i32 0, %conv1862
  %conv1864 = sext i32 %sub1863 to i64
  %290 = load i32, i32* %src_len.addr, align 4
  %conv1865 = sext i32 %290 to i64
  %add1866 = add nsw i64 0, %conv1865
  %mul1867 = mul nsw i64 0, %add1866
  %add1868 = add nsw i64 %mul1867, 1
  %shl1869 = shl i64 %add1868, 62
  %sub1870 = sub nsw i64 %shl1869, 1
  %mul1871 = mul nsw i64 %sub1870, 2
  %add1872 = add nsw i64 %mul1871, 1
  %sub1873 = sub nsw i64 %conv1864, %add1872
  br label %cond.end.1879

cond.false.1874:                                  ; preds = %cond.false.1848
  %291 = load i32, i32* %src_len.addr, align 4
  %conv1875 = sext i32 %291 to i64
  %add1876 = add nsw i64 0, %conv1875
  %mul1877 = mul nsw i64 0, %add1876
  %add1878 = add nsw i64 %mul1877, 0
  br label %cond.end.1879

cond.end.1879:                                    ; preds = %cond.false.1874, %cond.true.1855
  %cond1880 = phi i64 [ %sub1873, %cond.true.1855 ], [ %add1878, %cond.false.1874 ]
  %div1881 = sdiv i64 %cond1880, 5
  %292 = load i32, i32* %src_len.addr, align 4
  %conv1882 = sext i32 %292 to i64
  %cmp1883 = icmp slt i64 %div1881, %conv1882
  br i1 %cmp1883, label %cond.true.1972, label %lor.lhs.false.1955

cond.false.1885:                                  ; preds = %lor.lhs.false.1814
  br i1 false, label %cond.true.1886, label %cond.false.1887

cond.true.1886:                                   ; preds = %cond.false.1885
  br i1 false, label %cond.true.1972, label %lor.lhs.false.1955

cond.false.1887:                                  ; preds = %cond.false.1885
  %293 = load i32, i32* %src_len.addr, align 4
  %conv1888 = sext i32 %293 to i64
  %cmp1889 = icmp slt i64 %conv1888, 0
  br i1 %cmp1889, label %cond.true.1891, label %cond.false.1928

cond.true.1891:                                   ; preds = %cond.false.1887
  %294 = load i32, i32* %src_len.addr, align 4
  %conv1892 = sext i32 %294 to i64
  %295 = load i32, i32* %src_len.addr, align 4
  %conv1893 = sext i32 %295 to i64
  %add1894 = add nsw i64 0, %conv1893
  %mul1895 = mul nsw i64 0, %add1894
  %sub1896 = sub nsw i64 %mul1895, 1
  %cmp1897 = icmp slt i64 %sub1896, 0
  br i1 %cmp1897, label %cond.true.1899, label %cond.false.1918

cond.true.1899:                                   ; preds = %cond.true.1891
  %296 = load i32, i32* %src_len.addr, align 4
  %conv1900 = sext i32 %296 to i64
  %add1901 = add nsw i64 0, %conv1900
  %mul1902 = mul nsw i64 0, %add1901
  %add1903 = add nsw i64 %mul1902, 0
  %neg1904 = xor i64 %add1903, -1
  %cmp1905 = icmp eq i64 %neg1904, -1
  %conv1906 = zext i1 %cmp1905 to i32
  %sub1907 = sub nsw i32 0, %conv1906
  %conv1908 = sext i32 %sub1907 to i64
  %297 = load i32, i32* %src_len.addr, align 4
  %conv1909 = sext i32 %297 to i64
  %add1910 = add nsw i64 0, %conv1909
  %mul1911 = mul nsw i64 0, %add1910
  %add1912 = add nsw i64 %mul1911, 1
  %shl1913 = shl i64 %add1912, 62
  %sub1914 = sub nsw i64 %shl1913, 1
  %mul1915 = mul nsw i64 %sub1914, 2
  %add1916 = add nsw i64 %mul1915, 1
  %sub1917 = sub nsw i64 %conv1908, %add1916
  br label %cond.end.1923

cond.false.1918:                                  ; preds = %cond.true.1891
  %298 = load i32, i32* %src_len.addr, align 4
  %conv1919 = sext i32 %298 to i64
  %add1920 = add nsw i64 0, %conv1919
  %mul1921 = mul nsw i64 0, %add1920
  %add1922 = add nsw i64 %mul1921, 0
  br label %cond.end.1923

cond.end.1923:                                    ; preds = %cond.false.1918, %cond.true.1899
  %cond1924 = phi i64 [ %sub1917, %cond.true.1899 ], [ %add1922, %cond.false.1918 ]
  %div1925 = sdiv i64 %cond1924, 5
  %cmp1926 = icmp slt i64 %conv1892, %div1925
  br i1 %cmp1926, label %cond.true.1972, label %lor.lhs.false.1955

cond.false.1928:                                  ; preds = %cond.false.1887
  %299 = load i32, i32* %src_len.addr, align 4
  %conv1929 = sext i32 %299 to i64
  %add1930 = add nsw i64 0, %conv1929
  %mul1931 = mul nsw i64 0, %add1930
  %sub1932 = sub nsw i64 %mul1931, 1
  %cmp1933 = icmp slt i64 %sub1932, 0
  br i1 %cmp1933, label %cond.true.1935, label %cond.false.1944

cond.true.1935:                                   ; preds = %cond.false.1928
  %300 = load i32, i32* %src_len.addr, align 4
  %conv1936 = sext i32 %300 to i64
  %add1937 = add nsw i64 0, %conv1936
  %mul1938 = mul nsw i64 0, %add1937
  %add1939 = add nsw i64 %mul1938, 1
  %shl1940 = shl i64 %add1939, 62
  %sub1941 = sub nsw i64 %shl1940, 1
  %mul1942 = mul nsw i64 %sub1941, 2
  %add1943 = add nsw i64 %mul1942, 1
  br label %cond.end.1949

cond.false.1944:                                  ; preds = %cond.false.1928
  %301 = load i32, i32* %src_len.addr, align 4
  %conv1945 = sext i32 %301 to i64
  %add1946 = add nsw i64 0, %conv1945
  %mul1947 = mul nsw i64 0, %add1946
  %sub1948 = sub nsw i64 %mul1947, 1
  br label %cond.end.1949

cond.end.1949:                                    ; preds = %cond.false.1944, %cond.true.1935
  %cond1950 = phi i64 [ %add1943, %cond.true.1935 ], [ %sub1948, %cond.false.1944 ]
  %div1951 = sdiv i64 %cond1950, 5
  %302 = load i32, i32* %src_len.addr, align 4
  %conv1952 = sext i32 %302 to i64
  %cmp1953 = icmp slt i64 %div1951, %conv1952
  br i1 %cmp1953, label %cond.true.1972, label %lor.lhs.false.1955

lor.lhs.false.1955:                               ; preds = %cond.end.1949, %cond.end.1923, %cond.true.1886, %cond.end.1879, %cond.true.1847, %cond.end.1841
  %303 = load i32, i32* %src_len.addr, align 4
  %conv1956 = sext i32 %303 to i64
  %mul1957 = mul nsw i64 %conv1956, 5
  %mul1958 = mul nsw i64 0, %mul1957
  %sub1959 = sub nsw i64 %mul1958, 1
  %cmp1960 = icmp slt i64 %sub1959, 0
  br i1 %cmp1960, label %land.lhs.true.1962, label %lor.lhs.false.1967

land.lhs.true.1962:                               ; preds = %lor.lhs.false.1955
  %304 = load i32, i32* %src_len.addr, align 4
  %conv1963 = sext i32 %304 to i64
  %mul1964 = mul nsw i64 %conv1963, 5
  %cmp1965 = icmp slt i64 %mul1964, -9223372036854775808
  br i1 %cmp1965, label %cond.true.1972, label %lor.lhs.false.1967

lor.lhs.false.1967:                               ; preds = %land.lhs.true.1962, %lor.lhs.false.1955
  %305 = load i32, i32* %src_len.addr, align 4
  %conv1968 = sext i32 %305 to i64
  %mul1969 = mul nsw i64 %conv1968, 5
  %cmp1970 = icmp slt i64 9223372036854775807, %mul1969
  br i1 %cmp1970, label %cond.true.1972, label %cond.false.1987

cond.true.1972:                                   ; preds = %lor.lhs.false.1967, %land.lhs.true.1962, %cond.end.1949, %cond.end.1923, %cond.true.1886, %cond.end.1879, %cond.true.1847, %cond.end.1841, %land.lhs.true.1810
  %306 = load i32, i32* %src_len.addr, align 4
  %conv1973 = sext i32 %306 to i64
  %mul1974 = mul i64 %conv1973, 5
  %cmp1975 = icmp ule i64 %mul1974, 9223372036854775807
  br i1 %cmp1975, label %cond.true.1977, label %cond.false.1980

cond.true.1977:                                   ; preds = %cond.true.1972
  %307 = load i32, i32* %src_len.addr, align 4
  %conv1978 = sext i32 %307 to i64
  %mul1979 = mul i64 %conv1978, 5
  br label %cond.end.1985

cond.false.1980:                                  ; preds = %cond.true.1972
  %308 = load i32, i32* %src_len.addr, align 4
  %conv1981 = sext i32 %308 to i64
  %mul1982 = mul i64 %conv1981, 5
  %sub1983 = sub i64 %mul1982, -9223372036854775808
  %add1984 = add nsw i64 %sub1983, -9223372036854775808
  br label %cond.end.1985

cond.end.1985:                                    ; preds = %cond.false.1980, %cond.true.1977
  %cond1986 = phi i64 [ %mul1979, %cond.true.1977 ], [ %add1984, %cond.false.1980 ]
  store i64 %cond1986, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1987:                                  ; preds = %lor.lhs.false.1967
  %309 = load i32, i32* %src_len.addr, align 4
  %conv1988 = sext i32 %309 to i64
  %mul1989 = mul i64 %conv1988, 5
  %cmp1990 = icmp ule i64 %mul1989, 9223372036854775807
  br i1 %cmp1990, label %cond.true.1992, label %cond.false.1995

cond.true.1992:                                   ; preds = %cond.false.1987
  %310 = load i32, i32* %src_len.addr, align 4
  %conv1993 = sext i32 %310 to i64
  %mul1994 = mul i64 %conv1993, 5
  br label %cond.end.2000

cond.false.1995:                                  ; preds = %cond.false.1987
  %311 = load i32, i32* %src_len.addr, align 4
  %conv1996 = sext i32 %311 to i64
  %mul1997 = mul i64 %conv1996, 5
  %sub1998 = sub i64 %mul1997, -9223372036854775808
  %add1999 = add nsw i64 %sub1998, -9223372036854775808
  br label %cond.end.2000

cond.end.2000:                                    ; preds = %cond.false.1995, %cond.true.1992
  %cond2001 = phi i64 [ %mul1994, %cond.true.1992 ], [ %add1999, %cond.false.1995 ]
  store i64 %cond2001, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

cond.false.2002:                                  ; preds = %cond.false.1774
  %312 = load i32, i32* %src_len.addr, align 4
  %add2003 = add nsw i32 0, %312
  %mul2004 = mul nsw i32 0, %add2003
  %sub2005 = sub nsw i32 %mul2004, 1
  %cmp2006 = icmp slt i32 %sub2005, 0
  br i1 %cmp2006, label %cond.true.2008, label %cond.false.2024

cond.true.2008:                                   ; preds = %cond.false.2002
  %313 = load i32, i32* %src_len.addr, align 4
  %add2009 = add nsw i32 0, %313
  %mul2010 = mul nsw i32 0, %add2009
  %add2011 = add nsw i32 %mul2010, 0
  %neg2012 = xor i32 %add2011, -1
  %cmp2013 = icmp eq i32 %neg2012, -1
  %conv2014 = zext i1 %cmp2013 to i32
  %sub2015 = sub nsw i32 0, %conv2014
  %314 = load i32, i32* %src_len.addr, align 4
  %add2016 = add nsw i32 0, %314
  %mul2017 = mul nsw i32 0, %add2016
  %add2018 = add nsw i32 %mul2017, 1
  %shl2019 = shl i32 %add2018, 30
  %sub2020 = sub nsw i32 %shl2019, 1
  %mul2021 = mul nsw i32 %sub2020, 2
  %add2022 = add nsw i32 %mul2021, 1
  %sub2023 = sub nsw i32 %sub2015, %add2022
  br label %cond.end.2028

cond.false.2024:                                  ; preds = %cond.false.2002
  %315 = load i32, i32* %src_len.addr, align 4
  %add2025 = add nsw i32 0, %315
  %mul2026 = mul nsw i32 0, %add2025
  %add2027 = add nsw i32 %mul2026, 0
  br label %cond.end.2028

cond.end.2028:                                    ; preds = %cond.false.2024, %cond.true.2008
  %cond2029 = phi i32 [ %sub2023, %cond.true.2008 ], [ %add2027, %cond.false.2024 ]
  %cmp2030 = icmp eq i32 %cond2029, 0
  br i1 %cmp2030, label %land.lhs.true.2032, label %lor.lhs.false.2035

land.lhs.true.2032:                               ; preds = %cond.end.2028
  %316 = load i32, i32* %src_len.addr, align 4
  %cmp2033 = icmp slt i32 %316, 0
  br i1 %cmp2033, label %cond.true.2170, label %lor.lhs.false.2035

lor.lhs.false.2035:                               ; preds = %land.lhs.true.2032, %cond.end.2028
  br i1 false, label %cond.true.2036, label %cond.false.2095

cond.true.2036:                                   ; preds = %lor.lhs.false.2035
  %317 = load i32, i32* %src_len.addr, align 4
  %cmp2037 = icmp slt i32 %317, 0
  br i1 %cmp2037, label %cond.true.2039, label %cond.false.2062

cond.true.2039:                                   ; preds = %cond.true.2036
  %318 = load i32, i32* %src_len.addr, align 4
  %319 = load i32, i32* %src_len.addr, align 4
  %add2040 = add nsw i32 0, %319
  %mul2041 = mul nsw i32 0, %add2040
  %sub2042 = sub nsw i32 %mul2041, 1
  %cmp2043 = icmp slt i32 %sub2042, 0
  br i1 %cmp2043, label %cond.true.2045, label %cond.false.2053

cond.true.2045:                                   ; preds = %cond.true.2039
  %320 = load i32, i32* %src_len.addr, align 4
  %add2046 = add nsw i32 0, %320
  %mul2047 = mul nsw i32 0, %add2046
  %add2048 = add nsw i32 %mul2047, 1
  %shl2049 = shl i32 %add2048, 30
  %sub2050 = sub nsw i32 %shl2049, 1
  %mul2051 = mul nsw i32 %sub2050, 2
  %add2052 = add nsw i32 %mul2051, 1
  br label %cond.end.2057

cond.false.2053:                                  ; preds = %cond.true.2039
  %321 = load i32, i32* %src_len.addr, align 4
  %add2054 = add nsw i32 0, %321
  %mul2055 = mul nsw i32 0, %add2054
  %sub2056 = sub nsw i32 %mul2055, 1
  br label %cond.end.2057

cond.end.2057:                                    ; preds = %cond.false.2053, %cond.true.2045
  %cond2058 = phi i32 [ %add2052, %cond.true.2045 ], [ %sub2056, %cond.false.2053 ]
  %div2059 = sdiv i32 %cond2058, 5
  %cmp2060 = icmp slt i32 %318, %div2059
  br i1 %cmp2060, label %cond.true.2170, label %lor.lhs.false.2154

cond.false.2062:                                  ; preds = %cond.true.2036
  br i1 false, label %cond.true.2063, label %cond.false.2064

cond.true.2063:                                   ; preds = %cond.false.2062
  br i1 false, label %cond.true.2170, label %lor.lhs.false.2154

cond.false.2064:                                  ; preds = %cond.false.2062
  %322 = load i32, i32* %src_len.addr, align 4
  %add2065 = add nsw i32 0, %322
  %mul2066 = mul nsw i32 0, %add2065
  %sub2067 = sub nsw i32 %mul2066, 1
  %cmp2068 = icmp slt i32 %sub2067, 0
  br i1 %cmp2068, label %cond.true.2070, label %cond.false.2086

cond.true.2070:                                   ; preds = %cond.false.2064
  %323 = load i32, i32* %src_len.addr, align 4
  %add2071 = add nsw i32 0, %323
  %mul2072 = mul nsw i32 0, %add2071
  %add2073 = add nsw i32 %mul2072, 0
  %neg2074 = xor i32 %add2073, -1
  %cmp2075 = icmp eq i32 %neg2074, -1
  %conv2076 = zext i1 %cmp2075 to i32
  %sub2077 = sub nsw i32 0, %conv2076
  %324 = load i32, i32* %src_len.addr, align 4
  %add2078 = add nsw i32 0, %324
  %mul2079 = mul nsw i32 0, %add2078
  %add2080 = add nsw i32 %mul2079, 1
  %shl2081 = shl i32 %add2080, 30
  %sub2082 = sub nsw i32 %shl2081, 1
  %mul2083 = mul nsw i32 %sub2082, 2
  %add2084 = add nsw i32 %mul2083, 1
  %sub2085 = sub nsw i32 %sub2077, %add2084
  br label %cond.end.2090

cond.false.2086:                                  ; preds = %cond.false.2064
  %325 = load i32, i32* %src_len.addr, align 4
  %add2087 = add nsw i32 0, %325
  %mul2088 = mul nsw i32 0, %add2087
  %add2089 = add nsw i32 %mul2088, 0
  br label %cond.end.2090

cond.end.2090:                                    ; preds = %cond.false.2086, %cond.true.2070
  %cond2091 = phi i32 [ %sub2085, %cond.true.2070 ], [ %add2089, %cond.false.2086 ]
  %div2092 = sdiv i32 %cond2091, 5
  %326 = load i32, i32* %src_len.addr, align 4
  %cmp2093 = icmp slt i32 %div2092, %326
  br i1 %cmp2093, label %cond.true.2170, label %lor.lhs.false.2154

cond.false.2095:                                  ; preds = %lor.lhs.false.2035
  br i1 false, label %cond.true.2096, label %cond.false.2097

cond.true.2096:                                   ; preds = %cond.false.2095
  br i1 false, label %cond.true.2170, label %lor.lhs.false.2154

cond.false.2097:                                  ; preds = %cond.false.2095
  %327 = load i32, i32* %src_len.addr, align 4
  %cmp2098 = icmp slt i32 %327, 0
  br i1 %cmp2098, label %cond.true.2100, label %cond.false.2131

cond.true.2100:                                   ; preds = %cond.false.2097
  %328 = load i32, i32* %src_len.addr, align 4
  %329 = load i32, i32* %src_len.addr, align 4
  %add2101 = add nsw i32 0, %329
  %mul2102 = mul nsw i32 0, %add2101
  %sub2103 = sub nsw i32 %mul2102, 1
  %cmp2104 = icmp slt i32 %sub2103, 0
  br i1 %cmp2104, label %cond.true.2106, label %cond.false.2122

cond.true.2106:                                   ; preds = %cond.true.2100
  %330 = load i32, i32* %src_len.addr, align 4
  %add2107 = add nsw i32 0, %330
  %mul2108 = mul nsw i32 0, %add2107
  %add2109 = add nsw i32 %mul2108, 0
  %neg2110 = xor i32 %add2109, -1
  %cmp2111 = icmp eq i32 %neg2110, -1
  %conv2112 = zext i1 %cmp2111 to i32
  %sub2113 = sub nsw i32 0, %conv2112
  %331 = load i32, i32* %src_len.addr, align 4
  %add2114 = add nsw i32 0, %331
  %mul2115 = mul nsw i32 0, %add2114
  %add2116 = add nsw i32 %mul2115, 1
  %shl2117 = shl i32 %add2116, 30
  %sub2118 = sub nsw i32 %shl2117, 1
  %mul2119 = mul nsw i32 %sub2118, 2
  %add2120 = add nsw i32 %mul2119, 1
  %sub2121 = sub nsw i32 %sub2113, %add2120
  br label %cond.end.2126

cond.false.2122:                                  ; preds = %cond.true.2100
  %332 = load i32, i32* %src_len.addr, align 4
  %add2123 = add nsw i32 0, %332
  %mul2124 = mul nsw i32 0, %add2123
  %add2125 = add nsw i32 %mul2124, 0
  br label %cond.end.2126

cond.end.2126:                                    ; preds = %cond.false.2122, %cond.true.2106
  %cond2127 = phi i32 [ %sub2121, %cond.true.2106 ], [ %add2125, %cond.false.2122 ]
  %div2128 = sdiv i32 %cond2127, 5
  %cmp2129 = icmp slt i32 %328, %div2128
  br i1 %cmp2129, label %cond.true.2170, label %lor.lhs.false.2154

cond.false.2131:                                  ; preds = %cond.false.2097
  %333 = load i32, i32* %src_len.addr, align 4
  %add2132 = add nsw i32 0, %333
  %mul2133 = mul nsw i32 0, %add2132
  %sub2134 = sub nsw i32 %mul2133, 1
  %cmp2135 = icmp slt i32 %sub2134, 0
  br i1 %cmp2135, label %cond.true.2137, label %cond.false.2145

cond.true.2137:                                   ; preds = %cond.false.2131
  %334 = load i32, i32* %src_len.addr, align 4
  %add2138 = add nsw i32 0, %334
  %mul2139 = mul nsw i32 0, %add2138
  %add2140 = add nsw i32 %mul2139, 1
  %shl2141 = shl i32 %add2140, 30
  %sub2142 = sub nsw i32 %shl2141, 1
  %mul2143 = mul nsw i32 %sub2142, 2
  %add2144 = add nsw i32 %mul2143, 1
  br label %cond.end.2149

cond.false.2145:                                  ; preds = %cond.false.2131
  %335 = load i32, i32* %src_len.addr, align 4
  %add2146 = add nsw i32 0, %335
  %mul2147 = mul nsw i32 0, %add2146
  %sub2148 = sub nsw i32 %mul2147, 1
  br label %cond.end.2149

cond.end.2149:                                    ; preds = %cond.false.2145, %cond.true.2137
  %cond2150 = phi i32 [ %add2144, %cond.true.2137 ], [ %sub2148, %cond.false.2145 ]
  %div2151 = sdiv i32 %cond2150, 5
  %336 = load i32, i32* %src_len.addr, align 4
  %cmp2152 = icmp slt i32 %div2151, %336
  br i1 %cmp2152, label %cond.true.2170, label %lor.lhs.false.2154

lor.lhs.false.2154:                               ; preds = %cond.end.2149, %cond.end.2126, %cond.true.2096, %cond.end.2090, %cond.true.2063, %cond.end.2057
  %337 = load i32, i32* %src_len.addr, align 4
  %mul2155 = mul nsw i32 %337, 5
  %mul2156 = mul nsw i32 0, %mul2155
  %sub2157 = sub nsw i32 %mul2156, 1
  %cmp2158 = icmp slt i32 %sub2157, 0
  br i1 %cmp2158, label %land.lhs.true.2160, label %lor.lhs.false.2165

land.lhs.true.2160:                               ; preds = %lor.lhs.false.2154
  %338 = load i32, i32* %src_len.addr, align 4
  %mul2161 = mul nsw i32 %338, 5
  %conv2162 = sext i32 %mul2161 to i64
  %cmp2163 = icmp slt i64 %conv2162, -9223372036854775808
  br i1 %cmp2163, label %cond.true.2170, label %lor.lhs.false.2165

lor.lhs.false.2165:                               ; preds = %land.lhs.true.2160, %lor.lhs.false.2154
  %339 = load i32, i32* %src_len.addr, align 4
  %mul2166 = mul nsw i32 %339, 5
  %conv2167 = sext i32 %mul2166 to i64
  %cmp2168 = icmp slt i64 9223372036854775807, %conv2167
  br i1 %cmp2168, label %cond.true.2170, label %cond.false.2185

cond.true.2170:                                   ; preds = %lor.lhs.false.2165, %land.lhs.true.2160, %cond.end.2149, %cond.end.2126, %cond.true.2096, %cond.end.2090, %cond.true.2063, %cond.end.2057, %land.lhs.true.2032
  %340 = load i32, i32* %src_len.addr, align 4
  %conv2171 = sext i32 %340 to i64
  %mul2172 = mul i64 %conv2171, 5
  %cmp2173 = icmp ule i64 %mul2172, 9223372036854775807
  br i1 %cmp2173, label %cond.true.2175, label %cond.false.2178

cond.true.2175:                                   ; preds = %cond.true.2170
  %341 = load i32, i32* %src_len.addr, align 4
  %conv2176 = sext i32 %341 to i64
  %mul2177 = mul i64 %conv2176, 5
  br label %cond.end.2183

cond.false.2178:                                  ; preds = %cond.true.2170
  %342 = load i32, i32* %src_len.addr, align 4
  %conv2179 = sext i32 %342 to i64
  %mul2180 = mul i64 %conv2179, 5
  %sub2181 = sub i64 %mul2180, -9223372036854775808
  %add2182 = add nsw i64 %sub2181, -9223372036854775808
  br label %cond.end.2183

cond.end.2183:                                    ; preds = %cond.false.2178, %cond.true.2175
  %cond2184 = phi i64 [ %mul2177, %cond.true.2175 ], [ %add2182, %cond.false.2178 ]
  store i64 %cond2184, i64* %required, align 8
  br i1 true, label %if.then, label %if.end

cond.false.2185:                                  ; preds = %lor.lhs.false.2165
  %343 = load i32, i32* %src_len.addr, align 4
  %conv2186 = sext i32 %343 to i64
  %mul2187 = mul i64 %conv2186, 5
  %cmp2188 = icmp ule i64 %mul2187, 9223372036854775807
  br i1 %cmp2188, label %cond.true.2190, label %cond.false.2193

cond.true.2190:                                   ; preds = %cond.false.2185
  %344 = load i32, i32* %src_len.addr, align 4
  %conv2191 = sext i32 %344 to i64
  %mul2192 = mul i64 %conv2191, 5
  br label %cond.end.2198

cond.false.2193:                                  ; preds = %cond.false.2185
  %345 = load i32, i32* %src_len.addr, align 4
  %conv2194 = sext i32 %345 to i64
  %mul2195 = mul i64 %conv2194, 5
  %sub2196 = sub i64 %mul2195, -9223372036854775808
  %add2197 = add nsw i64 %sub2196, -9223372036854775808
  br label %cond.end.2198

cond.end.2198:                                    ; preds = %cond.false.2193, %cond.true.2190
  %cond2199 = phi i64 [ %mul2192, %cond.true.2190 ], [ %add2197, %cond.false.2193 ]
  store i64 %cond2199, i64* %required, align 8
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.2198, %cond.end.2183, %cond.end.2000, %cond.end.1985, %cond.end.1772, %cond.end.1757, %cond.end.1574, %cond.end.1559, %cond.end.1344, %cond.end.1331, %cond.end.1152, %cond.end.1139, %cond.end.958, %cond.end.935, %cond.end.746, %cond.end.723, %cond.end.476, %cond.end.453, %cond.end.264, %cond.end.241
  call void @memory_full(i64 -1) #9
  unreachable

if.end:                                           ; preds = %cond.end.2198, %cond.end.2183, %cond.end.2000, %cond.end.1985, %cond.end.1772, %cond.end.1757, %cond.end.1574, %cond.end.1559, %cond.end.1344, %cond.end.1331, %cond.end.1152, %cond.end.1139, %cond.end.958, %cond.end.935, %cond.end.746, %cond.end.723, %cond.end.476, %cond.end.453, %cond.end.264, %cond.end.241
  %346 = load i64, i64* @encode_terminal_src_size, align 8
  %347 = load i64, i64* %required, align 8
  %cmp2200 = icmp slt i64 %346, %347
  br i1 %cmp2200, label %if.then.2202, label %if.end.2205

if.then.2202:                                     ; preds = %if.end
  %348 = load i8*, i8** @encode_terminal_src, align 8
  %349 = load i64, i64* %required, align 8
  %350 = load i64, i64* @encode_terminal_src_size, align 8
  %sub2203 = sub nsw i64 %349, %350
  %call2204 = call i8* @xpalloc(i8* %348, i64* @encode_terminal_src_size, i64 %sub2203, i64 -1, i64 1)
  store i8* %call2204, i8** @encode_terminal_src, align 8
  br label %if.end.2205

if.end.2205:                                      ; preds = %if.then.2202, %if.end
  %351 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call2206 = call i64 @coding_charset_list(%struct.coding_system* %351)
  store i64 %call2206, i64* %charset_list, align 8
  %352 = load i8*, i8** @encode_terminal_src, align 8
  store i8* %352, i8** %buf, align 8
  store i64 0, i64* %nchars, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.2752, %if.end.2205
  %353 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %354 = load %struct.glyph*, %struct.glyph** %src_end, align 8
  %cmp2207 = icmp ult %struct.glyph* %353, %354
  br i1 %cmp2207, label %while.body, label %while.end.2754

while.body:                                       ; preds = %while.cond
  %355 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %355, i32 0, i32 6
  %356 = bitcast i24* %type to i32*
  %bf.load = load i32, i32* %356, align 8
  %bf.clear = and i32 %bf.load, 7
  %cmp2209 = icmp eq i32 %bf.clear, 1
  br i1 %cmp2209, label %if.then.2211, label %if.else.2520

if.then.2211:                                     ; preds = %while.body
  %357 = load i8*, i8** %buf, align 8
  %358 = load i8*, i8** @encode_terminal_src, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %357 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %358 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %nbytes, align 8
  %359 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %359, i32 0, i32 9
  %cmp2213 = bitcast %union.anon.1* %u to %struct.anon.2*
  %360 = bitcast %struct.anon.2* %cmp2213 to i32*
  %bf.load2214 = load i32, i32* %360, align 4
  %bf.clear2215 = and i32 %bf.load2214, 1
  %bf.cast = trunc i32 %bf.clear2215 to i1
  br i1 %bf.cast, label %if.then.2216, label %if.else

if.then.2216:                                     ; preds = %if.then.2211
  %361 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %u2217 = getelementptr inbounds %struct.glyph, %struct.glyph* %361, i32 0, i32 9
  %cmp2218 = bitcast %union.anon.1* %u2217 to %struct.anon.2*
  %362 = bitcast %struct.anon.2* %cmp2218 to i32*
  %bf.load2219 = load i32, i32* %362, align 4
  %bf.lshr = lshr i32 %bf.load2219, 1
  %conv2220 = zext i32 %bf.lshr to i64
  %call2221 = call i64 @composition_gstring_from_id(i64 %conv2220)
  store i64 %call2221, i64* %gstring, align 8
  %363 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %363, i32 0, i32 8
  %cmp2222 = bitcast %union.anon* %slice to %struct.anon*
  %to = getelementptr inbounds %struct.anon, %struct.anon* %cmp2222, i32 0, i32 1
  %364 = load i32, i32* %to, align 4
  %365 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %slice2223 = getelementptr inbounds %struct.glyph, %struct.glyph* %365, i32 0, i32 8
  %cmp2224 = bitcast %union.anon* %slice2223 to %struct.anon*
  %from = getelementptr inbounds %struct.anon, %struct.anon* %cmp2224, i32 0, i32 0
  %366 = load i32, i32* %from, align 4
  %sub2225 = sub nsw i32 %364, %366
  %add2226 = add nsw i32 %sub2225, 1
  %conv2227 = sext i32 %add2226 to i64
  store i64 %conv2227, i64* %required, align 8
  br label %if.end.2234

if.else:                                          ; preds = %if.then.2211
  %367 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %u2228 = getelementptr inbounds %struct.glyph, %struct.glyph* %367, i32 0, i32 9
  %cmp2229 = bitcast %union.anon.1* %u2228 to %struct.anon.2*
  %368 = bitcast %struct.anon.2* %cmp2229 to i32*
  %bf.load2230 = load i32, i32* %368, align 4
  %bf.lshr2231 = lshr i32 %bf.load2230, 1
  %idxprom = zext i32 %bf.lshr2231 to i64
  %369 = load %struct.composition**, %struct.composition*** @composition_table, align 8
  %arrayidx = getelementptr inbounds %struct.composition*, %struct.composition** %369, i64 %idxprom
  %370 = load %struct.composition*, %struct.composition** %arrayidx, align 8
  store %struct.composition* %370, %struct.composition** %cmp2212, align 8
  %371 = load %struct.composition*, %struct.composition** %cmp2212, align 8
  %glyph_len = getelementptr inbounds %struct.composition, %struct.composition* %371, i32 0, i32 0
  %372 = load i32, i32* %glyph_len, align 4
  %conv2232 = sext i32 %372 to i64
  store i64 %conv2232, i64* %required, align 8
  %373 = load i64, i64* %required, align 8
  %mul2233 = mul nsw i64 %373, 5
  store i64 %mul2233, i64* %required, align 8
  br label %if.end.2234

if.end.2234:                                      ; preds = %if.else, %if.then.2216
  %374 = load i64, i64* @encode_terminal_src_size, align 8
  %375 = load i64, i64* %nbytes, align 8
  %sub2235 = sub nsw i64 %374, %375
  %376 = load i64, i64* %required, align 8
  %cmp2236 = icmp slt i64 %sub2235, %376
  br i1 %cmp2236, label %if.then.2238, label %if.end.2243

if.then.2238:                                     ; preds = %if.end.2234
  %377 = load i8*, i8** @encode_terminal_src, align 8
  %378 = load i64, i64* %required, align 8
  %379 = load i64, i64* @encode_terminal_src_size, align 8
  %380 = load i64, i64* %nbytes, align 8
  %sub2239 = sub nsw i64 %379, %380
  %sub2240 = sub nsw i64 %378, %sub2239
  %call2241 = call i8* @xpalloc(i8* %377, i64* @encode_terminal_src_size, i64 %sub2240, i64 -1, i64 1)
  store i8* %call2241, i8** @encode_terminal_src, align 8
  %381 = load i8*, i8** @encode_terminal_src, align 8
  %382 = load i64, i64* %nbytes, align 8
  %add.ptr2242 = getelementptr inbounds i8, i8* %381, i64 %382
  store i8* %add.ptr2242, i8** %buf, align 8
  br label %if.end.2243

if.end.2243:                                      ; preds = %if.then.2238, %if.end.2234
  %383 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %u2244 = getelementptr inbounds %struct.glyph, %struct.glyph* %383, i32 0, i32 9
  %cmp2245 = bitcast %union.anon.1* %u2244 to %struct.anon.2*
  %384 = bitcast %struct.anon.2* %cmp2245 to i32*
  %bf.load2246 = load i32, i32* %384, align 4
  %bf.clear2247 = and i32 %bf.load2246, 1
  %bf.cast2248 = trunc i32 %bf.clear2247 to i1
  br i1 %bf.cast2248, label %if.then.2249, label %if.else.2330

if.then.2249:                                     ; preds = %if.end.2243
  %385 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %slice2250 = getelementptr inbounds %struct.glyph, %struct.glyph* %385, i32 0, i32 8
  %cmp2251 = bitcast %union.anon* %slice2250 to %struct.anon*
  %from2252 = getelementptr inbounds %struct.anon, %struct.anon* %cmp2251, i32 0, i32 0
  %386 = load i32, i32* %from2252, align 4
  store i32 %386, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2249
  %387 = load i32, i32* %i, align 4
  %388 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %slice2253 = getelementptr inbounds %struct.glyph, %struct.glyph* %388, i32 0, i32 8
  %cmp2254 = bitcast %union.anon* %slice2253 to %struct.anon*
  %to2255 = getelementptr inbounds %struct.anon, %struct.anon* %cmp2254, i32 0, i32 1
  %389 = load i32, i32* %to2255, align 4
  %cmp2256 = icmp sle i32 %387, %389
  br i1 %cmp2256, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %390 = load i64, i64* %gstring, align 8
  %391 = load i32, i32* %i, align 4
  %add2258 = add nsw i32 %391, 2
  %conv2259 = sext i32 %add2258 to i64
  %call2260 = call i64 @AREF(i64 %390, i64 %conv2259)
  store i64 %call2260, i64* %g, align 8
  %392 = load i64, i64* %g, align 8
  %call2261 = call i64 @AREF(i64 %392, i64 2)
  %shr = ashr i64 %call2261, 2
  %conv2262 = trunc i64 %shr to i32
  store i32 %conv2262, i32* %c, align 4
  %393 = load i32, i32* %c, align 4
  %394 = load i64, i64* %charset_list, align 8
  %call2263 = call %struct.charset* @char_charset(i32 %393, i64 %394, i32* null)
  %tobool = icmp ne %struct.charset* %call2263, null
  br i1 %tobool, label %if.end.2265, label %if.then.2264

if.then.2264:                                     ; preds = %for.body
  store i32 63, i32* %c, align 4
  br label %if.end.2265

if.end.2265:                                      ; preds = %if.then.2264, %for.body
  br i1 true, label %cond.true.2266, label %cond.false.2270

cond.true.2266:                                   ; preds = %if.end.2265
  %395 = load i32, i32* %c, align 4
  %add2267 = add i32 %395, 0
  %cmp2268 = icmp ule i32 %add2267, 127
  br i1 %cmp2268, label %cond.true.2275, label %cond.false.2278

cond.false.2270:                                  ; preds = %if.end.2265
  %396 = load i32, i32* %c, align 4
  %conv2271 = sext i32 %396 to i64
  %add2272 = add i64 %conv2271, 0
  %cmp2273 = icmp ule i64 %add2272, 127
  br i1 %cmp2273, label %cond.true.2275, label %cond.false.2278

cond.true.2275:                                   ; preds = %cond.false.2270, %cond.true.2266
  %397 = load i32, i32* %c, align 4
  %conv2276 = trunc i32 %397 to i8
  %398 = load i8*, i8** %buf, align 8
  %arrayidx2277 = getelementptr inbounds i8, i8* %398, i64 0
  store i8 %conv2276, i8* %arrayidx2277, align 1
  br label %cond.end.2325

cond.false.2278:                                  ; preds = %cond.false.2270, %cond.true.2266
  br i1 true, label %cond.true.2279, label %cond.false.2283

cond.true.2279:                                   ; preds = %cond.false.2278
  %399 = load i32, i32* %c, align 4
  %add2280 = add i32 %399, 0
  %cmp2281 = icmp ule i32 %add2280, 2047
  br i1 %cmp2281, label %cond.true.2288, label %cond.false.2295

cond.false.2283:                                  ; preds = %cond.false.2278
  %400 = load i32, i32* %c, align 4
  %conv2284 = sext i32 %400 to i64
  %add2285 = add i64 %conv2284, 0
  %cmp2286 = icmp ule i64 %add2285, 2047
  br i1 %cmp2286, label %cond.true.2288, label %cond.false.2295

cond.true.2288:                                   ; preds = %cond.false.2283, %cond.true.2279
  %401 = load i32, i32* %c, align 4
  %shr2289 = ashr i32 %401, 6
  %or = or i32 192, %shr2289
  %conv2290 = trunc i32 %or to i8
  %402 = load i8*, i8** %buf, align 8
  %arrayidx2291 = getelementptr inbounds i8, i8* %402, i64 0
  store i8 %conv2290, i8* %arrayidx2291, align 1
  %403 = load i32, i32* %c, align 4
  %and = and i32 %403, 63
  %or2292 = or i32 128, %and
  %conv2293 = trunc i32 %or2292 to i8
  %404 = load i8*, i8** %buf, align 8
  %arrayidx2294 = getelementptr inbounds i8, i8* %404, i64 1
  store i8 %conv2293, i8* %arrayidx2294, align 1
  br label %cond.end.2323

cond.false.2295:                                  ; preds = %cond.false.2283, %cond.true.2279
  br i1 true, label %cond.true.2296, label %cond.false.2300

cond.true.2296:                                   ; preds = %cond.false.2295
  %405 = load i32, i32* %c, align 4
  %add2297 = add i32 %405, 0
  %cmp2298 = icmp ule i32 %add2297, 65535
  br i1 %cmp2298, label %cond.true.2305, label %cond.false.2319

cond.false.2300:                                  ; preds = %cond.false.2295
  %406 = load i32, i32* %c, align 4
  %conv2301 = sext i32 %406 to i64
  %add2302 = add i64 %conv2301, 0
  %cmp2303 = icmp ule i64 %add2302, 65535
  br i1 %cmp2303, label %cond.true.2305, label %cond.false.2319

cond.true.2305:                                   ; preds = %cond.false.2300, %cond.true.2296
  %407 = load i32, i32* %c, align 4
  %shr2306 = ashr i32 %407, 12
  %or2307 = or i32 224, %shr2306
  %conv2308 = trunc i32 %or2307 to i8
  %408 = load i8*, i8** %buf, align 8
  %arrayidx2309 = getelementptr inbounds i8, i8* %408, i64 0
  store i8 %conv2308, i8* %arrayidx2309, align 1
  %409 = load i32, i32* %c, align 4
  %shr2310 = ashr i32 %409, 6
  %and2311 = and i32 %shr2310, 63
  %or2312 = or i32 128, %and2311
  %conv2313 = trunc i32 %or2312 to i8
  %410 = load i8*, i8** %buf, align 8
  %arrayidx2314 = getelementptr inbounds i8, i8* %410, i64 1
  store i8 %conv2313, i8* %arrayidx2314, align 1
  %411 = load i32, i32* %c, align 4
  %and2315 = and i32 %411, 63
  %or2316 = or i32 128, %and2315
  %conv2317 = trunc i32 %or2316 to i8
  %412 = load i8*, i8** %buf, align 8
  %arrayidx2318 = getelementptr inbounds i8, i8* %412, i64 2
  store i8 %conv2317, i8* %arrayidx2318, align 1
  br label %cond.end.2321

cond.false.2319:                                  ; preds = %cond.false.2300, %cond.true.2296
  %413 = load i32, i32* %c, align 4
  %414 = load i8*, i8** %buf, align 8
  %call2320 = call i32 @char_string(i32 %413, i8* %414)
  br label %cond.end.2321

cond.end.2321:                                    ; preds = %cond.false.2319, %cond.true.2305
  %cond2322 = phi i32 [ 3, %cond.true.2305 ], [ %call2320, %cond.false.2319 ]
  br label %cond.end.2323

cond.end.2323:                                    ; preds = %cond.end.2321, %cond.true.2288
  %cond2324 = phi i32 [ 2, %cond.true.2288 ], [ %cond2322, %cond.end.2321 ]
  br label %cond.end.2325

cond.end.2325:                                    ; preds = %cond.end.2323, %cond.true.2275
  %cond2326 = phi i32 [ 1, %cond.true.2275 ], [ %cond2324, %cond.end.2323 ]
  %415 = load i8*, i8** %buf, align 8
  %idx.ext2327 = sext i32 %cond2326 to i64
  %add.ptr2328 = getelementptr inbounds i8, i8* %415, i64 %idx.ext2327
  store i8* %add.ptr2328, i8** %buf, align 8
  %416 = load i64, i64* %nchars, align 8
  %inc = add nsw i64 %416, 1
  store i64 %inc, i64* %nchars, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end.2325
  %417 = load i32, i32* %i, align 4
  %inc2329 = add nsw i32 %417, 1
  store i32 %inc2329, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.2519

if.else.2330:                                     ; preds = %if.end.2243
  store i32 0, i32* %i, align 4
  br label %for.cond.2331

for.cond.2331:                                    ; preds = %for.inc.2516, %if.else.2330
  %418 = load i32, i32* %i, align 4
  %419 = load %struct.composition*, %struct.composition** %cmp2212, align 8
  %glyph_len2332 = getelementptr inbounds %struct.composition, %struct.composition* %419, i32 0, i32 0
  %420 = load i32, i32* %glyph_len2332, align 4
  %cmp2333 = icmp slt i32 %418, %420
  br i1 %cmp2333, label %for.body.2335, label %for.end.2518

for.body.2335:                                    ; preds = %for.cond.2331
  %421 = load %struct.composition*, %struct.composition** %cmp2212, align 8
  %method = getelementptr inbounds %struct.composition, %struct.composition* %421, i32 0, i32 7
  %422 = load i32, i32* %method, align 4
  %cmp2337 = icmp eq i32 %422, 3
  br i1 %cmp2337, label %cond.true.2339, label %cond.false.2341

cond.true.2339:                                   ; preds = %for.body.2335
  %423 = load i32, i32* %i, align 4
  %mul2340 = mul nsw i32 %423, 2
  br label %cond.end.2342

cond.false.2341:                                  ; preds = %for.body.2335
  %424 = load i32, i32* %i, align 4
  br label %cond.end.2342

cond.end.2342:                                    ; preds = %cond.false.2341, %cond.true.2339
  %cond2343 = phi i32 [ %mul2340, %cond.true.2339 ], [ %424, %cond.false.2341 ]
  %idxprom2344 = sext i32 %cond2343 to i64
  %425 = load %struct.composition*, %struct.composition** %cmp2212, align 8
  %hash_index = getelementptr inbounds %struct.composition, %struct.composition* %425, i32 0, i32 8
  %426 = load i64, i64* %hash_index, align 8
  %mul2345 = mul nsw i64 %426, 2
  %427 = load i64, i64* @composition_hash_table, align 8
  %call2346 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %427)
  %key_and_value = getelementptr inbounds %struct.Lisp_Hash_Table, %struct.Lisp_Hash_Table* %call2346, i32 0, i32 9
  %428 = load i64, i64* %key_and_value, align 8
  %call2347 = call %struct.Lisp_Vector* @XVECTOR(i64 %428)
  %contents2348 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call2347, i32 0, i32 1
  %arrayidx2349 = getelementptr inbounds [0 x i64], [0 x i64]* %contents2348, i32 0, i64 %mul2345
  %429 = load i64, i64* %arrayidx2349, align 8
  %call2350 = call %struct.Lisp_Vector* @XVECTOR(i64 %429)
  %contents2351 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call2350, i32 0, i32 1
  %arrayidx2352 = getelementptr inbounds [0 x i64], [0 x i64]* %contents2351, i32 0, i64 %idxprom2344
  %430 = load i64, i64* %arrayidx2352, align 8
  %shr2353 = ashr i64 %430, 2
  %conv2354 = trunc i64 %shr2353 to i32
  store i32 %conv2354, i32* %c2336, align 4
  %431 = load i32, i32* %c2336, align 4
  %cmp2355 = icmp eq i32 %431, 9
  br i1 %cmp2355, label %if.then.2357, label %if.end.2358

if.then.2357:                                     ; preds = %cond.end.2342
  br label %for.inc.2516

if.end.2358:                                      ; preds = %cond.end.2342
  %432 = load i32, i32* %c2336, align 4
  %433 = load i64, i64* %charset_list, align 8
  %call2359 = call %struct.charset* @char_charset(i32 %432, i64 %433, i32* null)
  %tobool2360 = icmp ne %struct.charset* %call2359, null
  br i1 %tobool2360, label %if.then.2361, label %if.else.2448

if.then.2361:                                     ; preds = %if.end.2358
  br i1 true, label %cond.true.2362, label %cond.false.2366

cond.true.2362:                                   ; preds = %if.then.2361
  %434 = load i32, i32* %c2336, align 4
  %add2363 = add i32 %434, 0
  %cmp2364 = icmp ult i32 %add2363, 128
  br i1 %cmp2364, label %cond.true.2371, label %cond.false.2407

cond.false.2366:                                  ; preds = %if.then.2361
  %435 = load i32, i32* %c2336, align 4
  %conv2367 = sext i32 %435 to i64
  %add2368 = add i64 %conv2367, 0
  %cmp2369 = icmp ult i64 %add2368, 128
  br i1 %cmp2369, label %cond.true.2371, label %cond.false.2407

cond.true.2371:                                   ; preds = %cond.false.2366, %cond.true.2362
  %436 = load i32, i32* %c2336, align 4
  %cmp2372 = icmp slt i32 %436, 32
  br i1 %cmp2372, label %cond.true.2374, label %cond.false.2393

cond.true.2374:                                   ; preds = %cond.true.2371
  %437 = load i32, i32* %c2336, align 4
  %cmp2375 = icmp eq i32 %437, 9
  br i1 %cmp2375, label %cond.true.2377, label %cond.false.2380

cond.true.2377:                                   ; preds = %cond.true.2374
  %438 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %tab_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %438, i32 0, i32 19
  %439 = load i64, i64* %tab_width_, align 8
  %shr2378 = ashr i64 %439, 2
  %call2379 = call i32 @sanitize_tab_width(i64 %shr2378)
  br label %cond.end.2391

cond.false.2380:                                  ; preds = %cond.true.2374
  %440 = load i32, i32* %c2336, align 4
  %cmp2381 = icmp eq i32 %440, 10
  br i1 %cmp2381, label %cond.true.2383, label %cond.false.2384

cond.true.2383:                                   ; preds = %cond.false.2380
  br label %cond.end.2389

cond.false.2384:                                  ; preds = %cond.false.2380
  %441 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_ = getelementptr inbounds %struct.buffer, %struct.buffer* %441, i32 0, i32 29
  %442 = load i64, i64* %ctl_arrow_, align 8
  %call2385 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2386 = icmp eq i64 %442, %call2385
  %cond2388 = select i1 %cmp2386, i32 4, i32 2
  br label %cond.end.2389

cond.end.2389:                                    ; preds = %cond.false.2384, %cond.true.2383
  %cond2390 = phi i32 [ 0, %cond.true.2383 ], [ %cond2388, %cond.false.2384 ]
  br label %cond.end.2391

cond.end.2391:                                    ; preds = %cond.end.2389, %cond.true.2377
  %cond2392 = phi i32 [ %call2379, %cond.true.2377 ], [ %cond2390, %cond.end.2389 ]
  br label %cond.end.2405

cond.false.2393:                                  ; preds = %cond.true.2371
  %443 = load i32, i32* %c2336, align 4
  %cmp2394 = icmp slt i32 %443, 127
  br i1 %cmp2394, label %cond.true.2396, label %cond.false.2397

cond.true.2396:                                   ; preds = %cond.false.2393
  br label %cond.end.2403

cond.false.2397:                                  ; preds = %cond.false.2393
  %444 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_2398 = getelementptr inbounds %struct.buffer, %struct.buffer* %444, i32 0, i32 29
  %445 = load i64, i64* %ctl_arrow_2398, align 8
  %call2399 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2400 = icmp eq i64 %445, %call2399
  %cond2402 = select i1 %cmp2400, i32 4, i32 2
  br label %cond.end.2403

cond.end.2403:                                    ; preds = %cond.false.2397, %cond.true.2396
  %cond2404 = phi i32 [ 1, %cond.true.2396 ], [ %cond2402, %cond.false.2397 ]
  br label %cond.end.2405

cond.end.2405:                                    ; preds = %cond.end.2403, %cond.end.2391
  %cond2406 = phi i32 [ %cond2392, %cond.end.2391 ], [ %cond2404, %cond.end.2403 ]
  br label %cond.end.2411

cond.false.2407:                                  ; preds = %cond.false.2366, %cond.true.2362
  %446 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  %447 = load i32, i32* %c2336, align 4
  %call2408 = call i64 @CHAR_TABLE_REF(i64 %446, i32 %447)
  %shr2409 = ashr i64 %call2408, 2
  %call2410 = call i32 @sanitize_char_width(i64 %shr2409)
  br label %cond.end.2411

cond.end.2411:                                    ; preds = %cond.false.2407, %cond.end.2405
  %cond2412 = phi i32 [ %cond2406, %cond.end.2405 ], [ %call2410, %cond.false.2407 ]
  %cmp2413 = icmp eq i32 %cond2412, 0
  br i1 %cmp2413, label %land.lhs.true.2415, label %if.end.2447

land.lhs.true.2415:                               ; preds = %cond.end.2411
  %448 = load i32, i32* %i, align 4
  %cmp2416 = icmp sgt i32 %448, 0
  br i1 %cmp2416, label %land.lhs.true.2418, label %if.end.2447

land.lhs.true.2418:                               ; preds = %land.lhs.true.2415
  %449 = load %struct.composition*, %struct.composition** %cmp2212, align 8
  %method2419 = getelementptr inbounds %struct.composition, %struct.composition* %449, i32 0, i32 7
  %450 = load i32, i32* %method2419, align 4
  %cmp2420 = icmp eq i32 %450, 3
  br i1 %cmp2420, label %cond.true.2422, label %cond.false.2425

cond.true.2422:                                   ; preds = %land.lhs.true.2418
  %451 = load i32, i32* %i, align 4
  %sub2423 = sub nsw i32 %451, 1
  %mul2424 = mul nsw i32 %sub2423, 2
  br label %cond.end.2427

cond.false.2425:                                  ; preds = %land.lhs.true.2418
  %452 = load i32, i32* %i, align 4
  %sub2426 = sub nsw i32 %452, 1
  br label %cond.end.2427

cond.end.2427:                                    ; preds = %cond.false.2425, %cond.true.2422
  %cond2428 = phi i32 [ %mul2424, %cond.true.2422 ], [ %sub2426, %cond.false.2425 ]
  %idxprom2429 = sext i32 %cond2428 to i64
  %453 = load %struct.composition*, %struct.composition** %cmp2212, align 8
  %hash_index2430 = getelementptr inbounds %struct.composition, %struct.composition* %453, i32 0, i32 8
  %454 = load i64, i64* %hash_index2430, align 8
  %mul2431 = mul nsw i64 %454, 2
  %455 = load i64, i64* @composition_hash_table, align 8
  %call2432 = call %struct.Lisp_Hash_Table* @XHASH_TABLE(i64 %455)
  %key_and_value2433 = getelementptr inbounds %struct.Lisp_Hash_Table, %struct.Lisp_Hash_Table* %call2432, i32 0, i32 9
  %456 = load i64, i64* %key_and_value2433, align 8
  %call2434 = call %struct.Lisp_Vector* @XVECTOR(i64 %456)
  %contents2435 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call2434, i32 0, i32 1
  %arrayidx2436 = getelementptr inbounds [0 x i64], [0 x i64]* %contents2435, i32 0, i64 %mul2431
  %457 = load i64, i64* %arrayidx2436, align 8
  %call2437 = call %struct.Lisp_Vector* @XVECTOR(i64 %457)
  %contents2438 = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call2437, i32 0, i32 1
  %arrayidx2439 = getelementptr inbounds [0 x i64], [0 x i64]* %contents2438, i32 0, i64 %idxprom2429
  %458 = load i64, i64* %arrayidx2439, align 8
  %shr2440 = ashr i64 %458, 2
  %cmp2441 = icmp eq i64 %shr2440, 9
  br i1 %cmp2441, label %if.then.2443, label %if.end.2447

if.then.2443:                                     ; preds = %cond.end.2427
  %459 = load i8*, i8** %buf, align 8
  %arrayidx2444 = getelementptr inbounds i8, i8* %459, i64 0
  store i8 32, i8* %arrayidx2444, align 1
  %460 = load i8*, i8** %buf, align 8
  %add.ptr2445 = getelementptr inbounds i8, i8* %460, i64 1
  store i8* %add.ptr2445, i8** %buf, align 8
  %461 = load i64, i64* %nchars, align 8
  %inc2446 = add nsw i64 %461, 1
  store i64 %inc2446, i64* %nchars, align 8
  br label %if.end.2447

if.end.2447:                                      ; preds = %if.then.2443, %cond.end.2427, %land.lhs.true.2415, %cond.end.2411
  br label %if.end.2449

if.else.2448:                                     ; preds = %if.end.2358
  store i32 63, i32* %c2336, align 4
  br label %if.end.2449

if.end.2449:                                      ; preds = %if.else.2448, %if.end.2447
  br i1 true, label %cond.true.2450, label %cond.false.2454

cond.true.2450:                                   ; preds = %if.end.2449
  %462 = load i32, i32* %c2336, align 4
  %add2451 = add i32 %462, 0
  %cmp2452 = icmp ule i32 %add2451, 127
  br i1 %cmp2452, label %cond.true.2459, label %cond.false.2462

cond.false.2454:                                  ; preds = %if.end.2449
  %463 = load i32, i32* %c2336, align 4
  %conv2455 = sext i32 %463 to i64
  %add2456 = add i64 %conv2455, 0
  %cmp2457 = icmp ule i64 %add2456, 127
  br i1 %cmp2457, label %cond.true.2459, label %cond.false.2462

cond.true.2459:                                   ; preds = %cond.false.2454, %cond.true.2450
  %464 = load i32, i32* %c2336, align 4
  %conv2460 = trunc i32 %464 to i8
  %465 = load i8*, i8** %buf, align 8
  %arrayidx2461 = getelementptr inbounds i8, i8* %465, i64 0
  store i8 %conv2460, i8* %arrayidx2461, align 1
  br label %cond.end.2511

cond.false.2462:                                  ; preds = %cond.false.2454, %cond.true.2450
  br i1 true, label %cond.true.2463, label %cond.false.2467

cond.true.2463:                                   ; preds = %cond.false.2462
  %466 = load i32, i32* %c2336, align 4
  %add2464 = add i32 %466, 0
  %cmp2465 = icmp ule i32 %add2464, 2047
  br i1 %cmp2465, label %cond.true.2472, label %cond.false.2481

cond.false.2467:                                  ; preds = %cond.false.2462
  %467 = load i32, i32* %c2336, align 4
  %conv2468 = sext i32 %467 to i64
  %add2469 = add i64 %conv2468, 0
  %cmp2470 = icmp ule i64 %add2469, 2047
  br i1 %cmp2470, label %cond.true.2472, label %cond.false.2481

cond.true.2472:                                   ; preds = %cond.false.2467, %cond.true.2463
  %468 = load i32, i32* %c2336, align 4
  %shr2473 = ashr i32 %468, 6
  %or2474 = or i32 192, %shr2473
  %conv2475 = trunc i32 %or2474 to i8
  %469 = load i8*, i8** %buf, align 8
  %arrayidx2476 = getelementptr inbounds i8, i8* %469, i64 0
  store i8 %conv2475, i8* %arrayidx2476, align 1
  %470 = load i32, i32* %c2336, align 4
  %and2477 = and i32 %470, 63
  %or2478 = or i32 128, %and2477
  %conv2479 = trunc i32 %or2478 to i8
  %471 = load i8*, i8** %buf, align 8
  %arrayidx2480 = getelementptr inbounds i8, i8* %471, i64 1
  store i8 %conv2479, i8* %arrayidx2480, align 1
  br label %cond.end.2509

cond.false.2481:                                  ; preds = %cond.false.2467, %cond.true.2463
  br i1 true, label %cond.true.2482, label %cond.false.2486

cond.true.2482:                                   ; preds = %cond.false.2481
  %472 = load i32, i32* %c2336, align 4
  %add2483 = add i32 %472, 0
  %cmp2484 = icmp ule i32 %add2483, 65535
  br i1 %cmp2484, label %cond.true.2491, label %cond.false.2505

cond.false.2486:                                  ; preds = %cond.false.2481
  %473 = load i32, i32* %c2336, align 4
  %conv2487 = sext i32 %473 to i64
  %add2488 = add i64 %conv2487, 0
  %cmp2489 = icmp ule i64 %add2488, 65535
  br i1 %cmp2489, label %cond.true.2491, label %cond.false.2505

cond.true.2491:                                   ; preds = %cond.false.2486, %cond.true.2482
  %474 = load i32, i32* %c2336, align 4
  %shr2492 = ashr i32 %474, 12
  %or2493 = or i32 224, %shr2492
  %conv2494 = trunc i32 %or2493 to i8
  %475 = load i8*, i8** %buf, align 8
  %arrayidx2495 = getelementptr inbounds i8, i8* %475, i64 0
  store i8 %conv2494, i8* %arrayidx2495, align 1
  %476 = load i32, i32* %c2336, align 4
  %shr2496 = ashr i32 %476, 6
  %and2497 = and i32 %shr2496, 63
  %or2498 = or i32 128, %and2497
  %conv2499 = trunc i32 %or2498 to i8
  %477 = load i8*, i8** %buf, align 8
  %arrayidx2500 = getelementptr inbounds i8, i8* %477, i64 1
  store i8 %conv2499, i8* %arrayidx2500, align 1
  %478 = load i32, i32* %c2336, align 4
  %and2501 = and i32 %478, 63
  %or2502 = or i32 128, %and2501
  %conv2503 = trunc i32 %or2502 to i8
  %479 = load i8*, i8** %buf, align 8
  %arrayidx2504 = getelementptr inbounds i8, i8* %479, i64 2
  store i8 %conv2503, i8* %arrayidx2504, align 1
  br label %cond.end.2507

cond.false.2505:                                  ; preds = %cond.false.2486, %cond.true.2482
  %480 = load i32, i32* %c2336, align 4
  %481 = load i8*, i8** %buf, align 8
  %call2506 = call i32 @char_string(i32 %480, i8* %481)
  br label %cond.end.2507

cond.end.2507:                                    ; preds = %cond.false.2505, %cond.true.2491
  %cond2508 = phi i32 [ 3, %cond.true.2491 ], [ %call2506, %cond.false.2505 ]
  br label %cond.end.2509

cond.end.2509:                                    ; preds = %cond.end.2507, %cond.true.2472
  %cond2510 = phi i32 [ 2, %cond.true.2472 ], [ %cond2508, %cond.end.2507 ]
  br label %cond.end.2511

cond.end.2511:                                    ; preds = %cond.end.2509, %cond.true.2459
  %cond2512 = phi i32 [ 1, %cond.true.2459 ], [ %cond2510, %cond.end.2509 ]
  %482 = load i8*, i8** %buf, align 8
  %idx.ext2513 = sext i32 %cond2512 to i64
  %add.ptr2514 = getelementptr inbounds i8, i8* %482, i64 %idx.ext2513
  store i8* %add.ptr2514, i8** %buf, align 8
  %483 = load i64, i64* %nchars, align 8
  %inc2515 = add nsw i64 %483, 1
  store i64 %inc2515, i64* %nchars, align 8
  br label %for.inc.2516

for.inc.2516:                                     ; preds = %cond.end.2511, %if.then.2357
  %484 = load i32, i32* %i, align 4
  %inc2517 = add nsw i32 %484, 1
  store i32 %inc2517, i32* %i, align 4
  br label %for.cond.2331

for.end.2518:                                     ; preds = %for.cond.2331
  br label %if.end.2519

if.end.2519:                                      ; preds = %for.end.2518, %for.end
  br label %if.end.2752

if.else.2520:                                     ; preds = %while.body
  %485 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %485, i32 0, i32 6
  %486 = bitcast i24* %padding_p to i32*
  %bf.load2521 = load i32, i32* %486, align 8
  %bf.lshr2522 = lshr i32 %bf.load2521, 7
  %bf.clear2523 = and i32 %bf.lshr2522, 1
  %bf.cast2524 = trunc i32 %bf.clear2523 to i1
  br i1 %bf.cast2524, label %if.end.2751, label %if.then.2525

if.then.2525:                                     ; preds = %if.else.2520
  %call2528 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2528, i64* %string, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.2525
  %487 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %arrayidx2529 = getelementptr inbounds %struct.glyph, %struct.glyph* %487, i64 0
  %u2530 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx2529, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u2530 to i32*
  %488 = load i32, i32* %ch, align 4
  %cmp2531 = icmp ult i32 %488, 256
  br i1 %cmp2531, label %if.then.2533, label %if.else.2542

if.then.2533:                                     ; preds = %do.body
  %489 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %arrayidx2534 = getelementptr inbounds %struct.glyph, %struct.glyph* %489, i64 0
  %u2535 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx2534, i32 0, i32 9
  %ch2536 = bitcast %union.anon.1* %u2535 to i32*
  %490 = load i32, i32* %ch2536, align 4
  %ch2537 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g2526, i32 0, i32 0
  store i32 %490, i32* %ch2537, align 4
  %491 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %arrayidx2538 = getelementptr inbounds %struct.glyph, %struct.glyph* %491, i64 0
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx2538, i32 0, i32 7
  %492 = bitcast i24* %face_id to i32*
  %bf.load2539 = load i32, i32* %492, align 4
  %bf.clear2540 = and i32 %bf.load2539, 1048575
  %face_id2541 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g2526, i32 0, i32 1
  store i32 %bf.clear2540, i32* %face_id2541, align 4
  br label %if.end.2545

if.else.2542:                                     ; preds = %do.body
  %ch2543 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g2526, i32 0, i32 0
  store i32 -1, i32* %ch2543, align 4
  %face_id2544 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g2526, i32 0, i32 1
  store i32 0, i32* %face_id2544, align 4
  br label %if.end.2545

if.end.2545:                                      ; preds = %if.else.2542, %if.then.2533
  br label %do.end

do.end:                                           ; preds = %if.end.2545
  %493 = bitcast %struct.GLYPH* %g2526 to i64*
  %494 = load i64, i64* %493, align 4
  %call2546 = call i32 @GLYPH_CHAR(i64 %494)
  %cmp2547 = icmp slt i32 %call2546, 0
  br i1 %cmp2547, label %if.then.2563, label %lor.lhs.false.2549

lor.lhs.false.2549:                               ; preds = %do.end
  %495 = bitcast %struct.GLYPH* %g2526 to i64*
  %496 = load i64, i64* %495, align 4
  %call2550 = call i32 @GLYPH_FACE(i64 %496)
  %cmp2551 = icmp ne i32 %call2550, 0
  br i1 %cmp2551, label %if.then.2563, label %lor.lhs.false.2553

lor.lhs.false.2553:                               ; preds = %lor.lhs.false.2549
  %497 = bitcast %struct.GLYPH* %g2526 to i64*
  %498 = load i64, i64* %497, align 4
  %call2554 = call i32 @GLYPH_CHAR(i64 %498)
  %conv2555 = sext i32 %call2554 to i64
  %499 = load i64, i64* %tlen, align 8
  %cmp2556 = icmp sge i64 %conv2555, %499
  br i1 %cmp2556, label %if.then.2563, label %lor.lhs.false.2558

lor.lhs.false.2558:                               ; preds = %lor.lhs.false.2553
  %500 = bitcast %struct.GLYPH* %g2526 to i64*
  %501 = load i64, i64* %500, align 4
  %call2559 = call i32 @GLYPH_CHAR(i64 %501)
  %idxprom2560 = sext i32 %call2559 to i64
  %502 = load i64*, i64** %tbase, align 8
  %arrayidx2561 = getelementptr inbounds i64, i64* %502, i64 %idxprom2560
  %503 = load i64, i64* %arrayidx2561, align 8
  %call2562 = call zeroext i1 @STRINGP(i64 %503)
  br i1 %call2562, label %if.else.2566, label %if.then.2563

if.then.2563:                                     ; preds = %lor.lhs.false.2558, %lor.lhs.false.2553, %lor.lhs.false.2549, %do.end
  %504 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %u2564 = getelementptr inbounds %struct.glyph, %struct.glyph* %504, i32 0, i32 9
  %ch2565 = bitcast %union.anon.1* %u2564 to i32*
  %505 = load i32, i32* %ch2565, align 4
  store i32 %505, i32* %c2527, align 4
  br label %if.end.2617

if.else.2566:                                     ; preds = %lor.lhs.false.2558
  br label %do.body.2567

do.body.2567:                                     ; preds = %if.else.2566
  br label %while.cond.2568

while.cond.2568:                                  ; preds = %while.body.2585, %do.body.2567
  %506 = bitcast %struct.GLYPH* %g2526 to i64*
  %507 = load i64, i64* %506, align 4
  %call2569 = call i32 @GLYPH_FACE(i64 %507)
  %cmp2570 = icmp eq i32 %call2569, 0
  br i1 %cmp2570, label %land.lhs.true.2572, label %land.end

land.lhs.true.2572:                               ; preds = %while.cond.2568
  %508 = bitcast %struct.GLYPH* %g2526 to i64*
  %509 = load i64, i64* %508, align 4
  %call2573 = call i32 @GLYPH_CHAR(i64 %509)
  %conv2574 = sext i32 %call2573 to i64
  %510 = load i64, i64* %tlen, align 8
  %cmp2575 = icmp slt i64 %conv2574, %510
  br i1 %cmp2575, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.2572
  %511 = bitcast %struct.GLYPH* %g2526 to i64*
  %512 = load i64, i64* %511, align 4
  %call2577 = call i32 @GLYPH_CHAR(i64 %512)
  %idxprom2578 = sext i32 %call2577 to i64
  %513 = load i64*, i64** %tbase, align 8
  %arrayidx2579 = getelementptr inbounds i64, i64* %513, i64 %idxprom2578
  %514 = load i64, i64* %arrayidx2579, align 8
  %and2580 = and i64 %514, 7
  %conv2581 = trunc i64 %and2580 to i32
  %and2582 = and i32 %conv2581, -5
  %cmp2583 = icmp eq i32 %and2582, 2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.2572, %while.cond.2568
  %515 = phi i1 [ false, %land.lhs.true.2572 ], [ false, %while.cond.2568 ], [ %cmp2583, %land.rhs ]
  br i1 %515, label %while.body.2585, label %while.end

while.body.2585:                                  ; preds = %land.end
  %516 = bitcast %struct.GLYPH* %g2526 to i64*
  %517 = load i64, i64* %516, align 4
  %call2586 = call i32 @GLYPH_CHAR(i64 %517)
  %idxprom2587 = sext i32 %call2586 to i64
  %518 = load i64*, i64** %tbase, align 8
  %arrayidx2588 = getelementptr inbounds i64, i64* %518, i64 %idxprom2587
  %519 = load i64, i64* %arrayidx2588, align 8
  %shr2589 = ashr i64 %519, 2
  %conv2590 = trunc i64 %shr2589 to i32
  %ch2591 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g2526, i32 0, i32 0
  store i32 %conv2590, i32* %ch2591, align 4
  br label %while.cond.2568

while.end:                                        ; preds = %land.end
  %520 = bitcast %struct.GLYPH* %g2526 to i64*
  %521 = load i64, i64* %520, align 4
  %call2592 = call zeroext i1 @GLYPH_CHAR_VALID_P(i64 %521)
  br i1 %call2592, label %if.end.2595, label %if.then.2593

if.then.2593:                                     ; preds = %while.end
  %ch2594 = getelementptr inbounds %struct.GLYPH, %struct.GLYPH* %g2526, i32 0, i32 0
  store i32 32, i32* %ch2594, align 4
  br label %if.end.2595

if.end.2595:                                      ; preds = %if.then.2593, %while.end
  br label %do.end.2596

do.end.2596:                                      ; preds = %if.end.2595
  %522 = bitcast %struct.GLYPH* %g2526 to i64*
  %523 = load i64, i64* %522, align 4
  %call2597 = call i32 @GLYPH_FACE(i64 %523)
  %cmp2598 = icmp ne i32 %call2597, 0
  br i1 %cmp2598, label %if.then.2610, label %lor.lhs.false.2600

lor.lhs.false.2600:                               ; preds = %do.end.2596
  %524 = bitcast %struct.GLYPH* %g2526 to i64*
  %525 = load i64, i64* %524, align 4
  %call2601 = call i32 @GLYPH_CHAR(i64 %525)
  %conv2602 = sext i32 %call2601 to i64
  %526 = load i64, i64* %tlen, align 8
  %cmp2603 = icmp sge i64 %conv2602, %526
  br i1 %cmp2603, label %if.then.2610, label %lor.lhs.false.2605

lor.lhs.false.2605:                               ; preds = %lor.lhs.false.2600
  %527 = bitcast %struct.GLYPH* %g2526 to i64*
  %528 = load i64, i64* %527, align 4
  %call2606 = call i32 @GLYPH_CHAR(i64 %528)
  %idxprom2607 = sext i32 %call2606 to i64
  %529 = load i64*, i64** %tbase, align 8
  %arrayidx2608 = getelementptr inbounds i64, i64* %529, i64 %idxprom2607
  %530 = load i64, i64* %arrayidx2608, align 8
  %call2609 = call zeroext i1 @STRINGP(i64 %530)
  br i1 %call2609, label %if.else.2612, label %if.then.2610

if.then.2610:                                     ; preds = %lor.lhs.false.2605, %lor.lhs.false.2600, %do.end.2596
  %531 = bitcast %struct.GLYPH* %g2526 to i64*
  %532 = load i64, i64* %531, align 4
  %call2611 = call i32 @GLYPH_CHAR(i64 %532)
  store i32 %call2611, i32* %c2527, align 4
  br label %if.end.2616

if.else.2612:                                     ; preds = %lor.lhs.false.2605
  %533 = bitcast %struct.GLYPH* %g2526 to i64*
  %534 = load i64, i64* %533, align 4
  %call2613 = call i32 @GLYPH_CHAR(i64 %534)
  %idxprom2614 = sext i32 %call2613 to i64
  %535 = load i64*, i64** %tbase, align 8
  %arrayidx2615 = getelementptr inbounds i64, i64* %535, i64 %idxprom2614
  %536 = load i64, i64* %arrayidx2615, align 8
  store i64 %536, i64* %string, align 8
  br label %if.end.2616

if.end.2616:                                      ; preds = %if.else.2612, %if.then.2610
  br label %if.end.2617

if.end.2617:                                      ; preds = %if.end.2616, %if.then.2563
  %537 = load i64, i64* %string, align 8
  %call2618 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2619 = icmp eq i64 %537, %call2618
  br i1 %cmp2619, label %if.then.2621, label %if.else.2725

if.then.2621:                                     ; preds = %if.end.2617
  %538 = load i8*, i8** %buf, align 8
  %539 = load i8*, i8** @encode_terminal_src, align 8
  %sub.ptr.lhs.cast2622 = ptrtoint i8* %538 to i64
  %sub.ptr.rhs.cast2623 = ptrtoint i8* %539 to i64
  %sub.ptr.sub2624 = sub i64 %sub.ptr.lhs.cast2622, %sub.ptr.rhs.cast2623
  store i64 %sub.ptr.sub2624, i64* %nbytes, align 8
  %540 = load i64, i64* @encode_terminal_src_size, align 8
  %541 = load i64, i64* %nbytes, align 8
  %sub2625 = sub nsw i64 %540, %541
  %cmp2626 = icmp slt i64 %sub2625, 5
  br i1 %cmp2626, label %if.then.2628, label %if.end.2631

if.then.2628:                                     ; preds = %if.then.2621
  %542 = load i8*, i8** @encode_terminal_src, align 8
  %call2629 = call i8* @xpalloc(i8* %542, i64* @encode_terminal_src_size, i64 5, i64 -1, i64 1)
  store i8* %call2629, i8** @encode_terminal_src, align 8
  %543 = load i8*, i8** @encode_terminal_src, align 8
  %544 = load i64, i64* %nbytes, align 8
  %add.ptr2630 = getelementptr inbounds i8, i8* %543, i64 %544
  store i8* %add.ptr2630, i8** %buf, align 8
  br label %if.end.2631

if.end.2631:                                      ; preds = %if.then.2628, %if.then.2621
  %545 = load i32, i32* %c2527, align 4
  %cmp2632 = icmp sgt i32 %545, 4194175
  br i1 %cmp2632, label %if.then.2637, label %lor.lhs.false.2634

lor.lhs.false.2634:                               ; preds = %if.end.2631
  %546 = load i32, i32* %c2527, align 4
  %547 = load i64, i64* %charset_list, align 8
  %call2635 = call %struct.charset* @char_charset(i32 %546, i64 %547, i32* null)
  %tobool2636 = icmp ne %struct.charset* %call2635, null
  br i1 %tobool2636, label %if.then.2637, label %if.else.2704

if.then.2637:                                     ; preds = %lor.lhs.false.2634, %if.end.2631
  br i1 true, label %cond.true.2638, label %cond.false.2642

cond.true.2638:                                   ; preds = %if.then.2637
  %548 = load i32, i32* %c2527, align 4
  %add2639 = add i32 %548, 0
  %cmp2640 = icmp ule i32 %add2639, 127
  br i1 %cmp2640, label %cond.true.2647, label %cond.false.2650

cond.false.2642:                                  ; preds = %if.then.2637
  %549 = load i32, i32* %c2527, align 4
  %conv2643 = sext i32 %549 to i64
  %add2644 = add i64 %conv2643, 0
  %cmp2645 = icmp ule i64 %add2644, 127
  br i1 %cmp2645, label %cond.true.2647, label %cond.false.2650

cond.true.2647:                                   ; preds = %cond.false.2642, %cond.true.2638
  %550 = load i32, i32* %c2527, align 4
  %conv2648 = trunc i32 %550 to i8
  %551 = load i8*, i8** %buf, align 8
  %arrayidx2649 = getelementptr inbounds i8, i8* %551, i64 0
  store i8 %conv2648, i8* %arrayidx2649, align 1
  br label %cond.end.2699

cond.false.2650:                                  ; preds = %cond.false.2642, %cond.true.2638
  br i1 true, label %cond.true.2651, label %cond.false.2655

cond.true.2651:                                   ; preds = %cond.false.2650
  %552 = load i32, i32* %c2527, align 4
  %add2652 = add i32 %552, 0
  %cmp2653 = icmp ule i32 %add2652, 2047
  br i1 %cmp2653, label %cond.true.2660, label %cond.false.2669

cond.false.2655:                                  ; preds = %cond.false.2650
  %553 = load i32, i32* %c2527, align 4
  %conv2656 = sext i32 %553 to i64
  %add2657 = add i64 %conv2656, 0
  %cmp2658 = icmp ule i64 %add2657, 2047
  br i1 %cmp2658, label %cond.true.2660, label %cond.false.2669

cond.true.2660:                                   ; preds = %cond.false.2655, %cond.true.2651
  %554 = load i32, i32* %c2527, align 4
  %shr2661 = ashr i32 %554, 6
  %or2662 = or i32 192, %shr2661
  %conv2663 = trunc i32 %or2662 to i8
  %555 = load i8*, i8** %buf, align 8
  %arrayidx2664 = getelementptr inbounds i8, i8* %555, i64 0
  store i8 %conv2663, i8* %arrayidx2664, align 1
  %556 = load i32, i32* %c2527, align 4
  %and2665 = and i32 %556, 63
  %or2666 = or i32 128, %and2665
  %conv2667 = trunc i32 %or2666 to i8
  %557 = load i8*, i8** %buf, align 8
  %arrayidx2668 = getelementptr inbounds i8, i8* %557, i64 1
  store i8 %conv2667, i8* %arrayidx2668, align 1
  br label %cond.end.2697

cond.false.2669:                                  ; preds = %cond.false.2655, %cond.true.2651
  br i1 true, label %cond.true.2670, label %cond.false.2674

cond.true.2670:                                   ; preds = %cond.false.2669
  %558 = load i32, i32* %c2527, align 4
  %add2671 = add i32 %558, 0
  %cmp2672 = icmp ule i32 %add2671, 65535
  br i1 %cmp2672, label %cond.true.2679, label %cond.false.2693

cond.false.2674:                                  ; preds = %cond.false.2669
  %559 = load i32, i32* %c2527, align 4
  %conv2675 = sext i32 %559 to i64
  %add2676 = add i64 %conv2675, 0
  %cmp2677 = icmp ule i64 %add2676, 65535
  br i1 %cmp2677, label %cond.true.2679, label %cond.false.2693

cond.true.2679:                                   ; preds = %cond.false.2674, %cond.true.2670
  %560 = load i32, i32* %c2527, align 4
  %shr2680 = ashr i32 %560, 12
  %or2681 = or i32 224, %shr2680
  %conv2682 = trunc i32 %or2681 to i8
  %561 = load i8*, i8** %buf, align 8
  %arrayidx2683 = getelementptr inbounds i8, i8* %561, i64 0
  store i8 %conv2682, i8* %arrayidx2683, align 1
  %562 = load i32, i32* %c2527, align 4
  %shr2684 = ashr i32 %562, 6
  %and2685 = and i32 %shr2684, 63
  %or2686 = or i32 128, %and2685
  %conv2687 = trunc i32 %or2686 to i8
  %563 = load i8*, i8** %buf, align 8
  %arrayidx2688 = getelementptr inbounds i8, i8* %563, i64 1
  store i8 %conv2687, i8* %arrayidx2688, align 1
  %564 = load i32, i32* %c2527, align 4
  %and2689 = and i32 %564, 63
  %or2690 = or i32 128, %and2689
  %conv2691 = trunc i32 %or2690 to i8
  %565 = load i8*, i8** %buf, align 8
  %arrayidx2692 = getelementptr inbounds i8, i8* %565, i64 2
  store i8 %conv2691, i8* %arrayidx2692, align 1
  br label %cond.end.2695

cond.false.2693:                                  ; preds = %cond.false.2674, %cond.true.2670
  %566 = load i32, i32* %c2527, align 4
  %567 = load i8*, i8** %buf, align 8
  %call2694 = call i32 @char_string(i32 %566, i8* %567)
  br label %cond.end.2695

cond.end.2695:                                    ; preds = %cond.false.2693, %cond.true.2679
  %cond2696 = phi i32 [ 3, %cond.true.2679 ], [ %call2694, %cond.false.2693 ]
  br label %cond.end.2697

cond.end.2697:                                    ; preds = %cond.end.2695, %cond.true.2660
  %cond2698 = phi i32 [ 2, %cond.true.2660 ], [ %cond2696, %cond.end.2695 ]
  br label %cond.end.2699

cond.end.2699:                                    ; preds = %cond.end.2697, %cond.true.2647
  %cond2700 = phi i32 [ 1, %cond.true.2647 ], [ %cond2698, %cond.end.2697 ]
  %568 = load i8*, i8** %buf, align 8
  %idx.ext2701 = sext i32 %cond2700 to i64
  %add.ptr2702 = getelementptr inbounds i8, i8* %568, i64 %idx.ext2701
  store i8* %add.ptr2702, i8** %buf, align 8
  %569 = load i64, i64* %nchars, align 8
  %inc2703 = add nsw i64 %569, 1
  store i64 %inc2703, i64* %nchars, align 8
  br label %if.end.2724

if.else.2704:                                     ; preds = %lor.lhs.false.2634
  %570 = load i8*, i8** %buf, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %570, i32 1
  store i8* %incdec.ptr, i8** %buf, align 8
  store i8 63, i8* %570, align 1
  %571 = load i64, i64* %nchars, align 8
  %inc2705 = add nsw i64 %571, 1
  store i64 %inc2705, i64* %nchars, align 8
  br label %while.cond.2706

while.cond.2706:                                  ; preds = %while.body.2719, %if.else.2704
  %572 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %add.ptr2707 = getelementptr inbounds %struct.glyph, %struct.glyph* %572, i64 1
  %573 = load %struct.glyph*, %struct.glyph** %src_end, align 8
  %cmp2708 = icmp ult %struct.glyph* %add.ptr2707, %573
  br i1 %cmp2708, label %land.rhs.2710, label %land.end.2718

land.rhs.2710:                                    ; preds = %while.cond.2706
  %574 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %arrayidx2711 = getelementptr inbounds %struct.glyph, %struct.glyph* %574, i64 1
  %padding_p2712 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx2711, i32 0, i32 6
  %575 = bitcast i24* %padding_p2712 to i32*
  %bf.load2713 = load i32, i32* %575, align 8
  %bf.lshr2714 = lshr i32 %bf.load2713, 7
  %bf.clear2715 = and i32 %bf.lshr2714, 1
  %bf.cast2716 = trunc i32 %bf.clear2715 to i1
  br label %land.end.2718

land.end.2718:                                    ; preds = %land.rhs.2710, %while.cond.2706
  %576 = phi i1 [ false, %while.cond.2706 ], [ %bf.cast2716, %land.rhs.2710 ]
  br i1 %576, label %while.body.2719, label %while.end.2723

while.body.2719:                                  ; preds = %land.end.2718
  %577 = load i8*, i8** %buf, align 8
  %incdec.ptr2720 = getelementptr inbounds i8, i8* %577, i32 1
  store i8* %incdec.ptr2720, i8** %buf, align 8
  store i8 63, i8* %577, align 1
  %578 = load i64, i64* %nchars, align 8
  %inc2721 = add nsw i64 %578, 1
  store i64 %inc2721, i64* %nchars, align 8
  %579 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %incdec.ptr2722 = getelementptr inbounds %struct.glyph, %struct.glyph* %579, i32 1
  store %struct.glyph* %incdec.ptr2722, %struct.glyph** %src.addr, align 8
  br label %while.cond.2706

while.end.2723:                                   ; preds = %land.end.2718
  br label %if.end.2724

if.end.2724:                                      ; preds = %while.end.2723, %cond.end.2699
  br label %if.end.2750

if.else.2725:                                     ; preds = %if.end.2617
  %580 = load i64, i64* %string, align 8
  %call2726 = call zeroext i1 @STRING_MULTIBYTE(i64 %580)
  br i1 %call2726, label %if.end.2729, label %if.then.2727

if.then.2727:                                     ; preds = %if.else.2725
  %581 = load i64, i64* %string, align 8
  %call2728 = call i64 @string_to_multibyte(i64 %581)
  store i64 %call2728, i64* %string, align 8
  br label %if.end.2729

if.end.2729:                                      ; preds = %if.then.2727, %if.else.2725
  %582 = load i8*, i8** %buf, align 8
  %583 = load i8*, i8** @encode_terminal_src, align 8
  %sub.ptr.lhs.cast2730 = ptrtoint i8* %582 to i64
  %sub.ptr.rhs.cast2731 = ptrtoint i8* %583 to i64
  %sub.ptr.sub2732 = sub i64 %sub.ptr.lhs.cast2730, %sub.ptr.rhs.cast2731
  store i64 %sub.ptr.sub2732, i64* %nbytes, align 8
  %584 = load i64, i64* @encode_terminal_src_size, align 8
  %585 = load i64, i64* %nbytes, align 8
  %sub2733 = sub nsw i64 %584, %585
  %586 = load i64, i64* %string, align 8
  %call2734 = call i64 @SBYTES(i64 %586)
  %cmp2735 = icmp slt i64 %sub2733, %call2734
  br i1 %cmp2735, label %if.then.2737, label %if.end.2743

if.then.2737:                                     ; preds = %if.end.2729
  %587 = load i8*, i8** @encode_terminal_src, align 8
  %588 = load i64, i64* %string, align 8
  %call2738 = call i64 @SBYTES(i64 %588)
  %589 = load i64, i64* @encode_terminal_src_size, align 8
  %590 = load i64, i64* %nbytes, align 8
  %sub2739 = sub nsw i64 %589, %590
  %sub2740 = sub nsw i64 %call2738, %sub2739
  %call2741 = call i8* @xpalloc(i8* %587, i64* @encode_terminal_src_size, i64 %sub2740, i64 -1, i64 1)
  store i8* %call2741, i8** @encode_terminal_src, align 8
  %591 = load i8*, i8** @encode_terminal_src, align 8
  %592 = load i64, i64* %nbytes, align 8
  %add.ptr2742 = getelementptr inbounds i8, i8* %591, i64 %592
  store i8* %add.ptr2742, i8** %buf, align 8
  br label %if.end.2743

if.end.2743:                                      ; preds = %if.then.2737, %if.end.2729
  %593 = load i8*, i8** %buf, align 8
  %594 = load i64, i64* %string, align 8
  %call2744 = call i8* @SDATA(i64 %594)
  %595 = load i64, i64* %string, align 8
  %call2745 = call i64 @SBYTES(i64 %595)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %593, i8* %call2744, i64 %call2745, i32 1, i1 false)
  %596 = load i64, i64* %string, align 8
  %call2746 = call i64 @SBYTES(i64 %596)
  %597 = load i8*, i8** %buf, align 8
  %add.ptr2747 = getelementptr inbounds i8, i8* %597, i64 %call2746
  store i8* %add.ptr2747, i8** %buf, align 8
  %598 = load i64, i64* %string, align 8
  %call2748 = call i64 @SCHARS(i64 %598)
  %599 = load i64, i64* %nchars, align 8
  %add2749 = add nsw i64 %599, %call2748
  store i64 %add2749, i64* %nchars, align 8
  br label %if.end.2750

if.end.2750:                                      ; preds = %if.end.2743, %if.end.2724
  br label %if.end.2751

if.end.2751:                                      ; preds = %if.end.2750, %if.else.2520
  br label %if.end.2752

if.end.2752:                                      ; preds = %if.end.2751, %if.end.2519
  %600 = load %struct.glyph*, %struct.glyph** %src.addr, align 8
  %incdec.ptr2753 = getelementptr inbounds %struct.glyph, %struct.glyph* %600, i32 1
  store %struct.glyph* %incdec.ptr2753, %struct.glyph** %src.addr, align 8
  br label %while.cond

while.end.2754:                                   ; preds = %while.cond
  %601 = load i64, i64* %nchars, align 8
  %cmp2755 = icmp eq i64 %601, 0
  br i1 %cmp2755, label %if.then.2757, label %if.end.2758

if.then.2757:                                     ; preds = %while.end.2754
  %602 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %602, i32 0, i32 8
  store i64 0, i64* %produced, align 8
  store i8* null, i8** %retval
  br label %return

if.end.2758:                                      ; preds = %while.end.2754
  %603 = load i8*, i8** %buf, align 8
  %604 = load i8*, i8** @encode_terminal_src, align 8
  %sub.ptr.lhs.cast2759 = ptrtoint i8* %603 to i64
  %sub.ptr.rhs.cast2760 = ptrtoint i8* %604 to i64
  %sub.ptr.sub2761 = sub i64 %sub.ptr.lhs.cast2759, %sub.ptr.rhs.cast2760
  store i64 %sub.ptr.sub2761, i64* %nbytes, align 8
  %605 = load i8*, i8** @encode_terminal_src, align 8
  %606 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %source = getelementptr inbounds %struct.coding_system, %struct.coding_system* %606, i32 0, i32 17
  store i8* %605, i8** %source, align 8
  %607 = load i64, i64* @encode_terminal_dst_size, align 8
  %cmp2762 = icmp eq i64 %607, 0
  br i1 %cmp2762, label %if.then.2764, label %if.end.2766

if.then.2764:                                     ; preds = %if.end.2758
  %608 = load i8*, i8** @encode_terminal_dst, align 8
  %609 = load i64, i64* @encode_terminal_src_size, align 8
  %call2765 = call i8* @xrealloc(i8* %608, i64 %609)
  store i8* %call2765, i8** @encode_terminal_dst, align 8
  %610 = load i64, i64* @encode_terminal_src_size, align 8
  store i64 %610, i64* @encode_terminal_dst_size, align 8
  br label %if.end.2766

if.end.2766:                                      ; preds = %if.then.2764, %if.end.2758
  %611 = load i8*, i8** @encode_terminal_dst, align 8
  %612 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination = getelementptr inbounds %struct.coding_system, %struct.coding_system* %612, i32 0, i32 22
  store i8* %611, i8** %destination, align 8
  %613 = load i64, i64* @encode_terminal_dst_size, align 8
  %614 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes = getelementptr inbounds %struct.coding_system, %struct.coding_system* %614, i32 0, i32 20
  store i64 %613, i64* %dst_bytes, align 8
  %615 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %call2767 = call i64 @builtin_lisp_symbol(i32 0)
  %616 = load i64, i64* %nchars, align 8
  %617 = load i64, i64* %nbytes, align 8
  %call2768 = call i64 @builtin_lisp_symbol(i32 0)
  call void @encode_coding_object(%struct.coding_system* %615, i64 %call2767, i64 0, i64 0, i64 %616, i64 %617, i64 %call2768)
  %618 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %destination2769 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %618, i32 0, i32 22
  %619 = load i8*, i8** %destination2769, align 8
  store i8* %619, i8** @encode_terminal_dst, align 8
  %620 = load %struct.coding_system*, %struct.coding_system** %coding.addr, align 8
  %dst_bytes2770 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %620, i32 0, i32 20
  %621 = load i64, i64* %dst_bytes2770, align 8
  store i64 %621, i64* @encode_terminal_dst_size, align 8
  %622 = load i8*, i8** @encode_terminal_dst, align 8
  store i8* %622, i8** %retval
  br label %return

return:                                           ; preds = %if.end.2766, %if.then.2757
  %623 = load i8*, i8** %retval
  ret i8* %623
}

declare zeroext i1 @VECTORP(i64) #1

declare i64 @ASIZE(i64) #1

declare %struct.Lisp_Vector* @XVECTOR(i64) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #2

declare i8* @xpalloc(i8*, i64*, i64, i64, i64) #1

declare i64 @coding_charset_list(%struct.coding_system*) #1

declare i64 @composition_gstring_from_id(i64) #1

declare i64 @AREF(i64, i64) #1

declare %struct.charset* @char_charset(i32, i64, i32*) #1

declare i32 @char_string(i32, i8*) #1

declare %struct.Lisp_Hash_Table* @XHASH_TABLE(i64) #1

declare i32 @sanitize_tab_width(i64) #1

declare i64 @builtin_lisp_symbol(i32) #1

declare i32 @sanitize_char_width(i64) #1

declare i64 @CHAR_TABLE_REF(i64, i32) #1

declare i32 @GLYPH_CHAR(i64) #1

declare i32 @GLYPH_FACE(i64) #1

declare zeroext i1 @STRINGP(i64) #1

declare zeroext i1 @GLYPH_CHAR_VALID_P(i64) #1

declare zeroext i1 @STRING_MULTIBYTE(i64) #1

declare i64 @string_to_multibyte(i64) #1

declare i64 @SBYTES(i64) #1

declare i8* @SDATA(i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

declare i64 @SCHARS(i64) #1

declare i8* @xrealloc(i8*, i64) #1

declare void @encode_coding_object(%struct.coding_system*, i64, i64, i64, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define i32 @string_cost(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i32 0, i32* @cost, align 4
  %0 = load i8*, i8** %str.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8
  call void @tputs(i8* %1, i32 0, i32 (i32)* @evalcost)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @cost, align 4
  ret i32 %2
}

declare i32 @evalcost(i32) #1

; Function Attrs: nounwind uwtable
define i32 @per_line_cost(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i32 0, i32* @cost, align 4
  %0 = load i8*, i8** %str.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8
  call void @tputs(i8* %1, i32 0, i32 (i32)* @evalcost)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @cost, align 4
  %sub = sub nsw i32 0, %2
  store i32 %sub, i32* @cost, align 4
  %3 = load i8*, i8** %str.addr, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %4 = load i8*, i8** %str.addr, align 8
  call void @tputs(i8* %4, i32 10, i32 (i32)* @evalcost)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %5 = load i32, i32* @cost, align 4
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define void @calculate_costs(%struct.frame* %frame) #0 {
entry:
  %frame.addr = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %f = alloca i8*, align 8
  store %struct.frame* %frame, %struct.frame** %frame.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  %conv = trunc i64 %0 to i32
  %1 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %cost_calculation_baud_rate = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 73
  store i32 %conv, i32* %cost_calculation_baud_rate, align 4
  %2 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %3, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %if.then, label %if.end.110

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method2 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 26
  %5 = bitcast i48* %output_method2 to i64*
  %bf.load3 = load i64, i64* %5, align 8
  %bf.lshr4 = lshr i64 %bf.load3, 23
  %bf.clear5 = and i64 %bf.lshr4, 7
  %bf.cast6 = trunc i64 %bf.clear5 to i32
  %cmp7 = icmp eq i32 %bf.cast6, 1
  br i1 %cmp7, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %6 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method9 = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %output_method9 to i64*
  %bf.load10 = load i64, i64* %7, align 8
  %bf.lshr11 = lshr i64 %bf.load10, 23
  %bf.clear12 = and i64 %bf.lshr11, 7
  %bf.cast13 = trunc i64 %bf.clear12 to i32
  %cmp14 = icmp eq i32 %bf.cast13, 3
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.then
  %8 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 61
  %9 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 12
  %tty16 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty16, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %11, %cond.true
  %cond = phi %struct.tty_display_info* [ %10, %cond.true ], [ null, %11 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 23
  %13 = load i8*, i8** %TS_set_scroll_region, align 8
  %tobool = icmp ne i8* %13, null
  br i1 %tobool, label %cond.true.17, label %cond.false.19

cond.true.17:                                     ; preds = %cond.end
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region18 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 23
  %15 = load i8*, i8** %TS_set_scroll_region18, align 8
  br label %cond.end.20

cond.false.19:                                    ; preds = %cond.end
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region_1 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 24
  %17 = load i8*, i8** %TS_set_scroll_region_1, align 8
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.19, %cond.true.17
  %cond21 = phi i8* [ %15, %cond.true.17 ], [ %17, %cond.false.19 ]
  store i8* %cond21, i8** %f, align 8
  %18 = load i8*, i8** %f, align 8
  %call = call i32 @string_cost(i8* %18)
  %19 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method22 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 26
  %20 = bitcast i48* %output_method22 to i64*
  %bf.load23 = load i64, i64* %20, align 8
  %bf.lshr24 = lshr i64 %bf.load23, 23
  %bf.clear25 = and i64 %bf.lshr24, 7
  %bf.cast26 = trunc i64 %bf.clear25 to i32
  %cmp27 = icmp eq i32 %bf.cast26, 1
  br i1 %cmp27, label %cond.true.37, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %cond.end.20
  %21 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method30 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 26
  %22 = bitcast i48* %output_method30 to i64*
  %bf.load31 = load i64, i64* %22, align 8
  %bf.lshr32 = lshr i64 %bf.load31, 23
  %bf.clear33 = and i64 %bf.lshr32, 7
  %bf.cast34 = trunc i64 %bf.clear33 to i32
  %cmp35 = icmp eq i32 %bf.cast34, 3
  br i1 %cmp35, label %cond.true.37, label %cond.false.41

cond.true.37:                                     ; preds = %lor.lhs.false.29, %cond.end.20
  %23 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %terminal38 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 61
  %24 = load %struct.terminal*, %struct.terminal** %terminal38, align 8
  %display_info39 = getelementptr inbounds %struct.terminal, %struct.terminal* %24, i32 0, i32 12
  %tty40 = bitcast %union.display_info* %display_info39 to %struct.tty_display_info**
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty40, align 8
  br label %cond.end.42

cond.false.41:                                    ; preds = %lor.lhs.false.29
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.42

cond.end.42:                                      ; preds = %26, %cond.true.37
  %cond43 = phi %struct.tty_display_info* [ %25, %cond.true.37 ], [ null, %26 ]
  %scroll_region_cost = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond43, i32 0, i32 76
  store i32 %call, i32* %scroll_region_cost, align 4
  %27 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %costs_set = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %27, i32 0, i32 72
  %bf.load44 = load i8, i8* %costs_set, align 8
  %bf.clear45 = and i8 %bf.load44, -3
  %bf.set = or i8 %bf.clear45, 2
  store i8 %bf.set, i8* %costs_set, align 8
  %28 = load i32, i32* @max_frame_cols, align 4
  %29 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 36
  %30 = load i32, i32* %text_cols, align 4
  %cmp46 = icmp sgt i32 %28, %30
  br i1 %cmp46, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %cond.end.42
  %31 = load i32, i32* @max_frame_cols, align 4
  br label %cond.end.51

cond.false.49:                                    ; preds = %cond.end.42
  %32 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %text_cols50 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 36
  %33 = load i32, i32* %text_cols50, align 4
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.49, %cond.true.48
  %cond52 = phi i32 [ %31, %cond.true.48 ], [ %33, %cond.false.49 ]
  store i32 %cond52, i32* @max_frame_cols, align 4
  %34 = load i32, i32* @max_frame_cols, align 4
  %conv53 = sext i32 %34 to i64
  %cmp54 = icmp ult i64 1152921504606846975, %conv53
  br i1 %cmp54, label %if.then.56, label %if.end

if.then.56:                                       ; preds = %cond.end.51
  call void @memory_full(i64 -1) #9
  unreachable

if.end:                                           ; preds = %cond.end.51
  %35 = load i32*, i32** @char_ins_del_vector, align 8
  %36 = bitcast i32* %35 to i8*
  %37 = load i32, i32* @max_frame_cols, align 4
  %conv57 = sext i32 %37 to i64
  %mul = mul i64 8, %conv57
  %add = add i64 4, %mul
  %call58 = call i8* @xrealloc(i8* %36, i64 %add)
  %38 = bitcast i8* %call58 to i32*
  store i32* %38, i32** @char_ins_del_vector, align 8
  %39 = load i32*, i32** @char_ins_del_vector, align 8
  %40 = bitcast i32* %39 to i8*
  %41 = load i32, i32* @max_frame_cols, align 4
  %conv59 = sext i32 %41 to i64
  %mul60 = mul i64 8, %conv59
  %add61 = add i64 4, %mul60
  call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 %add61, i32 4, i1 false)
  %42 = load i8*, i8** %f, align 8
  %tobool62 = icmp ne i8* %42, null
  br i1 %tobool62, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %43, i32 0, i32 17
  %44 = load i8*, i8** %TS_ins_line, align 8
  %tobool63 = icmp ne i8* %44, null
  br i1 %tobool63, label %if.else, label %land.lhs.true.64

land.lhs.true.64:                                 ; preds = %land.lhs.true
  %45 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %45, i32 0, i32 27
  %46 = load i8*, i8** %TS_del_line, align 8
  %tobool65 = icmp ne i8* %46, null
  br i1 %tobool65, label %if.else, label %if.then.66

if.then.66:                                       ; preds = %land.lhs.true.64
  %47 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %48 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_rev_scroll = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %48, i32 0, i32 43
  %49 = load i8*, i8** %TS_rev_scroll, align 8
  %50 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_lines = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %50, i32 0, i32 18
  %51 = load i8*, i8** %TS_ins_multi_lines, align 8
  %52 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_fwd_scroll = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %52, i32 0, i32 41
  %53 = load i8*, i8** %TS_fwd_scroll, align 8
  %54 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_lines = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %54, i32 0, i32 28
  %55 = load i8*, i8** %TS_del_multi_lines, align 8
  %56 = load i8*, i8** %f, align 8
  %57 = load i8*, i8** %f, align 8
  call void @do_line_insertion_deletion_costs(%struct.frame* %47, i8* %49, i8* %51, i8* %53, i8* %55, i8* %56, i8* %57, i32 1)
  br label %if.end.71

if.else:                                          ; preds = %land.lhs.true.64, %land.lhs.true, %if.end
  %58 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %59 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_line67 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %59, i32 0, i32 17
  %60 = load i8*, i8** %TS_ins_line67, align 8
  %61 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_lines68 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %61, i32 0, i32 18
  %62 = load i8*, i8** %TS_ins_multi_lines68, align 8
  %63 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_line69 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %63, i32 0, i32 27
  %64 = load i8*, i8** %TS_del_line69, align 8
  %65 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_lines70 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %65, i32 0, i32 28
  %66 = load i8*, i8** %TS_del_multi_lines70, align 8
  call void @do_line_insertion_deletion_costs(%struct.frame* %58, i8* %60, i8* %62, i8* %64, i8* %66, i8* null, i8* null, i32 1)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else, %if.then.66
  %67 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  call void @calculate_ins_del_char_costs(%struct.frame* %67)
  %68 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_repeat = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %68, i32 0, i32 39
  %69 = load i8*, i8** %TS_repeat, align 8
  %tobool72 = icmp ne i8* %69, null
  br i1 %tobool72, label %land.lhs.true.73, label %if.else.83

land.lhs.true.73:                                 ; preds = %if.end.71
  %70 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_repeat74 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %70, i32 0, i32 39
  %71 = load i8*, i8** %TS_repeat74, align 8
  %call75 = call i32 @per_line_cost(i8* %71)
  %conv76 = sext i32 %call75 to i64
  %72 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 381), align 8
  %mul77 = mul nsw i64 %conv76, %72
  %cmp78 = icmp slt i64 %mul77, 9000
  br i1 %cmp78, label %if.then.80, label %if.else.83

if.then.80:                                       ; preds = %land.lhs.true.73
  %73 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_repeat81 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %73, i32 0, i32 39
  %74 = load i8*, i8** %TS_repeat81, align 8
  %call82 = call i32 @string_cost(i8* %74)
  %75 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %RPov = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %75, i32 0, i32 71
  store i32 %call82, i32* %RPov, align 4
  br label %if.end.87

if.else.83:                                       ; preds = %land.lhs.true.73, %if.end.71
  %76 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %text_cols84 = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 36
  %77 = load i32, i32* %text_cols84, align 4
  %mul85 = mul nsw i32 %77, 2
  %78 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %RPov86 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %78, i32 0, i32 71
  store i32 %mul85, i32* %RPov86, align 4
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.83, %if.then.80
  %79 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method88 = getelementptr inbounds %struct.frame, %struct.frame* %79, i32 0, i32 26
  %80 = bitcast i48* %output_method88 to i64*
  %bf.load89 = load i64, i64* %80, align 8
  %bf.lshr90 = lshr i64 %bf.load89, 23
  %bf.clear91 = and i64 %bf.lshr90, 7
  %bf.cast92 = trunc i64 %bf.clear91 to i32
  %cmp93 = icmp eq i32 %bf.cast92, 1
  br i1 %cmp93, label %cond.true.103, label %lor.lhs.false.95

lor.lhs.false.95:                                 ; preds = %if.end.87
  %81 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %output_method96 = getelementptr inbounds %struct.frame, %struct.frame* %81, i32 0, i32 26
  %82 = bitcast i48* %output_method96 to i64*
  %bf.load97 = load i64, i64* %82, align 8
  %bf.lshr98 = lshr i64 %bf.load97, 23
  %bf.clear99 = and i64 %bf.lshr98, 7
  %bf.cast100 = trunc i64 %bf.clear99 to i32
  %cmp101 = icmp eq i32 %bf.cast100, 3
  br i1 %cmp101, label %cond.true.103, label %cond.false.107

cond.true.103:                                    ; preds = %lor.lhs.false.95, %if.end.87
  %83 = load %struct.frame*, %struct.frame** %frame.addr, align 8
  %terminal104 = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 61
  %84 = load %struct.terminal*, %struct.terminal** %terminal104, align 8
  %display_info105 = getelementptr inbounds %struct.terminal, %struct.terminal* %84, i32 0, i32 12
  %tty106 = bitcast %union.display_info* %display_info105 to %struct.tty_display_info**
  %85 = load %struct.tty_display_info*, %struct.tty_display_info** %tty106, align 8
  br label %cond.end.108

cond.false.107:                                   ; preds = %lor.lhs.false.95
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.108

cond.end.108:                                     ; preds = %86, %cond.true.103
  %cond109 = phi %struct.tty_display_info* [ %85, %cond.true.103 ], [ null, %86 ]
  call void @cmcostinit(%struct.tty_display_info* %cond109)
  br label %if.end.110

if.end.110:                                       ; preds = %cond.end.108, %entry
  ret void
}

; Function Attrs: noreturn
declare void @emacs_abort() #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

declare void @do_line_insertion_deletion_costs(%struct.frame*, i8*, i8*, i8*, i8*, i8*, i8*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @calculate_ins_del_char_costs(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %ins_startup_cost = alloca i32, align 4
  %del_startup_cost = alloca i32, align 4
  %ins_cost_per_char = alloca i32, align 4
  %del_cost_per_char = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i32*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_chars = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 33
  %9 = load i8*, i8** %TS_ins_multi_chars, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %ins_cost_per_char, align 4
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_chars8 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 33
  %11 = load i8*, i8** %TS_ins_multi_chars8, align 8
  %call = call i32 @string_cost_one_line(i8* %11)
  store i32 %call, i32* %ins_startup_cost, align 4
  br label %if.end.26

if.else:                                          ; preds = %cond.end
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 32
  %13 = load i8*, i8** %TS_ins_char, align 8
  %tobool9 = icmp ne i8* %13, null
  br i1 %tobool9, label %if.then.15, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %if.else
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_inserted_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 35
  %15 = load i8*, i8** %TS_pad_inserted_char, align 8
  %tobool11 = icmp ne i8* %15, null
  br i1 %tobool11, label %if.then.15, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.10
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 34
  %17 = load i8*, i8** %TS_insert_mode, align 8
  %tobool13 = icmp ne i8* %17, null
  br i1 %tobool13, label %land.lhs.true, label %if.else.25

land.lhs.true:                                    ; preds = %lor.lhs.false.12
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %18, i32 0, i32 31
  %19 = load i8*, i8** %TS_end_insert_mode, align 8
  %tobool14 = icmp ne i8* %19, null
  br i1 %tobool14, label %if.then.15, label %if.else.25

if.then.15:                                       ; preds = %land.lhs.true, %lor.lhs.false.10, %if.else
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_insert_mode16 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %20, i32 0, i32 34
  %21 = load i8*, i8** %TS_insert_mode16, align 8
  %call17 = call i32 @string_cost(i8* %21)
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_insert_mode18 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 31
  %23 = load i8*, i8** %TS_end_insert_mode18, align 8
  %call19 = call i32 @string_cost(i8* %23)
  %add = add nsw i32 %call17, %call19
  %mul = mul nsw i32 30, %add
  %div = sdiv i32 %mul, 100
  store i32 %div, i32* %ins_startup_cost, align 4
  %24 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char20 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %24, i32 0, i32 32
  %25 = load i8*, i8** %TS_ins_char20, align 8
  %call21 = call i32 @string_cost_one_line(i8* %25)
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_inserted_char22 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %26, i32 0, i32 35
  %27 = load i8*, i8** %TS_pad_inserted_char22, align 8
  %call23 = call i32 @string_cost_one_line(i8* %27)
  %add24 = add nsw i32 %call21, %call23
  store i32 %add24, i32* %ins_cost_per_char, align 4
  br label %if.end

if.else.25:                                       ; preds = %land.lhs.true, %lor.lhs.false.12
  store i32 9999, i32* %ins_startup_cost, align 4
  store i32 0, i32* %ins_cost_per_char, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.25, %if.then.15
  br label %if.end.26

if.end.26:                                        ; preds = %if.end, %if.then
  %28 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_chars = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %28, i32 0, i32 26
  %29 = load i8*, i8** %TS_del_multi_chars, align 8
  %tobool27 = icmp ne i8* %29, null
  br i1 %tobool27, label %if.then.28, label %if.else.31

if.then.28:                                       ; preds = %if.end.26
  store i32 0, i32* %del_cost_per_char, align 4
  %30 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_chars29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %30, i32 0, i32 26
  %31 = load i8*, i8** %TS_del_multi_chars29, align 8
  %call30 = call i32 @string_cost_one_line(i8* %31)
  store i32 %call30, i32* %del_startup_cost, align 4
  br label %if.end.47

if.else.31:                                       ; preds = %if.end.26
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %32, i32 0, i32 25
  %33 = load i8*, i8** %TS_del_char, align 8
  %tobool32 = icmp ne i8* %33, null
  br i1 %tobool32, label %if.then.33, label %if.else.45

if.then.33:                                       ; preds = %if.else.31
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_delete_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 29
  %35 = load i8*, i8** %TS_delete_mode, align 8
  %call34 = call i32 @string_cost(i8* %35)
  %36 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_delete_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %36, i32 0, i32 30
  %37 = load i8*, i8** %TS_end_delete_mode, align 8
  %call35 = call i32 @string_cost(i8* %37)
  %add36 = add nsw i32 %call34, %call35
  store i32 %add36, i32* %del_startup_cost, align 4
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %delete_in_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 72
  %bf.load37 = load i8, i8* %delete_in_insert_mode, align 8
  %bf.clear38 = and i8 %bf.load37, 1
  %bf.cast39 = trunc i8 %bf.clear38 to i1
  br i1 %bf.cast39, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %if.then.33
  %39 = load i32, i32* %del_startup_cost, align 4
  %div41 = sdiv i32 %39, 2
  store i32 %div41, i32* %del_startup_cost, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.40, %if.then.33
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_char43 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %40, i32 0, i32 25
  %41 = load i8*, i8** %TS_del_char43, align 8
  %call44 = call i32 @string_cost_one_line(i8* %41)
  store i32 %call44, i32* %del_cost_per_char, align 4
  br label %if.end.46

if.else.45:                                       ; preds = %if.else.31
  store i32 9999, i32* %del_startup_cost, align 4
  store i32 0, i32* %del_cost_per_char, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.45, %if.end.42
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.28
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 36
  %43 = load i32, i32* %text_cols, align 4
  %idxprom = sext i32 %43 to i64
  %44 = load i32*, i32** @char_ins_del_vector, align 8
  %arrayidx = getelementptr inbounds i32, i32* %44, i64 %idxprom
  %arrayidx48 = getelementptr inbounds i32, i32* %arrayidx, i64 0
  store i32* %arrayidx48, i32** %p, align 8
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols49 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 36
  %46 = load i32, i32* %text_cols49, align 4
  store i32 %46, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %if.end.47
  %47 = load i32, i32* %i, align 4
  %dec = add nsw i32 %47, -1
  store i32 %dec, i32* %i, align 4
  %cmp50 = icmp sge i32 %dec, 0
  br i1 %cmp50, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %48 = load i32, i32* %del_cost_per_char, align 4
  %49 = load i32, i32* %del_startup_cost, align 4
  %add51 = add nsw i32 %49, %48
  store i32 %add51, i32* %del_startup_cost, align 4
  %50 = load i32*, i32** %p, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %50, i32 -1
  store i32* %incdec.ptr, i32** %p, align 8
  store i32 %add51, i32* %incdec.ptr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols52 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 36
  %52 = load i32, i32* %text_cols52, align 4
  %idxprom53 = sext i32 %52 to i64
  %53 = load i32*, i32** @char_ins_del_vector, align 8
  %arrayidx54 = getelementptr inbounds i32, i32* %53, i64 %idxprom53
  %arrayidx55 = getelementptr inbounds i32, i32* %arrayidx54, i64 0
  store i32* %arrayidx55, i32** %p, align 8
  %54 = load i32*, i32** %p, align 8
  %incdec.ptr56 = getelementptr inbounds i32, i32* %54, i32 1
  store i32* %incdec.ptr56, i32** %p, align 8
  store i32 0, i32* %54, align 4
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols57 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 36
  %56 = load i32, i32* %text_cols57, align 4
  store i32 %56, i32* %i, align 4
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.body.61, %for.end
  %57 = load i32, i32* %i, align 4
  %dec59 = add nsw i32 %57, -1
  store i32 %dec59, i32* %i, align 4
  %cmp60 = icmp sge i32 %dec59, 0
  br i1 %cmp60, label %for.body.61, label %for.end.64

for.body.61:                                      ; preds = %for.cond.58
  %58 = load i32, i32* %ins_cost_per_char, align 4
  %59 = load i32, i32* %ins_startup_cost, align 4
  %add62 = add nsw i32 %59, %58
  store i32 %add62, i32* %ins_startup_cost, align 4
  %60 = load i32*, i32** %p, align 8
  %incdec.ptr63 = getelementptr inbounds i32, i32* %60, i32 1
  store i32* %incdec.ptr63, i32** %p, align 8
  store i32 %add62, i32* %60, align 4
  br label %for.cond.58

for.end.64:                                       ; preds = %for.cond.58
  ret void
}

declare void @cmcostinit(%struct.tty_display_info*) #1

; Function Attrs: nounwind uwtable
define void @tty_append_glyph(%struct.it* %it) #0 {
entry:
  %it.addr = alloca %struct.it*, align 8
  store %struct.it* %it, %struct.it** %it.addr, align 8
  %0 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @append_glyph(%struct.it* %0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @append_glyph(%struct.it* %it) #0 {
entry:
  %it.addr = alloca %struct.it*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %end = alloca %struct.glyph*, align 8
  %i = alloca i32, align 4
  %g = alloca %struct.glyph*, align 8
  %move_by = alloca i32, align 4
  store %struct.it* %it, %struct.it** %it.addr, align 8
  %0 = load %struct.it*, %struct.it** %it.addr, align 8
  %area = getelementptr inbounds %struct.it, %struct.it* %0, i32 0, i32 60
  %1 = load i32, i32* %area, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row = getelementptr inbounds %struct.it, %struct.it* %2, i32 0, i32 59
  %3 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom
  %4 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  %5 = load %struct.it*, %struct.it** %it.addr, align 8
  %area1 = getelementptr inbounds %struct.it, %struct.it* %5, i32 0, i32 60
  %6 = load i32, i32* %area1, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row3 = getelementptr inbounds %struct.it, %struct.it* %7, i32 0, i32 59
  %8 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row3, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom2
  %9 = load i16, i16* %arrayidx4, align 2
  %conv = sext i16 %9 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %4, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %glyph, align 8
  %10 = load %struct.it*, %struct.it** %it.addr, align 8
  %area5 = getelementptr inbounds %struct.it, %struct.it* %10, i32 0, i32 60
  %11 = load i32, i32* %area5, align 4
  %add = add nsw i32 1, %11
  %idxprom6 = sext i32 %add to i64
  %12 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row7 = getelementptr inbounds %struct.it, %struct.it* %12, i32 0, i32 59
  %13 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row7, align 8
  %glyphs8 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %13, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs8, i32 0, i64 %idxprom6
  %14 = load %struct.glyph*, %struct.glyph** %arrayidx9, align 8
  store %struct.glyph* %14, %struct.glyph** %end, align 8
  %15 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row10 = getelementptr inbounds %struct.it, %struct.it* %15, i32 0, i32 59
  %16 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row10, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 22
  %17 = bitcast i40* %reversed_p to i64*
  %bf.load = load i64, i64* %17, align 4
  %bf.lshr = lshr i64 %bf.load, 34
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %entry
  %18 = load %struct.it*, %struct.it** %it.addr, align 8
  %area12 = getelementptr inbounds %struct.it, %struct.it* %18, i32 0, i32 60
  %19 = load i32, i32* %area12, align 4
  %cmp = icmp eq i32 %19, 1
  br i1 %cmp, label %if.then, label %if.end.40

if.then:                                          ; preds = %land.lhs.true
  %20 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width = getelementptr inbounds %struct.it, %struct.it* %20, i32 0, i32 62
  %21 = load i32, i32* %pixel_width, align 4
  store i32 %21, i32* %move_by, align 4
  %22 = load i32, i32* %move_by, align 4
  %conv14 = sext i32 %22 to i64
  %23 = load %struct.glyph*, %struct.glyph** %end, align 8
  %24 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph* %23 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph* %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %cmp15 = icmp sgt i64 %conv14, %sub.ptr.div
  br i1 %cmp15, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.then
  %25 = load %struct.glyph*, %struct.glyph** %end, align 8
  %26 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %sub.ptr.lhs.cast18 = ptrtoint %struct.glyph* %25 to i64
  %sub.ptr.rhs.cast19 = ptrtoint %struct.glyph* %26 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %sub.ptr.div21 = sdiv exact i64 %sub.ptr.sub20, 48
  %conv22 = trunc i64 %sub.ptr.div21 to i32
  store i32 %conv22, i32* %move_by, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.then
  %27 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %add.ptr23 = getelementptr inbounds %struct.glyph, %struct.glyph* %27, i64 -1
  store %struct.glyph* %add.ptr23, %struct.glyph** %g, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %28 = load %struct.glyph*, %struct.glyph** %g, align 8
  %29 = load %struct.it*, %struct.it** %it.addr, align 8
  %area24 = getelementptr inbounds %struct.it, %struct.it* %29, i32 0, i32 60
  %30 = load i32, i32* %area24, align 4
  %idxprom25 = sext i32 %30 to i64
  %31 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row26 = getelementptr inbounds %struct.it, %struct.it* %31, i32 0, i32 59
  %32 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row26, align 8
  %glyphs27 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %32, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs27, i32 0, i64 %idxprom25
  %33 = load %struct.glyph*, %struct.glyph** %arrayidx28, align 8
  %cmp29 = icmp uge %struct.glyph* %28, %33
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load i32, i32* %move_by, align 4
  %idxprom31 = sext i32 %34 to i64
  %35 = load %struct.glyph*, %struct.glyph** %g, align 8
  %arrayidx32 = getelementptr inbounds %struct.glyph, %struct.glyph* %35, i64 %idxprom31
  %36 = load %struct.glyph*, %struct.glyph** %g, align 8
  %37 = bitcast %struct.glyph* %arrayidx32 to i8*
  %38 = bitcast %struct.glyph* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 48, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load %struct.glyph*, %struct.glyph** %g, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %39, i32 -1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %g, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load %struct.it*, %struct.it** %it.addr, align 8
  %area33 = getelementptr inbounds %struct.it, %struct.it* %40, i32 0, i32 60
  %41 = load i32, i32* %area33, align 4
  %idxprom34 = sext i32 %41 to i64
  %42 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row35 = getelementptr inbounds %struct.it, %struct.it* %42, i32 0, i32 59
  %43 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row35, align 8
  %glyphs36 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %43, i32 0, i32 0
  %arrayidx37 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs36, i32 0, i64 %idxprom34
  %44 = load %struct.glyph*, %struct.glyph** %arrayidx37, align 8
  store %struct.glyph* %44, %struct.glyph** %glyph, align 8
  %45 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %46 = load i32, i32* %move_by, align 4
  %idx.ext38 = sext i32 %46 to i64
  %add.ptr39 = getelementptr inbounds %struct.glyph, %struct.glyph* %45, i64 %idx.ext38
  store %struct.glyph* %add.ptr39, %struct.glyph** %end, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %for.end, %land.lhs.true, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond.41

for.cond.41:                                      ; preds = %for.inc.93, %if.end.40
  %47 = load i32, i32* %i, align 4
  %48 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width42 = getelementptr inbounds %struct.it, %struct.it* %48, i32 0, i32 62
  %49 = load i32, i32* %pixel_width42, align 4
  %cmp43 = icmp slt i32 %47, %49
  br i1 %cmp43, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.41
  %50 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %51 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp45 = icmp ult %struct.glyph* %50, %51
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.41
  %52 = phi i1 [ false, %for.cond.41 ], [ %cmp45, %land.rhs ]
  br i1 %52, label %for.body.47, label %for.end.95

for.body.47:                                      ; preds = %land.end
  %53 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %53, i32 0, i32 6
  %54 = bitcast i24* %type to i32*
  %bf.load48 = load i32, i32* %54, align 8
  %bf.clear49 = and i32 %bf.load48, -8
  store i32 %bf.clear49, i32* %54, align 8
  %55 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width50 = getelementptr inbounds %struct.glyph, %struct.glyph* %55, i32 0, i32 2
  store i16 1, i16* %pixel_width50, align 2
  %56 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display = getelementptr inbounds %struct.it, %struct.it* %56, i32 0, i32 38
  %57 = load i32, i32* %char_to_display, align 4
  %58 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %58, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  store i32 %57, i32* %ch, align 4
  %59 = load %struct.it*, %struct.it** %it.addr, align 8
  %face_id = getelementptr inbounds %struct.it, %struct.it* %59, i32 0, i32 31
  %60 = load i32, i32* %face_id, align 4
  %61 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %face_id51 = getelementptr inbounds %struct.glyph, %struct.glyph* %61, i32 0, i32 7
  %62 = bitcast i24* %face_id51 to i32*
  %bf.load52 = load i32, i32* %62, align 4
  %bf.value = and i32 %60, 1048575
  %bf.clear53 = and i32 %bf.load52, -1048576
  %bf.set = or i32 %bf.clear53, %bf.value
  store i32 %bf.set, i32* %62, align 4
  %63 = load i32, i32* %i, align 4
  %cmp54 = icmp sgt i32 %63, 0
  %64 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %64, i32 0, i32 6
  %65 = bitcast i24* %padding_p to i32*
  %66 = zext i1 %cmp54 to i32
  %bf.load56 = load i32, i32* %65, align 8
  %bf.shl = shl i32 %66, 7
  %bf.clear57 = and i32 %bf.load56, -129
  %bf.set58 = or i32 %bf.clear57, %bf.shl
  store i32 %bf.set58, i32* %65, align 8
  %bf.result.cast = trunc i32 %66 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %67 = load %struct.it*, %struct.it** %it.addr, align 8
  %position = getelementptr inbounds %struct.it, %struct.it* %67, i32 0, i32 48
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %position, i32 0, i32 0
  %68 = load i64, i64* %charpos, align 8
  %69 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %charpos59 = getelementptr inbounds %struct.glyph, %struct.glyph* %69, i32 0, i32 0
  store i64 %68, i64* %charpos59, align 8
  %70 = load %struct.it*, %struct.it** %it.addr, align 8
  %object = getelementptr inbounds %struct.it, %struct.it* %70, i32 0, i32 47
  %71 = load i64, i64* %object, align 8
  %72 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %object60 = getelementptr inbounds %struct.glyph, %struct.glyph* %72, i32 0, i32 1
  store i64 %71, i64* %object60, align 8
  %73 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_p = getelementptr inbounds %struct.it, %struct.it* %73, i32 0, i32 79
  %74 = bitcast i24* %bidi_p to i32*
  %bf.load61 = load i32, i32* %74, align 8
  %bf.lshr62 = lshr i32 %bf.load61, 20
  %bf.clear63 = and i32 %bf.lshr62, 1
  %bf.cast64 = trunc i32 %bf.clear63 to i1
  br i1 %bf.cast64, label %if.then.65, label %if.else

if.then.65:                                       ; preds = %for.body.47
  %75 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_it = getelementptr inbounds %struct.it, %struct.it* %75, i32 0, i32 80
  %resolved_level = getelementptr inbounds %struct.bidi_it, %struct.bidi_it* %bidi_it, i32 0, i32 8
  %76 = load i8, i8* %resolved_level, align 1
  %conv66 = sext i8 %76 to i32
  %77 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %resolved_level67 = getelementptr inbounds %struct.glyph, %struct.glyph* %77, i32 0, i32 6
  %78 = bitcast i24* %resolved_level67 to i32*
  %bf.load68 = load i32, i32* %78, align 8
  %bf.value69 = and i32 %conv66, 127
  %bf.shl70 = shl i32 %bf.value69, 10
  %bf.clear71 = and i32 %bf.load68, -130049
  %bf.set72 = or i32 %bf.clear71, %bf.shl70
  store i32 %bf.set72, i32* %78, align 8
  %79 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_it73 = getelementptr inbounds %struct.it, %struct.it* %79, i32 0, i32 80
  %type74 = getelementptr inbounds %struct.bidi_it, %struct.bidi_it* %bidi_it73, i32 0, i32 5
  %80 = load i32, i32* %type74, align 4
  %81 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %bidi_type = getelementptr inbounds %struct.glyph, %struct.glyph* %81, i32 0, i32 6
  %82 = bitcast i24* %bidi_type to i32*
  %bf.load75 = load i32, i32* %82, align 8
  %bf.value76 = and i32 %80, 7
  %bf.shl77 = shl i32 %bf.value76, 17
  %bf.clear78 = and i32 %bf.load75, -917505
  %bf.set79 = or i32 %bf.clear78, %bf.shl77
  store i32 %bf.set79, i32* %82, align 8
  br label %if.end.86

if.else:                                          ; preds = %for.body.47
  %83 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %resolved_level80 = getelementptr inbounds %struct.glyph, %struct.glyph* %83, i32 0, i32 6
  %84 = bitcast i24* %resolved_level80 to i32*
  %bf.load81 = load i32, i32* %84, align 8
  %bf.clear82 = and i32 %bf.load81, -130049
  store i32 %bf.clear82, i32* %84, align 8
  %85 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %bidi_type83 = getelementptr inbounds %struct.glyph, %struct.glyph* %85, i32 0, i32 6
  %86 = bitcast i24* %bidi_type83 to i32*
  %bf.load84 = load i32, i32* %86, align 8
  %bf.clear85 = and i32 %bf.load84, -917505
  store i32 %bf.clear85, i32* %86, align 8
  br label %if.end.86

if.end.86:                                        ; preds = %if.else, %if.then.65
  %87 = load %struct.it*, %struct.it** %it.addr, align 8
  %area87 = getelementptr inbounds %struct.it, %struct.it* %87, i32 0, i32 60
  %88 = load i32, i32* %area87, align 4
  %idxprom88 = sext i32 %88 to i64
  %89 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row89 = getelementptr inbounds %struct.it, %struct.it* %89, i32 0, i32 59
  %90 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row89, align 8
  %used90 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %90, i32 0, i32 1
  %arrayidx91 = getelementptr inbounds [4 x i16], [4 x i16]* %used90, i32 0, i64 %idxprom88
  %91 = load i16, i16* %arrayidx91, align 2
  %inc = add i16 %91, 1
  store i16 %inc, i16* %arrayidx91, align 2
  %92 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr92 = getelementptr inbounds %struct.glyph, %struct.glyph* %92, i32 1
  store %struct.glyph* %incdec.ptr92, %struct.glyph** %glyph, align 8
  br label %for.inc.93

for.inc.93:                                       ; preds = %if.end.86
  %93 = load i32, i32* %i, align 4
  %inc94 = add nsw i32 %93, 1
  store i32 %inc94, i32* %i, align 4
  br label %for.cond.41

for.end.95:                                       ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @produce_glyphs(%struct.it* %it) #0 {
entry:
  %it.addr = alloca %struct.it*, align 8
  %absolute_x = alloca i32, align 4
  %next_tab_x = alloca i32, align 4
  %nspaces = alloca i32, align 4
  %n = alloca i32, align 4
  %charset_list = alloca i64, align 8
  %acronym = alloca i64, align 8
  store %struct.it* %it, %struct.it** %it.addr, align 8
  %0 = load %struct.it*, %struct.it** %it.addr, align 8
  %what = getelementptr inbounds %struct.it, %struct.it* %0, i32 0, i32 30
  %1 = load i32, i32* %what, align 4
  %cmp = icmp eq i32 %1, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @produce_stretch_glyph(%struct.it* %2)
  br label %done

if.end:                                           ; preds = %entry
  %3 = load %struct.it*, %struct.it** %it.addr, align 8
  %what1 = getelementptr inbounds %struct.it, %struct.it* %3, i32 0, i32 30
  %4 = load i32, i32* %what1, align 4
  %cmp2 = icmp eq i32 %4, 1
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %5 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @produce_composite_glyph(%struct.it* %5)
  br label %done

if.end.4:                                         ; preds = %if.end
  %6 = load %struct.it*, %struct.it** %it.addr, align 8
  %what5 = getelementptr inbounds %struct.it, %struct.it* %6, i32 0, i32 30
  %7 = load i32, i32* %what5, align 4
  %cmp6 = icmp eq i32 %7, 2
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  %8 = load %struct.it*, %struct.it** %it.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  call void @produce_glyphless_glyph(%struct.it* %8, i64 %call)
  br label %done

if.end.8:                                         ; preds = %if.end.4
  %9 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display = getelementptr inbounds %struct.it, %struct.it* %9, i32 0, i32 38
  %10 = load i32, i32* %char_to_display, align 4
  %cmp9 = icmp sge i32 %10, 32
  br i1 %cmp9, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.8
  %11 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display10 = getelementptr inbounds %struct.it, %struct.it* %11, i32 0, i32 38
  %12 = load i32, i32* %char_to_display10, align 4
  %cmp11 = icmp slt i32 %12, 127
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %land.lhs.true
  %13 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs = getelementptr inbounds %struct.it, %struct.it* %13, i32 0, i32 61
  store i32 1, i32* %nglyphs, align 4
  %14 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width = getelementptr inbounds %struct.it, %struct.it* %14, i32 0, i32 62
  store i32 1, i32* %pixel_width, align 4
  %15 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row = getelementptr inbounds %struct.it, %struct.it* %15, i32 0, i32 59
  %16 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row, align 8
  %tobool = icmp ne %struct.glyph_row* %16, null
  br i1 %tobool, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.then.12
  %17 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @append_glyph(%struct.it* %17)
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.then.12
  br label %if.end.123

if.else:                                          ; preds = %land.lhs.true, %if.end.8
  %18 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display15 = getelementptr inbounds %struct.it, %struct.it* %18, i32 0, i32 38
  %19 = load i32, i32* %char_to_display15, align 4
  %cmp16 = icmp eq i32 %19, 10
  br i1 %cmp16, label %if.then.17, label %if.else.20

if.then.17:                                       ; preds = %if.else
  %20 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs18 = getelementptr inbounds %struct.it, %struct.it* %20, i32 0, i32 61
  store i32 0, i32* %nglyphs18, align 4
  %21 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width19 = getelementptr inbounds %struct.it, %struct.it* %21, i32 0, i32 62
  store i32 0, i32* %pixel_width19, align 4
  br label %if.end.122

if.else.20:                                       ; preds = %if.else
  %22 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display21 = getelementptr inbounds %struct.it, %struct.it* %22, i32 0, i32 38
  %23 = load i32, i32* %char_to_display21, align 4
  %cmp22 = icmp eq i32 %23, 9
  br i1 %cmp22, label %if.then.23, label %if.else.40

if.then.23:                                       ; preds = %if.else.20
  %24 = load %struct.it*, %struct.it** %it.addr, align 8
  %current_x = getelementptr inbounds %struct.it, %struct.it* %24, i32 0, i32 71
  %25 = load i32, i32* %current_x, align 4
  %26 = load %struct.it*, %struct.it** %it.addr, align 8
  %continuation_lines_width = getelementptr inbounds %struct.it, %struct.it* %26, i32 0, i32 72
  %27 = load i32, i32* %continuation_lines_width, align 4
  %add = add nsw i32 %25, %27
  store i32 %add, i32* %absolute_x, align 4
  %28 = load i32, i32* %absolute_x, align 4
  %add24 = add nsw i32 1, %28
  %29 = load %struct.it*, %struct.it** %it.addr, align 8
  %tab_width = getelementptr inbounds %struct.it, %struct.it* %29, i32 0, i32 45
  %30 = load i16, i16* %tab_width, align 2
  %conv = sext i16 %30 to i32
  %add25 = add nsw i32 %add24, %conv
  %sub = sub nsw i32 %add25, 1
  %31 = load %struct.it*, %struct.it** %it.addr, align 8
  %tab_width26 = getelementptr inbounds %struct.it, %struct.it* %31, i32 0, i32 45
  %32 = load i16, i16* %tab_width26, align 2
  %conv27 = sext i16 %32 to i32
  %div = sdiv i32 %sub, %conv27
  %33 = load %struct.it*, %struct.it** %it.addr, align 8
  %tab_width28 = getelementptr inbounds %struct.it, %struct.it* %33, i32 0, i32 45
  %34 = load i16, i16* %tab_width28, align 2
  %conv29 = sext i16 %34 to i32
  %mul = mul nsw i32 %div, %conv29
  store i32 %mul, i32* %next_tab_x, align 4
  %35 = load i32, i32* %next_tab_x, align 4
  %36 = load i32, i32* %absolute_x, align 4
  %sub30 = sub nsw i32 %35, %36
  store i32 %sub30, i32* %nspaces, align 4
  %37 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row31 = getelementptr inbounds %struct.it, %struct.it* %37, i32 0, i32 59
  %38 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row31, align 8
  %tobool32 = icmp ne %struct.glyph_row* %38, null
  br i1 %tobool32, label %if.then.33, label %if.end.37

if.then.33:                                       ; preds = %if.then.23
  %39 = load i32, i32* %nspaces, align 4
  store i32 %39, i32* %n, align 4
  %40 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display34 = getelementptr inbounds %struct.it, %struct.it* %40, i32 0, i32 38
  store i32 32, i32* %char_to_display34, align 4
  %41 = load %struct.it*, %struct.it** %it.addr, align 8
  %len = getelementptr inbounds %struct.it, %struct.it* %41, i32 0, i32 36
  store i32 1, i32* %len, align 4
  %42 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width35 = getelementptr inbounds %struct.it, %struct.it* %42, i32 0, i32 62
  store i32 1, i32* %pixel_width35, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.33
  %43 = load i32, i32* %n, align 4
  %dec = add nsw i32 %43, -1
  store i32 %dec, i32* %n, align 4
  %tobool36 = icmp ne i32 %43, 0
  br i1 %tobool36, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @append_glyph(%struct.it* %44)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.37

if.end.37:                                        ; preds = %while.end, %if.then.23
  %45 = load i32, i32* %nspaces, align 4
  %46 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width38 = getelementptr inbounds %struct.it, %struct.it* %46, i32 0, i32 62
  store i32 %45, i32* %pixel_width38, align 4
  %47 = load i32, i32* %nspaces, align 4
  %48 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs39 = getelementptr inbounds %struct.it, %struct.it* %48, i32 0, i32 61
  store i32 %47, i32* %nglyphs39, align 4
  br label %if.end.121

if.else.40:                                       ; preds = %if.else.20
  %49 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display41 = getelementptr inbounds %struct.it, %struct.it* %49, i32 0, i32 38
  %50 = load i32, i32* %char_to_display41, align 4
  %cmp42 = icmp sgt i32 %50, 4194175
  br i1 %cmp42, label %if.then.44, label %if.else.51

if.then.44:                                       ; preds = %if.else.40
  %51 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs45 = getelementptr inbounds %struct.it, %struct.it* %51, i32 0, i32 61
  store i32 1, i32* %nglyphs45, align 4
  %52 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width46 = getelementptr inbounds %struct.it, %struct.it* %52, i32 0, i32 62
  store i32 1, i32* %pixel_width46, align 4
  %53 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row47 = getelementptr inbounds %struct.it, %struct.it* %53, i32 0, i32 59
  %54 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row47, align 8
  %tobool48 = icmp ne %struct.glyph_row* %54, null
  br i1 %tobool48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.then.44
  %55 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @append_glyph(%struct.it* %55)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.49, %if.then.44
  br label %if.end.120

if.else.51:                                       ; preds = %if.else.40
  %56 = load %struct.it*, %struct.it** %it.addr, align 8
  %f = getelementptr inbounds %struct.it, %struct.it* %56, i32 0, i32 2
  %57 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 61
  %58 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %charset_list52 = getelementptr inbounds %struct.terminal, %struct.terminal* %58, i32 0, i32 2
  %59 = load i64, i64* %charset_list52, align 8
  store i64 %59, i64* %charset_list, align 8
  %60 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display53 = getelementptr inbounds %struct.it, %struct.it* %60, i32 0, i32 38
  %61 = load i32, i32* %char_to_display53, align 4
  %62 = load i64, i64* %charset_list, align 8
  %call54 = call %struct.charset* @char_charset(i32 %61, i64 %62, i32* null)
  %tobool55 = icmp ne %struct.charset* %call54, null
  br i1 %tobool55, label %if.then.56, label %if.else.117

if.then.56:                                       ; preds = %if.else.51
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.56
  %63 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display57 = getelementptr inbounds %struct.it, %struct.it* %63, i32 0, i32 38
  %64 = load i32, i32* %char_to_display57, align 4
  %add58 = add i32 %64, 0
  %cmp59 = icmp ult i32 %add58, 128
  br i1 %cmp59, label %cond.true.66, label %cond.false.103

cond.false:                                       ; preds = %if.then.56
  %65 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display61 = getelementptr inbounds %struct.it, %struct.it* %65, i32 0, i32 38
  %66 = load i32, i32* %char_to_display61, align 4
  %conv62 = sext i32 %66 to i64
  %add63 = add i64 %conv62, 0
  %cmp64 = icmp ult i64 %add63, 128
  br i1 %cmp64, label %cond.true.66, label %cond.false.103

cond.true.66:                                     ; preds = %cond.false, %cond.true
  %67 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display67 = getelementptr inbounds %struct.it, %struct.it* %67, i32 0, i32 38
  %68 = load i32, i32* %char_to_display67, align 4
  %cmp68 = icmp slt i32 %68, 32
  br i1 %cmp68, label %cond.true.70, label %cond.false.88

cond.true.70:                                     ; preds = %cond.true.66
  %69 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display71 = getelementptr inbounds %struct.it, %struct.it* %69, i32 0, i32 38
  %70 = load i32, i32* %char_to_display71, align 4
  %cmp72 = icmp eq i32 %70, 9
  br i1 %cmp72, label %cond.true.74, label %cond.false.76

cond.true.74:                                     ; preds = %cond.true.70
  %71 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %tab_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %71, i32 0, i32 19
  %72 = load i64, i64* %tab_width_, align 8
  %shr = ashr i64 %72, 2
  %call75 = call i32 @sanitize_tab_width(i64 %shr)
  br label %cond.end.86

cond.false.76:                                    ; preds = %cond.true.70
  %73 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display77 = getelementptr inbounds %struct.it, %struct.it* %73, i32 0, i32 38
  %74 = load i32, i32* %char_to_display77, align 4
  %cmp78 = icmp eq i32 %74, 10
  br i1 %cmp78, label %cond.true.80, label %cond.false.81

cond.true.80:                                     ; preds = %cond.false.76
  br label %cond.end

cond.false.81:                                    ; preds = %cond.false.76
  %75 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_ = getelementptr inbounds %struct.buffer, %struct.buffer* %75, i32 0, i32 29
  %76 = load i64, i64* %ctl_arrow_, align 8
  %call82 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp83 = icmp eq i64 %76, %call82
  %cond = select i1 %cmp83, i32 4, i32 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false.81, %cond.true.80
  %cond85 = phi i32 [ 0, %cond.true.80 ], [ %cond, %cond.false.81 ]
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.end, %cond.true.74
  %cond87 = phi i32 [ %call75, %cond.true.74 ], [ %cond85, %cond.end ]
  br label %cond.end.101

cond.false.88:                                    ; preds = %cond.true.66
  %77 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display89 = getelementptr inbounds %struct.it, %struct.it* %77, i32 0, i32 38
  %78 = load i32, i32* %char_to_display89, align 4
  %cmp90 = icmp slt i32 %78, 127
  br i1 %cmp90, label %cond.true.92, label %cond.false.93

cond.true.92:                                     ; preds = %cond.false.88
  br label %cond.end.99

cond.false.93:                                    ; preds = %cond.false.88
  %79 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_94 = getelementptr inbounds %struct.buffer, %struct.buffer* %79, i32 0, i32 29
  %80 = load i64, i64* %ctl_arrow_94, align 8
  %call95 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp96 = icmp eq i64 %80, %call95
  %cond98 = select i1 %cmp96, i32 4, i32 2
  br label %cond.end.99

cond.end.99:                                      ; preds = %cond.false.93, %cond.true.92
  %cond100 = phi i32 [ 1, %cond.true.92 ], [ %cond98, %cond.false.93 ]
  br label %cond.end.101

cond.end.101:                                     ; preds = %cond.end.99, %cond.end.86
  %cond102 = phi i32 [ %cond87, %cond.end.86 ], [ %cond100, %cond.end.99 ]
  br label %cond.end.108

cond.false.103:                                   ; preds = %cond.false, %cond.true
  %81 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  %82 = load %struct.it*, %struct.it** %it.addr, align 8
  %char_to_display104 = getelementptr inbounds %struct.it, %struct.it* %82, i32 0, i32 38
  %83 = load i32, i32* %char_to_display104, align 4
  %call105 = call i64 @CHAR_TABLE_REF(i64 %81, i32 %83)
  %shr106 = ashr i64 %call105, 2
  %call107 = call i32 @sanitize_char_width(i64 %shr106)
  br label %cond.end.108

cond.end.108:                                     ; preds = %cond.false.103, %cond.end.101
  %cond109 = phi i32 [ %cond102, %cond.end.101 ], [ %call107, %cond.false.103 ]
  %84 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width110 = getelementptr inbounds %struct.it, %struct.it* %84, i32 0, i32 62
  store i32 %cond109, i32* %pixel_width110, align 4
  %85 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width111 = getelementptr inbounds %struct.it, %struct.it* %85, i32 0, i32 62
  %86 = load i32, i32* %pixel_width111, align 4
  %87 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs112 = getelementptr inbounds %struct.it, %struct.it* %87, i32 0, i32 61
  store i32 %86, i32* %nglyphs112, align 4
  %88 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row113 = getelementptr inbounds %struct.it, %struct.it* %88, i32 0, i32 59
  %89 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row113, align 8
  %tobool114 = icmp ne %struct.glyph_row* %89, null
  br i1 %tobool114, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %cond.end.108
  %90 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @append_glyph(%struct.it* %90)
  br label %if.end.116

if.end.116:                                       ; preds = %if.then.115, %cond.end.108
  br label %if.end.119

if.else.117:                                      ; preds = %if.else.51
  %91 = load %struct.it*, %struct.it** %it.addr, align 8
  %call118 = call i64 @lookup_glyphless_char_display(i32 -1, %struct.it* %91)
  store i64 %call118, i64* %acronym, align 8
  %92 = load %struct.it*, %struct.it** %it.addr, align 8
  %93 = load i64, i64* %acronym, align 8
  call void @produce_glyphless_glyph(%struct.it* %92, i64 %93)
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.117, %if.end.116
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %if.end.50
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end.37
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %if.then.17
  br label %if.end.123

if.end.123:                                       ; preds = %if.end.122, %if.end.14
  br label %done

done:                                             ; preds = %if.end.123, %if.then.7, %if.then.3, %if.then
  %94 = load %struct.it*, %struct.it** %it.addr, align 8
  %area = getelementptr inbounds %struct.it, %struct.it* %94, i32 0, i32 60
  %95 = load i32, i32* %area, align 4
  %cmp124 = icmp eq i32 %95, 1
  br i1 %cmp124, label %if.then.126, label %if.end.130

if.then.126:                                      ; preds = %done
  %96 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width127 = getelementptr inbounds %struct.it, %struct.it* %96, i32 0, i32 62
  %97 = load i32, i32* %pixel_width127, align 4
  %98 = load %struct.it*, %struct.it** %it.addr, align 8
  %current_x128 = getelementptr inbounds %struct.it, %struct.it* %98, i32 0, i32 71
  %99 = load i32, i32* %current_x128, align 4
  %add129 = add nsw i32 %99, %97
  store i32 %add129, i32* %current_x128, align 4
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.126, %done
  %100 = load %struct.it*, %struct.it** %it.addr, align 8
  %max_phys_ascent = getelementptr inbounds %struct.it, %struct.it* %100, i32 0, i32 69
  store i32 0, i32* %max_phys_ascent, align 4
  %101 = load %struct.it*, %struct.it** %it.addr, align 8
  %phys_ascent = getelementptr inbounds %struct.it, %struct.it* %101, i32 0, i32 67
  store i32 0, i32* %phys_ascent, align 4
  %102 = load %struct.it*, %struct.it** %it.addr, align 8
  %max_ascent = getelementptr inbounds %struct.it, %struct.it* %102, i32 0, i32 65
  store i32 0, i32* %max_ascent, align 4
  %103 = load %struct.it*, %struct.it** %it.addr, align 8
  %ascent = getelementptr inbounds %struct.it, %struct.it* %103, i32 0, i32 63
  store i32 0, i32* %ascent, align 4
  %104 = load %struct.it*, %struct.it** %it.addr, align 8
  %max_phys_descent = getelementptr inbounds %struct.it, %struct.it* %104, i32 0, i32 70
  store i32 1, i32* %max_phys_descent, align 4
  %105 = load %struct.it*, %struct.it** %it.addr, align 8
  %phys_descent = getelementptr inbounds %struct.it, %struct.it* %105, i32 0, i32 68
  store i32 1, i32* %phys_descent, align 4
  %106 = load %struct.it*, %struct.it** %it.addr, align 8
  %max_descent = getelementptr inbounds %struct.it, %struct.it* %106, i32 0, i32 66
  store i32 1, i32* %max_descent, align 4
  %107 = load %struct.it*, %struct.it** %it.addr, align 8
  %descent = getelementptr inbounds %struct.it, %struct.it* %107, i32 0, i32 64
  store i32 1, i32* %descent, align 4
  ret void
}

declare void @produce_stretch_glyph(%struct.it*) #1

; Function Attrs: nounwind uwtable
define internal void @produce_composite_glyph(%struct.it* %it) #0 {
entry:
  %it.addr = alloca %struct.it*, align 8
  %cmp1 = alloca %struct.composition*, align 8
  %gstring = alloca i64, align 8
  store %struct.it* %it, %struct.it** %it.addr, align 8
  %0 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it = getelementptr inbounds %struct.it, %struct.it* %0, i32 0, i32 37
  %ch = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it, i32 0, i32 2
  %1 = load i32, i32* %ch, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it2 = getelementptr inbounds %struct.it, %struct.it* %2, i32 0, i32 37
  %id = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it2, i32 0, i32 1
  %3 = load i64, i64* %id, align 8
  %4 = load %struct.composition**, %struct.composition*** @composition_table, align 8
  %arrayidx = getelementptr inbounds %struct.composition*, %struct.composition** %4, i64 %3
  %5 = load %struct.composition*, %struct.composition** %arrayidx, align 8
  store %struct.composition* %5, %struct.composition** %cmp1, align 8
  %6 = load %struct.composition*, %struct.composition** %cmp1, align 8
  %width = getelementptr inbounds %struct.composition, %struct.composition* %6, i32 0, i32 6
  %7 = load i32, i32* %width, align 4
  %8 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width = getelementptr inbounds %struct.it, %struct.it* %8, i32 0, i32 62
  store i32 %7, i32* %pixel_width, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it3 = getelementptr inbounds %struct.it, %struct.it* %9, i32 0, i32 37
  %id4 = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it3, i32 0, i32 1
  %10 = load i64, i64* %id4, align 8
  %call = call i64 @composition_gstring_from_id(i64 %10)
  store i64 %call, i64* %gstring, align 8
  %11 = load i64, i64* %gstring, align 8
  %12 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it5 = getelementptr inbounds %struct.it, %struct.it* %12, i32 0, i32 37
  %from = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it5, i32 0, i32 10
  %13 = load i32, i32* %from, align 4
  %conv = sext i32 %13 to i64
  %14 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it6 = getelementptr inbounds %struct.it, %struct.it* %14, i32 0, i32 37
  %to = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it6, i32 0, i32 11
  %15 = load i32, i32* %to, align 4
  %conv7 = sext i32 %15 to i64
  %call8 = call i32 @composition_gstring_width(i64 %11, i64 %conv, i64 %conv7, %struct.font_metrics* null)
  %16 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width9 = getelementptr inbounds %struct.it, %struct.it* %16, i32 0, i32 62
  store i32 %call8, i32* %pixel_width9, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs = getelementptr inbounds %struct.it, %struct.it* %17, i32 0, i32 61
  store i32 1, i32* %nglyphs, align 4
  %18 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row = getelementptr inbounds %struct.it, %struct.it* %18, i32 0, i32 59
  %19 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row, align 8
  %tobool = icmp ne %struct.glyph_row* %19, null
  br i1 %tobool, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end
  %20 = load %struct.it*, %struct.it** %it.addr, align 8
  call void @append_composite_glyph(%struct.it* %20)
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @produce_glyphless_glyph(%struct.it* %it, i64 %acronym) #0 {
entry:
  %it.addr = alloca %struct.it*, align 8
  %acronym.addr = alloca i64, align 8
  %len = alloca i32, align 4
  %face_id = alloca i32, align 4
  %buf = alloca [11 x i8], align 1
  %str = alloca i8*, align 8
  store %struct.it* %it, %struct.it** %it.addr, align 8
  store i64 %acronym, i64* %acronym.addr, align 8
  %0 = load %struct.it*, %struct.it** %it.addr, align 8
  %call = call i32 @merge_glyphless_glyph_face(%struct.it* %0)
  store i32 %call, i32* %face_id, align 4
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.116, i32 0, i32 0), i8** %str, align 8
  %1 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyphless_method = getelementptr inbounds %struct.it, %struct.it* %1, i32 0, i32 39
  %2 = load i32, i32* %glyphless_method, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %len, align 4
  br label %if.end.126

if.else:                                          ; preds = %entry
  %3 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyphless_method1 = getelementptr inbounds %struct.it, %struct.it* %3, i32 0, i32 39
  %4 = load i32, i32* %glyphless_method1, align 4
  %cmp2 = icmp eq i32 %4, 1
  br i1 %cmp2, label %if.then.3, label %if.else.63

if.then.3:                                        ; preds = %if.else
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.3
  %5 = load %struct.it*, %struct.it** %it.addr, align 8
  %c = getelementptr inbounds %struct.it, %struct.it* %5, i32 0, i32 35
  %6 = load i32, i32* %c, align 4
  %add = add i32 %6, 0
  %cmp4 = icmp ult i32 %add, 128
  br i1 %cmp4, label %cond.true.9, label %cond.false.46

cond.false:                                       ; preds = %if.then.3
  %7 = load %struct.it*, %struct.it** %it.addr, align 8
  %c5 = getelementptr inbounds %struct.it, %struct.it* %7, i32 0, i32 35
  %8 = load i32, i32* %c5, align 4
  %conv = sext i32 %8 to i64
  %add6 = add i64 %conv, 0
  %cmp7 = icmp ult i64 %add6, 128
  br i1 %cmp7, label %cond.true.9, label %cond.false.46

cond.true.9:                                      ; preds = %cond.false, %cond.true
  %9 = load %struct.it*, %struct.it** %it.addr, align 8
  %c10 = getelementptr inbounds %struct.it, %struct.it* %9, i32 0, i32 35
  %10 = load i32, i32* %c10, align 4
  %cmp11 = icmp slt i32 %10, 32
  br i1 %cmp11, label %cond.true.13, label %cond.false.31

cond.true.13:                                     ; preds = %cond.true.9
  %11 = load %struct.it*, %struct.it** %it.addr, align 8
  %c14 = getelementptr inbounds %struct.it, %struct.it* %11, i32 0, i32 35
  %12 = load i32, i32* %c14, align 4
  %cmp15 = icmp eq i32 %12, 9
  br i1 %cmp15, label %cond.true.17, label %cond.false.19

cond.true.17:                                     ; preds = %cond.true.13
  %13 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %tab_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 19
  %14 = load i64, i64* %tab_width_, align 8
  %shr = ashr i64 %14, 2
  %call18 = call i32 @sanitize_tab_width(i64 %shr)
  br label %cond.end.29

cond.false.19:                                    ; preds = %cond.true.13
  %15 = load %struct.it*, %struct.it** %it.addr, align 8
  %c20 = getelementptr inbounds %struct.it, %struct.it* %15, i32 0, i32 35
  %16 = load i32, i32* %c20, align 4
  %cmp21 = icmp eq i32 %16, 10
  br i1 %cmp21, label %cond.true.23, label %cond.false.24

cond.true.23:                                     ; preds = %cond.false.19
  br label %cond.end

cond.false.24:                                    ; preds = %cond.false.19
  %17 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_ = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 29
  %18 = load i64, i64* %ctl_arrow_, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp26 = icmp eq i64 %18, %call25
  %cond = select i1 %cmp26, i32 4, i32 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false.24, %cond.true.23
  %cond28 = phi i32 [ 0, %cond.true.23 ], [ %cond, %cond.false.24 ]
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.end, %cond.true.17
  %cond30 = phi i32 [ %call18, %cond.true.17 ], [ %cond28, %cond.end ]
  br label %cond.end.44

cond.false.31:                                    ; preds = %cond.true.9
  %19 = load %struct.it*, %struct.it** %it.addr, align 8
  %c32 = getelementptr inbounds %struct.it, %struct.it* %19, i32 0, i32 35
  %20 = load i32, i32* %c32, align 4
  %cmp33 = icmp slt i32 %20, 127
  br i1 %cmp33, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.false.31
  br label %cond.end.42

cond.false.36:                                    ; preds = %cond.false.31
  %21 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_37 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 29
  %22 = load i64, i64* %ctl_arrow_37, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp39 = icmp eq i64 %22, %call38
  %cond41 = select i1 %cmp39, i32 4, i32 2
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.false.36, %cond.true.35
  %cond43 = phi i32 [ 1, %cond.true.35 ], [ %cond41, %cond.false.36 ]
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.end.42, %cond.end.29
  %cond45 = phi i32 [ %cond30, %cond.end.29 ], [ %cond43, %cond.end.42 ]
  br label %cond.end.51

cond.false.46:                                    ; preds = %cond.false, %cond.true
  %23 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  %24 = load %struct.it*, %struct.it** %it.addr, align 8
  %c47 = getelementptr inbounds %struct.it, %struct.it* %24, i32 0, i32 35
  %25 = load i32, i32* %c47, align 4
  %call48 = call i64 @CHAR_TABLE_REF(i64 %23, i32 %25)
  %shr49 = ashr i64 %call48, 2
  %call50 = call i32 @sanitize_char_width(i64 %shr49)
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.46, %cond.end.44
  %cond52 = phi i32 [ %cond45, %cond.end.44 ], [ %call50, %cond.false.46 ]
  store i32 %cond52, i32* %len, align 4
  %26 = load i32, i32* %len, align 4
  %cmp53 = icmp eq i32 %26, 0
  br i1 %cmp53, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %cond.end.51
  store i32 1, i32* %len, align 4
  br label %if.end.60

if.else.56:                                       ; preds = %cond.end.51
  %27 = load i32, i32* %len, align 4
  %cmp57 = icmp sgt i32 %27, 4
  br i1 %cmp57, label %if.then.59, label %if.end

if.then.59:                                       ; preds = %if.else.56
  store i32 4, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.59, %if.else.56
  br label %if.end.60

if.end.60:                                        ; preds = %if.end, %if.then.55
  %arraydecay = getelementptr inbounds [11 x i8], [11 x i8]* %buf, i32 0, i32 0
  %28 = load i32, i32* %len, align 4
  %29 = load i8*, i8** %str, align 8
  %call61 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.117, i32 0, i32 0), i32 %28, i8* %29) #3
  store i32 %call61, i32* %len, align 4
  %arraydecay62 = getelementptr inbounds [11 x i8], [11 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay62, i8** %str, align 8
  br label %if.end.125

if.else.63:                                       ; preds = %if.else
  %30 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyphless_method64 = getelementptr inbounds %struct.it, %struct.it* %30, i32 0, i32 39
  %31 = load i32, i32* %glyphless_method64, align 4
  %cmp65 = icmp eq i32 %31, 2
  br i1 %cmp65, label %if.then.67, label %if.else.107

if.then.67:                                       ; preds = %if.else.63
  %32 = load i64, i64* %acronym.addr, align 8
  %call68 = call zeroext i1 @STRINGP(i64 %32)
  br i1 %call68, label %if.end.74, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then.67
  %33 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 119), align 8
  %call69 = call zeroext i1 @CHAR_TABLE_P(i64 %33)
  br i1 %call69, label %if.then.71, label %if.end.74

if.then.71:                                       ; preds = %land.lhs.true
  %34 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 119), align 8
  %35 = load %struct.it*, %struct.it** %it.addr, align 8
  %c72 = getelementptr inbounds %struct.it, %struct.it* %35, i32 0, i32 35
  %36 = load i32, i32* %c72, align 4
  %call73 = call i64 @CHAR_TABLE_REF(i64 %34, i32 %36)
  store i64 %call73, i64* %acronym.addr, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.71, %land.lhs.true, %if.then.67
  %37 = load i64, i64* %acronym.addr, align 8
  %and = and i64 %37, 7
  %conv75 = trunc i64 %and to i32
  %cmp76 = icmp eq i32 %conv75, 3
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.74
  %38 = load i64, i64* %acronym.addr, align 8
  %sub = sub nsw i64 %38, 3
  %39 = inttoptr i64 %sub to i8*
  %40 = bitcast i8* %39 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %40, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %41 = load i64, i64* %cdr, align 8
  store i64 %41, i64* %acronym.addr, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.78, %if.end.74
  %arrayidx = getelementptr inbounds [11 x i8], [11 x i8]* %buf, i32 0, i64 0
  store i8 91, i8* %arrayidx, align 1
  %42 = load i64, i64* %acronym.addr, align 8
  %call80 = call zeroext i1 @STRINGP(i64 %42)
  br i1 %call80, label %cond.true.82, label %cond.false.84

cond.true.82:                                     ; preds = %if.end.79
  %43 = load i64, i64* %acronym.addr, align 8
  %call83 = call i8* @SSDATA(i64 %43)
  br label %cond.end.85

cond.false.84:                                    ; preds = %if.end.79
  br label %cond.end.85

cond.end.85:                                      ; preds = %cond.false.84, %cond.true.82
  %cond86 = phi i8* [ %call83, %cond.true.82 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0), %cond.false.84 ]
  store i8* %cond86, i8** %str, align 8
  store i32 0, i32* %len, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.85
  %44 = load i32, i32* %len, align 4
  %cmp87 = icmp slt i32 %44, 6
  br i1 %cmp87, label %land.lhs.true.89, label %land.end

land.lhs.true.89:                                 ; preds = %for.cond
  %45 = load i32, i32* %len, align 4
  %idxprom = sext i32 %45 to i64
  %46 = load i8*, i8** %str, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %46, i64 %idxprom
  %47 = load i8, i8* %arrayidx90, align 1
  %conv91 = sext i8 %47 to i32
  %tobool = icmp ne i32 %conv91, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.89
  %48 = load i32, i32* %len, align 4
  %idxprom92 = sext i32 %48 to i64
  %49 = load i8*, i8** %str, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %49, i64 %idxprom92
  %50 = load i8, i8* %arrayidx93, align 1
  %conv94 = sext i8 %50 to i32
  %add95 = add i32 %conv94, 0
  %cmp96 = icmp ult i32 %add95, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.89, %for.cond
  %51 = phi i1 [ false, %land.lhs.true.89 ], [ false, %for.cond ], [ %cmp96, %land.rhs ]
  br i1 %51, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %52 = load i32, i32* %len, align 4
  %idxprom98 = sext i32 %52 to i64
  %53 = load i8*, i8** %str, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %53, i64 %idxprom98
  %54 = load i8, i8* %arrayidx99, align 1
  %55 = load i32, i32* %len, align 4
  %add100 = add nsw i32 1, %55
  %idxprom101 = sext i32 %add100 to i64
  %arrayidx102 = getelementptr inbounds [11 x i8], [11 x i8]* %buf, i32 0, i64 %idxprom101
  store i8 %54, i8* %arrayidx102, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %56 = load i32, i32* %len, align 4
  %inc = add nsw i32 %56, 1
  store i32 %inc, i32* %len, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %57 = load i32, i32* %len, align 4
  %add103 = add nsw i32 1, %57
  %idxprom104 = sext i32 %add103 to i64
  %arrayidx105 = getelementptr inbounds [11 x i8], [11 x i8]* %buf, i32 0, i64 %idxprom104
  store i8 93, i8* %arrayidx105, align 1
  %58 = load i32, i32* %len, align 4
  %add106 = add nsw i32 %58, 2
  store i32 %add106, i32* %len, align 4
  br label %if.end.123

if.else.107:                                      ; preds = %if.else.63
  %arraydecay108 = getelementptr inbounds [11 x i8], [11 x i8]* %buf, i32 0, i32 0
  %59 = load %struct.it*, %struct.it** %it.addr, align 8
  %c109 = getelementptr inbounds %struct.it, %struct.it* %59, i32 0, i32 35
  %60 = load i32, i32* %c109, align 4
  %cmp110 = icmp slt i32 %60, 65536
  br i1 %cmp110, label %cond.true.112, label %cond.false.113

cond.true.112:                                    ; preds = %if.else.107
  br label %cond.end.118

cond.false.113:                                   ; preds = %if.else.107
  %61 = load %struct.it*, %struct.it** %it.addr, align 8
  %c114 = getelementptr inbounds %struct.it, %struct.it* %61, i32 0, i32 35
  %62 = load i32, i32* %c114, align 4
  %cmp115 = icmp sle i32 %62, 1114111
  %cond117 = select i1 %cmp115, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.120, i32 0, i32 0)
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.false.113, %cond.true.112
  %cond119 = phi i8* [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), %cond.true.112 ], [ %cond117, %cond.false.113 ]
  %63 = load %struct.it*, %struct.it** %it.addr, align 8
  %c120 = getelementptr inbounds %struct.it, %struct.it* %63, i32 0, i32 35
  %64 = load i32, i32* %c120, align 4
  %add121 = add i32 %64, 0
  %call122 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay108, i8* %cond119, i32 %add121) #3
  store i32 %call122, i32* %len, align 4
  br label %if.end.123

if.end.123:                                       ; preds = %cond.end.118, %for.end
  %arraydecay124 = getelementptr inbounds [11 x i8], [11 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay124, i8** %str, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.123, %if.end.60
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %if.then
  %65 = load i32, i32* %len, align 4
  %66 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width = getelementptr inbounds %struct.it, %struct.it* %66, i32 0, i32 62
  store i32 %65, i32* %pixel_width, align 4
  %67 = load i32, i32* %len, align 4
  %68 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs = getelementptr inbounds %struct.it, %struct.it* %68, i32 0, i32 61
  store i32 %67, i32* %nglyphs, align 4
  %69 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row = getelementptr inbounds %struct.it, %struct.it* %69, i32 0, i32 59
  %70 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row, align 8
  %tobool127 = icmp ne %struct.glyph_row* %70, null
  br i1 %tobool127, label %if.then.128, label %if.end.129

if.then.128:                                      ; preds = %if.end.126
  %71 = load %struct.it*, %struct.it** %it.addr, align 8
  %72 = load i32, i32* %face_id, align 4
  %73 = load i8*, i8** %str, align 8
  call void @append_glyphless_glyph(%struct.it* %71, i32 %72, i8* %73)
  br label %if.end.129

if.end.129:                                       ; preds = %if.then.128, %if.end.126
  ret void
}

declare i64 @lookup_glyphless_char_display(i32, %struct.it*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @tty_capable_p(%struct.tty_display_info* %tty, i32 %caps) #0 {
entry:
  %retval = alloca i1, align 1
  %tty.addr = alloca %struct.tty_display_info*, align 8
  %caps.addr = alloca i32, align 4
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  store i32 %caps, i32* %caps.addr, align 4
  %0 = load i32, i32* %caps.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %1, i32 0, i32 42
  %2 = load i8*, i8** %TS_standout_mode, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 61
  %4 = load i32, i32* %TN_max_colors, align 4
  %cmp = icmp sgt i32 %4, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %5, i32 0, i32 60
  %6 = load i32, i32* %TN_no_color_video, align 4
  %and2 = and i32 %6, 4
  %cmp3 = icmp eq i32 %and2, 0
  br i1 %cmp3, label %if.end, label %if.then

cond.false:                                       ; preds = %lor.lhs.false
  br i1 true, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true, %land.lhs.true
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true, %entry
  %7 = load i32, i32* %caps.addr, align 4
  %and4 = and i32 %7, 2
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %land.lhs.true.6, label %if.end.17

land.lhs.true.6:                                  ; preds = %if.end
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_enter_underline_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 56
  %9 = load i8*, i8** %TS_enter_underline_mode, align 8
  %tobool7 = icmp ne i8* %9, null
  br i1 %tobool7, label %lor.lhs.false.8, label %if.then.16

lor.lhs.false.8:                                  ; preds = %land.lhs.true.6
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors9 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 61
  %11 = load i32, i32* %TN_max_colors9, align 4
  %cmp10 = icmp sgt i32 %11, 0
  br i1 %cmp10, label %cond.true.11, label %cond.false.15

cond.true.11:                                     ; preds = %lor.lhs.false.8
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 60
  %13 = load i32, i32* %TN_no_color_video12, align 4
  %and13 = and i32 %13, 2
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %if.end.17, label %if.then.16

cond.false.15:                                    ; preds = %lor.lhs.false.8
  br i1 true, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %cond.false.15, %cond.true.11, %land.lhs.true.6
  store i1 false, i1* %retval
  br label %return

if.end.17:                                        ; preds = %cond.false.15, %cond.true.11, %if.end
  %14 = load i32, i32* %caps.addr, align 4
  %and18 = and i32 %14, 4
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.31

land.lhs.true.20:                                 ; preds = %if.end.17
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_enter_bold_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %15, i32 0, i32 51
  %16 = load i8*, i8** %TS_enter_bold_mode, align 8
  %tobool21 = icmp ne i8* %16, null
  br i1 %tobool21, label %lor.lhs.false.22, label %if.then.30

lor.lhs.false.22:                                 ; preds = %land.lhs.true.20
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors23 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %17, i32 0, i32 61
  %18 = load i32, i32* %TN_max_colors23, align 4
  %cmp24 = icmp sgt i32 %18, 0
  br i1 %cmp24, label %cond.true.25, label %cond.false.29

cond.true.25:                                     ; preds = %lor.lhs.false.22
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video26 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %19, i32 0, i32 60
  %20 = load i32, i32* %TN_no_color_video26, align 4
  %and27 = and i32 %20, 32
  %cmp28 = icmp eq i32 %and27, 0
  br i1 %cmp28, label %if.end.31, label %if.then.30

cond.false.29:                                    ; preds = %lor.lhs.false.22
  br i1 true, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %cond.false.29, %cond.true.25, %land.lhs.true.20
  store i1 false, i1* %retval
  br label %return

if.end.31:                                        ; preds = %cond.false.29, %cond.true.25, %if.end.17
  %21 = load i32, i32* %caps.addr, align 4
  %and32 = and i32 %21, 8
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %land.lhs.true.34, label %if.end.45

land.lhs.true.34:                                 ; preds = %if.end.31
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_enter_dim_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 53
  %23 = load i8*, i8** %TS_enter_dim_mode, align 8
  %tobool35 = icmp ne i8* %23, null
  br i1 %tobool35, label %lor.lhs.false.36, label %if.then.44

lor.lhs.false.36:                                 ; preds = %land.lhs.true.34
  %24 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors37 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %24, i32 0, i32 61
  %25 = load i32, i32* %TN_max_colors37, align 4
  %cmp38 = icmp sgt i32 %25, 0
  br i1 %cmp38, label %cond.true.39, label %cond.false.43

cond.true.39:                                     ; preds = %lor.lhs.false.36
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video40 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %26, i32 0, i32 60
  %27 = load i32, i32* %TN_no_color_video40, align 4
  %and41 = and i32 %27, 16
  %cmp42 = icmp eq i32 %and41, 0
  br i1 %cmp42, label %if.end.45, label %if.then.44

cond.false.43:                                    ; preds = %lor.lhs.false.36
  br i1 true, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %cond.false.43, %cond.true.39, %land.lhs.true.34
  store i1 false, i1* %retval
  br label %return

if.end.45:                                        ; preds = %cond.false.43, %cond.true.39, %if.end.31
  %28 = load i32, i32* %caps.addr, align 4
  %and46 = and i32 %28, 16
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %land.lhs.true.48, label %if.end.59

land.lhs.true.48:                                 ; preds = %if.end.45
  %29 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_enter_italic_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %29, i32 0, i32 52
  %30 = load i8*, i8** %TS_enter_italic_mode, align 8
  %tobool49 = icmp ne i8* %30, null
  br i1 %tobool49, label %lor.lhs.false.50, label %if.then.58

lor.lhs.false.50:                                 ; preds = %land.lhs.true.48
  %31 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors51 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %31, i32 0, i32 61
  %32 = load i32, i32* %TN_max_colors51, align 4
  %cmp52 = icmp sgt i32 %32, 0
  br i1 %cmp52, label %cond.true.53, label %cond.false.57

cond.true.53:                                     ; preds = %lor.lhs.false.50
  %33 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video54 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %33, i32 0, i32 60
  %34 = load i32, i32* %TN_no_color_video54, align 4
  %and55 = and i32 %34, 8
  %cmp56 = icmp eq i32 %and55, 0
  br i1 %cmp56, label %if.end.59, label %if.then.58

cond.false.57:                                    ; preds = %lor.lhs.false.50
  br i1 true, label %if.end.59, label %if.then.58

if.then.58:                                       ; preds = %cond.false.57, %cond.true.53, %land.lhs.true.48
  store i1 false, i1* %retval
  br label %return

if.end.59:                                        ; preds = %cond.false.57, %cond.true.53, %if.end.45
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.59, %if.then.58, %if.then.44, %if.then.30, %if.then.16, %if.then
  %35 = load i1, i1* %retval
  ret i1 %35
}

; Function Attrs: nounwind uwtable
define i64 @Ftty_display_color_p(i64 %terminal) #0 {
entry:
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_tty_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %1, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 61
  %4 = load i32, i32* %TN_max_colors, align 4
  %cmp = icmp sgt i32 %4, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

declare %struct.terminal* @decode_tty_terminal(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ftty_display_color_cells(i64 %terminal) #0 {
entry:
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_tty_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 61
  %4 = load i32, i32* %TN_max_colors, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ 0, %cond.false ]
  %conv = sext i32 %cond to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define void @set_tty_color_mode(%struct.tty_display_info* %tty, %struct.frame* %f) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %tem = alloca i64, align 8
  %val = alloca i64, align 8
  %color_mode = alloca i64, align 8
  %mode = alloca i32, align 4
  %tty_color_mode_alist = alloca i64, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %call = call i64 @build_string(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0))
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %call2 = call i64 @Fintern_soft(i64 %call, i64 %call1)
  store i64 %call2, i64* %tty_color_mode_alist, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 942)
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %param_alist = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 8
  %1 = load i64, i64* %param_alist, align 8
  %call4 = call i64 @assq_no_quit(i64 %call3, i64 %1)
  store i64 %call4, i64* %tem, align 8
  %2 = load i64, i64* %tem, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i64, i64* %tem, align 8
  %sub = sub nsw i64 %3, 3
  %4 = inttoptr i64 %sub to i8*
  %5 = bitcast i8* %4 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %5, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %6 = load i64, i64* %cdr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %call6, %cond.false ]
  store i64 %cond, i64* %val, align 8
  %7 = load i64, i64* %val, align 8
  %and7 = and i64 %7, 7
  %conv8 = trunc i64 %and7 to i32
  %and9 = and i32 %conv8, -5
  %cmp10 = icmp eq i32 %and9, 2
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %8 = load i64, i64* %val, align 8
  store i64 %8, i64* %color_mode, align 8
  br label %if.end.33

if.else:                                          ; preds = %cond.end
  %9 = load i64, i64* %tty_color_mode_alist, align 8
  %and12 = and i64 %9, 7
  %conv13 = trunc i64 %and12 to i32
  %cmp14 = icmp eq i32 %conv13, 0
  br i1 %cmp14, label %if.then.16, label %if.else.31

if.then.16:                                       ; preds = %if.else
  %10 = load i64, i64* %val, align 8
  %11 = load i64, i64* %tty_color_mode_alist, align 8
  %call17 = call i64 @Fsymbol_value(i64 %11)
  %call18 = call i64 @Fassq(i64 %10, i64 %call17)
  store i64 %call18, i64* %tem, align 8
  %12 = load i64, i64* %tem, align 8
  %and19 = and i64 %12, 7
  %conv20 = trunc i64 %and19 to i32
  %cmp21 = icmp eq i32 %conv20, 3
  br i1 %cmp21, label %cond.true.23, label %cond.false.27

cond.true.23:                                     ; preds = %if.then.16
  %13 = load i64, i64* %tem, align 8
  %sub24 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub24 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %u25 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 1
  %cdr26 = bitcast %union.anon.11* %u25 to i64*
  %16 = load i64, i64* %cdr26, align 8
  br label %cond.end.29

cond.false.27:                                    ; preds = %if.then.16
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.27, %cond.true.23
  %cond30 = phi i64 [ %16, %cond.true.23 ], [ %call28, %cond.false.27 ]
  store i64 %cond30, i64* %color_mode, align 8
  br label %if.end

if.else.31:                                       ; preds = %if.else
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call32, i64* %color_mode, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.31, %cond.end.29
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then
  %17 = load i64, i64* %color_mode, align 8
  %and34 = and i64 %17, 7
  %conv35 = trunc i64 %and34 to i32
  %and36 = and i32 %conv35, -5
  %cmp37 = icmp eq i32 %and36, 2
  br i1 %cmp37, label %land.lhs.true, label %cond.false.52

land.lhs.true:                                    ; preds = %if.end.33
  br i1 false, label %cond.false.42, label %cond.true.39

cond.true.39:                                     ; preds = %land.lhs.true
  %18 = load i64, i64* %color_mode, align 8
  %shr = ashr i64 %18, 2
  %cmp40 = icmp sle i64 -2147483648, %shr
  br i1 %cmp40, label %land.lhs.true.46, label %cond.false.52

cond.false.42:                                    ; preds = %land.lhs.true
  %19 = load i64, i64* %color_mode, align 8
  %shr43 = ashr i64 %19, 2
  %cmp44 = icmp sle i64 0, %shr43
  br i1 %cmp44, label %land.lhs.true.46, label %cond.false.52

land.lhs.true.46:                                 ; preds = %cond.false.42, %cond.true.39
  %20 = load i64, i64* %color_mode, align 8
  %shr47 = ashr i64 %20, 2
  %cmp48 = icmp sle i64 %shr47, 2147483647
  br i1 %cmp48, label %cond.true.50, label %cond.false.52

cond.true.50:                                     ; preds = %land.lhs.true.46
  %21 = load i64, i64* %color_mode, align 8
  %shr51 = ashr i64 %21, 2
  br label %cond.end.53

cond.false.52:                                    ; preds = %land.lhs.true.46, %cond.false.42, %cond.true.39, %if.end.33
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.52, %cond.true.50
  %cond54 = phi i64 [ %shr51, %cond.true.50 ], [ 0, %cond.false.52 ]
  %conv55 = trunc i64 %cond54 to i32
  store i32 %conv55, i32* %mode, align 4
  %22 = load i32, i32* %mode, align 4
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %previous_color_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %23, i32 0, i32 13
  %24 = load i32, i32* %previous_color_mode, align 4
  %cmp56 = icmp ne i32 %22, %24
  br i1 %cmp56, label %if.then.58, label %if.end.62

if.then.58:                                       ; preds = %cond.end.53
  %25 = load i32, i32* %mode, align 4
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %previous_color_mode59 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %26, i32 0, i32 13
  store i32 %25, i32* %previous_color_mode59, align 4
  %27 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %28 = load i32, i32* %mode, align 4
  call void @tty_setup_colors(%struct.tty_display_info* %27, i32 %28)
  %call60 = call i64 @intern(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i32 0, i32 0))
  %call61 = call i64 (i64, i64, ...) @safe_call(i64 1, i64 %call60)
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.58, %cond.end.53
  ret void
}

declare i64 @Fintern_soft(i64, i64) #1

declare i64 @build_string(i8*) #1

declare i64 @assq_no_quit(i64, i64) #1

declare i64 @Fassq(i64, i64) #1

declare i64 @Fsymbol_value(i64) #1

; Function Attrs: nounwind uwtable
define internal void @tty_setup_colors(%struct.tty_display_info* %tty, i32 %mode) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  %mode.addr = alloca i32, align 4
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i32, i32* %mode.addr, align 4
  %cmp = icmp slt i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %mode.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %mode.addr, align 4
  switch i32 %1, label %sw.default [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb.1
    i32 8, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %if.end
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 61
  store i32 0, i32* %TN_max_colors, align 4
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_pairs = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 62
  store i32 0, i32* %TN_max_pairs, align 4
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %4, i32 0, i32 60
  store i32 0, i32* %TN_no_color_video, align 4
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_orig_pair = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %5, i32 0, i32 63
  store i8* null, i8** %TS_orig_pair, align 8
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_background = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %6, i32 0, i32 65
  store i8* null, i8** %TS_set_background, align 8
  %7 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_foreground = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %7, i32 0, i32 64
  store i8* null, i8** %TS_set_foreground, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %if.end
  br label %sw.default

sw.default:                                       ; preds = %if.end, %sw.bb.1
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  call void @tty_default_color_capabilities(%struct.tty_display_info* %8, i1 zeroext false)
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.end
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_orig_pair3 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %9, i32 0, i32 63
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.121, i32 0, i32 0), i8** %TS_orig_pair3, align 8
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_foreground4 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 64
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8** %TS_set_foreground4, align 8
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_background5 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 65
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.123, i32 0, i32 0), i8** %TS_set_background5, align 8
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors6 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 61
  store i32 8, i32* %TN_max_colors6, align 4
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_pairs7 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %13, i32 0, i32 62
  store i32 64, i32* %TN_max_pairs7, align 4
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video8 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 60
  store i32 0, i32* %TN_no_color_video8, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.2, %sw.default, %sw.bb
  ret void
}

declare i64 @safe_call(i64, i64, ...) #1

declare i64 @intern(i8*) #1

; Function Attrs: nounwind uwtable
define i64 @Ftty_type(i64 %terminal) #0 {
entry:
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_tty_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %1, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %type = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 2
  %4 = load i8*, i8** %type, align 8
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info2 = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty3 = bitcast %union.display_info* %display_info2 to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty3, align 8
  %type4 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %6, i32 0, i32 2
  %7 = load i8*, i8** %type4, align 8
  %call5 = call i64 @build_string(i8* %7)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call5, %cond.true ], [ %call6, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind uwtable
define i64 @Fcontrolling_tty_p(i64 %terminal) #0 {
entry:
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_tty_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %1, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %name = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 1
  %4 = load i8*, i8** %name, align 8
  %call1 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0)) #10
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  %call3 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define i64 @Ftty_no_underline(i64 %terminal) #0 {
entry:
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_live_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %type = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 8
  %2 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %3, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_underline_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %4, i32 0, i32 56
  store i8* null, i8** %TS_enter_underline_mode, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call1
}

declare %struct.terminal* @decode_live_terminal(i64) #1

; Function Attrs: nounwind uwtable
define i64 @Ftty_top_frame(i64 %terminal) #0 {
entry:
  %retval = alloca i64, align 8
  %terminal.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  store i64 %terminal, i64* %terminal.addr, align 8
  %0 = load i64, i64* %terminal.addr, align 8
  %call = call %struct.terminal* @decode_live_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %type = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 8
  %2 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %3, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %top_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %4, i32 0, i32 11
  %5 = load i64, i64* %top_frame, align 8
  store i64 %5, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call1, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define i64 @Fsuspend_tty(i64 %tty) #0 {
entry:
  %tty.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  %term = alloca i64, align 8
  %.compoundliteral = alloca [2 x i64], align 8
  store i64 %tty, i64* %tty.addr, align 8
  %0 = load i64, i64* %tty.addr, align 8
  %call = call %struct.terminal* @decode_tty_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i32 0, i32 0)) #9
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty1 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty1, align 8
  %input = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 3
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %input, align 8
  store %struct._IO_FILE* %4, %struct._IO_FILE** %f, align 8
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %tobool2 = icmp ne %struct._IO_FILE* %5, null
  br i1 %tobool2, label %if.then.3, label %if.end.33

if.then.3:                                        ; preds = %if.end
  %6 = load %struct.terminal*, %struct.terminal** %t, align 8
  %7 = bitcast %struct.terminal* %6 to i8*
  %call4 = call i64 @make_lisp_ptr(i8* %7, i32 5)
  store i64 %call4, i64* %term, align 8
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i64 0, i64 0
  %call5 = call i64 @intern(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i32 0, i32 0))
  store i64 %call5, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %8 = load i64, i64* %term, align 8
  store i64 %8, i64* %arrayinit.element
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i32 0, i32 0
  %call6 = call i64 @Frun_hook_with_args(i64 2, i64* %arraydecay)
  %9 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info7 = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 12
  %tty8 = bitcast %union.display_info* %display_info7 to %struct.tty_display_info**
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty8, align 8
  call void @reset_sys_modes(%struct.tty_display_info* %10)
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call9 = call i32 @fileno(%struct._IO_FILE* %11) #3
  call void @delete_keyboard_wait_descriptor(i32 %call9)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %call10 = call i32 @fclose(%struct._IO_FILE* %12)
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8
  %14 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info11 = getelementptr inbounds %struct.terminal, %struct.terminal* %14, i32 0, i32 12
  %tty12 = bitcast %union.display_info* %display_info11 to %struct.tty_display_info**
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %tty12, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %15, i32 0, i32 4
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %cmp = icmp ne %struct._IO_FILE* %13, %16
  br i1 %cmp, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %if.then.3
  %17 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info14 = getelementptr inbounds %struct.terminal, %struct.terminal* %17, i32 0, i32 12
  %tty15 = bitcast %union.display_info* %display_info14 to %struct.tty_display_info**
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty15, align 8
  %output16 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %18, i32 0, i32 4
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %output16, align 8
  %call17 = call i32 @fclose(%struct._IO_FILE* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.13, %if.then.3
  %20 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info19 = getelementptr inbounds %struct.terminal, %struct.terminal* %20, i32 0, i32 12
  %tty20 = bitcast %union.display_info* %display_info19 to %struct.tty_display_info**
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty20, align 8
  %input21 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %21, i32 0, i32 3
  store %struct._IO_FILE* null, %struct._IO_FILE** %input21, align 8
  %22 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info22 = getelementptr inbounds %struct.terminal, %struct.terminal* %22, i32 0, i32 12
  %tty23 = bitcast %union.display_info* %display_info22 to %struct.tty_display_info**
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty23, align 8
  %output24 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %23, i32 0, i32 4
  store %struct._IO_FILE* null, %struct._IO_FILE** %output24, align 8
  %24 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info25 = getelementptr inbounds %struct.terminal, %struct.terminal* %24, i32 0, i32 12
  %tty26 = bitcast %union.display_info* %display_info25 to %struct.tty_display_info**
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty26, align 8
  %top_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %25, i32 0, i32 11
  %26 = load i64, i64* %top_frame, align 8
  %call27 = call zeroext i1 @FRAMEP(i64 %26)
  br i1 %call27, label %if.then.28, label %if.end.32

if.then.28:                                       ; preds = %if.end.18
  %27 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info29 = getelementptr inbounds %struct.terminal, %struct.terminal* %27, i32 0, i32 12
  %tty30 = bitcast %union.display_info* %display_info29 to %struct.tty_display_info**
  %28 = load %struct.tty_display_info*, %struct.tty_display_info** %tty30, align 8
  %top_frame31 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %28, i32 0, i32 11
  %29 = load i64, i64* %top_frame31, align 8
  %sub = sub nsw i64 %29, 5
  %30 = inttoptr i64 %sub to i8*
  %31 = bitcast i8* %30 to %struct.frame*
  call void @SET_FRAME_VISIBLE(%struct.frame* %31, i32 0)
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.28, %if.end.18
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end
  %32 = load %struct.terminal*, %struct.terminal** %t, align 8
  call void @clear_tty_hooks(%struct.terminal* %32)
  %call34 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call34
}

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

declare i64 @make_lisp_ptr(i8*, i32) #1

declare i64 @Frun_hook_with_args(i64, i64*) #1

declare void @reset_sys_modes(%struct.tty_display_info*) #1

declare void @delete_keyboard_wait_descriptor(i32) #1

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #5

declare i32 @fclose(%struct._IO_FILE*) #1

declare zeroext i1 @FRAMEP(i64) #1

declare void @SET_FRAME_VISIBLE(%struct.frame*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @clear_tty_hooks(%struct.terminal* %terminal) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %rif = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 15
  store %struct.redisplay_interface* null, %struct.redisplay_interface** %rif, align 8
  %1 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %cursor_to_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 16
  store void (%struct.frame*, i32, i32)* null, void (%struct.frame*, i32, i32)** %cursor_to_hook, align 8
  %2 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %raw_cursor_to_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 17
  store void (%struct.frame*, i32, i32)* null, void (%struct.frame*, i32, i32)** %raw_cursor_to_hook, align 8
  %3 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %clear_to_end_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %3, i32 0, i32 18
  store void (%struct.frame*)* null, void (%struct.frame*)** %clear_to_end_hook, align 8
  %4 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %clear_frame_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %4, i32 0, i32 19
  store void (%struct.frame*)* null, void (%struct.frame*)** %clear_frame_hook, align 8
  %5 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %clear_end_of_line_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 20
  store void (%struct.frame*, i32)* null, void (%struct.frame*, i32)** %clear_end_of_line_hook, align 8
  %6 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %ins_del_lines_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %6, i32 0, i32 21
  store void (%struct.frame*, i32, i32)* null, void (%struct.frame*, i32, i32)** %ins_del_lines_hook, align 8
  %7 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %insert_glyphs_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 22
  store void (%struct.frame*, %struct.glyph*, i32)* null, void (%struct.frame*, %struct.glyph*, i32)** %insert_glyphs_hook, align 8
  %8 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %write_glyphs_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 23
  store void (%struct.frame*, %struct.glyph*, i32)* null, void (%struct.frame*, %struct.glyph*, i32)** %write_glyphs_hook, align 8
  %9 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %delete_glyphs_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 24
  store void (%struct.frame*, i32)* null, void (%struct.frame*, i32)** %delete_glyphs_hook, align 8
  %10 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %ring_bell_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 25
  store void (%struct.frame*)* null, void (%struct.frame*)** %ring_bell_hook, align 8
  %11 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %reset_terminal_modes_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %11, i32 0, i32 27
  store void (%struct.terminal*)* null, void (%struct.terminal*)** %reset_terminal_modes_hook, align 8
  %12 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %set_terminal_modes_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 28
  store void (%struct.terminal*)* null, void (%struct.terminal*)** %set_terminal_modes_hook, align 8
  %13 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %update_begin_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 29
  store void (%struct.frame*)* null, void (%struct.frame*)** %update_begin_hook, align 8
  %14 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %update_end_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %14, i32 0, i32 30
  store void (%struct.frame*)* null, void (%struct.frame*)** %update_end_hook, align 8
  %15 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %set_terminal_window_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %15, i32 0, i32 31
  store void (%struct.frame*, i32)* null, void (%struct.frame*, i32)** %set_terminal_window_hook, align 8
  %16 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %mouse_position_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %16, i32 0, i32 32
  store void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)* null, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook, align 8
  %17 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %frame_rehighlight_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %17, i32 0, i32 33
  store void (%struct.frame*)* null, void (%struct.frame*)** %frame_rehighlight_hook, align 8
  %18 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %frame_raise_lower_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %18, i32 0, i32 34
  store void (%struct.frame*, i1)* null, void (%struct.frame*, i1)** %frame_raise_lower_hook, align 8
  %19 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %fullscreen_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %19, i32 0, i32 35
  store void (%struct.frame*)* null, void (%struct.frame*)** %fullscreen_hook, align 8
  %20 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %menu_show_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %20, i32 0, i32 36
  store i64 (%struct.frame*, i32, i32, i32, i64, i8**)* null, i64 (%struct.frame*, i32, i32, i32, i64, i8**)** %menu_show_hook, align 8
  %21 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %set_vertical_scroll_bar_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %21, i32 0, i32 38
  store void (%struct.window*, i32, i32, i32)* null, void (%struct.window*, i32, i32, i32)** %set_vertical_scroll_bar_hook, align 8
  %22 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %set_horizontal_scroll_bar_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %22, i32 0, i32 39
  store void (%struct.window*, i32, i32, i32)* null, void (%struct.window*, i32, i32, i32)** %set_horizontal_scroll_bar_hook, align 8
  %23 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %condemn_scroll_bars_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %23, i32 0, i32 40
  store void (%struct.frame*)* null, void (%struct.frame*)** %condemn_scroll_bars_hook, align 8
  %24 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %redeem_scroll_bar_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %24, i32 0, i32 41
  store void (%struct.window*)* null, void (%struct.window*)** %redeem_scroll_bar_hook, align 8
  %25 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %judge_scroll_bars_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %25, i32 0, i32 42
  store void (%struct.frame*)* null, void (%struct.frame*)** %judge_scroll_bars_hook, align 8
  %26 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %read_socket_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %26, i32 0, i32 43
  store i32 (%struct.terminal*, %struct.input_event*)* null, i32 (%struct.terminal*, %struct.input_event*)** %read_socket_hook, align 8
  %27 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %frame_up_to_date_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %27, i32 0, i32 44
  store void (%struct.frame*)* null, void (%struct.frame*)** %frame_up_to_date_hook, align 8
  %28 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %delete_frame_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %28, i32 0, i32 45
  store void (%struct.frame*)* @tty_free_frame_resources, void (%struct.frame*)** %delete_frame_hook, align 8
  %29 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %delete_terminal_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %29, i32 0, i32 46
  store void (%struct.terminal*)* @delete_tty, void (%struct.terminal*)** %delete_terminal_hook, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @Fresume_tty(i64 %tty) #0 {
entry:
  %tty.addr = alloca i64, align 8
  %t = alloca %struct.terminal*, align 8
  %fd = alloca i32, align 4
  %open_errno = alloca i32, align 4
  %f = alloca %struct.frame*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %old_height = alloca i32, align 4
  %old_width = alloca i32, align 4
  %term = alloca i64, align 8
  %.compoundliteral = alloca [2 x i64], align 8
  store i64 %tty, i64* %tty.addr, align 8
  %0 = load i64, i64* %tty.addr, align 8
  %call = call %struct.terminal* @decode_tty_terminal(i64 %0)
  store %struct.terminal* %call, %struct.terminal** %t, align 8
  %1 = load %struct.terminal*, %struct.terminal** %t, align 8
  %tobool = icmp ne %struct.terminal* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i32 0, i32 0)) #9
  unreachable

if.end:                                           ; preds = %entry
  %2 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty1 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty1, align 8
  %input = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 3
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %input, align 8
  %tobool2 = icmp ne %struct._IO_FILE* %4, null
  br i1 %tobool2, label %if.end.65, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %5 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info4 = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty5 = bitcast %union.display_info* %display_info4 to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty5, align 8
  %name = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %6, i32 0, i32 1
  %7 = load i8*, i8** %name, align 8
  %call6 = call %struct.terminal* @get_named_terminal(i8* %7)
  %tobool7 = icmp ne %struct.terminal* %call6, null
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.3
  call void (i8*, ...) @error(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.6, i32 0, i32 0)) #9
  unreachable

if.end.9:                                         ; preds = %if.then.3
  %8 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info10 = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 12
  %tty11 = bitcast %union.display_info* %display_info10 to %struct.tty_display_info**
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty11, align 8
  %name12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %9, i32 0, i32 1
  %10 = load i8*, i8** %name12, align 8
  %call13 = call i32 @emacs_open(i8* %10, i32 258, i32 0)
  store i32 %call13, i32* %fd, align 4
  %11 = load i32, i32* %fd, align 4
  %cmp = icmp slt i32 %11, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.9
  br label %cond.end

cond.false:                                       ; preds = %if.end.9
  %12 = load i32, i32* %fd, align 4
  %call14 = call %struct._IO_FILE* @fdopen(i32 %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0)) #3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ null, %cond.true ], [ %call14, %cond.false ]
  %13 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info15 = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 12
  %tty16 = bitcast %union.display_info* %display_info15 to %struct.tty_display_info**
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty16, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 4
  store %struct._IO_FILE* %cond, %struct._IO_FILE** %output, align 8
  %15 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info17 = getelementptr inbounds %struct.terminal, %struct.terminal* %15, i32 0, i32 12
  %tty18 = bitcast %union.display_info* %display_info17 to %struct.tty_display_info**
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty18, align 8
  %input19 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 3
  store %struct._IO_FILE* %cond, %struct._IO_FILE** %input19, align 8
  %17 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info20 = getelementptr inbounds %struct.terminal, %struct.terminal* %17, i32 0, i32 12
  %tty21 = bitcast %union.display_info* %display_info20 to %struct.tty_display_info**
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty21, align 8
  %input22 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %18, i32 0, i32 3
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %input22, align 8
  %tobool23 = icmp ne %struct._IO_FILE* %19, null
  br i1 %tobool23, label %if.end.31, label %if.then.24

if.then.24:                                       ; preds = %cond.end
  %call25 = call i32* @__errno_location() #11
  %20 = load i32, i32* %call25, align 4
  store i32 %20, i32* %open_errno, align 4
  %21 = load i32, i32* %fd, align 4
  %call26 = call i32 @emacs_close(i32 %21)
  %22 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info27 = getelementptr inbounds %struct.terminal, %struct.terminal* %22, i32 0, i32 12
  %tty28 = bitcast %union.display_info* %display_info27 to %struct.tty_display_info**
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty28, align 8
  %name29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %23, i32 0, i32 1
  %24 = load i8*, i8** %name29, align 8
  %call30 = call i64 @build_string(i8* %24)
  %25 = load i32, i32* %open_errno, align 4
  call void @report_file_errno(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i32 0, i32 0), i64 %call30, i32 %25) #9
  unreachable

if.end.31:                                        ; preds = %cond.end
  %26 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info32 = getelementptr inbounds %struct.terminal, %struct.terminal* %26, i32 0, i32 12
  %tty33 = bitcast %union.display_info* %display_info32 to %struct.tty_display_info**
  %27 = load %struct.tty_display_info*, %struct.tty_display_info** %tty33, align 8
  %name34 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %27, i32 0, i32 1
  %28 = load i8*, i8** %name34, align 8
  %call35 = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0)) #10
  %cmp36 = icmp ne i32 %call35, 0
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.31
  %29 = load i32, i32* %fd, align 4
  call void @dissociate_if_controlling_tty(i32 %29)
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.37, %if.end.31
  %30 = load i32, i32* %fd, align 4
  call void @add_keyboard_wait_descriptor(i32 %30)
  %31 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info39 = getelementptr inbounds %struct.terminal, %struct.terminal* %31, i32 0, i32 12
  %tty40 = bitcast %union.display_info* %display_info39 to %struct.tty_display_info**
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty40, align 8
  %top_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %32, i32 0, i32 11
  %33 = load i64, i64* %top_frame, align 8
  %call41 = call zeroext i1 @FRAMEP(i64 %33)
  br i1 %call41, label %if.then.42, label %if.end.59

if.then.42:                                       ; preds = %if.end.38
  %34 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info43 = getelementptr inbounds %struct.terminal, %struct.terminal* %34, i32 0, i32 12
  %tty44 = bitcast %union.display_info* %display_info43 to %struct.tty_display_info**
  %35 = load %struct.tty_display_info*, %struct.tty_display_info** %tty44, align 8
  %top_frame45 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %35, i32 0, i32 11
  %36 = load i64, i64* %top_frame45, align 8
  %sub = sub nsw i64 %36, 5
  %37 = inttoptr i64 %sub to i8*
  %38 = bitcast i8* %37 to %struct.frame*
  store %struct.frame* %38, %struct.frame** %f, align 8
  %39 = load %struct.frame*, %struct.frame** %f, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 36
  %40 = load i32, i32* %text_cols, align 4
  store i32 %40, i32* %old_height, align 4
  %41 = load %struct.frame*, %struct.frame** %f, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 39
  %42 = load i32, i32* %total_lines, align 4
  store i32 %42, i32* %old_width, align 4
  %43 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info46 = getelementptr inbounds %struct.terminal, %struct.terminal* %43, i32 0, i32 12
  %tty47 = bitcast %union.display_info* %display_info46 to %struct.tty_display_info**
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty47, align 8
  %input48 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %44, i32 0, i32 3
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %input48, align 8
  %call49 = call i32 @fileno(%struct._IO_FILE* %45) #3
  call void @get_tty_size(i32 %call49, i32* %width, i32* %height)
  %46 = load i32, i32* %width, align 4
  %47 = load i32, i32* %old_width, align 4
  %cmp50 = icmp ne i32 %46, %47
  br i1 %cmp50, label %if.then.52, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.42
  %48 = load i32, i32* %height, align 4
  %49 = load i32, i32* %old_height, align 4
  %cmp51 = icmp ne i32 %48, %49
  br i1 %cmp51, label %if.then.52, label %if.end.54

if.then.52:                                       ; preds = %lor.lhs.false, %if.then.42
  %50 = load %struct.frame*, %struct.frame** %f, align 8
  %51 = load i32, i32* %width, align 4
  %52 = load i32, i32* %height, align 4
  %53 = load %struct.frame*, %struct.frame** %f, align 8
  %menu_bar_lines = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 57
  %54 = load i32, i32* %menu_bar_lines, align 4
  %sub53 = sub nsw i32 %52, %54
  call void @change_frame_size(%struct.frame* %50, i32 %51, i32 %sub53, i1 zeroext false, i1 zeroext false, i1 zeroext false, i1 zeroext false)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.52, %lor.lhs.false
  %55 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info55 = getelementptr inbounds %struct.terminal, %struct.terminal* %55, i32 0, i32 12
  %tty56 = bitcast %union.display_info* %display_info55 to %struct.tty_display_info**
  %56 = load %struct.tty_display_info*, %struct.tty_display_info** %tty56, align 8
  %top_frame57 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %56, i32 0, i32 11
  %57 = load i64, i64* %top_frame57, align 8
  %sub58 = sub nsw i64 %57, 5
  %58 = inttoptr i64 %sub58 to i8*
  %59 = bitcast i8* %58 to %struct.frame*
  call void @SET_FRAME_VISIBLE(%struct.frame* %59, i32 1)
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.54, %if.end.38
  %60 = load %struct.terminal*, %struct.terminal** %t, align 8
  call void @set_tty_hooks(%struct.terminal* %60)
  %61 = load %struct.terminal*, %struct.terminal** %t, align 8
  %display_info60 = getelementptr inbounds %struct.terminal, %struct.terminal* %61, i32 0, i32 12
  %tty61 = bitcast %union.display_info* %display_info60 to %struct.tty_display_info**
  %62 = load %struct.tty_display_info*, %struct.tty_display_info** %tty61, align 8
  call void @init_sys_modes(%struct.tty_display_info* %62)
  %63 = load %struct.terminal*, %struct.terminal** %t, align 8
  %64 = bitcast %struct.terminal* %63 to i8*
  %call62 = call i64 @make_lisp_ptr(i8* %64, i32 5)
  store i64 %call62, i64* %term, align 8
  %arrayinit.begin = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i64 0, i64 0
  %call63 = call i64 @intern(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i32 0, i32 0))
  store i64 %call63, i64* %arrayinit.begin
  %arrayinit.element = getelementptr inbounds i64, i64* %arrayinit.begin, i64 1
  %65 = load i64, i64* %term, align 8
  store i64 %65, i64* %arrayinit.element
  %arraydecay = getelementptr inbounds [2 x i64], [2 x i64]* %.compoundliteral, i32 0, i32 0
  %call64 = call i64 @Frun_hook_with_args(i64 2, i64* %arraydecay)
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.59, %if.end
  %66 = load %struct.terminal*, %struct.terminal** %t, align 8
  call void @set_tty_hooks(%struct.terminal* %66)
  %call66 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call66
}

declare %struct.terminal* @get_named_terminal(i8*) #1

declare i32 @emacs_open(i8*, i32, i32) #1

; Function Attrs: nounwind
declare %struct._IO_FILE* @fdopen(i32, i8*) #5

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #6

declare i32 @emacs_close(i32) #1

; Function Attrs: noreturn
declare void @report_file_errno(i8*, i64, i32) #2

; Function Attrs: nounwind uwtable
define internal void @dissociate_if_controlling_tty(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* %fd.addr, align 4
  %call = call i32 @tcgetpgrp(i32 %0) #3
  %cmp = icmp sge i32 %call, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call i32 @setsid() #3
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

declare void @add_keyboard_wait_descriptor(i32) #1

declare void @get_tty_size(i32, i32*, i32*) #1

declare void @change_frame_size(%struct.frame*, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext) #1

; Function Attrs: nounwind uwtable
define internal void @set_tty_hooks(%struct.terminal* %terminal) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %cursor_to_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 16
  store void (%struct.frame*, i32, i32)* @tty_cursor_to, void (%struct.frame*, i32, i32)** %cursor_to_hook, align 8
  %1 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %raw_cursor_to_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %1, i32 0, i32 17
  store void (%struct.frame*, i32, i32)* @tty_raw_cursor_to, void (%struct.frame*, i32, i32)** %raw_cursor_to_hook, align 8
  %2 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %clear_to_end_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 18
  store void (%struct.frame*)* @tty_clear_to_end, void (%struct.frame*)** %clear_to_end_hook, align 8
  %3 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %clear_frame_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %3, i32 0, i32 19
  store void (%struct.frame*)* @tty_clear_frame, void (%struct.frame*)** %clear_frame_hook, align 8
  %4 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %clear_end_of_line_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %4, i32 0, i32 20
  store void (%struct.frame*, i32)* @tty_clear_end_of_line, void (%struct.frame*, i32)** %clear_end_of_line_hook, align 8
  %5 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %ins_del_lines_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 21
  store void (%struct.frame*, i32, i32)* @tty_ins_del_lines, void (%struct.frame*, i32, i32)** %ins_del_lines_hook, align 8
  %6 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %insert_glyphs_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %6, i32 0, i32 22
  store void (%struct.frame*, %struct.glyph*, i32)* @tty_insert_glyphs, void (%struct.frame*, %struct.glyph*, i32)** %insert_glyphs_hook, align 8
  %7 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %write_glyphs_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %7, i32 0, i32 23
  store void (%struct.frame*, %struct.glyph*, i32)* @tty_write_glyphs, void (%struct.frame*, %struct.glyph*, i32)** %write_glyphs_hook, align 8
  %8 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %delete_glyphs_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %8, i32 0, i32 24
  store void (%struct.frame*, i32)* @tty_delete_glyphs, void (%struct.frame*, i32)** %delete_glyphs_hook, align 8
  %9 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %ring_bell_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %9, i32 0, i32 25
  store void (%struct.frame*)* @tty_ring_bell, void (%struct.frame*)** %ring_bell_hook, align 8
  %10 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %reset_terminal_modes_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 27
  store void (%struct.terminal*)* @tty_reset_terminal_modes, void (%struct.terminal*)** %reset_terminal_modes_hook, align 8
  %11 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %set_terminal_modes_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %11, i32 0, i32 28
  store void (%struct.terminal*)* @tty_set_terminal_modes, void (%struct.terminal*)** %set_terminal_modes_hook, align 8
  %12 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %update_end_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %12, i32 0, i32 30
  store void (%struct.frame*)* @tty_update_end, void (%struct.frame*)** %update_end_hook, align 8
  %13 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %menu_show_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 36
  store i64 (%struct.frame*, i32, i32, i32, i64, i8**)* @tty_menu_show, i64 (%struct.frame*, i32, i32, i32, i64, i8**)** %menu_show_hook, align 8
  %14 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %set_terminal_window_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %14, i32 0, i32 31
  store void (%struct.frame*, i32)* @tty_set_terminal_window, void (%struct.frame*, i32)** %set_terminal_window_hook, align 8
  %15 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %read_socket_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %15, i32 0, i32 43
  store i32 (%struct.terminal*, %struct.input_event*)* @tty_read_avail_input, i32 (%struct.terminal*, %struct.input_event*)** %read_socket_hook, align 8
  %16 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %delete_frame_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %16, i32 0, i32 45
  store void (%struct.frame*)* @tty_free_frame_resources, void (%struct.frame*)** %delete_frame_hook, align 8
  %17 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %delete_terminal_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %17, i32 0, i32 46
  store void (%struct.terminal*)* @delete_tty, void (%struct.terminal*)** %delete_terminal_hook, align 8
  ret void
}

declare void @init_sys_modes(%struct.tty_display_info*) #1

; Function Attrs: nounwind uwtable
define i64 @tty_menu_show(%struct.frame* %f, i32 %x, i32 %y, i32 %menuflags, i64 %title, i8** %error_name) #0 {
entry:
  %retval = alloca i64, align 8
  %f.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %menuflags.addr = alloca i32, align 4
  %title.addr = alloca i64, align 8
  %error_name.addr = alloca i8**, align 8
  %menu = alloca %struct.tty_menu_struct*, align 8
  %pane = alloca i32, align 4
  %selidx = alloca i32, align 4
  %lpane = alloca i32, align 4
  %status = alloca i32, align 4
  %entry1 = alloca i64, align 8
  %pane_prefix = alloca i64, align 8
  %datap = alloca i8*, align 8
  %ulx = alloca i32, align 4
  %uly = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %item_x = alloca i32, align 4
  %item_y = alloca i32, align 4
  %dispwidth = alloca i32, align 4
  %dispheight = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lines = alloca i32, align 4
  %maxlines = alloca i32, align 4
  %maxwidth = alloca i32, align 4
  %specpdl_count = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %pane_name = alloca i64, align 8
  %prefix = alloca i64, align 8
  %pane_string = alloca i8*, align 8
  %item = alloca i64, align 8
  %item_name = alloca i64, align 8
  %enable = alloca i64, align 8
  %descrip = alloca i64, align 8
  %help = alloca i64, align 8
  %item_data = alloca i8*, align 8
  %help_string = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %menuflags, i32* %menuflags.addr, align 4
  store i64 %title, i64* %title.addr, align 8
  store i8** %error_name, i8*** %error_name.addr, align 8
  %0 = load i8**, i8*** %error_name.addr, align 8
  store i8* null, i8** %0, align 8
  %1 = load i32, i32* @menu_items_n_panes, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @menu_items_used, align 4
  %cmp2 = icmp sle i32 %2, 3
  br i1 %cmp2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %3 = load i8**, i8*** %error_name.addr, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8** %3, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call4, i64* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %call6 = call %struct.tty_menu_struct* @tty_menu_create()
  store %struct.tty_menu_struct* %call6, %struct.tty_menu_struct** %menu, align 8
  %call7 = call i64 @inhibit_garbage_collection()
  store i64 %call7, i64* %specpdl_count, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @temporarily_switch_to_single_kboard(%struct.frame* %4)
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 44
  %6 = load i32, i32* %left_pos, align 4
  %7 = load i32, i32* %x.addr, align 4
  %add = add nsw i32 %7, %6
  store i32 %add, i32* %x.addr, align 4
  store i32 %add, i32* %item_x, align 4
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 45
  %9 = load i32, i32* %top_pos, align 4
  %10 = load i32, i32* %y.addr, align 4
  %add8 = add nsw i32 %10, %9
  store i32 %add8, i32* %y.addr, align 4
  store i32 %add8, i32* %item_y, align 4
  store i64 16384, i64* %sa_avail, align 8
  %call9 = call i64 @SPECPDL_INDEX()
  store i64 %call9, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  store i32 0, i32* %i, align 4
  store i32 0, i32* %lines, align 4
  store i32 0, i32* %maxlines, align 4
  store i32 0, i32* %maxwidth, align 4
  store i32 -1, i32* %lpane, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.149, %if.end.5
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* @menu_items_used, align 4
  %cmp10 = icmp slt i32 %11, %12
  br i1 %cmp10, label %while.body, label %while.end.150

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* @menu_items, align 8
  %14 = load i32, i32* %i, align 4
  %conv = sext i32 %14 to i64
  %call11 = call i64 @AREF(i64 %13, i64 %conv)
  %call12 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp13 = icmp eq i64 %call11, %call12
  br i1 %cmp13, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %while.body
  %15 = load i32, i32* %maxlines, align 4
  %16 = load i32, i32* %lines, align 4
  %cmp16 = icmp sgt i32 %15, %16
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.15
  %17 = load i32, i32* %maxlines, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.15
  %18 = load i32, i32* %lines, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %17, %cond.true ], [ %18, %cond.false ]
  store i32 %cond, i32* %maxlines, align 4
  store i32 0, i32* %lines, align 4
  %19 = load i64, i64* @menu_items, align 8
  %20 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %20, 1
  %conv19 = sext i32 %add18 to i64
  %call20 = call i64 @AREF(i64 %19, i64 %conv19)
  store i64 %call20, i64* %pane_name, align 8
  %21 = load i64, i64* @menu_items, align 8
  %22 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %22, 2
  %conv22 = sext i32 %add21 to i64
  %call23 = call i64 @AREF(i64 %21, i64 %conv22)
  store i64 %call23, i64* %prefix, align 8
  %23 = load i64, i64* %pane_name, align 8
  %call24 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp25 = icmp eq i64 %23, %call24
  br i1 %cmp25, label %cond.true.27, label %cond.false.28

cond.true.27:                                     ; preds = %cond.end
  br label %cond.end.30

cond.false.28:                                    ; preds = %cond.end
  %24 = load i64, i64* %pane_name, align 8
  %call29 = call i8* @SSDATA(i64 %24)
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.28, %cond.true.27
  %cond31 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0), %cond.true.27 ], [ %call29, %cond.false.28 ]
  store i8* %cond31, i8** %pane_string, align 8
  %25 = load i32, i32* %menuflags.addr, align 4
  %and = and i32 %25, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %cond.end.30
  %26 = load i64, i64* %prefix, align 8
  %call32 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp33 = icmp eq i64 %26, %call32
  br i1 %cmp33, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true
  %27 = load i8*, i8** %pane_string, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr, i8** %pane_string, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %land.lhs.true, %cond.end.30
  %28 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  %29 = load i8*, i8** %pane_string, align 8
  %call37 = call i32 @tty_menu_add_pane(%struct.tty_menu_struct* %28, i8* %29)
  store i32 %call37, i32* %lpane, align 4
  %30 = load i32, i32* %lpane, align 4
  %cmp38 = icmp eq i32 %30, -1
  br i1 %cmp38, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %if.end.36
  %31 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  call void @tty_menu_destroy(%struct.tty_menu_struct* %31)
  %32 = load i8**, i8*** %error_name.addr, align 8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i32 0, i32 0), i8** %32, align 8
  %call41 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call41, i64* %entry1, align 8
  br label %tty_menu_end

if.end.42:                                        ; preds = %if.end.36
  %33 = load i32, i32* %i, align 4
  %add43 = add nsw i32 %33, 3
  store i32 %add43, i32* %i, align 4
  %34 = load i32, i32* %i, align 4
  store i32 %34, i32* %j, align 4
  br label %while.cond.44

while.cond.44:                                    ; preds = %if.end.65, %if.then.58, %if.end.42
  %35 = load i32, i32* %j, align 4
  %36 = load i32, i32* @menu_items_used, align 4
  %cmp45 = icmp slt i32 %35, %36
  br i1 %cmp45, label %while.body.47, label %while.end

while.body.47:                                    ; preds = %while.cond.44
  %37 = load i64, i64* @menu_items, align 8
  %38 = load i32, i32* %j, align 4
  %conv48 = sext i32 %38 to i64
  %call49 = call i64 @AREF(i64 %37, i64 %conv48)
  store i64 %call49, i64* %item, align 8
  %39 = load i64, i64* %item, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp51 = icmp eq i64 %39, %call50
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %while.body.47
  br label %while.end

if.end.54:                                        ; preds = %while.body.47
  %40 = load i64, i64* %item, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp56 = icmp eq i64 %40, %call55
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.end.54
  %41 = load i32, i32* %j, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %j, align 4
  br label %while.cond.44

if.end.59:                                        ; preds = %if.end.54
  %42 = load i64, i64* %item, align 8
  %call60 = call i64 @SBYTES(i64 %42)
  %conv61 = trunc i64 %call60 to i32
  store i32 %conv61, i32* %width, align 4
  %43 = load i32, i32* %width, align 4
  %44 = load i32, i32* %maxwidth, align 4
  %cmp62 = icmp sgt i32 %43, %44
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.59
  %45 = load i32, i32* %width, align 4
  store i32 %45, i32* %maxwidth, align 4
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.64, %if.end.59
  %46 = load i32, i32* %j, align 4
  %add66 = add nsw i32 %46, 8
  store i32 %add66, i32* %j, align 4
  br label %while.cond.44

while.end:                                        ; preds = %if.then.53, %while.cond.44
  br label %if.end.149

if.else:                                          ; preds = %while.body
  %47 = load i64, i64* @menu_items, align 8
  %48 = load i32, i32* %i, align 4
  %conv67 = sext i32 %48 to i64
  %call68 = call i64 @AREF(i64 %47, i64 %conv67)
  %call69 = call i64 @builtin_lisp_symbol(i32 783)
  %cmp70 = icmp eq i64 %call68, %call69
  br i1 %cmp70, label %if.then.72, label %if.else.74

if.then.72:                                       ; preds = %if.else
  %49 = load i32, i32* %i, align 4
  %add73 = add nsw i32 %49, 1
  store i32 %add73, i32* %i, align 4
  br label %if.end.148

if.else.74:                                       ; preds = %if.else
  %50 = load i64, i64* @menu_items, align 8
  %51 = load i32, i32* %i, align 4
  %add75 = add nsw i32 %51, 0
  %conv76 = sext i32 %add75 to i64
  %call77 = call i64 @AREF(i64 %50, i64 %conv76)
  store i64 %call77, i64* %item_name, align 8
  %52 = load i64, i64* @menu_items, align 8
  %53 = load i32, i32* %i, align 4
  %add78 = add nsw i32 %53, 1
  %conv79 = sext i32 %add78 to i64
  %call80 = call i64 @AREF(i64 %52, i64 %conv79)
  store i64 %call80, i64* %enable, align 8
  %54 = load i64, i64* @menu_items, align 8
  %55 = load i32, i32* %i, align 4
  %add81 = add nsw i32 %55, 3
  %conv82 = sext i32 %add81 to i64
  %call83 = call i64 @AREF(i64 %54, i64 %conv82)
  store i64 %call83, i64* %descrip, align 8
  %56 = load i64, i64* @menu_items, align 8
  %57 = load i32, i32* %i, align 4
  %add84 = add nsw i32 %57, 7
  %conv85 = sext i32 %add84 to i64
  %call86 = call i64 @AREF(i64 %56, i64 %conv85)
  store i64 %call86, i64* %help, align 8
  %58 = load i64, i64* %help, align 8
  %call87 = call zeroext i1 @STRINGP(i64 %58)
  br i1 %call87, label %cond.true.89, label %cond.false.91

cond.true.89:                                     ; preds = %if.else.74
  %59 = load i64, i64* %help, align 8
  %call90 = call i8* @SSDATA(i64 %59)
  br label %cond.end.92

cond.false.91:                                    ; preds = %if.else.74
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.false.91, %cond.true.89
  %cond93 = phi i8* [ %call90, %cond.true.89 ], [ null, %cond.false.91 ]
  store i8* %cond93, i8** %help_string, align 8
  %60 = load i64, i64* %descrip, align 8
  %call94 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp95 = icmp eq i64 %60, %call94
  br i1 %cmp95, label %if.else.134, label %if.then.97

if.then.97:                                       ; preds = %cond.end.92
  %61 = load i32, i32* %maxwidth, align 4
  %conv98 = sext i32 %61 to i64
  %62 = load i64, i64* %descrip, align 8
  %call99 = call i64 @SBYTES(i64 %62)
  %add100 = add nsw i64 %conv98, %call99
  %add101 = add nsw i64 %add100, 1
  %63 = load i64, i64* %sa_avail, align 8
  %cmp102 = icmp sle i64 %add101, %63
  br i1 %cmp102, label %cond.true.104, label %cond.false.113

cond.true.104:                                    ; preds = %if.then.97
  %64 = load i32, i32* %maxwidth, align 4
  %conv105 = sext i32 %64 to i64
  %65 = load i64, i64* %descrip, align 8
  %call106 = call i64 @SBYTES(i64 %65)
  %add107 = add nsw i64 %conv105, %call106
  %add108 = add nsw i64 %add107, 1
  %66 = load i64, i64* %sa_avail, align 8
  %sub = sub nsw i64 %66, %add108
  store i64 %sub, i64* %sa_avail, align 8
  %67 = load i32, i32* %maxwidth, align 4
  %conv109 = sext i32 %67 to i64
  %68 = load i64, i64* %descrip, align 8
  %call110 = call i64 @SBYTES(i64 %68)
  %add111 = add nsw i64 %conv109, %call110
  %add112 = add nsw i64 %add111, 1
  %69 = alloca i8, i64 %add112
  br label %cond.end.119

cond.false.113:                                   ; preds = %if.then.97
  store i8 1, i8* %sa_must_free, align 1
  %70 = load i32, i32* %maxwidth, align 4
  %conv114 = sext i32 %70 to i64
  %71 = load i64, i64* %descrip, align 8
  %call115 = call i64 @SBYTES(i64 %71)
  %add116 = add nsw i64 %conv114, %call115
  %add117 = add nsw i64 %add116, 1
  %call118 = call i8* @record_xmalloc(i64 %add117)
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.113, %cond.true.104
  %cond120 = phi i8* [ %69, %cond.true.104 ], [ %call118, %cond.false.113 ]
  store i8* %cond120, i8** %item_data, align 8
  %72 = load i8*, i8** %item_data, align 8
  %73 = load i64, i64* %item_name, align 8
  %call121 = call i8* @SSDATA(i64 %73)
  %74 = load i64, i64* %item_name, align 8
  %call122 = call i64 @SBYTES(i64 %74)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %call121, i64 %call122, i32 1, i1 false)
  %75 = load i64, i64* %item_name, align 8
  %call123 = call i64 @SCHARS(i64 %75)
  %conv124 = trunc i64 %call123 to i32
  store i32 %conv124, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.119
  %76 = load i32, i32* %j, align 4
  %77 = load i32, i32* %maxwidth, align 4
  %cmp125 = icmp slt i32 %76, %77
  br i1 %cmp125, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %78 = load i32, i32* %j, align 4
  %idxprom = sext i32 %78 to i64
  %79 = load i8*, i8** %item_data, align 8
  %arrayidx = getelementptr inbounds i8, i8* %79, i64 %idxprom
  store i8 32, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %80 = load i32, i32* %j, align 4
  %inc127 = add nsw i32 %80, 1
  store i32 %inc127, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %81 = load i8*, i8** %item_data, align 8
  %82 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %82 to i64
  %add.ptr = getelementptr inbounds i8, i8* %81, i64 %idx.ext
  %83 = load i64, i64* %descrip, align 8
  %call128 = call i8* @SSDATA(i64 %83)
  %84 = load i64, i64* %descrip, align 8
  %call129 = call i64 @SBYTES(i64 %84)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %call128, i64 %call129, i32 1, i1 false)
  %85 = load i32, i32* %j, align 4
  %conv130 = sext i32 %85 to i64
  %86 = load i64, i64* %descrip, align 8
  %call131 = call i64 @SBYTES(i64 %86)
  %add132 = add nsw i64 %conv130, %call131
  %87 = load i8*, i8** %item_data, align 8
  %arrayidx133 = getelementptr inbounds i8, i8* %87, i64 %add132
  store i8 0, i8* %arrayidx133, align 1
  br label %if.end.136

if.else.134:                                      ; preds = %cond.end.92
  %88 = load i64, i64* %item_name, align 8
  %call135 = call i8* @SSDATA(i64 %88)
  store i8* %call135, i8** %item_data, align 8
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.134, %for.end
  %89 = load i32, i32* %lpane, align 4
  %cmp137 = icmp eq i32 %89, -1
  br i1 %cmp137, label %if.then.143, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.136
  %90 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  %91 = load i32, i32* %lpane, align 4
  %92 = load i8*, i8** %item_data, align 8
  %93 = load i64, i64* %enable, align 8
  %call139 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp140 = icmp eq i64 %93, %call139
  %lnot = xor i1 %cmp140, true
  %94 = load i8*, i8** %help_string, align 8
  %call142 = call zeroext i1 @tty_menu_add_selection(%struct.tty_menu_struct* %90, i32 %91, i8* %92, i1 zeroext %lnot, i8* %94)
  br i1 %call142, label %if.end.145, label %if.then.143

if.then.143:                                      ; preds = %lor.lhs.false, %if.end.136
  %95 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  call void @tty_menu_destroy(%struct.tty_menu_struct* %95)
  %96 = load i8**, i8*** %error_name.addr, align 8
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i32 0, i32 0), i8** %96, align 8
  %call144 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call144, i64* %entry1, align 8
  br label %tty_menu_end

if.end.145:                                       ; preds = %lor.lhs.false
  %97 = load i32, i32* %i, align 4
  %add146 = add nsw i32 %97, 8
  store i32 %add146, i32* %i, align 4
  %98 = load i32, i32* %lines, align 4
  %inc147 = add nsw i32 %98, 1
  store i32 %inc147, i32* %lines, align 4
  br label %if.end.148

if.end.148:                                       ; preds = %if.end.145, %if.then.72
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %while.end
  br label %while.cond

while.end.150:                                    ; preds = %while.cond
  %99 = load i32, i32* %maxlines, align 4
  %100 = load i32, i32* %lines, align 4
  %cmp151 = icmp sgt i32 %99, %100
  br i1 %cmp151, label %cond.true.153, label %cond.false.154

cond.true.153:                                    ; preds = %while.end.150
  %101 = load i32, i32* %maxlines, align 4
  br label %cond.end.155

cond.false.154:                                   ; preds = %while.end.150
  %102 = load i32, i32* %lines, align 4
  br label %cond.end.155

cond.end.155:                                     ; preds = %cond.false.154, %cond.true.153
  %cond156 = phi i32 [ %101, %cond.true.153 ], [ %102, %cond.false.154 ]
  store i32 %cond156, i32* %maxlines, align 4
  %103 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 36
  %104 = load i32, i32* %text_cols, align 4
  store i32 %104, i32* %dispwidth, align 4
  %105 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 37
  %106 = load i32, i32* %text_lines, align 4
  store i32 %106, i32* %dispheight, align 4
  %107 = load i32, i32* %x.addr, align 4
  %108 = load i32, i32* %dispwidth, align 4
  %cmp157 = icmp slt i32 %107, %108
  br i1 %cmp157, label %cond.true.159, label %cond.false.160

cond.true.159:                                    ; preds = %cond.end.155
  %109 = load i32, i32* %x.addr, align 4
  br label %cond.end.161

cond.false.160:                                   ; preds = %cond.end.155
  %110 = load i32, i32* %dispwidth, align 4
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.160, %cond.true.159
  %cond162 = phi i32 [ %109, %cond.true.159 ], [ %110, %cond.false.160 ]
  store i32 %cond162, i32* %x.addr, align 4
  %111 = load i32, i32* %y.addr, align 4
  %112 = load i32, i32* %dispheight, align 4
  %cmp163 = icmp slt i32 %111, %112
  br i1 %cmp163, label %cond.true.165, label %cond.false.166

cond.true.165:                                    ; preds = %cond.end.161
  %113 = load i32, i32* %y.addr, align 4
  br label %cond.end.167

cond.false.166:                                   ; preds = %cond.end.161
  %114 = load i32, i32* %dispheight, align 4
  br label %cond.end.167

cond.end.167:                                     ; preds = %cond.false.166, %cond.true.165
  %cond168 = phi i32 [ %113, %cond.true.165 ], [ %114, %cond.false.166 ]
  store i32 %cond168, i32* %y.addr, align 4
  %115 = load i32, i32* %x.addr, align 4
  %cmp169 = icmp sgt i32 %115, 1
  br i1 %cmp169, label %cond.true.171, label %cond.false.172

cond.true.171:                                    ; preds = %cond.end.167
  %116 = load i32, i32* %x.addr, align 4
  br label %cond.end.173

cond.false.172:                                   ; preds = %cond.end.167
  br label %cond.end.173

cond.end.173:                                     ; preds = %cond.false.172, %cond.true.171
  %cond174 = phi i32 [ %116, %cond.true.171 ], [ 1, %cond.false.172 ]
  store i32 %cond174, i32* %x.addr, align 4
  %117 = load i32, i32* %y.addr, align 4
  %cmp175 = icmp sgt i32 %117, 1
  br i1 %cmp175, label %cond.true.177, label %cond.false.178

cond.true.177:                                    ; preds = %cond.end.173
  %118 = load i32, i32* %y.addr, align 4
  br label %cond.end.179

cond.false.178:                                   ; preds = %cond.end.173
  br label %cond.end.179

cond.end.179:                                     ; preds = %cond.false.178, %cond.true.177
  %cond180 = phi i32 [ %118, %cond.true.177 ], [ 1, %cond.false.178 ]
  store i32 %cond180, i32* %y.addr, align 4
  %119 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  %120 = load i32, i32* %x.addr, align 4
  %121 = load i32, i32* %y.addr, align 4
  call void @tty_menu_locate(%struct.tty_menu_struct* %119, i32 %120, i32 %121, i32* %ulx, i32* %uly, i32* %width, i32* %height)
  %122 = load i32, i32* %ulx, align 4
  %123 = load i32, i32* %width, align 4
  %add181 = add nsw i32 %122, %123
  %124 = load i32, i32* %dispwidth, align 4
  %cmp182 = icmp sgt i32 %add181, %124
  br i1 %cmp182, label %if.then.184, label %if.end.189

if.then.184:                                      ; preds = %cond.end.179
  %125 = load i32, i32* %ulx, align 4
  %126 = load i32, i32* %width, align 4
  %add185 = add nsw i32 %125, %126
  %127 = load i32, i32* %dispwidth, align 4
  %sub186 = sub nsw i32 %add185, %127
  %128 = load i32, i32* %x.addr, align 4
  %sub187 = sub nsw i32 %128, %sub186
  store i32 %sub187, i32* %x.addr, align 4
  %129 = load i32, i32* %dispwidth, align 4
  %130 = load i32, i32* %width, align 4
  %sub188 = sub nsw i32 %129, %130
  store i32 %sub188, i32* %ulx, align 4
  br label %if.end.189

if.end.189:                                       ; preds = %if.then.184, %cond.end.179
  %131 = load i32, i32* %uly, align 4
  %132 = load i32, i32* %height, align 4
  %add190 = add nsw i32 %131, %132
  %133 = load i32, i32* %dispheight, align 4
  %cmp191 = icmp sgt i32 %add190, %133
  br i1 %cmp191, label %if.then.193, label %if.end.198

if.then.193:                                      ; preds = %if.end.189
  %134 = load i32, i32* %uly, align 4
  %135 = load i32, i32* %height, align 4
  %add194 = add nsw i32 %134, %135
  %136 = load i32, i32* %dispheight, align 4
  %sub195 = sub nsw i32 %add194, %136
  %137 = load i32, i32* %y.addr, align 4
  %sub196 = sub nsw i32 %137, %sub195
  store i32 %sub196, i32* %y.addr, align 4
  %138 = load i32, i32* %dispheight, align 4
  %139 = load i32, i32* %height, align 4
  %sub197 = sub nsw i32 %138, %139
  store i32 %sub197, i32* %uly, align 4
  br label %if.end.198

if.end.198:                                       ; preds = %if.then.193, %if.end.189
  %140 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window = getelementptr inbounds %struct.frame, %struct.frame* %140, i32 0, i32 7
  %141 = load i64, i64* %minibuffer_window, align 8
  %call199 = call zeroext i1 @WINDOWP(i64 %141)
  br i1 %call199, label %land.lhs.true.201, label %if.end.230

land.lhs.true.201:                                ; preds = %if.end.198
  %142 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %minibuffer_window202 = getelementptr inbounds %struct.frame, %struct.frame* %142, i32 0, i32 7
  %143 = load i64, i64* %minibuffer_window202, align 8
  %call203 = call %struct.window* @XWINDOW(i64 %143)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call203, i32 0, i32 1
  %144 = load i64, i64* %frame, align 8
  %sub204 = sub nsw i64 %144, 5
  %145 = inttoptr i64 %sub204 to i8*
  %146 = bitcast i8* %145 to %struct.frame*
  %147 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %cmp205 = icmp eq %struct.frame* %146, %147
  br i1 %cmp205, label %land.lhs.true.207, label %if.end.230

land.lhs.true.207:                                ; preds = %land.lhs.true.201
  %148 = load i32, i32* %uly, align 4
  %149 = load i32, i32* %height, align 4
  %add208 = add nsw i32 %148, %149
  %150 = load i32, i32* %dispheight, align 4
  %sub209 = sub nsw i32 %150, 2
  %cmp210 = icmp sgt i32 %add208, %sub209
  br i1 %cmp210, label %if.then.212, label %if.end.230

if.then.212:                                      ; preds = %land.lhs.true.207
  %151 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @echo_area_buffer, i32 0, i64 0), align 8
  %call213 = call zeroext i1 @BUFFERP(i64 %151)
  br i1 %call213, label %land.lhs.true.215, label %if.else.226

land.lhs.true.215:                                ; preds = %if.then.212
  %152 = load i64, i64* @echo_area_window, align 8
  %call216 = call zeroext i1 @WINDOWP(i64 %152)
  br i1 %call216, label %if.then.218, label %if.else.226

if.then.218:                                      ; preds = %land.lhs.true.215
  %153 = load i64, i64* @echo_area_window, align 8
  %call219 = call %struct.window* @XWINDOW(i64 %153)
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %call219, i32 0, i32 37
  %154 = load i32, i32* %total_lines, align 4
  %add220 = add nsw i32 %154, 1
  %155 = load i32, i32* %y.addr, align 4
  %sub221 = sub nsw i32 %155, %add220
  store i32 %sub221, i32* %y.addr, align 4
  %156 = load i64, i64* @echo_area_window, align 8
  %call222 = call %struct.window* @XWINDOW(i64 %156)
  %total_lines223 = getelementptr inbounds %struct.window, %struct.window* %call222, i32 0, i32 37
  %157 = load i32, i32* %total_lines223, align 4
  %add224 = add nsw i32 %157, 1
  %158 = load i32, i32* %uly, align 4
  %sub225 = sub nsw i32 %158, %add224
  store i32 %sub225, i32* %uly, align 4
  br label %if.end.229

if.else.226:                                      ; preds = %land.lhs.true.215, %if.then.212
  %159 = load i32, i32* %y.addr, align 4
  %sub227 = sub nsw i32 %159, 2
  store i32 %sub227, i32* %y.addr, align 4
  %160 = load i32, i32* %uly, align 4
  %sub228 = sub nsw i32 %160, 2
  store i32 %sub228, i32* %uly, align 4
  br label %if.end.229

if.end.229:                                       ; preds = %if.else.226, %if.then.218
  br label %if.end.230

if.end.230:                                       ; preds = %if.end.229, %land.lhs.true.207, %land.lhs.true.201, %if.end.198
  %161 = load i32, i32* %ulx, align 4
  %cmp231 = icmp slt i32 %161, 0
  br i1 %cmp231, label %if.then.233, label %if.end.235

if.then.233:                                      ; preds = %if.end.230
  %162 = load i32, i32* %ulx, align 4
  %163 = load i32, i32* %x.addr, align 4
  %sub234 = sub nsw i32 %163, %162
  store i32 %sub234, i32* %x.addr, align 4
  br label %if.end.235

if.end.235:                                       ; preds = %if.then.233, %if.end.230
  %164 = load i32, i32* %uly, align 4
  %cmp236 = icmp slt i32 %164, 0
  br i1 %cmp236, label %if.then.238, label %if.end.240

if.then.238:                                      ; preds = %if.end.235
  %165 = load i32, i32* %uly, align 4
  %166 = load i32, i32* %y.addr, align 4
  %sub239 = sub nsw i32 %166, %165
  store i32 %sub239, i32* %y.addr, align 4
  br label %if.end.240

if.end.240:                                       ; preds = %if.then.238, %if.end.235
  store i32 0, i32* %selidx, align 4
  store i32 0, i32* %pane, align 4
  %167 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  %168 = bitcast %struct.tty_menu_struct* %167 to i8*
  %169 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %170 = bitcast %struct.buffer* %169 to i8*
  %call241 = call i64 @make_save_ptr_ptr(i8* %168, i8* %170)
  call void @record_unwind_protect(void (i64)* @tty_pop_down_menu, i64 %call241)
  %call242 = call i64 @builtin_lisp_symbol(i32 735)
  %call243 = call i64 @builtin_lisp_symbol(i32 947)
  %call244 = call i64 @Fsymbol_value(i64 %call243)
  call void @specbind(i64 %call242, i64 %call244)
  %171 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  %172 = load i32, i32* %x.addr, align 4
  %173 = load i32, i32* %y.addr, align 4
  %174 = load i32, i32* %menuflags.addr, align 4
  %and245 = and i32 %174, 4
  %tobool246 = icmp ne i32 %and245, 0
  %call247 = call i32 @tty_menu_activate(%struct.tty_menu_struct* %171, i32* %pane, i32* %selidx, i32 %172, i32 %173, i8** %datap, void (i8*, i32, i32)* @tty_menu_help_callback, i1 zeroext %tobool246)
  store i32 %call247, i32* %status, align 4
  %call248 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call248, i64* %pane_prefix, align 8
  store i64 %call248, i64* %entry1, align 8
  %175 = load i32, i32* %status, align 4
  switch i32 %175, label %sw.epilog [
    i32 1, label %sw.bb
    i32 4, label %sw.bb.295
    i32 5, label %sw.bb.295
    i32 -1, label %sw.bb.302
    i32 3, label %sw.bb.303
    i32 2, label %sw.bb.304
  ]

sw.bb:                                            ; preds = %if.end.240
  store i32 0, i32* %i, align 4
  br label %while.cond.249

while.cond.249:                                   ; preds = %if.end.293, %sw.bb
  %176 = load i32, i32* %i, align 4
  %177 = load i32, i32* @menu_items_used, align 4
  %cmp250 = icmp slt i32 %176, %177
  br i1 %cmp250, label %while.body.252, label %while.end.294

while.body.252:                                   ; preds = %while.cond.249
  %178 = load i64, i64* @menu_items, align 8
  %179 = load i32, i32* %i, align 4
  %conv253 = sext i32 %179 to i64
  %call254 = call i64 @AREF(i64 %178, i64 %conv253)
  %call255 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp256 = icmp eq i64 %call254, %call255
  br i1 %cmp256, label %if.then.258, label %if.else.267

if.then.258:                                      ; preds = %while.body.252
  %180 = load i32, i32* %pane, align 4
  %cmp259 = icmp eq i32 %180, 0
  br i1 %cmp259, label %if.then.261, label %if.end.265

if.then.261:                                      ; preds = %if.then.258
  %181 = load i64, i64* @menu_items, align 8
  %182 = load i32, i32* %i, align 4
  %add262 = add nsw i32 %182, 2
  %conv263 = sext i32 %add262 to i64
  %call264 = call i64 @AREF(i64 %181, i64 %conv263)
  store i64 %call264, i64* %pane_prefix, align 8
  br label %if.end.265

if.end.265:                                       ; preds = %if.then.261, %if.then.258
  %183 = load i32, i32* %pane, align 4
  %dec = add nsw i32 %183, -1
  store i32 %dec, i32* %pane, align 4
  %184 = load i32, i32* %i, align 4
  %add266 = add nsw i32 %184, 3
  store i32 %add266, i32* %i, align 4
  br label %if.end.293

if.else.267:                                      ; preds = %while.body.252
  %185 = load i32, i32* %pane, align 4
  %cmp268 = icmp eq i32 %185, -1
  br i1 %cmp268, label %if.then.270, label %if.end.291

if.then.270:                                      ; preds = %if.else.267
  %186 = load i32, i32* %selidx, align 4
  %cmp271 = icmp eq i32 %186, 0
  br i1 %cmp271, label %if.then.273, label %if.end.289

if.then.273:                                      ; preds = %if.then.270
  %187 = load i64, i64* @menu_items, align 8
  %188 = load i32, i32* %i, align 4
  %add274 = add nsw i32 %188, 2
  %conv275 = sext i32 %add274 to i64
  %call276 = call i64 @AREF(i64 %187, i64 %conv275)
  store i64 %call276, i64* %entry1, align 8
  %189 = load i32, i32* %menuflags.addr, align 4
  %and277 = and i32 %189, 1
  %tobool278 = icmp ne i32 %and277, 0
  br i1 %tobool278, label %if.then.279, label %if.end.288

if.then.279:                                      ; preds = %if.then.273
  %190 = load i64, i64* %entry1, align 8
  %call280 = call i64 @builtin_lisp_symbol(i32 0)
  %call281 = call i64 @Fcons(i64 %190, i64 %call280)
  store i64 %call281, i64* %entry1, align 8
  %191 = load i64, i64* %pane_prefix, align 8
  %call282 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp283 = icmp eq i64 %191, %call282
  br i1 %cmp283, label %if.end.287, label %if.then.285

if.then.285:                                      ; preds = %if.then.279
  %192 = load i64, i64* %pane_prefix, align 8
  %193 = load i64, i64* %entry1, align 8
  %call286 = call i64 @Fcons(i64 %192, i64 %193)
  store i64 %call286, i64* %entry1, align 8
  br label %if.end.287

if.end.287:                                       ; preds = %if.then.285, %if.then.279
  br label %if.end.288

if.end.288:                                       ; preds = %if.end.287, %if.then.273
  br label %while.end.294

if.end.289:                                       ; preds = %if.then.270
  %194 = load i32, i32* %selidx, align 4
  %dec290 = add nsw i32 %194, -1
  store i32 %dec290, i32* %selidx, align 4
  br label %if.end.291

if.end.291:                                       ; preds = %if.end.289, %if.else.267
  %195 = load i32, i32* %i, align 4
  %add292 = add nsw i32 %195, 8
  store i32 %add292, i32* %i, align 4
  br label %if.end.293

if.end.293:                                       ; preds = %if.end.291, %if.end.265
  br label %while.cond.249

while.end.294:                                    ; preds = %if.end.288, %while.cond.249
  br label %sw.epilog

sw.bb.295:                                        ; preds = %if.end.240, %if.end.240
  %196 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %197 = load i32, i32* %status, align 4
  call void @tty_menu_new_item_coords(%struct.frame* %196, i32 %197, i32* %item_x, i32* %item_y)
  %198 = load i32, i32* %item_x, align 4
  %conv296 = sext i32 %198 to i64
  %shl = shl i64 %conv296, 2
  %add297 = add i64 %shl, 2
  %199 = load i32, i32* %item_y, align 4
  %conv298 = sext i32 %199 to i64
  %shl299 = shl i64 %conv298, 2
  %add300 = add i64 %shl299, 2
  %call301 = call i64 @Fcons(i64 %add297, i64 %add300)
  store i64 %call301, i64* %entry1, align 8
  br label %sw.epilog

sw.bb.302:                                        ; preds = %if.end.240
  %200 = load i8**, i8*** %error_name.addr, align 8
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i32 0, i32 0), i8** %200, align 8
  br label %sw.bb.303

sw.bb.303:                                        ; preds = %if.end.240, %sw.bb.302
  br label %sw.epilog

sw.bb.304:                                        ; preds = %if.end.240
  %201 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %202 = load i64, i64* @selected_frame, align 8
  %call305 = call zeroext i1 @FRAMEP(i64 %202)
  br i1 %call305, label %land.lhs.true.307, label %cond.false.313

land.lhs.true.307:                                ; preds = %sw.bb.304
  %203 = load i64, i64* @selected_frame, align 8
  %sub308 = sub nsw i64 %203, 5
  %204 = inttoptr i64 %sub308 to i8*
  %205 = bitcast i8* %204 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %205, i32 0, i32 61
  %206 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp309 = icmp ne %struct.terminal* %206, null
  br i1 %cmp309, label %cond.true.311, label %cond.false.313

cond.true.311:                                    ; preds = %land.lhs.true.307
  %207 = load i64, i64* @selected_frame, align 8
  %sub312 = sub nsw i64 %207, 5
  %208 = inttoptr i64 %sub312 to i8*
  %209 = bitcast i8* %208 to %struct.frame*
  br label %cond.end.314

cond.false.313:                                   ; preds = %land.lhs.true.307, %sw.bb.304
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.314

cond.end.314:                                     ; preds = %210, %cond.true.311
  %cond315 = phi %struct.frame* [ %209, %cond.true.311 ], [ null, %210 ]
  %cmp316 = icmp ne %struct.frame* %201, %cond315
  br i1 %cmp316, label %if.then.318, label %if.end.319

if.then.318:                                      ; preds = %cond.end.314
  %211 = call i64 @Ftop_level() #9
  unreachable

if.end.319:                                       ; preds = %cond.end.314
  %212 = load i32, i32* %menuflags.addr, align 4
  %and320 = and i32 %212, 2
  %tobool321 = icmp ne i32 %and320, 0
  br i1 %tobool321, label %if.end.326, label %if.then.322

if.then.322:                                      ; preds = %if.end.319
  %call323 = call i64 @builtin_lisp_symbol(i32 782)
  %call324 = call i64 @builtin_lisp_symbol(i32 0)
  %call325 = call i64 @Fsignal(i64 %call323, i64 %call324)
  br label %if.end.326

if.end.326:                                       ; preds = %if.then.322, %if.end.319
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.240, %if.end.326, %sw.bb.303, %sw.bb.295, %while.end.294
  br label %tty_menu_end

tty_menu_end:                                     ; preds = %sw.epilog, %if.then.143, %if.then.40
  br label %do.body

do.body:                                          ; preds = %tty_menu_end
  %213 = load i8, i8* %sa_must_free, align 1
  %tobool327 = trunc i8 %213 to i1
  br i1 %tobool327, label %if.then.328, label %if.end.331

if.then.328:                                      ; preds = %do.body
  store i8 0, i8* %sa_must_free, align 1
  %214 = load i64, i64* %sa_count, align 8
  %call329 = call i64 @builtin_lisp_symbol(i32 0)
  %call330 = call i64 @unbind_to(i64 %214, i64 %call329)
  br label %if.end.331

if.end.331:                                       ; preds = %if.then.328, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.331
  %215 = load i64, i64* %specpdl_count, align 8
  %call332 = call i64 @builtin_lisp_symbol(i32 0)
  %call333 = call i64 @unbind_to(i64 %215, i64 %call332)
  %216 = load i64, i64* %entry1, align 8
  store i64 %216, i64* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3, %if.then
  %217 = load i64, i64* %retval
  ret i64 %217
}

; Function Attrs: nounwind uwtable
define internal %struct.tty_menu_struct* @tty_menu_create() #0 {
entry:
  %call = call noalias i8* @xzalloc(i64 56)
  %0 = bitcast i8* %call to %struct.tty_menu_struct*
  ret %struct.tty_menu_struct* %0
}

declare i64 @inhibit_garbage_collection() #1

declare void @temporarily_switch_to_single_kboard(%struct.frame*) #1

declare i64 @SPECPDL_INDEX() #1

declare i8* @SSDATA(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @tty_menu_add_pane(%struct.tty_menu_struct* %menu, i8* %txt) #0 {
entry:
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %txt.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  store i8* %txt, i8** %txt.addr, align 8
  %0 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  call void @tty_menu_make_room(%struct.tty_menu_struct* %0)
  %call = call %struct.tty_menu_struct* @tty_menu_create()
  %1 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %1, i32 0, i32 0
  %2 = load i32, i32* %count, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %3, i32 0, i32 2
  %4 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %arrayidx = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %4, i64 %idxprom
  store %struct.tty_menu_struct* %call, %struct.tty_menu_struct** %arrayidx, align 8
  %5 = load i8*, i8** %txt.addr, align 8
  %6 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count1 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %6, i32 0, i32 0
  %7 = load i32, i32* %count1, align 4
  %idxprom2 = sext i32 %7 to i64
  %8 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %8, i32 0, i32 1
  %9 = load i8**, i8*** %text, align 8
  %arrayidx3 = getelementptr inbounds i8*, i8** %9, i64 %idxprom2
  store i8* %5, i8** %arrayidx3, align 8
  %10 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panecount = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %10, i32 0, i32 5
  %11 = load i32, i32* %panecount, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %panecount, align 4
  %12 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count4 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %12, i32 0, i32 0
  %13 = load i32, i32* %count4, align 4
  %idxprom5 = sext i32 %13 to i64
  %14 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panenumber = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %14, i32 0, i32 3
  %15 = load i32*, i32** %panenumber, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i64 %idxprom5
  store i32 %inc, i32* %arrayidx6, align 4
  %16 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count7 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %16, i32 0, i32 0
  %17 = load i32, i32* %count7, align 4
  %idxprom8 = sext i32 %17 to i64
  %18 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %help_text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %18, i32 0, i32 7
  %19 = load i8**, i8*** %help_text, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %19, i64 %idxprom8
  store i8* null, i8** %arrayidx9, align 8
  %20 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count10 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %20, i32 0, i32 0
  %21 = load i32, i32* %count10, align 4
  %inc11 = add nsw i32 %21, 1
  store i32 %inc11, i32* %count10, align 4
  %22 = load i8*, i8** %txt.addr, align 8
  %call12 = call i64 @menu_item_width(i8* %22)
  %conv = trunc i64 %call12 to i32
  store i32 %conv, i32* %len, align 4
  %23 = load i32, i32* %len, align 4
  %24 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %width = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %24, i32 0, i32 6
  %25 = load i32, i32* %width, align 4
  %cmp = icmp sgt i32 %23, %25
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %26 = load i32, i32* %len, align 4
  %27 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %width14 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %27, i32 0, i32 6
  store i32 %26, i32* %width14, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %28 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panecount15 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %28, i32 0, i32 5
  %29 = load i32, i32* %panecount15, align 4
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal void @tty_menu_destroy(%struct.tty_menu_struct* %menu) #0 {
entry:
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %i = alloca i32, align 4
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  %0 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %allocated = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %0, i32 0, i32 4
  %1 = load i64, i64* %allocated, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %3, i32 0, i32 0
  %4 = load i32, i32* %count, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %6, i32 0, i32 2
  %7 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %arrayidx = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %7, i64 %idxprom
  %8 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx, align 8
  %tobool1 = icmp ne %struct.tty_menu_struct* %8, null
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %9 to i64
  %10 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu4 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %10, i32 0, i32 2
  %11 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu4, align 8
  %arrayidx5 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %11, i64 %idxprom3
  %12 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx5, align 8
  call void @tty_menu_destroy(%struct.tty_menu_struct* %12)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %14, i32 0, i32 1
  %15 = load i8**, i8*** %text, align 8
  %16 = bitcast i8** %15 to i8*
  call void @xfree(i8* %16)
  %17 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu6 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %17, i32 0, i32 2
  %18 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu6, align 8
  %19 = bitcast %struct.tty_menu_struct** %18 to i8*
  call void @xfree(i8* %19)
  %20 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panenumber = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %20, i32 0, i32 3
  %21 = load i32*, i32** %panenumber, align 8
  %22 = bitcast i32* %21 to i8*
  call void @xfree(i8* %22)
  %23 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %help_text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %23, i32 0, i32 7
  %24 = load i8**, i8*** %help_text, align 8
  %25 = bitcast i8** %24 to i8*
  call void @xfree(i8* %25)
  br label %if.end.7

if.end.7:                                         ; preds = %for.end, %entry
  %26 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %27 = bitcast %struct.tty_menu_struct* %26 to i8*
  call void @xfree(i8* %27)
  store i8* null, i8** @prev_menu_help_message, align 8
  store i8* null, i8** @menu_help_message, align 8
  ret void
}

declare i8* @record_xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @tty_menu_add_selection(%struct.tty_menu_struct* %menu, i32 %pane, i8* %txt, i1 zeroext %enable, i8* %help_text) #0 {
entry:
  %retval = alloca i1, align 1
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %pane.addr = alloca i32, align 4
  %txt.addr = alloca i8*, align 8
  %enable.addr = alloca i8, align 1
  %help_text.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  store i32 %pane, i32* %pane.addr, align 4
  store i8* %txt, i8** %txt.addr, align 8
  %frombool = zext i1 %enable to i8
  store i8 %frombool, i8* %enable.addr, align 1
  store i8* %help_text, i8** %help_text.addr, align 8
  %0 = load i32, i32* %pane.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %2 = load i32, i32* %pane.addr, align 4
  %call = call %struct.tty_menu_struct* @tty_menu_search_pane(%struct.tty_menu_struct* %1, i32 %2)
  store %struct.tty_menu_struct* %call, %struct.tty_menu_struct** %menu.addr, align 8
  %3 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %tobool1 = icmp ne %struct.tty_menu_struct* %3, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %4 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  call void @tty_menu_make_room(%struct.tty_menu_struct* %4)
  %5 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %5, i32 0, i32 0
  %6 = load i32, i32* %count, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %7, i32 0, i32 2
  %8 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %arrayidx = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %8, i64 %idxprom
  store %struct.tty_menu_struct* null, %struct.tty_menu_struct** %arrayidx, align 8
  %9 = load i8*, i8** %txt.addr, align 8
  %10 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count4 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %10, i32 0, i32 0
  %11 = load i32, i32* %count4, align 4
  %idxprom5 = sext i32 %11 to i64
  %12 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %12, i32 0, i32 1
  %13 = load i8**, i8*** %text, align 8
  %arrayidx6 = getelementptr inbounds i8*, i8** %13, i64 %idxprom5
  store i8* %9, i8** %arrayidx6, align 8
  %14 = load i8, i8* %enable.addr, align 1
  %tobool7 = trunc i8 %14 to i1
  %conv = zext i1 %tobool7 to i32
  %15 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count8 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %15, i32 0, i32 0
  %16 = load i32, i32* %count8, align 4
  %idxprom9 = sext i32 %16 to i64
  %17 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panenumber = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %17, i32 0, i32 3
  %18 = load i32*, i32** %panenumber, align 8
  %arrayidx10 = getelementptr inbounds i32, i32* %18, i64 %idxprom9
  store i32 %conv, i32* %arrayidx10, align 4
  %19 = load i8*, i8** %help_text.addr, align 8
  %20 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count11 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %20, i32 0, i32 0
  %21 = load i32, i32* %count11, align 4
  %idxprom12 = sext i32 %21 to i64
  %22 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %help_text13 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %22, i32 0, i32 7
  %23 = load i8**, i8*** %help_text13, align 8
  %arrayidx14 = getelementptr inbounds i8*, i8** %23, i64 %idxprom12
  store i8* %19, i8** %arrayidx14, align 8
  %24 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count15 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %24, i32 0, i32 0
  %25 = load i32, i32* %count15, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %count15, align 4
  %26 = load i8*, i8** %txt.addr, align 8
  %call16 = call i64 @menu_item_width(i8* %26)
  %conv17 = trunc i64 %call16 to i32
  store i32 %conv17, i32* %len, align 4
  %27 = load i32, i32* %len, align 4
  %28 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %width = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %28, i32 0, i32 6
  %29 = load i32, i32* %width, align 4
  %cmp = icmp sgt i32 %27, %29
  br i1 %cmp, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.3
  %30 = load i32, i32* %len, align 4
  %31 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %width20 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %31, i32 0, i32 6
  store i32 %30, i32* %width20, align 4
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end.3
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.21, %if.then.2
  %32 = load i1, i1* %retval
  ret i1 %32
}

; Function Attrs: nounwind uwtable
define internal void @tty_menu_locate(%struct.tty_menu_struct* %menu, i32 %x, i32 %y, i32* %ulx, i32* %uly, i32* %width, i32* %height) #0 {
entry:
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %ulx.addr = alloca i32*, align 8
  %uly.addr = alloca i32*, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32* %ulx, i32** %ulx.addr, align 8
  store i32* %uly, i32** %uly.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  %0 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %1 = load i32*, i32** %width.addr, align 8
  %2 = load i32*, i32** %height.addr, align 8
  call void @tty_menu_calc_size(%struct.tty_menu_struct* %0, i32* %1, i32* %2)
  %3 = load i32, i32* %x.addr, align 4
  %add = add nsw i32 %3, 1
  %4 = load i32*, i32** %ulx.addr, align 8
  store i32 %add, i32* %4, align 4
  %5 = load i32, i32* %y.addr, align 4
  %6 = load i32*, i32** %uly.addr, align 8
  store i32 %5, i32* %6, align 4
  %7 = load i32*, i32** %width.addr, align 8
  %8 = load i32, i32* %7, align 4
  %add1 = add nsw i32 %8, 2
  store i32 %add1, i32* %7, align 4
  ret void
}

declare zeroext i1 @WINDOWP(i64) #1

declare %struct.window* @XWINDOW(i64) #1

declare zeroext i1 @BUFFERP(i64) #1

declare void @record_unwind_protect(void (i64)*, i64) #1

; Function Attrs: nounwind uwtable
define internal void @tty_pop_down_menu(i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  %menu = alloca %struct.tty_menu_struct*, align 8
  %orig_buffer = alloca %struct.buffer*, align 8
  store i64 %arg, i64* %arg.addr, align 8
  %0 = load i64, i64* %arg.addr, align 8
  %call = call i8* @XSAVE_POINTER(i64 %0, i32 0)
  %1 = bitcast i8* %call to %struct.tty_menu_struct*
  store %struct.tty_menu_struct* %1, %struct.tty_menu_struct** %menu, align 8
  %2 = load i64, i64* %arg.addr, align 8
  %call1 = call i8* @XSAVE_POINTER(i64 %2, i32 1)
  %3 = bitcast i8* %call1 to %struct.buffer*
  store %struct.buffer* %3, %struct.buffer** %orig_buffer, align 8
  call void @block_input()
  %4 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu, align 8
  call void @tty_menu_destroy(%struct.tty_menu_struct* %4)
  %5 = load %struct.buffer*, %struct.buffer** %orig_buffer, align 8
  call void @set_buffer_internal(%struct.buffer* %5)
  call void @unblock_input()
  ret void
}

declare i64 @make_save_ptr_ptr(i8*, i8*) #1

declare void @specbind(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @tty_menu_activate(%struct.tty_menu_struct* %menu, i32* %pane, i32* %selidx, i32 %x0, i32 %y0, i8** %txt, void (i8*, i32, i32)* %help_callback, i1 zeroext %kbd_navigation) #0 {
entry:
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %pane.addr = alloca i32*, align 8
  %selidx.addr = alloca i32*, align 8
  %x0.addr = alloca i32, align 4
  %y0.addr = alloca i32, align 4
  %txt.addr = alloca i8**, align 8
  %help_callback.addr = alloca void (i8*, i32, i32)*, align 8
  %kbd_navigation.addr = alloca i8, align 1
  %state = alloca %struct.tty_menu_state*, align 8
  %statecount = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %i = alloca i32, align 4
  %leave = alloca i8, align 1
  %onepane = alloca i8, align 1
  %result = alloca i32, align 4
  %title_faces = alloca [4 x i32], align 16
  %faces = alloca [4 x i32], align 16
  %buffers_num_deleted = alloca i32, align 4
  %sf = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %first_time = alloca i8, align 1
  %selectface = alloca i64, align 8
  %first_item = alloca i32, align 4
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %prev_inhibit_redisplay = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %input_status = alloca i32, align 4
  %min_y = alloca i32, align 4
  %max_y = alloca i32, align 4
  %dy = alloca i32, align 4
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  store i32* %pane, i32** %pane.addr, align 8
  store i32* %selidx, i32** %selidx.addr, align 8
  store i32 %x0, i32* %x0.addr, align 4
  store i32 %y0, i32* %y0.addr, align 4
  store i8** %txt, i8*** %txt.addr, align 8
  store void (i8*, i32, i32)* %help_callback, void (i8*, i32, i32)** %help_callback.addr, align 8
  %frombool = zext i1 %kbd_navigation to i8
  store i8 %frombool, i8* %kbd_navigation.addr, align 1
  store i32 0, i32* %buffers_num_deleted, align 4
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub1 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub1 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  store %struct.frame* %cond, %struct.frame** %sf, align 8
  %9 = load %struct.frame*, %struct.frame** %sf, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp2 = icmp eq i32 %bf.cast, 1
  br i1 %cmp2, label %cond.true.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %11 = load %struct.frame*, %struct.frame** %sf, align 8
  %output_method3 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %output_method3 to i64*
  %bf.load4 = load i64, i64* %12, align 8
  %bf.lshr5 = lshr i64 %bf.load4, 23
  %bf.clear6 = and i64 %bf.lshr5, 7
  %bf.cast7 = trunc i64 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 3
  br i1 %cmp8, label %cond.true.9, label %cond.false.12

cond.true.9:                                      ; preds = %lor.lhs.false, %cond.end
  %13 = load %struct.frame*, %struct.frame** %sf, align 8
  %terminal10 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 61
  %14 = load %struct.terminal*, %struct.terminal** %terminal10, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %14, i32 0, i32 12
  %tty11 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %tty11, align 8
  br label %cond.end.13

cond.false.12:                                    ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.13

cond.end.13:                                      ; preds = %16, %cond.true.9
  %cond14 = phi %struct.tty_display_info* [ %15, %cond.true.9 ], [ null, %16 ]
  store %struct.tty_display_info* %cond14, %struct.tty_display_info** %tty, align 8
  store i32 0, i32* %first_item, align 4
  %17 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 140), align 8
  store i64 %17, i64* %prev_inhibit_redisplay, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call15 = call i64 @SPECPDL_INDEX()
  store i64 %call15, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %18 = load i32, i32* %x0.addr, align 4
  %cmp16 = icmp sle i32 %18, 0
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.13
  store i32 1, i32* %x0.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.13
  %19 = load i32, i32* %y0.addr, align 4
  %cmp17 = icmp sle i32 %19, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  store i32 1, i32* %y0.addr, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.19
  %20 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panecount = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %20, i32 0, i32 5
  %21 = load i32, i32* %panecount, align 4
  %conv = sext i32 %21 to i64
  %22 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %22, 32
  %div20 = udiv i64 %div, 1
  %cmp21 = icmp ule i64 %conv, %div20
  br i1 %cmp21, label %if.then.23, label %if.else

if.then.23:                                       ; preds = %do.body
  %23 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panecount24 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %23, i32 0, i32 5
  %24 = load i32, i32* %panecount24, align 4
  %conv25 = sext i32 %24 to i64
  %mul = mul i64 32, %conv25
  %25 = load i64, i64* %sa_avail, align 8
  %sub26 = sub i64 %25, %mul
  store i64 %sub26, i64* %sa_avail, align 8
  %26 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panecount27 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %26, i32 0, i32 5
  %27 = load i32, i32* %panecount27, align 4
  %conv28 = sext i32 %27 to i64
  %mul29 = mul i64 32, %conv28
  %28 = alloca i8, i64 %mul29
  %29 = bitcast i8* %28 to %struct.tty_menu_state*
  store %struct.tty_menu_state* %29, %struct.tty_menu_state** %state, align 8
  br label %if.end.33

if.else:                                          ; preds = %do.body
  %30 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panecount30 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %30, i32 0, i32 5
  %31 = load i32, i32* %panecount30, align 4
  %conv31 = sext i32 %31 to i64
  %call32 = call noalias i8* @xnmalloc(i64 %conv31, i64 32)
  %32 = bitcast i8* %call32 to %struct.tty_menu_state*
  store %struct.tty_menu_state* %32, %struct.tty_menu_state** %state, align 8
  store i8 1, i8* %sa_must_free, align 1
  %33 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %34 = bitcast %struct.tty_menu_state* %33 to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %34)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.33
  %35 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %36 = bitcast %struct.tty_menu_state* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 32, i32 8, i1 false)
  %37 = load %struct.frame*, %struct.frame** %sf, align 8
  %call34 = call i64 @intern(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.124, i32 0, i32 0))
  %call35 = call i32 @lookup_derived_face(%struct.frame* %37, i64 %call34, i32 0, i1 zeroext true)
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i64 0
  store i32 %call35, i32* %arrayidx, align 4
  %38 = load %struct.frame*, %struct.frame** %sf, align 8
  %call36 = call i64 @intern(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.125, i32 0, i32 0))
  %call37 = call i32 @lookup_derived_face(%struct.frame* %38, i64 %call36, i32 0, i1 zeroext true)
  %arrayidx38 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i64 1
  store i32 %call37, i32* %arrayidx38, align 4
  %call39 = call i64 @intern(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.126, i32 0, i32 0))
  store i64 %call39, i64* %selectface, align 8
  %39 = load %struct.frame*, %struct.frame** %sf, align 8
  %40 = load i64, i64* %selectface, align 8
  %arrayidx40 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i64 0
  %41 = load i32, i32* %arrayidx40, align 4
  %call41 = call i32 @lookup_derived_face(%struct.frame* %39, i64 %40, i32 %41, i1 zeroext true)
  %arrayidx42 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i64 2
  store i32 %call41, i32* %arrayidx42, align 4
  %42 = load %struct.frame*, %struct.frame** %sf, align 8
  %43 = load i64, i64* %selectface, align 8
  %arrayidx43 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i64 1
  %44 = load i32, i32* %arrayidx43, align 4
  %call44 = call i32 @lookup_derived_face(%struct.frame* %42, i64 %43, i32 %44, i1 zeroext true)
  %arrayidx45 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i64 3
  store i32 %call44, i32* %arrayidx45, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %45 = load i32, i32* %i, align 4
  %cmp46 = icmp slt i32 %45, 4
  br i1 %cmp46, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx48 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i64 3
  %46 = load i32, i32* %arrayidx48, align 4
  %47 = load i32, i32* %i, align 4
  %idxprom = sext i32 %47 to i64
  %arrayidx49 = getelementptr inbounds [4 x i32], [4 x i32]* %title_faces, i32 0, i64 %idxprom
  store i32 %46, i32* %arrayidx49, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %48 = load i32, i32* %i, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %statecount, align 4
  %49 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %49, i32 0, i32 1
  %50 = load i8**, i8*** %text, align 8
  %arrayidx50 = getelementptr inbounds i8*, i8** %50, i64 0
  %51 = load i8*, i8** %arrayidx50, align 8
  %call51 = call i32 @strncmp(i8* %51, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.127, i32 0, i32 0), i64 9) #10
  %cmp52 = icmp eq i32 %call51, 0
  br i1 %cmp52, label %if.then.54, label %if.end.58

if.then.54:                                       ; preds = %for.end
  %52 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text55 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %52, i32 0, i32 1
  %53 = load i8**, i8*** %text55, align 8
  %arrayidx56 = getelementptr inbounds i8*, i8** %53, i64 0
  %54 = load i8*, i8** %arrayidx56, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %54, i64 7
  store i8 0, i8* %arrayidx57, align 1
  store i32 1, i32* %buffers_num_deleted, align 4
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.54, %for.end
  %call59 = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call59, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 140), align 8
  %55 = load %struct.frame*, %struct.frame** %sf, align 8
  call void @update_frame_with_menu(%struct.frame* %55, i32 -1, i32 -1)
  %56 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %57 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx60 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %57, i64 0
  %menu61 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx60, i32 0, i32 1
  store %struct.tty_menu_struct* %56, %struct.tty_menu_struct** %menu61, align 8
  %58 = load %struct.frame*, %struct.frame** %sf, align 8
  %call62 = call %struct.glyph_matrix* @save_and_enable_current_matrix(%struct.frame* %58)
  %59 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx63 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %59, i64 0
  %screen_behind = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx63, i32 0, i32 0
  store %struct.glyph_matrix* %call62, %struct.glyph_matrix** %screen_behind, align 8
  %60 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %61 = load i32, i32* %x0.addr, align 4
  %sub64 = sub nsw i32 %61, 1
  %62 = load i32, i32* %y0.addr, align 4
  %sub65 = sub nsw i32 %62, 1
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %title_faces, i32 0, i32 0
  %63 = load i32, i32* %x0.addr, align 4
  %sub66 = sub nsw i32 %63, 1
  %64 = load i32, i32* %y0.addr, align 4
  %sub67 = sub nsw i32 %64, 1
  call void @tty_menu_display(%struct.tty_menu_struct* %60, i32 %sub64, i32 %sub65, i32 1, i32* %arraydecay, i32 %sub66, i32 %sub67, i32 0, i1 zeroext false)
  %65 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %65, i32 0, i32 10
  %66 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %66, i32 0, i32 1
  %67 = load i32, i32* %cm_curX, align 4
  store i32 %67, i32* %col, align 4
  %68 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm68 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %68, i32 0, i32 10
  %69 = load %struct.cm*, %struct.cm** %Wcm68, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %69, i32 0, i32 0
  %70 = load i32, i32* %cm_curY, align 4
  store i32 %70, i32* %row, align 4
  %71 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_hide_cursor(%struct.tty_display_info* %71)
  %72 = load i32, i32* %buffers_num_deleted, align 4
  %tobool = icmp ne i32 %72, 0
  br i1 %tobool, label %if.then.69, label %if.end.73

if.then.69:                                       ; preds = %if.end.58
  %73 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text70 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %73, i32 0, i32 1
  %74 = load i8**, i8*** %text70, align 8
  %arrayidx71 = getelementptr inbounds i8*, i8** %74, i64 0
  %75 = load i8*, i8** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds i8, i8* %75, i64 7
  store i8 32, i8* %arrayidx72, align 1
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.69, %if.end.58
  %76 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %76, i32 0, i32 0
  %77 = load i32, i32* %count, align 4
  %cmp74 = icmp eq i32 %77, 1
  br i1 %cmp74, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.73
  %78 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %78, i32 0, i32 2
  %79 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %arrayidx76 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %79, i64 0
  %80 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx76, align 8
  %tobool77 = icmp ne %struct.tty_menu_struct* %80, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.73
  %81 = phi i1 [ false, %if.end.73 ], [ %tobool77, %land.rhs ]
  %frombool78 = zext i1 %81 to i8
  store i8 %frombool78, i8* %onepane, align 1
  %82 = load i8, i8* %onepane, align 1
  %tobool79 = trunc i8 %82 to i1
  br i1 %tobool79, label %if.then.80, label %if.else.88

if.then.80:                                       ; preds = %land.end
  %83 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu81 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %83, i32 0, i32 2
  %84 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu81, align 8
  %arrayidx82 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %84, i64 0
  %85 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx82, align 8
  %width = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %85, i32 0, i32 6
  %86 = load i32, i32* %width, align 4
  %87 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %width83 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %87, i32 0, i32 6
  store i32 %86, i32* %width83, align 4
  %88 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu84 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %88, i32 0, i32 2
  %89 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu84, align 8
  %arrayidx85 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %89, i64 0
  %90 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx85, align 8
  %91 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx86 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %91, i64 0
  %menu87 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx86, i32 0, i32 1
  store %struct.tty_menu_struct* %90, %struct.tty_menu_struct** %menu87, align 8
  br label %if.end.91

if.else.88:                                       ; preds = %land.end
  %92 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %93 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx89 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %93, i64 0
  %menu90 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx89, i32 0, i32 1
  store %struct.tty_menu_struct* %92, %struct.tty_menu_struct** %menu90, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.88, %if.then.80
  %94 = load i32, i32* %x0.addr, align 4
  %sub92 = sub nsw i32 %94, 1
  %95 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx93 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %95, i64 0
  %x94 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx93, i32 0, i32 3
  store i32 %sub92, i32* %x94, align 4
  %96 = load i32, i32* %y0.addr, align 4
  %97 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx95 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %97, i64 0
  %y96 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx95, i32 0, i32 4
  store i32 %96, i32* %y96, align 4
  %98 = load i8, i8* %onepane, align 1
  %tobool97 = trunc i8 %98 to i1
  %conv98 = zext i1 %tobool97 to i32
  %99 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx99 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %99, i64 0
  %pane100 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx99, i32 0, i32 2
  store i32 %conv98, i32* %pane100, align 4
  %100 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx101 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %100, i64 0
  %x102 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx101, i32 0, i32 3
  %101 = load i32, i32* %x102, align 4
  store i32 %101, i32* %x, align 4
  %102 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx103 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %102, i64 0
  %y104 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx103, i32 0, i32 4
  %103 = load i32, i32* %y104, align 4
  store i32 %103, i32* %y, align 4
  store i8 1, i8* %first_time, align 1
  store i8 0, i8* %leave, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end.367, %if.end.91
  %104 = load i8, i8* %leave, align 1
  %tobool105 = trunc i8 %104 to i1
  %lnot = xor i1 %tobool105, true
  br i1 %lnot, label %while.body, label %while.end.369

while.body:                                       ; preds = %while.cond
  %105 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx106 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %105, i64 0
  %y107 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx106, i32 0, i32 4
  %106 = load i32, i32* %y107, align 4
  store i32 %106, i32* %min_y, align 4
  %107 = load i32, i32* %min_y, align 4
  %108 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx108 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %108, i64 0
  %menu109 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx108, i32 0, i32 1
  %109 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu109, align 8
  %count110 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %109, i32 0, i32 0
  %110 = load i32, i32* %count110, align 4
  %add = add nsw i32 %107, %110
  %111 = load %struct.frame*, %struct.frame** %sf, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %111, i32 0, i32 39
  %112 = load i32, i32* %total_lines, align 4
  %sub111 = sub nsw i32 %112, 1
  %cmp112 = icmp slt i32 %add, %sub111
  br i1 %cmp112, label %cond.true.114, label %cond.false.119

cond.true.114:                                    ; preds = %while.body
  %113 = load i32, i32* %min_y, align 4
  %114 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx115 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %114, i64 0
  %menu116 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx115, i32 0, i32 1
  %115 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu116, align 8
  %count117 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %115, i32 0, i32 0
  %116 = load i32, i32* %count117, align 4
  %add118 = add nsw i32 %113, %116
  br label %cond.end.122

cond.false.119:                                   ; preds = %while.body
  %117 = load %struct.frame*, %struct.frame** %sf, align 8
  %total_lines120 = getelementptr inbounds %struct.frame, %struct.frame* %117, i32 0, i32 39
  %118 = load i32, i32* %total_lines120, align 4
  %sub121 = sub nsw i32 %118, 1
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.false.119, %cond.true.114
  %cond123 = phi i32 [ %add118, %cond.true.114 ], [ %sub121, %cond.false.119 ]
  %sub124 = sub nsw i32 %cond123, 1
  store i32 %sub124, i32* %max_y, align 4
  %119 = load %struct.frame*, %struct.frame** %sf, align 8
  %120 = load i32, i32* %min_y, align 4
  %121 = load i32, i32* %max_y, align 4
  %call125 = call i32 @read_menu_input(%struct.frame* %119, i32* %x, i32* %y, i32 %120, i32 %121, i8* %first_time)
  store i32 %call125, i32* %input_status, align 4
  %122 = load i32, i32* %input_status, align 4
  %tobool126 = icmp ne i32 %122, 0
  br i1 %tobool126, label %if.then.127, label %if.end.167

if.then.127:                                      ; preds = %cond.end.122
  store i8 1, i8* %leave, align 1
  %123 = load i32, i32* %input_status, align 4
  switch i32 %123, label %sw.default [
    i32 -1, label %sw.bb
    i32 2, label %sw.bb.132
    i32 3, label %sw.bb.137
    i32 4, label %sw.bb.142
    i32 5, label %sw.bb.155
  ]

sw.bb:                                            ; preds = %if.then.127
  %call128 = call i64 @builtin_lisp_symbol(i32 0)
  %call129 = call i64 @builtin_lisp_symbol(i32 0)
  %call130 = call i64 @builtin_lisp_symbol(i32 0)
  %call131 = call i64 @builtin_lisp_symbol(i32 0)
  call void @show_help_echo(i64 %call128, i64 %call129, i64 %call130, i64 %call131)
  store i32 2, i32* %result, align 4
  br label %sw.epilog

sw.bb.132:                                        ; preds = %if.then.127
  %124 = load i8, i8* %kbd_navigation.addr, align 1
  %tobool133 = trunc i8 %124 to i1
  br i1 %tobool133, label %if.then.134, label %if.else.135

if.then.134:                                      ; preds = %sw.bb.132
  store i32 4, i32* %result, align 4
  br label %if.end.136

if.else.135:                                      ; preds = %sw.bb.132
  store i8 0, i8* %leave, align 1
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.135, %if.then.134
  br label %sw.epilog

sw.bb.137:                                        ; preds = %if.then.127
  %125 = load i8, i8* %kbd_navigation.addr, align 1
  %tobool138 = trunc i8 %125 to i1
  br i1 %tobool138, label %if.then.139, label %if.else.140

if.then.139:                                      ; preds = %sw.bb.137
  store i32 5, i32* %result, align 4
  br label %if.end.141

if.else.140:                                      ; preds = %sw.bb.137
  store i8 0, i8* %leave, align 1
  br label %if.end.141

if.end.141:                                       ; preds = %if.else.140, %if.then.139
  br label %sw.epilog

sw.bb.142:                                        ; preds = %if.then.127
  %126 = load i32, i32* %y, align 4
  %127 = load i32, i32* %min_y, align 4
  %sub143 = sub nsw i32 %126, %127
  %128 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx144 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %128, i64 0
  %menu145 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx144, i32 0, i32 1
  %129 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu145, align 8
  %count146 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %129, i32 0, i32 0
  %130 = load i32, i32* %count146, align 4
  %sub147 = sub nsw i32 %130, 1
  %131 = load i32, i32* %first_item, align 4
  %sub148 = sub nsw i32 %sub147, %131
  %cmp149 = icmp eq i32 %sub143, %sub148
  br i1 %cmp149, label %if.then.151, label %if.else.152

if.then.151:                                      ; preds = %sw.bb.142
  %132 = load i32, i32* %min_y, align 4
  store i32 %132, i32* %y, align 4
  store i32 0, i32* %first_item, align 4
  br label %if.end.154

if.else.152:                                      ; preds = %sw.bb.142
  %133 = load i32, i32* %first_item, align 4
  %inc153 = add nsw i32 %133, 1
  store i32 %inc153, i32* %first_item, align 4
  br label %if.end.154

if.end.154:                                       ; preds = %if.else.152, %if.then.151
  store i8 0, i8* %leave, align 1
  br label %sw.epilog

sw.bb.155:                                        ; preds = %if.then.127
  %134 = load i32, i32* %first_item, align 4
  %cmp156 = icmp eq i32 %134, 0
  br i1 %cmp156, label %if.then.158, label %if.else.165

if.then.158:                                      ; preds = %sw.bb.155
  %135 = load i32, i32* %max_y, align 4
  store i32 %135, i32* %y, align 4
  %136 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx159 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %136, i64 0
  %menu160 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx159, i32 0, i32 1
  %137 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu160, align 8
  %count161 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %137, i32 0, i32 0
  %138 = load i32, i32* %count161, align 4
  %sub162 = sub nsw i32 %138, 1
  %139 = load i32, i32* %y, align 4
  %140 = load i32, i32* %min_y, align 4
  %sub163 = sub nsw i32 %139, %140
  %sub164 = sub nsw i32 %sub162, %sub163
  store i32 %sub164, i32* %first_item, align 4
  br label %if.end.166

if.else.165:                                      ; preds = %sw.bb.155
  %141 = load i32, i32* %first_item, align 4
  %dec = add nsw i32 %141, -1
  store i32 %dec, i32* %first_item, align 4
  br label %if.end.166

if.end.166:                                       ; preds = %if.else.165, %if.then.158
  store i8 0, i8* %leave, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.127
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.166, %if.end.154, %if.end.141, %if.end.136, %sw.bb
  br label %if.end.167

if.end.167:                                       ; preds = %sw.epilog, %cond.end.122
  %142 = load %struct.frame*, %struct.frame** %sf, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %142, i32 0, i32 26
  %143 = bitcast i48* %mouse_moved to i64*
  %bf.load168 = load i64, i64* %143, align 8
  %bf.lshr169 = lshr i64 %bf.load168, 20
  %bf.clear170 = and i64 %bf.lshr169, 1
  %bf.cast171 = trunc i64 %bf.clear170 to i1
  br i1 %bf.cast171, label %land.lhs.true.173, label %if.end.359

land.lhs.true.173:                                ; preds = %if.end.167
  %144 = load i32, i32* %input_status, align 4
  %cmp174 = icmp ne i32 %144, -1
  br i1 %cmp174, label %if.then.176, label %if.end.359

if.then.176:                                      ; preds = %land.lhs.true.173
  %145 = load %struct.frame*, %struct.frame** %sf, align 8
  %mouse_moved177 = getelementptr inbounds %struct.frame, %struct.frame* %145, i32 0, i32 26
  %146 = bitcast i48* %mouse_moved177 to i64*
  %bf.load178 = load i64, i64* %146, align 8
  %bf.clear179 = and i64 %bf.load178, -1048577
  store i64 %bf.clear179, i64* %146, align 8
  store i32 3, i32* %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.180

for.cond.180:                                     ; preds = %for.inc.335, %if.then.176
  %147 = load i32, i32* %i, align 4
  %148 = load i32, i32* %statecount, align 4
  %cmp181 = icmp slt i32 %147, %148
  br i1 %cmp181, label %for.body.183, label %for.end.337

for.body.183:                                     ; preds = %for.cond.180
  %149 = load i32, i32* %i, align 4
  %idxprom184 = sext i32 %149 to i64
  %150 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx185 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %150, i64 %idxprom184
  %x186 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx185, i32 0, i32 3
  %151 = load i32, i32* %x186, align 4
  %152 = load i32, i32* %x, align 4
  %cmp187 = icmp sle i32 %151, %152
  br i1 %cmp187, label %land.lhs.true.189, label %if.end.334

land.lhs.true.189:                                ; preds = %for.body.183
  %153 = load i32, i32* %x, align 4
  %154 = load i32, i32* %i, align 4
  %idxprom190 = sext i32 %154 to i64
  %155 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx191 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %155, i64 %idxprom190
  %x192 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx191, i32 0, i32 3
  %156 = load i32, i32* %x192, align 4
  %157 = load i32, i32* %i, align 4
  %idxprom193 = sext i32 %157 to i64
  %158 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx194 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %158, i64 %idxprom193
  %menu195 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx194, i32 0, i32 1
  %159 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu195, align 8
  %width196 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %159, i32 0, i32 6
  %160 = load i32, i32* %width196, align 4
  %add197 = add nsw i32 %156, %160
  %add198 = add nsw i32 %add197, 2
  %cmp199 = icmp slt i32 %153, %add198
  br i1 %cmp199, label %if.then.201, label %if.end.334

if.then.201:                                      ; preds = %land.lhs.true.189
  %161 = load i32, i32* %y, align 4
  %162 = load i32, i32* %i, align 4
  %idxprom202 = sext i32 %162 to i64
  %163 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx203 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %163, i64 %idxprom202
  %y204 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx203, i32 0, i32 4
  %164 = load i32, i32* %y204, align 4
  %sub205 = sub nsw i32 %161, %164
  %165 = load i32, i32* %first_item, align 4
  %add206 = add nsw i32 %sub205, %165
  store i32 %add206, i32* %dy, align 4
  %166 = load i32, i32* %dy, align 4
  %cmp207 = icmp sle i32 0, %166
  br i1 %cmp207, label %land.lhs.true.209, label %if.end.333

land.lhs.true.209:                                ; preds = %if.then.201
  %167 = load i32, i32* %dy, align 4
  %168 = load i32, i32* %i, align 4
  %idxprom210 = sext i32 %168 to i64
  %169 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx211 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %169, i64 %idxprom210
  %menu212 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx211, i32 0, i32 1
  %170 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu212, align 8
  %count213 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %170, i32 0, i32 0
  %171 = load i32, i32* %count213, align 4
  %cmp214 = icmp slt i32 %167, %171
  br i1 %cmp214, label %if.then.216, label %if.end.333

if.then.216:                                      ; preds = %land.lhs.true.209
  %172 = load i32, i32* %dy, align 4
  %idxprom217 = sext i32 %172 to i64
  %173 = load i32, i32* %i, align 4
  %idxprom218 = sext i32 %173 to i64
  %174 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx219 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %174, i64 %idxprom218
  %menu220 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx219, i32 0, i32 1
  %175 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu220, align 8
  %submenu221 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %175, i32 0, i32 2
  %176 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu221, align 8
  %arrayidx222 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %176, i64 %idxprom217
  %177 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx222, align 8
  %tobool223 = icmp ne %struct.tty_menu_struct* %177, null
  br i1 %tobool223, label %if.end.234, label %if.then.224

if.then.224:                                      ; preds = %if.then.216
  %178 = load i32, i32* %dy, align 4
  %idxprom225 = sext i32 %178 to i64
  %179 = load i32, i32* %i, align 4
  %idxprom226 = sext i32 %179 to i64
  %180 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx227 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %180, i64 %idxprom226
  %menu228 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx227, i32 0, i32 1
  %181 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu228, align 8
  %panenumber = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %181, i32 0, i32 3
  %182 = load i32*, i32** %panenumber, align 8
  %arrayidx229 = getelementptr inbounds i32, i32* %182, i64 %idxprom225
  %183 = load i32, i32* %arrayidx229, align 4
  %tobool230 = icmp ne i32 %183, 0
  br i1 %tobool230, label %if.then.231, label %if.else.232

if.then.231:                                      ; preds = %if.then.224
  store i32 1, i32* %result, align 4
  br label %if.end.233

if.else.232:                                      ; preds = %if.then.224
  store i32 3, i32* %result, align 4
  br label %if.end.233

if.end.233:                                       ; preds = %if.else.232, %if.then.231
  br label %if.end.234

if.end.234:                                       ; preds = %if.end.233, %if.then.216
  %184 = load i32, i32* %i, align 4
  %idxprom235 = sext i32 %184 to i64
  %185 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx236 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %185, i64 %idxprom235
  %pane237 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx236, i32 0, i32 2
  %186 = load i32, i32* %pane237, align 4
  %sub238 = sub nsw i32 %186, 1
  %187 = load i32*, i32** %pane.addr, align 8
  store i32 %sub238, i32* %187, align 4
  %188 = load i32, i32* %dy, align 4
  %189 = load i32*, i32** %selidx.addr, align 8
  store i32 %188, i32* %189, align 4
  %190 = load i32, i32* %i, align 4
  %191 = load i32, i32* %statecount, align 4
  %sub239 = sub nsw i32 %191, 2
  %cmp240 = icmp ne i32 %190, %sub239
  br i1 %cmp240, label %if.then.255, label %lor.lhs.false.242

lor.lhs.false.242:                                ; preds = %if.end.234
  %192 = load i32, i32* %dy, align 4
  %idxprom243 = sext i32 %192 to i64
  %193 = load i32, i32* %i, align 4
  %idxprom244 = sext i32 %193 to i64
  %194 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx245 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %194, i64 %idxprom244
  %menu246 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx245, i32 0, i32 1
  %195 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu246, align 8
  %submenu247 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %195, i32 0, i32 2
  %196 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu247, align 8
  %arrayidx248 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %196, i64 %idxprom243
  %197 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx248, align 8
  %198 = load i32, i32* %i, align 4
  %add249 = add nsw i32 %198, 1
  %idxprom250 = sext i32 %add249 to i64
  %199 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx251 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %199, i64 %idxprom250
  %menu252 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx251, i32 0, i32 1
  %200 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu252, align 8
  %cmp253 = icmp ne %struct.tty_menu_struct* %197, %200
  br i1 %cmp253, label %if.then.255, label %if.end.268

if.then.255:                                      ; preds = %lor.lhs.false.242, %if.end.234
  br label %while.cond.256

while.cond.256:                                   ; preds = %while.body.260, %if.then.255
  %201 = load i32, i32* %i, align 4
  %202 = load i32, i32* %statecount, align 4
  %sub257 = sub nsw i32 %202, 1
  %cmp258 = icmp ne i32 %201, %sub257
  br i1 %cmp258, label %while.body.260, label %while.end

while.body.260:                                   ; preds = %while.cond.256
  %203 = load i32, i32* %statecount, align 4
  %dec261 = add nsw i32 %203, -1
  store i32 %dec261, i32* %statecount, align 4
  %204 = load %struct.frame*, %struct.frame** %sf, align 8
  %205 = load i32, i32* %statecount, align 4
  %idxprom262 = sext i32 %205 to i64
  %206 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx263 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %206, i64 %idxprom262
  %screen_behind264 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx263, i32 0, i32 0
  %207 = load %struct.glyph_matrix*, %struct.glyph_matrix** %screen_behind264, align 8
  call void @screen_update(%struct.frame* %204, %struct.glyph_matrix* %207)
  %208 = load i32, i32* %statecount, align 4
  %idxprom265 = sext i32 %208 to i64
  %209 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx266 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %209, i64 %idxprom265
  %screen_behind267 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx266, i32 0, i32 0
  store %struct.glyph_matrix* null, %struct.glyph_matrix** %screen_behind267, align 8
  br label %while.cond.256

while.end:                                        ; preds = %while.cond.256
  br label %if.end.268

if.end.268:                                       ; preds = %while.end, %lor.lhs.false.242
  %210 = load i32, i32* %i, align 4
  %211 = load i32, i32* %statecount, align 4
  %sub269 = sub nsw i32 %211, 1
  %cmp270 = icmp eq i32 %210, %sub269
  br i1 %cmp270, label %land.lhs.true.272, label %if.end.332

land.lhs.true.272:                                ; preds = %if.end.268
  %212 = load i32, i32* %dy, align 4
  %idxprom273 = sext i32 %212 to i64
  %213 = load i32, i32* %i, align 4
  %idxprom274 = sext i32 %213 to i64
  %214 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx275 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %214, i64 %idxprom274
  %menu276 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx275, i32 0, i32 1
  %215 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu276, align 8
  %submenu277 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %215, i32 0, i32 2
  %216 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu277, align 8
  %arrayidx278 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %216, i64 %idxprom273
  %217 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx278, align 8
  %tobool279 = icmp ne %struct.tty_menu_struct* %217, null
  br i1 %tobool279, label %if.then.280, label %if.end.332

if.then.280:                                      ; preds = %land.lhs.true.272
  %218 = load i32, i32* %i, align 4
  %idxprom281 = sext i32 %218 to i64
  %219 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx282 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %219, i64 %idxprom281
  %menu283 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx282, i32 0, i32 1
  %220 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu283, align 8
  %221 = load i32, i32* %i, align 4
  %idxprom284 = sext i32 %221 to i64
  %222 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx285 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %222, i64 %idxprom284
  %x286 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx285, i32 0, i32 3
  %223 = load i32, i32* %x286, align 4
  %224 = load i32, i32* %i, align 4
  %idxprom287 = sext i32 %224 to i64
  %225 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx288 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %225, i64 %idxprom287
  %y289 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx288, i32 0, i32 4
  %226 = load i32, i32* %y289, align 4
  %227 = load i32, i32* %i, align 4
  %idxprom290 = sext i32 %227 to i64
  %228 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx291 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %228, i64 %idxprom290
  %pane292 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx291, i32 0, i32 2
  %229 = load i32, i32* %pane292, align 4
  %arraydecay293 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i32 0
  %230 = load i32, i32* %x, align 4
  %231 = load i32, i32* %y, align 4
  %232 = load i32, i32* %first_item, align 4
  call void @tty_menu_display(%struct.tty_menu_struct* %220, i32 %223, i32 %226, i32 %229, i32* %arraydecay293, i32 %230, i32 %231, i32 %232, i1 zeroext true)
  %233 = load i32, i32* %dy, align 4
  %idxprom294 = sext i32 %233 to i64
  %234 = load i32, i32* %i, align 4
  %idxprom295 = sext i32 %234 to i64
  %235 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx296 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %235, i64 %idxprom295
  %menu297 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx296, i32 0, i32 1
  %236 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu297, align 8
  %submenu298 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %236, i32 0, i32 2
  %237 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu298, align 8
  %arrayidx299 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %237, i64 %idxprom294
  %238 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx299, align 8
  %239 = load i32, i32* %statecount, align 4
  %idxprom300 = sext i32 %239 to i64
  %240 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx301 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %240, i64 %idxprom300
  %menu302 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx301, i32 0, i32 1
  store %struct.tty_menu_struct* %238, %struct.tty_menu_struct** %menu302, align 8
  %241 = load i32, i32* %dy, align 4
  %idxprom303 = sext i32 %241 to i64
  %242 = load i32, i32* %i, align 4
  %idxprom304 = sext i32 %242 to i64
  %243 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx305 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %243, i64 %idxprom304
  %menu306 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx305, i32 0, i32 1
  %244 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu306, align 8
  %panenumber307 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %244, i32 0, i32 3
  %245 = load i32*, i32** %panenumber307, align 8
  %arrayidx308 = getelementptr inbounds i32, i32* %245, i64 %idxprom303
  %246 = load i32, i32* %arrayidx308, align 4
  %247 = load i32, i32* %statecount, align 4
  %idxprom309 = sext i32 %247 to i64
  %248 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx310 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %248, i64 %idxprom309
  %pane311 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx310, i32 0, i32 2
  store i32 %246, i32* %pane311, align 4
  %249 = load %struct.frame*, %struct.frame** %sf, align 8
  %call312 = call %struct.glyph_matrix* @save_and_enable_current_matrix(%struct.frame* %249)
  %250 = load i32, i32* %statecount, align 4
  %idxprom313 = sext i32 %250 to i64
  %251 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx314 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %251, i64 %idxprom313
  %screen_behind315 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx314, i32 0, i32 0
  store %struct.glyph_matrix* %call312, %struct.glyph_matrix** %screen_behind315, align 8
  %252 = load i32, i32* %i, align 4
  %idxprom316 = sext i32 %252 to i64
  %253 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx317 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %253, i64 %idxprom316
  %x318 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx317, i32 0, i32 3
  %254 = load i32, i32* %x318, align 4
  %255 = load i32, i32* %i, align 4
  %idxprom319 = sext i32 %255 to i64
  %256 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx320 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %256, i64 %idxprom319
  %menu321 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx320, i32 0, i32 1
  %257 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu321, align 8
  %width322 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %257, i32 0, i32 6
  %258 = load i32, i32* %width322, align 4
  %add323 = add nsw i32 %254, %258
  %add324 = add nsw i32 %add323, 2
  %259 = load i32, i32* %statecount, align 4
  %idxprom325 = sext i32 %259 to i64
  %260 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx326 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %260, i64 %idxprom325
  %x327 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx326, i32 0, i32 3
  store i32 %add324, i32* %x327, align 4
  %261 = load i32, i32* %y, align 4
  %262 = load i32, i32* %statecount, align 4
  %idxprom328 = sext i32 %262 to i64
  %263 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx329 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %263, i64 %idxprom328
  %y330 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx329, i32 0, i32 4
  store i32 %261, i32* %y330, align 4
  %264 = load i32, i32* %statecount, align 4
  %inc331 = add nsw i32 %264, 1
  store i32 %inc331, i32* %statecount, align 4
  br label %if.end.332

if.end.332:                                       ; preds = %if.then.280, %land.lhs.true.272, %if.end.268
  br label %if.end.333

if.end.333:                                       ; preds = %if.end.332, %land.lhs.true.209, %if.then.201
  br label %if.end.334

if.end.334:                                       ; preds = %if.end.333, %land.lhs.true.189, %for.body.183
  br label %for.inc.335

for.inc.335:                                      ; preds = %if.end.334
  %265 = load i32, i32* %i, align 4
  %inc336 = add nsw i32 %265, 1
  store i32 %inc336, i32* %i, align 4
  br label %for.cond.180

for.end.337:                                      ; preds = %for.cond.180
  %266 = load i32, i32* %statecount, align 4
  %sub338 = sub nsw i32 %266, 1
  %idxprom339 = sext i32 %sub338 to i64
  %267 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx340 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %267, i64 %idxprom339
  %menu341 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx340, i32 0, i32 1
  %268 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu341, align 8
  %269 = load i32, i32* %statecount, align 4
  %sub342 = sub nsw i32 %269, 1
  %idxprom343 = sext i32 %sub342 to i64
  %270 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx344 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %270, i64 %idxprom343
  %x345 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx344, i32 0, i32 3
  %271 = load i32, i32* %x345, align 4
  %272 = load i32, i32* %statecount, align 4
  %sub346 = sub nsw i32 %272, 1
  %idxprom347 = sext i32 %sub346 to i64
  %273 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx348 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %273, i64 %idxprom347
  %y349 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx348, i32 0, i32 4
  %274 = load i32, i32* %y349, align 4
  %275 = load i32, i32* %statecount, align 4
  %sub350 = sub nsw i32 %275, 1
  %idxprom351 = sext i32 %sub350 to i64
  %276 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx352 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %276, i64 %idxprom351
  %pane353 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx352, i32 0, i32 2
  %277 = load i32, i32* %pane353, align 4
  %arraydecay354 = getelementptr inbounds [4 x i32], [4 x i32]* %faces, i32 0, i32 0
  %278 = load i32, i32* %x, align 4
  %279 = load i32, i32* %y, align 4
  %280 = load i32, i32* %first_item, align 4
  call void @tty_menu_display(%struct.tty_menu_struct* %268, i32 %271, i32 %274, i32 %277, i32* %arraydecay354, i32 %278, i32 %279, i32 %280, i1 zeroext true)
  %281 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm355 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %281, i32 0, i32 10
  %282 = load %struct.cm*, %struct.cm** %Wcm355, align 8
  %cm_curX356 = getelementptr inbounds %struct.cm, %struct.cm* %282, i32 0, i32 1
  %283 = load i32, i32* %cm_curX356, align 4
  store i32 %283, i32* %col, align 4
  %284 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm357 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %284, i32 0, i32 10
  %285 = load %struct.cm*, %struct.cm** %Wcm357, align 8
  %cm_curY358 = getelementptr inbounds %struct.cm, %struct.cm* %285, i32 0, i32 0
  %286 = load i32, i32* %cm_curY358, align 4
  store i32 %286, i32* %row, align 4
  br label %if.end.359

if.end.359:                                       ; preds = %for.end.337, %land.lhs.true.173, %if.end.167
  %287 = load i8*, i8** @menu_help_message, align 8
  %tobool360 = icmp ne i8* %287, null
  br i1 %tobool360, label %land.lhs.true.363, label %lor.lhs.false.361

lor.lhs.false.361:                                ; preds = %if.end.359
  %288 = load i8*, i8** @prev_menu_help_message, align 8
  %tobool362 = icmp ne i8* %288, null
  br i1 %tobool362, label %land.lhs.true.363, label %if.end.367

land.lhs.true.363:                                ; preds = %lor.lhs.false.361, %if.end.359
  %289 = load i8*, i8** @menu_help_message, align 8
  %290 = load i8*, i8** @prev_menu_help_message, align 8
  %cmp364 = icmp ne i8* %289, %290
  br i1 %cmp364, label %if.then.366, label %if.end.367

if.then.366:                                      ; preds = %land.lhs.true.363
  %291 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %help_callback.addr, align 8
  %292 = load i8*, i8** @menu_help_message, align 8
  %293 = load i32, i32* @menu_help_paneno, align 4
  %294 = load i32, i32* @menu_help_itemno, align 4
  call void %291(i8* %292, i32 %293, i32 %294)
  %295 = load %struct.frame*, %struct.frame** %sf, align 8
  %296 = load i32, i32* %row, align 4
  %297 = load i32, i32* %col, align 4
  call void @cursor_to(%struct.frame* %295, i32 %296, i32 %297)
  %298 = load i8*, i8** @menu_help_message, align 8
  store i8* %298, i8** @prev_menu_help_message, align 8
  br label %if.end.367

if.end.367:                                       ; preds = %if.then.366, %land.lhs.true.363, %lor.lhs.false.361
  %299 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_hide_cursor(%struct.tty_display_info* %299)
  %300 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %300, i32 0, i32 4
  %301 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call368 = call i32 @fflush(%struct._IO_FILE* %301)
  br label %while.cond

while.end.369:                                    ; preds = %while.cond
  %302 = load %struct.frame*, %struct.frame** %sf, align 8
  %mouse_moved370 = getelementptr inbounds %struct.frame, %struct.frame* %302, i32 0, i32 26
  %303 = bitcast i48* %mouse_moved370 to i64*
  %bf.load371 = load i64, i64* %303, align 8
  %bf.clear372 = and i64 %bf.load371, -1048577
  store i64 %bf.clear372, i64* %303, align 8
  %304 = load %struct.frame*, %struct.frame** %sf, align 8
  %305 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx373 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %305, i64 0
  %screen_behind374 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx373, i32 0, i32 0
  %306 = load %struct.glyph_matrix*, %struct.glyph_matrix** %screen_behind374, align 8
  call void @screen_update(%struct.frame* %304, %struct.glyph_matrix* %306)
  br label %while.cond.375

while.cond.375:                                   ; preds = %while.body.378, %while.end.369
  %307 = load i32, i32* %statecount, align 4
  %dec376 = add nsw i32 %307, -1
  store i32 %dec376, i32* %statecount, align 4
  %tobool377 = icmp ne i32 %307, 0
  br i1 %tobool377, label %while.body.378, label %while.end.382

while.body.378:                                   ; preds = %while.cond.375
  %308 = load i32, i32* %statecount, align 4
  %idxprom379 = sext i32 %308 to i64
  %309 = load %struct.tty_menu_state*, %struct.tty_menu_state** %state, align 8
  %arrayidx380 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %309, i64 %idxprom379
  %screen_behind381 = getelementptr inbounds %struct.tty_menu_state, %struct.tty_menu_state* %arrayidx380, i32 0, i32 0
  %310 = load %struct.glyph_matrix*, %struct.glyph_matrix** %screen_behind381, align 8
  call void @free_saved_screen(%struct.glyph_matrix* %310)
  br label %while.cond.375

while.end.382:                                    ; preds = %while.cond.375
  %311 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_show_cursor(%struct.tty_display_info* %311)
  %312 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output383 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %312, i32 0, i32 4
  %313 = load %struct._IO_FILE*, %struct._IO_FILE** %output383, align 8
  %call384 = call i32 @fflush(%struct._IO_FILE* %313)
  call void @discard_mouse_events()
  %call385 = call zeroext i1 @kbd_buffer_events_waiting()
  br i1 %call385, label %if.end.387, label %if.then.386

if.then.386:                                      ; preds = %while.end.382
  call void @clear_input_pending()
  br label %if.end.387

if.end.387:                                       ; preds = %if.then.386, %while.end.382
  br label %do.body.388

do.body.388:                                      ; preds = %if.end.387
  %314 = load i8, i8* %sa_must_free, align 1
  %tobool389 = trunc i8 %314 to i1
  br i1 %tobool389, label %if.then.390, label %if.end.393

if.then.390:                                      ; preds = %do.body.388
  store i8 0, i8* %sa_must_free, align 1
  %315 = load i64, i64* %sa_count, align 8
  %call391 = call i64 @builtin_lisp_symbol(i32 0)
  %call392 = call i64 @unbind_to(i64 %315, i64 %call391)
  br label %if.end.393

if.end.393:                                       ; preds = %if.then.390, %do.body.388
  br label %do.end.394

do.end.394:                                       ; preds = %if.end.393
  %316 = load i64, i64* %prev_inhibit_redisplay, align 8
  store i64 %316, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 140), align 8
  %317 = load i32, i32* %result, align 4
  ret i32 %317
}

; Function Attrs: nounwind uwtable
define internal void @tty_menu_help_callback(i8* %help_string, i32 %pane, i32 %item) #0 {
entry:
  %help_string.addr = alloca i8*, align 8
  %pane.addr = alloca i32, align 4
  %item.addr = alloca i32, align 4
  %first_item = alloca i64*, align 8
  %pane_name = alloca i64, align 8
  %menu_object = alloca i64, align 8
  store i8* %help_string, i8** %help_string.addr, align 8
  store i32 %pane, i32* %pane.addr, align 4
  store i32 %item, i32* %item.addr, align 4
  %0 = load i64, i64* @menu_items, align 8
  %call = call %struct.Lisp_Vector* @XVECTOR(i64 %0)
  %contents = getelementptr inbounds %struct.Lisp_Vector, %struct.Lisp_Vector* %call, i32 0, i32 1
  %arraydecay = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i32 0
  store i64* %arraydecay, i64** %first_item, align 8
  %1 = load i64*, i64** %first_item, align 8
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 0
  %2 = load i64, i64* %arrayidx, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp = icmp eq i64 %2, %call1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %first_item, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %3, i64 1
  %4 = load i64, i64* %arrayidx2, align 8
  store i64 %4, i64* %pane_name, align 8
  br label %if.end.9

if.else:                                          ; preds = %entry
  %5 = load i64*, i64** %first_item, align 8
  %arrayidx3 = getelementptr inbounds i64, i64* %5, i64 0
  %6 = load i64, i64* %arrayidx3, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 783)
  %cmp5 = icmp eq i64 %6, %call4
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %if.else
  %7 = load i64, i64* @empty_unibyte_string, align 8
  store i64 %7, i64* %pane_name, align 8
  br label %if.end

if.else.7:                                        ; preds = %if.else
  %8 = load i64*, i64** %first_item, align 8
  %arrayidx8 = getelementptr inbounds i64, i64* %8, i64 0
  %9 = load i64, i64* %arrayidx8, align 8
  store i64 %9, i64* %pane_name, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.7, %if.then.6
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  %call10 = call i64 @builtin_lisp_symbol(i32 657)
  %10 = load i64, i64* %pane_name, align 8
  %11 = load i32, i32* %pane.addr, align 4
  %conv = sext i32 %11 to i64
  %shl = shl i64 %conv, 2
  %add = add i64 %shl, 2
  %call11 = call i64 @list3(i64 %call10, i64 %10, i64 %add)
  store i64 %call11, i64* %menu_object, align 8
  %12 = load i8*, i8** %help_string.addr, align 8
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.9
  %13 = load i8*, i8** %help_string.addr, align 8
  %call12 = call i64 @build_string(i8* %13)
  br label %cond.end

cond.false:                                       ; preds = %if.end.9
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call12, %cond.true ], [ %call13, %cond.false ]
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %14 = load i64, i64* %menu_object, align 8
  %15 = load i32, i32* %item.addr, align 4
  %conv15 = sext i32 %15 to i64
  %shl16 = shl i64 %conv15, 2
  %add17 = add i64 %shl16, 2
  call void @show_help_echo(i64 %cond, i64 %call14, i64 %14, i64 %add17)
  ret void
}

declare i64 @Fcons(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @tty_menu_new_item_coords(%struct.frame* %f, i32 %which, i32* %x, i32* %y) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %which.addr = alloca i32, align 4
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %items = alloca i64, align 8
  %last_i = alloca i32, align 4
  %i = alloca i32, align 4
  %prev_x = alloca i32, align 4
  %pos = alloca i64, align 8
  %str = alloca i64, align 8
  %ix = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %which, i32* %which.addr, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %land.lhs.true, label %if.end.53

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 61
  %3 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp1 = icmp ne %struct.terminal* %3, null
  br i1 %cmp1, label %if.then, label %if.end.53

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 11
  %5 = load i64, i64* %menu_bar_items, align 8
  store i64 %5, i64* %items, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i32 @tty_menu_last_menubar_item(%struct.frame* %6)
  store i32 %call, i32* %last_i, align 4
  store i32 0, i32* %i, align 4
  store i32 -1, i32* %prev_x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %i, align 4
  %conv = sext i32 %7 to i64
  %8 = load i64, i64* %items, align 8
  %call2 = call i64 @ASIZE(i64 %8)
  %cmp3 = icmp slt i64 %conv, %call2
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %items, align 8
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %conv5 = sext i32 %add to i64
  %call6 = call i64 @AREF(i64 %9, i64 %conv5)
  store i64 %call6, i64* %str, align 8
  %11 = load i64, i64* %items, align 8
  %12 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %12, 3
  %conv8 = sext i32 %add7 to i64
  %call9 = call i64 @AREF(i64 %11, i64 %conv8)
  store i64 %call9, i64* %pos, align 8
  %13 = load i64, i64* %str, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %13, %call10
  br i1 %cmp11, label %if.then.13, label %if.end

if.then.13:                                       ; preds = %for.body
  br label %if.end.53

if.end:                                           ; preds = %for.body
  %14 = load i64, i64* %pos, align 8
  %shr = ashr i64 %14, 2
  %conv14 = trunc i64 %shr to i32
  store i32 %conv14, i32* %ix, align 4
  %15 = load i32, i32* %ix, align 4
  %16 = load i32*, i32** %x.addr, align 8
  %17 = load i32, i32* %16, align 4
  %cmp15 = icmp sle i32 %15, %17
  br i1 %cmp15, label %land.lhs.true.17, label %if.end.51

land.lhs.true.17:                                 ; preds = %if.end
  %18 = load i32*, i32** %x.addr, align 8
  %19 = load i32, i32* %18, align 4
  %conv18 = sext i32 %19 to i64
  %20 = load i32, i32* %ix, align 4
  %conv19 = sext i32 %20 to i64
  %21 = load i64, i64* %str, align 8
  %call20 = call i8* @SDATA(i64 %21)
  %call21 = call i64 @menu_item_width(i8* %call20)
  %add22 = add nsw i64 %conv19, %call21
  %cmp23 = icmp sle i64 %conv18, %add22
  br i1 %cmp23, label %if.then.25, label %if.end.51

if.then.25:                                       ; preds = %land.lhs.true.17
  %22 = load i32, i32* %which.addr, align 4
  %cmp26 = icmp eq i32 %22, 4
  br i1 %cmp26, label %if.then.28, label %if.else.39

if.then.28:                                       ; preds = %if.then.25
  %23 = load i32, i32* %i, align 4
  %24 = load i32, i32* %last_i, align 4
  %cmp29 = icmp slt i32 %23, %24
  br i1 %cmp29, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %if.then.28
  %25 = load i64, i64* %items, align 8
  %26 = load i32, i32* %i, align 4
  %add32 = add nsw i32 %26, 4
  %add33 = add nsw i32 %add32, 3
  %conv34 = sext i32 %add33 to i64
  %call35 = call i64 @AREF(i64 %25, i64 %conv34)
  %shr36 = ashr i64 %call35, 2
  %conv37 = trunc i64 %shr36 to i32
  %27 = load i32*, i32** %x.addr, align 8
  store i32 %conv37, i32* %27, align 4
  br label %if.end.38

if.else:                                          ; preds = %if.then.28
  %28 = load i32*, i32** %x.addr, align 8
  store i32 0, i32* %28, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %if.else, %if.then.31
  br label %if.end.50

if.else.39:                                       ; preds = %if.then.25
  %29 = load i32, i32* %prev_x, align 4
  %cmp40 = icmp slt i32 %29, 0
  br i1 %cmp40, label %if.then.42, label %if.else.48

if.then.42:                                       ; preds = %if.else.39
  %30 = load i64, i64* %items, align 8
  %31 = load i32, i32* %last_i, align 4
  %add43 = add nsw i32 %31, 3
  %conv44 = sext i32 %add43 to i64
  %call45 = call i64 @AREF(i64 %30, i64 %conv44)
  %shr46 = ashr i64 %call45, 2
  %conv47 = trunc i64 %shr46 to i32
  %32 = load i32*, i32** %x.addr, align 8
  store i32 %conv47, i32* %32, align 4
  br label %if.end.49

if.else.48:                                       ; preds = %if.else.39
  %33 = load i32, i32* %prev_x, align 4
  %34 = load i32*, i32** %x.addr, align 8
  store i32 %33, i32* %34, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.48, %if.then.42
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.end.38
  br label %if.end.53

if.end.51:                                        ; preds = %land.lhs.true.17, %if.end
  %35 = load i32, i32* %ix, align 4
  store i32 %35, i32* %prev_x, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end.51
  %36 = load i32, i32* %i, align 4
  %add52 = add nsw i32 %36, 4
  store i32 %add52, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.13, %if.end.50, %for.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noreturn
declare i64 @Ftop_level() #2

declare i64 @Fsignal(i64, i64) #1

declare i64 @unbind_to(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @create_tty_output(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %t = alloca %struct.tty_output*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %call = call noalias i8* @xzalloc(i64 8)
  %0 = bitcast i8* %call to %struct.tty_output*
  store %struct.tty_output* %0, %struct.tty_output** %t, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 61
  %2 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %4 = load %struct.tty_output*, %struct.tty_output** %t, align 8
  %display_info1 = getelementptr inbounds %struct.tty_output, %struct.tty_output* %4, i32 0, i32 0
  store %struct.tty_display_info* %3, %struct.tty_display_info** %display_info1, align 8
  %5 = load %struct.tty_output*, %struct.tty_output** %t, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 62
  %tty2 = bitcast %union.output_data* %output_data to %struct.tty_output**
  store %struct.tty_output* %5, %struct.tty_output** %tty2, align 8
  ret void
}

declare noalias i8* @xzalloc(i64) #1

; Function Attrs: nounwind uwtable
define %struct.terminal* @init_tty(i8* %name, i8* %terminal_type, i1 zeroext %must_succeed) #0 {
entry:
  %retval = alloca %struct.terminal*, align 8
  %name.addr = alloca i8*, align 8
  %terminal_type.addr = alloca i8*, align 8
  %must_succeed.addr = alloca i8, align 1
  %area = alloca i8*, align 8
  %address = alloca i8**, align 8
  %status = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  %terminal = alloca %struct.terminal*, align 8
  %oldset = alloca %struct.__sigset_t, align 8
  %ctty = alloca i8, align 1
  %flags = alloca i32, align 4
  %fd = alloca i32, align 4
  %diagnostic = alloca i8*, align 8
  %height = alloca i32, align 4
  %width = alloca i32, align 4
  %s = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %terminal_type, i8** %terminal_type.addr, align 8
  %frombool = zext i1 %must_succeed to i8
  store i8 %frombool, i8* %must_succeed.addr, align 1
  store i8** %area, i8*** %address, align 8
  store %struct.tty_display_info* null, %struct.tty_display_info** %tty, align 8
  store %struct.terminal* null, %struct.terminal** %terminal, align 8
  store i8 0, i8* %ctty, align 1
  %0 = load i8*, i8** %terminal_type.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %must_succeed.addr, align 1
  %tobool1 = trunc i8 %1 to i1
  call void (i1, %struct.terminal*, i8*, i8*, ...) @maybe_fatal(i1 zeroext %tobool1, %struct.terminal* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i32 0, i32 0)) #9
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8** %name.addr, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %3 = load i8*, i8** %name.addr, align 8
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0)) #10
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end.3
  store i8 1, i8* %ctty, align 1
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end.3
  %4 = load i8*, i8** %name.addr, align 8
  %call7 = call %struct.terminal* @get_named_terminal(i8* %4)
  store %struct.terminal* %call7, %struct.terminal** %terminal, align 8
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %tobool8 = icmp ne %struct.terminal* %5, null
  br i1 %tobool8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.6
  %6 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  store %struct.terminal* %6, %struct.terminal** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.6
  %call11 = call %struct.terminal* @create_terminal(i32 1, %struct.redisplay_interface* null)
  store %struct.terminal* %call11, %struct.terminal** %terminal, align 8
  %call12 = call noalias i8* @xzalloc(i64 8800)
  %7 = bitcast i8* %call12 to %struct.tty_display_info*
  store %struct.tty_display_info* %7, %struct.tty_display_info** %tty, align 8
  %call13 = call i64 @builtin_lisp_symbol(i32 0)
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %top_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 11
  store i64 %call13, i64* %top_frame, align 8
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** @tty_list, align 8
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %next = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 0
  store %struct.tty_display_info* %9, %struct.tty_display_info** %next, align 8
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %11, %struct.tty_display_info** @tty_list, align 8
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %13 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 12
  %tty14 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  store %struct.tty_display_info* %12, %struct.tty_display_info** %tty14, align 8
  %14 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %terminal15 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %15, i32 0, i32 9
  store %struct.terminal* %14, %struct.terminal** %terminal15, align 8
  %call16 = call noalias i8* @xmalloc(i64 200)
  %16 = bitcast i8* %call16 to %struct.cm*
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %17, i32 0, i32 10
  store %struct.cm* %16, %struct.cm** %Wcm, align 8
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @Wcm_clear(%struct.tty_display_info* %18)
  store i64 0, i64* @encode_terminal_src_size, align 8
  store i64 0, i64* @encode_terminal_dst_size, align 8
  %19 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  call void @set_tty_hooks(%struct.terminal* %19)
  %20 = load i8, i8* %ctty, align 1
  %tobool17 = trunc i8 %20 to i1
  %cond = select i1 %tobool17, i32 0, i32 0
  %or = or i32 258, %cond
  store i32 %or, i32* %flags, align 4
  %21 = load i8*, i8** %name.addr, align 8
  %22 = load i32, i32* %flags, align 4
  %call18 = call i32 @emacs_open(i8* %21, i32 %22, i32 0)
  store i32 %call18, i32* %fd, align 4
  %23 = load i32, i32* %fd, align 4
  %cmp19 = icmp slt i32 %23, 0
  br i1 %cmp19, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.10
  %24 = load i32, i32* %fd, align 4
  %call20 = call i32 @isatty(i32 %24) #3
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %cond.false, label %cond.true

cond.true:                                        ; preds = %lor.lhs.false, %if.end.10
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %25 = load i32, i32* %fd, align 4
  %call22 = call %struct._IO_FILE* @fdopen(i32 %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0)) #3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond23 = phi %struct._IO_FILE* [ null, %cond.true ], [ %call22, %cond.false ]
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %26, i32 0, i32 4
  store %struct._IO_FILE* %cond23, %struct._IO_FILE** %output, align 8
  %27 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %27, i32 0, i32 3
  store %struct._IO_FILE* %cond23, %struct._IO_FILE** %input, align 8
  %28 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input24 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %28, i32 0, i32 3
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %input24, align 8
  %tobool25 = icmp ne %struct._IO_FILE* %29, null
  br i1 %tobool25, label %if.end.31, label %if.then.26

if.then.26:                                       ; preds = %cond.end
  %30 = load i32, i32* %fd, align 4
  %cmp27 = icmp slt i32 %30, 0
  %cond28 = select i1 %cmp27, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i32 0, i32 0)
  store i8* %cond28, i8** %diagnostic, align 8
  %31 = load i32, i32* %fd, align 4
  %call29 = call i32 @emacs_close(i32 %31)
  %32 = load i8, i8* %must_succeed.addr, align 1
  %tobool30 = trunc i8 %32 to i1
  %33 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %34 = load i8*, i8** %diagnostic, align 8
  %35 = load i8*, i8** %diagnostic, align 8
  %36 = load i8*, i8** %name.addr, align 8
  call void (i1, %struct.terminal*, i8*, i8*, ...) @maybe_fatal(i1 zeroext %tobool30, %struct.terminal* %33, i8* %34, i8* %35, i8* %36) #9
  unreachable

if.end.31:                                        ; preds = %cond.end
  %37 = load i8*, i8** %name.addr, align 8
  %call32 = call noalias i8* @xstrdup(i8* %37)
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %name33 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 1
  store i8* %call32, i8** %name33, align 8
  %39 = load i8*, i8** %name.addr, align 8
  %call34 = call noalias i8* @xstrdup(i8* %39)
  %40 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %name35 = getelementptr inbounds %struct.terminal, %struct.terminal* %40, i32 0, i32 9
  store i8* %call34, i8** %name35, align 8
  %41 = load i8, i8* %ctty, align 1
  %tobool36 = trunc i8 %41 to i1
  br i1 %tobool36, label %if.end.38, label %if.then.37

if.then.37:                                       ; preds = %if.end.31
  %42 = load i32, i32* %fd, align 4
  call void @dissociate_if_controlling_tty(i32 %42)
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.37, %if.end.31
  %43 = load i8*, i8** %terminal_type.addr, align 8
  %call39 = call noalias i8* @xstrdup(i8* %43)
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %type = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %44, i32 0, i32 2
  store i8* %call39, i8** %type, align 8
  %45 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input40 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %45, i32 0, i32 3
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %input40, align 8
  %call41 = call i32 @fileno(%struct._IO_FILE* %46) #3
  call void @add_keyboard_wait_descriptor(i32 %call41)
  %47 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @Wcm_clear(%struct.tty_display_info* %47)
  call void @block_tty_out_signal(%struct.__sigset_t* %oldset)
  %48 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termcap_term_buffer = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %48, i32 0, i32 15
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %termcap_term_buffer, i32 0, i32 0
  %49 = load i8*, i8** %terminal_type.addr, align 8
  %call42 = call i32 @tgetent(i8* %arraydecay, i8* %49)
  store i32 %call42, i32* %status, align 4
  %50 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termcap_term_buffer43 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %50, i32 0, i32 15
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %termcap_term_buffer43, i32 0, i64 4095
  %51 = load i8, i8* %arrayidx, align 1
  %tobool44 = icmp ne i8 %51, 0
  br i1 %tobool44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.38
  call void @emacs_abort() #9
  unreachable

if.end.46:                                        ; preds = %if.end.38
  call void @unblock_tty_out_signal(%struct.__sigset_t* %oldset)
  %52 = load i32, i32* %status, align 4
  %cmp47 = icmp slt i32 %52, 0
  br i1 %cmp47, label %if.then.48, label %if.end.50

if.then.48:                                       ; preds = %if.end.46
  %53 = load i8, i8* %must_succeed.addr, align 1
  %tobool49 = trunc i8 %53 to i1
  %54 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  call void (i1, %struct.terminal*, i8*, i8*, ...) @maybe_fatal(i1 zeroext %tobool49, %struct.terminal* %54, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.18, i32 0, i32 0)) #9
  unreachable

if.end.50:                                        ; preds = %if.end.46
  %55 = load i32, i32* %status, align 4
  %cmp51 = icmp eq i32 %55, 0
  br i1 %cmp51, label %if.then.52, label %if.end.54

if.then.52:                                       ; preds = %if.end.50
  %56 = load i8, i8* %must_succeed.addr, align 1
  %tobool53 = trunc i8 %56 to i1
  %57 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %58 = load i8*, i8** %terminal_type.addr, align 8
  call void (i1, %struct.terminal*, i8*, i8*, ...) @maybe_fatal(i1 zeroext %tobool53, %struct.terminal* %57, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([281 x i8], [281 x i8]* @.str.20, i32 0, i32 0), i8* %58) #9
  unreachable

if.end.54:                                        ; preds = %if.end.50
  %59 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termcap_strings_buffer = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %59, i32 0, i32 16
  %arraydecay55 = getelementptr inbounds [4096 x i8], [4096 x i8]* %termcap_strings_buffer, i32 0, i32 0
  store i8* %arraydecay55, i8** %area, align 8
  %60 = load i8**, i8*** %address, align 8
  %call56 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i8** %60)
  %61 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %61, i32 0, i32 17
  store i8* %call56, i8** %TS_ins_line, align 8
  %62 = load i8**, i8*** %address, align 8
  %call57 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i8** %62)
  %63 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_lines = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %63, i32 0, i32 18
  store i8* %call57, i8** %TS_ins_multi_lines, align 8
  %64 = load i8**, i8*** %address, align 8
  %call58 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i8** %64)
  %65 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_bell = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %65, i32 0, i32 19
  store i8* %call58, i8** %TS_bell, align 8
  %66 = load i8**, i8*** %address, align 8
  %call59 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i8** %66)
  %67 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm60 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %67, i32 0, i32 10
  %68 = load %struct.cm*, %struct.cm** %Wcm60, align 8
  %cm_backtab = getelementptr inbounds %struct.cm, %struct.cm* %68, i32 0, i32 10
  store i8* %call59, i8** %cm_backtab, align 8
  %69 = load i8**, i8*** %address, align 8
  %call61 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8** %69)
  %70 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_to_bottom = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %70, i32 0, i32 20
  store i8* %call61, i8** %TS_clr_to_bottom, align 8
  %71 = load i8**, i8*** %address, align 8
  %call62 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i8** %71)
  %72 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %72, i32 0, i32 21
  store i8* %call62, i8** %TS_clr_line, align 8
  %73 = load i8**, i8*** %address, align 8
  %call63 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i8** %73)
  %74 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %74, i32 0, i32 22
  store i8* %call63, i8** %TS_clr_frame, align 8
  %75 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm64 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %75, i32 0, i32 10
  %76 = load %struct.cm*, %struct.cm** %Wcm64, align 8
  %cm_habs = getelementptr inbounds %struct.cm, %struct.cm* %76, i32 0, i32 12
  store i8* null, i8** %cm_habs, align 8
  %77 = load i8**, i8*** %address, align 8
  %call65 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i8** %77)
  %78 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm66 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %78, i32 0, i32 10
  %79 = load %struct.cm*, %struct.cm** %Wcm66, align 8
  %cm_abs = getelementptr inbounds %struct.cm, %struct.cm* %79, i32 0, i32 11
  store i8* %call65, i8** %cm_abs, align 8
  %80 = load i8**, i8*** %address, align 8
  %call67 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i8** %80)
  %81 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm68 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %81, i32 0, i32 10
  %82 = load %struct.cm*, %struct.cm** %Wcm68, align 8
  %cm_cr = getelementptr inbounds %struct.cm, %struct.cm* %82, i32 0, i32 7
  store i8* %call67, i8** %cm_cr, align 8
  %83 = load i8**, i8*** %address, align 8
  %call69 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i8** %83)
  %84 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %84, i32 0, i32 23
  store i8* %call69, i8** %TS_set_scroll_region, align 8
  %85 = load i8**, i8*** %address, align 8
  %call70 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i8** %85)
  %86 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region_1 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %86, i32 0, i32 24
  store i8* %call70, i8** %TS_set_scroll_region_1, align 8
  %87 = load i8**, i8*** %address, align 8
  %call71 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i8** %87)
  %88 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm72 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %88, i32 0, i32 10
  %89 = load %struct.cm*, %struct.cm** %Wcm72, align 8
  %cm_vabs = getelementptr inbounds %struct.cm, %struct.cm* %89, i32 0, i32 13
  store i8* %call71, i8** %cm_vabs, align 8
  %90 = load i8**, i8*** %address, align 8
  %call73 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i8** %90)
  %91 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %91, i32 0, i32 25
  store i8* %call73, i8** %TS_del_char, align 8
  %92 = load i8**, i8*** %address, align 8
  %call74 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i8** %92)
  %93 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_chars = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %93, i32 0, i32 26
  store i8* %call74, i8** %TS_del_multi_chars, align 8
  %94 = load i8**, i8*** %address, align 8
  %call75 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8** %94)
  %95 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %95, i32 0, i32 27
  store i8* %call75, i8** %TS_del_line, align 8
  %96 = load i8**, i8*** %address, align 8
  %call76 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i8** %96)
  %97 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_lines = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %97, i32 0, i32 28
  store i8* %call76, i8** %TS_del_multi_lines, align 8
  %98 = load i8**, i8*** %address, align 8
  %call77 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i8** %98)
  %99 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_delete_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %99, i32 0, i32 29
  store i8* %call77, i8** %TS_delete_mode, align 8
  %100 = load i8**, i8*** %address, align 8
  %call78 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i8** %100)
  %101 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_delete_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %101, i32 0, i32 30
  store i8* %call78, i8** %TS_end_delete_mode, align 8
  %102 = load i8**, i8*** %address, align 8
  %call79 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i8** %102)
  %103 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %103, i32 0, i32 31
  store i8* %call79, i8** %TS_end_insert_mode, align 8
  %104 = load i8**, i8*** %address, align 8
  %call80 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i8** %104)
  %105 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm81 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %105, i32 0, i32 10
  %106 = load %struct.cm*, %struct.cm** %Wcm81, align 8
  %cm_home = getelementptr inbounds %struct.cm, %struct.cm* %106, i32 0, i32 6
  store i8* %call80, i8** %cm_home, align 8
  %107 = load i8**, i8*** %address, align 8
  %call82 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i8** %107)
  %108 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %108, i32 0, i32 32
  store i8* %call82, i8** %TS_ins_char, align 8
  %109 = load i8**, i8*** %address, align 8
  %call83 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i8** %109)
  %110 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_chars = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %110, i32 0, i32 33
  store i8* %call83, i8** %TS_ins_multi_chars, align 8
  %111 = load i8**, i8*** %address, align 8
  %call84 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i8** %111)
  %112 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %112, i32 0, i32 34
  store i8* %call84, i8** %TS_insert_mode, align 8
  %113 = load i8**, i8*** %address, align 8
  %call85 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i8** %113)
  %114 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_inserted_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %114, i32 0, i32 35
  store i8* %call85, i8** %TS_pad_inserted_char, align 8
  %115 = load i8**, i8*** %address, align 8
  %call86 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i8** %115)
  %116 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_keypad_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %116, i32 0, i32 36
  store i8* %call86, i8** %TS_end_keypad_mode, align 8
  %117 = load i8**, i8*** %address, align 8
  %call87 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i8** %117)
  %118 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_keypad_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %118, i32 0, i32 37
  store i8* %call87, i8** %TS_keypad_mode, align 8
  %119 = load i8**, i8*** %address, align 8
  %call88 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i8** %119)
  %120 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm89 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %120, i32 0, i32 10
  %121 = load %struct.cm*, %struct.cm** %Wcm89, align 8
  %cm_ll = getelementptr inbounds %struct.cm, %struct.cm* %121, i32 0, i32 8
  store i8* %call88, i8** %cm_ll, align 8
  %122 = load i8**, i8*** %address, align 8
  %call90 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i8** %122)
  %123 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm91 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %123, i32 0, i32 10
  %124 = load %struct.cm*, %struct.cm** %Wcm91, align 8
  %cm_right = getelementptr inbounds %struct.cm, %struct.cm* %124, i32 0, i32 5
  store i8* %call90, i8** %cm_right, align 8
  %125 = load i8**, i8*** %address, align 8
  %call92 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i8** %125)
  %126 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm93 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %126, i32 0, i32 10
  %127 = load %struct.cm*, %struct.cm** %Wcm93, align 8
  %cm_down = getelementptr inbounds %struct.cm, %struct.cm* %127, i32 0, i32 3
  store i8* %call92, i8** %cm_down, align 8
  %128 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm94 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %128, i32 0, i32 10
  %129 = load %struct.cm*, %struct.cm** %Wcm94, align 8
  %cm_down95 = getelementptr inbounds %struct.cm, %struct.cm* %129, i32 0, i32 3
  %130 = load i8*, i8** %cm_down95, align 8
  %tobool96 = icmp ne i8* %130, null
  br i1 %tobool96, label %if.end.101, label %if.then.97

if.then.97:                                       ; preds = %if.end.54
  %131 = load i8**, i8*** %address, align 8
  %call98 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i8** %131)
  %132 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm99 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %132, i32 0, i32 10
  %133 = load %struct.cm*, %struct.cm** %Wcm99, align 8
  %cm_down100 = getelementptr inbounds %struct.cm, %struct.cm* %133, i32 0, i32 3
  store i8* %call98, i8** %cm_down100, align 8
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.97, %if.end.54
  %call102 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0))
  %tobool103 = icmp ne i32 %call102, 0
  br i1 %tobool103, label %if.then.104, label %if.else

if.then.104:                                      ; preds = %if.end.101
  %134 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm105 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %134, i32 0, i32 10
  %135 = load %struct.cm*, %struct.cm** %Wcm105, align 8
  %cm_left = getelementptr inbounds %struct.cm, %struct.cm* %135, i32 0, i32 4
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), i8** %cm_left, align 8
  br label %if.end.109

if.else:                                          ; preds = %if.end.101
  %136 = load i8**, i8*** %address, align 8
  %call106 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i8** %136)
  %137 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm107 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %137, i32 0, i32 10
  %138 = load %struct.cm*, %struct.cm** %Wcm107, align 8
  %cm_left108 = getelementptr inbounds %struct.cm, %struct.cm* %138, i32 0, i32 4
  store i8* %call106, i8** %cm_left108, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.else, %if.then.104
  %139 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm110 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %139, i32 0, i32 10
  %140 = load %struct.cm*, %struct.cm** %Wcm110, align 8
  %cm_left111 = getelementptr inbounds %struct.cm, %struct.cm* %140, i32 0, i32 4
  %141 = load i8*, i8** %cm_left111, align 8
  %tobool112 = icmp ne i8* %141, null
  br i1 %tobool112, label %if.end.117, label %if.then.113

if.then.113:                                      ; preds = %if.end.109
  %142 = load i8**, i8*** %address, align 8
  %call114 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i8** %142)
  %143 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm115 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %143, i32 0, i32 10
  %144 = load %struct.cm*, %struct.cm** %Wcm115, align 8
  %cm_left116 = getelementptr inbounds %struct.cm, %struct.cm* %144, i32 0, i32 4
  store i8* %call114, i8** %cm_left116, align 8
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.113, %if.end.109
  %145 = load i8**, i8*** %address, align 8
  %call118 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i8** %145)
  %146 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %146, i32 0, i32 38
  store i8* %call118, i8** %TS_pad_char, align 8
  %147 = load i8**, i8*** %address, align 8
  %call119 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i8** %147)
  %148 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_repeat = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %148, i32 0, i32 39
  store i8* %call119, i8** %TS_repeat, align 8
  %149 = load i8**, i8*** %address, align 8
  %call120 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i8** %149)
  %150 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %150, i32 0, i32 40
  store i8* %call120, i8** %TS_end_standout_mode, align 8
  %151 = load i8**, i8*** %address, align 8
  %call121 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i8** %151)
  %152 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_fwd_scroll = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %152, i32 0, i32 41
  store i8* %call121, i8** %TS_fwd_scroll, align 8
  %153 = load i8**, i8*** %address, align 8
  %call122 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i8** %153)
  %154 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %154, i32 0, i32 42
  store i8* %call122, i8** %TS_standout_mode, align 8
  %155 = load i8**, i8*** %address, align 8
  %call123 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i8** %155)
  %156 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_rev_scroll = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %156, i32 0, i32 43
  store i8* %call123, i8** %TS_rev_scroll, align 8
  %157 = load i8**, i8*** %address, align 8
  %call124 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i8** %157)
  %158 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm125 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %158, i32 0, i32 10
  %159 = load %struct.cm*, %struct.cm** %Wcm125, align 8
  %cm_tab = getelementptr inbounds %struct.cm, %struct.cm* %159, i32 0, i32 9
  store i8* %call124, i8** %cm_tab, align 8
  %160 = load i8**, i8*** %address, align 8
  %call126 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i8** %160)
  %161 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_termcap_modes = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %161, i32 0, i32 44
  store i8* %call126, i8** %TS_end_termcap_modes, align 8
  %162 = load i8**, i8*** %address, align 8
  %call127 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i8** %162)
  %163 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_termcap_modes = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %163, i32 0, i32 45
  store i8* %call127, i8** %TS_termcap_modes, align 8
  %164 = load i8**, i8*** %address, align 8
  %call128 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0), i8** %164)
  %165 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm129 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %165, i32 0, i32 10
  %166 = load %struct.cm*, %struct.cm** %Wcm129, align 8
  %cm_up = getelementptr inbounds %struct.cm, %struct.cm* %166, i32 0, i32 2
  store i8* %call128, i8** %cm_up, align 8
  %167 = load i8**, i8*** %address, align 8
  %call130 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.65, i32 0, i32 0), i8** %167)
  %168 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_visible_bell = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %168, i32 0, i32 46
  store i8* %call130, i8** %TS_visible_bell, align 8
  %169 = load i8**, i8*** %address, align 8
  %call131 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0), i8** %169)
  %170 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_normal = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %170, i32 0, i32 47
  store i8* %call131, i8** %TS_cursor_normal, align 8
  %171 = load i8**, i8*** %address, align 8
  %call132 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.67, i32 0, i32 0), i8** %171)
  %172 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_visible = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %172, i32 0, i32 48
  store i8* %call132, i8** %TS_cursor_visible, align 8
  %173 = load i8**, i8*** %address, align 8
  %call133 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.68, i32 0, i32 0), i8** %173)
  %174 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_invisible = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %174, i32 0, i32 49
  store i8* %call133, i8** %TS_cursor_invisible, align 8
  %175 = load i8**, i8*** %address, align 8
  %call134 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i32 0, i32 0), i8** %175)
  %176 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_window = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %176, i32 0, i32 50
  store i8* %call134, i8** %TS_set_window, align 8
  %177 = load i8**, i8*** %address, align 8
  %call135 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8** %177)
  %178 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_underline_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %178, i32 0, i32 56
  store i8* %call135, i8** %TS_enter_underline_mode, align 8
  %179 = load i8**, i8*** %address, align 8
  %call136 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i32 0, i32 0), i8** %179)
  %180 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_underline_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %180, i32 0, i32 55
  store i8* %call136, i8** %TS_exit_underline_mode, align 8
  %181 = load i8**, i8*** %address, align 8
  %call137 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.72, i32 0, i32 0), i8** %181)
  %182 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_bold_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %182, i32 0, i32 51
  store i8* %call137, i8** %TS_enter_bold_mode, align 8
  %183 = load i8**, i8*** %address, align 8
  %call138 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.73, i32 0, i32 0), i8** %183)
  %184 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_italic_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %184, i32 0, i32 52
  store i8* %call138, i8** %TS_enter_italic_mode, align 8
  %185 = load i8**, i8*** %address, align 8
  %call139 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.74, i32 0, i32 0), i8** %185)
  %186 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_dim_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %186, i32 0, i32 53
  store i8* %call139, i8** %TS_enter_dim_mode, align 8
  %187 = load i8**, i8*** %address, align 8
  %call140 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i32 0, i32 0), i8** %187)
  %188 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_reverse_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %188, i32 0, i32 54
  store i8* %call140, i8** %TS_enter_reverse_mode, align 8
  %189 = load i8**, i8*** %address, align 8
  %call141 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0), i8** %189)
  %190 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_alt_charset_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %190, i32 0, i32 57
  store i8* %call141, i8** %TS_enter_alt_charset_mode, align 8
  %191 = load i8**, i8*** %address, align 8
  %call142 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.77, i32 0, i32 0), i8** %191)
  %192 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_alt_charset_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %192, i32 0, i32 58
  store i8* %call142, i8** %TS_exit_alt_charset_mode, align 8
  %193 = load i8**, i8*** %address, align 8
  %call143 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.78, i32 0, i32 0), i8** %193)
  %194 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_attribute_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %194, i32 0, i32 59
  store i8* %call143, i8** %TS_exit_attribute_mode, align 8
  %195 = load i8**, i8*** %address, align 8
  %call144 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i32 0, i32 0), i8** %195)
  %196 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm145 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %196, i32 0, i32 10
  %197 = load %struct.cm*, %struct.cm** %Wcm145, align 8
  %cm_multiup = getelementptr inbounds %struct.cm, %struct.cm* %197, i32 0, i32 14
  store i8* %call144, i8** %cm_multiup, align 8
  %198 = load i8**, i8*** %address, align 8
  %call146 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i32 0, i32 0), i8** %198)
  %199 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm147 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %199, i32 0, i32 10
  %200 = load %struct.cm*, %struct.cm** %Wcm147, align 8
  %cm_multidown = getelementptr inbounds %struct.cm, %struct.cm* %200, i32 0, i32 15
  store i8* %call146, i8** %cm_multidown, align 8
  %201 = load i8**, i8*** %address, align 8
  %call148 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8** %201)
  %202 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm149 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %202, i32 0, i32 10
  %203 = load %struct.cm*, %struct.cm** %Wcm149, align 8
  %cm_multileft = getelementptr inbounds %struct.cm, %struct.cm* %203, i32 0, i32 16
  store i8* %call148, i8** %cm_multileft, align 8
  %204 = load i8**, i8*** %address, align 8
  %call150 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.82, i32 0, i32 0), i8** %204)
  %205 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm151 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %205, i32 0, i32 10
  %206 = load %struct.cm*, %struct.cm** %Wcm151, align 8
  %cm_multiright = getelementptr inbounds %struct.cm, %struct.cm* %206, i32 0, i32 17
  store i8* %call150, i8** %cm_multiright, align 8
  %207 = load i8**, i8*** %address, align 8
  %call152 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.83, i32 0, i32 0), i8** %207)
  %208 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_orig_pair = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %208, i32 0, i32 63
  store i8* %call152, i8** %TS_orig_pair, align 8
  %209 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_orig_pair153 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %209, i32 0, i32 63
  %210 = load i8*, i8** %TS_orig_pair153, align 8
  %tobool154 = icmp ne i8* %210, null
  br i1 %tobool154, label %if.then.155, label %if.end.174

if.then.155:                                      ; preds = %if.end.117
  %211 = load i8**, i8*** %address, align 8
  %call156 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.84, i32 0, i32 0), i8** %211)
  %212 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_foreground = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %212, i32 0, i32 64
  store i8* %call156, i8** %TS_set_foreground, align 8
  %213 = load i8**, i8*** %address, align 8
  %call157 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.85, i32 0, i32 0), i8** %213)
  %214 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_background = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %214, i32 0, i32 65
  store i8* %call157, i8** %TS_set_background, align 8
  %215 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_foreground158 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %215, i32 0, i32 64
  %216 = load i8*, i8** %TS_set_foreground158, align 8
  %tobool159 = icmp ne i8* %216, null
  br i1 %tobool159, label %if.end.165, label %if.then.160

if.then.160:                                      ; preds = %if.then.155
  %217 = load i8**, i8*** %address, align 8
  %call161 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i32 0, i32 0), i8** %217)
  %218 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_foreground162 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %218, i32 0, i32 64
  store i8* %call161, i8** %TS_set_foreground162, align 8
  %219 = load i8**, i8*** %address, align 8
  %call163 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.87, i32 0, i32 0), i8** %219)
  %220 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_background164 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %220, i32 0, i32 65
  store i8* %call163, i8** %TS_set_background164, align 8
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.160, %if.then.155
  %call166 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.88, i32 0, i32 0))
  %221 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %221, i32 0, i32 61
  store i32 %call166, i32* %TN_max_colors, align 4
  %call167 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.89, i32 0, i32 0))
  %222 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_pairs = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %222, i32 0, i32 62
  store i32 %call167, i32* %TN_max_pairs, align 4
  %call168 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i32 0, i32 0))
  %223 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_no_color_video = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %223, i32 0, i32 60
  store i32 %call168, i32* %TN_no_color_video, align 4
  %224 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_no_color_video169 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %224, i32 0, i32 60
  %225 = load i32, i32* %TN_no_color_video169, align 4
  %cmp170 = icmp eq i32 %225, -1
  br i1 %cmp170, label %if.then.171, label %if.end.173

if.then.171:                                      ; preds = %if.end.165
  %226 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_no_color_video172 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %226, i32 0, i32 60
  store i32 0, i32* %TN_no_color_video172, align 4
  br label %if.end.173

if.end.173:                                       ; preds = %if.then.171, %if.end.165
  br label %if.end.174

if.end.174:                                       ; preds = %if.end.173, %if.end.117
  %227 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_default_color_capabilities(%struct.tty_display_info* %227, i1 zeroext true)
  %call175 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.91, i32 0, i32 0))
  %tobool176 = icmp ne i32 %call175, 0
  %228 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm177 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %228, i32 0, i32 10
  %229 = load %struct.cm*, %struct.cm** %Wcm177, align 8
  %cm_magicwrap = getelementptr inbounds %struct.cm, %struct.cm* %229, i32 0, i32 21
  %230 = zext i1 %tobool176 to i8
  %bf.load = load i8, i8* %cm_magicwrap, align 4
  %bf.shl = shl i8 %230, 1
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, %bf.shl
  store i8 %bf.set, i8* %cm_magicwrap, align 4
  %tobool178 = trunc i8 %230 to i1
  %231 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm179 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %231, i32 0, i32 10
  %232 = load %struct.cm*, %struct.cm** %Wcm179, align 8
  %cm_magicwrap180 = getelementptr inbounds %struct.cm, %struct.cm* %232, i32 0, i32 21
  %bf.load181 = load i8, i8* %cm_magicwrap180, align 4
  %bf.lshr = lshr i8 %bf.load181, 1
  %bf.clear182 = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear182 to i1
  br i1 %bf.cast, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.174
  %call183 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.92, i32 0, i32 0))
  %tobool184 = icmp ne i32 %call183, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.174
  %233 = phi i1 [ true, %if.end.174 ], [ %tobool184, %lor.rhs ]
  %234 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm185 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %234, i32 0, i32 10
  %235 = load %struct.cm*, %struct.cm** %Wcm185, align 8
  %cm_autowrap = getelementptr inbounds %struct.cm, %struct.cm* %235, i32 0, i32 21
  %236 = zext i1 %233 to i8
  %bf.load186 = load i8, i8* %cm_autowrap, align 4
  %bf.clear187 = and i8 %bf.load186, -2
  %bf.set188 = or i8 %bf.clear187, %236
  store i8 %bf.set188, i8* %cm_autowrap, align 4
  %tobool189 = trunc i8 %236 to i1
  %call190 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.93, i32 0, i32 0))
  %tobool191 = icmp ne i32 %call190, 0
  %237 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %memory_below_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %237, i32 0, i32 75
  %238 = zext i1 %tobool191 to i8
  %bf.load192 = load i8, i8* %memory_below_frame, align 4
  %bf.shl193 = shl i8 %238, 7
  %bf.clear194 = and i8 %bf.load192, 127
  %bf.set195 = or i8 %bf.clear194, %bf.shl193
  store i8 %bf.set195, i8* %memory_below_frame, align 4
  %tobool196 = trunc i8 %238 to i1
  %call197 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.94, i32 0, i32 0))
  %239 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_hazeltine = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %239, i32 0, i32 66
  store i32 %call197, i32* %TF_hazeltine, align 4
  %call198 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i32 0, i32 0))
  %tobool199 = icmp ne i32 %call198, 0
  %240 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %must_write_spaces = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %240, i32 0, i32 75
  %241 = zext i1 %tobool199 to i8
  %bf.load200 = load i8, i8* %must_write_spaces, align 4
  %bf.shl201 = shl i8 %241, 3
  %bf.clear202 = and i8 %bf.load200, -9
  %bf.set203 = or i8 %bf.clear202, %bf.shl201
  store i8 %bf.set203, i8* %must_write_spaces, align 4
  %tobool204 = trunc i8 %241 to i1
  %call205 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.96, i32 0, i32 0))
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %lor.end.210, label %lor.rhs.207

lor.rhs.207:                                      ; preds = %lor.end
  %call208 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.97, i32 0, i32 0))
  %tobool209 = icmp ne i32 %call208, 0
  br label %lor.end.210

lor.end.210:                                      ; preds = %lor.rhs.207, %lor.end
  %242 = phi i1 [ true, %lor.end ], [ %tobool209, %lor.rhs.207 ]
  %lor.ext = zext i1 %242 to i32
  %243 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %meta_key = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %243, i32 0, i32 73
  store i32 %lor.ext, i32* %meta_key, align 4
  %call211 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98, i32 0, i32 0))
  %244 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_insmode_motion = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %244, i32 0, i32 67
  store i32 %call211, i32* %TF_insmode_motion, align 4
  %call212 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.99, i32 0, i32 0))
  %245 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_standout_motion = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %245, i32 0, i32 68
  store i32 %call212, i32* %TF_standout_motion, align 4
  %call213 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.100, i32 0, i32 0))
  %246 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_underscore = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %246, i32 0, i32 69
  store i32 %call213, i32* %TF_underscore, align 4
  %call214 = call i32 @tgetflag(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.101, i32 0, i32 0))
  %247 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_teleray = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %247, i32 0, i32 70
  store i32 %call214, i32* %TF_teleray, align 4
  %call215 = call i64 @builtin_lisp_symbol(i32 0)
  %call216 = call %struct.kboard* @allocate_kboard(i64 %call215)
  %248 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard = getelementptr inbounds %struct.terminal, %struct.terminal* %248, i32 0, i32 10
  store %struct.kboard* %call216, %struct.kboard** %kboard, align 8
  %249 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard217 = getelementptr inbounds %struct.terminal, %struct.terminal* %249, i32 0, i32 10
  %250 = load %struct.kboard*, %struct.kboard** %kboard217, align 8
  %reference_count = getelementptr inbounds %struct.kboard, %struct.kboard* %250, i32 0, i32 21
  %251 = load i32, i32* %reference_count, align 4
  %inc = add nsw i32 %251, 1
  store i32 %inc, i32* %reference_count, align 4
  %252 = load %struct.kboard*, %struct.kboard** @current_kboard, align 8
  %253 = load %struct.kboard*, %struct.kboard** @initial_kboard, align 8
  %cmp218 = icmp eq %struct.kboard* %252, %253
  br i1 %cmp218, label %if.then.219, label %if.end.221

if.then.219:                                      ; preds = %lor.end.210
  %254 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard220 = getelementptr inbounds %struct.terminal, %struct.terminal* %254, i32 0, i32 10
  %255 = load %struct.kboard*, %struct.kboard** %kboard220, align 8
  store %struct.kboard* %255, %struct.kboard** @current_kboard, align 8
  br label %if.end.221

if.end.221:                                       ; preds = %if.then.219, %lor.end.210
  %256 = load i8**, i8*** %address, align 8
  %257 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %kboard222 = getelementptr inbounds %struct.terminal, %struct.terminal* %257, i32 0, i32 10
  %258 = load %struct.kboard*, %struct.kboard** %kboard222, align 8
  call void @term_get_fkeys(i8** %256, %struct.kboard* %258)
  %259 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input223 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %259, i32 0, i32 3
  %260 = load %struct._IO_FILE*, %struct._IO_FILE** %input223, align 8
  %call224 = call i32 @fileno(%struct._IO_FILE* %260) #3
  call void @get_tty_size(i32 %call224, i32* %width, i32* %height)
  %261 = load i32, i32* %width, align 4
  %262 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm225 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %262, i32 0, i32 10
  %263 = load %struct.cm*, %struct.cm** %Wcm225, align 8
  %cm_cols = getelementptr inbounds %struct.cm, %struct.cm* %263, i32 0, i32 18
  store i32 %261, i32* %cm_cols, align 4
  %264 = load i32, i32* %height, align 4
  %265 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm226 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %265, i32 0, i32 10
  %266 = load %struct.cm*, %struct.cm** %Wcm226, align 8
  %cm_rows = getelementptr inbounds %struct.cm, %struct.cm* %266, i32 0, i32 19
  store i32 %264, i32* %cm_rows, align 4
  %267 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm227 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %267, i32 0, i32 10
  %268 = load %struct.cm*, %struct.cm** %Wcm227, align 8
  %cm_cols228 = getelementptr inbounds %struct.cm, %struct.cm* %268, i32 0, i32 18
  %269 = load i32, i32* %cm_cols228, align 4
  %cmp229 = icmp sle i32 %269, 0
  br i1 %cmp229, label %if.then.230, label %if.end.234

if.then.230:                                      ; preds = %if.end.221
  %call231 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i32 0, i32 0))
  %270 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm232 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %270, i32 0, i32 10
  %271 = load %struct.cm*, %struct.cm** %Wcm232, align 8
  %cm_cols233 = getelementptr inbounds %struct.cm, %struct.cm* %271, i32 0, i32 18
  store i32 %call231, i32* %cm_cols233, align 4
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.230, %if.end.221
  %272 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm235 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %272, i32 0, i32 10
  %273 = load %struct.cm*, %struct.cm** %Wcm235, align 8
  %cm_rows236 = getelementptr inbounds %struct.cm, %struct.cm* %273, i32 0, i32 19
  %274 = load i32, i32* %cm_rows236, align 4
  %cmp237 = icmp sle i32 %274, 0
  br i1 %cmp237, label %if.then.238, label %if.end.242

if.then.238:                                      ; preds = %if.end.234
  %call239 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.103, i32 0, i32 0))
  %275 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm240 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %275, i32 0, i32 10
  %276 = load %struct.cm*, %struct.cm** %Wcm240, align 8
  %cm_rows241 = getelementptr inbounds %struct.cm, %struct.cm* %276, i32 0, i32 19
  store i32 %call239, i32* %cm_rows241, align 4
  br label %if.end.242

if.end.242:                                       ; preds = %if.then.238, %if.end.234
  %277 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm243 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %277, i32 0, i32 10
  %278 = load %struct.cm*, %struct.cm** %Wcm243, align 8
  %cm_rows244 = getelementptr inbounds %struct.cm, %struct.cm* %278, i32 0, i32 19
  %279 = load i32, i32* %cm_rows244, align 4
  %cmp245 = icmp slt i32 %279, 3
  br i1 %cmp245, label %if.then.250, label %lor.lhs.false.246

lor.lhs.false.246:                                ; preds = %if.end.242
  %280 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm247 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %280, i32 0, i32 10
  %281 = load %struct.cm*, %struct.cm** %Wcm247, align 8
  %cm_cols248 = getelementptr inbounds %struct.cm, %struct.cm* %281, i32 0, i32 18
  %282 = load i32, i32* %cm_cols248, align 4
  %cmp249 = icmp slt i32 %282, 3
  br i1 %cmp249, label %if.then.250, label %if.end.256

if.then.250:                                      ; preds = %lor.lhs.false.246, %if.end.242
  %283 = load i8, i8* %must_succeed.addr, align 1
  %tobool251 = trunc i8 %283 to i1
  %284 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %285 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm252 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %285, i32 0, i32 10
  %286 = load %struct.cm*, %struct.cm** %Wcm252, align 8
  %cm_cols253 = getelementptr inbounds %struct.cm, %struct.cm* %286, i32 0, i32 18
  %287 = load i32, i32* %cm_cols253, align 4
  %288 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm254 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %288, i32 0, i32 10
  %289 = load %struct.cm*, %struct.cm** %Wcm254, align 8
  %cm_rows255 = getelementptr inbounds %struct.cm, %struct.cm* %289, i32 0, i32 19
  %290 = load i32, i32* %cm_rows255, align 4
  call void (i1, %struct.terminal*, i8*, i8*, ...) @maybe_fatal(i1 zeroext %tobool251, %struct.terminal* %284, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.104, i32 0, i32 0), i32 %287, i32 %290) #9
  unreachable

if.end.256:                                       ; preds = %lor.lhs.false.246
  %call257 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0))
  %291 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm258 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %291, i32 0, i32 10
  %292 = load %struct.cm*, %struct.cm** %Wcm258, align 8
  %cm_tabwidth = getelementptr inbounds %struct.cm, %struct.cm* %292, i32 0, i32 20
  store i32 %call257, i32* %cm_tabwidth, align 4
  %293 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_bell259 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %293, i32 0, i32 19
  %294 = load i8*, i8** %TS_bell259, align 8
  %tobool260 = icmp ne i8* %294, null
  br i1 %tobool260, label %if.end.263, label %if.then.261

if.then.261:                                      ; preds = %if.end.256
  %295 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_bell262 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %295, i32 0, i32 19
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.106, i32 0, i32 0), i8** %TS_bell262, align 8
  br label %if.end.263

if.end.263:                                       ; preds = %if.then.261, %if.end.256
  %296 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_fwd_scroll264 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %296, i32 0, i32 41
  %297 = load i8*, i8** %TS_fwd_scroll264, align 8
  %tobool265 = icmp ne i8* %297, null
  br i1 %tobool265, label %if.end.270, label %if.then.266

if.then.266:                                      ; preds = %if.end.263
  %298 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm267 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %298, i32 0, i32 10
  %299 = load %struct.cm*, %struct.cm** %Wcm267, align 8
  %cm_down268 = getelementptr inbounds %struct.cm, %struct.cm* %299, i32 0, i32 3
  %300 = load i8*, i8** %cm_down268, align 8
  %301 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_fwd_scroll269 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %301, i32 0, i32 41
  store i8* %300, i8** %TS_fwd_scroll269, align 8
  br label %if.end.270

if.end.270:                                       ; preds = %if.then.266, %if.end.263
  %302 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_char271 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %302, i32 0, i32 38
  %303 = load i8*, i8** %TS_pad_char271, align 8
  %tobool272 = icmp ne i8* %303, null
  br i1 %tobool272, label %cond.true.273, label %cond.false.275

cond.true.273:                                    ; preds = %if.end.270
  %304 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_char274 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %304, i32 0, i32 38
  %305 = load i8*, i8** %TS_pad_char274, align 8
  %306 = load i8, i8* %305, align 1
  %conv = sext i8 %306 to i32
  br label %cond.end.276

cond.false.275:                                   ; preds = %if.end.270
  br label %cond.end.276

cond.end.276:                                     ; preds = %cond.false.275, %cond.true.273
  %cond277 = phi i32 [ %conv, %cond.true.273 ], [ 0, %cond.false.275 ]
  %conv278 = trunc i32 %cond277 to i8
  store i8 %conv278, i8* @PC, align 1
  %307 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm279 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %307, i32 0, i32 10
  %308 = load %struct.cm*, %struct.cm** %Wcm279, align 8
  %cm_tabwidth280 = getelementptr inbounds %struct.cm, %struct.cm* %308, i32 0, i32 20
  %309 = load i32, i32* %cm_tabwidth280, align 4
  %cmp281 = icmp slt i32 %309, 0
  br i1 %cmp281, label %if.then.283, label %if.end.286

if.then.283:                                      ; preds = %cond.end.276
  %310 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm284 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %310, i32 0, i32 10
  %311 = load %struct.cm*, %struct.cm** %Wcm284, align 8
  %cm_tabwidth285 = getelementptr inbounds %struct.cm, %struct.cm* %311, i32 0, i32 20
  store i32 8, i32* %cm_tabwidth285, align 4
  br label %if.end.286

if.end.286:                                       ; preds = %if.then.283, %cond.end.276
  %312 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_standout_mode287 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %312, i32 0, i32 42
  %313 = load i8*, i8** %TS_standout_mode287, align 8
  %tobool288 = icmp ne i8* %313, null
  br i1 %tobool288, label %land.lhs.true, label %if.end.295

land.lhs.true:                                    ; preds = %if.end.286
  %call289 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.107, i32 0, i32 0))
  %cmp290 = icmp sge i32 %call289, 0
  br i1 %cmp290, label %if.then.292, label %if.end.295

if.then.292:                                      ; preds = %land.lhs.true
  %314 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_standout_mode293 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %314, i32 0, i32 42
  store i8* null, i8** %TS_standout_mode293, align 8
  %315 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_standout_mode294 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %315, i32 0, i32 40
  store i8* null, i8** %TS_end_standout_mode294, align 8
  br label %if.end.295

if.end.295:                                       ; preds = %if.then.292, %land.lhs.true, %if.end.286
  %316 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_underline_mode296 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %316, i32 0, i32 56
  %317 = load i8*, i8** %TS_enter_underline_mode296, align 8
  %tobool297 = icmp ne i8* %317, null
  br i1 %tobool297, label %land.lhs.true.298, label %if.end.305

land.lhs.true.298:                                ; preds = %if.end.295
  %call299 = call i32 @tgetnum(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.108, i32 0, i32 0))
  %cmp300 = icmp sge i32 %call299, 0
  br i1 %cmp300, label %if.then.302, label %if.end.305

if.then.302:                                      ; preds = %land.lhs.true.298
  %318 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_underline_mode303 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %318, i32 0, i32 56
  store i8* null, i8** %TS_enter_underline_mode303, align 8
  %319 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_underline_mode304 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %319, i32 0, i32 55
  store i8* null, i8** %TS_exit_underline_mode304, align 8
  br label %if.end.305

if.end.305:                                       ; preds = %if.then.302, %land.lhs.true.298, %if.end.295
  %320 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_standout_mode306 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %320, i32 0, i32 42
  %321 = load i8*, i8** %TS_standout_mode306, align 8
  %cmp307 = icmp eq i8* %321, null
  br i1 %cmp307, label %if.then.309, label %if.end.314

if.then.309:                                      ; preds = %if.end.305
  %322 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_underline_mode310 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %322, i32 0, i32 56
  %323 = load i8*, i8** %TS_enter_underline_mode310, align 8
  %324 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_standout_mode311 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %324, i32 0, i32 42
  store i8* %323, i8** %TS_standout_mode311, align 8
  %325 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_underline_mode312 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %325, i32 0, i32 55
  %326 = load i8*, i8** %TS_exit_underline_mode312, align 8
  %327 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_standout_mode313 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %327, i32 0, i32 40
  store i8* %326, i8** %TS_end_standout_mode313, align 8
  br label %if.end.314

if.end.314:                                       ; preds = %if.then.309, %if.end.305
  %328 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_standout_mode315 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %328, i32 0, i32 40
  %329 = load i8*, i8** %TS_end_standout_mode315, align 8
  %cmp316 = icmp eq i8* %329, null
  br i1 %cmp316, label %if.then.318, label %if.end.327

if.then.318:                                      ; preds = %if.end.314
  %330 = load i8**, i8*** %address, align 8
  %call319 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.78, i32 0, i32 0), i8** %330)
  store i8* %call319, i8** %s, align 8
  %331 = load i8*, i8** %s, align 8
  %cmp320 = icmp ne i8* %331, null
  br i1 %cmp320, label %if.then.322, label %if.else.324

if.then.322:                                      ; preds = %if.then.318
  %332 = load i8*, i8** %s, align 8
  %333 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_standout_mode323 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %333, i32 0, i32 40
  store i8* %332, i8** %TS_end_standout_mode323, align 8
  br label %if.end.326

if.else.324:                                      ; preds = %if.then.318
  %334 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_standout_mode325 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %334, i32 0, i32 42
  store i8* null, i8** %TS_standout_mode325, align 8
  br label %if.end.326

if.end.326:                                       ; preds = %if.else.324, %if.then.322
  br label %if.end.327

if.end.327:                                       ; preds = %if.end.326, %if.end.314
  %335 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_teleray328 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %335, i32 0, i32 70
  %336 = load i32, i32* %TF_teleray328, align 4
  %tobool329 = icmp ne i32 %336, 0
  br i1 %tobool329, label %if.then.330, label %if.end.338

if.then.330:                                      ; preds = %if.end.327
  %337 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm331 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %337, i32 0, i32 10
  %338 = load %struct.cm*, %struct.cm** %Wcm331, align 8
  %cm_tab332 = getelementptr inbounds %struct.cm, %struct.cm* %338, i32 0, i32 9
  store i8* null, i8** %cm_tab332, align 8
  %339 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_standout_mode333 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %339, i32 0, i32 42
  store i8* null, i8** %TS_standout_mode333, align 8
  %340 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm334 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %340, i32 0, i32 10
  %341 = load %struct.cm*, %struct.cm** %Wcm334, align 8
  %cm_cr335 = getelementptr inbounds %struct.cm, %struct.cm* %341, i32 0, i32 7
  store i8* null, i8** %cm_cr335, align 8
  %342 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm336 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %342, i32 0, i32 10
  %343 = load %struct.cm*, %struct.cm** %Wcm336, align 8
  %cm_down337 = getelementptr inbounds %struct.cm, %struct.cm* %343, i32 0, i32 3
  store i8* null, i8** %cm_down337, align 8
  br label %if.end.338

if.end.338:                                       ; preds = %if.then.330, %if.end.327
  %344 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm339 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %344, i32 0, i32 10
  %345 = load %struct.cm*, %struct.cm** %Wcm339, align 8
  %cm_rows340 = getelementptr inbounds %struct.cm, %struct.cm* %345, i32 0, i32 19
  %346 = load i32, i32* %cm_rows340, align 4
  %347 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %347, i32 0, i32 74
  store i32 %346, i32* %specified_window, align 4
  %348 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %call341 = call i32 @Wcm_init(%struct.tty_display_info* %348)
  %cmp342 = icmp eq i32 %call341, -1
  br i1 %cmp342, label %if.then.344, label %if.end.346

if.then.344:                                      ; preds = %if.end.338
  %349 = load i8, i8* %must_succeed.addr, align 1
  %tobool345 = trunc i8 %349 to i1
  %350 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %351 = load i8*, i8** %terminal_type.addr, align 8
  call void (i1, %struct.terminal*, i8*, i8*, ...) @maybe_fatal(i1 zeroext %tobool345, %struct.terminal* %350, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([349 x i8], [349 x i8]* @.str.110, i32 0, i32 0), i8* %351) #9
  unreachable

if.end.346:                                       ; preds = %if.end.338
  %352 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm347 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %352, i32 0, i32 10
  %353 = load %struct.cm*, %struct.cm** %Wcm347, align 8
  %cm_rows348 = getelementptr inbounds %struct.cm, %struct.cm* %353, i32 0, i32 19
  %354 = load i32, i32* %cm_rows348, align 4
  %cmp349 = icmp sle i32 %354, 0
  br i1 %cmp349, label %if.then.356, label %lor.lhs.false.351

lor.lhs.false.351:                                ; preds = %if.end.346
  %355 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm352 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %355, i32 0, i32 10
  %356 = load %struct.cm*, %struct.cm** %Wcm352, align 8
  %cm_cols353 = getelementptr inbounds %struct.cm, %struct.cm* %356, i32 0, i32 18
  %357 = load i32, i32* %cm_cols353, align 4
  %cmp354 = icmp sle i32 %357, 0
  br i1 %cmp354, label %if.then.356, label %if.end.358

if.then.356:                                      ; preds = %lor.lhs.false.351, %if.end.346
  %358 = load i8, i8* %must_succeed.addr, align 1
  %tobool357 = trunc i8 %358 to i1
  %359 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  call void (i1, %struct.terminal*, i8*, i8*, ...) @maybe_fatal(i1 zeroext %tobool357, %struct.terminal* %359, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.111, i32 0, i32 0)) #9
  unreachable

if.end.358:                                       ; preds = %lor.lhs.false.351
  %360 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_delete_mode359 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %360, i32 0, i32 29
  %361 = load i8*, i8** %TS_delete_mode359, align 8
  %tobool360 = icmp ne i8* %361, null
  br i1 %tobool360, label %land.lhs.true.361, label %land.end

land.lhs.true.361:                                ; preds = %if.end.358
  %362 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_insert_mode362 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %362, i32 0, i32 34
  %363 = load i8*, i8** %TS_insert_mode362, align 8
  %tobool363 = icmp ne i8* %363, null
  br i1 %tobool363, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.361
  %364 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_delete_mode364 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %364, i32 0, i32 29
  %365 = load i8*, i8** %TS_delete_mode364, align 8
  %366 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_insert_mode365 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %366, i32 0, i32 34
  %367 = load i8*, i8** %TS_insert_mode365, align 8
  %call366 = call i32 @strcmp(i8* %365, i8* %367) #10
  %tobool367 = icmp ne i32 %call366, 0
  %lnot = xor i1 %tobool367, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.361, %if.end.358
  %368 = phi i1 [ false, %land.lhs.true.361 ], [ false, %if.end.358 ], [ %lnot, %land.rhs ]
  %369 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %delete_in_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %369, i32 0, i32 72
  %370 = zext i1 %368 to i8
  %bf.load368 = load i8, i8* %delete_in_insert_mode, align 8
  %bf.clear369 = and i8 %bf.load368, -2
  %bf.set370 = or i8 %bf.clear369, %370
  store i8 %bf.set370, i8* %delete_in_insert_mode, align 8
  %tobool371 = trunc i8 %370 to i1
  %371 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input372 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %371, i32 0, i32 3
  %372 = load %struct._IO_FILE*, %struct._IO_FILE** %input372, align 8
  %call373 = call i32 @fileno(%struct._IO_FILE* %372) #3
  %call374 = call zeroext i1 @tabs_safe_p(i32 %call373)
  br i1 %call374, label %land.rhs.376, label %land.end.381

land.rhs.376:                                     ; preds = %land.end
  %373 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm377 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %373, i32 0, i32 10
  %374 = load %struct.cm*, %struct.cm** %Wcm377, align 8
  %cm_tabwidth378 = getelementptr inbounds %struct.cm, %struct.cm* %374, i32 0, i32 20
  %375 = load i32, i32* %cm_tabwidth378, align 4
  %cmp379 = icmp eq i32 %375, 8
  br label %land.end.381

land.end.381:                                     ; preds = %land.rhs.376, %land.end
  %376 = phi i1 [ false, %land.end ], [ %cmp379, %land.rhs.376 ]
  %377 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm382 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %377, i32 0, i32 10
  %378 = load %struct.cm*, %struct.cm** %Wcm382, align 8
  %cm_usetabs = getelementptr inbounds %struct.cm, %struct.cm* %378, i32 0, i32 21
  %379 = zext i1 %376 to i8
  %bf.load383 = load i8, i8* %cm_usetabs, align 4
  %bf.shl384 = shl i8 %379, 2
  %bf.clear385 = and i8 %bf.load383, -5
  %bf.set386 = or i8 %bf.clear385, %bf.shl384
  store i8 %bf.set386, i8* %cm_usetabs, align 4
  %tobool387 = trunc i8 %379 to i1
  %380 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm388 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %380, i32 0, i32 10
  %381 = load %struct.cm*, %struct.cm** %Wcm388, align 8
  %cm_abs389 = getelementptr inbounds %struct.cm, %struct.cm* %381, i32 0, i32 11
  %382 = load i8*, i8** %cm_abs389, align 8
  %tobool390 = icmp ne i8* %382, null
  br i1 %tobool390, label %land.rhs.391, label %land.end.402

land.rhs.391:                                     ; preds = %land.end.381
  %383 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_window392 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %383, i32 0, i32 50
  %384 = load i8*, i8** %TS_set_window392, align 8
  %tobool393 = icmp ne i8* %384, null
  br i1 %tobool393, label %lor.end.400, label %lor.lhs.false.394

lor.lhs.false.394:                                ; preds = %land.rhs.391
  %385 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region395 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %385, i32 0, i32 23
  %386 = load i8*, i8** %TS_set_scroll_region395, align 8
  %tobool396 = icmp ne i8* %386, null
  br i1 %tobool396, label %lor.end.400, label %lor.rhs.397

lor.rhs.397:                                      ; preds = %lor.lhs.false.394
  %387 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region_1398 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %387, i32 0, i32 24
  %388 = load i8*, i8** %TS_set_scroll_region_1398, align 8
  %tobool399 = icmp ne i8* %388, null
  br label %lor.end.400

lor.end.400:                                      ; preds = %lor.rhs.397, %lor.lhs.false.394, %land.rhs.391
  %389 = phi i1 [ true, %lor.lhs.false.394 ], [ true, %land.rhs.391 ], [ %tobool399, %lor.rhs.397 ]
  br label %land.end.402

land.end.402:                                     ; preds = %lor.end.400, %land.end.381
  %390 = phi i1 [ false, %land.end.381 ], [ %389, %lor.end.400 ]
  %391 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %scroll_region_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %391, i32 0, i32 75
  %392 = zext i1 %390 to i8
  %bf.load403 = load i8, i8* %scroll_region_ok, align 4
  %bf.shl404 = shl i8 %392, 6
  %bf.clear405 = and i8 %bf.load403, -65
  %bf.set406 = or i8 %bf.clear405, %bf.shl404
  store i8 %bf.set406, i8* %scroll_region_ok, align 4
  %tobool407 = trunc i8 %392 to i1
  %393 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_line408 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %393, i32 0, i32 17
  %394 = load i8*, i8** %TS_ins_line408, align 8
  %tobool409 = icmp ne i8* %394, null
  br i1 %tobool409, label %land.lhs.true.413, label %lor.lhs.false.410

lor.lhs.false.410:                                ; preds = %land.end.402
  %395 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_lines411 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %395, i32 0, i32 18
  %396 = load i8*, i8** %TS_ins_multi_lines411, align 8
  %tobool412 = icmp ne i8* %396, null
  br i1 %tobool412, label %land.lhs.true.413, label %lor.rhs.419

land.lhs.true.413:                                ; preds = %lor.lhs.false.410, %land.end.402
  %397 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_line414 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %397, i32 0, i32 27
  %398 = load i8*, i8** %TS_del_line414, align 8
  %tobool415 = icmp ne i8* %398, null
  br i1 %tobool415, label %lor.end.433, label %lor.lhs.false.416

lor.lhs.false.416:                                ; preds = %land.lhs.true.413
  %399 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_lines417 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %399, i32 0, i32 28
  %400 = load i8*, i8** %TS_del_multi_lines417, align 8
  %tobool418 = icmp ne i8* %400, null
  br i1 %tobool418, label %lor.end.433, label %lor.rhs.419

lor.rhs.419:                                      ; preds = %lor.lhs.false.416, %lor.lhs.false.410
  %401 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %scroll_region_ok420 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %401, i32 0, i32 75
  %bf.load421 = load i8, i8* %scroll_region_ok420, align 4
  %bf.lshr422 = lshr i8 %bf.load421, 6
  %bf.clear423 = and i8 %bf.lshr422, 1
  %bf.cast424 = trunc i8 %bf.clear423 to i1
  br i1 %bf.cast424, label %land.lhs.true.426, label %land.end.432

land.lhs.true.426:                                ; preds = %lor.rhs.419
  %402 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_fwd_scroll427 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %402, i32 0, i32 41
  %403 = load i8*, i8** %TS_fwd_scroll427, align 8
  %tobool428 = icmp ne i8* %403, null
  br i1 %tobool428, label %land.rhs.429, label %land.end.432

land.rhs.429:                                     ; preds = %land.lhs.true.426
  %404 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_rev_scroll430 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %404, i32 0, i32 43
  %405 = load i8*, i8** %TS_rev_scroll430, align 8
  %tobool431 = icmp ne i8* %405, null
  br label %land.end.432

land.end.432:                                     ; preds = %land.rhs.429, %land.lhs.true.426, %lor.rhs.419
  %406 = phi i1 [ false, %land.lhs.true.426 ], [ false, %lor.rhs.419 ], [ %tobool431, %land.rhs.429 ]
  br label %lor.end.433

lor.end.433:                                      ; preds = %land.end.432, %lor.lhs.false.416, %land.lhs.true.413
  %407 = phi i1 [ true, %lor.lhs.false.416 ], [ true, %land.lhs.true.413 ], [ %406, %land.end.432 ]
  %408 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %line_ins_del_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %408, i32 0, i32 75
  %409 = zext i1 %407 to i8
  %bf.load435 = load i8, i8* %line_ins_del_ok, align 4
  %bf.shl436 = shl i8 %409, 4
  %bf.clear437 = and i8 %bf.load435, -17
  %bf.set438 = or i8 %bf.clear437, %bf.shl436
  store i8 %bf.set438, i8* %line_ins_del_ok, align 4
  %tobool439 = trunc i8 %409 to i1
  %410 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char440 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %410, i32 0, i32 32
  %411 = load i8*, i8** %TS_ins_char440, align 8
  %tobool441 = icmp ne i8* %411, null
  br i1 %tobool441, label %land.rhs.451, label %lor.lhs.false.442

lor.lhs.false.442:                                ; preds = %lor.end.433
  %412 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_insert_mode443 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %412, i32 0, i32 34
  %413 = load i8*, i8** %TS_insert_mode443, align 8
  %tobool444 = icmp ne i8* %413, null
  br i1 %tobool444, label %land.rhs.451, label %lor.lhs.false.445

lor.lhs.false.445:                                ; preds = %lor.lhs.false.442
  %414 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_inserted_char446 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %414, i32 0, i32 35
  %415 = load i8*, i8** %TS_pad_inserted_char446, align 8
  %tobool447 = icmp ne i8* %415, null
  br i1 %tobool447, label %land.rhs.451, label %lor.lhs.false.448

lor.lhs.false.448:                                ; preds = %lor.lhs.false.445
  %416 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_chars449 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %416, i32 0, i32 33
  %417 = load i8*, i8** %TS_ins_multi_chars449, align 8
  %tobool450 = icmp ne i8* %417, null
  br i1 %tobool450, label %land.rhs.451, label %land.end.459

land.rhs.451:                                     ; preds = %lor.lhs.false.448, %lor.lhs.false.445, %lor.lhs.false.442, %lor.end.433
  %418 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_char452 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %418, i32 0, i32 25
  %419 = load i8*, i8** %TS_del_char452, align 8
  %tobool453 = icmp ne i8* %419, null
  br i1 %tobool453, label %lor.end.457, label %lor.rhs.454

lor.rhs.454:                                      ; preds = %land.rhs.451
  %420 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_chars455 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %420, i32 0, i32 26
  %421 = load i8*, i8** %TS_del_multi_chars455, align 8
  %tobool456 = icmp ne i8* %421, null
  br label %lor.end.457

lor.end.457:                                      ; preds = %lor.rhs.454, %land.rhs.451
  %422 = phi i1 [ true, %land.rhs.451 ], [ %tobool456, %lor.rhs.454 ]
  br label %land.end.459

land.end.459:                                     ; preds = %lor.end.457, %lor.lhs.false.448
  %423 = phi i1 [ false, %lor.lhs.false.448 ], [ %422, %lor.end.457 ]
  %424 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %char_ins_del_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %424, i32 0, i32 75
  %425 = zext i1 %423 to i8
  %bf.load460 = load i8, i8* %char_ins_del_ok, align 4
  %bf.shl461 = shl i8 %425, 5
  %bf.clear462 = and i8 %bf.load460, -33
  %bf.set463 = or i8 %bf.clear462, %bf.shl461
  store i8 %bf.set463, i8* %char_ins_del_ok, align 4
  %tobool464 = trunc i8 %425 to i1
  %426 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input465 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %426, i32 0, i32 3
  %427 = load %struct._IO_FILE*, %struct._IO_FILE** %input465, align 8
  %call466 = call i32 @fileno(%struct._IO_FILE* %427) #3
  call void @init_baud_rate(i32 %call466)
  %428 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @init_sys_modes(%struct.tty_display_info* %428)
  %429 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  store %struct.terminal* %429, %struct.terminal** %retval
  br label %return

return:                                           ; preds = %land.end.459, %if.then.9
  %430 = load %struct.terminal*, %struct.terminal** %retval
  ret %struct.terminal* %430
}

; Function Attrs: noreturn nounwind uwtable
define internal void @maybe_fatal(i1 zeroext %must_succeed, %struct.terminal* %terminal, i8* %str1, i8* %str2, ...) #7 {
entry:
  %must_succeed.addr = alloca i8, align 1
  %terminal.addr = alloca %struct.terminal*, align 8
  %str1.addr = alloca i8*, align 8
  %str2.addr = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %frombool = zext i1 %must_succeed to i8
  store i8 %frombool, i8* %must_succeed.addr, align 1
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  store i8* %str1, i8** %str1.addr, align 8
  store i8* %str2, i8** %str2.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %tobool = icmp ne %struct.terminal* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  call void @delete_tty(%struct.terminal* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %must_succeed.addr, align 1
  %tobool2 = trunc i8 %2 to i1
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %3 = load i8*, i8** %str2.addr, align 8
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  call void @vfatal(i8* %3, %struct.__va_list_tag* %arraydecay4) #9
  unreachable

if.else:                                          ; preds = %if.end
  %4 = load i8*, i8** %str1.addr, align 8
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  call void @verror(i8* %4, %struct.__va_list_tag* %arraydecay5) #9
  unreachable

return:                                           ; No predecessors!
  ret void
}

declare %struct.terminal* @create_terminal(i32, %struct.redisplay_interface*) #1

declare noalias i8* @xmalloc(i64) #1

declare void @Wcm_clear(%struct.tty_display_info*) #1

; Function Attrs: nounwind
declare i32 @isatty(i32) #5

declare noalias i8* @xstrdup(i8*) #1

declare void @block_tty_out_signal(%struct.__sigset_t*) #1

declare i32 @tgetent(i8*, i8*) #1

declare void @unblock_tty_out_signal(%struct.__sigset_t*) #1

declare i8* @tgetstr(i8*, i8**) #1

declare i32 @tgetflag(i8*) #1

declare i32 @tgetnum(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @tty_default_color_capabilities(%struct.tty_display_info* %tty, i1 zeroext %save) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  %save.addr = alloca i8, align 1
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %frombool = zext i1 %save to i8
  store i8 %frombool, i8* %save.addr, align 1
  %0 = load i8, i8* %save.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_orig_pair = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %1, i32 0, i32 63
  %2 = load i8*, i8** %TS_orig_pair, align 8
  call void @dupstring(i8** @default_orig_pair, i8* %2)
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_foreground = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %3, i32 0, i32 64
  %4 = load i8*, i8** %TS_set_foreground, align 8
  call void @dupstring(i8** @default_set_foreground, i8* %4)
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_background = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %5, i32 0, i32 65
  %6 = load i8*, i8** %TS_set_background, align 8
  call void @dupstring(i8** @default_set_background, i8* %6)
  %7 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %7, i32 0, i32 61
  %8 = load i32, i32* %TN_max_colors, align 4
  store i32 %8, i32* @default_max_colors, align 4
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_pairs = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %9, i32 0, i32 62
  %10 = load i32, i32* %TN_max_pairs, align 4
  store i32 %10, i32* @default_max_pairs, align 4
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 60
  %12 = load i32, i32* %TN_no_color_video, align 4
  store i32 %12, i32* @default_no_color_video, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %13 = load i8*, i8** @default_orig_pair, align 8
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_orig_pair1 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 63
  store i8* %13, i8** %TS_orig_pair1, align 8
  %15 = load i8*, i8** @default_set_foreground, align 8
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_foreground2 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 64
  store i8* %15, i8** %TS_set_foreground2, align 8
  %17 = load i8*, i8** @default_set_background, align 8
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_set_background3 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %18, i32 0, i32 65
  store i8* %17, i8** %TS_set_background3, align 8
  %19 = load i32, i32* @default_max_colors, align 4
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_colors4 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %20, i32 0, i32 61
  store i32 %19, i32* %TN_max_colors4, align 4
  %21 = load i32, i32* @default_max_pairs, align 4
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_max_pairs5 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 62
  store i32 %21, i32* %TN_max_pairs5, align 4
  %23 = load i32, i32* @default_no_color_video, align 4
  %24 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TN_no_color_video6 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %24, i32 0, i32 60
  store i32 %23, i32* %TN_no_color_video6, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare %struct.kboard* @allocate_kboard(i64) #1

; Function Attrs: nounwind uwtable
define internal void @term_get_fkeys(i8** %address, %struct.kboard* %kboard) #0 {
entry:
  %address.addr = alloca i8**, align 8
  %kboard.addr = alloca %struct.kboard*, align 8
  store i8** %address, i8*** %address.addr, align 8
  store %struct.kboard* %kboard, %struct.kboard** %kboard.addr, align 8
  %0 = load i8**, i8*** %address.addr, align 8
  store i8** %0, i8*** @term_get_fkeys_address, align 8
  %1 = load %struct.kboard*, %struct.kboard** %kboard.addr, align 8
  store %struct.kboard* %1, %struct.kboard** @term_get_fkeys_kboard, align 8
  %call = call i64 @builtin_lisp_symbol(i32 372)
  %call1 = call i64 @internal_condition_case(i64 ()* @term_get_fkeys_1, i64 %call, i64 (i64)* @Fidentity)
  ret void
}

declare i32 @Wcm_init(%struct.tty_display_info*) #1

declare zeroext i1 @tabs_safe_p(i32) #1

declare void @init_baud_rate(i32) #1

; Function Attrs: noreturn nounwind uwtable
define void @fatal(i8* %str, ...) #7 {
entry:
  %str.addr = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %str, i8** %str.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8*, i8** %str.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  call void @vfatal(i8* %0, %struct.__va_list_tag* %arraydecay2) #9
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

; Function Attrs: noreturn nounwind uwtable
define internal void @vfatal(i8* %str, %struct.__va_list_tag* %ap) #7 {
entry:
  %str.addr = alloca i8*, align 8
  %ap.addr = alloca %struct.__va_list_tag*, align 8
  store i8* %str, i8** %str.addr, align 8
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %ap.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.252, i32 0, i32 0))
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** %str.addr, align 8
  %3 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %call1 = call i32 @vfprintf(%struct._IO_FILE* %1, i8* %2, %struct.__va_list_tag* %3)
  %4 = load i8*, i8** %str.addr, align 8
  %call2 = call i64 @strlen(i8* %4) #10
  %cmp = icmp ugt i64 %call2, 0
  br i1 %cmp, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %5 = load i8*, i8** %str.addr, align 8
  %call3 = call i64 @strlen(i8* %5) #10
  %sub = sub i64 %call3, 1
  %6 = load i8*, i8** %str.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %sub
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp4 = icmp eq i32 %conv, 10
  br i1 %cmp4, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.253, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call7 = call i32 @fflush(%struct._IO_FILE* %9)
  call void @exit(i32 1) #12
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define void @syms_of_term() #0 {
entry:
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_term.b_fwd, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 489))
  br label %do.end

do.end:                                           ; preds = %do.body
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 489), align 1
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_term.o_fwd, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 280))
  br label %do.end.2

do.end.2:                                         ; preds = %do.body.1
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 280), align 8
  br label %do.body.3

do.body.3:                                        ; preds = %do.end.2
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_term.o_fwd.113, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 256))
  br label %do.end.4

do.end.4:                                         ; preds = %do.body.3
  %call5 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call5, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 256), align 8
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.4
  call void @defvar_bool(%struct.Lisp_Boolfwd* @syms_of_term.b_fwd.114, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 497))
  br label %do.end.7

do.end.7:                                         ; preds = %do.body.6
  store i8 1, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 497), align 1
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Stty_display_color_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Stty_display_color_cells to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Stty_no_underline to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Stty_type to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Scontrolling_tty_p to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Stty_top_frame to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Ssuspend_tty to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sresume_tty to %struct.Lisp_Subr*))
  store i8* null, i8** @default_orig_pair, align 8
  store i8* null, i8** @default_set_foreground, align 8
  store i8* null, i8** @default_set_background, align 8
  store i8* null, i8** @encode_terminal_src, align 8
  store i8* null, i8** @encode_terminal_dst, align 8
  ret void
}

declare void @defvar_bool(%struct.Lisp_Boolfwd*, i8*, i8*) #1

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #1

declare void @defsubr(%struct.Lisp_Subr*) #1

; Function Attrs: nounwind uwtable
define internal i32 @string_cost_one_line(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i32 0, i32* @cost, align 4
  %0 = load i8*, i8** %str.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8
  call void @tputs(i8* %1, i32 1, i32 (i32)* @evalcost)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @cost, align 4
  ret i32 %2
}

declare i32 @composition_gstring_width(i64, i64, i64, %struct.font_metrics*) #1

; Function Attrs: nounwind uwtable
define internal void @append_composite_glyph(%struct.it* %it) #0 {
entry:
  %it.addr = alloca %struct.it*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %g = alloca %struct.glyph*, align 8
  store %struct.it* %it, %struct.it** %it.addr, align 8
  %0 = load %struct.it*, %struct.it** %it.addr, align 8
  %area = getelementptr inbounds %struct.it, %struct.it* %0, i32 0, i32 60
  %1 = load i32, i32* %area, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row = getelementptr inbounds %struct.it, %struct.it* %2, i32 0, i32 59
  %3 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom
  %4 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  %5 = load %struct.it*, %struct.it** %it.addr, align 8
  %area1 = getelementptr inbounds %struct.it, %struct.it* %5, i32 0, i32 60
  %6 = load i32, i32* %area1, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row3 = getelementptr inbounds %struct.it, %struct.it* %7, i32 0, i32 59
  %8 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row3, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom2
  %9 = load i16, i16* %arrayidx4, align 2
  %conv = sext i16 %9 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %4, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %glyph, align 8
  %10 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %11 = load %struct.it*, %struct.it** %it.addr, align 8
  %area5 = getelementptr inbounds %struct.it, %struct.it* %11, i32 0, i32 60
  %12 = load i32, i32* %area5, align 4
  %add = add nsw i32 1, %12
  %idxprom6 = sext i32 %add to i64
  %13 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row7 = getelementptr inbounds %struct.it, %struct.it* %13, i32 0, i32 59
  %14 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row7, align 8
  %glyphs8 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs8, i32 0, i64 %idxprom6
  %15 = load %struct.glyph*, %struct.glyph** %arrayidx9, align 8
  %cmp = icmp ult %struct.glyph* %10, %15
  br i1 %cmp, label %if.then, label %if.end.123

if.then:                                          ; preds = %entry
  %16 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row11 = getelementptr inbounds %struct.it, %struct.it* %16, i32 0, i32 59
  %17 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row11, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %17, i32 0, i32 22
  %18 = bitcast i40* %reversed_p to i64*
  %bf.load = load i64, i64* %18, align 4
  %bf.lshr = lshr i64 %bf.load, 34
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %19 = load %struct.it*, %struct.it** %it.addr, align 8
  %area13 = getelementptr inbounds %struct.it, %struct.it* %19, i32 0, i32 60
  %20 = load i32, i32* %area13, align 4
  %cmp14 = icmp eq i32 %20, 1
  br i1 %cmp14, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %land.lhs.true
  %21 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %add.ptr17 = getelementptr inbounds %struct.glyph, %struct.glyph* %21, i64 -1
  store %struct.glyph* %add.ptr17, %struct.glyph** %g, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.16
  %22 = load %struct.glyph*, %struct.glyph** %g, align 8
  %23 = load %struct.it*, %struct.it** %it.addr, align 8
  %area18 = getelementptr inbounds %struct.it, %struct.it* %23, i32 0, i32 60
  %24 = load i32, i32* %area18, align 4
  %idxprom19 = sext i32 %24 to i64
  %25 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row20 = getelementptr inbounds %struct.it, %struct.it* %25, i32 0, i32 59
  %26 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row20, align 8
  %glyphs21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %26, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs21, i32 0, i64 %idxprom19
  %27 = load %struct.glyph*, %struct.glyph** %arrayidx22, align 8
  %cmp23 = icmp uge %struct.glyph* %22, %27
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %28 = load %struct.glyph*, %struct.glyph** %g, align 8
  %arrayidx25 = getelementptr inbounds %struct.glyph, %struct.glyph* %28, i64 1
  %29 = load %struct.glyph*, %struct.glyph** %g, align 8
  %30 = bitcast %struct.glyph* %arrayidx25 to i8*
  %31 = bitcast %struct.glyph* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 48, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load %struct.glyph*, %struct.glyph** %g, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %32, i32 -1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %g, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %33 = load %struct.it*, %struct.it** %it.addr, align 8
  %area26 = getelementptr inbounds %struct.it, %struct.it* %33, i32 0, i32 60
  %34 = load i32, i32* %area26, align 4
  %idxprom27 = sext i32 %34 to i64
  %35 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row28 = getelementptr inbounds %struct.it, %struct.it* %35, i32 0, i32 59
  %36 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row28, align 8
  %glyphs29 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %36, i32 0, i32 0
  %arrayidx30 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs29, i32 0, i64 %idxprom27
  %37 = load %struct.glyph*, %struct.glyph** %arrayidx30, align 8
  store %struct.glyph* %37, %struct.glyph** %glyph, align 8
  br label %if.end

if.end:                                           ; preds = %for.end, %land.lhs.true, %if.then
  %38 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %38, i32 0, i32 6
  %39 = bitcast i24* %type to i32*
  %bf.load31 = load i32, i32* %39, align 8
  %bf.clear32 = and i32 %bf.load31, -8
  %bf.set = or i32 %bf.clear32, 1
  store i32 %bf.set, i32* %39, align 8
  %40 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width = getelementptr inbounds %struct.it, %struct.it* %40, i32 0, i32 62
  %41 = load i32, i32* %pixel_width, align 4
  %conv33 = trunc i32 %41 to i16
  %42 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width34 = getelementptr inbounds %struct.glyph, %struct.glyph* %42, i32 0, i32 2
  store i16 %conv33, i16* %pixel_width34, align 2
  %43 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it = getelementptr inbounds %struct.it, %struct.it* %43, i32 0, i32 37
  %id = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it, i32 0, i32 1
  %44 = load i64, i64* %id, align 8
  %conv35 = trunc i64 %44 to i32
  %45 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %45, i32 0, i32 9
  %cmp36 = bitcast %union.anon.1* %u to %struct.anon.2*
  %46 = bitcast %struct.anon.2* %cmp36 to i32*
  %bf.load37 = load i32, i32* %46, align 4
  %bf.value = and i32 %conv35, 2147483647
  %bf.shl = shl i32 %bf.value, 1
  %bf.clear38 = and i32 %bf.load37, 1
  %bf.set39 = or i32 %bf.clear38, %bf.shl
  store i32 %bf.set39, i32* %46, align 4
  %47 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it40 = getelementptr inbounds %struct.it, %struct.it* %47, i32 0, i32 37
  %ch = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it40, i32 0, i32 2
  %48 = load i32, i32* %ch, align 4
  %cmp41 = icmp slt i32 %48, 0
  br i1 %cmp41, label %if.then.43, label %if.else

if.then.43:                                       ; preds = %if.end
  %49 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u44 = getelementptr inbounds %struct.glyph, %struct.glyph* %49, i32 0, i32 9
  %cmp45 = bitcast %union.anon.1* %u44 to %struct.anon.2*
  %50 = bitcast %struct.anon.2* %cmp45 to i32*
  %bf.load46 = load i32, i32* %50, align 4
  %bf.clear47 = and i32 %bf.load46, -2
  store i32 %bf.clear47, i32* %50, align 4
  %51 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it48 = getelementptr inbounds %struct.it, %struct.it* %51, i32 0, i32 37
  %id49 = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it48, i32 0, i32 1
  %52 = load i64, i64* %id49, align 8
  %conv50 = trunc i64 %52 to i32
  %53 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u51 = getelementptr inbounds %struct.glyph, %struct.glyph* %53, i32 0, i32 9
  %cmp52 = bitcast %union.anon.1* %u51 to %struct.anon.2*
  %54 = bitcast %struct.anon.2* %cmp52 to i32*
  %bf.load53 = load i32, i32* %54, align 4
  %bf.value54 = and i32 %conv50, 2147483647
  %bf.shl55 = shl i32 %bf.value54, 1
  %bf.clear56 = and i32 %bf.load53, 1
  %bf.set57 = or i32 %bf.clear56, %bf.shl55
  store i32 %bf.set57, i32* %54, align 4
  br label %if.end.80

if.else:                                          ; preds = %if.end
  %55 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u58 = getelementptr inbounds %struct.glyph, %struct.glyph* %55, i32 0, i32 9
  %cmp59 = bitcast %union.anon.1* %u58 to %struct.anon.2*
  %56 = bitcast %struct.anon.2* %cmp59 to i32*
  %bf.load60 = load i32, i32* %56, align 4
  %bf.clear61 = and i32 %bf.load60, -2
  %bf.set62 = or i32 %bf.clear61, 1
  store i32 %bf.set62, i32* %56, align 4
  %57 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it63 = getelementptr inbounds %struct.it, %struct.it* %57, i32 0, i32 37
  %id64 = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it63, i32 0, i32 1
  %58 = load i64, i64* %id64, align 8
  %conv65 = trunc i64 %58 to i32
  %59 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u66 = getelementptr inbounds %struct.glyph, %struct.glyph* %59, i32 0, i32 9
  %cmp67 = bitcast %union.anon.1* %u66 to %struct.anon.2*
  %60 = bitcast %struct.anon.2* %cmp67 to i32*
  %bf.load68 = load i32, i32* %60, align 4
  %bf.value69 = and i32 %conv65, 2147483647
  %bf.shl70 = shl i32 %bf.value69, 1
  %bf.clear71 = and i32 %bf.load68, 1
  %bf.set72 = or i32 %bf.clear71, %bf.shl70
  store i32 %bf.set72, i32* %60, align 4
  %61 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it73 = getelementptr inbounds %struct.it, %struct.it* %61, i32 0, i32 37
  %from = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it73, i32 0, i32 10
  %62 = load i32, i32* %from, align 4
  %63 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice = getelementptr inbounds %struct.glyph, %struct.glyph* %63, i32 0, i32 8
  %cmp74 = bitcast %union.anon* %slice to %struct.anon*
  %from75 = getelementptr inbounds %struct.anon, %struct.anon* %cmp74, i32 0, i32 0
  store i32 %62, i32* %from75, align 4
  %64 = load %struct.it*, %struct.it** %it.addr, align 8
  %cmp_it76 = getelementptr inbounds %struct.it, %struct.it* %64, i32 0, i32 37
  %to = getelementptr inbounds %struct.composition_it, %struct.composition_it* %cmp_it76, i32 0, i32 11
  %65 = load i32, i32* %to, align 4
  %sub = sub nsw i32 %65, 1
  %66 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %slice77 = getelementptr inbounds %struct.glyph, %struct.glyph* %66, i32 0, i32 8
  %cmp78 = bitcast %union.anon* %slice77 to %struct.anon*
  %to79 = getelementptr inbounds %struct.anon, %struct.anon* %cmp78, i32 0, i32 1
  store i32 %sub, i32* %to79, align 4
  br label %if.end.80

if.end.80:                                        ; preds = %if.else, %if.then.43
  %67 = load %struct.it*, %struct.it** %it.addr, align 8
  %face_id = getelementptr inbounds %struct.it, %struct.it* %67, i32 0, i32 31
  %68 = load i32, i32* %face_id, align 4
  %69 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %face_id81 = getelementptr inbounds %struct.glyph, %struct.glyph* %69, i32 0, i32 7
  %70 = bitcast i24* %face_id81 to i32*
  %bf.load82 = load i32, i32* %70, align 4
  %bf.value83 = and i32 %68, 1048575
  %bf.clear84 = and i32 %bf.load82, -1048576
  %bf.set85 = or i32 %bf.clear84, %bf.value83
  store i32 %bf.set85, i32* %70, align 4
  %71 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %71, i32 0, i32 6
  %72 = bitcast i24* %padding_p to i32*
  %bf.load86 = load i32, i32* %72, align 8
  %bf.clear87 = and i32 %bf.load86, -129
  store i32 %bf.clear87, i32* %72, align 8
  %73 = load %struct.it*, %struct.it** %it.addr, align 8
  %position = getelementptr inbounds %struct.it, %struct.it* %73, i32 0, i32 48
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %position, i32 0, i32 0
  %74 = load i64, i64* %charpos, align 8
  %75 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %charpos88 = getelementptr inbounds %struct.glyph, %struct.glyph* %75, i32 0, i32 0
  store i64 %74, i64* %charpos88, align 8
  %76 = load %struct.it*, %struct.it** %it.addr, align 8
  %object = getelementptr inbounds %struct.it, %struct.it* %76, i32 0, i32 47
  %77 = load i64, i64* %object, align 8
  %78 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %object89 = getelementptr inbounds %struct.glyph, %struct.glyph* %78, i32 0, i32 1
  store i64 %77, i64* %object89, align 8
  %79 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_p = getelementptr inbounds %struct.it, %struct.it* %79, i32 0, i32 79
  %80 = bitcast i24* %bidi_p to i32*
  %bf.load90 = load i32, i32* %80, align 8
  %bf.lshr91 = lshr i32 %bf.load90, 20
  %bf.clear92 = and i32 %bf.lshr91, 1
  %bf.cast93 = trunc i32 %bf.clear92 to i1
  br i1 %bf.cast93, label %if.then.94, label %if.else.109

if.then.94:                                       ; preds = %if.end.80
  %81 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_it = getelementptr inbounds %struct.it, %struct.it* %81, i32 0, i32 80
  %resolved_level = getelementptr inbounds %struct.bidi_it, %struct.bidi_it* %bidi_it, i32 0, i32 8
  %82 = load i8, i8* %resolved_level, align 1
  %conv95 = sext i8 %82 to i32
  %83 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %resolved_level96 = getelementptr inbounds %struct.glyph, %struct.glyph* %83, i32 0, i32 6
  %84 = bitcast i24* %resolved_level96 to i32*
  %bf.load97 = load i32, i32* %84, align 8
  %bf.value98 = and i32 %conv95, 127
  %bf.shl99 = shl i32 %bf.value98, 10
  %bf.clear100 = and i32 %bf.load97, -130049
  %bf.set101 = or i32 %bf.clear100, %bf.shl99
  store i32 %bf.set101, i32* %84, align 8
  %85 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_it102 = getelementptr inbounds %struct.it, %struct.it* %85, i32 0, i32 80
  %type103 = getelementptr inbounds %struct.bidi_it, %struct.bidi_it* %bidi_it102, i32 0, i32 5
  %86 = load i32, i32* %type103, align 4
  %87 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %bidi_type = getelementptr inbounds %struct.glyph, %struct.glyph* %87, i32 0, i32 6
  %88 = bitcast i24* %bidi_type to i32*
  %bf.load104 = load i32, i32* %88, align 8
  %bf.value105 = and i32 %86, 7
  %bf.shl106 = shl i32 %bf.value105, 17
  %bf.clear107 = and i32 %bf.load104, -917505
  %bf.set108 = or i32 %bf.clear107, %bf.shl106
  store i32 %bf.set108, i32* %88, align 8
  br label %if.end.116

if.else.109:                                      ; preds = %if.end.80
  %89 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %resolved_level110 = getelementptr inbounds %struct.glyph, %struct.glyph* %89, i32 0, i32 6
  %90 = bitcast i24* %resolved_level110 to i32*
  %bf.load111 = load i32, i32* %90, align 8
  %bf.clear112 = and i32 %bf.load111, -130049
  store i32 %bf.clear112, i32* %90, align 8
  %91 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %bidi_type113 = getelementptr inbounds %struct.glyph, %struct.glyph* %91, i32 0, i32 6
  %92 = bitcast i24* %bidi_type113 to i32*
  %bf.load114 = load i32, i32* %92, align 8
  %bf.clear115 = and i32 %bf.load114, -917505
  store i32 %bf.clear115, i32* %92, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.109, %if.then.94
  %93 = load %struct.it*, %struct.it** %it.addr, align 8
  %area117 = getelementptr inbounds %struct.it, %struct.it* %93, i32 0, i32 60
  %94 = load i32, i32* %area117, align 4
  %idxprom118 = sext i32 %94 to i64
  %95 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row119 = getelementptr inbounds %struct.it, %struct.it* %95, i32 0, i32 59
  %96 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row119, align 8
  %used120 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %96, i32 0, i32 1
  %arrayidx121 = getelementptr inbounds [4 x i16], [4 x i16]* %used120, i32 0, i64 %idxprom118
  %97 = load i16, i16* %arrayidx121, align 2
  %inc = add i16 %97, 1
  store i16 %inc, i16* %arrayidx121, align 2
  %98 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr122 = getelementptr inbounds %struct.glyph, %struct.glyph* %98, i32 1
  store %struct.glyph* %incdec.ptr122, %struct.glyph** %glyph, align 8
  br label %if.end.123

if.end.123:                                       ; preds = %if.end.116, %entry
  ret void
}

declare i32 @merge_glyphless_glyph_face(%struct.it*) #1

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #5

declare zeroext i1 @CHAR_TABLE_P(i64) #1

; Function Attrs: nounwind uwtable
define internal void @append_glyphless_glyph(%struct.it* %it, i32 %face_id, i8* %str) #0 {
entry:
  %it.addr = alloca %struct.it*, align 8
  %face_id.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %end = alloca %struct.glyph*, align 8
  %i = alloca i32, align 4
  %g = alloca %struct.glyph*, align 8
  %move_by = alloca i32, align 4
  store %struct.it* %it, %struct.it** %it.addr, align 8
  store i32 %face_id, i32* %face_id.addr, align 4
  store i8* %str, i8** %str.addr, align 8
  %0 = load %struct.it*, %struct.it** %it.addr, align 8
  %area = getelementptr inbounds %struct.it, %struct.it* %0, i32 0, i32 60
  %1 = load i32, i32* %area, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row = getelementptr inbounds %struct.it, %struct.it* %2, i32 0, i32 59
  %3 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 %idxprom
  %4 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  %5 = load %struct.it*, %struct.it** %it.addr, align 8
  %area1 = getelementptr inbounds %struct.it, %struct.it* %5, i32 0, i32 60
  %6 = load i32, i32* %area1, align 4
  %idxprom2 = sext i32 %6 to i64
  %7 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row3 = getelementptr inbounds %struct.it, %struct.it* %7, i32 0, i32 59
  %8 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row3, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 %idxprom2
  %9 = load i16, i16* %arrayidx4, align 2
  %conv = sext i16 %9 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %4, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %glyph, align 8
  %10 = load %struct.it*, %struct.it** %it.addr, align 8
  %area5 = getelementptr inbounds %struct.it, %struct.it* %10, i32 0, i32 60
  %11 = load i32, i32* %area5, align 4
  %add = add nsw i32 1, %11
  %idxprom6 = sext i32 %add to i64
  %12 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row7 = getelementptr inbounds %struct.it, %struct.it* %12, i32 0, i32 59
  %13 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row7, align 8
  %glyphs8 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %13, i32 0, i32 0
  %arrayidx9 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs8, i32 0, i64 %idxprom6
  %14 = load %struct.glyph*, %struct.glyph** %arrayidx9, align 8
  store %struct.glyph* %14, %struct.glyph** %end, align 8
  %15 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row10 = getelementptr inbounds %struct.it, %struct.it* %15, i32 0, i32 59
  %16 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row10, align 8
  %reversed_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %16, i32 0, i32 22
  %17 = bitcast i40* %reversed_p to i64*
  %bf.load = load i64, i64* %17, align 4
  %bf.lshr = lshr i64 %bf.load, 34
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  br i1 %bf.cast, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %entry
  %18 = load %struct.it*, %struct.it** %it.addr, align 8
  %area12 = getelementptr inbounds %struct.it, %struct.it* %18, i32 0, i32 60
  %19 = load i32, i32* %area12, align 4
  %cmp = icmp eq i32 %19, 1
  br i1 %cmp, label %if.then, label %if.end.40

if.then:                                          ; preds = %land.lhs.true
  %20 = load %struct.it*, %struct.it** %it.addr, align 8
  %pixel_width = getelementptr inbounds %struct.it, %struct.it* %20, i32 0, i32 62
  %21 = load i32, i32* %pixel_width, align 4
  store i32 %21, i32* %move_by, align 4
  %22 = load i32, i32* %move_by, align 4
  %conv14 = sext i32 %22 to i64
  %23 = load %struct.glyph*, %struct.glyph** %end, align 8
  %24 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.glyph* %23 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.glyph* %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %cmp15 = icmp sgt i64 %conv14, %sub.ptr.div
  br i1 %cmp15, label %if.then.17, label %if.end

if.then.17:                                       ; preds = %if.then
  %25 = load %struct.glyph*, %struct.glyph** %end, align 8
  %26 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %sub.ptr.lhs.cast18 = ptrtoint %struct.glyph* %25 to i64
  %sub.ptr.rhs.cast19 = ptrtoint %struct.glyph* %26 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %sub.ptr.div21 = sdiv exact i64 %sub.ptr.sub20, 48
  %conv22 = trunc i64 %sub.ptr.div21 to i32
  store i32 %conv22, i32* %move_by, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.17, %if.then
  %27 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %add.ptr23 = getelementptr inbounds %struct.glyph, %struct.glyph* %27, i64 -1
  store %struct.glyph* %add.ptr23, %struct.glyph** %g, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %28 = load %struct.glyph*, %struct.glyph** %g, align 8
  %29 = load %struct.it*, %struct.it** %it.addr, align 8
  %area24 = getelementptr inbounds %struct.it, %struct.it* %29, i32 0, i32 60
  %30 = load i32, i32* %area24, align 4
  %idxprom25 = sext i32 %30 to i64
  %31 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row26 = getelementptr inbounds %struct.it, %struct.it* %31, i32 0, i32 59
  %32 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row26, align 8
  %glyphs27 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %32, i32 0, i32 0
  %arrayidx28 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs27, i32 0, i64 %idxprom25
  %33 = load %struct.glyph*, %struct.glyph** %arrayidx28, align 8
  %cmp29 = icmp uge %struct.glyph* %28, %33
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load i32, i32* %move_by, align 4
  %idxprom31 = sext i32 %34 to i64
  %35 = load %struct.glyph*, %struct.glyph** %g, align 8
  %arrayidx32 = getelementptr inbounds %struct.glyph, %struct.glyph* %35, i64 %idxprom31
  %36 = load %struct.glyph*, %struct.glyph** %g, align 8
  %37 = bitcast %struct.glyph* %arrayidx32 to i8*
  %38 = bitcast %struct.glyph* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 48, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load %struct.glyph*, %struct.glyph** %g, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %39, i32 -1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %g, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load %struct.it*, %struct.it** %it.addr, align 8
  %area33 = getelementptr inbounds %struct.it, %struct.it* %40, i32 0, i32 60
  %41 = load i32, i32* %area33, align 4
  %idxprom34 = sext i32 %41 to i64
  %42 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row35 = getelementptr inbounds %struct.it, %struct.it* %42, i32 0, i32 59
  %43 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row35, align 8
  %glyphs36 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %43, i32 0, i32 0
  %arrayidx37 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs36, i32 0, i64 %idxprom34
  %44 = load %struct.glyph*, %struct.glyph** %arrayidx37, align 8
  store %struct.glyph* %44, %struct.glyph** %glyph, align 8
  %45 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %46 = load i32, i32* %move_by, align 4
  %idx.ext38 = sext i32 %46 to i64
  %add.ptr39 = getelementptr inbounds %struct.glyph, %struct.glyph* %45, i64 %idx.ext38
  store %struct.glyph* %add.ptr39, %struct.glyph** %end, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %for.end, %land.lhs.true, %entry
  %47 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %48 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp41 = icmp uge %struct.glyph* %47, %48
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.40
  br label %for.end.103

if.end.44:                                        ; preds = %if.end.40
  %49 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %type = getelementptr inbounds %struct.glyph, %struct.glyph* %49, i32 0, i32 6
  %50 = bitcast i24* %type to i32*
  %bf.load45 = load i32, i32* %50, align 8
  %bf.clear46 = and i32 %bf.load45, -8
  store i32 %bf.clear46, i32* %50, align 8
  %51 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %pixel_width47 = getelementptr inbounds %struct.glyph, %struct.glyph* %51, i32 0, i32 2
  store i16 1, i16* %pixel_width47, align 2
  %52 = load i32, i32* %face_id.addr, align 4
  %53 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %face_id48 = getelementptr inbounds %struct.glyph, %struct.glyph* %53, i32 0, i32 7
  %54 = bitcast i24* %face_id48 to i32*
  %bf.load49 = load i32, i32* %54, align 4
  %bf.value = and i32 %52, 1048575
  %bf.clear50 = and i32 %bf.load49, -1048576
  %bf.set = or i32 %bf.clear50, %bf.value
  store i32 %bf.set, i32* %54, align 4
  %55 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %55, i32 0, i32 6
  %56 = bitcast i24* %padding_p to i32*
  %bf.load51 = load i32, i32* %56, align 8
  %bf.clear52 = and i32 %bf.load51, -129
  store i32 %bf.clear52, i32* %56, align 8
  %57 = load %struct.it*, %struct.it** %it.addr, align 8
  %position = getelementptr inbounds %struct.it, %struct.it* %57, i32 0, i32 48
  %charpos = getelementptr inbounds %struct.text_pos, %struct.text_pos* %position, i32 0, i32 0
  %58 = load i64, i64* %charpos, align 8
  %59 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %charpos53 = getelementptr inbounds %struct.glyph, %struct.glyph* %59, i32 0, i32 0
  store i64 %58, i64* %charpos53, align 8
  %60 = load %struct.it*, %struct.it** %it.addr, align 8
  %object = getelementptr inbounds %struct.it, %struct.it* %60, i32 0, i32 47
  %61 = load i64, i64* %object, align 8
  %62 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %object54 = getelementptr inbounds %struct.glyph, %struct.glyph* %62, i32 0, i32 1
  store i64 %61, i64* %object54, align 8
  %63 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_p = getelementptr inbounds %struct.it, %struct.it* %63, i32 0, i32 79
  %64 = bitcast i24* %bidi_p to i32*
  %bf.load55 = load i32, i32* %64, align 8
  %bf.lshr56 = lshr i32 %bf.load55, 20
  %bf.clear57 = and i32 %bf.lshr56, 1
  %bf.cast58 = trunc i32 %bf.clear57 to i1
  br i1 %bf.cast58, label %if.then.59, label %if.else

if.then.59:                                       ; preds = %if.end.44
  %65 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_it = getelementptr inbounds %struct.it, %struct.it* %65, i32 0, i32 80
  %resolved_level = getelementptr inbounds %struct.bidi_it, %struct.bidi_it* %bidi_it, i32 0, i32 8
  %66 = load i8, i8* %resolved_level, align 1
  %conv60 = sext i8 %66 to i32
  %67 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %resolved_level61 = getelementptr inbounds %struct.glyph, %struct.glyph* %67, i32 0, i32 6
  %68 = bitcast i24* %resolved_level61 to i32*
  %bf.load62 = load i32, i32* %68, align 8
  %bf.value63 = and i32 %conv60, 127
  %bf.shl = shl i32 %bf.value63, 10
  %bf.clear64 = and i32 %bf.load62, -130049
  %bf.set65 = or i32 %bf.clear64, %bf.shl
  store i32 %bf.set65, i32* %68, align 8
  %69 = load %struct.it*, %struct.it** %it.addr, align 8
  %bidi_it66 = getelementptr inbounds %struct.it, %struct.it* %69, i32 0, i32 80
  %type67 = getelementptr inbounds %struct.bidi_it, %struct.bidi_it* %bidi_it66, i32 0, i32 5
  %70 = load i32, i32* %type67, align 4
  %71 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %bidi_type = getelementptr inbounds %struct.glyph, %struct.glyph* %71, i32 0, i32 6
  %72 = bitcast i24* %bidi_type to i32*
  %bf.load68 = load i32, i32* %72, align 8
  %bf.value69 = and i32 %70, 7
  %bf.shl70 = shl i32 %bf.value69, 17
  %bf.clear71 = and i32 %bf.load68, -917505
  %bf.set72 = or i32 %bf.clear71, %bf.shl70
  store i32 %bf.set72, i32* %72, align 8
  br label %if.end.79

if.else:                                          ; preds = %if.end.44
  %73 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %resolved_level73 = getelementptr inbounds %struct.glyph, %struct.glyph* %73, i32 0, i32 6
  %74 = bitcast i24* %resolved_level73 to i32*
  %bf.load74 = load i32, i32* %74, align 8
  %bf.clear75 = and i32 %bf.load74, -130049
  store i32 %bf.clear75, i32* %74, align 8
  %75 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %bidi_type76 = getelementptr inbounds %struct.glyph, %struct.glyph* %75, i32 0, i32 6
  %76 = bitcast i24* %bidi_type76 to i32*
  %bf.load77 = load i32, i32* %76, align 8
  %bf.clear78 = and i32 %bf.load77, -917505
  store i32 %bf.clear78, i32* %76, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.else, %if.then.59
  store i32 0, i32* %i, align 4
  br label %for.cond.80

for.cond.80:                                      ; preds = %for.inc.101, %if.end.79
  %77 = load i32, i32* %i, align 4
  %78 = load %struct.it*, %struct.it** %it.addr, align 8
  %nglyphs = getelementptr inbounds %struct.it, %struct.it* %78, i32 0, i32 61
  %79 = load i32, i32* %nglyphs, align 4
  %cmp81 = icmp slt i32 %77, %79
  br i1 %cmp81, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.80
  %80 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %81 = load %struct.glyph*, %struct.glyph** %end, align 8
  %cmp83 = icmp ult %struct.glyph* %80, %81
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.80
  %82 = phi i1 [ false, %for.cond.80 ], [ %cmp83, %land.rhs ]
  br i1 %82, label %for.body.85, label %for.end.103

for.body.85:                                      ; preds = %land.end
  %83 = load i32, i32* %i, align 4
  %cmp86 = icmp sgt i32 %83, 0
  br i1 %cmp86, label %if.then.88, label %if.end.91

if.then.88:                                       ; preds = %for.body.85
  %84 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %arrayidx89 = getelementptr inbounds %struct.glyph, %struct.glyph* %84, i64 0
  %85 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %arrayidx90 = getelementptr inbounds %struct.glyph, %struct.glyph* %85, i64 -1
  %86 = bitcast %struct.glyph* %arrayidx89 to i8*
  %87 = bitcast %struct.glyph* %arrayidx90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 48, i32 8, i1 false)
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.88, %for.body.85
  %88 = load i32, i32* %i, align 4
  %idxprom92 = sext i32 %88 to i64
  %89 = load i8*, i8** %str.addr, align 8
  %arrayidx93 = getelementptr inbounds i8, i8* %89, i64 %idxprom92
  %90 = load i8, i8* %arrayidx93, align 1
  %conv94 = sext i8 %90 to i32
  %91 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %u = getelementptr inbounds %struct.glyph, %struct.glyph* %91, i32 0, i32 9
  %ch = bitcast %union.anon.1* %u to i32*
  store i32 %conv94, i32* %ch, align 4
  %92 = load %struct.it*, %struct.it** %it.addr, align 8
  %area95 = getelementptr inbounds %struct.it, %struct.it* %92, i32 0, i32 60
  %93 = load i32, i32* %area95, align 4
  %idxprom96 = sext i32 %93 to i64
  %94 = load %struct.it*, %struct.it** %it.addr, align 8
  %glyph_row97 = getelementptr inbounds %struct.it, %struct.it* %94, i32 0, i32 59
  %95 = load %struct.glyph_row*, %struct.glyph_row** %glyph_row97, align 8
  %used98 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %95, i32 0, i32 1
  %arrayidx99 = getelementptr inbounds [4 x i16], [4 x i16]* %used98, i32 0, i64 %idxprom96
  %96 = load i16, i16* %arrayidx99, align 2
  %inc = add i16 %96, 1
  store i16 %inc, i16* %arrayidx99, align 2
  %97 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %incdec.ptr100 = getelementptr inbounds %struct.glyph, %struct.glyph* %97, i32 1
  store %struct.glyph* %incdec.ptr100, %struct.glyph** %glyph, align 8
  br label %for.inc.101

for.inc.101:                                      ; preds = %if.end.91
  %98 = load i32, i32* %i, align 4
  %inc102 = add nsw i32 %98, 1
  store i32 %inc102, i32* %i, align 4
  br label %for.cond.80

for.end.103:                                      ; preds = %if.then.43, %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_menu_make_room(%struct.tty_menu_struct* %menu) #0 {
entry:
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %allocated2 = alloca i64, align 8
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  %0 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %allocated = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %0, i32 0, i32 4
  %1 = load i64, i64* %allocated, align 8
  %2 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %2, i32 0, i32 0
  %3 = load i32, i32* %count, align 4
  %conv = sext i32 %3 to i64
  %cmp = icmp eq i64 %1, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %allocated3 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %4, i32 0, i32 4
  %5 = load i64, i64* %allocated3, align 8
  store i64 %5, i64* %allocated2, align 8
  %6 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %6, i32 0, i32 1
  %7 = load i8**, i8*** %text, align 8
  %8 = bitcast i8** %7 to i8*
  %call = call i8* @xpalloc(i8* %8, i64* %allocated2, i64 1, i64 -1, i64 8)
  %9 = bitcast i8* %call to i8**
  %10 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text4 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %10, i32 0, i32 1
  store i8** %9, i8*** %text4, align 8
  %11 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text5 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %11, i32 0, i32 1
  %12 = load i8**, i8*** %text5, align 8
  %13 = bitcast i8** %12 to i8*
  %14 = load i64, i64* %allocated2, align 8
  %mul = mul i64 %14, 8
  %call6 = call i8* @xrealloc(i8* %13, i64 %mul)
  %15 = bitcast i8* %call6 to i8**
  %16 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text7 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %16, i32 0, i32 1
  store i8** %15, i8*** %text7, align 8
  %17 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %17, i32 0, i32 2
  %18 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %19 = bitcast %struct.tty_menu_struct** %18 to i8*
  %20 = load i64, i64* %allocated2, align 8
  %mul8 = mul i64 %20, 8
  %call9 = call i8* @xrealloc(i8* %19, i64 %mul8)
  %21 = bitcast i8* %call9 to %struct.tty_menu_struct**
  %22 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu10 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %22, i32 0, i32 2
  store %struct.tty_menu_struct** %21, %struct.tty_menu_struct*** %submenu10, align 8
  %23 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panenumber = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %23, i32 0, i32 3
  %24 = load i32*, i32** %panenumber, align 8
  %25 = bitcast i32* %24 to i8*
  %26 = load i64, i64* %allocated2, align 8
  %mul11 = mul i64 %26, 4
  %call12 = call i8* @xrealloc(i8* %25, i64 %mul11)
  %27 = bitcast i8* %call12 to i32*
  %28 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panenumber13 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %28, i32 0, i32 3
  store i32* %27, i32** %panenumber13, align 8
  %29 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %help_text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %29, i32 0, i32 7
  %30 = load i8**, i8*** %help_text, align 8
  %31 = bitcast i8** %30 to i8*
  %32 = load i64, i64* %allocated2, align 8
  %mul14 = mul i64 %32, 8
  %call15 = call i8* @xrealloc(i8* %31, i64 %mul14)
  %33 = bitcast i8* %call15 to i8**
  %34 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %help_text16 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %34, i32 0, i32 7
  store i8** %33, i8*** %help_text16, align 8
  %35 = load i64, i64* %allocated2, align 8
  %36 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %allocated17 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %36, i32 0, i32 4
  store i64 %35, i64* %allocated17, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @menu_item_width(i8*) #1

declare void @xfree(i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct.tty_menu_struct* @tty_menu_search_pane(%struct.tty_menu_struct* %menu, i32 %pane) #0 {
entry:
  %retval = alloca %struct.tty_menu_struct*, align 8
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %pane.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %try = alloca %struct.tty_menu_struct*, align 8
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  store i32 %pane, i32* %pane.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %1, i32 0, i32 0
  %2 = load i32, i32* %count, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %4, i32 0, i32 2
  %5 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %arrayidx = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %5, i64 %idxprom
  %6 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx, align 8
  %tobool = icmp ne %struct.tty_menu_struct* %6, null
  br i1 %tobool, label %if.then, label %if.end.14

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %pane.addr, align 4
  %8 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %8 to i64
  %9 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panenumber = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %9, i32 0, i32 3
  %10 = load i32*, i32** %panenumber, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i64 %idxprom1
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %7, %11
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %12 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %12 to i64
  %13 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu6 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %13, i32 0, i32 2
  %14 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu6, align 8
  %arrayidx7 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %14, i64 %idxprom5
  %15 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx7, align 8
  store %struct.tty_menu_struct* %15, %struct.tty_menu_struct** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %16 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %16 to i64
  %17 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu9 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %17, i32 0, i32 2
  %18 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu9, align 8
  %arrayidx10 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %18, i64 %idxprom8
  %19 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx10, align 8
  %20 = load i32, i32* %pane.addr, align 4
  %call = call %struct.tty_menu_struct* @tty_menu_search_pane(%struct.tty_menu_struct* %19, i32 %20)
  store %struct.tty_menu_struct* %call, %struct.tty_menu_struct** %try, align 8
  %21 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %try, align 8
  %tobool11 = icmp ne %struct.tty_menu_struct* %21, null
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end
  %22 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %try, align 8
  store %struct.tty_menu_struct* %22, %struct.tty_menu_struct** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.tty_menu_struct* null, %struct.tty_menu_struct** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.12, %if.then.4
  %24 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %retval
  ret %struct.tty_menu_struct* %24
}

; Function Attrs: nounwind uwtable
define internal void @tty_menu_calc_size(%struct.tty_menu_struct* %menu, i32* %width, i32* %height) #0 {
entry:
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %h2 = alloca i32, align 4
  %w2 = alloca i32, align 4
  %maxsubwidth = alloca i32, align 4
  %maxheight = alloca i32, align 4
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  %0 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %width1 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %0, i32 0, i32 6
  %1 = load i32, i32* %width1, align 4
  store i32 %1, i32* %maxsubwidth, align 4
  %2 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %2, i32 0, i32 0
  %3 = load i32, i32* %count, align 4
  store i32 %3, i32* %maxheight, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count2 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %5, i32 0, i32 0
  %6 = load i32, i32* %count2, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %8, i32 0, i32 2
  %9 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %arrayidx = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %9, i64 %idxprom
  %10 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx, align 8
  %tobool = icmp ne %struct.tty_menu_struct* %10, null
  br i1 %tobool, label %if.then, label %if.end.12

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %11 to i64
  %12 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu4 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %12, i32 0, i32 2
  %13 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu4, align 8
  %arrayidx5 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %13, i64 %idxprom3
  %14 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx5, align 8
  call void @tty_menu_calc_size(%struct.tty_menu_struct* %14, i32* %w2, i32* %h2)
  %15 = load i32, i32* %w2, align 4
  %16 = load i32, i32* %maxsubwidth, align 4
  %cmp6 = icmp sgt i32 %15, %16
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then
  %17 = load i32, i32* %w2, align 4
  store i32 %17, i32* %maxsubwidth, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.7, %if.then
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %h2, align 4
  %add = add nsw i32 %18, %19
  %20 = load i32, i32* %maxheight, align 4
  %cmp8 = icmp sgt i32 %add, %20
  br i1 %cmp8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %h2, align 4
  %add10 = add nsw i32 %21, %22
  store i32 %add10, i32* %maxheight, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.9, %if.end
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.12
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %maxsubwidth, align 4
  %25 = load i32*, i32** %width.addr, align 8
  store i32 %24, i32* %25, align 4
  %26 = load i32, i32* %maxheight, align 4
  %27 = load i32*, i32** %height.addr, align 8
  store i32 %26, i32* %27, align 4
  ret void
}

declare i8* @XSAVE_POINTER(i64, i32) #1

declare void @block_input() #1

declare void @set_buffer_internal(%struct.buffer*) #1

declare void @unblock_input() #1

declare noalias i8* @xnmalloc(i64, i64) #1

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

declare i32 @lookup_derived_face(%struct.frame*, i64, i32, i1 zeroext) #1

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #4

declare void @update_frame_with_menu(%struct.frame*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct.glyph_matrix* @save_and_enable_current_matrix(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %i = alloca i32, align 4
  %saved = alloca %struct.glyph_matrix*, align 8
  %from = alloca %struct.glyph_row*, align 8
  %to = alloca %struct.glyph_row*, align 8
  %nbytes = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %call = call noalias i8* @xzalloc(i64 104)
  %0 = bitcast i8* %call to %struct.glyph_matrix*
  store %struct.glyph_matrix* %0, %struct.glyph_matrix** %saved, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 25
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %2, i32 0, i32 3
  %3 = load i32, i32* %nrows, align 4
  %4 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %nrows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %4, i32 0, i32 3
  store i32 %3, i32* %nrows1, align 4
  %5 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %nrows2 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %5, i32 0, i32 3
  %6 = load i32, i32* %nrows2, align 4
  %conv = sext i32 %6 to i64
  %mul = mul i64 %conv, 256
  %call3 = call noalias i8* @xzalloc(i64 %mul)
  %7 = bitcast i8* %call3 to %struct.glyph_row*
  %8 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %8, i32 0, i32 1
  store %struct.glyph_row* %7, %struct.glyph_row** %rows, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %nrows4 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %10, i32 0, i32 3
  %11 = load i32, i32* %nrows4, align 4
  %cmp = icmp slt i32 %9, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %current_matrix6 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 25
  %13 = load %struct.glyph_matrix*, %struct.glyph_matrix** %current_matrix6, align 8
  %rows7 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %13, i32 0, i32 1
  %14 = load %struct.glyph_row*, %struct.glyph_row** %rows7, align 8
  %15 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %14, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %from, align 8
  %16 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  %rows8 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %16, i32 0, i32 1
  %17 = load %struct.glyph_row*, %struct.glyph_row** %rows8, align 8
  %18 = load i32, i32* %i, align 4
  %idx.ext9 = sext i32 %18 to i64
  %add.ptr10 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %17, i64 %idx.ext9
  store %struct.glyph_row* %add.ptr10, %struct.glyph_row** %to, align 8
  %19 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %20 = load i16, i16* %arrayidx, align 2
  %conv11 = sext i16 %20 to i64
  %mul12 = mul i64 %conv11, 48
  store i64 %mul12, i64* %nbytes, align 8
  %21 = load i64, i64* %nbytes, align 8
  %call13 = call noalias i8* @xmalloc(i64 %21)
  %22 = bitcast i8* %call13 to %struct.glyph*
  %23 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %23, i32 0, i32 0
  %arrayidx14 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  store %struct.glyph* %22, %struct.glyph** %arrayidx14, align 8
  %24 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs15 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs15, i32 0, i64 1
  %25 = load %struct.glyph*, %struct.glyph** %arrayidx16, align 8
  %26 = bitcast %struct.glyph* %25 to i8*
  %27 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs17 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %27, i32 0, i32 0
  %arrayidx18 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs17, i32 0, i64 1
  %28 = load %struct.glyph*, %struct.glyph** %arrayidx18, align 8
  %29 = bitcast %struct.glyph* %28 to i8*
  %30 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %29, i64 %30, i32 8, i1 false)
  %31 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used19 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %31, i32 0, i32 1
  %arrayidx20 = getelementptr inbounds [4 x i16], [4 x i16]* %used19, i32 0, i64 1
  %32 = load i16, i16* %arrayidx20, align 2
  %33 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used21 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %33, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [4 x i16], [4 x i16]* %used21, i32 0, i64 1
  store i16 %32, i16* %arrayidx22, align 2
  %34 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %34, i32 0, i32 22
  %35 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %35, align 4
  %bf.clear = and i64 %bf.load, -1025
  %bf.set = or i64 %bf.clear, 1024
  store i64 %bf.set, i64* %35, align 4
  %36 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %hash = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %36, i32 0, i32 2
  %37 = load i32, i32* %hash, align 4
  %38 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %hash23 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %38, i32 0, i32 2
  store i32 %37, i32* %hash23, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %39 = load i32, i32* %i, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved, align 8
  ret %struct.glyph_matrix* %40
}

; Function Attrs: nounwind uwtable
define internal void @tty_menu_display(%struct.tty_menu_struct* %menu, i32 %x, i32 %y, i32 %pn, i32* %faces, i32 %mx, i32 %my, i32 %first_item, i1 zeroext %disp_help) #0 {
entry:
  %menu.addr = alloca %struct.tty_menu_struct*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %pn.addr = alloca i32, align 4
  %faces.addr = alloca i32*, align 8
  %mx.addr = alloca i32, align 4
  %my.addr = alloca i32, align 4
  %first_item.addr = alloca i32, align 4
  %disp_help.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %face = alloca i32, align 4
  %width = alloca i32, align 4
  %enabled = alloca i32, align 4
  %mousehere = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %sf = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %max_items = alloca i32, align 4
  %max_width = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.tty_menu_struct* %menu, %struct.tty_menu_struct** %menu.addr, align 8
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32 %pn, i32* %pn.addr, align 4
  store i32* %faces, i32** %faces.addr, align 8
  store i32 %mx, i32* %mx.addr, align 4
  store i32 %my, i32* %my.addr, align 4
  store i32 %first_item, i32* %first_item.addr, align 4
  %frombool = zext i1 %disp_help to i8
  store i8 %frombool, i8* %disp_help.addr, align 1
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub1 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub1 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  store %struct.frame* %cond, %struct.frame** %sf, align 8
  %9 = load %struct.frame*, %struct.frame** %sf, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 26
  %10 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %10, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp2 = icmp eq i32 %bf.cast, 1
  br i1 %cmp2, label %cond.true.9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %11 = load %struct.frame*, %struct.frame** %sf, align 8
  %output_method3 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 26
  %12 = bitcast i48* %output_method3 to i64*
  %bf.load4 = load i64, i64* %12, align 8
  %bf.lshr5 = lshr i64 %bf.load4, 23
  %bf.clear6 = and i64 %bf.lshr5, 7
  %bf.cast7 = trunc i64 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 3
  br i1 %cmp8, label %cond.true.9, label %cond.false.12

cond.true.9:                                      ; preds = %lor.lhs.false, %cond.end
  %13 = load %struct.frame*, %struct.frame** %sf, align 8
  %terminal10 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 61
  %14 = load %struct.terminal*, %struct.terminal** %terminal10, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %14, i32 0, i32 12
  %tty11 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %tty11, align 8
  br label %cond.end.13

cond.false.12:                                    ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.13

cond.end.13:                                      ; preds = %16, %cond.true.9
  %cond14 = phi %struct.tty_display_info* [ %15, %cond.true.9 ], [ null, %16 ]
  store %struct.tty_display_info* %cond14, %struct.tty_display_info** %tty, align 8
  %17 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %17, i32 0, i32 0
  %18 = load i32, i32* %count, align 4
  %19 = load i32, i32* %first_item.addr, align 4
  %sub15 = sub nsw i32 %18, %19
  %20 = load %struct.frame*, %struct.frame** %sf, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 39
  %21 = load i32, i32* %total_lines, align 4
  %sub16 = sub nsw i32 %21, 1
  %22 = load i32, i32* %y.addr, align 4
  %sub17 = sub nsw i32 %sub16, %22
  %cmp18 = icmp slt i32 %sub15, %sub17
  br i1 %cmp18, label %cond.true.19, label %cond.false.22

cond.true.19:                                     ; preds = %cond.end.13
  %23 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %count20 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %23, i32 0, i32 0
  %24 = load i32, i32* %count20, align 4
  %25 = load i32, i32* %first_item.addr, align 4
  %sub21 = sub nsw i32 %24, %25
  br label %cond.end.26

cond.false.22:                                    ; preds = %cond.end.13
  %26 = load %struct.frame*, %struct.frame** %sf, align 8
  %total_lines23 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 39
  %27 = load i32, i32* %total_lines23, align 4
  %sub24 = sub nsw i32 %27, 1
  %28 = load i32, i32* %y.addr, align 4
  %sub25 = sub nsw i32 %sub24, %28
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.22, %cond.true.19
  %cond27 = phi i32 [ %sub21, %cond.true.19 ], [ %sub25, %cond.false.22 ]
  store i32 %cond27, i32* %max_items, align 4
  store i8* null, i8** @menu_help_message, align 8
  %29 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %width28 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %29, i32 0, i32 6
  %30 = load i32, i32* %width28, align 4
  store i32 %30, i32* %width, align 4
  %31 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %31, i32 0, i32 10
  %32 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %32, i32 0, i32 1
  %33 = load i32, i32* %cm_curX, align 4
  store i32 %33, i32* %col, align 4
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 10
  %35 = load %struct.cm*, %struct.cm** %Wcm29, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %35, i32 0, i32 0
  %36 = load i32, i32* %cm_curY, align 4
  store i32 %36, i32* %row, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.26
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %max_items, align 4
  %cmp30 = icmp slt i32 %37, %38
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load i32, i32* %width, align 4
  %add = add nsw i32 %39, 2
  store i32 %add, i32* %max_width, align 4
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %first_item.addr, align 4
  %add31 = add nsw i32 %40, %41
  store i32 %add31, i32* %j, align 4
  %42 = load i32, i32* %j, align 4
  %idxprom = sext i32 %42 to i64
  %43 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %43, i32 0, i32 2
  %44 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu, align 8
  %arrayidx = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %44, i64 %idxprom
  %45 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx, align 8
  %tobool = icmp ne %struct.tty_menu_struct* %45, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %46 = load i32, i32* %max_width, align 4
  %add32 = add nsw i32 %46, 2
  store i32 %add32, i32* %max_width, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %47 = load i32, i32* %j, align 4
  %idxprom33 = sext i32 %47 to i64
  %48 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu34 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %48, i32 0, i32 2
  %49 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu34, align 8
  %arrayidx35 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %49, i64 %idxprom33
  %50 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx35, align 8
  %tobool36 = icmp ne %struct.tty_menu_struct* %50, null
  br i1 %tobool36, label %lor.rhs, label %land.lhs.true.37

land.lhs.true.37:                                 ; preds = %if.end
  %51 = load i32, i32* %j, align 4
  %idxprom38 = sext i32 %51 to i64
  %52 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %panenumber = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %52, i32 0, i32 3
  %53 = load i32*, i32** %panenumber, align 8
  %arrayidx39 = getelementptr inbounds i32, i32* %53, i64 %idxprom38
  %54 = load i32, i32* %arrayidx39, align 4
  %tobool40 = icmp ne i32 %54, 0
  br i1 %tobool40, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true.37, %if.end
  %55 = load i32, i32* %j, align 4
  %idxprom41 = sext i32 %55 to i64
  %56 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu42 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %56, i32 0, i32 2
  %57 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu42, align 8
  %arrayidx43 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %57, i64 %idxprom41
  %58 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx43, align 8
  %tobool44 = icmp ne %struct.tty_menu_struct* %58, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true.37
  %59 = phi i1 [ true, %land.lhs.true.37 ], [ %tobool44, %lor.rhs ]
  %lor.ext = zext i1 %59 to i32
  store i32 %lor.ext, i32* %enabled, align 4
  %60 = load i32, i32* %y.addr, align 4
  %61 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %60, %61
  %62 = load i32, i32* %my.addr, align 4
  %cmp46 = icmp eq i32 %add45, %62
  br i1 %cmp46, label %land.lhs.true.47, label %land.end

land.lhs.true.47:                                 ; preds = %lor.end
  %63 = load i32, i32* %x.addr, align 4
  %64 = load i32, i32* %mx.addr, align 4
  %cmp48 = icmp sle i32 %63, %64
  br i1 %cmp48, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.47
  %65 = load i32, i32* %mx.addr, align 4
  %66 = load i32, i32* %x.addr, align 4
  %67 = load i32, i32* %max_width, align 4
  %add49 = add nsw i32 %66, %67
  %cmp50 = icmp slt i32 %65, %add49
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.47, %lor.end
  %68 = phi i1 [ false, %land.lhs.true.47 ], [ false, %lor.end ], [ %cmp50, %land.rhs ]
  %land.ext = zext i1 %68 to i32
  store i32 %land.ext, i32* %mousehere, align 4
  %69 = load i32, i32* %enabled, align 4
  %70 = load i32, i32* %mousehere, align 4
  %mul = mul nsw i32 %70, 2
  %add51 = add nsw i32 %69, %mul
  %idxprom52 = sext i32 %add51 to i64
  %71 = load i32*, i32** %faces.addr, align 8
  %arrayidx53 = getelementptr inbounds i32, i32* %71, i64 %idxprom52
  %72 = load i32, i32* %arrayidx53, align 4
  store i32 %72, i32* %face, align 4
  %73 = load i8, i8* %disp_help.addr, align 1
  %tobool54 = trunc i8 %73 to i1
  br i1 %tobool54, label %land.lhs.true.55, label %if.end.63

land.lhs.true.55:                                 ; preds = %land.end
  %74 = load i32, i32* %enabled, align 4
  %75 = load i32, i32* %mousehere, align 4
  %mul56 = mul nsw i32 %75, 2
  %add57 = add nsw i32 %74, %mul56
  %cmp58 = icmp sge i32 %add57, 2
  br i1 %cmp58, label %if.then.59, label %if.end.63

if.then.59:                                       ; preds = %land.lhs.true.55
  %76 = load i32, i32* %j, align 4
  %idxprom60 = sext i32 %76 to i64
  %77 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %help_text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %77, i32 0, i32 7
  %78 = load i8**, i8*** %help_text, align 8
  %arrayidx61 = getelementptr inbounds i8*, i8** %78, i64 %idxprom60
  %79 = load i8*, i8** %arrayidx61, align 8
  store i8* %79, i8** @menu_help_message, align 8
  %80 = load i32, i32* %pn.addr, align 4
  %sub62 = sub nsw i32 %80, 1
  store i32 %sub62, i32* @menu_help_paneno, align 4
  %81 = load i32, i32* %j, align 4
  store i32 %81, i32* @menu_help_itemno, align 4
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.59, %land.lhs.true.55, %land.end
  %82 = load i32, i32* %mousehere, align 4
  %tobool64 = icmp ne i32 %82, 0
  br i1 %tobool64, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %if.end.63
  %83 = load i32, i32* %y.addr, align 4
  %84 = load i32, i32* %i, align 4
  %add66 = add nsw i32 %83, %84
  store i32 %add66, i32* %row, align 4
  %85 = load i32, i32* %x.addr, align 4
  store i32 %85, i32* %col, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %if.end.63
  %86 = load i32, i32* %j, align 4
  %idxprom68 = sext i32 %86 to i64
  %87 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %text = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %87, i32 0, i32 1
  %88 = load i8**, i8*** %text, align 8
  %arrayidx69 = getelementptr inbounds i8*, i8** %88, i64 %idxprom68
  %89 = load i8*, i8** %arrayidx69, align 8
  %90 = load i32, i32* %max_width, align 4
  %91 = load i32, i32* %face, align 4
  %92 = load i32, i32* %x.addr, align 4
  %93 = load i32, i32* %y.addr, align 4
  %94 = load i32, i32* %i, align 4
  %add70 = add nsw i32 %93, %94
  %95 = load i32, i32* %j, align 4
  %idxprom71 = sext i32 %95 to i64
  %96 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %menu.addr, align 8
  %submenu72 = getelementptr inbounds %struct.tty_menu_struct, %struct.tty_menu_struct* %96, i32 0, i32 2
  %97 = load %struct.tty_menu_struct**, %struct.tty_menu_struct*** %submenu72, align 8
  %arrayidx73 = getelementptr inbounds %struct.tty_menu_struct*, %struct.tty_menu_struct** %97, i64 %idxprom71
  %98 = load %struct.tty_menu_struct*, %struct.tty_menu_struct** %arrayidx73, align 8
  %cmp74 = icmp ne %struct.tty_menu_struct* %98, null
  call void @display_tty_menu_item(i8* %89, i32 %90, i32 %91, i32 %92, i32 %add70, i1 zeroext %cmp74)
  br label %for.inc

for.inc:                                          ; preds = %if.end.67
  %99 = load i32, i32* %i, align 4
  %inc = add nsw i32 %99, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %100 = load %struct.frame*, %struct.frame** %sf, align 8
  %101 = load i32, i32* %row, align 4
  %102 = load i32, i32* %col, align 4
  call void @update_frame_with_menu(%struct.frame* %100, i32 %101, i32 %102)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_hide_cursor(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %cursor_hidden = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %0, i32 0, i32 75
  %bf.load = load i8, i8* %cursor_hidden, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = trunc i8 %bf.clear to i1
  %conv = zext i1 %bf.cast to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %cursor_hidden2 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %1, i32 0, i32 75
  %bf.load3 = load i8, i8* %cursor_hidden2, align 4
  %bf.clear4 = and i8 %bf.load3, -2
  %bf.set = or i8 %bf.clear4, 1
  store i8 %bf.set, i8* %cursor_hidden2, align 4
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_cursor_invisible = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 49
  %3 = load i8*, i8** %TS_cursor_invisible, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %do.body
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  store %struct.tty_display_info* %4, %struct.tty_display_info** @current_tty, align 8
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_cursor_invisible6 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %5, i32 0, i32 49
  %6 = load i8*, i8** %TS_cursor_invisible6, align 8
  %7 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 39
  %10 = load i32, i32* %total_lines, align 4
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 10
  %12 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %12, i32 0, i32 0
  %13 = load i32, i32* %cm_curY, align 4
  %sub7 = sub nsw i32 %10, %13
  call void @tputs(i8* %6, i32 %sub7, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then.5, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %do.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @read_menu_input(%struct.frame* %sf, i32* %x, i32* %y, i32 %min_y, i32 %max_y, i8* %first_time) #0 {
entry:
  %retval = alloca i32, align 4
  %sf.addr = alloca %struct.frame*, align 8
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %min_y.addr = alloca i32, align 4
  %max_y.addr = alloca i32, align 4
  %first_time.addr = alloca i8*, align 8
  %cmd = alloca i64, align 8
  %usable_input = alloca i8, align 1
  %st = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  %saved_mouse_tracking = alloca i64, align 8
  store %struct.frame* %sf, %struct.frame** %sf.addr, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  store i32 %min_y, i32* %min_y.addr, align 4
  store i32 %max_y, i32* %max_y.addr, align 4
  store i8* %first_time, i8** %first_time.addr, align 8
  %0 = load i8*, i8** %first_time.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %first_time.addr, align 8
  store i8 0, i8* %2, align 1
  %3 = load %struct.frame*, %struct.frame** %sf.addr, align 8
  %mouse_moved = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 26
  %4 = bitcast i48* %mouse_moved to i64*
  %bf.load = load i64, i64* %4, align 8
  %bf.clear = and i64 %bf.load, -1048577
  %bf.set = or i64 %bf.clear, 1048576
  store i64 %bf.set, i64* %4, align 8
  br label %if.end.85

if.else:                                          ; preds = %entry
  store i8 1, i8* %usable_input, align 1
  store i32 0, i32* %st, align 4
  %5 = load %struct.frame*, %struct.frame** %sf.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 26
  %6 = bitcast i48* %output_method to i64*
  %bf.load1 = load i64, i64* %6, align 8
  %bf.lshr = lshr i64 %bf.load1, 23
  %bf.clear2 = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear2 to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %7 = load %struct.frame*, %struct.frame** %sf.addr, align 8
  %output_method3 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 26
  %8 = bitcast i48* %output_method3 to i64*
  %bf.load4 = load i64, i64* %8, align 8
  %bf.lshr5 = lshr i64 %bf.load4, 23
  %bf.clear6 = and i64 %bf.lshr5, 7
  %bf.cast7 = trunc i64 %bf.clear6 to i32
  %cmp8 = icmp eq i32 %bf.cast7, 3
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.else
  %9 = load %struct.frame*, %struct.frame** %sf.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 61
  %10 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 12
  %tty9 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty9, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %12, %cond.true
  %cond = phi %struct.tty_display_info* [ %11, %cond.true ], [ null, %12 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %13 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 368), align 8
  store i64 %13, i64* %saved_mouse_tracking, align 8
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %showing_menu = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 75
  %bf.load10 = load i8, i8* %showing_menu, align 4
  %bf.clear11 = and i8 %bf.load10, -5
  %bf.set12 = or i8 %bf.clear11, 4
  store i8 %bf.set12, i8* %showing_menu, align 4
  %call = call i64 @builtin_lisp_symbol(i32 901)
  store i64 %call, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 368), align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %cond.end
  %call13 = call i64 @read_menu_command()
  store i64 %call13, i64* %cmd, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i64, i64* %cmd, align 8
  %call14 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp15 = icmp eq i64 %15, %call14
  br i1 %cmp15, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %showing_menu16 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 75
  %bf.load17 = load i8, i8* %showing_menu16, align 4
  %bf.clear18 = and i8 %bf.load17, -5
  store i8 %bf.clear18, i8* %showing_menu16, align 4
  %17 = load i64, i64* %saved_mouse_tracking, align 8
  store i64 %17, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 368), align 8
  %18 = load i64, i64* %cmd, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp20 = icmp eq i64 %18, %call19
  br i1 %cmp20, label %if.then.34, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %do.end
  %19 = load i64, i64* %cmd, align 8
  %call22 = call i64 @builtin_lisp_symbol(i32 944)
  %cmp23 = icmp eq i64 %19, %call22
  br i1 %cmp23, label %if.then.34, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %lor.lhs.false.21
  %20 = load %struct.frame*, %struct.frame** %sf.addr, align 8
  %21 = load i64, i64* @selected_frame, align 8
  %call25 = call zeroext i1 @FRAMEP(i64 %21)
  br i1 %call25, label %land.lhs.true, label %cond.false.30

land.lhs.true:                                    ; preds = %lor.lhs.false.24
  %22 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %22, 5
  %23 = inttoptr i64 %sub to i8*
  %24 = bitcast i8* %23 to %struct.frame*
  %terminal26 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 61
  %25 = load %struct.terminal*, %struct.terminal** %terminal26, align 8
  %cmp27 = icmp ne %struct.terminal* %25, null
  br i1 %cmp27, label %cond.true.28, label %cond.false.30

cond.true.28:                                     ; preds = %land.lhs.true
  %26 = load i64, i64* @selected_frame, align 8
  %sub29 = sub nsw i64 %26, 5
  %27 = inttoptr i64 %sub29 to i8*
  %28 = bitcast i8* %27 to %struct.frame*
  br label %cond.end.31

cond.false.30:                                    ; preds = %land.lhs.true, %lor.lhs.false.24
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.31

cond.end.31:                                      ; preds = %29, %cond.true.28
  %cond32 = phi %struct.frame* [ %28, %cond.true.28 ], [ null, %29 ]
  %cmp33 = icmp ne %struct.frame* %20, %cond32
  br i1 %cmp33, label %if.then.34, label %if.end

if.then.34:                                       ; preds = %cond.end.31, %lor.lhs.false.21, %do.end
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end.31
  %30 = load i64, i64* %cmd, align 8
  %call35 = call i64 @builtin_lisp_symbol(i32 946)
  %cmp36 = icmp eq i64 %30, %call35
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %if.end
  %31 = load i32*, i32** %x.addr, align 8
  %32 = load i32*, i32** %y.addr, align 8
  call void @mouse_get_xy(i32* %31, i32* %32)
  br label %if.end.77

if.else.38:                                       ; preds = %if.end
  %33 = load i64, i64* %cmd, align 8
  %call39 = call i64 @builtin_lisp_symbol(i32 949)
  %cmp40 = icmp eq i64 %33, %call39
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %if.else.38
  store i8 0, i8* %usable_input, align 1
  store i32 2, i32* %st, align 4
  br label %if.end.76

if.else.42:                                       ; preds = %if.else.38
  %34 = load i64, i64* %cmd, align 8
  %call43 = call i64 @builtin_lisp_symbol(i32 951)
  %cmp44 = icmp eq i64 %34, %call43
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %if.else.42
  store i8 0, i8* %usable_input, align 1
  store i32 3, i32* %st, align 4
  br label %if.end.75

if.else.46:                                       ; preds = %if.else.42
  %35 = load i64, i64* %cmd, align 8
  %call47 = call i64 @builtin_lisp_symbol(i32 948)
  %cmp48 = icmp eq i64 %35, %call47
  br i1 %cmp48, label %if.then.49, label %if.else.54

if.then.49:                                       ; preds = %if.else.46
  %36 = load i32*, i32** %y.addr, align 8
  %37 = load i32, i32* %36, align 4
  %38 = load i32, i32* %max_y.addr, align 4
  %cmp50 = icmp slt i32 %37, %38
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %if.then.49
  %39 = load i32*, i32** %y.addr, align 8
  %40 = load i32, i32* %39, align 4
  %add = add nsw i32 %40, 1
  store i32 %add, i32* %39, align 4
  br label %if.end.53

if.else.52:                                       ; preds = %if.then.49
  store i32 4, i32* %st, align 4
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.52, %if.then.51
  br label %if.end.74

if.else.54:                                       ; preds = %if.else.46
  %41 = load i64, i64* %cmd, align 8
  %call55 = call i64 @builtin_lisp_symbol(i32 950)
  %cmp56 = icmp eq i64 %41, %call55
  br i1 %cmp56, label %if.then.57, label %if.else.63

if.then.57:                                       ; preds = %if.else.54
  %42 = load i32*, i32** %y.addr, align 8
  %43 = load i32, i32* %42, align 4
  %44 = load i32, i32* %min_y.addr, align 4
  %cmp58 = icmp sgt i32 %43, %44
  br i1 %cmp58, label %if.then.59, label %if.else.61

if.then.59:                                       ; preds = %if.then.57
  %45 = load i32*, i32** %y.addr, align 8
  %46 = load i32, i32* %45, align 4
  %sub60 = sub nsw i32 %46, 1
  store i32 %sub60, i32* %45, align 4
  br label %if.end.62

if.else.61:                                       ; preds = %if.then.57
  store i32 5, i32* %st, align 4
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.61, %if.then.59
  br label %if.end.73

if.else.63:                                       ; preds = %if.else.54
  %47 = load i64, i64* %cmd, align 8
  %call64 = call i64 @builtin_lisp_symbol(i32 952)
  %cmp65 = icmp eq i64 %47, %call64
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %if.else.63
  store i32 1, i32* %st, align 4
  br label %if.end.72

if.else.67:                                       ; preds = %if.else.63
  %48 = load i64, i64* %cmd, align 8
  %call68 = call i64 @builtin_lisp_symbol(i32 945)
  %cmp69 = icmp eq i64 %48, %call68
  br i1 %cmp69, label %if.end.71, label %if.then.70

if.then.70:                                       ; preds = %if.else.67
  store i8 0, i8* %usable_input, align 1
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.70, %if.else.67
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %if.then.66
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.end.62
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.end.53
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.then.45
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.then.41
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.then.37
  %49 = load i8, i8* %usable_input, align 1
  %tobool78 = trunc i8 %49 to i1
  br i1 %tobool78, label %if.then.79, label %if.end.84

if.then.79:                                       ; preds = %if.end.77
  %50 = load %struct.frame*, %struct.frame** %sf.addr, align 8
  %mouse_moved80 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 26
  %51 = bitcast i48* %mouse_moved80 to i64*
  %bf.load81 = load i64, i64* %51, align 8
  %bf.clear82 = and i64 %bf.load81, -1048577
  %bf.set83 = or i64 %bf.clear82, 1048576
  store i64 %bf.set83, i64* %51, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.79, %if.end.77
  %52 = load i32, i32* %st, align 4
  store i32 %52, i32* %retval
  br label %return

if.end.85:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.85, %if.end.84, %if.then.34
  %53 = load i32, i32* %retval
  ret i32 %53
}

declare void @show_help_echo(i64, i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @screen_update(%struct.frame* %f, %struct.glyph_matrix* %mtx) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %mtx.addr = alloca %struct.glyph_matrix*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.glyph_matrix* %mtx, %struct.glyph_matrix** %mtx.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %mtx.addr, align 8
  call void @restore_desired_matrix(%struct.frame* %0, %struct.glyph_matrix* %1)
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_frame_with_menu(%struct.frame* %2, i32 -1, i32 -1)
  ret void
}

declare void @cursor_to(%struct.frame*, i32, i32) #1

declare i32 @fflush(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define internal void @free_saved_screen(%struct.glyph_matrix* %saved) #0 {
entry:
  %saved.addr = alloca %struct.glyph_matrix*, align 8
  %i = alloca i32, align 4
  %from = alloca %struct.glyph_row*, align 8
  store %struct.glyph_matrix* %saved, %struct.glyph_matrix** %saved.addr, align 8
  %0 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %tobool = icmp ne %struct.glyph_matrix* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %2, i32 0, i32 3
  %3 = load i32, i32* %nrows, align 4
  %cmp = icmp slt i32 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %4, i32 0, i32 1
  %5 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %6 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %6 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %5, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %from, align 8
  %7 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %7, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %8 = load %struct.glyph*, %struct.glyph** %arrayidx, align 8
  %9 = bitcast %struct.glyph* %8 to i8*
  call void @xfree(i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %rows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %11, i32 0, i32 1
  %12 = load %struct.glyph_row*, %struct.glyph_row** %rows1, align 8
  %13 = bitcast %struct.glyph_row* %12 to i8*
  call void @xfree(i8* %13)
  %14 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %15 = bitcast %struct.glyph_matrix* %14 to i8*
  call void @xfree(i8* %15)
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_show_cursor(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %cursor_hidden = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %0, i32 0, i32 75
  %bf.load = load i8, i8* %cursor_hidden, align 4
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.end.21

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %cursor_hidden1 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %1, i32 0, i32 75
  %bf.load2 = load i8, i8* %cursor_hidden1, align 4
  %bf.clear3 = and i8 %bf.load2, -2
  store i8 %bf.clear3, i8* %cursor_hidden1, align 4
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_cursor_normal = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 47
  %3 = load i8*, i8** %TS_cursor_normal, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %do.body
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  store %struct.tty_display_info* %4, %struct.tty_display_info** @current_tty, align 8
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_cursor_normal5 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %5, i32 0, i32 47
  %6 = load i8*, i8** %TS_cursor_normal5, align 8
  %7 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %7, 5
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 39
  %10 = load i32, i32* %total_lines, align 4
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 10
  %12 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %12, i32 0, i32 0
  %13 = load i32, i32* %cm_curY, align 4
  %sub6 = sub nsw i32 %10, %13
  call void @tputs(i8* %6, i32 %sub6, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %14 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 497), align 1
  %tobool7 = trunc i8 %14 to i1
  br i1 %tobool7, label %if.then.8, label %if.end.20

if.then.8:                                        ; preds = %do.end
  br label %do.body.9

do.body.9:                                        ; preds = %if.then.8
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_cursor_visible = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %15, i32 0, i32 48
  %16 = load i8*, i8** %TS_cursor_visible, align 8
  %tobool10 = icmp ne i8* %16, null
  br i1 %tobool10, label %if.then.11, label %if.end.18

if.then.11:                                       ; preds = %do.body.9
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  store %struct.tty_display_info* %17, %struct.tty_display_info** @current_tty, align 8
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_cursor_visible12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %18, i32 0, i32 48
  %19 = load i8*, i8** %TS_cursor_visible12, align 8
  %20 = load i64, i64* @selected_frame, align 8
  %sub13 = sub nsw i64 %20, 5
  %21 = inttoptr i64 %sub13 to i8*
  %22 = bitcast i8* %21 to %struct.frame*
  %total_lines14 = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 39
  %23 = load i32, i32* %total_lines14, align 4
  %24 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %Wcm15 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %24, i32 0, i32 10
  %25 = load %struct.cm*, %struct.cm** %Wcm15, align 8
  %cm_curY16 = getelementptr inbounds %struct.cm, %struct.cm* %25, i32 0, i32 0
  %26 = load i32, i32* %cm_curY16, align 4
  %sub17 = sub nsw i32 %23, %26
  call void @tputs(i8* %19, i32 %sub17, i32 (i32)* @cmputc)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.11, %do.body.9
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  br label %if.end.20

if.end.20:                                        ; preds = %do.end.19, %do.end
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %entry
  ret void
}

declare void @discard_mouse_events() #1

declare zeroext i1 @kbd_buffer_events_waiting() #1

declare void @clear_input_pending() #1

declare void @display_tty_menu_item(i8*, i32, i32, i32, i32, i1 zeroext) #1

declare i64 @read_menu_command() #1

; Function Attrs: nounwind uwtable
define internal void @mouse_get_xy(i32* %x, i32* %y) #0 {
entry:
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32*, align 8
  %sf = alloca %struct.frame*, align 8
  %lmx = alloca i64, align 8
  %lmy = alloca i64, align 8
  %lisp_dummy = alloca i64, align 8
  %part_dummy = alloca i32, align 4
  %time_dummy = alloca i64, align 8
  store i32* %x, i32** %x.addr, align 8
  store i32* %y, i32** %y.addr, align 8
  %0 = load i64, i64* @selected_frame, align 8
  %call = call zeroext i1 @FRAMEP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %1, 5
  %2 = inttoptr i64 %sub to i8*
  %3 = bitcast i8* %2 to %struct.frame*
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 61
  %4 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp = icmp ne %struct.terminal* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* @selected_frame, align 8
  %sub1 = sub nsw i64 %5, 5
  %6 = inttoptr i64 %sub1 to i8*
  %7 = bitcast i8* %6 to %struct.frame*
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %8, %cond.true
  %cond = phi %struct.frame* [ %7, %cond.true ], [ null, %8 ]
  store %struct.frame* %cond, %struct.frame** %sf, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call2, i64* %lmx, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call3, i64* %lmy, align 8
  %9 = load %struct.frame*, %struct.frame** %sf, align 8
  %terminal4 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 61
  %10 = load %struct.terminal*, %struct.terminal** %terminal4, align 8
  %mouse_position_hook = getelementptr inbounds %struct.terminal, %struct.terminal* %10, i32 0, i32 32
  %11 = load void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook, align 8
  %tobool = icmp ne void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)* %11, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %12 = load %struct.frame*, %struct.frame** %sf, align 8
  %terminal5 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 61
  %13 = load %struct.terminal*, %struct.terminal** %terminal5, align 8
  %mouse_position_hook6 = getelementptr inbounds %struct.terminal, %struct.terminal* %13, i32 0, i32 32
  %14 = load void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)** %mouse_position_hook6, align 8
  call void %14(%struct.frame** %sf, i32 -1, i64* %lisp_dummy, i32* %part_dummy, i64* %lmx, i64* %lmy, i64* %time_dummy)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %15 = load i64, i64* %lmx, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp8 = icmp eq i64 %15, %call7
  br i1 %cmp8, label %if.end.12, label %if.then.9

if.then.9:                                        ; preds = %if.end
  %16 = load i64, i64* %lmx, align 8
  %shr = ashr i64 %16, 2
  %conv = trunc i64 %shr to i32
  %17 = load i32*, i32** %x.addr, align 8
  store i32 %conv, i32* %17, align 4
  %18 = load i64, i64* %lmy, align 8
  %shr10 = ashr i64 %18, 2
  %conv11 = trunc i64 %shr10 to i32
  %19 = load i32*, i32** %y.addr, align 8
  store i32 %conv11, i32* %19, align 4
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @restore_desired_matrix(%struct.frame* %f, %struct.glyph_matrix* %saved) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %saved.addr = alloca %struct.glyph_matrix*, align 8
  %i = alloca i32, align 4
  %from = alloca %struct.glyph_row*, align 8
  %to = alloca %struct.glyph_row*, align 8
  %nbytes = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.glyph_matrix* %saved, %struct.glyph_matrix** %saved.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %nrows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %1, i32 0, i32 3
  %2 = load i32, i32* %nrows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.glyph_matrix*, %struct.glyph_matrix** %saved.addr, align 8
  %rows = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %3, i32 0, i32 1
  %4 = load %struct.glyph_row*, %struct.glyph_row** %rows, align 8
  %5 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %4, i64 %idx.ext
  store %struct.glyph_row* %add.ptr, %struct.glyph_row** %from, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %desired_matrix = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 24
  %7 = load %struct.glyph_matrix*, %struct.glyph_matrix** %desired_matrix, align 8
  %rows1 = getelementptr inbounds %struct.glyph_matrix, %struct.glyph_matrix* %7, i32 0, i32 1
  %8 = load %struct.glyph_row*, %struct.glyph_row** %rows1, align 8
  %9 = load i32, i32* %i, align 4
  %idx.ext2 = sext i32 %9 to i64
  %add.ptr3 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %8, i64 %idx.ext2
  store %struct.glyph_row* %add.ptr3, %struct.glyph_row** %to, align 8
  %10 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %10, i32 0, i32 1
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %used, i32 0, i64 1
  %11 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %11 to i64
  %mul = mul i64 %conv, 48
  store i64 %mul, i64* %nbytes, align 8
  %12 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %glyphs = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %12, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs, i32 0, i64 1
  %13 = load %struct.glyph*, %struct.glyph** %arrayidx4, align 8
  %14 = bitcast %struct.glyph* %13 to i8*
  %15 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %glyphs5 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %15, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x %struct.glyph*], [4 x %struct.glyph*]* %glyphs5, i32 0, i64 1
  %16 = load %struct.glyph*, %struct.glyph** %arrayidx6, align 8
  %17 = bitcast %struct.glyph* %16 to i8*
  %18 = load i64, i64* %nbytes, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %17, i64 %18, i32 8, i1 false)
  %19 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %used7 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %19, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [4 x i16], [4 x i16]* %used7, i32 0, i64 1
  %20 = load i16, i16* %arrayidx8, align 2
  %21 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %used9 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %21, i32 0, i32 1
  %arrayidx10 = getelementptr inbounds [4 x i16], [4 x i16]* %used9, i32 0, i64 1
  store i16 %20, i16* %arrayidx10, align 2
  %22 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %enabled_p = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %22, i32 0, i32 22
  %23 = bitcast i40* %enabled_p to i64*
  %bf.load = load i64, i64* %23, align 4
  %bf.lshr = lshr i64 %bf.load, 10
  %bf.clear = and i64 %bf.lshr, 1
  %bf.cast = trunc i64 %bf.clear to i1
  %24 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %enabled_p11 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %24, i32 0, i32 22
  %25 = bitcast i40* %enabled_p11 to i64*
  %26 = zext i1 %bf.cast to i64
  %bf.load12 = load i64, i64* %25, align 4
  %bf.shl = shl i64 %26, 10
  %bf.clear13 = and i64 %bf.load12, -1025
  %bf.set = or i64 %bf.clear13, %bf.shl
  store i64 %bf.set, i64* %25, align 4
  %bf.result.cast = trunc i64 %26 to i8
  %tobool = trunc i8 %bf.result.cast to i1
  %27 = load %struct.glyph_row*, %struct.glyph_row** %from, align 8
  %hash = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %27, i32 0, i32 2
  %28 = load i32, i32* %hash, align 4
  %29 = load %struct.glyph_row*, %struct.glyph_row** %to, align 8
  %hash14 = getelementptr inbounds %struct.glyph_row, %struct.glyph_row* %29, i32 0, i32 2
  store i32 %28, i32* %hash14, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i64 @list3(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @tty_menu_last_menubar_item(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %i = alloca i32, align 4
  %items = alloca i64, align 8
  %str = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 0, i32* %i, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 61
  %3 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp1 = icmp ne %struct.terminal* %3, null
  br i1 %cmp1, label %if.then, label %if.end.11

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 11
  %5 = load i64, i64* %menu_bar_items, align 8
  store i64 %5, i64* %items, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %6 = load i32, i32* %i, align 4
  %conv = sext i32 %6 to i64
  %7 = load i64, i64* %items, align 8
  %call = call i64 @ASIZE(i64 %7)
  %cmp2 = icmp slt i64 %conv, %call
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64, i64* %items, align 8
  %9 = load i32, i32* %i, align 4
  %add = add nsw i32 %9, 1
  %conv4 = sext i32 %add to i64
  %call5 = call i64 @AREF(i64 %8, i64 %conv4)
  store i64 %call5, i64* %str, align 8
  %10 = load i64, i64* %str, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp7 = icmp eq i64 %10, %call6
  br i1 %cmp7, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load i32, i32* %i, align 4
  %add10 = add nsw i32 %11, 4
  store i32 %add10, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then.9, %while.cond
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %12, 4
  store i32 %sub, i32* %i, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %while.end, %land.lhs.true, %entry
  %13 = load i32, i32* %i, align 4
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal void @tty_free_frame_resources(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @free_frame_faces(%struct.frame* %0)
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 62
  %tty = bitcast %union.output_data* %output_data to %struct.tty_output**
  %2 = load %struct.tty_output*, %struct.tty_output** %tty, align 8
  %3 = bitcast %struct.tty_output* %2 to i8*
  call void @xfree(i8* %3)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @delete_tty(%struct.terminal* %terminal) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %p = alloca %struct.tty_display_info*, align 8
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %name = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 9
  %1 = load i8*, i8** %name, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %2, i32 0, i32 12
  %tty1 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty1, align 8
  store %struct.tty_display_info* %3, %struct.tty_display_info** %tty, align 8
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** @tty_list, align 8
  %cmp = icmp eq %struct.tty_display_info* %4, %5
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %next = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %6, i32 0, i32 0
  %7 = load %struct.tty_display_info*, %struct.tty_display_info** %next, align 8
  store %struct.tty_display_info* %7, %struct.tty_display_info** @tty_list, align 8
  br label %if.end.13

if.else:                                          ; preds = %if.end
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** @tty_list, align 8
  store %struct.tty_display_info* %8, %struct.tty_display_info** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %p, align 8
  %tobool3 = icmp ne %struct.tty_display_info* %9, null
  br i1 %tobool3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %p, align 8
  %next4 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 0
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %next4, align 8
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %cmp5 = icmp ne %struct.tty_display_info* %11, %12
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %13 = phi i1 [ false, %for.cond ], [ %cmp5, %land.rhs ]
  br i1 %13, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %p, align 8
  %next6 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 0
  %15 = load %struct.tty_display_info*, %struct.tty_display_info** %next6, align 8
  store %struct.tty_display_info* %15, %struct.tty_display_info** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %p, align 8
  %tobool7 = icmp ne %struct.tty_display_info* %16, null
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %for.end
  call void @emacs_abort() #9
  unreachable

if.end.9:                                         ; preds = %for.end
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %next10 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %17, i32 0, i32 0
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %next10, align 8
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %p, align 8
  %next11 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %19, i32 0, i32 0
  store %struct.tty_display_info* %18, %struct.tty_display_info** %next11, align 8
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %next12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %20, i32 0, i32 0
  store %struct.tty_display_info* null, %struct.tty_display_info** %next12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.9, %if.then.2
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @reset_sys_modes(%struct.tty_display_info* %21)
  %22 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  call void @delete_terminal(%struct.terminal* %22)
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %name14 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %23, i32 0, i32 1
  %24 = load i8*, i8** %name14, align 8
  call void @xfree(i8* %24)
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %type = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %25, i32 0, i32 2
  %26 = load i8*, i8** %type, align 8
  call void @xfree(i8* %26)
  %27 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %27, i32 0, i32 3
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %input, align 8
  %tobool15 = icmp ne %struct._IO_FILE* %28, null
  br i1 %tobool15, label %if.then.16, label %if.end.24

if.then.16:                                       ; preds = %if.end.13
  %29 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input17 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %29, i32 0, i32 3
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %input17, align 8
  %call = call i32 @fileno(%struct._IO_FILE* %30) #3
  call void @delete_keyboard_wait_descriptor(i32 %call)
  %31 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input18 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %31, i32 0, i32 3
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %input18, align 8
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %cmp19 = icmp ne %struct._IO_FILE* %32, %33
  br i1 %cmp19, label %if.then.20, label %if.end.23

if.then.20:                                       ; preds = %if.then.16
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input21 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 3
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %input21, align 8
  %call22 = call i32 @fclose(%struct._IO_FILE* %35)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %if.then.16
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.13
  %36 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %36, i32 0, i32 4
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %tobool25 = icmp ne %struct._IO_FILE* %37, null
  br i1 %tobool25, label %land.lhs.true, label %if.end.35

land.lhs.true:                                    ; preds = %if.end.24
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output26 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 4
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %output26, align 8
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %cmp27 = icmp ne %struct._IO_FILE* %39, %40
  br i1 %cmp27, label %land.lhs.true.28, label %if.end.35

land.lhs.true.28:                                 ; preds = %land.lhs.true
  %41 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %41, i32 0, i32 4
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %output29, align 8
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %input30 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %43, i32 0, i32 3
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %input30, align 8
  %cmp31 = icmp ne %struct._IO_FILE* %42, %44
  br i1 %cmp31, label %if.then.32, label %if.end.35

if.then.32:                                       ; preds = %land.lhs.true.28
  %45 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output33 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %45, i32 0, i32 4
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %output33, align 8
  %call34 = call i32 @fclose(%struct._IO_FILE* %46)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.32, %land.lhs.true.28, %land.lhs.true, %if.end.24
  %47 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %47, i32 0, i32 5
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool36 = icmp ne %struct._IO_FILE* %48, null
  br i1 %tobool36, label %if.then.37, label %if.end.40

if.then.37:                                       ; preds = %if.end.35
  %49 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript38 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %49, i32 0, i32 5
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript38, align 8
  %call39 = call i32 @fclose(%struct._IO_FILE* %50)
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.37, %if.end.35
  %51 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %old_tty = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %51, i32 0, i32 6
  %52 = load %struct.emacs_tty*, %struct.emacs_tty** %old_tty, align 8
  %53 = bitcast %struct.emacs_tty* %52 to i8*
  call void @xfree(i8* %53)
  %54 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %54, i32 0, i32 10
  %55 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %56 = bitcast %struct.cm* %55 to i8*
  call void @xfree(i8* %56)
  %57 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %58 = bitcast %struct.tty_display_info* %57 to i8*
  call void @xfree(i8* %58)
  br label %return

return:                                           ; preds = %if.end.40, %if.then
  ret void
}

declare void @free_frame_faces(%struct.frame*) #1

declare void @delete_terminal(%struct.terminal*) #1

; Function Attrs: nounwind uwtable
define internal void @tty_cursor_to(%struct.frame* %f, i32 %vpos, i32 %hpos) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %vpos.addr = alloca i32, align 4
  %hpos.addr = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %vpos, i32* %vpos.addr, align 4
  store i32 %hpos, i32* %hpos.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %costs_set = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 72
  %bf.load8 = load i8, i8* %costs_set, align 8
  %bf.lshr9 = lshr i8 %bf.load8, 1
  %bf.clear10 = and i8 %bf.lshr9, 1
  %bf.cast11 = trunc i8 %bf.clear10 to i1
  br i1 %bf.cast11, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  br label %return

if.end:                                           ; preds = %cond.end
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %9, i32 0, i32 10
  %10 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %10, i32 0, i32 0
  %11 = load i32, i32* %cm_curY, align 4
  %12 = load i32, i32* %vpos.addr, align 4
  %cmp12 = icmp eq i32 %11, %12
  br i1 %cmp12, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm13 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %13, i32 0, i32 10
  %14 = load %struct.cm*, %struct.cm** %Wcm13, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %14, i32 0, i32 1
  %15 = load i32, i32* %cm_curX, align 4
  %16 = load i32, i32* %hpos.addr, align 4
  %cmp14 = icmp eq i32 %15, %16
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %land.lhs.true
  br label %return

if.end.16:                                        ; preds = %land.lhs.true, %if.end
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_standout_motion = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %17, i32 0, i32 68
  %18 = load i32, i32* %TF_standout_motion, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.end.18, label %if.then.17

if.then.17:                                       ; preds = %if.end.16
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end.16
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_insmode_motion = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %20, i32 0, i32 67
  %21 = load i32, i32* %TF_insmode_motion, align 4
  %tobool19 = icmp ne i32 %21, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.18
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_insert(%struct.tty_display_info* %22)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %if.end.18
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %24 = load i32, i32* %vpos.addr, align 4
  %25 = load i32, i32* %hpos.addr, align 4
  call void @cmgoto(%struct.tty_display_info* %23, i32 %24, i32 %25)
  br label %return

return:                                           ; preds = %if.end.21, %if.then.15, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_raw_cursor_to(%struct.frame* %f, i32 %row, i32 %col) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 10
  %9 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %9, i32 0, i32 0
  %10 = load i32, i32* %cm_curY, align 4
  %11 = load i32, i32* %row.addr, align 4
  %cmp8 = icmp eq i32 %10, %11
  br i1 %cmp8, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm9 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 10
  %13 = load %struct.cm*, %struct.cm** %Wcm9, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %13, i32 0, i32 1
  %14 = load i32, i32* %cm_curX, align 4
  %15 = load i32, i32* %col.addr, align 4
  %cmp10 = icmp eq i32 %14, %15
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_standout_motion = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 68
  %17 = load i32, i32* %TF_standout_motion, align 4
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %if.end
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %18)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_insmode_motion = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %19, i32 0, i32 67
  %20 = load i32, i32* %TF_insmode_motion, align 4
  %tobool13 = icmp ne i32 %20, 0
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.end.12
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_insert(%struct.tty_display_info* %21)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.end.12
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %23 = load i32, i32* %row.addr, align 4
  %24 = load i32, i32* %col.addr, align 4
  call void @cmgoto(%struct.tty_display_info* %22, i32 %23, i32 %24)
  br label %return

return:                                           ; preds = %if.end.15, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_clear_to_end(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %i = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_to_bottom = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 20
  %9 = load i8*, i8** %TS_clr_to_bottom, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %10)
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %11, %struct.tty_display_info** @current_tty, align 8
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_to_bottom8 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 20
  %13 = load i8*, i8** %TS_clr_to_bottom8, align 8
  %14 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %14, 5
  %15 = inttoptr i64 %sub to i8*
  %16 = bitcast i8* %15 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 39
  %17 = load i32, i32* %total_lines, align 4
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %18, i32 0, i32 10
  %19 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %19, i32 0, i32 0
  %20 = load i32, i32* %cm_curY, align 4
  %sub9 = sub nsw i32 %17, %20
  call void @tputs(i8* %13, i32 %sub9, i32 (i32)* @cmputc)
  br label %if.end

if.else:                                          ; preds = %cond.end
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm10 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %21, i32 0, i32 10
  %22 = load %struct.cm*, %struct.cm** %Wcm10, align 8
  %cm_curY11 = getelementptr inbounds %struct.cm, %struct.cm* %22, i32 0, i32 0
  %23 = load i32, i32* %cm_curY11, align 4
  store i32 %23, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines12 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 39
  %26 = load i32, i32* %total_lines12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %28 = load i32, i32* %i, align 4
  call void @cursor_to(%struct.frame* %27, i32 %28, i32 0)
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 36
  %31 = load i32, i32* %text_cols, align 4
  call void @clear_end_of_line(%struct.frame* %29, i32 %31)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load i32, i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_clear_frame(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 22
  %9 = load i8*, i8** %TS_clr_frame, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %10)
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %11, %struct.tty_display_info** @current_tty, align 8
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_frame8 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 22
  %13 = load i8*, i8** %TS_clr_frame8, align 8
  %14 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %14, 5
  %15 = inttoptr i64 %sub to i8*
  %16 = bitcast i8* %15 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 39
  %17 = load i32, i32* %total_lines, align 4
  %18 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %18, i32 0, i32 10
  %19 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %19, i32 0, i32 0
  %20 = load i32, i32* %cm_curY, align 4
  %sub9 = sub nsw i32 %17, %20
  call void @tputs(i8* %13, i32 %sub9, i32 (i32)* @cmputc)
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm10 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %21, i32 0, i32 10
  %22 = load %struct.cm*, %struct.cm** %Wcm10, align 8
  %cm_curY11 = getelementptr inbounds %struct.cm, %struct.cm* %22, i32 0, i32 0
  store i32 0, i32* %cm_curY11, align 4
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %23, i32 0, i32 10
  %24 = load %struct.cm*, %struct.cm** %Wcm12, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %24, i32 0, i32 1
  store i32 0, i32* %cm_curX, align 4
  br label %if.end

if.else:                                          ; preds = %cond.end
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @cursor_to(%struct.frame* %25, i32 0, i32 0)
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @clear_to_end(%struct.frame* %26)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_clear_end_of_line(%struct.frame* %f, i32 %first_unused_hpos) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %first_unused_hpos.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %first_unused_hpos, i32* %first_unused_hpos.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %costs_set = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 72
  %bf.load8 = load i8, i8* %costs_set, align 8
  %bf.lshr9 = lshr i8 %bf.load8, 1
  %bf.clear10 = and i8 %bf.lshr9, 1
  %bf.cast11 = trunc i8 %bf.clear10 to i1
  br i1 %bf.cast11, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  br label %if.end.81

if.end:                                           ; preds = %cond.end
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %9, i32 0, i32 10
  %10 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %10, i32 0, i32 1
  %11 = load i32, i32* %cm_curX, align 4
  %12 = load i32, i32* %first_unused_hpos.addr, align 4
  %cmp12 = icmp sge i32 %11, %12
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end
  br label %if.end.81

if.end.14:                                        ; preds = %if.end
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %13)
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 21
  %15 = load i8*, i8** %TS_clr_line, align 8
  %tobool = icmp ne i8* %15, null
  br i1 %tobool, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.end.14
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %16, %struct.tty_display_info** @current_tty, align 8
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_clr_line16 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %17, i32 0, i32 21
  %18 = load i8*, i8** %TS_clr_line16, align 8
  call void @tputs(i8* %18, i32 1, i32 (i32)* @cmputc)
  br label %if.end.81

if.else:                                          ; preds = %if.end.14
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_insert(%struct.tty_display_info* %19)
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm17 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %20, i32 0, i32 10
  %21 = load %struct.cm*, %struct.cm** %Wcm17, align 8
  %cm_autowrap = getelementptr inbounds %struct.cm, %struct.cm* %21, i32 0, i32 21
  %bf.load18 = load i8, i8* %cm_autowrap, align 4
  %bf.clear19 = and i8 %bf.load18, 1
  %bf.cast20 = trunc i8 %bf.clear19 to i1
  br i1 %bf.cast20, label %land.lhs.true, label %if.end.28

land.lhs.true:                                    ; preds = %if.else
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm21 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 10
  %23 = load %struct.cm*, %struct.cm** %Wcm21, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %23, i32 0, i32 0
  %24 = load i32, i32* %cm_curY, align 4
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm22 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %25, i32 0, i32 10
  %26 = load %struct.cm*, %struct.cm** %Wcm22, align 8
  %cm_rows = getelementptr inbounds %struct.cm, %struct.cm* %26, i32 0, i32 19
  %27 = load i32, i32* %cm_rows, align 4
  %sub = sub nsw i32 %27, 1
  %cmp23 = icmp eq i32 %24, %sub
  br i1 %cmp23, label %land.lhs.true.24, label %if.end.28

land.lhs.true.24:                                 ; preds = %land.lhs.true
  %28 = load i32, i32* %first_unused_hpos.addr, align 4
  %29 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm25 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %29, i32 0, i32 10
  %30 = load %struct.cm*, %struct.cm** %Wcm25, align 8
  %cm_cols = getelementptr inbounds %struct.cm, %struct.cm* %30, i32 0, i32 18
  %31 = load i32, i32* %cm_cols, align 4
  %cmp26 = icmp eq i32 %28, %31
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %land.lhs.true.24
  %32 = load i32, i32* %first_unused_hpos.addr, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %first_unused_hpos.addr, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %land.lhs.true.24, %land.lhs.true, %if.else
  %33 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %33, i32 0, i32 10
  %34 = load %struct.cm*, %struct.cm** %Wcm29, align 8
  %cm_curX30 = getelementptr inbounds %struct.cm, %struct.cm* %34, i32 0, i32 1
  %35 = load i32, i32* %cm_curX30, align 4
  store i32 %35, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.28
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %first_unused_hpos.addr, align 4
  %cmp31 = icmp slt i32 %36, %37
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 5
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool32 = icmp ne %struct._IO_FILE* %39, null
  br i1 %tobool32, label %if.then.33, label %if.end.35

if.then.33:                                       ; preds = %for.body
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript34 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %40, i32 0, i32 5
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript34, align 8
  %call = call i32 @fputc(i32 32, %struct._IO_FILE* %41)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.33, %for.body
  %42 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %42, i32 0, i32 4
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call36 = call i32 @fputc(i32 32, %struct._IO_FILE* %43)
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %44 = load i32, i32* %i, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %45 = load i32, i32* %first_unused_hpos.addr, align 4
  %46 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm37 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %46, i32 0, i32 10
  %47 = load %struct.cm*, %struct.cm** %Wcm37, align 8
  %cm_curX38 = getelementptr inbounds %struct.cm, %struct.cm* %47, i32 0, i32 1
  %48 = load i32, i32* %cm_curX38, align 4
  %sub39 = sub nsw i32 %45, %48
  %49 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm40 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %49, i32 0, i32 10
  %50 = load %struct.cm*, %struct.cm** %Wcm40, align 8
  %cm_curX41 = getelementptr inbounds %struct.cm, %struct.cm* %50, i32 0, i32 1
  %51 = load i32, i32* %cm_curX41, align 4
  %add = add nsw i32 %51, %sub39
  store i32 %add, i32* %cm_curX41, align 4
  %52 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm42 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %52, i32 0, i32 10
  %53 = load %struct.cm*, %struct.cm** %Wcm42, align 8
  %cm_cols43 = getelementptr inbounds %struct.cm, %struct.cm* %53, i32 0, i32 18
  %54 = load i32, i32* %cm_cols43, align 4
  %cmp44 = icmp sge i32 %add, %54
  br i1 %cmp44, label %land.lhs.true.45, label %if.end.80

land.lhs.true.45:                                 ; preds = %for.end
  %55 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm46 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %55, i32 0, i32 10
  %56 = load %struct.cm*, %struct.cm** %Wcm46, align 8
  %cm_magicwrap = getelementptr inbounds %struct.cm, %struct.cm* %56, i32 0, i32 21
  %bf.load47 = load i8, i8* %cm_magicwrap, align 4
  %bf.lshr48 = lshr i8 %bf.load47, 1
  %bf.clear49 = and i8 %bf.lshr48, 1
  %bf.cast50 = trunc i8 %bf.clear49 to i1
  br i1 %bf.cast50, label %if.end.80, label %if.then.51

if.then.51:                                       ; preds = %land.lhs.true.45
  %57 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm52 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %57, i32 0, i32 10
  %58 = load %struct.cm*, %struct.cm** %Wcm52, align 8
  %cm_losewrap = getelementptr inbounds %struct.cm, %struct.cm* %58, i32 0, i32 21
  %bf.load53 = load i8, i8* %cm_losewrap, align 4
  %bf.lshr54 = lshr i8 %bf.load53, 3
  %bf.clear55 = and i8 %bf.lshr54, 1
  %bf.cast56 = trunc i8 %bf.clear55 to i1
  br i1 %bf.cast56, label %if.then.57, label %if.else.62

if.then.57:                                       ; preds = %if.then.51
  %59 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm58 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %59, i32 0, i32 10
  %60 = load %struct.cm*, %struct.cm** %Wcm58, align 8
  %cm_curX59 = getelementptr inbounds %struct.cm, %struct.cm* %60, i32 0, i32 1
  store i32 -1, i32* %cm_curX59, align 4
  %61 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm60 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %61, i32 0, i32 10
  %62 = load %struct.cm*, %struct.cm** %Wcm60, align 8
  %cm_curY61 = getelementptr inbounds %struct.cm, %struct.cm* %62, i32 0, i32 0
  store i32 -1, i32* %cm_curY61, align 4
  br label %if.end.79

if.else.62:                                       ; preds = %if.then.51
  %63 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm63 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %63, i32 0, i32 10
  %64 = load %struct.cm*, %struct.cm** %Wcm63, align 8
  %cm_autowrap64 = getelementptr inbounds %struct.cm, %struct.cm* %64, i32 0, i32 21
  %bf.load65 = load i8, i8* %cm_autowrap64, align 4
  %bf.clear66 = and i8 %bf.load65, 1
  %bf.cast67 = trunc i8 %bf.clear66 to i1
  br i1 %bf.cast67, label %if.then.68, label %if.else.74

if.then.68:                                       ; preds = %if.else.62
  %65 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm69 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %65, i32 0, i32 10
  %66 = load %struct.cm*, %struct.cm** %Wcm69, align 8
  %cm_curX70 = getelementptr inbounds %struct.cm, %struct.cm* %66, i32 0, i32 1
  store i32 0, i32* %cm_curX70, align 4
  %67 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm71 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %67, i32 0, i32 10
  %68 = load %struct.cm*, %struct.cm** %Wcm71, align 8
  %cm_curY72 = getelementptr inbounds %struct.cm, %struct.cm* %68, i32 0, i32 0
  %69 = load i32, i32* %cm_curY72, align 4
  %inc73 = add nsw i32 %69, 1
  store i32 %inc73, i32* %cm_curY72, align 4
  br label %if.end.78

if.else.74:                                       ; preds = %if.else.62
  %70 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm75 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %70, i32 0, i32 10
  %71 = load %struct.cm*, %struct.cm** %Wcm75, align 8
  %cm_curX76 = getelementptr inbounds %struct.cm, %struct.cm* %71, i32 0, i32 1
  %72 = load i32, i32* %cm_curX76, align 4
  %dec77 = add nsw i32 %72, -1
  store i32 %dec77, i32* %cm_curX76, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.74, %if.then.68
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.then.57
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %land.lhs.true.45, %for.end
  br label %if.end.81

if.end.81:                                        ; preds = %if.then, %if.then.13, %if.end.80, %if.then.15
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_ins_del_lines(%struct.frame* %f, i32 %vpos, i32 %n) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %vpos.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  %multi = alloca i8*, align 8
  %single = alloca i8*, align 8
  %scroll = alloca i8*, align 8
  %i = alloca i32, align 4
  %buf = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %vpos, i32* %vpos.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load i32, i32* %n.addr, align 4
  %cmp8 = icmp sgt i32 %8, 0
  br i1 %cmp8, label %cond.true.9, label %cond.false.10

cond.true.9:                                      ; preds = %cond.end
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_lines = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %9, i32 0, i32 18
  %10 = load i8*, i8** %TS_ins_multi_lines, align 8
  br label %cond.end.11

cond.false.10:                                    ; preds = %cond.end
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_lines = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 28
  %12 = load i8*, i8** %TS_del_multi_lines, align 8
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.10, %cond.true.9
  %cond12 = phi i8* [ %10, %cond.true.9 ], [ %12, %cond.false.10 ]
  store i8* %cond12, i8** %multi, align 8
  %13 = load i32, i32* %n.addr, align 4
  %cmp13 = icmp sgt i32 %13, 0
  br i1 %cmp13, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.end.11
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 17
  %15 = load i8*, i8** %TS_ins_line, align 8
  br label %cond.end.16

cond.false.15:                                    ; preds = %cond.end.11
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_line = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 27
  %17 = load i8*, i8** %TS_del_line, align 8
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.14
  %cond17 = phi i8* [ %15, %cond.true.14 ], [ %17, %cond.false.15 ]
  store i8* %cond17, i8** %single, align 8
  %18 = load i32, i32* %n.addr, align 4
  %cmp18 = icmp sgt i32 %18, 0
  br i1 %cmp18, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %cond.end.16
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_rev_scroll = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %19, i32 0, i32 43
  %20 = load i8*, i8** %TS_rev_scroll, align 8
  br label %cond.end.21

cond.false.20:                                    ; preds = %cond.end.16
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_fwd_scroll = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %21, i32 0, i32 41
  %22 = load i8*, i8** %TS_fwd_scroll, align 8
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.20, %cond.true.19
  %cond22 = phi i8* [ %20, %cond.true.19 ], [ %22, %cond.false.20 ]
  store i8* %cond22, i8** %scroll, align 8
  %23 = load i32, i32* %n.addr, align 4
  %cmp23 = icmp slt i32 %23, 0
  br i1 %cmp23, label %cond.true.24, label %cond.false.25

cond.true.24:                                     ; preds = %cond.end.21
  %24 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %24
  br label %cond.end.26

cond.false.25:                                    ; preds = %cond.end.21
  %25 = load i32, i32* %n.addr, align 4
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.25, %cond.true.24
  %cond27 = phi i32 [ %sub, %cond.true.24 ], [ %25, %cond.false.25 ]
  store i32 %cond27, i32* %i, align 4
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method28 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 26
  %27 = bitcast i48* %output_method28 to i64*
  %bf.load29 = load i64, i64* %27, align 8
  %bf.lshr30 = lshr i64 %bf.load29, 23
  %bf.clear31 = and i64 %bf.lshr30, 7
  %bf.cast32 = trunc i64 %bf.clear31 to i32
  %cmp33 = icmp eq i32 %bf.cast32, 1
  br i1 %cmp33, label %cond.true.41, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %cond.end.26
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method35 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 26
  %29 = bitcast i48* %output_method35 to i64*
  %bf.load36 = load i64, i64* %29, align 8
  %bf.lshr37 = lshr i64 %bf.load36, 23
  %bf.clear38 = and i64 %bf.lshr37, 7
  %bf.cast39 = trunc i64 %bf.clear38 to i32
  %cmp40 = icmp eq i32 %bf.cast39, 3
  br i1 %cmp40, label %cond.true.41, label %cond.false.45

cond.true.41:                                     ; preds = %lor.lhs.false.34, %cond.end.26
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal42 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 61
  %31 = load %struct.terminal*, %struct.terminal** %terminal42, align 8
  %display_info43 = getelementptr inbounds %struct.terminal, %struct.terminal* %31, i32 0, i32 12
  %tty44 = bitcast %union.display_info* %display_info43 to %struct.tty_display_info**
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty44, align 8
  br label %cond.end.46

cond.false.45:                                    ; preds = %lor.lhs.false.34
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.46

cond.end.46:                                      ; preds = %33, %cond.true.41
  %cond47 = phi %struct.tty_display_info* [ %32, %cond.true.41 ], [ null, %33 ]
  %scroll_region_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond47, i32 0, i32 75
  %bf.load48 = load i8, i8* %scroll_region_ok, align 4
  %bf.lshr49 = lshr i8 %bf.load48, 6
  %bf.clear50 = and i8 %bf.lshr49, 1
  %bf.cast51 = trunc i8 %bf.clear50 to i1
  br i1 %bf.cast51, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end.46
  %34 = load i32, i32* %vpos.addr, align 4
  %35 = load i32, i32* %i, align 4
  %add = add nsw i32 %34, %35
  %36 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %36, i32 0, i32 74
  %37 = load i32, i32* %specified_window, align 4
  %cmp52 = icmp sge i32 %add, %37
  br i1 %cmp52, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %if.end.170

if.end:                                           ; preds = %land.lhs.true, %cond.end.46
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method53 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 26
  %39 = bitcast i48* %output_method53 to i64*
  %bf.load54 = load i64, i64* %39, align 8
  %bf.lshr55 = lshr i64 %bf.load54, 23
  %bf.clear56 = and i64 %bf.lshr55, 7
  %bf.cast57 = trunc i64 %bf.clear56 to i32
  %cmp58 = icmp eq i32 %bf.cast57, 1
  br i1 %cmp58, label %cond.true.66, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %if.end
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method60 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 26
  %41 = bitcast i48* %output_method60 to i64*
  %bf.load61 = load i64, i64* %41, align 8
  %bf.lshr62 = lshr i64 %bf.load61, 23
  %bf.clear63 = and i64 %bf.lshr62, 7
  %bf.cast64 = trunc i64 %bf.clear63 to i32
  %cmp65 = icmp eq i32 %bf.cast64, 3
  br i1 %cmp65, label %cond.true.66, label %cond.false.70

cond.true.66:                                     ; preds = %lor.lhs.false.59, %if.end
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal67 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 61
  %43 = load %struct.terminal*, %struct.terminal** %terminal67, align 8
  %display_info68 = getelementptr inbounds %struct.terminal, %struct.terminal* %43, i32 0, i32 12
  %tty69 = bitcast %union.display_info* %display_info68 to %struct.tty_display_info**
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty69, align 8
  br label %cond.end.71

cond.false.70:                                    ; preds = %lor.lhs.false.59
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.71

cond.end.71:                                      ; preds = %45, %cond.true.66
  %cond72 = phi %struct.tty_display_info* [ %44, %cond.true.66 ], [ null, %45 ]
  %memory_below_frame = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond72, i32 0, i32 75
  %bf.load73 = load i8, i8* %memory_below_frame, align 4
  %bf.lshr74 = lshr i8 %bf.load73, 7
  %bf.cast75 = trunc i8 %bf.lshr74 to i1
  br i1 %bf.cast75, label %if.end.80, label %land.lhs.true.76

land.lhs.true.76:                                 ; preds = %cond.end.71
  %46 = load i32, i32* %vpos.addr, align 4
  %47 = load i32, i32* %i, align 4
  %add77 = add nsw i32 %46, %47
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 39
  %49 = load i32, i32* %total_lines, align 4
  %cmp78 = icmp sge i32 %add77, %49
  br i1 %cmp78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %land.lhs.true.76
  br label %if.end.170

if.end.80:                                        ; preds = %land.lhs.true.76, %cond.end.71
  %50 = load i8*, i8** %multi, align 8
  %tobool = icmp ne i8* %50, null
  br i1 %tobool, label %if.then.81, label %if.else

if.then.81:                                       ; preds = %if.end.80
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %52 = load i32, i32* %vpos.addr, align 4
  call void @raw_cursor_to(%struct.frame* %51, i32 %52, i32 0)
  %53 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %53)
  %54 = load i8*, i8** %multi, align 8
  %55 = load i32, i32* %i, align 4
  %call = call i8* @tparam(i8* %54, i8* null, i32 0, i32 %55, i32 0, i32 0, i32 0)
  store i8* %call, i8** %buf, align 8
  %56 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %56, %struct.tty_display_info** @current_tty, align 8
  %57 = load i8*, i8** %buf, align 8
  %58 = load i64, i64* @selected_frame, align 8
  %sub82 = sub nsw i64 %58, 5
  %59 = inttoptr i64 %sub82 to i8*
  %60 = bitcast i8* %59 to %struct.frame*
  %total_lines83 = getelementptr inbounds %struct.frame, %struct.frame* %60, i32 0, i32 39
  %61 = load i32, i32* %total_lines83, align 4
  %62 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %62, i32 0, i32 10
  %63 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %63, i32 0, i32 0
  %64 = load i32, i32* %cm_curY, align 4
  %sub84 = sub nsw i32 %61, %64
  call void @tputs(i8* %57, i32 %sub84, i32 (i32)* @cmputc)
  %65 = load i8*, i8** %buf, align 8
  call void @xfree(i8* %65)
  br label %if.end.114

if.else:                                          ; preds = %if.end.80
  %66 = load i8*, i8** %single, align 8
  %tobool85 = icmp ne i8* %66, null
  br i1 %tobool85, label %if.then.86, label %if.else.97

if.then.86:                                       ; preds = %if.else
  %67 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %68 = load i32, i32* %vpos.addr, align 4
  call void @raw_cursor_to(%struct.frame* %67, i32 %68, i32 0)
  %69 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %69)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.86
  %70 = load i32, i32* %i, align 4
  %dec = add nsw i32 %70, -1
  store i32 %dec, i32* %i, align 4
  %cmp87 = icmp sge i32 %dec, 0
  br i1 %cmp87, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %71 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %71, %struct.tty_display_info** @current_tty, align 8
  %72 = load i8*, i8** %single, align 8
  %73 = load i64, i64* @selected_frame, align 8
  %sub88 = sub nsw i64 %73, 5
  %74 = inttoptr i64 %sub88 to i8*
  %75 = bitcast i8* %74 to %struct.frame*
  %total_lines89 = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 39
  %76 = load i32, i32* %total_lines89, align 4
  %77 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm90 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %77, i32 0, i32 10
  %78 = load %struct.cm*, %struct.cm** %Wcm90, align 8
  %cm_curY91 = getelementptr inbounds %struct.cm, %struct.cm* %78, i32 0, i32 0
  %79 = load i32, i32* %cm_curY91, align 4
  %sub92 = sub nsw i32 %76, %79
  call void @tputs(i8* %72, i32 %sub92, i32 (i32)* @cmputc)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %80 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TF_teleray = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %80, i32 0, i32 70
  %81 = load i32, i32* %TF_teleray, align 4
  %tobool93 = icmp ne i32 %81, 0
  br i1 %tobool93, label %if.then.94, label %if.end.96

if.then.94:                                       ; preds = %while.end
  %82 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm95 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %82, i32 0, i32 10
  %83 = load %struct.cm*, %struct.cm** %Wcm95, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %83, i32 0, i32 1
  store i32 0, i32* %cm_curX, align 4
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.94, %while.end
  br label %if.end.113

if.else.97:                                       ; preds = %if.else
  %84 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %85 = load i32, i32* %vpos.addr, align 4
  %86 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window98 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %86, i32 0, i32 74
  %87 = load i32, i32* %specified_window98, align 4
  call void @tty_set_scroll_region(%struct.frame* %84, i32 %85, i32 %87)
  %88 = load i32, i32* %n.addr, align 4
  %cmp99 = icmp slt i32 %88, 0
  br i1 %cmp99, label %if.then.100, label %if.else.103

if.then.100:                                      ; preds = %if.else.97
  %89 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %90 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window101 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %90, i32 0, i32 74
  %91 = load i32, i32* %specified_window101, align 4
  %sub102 = sub nsw i32 %91, 1
  call void @raw_cursor_to(%struct.frame* %89, i32 %sub102, i32 0)
  br label %if.end.104

if.else.103:                                      ; preds = %if.else.97
  %92 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %93 = load i32, i32* %vpos.addr, align 4
  call void @raw_cursor_to(%struct.frame* %92, i32 %93, i32 0)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.103, %if.then.100
  %94 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %94)
  br label %while.cond.105

while.cond.105:                                   ; preds = %while.body.108, %if.end.104
  %95 = load i32, i32* %i, align 4
  %dec106 = add nsw i32 %95, -1
  store i32 %dec106, i32* %i, align 4
  %cmp107 = icmp sge i32 %dec106, 0
  br i1 %cmp107, label %while.body.108, label %while.end.111

while.body.108:                                   ; preds = %while.cond.105
  %96 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %96, %struct.tty_display_info** @current_tty, align 8
  %97 = load i8*, i8** %scroll, align 8
  %98 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window109 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %98, i32 0, i32 74
  %99 = load i32, i32* %specified_window109, align 4
  %100 = load i32, i32* %vpos.addr, align 4
  %sub110 = sub nsw i32 %99, %100
  call void @tputs(i8* %97, i32 %sub110, i32 (i32)* @cmputc)
  br label %while.cond.105

while.end.111:                                    ; preds = %while.cond.105
  %101 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %102 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window112 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %102, i32 0, i32 74
  %103 = load i32, i32* %specified_window112, align 4
  call void @tty_set_scroll_region(%struct.frame* %101, i32 0, i32 %103)
  br label %if.end.113

if.end.113:                                       ; preds = %while.end.111, %if.end.96
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %if.then.81
  %104 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method115 = getelementptr inbounds %struct.frame, %struct.frame* %104, i32 0, i32 26
  %105 = bitcast i48* %output_method115 to i64*
  %bf.load116 = load i64, i64* %105, align 8
  %bf.lshr117 = lshr i64 %bf.load116, 23
  %bf.clear118 = and i64 %bf.lshr117, 7
  %bf.cast119 = trunc i64 %bf.clear118 to i32
  %cmp120 = icmp eq i32 %bf.cast119, 1
  br i1 %cmp120, label %cond.true.128, label %lor.lhs.false.121

lor.lhs.false.121:                                ; preds = %if.end.114
  %106 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method122 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 26
  %107 = bitcast i48* %output_method122 to i64*
  %bf.load123 = load i64, i64* %107, align 8
  %bf.lshr124 = lshr i64 %bf.load123, 23
  %bf.clear125 = and i64 %bf.lshr124, 7
  %bf.cast126 = trunc i64 %bf.clear125 to i32
  %cmp127 = icmp eq i32 %bf.cast126, 3
  br i1 %cmp127, label %cond.true.128, label %cond.false.132

cond.true.128:                                    ; preds = %lor.lhs.false.121, %if.end.114
  %108 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal129 = getelementptr inbounds %struct.frame, %struct.frame* %108, i32 0, i32 61
  %109 = load %struct.terminal*, %struct.terminal** %terminal129, align 8
  %display_info130 = getelementptr inbounds %struct.terminal, %struct.terminal* %109, i32 0, i32 12
  %tty131 = bitcast %union.display_info* %display_info130 to %struct.tty_display_info**
  %110 = load %struct.tty_display_info*, %struct.tty_display_info** %tty131, align 8
  br label %cond.end.133

cond.false.132:                                   ; preds = %lor.lhs.false.121
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.133

cond.end.133:                                     ; preds = %111, %cond.true.128
  %cond134 = phi %struct.tty_display_info* [ %110, %cond.true.128 ], [ null, %111 ]
  %scroll_region_ok135 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond134, i32 0, i32 75
  %bf.load136 = load i8, i8* %scroll_region_ok135, align 4
  %bf.lshr137 = lshr i8 %bf.load136, 6
  %bf.clear138 = and i8 %bf.lshr137, 1
  %bf.cast139 = trunc i8 %bf.clear138 to i1
  br i1 %bf.cast139, label %if.end.170, label %land.lhs.true.140

land.lhs.true.140:                                ; preds = %cond.end.133
  %112 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method141 = getelementptr inbounds %struct.frame, %struct.frame* %112, i32 0, i32 26
  %113 = bitcast i48* %output_method141 to i64*
  %bf.load142 = load i64, i64* %113, align 8
  %bf.lshr143 = lshr i64 %bf.load142, 23
  %bf.clear144 = and i64 %bf.lshr143, 7
  %bf.cast145 = trunc i64 %bf.clear144 to i32
  %cmp146 = icmp eq i32 %bf.cast145, 1
  br i1 %cmp146, label %cond.true.154, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %land.lhs.true.140
  %114 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method148 = getelementptr inbounds %struct.frame, %struct.frame* %114, i32 0, i32 26
  %115 = bitcast i48* %output_method148 to i64*
  %bf.load149 = load i64, i64* %115, align 8
  %bf.lshr150 = lshr i64 %bf.load149, 23
  %bf.clear151 = and i64 %bf.lshr150, 7
  %bf.cast152 = trunc i64 %bf.clear151 to i32
  %cmp153 = icmp eq i32 %bf.cast152, 3
  br i1 %cmp153, label %cond.true.154, label %cond.false.158

cond.true.154:                                    ; preds = %lor.lhs.false.147, %land.lhs.true.140
  %116 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal155 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 61
  %117 = load %struct.terminal*, %struct.terminal** %terminal155, align 8
  %display_info156 = getelementptr inbounds %struct.terminal, %struct.terminal* %117, i32 0, i32 12
  %tty157 = bitcast %union.display_info* %display_info156 to %struct.tty_display_info**
  %118 = load %struct.tty_display_info*, %struct.tty_display_info** %tty157, align 8
  br label %cond.end.159

cond.false.158:                                   ; preds = %lor.lhs.false.147
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.159

cond.end.159:                                     ; preds = %119, %cond.true.154
  %cond160 = phi %struct.tty_display_info* [ %118, %cond.true.154 ], [ null, %119 ]
  %memory_below_frame161 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond160, i32 0, i32 75
  %bf.load162 = load i8, i8* %memory_below_frame161, align 4
  %bf.lshr163 = lshr i8 %bf.load162, 7
  %bf.cast164 = trunc i8 %bf.lshr163 to i1
  br i1 %bf.cast164, label %land.lhs.true.165, label %if.end.170

land.lhs.true.165:                                ; preds = %cond.end.159
  %120 = load i32, i32* %n.addr, align 4
  %cmp166 = icmp slt i32 %120, 0
  br i1 %cmp166, label %if.then.167, label %if.end.170

if.then.167:                                      ; preds = %land.lhs.true.165
  %121 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %122 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines168 = getelementptr inbounds %struct.frame, %struct.frame* %122, i32 0, i32 39
  %123 = load i32, i32* %total_lines168, align 4
  %124 = load i32, i32* %n.addr, align 4
  %add169 = add nsw i32 %123, %124
  call void @cursor_to(%struct.frame* %121, i32 %add169, i32 0)
  %125 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @clear_to_end(%struct.frame* %125)
  br label %if.end.170

if.end.170:                                       ; preds = %if.then, %if.then.79, %if.then.167, %land.lhs.true.165, %cond.end.159, %cond.end.133
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_insert_glyphs(%struct.frame* %f, %struct.glyph* %start, i32 %len) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %start.addr = alloca %struct.glyph*, align 8
  %len.addr = alloca i32, align 4
  %buf = alloca i8*, align 8
  %glyph = alloca %struct.glyph*, align 8
  %conversion_buffer = alloca i8*, align 8
  %space = alloca [1 x i8], align 1
  %coding = alloca %struct.coding_system*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.glyph* %start, %struct.glyph** %start.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store %struct.glyph* null, %struct.glyph** %glyph, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_chars = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 33
  %9 = load i8*, i8** %TS_ins_multi_chars, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.end.11

if.then:                                          ; preds = %cond.end
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_multi_chars8 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 33
  %11 = load i8*, i8** %TS_ins_multi_chars8, align 8
  %12 = load i32, i32* %len.addr, align 4
  %call = call i8* @tparam(i8* %11, i8* null, i32 0, i32 %12, i32 0, i32 0, i32 0)
  store i8* %call, i8** %buf, align 8
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %13, %struct.tty_display_info** @current_tty, align 8
  %14 = load i8*, i8** %buf, align 8
  call void @tputs(i8* %14, i32 1, i32 (i32)* @cmputc)
  %15 = load i8*, i8** %buf, align 8
  call void @xfree(i8* %15)
  %16 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %tobool9 = icmp ne %struct.glyph* %16, null
  br i1 %tobool9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %18 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %19 = load i32, i32* %len.addr, align 4
  call void @write_glyphs(%struct.frame* %17, %struct.glyph* %18, i32 %19)
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  br label %return

if.end.11:                                        ; preds = %cond.end
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_on_insert(%struct.tty_display_info* %20)
  %21 = load i32, i32* %len.addr, align 4
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 10
  %23 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %23, i32 0, i32 1
  %24 = load i32, i32* %cm_curX, align 4
  %add = add nsw i32 %24, %21
  store i32 %add, i32* %cm_curX, align 4
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %25, i32 0, i32 10
  %26 = load %struct.cm*, %struct.cm** %Wcm12, align 8
  %cm_cols = getelementptr inbounds %struct.cm, %struct.cm* %26, i32 0, i32 18
  %27 = load i32, i32* %cm_cols, align 4
  %cmp13 = icmp sge i32 %add, %27
  br i1 %cmp13, label %land.lhs.true, label %if.end.43

land.lhs.true:                                    ; preds = %if.end.11
  %28 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm14 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %28, i32 0, i32 10
  %29 = load %struct.cm*, %struct.cm** %Wcm14, align 8
  %cm_magicwrap = getelementptr inbounds %struct.cm, %struct.cm* %29, i32 0, i32 21
  %bf.load15 = load i8, i8* %cm_magicwrap, align 4
  %bf.lshr16 = lshr i8 %bf.load15, 1
  %bf.clear17 = and i8 %bf.lshr16, 1
  %bf.cast18 = trunc i8 %bf.clear17 to i1
  br i1 %bf.cast18, label %if.end.43, label %if.then.19

if.then.19:                                       ; preds = %land.lhs.true
  %30 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm20 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %30, i32 0, i32 10
  %31 = load %struct.cm*, %struct.cm** %Wcm20, align 8
  %cm_losewrap = getelementptr inbounds %struct.cm, %struct.cm* %31, i32 0, i32 21
  %bf.load21 = load i8, i8* %cm_losewrap, align 4
  %bf.lshr22 = lshr i8 %bf.load21, 3
  %bf.clear23 = and i8 %bf.lshr22, 1
  %bf.cast24 = trunc i8 %bf.clear23 to i1
  br i1 %bf.cast24, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.then.19
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm26 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %32, i32 0, i32 10
  %33 = load %struct.cm*, %struct.cm** %Wcm26, align 8
  %cm_curX27 = getelementptr inbounds %struct.cm, %struct.cm* %33, i32 0, i32 1
  store i32 -1, i32* %cm_curX27, align 4
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm28 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 10
  %35 = load %struct.cm*, %struct.cm** %Wcm28, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %35, i32 0, i32 0
  store i32 -1, i32* %cm_curY, align 4
  br label %if.end.42

if.else:                                          ; preds = %if.then.19
  %36 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %36, i32 0, i32 10
  %37 = load %struct.cm*, %struct.cm** %Wcm29, align 8
  %cm_autowrap = getelementptr inbounds %struct.cm, %struct.cm* %37, i32 0, i32 21
  %bf.load30 = load i8, i8* %cm_autowrap, align 4
  %bf.clear31 = and i8 %bf.load30, 1
  %bf.cast32 = trunc i8 %bf.clear31 to i1
  br i1 %bf.cast32, label %if.then.33, label %if.else.38

if.then.33:                                       ; preds = %if.else
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm34 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 10
  %39 = load %struct.cm*, %struct.cm** %Wcm34, align 8
  %cm_curX35 = getelementptr inbounds %struct.cm, %struct.cm* %39, i32 0, i32 1
  store i32 0, i32* %cm_curX35, align 4
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm36 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %40, i32 0, i32 10
  %41 = load %struct.cm*, %struct.cm** %Wcm36, align 8
  %cm_curY37 = getelementptr inbounds %struct.cm, %struct.cm* %41, i32 0, i32 0
  %42 = load i32, i32* %cm_curY37, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %cm_curY37, align 4
  br label %if.end.41

if.else.38:                                       ; preds = %if.else
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm39 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %43, i32 0, i32 10
  %44 = load %struct.cm*, %struct.cm** %Wcm39, align 8
  %cm_curX40 = getelementptr inbounds %struct.cm, %struct.cm* %44, i32 0, i32 1
  %45 = load i32, i32* %cm_curX40, align 4
  %dec = add nsw i32 %45, -1
  store i32 %dec, i32* %cm_curX40, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.33
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.25
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %land.lhs.true, %if.end.11
  %46 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %tobool44 = icmp ne %struct.glyph* %46, null
  br i1 %tobool44, label %if.end.46, label %if.then.45

if.then.45:                                       ; preds = %if.end.43
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %space, i32 0, i64 0
  store i8 32, i8* %arrayidx, align 1
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.end.43
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal47 = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 61
  %48 = load %struct.terminal*, %struct.terminal** %terminal47, align 8
  %terminal_coding = getelementptr inbounds %struct.terminal, %struct.terminal* %48, i32 0, i32 13
  %49 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %49, i32 0, i32 1
  %bf.load48 = load i32, i32* %common_flags, align 8
  %bf.clear49 = and i32 %bf.load48, 16383
  %and = and i32 %bf.clear49, 2048
  %tobool50 = icmp ne i32 %and, 0
  br i1 %tobool50, label %cond.true.51, label %cond.false.54

cond.true.51:                                     ; preds = %if.end.46
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal52 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 61
  %51 = load %struct.terminal*, %struct.terminal** %terminal52, align 8
  %terminal_coding53 = getelementptr inbounds %struct.terminal, %struct.terminal* %51, i32 0, i32 13
  %52 = load %struct.coding_system*, %struct.coding_system** %terminal_coding53, align 8
  br label %cond.end.55

cond.false.54:                                    ; preds = %if.end.46
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.54, %cond.true.51
  %cond56 = phi %struct.coding_system* [ %52, %cond.true.51 ], [ @safe_terminal_coding, %cond.false.54 ]
  store %struct.coding_system* %cond56, %struct.coding_system** %coding, align 8
  %53 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %53, i32 0, i32 1
  %bf.load57 = load i32, i32* %mode, align 8
  %bf.lshr58 = lshr i32 %bf.load57, 14
  %bf.clear59 = and i32 %bf.lshr58, 31
  %and60 = and i32 %bf.clear59, -2
  %bf.load61 = load i32, i32* %mode, align 8
  %bf.value = and i32 %and60, 31
  %bf.shl = shl i32 %bf.value, 14
  %bf.clear62 = and i32 %bf.load61, -507905
  %bf.set = or i32 %bf.clear62, %bf.shl
  store i32 %bf.set, i32* %mode, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.133, %cond.end.55
  %54 = load i32, i32* %len.addr, align 4
  %dec63 = add nsw i32 %54, -1
  store i32 %dec63, i32* %len.addr, align 4
  %cmp64 = icmp sgt i32 %54, 0
  br i1 %cmp64, label %while.body, label %while.end.134

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %55 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %55, i32 0, i32 32
  %56 = load i8*, i8** %TS_ins_char, align 8
  %tobool65 = icmp ne i8* %56, null
  br i1 %tobool65, label %if.then.66, label %if.end.68

if.then.66:                                       ; preds = %do.body
  %57 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %57, %struct.tty_display_info** @current_tty, align 8
  %58 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char67 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %58, i32 0, i32 32
  %59 = load i8*, i8** %TS_ins_char67, align 8
  call void @tputs(i8* %59, i32 1, i32 (i32)* @cmputc)
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.66, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.68
  %60 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %tobool69 = icmp ne %struct.glyph* %60, null
  br i1 %tobool69, label %if.else.71, label %if.then.70

if.then.70:                                       ; preds = %do.end
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %space, i32 0, i32 0
  store i8* %arraydecay, i8** %conversion_buffer, align 8
  %61 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %61, i32 0, i32 8
  store i64 1, i64* %produced, align 8
  br label %if.end.103

if.else.71:                                       ; preds = %do.end
  %62 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_highlight_if_desired(%struct.tty_display_info* %62)
  %63 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %64 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %face_id = getelementptr inbounds %struct.glyph, %struct.glyph* %64, i32 0, i32 7
  %65 = bitcast i24* %face_id to i32*
  %bf.load72 = load i32, i32* %65, align 4
  %bf.clear73 = and i32 %bf.load72, 1048575
  call void @turn_on_face(%struct.frame* %63, i32 %bf.clear73)
  %66 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  store %struct.glyph* %66, %struct.glyph** %glyph, align 8
  %67 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %incdec.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %67, i32 1
  store %struct.glyph* %incdec.ptr, %struct.glyph** %start.addr, align 8
  br label %while.cond.74

while.cond.74:                                    ; preds = %do.end.87, %if.else.71
  %68 = load i32, i32* %len.addr, align 4
  %tobool75 = icmp ne i32 %68, 0
  br i1 %tobool75, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.74
  %69 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %padding_p = getelementptr inbounds %struct.glyph, %struct.glyph* %69, i32 0, i32 6
  %70 = bitcast i24* %padding_p to i32*
  %bf.load76 = load i32, i32* %70, align 8
  %bf.lshr77 = lshr i32 %bf.load76, 7
  %bf.clear78 = and i32 %bf.lshr77, 1
  %bf.cast79 = trunc i32 %bf.clear78 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.74
  %71 = phi i1 [ false, %while.cond.74 ], [ %bf.cast79, %land.rhs ]
  br i1 %71, label %while.body.80, label %while.end

while.body.80:                                    ; preds = %land.end
  br label %do.body.81

do.body.81:                                       ; preds = %while.body.80
  %72 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char82 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %72, i32 0, i32 32
  %73 = load i8*, i8** %TS_ins_char82, align 8
  %tobool83 = icmp ne i8* %73, null
  br i1 %tobool83, label %if.then.84, label %if.end.86

if.then.84:                                       ; preds = %do.body.81
  %74 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %74, %struct.tty_display_info** @current_tty, align 8
  %75 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_ins_char85 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %75, i32 0, i32 32
  %76 = load i8*, i8** %TS_ins_char85, align 8
  call void @tputs(i8* %76, i32 1, i32 (i32)* @cmputc)
  br label %if.end.86

if.end.86:                                        ; preds = %if.then.84, %do.body.81
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  %77 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %incdec.ptr88 = getelementptr inbounds %struct.glyph, %struct.glyph* %77, i32 1
  store %struct.glyph* %incdec.ptr88, %struct.glyph** %start.addr, align 8
  %78 = load i32, i32* %len.addr, align 4
  %dec89 = add nsw i32 %78, -1
  store i32 %dec89, i32* %len.addr, align 4
  br label %while.cond.74

while.end:                                        ; preds = %land.end
  %79 = load i32, i32* %len.addr, align 4
  %cmp90 = icmp sle i32 %79, 0
  br i1 %cmp90, label %if.then.91, label %if.end.101

if.then.91:                                       ; preds = %while.end
  %80 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %mode92 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %80, i32 0, i32 1
  %bf.load93 = load i32, i32* %mode92, align 8
  %bf.lshr94 = lshr i32 %bf.load93, 14
  %bf.clear95 = and i32 %bf.lshr94, 31
  %or = or i32 %bf.clear95, 1
  %bf.load96 = load i32, i32* %mode92, align 8
  %bf.value97 = and i32 %or, 31
  %bf.shl98 = shl i32 %bf.value97, 14
  %bf.clear99 = and i32 %bf.load96, -507905
  %bf.set100 = or i32 %bf.clear99, %bf.shl98
  store i32 %bf.set100, i32* %mode92, align 8
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.91, %while.end
  %81 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %82 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %call102 = call i8* @encode_terminal_code(%struct.glyph* %81, i32 1, %struct.coding_system* %82)
  store i8* %call102, i8** %conversion_buffer, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.101, %if.then.70
  %83 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %produced104 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %83, i32 0, i32 8
  %84 = load i64, i64* %produced104, align 8
  %cmp105 = icmp sgt i64 %84, 0
  br i1 %cmp105, label %if.then.106, label %if.end.121

if.then.106:                                      ; preds = %if.end.103
  call void @block_input()
  %85 = load i8*, i8** %conversion_buffer, align 8
  %86 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %produced107 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %86, i32 0, i32 8
  %87 = load i64, i64* %produced107, align 8
  %88 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %88, i32 0, i32 4
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call108 = call i64 @fwrite(i8* %85, i64 1, i64 %87, %struct._IO_FILE* %89)
  %90 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output109 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %90, i32 0, i32 4
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %output109, align 8
  %call110 = call i32 @ferror(%struct._IO_FILE* %91) #3
  %tobool111 = icmp ne i32 %call110, 0
  br i1 %tobool111, label %if.then.112, label %if.end.114

if.then.112:                                      ; preds = %if.then.106
  %92 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output113 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %92, i32 0, i32 4
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %output113, align 8
  call void @clearerr(%struct._IO_FILE* %93) #3
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.112, %if.then.106
  %94 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %94, i32 0, i32 5
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool115 = icmp ne %struct._IO_FILE* %95, null
  br i1 %tobool115, label %if.then.116, label %if.end.120

if.then.116:                                      ; preds = %if.end.114
  %96 = load i8*, i8** %conversion_buffer, align 8
  %97 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %produced117 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %97, i32 0, i32 8
  %98 = load i64, i64* %produced117, align 8
  %99 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript118 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %99, i32 0, i32 5
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript118, align 8
  %call119 = call i64 @fwrite(i8* %96, i64 1, i64 %98, %struct._IO_FILE* %100)
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.116, %if.end.114
  call void @unblock_input()
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end.103
  br label %do.body.122

do.body.122:                                      ; preds = %if.end.121
  %101 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_inserted_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %101, i32 0, i32 35
  %102 = load i8*, i8** %TS_pad_inserted_char, align 8
  %tobool123 = icmp ne i8* %102, null
  br i1 %tobool123, label %if.then.124, label %if.end.126

if.then.124:                                      ; preds = %do.body.122
  %103 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %103, %struct.tty_display_info** @current_tty, align 8
  %104 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_pad_inserted_char125 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %104, i32 0, i32 35
  %105 = load i8*, i8** %TS_pad_inserted_char125, align 8
  call void @tputs(i8* %105, i32 1, i32 (i32)* @cmputc)
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.124, %do.body.122
  br label %do.end.127

do.end.127:                                       ; preds = %if.end.126
  %106 = load %struct.glyph*, %struct.glyph** %start.addr, align 8
  %tobool128 = icmp ne %struct.glyph* %106, null
  br i1 %tobool128, label %if.then.129, label %if.end.133

if.then.129:                                      ; preds = %do.end.127
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %108 = load %struct.glyph*, %struct.glyph** %glyph, align 8
  %face_id130 = getelementptr inbounds %struct.glyph, %struct.glyph* %108, i32 0, i32 7
  %109 = bitcast i24* %face_id130 to i32*
  %bf.load131 = load i32, i32* %109, align 4
  %bf.clear132 = and i32 %bf.load131, 1048575
  call void @turn_off_face(%struct.frame* %107, i32 %bf.clear132)
  %110 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_highlight(%struct.tty_display_info* %110)
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.129, %do.end.127
  br label %while.cond

while.end.134:                                    ; preds = %while.cond
  %111 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @cmcheckmagic(%struct.tty_display_info* %111)
  br label %return

return:                                           ; preds = %while.end.134, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_write_glyphs(%struct.frame* %f, %struct.glyph* %string, i32 %len) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %string.addr = alloca %struct.glyph*, align 8
  %len.addr = alloca i32, align 4
  %conversion_buffer = alloca i8*, align 8
  %coding = alloca %struct.coding_system*, align 8
  %n = alloca i32, align 4
  %stringlen = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  %face_id = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.glyph* %string, %struct.glyph** %string.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_insert(%struct.tty_display_info* %8)
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_hide_cursor(%struct.tty_display_info* %9)
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 10
  %11 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_autowrap = getelementptr inbounds %struct.cm, %struct.cm* %11, i32 0, i32 21
  %bf.load8 = load i8, i8* %cm_autowrap, align 4
  %bf.clear9 = and i8 %bf.load8, 1
  %bf.cast10 = trunc i8 %bf.clear9 to i1
  br i1 %bf.cast10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm11 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 10
  %13 = load %struct.cm*, %struct.cm** %Wcm11, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %13, i32 0, i32 0
  %14 = load i32, i32* %cm_curY, align 4
  %add = add nsw i32 %14, 1
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 39
  %16 = load i32, i32* %total_lines, align 4
  %cmp12 = icmp eq i32 %add, %16
  br i1 %cmp12, label %land.lhs.true.13, label %if.end

land.lhs.true.13:                                 ; preds = %land.lhs.true
  %17 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm14 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %17, i32 0, i32 10
  %18 = load %struct.cm*, %struct.cm** %Wcm14, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %18, i32 0, i32 1
  %19 = load i32, i32* %cm_curX, align 4
  %20 = load i32, i32* %len.addr, align 4
  %add15 = add nsw i32 %19, %20
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 36
  %22 = load i32, i32* %text_cols, align 4
  %cmp16 = icmp eq i32 %add15, %22
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.13
  %23 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true.13, %land.lhs.true, %cond.end
  %24 = load i32, i32* %len.addr, align 4
  %cmp17 = icmp sle i32 %24, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  br label %return

if.end.19:                                        ; preds = %if.end
  %25 = load i32, i32* %len.addr, align 4
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm20 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %26, i32 0, i32 10
  %27 = load %struct.cm*, %struct.cm** %Wcm20, align 8
  %cm_curX21 = getelementptr inbounds %struct.cm, %struct.cm* %27, i32 0, i32 1
  %28 = load i32, i32* %cm_curX21, align 4
  %add22 = add nsw i32 %28, %25
  store i32 %add22, i32* %cm_curX21, align 4
  %29 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm23 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %29, i32 0, i32 10
  %30 = load %struct.cm*, %struct.cm** %Wcm23, align 8
  %cm_cols = getelementptr inbounds %struct.cm, %struct.cm* %30, i32 0, i32 18
  %31 = load i32, i32* %cm_cols, align 4
  %cmp24 = icmp sge i32 %add22, %31
  br i1 %cmp24, label %land.lhs.true.25, label %if.end.58

land.lhs.true.25:                                 ; preds = %if.end.19
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm26 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %32, i32 0, i32 10
  %33 = load %struct.cm*, %struct.cm** %Wcm26, align 8
  %cm_magicwrap = getelementptr inbounds %struct.cm, %struct.cm* %33, i32 0, i32 21
  %bf.load27 = load i8, i8* %cm_magicwrap, align 4
  %bf.lshr28 = lshr i8 %bf.load27, 1
  %bf.clear29 = and i8 %bf.lshr28, 1
  %bf.cast30 = trunc i8 %bf.clear29 to i1
  br i1 %bf.cast30, label %if.end.58, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.25
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm32 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 10
  %35 = load %struct.cm*, %struct.cm** %Wcm32, align 8
  %cm_losewrap = getelementptr inbounds %struct.cm, %struct.cm* %35, i32 0, i32 21
  %bf.load33 = load i8, i8* %cm_losewrap, align 4
  %bf.lshr34 = lshr i8 %bf.load33, 3
  %bf.clear35 = and i8 %bf.lshr34, 1
  %bf.cast36 = trunc i8 %bf.clear35 to i1
  br i1 %bf.cast36, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %if.then.31
  %36 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm38 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %36, i32 0, i32 10
  %37 = load %struct.cm*, %struct.cm** %Wcm38, align 8
  %cm_curX39 = getelementptr inbounds %struct.cm, %struct.cm* %37, i32 0, i32 1
  store i32 -1, i32* %cm_curX39, align 4
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm40 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 10
  %39 = load %struct.cm*, %struct.cm** %Wcm40, align 8
  %cm_curY41 = getelementptr inbounds %struct.cm, %struct.cm* %39, i32 0, i32 0
  store i32 -1, i32* %cm_curY41, align 4
  br label %if.end.57

if.else:                                          ; preds = %if.then.31
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm42 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %40, i32 0, i32 10
  %41 = load %struct.cm*, %struct.cm** %Wcm42, align 8
  %cm_autowrap43 = getelementptr inbounds %struct.cm, %struct.cm* %41, i32 0, i32 21
  %bf.load44 = load i8, i8* %cm_autowrap43, align 4
  %bf.clear45 = and i8 %bf.load44, 1
  %bf.cast46 = trunc i8 %bf.clear45 to i1
  br i1 %bf.cast46, label %if.then.47, label %if.else.52

if.then.47:                                       ; preds = %if.else
  %42 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm48 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %42, i32 0, i32 10
  %43 = load %struct.cm*, %struct.cm** %Wcm48, align 8
  %cm_curX49 = getelementptr inbounds %struct.cm, %struct.cm* %43, i32 0, i32 1
  store i32 0, i32* %cm_curX49, align 4
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm50 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %44, i32 0, i32 10
  %45 = load %struct.cm*, %struct.cm** %Wcm50, align 8
  %cm_curY51 = getelementptr inbounds %struct.cm, %struct.cm* %45, i32 0, i32 0
  %46 = load i32, i32* %cm_curY51, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %cm_curY51, align 4
  br label %if.end.56

if.else.52:                                       ; preds = %if.else
  %47 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm53 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %47, i32 0, i32 10
  %48 = load %struct.cm*, %struct.cm** %Wcm53, align 8
  %cm_curX54 = getelementptr inbounds %struct.cm, %struct.cm* %48, i32 0, i32 1
  %49 = load i32, i32* %cm_curX54, align 4
  %dec55 = add nsw i32 %49, -1
  store i32 %dec55, i32* %cm_curX54, align 4
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.52, %if.then.47
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.then.37
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %land.lhs.true.25, %if.end.19
  %50 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal59 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 61
  %51 = load %struct.terminal*, %struct.terminal** %terminal59, align 8
  %terminal_coding = getelementptr inbounds %struct.terminal, %struct.terminal* %51, i32 0, i32 13
  %52 = load %struct.coding_system*, %struct.coding_system** %terminal_coding, align 8
  %common_flags = getelementptr inbounds %struct.coding_system, %struct.coding_system* %52, i32 0, i32 1
  %bf.load60 = load i32, i32* %common_flags, align 8
  %bf.clear61 = and i32 %bf.load60, 16383
  %and = and i32 %bf.clear61, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true.62, label %cond.false.65

cond.true.62:                                     ; preds = %if.end.58
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal63 = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 61
  %54 = load %struct.terminal*, %struct.terminal** %terminal63, align 8
  %terminal_coding64 = getelementptr inbounds %struct.terminal, %struct.terminal* %54, i32 0, i32 13
  %55 = load %struct.coding_system*, %struct.coding_system** %terminal_coding64, align 8
  br label %cond.end.66

cond.false.65:                                    ; preds = %if.end.58
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.65, %cond.true.62
  %cond67 = phi %struct.coding_system* [ %55, %cond.true.62 ], [ @safe_terminal_coding, %cond.false.65 ]
  store %struct.coding_system* %cond67, %struct.coding_system** %coding, align 8
  %56 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %mode = getelementptr inbounds %struct.coding_system, %struct.coding_system* %56, i32 0, i32 1
  %bf.load68 = load i32, i32* %mode, align 8
  %bf.lshr69 = lshr i32 %bf.load68, 14
  %bf.clear70 = and i32 %bf.lshr69, 31
  %and71 = and i32 %bf.clear70, -2
  %bf.load72 = load i32, i32* %mode, align 8
  %bf.value = and i32 %and71, 31
  %bf.shl = shl i32 %bf.value, 14
  %bf.clear73 = and i32 %bf.load72, -507905
  %bf.set = or i32 %bf.clear73, %bf.shl
  store i32 %bf.set, i32* %mode, align 8
  %57 = load i32, i32* %len.addr, align 4
  store i32 %57, i32* %stringlen, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.117, %cond.end.66
  %58 = load i32, i32* %stringlen, align 4
  %cmp74 = icmp ne i32 %58, 0
  br i1 %cmp74, label %for.body, label %for.end.118

for.body:                                         ; preds = %for.cond
  %59 = load %struct.glyph*, %struct.glyph** %string.addr, align 8
  %face_id75 = getelementptr inbounds %struct.glyph, %struct.glyph* %59, i32 0, i32 7
  %60 = bitcast i24* %face_id75 to i32*
  %bf.load76 = load i32, i32* %60, align 4
  %bf.clear77 = and i32 %bf.load76, 1048575
  store i32 %bf.clear77, i32* %face_id, align 4
  store i32 1, i32* %n, align 4
  br label %for.cond.78

for.cond.78:                                      ; preds = %for.inc, %for.body
  %61 = load i32, i32* %n, align 4
  %62 = load i32, i32* %stringlen, align 4
  %cmp79 = icmp slt i32 %61, %62
  br i1 %cmp79, label %for.body.80, label %for.end

for.body.80:                                      ; preds = %for.cond.78
  %63 = load i32, i32* %n, align 4
  %idxprom = sext i32 %63 to i64
  %64 = load %struct.glyph*, %struct.glyph** %string.addr, align 8
  %arrayidx = getelementptr inbounds %struct.glyph, %struct.glyph* %64, i64 %idxprom
  %face_id81 = getelementptr inbounds %struct.glyph, %struct.glyph* %arrayidx, i32 0, i32 7
  %65 = bitcast i24* %face_id81 to i32*
  %bf.load82 = load i32, i32* %65, align 4
  %bf.clear83 = and i32 %bf.load82, 1048575
  %66 = load i32, i32* %face_id, align 4
  %cmp84 = icmp ne i32 %bf.clear83, %66
  br i1 %cmp84, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %for.body.80
  br label %for.end

if.end.86:                                        ; preds = %for.body.80
  br label %for.inc

for.inc:                                          ; preds = %if.end.86
  %67 = load i32, i32* %n, align 4
  %inc87 = add nsw i32 %67, 1
  store i32 %inc87, i32* %n, align 4
  br label %for.cond.78

for.end:                                          ; preds = %if.then.85, %for.cond.78
  %68 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_highlight_if_desired(%struct.tty_display_info* %68)
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %70 = load i32, i32* %face_id, align 4
  call void @turn_on_face(%struct.frame* %69, i32 %70)
  %71 = load i32, i32* %n, align 4
  %72 = load i32, i32* %stringlen, align 4
  %cmp88 = icmp eq i32 %71, %72
  br i1 %cmp88, label %if.then.89, label %if.end.99

if.then.89:                                       ; preds = %for.end
  %73 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %mode90 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %73, i32 0, i32 1
  %bf.load91 = load i32, i32* %mode90, align 8
  %bf.lshr92 = lshr i32 %bf.load91, 14
  %bf.clear93 = and i32 %bf.lshr92, 31
  %or = or i32 %bf.clear93, 1
  %bf.load94 = load i32, i32* %mode90, align 8
  %bf.value95 = and i32 %or, 31
  %bf.shl96 = shl i32 %bf.value95, 14
  %bf.clear97 = and i32 %bf.load94, -507905
  %bf.set98 = or i32 %bf.clear97, %bf.shl96
  store i32 %bf.set98, i32* %mode90, align 8
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.89, %for.end
  %74 = load %struct.glyph*, %struct.glyph** %string.addr, align 8
  %75 = load i32, i32* %n, align 4
  %76 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %call = call i8* @encode_terminal_code(%struct.glyph* %74, i32 %75, %struct.coding_system* %76)
  store i8* %call, i8** %conversion_buffer, align 8
  %77 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %produced = getelementptr inbounds %struct.coding_system, %struct.coding_system* %77, i32 0, i32 8
  %78 = load i64, i64* %produced, align 8
  %cmp100 = icmp sgt i64 %78, 0
  br i1 %cmp100, label %if.then.101, label %if.end.116

if.then.101:                                      ; preds = %if.end.99
  call void @block_input()
  %79 = load i8*, i8** %conversion_buffer, align 8
  %80 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %produced102 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %80, i32 0, i32 8
  %81 = load i64, i64* %produced102, align 8
  %82 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %82, i32 0, i32 4
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call103 = call i64 @fwrite(i8* %79, i64 1, i64 %81, %struct._IO_FILE* %83)
  %84 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output104 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %84, i32 0, i32 4
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %output104, align 8
  %call105 = call i32 @ferror(%struct._IO_FILE* %85) #3
  %tobool106 = icmp ne i32 %call105, 0
  br i1 %tobool106, label %if.then.107, label %if.end.109

if.then.107:                                      ; preds = %if.then.101
  %86 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output108 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %86, i32 0, i32 4
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %output108, align 8
  call void @clearerr(%struct._IO_FILE* %87) #3
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.107, %if.then.101
  %88 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %88, i32 0, i32 5
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool110 = icmp ne %struct._IO_FILE* %89, null
  br i1 %tobool110, label %if.then.111, label %if.end.115

if.then.111:                                      ; preds = %if.end.109
  %90 = load i8*, i8** %conversion_buffer, align 8
  %91 = load %struct.coding_system*, %struct.coding_system** %coding, align 8
  %produced112 = getelementptr inbounds %struct.coding_system, %struct.coding_system* %91, i32 0, i32 8
  %92 = load i64, i64* %produced112, align 8
  %93 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript113 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %93, i32 0, i32 5
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript113, align 8
  %call114 = call i64 @fwrite(i8* %90, i64 1, i64 %92, %struct._IO_FILE* %94)
  br label %if.end.115

if.end.115:                                       ; preds = %if.then.111, %if.end.109
  call void @unblock_input()
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.115, %if.end.99
  %95 = load i32, i32* %n, align 4
  %96 = load %struct.glyph*, %struct.glyph** %string.addr, align 8
  %idx.ext = sext i32 %95 to i64
  %add.ptr = getelementptr inbounds %struct.glyph, %struct.glyph* %96, i64 %idx.ext
  store %struct.glyph* %add.ptr, %struct.glyph** %string.addr, align 8
  %97 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %98 = load i32, i32* %face_id, align 4
  call void @turn_off_face(%struct.frame* %97, i32 %98)
  %99 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_highlight(%struct.tty_display_info* %99)
  br label %for.inc.117

for.inc.117:                                      ; preds = %if.end.116
  %100 = load i32, i32* %n, align 4
  %101 = load i32, i32* %stringlen, align 4
  %sub = sub nsw i32 %101, %100
  store i32 %sub, i32* %stringlen, align 4
  br label %for.cond

for.end.118:                                      ; preds = %for.cond
  %102 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @cmcheckmagic(%struct.tty_display_info* %102)
  br label %return

return:                                           ; preds = %for.end.118, %if.then.18
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_delete_glyphs(%struct.frame* %f, i32 %n) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %n.addr = alloca i32, align 4
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %delete_in_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 72
  %bf.load8 = load i8, i8* %delete_in_insert_mode, align 8
  %bf.clear9 = and i8 %bf.load8, 1
  %bf.cast10 = trunc i8 %bf.clear9 to i1
  br i1 %bf.cast10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_on_insert(%struct.tty_display_info* %9)
  br label %if.end.14

if.else:                                          ; preds = %cond.end
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_insert(%struct.tty_display_info* %10)
  br label %do.body

do.body:                                          ; preds = %if.else
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_delete_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 29
  %12 = load i8*, i8** %TS_delete_mode, align 8
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %do.body
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %13, %struct.tty_display_info** @current_tty, align 8
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_delete_mode12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 29
  %15 = load i8*, i8** %TS_delete_mode12, align 8
  %16 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %16, 5
  %17 = inttoptr i64 %sub to i8*
  %18 = bitcast i8* %17 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 39
  %19 = load i32, i32* %total_lines, align 4
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %20, i32 0, i32 10
  %21 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %21, i32 0, i32 0
  %22 = load i32, i32* %cm_curY, align 4
  %sub13 = sub nsw i32 %19, %22
  call void @tputs(i8* %15, i32 %sub13, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then.11, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.14

if.end.14:                                        ; preds = %do.end, %if.then
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_chars = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %23, i32 0, i32 26
  %24 = load i8*, i8** %TS_del_multi_chars, align 8
  %tobool15 = icmp ne i8* %24, null
  br i1 %tobool15, label %if.then.16, label %if.else.18

if.then.16:                                       ; preds = %if.end.14
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_multi_chars17 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %25, i32 0, i32 26
  %26 = load i8*, i8** %TS_del_multi_chars17, align 8
  %27 = load i32, i32* %n.addr, align 4
  %call = call i8* @tparam(i8* %26, i8* null, i32 0, i32 %27, i32 0, i32 0, i32 0)
  store i8* %call, i8** %buf, align 8
  %28 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %28, %struct.tty_display_info** @current_tty, align 8
  %29 = load i8*, i8** %buf, align 8
  call void @tputs(i8* %29, i32 1, i32 (i32)* @cmputc)
  %30 = load i8*, i8** %buf, align 8
  call void @xfree(i8* %30)
  br label %if.end.20

if.else.18:                                       ; preds = %if.end.14
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.18
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %cmp19 = icmp slt i32 %31, %32
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %33 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %33, %struct.tty_display_info** @current_tty, align 8
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_del_char = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 25
  %35 = load i8*, i8** %TS_del_char, align 8
  call void @tputs(i8* %35, i32 1, i32 (i32)* @cmputc)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.20

if.end.20:                                        ; preds = %for.end, %if.then.16
  %37 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %delete_in_insert_mode21 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %37, i32 0, i32 72
  %bf.load22 = load i8, i8* %delete_in_insert_mode21, align 8
  %bf.clear23 = and i8 %bf.load22, 1
  %bf.cast24 = trunc i8 %bf.clear23 to i1
  br i1 %bf.cast24, label %if.end.37, label %if.then.25

if.then.25:                                       ; preds = %if.end.20
  br label %do.body.26

do.body.26:                                       ; preds = %if.then.25
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_delete_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 30
  %39 = load i8*, i8** %TS_end_delete_mode, align 8
  %tobool27 = icmp ne i8* %39, null
  br i1 %tobool27, label %if.then.28, label %if.end.35

if.then.28:                                       ; preds = %do.body.26
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %40, %struct.tty_display_info** @current_tty, align 8
  %41 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_delete_mode29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %41, i32 0, i32 30
  %42 = load i8*, i8** %TS_end_delete_mode29, align 8
  %43 = load i64, i64* @selected_frame, align 8
  %sub30 = sub nsw i64 %43, 5
  %44 = inttoptr i64 %sub30 to i8*
  %45 = bitcast i8* %44 to %struct.frame*
  %total_lines31 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 39
  %46 = load i32, i32* %total_lines31, align 4
  %47 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm32 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %47, i32 0, i32 10
  %48 = load %struct.cm*, %struct.cm** %Wcm32, align 8
  %cm_curY33 = getelementptr inbounds %struct.cm, %struct.cm* %48, i32 0, i32 0
  %49 = load i32, i32* %cm_curY33, align 4
  %sub34 = sub nsw i32 %46, %49
  call void @tputs(i8* %42, i32 %sub34, i32 (i32)* @cmputc)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.28, %do.body.26
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  br label %if.end.37

if.end.37:                                        ; preds = %do.end.36, %if.end.20
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_ring_bell(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %tobool = icmp ne %struct._IO_FILE* %9, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %10, %struct.tty_display_info** @current_tty, align 8
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_visible_bell = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 46
  %12 = load i8*, i8** %TS_visible_bell, align 8
  %tobool8 = icmp ne i8* %12, null
  br i1 %tobool8, label %land.lhs.true, label %cond.false.12

land.lhs.true:                                    ; preds = %if.then
  %13 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 496), align 1
  %tobool9 = trunc i8 %13 to i1
  br i1 %tobool9, label %cond.true.10, label %cond.false.12

cond.true.10:                                     ; preds = %land.lhs.true
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_visible_bell11 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 46
  %15 = load i8*, i8** %TS_visible_bell11, align 8
  br label %cond.end.13

cond.false.12:                                    ; preds = %land.lhs.true, %if.then
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_bell = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 19
  %17 = load i8*, i8** %TS_bell, align 8
  br label %cond.end.13

cond.end.13:                                      ; preds = %cond.false.12, %cond.true.10
  %cond14 = phi i8* [ %15, %cond.true.10 ], [ %17, %cond.false.12 ]
  %18 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 39
  %21 = load i32, i32* %total_lines, align 4
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 10
  %23 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %23, i32 0, i32 0
  %24 = load i32, i32* %cm_curY, align 4
  %sub15 = sub nsw i32 %21, %24
  call void @tputs(i8* %cond14, i32 %sub15, i32 (i32)* @cmputc)
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output16 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %25, i32 0, i32 4
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %output16, align 8
  %call = call i32 @fflush(%struct._IO_FILE* %26)
  br label %if.end

if.end:                                           ; preds = %cond.end.13, %cond.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_reset_terminal_modes(%struct.terminal* %terminal) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 12
  %tty1 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty1, align 8
  store %struct.tty_display_info* %1, %struct.tty_display_info** %tty, align 8
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %tobool = icmp ne %struct._IO_FILE* %3, null
  br i1 %tobool, label %if.then, label %if.end.42

if.then:                                          ; preds = %entry
  %4 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 953)
  call void @tty_send_additional_strings(%struct.terminal* %4, i64 %call)
  %5 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_highlight(%struct.tty_display_info* %5)
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_insert(%struct.tty_display_info* %6)
  br label %do.body

do.body:                                          ; preds = %if.then
  %7 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_keypad_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %7, i32 0, i32 36
  %8 = load i8*, i8** %TS_end_keypad_mode, align 8
  %tobool2 = icmp ne i8* %8, null
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %do.body
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %9, %struct.tty_display_info** @current_tty, align 8
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_keypad_mode4 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 36
  %11 = load i8*, i8** %TS_end_keypad_mode4, align 8
  %12 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %12, 5
  %13 = inttoptr i64 %sub to i8*
  %14 = bitcast i8* %13 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 39
  %15 = load i32, i32* %total_lines, align 4
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 10
  %17 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %17, i32 0, i32 0
  %18 = load i32, i32* %cm_curY, align 4
  %sub5 = sub nsw i32 %15, %18
  call void @tputs(i8* %11, i32 %sub5, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.6

do.body.6:                                        ; preds = %do.end
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_normal = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %19, i32 0, i32 47
  %20 = load i8*, i8** %TS_cursor_normal, align 8
  %tobool7 = icmp ne i8* %20, null
  br i1 %tobool7, label %if.then.8, label %if.end.15

if.then.8:                                        ; preds = %do.body.6
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %21, %struct.tty_display_info** @current_tty, align 8
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_normal9 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 47
  %23 = load i8*, i8** %TS_cursor_normal9, align 8
  %24 = load i64, i64* @selected_frame, align 8
  %sub10 = sub nsw i64 %24, 5
  %25 = inttoptr i64 %sub10 to i8*
  %26 = bitcast i8* %25 to %struct.frame*
  %total_lines11 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 39
  %27 = load i32, i32* %total_lines11, align 4
  %28 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm12 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %28, i32 0, i32 10
  %29 = load %struct.cm*, %struct.cm** %Wcm12, align 8
  %cm_curY13 = getelementptr inbounds %struct.cm, %struct.cm* %29, i32 0, i32 0
  %30 = load i32, i32* %cm_curY13, align 4
  %sub14 = sub nsw i32 %27, %30
  call void @tputs(i8* %23, i32 %sub14, i32 (i32)* @cmputc)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.8, %do.body.6
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %31 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_termcap_modes = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %31, i32 0, i32 44
  %32 = load i8*, i8** %TS_end_termcap_modes, align 8
  %tobool18 = icmp ne i8* %32, null
  br i1 %tobool18, label %if.then.19, label %if.end.26

if.then.19:                                       ; preds = %do.body.17
  %33 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %33, %struct.tty_display_info** @current_tty, align 8
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_termcap_modes20 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 44
  %35 = load i8*, i8** %TS_end_termcap_modes20, align 8
  %36 = load i64, i64* @selected_frame, align 8
  %sub21 = sub nsw i64 %36, 5
  %37 = inttoptr i64 %sub21 to i8*
  %38 = bitcast i8* %37 to %struct.frame*
  %total_lines22 = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 39
  %39 = load i32, i32* %total_lines22, align 4
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm23 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %40, i32 0, i32 10
  %41 = load %struct.cm*, %struct.cm** %Wcm23, align 8
  %cm_curY24 = getelementptr inbounds %struct.cm, %struct.cm* %41, i32 0, i32 0
  %42 = load i32, i32* %cm_curY24, align 4
  %sub25 = sub nsw i32 %39, %42
  call void @tputs(i8* %35, i32 %sub25, i32 (i32)* @cmputc)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.19, %do.body.17
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.27
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_orig_pair = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %43, i32 0, i32 63
  %44 = load i8*, i8** %TS_orig_pair, align 8
  %tobool29 = icmp ne i8* %44, null
  br i1 %tobool29, label %if.then.30, label %if.end.37

if.then.30:                                       ; preds = %do.body.28
  %45 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %45, %struct.tty_display_info** @current_tty, align 8
  %46 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_orig_pair31 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %46, i32 0, i32 63
  %47 = load i8*, i8** %TS_orig_pair31, align 8
  %48 = load i64, i64* @selected_frame, align 8
  %sub32 = sub nsw i64 %48, 5
  %49 = inttoptr i64 %sub32 to i8*
  %50 = bitcast i8* %49 to %struct.frame*
  %total_lines33 = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 39
  %51 = load i32, i32* %total_lines33, align 4
  %52 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm34 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %52, i32 0, i32 10
  %53 = load %struct.cm*, %struct.cm** %Wcm34, align 8
  %cm_curY35 = getelementptr inbounds %struct.cm, %struct.cm* %53, i32 0, i32 0
  %54 = load i32, i32* %cm_curY35, align 4
  %sub36 = sub nsw i32 %51, %54
  call void @tputs(i8* %47, i32 %sub36, i32 (i32)* @cmputc)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.30, %do.body.28
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  %55 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %55, %struct.tty_display_info** @current_tty, align 8
  %call39 = call i32 @cmputc(i32 13)
  %56 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output40 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %56, i32 0, i32 4
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %output40, align 8
  %call41 = call i32 @fflush(%struct._IO_FILE* %57)
  br label %if.end.42

if.end.42:                                        ; preds = %do.end.38, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_set_terminal_modes(%struct.terminal* %terminal) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %i = alloca i32, align 4
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 12
  %tty1 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty1, align 8
  store %struct.tty_display_info* %1, %struct.tty_display_info** %tty, align 8
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %tobool = icmp ne %struct._IO_FILE* %3, null
  br i1 %tobool, label %if.then, label %if.end.40

if.then:                                          ; preds = %entry
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_termcap_modes = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %4, i32 0, i32 45
  %5 = load i8*, i8** %TS_termcap_modes, align 8
  %tobool2 = icmp ne i8* %5, null
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %6, %struct.tty_display_info** @current_tty, align 8
  %7 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_termcap_modes4 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %7, i32 0, i32 45
  %8 = load i8*, i8** %TS_termcap_modes4, align 8
  %9 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %9, 5
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 39
  %12 = load i32, i32* %total_lines, align 4
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %13, i32 0, i32 10
  %14 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %14, i32 0, i32 0
  %15 = load i32, i32* %cm_curY, align 4
  %sub5 = sub nsw i32 %12, %15
  call void @tputs(i8* %8, i32 %sub5, i32 (i32)* @cmputc)
  br label %if.end

if.else:                                          ; preds = %if.then
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %16, %struct.tty_display_info** @current_tty, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %17 = load i32, i32* %i, align 4
  %18 = load i64, i64* @selected_frame, align 8
  %sub6 = sub nsw i64 %18, 5
  %19 = inttoptr i64 %sub6 to i8*
  %20 = bitcast i8* %19 to %struct.frame*
  %total_lines7 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 39
  %21 = load i32, i32* %total_lines7, align 4
  %cmp = icmp slt i32 %17, %21
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @cmputc(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then.3
  br label %do.body

do.body:                                          ; preds = %if.end
  %23 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 497), align 1
  %tobool8 = trunc i8 %23 to i1
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  %24 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_visible = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %24, i32 0, i32 48
  %25 = load i8*, i8** %TS_cursor_visible, align 8
  %tobool9 = icmp ne i8* %25, null
  br i1 %tobool9, label %if.then.11, label %if.end.22

cond.false:                                       ; preds = %do.body
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_normal = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %26, i32 0, i32 47
  %27 = load i8*, i8** %TS_cursor_normal, align 8
  %tobool10 = icmp ne i8* %27, null
  br i1 %tobool10, label %if.then.11, label %if.end.22

if.then.11:                                       ; preds = %cond.false, %cond.true
  %28 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %28, %struct.tty_display_info** @current_tty, align 8
  %29 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 497), align 1
  %tobool12 = trunc i8 %29 to i1
  br i1 %tobool12, label %cond.true.13, label %cond.false.15

cond.true.13:                                     ; preds = %if.then.11
  %30 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_visible14 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %30, i32 0, i32 48
  %31 = load i8*, i8** %TS_cursor_visible14, align 8
  br label %cond.end

cond.false.15:                                    ; preds = %if.then.11
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_cursor_normal16 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %32, i32 0, i32 47
  %33 = load i8*, i8** %TS_cursor_normal16, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.13
  %cond = phi i8* [ %31, %cond.true.13 ], [ %33, %cond.false.15 ]
  %34 = load i64, i64* @selected_frame, align 8
  %sub17 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub17 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %total_lines18 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 39
  %37 = load i32, i32* %total_lines18, align 4
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm19 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 10
  %39 = load %struct.cm*, %struct.cm** %Wcm19, align 8
  %cm_curY20 = getelementptr inbounds %struct.cm, %struct.cm* %39, i32 0, i32 0
  %40 = load i32, i32* %cm_curY20, align 4
  %sub21 = sub nsw i32 %37, %40
  call void @tputs(i8* %cond, i32 %sub21, i32 (i32)* @cmputc)
  br label %if.end.22

if.end.22:                                        ; preds = %cond.end, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end.22
  br label %do.body.23

do.body.23:                                       ; preds = %do.end
  %41 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_keypad_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %41, i32 0, i32 37
  %42 = load i8*, i8** %TS_keypad_mode, align 8
  %tobool24 = icmp ne i8* %42, null
  br i1 %tobool24, label %if.then.25, label %if.end.32

if.then.25:                                       ; preds = %do.body.23
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %43, %struct.tty_display_info** @current_tty, align 8
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_keypad_mode26 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %44, i32 0, i32 37
  %45 = load i8*, i8** %TS_keypad_mode26, align 8
  %46 = load i64, i64* @selected_frame, align 8
  %sub27 = sub nsw i64 %46, 5
  %47 = inttoptr i64 %sub27 to i8*
  %48 = bitcast i8* %47 to %struct.frame*
  %total_lines28 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 39
  %49 = load i32, i32* %total_lines28, align 4
  %50 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm29 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %50, i32 0, i32 10
  %51 = load %struct.cm*, %struct.cm** %Wcm29, align 8
  %cm_curY30 = getelementptr inbounds %struct.cm, %struct.cm* %51, i32 0, i32 0
  %52 = load i32, i32* %cm_curY30, align 4
  %sub31 = sub nsw i32 %49, %52
  call void @tputs(i8* %45, i32 %sub31, i32 (i32)* @cmputc)
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.25, %do.body.23
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  %53 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm34 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %53, i32 0, i32 10
  %54 = load %struct.cm*, %struct.cm** %Wcm34, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %54, i32 0, i32 1
  store i32 -1, i32* %cm_curX, align 4
  %55 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm35 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %55, i32 0, i32 10
  %56 = load %struct.cm*, %struct.cm** %Wcm35, align 8
  %cm_curY36 = getelementptr inbounds %struct.cm, %struct.cm* %56, i32 0, i32 0
  store i32 -1, i32* %cm_curY36, align 4
  %57 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %call37 = call i64 @builtin_lisp_symbol(i32 954)
  call void @tty_send_additional_strings(%struct.terminal* %57, i64 %call37)
  %58 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output38 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %58, i32 0, i32 4
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %output38, align 8
  %call39 = call i32 @fflush(%struct._IO_FILE* %59)
  br label %if.end.40

if.end.40:                                        ; preds = %do.end.33, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_update_end(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load i64, i64* @selected_window, align 8
  %call = call %struct.window* @XWINDOW(i64 %8)
  %cursor_off_p = getelementptr inbounds %struct.window, %struct.window* %call, i32 0, i32 67
  %bf.load8 = load i16, i16* %cursor_off_p, align 4
  %bf.lshr9 = lshr i16 %bf.load8, 8
  %bf.clear10 = and i16 %bf.lshr9, 1
  %bf.cast11 = trunc i16 %bf.clear10 to i1
  br i1 %bf.cast11, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %9 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_show_cursor(%struct.tty_display_info* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_turn_off_insert(%struct.tty_display_info* %10)
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_background_highlight(%struct.tty_display_info* %11)
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call12 = call i32 @fflush(%struct._IO_FILE* %13)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_set_terminal_window(%struct.frame* %f, i32 %size) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %size.addr = alloca i32, align 4
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load i32, i32* %size.addr, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %cond.true.8, label %cond.false.9

cond.true.8:                                      ; preds = %cond.end
  %9 = load i32, i32* %size.addr, align 4
  br label %cond.end.10

cond.false.9:                                     ; preds = %cond.end
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 39
  %11 = load i32, i32* %total_lines, align 4
  br label %cond.end.10

cond.end.10:                                      ; preds = %cond.false.9, %cond.true.8
  %cond11 = phi i32 [ %9, %cond.true.8 ], [ %11, %cond.false.9 ]
  %12 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %12, i32 0, i32 74
  store i32 %cond11, i32* %specified_window, align 4
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method12 = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method12 to i64*
  %bf.load13 = load i64, i64* %14, align 8
  %bf.lshr14 = lshr i64 %bf.load13, 23
  %bf.clear15 = and i64 %bf.lshr14, 7
  %bf.cast16 = trunc i64 %bf.clear15 to i32
  %cmp17 = icmp eq i32 %bf.cast16, 1
  br i1 %cmp17, label %cond.true.25, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %cond.end.10
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method19 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %output_method19 to i64*
  %bf.load20 = load i64, i64* %16, align 8
  %bf.lshr21 = lshr i64 %bf.load20, 23
  %bf.clear22 = and i64 %bf.lshr21, 7
  %bf.cast23 = trunc i64 %bf.clear22 to i32
  %cmp24 = icmp eq i32 %bf.cast23, 3
  br i1 %cmp24, label %cond.true.25, label %cond.false.29

cond.true.25:                                     ; preds = %lor.lhs.false.18, %cond.end.10
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal26 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 61
  %18 = load %struct.terminal*, %struct.terminal** %terminal26, align 8
  %display_info27 = getelementptr inbounds %struct.terminal, %struct.terminal* %18, i32 0, i32 12
  %tty28 = bitcast %union.display_info* %display_info27 to %struct.tty_display_info**
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty28, align 8
  br label %cond.end.30

cond.false.29:                                    ; preds = %lor.lhs.false.18
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.30

cond.end.30:                                      ; preds = %20, %cond.true.25
  %cond31 = phi %struct.tty_display_info* [ %19, %cond.true.25 ], [ null, %20 ]
  %scroll_region_ok = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %cond31, i32 0, i32 75
  %bf.load32 = load i8, i8* %scroll_region_ok, align 4
  %bf.lshr33 = lshr i8 %bf.load32, 6
  %bf.clear34 = and i8 %bf.lshr33, 1
  %bf.cast35 = trunc i8 %bf.clear34 to i1
  br i1 %bf.cast35, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.30
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %22 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %specified_window36 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %22, i32 0, i32 74
  %23 = load i32, i32* %specified_window36, align 4
  call void @tty_set_scroll_region(%struct.frame* %21, i32 0, i32 %23)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.30
  ret void
}

declare i32 @tty_read_avail_input(%struct.terminal*, %struct.input_event*) #1

; Function Attrs: nounwind uwtable
define internal void @tty_background_highlight(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 462), align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  call void @tty_turn_on_highlight(%struct.tty_display_info* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  call void @tty_turn_off_highlight(%struct.tty_display_info* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare void @cmgoto(%struct.tty_display_info*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @tty_turn_on_highlight(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %0, i32 0, i32 72
  %bf.load = load i8, i8* %standout_mode, align 8
  %bf.lshr = lshr i8 %bf.load, 3
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.4, label %if.then

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %1, i32 0, i32 42
  %2 = load i8*, i8** %TS_standout_mode, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %do.body
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  store %struct.tty_display_info* %3, %struct.tty_display_info** @current_tty, align 8
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_standout_mode2 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %4, i32 0, i32 42
  %5 = load i8*, i8** %TS_standout_mode2, align 8
  %6 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 39
  %9 = load i32, i32* %total_lines, align 4
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 10
  %11 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %11, i32 0, i32 0
  %12 = load i32, i32* %cm_curY, align 4
  %sub3 = sub nsw i32 %9, %12
  call void @tputs(i8* %5, i32 %sub3, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %entry
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %standout_mode5 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %13, i32 0, i32 72
  %bf.load6 = load i8, i8* %standout_mode5, align 8
  %bf.clear7 = and i8 %bf.load6, -9
  %bf.set = or i8 %bf.clear7, 8
  store i8 %bf.set, i8* %standout_mode5, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_turn_off_highlight(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %0, i32 0, i32 72
  %bf.load = load i8, i8* %standout_mode, align 8
  %bf.lshr = lshr i8 %bf.load, 3
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_end_standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %1, i32 0, i32 40
  %2 = load i8*, i8** %TS_end_standout_mode, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %do.body
  %3 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  store %struct.tty_display_info* %3, %struct.tty_display_info** @current_tty, align 8
  %4 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_end_standout_mode2 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %4, i32 0, i32 40
  %5 = load i8*, i8** %TS_end_standout_mode2, align 8
  %6 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %6, 5
  %7 = inttoptr i64 %sub to i8*
  %8 = bitcast i8* %7 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 39
  %9 = load i32, i32* %total_lines, align 4
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 10
  %11 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %11, i32 0, i32 0
  %12 = load i32, i32* %cm_curY, align 4
  %sub3 = sub nsw i32 %9, %12
  call void @tputs(i8* %5, i32 %sub3, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then.1, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %entry
  %13 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %standout_mode5 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %13, i32 0, i32 72
  %bf.load6 = load i8, i8* %standout_mode5, align 8
  %bf.clear7 = and i8 %bf.load6, -9
  store i8 %bf.clear7, i8* %standout_mode5, align 8
  ret void
}

declare void @clear_end_of_line(%struct.frame*, i32) #1

declare void @clear_to_end(%struct.frame*) #1

declare i32 @fputc(i32, %struct._IO_FILE*) #1

declare void @raw_cursor_to(%struct.frame*, i32, i32) #1

declare i8* @tparam(i8*, i8*, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @tty_set_scroll_region(%struct.frame* %f, i32 %start, i32 %stop) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %start.addr = alloca i32, align 4
  %stop.addr = alloca i32, align 4
  %buf = alloca i8*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %start, i32* %start.addr, align 4
  store i32 %stop, i32* %stop.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 26
  %1 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %1, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 1
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method1 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 26
  %3 = bitcast i48* %output_method1 to i64*
  %bf.load2 = load i64, i64* %3, align 8
  %bf.lshr3 = lshr i64 %bf.load2, 23
  %bf.clear4 = and i64 %bf.lshr3, 7
  %bf.cast5 = trunc i64 %bf.clear4 to i32
  %cmp6 = icmp eq i32 %bf.cast5, 3
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 61
  %5 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %5, i32 0, i32 12
  %tty7 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %6 = load %struct.tty_display_info*, %struct.tty_display_info** %tty7, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %7, %cond.true
  %cond = phi %struct.tty_display_info* [ %6, %cond.true ], [ null, %7 ]
  store %struct.tty_display_info* %cond, %struct.tty_display_info** %tty, align 8
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 23
  %9 = load i8*, i8** %TS_set_scroll_region, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %10 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region8 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %10, i32 0, i32 23
  %11 = load i8*, i8** %TS_set_scroll_region8, align 8
  %12 = load i32, i32* %start.addr, align 4
  %13 = load i32, i32* %stop.addr, align 4
  %sub = sub nsw i32 %13, 1
  %call = call i8* @tparam(i8* %11, i8* null, i32 0, i32 %12, i32 %sub, i32 0, i32 0)
  store i8* %call, i8** %buf, align 8
  br label %if.end.18

if.else:                                          ; preds = %cond.end
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region_1 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 24
  %15 = load i8*, i8** %TS_set_scroll_region_1, align 8
  %tobool9 = icmp ne i8* %15, null
  br i1 %tobool9, label %if.then.10, label %if.else.16

if.then.10:                                       ; preds = %if.else
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_scroll_region_111 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 24
  %17 = load i8*, i8** %TS_set_scroll_region_111, align 8
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 39
  %19 = load i32, i32* %total_lines, align 4
  %20 = load i32, i32* %start.addr, align 4
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines12 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 39
  %22 = load i32, i32* %total_lines12, align 4
  %23 = load i32, i32* %stop.addr, align 4
  %sub13 = sub nsw i32 %22, %23
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %total_lines14 = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 39
  %25 = load i32, i32* %total_lines14, align 4
  %call15 = call i8* @tparam(i8* %17, i8* null, i32 0, i32 %19, i32 %20, i32 %sub13, i32 %25)
  store i8* %call15, i8** %buf, align 8
  br label %if.end

if.else.16:                                       ; preds = %if.else
  %26 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_window = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %26, i32 0, i32 50
  %27 = load i8*, i8** %TS_set_window, align 8
  %28 = load i32, i32* %start.addr, align 4
  %29 = load i32, i32* %stop.addr, align 4
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_cols = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 36
  %31 = load i32, i32* %text_cols, align 4
  %call17 = call i8* @tparam(i8* %27, i8* null, i32 0, i32 %28, i32 0, i32 %29, i32 %31)
  store i8* %call17, i8** %buf, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.16, %if.then.10
  br label %if.end.18

if.end.18:                                        ; preds = %if.end, %if.then
  %32 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %32, %struct.tty_display_info** @current_tty, align 8
  %33 = load i8*, i8** %buf, align 8
  %34 = load i64, i64* @selected_frame, align 8
  %sub19 = sub nsw i64 %34, 5
  %35 = inttoptr i64 %sub19 to i8*
  %36 = bitcast i8* %35 to %struct.frame*
  %total_lines20 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 39
  %37 = load i32, i32* %total_lines20, align 4
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 10
  %39 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %39, i32 0, i32 0
  %40 = load i32, i32* %cm_curY, align 4
  %sub21 = sub nsw i32 %37, %40
  call void @tputs(i8* %33, i32 %sub21, i32 (i32)* @cmputc)
  %41 = load i8*, i8** %buf, align 8
  call void @xfree(i8* %41)
  %42 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm22 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %42, i32 0, i32 10
  %43 = load %struct.cm*, %struct.cm** %Wcm22, align 8
  %cm_curX = getelementptr inbounds %struct.cm, %struct.cm* %43, i32 0, i32 1
  store i32 -1, i32* %cm_curX, align 4
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm23 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %44, i32 0, i32 10
  %45 = load %struct.cm*, %struct.cm** %Wcm23, align 8
  %cm_curY24 = getelementptr inbounds %struct.cm, %struct.cm* %45, i32 0, i32 0
  store i32 -1, i32* %cm_curY24, align 4
  ret void
}

declare void @write_glyphs(%struct.frame*, %struct.glyph*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @tty_turn_on_insert(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %0, i32 0, i32 72
  %bf.load = load i8, i8* %insert_mode, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  store %struct.tty_display_info* %1, %struct.tty_display_info** @current_tty, align 8
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %TS_insert_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %2, i32 0, i32 34
  %3 = load i8*, i8** %TS_insert_mode, align 8
  %4 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 39
  %7 = load i32, i32* %total_lines, align 4
  %8 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %8, i32 0, i32 10
  %9 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %9, i32 0, i32 0
  %10 = load i32, i32* %cm_curY, align 4
  %sub1 = sub nsw i32 %7, %10
  call void @tputs(i8* %3, i32 %sub1, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %insert_mode2 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %11, i32 0, i32 72
  %bf.load3 = load i8, i8* %insert_mode2, align 8
  %bf.clear4 = and i8 %bf.load3, -5
  %bf.set = or i8 %bf.clear4, 4
  store i8 %bf.set, i8* %insert_mode2, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @tty_highlight_if_desired(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 462), align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  call void @tty_turn_on_highlight(%struct.tty_display_info* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  call void @tty_turn_off_highlight(%struct.tty_display_info* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @turn_on_face(%struct.frame* %f, i32 %face_id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %face_id.addr = alloca i32, align 4
  %face = alloca %struct.face*, align 8
  %fg = alloca i64, align 8
  %bg = alloca i64, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %ts = alloca i8*, align 8
  %p = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %face_id, i32* %face_id.addr, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load i32, i32* %face_id.addr, align 4
  %add = add i32 %0, 0
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 20
  %2 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %2, i32 0, i32 4
  %3 = load i32, i32* %used, align 4
  %add1 = add i32 %3, 0
  %cmp = icmp ult i32 %add, %add1
  br i1 %cmp, label %cond.true.9, label %cond.false.11

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %face_id.addr, align 4
  %conv = sext i32 %4 to i64
  %add2 = add i64 %conv, 0
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache3 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 20
  %6 = load %struct.face_cache*, %struct.face_cache** %face_cache3, align 8
  %used4 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %6, i32 0, i32 4
  %7 = load i32, i32* %used4, align 4
  %conv5 = sext i32 %7 to i64
  %add6 = add i64 %conv5, 0
  %cmp7 = icmp ult i64 %add2, %add6
  br i1 %cmp7, label %cond.true.9, label %cond.false.11

cond.true.9:                                      ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %face_id.addr, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache10 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 20
  %10 = load %struct.face_cache*, %struct.face_cache** %face_cache10, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %10, i32 0, i32 2
  %11 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %11, i64 %idxprom
  %12 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end

cond.false.11:                                    ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.11, %cond.true.9
  %cond = phi %struct.face* [ %12, %cond.true.9 ], [ null, %cond.false.11 ]
  store %struct.face* %cond, %struct.face** %face, align 8
  %13 = load %struct.face*, %struct.face** %face, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %13, i32 0, i32 4
  %14 = load i64, i64* %foreground, align 8
  store i64 %14, i64* %fg, align 8
  %15 = load %struct.face*, %struct.face** %face, align 8
  %background = getelementptr inbounds %struct.face, %struct.face* %15, i32 0, i32 5
  %16 = load i64, i64* %background, align 8
  store i64 %16, i64* %bg, align 8
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 26
  %18 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %18, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp12 = icmp eq i32 %bf.cast, 1
  br i1 %cmp12, label %cond.true.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method14 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 26
  %20 = bitcast i48* %output_method14 to i64*
  %bf.load15 = load i64, i64* %20, align 8
  %bf.lshr16 = lshr i64 %bf.load15, 23
  %bf.clear17 = and i64 %bf.lshr16, 7
  %bf.cast18 = trunc i64 %bf.clear17 to i32
  %cmp19 = icmp eq i32 %bf.cast18, 3
  br i1 %cmp19, label %cond.true.21, label %cond.false.23

cond.true.21:                                     ; preds = %lor.lhs.false, %cond.end
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 61
  %22 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %22, i32 0, i32 12
  %tty22 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %23 = load %struct.tty_display_info*, %struct.tty_display_info** %tty22, align 8
  br label %cond.end.24

cond.false.23:                                    ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.24

cond.end.24:                                      ; preds = %24, %cond.true.21
  %cond25 = phi %struct.tty_display_info* [ %23, %cond.true.21 ], [ null, %24 ]
  store %struct.tty_display_info* %cond25, %struct.tty_display_info** %tty, align 8
  %25 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %25, i32 0, i32 61
  %26 = load i32, i32* %TN_max_colors, align 4
  %cmp26 = icmp sgt i32 %26, 0
  br i1 %cmp26, label %cond.true.28, label %cond.false.31

cond.true.28:                                     ; preds = %cond.end.24
  %27 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_no_color_video = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %27, i32 0, i32 60
  %28 = load i32, i32* %TN_no_color_video, align 4
  %and = and i32 %28, 4
  %cmp29 = icmp eq i32 %and, 0
  br i1 %cmp29, label %land.lhs.true, label %if.end

cond.false.31:                                    ; preds = %cond.end.24
  br i1 true, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false.31, %cond.true.28
  %29 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 462), align 1
  %tobool = trunc i8 %29 to i1
  br i1 %tobool, label %cond.true.33, label %cond.false.39

cond.true.33:                                     ; preds = %land.lhs.true
  %30 = load i64, i64* %fg, align 8
  %cmp34 = icmp eq i64 %30, -2
  br i1 %cmp34, label %if.then, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %cond.true.33
  %31 = load i64, i64* %bg, align 8
  %cmp37 = icmp eq i64 %31, -3
  br i1 %cmp37, label %if.then, label %if.end

cond.false.39:                                    ; preds = %land.lhs.true
  %32 = load i64, i64* %fg, align 8
  %cmp40 = icmp eq i64 %32, -3
  br i1 %cmp40, label %if.then, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %cond.false.39
  %33 = load i64, i64* %bg, align 8
  %cmp43 = icmp eq i64 %33, -2
  br i1 %cmp43, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.42, %cond.false.39, %lor.lhs.false.36, %cond.true.33
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  call void @tty_toggle_highlight(%struct.tty_display_info* %34)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.42, %lor.lhs.false.36, %cond.false.31, %cond.true.28
  %35 = load %struct.face*, %struct.face** %face, align 8
  %tty_bold_p = getelementptr inbounds %struct.face, %struct.face* %35, i32 0, i32 13
  %36 = bitcast i24* %tty_bold_p to i32*
  %bf.load45 = load i32, i32* %36, align 8
  %bf.lshr46 = lshr i32 %bf.load45, 13
  %bf.clear47 = and i32 %bf.lshr46, 1
  %bf.cast48 = trunc i32 %bf.clear47 to i1
  br i1 %bf.cast48, label %land.lhs.true.50, label %if.end.65

land.lhs.true.50:                                 ; preds = %if.end
  %37 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors51 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %37, i32 0, i32 61
  %38 = load i32, i32* %TN_max_colors51, align 4
  %cmp52 = icmp sgt i32 %38, 0
  br i1 %cmp52, label %cond.true.54, label %cond.false.59

cond.true.54:                                     ; preds = %land.lhs.true.50
  %39 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_no_color_video55 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %39, i32 0, i32 60
  %40 = load i32, i32* %TN_no_color_video55, align 4
  %and56 = and i32 %40, 32
  %cmp57 = icmp eq i32 %and56, 0
  br i1 %cmp57, label %if.then.60, label %if.end.65

cond.false.59:                                    ; preds = %land.lhs.true.50
  br i1 true, label %if.then.60, label %if.end.65

if.then.60:                                       ; preds = %cond.false.59, %cond.true.54
  br label %do.body

do.body:                                          ; preds = %if.then.60
  %41 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_bold_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %41, i32 0, i32 51
  %42 = load i8*, i8** %TS_enter_bold_mode, align 8
  %tobool61 = icmp ne i8* %42, null
  br i1 %tobool61, label %if.then.62, label %if.end.64

if.then.62:                                       ; preds = %do.body
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %43, %struct.tty_display_info** @current_tty, align 8
  %44 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_bold_mode63 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %44, i32 0, i32 51
  %45 = load i8*, i8** %TS_enter_bold_mode63, align 8
  call void @tputs(i8* %45, i32 1, i32 (i32)* @cmputc)
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.62, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.64
  br label %if.end.65

if.end.65:                                        ; preds = %do.end, %cond.false.59, %cond.true.54, %if.end
  %46 = load %struct.face*, %struct.face** %face, align 8
  %tty_italic_p = getelementptr inbounds %struct.face, %struct.face* %46, i32 0, i32 13
  %47 = bitcast i24* %tty_italic_p to i32*
  %bf.load66 = load i32, i32* %47, align 8
  %bf.lshr67 = lshr i32 %bf.load66, 14
  %bf.clear68 = and i32 %bf.lshr67, 1
  %bf.cast69 = trunc i32 %bf.clear68 to i1
  br i1 %bf.cast69, label %land.lhs.true.71, label %if.end.86

land.lhs.true.71:                                 ; preds = %if.end.65
  %48 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors72 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %48, i32 0, i32 61
  %49 = load i32, i32* %TN_max_colors72, align 4
  %cmp73 = icmp sgt i32 %49, 0
  br i1 %cmp73, label %cond.true.75, label %cond.false.80

cond.true.75:                                     ; preds = %land.lhs.true.71
  %50 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_no_color_video76 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %50, i32 0, i32 60
  %51 = load i32, i32* %TN_no_color_video76, align 4
  %and77 = and i32 %51, 8
  %cmp78 = icmp eq i32 %and77, 0
  br i1 %cmp78, label %if.then.81, label %if.end.86

cond.false.80:                                    ; preds = %land.lhs.true.71
  br i1 true, label %if.then.81, label %if.end.86

if.then.81:                                       ; preds = %cond.false.80, %cond.true.75
  %52 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_italic_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %52, i32 0, i32 52
  %53 = load i8*, i8** %TS_enter_italic_mode, align 8
  %tobool82 = icmp ne i8* %53, null
  br i1 %tobool82, label %if.then.83, label %if.else

if.then.83:                                       ; preds = %if.then.81
  %54 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %54, %struct.tty_display_info** @current_tty, align 8
  %55 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_italic_mode84 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %55, i32 0, i32 52
  %56 = load i8*, i8** %TS_enter_italic_mode84, align 8
  call void @tputs(i8* %56, i32 1, i32 (i32)* @cmputc)
  br label %if.end.85

if.else:                                          ; preds = %if.then.81
  %57 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %57, %struct.tty_display_info** @current_tty, align 8
  %58 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_dim_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %58, i32 0, i32 53
  %59 = load i8*, i8** %TS_enter_dim_mode, align 8
  call void @tputs(i8* %59, i32 1, i32 (i32)* @cmputc)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else, %if.then.83
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %cond.false.80, %cond.true.75, %if.end.65
  %60 = load %struct.face*, %struct.face** %face, align 8
  %tty_underline_p = getelementptr inbounds %struct.face, %struct.face* %60, i32 0, i32 13
  %61 = bitcast i24* %tty_underline_p to i32*
  %bf.load87 = load i32, i32* %61, align 8
  %bf.lshr88 = lshr i32 %bf.load87, 15
  %bf.clear89 = and i32 %bf.lshr88, 1
  %bf.cast90 = trunc i32 %bf.clear89 to i1
  br i1 %bf.cast90, label %land.lhs.true.92, label %if.end.109

land.lhs.true.92:                                 ; preds = %if.end.86
  %62 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors93 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %62, i32 0, i32 61
  %63 = load i32, i32* %TN_max_colors93, align 4
  %cmp94 = icmp sgt i32 %63, 0
  br i1 %cmp94, label %cond.true.96, label %cond.false.101

cond.true.96:                                     ; preds = %land.lhs.true.92
  %64 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_no_color_video97 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %64, i32 0, i32 60
  %65 = load i32, i32* %TN_no_color_video97, align 4
  %and98 = and i32 %65, 2
  %cmp99 = icmp eq i32 %and98, 0
  br i1 %cmp99, label %if.then.102, label %if.end.109

cond.false.101:                                   ; preds = %land.lhs.true.92
  br i1 true, label %if.then.102, label %if.end.109

if.then.102:                                      ; preds = %cond.false.101, %cond.true.96
  br label %do.body.103

do.body.103:                                      ; preds = %if.then.102
  %66 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_underline_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %66, i32 0, i32 56
  %67 = load i8*, i8** %TS_enter_underline_mode, align 8
  %tobool104 = icmp ne i8* %67, null
  br i1 %tobool104, label %if.then.105, label %if.end.107

if.then.105:                                      ; preds = %do.body.103
  %68 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %68, %struct.tty_display_info** @current_tty, align 8
  %69 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_enter_underline_mode106 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %69, i32 0, i32 56
  %70 = load i8*, i8** %TS_enter_underline_mode106, align 8
  call void @tputs(i8* %70, i32 1, i32 (i32)* @cmputc)
  br label %if.end.107

if.end.107:                                       ; preds = %if.then.105, %do.body.103
  br label %do.end.108

do.end.108:                                       ; preds = %if.end.107
  br label %if.end.109

if.end.109:                                       ; preds = %do.end.108, %cond.false.101, %cond.true.96, %if.end.86
  %71 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors110 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %71, i32 0, i32 61
  %72 = load i32, i32* %TN_max_colors110, align 4
  %cmp111 = icmp sgt i32 %72, 0
  br i1 %cmp111, label %if.then.113, label %if.end.156

if.then.113:                                      ; preds = %if.end.109
  %73 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %73, i32 0, i32 72
  %bf.load114 = load i8, i8* %standout_mode, align 8
  %bf.lshr115 = lshr i8 %bf.load114, 3
  %bf.clear116 = and i8 %bf.lshr115, 1
  %bf.cast117 = trunc i8 %bf.clear116 to i1
  br i1 %bf.cast117, label %cond.true.119, label %cond.false.120

cond.true.119:                                    ; preds = %if.then.113
  %74 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_background = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %74, i32 0, i32 65
  %75 = load i8*, i8** %TS_set_background, align 8
  br label %cond.end.121

cond.false.120:                                   ; preds = %if.then.113
  %76 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_foreground = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %76, i32 0, i32 64
  %77 = load i8*, i8** %TS_set_foreground, align 8
  br label %cond.end.121

cond.end.121:                                     ; preds = %cond.false.120, %cond.true.119
  %cond122 = phi i8* [ %75, %cond.true.119 ], [ %77, %cond.false.120 ]
  store i8* %cond122, i8** %ts, align 8
  %78 = load i64, i64* %fg, align 8
  %call = call zeroext i1 @face_tty_specified_color(i64 %78)
  br i1 %call, label %land.lhs.true.124, label %if.end.130

land.lhs.true.124:                                ; preds = %cond.end.121
  %79 = load i8*, i8** %ts, align 8
  %tobool125 = icmp ne i8* %79, null
  br i1 %tobool125, label %if.then.126, label %if.end.130

if.then.126:                                      ; preds = %land.lhs.true.124
  %80 = load i8*, i8** %ts, align 8
  %81 = load i64, i64* %fg, align 8
  %conv127 = trunc i64 %81 to i32
  %call128 = call i8* @tparam(i8* %80, i8* null, i32 0, i32 %conv127, i32 0, i32 0, i32 0)
  store i8* %call128, i8** %p, align 8
  %82 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %82, %struct.tty_display_info** @current_tty, align 8
  %83 = load i8*, i8** %p, align 8
  %84 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %84, 5
  %85 = inttoptr i64 %sub to i8*
  %86 = bitcast i8* %85 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %86, i32 0, i32 39
  %87 = load i32, i32* %total_lines, align 4
  %88 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %88, i32 0, i32 10
  %89 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %89, i32 0, i32 0
  %90 = load i32, i32* %cm_curY, align 4
  %sub129 = sub nsw i32 %87, %90
  call void @tputs(i8* %83, i32 %sub129, i32 (i32)* @cmputc)
  %91 = load i8*, i8** %p, align 8
  call void @xfree(i8* %91)
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.126, %land.lhs.true.124, %cond.end.121
  %92 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %standout_mode131 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %92, i32 0, i32 72
  %bf.load132 = load i8, i8* %standout_mode131, align 8
  %bf.lshr133 = lshr i8 %bf.load132, 3
  %bf.clear134 = and i8 %bf.lshr133, 1
  %bf.cast135 = trunc i8 %bf.clear134 to i1
  br i1 %bf.cast135, label %cond.true.137, label %cond.false.139

cond.true.137:                                    ; preds = %if.end.130
  %93 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_foreground138 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %93, i32 0, i32 64
  %94 = load i8*, i8** %TS_set_foreground138, align 8
  br label %cond.end.141

cond.false.139:                                   ; preds = %if.end.130
  %95 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_set_background140 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %95, i32 0, i32 65
  %96 = load i8*, i8** %TS_set_background140, align 8
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.false.139, %cond.true.137
  %cond142 = phi i8* [ %94, %cond.true.137 ], [ %96, %cond.false.139 ]
  store i8* %cond142, i8** %ts, align 8
  %97 = load i64, i64* %bg, align 8
  %call143 = call zeroext i1 @face_tty_specified_color(i64 %97)
  br i1 %call143, label %land.lhs.true.145, label %if.end.155

land.lhs.true.145:                                ; preds = %cond.end.141
  %98 = load i8*, i8** %ts, align 8
  %tobool146 = icmp ne i8* %98, null
  br i1 %tobool146, label %if.then.147, label %if.end.155

if.then.147:                                      ; preds = %land.lhs.true.145
  %99 = load i8*, i8** %ts, align 8
  %100 = load i64, i64* %bg, align 8
  %conv148 = trunc i64 %100 to i32
  %call149 = call i8* @tparam(i8* %99, i8* null, i32 0, i32 %conv148, i32 0, i32 0, i32 0)
  store i8* %call149, i8** %p, align 8
  %101 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %101, %struct.tty_display_info** @current_tty, align 8
  %102 = load i8*, i8** %p, align 8
  %103 = load i64, i64* @selected_frame, align 8
  %sub150 = sub nsw i64 %103, 5
  %104 = inttoptr i64 %sub150 to i8*
  %105 = bitcast i8* %104 to %struct.frame*
  %total_lines151 = getelementptr inbounds %struct.frame, %struct.frame* %105, i32 0, i32 39
  %106 = load i32, i32* %total_lines151, align 4
  %107 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm152 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %107, i32 0, i32 10
  %108 = load %struct.cm*, %struct.cm** %Wcm152, align 8
  %cm_curY153 = getelementptr inbounds %struct.cm, %struct.cm* %108, i32 0, i32 0
  %109 = load i32, i32* %cm_curY153, align 4
  %sub154 = sub nsw i32 %106, %109
  call void @tputs(i8* %102, i32 %sub154, i32 (i32)* @cmputc)
  %110 = load i8*, i8** %p, align 8
  call void @xfree(i8* %110)
  br label %if.end.155

if.end.155:                                       ; preds = %if.then.147, %land.lhs.true.145, %cond.end.141
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155, %if.end.109
  ret void
}

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #1

; Function Attrs: nounwind
declare i32 @ferror(%struct._IO_FILE*) #5

; Function Attrs: nounwind
declare void @clearerr(%struct._IO_FILE*) #5

; Function Attrs: nounwind uwtable
define internal void @turn_off_face(%struct.frame* %f, i32 %face_id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %face_id.addr = alloca i32, align 4
  %face = alloca %struct.face*, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %face_id, i32* %face_id.addr, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load i32, i32* %face_id.addr, align 4
  %add = add i32 %0, 0
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 20
  %2 = load %struct.face_cache*, %struct.face_cache** %face_cache, align 8
  %used = getelementptr inbounds %struct.face_cache, %struct.face_cache* %2, i32 0, i32 4
  %3 = load i32, i32* %used, align 4
  %add1 = add i32 %3, 0
  %cmp = icmp ult i32 %add, %add1
  br i1 %cmp, label %cond.true.9, label %cond.false.11

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %face_id.addr, align 4
  %conv = sext i32 %4 to i64
  %add2 = add i64 %conv, 0
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache3 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 20
  %6 = load %struct.face_cache*, %struct.face_cache** %face_cache3, align 8
  %used4 = getelementptr inbounds %struct.face_cache, %struct.face_cache* %6, i32 0, i32 4
  %7 = load i32, i32* %used4, align 4
  %conv5 = sext i32 %7 to i64
  %add6 = add i64 %conv5, 0
  %cmp7 = icmp ult i64 %add2, %add6
  br i1 %cmp7, label %cond.true.9, label %cond.false.11

cond.true.9:                                      ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %face_id.addr, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %face_cache10 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 20
  %10 = load %struct.face_cache*, %struct.face_cache** %face_cache10, align 8
  %faces_by_id = getelementptr inbounds %struct.face_cache, %struct.face_cache* %10, i32 0, i32 2
  %11 = load %struct.face**, %struct.face*** %faces_by_id, align 8
  %arrayidx = getelementptr inbounds %struct.face*, %struct.face** %11, i64 %idxprom
  %12 = load %struct.face*, %struct.face** %arrayidx, align 8
  br label %cond.end

cond.false.11:                                    ; preds = %cond.false, %cond.true
  br label %cond.end

cond.end:                                         ; preds = %cond.false.11, %cond.true.9
  %cond = phi %struct.face* [ %12, %cond.true.9 ], [ null, %cond.false.11 ]
  store %struct.face* %cond, %struct.face** %face, align 8
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 26
  %14 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %14, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp12 = icmp eq i32 %bf.cast, 1
  br i1 %cmp12, label %cond.true.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_method14 = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 26
  %16 = bitcast i48* %output_method14 to i64*
  %bf.load15 = load i64, i64* %16, align 8
  %bf.lshr16 = lshr i64 %bf.load15, 23
  %bf.clear17 = and i64 %bf.lshr16, 7
  %bf.cast18 = trunc i64 %bf.clear17 to i32
  %cmp19 = icmp eq i32 %bf.cast18, 3
  br i1 %cmp19, label %cond.true.21, label %cond.false.23

cond.true.21:                                     ; preds = %lor.lhs.false, %cond.end
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 61
  %18 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %18, i32 0, i32 12
  %tty22 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %19 = load %struct.tty_display_info*, %struct.tty_display_info** %tty22, align 8
  br label %cond.end.24

cond.false.23:                                    ; preds = %lor.lhs.false
  call void @emacs_abort() #9
  unreachable
                                                  ; No predecessors!
  br label %cond.end.24

cond.end.24:                                      ; preds = %20, %cond.true.21
  %cond25 = phi %struct.tty_display_info* [ %19, %cond.true.21 ], [ null, %20 ]
  store %struct.tty_display_info* %cond25, %struct.tty_display_info** %tty, align 8
  %21 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_attribute_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %21, i32 0, i32 59
  %22 = load i8*, i8** %TS_exit_attribute_mode, align 8
  %tobool = icmp ne i8* %22, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.24
  %23 = load %struct.face*, %struct.face** %face, align 8
  %tty_bold_p = getelementptr inbounds %struct.face, %struct.face* %23, i32 0, i32 13
  %24 = bitcast i24* %tty_bold_p to i32*
  %bf.load26 = load i32, i32* %24, align 8
  %bf.lshr27 = lshr i32 %bf.load26, 13
  %bf.clear28 = and i32 %bf.lshr27, 1
  %bf.cast29 = trunc i32 %bf.clear28 to i1
  br i1 %bf.cast29, label %if.then.49, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %if.then
  %25 = load %struct.face*, %struct.face** %face, align 8
  %tty_italic_p = getelementptr inbounds %struct.face, %struct.face* %25, i32 0, i32 13
  %26 = bitcast i24* %tty_italic_p to i32*
  %bf.load32 = load i32, i32* %26, align 8
  %bf.lshr33 = lshr i32 %bf.load32, 14
  %bf.clear34 = and i32 %bf.lshr33, 1
  %bf.cast35 = trunc i32 %bf.clear34 to i1
  br i1 %bf.cast35, label %if.then.49, label %lor.lhs.false.37

lor.lhs.false.37:                                 ; preds = %lor.lhs.false.31
  %27 = load %struct.face*, %struct.face** %face, align 8
  %tty_reverse_p = getelementptr inbounds %struct.face, %struct.face* %27, i32 0, i32 13
  %28 = bitcast i24* %tty_reverse_p to i32*
  %bf.load38 = load i32, i32* %28, align 8
  %bf.lshr39 = lshr i32 %bf.load38, 16
  %bf.clear40 = and i32 %bf.lshr39, 1
  %bf.cast41 = trunc i32 %bf.clear40 to i1
  br i1 %bf.cast41, label %if.then.49, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %lor.lhs.false.37
  %29 = load %struct.face*, %struct.face** %face, align 8
  %tty_underline_p = getelementptr inbounds %struct.face, %struct.face* %29, i32 0, i32 13
  %30 = bitcast i24* %tty_underline_p to i32*
  %bf.load44 = load i32, i32* %30, align 8
  %bf.lshr45 = lshr i32 %bf.load44, 15
  %bf.clear46 = and i32 %bf.lshr45, 1
  %bf.cast47 = trunc i32 %bf.clear46 to i1
  br i1 %bf.cast47, label %if.then.49, label %if.end.61

if.then.49:                                       ; preds = %lor.lhs.false.43, %lor.lhs.false.37, %lor.lhs.false.31, %if.then
  br label %do.body

do.body:                                          ; preds = %if.then.49
  %31 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_attribute_mode50 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %31, i32 0, i32 59
  %32 = load i8*, i8** %TS_exit_attribute_mode50, align 8
  %tobool51 = icmp ne i8* %32, null
  br i1 %tobool51, label %if.then.52, label %if.end

if.then.52:                                       ; preds = %do.body
  %33 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %33, %struct.tty_display_info** @current_tty, align 8
  %34 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_attribute_mode53 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %34, i32 0, i32 59
  %35 = load i8*, i8** %TS_exit_attribute_mode53, align 8
  call void @tputs(i8* %35, i32 1, i32 (i32)* @cmputc)
  br label %if.end

if.end:                                           ; preds = %if.then.52, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %36 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_attribute_mode54 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %36, i32 0, i32 59
  %37 = load i8*, i8** %TS_exit_attribute_mode54, align 8
  %38 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_end_standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %38, i32 0, i32 40
  %39 = load i8*, i8** %TS_end_standout_mode, align 8
  %call = call i32 @strcmp(i8* %37, i8* %39) #10
  %cmp55 = icmp eq i32 %call, 0
  br i1 %cmp55, label %if.then.57, label %if.end.60

if.then.57:                                       ; preds = %do.end
  %40 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %40, i32 0, i32 72
  %bf.load58 = load i8, i8* %standout_mode, align 8
  %bf.clear59 = and i8 %bf.load58, -9
  store i8 %bf.clear59, i8* %standout_mode, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.57, %do.end
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %lor.lhs.false.43
  br label %if.end.76

if.else:                                          ; preds = %cond.end.24
  %41 = load %struct.face*, %struct.face** %face, align 8
  %tty_underline_p62 = getelementptr inbounds %struct.face, %struct.face* %41, i32 0, i32 13
  %42 = bitcast i24* %tty_underline_p62 to i32*
  %bf.load63 = load i32, i32* %42, align 8
  %bf.lshr64 = lshr i32 %bf.load63, 15
  %bf.clear65 = and i32 %bf.lshr64, 1
  %bf.cast66 = trunc i32 %bf.clear65 to i1
  br i1 %bf.cast66, label %if.then.67, label %if.end.75

if.then.67:                                       ; preds = %if.else
  br label %do.body.68

do.body.68:                                       ; preds = %if.then.67
  %43 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_underline_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %43, i32 0, i32 55
  %44 = load i8*, i8** %TS_exit_underline_mode, align 8
  %tobool69 = icmp ne i8* %44, null
  br i1 %tobool69, label %if.then.70, label %if.end.73

if.then.70:                                       ; preds = %do.body.68
  %45 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %45, %struct.tty_display_info** @current_tty, align 8
  %46 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_exit_underline_mode71 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %46, i32 0, i32 55
  %47 = load i8*, i8** %TS_exit_underline_mode71, align 8
  %48 = load i64, i64* @selected_frame, align 8
  %sub = sub nsw i64 %48, 5
  %49 = inttoptr i64 %sub to i8*
  %50 = bitcast i8* %49 to %struct.frame*
  %total_lines = getelementptr inbounds %struct.frame, %struct.frame* %50, i32 0, i32 39
  %51 = load i32, i32* %total_lines, align 4
  %52 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %Wcm = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %52, i32 0, i32 10
  %53 = load %struct.cm*, %struct.cm** %Wcm, align 8
  %cm_curY = getelementptr inbounds %struct.cm, %struct.cm* %53, i32 0, i32 0
  %54 = load i32, i32* %cm_curY, align 4
  %sub72 = sub nsw i32 %51, %54
  call void @tputs(i8* %47, i32 %sub72, i32 (i32)* @cmputc)
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.70, %do.body.68
  br label %do.end.74

do.end.74:                                        ; preds = %if.end.73
  br label %if.end.75

if.end.75:                                        ; preds = %do.end.74, %if.else
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.61
  %55 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TN_max_colors = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %55, i32 0, i32 61
  %56 = load i32, i32* %TN_max_colors, align 4
  %cmp77 = icmp sgt i32 %56, 0
  br i1 %cmp77, label %land.lhs.true, label %if.end.99

land.lhs.true:                                    ; preds = %if.end.76
  %57 = load %struct.face*, %struct.face** %face, align 8
  %foreground = getelementptr inbounds %struct.face, %struct.face* %57, i32 0, i32 4
  %58 = load i64, i64* %foreground, align 8
  %cmp79 = icmp ne i64 %58, -1
  br i1 %cmp79, label %land.lhs.true.81, label %lor.lhs.false.85

land.lhs.true.81:                                 ; preds = %land.lhs.true
  %59 = load %struct.face*, %struct.face** %face, align 8
  %foreground82 = getelementptr inbounds %struct.face, %struct.face* %59, i32 0, i32 4
  %60 = load i64, i64* %foreground82, align 8
  %cmp83 = icmp ne i64 %60, -2
  br i1 %cmp83, label %if.then.92, label %lor.lhs.false.85

lor.lhs.false.85:                                 ; preds = %land.lhs.true.81, %land.lhs.true
  %61 = load %struct.face*, %struct.face** %face, align 8
  %background = getelementptr inbounds %struct.face, %struct.face* %61, i32 0, i32 5
  %62 = load i64, i64* %background, align 8
  %cmp86 = icmp ne i64 %62, -1
  br i1 %cmp86, label %land.lhs.true.88, label %if.end.99

land.lhs.true.88:                                 ; preds = %lor.lhs.false.85
  %63 = load %struct.face*, %struct.face** %face, align 8
  %background89 = getelementptr inbounds %struct.face, %struct.face* %63, i32 0, i32 5
  %64 = load i64, i64* %background89, align 8
  %cmp90 = icmp ne i64 %64, -3
  br i1 %cmp90, label %if.then.92, label %if.end.99

if.then.92:                                       ; preds = %land.lhs.true.88, %land.lhs.true.81
  br label %do.body.93

do.body.93:                                       ; preds = %if.then.92
  %65 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_orig_pair = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %65, i32 0, i32 63
  %66 = load i8*, i8** %TS_orig_pair, align 8
  %tobool94 = icmp ne i8* %66, null
  br i1 %tobool94, label %if.then.95, label %if.end.97

if.then.95:                                       ; preds = %do.body.93
  %67 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  store %struct.tty_display_info* %67, %struct.tty_display_info** @current_tty, align 8
  %68 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %TS_orig_pair96 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %68, i32 0, i32 63
  %69 = load i8*, i8** %TS_orig_pair96, align 8
  call void @tputs(i8* %69, i32 1, i32 (i32)* @cmputc)
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.95, %do.body.93
  br label %do.end.98

do.end.98:                                        ; preds = %if.end.97
  br label %if.end.99

if.end.99:                                        ; preds = %do.end.98, %land.lhs.true.88, %lor.lhs.false.85, %if.end.76
  ret void
}

declare void @cmcheckmagic(%struct.tty_display_info*) #1

; Function Attrs: nounwind uwtable
define internal void @tty_toggle_highlight(%struct.tty_display_info* %tty) #0 {
entry:
  %tty.addr = alloca %struct.tty_display_info*, align 8
  store %struct.tty_display_info* %tty, %struct.tty_display_info** %tty.addr, align 8
  %0 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  %standout_mode = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %0, i32 0, i32 72
  %bf.load = load i8, i8* %standout_mode, align 8
  %bf.lshr = lshr i8 %bf.load, 3
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  call void @tty_turn_off_highlight(%struct.tty_display_info* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct.tty_display_info*, %struct.tty_display_info** %tty.addr, align 8
  call void @tty_turn_on_highlight(%struct.tty_display_info* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare zeroext i1 @face_tty_specified_color(i64) #1

; Function Attrs: nounwind uwtable
define internal void @tty_send_additional_strings(%struct.terminal* %terminal, i64 %sym) #0 {
entry:
  %terminal.addr = alloca %struct.terminal*, align 8
  %sym.addr = alloca i64, align 8
  %lisp_terminal = alloca i64, align 8
  %extra_codes = alloca i64, align 8
  %tty = alloca %struct.tty_display_info*, align 8
  %string = alloca i64, align 8
  store %struct.terminal* %terminal, %struct.terminal** %terminal.addr, align 8
  store i64 %sym, i64* %sym.addr, align 8
  %0 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %display_info = getelementptr inbounds %struct.terminal, %struct.terminal* %0, i32 0, i32 12
  %tty1 = bitcast %union.display_info* %display_info to %struct.tty_display_info**
  %1 = load %struct.tty_display_info*, %struct.tty_display_info** %tty1, align 8
  store %struct.tty_display_info* %1, %struct.tty_display_info** %tty, align 8
  %2 = load %struct.terminal*, %struct.terminal** %terminal.addr, align 8
  %3 = bitcast %struct.terminal* %2 to i8*
  %call = call i64 @make_lisp_ptr(i8* %3, i32 5)
  store i64 %call, i64* %lisp_terminal, align 8
  %4 = load i64, i64* %lisp_terminal, align 8
  %5 = load i64, i64* %sym.addr, align 8
  %call2 = call i64 @Fterminal_parameter(i64 %4, i64 %5)
  store i64 %call2, i64* %extra_codes, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i64, i64* %extra_codes, align 8
  %and = and i64 %6, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %extra_codes, align 8
  %sub = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car, align 8
  store i64 %10, i64* %string, align 8
  %11 = load i64, i64* %string, align 8
  %call4 = call zeroext i1 @STRINGP(i64 %11)
  br i1 %call4, label %if.then, label %if.end.13

if.then:                                          ; preds = %for.body
  %12 = load i64, i64* %string, align 8
  %call5 = call i8* @SDATA(i64 %12)
  %13 = load i64, i64* %string, align 8
  %call6 = call i64 @SBYTES(i64 %13)
  %14 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %output = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %14, i32 0, i32 4
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %output, align 8
  %call7 = call i64 @fwrite(i8* %call5, i64 1, i64 %call6, %struct._IO_FILE* %15)
  %16 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %16, i32 0, i32 5
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript, align 8
  %tobool = icmp ne %struct._IO_FILE* %17, null
  br i1 %tobool, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then
  %18 = load i64, i64* %string, align 8
  %call9 = call i8* @SDATA(i64 %18)
  %19 = load i64, i64* %string, align 8
  %call10 = call i64 @SBYTES(i64 %19)
  %20 = load %struct.tty_display_info*, %struct.tty_display_info** %tty, align 8
  %termscript11 = getelementptr inbounds %struct.tty_display_info, %struct.tty_display_info* %20, i32 0, i32 5
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %termscript11, align 8
  %call12 = call i64 @fwrite(i8* %call9, i64 1, i64 %call10, %struct._IO_FILE* %21)
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then
  br label %if.end.13

if.end.13:                                        ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.13
  %22 = load i64, i64* %extra_codes, align 8
  %sub14 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub14 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 1
  %cdr = bitcast %union.anon.11* %u to i64*
  %25 = load i64, i64* %cdr, align 8
  store i64 %25, i64* %extra_codes, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i64 @Fterminal_parameter(i64, i64) #1

; Function Attrs: nounwind
declare i32 @tcgetpgrp(i32) #5

; Function Attrs: nounwind
declare i32 @setsid() #5

declare void @dupstring(i8**, i8*) #1

declare i64 @internal_condition_case(i64 ()*, i64, i64 (i64)*) #1

; Function Attrs: nounwind uwtable
define internal i64 @term_get_fkeys_1() #0 {
entry:
  %i = alloca i32, align 4
  %address = alloca i8**, align 8
  %kboard = alloca %struct.kboard*, align 8
  %sequence = alloca i8*, align 8
  %k_semi = alloca i8*, align 8
  %k0 = alloca i8*, align 8
  %k0_name = alloca i8*, align 8
  %fcap = alloca [3 x i8], align 1
  %fkey = alloca [4 x i8], align 1
  %sequence68 = alloca i8*, align 8
  %sequence87 = alloca i8*, align 8
  %sequence101 = alloca i8*, align 8
  %sequence115 = alloca i8*, align 8
  %sequence129 = alloca i8*, align 8
  %0 = load i8**, i8*** @term_get_fkeys_address, align 8
  store i8** %0, i8*** %address, align 8
  %1 = load %struct.kboard*, %struct.kboard** @term_get_fkeys_kboard, align 8
  store %struct.kboard* %1, %struct.kboard** %kboard, align 8
  %2 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_ = getelementptr inbounds %struct.kboard, %struct.kboard* %2, i32 0, i32 19
  %3 = load i64, i64* %Vinput_decode_map_, align 8
  %call = call i64 @get_keymap(i64 %3, i1 zeroext false, i1 zeroext false)
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %call, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %call3 = call i64 @Fmake_sparse_keymap(i64 %call2)
  call void @kset_input_decode_map(%struct.kboard* %4, i64 %call3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %conv = sext i32 %5 to i64
  %cmp4 = icmp ult i64 %conv, 58
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds [58 x %struct.fkey_table], [58 x %struct.fkey_table]* @keys, i32 0, i64 %idxprom
  %cap = getelementptr inbounds %struct.fkey_table, %struct.fkey_table* %arrayidx, i32 0, i32 0
  %7 = load i8*, i8** %cap, align 8
  %8 = load i8**, i8*** %address, align 8
  %call6 = call i8* @tgetstr(i8* %7, i8** %8)
  store i8* %call6, i8** %sequence, align 8
  %9 = load i8*, i8** %sequence, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.then.7, label %if.end.15

if.then.7:                                        ; preds = %for.body
  %10 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_8 = getelementptr inbounds %struct.kboard, %struct.kboard* %10, i32 0, i32 19
  %11 = load i64, i64* %Vinput_decode_map_8, align 8
  %12 = load i8*, i8** %sequence, align 8
  %call9 = call i64 @build_string(i8* %12)
  %13 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %13 to i64
  %arrayidx11 = getelementptr inbounds [58 x %struct.fkey_table], [58 x %struct.fkey_table]* @keys, i32 0, i64 %idxprom10
  %name = getelementptr inbounds %struct.fkey_table, %struct.fkey_table* %arrayidx11, i32 0, i32 1
  %14 = load i8*, i8** %name, align 8
  %call12 = call i64 @intern(i8* %14)
  %call13 = call i64 @Fmake_vector(i64 6, i64 %call12)
  %call14 = call i64 @Fdefine_key(i64 %11, i64 %call9, i64 %call13)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.7, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i8**, i8*** %address, align 8
  %call16 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i32 0, i32 0), i8** %16)
  store i8* %call16, i8** %k_semi, align 8
  %17 = load i8**, i8*** %address, align 8
  %call17 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.129, i32 0, i32 0), i8** %17)
  store i8* %call17, i8** %k0, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i8** %k0_name, align 8
  %18 = load i8*, i8** %k_semi, align 8
  %tobool18 = icmp ne i8* %18, null
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %for.end
  %19 = load i8*, i8** %k0, align 8
  %tobool20 = icmp ne i8* %19, null
  br i1 %tobool20, label %if.then.21, label %if.end.27

if.then.21:                                       ; preds = %if.then.19
  %20 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_22 = getelementptr inbounds %struct.kboard, %struct.kboard* %20, i32 0, i32 19
  %21 = load i64, i64* %Vinput_decode_map_22, align 8
  %22 = load i8*, i8** %k0, align 8
  %call23 = call i64 @build_string(i8* %22)
  %call24 = call i64 @intern(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0))
  %call25 = call i64 @Fmake_vector(i64 6, i64 %call24)
  %call26 = call i64 @Fdefine_key(i64 %21, i64 %call23, i64 %call25)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.21, %if.then.19
  %23 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_28 = getelementptr inbounds %struct.kboard, %struct.kboard* %23, i32 0, i32 19
  %24 = load i64, i64* %Vinput_decode_map_28, align 8
  %25 = load i8*, i8** %k_semi, align 8
  %call29 = call i64 @build_string(i8* %25)
  %call30 = call i64 @intern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0))
  %call31 = call i64 @Fmake_vector(i64 6, i64 %call30)
  %call32 = call i64 @Fdefine_key(i64 %24, i64 %call29, i64 %call31)
  br label %if.end.41

if.else:                                          ; preds = %for.end
  %26 = load i8*, i8** %k0, align 8
  %tobool33 = icmp ne i8* %26, null
  br i1 %tobool33, label %if.then.34, label %if.end.40

if.then.34:                                       ; preds = %if.else
  %27 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_35 = getelementptr inbounds %struct.kboard, %struct.kboard* %27, i32 0, i32 19
  %28 = load i64, i64* %Vinput_decode_map_35, align 8
  %29 = load i8*, i8** %k0, align 8
  %call36 = call i64 @build_string(i8* %29)
  %30 = load i8*, i8** %k0_name, align 8
  %call37 = call i64 @intern(i8* %30)
  %call38 = call i64 @Fmake_vector(i64 6, i64 %call37)
  %call39 = call i64 @Fdefine_key(i64 %28, i64 %call36, i64 %call38)
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.34, %if.else
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.27
  %arrayidx42 = getelementptr inbounds [3 x i8], [3 x i8]* %fcap, i32 0, i64 0
  store i8 70, i8* %arrayidx42, align 1
  %arrayidx43 = getelementptr inbounds [3 x i8], [3 x i8]* %fcap, i32 0, i64 2
  store i8 0, i8* %arrayidx43, align 1
  store i32 11, i32* %i, align 4
  br label %for.cond.44

for.cond.44:                                      ; preds = %for.inc.81, %if.end.41
  %31 = load i32, i32* %i, align 4
  %cmp45 = icmp slt i32 %31, 64
  br i1 %cmp45, label %for.body.47, label %for.end.83

for.body.47:                                      ; preds = %for.cond.44
  %32 = load i32, i32* %i, align 4
  %cmp48 = icmp sle i32 %32, 19
  br i1 %cmp48, label %if.then.50, label %if.else.53

if.then.50:                                       ; preds = %for.body.47
  %33 = load i32, i32* %i, align 4
  %add = add nsw i32 49, %33
  %sub = sub nsw i32 %add, 11
  %conv51 = trunc i32 %sub to i8
  %arrayidx52 = getelementptr inbounds [3 x i8], [3 x i8]* %fcap, i32 0, i64 1
  store i8 %conv51, i8* %arrayidx52, align 1
  br label %if.end.67

if.else.53:                                       ; preds = %for.body.47
  %34 = load i32, i32* %i, align 4
  %cmp54 = icmp sle i32 %34, 45
  br i1 %cmp54, label %if.then.56, label %if.else.61

if.then.56:                                       ; preds = %if.else.53
  %35 = load i32, i32* %i, align 4
  %add57 = add nsw i32 65, %35
  %sub58 = sub nsw i32 %add57, 20
  %conv59 = trunc i32 %sub58 to i8
  %arrayidx60 = getelementptr inbounds [3 x i8], [3 x i8]* %fcap, i32 0, i64 1
  store i8 %conv59, i8* %arrayidx60, align 1
  br label %if.end.66

if.else.61:                                       ; preds = %if.else.53
  %36 = load i32, i32* %i, align 4
  %add62 = add nsw i32 97, %36
  %sub63 = sub nsw i32 %add62, 46
  %conv64 = trunc i32 %sub63 to i8
  %arrayidx65 = getelementptr inbounds [3 x i8], [3 x i8]* %fcap, i32 0, i64 1
  store i8 %conv64, i8* %arrayidx65, align 1
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.61, %if.then.56
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.50
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %fcap, i32 0, i32 0
  %37 = load i8**, i8*** %address, align 8
  %call69 = call i8* @tgetstr(i8* %arraydecay, i8** %37)
  store i8* %call69, i8** %sequence68, align 8
  %38 = load i8*, i8** %sequence68, align 8
  %tobool70 = icmp ne i8* %38, null
  br i1 %tobool70, label %if.then.71, label %if.end.80

if.then.71:                                       ; preds = %if.end.67
  %arraydecay72 = getelementptr inbounds [4 x i8], [4 x i8]* %fkey, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %call73 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132, i32 0, i32 0), i32 %39) #3
  %40 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_74 = getelementptr inbounds %struct.kboard, %struct.kboard* %40, i32 0, i32 19
  %41 = load i64, i64* %Vinput_decode_map_74, align 8
  %42 = load i8*, i8** %sequence68, align 8
  %call75 = call i64 @build_string(i8* %42)
  %arraydecay76 = getelementptr inbounds [4 x i8], [4 x i8]* %fkey, i32 0, i32 0
  %call77 = call i64 @intern(i8* %arraydecay76)
  %call78 = call i64 @Fmake_vector(i64 6, i64 %call77)
  %call79 = call i64 @Fdefine_key(i64 %41, i64 %call75, i64 %call78)
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.71, %if.end.67
  br label %for.inc.81

for.inc.81:                                       ; preds = %if.end.80
  %43 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %43, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond.44

for.end.83:                                       ; preds = %for.cond.44
  %44 = load i8**, i8*** %address, align 8
  %call84 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0), i8** %44)
  %tobool85 = icmp ne i8* %call84, null
  br i1 %tobool85, label %if.end.97, label %if.then.86

if.then.86:                                       ; preds = %for.end.83
  %45 = load i8**, i8*** %address, align 8
  %call88 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0), i8** %45)
  store i8* %call88, i8** %sequence87, align 8
  %46 = load i8*, i8** %sequence87, align 8
  %tobool89 = icmp ne i8* %46, null
  br i1 %tobool89, label %if.then.90, label %if.end.96

if.then.90:                                       ; preds = %if.then.86
  %47 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_91 = getelementptr inbounds %struct.kboard, %struct.kboard* %47, i32 0, i32 19
  %48 = load i64, i64* %Vinput_decode_map_91, align 8
  %49 = load i8*, i8** %sequence87, align 8
  %call92 = call i64 @build_string(i8* %49)
  %call93 = call i64 @intern(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.135, i32 0, i32 0))
  %call94 = call i64 @Fmake_vector(i64 6, i64 %call93)
  %call95 = call i64 @Fdefine_key(i64 %48, i64 %call92, i64 %call94)
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.90, %if.then.86
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %for.end.83
  %50 = load i8**, i8*** %address, align 8
  %call98 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8** %50)
  %tobool99 = icmp ne i8* %call98, null
  br i1 %tobool99, label %if.end.111, label %if.then.100

if.then.100:                                      ; preds = %if.end.97
  %51 = load i8**, i8*** %address, align 8
  %call102 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i32 0, i32 0), i8** %51)
  store i8* %call102, i8** %sequence101, align 8
  %52 = load i8*, i8** %sequence101, align 8
  %tobool103 = icmp ne i8* %52, null
  br i1 %tobool103, label %if.then.104, label %if.end.110

if.then.104:                                      ; preds = %if.then.100
  %53 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_105 = getelementptr inbounds %struct.kboard, %struct.kboard* %53, i32 0, i32 19
  %54 = load i64, i64* %Vinput_decode_map_105, align 8
  %55 = load i8*, i8** %sequence101, align 8
  %call106 = call i64 @build_string(i8* %55)
  %call107 = call i64 @intern(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.138, i32 0, i32 0))
  %call108 = call i64 @Fmake_vector(i64 6, i64 %call107)
  %call109 = call i64 @Fdefine_key(i64 %54, i64 %call106, i64 %call108)
  br label %if.end.110

if.end.110:                                       ; preds = %if.then.104, %if.then.100
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %if.end.97
  %56 = load i8**, i8*** %address, align 8
  %call112 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0), i8** %56)
  %tobool113 = icmp ne i8* %call112, null
  br i1 %tobool113, label %if.end.125, label %if.then.114

if.then.114:                                      ; preds = %if.end.111
  %57 = load i8**, i8*** %address, align 8
  %call116 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.140, i32 0, i32 0), i8** %57)
  store i8* %call116, i8** %sequence115, align 8
  %58 = load i8*, i8** %sequence115, align 8
  %tobool117 = icmp ne i8* %58, null
  br i1 %tobool117, label %if.then.118, label %if.end.124

if.then.118:                                      ; preds = %if.then.114
  %59 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_119 = getelementptr inbounds %struct.kboard, %struct.kboard* %59, i32 0, i32 19
  %60 = load i64, i64* %Vinput_decode_map_119, align 8
  %61 = load i8*, i8** %sequence115, align 8
  %call120 = call i64 @build_string(i8* %61)
  %call121 = call i64 @intern(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.141, i32 0, i32 0))
  %call122 = call i64 @Fmake_vector(i64 6, i64 %call121)
  %call123 = call i64 @Fdefine_key(i64 %60, i64 %call120, i64 %call122)
  br label %if.end.124

if.end.124:                                       ; preds = %if.then.118, %if.then.114
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.124, %if.end.111
  %62 = load i8**, i8*** %address, align 8
  %call126 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142, i32 0, i32 0), i8** %62)
  %tobool127 = icmp ne i8* %call126, null
  br i1 %tobool127, label %if.end.139, label %if.then.128

if.then.128:                                      ; preds = %if.end.125
  %63 = load i8**, i8*** %address, align 8
  %call130 = call i8* @tgetstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i8** %63)
  store i8* %call130, i8** %sequence129, align 8
  %64 = load i8*, i8** %sequence129, align 8
  %tobool131 = icmp ne i8* %64, null
  br i1 %tobool131, label %if.then.132, label %if.end.138

if.then.132:                                      ; preds = %if.then.128
  %65 = load %struct.kboard*, %struct.kboard** %kboard, align 8
  %Vinput_decode_map_133 = getelementptr inbounds %struct.kboard, %struct.kboard* %65, i32 0, i32 19
  %66 = load i64, i64* %Vinput_decode_map_133, align 8
  %67 = load i8*, i8** %sequence129, align 8
  %call134 = call i64 @build_string(i8* %67)
  %call135 = call i64 @intern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.144, i32 0, i32 0))
  %call136 = call i64 @Fmake_vector(i64 6, i64 %call135)
  %call137 = call i64 @Fdefine_key(i64 %66, i64 %call134, i64 %call136)
  br label %if.end.138

if.end.138:                                       ; preds = %if.then.132, %if.then.128
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.138, %if.end.125
  %call140 = call i64 @builtin_lisp_symbol(i32 0)
  ret i64 %call140
}

; Function Attrs: nounwind readnone
declare i64 @Fidentity(i64) #6

declare i64 @get_keymap(i64, i1 zeroext, i1 zeroext) #1

declare void @kset_input_decode_map(%struct.kboard*, i64) #1

declare i64 @Fmake_sparse_keymap(i64) #1

declare i64 @Fdefine_key(i64, i64, i64) #1

declare i64 @Fmake_vector(i64, i64) #1

; Function Attrs: noreturn
declare void @verror(i8*, %struct.__va_list_tag*) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: noreturn nounwind
declare void @exit(i32) #8

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind readnone }
attributes #12 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
